#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 82216380h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216380( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216380) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216380);
		  /* 82216380h */ case    0:  		/* addi R1, R1, 144 */
		/* 82216380h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82216380h case    0:*/		return 0x82216384;
		  /* 82216384h */ case    1:  		/* b -1593576 */
		/* 82216384h case    1:*/		return 0x8209129C;
		/* 82216384h case    1:*/		return 0x82216388;
		  /* 82216388h */ case    2:  		/* li R11, 73 */
		/* 82216388h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x49);
		/* 82216388h case    2:*/		return 0x8221638C;
		  /* 8221638Ch */ case    3:  		/* li R10, 1 */
		/* 8221638Ch case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8221638Ch case    3:*/		return 0x82216390;
		  /* 82216390h */ case    4:  		/* sth R11, <#[R7 + 2]> */
		/* 82216390h case    4:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R7 + 0x00000002) );
		/* 82216390h case    4:*/		return 0x82216394;
		  /* 82216394h */ case    5:  		/* lwz R11, <#[R7]> */
		/* 82216394h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 82216394h case    5:*/		return 0x82216398;
		  /* 82216398h */ case    6:  		/* rlwinm R11, R11, 0, 16, 2 */
		/* 82216398h case    6:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R11,regs.R11);
		/* 82216398h case    6:*/		return 0x8221639C;
		  /* 8221639Ch */ case    7:  		/* stw R11, <#[R7]> */
		/* 8221639Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 8221639Ch case    7:*/		return 0x822163A0;
		  /* 822163A0h */ case    8:  		/* addi R11, R7, 4 */
		/* 822163A0h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R7,0x4);
		/* 822163A0h case    8:*/		return 0x822163A4;
		  /* 822163A4h */ case    9:  		/* sth R6, <#[R7 + 6]> */
		/* 822163A4h case    9:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R7 + 0x00000006) );
		/* 822163A4h case    9:*/		return 0x822163A8;
		  /* 822163A8h */ case   10:  		/* lwz R9, <#[R7 + 4]> */
		/* 822163A8h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000004) );
		/* 822163A8h case   10:*/		return 0x822163AC;
		  /* 822163ACh */ case   11:  		/* rlwimi R9, R10, 18, 8, 15 */
		/* 822163ACh case   11:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R10);
		/* 822163ACh case   11:*/		return 0x822163B0;
		  /* 822163B0h */ case   12:  		/* stw R9, <#[R7 + 4]> */
		/* 822163B0h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + 0x00000004) );
		/* 822163B0h case   12:*/		return 0x822163B4;
		  /* 822163B4h */ case   13:  		/* addi R11, R11, 4 */
		/* 822163B4h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822163B4h case   13:*/		return 0x822163B8;
		  /* 822163B8h */ case   14:  		/* lwz R9, <#[R3]> */
		/* 822163B8h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 822163B8h case   14:*/		return 0x822163BC;
		  /* 822163BCh */ case   15:  		/* sth R9, <#[R11 + 2]> */
		/* 822163BCh case   15:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 822163BCh case   15:*/		return 0x822163C0;
		  /* 822163C0h */ case   16:  		/* lwz R9, <#[R11]> */
		/* 822163C0h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822163C0h case   16:*/		return 0x822163C4;
		  /* 822163C4h */ case   17:  		/* lwz R8, <#[R3]> */
		/* 822163C4h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000000) );
		/* 822163C4h case   17:*/		return 0x822163C8;
		  /* 822163C8h */ case   18:  		/* rlwimi R8, R9, 0, 16, 9 */
		/* 822163C8h case   18:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R8,regs.R9);
		/* 822163C8h case   18:*/		return 0x822163CC;
		  /* 822163CCh */ case   19:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 822163CCh case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 822163CCh case   19:*/		return 0x822163D0;
		  /* 822163D0h */ case   20:  		/* stw R8, <#[R11]> */
		/* 822163D0h case   20:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822163D0h case   20:*/		return 0x822163D4;
		  /* 822163D4h */ case   21:  		/* lwz R8, <#[R3]> */
		/* 822163D4h case   21:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000000) );
		/* 822163D4h case   21:*/		return 0x822163D8;
		  /* 822163D8h */ case   22:  		/* rlwimi R8, R9, 0, 9, 7 */
		/* 822163D8h case   22:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R8,regs.R9);
		/* 822163D8h case   22:*/		return 0x822163DC;
		  /* 822163DCh */ case   23:  		/* oris R9, R8, 64 */
		/* 822163DCh case   23:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R8,0x40);
		/* 822163DCh case   23:*/		return 0x822163E0;
		  /* 822163E0h */ case   24:  		/* stw R9, <#[R11]> */
		/* 822163E0h case   24:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822163E0h case   24:*/		return 0x822163E4;
		  /* 822163E4h */ case   25:  		/* lwzu R9, <#[R11 + 4]> */
		/* 822163E4h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822163E4h case   25:*/		return 0x822163E8;
		  /* 822163E8h */ case   26:  		/* lwz R8, <#[R4]> */
		/* 822163E8h case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 822163E8h case   26:*/		return 0x822163EC;
		  /* 822163ECh */ case   27:  		/* rlwimi R8, R9, 0, 0, 28 */
		/* 822163ECh case   27:*/		cpu::op::rlwimi<0,0,0,28>(regs,&regs.R8,regs.R9);
		/* 822163ECh case   27:*/		return 0x822163F0;
		  /* 822163F0h */ case   28:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 822163F0h case   28:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 822163F0h case   28:*/		return 0x822163F4;
		  /* 822163F4h */ case   29:  		/* stw R8, <#[R11]> */
		/* 822163F4h case   29:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822163F4h case   29:*/		return 0x822163F8;
		  /* 822163F8h */ case   30:  		/* lwz R8, <#[R4]> */
		/* 822163F8h case   30:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 822163F8h case   30:*/		return 0x822163FC;
		  /* 822163FCh */ case   31:  		/* rlwimi R8, R9, 0, 28, 24 */
		/* 822163FCh case   31:*/		cpu::op::rlwimi<0,0,28,24>(regs,&regs.R8,regs.R9);
		/* 822163FCh case   31:*/		return 0x82216400;
		  /* 82216400h */ case   32:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82216400h case   32:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82216400h case   32:*/		return 0x82216404;
		  /* 82216404h */ case   33:  		/* stw R8, <#[R11]> */
		/* 82216404h case   33:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82216404h case   33:*/		return 0x82216408;
		  /* 82216408h */ case   34:  		/* lwz R8, <#[R4]> */
		/* 82216408h case   34:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 82216408h case   34:*/		return 0x8221640C;
		  /* 8221640Ch */ case   35:  		/* rlwimi R8, R9, 0, 24, 20 */
		/* 8221640Ch case   35:*/		cpu::op::rlwimi<0,0,24,20>(regs,&regs.R8,regs.R9);
		/* 8221640Ch case   35:*/		return 0x82216410;
		  /* 82216410h */ case   36:  		/* rlwinm R9, R8, 0, 0, 31 */
		/* 82216410h case   36:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R8);
		/* 82216410h case   36:*/		return 0x82216414;
		  /* 82216414h */ case   37:  		/* stw R8, <#[R11]> */
		/* 82216414h case   37:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82216414h case   37:*/		return 0x82216418;
		  /* 82216418h */ case   38:  		/* lwz R8, <#[R4]> */
		/* 82216418h case   38:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 82216418h case   38:*/		return 0x8221641C;
		  /* 8221641Ch */ case   39:  		/* rlwimi R8, R9, 0, 20, 16 */
		/* 8221641Ch case   39:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R8,regs.R9);
		/* 8221641Ch case   39:*/		return 0x82216420;
		  /* 82216420h */ case   40:  		/* stw R8, <#[R11]> */
		/* 82216420h case   40:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82216420h case   40:*/		return 0x82216424;
		  /* 82216424h */ case   41:  		/* addi R11, R11, 4 */
		/* 82216424h case   41:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82216424h case   41:*/		return 0x82216428;
		  /* 82216428h */ case   42:  		/* lwz R9, <#[R3]> */
		/* 82216428h case   42:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 82216428h case   42:*/		return 0x8221642C;
		  /* 8221642Ch */ case   43:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 8221642Ch case   43:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 8221642Ch case   43:*/		return 0x82216430;
		  /* 82216430h */ case   44:  		/* bc 12, CR0_EQ, 16 */
		/* 82216430h case   44:*/		if ( regs.CR[0].eq ) { return 0x82216440;  }
		/* 82216430h case   44:*/		return 0x82216434;
		  /* 82216434h */ case   45:  		/* lwz R9, <#[R5]> */
		/* 82216434h case   45:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R5 + 0x00000000) );
		/* 82216434h case   45:*/		return 0x82216438;
		  /* 82216438h */ case   46:  		/* stw R9, <#[R11]> */
		/* 82216438h case   46:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216438h case   46:*/		return 0x8221643C;
		  /* 8221643Ch */ case   47:  		/* addi R11, R11, 4 */
		/* 8221643Ch case   47:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221643Ch case   47:*/		return 0x82216440;
	}
	return 0x82216440;
} // Block from 82216380h-82216440h (48 instructions)

//////////////////////////////////////////////////////
// Block at 82216440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216440);
		  /* 82216440h */ case    0:  		/* li R9, 0 */
		/* 82216440h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82216440h case    0:*/		return 0x82216444;
		  /* 82216444h */ case    1:  		/* li R8, 65 */
		/* 82216444h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x41);
		/* 82216444h case    1:*/		return 0x82216448;
		  /* 82216448h */ case    2:  		/* sth R9, <#[R11 + 2]> */
		/* 82216448h case    2:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82216448h case    2:*/		return 0x8221644C;
		  /* 8221644Ch */ case    3:  		/* li R9, 3 */
		/* 8221644Ch case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 8221644Ch case    3:*/		return 0x82216450;
		  /* 82216450h */ case    4:  		/* lwz R7, <#[R11]> */
		/* 82216450h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82216450h case    4:*/		return 0x82216454;
		  /* 82216454h */ case    5:  		/* rlwimi R7, R8, 16, 8, 15 */
		/* 82216454h case    5:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R7,regs.R8);
		/* 82216454h case    5:*/		return 0x82216458;
		  /* 82216458h */ case    6:  		/* stw R7, <#[R11]> */
		/* 82216458h case    6:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82216458h case    6:*/		return 0x8221645C;
		  /* 8221645Ch */ case    7:  		/* stb R10, <#[R11]> */
		/* 8221645Ch case    7:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221645Ch case    7:*/		return 0x82216460;
		  /* 82216460h */ case    8:  		/* addi R11, R11, 4 */
		/* 82216460h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82216460h case    8:*/		return 0x82216464;
		  /* 82216464h */ case    9:  		/* lwz R8, <#[R4]> */
		/* 82216464h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 82216464h case    9:*/		return 0x82216468;
		  /* 82216468h */ case   10:  		/* rlwinm. R8, R8, 0, 28, 28 */
		/* 82216468h case   10:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R8,regs.R8);
		/* 82216468h case   10:*/		return 0x8221646C;
		  /* 8221646Ch */ case   11:  		/* lwz R8, <#[R11]> */
		/* 8221646Ch case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221646Ch case   11:*/		return 0x82216470;
		  /* 82216470h */ case   12:  		/* bc 12, CR0_EQ, 12 */
		/* 82216470h case   12:*/		if ( regs.CR[0].eq ) { return 0x8221647C;  }
		/* 82216470h case   12:*/		return 0x82216474;
		  /* 82216474h */ case   13:  		/* rlwimi R8, R9, 0, 29, 31 */
		/* 82216474h case   13:*/		cpu::op::rlwimi<0,0,29,31>(regs,&regs.R8,regs.R9);
		/* 82216474h case   13:*/		return 0x82216478;
		  /* 82216478h */ case   14:  		/* b 8 */
		/* 82216478h case   14:*/		return 0x82216480;
		/* 82216478h case   14:*/		return 0x8221647C;
	}
	return 0x8221647C;
} // Block from 82216440h-8221647Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8221647Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221647C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221647C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221647C);
		  /* 8221647Ch */ case    0:  		/* rlwimi R8, R10, 0, 29, 31 */
		/* 8221647Ch case    0:*/		cpu::op::rlwimi<0,0,29,31>(regs,&regs.R8,regs.R10);
		/* 8221647Ch case    0:*/		return 0x82216480;
	}
	return 0x82216480;
} // Block from 8221647Ch-82216480h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82216480h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216480( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216480) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216480);
		  /* 82216480h */ case    0:  		/* stw R8, <#[R11]> */
		/* 82216480h case    0:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82216480h case    0:*/		return 0x82216484;
		  /* 82216484h */ case    1:  		/* lwz R8, <#[R4]> */
		/* 82216484h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 82216484h case    1:*/		return 0x82216488;
		  /* 82216488h */ case    2:  		/* rlwinm. R8, R8, 0, 24, 24 */
		/* 82216488h case    2:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R8,regs.R8);
		/* 82216488h case    2:*/		return 0x8221648C;
		  /* 8221648Ch */ case    3:  		/* lwz R8, <#[R11]> */
		/* 8221648Ch case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221648Ch case    3:*/		return 0x82216490;
		  /* 82216490h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 82216490h case    4:*/		if ( regs.CR[0].eq ) { return 0x8221649C;  }
		/* 82216490h case    4:*/		return 0x82216494;
		  /* 82216494h */ case    5:  		/* rlwimi R8, R9, 4, 25, 27 */
		/* 82216494h case    5:*/		cpu::op::rlwimi<0,4,25,27>(regs,&regs.R8,regs.R9);
		/* 82216494h case    5:*/		return 0x82216498;
		  /* 82216498h */ case    6:  		/* b 8 */
		/* 82216498h case    6:*/		return 0x822164A0;
		/* 82216498h case    6:*/		return 0x8221649C;
	}
	return 0x8221649C;
} // Block from 82216480h-8221649Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221649Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221649C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221649C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221649C);
		  /* 8221649Ch */ case    0:  		/* rlwimi R8, R10, 4, 25, 27 */
		/* 8221649Ch case    0:*/		cpu::op::rlwimi<0,4,25,27>(regs,&regs.R8,regs.R10);
		/* 8221649Ch case    0:*/		return 0x822164A0;
	}
	return 0x822164A0;
} // Block from 8221649Ch-822164A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822164A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822164A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822164A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822164A0);
		  /* 822164A0h */ case    0:  		/* stw R8, <#[R11]> */
		/* 822164A0h case    0:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822164A0h case    0:*/		return 0x822164A4;
		  /* 822164A4h */ case    1:  		/* lwz R8, <#[R4]> */
		/* 822164A4h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 822164A4h case    1:*/		return 0x822164A8;
		  /* 822164A8h */ case    2:  		/* rlwinm. R8, R8, 0, 20, 20 */
		/* 822164A8h case    2:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R8,regs.R8);
		/* 822164A8h case    2:*/		return 0x822164AC;
		  /* 822164ACh */ case    3:  		/* lwz R8, <#[R11]> */
		/* 822164ACh case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822164ACh case    3:*/		return 0x822164B0;
		  /* 822164B0h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 822164B0h case    4:*/		if ( regs.CR[0].eq ) { return 0x822164BC;  }
		/* 822164B0h case    4:*/		return 0x822164B4;
		  /* 822164B4h */ case    5:  		/* rlwimi R8, R9, 8, 21, 23 */
		/* 822164B4h case    5:*/		cpu::op::rlwimi<0,8,21,23>(regs,&regs.R8,regs.R9);
		/* 822164B4h case    5:*/		return 0x822164B8;
		  /* 822164B8h */ case    6:  		/* b 8 */
		/* 822164B8h case    6:*/		return 0x822164C0;
		/* 822164B8h case    6:*/		return 0x822164BC;
	}
	return 0x822164BC;
} // Block from 822164A0h-822164BCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 822164BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822164BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822164BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822164BC);
		  /* 822164BCh */ case    0:  		/* rlwimi R8, R10, 8, 21, 23 */
		/* 822164BCh case    0:*/		cpu::op::rlwimi<0,8,21,23>(regs,&regs.R8,regs.R10);
		/* 822164BCh case    0:*/		return 0x822164C0;
	}
	return 0x822164C0;
} // Block from 822164BCh-822164C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822164C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822164C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822164C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822164C0);
		  /* 822164C0h */ case    0:  		/* stw R8, <#[R11]> */
		/* 822164C0h case    0:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822164C0h case    0:*/		return 0x822164C4;
		  /* 822164C4h */ case    1:  		/* lwz R8, <#[R4]> */
		/* 822164C4h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000000) );
		/* 822164C4h case    1:*/		return 0x822164C8;
		  /* 822164C8h */ case    2:  		/* rlwinm. R8, R8, 0, 16, 16 */
		/* 822164C8h case    2:*/		cpu::op::rlwinm<1,0,16,16>(regs,&regs.R8,regs.R8);
		/* 822164C8h case    2:*/		return 0x822164CC;
		  /* 822164CCh */ case    3:  		/* bc 12, CR0_EQ, 20 */
		/* 822164CCh case    3:*/		if ( regs.CR[0].eq ) { return 0x822164E0;  }
		/* 822164CCh case    3:*/		return 0x822164D0;
		  /* 822164D0h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 822164D0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822164D0h case    4:*/		return 0x822164D4;
		  /* 822164D4h */ case    5:  		/* rlwimi R10, R9, 12, 17, 19 */
		/* 822164D4h case    5:*/		cpu::op::rlwimi<0,12,17,19>(regs,&regs.R10,regs.R9);
		/* 822164D4h case    5:*/		return 0x822164D8;
		  /* 822164D8h */ case    6:  		/* stw R10, <#[R11]> */
		/* 822164D8h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822164D8h case    6:*/		return 0x822164DC;
		  /* 822164DCh */ case    7:  		/* b 16 */
		/* 822164DCh case    7:*/		return 0x822164EC;
		/* 822164DCh case    7:*/		return 0x822164E0;
	}
	return 0x822164E0;
} // Block from 822164C0h-822164E0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 822164E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822164E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822164E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822164E0);
		  /* 822164E0h */ case    0:  		/* lwz R9, <#[R11]> */
		/* 822164E0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822164E0h case    0:*/		return 0x822164E4;
		  /* 822164E4h */ case    1:  		/* rlwimi R9, R10, 12, 17, 19 */
		/* 822164E4h case    1:*/		cpu::op::rlwimi<0,12,17,19>(regs,&regs.R9,regs.R10);
		/* 822164E4h case    1:*/		return 0x822164E8;
		  /* 822164E8h */ case    2:  		/* stw R9, <#[R11]> */
		/* 822164E8h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822164E8h case    2:*/		return 0x822164EC;
	}
	return 0x822164EC;
} // Block from 822164E0h-822164ECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 822164ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822164EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822164EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822164EC);
		  /* 822164ECh */ case    0:  		/* addi R3, R11, 4 */
		/* 822164ECh case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 822164ECh case    0:*/		return 0x822164F0;
		  /* 822164F0h */ case    1:  		/* bclr 20, CR0_LT */
		/* 822164F0h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 822164F0h case    1:*/		return 0x822164F4;
	}
	return 0x822164F4;
} // Block from 822164ECh-822164F4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822164F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822164F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822164F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822164F4);
		  /* 822164F4h */ case    0:  		/* nop */
		/* 822164F4h case    0:*/		cpu::op::nop();
		/* 822164F4h case    0:*/		return 0x822164F8;
	}
	return 0x822164F8;
} // Block from 822164F4h-822164F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822164F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822164F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822164F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822164F8);
		  /* 822164F8h */ case    0:  		/* mfspr R12, LR */
		/* 822164F8h case    0:*/		regs.R12 = regs.LR;
		/* 822164F8h case    0:*/		return 0x822164FC;
		  /* 822164FCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 822164FCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 822164FCh case    1:*/		return 0x82216500;
		  /* 82216500h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82216500h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82216500h case    2:*/		return 0x82216504;
		  /* 82216504h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82216504h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82216504h case    3:*/		return 0x82216508;
		  /* 82216508h */ case    4:  		/* li R10, 73 */
		/* 82216508h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x49);
		/* 82216508h case    4:*/		return 0x8221650C;
		  /* 8221650Ch */ case    5:  		/* addi R11, R6, 4 */
		/* 8221650Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R6,0x4);
		/* 8221650Ch case    5:*/		return 0x82216510;
		  /* 82216510h */ case    6:  		/* sth R10, <#[R6 + 2]> */
		/* 82216510h case    6:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R6 + 0x00000002) );
		/* 82216510h case    6:*/		return 0x82216514;
		  /* 82216514h */ case    7:  		/* lwz R10, <#[R6]> */
		/* 82216514h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + 0x00000000) );
		/* 82216514h case    7:*/		return 0x82216518;
		  /* 82216518h */ case    8:  		/* rlwinm R10, R10, 0, 16, 2 */
		/* 82216518h case    8:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R10,regs.R10);
		/* 82216518h case    8:*/		return 0x8221651C;
		  /* 8221651Ch */ case    9:  		/* stw R10, <#[R6]> */
		/* 8221651Ch case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R6 + 0x00000000) );
		/* 8221651Ch case    9:*/		return 0x82216520;
		  /* 82216520h */ case   10:  		/* addi R11, R11, 4 */
		/* 82216520h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82216520h case   10:*/		return 0x82216524;
		  /* 82216524h */ case   11:  		/* lwz R10, <#[R3]> */
		/* 82216524h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 82216524h case   11:*/		return 0x82216528;
		  /* 82216528h */ case   12:  		/* sth R10, <#[R6 + 6]> */
		/* 82216528h case   12:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R6 + 0x00000006) );
		/* 82216528h case   12:*/		return 0x8221652C;
		  /* 8221652Ch */ case   13:  		/* lwz R10, <#[R6 + 4]> */
		/* 8221652Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + 0x00000004) );
		/* 8221652Ch case   13:*/		return 0x82216530;
		  /* 82216530h */ case   14:  		/* lwz R9, <#[R3]> */
		/* 82216530h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 82216530h case   14:*/		return 0x82216534;
		  /* 82216534h */ case   15:  		/* rlwimi R9, R10, 0, 16, 9 */
		/* 82216534h case   15:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R9,regs.R10);
		/* 82216534h case   15:*/		return 0x82216538;
		  /* 82216538h */ case   16:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 82216538h case   16:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 82216538h case   16:*/		return 0x8221653C;
		  /* 8221653Ch */ case   17:  		/* stw R9, <#[R6 + 4]> */
		/* 8221653Ch case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0x00000004) );
		/* 8221653Ch case   17:*/		return 0x82216540;
		  /* 82216540h */ case   18:  		/* lwz R9, <#[R3]> */
		/* 82216540h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 82216540h case   18:*/		return 0x82216544;
		  /* 82216544h */ case   19:  		/* rlwimi R9, R10, 0, 9, 7 */
		/* 82216544h case   19:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R9,regs.R10);
		/* 82216544h case   19:*/		return 0x82216548;
		  /* 82216548h */ case   20:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 82216548h case   20:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 82216548h case   20:*/		return 0x8221654C;
		  /* 8221654Ch */ case   21:  		/* stw R9, <#[R6 + 4]> */
		/* 8221654Ch case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0x00000004) );
		/* 8221654Ch case   21:*/		return 0x82216550;
		  /* 82216550h */ case   22:  		/* lwz R9, <#[R3]> */
		/* 82216550h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 82216550h case   22:*/		return 0x82216554;
		  /* 82216554h */ case   23:  		/* rlwimi R9, R10, 0, 10, 8 */
		/* 82216554h case   23:*/		cpu::op::rlwimi<0,0,10,8>(regs,&regs.R9,regs.R10);
		/* 82216554h case   23:*/		return 0x82216558;
		  /* 82216558h */ case   24:  		/* stw R9, <#[R6 + 4]> */
		/* 82216558h case   24:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0x00000004) );
		/* 82216558h case   24:*/		return 0x8221655C;
		  /* 8221655Ch */ case   25:  		/* lwz R10, <#[R3]> */
		/* 8221655Ch case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8221655Ch case   25:*/		return 0x82216560;
		  /* 82216560h */ case   26:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 82216560h case   26:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 82216560h case   26:*/		return 0x82216564;
		  /* 82216564h */ case   27:  		/* bc 12, CR0_EQ, 16 */
		/* 82216564h case   27:*/		if ( regs.CR[0].eq ) { return 0x82216574;  }
		/* 82216564h case   27:*/		return 0x82216568;
		  /* 82216568h */ case   28:  		/* lwz R10, <#[R4]> */
		/* 82216568h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82216568h case   28:*/		return 0x8221656C;
		  /* 8221656Ch */ case   29:  		/* stw R10, <#[R11]> */
		/* 8221656Ch case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221656Ch case   29:*/		return 0x82216570;
		  /* 82216570h */ case   30:  		/* addi R11, R11, 4 */
		/* 82216570h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82216570h case   30:*/		return 0x82216574;
	}
	return 0x82216574;
} // Block from 822164F8h-82216574h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82216574h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216574( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216574) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216574);
		  /* 82216574h */ case    0:  		/* lwz R10, <#[R3]> */
		/* 82216574h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 82216574h case    0:*/		return 0x82216578;
		  /* 82216578h */ case    1:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82216578h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82216578h case    1:*/		return 0x8221657C;
		  /* 8221657Ch */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 8221657Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x8221658C;  }
		/* 8221657Ch case    2:*/		return 0x82216580;
		  /* 82216580h */ case    3:  		/* lwz R10, <#[R5]> */
		/* 82216580h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000000) );
		/* 82216580h case    3:*/		return 0x82216584;
		  /* 82216584h */ case    4:  		/* stw R10, <#[R11]> */
		/* 82216584h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82216584h case    4:*/		return 0x82216588;
		  /* 82216588h */ case    5:  		/* addi R11, R11, 4 */
		/* 82216588h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82216588h case    5:*/		return 0x8221658C;
	}
	return 0x8221658C;
} // Block from 82216574h-8221658Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221658Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221658C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221658C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221658C);
		  /* 8221658Ch */ case    0:  		/* lwz R10, <#[R3]> */
		/* 8221658Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8221658Ch case    0:*/		return 0x82216590;
		  /* 82216590h */ case    1:  		/* addi R31, R11, 4 */
		/* 82216590h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 82216590h case    1:*/		return 0x82216594;
		  /* 82216594h */ case    2:  		/* sth R10, <#[R11 + 2]> */
		/* 82216594h case    2:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82216594h case    2:*/		return 0x82216598;
		  /* 82216598h */ case    3:  		/* lwz R10, <#[R11]> */
		/* 82216598h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82216598h case    3:*/		return 0x8221659C;
		  /* 8221659Ch */ case    4:  		/* lwz R9, <#[R3]> */
		/* 8221659Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 8221659Ch case    4:*/		return 0x822165A0;
		  /* 822165A0h */ case    5:  		/* rlwimi R9, R10, 0, 16, 9 */
		/* 822165A0h case    5:*/		cpu::op::rlwimi<0,0,16,9>(regs,&regs.R9,regs.R10);
		/* 822165A0h case    5:*/		return 0x822165A4;
		  /* 822165A4h */ case    6:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 822165A4h case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 822165A4h case    6:*/		return 0x822165A8;
		  /* 822165A8h */ case    7:  		/* stw R9, <#[R11]> */
		/* 822165A8h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822165A8h case    7:*/		return 0x822165AC;
		  /* 822165ACh */ case    8:  		/* lwz R9, <#[R3]> */
		/* 822165ACh case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 822165ACh case    8:*/		return 0x822165B0;
		  /* 822165B0h */ case    9:  		/* rlwimi R9, R10, 0, 10, 7 */
		/* 822165B0h case    9:*/		cpu::op::rlwimi<0,0,10,7>(regs,&regs.R9,regs.R10);
		/* 822165B0h case    9:*/		return 0x822165B4;
		  /* 822165B4h */ case   10:  		/* rlwinm R10, R9, 0, 10, 8 */
		/* 822165B4h case   10:*/		cpu::op::rlwinm<0,0,10,8>(regs,&regs.R10,regs.R9);
		/* 822165B4h case   10:*/		return 0x822165B8;
		  /* 822165B8h */ case   11:  		/* stw R10, <#[R11]> */
		/* 822165B8h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822165B8h case   11:*/		return 0x822165BC;
		  /* 822165BCh */ case   12:  		/* lwz R11, <#[R4]> */
		/* 822165BCh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 822165BCh case   12:*/		return 0x822165C0;
		  /* 822165C0h */ case   13:  		/* rlwinm R11, R11, 23, 28, 31 */
		/* 822165C0h case   13:*/		cpu::op::rlwinm<0,23,28,31>(regs,&regs.R11,regs.R11);
		/* 822165C0h case   13:*/		return 0x822165C4;
		  /* 822165C4h */ case   14:  		/* cmplwi CR6, R11, 1 */
		/* 822165C4h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 822165C4h case   14:*/		return 0x822165C8;
		  /* 822165C8h */ case   15:  		/* bc 12, CR6_EQ, 80 */
		/* 822165C8h case   15:*/		if ( regs.CR[6].eq ) { return 0x82216618;  }
		/* 822165C8h case   15:*/		return 0x822165CC;
		  /* 822165CCh */ case   16:  		/* cmplwi CR6, R11, 2 */
		/* 822165CCh case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 822165CCh case   16:*/		return 0x822165D0;
		  /* 822165D0h */ case   17:  		/* bc 12, CR6_EQ, 216 */
		/* 822165D0h case   17:*/		if ( regs.CR[6].eq ) { return 0x822166A8;  }
		/* 822165D0h case   17:*/		return 0x822165D4;
		  /* 822165D4h */ case   18:  		/* cmplwi CR6, R11, 3 */
		/* 822165D4h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 822165D4h case   18:*/		return 0x822165D8;
		  /* 822165D8h */ case   19:  		/* bc 12, CR6_EQ, 196 */
		/* 822165D8h case   19:*/		if ( regs.CR[6].eq ) { return 0x8221669C;  }
		/* 822165D8h case   19:*/		return 0x822165DC;
		  /* 822165DCh */ case   20:  		/* cmplwi CR6, R11, 4 */
		/* 822165DCh case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 822165DCh case   20:*/		return 0x822165E0;
		  /* 822165E0h */ case   21:  		/* bc 12, CR6_EQ, 180 */
		/* 822165E0h case   21:*/		if ( regs.CR[6].eq ) { return 0x82216694;  }
		/* 822165E0h case   21:*/		return 0x822165E4;
		  /* 822165E4h */ case   22:  		/* cmplwi CR6, R11, 5 */
		/* 822165E4h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 822165E4h case   22:*/		return 0x822165E8;
		  /* 822165E8h */ case   23:  		/* bc 12, CR6_EQ, 164 */
		/* 822165E8h case   23:*/		if ( regs.CR[6].eq ) { return 0x8221668C;  }
		/* 822165E8h case   23:*/		return 0x822165EC;
		  /* 822165ECh */ case   24:  		/* cmplwi CR6, R11, 6 */
		/* 822165ECh case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 822165ECh case   24:*/		return 0x822165F0;
		  /* 822165F0h */ case   25:  		/* bc 12, CR6_EQ, 148 */
		/* 822165F0h case   25:*/		if ( regs.CR[6].eq ) { return 0x82216684;  }
		/* 822165F0h case   25:*/		return 0x822165F4;
		  /* 822165F4h */ case   26:  		/* lis R11, -32252 */
		/* 822165F4h case   26:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822165F4h case   26:*/		return 0x822165F8;
		  /* 822165F8h */ case   27:  		/* lis R10, -32252 */
		/* 822165F8h case   27:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822165F8h case   27:*/		return 0x822165FC;
		  /* 822165FCh */ case   28:  		/* lis R9, -32253 */
		/* 822165FCh case   28:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 822165FCh case   28:*/		return 0x82216600;
		  /* 82216600h */ case   29:  		/* addi R6, R11, -7312 */
		/* 82216600h case   29:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFE370);
		/* 82216600h case   29:*/		return 0x82216604;
		  /* 82216604h */ case   30:  		/* addi R5, R10, -25364 */
		/* 82216604h case   30:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFF9CEC);
		/* 82216604h case   30:*/		return 0x82216608;
		  /* 82216608h */ case   31:  		/* addi R4, R9, 27460 */
		/* 82216608h case   31:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82216608h case   31:*/		return 0x8221660C;
		  /* 8221660Ch */ case   32:  		/* li R7, 11141 */
		/* 8221660Ch case   32:*/		cpu::op::li<0>(regs,&regs.R7,0x2B85);
		/* 8221660Ch case   32:*/		return 0x82216610;
		  /* 82216610h */ case   33:  		/* li R3, 0 */
		/* 82216610h case   33:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82216610h case   33:*/		return 0x82216614;
		  /* 82216614h */ case   34:  		/* bl -780812 */
		/* 82216614h case   34:*/		regs.LR = 0x82216618; return 0x82157C08;
		/* 82216614h case   34:*/		return 0x82216618;
	}
	return 0x82216618;
} // Block from 8221658Ch-82216618h (35 instructions)

//////////////////////////////////////////////////////
// Block at 82216618h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216618);
		  /* 82216618h */ case    0:  		/* li R10, 2 */
		/* 82216618h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 82216618h case    0:*/		return 0x8221661C;
		  /* 8221661Ch */ case    1:  		/* li R11, 0 */
		/* 8221661Ch case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8221661Ch case    1:*/		return 0x82216620;
		  /* 82216620h */ case    2:  		/* sth R10, <#[R31 + 2]> */
		/* 82216620h case    2:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R31 + 0x00000002) );
		/* 82216620h case    2:*/		return 0x82216624;
		  /* 82216624h */ case    3:  		/* li R9, 65 */
		/* 82216624h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x41);
		/* 82216624h case    3:*/		return 0x82216628;
		  /* 82216628h */ case    4:  		/* li R10, 1 */
		/* 82216628h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82216628h case    4:*/		return 0x8221662C;
		  /* 8221662Ch */ case    5:  		/* lwz R8, <#[R31]> */
		/* 8221662Ch case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 8221662Ch case    5:*/		return 0x82216630;
		  /* 82216630h */ case    6:  		/* rlwimi R8, R9, 16, 8, 15 */
		/* 82216630h case    6:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R8,regs.R9);
		/* 82216630h case    6:*/		return 0x82216634;
		  /* 82216634h */ case    7:  		/* rlwinm R9, R11, 0, 29, 31 */
		/* 82216634h case    7:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R9,regs.R11);
		/* 82216634h case    7:*/		return 0x82216638;
		  /* 82216638h */ case    8:  		/* stw R8, <#[R31]> */
		/* 82216638h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 82216638h case    8:*/		return 0x8221663C;
		  /* 8221663Ch */ case    9:  		/* stb R10, <#[R31]> */
		/* 8221663Ch case    9:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8221663Ch case    9:*/		return 0x82216640;
		  /* 82216640h */ case   10:  		/* mr R10, R9 */
		/* 82216640h case   10:*/		regs.R10 = regs.R9;
		/* 82216640h case   10:*/		return 0x82216644;
		  /* 82216644h */ case   11:  		/* lwzu R8, <#[R31 + 4]> */
		/* 82216644h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82216644h case   11:*/		return 0x82216648;
		  /* 82216648h */ case   12:  		/* rlwinm R8, R8, 0, 0, 28 */
		/* 82216648h case   12:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R8,regs.R8);
		/* 82216648h case   12:*/		return 0x8221664C;
		  /* 8221664Ch */ case   13:  		/* or R9, R8, R9 */
		/* 8221664Ch case   13:*/		cpu::op::or<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8221664Ch case   13:*/		return 0x82216650;
	}
	return 0x82216650;
} // Block from 82216618h-82216650h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82216650h
// Function '?DoSrcInvert@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PATIL_Src@1@PATIL_Src_Mod@1@PATIL_Rel_Addr@1@IPAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216650( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216650) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216650);
		  /* 82216650h */ case    0:  		/* rlwimi R10, R11, 4, 25, 27 */
		/* 82216650h case    0:*/		cpu::op::rlwimi<0,4,25,27>(regs,&regs.R10,regs.R11);
		/* 82216650h case    0:*/		return 0x82216654;
		  /* 82216654h */ case    1:  		/* rlwinm R9, R9, 0, 28, 24 */
		/* 82216654h case    1:*/		cpu::op::rlwinm<0,0,28,24>(regs,&regs.R9,regs.R9);
		/* 82216654h case    1:*/		return 0x82216658;
		  /* 82216658h */ case    2:  		/* rlwinm R10, R10, 4, 0, 27 */
		/* 82216658h case    2:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R10,regs.R10);
		/* 82216658h case    2:*/		return 0x8221665C;
		  /* 8221665Ch */ case    3:  		/* rlwinm R9, R9, 0, 24, 20 */
		/* 8221665Ch case    3:*/		cpu::op::rlwinm<0,0,24,20>(regs,&regs.R9,regs.R9);
		/* 8221665Ch case    3:*/		return 0x82216660;
		  /* 82216660h */ case    4:  		/* addi R3, R31, 4 */
		/* 82216660h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x4);
		/* 82216660h case    4:*/		return 0x82216664;
		  /* 82216664h */ case    5:  		/* or R10, R10, R9 */
		/* 82216664h case    5:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82216664h case    5:*/		return 0x82216668;
		  /* 82216668h */ case    6:  		/* rlwimi R10, R11, 12, 17, 19 */
		/* 82216668h case    6:*/		cpu::op::rlwimi<0,12,17,19>(regs,&regs.R10,regs.R11);
		/* 82216668h case    6:*/		return 0x8221666C;
		  /* 8221666Ch */ case    7:  		/* stw R10, <#[R31]> */
		/* 8221666Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8221666Ch case    7:*/		return 0x82216670;
		  /* 82216670h */ case    8:  		/* addi R1, R1, 96 */
		/* 82216670h case    8:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82216670h case    8:*/		return 0x82216674;
		  /* 82216674h */ case    9:  		/* lwz R12, <#[R1 - 8]> */
		/* 82216674h case    9:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82216674h case    9:*/		return 0x82216678;
		  /* 82216678h */ case   10:  		/* mtspr LR, R12 */
		/* 82216678h case   10:*/		regs.LR = regs.R12;
		/* 82216678h case   10:*/		return 0x8221667C;
		  /* 8221667Ch */ case   11:  		/* ld R31, <#[R1 - 16]> */
		/* 8221667Ch case   11:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221667Ch case   11:*/		return 0x82216680;
		  /* 82216680h */ case   12:  		/* bclr 20, CR0_LT */
		/* 82216680h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82216680h case   12:*/		return 0x82216684;
	}
	return 0x82216684;
} // Block from 82216650h-82216684h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82216684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216684);
		  /* 82216684h */ case    0:  		/* li R10, 3 */
		/* 82216684h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 82216684h case    0:*/		return 0x82216688;
		  /* 82216688h */ case    1:  		/* b 24 */
		/* 82216688h case    1:*/		return 0x822166A0;
		/* 82216688h case    1:*/		return 0x8221668C;
	}
	return 0x8221668C;
} // Block from 82216684h-8221668Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221668Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221668C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221668C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221668C);
		  /* 8221668Ch */ case    0:  		/* li R10, 3 */
		/* 8221668Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 8221668Ch case    0:*/		return 0x82216690;
		  /* 82216690h */ case    1:  		/* b 28 */
		/* 82216690h case    1:*/		return 0x822166AC;
		/* 82216690h case    1:*/		return 0x82216694;
	}
	return 0x82216694;
} // Block from 8221668Ch-82216694h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82216694h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216694( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216694) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216694);
		  /* 82216694h */ case    0:  		/* li R10, 3 */
		/* 82216694h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 82216694h case    0:*/		return 0x82216698;
		  /* 82216698h */ case    1:  		/* b -124 */
		/* 82216698h case    1:*/		return 0x8221661C;
		/* 82216698h case    1:*/		return 0x8221669C;
	}
	return 0x8221669C;
} // Block from 82216694h-8221669Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221669Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221669C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221669C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221669C);
		  /* 8221669Ch */ case    0:  		/* li R10, 2 */
		/* 8221669Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 8221669Ch case    0:*/		return 0x822166A0;
	}
	return 0x822166A0;
} // Block from 8221669Ch-822166A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822166A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822166A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822166A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822166A0);
		  /* 822166A0h */ case    0:  		/* li R11, 2 */
		/* 822166A0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 822166A0h case    0:*/		return 0x822166A4;
		  /* 822166A4h */ case    1:  		/* b -132 */
		/* 822166A4h case    1:*/		return 0x82216620;
		/* 822166A4h case    1:*/		return 0x822166A8;
	}
	return 0x822166A8;
} // Block from 822166A0h-822166A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822166A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822166A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822166A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822166A8);
		  /* 822166A8h */ case    0:  		/* li R10, 2 */
		/* 822166A8h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 822166A8h case    0:*/		return 0x822166AC;
	}
	return 0x822166AC;
} // Block from 822166A8h-822166ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 822166ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822166AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822166AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822166AC);
		  /* 822166ACh */ case    0:  		/* li R11, 1 */
		/* 822166ACh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 822166ACh case    0:*/		return 0x822166B0;
		  /* 822166B0h */ case    1:  		/* b -144 */
		/* 822166B0h case    1:*/		return 0x82216620;
		/* 822166B0h case    1:*/		return 0x822166B4;
		  /* 822166B4h */ case    2:  		/* nop */
		/* 822166B4h case    2:*/		cpu::op::nop();
		/* 822166B4h case    2:*/		return 0x822166B8;
		  /* 822166B8h */ case    3:  		/* li R9, 32 */
		/* 822166B8h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x20);
		/* 822166B8h case    3:*/		return 0x822166BC;
		  /* 822166BCh */ case    4:  		/* lhz R11, <#[R4]> */
		/* 822166BCh case    4:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 822166BCh case    4:*/		return 0x822166C0;
		  /* 822166C0h */ case    5:  		/* lwz R10, <#[R3 + 28]> */
		/* 822166C0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000001C) );
		/* 822166C0h case    5:*/		return 0x822166C4;
		  /* 822166C4h */ case    6:  		/* addi R8, R5, -1 */
		/* 822166C4h case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R5,0xFFFFFFFF);
		/* 822166C4h case    6:*/		return 0x822166C8;
		  /* 822166C8h */ case    7:  		/* rlwinm R11, R11, 0, 19, 31 */
		/* 822166C8h case    7:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R11,regs.R11);
		/* 822166C8h case    7:*/		return 0x822166CC;
		  /* 822166CCh */ case    8:  		/* li R7, 0 */
		/* 822166CCh case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 822166CCh case    8:*/		return 0x822166D0;
		  /* 822166D0h */ case    9:  		/* mtspr CTR, R9 */
		/* 822166D0h case    9:*/		regs.CTR = regs.R9;
		/* 822166D0h case    9:*/		return 0x822166D4;
		  /* 822166D4h */ case   10:  		/* stbu R7, <#[R8 + 1]> */
		/* 822166D4h case   10:*/		cpu::mem::store8( regs, regs.R7, (uint32)(regs.R8 + 0x00000001) );
		regs.R8 = (uint32)(regs.R8 + 0x00000001);
		/* 822166D4h case   10:*/		return 0x822166D8;
		  /* 822166D8h */ case   11:  		/* bc 16, CR0_LT, -4 */
		/* 822166D8h case   11:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x822166D4;  }
		/* 822166D8h case   11:*/		return 0x822166DC;
		  /* 822166DCh */ case   12:  		/* addic R9, R11, -1 */
		/* 822166DCh case   12:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 822166DCh case   12:*/		return 0x822166E0;
		  /* 822166E0h */ case   13:  		/* li R8, 65 */
		/* 822166E0h case   13:*/		cpu::op::li<0>(regs,&regs.R8,0x41);
		/* 822166E0h case   13:*/		return 0x822166E4;
		  /* 822166E4h */ case   14:  		/* subfe R11, R9, R11 */
		/* 822166E4h case   14:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 822166E4h case   14:*/		return 0x822166E8;
		  /* 822166E8h */ case   15:  		/* li R9, 1 */
		/* 822166E8h case   15:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 822166E8h case   15:*/		return 0x822166EC;
		  /* 822166ECh */ case   16:  		/* stw R11, <#[R10 + 23356]> */
		/* 822166ECh case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00005B3C) );
		/* 822166ECh case   16:*/		return 0x822166F0;
		  /* 822166F0h */ case   17:  		/* addi R11, R5, 4 */
		/* 822166F0h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R5,0x4);
		/* 822166F0h case   17:*/		return 0x822166F4;
		  /* 822166F4h */ case   18:  		/* sth R8, <#[R5 + 2]> */
		/* 822166F4h case   18:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R5 + 0x00000002) );
		/* 822166F4h case   18:*/		return 0x822166F8;
		  /* 822166F8h */ case   19:  		/* lwz R8, <#[R5]> */
		/* 822166F8h case   19:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R5 + 0x00000000) );
		/* 822166F8h case   19:*/		return 0x822166FC;
		  /* 822166FCh */ case   20:  		/* rlwinm R8, R8, 0, 16, 2 */
		/* 822166FCh case   20:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R8,regs.R8);
		/* 822166FCh case   20:*/		return 0x82216700;
		  /* 82216700h */ case   21:  		/* stw R8, <#[R5]> */
		/* 82216700h case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R5 + 0x00000000) );
		/* 82216700h case   21:*/		return 0x82216704;
		  /* 82216704h */ case   22:  		/* addi R11, R11, 4 */
		/* 82216704h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82216704h case   22:*/		return 0x82216708;
		  /* 82216708h */ case   23:  		/* lwz R10, <#[R10 + 23352]> */
		/* 82216708h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00005B38) );
		/* 82216708h case   23:*/		return 0x8221670C;
		  /* 8221670Ch */ case   24:  		/* sth R10, <#[R5 + 6]> */
		/* 8221670Ch case   24:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R5 + 0x00000006) );
		/* 8221670Ch case   24:*/		return 0x82216710;
		  /* 82216710h */ case   25:  		/* lwz R10, <#[R5 + 4]> */
		/* 82216710h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000004) );
		/* 82216710h case   25:*/		return 0x82216714;
		  /* 82216714h */ case   26:  		/* rlwimi R10, R9, 18, 8, 15 */
		/* 82216714h case   26:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R9);
		/* 82216714h case   26:*/		return 0x82216718;
		  /* 82216718h */ case   27:  		/* stw R10, <#[R5 + 4]> */
		/* 82216718h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R5 + 0x00000004) );
		/* 82216718h case   27:*/		return 0x8221671C;
		  /* 8221671Ch */ case   28:  		/* lwz R10, <#[R4 + 16]> */
		/* 8221671Ch case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000010) );
		/* 8221671Ch case   28:*/		return 0x82216720;
		  /* 82216720h */ case   29:  		/* sth R10, <#[R11 + 2]> */
		/* 82216720h case   29:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82216720h case   29:*/		return 0x82216724;
		  /* 82216724h */ case   30:  		/* lwz R10, <#[R11]> */
		/* 82216724h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82216724h case   30:*/		return 0x82216728;
		  /* 82216728h */ case   31:  		/* lwz R9, <#[R4 + 16]> */
		/* 82216728h case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000010) );
		/* 82216728h case   31:*/		return 0x8221672C;
		  /* 8221672Ch */ case   32:  		/* rlwimi R10, R9, 0, 10, 15 */
		/* 8221672Ch case   32:*/		cpu::op::rlwimi<0,0,10,15>(regs,&regs.R10,regs.R9);
		/* 8221672Ch case   32:*/		return 0x82216730;
		  /* 82216730h */ case   33:  		/* stw R10, <#[R11]> */
		/* 82216730h case   33:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82216730h case   33:*/		return 0x82216734;
		  /* 82216734h */ case   34:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82216734h case   34:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82216734h case   34:*/		return 0x82216738;
		  /* 82216738h */ case   35:  		/* lwz R9, <#[R4 + 16]> */
		/* 82216738h case   35:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000010) );
		/* 82216738h case   35:*/		return 0x8221673C;
		  /* 8221673Ch */ case   36:  		/* rlwimi R10, R9, 0, 8, 8 */
		/* 8221673Ch case   36:*/		cpu::op::rlwimi<0,0,8,8>(regs,&regs.R10,regs.R9);
		/* 8221673Ch case   36:*/		return 0x82216740;
		  /* 82216740h */ case   37:  		/* oris R10, R10, 64 */
		/* 82216740h case   37:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x40);
		/* 82216740h case   37:*/		return 0x82216744;
		  /* 82216744h */ case   38:  		/* stw R10, <#[R11]> */
		/* 82216744h case   38:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82216744h case   38:*/		return 0x82216748;
		  /* 82216748h */ case   39:  		/* lwzu R10, <#[R11 + 4]> */
		/* 82216748h case   39:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82216748h case   39:*/		return 0x8221674C;
		  /* 8221674Ch */ case   40:  		/* lwz R9, <#[R4 + 28]> */
		/* 8221674Ch case   40:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x0000001C) );
		/* 8221674Ch case   40:*/		return 0x82216750;
		  /* 82216750h */ case   41:  		/* rlwimi R9, R10, 0, 0, 28 */
		/* 82216750h case   41:*/		cpu::op::rlwimi<0,0,0,28>(regs,&regs.R9,regs.R10);
		/* 82216750h case   41:*/		return 0x82216754;
		  /* 82216754h */ case   42:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 82216754h case   42:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 82216754h case   42:*/		return 0x82216758;
		  /* 82216758h */ case   43:  		/* stw R9, <#[R11]> */
		/* 82216758h case   43:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216758h case   43:*/		return 0x8221675C;
		  /* 8221675Ch */ case   44:  		/* lwz R9, <#[R4 + 28]> */
		/* 8221675Ch case   44:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x0000001C) );
		/* 8221675Ch case   44:*/		return 0x82216760;
		  /* 82216760h */ case   45:  		/* rlwimi R9, R10, 0, 28, 24 */
		/* 82216760h case   45:*/		cpu::op::rlwimi<0,0,28,24>(regs,&regs.R9,regs.R10);
		/* 82216760h case   45:*/		return 0x82216764;
		  /* 82216764h */ case   46:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 82216764h case   46:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 82216764h case   46:*/		return 0x82216768;
		  /* 82216768h */ case   47:  		/* stw R9, <#[R11]> */
		/* 82216768h case   47:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216768h case   47:*/		return 0x8221676C;
		  /* 8221676Ch */ case   48:  		/* lwz R9, <#[R4 + 28]> */
		/* 8221676Ch case   48:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x0000001C) );
		/* 8221676Ch case   48:*/		return 0x82216770;
		  /* 82216770h */ case   49:  		/* rlwimi R9, R10, 0, 24, 20 */
		/* 82216770h case   49:*/		cpu::op::rlwimi<0,0,24,20>(regs,&regs.R9,regs.R10);
		/* 82216770h case   49:*/		return 0x82216774;
		  /* 82216774h */ case   50:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 82216774h case   50:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 82216774h case   50:*/		return 0x82216778;
		  /* 82216778h */ case   51:  		/* stw R9, <#[R11]> */
		/* 82216778h case   51:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216778h case   51:*/		return 0x8221677C;
		  /* 8221677Ch */ case   52:  		/* lwz R9, <#[R4 + 28]> */
		/* 8221677Ch case   52:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x0000001C) );
		/* 8221677Ch case   52:*/		return 0x82216780;
		  /* 82216780h */ case   53:  		/* rlwimi R9, R10, 0, 20, 16 */
		/* 82216780h case   53:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R9,regs.R10);
		/* 82216780h case   53:*/		return 0x82216784;
		  /* 82216784h */ case   54:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 82216784h case   54:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 82216784h case   54:*/		return 0x82216788;
		  /* 82216788h */ case   55:  		/* stw R9, <#[R11]> */
		/* 82216788h case   55:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216788h case   55:*/		return 0x8221678C;
		  /* 8221678Ch */ case   56:  		/* lwz R9, <#[R4 + 28]> */
		/* 8221678Ch case   56:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x0000001C) );
		/* 8221678Ch case   56:*/		return 0x82216790;
		  /* 82216790h */ case   57:  		/* rlwimi R9, R10, 0, 29, 27 */
		/* 82216790h case   57:*/		cpu::op::rlwimi<0,0,29,27>(regs,&regs.R9,regs.R10);
		/* 82216790h case   57:*/		return 0x82216794;
		  /* 82216794h */ case   58:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 82216794h case   58:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 82216794h case   58:*/		return 0x82216798;
	}
	return 0x82216798;
} // Block from 822166ACh-82216798h (59 instructions)

//////////////////////////////////////////////////////
// Block at 82216798h
// Function '?DoSrcSign@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PATIL_Src@1@PATIL_Src_Mod@1@PATIL_Rel_Addr@1@IPAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216798);
		  /* 82216798h */ case    0:  		/* stw R9, <#[R11]> */
		/* 82216798h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216798h case    0:*/		return 0x8221679C;
		  /* 8221679Ch */ case    1:  		/* lwz R9, <#[R4 + 28]> */
		/* 8221679Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x0000001C) );
		/* 8221679Ch case    1:*/		return 0x822167A0;
		  /* 822167A0h */ case    2:  		/* rlwimi R9, R10, 0, 25, 23 */
		/* 822167A0h case    2:*/		cpu::op::rlwimi<0,0,25,23>(regs,&regs.R9,regs.R10);
		/* 822167A0h case    2:*/		return 0x822167A4;
		  /* 822167A4h */ case    3:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 822167A4h case    3:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 822167A4h case    3:*/		return 0x822167A8;
		  /* 822167A8h */ case    4:  		/* stw R9, <#[R11]> */
		/* 822167A8h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822167A8h case    4:*/		return 0x822167AC;
		  /* 822167ACh */ case    5:  		/* lwz R9, <#[R4 + 28]> */
		/* 822167ACh case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x0000001C) );
		/* 822167ACh case    5:*/		return 0x822167B0;
		  /* 822167B0h */ case    6:  		/* rlwimi R9, R10, 0, 21, 19 */
		/* 822167B0h case    6:*/		cpu::op::rlwimi<0,0,21,19>(regs,&regs.R9,regs.R10);
		/* 822167B0h case    6:*/		return 0x822167B4;
		  /* 822167B4h */ case    7:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 822167B4h case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 822167B4h case    7:*/		return 0x822167B8;
		  /* 822167B8h */ case    8:  		/* stw R9, <#[R11]> */
		/* 822167B8h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822167B8h case    8:*/		return 0x822167BC;
		  /* 822167BCh */ case    9:  		/* lwz R9, <#[R4 + 28]> */
		/* 822167BCh case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x0000001C) );
		/* 822167BCh case    9:*/		return 0x822167C0;
		  /* 822167C0h */ case   10:  		/* rlwimi R9, R10, 0, 17, 15 */
		/* 822167C0h case   10:*/		cpu::op::rlwimi<0,0,17,15>(regs,&regs.R9,regs.R10);
		/* 822167C0h case   10:*/		return 0x822167C4;
		  /* 822167C4h */ case   11:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 822167C4h case   11:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 822167C4h case   11:*/		return 0x822167C8;
		  /* 822167C8h */ case   12:  		/* stw R9, <#[R11]> */
		/* 822167C8h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822167C8h case   12:*/		return 0x822167CC;
		  /* 822167CCh */ case   13:  		/* lwz R9, <#[R4 + 28]> */
		/* 822167CCh case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x0000001C) );
		/* 822167CCh case   13:*/		return 0x822167D0;
		  /* 822167D0h */ case   14:  		/* rlwimi R9, R10, 0, 12, 10 */
		/* 822167D0h case   14:*/		cpu::op::rlwimi<0,0,12,10>(regs,&regs.R9,regs.R10);
		/* 822167D0h case   14:*/		return 0x822167D4;
		  /* 822167D4h */ case   15:  		/* stw R9, <#[R11]> */
		/* 822167D4h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822167D4h case   15:*/		return 0x822167D8;
		  /* 822167D8h */ case   16:  		/* addi R11, R11, 4 */
		/* 822167D8h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822167D8h case   16:*/		return 0x822167DC;
		  /* 822167DCh */ case   17:  		/* lwz R10, <#[R4 + 16]> */
		/* 822167DCh case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000010) );
		/* 822167DCh case   17:*/		return 0x822167E0;
		  /* 822167E0h */ case   18:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 822167E0h case   18:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 822167E0h case   18:*/		return 0x822167E4;
		  /* 822167E4h */ case   19:  		/* bc 12, CR0_EQ, 16 */
		/* 822167E4h case   19:*/		if ( regs.CR[0].eq ) { return 0x822167F4;  }
		/* 822167E4h case   19:*/		return 0x822167E8;
		  /* 822167E8h */ case   20:  		/* lwz R10, <#[R4 + 40]> */
		/* 822167E8h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000028) );
		/* 822167E8h case   20:*/		return 0x822167EC;
		  /* 822167ECh */ case   21:  		/* stw R10, <#[R11]> */
		/* 822167ECh case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822167ECh case   21:*/		return 0x822167F0;
		  /* 822167F0h */ case   22:  		/* addi R11, R11, 4 */
		/* 822167F0h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822167F0h case   22:*/		return 0x822167F4;
	}
	return 0x822167F4;
} // Block from 82216798h-822167F4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 822167F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822167F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822167F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822167F4);
		  /* 822167F4h */ case    0:  		/* lwz R10, <#[R4 + 16]> */
		/* 822167F4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000010) );
		/* 822167F4h case    0:*/		return 0x822167F8;
		  /* 822167F8h */ case    1:  		/* sth R10, <#[R11 + 2]> */
		/* 822167F8h case    1:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 822167F8h case    1:*/		return 0x822167FC;
		  /* 822167FCh */ case    2:  		/* lwz R10, <#[R11]> */
		/* 822167FCh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822167FCh case    2:*/		return 0x82216800;
		  /* 82216800h */ case    3:  		/* lwz R9, <#[R4 + 16]> */
		/* 82216800h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000010) );
		/* 82216800h case    3:*/		return 0x82216804;
		  /* 82216804h */ case    4:  		/* rlwimi R10, R9, 0, 10, 15 */
		/* 82216804h case    4:*/		cpu::op::rlwimi<0,0,10,15>(regs,&regs.R10,regs.R9);
		/* 82216804h case    4:*/		return 0x82216808;
		  /* 82216808h */ case    5:  		/* stw R10, <#[R11]> */
		/* 82216808h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82216808h case    5:*/		return 0x8221680C;
		  /* 8221680Ch */ case    6:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 8221680Ch case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 8221680Ch case    6:*/		return 0x82216810;
		  /* 82216810h */ case    7:  		/* lwz R9, <#[R4 + 16]> */
		/* 82216810h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000010) );
		/* 82216810h case    7:*/		return 0x82216814;
		  /* 82216814h */ case    8:  		/* rlwimi R10, R9, 0, 8, 8 */
		/* 82216814h case    8:*/		cpu::op::rlwimi<0,0,8,8>(regs,&regs.R10,regs.R9);
		/* 82216814h case    8:*/		return 0x82216818;
		  /* 82216818h */ case    9:  		/* oris R10, R10, 64 */
		/* 82216818h case    9:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x40);
		/* 82216818h case    9:*/		return 0x8221681C;
		  /* 8221681Ch */ case   10:  		/* stw R10, <#[R11]> */
		/* 8221681Ch case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221681Ch case   10:*/		return 0x82216820;
		  /* 82216820h */ case   11:  		/* lwzu R9, <#[R11 + 4]> */
		/* 82216820h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82216820h case   11:*/		return 0x82216824;
		  /* 82216824h */ case   12:  		/* lwz R10, <#[R4 + 28]> */
		/* 82216824h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000001C) );
		/* 82216824h case   12:*/		return 0x82216828;
		  /* 82216828h */ case   13:  		/* rlwimi R10, R9, 0, 0, 28 */
		/* 82216828h case   13:*/		cpu::op::rlwimi<0,0,0,28>(regs,&regs.R10,regs.R9);
		/* 82216828h case   13:*/		return 0x8221682C;
		  /* 8221682Ch */ case   14:  		/* stw R10, <#[R11]> */
		/* 8221682Ch case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221682Ch case   14:*/		return 0x82216830;
		  /* 82216830h */ case   15:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82216830h case   15:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82216830h case   15:*/		return 0x82216834;
		  /* 82216834h */ case   16:  		/* lwz R9, <#[R4 + 28]> */
		/* 82216834h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x0000001C) );
		/* 82216834h case   16:*/		return 0x82216838;
		  /* 82216838h */ case   17:  		/* rlwimi R9, R10, 0, 28, 24 */
		/* 82216838h case   17:*/		cpu::op::rlwimi<0,0,28,24>(regs,&regs.R9,regs.R10);
		/* 82216838h case   17:*/		return 0x8221683C;
		  /* 8221683Ch */ case   18:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 8221683Ch case   18:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 8221683Ch case   18:*/		return 0x82216840;
		  /* 82216840h */ case   19:  		/* stw R9, <#[R11]> */
		/* 82216840h case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216840h case   19:*/		return 0x82216844;
		  /* 82216844h */ case   20:  		/* lwz R9, <#[R4 + 28]> */
		/* 82216844h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x0000001C) );
		/* 82216844h case   20:*/		return 0x82216848;
		  /* 82216848h */ case   21:  		/* rlwimi R9, R10, 0, 24, 20 */
		/* 82216848h case   21:*/		cpu::op::rlwimi<0,0,24,20>(regs,&regs.R9,regs.R10);
		/* 82216848h case   21:*/		return 0x8221684C;
		  /* 8221684Ch */ case   22:  		/* stw R9, <#[R11]> */
		/* 8221684Ch case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221684Ch case   22:*/		return 0x82216850;
		  /* 82216850h */ case   23:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82216850h case   23:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82216850h case   23:*/		return 0x82216854;
		  /* 82216854h */ case   24:  		/* lwz R10, <#[R4 + 28]> */
		/* 82216854h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000001C) );
		/* 82216854h case   24:*/		return 0x82216858;
		  /* 82216858h */ case   25:  		/* rlwimi R10, R9, 0, 20, 16 */
		/* 82216858h case   25:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R10,regs.R9);
		/* 82216858h case   25:*/		return 0x8221685C;
		  /* 8221685Ch */ case   26:  		/* stw R10, <#[R11]> */
		/* 8221685Ch case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221685Ch case   26:*/		return 0x82216860;
		  /* 82216860h */ case   27:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82216860h case   27:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82216860h case   27:*/		return 0x82216864;
		  /* 82216864h */ case   28:  		/* lwz R9, <#[R4 + 28]> */
		/* 82216864h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x0000001C) );
		/* 82216864h case   28:*/		return 0x82216868;
		  /* 82216868h */ case   29:  		/* rlwimi R9, R10, 0, 29, 27 */
		/* 82216868h case   29:*/		cpu::op::rlwimi<0,0,29,27>(regs,&regs.R9,regs.R10);
		/* 82216868h case   29:*/		return 0x8221686C;
		  /* 8221686Ch */ case   30:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 8221686Ch case   30:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 8221686Ch case   30:*/		return 0x82216870;
		  /* 82216870h */ case   31:  		/* stw R9, <#[R11]> */
		/* 82216870h case   31:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216870h case   31:*/		return 0x82216874;
		  /* 82216874h */ case   32:  		/* lwz R9, <#[R4 + 28]> */
		/* 82216874h case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x0000001C) );
		/* 82216874h case   32:*/		return 0x82216878;
		  /* 82216878h */ case   33:  		/* rlwimi R9, R10, 0, 25, 23 */
		/* 82216878h case   33:*/		cpu::op::rlwimi<0,0,25,23>(regs,&regs.R9,regs.R10);
		/* 82216878h case   33:*/		return 0x8221687C;
		  /* 8221687Ch */ case   34:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 8221687Ch case   34:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 8221687Ch case   34:*/		return 0x82216880;
		  /* 82216880h */ case   35:  		/* stw R9, <#[R11]> */
		/* 82216880h case   35:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216880h case   35:*/		return 0x82216884;
		  /* 82216884h */ case   36:  		/* lwz R9, <#[R4 + 28]> */
		/* 82216884h case   36:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x0000001C) );
		/* 82216884h case   36:*/		return 0x82216888;
		  /* 82216888h */ case   37:  		/* rlwimi R9, R10, 0, 21, 19 */
		/* 82216888h case   37:*/		cpu::op::rlwimi<0,0,21,19>(regs,&regs.R9,regs.R10);
		/* 82216888h case   37:*/		return 0x8221688C;
		  /* 8221688Ch */ case   38:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 8221688Ch case   38:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 8221688Ch case   38:*/		return 0x82216890;
		  /* 82216890h */ case   39:  		/* stw R9, <#[R11]> */
		/* 82216890h case   39:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216890h case   39:*/		return 0x82216894;
		  /* 82216894h */ case   40:  		/* lwz R9, <#[R4 + 28]> */
		/* 82216894h case   40:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x0000001C) );
		/* 82216894h case   40:*/		return 0x82216898;
		  /* 82216898h */ case   41:  		/* rlwimi R9, R10, 0, 17, 15 */
		/* 82216898h case   41:*/		cpu::op::rlwimi<0,0,17,15>(regs,&regs.R9,regs.R10);
		/* 82216898h case   41:*/		return 0x8221689C;
		  /* 8221689Ch */ case   42:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 8221689Ch case   42:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 8221689Ch case   42:*/		return 0x822168A0;
		  /* 822168A0h */ case   43:  		/* stw R9, <#[R11]> */
		/* 822168A0h case   43:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822168A0h case   43:*/		return 0x822168A4;
		  /* 822168A4h */ case   44:  		/* lwz R9, <#[R4 + 28]> */
		/* 822168A4h case   44:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x0000001C) );
		/* 822168A4h case   44:*/		return 0x822168A8;
		  /* 822168A8h */ case   45:  		/* rlwimi R9, R10, 0, 12, 10 */
		/* 822168A8h case   45:*/		cpu::op::rlwimi<0,0,12,10>(regs,&regs.R9,regs.R10);
		/* 822168A8h case   45:*/		return 0x822168AC;
		  /* 822168ACh */ case   46:  		/* stw R9, <#[R11]> */
		/* 822168ACh case   46:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822168ACh case   46:*/		return 0x822168B0;
		  /* 822168B0h */ case   47:  		/* addi R11, R11, 4 */
		/* 822168B0h case   47:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822168B0h case   47:*/		return 0x822168B4;
		  /* 822168B4h */ case   48:  		/* lwz R10, <#[R4 + 16]> */
		/* 822168B4h case   48:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000010) );
		/* 822168B4h case   48:*/		return 0x822168B8;
		  /* 822168B8h */ case   49:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 822168B8h case   49:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 822168B8h case   49:*/		return 0x822168BC;
		  /* 822168BCh */ case   50:  		/* bc 12, CR0_EQ, 16 */
		/* 822168BCh case   50:*/		if ( regs.CR[0].eq ) { return 0x822168CC;  }
		/* 822168BCh case   50:*/		return 0x822168C0;
		  /* 822168C0h */ case   51:  		/* lwz R10, <#[R4 + 40]> */
		/* 822168C0h case   51:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000028) );
		/* 822168C0h case   51:*/		return 0x822168C4;
		  /* 822168C4h */ case   52:  		/* stw R10, <#[R11]> */
		/* 822168C4h case   52:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822168C4h case   52:*/		return 0x822168C8;
		  /* 822168C8h */ case   53:  		/* addi R11, R11, 4 */
		/* 822168C8h case   53:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822168C8h case   53:*/		return 0x822168CC;
	}
	return 0x822168CC;
} // Block from 822167F4h-822168CCh (54 instructions)

//////////////////////////////////////////////////////
// Block at 822168CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822168CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822168CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822168CC);
		  /* 822168CCh */ case    0:  		/* lwz R10, <#[R4]> */
		/* 822168CCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 822168CCh case    0:*/		return 0x822168D0;
		  /* 822168D0h */ case    1:  		/* stw R10, <#[R11]> */
		/* 822168D0h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822168D0h case    1:*/		return 0x822168D4;
		  /* 822168D4h */ case    2:  		/* lwz R10, <#[R4 + 4]> */
		/* 822168D4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000004) );
		/* 822168D4h case    2:*/		return 0x822168D8;
		  /* 822168D8h */ case    3:  		/* stwu R10, <#[R11 + 4]> */
		/* 822168D8h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822168D8h case    3:*/		return 0x822168DC;
		  /* 822168DCh */ case    4:  		/* lwz R10, <#[R4 + 4]> */
		/* 822168DCh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000004) );
		/* 822168DCh case    4:*/		return 0x822168E0;
		  /* 822168E0h */ case    5:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 822168E0h case    5:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 822168E0h case    5:*/		return 0x822168E4;
		  /* 822168E4h */ case    6:  		/* addi R11, R11, 4 */
		/* 822168E4h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822168E4h case    6:*/		return 0x822168E8;
		  /* 822168E8h */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 822168E8h case    7:*/		if ( regs.CR[0].eq ) { return 0x822168F8;  }
		/* 822168E8h case    7:*/		return 0x822168EC;
		  /* 822168ECh */ case    8:  		/* lwz R10, <#[R4 + 8]> */
		/* 822168ECh case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 822168ECh case    8:*/		return 0x822168F0;
		  /* 822168F0h */ case    9:  		/* stw R10, <#[R11]> */
		/* 822168F0h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822168F0h case    9:*/		return 0x822168F4;
		  /* 822168F4h */ case   10:  		/* addi R11, R11, 4 */
		/* 822168F4h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822168F4h case   10:*/		return 0x822168F8;
	}
	return 0x822168F8;
} // Block from 822168CCh-822168F8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 822168F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822168F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822168F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822168F8);
		  /* 822168F8h */ case    0:  		/* lwz R10, <#[R4 + 16]> */
		/* 822168F8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000010) );
		/* 822168F8h case    0:*/		return 0x822168FC;
		  /* 822168FCh */ case    1:  		/* stw R10, <#[R11]> */
		/* 822168FCh case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822168FCh case    1:*/		return 0x82216900;
		  /* 82216900h */ case    2:  		/* addi R11, R11, 4 */
		/* 82216900h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82216900h case    2:*/		return 0x82216904;
		  /* 82216904h */ case    3:  		/* lwz R10, <#[R4 + 16]> */
		/* 82216904h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000010) );
		/* 82216904h case    3:*/		return 0x82216908;
		  /* 82216908h */ case    4:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 82216908h case    4:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 82216908h case    4:*/		return 0x8221690C;
		  /* 8221690Ch */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 8221690Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x8221691C;  }
		/* 8221690Ch case    5:*/		return 0x82216910;
		  /* 82216910h */ case    6:  		/* lwz R10, <#[R4 + 28]> */
		/* 82216910h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000001C) );
		/* 82216910h case    6:*/		return 0x82216914;
		  /* 82216914h */ case    7:  		/* stw R10, <#[R11]> */
		/* 82216914h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82216914h case    7:*/		return 0x82216918;
		  /* 82216918h */ case    8:  		/* addi R11, R11, 4 */
		/* 82216918h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82216918h case    8:*/		return 0x8221691C;
	}
	return 0x8221691C;
} // Block from 822168F8h-8221691Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8221691Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221691C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221691C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221691C);
		  /* 8221691Ch */ case    0:  		/* lwz R10, <#[R4 + 16]> */
		/* 8221691Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000010) );
		/* 8221691Ch case    0:*/		return 0x82216920;
		  /* 82216920h */ case    1:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 82216920h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 82216920h case    1:*/		return 0x82216924;
		  /* 82216924h */ case    2:  		/* bclr 12, CR0_EQ */
		/* 82216924h case    2:*/		if ( regs.CR[0].eq ) { return (uint32)regs.LR; }
		/* 82216924h case    2:*/		return 0x82216928;
	}
	return 0x82216928;
} // Block from 8221691Ch-82216928h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82216928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216928);
		  /* 82216928h */ case    0:  		/* lwz R10, <#[R4 + 40]> */
		/* 82216928h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000028) );
		/* 82216928h case    0:*/		return 0x8221692C;
		  /* 8221692Ch */ case    1:  		/* stw R10, <#[R11]> */
		/* 8221692Ch case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221692Ch case    1:*/		return 0x82216930;
		  /* 82216930h */ case    2:  		/* bclr 20, CR0_LT */
		/* 82216930h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82216930h case    2:*/		return 0x82216934;
	}
	return 0x82216934;
} // Block from 82216928h-82216934h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82216934h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216934( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216934) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216934);
		  /* 82216934h */ case    0:  		/* nop */
		/* 82216934h case    0:*/		cpu::op::nop();
		/* 82216934h case    0:*/		return 0x82216938;
	}
	return 0x82216938;
} // Block from 82216934h-82216938h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82216938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216938);
		  /* 82216938h */ case    0:  		/* mfspr R12, LR */
		/* 82216938h case    0:*/		regs.R12 = regs.LR;
		/* 82216938h case    0:*/		return 0x8221693C;
		  /* 8221693Ch */ case    1:  		/* bl -1595108 */
		/* 8221693Ch case    1:*/		regs.LR = 0x82216940; return 0x82091258;
		/* 8221693Ch case    1:*/		return 0x82216940;
		  /* 82216940h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82216940h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82216940h case    2:*/		return 0x82216944;
		  /* 82216944h */ case    3:  		/* mr R28, R7 */
		/* 82216944h case    3:*/		regs.R28 = regs.R7;
		/* 82216944h case    3:*/		return 0x82216948;
		  /* 82216948h */ case    4:  		/* lwz R8, <#[R3 + 28]> */
		/* 82216948h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x0000001C) );
		/* 82216948h case    4:*/		return 0x8221694C;
		  /* 8221694Ch */ case    5:  		/* li R7, 3 */
		/* 8221694Ch case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 8221694Ch case    5:*/		return 0x82216950;
		  /* 82216950h */ case    6:  		/* li R11, 0 */
		/* 82216950h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82216950h case    6:*/		return 0x82216954;
		  /* 82216954h */ case    7:  		/* addi R10, R4, 16 */
		/* 82216954h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R4,0x10);
		/* 82216954h case    7:*/		return 0x82216958;
		  /* 82216958h */ case    8:  		/* lwz R9, <#[R10]> */
		/* 82216958h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82216958h case    8:*/		return 0x8221695C;
		  /* 8221695Ch */ case    9:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 8221695Ch case    9:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 8221695Ch case    9:*/		return 0x82216960;
		  /* 82216960h */ case   10:  		/* bc 4, CR0_EQ, 24 */
		/* 82216960h case   10:*/		if ( !regs.CR[0].eq ) { return 0x82216978;  }
		/* 82216960h case   10:*/		return 0x82216964;
		  /* 82216964h */ case   11:  		/* addi R11, R11, 1 */
		/* 82216964h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82216964h case   11:*/		return 0x82216968;
		  /* 82216968h */ case   12:  		/* addi R10, R10, 4 */
		/* 82216968h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82216968h case   12:*/		return 0x8221696C;
		  /* 8221696Ch */ case   13:  		/* cmplwi CR6, R11, 3 */
		/* 8221696Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8221696Ch case   13:*/		return 0x82216970;
		  /* 82216970h */ case   14:  		/* bc 12, CR6_LT, -24 */
		/* 82216970h case   14:*/		if ( regs.CR[6].lt ) { return 0x82216958;  }
		/* 82216970h case   14:*/		return 0x82216974;
		  /* 82216974h */ case   15:  		/* b 20 */
		/* 82216974h case   15:*/		return 0x82216988;
		/* 82216974h case   15:*/		return 0x82216978;
	}
	return 0x82216978;
} // Block from 82216938h-82216978h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82216978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216978);
		  /* 82216978h */ case    0:  		/* addi R11, R11, 10 */
		/* 82216978h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xA);
		/* 82216978h case    0:*/		return 0x8221697C;
		  /* 8221697Ch */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221697Ch case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221697Ch case    1:*/		return 0x82216980;
		  /* 82216980h */ case    2:  		/* lwzx R11, <#[R11 + R4]> */
		/* 82216980h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82216980h case    2:*/		return 0x82216984;
		  /* 82216984h */ case    3:  		/* rlwinm R7, R11, 15, 29, 31 */
		/* 82216984h case    3:*/		cpu::op::rlwinm<0,15,29,31>(regs,&regs.R7,regs.R11);
		/* 82216984h case    3:*/		return 0x82216988;
	}
	return 0x82216988;
} // Block from 82216978h-82216988h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82216988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216988);
		  /* 82216988h */ case    0:  		/* lwz R11, <#[R5]> */
		/* 82216988h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 82216988h case    0:*/		return 0x8221698C;
		  /* 8221698Ch */ case    1:  		/* stw R11, <#[R6]> */
		/* 8221698Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 8221698Ch case    1:*/		return 0x82216990;
		  /* 82216990h */ case    2:  		/* lwzu R11, <#[R5 + 4]> */
		/* 82216990h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		regs.R5 = (uint32)(regs.R5 + 0x00000004);
		/* 82216990h case    2:*/		return 0x82216994;
		  /* 82216994h */ case    3:  		/* stwu R11, <#[R6 + 4]> */
		/* 82216994h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000004) );
		regs.R6 = (uint32)(regs.R6 + 0x00000004);
		/* 82216994h case    3:*/		return 0x82216998;
		  /* 82216998h */ case    4:  		/* lwzu R11, <#[R5 + 4]> */
		/* 82216998h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		regs.R5 = (uint32)(regs.R5 + 0x00000004);
		/* 82216998h case    4:*/		return 0x8221699C;
		  /* 8221699Ch */ case    5:  		/* rlwinm. R9, R11, 9, 31, 31 */
		/* 8221699Ch case    5:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R9,regs.R11);
		/* 8221699Ch case    5:*/		return 0x822169A0;
		  /* 822169A0h */ case    6:  		/* stwu R11, <#[R6 + 4]> */
		/* 822169A0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000004) );
		regs.R6 = (uint32)(regs.R6 + 0x00000004);
		/* 822169A0h case    6:*/		return 0x822169A4;
		  /* 822169A4h */ case    7:  		/* lwzu R10, <#[R5 + 4]> */
		/* 822169A4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000004) );
		regs.R5 = (uint32)(regs.R5 + 0x00000004);
		/* 822169A4h case    7:*/		return 0x822169A8;
		  /* 822169A8h */ case    8:  		/* addi R11, R5, 4 */
		/* 822169A8h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R5,0x4);
		/* 822169A8h case    8:*/		return 0x822169AC;
		  /* 822169ACh */ case    9:  		/* stwu R10, <#[R6 + 4]> */
		/* 822169ACh case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R6 + 0x00000004) );
		regs.R6 = (uint32)(regs.R6 + 0x00000004);
		/* 822169ACh case    9:*/		return 0x822169B0;
		  /* 822169B0h */ case   10:  		/* addi R10, R6, 4 */
		/* 822169B0h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R6,0x4);
		/* 822169B0h case   10:*/		return 0x822169B4;
		  /* 822169B4h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 822169B4h case   11:*/		if ( regs.CR[0].eq ) { return 0x822169C8;  }
		/* 822169B4h case   11:*/		return 0x822169B8;
		  /* 822169B8h */ case   12:  		/* lwz R6, <#[R11]> */
		/* 822169B8h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822169B8h case   12:*/		return 0x822169BC;
		  /* 822169BCh */ case   13:  		/* addi R11, R11, 4 */
		/* 822169BCh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822169BCh case   13:*/		return 0x822169C0;
		  /* 822169C0h */ case   14:  		/* stw R6, <#[R10]> */
		/* 822169C0h case   14:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 822169C0h case   14:*/		return 0x822169C4;
		  /* 822169C4h */ case   15:  		/* addi R10, R10, 4 */
		/* 822169C4h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 822169C4h case   15:*/		return 0x822169C8;
	}
	return 0x822169C8;
} // Block from 82216988h-822169C8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 822169C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822169C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822169C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822169C8);
		  /* 822169C8h */ case    0:  		/* lwz R6, <#[R11]> */
		/* 822169C8h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 822169C8h case    0:*/		return 0x822169CC;
		  /* 822169CCh */ case    1:  		/* cmplwi CR6, R9, 0 */
		/* 822169CCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 822169CCh case    1:*/		return 0x822169D0;
		  /* 822169D0h */ case    2:  		/* stw R6, <#[R10]> */
		/* 822169D0h case    2:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 822169D0h case    2:*/		return 0x822169D4;
		  /* 822169D4h */ case    3:  		/* lwzu R9, <#[R11 + 4]> */
		/* 822169D4h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822169D4h case    3:*/		return 0x822169D8;
		  /* 822169D8h */ case    4:  		/* addi R11, R11, 4 */
		/* 822169D8h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822169D8h case    4:*/		return 0x822169DC;
		  /* 822169DCh */ case    5:  		/* stwu R9, <#[R10 + 4]> */
		/* 822169DCh case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 822169DCh case    5:*/		return 0x822169E0;
		  /* 822169E0h */ case    6:  		/* addi R10, R10, 4 */
		/* 822169E0h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 822169E0h case    6:*/		return 0x822169E4;
		  /* 822169E4h */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 822169E4h case    7:*/		if ( regs.CR[6].eq ) { return 0x822169F8;  }
		/* 822169E4h case    7:*/		return 0x822169E8;
		  /* 822169E8h */ case    8:  		/* lwz R9, <#[R11]> */
		/* 822169E8h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822169E8h case    8:*/		return 0x822169EC;
		  /* 822169ECh */ case    9:  		/* addi R11, R11, 4 */
		/* 822169ECh case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822169ECh case    9:*/		return 0x822169F0;
		  /* 822169F0h */ case   10:  		/* stw R9, <#[R10]> */
		/* 822169F0h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 822169F0h case   10:*/		return 0x822169F4;
		  /* 822169F4h */ case   11:  		/* addi R10, R10, 4 */
		/* 822169F4h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 822169F4h case   11:*/		return 0x822169F8;
	}
	return 0x822169F8;
} // Block from 822169C8h-822169F8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 822169F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822169F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822169F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822169F8);
		  /* 822169F8h */ case    0:  		/* lwz R9, <#[R11]> */
		/* 822169F8h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822169F8h case    0:*/		return 0x822169FC;
		  /* 822169FCh */ case    1:  		/* li R6, 0 */
		/* 822169FCh case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822169FCh case    1:*/		return 0x82216A00;
		  /* 82216A00h */ case    2:  		/* li R5, 17 */
		/* 82216A00h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x11);
		/* 82216A00h case    2:*/		return 0x82216A04;
		  /* 82216A04h */ case    3:  		/* stw R9, <#[R10]> */
		/* 82216A04h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82216A04h case    3:*/		return 0x82216A08;
		  /* 82216A08h */ case    4:  		/* lwzu R9, <#[R11 + 4]> */
		/* 82216A08h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82216A08h case    4:*/		return 0x82216A0C;
		  /* 82216A0Ch */ case    5:  		/* oris R9, R9, 64 */
		/* 82216A0Ch case    5:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x40);
		/* 82216A0Ch case    5:*/		return 0x82216A10;
		  /* 82216A10h */ case    6:  		/* stw R9, <#[R11]> */
		/* 82216A10h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216A10h case    6:*/		return 0x82216A14;
		  /* 82216A14h */ case    7:  		/* stwu R9, <#[R10 + 4]> */
		/* 82216A14h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 82216A14h case    7:*/		return 0x82216A18;
	}
	return 0x82216A18;
} // Block from 822169F8h-82216A18h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82216A18h
// Function '?DoSrcDivComp@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PATIL_Src@1@PATIL_Src_Mod@1@PATIL_Rel_Addr@1@IPAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216A18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216A18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216A18);
		  /* 82216A18h */ case    0:  		/* stwu R6, <#[R10 + 4]> */
		/* 82216A18h case    0:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 82216A18h case    0:*/		return 0x82216A1C;
		  /* 82216A1Ch */ case    1:  		/* lwzu R9, <#[R11 + 4]> */
		/* 82216A1Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82216A1Ch case    1:*/		return 0x82216A20;
		  /* 82216A20h */ case    2:  		/* addi R30, R11, 4 */
		/* 82216A20h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x4);
		/* 82216A20h case    2:*/		return 0x82216A24;
		  /* 82216A24h */ case    3:  		/* addi R10, R10, 4 */
		/* 82216A24h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82216A24h case    3:*/		return 0x82216A28;
		  /* 82216A28h */ case    4:  		/* lwz R8, <#[R8 + 23352]> */
		/* 82216A28h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00005B38) );
		/* 82216A28h case    4:*/		return 0x82216A2C;
		  /* 82216A2Ch */ case    5:  		/* rlwinm R29, R9, 9, 31, 31 */
		/* 82216A2Ch case    5:*/		cpu::op::rlwinm<0,9,31,31>(regs,&regs.R29,regs.R9);
		/* 82216A2Ch case    5:*/		return 0x82216A30;
		  /* 82216A30h */ case    6:  		/* addi R31, R10, 4 */
		/* 82216A30h case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R10,0x4);
		/* 82216A30h case    6:*/		return 0x82216A34;
		  /* 82216A34h */ case    7:  		/* sth R8, <#[R10 + 2]> */
		/* 82216A34h case    7:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R10 + 0x00000002) );
		/* 82216A34h case    7:*/		return 0x82216A38;
		  /* 82216A38h */ case    8:  		/* rlwinm. R8, R9, 10, 31, 31 */
		/* 82216A38h case    8:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R8,regs.R9);
		/* 82216A38h case    8:*/		return 0x82216A3C;
		  /* 82216A3Ch */ case    9:  		/* lwz R6, <#[R10]> */
		/* 82216A3Ch case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 82216A3Ch case    9:*/		return 0x82216A40;
		  /* 82216A40h */ case   10:  		/* rlwimi R6, R5, 18, 8, 15 */
		/* 82216A40h case   10:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R6,regs.R5);
		/* 82216A40h case   10:*/		return 0x82216A44;
		  /* 82216A44h */ case   11:  		/* stw R6, <#[R10]> */
		/* 82216A44h case   11:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 82216A44h case   11:*/		return 0x82216A48;
		  /* 82216A48h */ case   12:  		/* bc 12, CR0_EQ, 344 */
		/* 82216A48h case   12:*/		if ( regs.CR[0].eq ) { return 0x82216BA0;  }
		/* 82216A48h case   12:*/		return 0x82216A4C;
		  /* 82216A4Ch */ case   13:  		/* lwz R11, <#[R30]> */
		/* 82216A4Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82216A4Ch case   13:*/		return 0x82216A50;
		  /* 82216A50h */ case   14:  		/* cmplwi CR6, R7, 1 */
		/* 82216A50h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000001);
		/* 82216A50h case   14:*/		return 0x82216A54;
		  /* 82216A54h */ case   15:  		/* stw R11, <#[R31]> */
		/* 82216A54h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82216A54h case   15:*/		return 0x82216A58;
		  /* 82216A58h */ case   16:  		/* bc 12, CR6_LT, 256 */
		/* 82216A58h case   16:*/		if ( regs.CR[6].lt ) { return 0x82216B58;  }
		/* 82216A58h case   16:*/		return 0x82216A5C;
		  /* 82216A5Ch */ case   17:  		/* bc 12, CR6_EQ, 188 */
		/* 82216A5Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x82216B18;  }
		/* 82216A5Ch case   17:*/		return 0x82216A60;
		  /* 82216A60h */ case   18:  		/* cmplwi CR6, R7, 3 */
		/* 82216A60h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000003);
		/* 82216A60h case   18:*/		return 0x82216A64;
		  /* 82216A64h */ case   19:  		/* bc 12, CR6_LT, 112 */
		/* 82216A64h case   19:*/		if ( regs.CR[6].lt ) { return 0x82216AD4;  }
		/* 82216A64h case   19:*/		return 0x82216A68;
		  /* 82216A68h */ case   20:  		/* bc 12, CR6_EQ, 44 */
		/* 82216A68h case   20:*/		if ( regs.CR[6].eq ) { return 0x82216A94;  }
		/* 82216A68h case   20:*/		return 0x82216A6C;
		  /* 82216A6Ch */ case   21:  		/* lis R11, -32252 */
		/* 82216A6Ch case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82216A6Ch case   21:*/		return 0x82216A70;
		  /* 82216A70h */ case   22:  		/* lis R10, -32252 */
		/* 82216A70h case   22:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82216A70h case   22:*/		return 0x82216A74;
		  /* 82216A74h */ case   23:  		/* lis R9, -32253 */
		/* 82216A74h case   23:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82216A74h case   23:*/		return 0x82216A78;
		  /* 82216A78h */ case   24:  		/* addi R6, R11, -7312 */
		/* 82216A78h case   24:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFE370);
		/* 82216A78h case   24:*/		return 0x82216A7C;
		  /* 82216A7Ch */ case   25:  		/* addi R5, R10, -25364 */
		/* 82216A7Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFF9CEC);
		/* 82216A7Ch case   25:*/		return 0x82216A80;
		  /* 82216A80h */ case   26:  		/* addi R4, R9, 27460 */
		/* 82216A80h case   26:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 82216A80h case   26:*/		return 0x82216A84;
		  /* 82216A84h */ case   27:  		/* li R7, 11890 */
		/* 82216A84h case   27:*/		cpu::op::li<0>(regs,&regs.R7,0x2E72);
		/* 82216A84h case   27:*/		return 0x82216A88;
		  /* 82216A88h */ case   28:  		/* li R3, 0 */
		/* 82216A88h case   28:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82216A88h case   28:*/		return 0x82216A8C;
		  /* 82216A8Ch */ case   29:  		/* bl -781956 */
		/* 82216A8Ch case   29:*/		regs.LR = 0x82216A90; return 0x82157C08;
		/* 82216A8Ch case   29:*/		return 0x82216A90;
		  /* 82216A90h */ case   30:  		/* b 264 */
		/* 82216A90h case   30:*/		return 0x82216B98;
		/* 82216A90h case   30:*/		return 0x82216A94;
	}
	return 0x82216A94;
} // Block from 82216A18h-82216A94h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82216A94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216A94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216A94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216A94);
		  /* 82216A94h */ case    0:  		/* lwz R10, <#[R31]> */
		/* 82216A94h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82216A94h case    0:*/		return 0x82216A98;
		  /* 82216A98h */ case    1:  		/* lwz R11, <#[R30]> */
		/* 82216A98h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82216A98h case    1:*/		return 0x82216A9C;
		  /* 82216A9Ch */ case    2:  		/* rlwimi R11, R10, 0, 20, 16 */
		/* 82216A9Ch case    2:*/		cpu::op::rlwimi<0,0,20,16>(regs,&regs.R11,regs.R10);
		/* 82216A9Ch case    2:*/		return 0x82216AA0;
		  /* 82216AA0h */ case    3:  		/* stw R11, <#[R31]> */
		/* 82216AA0h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82216AA0h case    3:*/		return 0x82216AA4;
		  /* 82216AA4h */ case    4:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 82216AA4h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 82216AA4h case    4:*/		return 0x82216AA8;
		  /* 82216AA8h */ case    5:  		/* lwz R10, <#[R30]> */
		/* 82216AA8h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 82216AA8h case    5:*/		return 0x82216AAC;
		  /* 82216AACh */ case    6:  		/* rlwimi R11, R10, 20, 29, 31 */
		/* 82216AACh case    6:*/		cpu::op::rlwimi<0,20,29,31>(regs,&regs.R11,regs.R10);
		/* 82216AACh case    6:*/		return 0x82216AB0;
		  /* 82216AB0h */ case    7:  		/* stw R11, <#[R31]> */
		/* 82216AB0h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82216AB0h case    7:*/		return 0x82216AB4;
		  /* 82216AB4h */ case    8:  		/* lwz R11, <#[R30]> */
		/* 82216AB4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82216AB4h case    8:*/		return 0x82216AB8;
		  /* 82216AB8h */ case    9:  		/* lwz R10, <#[R31]> */
		/* 82216AB8h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82216AB8h case    9:*/		return 0x82216ABC;
		  /* 82216ABCh */ case   10:  		/* rlwimi R10, R11, 24, 25, 27 */
		/* 82216ABCh case   10:*/		cpu::op::rlwimi<0,24,25,27>(regs,&regs.R10,regs.R11);
		/* 82216ABCh case   10:*/		return 0x82216AC0;
		  /* 82216AC0h */ case   11:  		/* stw R10, <#[R31]> */
		/* 82216AC0h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82216AC0h case   11:*/		return 0x82216AC4;
		  /* 82216AC4h */ case   12:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82216AC4h case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82216AC4h case   12:*/		return 0x82216AC8;
		  /* 82216AC8h */ case   13:  		/* lwz R11, <#[R30]> */
		/* 82216AC8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82216AC8h case   13:*/		return 0x82216ACC;
		  /* 82216ACCh */ case   14:  		/* rlwimi R10, R11, 28, 21, 23 */
		/* 82216ACCh case   14:*/		cpu::op::rlwimi<0,28,21,23>(regs,&regs.R10,regs.R11);
		/* 82216ACCh case   14:*/		return 0x82216AD0;
		  /* 82216AD0h */ case   15:  		/* b 196 */
		/* 82216AD0h case   15:*/		return 0x82216B94;
		/* 82216AD0h case   15:*/		return 0x82216AD4;
	}
	return 0x82216AD4;
} // Block from 82216A94h-82216AD4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82216AD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216AD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216AD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216AD4);
		  /* 82216AD4h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 82216AD4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82216AD4h case    0:*/		return 0x82216AD8;
		  /* 82216AD8h */ case    1:  		/* lwz R10, <#[R31]> */
		/* 82216AD8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82216AD8h case    1:*/		return 0x82216ADC;
		  /* 82216ADCh */ case    2:  		/* rlwimi R10, R11, 4, 17, 19 */
		/* 82216ADCh case    2:*/		cpu::op::rlwimi<0,4,17,19>(regs,&regs.R10,regs.R11);
		/* 82216ADCh case    2:*/		return 0x82216AE0;
		  /* 82216AE0h */ case    3:  		/* stw R10, <#[R31]> */
		/* 82216AE0h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82216AE0h case    3:*/		return 0x82216AE4;
		  /* 82216AE4h */ case    4:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82216AE4h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82216AE4h case    4:*/		return 0x82216AE8;
		  /* 82216AE8h */ case    5:  		/* lwz R11, <#[R30]> */
		/* 82216AE8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82216AE8h case    5:*/		return 0x82216AEC;
		  /* 82216AECh */ case    6:  		/* rlwimi R10, R11, 24, 29, 31 */
		/* 82216AECh case    6:*/		cpu::op::rlwimi<0,24,29,31>(regs,&regs.R10,regs.R11);
		/* 82216AECh case    6:*/		return 0x82216AF0;
		  /* 82216AF0h */ case    7:  		/* stw R10, <#[R31]> */
		/* 82216AF0h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82216AF0h case    7:*/		return 0x82216AF4;
		  /* 82216AF4h */ case    8:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82216AF4h case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82216AF4h case    8:*/		return 0x82216AF8;
		  /* 82216AF8h */ case    9:  		/* lwz R11, <#[R30]> */
		/* 82216AF8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82216AF8h case    9:*/		return 0x82216AFC;
		  /* 82216AFCh */ case   10:  		/* rlwimi R10, R11, 28, 25, 27 */
		/* 82216AFCh case   10:*/		cpu::op::rlwimi<0,28,25,27>(regs,&regs.R10,regs.R11);
		/* 82216AFCh case   10:*/		return 0x82216B00;
		  /* 82216B00h */ case   11:  		/* stw R10, <#[R31]> */
		/* 82216B00h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82216B00h case   11:*/		return 0x82216B04;
		  /* 82216B04h */ case   12:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82216B04h case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82216B04h case   12:*/		return 0x82216B08;
		  /* 82216B08h */ case   13:  		/* lwz R11, <#[R30]> */
		/* 82216B08h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82216B08h case   13:*/		return 0x82216B0C;
		  /* 82216B0Ch */ case   14:  		/* rlwimi R11, R10, 0, 24, 20 */
		/* 82216B0Ch case   14:*/		cpu::op::rlwimi<0,0,24,20>(regs,&regs.R11,regs.R10);
		/* 82216B0Ch case   14:*/		return 0x82216B10;
		  /* 82216B10h */ case   15:  		/* stw R11, <#[R31]> */
		/* 82216B10h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82216B10h case   15:*/		return 0x82216B14;
		  /* 82216B14h */ case   16:  		/* b 132 */
		/* 82216B14h case   16:*/		return 0x82216B98;
		/* 82216B14h case   16:*/		return 0x82216B18;
	}
	return 0x82216B18;
} // Block from 82216AD4h-82216B18h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82216B18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216B18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216B18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216B18);
		  /* 82216B18h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 82216B18h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82216B18h case    0:*/		return 0x82216B1C;
		  /* 82216B1Ch */ case    1:  		/* lwz R10, <#[R31]> */
		/* 82216B1Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82216B1Ch case    1:*/		return 0x82216B20;
		  /* 82216B20h */ case    2:  		/* rlwimi R10, R11, 8, 17, 19 */
		/* 82216B20h case    2:*/		cpu::op::rlwimi<0,8,17,19>(regs,&regs.R10,regs.R11);
		/* 82216B20h case    2:*/		return 0x82216B24;
		  /* 82216B24h */ case    3:  		/* stw R10, <#[R31]> */
		/* 82216B24h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82216B24h case    3:*/		return 0x82216B28;
		  /* 82216B28h */ case    4:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82216B28h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82216B28h case    4:*/		return 0x82216B2C;
		  /* 82216B2Ch */ case    5:  		/* lwz R11, <#[R30]> */
		/* 82216B2Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82216B2Ch case    5:*/		return 0x82216B30;
		  /* 82216B30h */ case    6:  		/* rlwimi R10, R11, 28, 29, 31 */
		/* 82216B30h case    6:*/		cpu::op::rlwimi<0,28,29,31>(regs,&regs.R10,regs.R11);
		/* 82216B30h case    6:*/		return 0x82216B34;
		  /* 82216B34h */ case    7:  		/* stw R10, <#[R31]> */
		/* 82216B34h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82216B34h case    7:*/		return 0x82216B38;
		  /* 82216B38h */ case    8:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82216B38h case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82216B38h case    8:*/		return 0x82216B3C;
		  /* 82216B3Ch */ case    9:  		/* lwz R11, <#[R30]> */
		/* 82216B3Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82216B3Ch case    9:*/		return 0x82216B40;
		  /* 82216B40h */ case   10:  		/* rlwimi R11, R10, 0, 28, 24 */
		/* 82216B40h case   10:*/		cpu::op::rlwimi<0,0,28,24>(regs,&regs.R11,regs.R10);
		/* 82216B40h case   10:*/		return 0x82216B44;
		  /* 82216B44h */ case   11:  		/* stw R11, <#[R31]> */
		/* 82216B44h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82216B44h case   11:*/		return 0x82216B48;
		  /* 82216B48h */ case   12:  		/* lwz R11, <#[R30]> */
		/* 82216B48h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82216B48h case   12:*/		return 0x82216B4C;
		  /* 82216B4Ch */ case   13:  		/* lwz R10, <#[R31]> */
		/* 82216B4Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82216B4Ch case   13:*/		return 0x82216B50;
		  /* 82216B50h */ case   14:  		/* rlwimi R10, R11, 4, 21, 23 */
		/* 82216B50h case   14:*/		cpu::op::rlwimi<0,4,21,23>(regs,&regs.R10,regs.R11);
		/* 82216B50h case   14:*/		return 0x82216B54;
		  /* 82216B54h */ case   15:  		/* b 64 */
		/* 82216B54h case   15:*/		return 0x82216B94;
		/* 82216B54h case   15:*/		return 0x82216B58;
	}
	return 0x82216B58;
} // Block from 82216B18h-82216B58h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82216B58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216B58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216B58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216B58);
		  /* 82216B58h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 82216B58h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82216B58h case    0:*/		return 0x82216B5C;
		  /* 82216B5Ch */ case    1:  		/* lwz R10, <#[R31]> */
		/* 82216B5Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82216B5Ch case    1:*/		return 0x82216B60;
		  /* 82216B60h */ case    2:  		/* rlwimi R10, R11, 12, 17, 19 */
		/* 82216B60h case    2:*/		cpu::op::rlwimi<0,12,17,19>(regs,&regs.R10,regs.R11);
		/* 82216B60h case    2:*/		return 0x82216B64;
		  /* 82216B64h */ case    3:  		/* stw R10, <#[R31]> */
		/* 82216B64h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82216B64h case    3:*/		return 0x82216B68;
		  /* 82216B68h */ case    4:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82216B68h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82216B68h case    4:*/		return 0x82216B6C;
		  /* 82216B6Ch */ case    5:  		/* lwz R11, <#[R30]> */
		/* 82216B6Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82216B6Ch case    5:*/		return 0x82216B70;
		  /* 82216B70h */ case    6:  		/* rlwimi R11, R10, 0, 0, 28 */
		/* 82216B70h case    6:*/		cpu::op::rlwimi<0,0,0,28>(regs,&regs.R11,regs.R10);
		/* 82216B70h case    6:*/		return 0x82216B74;
		  /* 82216B74h */ case    7:  		/* stw R11, <#[R31]> */
		/* 82216B74h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82216B74h case    7:*/		return 0x82216B78;
		  /* 82216B78h */ case    8:  		/* lwz R11, <#[R30]> */
		/* 82216B78h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82216B78h case    8:*/		return 0x82216B7C;
		  /* 82216B7Ch */ case    9:  		/* lwz R10, <#[R31]> */
		/* 82216B7Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82216B7Ch case    9:*/		return 0x82216B80;
		  /* 82216B80h */ case   10:  		/* rlwimi R10, R11, 4, 25, 27 */
		/* 82216B80h case   10:*/		cpu::op::rlwimi<0,4,25,27>(regs,&regs.R10,regs.R11);
		/* 82216B80h case   10:*/		return 0x82216B84;
		  /* 82216B84h */ case   11:  		/* stw R10, <#[R31]> */
		/* 82216B84h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82216B84h case   11:*/		return 0x82216B88;
		  /* 82216B88h */ case   12:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 82216B88h case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 82216B88h case   12:*/		return 0x82216B8C;
		  /* 82216B8Ch */ case   13:  		/* lwz R11, <#[R30]> */
		/* 82216B8Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82216B8Ch case   13:*/		return 0x82216B90;
		  /* 82216B90h */ case   14:  		/* rlwimi R10, R11, 8, 21, 23 */
		/* 82216B90h case   14:*/		cpu::op::rlwimi<0,8,21,23>(regs,&regs.R10,regs.R11);
		/* 82216B90h case   14:*/		return 0x82216B94;
	}
	return 0x82216B94;
} // Block from 82216B58h-82216B94h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82216B94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216B94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216B94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216B94);
		  /* 82216B94h */ case    0:  		/* stw R10, <#[R31]> */
		/* 82216B94h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82216B94h case    0:*/		return 0x82216B98;
	}
	return 0x82216B98;
} // Block from 82216B94h-82216B98h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82216B98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216B98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216B98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216B98);
		  /* 82216B98h */ case    0:  		/* addi R30, R30, 4 */
		/* 82216B98h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82216B98h case    0:*/		return 0x82216B9C;
		  /* 82216B9Ch */ case    1:  		/* b 16 */
		/* 82216B9Ch case    1:*/		return 0x82216BAC;
		/* 82216B9Ch case    1:*/		return 0x82216BA0;
	}
	return 0x82216BA0;
} // Block from 82216B98h-82216BA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82216BA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216BA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216BA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216BA0);
		  /* 82216BA0h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82216BA0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82216BA0h case    0:*/		return 0x82216BA4;
		  /* 82216BA4h */ case    1:  		/* rlwimi R11, R7, 12, 17, 19 */
		/* 82216BA4h case    1:*/		cpu::op::rlwimi<0,12,17,19>(regs,&regs.R11,regs.R7);
		/* 82216BA4h case    1:*/		return 0x82216BA8;
		  /* 82216BA8h */ case    2:  		/* stw R11, <#[R31]> */
		/* 82216BA8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82216BA8h case    2:*/		return 0x82216BAC;
	}
	return 0x82216BAC;
} // Block from 82216BA0h-82216BACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82216BACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216BAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216BAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216BAC);
		  /* 82216BACh */ case    0:  		/* addi R3, R31, 4 */
		/* 82216BACh case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x4);
		/* 82216BACh case    0:*/		return 0x82216BB0;
		  /* 82216BB0h */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 82216BB0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82216BB0h case    1:*/		return 0x82216BB4;
		  /* 82216BB4h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 82216BB4h case    2:*/		if ( regs.CR[6].eq ) { return 0x82216BC4;  }
		/* 82216BB4h case    2:*/		return 0x82216BB8;
		  /* 82216BB8h */ case    3:  		/* lwz R11, <#[R30]> */
		/* 82216BB8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82216BB8h case    3:*/		return 0x82216BBC;
		  /* 82216BBCh */ case    4:  		/* stw R11, <#[R3]> */
		/* 82216BBCh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82216BBCh case    4:*/		return 0x82216BC0;
		  /* 82216BC0h */ case    5:  		/* addi R3, R3, 4 */
		/* 82216BC0h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x4);
		/* 82216BC0h case    5:*/		return 0x82216BC4;
	}
	return 0x82216BC4;
} // Block from 82216BACh-82216BC4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82216BC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216BC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216BC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216BC4);
		  /* 82216BC4h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 82216BC4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82216BC4h case    0:*/		return 0x82216BC8;
		  /* 82216BC8h */ case    1:  		/* addi R11, R11, 2 */
		/* 82216BC8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 82216BC8h case    1:*/		return 0x82216BCC;
		  /* 82216BCCh */ case    2:  		/* stw R11, <#[R28]> */
		/* 82216BCCh case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82216BCCh case    2:*/		return 0x82216BD0;
		  /* 82216BD0h */ case    3:  		/* addi R1, R1, 128 */
		/* 82216BD0h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82216BD0h case    3:*/		return 0x82216BD4;
		  /* 82216BD4h */ case    4:  		/* b -1595692 */
		/* 82216BD4h case    4:*/		return 0x820912A8;
		/* 82216BD4h case    4:*/		return 0x82216BD8;
	}
	return 0x82216BD8;
} // Block from 82216BC4h-82216BD8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82216BD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216BD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216BD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216BD8);
		  /* 82216BD8h */ case    0:  		/* mfspr R12, LR */
		/* 82216BD8h case    0:*/		regs.R12 = regs.LR;
		/* 82216BD8h case    0:*/		return 0x82216BDC;
		  /* 82216BDCh */ case    1:  		/* bl -1595792 */
		/* 82216BDCh case    1:*/		regs.LR = 0x82216BE0; return 0x8209124C;
		/* 82216BDCh case    1:*/		return 0x82216BE0;
		  /* 82216BE0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82216BE0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82216BE0h case    2:*/		return 0x82216BE4;
		  /* 82216BE4h */ case    3:  		/* lhz R11, <#[R4]> */
		/* 82216BE4h case    3:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 82216BE4h case    3:*/		return 0x82216BE8;
		  /* 82216BE8h */ case    4:  		/* lis R10, -32253 */
		/* 82216BE8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82216BE8h case    4:*/		return 0x82216BEC;
		  /* 82216BECh */ case    5:  		/* lis R9, -32252 */
		/* 82216BECh case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 82216BECh case    5:*/		return 0x82216BF0;
		  /* 82216BF0h */ case    6:  		/* lwz R30, <#[R3 + 28]> */
		/* 82216BF0h case    6:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x0000001C) );
		/* 82216BF0h case    6:*/		return 0x82216BF4;
		  /* 82216BF4h */ case    7:  		/* rlwinm R11, R11, 0, 26, 31 */
		/* 82216BF4h case    7:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R11,regs.R11);
		/* 82216BF4h case    7:*/		return 0x82216BF8;
		  /* 82216BF8h */ case    8:  		/* mr R31, R3 */
		/* 82216BF8h case    8:*/		regs.R31 = regs.R3;
		/* 82216BF8h case    8:*/		return 0x82216BFC;
		  /* 82216BFCh */ case    9:  		/* mr R29, R4 */
		/* 82216BFCh case    9:*/		regs.R29 = regs.R4;
		/* 82216BFCh case    9:*/		return 0x82216C00;
		  /* 82216C00h */ case   10:  		/* mr R25, R5 */
		/* 82216C00h case   10:*/		regs.R25 = regs.R5;
		/* 82216C00h case   10:*/		return 0x82216C04;
		  /* 82216C04h */ case   11:  		/* addi R27, R10, 27460 */
		/* 82216C04h case   11:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0x6B44);
		/* 82216C04h case   11:*/		return 0x82216C08;
		  /* 82216C08h */ case   12:  		/* cmplwi CR6, R11, 5 */
		/* 82216C08h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 82216C08h case   12:*/		return 0x82216C0C;
		  /* 82216C0Ch */ case   13:  		/* addi R26, R9, -7312 */
		/* 82216C0Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R9,0xFFFFE370);
		/* 82216C0Ch case   13:*/		return 0x82216C10;
		  /* 82216C10h */ case   14:  		/* bc 12, CR6_EQ, 40 */
		/* 82216C10h case   14:*/		if ( regs.CR[6].eq ) { return 0x82216C38;  }
		/* 82216C10h case   14:*/		return 0x82216C14;
		  /* 82216C14h */ case   15:  		/* cmplwi CR6, R11, 4 */
		/* 82216C14h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 82216C14h case   15:*/		return 0x82216C18;
		  /* 82216C18h */ case   16:  		/* bc 12, CR6_EQ, 32 */
		/* 82216C18h case   16:*/		if ( regs.CR[6].eq ) { return 0x82216C38;  }
		/* 82216C18h case   16:*/		return 0x82216C1C;
		  /* 82216C1Ch */ case   17:  		/* lis R11, -32252 */
		/* 82216C1Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82216C1Ch case   17:*/		return 0x82216C20;
		  /* 82216C20h */ case   18:  		/* mr R6, R26 */
		/* 82216C20h case   18:*/		regs.R6 = regs.R26;
		/* 82216C20h case   18:*/		return 0x82216C24;
		  /* 82216C24h */ case   19:  		/* addi R5, R11, -5824 */
		/* 82216C24h case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE940);
		/* 82216C24h case   19:*/		return 0x82216C28;
		  /* 82216C28h */ case   20:  		/* mr R4, R27 */
		/* 82216C28h case   20:*/		regs.R4 = regs.R27;
		/* 82216C28h case   20:*/		return 0x82216C2C;
		  /* 82216C2Ch */ case   21:  		/* li R7, 11951 */
		/* 82216C2Ch case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x2EAF);
		/* 82216C2Ch case   21:*/		return 0x82216C30;
		  /* 82216C30h */ case   22:  		/* li R3, 0 */
		/* 82216C30h case   22:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82216C30h case   22:*/		return 0x82216C34;
		  /* 82216C34h */ case   23:  		/* bl -782380 */
		/* 82216C34h case   23:*/		regs.LR = 0x82216C38; return 0x82157C08;
		/* 82216C34h case   23:*/		return 0x82216C38;
	}
	return 0x82216C38;
} // Block from 82216BD8h-82216C38h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82216C38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216C38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216C38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216C38);
		  /* 82216C38h */ case    0:  		/* cmplwi CR6, R25, 31 */
		/* 82216C38h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x0000001F);
		/* 82216C38h case    0:*/		return 0x82216C3C;
		  /* 82216C3Ch */ case    1:  		/* bc 4, CR6_GT, 32 */
		/* 82216C3Ch case    1:*/		if ( !regs.CR[6].gt ) { return 0x82216C5C;  }
		/* 82216C3Ch case    1:*/		return 0x82216C40;
		  /* 82216C40h */ case    2:  		/* lis R11, -32252 */
		/* 82216C40h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82216C40h case    2:*/		return 0x82216C44;
		  /* 82216C44h */ case    3:  		/* mr R6, R26 */
		/* 82216C44h case    3:*/		regs.R6 = regs.R26;
		/* 82216C44h case    3:*/		return 0x82216C48;
		  /* 82216C48h */ case    4:  		/* addi R5, R11, -5848 */
		/* 82216C48h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE928);
		/* 82216C48h case    4:*/		return 0x82216C4C;
		  /* 82216C4Ch */ case    5:  		/* mr R4, R27 */
		/* 82216C4Ch case    5:*/		regs.R4 = regs.R27;
		/* 82216C4Ch case    5:*/		return 0x82216C50;
		  /* 82216C50h */ case    6:  		/* li R7, 11954 */
		/* 82216C50h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x2EB2);
		/* 82216C50h case    6:*/		return 0x82216C54;
		  /* 82216C54h */ case    7:  		/* li R3, 0 */
		/* 82216C54h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82216C54h case    7:*/		return 0x82216C58;
		  /* 82216C58h */ case    8:  		/* bl -782416 */
		/* 82216C58h case    8:*/		regs.LR = 0x82216C5C; return 0x82157C08;
		/* 82216C58h case    8:*/		return 0x82216C5C;
	}
	return 0x82216C5C;
} // Block from 82216C38h-82216C5Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82216C5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216C5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216C5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216C5C);
		  /* 82216C5Ch */ case    0:  		/* lwz R11, <#[R29]> */
		/* 82216C5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82216C5Ch case    0:*/		return 0x82216C60;
		  /* 82216C60h */ case    1:  		/* rlwinm R28, R11, 0, 16, 31 */
		/* 82216C60h case    1:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R28,regs.R11);
		/* 82216C60h case    1:*/		return 0x82216C64;
		  /* 82216C64h */ case    2:  		/* rlwinm R11, R11, 22, 20, 25 */
		/* 82216C64h case    2:*/		cpu::op::rlwinm<0,22,20,25>(regs,&regs.R11,regs.R11);
		/* 82216C64h case    2:*/		return 0x82216C68;
		  /* 82216C68h */ case    3:  		/* add R11, R11, R28 */
		/* 82216C68h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 82216C68h case    3:*/		return 0x82216C6C;
		  /* 82216C6Ch */ case    4:  		/* addi R11, R11, 4200 */
		/* 82216C6Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1068);
		/* 82216C6Ch case    4:*/		return 0x82216C70;
		  /* 82216C70h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82216C70h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82216C70h case    5:*/		return 0x82216C74;
		  /* 82216C74h */ case    6:  		/* lwzx R11, <#[R11 + R30]> */
		/* 82216C74h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82216C74h case    6:*/		return 0x82216C78;
		  /* 82216C78h */ case    7:  		/* cmpwi CR6, R11, -1 */
		/* 82216C78h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82216C78h case    7:*/		return 0x82216C7C;
		  /* 82216C7Ch */ case    8:  		/* bc 4, CR6_EQ, 32 */
		/* 82216C7Ch case    8:*/		if ( !regs.CR[6].eq ) { return 0x82216C9C;  }
		/* 82216C7Ch case    8:*/		return 0x82216C80;
		  /* 82216C80h */ case    9:  		/* lis R11, -32252 */
		/* 82216C80h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82216C80h case    9:*/		return 0x82216C84;
		  /* 82216C84h */ case   10:  		/* mr R6, R26 */
		/* 82216C84h case   10:*/		regs.R6 = regs.R26;
		/* 82216C84h case   10:*/		return 0x82216C88;
		  /* 82216C88h */ case   11:  		/* addi R5, R11, -5920 */
		/* 82216C88h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE8E0);
		/* 82216C88h case   11:*/		return 0x82216C8C;
		  /* 82216C8Ch */ case   12:  		/* mr R4, R27 */
		/* 82216C8Ch case   12:*/		regs.R4 = regs.R27;
		/* 82216C8Ch case   12:*/		return 0x82216C90;
		  /* 82216C90h */ case   13:  		/* li R7, 11959 */
		/* 82216C90h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x2EB7);
		/* 82216C90h case   13:*/		return 0x82216C94;
		  /* 82216C94h */ case   14:  		/* li R3, 0 */
		/* 82216C94h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82216C94h case   14:*/		return 0x82216C98;
		  /* 82216C98h */ case   15:  		/* bl -782480 */
		/* 82216C98h case   15:*/		regs.LR = 0x82216C9C; return 0x82157C08;
		/* 82216C98h case   15:*/		return 0x82216C9C;
	}
	return 0x82216C9C;
} // Block from 82216C5Ch-82216C9Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 82216C9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216C9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216C9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216C9C);
		  /* 82216C9Ch */ case    0:  		/* lhz R11, <#[R29]> */
		/* 82216C9Ch case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82216C9Ch case    0:*/		return 0x82216CA0;
		  /* 82216CA0h */ case    1:  		/* li R7, 0 */
		/* 82216CA0h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82216CA0h case    1:*/		return 0x82216CA4;
		  /* 82216CA4h */ case    2:  		/* li R6, 0 */
		/* 82216CA4h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82216CA4h case    2:*/		return 0x82216CA8;
		  /* 82216CA8h */ case    3:  		/* rlwinm R11, R11, 6, 20, 25 */
		/* 82216CA8h case    3:*/		cpu::op::rlwinm<0,6,20,25>(regs,&regs.R11,regs.R11);
		/* 82216CA8h case    3:*/		return 0x82216CAC;
		  /* 82216CACh */ case    4:  		/* mr R5, R25 */
		/* 82216CACh case    4:*/		regs.R5 = regs.R25;
		/* 82216CACh case    4:*/		return 0x82216CB0;
		  /* 82216CB0h */ case    5:  		/* add R11, R11, R28 */
		/* 82216CB0h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 82216CB0h case    5:*/		return 0x82216CB4;
		  /* 82216CB4h */ case    6:  		/* mr R3, R31 */
		/* 82216CB4h case    6:*/		regs.R3 = regs.R31;
		/* 82216CB4h case    6:*/		return 0x82216CB8;
		  /* 82216CB8h */ case    7:  		/* addi R11, R11, 4200 */
		/* 82216CB8h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1068);
		/* 82216CB8h case    7:*/		return 0x82216CBC;
		  /* 82216CBCh */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82216CBCh case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82216CBCh case    8:*/		return 0x82216CC0;
		  /* 82216CC0h */ case    9:  		/* lwzx R4, <#[R11 + R30]> */
		/* 82216CC0h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82216CC0h case    9:*/		return 0x82216CC4;
		  /* 82216CC4h */ case   10:  		/* bl -30932 */
		/* 82216CC4h case   10:*/		regs.LR = 0x82216CC8; return 0x8220F3F0;
		/* 82216CC4h case   10:*/		return 0x82216CC8;
		  /* 82216CC8h */ case   11:  		/* lwz R5, <#[R30 + 12]> */
		/* 82216CC8h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 82216CC8h case   11:*/		return 0x82216CCC;
		  /* 82216CCCh */ case   12:  		/* li R11, 1 */
		/* 82216CCCh case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82216CCCh case   12:*/		return 0x82216CD0;
		  /* 82216CD0h */ case   13:  		/* addi R7, R1, 80 */
		/* 82216CD0h case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82216CD0h case   13:*/		return 0x82216CD4;
		  /* 82216CD4h */ case   14:  		/* stw R11, <#[R1 + 84]> */
		/* 82216CD4h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82216CD4h case   14:*/		return 0x82216CD8;
		  /* 82216CD8h */ case   15:  		/* lis R6, 1 */
		/* 82216CD8h case   15:*/		cpu::op::lis<0>(regs,&regs.R6,0x1);
		/* 82216CD8h case   15:*/		return 0x82216CDC;
		  /* 82216CDCh */ case   16:  		/* addi R4, R30, 13152 */
		/* 82216CDCh case   16:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R30,0x3360);
		/* 82216CDCh case   16:*/		return 0x82216CE0;
		  /* 82216CE0h */ case   17:  		/* mr R3, R31 */
		/* 82216CE0h case   17:*/		regs.R3 = regs.R31;
		/* 82216CE0h case   17:*/		return 0x82216CE4;
		  /* 82216CE4h */ case   18:  		/* stw R5, <#[R1 + 80]> */
		/* 82216CE4h case   18:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000050) );
		/* 82216CE4h case   18:*/		return 0x82216CE8;
		  /* 82216CE8h */ case   19:  		/* stw R5, <#[R1 + 88]> */
		/* 82216CE8h case   19:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000058) );
		/* 82216CE8h case   19:*/		return 0x82216CEC;
		  /* 82216CECh */ case   20:  		/* bl -31116 */
		/* 82216CECh case   20:*/		regs.LR = 0x82216CF0; return 0x8220F360;
		/* 82216CECh case   20:*/		return 0x82216CF0;
		  /* 82216CF0h */ case   21:  		/* lwz R11, <#[R31 + 1636]> */
		/* 82216CF0h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000664) );
		/* 82216CF0h case   21:*/		return 0x82216CF4;
		  /* 82216CF4h */ case   22:  		/* addi R11, R11, 1 */
		/* 82216CF4h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82216CF4h case   22:*/		return 0x82216CF8;
		  /* 82216CF8h */ case   23:  		/* stw R11, <#[R31 + 1636]> */
		/* 82216CF8h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000664) );
		/* 82216CF8h case   23:*/		return 0x82216CFC;
		  /* 82216CFCh */ case   24:  		/* addi R1, R1, 160 */
		/* 82216CFCh case   24:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82216CFCh case   24:*/		return 0x82216D00;
		  /* 82216D00h */ case   25:  		/* b -1596004 */
		/* 82216D00h case   25:*/		return 0x8209129C;
		/* 82216D00h case   25:*/		return 0x82216D04;
		  /* 82216D04h */ case   26:  		/* nop */
		/* 82216D04h case   26:*/		cpu::op::nop();
		/* 82216D04h case   26:*/		return 0x82216D08;
	}
	return 0x82216D08;
} // Block from 82216C9Ch-82216D08h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82216D08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216D08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216D08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216D08);
		  /* 82216D08h */ case    0:  		/* mfspr R12, LR */
		/* 82216D08h case    0:*/		regs.R12 = regs.LR;
		/* 82216D08h case    0:*/		return 0x82216D0C;
		  /* 82216D0Ch */ case    1:  		/* bl -1596108 */
		/* 82216D0Ch case    1:*/		regs.LR = 0x82216D10; return 0x82091240;
		/* 82216D0Ch case    1:*/		return 0x82216D10;
		  /* 82216D10h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82216D10h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82216D10h case    2:*/		return 0x82216D14;
		  /* 82216D14h */ case    3:  		/* lis R11, -32253 */
		/* 82216D14h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82216D14h case    3:*/		return 0x82216D18;
		  /* 82216D18h */ case    4:  		/* lwz R10, <#[R4 + 4]> */
		/* 82216D18h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000004) );
		/* 82216D18h case    4:*/		return 0x82216D1C;
		  /* 82216D1Ch */ case    5:  		/* lwz R27, <#[R3 + 28]> */
		/* 82216D1Ch case    5:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R3 + 0x0000001C) );
		/* 82216D1Ch case    5:*/		return 0x82216D20;
		  /* 82216D20h */ case    6:  		/* mr R30, R3 */
		/* 82216D20h case    6:*/		regs.R30 = regs.R3;
		/* 82216D20h case    6:*/		return 0x82216D24;
		  /* 82216D24h */ case    7:  		/* addi R23, R11, 27460 */
		/* 82216D24h case    7:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0x6B44);
		/* 82216D24h case    7:*/		return 0x82216D28;
		  /* 82216D28h */ case    8:  		/* lhz R9, <#[R4]> */
		/* 82216D28h case    8:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000000) );
		/* 82216D28h case    8:*/		return 0x82216D2C;
		  /* 82216D2Ch */ case    9:  		/* rlwinm R25, R10, 0, 16, 31 */
		/* 82216D2Ch case    9:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R25,regs.R10);
		/* 82216D2Ch case    9:*/		return 0x82216D30;
		  /* 82216D30h */ case   10:  		/* rlwinm R11, R10, 22, 20, 25 */
		/* 82216D30h case   10:*/		cpu::op::rlwinm<0,22,20,25>(regs,&regs.R11,regs.R10);
		/* 82216D30h case   10:*/		return 0x82216D34;
		  /* 82216D34h */ case   11:  		/* lis R10, -32252 */
		/* 82216D34h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82216D34h case   11:*/		return 0x82216D38;
		  /* 82216D38h */ case   12:  		/* add R11, R11, R25 */
		/* 82216D38h case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R25);
		/* 82216D38h case   12:*/		return 0x82216D3C;
		  /* 82216D3Ch */ case   13:  		/* mr R28, R4 */
		/* 82216D3Ch case   13:*/		regs.R28 = regs.R4;
		/* 82216D3Ch case   13:*/		return 0x82216D40;
		  /* 82216D40h */ case   14:  		/* addi R11, R11, 4200 */
		/* 82216D40h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1068);
		/* 82216D40h case   14:*/		return 0x82216D44;
		  /* 82216D44h */ case   15:  		/* mr R31, R5 */
		/* 82216D44h case   15:*/		regs.R31 = regs.R5;
		/* 82216D44h case   15:*/		return 0x82216D48;
		  /* 82216D48h */ case   16:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82216D48h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82216D48h case   16:*/		return 0x82216D4C;
		  /* 82216D4Ch */ case   17:  		/* mr R24, R6 */
		/* 82216D4Ch case   17:*/		regs.R24 = regs.R6;
		/* 82216D4Ch case   17:*/		return 0x82216D50;
		  /* 82216D50h */ case   18:  		/* li R26, 0 */
		/* 82216D50h case   18:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 82216D50h case   18:*/		return 0x82216D54;
		  /* 82216D54h */ case   19:  		/* rlwinm R29, R9, 0, 19, 31 */
		/* 82216D54h case   19:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R29,regs.R9);
		/* 82216D54h case   19:*/		return 0x82216D58;
		  /* 82216D58h */ case   20:  		/* addi R22, R10, -7312 */
		/* 82216D58h case   20:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R10,0xFFFFE370);
		/* 82216D58h case   20:*/		return 0x82216D5C;
		  /* 82216D5Ch */ case   21:  		/* lwzx R11, <#[R11 + R27]> */
		/* 82216D5Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 82216D5Ch case   21:*/		return 0x82216D60;
		  /* 82216D60h */ case   22:  		/* cmpwi CR6, R11, -1 */
		/* 82216D60h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82216D60h case   22:*/		return 0x82216D64;
		  /* 82216D64h */ case   23:  		/* bc 4, CR6_EQ, 32 */
		/* 82216D64h case   23:*/		if ( !regs.CR[6].eq ) { return 0x82216D84;  }
		/* 82216D64h case   23:*/		return 0x82216D68;
		  /* 82216D68h */ case   24:  		/* lis R11, -32252 */
		/* 82216D68h case   24:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82216D68h case   24:*/		return 0x82216D6C;
		  /* 82216D6Ch */ case   25:  		/* mr R6, R22 */
		/* 82216D6Ch case   25:*/		regs.R6 = regs.R22;
		/* 82216D6Ch case   25:*/		return 0x82216D70;
		  /* 82216D70h */ case   26:  		/* addi R5, R11, -5680 */
		/* 82216D70h case   26:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE9D0);
		/* 82216D70h case   26:*/		return 0x82216D74;
		  /* 82216D74h */ case   27:  		/* mr R4, R23 */
		/* 82216D74h case   27:*/		regs.R4 = regs.R23;
		/* 82216D74h case   27:*/		return 0x82216D78;
		  /* 82216D78h */ case   28:  		/* li R7, 12039 */
		/* 82216D78h case   28:*/		cpu::op::li<0>(regs,&regs.R7,0x2F07);
		/* 82216D78h case   28:*/		return 0x82216D7C;
		  /* 82216D7Ch */ case   29:  		/* li R3, 0 */
		/* 82216D7Ch case   29:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82216D7Ch case   29:*/		return 0x82216D80;
		  /* 82216D80h */ case   30:  		/* bl -782712 */
		/* 82216D80h case   30:*/		regs.LR = 0x82216D84; return 0x82157C08;
		/* 82216D80h case   30:*/		return 0x82216D84;
	}
	return 0x82216D84;
} // Block from 82216D08h-82216D84h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82216D84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216D84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216D84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216D84);
		  /* 82216D84h */ case    0:  		/* lhz R11, <#[R28 + 4]> */
		/* 82216D84h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 82216D84h case    0:*/		return 0x82216D88;
		  /* 82216D88h */ case    1:  		/* lis R10, -4370 */
		/* 82216D88h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFEEEE);
		/* 82216D88h case    1:*/		return 0x82216D8C;
		  /* 82216D8Ch */ case    2:  		/* rlwinm R11, R11, 6, 20, 25 */
		/* 82216D8Ch case    2:*/		cpu::op::rlwinm<0,6,20,25>(regs,&regs.R11,regs.R11);
		/* 82216D8Ch case    2:*/		return 0x82216D90;
		  /* 82216D90h */ case    3:  		/* ori R10, R10, 61166 */
		/* 82216D90h case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0xEEEE);
		/* 82216D90h case    3:*/		return 0x82216D94;
		  /* 82216D94h */ case    4:  		/* add R11, R11, R25 */
		/* 82216D94h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R25);
		/* 82216D94h case    4:*/		return 0x82216D98;
		  /* 82216D98h */ case    5:  		/* addi R11, R11, 4200 */
		/* 82216D98h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1068);
		/* 82216D98h case    5:*/		return 0x82216D9C;
		  /* 82216D9Ch */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82216D9Ch case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82216D9Ch case    6:*/		return 0x82216DA0;
		  /* 82216DA0h */ case    7:  		/* lwzx R11, <#[R11 + R27]> */
		/* 82216DA0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 82216DA0h case    7:*/		return 0x82216DA4;
		  /* 82216DA4h */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 82216DA4h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82216DA4h case    8:*/		return 0x82216DA8;
	}
	return 0x82216DA8;
} // Block from 82216D84h-82216DA8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82216DA8h
// Function '?DoSrcNegation@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PATIL_Src@1@PATIL_Src_Mod@1@PATIL_Rel_Addr@1@IPAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216DA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216DA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216DA8);
		  /* 82216DA8h */ case    0:  		/* bc 4, CR6_EQ, 384 */
		/* 82216DA8h case    0:*/		if ( !regs.CR[6].eq ) { return 0x82216F28;  }
		/* 82216DA8h case    0:*/		return 0x82216DAC;
		  /* 82216DACh */ case    1:  		/* mr R3, R30 */
		/* 82216DACh case    1:*/		regs.R3 = regs.R30;
		/* 82216DACh case    1:*/		return 0x82216DB0;
		  /* 82216DB0h */ case    2:  		/* bl -31624 */
		/* 82216DB0h case    2:*/		regs.LR = 0x82216DB4; return 0x8220F228;
		/* 82216DB0h case    2:*/		return 0x82216DB4;
		  /* 82216DB4h */ case    3:  		/* lhz R11, <#[R28 + 4]> */
		/* 82216DB4h case    3:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 82216DB4h case    3:*/		return 0x82216DB8;
		  /* 82216DB8h */ case    4:  		/* li R8, 65 */
		/* 82216DB8h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x41);
		/* 82216DB8h case    4:*/		return 0x82216DBC;
		  /* 82216DBCh */ case    5:  		/* rlwinm R11, R11, 6, 20, 25 */
		/* 82216DBCh case    5:*/		cpu::op::rlwinm<0,6,20,25>(regs,&regs.R11,regs.R11);
		/* 82216DBCh case    5:*/		return 0x82216DC0;
		  /* 82216DC0h */ case    6:  		/* rlwinm R9, R29, 0, 30, 31 */
		/* 82216DC0h case    6:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R29);
		/* 82216DC0h case    6:*/		return 0x82216DC4;
		  /* 82216DC4h */ case    7:  		/* add R11, R11, R25 */
		/* 82216DC4h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R25);
		/* 82216DC4h case    7:*/		return 0x82216DC8;
		  /* 82216DC8h */ case    8:  		/* cmplwi CR6, R9, 1 */
		/* 82216DC8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000001);
		/* 82216DC8h case    8:*/		return 0x82216DCC;
		  /* 82216DCCh */ case    9:  		/* addi R10, R11, 4200 */
		/* 82216DCCh case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1068);
		/* 82216DCCh case    9:*/		return 0x82216DD0;
		  /* 82216DD0h */ case   10:  		/* addi R11, R31, 4 */
		/* 82216DD0h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 82216DD0h case   10:*/		return 0x82216DD4;
		  /* 82216DD4h */ case   11:  		/* rlwinm R6, R10, 2, 0, 29 */
		/* 82216DD4h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R10);
		/* 82216DD4h case   11:*/		return 0x82216DD8;
		  /* 82216DD8h */ case   12:  		/* li R10, 1 */
		/* 82216DD8h case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82216DD8h case   12:*/		return 0x82216DDC;
		  /* 82216DDCh */ case   13:  		/* addi R11, R11, 4 */
		/* 82216DDCh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82216DDCh case   13:*/		return 0x82216DE0;
		  /* 82216DE0h */ case   14:  		/* stwx R3, <#[R6 + R27]> */
		/* 82216DE0h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R6 + regs.R27 + 0x00000000) );
		/* 82216DE0h case   14:*/		return 0x82216DE4;
		  /* 82216DE4h */ case   15:  		/* sth R8, <#[R31 + 2]> */
		/* 82216DE4h case   15:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R31 + 0x00000002) );
		/* 82216DE4h case   15:*/		return 0x82216DE8;
		  /* 82216DE8h */ case   16:  		/* lwz R6, <#[R31]> */
		/* 82216DE8h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000000) );
		/* 82216DE8h case   16:*/		return 0x82216DEC;
		  /* 82216DECh */ case   17:  		/* rlwinm R6, R6, 0, 16, 2 */
		/* 82216DECh case   17:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R6,regs.R6);
		/* 82216DECh case   17:*/		return 0x82216DF0;
		  /* 82216DF0h */ case   18:  		/* stw R6, <#[R31]> */
		/* 82216DF0h case   18:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R31 + 0x00000000) );
		/* 82216DF0h case   18:*/		return 0x82216DF4;
		  /* 82216DF4h */ case   19:  		/* sth R3, <#[R31 + 6]> */
		/* 82216DF4h case   19:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R31 + 0x00000006) );
		/* 82216DF4h case   19:*/		return 0x82216DF8;
		  /* 82216DF8h */ case   20:  		/* lwz R7, <#[R31 + 4]> */
		/* 82216DF8h case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82216DF8h case   20:*/		return 0x82216DFC;
		  /* 82216DFCh */ case   21:  		/* rlwimi R7, R10, 18, 8, 15 */
		/* 82216DFCh case   21:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R7,regs.R10);
		/* 82216DFCh case   21:*/		return 0x82216E00;
		  /* 82216E00h */ case   22:  		/* stw R7, <#[R31 + 4]> */
		/* 82216E00h case   22:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82216E00h case   22:*/		return 0x82216E04;
		  /* 82216E04h */ case   23:  		/* sth R26, <#[R11 + 2]> */
		/* 82216E04h case   23:*/		cpu::mem::store16( regs, regs.R26, (uint32)(regs.R11 + 0x00000002) );
		/* 82216E04h case   23:*/		return 0x82216E08;
		  /* 82216E08h */ case   24:  		/* lwz R7, <#[R11]> */
		/* 82216E08h case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82216E08h case   24:*/		return 0x82216E0C;
		  /* 82216E0Ch */ case   25:  		/* rlwimi R7, R8, 16, 8, 15 */
		/* 82216E0Ch case   25:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R7,regs.R8);
		/* 82216E0Ch case   25:*/		return 0x82216E10;
		  /* 82216E10h */ case   26:  		/* stw R7, <#[R11]> */
		/* 82216E10h case   26:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82216E10h case   26:*/		return 0x82216E14;
		  /* 82216E14h */ case   27:  		/* stb R10, <#[R11]> */
		/* 82216E14h case   27:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82216E14h case   27:*/		return 0x82216E18;
		  /* 82216E18h */ case   28:  		/* addi R11, R11, 4 */
		/* 82216E18h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82216E18h case   28:*/		return 0x82216E1C;
		  /* 82216E1Ch */ case   29:  		/* lwz R7, <#[R11]> */
		/* 82216E1Ch case   29:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82216E1Ch case   29:*/		return 0x82216E20;
		  /* 82216E20h */ case   30:  		/* bc 4, CR6_EQ, 12 */
		/* 82216E20h case   30:*/		if ( !regs.CR[6].eq ) { return 0x82216E2C;  }
		/* 82216E20h case   30:*/		return 0x82216E24;
		  /* 82216E24h */ case   31:  		/* rlwinm R7, R7, 0, 0, 28 */
		/* 82216E24h case   31:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R7,regs.R7);
		/* 82216E24h case   31:*/		return 0x82216E28;
		  /* 82216E28h */ case   32:  		/* b 8 */
		/* 82216E28h case   32:*/		return 0x82216E30;
		/* 82216E28h case   32:*/		return 0x82216E2C;
	}
	return 0x82216E2C;
} // Block from 82216DA8h-82216E2Ch (33 instructions)

//////////////////////////////////////////////////////
// Block at 82216E2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216E2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216E2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216E2C);
		  /* 82216E2Ch */ case    0:  		/* rlwimi R7, R10, 0, 29, 31 */
		/* 82216E2Ch case    0:*/		cpu::op::rlwimi<0,0,29,31>(regs,&regs.R7,regs.R10);
		/* 82216E2Ch case    0:*/		return 0x82216E30;
	}
	return 0x82216E30;
} // Block from 82216E2Ch-82216E30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82216E30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216E30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216E30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216E30);
		  /* 82216E30h */ case    0:  		/* rlwinm R5, R29, 30, 30, 31 */
		/* 82216E30h case    0:*/		cpu::op::rlwinm<0,30,30,31>(regs,&regs.R5,regs.R29);
		/* 82216E30h case    0:*/		return 0x82216E34;
		  /* 82216E34h */ case    1:  		/* stw R7, <#[R11]> */
		/* 82216E34h case    1:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82216E34h case    1:*/		return 0x82216E38;
		  /* 82216E38h */ case    2:  		/* rlwinm R7, R7, 0, 0, 31 */
		/* 82216E38h case    2:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R7);
		/* 82216E38h case    2:*/		return 0x82216E3C;
		  /* 82216E3Ch */ case    3:  		/* cmplwi CR6, R5, 1 */
		/* 82216E3Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000001);
		/* 82216E3Ch case    3:*/		return 0x82216E40;
		  /* 82216E40h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 82216E40h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82216E4C;  }
		/* 82216E40h case    4:*/		return 0x82216E44;
		  /* 82216E44h */ case    5:  		/* rlwinm R7, R7, 0, 28, 24 */
		/* 82216E44h case    5:*/		cpu::op::rlwinm<0,0,28,24>(regs,&regs.R7,regs.R7);
		/* 82216E44h case    5:*/		return 0x82216E48;
		  /* 82216E48h */ case    6:  		/* b 8 */
		/* 82216E48h case    6:*/		return 0x82216E50;
		/* 82216E48h case    6:*/		return 0x82216E4C;
	}
	return 0x82216E4C;
} // Block from 82216E30h-82216E4Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82216E4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216E4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216E4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216E4C);
		  /* 82216E4Ch */ case    0:  		/* rlwimi R7, R10, 4, 25, 27 */
		/* 82216E4Ch case    0:*/		cpu::op::rlwimi<0,4,25,27>(regs,&regs.R7,regs.R10);
		/* 82216E4Ch case    0:*/		return 0x82216E50;
	}
	return 0x82216E50;
} // Block from 82216E4Ch-82216E50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82216E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216E50);
		  /* 82216E50h */ case    0:  		/* rlwinm R6, R29, 28, 30, 31 */
		/* 82216E50h case    0:*/		cpu::op::rlwinm<0,28,30,31>(regs,&regs.R6,regs.R29);
		/* 82216E50h case    0:*/		return 0x82216E54;
		  /* 82216E54h */ case    1:  		/* stw R7, <#[R11]> */
		/* 82216E54h case    1:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82216E54h case    1:*/		return 0x82216E58;
		  /* 82216E58h */ case    2:  		/* rlwinm R7, R7, 0, 0, 31 */
		/* 82216E58h case    2:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R7);
		/* 82216E58h case    2:*/		return 0x82216E5C;
		  /* 82216E5Ch */ case    3:  		/* cmplwi CR6, R6, 1 */
		/* 82216E5Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000001);
		/* 82216E5Ch case    3:*/		return 0x82216E60;
		  /* 82216E60h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 82216E60h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82216E6C;  }
		/* 82216E60h case    4:*/		return 0x82216E64;
		  /* 82216E64h */ case    5:  		/* rlwinm R7, R7, 0, 24, 20 */
		/* 82216E64h case    5:*/		cpu::op::rlwinm<0,0,24,20>(regs,&regs.R7,regs.R7);
		/* 82216E64h case    5:*/		return 0x82216E68;
		  /* 82216E68h */ case    6:  		/* b 8 */
		/* 82216E68h case    6:*/		return 0x82216E70;
		/* 82216E68h case    6:*/		return 0x82216E6C;
	}
	return 0x82216E6C;
} // Block from 82216E50h-82216E6Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82216E6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216E6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216E6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216E6C);
		  /* 82216E6Ch */ case    0:  		/* rlwimi R7, R10, 8, 21, 23 */
		/* 82216E6Ch case    0:*/		cpu::op::rlwimi<0,8,21,23>(regs,&regs.R7,regs.R10);
		/* 82216E6Ch case    0:*/		return 0x82216E70;
	}
	return 0x82216E70;
} // Block from 82216E6Ch-82216E70h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82216E70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216E70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216E70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216E70);
		  /* 82216E70h */ case    0:  		/* stw R7, <#[R11]> */
		/* 82216E70h case    0:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82216E70h case    0:*/		return 0x82216E74;
		  /* 82216E74h */ case    1:  		/* rlwinm R7, R29, 26, 30, 31 */
		/* 82216E74h case    1:*/		cpu::op::rlwinm<0,26,30,31>(regs,&regs.R7,regs.R29);
		/* 82216E74h case    1:*/		return 0x82216E78;
		  /* 82216E78h */ case    2:  		/* lwz R4, <#[R11]> */
		/* 82216E78h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82216E78h case    2:*/		return 0x82216E7C;
		  /* 82216E7Ch */ case    3:  		/* cmplwi CR6, R7, 1 */
		/* 82216E7Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000001);
		/* 82216E7Ch case    3:*/		return 0x82216E80;
		  /* 82216E80h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 82216E80h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82216E8C;  }
		/* 82216E80h case    4:*/		return 0x82216E84;
		  /* 82216E84h */ case    5:  		/* rlwinm R4, R4, 0, 20, 16 */
		/* 82216E84h case    5:*/		cpu::op::rlwinm<0,0,20,16>(regs,&regs.R4,regs.R4);
		/* 82216E84h case    5:*/		return 0x82216E88;
		  /* 82216E88h */ case    6:  		/* b 8 */
		/* 82216E88h case    6:*/		return 0x82216E90;
		/* 82216E88h case    6:*/		return 0x82216E8C;
	}
	return 0x82216E8C;
} // Block from 82216E70h-82216E8Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82216E8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216E8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216E8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216E8C);
		  /* 82216E8Ch */ case    0:  		/* rlwimi R4, R10, 12, 17, 19 */
		/* 82216E8Ch case    0:*/		cpu::op::rlwimi<0,12,17,19>(regs,&regs.R4,regs.R10);
		/* 82216E8Ch case    0:*/		return 0x82216E90;
	}
	return 0x82216E90;
} // Block from 82216E8Ch-82216E90h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82216E90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216E90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216E90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216E90);
		  /* 82216E90h */ case    0:  		/* stw R4, <#[R11]> */
		/* 82216E90h case    0:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82216E90h case    0:*/		return 0x82216E94;
		  /* 82216E94h */ case    1:  		/* addi R11, R11, 4 */
		/* 82216E94h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82216E94h case    1:*/		return 0x82216E98;
		  /* 82216E98h */ case    2:  		/* cmplwi CR6, R9, 1 */
		/* 82216E98h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000001);
		/* 82216E98h case    2:*/		return 0x82216E9C;
		  /* 82216E9Ch */ case    3:  		/* sth R26, <#[R11 + 2]> */
		/* 82216E9Ch case    3:*/		cpu::mem::store16( regs, regs.R26, (uint32)(regs.R11 + 0x00000002) );
		/* 82216E9Ch case    3:*/		return 0x82216EA0;
		  /* 82216EA0h */ case    4:  		/* lwz R9, <#[R11]> */
		/* 82216EA0h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216EA0h case    4:*/		return 0x82216EA4;
		  /* 82216EA4h */ case    5:  		/* rlwimi R9, R8, 16, 8, 15 */
		/* 82216EA4h case    5:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R9,regs.R8);
		/* 82216EA4h case    5:*/		return 0x82216EA8;
		  /* 82216EA8h */ case    6:  		/* stw R9, <#[R11]> */
		/* 82216EA8h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216EA8h case    6:*/		return 0x82216EAC;
		  /* 82216EACh */ case    7:  		/* stb R10, <#[R11]> */
		/* 82216EACh case    7:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82216EACh case    7:*/		return 0x82216EB0;
		  /* 82216EB0h */ case    8:  		/* addi R11, R11, 4 */
		/* 82216EB0h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82216EB0h case    8:*/		return 0x82216EB4;
		  /* 82216EB4h */ case    9:  		/* lwz R9, <#[R11]> */
		/* 82216EB4h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216EB4h case    9:*/		return 0x82216EB8;
		  /* 82216EB8h */ case   10:  		/* bc 4, CR6_EQ, 12 */
		/* 82216EB8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82216EC4;  }
		/* 82216EB8h case   10:*/		return 0x82216EBC;
		  /* 82216EBCh */ case   11:  		/* rlwinm R9, R9, 0, 0, 28 */
		/* 82216EBCh case   11:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R9,regs.R9);
		/* 82216EBCh case   11:*/		return 0x82216EC0;
		  /* 82216EC0h */ case   12:  		/* b 8 */
		/* 82216EC0h case   12:*/		return 0x82216EC8;
		/* 82216EC0h case   12:*/		return 0x82216EC4;
	}
	return 0x82216EC4;
} // Block from 82216E90h-82216EC4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82216EC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216EC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216EC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216EC4);
		  /* 82216EC4h */ case    0:  		/* rlwimi R9, R10, 0, 29, 31 */
		/* 82216EC4h case    0:*/		cpu::op::rlwimi<0,0,29,31>(regs,&regs.R9,regs.R10);
		/* 82216EC4h case    0:*/		return 0x82216EC8;
	}
	return 0x82216EC8;
} // Block from 82216EC4h-82216EC8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82216EC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216EC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216EC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216EC8);
		  /* 82216EC8h */ case    0:  		/* stw R9, <#[R11]> */
		/* 82216EC8h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216EC8h case    0:*/		return 0x82216ECC;
		  /* 82216ECCh */ case    1:  		/* cmplwi CR6, R5, 1 */
		/* 82216ECCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000001);
		/* 82216ECCh case    1:*/		return 0x82216ED0;
		  /* 82216ED0h */ case    2:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82216ED0h case    2:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82216ED0h case    2:*/		return 0x82216ED4;
		  /* 82216ED4h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 82216ED4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82216EE0;  }
		/* 82216ED4h case    3:*/		return 0x82216ED8;
		  /* 82216ED8h */ case    4:  		/* rlwinm R9, R9, 0, 28, 24 */
		/* 82216ED8h case    4:*/		cpu::op::rlwinm<0,0,28,24>(regs,&regs.R9,regs.R9);
		/* 82216ED8h case    4:*/		return 0x82216EDC;
		  /* 82216EDCh */ case    5:  		/* b 8 */
		/* 82216EDCh case    5:*/		return 0x82216EE4;
		/* 82216EDCh case    5:*/		return 0x82216EE0;
	}
	return 0x82216EE0;
} // Block from 82216EC8h-82216EE0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82216EE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216EE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216EE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216EE0);
		  /* 82216EE0h */ case    0:  		/* rlwimi R9, R10, 4, 25, 27 */
		/* 82216EE0h case    0:*/		cpu::op::rlwimi<0,4,25,27>(regs,&regs.R9,regs.R10);
		/* 82216EE0h case    0:*/		return 0x82216EE4;
	}
	return 0x82216EE4;
} // Block from 82216EE0h-82216EE4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82216EE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216EE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216EE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216EE4);
		  /* 82216EE4h */ case    0:  		/* stw R9, <#[R11]> */
		/* 82216EE4h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216EE4h case    0:*/		return 0x82216EE8;
		  /* 82216EE8h */ case    1:  		/* cmplwi CR6, R6, 1 */
		/* 82216EE8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000001);
		/* 82216EE8h case    1:*/		return 0x82216EEC;
		  /* 82216EECh */ case    2:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82216EECh case    2:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82216EECh case    2:*/		return 0x82216EF0;
		  /* 82216EF0h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 82216EF0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82216EFC;  }
		/* 82216EF0h case    3:*/		return 0x82216EF4;
		  /* 82216EF4h */ case    4:  		/* rlwinm R9, R9, 0, 24, 20 */
		/* 82216EF4h case    4:*/		cpu::op::rlwinm<0,0,24,20>(regs,&regs.R9,regs.R9);
		/* 82216EF4h case    4:*/		return 0x82216EF8;
		  /* 82216EF8h */ case    5:  		/* b 8 */
		/* 82216EF8h case    5:*/		return 0x82216F00;
		/* 82216EF8h case    5:*/		return 0x82216EFC;
	}
	return 0x82216EFC;
} // Block from 82216EE4h-82216EFCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 82216EFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216EFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216EFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216EFC);
		  /* 82216EFCh */ case    0:  		/* rlwimi R9, R10, 8, 21, 23 */
		/* 82216EFCh case    0:*/		cpu::op::rlwimi<0,8,21,23>(regs,&regs.R9,regs.R10);
		/* 82216EFCh case    0:*/		return 0x82216F00;
	}
	return 0x82216F00;
} // Block from 82216EFCh-82216F00h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82216F00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216F00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216F00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216F00);
		  /* 82216F00h */ case    0:  		/* stw R9, <#[R11]> */
		/* 82216F00h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216F00h case    0:*/		return 0x82216F04;
		  /* 82216F04h */ case    1:  		/* cmplwi CR6, R7, 1 */
		/* 82216F04h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000001);
		/* 82216F04h case    1:*/		return 0x82216F08;
		  /* 82216F08h */ case    2:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 82216F08h case    2:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 82216F08h case    2:*/		return 0x82216F0C;
		  /* 82216F0Ch */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 82216F0Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82216F18;  }
		/* 82216F0Ch case    3:*/		return 0x82216F10;
		  /* 82216F10h */ case    4:  		/* rlwinm R9, R9, 0, 20, 16 */
		/* 82216F10h case    4:*/		cpu::op::rlwinm<0,0,20,16>(regs,&regs.R9,regs.R9);
		/* 82216F10h case    4:*/		return 0x82216F14;
		  /* 82216F14h */ case    5:  		/* b 8 */
		/* 82216F14h case    5:*/		return 0x82216F1C;
		/* 82216F14h case    5:*/		return 0x82216F18;
	}
	return 0x82216F18;
} // Block from 82216F00h-82216F18h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82216F18h
// Function '?DoShiftScale@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PATIL_Dst@1@PATIL_Dst_Mod@1@PATIL_Rel_Addr@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216F18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216F18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216F18);
		  /* 82216F18h */ case    0:  		/* rlwimi R9, R10, 12, 17, 19 */
		/* 82216F18h case    0:*/		cpu::op::rlwimi<0,12,17,19>(regs,&regs.R9,regs.R10);
		/* 82216F18h case    0:*/		return 0x82216F1C;
	}
	return 0x82216F1C;
} // Block from 82216F18h-82216F1Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82216F1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216F1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216F1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216F1C);
		  /* 82216F1Ch */ case    0:  		/* stw R9, <#[R11]> */
		/* 82216F1Ch case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82216F1Ch case    0:*/		return 0x82216F20;
		  /* 82216F20h */ case    1:  		/* addi R31, R11, 4 */
		/* 82216F20h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 82216F20h case    1:*/		return 0x82216F24;
		  /* 82216F24h */ case    2:  		/* mr R26, R10 */
		/* 82216F24h case    2:*/		regs.R26 = regs.R10;
		/* 82216F24h case    2:*/		return 0x82216F28;
	}
	return 0x82216F28;
} // Block from 82216F1Ch-82216F28h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82216F28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216F28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216F28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216F28);
		  /* 82216F28h */ case    0:  		/* lhz R11, <#[R28 + 4]> */
		/* 82216F28h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 82216F28h case    0:*/		return 0x82216F2C;
		  /* 82216F2Ch */ case    1:  		/* rlwinm R11, R11, 6, 20, 25 */
		/* 82216F2Ch case    1:*/		cpu::op::rlwinm<0,6,20,25>(regs,&regs.R11,regs.R11);
		/* 82216F2Ch case    1:*/		return 0x82216F30;
		  /* 82216F30h */ case    2:  		/* add R11, R11, R25 */
		/* 82216F30h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R25);
		/* 82216F30h case    2:*/		return 0x82216F34;
		  /* 82216F34h */ case    3:  		/* addi R11, R11, 4200 */
		/* 82216F34h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1068);
		/* 82216F34h case    3:*/		return 0x82216F38;
		  /* 82216F38h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82216F38h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82216F38h case    4:*/		return 0x82216F3C;
		  /* 82216F3Ch */ case    5:  		/* lwzx R30, <#[R11 + R27]> */
		/* 82216F3Ch case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 82216F3Ch case    5:*/		return 0x82216F40;
		  /* 82216F40h */ case    6:  		/* cmplwi CR6, R30, 20 */
		/* 82216F40h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000014);
		/* 82216F40h case    6:*/		return 0x82216F44;
		  /* 82216F44h */ case    7:  		/* bc 12, CR6_LT, 32 */
		/* 82216F44h case    7:*/		if ( regs.CR[6].lt ) { return 0x82216F64;  }
		/* 82216F44h case    7:*/		return 0x82216F48;
		  /* 82216F48h */ case    8:  		/* lis R11, -32252 */
		/* 82216F48h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82216F48h case    8:*/		return 0x82216F4C;
		  /* 82216F4Ch */ case    9:  		/* mr R6, R22 */
		/* 82216F4Ch case    9:*/		regs.R6 = regs.R22;
		/* 82216F4Ch case    9:*/		return 0x82216F50;
		  /* 82216F50h */ case   10:  		/* addi R5, R11, -5724 */
		/* 82216F50h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFE9A4);
		/* 82216F50h case   10:*/		return 0x82216F54;
		  /* 82216F54h */ case   11:  		/* mr R4, R23 */
		/* 82216F54h case   11:*/		regs.R4 = regs.R23;
		/* 82216F54h case   11:*/		return 0x82216F58;
		  /* 82216F58h */ case   12:  		/* li R7, 12179 */
		/* 82216F58h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x2F93);
		/* 82216F58h case   12:*/		return 0x82216F5C;
		  /* 82216F5Ch */ case   13:  		/* li R3, 0 */
		/* 82216F5Ch case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82216F5Ch case   13:*/		return 0x82216F60;
		  /* 82216F60h */ case   14:  		/* bl -783192 */
		/* 82216F60h case   14:*/		regs.LR = 0x82216F64; return 0x82157C08;
		/* 82216F60h case   14:*/		return 0x82216F64;
	}
	return 0x82216F64;
} // Block from 82216F28h-82216F64h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82216F64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216F64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216F64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216F64);
		  /* 82216F64h */ case    0:  		/* mulli R11, R30, 28 */
		/* 82216F64h case    0:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R30,0x1C);
		/* 82216F64h case    0:*/		return 0x82216F68;
		  /* 82216F68h */ case    1:  		/* add R11, R11, R27 */
		/* 82216F68h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 82216F68h case    1:*/		return 0x82216F6C;
		  /* 82216F6Ch */ case    2:  		/* rlwinm R10, R29, 23, 31, 31 */
		/* 82216F6Ch case    2:*/		cpu::op::rlwinm<0,23,31,31>(regs,&regs.R10,regs.R29);
		/* 82216F6Ch case    2:*/		return 0x82216F70;
		  /* 82216F70h */ case    3:  		/* rlwinm R9, R29, 0, 30, 31 */
		/* 82216F70h case    3:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R29);
		/* 82216F70h case    3:*/		return 0x82216F74;
		  /* 82216F74h */ case    4:  		/* addi R8, R30, 444 */
		/* 82216F74h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R30,0x1BC);
		/* 82216F74h case    4:*/		return 0x82216F78;
		  /* 82216F78h */ case    5:  		/* rlwinm R7, R29, 24, 31, 31 */
		/* 82216F78h case    5:*/		cpu::op::rlwinm<0,24,31,31>(regs,&regs.R7,regs.R29);
		/* 82216F78h case    5:*/		return 0x82216F7C;
		  /* 82216F7Ch */ case    6:  		/* stw R10, <#[R11 + 12456]> */
		/* 82216F7Ch case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x000030A8) );
		/* 82216F7Ch case    6:*/		return 0x82216F80;
		  /* 82216F80h */ case    7:  		/* rlwinm R10, R29, 30, 30, 31 */
		/* 82216F80h case    7:*/		cpu::op::rlwinm<0,30,30,31>(regs,&regs.R10,regs.R29);
		/* 82216F80h case    7:*/		return 0x82216F84;
		  /* 82216F84h */ case    8:  		/* stw R9, <#[R11 + 12436]> */
		/* 82216F84h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00003094) );
		/* 82216F84h case    8:*/		return 0x82216F88;
		  /* 82216F88h */ case    9:  		/* rlwinm R9, R29, 28, 30, 31 */
		/* 82216F88h case    9:*/		cpu::op::rlwinm<0,28,30,31>(regs,&regs.R9,regs.R29);
		/* 82216F88h case    9:*/		return 0x82216F8C;
		  /* 82216F8Ch */ case   10:  		/* stw R10, <#[R11 + 12440]> */
		/* 82216F8Ch case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00003098) );
		/* 82216F8Ch case   10:*/		return 0x82216F90;
		  /* 82216F90h */ case   11:  		/* rlwinm R6, R29, 26, 30, 31 */
		/* 82216F90h case   11:*/		cpu::op::rlwinm<0,26,30,31>(regs,&regs.R6,regs.R29);
		/* 82216F90h case   11:*/		return 0x82216F94;
		  /* 82216F94h */ case   12:  		/* stw R9, <#[R11 + 12444]> */
		/* 82216F94h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000309C) );
		/* 82216F94h case   12:*/		return 0x82216F98;
		  /* 82216F98h */ case   13:  		/* mulli R8, R8, 28 */
		/* 82216F98h case   13:*/		cpu::op::mulli<0>(regs,&regs.R8,regs.R8,0x1C);
		/* 82216F98h case   13:*/		return 0x82216F9C;
		  /* 82216F9Ch */ case   14:  		/* stw R7, <#[R11 + 12452]> */
		/* 82216F9Ch case   14:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x000030A4) );
		/* 82216F9Ch case   14:*/		return 0x82216FA0;
		  /* 82216FA0h */ case   15:  		/* stw R6, <#[R11 + 12448]> */
		/* 82216FA0h case   15:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x000030A0) );
		/* 82216FA0h case   15:*/		return 0x82216FA4;
		  /* 82216FA4h */ case   16:  		/* mr R3, R31 */
		/* 82216FA4h case   16:*/		regs.R3 = regs.R31;
		/* 82216FA4h case   16:*/		return 0x82216FA8;
		  /* 82216FA8h */ case   17:  		/* lhz R11, <#[R28 + 4]> */
		/* 82216FA8h case   17:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 82216FA8h case   17:*/		return 0x82216FAC;
		  /* 82216FACh */ case   18:  		/* rlwinm R11, R11, 0, 26, 31 */
		/* 82216FACh case   18:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R11,regs.R11);
		/* 82216FACh case   18:*/		return 0x82216FB0;
		  /* 82216FB0h */ case   19:  		/* stwx R11, <#[R8 + R27]> */
		/* 82216FB0h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + regs.R27 + 0x00000000) );
		/* 82216FB0h case   19:*/		return 0x82216FB4;
		  /* 82216FB4h */ case   20:  		/* stw R26, <#[R24]> */
		/* 82216FB4h case   20:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R24 + 0x00000000) );
		/* 82216FB4h case   20:*/		return 0x82216FB8;
		  /* 82216FB8h */ case   21:  		/* addi R1, R1, 176 */
		/* 82216FB8h case   21:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82216FB8h case   21:*/		return 0x82216FBC;
		  /* 82216FBCh */ case   22:  		/* b -1596716 */
		/* 82216FBCh case   22:*/		return 0x82091290;
		/* 82216FBCh case   22:*/		return 0x82216FC0;
	}
	return 0x82216FC0;
} // Block from 82216F64h-82216FC0h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82216FC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82216FC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82216FC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82216FC0);
		  /* 82216FC0h */ case    0:  		/* mfspr R12, LR */
		/* 82216FC0h case    0:*/		regs.R12 = regs.LR;
		/* 82216FC0h case    0:*/		return 0x82216FC4;
		  /* 82216FC4h */ case    1:  		/* bl -1596836 */
		/* 82216FC4h case    1:*/		regs.LR = 0x82216FC8; return 0x82091220;
		/* 82216FC4h case    1:*/		return 0x82216FC8;
		  /* 82216FC8h */ case    2:  		/* stwu R1, <#[R1 - 704]> */
		/* 82216FC8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFD40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFD40);
		/* 82216FC8h case    2:*/		return 0x82216FCC;
		  /* 82216FCCh */ case    3:  		/* lwz R25, <#[R3 + 28]> */
		/* 82216FCCh case    3:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R3 + 0x0000001C) );
		/* 82216FCCh case    3:*/		return 0x82216FD0;
		  /* 82216FD0h */ case    4:  		/* lis R11, -32253 */
		/* 82216FD0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82216FD0h case    4:*/		return 0x82216FD4;
		  /* 82216FD4h */ case    5:  		/* lis R10, -32252 */
		/* 82216FD4h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82216FD4h case    5:*/		return 0x82216FD8;
		  /* 82216FD8h */ case    6:  		/* stw R3, <#[R1 + 724]> */
		/* 82216FD8h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000002D4) );
		/* 82216FD8h case    6:*/		return 0x82216FDC;
		  /* 82216FDCh */ case    7:  		/* addi R4, R11, 27460 */
		/* 82216FDCh case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6B44);
		/* 82216FDCh case    7:*/		return 0x82216FE0;
		  /* 82216FE0h */ case    8:  		/* li R31, 0 */
		/* 82216FE0h case    8:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82216FE0h case    8:*/		return 0x82216FE4;
		  /* 82216FE4h */ case    9:  		/* li R9, -1 */
		/* 82216FE4h case    9:*/		cpu::op::li<0>(regs,&regs.R9,0xFFFFFFFF);
		/* 82216FE4h case    9:*/		return 0x82216FE8;
		  /* 82216FE8h */ case   10:  		/* stw R4, <#[R1 + 88]> */
		/* 82216FE8h case   10:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 82216FE8h case   10:*/		return 0x82216FEC;
		  /* 82216FECh */ case   11:  		/* lwz R11, <#[R25 + 12424]> */
		/* 82216FECh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00003088) );
		/* 82216FECh case   11:*/		return 0x82216FF0;
		  /* 82216FF0h */ case   12:  		/* addi R6, R10, -7312 */
		/* 82216FF0h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFE370);
		/* 82216FF0h case   12:*/		return 0x82216FF4;
		  /* 82216FF4h */ case   13:  		/* mr R29, R3 */
		/* 82216FF4h case   13:*/		regs.R29 = regs.R3;
		/* 82216FF4h case   13:*/		return 0x82216FF8;
		  /* 82216FF8h */ case   14:  		/* stw R31, <#[R1 + 80]> */
		/* 82216FF8h case   14:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 82216FF8h case   14:*/		return 0x82216FFC;
		  /* 82216FFCh */ case   15:  		/* stw R31, <#[R1 + 92]> */
		/* 82216FFCh case   15:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 82216FFCh case   15:*/		return 0x82217000;
		  /* 82217000h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 82217000h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82217000h case   16:*/		return 0x82217004;
		  /* 82217004h */ case   17:  		/* stw R9, <#[R1 + 100]> */
		/* 82217004h case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000064) );
		/* 82217004h case   17:*/		return 0x82217008;
		  /* 82217008h */ case   18:  		/* stw R6, <#[R1 + 84]> */
		/* 82217008h case   18:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 82217008h case   18:*/		return 0x8221700C;
		  /* 8221700Ch */ case   19:  		/* bc 4, CR6_EQ, 24 */
		/* 8221700Ch case   19:*/		if ( !regs.CR[6].eq ) { return 0x82217024;  }
		/* 8221700Ch case   19:*/		return 0x82217010;
		  /* 82217010h */ case   20:  		/* lis R11, -32252 */
		/* 82217010h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82217010h case   20:*/		return 0x82217014;
		  /* 82217014h */ case   21:  		/* li R7, 12247 */
		/* 82217014h case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x2FD7);
		/* 82217014h case   21:*/		return 0x82217018;
		  /* 82217018h */ case   22:  		/* addi R5, R11, -5592 */
		/* 82217018h case   22:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFEA28);
		/* 82217018h case   22:*/		return 0x8221701C;
		  /* 8221701Ch */ case   23:  		/* li R3, 0 */
		/* 8221701Ch case   23:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221701Ch case   23:*/		return 0x82217020;
		  /* 82217020h */ case   24:  		/* bl -783384 */
		/* 82217020h case   24:*/		regs.LR = 0x82217024; return 0x82157C08;
		/* 82217020h case   24:*/		return 0x82217024;
	}
	return 0x82217024;
} // Block from 82216FC0h-82217024h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82217024h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217024( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217024) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217024);
		  /* 82217024h */ case    0:  		/* lwz R10, <#[R25 + 12028]> */
		/* 82217024h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00002EFC) );
		/* 82217024h case    0:*/		return 0x82217028;
		  /* 82217028h */ case    1:  		/* li R7, 6 */
		/* 82217028h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x6);
		/* 82217028h case    1:*/		return 0x8221702C;
		  /* 8221702Ch */ case    2:  		/* lwz R11, <#[R25 + 10820]> */
		/* 8221702Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00002A44) );
		/* 8221702Ch case    2:*/		return 0x82217030;
		  /* 82217030h */ case    3:  		/* lwz R9, <#[R25 + 13164]> */
		/* 82217030h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x0000336C) );
		/* 82217030h case    3:*/		return 0x82217034;
		  /* 82217034h */ case    4:  		/* add R8, R10, R11 */
		/* 82217034h case    4:*/		cpu::op::add<0>(regs,&regs.R8,regs.R10,regs.R11);
		/* 82217034h case    4:*/		return 0x82217038;
		  /* 82217038h */ case    5:  		/* lwz R10, <#[R25 + 12]> */
		/* 82217038h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x0000000C) );
		/* 82217038h case    5:*/		return 0x8221703C;
		  /* 8221703Ch */ case    6:  		/* lwz R23, <#[R25 + 12424]> */
		/* 8221703Ch case    6:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R25 + 0x00003088) );
		/* 8221703Ch case    6:*/		return 0x82217040;
		  /* 82217040h */ case    7:  		/* add R9, R8, R9 */
		/* 82217040h case    7:*/		cpu::op::add<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82217040h case    7:*/		return 0x82217044;
		  /* 82217044h */ case    8:  		/* addi R6, R10, 5 */
		/* 82217044h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x5);
		/* 82217044h case    8:*/		return 0x82217048;
		  /* 82217048h */ case    9:  		/* rlwinm R8, R9, 1, 0, 30 */
		/* 82217048h case    9:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R8,regs.R9);
		/* 82217048h case    9:*/		return 0x8221704C;
		  /* 8221704Ch */ case   10:  		/* divwu R9, R6, R7 */
		/* 8221704Ch case   10:*/		cpu::op::divwu<0>(regs,&regs.R9,regs.R6,regs.R7);
		/* 8221704Ch case   10:*/		return 0x82217050;
		  /* 82217050h */ case   11:  		/* add R9, R8, R9 */
		/* 82217050h case   11:*/		cpu::op::add<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82217050h case   11:*/		return 0x82217054;
		  /* 82217054h */ case   12:  		/* rlwinm. R8, R9, 0, 31, 31 */
		/* 82217054h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R9);
		/* 82217054h case   12:*/		return 0x82217058;
		  /* 82217058h */ case   13:  		/* stw R9, <#[R1 + 108]> */
		/* 82217058h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000006C) );
		/* 82217058h case   13:*/		return 0x8221705C;
		  /* 8221705Ch */ case   14:  		/* bc 12, CR0_EQ, 12 */
		/* 8221705Ch case   14:*/		if ( regs.CR[0].eq ) { return 0x82217068;  }
		/* 8221705Ch case   14:*/		return 0x82217060;
		  /* 82217060h */ case   15:  		/* addi R9, R9, 1 */
		/* 82217060h case   15:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82217060h case   15:*/		return 0x82217064;
		  /* 82217064h */ case   16:  		/* stw R9, <#[R1 + 108]> */
		/* 82217064h case   16:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000006C) );
		/* 82217064h case   16:*/		return 0x82217068;
	}
	return 0x82217068;
} // Block from 82217024h-82217068h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82217068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217068);
		  /* 82217068h */ case    0:  		/* addi R9, R9, 1 */
		/* 82217068h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82217068h case    0:*/		return 0x8221706C;
		  /* 8221706Ch */ case    1:  		/* stw R31, <#[R1 + 104]> */
		/* 8221706Ch case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000068) );
		/* 8221706Ch case    1:*/		return 0x82217070;
		  /* 82217070h */ case    2:  		/* add R11, R10, R11 */
		/* 82217070h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82217070h case    2:*/		return 0x82217074;
		  /* 82217074h */ case    3:  		/* rlwinm R22, R9, 31, 1, 31 */
		/* 82217074h case    3:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R22,regs.R9);
		/* 82217074h case    3:*/		return 0x82217078;
		  /* 82217078h */ case    4:  		/* li R15, 1 */
		/* 82217078h case    4:*/		cpu::op::li<0>(regs,&regs.R15,0x1);
		/* 82217078h case    4:*/		return 0x8221707C;
		  /* 8221707Ch */ case    5:  		/* add R11, R11, R22 */
		/* 8221707Ch case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R22);
		/* 8221707Ch case    5:*/		return 0x82217080;
		  /* 82217080h */ case    6:  		/* addi R16, R25, 13152 */
		/* 82217080h case    6:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R25,0x3360);
		/* 82217080h case    6:*/		return 0x82217084;
		  /* 82217084h */ case    7:  		/* stw R11, <#[R25 + 12428]> */
		/* 82217084h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x0000308C) );
		/* 82217084h case    7:*/		return 0x82217088;
		  /* 82217088h */ case    8:  		/* mr R21, R31 */
		/* 82217088h case    8:*/		regs.R21 = regs.R31;
		/* 82217088h case    8:*/		return 0x8221708C;
		  /* 8221708Ch */ case    9:  		/* lwz R10, <#[R25 + 13160]> */
		/* 8221708Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00003368) );
		/* 8221708Ch case    9:*/		return 0x82217090;
		  /* 82217090h */ case   10:  		/* mr R11, R31 */
		/* 82217090h case   10:*/		regs.R11 = regs.R31;
		/* 82217090h case   10:*/		return 0x82217094;
		  /* 82217094h */ case   11:  		/* lwz R30, <#[R25 + 13152]> */
		/* 82217094h case   11:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R25 + 0x00003360) );
		/* 82217094h case   11:*/		return 0x82217098;
		  /* 82217098h */ case   12:  		/* cmplwi CR6, R10, 0 */
		/* 82217098h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82217098h case   12:*/		return 0x8221709C;
		  /* 8221709Ch */ case   13:  		/* bc 12, CR6_EQ, 52 */
		/* 8221709Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x822170D0;  }
		/* 8221709Ch case   13:*/		return 0x822170A0;
		  /* 822170A0h */ case   14:  		/* addi R3, R1, 128 */
		/* 822170A0h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 822170A0h case   14:*/		return 0x822170A4;
		  /* 822170A4h */ case   15:  		/* li R5, 24 */
		/* 822170A4h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x18);
		/* 822170A4h case   15:*/		return 0x822170A8;
		  /* 822170A8h */ case   16:  		/* mr R4, R30 */
		/* 822170A8h case   16:*/		regs.R4 = regs.R30;
		/* 822170A8h case   16:*/		return 0x822170AC;
		  /* 822170ACh */ case   17:  		/* bl -1595132 */
		/* 822170ACh case   17:*/		regs.LR = 0x822170B0; return 0x820919B0;
		/* 822170ACh case   17:*/		return 0x822170B0;
		  /* 822170B0h */ case   18:  		/* lwz R11, <#[R30 + 20]> */
		/* 822170B0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 822170B0h case   18:*/		return 0x822170B4;
		  /* 822170B4h */ case   19:  		/* mr R4, R30 */
		/* 822170B4h case   19:*/		regs.R4 = regs.R30;
		/* 822170B4h case   19:*/		return 0x822170B8;
		  /* 822170B8h */ case   20:  		/* stw R11, <#[R16]> */
		/* 822170B8h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 822170B8h case   20:*/		return 0x822170BC;
		  /* 822170BCh */ case   21:  		/* lwz R3, <#[R29]> */
		/* 822170BCh case   21:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 822170BCh case   21:*/		return 0x822170C0;
		  /* 822170C0h */ case   22:  		/* lwz R11, <#[R29 + 8]> */
		/* 822170C0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 822170C0h case   22:*/		return 0x822170C4;
		  /* 822170C4h */ case   23:  		/* mtspr CTR, R11 */
		/* 822170C4h case   23:*/		regs.CTR = regs.R11;
		/* 822170C4h case   23:*/		return 0x822170C8;
		  /* 822170C8h */ case   24:  		/* bcctrl 20, CR0_LT */
		/* 822170C8h case   24:*/		if ( 1 ) { regs.LR = 0x822170CC; return (uint32)regs.CTR; }
		/* 822170C8h case   24:*/		return 0x822170CC;
		  /* 822170CCh */ case   25:  		/* mr R11, R15 */
		/* 822170CCh case   25:*/		regs.R11 = regs.R15;
		/* 822170CCh case   25:*/		return 0x822170D0;
	}
	return 0x822170D0;
} // Block from 82217068h-822170D0h (26 instructions)

//////////////////////////////////////////////////////
// Block at 822170D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822170D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822170D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822170D0);
		  /* 822170D0h */ case    0:  		/* lwz R10, <#[R16 + 8]> */
		/* 822170D0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x00000008) );
		/* 822170D0h case    0:*/		return 0x822170D4;
		  /* 822170D4h */ case    1:  		/* mr R20, R11 */
		/* 822170D4h case    1:*/		regs.R20 = regs.R11;
		/* 822170D4h case    1:*/		return 0x822170D8;
	}
	return 0x822170D8;
} // Block from 822170D0h-822170D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822170D8h
// Function '?DoSaveMova@XGRAPHICS@@YAXPAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PATIL_Token@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822170D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822170D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822170D8);
		  /* 822170D8h */ case    0:  		/* lwz R14, <#[R1 + 140]> */
		/* 822170D8h case    0:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R1 + 0x0000008C) );
		/* 822170D8h case    0:*/		return 0x822170DC;
		  /* 822170DCh */ case    1:  		/* addi R19, R1, 288 */
		/* 822170DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R1,0x120);
		/* 822170DCh case    1:*/		return 0x822170E0;
		  /* 822170E0h */ case    2:  		/* addi R11, R10, -1 */
		/* 822170E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFFFFF);
		/* 822170E0h case    2:*/		return 0x822170E4;
		  /* 822170E4h */ case    3:  		/* lwz R18, <#[R1 + 136]> */
		/* 822170E4h case    3:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x00000088) );
		/* 822170E4h case    3:*/		return 0x822170E8;
		  /* 822170E8h */ case    4:  		/* lis R10, -32252 */
		/* 822170E8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822170E8h case    4:*/		return 0x822170EC;
		  /* 822170ECh */ case    5:  		/* stw R11, <#[R16 + 8]> */
		/* 822170ECh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 822170ECh case    5:*/		return 0x822170F0;
		  /* 822170F0h */ case    6:  		/* lis R11, -32252 */
		/* 822170F0h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822170F0h case    6:*/		return 0x822170F4;
		  /* 822170F4h */ case    7:  		/* addi R10, R10, -25364 */
		/* 822170F4h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFF9CEC);
		/* 822170F4h case    7:*/		return 0x822170F8;
		  /* 822170F8h */ case    8:  		/* addi R11, R11, -5600 */
		/* 822170F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFEA20);
		/* 822170F8h case    8:*/		return 0x822170FC;
		  /* 822170FCh */ case    9:  		/* addi R17, R1, 416 */
		/* 822170FCh case    9:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R1,0x1A0);
		/* 822170FCh case    9:*/		return 0x82217100;
		  /* 82217100h */ case   10:  		/* stw R10, <#[R1 + 112]> */
		/* 82217100h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 82217100h case   10:*/		return 0x82217104;
		  /* 82217104h */ case   11:  		/* stw R11, <#[R1 + 96]> */
		/* 82217104h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 82217104h case   11:*/		return 0x82217108;
		  /* 82217108h */ case   12:  		/* cmplwi CR6, R20, 0 */
		/* 82217108h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 82217108h case   12:*/		return 0x8221710C;
		  /* 8221710Ch */ case   13:  		/* bc 12, CR6_EQ, 1708 */
		/* 8221710Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x822177B8;  }
		/* 8221710Ch case   13:*/		return 0x82217110;
		  /* 82217110h */ case   14:  		/* lwz R28, <#[R1 + 132]> */
		/* 82217110h case   14:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000084) );
		/* 82217110h case   14:*/		return 0x82217114;
		  /* 82217114h */ case   15:  		/* cmplw CR6, R21, R28 */
		/* 82217114h case   15:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R28);
		/* 82217114h case   15:*/		return 0x82217118;
		  /* 82217118h */ case   16:  		/* bc 4, CR6_EQ, 1388 */
		/* 82217118h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82217684;  }
		/* 82217118h case   16:*/		return 0x8221711C;
		  /* 8221711Ch */ case   17:  		/* lwz R27, <#[R1 + 128]> */
		/* 8221711Ch case   17:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000080) );
		/* 8221711Ch case   17:*/		return 0x82217120;
		  /* 82217120h */ case   18:  		/* rlwinm. R11, R27, 0, 31, 31 */
		/* 82217120h case   18:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R27);
		/* 82217120h case   18:*/		return 0x82217124;
		  /* 82217124h */ case   19:  		/* bc 12, CR0_EQ, 48 */
		/* 82217124h case   19:*/		if ( regs.CR[0].eq ) { return 0x82217154;  }
		/* 82217124h case   19:*/		return 0x82217128;
		  /* 82217128h */ case   20:  		/* mulli R11, R31, 6 */
		/* 82217128h case   20:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R31,0x6);
		/* 82217128h case   20:*/		return 0x8221712C;
		  /* 8221712Ch */ case   21:  		/* add R11, R11, R23 */
		/* 8221712Ch case   21:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R23);
		/* 8221712Ch case   21:*/		return 0x82217130;
		  /* 82217130h */ case   22:  		/* li R10, 3 */
		/* 82217130h case   22:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 82217130h case   22:*/		return 0x82217134;
		  /* 82217134h */ case   23:  		/* addi R31, R31, 1 */
		/* 82217134h case   23:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82217134h case   23:*/		return 0x82217138;
		  /* 82217138h */ case   24:  		/* lhz R8, <#[R11]> */
		/* 82217138h case   24:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82217138h case   24:*/		return 0x8221713C;
		  /* 8221713Ch */ case   25:  		/* lwz R9, <#[R11 + 2]> */
		/* 8221713Ch case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 8221713Ch case   25:*/		return 0x82217140;
		  /* 82217140h */ case   26:  		/* rlwimi R8, R14, 12, 0, 19 */
		/* 82217140h case   26:*/		cpu::op::rlwimi<0,12,0,19>(regs,&regs.R8,regs.R14);
		/* 82217140h case   26:*/		return 0x82217144;
		  /* 82217144h */ case   27:  		/* rlwimi R9, R18, 5, 25, 26 */
		/* 82217144h case   27:*/		cpu::op::rlwimi<0,5,25,26>(regs,&regs.R9,regs.R18);
		/* 82217144h case   27:*/		return 0x82217148;
		  /* 82217148h */ case   28:  		/* sth R8, <#[R11]> */
		/* 82217148h case   28:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82217148h case   28:*/		return 0x8221714C;
		  /* 8221714Ch */ case   29:  		/* rlwimi R9, R10, 2, 28, 31 */
		/* 8221714Ch case   29:*/		cpu::op::rlwimi<0,2,28,31>(regs,&regs.R9,regs.R10);
		/* 8221714Ch case   29:*/		return 0x82217150;
		  /* 82217150h */ case   30:  		/* b 676 */
		/* 82217150h case   30:*/		return 0x822173F4;
		/* 82217150h case   30:*/		return 0x82217154;
	}
	return 0x82217154;
} // Block from 822170D8h-82217154h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82217154h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217154( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217154) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217154);
		  /* 82217154h */ case    0:  		/* rlwinm. R11, R27, 0, 0, 0 */
		/* 82217154h case    0:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R27);
		/* 82217154h case    0:*/		return 0x82217158;
		  /* 82217158h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 82217158h case    1:*/		if ( regs.CR[0].eq ) { return 0x8221716C;  }
		/* 82217158h case    1:*/		return 0x8221715C;
		  /* 8221715Ch */ case    2:  		/* lwz R11, <#[R1 + 100]> */
		/* 8221715Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 8221715Ch case    2:*/		return 0x82217160;
		  /* 82217160h */ case    3:  		/* cmpwi CR6, R11, -1 */
		/* 82217160h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82217160h case    3:*/		return 0x82217164;
		  /* 82217164h */ case    4:  		/* bc 12, CR6_EQ, 1212 */
		/* 82217164h case    4:*/		if ( regs.CR[6].eq ) { return 0x82217620;  }
		/* 82217164h case    4:*/		return 0x82217168;
		  /* 82217168h */ case    5:  		/* b 488 */
		/* 82217168h case    5:*/		return 0x82217350;
		/* 82217168h case    5:*/		return 0x8221716C;
	}
	return 0x8221716C;
} // Block from 82217154h-8221716Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221716Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221716C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221716C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221716C);
		  /* 8221716Ch */ case    0:  		/* rlwinm. R11, R27, 0, 16, 16 */
		/* 8221716Ch case    0:*/		cpu::op::rlwinm<1,0,16,16>(regs,&regs.R11,regs.R27);
		/* 8221716Ch case    0:*/		return 0x82217170;
		  /* 82217170h */ case    1:  		/* bc 12, CR0_EQ, 172 */
		/* 82217170h case    1:*/		if ( regs.CR[0].eq ) { return 0x8221721C;  }
		/* 82217170h case    1:*/		return 0x82217174;
		  /* 82217174h */ case    2:  		/* mulli R11, R31, 6 */
		/* 82217174h case    2:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R31,0x6);
		/* 82217174h case    2:*/		return 0x82217178;
		  /* 82217178h */ case    3:  		/* add R11, R11, R23 */
		/* 82217178h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R23);
		/* 82217178h case    3:*/		return 0x8221717C;
		  /* 8221717Ch */ case    4:  		/* addi R9, R31, 1 */
		/* 8221717Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x1);
		/* 8221717Ch case    4:*/		return 0x82217180;
		  /* 82217180h */ case    5:  		/* li R8, 2 */
		/* 82217180h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x2);
		/* 82217180h case    5:*/		return 0x82217184;
		  /* 82217184h */ case    6:  		/* mulli R10, R9, 6 */
		/* 82217184h case    6:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R9,0x6);
		/* 82217184h case    6:*/		return 0x82217188;
		  /* 82217188h */ case    7:  		/* lwz R7, <#[R11 + 2]> */
		/* 82217188h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82217188h case    7:*/		return 0x8221718C;
		  /* 8221718Ch */ case    8:  		/* lhz R6, <#[R11]> */
		/* 8221718Ch case    8:*/		cpu::mem::load16z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221718Ch case    8:*/		return 0x82217190;
		  /* 82217190h */ case    9:  		/* rlwinm R7, R7, 0, 0, 29 */
		/* 82217190h case    9:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R7,regs.R7);
		/* 82217190h case    9:*/		return 0x82217194;
		  /* 82217194h */ case   10:  		/* rlwinm R6, R6, 0, 20, 31 */
		/* 82217194h case   10:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R6,regs.R6);
		/* 82217194h case   10:*/		return 0x82217198;
		  /* 82217198h */ case   11:  		/* ori R7, R7, 108 */
		/* 82217198h case   11:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R7,0x6C);
		/* 82217198h case   11:*/		return 0x8221719C;
		  /* 8221719Ch */ case   12:  		/* sth R6, <#[R11]> */
		/* 8221719Ch case   12:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221719Ch case   12:*/		return 0x822171A0;
		  /* 822171A0h */ case   13:  		/* add R10, R10, R23 */
		/* 822171A0h case   13:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R23);
		/* 822171A0h case   13:*/		return 0x822171A4;
		  /* 822171A4h */ case   14:  		/* stw R7, <#[R11 + 2]> */
		/* 822171A4h case   14:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 822171A4h case   14:*/		return 0x822171A8;
		  /* 822171A8h */ case   15:  		/* rlwimi R8, R22, 4, 16, 27 */
		/* 822171A8h case   15:*/		cpu::op::rlwimi<0,4,16,27>(regs,&regs.R8,regs.R22);
		/* 822171A8h case   15:*/		return 0x822171AC;
		  /* 822171ACh */ case   16:  		/* mulli R11, R21, 12 */
		/* 822171ACh case   16:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R21,0xC);
		/* 822171ACh case   16:*/		return 0x822171B0;
		  /* 822171B0h */ case   17:  		/* mr R7, R8 */
		/* 822171B0h case   17:*/		regs.R7 = regs.R8;
		/* 822171B0h case   17:*/		return 0x822171B4;
		  /* 822171B4h */ case   18:  		/* add R11, R11, R25 */
		/* 822171B4h case   18:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R25);
		/* 822171B4h case   18:*/		return 0x822171B8;
		  /* 822171B8h */ case   19:  		/* sth R7, <#[R10]> */
		/* 822171B8h case   19:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 822171B8h case   19:*/		return 0x822171BC;
		  /* 822171BCh */ case   20:  		/* mulli R8, R22, 12 */
		/* 822171BCh case   20:*/		cpu::op::mulli<0>(regs,&regs.R8,regs.R22,0xC);
		/* 822171BCh case   20:*/		return 0x822171C0;
		  /* 822171C0h */ case   21:  		/* addi R31, R9, 1 */
		/* 822171C0h case   21:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R9,0x1);
		/* 822171C0h case   21:*/		return 0x822171C4;
		  /* 822171C4h */ case   22:  		/* lwz R7, <#[R10 + 2]> */
		/* 822171C4h case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000002) );
		/* 822171C4h case   22:*/		return 0x822171C8;
		  /* 822171C8h */ case   23:  		/* addi R21, R21, 2 */
		/* 822171C8h case   23:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x2);
		/* 822171C8h case   23:*/		return 0x822171CC;
		  /* 822171CCh */ case   24:  		/* addi R22, R22, 2 */
		/* 822171CCh case   24:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x2);
		/* 822171CCh case   24:*/		return 0x822171D0;
		  /* 822171D0h */ case   25:  		/* rlwimi R7, R15, 0, 28, 11 */
		/* 822171D0h case   25:*/		cpu::op::rlwimi<0,0,28,11>(regs,&regs.R7,regs.R15);
		/* 822171D0h case   25:*/		return 0x822171D4;
		  /* 822171D4h */ case   26:  		/* stw R7, <#[R10 + 2]> */
		/* 822171D4h case   26:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000002) );
		/* 822171D4h case   26:*/		return 0x822171D8;
		  /* 822171D8h */ case   27:  		/* lwz R10, <#[R25 + 12424]> */
		/* 822171D8h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00003088) );
		/* 822171D8h case   27:*/		return 0x822171DC;
		  /* 822171DCh */ case   28:  		/* add R7, R10, R8 */
		/* 822171DCh case   28:*/		cpu::op::add<0>(regs,&regs.R7,regs.R10,regs.R8);
		/* 822171DCh case   28:*/		return 0x822171E0;
		  /* 822171E0h */ case   29:  		/* lwz R9, <#[R11 + 16]> */
		/* 822171E0h case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 822171E0h case   29:*/		return 0x822171E4;
		  /* 822171E4h */ case   30:  		/* stwx R9, <#[R10 + R8]> */
		/* 822171E4h case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 822171E4h case   30:*/		return 0x822171E8;
		  /* 822171E8h */ case   31:  		/* lwz R10, <#[R11 + 20]> */
		/* 822171E8h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 822171E8h case   31:*/		return 0x822171EC;
		  /* 822171ECh */ case   32:  		/* stw R10, <#[R7 + 4]> */
		/* 822171ECh case   32:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R7 + 0x00000004) );
		/* 822171ECh case   32:*/		return 0x822171F0;
		  /* 822171F0h */ case   33:  		/* lwz R10, <#[R11 + 24]> */
		/* 822171F0h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 822171F0h case   33:*/		return 0x822171F4;
		  /* 822171F4h */ case   34:  		/* stw R10, <#[R7 + 8]> */
		/* 822171F4h case   34:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R7 + 0x00000008) );
		/* 822171F4h case   34:*/		return 0x822171F8;
		  /* 822171F8h */ case   35:  		/* lwz R9, <#[R11 + 28]> */
		/* 822171F8h case   35:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000001C) );
		/* 822171F8h case   35:*/		return 0x822171FC;
		  /* 822171FCh */ case   36:  		/* lwz R10, <#[R25 + 12424]> */
		/* 822171FCh case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00003088) );
		/* 822171FCh case   36:*/		return 0x82217200;
		  /* 82217200h */ case   37:  		/* add R10, R10, R8 */
		/* 82217200h case   37:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 82217200h case   37:*/		return 0x82217204;
		  /* 82217204h */ case   38:  		/* stw R9, <#[R10 + 12]> */
		/* 82217204h case   38:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x0000000C) );
		/* 82217204h case   38:*/		return 0x82217208;
		  /* 82217208h */ case   39:  		/* lwz R9, <#[R11 + 32]> */
		/* 82217208h case   39:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000020) );
		/* 82217208h case   39:*/		return 0x8221720C;
		  /* 8221720Ch */ case   40:  		/* stw R9, <#[R10 + 16]> */
		/* 8221720Ch case   40:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000010) );
		/* 8221720Ch case   40:*/		return 0x82217210;
		  /* 82217210h */ case   41:  		/* lwz R11, <#[R11 + 36]> */
		/* 82217210h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 82217210h case   41:*/		return 0x82217214;
		  /* 82217214h */ case   42:  		/* stw R11, <#[R10 + 20]> */
		/* 82217214h case   42:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000014) );
		/* 82217214h case   42:*/		return 0x82217218;
		  /* 82217218h */ case   43:  		/* b 1032 */
		/* 82217218h case   43:*/		return 0x82217620;
		/* 82217218h case   43:*/		return 0x8221721C;
	}
	return 0x8221721C;
} // Block from 8221716Ch-8221721Ch (44 instructions)

//////////////////////////////////////////////////////
// Block at 8221721Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221721C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221721C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221721C);
		  /* 8221721Ch */ case    0:  		/* rlwinm. R11, R27, 0, 30, 30 */
		/* 8221721Ch case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R27);
		/* 8221721Ch case    0:*/		return 0x82217220;
		  /* 82217220h */ case    1:  		/* bc 4, CR0_EQ, 604 */
		/* 82217220h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8221747C;  }
		/* 82217220h case    1:*/		return 0x82217224;
		  /* 82217224h */ case    2:  		/* rlwinm. R11, R27, 0, 15, 15 */
		/* 82217224h case    2:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R11,regs.R27);
		/* 82217224h case    2:*/		return 0x82217228;
		  /* 82217228h */ case    3:  		/* bc 4, CR0_EQ, 596 */
		/* 82217228h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8221747C;  }
		/* 82217228h case    3:*/		return 0x8221722C;
		  /* 8221722Ch */ case    4:  		/* rlwinm. R11, R27, 0, 29, 29 */
		/* 8221722Ch case    4:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R27);
		/* 8221722Ch case    4:*/		return 0x82217230;
		  /* 82217230h */ case    5:  		/* bc 12, CR0_EQ, 64 */
		/* 82217230h case    5:*/		if ( regs.CR[0].eq ) { return 0x82217270;  }
		/* 82217230h case    5:*/		return 0x82217234;
		  /* 82217234h */ case    6:  		/* mulli R11, R31, 6 */
		/* 82217234h case    6:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R31,0x6);
		/* 82217234h case    6:*/		return 0x82217238;
		  /* 82217238h */ case    7:  		/* stw R31, <#[R19]> */
		/* 82217238h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R19 + 0x00000000) );
		/* 82217238h case    7:*/		return 0x8221723C;
		  /* 8221723Ch */ case    8:  		/* add R11, R11, R23 */
		/* 8221723Ch case    8:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R23);
		/* 8221723Ch case    8:*/		return 0x82217240;
		  /* 82217240h */ case    9:  		/* addi R10, R18, -128 */
		/* 82217240h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R18,0xFFFFFF80);
		/* 82217240h case    9:*/		return 0x82217244;
		  /* 82217244h */ case   10:  		/* li R9, 16395 */
		/* 82217244h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x400B);
		/* 82217244h case   10:*/		return 0x82217248;
		  /* 82217248h */ case   11:  		/* addi R17, R17, 4 */
		/* 82217248h case   11:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R17,0x4);
		/* 82217248h case   11:*/		return 0x8221724C;
		  /* 8221724Ch */ case   12:  		/* addi R19, R19, 4 */
		/* 8221724Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0x4);
		/* 8221724Ch case   12:*/		return 0x82217250;
		  /* 82217250h */ case   13:  		/* lwz R8, <#[R11 + 2]> */
		/* 82217250h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82217250h case   13:*/		return 0x82217254;
		  /* 82217254h */ case   14:  		/* lhz R7, <#[R11]> */
		/* 82217254h case   14:*/		cpu::mem::load16z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82217254h case   14:*/		return 0x82217258;
		  /* 82217258h */ case   15:  		/* rlwimi R8, R10, 6, 18, 25 */
		/* 82217258h case   15:*/		cpu::op::rlwimi<0,6,18,25>(regs,&regs.R8,regs.R10);
		/* 82217258h case   15:*/		return 0x8221725C;
		  /* 8221725Ch */ case   16:  		/* andi. R10, R7, 65531 */
		/* 8221725Ch case   16:*/		cpu::op::andi<1>(regs,&regs.R10,regs.R7,0xFFFB);
		/* 8221725Ch case   16:*/		return 0x82217260;
		  /* 82217260h */ case   17:  		/* rlwimi R8, R9, 0, 26, 31 */
		/* 82217260h case   17:*/		cpu::op::rlwimi<0,0,26,31>(regs,&regs.R8,regs.R9);
		/* 82217260h case   17:*/		return 0x82217264;
		  /* 82217264h */ case   18:  		/* sth R10, <#[R11]> */
		/* 82217264h case   18:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82217264h case   18:*/		return 0x82217268;
		  /* 82217268h */ case   19:  		/* rlwimi R8, R9, 0, 17, 17 */
		/* 82217268h case   19:*/		cpu::op::rlwimi<0,0,17,17>(regs,&regs.R8,regs.R9);
		/* 82217268h case   19:*/		return 0x8221726C;
		  /* 8221726Ch */ case   20:  		/* b 328 */
		/* 8221726Ch case   20:*/		return 0x822173B4;
		/* 8221726Ch case   20:*/		return 0x82217270;
	}
	return 0x82217270;
} // Block from 8221721Ch-82217270h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82217270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217270);
		  /* 82217270h */ case    0:  		/* rlwinm. R11, R27, 0, 28, 28 */
		/* 82217270h case    0:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R27);
		/* 82217270h case    0:*/		return 0x82217274;
		  /* 82217274h */ case    1:  		/* bc 12, CR0_EQ, 76 */
		/* 82217274h case    1:*/		if ( regs.CR[0].eq ) { return 0x822172C0;  }
		/* 82217274h case    1:*/		return 0x82217278;
		  /* 82217278h */ case    2:  		/* mulli R11, R31, 6 */
		/* 82217278h case    2:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R31,0x6);
		/* 82217278h case    2:*/		return 0x8221727C;
		  /* 8221727Ch */ case    3:  		/* lwz R10, <#[R19 - 4]> */
		/* 8221727Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0xFFFFFFFC) );
		/* 8221727Ch case    3:*/		return 0x82217280;
		  /* 82217280h */ case    4:  		/* stw R31, <#[R19 - 4]> */
		/* 82217280h case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R19 + 0xFFFFFFFC) );
		/* 82217280h case    4:*/		return 0x82217284;
		  /* 82217284h */ case    5:  		/* add R11, R11, R23 */
		/* 82217284h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R23);
		/* 82217284h case    5:*/		return 0x82217288;
		  /* 82217288h */ case    6:  		/* addi R9, R18, -128 */
		/* 82217288h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R18,0xFFFFFF80);
		/* 82217288h case    6:*/		return 0x8221728C;
		  /* 8221728Ch */ case    7:  		/* li R8, 16427 */
		/* 8221728Ch case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x402B);
		/* 8221728Ch case    7:*/		return 0x82217290;
		  /* 82217290h */ case    8:  		/* mulli R10, R10, 6 */
		/* 82217290h case    8:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x6);
		/* 82217290h case    8:*/		return 0x82217294;
		  /* 82217294h */ case    9:  		/* lwz R7, <#[R11 + 2]> */
		/* 82217294h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82217294h case    9:*/		return 0x82217298;
		  /* 82217298h */ case   10:  		/* lhz R6, <#[R11]> */
		/* 82217298h case   10:*/		cpu::mem::load16z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82217298h case   10:*/		return 0x8221729C;
		  /* 8221729Ch */ case   11:  		/* rlwimi R7, R9, 6, 18, 25 */
		/* 8221729Ch case   11:*/		cpu::op::rlwimi<0,6,18,25>(regs,&regs.R7,regs.R9);
		/* 8221729Ch case   11:*/		return 0x822172A0;
		  /* 822172A0h */ case   12:  		/* andi. R9, R6, 65531 */
		/* 822172A0h case   12:*/		cpu::op::andi<1>(regs,&regs.R9,regs.R6,0xFFFB);
		/* 822172A0h case   12:*/		return 0x822172A4;
		  /* 822172A4h */ case   13:  		/* rlwimi R7, R8, 0, 26, 31 */
		/* 822172A4h case   13:*/		cpu::op::rlwimi<0,0,26,31>(regs,&regs.R7,regs.R8);
		/* 822172A4h case   13:*/		return 0x822172A8;
		  /* 822172A8h */ case   14:  		/* sth R9, <#[R11]> */
		/* 822172A8h case   14:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822172A8h case   14:*/		return 0x822172AC;
		  /* 822172ACh */ case   15:  		/* rlwimi R7, R8, 0, 17, 17 */
		/* 822172ACh case   15:*/		cpu::op::rlwimi<0,0,17,17>(regs,&regs.R7,regs.R8);
		/* 822172ACh case   15:*/		return 0x822172B0;
		  /* 822172B0h */ case   16:  		/* stw R7, <#[R11 + 2]> */
		/* 822172B0h case   16:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 822172B0h case   16:*/		return 0x822172B4;
		  /* 822172B4h */ case   17:  		/* lhzx R11, <#[R10 + R23]> */
		/* 822172B4h case   17:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R10 + regs.R23 + 0x00000000) );
		/* 822172B4h case   17:*/		return 0x822172B8;
		  /* 822172B8h */ case   18:  		/* rlwimi R11, R31, 3, 0, 28 */
		/* 822172B8h case   18:*/		cpu::op::rlwimi<0,3,0,28>(regs,&regs.R11,regs.R31);
		/* 822172B8h case   18:*/		return 0x822172BC;
		  /* 822172BCh */ case   19:  		/* b 408 */
		/* 822172BCh case   19:*/		return 0x82217454;
		/* 822172BCh case   19:*/		return 0x822172C0;
	}
	return 0x822172C0;
} // Block from 82217270h-822172C0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 822172C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822172C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822172C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822172C0);
		  /* 822172C0h */ case    0:  		/* rlwinm. R11, R27, 0, 27, 27 */
		/* 822172C0h case    0:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R27);
		/* 822172C0h case    0:*/		return 0x822172C4;
		  /* 822172C4h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 822172C4h case    1:*/		if ( regs.CR[0].eq ) { return 0x822172D8;  }
		/* 822172C4h case    1:*/		return 0x822172C8;
		  /* 822172C8h */ case    2:  		/* lwz R11, <#[R19 - 4]> */
		/* 822172C8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0xFFFFFFFC) );
		/* 822172C8h case    2:*/		return 0x822172CC;
		  /* 822172CCh */ case    3:  		/* addi R17, R17, -4 */
		/* 822172CCh case    3:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R17,0xFFFFFFFC);
		/* 822172CCh case    3:*/		return 0x822172D0;
		  /* 822172D0h */ case    4:  		/* addi R19, R19, -4 */
		/* 822172D0h case    4:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0xFFFFFFFC);
		/* 822172D0h case    4:*/		return 0x822172D4;
		  /* 822172D4h */ case    5:  		/* b 124 */
		/* 822172D4h case    5:*/		return 0x82217350;
		/* 822172D4h case    5:*/		return 0x822172D8;
	}
	return 0x822172D8;
} // Block from 822172C0h-822172D8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822172D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822172D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822172D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822172D8);
		  /* 822172D8h */ case    0:  		/* rlwinm. R11, R27, 0, 26, 26 */
		/* 822172D8h case    0:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R27);
		/* 822172D8h case    0:*/		return 0x822172DC;
		  /* 822172DCh */ case    1:  		/* bc 12, CR0_EQ, 96 */
		/* 822172DCh case    1:*/		if ( regs.CR[0].eq ) { return 0x8221733C;  }
		/* 822172DCh case    1:*/		return 0x822172E0;
		  /* 822172E0h */ case    2:  		/* mulli R11, R31, 6 */
		/* 822172E0h case    2:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R31,0x6);
		/* 822172E0h case    2:*/		return 0x822172E4;
		  /* 822172E4h */ case    3:  		/* add R10, R11, R23 */
		/* 822172E4h case    3:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R23);
		/* 822172E4h case    3:*/		return 0x822172E8;
		  /* 822172E8h */ case    4:  		/* li R9, 41 */
		/* 822172E8h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x29);
		/* 822172E8h case    4:*/		return 0x822172EC;
		  /* 822172ECh */ case    5:  		/* cmpwi CR6, R18, -1 */
		/* 822172ECh case    5:*/		cpu::op::cmpwi<6>(regs,regs.R18,0xFFFFFFFF);
		/* 822172ECh case    5:*/		return 0x822172F0;
		  /* 822172F0h */ case    6:  		/* lwz R11, <#[R10 + 2]> */
		/* 822172F0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000002) );
		/* 822172F0h case    6:*/		return 0x822172F4;
		  /* 822172F4h */ case    7:  		/* rlwimi R11, R9, 0, 26, 31 */
		/* 822172F4h case    7:*/		cpu::op::rlwimi<0,0,26,31>(regs,&regs.R11,regs.R9);
		/* 822172F4h case    7:*/		return 0x822172F8;
		  /* 822172F8h */ case    8:  		/* stw R11, <#[R10 + 2]> */
		/* 822172F8h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000002) );
		/* 822172F8h case    8:*/		return 0x822172FC;
		  /* 822172FCh */ case    9:  		/* bc 4, CR6_EQ, 20 */
		/* 822172FCh case    9:*/		if ( !regs.CR[6].eq ) { return 0x82217310;  }
		/* 822172FCh case    9:*/		return 0x82217300;
		  /* 82217300h */ case   10:  		/* lhz R9, <#[R10]> */
		/* 82217300h case   10:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82217300h case   10:*/		return 0x82217304;
		  /* 82217304h */ case   11:  		/* rlwinm R11, R11, 0, 26, 17 */
		/* 82217304h case   11:*/		cpu::op::rlwinm<0,0,26,17>(regs,&regs.R11,regs.R11);
		/* 82217304h case   11:*/		return 0x82217308;
		  /* 82217308h */ case   12:  		/* ori R9, R9, 4 */
		/* 82217308h case   12:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82217308h case   12:*/		return 0x8221730C;
		  /* 8221730Ch */ case   13:  		/* b 20 */
		/* 8221730Ch case   13:*/		return 0x82217320;
		/* 8221730Ch case   13:*/		return 0x82217310;
	}
	return 0x82217310;
} // Block from 822172D8h-82217310h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82217310h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217310);
		  /* 82217310h */ case    0:  		/* lhz R9, <#[R10]> */
		/* 82217310h case    0:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82217310h case    0:*/		return 0x82217314;
		  /* 82217314h */ case    1:  		/* addi R8, R18, -128 */
		/* 82217314h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R18,0xFFFFFF80);
		/* 82217314h case    1:*/		return 0x82217318;
		  /* 82217318h */ case    2:  		/* andi. R9, R9, 65531 */
		/* 82217318h case    2:*/		cpu::op::andi<1>(regs,&regs.R9,regs.R9,0xFFFB);
		/* 82217318h case    2:*/		return 0x8221731C;
		  /* 8221731Ch */ case    3:  		/* rlwimi R11, R8, 6, 18, 25 */
		/* 8221731Ch case    3:*/		cpu::op::rlwimi<0,6,18,25>(regs,&regs.R11,regs.R8);
		/* 8221731Ch case    3:*/		return 0x82217320;
	}
	return 0x82217320;
} // Block from 82217310h-82217320h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82217320h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217320( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217320) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217320);
		  /* 82217320h */ case    0:  		/* stw R11, <#[R10 + 2]> */
		/* 82217320h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000002) );
		/* 82217320h case    0:*/		return 0x82217324;
		  /* 82217324h */ case    1:  		/* rlwinm R11, R14, 2, 0, 29 */
		/* 82217324h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R14);
		/* 82217324h case    1:*/		return 0x82217328;
		  /* 82217328h */ case    2:  		/* sth R9, <#[R10]> */
		/* 82217328h case    2:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82217328h case    2:*/		return 0x8221732C;
		  /* 8221732Ch */ case    3:  		/* addi R10, R1, 160 */
		/* 8221732Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xA0);
		/* 8221732Ch case    3:*/		return 0x82217330;
		  /* 82217330h */ case    4:  		/* stwx R31, <#[R11 + R10]> */
		/* 82217330h case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82217330h case    4:*/		return 0x82217334;
		  /* 82217334h */ case    5:  		/* addi R31, R31, 1 */
		/* 82217334h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82217334h case    5:*/		return 0x82217338;
		  /* 82217338h */ case    6:  		/* b 744 */
		/* 82217338h case    6:*/		return 0x82217620;
		/* 82217338h case    6:*/		return 0x8221733C;
	}
	return 0x8221733C;
} // Block from 82217320h-8221733Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221733Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221733C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221733C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221733C);
		  /* 8221733Ch */ case    0:  		/* rlwinm. R11, R27, 0, 24, 24 */
		/* 8221733Ch case    0:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R11,regs.R27);
		/* 8221733Ch case    0:*/		return 0x82217340;
		  /* 82217340h */ case    1:  		/* bc 12, CR0_EQ, 36 */
		/* 82217340h case    1:*/		if ( regs.CR[0].eq ) { return 0x82217364;  }
		/* 82217340h case    1:*/		return 0x82217344;
		  /* 82217344h */ case    2:  		/* rlwinm R11, R14, 2, 0, 29 */
		/* 82217344h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R14);
		/* 82217344h case    2:*/		return 0x82217348;
		  /* 82217348h */ case    3:  		/* addi R10, R1, 160 */
		/* 82217348h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xA0);
		/* 82217348h case    3:*/		return 0x8221734C;
		  /* 8221734Ch */ case    4:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8221734Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8221734Ch case    4:*/		return 0x82217350;
	}
	return 0x82217350;
} // Block from 8221733Ch-82217350h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82217350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217350);
		  /* 82217350h */ case    0:  		/* mulli R11, R11, 6 */
		/* 82217350h case    0:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x6);
		/* 82217350h case    0:*/		return 0x82217354;
		  /* 82217354h */ case    1:  		/* lhzx R10, <#[R11 + R23]> */
		/* 82217354h case    1:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R11 + regs.R23 + 0x00000000) );
		/* 82217354h case    1:*/		return 0x82217358;
	}
	return 0x82217358;
} // Block from 82217350h-82217358h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82217358h
// Function '?DoMova@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@2PAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217358);
		  /* 82217358h */ case    0:  		/* rlwimi R10, R31, 3, 0, 28 */
		/* 82217358h case    0:*/		cpu::op::rlwimi<0,3,0,28>(regs,&regs.R10,regs.R31);
		/* 82217358h case    0:*/		return 0x8221735C;
		  /* 8221735Ch */ case    1:  		/* sthx R10, <#[R11 + R23]> */
		/* 8221735Ch case    1:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + regs.R23 + 0x00000000) );
		/* 8221735Ch case    1:*/		return 0x82217360;
		  /* 82217360h */ case    2:  		/* b 704 */
		/* 82217360h case    2:*/		return 0x82217620;
		/* 82217360h case    2:*/		return 0x82217364;
	}
	return 0x82217364;
} // Block from 82217358h-82217364h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82217364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217364);
		  /* 82217364h */ case    0:  		/* rlwinm. R11, R27, 0, 25, 25 */
		/* 82217364h case    0:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R27);
		/* 82217364h case    0:*/		return 0x82217368;
		  /* 82217368h */ case    1:  		/* bc 12, CR0_EQ, 32 */
		/* 82217368h case    1:*/		if ( regs.CR[0].eq ) { return 0x82217388;  }
		/* 82217368h case    1:*/		return 0x8221736C;
		  /* 8221736Ch */ case    2:  		/* mulli R11, R31, 6 */
		/* 8221736Ch case    2:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R31,0x6);
		/* 8221736Ch case    2:*/		return 0x82217370;
		  /* 82217370h */ case    3:  		/* add R11, R11, R23 */
		/* 82217370h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R23);
		/* 82217370h case    3:*/		return 0x82217374;
		  /* 82217374h */ case    4:  		/* li R10, 5 */
		/* 82217374h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x5);
		/* 82217374h case    4:*/		return 0x82217378;
		  /* 82217378h */ case    5:  		/* addi R31, R31, 1 */
		/* 82217378h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82217378h case    5:*/		return 0x8221737C;
		  /* 8221737Ch */ case    6:  		/* lwz R9, <#[R11 + 2]> */
		/* 8221737Ch case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 8221737Ch case    6:*/		return 0x82217380;
		  /* 82217380h */ case    7:  		/* rlwimi R9, R10, 1, 27, 31 */
		/* 82217380h case    7:*/		cpu::op::rlwimi<0,1,27,31>(regs,&regs.R9,regs.R10);
		/* 82217380h case    7:*/		return 0x82217384;
		  /* 82217384h */ case    8:  		/* b 112 */
		/* 82217384h case    8:*/		return 0x822173F4;
		/* 82217384h case    8:*/		return 0x82217388;
	}
	return 0x82217388;
} // Block from 82217364h-82217388h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82217388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217388);
		  /* 82217388h */ case    0:  		/* rlwinm. R11, R27, 0, 21, 21 */
		/* 82217388h case    0:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R11,regs.R27);
		/* 82217388h case    0:*/		return 0x8221738C;
		  /* 8221738Ch */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 8221738Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x822173C0;  }
		/* 8221738Ch case    1:*/		return 0x82217390;
		  /* 82217390h */ case    2:  		/* mulli R11, R31, 6 */
		/* 82217390h case    2:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R31,0x6);
		/* 82217390h case    2:*/		return 0x82217394;
		  /* 82217394h */ case    3:  		/* stw R31, <#[R1 + 100]> */
		/* 82217394h case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000064) );
		/* 82217394h case    3:*/		return 0x82217398;
		  /* 82217398h */ case    4:  		/* add R11, R11, R23 */
		/* 82217398h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R23);
		/* 82217398h case    4:*/		return 0x8221739C;
		  /* 8221739Ch */ case    5:  		/* li R10, 11 */
		/* 8221739Ch case    5:*/		cpu::op::li<0>(regs,&regs.R10,0xB);
		/* 8221739Ch case    5:*/		return 0x822173A0;
		  /* 822173A0h */ case    6:  		/* lhz R9, <#[R11]> */
		/* 822173A0h case    6:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822173A0h case    6:*/		return 0x822173A4;
		  /* 822173A4h */ case    7:  		/* lwz R8, <#[R11 + 2]> */
		/* 822173A4h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 822173A4h case    7:*/		return 0x822173A8;
		  /* 822173A8h */ case    8:  		/* ori R9, R9, 4 */
		/* 822173A8h case    8:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x4);
		/* 822173A8h case    8:*/		return 0x822173AC;
		  /* 822173ACh */ case    9:  		/* rlwimi R8, R10, 0, 17, 31 */
		/* 822173ACh case    9:*/		cpu::op::rlwimi<0,0,17,31>(regs,&regs.R8,regs.R10);
		/* 822173ACh case    9:*/		return 0x822173B0;
		  /* 822173B0h */ case   10:  		/* sth R9, <#[R11]> */
		/* 822173B0h case   10:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822173B0h case   10:*/		return 0x822173B4;
	}
	return 0x822173B4;
} // Block from 82217388h-822173B4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 822173B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822173B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822173B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822173B4);
		  /* 822173B4h */ case    0:  		/* addi R31, R31, 1 */
		/* 822173B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 822173B4h case    0:*/		return 0x822173B8;
		  /* 822173B8h */ case    1:  		/* stw R8, <#[R11 + 2]> */
		/* 822173B8h case    1:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 822173B8h case    1:*/		return 0x822173BC;
		  /* 822173BCh */ case    2:  		/* b 612 */
		/* 822173BCh case    2:*/		return 0x82217620;
		/* 822173BCh case    2:*/		return 0x822173C0;
	}
	return 0x822173C0;
} // Block from 822173B4h-822173C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 822173C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822173C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822173C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822173C0);
		  /* 822173C0h */ case    0:  		/* rlwinm. R11, R27, 0, 23, 23 */
		/* 822173C0h case    0:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R27);
		/* 822173C0h case    0:*/		return 0x822173C4;
		  /* 822173C4h */ case    1:  		/* bc 12, CR0_EQ, 56 */
		/* 822173C4h case    1:*/		if ( regs.CR[0].eq ) { return 0x822173FC;  }
		/* 822173C4h case    1:*/		return 0x822173C8;
		  /* 822173C8h */ case    2:  		/* mulli R11, R31, 6 */
		/* 822173C8h case    2:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R31,0x6);
		/* 822173C8h case    2:*/		return 0x822173CC;
		  /* 822173CCh */ case    3:  		/* stw R31, <#[R19]> */
		/* 822173CCh case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R19 + 0x00000000) );
		/* 822173CCh case    3:*/		return 0x822173D0;
		  /* 822173D0h */ case    4:  		/* add R11, R11, R23 */
		/* 822173D0h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R23);
		/* 822173D0h case    4:*/		return 0x822173D4;
		  /* 822173D4h */ case    5:  		/* addi R31, R31, 1 */
		/* 822173D4h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 822173D4h case    5:*/		return 0x822173D8;
		  /* 822173D8h */ case    6:  		/* li R10, 7 */
		/* 822173D8h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x7);
		/* 822173D8h case    6:*/		return 0x822173DC;
		  /* 822173DCh */ case    7:  		/* stw R31, <#[R17]> */
		/* 822173DCh case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R17 + 0x00000000) );
		/* 822173DCh case    7:*/		return 0x822173E0;
		  /* 822173E0h */ case    8:  		/* addi R19, R19, 4 */
		/* 822173E0h case    8:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0x4);
		/* 822173E0h case    8:*/		return 0x822173E4;
		  /* 822173E4h */ case    9:  		/* addi R17, R17, 4 */
		/* 822173E4h case    9:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R17,0x4);
		/* 822173E4h case    9:*/		return 0x822173E8;
		  /* 822173E8h */ case   10:  		/* lwz R9, <#[R11 + 2]> */
		/* 822173E8h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 822173E8h case   10:*/		return 0x822173EC;
		  /* 822173ECh */ case   11:  		/* rlwimi R9, R18, 27, 0, 4 */
		/* 822173ECh case   11:*/		cpu::op::rlwimi<0,27,0,4>(regs,&regs.R9,regs.R18);
		/* 822173ECh case   11:*/		return 0x822173F0;
		  /* 822173F0h */ case   12:  		/* rlwimi R9, R10, 0, 27, 31 */
		/* 822173F0h case   12:*/		cpu::op::rlwimi<0,0,27,31>(regs,&regs.R9,regs.R10);
		/* 822173F0h case   12:*/		return 0x822173F4;
	}
	return 0x822173F4;
} // Block from 822173C0h-822173F4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 822173F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822173F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822173F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822173F4);
		  /* 822173F4h */ case    0:  		/* stw R9, <#[R11 + 2]> */
		/* 822173F4h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 822173F4h case    0:*/		return 0x822173F8;
		  /* 822173F8h */ case    1:  		/* b 552 */
		/* 822173F8h case    1:*/		return 0x82217620;
		/* 822173F8h case    1:*/		return 0x822173FC;
	}
	return 0x822173FC;
} // Block from 822173F4h-822173FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 822173FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822173FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822173FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822173FC);
		  /* 822173FCh */ case    0:  		/* rlwinm. R11, R27, 0, 22, 22 */
		/* 822173FCh case    0:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R27);
		/* 822173FCh case    0:*/		return 0x82217400;
		  /* 82217400h */ case    1:  		/* bc 12, CR0_EQ, 96 */
		/* 82217400h case    1:*/		if ( regs.CR[0].eq ) { return 0x82217460;  }
		/* 82217400h case    1:*/		return 0x82217404;
		  /* 82217404h */ case    2:  		/* mulli R11, R31, 6 */
		/* 82217404h case    2:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R31,0x6);
		/* 82217404h case    2:*/		return 0x82217408;
		  /* 82217408h */ case    3:  		/* lwzu R9, <#[R17 - 4]> */
		/* 82217408h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R17 + 0xFFFFFFFC) );
		regs.R17 = (uint32)(regs.R17 + 0xFFFFFFFC);
		/* 82217408h case    3:*/		return 0x8221740C;
		  /* 8221740Ch */ case    4:  		/* lwzu R10, <#[R19 - 4]> */
		/* 8221740Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0xFFFFFFFC) );
		regs.R19 = (uint32)(regs.R19 + 0xFFFFFFFC);
		/* 8221740Ch case    4:*/		return 0x82217410;
		  /* 82217410h */ case    5:  		/* add R11, R11, R23 */
		/* 82217410h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R23);
		/* 82217410h case    5:*/		return 0x82217414;
		  /* 82217414h */ case    6:  		/* rlwinm R8, R18, 27, 0, 4 */
		/* 82217414h case    6:*/		cpu::op::rlwinm<0,27,0,4>(regs,&regs.R8,regs.R18);
		/* 82217414h case    6:*/		return 0x82217418;
		  /* 82217418h */ case    7:  		/* mulli R10, R10, 6 */
		/* 82217418h case    7:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x6);
		/* 82217418h case    7:*/		return 0x8221741C;
		  /* 8221741Ch */ case    8:  		/* lwz R7, <#[R11 + 2]> */
		/* 8221741Ch case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 8221741Ch case    8:*/		return 0x82217420;
		  /* 82217420h */ case    9:  		/* lhz R6, <#[R11]> */
		/* 82217420h case    9:*/		cpu::mem::load16z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82217420h case    9:*/		return 0x82217424;
		  /* 82217424h */ case   10:  		/* rlwinm R7, R7, 0, 6, 25 */
		/* 82217424h case   10:*/		cpu::op::rlwinm<0,0,6,25>(regs,&regs.R7,regs.R7);
		/* 82217424h case   10:*/		return 0x82217428;
		  /* 82217428h */ case   11:  		/* rlwimi R6, R9, 3, 0, 28 */
		/* 82217428h case   11:*/		cpu::op::rlwimi<0,3,0,28>(regs,&regs.R6,regs.R9);
		/* 82217428h case   11:*/		return 0x8221742C;
		  /* 8221742Ch */ case   12:  		/* rlwinm R7, R7, 0, 20, 17 */
		/* 8221742Ch case   12:*/		cpu::op::rlwinm<0,0,20,17>(regs,&regs.R7,regs.R7);
		/* 8221742Ch case   12:*/		return 0x82217430;
		  /* 82217430h */ case   13:  		/* sth R6, <#[R11]> */
		/* 82217430h case   13:*/		cpu::mem::store16( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82217430h case   13:*/		return 0x82217434;
		  /* 82217434h */ case   14:  		/* or R9, R7, R8 */
		/* 82217434h case   14:*/		cpu::op::or<0>(regs,&regs.R9,regs.R7,regs.R8);
		/* 82217434h case   14:*/		return 0x82217438;
		  /* 82217438h */ case   15:  		/* addi R7, R31, 1 */
		/* 82217438h case   15:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R31,0x1);
		/* 82217438h case   15:*/		return 0x8221743C;
		  /* 8221743Ch */ case   16:  		/* rlwinm R9, R9, 0, 20, 17 */
		/* 8221743Ch case   16:*/		cpu::op::rlwinm<0,0,20,17>(regs,&regs.R9,regs.R9);
		/* 8221743Ch case   16:*/		return 0x82217440;
		  /* 82217440h */ case   17:  		/* rlwinm R9, R9, 0, 6, 4 */
		/* 82217440h case   17:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R9,regs.R9);
		/* 82217440h case   17:*/		return 0x82217444;
		  /* 82217444h */ case   18:  		/* ori R9, R9, 40 */
		/* 82217444h case   18:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x28);
		/* 82217444h case   18:*/		return 0x82217448;
		  /* 82217448h */ case   19:  		/* stw R9, <#[R11 + 2]> */
		/* 82217448h case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82217448h case   19:*/		return 0x8221744C;
		  /* 8221744Ch */ case   20:  		/* lhzx R11, <#[R10 + R23]> */
		/* 8221744Ch case   20:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R10 + regs.R23 + 0x00000000) );
		/* 8221744Ch case   20:*/		return 0x82217450;
		  /* 82217450h */ case   21:  		/* rlwimi R11, R7, 3, 16, 28 */
		/* 82217450h case   21:*/		cpu::op::rlwimi<0,3,16,28>(regs,&regs.R11,regs.R7);
		/* 82217450h case   21:*/		return 0x82217454;
	}
	return 0x82217454;
} // Block from 822173FCh-82217454h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82217454h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217454( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217454) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217454);
		  /* 82217454h */ case    0:  		/* addi R31, R31, 1 */
		/* 82217454h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82217454h case    0:*/		return 0x82217458;
		  /* 82217458h */ case    1:  		/* sthx R11, <#[R10 + R23]> */
		/* 82217458h case    1:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R10 + regs.R23 + 0x00000000) );
		/* 82217458h case    1:*/		return 0x8221745C;
		  /* 8221745Ch */ case    2:  		/* b 452 */
		/* 8221745Ch case    2:*/		return 0x82217620;
		/* 8221745Ch case    2:*/		return 0x82217460;
	}
	return 0x82217460;
} // Block from 82217454h-82217460h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82217460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217460);
		  /* 82217460h */ case    0:  		/* li R7, 12655 */
		/* 82217460h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x316F);
		/* 82217460h case    0:*/		return 0x82217464;
		  /* 82217464h */ case    1:  		/* lwz R6, <#[R1 + 84]> */
		/* 82217464h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 82217464h case    1:*/		return 0x82217468;
		  /* 82217468h */ case    2:  		/* li R3, 0 */
		/* 82217468h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82217468h case    2:*/		return 0x8221746C;
		  /* 8221746Ch */ case    3:  		/* lwz R5, <#[R1 + 112]> */
		/* 8221746Ch case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 8221746Ch case    3:*/		return 0x82217470;
		  /* 82217470h */ case    4:  		/* lwz R4, <#[R1 + 88]> */
		/* 82217470h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 82217470h case    4:*/		return 0x82217474;
		  /* 82217474h */ case    5:  		/* bl -784492 */
		/* 82217474h case    5:*/		regs.LR = 0x82217478; return 0x82157C08;
		/* 82217474h case    5:*/		return 0x82217478;
		  /* 82217478h */ case    6:  		/* b 424 */
		/* 82217478h case    6:*/		return 0x82217620;
		/* 82217478h case    6:*/		return 0x8221747C;
	}
	return 0x8221747C;
} // Block from 82217460h-8221747Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221747Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221747C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221747C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221747C);
		  /* 8221747Ch */ case    0:  		/* lwz R11, <#[R1 + 144]> */
		/* 8221747Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 8221747Ch case    0:*/		return 0x82217480;
		  /* 82217480h */ case    1:  		/* li R3, 0 */
		/* 82217480h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82217480h case    1:*/		return 0x82217484;
		  /* 82217484h */ case    2:  		/* stw R15, <#[R1 + 80]> */
		/* 82217484h case    2:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R1 + 0x00000050) );
		/* 82217484h case    2:*/		return 0x82217488;
		  /* 82217488h */ case    3:  		/* subf R11, R28, R11 */
		/* 82217488h case    3:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R28,regs.R11);
		/* 82217488h case    3:*/		return 0x8221748C;
		  /* 8221748Ch */ case    4:  		/* add. R4, R11, R14 */
		/* 8221748Ch case    4:*/		cpu::op::add<1>(regs,&regs.R4,regs.R11,regs.R14);
		/* 8221748Ch case    4:*/		return 0x82217490;
		  /* 82217490h */ case    5:  		/* bc 12, CR0_EQ, 400 */
		/* 82217490h case    5:*/		if ( regs.CR[0].eq ) { return 0x82217620;  }
		/* 82217490h case    5:*/		return 0x82217494;
		  /* 82217494h */ case    6:  		/* lwz R29, <#[R1 + 104]> */
		/* 82217494h case    6:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000068) );
		/* 82217494h case    6:*/		return 0x82217498;
		  /* 82217498h */ case    7:  		/* mulli R11, R21, 12 */
		/* 82217498h case    7:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R21,0xC);
		/* 82217498h case    7:*/		return 0x8221749C;
		  /* 8221749Ch */ case    8:  		/* mulli R10, R31, 6 */
		/* 8221749Ch case    8:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R31,0x6);
		/* 8221749Ch case    8:*/		return 0x822174A0;
		  /* 822174A0h */ case    9:  		/* addi R9, R29, 902 */
		/* 822174A0h case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R29,0x386);
		/* 822174A0h case    9:*/		return 0x822174A4;
		  /* 822174A4h */ case   10:  		/* add R11, R11, R25 */
		/* 822174A4h case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R25);
		/* 822174A4h case   10:*/		return 0x822174A8;
		  /* 822174A8h */ case   11:  		/* add R10, R10, R23 */
		/* 822174A8h case   11:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R23);
		/* 822174A8h case   11:*/		return 0x822174AC;
		  /* 822174ACh */ case   12:  		/* mulli R9, R9, 12 */
		/* 822174ACh case   12:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R9,0xC);
		/* 822174ACh case   12:*/		return 0x822174B0;
		  /* 822174B0h */ case   13:  		/* addi R7, R11, 16 */
		/* 822174B0h case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x10);
		/* 822174B0h case   13:*/		return 0x822174B4;
		  /* 822174B4h */ case   14:  		/* mulli R8, R22, 12 */
		/* 822174B4h case   14:*/		cpu::op::mulli<0>(regs,&regs.R8,regs.R22,0xC);
		/* 822174B4h case   14:*/		return 0x822174B8;
		  /* 822174B8h */ case   15:  		/* addi R11, R10, 2 */
		/* 822174B8h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x2);
		/* 822174B8h case   15:*/		return 0x822174BC;
		  /* 822174BCh */ case   16:  		/* add R6, R9, R25 */
		/* 822174BCh case   16:*/		cpu::op::add<0>(regs,&regs.R6,regs.R9,regs.R25);
		/* 822174BCh case   16:*/		return 0x822174C0;
		  /* 822174C0h */ case   17:  		/* mr R30, R4 */
		/* 822174C0h case   17:*/		regs.R30 = regs.R4;
		/* 822174C0h case   17:*/		return 0x822174C4;
		  /* 822174C4h */ case   18:  		/* li R10, 6 */
		/* 822174C4h case   18:*/		cpu::op::li<0>(regs,&regs.R10,0x6);
		/* 822174C4h case   18:*/		return 0x822174C8;
		  /* 822174C8h */ case   19:  		/* divwu R10, R3, R10 */
		/* 822174C8h case   19:*/		cpu::op::divwu<0>(regs,&regs.R10,regs.R3,regs.R10);
		/* 822174C8h case   19:*/		return 0x822174CC;
		  /* 822174CCh */ case   20:  		/* mulli R10, R10, 6 */
		/* 822174CCh case   20:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x6);
		/* 822174CCh case   20:*/		return 0x822174D0;
		  /* 822174D0h */ case   21:  		/* subf. R5, R10, R3 */
		/* 822174D0h case   21:*/		cpu::op::subf<1>(regs,&regs.R5,regs.R10,regs.R3);
		/* 822174D0h case   21:*/		return 0x822174D4;
		  /* 822174D4h */ case   22:  		/* bc 4, CR0_EQ, 68 */
		/* 822174D4h case   22:*/		if ( !regs.CR[0].eq ) { return 0x82217518;  }
		/* 822174D4h case   22:*/		return 0x822174D8;
		  /* 822174D8h */ case   23:  		/* lhz R10, <#[R11 - 2]> */
		/* 822174D8h case   23:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFFE) );
		/* 822174D8h case   23:*/		return 0x822174DC;
		  /* 822174DCh */ case   24:  		/* subf R9, R3, R4 */
		/* 822174DCh case   24:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R3,regs.R4);
		/* 822174DCh case   24:*/		return 0x822174E0;
		  /* 822174E0h */ case   25:  		/* lwz R26, <#[R11]> */
		/* 822174E0h case   25:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + 0x00000000) );
		/* 822174E0h case   25:*/		return 0x822174E4;
		  /* 822174E4h */ case   26:  		/* rlwimi R10, R22, 4, 0, 27 */
		/* 822174E4h case   26:*/		cpu::op::rlwimi<0,4,0,27>(regs,&regs.R10,regs.R22);
		/* 822174E4h case   26:*/		return 0x822174E8;
		  /* 822174E8h */ case   27:  		/* rlwinm R26, R26, 0, 12, 27 */
		/* 822174E8h case   27:*/		cpu::op::rlwinm<0,0,12,27>(regs,&regs.R26,regs.R26);
		/* 822174E8h case   27:*/		return 0x822174EC;
		  /* 822174ECh */ case   28:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 822174ECh case   28:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 822174ECh case   28:*/		return 0x822174F0;
		  /* 822174F0h */ case   29:  		/* ori R26, R26, 1 */
		/* 822174F0h case   29:*/		cpu::op::ori<0>(regs,&regs.R26,regs.R26,0x1);
		/* 822174F0h case   29:*/		return 0x822174F4;
		  /* 822174F4h */ case   30:  		/* cmplwi CR6, R9, 6 */
		/* 822174F4h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000006);
		/* 822174F4h case   30:*/		return 0x822174F8;
		  /* 822174F8h */ case   31:  		/* sth R10, <#[R11 - 2]> */
		/* 822174F8h case   31:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0xFFFFFFFE) );
		/* 822174F8h case   31:*/		return 0x822174FC;
		  /* 822174FCh */ case   32:  		/* stw R26, <#[R11]> */
		/* 822174FCh case   32:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + 0x00000000) );
		/* 822174FCh case   32:*/		return 0x82217500;
		  /* 82217500h */ case   33:  		/* bc 12, CR6_LT, 16 */
		/* 82217500h case   33:*/		if ( regs.CR[6].lt ) { return 0x82217510;  }
		/* 82217500h case   33:*/		return 0x82217504;
		  /* 82217504h */ case   34:  		/* rlwinm R10, R10, 0, 16, 27 */
		/* 82217504h case   34:*/		cpu::op::rlwinm<0,0,16,27>(regs,&regs.R10,regs.R10);
		/* 82217504h case   34:*/		return 0x82217508;
		  /* 82217508h */ case   35:  		/* ori R10, R10, 6 */
		/* 82217508h case   35:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x6);
		/* 82217508h case   35:*/		return 0x8221750C;
		  /* 8221750Ch */ case   36:  		/* b 8 */
		/* 8221750Ch case   36:*/		return 0x82217514;
		/* 8221750Ch case   36:*/		return 0x82217510;
	}
	return 0x82217510;
} // Block from 8221747Ch-82217510h (37 instructions)

//////////////////////////////////////////////////////
// Block at 82217510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217510);
		  /* 82217510h */ case    0:  		/* rlwimi R10, R9, 0, 28, 31 */
		/* 82217510h case    0:*/		cpu::op::rlwimi<0,0,28,31>(regs,&regs.R10,regs.R9);
		/* 82217510h case    0:*/		return 0x82217514;
	}
	return 0x82217514;
} // Block from 82217510h-82217514h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82217514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217514);
		  /* 82217514h */ case    0:  		/* sth R10, <#[R11 - 2]> */
		/* 82217514h case    0:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0xFFFFFFFE) );
		/* 82217514h case    0:*/		return 0x82217518;
	}
	return 0x82217518;
} // Block from 82217514h-82217518h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82217518h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217518);
		  /* 82217518h */ case    0:  		/* add R10, R3, R28 */
		/* 82217518h case    0:*/		cpu::op::add<0>(regs,&regs.R10,regs.R3,regs.R28);
		/* 82217518h case    0:*/		return 0x8221751C;
		  /* 8221751Ch */ case    1:  		/* cmplw CR6, R10, R18 */
		/* 8221751Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R18);
		/* 8221751Ch case    1:*/		return 0x82217520;
		  /* 82217520h */ case    2:  		/* bc 12, CR6_LT, 132 */
		/* 82217520h case    2:*/		if ( regs.CR[6].lt ) { return 0x822175A4;  }
		/* 82217520h case    2:*/		return 0x82217524;
		  /* 82217524h */ case    3:  		/* add R9, R14, R18 */
		/* 82217524h case    3:*/		cpu::op::add<0>(regs,&regs.R9,regs.R14,regs.R18);
		/* 82217524h case    3:*/		return 0x82217528;
		  /* 82217528h */ case    4:  		/* cmplw CR6, R10, R9 */
		/* 82217528h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82217528h case    4:*/		return 0x8221752C;
		  /* 8221752Ch */ case    5:  		/* bc 4, CR6_LT, 120 */
		/* 8221752Ch case    5:*/		if ( !regs.CR[6].lt ) { return 0x822175A4;  }
		/* 8221752Ch case    5:*/		return 0x82217530;
		  /* 82217530h */ case    6:  		/* cmplw CR6, R10, R18 */
		/* 82217530h case    6:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R18);
		/* 82217530h case    6:*/		return 0x82217534;
		  /* 82217534h */ case    7:  		/* lwz R9, <#[R11]> */
		/* 82217534h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82217534h case    7:*/		return 0x82217538;
		  /* 82217538h */ case    8:  		/* rlwinm R10, R5, 1, 0, 30 */
		/* 82217538h case    8:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R5);
		/* 82217538h case    8:*/		return 0x8221753C;
		  /* 8221753Ch */ case    9:  		/* bc 4, CR6_EQ, 16 */
		/* 8221753Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8221754C;  }
		/* 8221753Ch case    9:*/		return 0x82217540;
		  /* 82217540h */ case   10:  		/* li R26, 3 */
		/* 82217540h case   10:*/		cpu::op::li<0>(regs,&regs.R26,0x3);
		/* 82217540h case   10:*/		return 0x82217544;
		  /* 82217544h */ case   11:  		/* slw R10, R26, R10 */
		/* 82217544h case   11:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R26,regs.R10);
		/* 82217544h case   11:*/		return 0x82217548;
		  /* 82217548h */ case   12:  		/* b 8 */
		/* 82217548h case   12:*/		return 0x82217550;
		/* 82217548h case   12:*/		return 0x8221754C;
	}
	return 0x8221754C;
} // Block from 82217518h-8221754Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8221754Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221754C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221754C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221754C);
		  /* 8221754Ch */ case    0:  		/* slw R10, R15, R10 */
		/* 8221754Ch case    0:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R15,regs.R10);
		/* 8221754Ch case    0:*/		return 0x82217550;
	}
	return 0x82217550;
} // Block from 8221754Ch-82217550h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82217550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217550);
		  /* 82217550h */ case    0:  		/* rlwinm R10, R10, 20, 0, 11 */
		/* 82217550h case    0:*/		cpu::op::rlwinm<0,20,0,11>(regs,&regs.R10,regs.R10);
		/* 82217550h case    0:*/		return 0x82217554;
		  /* 82217554h */ case    1:  		/* or R10, R10, R9 */
		/* 82217554h case    1:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82217554h case    1:*/		return 0x82217558;
		  /* 82217558h */ case    2:  		/* rlwimi R10, R9, 0, 12, 31 */
		/* 82217558h case    2:*/		cpu::op::rlwimi<0,0,12,31>(regs,&regs.R10,regs.R9);
		/* 82217558h case    2:*/		return 0x8221755C;
		  /* 8221755Ch */ case    3:  		/* stw R10, <#[R11]> */
		/* 8221755Ch case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221755Ch case    3:*/		return 0x82217560;
		  /* 82217560h */ case    4:  		/* rlwinm. R10, R27, 0, 15, 15 */
		/* 82217560h case    4:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R10,regs.R27);
		/* 82217560h case    4:*/		return 0x82217564;
		  /* 82217564h */ case    5:  		/* bc 12, CR0_EQ, 24 */
		/* 82217564h case    5:*/		if ( regs.CR[0].eq ) { return 0x8221757C;  }
		/* 82217564h case    5:*/		return 0x82217568;
		  /* 82217568h */ case    6:  		/* slw R10, R15, R5 */
		/* 82217568h case    6:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R15,regs.R5);
		/* 82217568h case    6:*/		return 0x8221756C;
		  /* 8221756Ch */ case    7:  		/* lwz R9, <#[R11]> */
		/* 8221756Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221756Ch case    7:*/		return 0x82217570;
		  /* 82217570h */ case    8:  		/* rlwinm R10, R10, 14, 12, 17 */
		/* 82217570h case    8:*/		cpu::op::rlwinm<0,14,12,17>(regs,&regs.R10,regs.R10);
		/* 82217570h case    8:*/		return 0x82217574;
		  /* 82217574h */ case    9:  		/* or R10, R10, R9 */
		/* 82217574h case    9:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82217574h case    9:*/		return 0x82217578;
		  /* 82217578h */ case   10:  		/* stw R10, <#[R11]> */
		/* 82217578h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82217578h case   10:*/		return 0x8221757C;
	}
	return 0x8221757C;
} // Block from 82217550h-8221757Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8221757Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221757C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221757C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221757C);
		  /* 8221757Ch */ case    0:  		/* lwz R10, <#[R25 + 12424]> */
		/* 8221757Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00003088) );
		/* 8221757Ch case    0:*/		return 0x82217580;
		  /* 82217580h */ case    1:  		/* addi R29, R29, 1 */
		/* 82217580h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82217580h case    1:*/		return 0x82217584;
		  /* 82217584h */ case    2:  		/* lwz R9, <#[R6]> */
		/* 82217584h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R6 + 0x00000000) );
		/* 82217584h case    2:*/		return 0x82217588;
		  /* 82217588h */ case    3:  		/* add R10, R8, R10 */
		/* 82217588h case    3:*/		cpu::op::add<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 82217588h case    3:*/		return 0x8221758C;
		  /* 8221758Ch */ case    4:  		/* stw R9, <#[R10]> */
		/* 8221758Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8221758Ch case    4:*/		return 0x82217590;
		  /* 82217590h */ case    5:  		/* lwz R9, <#[R6 + 4]> */
		/* 82217590h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R6 + 0x00000004) );
		/* 82217590h case    5:*/		return 0x82217594;
		  /* 82217594h */ case    6:  		/* stw R9, <#[R10 + 4]> */
		/* 82217594h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 82217594h case    6:*/		return 0x82217598;
		  /* 82217598h */ case    7:  		/* lwz R9, <#[R6 + 8]> */
		/* 82217598h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R6 + 0x00000008) );
		/* 82217598h case    7:*/		return 0x8221759C;
		  /* 8221759Ch */ case    8:  		/* addi R6, R6, 12 */
		/* 8221759Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0xC);
		/* 8221759Ch case    8:*/		return 0x822175A0;
		  /* 822175A0h */ case    9:  		/* b 72 */
		/* 822175A0h case    9:*/		return 0x822175E8;
		/* 822175A0h case    9:*/		return 0x822175A4;
	}
	return 0x822175A4;
} // Block from 8221757Ch-822175A4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 822175A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822175A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822175A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822175A4);
		  /* 822175A4h */ case    0:  		/* rlwinm R10, R5, 1, 0, 30 */
		/* 822175A4h case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R5);
		/* 822175A4h case    0:*/		return 0x822175A8;
		  /* 822175A8h */ case    1:  		/* lwz R9, <#[R11]> */
		/* 822175A8h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822175A8h case    1:*/		return 0x822175AC;
		  /* 822175ACh */ case    2:  		/* li R26, 2 */
		/* 822175ACh case    2:*/		cpu::op::li<0>(regs,&regs.R26,0x2);
		/* 822175ACh case    2:*/		return 0x822175B0;
		  /* 822175B0h */ case    3:  		/* addi R21, R21, 1 */
		/* 822175B0h case    3:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x1);
		/* 822175B0h case    3:*/		return 0x822175B4;
		  /* 822175B4h */ case    4:  		/* slw R10, R26, R10 */
		/* 822175B4h case    4:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R26,regs.R10);
		/* 822175B4h case    4:*/		return 0x822175B8;
		  /* 822175B8h */ case    5:  		/* rlwinm R10, R10, 20, 0, 11 */
		/* 822175B8h case    5:*/		cpu::op::rlwinm<0,20,0,11>(regs,&regs.R10,regs.R10);
		/* 822175B8h case    5:*/		return 0x822175BC;
		  /* 822175BCh */ case    6:  		/* or R10, R10, R9 */
		/* 822175BCh case    6:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 822175BCh case    6:*/		return 0x822175C0;
		  /* 822175C0h */ case    7:  		/* rlwimi R10, R9, 0, 12, 31 */
		/* 822175C0h case    7:*/		cpu::op::rlwimi<0,0,12,31>(regs,&regs.R10,regs.R9);
		/* 822175C0h case    7:*/		return 0x822175C4;
		  /* 822175C4h */ case    8:  		/* stw R10, <#[R11]> */
		/* 822175C4h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822175C4h case    8:*/		return 0x822175C8;
		  /* 822175C8h */ case    9:  		/* lwz R9, <#[R7]> */
		/* 822175C8h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 822175C8h case    9:*/		return 0x822175CC;
		  /* 822175CCh */ case   10:  		/* lwz R10, <#[R25 + 12424]> */
		/* 822175CCh case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00003088) );
		/* 822175CCh case   10:*/		return 0x822175D0;
		  /* 822175D0h */ case   11:  		/* add R10, R8, R10 */
		/* 822175D0h case   11:*/		cpu::op::add<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 822175D0h case   11:*/		return 0x822175D4;
		  /* 822175D4h */ case   12:  		/* stw R9, <#[R10]> */
		/* 822175D4h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 822175D4h case   12:*/		return 0x822175D8;
		  /* 822175D8h */ case   13:  		/* lwz R9, <#[R7 + 4]> */
		/* 822175D8h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000004) );
		/* 822175D8h case   13:*/		return 0x822175DC;
		  /* 822175DCh */ case   14:  		/* stw R9, <#[R10 + 4]> */
		/* 822175DCh case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 822175DCh case   14:*/		return 0x822175E0;
		  /* 822175E0h */ case   15:  		/* lwz R9, <#[R7 + 8]> */
		/* 822175E0h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000008) );
		/* 822175E0h case   15:*/		return 0x822175E4;
		  /* 822175E4h */ case   16:  		/* addi R7, R7, 12 */
		/* 822175E4h case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0xC);
		/* 822175E4h case   16:*/		return 0x822175E8;
	}
	return 0x822175E8;
} // Block from 822175A4h-822175E8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 822175E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822175E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822175E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822175E8);
		  /* 822175E8h */ case    0:  		/* stw R9, <#[R10 + 8]> */
		/* 822175E8h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 822175E8h case    0:*/		return 0x822175EC;
		  /* 822175ECh */ case    1:  		/* addi R8, R8, 12 */
		/* 822175ECh case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xC);
		/* 822175ECh case    1:*/		return 0x822175F0;
		  /* 822175F0h */ case    2:  		/* addi R22, R22, 1 */
		/* 822175F0h case    2:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 822175F0h case    2:*/		return 0x822175F4;
		  /* 822175F4h */ case    3:  		/* cmplwi CR6, R5, 5 */
		/* 822175F4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000005);
		/* 822175F4h case    3:*/		return 0x822175F8;
	}
	return 0x822175F8;
} // Block from 822175E8h-822175F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822175F8h
// Function '?DoDCLV@XGRAPHICS@@YAXPAU_XLT_CONTEXT@1@PATIL_Dst@1@PATIL_Dst_Mod@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822175F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822175F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822175F8);
		  /* 822175F8h */ case    0:  		/* bc 12, CR6_EQ, 16 */
		/* 822175F8h case    0:*/		if ( regs.CR[6].eq ) { return 0x82217608;  }
		/* 822175F8h case    0:*/		return 0x822175FC;
		  /* 822175FCh */ case    1:  		/* addi R10, R4, -1 */
		/* 822175FCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R4,0xFFFFFFFF);
		/* 822175FCh case    1:*/		return 0x82217600;
		  /* 82217600h */ case    2:  		/* cmplw CR6, R3, R10 */
		/* 82217600h case    2:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R10);
		/* 82217600h case    2:*/		return 0x82217604;
		  /* 82217604h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 82217604h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82217610;  }
		/* 82217604h case    3:*/		return 0x82217608;
	}
	return 0x82217608;
} // Block from 822175F8h-82217608h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82217608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217608);
		  /* 82217608h */ case    0:  		/* addi R31, R31, 1 */
		/* 82217608h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82217608h case    0:*/		return 0x8221760C;
		  /* 8221760Ch */ case    1:  		/* addi R11, R11, 6 */
		/* 8221760Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x6);
		/* 8221760Ch case    1:*/		return 0x82217610;
	}
	return 0x82217610;
} // Block from 82217608h-82217610h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82217610h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217610( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217610) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217610);
		  /* 82217610h */ case    0:  		/* addic. R30, R30, -1 */
		/* 82217610h case    0:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 82217610h case    0:*/		return 0x82217614;
		  /* 82217614h */ case    1:  		/* addi R3, R3, 1 */
		/* 82217614h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x1);
		/* 82217614h case    1:*/		return 0x82217618;
		  /* 82217618h */ case    2:  		/* bc 4, CR0_EQ, -340 */
		/* 82217618h case    2:*/		if ( !regs.CR[0].eq ) { return 0x822174C4;  }
		/* 82217618h case    2:*/		return 0x8221761C;
		  /* 8221761Ch */ case    3:  		/* stw R29, <#[R1 + 104]> */
		/* 8221761Ch case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000068) );
		/* 8221761Ch case    3:*/		return 0x82217620;
	}
	return 0x82217620;
} // Block from 82217610h-82217620h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82217620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217620);
		  /* 82217620h */ case    0:  		/* lwz R10, <#[R16 + 8]> */
		/* 82217620h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x00000008) );
		/* 82217620h case    0:*/		return 0x82217624;
		  /* 82217624h */ case    1:  		/* li R11, 0 */
		/* 82217624h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82217624h case    1:*/		return 0x82217628;
		  /* 82217628h */ case    2:  		/* lwz R30, <#[R16]> */
		/* 82217628h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R16 + 0x00000000) );
		/* 82217628h case    2:*/		return 0x8221762C;
		  /* 8221762Ch */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 8221762Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8221762Ch case    3:*/		return 0x82217630;
		  /* 82217630h */ case    4:  		/* bc 12, CR6_EQ, 64 */
		/* 82217630h case    4:*/		if ( regs.CR[6].eq ) { return 0x82217670;  }
		/* 82217630h case    4:*/		return 0x82217634;
		  /* 82217634h */ case    5:  		/* addi R3, R1, 128 */
		/* 82217634h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 82217634h case    5:*/		return 0x82217638;
		  /* 82217638h */ case    6:  		/* li R5, 24 */
		/* 82217638h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x18);
		/* 82217638h case    6:*/		return 0x8221763C;
		  /* 8221763Ch */ case    7:  		/* mr R4, R30 */
		/* 8221763Ch case    7:*/		regs.R4 = regs.R30;
		/* 8221763Ch case    7:*/		return 0x82217640;
		  /* 82217640h */ case    8:  		/* bl -1596560 */
		/* 82217640h case    8:*/		regs.LR = 0x82217644; return 0x820919B0;
		/* 82217640h case    8:*/		return 0x82217644;
		  /* 82217644h */ case    9:  		/* lwz R10, <#[R30 + 20]> */
		/* 82217644h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000014) );
		/* 82217644h case    9:*/		return 0x82217648;
		  /* 82217648h */ case   10:  		/* lwz R11, <#[R1 + 724]> */
		/* 82217648h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000002D4) );
		/* 82217648h case   10:*/		return 0x8221764C;
		  /* 8221764Ch */ case   11:  		/* mr R4, R30 */
		/* 8221764Ch case   11:*/		regs.R4 = regs.R30;
		/* 8221764Ch case   11:*/		return 0x82217650;
		  /* 82217650h */ case   12:  		/* stw R10, <#[R16]> */
		/* 82217650h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R16 + 0x00000000) );
		/* 82217650h case   12:*/		return 0x82217654;
		  /* 82217654h */ case   13:  		/* lwz R3, <#[R11]> */
		/* 82217654h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82217654h case   13:*/		return 0x82217658;
		  /* 82217658h */ case   14:  		/* lwz R11, <#[R11 + 8]> */
		/* 82217658h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82217658h case   14:*/		return 0x8221765C;
		  /* 8221765Ch */ case   15:  		/* mtspr CTR, R11 */
		/* 8221765Ch case   15:*/		regs.CTR = regs.R11;
		/* 8221765Ch case   15:*/		return 0x82217660;
		  /* 82217660h */ case   16:  		/* bcctrl 20, CR0_LT */
		/* 82217660h case   16:*/		if ( 1 ) { regs.LR = 0x82217664; return (uint32)regs.CTR; }
		/* 82217660h case   16:*/		return 0x82217664;
		  /* 82217664h */ case   17:  		/* lwz R14, <#[R1 + 140]> */
		/* 82217664h case   17:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R1 + 0x0000008C) );
		/* 82217664h case   17:*/		return 0x82217668;
		  /* 82217668h */ case   18:  		/* mr R11, R15 */
		/* 82217668h case   18:*/		regs.R11 = regs.R15;
		/* 82217668h case   18:*/		return 0x8221766C;
		  /* 8221766Ch */ case   19:  		/* lwz R18, <#[R1 + 136]> */
		/* 8221766Ch case   19:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x00000088) );
		/* 8221766Ch case   19:*/		return 0x82217670;
	}
	return 0x82217670;
} // Block from 82217620h-82217670h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82217670h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217670);
		  /* 82217670h */ case    0:  		/* lwz R10, <#[R16 + 8]> */
		/* 82217670h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x00000008) );
		/* 82217670h case    0:*/		return 0x82217674;
		  /* 82217674h */ case    1:  		/* mr R20, R11 */
		/* 82217674h case    1:*/		regs.R20 = regs.R11;
		/* 82217674h case    1:*/		return 0x82217678;
		  /* 82217678h */ case    2:  		/* addi R11, R10, -1 */
		/* 82217678h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFFFFF);
		/* 82217678h case    2:*/		return 0x8221767C;
		  /* 8221767Ch */ case    3:  		/* stw R11, <#[R16 + 8]> */
		/* 8221767Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 8221767Ch case    3:*/		return 0x82217680;
		  /* 82217680h */ case    4:  		/* b 648 */
		/* 82217680h case    4:*/		return 0x82217908;
		/* 82217680h case    4:*/		return 0x82217684;
	}
	return 0x82217684;
} // Block from 82217670h-82217684h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82217684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217684);
		  /* 82217684h */ case    0:  		/* subf. R27, R21, R28 */
		/* 82217684h case    0:*/		cpu::op::subf<1>(regs,&regs.R27,regs.R21,regs.R28);
		/* 82217684h case    0:*/		return 0x82217688;
		  /* 82217688h */ case    1:  		/* li R24, 0 */
		/* 82217688h case    1:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 82217688h case    1:*/		return 0x8221768C;
		  /* 8221768Ch */ case    2:  		/* bc 12, CR0_EQ, 636 */
		/* 8221768Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x82217908;  }
		/* 8221768Ch case    2:*/		return 0x82217690;
		  /* 82217690h */ case    3:  		/* mulli R11, R21, 12 */
		/* 82217690h case    3:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R21,0xC);
		/* 82217690h case    3:*/		return 0x82217694;
		  /* 82217694h */ case    4:  		/* mulli R10, R31, 6 */
		/* 82217694h case    4:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R31,0x6);
		/* 82217694h case    4:*/		return 0x82217698;
		  /* 82217698h */ case    5:  		/* add R11, R11, R25 */
		/* 82217698h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R25);
		/* 82217698h case    5:*/		return 0x8221769C;
		  /* 8221769Ch */ case    6:  		/* add R10, R10, R23 */
		/* 8221769Ch case    6:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R23);
		/* 8221769Ch case    6:*/		return 0x822176A0;
		  /* 822176A0h */ case    7:  		/* mulli R26, R22, 12 */
		/* 822176A0h case    7:*/		cpu::op::mulli<0>(regs,&regs.R26,regs.R22,0xC);
		/* 822176A0h case    7:*/		return 0x822176A4;
		  /* 822176A4h */ case    8:  		/* addi R29, R11, 16 */
		/* 822176A4h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x10);
		/* 822176A4h case    8:*/		return 0x822176A8;
		  /* 822176A8h */ case    9:  		/* addi R30, R10, 2 */
		/* 822176A8h case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R10,0x2);
		/* 822176A8h case    9:*/		return 0x822176AC;
		  /* 822176ACh */ case   10:  		/* add R21, R27, R21 */
		/* 822176ACh case   10:*/		cpu::op::add<0>(regs,&regs.R21,regs.R27,regs.R21);
		/* 822176ACh case   10:*/		return 0x822176B0;
		  /* 822176B0h */ case   11:  		/* li R11, 6 */
		/* 822176B0h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 822176B0h case   11:*/		return 0x822176B4;
		  /* 822176B4h */ case   12:  		/* divwu R11, R24, R11 */
		/* 822176B4h case   12:*/		cpu::op::divwu<0>(regs,&regs.R11,regs.R24,regs.R11);
		/* 822176B4h case   12:*/		return 0x822176B8;
		  /* 822176B8h */ case   13:  		/* mulli R11, R11, 6 */
		/* 822176B8h case   13:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x6);
		/* 822176B8h case   13:*/		return 0x822176BC;
		  /* 822176BCh */ case   14:  		/* subf. R28, R11, R24 */
		/* 822176BCh case   14:*/		cpu::op::subf<1>(regs,&regs.R28,regs.R11,regs.R24);
		/* 822176BCh case   14:*/		return 0x822176C0;
		  /* 822176C0h */ case   15:  		/* bc 4, CR0_EQ, 68 */
		/* 822176C0h case   15:*/		if ( !regs.CR[0].eq ) { return 0x82217704;  }
		/* 822176C0h case   15:*/		return 0x822176C4;
		  /* 822176C4h */ case   16:  		/* lhz R11, <#[R30 - 2]> */
		/* 822176C4h case   16:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R30 + 0xFFFFFFFE) );
		/* 822176C4h case   16:*/		return 0x822176C8;
		  /* 822176C8h */ case   17:  		/* subf R10, R24, R27 */
		/* 822176C8h case   17:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R24,regs.R27);
		/* 822176C8h case   17:*/		return 0x822176CC;
		  /* 822176CCh */ case   18:  		/* lwz R9, <#[R30]> */
		/* 822176CCh case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 822176CCh case   18:*/		return 0x822176D0;
		  /* 822176D0h */ case   19:  		/* rlwimi R11, R22, 4, 0, 27 */
		/* 822176D0h case   19:*/		cpu::op::rlwimi<0,4,0,27>(regs,&regs.R11,regs.R22);
		/* 822176D0h case   19:*/		return 0x822176D4;
		  /* 822176D4h */ case   20:  		/* rlwinm R9, R9, 0, 12, 27 */
		/* 822176D4h case   20:*/		cpu::op::rlwinm<0,0,12,27>(regs,&regs.R9,regs.R9);
		/* 822176D4h case   20:*/		return 0x822176D8;
		  /* 822176D8h */ case   21:  		/* rlwinm R11, R11, 0, 16, 31 */
		/* 822176D8h case   21:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R11);
		/* 822176D8h case   21:*/		return 0x822176DC;
		  /* 822176DCh */ case   22:  		/* ori R9, R9, 1 */
		/* 822176DCh case   22:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x1);
		/* 822176DCh case   22:*/		return 0x822176E0;
		  /* 822176E0h */ case   23:  		/* cmplwi CR6, R10, 6 */
		/* 822176E0h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000006);
		/* 822176E0h case   23:*/		return 0x822176E4;
		  /* 822176E4h */ case   24:  		/* sth R11, <#[R30 - 2]> */
		/* 822176E4h case   24:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0xFFFFFFFE) );
		/* 822176E4h case   24:*/		return 0x822176E8;
		  /* 822176E8h */ case   25:  		/* stw R9, <#[R30]> */
		/* 822176E8h case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 822176E8h case   25:*/		return 0x822176EC;
		  /* 822176ECh */ case   26:  		/* bc 12, CR6_LT, 16 */
		/* 822176ECh case   26:*/		if ( regs.CR[6].lt ) { return 0x822176FC;  }
		/* 822176ECh case   26:*/		return 0x822176F0;
		  /* 822176F0h */ case   27:  		/* rlwinm R11, R11, 0, 16, 27 */
		/* 822176F0h case   27:*/		cpu::op::rlwinm<0,0,16,27>(regs,&regs.R11,regs.R11);
		/* 822176F0h case   27:*/		return 0x822176F4;
		  /* 822176F4h */ case   28:  		/* ori R11, R11, 6 */
		/* 822176F4h case   28:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x6);
		/* 822176F4h case   28:*/		return 0x822176F8;
		  /* 822176F8h */ case   29:  		/* b 8 */
		/* 822176F8h case   29:*/		return 0x82217700;
		/* 822176F8h case   29:*/		return 0x822176FC;
	}
	return 0x822176FC;
} // Block from 82217684h-822176FCh (30 instructions)

//////////////////////////////////////////////////////
// Block at 822176FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822176FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822176FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822176FC);
		  /* 822176FCh */ case    0:  		/* rlwimi R11, R10, 0, 28, 31 */
		/* 822176FCh case    0:*/		cpu::op::rlwimi<0,0,28,31>(regs,&regs.R11,regs.R10);
		/* 822176FCh case    0:*/		return 0x82217700;
	}
	return 0x82217700;
} // Block from 822176FCh-82217700h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82217700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217700);
		  /* 82217700h */ case    0:  		/* sth R11, <#[R30 - 2]> */
		/* 82217700h case    0:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0xFFFFFFFE) );
		/* 82217700h case    0:*/		return 0x82217704;
	}
	return 0x82217704;
} // Block from 82217700h-82217704h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82217704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217704);
		  /* 82217704h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 82217704h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82217704h case    0:*/		return 0x82217708;
		  /* 82217708h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82217708h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82217708h case    1:*/		return 0x8221770C;
		  /* 8221770Ch */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 8221770Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82217740;  }
		/* 8221770Ch case    2:*/		return 0x82217710;
		  /* 82217710h */ case    3:  		/* cmplwi CR6, R24, 0 */
		/* 82217710h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82217710h case    3:*/		return 0x82217714;
		  /* 82217714h */ case    4:  		/* bc 12, CR6_EQ, 28 */
		/* 82217714h case    4:*/		if ( regs.CR[6].eq ) { return 0x82217730;  }
		/* 82217714h case    4:*/		return 0x82217718;
		  /* 82217718h */ case    5:  		/* li R7, 12695 */
		/* 82217718h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x3197);
		/* 82217718h case    5:*/		return 0x8221771C;
		  /* 8221771Ch */ case    6:  		/* lwz R6, <#[R1 + 84]> */
		/* 8221771Ch case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 8221771Ch case    6:*/		return 0x82217720;
		  /* 82217720h */ case    7:  		/* li R3, 0 */
		/* 82217720h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82217720h case    7:*/		return 0x82217724;
		  /* 82217724h */ case    8:  		/* lwz R5, <#[R1 + 96]> */
		/* 82217724h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000060) );
		/* 82217724h case    8:*/		return 0x82217728;
	}
	return 0x82217728;
} // Block from 82217704h-82217728h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82217728h
// Function '?DoDCLPI@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@PAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217728);
		  /* 82217728h */ case    0:  		/* lwz R4, <#[R1 + 88]> */
		/* 82217728h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 82217728h case    0:*/		return 0x8221772C;
		  /* 8221772Ch */ case    1:  		/* bl -785188 */
		/* 8221772Ch case    1:*/		regs.LR = 0x82217730; return 0x82157C08;
		/* 8221772Ch case    1:*/		return 0x82217730;
	}
	return 0x82217730;
} // Block from 82217728h-82217730h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82217730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217730);
		  /* 82217730h */ case    0:  		/* li R8, 0 */
		/* 82217730h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82217730h case    0:*/		return 0x82217734;
		  /* 82217734h */ case    1:  		/* li R9, 2 */
		/* 82217734h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 82217734h case    1:*/		return 0x82217738;
		  /* 82217738h */ case    2:  		/* stw R8, <#[R1 + 80]> */
		/* 82217738h case    2:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000050) );
		/* 82217738h case    2:*/		return 0x8221773C;
		  /* 8221773Ch */ case    3:  		/* b 8 */
		/* 8221773Ch case    3:*/		return 0x82217744;
		/* 8221773Ch case    3:*/		return 0x82217740;
	}
	return 0x82217740;
} // Block from 82217730h-82217740h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82217740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217740);
		  /* 82217740h */ case    0:  		/* li R9, 0 */
		/* 82217740h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82217740h case    0:*/		return 0x82217744;
	}
	return 0x82217744;
} // Block from 82217740h-82217744h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82217744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217744);
		  /* 82217744h */ case    0:  		/* rlwinm R11, R28, 1, 0, 30 */
		/* 82217744h case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R28);
		/* 82217744h case    0:*/		return 0x82217748;
		  /* 82217748h */ case    1:  		/* lwz R10, <#[R30]> */
		/* 82217748h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 82217748h case    1:*/		return 0x8221774C;
		  /* 8221774Ch */ case    2:  		/* addi R22, R22, 1 */
		/* 8221774Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 8221774Ch case    2:*/		return 0x82217750;
		  /* 82217750h */ case    3:  		/* slw R11, R9, R11 */
		/* 82217750h case    3:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82217750h case    3:*/		return 0x82217754;
		  /* 82217754h */ case    4:  		/* rlwinm R11, R11, 20, 0, 11 */
		/* 82217754h case    4:*/		cpu::op::rlwinm<0,20,0,11>(regs,&regs.R11,regs.R11);
		/* 82217754h case    4:*/		return 0x82217758;
		  /* 82217758h */ case    5:  		/* cmplwi CR6, R28, 5 */
		/* 82217758h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000005);
		/* 82217758h case    5:*/		return 0x8221775C;
		  /* 8221775Ch */ case    6:  		/* or R11, R11, R10 */
		/* 8221775Ch case    6:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8221775Ch case    6:*/		return 0x82217760;
		  /* 82217760h */ case    7:  		/* rlwimi R11, R10, 0, 12, 31 */
		/* 82217760h case    7:*/		cpu::op::rlwimi<0,0,12,31>(regs,&regs.R11,regs.R10);
		/* 82217760h case    7:*/		return 0x82217764;
		  /* 82217764h */ case    8:  		/* stw R11, <#[R30]> */
		/* 82217764h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82217764h case    8:*/		return 0x82217768;
		  /* 82217768h */ case    9:  		/* lwz R10, <#[R29]> */
		/* 82217768h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 82217768h case    9:*/		return 0x8221776C;
		  /* 8221776Ch */ case   10:  		/* lwz R11, <#[R25 + 12424]> */
		/* 8221776Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00003088) );
		/* 8221776Ch case   10:*/		return 0x82217770;
		  /* 82217770h */ case   11:  		/* add R11, R11, R26 */
		/* 82217770h case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 82217770h case   11:*/		return 0x82217774;
		  /* 82217774h */ case   12:  		/* addi R26, R26, 12 */
		/* 82217774h case   12:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0xC);
		/* 82217774h case   12:*/		return 0x82217778;
		  /* 82217778h */ case   13:  		/* stw R10, <#[R11]> */
		/* 82217778h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82217778h case   13:*/		return 0x8221777C;
		  /* 8221777Ch */ case   14:  		/* lwz R10, <#[R29 + 4]> */
		/* 8221777Ch case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000004) );
		/* 8221777Ch case   14:*/		return 0x82217780;
		  /* 82217780h */ case   15:  		/* stw R10, <#[R11 + 4]> */
		/* 82217780h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82217780h case   15:*/		return 0x82217784;
		  /* 82217784h */ case   16:  		/* lwz R10, <#[R29 + 8]> */
		/* 82217784h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 82217784h case   16:*/		return 0x82217788;
		  /* 82217788h */ case   17:  		/* addi R29, R29, 12 */
		/* 82217788h case   17:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xC);
		/* 82217788h case   17:*/		return 0x8221778C;
		  /* 8221778Ch */ case   18:  		/* stw R10, <#[R11 + 8]> */
		/* 8221778Ch case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8221778Ch case   18:*/		return 0x82217790;
		  /* 82217790h */ case   19:  		/* bc 12, CR6_EQ, 16 */
		/* 82217790h case   19:*/		if ( regs.CR[6].eq ) { return 0x822177A0;  }
		/* 82217790h case   19:*/		return 0x82217794;
		  /* 82217794h */ case   20:  		/* addi R11, R27, -1 */
		/* 82217794h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFF);
		/* 82217794h case   20:*/		return 0x82217798;
		  /* 82217798h */ case   21:  		/* cmplw CR6, R24, R11 */
		/* 82217798h case   21:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R11);
		/* 82217798h case   21:*/		return 0x8221779C;
		  /* 8221779Ch */ case   22:  		/* bc 4, CR6_EQ, 12 */
		/* 8221779Ch case   22:*/		if ( !regs.CR[6].eq ) { return 0x822177A8;  }
		/* 8221779Ch case   22:*/		return 0x822177A0;
	}
	return 0x822177A0;
} // Block from 82217744h-822177A0h (23 instructions)

//////////////////////////////////////////////////////
// Block at 822177A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822177A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822177A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822177A0);
		  /* 822177A0h */ case    0:  		/* addi R31, R31, 1 */
		/* 822177A0h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 822177A0h case    0:*/		return 0x822177A4;
		  /* 822177A4h */ case    1:  		/* addi R30, R30, 6 */
		/* 822177A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x6);
		/* 822177A4h case    1:*/		return 0x822177A8;
	}
	return 0x822177A8;
} // Block from 822177A0h-822177A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822177A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822177A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822177A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822177A8);
		  /* 822177A8h */ case    0:  		/* addi R24, R24, 1 */
		/* 822177A8h case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 822177A8h case    0:*/		return 0x822177AC;
		  /* 822177ACh */ case    1:  		/* cmplw CR6, R24, R27 */
		/* 822177ACh case    1:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R27);
		/* 822177ACh case    1:*/		return 0x822177B0;
		  /* 822177B0h */ case    2:  		/* bc 12, CR6_LT, -256 */
		/* 822177B0h case    2:*/		if ( regs.CR[6].lt ) { return 0x822176B0;  }
		/* 822177B0h case    2:*/		return 0x822177B4;
		  /* 822177B4h */ case    3:  		/* b 340 */
		/* 822177B4h case    3:*/		return 0x82217908;
		/* 822177B4h case    3:*/		return 0x822177B8;
	}
	return 0x822177B8;
} // Block from 822177A8h-822177B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822177B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822177B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822177B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822177B8);
		  /* 822177B8h */ case    0:  		/* lwz R11, <#[R25 + 12]> */
		/* 822177B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 822177B8h case    0:*/		return 0x822177BC;
		  /* 822177BCh */ case    1:  		/* li R24, 0 */
		/* 822177BCh case    1:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 822177BCh case    1:*/		return 0x822177C0;
		  /* 822177C0h */ case    2:  		/* subf. R28, R21, R11 */
		/* 822177C0h case    2:*/		cpu::op::subf<1>(regs,&regs.R28,regs.R21,regs.R11);
		/* 822177C0h case    2:*/		return 0x822177C4;
		  /* 822177C4h */ case    3:  		/* bc 12, CR0_EQ, 324 */
		/* 822177C4h case    3:*/		if ( regs.CR[0].eq ) { return 0x82217908;  }
		/* 822177C4h case    3:*/		return 0x822177C8;
		  /* 822177C8h */ case    4:  		/* mulli R11, R21, 12 */
		/* 822177C8h case    4:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R21,0xC);
		/* 822177C8h case    4:*/		return 0x822177CC;
		  /* 822177CCh */ case    5:  		/* mulli R10, R31, 6 */
		/* 822177CCh case    5:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R31,0x6);
		/* 822177CCh case    5:*/		return 0x822177D0;
		  /* 822177D0h */ case    6:  		/* add R11, R11, R25 */
		/* 822177D0h case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R25);
		/* 822177D0h case    6:*/		return 0x822177D4;
		  /* 822177D4h */ case    7:  		/* add R10, R10, R23 */
		/* 822177D4h case    7:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R23);
		/* 822177D4h case    7:*/		return 0x822177D8;
		  /* 822177D8h */ case    8:  		/* mulli R26, R22, 12 */
		/* 822177D8h case    8:*/		cpu::op::mulli<0>(regs,&regs.R26,regs.R22,0xC);
		/* 822177D8h case    8:*/		return 0x822177DC;
		  /* 822177DCh */ case    9:  		/* addi R29, R11, 16 */
		/* 822177DCh case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x10);
		/* 822177DCh case    9:*/		return 0x822177E0;
		  /* 822177E0h */ case   10:  		/* addi R30, R10, 2 */
		/* 822177E0h case   10:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R10,0x2);
		/* 822177E0h case   10:*/		return 0x822177E4;
		  /* 822177E4h */ case   11:  		/* add R21, R28, R21 */
		/* 822177E4h case   11:*/		cpu::op::add<0>(regs,&regs.R21,regs.R28,regs.R21);
		/* 822177E4h case   11:*/		return 0x822177E8;
		  /* 822177E8h */ case   12:  		/* li R11, 6 */
		/* 822177E8h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 822177E8h case   12:*/		return 0x822177EC;
		  /* 822177ECh */ case   13:  		/* divwu R11, R24, R11 */
		/* 822177ECh case   13:*/		cpu::op::divwu<0>(regs,&regs.R11,regs.R24,regs.R11);
		/* 822177ECh case   13:*/		return 0x822177F0;
		  /* 822177F0h */ case   14:  		/* mulli R11, R11, 6 */
		/* 822177F0h case   14:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x6);
		/* 822177F0h case   14:*/		return 0x822177F4;
		  /* 822177F4h */ case   15:  		/* subf. R27, R11, R24 */
		/* 822177F4h case   15:*/		cpu::op::subf<1>(regs,&regs.R27,regs.R11,regs.R24);
		/* 822177F4h case   15:*/		return 0x822177F8;
		  /* 822177F8h */ case   16:  		/* bc 4, CR0_EQ, 96 */
		/* 822177F8h case   16:*/		if ( !regs.CR[0].eq ) { return 0x82217858;  }
		/* 822177F8h case   16:*/		return 0x822177FC;
		  /* 822177FCh */ case   17:  		/* lhz R9, <#[R30 - 2]> */
		/* 822177FCh case   17:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R30 + 0xFFFFFFFE) );
		/* 822177FCh case   17:*/		return 0x82217800;
		  /* 82217800h */ case   18:  		/* subf R10, R24, R28 */
		/* 82217800h case   18:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R24,regs.R28);
		/* 82217800h case   18:*/		return 0x82217804;
		  /* 82217804h */ case   19:  		/* lwz R11, <#[R30]> */
		/* 82217804h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82217804h case   19:*/		return 0x82217808;
		  /* 82217808h */ case   20:  		/* rlwimi R9, R22, 4, 0, 27 */
		/* 82217808h case   20:*/		cpu::op::rlwimi<0,4,0,27>(regs,&regs.R9,regs.R22);
		/* 82217808h case   20:*/		return 0x8221780C;
		  /* 8221780Ch */ case   21:  		/* rlwinm R11, R11, 0, 12, 31 */
		/* 8221780Ch case   21:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R11);
		/* 8221780Ch case   21:*/		return 0x82217810;
		  /* 82217810h */ case   22:  		/* rlwinm R9, R9, 0, 16, 31 */
		/* 82217810h case   22:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R9);
		/* 82217810h case   22:*/		return 0x82217814;
		  /* 82217814h */ case   23:  		/* stw R11, <#[R30]> */
		/* 82217814h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82217814h case   23:*/		return 0x82217818;
		  /* 82217818h */ case   24:  		/* cmplwi CR6, R10, 6 */
		/* 82217818h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000006);
		/* 82217818h case   24:*/		return 0x8221781C;
		  /* 8221781Ch */ case   25:  		/* sth R9, <#[R30 - 2]> */
		/* 8221781Ch case   25:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R30 + 0xFFFFFFFE) );
		/* 8221781Ch case   25:*/		return 0x82217820;
		  /* 82217820h */ case   26:  		/* bc 12, CR6_GT, 16 */
		/* 82217820h case   26:*/		if ( regs.CR[6].gt ) { return 0x82217830;  }
		/* 82217820h case   26:*/		return 0x82217824;
		  /* 82217824h */ case   27:  		/* rlwimi R11, R15, 1, 28, 31 */
		/* 82217824h case   27:*/		cpu::op::rlwimi<0,1,28,31>(regs,&regs.R11,regs.R15);
		/* 82217824h case   27:*/		return 0x82217828;
		  /* 82217828h */ case   28:  		/* stw R15, <#[R1 + 92]> */
		/* 82217828h case   28:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R1 + 0x0000005C) );
		/* 82217828h case   28:*/		return 0x8221782C;
		  /* 8221782Ch */ case   29:  		/* b 8 */
		/* 8221782Ch case   29:*/		return 0x82217834;
		/* 8221782Ch case   29:*/		return 0x82217830;
	}
	return 0x82217830;
} // Block from 822177B8h-82217830h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82217830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217830);
		  /* 82217830h */ case    0:  		/* rlwimi R11, R15, 0, 28, 31 */
		/* 82217830h case    0:*/		cpu::op::rlwimi<0,0,28,31>(regs,&regs.R11,regs.R15);
		/* 82217830h case    0:*/		return 0x82217834;
	}
	return 0x82217834;
} // Block from 82217830h-82217834h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82217834h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217834( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217834) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217834);
		  /* 82217834h */ case    0:  		/* stw R11, <#[R30]> */
		/* 82217834h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82217834h case    0:*/		return 0x82217838;
		  /* 82217838h */ case    1:  		/* cmplwi CR6, R10, 6 */
		/* 82217838h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000006);
		/* 82217838h case    1:*/		return 0x8221783C;
		  /* 8221783Ch */ case    2:  		/* bc 12, CR6_LT, 20 */
		/* 8221783Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x82217850;  }
		/* 8221783Ch case    2:*/		return 0x82217840;
		  /* 82217840h */ case    3:  		/* rlwinm R11, R9, 0, 16, 27 */
		/* 82217840h case    3:*/		cpu::op::rlwinm<0,0,16,27>(regs,&regs.R11,regs.R9);
		/* 82217840h case    3:*/		return 0x82217844;
		  /* 82217844h */ case    4:  		/* ori R11, R11, 6 */
		/* 82217844h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x6);
		/* 82217844h case    4:*/		return 0x82217848;
		  /* 82217848h */ case    5:  		/* sth R11, <#[R30 - 2]> */
		/* 82217848h case    5:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0xFFFFFFFE) );
		/* 82217848h case    5:*/		return 0x8221784C;
		  /* 8221784Ch */ case    6:  		/* b 12 */
		/* 8221784Ch case    6:*/		return 0x82217858;
		/* 8221784Ch case    6:*/		return 0x82217850;
	}
	return 0x82217850;
} // Block from 82217834h-82217850h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82217850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217850);
		  /* 82217850h */ case    0:  		/* rlwimi R9, R10, 0, 28, 31 */
		/* 82217850h case    0:*/		cpu::op::rlwimi<0,0,28,31>(regs,&regs.R9,regs.R10);
		/* 82217850h case    0:*/		return 0x82217854;
		  /* 82217854h */ case    1:  		/* sth R9, <#[R30 - 2]> */
		/* 82217854h case    1:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R30 + 0xFFFFFFFE) );
		/* 82217854h case    1:*/		return 0x82217858;
	}
	return 0x82217858;
} // Block from 82217850h-82217858h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82217858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217858);
		  /* 82217858h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 82217858h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82217858h case    0:*/		return 0x8221785C;
		  /* 8221785Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8221785Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221785Ch case    1:*/		return 0x82217860;
		  /* 82217860h */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 82217860h case    2:*/		if ( regs.CR[6].eq ) { return 0x82217894;  }
		/* 82217860h case    2:*/		return 0x82217864;
		  /* 82217864h */ case    3:  		/* cmplwi CR6, R24, 0 */
		/* 82217864h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82217864h case    3:*/		return 0x82217868;
		  /* 82217868h */ case    4:  		/* bc 12, CR6_EQ, 28 */
		/* 82217868h case    4:*/		if ( regs.CR[6].eq ) { return 0x82217884;  }
		/* 82217868h case    4:*/		return 0x8221786C;
		  /* 8221786Ch */ case    5:  		/* li R7, 12773 */
		/* 8221786Ch case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x31E5);
		/* 8221786Ch case    5:*/		return 0x82217870;
		  /* 82217870h */ case    6:  		/* lwz R6, <#[R1 + 84]> */
		/* 82217870h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 82217870h case    6:*/		return 0x82217874;
		  /* 82217874h */ case    7:  		/* li R3, 0 */
		/* 82217874h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82217874h case    7:*/		return 0x82217878;
		  /* 82217878h */ case    8:  		/* lwz R5, <#[R1 + 96]> */
		/* 82217878h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000060) );
		/* 82217878h case    8:*/		return 0x8221787C;
		  /* 8221787Ch */ case    9:  		/* lwz R4, <#[R1 + 88]> */
		/* 8221787Ch case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 8221787Ch case    9:*/		return 0x82217880;
		  /* 82217880h */ case   10:  		/* bl -785528 */
		/* 82217880h case   10:*/		regs.LR = 0x82217884; return 0x82157C08;
		/* 82217880h case   10:*/		return 0x82217884;
	}
	return 0x82217884;
} // Block from 82217858h-82217884h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82217884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217884);
		  /* 82217884h */ case    0:  		/* li R8, 0 */
		/* 82217884h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82217884h case    0:*/		return 0x82217888;
		  /* 82217888h */ case    1:  		/* li R9, 2 */
		/* 82217888h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 82217888h case    1:*/		return 0x8221788C;
		  /* 8221788Ch */ case    2:  		/* stw R8, <#[R1 + 80]> */
		/* 8221788Ch case    2:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000050) );
		/* 8221788Ch case    2:*/		return 0x82217890;
		  /* 82217890h */ case    3:  		/* b 8 */
		/* 82217890h case    3:*/		return 0x82217898;
		/* 82217890h case    3:*/		return 0x82217894;
	}
	return 0x82217894;
} // Block from 82217884h-82217894h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82217894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217894);
		  /* 82217894h */ case    0:  		/* li R9, 0 */
		/* 82217894h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82217894h case    0:*/		return 0x82217898;
	}
	return 0x82217898;
} // Block from 82217894h-82217898h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82217898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217898);
		  /* 82217898h */ case    0:  		/* rlwinm R11, R27, 1, 0, 30 */
		/* 82217898h case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R27);
		/* 82217898h case    0:*/		return 0x8221789C;
		  /* 8221789Ch */ case    1:  		/* lwz R10, <#[R30]> */
		/* 8221789Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 8221789Ch case    1:*/		return 0x822178A0;
		  /* 822178A0h */ case    2:  		/* addi R22, R22, 1 */
		/* 822178A0h case    2:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 822178A0h case    2:*/		return 0x822178A4;
		  /* 822178A4h */ case    3:  		/* slw R11, R9, R11 */
		/* 822178A4h case    3:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 822178A4h case    3:*/		return 0x822178A8;
		  /* 822178A8h */ case    4:  		/* rlwinm R11, R11, 20, 0, 11 */
		/* 822178A8h case    4:*/		cpu::op::rlwinm<0,20,0,11>(regs,&regs.R11,regs.R11);
		/* 822178A8h case    4:*/		return 0x822178AC;
		  /* 822178ACh */ case    5:  		/* cmplwi CR6, R27, 5 */
		/* 822178ACh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000005);
		/* 822178ACh case    5:*/		return 0x822178B0;
		  /* 822178B0h */ case    6:  		/* or R11, R11, R10 */
		/* 822178B0h case    6:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 822178B0h case    6:*/		return 0x822178B4;
		  /* 822178B4h */ case    7:  		/* rlwimi R11, R10, 0, 12, 31 */
		/* 822178B4h case    7:*/		cpu::op::rlwimi<0,0,12,31>(regs,&regs.R11,regs.R10);
		/* 822178B4h case    7:*/		return 0x822178B8;
		  /* 822178B8h */ case    8:  		/* stw R11, <#[R30]> */
		/* 822178B8h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 822178B8h case    8:*/		return 0x822178BC;
		  /* 822178BCh */ case    9:  		/* lwz R10, <#[R29]> */
		/* 822178BCh case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 822178BCh case    9:*/		return 0x822178C0;
		  /* 822178C0h */ case   10:  		/* lwz R11, <#[R25 + 12424]> */
		/* 822178C0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00003088) );
		/* 822178C0h case   10:*/		return 0x822178C4;
		  /* 822178C4h */ case   11:  		/* add R11, R11, R26 */
		/* 822178C4h case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 822178C4h case   11:*/		return 0x822178C8;
		  /* 822178C8h */ case   12:  		/* addi R26, R26, 12 */
		/* 822178C8h case   12:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0xC);
		/* 822178C8h case   12:*/		return 0x822178CC;
		  /* 822178CCh */ case   13:  		/* stw R10, <#[R11]> */
		/* 822178CCh case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822178CCh case   13:*/		return 0x822178D0;
		  /* 822178D0h */ case   14:  		/* lwz R10, <#[R29 + 4]> */
		/* 822178D0h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000004) );
		/* 822178D0h case   14:*/		return 0x822178D4;
		  /* 822178D4h */ case   15:  		/* stw R10, <#[R11 + 4]> */
		/* 822178D4h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 822178D4h case   15:*/		return 0x822178D8;
		  /* 822178D8h */ case   16:  		/* lwz R10, <#[R29 + 8]> */
		/* 822178D8h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 822178D8h case   16:*/		return 0x822178DC;
		  /* 822178DCh */ case   17:  		/* addi R29, R29, 12 */
		/* 822178DCh case   17:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xC);
		/* 822178DCh case   17:*/		return 0x822178E0;
		  /* 822178E0h */ case   18:  		/* stw R10, <#[R11 + 8]> */
		/* 822178E0h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 822178E0h case   18:*/		return 0x822178E4;
		  /* 822178E4h */ case   19:  		/* bc 12, CR6_EQ, 16 */
		/* 822178E4h case   19:*/		if ( regs.CR[6].eq ) { return 0x822178F4;  }
		/* 822178E4h case   19:*/		return 0x822178E8;
		  /* 822178E8h */ case   20:  		/* addi R11, R28, -1 */
		/* 822178E8h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFFF);
		/* 822178E8h case   20:*/		return 0x822178EC;
		  /* 822178ECh */ case   21:  		/* cmplw CR6, R24, R11 */
		/* 822178ECh case   21:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R11);
		/* 822178ECh case   21:*/		return 0x822178F0;
		  /* 822178F0h */ case   22:  		/* bc 4, CR6_EQ, 12 */
		/* 822178F0h case   22:*/		if ( !regs.CR[6].eq ) { return 0x822178FC;  }
		/* 822178F0h case   22:*/		return 0x822178F4;
	}
	return 0x822178F4;
} // Block from 82217898h-822178F4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 822178F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822178F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822178F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822178F4);
		  /* 822178F4h */ case    0:  		/* addi R31, R31, 1 */
		/* 822178F4h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 822178F4h case    0:*/		return 0x822178F8;
		  /* 822178F8h */ case    1:  		/* addi R30, R30, 6 */
		/* 822178F8h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x6);
		/* 822178F8h case    1:*/		return 0x822178FC;
	}
	return 0x822178FC;
} // Block from 822178F4h-822178FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 822178FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822178FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822178FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822178FC);
		  /* 822178FCh */ case    0:  		/* addi R24, R24, 1 */
		/* 822178FCh case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 822178FCh case    0:*/		return 0x82217900;
		  /* 82217900h */ case    1:  		/* cmplw CR6, R24, R28 */
		/* 82217900h case    1:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R28);
		/* 82217900h case    1:*/		return 0x82217904;
		  /* 82217904h */ case    2:  		/* bc 12, CR6_LT, -284 */
		/* 82217904h case    2:*/		if ( regs.CR[6].lt ) { return 0x822177E8;  }
		/* 82217904h case    2:*/		return 0x82217908;
	}
	return 0x82217908;
} // Block from 822178FCh-82217908h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82217908h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217908);
		  /* 82217908h */ case    0:  		/* lwz R11, <#[R25 + 12]> */
		/* 82217908h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 82217908h case    0:*/		return 0x8221790C;
		  /* 8221790Ch */ case    1:  		/* cmplw CR6, R21, R11 */
		/* 8221790Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R11);
		/* 8221790Ch case    1:*/		return 0x82217910;
		  /* 82217910h */ case    2:  		/* bc 12, CR6_LT, -2056 */
		/* 82217910h case    2:*/		if ( regs.CR[6].lt ) { return 0x82217108;  }
		/* 82217910h case    2:*/		return 0x82217914;
		  /* 82217914h */ case    3:  		/* lwz R11, <#[R1 + 92]> */
		/* 82217914h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 82217914h case    3:*/		return 0x82217918;
		  /* 82217918h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82217918h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82217918h case    4:*/		return 0x8221791C;
		  /* 8221791Ch */ case    5:  		/* bc 4, CR6_EQ, 36 */
		/* 8221791Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x82217940;  }
		/* 8221791Ch case    5:*/		return 0x82217920;
		  /* 82217920h */ case    6:  		/* mulli R11, R31, 6 */
		/* 82217920h case    6:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R31,0x6);
		/* 82217920h case    6:*/		return 0x82217924;
		  /* 82217924h */ case    7:  		/* add R11, R11, R23 */
		/* 82217924h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R23);
		/* 82217924h case    7:*/		return 0x82217928;
		  /* 82217928h */ case    8:  		/* rlwinm R10, R22, 4, 16, 27 */
		/* 82217928h case    8:*/		cpu::op::rlwinm<0,4,16,27>(regs,&regs.R10,regs.R22);
		/* 82217928h case    8:*/		return 0x8221792C;
		  /* 8221792Ch */ case    9:  		/* addi R31, R31, 1 */
		/* 8221792Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8221792Ch case    9:*/		return 0x82217930;
		  /* 82217930h */ case   10:  		/* lwz R9, <#[R11 + 2]> */
		/* 82217930h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82217930h case   10:*/		return 0x82217934;
		  /* 82217934h */ case   11:  		/* sth R10, <#[R11]> */
		/* 82217934h case   11:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82217934h case   11:*/		return 0x82217938;
		  /* 82217938h */ case   12:  		/* rlwimi R9, R15, 1, 28, 11 */
		/* 82217938h case   12:*/		cpu::op::rlwimi<0,1,28,11>(regs,&regs.R9,regs.R15);
		/* 82217938h case   12:*/		return 0x8221793C;
		  /* 8221793Ch */ case   13:  		/* stw R9, <#[R11 + 2]> */
		/* 8221793Ch case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 8221793Ch case   13:*/		return 0x82217940;
	}
	return 0x82217940;
} // Block from 82217908h-82217940h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82217940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217940);
		  /* 82217940h */ case    0:  		/* lwz R10, <#[R1 + 108]> */
		/* 82217940h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000006C) );
		/* 82217940h case    0:*/		return 0x82217944;
		  /* 82217944h */ case    1:  		/* cmplw CR6, R31, R10 */
		/* 82217944h case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 82217944h case    1:*/		return 0x82217948;
		  /* 82217948h */ case    2:  		/* bc 4, CR6_LT, 40 */
		/* 82217948h case    2:*/		if ( !regs.CR[6].lt ) { return 0x82217970;  }
		/* 82217948h case    2:*/		return 0x8221794C;
		  /* 8221794Ch */ case    3:  		/* mulli R11, R31, 6 */
		/* 8221794Ch case    3:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R31,0x6);
		/* 8221794Ch case    3:*/		return 0x82217950;
		  /* 82217950h */ case    4:  		/* subf R10, R31, R10 */
		/* 82217950h case    4:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R31,regs.R10);
		/* 82217950h case    4:*/		return 0x82217954;
		  /* 82217954h */ case    5:  		/* add R11, R11, R23 */
		/* 82217954h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R23);
		/* 82217954h case    5:*/		return 0x82217958;
		  /* 82217958h */ case    6:  		/* addi R11, R11, -4 */
		/* 82217958h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 82217958h case    6:*/		return 0x8221795C;
		  /* 8221795Ch */ case    7:  		/* mtspr CTR, R10 */
		/* 8221795Ch case    7:*/		regs.CTR = regs.R10;
		/* 8221795Ch case    7:*/		return 0x82217960;
		  /* 82217960h */ case    8:  		/* lwz R10, <#[R11 + 6]> */
		/* 82217960h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000006) );
		/* 82217960h case    8:*/		return 0x82217964;
		  /* 82217964h */ case    9:  		/* rlwinm R10, R10, 0, 0, 27 */
		/* 82217964h case    9:*/		cpu::op::rlwinm<0,0,0,27>(regs,&regs.R10,regs.R10);
		/* 82217964h case    9:*/		return 0x82217968;
		  /* 82217968h */ case   10:  		/* stwu R10, <#[R11 + 6]> */
		/* 82217968h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000006) );
		regs.R11 = (uint32)(regs.R11 + 0x00000006);
		/* 82217968h case   10:*/		return 0x8221796C;
		  /* 8221796Ch */ case   11:  		/* bc 16, CR0_LT, -12 */
		/* 8221796Ch case   11:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82217960;  }
		/* 8221796Ch case   11:*/		return 0x82217970;
	}
	return 0x82217970;
} // Block from 82217940h-82217970h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82217970h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217970);
		  /* 82217970h */ case    0:  		/* addi R1, R1, 704 */
		/* 82217970h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x2C0);
		/* 82217970h case    0:*/		return 0x82217974;
		  /* 82217974h */ case    1:  		/* b -1599236 */
		/* 82217974h case    1:*/		return 0x82091270;
		/* 82217974h case    1:*/		return 0x82217978;
	}
	return 0x82217978;
} // Block from 82217970h-82217978h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82217978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217978);
		  /* 82217978h */ case    0:  		/* mfspr R12, LR */
		/* 82217978h case    0:*/		regs.R12 = regs.LR;
		/* 82217978h case    0:*/		return 0x8221797C;
		  /* 8221797Ch */ case    1:  		/* bl -1599296 */
		/* 8221797Ch case    1:*/		regs.LR = 0x82217980; return 0x8209123C;
		/* 8221797Ch case    1:*/		return 0x82217980;
		  /* 82217980h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 82217980h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 82217980h case    2:*/		return 0x82217984;
		  /* 82217984h */ case    3:  		/* lwz R11, <#[R3 + 1636]> */
		/* 82217984h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000664) );
		/* 82217984h case    3:*/		return 0x82217988;
		  /* 82217988h */ case    4:  		/* mr R30, R3 */
		/* 82217988h case    4:*/		regs.R30 = regs.R3;
		/* 82217988h case    4:*/		return 0x8221798C;
		  /* 8221798Ch */ case    5:  		/* lwz R23, <#[R3 + 28]> */
		/* 8221798Ch case    5:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R3 + 0x0000001C) );
		/* 8221798Ch case    5:*/		return 0x82217990;
		  /* 82217990h */ case    6:  		/* mr R31, R4 */
		/* 82217990h case    6:*/		regs.R31 = regs.R4;
		/* 82217990h case    6:*/		return 0x82217994;
		  /* 82217994h */ case    7:  		/* li R22, 0 */
		/* 82217994h case    7:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 82217994h case    7:*/		return 0x82217998;
		  /* 82217998h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 82217998h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82217998h case    8:*/		return 0x8221799C;
		  /* 8221799Ch */ case    9:  		/* bc 4, CR6_GT, 16 */
		/* 8221799Ch case    9:*/		if ( !regs.CR[6].gt ) { return 0x822179AC;  }
		/* 8221799Ch case    9:*/		return 0x822179A0;
		  /* 822179A0h */ case   10:  		/* li R11, 1 */
		/* 822179A0h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 822179A0h case   10:*/		return 0x822179A4;
		  /* 822179A4h */ case   11:  		/* stw R11, <#[R3 + 1644]> */
		/* 822179A4h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000066C) );
		/* 822179A4h case   11:*/		return 0x822179A8;
		  /* 822179A8h */ case   12:  		/* b 8 */
		/* 822179A8h case   12:*/		return 0x822179B0;
		/* 822179A8h case   12:*/		return 0x822179AC;
	}
	return 0x822179AC;
} // Block from 82217978h-822179ACh (13 instructions)

//////////////////////////////////////////////////////
// Block at 822179ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822179AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822179AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822179AC);
		  /* 822179ACh */ case    0:  		/* stw R22, <#[R30 + 1644]> */
		/* 822179ACh case    0:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R30 + 0x0000066C) );
		/* 822179ACh case    0:*/		return 0x822179B0;
	}
	return 0x822179B0;
} // Block from 822179ACh-822179B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822179B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822179B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822179B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822179B0);
		  /* 822179B0h */ case    0:  		/* lwz R11, <#[R23]> */
		/* 822179B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 822179B0h case    0:*/		return 0x822179B4;
		  /* 822179B4h */ case    1:  		/* mr R3, R31 */
		/* 822179B4h case    1:*/		regs.R3 = regs.R31;
		/* 822179B4h case    1:*/		return 0x822179B8;
		  /* 822179B8h */ case    2:  		/* lwz R5, <#[R23 + 23200]> */
		/* 822179B8h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R23 + 0x00005AA0) );
		/* 822179B8h case    2:*/		return 0x822179BC;
		  /* 822179BCh */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 822179BCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822179BCh case    3:*/		return 0x822179C0;
		  /* 822179C0h */ case    4:  		/* bc 4, CR6_EQ, 76 */
		/* 822179C0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82217A0C;  }
		/* 822179C0h case    4:*/		return 0x822179C4;
		  /* 822179C4h */ case    5:  		/* li R4, 1978 */
		/* 822179C4h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x7BA);
		/* 822179C4h case    5:*/		return 0x822179C8;
		  /* 822179C8h */ case    6:  		/* bl 121344 */
		/* 822179C8h case    6:*/		regs.LR = 0x822179CC; return 0x822353C8;
		/* 822179C8h case    6:*/		return 0x822179CC;
		  /* 822179CCh */ case    7:  		/* lwz R11, <#[R30 + 1640]> */
		/* 822179CCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000668) );
		/* 822179CCh case    7:*/		return 0x822179D0;
		  /* 822179D0h */ case    8:  		/* li R4, 1984 */
		/* 822179D0h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x7C0);
		/* 822179D0h case    8:*/		return 0x822179D4;
		  /* 822179D4h */ case    9:  		/* mr R3, R31 */
		/* 822179D4h case    9:*/		regs.R3 = regs.R31;
		/* 822179D4h case    9:*/		return 0x822179D8;
		  /* 822179D8h */ case   10:  		/* addi R5, R11, -1 */
		/* 822179D8h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFFFF);
		/* 822179D8h case   10:*/		return 0x822179DC;
		  /* 822179DCh */ case   11:  		/* bl 121324 */
		/* 822179DCh case   11:*/		regs.LR = 0x822179E0; return 0x822353C8;
		/* 822179DCh case   11:*/		return 0x822179E0;
	}
	return 0x822179E0;
} // Block from 822179B0h-822179E0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 822179E0h
// Function '?FinishShader@XGRAPHICS@@YAXPAU_XLT_CONTEXT@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822179E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822179E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822179E0);
		  /* 822179E0h */ case    0:  		/* li R4, 1987 */
		/* 822179E0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x7C3);
		/* 822179E0h case    0:*/		return 0x822179E4;
		  /* 822179E4h */ case    1:  		/* mr R3, R31 */
		/* 822179E4h case    1:*/		regs.R3 = regs.R31;
		/* 822179E4h case    1:*/		return 0x822179E8;
		  /* 822179E8h */ case    2:  		/* lwz R5, <#[R30 + 1656]> */
		/* 822179E8h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000678) );
		/* 822179E8h case    2:*/		return 0x822179EC;
		  /* 822179ECh */ case    3:  		/* bl 121308 */
		/* 822179ECh case    3:*/		regs.LR = 0x822179F0; return 0x822353C8;
		/* 822179ECh case    3:*/		return 0x822179F0;
		  /* 822179F0h */ case    4:  		/* li R4, 1985 */
		/* 822179F0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x7C1);
		/* 822179F0h case    4:*/		return 0x822179F4;
		  /* 822179F4h */ case    5:  		/* mr R3, R31 */
		/* 822179F4h case    5:*/		regs.R3 = regs.R31;
		/* 822179F4h case    5:*/		return 0x822179F8;
		  /* 822179F8h */ case    6:  		/* lwz R5, <#[R30 + 1664]> */
		/* 822179F8h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000680) );
		/* 822179F8h case    6:*/		return 0x822179FC;
		  /* 822179FCh */ case    7:  		/* bl 121292 */
		/* 822179FCh case    7:*/		regs.LR = 0x82217A00; return 0x822353C8;
		/* 822179FCh case    7:*/		return 0x82217A00;
		  /* 82217A00h */ case    8:  		/* lwz R5, <#[R30 + 1644]> */
		/* 82217A00h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000066C) );
		/* 82217A00h case    8:*/		return 0x82217A04;
		  /* 82217A04h */ case    9:  		/* li R4, 1980 */
		/* 82217A04h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x7BC);
		/* 82217A04h case    9:*/		return 0x82217A08;
		  /* 82217A08h */ case   10:  		/* b 68 */
		/* 82217A08h case   10:*/		return 0x82217A4C;
		/* 82217A08h case   10:*/		return 0x82217A0C;
	}
	return 0x82217A0C;
} // Block from 822179E0h-82217A0Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82217A0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217A0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217A0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217A0C);
		  /* 82217A0Ch */ case    0:  		/* li R4, 1979 */
		/* 82217A0Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x7BB);
		/* 82217A0Ch case    0:*/		return 0x82217A10;
		  /* 82217A10h */ case    1:  		/* bl 121272 */
		/* 82217A10h case    1:*/		regs.LR = 0x82217A14; return 0x822353C8;
		/* 82217A10h case    1:*/		return 0x82217A14;
		  /* 82217A14h */ case    2:  		/* li R4, 1986 */
		/* 82217A14h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x7C2);
		/* 82217A14h case    2:*/		return 0x82217A18;
		  /* 82217A18h */ case    3:  		/* mr R3, R31 */
		/* 82217A18h case    3:*/		regs.R3 = regs.R31;
		/* 82217A18h case    3:*/		return 0x82217A1C;
		  /* 82217A1Ch */ case    4:  		/* lwz R5, <#[R30 + 1668]> */
		/* 82217A1Ch case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000684) );
		/* 82217A1Ch case    4:*/		return 0x82217A20;
		  /* 82217A20h */ case    5:  		/* bl 121256 */
		/* 82217A20h case    5:*/		regs.LR = 0x82217A24; return 0x822353C8;
		/* 82217A20h case    5:*/		return 0x82217A24;
		  /* 82217A24h */ case    6:  		/* li R4, 1983 */
		/* 82217A24h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x7BF);
		/* 82217A24h case    6:*/		return 0x82217A28;
		  /* 82217A28h */ case    7:  		/* mr R3, R31 */
		/* 82217A28h case    7:*/		regs.R3 = regs.R31;
		/* 82217A28h case    7:*/		return 0x82217A2C;
		  /* 82217A2Ch */ case    8:  		/* lwz R5, <#[R30 + 1652]> */
		/* 82217A2Ch case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000674) );
		/* 82217A2Ch case    8:*/		return 0x82217A30;
		  /* 82217A30h */ case    9:  		/* bl 121240 */
		/* 82217A30h case    9:*/		regs.LR = 0x82217A34; return 0x822353C8;
		/* 82217A30h case    9:*/		return 0x82217A34;
		  /* 82217A34h */ case   10:  		/* li R4, 1981 */
		/* 82217A34h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x7BD);
		/* 82217A34h case   10:*/		return 0x82217A38;
		  /* 82217A38h */ case   11:  		/* mr R3, R31 */
		/* 82217A38h case   11:*/		regs.R3 = regs.R31;
		/* 82217A38h case   11:*/		return 0x82217A3C;
		  /* 82217A3Ch */ case   12:  		/* lwz R5, <#[R30 + 1644]> */
		/* 82217A3Ch case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000066C) );
		/* 82217A3Ch case   12:*/		return 0x82217A40;
		  /* 82217A40h */ case   13:  		/* bl 121224 */
		/* 82217A40h case   13:*/		regs.LR = 0x82217A44; return 0x822353C8;
		/* 82217A40h case   13:*/		return 0x82217A44;
		  /* 82217A44h */ case   14:  		/* lwz R5, <#[R30 + 1692]> */
		/* 82217A44h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000069C) );
		/* 82217A44h case   14:*/		return 0x82217A48;
		  /* 82217A48h */ case   15:  		/* li R4, 1991 */
		/* 82217A48h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x7C7);
		/* 82217A48h case   15:*/		return 0x82217A4C;
	}
	return 0x82217A4C;
} // Block from 82217A0Ch-82217A4Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 82217A4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217A4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217A4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217A4C);
		  /* 82217A4Ch */ case    0:  		/* mr R3, R31 */
		/* 82217A4Ch case    0:*/		regs.R3 = regs.R31;
		/* 82217A4Ch case    0:*/		return 0x82217A50;
		  /* 82217A50h */ case    1:  		/* bl 121208 */
		/* 82217A50h case    1:*/		regs.LR = 0x82217A54; return 0x822353C8;
		/* 82217A50h case    1:*/		return 0x82217A54;
		  /* 82217A54h */ case    2:  		/* li R4, 1992 */
		/* 82217A54h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x7C8);
		/* 82217A54h case    2:*/		return 0x82217A58;
		  /* 82217A58h */ case    3:  		/* mr R3, R31 */
		/* 82217A58h case    3:*/		regs.R3 = regs.R31;
		/* 82217A58h case    3:*/		return 0x82217A5C;
		  /* 82217A5Ch */ case    4:  		/* lwz R5, <#[R30 + 1672]> */
		/* 82217A5Ch case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000688) );
		/* 82217A5Ch case    4:*/		return 0x82217A60;
		  /* 82217A60h */ case    5:  		/* bl 121192 */
		/* 82217A60h case    5:*/		regs.LR = 0x82217A64; return 0x822353C8;
		/* 82217A60h case    5:*/		return 0x82217A64;
		  /* 82217A64h */ case    6:  		/* li R4, 1993 */
		/* 82217A64h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x7C9);
		/* 82217A64h case    6:*/		return 0x82217A68;
		  /* 82217A68h */ case    7:  		/* mr R3, R31 */
		/* 82217A68h case    7:*/		regs.R3 = regs.R31;
		/* 82217A68h case    7:*/		return 0x82217A6C;
		  /* 82217A6Ch */ case    8:  		/* lwz R5, <#[R30 + 1676]> */
		/* 82217A6Ch case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000068C) );
		/* 82217A6Ch case    8:*/		return 0x82217A70;
		  /* 82217A70h */ case    9:  		/* bl 121176 */
		/* 82217A70h case    9:*/		regs.LR = 0x82217A74; return 0x822353C8;
		/* 82217A70h case    9:*/		return 0x82217A74;
		  /* 82217A74h */ case   10:  		/* lis R9, -32252 */
		/* 82217A74h case   10:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 82217A74h case   10:*/		return 0x82217A78;
		  /* 82217A78h */ case   11:  		/* lis R8, -32253 */
		/* 82217A78h case   11:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 82217A78h case   11:*/		return 0x82217A7C;
		  /* 82217A7Ch */ case   12:  		/* lis R10, -32252 */
		/* 82217A7Ch case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82217A7Ch case   12:*/		return 0x82217A80;
		  /* 82217A80h */ case   13:  		/* lis R11, -32252 */
		/* 82217A80h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82217A80h case   13:*/		return 0x82217A84;
		  /* 82217A84h */ case   14:  		/* mr R29, R22 */
		/* 82217A84h case   14:*/		regs.R29 = regs.R22;
		/* 82217A84h case   14:*/		return 0x82217A88;
		  /* 82217A88h */ case   15:  		/* addi R28, R23, 12432 */
		/* 82217A88h case   15:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R23,0x3090);
		/* 82217A88h case   15:*/		return 0x82217A8C;
		  /* 82217A8Ch */ case   16:  		/* addi R21, R9, -5568 */
		/* 82217A8Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R9,0xFFFFEA40);
		/* 82217A8Ch case   16:*/		return 0x82217A90;
		  /* 82217A90h */ case   17:  		/* addi R26, R8, 27460 */
		/* 82217A90h case   17:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R8,0x6B44);
		/* 82217A90h case   17:*/		return 0x82217A94;
		  /* 82217A94h */ case   18:  		/* addi R24, R10, -25364 */
		/* 82217A94h case   18:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R10,0xFFFF9CEC);
		/* 82217A94h case   18:*/		return 0x82217A98;
		  /* 82217A98h */ case   19:  		/* addi R25, R11, -7312 */
		/* 82217A98h case   19:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0xFFFFE370);
		/* 82217A98h case   19:*/		return 0x82217A9C;
		  /* 82217A9Ch */ case   20:  		/* lwz R11, <#[R28]> */
		/* 82217A9Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82217A9Ch case   20:*/		return 0x82217AA0;
		  /* 82217AA0h */ case   21:  		/* cmplwi CR6, R11, 25 */
		/* 82217AA0h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000019);
		/* 82217AA0h case   21:*/		return 0x82217AA4;
		  /* 82217AA4h */ case   22:  		/* bc 4, CR6_LT, 280 */
		/* 82217AA4h case   22:*/		if ( !regs.CR[6].lt ) { return 0x82217BBC;  }
		/* 82217AA4h case   22:*/		return 0x82217AA8;
		  /* 82217AA8h */ case   23:  		/* li R27, 255 */
		/* 82217AA8h case   23:*/		cpu::op::li<0>(regs,&regs.R27,0xFF);
		/* 82217AA8h case   23:*/		return 0x82217AAC;
		  /* 82217AACh */ case   24:  		/* cmplwi CR6, R11, 15 */
		/* 82217AACh case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000F);
		/* 82217AACh case   24:*/		return 0x82217AB0;
		  /* 82217AB0h */ case   25:  		/* bc 12, CR6_EQ, 116 */
		/* 82217AB0h case   25:*/		if ( regs.CR[6].eq ) { return 0x82217B24;  }
		/* 82217AB0h case   25:*/		return 0x82217AB4;
		  /* 82217AB4h */ case   26:  		/* cmplwi CR6, R11, 16 */
		/* 82217AB4h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000010);
		/* 82217AB4h case   26:*/		return 0x82217AB8;
		  /* 82217AB8h */ case   27:  		/* bc 12, CR6_EQ, 100 */
		/* 82217AB8h case   27:*/		if ( regs.CR[6].eq ) { return 0x82217B1C;  }
		/* 82217AB8h case   27:*/		return 0x82217ABC;
		  /* 82217ABCh */ case   28:  		/* cmplwi CR6, R11, 17 */
		/* 82217ABCh case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000011);
		/* 82217ABCh case   28:*/		return 0x82217AC0;
		  /* 82217AC0h */ case   29:  		/* bc 12, CR6_EQ, 84 */
		/* 82217AC0h case   29:*/		if ( regs.CR[6].eq ) { return 0x82217B14;  }
		/* 82217AC0h case   29:*/		return 0x82217AC4;
		  /* 82217AC4h */ case   30:  		/* cmplwi CR6, R11, 18 */
		/* 82217AC4h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000012);
		/* 82217AC4h case   30:*/		return 0x82217AC8;
		  /* 82217AC8h */ case   31:  		/* bc 12, CR6_EQ, 68 */
		/* 82217AC8h case   31:*/		if ( regs.CR[6].eq ) { return 0x82217B0C;  }
		/* 82217AC8h case   31:*/		return 0x82217ACC;
		  /* 82217ACCh */ case   32:  		/* cmplwi CR6, R11, 19 */
		/* 82217ACCh case   32:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000013);
		/* 82217ACCh case   32:*/		return 0x82217AD0;
		  /* 82217AD0h */ case   33:  		/* bc 12, CR6_EQ, 52 */
		/* 82217AD0h case   33:*/		if ( regs.CR[6].eq ) { return 0x82217B04;  }
		/* 82217AD0h case   33:*/		return 0x82217AD4;
		  /* 82217AD4h */ case   34:  		/* cmplwi CR6, R11, 22 */
		/* 82217AD4h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000016);
		/* 82217AD4h case   34:*/		return 0x82217AD8;
		  /* 82217AD8h */ case   35:  		/* bc 12, CR6_EQ, 36 */
		/* 82217AD8h case   35:*/		if ( regs.CR[6].eq ) { return 0x82217AFC;  }
		/* 82217AD8h case   35:*/		return 0x82217ADC;
		  /* 82217ADCh */ case   36:  		/* mr R6, R25 */
		/* 82217ADCh case   36:*/		regs.R6 = regs.R25;
		/* 82217ADCh case   36:*/		return 0x82217AE0;
		  /* 82217AE0h */ case   37:  		/* mr R5, R24 */
		/* 82217AE0h case   37:*/		regs.R5 = regs.R24;
		/* 82217AE0h case   37:*/		return 0x82217AE4;
		  /* 82217AE4h */ case   38:  		/* mr R4, R26 */
		/* 82217AE4h case   38:*/		regs.R4 = regs.R26;
		/* 82217AE4h case   38:*/		return 0x82217AE8;
		  /* 82217AE8h */ case   39:  		/* li R7, 14835 */
		/* 82217AE8h case   39:*/		cpu::op::li<0>(regs,&regs.R7,0x39F3);
		/* 82217AE8h case   39:*/		return 0x82217AEC;
		  /* 82217AECh */ case   40:  		/* li R3, 0 */
		/* 82217AECh case   40:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82217AECh case   40:*/		return 0x82217AF0;
		  /* 82217AF0h */ case   41:  		/* bl -786152 */
		/* 82217AF0h case   41:*/		regs.LR = 0x82217AF4; return 0x82157C08;
		/* 82217AF0h case   41:*/		return 0x82217AF4;
		  /* 82217AF4h */ case   42:  		/* li R31, 1 */
		/* 82217AF4h case   42:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 82217AF4h case   42:*/		return 0x82217AF8;
		  /* 82217AF8h */ case   43:  		/* b 48 */
		/* 82217AF8h case   43:*/		return 0x82217B28;
		/* 82217AF8h case   43:*/		return 0x82217AFC;
	}
	return 0x82217AFC;
} // Block from 82217A4Ch-82217AFCh (44 instructions)

//////////////////////////////////////////////////////
// Block at 82217AFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217AFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217AFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217AFC);
		  /* 82217AFCh */ case    0:  		/* li R31, 12 */
		/* 82217AFCh case    0:*/		cpu::op::li<0>(regs,&regs.R31,0xC);
		/* 82217AFCh case    0:*/		return 0x82217B00;
		  /* 82217B00h */ case    1:  		/* b 40 */
		/* 82217B00h case    1:*/		return 0x82217B28;
		/* 82217B00h case    1:*/		return 0x82217B04;
	}
	return 0x82217B04;
} // Block from 82217AFCh-82217B04h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82217B04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217B04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217B04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217B04);
		  /* 82217B04h */ case    0:  		/* li R31, 4 */
		/* 82217B04h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x4);
		/* 82217B04h case    0:*/		return 0x82217B08;
		  /* 82217B08h */ case    1:  		/* b 32 */
		/* 82217B08h case    1:*/		return 0x82217B28;
		/* 82217B08h case    1:*/		return 0x82217B0C;
	}
	return 0x82217B0C;
} // Block from 82217B04h-82217B0Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82217B0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217B0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217B0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217B0C);
		  /* 82217B0Ch */ case    0:  		/* li R31, 3 */
		/* 82217B0Ch case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x3);
		/* 82217B0Ch case    0:*/		return 0x82217B10;
		  /* 82217B10h */ case    1:  		/* b 24 */
		/* 82217B10h case    1:*/		return 0x82217B28;
		/* 82217B10h case    1:*/		return 0x82217B14;
	}
	return 0x82217B14;
} // Block from 82217B0Ch-82217B14h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82217B14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217B14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217B14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217B14);
		  /* 82217B14h */ case    0:  		/* li R31, 2 */
		/* 82217B14h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x2);
		/* 82217B14h case    0:*/		return 0x82217B18;
		  /* 82217B18h */ case    1:  		/* b 16 */
		/* 82217B18h case    1:*/		return 0x82217B28;
		/* 82217B18h case    1:*/		return 0x82217B1C;
	}
	return 0x82217B1C;
} // Block from 82217B14h-82217B1Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82217B1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217B1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217B1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217B1C);
		  /* 82217B1Ch */ case    0:  		/* li R31, 5 */
		/* 82217B1Ch case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x5);
		/* 82217B1Ch case    0:*/		return 0x82217B20;
		  /* 82217B20h */ case    1:  		/* b 8 */
		/* 82217B20h case    1:*/		return 0x82217B28;
		/* 82217B20h case    1:*/		return 0x82217B24;
	}
	return 0x82217B24;
} // Block from 82217B1Ch-82217B24h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82217B24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217B24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217B24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217B24);
		  /* 82217B24h */ case    0:  		/* li R31, 8 */
		/* 82217B24h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x8);
		/* 82217B24h case    0:*/		return 0x82217B28;
	}
	return 0x82217B28;
} // Block from 82217B24h-82217B28h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82217B28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217B28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217B28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217B28);
		  /* 82217B28h */ case    0:  		/* lwz R10, <#[R28]> */
		/* 82217B28h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 82217B28h case    0:*/		return 0x82217B2C;
		  /* 82217B2Ch */ case    1:  		/* mr R11, R22 */
		/* 82217B2Ch case    1:*/		regs.R11 = regs.R22;
		/* 82217B2Ch case    1:*/		return 0x82217B30;
		  /* 82217B30h */ case    2:  		/* rlwinm R9, R10, 6, 0, 25 */
		/* 82217B30h case    2:*/		cpu::op::rlwinm<0,6,0,25>(regs,&regs.R9,regs.R10);
		/* 82217B30h case    2:*/		return 0x82217B34;
		  /* 82217B34h */ case    3:  		/* add R10, R9, R11 */
		/* 82217B34h case    3:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R11);
		/* 82217B34h case    3:*/		return 0x82217B38;
		  /* 82217B38h */ case    4:  		/* addi R10, R10, 4200 */
		/* 82217B38h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1068);
		/* 82217B38h case    4:*/		return 0x82217B3C;
		  /* 82217B3Ch */ case    5:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82217B3Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82217B3Ch case    5:*/		return 0x82217B40;
		  /* 82217B40h */ case    6:  		/* lwzx R10, <#[R10 + R23]> */
		/* 82217B40h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R23 + 0x00000000) );
		/* 82217B40h case    6:*/		return 0x82217B44;
		  /* 82217B44h */ case    7:  		/* cmplw CR6, R10, R29 */
		/* 82217B44h case    7:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 82217B44h case    7:*/		return 0x82217B48;
		  /* 82217B48h */ case    8:  		/* bc 12, CR6_EQ, 20 */
		/* 82217B48h case    8:*/		if ( regs.CR[6].eq ) { return 0x82217B5C;  }
		/* 82217B48h case    8:*/		return 0x82217B4C;
		  /* 82217B4Ch */ case    9:  		/* addi R11, R11, 1 */
		/* 82217B4Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82217B4Ch case    9:*/		return 0x82217B50;
		  /* 82217B50h */ case   10:  		/* cmplwi CR6, R11, 20 */
		/* 82217B50h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000014);
		/* 82217B50h case   10:*/		return 0x82217B54;
		  /* 82217B54h */ case   11:  		/* bc 12, CR6_LT, -32 */
		/* 82217B54h case   11:*/		if ( regs.CR[6].lt ) { return 0x82217B34;  }
		/* 82217B54h case   11:*/		return 0x82217B58;
		  /* 82217B58h */ case   12:  		/* b 16 */
		/* 82217B58h case   12:*/		return 0x82217B68;
		/* 82217B58h case   12:*/		return 0x82217B5C;
	}
	return 0x82217B5C;
} // Block from 82217B28h-82217B5Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 82217B5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217B5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217B5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217B5C);
		  /* 82217B5Ch */ case    0:  		/* mr R27, R11 */
		/* 82217B5Ch case    0:*/		regs.R27 = regs.R11;
		/* 82217B5Ch case    0:*/		return 0x82217B60;
		  /* 82217B60h */ case    1:  		/* cmplwi CR6, R11, 255 */
		/* 82217B60h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000000FF);
		/* 82217B60h case    1:*/		return 0x82217B64;
		  /* 82217B64h */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 82217B64h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82217B80;  }
		/* 82217B64h case    2:*/		return 0x82217B68;
	}
	return 0x82217B68;
} // Block from 82217B5Ch-82217B68h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82217B68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217B68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217B68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217B68);
		  /* 82217B68h */ case    0:  		/* mr R6, R25 */
		/* 82217B68h case    0:*/		regs.R6 = regs.R25;
		/* 82217B68h case    0:*/		return 0x82217B6C;
		  /* 82217B6Ch */ case    1:  		/* mr R5, R21 */
		/* 82217B6Ch case    1:*/		regs.R5 = regs.R21;
		/* 82217B6Ch case    1:*/		return 0x82217B70;
		  /* 82217B70h */ case    2:  		/* mr R4, R26 */
		/* 82217B70h case    2:*/		regs.R4 = regs.R26;
		/* 82217B70h case    2:*/		return 0x82217B74;
		  /* 82217B74h */ case    3:  		/* li R7, 14851 */
		/* 82217B74h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x3A03);
		/* 82217B74h case    3:*/		return 0x82217B78;
		  /* 82217B78h */ case    4:  		/* li R3, 0 */
		/* 82217B78h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82217B78h case    4:*/		return 0x82217B7C;
		  /* 82217B7Ch */ case    5:  		/* bl -786292 */
		/* 82217B7Ch case    5:*/		regs.LR = 0x82217B80; return 0x82157C08;
		/* 82217B7Ch case    5:*/		return 0x82217B80;
	}
	return 0x82217B80;
} // Block from 82217B68h-82217B80h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82217B80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217B80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217B80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217B80);
		  /* 82217B80h */ case    0:  		/* lwz R11, <#[R28 + 20]> */
		/* 82217B80h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 82217B80h case    0:*/		return 0x82217B84;
		  /* 82217B84h */ case    1:  		/* lis R8, 257 */
		/* 82217B84h case    1:*/		cpu::op::lis<0>(regs,&regs.R8,0x101);
		/* 82217B84h case    1:*/		return 0x82217B88;
		  /* 82217B88h */ case    2:  		/* li R10, 0 */
		/* 82217B88h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82217B88h case    2:*/		return 0x82217B8C;
		  /* 82217B8Ch */ case    3:  		/* lwz R3, <#[R30 + 16]> */
		/* 82217B8Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 82217B8Ch case    3:*/		return 0x82217B90;
		  /* 82217B90h */ case    4:  		/* cntlzw R11, R11 */
		/* 82217B90h case    4:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82217B90h case    4:*/		return 0x82217B94;
		  /* 82217B94h */ case    5:  		/* stw R22, <#[R1 + 100]> */
		/* 82217B94h case    5:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000064) );
		/* 82217B94h case    5:*/		return 0x82217B98;
		  /* 82217B98h */ case    6:  		/* ori R8, R8, 257 */
		/* 82217B98h case    6:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x101);
		/* 82217B98h case    6:*/		return 0x82217B9C;
		  /* 82217B9Ch */ case    7:  		/* stw R22, <#[R1 + 92]> */
		/* 82217B9Ch case    7:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x0000005C) );
		/* 82217B9Ch case    7:*/		return 0x82217BA0;
		  /* 82217BA0h */ case    8:  		/* rlwinm R9, R11, 27, 31, 31 */
		/* 82217BA0h case    8:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R9,regs.R11);
		/* 82217BA0h case    8:*/		return 0x82217BA4;
		  /* 82217BA4h */ case    9:  		/* stw R22, <#[R1 + 84]> */
		/* 82217BA4h case    9:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000054) );
		/* 82217BA4h case    9:*/		return 0x82217BA8;
		  /* 82217BA8h */ case   10:  		/* mr R7, R27 */
		/* 82217BA8h case   10:*/		regs.R7 = regs.R27;
		/* 82217BA8h case   10:*/		return 0x82217BAC;
		  /* 82217BACh */ case   11:  		/* mr R6, R31 */
		/* 82217BACh case   11:*/		regs.R6 = regs.R31;
		/* 82217BACh case   11:*/		return 0x82217BB0;
		  /* 82217BB0h */ case   12:  		/* mr R5, R29 */
		/* 82217BB0h case   12:*/		regs.R5 = regs.R29;
		/* 82217BB0h case   12:*/		return 0x82217BB4;
		  /* 82217BB4h */ case   13:  		/* li R4, 0 */
		/* 82217BB4h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82217BB4h case   13:*/		return 0x82217BB8;
		  /* 82217BB8h */ case   14:  		/* bl 34528 */
		/* 82217BB8h case   14:*/		regs.LR = 0x82217BBC; return 0x82220298;
		/* 82217BB8h case   14:*/		return 0x82217BBC;
	}
	return 0x82217BBC;
} // Block from 82217B80h-82217BBCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 82217BBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217BBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217BBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217BBC);
		  /* 82217BBCh */ case    0:  		/* addi R29, R29, 1 */
		/* 82217BBCh case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82217BBCh case    0:*/		return 0x82217BC0;
		  /* 82217BC0h */ case    1:  		/* addi R28, R28, 28 */
		/* 82217BC0h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1C);
		/* 82217BC0h case    1:*/		return 0x82217BC4;
		  /* 82217BC4h */ case    2:  		/* cmplwi CR6, R29, 20 */
		/* 82217BC4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000014);
		/* 82217BC4h case    2:*/		return 0x82217BC8;
		  /* 82217BC8h */ case    3:  		/* bc 12, CR6_LT, -300 */
		/* 82217BC8h case    3:*/		if ( regs.CR[6].lt ) { return 0x82217A9C;  }
		/* 82217BC8h case    3:*/		return 0x82217BCC;
		  /* 82217BCCh */ case    4:  		/* addi R1, R1, 208 */
		/* 82217BCCh case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 82217BCCh case    4:*/		return 0x82217BD0;
		  /* 82217BD0h */ case    5:  		/* b -1599812 */
		/* 82217BD0h case    5:*/		return 0x8209128C;
		/* 82217BD0h case    5:*/		return 0x82217BD4;
		  /* 82217BD4h */ case    6:  		/* nop */
		/* 82217BD4h case    6:*/		cpu::op::nop();
		/* 82217BD4h case    6:*/		return 0x82217BD8;
	}
	return 0x82217BD8;
} // Block from 82217BBCh-82217BD8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82217BD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217BD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217BD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217BD8);
		  /* 82217BD8h */ case    0:  		/* mfspr R12, LR */
		/* 82217BD8h case    0:*/		regs.R12 = regs.LR;
		/* 82217BD8h case    0:*/		return 0x82217BDC;
		  /* 82217BDCh */ case    1:  		/* bl -1599880 */
		/* 82217BDCh case    1:*/		regs.LR = 0x82217BE0; return 0x82091254;
		/* 82217BDCh case    1:*/		return 0x82217BE0;
		  /* 82217BE0h */ case    2:  		/* addi R12, R1, -48 */
		/* 82217BE0h case    2:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R1,0xFFFFFFD0);
		/* 82217BE0h case    2:*/		return 0x82217BE4;
		  /* 82217BE4h */ case    3:  		/* bl -1599436 */
		/* 82217BE4h case    3:*/		regs.LR = 0x82217BE8; return 0x82091418;
		/* 82217BE4h case    3:*/		return 0x82217BE8;
		  /* 82217BE8h */ case    4:  		/* stwu R1, <#[R1 - 176]> */
		/* 82217BE8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82217BE8h case    4:*/		return 0x82217BEC;
		  /* 82217BECh */ case    5:  		/* lis R11, -32256 */
		/* 82217BECh case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82217BECh case    5:*/		return 0x82217BF0;
		  /* 82217BF0h */ case    6:  		/* lwz R27, <#[R3 + 28]> */
		/* 82217BF0h case    6:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R3 + 0x0000001C) );
		/* 82217BF0h case    6:*/		return 0x82217BF4;
		  /* 82217BF4h */ case    7:  		/* li R10, -1 */
		/* 82217BF4h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 82217BF4h case    7:*/		return 0x82217BF8;
		  /* 82217BF8h */ case    8:  		/* li R6, 0 */
		/* 82217BF8h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82217BF8h case    8:*/		return 0x82217BFC;
		  /* 82217BFCh */ case    9:  		/* li R5, 0 */
		/* 82217BFCh case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82217BFCh case    9:*/		return 0x82217C00;
		  /* 82217C00h */ case   10:  		/* stw R10, <#[R1 + 80]> */
		/* 82217C00h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82217C00h case   10:*/		return 0x82217C04;
		  /* 82217C04h */ case   11:  		/* mr R28, R3 */
		/* 82217C04h case   11:*/		regs.R28 = regs.R3;
		/* 82217C04h case   11:*/		return 0x82217C08;
		  /* 82217C08h */ case   12:  		/* lwz R3, <#[R3 + 16]> */
		/* 82217C08h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000010) );
		/* 82217C08h case   12:*/		return 0x82217C0C;
		  /* 82217C0Ch */ case   13:  		/* lfs FR30, <#[R11 + 1816]> */
		/* 82217C0Ch case   13:*/		cpu::mem::load32f( regs, &regs.FR30, (uint32)(regs.R11 + 0x00000718) );
		/* 82217C0Ch case   13:*/		return 0x82217C10;
		  /* 82217C10h */ case   14:  		/* lwz R4, <#[R27]> */
		/* 82217C10h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82217C10h case   14:*/		return 0x82217C14;
		  /* 82217C14h */ case   15:  		/* fmr FR1, FR30 */
		/* 82217C14h case   15:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 82217C14h case   15:*/		return 0x82217C18;
		  /* 82217C18h */ case   16:  		/* bl 33904 */
		/* 82217C18h case   16:*/		regs.LR = 0x82217C1C; return 0x82220088;
		/* 82217C18h case   16:*/		return 0x82217C1C;
		  /* 82217C1Ch */ case   17:  		/* lis R11, -32253 */
		/* 82217C1Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82217C1Ch case   17:*/		return 0x82217C20;
		  /* 82217C20h */ case   18:  		/* lis R10, -32252 */
		/* 82217C20h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82217C20h case   18:*/		return 0x82217C24;
		  /* 82217C24h */ case   19:  		/* lis R9, -32252 */
		/* 82217C24h case   19:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 82217C24h case   19:*/		return 0x82217C28;
		  /* 82217C28h */ case   20:  		/* cmpwi CR0, R3, 0 */
		/* 82217C28h case   20:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82217C28h case   20:*/		return 0x82217C2C;
		  /* 82217C2Ch */ case   21:  		/* addi R31, R11, 27460 */
		/* 82217C2Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x6B44);
		/* 82217C2Ch case   21:*/		return 0x82217C30;
		  /* 82217C30h */ case   22:  		/* addi R30, R10, -5996 */
		/* 82217C30h case   22:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R10,0xFFFFE894);
		/* 82217C30h case   22:*/		return 0x82217C34;
		  /* 82217C34h */ case   23:  		/* addi R29, R9, -7312 */
		/* 82217C34h case   23:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R9,0xFFFFE370);
		/* 82217C34h case   23:*/		return 0x82217C38;
		  /* 82217C38h */ case   24:  		/* bc 12, CR0_EQ, 28 */
		/* 82217C38h case   24:*/		if ( regs.CR[0].eq ) { return 0x82217C54;  }
		/* 82217C38h case   24:*/		return 0x82217C3C;
		  /* 82217C3Ch */ case   25:  		/* mr R6, R29 */
		/* 82217C3Ch case   25:*/		regs.R6 = regs.R29;
		/* 82217C3Ch case   25:*/		return 0x82217C40;
		  /* 82217C40h */ case   26:  		/* mr R5, R30 */
		/* 82217C40h case   26:*/		regs.R5 = regs.R30;
		/* 82217C40h case   26:*/		return 0x82217C44;
		  /* 82217C44h */ case   27:  		/* mr R4, R31 */
		/* 82217C44h case   27:*/		regs.R4 = regs.R31;
		/* 82217C44h case   27:*/		return 0x82217C48;
		  /* 82217C48h */ case   28:  		/* li R7, 15097 */
		/* 82217C48h case   28:*/		cpu::op::li<0>(regs,&regs.R7,0x3AF9);
		/* 82217C48h case   28:*/		return 0x82217C4C;
		  /* 82217C4Ch */ case   29:  		/* li R3, 0 */
		/* 82217C4Ch case   29:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82217C4Ch case   29:*/		return 0x82217C50;
		  /* 82217C50h */ case   30:  		/* bl -786504 */
		/* 82217C50h case   30:*/		regs.LR = 0x82217C54; return 0x82157C08;
		/* 82217C50h case   30:*/		return 0x82217C54;
	}
	return 0x82217C54;
} // Block from 82217BD8h-82217C54h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82217C54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217C54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217C54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217C54);
		  /* 82217C54h */ case    0:  		/* lis R11, -32256 */
		/* 82217C54h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82217C54h case    0:*/		return 0x82217C58;
		  /* 82217C58h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82217C58h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82217C58h case    1:*/		return 0x82217C5C;
		  /* 82217C5Ch */ case    2:  		/* li R6, 1 */
		/* 82217C5Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82217C5Ch case    2:*/		return 0x82217C60;
		  /* 82217C60h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82217C60h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82217C60h case    3:*/		return 0x82217C64;
		  /* 82217C64h */ case    4:  		/* li R5, 0 */
		/* 82217C64h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82217C64h case    4:*/		return 0x82217C68;
		  /* 82217C68h */ case    5:  		/* lfs FR28, <#[R11 + 1792]> */
		/* 82217C68h case    5:*/		cpu::mem::load32f( regs, &regs.FR28, (uint32)(regs.R11 + 0x00000700) );
		/* 82217C68h case    5:*/		return 0x82217C6C;
		  /* 82217C6Ch */ case    6:  		/* fmr FR1, FR28 */
		/* 82217C6Ch case    6:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR28);
		/* 82217C6Ch case    6:*/		return 0x82217C70;
		  /* 82217C70h */ case    7:  		/* bl 33816 */
		/* 82217C70h case    7:*/		regs.LR = 0x82217C74; return 0x82220088;
		/* 82217C70h case    7:*/		return 0x82217C74;
		  /* 82217C74h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 82217C74h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82217C74h case    8:*/		return 0x82217C78;
		  /* 82217C78h */ case    9:  		/* bc 12, CR0_EQ, 28 */
		/* 82217C78h case    9:*/		if ( regs.CR[0].eq ) { return 0x82217C94;  }
		/* 82217C78h case    9:*/		return 0x82217C7C;
		  /* 82217C7Ch */ case   10:  		/* mr R6, R29 */
		/* 82217C7Ch case   10:*/		regs.R6 = regs.R29;
		/* 82217C7Ch case   10:*/		return 0x82217C80;
		  /* 82217C80h */ case   11:  		/* mr R5, R30 */
		/* 82217C80h case   11:*/		regs.R5 = regs.R30;
		/* 82217C80h case   11:*/		return 0x82217C84;
		  /* 82217C84h */ case   12:  		/* mr R4, R31 */
		/* 82217C84h case   12:*/		regs.R4 = regs.R31;
		/* 82217C84h case   12:*/		return 0x82217C88;
		  /* 82217C88h */ case   13:  		/* li R7, 15103 */
		/* 82217C88h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x3AFF);
		/* 82217C88h case   13:*/		return 0x82217C8C;
		  /* 82217C8Ch */ case   14:  		/* li R3, 0 */
		/* 82217C8Ch case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82217C8Ch case   14:*/		return 0x82217C90;
		  /* 82217C90h */ case   15:  		/* bl -786568 */
		/* 82217C90h case   15:*/		regs.LR = 0x82217C94; return 0x82157C08;
		/* 82217C90h case   15:*/		return 0x82217C94;
	}
	return 0x82217C94;
} // Block from 82217C54h-82217C94h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82217C94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217C94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217C94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217C94);
		  /* 82217C94h */ case    0:  		/* lis R11, -32256 */
		/* 82217C94h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82217C94h case    0:*/		return 0x82217C98;
		  /* 82217C98h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82217C98h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82217C98h case    1:*/		return 0x82217C9C;
		  /* 82217C9Ch */ case    2:  		/* li R6, 2 */
		/* 82217C9Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 82217C9Ch case    2:*/		return 0x82217CA0;
		  /* 82217CA0h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82217CA0h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82217CA0h case    3:*/		return 0x82217CA4;
		  /* 82217CA4h */ case    4:  		/* li R5, 0 */
		/* 82217CA4h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82217CA4h case    4:*/		return 0x82217CA8;
		  /* 82217CA8h */ case    5:  		/* lfs FR29, <#[R11 + 1820]> */
		/* 82217CA8h case    5:*/		cpu::mem::load32f( regs, &regs.FR29, (uint32)(regs.R11 + 0x0000071C) );
		/* 82217CA8h case    5:*/		return 0x82217CAC;
		  /* 82217CACh */ case    6:  		/* fmr FR1, FR29 */
		/* 82217CACh case    6:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 82217CACh case    6:*/		return 0x82217CB0;
		  /* 82217CB0h */ case    7:  		/* bl 33752 */
		/* 82217CB0h case    7:*/		regs.LR = 0x82217CB4; return 0x82220088;
		/* 82217CB0h case    7:*/		return 0x82217CB4;
		  /* 82217CB4h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 82217CB4h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82217CB4h case    8:*/		return 0x82217CB8;
		  /* 82217CB8h */ case    9:  		/* bc 12, CR0_EQ, 28 */
		/* 82217CB8h case    9:*/		if ( regs.CR[0].eq ) { return 0x82217CD4;  }
		/* 82217CB8h case    9:*/		return 0x82217CBC;
		  /* 82217CBCh */ case   10:  		/* mr R6, R29 */
		/* 82217CBCh case   10:*/		regs.R6 = regs.R29;
		/* 82217CBCh case   10:*/		return 0x82217CC0;
		  /* 82217CC0h */ case   11:  		/* mr R5, R30 */
		/* 82217CC0h case   11:*/		regs.R5 = regs.R30;
		/* 82217CC0h case   11:*/		return 0x82217CC4;
		  /* 82217CC4h */ case   12:  		/* mr R4, R31 */
		/* 82217CC4h case   12:*/		regs.R4 = regs.R31;
		/* 82217CC4h case   12:*/		return 0x82217CC8;
		  /* 82217CC8h */ case   13:  		/* li R7, 15109 */
		/* 82217CC8h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x3B05);
		/* 82217CC8h case   13:*/		return 0x82217CCC;
		  /* 82217CCCh */ case   14:  		/* li R3, 0 */
		/* 82217CCCh case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82217CCCh case   14:*/		return 0x82217CD0;
		  /* 82217CD0h */ case   15:  		/* bl -786632 */
		/* 82217CD0h case   15:*/		regs.LR = 0x82217CD4; return 0x82157C08;
		/* 82217CD0h case   15:*/		return 0x82217CD4;
	}
	return 0x82217CD4;
} // Block from 82217C94h-82217CD4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82217CD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217CD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217CD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217CD4);
		  /* 82217CD4h */ case    0:  		/* lis R11, -32256 */
		/* 82217CD4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82217CD4h case    0:*/		return 0x82217CD8;
		  /* 82217CD8h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82217CD8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82217CD8h case    1:*/		return 0x82217CDC;
		  /* 82217CDCh */ case    2:  		/* li R6, 3 */
		/* 82217CDCh case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82217CDCh case    2:*/		return 0x82217CE0;
		  /* 82217CE0h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82217CE0h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82217CE0h case    3:*/		return 0x82217CE4;
		  /* 82217CE4h */ case    4:  		/* li R5, 0 */
		/* 82217CE4h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82217CE4h case    4:*/		return 0x82217CE8;
		  /* 82217CE8h */ case    5:  		/* lfs FR1, <#[R11 + 8792]> */
		/* 82217CE8h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00002258) );
		/* 82217CE8h case    5:*/		return 0x82217CEC;
		  /* 82217CECh */ case    6:  		/* bl 33692 */
		/* 82217CECh case    6:*/		regs.LR = 0x82217CF0; return 0x82220088;
		/* 82217CECh case    6:*/		return 0x82217CF0;
		  /* 82217CF0h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82217CF0h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82217CF0h case    7:*/		return 0x82217CF4;
		  /* 82217CF4h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 82217CF4h case    8:*/		if ( regs.CR[0].eq ) { return 0x82217D10;  }
		/* 82217CF4h case    8:*/		return 0x82217CF8;
		  /* 82217CF8h */ case    9:  		/* mr R6, R29 */
		/* 82217CF8h case    9:*/		regs.R6 = regs.R29;
		/* 82217CF8h case    9:*/		return 0x82217CFC;
		  /* 82217CFCh */ case   10:  		/* mr R5, R30 */
		/* 82217CFCh case   10:*/		regs.R5 = regs.R30;
		/* 82217CFCh case   10:*/		return 0x82217D00;
		  /* 82217D00h */ case   11:  		/* mr R4, R31 */
		/* 82217D00h case   11:*/		regs.R4 = regs.R31;
		/* 82217D00h case   11:*/		return 0x82217D04;
		  /* 82217D04h */ case   12:  		/* li R7, 15115 */
		/* 82217D04h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3B0B);
		/* 82217D04h case   12:*/		return 0x82217D08;
		  /* 82217D08h */ case   13:  		/* li R3, 0 */
		/* 82217D08h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82217D08h case   13:*/		return 0x82217D0C;
		  /* 82217D0Ch */ case   14:  		/* bl -786692 */
		/* 82217D0Ch case   14:*/		regs.LR = 0x82217D10; return 0x82157C08;
		/* 82217D0Ch case   14:*/		return 0x82217D10;
	}
	return 0x82217D10;
} // Block from 82217CD4h-82217D10h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82217D10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217D10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217D10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217D10);
		  /* 82217D10h */ case    0:  		/* lis R11, -32252 */
		/* 82217D10h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82217D10h case    0:*/		return 0x82217D14;
		  /* 82217D14h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82217D14h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82217D14h case    1:*/		return 0x82217D18;
		  /* 82217D18h */ case    2:  		/* li R6, 0 */
		/* 82217D18h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82217D18h case    2:*/		return 0x82217D1C;
		  /* 82217D1Ch */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82217D1Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82217D1Ch case    3:*/		return 0x82217D20;
		  /* 82217D20h */ case    4:  		/* li R5, 1 */
		/* 82217D20h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82217D20h case    4:*/		return 0x82217D24;
		  /* 82217D24h */ case    5:  		/* lfs FR1, <#[R11 - 5484]> */
		/* 82217D24h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFEA94) );
		/* 82217D24h case    5:*/		return 0x82217D28;
		  /* 82217D28h */ case    6:  		/* bl 33632 */
		/* 82217D28h case    6:*/		regs.LR = 0x82217D2C; return 0x82220088;
		/* 82217D28h case    6:*/		return 0x82217D2C;
		  /* 82217D2Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82217D2Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82217D2Ch case    7:*/		return 0x82217D30;
		  /* 82217D30h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 82217D30h case    8:*/		if ( regs.CR[0].eq ) { return 0x82217D4C;  }
		/* 82217D30h case    8:*/		return 0x82217D34;
		  /* 82217D34h */ case    9:  		/* mr R6, R29 */
		/* 82217D34h case    9:*/		regs.R6 = regs.R29;
		/* 82217D34h case    9:*/		return 0x82217D38;
		  /* 82217D38h */ case   10:  		/* mr R5, R30 */
		/* 82217D38h case   10:*/		regs.R5 = regs.R30;
		/* 82217D38h case   10:*/		return 0x82217D3C;
		  /* 82217D3Ch */ case   11:  		/* mr R4, R31 */
		/* 82217D3Ch case   11:*/		regs.R4 = regs.R31;
		/* 82217D3Ch case   11:*/		return 0x82217D40;
		  /* 82217D40h */ case   12:  		/* li R7, 15121 */
		/* 82217D40h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3B11);
		/* 82217D40h case   12:*/		return 0x82217D44;
		  /* 82217D44h */ case   13:  		/* li R3, 0 */
		/* 82217D44h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82217D44h case   13:*/		return 0x82217D48;
		  /* 82217D48h */ case   14:  		/* bl -786752 */
		/* 82217D48h case   14:*/		regs.LR = 0x82217D4C; return 0x82157C08;
		/* 82217D48h case   14:*/		return 0x82217D4C;
	}
	return 0x82217D4C;
} // Block from 82217D10h-82217D4Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 82217D4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217D4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217D4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217D4C);
		  /* 82217D4Ch */ case    0:  		/* lis R11, -32252 */
		/* 82217D4Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82217D4Ch case    0:*/		return 0x82217D50;
		  /* 82217D50h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82217D50h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82217D50h case    1:*/		return 0x82217D54;
		  /* 82217D54h */ case    2:  		/* li R6, 1 */
		/* 82217D54h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82217D54h case    2:*/		return 0x82217D58;
		  /* 82217D58h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82217D58h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82217D58h case    3:*/		return 0x82217D5C;
		  /* 82217D5Ch */ case    4:  		/* li R5, 1 */
		/* 82217D5Ch case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82217D5Ch case    4:*/		return 0x82217D60;
		  /* 82217D60h */ case    5:  		/* lfs FR1, <#[R11 - 5488]> */
		/* 82217D60h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFEA90) );
		/* 82217D60h case    5:*/		return 0x82217D64;
		  /* 82217D64h */ case    6:  		/* bl 33572 */
		/* 82217D64h case    6:*/		regs.LR = 0x82217D68; return 0x82220088;
		/* 82217D64h case    6:*/		return 0x82217D68;
		  /* 82217D68h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82217D68h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82217D68h case    7:*/		return 0x82217D6C;
		  /* 82217D6Ch */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 82217D6Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x82217D88;  }
		/* 82217D6Ch case    8:*/		return 0x82217D70;
		  /* 82217D70h */ case    9:  		/* mr R6, R29 */
		/* 82217D70h case    9:*/		regs.R6 = regs.R29;
		/* 82217D70h case    9:*/		return 0x82217D74;
		  /* 82217D74h */ case   10:  		/* mr R5, R30 */
		/* 82217D74h case   10:*/		regs.R5 = regs.R30;
		/* 82217D74h case   10:*/		return 0x82217D78;
		  /* 82217D78h */ case   11:  		/* mr R4, R31 */
		/* 82217D78h case   11:*/		regs.R4 = regs.R31;
		/* 82217D78h case   11:*/		return 0x82217D7C;
		  /* 82217D7Ch */ case   12:  		/* li R7, 15127 */
		/* 82217D7Ch case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3B17);
		/* 82217D7Ch case   12:*/		return 0x82217D80;
		  /* 82217D80h */ case   13:  		/* li R3, 0 */
		/* 82217D80h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82217D80h case   13:*/		return 0x82217D84;
		  /* 82217D84h */ case   14:  		/* bl -786812 */
		/* 82217D84h case   14:*/		regs.LR = 0x82217D88; return 0x82157C08;
		/* 82217D84h case   14:*/		return 0x82217D88;
	}
	return 0x82217D88;
} // Block from 82217D4Ch-82217D88h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82217D88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217D88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217D88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217D88);
		  /* 82217D88h */ case    0:  		/* lis R11, -32256 */
		/* 82217D88h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82217D88h case    0:*/		return 0x82217D8C;
		  /* 82217D8Ch */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82217D8Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82217D8Ch case    1:*/		return 0x82217D90;
		  /* 82217D90h */ case    2:  		/* li R6, 2 */
		/* 82217D90h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 82217D90h case    2:*/		return 0x82217D94;
		  /* 82217D94h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82217D94h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82217D94h case    3:*/		return 0x82217D98;
		  /* 82217D98h */ case    4:  		/* li R5, 1 */
		/* 82217D98h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82217D98h case    4:*/		return 0x82217D9C;
		  /* 82217D9Ch */ case    5:  		/* lfs FR1, <#[R11 + 1804]> */
		/* 82217D9Ch case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x0000070C) );
		/* 82217D9Ch case    5:*/		return 0x82217DA0;
		  /* 82217DA0h */ case    6:  		/* bl 33512 */
		/* 82217DA0h case    6:*/		regs.LR = 0x82217DA4; return 0x82220088;
		/* 82217DA0h case    6:*/		return 0x82217DA4;
		  /* 82217DA4h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82217DA4h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82217DA4h case    7:*/		return 0x82217DA8;
		  /* 82217DA8h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 82217DA8h case    8:*/		if ( regs.CR[0].eq ) { return 0x82217DC4;  }
		/* 82217DA8h case    8:*/		return 0x82217DAC;
		  /* 82217DACh */ case    9:  		/* mr R6, R29 */
		/* 82217DACh case    9:*/		regs.R6 = regs.R29;
		/* 82217DACh case    9:*/		return 0x82217DB0;
		  /* 82217DB0h */ case   10:  		/* mr R5, R30 */
		/* 82217DB0h case   10:*/		regs.R5 = regs.R30;
		/* 82217DB0h case   10:*/		return 0x82217DB4;
		  /* 82217DB4h */ case   11:  		/* mr R4, R31 */
		/* 82217DB4h case   11:*/		regs.R4 = regs.R31;
		/* 82217DB4h case   11:*/		return 0x82217DB8;
		  /* 82217DB8h */ case   12:  		/* li R7, 15133 */
		/* 82217DB8h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3B1D);
		/* 82217DB8h case   12:*/		return 0x82217DBC;
		  /* 82217DBCh */ case   13:  		/* li R3, 0 */
		/* 82217DBCh case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82217DBCh case   13:*/		return 0x82217DC0;
		  /* 82217DC0h */ case   14:  		/* bl -786872 */
		/* 82217DC0h case   14:*/		regs.LR = 0x82217DC4; return 0x82157C08;
		/* 82217DC0h case   14:*/		return 0x82217DC4;
	}
	return 0x82217DC4;
} // Block from 82217D88h-82217DC4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82217DC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217DC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217DC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217DC4);
		  /* 82217DC4h */ case    0:  		/* li R6, 3 */
		/* 82217DC4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82217DC4h case    0:*/		return 0x82217DC8;
		  /* 82217DC8h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82217DC8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82217DC8h case    1:*/		return 0x82217DCC;
		  /* 82217DCCh */ case    2:  		/* li R5, 1 */
		/* 82217DCCh case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82217DCCh case    2:*/		return 0x82217DD0;
		  /* 82217DD0h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82217DD0h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82217DD0h case    3:*/		return 0x82217DD4;
		  /* 82217DD4h */ case    4:  		/* lfs FR1, <#[R1 + 80]> */
		/* 82217DD4h case    4:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000050) );
		/* 82217DD4h case    4:*/		return 0x82217DD8;
		  /* 82217DD8h */ case    5:  		/* bl 33456 */
		/* 82217DD8h case    5:*/		regs.LR = 0x82217DDC; return 0x82220088;
		/* 82217DD8h case    5:*/		return 0x82217DDC;
		  /* 82217DDCh */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 82217DDCh case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82217DDCh case    6:*/		return 0x82217DE0;
		  /* 82217DE0h */ case    7:  		/* bc 12, CR0_EQ, 28 */
		/* 82217DE0h case    7:*/		if ( regs.CR[0].eq ) { return 0x82217DFC;  }
		/* 82217DE0h case    7:*/		return 0x82217DE4;
		  /* 82217DE4h */ case    8:  		/* mr R6, R29 */
		/* 82217DE4h case    8:*/		regs.R6 = regs.R29;
		/* 82217DE4h case    8:*/		return 0x82217DE8;
		  /* 82217DE8h */ case    9:  		/* mr R5, R30 */
		/* 82217DE8h case    9:*/		regs.R5 = regs.R30;
		/* 82217DE8h case    9:*/		return 0x82217DEC;
		  /* 82217DECh */ case   10:  		/* mr R4, R31 */
		/* 82217DECh case   10:*/		regs.R4 = regs.R31;
		/* 82217DECh case   10:*/		return 0x82217DF0;
		  /* 82217DF0h */ case   11:  		/* li R7, 15139 */
		/* 82217DF0h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x3B23);
		/* 82217DF0h case   11:*/		return 0x82217DF4;
		  /* 82217DF4h */ case   12:  		/* li R3, 0 */
		/* 82217DF4h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82217DF4h case   12:*/		return 0x82217DF8;
		  /* 82217DF8h */ case   13:  		/* bl -786928 */
		/* 82217DF8h case   13:*/		regs.LR = 0x82217DFC; return 0x82157C08;
		/* 82217DF8h case   13:*/		return 0x82217DFC;
	}
	return 0x82217DFC;
} // Block from 82217DC4h-82217DFCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 82217DFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217DFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217DFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217DFC);
		  /* 82217DFCh */ case    0:  		/* lis R11, -32256 */
		/* 82217DFCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82217DFCh case    0:*/		return 0x82217E00;
		  /* 82217E00h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82217E00h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82217E00h case    1:*/		return 0x82217E04;
		  /* 82217E04h */ case    2:  		/* li R6, 0 */
		/* 82217E04h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82217E04h case    2:*/		return 0x82217E08;
		  /* 82217E08h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82217E08h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82217E08h case    3:*/		return 0x82217E0C;
		  /* 82217E0Ch */ case    4:  		/* li R5, 2 */
		/* 82217E0Ch case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82217E0Ch case    4:*/		return 0x82217E10;
		  /* 82217E10h */ case    5:  		/* lfs FR1, <#[R11 + 2752]> */
		/* 82217E10h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000AC0) );
		/* 82217E10h case    5:*/		return 0x82217E14;
		  /* 82217E14h */ case    6:  		/* bl 33396 */
		/* 82217E14h case    6:*/		regs.LR = 0x82217E18; return 0x82220088;
		/* 82217E14h case    6:*/		return 0x82217E18;
		  /* 82217E18h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82217E18h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82217E18h case    7:*/		return 0x82217E1C;
		  /* 82217E1Ch */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 82217E1Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x82217E38;  }
		/* 82217E1Ch case    8:*/		return 0x82217E20;
		  /* 82217E20h */ case    9:  		/* mr R6, R29 */
		/* 82217E20h case    9:*/		regs.R6 = regs.R29;
		/* 82217E20h case    9:*/		return 0x82217E24;
		  /* 82217E24h */ case   10:  		/* mr R5, R30 */
		/* 82217E24h case   10:*/		regs.R5 = regs.R30;
		/* 82217E24h case   10:*/		return 0x82217E28;
		  /* 82217E28h */ case   11:  		/* mr R4, R31 */
		/* 82217E28h case   11:*/		regs.R4 = regs.R31;
		/* 82217E28h case   11:*/		return 0x82217E2C;
		  /* 82217E2Ch */ case   12:  		/* li R7, 15145 */
		/* 82217E2Ch case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3B29);
		/* 82217E2Ch case   12:*/		return 0x82217E30;
		  /* 82217E30h */ case   13:  		/* li R3, 0 */
		/* 82217E30h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82217E30h case   13:*/		return 0x82217E34;
		  /* 82217E34h */ case   14:  		/* bl -786988 */
		/* 82217E34h case   14:*/		regs.LR = 0x82217E38; return 0x82157C08;
		/* 82217E34h case   14:*/		return 0x82217E38;
	}
	return 0x82217E38;
} // Block from 82217DFCh-82217E38h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82217E38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217E38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217E38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217E38);
		  /* 82217E38h */ case    0:  		/* lis R11, -32256 */
		/* 82217E38h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82217E38h case    0:*/		return 0x82217E3C;
		  /* 82217E3Ch */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82217E3Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82217E3Ch case    1:*/		return 0x82217E40;
		  /* 82217E40h */ case    2:  		/* li R6, 1 */
		/* 82217E40h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82217E40h case    2:*/		return 0x82217E44;
		  /* 82217E44h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82217E44h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82217E44h case    3:*/		return 0x82217E48;
		  /* 82217E48h */ case    4:  		/* li R5, 2 */
		/* 82217E48h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82217E48h case    4:*/		return 0x82217E4C;
		  /* 82217E4Ch */ case    5:  		/* lfs FR1, <#[R11 + 8444]> */
		/* 82217E4Ch case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x000020FC) );
		/* 82217E4Ch case    5:*/		return 0x82217E50;
		  /* 82217E50h */ case    6:  		/* bl 33336 */
		/* 82217E50h case    6:*/		regs.LR = 0x82217E54; return 0x82220088;
		/* 82217E50h case    6:*/		return 0x82217E54;
		  /* 82217E54h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82217E54h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82217E54h case    7:*/		return 0x82217E58;
		  /* 82217E58h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 82217E58h case    8:*/		if ( regs.CR[0].eq ) { return 0x82217E74;  }
		/* 82217E58h case    8:*/		return 0x82217E5C;
		  /* 82217E5Ch */ case    9:  		/* mr R6, R29 */
		/* 82217E5Ch case    9:*/		regs.R6 = regs.R29;
		/* 82217E5Ch case    9:*/		return 0x82217E60;
		  /* 82217E60h */ case   10:  		/* mr R5, R30 */
		/* 82217E60h case   10:*/		regs.R5 = regs.R30;
		/* 82217E60h case   10:*/		return 0x82217E64;
		  /* 82217E64h */ case   11:  		/* mr R4, R31 */
		/* 82217E64h case   11:*/		regs.R4 = regs.R31;
		/* 82217E64h case   11:*/		return 0x82217E68;
		  /* 82217E68h */ case   12:  		/* li R7, 15151 */
		/* 82217E68h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3B2F);
		/* 82217E68h case   12:*/		return 0x82217E6C;
		  /* 82217E6Ch */ case   13:  		/* li R3, 0 */
		/* 82217E6Ch case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82217E6Ch case   13:*/		return 0x82217E70;
		  /* 82217E70h */ case   14:  		/* bl -787048 */
		/* 82217E70h case   14:*/		regs.LR = 0x82217E74; return 0x82157C08;
		/* 82217E70h case   14:*/		return 0x82217E74;
	}
	return 0x82217E74;
} // Block from 82217E38h-82217E74h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82217E74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217E74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217E74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217E74);
		  /* 82217E74h */ case    0:  		/* lis R11, -32256 */
		/* 82217E74h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82217E74h case    0:*/		return 0x82217E78;
		  /* 82217E78h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82217E78h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82217E78h case    1:*/		return 0x82217E7C;
		  /* 82217E7Ch */ case    2:  		/* li R6, 2 */
		/* 82217E7Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 82217E7Ch case    2:*/		return 0x82217E80;
		  /* 82217E80h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82217E80h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82217E80h case    3:*/		return 0x82217E84;
		  /* 82217E84h */ case    4:  		/* li R5, 2 */
		/* 82217E84h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82217E84h case    4:*/		return 0x82217E88;
		  /* 82217E88h */ case    5:  		/* lfs FR1, <#[R11 + 2964]> */
		/* 82217E88h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000B94) );
		/* 82217E88h case    5:*/		return 0x82217E8C;
		  /* 82217E8Ch */ case    6:  		/* bl 33276 */
		/* 82217E8Ch case    6:*/		regs.LR = 0x82217E90; return 0x82220088;
		/* 82217E8Ch case    6:*/		return 0x82217E90;
		  /* 82217E90h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82217E90h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82217E90h case    7:*/		return 0x82217E94;
		  /* 82217E94h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 82217E94h case    8:*/		if ( regs.CR[0].eq ) { return 0x82217EB0;  }
		/* 82217E94h case    8:*/		return 0x82217E98;
		  /* 82217E98h */ case    9:  		/* mr R6, R29 */
		/* 82217E98h case    9:*/		regs.R6 = regs.R29;
		/* 82217E98h case    9:*/		return 0x82217E9C;
		  /* 82217E9Ch */ case   10:  		/* mr R5, R30 */
		/* 82217E9Ch case   10:*/		regs.R5 = regs.R30;
		/* 82217E9Ch case   10:*/		return 0x82217EA0;
		  /* 82217EA0h */ case   11:  		/* mr R4, R31 */
		/* 82217EA0h case   11:*/		regs.R4 = regs.R31;
		/* 82217EA0h case   11:*/		return 0x82217EA4;
		  /* 82217EA4h */ case   12:  		/* li R7, 15157 */
		/* 82217EA4h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3B35);
		/* 82217EA4h case   12:*/		return 0x82217EA8;
		  /* 82217EA8h */ case   13:  		/* li R3, 0 */
		/* 82217EA8h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82217EA8h case   13:*/		return 0x82217EAC;
		  /* 82217EACh */ case   14:  		/* bl -787108 */
		/* 82217EACh case   14:*/		regs.LR = 0x82217EB0; return 0x82157C08;
		/* 82217EACh case   14:*/		return 0x82217EB0;
	}
	return 0x82217EB0;
} // Block from 82217E74h-82217EB0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82217EB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217EB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217EB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217EB0);
		  /* 82217EB0h */ case    0:  		/* lis R11, -32252 */
		/* 82217EB0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82217EB0h case    0:*/		return 0x82217EB4;
		  /* 82217EB4h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82217EB4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82217EB4h case    1:*/		return 0x82217EB8;
		  /* 82217EB8h */ case    2:  		/* li R6, 3 */
		/* 82217EB8h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82217EB8h case    2:*/		return 0x82217EBC;
		  /* 82217EBCh */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82217EBCh case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82217EBCh case    3:*/		return 0x82217EC0;
		  /* 82217EC0h */ case    4:  		/* li R5, 2 */
		/* 82217EC0h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 82217EC0h case    4:*/		return 0x82217EC4;
		  /* 82217EC4h */ case    5:  		/* lfs FR1, <#[R11 - 5492]> */
		/* 82217EC4h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFEA8C) );
		/* 82217EC4h case    5:*/		return 0x82217EC8;
		  /* 82217EC8h */ case    6:  		/* bl 33216 */
		/* 82217EC8h case    6:*/		regs.LR = 0x82217ECC; return 0x82220088;
		/* 82217EC8h case    6:*/		return 0x82217ECC;
		  /* 82217ECCh */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82217ECCh case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82217ECCh case    7:*/		return 0x82217ED0;
		  /* 82217ED0h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 82217ED0h case    8:*/		if ( regs.CR[0].eq ) { return 0x82217EEC;  }
		/* 82217ED0h case    8:*/		return 0x82217ED4;
		  /* 82217ED4h */ case    9:  		/* mr R6, R29 */
		/* 82217ED4h case    9:*/		regs.R6 = regs.R29;
		/* 82217ED4h case    9:*/		return 0x82217ED8;
		  /* 82217ED8h */ case   10:  		/* mr R5, R30 */
		/* 82217ED8h case   10:*/		regs.R5 = regs.R30;
		/* 82217ED8h case   10:*/		return 0x82217EDC;
		  /* 82217EDCh */ case   11:  		/* mr R4, R31 */
		/* 82217EDCh case   11:*/		regs.R4 = regs.R31;
		/* 82217EDCh case   11:*/		return 0x82217EE0;
		  /* 82217EE0h */ case   12:  		/* li R7, 15163 */
		/* 82217EE0h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3B3B);
		/* 82217EE0h case   12:*/		return 0x82217EE4;
		  /* 82217EE4h */ case   13:  		/* li R3, 0 */
		/* 82217EE4h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82217EE4h case   13:*/		return 0x82217EE8;
		  /* 82217EE8h */ case   14:  		/* bl -787168 */
		/* 82217EE8h case   14:*/		regs.LR = 0x82217EEC; return 0x82157C08;
		/* 82217EE8h case   14:*/		return 0x82217EEC;
	}
	return 0x82217EEC;
} // Block from 82217EB0h-82217EECh (15 instructions)

//////////////////////////////////////////////////////
// Block at 82217EECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217EEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217EEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217EEC);
		  /* 82217EECh */ case    0:  		/* li R6, 0 */
		/* 82217EECh case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82217EECh case    0:*/		return 0x82217EF0;
		  /* 82217EF0h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82217EF0h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82217EF0h case    1:*/		return 0x82217EF4;
		  /* 82217EF4h */ case    2:  		/* li R5, 3 */
		/* 82217EF4h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82217EF4h case    2:*/		return 0x82217EF8;
		  /* 82217EF8h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82217EF8h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82217EF8h case    3:*/		return 0x82217EFC;
		  /* 82217EFCh */ case    4:  		/* fmr FR1, FR29 */
		/* 82217EFCh case    4:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 82217EFCh case    4:*/		return 0x82217F00;
		  /* 82217F00h */ case    5:  		/* bl 33160 */
		/* 82217F00h case    5:*/		regs.LR = 0x82217F04; return 0x82220088;
		/* 82217F00h case    5:*/		return 0x82217F04;
		  /* 82217F04h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 82217F04h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82217F04h case    6:*/		return 0x82217F08;
		  /* 82217F08h */ case    7:  		/* bc 12, CR0_EQ, 28 */
		/* 82217F08h case    7:*/		if ( regs.CR[0].eq ) { return 0x82217F24;  }
		/* 82217F08h case    7:*/		return 0x82217F0C;
		  /* 82217F0Ch */ case    8:  		/* mr R6, R29 */
		/* 82217F0Ch case    8:*/		regs.R6 = regs.R29;
		/* 82217F0Ch case    8:*/		return 0x82217F10;
		  /* 82217F10h */ case    9:  		/* mr R5, R30 */
		/* 82217F10h case    9:*/		regs.R5 = regs.R30;
		/* 82217F10h case    9:*/		return 0x82217F14;
		  /* 82217F14h */ case   10:  		/* mr R4, R31 */
		/* 82217F14h case   10:*/		regs.R4 = regs.R31;
		/* 82217F14h case   10:*/		return 0x82217F18;
		  /* 82217F18h */ case   11:  		/* li R7, 15169 */
		/* 82217F18h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x3B41);
		/* 82217F18h case   11:*/		return 0x82217F1C;
		  /* 82217F1Ch */ case   12:  		/* li R3, 0 */
		/* 82217F1Ch case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82217F1Ch case   12:*/		return 0x82217F20;
		  /* 82217F20h */ case   13:  		/* bl -787224 */
		/* 82217F20h case   13:*/		regs.LR = 0x82217F24; return 0x82157C08;
		/* 82217F20h case   13:*/		return 0x82217F24;
	}
	return 0x82217F24;
} // Block from 82217EECh-82217F24h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82217F24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217F24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217F24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217F24);
		  /* 82217F24h */ case    0:  		/* lis R11, -32256 */
		/* 82217F24h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82217F24h case    0:*/		return 0x82217F28;
		  /* 82217F28h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82217F28h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82217F28h case    1:*/		return 0x82217F2C;
		  /* 82217F2Ch */ case    2:  		/* li R6, 1 */
		/* 82217F2Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82217F2Ch case    2:*/		return 0x82217F30;
		  /* 82217F30h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82217F30h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82217F30h case    3:*/		return 0x82217F34;
		  /* 82217F34h */ case    4:  		/* li R5, 3 */
		/* 82217F34h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82217F34h case    4:*/		return 0x82217F38;
		  /* 82217F38h */ case    5:  		/* lfs FR1, <#[R11 + 8432]> */
		/* 82217F38h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x000020F0) );
		/* 82217F38h case    5:*/		return 0x82217F3C;
		  /* 82217F3Ch */ case    6:  		/* bl 33100 */
		/* 82217F3Ch case    6:*/		regs.LR = 0x82217F40; return 0x82220088;
		/* 82217F3Ch case    6:*/		return 0x82217F40;
		  /* 82217F40h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82217F40h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82217F40h case    7:*/		return 0x82217F44;
		  /* 82217F44h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 82217F44h case    8:*/		if ( regs.CR[0].eq ) { return 0x82217F60;  }
		/* 82217F44h case    8:*/		return 0x82217F48;
		  /* 82217F48h */ case    9:  		/* mr R6, R29 */
		/* 82217F48h case    9:*/		regs.R6 = regs.R29;
		/* 82217F48h case    9:*/		return 0x82217F4C;
		  /* 82217F4Ch */ case   10:  		/* mr R5, R30 */
		/* 82217F4Ch case   10:*/		regs.R5 = regs.R30;
		/* 82217F4Ch case   10:*/		return 0x82217F50;
		  /* 82217F50h */ case   11:  		/* mr R4, R31 */
		/* 82217F50h case   11:*/		regs.R4 = regs.R31;
		/* 82217F50h case   11:*/		return 0x82217F54;
		  /* 82217F54h */ case   12:  		/* li R7, 15175 */
		/* 82217F54h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3B47);
		/* 82217F54h case   12:*/		return 0x82217F58;
		  /* 82217F58h */ case   13:  		/* li R3, 0 */
		/* 82217F58h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82217F58h case   13:*/		return 0x82217F5C;
		  /* 82217F5Ch */ case   14:  		/* bl -787284 */
		/* 82217F5Ch case   14:*/		regs.LR = 0x82217F60; return 0x82157C08;
		/* 82217F5Ch case   14:*/		return 0x82217F60;
	}
	return 0x82217F60;
} // Block from 82217F24h-82217F60h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82217F60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217F60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217F60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217F60);
		  /* 82217F60h */ case    0:  		/* lis R11, -32256 */
		/* 82217F60h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82217F60h case    0:*/		return 0x82217F64;
		  /* 82217F64h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82217F64h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82217F64h case    1:*/		return 0x82217F68;
		  /* 82217F68h */ case    2:  		/* li R6, 2 */
		/* 82217F68h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 82217F68h case    2:*/		return 0x82217F6C;
		  /* 82217F6Ch */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82217F6Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82217F6Ch case    3:*/		return 0x82217F70;
		  /* 82217F70h */ case    4:  		/* li R5, 3 */
		/* 82217F70h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82217F70h case    4:*/		return 0x82217F74;
		  /* 82217F74h */ case    5:  		/* lfs FR1, <#[R11 + 2660]> */
		/* 82217F74h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000A64) );
		/* 82217F74h case    5:*/		return 0x82217F78;
		  /* 82217F78h */ case    6:  		/* bl 33040 */
		/* 82217F78h case    6:*/		regs.LR = 0x82217F7C; return 0x82220088;
		/* 82217F78h case    6:*/		return 0x82217F7C;
		  /* 82217F7Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82217F7Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82217F7Ch case    7:*/		return 0x82217F80;
		  /* 82217F80h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 82217F80h case    8:*/		if ( regs.CR[0].eq ) { return 0x82217F9C;  }
		/* 82217F80h case    8:*/		return 0x82217F84;
		  /* 82217F84h */ case    9:  		/* mr R6, R29 */
		/* 82217F84h case    9:*/		regs.R6 = regs.R29;
		/* 82217F84h case    9:*/		return 0x82217F88;
		  /* 82217F88h */ case   10:  		/* mr R5, R30 */
		/* 82217F88h case   10:*/		regs.R5 = regs.R30;
		/* 82217F88h case   10:*/		return 0x82217F8C;
		  /* 82217F8Ch */ case   11:  		/* mr R4, R31 */
		/* 82217F8Ch case   11:*/		regs.R4 = regs.R31;
		/* 82217F8Ch case   11:*/		return 0x82217F90;
		  /* 82217F90h */ case   12:  		/* li R7, 15181 */
		/* 82217F90h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3B4D);
		/* 82217F90h case   12:*/		return 0x82217F94;
		  /* 82217F94h */ case   13:  		/* li R3, 0 */
		/* 82217F94h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82217F94h case   13:*/		return 0x82217F98;
		  /* 82217F98h */ case   14:  		/* bl -787344 */
		/* 82217F98h case   14:*/		regs.LR = 0x82217F9C; return 0x82157C08;
		/* 82217F98h case   14:*/		return 0x82217F9C;
	}
	return 0x82217F9C;
} // Block from 82217F60h-82217F9Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 82217F9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217F9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217F9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217F9C);
		  /* 82217F9Ch */ case    0:  		/* lis R11, -32256 */
		/* 82217F9Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82217F9Ch case    0:*/		return 0x82217FA0;
		  /* 82217FA0h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82217FA0h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82217FA0h case    1:*/		return 0x82217FA4;
		  /* 82217FA4h */ case    2:  		/* li R6, 3 */
		/* 82217FA4h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82217FA4h case    2:*/		return 0x82217FA8;
		  /* 82217FA8h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82217FA8h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82217FA8h case    3:*/		return 0x82217FAC;
		  /* 82217FACh */ case    4:  		/* li R5, 3 */
		/* 82217FACh case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82217FACh case    4:*/		return 0x82217FB0;
		  /* 82217FB0h */ case    5:  		/* lfs FR1, <#[R11 + 8732]> */
		/* 82217FB0h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x0000221C) );
		/* 82217FB0h case    5:*/		return 0x82217FB4;
		  /* 82217FB4h */ case    6:  		/* bl 32980 */
		/* 82217FB4h case    6:*/		regs.LR = 0x82217FB8; return 0x82220088;
		/* 82217FB4h case    6:*/		return 0x82217FB8;
		  /* 82217FB8h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82217FB8h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82217FB8h case    7:*/		return 0x82217FBC;
		  /* 82217FBCh */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 82217FBCh case    8:*/		if ( regs.CR[0].eq ) { return 0x82217FD8;  }
		/* 82217FBCh case    8:*/		return 0x82217FC0;
		  /* 82217FC0h */ case    9:  		/* mr R6, R29 */
		/* 82217FC0h case    9:*/		regs.R6 = regs.R29;
		/* 82217FC0h case    9:*/		return 0x82217FC4;
		  /* 82217FC4h */ case   10:  		/* mr R5, R30 */
		/* 82217FC4h case   10:*/		regs.R5 = regs.R30;
		/* 82217FC4h case   10:*/		return 0x82217FC8;
		  /* 82217FC8h */ case   11:  		/* mr R4, R31 */
		/* 82217FC8h case   11:*/		regs.R4 = regs.R31;
		/* 82217FC8h case   11:*/		return 0x82217FCC;
		  /* 82217FCCh */ case   12:  		/* li R7, 15187 */
		/* 82217FCCh case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3B53);
		/* 82217FCCh case   12:*/		return 0x82217FD0;
		  /* 82217FD0h */ case   13:  		/* li R3, 0 */
		/* 82217FD0h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82217FD0h case   13:*/		return 0x82217FD4;
		  /* 82217FD4h */ case   14:  		/* bl -787404 */
		/* 82217FD4h case   14:*/		regs.LR = 0x82217FD8; return 0x82157C08;
		/* 82217FD4h case   14:*/		return 0x82217FD8;
	}
	return 0x82217FD8;
} // Block from 82217F9Ch-82217FD8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82217FD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82217FD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82217FD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82217FD8);
		  /* 82217FD8h */ case    0:  		/* lis R11, -32252 */
		/* 82217FD8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82217FD8h case    0:*/		return 0x82217FDC;
		  /* 82217FDCh */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82217FDCh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82217FDCh case    1:*/		return 0x82217FE0;
		  /* 82217FE0h */ case    2:  		/* li R6, 0 */
		/* 82217FE0h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82217FE0h case    2:*/		return 0x82217FE4;
		  /* 82217FE4h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82217FE4h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82217FE4h case    3:*/		return 0x82217FE8;
		  /* 82217FE8h */ case    4:  		/* li R5, 4 */
		/* 82217FE8h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82217FE8h case    4:*/		return 0x82217FEC;
		  /* 82217FECh */ case    5:  		/* lfs FR1, <#[R11 - 5496]> */
		/* 82217FECh case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFEA88) );
		/* 82217FECh case    5:*/		return 0x82217FF0;
		  /* 82217FF0h */ case    6:  		/* bl 32920 */
		/* 82217FF0h case    6:*/		regs.LR = 0x82217FF4; return 0x82220088;
		/* 82217FF0h case    6:*/		return 0x82217FF4;
		  /* 82217FF4h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82217FF4h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82217FF4h case    7:*/		return 0x82217FF8;
		  /* 82217FF8h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 82217FF8h case    8:*/		if ( regs.CR[0].eq ) { return 0x82218014;  }
		/* 82217FF8h case    8:*/		return 0x82217FFC;
		  /* 82217FFCh */ case    9:  		/* mr R6, R29 */
		/* 82217FFCh case    9:*/		regs.R6 = regs.R29;
		/* 82217FFCh case    9:*/		return 0x82218000;
		  /* 82218000h */ case   10:  		/* mr R5, R30 */
		/* 82218000h case   10:*/		regs.R5 = regs.R30;
		/* 82218000h case   10:*/		return 0x82218004;
		  /* 82218004h */ case   11:  		/* mr R4, R31 */
		/* 82218004h case   11:*/		regs.R4 = regs.R31;
		/* 82218004h case   11:*/		return 0x82218008;
		  /* 82218008h */ case   12:  		/* li R7, 15195 */
		/* 82218008h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3B5B);
		/* 82218008h case   12:*/		return 0x8221800C;
		  /* 8221800Ch */ case   13:  		/* li R3, 0 */
		/* 8221800Ch case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221800Ch case   13:*/		return 0x82218010;
		  /* 82218010h */ case   14:  		/* bl -787464 */
		/* 82218010h case   14:*/		regs.LR = 0x82218014; return 0x82157C08;
		/* 82218010h case   14:*/		return 0x82218014;
	}
	return 0x82218014;
} // Block from 82217FD8h-82218014h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82218014h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218014( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218014) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218014);
		  /* 82218014h */ case    0:  		/* lis R11, -32252 */
		/* 82218014h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82218014h case    0:*/		return 0x82218018;
		  /* 82218018h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82218018h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82218018h case    1:*/		return 0x8221801C;
		  /* 8221801Ch */ case    2:  		/* li R6, 1 */
		/* 8221801Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8221801Ch case    2:*/		return 0x82218020;
		  /* 82218020h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82218020h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82218020h case    3:*/		return 0x82218024;
		  /* 82218024h */ case    4:  		/* li R5, 4 */
		/* 82218024h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82218024h case    4:*/		return 0x82218028;
		  /* 82218028h */ case    5:  		/* lfs FR1, <#[R11 - 5500]> */
		/* 82218028h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFEA84) );
		/* 82218028h case    5:*/		return 0x8221802C;
		  /* 8221802Ch */ case    6:  		/* bl 32860 */
		/* 8221802Ch case    6:*/		regs.LR = 0x82218030; return 0x82220088;
		/* 8221802Ch case    6:*/		return 0x82218030;
		  /* 82218030h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82218030h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82218030h case    7:*/		return 0x82218034;
		  /* 82218034h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 82218034h case    8:*/		if ( regs.CR[0].eq ) { return 0x82218050;  }
		/* 82218034h case    8:*/		return 0x82218038;
		  /* 82218038h */ case    9:  		/* mr R6, R29 */
		/* 82218038h case    9:*/		regs.R6 = regs.R29;
		/* 82218038h case    9:*/		return 0x8221803C;
		  /* 8221803Ch */ case   10:  		/* mr R5, R30 */
		/* 8221803Ch case   10:*/		regs.R5 = regs.R30;
		/* 8221803Ch case   10:*/		return 0x82218040;
		  /* 82218040h */ case   11:  		/* mr R4, R31 */
		/* 82218040h case   11:*/		regs.R4 = regs.R31;
		/* 82218040h case   11:*/		return 0x82218044;
		  /* 82218044h */ case   12:  		/* li R7, 15203 */
		/* 82218044h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3B63);
		/* 82218044h case   12:*/		return 0x82218048;
		  /* 82218048h */ case   13:  		/* li R3, 0 */
		/* 82218048h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82218048h case   13:*/		return 0x8221804C;
		  /* 8221804Ch */ case   14:  		/* bl -787524 */
		/* 8221804Ch case   14:*/		regs.LR = 0x82218050; return 0x82157C08;
		/* 8221804Ch case   14:*/		return 0x82218050;
	}
	return 0x82218050;
} // Block from 82218014h-82218050h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82218050h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218050);
		  /* 82218050h */ case    0:  		/* lis R11, -32252 */
		/* 82218050h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82218050h case    0:*/		return 0x82218054;
		  /* 82218054h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82218054h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82218054h case    1:*/		return 0x82218058;
		  /* 82218058h */ case    2:  		/* li R6, 2 */
		/* 82218058h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 82218058h case    2:*/		return 0x8221805C;
		  /* 8221805Ch */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 8221805Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 8221805Ch case    3:*/		return 0x82218060;
		  /* 82218060h */ case    4:  		/* li R5, 4 */
		/* 82218060h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82218060h case    4:*/		return 0x82218064;
		  /* 82218064h */ case    5:  		/* lfs FR1, <#[R11 - 5504]> */
		/* 82218064h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFEA80) );
		/* 82218064h case    5:*/		return 0x82218068;
		  /* 82218068h */ case    6:  		/* bl 32800 */
		/* 82218068h case    6:*/		regs.LR = 0x8221806C; return 0x82220088;
		/* 82218068h case    6:*/		return 0x8221806C;
		  /* 8221806Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 8221806Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8221806Ch case    7:*/		return 0x82218070;
		  /* 82218070h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 82218070h case    8:*/		if ( regs.CR[0].eq ) { return 0x8221808C;  }
		/* 82218070h case    8:*/		return 0x82218074;
		  /* 82218074h */ case    9:  		/* mr R6, R29 */
		/* 82218074h case    9:*/		regs.R6 = regs.R29;
		/* 82218074h case    9:*/		return 0x82218078;
		  /* 82218078h */ case   10:  		/* mr R5, R30 */
		/* 82218078h case   10:*/		regs.R5 = regs.R30;
		/* 82218078h case   10:*/		return 0x8221807C;
		  /* 8221807Ch */ case   11:  		/* mr R4, R31 */
		/* 8221807Ch case   11:*/		regs.R4 = regs.R31;
		/* 8221807Ch case   11:*/		return 0x82218080;
		  /* 82218080h */ case   12:  		/* li R7, 15211 */
		/* 82218080h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3B6B);
		/* 82218080h case   12:*/		return 0x82218084;
		  /* 82218084h */ case   13:  		/* li R3, 0 */
		/* 82218084h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82218084h case   13:*/		return 0x82218088;
		  /* 82218088h */ case   14:  		/* bl -787584 */
		/* 82218088h case   14:*/		regs.LR = 0x8221808C; return 0x82157C08;
		/* 82218088h case   14:*/		return 0x8221808C;
	}
	return 0x8221808C;
} // Block from 82218050h-8221808Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8221808Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221808C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221808C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221808C);
		  /* 8221808Ch */ case    0:  		/* li R6, 3 */
		/* 8221808Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 8221808Ch case    0:*/		return 0x82218090;
		  /* 82218090h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82218090h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82218090h case    1:*/		return 0x82218094;
		  /* 82218094h */ case    2:  		/* li R5, 4 */
		/* 82218094h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82218094h case    2:*/		return 0x82218098;
		  /* 82218098h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82218098h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82218098h case    3:*/		return 0x8221809C;
		  /* 8221809Ch */ case    4:  		/* fmr FR1, FR28 */
		/* 8221809Ch case    4:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR28);
		/* 8221809Ch case    4:*/		return 0x822180A0;
		  /* 822180A0h */ case    5:  		/* bl 32744 */
		/* 822180A0h case    5:*/		regs.LR = 0x822180A4; return 0x82220088;
		/* 822180A0h case    5:*/		return 0x822180A4;
		  /* 822180A4h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 822180A4h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 822180A4h case    6:*/		return 0x822180A8;
		  /* 822180A8h */ case    7:  		/* bc 12, CR0_EQ, 28 */
		/* 822180A8h case    7:*/		if ( regs.CR[0].eq ) { return 0x822180C4;  }
		/* 822180A8h case    7:*/		return 0x822180AC;
		  /* 822180ACh */ case    8:  		/* mr R6, R29 */
		/* 822180ACh case    8:*/		regs.R6 = regs.R29;
		/* 822180ACh case    8:*/		return 0x822180B0;
		  /* 822180B0h */ case    9:  		/* mr R5, R30 */
		/* 822180B0h case    9:*/		regs.R5 = regs.R30;
		/* 822180B0h case    9:*/		return 0x822180B4;
		  /* 822180B4h */ case   10:  		/* mr R4, R31 */
		/* 822180B4h case   10:*/		regs.R4 = regs.R31;
		/* 822180B4h case   10:*/		return 0x822180B8;
		  /* 822180B8h */ case   11:  		/* li R7, 15217 */
		/* 822180B8h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x3B71);
		/* 822180B8h case   11:*/		return 0x822180BC;
		  /* 822180BCh */ case   12:  		/* li R3, 0 */
		/* 822180BCh case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822180BCh case   12:*/		return 0x822180C0;
		  /* 822180C0h */ case   13:  		/* bl -787640 */
		/* 822180C0h case   13:*/		regs.LR = 0x822180C4; return 0x82157C08;
		/* 822180C0h case   13:*/		return 0x822180C4;
	}
	return 0x822180C4;
} // Block from 8221808Ch-822180C4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 822180C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822180C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822180C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822180C4);
		  /* 822180C4h */ case    0:  		/* lis R11, -32252 */
		/* 822180C4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822180C4h case    0:*/		return 0x822180C8;
		  /* 822180C8h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 822180C8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 822180C8h case    1:*/		return 0x822180CC;
		  /* 822180CCh */ case    2:  		/* li R6, 0 */
		/* 822180CCh case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822180CCh case    2:*/		return 0x822180D0;
		  /* 822180D0h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 822180D0h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 822180D0h case    3:*/		return 0x822180D4;
		  /* 822180D4h */ case    4:  		/* li R5, 5 */
		/* 822180D4h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 822180D4h case    4:*/		return 0x822180D8;
		  /* 822180D8h */ case    5:  		/* lfs FR31, <#[R11 - 5508]> */
		/* 822180D8h case    5:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R11 + 0xFFFFEA7C) );
		/* 822180D8h case    5:*/		return 0x822180DC;
		  /* 822180DCh */ case    6:  		/* fmr FR1, FR31 */
		/* 822180DCh case    6:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 822180DCh case    6:*/		return 0x822180E0;
		  /* 822180E0h */ case    7:  		/* bl 32680 */
		/* 822180E0h case    7:*/		regs.LR = 0x822180E4; return 0x82220088;
		/* 822180E0h case    7:*/		return 0x822180E4;
		  /* 822180E4h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 822180E4h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 822180E4h case    8:*/		return 0x822180E8;
		  /* 822180E8h */ case    9:  		/* bc 12, CR0_EQ, 28 */
		/* 822180E8h case    9:*/		if ( regs.CR[0].eq ) { return 0x82218104;  }
		/* 822180E8h case    9:*/		return 0x822180EC;
		  /* 822180ECh */ case   10:  		/* mr R6, R29 */
		/* 822180ECh case   10:*/		regs.R6 = regs.R29;
		/* 822180ECh case   10:*/		return 0x822180F0;
		  /* 822180F0h */ case   11:  		/* mr R5, R30 */
		/* 822180F0h case   11:*/		regs.R5 = regs.R30;
		/* 822180F0h case   11:*/		return 0x822180F4;
		  /* 822180F4h */ case   12:  		/* mr R4, R31 */
		/* 822180F4h case   12:*/		regs.R4 = regs.R31;
		/* 822180F4h case   12:*/		return 0x822180F8;
		  /* 822180F8h */ case   13:  		/* li R7, 15223 */
		/* 822180F8h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x3B77);
		/* 822180F8h case   13:*/		return 0x822180FC;
		  /* 822180FCh */ case   14:  		/* li R3, 0 */
		/* 822180FCh case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822180FCh case   14:*/		return 0x82218100;
		  /* 82218100h */ case   15:  		/* bl -787704 */
		/* 82218100h case   15:*/		regs.LR = 0x82218104; return 0x82157C08;
		/* 82218100h case   15:*/		return 0x82218104;
	}
	return 0x82218104;
} // Block from 822180C4h-82218104h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82218104h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218104( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218104) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218104);
		  /* 82218104h */ case    0:  		/* li R6, 1 */
		/* 82218104h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82218104h case    0:*/		return 0x82218108;
		  /* 82218108h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82218108h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82218108h case    1:*/		return 0x8221810C;
		  /* 8221810Ch */ case    2:  		/* li R5, 5 */
		/* 8221810Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 8221810Ch case    2:*/		return 0x82218110;
		  /* 82218110h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82218110h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82218110h case    3:*/		return 0x82218114;
		  /* 82218114h */ case    4:  		/* fmr FR1, FR31 */
		/* 82218114h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82218114h case    4:*/		return 0x82218118;
		  /* 82218118h */ case    5:  		/* bl 32624 */
		/* 82218118h case    5:*/		regs.LR = 0x8221811C; return 0x82220088;
		/* 82218118h case    5:*/		return 0x8221811C;
		  /* 8221811Ch */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 8221811Ch case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8221811Ch case    6:*/		return 0x82218120;
		  /* 82218120h */ case    7:  		/* bc 12, CR0_EQ, 28 */
		/* 82218120h case    7:*/		if ( regs.CR[0].eq ) { return 0x8221813C;  }
		/* 82218120h case    7:*/		return 0x82218124;
		  /* 82218124h */ case    8:  		/* mr R6, R29 */
		/* 82218124h case    8:*/		regs.R6 = regs.R29;
		/* 82218124h case    8:*/		return 0x82218128;
		  /* 82218128h */ case    9:  		/* mr R5, R30 */
		/* 82218128h case    9:*/		regs.R5 = regs.R30;
		/* 82218128h case    9:*/		return 0x8221812C;
		  /* 8221812Ch */ case   10:  		/* mr R4, R31 */
		/* 8221812Ch case   10:*/		regs.R4 = regs.R31;
		/* 8221812Ch case   10:*/		return 0x82218130;
		  /* 82218130h */ case   11:  		/* li R7, 15229 */
		/* 82218130h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x3B7D);
		/* 82218130h case   11:*/		return 0x82218134;
		  /* 82218134h */ case   12:  		/* li R3, 0 */
		/* 82218134h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82218134h case   12:*/		return 0x82218138;
		  /* 82218138h */ case   13:  		/* bl -787760 */
		/* 82218138h case   13:*/		regs.LR = 0x8221813C; return 0x82157C08;
		/* 82218138h case   13:*/		return 0x8221813C;
	}
	return 0x8221813C;
} // Block from 82218104h-8221813Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8221813Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221813C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221813C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221813C);
		  /* 8221813Ch */ case    0:  		/* li R6, 2 */
		/* 8221813Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 8221813Ch case    0:*/		return 0x82218140;
		  /* 82218140h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82218140h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82218140h case    1:*/		return 0x82218144;
		  /* 82218144h */ case    2:  		/* li R5, 5 */
		/* 82218144h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 82218144h case    2:*/		return 0x82218148;
		  /* 82218148h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82218148h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82218148h case    3:*/		return 0x8221814C;
		  /* 8221814Ch */ case    4:  		/* fmr FR1, FR31 */
		/* 8221814Ch case    4:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8221814Ch case    4:*/		return 0x82218150;
		  /* 82218150h */ case    5:  		/* bl 32568 */
		/* 82218150h case    5:*/		regs.LR = 0x82218154; return 0x82220088;
		/* 82218150h case    5:*/		return 0x82218154;
		  /* 82218154h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 82218154h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82218154h case    6:*/		return 0x82218158;
		  /* 82218158h */ case    7:  		/* bc 12, CR0_EQ, 28 */
		/* 82218158h case    7:*/		if ( regs.CR[0].eq ) { return 0x82218174;  }
		/* 82218158h case    7:*/		return 0x8221815C;
		  /* 8221815Ch */ case    8:  		/* mr R6, R29 */
		/* 8221815Ch case    8:*/		regs.R6 = regs.R29;
		/* 8221815Ch case    8:*/		return 0x82218160;
		  /* 82218160h */ case    9:  		/* mr R5, R30 */
		/* 82218160h case    9:*/		regs.R5 = regs.R30;
		/* 82218160h case    9:*/		return 0x82218164;
		  /* 82218164h */ case   10:  		/* mr R4, R31 */
		/* 82218164h case   10:*/		regs.R4 = regs.R31;
		/* 82218164h case   10:*/		return 0x82218168;
		  /* 82218168h */ case   11:  		/* li R7, 15235 */
		/* 82218168h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x3B83);
		/* 82218168h case   11:*/		return 0x8221816C;
		  /* 8221816Ch */ case   12:  		/* li R3, 0 */
		/* 8221816Ch case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221816Ch case   12:*/		return 0x82218170;
		  /* 82218170h */ case   13:  		/* bl -787816 */
		/* 82218170h case   13:*/		regs.LR = 0x82218174; return 0x82157C08;
		/* 82218170h case   13:*/		return 0x82218174;
	}
	return 0x82218174;
} // Block from 8221813Ch-82218174h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82218174h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218174( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218174) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218174);
		  /* 82218174h */ case    0:  		/* li R6, 3 */
		/* 82218174h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82218174h case    0:*/		return 0x82218178;
		  /* 82218178h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82218178h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82218178h case    1:*/		return 0x8221817C;
		  /* 8221817Ch */ case    2:  		/* li R5, 5 */
		/* 8221817Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x5);
		/* 8221817Ch case    2:*/		return 0x82218180;
		  /* 82218180h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82218180h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82218180h case    3:*/		return 0x82218184;
		  /* 82218184h */ case    4:  		/* fmr FR1, FR30 */
		/* 82218184h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 82218184h case    4:*/		return 0x82218188;
		  /* 82218188h */ case    5:  		/* bl 32512 */
		/* 82218188h case    5:*/		regs.LR = 0x8221818C; return 0x82220088;
		/* 82218188h case    5:*/		return 0x8221818C;
		  /* 8221818Ch */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 8221818Ch case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8221818Ch case    6:*/		return 0x82218190;
		  /* 82218190h */ case    7:  		/* bc 12, CR0_EQ, 28 */
		/* 82218190h case    7:*/		if ( regs.CR[0].eq ) { return 0x822181AC;  }
		/* 82218190h case    7:*/		return 0x82218194;
		  /* 82218194h */ case    8:  		/* mr R6, R29 */
		/* 82218194h case    8:*/		regs.R6 = regs.R29;
		/* 82218194h case    8:*/		return 0x82218198;
		  /* 82218198h */ case    9:  		/* mr R5, R30 */
		/* 82218198h case    9:*/		regs.R5 = regs.R30;
		/* 82218198h case    9:*/		return 0x8221819C;
		  /* 8221819Ch */ case   10:  		/* mr R4, R31 */
		/* 8221819Ch case   10:*/		regs.R4 = regs.R31;
		/* 8221819Ch case   10:*/		return 0x822181A0;
		  /* 822181A0h */ case   11:  		/* li R7, 15241 */
		/* 822181A0h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x3B89);
		/* 822181A0h case   11:*/		return 0x822181A4;
		  /* 822181A4h */ case   12:  		/* li R3, 0 */
		/* 822181A4h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822181A4h case   12:*/		return 0x822181A8;
		  /* 822181A8h */ case   13:  		/* bl -787872 */
		/* 822181A8h case   13:*/		regs.LR = 0x822181AC; return 0x82157C08;
		/* 822181A8h case   13:*/		return 0x822181AC;
	}
	return 0x822181AC;
} // Block from 82218174h-822181ACh (14 instructions)

//////////////////////////////////////////////////////
// Block at 822181ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822181AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822181AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822181AC);
		  /* 822181ACh */ case    0:  		/* li R6, 0 */
		/* 822181ACh case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 822181ACh case    0:*/		return 0x822181B0;
		  /* 822181B0h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 822181B0h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 822181B0h case    1:*/		return 0x822181B4;
		  /* 822181B4h */ case    2:  		/* li R5, 6 */
		/* 822181B4h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 822181B4h case    2:*/		return 0x822181B8;
		  /* 822181B8h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 822181B8h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 822181B8h case    3:*/		return 0x822181BC;
		  /* 822181BCh */ case    4:  		/* fmr FR1, FR30 */
		/* 822181BCh case    4:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 822181BCh case    4:*/		return 0x822181C0;
		  /* 822181C0h */ case    5:  		/* bl 32456 */
		/* 822181C0h case    5:*/		regs.LR = 0x822181C4; return 0x82220088;
		/* 822181C0h case    5:*/		return 0x822181C4;
		  /* 822181C4h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 822181C4h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 822181C4h case    6:*/		return 0x822181C8;
		  /* 822181C8h */ case    7:  		/* bc 12, CR0_EQ, 28 */
		/* 822181C8h case    7:*/		if ( regs.CR[0].eq ) { return 0x822181E4;  }
		/* 822181C8h case    7:*/		return 0x822181CC;
		  /* 822181CCh */ case    8:  		/* mr R6, R29 */
		/* 822181CCh case    8:*/		regs.R6 = regs.R29;
		/* 822181CCh case    8:*/		return 0x822181D0;
		  /* 822181D0h */ case    9:  		/* mr R5, R30 */
		/* 822181D0h case    9:*/		regs.R5 = regs.R30;
		/* 822181D0h case    9:*/		return 0x822181D4;
		  /* 822181D4h */ case   10:  		/* mr R4, R31 */
		/* 822181D4h case   10:*/		regs.R4 = regs.R31;
		/* 822181D4h case   10:*/		return 0x822181D8;
		  /* 822181D8h */ case   11:  		/* li R7, 15247 */
		/* 822181D8h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x3B8F);
		/* 822181D8h case   11:*/		return 0x822181DC;
		  /* 822181DCh */ case   12:  		/* li R3, 0 */
		/* 822181DCh case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822181DCh case   12:*/		return 0x822181E0;
		  /* 822181E0h */ case   13:  		/* bl -787928 */
		/* 822181E0h case   13:*/		regs.LR = 0x822181E4; return 0x82157C08;
		/* 822181E0h case   13:*/		return 0x822181E4;
	}
	return 0x822181E4;
} // Block from 822181ACh-822181E4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 822181E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822181E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822181E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822181E4);
		  /* 822181E4h */ case    0:  		/* lis R11, -32252 */
		/* 822181E4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822181E4h case    0:*/		return 0x822181E8;
		  /* 822181E8h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 822181E8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 822181E8h case    1:*/		return 0x822181EC;
		  /* 822181ECh */ case    2:  		/* li R6, 1 */
		/* 822181ECh case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 822181ECh case    2:*/		return 0x822181F0;
		  /* 822181F0h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 822181F0h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 822181F0h case    3:*/		return 0x822181F4;
		  /* 822181F4h */ case    4:  		/* li R5, 6 */
		/* 822181F4h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 822181F4h case    4:*/		return 0x822181F8;
		  /* 822181F8h */ case    5:  		/* lfs FR1, <#[R11 - 5512]> */
		/* 822181F8h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFEA78) );
		/* 822181F8h case    5:*/		return 0x822181FC;
		  /* 822181FCh */ case    6:  		/* bl 32396 */
		/* 822181FCh case    6:*/		regs.LR = 0x82218200; return 0x82220088;
		/* 822181FCh case    6:*/		return 0x82218200;
		  /* 82218200h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82218200h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82218200h case    7:*/		return 0x82218204;
		  /* 82218204h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 82218204h case    8:*/		if ( regs.CR[0].eq ) { return 0x82218220;  }
		/* 82218204h case    8:*/		return 0x82218208;
		  /* 82218208h */ case    9:  		/* mr R6, R29 */
		/* 82218208h case    9:*/		regs.R6 = regs.R29;
		/* 82218208h case    9:*/		return 0x8221820C;
		  /* 8221820Ch */ case   10:  		/* mr R5, R30 */
		/* 8221820Ch case   10:*/		regs.R5 = regs.R30;
		/* 8221820Ch case   10:*/		return 0x82218210;
		  /* 82218210h */ case   11:  		/* mr R4, R31 */
		/* 82218210h case   11:*/		regs.R4 = regs.R31;
		/* 82218210h case   11:*/		return 0x82218214;
		  /* 82218214h */ case   12:  		/* li R7, 15253 */
		/* 82218214h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3B95);
		/* 82218214h case   12:*/		return 0x82218218;
		  /* 82218218h */ case   13:  		/* li R3, 0 */
		/* 82218218h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82218218h case   13:*/		return 0x8221821C;
		  /* 8221821Ch */ case   14:  		/* bl -787988 */
		/* 8221821Ch case   14:*/		regs.LR = 0x82218220; return 0x82157C08;
		/* 8221821Ch case   14:*/		return 0x82218220;
	}
	return 0x82218220;
} // Block from 822181E4h-82218220h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82218220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218220);
		  /* 82218220h */ case    0:  		/* lis R11, -32252 */
		/* 82218220h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82218220h case    0:*/		return 0x82218224;
		  /* 82218224h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82218224h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82218224h case    1:*/		return 0x82218228;
		  /* 82218228h */ case    2:  		/* li R6, 2 */
		/* 82218228h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 82218228h case    2:*/		return 0x8221822C;
		  /* 8221822Ch */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 8221822Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 8221822Ch case    3:*/		return 0x82218230;
		  /* 82218230h */ case    4:  		/* li R5, 6 */
		/* 82218230h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 82218230h case    4:*/		return 0x82218234;
		  /* 82218234h */ case    5:  		/* lfs FR1, <#[R11 - 5516]> */
		/* 82218234h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFEA74) );
		/* 82218234h case    5:*/		return 0x82218238;
		  /* 82218238h */ case    6:  		/* bl 32336 */
		/* 82218238h case    6:*/		regs.LR = 0x8221823C; return 0x82220088;
		/* 82218238h case    6:*/		return 0x8221823C;
		  /* 8221823Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 8221823Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8221823Ch case    7:*/		return 0x82218240;
		  /* 82218240h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 82218240h case    8:*/		if ( regs.CR[0].eq ) { return 0x8221825C;  }
		/* 82218240h case    8:*/		return 0x82218244;
		  /* 82218244h */ case    9:  		/* mr R6, R29 */
		/* 82218244h case    9:*/		regs.R6 = regs.R29;
		/* 82218244h case    9:*/		return 0x82218248;
		  /* 82218248h */ case   10:  		/* mr R5, R30 */
		/* 82218248h case   10:*/		regs.R5 = regs.R30;
		/* 82218248h case   10:*/		return 0x8221824C;
		  /* 8221824Ch */ case   11:  		/* mr R4, R31 */
		/* 8221824Ch case   11:*/		regs.R4 = regs.R31;
		/* 8221824Ch case   11:*/		return 0x82218250;
		  /* 82218250h */ case   12:  		/* li R7, 15259 */
		/* 82218250h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3B9B);
		/* 82218250h case   12:*/		return 0x82218254;
		  /* 82218254h */ case   13:  		/* li R3, 0 */
		/* 82218254h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82218254h case   13:*/		return 0x82218258;
		  /* 82218258h */ case   14:  		/* bl -788048 */
		/* 82218258h case   14:*/		regs.LR = 0x8221825C; return 0x82157C08;
		/* 82218258h case   14:*/		return 0x8221825C;
	}
	return 0x8221825C;
} // Block from 82218220h-8221825Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8221825Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221825C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221825C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221825C);
		  /* 8221825Ch */ case    0:  		/* li R6, 3 */
		/* 8221825Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 8221825Ch case    0:*/		return 0x82218260;
		  /* 82218260h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82218260h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82218260h case    1:*/		return 0x82218264;
		  /* 82218264h */ case    2:  		/* li R5, 6 */
		/* 82218264h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 82218264h case    2:*/		return 0x82218268;
		  /* 82218268h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82218268h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82218268h case    3:*/		return 0x8221826C;
		  /* 8221826Ch */ case    4:  		/* fmr FR1, FR30 */
		/* 8221826Ch case    4:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 8221826Ch case    4:*/		return 0x82218270;
		  /* 82218270h */ case    5:  		/* bl 32280 */
		/* 82218270h case    5:*/		regs.LR = 0x82218274; return 0x82220088;
		/* 82218270h case    5:*/		return 0x82218274;
		  /* 82218274h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 82218274h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82218274h case    6:*/		return 0x82218278;
		  /* 82218278h */ case    7:  		/* bc 12, CR0_EQ, 28 */
		/* 82218278h case    7:*/		if ( regs.CR[0].eq ) { return 0x82218294;  }
		/* 82218278h case    7:*/		return 0x8221827C;
		  /* 8221827Ch */ case    8:  		/* mr R6, R29 */
		/* 8221827Ch case    8:*/		regs.R6 = regs.R29;
		/* 8221827Ch case    8:*/		return 0x82218280;
		  /* 82218280h */ case    9:  		/* mr R5, R30 */
		/* 82218280h case    9:*/		regs.R5 = regs.R30;
		/* 82218280h case    9:*/		return 0x82218284;
		  /* 82218284h */ case   10:  		/* mr R4, R31 */
		/* 82218284h case   10:*/		regs.R4 = regs.R31;
		/* 82218284h case   10:*/		return 0x82218288;
		  /* 82218288h */ case   11:  		/* li R7, 15265 */
		/* 82218288h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x3BA1);
		/* 82218288h case   11:*/		return 0x8221828C;
		  /* 8221828Ch */ case   12:  		/* li R3, 0 */
		/* 8221828Ch case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221828Ch case   12:*/		return 0x82218290;
		  /* 82218290h */ case   13:  		/* bl -788104 */
		/* 82218290h case   13:*/		regs.LR = 0x82218294; return 0x82157C08;
		/* 82218290h case   13:*/		return 0x82218294;
	}
	return 0x82218294;
} // Block from 8221825Ch-82218294h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82218294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218294);
		  /* 82218294h */ case    0:  		/* lis R11, -32252 */
		/* 82218294h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82218294h case    0:*/		return 0x82218298;
		  /* 82218298h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82218298h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82218298h case    1:*/		return 0x8221829C;
		  /* 8221829Ch */ case    2:  		/* li R6, 0 */
		/* 8221829Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8221829Ch case    2:*/		return 0x822182A0;
		  /* 822182A0h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 822182A0h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 822182A0h case    3:*/		return 0x822182A4;
		  /* 822182A4h */ case    4:  		/* li R5, 7 */
		/* 822182A4h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 822182A4h case    4:*/		return 0x822182A8;
		  /* 822182A8h */ case    5:  		/* lfs FR1, <#[R11 - 5520]> */
		/* 822182A8h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFEA70) );
		/* 822182A8h case    5:*/		return 0x822182AC;
		  /* 822182ACh */ case    6:  		/* bl 32220 */
		/* 822182ACh case    6:*/		regs.LR = 0x822182B0; return 0x82220088;
		/* 822182ACh case    6:*/		return 0x822182B0;
		  /* 822182B0h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 822182B0h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 822182B0h case    7:*/		return 0x822182B4;
		  /* 822182B4h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 822182B4h case    8:*/		if ( regs.CR[0].eq ) { return 0x822182D0;  }
		/* 822182B4h case    8:*/		return 0x822182B8;
		  /* 822182B8h */ case    9:  		/* mr R6, R29 */
		/* 822182B8h case    9:*/		regs.R6 = regs.R29;
		/* 822182B8h case    9:*/		return 0x822182BC;
		  /* 822182BCh */ case   10:  		/* mr R5, R30 */
		/* 822182BCh case   10:*/		regs.R5 = regs.R30;
		/* 822182BCh case   10:*/		return 0x822182C0;
		  /* 822182C0h */ case   11:  		/* mr R4, R31 */
		/* 822182C0h case   11:*/		regs.R4 = regs.R31;
		/* 822182C0h case   11:*/		return 0x822182C4;
		  /* 822182C4h */ case   12:  		/* li R7, 15271 */
		/* 822182C4h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3BA7);
		/* 822182C4h case   12:*/		return 0x822182C8;
		  /* 822182C8h */ case   13:  		/* li R3, 0 */
		/* 822182C8h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822182C8h case   13:*/		return 0x822182CC;
		  /* 822182CCh */ case   14:  		/* bl -788164 */
		/* 822182CCh case   14:*/		regs.LR = 0x822182D0; return 0x82157C08;
		/* 822182CCh case   14:*/		return 0x822182D0;
	}
	return 0x822182D0;
} // Block from 82218294h-822182D0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 822182D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822182D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822182D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822182D0);
		  /* 822182D0h */ case    0:  		/* lis R11, -32252 */
		/* 822182D0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822182D0h case    0:*/		return 0x822182D4;
		  /* 822182D4h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 822182D4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 822182D4h case    1:*/		return 0x822182D8;
		  /* 822182D8h */ case    2:  		/* li R6, 1 */
		/* 822182D8h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 822182D8h case    2:*/		return 0x822182DC;
		  /* 822182DCh */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 822182DCh case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 822182DCh case    3:*/		return 0x822182E0;
		  /* 822182E0h */ case    4:  		/* li R5, 7 */
		/* 822182E0h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 822182E0h case    4:*/		return 0x822182E4;
		  /* 822182E4h */ case    5:  		/* lfs FR1, <#[R11 - 5524]> */
		/* 822182E4h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFEA6C) );
		/* 822182E4h case    5:*/		return 0x822182E8;
		  /* 822182E8h */ case    6:  		/* bl 32160 */
		/* 822182E8h case    6:*/		regs.LR = 0x822182EC; return 0x82220088;
		/* 822182E8h case    6:*/		return 0x822182EC;
		  /* 822182ECh */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 822182ECh case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 822182ECh case    7:*/		return 0x822182F0;
		  /* 822182F0h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 822182F0h case    8:*/		if ( regs.CR[0].eq ) { return 0x8221830C;  }
		/* 822182F0h case    8:*/		return 0x822182F4;
		  /* 822182F4h */ case    9:  		/* mr R6, R29 */
		/* 822182F4h case    9:*/		regs.R6 = regs.R29;
		/* 822182F4h case    9:*/		return 0x822182F8;
		  /* 822182F8h */ case   10:  		/* mr R5, R30 */
		/* 822182F8h case   10:*/		regs.R5 = regs.R30;
		/* 822182F8h case   10:*/		return 0x822182FC;
		  /* 822182FCh */ case   11:  		/* mr R4, R31 */
		/* 822182FCh case   11:*/		regs.R4 = regs.R31;
		/* 822182FCh case   11:*/		return 0x82218300;
		  /* 82218300h */ case   12:  		/* li R7, 15277 */
		/* 82218300h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3BAD);
		/* 82218300h case   12:*/		return 0x82218304;
		  /* 82218304h */ case   13:  		/* li R3, 0 */
		/* 82218304h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82218304h case   13:*/		return 0x82218308;
		  /* 82218308h */ case   14:  		/* bl -788224 */
		/* 82218308h case   14:*/		regs.LR = 0x8221830C; return 0x82157C08;
		/* 82218308h case   14:*/		return 0x8221830C;
	}
	return 0x8221830C;
} // Block from 822182D0h-8221830Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8221830Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221830C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221830C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221830C);
		  /* 8221830Ch */ case    0:  		/* li R6, 2 */
		/* 8221830Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 8221830Ch case    0:*/		return 0x82218310;
		  /* 82218310h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82218310h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82218310h case    1:*/		return 0x82218314;
		  /* 82218314h */ case    2:  		/* li R5, 7 */
		/* 82218314h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 82218314h case    2:*/		return 0x82218318;
		  /* 82218318h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82218318h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82218318h case    3:*/		return 0x8221831C;
		  /* 8221831Ch */ case    4:  		/* fmr FR1, FR30 */
		/* 8221831Ch case    4:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 8221831Ch case    4:*/		return 0x82218320;
		  /* 82218320h */ case    5:  		/* bl 32104 */
		/* 82218320h case    5:*/		regs.LR = 0x82218324; return 0x82220088;
		/* 82218320h case    5:*/		return 0x82218324;
		  /* 82218324h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 82218324h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82218324h case    6:*/		return 0x82218328;
		  /* 82218328h */ case    7:  		/* bc 12, CR0_EQ, 28 */
		/* 82218328h case    7:*/		if ( regs.CR[0].eq ) { return 0x82218344;  }
		/* 82218328h case    7:*/		return 0x8221832C;
		  /* 8221832Ch */ case    8:  		/* mr R6, R29 */
		/* 8221832Ch case    8:*/		regs.R6 = regs.R29;
		/* 8221832Ch case    8:*/		return 0x82218330;
		  /* 82218330h */ case    9:  		/* mr R5, R30 */
		/* 82218330h case    9:*/		regs.R5 = regs.R30;
		/* 82218330h case    9:*/		return 0x82218334;
		  /* 82218334h */ case   10:  		/* mr R4, R31 */
		/* 82218334h case   10:*/		regs.R4 = regs.R31;
		/* 82218334h case   10:*/		return 0x82218338;
		  /* 82218338h */ case   11:  		/* li R7, 15283 */
		/* 82218338h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x3BB3);
		/* 82218338h case   11:*/		return 0x8221833C;
		  /* 8221833Ch */ case   12:  		/* li R3, 0 */
		/* 8221833Ch case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221833Ch case   12:*/		return 0x82218340;
		  /* 82218340h */ case   13:  		/* bl -788280 */
		/* 82218340h case   13:*/		regs.LR = 0x82218344; return 0x82157C08;
		/* 82218340h case   13:*/		return 0x82218344;
	}
	return 0x82218344;
} // Block from 8221830Ch-82218344h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82218344h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218344( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218344) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218344);
		  /* 82218344h */ case    0:  		/* li R6, 3 */
		/* 82218344h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82218344h case    0:*/		return 0x82218348;
		  /* 82218348h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82218348h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82218348h case    1:*/		return 0x8221834C;
		  /* 8221834Ch */ case    2:  		/* li R5, 7 */
		/* 8221834Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 8221834Ch case    2:*/		return 0x82218350;
		  /* 82218350h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82218350h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82218350h case    3:*/		return 0x82218354;
		  /* 82218354h */ case    4:  		/* fmr FR1, FR30 */
		/* 82218354h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 82218354h case    4:*/		return 0x82218358;
		  /* 82218358h */ case    5:  		/* bl 32048 */
		/* 82218358h case    5:*/		regs.LR = 0x8221835C; return 0x82220088;
		/* 82218358h case    5:*/		return 0x8221835C;
		  /* 8221835Ch */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 8221835Ch case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8221835Ch case    6:*/		return 0x82218360;
		  /* 82218360h */ case    7:  		/* bc 12, CR0_EQ, 28 */
		/* 82218360h case    7:*/		if ( regs.CR[0].eq ) { return 0x8221837C;  }
		/* 82218360h case    7:*/		return 0x82218364;
		  /* 82218364h */ case    8:  		/* mr R6, R29 */
		/* 82218364h case    8:*/		regs.R6 = regs.R29;
		/* 82218364h case    8:*/		return 0x82218368;
		  /* 82218368h */ case    9:  		/* mr R5, R30 */
		/* 82218368h case    9:*/		regs.R5 = regs.R30;
		/* 82218368h case    9:*/		return 0x8221836C;
		  /* 8221836Ch */ case   10:  		/* mr R4, R31 */
		/* 8221836Ch case   10:*/		regs.R4 = regs.R31;
		/* 8221836Ch case   10:*/		return 0x82218370;
		  /* 82218370h */ case   11:  		/* li R7, 15289 */
		/* 82218370h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x3BB9);
		/* 82218370h case   11:*/		return 0x82218374;
		  /* 82218374h */ case   12:  		/* li R3, 0 */
		/* 82218374h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82218374h case   12:*/		return 0x82218378;
		  /* 82218378h */ case   13:  		/* bl -788336 */
		/* 82218378h case   13:*/		regs.LR = 0x8221837C; return 0x82157C08;
		/* 82218378h case   13:*/		return 0x8221837C;
	}
	return 0x8221837C;
} // Block from 82218344h-8221837Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8221837Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221837C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221837C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221837C);
		  /* 8221837Ch */ case    0:  		/* lis R11, -32252 */
		/* 8221837Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221837Ch case    0:*/		return 0x82218380;
		  /* 82218380h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82218380h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82218380h case    1:*/		return 0x82218384;
		  /* 82218384h */ case    2:  		/* li R6, 0 */
		/* 82218384h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82218384h case    2:*/		return 0x82218388;
		  /* 82218388h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82218388h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82218388h case    3:*/		return 0x8221838C;
		  /* 8221838Ch */ case    4:  		/* li R5, 8 */
		/* 8221838Ch case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x8);
		/* 8221838Ch case    4:*/		return 0x82218390;
		  /* 82218390h */ case    5:  		/* lfs FR1, <#[R11 - 5528]> */
		/* 82218390h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFEA68) );
		/* 82218390h case    5:*/		return 0x82218394;
		  /* 82218394h */ case    6:  		/* bl 31988 */
		/* 82218394h case    6:*/		regs.LR = 0x82218398; return 0x82220088;
		/* 82218394h case    6:*/		return 0x82218398;
	}
	return 0x82218398;
} // Block from 8221837Ch-82218398h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82218398h
// Function '?XltSetupRenderstates@XGRAPHICS@@YAXPAU_XLT_CONTEXT@1@PAU_CP_COMPILED_PROGRAM@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218398);
		  /* 82218398h */ case    0:  		/* cmpwi CR0, R3, 0 */
		/* 82218398h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82218398h case    0:*/		return 0x8221839C;
		  /* 8221839Ch */ case    1:  		/* bc 12, CR0_EQ, 28 */
		/* 8221839Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x822183B8;  }
		/* 8221839Ch case    1:*/		return 0x822183A0;
		  /* 822183A0h */ case    2:  		/* mr R6, R29 */
		/* 822183A0h case    2:*/		regs.R6 = regs.R29;
		/* 822183A0h case    2:*/		return 0x822183A4;
		  /* 822183A4h */ case    3:  		/* mr R5, R30 */
		/* 822183A4h case    3:*/		regs.R5 = regs.R30;
		/* 822183A4h case    3:*/		return 0x822183A8;
		  /* 822183A8h */ case    4:  		/* mr R4, R31 */
		/* 822183A8h case    4:*/		regs.R4 = regs.R31;
		/* 822183A8h case    4:*/		return 0x822183AC;
		  /* 822183ACh */ case    5:  		/* li R7, 15295 */
		/* 822183ACh case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x3BBF);
		/* 822183ACh case    5:*/		return 0x822183B0;
		  /* 822183B0h */ case    6:  		/* li R3, 0 */
		/* 822183B0h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822183B0h case    6:*/		return 0x822183B4;
		  /* 822183B4h */ case    7:  		/* bl -788396 */
		/* 822183B4h case    7:*/		regs.LR = 0x822183B8; return 0x82157C08;
		/* 822183B4h case    7:*/		return 0x822183B8;
	}
	return 0x822183B8;
} // Block from 82218398h-822183B8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 822183B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822183B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822183B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822183B8);
		  /* 822183B8h */ case    0:  		/* lis R11, -32252 */
		/* 822183B8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822183B8h case    0:*/		return 0x822183BC;
		  /* 822183BCh */ case    1:  		/* lwz R4, <#[R27]> */
		/* 822183BCh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 822183BCh case    1:*/		return 0x822183C0;
		  /* 822183C0h */ case    2:  		/* li R6, 1 */
		/* 822183C0h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 822183C0h case    2:*/		return 0x822183C4;
		  /* 822183C4h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 822183C4h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 822183C4h case    3:*/		return 0x822183C8;
		  /* 822183C8h */ case    4:  		/* li R5, 8 */
		/* 822183C8h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x8);
		/* 822183C8h case    4:*/		return 0x822183CC;
		  /* 822183CCh */ case    5:  		/* lfs FR1, <#[R11 - 5532]> */
		/* 822183CCh case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFEA64) );
		/* 822183CCh case    5:*/		return 0x822183D0;
		  /* 822183D0h */ case    6:  		/* bl 31928 */
		/* 822183D0h case    6:*/		regs.LR = 0x822183D4; return 0x82220088;
		/* 822183D0h case    6:*/		return 0x822183D4;
		  /* 822183D4h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 822183D4h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 822183D4h case    7:*/		return 0x822183D8;
		  /* 822183D8h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 822183D8h case    8:*/		if ( regs.CR[0].eq ) { return 0x822183F4;  }
		/* 822183D8h case    8:*/		return 0x822183DC;
		  /* 822183DCh */ case    9:  		/* mr R6, R29 */
		/* 822183DCh case    9:*/		regs.R6 = regs.R29;
		/* 822183DCh case    9:*/		return 0x822183E0;
		  /* 822183E0h */ case   10:  		/* mr R5, R30 */
		/* 822183E0h case   10:*/		regs.R5 = regs.R30;
		/* 822183E0h case   10:*/		return 0x822183E4;
		  /* 822183E4h */ case   11:  		/* mr R4, R31 */
		/* 822183E4h case   11:*/		regs.R4 = regs.R31;
		/* 822183E4h case   11:*/		return 0x822183E8;
		  /* 822183E8h */ case   12:  		/* li R7, 15301 */
		/* 822183E8h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3BC5);
		/* 822183E8h case   12:*/		return 0x822183EC;
		  /* 822183ECh */ case   13:  		/* li R3, 0 */
		/* 822183ECh case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822183ECh case   13:*/		return 0x822183F0;
		  /* 822183F0h */ case   14:  		/* bl -788456 */
		/* 822183F0h case   14:*/		regs.LR = 0x822183F4; return 0x82157C08;
		/* 822183F0h case   14:*/		return 0x822183F4;
	}
	return 0x822183F4;
} // Block from 822183B8h-822183F4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 822183F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822183F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822183F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822183F4);
		  /* 822183F4h */ case    0:  		/* lis R11, -32252 */
		/* 822183F4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822183F4h case    0:*/		return 0x822183F8;
		  /* 822183F8h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 822183F8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 822183F8h case    1:*/		return 0x822183FC;
		  /* 822183FCh */ case    2:  		/* li R6, 2 */
		/* 822183FCh case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 822183FCh case    2:*/		return 0x82218400;
		  /* 82218400h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82218400h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82218400h case    3:*/		return 0x82218404;
		  /* 82218404h */ case    4:  		/* li R5, 8 */
		/* 82218404h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x8);
		/* 82218404h case    4:*/		return 0x82218408;
		  /* 82218408h */ case    5:  		/* lfs FR1, <#[R11 - 5536]> */
		/* 82218408h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFEA60) );
		/* 82218408h case    5:*/		return 0x8221840C;
		  /* 8221840Ch */ case    6:  		/* bl 31868 */
		/* 8221840Ch case    6:*/		regs.LR = 0x82218410; return 0x82220088;
		/* 8221840Ch case    6:*/		return 0x82218410;
		  /* 82218410h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82218410h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82218410h case    7:*/		return 0x82218414;
		  /* 82218414h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 82218414h case    8:*/		if ( regs.CR[0].eq ) { return 0x82218430;  }
		/* 82218414h case    8:*/		return 0x82218418;
		  /* 82218418h */ case    9:  		/* mr R6, R29 */
		/* 82218418h case    9:*/		regs.R6 = regs.R29;
		/* 82218418h case    9:*/		return 0x8221841C;
		  /* 8221841Ch */ case   10:  		/* mr R5, R30 */
		/* 8221841Ch case   10:*/		regs.R5 = regs.R30;
		/* 8221841Ch case   10:*/		return 0x82218420;
		  /* 82218420h */ case   11:  		/* mr R4, R31 */
		/* 82218420h case   11:*/		regs.R4 = regs.R31;
		/* 82218420h case   11:*/		return 0x82218424;
		  /* 82218424h */ case   12:  		/* li R7, 15307 */
		/* 82218424h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3BCB);
		/* 82218424h case   12:*/		return 0x82218428;
		  /* 82218428h */ case   13:  		/* li R3, 0 */
		/* 82218428h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82218428h case   13:*/		return 0x8221842C;
		  /* 8221842Ch */ case   14:  		/* bl -788516 */
		/* 8221842Ch case   14:*/		regs.LR = 0x82218430; return 0x82157C08;
		/* 8221842Ch case   14:*/		return 0x82218430;
	}
	return 0x82218430;
} // Block from 822183F4h-82218430h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82218430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218430);
		  /* 82218430h */ case    0:  		/* lis R11, -32252 */
		/* 82218430h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82218430h case    0:*/		return 0x82218434;
		  /* 82218434h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82218434h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82218434h case    1:*/		return 0x82218438;
		  /* 82218438h */ case    2:  		/* li R6, 3 */
		/* 82218438h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82218438h case    2:*/		return 0x8221843C;
		  /* 8221843Ch */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 8221843Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 8221843Ch case    3:*/		return 0x82218440;
		  /* 82218440h */ case    4:  		/* li R5, 8 */
		/* 82218440h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x8);
		/* 82218440h case    4:*/		return 0x82218444;
		  /* 82218444h */ case    5:  		/* lfs FR1, <#[R11 - 5540]> */
		/* 82218444h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFEA5C) );
		/* 82218444h case    5:*/		return 0x82218448;
		  /* 82218448h */ case    6:  		/* bl 31808 */
		/* 82218448h case    6:*/		regs.LR = 0x8221844C; return 0x82220088;
		/* 82218448h case    6:*/		return 0x8221844C;
		  /* 8221844Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 8221844Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8221844Ch case    7:*/		return 0x82218450;
		  /* 82218450h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 82218450h case    8:*/		if ( regs.CR[0].eq ) { return 0x8221846C;  }
		/* 82218450h case    8:*/		return 0x82218454;
		  /* 82218454h */ case    9:  		/* mr R6, R29 */
		/* 82218454h case    9:*/		regs.R6 = regs.R29;
		/* 82218454h case    9:*/		return 0x82218458;
		  /* 82218458h */ case   10:  		/* mr R5, R30 */
		/* 82218458h case   10:*/		regs.R5 = regs.R30;
		/* 82218458h case   10:*/		return 0x8221845C;
		  /* 8221845Ch */ case   11:  		/* mr R4, R31 */
		/* 8221845Ch case   11:*/		regs.R4 = regs.R31;
		/* 8221845Ch case   11:*/		return 0x82218460;
		  /* 82218460h */ case   12:  		/* li R7, 15313 */
		/* 82218460h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3BD1);
		/* 82218460h case   12:*/		return 0x82218464;
		  /* 82218464h */ case   13:  		/* li R3, 0 */
		/* 82218464h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82218464h case   13:*/		return 0x82218468;
		  /* 82218468h */ case   14:  		/* bl -788576 */
		/* 82218468h case   14:*/		regs.LR = 0x8221846C; return 0x82157C08;
		/* 82218468h case   14:*/		return 0x8221846C;
	}
	return 0x8221846C;
} // Block from 82218430h-8221846Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8221846Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221846C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221846C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221846C);
		  /* 8221846Ch */ case    0:  		/* lis R11, -32252 */
		/* 8221846Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221846Ch case    0:*/		return 0x82218470;
		  /* 82218470h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82218470h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82218470h case    1:*/		return 0x82218474;
		  /* 82218474h */ case    2:  		/* li R6, 0 */
		/* 82218474h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82218474h case    2:*/		return 0x82218478;
		  /* 82218478h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82218478h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82218478h case    3:*/		return 0x8221847C;
		  /* 8221847Ch */ case    4:  		/* li R5, 9 */
		/* 8221847Ch case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x9);
		/* 8221847Ch case    4:*/		return 0x82218480;
		  /* 82218480h */ case    5:  		/* lfs FR1, <#[R11 - 5544]> */
		/* 82218480h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFEA58) );
		/* 82218480h case    5:*/		return 0x82218484;
		  /* 82218484h */ case    6:  		/* bl 31748 */
		/* 82218484h case    6:*/		regs.LR = 0x82218488; return 0x82220088;
		/* 82218484h case    6:*/		return 0x82218488;
		  /* 82218488h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82218488h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82218488h case    7:*/		return 0x8221848C;
		  /* 8221848Ch */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 8221848Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x822184A8;  }
		/* 8221848Ch case    8:*/		return 0x82218490;
		  /* 82218490h */ case    9:  		/* mr R6, R29 */
		/* 82218490h case    9:*/		regs.R6 = regs.R29;
		/* 82218490h case    9:*/		return 0x82218494;
		  /* 82218494h */ case   10:  		/* mr R5, R30 */
		/* 82218494h case   10:*/		regs.R5 = regs.R30;
		/* 82218494h case   10:*/		return 0x82218498;
		  /* 82218498h */ case   11:  		/* mr R4, R31 */
		/* 82218498h case   11:*/		regs.R4 = regs.R31;
		/* 82218498h case   11:*/		return 0x8221849C;
		  /* 8221849Ch */ case   12:  		/* li R7, 15319 */
		/* 8221849Ch case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3BD7);
		/* 8221849Ch case   12:*/		return 0x822184A0;
		  /* 822184A0h */ case   13:  		/* li R3, 0 */
		/* 822184A0h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822184A0h case   13:*/		return 0x822184A4;
		  /* 822184A4h */ case   14:  		/* bl -788636 */
		/* 822184A4h case   14:*/		regs.LR = 0x822184A8; return 0x82157C08;
		/* 822184A4h case   14:*/		return 0x822184A8;
	}
	return 0x822184A8;
} // Block from 8221846Ch-822184A8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 822184A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822184A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822184A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822184A8);
		  /* 822184A8h */ case    0:  		/* lis R11, -32252 */
		/* 822184A8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822184A8h case    0:*/		return 0x822184AC;
		  /* 822184ACh */ case    1:  		/* lwz R4, <#[R27]> */
		/* 822184ACh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 822184ACh case    1:*/		return 0x822184B0;
		  /* 822184B0h */ case    2:  		/* li R6, 1 */
		/* 822184B0h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 822184B0h case    2:*/		return 0x822184B4;
		  /* 822184B4h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 822184B4h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 822184B4h case    3:*/		return 0x822184B8;
		  /* 822184B8h */ case    4:  		/* li R5, 9 */
		/* 822184B8h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x9);
		/* 822184B8h case    4:*/		return 0x822184BC;
		  /* 822184BCh */ case    5:  		/* lfs FR1, <#[R11 - 5548]> */
		/* 822184BCh case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFEA54) );
		/* 822184BCh case    5:*/		return 0x822184C0;
		  /* 822184C0h */ case    6:  		/* bl 31688 */
		/* 822184C0h case    6:*/		regs.LR = 0x822184C4; return 0x82220088;
		/* 822184C0h case    6:*/		return 0x822184C4;
		  /* 822184C4h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 822184C4h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 822184C4h case    7:*/		return 0x822184C8;
		  /* 822184C8h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 822184C8h case    8:*/		if ( regs.CR[0].eq ) { return 0x822184E4;  }
		/* 822184C8h case    8:*/		return 0x822184CC;
		  /* 822184CCh */ case    9:  		/* mr R6, R29 */
		/* 822184CCh case    9:*/		regs.R6 = regs.R29;
		/* 822184CCh case    9:*/		return 0x822184D0;
		  /* 822184D0h */ case   10:  		/* mr R5, R30 */
		/* 822184D0h case   10:*/		regs.R5 = regs.R30;
		/* 822184D0h case   10:*/		return 0x822184D4;
		  /* 822184D4h */ case   11:  		/* mr R4, R31 */
		/* 822184D4h case   11:*/		regs.R4 = regs.R31;
		/* 822184D4h case   11:*/		return 0x822184D8;
		  /* 822184D8h */ case   12:  		/* li R7, 15325 */
		/* 822184D8h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3BDD);
		/* 822184D8h case   12:*/		return 0x822184DC;
		  /* 822184DCh */ case   13:  		/* li R3, 0 */
		/* 822184DCh case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822184DCh case   13:*/		return 0x822184E0;
		  /* 822184E0h */ case   14:  		/* bl -788696 */
		/* 822184E0h case   14:*/		regs.LR = 0x822184E4; return 0x82157C08;
		/* 822184E0h case   14:*/		return 0x822184E4;
	}
	return 0x822184E4;
} // Block from 822184A8h-822184E4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 822184E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822184E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822184E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822184E4);
		  /* 822184E4h */ case    0:  		/* li R6, 2 */
		/* 822184E4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 822184E4h case    0:*/		return 0x822184E8;
		  /* 822184E8h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 822184E8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 822184E8h case    1:*/		return 0x822184EC;
		  /* 822184ECh */ case    2:  		/* li R5, 9 */
		/* 822184ECh case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x9);
		/* 822184ECh case    2:*/		return 0x822184F0;
		  /* 822184F0h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 822184F0h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 822184F0h case    3:*/		return 0x822184F4;
		  /* 822184F4h */ case    4:  		/* fmr FR1, FR28 */
		/* 822184F4h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR28);
		/* 822184F4h case    4:*/		return 0x822184F8;
		  /* 822184F8h */ case    5:  		/* bl 31632 */
		/* 822184F8h case    5:*/		regs.LR = 0x822184FC; return 0x82220088;
		/* 822184F8h case    5:*/		return 0x822184FC;
		  /* 822184FCh */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 822184FCh case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 822184FCh case    6:*/		return 0x82218500;
		  /* 82218500h */ case    7:  		/* bc 12, CR0_EQ, 28 */
		/* 82218500h case    7:*/		if ( regs.CR[0].eq ) { return 0x8221851C;  }
		/* 82218500h case    7:*/		return 0x82218504;
		  /* 82218504h */ case    8:  		/* mr R6, R29 */
		/* 82218504h case    8:*/		regs.R6 = regs.R29;
		/* 82218504h case    8:*/		return 0x82218508;
		  /* 82218508h */ case    9:  		/* mr R5, R30 */
		/* 82218508h case    9:*/		regs.R5 = regs.R30;
		/* 82218508h case    9:*/		return 0x8221850C;
		  /* 8221850Ch */ case   10:  		/* mr R4, R31 */
		/* 8221850Ch case   10:*/		regs.R4 = regs.R31;
		/* 8221850Ch case   10:*/		return 0x82218510;
		  /* 82218510h */ case   11:  		/* li R7, 15331 */
		/* 82218510h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x3BE3);
		/* 82218510h case   11:*/		return 0x82218514;
		  /* 82218514h */ case   12:  		/* li R3, 0 */
		/* 82218514h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82218514h case   12:*/		return 0x82218518;
		  /* 82218518h */ case   13:  		/* bl -788752 */
		/* 82218518h case   13:*/		regs.LR = 0x8221851C; return 0x82157C08;
		/* 82218518h case   13:*/		return 0x8221851C;
	}
	return 0x8221851C;
} // Block from 822184E4h-8221851Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8221851Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221851C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221851C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221851C);
		  /* 8221851Ch */ case    0:  		/* li R6, 3 */
		/* 8221851Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 8221851Ch case    0:*/		return 0x82218520;
		  /* 82218520h */ case    1:  		/* lwz R4, <#[R27]> */
		/* 82218520h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 82218520h case    1:*/		return 0x82218524;
		  /* 82218524h */ case    2:  		/* li R5, 9 */
		/* 82218524h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x9);
		/* 82218524h case    2:*/		return 0x82218528;
		  /* 82218528h */ case    3:  		/* lwz R3, <#[R28 + 16]> */
		/* 82218528h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000010) );
		/* 82218528h case    3:*/		return 0x8221852C;
		  /* 8221852Ch */ case    4:  		/* fmr FR1, FR29 */
		/* 8221852Ch case    4:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 8221852Ch case    4:*/		return 0x82218530;
		  /* 82218530h */ case    5:  		/* bl 31576 */
		/* 82218530h case    5:*/		regs.LR = 0x82218534; return 0x82220088;
		/* 82218530h case    5:*/		return 0x82218534;
		  /* 82218534h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 82218534h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82218534h case    6:*/		return 0x82218538;
		  /* 82218538h */ case    7:  		/* bc 12, CR0_EQ, 28 */
		/* 82218538h case    7:*/		if ( regs.CR[0].eq ) { return 0x82218554;  }
		/* 82218538h case    7:*/		return 0x8221853C;
		  /* 8221853Ch */ case    8:  		/* mr R6, R29 */
		/* 8221853Ch case    8:*/		regs.R6 = regs.R29;
		/* 8221853Ch case    8:*/		return 0x82218540;
		  /* 82218540h */ case    9:  		/* mr R5, R30 */
		/* 82218540h case    9:*/		regs.R5 = regs.R30;
		/* 82218540h case    9:*/		return 0x82218544;
		  /* 82218544h */ case   10:  		/* mr R4, R31 */
		/* 82218544h case   10:*/		regs.R4 = regs.R31;
		/* 82218544h case   10:*/		return 0x82218548;
		  /* 82218548h */ case   11:  		/* li R7, 15337 */
		/* 82218548h case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x3BE9);
		/* 82218548h case   11:*/		return 0x8221854C;
		  /* 8221854Ch */ case   12:  		/* li R3, 0 */
		/* 8221854Ch case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221854Ch case   12:*/		return 0x82218550;
		  /* 82218550h */ case   13:  		/* bl -788808 */
		/* 82218550h case   13:*/		regs.LR = 0x82218554; return 0x82157C08;
		/* 82218550h case   13:*/		return 0x82218554;
	}
	return 0x82218554;
} // Block from 8221851Ch-82218554h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82218554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218554);
		  /* 82218554h */ case    0:  		/* addi R1, R1, 176 */
		/* 82218554h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82218554h case    0:*/		return 0x82218558;
		  /* 82218558h */ case    1:  		/* addi R12, R1, -48 */
		/* 82218558h case    1:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R1,0xFFFFFFD0);
		/* 82218558h case    1:*/		return 0x8221855C;
		  /* 8221855Ch */ case    2:  		/* bl -1601784 */
		/* 8221855Ch case    2:*/		regs.LR = 0x82218560; return 0x82091464;
		/* 8221855Ch case    2:*/		return 0x82218560;
		  /* 82218560h */ case    3:  		/* b -1602236 */
		/* 82218560h case    3:*/		return 0x820912A4;
		/* 82218560h case    3:*/		return 0x82218564;
		  /* 82218564h */ case    4:  		/* nop */
		/* 82218564h case    4:*/		cpu::op::nop();
		/* 82218564h case    4:*/		return 0x82218568;
	}
	return 0x82218568;
} // Block from 82218554h-82218568h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82218568h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218568);
		  /* 82218568h */ case    0:  		/* mfspr R12, LR */
		/* 82218568h case    0:*/		regs.R12 = regs.LR;
		/* 82218568h case    0:*/		return 0x8221856C;
		  /* 8221856Ch */ case    1:  		/* bl -1602344 */
		/* 8221856Ch case    1:*/		regs.LR = 0x82218570; return 0x82091244;
		/* 8221856Ch case    1:*/		return 0x82218570;
		  /* 82218570h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82218570h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82218570h case    2:*/		return 0x82218574;
		  /* 82218574h */ case    3:  		/* lis R11, -32253 */
		/* 82218574h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82218574h case    3:*/		return 0x82218578;
		  /* 82218578h */ case    4:  		/* lis R10, -32252 */
		/* 82218578h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82218578h case    4:*/		return 0x8221857C;
		  /* 8221857Ch */ case    5:  		/* mr R27, R3 */
		/* 8221857Ch case    5:*/		regs.R27 = regs.R3;
		/* 8221857Ch case    5:*/		return 0x82218580;
		  /* 82218580h */ case    6:  		/* mr R28, R4 */
		/* 82218580h case    6:*/		regs.R28 = regs.R4;
		/* 82218580h case    6:*/		return 0x82218584;
		  /* 82218584h */ case    7:  		/* mr R26, R5 */
		/* 82218584h case    7:*/		regs.R26 = regs.R5;
		/* 82218584h case    7:*/		return 0x82218588;
		  /* 82218588h */ case    8:  		/* mr R25, R6 */
		/* 82218588h case    8:*/		regs.R25 = regs.R6;
		/* 82218588h case    8:*/		return 0x8221858C;
		  /* 8221858Ch */ case    9:  		/* mr R24, R7 */
		/* 8221858Ch case    9:*/		regs.R24 = regs.R7;
		/* 8221858Ch case    9:*/		return 0x82218590;
		  /* 82218590h */ case   10:  		/* mr R23, R8 */
		/* 82218590h case   10:*/		regs.R23 = regs.R8;
		/* 82218590h case   10:*/		return 0x82218594;
		  /* 82218594h */ case   11:  		/* cmplwi CR6, R4, 0 */
		/* 82218594h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82218594h case   11:*/		return 0x82218598;
		  /* 82218598h */ case   12:  		/* addi R30, R11, 27460 */
		/* 82218598h case   12:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 82218598h case   12:*/		return 0x8221859C;
		  /* 8221859Ch */ case   13:  		/* addi R29, R10, -7312 */
		/* 8221859Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFE370);
		/* 8221859Ch case   13:*/		return 0x822185A0;
		  /* 822185A0h */ case   14:  		/* bc 4, CR6_EQ, 32 */
		/* 822185A0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x822185C0;  }
		/* 822185A0h case   14:*/		return 0x822185A4;
		  /* 822185A4h */ case   15:  		/* lis R11, -32252 */
		/* 822185A4h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822185A4h case   15:*/		return 0x822185A8;
		  /* 822185A8h */ case   16:  		/* mr R6, R29 */
		/* 822185A8h case   16:*/		regs.R6 = regs.R29;
		/* 822185A8h case   16:*/		return 0x822185AC;
		  /* 822185ACh */ case   17:  		/* addi R5, R11, -21620 */
		/* 822185ACh case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB8C);
		/* 822185ACh case   17:*/		return 0x822185B0;
		  /* 822185B0h */ case   18:  		/* mr R4, R30 */
		/* 822185B0h case   18:*/		regs.R4 = regs.R30;
		/* 822185B0h case   18:*/		return 0x822185B4;
		  /* 822185B4h */ case   19:  		/* li R7, 16163 */
		/* 822185B4h case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x3F23);
		/* 822185B4h case   19:*/		return 0x822185B8;
		  /* 822185B8h */ case   20:  		/* li R3, 0 */
		/* 822185B8h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822185B8h case   20:*/		return 0x822185BC;
		  /* 822185BCh */ case   21:  		/* bl -788916 */
		/* 822185BCh case   21:*/		regs.LR = 0x822185C0; return 0x82157C08;
		/* 822185BCh case   21:*/		return 0x822185C0;
	}
	return 0x822185C0;
} // Block from 82218568h-822185C0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 822185C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822185C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822185C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822185C0);
		  /* 822185C0h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 822185C0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 822185C0h case    0:*/		return 0x822185C4;
		  /* 822185C4h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 822185C4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x822185E4;  }
		/* 822185C4h case    1:*/		return 0x822185C8;
		  /* 822185C8h */ case    2:  		/* lis R11, -32252 */
		/* 822185C8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822185C8h case    2:*/		return 0x822185CC;
		  /* 822185CCh */ case    3:  		/* mr R6, R29 */
		/* 822185CCh case    3:*/		regs.R6 = regs.R29;
		/* 822185CCh case    3:*/		return 0x822185D0;
		  /* 822185D0h */ case    4:  		/* addi R5, R11, -21632 */
		/* 822185D0h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB80);
		/* 822185D0h case    4:*/		return 0x822185D4;
		  /* 822185D4h */ case    5:  		/* mr R4, R30 */
		/* 822185D4h case    5:*/		regs.R4 = regs.R30;
		/* 822185D4h case    5:*/		return 0x822185D8;
		  /* 822185D8h */ case    6:  		/* li R7, 16164 */
		/* 822185D8h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x3F24);
		/* 822185D8h case    6:*/		return 0x822185DC;
		  /* 822185DCh */ case    7:  		/* li R3, 0 */
		/* 822185DCh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822185DCh case    7:*/		return 0x822185E0;
		  /* 822185E0h */ case    8:  		/* bl -788952 */
		/* 822185E0h case    8:*/		regs.LR = 0x822185E4; return 0x82157C08;
		/* 822185E0h case    8:*/		return 0x822185E4;
	}
	return 0x822185E4;
} // Block from 822185C0h-822185E4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 822185E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822185E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822185E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822185E4);
		  /* 822185E4h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 822185E4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 822185E4h case    0:*/		return 0x822185E8;
		  /* 822185E8h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 822185E8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82218608;  }
		/* 822185E8h case    1:*/		return 0x822185EC;
		  /* 822185ECh */ case    2:  		/* lis R11, -32252 */
		/* 822185ECh case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822185ECh case    2:*/		return 0x822185F0;
		  /* 822185F0h */ case    3:  		/* mr R6, R29 */
		/* 822185F0h case    3:*/		regs.R6 = regs.R29;
		/* 822185F0h case    3:*/		return 0x822185F4;
		  /* 822185F4h */ case    4:  		/* addi R5, R11, -5440 */
		/* 822185F4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFEAC0);
		/* 822185F4h case    4:*/		return 0x822185F8;
	}
	return 0x822185F8;
} // Block from 822185E4h-822185F8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 822185F8h
// Function '?InitTranslatorKonsts@XGRAPHICS@@YAXPAU_XLT_CONTEXT@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822185F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822185F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822185F8);
		  /* 822185F8h */ case    0:  		/* mr R4, R30 */
		/* 822185F8h case    0:*/		regs.R4 = regs.R30;
		/* 822185F8h case    0:*/		return 0x822185FC;
		  /* 822185FCh */ case    1:  		/* li R7, 16165 */
		/* 822185FCh case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x3F25);
		/* 822185FCh case    1:*/		return 0x82218600;
		  /* 82218600h */ case    2:  		/* li R3, 0 */
		/* 82218600h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82218600h case    2:*/		return 0x82218604;
		  /* 82218604h */ case    3:  		/* bl -788988 */
		/* 82218604h case    3:*/		regs.LR = 0x82218608; return 0x82157C08;
		/* 82218604h case    3:*/		return 0x82218608;
	}
	return 0x82218608;
} // Block from 822185F8h-82218608h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82218608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218608);
		  /* 82218608h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 82218608h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82218608h case    0:*/		return 0x8221860C;
		  /* 8221860Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8221860Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8221862C;  }
		/* 8221860Ch case    1:*/		return 0x82218610;
		  /* 82218610h */ case    2:  		/* lis R11, -32252 */
		/* 82218610h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82218610h case    2:*/		return 0x82218614;
		  /* 82218614h */ case    3:  		/* mr R6, R29 */
		/* 82218614h case    3:*/		regs.R6 = regs.R29;
		/* 82218614h case    3:*/		return 0x82218618;
		  /* 82218618h */ case    4:  		/* addi R5, R11, -5452 */
		/* 82218618h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFEAB4);
		/* 82218618h case    4:*/		return 0x8221861C;
		  /* 8221861Ch */ case    5:  		/* mr R4, R30 */
		/* 8221861Ch case    5:*/		regs.R4 = regs.R30;
		/* 8221861Ch case    5:*/		return 0x82218620;
		  /* 82218620h */ case    6:  		/* li R7, 16166 */
		/* 82218620h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x3F26);
		/* 82218620h case    6:*/		return 0x82218624;
		  /* 82218624h */ case    7:  		/* li R3, 0 */
		/* 82218624h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82218624h case    7:*/		return 0x82218628;
		  /* 82218628h */ case    8:  		/* bl -789024 */
		/* 82218628h case    8:*/		regs.LR = 0x8221862C; return 0x82157C08;
		/* 82218628h case    8:*/		return 0x8221862C;
	}
	return 0x8221862C;
} // Block from 82218608h-8221862Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8221862Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221862C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221862C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221862C);
		  /* 8221862Ch */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 8221862Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8221862Ch case    0:*/		return 0x82218630;
		  /* 82218630h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 82218630h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82218650;  }
		/* 82218630h case    1:*/		return 0x82218634;
		  /* 82218634h */ case    2:  		/* lis R11, -32252 */
		/* 82218634h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82218634h case    2:*/		return 0x82218638;
		  /* 82218638h */ case    3:  		/* mr R6, R29 */
		/* 82218638h case    3:*/		regs.R6 = regs.R29;
		/* 82218638h case    3:*/		return 0x8221863C;
		  /* 8221863Ch */ case    4:  		/* addi R5, R11, -5464 */
		/* 8221863Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFEAA8);
		/* 8221863Ch case    4:*/		return 0x82218640;
		  /* 82218640h */ case    5:  		/* mr R4, R30 */
		/* 82218640h case    5:*/		regs.R4 = regs.R30;
		/* 82218640h case    5:*/		return 0x82218644;
		  /* 82218644h */ case    6:  		/* li R7, 16167 */
		/* 82218644h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x3F27);
		/* 82218644h case    6:*/		return 0x82218648;
		  /* 82218648h */ case    7:  		/* li R3, 0 */
		/* 82218648h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82218648h case    7:*/		return 0x8221864C;
		  /* 8221864Ch */ case    8:  		/* bl -789060 */
		/* 8221864Ch case    8:*/		regs.LR = 0x82218650; return 0x82157C08;
		/* 8221864Ch case    8:*/		return 0x82218650;
	}
	return 0x82218650;
} // Block from 8221862Ch-82218650h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82218650h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218650( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218650) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218650);
		  /* 82218650h */ case    0:  		/* li R4, 24 */
		/* 82218650h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x18);
		/* 82218650h case    0:*/		return 0x82218654;
		  /* 82218654h */ case    1:  		/* mtspr CTR, R28 */
		/* 82218654h case    1:*/		regs.CTR = regs.R28;
		/* 82218654h case    1:*/		return 0x82218658;
		  /* 82218658h */ case    2:  		/* mr R3, R27 */
		/* 82218658h case    2:*/		regs.R3 = regs.R27;
		/* 82218658h case    2:*/		return 0x8221865C;
		  /* 8221865Ch */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 8221865Ch case    3:*/		if ( 1 ) { regs.LR = 0x82218660; return (uint32)regs.CTR; }
		/* 8221865Ch case    3:*/		return 0x82218660;
		  /* 82218660h */ case    4:  		/* or. R31, R3, R3 */
		/* 82218660h case    4:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82218660h case    4:*/		return 0x82218664;
		  /* 82218664h */ case    5:  		/* bc 4, CR0_EQ, 32 */
		/* 82218664h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82218684;  }
		/* 82218664h case    5:*/		return 0x82218668;
		  /* 82218668h */ case    6:  		/* lis R11, -32252 */
		/* 82218668h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82218668h case    6:*/		return 0x8221866C;
		  /* 8221866Ch */ case    7:  		/* mr R6, R29 */
		/* 8221866Ch case    7:*/		regs.R6 = regs.R29;
		/* 8221866Ch case    7:*/		return 0x82218670;
		  /* 82218670h */ case    8:  		/* addi R5, R11, -5480 */
		/* 82218670h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFEA98);
		/* 82218670h case    8:*/		return 0x82218674;
		  /* 82218674h */ case    9:  		/* mr R4, R30 */
		/* 82218674h case    9:*/		regs.R4 = regs.R30;
		/* 82218674h case    9:*/		return 0x82218678;
		  /* 82218678h */ case   10:  		/* li R7, 16174 */
		/* 82218678h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x3F2E);
		/* 82218678h case   10:*/		return 0x8221867C;
		  /* 8221867Ch */ case   11:  		/* li R3, 0 */
		/* 8221867Ch case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221867Ch case   11:*/		return 0x82218680;
		  /* 82218680h */ case   12:  		/* bl -789112 */
		/* 82218680h case   12:*/		regs.LR = 0x82218684; return 0x82157C08;
		/* 82218680h case   12:*/		return 0x82218684;
	}
	return 0x82218684;
} // Block from 82218650h-82218684h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82218684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218684);
		  /* 82218684h */ case    0:  		/* stw R28, <#[R31 + 4]> */
		/* 82218684h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000004) );
		/* 82218684h case    0:*/		return 0x82218688;
		  /* 82218688h */ case    1:  		/* mr R3, R31 */
		/* 82218688h case    1:*/		regs.R3 = regs.R31;
		/* 82218688h case    1:*/		return 0x8221868C;
		  /* 8221868Ch */ case    2:  		/* stw R26, <#[R31 + 8]> */
		/* 8221868Ch case    2:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000008) );
		/* 8221868Ch case    2:*/		return 0x82218690;
		  /* 82218690h */ case    3:  		/* stw R25, <#[R31 + 20]> */
		/* 82218690h case    3:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000014) );
		/* 82218690h case    3:*/		return 0x82218694;
		  /* 82218694h */ case    4:  		/* stw R23, <#[R31 + 12]> */
		/* 82218694h case    4:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x0000000C) );
		/* 82218694h case    4:*/		return 0x82218698;
		  /* 82218698h */ case    5:  		/* stw R24, <#[R31 + 16]> */
		/* 82218698h case    5:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000010) );
		/* 82218698h case    5:*/		return 0x8221869C;
		  /* 8221869Ch */ case    6:  		/* stw R27, <#[R31]> */
		/* 8221869Ch case    6:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000000) );
		/* 8221869Ch case    6:*/		return 0x822186A0;
		  /* 822186A0h */ case    7:  		/* addi R1, R1, 160 */
		/* 822186A0h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 822186A0h case    7:*/		return 0x822186A4;
		  /* 822186A4h */ case    8:  		/* b -1602576 */
		/* 822186A4h case    8:*/		return 0x82091294;
		/* 822186A4h case    8:*/		return 0x822186A8;
	}
	return 0x822186A8;
} // Block from 82218684h-822186A8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 822186A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822186A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822186A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822186A8);
		  /* 822186A8h */ case    0:  		/* mfspr R12, LR */
		/* 822186A8h case    0:*/		regs.R12 = regs.LR;
		/* 822186A8h case    0:*/		return 0x822186AC;
		  /* 822186ACh */ case    1:  		/* bl -1602656 */
		/* 822186ACh case    1:*/		regs.LR = 0x822186B0; return 0x8209124C;
		/* 822186ACh case    1:*/		return 0x822186B0;
		  /* 822186B0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 822186B0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 822186B0h case    2:*/		return 0x822186B4;
		  /* 822186B4h */ case    3:  		/* mr R29, R3 */
		/* 822186B4h case    3:*/		regs.R29 = regs.R3;
		/* 822186B4h case    3:*/		return 0x822186B8;
		  /* 822186B8h */ case    4:  		/* mr R31, R4 */
		/* 822186B8h case    4:*/		regs.R31 = regs.R4;
		/* 822186B8h case    4:*/		return 0x822186BC;
		  /* 822186BCh */ case    5:  		/* mr R30, R5 */
		/* 822186BCh case    5:*/		regs.R30 = regs.R5;
		/* 822186BCh case    5:*/		return 0x822186C0;
		  /* 822186C0h */ case    6:  		/* mr R27, R6 */
		/* 822186C0h case    6:*/		regs.R27 = regs.R6;
		/* 822186C0h case    6:*/		return 0x822186C4;
		  /* 822186C4h */ case    7:  		/* bl -38044 */
		/* 822186C4h case    7:*/		regs.LR = 0x822186C8; return 0x8220F228;
		/* 822186C4h case    7:*/		return 0x822186C8;
		  /* 822186C8h */ case    8:  		/* mr R25, R3 */
		/* 822186C8h case    8:*/		regs.R25 = regs.R3;
		/* 822186C8h case    8:*/		return 0x822186CC;
		  /* 822186CCh */ case    9:  		/* mr R3, R29 */
		/* 822186CCh case    9:*/		regs.R3 = regs.R29;
		/* 822186CCh case    9:*/		return 0x822186D0;
		  /* 822186D0h */ case   10:  		/* bl -38056 */
		/* 822186D0h case   10:*/		regs.LR = 0x822186D4; return 0x8220F228;
		/* 822186D0h case   10:*/		return 0x822186D4;
		  /* 822186D4h */ case   11:  		/* lwz R11, <#[R29 + 20]> */
		/* 822186D4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 822186D4h case   11:*/		return 0x822186D8;
		  /* 822186D8h */ case   12:  		/* mr R28, R3 */
		/* 822186D8h case   12:*/		regs.R28 = regs.R3;
		/* 822186D8h case   12:*/		return 0x822186DC;
		  /* 822186DCh */ case   13:  		/* mr R5, R27 */
		/* 822186DCh case   13:*/		regs.R5 = regs.R27;
		/* 822186DCh case   13:*/		return 0x822186E0;
		  /* 822186E0h */ case   14:  		/* li R4, 37 */
		/* 822186E0h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x25);
		/* 822186E0h case   14:*/		return 0x822186E4;
		  /* 822186E4h */ case   15:  		/* mr R3, R11 */
		/* 822186E4h case   15:*/		regs.R3 = regs.R11;
		/* 822186E4h case   15:*/		return 0x822186E8;
		  /* 822186E8h */ case   16:  		/* bl -765608 */
		/* 822186E8h case   16:*/		regs.LR = 0x822186EC; return 0x8215D840;
		/* 822186E8h case   16:*/		return 0x822186EC;
		  /* 822186ECh */ case   17:  		/* li R26, 3 */
		/* 822186ECh case   17:*/		cpu::op::li<0>(regs,&regs.R26,0x3);
		/* 822186ECh case   17:*/		return 0x822186F0;
		  /* 822186F0h */ case   18:  		/* rlwinm R29, R25, 0, 16, 31 */
		/* 822186F0h case   18:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R29,regs.R25);
		/* 822186F0h case   18:*/		return 0x822186F4;
		  /* 822186F4h */ case   19:  		/* sth R26, <#[R30 + 2]> */
		/* 822186F4h case   19:*/		cpu::mem::store16( regs, regs.R26, (uint32)(regs.R30 + 0x00000002) );
		/* 822186F4h case   19:*/		return 0x822186F8;
		  /* 822186F8h */ case   20:  		/* li R10, 1 */
		/* 822186F8h case   20:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 822186F8h case   20:*/		return 0x822186FC;
		  /* 822186FCh */ case   21:  		/* lwz R11, <#[R30]> */
		/* 822186FCh case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 822186FCh case   21:*/		return 0x82218700;
		  /* 82218700h */ case   22:  		/* rlwinm R11, R11, 0, 16, 2 */
		/* 82218700h case   22:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R11,regs.R11);
		/* 82218700h case   22:*/		return 0x82218704;
		  /* 82218704h */ case   23:  		/* stw R11, <#[R30]> */
		/* 82218704h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82218704h case   23:*/		return 0x82218708;
		  /* 82218708h */ case   24:  		/* addi R11, R30, 4 */
		/* 82218708h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 82218708h case   24:*/		return 0x8221870C;
		  /* 8221870Ch */ case   25:  		/* sth R29, <#[R30 + 6]> */
		/* 8221870Ch case   25:*/		cpu::mem::store16( regs, regs.R29, (uint32)(regs.R30 + 0x00000006) );
		/* 8221870Ch case   25:*/		return 0x82218710;
		  /* 82218710h */ case   26:  		/* lwz R9, <#[R30 + 4]> */
		/* 82218710h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000004) );
		/* 82218710h case   26:*/		return 0x82218714;
		  /* 82218714h */ case   27:  		/* rlwimi R9, R10, 18, 8, 15 */
		/* 82218714h case   27:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R10);
		/* 82218714h case   27:*/		return 0x82218718;
		  /* 82218718h */ case   28:  		/* stw R9, <#[R30 + 4]> */
		/* 82218718h case   28:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000004) );
		/* 82218718h case   28:*/		return 0x8221871C;
		  /* 8221871Ch */ case   29:  		/* lwz R9, <#[R31 + 16]> */
		/* 8221871Ch case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 8221871Ch case   29:*/		return 0x82218720;
		  /* 82218720h */ case   30:  		/* stwu R9, <#[R11 + 4]> */
		/* 82218720h case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82218720h case   30:*/		return 0x82218724;
		  /* 82218724h */ case   31:  		/* lwz R9, <#[R31 + 16]> */
		/* 82218724h case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 82218724h case   31:*/		return 0x82218728;
		  /* 82218728h */ case   32:  		/* rlwinm. R9, R9, 0, 9, 9 */
		/* 82218728h case   32:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R9);
		/* 82218728h case   32:*/		return 0x8221872C;
		  /* 8221872Ch */ case   33:  		/* addi R11, R11, 4 */
		/* 8221872Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221872Ch case   33:*/		return 0x82218730;
		  /* 82218730h */ case   34:  		/* bc 12, CR0_EQ, 16 */
		/* 82218730h case   34:*/		if ( regs.CR[0].eq ) { return 0x82218740;  }
		/* 82218730h case   34:*/		return 0x82218734;
		  /* 82218734h */ case   35:  		/* lwz R9, <#[R31 + 28]> */
		/* 82218734h case   35:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000001C) );
		/* 82218734h case   35:*/		return 0x82218738;
		  /* 82218738h */ case   36:  		/* stw R9, <#[R11]> */
		/* 82218738h case   36:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82218738h case   36:*/		return 0x8221873C;
		  /* 8221873Ch */ case   37:  		/* addi R11, R11, 4 */
		/* 8221873Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221873Ch case   37:*/		return 0x82218740;
	}
	return 0x82218740;
} // Block from 822186A8h-82218740h (38 instructions)

//////////////////////////////////////////////////////
// Block at 82218740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218740);
		  /* 82218740h */ case    0:  		/* lwz R9, <#[R31 + 16]> */
		/* 82218740h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 82218740h case    0:*/		return 0x82218744;
		  /* 82218744h */ case    1:  		/* rlwinm. R9, R9, 0, 8, 8 */
		/* 82218744h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R9,regs.R9);
		/* 82218744h case    1:*/		return 0x82218748;
		  /* 82218748h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82218748h case    2:*/		if ( regs.CR[0].eq ) { return 0x82218758;  }
		/* 82218748h case    2:*/		return 0x8221874C;
		  /* 8221874Ch */ case    3:  		/* lwz R9, <#[R31 + 40]> */
		/* 8221874Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000028) );
		/* 8221874Ch case    3:*/		return 0x82218750;
		  /* 82218750h */ case    4:  		/* stw R9, <#[R11]> */
		/* 82218750h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82218750h case    4:*/		return 0x82218754;
		  /* 82218754h */ case    5:  		/* addi R11, R11, 4 */
		/* 82218754h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82218754h case    5:*/		return 0x82218758;
	}
	return 0x82218758;
} // Block from 82218740h-82218758h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82218758h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218758);
		  /* 82218758h */ case    0:  		/* li R30, 0 */
		/* 82218758h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82218758h case    0:*/		return 0x8221875C;
		  /* 8221875Ch */ case    1:  		/* cmplwi CR6, R3, 1 */
		/* 8221875Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 8221875Ch case    1:*/		return 0x82218760;
		  /* 82218760h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 82218760h case    2:*/		if ( regs.CR[6].eq ) { return 0x82218774;  }
		/* 82218760h case    2:*/		return 0x82218764;
		  /* 82218764h */ case    3:  		/* addi R9, R3, -2 */
		/* 82218764h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R3,0xFFFFFFFE);
		/* 82218764h case    3:*/		return 0x82218768;
		  /* 82218768h */ case    4:  		/* cntlzw R9, R9 */
		/* 82218768h case    4:*/		cpu::op::cntlzw<0>(regs,&regs.R9,regs.R9);
		/* 82218768h case    4:*/		return 0x8221876C;
		  /* 8221876Ch */ case    5:  		/* rlwinm R9, R9, 27, 31, 31 */
		/* 8221876Ch case    5:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R9,regs.R9);
		/* 8221876Ch case    5:*/		return 0x82218770;
		  /* 82218770h */ case    6:  		/* b 8 */
		/* 82218770h case    6:*/		return 0x82218778;
		/* 82218770h case    6:*/		return 0x82218774;
	}
	return 0x82218774;
} // Block from 82218758h-82218774h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82218774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218774);
		  /* 82218774h */ case    0:  		/* mr R9, R30 */
		/* 82218774h case    0:*/		regs.R9 = regs.R30;
		/* 82218774h case    0:*/		return 0x82218778;
	}
	return 0x82218778;
} // Block from 82218774h-82218778h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82218778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218778);
		  /* 82218778h */ case    0:  		/* li R8, 65 */
		/* 82218778h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x41);
		/* 82218778h case    0:*/		return 0x8221877C;
		  /* 8221877Ch */ case    1:  		/* sth R30, <#[R11 + 2]> */
		/* 8221877Ch case    1:*/		cpu::mem::store16( regs, regs.R30, (uint32)(regs.R11 + 0x00000002) );
		/* 8221877Ch case    1:*/		return 0x82218780;
		  /* 82218780h */ case    2:  		/* lwz R6, <#[R11]> */
		/* 82218780h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82218780h case    2:*/		return 0x82218784;
		  /* 82218784h */ case    3:  		/* rlwinm R7, R9, 0, 29, 31 */
		/* 82218784h case    3:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R7,regs.R9);
		/* 82218784h case    3:*/		return 0x82218788;
		  /* 82218788h */ case    4:  		/* rlwimi R6, R8, 16, 8, 15 */
		/* 82218788h case    4:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R6,regs.R8);
		/* 82218788h case    4:*/		return 0x8221878C;
		  /* 8221878Ch */ case    5:  		/* stw R6, <#[R11]> */
		/* 8221878Ch case    5:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221878Ch case    5:*/		return 0x82218790;
		  /* 82218790h */ case    6:  		/* stb R10, <#[R11]> */
		/* 82218790h case    6:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82218790h case    6:*/		return 0x82218794;
		  /* 82218794h */ case    7:  		/* rlwinm R6, R9, 4, 25, 27 */
		/* 82218794h case    7:*/		cpu::op::rlwinm<0,4,25,27>(regs,&regs.R6,regs.R9);
		/* 82218794h case    7:*/		return 0x82218798;
		  /* 82218798h */ case    8:  		/* lwzu R5, <#[R11 + 4]> */
		/* 82218798h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82218798h case    8:*/		return 0x8221879C;
		  /* 8221879Ch */ case    9:  		/* rlwinm R5, R5, 0, 0, 28 */
		/* 8221879Ch case    9:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R5,regs.R5);
		/* 8221879Ch case    9:*/		return 0x822187A0;
		  /* 822187A0h */ case   10:  		/* or R4, R5, R7 */
		/* 822187A0h case   10:*/		cpu::op::or<0>(regs,&regs.R4,regs.R5,regs.R7);
		/* 822187A0h case   10:*/		return 0x822187A4;
		  /* 822187A4h */ case   11:  		/* rlwinm R5, R9, 8, 21, 23 */
		/* 822187A4h case   11:*/		cpu::op::rlwinm<0,8,21,23>(regs,&regs.R5,regs.R9);
		/* 822187A4h case   11:*/		return 0x822187A8;
		  /* 822187A8h */ case   12:  		/* rlwinm R27, R4, 0, 28, 24 */
		/* 822187A8h case   12:*/		cpu::op::rlwinm<0,0,28,24>(regs,&regs.R27,regs.R4);
		/* 822187A8h case   12:*/		return 0x822187AC;
		  /* 822187ACh */ case   13:  		/* rlwinm R4, R9, 12, 17, 19 */
		/* 822187ACh case   13:*/		cpu::op::rlwinm<0,12,17,19>(regs,&regs.R4,regs.R9);
		/* 822187ACh case   13:*/		return 0x822187B0;
		  /* 822187B0h */ case   14:  		/* or R9, R27, R6 */
		/* 822187B0h case   14:*/		cpu::op::or<0>(regs,&regs.R9,regs.R27,regs.R6);
		/* 822187B0h case   14:*/		return 0x822187B4;
		  /* 822187B4h */ case   15:  		/* li R27, 13 */
		/* 822187B4h case   15:*/		cpu::op::li<0>(regs,&regs.R27,0xD);
		/* 822187B4h case   15:*/		return 0x822187B8;
		  /* 822187B8h */ case   16:  		/* rlwinm R25, R9, 0, 24, 20 */
		/* 822187B8h case   16:*/		cpu::op::rlwinm<0,0,24,20>(regs,&regs.R25,regs.R9);
		/* 822187B8h case   16:*/		return 0x822187BC;
		  /* 822187BCh */ case   17:  		/* rlwinm R9, R28, 0, 16, 31 */
		/* 822187BCh case   17:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R28);
		/* 822187BCh case   17:*/		return 0x822187C0;
		  /* 822187C0h */ case   18:  		/* or R28, R25, R5 */
		/* 822187C0h case   18:*/		cpu::op::or<0>(regs,&regs.R28,regs.R25,regs.R5);
		/* 822187C0h case   18:*/		return 0x822187C4;
		  /* 822187C4h */ case   19:  		/* rlwinm R28, R28, 0, 20, 16 */
		/* 822187C4h case   19:*/		cpu::op::rlwinm<0,0,20,16>(regs,&regs.R28,regs.R28);
		/* 822187C4h case   19:*/		return 0x822187C8;
		  /* 822187C8h */ case   20:  		/* or R28, R28, R4 */
		/* 822187C8h case   20:*/		cpu::op::or<0>(regs,&regs.R28,regs.R28,regs.R4);
		/* 822187C8h case   20:*/		return 0x822187CC;
		  /* 822187CCh */ case   21:  		/* stw R28, <#[R11]> */
		/* 822187CCh case   21:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 822187CCh case   21:*/		return 0x822187D0;
		  /* 822187D0h */ case   22:  		/* addi R11, R11, 4 */
		/* 822187D0h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822187D0h case   22:*/		return 0x822187D4;
		  /* 822187D4h */ case   23:  		/* sth R27, <#[R11 + 2]> */
		/* 822187D4h case   23:*/		cpu::mem::store16( regs, regs.R27, (uint32)(regs.R11 + 0x00000002) );
		/* 822187D4h case   23:*/		return 0x822187D8;
		  /* 822187D8h */ case   24:  		/* lwz R28, <#[R11]> */
		/* 822187D8h case   24:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 822187D8h case   24:*/		return 0x822187DC;
		  /* 822187DCh */ case   25:  		/* rlwimi R28, R10, 17, 3, 15 */
		/* 822187DCh case   25:*/		cpu::op::rlwimi<0,17,3,15>(regs,&regs.R28,regs.R10);
		/* 822187DCh case   25:*/		return 0x822187E0;
		  /* 822187E0h */ case   26:  		/* stw R28, <#[R11]> */
		/* 822187E0h case   26:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 822187E0h case   26:*/		return 0x822187E4;
		  /* 822187E4h */ case   27:  		/* addi R11, R11, 4 */
		/* 822187E4h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822187E4h case   27:*/		return 0x822187E8;
		  /* 822187E8h */ case   28:  		/* sth R9, <#[R11 + 2]> */
		/* 822187E8h case   28:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 822187E8h case   28:*/		return 0x822187EC;
		  /* 822187ECh */ case   29:  		/* lwz R28, <#[R11]> */
		/* 822187ECh case   29:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 822187ECh case   29:*/		return 0x822187F0;
		  /* 822187F0h */ case   30:  		/* rlwimi R28, R10, 18, 8, 15 */
		/* 822187F0h case   30:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R28,regs.R10);
		/* 822187F0h case   30:*/		return 0x822187F4;
		  /* 822187F4h */ case   31:  		/* stw R28, <#[R11]> */
		/* 822187F4h case   31:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 822187F4h case   31:*/		return 0x822187F8;
		  /* 822187F8h */ case   32:  		/* addi R11, R11, 4 */
		/* 822187F8h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822187F8h case   32:*/		return 0x822187FC;
		  /* 822187FCh */ case   33:  		/* sth R29, <#[R11 + 2]> */
		/* 822187FCh case   33:*/		cpu::mem::store16( regs, regs.R29, (uint32)(regs.R11 + 0x00000002) );
		/* 822187FCh case   33:*/		return 0x82218800;
		  /* 82218800h */ case   34:  		/* lwz R28, <#[R11]> */
		/* 82218800h case   34:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 82218800h case   34:*/		return 0x82218804;
		  /* 82218804h */ case   35:  		/* rlwimi R28, R10, 18, 8, 15 */
		/* 82218804h case   35:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R28,regs.R10);
		/* 82218804h case   35:*/		return 0x82218808;
		  /* 82218808h */ case   36:  		/* stw R28, <#[R11]> */
		/* 82218808h case   36:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 82218808h case   36:*/		return 0x8221880C;
		  /* 8221880Ch */ case   37:  		/* lwz R28, <#[R31 + 16]> */
		/* 8221880Ch case   37:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000010) );
		/* 8221880Ch case   37:*/		return 0x82218810;
		  /* 82218810h */ case   38:  		/* stwu R28, <#[R11 + 4]> */
		/* 82218810h case   38:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82218810h case   38:*/		return 0x82218814;
		  /* 82218814h */ case   39:  		/* lwz R28, <#[R31 + 16]> */
		/* 82218814h case   39:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000010) );
		/* 82218814h case   39:*/		return 0x82218818;
		  /* 82218818h */ case   40:  		/* rlwinm. R28, R28, 0, 9, 9 */
		/* 82218818h case   40:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R28,regs.R28);
		/* 82218818h case   40:*/		return 0x8221881C;
		  /* 8221881Ch */ case   41:  		/* addi R11, R11, 4 */
		/* 8221881Ch case   41:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221881Ch case   41:*/		return 0x82218820;
		  /* 82218820h */ case   42:  		/* bc 12, CR0_EQ, 16 */
		/* 82218820h case   42:*/		if ( regs.CR[0].eq ) { return 0x82218830;  }
		/* 82218820h case   42:*/		return 0x82218824;
		  /* 82218824h */ case   43:  		/* lwz R28, <#[R31 + 28]> */
		/* 82218824h case   43:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x0000001C) );
		/* 82218824h case   43:*/		return 0x82218828;
		  /* 82218828h */ case   44:  		/* stw R28, <#[R11]> */
		/* 82218828h case   44:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 82218828h case   44:*/		return 0x8221882C;
		  /* 8221882Ch */ case   45:  		/* addi R11, R11, 4 */
		/* 8221882Ch case   45:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221882Ch case   45:*/		return 0x82218830;
	}
	return 0x82218830;
} // Block from 82218778h-82218830h (46 instructions)

//////////////////////////////////////////////////////
// Block at 82218830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218830);
		  /* 82218830h */ case    0:  		/* lwz R28, <#[R31 + 16]> */
		/* 82218830h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000010) );
		/* 82218830h case    0:*/		return 0x82218834;
		  /* 82218834h */ case    1:  		/* rlwinm. R28, R28, 0, 8, 8 */
		/* 82218834h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R28,regs.R28);
		/* 82218834h case    1:*/		return 0x82218838;
		  /* 82218838h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82218838h case    2:*/		if ( regs.CR[0].eq ) { return 0x82218848;  }
		/* 82218838h case    2:*/		return 0x8221883C;
		  /* 8221883Ch */ case    3:  		/* lwz R28, <#[R31 + 40]> */
		/* 8221883Ch case    3:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000028) );
		/* 8221883Ch case    3:*/		return 0x82218840;
		  /* 82218840h */ case    4:  		/* stw R28, <#[R11]> */
		/* 82218840h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 82218840h case    4:*/		return 0x82218844;
		  /* 82218844h */ case    5:  		/* addi R11, R11, 4 */
		/* 82218844h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82218844h case    5:*/		return 0x82218848;
	}
	return 0x82218848;
} // Block from 82218830h-82218848h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82218848h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218848);
		  /* 82218848h */ case    0:  		/* sth R30, <#[R11 + 2]> */
		/* 82218848h case    0:*/		cpu::mem::store16( regs, regs.R30, (uint32)(regs.R11 + 0x00000002) );
		/* 82218848h case    0:*/		return 0x8221884C;
		  /* 8221884Ch */ case    1:  		/* cmplwi CR6, R3, 2 */
		/* 8221884Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000002);
		/* 8221884Ch case    1:*/		return 0x82218850;
		  /* 82218850h */ case    2:  		/* lwz R28, <#[R11]> */
		/* 82218850h case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 82218850h case    2:*/		return 0x82218854;
		  /* 82218854h */ case    3:  		/* rlwimi R28, R8, 16, 8, 15 */
		/* 82218854h case    3:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R28,regs.R8);
		/* 82218854h case    3:*/		return 0x82218858;
		  /* 82218858h */ case    4:  		/* stw R28, <#[R11]> */
		/* 82218858h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 82218858h case    4:*/		return 0x8221885C;
		  /* 8221885Ch */ case    5:  		/* stb R10, <#[R11]> */
		/* 8221885Ch case    5:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221885Ch case    5:*/		return 0x82218860;
		  /* 82218860h */ case    6:  		/* lwzu R28, <#[R11 + 4]> */
		/* 82218860h case    6:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82218860h case    6:*/		return 0x82218864;
		  /* 82218864h */ case    7:  		/* rlwinm R28, R28, 0, 0, 28 */
		/* 82218864h case    7:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R28,regs.R28);
		/* 82218864h case    7:*/		return 0x82218868;
		  /* 82218868h */ case    8:  		/* or R7, R28, R7 */
		/* 82218868h case    8:*/		cpu::op::or<0>(regs,&regs.R7,regs.R28,regs.R7);
		/* 82218868h case    8:*/		return 0x8221886C;
		  /* 8221886Ch */ case    9:  		/* rlwinm R7, R7, 0, 28, 24 */
		/* 8221886Ch case    9:*/		cpu::op::rlwinm<0,0,28,24>(regs,&regs.R7,regs.R7);
		/* 8221886Ch case    9:*/		return 0x82218870;
		  /* 82218870h */ case   10:  		/* or R7, R7, R6 */
		/* 82218870h case   10:*/		cpu::op::or<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 82218870h case   10:*/		return 0x82218874;
		  /* 82218874h */ case   11:  		/* rlwinm R7, R7, 0, 24, 20 */
		/* 82218874h case   11:*/		cpu::op::rlwinm<0,0,24,20>(regs,&regs.R7,regs.R7);
		/* 82218874h case   11:*/		return 0x82218878;
		  /* 82218878h */ case   12:  		/* or R7, R7, R5 */
		/* 82218878h case   12:*/		cpu::op::or<0>(regs,&regs.R7,regs.R7,regs.R5);
		/* 82218878h case   12:*/		return 0x8221887C;
		  /* 8221887Ch */ case   13:  		/* rlwinm R6, R7, 0, 20, 16 */
		/* 8221887Ch case   13:*/		cpu::op::rlwinm<0,0,20,16>(regs,&regs.R6,regs.R7);
		/* 8221887Ch case   13:*/		return 0x82218880;
		  /* 82218880h */ case   14:  		/* stw R7, <#[R11]> */
		/* 82218880h case   14:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82218880h case   14:*/		return 0x82218884;
		  /* 82218884h */ case   15:  		/* or R7, R6, R4 */
		/* 82218884h case   15:*/		cpu::op::or<0>(regs,&regs.R7,regs.R6,regs.R4);
		/* 82218884h case   15:*/		return 0x82218888;
		  /* 82218888h */ case   16:  		/* stw R7, <#[R11]> */
		/* 82218888h case   16:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82218888h case   16:*/		return 0x8221888C;
		  /* 8221888Ch */ case   17:  		/* bc 4, CR6_EQ, 12 */
		/* 8221888Ch case   17:*/		if ( !regs.CR[6].eq ) { return 0x82218898;  }
		/* 8221888Ch case   17:*/		return 0x82218890;
		  /* 82218890h */ case   18:  		/* ori R7, R7, 34952 */
		/* 82218890h case   18:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R7,0x8888);
		/* 82218890h case   18:*/		return 0x82218894;
		  /* 82218894h */ case   19:  		/* stw R7, <#[R11]> */
		/* 82218894h case   19:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82218894h case   19:*/		return 0x82218898;
	}
	return 0x82218898;
} // Block from 82218848h-82218898h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82218898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218898);
		  /* 82218898h */ case    0:  		/* addi R11, R11, 4 */
		/* 82218898h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82218898h case    0:*/		return 0x8221889C;
		  /* 8221889Ch */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8221889Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8221889Ch case    1:*/		return 0x822188A0;
		  /* 822188A0h */ case    2:  		/* sth R26, <#[R11 + 2]> */
		/* 822188A0h case    2:*/		cpu::mem::store16( regs, regs.R26, (uint32)(regs.R11 + 0x00000002) );
		/* 822188A0h case    2:*/		return 0x822188A4;
		  /* 822188A4h */ case    3:  		/* lwz R7, <#[R11]> */
		/* 822188A4h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822188A4h case    3:*/		return 0x822188A8;
		  /* 822188A8h */ case    4:  		/* rlwinm R7, R7, 0, 16, 2 */
		/* 822188A8h case    4:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R7,regs.R7);
		/* 822188A8h case    4:*/		return 0x822188AC;
		  /* 822188ACh */ case    5:  		/* stw R7, <#[R11]> */
		/* 822188ACh case    5:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822188ACh case    5:*/		return 0x822188B0;
		  /* 822188B0h */ case    6:  		/* addi R11, R11, 4 */
		/* 822188B0h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822188B0h case    6:*/		return 0x822188B4;
		  /* 822188B4h */ case    7:  		/* sth R29, <#[R11 + 2]> */
		/* 822188B4h case    7:*/		cpu::mem::store16( regs, regs.R29, (uint32)(regs.R11 + 0x00000002) );
		/* 822188B4h case    7:*/		return 0x822188B8;
		  /* 822188B8h */ case    8:  		/* lwz R7, <#[R11]> */
		/* 822188B8h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822188B8h case    8:*/		return 0x822188BC;
		  /* 822188BCh */ case    9:  		/* rlwimi R7, R10, 18, 8, 15 */
		/* 822188BCh case    9:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R7,regs.R10);
		/* 822188BCh case    9:*/		return 0x822188C0;
		  /* 822188C0h */ case   10:  		/* stw R7, <#[R11]> */
		/* 822188C0h case   10:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822188C0h case   10:*/		return 0x822188C4;
		  /* 822188C4h */ case   11:  		/* addi R11, R11, 4 */
		/* 822188C4h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822188C4h case   11:*/		return 0x822188C8;
		  /* 822188C8h */ case   12:  		/* sth R9, <#[R11 + 2]> */
		/* 822188C8h case   12:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 822188C8h case   12:*/		return 0x822188CC;
		  /* 822188CCh */ case   13:  		/* lwz R7, <#[R11]> */
		/* 822188CCh case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822188CCh case   13:*/		return 0x822188D0;
		  /* 822188D0h */ case   14:  		/* rlwimi R7, R10, 18, 8, 15 */
		/* 822188D0h case   14:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R7,regs.R10);
		/* 822188D0h case   14:*/		return 0x822188D4;
		  /* 822188D4h */ case   15:  		/* stw R7, <#[R11]> */
		/* 822188D4h case   15:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822188D4h case   15:*/		return 0x822188D8;
		  /* 822188D8h */ case   16:  		/* addi R11, R11, 4 */
		/* 822188D8h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822188D8h case   16:*/		return 0x822188DC;
		  /* 822188DCh */ case   17:  		/* bc 12, CR6_EQ, 16 */
		/* 822188DCh case   17:*/		if ( regs.CR[6].eq ) { return 0x822188EC;  }
		/* 822188DCh case   17:*/		return 0x822188E0;
		  /* 822188E0h */ case   18:  		/* cmplwi CR6, R3, 2 */
		/* 822188E0h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000002);
		/* 822188E0h case   18:*/		return 0x822188E4;
		  /* 822188E4h */ case   19:  		/* mr R7, R10 */
		/* 822188E4h case   19:*/		regs.R7 = regs.R10;
		/* 822188E4h case   19:*/		return 0x822188E8;
		  /* 822188E8h */ case   20:  		/* bc 4, CR6_GT, 8 */
		/* 822188E8h case   20:*/		if ( !regs.CR[6].gt ) { return 0x822188F0;  }
		/* 822188E8h case   20:*/		return 0x822188EC;
	}
	return 0x822188EC;
} // Block from 82218898h-822188ECh (21 instructions)

//////////////////////////////////////////////////////
// Block at 822188ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822188EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822188EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822188EC);
		  /* 822188ECh */ case    0:  		/* mr R7, R30 */
		/* 822188ECh case    0:*/		regs.R7 = regs.R30;
		/* 822188ECh case    0:*/		return 0x822188F0;
	}
	return 0x822188F0;
} // Block from 822188ECh-822188F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822188F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822188F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822188F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822188F0);
		  /* 822188F0h */ case    0:  		/* sth R30, <#[R11 + 2]> */
		/* 822188F0h case    0:*/		cpu::mem::store16( regs, regs.R30, (uint32)(regs.R11 + 0x00000002) );
		/* 822188F0h case    0:*/		return 0x822188F4;
		  /* 822188F4h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 822188F4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822188F4h case    1:*/		return 0x822188F8;
		  /* 822188F8h */ case    2:  		/* lwz R5, <#[R11]> */
		/* 822188F8h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 822188F8h case    2:*/		return 0x822188FC;
		  /* 822188FCh */ case    3:  		/* rlwimi R5, R8, 16, 8, 15 */
		/* 822188FCh case    3:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R5,regs.R8);
		/* 822188FCh case    3:*/		return 0x82218900;
		  /* 82218900h */ case    4:  		/* stw R5, <#[R11]> */
		/* 82218900h case    4:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82218900h case    4:*/		return 0x82218904;
		  /* 82218904h */ case    5:  		/* rlwinm R6, R7, 0, 29, 31 */
		/* 82218904h case    5:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R6,regs.R7);
		/* 82218904h case    5:*/		return 0x82218908;
		  /* 82218908h */ case    6:  		/* stb R10, <#[R11]> */
		/* 82218908h case    6:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82218908h case    6:*/		return 0x8221890C;
		  /* 8221890Ch */ case    7:  		/* rlwinm R5, R7, 4, 25, 27 */
		/* 8221890Ch case    7:*/		cpu::op::rlwinm<0,4,25,27>(regs,&regs.R5,regs.R7);
		/* 8221890Ch case    7:*/		return 0x82218910;
		  /* 82218910h */ case    8:  		/* rlwinm R4, R7, 8, 21, 23 */
		/* 82218910h case    8:*/		cpu::op::rlwinm<0,8,21,23>(regs,&regs.R4,regs.R7);
		/* 82218910h case    8:*/		return 0x82218914;
		  /* 82218914h */ case    9:  		/* rlwinm R7, R7, 12, 17, 19 */
		/* 82218914h case    9:*/		cpu::op::rlwinm<0,12,17,19>(regs,&regs.R7,regs.R7);
		/* 82218914h case    9:*/		return 0x82218918;
		  /* 82218918h */ case   10:  		/* lwzu R3, <#[R11 + 4]> */
		/* 82218918h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82218918h case   10:*/		return 0x8221891C;
		  /* 8221891Ch */ case   11:  		/* rlwinm R3, R3, 0, 0, 28 */
		/* 8221891Ch case   11:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R3,regs.R3);
		/* 8221891Ch case   11:*/		return 0x82218920;
		  /* 82218920h */ case   12:  		/* or R3, R3, R6 */
		/* 82218920h case   12:*/		cpu::op::or<0>(regs,&regs.R3,regs.R3,regs.R6);
		/* 82218920h case   12:*/		return 0x82218924;
		  /* 82218924h */ case   13:  		/* rlwinm R3, R3, 0, 28, 24 */
		/* 82218924h case   13:*/		cpu::op::rlwinm<0,0,28,24>(regs,&regs.R3,regs.R3);
		/* 82218924h case   13:*/		return 0x82218928;
		  /* 82218928h */ case   14:  		/* or R3, R3, R5 */
		/* 82218928h case   14:*/		cpu::op::or<0>(regs,&regs.R3,regs.R3,regs.R5);
		/* 82218928h case   14:*/		return 0x8221892C;
		  /* 8221892Ch */ case   15:  		/* rlwinm R3, R3, 0, 24, 20 */
		/* 8221892Ch case   15:*/		cpu::op::rlwinm<0,0,24,20>(regs,&regs.R3,regs.R3);
		/* 8221892Ch case   15:*/		return 0x82218930;
		  /* 82218930h */ case   16:  		/* or R3, R3, R4 */
		/* 82218930h case   16:*/		cpu::op::or<0>(regs,&regs.R3,regs.R3,regs.R4);
		/* 82218930h case   16:*/		return 0x82218934;
		  /* 82218934h */ case   17:  		/* stw R3, <#[R11]> */
		/* 82218934h case   17:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82218934h case   17:*/		return 0x82218938;
		  /* 82218938h */ case   18:  		/* rlwinm R3, R3, 0, 0, 31 */
		/* 82218938h case   18:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R3);
		/* 82218938h case   18:*/		return 0x8221893C;
		  /* 8221893Ch */ case   19:  		/* rlwinm R3, R3, 0, 20, 16 */
		/* 8221893Ch case   19:*/		cpu::op::rlwinm<0,0,20,16>(regs,&regs.R3,regs.R3);
		/* 8221893Ch case   19:*/		return 0x82218940;
		  /* 82218940h */ case   20:  		/* or R3, R3, R7 */
		/* 82218940h case   20:*/		cpu::op::or<0>(regs,&regs.R3,regs.R3,regs.R7);
		/* 82218940h case   20:*/		return 0x82218944;
		  /* 82218944h */ case   21:  		/* stw R3, <#[R11]> */
		/* 82218944h case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82218944h case   21:*/		return 0x82218948;
		  /* 82218948h */ case   22:  		/* bc 12, CR6_EQ, 12 */
		/* 82218948h case   22:*/		if ( regs.CR[6].eq ) { return 0x82218954;  }
		/* 82218948h case   22:*/		return 0x8221894C;
		  /* 8221894Ch */ case   23:  		/* ori R3, R3, 34952 */
		/* 8221894Ch case   23:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x8888);
		/* 8221894Ch case   23:*/		return 0x82218950;
		  /* 82218950h */ case   24:  		/* stw R3, <#[R11]> */
		/* 82218950h case   24:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82218950h case   24:*/		return 0x82218954;
	}
	return 0x82218954;
} // Block from 822188F0h-82218954h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82218954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218954);
		  /* 82218954h */ case    0:  		/* addi R11, R11, 4 */
		/* 82218954h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82218954h case    0:*/		return 0x82218958;
		  /* 82218958h */ case    1:  		/* sth R27, <#[R11 + 2]> */
		/* 82218958h case    1:*/		cpu::mem::store16( regs, regs.R27, (uint32)(regs.R11 + 0x00000002) );
		/* 82218958h case    1:*/		return 0x8221895C;
		  /* 8221895Ch */ case    2:  		/* lwz R3, <#[R11]> */
		/* 8221895Ch case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 8221895Ch case    2:*/		return 0x82218960;
		  /* 82218960h */ case    3:  		/* rlwimi R3, R26, 16, 3, 15 */
		/* 82218960h case    3:*/		cpu::op::rlwimi<0,16,3,15>(regs,&regs.R3,regs.R26);
		/* 82218960h case    3:*/		return 0x82218964;
		  /* 82218964h */ case    4:  		/* stw R3, <#[R11]> */
		/* 82218964h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82218964h case    4:*/		return 0x82218968;
		  /* 82218968h */ case    5:  		/* addi R11, R11, 4 */
		/* 82218968h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82218968h case    5:*/		return 0x8221896C;
		  /* 8221896Ch */ case    6:  		/* sth R9, <#[R11 + 2]> */
		/* 8221896Ch case    6:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 8221896Ch case    6:*/		return 0x82218970;
		  /* 82218970h */ case    7:  		/* lwz R3, <#[R11]> */
		/* 82218970h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82218970h case    7:*/		return 0x82218974;
		  /* 82218974h */ case    8:  		/* rlwimi R3, R10, 18, 8, 15 */
		/* 82218974h case    8:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R3,regs.R10);
		/* 82218974h case    8:*/		return 0x82218978;
		  /* 82218978h */ case    9:  		/* stw R3, <#[R11]> */
		/* 82218978h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82218978h case    9:*/		return 0x8221897C;
		  /* 8221897Ch */ case   10:  		/* addi R11, R11, 4 */
		/* 8221897Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221897Ch case   10:*/		return 0x82218980;
		  /* 82218980h */ case   11:  		/* sth R29, <#[R11 + 2]> */
		/* 82218980h case   11:*/		cpu::mem::store16( regs, regs.R29, (uint32)(regs.R11 + 0x00000002) );
		/* 82218980h case   11:*/		return 0x82218984;
		  /* 82218984h */ case   12:  		/* lwz R3, <#[R11]> */
		/* 82218984h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82218984h case   12:*/		return 0x82218988;
		  /* 82218988h */ case   13:  		/* rlwimi R3, R10, 18, 8, 15 */
		/* 82218988h case   13:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R3,regs.R10);
		/* 82218988h case   13:*/		return 0x8221898C;
		  /* 8221898Ch */ case   14:  		/* stw R3, <#[R11]> */
		/* 8221898Ch case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 8221898Ch case   14:*/		return 0x82218990;
		  /* 82218990h */ case   15:  		/* addi R11, R11, 4 */
		/* 82218990h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82218990h case   15:*/		return 0x82218994;
		  /* 82218994h */ case   16:  		/* sth R30, <#[R11 + 2]> */
		/* 82218994h case   16:*/		cpu::mem::store16( regs, regs.R30, (uint32)(regs.R11 + 0x00000002) );
		/* 82218994h case   16:*/		return 0x82218998;
		  /* 82218998h */ case   17:  		/* lwz R3, <#[R11]> */
		/* 82218998h case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82218998h case   17:*/		return 0x8221899C;
		  /* 8221899Ch */ case   18:  		/* rlwimi R3, R8, 16, 8, 15 */
		/* 8221899Ch case   18:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R3,regs.R8);
		/* 8221899Ch case   18:*/		return 0x822189A0;
		  /* 822189A0h */ case   19:  		/* stw R3, <#[R11]> */
		/* 822189A0h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 822189A0h case   19:*/		return 0x822189A4;
		  /* 822189A4h */ case   20:  		/* stb R10, <#[R11]> */
		/* 822189A4h case   20:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822189A4h case   20:*/		return 0x822189A8;
		  /* 822189A8h */ case   21:  		/* lwzu R3, <#[R11 + 4]> */
		/* 822189A8h case   21:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822189A8h case   21:*/		return 0x822189AC;
		  /* 822189ACh */ case   22:  		/* rlwinm R3, R3, 0, 0, 28 */
		/* 822189ACh case   22:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R3,regs.R3);
		/* 822189ACh case   22:*/		return 0x822189B0;
		  /* 822189B0h */ case   23:  		/* or R6, R3, R6 */
		/* 822189B0h case   23:*/		cpu::op::or<0>(regs,&regs.R6,regs.R3,regs.R6);
		/* 822189B0h case   23:*/		return 0x822189B4;
		  /* 822189B4h */ case   24:  		/* rlwinm R6, R6, 0, 28, 24 */
		/* 822189B4h case   24:*/		cpu::op::rlwinm<0,0,28,24>(regs,&regs.R6,regs.R6);
		/* 822189B4h case   24:*/		return 0x822189B8;
		  /* 822189B8h */ case   25:  		/* or R6, R6, R5 */
		/* 822189B8h case   25:*/		cpu::op::or<0>(regs,&regs.R6,regs.R6,regs.R5);
		/* 822189B8h case   25:*/		return 0x822189BC;
		  /* 822189BCh */ case   26:  		/* rlwinm R6, R6, 0, 24, 20 */
		/* 822189BCh case   26:*/		cpu::op::rlwinm<0,0,24,20>(regs,&regs.R6,regs.R6);
		/* 822189BCh case   26:*/		return 0x822189C0;
		  /* 822189C0h */ case   27:  		/* or R6, R6, R4 */
		/* 822189C0h case   27:*/		cpu::op::or<0>(regs,&regs.R6,regs.R6,regs.R4);
		/* 822189C0h case   27:*/		return 0x822189C4;
		  /* 822189C4h */ case   28:  		/* rlwinm R6, R6, 0, 20, 16 */
		/* 822189C4h case   28:*/		cpu::op::rlwinm<0,0,20,16>(regs,&regs.R6,regs.R6);
		/* 822189C4h case   28:*/		return 0x822189C8;
		  /* 822189C8h */ case   29:  		/* or R7, R6, R7 */
		/* 822189C8h case   29:*/		cpu::op::or<0>(regs,&regs.R7,regs.R6,regs.R7);
		/* 822189C8h case   29:*/		return 0x822189CC;
		  /* 822189CCh */ case   30:  		/* stw R7, <#[R11]> */
		/* 822189CCh case   30:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822189CCh case   30:*/		return 0x822189D0;
		  /* 822189D0h */ case   31:  		/* addi R11, R11, 4 */
		/* 822189D0h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822189D0h case   31:*/		return 0x822189D4;
		  /* 822189D4h */ case   32:  		/* sth R9, <#[R11 + 2]> */
		/* 822189D4h case   32:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 822189D4h case   32:*/		return 0x822189D8;
		  /* 822189D8h */ case   33:  		/* lwz R7, <#[R11]> */
		/* 822189D8h case   33:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822189D8h case   33:*/		return 0x822189DC;
		  /* 822189DCh */ case   34:  		/* rlwimi R7, R10, 18, 8, 15 */
		/* 822189DCh case   34:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R7,regs.R10);
		/* 822189DCh case   34:*/		return 0x822189E0;
		  /* 822189E0h */ case   35:  		/* stw R7, <#[R11]> */
		/* 822189E0h case   35:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822189E0h case   35:*/		return 0x822189E4;
		  /* 822189E4h */ case   36:  		/* addi R11, R11, 4 */
		/* 822189E4h case   36:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822189E4h case   36:*/		return 0x822189E8;
		  /* 822189E8h */ case   37:  		/* sth R8, <#[R11 + 2]> */
		/* 822189E8h case   37:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 822189E8h case   37:*/		return 0x822189EC;
		  /* 822189ECh */ case   38:  		/* lwz R8, <#[R11]> */
		/* 822189ECh case   38:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822189ECh case   38:*/		return 0x822189F0;
		  /* 822189F0h */ case   39:  		/* rlwinm R8, R8, 0, 16, 2 */
		/* 822189F0h case   39:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R8,regs.R8);
		/* 822189F0h case   39:*/		return 0x822189F4;
		  /* 822189F4h */ case   40:  		/* stw R8, <#[R11]> */
		/* 822189F4h case   40:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 822189F4h case   40:*/		return 0x822189F8;
		  /* 822189F8h */ case   41:  		/* addi R11, R11, 4 */
		/* 822189F8h case   41:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822189F8h case   41:*/		return 0x822189FC;
		  /* 822189FCh */ case   42:  		/* lwz R8, <#[R31 + 4]> */
		/* 822189FCh case   42:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 822189FCh case   42:*/		return 0x82218A00;
		  /* 82218A00h */ case   43:  		/* sth R8, <#[R11 + 2]> */
		/* 82218A00h case   43:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82218A00h case   43:*/		return 0x82218A04;
		  /* 82218A04h */ case   44:  		/* lwz R8, <#[R11]> */
		/* 82218A04h case   44:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82218A04h case   44:*/		return 0x82218A08;
		  /* 82218A08h */ case   45:  		/* lwz R7, <#[R31 + 4]> */
		/* 82218A08h case   45:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82218A08h case   45:*/		return 0x82218A0C;
		  /* 82218A0Ch */ case   46:  		/* rlwimi R8, R7, 0, 10, 15 */
		/* 82218A0Ch case   46:*/		cpu::op::rlwimi<0,0,10,15>(regs,&regs.R8,regs.R7);
		/* 82218A0Ch case   46:*/		return 0x82218A10;
		  /* 82218A10h */ case   47:  		/* stw R8, <#[R11]> */
		/* 82218A10h case   47:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82218A10h case   47:*/		return 0x82218A14;
		  /* 82218A14h */ case   48:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 82218A14h case   48:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 82218A14h case   48:*/		return 0x82218A18;
		  /* 82218A18h */ case   49:  		/* lwz R7, <#[R31 + 4]> */
		/* 82218A18h case   49:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82218A18h case   49:*/		return 0x82218A1C;
		  /* 82218A1Ch */ case   50:  		/* rlwimi R8, R7, 0, 8, 8 */
		/* 82218A1Ch case   50:*/		cpu::op::rlwimi<0,0,8,8>(regs,&regs.R8,regs.R7);
		/* 82218A1Ch case   50:*/		return 0x82218A20;
		  /* 82218A20h */ case   51:  		/* stw R8, <#[R11]> */
		/* 82218A20h case   51:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82218A20h case   51:*/		return 0x82218A24;
		  /* 82218A24h */ case   52:  		/* rlwinm R8, R8, 0, 0, 31 */
		/* 82218A24h case   52:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R8);
		/* 82218A24h case   52:*/		return 0x82218A28;
		  /* 82218A28h */ case   53:  		/* lwz R7, <#[R31 + 4]> */
		/* 82218A28h case   53:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000004) );
		/* 82218A28h case   53:*/		return 0x82218A2C;
		  /* 82218A2Ch */ case   54:  		/* rlwimi R8, R7, 0, 9, 9 */
		/* 82218A2Ch case   54:*/		cpu::op::rlwimi<0,0,9,9>(regs,&regs.R8,regs.R7);
		/* 82218A2Ch case   54:*/		return 0x82218A30;
		  /* 82218A30h */ case   55:  		/* stw R8, <#[R11]> */
		/* 82218A30h case   55:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82218A30h case   55:*/		return 0x82218A34;
		  /* 82218A34h */ case   56:  		/* addi R11, R11, 4 */
		/* 82218A34h case   56:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82218A34h case   56:*/		return 0x82218A38;
		  /* 82218A38h */ case   57:  		/* lwz R8, <#[R31 + 4]> */
		/* 82218A38h case   57:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82218A38h case   57:*/		return 0x82218A3C;
		  /* 82218A3Ch */ case   58:  		/* rlwinm. R8, R8, 0, 9, 9 */
		/* 82218A3Ch case   58:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R8,regs.R8);
		/* 82218A3Ch case   58:*/		return 0x82218A40;
		  /* 82218A40h */ case   59:  		/* bc 12, CR0_EQ, 16 */
		/* 82218A40h case   59:*/		if ( regs.CR[0].eq ) { return 0x82218A50;  }
		/* 82218A40h case   59:*/		return 0x82218A44;
		  /* 82218A44h */ case   60:  		/* lwz R8, <#[R31 + 8]> */
		/* 82218A44h case   60:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 82218A44h case   60:*/		return 0x82218A48;
		  /* 82218A48h */ case   61:  		/* stw R8, <#[R11]> */
		/* 82218A48h case   61:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82218A48h case   61:*/		return 0x82218A4C;
		  /* 82218A4Ch */ case   62:  		/* addi R11, R11, 4 */
		/* 82218A4Ch case   62:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82218A4Ch case   62:*/		return 0x82218A50;
	}
	return 0x82218A50;
} // Block from 82218954h-82218A50h (63 instructions)

//////////////////////////////////////////////////////
// Block at 82218A50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218A50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218A50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218A50);
		  /* 82218A50h */ case    0:  		/* lwz R8, <#[R31 + 4]> */
		/* 82218A50h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82218A50h case    0:*/		return 0x82218A54;
		  /* 82218A54h */ case    1:  		/* rlwinm. R8, R8, 0, 8, 8 */
		/* 82218A54h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R8,regs.R8);
		/* 82218A54h case    1:*/		return 0x82218A58;
		  /* 82218A58h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82218A58h case    2:*/		if ( regs.CR[0].eq ) { return 0x82218A68;  }
		/* 82218A58h case    2:*/		return 0x82218A5C;
		  /* 82218A5Ch */ case    3:  		/* lwz R8, <#[R31 + 12]> */
		/* 82218A5Ch case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000000C) );
		/* 82218A5Ch case    3:*/		return 0x82218A60;
		  /* 82218A60h */ case    4:  		/* stw R8, <#[R11]> */
		/* 82218A60h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82218A60h case    4:*/		return 0x82218A64;
		  /* 82218A64h */ case    5:  		/* addi R11, R11, 4 */
		/* 82218A64h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82218A64h case    5:*/		return 0x82218A68;
	}
	return 0x82218A68;
} // Block from 82218A50h-82218A68h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82218A68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218A68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218A68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218A68);
		  /* 82218A68h */ case    0:  		/* sth R9, <#[R11 + 2]> */
		/* 82218A68h case    0:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82218A68h case    0:*/		return 0x82218A6C;
		  /* 82218A6Ch */ case    1:  		/* lwz R8, <#[R11]> */
		/* 82218A6Ch case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82218A6Ch case    1:*/		return 0x82218A70;
		  /* 82218A70h */ case    2:  		/* rlwimi R8, R10, 18, 8, 15 */
		/* 82218A70h case    2:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R8,regs.R10);
		/* 82218A70h case    2:*/		return 0x82218A74;
		  /* 82218A74h */ case    3:  		/* stw R8, <#[R11]> */
		/* 82218A74h case    3:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82218A74h case    3:*/		return 0x82218A78;
		  /* 82218A78h */ case    4:  		/* addi R11, R11, 4 */
		/* 82218A78h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82218A78h case    4:*/		return 0x82218A7C;
		  /* 82218A7Ch */ case    5:  		/* addi R3, R11, 4 */
		/* 82218A7Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 82218A7Ch case    5:*/		return 0x82218A80;
		  /* 82218A80h */ case    6:  		/* sth R9, <#[R11 + 2]> */
		/* 82218A80h case    6:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82218A80h case    6:*/		return 0x82218A84;
		  /* 82218A84h */ case    7:  		/* lwz R9, <#[R11]> */
		/* 82218A84h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82218A84h case    7:*/		return 0x82218A88;
		  /* 82218A88h */ case    8:  		/* rlwimi R9, R10, 18, 8, 15 */
		/* 82218A88h case    8:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R10);
		/* 82218A88h case    8:*/		return 0x82218A8C;
		  /* 82218A8Ch */ case    9:  		/* stw R9, <#[R11]> */
		/* 82218A8Ch case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82218A8Ch case    9:*/		return 0x82218A90;
		  /* 82218A90h */ case   10:  		/* addi R1, R1, 144 */
		/* 82218A90h case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82218A90h case   10:*/		return 0x82218A94;
		  /* 82218A94h */ case   11:  		/* b -1603576 */
		/* 82218A94h case   11:*/		return 0x8209129C;
		/* 82218A94h case   11:*/		return 0x82218A98;
	}
	return 0x82218A98;
} // Block from 82218A68h-82218A98h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82218A98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218A98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218A98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218A98);
		  /* 82218A98h */ case    0:  		/* mfspr R12, LR */
		/* 82218A98h case    0:*/		regs.R12 = regs.LR;
		/* 82218A98h case    0:*/		return 0x82218A9C;
		  /* 82218A9Ch */ case    1:  		/* bl -1603708 */
		/* 82218A9Ch case    1:*/		regs.LR = 0x82218AA0; return 0x82091220;
		/* 82218A9Ch case    1:*/		return 0x82218AA0;
		  /* 82218AA0h */ case    2:  		/* stwu R1, <#[R1 - 368]> */
		/* 82218AA0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE90);
		/* 82218AA0h case    2:*/		return 0x82218AA4;
		  /* 82218AA4h */ case    3:  		/* lbz R28, <#[R4 + 1]> */
		/* 82218AA4h case    3:*/		cpu::mem::load8z( regs, &regs.R28, (uint32)(regs.R4 + 0x00000001) );
		/* 82218AA4h case    3:*/		return 0x82218AA8;
		  /* 82218AA8h */ case    4:  		/* mr R26, R4 */
		/* 82218AA8h case    4:*/		regs.R26 = regs.R4;
		/* 82218AA8h case    4:*/		return 0x82218AAC;
		  /* 82218AACh */ case    5:  		/* stw R5, <#[R1 + 404]> */
		/* 82218AACh case    5:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000194) );
		/* 82218AACh case    5:*/		return 0x82218AB0;
		  /* 82218AB0h */ case    6:  		/* li R21, 0 */
		/* 82218AB0h case    6:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 82218AB0h case    6:*/		return 0x82218AB4;
		  /* 82218AB4h */ case    7:  		/* stw R6, <#[R1 + 412]> */
		/* 82218AB4h case    7:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x0000019C) );
		/* 82218AB4h case    7:*/		return 0x82218AB8;
		  /* 82218AB8h */ case    8:  		/* li R30, 1 */
		/* 82218AB8h case    8:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 82218AB8h case    8:*/		return 0x82218ABC;
		  /* 82218ABCh */ case    9:  		/* li R17, -1 */
		/* 82218ABCh case    9:*/		cpu::op::li<0>(regs,&regs.R17,0xFFFFFFFF);
		/* 82218ABCh case    9:*/		return 0x82218AC0;
		  /* 82218AC0h */ case   10:  		/* lwz R25, <#[R3 + 28]> */
		/* 82218AC0h case   10:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R3 + 0x0000001C) );
		/* 82218AC0h case   10:*/		return 0x82218AC4;
		  /* 82218AC4h */ case   11:  		/* mr R4, R28 */
		/* 82218AC4h case   11:*/		regs.R4 = regs.R28;
		/* 82218AC4h case   11:*/		return 0x82218AC8;
		  /* 82218AC8h */ case   12:  		/* stw R30, <#[R1 + 92]> */
		/* 82218AC8h case   12:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 82218AC8h case   12:*/		return 0x82218ACC;
		  /* 82218ACCh */ case   13:  		/* li R7, 0 */
		/* 82218ACCh case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82218ACCh case   13:*/		return 0x82218AD0;
		  /* 82218AD0h */ case   14:  		/* stw R21, <#[R1 + 80]> */
		/* 82218AD0h case   14:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000050) );
		/* 82218AD0h case   14:*/		return 0x82218AD4;
		  /* 82218AD4h */ case   15:  		/* li R6, 0 */
		/* 82218AD4h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82218AD4h case   15:*/		return 0x82218AD8;
		  /* 82218AD8h */ case   16:  		/* stw R17, <#[R1 + 96]> */
		/* 82218AD8h case   16:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000060) );
		/* 82218AD8h case   16:*/		return 0x82218ADC;
		  /* 82218ADCh */ case   17:  		/* addi R5, R1, 112 */
		/* 82218ADCh case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 82218ADCh case   17:*/		return 0x82218AE0;
		  /* 82218AE0h */ case   18:  		/* mr R31, R3 */
		/* 82218AE0h case   18:*/		regs.R31 = regs.R3;
		/* 82218AE0h case   18:*/		return 0x82218AE4;
		  /* 82218AE4h */ case   19:  		/* lwz R3, <#[R3 + 20]> */
		/* 82218AE4h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000014) );
		/* 82218AE4h case   19:*/		return 0x82218AE8;
		  /* 82218AE8h */ case   20:  		/* mr R14, R21 */
		/* 82218AE8h case   20:*/		regs.R14 = regs.R21;
		/* 82218AE8h case   20:*/		return 0x82218AEC;
		  /* 82218AECh */ case   21:  		/* bl 105740 */
		/* 82218AECh case   21:*/		regs.LR = 0x82218AF0; return 0x822327F8;
		/* 82218AECh case   21:*/		return 0x82218AF0;
		  /* 82218AF0h */ case   22:  		/* mr R5, R28 */
		/* 82218AF0h case   22:*/		regs.R5 = regs.R28;
		/* 82218AF0h case   22:*/		return 0x82218AF4;
		  /* 82218AF4h */ case   23:  		/* lwz R3, <#[R31 + 20]> */
		/* 82218AF4h case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 82218AF4h case   23:*/		return 0x82218AF8;
		  /* 82218AF8h */ case   24:  		/* li R4, 16 */
		/* 82218AF8h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 82218AF8h case   24:*/		return 0x82218AFC;
		  /* 82218AFCh */ case   25:  		/* bl -37428 */
		/* 82218AFCh case   25:*/		regs.LR = 0x82218B00; return 0x8220F8C8;
		/* 82218AFCh case   25:*/		return 0x82218B00;
		  /* 82218B00h */ case   26:  		/* stfs FR1, <#[R1 + 164]> */
		/* 82218B00h case   26:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R1 + 0x000000A4) );
		/* 82218B00h case   26:*/		return 0x82218B04;
		  /* 82218B04h */ case   27:  		/* mr R5, R28 */
		/* 82218B04h case   27:*/		regs.R5 = regs.R28;
		/* 82218B04h case   27:*/		return 0x82218B08;
		  /* 82218B08h */ case   28:  		/* lwz R3, <#[R31 + 20]> */
		/* 82218B08h case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 82218B08h case   28:*/		return 0x82218B0C;
		  /* 82218B0Ch */ case   29:  		/* li R4, 17 */
		/* 82218B0Ch case   29:*/		cpu::op::li<0>(regs,&regs.R4,0x11);
		/* 82218B0Ch case   29:*/		return 0x82218B10;
		  /* 82218B10h */ case   30:  		/* bl -37448 */
		/* 82218B10h case   30:*/		regs.LR = 0x82218B14; return 0x8220F8C8;
		/* 82218B10h case   30:*/		return 0x82218B14;
		  /* 82218B14h */ case   31:  		/* stfs FR1, <#[R1 + 168]> */
		/* 82218B14h case   31:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R1 + 0x000000A8) );
		/* 82218B14h case   31:*/		return 0x82218B18;
		  /* 82218B18h */ case   32:  		/* mr R5, R28 */
		/* 82218B18h case   32:*/		regs.R5 = regs.R28;
		/* 82218B18h case   32:*/		return 0x82218B1C;
		  /* 82218B1Ch */ case   33:  		/* lwz R3, <#[R31 + 20]> */
		/* 82218B1Ch case   33:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 82218B1Ch case   33:*/		return 0x82218B20;
		  /* 82218B20h */ case   34:  		/* li R4, 18 */
		/* 82218B20h case   34:*/		cpu::op::li<0>(regs,&regs.R4,0x12);
		/* 82218B20h case   34:*/		return 0x82218B24;
		  /* 82218B24h */ case   35:  		/* bl -37468 */
		/* 82218B24h case   35:*/		regs.LR = 0x82218B28; return 0x8220F8C8;
		/* 82218B24h case   35:*/		return 0x82218B28;
		  /* 82218B28h */ case   36:  		/* stfs FR1, <#[R1 + 172]> */
		/* 82218B28h case   36:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R1 + 0x000000AC) );
		/* 82218B28h case   36:*/		return 0x82218B2C;
		  /* 82218B2Ch */ case   37:  		/* mr R5, R28 */
		/* 82218B2Ch case   37:*/		regs.R5 = regs.R28;
		/* 82218B2Ch case   37:*/		return 0x82218B30;
		  /* 82218B30h */ case   38:  		/* lwz R3, <#[R31 + 20]> */
		/* 82218B30h case   38:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 82218B30h case   38:*/		return 0x82218B34;
		  /* 82218B34h */ case   39:  		/* li R4, 19 */
		/* 82218B34h case   39:*/		cpu::op::li<0>(regs,&regs.R4,0x13);
		/* 82218B34h case   39:*/		return 0x82218B38;
		  /* 82218B38h */ case   40:  		/* bl -37488 */
		/* 82218B38h case   40:*/		regs.LR = 0x82218B3C; return 0x8220F8C8;
		/* 82218B38h case   40:*/		return 0x82218B3C;
		  /* 82218B3Ch */ case   41:  		/* stfs FR1, <#[R1 + 176]> */
		/* 82218B3Ch case   41:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R1 + 0x000000B0) );
		/* 82218B3Ch case   41:*/		return 0x82218B40;
		  /* 82218B40h */ case   42:  		/* mr R4, R28 */
		/* 82218B40h case   42:*/		regs.R4 = regs.R28;
		/* 82218B40h case   42:*/		return 0x82218B44;
		  /* 82218B44h */ case   43:  		/* lwz R3, <#[R31 + 20]> */
		/* 82218B44h case   43:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 82218B44h case   43:*/		return 0x82218B48;
		  /* 82218B48h */ case   44:  		/* li R9, 0 */
		/* 82218B48h case   44:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82218B48h case   44:*/		return 0x82218B4C;
		  /* 82218B4Ch */ case   45:  		/* li R8, 0 */
		/* 82218B4Ch case   45:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82218B4Ch case   45:*/		return 0x82218B50;
		  /* 82218B50h */ case   46:  		/* addi R7, R1, 160 */
		/* 82218B50h case   46:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA0);
		/* 82218B50h case   46:*/		return 0x82218B54;
		  /* 82218B54h */ case   47:  		/* addi R6, R1, 156 */
		/* 82218B54h case   47:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x9C);
		/* 82218B54h case   47:*/		return 0x82218B58;
		  /* 82218B58h */ case   48:  		/* addi R5, R1, 152 */
		/* 82218B58h case   48:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x98);
		/* 82218B58h case   48:*/		return 0x82218B5C;
		  /* 82218B5Ch */ case   49:  		/* bl 107892 */
		/* 82218B5Ch case   49:*/		regs.LR = 0x82218B60; return 0x822330D0;
		/* 82218B5Ch case   49:*/		return 0x82218B60;
		  /* 82218B60h */ case   50:  		/* mr R5, R28 */
		/* 82218B60h case   50:*/		regs.R5 = regs.R28;
		/* 82218B60h case   50:*/		return 0x82218B64;
		  /* 82218B64h */ case   51:  		/* li R4, 79 */
		/* 82218B64h case   51:*/		cpu::op::li<0>(regs,&regs.R4,0x4F);
		/* 82218B64h case   51:*/		return 0x82218B68;
		  /* 82218B68h */ case   52:  		/* lwz R3, <#[R31 + 20]> */
		/* 82218B68h case   52:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 82218B68h case   52:*/		return 0x82218B6C;
		  /* 82218B6Ch */ case   53:  		/* bl -766764 */
		/* 82218B6Ch case   53:*/		regs.LR = 0x82218B70; return 0x8215D840;
		/* 82218B6Ch case   53:*/		return 0x82218B70;
		  /* 82218B70h */ case   54:  		/* stw R3, <#[R1 + 180]> */
		/* 82218B70h case   54:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000B4) );
		/* 82218B70h case   54:*/		return 0x82218B74;
		  /* 82218B74h */ case   55:  		/* mr R5, R28 */
		/* 82218B74h case   55:*/		regs.R5 = regs.R28;
		/* 82218B74h case   55:*/		return 0x82218B78;
		  /* 82218B78h */ case   56:  		/* lwz R3, <#[R31 + 20]> */
		/* 82218B78h case   56:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 82218B78h case   56:*/		return 0x82218B7C;
		  /* 82218B7Ch */ case   57:  		/* li R4, 70 */
		/* 82218B7Ch case   57:*/		cpu::op::li<0>(regs,&regs.R4,0x46);
		/* 82218B7Ch case   57:*/		return 0x82218B80;
		  /* 82218B80h */ case   58:  		/* bl -766784 */
		/* 82218B80h case   58:*/		regs.LR = 0x82218B84; return 0x8215D840;
		/* 82218B80h case   58:*/		return 0x82218B84;
		  /* 82218B84h */ case   59:  		/* lhz R9, <#[R26 + 4]> */
		/* 82218B84h case   59:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000004) );
		/* 82218B84h case   59:*/		return 0x82218B88;
		  /* 82218B88h */ case   60:  		/* lis R11, -32253 */
		/* 82218B88h case   60:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82218B88h case   60:*/		return 0x82218B8C;
		  /* 82218B8Ch */ case   61:  		/* stw R30, <#[R1 + 196]> */
		/* 82218B8Ch case   61:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x000000C4) );
		/* 82218B8Ch case   61:*/		return 0x82218B90;
		  /* 82218B90h */ case   62:  		/* lis R10, -32252 */
		/* 82218B90h case   62:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82218B90h case   62:*/		return 0x82218B94;
		  /* 82218B94h */ case   63:  		/* stw R21, <#[R1 + 200]> */
		/* 82218B94h case   63:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x000000C8) );
		/* 82218B94h case   63:*/		return 0x82218B98;
		  /* 82218B98h */ case   64:  		/* rlwinm R9, R9, 0, 26, 31 */
		/* 82218B98h case   64:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R9,regs.R9);
		/* 82218B98h case   64:*/		return 0x82218B9C;
		  /* 82218B9Ch */ case   65:  		/* stw R3, <#[R1 + 184]> */
		/* 82218B9Ch case   65:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000B8) );
		/* 82218B9Ch case   65:*/		return 0x82218BA0;
		  /* 82218BA0h */ case   66:  		/* addi R19, R11, 27460 */
		/* 82218BA0h case   66:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R11,0x6B44);
		/* 82218BA0h case   66:*/		return 0x82218BA4;
		  /* 82218BA4h */ case   67:  		/* addi R18, R10, -7312 */
		/* 82218BA4h case   67:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R10,0xFFFFE370);
		/* 82218BA4h case   67:*/		return 0x82218BA8;
		  /* 82218BA8h */ case   68:  		/* cmplwi CR6, R9, 4 */
		/* 82218BA8h case   68:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000004);
		/* 82218BA8h case   68:*/		return 0x82218BAC;
		  /* 82218BACh */ case   69:  		/* bc 12, CR6_EQ, 36 */
		/* 82218BACh case   69:*/		if ( regs.CR[6].eq ) { return 0x82218BD0;  }
		/* 82218BACh case   69:*/		return 0x82218BB0;
		  /* 82218BB0h */ case   70:  		/* lis R11, -32252 */
		/* 82218BB0h case   70:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82218BB0h case   70:*/		return 0x82218BB4;
		  /* 82218BB4h */ case   71:  		/* mr R6, R18 */
		/* 82218BB4h case   71:*/		regs.R6 = regs.R18;
		/* 82218BB4h case   71:*/		return 0x82218BB8;
		  /* 82218BB8h */ case   72:  		/* addi R5, R11, -5144 */
		/* 82218BB8h case   72:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFEBE8);
		/* 82218BB8h case   72:*/		return 0x82218BBC;
		  /* 82218BBCh */ case   73:  		/* mr R4, R19 */
		/* 82218BBCh case   73:*/		regs.R4 = regs.R19;
		/* 82218BBCh case   73:*/		return 0x82218BC0;
		  /* 82218BC0h */ case   74:  		/* li R7, 9056 */
		/* 82218BC0h case   74:*/		cpu::op::li<0>(regs,&regs.R7,0x2360);
		/* 82218BC0h case   74:*/		return 0x82218BC4;
		  /* 82218BC4h */ case   75:  		/* li R3, 0 */
		/* 82218BC4h case   75:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82218BC4h case   75:*/		return 0x82218BC8;
		  /* 82218BC8h */ case   76:  		/* bl -790464 */
		/* 82218BC8h case   76:*/		regs.LR = 0x82218BCC; return 0x82157C08;
		/* 82218BC8h case   76:*/		return 0x82218BCC;
		  /* 82218BCCh */ case   77:  		/* lwz R3, <#[R1 + 184]> */
		/* 82218BCCh case   77:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000B8) );
		/* 82218BCCh case   77:*/		return 0x82218BD0;
	}
	return 0x82218BD0;
} // Block from 82218A98h-82218BD0h (78 instructions)

//////////////////////////////////////////////////////
// Block at 82218BD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218BD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218BD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218BD0);
		  /* 82218BD0h */ case    0:  		/* cmplwi CR6, R28, 20 */
		/* 82218BD0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000014);
		/* 82218BD0h case    0:*/		return 0x82218BD4;
		  /* 82218BD4h */ case    1:  		/* bc 4, CR6_GT, 36 */
		/* 82218BD4h case    1:*/		if ( !regs.CR[6].gt ) { return 0x82218BF8;  }
		/* 82218BD4h case    1:*/		return 0x82218BD8;
		  /* 82218BD8h */ case    2:  		/* lis R11, -32252 */
		/* 82218BD8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82218BD8h case    2:*/		return 0x82218BDC;
		  /* 82218BDCh */ case    3:  		/* mr R6, R18 */
		/* 82218BDCh case    3:*/		regs.R6 = regs.R18;
		/* 82218BDCh case    3:*/		return 0x82218BE0;
		  /* 82218BE0h */ case    4:  		/* addi R5, R11, -5164 */
		/* 82218BE0h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFEBD4);
		/* 82218BE0h case    4:*/		return 0x82218BE4;
		  /* 82218BE4h */ case    5:  		/* mr R4, R19 */
		/* 82218BE4h case    5:*/		regs.R4 = regs.R19;
		/* 82218BE4h case    5:*/		return 0x82218BE8;
		  /* 82218BE8h */ case    6:  		/* li R7, 9059 */
		/* 82218BE8h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x2363);
		/* 82218BE8h case    6:*/		return 0x82218BEC;
		  /* 82218BECh */ case    7:  		/* li R3, 0 */
		/* 82218BECh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82218BECh case    7:*/		return 0x82218BF0;
		  /* 82218BF0h */ case    8:  		/* bl -790504 */
		/* 82218BF0h case    8:*/		regs.LR = 0x82218BF4; return 0x82157C08;
		/* 82218BF0h case    8:*/		return 0x82218BF4;
		  /* 82218BF4h */ case    9:  		/* lwz R3, <#[R1 + 184]> */
		/* 82218BF4h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000B8) );
		/* 82218BF4h case    9:*/		return 0x82218BF8;
	}
	return 0x82218BF8;
} // Block from 82218BD0h-82218BF8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82218BF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218BF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218BF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218BF8);
		  /* 82218BF8h */ case    0:  		/* lwz R11, <#[R26 + 4]> */
		/* 82218BF8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 82218BF8h case    0:*/		return 0x82218BFC;
		  /* 82218BFCh */ case    1:  		/* lhz R27, <#[R26 + 18]> */
		/* 82218BFCh case    1:*/		cpu::mem::load16z( regs, &regs.R27, (uint32)(regs.R26 + 0x00000012) );
		/* 82218BFCh case    1:*/		return 0x82218C00;
		  /* 82218C00h */ case    2:  		/* rlwinm R29, R11, 0, 16, 31 */
		/* 82218C00h case    2:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R29,regs.R11);
		/* 82218C00h case    2:*/		return 0x82218C04;
		  /* 82218C04h */ case    3:  		/* rlwinm R11, R11, 22, 20, 25 */
		/* 82218C04h case    3:*/		cpu::op::rlwinm<0,22,20,25>(regs,&regs.R11,regs.R11);
		/* 82218C04h case    3:*/		return 0x82218C08;
		  /* 82218C08h */ case    4:  		/* add R11, R11, R29 */
		/* 82218C08h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 82218C08h case    4:*/		return 0x82218C0C;
		  /* 82218C0Ch */ case    5:  		/* addi R11, R11, 4200 */
		/* 82218C0Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1068);
		/* 82218C0Ch case    5:*/		return 0x82218C10;
		  /* 82218C10h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82218C10h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82218C10h case    6:*/		return 0x82218C14;
		  /* 82218C14h */ case    7:  		/* lwzx R11, <#[R11 + R25]> */
		/* 82218C14h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R25 + 0x00000000) );
		/* 82218C14h case    7:*/		return 0x82218C18;
		  /* 82218C18h */ case    8:  		/* cmpwi CR6, R11, -1 */
		/* 82218C18h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82218C18h case    8:*/		return 0x82218C1C;
		  /* 82218C1Ch */ case    9:  		/* bc 4, CR6_EQ, 36 */
		/* 82218C1Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x82218C40;  }
		/* 82218C1Ch case    9:*/		return 0x82218C20;
		  /* 82218C20h */ case   10:  		/* lis R11, -32252 */
		/* 82218C20h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82218C20h case   10:*/		return 0x82218C24;
		  /* 82218C24h */ case   11:  		/* mr R6, R18 */
		/* 82218C24h case   11:*/		regs.R6 = regs.R18;
		/* 82218C24h case   11:*/		return 0x82218C28;
		  /* 82218C28h */ case   12:  		/* addi R5, R11, -5248 */
		/* 82218C28h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFEB80);
		/* 82218C28h case   12:*/		return 0x82218C2C;
		  /* 82218C2Ch */ case   13:  		/* mr R4, R19 */
		/* 82218C2Ch case   13:*/		regs.R4 = regs.R19;
		/* 82218C2Ch case   13:*/		return 0x82218C30;
		  /* 82218C30h */ case   14:  		/* li R7, 9066 */
		/* 82218C30h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x236A);
		/* 82218C30h case   14:*/		return 0x82218C34;
		  /* 82218C34h */ case   15:  		/* li R3, 0 */
		/* 82218C34h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82218C34h case   15:*/		return 0x82218C38;
		  /* 82218C38h */ case   16:  		/* bl -790576 */
		/* 82218C38h case   16:*/		regs.LR = 0x82218C3C; return 0x82157C08;
		/* 82218C38h case   16:*/		return 0x82218C3C;
		  /* 82218C3Ch */ case   17:  		/* lwz R3, <#[R1 + 184]> */
		/* 82218C3Ch case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000B8) );
		/* 82218C3Ch case   17:*/		return 0x82218C40;
	}
	return 0x82218C40;
} // Block from 82218BF8h-82218C40h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82218C40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218C40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218C40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218C40);
		  /* 82218C40h */ case    0:  		/* lhz R11, <#[R26 + 16]> */
		/* 82218C40h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000010) );
		/* 82218C40h case    0:*/		return 0x82218C44;
		  /* 82218C44h */ case    1:  		/* lhz R10, <#[R26 + 4]> */
		/* 82218C44h case    1:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000004) );
		/* 82218C44h case    1:*/		return 0x82218C48;
		  /* 82218C48h */ case    2:  		/* rlwinm R11, R11, 6, 20, 25 */
		/* 82218C48h case    2:*/		cpu::op::rlwinm<0,6,20,25>(regs,&regs.R11,regs.R11);
		/* 82218C48h case    2:*/		return 0x82218C4C;
		  /* 82218C4Ch */ case    3:  		/* rlwinm R10, R10, 6, 20, 25 */
		/* 82218C4Ch case    3:*/		cpu::op::rlwinm<0,6,20,25>(regs,&regs.R10,regs.R10);
		/* 82218C4Ch case    3:*/		return 0x82218C50;
		  /* 82218C50h */ case    4:  		/* add R11, R11, R27 */
		/* 82218C50h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 82218C50h case    4:*/		return 0x82218C54;
		  /* 82218C54h */ case    5:  		/* add R10, R10, R29 */
		/* 82218C54h case    5:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R29);
		/* 82218C54h case    5:*/		return 0x82218C58;
		  /* 82218C58h */ case    6:  		/* addi R11, R11, 4200 */
		/* 82218C58h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1068);
		/* 82218C58h case    6:*/		return 0x82218C5C;
		  /* 82218C5Ch */ case    7:  		/* addi R10, R10, 4200 */
		/* 82218C5Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1068);
		/* 82218C5Ch case    7:*/		return 0x82218C60;
		  /* 82218C60h */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82218C60h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82218C60h case    8:*/		return 0x82218C64;
		  /* 82218C64h */ case    9:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82218C64h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82218C64h case    9:*/		return 0x82218C68;
		  /* 82218C68h */ case   10:  		/* lwzx R11, <#[R11 + R25]> */
		/* 82218C68h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R25 + 0x00000000) );
		/* 82218C68h case   10:*/		return 0x82218C6C;
		  /* 82218C6Ch */ case   11:  		/* lwzx R15, <#[R10 + R25]> */
		/* 82218C6Ch case   11:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R10 + regs.R25 + 0x00000000) );
		/* 82218C6Ch case   11:*/		return 0x82218C70;
		  /* 82218C70h */ case   12:  		/* cmpwi CR6, R11, -1 */
		/* 82218C70h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82218C70h case   12:*/		return 0x82218C74;
		  /* 82218C74h */ case   13:  		/* bc 4, CR6_EQ, 36 */
		/* 82218C74h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82218C98;  }
		/* 82218C74h case   13:*/		return 0x82218C78;
		  /* 82218C78h */ case   14:  		/* lis R11, -32252 */
		/* 82218C78h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82218C78h case   14:*/		return 0x82218C7C;
		  /* 82218C7Ch */ case   15:  		/* mr R6, R18 */
		/* 82218C7Ch case   15:*/		regs.R6 = regs.R18;
		/* 82218C7Ch case   15:*/		return 0x82218C80;
		  /* 82218C80h */ case   16:  		/* addi R5, R11, -5336 */
		/* 82218C80h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFEB28);
		/* 82218C80h case   16:*/		return 0x82218C84;
		  /* 82218C84h */ case   17:  		/* mr R4, R19 */
		/* 82218C84h case   17:*/		regs.R4 = regs.R19;
		/* 82218C84h case   17:*/		return 0x82218C88;
		  /* 82218C88h */ case   18:  		/* li R7, 9071 */
		/* 82218C88h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x236F);
		/* 82218C88h case   18:*/		return 0x82218C8C;
		  /* 82218C8Ch */ case   19:  		/* li R3, 0 */
		/* 82218C8Ch case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82218C8Ch case   19:*/		return 0x82218C90;
		  /* 82218C90h */ case   20:  		/* bl -790664 */
		/* 82218C90h case   20:*/		regs.LR = 0x82218C94; return 0x82157C08;
		/* 82218C90h case   20:*/		return 0x82218C94;
		  /* 82218C94h */ case   21:  		/* lwz R3, <#[R1 + 184]> */
		/* 82218C94h case   21:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000B8) );
		/* 82218C94h case   21:*/		return 0x82218C98;
	}
	return 0x82218C98;
} // Block from 82218C40h-82218C98h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82218C98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218C98);
		  /* 82218C98h */ case    0:  		/* lhz R11, <#[R26 + 16]> */
		/* 82218C98h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000010) );
		/* 82218C98h case    0:*/		return 0x82218C9C;
		  /* 82218C9Ch */ case    1:  		/* lhz R10, <#[R26 + 2]> */
		/* 82218C9Ch case    1:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000002) );
		/* 82218C9Ch case    1:*/		return 0x82218CA0;
		  /* 82218CA0h */ case    2:  		/* rlwinm R11, R11, 6, 20, 25 */
		/* 82218CA0h case    2:*/		cpu::op::rlwinm<0,6,20,25>(regs,&regs.R11,regs.R11);
		/* 82218CA0h case    2:*/		return 0x82218CA4;
		  /* 82218CA4h */ case    3:  		/* cmplwi CR6, R10, 94 */
		/* 82218CA4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000005E);
		/* 82218CA4h case    3:*/		return 0x82218CA8;
		  /* 82218CA8h */ case    4:  		/* add R11, R11, R27 */
		/* 82218CA8h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 82218CA8h case    4:*/		return 0x82218CAC;
		  /* 82218CACh */ case    5:  		/* addi R11, R11, 4200 */
		/* 82218CACh case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1068);
		/* 82218CACh case    5:*/		return 0x82218CB0;
		  /* 82218CB0h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82218CB0h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82218CB0h case    6:*/		return 0x82218CB4;
		  /* 82218CB4h */ case    7:  		/* lwzx R20, <#[R11 + R25]> */
		/* 82218CB4h case    7:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R11 + regs.R25 + 0x00000000) );
		/* 82218CB4h case    7:*/		return 0x82218CB8;
		  /* 82218CB8h */ case    8:  		/* bc 4, CR6_EQ, 100 */
		/* 82218CB8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82218D1C;  }
		/* 82218CB8h case    8:*/		return 0x82218CBC;
		  /* 82218CBCh */ case    9:  		/* lwz R11, <#[R26 + 20]> */
		/* 82218CBCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000014) );
		/* 82218CBCh case    9:*/		return 0x82218CC0;
		  /* 82218CC0h */ case   10:  		/* rlwinm R29, R11, 0, 16, 31 */
		/* 82218CC0h case   10:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R29,regs.R11);
		/* 82218CC0h case   10:*/		return 0x82218CC4;
		  /* 82218CC4h */ case   11:  		/* rlwinm R11, R11, 22, 20, 25 */
		/* 82218CC4h case   11:*/		cpu::op::rlwinm<0,22,20,25>(regs,&regs.R11,regs.R11);
		/* 82218CC4h case   11:*/		return 0x82218CC8;
		  /* 82218CC8h */ case   12:  		/* add R11, R11, R29 */
		/* 82218CC8h case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 82218CC8h case   12:*/		return 0x82218CCC;
		  /* 82218CCCh */ case   13:  		/* addi R11, R11, 4200 */
		/* 82218CCCh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1068);
		/* 82218CCCh case   13:*/		return 0x82218CD0;
		  /* 82218CD0h */ case   14:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82218CD0h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82218CD0h case   14:*/		return 0x82218CD4;
		  /* 82218CD4h */ case   15:  		/* lwzx R11, <#[R11 + R25]> */
		/* 82218CD4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R25 + 0x00000000) );
		/* 82218CD4h case   15:*/		return 0x82218CD8;
		  /* 82218CD8h */ case   16:  		/* cmpwi CR6, R11, -1 */
		/* 82218CD8h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82218CD8h case   16:*/		return 0x82218CDC;
		  /* 82218CDCh */ case   17:  		/* bc 4, CR6_EQ, 36 */
		/* 82218CDCh case   17:*/		if ( !regs.CR[6].eq ) { return 0x82218D00;  }
		/* 82218CDCh case   17:*/		return 0x82218CE0;
		  /* 82218CE0h */ case   18:  		/* lis R11, -32252 */
		/* 82218CE0h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82218CE0h case   18:*/		return 0x82218CE4;
		  /* 82218CE4h */ case   19:  		/* mr R6, R18 */
		/* 82218CE4h case   19:*/		regs.R6 = regs.R18;
		/* 82218CE4h case   19:*/		return 0x82218CE8;
		  /* 82218CE8h */ case   20:  		/* addi R5, R11, -5424 */
		/* 82218CE8h case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFEAD0);
		/* 82218CE8h case   20:*/		return 0x82218CEC;
		  /* 82218CECh */ case   21:  		/* mr R4, R19 */
		/* 82218CECh case   21:*/		regs.R4 = regs.R19;
		/* 82218CECh case   21:*/		return 0x82218CF0;
		  /* 82218CF0h */ case   22:  		/* li R7, 9079 */
		/* 82218CF0h case   22:*/		cpu::op::li<0>(regs,&regs.R7,0x2377);
		/* 82218CF0h case   22:*/		return 0x82218CF4;
		  /* 82218CF4h */ case   23:  		/* li R3, 0 */
		/* 82218CF4h case   23:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82218CF4h case   23:*/		return 0x82218CF8;
		  /* 82218CF8h */ case   24:  		/* bl -790768 */
		/* 82218CF8h case   24:*/		regs.LR = 0x82218CFC; return 0x82157C08;
		/* 82218CF8h case   24:*/		return 0x82218CFC;
		  /* 82218CFCh */ case   25:  		/* lwz R3, <#[R1 + 184]> */
		/* 82218CFCh case   25:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000B8) );
		/* 82218CFCh case   25:*/		return 0x82218D00;
	}
	return 0x82218D00;
} // Block from 82218C98h-82218D00h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82218D00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218D00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218D00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218D00);
		  /* 82218D00h */ case    0:  		/* lhz R11, <#[R26 + 20]> */
		/* 82218D00h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000014) );
		/* 82218D00h case    0:*/		return 0x82218D04;
		  /* 82218D04h */ case    1:  		/* rlwinm R11, R11, 6, 20, 25 */
		/* 82218D04h case    1:*/		cpu::op::rlwinm<0,6,20,25>(regs,&regs.R11,regs.R11);
		/* 82218D04h case    1:*/		return 0x82218D08;
		  /* 82218D08h */ case    2:  		/* add R11, R11, R29 */
		/* 82218D08h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 82218D08h case    2:*/		return 0x82218D0C;
		  /* 82218D0Ch */ case    3:  		/* addi R11, R11, 4200 */
		/* 82218D0Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1068);
		/* 82218D0Ch case    3:*/		return 0x82218D10;
		  /* 82218D10h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82218D10h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82218D10h case    4:*/		return 0x82218D14;
		  /* 82218D14h */ case    5:  		/* lwzx R16, <#[R11 + R25]> */
		/* 82218D14h case    5:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R11 + regs.R25 + 0x00000000) );
		/* 82218D14h case    5:*/		return 0x82218D18;
		  /* 82218D18h */ case    6:  		/* b 8 */
		/* 82218D18h case    6:*/		return 0x82218D20;
		/* 82218D18h case    6:*/		return 0x82218D1C;
	}
	return 0x82218D1C;
} // Block from 82218D00h-82218D1Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82218D1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218D1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218D1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218D1C);
		  /* 82218D1Ch */ case    0:  		/* lwz R16, <#[R1 + 80]> */
		/* 82218D1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R1 + 0x00000050) );
		/* 82218D1Ch case    0:*/		return 0x82218D20;
	}
	return 0x82218D20;
} // Block from 82218D1Ch-82218D20h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82218D20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218D20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218D20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218D20);
		  /* 82218D20h */ case    0:  		/* lwz R11, <#[R26 + 4]> */
		/* 82218D20h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 82218D20h case    0:*/		return 0x82218D24;
		  /* 82218D24h */ case    1:  		/* rlwinm. R11, R11, 0, 9, 9 */
		/* 82218D24h case    1:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R11);
		/* 82218D24h case    1:*/		return 0x82218D28;
		  /* 82218D28h */ case    2:  		/* bc 12, CR0_EQ, 228 */
		/* 82218D28h case    2:*/		if ( regs.CR[0].eq ) { return 0x82218E0C;  }
		/* 82218D28h case    2:*/		return 0x82218D2C;
		  /* 82218D2Ch */ case    3:  		/* lwz R10, <#[R26 + 8]> */
		/* 82218D2Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000008) );
		/* 82218D2Ch case    3:*/		return 0x82218D30;
		  /* 82218D30h */ case    4:  		/* rlwinm R11, R10, 0, 30, 31 */
		/* 82218D30h case    4:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R10);
		/* 82218D30h case    4:*/		return 0x82218D34;
		  /* 82218D34h */ case    5:  		/* cmplwi CR6, R11, 1 */
		/* 82218D34h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82218D34h case    5:*/		return 0x82218D38;
		  /* 82218D38h */ case    6:  		/* bc 12, CR6_LT, 36 */
		/* 82218D38h case    6:*/		if ( regs.CR[6].lt ) { return 0x82218D5C;  }
		/* 82218D38h case    6:*/		return 0x82218D3C;
		  /* 82218D3Ch */ case    7:  		/* bc 12, CR6_EQ, 36 */
		/* 82218D3Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82218D60;  }
		/* 82218D3Ch case    7:*/		return 0x82218D40;
		  /* 82218D40h */ case    8:  		/* cmplwi CR6, R11, 3 */
		/* 82218D40h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82218D40h case    8:*/		return 0x82218D44;
		  /* 82218D44h */ case    9:  		/* bc 12, CR6_LT, 16 */
		/* 82218D44h case    9:*/		if ( regs.CR[6].lt ) { return 0x82218D54;  }
		/* 82218D44h case    9:*/		return 0x82218D48;
		  /* 82218D48h */ case   10:  		/* bc 4, CR6_EQ, 24 */
		/* 82218D48h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82218D60;  }
		/* 82218D48h case   10:*/		return 0x82218D4C;
		  /* 82218D4Ch */ case   11:  		/* li R21, 5 */
		/* 82218D4Ch case   11:*/		cpu::op::li<0>(regs,&regs.R21,0x5);
		/* 82218D4Ch case   11:*/		return 0x82218D50;
		  /* 82218D50h */ case   12:  		/* b 16 */
		/* 82218D50h case   12:*/		return 0x82218D60;
		/* 82218D50h case   12:*/		return 0x82218D54;
	}
	return 0x82218D54;
} // Block from 82218D20h-82218D54h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82218D54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218D54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218D54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218D54);
		  /* 82218D54h */ case    0:  		/* li R21, 4 */
		/* 82218D54h case    0:*/		cpu::op::li<0>(regs,&regs.R21,0x4);
		/* 82218D54h case    0:*/		return 0x82218D58;
		  /* 82218D58h */ case    1:  		/* b 8 */
		/* 82218D58h case    1:*/		return 0x82218D60;
		/* 82218D58h case    1:*/		return 0x82218D5C;
	}
	return 0x82218D5C;
} // Block from 82218D54h-82218D5Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82218D5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218D5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218D5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218D5C);
		  /* 82218D5Ch */ case    0:  		/* li R21, 7 */
		/* 82218D5Ch case    0:*/		cpu::op::li<0>(regs,&regs.R21,0x7);
		/* 82218D5Ch case    0:*/		return 0x82218D60;
	}
	return 0x82218D60;
} // Block from 82218D5Ch-82218D60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82218D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218D60);
		  /* 82218D60h */ case    0:  		/* rlwinm R11, R10, 30, 30, 31 */
		/* 82218D60h case    0:*/		cpu::op::rlwinm<0,30,30,31>(regs,&regs.R11,regs.R10);
		/* 82218D60h case    0:*/		return 0x82218D64;
		  /* 82218D64h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 82218D64h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82218D64h case    1:*/		return 0x82218D68;
		  /* 82218D68h */ case    2:  		/* bc 12, CR6_LT, 44 */
		/* 82218D68h case    2:*/		if ( regs.CR[6].lt ) { return 0x82218D94;  }
		/* 82218D68h case    2:*/		return 0x82218D6C;
		  /* 82218D6Ch */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 82218D6Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82218D8C;  }
		/* 82218D6Ch case    3:*/		return 0x82218D70;
		  /* 82218D70h */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 82218D70h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82218D70h case    4:*/		return 0x82218D74;
		  /* 82218D74h */ case    5:  		/* bc 12, CR6_LT, 16 */
		/* 82218D74h case    5:*/		if ( regs.CR[6].lt ) { return 0x82218D84;  }
		/* 82218D74h case    5:*/		return 0x82218D78;
		  /* 82218D78h */ case    6:  		/* bc 4, CR6_EQ, 32 */
		/* 82218D78h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82218D98;  }
		/* 82218D78h case    6:*/		return 0x82218D7C;
		  /* 82218D7Ch */ case    7:  		/* ori R21, R21, 80 */
		/* 82218D7Ch case    7:*/		cpu::op::ori<0>(regs,&regs.R21,regs.R21,0x50);
		/* 82218D7Ch case    7:*/		return 0x82218D80;
		  /* 82218D80h */ case    8:  		/* b 24 */
		/* 82218D80h case    8:*/		return 0x82218D98;
		/* 82218D80h case    8:*/		return 0x82218D84;
	}
	return 0x82218D84;
} // Block from 82218D60h-82218D84h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82218D84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218D84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218D84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218D84);
		  /* 82218D84h */ case    0:  		/* ori R21, R21, 64 */
		/* 82218D84h case    0:*/		cpu::op::ori<0>(regs,&regs.R21,regs.R21,0x40);
		/* 82218D84h case    0:*/		return 0x82218D88;
		  /* 82218D88h */ case    1:  		/* b 16 */
		/* 82218D88h case    1:*/		return 0x82218D98;
		/* 82218D88h case    1:*/		return 0x82218D8C;
	}
	return 0x82218D8C;
} // Block from 82218D84h-82218D8Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82218D8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218D8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218D8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218D8C);
		  /* 82218D8Ch */ case    0:  		/* ori R21, R21, 16 */
		/* 82218D8Ch case    0:*/		cpu::op::ori<0>(regs,&regs.R21,regs.R21,0x10);
		/* 82218D8Ch case    0:*/		return 0x82218D90;
		  /* 82218D90h */ case    1:  		/* b 8 */
		/* 82218D90h case    1:*/		return 0x82218D98;
		/* 82218D90h case    1:*/		return 0x82218D94;
	}
	return 0x82218D94;
} // Block from 82218D8Ch-82218D94h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82218D94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218D94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218D94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218D94);
		  /* 82218D94h */ case    0:  		/* ori R21, R21, 112 */
		/* 82218D94h case    0:*/		cpu::op::ori<0>(regs,&regs.R21,regs.R21,0x70);
		/* 82218D94h case    0:*/		return 0x82218D98;
	}
	return 0x82218D98;
} // Block from 82218D94h-82218D98h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82218D98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218D98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218D98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218D98);
		  /* 82218D98h */ case    0:  		/* rlwinm R11, R10, 28, 30, 31 */
		/* 82218D98h case    0:*/		cpu::op::rlwinm<0,28,30,31>(regs,&regs.R11,regs.R10);
		/* 82218D98h case    0:*/		return 0x82218D9C;
		  /* 82218D9Ch */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 82218D9Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82218D9Ch case    1:*/		return 0x82218DA0;
		  /* 82218DA0h */ case    2:  		/* bc 12, CR6_LT, 44 */
		/* 82218DA0h case    2:*/		if ( regs.CR[6].lt ) { return 0x82218DCC;  }
		/* 82218DA0h case    2:*/		return 0x82218DA4;
		  /* 82218DA4h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 82218DA4h case    3:*/		if ( regs.CR[6].eq ) { return 0x82218DC4;  }
		/* 82218DA4h case    3:*/		return 0x82218DA8;
		  /* 82218DA8h */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 82218DA8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82218DA8h case    4:*/		return 0x82218DAC;
		  /* 82218DACh */ case    5:  		/* bc 12, CR6_LT, 16 */
		/* 82218DACh case    5:*/		if ( regs.CR[6].lt ) { return 0x82218DBC;  }
		/* 82218DACh case    5:*/		return 0x82218DB0;
		  /* 82218DB0h */ case    6:  		/* bc 4, CR6_EQ, 32 */
		/* 82218DB0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82218DD0;  }
		/* 82218DB0h case    6:*/		return 0x82218DB4;
		  /* 82218DB4h */ case    7:  		/* ori R21, R21, 1280 */
		/* 82218DB4h case    7:*/		cpu::op::ori<0>(regs,&regs.R21,regs.R21,0x500);
		/* 82218DB4h case    7:*/		return 0x82218DB8;
		  /* 82218DB8h */ case    8:  		/* b 24 */
		/* 82218DB8h case    8:*/		return 0x82218DD0;
		/* 82218DB8h case    8:*/		return 0x82218DBC;
	}
	return 0x82218DBC;
} // Block from 82218D98h-82218DBCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 82218DBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218DBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218DBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218DBC);
		  /* 82218DBCh */ case    0:  		/* ori R21, R21, 1024 */
		/* 82218DBCh case    0:*/		cpu::op::ori<0>(regs,&regs.R21,regs.R21,0x400);
		/* 82218DBCh case    0:*/		return 0x82218DC0;
		  /* 82218DC0h */ case    1:  		/* b 16 */
		/* 82218DC0h case    1:*/		return 0x82218DD0;
		/* 82218DC0h case    1:*/		return 0x82218DC4;
	}
	return 0x82218DC4;
} // Block from 82218DBCh-82218DC4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82218DC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218DC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218DC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218DC4);
		  /* 82218DC4h */ case    0:  		/* ori R21, R21, 512 */
		/* 82218DC4h case    0:*/		cpu::op::ori<0>(regs,&regs.R21,regs.R21,0x200);
		/* 82218DC4h case    0:*/		return 0x82218DC8;
		  /* 82218DC8h */ case    1:  		/* b 8 */
		/* 82218DC8h case    1:*/		return 0x82218DD0;
		/* 82218DC8h case    1:*/		return 0x82218DCC;
	}
	return 0x82218DCC;
} // Block from 82218DC4h-82218DCCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82218DCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218DCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218DCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218DCC);
		  /* 82218DCCh */ case    0:  		/* ori R21, R21, 1792 */
		/* 82218DCCh case    0:*/		cpu::op::ori<0>(regs,&regs.R21,regs.R21,0x700);
		/* 82218DCCh case    0:*/		return 0x82218DD0;
	}
	return 0x82218DD0;
} // Block from 82218DCCh-82218DD0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82218DD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218DD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218DD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218DD0);
		  /* 82218DD0h */ case    0:  		/* rlwinm R11, R10, 26, 30, 31 */
		/* 82218DD0h case    0:*/		cpu::op::rlwinm<0,26,30,31>(regs,&regs.R11,regs.R10);
		/* 82218DD0h case    0:*/		return 0x82218DD4;
		  /* 82218DD4h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 82218DD4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82218DD4h case    1:*/		return 0x82218DD8;
		  /* 82218DD8h */ case    2:  		/* bc 12, CR6_LT, 44 */
		/* 82218DD8h case    2:*/		if ( regs.CR[6].lt ) { return 0x82218E04;  }
		/* 82218DD8h case    2:*/		return 0x82218DDC;
		  /* 82218DDCh */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 82218DDCh case    3:*/		if ( regs.CR[6].eq ) { return 0x82218DFC;  }
		/* 82218DDCh case    3:*/		return 0x82218DE0;
		  /* 82218DE0h */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 82218DE0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82218DE0h case    4:*/		return 0x82218DE4;
		  /* 82218DE4h */ case    5:  		/* bc 12, CR6_LT, 16 */
		/* 82218DE4h case    5:*/		if ( regs.CR[6].lt ) { return 0x82218DF4;  }
		/* 82218DE4h case    5:*/		return 0x82218DE8;
		  /* 82218DE8h */ case    6:  		/* bc 4, CR6_EQ, 40 */
		/* 82218DE8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82218E10;  }
		/* 82218DE8h case    6:*/		return 0x82218DEC;
		  /* 82218DECh */ case    7:  		/* ori R21, R21, 20480 */
		/* 82218DECh case    7:*/		cpu::op::ori<0>(regs,&regs.R21,regs.R21,0x5000);
		/* 82218DECh case    7:*/		return 0x82218DF0;
		  /* 82218DF0h */ case    8:  		/* b 32 */
		/* 82218DF0h case    8:*/		return 0x82218E10;
		/* 82218DF0h case    8:*/		return 0x82218DF4;
	}
	return 0x82218DF4;
} // Block from 82218DD0h-82218DF4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82218DF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218DF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218DF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218DF4);
		  /* 82218DF4h */ case    0:  		/* ori R21, R21, 16384 */
		/* 82218DF4h case    0:*/		cpu::op::ori<0>(regs,&regs.R21,regs.R21,0x4000);
		/* 82218DF4h case    0:*/		return 0x82218DF8;
		  /* 82218DF8h */ case    1:  		/* b 24 */
		/* 82218DF8h case    1:*/		return 0x82218E10;
		/* 82218DF8h case    1:*/		return 0x82218DFC;
	}
	return 0x82218DFC;
} // Block from 82218DF4h-82218DFCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82218DFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218DFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218DFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218DFC);
		  /* 82218DFCh */ case    0:  		/* ori R21, R21, 12288 */
		/* 82218DFCh case    0:*/		cpu::op::ori<0>(regs,&regs.R21,regs.R21,0x3000);
		/* 82218DFCh case    0:*/		return 0x82218E00;
		  /* 82218E00h */ case    1:  		/* b 16 */
		/* 82218E00h case    1:*/		return 0x82218E10;
		/* 82218E00h case    1:*/		return 0x82218E04;
	}
	return 0x82218E04;
} // Block from 82218DFCh-82218E04h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82218E04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218E04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218E04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218E04);
		  /* 82218E04h */ case    0:  		/* ori R21, R21, 28672 */
		/* 82218E04h case    0:*/		cpu::op::ori<0>(regs,&regs.R21,regs.R21,0x7000);
		/* 82218E04h case    0:*/		return 0x82218E08;
		  /* 82218E08h */ case    1:  		/* b 8 */
		/* 82218E08h case    1:*/		return 0x82218E10;
		/* 82218E08h case    1:*/		return 0x82218E0C;
	}
	return 0x82218E0C;
} // Block from 82218E04h-82218E0Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82218E0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218E0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218E0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218E0C);
		  /* 82218E0Ch */ case    0:  		/* li R21, 12816 */
		/* 82218E0Ch case    0:*/		cpu::op::li<0>(regs,&regs.R21,0x3210);
		/* 82218E0Ch case    0:*/		return 0x82218E10;
	}
	return 0x82218E10;
} // Block from 82218E0Ch-82218E10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82218E10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218E10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218E10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218E10);
		  /* 82218E10h */ case    0:  		/* lwz R11, <#[R26 + 16]> */
		/* 82218E10h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000010) );
		/* 82218E10h case    0:*/		return 0x82218E14;
		  /* 82218E14h */ case    1:  		/* rlwinm. R11, R11, 0, 9, 9 */
		/* 82218E14h case    1:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R11);
		/* 82218E14h case    1:*/		return 0x82218E18;
		  /* 82218E18h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82218E18h case    2:*/		if ( regs.CR[0].eq ) { return 0x82218E28;  }
		/* 82218E18h case    2:*/		return 0x82218E1C;
		  /* 82218E1Ch */ case    3:  		/* lwz R11, <#[R26 + 28]> */
		/* 82218E1Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000001C) );
		/* 82218E1Ch case    3:*/		return 0x82218E20;
		  /* 82218E20h */ case    4:  		/* andi. R22, R11, 1911 */
		/* 82218E20h case    4:*/		cpu::op::andi<1>(regs,&regs.R22,regs.R11,0x777);
		/* 82218E20h case    4:*/		return 0x82218E24;
		  /* 82218E24h */ case    5:  		/* b 8 */
		/* 82218E24h case    5:*/		return 0x82218E2C;
		/* 82218E24h case    5:*/		return 0x82218E28;
	}
	return 0x82218E28;
} // Block from 82218E10h-82218E28h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82218E28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218E28);
		  /* 82218E28h */ case    0:  		/* li R22, 528 */
		/* 82218E28h case    0:*/		cpu::op::li<0>(regs,&regs.R22,0x210);
		/* 82218E28h case    0:*/		return 0x82218E2C;
	}
	return 0x82218E2C;
} // Block from 82218E28h-82218E2Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82218E2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218E2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218E2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218E2C);
		  /* 82218E2Ch */ case    0:  		/* lhz R11, <#[R26 + 2]> */
		/* 82218E2Ch case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000002) );
		/* 82218E2Ch case    0:*/		return 0x82218E30;
		  /* 82218E30h */ case    1:  		/* cmplwi CR6, R11, 94 */
		/* 82218E30h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005E);
		/* 82218E30h case    1:*/		return 0x82218E34;
		  /* 82218E34h */ case    2:  		/* bc 4, CR6_EQ, 56 */
		/* 82218E34h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82218E6C;  }
		/* 82218E34h case    2:*/		return 0x82218E38;
		  /* 82218E38h */ case    3:  		/* lwz R11, <#[R26 + 20]> */
		/* 82218E38h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000014) );
		/* 82218E38h case    3:*/		return 0x82218E3C;
		  /* 82218E3Ch */ case    4:  		/* rlwinm. R11, R11, 0, 9, 9 */
		/* 82218E3Ch case    4:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R11);
		/* 82218E3Ch case    4:*/		return 0x82218E40;
		  /* 82218E40h */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 82218E40h case    5:*/		if ( regs.CR[0].eq ) { return 0x82218E64;  }
		/* 82218E40h case    5:*/		return 0x82218E44;
		  /* 82218E44h */ case    6:  		/* lwz R11, <#[R26 + 28]> */
		/* 82218E44h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000001C) );
		/* 82218E44h case    6:*/		return 0x82218E48;
		  /* 82218E48h */ case    7:  		/* rlwinm R10, R11, 0, 17, 19 */
		/* 82218E48h case    7:*/		cpu::op::rlwinm<0,0,17,19>(regs,&regs.R10,regs.R11);
		/* 82218E48h case    7:*/		return 0x82218E4C;
		  /* 82218E4Ch */ case    8:  		/* rlwinm R11, R11, 28, 21, 23 */
		/* 82218E4Ch case    8:*/		cpu::op::rlwinm<0,28,21,23>(regs,&regs.R11,regs.R11);
		/* 82218E4Ch case    8:*/		return 0x82218E50;
		  /* 82218E50h */ case    9:  		/* or R11, R11, R10 */
		/* 82218E50h case    9:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82218E50h case    9:*/		return 0x82218E54;
		  /* 82218E54h */ case   10:  		/* rlwinm R11, R11, 28, 4, 31 */
		/* 82218E54h case   10:*/		cpu::op::rlwinm<0,28,4,31>(regs,&regs.R11,regs.R11);
		/* 82218E54h case   10:*/		return 0x82218E58;
		  /* 82218E58h */ case   11:  		/* or R11, R11, R10 */
		/* 82218E58h case   11:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82218E58h case   11:*/		return 0x82218E5C;
		  /* 82218E5Ch */ case   12:  		/* rlwinm R23, R11, 28, 4, 31 */
		/* 82218E5Ch case   12:*/		cpu::op::rlwinm<0,28,4,31>(regs,&regs.R23,regs.R11);
		/* 82218E5Ch case   12:*/		return 0x82218E60;
		  /* 82218E60h */ case   13:  		/* b 16 */
		/* 82218E60h case   13:*/		return 0x82218E70;
		/* 82218E60h case   13:*/		return 0x82218E64;
	}
	return 0x82218E64;
} // Block from 82218E2Ch-82218E64h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82218E64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218E64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218E64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218E64);
		  /* 82218E64h */ case    0:  		/* li R23, 819 */
		/* 82218E64h case    0:*/		cpu::op::li<0>(regs,&regs.R23,0x333);
		/* 82218E64h case    0:*/		return 0x82218E68;
		  /* 82218E68h */ case    1:  		/* b 8 */
		/* 82218E68h case    1:*/		return 0x82218E70;
		/* 82218E68h case    1:*/		return 0x82218E6C;
	}
	return 0x82218E6C;
} // Block from 82218E64h-82218E6Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82218E6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218E6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218E6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218E6C);
		  /* 82218E6Ch */ case    0:  		/* lwz R23, <#[R1 + 80]> */
		/* 82218E6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000050) );
		/* 82218E6Ch case    0:*/		return 0x82218E70;
	}
	return 0x82218E70;
} // Block from 82218E6Ch-82218E70h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82218E70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218E70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218E70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218E70);
		  /* 82218E70h */ case    0:  		/* rlwinm R11, R28, 3, 0, 28 */
		/* 82218E70h case    0:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R28);
		/* 82218E70h case    0:*/		return 0x82218E74;
		  /* 82218E74h */ case    1:  		/* add R11, R11, R25 */
		/* 82218E74h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R25);
		/* 82218E74h case    1:*/		return 0x82218E78;
		  /* 82218E78h */ case    2:  		/* lwz R11, <#[R11 + 12996]> */
		/* 82218E78h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000032C4) );
		/* 82218E78h case    2:*/		return 0x82218E7C;
		  /* 82218E7Ch */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 82218E7Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82218E7Ch case    3:*/		return 0x82218E80;
		  /* 82218E80h */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 82218E80h case    4:*/		if ( regs.CR[6].eq ) { return 0x82218E94;  }
		/* 82218E80h case    4:*/		return 0x82218E84;
		  /* 82218E84h */ case    5:  		/* addi R11, R11, -1 */
		/* 82218E84h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82218E84h case    5:*/		return 0x82218E88;
		  /* 82218E88h */ case    6:  		/* addic R10, R11, -1 */
		/* 82218E88h case    6:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 82218E88h case    6:*/		return 0x82218E8C;
		  /* 82218E8Ch */ case    7:  		/* subfe R11, R10, R11 */
		/* 82218E8Ch case    7:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82218E8Ch case    7:*/		return 0x82218E90;
		  /* 82218E90h */ case    8:  		/* stw R11, <#[R1 + 116]> */
		/* 82218E90h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 82218E90h case    8:*/		return 0x82218E94;
	}
	return 0x82218E94;
} // Block from 82218E70h-82218E94h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82218E94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218E94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218E94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218E94);
		  /* 82218E94h */ case    0:  		/* addi R11, R28, 1624 */
		/* 82218E94h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x658);
		/* 82218E94h case    0:*/		return 0x82218E98;
		  /* 82218E98h */ case    1:  		/* li R24, 2 */
		/* 82218E98h case    1:*/		cpu::op::li<0>(regs,&regs.R24,0x2);
		/* 82218E98h case    1:*/		return 0x82218E9C;
		  /* 82218E9Ch */ case    2:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 82218E9Ch case    2:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 82218E9Ch case    2:*/		return 0x82218EA0;
		  /* 82218EA0h */ case    3:  		/* lwzx R11, <#[R11 + R25]> */
		/* 82218EA0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R25 + 0x00000000) );
		/* 82218EA0h case    3:*/		return 0x82218EA4;
		  /* 82218EA4h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82218EA4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82218EA4h case    4:*/		return 0x82218EA8;
		  /* 82218EA8h */ case    5:  		/* bc 12, CR6_EQ, 92 */
		/* 82218EA8h case    5:*/		if ( regs.CR[6].eq ) { return 0x82218F04;  }
		/* 82218EA8h case    5:*/		return 0x82218EAC;
		  /* 82218EACh */ case    6:  		/* cmplwi CR6, R11, 1 */
		/* 82218EACh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82218EACh case    6:*/		return 0x82218EB0;
		  /* 82218EB0h */ case    7:  		/* bc 12, CR6_EQ, 76 */
		/* 82218EB0h case    7:*/		if ( regs.CR[6].eq ) { return 0x82218EFC;  }
		/* 82218EB0h case    7:*/		return 0x82218EB4;
		  /* 82218EB4h */ case    8:  		/* cmplwi CR6, R11, 2 */
		/* 82218EB4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 82218EB4h case    8:*/		return 0x82218EB8;
		  /* 82218EB8h */ case    9:  		/* bc 12, CR6_EQ, 28 */
		/* 82218EB8h case    9:*/		if ( regs.CR[6].eq ) { return 0x82218ED4;  }
		/* 82218EB8h case    9:*/		return 0x82218EBC;
		  /* 82218EBCh */ case   10:  		/* cmplwi CR6, R11, 3 */
		/* 82218EBCh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82218EBCh case   10:*/		return 0x82218EC0;
		  /* 82218EC0h */ case   11:  		/* bc 12, CR6_EQ, 52 */
		/* 82218EC0h case   11:*/		if ( regs.CR[6].eq ) { return 0x82218EF4;  }
		/* 82218EC0h case   11:*/		return 0x82218EC4;
		  /* 82218EC4h */ case   12:  		/* cmplwi CR6, R11, 4 */
		/* 82218EC4h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 82218EC4h case   12:*/		return 0x82218EC8;
		  /* 82218EC8h */ case   13:  		/* bc 12, CR6_EQ, 32 */
		/* 82218EC8h case   13:*/		if ( regs.CR[6].eq ) { return 0x82218EE8;  }
		/* 82218EC8h case   13:*/		return 0x82218ECC;
		  /* 82218ECCh */ case   14:  		/* cmplwi CR6, R11, 5 */
		/* 82218ECCh case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 82218ECCh case   14:*/		return 0x82218ED0;
		  /* 82218ED0h */ case   15:  		/* bc 12, CR6_EQ, 12 */
		/* 82218ED0h case   15:*/		if ( regs.CR[6].eq ) { return 0x82218EDC;  }
		/* 82218ED0h case   15:*/		return 0x82218ED4;
	}
	return 0x82218ED4;
} // Block from 82218E94h-82218ED4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82218ED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218ED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218ED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218ED4);
		  /* 82218ED4h */ case    0:  		/* stw R30, <#[R1 + 180]> */
		/* 82218ED4h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x000000B4) );
		/* 82218ED4h case    0:*/		return 0x82218ED8;
		  /* 82218ED8h */ case    1:  		/* b 132 */
		/* 82218ED8h case    1:*/		return 0x82218F5C;
		/* 82218ED8h case    1:*/		return 0x82218EDC;
	}
	return 0x82218EDC;
} // Block from 82218ED4h-82218EDCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82218EDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218EDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218EDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218EDC);
		  /* 82218EDCh */ case    0:  		/* li R11, 4 */
		/* 82218EDCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 82218EDCh case    0:*/		return 0x82218EE0;
		  /* 82218EE0h */ case    1:  		/* stw R11, <#[R1 + 180]> */
		/* 82218EE0h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000B4) );
		/* 82218EE0h case    1:*/		return 0x82218EE4;
		  /* 82218EE4h */ case    2:  		/* b 120 */
		/* 82218EE4h case    2:*/		return 0x82218F5C;
		/* 82218EE4h case    2:*/		return 0x82218EE8;
	}
	return 0x82218EE8;
} // Block from 82218EDCh-82218EE8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82218EE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218EE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218EE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218EE8);
		  /* 82218EE8h */ case    0:  		/* li R11, 3 */
		/* 82218EE8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 82218EE8h case    0:*/		return 0x82218EEC;
		  /* 82218EECh */ case    1:  		/* stw R11, <#[R1 + 180]> */
		/* 82218EECh case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000B4) );
		/* 82218EECh case    1:*/		return 0x82218EF0;
		  /* 82218EF0h */ case    2:  		/* b 32 */
		/* 82218EF0h case    2:*/		return 0x82218F10;
		/* 82218EF0h case    2:*/		return 0x82218EF4;
	}
	return 0x82218EF4;
} // Block from 82218EE8h-82218EF4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82218EF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218EF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218EF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218EF4);
		  /* 82218EF4h */ case    0:  		/* stw R24, <#[R1 + 180]> */
		/* 82218EF4h case    0:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x000000B4) );
		/* 82218EF4h case    0:*/		return 0x82218EF8;
		  /* 82218EF8h */ case    1:  		/* b 100 */
		/* 82218EF8h case    1:*/		return 0x82218F5C;
		/* 82218EF8h case    1:*/		return 0x82218EFC;
	}
	return 0x82218EFC;
} // Block from 82218EF4h-82218EFCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82218EFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218EFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218EFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218EFC);
		  /* 82218EFCh */ case    0:  		/* li R11, 0 */
		/* 82218EFCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82218EFCh case    0:*/		return 0x82218F00;
		  /* 82218F00h */ case    1:  		/* stw R11, <#[R1 + 180]> */
		/* 82218F00h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000B4) );
		/* 82218F00h case    1:*/		return 0x82218F04;
	}
	return 0x82218F04;
} // Block from 82218EFCh-82218F04h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82218F04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218F04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218F04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218F04);
		  /* 82218F04h */ case    0:  		/* lwz R11, <#[R1 + 180]> */
		/* 82218F04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000B4) );
		/* 82218F04h case    0:*/		return 0x82218F08;
		  /* 82218F08h */ case    1:  		/* cmplwi CR6, R11, 3 */
		/* 82218F08h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82218F08h case    1:*/		return 0x82218F0C;
		  /* 82218F0Ch */ case    2:  		/* bc 4, CR6_EQ, 80 */
		/* 82218F0Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82218F5C;  }
		/* 82218F0Ch case    2:*/		return 0x82218F10;
	}
	return 0x82218F10;
} // Block from 82218F04h-82218F10h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82218F10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218F10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218F10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218F10);
		  /* 82218F10h */ case    0:  		/* mr R3, R31 */
		/* 82218F10h case    0:*/		regs.R3 = regs.R31;
		/* 82218F10h case    0:*/		return 0x82218F14;
		  /* 82218F14h */ case    1:  		/* bl -40172 */
		/* 82218F14h case    1:*/		regs.LR = 0x82218F18; return 0x8220F228;
		/* 82218F14h case    1:*/		return 0x82218F18;
		  /* 82218F18h */ case    2:  		/* stw R3, <#[R1 + 188]> */
		/* 82218F18h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000BC) );
		/* 82218F18h case    2:*/		return 0x82218F1C;
		  /* 82218F1Ch */ case    3:  		/* mr R5, R26 */
		/* 82218F1Ch case    3:*/		regs.R5 = regs.R26;
		/* 82218F1Ch case    3:*/		return 0x82218F20;
		  /* 82218F20h */ case    4:  		/* lwz R6, <#[R1 + 404]> */
		/* 82218F20h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000194) );
		/* 82218F20h case    4:*/		return 0x82218F24;
		  /* 82218F24h */ case    5:  		/* addi R4, R1, 112 */
		/* 82218F24h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 82218F24h case    5:*/		return 0x82218F28;
		  /* 82218F28h */ case    6:  		/* mr R3, R31 */
		/* 82218F28h case    6:*/		regs.R3 = regs.R31;
		/* 82218F28h case    6:*/		return 0x82218F2C;
		  /* 82218F2Ch */ case    7:  		/* bl -16428 */
		/* 82218F2Ch case    7:*/		regs.LR = 0x82218F30; return 0x82214F00;
		/* 82218F2Ch case    7:*/		return 0x82218F30;
		  /* 82218F30h */ case    8:  		/* lwz R10, <#[R1 + 412]> */
		/* 82218F30h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000019C) );
		/* 82218F30h case    8:*/		return 0x82218F34;
		  /* 82218F34h */ case    9:  		/* lwz R11, <#[R25 + 12]> */
		/* 82218F34h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 82218F34h case    9:*/		return 0x82218F38;
		  /* 82218F38h */ case   10:  		/* li R14, 4 */
		/* 82218F38h case   10:*/		cpu::op::li<0>(regs,&regs.R14,0x4);
		/* 82218F38h case   10:*/		return 0x82218F3C;
		  /* 82218F3Ch */ case   11:  		/* lwz R3, <#[R1 + 184]> */
		/* 82218F3Ch case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000000B8) );
		/* 82218F3Ch case   11:*/		return 0x82218F40;
		  /* 82218F40h */ case   12:  		/* lwz R10, <#[R10]> */
		/* 82218F40h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 82218F40h case   12:*/		return 0x82218F44;
		  /* 82218F44h */ case   13:  		/* lwz R20, <#[R1 + 188]> */
		/* 82218F44h case   13:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x000000BC) );
		/* 82218F44h case   13:*/		return 0x82218F48;
		  /* 82218F48h */ case   14:  		/* add R27, R11, R10 */
		/* 82218F48h case   14:*/		cpu::op::add<0>(regs,&regs.R27,regs.R11,regs.R10);
		/* 82218F48h case   14:*/		return 0x82218F4C;
		  /* 82218F4Ch */ case   15:  		/* addi R29, R27, 4 */
		/* 82218F4Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R27,0x4);
		/* 82218F4Ch case   15:*/		return 0x82218F50;
		  /* 82218F50h */ case   16:  		/* stw R29, <#[R1 + 88]> */
		/* 82218F50h case   16:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000058) );
		/* 82218F50h case   16:*/		return 0x82218F54;
		  /* 82218F54h */ case   17:  		/* cmpwi CR6, R29, -1 */
		/* 82218F54h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R29,0xFFFFFFFF);
		/* 82218F54h case   17:*/		return 0x82218F58;
		  /* 82218F58h */ case   18:  		/* bc 4, CR6_EQ, 28 */
		/* 82218F58h case   18:*/		if ( !regs.CR[6].eq ) { return 0x82218F74;  }
		/* 82218F58h case   18:*/		return 0x82218F5C;
	}
	return 0x82218F5C;
} // Block from 82218F10h-82218F5Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 82218F5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218F5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218F5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218F5C);
		  /* 82218F5Ch */ case    0:  		/* lwz R10, <#[R1 + 412]> */
		/* 82218F5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000019C) );
		/* 82218F5Ch case    0:*/		return 0x82218F60;
		  /* 82218F60h */ case    1:  		/* lwz R11, <#[R25 + 12]> */
		/* 82218F60h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 82218F60h case    1:*/		return 0x82218F64;
		  /* 82218F64h */ case    2:  		/* lwz R10, <#[R10]> */
		/* 82218F64h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 82218F64h case    2:*/		return 0x82218F68;
		  /* 82218F68h */ case    3:  		/* add R27, R11, R10 */
		/* 82218F68h case    3:*/		cpu::op::add<0>(regs,&regs.R27,regs.R11,regs.R10);
		/* 82218F68h case    3:*/		return 0x82218F6C;
		  /* 82218F6Ch */ case    4:  		/* mr R29, R27 */
		/* 82218F6Ch case    4:*/		regs.R29 = regs.R27;
		/* 82218F6Ch case    4:*/		return 0x82218F70;
		  /* 82218F70h */ case    5:  		/* stw R27, <#[R1 + 88]> */
		/* 82218F70h case    5:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000058) );
		/* 82218F70h case    5:*/		return 0x82218F74;
	}
	return 0x82218F74;
} // Block from 82218F5Ch-82218F74h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82218F74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218F74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218F74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218F74);
		  /* 82218F74h */ case    0:  		/* cmplwi CR6, R3, 4140 */
		/* 82218F74h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000102C);
		/* 82218F74h case    0:*/		return 0x82218F78;
		  /* 82218F78h */ case    1:  		/* bc 12, CR6_GT, 528 */
		/* 82218F78h case    1:*/		if ( regs.CR[6].gt ) { return 0x82219188;  }
		/* 82218F78h case    1:*/		return 0x82218F7C;
		  /* 82218F7Ch */ case    2:  		/* cmplwi CR6, R3, 4139 */
		/* 82218F7Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000102B);
		/* 82218F7Ch case    2:*/		return 0x82218F80;
		  /* 82218F80h */ case    3:  		/* bc 4, CR6_LT, 68 */
		/* 82218F80h case    3:*/		if ( !regs.CR[6].lt ) { return 0x82218FC4;  }
		/* 82218F80h case    3:*/		return 0x82218F84;
		  /* 82218F84h */ case    4:  		/* cmplwi CR6, R3, 4128 */
		/* 82218F84h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00001020);
		/* 82218F84h case    4:*/		return 0x82218F88;
	}
	return 0x82218F88;
} // Block from 82218F74h-82218F88h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82218F88h
// Function '?XLT_Create@XGRAPHICS@@YAPAU_XLT_STATE_TRANSLATOR@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZPAU_SS_SHADER_STORE@1@PAU_TS_TEXTURE_SERVER@1@PAU_SSM_REGISTRY@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218F88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218F88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218F88);
		  /* 82218F88h */ case    0:  		/* bc 12, CR6_GT, 480 */
		/* 82218F88h case    0:*/		if ( regs.CR[6].gt ) { return 0x82219168;  }
		/* 82218F88h case    0:*/		return 0x82218F8C;
		  /* 82218F8Ch */ case    1:  		/* cmplwi CR6, R3, 4125 */
		/* 82218F8Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000101D);
		/* 82218F8Ch case    1:*/		return 0x82218F90;
		  /* 82218F90h */ case    2:  		/* bc 4, CR6_LT, 52 */
		/* 82218F90h case    2:*/		if ( !regs.CR[6].lt ) { return 0x82218FC4;  }
		/* 82218F90h case    2:*/		return 0x82218F94;
		  /* 82218F94h */ case    3:  		/* cmplwi CR6, R3, 4096 */
		/* 82218F94h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00001000);
		/* 82218F94h case    3:*/		return 0x82218F98;
		  /* 82218F98h */ case    4:  		/* bc 12, CR6_LT, 84 */
		/* 82218F98h case    4:*/		if ( regs.CR[6].lt ) { return 0x82218FEC;  }
		/* 82218F98h case    4:*/		return 0x82218F9C;
		  /* 82218F9Ch */ case    5:  		/* cmplwi CR6, R3, 4099 */
		/* 82218F9Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00001003);
		/* 82218F9Ch case    5:*/		return 0x82218FA0;
		  /* 82218FA0h */ case    6:  		/* bc 4, CR6_GT, 36 */
		/* 82218FA0h case    6:*/		if ( !regs.CR[6].gt ) { return 0x82218FC4;  }
		/* 82218FA0h case    6:*/		return 0x82218FA4;
		  /* 82218FA4h */ case    7:  		/* cmplwi CR6, R3, 4110 */
		/* 82218FA4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000100E);
		/* 82218FA4h case    7:*/		return 0x82218FA8;
		  /* 82218FA8h */ case    8:  		/* bc 4, CR6_GT, 68 */
		/* 82218FA8h case    8:*/		if ( !regs.CR[6].gt ) { return 0x82218FEC;  }
		/* 82218FA8h case    8:*/		return 0x82218FAC;
		  /* 82218FACh */ case    9:  		/* cmplwi CR6, R3, 4117 */
		/* 82218FACh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00001015);
		/* 82218FACh case    9:*/		return 0x82218FB0;
		  /* 82218FB0h */ case   10:  		/* bc 4, CR6_GT, 20 */
		/* 82218FB0h case   10:*/		if ( !regs.CR[6].gt ) { return 0x82218FC4;  }
		/* 82218FB0h case   10:*/		return 0x82218FB4;
		  /* 82218FB4h */ case   11:  		/* cmplwi CR6, R3, 4121 */
		/* 82218FB4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00001019);
		/* 82218FB4h case   11:*/		return 0x82218FB8;
		  /* 82218FB8h */ case   12:  		/* bc 12, CR6_EQ, 12 */
		/* 82218FB8h case   12:*/		if ( regs.CR[6].eq ) { return 0x82218FC4;  }
		/* 82218FB8h case   12:*/		return 0x82218FBC;
		  /* 82218FBCh */ case   13:  		/* cmplwi CR6, R3, 4123 */
		/* 82218FBCh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000101B);
		/* 82218FBCh case   13:*/		return 0x82218FC0;
		  /* 82218FC0h */ case   14:  		/* bc 4, CR6_EQ, 44 */
		/* 82218FC0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82218FEC;  }
		/* 82218FC0h case   14:*/		return 0x82218FC4;
	}
	return 0x82218FC4;
} // Block from 82218F88h-82218FC4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82218FC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218FC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218FC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218FC4);
		  /* 82218FC4h */ case    0:  		/* lis R11, -32252 */
		/* 82218FC4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82218FC4h case    0:*/		return 0x82218FC8;
		  /* 82218FC8h */ case    1:  		/* mr R6, R18 */
		/* 82218FC8h case    1:*/		regs.R6 = regs.R18;
		/* 82218FC8h case    1:*/		return 0x82218FCC;
		  /* 82218FCCh */ case    2:  		/* addi R5, R11, -25364 */
		/* 82218FCCh case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF9CEC);
		/* 82218FCCh case    2:*/		return 0x82218FD0;
		  /* 82218FD0h */ case    3:  		/* mr R4, R19 */
		/* 82218FD0h case    3:*/		regs.R4 = regs.R19;
		/* 82218FD0h case    3:*/		return 0x82218FD4;
		  /* 82218FD4h */ case    4:  		/* li R7, 9357 */
		/* 82218FD4h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x248D);
		/* 82218FD4h case    4:*/		return 0x82218FD8;
		  /* 82218FD8h */ case    5:  		/* li R3, 0 */
		/* 82218FD8h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82218FD8h case    5:*/		return 0x82218FDC;
		  /* 82218FDCh */ case    6:  		/* bl -791508 */
		/* 82218FDCh case    6:*/		regs.LR = 0x82218FE0; return 0x82157C08;
		/* 82218FDCh case    6:*/		return 0x82218FE0;
		  /* 82218FE0h */ case    7:  		/* lwz R11, <#[R1 + 96]> */
		/* 82218FE0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 82218FE0h case    7:*/		return 0x82218FE4;
		  /* 82218FE4h */ case    8:  		/* cmpwi CR6, R11, -1 */
		/* 82218FE4h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82218FE4h case    8:*/		return 0x82218FE8;
		  /* 82218FE8h */ case    9:  		/* bc 4, CR6_EQ, 8 */
		/* 82218FE8h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82218FF0;  }
		/* 82218FE8h case    9:*/		return 0x82218FEC;
	}
	return 0x82218FEC;
} // Block from 82218FC4h-82218FECh (10 instructions)

//////////////////////////////////////////////////////
// Block at 82218FECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218FEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218FEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218FEC);
		  /* 82218FECh */ case    0:  		/* stw R29, <#[R1 + 96]> */
		/* 82218FECh case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000060) );
		/* 82218FECh case    0:*/		return 0x82218FF0;
	}
	return 0x82218FF0;
} // Block from 82218FECh-82218FF0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82218FF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82218FF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82218FF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82218FF0);
		  /* 82218FF0h */ case    0:  		/* lhz R11, <#[R26 + 2]> */
		/* 82218FF0h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000002) );
		/* 82218FF0h case    0:*/		return 0x82218FF4;
		  /* 82218FF4h */ case    1:  		/* cmplwi CR6, R11, 94 */
		/* 82218FF4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005E);
		/* 82218FF4h case    1:*/		return 0x82218FF8;
		  /* 82218FF8h */ case    2:  		/* bc 4, CR6_EQ, 56 */
		/* 82218FF8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82219030;  }
		/* 82218FF8h case    2:*/		return 0x82218FFC;
		  /* 82218FFCh */ case    3:  		/* mr R10, R21 */
		/* 82218FFCh case    3:*/		regs.R10 = regs.R21;
		/* 82218FFCh case    3:*/		return 0x82219000;
		  /* 82219000h */ case    4:  		/* mr R9, R15 */
		/* 82219000h case    4:*/		regs.R9 = regs.R15;
		/* 82219000h case    4:*/		return 0x82219004;
		  /* 82219004h */ case    5:  		/* mr R8, R23 */
		/* 82219004h case    5:*/		regs.R8 = regs.R23;
		/* 82219004h case    5:*/		return 0x82219008;
		  /* 82219008h */ case    6:  		/* mr R7, R16 */
		/* 82219008h case    6:*/		regs.R7 = regs.R16;
		/* 82219008h case    6:*/		return 0x8221900C;
		  /* 8221900Ch */ case    7:  		/* mr R6, R28 */
		/* 8221900Ch case    7:*/		regs.R6 = regs.R28;
		/* 8221900Ch case    7:*/		return 0x82219010;
		  /* 82219010h */ case    8:  		/* li R5, 24 */
		/* 82219010h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x18);
		/* 82219010h case    8:*/		return 0x82219014;
		  /* 82219014h */ case    9:  		/* addi R4, R1, 112 */
		/* 82219014h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 82219014h case    9:*/		return 0x82219018;
		  /* 82219018h */ case   10:  		/* mr R3, R31 */
		/* 82219018h case   10:*/		regs.R3 = regs.R31;
		/* 82219018h case   10:*/		return 0x8221901C;
		  /* 8221901Ch */ case   11:  		/* bl -39228 */
		/* 8221901Ch case   11:*/		regs.LR = 0x82219020; return 0x8220F6E0;
		/* 8221901Ch case   11:*/		return 0x82219020;
		  /* 82219020h */ case   12:  		/* li R11, 0 */
		/* 82219020h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82219020h case   12:*/		return 0x82219024;
		  /* 82219024h */ case   13:  		/* stw R24, <#[R1 + 200]> */
		/* 82219024h case   13:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x000000C8) );
		/* 82219024h case   13:*/		return 0x82219028;
		  /* 82219028h */ case   14:  		/* stw R11, <#[R1 + 196]> */
		/* 82219028h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000C4) );
		/* 82219028h case   14:*/		return 0x8221902C;
		  /* 8221902Ch */ case   15:  		/* stw R24, <#[R1 + 92]> */
		/* 8221902Ch case   15:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x0000005C) );
		/* 8221902Ch case   15:*/		return 0x82219030;
	}
	return 0x82219030;
} // Block from 82218FF0h-82219030h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82219030h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219030);
		  /* 82219030h */ case    0:  		/* mr R10, R21 */
		/* 82219030h case    0:*/		regs.R10 = regs.R21;
		/* 82219030h case    0:*/		return 0x82219034;
		  /* 82219034h */ case    1:  		/* mr R9, R15 */
		/* 82219034h case    1:*/		regs.R9 = regs.R15;
		/* 82219034h case    1:*/		return 0x82219038;
		  /* 82219038h */ case    2:  		/* mr R8, R22 */
		/* 82219038h case    2:*/		regs.R8 = regs.R22;
		/* 82219038h case    2:*/		return 0x8221903C;
		  /* 8221903Ch */ case    3:  		/* mr R7, R20 */
		/* 8221903Ch case    3:*/		regs.R7 = regs.R20;
		/* 8221903Ch case    3:*/		return 0x82219040;
		  /* 82219040h */ case    4:  		/* mr R6, R28 */
		/* 82219040h case    4:*/		regs.R6 = regs.R28;
		/* 82219040h case    4:*/		return 0x82219044;
		  /* 82219044h */ case    5:  		/* li R5, 1 */
		/* 82219044h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82219044h case    5:*/		return 0x82219048;
		  /* 82219048h */ case    6:  		/* addi R4, R1, 112 */
		/* 82219048h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 82219048h case    6:*/		return 0x8221904C;
		  /* 8221904Ch */ case    7:  		/* mr R3, R31 */
		/* 8221904Ch case    7:*/		regs.R3 = regs.R31;
		/* 8221904Ch case    7:*/		return 0x82219050;
		  /* 82219050h */ case    8:  		/* bl -39280 */
		/* 82219050h case    8:*/		regs.LR = 0x82219054; return 0x8220F6E0;
		/* 82219050h case    8:*/		return 0x82219054;
		  /* 82219054h */ case    9:  		/* addi R29, R25, 13152 */
		/* 82219054h case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R25,0x3360);
		/* 82219054h case    9:*/		return 0x82219058;
		  /* 82219058h */ case   10:  		/* addi R7, R1, 88 */
		/* 82219058h case   10:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x58);
		/* 82219058h case   10:*/		return 0x8221905C;
		  /* 8221905Ch */ case   11:  		/* li R6, 2 */
		/* 8221905Ch case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 8221905Ch case   11:*/		return 0x82219060;
		  /* 82219060h */ case   12:  		/* mr R5, R27 */
		/* 82219060h case   12:*/		regs.R5 = regs.R27;
		/* 82219060h case   12:*/		return 0x82219064;
		  /* 82219064h */ case   13:  		/* mr R4, R29 */
		/* 82219064h case   13:*/		regs.R4 = regs.R29;
		/* 82219064h case   13:*/		return 0x82219068;
		  /* 82219068h */ case   14:  		/* mr R3, R31 */
		/* 82219068h case   14:*/		regs.R3 = regs.R31;
		/* 82219068h case   14:*/		return 0x8221906C;
		  /* 8221906Ch */ case   15:  		/* bl -40204 */
		/* 8221906Ch case   15:*/		regs.LR = 0x82219070; return 0x8220F360;
		/* 8221906Ch case   15:*/		return 0x82219070;
		  /* 82219070h */ case   16:  		/* lwz R11, <#[R1 + 152]> */
		/* 82219070h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000098) );
		/* 82219070h case   16:*/		return 0x82219074;
		  /* 82219074h */ case   17:  		/* li R10, 1 */
		/* 82219074h case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82219074h case   17:*/		return 0x82219078;
		  /* 82219078h */ case   18:  		/* lwz R30, <#[R1 + 96]> */
		/* 82219078h case   18:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000060) );
		/* 82219078h case   18:*/		return 0x8221907C;
		  /* 8221907Ch */ case   19:  		/* stw R17, <#[R1 + 88]> */
		/* 8221907Ch case   19:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000058) );
		/* 8221907Ch case   19:*/		return 0x82219080;
		  /* 82219080h */ case   20:  		/* cmpwi CR6, R11, 4 */
		/* 82219080h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 82219080h case   20:*/		return 0x82219084;
		  /* 82219084h */ case   21:  		/* stw R17, <#[R1 + 96]> */
		/* 82219084h case   21:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x00000060) );
		/* 82219084h case   21:*/		return 0x82219088;
		  /* 82219088h */ case   22:  		/* stw R10, <#[R1 + 92]> */
		/* 82219088h case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 82219088h case   22:*/		return 0x8221908C;
		  /* 8221908Ch */ case   23:  		/* bc 12, CR6_LT, 12 */
		/* 8221908Ch case   23:*/		if ( regs.CR[6].lt ) { return 0x82219098;  }
		/* 8221908Ch case   23:*/		return 0x82219090;
		  /* 82219090h */ case   24:  		/* cmpwi CR6, R11, 7 */
		/* 82219090h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000007);
		/* 82219090h case   24:*/		return 0x82219094;
		  /* 82219094h */ case   25:  		/* bc 4, CR6_GT, 8 */
		/* 82219094h case   25:*/		if ( !regs.CR[6].gt ) { return 0x8221909C;  }
		/* 82219094h case   25:*/		return 0x82219098;
	}
	return 0x82219098;
} // Block from 82219030h-82219098h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82219098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219098);
		  /* 82219098h */ case    0:  		/* lwz R10, <#[R1 + 80]> */
		/* 82219098h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82219098h case    0:*/		return 0x8221909C;
	}
	return 0x8221909C;
} // Block from 82219098h-8221909Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221909Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221909C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221909C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221909C);
		  /* 8221909Ch */ case    0:  		/* lwz R11, <#[R1 + 156]> */
		/* 8221909Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000009C) );
		/* 8221909Ch case    0:*/		return 0x822190A0;
		  /* 822190A0h */ case    1:  		/* cmpwi CR6, R11, 4 */
		/* 822190A0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 822190A0h case    1:*/		return 0x822190A4;
		  /* 822190A4h */ case    2:  		/* bc 12, CR6_LT, 16 */
		/* 822190A4h case    2:*/		if ( regs.CR[6].lt ) { return 0x822190B4;  }
		/* 822190A4h case    2:*/		return 0x822190A8;
		  /* 822190A8h */ case    3:  		/* cmpwi CR6, R11, 7 */
		/* 822190A8h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000007);
		/* 822190A8h case    3:*/		return 0x822190AC;
		  /* 822190ACh */ case    4:  		/* bc 12, CR6_GT, 8 */
		/* 822190ACh case    4:*/		if ( regs.CR[6].gt ) { return 0x822190B4;  }
		/* 822190ACh case    4:*/		return 0x822190B0;
		  /* 822190B0h */ case    5:  		/* li R10, 1 */
		/* 822190B0h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 822190B0h case    5:*/		return 0x822190B4;
	}
	return 0x822190B4;
} // Block from 8221909Ch-822190B4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822190B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822190B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822190B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822190B4);
		  /* 822190B4h */ case    0:  		/* lwz R11, <#[R1 + 160]> */
		/* 822190B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 822190B4h case    0:*/		return 0x822190B8;
		  /* 822190B8h */ case    1:  		/* cmpwi CR6, R11, 4 */
		/* 822190B8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 822190B8h case    1:*/		return 0x822190BC;
		  /* 822190BCh */ case    2:  		/* bc 12, CR6_LT, 16 */
		/* 822190BCh case    2:*/		if ( regs.CR[6].lt ) { return 0x822190CC;  }
		/* 822190BCh case    2:*/		return 0x822190C0;
		  /* 822190C0h */ case    3:  		/* cmpwi CR6, R11, 7 */
		/* 822190C0h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000007);
		/* 822190C0h case    3:*/		return 0x822190C4;
		  /* 822190C4h */ case    4:  		/* bc 12, CR6_GT, 8 */
		/* 822190C4h case    4:*/		if ( regs.CR[6].gt ) { return 0x822190CC;  }
		/* 822190C4h case    4:*/		return 0x822190C8;
	}
	return 0x822190C8;
} // Block from 822190B4h-822190C8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 822190C8h
// Function '?DoColorClamp@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822190C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822190C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822190C8);
		  /* 822190C8h */ case    0:  		/* li R10, 1 */
		/* 822190C8h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 822190C8h case    0:*/		return 0x822190CC;
	}
	return 0x822190CC;
} // Block from 822190C8h-822190CCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 822190CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822190CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822190CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822190CC);
		  /* 822190CCh */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 822190CCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 822190CCh case    0:*/		return 0x822190D0;
		  /* 822190D0h */ case    1:  		/* bc 12, CR6_EQ, 112 */
		/* 822190D0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82219140;  }
		/* 822190D0h case    1:*/		return 0x822190D4;
		  /* 822190D4h */ case    2:  		/* mr R3, R31 */
		/* 822190D4h case    2:*/		regs.R3 = regs.R31;
		/* 822190D4h case    2:*/		return 0x822190D8;
		  /* 822190D8h */ case    3:  		/* bl -40624 */
		/* 822190D8h case    3:*/		regs.LR = 0x822190DC; return 0x8220F228;
		/* 822190D8h case    3:*/		return 0x822190DC;
		  /* 822190DCh */ case    4:  		/* stw R3, <#[R1 + 192]> */
		/* 822190DCh case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000C0) );
		/* 822190DCh case    4:*/		return 0x822190E0;
		  /* 822190E0h */ case    5:  		/* mr R5, R26 */
		/* 822190E0h case    5:*/		regs.R5 = regs.R26;
		/* 822190E0h case    5:*/		return 0x822190E4;
		  /* 822190E4h */ case    6:  		/* lwz R6, <#[R1 + 404]> */
		/* 822190E4h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000194) );
		/* 822190E4h case    6:*/		return 0x822190E8;
		  /* 822190E8h */ case    7:  		/* addi R4, R1, 112 */
		/* 822190E8h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 822190E8h case    7:*/		return 0x822190EC;
		  /* 822190ECh */ case    8:  		/* mr R3, R31 */
		/* 822190ECh case    8:*/		regs.R3 = regs.R31;
		/* 822190ECh case    8:*/		return 0x822190F0;
		  /* 822190F0h */ case    9:  		/* bl -15448 */
		/* 822190F0h case    9:*/		regs.LR = 0x822190F4; return 0x82215498;
		/* 822190F0h case    9:*/		return 0x822190F4;
		  /* 822190F4h */ case   10:  		/* addi R11, R30, 1 */
		/* 822190F4h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x1);
		/* 822190F4h case   10:*/		return 0x822190F8;
		  /* 822190F8h */ case   11:  		/* li R10, 0 */
		/* 822190F8h case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 822190F8h case   11:*/		return 0x822190FC;
		  /* 822190FCh */ case   12:  		/* lwz R9, <#[R1 + 192]> */
		/* 822190FCh case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000000C0) );
		/* 822190FCh case   12:*/		return 0x82219100;
		  /* 82219100h */ case   13:  		/* mr R8, R22 */
		/* 82219100h case   13:*/		regs.R8 = regs.R22;
		/* 82219100h case   13:*/		return 0x82219104;
		  /* 82219104h */ case   14:  		/* stw R30, <#[R1 + 88]> */
		/* 82219104h case   14:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000058) );
		/* 82219104h case   14:*/		return 0x82219108;
		  /* 82219108h */ case   15:  		/* mr R7, R20 */
		/* 82219108h case   15:*/		regs.R7 = regs.R20;
		/* 82219108h case   15:*/		return 0x8221910C;
		  /* 8221910Ch */ case   16:  		/* stw R11, <#[R1 + 96]> */
		/* 8221910Ch case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 8221910Ch case   16:*/		return 0x82219110;
		  /* 82219110h */ case   17:  		/* mr R6, R28 */
		/* 82219110h case   17:*/		regs.R6 = regs.R28;
		/* 82219110h case   17:*/		return 0x82219114;
		  /* 82219114h */ case   18:  		/* li R5, 16 */
		/* 82219114h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x10);
		/* 82219114h case   18:*/		return 0x82219118;
		  /* 82219118h */ case   19:  		/* addi R4, R1, 112 */
		/* 82219118h case   19:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 82219118h case   19:*/		return 0x8221911C;
		  /* 8221911Ch */ case   20:  		/* mr R3, R31 */
		/* 8221911Ch case   20:*/		regs.R3 = regs.R31;
		/* 8221911Ch case   20:*/		return 0x82219120;
		  /* 82219120h */ case   21:  		/* addi R14, R14, 1 */
		/* 82219120h case   21:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R14,0x1);
		/* 82219120h case   21:*/		return 0x82219124;
		  /* 82219124h */ case   22:  		/* bl -39492 */
		/* 82219124h case   22:*/		regs.LR = 0x82219128; return 0x8220F6E0;
		/* 82219124h case   22:*/		return 0x82219128;
		  /* 82219128h */ case   23:  		/* addi R7, R1, 88 */
		/* 82219128h case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x58);
		/* 82219128h case   23:*/		return 0x8221912C;
		  /* 8221912Ch */ case   24:  		/* li R6, 2 */
		/* 8221912Ch case   24:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 8221912Ch case   24:*/		return 0x82219130;
		  /* 82219130h */ case   25:  		/* mr R5, R30 */
		/* 82219130h case   25:*/		regs.R5 = regs.R30;
		/* 82219130h case   25:*/		return 0x82219134;
		  /* 82219134h */ case   26:  		/* mr R4, R29 */
		/* 82219134h case   26:*/		regs.R4 = regs.R29;
		/* 82219134h case   26:*/		return 0x82219138;
		  /* 82219138h */ case   27:  		/* mr R3, R31 */
		/* 82219138h case   27:*/		regs.R3 = regs.R31;
		/* 82219138h case   27:*/		return 0x8221913C;
		  /* 8221913Ch */ case   28:  		/* bl -40412 */
		/* 8221913Ch case   28:*/		regs.LR = 0x82219140; return 0x8220F360;
		/* 8221913Ch case   28:*/		return 0x82219140;
	}
	return 0x82219140;
} // Block from 822190CCh-82219140h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82219140h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219140);
		  /* 82219140h */ case    0:  		/* lwz R11, <#[R31 + 1636]> */
		/* 82219140h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000664) );
		/* 82219140h case    0:*/		return 0x82219144;
		  /* 82219144h */ case    1:  		/* lwz R10, <#[R1 + 412]> */
		/* 82219144h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000019C) );
		/* 82219144h case    1:*/		return 0x82219148;
		  /* 82219148h */ case    2:  		/* addi R11, R11, 1 */
		/* 82219148h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82219148h case    2:*/		return 0x8221914C;
		  /* 8221914Ch */ case    3:  		/* lwz R3, <#[R1 + 404]> */
		/* 8221914Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000194) );
		/* 8221914Ch case    3:*/		return 0x82219150;
		  /* 82219150h */ case    4:  		/* stw R11, <#[R31 + 1636]> */
		/* 82219150h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000664) );
		/* 82219150h case    4:*/		return 0x82219154;
		  /* 82219154h */ case    5:  		/* lwz R11, <#[R10]> */
		/* 82219154h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82219154h case    5:*/		return 0x82219158;
		  /* 82219158h */ case    6:  		/* add R11, R11, R14 */
		/* 82219158h case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R14);
		/* 82219158h case    6:*/		return 0x8221915C;
		  /* 8221915Ch */ case    7:  		/* stw R11, <#[R10]> */
		/* 8221915Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8221915Ch case    7:*/		return 0x82219160;
		  /* 82219160h */ case    8:  		/* addi R1, R1, 368 */
		/* 82219160h case    8:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x170);
		/* 82219160h case    8:*/		return 0x82219164;
		  /* 82219164h */ case    9:  		/* b -1605364 */
		/* 82219164h case    9:*/		return 0x82091270;
		/* 82219164h case    9:*/		return 0x82219168;
	}
	return 0x82219168;
} // Block from 82219140h-82219168h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82219168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219168);
		  /* 82219168h */ case    0:  		/* cmplwi CR6, R3, 4130 */
		/* 82219168h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00001022);
		/* 82219168h case    0:*/		return 0x8221916C;
		  /* 8221916Ch */ case    1:  		/* bc 12, CR6_EQ, -424 */
		/* 8221916Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82218FC4;  }
		/* 8221916Ch case    1:*/		return 0x82219170;
		  /* 82219170h */ case    2:  		/* cmplwi CR6, R3, 4131 */
		/* 82219170h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00001023);
		/* 82219170h case    2:*/		return 0x82219174;
		  /* 82219174h */ case    3:  		/* bc 4, CR6_GT, -392 */
		/* 82219174h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82218FEC;  }
		/* 82219174h case    3:*/		return 0x82219178;
		  /* 82219178h */ case    4:  		/* cmplwi CR6, R3, 4133 */
		/* 82219178h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00001025);
		/* 82219178h case    4:*/		return 0x8221917C;
		  /* 8221917Ch */ case    5:  		/* bc 4, CR6_GT, -440 */
		/* 8221917Ch case    5:*/		if ( !regs.CR[6].gt ) { return 0x82218FC4;  }
		/* 8221917Ch case    5:*/		return 0x82219180;
		  /* 82219180h */ case    6:  		/* cmplwi CR6, R3, 4137 */
		/* 82219180h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00001029);
		/* 82219180h case    6:*/		return 0x82219184;
		  /* 82219184h */ case    7:  		/* b -452 */
		/* 82219184h case    7:*/		return 0x82218FC0;
		/* 82219184h case    7:*/		return 0x82219188;
	}
	return 0x82219188;
} // Block from 82219168h-82219188h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82219188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219188);
		  /* 82219188h */ case    0:  		/* cmplwi CR6, R3, 4174 */
		/* 82219188h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000104E);
		/* 82219188h case    0:*/		return 0x8221918C;
		  /* 8221918Ch */ case    1:  		/* bc 12, CR6_GT, 108 */
		/* 8221918Ch case    1:*/		if ( regs.CR[6].gt ) { return 0x822191F8;  }
		/* 8221918Ch case    1:*/		return 0x82219190;
		  /* 82219190h */ case    2:  		/* cmplwi CR6, R3, 4173 */
		/* 82219190h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000104D);
		/* 82219190h case    2:*/		return 0x82219194;
		  /* 82219194h */ case    3:  		/* bc 4, CR6_LT, 68 */
		/* 82219194h case    3:*/		if ( !regs.CR[6].lt ) { return 0x822191D8;  }
		/* 82219194h case    3:*/		return 0x82219198;
		  /* 82219198h */ case    4:  		/* cmplwi CR6, R3, 4142 */
		/* 82219198h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000102E);
		/* 82219198h case    4:*/		return 0x8221919C;
		  /* 8221919Ch */ case    5:  		/* bc 12, CR6_EQ, -472 */
		/* 8221919Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x82218FC4;  }
		/* 8221919Ch case    5:*/		return 0x822191A0;
		  /* 822191A0h */ case    6:  		/* cmplwi CR6, R3, 4144 */
		/* 822191A0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00001030);
		/* 822191A0h case    6:*/		return 0x822191A4;
		  /* 822191A4h */ case    7:  		/* bc 12, CR6_EQ, -480 */
		/* 822191A4h case    7:*/		if ( regs.CR[6].eq ) { return 0x82218FC4;  }
		/* 822191A4h case    7:*/		return 0x822191A8;
		  /* 822191A8h */ case    8:  		/* cmplwi CR6, R3, 4151 */
		/* 822191A8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00001037);
		/* 822191A8h case    8:*/		return 0x822191AC;
		  /* 822191ACh */ case    9:  		/* bc 12, CR6_EQ, -488 */
		/* 822191ACh case    9:*/		if ( regs.CR[6].eq ) { return 0x82218FC4;  }
		/* 822191ACh case    9:*/		return 0x822191B0;
		  /* 822191B0h */ case   10:  		/* cmplwi CR6, R3, 4155 */
		/* 822191B0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000103B);
		/* 822191B0h case   10:*/		return 0x822191B4;
		  /* 822191B4h */ case   11:  		/* bc 4, CR6_EQ, -456 */
		/* 822191B4h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82218FEC;  }
		/* 822191B4h case   11:*/		return 0x822191B8;
		  /* 822191B8h */ case   12:  		/* lis R11, -32252 */
		/* 822191B8h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822191B8h case   12:*/		return 0x822191BC;
		  /* 822191BCh */ case   13:  		/* mr R6, R18 */
		/* 822191BCh case   13:*/		regs.R6 = regs.R18;
		/* 822191BCh case   13:*/		return 0x822191C0;
		  /* 822191C0h */ case   14:  		/* addi R5, R11, -25364 */
		/* 822191C0h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF9CEC);
		/* 822191C0h case   14:*/		return 0x822191C4;
		  /* 822191C4h */ case   15:  		/* mr R4, R19 */
		/* 822191C4h case   15:*/		regs.R4 = regs.R19;
		/* 822191C4h case   15:*/		return 0x822191C8;
		  /* 822191C8h */ case   16:  		/* li R7, 9302 */
		/* 822191C8h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x2456);
		/* 822191C8h case   16:*/		return 0x822191CC;
		  /* 822191CCh */ case   17:  		/* li R3, 0 */
		/* 822191CCh case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822191CCh case   17:*/		return 0x822191D0;
		  /* 822191D0h */ case   18:  		/* bl -792008 */
		/* 822191D0h case   18:*/		regs.LR = 0x822191D4; return 0x82157C08;
		/* 822191D0h case   18:*/		return 0x822191D4;
		  /* 822191D4h */ case   19:  		/* b -488 */
		/* 822191D4h case   19:*/		return 0x82218FEC;
		/* 822191D4h case   19:*/		return 0x822191D8;
	}
	return 0x822191D8;
} // Block from 82219188h-822191D8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 822191D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822191D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822191D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822191D8);
		  /* 822191D8h */ case    0:  		/* mr R4, R26 */
		/* 822191D8h case    0:*/		regs.R4 = regs.R26;
		/* 822191D8h case    0:*/		return 0x822191DC;
		  /* 822191DCh */ case    1:  		/* lwz R5, <#[R1 + 404]> */
		/* 822191DCh case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000194) );
		/* 822191DCh case    1:*/		return 0x822191E0;
		  /* 822191E0h */ case    2:  		/* mr R3, R31 */
		/* 822191E0h case    2:*/		regs.R3 = regs.R31;
		/* 822191E0h case    2:*/		return 0x822191E4;
		  /* 822191E4h */ case    3:  		/* bl -16356 */
		/* 822191E4h case    3:*/		regs.LR = 0x822191E8; return 0x82215200;
		/* 822191E4h case    3:*/		return 0x822191E8;
		  /* 822191E8h */ case    4:  		/* addi R11, R29, 3 */
		/* 822191E8h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x3);
		/* 822191E8h case    4:*/		return 0x822191EC;
		  /* 822191ECh */ case    5:  		/* addi R14, R14, 3 */
		/* 822191ECh case    5:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R14,0x3);
		/* 822191ECh case    5:*/		return 0x822191F0;
		  /* 822191F0h */ case    6:  		/* stw R11, <#[R1 + 96]> */
		/* 822191F0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 822191F0h case    6:*/		return 0x822191F4;
		  /* 822191F4h */ case    7:  		/* b -532 */
		/* 822191F4h case    7:*/		return 0x82218FE0;
		/* 822191F4h case    7:*/		return 0x822191F8;
	}
	return 0x822191F8;
} // Block from 822191D8h-822191F8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 822191F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822191F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822191F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822191F8);
		  /* 822191F8h */ case    0:  		/* cmplwi CR6, R3, 4175 */
		/* 822191F8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000104F);
		/* 822191F8h case    0:*/		return 0x822191FC;
		  /* 822191FCh */ case    1:  		/* bc 12, CR6_LT, -528 */
		/* 822191FCh case    1:*/		if ( regs.CR[6].lt ) { return 0x82218FEC;  }
		/* 822191FCh case    1:*/		return 0x82219200;
		  /* 82219200h */ case    2:  		/* cmplwi CR6, R3, 4185 */
		/* 82219200h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00001059);
		/* 82219200h case    2:*/		return 0x82219204;
		  /* 82219204h */ case    3:  		/* bc 4, CR6_GT, -576 */
		/* 82219204h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82218FC4;  }
		/* 82219204h case    3:*/		return 0x82219208;
		  /* 82219208h */ case    4:  		/* cmplwi CR6, R3, 4187 */
		/* 82219208h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000105B);
		/* 82219208h case    4:*/		return 0x8221920C;
		  /* 8221920Ch */ case    5:  		/* bc 4, CR6_GT, -84 */
		/* 8221920Ch case    5:*/		if ( !regs.CR[6].gt ) { return 0x822191B8;  }
		/* 8221920Ch case    5:*/		return 0x82219210;
		  /* 82219210h */ case    6:  		/* cmplwi CR6, R3, 4196 */
		/* 82219210h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00001064);
		/* 82219210h case    6:*/		return 0x82219214;
		  /* 82219214h */ case    7:  		/* bc 4, CR6_GT, -592 */
		/* 82219214h case    7:*/		if ( !regs.CR[6].gt ) { return 0x82218FC4;  }
		/* 82219214h case    7:*/		return 0x82219218;
		  /* 82219218h */ case    8:  		/* b -556 */
		/* 82219218h case    8:*/		return 0x82218FEC;
		/* 82219218h case    8:*/		return 0x8221921C;
		  /* 8221921Ch */ case    9:  		/* nop */
		/* 8221921Ch case    9:*/		cpu::op::nop();
		/* 8221921Ch case    9:*/		return 0x82219220;
	}
	return 0x82219220;
} // Block from 822191F8h-82219220h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82219220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219220);
		  /* 82219220h */ case    0:  		/* mfspr R12, LR */
		/* 82219220h case    0:*/		regs.R12 = regs.LR;
		/* 82219220h case    0:*/		return 0x82219224;
		  /* 82219224h */ case    1:  		/* bl -1605600 */
		/* 82219224h case    1:*/		regs.LR = 0x82219228; return 0x82091244;
		/* 82219224h case    1:*/		return 0x82219228;
		  /* 82219228h */ case    2:  		/* stfd FR29, <#[R1 - 104]> */
		/* 82219228h case    2:*/		cpu::mem::store64f( regs, regs.FR29, (uint32)(regs.R1 + 0xFFFFFF98) );
		/* 82219228h case    2:*/		return 0x8221922C;
		  /* 8221922Ch */ case    3:  		/* stfd FR30, <#[R1 - 96]> */
		/* 8221922Ch case    3:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFFA0) );
		/* 8221922Ch case    3:*/		return 0x82219230;
		  /* 82219230h */ case    4:  		/* stfd FR31, <#[R1 - 88]> */
		/* 82219230h case    4:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFA8) );
		/* 82219230h case    4:*/		return 0x82219234;
		  /* 82219234h */ case    5:  		/* stwu R1, <#[R1 - 192]> */
		/* 82219234h case    5:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82219234h case    5:*/		return 0x82219238;
		  /* 82219238h */ case    6:  		/* lwz R25, <#[R3 + 28]> */
		/* 82219238h case    6:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R3 + 0x0000001C) );
		/* 82219238h case    6:*/		return 0x8221923C;
		  /* 8221923Ch */ case    7:  		/* mr R31, R3 */
		/* 8221923Ch case    7:*/		regs.R31 = regs.R3;
		/* 8221923Ch case    7:*/		return 0x82219240;
		  /* 82219240h */ case    8:  		/* mr R30, R4 */
		/* 82219240h case    8:*/		regs.R30 = regs.R4;
		/* 82219240h case    8:*/		return 0x82219244;
		  /* 82219244h */ case    9:  		/* bl -40988 */
		/* 82219244h case    9:*/		regs.LR = 0x82219248; return 0x8220F228;
		/* 82219244h case    9:*/		return 0x82219248;
		  /* 82219248h */ case   10:  		/* mr R24, R3 */
		/* 82219248h case   10:*/		regs.R24 = regs.R3;
		/* 82219248h case   10:*/		return 0x8221924C;
		  /* 8221924Ch */ case   11:  		/* mr R3, R31 */
		/* 8221924Ch case   11:*/		regs.R3 = regs.R31;
		/* 8221924Ch case   11:*/		return 0x82219250;
		  /* 82219250h */ case   12:  		/* bl -41000 */
		/* 82219250h case   12:*/		regs.LR = 0x82219254; return 0x8220F228;
		/* 82219250h case   12:*/		return 0x82219254;
		  /* 82219254h */ case   13:  		/* lwz R11, <#[R31 + 20]> */
		/* 82219254h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82219254h case   13:*/		return 0x82219258;
		  /* 82219258h */ case   14:  		/* mr R23, R3 */
		/* 82219258h case   14:*/		regs.R23 = regs.R3;
		/* 82219258h case   14:*/		return 0x8221925C;
		  /* 8221925Ch */ case   15:  		/* li R4, 1000 */
		/* 8221925Ch case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x3E8);
		/* 8221925Ch case   15:*/		return 0x82219260;
		  /* 82219260h */ case   16:  		/* mr R3, R11 */
		/* 82219260h case   16:*/		regs.R3 = regs.R11;
		/* 82219260h case   16:*/		return 0x82219264;
		  /* 82219264h */ case   17:  		/* bl -43372 */
		/* 82219264h case   17:*/		regs.LR = 0x82219268; return 0x8220E8F8;
		/* 82219264h case   17:*/		return 0x82219268;
		  /* 82219268h */ case   18:  		/* li R4, 1001 */
		/* 82219268h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x3E9);
		/* 82219268h case   18:*/		return 0x8221926C;
		  /* 8221926Ch */ case   19:  		/* lwz R3, <#[R31 + 20]> */
		/* 8221926Ch case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8221926Ch case   19:*/		return 0x82219270;
		  /* 82219270h */ case   20:  		/* fmr FR29, FR1 */
		/* 82219270h case   20:*/		cpu::op::fmr<0>(regs,&regs.FR29,regs.FR1);
		/* 82219270h case   20:*/		return 0x82219274;
		  /* 82219274h */ case   21:  		/* bl -43388 */
		/* 82219274h case   21:*/		regs.LR = 0x82219278; return 0x8220E8F8;
		/* 82219274h case   21:*/		return 0x82219278;
		  /* 82219278h */ case   22:  		/* li R4, 1002 */
		/* 82219278h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x3EA);
		/* 82219278h case   22:*/		return 0x8221927C;
		  /* 8221927Ch */ case   23:  		/* lwz R3, <#[R31 + 20]> */
		/* 8221927Ch case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8221927Ch case   23:*/		return 0x82219280;
		  /* 82219280h */ case   24:  		/* fmr FR31, FR1 */
		/* 82219280h case   24:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 82219280h case   24:*/		return 0x82219284;
		  /* 82219284h */ case   25:  		/* bl -43404 */
		/* 82219284h case   25:*/		regs.LR = 0x82219288; return 0x8220E8F8;
		/* 82219284h case   25:*/		return 0x82219288;
		  /* 82219288h */ case   26:  		/* lwz R10, <#[R31 + 28]> */
		/* 82219288h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 82219288h case   26:*/		return 0x8221928C;
		  /* 8221928Ch */ case   27:  		/* li R6, 0 */
		/* 8221928Ch case   27:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8221928Ch case   27:*/		return 0x82219290;
		  /* 82219290h */ case   28:  		/* fmr FR30, FR1 */
		/* 82219290h case   28:*/		cpu::op::fmr<0>(regs,&regs.FR30,regs.FR1);
		/* 82219290h case   28:*/		return 0x82219294;
		  /* 82219294h */ case   29:  		/* fmr FR1, FR29 */
		/* 82219294h case   29:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 82219294h case   29:*/		return 0x82219298;
		  /* 82219298h */ case   30:  		/* lwz R11, <#[R10 + 23208]> */
		/* 82219298h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00005AA8) );
		/* 82219298h case   30:*/		return 0x8221929C;
		  /* 8221929Ch */ case   31:  		/* addi R9, R11, 1 */
		/* 8221929Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8221929Ch case   31:*/		return 0x822192A0;
		  /* 822192A0h */ case   32:  		/* subfic R29, R11, 30 */
		/* 822192A0h case   32:*/		cpu::op::subfic<0>(regs,&regs.R29,regs.R11,0x1E);
		/* 822192A0h case   32:*/		return 0x822192A4;
		  /* 822192A4h */ case   33:  		/* stw R9, <#[R10 + 23208]> */
		/* 822192A4h case   33:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00005AA8) );
		/* 822192A4h case   33:*/		return 0x822192A8;
		  /* 822192A8h */ case   34:  		/* mr R5, R29 */
		/* 822192A8h case   34:*/		regs.R5 = regs.R29;
		/* 822192A8h case   34:*/		return 0x822192AC;
		  /* 822192ACh */ case   35:  		/* lwz R11, <#[R31 + 28]> */
		/* 822192ACh case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 822192ACh case   35:*/		return 0x822192B0;
		  /* 822192B0h */ case   36:  		/* lwz R4, <#[R11]> */
		/* 822192B0h case   36:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 822192B0h case   36:*/		return 0x822192B4;
		  /* 822192B4h */ case   37:  		/* lwz R3, <#[R31 + 16]> */
		/* 822192B4h case   37:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 822192B4h case   37:*/		return 0x822192B8;
		  /* 822192B8h */ case   38:  		/* bl 28112 */
		/* 822192B8h case   38:*/		regs.LR = 0x822192BC; return 0x82220088;
		/* 822192B8h case   38:*/		return 0x822192BC;
		  /* 822192BCh */ case   39:  		/* lis R11, -32253 */
		/* 822192BCh case   39:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 822192BCh case   39:*/		return 0x822192C0;
		  /* 822192C0h */ case   40:  		/* lis R10, -32252 */
		/* 822192C0h case   40:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822192C0h case   40:*/		return 0x822192C4;
		  /* 822192C4h */ case   41:  		/* lis R9, -32252 */
		/* 822192C4h case   41:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 822192C4h case   41:*/		return 0x822192C8;
		  /* 822192C8h */ case   42:  		/* cmpwi CR0, R3, 0 */
		/* 822192C8h case   42:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 822192C8h case   42:*/		return 0x822192CC;
		  /* 822192CCh */ case   43:  		/* addi R28, R11, 27460 */
		/* 822192CCh case   43:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 822192CCh case   43:*/		return 0x822192D0;
		  /* 822192D0h */ case   44:  		/* addi R27, R10, -5996 */
		/* 822192D0h case   44:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFFE894);
		/* 822192D0h case   44:*/		return 0x822192D4;
		  /* 822192D4h */ case   45:  		/* addi R26, R9, -7312 */
		/* 822192D4h case   45:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R9,0xFFFFE370);
		/* 822192D4h case   45:*/		return 0x822192D8;
		  /* 822192D8h */ case   46:  		/* bc 12, CR0_EQ, 28 */
		/* 822192D8h case   46:*/		if ( regs.CR[0].eq ) { return 0x822192F4;  }
		/* 822192D8h case   46:*/		return 0x822192DC;
		  /* 822192DCh */ case   47:  		/* mr R6, R26 */
		/* 822192DCh case   47:*/		regs.R6 = regs.R26;
		/* 822192DCh case   47:*/		return 0x822192E0;
		  /* 822192E0h */ case   48:  		/* mr R5, R27 */
		/* 822192E0h case   48:*/		regs.R5 = regs.R27;
		/* 822192E0h case   48:*/		return 0x822192E4;
		  /* 822192E4h */ case   49:  		/* mr R4, R28 */
		/* 822192E4h case   49:*/		regs.R4 = regs.R28;
		/* 822192E4h case   49:*/		return 0x822192E8;
		  /* 822192E8h */ case   50:  		/* li R7, 11211 */
		/* 822192E8h case   50:*/		cpu::op::li<0>(regs,&regs.R7,0x2BCB);
		/* 822192E8h case   50:*/		return 0x822192EC;
		  /* 822192ECh */ case   51:  		/* li R3, 0 */
		/* 822192ECh case   51:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822192ECh case   51:*/		return 0x822192F0;
		  /* 822192F0h */ case   52:  		/* bl -792296 */
		/* 822192F0h case   52:*/		regs.LR = 0x822192F4; return 0x82157C08;
		/* 822192F0h case   52:*/		return 0x822192F4;
	}
	return 0x822192F4;
} // Block from 82219220h-822192F4h (53 instructions)

//////////////////////////////////////////////////////
// Block at 822192F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822192F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822192F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822192F4);
		  /* 822192F4h */ case    0:  		/* lwz R11, <#[R31 + 28]> */
		/* 822192F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 822192F4h case    0:*/		return 0x822192F8;
		  /* 822192F8h */ case    1:  		/* li R6, 1 */
		/* 822192F8h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 822192F8h case    1:*/		return 0x822192FC;
		  /* 822192FCh */ case    2:  		/* mr R5, R29 */
		/* 822192FCh case    2:*/		regs.R5 = regs.R29;
		/* 822192FCh case    2:*/		return 0x82219300;
		  /* 82219300h */ case    3:  		/* lwz R3, <#[R31 + 16]> */
		/* 82219300h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82219300h case    3:*/		return 0x82219304;
		  /* 82219304h */ case    4:  		/* fmr FR1, FR31 */
		/* 82219304h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82219304h case    4:*/		return 0x82219308;
		  /* 82219308h */ case    5:  		/* lwz R4, <#[R11]> */
		/* 82219308h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82219308h case    5:*/		return 0x8221930C;
		  /* 8221930Ch */ case    6:  		/* bl 28028 */
		/* 8221930Ch case    6:*/		regs.LR = 0x82219310; return 0x82220088;
		/* 8221930Ch case    6:*/		return 0x82219310;
		  /* 82219310h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 82219310h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82219310h case    7:*/		return 0x82219314;
		  /* 82219314h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 82219314h case    8:*/		if ( regs.CR[0].eq ) { return 0x82219330;  }
		/* 82219314h case    8:*/		return 0x82219318;
		  /* 82219318h */ case    9:  		/* mr R6, R26 */
		/* 82219318h case    9:*/		regs.R6 = regs.R26;
		/* 82219318h case    9:*/		return 0x8221931C;
		  /* 8221931Ch */ case   10:  		/* mr R5, R27 */
		/* 8221931Ch case   10:*/		regs.R5 = regs.R27;
		/* 8221931Ch case   10:*/		return 0x82219320;
		  /* 82219320h */ case   11:  		/* mr R4, R28 */
		/* 82219320h case   11:*/		regs.R4 = regs.R28;
		/* 82219320h case   11:*/		return 0x82219324;
		  /* 82219324h */ case   12:  		/* li R7, 11217 */
		/* 82219324h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x2BD1);
		/* 82219324h case   12:*/		return 0x82219328;
		  /* 82219328h */ case   13:  		/* li R3, 0 */
		/* 82219328h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82219328h case   13:*/		return 0x8221932C;
		  /* 8221932Ch */ case   14:  		/* bl -792356 */
		/* 8221932Ch case   14:*/		regs.LR = 0x82219330; return 0x82157C08;
		/* 8221932Ch case   14:*/		return 0x82219330;
	}
	return 0x82219330;
} // Block from 822192F4h-82219330h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82219330h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219330( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219330) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219330);
		  /* 82219330h */ case    0:  		/* lwz R11, <#[R31 + 28]> */
		/* 82219330h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 82219330h case    0:*/		return 0x82219334;
		  /* 82219334h */ case    1:  		/* li R6, 2 */
		/* 82219334h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 82219334h case    1:*/		return 0x82219338;
		  /* 82219338h */ case    2:  		/* mr R5, R29 */
		/* 82219338h case    2:*/		regs.R5 = regs.R29;
		/* 82219338h case    2:*/		return 0x8221933C;
		  /* 8221933Ch */ case    3:  		/* lwz R3, <#[R31 + 16]> */
		/* 8221933Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8221933Ch case    3:*/		return 0x82219340;
		  /* 82219340h */ case    4:  		/* fmr FR1, FR30 */
		/* 82219340h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 82219340h case    4:*/		return 0x82219344;
		  /* 82219344h */ case    5:  		/* lwz R4, <#[R11]> */
		/* 82219344h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82219344h case    5:*/		return 0x82219348;
		  /* 82219348h */ case    6:  		/* bl 27968 */
		/* 82219348h case    6:*/		regs.LR = 0x8221934C; return 0x82220088;
		/* 82219348h case    6:*/		return 0x8221934C;
		  /* 8221934Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 8221934Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8221934Ch case    7:*/		return 0x82219350;
		  /* 82219350h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 82219350h case    8:*/		if ( regs.CR[0].eq ) { return 0x8221936C;  }
		/* 82219350h case    8:*/		return 0x82219354;
		  /* 82219354h */ case    9:  		/* mr R6, R26 */
		/* 82219354h case    9:*/		regs.R6 = regs.R26;
		/* 82219354h case    9:*/		return 0x82219358;
		  /* 82219358h */ case   10:  		/* mr R5, R27 */
		/* 82219358h case   10:*/		regs.R5 = regs.R27;
		/* 82219358h case   10:*/		return 0x8221935C;
		  /* 8221935Ch */ case   11:  		/* mr R4, R28 */
		/* 8221935Ch case   11:*/		regs.R4 = regs.R28;
		/* 8221935Ch case   11:*/		return 0x82219360;
		  /* 82219360h */ case   12:  		/* li R7, 11223 */
		/* 82219360h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x2BD7);
		/* 82219360h case   12:*/		return 0x82219364;
		  /* 82219364h */ case   13:  		/* li R3, 0 */
		/* 82219364h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82219364h case   13:*/		return 0x82219368;
		  /* 82219368h */ case   14:  		/* bl -792416 */
		/* 82219368h case   14:*/		regs.LR = 0x8221936C; return 0x82157C08;
		/* 82219368h case   14:*/		return 0x8221936C;
	}
	return 0x8221936C;
} // Block from 82219330h-8221936Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8221936Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221936C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221936C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221936C);
		  /* 8221936Ch */ case    0:  		/* lwz R10, <#[R31 + 28]> */
		/* 8221936Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221936Ch case    0:*/		return 0x82219370;
		  /* 82219370h */ case    1:  		/* lis R11, -32256 */
		/* 82219370h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82219370h case    1:*/		return 0x82219374;
		  /* 82219374h */ case    2:  		/* li R6, 3 */
		/* 82219374h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82219374h case    2:*/		return 0x82219378;
		  /* 82219378h */ case    3:  		/* lwz R3, <#[R31 + 16]> */
		/* 82219378h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82219378h case    3:*/		return 0x8221937C;
		  /* 8221937Ch */ case    4:  		/* mr R5, R29 */
		/* 8221937Ch case    4:*/		regs.R5 = regs.R29;
		/* 8221937Ch case    4:*/		return 0x82219380;
		  /* 82219380h */ case    5:  		/* lfs FR1, <#[R11 + 1816]> */
		/* 82219380h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000718) );
		/* 82219380h case    5:*/		return 0x82219384;
		  /* 82219384h */ case    6:  		/* lwz R4, <#[R10]> */
		/* 82219384h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000000) );
		/* 82219384h case    6:*/		return 0x82219388;
		  /* 82219388h */ case    7:  		/* bl 27904 */
		/* 82219388h case    7:*/		regs.LR = 0x8221938C; return 0x82220088;
		/* 82219388h case    7:*/		return 0x8221938C;
		  /* 8221938Ch */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 8221938Ch case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8221938Ch case    8:*/		return 0x82219390;
		  /* 82219390h */ case    9:  		/* bc 12, CR0_EQ, 28 */
		/* 82219390h case    9:*/		if ( regs.CR[0].eq ) { return 0x822193AC;  }
		/* 82219390h case    9:*/		return 0x82219394;
		  /* 82219394h */ case   10:  		/* mr R6, R26 */
		/* 82219394h case   10:*/		regs.R6 = regs.R26;
		/* 82219394h case   10:*/		return 0x82219398;
		  /* 82219398h */ case   11:  		/* mr R5, R27 */
		/* 82219398h case   11:*/		regs.R5 = regs.R27;
		/* 82219398h case   11:*/		return 0x8221939C;
		  /* 8221939Ch */ case   12:  		/* mr R4, R28 */
		/* 8221939Ch case   12:*/		regs.R4 = regs.R28;
		/* 8221939Ch case   12:*/		return 0x822193A0;
		  /* 822193A0h */ case   13:  		/* li R7, 11229 */
		/* 822193A0h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x2BDD);
		/* 822193A0h case   13:*/		return 0x822193A4;
		  /* 822193A4h */ case   14:  		/* li R3, 0 */
		/* 822193A4h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822193A4h case   14:*/		return 0x822193A8;
		  /* 822193A8h */ case   15:  		/* bl -792480 */
		/* 822193A8h case   15:*/		regs.LR = 0x822193AC; return 0x82157C08;
		/* 822193A8h case   15:*/		return 0x822193AC;
	}
	return 0x822193AC;
} // Block from 8221936Ch-822193ACh (16 instructions)

//////////////////////////////////////////////////////
// Block at 822193ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822193AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822193AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822193AC);
		  /* 822193ACh */ case    0:  		/* li R6, 23 */
		/* 822193ACh case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x17);
		/* 822193ACh case    0:*/		return 0x822193B0;
		  /* 822193B0h */ case    1:  		/* li R5, 0 */
		/* 822193B0h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 822193B0h case    1:*/		return 0x822193B4;
		  /* 822193B4h */ case    2:  		/* addi R4, R25, 16768 */
		/* 822193B4h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R25,0x4180);
		/* 822193B4h case    2:*/		return 0x822193B8;
		  /* 822193B8h */ case    3:  		/* mr R3, R31 */
		/* 822193B8h case    3:*/		regs.R3 = regs.R31;
		/* 822193B8h case    3:*/		return 0x822193BC;
		  /* 822193BCh */ case    4:  		/* bl -41228 */
		/* 822193BCh case    4:*/		regs.LR = 0x822193C0; return 0x8220F2B0;
		/* 822193BCh case    4:*/		return 0x822193C0;
		  /* 822193C0h */ case    5:  		/* li R11, 3 */
		/* 822193C0h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 822193C0h case    5:*/		return 0x822193C4;
		  /* 822193C4h */ case    6:  		/* rlwinm R7, R23, 0, 16, 31 */
		/* 822193C4h case    6:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R7,regs.R23);
		/* 822193C4h case    6:*/		return 0x822193C8;
		  /* 822193C8h */ case    7:  		/* sth R11, <#[R30 + 2]> */
		/* 822193C8h case    7:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0x00000002) );
		/* 822193C8h case    7:*/		return 0x822193CC;
		  /* 822193CCh */ case    8:  		/* li R10, 1 */
		/* 822193CCh case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 822193CCh case    8:*/		return 0x822193D0;
		  /* 822193D0h */ case    9:  		/* lwz R11, <#[R30]> */
		/* 822193D0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 822193D0h case    9:*/		return 0x822193D4;
		  /* 822193D4h */ case   10:  		/* rlwinm R11, R11, 0, 16, 2 */
		/* 822193D4h case   10:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R11,regs.R11);
		/* 822193D4h case   10:*/		return 0x822193D8;
		  /* 822193D8h */ case   11:  		/* stw R11, <#[R30]> */
		/* 822193D8h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 822193D8h case   11:*/		return 0x822193DC;
		  /* 822193DCh */ case   12:  		/* addi R11, R30, 4 */
		/* 822193DCh case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 822193DCh case   12:*/		return 0x822193E0;
		  /* 822193E0h */ case   13:  		/* sth R7, <#[R30 + 6]> */
		/* 822193E0h case   13:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R30 + 0x00000006) );
		/* 822193E0h case   13:*/		return 0x822193E4;
		  /* 822193E4h */ case   14:  		/* li R9, 0 */
		/* 822193E4h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 822193E4h case   14:*/		return 0x822193E8;
		  /* 822193E8h */ case   15:  		/* addi R11, R11, 4 */
		/* 822193E8h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822193E8h case   15:*/		return 0x822193EC;
		  /* 822193ECh */ case   16:  		/* lwz R8, <#[R30 + 4]> */
		/* 822193ECh case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 822193ECh case   16:*/		return 0x822193F0;
		  /* 822193F0h */ case   17:  		/* rlwimi R8, R10, 18, 8, 15 */
		/* 822193F0h case   17:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R8,regs.R10);
		/* 822193F0h case   17:*/		return 0x822193F4;
		  /* 822193F4h */ case   18:  		/* stw R8, <#[R30 + 4]> */
		/* 822193F4h case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 822193F4h case   18:*/		return 0x822193F8;
		  /* 822193F8h */ case   19:  		/* li R6, 65 */
		/* 822193F8h case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x41);
		/* 822193F8h case   19:*/		return 0x822193FC;
		  /* 822193FCh */ case   20:  		/* sth R9, <#[R11 + 2]> */
		/* 822193FCh case   20:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 822193FCh case   20:*/		return 0x82219400;
		  /* 82219400h */ case   21:  		/* li R12, -26215 */
		/* 82219400h case   21:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF9999);
		/* 82219400h case   21:*/		return 0x82219404;
		  /* 82219404h */ case   22:  		/* lwz R26, <#[R11]> */
		/* 82219404h case   22:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + 0x00000000) );
		/* 82219404h case   22:*/		return 0x82219408;
		  /* 82219408h */ case   23:  		/* rlwimi R26, R6, 16, 8, 15 */
		/* 82219408h case   23:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R26,regs.R6);
		/* 82219408h case   23:*/		return 0x8221940C;
		  /* 8221940Ch */ case   24:  		/* stw R26, <#[R11]> */
		/* 8221940Ch case   24:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + 0x00000000) );
		/* 8221940Ch case   24:*/		return 0x82219410;
		  /* 82219410h */ case   25:  		/* li R8, 5 */
		/* 82219410h case   25:*/		cpu::op::li<0>(regs,&regs.R8,0x5);
		/* 82219410h case   25:*/		return 0x82219414;
		  /* 82219414h */ case   26:  		/* stb R10, <#[R11]> */
		/* 82219414h case   26:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82219414h case   26:*/		return 0x82219418;
		  /* 82219418h */ case   27:  		/* li R5, 4369 */
		/* 82219418h case   27:*/		cpu::op::li<0>(regs,&regs.R5,0x1111);
		/* 82219418h case   27:*/		return 0x8221941C;
		  /* 8221941Ch */ case   28:  		/* lwzu R6, <#[R11 + 4]> */
		/* 8221941Ch case   28:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8221941Ch case   28:*/		return 0x82219420;
		  /* 82219420h */ case   29:  		/* and R6, R6, R12 */
		/* 82219420h case   29:*/		cpu::op::and<0>(regs,&regs.R6,regs.R6,regs.R12);
		/* 82219420h case   29:*/		return 0x82219424;
		  /* 82219424h */ case   30:  		/* ori R6, R6, 4369 */
		/* 82219424h case   30:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R6,0x1111);
		/* 82219424h case   30:*/		return 0x82219428;
		  /* 82219428h */ case   31:  		/* li R4, 73 */
		/* 82219428h case   31:*/		cpu::op::li<0>(regs,&regs.R4,0x49);
		/* 82219428h case   31:*/		return 0x8221942C;
		  /* 8221942Ch */ case   32:  		/* stw R6, <#[R11]> */
		/* 8221942Ch case   32:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221942Ch case   32:*/		return 0x82219430;
		  /* 82219430h */ case   33:  		/* addi R11, R11, 4 */
		/* 82219430h case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82219430h case   33:*/		return 0x82219434;
		  /* 82219434h */ case   34:  		/* rlwinm R31, R24, 0, 16, 31 */
		/* 82219434h case   34:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R31,regs.R24);
		/* 82219434h case   34:*/		return 0x82219438;
		  /* 82219438h */ case   35:  		/* mr R30, R29 */
		/* 82219438h case   35:*/		regs.R30 = regs.R29;
		/* 82219438h case   35:*/		return 0x8221943C;
		  /* 8221943Ch */ case   36:  		/* li R29, 64 */
		/* 8221943Ch case   36:*/		cpu::op::li<0>(regs,&regs.R29,0x40);
		/* 8221943Ch case   36:*/		return 0x82219440;
		  /* 82219440h */ case   37:  		/* rlwinm R3, R3, 0, 16, 31 */
		/* 82219440h case   37:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R3,regs.R3);
		/* 82219440h case   37:*/		return 0x82219444;
		  /* 82219444h */ case   38:  		/* sth R9, <#[R11 + 2]> */
		/* 82219444h case   38:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82219444h case   38:*/		return 0x82219448;
		  /* 82219448h */ case   39:  		/* li R28, 17 */
		/* 82219448h case   39:*/		cpu::op::li<0>(regs,&regs.R28,0x11);
		/* 82219448h case   39:*/		return 0x8221944C;
		  /* 8221944Ch */ case   40:  		/* lwz R6, <#[R11]> */
		/* 8221944Ch case   40:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221944Ch case   40:*/		return 0x82219450;
		  /* 82219450h */ case   41:  		/* rlwimi R6, R8, 20, 8, 15 */
		/* 82219450h case   41:*/		cpu::op::rlwimi<0,20,8,15>(regs,&regs.R6,regs.R8);
		/* 82219450h case   41:*/		return 0x82219454;
		  /* 82219454h */ case   42:  		/* stw R6, <#[R11]> */
		/* 82219454h case   42:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82219454h case   42:*/		return 0x82219458;
		  /* 82219458h */ case   43:  		/* li R27, 21 */
		/* 82219458h case   43:*/		cpu::op::li<0>(regs,&regs.R27,0x15);
		/* 82219458h case   43:*/		return 0x8221945C;
		  /* 8221945Ch */ case   44:  		/* lwzu R6, <#[R11 + 4]> */
		/* 8221945Ch case   44:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8221945Ch case   44:*/		return 0x82219460;
		  /* 82219460h */ case   45:  		/* rlwimi R6, R5, 3, 16, 31 */
		/* 82219460h case   45:*/		cpu::op::rlwimi<0,3,16,31>(regs,&regs.R6,regs.R5);
		/* 82219460h case   45:*/		return 0x82219464;
		  /* 82219464h */ case   46:  		/* stw R6, <#[R11]> */
		/* 82219464h case   46:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82219464h case   46:*/		return 0x82219468;
		  /* 82219468h */ case   47:  		/* addi R11, R11, 4 */
		/* 82219468h case   47:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82219468h case   47:*/		return 0x8221946C;
		  /* 8221946Ch */ case   48:  		/* sth R4, <#[R11 + 2]> */
		/* 8221946Ch case   48:*/		cpu::mem::store16( regs, regs.R4, (uint32)(regs.R11 + 0x00000002) );
		/* 8221946Ch case   48:*/		return 0x82219470;
		  /* 82219470h */ case   49:  		/* lwz R6, <#[R11]> */
		/* 82219470h case   49:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82219470h case   49:*/		return 0x82219474;
		  /* 82219474h */ case   50:  		/* rlwinm R6, R6, 0, 16, 2 */
		/* 82219474h case   50:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R6,regs.R6);
		/* 82219474h case   50:*/		return 0x82219478;
		  /* 82219478h */ case   51:  		/* stw R6, <#[R11]> */
		/* 82219478h case   51:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82219478h case   51:*/		return 0x8221947C;
		  /* 8221947Ch */ case   52:  		/* addi R11, R11, 4 */
		/* 8221947Ch case   52:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221947Ch case   52:*/		return 0x82219480;
		  /* 82219480h */ case   53:  		/* sth R31, <#[R11 + 2]> */
		/* 82219480h case   53:*/		cpu::mem::store16( regs, regs.R31, (uint32)(regs.R11 + 0x00000002) );
		/* 82219480h case   53:*/		return 0x82219484;
		  /* 82219484h */ case   54:  		/* lwz R6, <#[R11]> */
		/* 82219484h case   54:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82219484h case   54:*/		return 0x82219488;
		  /* 82219488h */ case   55:  		/* rlwimi R6, R10, 18, 8, 15 */
		/* 82219488h case   55:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R6,regs.R10);
		/* 82219488h case   55:*/		return 0x8221948C;
		  /* 8221948Ch */ case   56:  		/* stw R6, <#[R11]> */
		/* 8221948Ch case   56:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221948Ch case   56:*/		return 0x82219490;
		  /* 82219490h */ case   57:  		/* addi R11, R11, 4 */
		/* 82219490h case   57:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82219490h case   57:*/		return 0x82219494;
		  /* 82219494h */ case   58:  		/* sth R7, <#[R11 + 2]> */
		/* 82219494h case   58:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 82219494h case   58:*/		return 0x82219498;
		  /* 82219498h */ case   59:  		/* lwz R7, <#[R11]> */
		/* 82219498h case   59:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82219498h case   59:*/		return 0x8221949C;
		  /* 8221949Ch */ case   60:  		/* rlwimi R7, R10, 18, 8, 15 */
		/* 8221949Ch case   60:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R7,regs.R10);
		/* 8221949Ch case   60:*/		return 0x822194A0;
		  /* 822194A0h */ case   61:  		/* stw R7, <#[R11]> */
		/* 822194A0h case   61:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822194A0h case   61:*/		return 0x822194A4;
		  /* 822194A4h */ case   62:  		/* addi R11, R11, 4 */
		/* 822194A4h case   62:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822194A4h case   62:*/		return 0x822194A8;
		  /* 822194A8h */ case   63:  		/* sth R30, <#[R11 + 2]> */
		/* 822194A8h case   63:*/		cpu::mem::store16( regs, regs.R30, (uint32)(regs.R11 + 0x00000002) );
		/* 822194A8h case   63:*/		return 0x822194AC;
		  /* 822194ACh */ case   64:  		/* lwz R7, <#[R11]> */
		/* 822194ACh case   64:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822194ACh case   64:*/		return 0x822194B0;
		  /* 822194B0h */ case   65:  		/* rlwimi R7, R10, 16, 8, 15 */
		/* 822194B0h case   65:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R7,regs.R10);
		/* 822194B0h case   65:*/		return 0x822194B4;
		  /* 822194B4h */ case   66:  		/* stw R7, <#[R11]> */
		/* 822194B4h case   66:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822194B4h case   66:*/		return 0x822194B8;
	}
	return 0x822194B8;
} // Block from 822193ACh-822194B8h (67 instructions)

//////////////////////////////////////////////////////
// Block at 822194B8h
// Function '?DoTexLd@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAU_XLT_IL_INSTRUCTION@1@PAT21@PAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822194B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822194B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822194B8);
		  /* 822194B8h */ case    0:  		/* stb R10, <#[R11]> */
		/* 822194B8h case    0:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822194B8h case    0:*/		return 0x822194BC;
		  /* 822194BCh */ case    1:  		/* addi R11, R11, 4 */
		/* 822194BCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822194BCh case    1:*/		return 0x822194C0;
		  /* 822194C0h */ case    2:  		/* sth R29, <#[R11 + 2]> */
		/* 822194C0h case    2:*/		cpu::mem::store16( regs, regs.R29, (uint32)(regs.R11 + 0x00000002) );
		/* 822194C0h case    2:*/		return 0x822194C4;
		  /* 822194C4h */ case    3:  		/* lwz R7, <#[R11]> */
		/* 822194C4h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822194C4h case    3:*/		return 0x822194C8;
		  /* 822194C8h */ case    4:  		/* rlwinm R7, R7, 0, 16, 2 */
		/* 822194C8h case    4:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R7,regs.R7);
		/* 822194C8h case    4:*/		return 0x822194CC;
		  /* 822194CCh */ case    5:  		/* stw R7, <#[R11]> */
		/* 822194CCh case    5:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822194CCh case    5:*/		return 0x822194D0;
		  /* 822194D0h */ case    6:  		/* addi R11, R11, 4 */
		/* 822194D0h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822194D0h case    6:*/		return 0x822194D4;
		  /* 822194D4h */ case    7:  		/* sth R3, <#[R11 + 2]> */
		/* 822194D4h case    7:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R11 + 0x00000002) );
		/* 822194D4h case    7:*/		return 0x822194D8;
		  /* 822194D8h */ case    8:  		/* lwz R7, <#[R11]> */
		/* 822194D8h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822194D8h case    8:*/		return 0x822194DC;
		  /* 822194DCh */ case    9:  		/* rlwimi R7, R28, 18, 8, 15 */
		/* 822194DCh case    9:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R7,regs.R28);
		/* 822194DCh case    9:*/		return 0x822194E0;
		  /* 822194E0h */ case   10:  		/* stw R7, <#[R11]> */
		/* 822194E0h case   10:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 822194E0h case   10:*/		return 0x822194E4;
		  /* 822194E4h */ case   11:  		/* stwu R27, <#[R11 + 4]> */
		/* 822194E4h case   11:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822194E4h case   11:*/		return 0x822194E8;
		  /* 822194E8h */ case   12:  		/* addi R11, R11, 4 */
		/* 822194E8h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822194E8h case   12:*/		return 0x822194EC;
		  /* 822194ECh */ case   13:  		/* sth R9, <#[R11 + 2]> */
		/* 822194ECh case   13:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 822194ECh case   13:*/		return 0x822194F0;
		  /* 822194F0h */ case   14:  		/* lwz R9, <#[R11]> */
		/* 822194F0h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822194F0h case   14:*/		return 0x822194F4;
		  /* 822194F4h */ case   15:  		/* li R12, -30584 */
		/* 822194F4h case   15:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF8888);
		/* 822194F4h case   15:*/		return 0x822194F8;
		  /* 822194F8h */ case   16:  		/* rlwimi R9, R8, 20, 8, 15 */
		/* 822194F8h case   16:*/		cpu::op::rlwimi<0,20,8,15>(regs,&regs.R9,regs.R8);
		/* 822194F8h case   16:*/		return 0x822194FC;
		  /* 822194FCh */ case   17:  		/* stw R9, <#[R11]> */
		/* 822194FCh case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 822194FCh case   17:*/		return 0x82219500;
		  /* 82219500h */ case   18:  		/* lwzu R9, <#[R11 + 4]> */
		/* 82219500h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82219500h case   18:*/		return 0x82219504;
		  /* 82219504h */ case   19:  		/* and R9, R9, R12 */
		/* 82219504h case   19:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R12);
		/* 82219504h case   19:*/		return 0x82219508;
		  /* 82219508h */ case   20:  		/* stw R9, <#[R11]> */
		/* 82219508h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82219508h case   20:*/		return 0x8221950C;
		  /* 8221950Ch */ case   21:  		/* addi R11, R11, 4 */
		/* 8221950Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221950Ch case   21:*/		return 0x82219510;
		  /* 82219510h */ case   22:  		/* sth R3, <#[R11 + 2]> */
		/* 82219510h case   22:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R11 + 0x00000002) );
		/* 82219510h case   22:*/		return 0x82219514;
		  /* 82219514h */ case   23:  		/* lwz R9, <#[R11]> */
		/* 82219514h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82219514h case   23:*/		return 0x82219518;
		  /* 82219518h */ case   24:  		/* rlwimi R9, R10, 18, 8, 15 */
		/* 82219518h case   24:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R10);
		/* 82219518h case   24:*/		return 0x8221951C;
		  /* 8221951Ch */ case   25:  		/* stw R9, <#[R11]> */
		/* 8221951Ch case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221951Ch case   25:*/		return 0x82219520;
		  /* 82219520h */ case   26:  		/* addi R11, R11, 4 */
		/* 82219520h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82219520h case   26:*/		return 0x82219524;
		  /* 82219524h */ case   27:  		/* addi R3, R11, 4 */
		/* 82219524h case   27:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 82219524h case   27:*/		return 0x82219528;
		  /* 82219528h */ case   28:  		/* sth R31, <#[R11 + 2]> */
		/* 82219528h case   28:*/		cpu::mem::store16( regs, regs.R31, (uint32)(regs.R11 + 0x00000002) );
		/* 82219528h case   28:*/		return 0x8221952C;
		  /* 8221952Ch */ case   29:  		/* lwz R9, <#[R11]> */
		/* 8221952Ch case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221952Ch case   29:*/		return 0x82219530;
		  /* 82219530h */ case   30:  		/* rlwimi R9, R10, 18, 8, 15 */
		/* 82219530h case   30:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R10);
		/* 82219530h case   30:*/		return 0x82219534;
		  /* 82219534h */ case   31:  		/* stw R9, <#[R11]> */
		/* 82219534h case   31:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82219534h case   31:*/		return 0x82219538;
		  /* 82219538h */ case   32:  		/* addi R1, R1, 192 */
		/* 82219538h case   32:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82219538h case   32:*/		return 0x8221953C;
		  /* 8221953Ch */ case   33:  		/* lfd FR29, <#[R1 - 104]> */
		/* 8221953Ch case   33:*/		cpu::mem::load64f( regs, &regs.FR29, (uint32)(regs.R1 + 0xFFFFFF98) );
		/* 8221953Ch case   33:*/		return 0x82219540;
		  /* 82219540h */ case   34:  		/* lfd FR30, <#[R1 - 96]> */
		/* 82219540h case   34:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFFA0) );
		/* 82219540h case   34:*/		return 0x82219544;
		  /* 82219544h */ case   35:  		/* lfd FR31, <#[R1 - 88]> */
		/* 82219544h case   35:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFA8) );
		/* 82219544h case   35:*/		return 0x82219548;
		  /* 82219548h */ case   36:  		/* b -1606324 */
		/* 82219548h case   36:*/		return 0x82091294;
		/* 82219548h case   36:*/		return 0x8221954C;
		  /* 8221954Ch */ case   37:  		/* nop */
		/* 8221954Ch case   37:*/		cpu::op::nop();
		/* 8221954Ch case   37:*/		return 0x82219550;
	}
	return 0x82219550;
} // Block from 822194B8h-82219550h (38 instructions)

//////////////////////////////////////////////////////
// Block at 82219550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219550);
		  /* 82219550h */ case    0:  		/* mfspr R12, LR */
		/* 82219550h case    0:*/		regs.R12 = regs.LR;
		/* 82219550h case    0:*/		return 0x82219554;
		  /* 82219554h */ case    1:  		/* bl -1606452 */
		/* 82219554h case    1:*/		regs.LR = 0x82219558; return 0x82091220;
		/* 82219554h case    1:*/		return 0x82219558;
		  /* 82219558h */ case    2:  		/* stwu R1, <#[R1 - 384]> */
		/* 82219558h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE80);
		/* 82219558h case    2:*/		return 0x8221955C;
		  /* 8221955Ch */ case    3:  		/* lwz R24, <#[R3 + 28]> */
		/* 8221955Ch case    3:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R3 + 0x0000001C) );
		/* 8221955Ch case    3:*/		return 0x82219560;
		  /* 82219560h */ case    4:  		/* li R11, 2080 */
		/* 82219560h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x820);
		/* 82219560h case    4:*/		return 0x82219564;
		  /* 82219564h */ case    5:  		/* li R23, 0 */
		/* 82219564h case    5:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 82219564h case    5:*/		return 0x82219568;
		  /* 82219568h */ case    6:  		/* stw R6, <#[R1 + 428]> */
		/* 82219568h case    6:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x000001AC) );
		/* 82219568h case    6:*/		return 0x8221956C;
		  /* 8221956Ch */ case    7:  		/* mr R18, R3 */
		/* 8221956Ch case    7:*/		regs.R18 = regs.R3;
		/* 8221956Ch case    7:*/		return 0x82219570;
		  /* 82219570h */ case    8:  		/* mr R31, R5 */
		/* 82219570h case    8:*/		regs.R31 = regs.R5;
		/* 82219570h case    8:*/		return 0x82219574;
		  /* 82219574h */ case    9:  		/* stw R23, <#[R1 + 148]> */
		/* 82219574h case    9:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R1 + 0x00000094) );
		/* 82219574h case    9:*/		return 0x82219578;
		  /* 82219578h */ case   10:  		/* mr R27, R7 */
		/* 82219578h case   10:*/		regs.R27 = regs.R7;
		/* 82219578h case   10:*/		return 0x8221957C;
		  /* 8221957Ch */ case   11:  		/* stw R23, <#[R1 + 80]> */
		/* 8221957Ch case   11:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R1 + 0x00000050) );
		/* 8221957Ch case   11:*/		return 0x82219580;
		  /* 82219580h */ case   12:  		/* addi R10, R5, -1 */
		/* 82219580h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R5,0xFFFFFFFF);
		/* 82219580h case   12:*/		return 0x82219584;
		  /* 82219584h */ case   13:  		/* stw R24, <#[R1 + 84]> */
		/* 82219584h case   13:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000054) );
		/* 82219584h case   13:*/		return 0x82219588;
		  /* 82219588h */ case   14:  		/* mr R9, R23 */
		/* 82219588h case   14:*/		regs.R9 = regs.R23;
		/* 82219588h case   14:*/		return 0x8221958C;
		  /* 8221958Ch */ case   15:  		/* mtspr CTR, R11 */
		/* 8221958Ch case   15:*/		regs.CTR = regs.R11;
		/* 8221958Ch case   15:*/		return 0x82219590;
		  /* 82219590h */ case   16:  		/* stbu R9, <#[R10 + 1]> */
		/* 82219590h case   16:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R10 + 0x00000001) );
		regs.R10 = (uint32)(regs.R10 + 0x00000001);
		/* 82219590h case   16:*/		return 0x82219594;
		  /* 82219594h */ case   17:  		/* bc 16, CR0_LT, -4 */
		/* 82219594h case   17:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82219590;  }
		/* 82219594h case   17:*/		return 0x82219598;
		  /* 82219598h */ case   18:  		/* lwz R10, <#[R4]> */
		/* 82219598h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82219598h case   18:*/		return 0x8221959C;
		  /* 8221959Ch */ case   19:  		/* rlwinm R11, R10, 0, 16, 31 */
		/* 8221959Ch case   19:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R10);
		/* 8221959Ch case   19:*/		return 0x822195A0;
		  /* 822195A0h */ case   20:  		/* mr R26, R10 */
		/* 822195A0h case   20:*/		regs.R26 = regs.R10;
		/* 822195A0h case   20:*/		return 0x822195A4;
		  /* 822195A4h */ case   21:  		/* cmplwi CR6, R11, 62 */
		/* 822195A4h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000003E);
		/* 822195A4h case   21:*/		return 0x822195A8;
		  /* 822195A8h */ case   22:  		/* stw R10, <#[R1 + 96]> */
		/* 822195A8h case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 822195A8h case   22:*/		return 0x822195AC;
		  /* 822195ACh */ case   23:  		/* bc 12, CR6_EQ, 12 */
		/* 822195ACh case   23:*/		if ( regs.CR[6].eq ) { return 0x822195B8;  }
		/* 822195ACh case   23:*/		return 0x822195B0;
		  /* 822195B0h */ case   24:  		/* cmplwi CR6, R11, 42 */
		/* 822195B0h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000002A);
		/* 822195B0h case   24:*/		return 0x822195B4;
		  /* 822195B4h */ case   25:  		/* bc 4, CR6_EQ, 12 */
		/* 822195B4h case   25:*/		if ( !regs.CR[6].eq ) { return 0x822195C0;  }
		/* 822195B4h case   25:*/		return 0x822195B8;
	}
	return 0x822195B8;
} // Block from 82219550h-822195B8h (26 instructions)

//////////////////////////////////////////////////////
// Block at 822195B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822195B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822195B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822195B8);
		  /* 822195B8h */ case    0:  		/* rlwinm R10, R10, 0, 16, 2 */
		/* 822195B8h case    0:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R10,regs.R10);
		/* 822195B8h case    0:*/		return 0x822195BC;
		  /* 822195BCh */ case    1:  		/* stw R10, <#[R4]> */
		/* 822195BCh case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 822195BCh case    1:*/		return 0x822195C0;
	}
	return 0x822195C0;
} // Block from 822195B8h-822195C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822195C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822195C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822195C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822195C0);
		  /* 822195C0h */ case    0:  		/* lis R10, -32216 */
		/* 822195C0h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8228);
		/* 822195C0h case    0:*/		return 0x822195C4;
		  /* 822195C4h */ case    1:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 822195C4h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 822195C4h case    1:*/		return 0x822195C8;
		  /* 822195C8h */ case    2:  		/* addi R11, R10, 8968 */
		/* 822195C8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x2308);
		/* 822195C8h case    2:*/		return 0x822195CC;
		  /* 822195CCh */ case    3:  		/* addi R25, R4, 4 */
		/* 822195CCh case    3:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R4,0x4);
		/* 822195CCh case    3:*/		return 0x822195D0;
		  /* 822195D0h */ case    4:  		/* addi R10, R11, 456 */
		/* 822195D0h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1C8);
		/* 822195D0h case    4:*/		return 0x822195D4;
		  /* 822195D4h */ case    5:  		/* stw R11, <#[R1 + 152]> */
		/* 822195D4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000098) );
		/* 822195D4h case    5:*/		return 0x822195D8;
		  /* 822195D8h */ case    6:  		/* stw R25, <#[R1 + 412]> */
		/* 822195D8h case    6:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x0000019C) );
		/* 822195D8h case    6:*/		return 0x822195DC;
		  /* 822195DCh */ case    7:  		/* lwzx R11, <#[R9 + R11]> */
		/* 822195DCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 822195DCh case    7:*/		return 0x822195E0;
		  /* 822195E0h */ case    8:  		/* lwzx R21, <#[R9 + R10]> */
		/* 822195E0h case    8:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 822195E0h case    8:*/		return 0x822195E4;
		  /* 822195E4h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 822195E4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822195E4h case    9:*/		return 0x822195E8;
		  /* 822195E8h */ case   10:  		/* bc 12, CR6_EQ, 164 */
		/* 822195E8h case   10:*/		if ( regs.CR[6].eq ) { return 0x8221968C;  }
		/* 822195E8h case   10:*/		return 0x822195EC;
		  /* 822195ECh */ case   11:  		/* addi R11, R27, 3292 */
		/* 822195ECh case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xCDC);
		/* 822195ECh case   11:*/		return 0x822195F0;
		  /* 822195F0h */ case   12:  		/* lwz R30, <#[R25]> */
		/* 822195F0h case   12:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R25 + 0x00000000) );
		/* 822195F0h case   12:*/		return 0x822195F4;
		  /* 822195F4h */ case   13:  		/* addi R25, R25, 4 */
		/* 822195F4h case   13:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 822195F4h case   13:*/		return 0x822195F8;
		  /* 822195F8h */ case   14:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 822195F8h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 822195F8h case   14:*/		return 0x822195FC;
		  /* 822195FCh */ case   15:  		/* stw R25, <#[R1 + 412]> */
		/* 822195FCh case   15:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x0000019C) );
		/* 822195FCh case   15:*/		return 0x82219600;
		  /* 82219600h */ case   16:  		/* stw R30, <#[R1 + 100]> */
		/* 82219600h case   16:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 82219600h case   16:*/		return 0x82219604;
		  /* 82219604h */ case   17:  		/* lwzx R11, <#[R11 + R24]> */
		/* 82219604h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R24 + 0x00000000) );
		/* 82219604h case   17:*/		return 0x82219608;
		  /* 82219608h */ case   18:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 82219608h case   18:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 82219608h case   18:*/		return 0x8221960C;
		  /* 8221960Ch */ case   19:  		/* bc 12, CR0_EQ, 60 */
		/* 8221960Ch case   19:*/		if ( regs.CR[0].eq ) { return 0x82219648;  }
		/* 8221960Ch case   19:*/		return 0x82219610;
		  /* 82219610h */ case   20:  		/* rlwinm R6, R30, 16, 26, 31 */
		/* 82219610h case   20:*/		cpu::op::rlwinm<0,16,26,31>(regs,&regs.R6,regs.R30);
		/* 82219610h case   20:*/		return 0x82219614;
		  /* 82219614h */ case   21:  		/* cmplwi CR6, R6, 23 */
		/* 82219614h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000017);
		/* 82219614h case   21:*/		return 0x82219618;
		  /* 82219618h */ case   22:  		/* bc 4, CR6_EQ, 12 */
		/* 82219618h case   22:*/		if ( !regs.CR[6].eq ) { return 0x82219624;  }
		/* 82219618h case   22:*/		return 0x8221961C;
		  /* 8221961Ch */ case   23:  		/* rlwinm R11, R30, 0, 16, 31 */
		/* 8221961Ch case   23:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R30);
		/* 8221961Ch case   23:*/		return 0x82219620;
		  /* 82219620h */ case   24:  		/* stw R11, <#[R1 + 148]> */
		/* 82219620h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 82219620h case   24:*/		return 0x82219624;
	}
	return 0x82219624;
} // Block from 822195C0h-82219624h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82219624h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219624( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219624) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219624);
		  /* 82219624h */ case    0:  		/* addi R4, R24, 16768 */
		/* 82219624h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R24,0x4180);
		/* 82219624h case    0:*/		return 0x82219628;
		  /* 82219628h */ case    1:  		/* rlwinm R5, R30, 0, 16, 31 */
		/* 82219628h case    1:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R5,regs.R30);
		/* 82219628h case    1:*/		return 0x8221962C;
		  /* 8221962Ch */ case    2:  		/* mr R3, R18 */
		/* 8221962Ch case    2:*/		regs.R3 = regs.R18;
		/* 8221962Ch case    2:*/		return 0x82219630;
		  /* 82219630h */ case    3:  		/* bl -41856 */
		/* 82219630h case    3:*/		regs.LR = 0x82219634; return 0x8220F2B0;
		/* 82219630h case    3:*/		return 0x82219634;
		  /* 82219634h */ case    4:  		/* andis. R11, R30, 65476 */
		/* 82219634h case    4:*/		cpu::op::andis<1>(regs,&regs.R11,regs.R30,0xFFC4);
		/* 82219634h case    4:*/		return 0x82219638;
		  /* 82219638h */ case    5:  		/* rlwinm R10, R3, 0, 16, 31 */
		/* 82219638h case    5:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R3);
		/* 82219638h case    5:*/		return 0x8221963C;
		  /* 8221963Ch */ case    6:  		/* or R11, R10, R11 */
		/* 8221963Ch case    6:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8221963Ch case    6:*/		return 0x82219640;
		  /* 82219640h */ case    7:  		/* oris R30, R11, 4 */
		/* 82219640h case    7:*/		cpu::op::oris<0>(regs,&regs.R30,regs.R11,0x4);
		/* 82219640h case    7:*/		return 0x82219644;
		  /* 82219644h */ case    8:  		/* stw R30, <#[R1 + 100]> */
		/* 82219644h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 82219644h case    8:*/		return 0x82219648;
	}
	return 0x82219648;
} // Block from 82219624h-82219648h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82219648h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219648);
		  /* 82219648h */ case    0:  		/* rlwinm. R11, R30, 0, 9, 9 */
		/* 82219648h case    0:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R30);
		/* 82219648h case    0:*/		return 0x8221964C;
		  /* 8221964Ch */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 8221964Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82219660;  }
		/* 8221964Ch case    1:*/		return 0x82219650;
		  /* 82219650h */ case    2:  		/* lwz R11, <#[R25]> */
		/* 82219650h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 82219650h case    2:*/		return 0x82219654;
		  /* 82219654h */ case    3:  		/* addi R25, R25, 4 */
		/* 82219654h case    3:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 82219654h case    3:*/		return 0x82219658;
		  /* 82219658h */ case    4:  		/* stw R25, <#[R1 + 412]> */
		/* 82219658h case    4:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x0000019C) );
		/* 82219658h case    4:*/		return 0x8221965C;
		  /* 8221965Ch */ case    5:  		/* b 8 */
		/* 8221965Ch case    5:*/		return 0x82219664;
		/* 8221965Ch case    5:*/		return 0x82219660;
	}
	return 0x82219660;
} // Block from 82219648h-82219660h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82219660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219660);
		  /* 82219660h */ case    0:  		/* li R11, 85 */
		/* 82219660h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x55);
		/* 82219660h case    0:*/		return 0x82219664;
	}
	return 0x82219664;
} // Block from 82219660h-82219664h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82219664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219664);
		  /* 82219664h */ case    0:  		/* stw R11, <#[R1 + 104]> */
		/* 82219664h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 82219664h case    0:*/		return 0x82219668;
		  /* 82219668h */ case    1:  		/* rlwinm. R11, R30, 0, 8, 8 */
		/* 82219668h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R30);
		/* 82219668h case    1:*/		return 0x8221966C;
		  /* 8221966Ch */ case    2:  		/* bc 12, CR0_EQ, 24 */
		/* 8221966Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x82219684;  }
		/* 8221966Ch case    2:*/		return 0x82219670;
		  /* 82219670h */ case    3:  		/* lwz R11, <#[R25]> */
		/* 82219670h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 82219670h case    3:*/		return 0x82219674;
		  /* 82219674h */ case    4:  		/* addi R25, R25, 4 */
		/* 82219674h case    4:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 82219674h case    4:*/		return 0x82219678;
		  /* 82219678h */ case    5:  		/* stw R25, <#[R1 + 412]> */
		/* 82219678h case    5:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x0000019C) );
		/* 82219678h case    5:*/		return 0x8221967C;
		  /* 8221967Ch */ case    6:  		/* stw R11, <#[R1 + 108]> */
		/* 8221967Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 8221967Ch case    6:*/		return 0x82219680;
		  /* 82219680h */ case    7:  		/* b 16 */
		/* 82219680h case    7:*/		return 0x82219690;
		/* 82219680h case    7:*/		return 0x82219684;
	}
	return 0x82219684;
} // Block from 82219664h-82219684h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82219684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219684);
		  /* 82219684h */ case    0:  		/* stw R23, <#[R1 + 108]> */
		/* 82219684h case    0:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R1 + 0x0000006C) );
		/* 82219684h case    0:*/		return 0x82219688;
		  /* 82219688h */ case    1:  		/* b 8 */
		/* 82219688h case    1:*/		return 0x82219690;
		/* 82219688h case    1:*/		return 0x8221968C;
	}
	return 0x8221968C;
} // Block from 82219684h-8221968Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221968Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221968C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221968C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221968C);
		  /* 8221968Ch */ case    0:  		/* lwz R30, <#[R1 + 100]> */
		/* 8221968Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 8221968Ch case    0:*/		return 0x82219690;
	}
	return 0x82219690;
} // Block from 8221968Ch-82219690h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82219690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219690);
		  /* 82219690h */ case    0:  		/* lis R11, -32253 */
		/* 82219690h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82219690h case    0:*/		return 0x82219694;
		  /* 82219694h */ case    1:  		/* lis R10, -32252 */
		/* 82219694h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82219694h case    1:*/		return 0x82219698;
		  /* 82219698h */ case    2:  		/* lis R9, -32252 */
		/* 82219698h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 82219698h case    2:*/		return 0x8221969C;
		  /* 8221969Ch */ case    3:  		/* li R22, 1 */
		/* 8221969Ch case    3:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 8221969Ch case    3:*/		return 0x822196A0;
		  /* 822196A0h */ case    4:  		/* li R17, 12816 */
		/* 822196A0h case    4:*/		cpu::op::li<0>(regs,&regs.R17,0x3210);
		/* 822196A0h case    4:*/		return 0x822196A4;
		  /* 822196A4h */ case    5:  		/* mr R29, R23 */
		/* 822196A4h case    5:*/		regs.R29 = regs.R23;
		/* 822196A4h case    5:*/		return 0x822196A8;
		  /* 822196A8h */ case    6:  		/* cmplwi CR6, R21, 0 */
		/* 822196A8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 822196A8h case    6:*/		return 0x822196AC;
		  /* 822196ACh */ case    7:  		/* addi R16, R11, 27460 */
		/* 822196ACh case    7:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R11,0x6B44);
		/* 822196ACh case    7:*/		return 0x822196B0;
		  /* 822196B0h */ case    8:  		/* addi R14, R10, -25364 */
		/* 822196B0h case    8:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R10,0xFFFF9CEC);
		/* 822196B0h case    8:*/		return 0x822196B4;
		  /* 822196B4h */ case    9:  		/* addi R15, R9, -7312 */
		/* 822196B4h case    9:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R9,0xFFFFE370);
		/* 822196B4h case    9:*/		return 0x822196B8;
		  /* 822196B8h */ case   10:  		/* bc 12, CR6_EQ, 248 */
		/* 822196B8h case   10:*/		if ( regs.CR[6].eq ) { return 0x822197B0;  }
		/* 822196B8h case   10:*/		return 0x822196BC;
		  /* 822196BCh */ case   11:  		/* addi R11, R27, 3292 */
		/* 822196BCh case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xCDC);
		/* 822196BCh case   11:*/		return 0x822196C0;
		  /* 822196C0h */ case   12:  		/* addi R30, R1, 112 */
		/* 822196C0h case   12:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x70);
		/* 822196C0h case   12:*/		return 0x822196C4;
		  /* 822196C4h */ case   13:  		/* rlwinm R28, R11, 2, 0, 29 */
		/* 822196C4h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R11);
		/* 822196C4h case   13:*/		return 0x822196C8;
		  /* 822196C8h */ case   14:  		/* lwz R10, <#[R25]> */
		/* 822196C8h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000000) );
		/* 822196C8h case   14:*/		return 0x822196CC;
		  /* 822196CCh */ case   15:  		/* li R11, 4096 */
		/* 822196CCh case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x1000);
		/* 822196CCh case   15:*/		return 0x822196D0;
		  /* 822196D0h */ case   16:  		/* lwzx R9, <#[R28 + R24]> */
		/* 822196D0h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + regs.R24 + 0x00000000) );
		/* 822196D0h case   16:*/		return 0x822196D4;
		  /* 822196D4h */ case   17:  		/* addi R25, R25, 4 */
		/* 822196D4h case   17:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 822196D4h case   17:*/		return 0x822196D8;
		  /* 822196D8h */ case   18:  		/* slw R11, R11, R29 */
		/* 822196D8h case   18:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 822196D8h case   18:*/		return 0x822196DC;
		  /* 822196DCh */ case   19:  		/* and. R11, R11, R9 */
		/* 822196DCh case   19:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 822196DCh case   19:*/		return 0x822196E0;
		  /* 822196E0h */ case   20:  		/* stw R10, <#[R30]> */
		/* 822196E0h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 822196E0h case   20:*/		return 0x822196E4;
		  /* 822196E4h */ case   21:  		/* bc 12, CR0_EQ, 104 */
		/* 822196E4h case   21:*/		if ( regs.CR[0].eq ) { return 0x8221974C;  }
		/* 822196E4h case   21:*/		return 0x822196E8;
		  /* 822196E8h */ case   22:  		/* rlwinm R9, R10, 0, 0, 31 */
		/* 822196E8h case   22:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R10);
		/* 822196E8h case   22:*/		return 0x822196EC;
		  /* 822196ECh */ case   23:  		/* lwz R11, <#[R24 + 16768]> */
		/* 822196ECh case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00004180) );
		/* 822196ECh case   23:*/		return 0x822196F0;
		  /* 822196F0h */ case   24:  		/* rlwinm R10, R9, 16, 26, 31 */
		/* 822196F0h case   24:*/		cpu::op::rlwinm<0,16,26,31>(regs,&regs.R10,regs.R9);
		/* 822196F0h case   24:*/		return 0x822196F4;
		  /* 822196F4h */ case   25:  		/* rlwinm R9, R9, 0, 16, 31 */
		/* 822196F4h case   25:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R9);
		/* 822196F4h case   25:*/		return 0x822196F8;
		  /* 822196F8h */ case   26:  		/* b 32 */
		/* 822196F8h case   26:*/		return 0x82219718;
		/* 822196F8h case   26:*/		return 0x822196FC;
		  /* 822196FCh */ case   27:  		/* lwz R8, <#[R11 + 4]> */
		/* 822196FCh case   27:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 822196FCh case   27:*/		return 0x82219700;
		  /* 82219700h */ case   28:  		/* cmplw CR6, R8, R9 */
		/* 82219700h case   28:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 82219700h case   28:*/		return 0x82219704;
		  /* 82219704h */ case   29:  		/* bc 4, CR6_EQ, 16 */
		/* 82219704h case   29:*/		if ( !regs.CR[6].eq ) { return 0x82219714;  }
		/* 82219704h case   29:*/		return 0x82219708;
		  /* 82219708h */ case   30:  		/* lwz R8, <#[R11 + 8]> */
		/* 82219708h case   30:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 82219708h case   30:*/		return 0x8221970C;
		  /* 8221970Ch */ case   31:  		/* cmplw CR6, R8, R10 */
		/* 8221970Ch case   31:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R10);
		/* 8221970Ch case   31:*/		return 0x82219710;
		  /* 82219710h */ case   32:  		/* bc 12, CR6_EQ, 88 */
		/* 82219710h case   32:*/		if ( regs.CR[6].eq ) { return 0x82219768;  }
		/* 82219710h case   32:*/		return 0x82219714;
	}
	return 0x82219714;
} // Block from 82219690h-82219714h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82219714h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219714( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219714) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219714);
		  /* 82219714h */ case    0:  		/* lwz R11, <#[R11 + 12]> */
		/* 82219714h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82219714h case    0:*/		return 0x82219718;
	}
	return 0x82219718;
} // Block from 82219714h-82219718h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82219718h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219718( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219718) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219718);
		  /* 82219718h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 82219718h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82219718h case    0:*/		return 0x8221971C;
		  /* 8221971Ch */ case    1:  		/* bc 4, CR6_EQ, -32 */
		/* 8221971Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x822196FC;  }
		/* 8221971Ch case    1:*/		return 0x82219720;
		  /* 82219720h */ case    2:  		/* mr R6, R15 */
		/* 82219720h case    2:*/		regs.R6 = regs.R15;
		/* 82219720h case    2:*/		return 0x82219724;
		  /* 82219724h */ case    3:  		/* mr R5, R14 */
		/* 82219724h case    3:*/		regs.R5 = regs.R14;
		/* 82219724h case    3:*/		return 0x82219728;
		  /* 82219728h */ case    4:  		/* mr R4, R16 */
		/* 82219728h case    4:*/		regs.R4 = regs.R16;
		/* 82219728h case    4:*/		return 0x8221972C;
		  /* 8221972Ch */ case    5:  		/* li R7, 1074 */
		/* 8221972Ch case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x432);
		/* 8221972Ch case    5:*/		return 0x82219730;
		  /* 82219730h */ case    6:  		/* li R3, 0 */
		/* 82219730h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82219730h case    6:*/		return 0x82219734;
		  /* 82219734h */ case    7:  		/* bl -793388 */
		/* 82219734h case    7:*/		regs.LR = 0x82219738; return 0x82157C08;
		/* 82219734h case    7:*/		return 0x82219738;
		  /* 82219738h */ case    8:  		/* mr R11, R23 */
		/* 82219738h case    8:*/		regs.R11 = regs.R23;
		/* 82219738h case    8:*/		return 0x8221973C;
		  /* 8221973Ch */ case    9:  		/* sth R11, <#[R30 + 2]> */
		/* 8221973Ch case    9:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0x00000002) );
		/* 8221973Ch case    9:*/		return 0x82219740;
		  /* 82219740h */ case   10:  		/* lwz R11, <#[R30]> */
		/* 82219740h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82219740h case   10:*/		return 0x82219744;
		  /* 82219744h */ case   11:  		/* rlwimi R11, R22, 18, 10, 15 */
		/* 82219744h case   11:*/		cpu::op::rlwimi<0,18,10,15>(regs,&regs.R11,regs.R22);
		/* 82219744h case   11:*/		return 0x82219748;
		  /* 82219748h */ case   12:  		/* stw R11, <#[R30]> */
		/* 82219748h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82219748h case   12:*/		return 0x8221974C;
	}
	return 0x8221974C;
} // Block from 82219718h-8221974Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8221974Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221974C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221974C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221974C);
		  /* 8221974Ch */ case    0:  		/* lwz R11, <#[R30]> */
		/* 8221974Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8221974Ch case    0:*/		return 0x82219750;
		  /* 82219750h */ case    1:  		/* rlwinm. R11, R11, 0, 9, 9 */
		/* 82219750h case    1:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R11);
		/* 82219750h case    1:*/		return 0x82219754;
		  /* 82219754h */ case    2:  		/* bc 12, CR0_EQ, 28 */
		/* 82219754h case    2:*/		if ( regs.CR[0].eq ) { return 0x82219770;  }
		/* 82219754h case    2:*/		return 0x82219758;
		  /* 82219758h */ case    3:  		/* lwz R11, <#[R25]> */
		/* 82219758h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 82219758h case    3:*/		return 0x8221975C;
		  /* 8221975Ch */ case    4:  		/* addi R25, R25, 4 */
		/* 8221975Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 8221975Ch case    4:*/		return 0x82219760;
		  /* 82219760h */ case    5:  		/* stw R11, <#[R30 + 12]> */
		/* 82219760h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82219760h case    5:*/		return 0x82219764;
		  /* 82219764h */ case    6:  		/* b 16 */
		/* 82219764h case    6:*/		return 0x82219774;
		/* 82219764h case    6:*/		return 0x82219768;
	}
	return 0x82219768;
} // Block from 8221974Ch-82219768h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82219768h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219768( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219768) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219768);
		  /* 82219768h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 82219768h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82219768h case    0:*/		return 0x8221976C;
		  /* 8221976Ch */ case    1:  		/* b -48 */
		/* 8221976Ch case    1:*/		return 0x8221973C;
		/* 8221976Ch case    1:*/		return 0x82219770;
	}
	return 0x82219770;
} // Block from 82219768h-82219770h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82219770h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219770);
		  /* 82219770h */ case    0:  		/* stw R17, <#[R30 + 12]> */
		/* 82219770h case    0:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R30 + 0x0000000C) );
		/* 82219770h case    0:*/		return 0x82219774;
	}
	return 0x82219774;
} // Block from 82219770h-82219774h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82219774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219774);
		  /* 82219774h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 82219774h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82219774h case    0:*/		return 0x82219778;
		  /* 82219778h */ case    1:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 82219778h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 82219778h case    1:*/		return 0x8221977C;
		  /* 8221977Ch */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 8221977Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x82219790;  }
		/* 8221977Ch case    2:*/		return 0x82219780;
		  /* 82219780h */ case    3:  		/* lwz R11, <#[R25]> */
		/* 82219780h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 82219780h case    3:*/		return 0x82219784;
		  /* 82219784h */ case    4:  		/* addi R25, R25, 4 */
		/* 82219784h case    4:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 82219784h case    4:*/		return 0x82219788;
		  /* 82219788h */ case    5:  		/* stw R11, <#[R30 + 24]> */
		/* 82219788h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000018) );
		/* 82219788h case    5:*/		return 0x8221978C;
		  /* 8221978Ch */ case    6:  		/* b 8 */
		/* 8221978Ch case    6:*/		return 0x82219794;
		/* 8221978Ch case    6:*/		return 0x82219790;
	}
	return 0x82219790;
} // Block from 82219774h-82219790h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82219790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219790);
		  /* 82219790h */ case    0:  		/* stw R23, <#[R30 + 24]> */
		/* 82219790h case    0:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R30 + 0x00000018) );
		/* 82219790h case    0:*/		return 0x82219794;
	}
	return 0x82219794;
} // Block from 82219790h-82219794h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82219794h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219794( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219794) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219794);
		  /* 82219794h */ case    0:  		/* addi R29, R29, 1 */
		/* 82219794h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82219794h case    0:*/		return 0x82219798;
		  /* 82219798h */ case    1:  		/* addi R30, R30, 4 */
		/* 82219798h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82219798h case    1:*/		return 0x8221979C;
		  /* 8221979Ch */ case    2:  		/* cmplw CR6, R29, R21 */
		/* 8221979Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R21);
		/* 8221979Ch case    2:*/		return 0x822197A0;
		  /* 822197A0h */ case    3:  		/* bc 12, CR6_LT, -216 */
		/* 822197A0h case    3:*/		if ( regs.CR[6].lt ) { return 0x822196C8;  }
		/* 822197A0h case    3:*/		return 0x822197A4;
		  /* 822197A4h */ case    4:  		/* lwz R30, <#[R1 + 100]> */
		/* 822197A4h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 822197A4h case    4:*/		return 0x822197A8;
		  /* 822197A8h */ case    5:  		/* lwz R26, <#[R1 + 96]> */
		/* 822197A8h case    5:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000060) );
		/* 822197A8h case    5:*/		return 0x822197AC;
		  /* 822197ACh */ case    6:  		/* stw R25, <#[R1 + 412]> */
		/* 822197ACh case    6:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x0000019C) );
		/* 822197ACh case    6:*/		return 0x822197B0;
	}
	return 0x822197B0;
} // Block from 82219794h-822197B0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 822197B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822197B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822197B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822197B0);
		  /* 822197B0h */ case    0:  		/* rlwinm R11, R26, 0, 16, 31 */
		/* 822197B0h case    0:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R26);
		/* 822197B0h case    0:*/		return 0x822197B4;
		  /* 822197B4h */ case    1:  		/* lwz R29, <#[R1 + 112]> */
		/* 822197B4h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000070) );
		/* 822197B4h case    1:*/		return 0x822197B8;
		  /* 822197B8h */ case    2:  		/* cmplwi CR6, R11, 71 */
		/* 822197B8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000047);
		/* 822197B8h case    2:*/		return 0x822197BC;
		  /* 822197BCh */ case    3:  		/* bc 4, CR6_EQ, 32 */
		/* 822197BCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x822197DC;  }
		/* 822197BCh case    3:*/		return 0x822197C0;
		  /* 822197C0h */ case    4:  		/* rlwinm R11, R29, 0, 10, 15 */
		/* 822197C0h case    4:*/		cpu::op::rlwinm<0,0,10,15>(regs,&regs.R11,regs.R29);
		/* 822197C0h case    4:*/		return 0x822197C4;
		  /* 822197C4h */ case    5:  		/* lis R10, 3 */
		/* 822197C4h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0x3);
		/* 822197C4h case    5:*/		return 0x822197C8;
		  /* 822197C8h */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 822197C8h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 822197C8h case    6:*/		return 0x822197CC;
		  /* 822197CCh */ case    7:  		/* bc 4, CR6_EQ, 16 */
		/* 822197CCh case    7:*/		if ( !regs.CR[6].eq ) { return 0x822197DC;  }
		/* 822197CCh case    7:*/		return 0x822197D0;
		  /* 822197D0h */ case    8:  		/* li R11, 9 */
		/* 822197D0h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x9);
		/* 822197D0h case    8:*/		return 0x822197D4;
		  /* 822197D4h */ case    9:  		/* rlwimi R26, R11, 3, 16, 31 */
		/* 822197D4h case    9:*/		cpu::op::rlwimi<0,3,16,31>(regs,&regs.R26,regs.R11);
		/* 822197D4h case    9:*/		return 0x822197D8;
		  /* 822197D8h */ case   10:  		/* stw R26, <#[R1 + 96]> */
		/* 822197D8h case   10:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000060) );
		/* 822197D8h case   10:*/		return 0x822197DC;
	}
	return 0x822197DC;
} // Block from 822197B0h-822197DCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 822197DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822197DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822197DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822197DC);
		  /* 822197DCh */ case    0:  		/* addi R11, R27, 3292 */
		/* 822197DCh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xCDC);
		/* 822197DCh case    0:*/		return 0x822197E0;
		  /* 822197E0h */ case    1:  		/* rlwinm R28, R11, 2, 0, 29 */
		/* 822197E0h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R11);
		/* 822197E0h case    1:*/		return 0x822197E4;
		  /* 822197E4h */ case    2:  		/* stw R28, <#[R1 + 156]> */
		/* 822197E4h case    2:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x0000009C) );
		/* 822197E4h case    2:*/		return 0x822197E8;
		  /* 822197E8h */ case    3:  		/* lwzx R11, <#[R28 + R24]> */
		/* 822197E8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R24 + 0x00000000) );
		/* 822197E8h case    3:*/		return 0x822197EC;
		  /* 822197ECh */ case    4:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 822197ECh case    4:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 822197ECh case    4:*/		return 0x822197F0;
		  /* 822197F0h */ case    5:  		/* bc 12, CR0_EQ, 44 */
		/* 822197F0h case    5:*/		if ( regs.CR[0].eq ) { return 0x8221981C;  }
		/* 822197F0h case    5:*/		return 0x822197F4;
		  /* 822197F4h */ case    6:  		/* stw R23, <#[R1 + 80]> */
		/* 822197F4h case    6:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R1 + 0x00000050) );
		/* 822197F4h case    6:*/		return 0x822197F8;
		  /* 822197F8h */ case    7:  		/* addi R7, R1, 80 */
		/* 822197F8h case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 822197F8h case    7:*/		return 0x822197FC;
		  /* 822197FCh */ case    8:  		/* mr R6, R31 */
		/* 822197FCh case    8:*/		regs.R6 = regs.R31;
		/* 822197FCh case    8:*/		return 0x82219800;
		  /* 82219800h */ case    9:  		/* addi R5, R24, 23224 */
		/* 82219800h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R24,0x5AB8);
		/* 82219800h case    9:*/		return 0x82219804;
		  /* 82219804h */ case   10:  		/* addi R4, R1, 96 */
		/* 82219804h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 82219804h case   10:*/		return 0x82219808;
		  /* 82219808h */ case   11:  		/* mr R3, R18 */
		/* 82219808h case   11:*/		regs.R3 = regs.R18;
		/* 82219808h case   11:*/		return 0x8221980C;
		  /* 8221980Ch */ case   12:  		/* bl -11988 */
		/* 8221980Ch case   12:*/		regs.LR = 0x82219810; return 0x82216938;
		/* 8221980Ch case   12:*/		return 0x82219810;
		  /* 82219810h */ case   13:  		/* lwz R23, <#[R1 + 80]> */
		/* 82219810h case   13:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000050) );
		/* 82219810h case   13:*/		return 0x82219814;
		  /* 82219814h */ case   14:  		/* mr R31, R3 */
		/* 82219814h case   14:*/		regs.R31 = regs.R3;
		/* 82219814h case   14:*/		return 0x82219818;
		  /* 82219818h */ case   15:  		/* stw R23, <#[R1 + 80]> */
		/* 82219818h case   15:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R1 + 0x00000050) );
		/* 82219818h case   15:*/		return 0x8221981C;
	}
	return 0x8221981C;
} // Block from 822197DCh-8221981Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8221981Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221981C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221981C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221981C);
		  /* 8221981Ch */ case    0:  		/* lwzx R11, <#[R28 + R24]> */
		/* 8221981Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R24 + 0x00000000) );
		/* 8221981Ch case    0:*/		return 0x82219820;
		  /* 82219820h */ case    1:  		/* li R19, 65 */
		/* 82219820h case    1:*/		cpu::op::li<0>(regs,&regs.R19,0x41);
		/* 82219820h case    1:*/		return 0x82219824;
		  /* 82219824h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82219824h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82219824h case    2:*/		return 0x82219828;
		  /* 82219828h */ case    3:  		/* bc 12, CR0_EQ, 1404 */
		/* 82219828h case    3:*/		if ( regs.CR[0].eq ) { return 0x82219DA4;  }
		/* 82219828h case    3:*/		return 0x8221982C;
		  /* 8221982Ch */ case    4:  		/* cmplwi CR6, R21, 0 */
		/* 8221982Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 8221982Ch case    4:*/		return 0x82219830;
		  /* 82219830h */ case    5:  		/* bc 12, CR6_EQ, 1692 */
		/* 82219830h case    5:*/		if ( regs.CR[6].eq ) { return 0x82219ECC;  }
		/* 82219830h case    5:*/		return 0x82219834;
		  /* 82219834h */ case    6:  		/* lwz R11, <#[R1 + 84]> */
		/* 82219834h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82219834h case    6:*/		return 0x82219838;
		  /* 82219838h */ case    7:  		/* addi R30, R1, 124 */
		/* 82219838h case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x7C);
		/* 82219838h case    7:*/		return 0x8221983C;
		  /* 8221983Ch */ case    8:  		/* addi R28, R11, 23212 */
		/* 8221983Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x5AAC);
		/* 8221983Ch case    8:*/		return 0x82219840;
		  /* 82219840h */ case    9:  		/* subfic R25, R11, -23212 */
		/* 82219840h case    9:*/		cpu::op::subfic<0>(regs,&regs.R25,regs.R11,0xFFFFA554);
		/* 82219840h case    9:*/		return 0x82219844;
		  /* 82219844h */ case   10:  		/* lwz R11, <#[R30 - 12]> */
		/* 82219844h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0xFFFFFFF4) );
		/* 82219844h case   10:*/		return 0x82219848;
		  /* 82219848h */ case   11:  		/* addi R29, R30, -12 */
		/* 82219848h case   11:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0xFFFFFFF4);
		/* 82219848h case   11:*/		return 0x8221984C;
		  /* 8221984Ch */ case   12:  		/* rlwinm. R11, R11, 0, 9, 9 */
		/* 8221984Ch case   12:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R11);
		/* 8221984Ch case   12:*/		return 0x82219850;
		  /* 82219850h */ case   13:  		/* bc 12, CR0_EQ, 1344 */
		/* 82219850h case   13:*/		if ( regs.CR[0].eq ) { return 0x82219D90;  }
		/* 82219850h case   13:*/		return 0x82219854;
		  /* 82219854h */ case   14:  		/* lwz R11, <#[R30]> */
		/* 82219854h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82219854h case   14:*/		return 0x82219858;
		  /* 82219858h */ case   15:  		/* rlwinm R10, R11, 0, 29, 31 */
		/* 82219858h case   15:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R11);
		/* 82219858h case   15:*/		return 0x8221985C;
		  /* 8221985Ch */ case   16:  		/* cmplwi CR6, R10, 4 */
		/* 8221985Ch case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 8221985Ch case   16:*/		return 0x82219860;
		  /* 82219860h */ case   17:  		/* bc 4, CR6_LT, 40 */
		/* 82219860h case   17:*/		if ( !regs.CR[6].lt ) { return 0x82219888;  }
		/* 82219860h case   17:*/		return 0x82219864;
		  /* 82219864h */ case   18:  		/* rlwinm R10, R11, 0, 25, 27 */
		/* 82219864h case   18:*/		cpu::op::rlwinm<0,0,25,27>(regs,&regs.R10,regs.R11);
		/* 82219864h case   18:*/		return 0x82219868;
		  /* 82219868h */ case   19:  		/* cmplwi CR6, R10, 64 */
		/* 82219868h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000040);
		/* 82219868h case   19:*/		return 0x8221986C;
		  /* 8221986Ch */ case   20:  		/* bc 4, CR6_LT, 28 */
		/* 8221986Ch case   20:*/		if ( !regs.CR[6].lt ) { return 0x82219888;  }
		/* 8221986Ch case   20:*/		return 0x82219870;
		  /* 82219870h */ case   21:  		/* rlwinm R10, R11, 0, 21, 23 */
		/* 82219870h case   21:*/		cpu::op::rlwinm<0,0,21,23>(regs,&regs.R10,regs.R11);
		/* 82219870h case   21:*/		return 0x82219874;
		  /* 82219874h */ case   22:  		/* cmplwi CR6, R10, 1024 */
		/* 82219874h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000400);
		/* 82219874h case   22:*/		return 0x82219878;
		  /* 82219878h */ case   23:  		/* bc 4, CR6_LT, 16 */
		/* 82219878h case   23:*/		if ( !regs.CR[6].lt ) { return 0x82219888;  }
		/* 82219878h case   23:*/		return 0x8221987C;
		  /* 8221987Ch */ case   24:  		/* rlwinm R11, R11, 0, 17, 19 */
		/* 8221987Ch case   24:*/		cpu::op::rlwinm<0,0,17,19>(regs,&regs.R11,regs.R11);
		/* 8221987Ch case   24:*/		return 0x82219880;
		  /* 82219880h */ case   25:  		/* cmplwi CR6, R11, 16384 */
		/* 82219880h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00004000);
		/* 82219880h case   25:*/		return 0x82219884;
		  /* 82219884h */ case   26:  		/* bc 12, CR6_LT, 80 */
		/* 82219884h case   26:*/		if ( regs.CR[6].lt ) { return 0x822198D4;  }
		/* 82219884h case   26:*/		return 0x82219888;
	}
	return 0x82219888;
} // Block from 8221981Ch-82219888h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82219888h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219888);
		  /* 82219888h */ case    0:  		/* addi R5, R30, 12 */
		/* 82219888h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R30,0xC);
		/* 82219888h case    0:*/		return 0x8221988C;
		  /* 8221988Ch */ case    1:  		/* lwz R6, <#[R28]> */
		/* 8221988Ch case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R28 + 0x00000000) );
		/* 8221988Ch case    1:*/		return 0x82219890;
		  /* 82219890h */ case    2:  		/* mr R7, R31 */
		/* 82219890h case    2:*/		regs.R7 = regs.R31;
		/* 82219890h case    2:*/		return 0x82219894;
		  /* 82219894h */ case    3:  		/* mr R4, R30 */
		/* 82219894h case    3:*/		regs.R4 = regs.R30;
		/* 82219894h case    3:*/		return 0x82219898;
		  /* 82219898h */ case    4:  		/* mr R3, R29 */
		/* 82219898h case    4:*/		regs.R3 = regs.R29;
		/* 82219898h case    4:*/		return 0x8221989C;
		  /* 8221989Ch */ case    5:  		/* bl -16356 */
		/* 8221989Ch case    5:*/		regs.LR = 0x822198A0; return 0x822158B8;
		/* 8221989Ch case    5:*/		return 0x822198A0;
		  /* 822198A0h */ case    6:  		/* lwz R11, <#[R28]> */
		/* 822198A0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 822198A0h case    6:*/		return 0x822198A4;
		  /* 822198A4h */ case    7:  		/* li R12, -17768 */
		/* 822198A4h case    7:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFBA98);
		/* 822198A4h case    7:*/		return 0x822198A8;
		  /* 822198A8h */ case    8:  		/* addi R23, R23, 2 */
		/* 822198A8h case    8:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x2);
		/* 822198A8h case    8:*/		return 0x822198AC;
		  /* 822198ACh */ case    9:  		/* mr R31, R3 */
		/* 822198ACh case    9:*/		regs.R31 = regs.R3;
		/* 822198ACh case    9:*/		return 0x822198B0;
		  /* 822198B0h */ case   10:  		/* sth R11, <#[R5 - 22]> */
		/* 822198B0h case   10:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R5 + 0xFFFFFFEA) );
		/* 822198B0h case   10:*/		return 0x822198B4;
		  /* 822198B4h */ case   11:  		/* lwz R11, <#[R29]> */
		/* 822198B4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 822198B4h case   11:*/		return 0x822198B8;
		  /* 822198B8h */ case   12:  		/* rlwimi R11, R22, 18, 8, 15 */
		/* 822198B8h case   12:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R11,regs.R22);
		/* 822198B8h case   12:*/		return 0x822198BC;
		  /* 822198BCh */ case   13:  		/* stw R11, <#[R29]> */
		/* 822198BCh case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 822198BCh case   13:*/		return 0x822198C0;
		  /* 822198C0h */ case   14:  		/* lwz R11, <#[R30]> */
		/* 822198C0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 822198C0h case   14:*/		return 0x822198C4;
		  /* 822198C4h */ case   15:  		/* and R11, R11, R12 */
		/* 822198C4h case   15:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 822198C4h case   15:*/		return 0x822198C8;
		  /* 822198C8h */ case   16:  		/* ori R11, R11, 12816 */
		/* 822198C8h case   16:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x3210);
		/* 822198C8h case   16:*/		return 0x822198CC;
		  /* 822198CCh */ case   17:  		/* stw R11, <#[R30]> */
		/* 822198CCh case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 822198CCh case   17:*/		return 0x822198D0;
		  /* 822198D0h */ case   18:  		/* lwz R26, <#[R1 + 96]> */
		/* 822198D0h case   18:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000060) );
		/* 822198D0h case   18:*/		return 0x822198D4;
	}
	return 0x822198D4;
} // Block from 82219888h-822198D4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 822198D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822198D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822198D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822198D4);
		  /* 822198D4h */ case    0:  		/* lhz R11, <#[R30]> */
		/* 822198D4h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 822198D4h case    0:*/		return 0x822198D8;
		  /* 822198D8h */ case    1:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 822198D8h case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 822198D8h case    1:*/		return 0x822198DC;
		  /* 822198DCh */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 822198DCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 822198DCh case    2:*/		return 0x822198E0;
		  /* 822198E0h */ case    3:  		/* bc 4, CR6_EQ, 80 */
		/* 822198E0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82219930;  }
		/* 822198E0h case    3:*/		return 0x822198E4;
		  /* 822198E4h */ case    4:  		/* addi R5, R30, 12 */
		/* 822198E4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R30,0xC);
		/* 822198E4h case    4:*/		return 0x822198E8;
		  /* 822198E8h */ case    5:  		/* lwz R6, <#[R28]> */
		/* 822198E8h case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R28 + 0x00000000) );
		/* 822198E8h case    5:*/		return 0x822198EC;
		  /* 822198ECh */ case    6:  		/* mr R7, R31 */
		/* 822198ECh case    6:*/		regs.R7 = regs.R31;
		/* 822198ECh case    6:*/		return 0x822198F0;
		  /* 822198F0h */ case    7:  		/* mr R4, R30 */
		/* 822198F0h case    7:*/		regs.R4 = regs.R30;
		/* 822198F0h case    7:*/		return 0x822198F4;
		  /* 822198F4h */ case    8:  		/* mr R3, R29 */
		/* 822198F4h case    8:*/		regs.R3 = regs.R29;
		/* 822198F4h case    8:*/		return 0x822198F8;
		  /* 822198F8h */ case    9:  		/* bl -15560 */
		/* 822198F8h case    9:*/		regs.LR = 0x822198FC; return 0x82215C30;
		/* 822198F8h case    9:*/		return 0x822198FC;
		  /* 822198FCh */ case   10:  		/* lwz R11, <#[R28]> */
		/* 822198FCh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 822198FCh case   10:*/		return 0x82219900;
		  /* 82219900h */ case   11:  		/* li R12, -17768 */
		/* 82219900h case   11:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFBA98);
		/* 82219900h case   11:*/		return 0x82219904;
		  /* 82219904h */ case   12:  		/* addi R23, R23, 1 */
		/* 82219904h case   12:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 82219904h case   12:*/		return 0x82219908;
		  /* 82219908h */ case   13:  		/* mr R31, R3 */
		/* 82219908h case   13:*/		regs.R31 = regs.R3;
		/* 82219908h case   13:*/		return 0x8221990C;
		  /* 8221990Ch */ case   14:  		/* sth R11, <#[R5 - 22]> */
		/* 8221990Ch case   14:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R5 + 0xFFFFFFEA) );
		/* 8221990Ch case   14:*/		return 0x82219910;
		  /* 82219910h */ case   15:  		/* lwz R11, <#[R29]> */
		/* 82219910h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82219910h case   15:*/		return 0x82219914;
		  /* 82219914h */ case   16:  		/* rlwimi R11, R22, 18, 8, 15 */
		/* 82219914h case   16:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R11,regs.R22);
		/* 82219914h case   16:*/		return 0x82219918;
		  /* 82219918h */ case   17:  		/* stw R11, <#[R29]> */
		/* 82219918h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82219918h case   17:*/		return 0x8221991C;
		  /* 8221991Ch */ case   18:  		/* lwz R11, <#[R30]> */
		/* 8221991Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8221991Ch case   18:*/		return 0x82219920;
		  /* 82219920h */ case   19:  		/* and R11, R11, R12 */
		/* 82219920h case   19:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 82219920h case   19:*/		return 0x82219924;
		  /* 82219924h */ case   20:  		/* ori R11, R11, 12816 */
		/* 82219924h case   20:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x3210);
		/* 82219924h case   20:*/		return 0x82219928;
		  /* 82219928h */ case   21:  		/* stw R11, <#[R30]> */
		/* 82219928h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82219928h case   21:*/		return 0x8221992C;
		  /* 8221992Ch */ case   22:  		/* lwz R26, <#[R1 + 96]> */
		/* 8221992Ch case   22:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000060) );
		/* 8221992Ch case   22:*/		return 0x82219930;
	}
	return 0x82219930;
} // Block from 822198D4h-82219930h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82219930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219930);
		  /* 82219930h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 82219930h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82219930h case    0:*/		return 0x82219934;
		  /* 82219934h */ case    1:  		/* lis R10, 2 */
		/* 82219934h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x2);
		/* 82219934h case    1:*/		return 0x82219938;
		  /* 82219938h */ case    2:  		/* rlwinm R11, R11, 0, 14, 14 */
		/* 82219938h case    2:*/		cpu::op::rlwinm<0,0,14,14>(regs,&regs.R11,regs.R11);
		/* 82219938h case    2:*/		return 0x8221993C;
		  /* 8221993Ch */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 8221993Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8221993Ch case    3:*/		return 0x82219940;
		  /* 82219940h */ case    4:  		/* bc 4, CR6_EQ, 236 */
		/* 82219940h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82219A2C;  }
		/* 82219940h case    4:*/		return 0x82219944;
		  /* 82219944h */ case    5:  		/* li R10, 3 */
		/* 82219944h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 82219944h case    5:*/		return 0x82219948;
		  /* 82219948h */ case    6:  		/* lwz R9, <#[R28]> */
		/* 82219948h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000000) );
		/* 82219948h case    6:*/		return 0x8221994C;
		  /* 8221994Ch */ case    7:  		/* addi R11, R31, 4 */
		/* 8221994Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 8221994Ch case    7:*/		return 0x82219950;
		  /* 82219950h */ case    8:  		/* lwz R8, <#[R29]> */
		/* 82219950h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000000) );
		/* 82219950h case    8:*/		return 0x82219954;
		  /* 82219954h */ case    9:  		/* sth R10, <#[R31 + 2]> */
		/* 82219954h case    9:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R31 + 0x00000002) );
		/* 82219954h case    9:*/		return 0x82219958;
		  /* 82219958h */ case   10:  		/* mr R10, R9 */
		/* 82219958h case   10:*/		regs.R10 = regs.R9;
		/* 82219958h case   10:*/		return 0x8221995C;
		  /* 8221995Ch */ case   11:  		/* lwz R9, <#[R31]> */
		/* 8221995Ch case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 8221995Ch case   11:*/		return 0x82219960;
		  /* 82219960h */ case   12:  		/* rlwinm R9, R9, 0, 16, 2 */
		/* 82219960h case   12:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R9,regs.R9);
		/* 82219960h case   12:*/		return 0x82219964;
		  /* 82219964h */ case   13:  		/* stw R9, <#[R31]> */
		/* 82219964h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82219964h case   13:*/		return 0x82219968;
		  /* 82219968h */ case   14:  		/* addi R11, R11, 4 */
		/* 82219968h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82219968h case   14:*/		return 0x8221996C;
		  /* 8221996Ch */ case   15:  		/* sth R10, <#[R31 + 6]> */
		/* 8221996Ch case   15:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R31 + 0x00000006) );
		/* 8221996Ch case   15:*/		return 0x82219970;
		  /* 82219970h */ case   16:  		/* rlwinm. R10, R8, 0, 8, 8 */
		/* 82219970h case   16:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R8);
		/* 82219970h case   16:*/		return 0x82219974;
		  /* 82219974h */ case   17:  		/* li R12, 30583 */
		/* 82219974h case   17:*/		cpu::op::li<0>(regs,&regs.R12,0x7777);
		/* 82219974h case   17:*/		return 0x82219978;
		  /* 82219978h */ case   18:  		/* lwz R9, <#[R31 + 4]> */
		/* 82219978h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82219978h case   18:*/		return 0x8221997C;
		  /* 8221997Ch */ case   19:  		/* rlwimi R9, R22, 18, 8, 15 */
		/* 8221997Ch case   19:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R22);
		/* 8221997Ch case   19:*/		return 0x82219980;
		  /* 82219980h */ case   20:  		/* stw R9, <#[R31 + 4]> */
		/* 82219980h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 82219980h case   20:*/		return 0x82219984;
		  /* 82219984h */ case   21:  		/* mr R9, R8 */
		/* 82219984h case   21:*/		regs.R9 = regs.R8;
		/* 82219984h case   21:*/		return 0x82219988;
		  /* 82219988h */ case   22:  		/* sth R8, <#[R11 + 2]> */
		/* 82219988h case   22:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82219988h case   22:*/		return 0x8221998C;
		  /* 8221998Ch */ case   23:  		/* lwz R8, <#[R11]> */
		/* 8221998Ch case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221998Ch case   23:*/		return 0x82219990;
		  /* 82219990h */ case   24:  		/* rlwimi R9, R8, 0, 16, 7 */
		/* 82219990h case   24:*/		cpu::op::rlwimi<0,0,16,7>(regs,&regs.R9,regs.R8);
		/* 82219990h case   24:*/		return 0x82219994;
		  /* 82219994h */ case   25:  		/* rlwimi R9, R8, 0, 9, 9 */
		/* 82219994h case   25:*/		cpu::op::rlwimi<0,0,9,9>(regs,&regs.R9,regs.R8);
		/* 82219994h case   25:*/		return 0x82219998;
		  /* 82219998h */ case   26:  		/* lwz R8, <#[R30]> */
		/* 82219998h case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000000) );
		/* 82219998h case   26:*/		return 0x8221999C;
		  /* 8221999Ch */ case   27:  		/* oris R10, R9, 64 */
		/* 8221999Ch case   27:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R9,0x40);
		/* 8221999Ch case   27:*/		return 0x822199A0;
		  /* 822199A0h */ case   28:  		/* and R9, R8, R12 */
		/* 822199A0h case   28:*/		cpu::op::and<0>(regs,&regs.R9,regs.R8,regs.R12);
		/* 822199A0h case   28:*/		return 0x822199A4;
		  /* 822199A4h */ case   29:  		/* li R12, -30584 */
		/* 822199A4h case   29:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF8888);
		/* 822199A4h case   29:*/		return 0x822199A8;
		  /* 822199A8h */ case   30:  		/* stw R10, <#[R11]> */
		/* 822199A8h case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822199A8h case   30:*/		return 0x822199AC;
		  /* 822199ACh */ case   31:  		/* lwzu R10, <#[R11 + 4]> */
		/* 822199ACh case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822199ACh case   31:*/		return 0x822199B0;
		  /* 822199B0h */ case   32:  		/* and R10, R10, R12 */
		/* 822199B0h case   32:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 822199B0h case   32:*/		return 0x822199B4;
		  /* 822199B4h */ case   33:  		/* or R10, R10, R9 */
		/* 822199B4h case   33:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 822199B4h case   33:*/		return 0x822199B8;
		  /* 822199B8h */ case   34:  		/* stw R10, <#[R11]> */
		/* 822199B8h case   34:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822199B8h case   34:*/		return 0x822199BC;
		  /* 822199BCh */ case   35:  		/* addi R11, R11, 4 */
		/* 822199BCh case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822199BCh case   35:*/		return 0x822199C0;
		  /* 822199C0h */ case   36:  		/* bc 12, CR0_EQ, 16 */
		/* 822199C0h case   36:*/		if ( regs.CR[0].eq ) { return 0x822199D0;  }
		/* 822199C0h case   36:*/		return 0x822199C4;
		  /* 822199C4h */ case   37:  		/* lwz R10, <#[R30 + 12]> */
		/* 822199C4h case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 822199C4h case   37:*/		return 0x822199C8;
		  /* 822199C8h */ case   38:  		/* stw R10, <#[R11]> */
		/* 822199C8h case   38:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822199C8h case   38:*/		return 0x822199CC;
		  /* 822199CCh */ case   39:  		/* addi R11, R11, 4 */
		/* 822199CCh case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 822199CCh case   39:*/		return 0x822199D0;
	}
	return 0x822199D0;
} // Block from 82219930h-822199D0h (40 instructions)

//////////////////////////////////////////////////////
// Block at 822199D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822199D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822199D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822199D0);
		  /* 822199D0h */ case    0:  		/* li R10, 0 */
		/* 822199D0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 822199D0h case    0:*/		return 0x822199D4;
		  /* 822199D4h */ case    1:  		/* li R9, 21845 */
		/* 822199D4h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x5555);
		/* 822199D4h case    1:*/		return 0x822199D8;
		  /* 822199D8h */ case    2:  		/* sth R10, <#[R11 + 2]> */
		/* 822199D8h case    2:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 822199D8h case    2:*/		return 0x822199DC;
		  /* 822199DCh */ case    3:  		/* li R12, -17768 */
		/* 822199DCh case    3:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFBA98);
		/* 822199DCh case    3:*/		return 0x822199E0;
		  /* 822199E0h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 822199E0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822199E0h case    4:*/		return 0x822199E4;
		  /* 822199E4h */ case    5:  		/* rlwimi R10, R19, 16, 8, 15 */
		/* 822199E4h case    5:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R10,regs.R19);
		/* 822199E4h case    5:*/		return 0x822199E8;
		  /* 822199E8h */ case    6:  		/* stw R10, <#[R11]> */
		/* 822199E8h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822199E8h case    6:*/		return 0x822199EC;
		  /* 822199ECh */ case    7:  		/* addi R23, R23, 1 */
		/* 822199ECh case    7:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 822199ECh case    7:*/		return 0x822199F0;
		  /* 822199F0h */ case    8:  		/* stb R22, <#[R11]> */
		/* 822199F0h case    8:*/		cpu::mem::store8( regs, regs.R22, (uint32)(regs.R11 + 0x00000000) );
		/* 822199F0h case    8:*/		return 0x822199F4;
		  /* 822199F4h */ case    9:  		/* lwzu R10, <#[R11 + 4]> */
		/* 822199F4h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 822199F4h case    9:*/		return 0x822199F8;
		  /* 822199F8h */ case   10:  		/* rlwimi R10, R9, 1, 16, 31 */
		/* 822199F8h case   10:*/		cpu::op::rlwimi<0,1,16,31>(regs,&regs.R10,regs.R9);
		/* 822199F8h case   10:*/		return 0x822199FC;
		  /* 822199FCh */ case   11:  		/* stw R10, <#[R11]> */
		/* 822199FCh case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 822199FCh case   11:*/		return 0x82219A00;
		  /* 82219A00h */ case   12:  		/* addi R31, R11, 4 */
		/* 82219A00h case   12:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 82219A00h case   12:*/		return 0x82219A04;
		  /* 82219A04h */ case   13:  		/* lwz R11, <#[R28]> */
		/* 82219A04h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82219A04h case   13:*/		return 0x82219A08;
		  /* 82219A08h */ case   14:  		/* sth R11, <#[R30 - 10]> */
		/* 82219A08h case   14:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0xFFFFFFF6) );
		/* 82219A08h case   14:*/		return 0x82219A0C;
		  /* 82219A0Ch */ case   15:  		/* lwz R11, <#[R29]> */
		/* 82219A0Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82219A0Ch case   15:*/		return 0x82219A10;
		  /* 82219A10h */ case   16:  		/* rlwimi R11, R22, 18, 8, 15 */
		/* 82219A10h case   16:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R11,regs.R22);
		/* 82219A10h case   16:*/		return 0x82219A14;
		  /* 82219A14h */ case   17:  		/* stw R11, <#[R29]> */
		/* 82219A14h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82219A14h case   17:*/		return 0x82219A18;
		  /* 82219A18h */ case   18:  		/* lwz R11, <#[R30]> */
		/* 82219A18h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82219A18h case   18:*/		return 0x82219A1C;
		  /* 82219A1Ch */ case   19:  		/* and R11, R11, R12 */
		/* 82219A1Ch case   19:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 82219A1Ch case   19:*/		return 0x82219A20;
		  /* 82219A20h */ case   20:  		/* ori R11, R11, 12816 */
		/* 82219A20h case   20:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x3210);
		/* 82219A20h case   20:*/		return 0x82219A24;
		  /* 82219A24h */ case   21:  		/* stw R11, <#[R30]> */
		/* 82219A24h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82219A24h case   21:*/		return 0x82219A28;
		  /* 82219A28h */ case   22:  		/* lwz R26, <#[R1 + 96]> */
		/* 82219A28h case   22:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000060) );
		/* 82219A28h case   22:*/		return 0x82219A2C;
	}
	return 0x82219A2C;
} // Block from 822199D0h-82219A2Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 82219A2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219A2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219A2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219A2C);
		  /* 82219A2Ch */ case    0:  		/* lwz R11, <#[R30]> */
		/* 82219A2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82219A2Ch case    0:*/		return 0x82219A30;
		  /* 82219A30h */ case    1:  		/* lis R10, 4 */
		/* 82219A30h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x4);
		/* 82219A30h case    1:*/		return 0x82219A34;
		  /* 82219A34h */ case    2:  		/* rlwinm R11, R11, 0, 13, 13 */
		/* 82219A34h case    2:*/		cpu::op::rlwinm<0,0,13,13>(regs,&regs.R11,regs.R11);
		/* 82219A34h case    2:*/		return 0x82219A38;
		  /* 82219A38h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 82219A38h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82219A38h case    3:*/		return 0x82219A3C;
		  /* 82219A3Ch */ case    4:  		/* bc 4, CR6_EQ, 240 */
		/* 82219A3Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x82219B2C;  }
		/* 82219A3Ch case    4:*/		return 0x82219A40;
		  /* 82219A40h */ case    5:  		/* li R10, 73 */
		/* 82219A40h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x49);
		/* 82219A40h case    5:*/		return 0x82219A44;
		  /* 82219A44h */ case    6:  		/* lwz R9, <#[R28]> */
		/* 82219A44h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000000) );
		/* 82219A44h case    6:*/		return 0x82219A48;
		  /* 82219A48h */ case    7:  		/* lwz R8, <#[R29]> */
		/* 82219A48h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000000) );
		/* 82219A48h case    7:*/		return 0x82219A4C;
		  /* 82219A4Ch */ case    8:  		/* addi R11, R31, 4 */
		/* 82219A4Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 82219A4Ch case    8:*/		return 0x82219A50;
		  /* 82219A50h */ case    9:  		/* sth R10, <#[R31 + 2]> */
		/* 82219A50h case    9:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R31 + 0x00000002) );
		/* 82219A50h case    9:*/		return 0x82219A54;
		  /* 82219A54h */ case   10:  		/* mr R10, R9 */
		/* 82219A54h case   10:*/		regs.R10 = regs.R9;
		/* 82219A54h case   10:*/		return 0x82219A58;
		  /* 82219A58h */ case   11:  		/* lwz R7, <#[R30]> */
		/* 82219A58h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000000) );
		/* 82219A58h case   11:*/		return 0x82219A5C;
		  /* 82219A5Ch */ case   12:  		/* addi R11, R11, 4 */
		/* 82219A5Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82219A5Ch case   12:*/		return 0x82219A60;
		  /* 82219A60h */ case   13:  		/* li R12, -30584 */
		/* 82219A60h case   13:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF8888);
		/* 82219A60h case   13:*/		return 0x82219A64;
		  /* 82219A64h */ case   14:  		/* andi. R7, R7, 30583 */
		/* 82219A64h case   14:*/		cpu::op::andi<1>(regs,&regs.R7,regs.R7,0x7777);
		/* 82219A64h case   14:*/		return 0x82219A68;
		  /* 82219A68h */ case   15:  		/* lwz R9, <#[R31]> */
		/* 82219A68h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82219A68h case   15:*/		return 0x82219A6C;
		  /* 82219A6Ch */ case   16:  		/* rlwinm R9, R9, 0, 16, 2 */
		/* 82219A6Ch case   16:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R9,regs.R9);
		/* 82219A6Ch case   16:*/		return 0x82219A70;
		  /* 82219A70h */ case   17:  		/* stw R9, <#[R31]> */
		/* 82219A70h case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82219A70h case   17:*/		return 0x82219A74;
		  /* 82219A74h */ case   18:  		/* mr R9, R8 */
		/* 82219A74h case   18:*/		regs.R9 = regs.R8;
		/* 82219A74h case   18:*/		return 0x82219A78;
		  /* 82219A78h */ case   19:  		/* sth R10, <#[R31 + 6]> */
		/* 82219A78h case   19:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R31 + 0x00000006) );
		/* 82219A78h case   19:*/		return 0x82219A7C;
		  /* 82219A7Ch */ case   20:  		/* mr R10, R8 */
		/* 82219A7Ch case   20:*/		regs.R10 = regs.R8;
		/* 82219A7Ch case   20:*/		return 0x82219A80;
		  /* 82219A80h */ case   21:  		/* rlwinm R8, R8, 0, 8, 8 */
		/* 82219A80h case   21:*/		cpu::op::rlwinm<0,0,8,8>(regs,&regs.R8,regs.R8);
		/* 82219A80h case   21:*/		return 0x82219A84;
		  /* 82219A84h */ case   22:  		/* cmplwi CR0, R8, 0 */
		/* 82219A84h case   22:*/		cpu::op::cmplwi<0>(regs,regs.R8,0x00000000);
		/* 82219A84h case   22:*/		return 0x82219A88;
		  /* 82219A88h */ case   23:  		/* lwz R8, <#[R31 + 4]> */
		/* 82219A88h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82219A88h case   23:*/		return 0x82219A8C;
		  /* 82219A8Ch */ case   24:  		/* rlwimi R8, R22, 18, 8, 15 */
		/* 82219A8Ch case   24:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R8,regs.R22);
		/* 82219A8Ch case   24:*/		return 0x82219A90;
		  /* 82219A90h */ case   25:  		/* stw R8, <#[R31 + 4]> */
		/* 82219A90h case   25:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82219A90h case   25:*/		return 0x82219A94;
		  /* 82219A94h */ case   26:  		/* sth R9, <#[R11 + 2]> */
		/* 82219A94h case   26:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x00000002) );
		/* 82219A94h case   26:*/		return 0x82219A98;
		  /* 82219A98h */ case   27:  		/* lwz R10, <#[R11]> */
		/* 82219A98h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82219A98h case   27:*/		return 0x82219A9C;
		  /* 82219A9Ch */ case   28:  		/* rlwimi R10, R9, 0, 10, 15 */
		/* 82219A9Ch case   28:*/		cpu::op::rlwimi<0,0,10,15>(regs,&regs.R10,regs.R9);
		/* 82219A9Ch case   28:*/		return 0x82219AA0;
		  /* 82219AA0h */ case   29:  		/* rlwimi R10, R9, 0, 8, 8 */
		/* 82219AA0h case   29:*/		cpu::op::rlwimi<0,0,8,8>(regs,&regs.R10,regs.R9);
		/* 82219AA0h case   29:*/		return 0x82219AA4;
		  /* 82219AA4h */ case   30:  		/* oris R10, R10, 64 */
		/* 82219AA4h case   30:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x40);
		/* 82219AA4h case   30:*/		return 0x82219AA8;
		  /* 82219AA8h */ case   31:  		/* stw R10, <#[R11]> */
		/* 82219AA8h case   31:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82219AA8h case   31:*/		return 0x82219AAC;
		  /* 82219AACh */ case   32:  		/* lwzu R10, <#[R11 + 4]> */
		/* 82219AACh case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82219AACh case   32:*/		return 0x82219AB0;
		  /* 82219AB0h */ case   33:  		/* and R10, R10, R12 */
		/* 82219AB0h case   33:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 82219AB0h case   33:*/		return 0x82219AB4;
		  /* 82219AB4h */ case   34:  		/* or R10, R10, R7 */
		/* 82219AB4h case   34:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 82219AB4h case   34:*/		return 0x82219AB8;
		  /* 82219AB8h */ case   35:  		/* stw R10, <#[R11]> */
		/* 82219AB8h case   35:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82219AB8h case   35:*/		return 0x82219ABC;
		  /* 82219ABCh */ case   36:  		/* addi R11, R11, 4 */
		/* 82219ABCh case   36:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82219ABCh case   36:*/		return 0x82219AC0;
		  /* 82219AC0h */ case   37:  		/* bc 12, CR0_EQ, 16 */
		/* 82219AC0h case   37:*/		if ( regs.CR[0].eq ) { return 0x82219AD0;  }
		/* 82219AC0h case   37:*/		return 0x82219AC4;
		  /* 82219AC4h */ case   38:  		/* lwz R10, <#[R30 + 12]> */
		/* 82219AC4h case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 82219AC4h case   38:*/		return 0x82219AC8;
		  /* 82219AC8h */ case   39:  		/* stw R10, <#[R11]> */
		/* 82219AC8h case   39:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82219AC8h case   39:*/		return 0x82219ACC;
		  /* 82219ACCh */ case   40:  		/* addi R11, R11, 4 */
		/* 82219ACCh case   40:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82219ACCh case   40:*/		return 0x82219AD0;
	}
	return 0x82219AD0;
} // Block from 82219A2Ch-82219AD0h (41 instructions)

//////////////////////////////////////////////////////
// Block at 82219AD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219AD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219AD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219AD0);
		  /* 82219AD0h */ case    0:  		/* li R10, 2 */
		/* 82219AD0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 82219AD0h case    0:*/		return 0x82219AD4;
		  /* 82219AD4h */ case    1:  		/* li R12, -30584 */
		/* 82219AD4h case    1:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF8888);
		/* 82219AD4h case    1:*/		return 0x82219AD8;
		  /* 82219AD8h */ case    2:  		/* sth R10, <#[R11 + 2]> */
		/* 82219AD8h case    2:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82219AD8h case    2:*/		return 0x82219ADC;
		  /* 82219ADCh */ case    3:  		/* addi R23, R23, 1 */
		/* 82219ADCh case    3:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 82219ADCh case    3:*/		return 0x82219AE0;
		  /* 82219AE0h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 82219AE0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82219AE0h case    4:*/		return 0x82219AE4;
		  /* 82219AE4h */ case    5:  		/* rlwimi R10, R19, 16, 8, 15 */
		/* 82219AE4h case    5:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R10,regs.R19);
		/* 82219AE4h case    5:*/		return 0x82219AE8;
		  /* 82219AE8h */ case    6:  		/* stw R10, <#[R11]> */
		/* 82219AE8h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82219AE8h case    6:*/		return 0x82219AEC;
		  /* 82219AECh */ case    7:  		/* stb R22, <#[R11]> */
		/* 82219AECh case    7:*/		cpu::mem::store8( regs, regs.R22, (uint32)(regs.R11 + 0x00000000) );
		/* 82219AECh case    7:*/		return 0x82219AF0;
		  /* 82219AF0h */ case    8:  		/* lwzu R10, <#[R11 + 4]> */
		/* 82219AF0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82219AF0h case    8:*/		return 0x82219AF4;
		  /* 82219AF4h */ case    9:  		/* and R10, R10, R12 */
		/* 82219AF4h case    9:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 82219AF4h case    9:*/		return 0x82219AF8;
		  /* 82219AF8h */ case   10:  		/* stw R10, <#[R11]> */
		/* 82219AF8h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82219AF8h case   10:*/		return 0x82219AFC;
		  /* 82219AFCh */ case   11:  		/* addi R31, R11, 4 */
		/* 82219AFCh case   11:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 82219AFCh case   11:*/		return 0x82219B00;
		  /* 82219B00h */ case   12:  		/* lwz R11, <#[R28]> */
		/* 82219B00h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82219B00h case   12:*/		return 0x82219B04;
		  /* 82219B04h */ case   13:  		/* li R12, -17768 */
		/* 82219B04h case   13:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFBA98);
		/* 82219B04h case   13:*/		return 0x82219B08;
		  /* 82219B08h */ case   14:  		/* sth R11, <#[R30 - 10]> */
		/* 82219B08h case   14:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0xFFFFFFF6) );
		/* 82219B08h case   14:*/		return 0x82219B0C;
		  /* 82219B0Ch */ case   15:  		/* lwz R11, <#[R29]> */
		/* 82219B0Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82219B0Ch case   15:*/		return 0x82219B10;
		  /* 82219B10h */ case   16:  		/* rlwimi R11, R22, 18, 8, 15 */
		/* 82219B10h case   16:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R11,regs.R22);
		/* 82219B10h case   16:*/		return 0x82219B14;
		  /* 82219B14h */ case   17:  		/* stw R11, <#[R29]> */
		/* 82219B14h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82219B14h case   17:*/		return 0x82219B18;
		  /* 82219B18h */ case   18:  		/* lwz R11, <#[R30]> */
		/* 82219B18h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82219B18h case   18:*/		return 0x82219B1C;
		  /* 82219B1Ch */ case   19:  		/* and R11, R11, R12 */
		/* 82219B1Ch case   19:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 82219B1Ch case   19:*/		return 0x82219B20;
		  /* 82219B20h */ case   20:  		/* ori R11, R11, 12816 */
		/* 82219B20h case   20:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x3210);
		/* 82219B20h case   20:*/		return 0x82219B24;
		  /* 82219B24h */ case   21:  		/* stw R11, <#[R30]> */
		/* 82219B24h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82219B24h case   21:*/		return 0x82219B28;
		  /* 82219B28h */ case   22:  		/* lwz R26, <#[R1 + 96]> */
		/* 82219B28h case   22:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000060) );
		/* 82219B28h case   22:*/		return 0x82219B2C;
	}
	return 0x82219B2C;
} // Block from 82219AD0h-82219B2Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 82219B2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219B2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219B2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219B2C);
		  /* 82219B2Ch */ case    0:  		/* lwz R11, <#[R30]> */
		/* 82219B2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82219B2Ch case    0:*/		return 0x82219B30;
		  /* 82219B30h */ case    1:  		/* lis R10, 8 */
		/* 82219B30h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x8);
		/* 82219B30h case    1:*/		return 0x82219B34;
		  /* 82219B34h */ case    2:  		/* rlwinm R11, R11, 0, 12, 12 */
		/* 82219B34h case    2:*/		cpu::op::rlwinm<0,0,12,12>(regs,&regs.R11,regs.R11);
		/* 82219B34h case    2:*/		return 0x82219B38;
		  /* 82219B38h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 82219B38h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82219B38h case    3:*/		return 0x82219B3C;
		  /* 82219B3Ch */ case    4:  		/* bc 4, CR6_EQ, 84 */
		/* 82219B3Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x82219B90;  }
		/* 82219B3Ch case    4:*/		return 0x82219B40;
		  /* 82219B40h */ case    5:  		/* addi R6, R30, 12 */
		/* 82219B40h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R30,0xC);
		/* 82219B40h case    5:*/		return 0x82219B44;
		  /* 82219B44h */ case    6:  		/* lwz R7, <#[R28]> */
		/* 82219B44h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R28 + 0x00000000) );
		/* 82219B44h case    6:*/		return 0x82219B48;
		  /* 82219B48h */ case    7:  		/* mr R8, R31 */
		/* 82219B48h case    7:*/		regs.R8 = regs.R31;
		/* 82219B48h case    7:*/		return 0x82219B4C;
		  /* 82219B4Ch */ case    8:  		/* mr R5, R30 */
		/* 82219B4Ch case    8:*/		regs.R5 = regs.R30;
		/* 82219B4Ch case    8:*/		return 0x82219B50;
		  /* 82219B50h */ case    9:  		/* mr R4, R29 */
		/* 82219B50h case    9:*/		regs.R4 = regs.R29;
		/* 82219B50h case    9:*/		return 0x82219B54;
		  /* 82219B54h */ case   10:  		/* mr R3, R18 */
		/* 82219B54h case   10:*/		regs.R3 = regs.R18;
		/* 82219B54h case   10:*/		return 0x82219B58;
		  /* 82219B58h */ case   11:  		/* bl -15840 */
		/* 82219B58h case   11:*/		regs.LR = 0x82219B5C; return 0x82215D78;
		/* 82219B58h case   11:*/		return 0x82219B5C;
		  /* 82219B5Ch */ case   12:  		/* lwz R11, <#[R28]> */
		/* 82219B5Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82219B5Ch case   12:*/		return 0x82219B60;
		  /* 82219B60h */ case   13:  		/* li R12, -17768 */
		/* 82219B60h case   13:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFBA98);
		/* 82219B60h case   13:*/		return 0x82219B64;
		  /* 82219B64h */ case   14:  		/* addi R23, R23, 3 */
		/* 82219B64h case   14:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x3);
		/* 82219B64h case   14:*/		return 0x82219B68;
		  /* 82219B68h */ case   15:  		/* mr R31, R3 */
		/* 82219B68h case   15:*/		regs.R31 = regs.R3;
		/* 82219B68h case   15:*/		return 0x82219B6C;
		  /* 82219B6Ch */ case   16:  		/* sth R11, <#[R30 - 10]> */
		/* 82219B6Ch case   16:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0xFFFFFFF6) );
		/* 82219B6Ch case   16:*/		return 0x82219B70;
		  /* 82219B70h */ case   17:  		/* lwz R11, <#[R29]> */
		/* 82219B70h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82219B70h case   17:*/		return 0x82219B74;
		  /* 82219B74h */ case   18:  		/* rlwimi R11, R22, 18, 8, 15 */
		/* 82219B74h case   18:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R11,regs.R22);
		/* 82219B74h case   18:*/		return 0x82219B78;
		  /* 82219B78h */ case   19:  		/* stw R11, <#[R29]> */
		/* 82219B78h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82219B78h case   19:*/		return 0x82219B7C;
		  /* 82219B7Ch */ case   20:  		/* lwz R11, <#[R30]> */
		/* 82219B7Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82219B7Ch case   20:*/		return 0x82219B80;
		  /* 82219B80h */ case   21:  		/* and R11, R11, R12 */
		/* 82219B80h case   21:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 82219B80h case   21:*/		return 0x82219B84;
		  /* 82219B84h */ case   22:  		/* ori R11, R11, 12816 */
		/* 82219B84h case   22:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x3210);
		/* 82219B84h case   22:*/		return 0x82219B88;
		  /* 82219B88h */ case   23:  		/* stw R11, <#[R30]> */
		/* 82219B88h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82219B88h case   23:*/		return 0x82219B8C;
		  /* 82219B8Ch */ case   24:  		/* lwz R26, <#[R1 + 96]> */
		/* 82219B8Ch case   24:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000060) );
		/* 82219B8Ch case   24:*/		return 0x82219B90;
	}
	return 0x82219B90;
} // Block from 82219B2Ch-82219B90h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82219B90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219B90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219B90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219B90);
		  /* 82219B90h */ case    0:  		/* lwz R27, <#[R30]> */
		/* 82219B90h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R30 + 0x00000000) );
		/* 82219B90h case    0:*/		return 0x82219B94;
		  /* 82219B94h */ case    1:  		/* rlwinm. R10, R27, 11, 29, 31 */
		/* 82219B94h case    1:*/		cpu::op::rlwinm<1,11,29,31>(regs,&regs.R10,regs.R27);
		/* 82219B94h case    1:*/		return 0x82219B98;
		  /* 82219B98h */ case    2:  		/* bc 12, CR0_EQ, 180 */
		/* 82219B98h case    2:*/		if ( regs.CR[0].eq ) { return 0x82219C4C;  }
		/* 82219B98h case    2:*/		return 0x82219B9C;
		  /* 82219B9Ch */ case    3:  		/* rlwinm R11, R26, 0, 16, 31 */
		/* 82219B9Ch case    3:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R26);
		/* 82219B9Ch case    3:*/		return 0x82219BA0;
		  /* 82219BA0h */ case    4:  		/* cmplwi CR6, R11, 93 */
		/* 82219BA0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005D);
		/* 82219BA0h case    4:*/		return 0x82219BA4;
		  /* 82219BA4h */ case    5:  		/* bc 12, CR6_EQ, 44 */
		/* 82219BA4h case    5:*/		if ( regs.CR[6].eq ) { return 0x82219BD0;  }
		/* 82219BA4h case    5:*/		return 0x82219BA8;
		  /* 82219BA8h */ case    6:  		/* cmplwi CR6, R11, 95 */
		/* 82219BA8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005F);
		/* 82219BA8h case    6:*/		return 0x82219BAC;
		  /* 82219BACh */ case    7:  		/* bc 12, CR6_EQ, 36 */
		/* 82219BACh case    7:*/		if ( regs.CR[6].eq ) { return 0x82219BD0;  }
		/* 82219BACh case    7:*/		return 0x82219BB0;
		  /* 82219BB0h */ case    8:  		/* cmplwi CR6, R11, 94 */
		/* 82219BB0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005E);
		/* 82219BB0h case    8:*/		return 0x82219BB4;
		  /* 82219BB4h */ case    9:  		/* bc 12, CR6_EQ, 28 */
		/* 82219BB4h case    9:*/		if ( regs.CR[6].eq ) { return 0x82219BD0;  }
		/* 82219BB4h case    9:*/		return 0x82219BB8;
		  /* 82219BB8h */ case   10:  		/* cmplwi CR6, R11, 96 */
		/* 82219BB8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000060);
		/* 82219BB8h case   10:*/		return 0x82219BBC;
		  /* 82219BBCh */ case   11:  		/* bc 12, CR6_EQ, 20 */
		/* 82219BBCh case   11:*/		if ( regs.CR[6].eq ) { return 0x82219BD0;  }
		/* 82219BBCh case   11:*/		return 0x82219BC0;
		  /* 82219BC0h */ case   12:  		/* cmplwi CR6, R11, 80 */
		/* 82219BC0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000050);
		/* 82219BC0h case   12:*/		return 0x82219BC4;
		  /* 82219BC4h */ case   13:  		/* bc 12, CR6_EQ, 12 */
		/* 82219BC4h case   13:*/		if ( regs.CR[6].eq ) { return 0x82219BD0;  }
		/* 82219BC4h case   13:*/		return 0x82219BC8;
		  /* 82219BC8h */ case   14:  		/* cmplwi CR6, R11, 59 */
		/* 82219BC8h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000003B);
		/* 82219BC8h case   14:*/		return 0x82219BCC;
		  /* 82219BCCh */ case   15:  		/* bc 4, CR6_EQ, 40 */
		/* 82219BCCh case   15:*/		if ( !regs.CR[6].eq ) { return 0x82219BF4;  }
		/* 82219BCCh case   15:*/		return 0x82219BD0;
	}
	return 0x82219BD0;
} // Block from 82219B90h-82219BD0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82219BD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219BD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219BD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219BD0);
		  /* 82219BD0h */ case    0:  		/* cmplwi CR6, R10, 4 */
		/* 82219BD0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 82219BD0h case    0:*/		return 0x82219BD4;
		  /* 82219BD4h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 82219BD4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82219BF4;  }
		/* 82219BD4h case    1:*/		return 0x82219BD8;
		  /* 82219BD8h */ case    2:  		/* rlwinm R5, R26, 16, 28, 31 */
		/* 82219BD8h case    2:*/		cpu::op::rlwinm<0,16,28,31>(regs,&regs.R5,regs.R26);
		/* 82219BD8h case    2:*/		return 0x82219BDC;
		  /* 82219BDCh */ case    3:  		/* lwz R3, <#[R18 + 20]> */
		/* 82219BDCh case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R18 + 0x00000014) );
		/* 82219BDCh case    3:*/		return 0x82219BE0;
		  /* 82219BE0h */ case    4:  		/* li R4, 14 */
		/* 82219BE0h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0xE);
		/* 82219BE0h case    4:*/		return 0x82219BE4;
		  /* 82219BE4h */ case    5:  		/* bl -770980 */
		/* 82219BE4h case    5:*/		regs.LR = 0x82219BE8; return 0x8215D840;
		/* 82219BE4h case    5:*/		return 0x82219BE8;
		  /* 82219BE8h */ case    6:  		/* rlwimi R27, R3, 21, 8, 10 */
		/* 82219BE8h case    6:*/		cpu::op::rlwimi<0,21,8,10>(regs,&regs.R27,regs.R3);
		/* 82219BE8h case    6:*/		return 0x82219BEC;
		  /* 82219BECh */ case    7:  		/* stw R27, <#[R30]> */
		/* 82219BECh case    7:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R30 + 0x00000000) );
		/* 82219BECh case    7:*/		return 0x82219BF0;
		  /* 82219BF0h */ case    8:  		/* lwz R26, <#[R1 + 96]> */
		/* 82219BF0h case    8:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000060) );
		/* 82219BF0h case    8:*/		return 0x82219BF4;
	}
	return 0x82219BF4;
} // Block from 82219BD0h-82219BF4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82219BF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219BF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219BF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219BF4);
		  /* 82219BF4h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 82219BF4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82219BF4h case    0:*/		return 0x82219BF8;
		  /* 82219BF8h */ case    1:  		/* rlwinm. R11, R11, 0, 8, 10 */
		/* 82219BF8h case    1:*/		cpu::op::rlwinm<1,0,8,10>(regs,&regs.R11,regs.R11);
		/* 82219BF8h case    1:*/		return 0x82219BFC;
		  /* 82219BFCh */ case    2:  		/* bc 12, CR0_EQ, 80 */
		/* 82219BFCh case    2:*/		if ( regs.CR[0].eq ) { return 0x82219C4C;  }
		/* 82219BFCh case    2:*/		return 0x82219C00;
		  /* 82219C00h */ case    3:  		/* addi R5, R30, 12 */
		/* 82219C00h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R30,0xC);
		/* 82219C00h case    3:*/		return 0x82219C04;
		  /* 82219C04h */ case    4:  		/* lwz R6, <#[R28]> */
		/* 82219C04h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R28 + 0x00000000) );
		/* 82219C04h case    4:*/		return 0x82219C08;
		  /* 82219C08h */ case    5:  		/* mr R7, R31 */
		/* 82219C08h case    5:*/		regs.R7 = regs.R31;
		/* 82219C08h case    5:*/		return 0x82219C0C;
		  /* 82219C0Ch */ case    6:  		/* mr R4, R30 */
		/* 82219C0Ch case    6:*/		regs.R4 = regs.R30;
		/* 82219C0Ch case    6:*/		return 0x82219C10;
		  /* 82219C10h */ case    7:  		/* mr R3, R29 */
		/* 82219C10h case    7:*/		regs.R3 = regs.R29;
		/* 82219C10h case    7:*/		return 0x82219C14;
		  /* 82219C14h */ case    8:  		/* bl -15388 */
		/* 82219C14h case    8:*/		regs.LR = 0x82219C18; return 0x82215FF8;
		/* 82219C14h case    8:*/		return 0x82219C18;
		  /* 82219C18h */ case    9:  		/* lwz R11, <#[R28]> */
		/* 82219C18h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82219C18h case    9:*/		return 0x82219C1C;
		  /* 82219C1Ch */ case   10:  		/* li R12, -17768 */
		/* 82219C1Ch case   10:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFBA98);
		/* 82219C1Ch case   10:*/		return 0x82219C20;
		  /* 82219C20h */ case   11:  		/* addi R23, R23, 3 */
		/* 82219C20h case   11:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x3);
		/* 82219C20h case   11:*/		return 0x82219C24;
		  /* 82219C24h */ case   12:  		/* mr R31, R3 */
		/* 82219C24h case   12:*/		regs.R31 = regs.R3;
		/* 82219C24h case   12:*/		return 0x82219C28;
		  /* 82219C28h */ case   13:  		/* sth R11, <#[R30 - 10]> */
		/* 82219C28h case   13:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0xFFFFFFF6) );
		/* 82219C28h case   13:*/		return 0x82219C2C;
		  /* 82219C2Ch */ case   14:  		/* lwz R11, <#[R29]> */
		/* 82219C2Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82219C2Ch case   14:*/		return 0x82219C30;
		  /* 82219C30h */ case   15:  		/* rlwimi R11, R22, 18, 8, 15 */
		/* 82219C30h case   15:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R11,regs.R22);
		/* 82219C30h case   15:*/		return 0x82219C34;
		  /* 82219C34h */ case   16:  		/* stw R11, <#[R29]> */
		/* 82219C34h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82219C34h case   16:*/		return 0x82219C38;
		  /* 82219C38h */ case   17:  		/* lwz R11, <#[R30]> */
		/* 82219C38h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82219C38h case   17:*/		return 0x82219C3C;
		  /* 82219C3Ch */ case   18:  		/* and R11, R11, R12 */
		/* 82219C3Ch case   18:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 82219C3Ch case   18:*/		return 0x82219C40;
	}
	return 0x82219C40;
} // Block from 82219BF4h-82219C40h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82219C40h
// Function '?DoVtxFogLinear@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAT21@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219C40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219C40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219C40);
		  /* 82219C40h */ case    0:  		/* ori R11, R11, 12816 */
		/* 82219C40h case    0:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x3210);
		/* 82219C40h case    0:*/		return 0x82219C44;
		  /* 82219C44h */ case    1:  		/* stw R11, <#[R30]> */
		/* 82219C44h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82219C44h case    1:*/		return 0x82219C48;
		  /* 82219C48h */ case    2:  		/* lwz R26, <#[R1 + 96]> */
		/* 82219C48h case    2:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000060) );
		/* 82219C48h case    2:*/		return 0x82219C4C;
	}
	return 0x82219C4C;
} // Block from 82219C40h-82219C4Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82219C4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219C4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219C4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219C4C);
		  /* 82219C4Ch */ case    0:  		/* lwz R11, <#[R30]> */
		/* 82219C4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82219C4Ch case    0:*/		return 0x82219C50;
		  /* 82219C50h */ case    1:  		/* lis R10, 16 */
		/* 82219C50h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x10);
		/* 82219C50h case    1:*/		return 0x82219C54;
		  /* 82219C54h */ case    2:  		/* rlwinm R11, R11, 0, 11, 11 */
		/* 82219C54h case    2:*/		cpu::op::rlwinm<0,0,11,11>(regs,&regs.R11,regs.R11);
		/* 82219C54h case    2:*/		return 0x82219C58;
		  /* 82219C58h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 82219C58h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82219C58h case    3:*/		return 0x82219C5C;
		  /* 82219C5Ch */ case    4:  		/* bc 4, CR6_EQ, 224 */
		/* 82219C5Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x82219D3C;  }
		/* 82219C5Ch case    4:*/		return 0x82219C60;
		  /* 82219C60h */ case    5:  		/* lwz R10, <#[R28]> */
		/* 82219C60h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 82219C60h case    5:*/		return 0x82219C64;
		  /* 82219C64h */ case    6:  		/* addi R11, R31, 4 */
		/* 82219C64h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 82219C64h case    6:*/		return 0x82219C68;
		  /* 82219C68h */ case    7:  		/* sth R19, <#[R31 + 2]> */
		/* 82219C68h case    7:*/		cpu::mem::store16( regs, regs.R19, (uint32)(regs.R31 + 0x00000002) );
		/* 82219C68h case    7:*/		return 0x82219C6C;
		  /* 82219C6Ch */ case    8:  		/* li R9, 0 */
		/* 82219C6Ch case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82219C6Ch case    8:*/		return 0x82219C70;
		  /* 82219C70h */ case    9:  		/* lwz R8, <#[R31]> */
		/* 82219C70h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 82219C70h case    9:*/		return 0x82219C74;
		  /* 82219C74h */ case   10:  		/* rlwinm R8, R8, 0, 16, 2 */
		/* 82219C74h case   10:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R8,regs.R8);
		/* 82219C74h case   10:*/		return 0x82219C78;
		  /* 82219C78h */ case   11:  		/* stw R8, <#[R31]> */
		/* 82219C78h case   11:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 82219C78h case   11:*/		return 0x82219C7C;
		  /* 82219C7Ch */ case   12:  		/* add R8, R25, R28 */
		/* 82219C7Ch case   12:*/		cpu::op::add<0>(regs,&regs.R8,regs.R25,regs.R28);
		/* 82219C7Ch case   12:*/		return 0x82219C80;
		  /* 82219C80h */ case   13:  		/* sth R10, <#[R31 + 6]> */
		/* 82219C80h case   13:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R31 + 0x00000006) );
		/* 82219C80h case   13:*/		return 0x82219C84;
		  /* 82219C84h */ case   14:  		/* lwz R10, <#[R31 + 4]> */
		/* 82219C84h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82219C84h case   14:*/		return 0x82219C88;
		  /* 82219C88h */ case   15:  		/* rlwimi R10, R22, 18, 8, 15 */
		/* 82219C88h case   15:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R22);
		/* 82219C88h case   15:*/		return 0x82219C8C;
		  /* 82219C8Ch */ case   16:  		/* stw R10, <#[R31 + 4]> */
		/* 82219C8Ch case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82219C8Ch case   16:*/		return 0x82219C90;
		  /* 82219C90h */ case   17:  		/* addi R31, R11, 4 */
		/* 82219C90h case   17:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 82219C90h case   17:*/		return 0x82219C94;
		  /* 82219C94h */ case   18:  		/* lwz R10, <#[R29]> */
		/* 82219C94h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 82219C94h case   18:*/		return 0x82219C98;
		  /* 82219C98h */ case   19:  		/* cmplwi CR6, R9, 1 */
		/* 82219C98h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000001);
		/* 82219C98h case   19:*/		return 0x82219C9C;
		  /* 82219C9Ch */ case   20:  		/* lwz R7, <#[R30]> */
		/* 82219C9Ch case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000000) );
		/* 82219C9Ch case   20:*/		return 0x82219CA0;
		  /* 82219CA0h */ case   21:  		/* mr R6, R10 */
		/* 82219CA0h case   21:*/		regs.R6 = regs.R10;
		/* 82219CA0h case   21:*/		return 0x82219CA4;
		  /* 82219CA4h */ case   22:  		/* mr R11, R7 */
		/* 82219CA4h case   22:*/		regs.R11 = regs.R7;
		/* 82219CA4h case   22:*/		return 0x82219CA8;
		  /* 82219CA8h */ case   23:  		/* mr R5, R7 */
		/* 82219CA8h case   23:*/		regs.R5 = regs.R7;
		/* 82219CA8h case   23:*/		return 0x82219CAC;
		  /* 82219CACh */ case   24:  		/* sth R10, <#[R31 + 2]> */
		/* 82219CACh case   24:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R31 + 0x00000002) );
		/* 82219CACh case   24:*/		return 0x82219CB0;
		  /* 82219CB0h */ case   25:  		/* lwz R4, <#[R31]> */
		/* 82219CB0h case   25:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82219CB0h case   25:*/		return 0x82219CB4;
		  /* 82219CB4h */ case   26:  		/* rlwimi R6, R4, 0, 16, 7 */
		/* 82219CB4h case   26:*/		cpu::op::rlwimi<0,0,16,7>(regs,&regs.R6,regs.R4);
		/* 82219CB4h case   26:*/		return 0x82219CB8;
		  /* 82219CB8h */ case   27:  		/* rlwimi R6, R4, 0, 9, 9 */
		/* 82219CB8h case   27:*/		cpu::op::rlwimi<0,0,9,9>(regs,&regs.R6,regs.R4);
		/* 82219CB8h case   27:*/		return 0x82219CBC;
		  /* 82219CBCh */ case   28:  		/* oris R6, R6, 64 */
		/* 82219CBCh case   28:*/		cpu::op::oris<0>(regs,&regs.R6,regs.R6,0x40);
		/* 82219CBCh case   28:*/		return 0x82219CC0;
		  /* 82219CC0h */ case   29:  		/* stw R6, <#[R31]> */
		/* 82219CC0h case   29:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R31 + 0x00000000) );
		/* 82219CC0h case   29:*/		return 0x82219CC4;
		  /* 82219CC4h */ case   30:  		/* lwzu R6, <#[R31 + 4]> */
		/* 82219CC4h case   30:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82219CC4h case   30:*/		return 0x82219CC8;
		  /* 82219CC8h */ case   31:  		/* rlwimi R11, R6, 0, 0, 24 */
		/* 82219CC8h case   31:*/		cpu::op::rlwimi<0,0,0,24>(regs,&regs.R11,regs.R6);
		/* 82219CC8h case   31:*/		return 0x82219CCC;
		  /* 82219CCCh */ case   32:  		/* rlwimi R11, R6, 0, 28, 28 */
		/* 82219CCCh case   32:*/		cpu::op::rlwimi<0,0,28,28>(regs,&regs.R11,regs.R6);
		/* 82219CCCh case   32:*/		return 0x82219CD0;
		  /* 82219CD0h */ case   33:  		/* rlwimi R5, R11, 0, 24, 20 */
		/* 82219CD0h case   33:*/		cpu::op::rlwimi<0,0,24,20>(regs,&regs.R5,regs.R11);
		/* 82219CD0h case   33:*/		return 0x82219CD4;
		  /* 82219CD4h */ case   34:  		/* stw R11, <#[R31]> */
		/* 82219CD4h case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82219CD4h case   34:*/		return 0x82219CD8;
		  /* 82219CD8h */ case   35:  		/* mr R11, R5 */
		/* 82219CD8h case   35:*/		regs.R11 = regs.R5;
		/* 82219CD8h case   35:*/		return 0x82219CDC;
		  /* 82219CDCh */ case   36:  		/* stw R5, <#[R31]> */
		/* 82219CDCh case   36:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R31 + 0x00000000) );
		/* 82219CDCh case   36:*/		return 0x82219CE0;
		  /* 82219CE0h */ case   37:  		/* rlwimi R11, R7, 0, 17, 19 */
		/* 82219CE0h case   37:*/		cpu::op::rlwimi<0,0,17,19>(regs,&regs.R11,regs.R7);
		/* 82219CE0h case   37:*/		return 0x82219CE4;
		  /* 82219CE4h */ case   38:  		/* stw R11, <#[R31]> */
		/* 82219CE4h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82219CE4h case   38:*/		return 0x82219CE8;
		  /* 82219CE8h */ case   39:  		/* bc 4, CR6_EQ, 12 */
		/* 82219CE8h case   39:*/		if ( !regs.CR[6].eq ) { return 0x82219CF4;  }
		/* 82219CE8h case   39:*/		return 0x82219CEC;
		  /* 82219CECh */ case   40:  		/* ori R11, R11, 34952 */
		/* 82219CECh case   40:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x8888);
		/* 82219CECh case   40:*/		return 0x82219CF0;
		  /* 82219CF0h */ case   41:  		/* stw R11, <#[R31]> */
		/* 82219CF0h case   41:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82219CF0h case   41:*/		return 0x82219CF4;
	}
	return 0x82219CF4;
} // Block from 82219C4Ch-82219CF4h (42 instructions)

//////////////////////////////////////////////////////
// Block at 82219CF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219CF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219CF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219CF4);
		  /* 82219CF4h */ case    0:  		/* rlwinm. R11, R10, 0, 8, 8 */
		/* 82219CF4h case    0:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R10);
		/* 82219CF4h case    0:*/		return 0x82219CF8;
		  /* 82219CF8h */ case    1:  		/* addi R31, R31, 4 */
		/* 82219CF8h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82219CF8h case    1:*/		return 0x82219CFC;
		  /* 82219CFCh */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 82219CFCh case    2:*/		if ( regs.CR[0].eq ) { return 0x82219D10;  }
		/* 82219CFCh case    2:*/		return 0x82219D00;
		  /* 82219D00h */ case    3:  		/* addi R11, R1, 136 */
		/* 82219D00h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x88);
		/* 82219D00h case    3:*/		return 0x82219D04;
		  /* 82219D04h */ case    4:  		/* lwzx R11, <#[R8 + R11]> */
		/* 82219D04h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 82219D04h case    4:*/		return 0x82219D08;
		  /* 82219D08h */ case    5:  		/* stw R11, <#[R31]> */
		/* 82219D08h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82219D08h case    5:*/		return 0x82219D0C;
		  /* 82219D0Ch */ case    6:  		/* addi R31, R31, 4 */
		/* 82219D0Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82219D0Ch case    6:*/		return 0x82219D10;
	}
	return 0x82219D10;
} // Block from 82219CF4h-82219D10h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82219D10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219D10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219D10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219D10);
		  /* 82219D10h */ case    0:  		/* addi R9, R9, 1 */
		/* 82219D10h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82219D10h case    0:*/		return 0x82219D14;
		  /* 82219D14h */ case    1:  		/* cmplwi CR6, R9, 2 */
		/* 82219D14h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000002);
		/* 82219D14h case    1:*/		return 0x82219D18;
		  /* 82219D18h */ case    2:  		/* bc 12, CR6_LT, -132 */
		/* 82219D18h case    2:*/		if ( regs.CR[6].lt ) { return 0x82219C94;  }
		/* 82219D18h case    2:*/		return 0x82219D1C;
		  /* 82219D1Ch */ case    3:  		/* lwz R11, <#[R28]> */
		/* 82219D1Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82219D1Ch case    3:*/		return 0x82219D20;
		  /* 82219D20h */ case    4:  		/* addi R23, R23, 1 */
		/* 82219D20h case    4:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 82219D20h case    4:*/		return 0x82219D24;
		  /* 82219D24h */ case    5:  		/* sth R11, <#[R30 - 10]> */
		/* 82219D24h case    5:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0xFFFFFFF6) );
		/* 82219D24h case    5:*/		return 0x82219D28;
		  /* 82219D28h */ case    6:  		/* lwz R11, <#[R29]> */
		/* 82219D28h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82219D28h case    6:*/		return 0x82219D2C;
		  /* 82219D2Ch */ case    7:  		/* rlwimi R11, R22, 18, 8, 15 */
		/* 82219D2Ch case    7:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R11,regs.R22);
		/* 82219D2Ch case    7:*/		return 0x82219D30;
		  /* 82219D30h */ case    8:  		/* stw R11, <#[R29]> */
		/* 82219D30h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82219D30h case    8:*/		return 0x82219D34;
		  /* 82219D34h */ case    9:  		/* stw R17, <#[R30]> */
		/* 82219D34h case    9:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R30 + 0x00000000) );
		/* 82219D34h case    9:*/		return 0x82219D38;
		  /* 82219D38h */ case   10:  		/* lwz R26, <#[R1 + 96]> */
		/* 82219D38h case   10:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000060) );
		/* 82219D38h case   10:*/		return 0x82219D3C;
	}
	return 0x82219D3C;
} // Block from 82219D10h-82219D3Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82219D3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219D3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219D3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219D3C);
		  /* 82219D3Ch */ case    0:  		/* lwz R11, <#[R30]> */
		/* 82219D3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82219D3Ch case    0:*/		return 0x82219D40;
		  /* 82219D40h */ case    1:  		/* rlwinm R10, R11, 0, 28, 28 */
		/* 82219D40h case    1:*/		cpu::op::rlwinm<0,0,28,28>(regs,&regs.R10,regs.R11);
		/* 82219D40h case    1:*/		return 0x82219D44;
		  /* 82219D44h */ case    2:  		/* cmplwi CR6, R10, 8 */
		/* 82219D44h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000008);
		/* 82219D44h case    2:*/		return 0x82219D48;
		  /* 82219D48h */ case    3:  		/* bc 12, CR6_EQ, 40 */
		/* 82219D48h case    3:*/		if ( regs.CR[6].eq ) { return 0x82219D70;  }
		/* 82219D48h case    3:*/		return 0x82219D4C;
		  /* 82219D4Ch */ case    4:  		/* rlwinm R10, R11, 0, 24, 24 */
		/* 82219D4Ch case    4:*/		cpu::op::rlwinm<0,0,24,24>(regs,&regs.R10,regs.R11);
		/* 82219D4Ch case    4:*/		return 0x82219D50;
		  /* 82219D50h */ case    5:  		/* cmplwi CR6, R10, 128 */
		/* 82219D50h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000080);
		/* 82219D50h case    5:*/		return 0x82219D54;
		  /* 82219D54h */ case    6:  		/* bc 12, CR6_EQ, 28 */
		/* 82219D54h case    6:*/		if ( regs.CR[6].eq ) { return 0x82219D70;  }
		/* 82219D54h case    6:*/		return 0x82219D58;
		  /* 82219D58h */ case    7:  		/* rlwinm R10, R11, 0, 20, 20 */
		/* 82219D58h case    7:*/		cpu::op::rlwinm<0,0,20,20>(regs,&regs.R10,regs.R11);
		/* 82219D58h case    7:*/		return 0x82219D5C;
		  /* 82219D5Ch */ case    8:  		/* cmplwi CR6, R10, 2048 */
		/* 82219D5Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000800);
		/* 82219D5Ch case    8:*/		return 0x82219D60;
		  /* 82219D60h */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 82219D60h case    9:*/		if ( regs.CR[6].eq ) { return 0x82219D70;  }
		/* 82219D60h case    9:*/		return 0x82219D64;
		  /* 82219D64h */ case   10:  		/* rlwinm R11, R11, 0, 16, 16 */
		/* 82219D64h case   10:*/		cpu::op::rlwinm<0,0,16,16>(regs,&regs.R11,regs.R11);
		/* 82219D64h case   10:*/		return 0x82219D68;
		  /* 82219D68h */ case   11:  		/* cmplwi CR6, R11, 32768 */
		/* 82219D68h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00008000);
		/* 82219D68h case   11:*/		return 0x82219D6C;
		  /* 82219D6Ch */ case   12:  		/* bc 4, CR6_EQ, 36 */
		/* 82219D6Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x82219D90;  }
		/* 82219D6Ch case   12:*/		return 0x82219D70;
	}
	return 0x82219D70;
} // Block from 82219D3Ch-82219D70h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82219D70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219D70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219D70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219D70);
		  /* 82219D70h */ case    0:  		/* mr R7, R31 */
		/* 82219D70h case    0:*/		regs.R7 = regs.R31;
		/* 82219D70h case    0:*/		return 0x82219D74;
		  /* 82219D74h */ case    1:  		/* lwz R6, <#[R28]> */
		/* 82219D74h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R28 + 0x00000000) );
		/* 82219D74h case    1:*/		return 0x82219D78;
		  /* 82219D78h */ case    2:  		/* addi R5, R30, 12 */
		/* 82219D78h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R30,0xC);
		/* 82219D78h case    2:*/		return 0x82219D7C;
		  /* 82219D7Ch */ case    3:  		/* mr R4, R30 */
		/* 82219D7Ch case    3:*/		regs.R4 = regs.R30;
		/* 82219D7Ch case    3:*/		return 0x82219D80;
		  /* 82219D80h */ case    4:  		/* mr R3, R29 */
		/* 82219D80h case    4:*/		regs.R3 = regs.R29;
		/* 82219D80h case    4:*/		return 0x82219D84;
		  /* 82219D84h */ case    5:  		/* bl -14844 */
		/* 82219D84h case    5:*/		regs.LR = 0x82219D88; return 0x82216388;
		/* 82219D84h case    5:*/		return 0x82219D88;
		  /* 82219D88h */ case    6:  		/* addi R23, R23, 1 */
		/* 82219D88h case    6:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 82219D88h case    6:*/		return 0x82219D8C;
		  /* 82219D8Ch */ case    7:  		/* mr R31, R3 */
		/* 82219D8Ch case    7:*/		regs.R31 = regs.R3;
		/* 82219D8Ch case    7:*/		return 0x82219D90;
	}
	return 0x82219D90;
} // Block from 82219D70h-82219D90h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82219D90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219D90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219D90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219D90);
		  /* 82219D90h */ case    0:  		/* addic. R21, R21, -1 */
		/* 82219D90h case    0:*/		cpu::op::addic<1>(regs,&regs.R21,regs.R21,0xFFFFFFFF);
		/* 82219D90h case    0:*/		return 0x82219D94;
		  /* 82219D94h */ case    1:  		/* addi R28, R28, 4 */
		/* 82219D94h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 82219D94h case    1:*/		return 0x82219D98;
		  /* 82219D98h */ case    2:  		/* addi R30, R30, 4 */
		/* 82219D98h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82219D98h case    2:*/		return 0x82219D9C;
		  /* 82219D9Ch */ case    3:  		/* bc 4, CR0_EQ, -1368 */
		/* 82219D9Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x82219844;  }
		/* 82219D9Ch case    3:*/		return 0x82219DA0;
		  /* 82219DA0h */ case    4:  		/* b 288 */
		/* 82219DA0h case    4:*/		return 0x82219EC0;
		/* 82219DA0h case    4:*/		return 0x82219DA4;
	}
	return 0x82219DA4;
} // Block from 82219D90h-82219DA4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82219DA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219DA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219DA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219DA4);
		  /* 82219DA4h */ case    0:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 82219DA4h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 82219DA4h case    0:*/		return 0x82219DA8;
		  /* 82219DA8h */ case    1:  		/* bc 12, CR0_EQ, 292 */
		/* 82219DA8h case    1:*/		if ( regs.CR[0].eq ) { return 0x82219ECC;  }
		/* 82219DA8h case    1:*/		return 0x82219DAC;
		  /* 82219DACh */ case    2:  		/* cmplwi CR6, R21, 0 */
		/* 82219DACh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 82219DACh case    2:*/		return 0x82219DB0;
		  /* 82219DB0h */ case    3:  		/* bc 12, CR6_EQ, 284 */
		/* 82219DB0h case    3:*/		if ( regs.CR[6].eq ) { return 0x82219ECC;  }
		/* 82219DB0h case    3:*/		return 0x82219DB4;
		  /* 82219DB4h */ case    4:  		/* lwz R11, <#[R1 + 84]> */
		/* 82219DB4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82219DB4h case    4:*/		return 0x82219DB8;
		  /* 82219DB8h */ case    5:  		/* addi R30, R1, 112 */
		/* 82219DB8h case    5:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x70);
		/* 82219DB8h case    5:*/		return 0x82219DBC;
		  /* 82219DBCh */ case    6:  		/* addi R29, R11, 23212 */
		/* 82219DBCh case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x5AAC);
		/* 82219DBCh case    6:*/		return 0x82219DC0;
		  /* 82219DC0h */ case    7:  		/* subfic R24, R11, -23212 */
		/* 82219DC0h case    7:*/		cpu::op::subfic<0>(regs,&regs.R24,regs.R11,0xFFFFA554);
		/* 82219DC0h case    7:*/		return 0x82219DC4;
		  /* 82219DC4h */ case    8:  		/* lis R11, -32252 */
		/* 82219DC4h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82219DC4h case    8:*/		return 0x82219DC8;
		  /* 82219DC8h */ case    9:  		/* addi R20, R11, -5976 */
		/* 82219DC8h case    9:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R11,0xFFFFE8A8);
		/* 82219DC8h case    9:*/		return 0x82219DCC;
		  /* 82219DCCh */ case   10:  		/* lhz R11, <#[R30]> */
		/* 82219DCCh case   10:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82219DCCh case   10:*/		return 0x82219DD0;
		  /* 82219DD0h */ case   11:  		/* rlwinm R11, R11, 0, 26, 31 */
		/* 82219DD0h case   11:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R11,regs.R11);
		/* 82219DD0h case   11:*/		return 0x82219DD4;
		  /* 82219DD4h */ case   12:  		/* cmplwi CR6, R11, 1 */
		/* 82219DD4h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82219DD4h case   12:*/		return 0x82219DD8;
		  /* 82219DD8h */ case   13:  		/* bc 4, CR6_EQ, 212 */
		/* 82219DD8h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82219EAC;  }
		/* 82219DD8h case   13:*/		return 0x82219DDC;
		  /* 82219DDCh */ case   14:  		/* lwz R9, <#[R30]> */
		/* 82219DDCh case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 82219DDCh case   14:*/		return 0x82219DE0;
		  /* 82219DE0h */ case   15:  		/* addi R11, R31, 4 */
		/* 82219DE0h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 82219DE0h case   15:*/		return 0x82219DE4;
		  /* 82219DE4h */ case   16:  		/* lwz R10, <#[R29]> */
		/* 82219DE4h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 82219DE4h case   16:*/		return 0x82219DE8;
		  /* 82219DE8h */ case   17:  		/* add R28, R29, R24 */
		/* 82219DE8h case   17:*/		cpu::op::add<0>(regs,&regs.R28,regs.R29,regs.R24);
		/* 82219DE8h case   17:*/		return 0x82219DEC;
		  /* 82219DECh */ case   18:  		/* sth R19, <#[R31 + 2]> */
		/* 82219DECh case   18:*/		cpu::mem::store16( regs, regs.R19, (uint32)(regs.R31 + 0x00000002) );
		/* 82219DECh case   18:*/		return 0x82219DF0;
		  /* 82219DF0h */ case   19:  		/* rlwinm R25, R9, 9, 31, 31 */
		/* 82219DF0h case   19:*/		cpu::op::rlwinm<0,9,31,31>(regs,&regs.R25,regs.R9);
		/* 82219DF0h case   19:*/		return 0x82219DF4;
		  /* 82219DF4h */ case   20:  		/* lwz R9, <#[R31]> */
		/* 82219DF4h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82219DF4h case   20:*/		return 0x82219DF8;
		  /* 82219DF8h */ case   21:  		/* rlwinm R9, R9, 0, 16, 2 */
		/* 82219DF8h case   21:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R9,regs.R9);
		/* 82219DF8h case   21:*/		return 0x82219DFC;
		  /* 82219DFCh */ case   22:  		/* stw R9, <#[R31]> */
		/* 82219DFCh case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82219DFCh case   22:*/		return 0x82219E00;
		  /* 82219E00h */ case   23:  		/* li R26, 2 */
		/* 82219E00h case   23:*/		cpu::op::li<0>(regs,&regs.R26,0x2);
		/* 82219E00h case   23:*/		return 0x82219E04;
		  /* 82219E04h */ case   24:  		/* sth R10, <#[R31 + 6]> */
		/* 82219E04h case   24:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R31 + 0x00000006) );
		/* 82219E04h case   24:*/		return 0x82219E08;
		  /* 82219E08h */ case   25:  		/* lwz R10, <#[R31 + 4]> */
		/* 82219E08h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82219E08h case   25:*/		return 0x82219E0C;
		  /* 82219E0Ch */ case   26:  		/* rlwimi R10, R22, 18, 8, 15 */
		/* 82219E0Ch case   26:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R22);
		/* 82219E0Ch case   26:*/		return 0x82219E10;
		  /* 82219E10h */ case   27:  		/* stw R10, <#[R31 + 4]> */
		/* 82219E10h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82219E10h case   27:*/		return 0x82219E14;
		  /* 82219E14h */ case   28:  		/* addi R31, R11, 4 */
		/* 82219E14h case   28:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 82219E14h case   28:*/		return 0x82219E18;
		  /* 82219E18h */ case   29:  		/* lwz R27, <#[R30]> */
		/* 82219E18h case   29:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R30 + 0x00000000) );
		/* 82219E18h case   29:*/		return 0x82219E1C;
		  /* 82219E1Ch */ case   30:  		/* lis R11, 1 */
		/* 82219E1Ch case   30:*/		cpu::op::lis<0>(regs,&regs.R11,0x1);
		/* 82219E1Ch case   30:*/		return 0x82219E20;
		  /* 82219E20h */ case   31:  		/* rlwinm R10, R27, 0, 10, 15 */
		/* 82219E20h case   31:*/		cpu::op::rlwinm<0,0,10,15>(regs,&regs.R10,regs.R27);
		/* 82219E20h case   31:*/		return 0x82219E24;
		  /* 82219E24h */ case   32:  		/* cmplw CR6, R10, R11 */
		/* 82219E24h case   32:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82219E24h case   32:*/		return 0x82219E28;
		  /* 82219E28h */ case   33:  		/* bc 12, CR6_EQ, 28 */
		/* 82219E28h case   33:*/		if ( regs.CR[6].eq ) { return 0x82219E44;  }
		/* 82219E28h case   33:*/		return 0x82219E2C;
		  /* 82219E2Ch */ case   34:  		/* mr R6, R15 */
		/* 82219E2Ch case   34:*/		regs.R6 = regs.R15;
		/* 82219E2Ch case   34:*/		return 0x82219E30;
		  /* 82219E30h */ case   35:  		/* mr R5, R20 */
		/* 82219E30h case   35:*/		regs.R5 = regs.R20;
		/* 82219E30h case   35:*/		return 0x82219E34;
		  /* 82219E34h */ case   36:  		/* mr R4, R16 */
		/* 82219E34h case   36:*/		regs.R4 = regs.R16;
		/* 82219E34h case   36:*/		return 0x82219E38;
		  /* 82219E38h */ case   37:  		/* li R7, 9724 */
		/* 82219E38h case   37:*/		cpu::op::li<0>(regs,&regs.R7,0x25FC);
		/* 82219E38h case   37:*/		return 0x82219E3C;
		  /* 82219E3Ch */ case   38:  		/* li R3, 0 */
		/* 82219E3Ch case   38:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82219E3Ch case   38:*/		return 0x82219E40;
		  /* 82219E40h */ case   39:  		/* bl -795192 */
		/* 82219E40h case   39:*/		regs.LR = 0x82219E44; return 0x82157C08;
		/* 82219E40h case   39:*/		return 0x82219E44;
	}
	return 0x82219E44;
} // Block from 82219DA4h-82219E44h (40 instructions)

//////////////////////////////////////////////////////
// Block at 82219E44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219E44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219E44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219E44);
		  /* 82219E44h */ case    0:  		/* sth R27, <#[R31 + 2]> */
		/* 82219E44h case    0:*/		cpu::mem::store16( regs, regs.R27, (uint32)(regs.R31 + 0x00000002) );
		/* 82219E44h case    0:*/		return 0x82219E48;
		  /* 82219E48h */ case    1:  		/* rlwinm. R10, R27, 0, 9, 9 */
		/* 82219E48h case    1:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R27);
		/* 82219E48h case    1:*/		return 0x82219E4C;
		  /* 82219E4Ch */ case    2:  		/* lwz R11, <#[R31]> */
		/* 82219E4Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82219E4Ch case    2:*/		return 0x82219E50;
		  /* 82219E50h */ case    3:  		/* rlwimi R11, R27, 0, 8, 15 */
		/* 82219E50h case    3:*/		cpu::op::rlwimi<0,0,8,15>(regs,&regs.R11,regs.R27);
		/* 82219E50h case    3:*/		return 0x82219E54;
		  /* 82219E54h */ case    4:  		/* stw R11, <#[R31]> */
		/* 82219E54h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82219E54h case    4:*/		return 0x82219E58;
		  /* 82219E58h */ case    5:  		/* addi R31, R31, 4 */
		/* 82219E58h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82219E58h case    5:*/		return 0x82219E5C;
		  /* 82219E5Ch */ case    6:  		/* bc 12, CR0_EQ, 20 */
		/* 82219E5Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x82219E70;  }
		/* 82219E5Ch case    6:*/		return 0x82219E60;
		  /* 82219E60h */ case    7:  		/* addi R11, R1, 124 */
		/* 82219E60h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x7C);
		/* 82219E60h case    7:*/		return 0x82219E64;
		  /* 82219E64h */ case    8:  		/* lwzx R11, <#[R28 + R11]> */
		/* 82219E64h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 82219E64h case    8:*/		return 0x82219E68;
		  /* 82219E68h */ case    9:  		/* stw R11, <#[R31]> */
		/* 82219E68h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82219E68h case    9:*/		return 0x82219E6C;
		  /* 82219E6Ch */ case   10:  		/* addi R31, R31, 4 */
		/* 82219E6Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82219E6Ch case   10:*/		return 0x82219E70;
	}
	return 0x82219E70;
} // Block from 82219E44h-82219E70h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82219E70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219E70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219E70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219E70);
		  /* 82219E70h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 82219E70h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82219E70h case    0:*/		return 0x82219E74;
		  /* 82219E74h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 82219E74h case    1:*/		if ( regs.CR[6].eq ) { return 0x82219E88;  }
		/* 82219E74h case    1:*/		return 0x82219E78;
		  /* 82219E78h */ case    2:  		/* addi R11, R1, 136 */
		/* 82219E78h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x88);
		/* 82219E78h case    2:*/		return 0x82219E7C;
		  /* 82219E7Ch */ case    3:  		/* lwzx R11, <#[R28 + R11]> */
		/* 82219E7Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 82219E7Ch case    3:*/		return 0x82219E80;
		  /* 82219E80h */ case    4:  		/* stw R11, <#[R31]> */
		/* 82219E80h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82219E80h case    4:*/		return 0x82219E84;
		  /* 82219E84h */ case    5:  		/* addi R31, R31, 4 */
		/* 82219E84h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82219E84h case    5:*/		return 0x82219E88;
	}
	return 0x82219E88;
} // Block from 82219E70h-82219E88h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82219E88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219E88);
		  /* 82219E88h */ case    0:  		/* addic. R26, R26, -1 */
		/* 82219E88h case    0:*/		cpu::op::addic<1>(regs,&regs.R26,regs.R26,0xFFFFFFFF);
		/* 82219E88h case    0:*/		return 0x82219E8C;
		  /* 82219E8Ch */ case    1:  		/* bc 4, CR0_EQ, -116 */
		/* 82219E8Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x82219E18;  }
		/* 82219E8Ch case    1:*/		return 0x82219E90;
		  /* 82219E90h */ case    2:  		/* lwz R11, <#[R29]> */
		/* 82219E90h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82219E90h case    2:*/		return 0x82219E94;
		  /* 82219E94h */ case    3:  		/* addi R23, R23, 1 */
		/* 82219E94h case    3:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 82219E94h case    3:*/		return 0x82219E98;
		  /* 82219E98h */ case    4:  		/* sth R11, <#[R30 + 2]> */
		/* 82219E98h case    4:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0x00000002) );
		/* 82219E98h case    4:*/		return 0x82219E9C;
		  /* 82219E9Ch */ case    5:  		/* lwz R11, <#[R30]> */
		/* 82219E9Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82219E9Ch case    5:*/		return 0x82219EA0;
		  /* 82219EA0h */ case    6:  		/* rlwimi R11, R22, 18, 8, 15 */
		/* 82219EA0h case    6:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R11,regs.R22);
		/* 82219EA0h case    6:*/		return 0x82219EA4;
		  /* 82219EA4h */ case    7:  		/* stw R11, <#[R30]> */
		/* 82219EA4h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82219EA4h case    7:*/		return 0x82219EA8;
		  /* 82219EA8h */ case    8:  		/* stw R17, <#[R30 + 12]> */
		/* 82219EA8h case    8:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R30 + 0x0000000C) );
		/* 82219EA8h case    8:*/		return 0x82219EAC;
	}
	return 0x82219EAC;
} // Block from 82219E88h-82219EACh (9 instructions)

//////////////////////////////////////////////////////
// Block at 82219EACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219EAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219EAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219EAC);
		  /* 82219EACh */ case    0:  		/* addic. R21, R21, -1 */
		/* 82219EACh case    0:*/		cpu::op::addic<1>(regs,&regs.R21,regs.R21,0xFFFFFFFF);
		/* 82219EACh case    0:*/		return 0x82219EB0;
		  /* 82219EB0h */ case    1:  		/* addi R29, R29, 4 */
		/* 82219EB0h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82219EB0h case    1:*/		return 0x82219EB4;
		  /* 82219EB4h */ case    2:  		/* addi R30, R30, 4 */
		/* 82219EB4h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82219EB4h case    2:*/		return 0x82219EB8;
		  /* 82219EB8h */ case    3:  		/* bc 4, CR0_EQ, -236 */
		/* 82219EB8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82219DCC;  }
		/* 82219EB8h case    3:*/		return 0x82219EBC;
		  /* 82219EBCh */ case    4:  		/* lwz R26, <#[R1 + 96]> */
		/* 82219EBCh case    4:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000060) );
		/* 82219EBCh case    4:*/		return 0x82219EC0;
	}
	return 0x82219EC0;
} // Block from 82219EACh-82219EC0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82219EC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219EC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219EC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219EC0);
		  /* 82219EC0h */ case    0:  		/* lwz R30, <#[R1 + 100]> */
		/* 82219EC0h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 82219EC0h case    0:*/		return 0x82219EC4;
		  /* 82219EC4h */ case    1:  		/* lwz R29, <#[R1 + 112]> */
		/* 82219EC4h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000070) );
		/* 82219EC4h case    1:*/		return 0x82219EC8;
		  /* 82219EC8h */ case    2:  		/* stw R23, <#[R1 + 80]> */
		/* 82219EC8h case    2:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R1 + 0x00000050) );
		/* 82219EC8h case    2:*/		return 0x82219ECC;
	}
	return 0x82219ECC;
} // Block from 82219EC0h-82219ECCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82219ECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219ECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219ECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219ECC);
		  /* 82219ECCh */ case    0:  		/* rlwinm R11, R26, 0, 16, 31 */
		/* 82219ECCh case    0:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R26);
		/* 82219ECCh case    0:*/		return 0x82219ED0;
		  /* 82219ED0h */ case    1:  		/* addi R10, R11, -1 */
		/* 82219ED0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 82219ED0h case    1:*/		return 0x82219ED4;
		  /* 82219ED4h */ case    2:  		/* cmplwi CR6, R10, 96 */
		/* 82219ED4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000060);
		/* 82219ED4h case    2:*/		return 0x82219ED8;
		  /* 82219ED8h */ case    3:  		/* bc 12, CR6_GT, 1732 */
		/* 82219ED8h case    3:*/		if ( regs.CR[6].gt ) { return 0x8221A59C;  }
		/* 82219ED8h case    3:*/		return 0x82219EDC;
		  /* 82219EDCh */ case    4:  		/* lis R12, -32252 */
		/* 82219EDCh case    4:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8204);
		/* 82219EDCh case    4:*/		return 0x82219EE0;
		  /* 82219EE0h */ case    5:  		/* rlwinm R0, R10, 1, 0, 30 */
		/* 82219EE0h case    5:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R0,regs.R10);
		/* 82219EE0h case    5:*/		return 0x82219EE4;
		  /* 82219EE4h */ case    6:  		/* addi R12, R12, -6984 */
		/* 82219EE4h case    6:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFE4B8);
		/* 82219EE4h case    6:*/		return 0x82219EE8;
		  /* 82219EE8h */ case    7:  		/* lhzx R0, <#[R12 + R0]> */
		/* 82219EE8h case    7:*/		cpu::mem::load16z( regs, &regs.R0, (uint32)(regs.R12 + regs.R0 + 0x00000000) );
		/* 82219EE8h case    7:*/		return 0x82219EEC;
		  /* 82219EECh */ case    8:  		/* lis R12, -32222 */
		/* 82219EECh case    8:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8222);
		/* 82219EECh case    8:*/		return 0x82219EF0;
		  /* 82219EF0h */ case    9:  		/* addi R12, R12, -24828 */
		/* 82219EF0h case    9:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFF9F04);
		/* 82219EF0h case    9:*/		return 0x82219EF4;
		  /* 82219EF4h */ case   10:  		/* ori R0, R0, 0 */
		/* 82219EF4h case   10:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 82219EF4h case   10:*/		return 0x82219EF8;
		  /* 82219EF8h */ case   11:  		/* add R12, R12, R0 */
		/* 82219EF8h case   11:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 82219EF8h case   11:*/		return 0x82219EFC;
		  /* 82219EFCh */ case   12:  		/* mtspr CTR, R12 */
		/* 82219EFCh case   12:*/		regs.CTR = regs.R12;
		/* 82219EFCh case   12:*/		return 0x82219F00;
		  /* 82219F00h */ case   13:  		/* bcctr 20, CR0_LT */
		/* 82219F00h case   13:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 82219F00h case   13:*/		return 0x82219F04;
		  /* 82219F04h */ case   14:  		/* li R7, 13303 */
		/* 82219F04h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x33F7);
		/* 82219F04h case   14:*/		return 0x82219F08;
		  /* 82219F08h */ case   15:  		/* mr R4, R16 */
		/* 82219F08h case   15:*/		regs.R4 = regs.R16;
		/* 82219F08h case   15:*/		return 0x82219F0C;
		  /* 82219F0Ch */ case   16:  		/* mr R5, R14 */
		/* 82219F0Ch case   16:*/		regs.R5 = regs.R14;
		/* 82219F0Ch case   16:*/		return 0x82219F10;
		  /* 82219F10h */ case   17:  		/* mr R6, R15 */
		/* 82219F10h case   17:*/		regs.R6 = regs.R15;
		/* 82219F10h case   17:*/		return 0x82219F14;
		  /* 82219F14h */ case   18:  		/* li R3, 0 */
		/* 82219F14h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82219F14h case   18:*/		return 0x82219F18;
		  /* 82219F18h */ case   19:  		/* bl -795408 */
		/* 82219F18h case   19:*/		regs.LR = 0x82219F1C; return 0x82157C08;
		/* 82219F18h case   19:*/		return 0x82219F1C;
		  /* 82219F1Ch */ case   20:  		/* b 1816 */
		/* 82219F1Ch case   20:*/		return 0x8221A634;
		/* 82219F1Ch case   20:*/		return 0x82219F20;
		  /* 82219F20h */ case   21:  		/* mr R5, R31 */
		/* 82219F20h case   21:*/		regs.R5 = regs.R31;
		/* 82219F20h case   21:*/		return 0x82219F24;
		  /* 82219F24h */ case   22:  		/* addi R4, R1, 96 */
		/* 82219F24h case   22:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 82219F24h case   22:*/		return 0x82219F28;
		  /* 82219F28h */ case   23:  		/* mr R3, R18 */
		/* 82219F28h case   23:*/		regs.R3 = regs.R18;
		/* 82219F28h case   23:*/		return 0x82219F2C;
		  /* 82219F2Ch */ case   24:  		/* bl -21972 */
		/* 82219F2Ch case   24:*/		regs.LR = 0x82219F30; return 0x82214958;
		/* 82219F2Ch case   24:*/		return 0x82219F30;
		  /* 82219F30h */ case   25:  		/* mr R31, R3 */
		/* 82219F30h case   25:*/		regs.R31 = regs.R3;
		/* 82219F30h case   25:*/		return 0x82219F34;
		  /* 82219F34h */ case   26:  		/* addi R23, R23, 2 */
		/* 82219F34h case   26:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x2);
		/* 82219F34h case   26:*/		return 0x82219F38;
		  /* 82219F38h */ case   27:  		/* b 1788 */
		/* 82219F38h case   27:*/		return 0x8221A634;
		/* 82219F38h case   27:*/		return 0x82219F3C;
		  /* 82219F3Ch */ case   28:  		/* li R10, 110 */
		/* 82219F3Ch case   28:*/		cpu::op::li<0>(regs,&regs.R10,0x6E);
		/* 82219F3Ch case   28:*/		return 0x82219F40;
		  /* 82219F40h */ case   29:  		/* lwz R9, <#[R18 + 28]> */
		/* 82219F40h case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R18 + 0x0000001C) );
		/* 82219F40h case   29:*/		return 0x82219F44;
		  /* 82219F44h */ case   30:  		/* addi R11, R31, 8 */
		/* 82219F44h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x8);
		/* 82219F44h case   30:*/		return 0x82219F48;
		  /* 82219F48h */ case   31:  		/* sth R10, <#[R31 + 2]> */
		/* 82219F48h case   31:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R31 + 0x00000002) );
		/* 82219F48h case   31:*/		return 0x82219F4C;
		  /* 82219F4Ch */ case   32:  		/* lwz R10, <#[R31]> */
		/* 82219F4Ch case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82219F4Ch case   32:*/		return 0x82219F50;
		  /* 82219F50h */ case   33:  		/* rlwinm R10, R10, 0, 16, 2 */
		/* 82219F50h case   33:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R10,regs.R10);
		/* 82219F50h case   33:*/		return 0x82219F54;
		  /* 82219F54h */ case   34:  		/* stw R10, <#[R31]> */
		/* 82219F54h case   34:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82219F54h case   34:*/		return 0x82219F58;
		  /* 82219F58h */ case   35:  		/* lwz R10, <#[R9 + 23360]> */
		/* 82219F58h case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00005B40) );
		/* 82219F58h case   35:*/		return 0x82219F5C;
		  /* 82219F5Ch */ case   36:  		/* sth R10, <#[R31 + 6]> */
		/* 82219F5Ch case   36:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R31 + 0x00000006) );
		/* 82219F5Ch case   36:*/		return 0x82219F60;
		  /* 82219F60h */ case   37:  		/* lwz R10, <#[R31 + 4]> */
		/* 82219F60h case   37:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82219F60h case   37:*/		return 0x82219F64;
		  /* 82219F64h */ case   38:  		/* rlwimi R10, R22, 18, 8, 15 */
		/* 82219F64h case   38:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R22);
		/* 82219F64h case   38:*/		return 0x82219F68;
		  /* 82219F68h */ case   39:  		/* stw R10, <#[R31 + 4]> */
		/* 82219F68h case   39:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82219F68h case   39:*/		return 0x82219F6C;
		  /* 82219F6Ch */ case   40:  		/* lwz R10, <#[R9 + 23360]> */
		/* 82219F6Ch case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00005B40) );
		/* 82219F6Ch case   40:*/		return 0x82219F70;
	}
	return 0x82219F70;
} // Block from 82219ECCh-82219F70h (41 instructions)

//////////////////////////////////////////////////////
// Block at 82219F70h
// Function '?AssembleAluMacro@XGRAPHICS@@YAPATIL_Token@1@PAU_XLT_CONTEXT@1@PAT21@1PAII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82219F70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82219F70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82219F70);
		  /* 82219F70h */ case    0:  		/* sth R10, <#[R31 + 10]> */
		/* 82219F70h case    0:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R31 + 0x0000000A) );
		/* 82219F70h case    0:*/		return 0x82219F74;
		  /* 82219F74h */ case    1:  		/* lwz R10, <#[R31 + 8]> */
		/* 82219F74h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82219F74h case    1:*/		return 0x82219F78;
		  /* 82219F78h */ case    2:  		/* rlwimi R10, R22, 18, 8, 15 */
		/* 82219F78h case    2:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R22);
		/* 82219F78h case    2:*/		return 0x82219F7C;
		  /* 82219F7Ch */ case    3:  		/* stw R10, <#[R31 + 8]> */
		/* 82219F7Ch case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82219F7Ch case    3:*/		return 0x82219F80;
		  /* 82219F80h */ case    4:  		/* addi R31, R11, 4 */
		/* 82219F80h case    4:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 82219F80h case    4:*/		return 0x82219F84;
		  /* 82219F84h */ case    5:  		/* b 1708 */
		/* 82219F84h case    5:*/		return 0x8221A630;
		/* 82219F84h case    5:*/		return 0x82219F88;
		  /* 82219F88h */ case    6:  		/* li R10, 111 */
		/* 82219F88h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x6F);
		/* 82219F88h case    6:*/		return 0x82219F8C;
		  /* 82219F8Ch */ case    7:  		/* b -76 */
		/* 82219F8Ch case    7:*/		return 0x82219F40;
		/* 82219F8Ch case    7:*/		return 0x82219F90;
		  /* 82219F90h */ case    8:  		/* lwz R29, <#[R18 + 28]> */
		/* 82219F90h case    8:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R18 + 0x0000001C) );
		/* 82219F90h case    8:*/		return 0x82219F94;
		  /* 82219F94h */ case    9:  		/* li R10, 17 */
		/* 82219F94h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x11);
		/* 82219F94h case    9:*/		return 0x82219F98;
		  /* 82219F98h */ case   10:  		/* sth R19, <#[R31 + 2]> */
		/* 82219F98h case   10:*/		cpu::mem::store16( regs, regs.R19, (uint32)(regs.R31 + 0x00000002) );
		/* 82219F98h case   10:*/		return 0x82219F9C;
		  /* 82219F9Ch */ case   11:  		/* addi R30, R31, 4 */
		/* 82219F9Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x4);
		/* 82219F9Ch case   11:*/		return 0x82219FA0;
		  /* 82219FA0h */ case   12:  		/* rlwinm R11, R26, 16, 19, 31 */
		/* 82219FA0h case   12:*/		cpu::op::rlwinm<0,16,19,31>(regs,&regs.R11,regs.R26);
		/* 82219FA0h case   12:*/		return 0x82219FA4;
		  /* 82219FA4h */ case   13:  		/* li R9, 0 */
		/* 82219FA4h case   13:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82219FA4h case   13:*/		return 0x82219FA8;
		  /* 82219FA8h */ case   14:  		/* cmplwi CR6, R11, 1 */
		/* 82219FA8h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82219FA8h case   14:*/		return 0x82219FAC;
		  /* 82219FACh */ case   15:  		/* lwz R8, <#[R31]> */
		/* 82219FACh case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 82219FACh case   15:*/		return 0x82219FB0;
		  /* 82219FB0h */ case   16:  		/* rlwinm R8, R8, 0, 16, 2 */
		/* 82219FB0h case   16:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R8,regs.R8);
		/* 82219FB0h case   16:*/		return 0x82219FB4;
		  /* 82219FB4h */ case   17:  		/* stw R8, <#[R31]> */
		/* 82219FB4h case   17:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 82219FB4h case   17:*/		return 0x82219FB8;
		  /* 82219FB8h */ case   18:  		/* lwz R8, <#[R29 + 23364]> */
		/* 82219FB8h case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00005B44) );
		/* 82219FB8h case   18:*/		return 0x82219FBC;
		  /* 82219FBCh */ case   19:  		/* sth R8, <#[R31 + 6]> */
		/* 82219FBCh case   19:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R31 + 0x00000006) );
		/* 82219FBCh case   19:*/		return 0x82219FC0;
		  /* 82219FC0h */ case   20:  		/* lwz R8, <#[R31 + 4]> */
		/* 82219FC0h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82219FC0h case   20:*/		return 0x82219FC4;
		  /* 82219FC4h */ case   21:  		/* rlwimi R8, R10, 18, 8, 15 */
		/* 82219FC4h case   21:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R8,regs.R10);
		/* 82219FC4h case   21:*/		return 0x82219FC8;
		  /* 82219FC8h */ case   22:  		/* stw R8, <#[R31 + 4]> */
		/* 82219FC8h case   22:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 82219FC8h case   22:*/		return 0x82219FCC;
		  /* 82219FCCh */ case   23:  		/* stwu R9, <#[R30 + 4]> */
		/* 82219FCCh case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82219FCCh case   23:*/		return 0x82219FD0;
		  /* 82219FD0h */ case   24:  		/* bc 12, CR6_EQ, 92 */
		/* 82219FD0h case   24:*/		if ( regs.CR[6].eq ) { return 0x8221A02C;  }
		/* 82219FD0h case   24:*/		return 0x82219FD4;
		  /* 82219FD4h */ case   25:  		/* cmplwi CR6, R11, 2 */
		/* 82219FD4h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 82219FD4h case   25:*/		return 0x82219FD8;
		  /* 82219FD8h */ case   26:  		/* bc 12, CR6_EQ, 72 */
		/* 82219FD8h case   26:*/		if ( regs.CR[6].eq ) { return 0x8221A020;  }
		/* 82219FD8h case   26:*/		return 0x82219FDC;
		  /* 82219FDCh */ case   27:  		/* cmplwi CR6, R11, 3 */
		/* 82219FDCh case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82219FDCh case   27:*/		return 0x82219FE0;
		  /* 82219FE0h */ case   28:  		/* bc 12, CR6_EQ, 56 */
		/* 82219FE0h case   28:*/		if ( regs.CR[6].eq ) { return 0x8221A018;  }
		/* 82219FE0h case   28:*/		return 0x82219FE4;
		  /* 82219FE4h */ case   29:  		/* cmplwi CR6, R11, 4 */
		/* 82219FE4h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 82219FE4h case   29:*/		return 0x82219FE8;
		  /* 82219FE8h */ case   30:  		/* bc 12, CR6_EQ, 40 */
		/* 82219FE8h case   30:*/		if ( regs.CR[6].eq ) { return 0x8221A010;  }
		/* 82219FE8h case   30:*/		return 0x82219FEC;
		  /* 82219FECh */ case   31:  		/* mr R6, R15 */
		/* 82219FECh case   31:*/		regs.R6 = regs.R15;
		/* 82219FECh case   31:*/		return 0x82219FF0;
		  /* 82219FF0h */ case   32:  		/* mr R5, R14 */
		/* 82219FF0h case   32:*/		regs.R5 = regs.R14;
		/* 82219FF0h case   32:*/		return 0x82219FF4;
		  /* 82219FF4h */ case   33:  		/* mr R4, R16 */
		/* 82219FF4h case   33:*/		regs.R4 = regs.R16;
		/* 82219FF4h case   33:*/		return 0x82219FF8;
		  /* 82219FF8h */ case   34:  		/* li R7, 8003 */
		/* 82219FF8h case   34:*/		cpu::op::li<0>(regs,&regs.R7,0x1F43);
		/* 82219FF8h case   34:*/		return 0x82219FFC;
		  /* 82219FFCh */ case   35:  		/* li R3, 0 */
		/* 82219FFCh case   35:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82219FFCh case   35:*/		return 0x8221A000;
		  /* 8221A000h */ case   36:  		/* bl -795640 */
		/* 8221A000h case   36:*/		regs.LR = 0x8221A004; return 0x82157C08;
		/* 8221A000h case   36:*/		return 0x8221A004;
		  /* 8221A004h */ case   37:  		/* lwz R11, <#[R30]> */
		/* 8221A004h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8221A004h case   37:*/		return 0x8221A008;
		  /* 8221A008h */ case   38:  		/* rlwimi R11, R22, 0, 30, 31 */
		/* 8221A008h case   38:*/		cpu::op::rlwimi<0,0,30,31>(regs,&regs.R11,regs.R22);
		/* 8221A008h case   38:*/		return 0x8221A00C;
		  /* 8221A00Ch */ case   39:  		/* b 24 */
		/* 8221A00Ch case   39:*/		return 0x8221A024;
		/* 8221A00Ch case   39:*/		return 0x8221A010;
	}
	return 0x8221A010;
} // Block from 82219F70h-8221A010h (40 instructions)

//////////////////////////////////////////////////////
// Block at 8221A010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A010);
		  /* 8221A010h */ case    0:  		/* li R11, 64 */
		/* 8221A010h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x40);
		/* 8221A010h case    0:*/		return 0x8221A014;
		  /* 8221A014h */ case    1:  		/* b 16 */
		/* 8221A014h case    1:*/		return 0x8221A024;
		/* 8221A014h case    1:*/		return 0x8221A018;
	}
	return 0x8221A018;
} // Block from 8221A010h-8221A018h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221A018h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A018);
		  /* 8221A018h */ case    0:  		/* li R11, 16 */
		/* 8221A018h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x10);
		/* 8221A018h case    0:*/		return 0x8221A01C;
		  /* 8221A01Ch */ case    1:  		/* b 8 */
		/* 8221A01Ch case    1:*/		return 0x8221A024;
		/* 8221A01Ch case    1:*/		return 0x8221A020;
	}
	return 0x8221A020;
} // Block from 8221A018h-8221A020h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221A020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A020);
		  /* 8221A020h */ case    0:  		/* li R11, 4 */
		/* 8221A020h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 8221A020h case    0:*/		return 0x8221A024;
	}
	return 0x8221A024;
} // Block from 8221A020h-8221A024h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221A024h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A024( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A024) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A024);
		  /* 8221A024h */ case    0:  		/* stw R11, <#[R30]> */
		/* 8221A024h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8221A024h case    0:*/		return 0x8221A028;
		  /* 8221A028h */ case    1:  		/* b 8 */
		/* 8221A028h case    1:*/		return 0x8221A030;
		/* 8221A028h case    1:*/		return 0x8221A02C;
	}
	return 0x8221A02C;
} // Block from 8221A024h-8221A02Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221A02Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A02C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A02C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A02C);
		  /* 8221A02Ch */ case    0:  		/* stw R22, <#[R30]> */
		/* 8221A02Ch case    0:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R30 + 0x00000000) );
		/* 8221A02Ch case    0:*/		return 0x8221A030;
	}
	return 0x8221A030;
} // Block from 8221A02Ch-8221A030h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221A030h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A030);
		  /* 8221A030h */ case    0:  		/* lwz R10, <#[R29 + 23360]> */
		/* 8221A030h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00005B40) );
		/* 8221A030h case    0:*/		return 0x8221A034;
		  /* 8221A034h */ case    1:  		/* addi R11, R30, 4 */
		/* 8221A034h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 8221A034h case    1:*/		return 0x8221A038;
		  /* 8221A038h */ case    2:  		/* addi R11, R11, 4 */
		/* 8221A038h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221A038h case    2:*/		return 0x8221A03C;
		  /* 8221A03Ch */ case    3:  		/* sth R10, <#[R30 + 6]> */
		/* 8221A03Ch case    3:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R30 + 0x00000006) );
		/* 8221A03Ch case    3:*/		return 0x8221A040;
		  /* 8221A040h */ case    4:  		/* lwz R10, <#[R30 + 4]> */
		/* 8221A040h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 8221A040h case    4:*/		return 0x8221A044;
		  /* 8221A044h */ case    5:  		/* rlwimi R10, R22, 18, 8, 15 */
		/* 8221A044h case    5:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R22);
		/* 8221A044h case    5:*/		return 0x8221A048;
		  /* 8221A048h */ case    6:  		/* stw R10, <#[R30 + 4]> */
		/* 8221A048h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 8221A048h case    6:*/		return 0x8221A04C;
		  /* 8221A04Ch */ case    7:  		/* lwz R10, <#[R29 + 23360]> */
		/* 8221A04Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00005B40) );
		/* 8221A04Ch case    7:*/		return 0x8221A050;
		  /* 8221A050h */ case    8:  		/* sth R10, <#[R11 + 2]> */
		/* 8221A050h case    8:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 8221A050h case    8:*/		return 0x8221A054;
		  /* 8221A054h */ case    9:  		/* lwz R10, <#[R11]> */
		/* 8221A054h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A054h case    9:*/		return 0x8221A058;
		  /* 8221A058h */ case   10:  		/* rlwimi R10, R22, 18, 8, 15 */
		/* 8221A058h case   10:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R22);
		/* 8221A058h case   10:*/		return 0x8221A05C;
		  /* 8221A05Ch */ case   11:  		/* addi R31, R11, 4 */
		/* 8221A05Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 8221A05Ch case   11:*/		return 0x8221A060;
		  /* 8221A060h */ case   12:  		/* stw R10, <#[R11]> */
		/* 8221A060h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A060h case   12:*/		return 0x8221A064;
		  /* 8221A064h */ case   13:  		/* b 1484 */
		/* 8221A064h case   13:*/		return 0x8221A630;
		/* 8221A064h case   13:*/		return 0x8221A068;
		  /* 8221A068h */ case   14:  		/* li R10, 112 */
		/* 8221A068h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x70);
		/* 8221A068h case   14:*/		return 0x8221A06C;
		  /* 8221A06Ch */ case   15:  		/* b -300 */
		/* 8221A06Ch case   15:*/		return 0x82219F40;
		/* 8221A06Ch case   15:*/		return 0x8221A070;
		  /* 8221A070h */ case   16:  		/* mr R5, R31 */
		/* 8221A070h case   16:*/		regs.R5 = regs.R31;
		/* 8221A070h case   16:*/		return 0x8221A074;
		  /* 8221A074h */ case   17:  		/* addi R4, R1, 96 */
		/* 8221A074h case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8221A074h case   17:*/		return 0x8221A078;
		  /* 8221A078h */ case   18:  		/* mr R3, R18 */
		/* 8221A078h case   18:*/		regs.R3 = regs.R18;
		/* 8221A078h case   18:*/		return 0x8221A07C;
		  /* 8221A07Ch */ case   19:  		/* bl -21796 */
		/* 8221A07Ch case   19:*/		regs.LR = 0x8221A080; return 0x82214B58;
		/* 8221A07Ch case   19:*/		return 0x8221A080;
		  /* 8221A080h */ case   20:  		/* mr R31, R3 */
		/* 8221A080h case   20:*/		regs.R31 = regs.R3;
		/* 8221A080h case   20:*/		return 0x8221A084;
		  /* 8221A084h */ case   21:  		/* addi R23, R23, 4 */
		/* 8221A084h case   21:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x4);
		/* 8221A084h case   21:*/		return 0x8221A088;
		  /* 8221A088h */ case   22:  		/* b 1452 */
		/* 8221A088h case   22:*/		return 0x8221A634;
		/* 8221A088h case   22:*/		return 0x8221A08C;
		  /* 8221A08Ch */ case   23:  		/* mr R5, R31 */
		/* 8221A08Ch case   23:*/		regs.R5 = regs.R31;
		/* 8221A08Ch case   23:*/		return 0x8221A090;
		  /* 8221A090h */ case   24:  		/* addi R4, R1, 96 */
		/* 8221A090h case   24:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8221A090h case   24:*/		return 0x8221A094;
		  /* 8221A094h */ case   25:  		/* mr R3, R18 */
		/* 8221A094h case   25:*/		regs.R3 = regs.R18;
		/* 8221A094h case   25:*/		return 0x8221A098;
		  /* 8221A098h */ case   26:  		/* bl -21168 */
		/* 8221A098h case   26:*/		regs.LR = 0x8221A09C; return 0x82214DE8;
		/* 8221A098h case   26:*/		return 0x8221A09C;
		  /* 8221A09Ch */ case   27:  		/* mr R31, R3 */
		/* 8221A09Ch case   27:*/		regs.R31 = regs.R3;
		/* 8221A09Ch case   27:*/		return 0x8221A0A0;
		  /* 8221A0A0h */ case   28:  		/* b 1424 */
		/* 8221A0A0h case   28:*/		return 0x8221A630;
		/* 8221A0A0h case   28:*/		return 0x8221A0A4;
		  /* 8221A0A4h */ case   29:  		/* addi R6, R1, 80 */
		/* 8221A0A4h case   29:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8221A0A4h case   29:*/		return 0x8221A0A8;
		  /* 8221A0A8h */ case   30:  		/* mr R5, R31 */
		/* 8221A0A8h case   30:*/		regs.R5 = regs.R31;
		/* 8221A0A8h case   30:*/		return 0x8221A0AC;
		  /* 8221A0ACh */ case   31:  		/* addi R4, R1, 96 */
		/* 8221A0ACh case   31:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8221A0ACh case   31:*/		return 0x8221A0B0;
		  /* 8221A0B0h */ case   32:  		/* mr R3, R18 */
		/* 8221A0B0h case   32:*/		regs.R3 = regs.R18;
		/* 8221A0B0h case   32:*/		return 0x8221A0B4;
		  /* 8221A0B4h */ case   33:  		/* bl -13228 */
		/* 8221A0B4h case   33:*/		regs.LR = 0x8221A0B8; return 0x82216D08;
		/* 8221A0B4h case   33:*/		return 0x8221A0B8;
		  /* 8221A0B8h */ case   34:  		/* lwz R23, <#[R1 + 80]> */
		/* 8221A0B8h case   34:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000050) );
		/* 8221A0B8h case   34:*/		return 0x8221A0BC;
		  /* 8221A0BCh */ case   35:  		/* mr R31, R3 */
		/* 8221A0BCh case   35:*/		regs.R31 = regs.R3;
		/* 8221A0BCh case   35:*/		return 0x8221A0C0;
		  /* 8221A0C0h */ case   36:  		/* b 1396 */
		/* 8221A0C0h case   36:*/		return 0x8221A634;
		/* 8221A0C0h case   36:*/		return 0x8221A0C4;
		  /* 8221A0C4h */ case   37:  		/* addi R6, R1, 80 */
		/* 8221A0C4h case   37:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8221A0C4h case   37:*/		return 0x8221A0C8;
		  /* 8221A0C8h */ case   38:  		/* mr R5, R31 */
		/* 8221A0C8h case   38:*/		regs.R5 = regs.R31;
		/* 8221A0C8h case   38:*/		return 0x8221A0CC;
		  /* 8221A0CCh */ case   39:  		/* addi R4, R1, 96 */
		/* 8221A0CCh case   39:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8221A0CCh case   39:*/		return 0x8221A0D0;
		  /* 8221A0D0h */ case   40:  		/* mr R3, R18 */
		/* 8221A0D0h case   40:*/		regs.R3 = regs.R18;
		/* 8221A0D0h case   40:*/		return 0x8221A0D4;
		  /* 8221A0D4h */ case   41:  		/* bl -5692 */
		/* 8221A0D4h case   41:*/		regs.LR = 0x8221A0D8; return 0x82218A98;
		/* 8221A0D4h case   41:*/		return 0x8221A0D8;
		  /* 8221A0D8h */ case   42:  		/* b -32 */
		/* 8221A0D8h case   42:*/		return 0x8221A0B8;
		/* 8221A0D8h case   42:*/		return 0x8221A0DC;
		  /* 8221A0DCh */ case   43:  		/* addi R6, R1, 80 */
		/* 8221A0DCh case   43:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8221A0DCh case   43:*/		return 0x8221A0E0;
		  /* 8221A0E0h */ case   44:  		/* mr R5, R31 */
		/* 8221A0E0h case   44:*/		regs.R5 = regs.R31;
		/* 8221A0E0h case   44:*/		return 0x8221A0E4;
		  /* 8221A0E4h */ case   45:  		/* addi R4, R1, 96 */
		/* 8221A0E4h case   45:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8221A0E4h case   45:*/		return 0x8221A0E8;
		  /* 8221A0E8h */ case   46:  		/* mr R3, R18 */
		/* 8221A0E8h case   46:*/		regs.R3 = regs.R18;
		/* 8221A0E8h case   46:*/		return 0x8221A0EC;
		  /* 8221A0ECh */ case   47:  		/* bl -18996 */
		/* 8221A0ECh case   47:*/		regs.LR = 0x8221A0F0; return 0x822156B8;
		/* 8221A0ECh case   47:*/		return 0x8221A0F0;
		  /* 8221A0F0h */ case   48:  		/* b -56 */
		/* 8221A0F0h case   48:*/		return 0x8221A0B8;
		/* 8221A0F0h case   48:*/		return 0x8221A0F4;
		  /* 8221A0F4h */ case   49:  		/* mr R4, R31 */
		/* 8221A0F4h case   49:*/		regs.R4 = regs.R31;
		/* 8221A0F4h case   49:*/		return 0x8221A0F8;
		  /* 8221A0F8h */ case   50:  		/* addi R3, R1, 96 */
		/* 8221A0F8h case   50:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 8221A0F8h case   50:*/		return 0x8221A0FC;
		  /* 8221A0FCh */ case   51:  		/* bl -39524 */
		/* 8221A0FCh case   51:*/		regs.LR = 0x8221A100; return 0x82210698;
		/* 8221A0FCh case   51:*/		return 0x8221A100;
		  /* 8221A100h */ case   52:  		/* b -100 */
		/* 8221A100h case   52:*/		return 0x8221A09C;
		/* 8221A100h case   52:*/		return 0x8221A104;
		  /* 8221A104h */ case   53:  		/* mr R5, R31 */
		/* 8221A104h case   53:*/		regs.R5 = regs.R31;
		/* 8221A104h case   53:*/		return 0x8221A108;
		  /* 8221A108h */ case   54:  		/* addi R4, R1, 96 */
		/* 8221A108h case   54:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8221A108h case   54:*/		return 0x8221A10C;
		  /* 8221A10Ch */ case   55:  		/* mr R3, R18 */
		/* 8221A10Ch case   55:*/		regs.R3 = regs.R18;
		/* 8221A10Ch case   55:*/		return 0x8221A110;
		  /* 8221A110h */ case   56:  		/* bl -39128 */
		/* 8221A110h case   56:*/		regs.LR = 0x8221A114; return 0x82210838;
		/* 8221A110h case   56:*/		return 0x8221A114;
		  /* 8221A114h */ case   57:  		/* b -484 */
		/* 8221A114h case   57:*/		return 0x82219F30;
		/* 8221A114h case   57:*/		return 0x8221A118;
		  /* 8221A118h */ case   58:  		/* mr R5, R31 */
		/* 8221A118h case   58:*/		regs.R5 = regs.R31;
		/* 8221A118h case   58:*/		return 0x8221A11C;
		  /* 8221A11Ch */ case   59:  		/* lwz R6, <#[R1 + 148]> */
		/* 8221A11Ch case   59:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000094) );
		/* 8221A11Ch case   59:*/		return 0x8221A120;
		  /* 8221A120h */ case   60:  		/* addi R4, R1, 96 */
		/* 8221A120h case   60:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8221A120h case   60:*/		return 0x8221A124;
		  /* 8221A124h */ case   61:  		/* mr R3, R18 */
		/* 8221A124h case   61:*/		regs.R3 = regs.R18;
		/* 8221A124h case   61:*/		return 0x8221A128;
		  /* 8221A128h */ case   62:  		/* bl -6784 */
		/* 8221A128h case   62:*/		regs.LR = 0x8221A12C; return 0x822186A8;
		/* 8221A128h case   62:*/		return 0x8221A12C;
		  /* 8221A12Ch */ case   63:  		/* mr R31, R3 */
		/* 8221A12Ch case   63:*/		regs.R31 = regs.R3;
		/* 8221A12Ch case   63:*/		return 0x8221A130;
		  /* 8221A130h */ case   64:  		/* addi R23, R23, 5 */
		/* 8221A130h case   64:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x5);
		/* 8221A130h case   64:*/		return 0x8221A134;
		  /* 8221A134h */ case   65:  		/* b 1280 */
		/* 8221A134h case   65:*/		return 0x8221A634;
		/* 8221A134h case   65:*/		return 0x8221A138;
		  /* 8221A138h */ case   66:  		/* mr R5, R31 */
		/* 8221A138h case   66:*/		regs.R5 = regs.R31;
		/* 8221A138h case   66:*/		return 0x8221A13C;
		  /* 8221A13Ch */ case   67:  		/* addi R4, R1, 96 */
		/* 8221A13Ch case   67:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8221A13Ch case   67:*/		return 0x8221A140;
		  /* 8221A140h */ case   68:  		/* mr R3, R18 */
		/* 8221A140h case   68:*/		regs.R3 = regs.R18;
		/* 8221A140h case   68:*/		return 0x8221A144;
		  /* 8221A144h */ case   69:  		/* bl -38236 */
		/* 8221A144h case   69:*/		regs.LR = 0x8221A148; return 0x82210BE8;
		/* 8221A144h case   69:*/		return 0x8221A148;
		  /* 8221A148h */ case   70:  		/* b -536 */
		/* 8221A148h case   70:*/		return 0x82219F30;
		/* 8221A148h case   70:*/		return 0x8221A14C;
		  /* 8221A14Ch */ case   71:  		/* mr R5, R31 */
		/* 8221A14Ch case   71:*/		regs.R5 = regs.R31;
		/* 8221A14Ch case   71:*/		return 0x8221A150;
		  /* 8221A150h */ case   72:  		/* addi R4, R1, 96 */
		/* 8221A150h case   72:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8221A150h case   72:*/		return 0x8221A154;
		  /* 8221A154h */ case   73:  		/* mr R3, R18 */
		/* 8221A154h case   73:*/		regs.R3 = regs.R18;
		/* 8221A154h case   73:*/		return 0x8221A158;
		  /* 8221A158h */ case   74:  		/* bl -37280 */
		/* 8221A158h case   74:*/		regs.LR = 0x8221A15C; return 0x82210FB8;
		/* 8221A158h case   74:*/		return 0x8221A15C;
		  /* 8221A15Ch */ case   75:  		/* b -48 */
		/* 8221A15Ch case   75:*/		return 0x8221A12C;
		/* 8221A15Ch case   75:*/		return 0x8221A160;
		  /* 8221A160h */ case   76:  		/* mr R5, R31 */
		/* 8221A160h case   76:*/		regs.R5 = regs.R31;
		/* 8221A160h case   76:*/		return 0x8221A164;
		  /* 8221A164h */ case   77:  		/* addi R4, R1, 96 */
		/* 8221A164h case   77:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8221A164h case   77:*/		return 0x8221A168;
		  /* 8221A168h */ case   78:  		/* mr R3, R18 */
		/* 8221A168h case   78:*/		regs.R3 = regs.R18;
		/* 8221A168h case   78:*/		return 0x8221A16C;
		  /* 8221A16Ch */ case   79:  		/* bl -36188 */
		/* 8221A16Ch case   79:*/		regs.LR = 0x8221A170; return 0x82211410;
		/* 8221A16Ch case   79:*/		return 0x8221A170;
		  /* 8221A170h */ case   80:  		/* b -68 */
		/* 8221A170h case   80:*/		return 0x8221A12C;
		/* 8221A170h case   80:*/		return 0x8221A174;
		  /* 8221A174h */ case   81:  		/* rlwimi R26, R19, 0, 16, 31 */
		/* 8221A174h case   81:*/		cpu::op::rlwimi<0,0,16,31>(regs,&regs.R26,regs.R19);
		/* 8221A174h case   81:*/		return 0x8221A178;
		  /* 8221A178h */ case   82:  		/* addi R11, R31, 4 */
		/* 8221A178h case   82:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 8221A178h case   82:*/		return 0x8221A17C;
		  /* 8221A17Ch */ case   83:  		/* stw R26, <#[R31]> */
		/* 8221A17Ch case   83:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000000) );
		/* 8221A17Ch case   83:*/		return 0x8221A180;
		  /* 8221A180h */ case   84:  		/* mr R10, R26 */
		/* 8221A180h case   84:*/		regs.R10 = regs.R26;
		/* 8221A180h case   84:*/		return 0x8221A184;
		  /* 8221A184h */ case   85:  		/* stw R30, <#[R31 + 4]> */
		/* 8221A184h case   85:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 8221A184h case   85:*/		return 0x8221A188;
		  /* 8221A188h */ case   86:  		/* addi R11, R11, 4 */
		/* 8221A188h case   86:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221A188h case   86:*/		return 0x8221A18C;
		  /* 8221A18Ch */ case   87:  		/* stw R26, <#[R1 + 96]> */
		/* 8221A18Ch case   87:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000060) );
		/* 8221A18Ch case   87:*/		return 0x8221A190;
		  /* 8221A190h */ case   88:  		/* rlwinm. R9, R30, 0, 9, 9 */
		/* 8221A190h case   88:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R30);
		/* 8221A190h case   88:*/		return 0x8221A194;
		  /* 8221A194h */ case   89:  		/* bc 12, CR0_EQ, 16 */
		/* 8221A194h case   89:*/		if ( regs.CR[0].eq ) { return 0x8221A1A4;  }
		/* 8221A194h case   89:*/		return 0x8221A198;
		  /* 8221A198h */ case   90:  		/* lwz R10, <#[R1 + 104]> */
		/* 8221A198h case   90:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000068) );
		/* 8221A198h case   90:*/		return 0x8221A19C;
		  /* 8221A19Ch */ case   91:  		/* stw R10, <#[R11]> */
		/* 8221A19Ch case   91:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A19Ch case   91:*/		return 0x8221A1A0;
		  /* 8221A1A0h */ case   92:  		/* addi R11, R11, 4 */
		/* 8221A1A0h case   92:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221A1A0h case   92:*/		return 0x8221A1A4;
	}
	return 0x8221A1A4;
} // Block from 8221A030h-8221A1A4h (93 instructions)

//////////////////////////////////////////////////////
// Block at 8221A1A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A1A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A1A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A1A4);
		  /* 8221A1A4h */ case    0:  		/* rlwinm. R10, R30, 0, 8, 8 */
		/* 8221A1A4h case    0:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R30);
		/* 8221A1A4h case    0:*/		return 0x8221A1A8;
		  /* 8221A1A8h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8221A1A8h case    1:*/		if ( regs.CR[0].eq ) { return 0x8221A1B8;  }
		/* 8221A1A8h case    1:*/		return 0x8221A1AC;
		  /* 8221A1ACh */ case    2:  		/* lwz R10, <#[R1 + 108]> */
		/* 8221A1ACh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000006C) );
		/* 8221A1ACh case    2:*/		return 0x8221A1B0;
		  /* 8221A1B0h */ case    3:  		/* stw R10, <#[R11]> */
		/* 8221A1B0h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A1B0h case    3:*/		return 0x8221A1B4;
		  /* 8221A1B4h */ case    4:  		/* addi R11, R11, 4 */
		/* 8221A1B4h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221A1B4h case    4:*/		return 0x8221A1B8;
	}
	return 0x8221A1B8;
} // Block from 8221A1A4h-8221A1B8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221A1B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A1B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A1B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A1B8);
		  /* 8221A1B8h */ case    0:  		/* stw R29, <#[R11]> */
		/* 8221A1B8h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A1B8h case    0:*/		return 0x8221A1BC;
		  /* 8221A1BCh */ case    1:  		/* addi R11, R11, 4 */
		/* 8221A1BCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221A1BCh case    1:*/		return 0x8221A1C0;
		  /* 8221A1C0h */ case    2:  		/* lwz R7, <#[R1 + 124]> */
		/* 8221A1C0h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x0000007C) );
		/* 8221A1C0h case    2:*/		return 0x8221A1C4;
		  /* 8221A1C4h */ case    3:  		/* rlwinm. R10, R29, 10, 31, 31 */
		/* 8221A1C4h case    3:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R29);
		/* 8221A1C4h case    3:*/		return 0x8221A1C8;
		  /* 8221A1C8h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 8221A1C8h case    4:*/		if ( regs.CR[0].eq ) { return 0x8221A1D4;  }
		/* 8221A1C8h case    4:*/		return 0x8221A1CC;
		  /* 8221A1CCh */ case    5:  		/* stw R7, <#[R11]> */
		/* 8221A1CCh case    5:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A1CCh case    5:*/		return 0x8221A1D0;
		  /* 8221A1D0h */ case    6:  		/* addi R11, R11, 4 */
		/* 8221A1D0h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221A1D0h case    6:*/		return 0x8221A1D4;
	}
	return 0x8221A1D4;
} // Block from 8221A1B8h-8221A1D4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221A1D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A1D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A1D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A1D4);
		  /* 8221A1D4h */ case    0:  		/* lwz R8, <#[R1 + 136]> */
		/* 8221A1D4h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000088) );
		/* 8221A1D4h case    0:*/		return 0x8221A1D8;
		  /* 8221A1D8h */ case    1:  		/* rlwinm. R9, R29, 9, 31, 31 */
		/* 8221A1D8h case    1:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R9,regs.R29);
		/* 8221A1D8h case    1:*/		return 0x8221A1DC;
		  /* 8221A1DCh */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 8221A1DCh case    2:*/		if ( regs.CR[0].eq ) { return 0x8221A1E8;  }
		/* 8221A1DCh case    2:*/		return 0x8221A1E0;
		  /* 8221A1E0h */ case    3:  		/* stw R8, <#[R11]> */
		/* 8221A1E0h case    3:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A1E0h case    3:*/		return 0x8221A1E4;
		  /* 8221A1E4h */ case    4:  		/* addi R11, R11, 4 */
		/* 8221A1E4h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221A1E4h case    4:*/		return 0x8221A1E8;
	}
	return 0x8221A1E8;
} // Block from 8221A1D4h-8221A1E8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221A1E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A1E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A1E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A1E8);
		  /* 8221A1E8h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 8221A1E8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8221A1E8h case    0:*/		return 0x8221A1EC;
		  /* 8221A1ECh */ case    1:  		/* stw R29, <#[R11]> */
		/* 8221A1ECh case    1:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A1ECh case    1:*/		return 0x8221A1F0;
		  /* 8221A1F0h */ case    2:  		/* addi R31, R11, 4 */
		/* 8221A1F0h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 8221A1F0h case    2:*/		return 0x8221A1F4;
		  /* 8221A1F4h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 8221A1F4h case    3:*/		if ( regs.CR[6].eq ) { return 0x8221A200;  }
		/* 8221A1F4h case    3:*/		return 0x8221A1F8;
		  /* 8221A1F8h */ case    4:  		/* stw R7, <#[R31]> */
		/* 8221A1F8h case    4:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x00000000) );
		/* 8221A1F8h case    4:*/		return 0x8221A1FC;
		  /* 8221A1FCh */ case    5:  		/* addi R31, R31, 4 */
		/* 8221A1FCh case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221A1FCh case    5:*/		return 0x8221A200;
	}
	return 0x8221A200;
} // Block from 8221A1E8h-8221A200h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221A200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A200);
		  /* 8221A200h */ case    0:  		/* cmplwi CR6, R9, 0 */
		/* 8221A200h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8221A200h case    0:*/		return 0x8221A204;
		  /* 8221A204h */ case    1:  		/* bc 12, CR6_EQ, 1068 */
		/* 8221A204h case    1:*/		if ( regs.CR[6].eq ) { return 0x8221A630;  }
		/* 8221A204h case    1:*/		return 0x8221A208;
		  /* 8221A208h */ case    2:  		/* stw R8, <#[R31]> */
		/* 8221A208h case    2:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 8221A208h case    2:*/		return 0x8221A20C;
		  /* 8221A20Ch */ case    3:  		/* addi R31, R31, 4 */
		/* 8221A20Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221A20Ch case    3:*/		return 0x8221A210;
		  /* 8221A210h */ case    4:  		/* b 1056 */
		/* 8221A210h case    4:*/		return 0x8221A630;
		/* 8221A210h case    4:*/		return 0x8221A214;
		  /* 8221A214h */ case    5:  		/* mr R5, R31 */
		/* 8221A214h case    5:*/		regs.R5 = regs.R31;
		/* 8221A214h case    5:*/		return 0x8221A218;
		  /* 8221A218h */ case    6:  		/* addi R4, R1, 96 */
		/* 8221A218h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8221A218h case    6:*/		return 0x8221A21C;
		  /* 8221A21Ch */ case    7:  		/* mr R3, R18 */
		/* 8221A21Ch case    7:*/		regs.R3 = regs.R18;
		/* 8221A21Ch case    7:*/		return 0x8221A220;
		  /* 8221A220h */ case    8:  		/* bl -32648 */
		/* 8221A220h case    8:*/		regs.LR = 0x8221A224; return 0x82212298;
		/* 8221A220h case    8:*/		return 0x8221A224;
		  /* 8221A224h */ case    9:  		/* mr R31, R3 */
		/* 8221A224h case    9:*/		regs.R31 = regs.R3;
		/* 8221A224h case    9:*/		return 0x8221A228;
		  /* 8221A228h */ case   10:  		/* addi R23, R23, 6 */
		/* 8221A228h case   10:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x6);
		/* 8221A228h case   10:*/		return 0x8221A22C;
		  /* 8221A22Ch */ case   11:  		/* b 1032 */
		/* 8221A22Ch case   11:*/		return 0x8221A634;
		/* 8221A22Ch case   11:*/		return 0x8221A230;
		  /* 8221A230h */ case   12:  		/* mr R5, R31 */
		/* 8221A230h case   12:*/		regs.R5 = regs.R31;
		/* 8221A230h case   12:*/		return 0x8221A234;
		  /* 8221A234h */ case   13:  		/* addi R4, R1, 96 */
		/* 8221A234h case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8221A234h case   13:*/		return 0x8221A238;
		  /* 8221A238h */ case   14:  		/* mr R3, R18 */
		/* 8221A238h case   14:*/		regs.R3 = regs.R18;
		/* 8221A238h case   14:*/		return 0x8221A23C;
		  /* 8221A23Ch */ case   15:  		/* bl -35092 */
		/* 8221A23Ch case   15:*/		regs.LR = 0x8221A240; return 0x82211928;
		/* 8221A23Ch case   15:*/		return 0x8221A240;
		  /* 8221A240h */ case   16:  		/* lwz R11, <#[R18 + 28]> */
		/* 8221A240h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x0000001C) );
		/* 8221A240h case   16:*/		return 0x8221A244;
		  /* 8221A244h */ case   17:  		/* mr R31, R3 */
		/* 8221A244h case   17:*/		regs.R31 = regs.R3;
		/* 8221A244h case   17:*/		return 0x8221A248;
		  /* 8221A248h */ case   18:  		/* lwz R11, <#[R11 + 4]> */
		/* 8221A248h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8221A248h case   18:*/		return 0x8221A24C;
		  /* 8221A24Ch */ case   19:  		/* cmplwi CR6, R11, 1 */
		/* 8221A24Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8221A24Ch case   19:*/		return 0x8221A250;
		  /* 8221A250h */ case   20:  		/* bc 12, CR6_EQ, 12 */
		/* 8221A250h case   20:*/		if ( regs.CR[6].eq ) { return 0x8221A25C;  }
		/* 8221A250h case   20:*/		return 0x8221A254;
		  /* 8221A254h */ case   21:  		/* addi R23, R23, 10 */
		/* 8221A254h case   21:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0xA);
		/* 8221A254h case   21:*/		return 0x8221A258;
		  /* 8221A258h */ case   22:  		/* b 988 */
		/* 8221A258h case   22:*/		return 0x8221A634;
		/* 8221A258h case   22:*/		return 0x8221A25C;
	}
	return 0x8221A25C;
} // Block from 8221A200h-8221A25Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 8221A25Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A25C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A25C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A25C);
		  /* 8221A25Ch */ case    0:  		/* addi R23, R23, 9 */
		/* 8221A25Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x9);
		/* 8221A25Ch case    0:*/		return 0x8221A260;
		  /* 8221A260h */ case    1:  		/* b 980 */
		/* 8221A260h case    1:*/		return 0x8221A634;
		/* 8221A260h case    1:*/		return 0x8221A264;
		  /* 8221A264h */ case    2:  		/* mr R5, R31 */
		/* 8221A264h case    2:*/		regs.R5 = regs.R31;
		/* 8221A264h case    2:*/		return 0x8221A268;
		  /* 8221A268h */ case    3:  		/* addi R4, R1, 96 */
		/* 8221A268h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8221A268h case    3:*/		return 0x8221A26C;
		  /* 8221A26Ch */ case    4:  		/* mr R3, R18 */
		/* 8221A26Ch case    4:*/		regs.R3 = regs.R18;
		/* 8221A26Ch case    4:*/		return 0x8221A270;
		  /* 8221A270h */ case    5:  		/* bl -31656 */
		/* 8221A270h case    5:*/		regs.LR = 0x8221A274; return 0x822126C8;
		/* 8221A270h case    5:*/		return 0x8221A274;
		  /* 8221A274h */ case    6:  		/* mr R31, R3 */
		/* 8221A274h case    6:*/		regs.R31 = regs.R3;
		/* 8221A274h case    6:*/		return 0x8221A278;
		  /* 8221A278h */ case    7:  		/* addi R23, R23, 3 */
		/* 8221A278h case    7:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x3);
		/* 8221A278h case    7:*/		return 0x8221A27C;
		  /* 8221A27Ch */ case    8:  		/* b 952 */
		/* 8221A27Ch case    8:*/		return 0x8221A634;
		/* 8221A27Ch case    8:*/		return 0x8221A280;
		  /* 8221A280h */ case    9:  		/* mr R4, R31 */
		/* 8221A280h case    9:*/		regs.R4 = regs.R31;
		/* 8221A280h case    9:*/		return 0x8221A284;
		  /* 8221A284h */ case   10:  		/* addi R3, R1, 96 */
		/* 8221A284h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 8221A284h case   10:*/		return 0x8221A288;
		  /* 8221A288h */ case   11:  		/* bl -30920 */
		/* 8221A288h case   11:*/		regs.LR = 0x8221A28C; return 0x822129C0;
		/* 8221A288h case   11:*/		return 0x8221A28C;
		  /* 8221A28Ch */ case   12:  		/* rlwinm R11, R26, 16, 19, 31 */
		/* 8221A28Ch case   12:*/		cpu::op::rlwinm<0,16,19,31>(regs,&regs.R11,regs.R26);
		/* 8221A28Ch case   12:*/		return 0x8221A290;
		  /* 8221A290h */ case   13:  		/* mr R31, R3 */
		/* 8221A290h case   13:*/		regs.R31 = regs.R3;
		/* 8221A290h case   13:*/		return 0x8221A294;
		  /* 8221A294h */ case   14:  		/* cmplwi CR6, R11, 1 */
		/* 8221A294h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8221A294h case   14:*/		return 0x8221A298;
		  /* 8221A298h */ case   15:  		/* bc 12, CR6_LT, -532 */
		/* 8221A298h case   15:*/		if ( regs.CR[6].lt ) { return 0x8221A084;  }
		/* 8221A298h case   15:*/		return 0x8221A29C;
		  /* 8221A29Ch */ case   16:  		/* bc 12, CR6_EQ, -36 */
		/* 8221A29Ch case   16:*/		if ( regs.CR[6].eq ) { return 0x8221A278;  }
		/* 8221A29Ch case   16:*/		return 0x8221A2A0;
		  /* 8221A2A0h */ case   17:  		/* cmplwi CR6, R11, 3 */
		/* 8221A2A0h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8221A2A0h case   17:*/		return 0x8221A2A4;
		  /* 8221A2A4h */ case   18:  		/* bc 12, CR6_LT, -544 */
		/* 8221A2A4h case   18:*/		if ( regs.CR[6].lt ) { return 0x8221A084;  }
		/* 8221A2A4h case   18:*/		return 0x8221A2A8;
		  /* 8221A2A8h */ case   19:  		/* bc 12, CR6_EQ, -48 */
		/* 8221A2A8h case   19:*/		if ( regs.CR[6].eq ) { return 0x8221A278;  }
		/* 8221A2A8h case   19:*/		return 0x8221A2AC;
		  /* 8221A2ACh */ case   20:  		/* cmplwi CR6, R11, 5 */
		/* 8221A2ACh case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 8221A2ACh case   20:*/		return 0x8221A2B0;
		  /* 8221A2B0h */ case   21:  		/* bc 12, CR6_LT, -892 */
		/* 8221A2B0h case   21:*/		if ( regs.CR[6].lt ) { return 0x82219F34;  }
		/* 8221A2B0h case   21:*/		return 0x8221A2B4;
		  /* 8221A2B4h */ case   22:  		/* li R7, 13445 */
		/* 8221A2B4h case   22:*/		cpu::op::li<0>(regs,&regs.R7,0x3485);
		/* 8221A2B4h case   22:*/		return 0x8221A2B8;
		  /* 8221A2B8h */ case   23:  		/* b -944 */
		/* 8221A2B8h case   23:*/		return 0x82219F08;
		/* 8221A2B8h case   23:*/		return 0x8221A2BC;
		  /* 8221A2BCh */ case   24:  		/* mr R5, R31 */
		/* 8221A2BCh case   24:*/		regs.R5 = regs.R31;
		/* 8221A2BCh case   24:*/		return 0x8221A2C0;
		  /* 8221A2C0h */ case   25:  		/* addi R4, R1, 96 */
		/* 8221A2C0h case   25:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8221A2C0h case   25:*/		return 0x8221A2C4;
		  /* 8221A2C4h */ case   26:  		/* mr R3, R18 */
		/* 8221A2C4h case   26:*/		regs.R3 = regs.R18;
		/* 8221A2C4h case   26:*/		return 0x8221A2C8;
		  /* 8221A2C8h */ case   27:  		/* bl -29832 */
		/* 8221A2C8h case   27:*/		regs.LR = 0x8221A2CC; return 0x82212E40;
		/* 8221A2C8h case   27:*/		return 0x8221A2CC;
		  /* 8221A2CCh */ case   28:  		/* mr R31, R3 */
		/* 8221A2CCh case   28:*/		regs.R31 = regs.R3;
		/* 8221A2CCh case   28:*/		return 0x8221A2D0;
		  /* 8221A2D0h */ case   29:  		/* addi R23, R23, 8 */
		/* 8221A2D0h case   29:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x8);
		/* 8221A2D0h case   29:*/		return 0x8221A2D4;
		  /* 8221A2D4h */ case   30:  		/* b 864 */
		/* 8221A2D4h case   30:*/		return 0x8221A634;
		/* 8221A2D4h case   30:*/		return 0x8221A2D8;
		  /* 8221A2D8h */ case   31:  		/* lwz R11, <#[R1 + 84]> */
		/* 8221A2D8h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8221A2D8h case   31:*/		return 0x8221A2DC;
		  /* 8221A2DCh */ case   32:  		/* addi R4, R1, 96 */
		/* 8221A2DCh case   32:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8221A2DCh case   32:*/		return 0x8221A2E0;
		  /* 8221A2E0h */ case   33:  		/* mr R3, R18 */
		/* 8221A2E0h case   33:*/		regs.R3 = regs.R18;
		/* 8221A2E0h case   33:*/		return 0x8221A2E4;
		  /* 8221A2E4h */ case   34:  		/* addi R5, R11, 23224 */
		/* 8221A2E4h case   34:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x5AB8);
		/* 8221A2E4h case   34:*/		return 0x8221A2E8;
		  /* 8221A2E8h */ case   35:  		/* bl -15408 */
		/* 8221A2E8h case   35:*/		regs.LR = 0x8221A2EC; return 0x822166B8;
		/* 8221A2E8h case   35:*/		return 0x8221A2EC;
		  /* 8221A2ECh */ case   36:  		/* b 840 */
		/* 8221A2ECh case   36:*/		return 0x8221A634;
		/* 8221A2ECh case   36:*/		return 0x8221A2F0;
		  /* 8221A2F0h */ case   37:  		/* mr R5, R31 */
		/* 8221A2F0h case   37:*/		regs.R5 = regs.R31;
		/* 8221A2F0h case   37:*/		return 0x8221A2F4;
		  /* 8221A2F4h */ case   38:  		/* addi R4, R1, 96 */
		/* 8221A2F4h case   38:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8221A2F4h case   38:*/		return 0x8221A2F8;
		  /* 8221A2F8h */ case   39:  		/* mr R3, R18 */
		/* 8221A2F8h case   39:*/		regs.R3 = regs.R18;
		/* 8221A2F8h case   39:*/		return 0x8221A2FC;
		  /* 8221A2FCh */ case   40:  		/* bl -28516 */
		/* 8221A2FCh case   40:*/		regs.LR = 0x8221A300; return 0x82213398;
		/* 8221A2FCh case   40:*/		return 0x8221A300;
		  /* 8221A300h */ case   41:  		/* b -140 */
		/* 8221A300h case   41:*/		return 0x8221A274;
		/* 8221A300h case   41:*/		return 0x8221A304;
		  /* 8221A304h */ case   42:  		/* mr R5, R31 */
		/* 8221A304h case   42:*/		regs.R5 = regs.R31;
		/* 8221A304h case   42:*/		return 0x8221A308;
		  /* 8221A308h */ case   43:  		/* addi R4, R1, 96 */
		/* 8221A308h case   43:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8221A308h case   43:*/		return 0x8221A30C;
		  /* 8221A30Ch */ case   44:  		/* mr R3, R18 */
		/* 8221A30Ch case   44:*/		regs.R3 = regs.R18;
		/* 8221A30Ch case   44:*/		return 0x8221A310;
		  /* 8221A310h */ case   45:  		/* bl -27520 */
		/* 8221A310h case   45:*/		regs.LR = 0x8221A314; return 0x82213790;
		/* 8221A310h case   45:*/		return 0x8221A314;
		  /* 8221A314h */ case   46:  		/* b -160 */
		/* 8221A314h case   46:*/		return 0x8221A274;
		/* 8221A314h case   46:*/		return 0x8221A318;
		  /* 8221A318h */ case   47:  		/* mr R4, R31 */
		/* 8221A318h case   47:*/		regs.R4 = regs.R31;
		/* 8221A318h case   47:*/		return 0x8221A31C;
		  /* 8221A31Ch */ case   48:  		/* addi R3, R1, 96 */
		/* 8221A31Ch case   48:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 8221A31Ch case   48:*/		return 0x8221A320;
		  /* 8221A320h */ case   49:  		/* bl -26976 */
		/* 8221A320h case   49:*/		regs.LR = 0x8221A324; return 0x822139C0;
		/* 8221A320h case   49:*/		return 0x8221A324;
		  /* 8221A324h */ case   50:  		/* b -648 */
		/* 8221A324h case   50:*/		return 0x8221A09C;
		/* 8221A324h case   50:*/		return 0x8221A328;
		  /* 8221A328h */ case   51:  		/* mr R5, R31 */
		/* 8221A328h case   51:*/		regs.R5 = regs.R31;
		/* 8221A328h case   51:*/		return 0x8221A32C;
		  /* 8221A32Ch */ case   52:  		/* addi R4, R1, 96 */
		/* 8221A32Ch case   52:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8221A32Ch case   52:*/		return 0x8221A330;
		  /* 8221A330h */ case   53:  		/* mr R3, R18 */
		/* 8221A330h case   53:*/		regs.R3 = regs.R18;
		/* 8221A330h case   53:*/		return 0x8221A334;
		  /* 8221A334h */ case   54:  		/* bl -26404 */
		/* 8221A334h case   54:*/		regs.LR = 0x8221A338; return 0x82213C10;
		/* 8221A334h case   54:*/		return 0x8221A338;
		  /* 8221A338h */ case   55:  		/* b -196 */
		/* 8221A338h case   55:*/		return 0x8221A274;
		/* 8221A338h case   55:*/		return 0x8221A33C;
		  /* 8221A33Ch */ case   56:  		/* mr R5, R31 */
		/* 8221A33Ch case   56:*/		regs.R5 = regs.R31;
		/* 8221A33Ch case   56:*/		return 0x8221A340;
		  /* 8221A340h */ case   57:  		/* addi R4, R1, 96 */
		/* 8221A340h case   57:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8221A340h case   57:*/		return 0x8221A344;
		  /* 8221A344h */ case   58:  		/* mr R3, R18 */
		/* 8221A344h case   58:*/		regs.R3 = regs.R18;
		/* 8221A344h case   58:*/		return 0x8221A348;
		  /* 8221A348h */ case   59:  		/* bl -25696 */
		/* 8221A348h case   59:*/		regs.LR = 0x8221A34C; return 0x82213EE8;
		/* 8221A348h case   59:*/		return 0x8221A34C;
		  /* 8221A34Ch */ case   60:  		/* b -128 */
		/* 8221A34Ch case   60:*/		return 0x8221A2CC;
		/* 8221A34Ch case   60:*/		return 0x8221A350;
		  /* 8221A350h */ case   61:  		/* mr R4, R31 */
		/* 8221A350h case   61:*/		regs.R4 = regs.R31;
		/* 8221A350h case   61:*/		return 0x8221A354;
		  /* 8221A354h */ case   62:  		/* addi R3, R1, 96 */
		/* 8221A354h case   62:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 8221A354h case   62:*/		return 0x8221A358;
		  /* 8221A358h */ case   63:  		/* bl -23400 */
		/* 8221A358h case   63:*/		regs.LR = 0x8221A35C; return 0x822147F0;
		/* 8221A358h case   63:*/		return 0x8221A35C;
		  /* 8221A35Ch */ case   64:  		/* b -704 */
		/* 8221A35Ch case   64:*/		return 0x8221A09C;
		/* 8221A35Ch case   64:*/		return 0x8221A360;
		  /* 8221A360h */ case   65:  		/* lwz R11, <#[R1 + 84]> */
		/* 8221A360h case   65:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8221A360h case   65:*/		return 0x8221A364;
		  /* 8221A364h */ case   66:  		/* li R23, 0 */
		/* 8221A364h case   66:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 8221A364h case   66:*/		return 0x8221A368;
		  /* 8221A368h */ case   67:  		/* lwz R11, <#[R11]> */
		/* 8221A368h case   67:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A368h case   67:*/		return 0x8221A36C;
		  /* 8221A36Ch */ case   68:  		/* cmplwi CR6, R11, 1 */
		/* 8221A36Ch case   68:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8221A36Ch case   68:*/		return 0x8221A370;
		  /* 8221A370h */ case   69:  		/* bc 4, CR6_EQ, 180 */
		/* 8221A370h case   69:*/		if ( !regs.CR[6].eq ) { return 0x8221A424;  }
		/* 8221A370h case   69:*/		return 0x8221A374;
		  /* 8221A374h */ case   70:  		/* li R4, 163 */
		/* 8221A374h case   70:*/		cpu::op::li<0>(regs,&regs.R4,0xA3);
		/* 8221A374h case   70:*/		return 0x8221A378;
		  /* 8221A378h */ case   71:  		/* lwz R3, <#[R18 + 20]> */
		/* 8221A378h case   71:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R18 + 0x00000014) );
		/* 8221A378h case   71:*/		return 0x8221A37C;
		  /* 8221A37Ch */ case   72:  		/* bl -773740 */
		/* 8221A37Ch case   72:*/		regs.LR = 0x8221A380; return 0x8215D510;
		/* 8221A37Ch case   72:*/		return 0x8221A380;
		  /* 8221A380h */ case   73:  		/* cmplwi CR0, R3, 0 */
		/* 8221A380h case   73:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8221A380h case   73:*/		return 0x8221A384;
		  /* 8221A384h */ case   74:  		/* bc 12, CR0_EQ, 160 */
		/* 8221A384h case   74:*/		if ( regs.CR[0].eq ) { return 0x8221A424;  }
		/* 8221A384h case   74:*/		return 0x8221A388;
		  /* 8221A388h */ case   75:  		/* lwz R29, <#[R1 + 84]> */
		/* 8221A388h case   75:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 8221A388h case   75:*/		return 0x8221A38C;
		  /* 8221A38Ch */ case   76:  		/* lwz R11, <#[R29 + 20896]> */
		/* 8221A38Ch case   76:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x000051A0) );
		/* 8221A38Ch case   76:*/		return 0x8221A390;
		  /* 8221A390h */ case   77:  		/* cmpwi CR6, R11, -1 */
		/* 8221A390h case   77:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8221A390h case   77:*/		return 0x8221A394;
		  /* 8221A394h */ case   78:  		/* bc 12, CR6_EQ, 148 */
		/* 8221A394h case   78:*/		if ( regs.CR[6].eq ) { return 0x8221A428;  }
		/* 8221A394h case   78:*/		return 0x8221A398;
		  /* 8221A398h */ case   79:  		/* li R4, 165 */
		/* 8221A398h case   79:*/		cpu::op::li<0>(regs,&regs.R4,0xA5);
		/* 8221A398h case   79:*/		return 0x8221A39C;
		  /* 8221A39Ch */ case   80:  		/* lwz R3, <#[R18 + 20]> */
		/* 8221A39Ch case   80:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R18 + 0x00000014) );
		/* 8221A39Ch case   80:*/		return 0x8221A3A0;
		  /* 8221A3A0h */ case   81:  		/* bl -773776 */
		/* 8221A3A0h case   81:*/		regs.LR = 0x8221A3A4; return 0x8215D510;
		/* 8221A3A0h case   81:*/		return 0x8221A3A4;
		  /* 8221A3A4h */ case   82:  		/* lwz R11, <#[R18 + 20]> */
		/* 8221A3A4h case   82:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000014) );
		/* 8221A3A4h case   82:*/		return 0x8221A3A8;
		  /* 8221A3A8h */ case   83:  		/* mr R28, R3 */
		/* 8221A3A8h case   83:*/		regs.R28 = regs.R3;
		/* 8221A3A8h case   83:*/		return 0x8221A3AC;
		  /* 8221A3ACh */ case   84:  		/* li R4, 169 */
		/* 8221A3ACh case   84:*/		cpu::op::li<0>(regs,&regs.R4,0xA9);
		/* 8221A3ACh case   84:*/		return 0x8221A3B0;
		  /* 8221A3B0h */ case   85:  		/* mr R3, R11 */
		/* 8221A3B0h case   85:*/		regs.R3 = regs.R11;
		/* 8221A3B0h case   85:*/		return 0x8221A3B4;
		  /* 8221A3B4h */ case   86:  		/* bl -773796 */
		/* 8221A3B4h case   86:*/		regs.LR = 0x8221A3B8; return 0x8215D510;
		/* 8221A3B4h case   86:*/		return 0x8221A3B8;
		  /* 8221A3B8h */ case   87:  		/* mr R30, R3 */
		/* 8221A3B8h case   87:*/		regs.R30 = regs.R3;
		/* 8221A3B8h case   87:*/		return 0x8221A3BC;
		  /* 8221A3BCh */ case   88:  		/* cmplwi CR6, R28, 0 */
		/* 8221A3BCh case   88:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8221A3BCh case   88:*/		return 0x8221A3C0;
		  /* 8221A3C0h */ case   89:  		/* bc 12, CR6_EQ, 32 */
		/* 8221A3C0h case   89:*/		if ( regs.CR[6].eq ) { return 0x8221A3E0;  }
		/* 8221A3C0h case   89:*/		return 0x8221A3C4;
		  /* 8221A3C4h */ case   90:  		/* lis R11, -32252 */
		/* 8221A3C4h case   90:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221A3C4h case   90:*/		return 0x8221A3C8;
		  /* 8221A3C8h */ case   91:  		/* mr R6, R15 */
		/* 8221A3C8h case   91:*/		regs.R6 = regs.R15;
		/* 8221A3C8h case   91:*/		return 0x8221A3CC;
		  /* 8221A3CCh */ case   92:  		/* addi R5, R11, -5004 */
		/* 8221A3CCh case   92:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFEC74);
		/* 8221A3CCh case   92:*/		return 0x8221A3D0;
		  /* 8221A3D0h */ case   93:  		/* mr R4, R16 */
		/* 8221A3D0h case   93:*/		regs.R4 = regs.R16;
		/* 8221A3D0h case   93:*/		return 0x8221A3D4;
		  /* 8221A3D4h */ case   94:  		/* li R7, 13526 */
		/* 8221A3D4h case   94:*/		cpu::op::li<0>(regs,&regs.R7,0x34D6);
		/* 8221A3D4h case   94:*/		return 0x8221A3D8;
		  /* 8221A3D8h */ case   95:  		/* li R3, 0 */
		/* 8221A3D8h case   95:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221A3D8h case   95:*/		return 0x8221A3DC;
		  /* 8221A3DCh */ case   96:  		/* bl -796628 */
		/* 8221A3DCh case   96:*/		regs.LR = 0x8221A3E0; return 0x82157C08;
		/* 8221A3DCh case   96:*/		return 0x8221A3E0;
	}
	return 0x8221A3E0;
} // Block from 8221A25Ch-8221A3E0h (97 instructions)

//////////////////////////////////////////////////////
// Block at 8221A3E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A3E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A3E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A3E0);
		  /* 8221A3E0h */ case    0:  		/* cmplwi CR6, R30, 1 */
		/* 8221A3E0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000001);
		/* 8221A3E0h case    0:*/		return 0x8221A3E4;
		  /* 8221A3E4h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8221A3E4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8221A3F0;  }
		/* 8221A3E4h case    1:*/		return 0x8221A3E8;
		  /* 8221A3E8h */ case    2:  		/* cmplwi CR6, R30, 2 */
		/* 8221A3E8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000002);
		/* 8221A3E8h case    2:*/		return 0x8221A3EC;
		  /* 8221A3ECh */ case    3:  		/* bc 4, CR6_EQ, 32 */
		/* 8221A3ECh case    3:*/		if ( !regs.CR[6].eq ) { return 0x8221A40C;  }
		/* 8221A3ECh case    3:*/		return 0x8221A3F0;
	}
	return 0x8221A3F0;
} // Block from 8221A3E0h-8221A3F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221A3F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A3F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A3F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A3F0);
		  /* 8221A3F0h */ case    0:  		/* lis R11, -32252 */
		/* 8221A3F0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221A3F0h case    0:*/		return 0x8221A3F4;
		  /* 8221A3F4h */ case    1:  		/* mr R6, R15 */
		/* 8221A3F4h case    1:*/		regs.R6 = regs.R15;
		/* 8221A3F4h case    1:*/		return 0x8221A3F8;
		  /* 8221A3F8h */ case    2:  		/* addi R5, R11, -5088 */
		/* 8221A3F8h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFEC20);
		/* 8221A3F8h case    2:*/		return 0x8221A3FC;
		  /* 8221A3FCh */ case    3:  		/* mr R4, R16 */
		/* 8221A3FCh case    3:*/		regs.R4 = regs.R16;
		/* 8221A3FCh case    3:*/		return 0x8221A400;
		  /* 8221A400h */ case    4:  		/* li R7, 13527 */
		/* 8221A400h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x34D7);
		/* 8221A400h case    4:*/		return 0x8221A404;
		  /* 8221A404h */ case    5:  		/* li R3, 0 */
		/* 8221A404h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221A404h case    5:*/		return 0x8221A408;
		  /* 8221A408h */ case    6:  		/* bl -796672 */
		/* 8221A408h case    6:*/		regs.LR = 0x8221A40C; return 0x82157C08;
		/* 8221A408h case    6:*/		return 0x8221A40C;
	}
	return 0x8221A40C;
} // Block from 8221A3F0h-8221A40Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221A40Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A40C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A40C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A40C);
		  /* 8221A40Ch */ case    0:  		/* mr R4, R31 */
		/* 8221A40Ch case    0:*/		regs.R4 = regs.R31;
		/* 8221A40Ch case    0:*/		return 0x8221A410;
		  /* 8221A410h */ case    1:  		/* mr R3, R18 */
		/* 8221A410h case    1:*/		regs.R3 = regs.R18;
		/* 8221A410h case    1:*/		return 0x8221A414;
		  /* 8221A414h */ case    2:  		/* bl -4596 */
		/* 8221A414h case    2:*/		regs.LR = 0x8221A418; return 0x82219220;
		/* 8221A414h case    2:*/		return 0x8221A418;
		  /* 8221A418h */ case    3:  		/* mr R31, R3 */
		/* 8221A418h case    3:*/		regs.R31 = regs.R3;
		/* 8221A418h case    3:*/		return 0x8221A41C;
		  /* 8221A41Ch */ case    4:  		/* li R23, 3 */
		/* 8221A41Ch case    4:*/		cpu::op::li<0>(regs,&regs.R23,0x3);
		/* 8221A41Ch case    4:*/		return 0x8221A420;
		  /* 8221A420h */ case    5:  		/* b 8 */
		/* 8221A420h case    5:*/		return 0x8221A428;
		/* 8221A420h case    5:*/		return 0x8221A424;
	}
	return 0x8221A424;
} // Block from 8221A40Ch-8221A424h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221A424h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A424( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A424) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A424);
		  /* 8221A424h */ case    0:  		/* lwz R29, <#[R1 + 84]> */
		/* 8221A424h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 8221A424h case    0:*/		return 0x8221A428;
	}
	return 0x8221A428;
} // Block from 8221A424h-8221A428h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221A428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A428);
		  /* 8221A428h */ case    0:  		/* lwz R11, <#[R29 + 16776]> */
		/* 8221A428h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00004188) );
		/* 8221A428h case    0:*/		return 0x8221A42C;
		  /* 8221A42Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8221A42Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221A42Ch case    1:*/		return 0x8221A430;
		  /* 8221A430h */ case    2:  		/* bc 12, CR6_EQ, 204 */
		/* 8221A430h case    2:*/		if ( regs.CR[6].eq ) { return 0x8221A4FC;  }
		/* 8221A430h case    2:*/		return 0x8221A434;
		  /* 8221A434h */ case    3:  		/* addi R30, R29, 16768 */
		/* 8221A434h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x4180);
		/* 8221A434h case    3:*/		return 0x8221A438;
		  /* 8221A438h */ case    4:  		/* lwz R11, <#[R30 + 8]> */
		/* 8221A438h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8221A438h case    4:*/		return 0x8221A43C;
		  /* 8221A43Ch */ case    5:  		/* lwz R4, <#[R30]> */
		/* 8221A43Ch case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 8221A43Ch case    5:*/		return 0x8221A440;
		  /* 8221A440h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 8221A440h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221A440h case    6:*/		return 0x8221A444;
		  /* 8221A444h */ case    7:  		/* bc 12, CR6_EQ, 64 */
		/* 8221A444h case    7:*/		if ( regs.CR[6].eq ) { return 0x8221A484;  }
		/* 8221A444h case    7:*/		return 0x8221A448;
		  /* 8221A448h */ case    8:  		/* lwz R11, <#[R4]> */
		/* 8221A448h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 8221A448h case    8:*/		return 0x8221A44C;
		  /* 8221A44Ch */ case    9:  		/* addi R10, R1, 160 */
		/* 8221A44Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xA0);
		/* 8221A44Ch case    9:*/		return 0x8221A450;
		  /* 8221A450h */ case   10:  		/* lwz R9, <#[R4 + 12]> */
		/* 8221A450h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x0000000C) );
		/* 8221A450h case   10:*/		return 0x8221A454;
		  /* 8221A454h */ case   11:  		/* lwz R8, <#[R4 + 8]> */
		/* 8221A454h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000008) );
		/* 8221A454h case   11:*/		return 0x8221A458;
		  /* 8221A458h */ case   12:  		/* rlwinm R7, R9, 0, 0, 31 */
		/* 8221A458h case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R9);
		/* 8221A458h case   12:*/		return 0x8221A45C;
		  /* 8221A45Ch */ case   13:  		/* stw R11, <#[R10]> */
		/* 8221A45Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8221A45Ch case   13:*/		return 0x8221A460;
		  /* 8221A460h */ case   14:  		/* lwz R11, <#[R4 + 4]> */
		/* 8221A460h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 8221A460h case   14:*/		return 0x8221A464;
		  /* 8221A464h */ case   15:  		/* stw R9, <#[R30]> */
		/* 8221A464h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 8221A464h case   15:*/		return 0x8221A468;
		  /* 8221A468h */ case   16:  		/* stw R8, <#[R10 + 8]> */
		/* 8221A468h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000008) );
		/* 8221A468h case   16:*/		return 0x8221A46C;
		  /* 8221A46Ch */ case   17:  		/* stw R7, <#[R10 + 12]> */
		/* 8221A46Ch case   17:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x0000000C) );
		/* 8221A46Ch case   17:*/		return 0x8221A470;
		  /* 8221A470h */ case   18:  		/* stw R11, <#[R10 + 4]> */
		/* 8221A470h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8221A470h case   18:*/		return 0x8221A474;
		  /* 8221A474h */ case   19:  		/* lwz R11, <#[R18 + 8]> */
		/* 8221A474h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000008) );
		/* 8221A474h case   19:*/		return 0x8221A478;
		  /* 8221A478h */ case   20:  		/* lwz R3, <#[R18]> */
		/* 8221A478h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R18 + 0x00000000) );
		/* 8221A478h case   20:*/		return 0x8221A47C;
		  /* 8221A47Ch */ case   21:  		/* mtspr CTR, R11 */
		/* 8221A47Ch case   21:*/		regs.CTR = regs.R11;
		/* 8221A47Ch case   21:*/		return 0x8221A480;
		  /* 8221A480h */ case   22:  		/* bcctrl 20, CR0_LT */
		/* 8221A480h case   22:*/		if ( 1 ) { regs.LR = 0x8221A484; return (uint32)regs.CTR; }
		/* 8221A480h case   22:*/		return 0x8221A484;
	}
	return 0x8221A484;
} // Block from 8221A428h-8221A484h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8221A484h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A484( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A484) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A484);
		  /* 8221A484h */ case    0:  		/* lwz R11, <#[R1 + 164]> */
		/* 8221A484h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A4) );
		/* 8221A484h case    0:*/		return 0x8221A488;
		  /* 8221A488h */ case    1:  		/* addi R23, R23, 1 */
		/* 8221A488h case    1:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 8221A488h case    1:*/		return 0x8221A48C;
		  /* 8221A48Ch */ case    2:  		/* lwz R10, <#[R1 + 168]> */
		/* 8221A48Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000A8) );
		/* 8221A48Ch case    2:*/		return 0x8221A490;
		  /* 8221A490h */ case    3:  		/* rlwinm R8, R11, 0, 16, 31 */
		/* 8221A490h case    3:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R8,regs.R11);
		/* 8221A490h case    3:*/		return 0x8221A494;
		  /* 8221A494h */ case    4:  		/* lwz R11, <#[R30 + 8]> */
		/* 8221A494h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8221A494h case    4:*/		return 0x8221A498;
		  /* 8221A498h */ case    5:  		/* lwz R9, <#[R1 + 160]> */
		/* 8221A498h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000000A0) );
		/* 8221A498h case    5:*/		return 0x8221A49C;
		  /* 8221A49Ch */ case    6:  		/* addi R7, R11, -1 */
		/* 8221A49Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFFF);
		/* 8221A49Ch case    6:*/		return 0x8221A4A0;
		  /* 8221A4A0h */ case    7:  		/* lwz R6, <#[R1 + 176]> */
		/* 8221A4A0h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B0) );
		/* 8221A4A0h case    7:*/		return 0x8221A4A4;
		  /* 8221A4A4h */ case    8:  		/* rlwinm R9, R9, 0, 16, 31 */
		/* 8221A4A4h case    8:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R9);
		/* 8221A4A4h case    8:*/		return 0x8221A4A8;
		  /* 8221A4A8h */ case    9:  		/* stw R7, <#[R30 + 8]> */
		/* 8221A4A8h case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R30 + 0x00000008) );
		/* 8221A4A8h case    9:*/		return 0x8221A4AC;
		  /* 8221A4ACh */ case   10:  		/* rlwimi R6, R19, 0, 3, 31 */
		/* 8221A4ACh case   10:*/		cpu::op::rlwimi<0,0,3,31>(regs,&regs.R6,regs.R19);
		/* 8221A4ACh case   10:*/		return 0x8221A4B0;
		  /* 8221A4B0h */ case   11:  		/* lwz R7, <#[R1 + 180]> */
		/* 8221A4B0h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000B4) );
		/* 8221A4B0h case   11:*/		return 0x8221A4B4;
		  /* 8221A4B4h */ case   12:  		/* addi R11, R31, 8 */
		/* 8221A4B4h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x8);
		/* 8221A4B4h case   12:*/		return 0x8221A4B8;
		  /* 8221A4B8h */ case   13:  		/* rlwimi R7, R10, 16, 10, 15 */
		/* 8221A4B8h case   13:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R7,regs.R10);
		/* 8221A4B8h case   13:*/		return 0x8221A4BC;
		  /* 8221A4BCh */ case   14:  		/* lwz R10, <#[R1 + 192]> */
		/* 8221A4BCh case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000C0) );
		/* 8221A4BCh case   14:*/		return 0x8221A4C0;
		  /* 8221A4C0h */ case   15:  		/* andis. R7, R7, 65471 */
		/* 8221A4C0h case   15:*/		cpu::op::andis<1>(regs,&regs.R7,regs.R7,0xFFBF);
		/* 8221A4C0h case   15:*/		return 0x8221A4C4;
		  /* 8221A4C4h */ case   16:  		/* andis. R10, R10, 65284 */
		/* 8221A4C4h case   16:*/		cpu::op::andis<1>(regs,&regs.R10,regs.R10,0xFF04);
		/* 8221A4C4h case   16:*/		return 0x8221A4C8;
		  /* 8221A4C8h */ case   17:  		/* or R10, R10, R9 */
		/* 8221A4C8h case   17:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8221A4C8h case   17:*/		return 0x8221A4CC;
		  /* 8221A4CCh */ case   18:  		/* rlwinm R9, R6, 0, 3, 1 */
		/* 8221A4CCh case   18:*/		cpu::op::rlwinm<0,0,3,1>(regs,&regs.R9,regs.R6);
		/* 8221A4CCh case   18:*/		return 0x8221A4D0;
		  /* 8221A4D0h */ case   19:  		/* or R8, R7, R8 */
		/* 8221A4D0h case   19:*/		cpu::op::or<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 8221A4D0h case   19:*/		return 0x8221A4D4;
		  /* 8221A4D4h */ case   20:  		/* stw R9, <#[R31]> */
		/* 8221A4D4h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 8221A4D4h case   20:*/		return 0x8221A4D8;
		  /* 8221A4D8h */ case   21:  		/* oris R10, R10, 4 */
		/* 8221A4D8h case   21:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8221A4D8h case   21:*/		return 0x8221A4DC;
		  /* 8221A4DCh */ case   22:  		/* rlwinm R8, R8, 0, 9, 7 */
		/* 8221A4DCh case   22:*/		cpu::op::rlwinm<0,0,9,7>(regs,&regs.R8,regs.R8);
		/* 8221A4DCh case   22:*/		return 0x8221A4E0;
		  /* 8221A4E0h */ case   23:  		/* stw R8, <#[R31 + 4]> */
		/* 8221A4E0h case   23:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 8221A4E0h case   23:*/		return 0x8221A4E4;
		  /* 8221A4E4h */ case   24:  		/* stw R10, <#[R31 + 8]> */
		/* 8221A4E4h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8221A4E4h case   24:*/		return 0x8221A4E8;
		  /* 8221A4E8h */ case   25:  		/* stwu R10, <#[R11 + 4]> */
		/* 8221A4E8h case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8221A4E8h case   25:*/		return 0x8221A4EC;
		  /* 8221A4ECh */ case   26:  		/* addi R31, R11, 4 */
		/* 8221A4ECh case   26:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 8221A4ECh case   26:*/		return 0x8221A4F0;
		  /* 8221A4F0h */ case   27:  		/* lwz R11, <#[R29 + 16776]> */
		/* 8221A4F0h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00004188) );
		/* 8221A4F0h case   27:*/		return 0x8221A4F4;
		  /* 8221A4F4h */ case   28:  		/* cmplwi CR6, R11, 0 */
		/* 8221A4F4h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221A4F4h case   28:*/		return 0x8221A4F8;
		  /* 8221A4F8h */ case   29:  		/* bc 4, CR6_EQ, -192 */
		/* 8221A4F8h case   29:*/		if ( !regs.CR[6].eq ) { return 0x8221A438;  }
		/* 8221A4F8h case   29:*/		return 0x8221A4FC;
	}
	return 0x8221A4FC;
} // Block from 8221A484h-8221A4FCh (30 instructions)

//////////////////////////////////////////////////////
// Block at 8221A4FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A4FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A4FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A4FC);
		  /* 8221A4FCh */ case    0:  		/* lwz R11, <#[R29 + 8]> */
		/* 8221A4FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8221A4FCh case    0:*/		return 0x8221A500;
		  /* 8221A500h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8221A500h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221A500h case    1:*/		return 0x8221A504;
		  /* 8221A504h */ case    2:  		/* bc 12, CR6_EQ, 304 */
		/* 8221A504h case    2:*/		if ( regs.CR[6].eq ) { return 0x8221A634;  }
		/* 8221A504h case    2:*/		return 0x8221A508;
		  /* 8221A508h */ case    3:  		/* lwz R11, <#[R1 + 84]> */
		/* 8221A508h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8221A508h case    3:*/		return 0x8221A50C;
		  /* 8221A50Ch */ case    4:  		/* lwz R10, <#[R11 + 20384]> */
		/* 8221A50Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00004FA0) );
		/* 8221A50Ch case    4:*/		return 0x8221A510;
		  /* 8221A510h */ case    5:  		/* cmpwi CR6, R10, -1 */
		/* 8221A510h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8221A510h case    5:*/		return 0x8221A514;
		  /* 8221A514h */ case    6:  		/* bc 4, CR6_EQ, 12 */
		/* 8221A514h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8221A520;  }
		/* 8221A514h case    6:*/		return 0x8221A518;
		  /* 8221A518h */ case    7:  		/* li R10, 62 */
		/* 8221A518h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x3E);
		/* 8221A518h case    7:*/		return 0x8221A51C;
		  /* 8221A51Ch */ case    8:  		/* stw R10, <#[R11 + 20384]> */
		/* 8221A51Ch case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00004FA0) );
		/* 8221A51Ch case    8:*/		return 0x8221A520;
	}
	return 0x8221A520;
} // Block from 8221A4FCh-8221A520h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8221A520h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A520);
		  /* 8221A520h */ case    0:  		/* sth R19, <#[R31 + 2]> */
		/* 8221A520h case    0:*/		cpu::mem::store16( regs, regs.R19, (uint32)(regs.R31 + 0x00000002) );
		/* 8221A520h case    0:*/		return 0x8221A524;
		  /* 8221A524h */ case    1:  		/* li R10, 0 */
		/* 8221A524h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8221A524h case    1:*/		return 0x8221A528;
		  /* 8221A528h */ case    2:  		/* li R9, 7 */
		/* 8221A528h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x7);
		/* 8221A528h case    2:*/		return 0x8221A52C;
		  /* 8221A52Ch */ case    3:  		/* addi R11, R31, 8 */
		/* 8221A52Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x8);
		/* 8221A52Ch case    3:*/		return 0x8221A530;
		  /* 8221A530h */ case    4:  		/* li R12, -17477 */
		/* 8221A530h case    4:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFBBBB);
		/* 8221A530h case    4:*/		return 0x8221A534;
		  /* 8221A534h */ case    5:  		/* lwz R8, <#[R31]> */
		/* 8221A534h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 8221A534h case    5:*/		return 0x8221A538;
		  /* 8221A538h */ case    6:  		/* rlwinm R8, R8, 0, 16, 2 */
		/* 8221A538h case    6:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R8,regs.R8);
		/* 8221A538h case    6:*/		return 0x8221A53C;
		  /* 8221A53Ch */ case    7:  		/* stw R8, <#[R31]> */
		/* 8221A53Ch case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 8221A53Ch case    7:*/		return 0x8221A540;
		  /* 8221A540h */ case    8:  		/* sth R10, <#[R31 + 6]> */
		/* 8221A540h case    8:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R31 + 0x00000006) );
		/* 8221A540h case    8:*/		return 0x8221A544;
		  /* 8221A544h */ case    9:  		/* lwz R10, <#[R31 + 4]> */
		/* 8221A544h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8221A544h case    9:*/		return 0x8221A548;
		  /* 8221A548h */ case   10:  		/* rlwimi R10, R9, 17, 8, 15 */
		/* 8221A548h case   10:*/		cpu::op::rlwimi<0,17,8,15>(regs,&regs.R10,regs.R9);
		/* 8221A548h case   10:*/		return 0x8221A54C;
		  /* 8221A54Ch */ case   11:  		/* stw R10, <#[R31 + 4]> */
		/* 8221A54Ch case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8221A54Ch case   11:*/		return 0x8221A550;
		  /* 8221A550h */ case   12:  		/* sth R22, <#[R31 + 10]> */
		/* 8221A550h case   12:*/		cpu::mem::store16( regs, regs.R22, (uint32)(regs.R31 + 0x0000000A) );
		/* 8221A550h case   12:*/		return 0x8221A554;
		  /* 8221A554h */ case   13:  		/* lwz R10, <#[R31 + 8]> */
		/* 8221A554h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8221A554h case   13:*/		return 0x8221A558;
		  /* 8221A558h */ case   14:  		/* rlwimi R10, R19, 16, 8, 15 */
		/* 8221A558h case   14:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R10,regs.R19);
		/* 8221A558h case   14:*/		return 0x8221A55C;
		  /* 8221A55Ch */ case   15:  		/* stw R10, <#[R31 + 8]> */
		/* 8221A55Ch case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8221A55Ch case   15:*/		return 0x8221A560;
		  /* 8221A560h */ case   16:  		/* stb R22, <#[R31 + 8]> */
		/* 8221A560h case   16:*/		cpu::mem::store8( regs, regs.R22, (uint32)(regs.R31 + 0x00000008) );
		/* 8221A560h case   16:*/		return 0x8221A564;
		  /* 8221A564h */ case   17:  		/* lwzu R10, <#[R11 + 4]> */
		/* 8221A564h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8221A564h case   17:*/		return 0x8221A568;
		  /* 8221A568h */ case   18:  		/* and R10, R10, R12 */
		/* 8221A568h case   18:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 8221A568h case   18:*/		return 0x8221A56C;
		  /* 8221A56Ch */ case   19:  		/* ori R10, R10, 13107 */
		/* 8221A56Ch case   19:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x3333);
		/* 8221A56Ch case   19:*/		return 0x8221A570;
		  /* 8221A570h */ case   20:  		/* stw R10, <#[R11]> */
		/* 8221A570h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A570h case   20:*/		return 0x8221A574;
		  /* 8221A574h */ case   21:  		/* addi R11, R11, 4 */
		/* 8221A574h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221A574h case   21:*/		return 0x8221A578;
		  /* 8221A578h */ case   22:  		/* sth R22, <#[R11 + 2]> */
		/* 8221A578h case   22:*/		cpu::mem::store16( regs, regs.R22, (uint32)(regs.R11 + 0x00000002) );
		/* 8221A578h case   22:*/		return 0x8221A57C;
		  /* 8221A57Ch */ case   23:  		/* lwz R10, <#[R11]> */
		/* 8221A57Ch case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A57Ch case   23:*/		return 0x8221A580;
		  /* 8221A580h */ case   24:  		/* rlwimi R10, R19, 16, 8, 15 */
		/* 8221A580h case   24:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R10,regs.R19);
		/* 8221A580h case   24:*/		return 0x8221A584;
		  /* 8221A584h */ case   25:  		/* stw R10, <#[R11]> */
		/* 8221A584h case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A584h case   25:*/		return 0x8221A588;
		  /* 8221A588h */ case   26:  		/* stb R22, <#[R11]> */
		/* 8221A588h case   26:*/		cpu::mem::store8( regs, regs.R22, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A588h case   26:*/		return 0x8221A58C;
		  /* 8221A58Ch */ case   27:  		/* lwzu R10, <#[R11 + 4]> */
		/* 8221A58Ch case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8221A58Ch case   27:*/		return 0x8221A590;
		  /* 8221A590h */ case   28:  		/* and R10, R10, R12 */
		/* 8221A590h case   28:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 8221A590h case   28:*/		return 0x8221A594;
		  /* 8221A594h */ case   29:  		/* ori R10, R10, 13107 */
		/* 8221A594h case   29:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x3333);
		/* 8221A594h case   29:*/		return 0x8221A598;
		  /* 8221A598h */ case   30:  		/* b -1340 */
		/* 8221A598h case   30:*/		return 0x8221A05C;
		/* 8221A598h case   30:*/		return 0x8221A59C;
	}
	return 0x8221A59C;
} // Block from 8221A520h-8221A59Ch (31 instructions)

//////////////////////////////////////////////////////
// Block at 8221A59Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A59C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A59C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A59C);
		  /* 8221A59Ch */ case    0:  		/* lwz R10, <#[R1 + 152]> */
		/* 8221A59Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000098) );
		/* 8221A59Ch case    0:*/		return 0x8221A5A0;
		  /* 8221A5A0h */ case    1:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 8221A5A0h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 8221A5A0h case    1:*/		return 0x8221A5A4;
		  /* 8221A5A4h */ case    2:  		/* addi R11, R31, 4 */
		/* 8221A5A4h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 8221A5A4h case    2:*/		return 0x8221A5A8;
		  /* 8221A5A8h */ case    3:  		/* addi R10, R10, 456 */
		/* 8221A5A8h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1C8);
		/* 8221A5A8h case    3:*/		return 0x8221A5AC;
		  /* 8221A5ACh */ case    4:  		/* rlwinm. R8, R30, 0, 9, 9 */
		/* 8221A5ACh case    4:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R8,regs.R30);
		/* 8221A5ACh case    4:*/		return 0x8221A5B0;
		  /* 8221A5B0h */ case    5:  		/* lwzx R10, <#[R9 + R10]> */
		/* 8221A5B0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8221A5B0h case    5:*/		return 0x8221A5B4;
		  /* 8221A5B4h */ case    6:  		/* stw R26, <#[R31]> */
		/* 8221A5B4h case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000000) );
		/* 8221A5B4h case    6:*/		return 0x8221A5B8;
		  /* 8221A5B8h */ case    7:  		/* stw R30, <#[R31 + 4]> */
		/* 8221A5B8h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 8221A5B8h case    7:*/		return 0x8221A5BC;
		  /* 8221A5BCh */ case    8:  		/* addi R31, R11, 4 */
		/* 8221A5BCh case    8:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 8221A5BCh case    8:*/		return 0x8221A5C0;
		  /* 8221A5C0h */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 8221A5C0h case    9:*/		if ( regs.CR[0].eq ) { return 0x8221A5D0;  }
		/* 8221A5C0h case    9:*/		return 0x8221A5C4;
		  /* 8221A5C4h */ case   10:  		/* lwz R11, <#[R1 + 104]> */
		/* 8221A5C4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 8221A5C4h case   10:*/		return 0x8221A5C8;
		  /* 8221A5C8h */ case   11:  		/* stw R11, <#[R31]> */
		/* 8221A5C8h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8221A5C8h case   11:*/		return 0x8221A5CC;
		  /* 8221A5CCh */ case   12:  		/* addi R31, R31, 4 */
		/* 8221A5CCh case   12:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221A5CCh case   12:*/		return 0x8221A5D0;
	}
	return 0x8221A5D0;
} // Block from 8221A59Ch-8221A5D0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8221A5D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A5D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A5D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A5D0);
		  /* 8221A5D0h */ case    0:  		/* rlwinm. R11, R30, 0, 8, 8 */
		/* 8221A5D0h case    0:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R30);
		/* 8221A5D0h case    0:*/		return 0x8221A5D4;
		  /* 8221A5D4h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8221A5D4h case    1:*/		if ( regs.CR[0].eq ) { return 0x8221A5E4;  }
		/* 8221A5D4h case    1:*/		return 0x8221A5D8;
		  /* 8221A5D8h */ case    2:  		/* lwz R11, <#[R1 + 108]> */
		/* 8221A5D8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 8221A5D8h case    2:*/		return 0x8221A5DC;
		  /* 8221A5DCh */ case    3:  		/* stw R11, <#[R31]> */
		/* 8221A5DCh case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8221A5DCh case    3:*/		return 0x8221A5E0;
		  /* 8221A5E0h */ case    4:  		/* addi R31, R31, 4 */
		/* 8221A5E0h case    4:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221A5E0h case    4:*/		return 0x8221A5E4;
	}
	return 0x8221A5E4;
} // Block from 8221A5D0h-8221A5E4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221A5E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A5E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A5E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A5E4);
		  /* 8221A5E4h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 8221A5E4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8221A5E4h case    0:*/		return 0x8221A5E8;
		  /* 8221A5E8h */ case    1:  		/* bc 12, CR6_EQ, 72 */
		/* 8221A5E8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8221A630;  }
		/* 8221A5E8h case    1:*/		return 0x8221A5EC;
		  /* 8221A5ECh */ case    2:  		/* addi R11, R1, 112 */
		/* 8221A5ECh case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 8221A5ECh case    2:*/		return 0x8221A5F0;
		  /* 8221A5F0h */ case    3:  		/* mtspr CTR, R10 */
		/* 8221A5F0h case    3:*/		regs.CTR = regs.R10;
		/* 8221A5F0h case    3:*/		return 0x8221A5F4;
		  /* 8221A5F4h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 8221A5F4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A5F4h case    4:*/		return 0x8221A5F8;
		  /* 8221A5F8h */ case    5:  		/* rlwinm. R9, R10, 0, 9, 9 */
		/* 8221A5F8h case    5:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R10);
		/* 8221A5F8h case    5:*/		return 0x8221A5FC;
		  /* 8221A5FCh */ case    6:  		/* stw R10, <#[R31]> */
		/* 8221A5FCh case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8221A5FCh case    6:*/		return 0x8221A600;
		  /* 8221A600h */ case    7:  		/* addi R31, R31, 4 */
		/* 8221A600h case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221A600h case    7:*/		return 0x8221A604;
		  /* 8221A604h */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 8221A604h case    8:*/		if ( regs.CR[0].eq ) { return 0x8221A614;  }
		/* 8221A604h case    8:*/		return 0x8221A608;
		  /* 8221A608h */ case    9:  		/* lwz R9, <#[R11 + 12]> */
		/* 8221A608h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 8221A608h case    9:*/		return 0x8221A60C;
		  /* 8221A60Ch */ case   10:  		/* stw R9, <#[R31]> */
		/* 8221A60Ch case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 8221A60Ch case   10:*/		return 0x8221A610;
		  /* 8221A610h */ case   11:  		/* addi R31, R31, 4 */
		/* 8221A610h case   11:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221A610h case   11:*/		return 0x8221A614;
	}
	return 0x8221A614;
} // Block from 8221A5E4h-8221A614h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8221A614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A614);
		  /* 8221A614h */ case    0:  		/* rlwinm. R10, R10, 0, 8, 8 */
		/* 8221A614h case    0:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R10);
		/* 8221A614h case    0:*/		return 0x8221A618;
		  /* 8221A618h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8221A618h case    1:*/		if ( regs.CR[0].eq ) { return 0x8221A628;  }
		/* 8221A618h case    1:*/		return 0x8221A61C;
		  /* 8221A61Ch */ case    2:  		/* lwz R10, <#[R11 + 24]> */
		/* 8221A61Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 8221A61Ch case    2:*/		return 0x8221A620;
		  /* 8221A620h */ case    3:  		/* stw R10, <#[R31]> */
		/* 8221A620h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8221A620h case    3:*/		return 0x8221A624;
		  /* 8221A624h */ case    4:  		/* addi R31, R31, 4 */
		/* 8221A624h case    4:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221A624h case    4:*/		return 0x8221A628;
	}
	return 0x8221A628;
} // Block from 8221A614h-8221A628h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221A628h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A628);
		  /* 8221A628h */ case    0:  		/* addi R11, R11, 4 */
		/* 8221A628h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221A628h case    0:*/		return 0x8221A62C;
		  /* 8221A62Ch */ case    1:  		/* bc 16, CR0_LT, -56 */
		/* 8221A62Ch case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221A5F4;  }
		/* 8221A62Ch case    1:*/		return 0x8221A630;
	}
	return 0x8221A630;
} // Block from 8221A628h-8221A630h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221A630h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A630);
		  /* 8221A630h */ case    0:  		/* addi R23, R23, 1 */
		/* 8221A630h case    0:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 8221A630h case    0:*/		return 0x8221A634;
	}
	return 0x8221A634;
} // Block from 8221A630h-8221A634h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221A634h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A634( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A634) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A634);
		  /* 8221A634h */ case    0:  		/* lwz R11, <#[R1 + 156]> */
		/* 8221A634h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000009C) );
		/* 8221A634h case    0:*/		return 0x8221A638;
		  /* 8221A638h */ case    1:  		/* lwz R10, <#[R1 + 84]> */
		/* 8221A638h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8221A638h case    1:*/		return 0x8221A63C;
		  /* 8221A63Ch */ case    2:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8221A63Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8221A63Ch case    2:*/		return 0x8221A640;
		  /* 8221A640h */ case    3:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 8221A640h case    3:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 8221A640h case    3:*/		return 0x8221A644;
		  /* 8221A644h */ case    4:  		/* bc 12, CR0_EQ, 28 */
		/* 8221A644h case    4:*/		if ( regs.CR[0].eq ) { return 0x8221A660;  }
		/* 8221A644h case    4:*/		return 0x8221A648;
		  /* 8221A648h */ case    5:  		/* mr R6, R31 */
		/* 8221A648h case    5:*/		regs.R6 = regs.R31;
		/* 8221A648h case    5:*/		return 0x8221A64C;
		  /* 8221A64Ch */ case    6:  		/* addi R5, R1, 108 */
		/* 8221A64Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x6C);
		/* 8221A64Ch case    6:*/		return 0x8221A650;
		  /* 8221A650h */ case    7:  		/* addi R4, R1, 104 */
		/* 8221A650h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x68);
		/* 8221A650h case    7:*/		return 0x8221A654;
		  /* 8221A654h */ case    8:  		/* addi R3, R1, 100 */
		/* 8221A654h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x64);
		/* 8221A654h case    8:*/		return 0x8221A658;
		  /* 8221A658h */ case    9:  		/* bl -16736 */
		/* 8221A658h case    9:*/		regs.LR = 0x8221A65C; return 0x822164F8;
		/* 8221A658h case    9:*/		return 0x8221A65C;
		  /* 8221A65Ch */ case   10:  		/* addi R23, R23, 1 */
		/* 8221A65Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 8221A65Ch case   10:*/		return 0x8221A660;
	}
	return 0x8221A660;
} // Block from 8221A634h-8221A660h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8221A660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A660);
		  /* 8221A660h */ case    0:  		/* lwz R11, <#[R1 + 428]> */
		/* 8221A660h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001AC) );
		/* 8221A660h case    0:*/		return 0x8221A664;
		  /* 8221A664h */ case    1:  		/* lwz R3, <#[R1 + 412]> */
		/* 8221A664h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000019C) );
		/* 8221A664h case    1:*/		return 0x8221A668;
		  /* 8221A668h */ case    2:  		/* stw R23, <#[R11]> */
		/* 8221A668h case    2:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A668h case    2:*/		return 0x8221A66C;
		  /* 8221A66Ch */ case    3:  		/* addi R1, R1, 384 */
		/* 8221A66Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x180);
		/* 8221A66Ch case    3:*/		return 0x8221A670;
		  /* 8221A670h */ case    4:  		/* b -1610752 */
		/* 8221A670h case    4:*/		return 0x82091270;
		/* 8221A670h case    4:*/		return 0x8221A674;
		  /* 8221A674h */ case    5:  		/* nop */
		/* 8221A674h case    5:*/		cpu::op::nop();
		/* 8221A674h case    5:*/		return 0x8221A678;
	}
	return 0x8221A678;
} // Block from 8221A660h-8221A678h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221A678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A678);
		  /* 8221A678h */ case    0:  		/* mfspr R12, LR */
		/* 8221A678h case    0:*/		regs.R12 = regs.LR;
		/* 8221A678h case    0:*/		return 0x8221A67C;
		  /* 8221A67Ch */ case    1:  		/* bl -1610844 */
		/* 8221A67Ch case    1:*/		regs.LR = 0x8221A680; return 0x82091220;
		/* 8221A67Ch case    1:*/		return 0x8221A680;
		  /* 8221A680h */ case    2:  		/* stwu R1, <#[R1 - 928]> */
		/* 8221A680h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFC60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFC60);
		/* 8221A680h case    2:*/		return 0x8221A684;
		  /* 8221A684h */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 8221A684h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8221A684h case    3:*/		return 0x8221A688;
		  /* 8221A688h */ case    4:  		/* mr R30, R3 */
		/* 8221A688h case    4:*/		regs.R30 = regs.R3;
		/* 8221A688h case    4:*/		return 0x8221A68C;
		  /* 8221A68Ch */ case    5:  		/* li R21, 0 */
		/* 8221A68Ch case    5:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 8221A68Ch case    5:*/		return 0x8221A690;
		  /* 8221A690h */ case    6:  		/* lwz R31, <#[R3 + 24]> */
		/* 8221A690h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000018) );
		/* 8221A690h case    6:*/		return 0x8221A694;
		  /* 8221A694h */ case    7:  		/* li R19, 1 */
		/* 8221A694h case    7:*/		cpu::op::li<0>(regs,&regs.R19,0x1);
		/* 8221A694h case    7:*/		return 0x8221A698;
		  /* 8221A698h */ case    8:  		/* lwz R3, <#[R3]> */
		/* 8221A698h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000000) );
		/* 8221A698h case    8:*/		return 0x8221A69C;
		  /* 8221A69Ch */ case    9:  		/* li R4, 2080 */
		/* 8221A69Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x820);
		/* 8221A69Ch case    9:*/		return 0x8221A6A0;
		  /* 8221A6A0h */ case   10:  		/* stw R21, <#[R1 + 92]> */
		/* 8221A6A0h case   10:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x0000005C) );
		/* 8221A6A0h case   10:*/		return 0x8221A6A4;
		  /* 8221A6A4h */ case   11:  		/* mr R16, R21 */
		/* 8221A6A4h case   11:*/		regs.R16 = regs.R21;
		/* 8221A6A4h case   11:*/		return 0x8221A6A8;
		  /* 8221A6A8h */ case   12:  		/* stw R19, <#[R1 + 104]> */
		/* 8221A6A8h case   12:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000068) );
		/* 8221A6A8h case   12:*/		return 0x8221A6AC;
		  /* 8221A6ACh */ case   13:  		/* lwz R29, <#[R30 + 28]> */
		/* 8221A6ACh case   13:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x0000001C) );
		/* 8221A6ACh case   13:*/		return 0x8221A6B0;
		  /* 8221A6B0h */ case   14:  		/* mr R18, R21 */
		/* 8221A6B0h case   14:*/		regs.R18 = regs.R21;
		/* 8221A6B0h case   14:*/		return 0x8221A6B4;
		  /* 8221A6B4h */ case   15:  		/* mr R15, R21 */
		/* 8221A6B4h case   15:*/		regs.R15 = regs.R21;
		/* 8221A6B4h case   15:*/		return 0x8221A6B8;
		  /* 8221A6B8h */ case   16:  		/* mtspr CTR, R11 */
		/* 8221A6B8h case   16:*/		regs.CTR = regs.R11;
		/* 8221A6B8h case   16:*/		return 0x8221A6BC;
		  /* 8221A6BCh */ case   17:  		/* mr R17, R19 */
		/* 8221A6BCh case   17:*/		regs.R17 = regs.R19;
		/* 8221A6BCh case   17:*/		return 0x8221A6C0;
		  /* 8221A6C0h */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 8221A6C0h case   18:*/		if ( 1 ) { regs.LR = 0x8221A6C4; return (uint32)regs.CTR; }
		/* 8221A6C0h case   18:*/		return 0x8221A6C4;
		  /* 8221A6C4h */ case   19:  		/* li R11, 32 */
		/* 8221A6C4h case   19:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 8221A6C4h case   19:*/		return 0x8221A6C8;
		  /* 8221A6C8h */ case   20:  		/* addi R10, R1, 636 */
		/* 8221A6C8h case   20:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x27C);
		/* 8221A6C8h case   20:*/		return 0x8221A6CC;
		  /* 8221A6CCh */ case   21:  		/* mr R26, R21 */
		/* 8221A6CCh case   21:*/		regs.R26 = regs.R21;
		/* 8221A6CCh case   21:*/		return 0x8221A6D0;
		  /* 8221A6D0h */ case   22:  		/* mr R23, R3 */
		/* 8221A6D0h case   22:*/		regs.R23 = regs.R3;
		/* 8221A6D0h case   22:*/		return 0x8221A6D4;
		  /* 8221A6D4h */ case   23:  		/* mr R9, R21 */
		/* 8221A6D4h case   23:*/		regs.R9 = regs.R21;
		/* 8221A6D4h case   23:*/		return 0x8221A6D8;
		  /* 8221A6D8h */ case   24:  		/* mtspr CTR, R11 */
		/* 8221A6D8h case   24:*/		regs.CTR = regs.R11;
		/* 8221A6D8h case   24:*/		return 0x8221A6DC;
		  /* 8221A6DCh */ case   25:  		/* stwu R9, <#[R10 + 4]> */
		/* 8221A6DCh case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 8221A6DCh case   25:*/		return 0x8221A6E0;
		  /* 8221A6E0h */ case   26:  		/* bc 16, CR0_LT, -4 */
		/* 8221A6E0h case   26:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221A6DC;  }
		/* 8221A6E0h case   26:*/		return 0x8221A6E4;
		  /* 8221A6E4h */ case   27:  		/* li R11, 32 */
		/* 8221A6E4h case   27:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 8221A6E4h case   27:*/		return 0x8221A6E8;
		  /* 8221A6E8h */ case   28:  		/* addi R10, R1, 348 */
		/* 8221A6E8h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x15C);
		/* 8221A6E8h case   28:*/		return 0x8221A6EC;
		  /* 8221A6ECh */ case   29:  		/* mr R9, R21 */
		/* 8221A6ECh case   29:*/		regs.R9 = regs.R21;
		/* 8221A6ECh case   29:*/		return 0x8221A6F0;
		  /* 8221A6F0h */ case   30:  		/* mtspr CTR, R11 */
		/* 8221A6F0h case   30:*/		regs.CTR = regs.R11;
		/* 8221A6F0h case   30:*/		return 0x8221A6F4;
		  /* 8221A6F4h */ case   31:  		/* stwu R9, <#[R10 + 4]> */
		/* 8221A6F4h case   31:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 8221A6F4h case   31:*/		return 0x8221A6F8;
		  /* 8221A6F8h */ case   32:  		/* bc 16, CR0_LT, -4 */
		/* 8221A6F8h case   32:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221A6F4;  }
		/* 8221A6F8h case   32:*/		return 0x8221A6FC;
		  /* 8221A6FCh */ case   33:  		/* mr R3, R30 */
		/* 8221A6FCh case   33:*/		regs.R3 = regs.R30;
		/* 8221A6FCh case   33:*/		return 0x8221A700;
		  /* 8221A700h */ case   34:  		/* bl -46296 */
		/* 8221A700h case   34:*/		regs.LR = 0x8221A704; return 0x8220F228;
		/* 8221A700h case   34:*/		return 0x8221A704;
		  /* 8221A704h */ case   35:  		/* stw R3, <#[R29 + 23360]> */
		/* 8221A704h case   35:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00005B40) );
		/* 8221A704h case   35:*/		return 0x8221A708;
		  /* 8221A708h */ case   36:  		/* mr R3, R30 */
		/* 8221A708h case   36:*/		regs.R3 = regs.R30;
		/* 8221A708h case   36:*/		return 0x8221A70C;
		  /* 8221A70Ch */ case   37:  		/* bl -46308 */
		/* 8221A70Ch case   37:*/		regs.LR = 0x8221A710; return 0x8220F228;
		/* 8221A70Ch case   37:*/		return 0x8221A710;
		  /* 8221A710h */ case   38:  		/* stw R3, <#[R29 + 23364]> */
		/* 8221A710h case   38:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00005B44) );
		/* 8221A710h case   38:*/		return 0x8221A714;
		  /* 8221A714h */ case   39:  		/* mr R3, R30 */
		/* 8221A714h case   39:*/		regs.R3 = regs.R30;
		/* 8221A714h case   39:*/		return 0x8221A718;
		  /* 8221A718h */ case   40:  		/* bl -46320 */
		/* 8221A718h case   40:*/		regs.LR = 0x8221A71C; return 0x8220F228;
		/* 8221A718h case   40:*/		return 0x8221A71C;
		  /* 8221A71Ch */ case   41:  		/* stw R3, <#[R29 + 23212]> */
		/* 8221A71Ch case   41:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00005AAC) );
		/* 8221A71Ch case   41:*/		return 0x8221A720;
		  /* 8221A720h */ case   42:  		/* mr R3, R30 */
		/* 8221A720h case   42:*/		regs.R3 = regs.R30;
		/* 8221A720h case   42:*/		return 0x8221A724;
		  /* 8221A724h */ case   43:  		/* bl -46332 */
		/* 8221A724h case   43:*/		regs.LR = 0x8221A728; return 0x8220F228;
		/* 8221A724h case   43:*/		return 0x8221A728;
		  /* 8221A728h */ case   44:  		/* stw R3, <#[R29 + 23216]> */
		/* 8221A728h case   44:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00005AB0) );
		/* 8221A728h case   44:*/		return 0x8221A72C;
		  /* 8221A72Ch */ case   45:  		/* mr R3, R30 */
		/* 8221A72Ch case   45:*/		regs.R3 = regs.R30;
		/* 8221A72Ch case   45:*/		return 0x8221A730;
		  /* 8221A730h */ case   46:  		/* bl -46344 */
		/* 8221A730h case   46:*/		regs.LR = 0x8221A734; return 0x8220F228;
		/* 8221A730h case   46:*/		return 0x8221A734;
		  /* 8221A734h */ case   47:  		/* stw R3, <#[R29 + 23220]> */
		/* 8221A734h case   47:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00005AB4) );
		/* 8221A734h case   47:*/		return 0x8221A738;
		  /* 8221A738h */ case   48:  		/* mr R3, R30 */
		/* 8221A738h case   48:*/		regs.R3 = regs.R30;
		/* 8221A738h case   48:*/		return 0x8221A73C;
		  /* 8221A73Ch */ case   49:  		/* bl -46356 */
		/* 8221A73Ch case   49:*/		regs.LR = 0x8221A740; return 0x8220F228;
		/* 8221A73Ch case   49:*/		return 0x8221A740;
		  /* 8221A740h */ case   50:  		/* lis R11, -32216 */
		/* 8221A740h case   50:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 8221A740h case   50:*/		return 0x8221A744;
		  /* 8221A744h */ case   51:  		/* lis R10, -32252 */
		/* 8221A744h case   51:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221A744h case   51:*/		return 0x8221A748;
		  /* 8221A748h */ case   52:  		/* stw R3, <#[R29 + 23352]> */
		/* 8221A748h case   52:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00005B38) );
		/* 8221A748h case   52:*/		return 0x8221A74C;
		  /* 8221A74Ch */ case   53:  		/* addi R11, R11, 9424 */
		/* 8221A74Ch case   53:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24D0);
		/* 8221A74Ch case   53:*/		return 0x8221A750;
		  /* 8221A750h */ case   54:  		/* addi R10, R10, -4704 */
		/* 8221A750h case   54:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFEDA0);
		/* 8221A750h case   54:*/		return 0x8221A754;
		  /* 8221A754h */ case   55:  		/* lis R9, -32252 */
		/* 8221A754h case   55:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8221A754h case   55:*/		return 0x8221A758;
		  /* 8221A758h */ case   56:  		/* stw R11, <#[R1 + 124]> */
		/* 8221A758h case   56:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 8221A758h case   56:*/		return 0x8221A75C;
		  /* 8221A75Ch */ case   57:  		/* lis R8, -32252 */
		/* 8221A75Ch case   57:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8204);
		/* 8221A75Ch case   57:*/		return 0x8221A760;
		  /* 8221A760h */ case   58:  		/* stw R10, <#[R1 + 132]> */
		/* 8221A760h case   58:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000084) );
		/* 8221A760h case   58:*/		return 0x8221A764;
		  /* 8221A764h */ case   59:  		/* lis R7, -32252 */
		/* 8221A764h case   59:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8204);
		/* 8221A764h case   59:*/		return 0x8221A768;
		  /* 8221A768h */ case   60:  		/* addi R9, R9, -4748 */
		/* 8221A768h case   60:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFED74);
		/* 8221A768h case   60:*/		return 0x8221A76C;
		  /* 8221A76Ch */ case   61:  		/* addi R11, R8, -4776 */
		/* 8221A76Ch case   61:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0xFFFFED58);
		/* 8221A76Ch case   61:*/		return 0x8221A770;
		  /* 8221A770h */ case   62:  		/* addi R10, R7, -25364 */
		/* 8221A770h case   62:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R7,0xFFFF9CEC);
		/* 8221A770h case   62:*/		return 0x8221A774;
		  /* 8221A774h */ case   63:  		/* stw R9, <#[R1 + 116]> */
		/* 8221A774h case   63:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000074) );
		/* 8221A774h case   63:*/		return 0x8221A778;
		  /* 8221A778h */ case   64:  		/* lis R6, -32252 */
		/* 8221A778h case   64:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8204);
		/* 8221A778h case   64:*/		return 0x8221A77C;
		  /* 8221A77Ch */ case   65:  		/* stw R11, <#[R1 + 112]> */
		/* 8221A77Ch case   65:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 8221A77Ch case   65:*/		return 0x8221A780;
		  /* 8221A780h */ case   66:  		/* lis R5, -32252 */
		/* 8221A780h case   66:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8204);
		/* 8221A780h case   66:*/		return 0x8221A784;
		  /* 8221A784h */ case   67:  		/* stw R10, <#[R1 + 96]> */
		/* 8221A784h case   67:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 8221A784h case   67:*/		return 0x8221A788;
		  /* 8221A788h */ case   68:  		/* lis R4, -32252 */
		/* 8221A788h case   68:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8204);
		/* 8221A788h case   68:*/		return 0x8221A78C;
		  /* 8221A78Ch */ case   69:  		/* addi R9, R6, -4820 */
		/* 8221A78Ch case   69:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R6,0xFFFFED2C);
		/* 8221A78Ch case   69:*/		return 0x8221A790;
		  /* 8221A790h */ case   70:  		/* addi R11, R5, -4876 */
		/* 8221A790h case   70:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R5,0xFFFFECF4);
		/* 8221A790h case   70:*/		return 0x8221A794;
		  /* 8221A794h */ case   71:  		/* addi R10, R4, -4892 */
		/* 8221A794h case   71:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R4,0xFFFFECE4);
		/* 8221A794h case   71:*/		return 0x8221A798;
		  /* 8221A798h */ case   72:  		/* stw R9, <#[R1 + 120]> */
		/* 8221A798h case   72:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000078) );
		/* 8221A798h case   72:*/		return 0x8221A79C;
		  /* 8221A79Ch */ case   73:  		/* lis R3, -32253 */
		/* 8221A79Ch case   73:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8203);
		/* 8221A79Ch case   73:*/		return 0x8221A7A0;
		  /* 8221A7A0h */ case   74:  		/* stw R11, <#[R1 + 108]> */
		/* 8221A7A0h case   74:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 8221A7A0h case   74:*/		return 0x8221A7A4;
		  /* 8221A7A4h */ case   75:  		/* lis R28, -32252 */
		/* 8221A7A4h case   75:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8204);
		/* 8221A7A4h case   75:*/		return 0x8221A7A8;
		  /* 8221A7A8h */ case   76:  		/* stw R10, <#[R1 + 128]> */
		/* 8221A7A8h case   76:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 8221A7A8h case   76:*/		return 0x8221A7AC;
		  /* 8221A7ACh */ case   77:  		/* lis R27, -32252 */
		/* 8221A7ACh case   77:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8204);
		/* 8221A7ACh case   77:*/		return 0x8221A7B0;
		  /* 8221A7B0h */ case   78:  		/* addi R9, R3, 27460 */
		/* 8221A7B0h case   78:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R3,0x6B44);
		/* 8221A7B0h case   78:*/		return 0x8221A7B4;
		  /* 8221A7B4h */ case   79:  		/* addi R11, R28, -4948 */
		/* 8221A7B4h case   79:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFECAC);
		/* 8221A7B4h case   79:*/		return 0x8221A7B8;
		  /* 8221A7B8h */ case   80:  		/* addi R10, R27, -7312 */
		/* 8221A7B8h case   80:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0xFFFFE370);
		/* 8221A7B8h case   80:*/		return 0x8221A7BC;
		  /* 8221A7BCh */ case   81:  		/* stw R9, <#[R1 + 88]> */
		/* 8221A7BCh case   81:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8221A7BCh case   81:*/		return 0x8221A7C0;
		  /* 8221A7C0h */ case   82:  		/* li R14, 65 */
		/* 8221A7C0h case   82:*/		cpu::op::li<0>(regs,&regs.R14,0x41);
		/* 8221A7C0h case   82:*/		return 0x8221A7C4;
		  /* 8221A7C4h */ case   83:  		/* stw R11, <#[R1 + 100]> */
		/* 8221A7C4h case   83:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 8221A7C4h case   83:*/		return 0x8221A7C8;
		  /* 8221A7C8h */ case   84:  		/* stw R10, <#[R1 + 84]> */
		/* 8221A7C8h case   84:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8221A7C8h case   84:*/		return 0x8221A7CC;
		  /* 8221A7CCh */ case   85:  		/* lwz R10, <#[R1 + 104]> */
		/* 8221A7CCh case   85:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000068) );
		/* 8221A7CCh case   85:*/		return 0x8221A7D0;
		  /* 8221A7D0h */ case   86:  		/* mr R24, R31 */
		/* 8221A7D0h case   86:*/		regs.R24 = regs.R31;
		/* 8221A7D0h case   86:*/		return 0x8221A7D4;
		  /* 8221A7D4h */ case   87:  		/* lhz R11, <#[R31 + 2]> */
		/* 8221A7D4h case   87:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000002) );
		/* 8221A7D4h case   87:*/		return 0x8221A7D8;
		  /* 8221A7D8h */ case   88:  		/* mr R20, R21 */
		/* 8221A7D8h case   88:*/		regs.R20 = regs.R21;
		/* 8221A7D8h case   88:*/		return 0x8221A7DC;
		  /* 8221A7DCh */ case   89:  		/* stw R19, <#[R1 + 80]> */
		/* 8221A7DCh case   89:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000050) );
		/* 8221A7DCh case   89:*/		return 0x8221A7E0;
		  /* 8221A7E0h */ case   90:  		/* cmplwi CR6, R10, 1 */
		/* 8221A7E0h case   90:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8221A7E0h case   90:*/		return 0x8221A7E4;
		  /* 8221A7E4h */ case   91:  		/* bc 4, CR6_EQ, 588 */
		/* 8221A7E4h case   91:*/		if ( !regs.CR[6].eq ) { return 0x8221AA30;  }
		/* 8221A7E4h case   91:*/		return 0x8221A7E8;
		  /* 8221A7E8h */ case   92:  		/* lwz R9, <#[R30 + 28]> */
		/* 8221A7E8h case   92:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x0000001C) );
		/* 8221A7E8h case   92:*/		return 0x8221A7EC;
		  /* 8221A7ECh */ case   93:  		/* addi R10, R23, 4 */
		/* 8221A7ECh case   93:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R23,0x4);
		/* 8221A7ECh case   93:*/		return 0x8221A7F0;
		  /* 8221A7F0h */ case   94:  		/* sth R14, <#[R23 + 2]> */
		/* 8221A7F0h case   94:*/		cpu::mem::store16( regs, regs.R14, (uint32)(regs.R23 + 0x00000002) );
		/* 8221A7F0h case   94:*/		return 0x8221A7F4;
		  /* 8221A7F4h */ case   95:  		/* li R12, -30584 */
		/* 8221A7F4h case   95:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFF8888);
		/* 8221A7F4h case   95:*/		return 0x8221A7F8;
		  /* 8221A7F8h */ case   96:  		/* lwz R11, <#[R23]> */
		/* 8221A7F8h case   96:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 8221A7F8h case   96:*/		return 0x8221A7FC;
		  /* 8221A7FCh */ case   97:  		/* rlwinm R11, R11, 0, 16, 2 */
		/* 8221A7FCh case   97:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R11,regs.R11);
		/* 8221A7FCh case   97:*/		return 0x8221A800;
		  /* 8221A800h */ case   98:  		/* stw R11, <#[R23]> */
		/* 8221A800h case   98:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 8221A800h case   98:*/		return 0x8221A804;
		  /* 8221A804h */ case   99:  		/* addi R11, R10, 4 */
		/* 8221A804h case   99:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x4);
		/* 8221A804h case   99:*/		return 0x8221A808;
		  /* 8221A808h */ case  100:  		/* lwz R10, <#[R9 + 23360]> */
		/* 8221A808h case  100:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00005B40) );
		/* 8221A808h case  100:*/		return 0x8221A80C;
		  /* 8221A80Ch */ case  101:  		/* sth R10, <#[R23 + 6]> */
		/* 8221A80Ch case  101:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R23 + 0x00000006) );
		/* 8221A80Ch case  101:*/		return 0x8221A810;
		  /* 8221A810h */ case  102:  		/* addi R11, R11, 4 */
		/* 8221A810h case  102:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221A810h case  102:*/		return 0x8221A814;
		  /* 8221A814h */ case  103:  		/* lwz R10, <#[R23 + 4]> */
		/* 8221A814h case  103:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000004) );
		/* 8221A814h case  103:*/		return 0x8221A818;
		  /* 8221A818h */ case  104:  		/* rlwimi R10, R19, 18, 8, 15 */
		/* 8221A818h case  104:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R10,regs.R19);
		/* 8221A818h case  104:*/		return 0x8221A81C;
		  /* 8221A81Ch */ case  105:  		/* stw R10, <#[R23 + 4]> */
		/* 8221A81Ch case  105:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R23 + 0x00000004) );
		/* 8221A81Ch case  105:*/		return 0x8221A820;
		  /* 8221A820h */ case  106:  		/* sth R21, <#[R23 + 10]> */
		/* 8221A820h case  106:*/		cpu::mem::store16( regs, regs.R21, (uint32)(regs.R23 + 0x0000000A) );
		/* 8221A820h case  106:*/		return 0x8221A824;
		  /* 8221A824h */ case  107:  		/* lwz R10, <#[R23 + 8]> */
		/* 8221A824h case  107:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000008) );
		/* 8221A824h case  107:*/		return 0x8221A828;
		  /* 8221A828h */ case  108:  		/* rlwimi R10, R14, 16, 8, 15 */
		/* 8221A828h case  108:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R10,regs.R14);
		/* 8221A828h case  108:*/		return 0x8221A82C;
		  /* 8221A82Ch */ case  109:  		/* stw R10, <#[R23 + 8]> */
		/* 8221A82Ch case  109:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R23 + 0x00000008) );
		/* 8221A82Ch case  109:*/		return 0x8221A830;
		  /* 8221A830h */ case  110:  		/* stb R19, <#[R23 + 8]> */
		/* 8221A830h case  110:*/		cpu::mem::store8( regs, regs.R19, (uint32)(regs.R23 + 0x00000008) );
		/* 8221A830h case  110:*/		return 0x8221A834;
		  /* 8221A834h */ case  111:  		/* lwz R10, <#[R11]> */
		/* 8221A834h case  111:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A834h case  111:*/		return 0x8221A838;
		  /* 8221A838h */ case  112:  		/* and R10, R10, R12 */
		/* 8221A838h case  112:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 8221A838h case  112:*/		return 0x8221A83C;
		  /* 8221A83Ch */ case  113:  		/* stw R10, <#[R11]> */
		/* 8221A83Ch case  113:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A83Ch case  113:*/		return 0x8221A840;
		  /* 8221A840h */ case  114:  		/* addi R11, R11, 4 */
		/* 8221A840h case  114:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221A840h case  114:*/		return 0x8221A844;
		  /* 8221A844h */ case  115:  		/* stw R19, <#[R1 + 80]> */
		/* 8221A844h case  115:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000050) );
		/* 8221A844h case  115:*/		return 0x8221A848;
		  /* 8221A848h */ case  116:  		/* sth R21, <#[R11 + 2]> */
		/* 8221A848h case  116:*/		cpu::mem::store16( regs, regs.R21, (uint32)(regs.R11 + 0x00000002) );
		/* 8221A848h case  116:*/		return 0x8221A84C;
		  /* 8221A84Ch */ case  117:  		/* lwz R10, <#[R11]> */
		/* 8221A84Ch case  117:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A84Ch case  117:*/		return 0x8221A850;
		  /* 8221A850h */ case  118:  		/* rlwimi R10, R14, 16, 8, 15 */
		/* 8221A850h case  118:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R10,regs.R14);
		/* 8221A850h case  118:*/		return 0x8221A854;
		  /* 8221A854h */ case  119:  		/* stw R10, <#[R11]> */
		/* 8221A854h case  119:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A854h case  119:*/		return 0x8221A858;
		  /* 8221A858h */ case  120:  		/* stb R19, <#[R11]> */
		/* 8221A858h case  120:*/		cpu::mem::store8( regs, regs.R19, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A858h case  120:*/		return 0x8221A85C;
		  /* 8221A85Ch */ case  121:  		/* addi R11, R11, 4 */
		/* 8221A85Ch case  121:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221A85Ch case  121:*/		return 0x8221A860;
		  /* 8221A860h */ case  122:  		/* lwz R10, <#[R11]> */
		/* 8221A860h case  122:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A860h case  122:*/		return 0x8221A864;
		  /* 8221A864h */ case  123:  		/* and R10, R10, R12 */
		/* 8221A864h case  123:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 8221A864h case  123:*/		return 0x8221A868;
		  /* 8221A868h */ case  124:  		/* stw R10, <#[R11]> */
		/* 8221A868h case  124:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A868h case  124:*/		return 0x8221A86C;
		  /* 8221A86Ch */ case  125:  		/* lwz R10, <#[R29]> */
		/* 8221A86Ch case  125:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 8221A86Ch case  125:*/		return 0x8221A870;
		  /* 8221A870h */ case  126:  		/* cmplwi CR6, R10, 0 */
		/* 8221A870h case  126:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8221A870h case  126:*/		return 0x8221A874;
		  /* 8221A874h */ case  127:  		/* bc 4, CR6_EQ, 428 */
		/* 8221A874h case  127:*/		if ( !regs.CR[6].eq ) { return 0x8221AA20;  }
		/* 8221A874h case  127:*/		return 0x8221A878;
		  /* 8221A878h */ case  128:  		/* addi R11, R11, 4 */
		/* 8221A878h case  128:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221A878h case  128:*/		return 0x8221A87C;
		  /* 8221A87Ch */ case  129:  		/* li R7, 3 */
		/* 8221A87Ch case  129:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 8221A87Ch case  129:*/		return 0x8221A880;
		  /* 8221A880h */ case  130:  		/* li R8, 7 */
		/* 8221A880h case  130:*/		cpu::op::li<0>(regs,&regs.R8,0x7);
		/* 8221A880h case  130:*/		return 0x8221A884;
		  /* 8221A884h */ case  131:  		/* li R6, 71 */
		/* 8221A884h case  131:*/		cpu::op::li<0>(regs,&regs.R6,0x47);
		/* 8221A884h case  131:*/		return 0x8221A888;
		  /* 8221A888h */ case  132:  		/* addi R10, R11, 8 */
		/* 8221A888h case  132:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 8221A888h case  132:*/		return 0x8221A88C;
		  /* 8221A88Ch */ case  133:  		/* stw R21, <#[R11]> */
		/* 8221A88Ch case  133:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A88Ch case  133:*/		return 0x8221A890;
		  /* 8221A890h */ case  134:  		/* li R9, 2 */
		/* 8221A890h case  134:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 8221A890h case  134:*/		return 0x8221A894;
		  /* 8221A894h */ case  135:  		/* sth R7, <#[R11 + 2]> */
		/* 8221A894h case  135:*/		cpu::mem::store16( regs, regs.R7, (uint32)(regs.R11 + 0x00000002) );
		/* 8221A894h case  135:*/		return 0x8221A898;
		  /* 8221A898h */ case  136:  		/* lis R7, 0 */
		/* 8221A898h case  136:*/		cpu::op::lis<0>(regs,&regs.R7,0x0);
		/* 8221A898h case  136:*/		return 0x8221A89C;
		  /* 8221A89Ch */ case  137:  		/* lwz R5, <#[R11]> */
		/* 8221A89Ch case  137:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A89Ch case  137:*/		return 0x8221A8A0;
		  /* 8221A8A0h */ case  138:  		/* rlwinm R5, R5, 0, 16, 2 */
		/* 8221A8A0h case  138:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R5,regs.R5);
		/* 8221A8A0h case  138:*/		return 0x8221A8A4;
		  /* 8221A8A4h */ case  139:  		/* stw R5, <#[R11]> */
		/* 8221A8A4h case  139:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A8A4h case  139:*/		return 0x8221A8A8;
		  /* 8221A8A8h */ case  140:  		/* ori R5, R7, 48059 */
		/* 8221A8A8h case  140:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R7,0xBBBB);
		/* 8221A8A8h case  140:*/		return 0x8221A8AC;
		  /* 8221A8ACh */ case  141:  		/* stw R21, <#[R11 + 4]> */
		/* 8221A8ACh case  141:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x00000004) );
		/* 8221A8ACh case  141:*/		return 0x8221A8B0;
		  /* 8221A8B0h */ case  142:  		/* mr R7, R9 */
		/* 8221A8B0h case  142:*/		regs.R7 = regs.R9;
		/* 8221A8B0h case  142:*/		return 0x8221A8B4;
		  /* 8221A8B4h */ case  143:  		/* sth R21, <#[R11 + 6]> */
		/* 8221A8B4h case  143:*/		cpu::mem::store16( regs, regs.R21, (uint32)(regs.R11 + 0x00000006) );
		/* 8221A8B4h case  143:*/		return 0x8221A8B8;
		  /* 8221A8B8h */ case  144:  		/* lwz R4, <#[R11 + 4]> */
		/* 8221A8B8h case  144:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		/* 8221A8B8h case  144:*/		return 0x8221A8BC;
		  /* 8221A8BCh */ case  145:  		/* rlwimi R4, R8, 16, 8, 15 */
		/* 8221A8BCh case  145:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R4,regs.R8);
		/* 8221A8BCh case  145:*/		return 0x8221A8C0;
		  /* 8221A8C0h */ case  146:  		/* stw R4, <#[R11 + 4]> */
		/* 8221A8C0h case  146:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000004) );
		/* 8221A8C0h case  146:*/		return 0x8221A8C4;
		  /* 8221A8C4h */ case  147:  		/* stw R21, <#[R11 + 8]> */
		/* 8221A8C4h case  147:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x00000008) );
		/* 8221A8C4h case  147:*/		return 0x8221A8C8;
		  /* 8221A8C8h */ case  148:  		/* sth R21, <#[R11 + 10]> */
		/* 8221A8C8h case  148:*/		cpu::mem::store16( regs, regs.R21, (uint32)(regs.R11 + 0x0000000A) );
		/* 8221A8C8h case  148:*/		return 0x8221A8CC;
		  /* 8221A8CCh */ case  149:  		/* lwz R4, <#[R11 + 8]> */
		/* 8221A8CCh case  149:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000008) );
		/* 8221A8CCh case  149:*/		return 0x8221A8D0;
		  /* 8221A8D0h */ case  150:  		/* rlwimi R4, R6, 16, 8, 15 */
		/* 8221A8D0h case  150:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R4,regs.R6);
		/* 8221A8D0h case  150:*/		return 0x8221A8D4;
		  /* 8221A8D4h */ case  151:  		/* stw R4, <#[R11 + 8]> */
		/* 8221A8D4h case  151:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000008) );
		/* 8221A8D4h case  151:*/		return 0x8221A8D8;
		  /* 8221A8D8h */ case  152:  		/* stwu R21, <#[R10 + 4]> */
		/* 8221A8D8h case  152:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 8221A8D8h case  152:*/		return 0x8221A8DC;
		  /* 8221A8DCh */ case  153:  		/* stw R9, <#[R1 + 80]> */
		/* 8221A8DCh case  153:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8221A8DCh case  153:*/		return 0x8221A8E0;
		  /* 8221A8E0h */ case  154:  		/* stwu R21, <#[R10 + 4]> */
		/* 8221A8E0h case  154:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 8221A8E0h case  154:*/		return 0x8221A8E4;
		  /* 8221A8E4h */ case  155:  		/* sth R9, <#[R10 + 2]> */
		/* 8221A8E4h case  155:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R10 + 0x00000002) );
		/* 8221A8E4h case  155:*/		return 0x8221A8E8;
		  /* 8221A8E8h */ case  156:  		/* lwz R11, <#[R10]> */
		/* 8221A8E8h case  156:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8221A8E8h case  156:*/		return 0x8221A8EC;
		  /* 8221A8ECh */ case  157:  		/* rlwimi R11, R14, 16, 8, 15 */
		/* 8221A8ECh case  157:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R11,regs.R14);
		/* 8221A8ECh case  157:*/		return 0x8221A8F0;
		  /* 8221A8F0h */ case  158:  		/* stw R11, <#[R10]> */
		/* 8221A8F0h case  158:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8221A8F0h case  158:*/		return 0x8221A8F4;
		  /* 8221A8F4h */ case  159:  		/* stb R19, <#[R10]> */
		/* 8221A8F4h case  159:*/		cpu::mem::store8( regs, regs.R19, (uint32)(regs.R10 + 0x00000000) );
		/* 8221A8F4h case  159:*/		return 0x8221A8F8;
		  /* 8221A8F8h */ case  160:  		/* stwu R5, <#[R10 + 4]> */
		/* 8221A8F8h case  160:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 8221A8F8h case  160:*/		return 0x8221A8FC;
		  /* 8221A8FCh */ case  161:  		/* stw R9, <#[R29 + 18592]> */
		/* 8221A8FCh case  161:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R29 + 0x000048A0) );
		/* 8221A8FCh case  161:*/		return 0x8221A900;
		  /* 8221A900h */ case  162:  		/* addi R11, R10, 4 */
		/* 8221A900h case  162:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x4);
		/* 8221A900h case  162:*/		return 0x8221A904;
		  /* 8221A904h */ case  163:  		/* lwz R10, <#[R29 + 23368]> */
		/* 8221A904h case  163:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00005B48) );
		/* 8221A904h case  163:*/		return 0x8221A908;
		  /* 8221A908h */ case  164:  		/* cmplwi CR6, R10, 0 */
		/* 8221A908h case  164:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8221A908h case  164:*/		return 0x8221A90C;
		  /* 8221A90Ch */ case  165:  		/* bc 4, CR6_EQ, 16 */
		/* 8221A90Ch case  165:*/		if ( !regs.CR[6].eq ) { return 0x8221A91C;  }
		/* 8221A90Ch case  165:*/		return 0x8221A910;
		  /* 8221A910h */ case  166:  		/* lwz R9, <#[R29 + 23372]> */
		/* 8221A910h case  166:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00005B4C) );
		/* 8221A910h case  166:*/		return 0x8221A914;
		  /* 8221A914h */ case  167:  		/* cmplwi CR6, R9, 0 */
		/* 8221A914h case  167:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8221A914h case  167:*/		return 0x8221A918;
		  /* 8221A918h */ case  168:  		/* bc 4, CR6_EQ, 24 */
		/* 8221A918h case  168:*/		if ( !regs.CR[6].eq ) { return 0x8221A930;  }
		/* 8221A918h case  168:*/		return 0x8221A91C;
	}
	return 0x8221A91C;
} // Block from 8221A678h-8221A91Ch (169 instructions)

//////////////////////////////////////////////////////
// Block at 8221A91Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A91C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A91C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A91C);
		  /* 8221A91Ch */ case    0:  		/* lwz R9, <#[R29 + 23372]> */
		/* 8221A91Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00005B4C) );
		/* 8221A91Ch case    0:*/		return 0x8221A920;
		  /* 8221A920h */ case    1:  		/* cmplwi CR6, R9, 0 */
		/* 8221A920h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8221A920h case    1:*/		return 0x8221A924;
		  /* 8221A924h */ case    2:  		/* bc 4, CR6_EQ, 116 */
		/* 8221A924h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8221A998;  }
		/* 8221A924h case    2:*/		return 0x8221A928;
		  /* 8221A928h */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 8221A928h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8221A928h case    3:*/		return 0x8221A92C;
		  /* 8221A92Ch */ case    4:  		/* bc 4, CR6_EQ, 108 */
		/* 8221A92Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x8221A998;  }
		/* 8221A92Ch case    4:*/		return 0x8221A930;
	}
	return 0x8221A930;
} // Block from 8221A91Ch-8221A930h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221A930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A930);
		  /* 8221A930h */ case    0:  		/* li R9, 62 */
		/* 8221A930h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x3E);
		/* 8221A930h case    0:*/		return 0x8221A934;
		  /* 8221A934h */ case    1:  		/* addi R10, R11, 8 */
		/* 8221A934h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 8221A934h case    1:*/		return 0x8221A938;
		  /* 8221A938h */ case    2:  		/* stw R9, <#[R29 + 20384]> */
		/* 8221A938h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R29 + 0x00004FA0) );
		/* 8221A938h case    2:*/		return 0x8221A93C;
		  /* 8221A93Ch */ case    3:  		/* li R7, 3 */
		/* 8221A93Ch case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 8221A93Ch case    3:*/		return 0x8221A940;
		  /* 8221A940h */ case    4:  		/* lwz R9, <#[R30 + 28]> */
		/* 8221A940h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x0000001C) );
		/* 8221A940h case    4:*/		return 0x8221A944;
		  /* 8221A944h */ case    5:  		/* addi R10, R10, 4 */
		/* 8221A944h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8221A944h case    5:*/		return 0x8221A948;
		  /* 8221A948h */ case    6:  		/* sth R14, <#[R11 + 2]> */
		/* 8221A948h case    6:*/		cpu::mem::store16( regs, regs.R14, (uint32)(regs.R11 + 0x00000002) );
		/* 8221A948h case    6:*/		return 0x8221A94C;
		  /* 8221A94Ch */ case    7:  		/* lwz R6, <#[R11]> */
		/* 8221A94Ch case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A94Ch case    7:*/		return 0x8221A950;
		  /* 8221A950h */ case    8:  		/* rlwinm R6, R6, 0, 16, 2 */
		/* 8221A950h case    8:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R6,regs.R6);
		/* 8221A950h case    8:*/		return 0x8221A954;
		  /* 8221A954h */ case    9:  		/* stw R6, <#[R11]> */
		/* 8221A954h case    9:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A954h case    9:*/		return 0x8221A958;
		  /* 8221A958h */ case   10:  		/* sth R21, <#[R11 + 6]> */
		/* 8221A958h case   10:*/		cpu::mem::store16( regs, regs.R21, (uint32)(regs.R11 + 0x00000006) );
		/* 8221A958h case   10:*/		return 0x8221A95C;
		  /* 8221A95Ch */ case   11:  		/* stw R7, <#[R1 + 80]> */
		/* 8221A95Ch case   11:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 8221A95Ch case   11:*/		return 0x8221A960;
		  /* 8221A960h */ case   12:  		/* lwz R6, <#[R11 + 4]> */
		/* 8221A960h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 8221A960h case   12:*/		return 0x8221A964;
		  /* 8221A964h */ case   13:  		/* rlwimi R6, R8, 17, 8, 15 */
		/* 8221A964h case   13:*/		cpu::op::rlwimi<0,17,8,15>(regs,&regs.R6,regs.R8);
		/* 8221A964h case   13:*/		return 0x8221A968;
		  /* 8221A968h */ case   14:  		/* stw R6, <#[R11 + 4]> */
		/* 8221A968h case   14:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 8221A968h case   14:*/		return 0x8221A96C;
		  /* 8221A96Ch */ case   15:  		/* lwz R8, <#[R9 + 23360]> */
		/* 8221A96Ch case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00005B40) );
		/* 8221A96Ch case   15:*/		return 0x8221A970;
		  /* 8221A970h */ case   16:  		/* sth R8, <#[R11 + 10]> */
		/* 8221A970h case   16:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x0000000A) );
		/* 8221A970h case   16:*/		return 0x8221A974;
		  /* 8221A974h */ case   17:  		/* lwz R8, <#[R11 + 8]> */
		/* 8221A974h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 8221A974h case   17:*/		return 0x8221A978;
		  /* 8221A978h */ case   18:  		/* rlwimi R8, R19, 18, 8, 15 */
		/* 8221A978h case   18:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R8,regs.R19);
		/* 8221A978h case   18:*/		return 0x8221A97C;
		  /* 8221A97Ch */ case   19:  		/* stw R8, <#[R11 + 8]> */
		/* 8221A97Ch case   19:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 8221A97Ch case   19:*/		return 0x8221A980;
		  /* 8221A980h */ case   20:  		/* addi R11, R10, 4 */
		/* 8221A980h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x4);
		/* 8221A980h case   20:*/		return 0x8221A984;
		  /* 8221A984h */ case   21:  		/* lwz R9, <#[R9 + 23360]> */
		/* 8221A984h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00005B40) );
		/* 8221A984h case   21:*/		return 0x8221A988;
		  /* 8221A988h */ case   22:  		/* sth R9, <#[R10 + 2]> */
		/* 8221A988h case   22:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R10 + 0x00000002) );
		/* 8221A988h case   22:*/		return 0x8221A98C;
		  /* 8221A98Ch */ case   23:  		/* lwz R9, <#[R10]> */
		/* 8221A98Ch case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8221A98Ch case   23:*/		return 0x8221A990;
		  /* 8221A990h */ case   24:  		/* rlwimi R9, R19, 18, 8, 15 */
		/* 8221A990h case   24:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R19);
		/* 8221A990h case   24:*/		return 0x8221A994;
		  /* 8221A994h */ case   25:  		/* stw R9, <#[R10]> */
		/* 8221A994h case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8221A994h case   25:*/		return 0x8221A998;
	}
	return 0x8221A998;
} // Block from 8221A930h-8221A998h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8221A998h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221A998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221A998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221A998);
		  /* 8221A998h */ case    0:  		/* lwz R10, <#[R29 + 23372]> */
		/* 8221A998h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00005B4C) );
		/* 8221A998h case    0:*/		return 0x8221A99C;
		  /* 8221A99Ch */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 8221A99Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8221A99Ch case    1:*/		return 0x8221A9A0;
		  /* 8221A9A0h */ case    2:  		/* bc 4, CR6_EQ, 128 */
		/* 8221A9A0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8221AA20;  }
		/* 8221A9A0h case    2:*/		return 0x8221A9A4;
		  /* 8221A9A4h */ case    3:  		/* lwz R10, <#[R29 + 23368]> */
		/* 8221A9A4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00005B48) );
		/* 8221A9A4h case    3:*/		return 0x8221A9A8;
		  /* 8221A9A8h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 8221A9A8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8221A9A8h case    4:*/		return 0x8221A9AC;
		  /* 8221A9ACh */ case    5:  		/* bc 12, CR6_EQ, 116 */
		/* 8221A9ACh case    5:*/		if ( regs.CR[6].eq ) { return 0x8221AA20;  }
		/* 8221A9ACh case    5:*/		return 0x8221A9B0;
		  /* 8221A9B0h */ case    6:  		/* stw R21, <#[R30 + 1184]> */
		/* 8221A9B0h case    6:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R30 + 0x000004A0) );
		/* 8221A9B0h case    6:*/		return 0x8221A9B4;
		  /* 8221A9B4h */ case    7:  		/* li R8, 9 */
		/* 8221A9B4h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x9);
		/* 8221A9B4h case    7:*/		return 0x8221A9B8;
		  /* 8221A9B8h */ case    8:  		/* lwz R9, <#[R29 + 23204]> */
		/* 8221A9B8h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00005AA4) );
		/* 8221A9B8h case    8:*/		return 0x8221A9BC;
		  /* 8221A9BCh */ case    9:  		/* addi R10, R9, 1 */
		/* 8221A9BCh case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x1);
		/* 8221A9BCh case    9:*/		return 0x8221A9C0;
		  /* 8221A9C0h */ case   10:  		/* addi R9, R7, 1 */
		/* 8221A9C0h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R7,0x1);
		/* 8221A9C0h case   10:*/		return 0x8221A9C4;
		  /* 8221A9C4h */ case   11:  		/* stw R10, <#[R29 + 23204]> */
		/* 8221A9C4h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00005AA4) );
		/* 8221A9C4h case   11:*/		return 0x8221A9C8;
		  /* 8221A9C8h */ case   12:  		/* stw R21, <#[R29 + 21408]> */
		/* 8221A9C8h case   12:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R29 + 0x000053A0) );
		/* 8221A9C8h case   12:*/		return 0x8221A9CC;
		  /* 8221A9CCh */ case   13:  		/* addi R10, R11, 8 */
		/* 8221A9CCh case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 8221A9CCh case   13:*/		return 0x8221A9D0;
		  /* 8221A9D0h */ case   14:  		/* stw R9, <#[R1 + 80]> */
		/* 8221A9D0h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8221A9D0h case   14:*/		return 0x8221A9D4;
		  /* 8221A9D4h */ case   15:  		/* lwz R9, <#[R30 + 28]> */
		/* 8221A9D4h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x0000001C) );
		/* 8221A9D4h case   15:*/		return 0x8221A9D8;
		  /* 8221A9D8h */ case   16:  		/* sth R14, <#[R11 + 2]> */
		/* 8221A9D8h case   16:*/		cpu::mem::store16( regs, regs.R14, (uint32)(regs.R11 + 0x00000002) );
		/* 8221A9D8h case   16:*/		return 0x8221A9DC;
		  /* 8221A9DCh */ case   17:  		/* lwz R7, <#[R11]> */
		/* 8221A9DCh case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A9DCh case   17:*/		return 0x8221A9E0;
		  /* 8221A9E0h */ case   18:  		/* rlwinm R7, R7, 0, 16, 2 */
		/* 8221A9E0h case   18:*/		cpu::op::rlwinm<0,0,16,2>(regs,&regs.R7,regs.R7);
		/* 8221A9E0h case   18:*/		return 0x8221A9E4;
		  /* 8221A9E4h */ case   19:  		/* stw R7, <#[R11]> */
		/* 8221A9E4h case   19:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8221A9E4h case   19:*/		return 0x8221A9E8;
		  /* 8221A9E8h */ case   20:  		/* sth R21, <#[R11 + 6]> */
		/* 8221A9E8h case   20:*/		cpu::mem::store16( regs, regs.R21, (uint32)(regs.R11 + 0x00000006) );
		/* 8221A9E8h case   20:*/		return 0x8221A9EC;
		  /* 8221A9ECh */ case   21:  		/* lwz R7, <#[R11 + 4]> */
		/* 8221A9ECh case   21:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 8221A9ECh case   21:*/		return 0x8221A9F0;
		  /* 8221A9F0h */ case   22:  		/* rlwimi R7, R8, 17, 8, 15 */
		/* 8221A9F0h case   22:*/		cpu::op::rlwimi<0,17,8,15>(regs,&regs.R7,regs.R8);
		/* 8221A9F0h case   22:*/		return 0x8221A9F4;
		  /* 8221A9F4h */ case   23:  		/* stw R7, <#[R11 + 4]> */
		/* 8221A9F4h case   23:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 8221A9F4h case   23:*/		return 0x8221A9F8;
		  /* 8221A9F8h */ case   24:  		/* lwz R8, <#[R9 + 23360]> */
		/* 8221A9F8h case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00005B40) );
		/* 8221A9F8h case   24:*/		return 0x8221A9FC;
		  /* 8221A9FCh */ case   25:  		/* sth R8, <#[R11 + 10]> */
		/* 8221A9FCh case   25:*/		cpu::mem::store16( regs, regs.R8, (uint32)(regs.R11 + 0x0000000A) );
		/* 8221A9FCh case   25:*/		return 0x8221AA00;
		  /* 8221AA00h */ case   26:  		/* lwz R8, <#[R11 + 8]> */
		/* 8221AA00h case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 8221AA00h case   26:*/		return 0x8221AA04;
		  /* 8221AA04h */ case   27:  		/* rlwimi R8, R19, 18, 8, 15 */
		/* 8221AA04h case   27:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R8,regs.R19);
		/* 8221AA04h case   27:*/		return 0x8221AA08;
		  /* 8221AA08h */ case   28:  		/* stw R8, <#[R11 + 8]> */
		/* 8221AA08h case   28:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 8221AA08h case   28:*/		return 0x8221AA0C;
		  /* 8221AA0Ch */ case   29:  		/* lwz R9, <#[R9 + 23360]> */
		/* 8221AA0Ch case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00005B40) );
		/* 8221AA0Ch case   29:*/		return 0x8221AA10;
		  /* 8221AA10h */ case   30:  		/* sth R9, <#[R11 + 14]> */
		/* 8221AA10h case   30:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R11 + 0x0000000E) );
		/* 8221AA10h case   30:*/		return 0x8221AA14;
		  /* 8221AA14h */ case   31:  		/* lwz R9, <#[R11 + 12]> */
		/* 8221AA14h case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 8221AA14h case   31:*/		return 0x8221AA18;
		  /* 8221AA18h */ case   32:  		/* rlwimi R9, R19, 18, 8, 15 */
		/* 8221AA18h case   32:*/		cpu::op::rlwimi<0,18,8,15>(regs,&regs.R9,regs.R19);
		/* 8221AA18h case   32:*/		return 0x8221AA1C;
		  /* 8221AA1Ch */ case   33:  		/* stw R9, <#[R11 + 12]> */
		/* 8221AA1Ch case   33:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 8221AA1Ch case   33:*/		return 0x8221AA20;
	}
	return 0x8221AA20;
} // Block from 8221A998h-8221AA20h (34 instructions)

//////////////////////////////////////////////////////
// Block at 8221AA20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221AA20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221AA20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221AA20);
		  /* 8221AA20h */ case    0:  		/* mr R26, R31 */
		/* 8221AA20h case    0:*/		regs.R26 = regs.R31;
		/* 8221AA20h case    0:*/		return 0x8221AA24;
		  /* 8221AA24h */ case    1:  		/* mr R20, R19 */
		/* 8221AA24h case    1:*/		regs.R20 = regs.R19;
		/* 8221AA24h case    1:*/		return 0x8221AA28;
		  /* 8221AA28h */ case    2:  		/* mr R31, R23 */
		/* 8221AA28h case    2:*/		regs.R31 = regs.R23;
		/* 8221AA28h case    2:*/		return 0x8221AA2C;
		  /* 8221AA2Ch */ case    3:  		/* li R11, 100 */
		/* 8221AA2Ch case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x64);
		/* 8221AA2Ch case    3:*/		return 0x8221AA30;
	}
	return 0x8221AA30;
} // Block from 8221AA20h-8221AA30h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221AA30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221AA30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221AA30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221AA30);
		  /* 8221AA30h */ case    0:  		/* addi R11, R11, -1 */
		/* 8221AA30h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8221AA30h case    0:*/		return 0x8221AA34;
		  /* 8221AA34h */ case    1:  		/* stw R21, <#[R1 + 104]> */
		/* 8221AA34h case    1:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000068) );
		/* 8221AA34h case    1:*/		return 0x8221AA38;
		  /* 8221AA38h */ case    2:  		/* cmplwi CR6, R11, 99 */
		/* 8221AA38h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000063);
		/* 8221AA38h case    2:*/		return 0x8221AA3C;
		  /* 8221AA3Ch */ case    3:  		/* bc 12, CR6_GT, 1800 */
		/* 8221AA3Ch case    3:*/		if ( regs.CR[6].gt ) { return 0x8221B144;  }
		/* 8221AA3Ch case    3:*/		return 0x8221AA40;
		  /* 8221AA40h */ case    4:  		/* lis R12, -32252 */
		/* 8221AA40h case    4:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8204);
		/* 8221AA40h case    4:*/		return 0x8221AA44;
		  /* 8221AA44h */ case    5:  		/* rlwinm R0, R11, 1, 0, 30 */
		/* 8221AA44h case    5:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R0,regs.R11);
		/* 8221AA44h case    5:*/		return 0x8221AA48;
		  /* 8221AA48h */ case    6:  		/* addi R12, R12, -6784 */
		/* 8221AA48h case    6:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFE580);
		/* 8221AA48h case    6:*/		return 0x8221AA4C;
		  /* 8221AA4Ch */ case    7:  		/* lhzx R0, <#[R12 + R0]> */
		/* 8221AA4Ch case    7:*/		cpu::mem::load16z( regs, &regs.R0, (uint32)(regs.R12 + regs.R0 + 0x00000000) );
		/* 8221AA4Ch case    7:*/		return 0x8221AA50;
		  /* 8221AA50h */ case    8:  		/* lis R12, -32222 */
		/* 8221AA50h case    8:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8222);
		/* 8221AA50h case    8:*/		return 0x8221AA54;
		  /* 8221AA54h */ case    9:  		/* addi R12, R12, -21912 */
		/* 8221AA54h case    9:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFAA68);
		/* 8221AA54h case    9:*/		return 0x8221AA58;
		  /* 8221AA58h */ case   10:  		/* ori R0, R0, 0 */
		/* 8221AA58h case   10:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 8221AA58h case   10:*/		return 0x8221AA5C;
		  /* 8221AA5Ch */ case   11:  		/* add R12, R12, R0 */
		/* 8221AA5Ch case   11:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 8221AA5Ch case   11:*/		return 0x8221AA60;
		  /* 8221AA60h */ case   12:  		/* mtspr CTR, R12 */
		/* 8221AA60h case   12:*/		regs.CTR = regs.R12;
		/* 8221AA60h case   12:*/		return 0x8221AA64;
		  /* 8221AA64h */ case   13:  		/* bcctr 20, CR0_LT */
		/* 8221AA64h case   13:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 8221AA64h case   13:*/		return 0x8221AA68;
		  /* 8221AA68h */ case   14:  		/* lwz R11, <#[R31]> */
		/* 8221AA68h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8221AA68h case   14:*/		return 0x8221AA6C;
		  /* 8221AA6Ch */ case   15:  		/* addi R11, R11, 1 */
		/* 8221AA6Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8221AA6Ch case   15:*/		return 0x8221AA70;
		  /* 8221AA70h */ case   16:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221AA70h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221AA70h case   16:*/		return 0x8221AA74;
		  /* 8221AA74h */ case   17:  		/* add R31, R11, R31 */
		/* 8221AA74h case   17:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 8221AA74h case   17:*/		return 0x8221AA78;
		  /* 8221AA78h */ case   18:  		/* b 2252 */
		/* 8221AA78h case   18:*/		return 0x8221B344;
		/* 8221AA78h case   18:*/		return 0x8221AA7C;
		  /* 8221AA7Ch */ case   19:  		/* addi R31, R31, 24 */
		/* 8221AA7Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x18);
		/* 8221AA7Ch case   19:*/		return 0x8221AA80;
		  /* 8221AA80h */ case   20:  		/* b 2244 */
		/* 8221AA80h case   20:*/		return 0x8221B344;
		/* 8221AA80h case   20:*/		return 0x8221AA84;
		  /* 8221AA84h */ case   21:  		/* addi R31, R31, 12 */
		/* 8221AA84h case   21:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0xC);
		/* 8221AA84h case   21:*/		return 0x8221AA88;
		  /* 8221AA88h */ case   22:  		/* b 2236 */
		/* 8221AA88h case   22:*/		return 0x8221B344;
		/* 8221AA88h case   22:*/		return 0x8221AA8C;
		  /* 8221AA8Ch */ case   23:  		/* addi R18, R18, 1 */
		/* 8221AA8Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0x1);
		/* 8221AA8Ch case   23:*/		return 0x8221AA90;
		  /* 8221AA90h */ case   24:  		/* addi R11, R1, 352 */
		/* 8221AA90h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x160);
		/* 8221AA90h case   24:*/		return 0x8221AA94;
		  /* 8221AA94h */ case   25:  		/* rlwinm R10, R18, 2, 0, 29 */
		/* 8221AA94h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R18);
		/* 8221AA94h case   25:*/		return 0x8221AA98;
		  /* 8221AA98h */ case   26:  		/* stwx R19, <#[R10 + R11]> */
		/* 8221AA98h case   26:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8221AA98h case   26:*/		return 0x8221AA9C;
		  /* 8221AA9Ch */ case   27:  		/* mr R3, R30 */
		/* 8221AA9Ch case   27:*/		regs.R3 = regs.R30;
		/* 8221AA9Ch case   27:*/		return 0x8221AAA0;
		  /* 8221AAA0h */ case   28:  		/* mr R4, R31 */
		/* 8221AAA0h case   28:*/		regs.R4 = regs.R31;
		/* 8221AAA0h case   28:*/		return 0x8221AAA4;
		  /* 8221AAA4h */ case   29:  		/* mr R5, R23 */
		/* 8221AAA4h case   29:*/		regs.R5 = regs.R23;
		/* 8221AAA4h case   29:*/		return 0x8221AAA8;
		  /* 8221AAA8h */ case   30:  		/* addi R6, R1, 80 */
		/* 8221AAA8h case   30:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8221AAA8h case   30:*/		return 0x8221AAAC;
		  /* 8221AAACh */ case   31:  		/* mr R7, R16 */
		/* 8221AAACh case   31:*/		regs.R7 = regs.R16;
		/* 8221AAACh case   31:*/		return 0x8221AAB0;
		  /* 8221AAB0h */ case   32:  		/* mr R20, R19 */
		/* 8221AAB0h case   32:*/		regs.R20 = regs.R19;
		/* 8221AAB0h case   32:*/		return 0x8221AAB4;
		  /* 8221AAB4h */ case   33:  		/* bl -5476 */
		/* 8221AAB4h case   33:*/		regs.LR = 0x8221AAB8; return 0x82219550;
		/* 8221AAB4h case   33:*/		return 0x8221AAB8;
		  /* 8221AAB8h */ case   34:  		/* mr R17, R21 */
		/* 8221AAB8h case   34:*/		regs.R17 = regs.R21;
		/* 8221AAB8h case   34:*/		return 0x8221AABC;
		  /* 8221AABCh */ case   35:  		/* b 1728 */
		/* 8221AABCh case   35:*/		return 0x8221B17C;
		/* 8221AABCh case   35:*/		return 0x8221AAC0;
		  /* 8221AAC0h */ case   36:  		/* addi R18, R18, 1 */
		/* 8221AAC0h case   36:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0x1);
		/* 8221AAC0h case   36:*/		return 0x8221AAC4;
		  /* 8221AAC4h */ case   37:  		/* addi R10, R1, 352 */
		/* 8221AAC4h case   37:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x160);
		/* 8221AAC4h case   37:*/		return 0x8221AAC8;
		  /* 8221AAC8h */ case   38:  		/* rlwinm R28, R18, 2, 0, 29 */
		/* 8221AAC8h case   38:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R18);
		/* 8221AAC8h case   38:*/		return 0x8221AACC;
		  /* 8221AACCh */ case   39:  		/* addi R11, R31, 4 */
		/* 8221AACCh case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 8221AACCh case   39:*/		return 0x8221AAD0;
		  /* 8221AAD0h */ case   40:  		/* add R10, R28, R10 */
		/* 8221AAD0h case   40:*/		cpu::op::add<0>(regs,&regs.R10,regs.R28,regs.R10);
		/* 8221AAD0h case   40:*/		return 0x8221AAD4;
		  /* 8221AAD4h */ case   41:  		/* mr R27, R11 */
		/* 8221AAD4h case   41:*/		regs.R27 = regs.R11;
		/* 8221AAD4h case   41:*/		return 0x8221AAD8;
		  /* 8221AAD8h */ case   42:  		/* addi R31, R11, 4 */
		/* 8221AAD8h case   42:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 8221AAD8h case   42:*/		return 0x8221AADC;
		  /* 8221AADCh */ case   43:  		/* lwz R11, <#[R10 - 4]> */
		/* 8221AADCh case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0xFFFFFFFC) );
		/* 8221AADCh case   43:*/		return 0x8221AAE0;
		  /* 8221AAE0h */ case   44:  		/* lhz R9, <#[R27]> */
		/* 8221AAE0h case   44:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000000) );
		/* 8221AAE0h case   44:*/		return 0x8221AAE4;
		  /* 8221AAE4h */ case   45:  		/* addi R11, R11, -1 */
		/* 8221AAE4h case   45:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8221AAE4h case   45:*/		return 0x8221AAE8;
		  /* 8221AAE8h */ case   46:  		/* rlwinm. R9, R9, 0, 26, 31 */
		/* 8221AAE8h case   46:*/		cpu::op::rlwinm<1,0,26,31>(regs,&regs.R9,regs.R9);
		/* 8221AAE8h case   46:*/		return 0x8221AAEC;
		  /* 8221AAECh */ case   47:  		/* cntlzw R11, R11 */
		/* 8221AAECh case   47:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8221AAECh case   47:*/		return 0x8221AAF0;
		  /* 8221AAF0h */ case   48:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 8221AAF0h case   48:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 8221AAF0h case   48:*/		return 0x8221AAF4;
		  /* 8221AAF4h */ case   49:  		/* stw R11, <#[R10]> */
		/* 8221AAF4h case   49:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8221AAF4h case   49:*/		return 0x8221AAF8;
		  /* 8221AAF8h */ case   50:  		/* bc 12, CR0_EQ, 28 */
		/* 8221AAF8h case   50:*/		if ( regs.CR[0].eq ) { return 0x8221AB14;  }
		/* 8221AAF8h case   50:*/		return 0x8221AAFC;
		  /* 8221AAFCh */ case   51:  		/* li R7, 13859 */
		/* 8221AAFCh case   51:*/		cpu::op::li<0>(regs,&regs.R7,0x3623);
		/* 8221AAFCh case   51:*/		return 0x8221AB00;
		  /* 8221AB00h */ case   52:  		/* lwz R6, <#[R1 + 84]> */
		/* 8221AB00h case   52:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 8221AB00h case   52:*/		return 0x8221AB04;
		  /* 8221AB04h */ case   53:  		/* li R3, 0 */
		/* 8221AB04h case   53:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221AB04h case   53:*/		return 0x8221AB08;
		  /* 8221AB08h */ case   54:  		/* lwz R5, <#[R1 + 100]> */
		/* 8221AB08h case   54:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000064) );
		/* 8221AB08h case   54:*/		return 0x8221AB0C;
		  /* 8221AB0Ch */ case   55:  		/* lwz R4, <#[R1 + 88]> */
		/* 8221AB0Ch case   55:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 8221AB0Ch case   55:*/		return 0x8221AB10;
		  /* 8221AB10h */ case   56:  		/* bl -798472 */
		/* 8221AB10h case   56:*/		regs.LR = 0x8221AB14; return 0x82157C08;
		/* 8221AB10h case   56:*/		return 0x8221AB14;
	}
	return 0x8221AB14;
} // Block from 8221AA30h-8221AB14h (57 instructions)

//////////////////////////////////////////////////////
// Block at 8221AB14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221AB14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221AB14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221AB14);
		  /* 8221AB14h */ case    0:  		/* lhz R11, <#[R27 + 2]> */
		/* 8221AB14h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000002) );
		/* 8221AB14h case    0:*/		return 0x8221AB18;
		  /* 8221AB18h */ case    1:  		/* addi R10, R1, 496 */
		/* 8221AB18h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x1F0);
		/* 8221AB18h case    1:*/		return 0x8221AB1C;
		  /* 8221AB1Ch */ case    2:  		/* stw R18, <#[R1 + 300]> */
		/* 8221AB1Ch case    2:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x0000012C) );
		/* 8221AB1Ch case    2:*/		return 0x8221AB20;
		  /* 8221AB20h */ case    3:  		/* addi R7, R1, 296 */
		/* 8221AB20h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x128);
		/* 8221AB20h case    3:*/		return 0x8221AB24;
		  /* 8221AB24h */ case    4:  		/* li R6, 4 */
		/* 8221AB24h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8221AB24h case    4:*/		return 0x8221AB28;
		  /* 8221AB28h */ case    5:  		/* stw R11, <#[R1 + 296]> */
		/* 8221AB28h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000128) );
		/* 8221AB28h case    5:*/		return 0x8221AB2C;
		  /* 8221AB2Ch */ case    6:  		/* stwx R11, <#[R28 + R10]> */
		/* 8221AB2Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + regs.R10 + 0x00000000) );
		/* 8221AB2Ch case    6:*/		return 0x8221AB30;
		  /* 8221AB30h */ case    7:  		/* mr R3, R30 */
		/* 8221AB30h case    7:*/		regs.R3 = regs.R30;
		/* 8221AB30h case    7:*/		return 0x8221AB34;
		  /* 8221AB34h */ case    8:  		/* lwz R5, <#[R29 + 12]> */
		/* 8221AB34h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 8221AB34h case    8:*/		return 0x8221AB38;
		  /* 8221AB38h */ case    9:  		/* addi R4, R29, 13152 */
		/* 8221AB38h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x3360);
		/* 8221AB38h case    9:*/		return 0x8221AB3C;
		  /* 8221AB3Ch */ case   10:  		/* bl -47068 */
		/* 8221AB3Ch case   10:*/		regs.LR = 0x8221AB40; return 0x8220F360;
		/* 8221AB3Ch case   10:*/		return 0x8221AB40;
		  /* 8221AB40h */ case   11:  		/* lwz R11, <#[R29 + 12028]> */
		/* 8221AB40h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00002EFC) );
		/* 8221AB40h case   11:*/		return 0x8221AB44;
		  /* 8221AB44h */ case   12:  		/* addi R11, R11, 1 */
		/* 8221AB44h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8221AB44h case   12:*/		return 0x8221AB48;
		  /* 8221AB48h */ case   13:  		/* stw R11, <#[R29 + 12028]> */
		/* 8221AB48h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00002EFC) );
		/* 8221AB48h case   13:*/		return 0x8221AB4C;
		  /* 8221AB4Ch */ case   14:  		/* b 2040 */
		/* 8221AB4Ch case   14:*/		return 0x8221B344;
		/* 8221AB4Ch case   14:*/		return 0x8221AB50;
		  /* 8221AB50h */ case   15:  		/* rlwinm R11, R18, 2, 0, 29 */
		/* 8221AB50h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R18);
		/* 8221AB50h case   15:*/		return 0x8221AB54;
		  /* 8221AB54h */ case   16:  		/* addi R10, R1, 352 */
		/* 8221AB54h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x160);
		/* 8221AB54h case   16:*/		return 0x8221AB58;
		  /* 8221AB58h */ case   17:  		/* mr R3, R30 */
		/* 8221AB58h case   17:*/		regs.R3 = regs.R30;
		/* 8221AB58h case   17:*/		return 0x8221AB5C;
		  /* 8221AB5Ch */ case   18:  		/* lwzx R10, <#[R11 + R10]> */
		/* 8221AB5Ch case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8221AB5Ch case   18:*/		return 0x8221AB60;
		  /* 8221AB60h */ case   19:  		/* cmplwi CR6, R10, 1 */
		/* 8221AB60h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8221AB60h case   19:*/		return 0x8221AB64;
		  /* 8221AB64h */ case   20:  		/* bc 12, CR6_EQ, -196 */
		/* 8221AB64h case   20:*/		if ( regs.CR[6].eq ) { return 0x8221AAA0;  }
		/* 8221AB64h case   20:*/		return 0x8221AB68;
		  /* 8221AB68h */ case   21:  		/* addi R10, R1, 496 */
		/* 8221AB68h case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x1F0);
		/* 8221AB68h case   21:*/		return 0x8221AB6C;
		  /* 8221AB6Ch */ case   22:  		/* stw R18, <#[R1 + 188]> */
		/* 8221AB6Ch case   22:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x000000BC) );
		/* 8221AB6Ch case   22:*/		return 0x8221AB70;
		  /* 8221AB70h */ case   23:  		/* addi R7, R1, 184 */
		/* 8221AB70h case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xB8);
		/* 8221AB70h case   23:*/		return 0x8221AB74;
		  /* 8221AB74h */ case   24:  		/* lwz R5, <#[R29 + 12]> */
		/* 8221AB74h case   24:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 8221AB74h case   24:*/		return 0x8221AB78;
		  /* 8221AB78h */ case   25:  		/* li R6, 8 */
		/* 8221AB78h case   25:*/		cpu::op::li<0>(regs,&regs.R6,0x8);
		/* 8221AB78h case   25:*/		return 0x8221AB7C;
		  /* 8221AB7Ch */ case   26:  		/* addi R4, R29, 13152 */
		/* 8221AB7Ch case   26:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x3360);
		/* 8221AB7Ch case   26:*/		return 0x8221AB80;
		  /* 8221AB80h */ case   27:  		/* addi R31, R31, 4 */
		/* 8221AB80h case   27:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221AB80h case   27:*/		return 0x8221AB84;
		  /* 8221AB84h */ case   28:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8221AB84h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8221AB84h case   28:*/		return 0x8221AB88;
		  /* 8221AB88h */ case   29:  		/* stw R11, <#[R1 + 184]> */
		/* 8221AB88h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000B8) );
		/* 8221AB88h case   29:*/		return 0x8221AB8C;
		  /* 8221AB8Ch */ case   30:  		/* bl -47148 */
		/* 8221AB8Ch case   30:*/		regs.LR = 0x8221AB90; return 0x8220F360;
		/* 8221AB8Ch case   30:*/		return 0x8221AB90;
		  /* 8221AB90h */ case   31:  		/* lwz R11, <#[R29 + 12028]> */
		/* 8221AB90h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00002EFC) );
		/* 8221AB90h case   31:*/		return 0x8221AB94;
		  /* 8221AB94h */ case   32:  		/* stw R21, <#[R1 + 80]> */
		/* 8221AB94h case   32:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000050) );
		/* 8221AB94h case   32:*/		return 0x8221AB98;
		  /* 8221AB98h */ case   33:  		/* addi R11, R11, 1 */
		/* 8221AB98h case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8221AB98h case   33:*/		return 0x8221AB9C;
		  /* 8221AB9Ch */ case   34:  		/* stw R11, <#[R29 + 12028]> */
		/* 8221AB9Ch case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00002EFC) );
		/* 8221AB9Ch case   34:*/		return 0x8221ABA0;
		  /* 8221ABA0h */ case   35:  		/* b 1508 */
		/* 8221ABA0h case   35:*/		return 0x8221B184;
		/* 8221ABA0h case   35:*/		return 0x8221ABA4;
		  /* 8221ABA4h */ case   36:  		/* rlwinm R11, R18, 2, 0, 29 */
		/* 8221ABA4h case   36:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R18);
		/* 8221ABA4h case   36:*/		return 0x8221ABA8;
		  /* 8221ABA8h */ case   37:  		/* addi R10, R1, 352 */
		/* 8221ABA8h case   37:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x160);
		/* 8221ABA8h case   37:*/		return 0x8221ABAC;
		  /* 8221ABACh */ case   38:  		/* mr R3, R30 */
		/* 8221ABACh case   38:*/		regs.R3 = regs.R30;
		/* 8221ABACh case   38:*/		return 0x8221ABB0;
		  /* 8221ABB0h */ case   39:  		/* lwzx R9, <#[R11 + R10]> */
		/* 8221ABB0h case   39:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8221ABB0h case   39:*/		return 0x8221ABB4;
		  /* 8221ABB4h */ case   40:  		/* cmplwi CR6, R9, 1 */
		/* 8221ABB4h case   40:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000001);
		/* 8221ABB4h case   40:*/		return 0x8221ABB8;
		  /* 8221ABB8h */ case   41:  		/* bc 4, CR6_EQ, 16 */
		/* 8221ABB8h case   41:*/		if ( !regs.CR[6].eq ) { return 0x8221ABC8;  }
		/* 8221ABB8h case   41:*/		return 0x8221ABBC;
		  /* 8221ABBCh */ case   42:  		/* stwx R21, <#[R11 + R10]> */
		/* 8221ABBCh case   42:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8221ABBCh case   42:*/		return 0x8221ABC0;
		  /* 8221ABC0h */ case   43:  		/* addi R18, R18, -1 */
		/* 8221ABC0h case   43:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0xFFFFFFFF);
		/* 8221ABC0h case   43:*/		return 0x8221ABC4;
		  /* 8221ABC4h */ case   44:  		/* b -292 */
		/* 8221ABC4h case   44:*/		return 0x8221AAA0;
		/* 8221ABC4h case   44:*/		return 0x8221ABC8;
	}
	return 0x8221ABC8;
} // Block from 8221AB14h-8221ABC8h (45 instructions)

//////////////////////////////////////////////////////
// Block at 8221ABC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221ABC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221ABC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221ABC8);
		  /* 8221ABC8h */ case    0:  		/* addi R10, R1, 496 */
		/* 8221ABC8h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x1F0);
		/* 8221ABC8h case    0:*/		return 0x8221ABCC;
		  /* 8221ABCCh */ case    1:  		/* stw R18, <#[R1 + 284]> */
		/* 8221ABCCh case    1:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x0000011C) );
		/* 8221ABCCh case    1:*/		return 0x8221ABD0;
		  /* 8221ABD0h */ case    2:  		/* addi R7, R1, 280 */
		/* 8221ABD0h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x118);
		/* 8221ABD0h case    2:*/		return 0x8221ABD4;
		  /* 8221ABD4h */ case    3:  		/* lwz R5, <#[R29 + 12]> */
		/* 8221ABD4h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 8221ABD4h case    3:*/		return 0x8221ABD8;
		  /* 8221ABD8h */ case    4:  		/* li R6, 16 */
		/* 8221ABD8h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x10);
		/* 8221ABD8h case    4:*/		return 0x8221ABDC;
		  /* 8221ABDCh */ case    5:  		/* addi R4, R29, 13152 */
		/* 8221ABDCh case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x3360);
		/* 8221ABDCh case    5:*/		return 0x8221ABE0;
		  /* 8221ABE0h */ case    6:  		/* addi R31, R31, 4 */
		/* 8221ABE0h case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221ABE0h case    6:*/		return 0x8221ABE4;
		  /* 8221ABE4h */ case    7:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8221ABE4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8221ABE4h case    7:*/		return 0x8221ABE8;
		  /* 8221ABE8h */ case    8:  		/* stw R11, <#[R1 + 280]> */
		/* 8221ABE8h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000118) );
		/* 8221ABE8h case    8:*/		return 0x8221ABEC;
		  /* 8221ABECh */ case    9:  		/* bl -47244 */
		/* 8221ABECh case    9:*/		regs.LR = 0x8221ABF0; return 0x8220F360;
		/* 8221ABECh case    9:*/		return 0x8221ABF0;
		  /* 8221ABF0h */ case   10:  		/* addi R18, R18, -1 */
		/* 8221ABF0h case   10:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0xFFFFFFFF);
		/* 8221ABF0h case   10:*/		return 0x8221ABF4;
		  /* 8221ABF4h */ case   11:  		/* stw R21, <#[R1 + 80]> */
		/* 8221ABF4h case   11:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000050) );
		/* 8221ABF4h case   11:*/		return 0x8221ABF8;
		  /* 8221ABF8h */ case   12:  		/* b 1420 */
		/* 8221ABF8h case   12:*/		return 0x8221B184;
		/* 8221ABF8h case   12:*/		return 0x8221ABFC;
		  /* 8221ABFCh */ case   13:  		/* rlwinm R10, R18, 2, 0, 29 */
		/* 8221ABFCh case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R18);
		/* 8221ABFCh case   13:*/		return 0x8221AC00;
		  /* 8221AC00h */ case   14:  		/* addi R9, R1, 352 */
		/* 8221AC00h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x160);
		/* 8221AC00h case   14:*/		return 0x8221AC04;
		  /* 8221AC04h */ case   15:  		/* addi R11, R31, 4 */
		/* 8221AC04h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 8221AC04h case   15:*/		return 0x8221AC08;
		  /* 8221AC08h */ case   16:  		/* addi R31, R11, 4 */
		/* 8221AC08h case   16:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 8221AC08h case   16:*/		return 0x8221AC0C;
		  /* 8221AC0Ch */ case   17:  		/* lwzx R10, <#[R10 + R9]> */
		/* 8221AC0Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8221AC0Ch case   17:*/		return 0x8221AC10;
		  /* 8221AC10h */ case   18:  		/* cmplwi CR6, R10, 1 */
		/* 8221AC10h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8221AC10h case   18:*/		return 0x8221AC14;
		  /* 8221AC14h */ case   19:  		/* bc 4, CR6_EQ, 20 */
		/* 8221AC14h case   19:*/		if ( !regs.CR[6].eq ) { return 0x8221AC28;  }
		/* 8221AC14h case   19:*/		return 0x8221AC18;
		  /* 8221AC18h */ case   20:  		/* lwz R10, <#[R11]> */
		/* 8221AC18h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221AC18h case   20:*/		return 0x8221AC1C;
		  /* 8221AC1Ch */ case   21:  		/* addi R9, R1, 640 */
		/* 8221AC1Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x280);
		/* 8221AC1Ch case   21:*/		return 0x8221AC20;
		  /* 8221AC20h */ case   22:  		/* rlwinm R10, R10, 2, 14, 29 */
		/* 8221AC20h case   22:*/		cpu::op::rlwinm<0,2,14,29>(regs,&regs.R10,regs.R10);
		/* 8221AC20h case   22:*/		return 0x8221AC24;
		  /* 8221AC24h */ case   23:  		/* stwx R19, <#[R10 + R9]> */
		/* 8221AC24h case   23:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8221AC24h case   23:*/		return 0x8221AC28;
	}
	return 0x8221AC28;
} // Block from 8221ABC8h-8221AC28h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8221AC28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221AC28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221AC28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221AC28);
		  /* 8221AC28h */ case    0:  		/* lhz R11, <#[R11 + 2]> */
		/* 8221AC28h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000002) );
		/* 8221AC28h case    0:*/		return 0x8221AC2C;
		  /* 8221AC2Ch */ case    1:  		/* li R10, -1 */
		/* 8221AC2Ch case    1:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8221AC2Ch case    1:*/		return 0x8221AC30;
		  /* 8221AC30h */ case    2:  		/* addi R7, R1, 216 */
		/* 8221AC30h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xD8);
		/* 8221AC30h case    2:*/		return 0x8221AC34;
		  /* 8221AC34h */ case    3:  		/* stw R10, <#[R1 + 216]> */
		/* 8221AC34h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000D8) );
		/* 8221AC34h case    3:*/		return 0x8221AC38;
		  /* 8221AC38h */ case    4:  		/* li R6, 32 */
		/* 8221AC38h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x20);
		/* 8221AC38h case    4:*/		return 0x8221AC3C;
		  /* 8221AC3Ch */ case    5:  		/* stw R11, <#[R1 + 220]> */
		/* 8221AC3Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000DC) );
		/* 8221AC3Ch case    5:*/		return 0x8221AC40;
		  /* 8221AC40h */ case    6:  		/* b -272 */
		/* 8221AC40h case    6:*/		return 0x8221AB30;
		/* 8221AC40h case    6:*/		return 0x8221AC44;
		  /* 8221AC44h */ case    7:  		/* addi R11, R31, 4 */
		/* 8221AC44h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 8221AC44h case    7:*/		return 0x8221AC48;
		  /* 8221AC48h */ case    8:  		/* mr R28, R11 */
		/* 8221AC48h case    8:*/		regs.R28 = regs.R11;
		/* 8221AC48h case    8:*/		return 0x8221AC4C;
		  /* 8221AC4Ch */ case    9:  		/* addi R11, R11, 4 */
		/* 8221AC4Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221AC4Ch case    9:*/		return 0x8221AC50;
		  /* 8221AC50h */ case   10:  		/* mr R27, R11 */
		/* 8221AC50h case   10:*/		regs.R27 = regs.R11;
		/* 8221AC50h case   10:*/		return 0x8221AC54;
		  /* 8221AC54h */ case   11:  		/* addi R31, R11, 4 */
		/* 8221AC54h case   11:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 8221AC54h case   11:*/		return 0x8221AC58;
		  /* 8221AC58h */ case   12:  		/* lhz R11, <#[R28]> */
		/* 8221AC58h case   12:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8221AC58h case   12:*/		return 0x8221AC5C;
		  /* 8221AC5Ch */ case   13:  		/* rlwinm. R11, R11, 0, 26, 31 */
		/* 8221AC5Ch case   13:*/		cpu::op::rlwinm<1,0,26,31>(regs,&regs.R11,regs.R11);
		/* 8221AC5Ch case   13:*/		return 0x8221AC60;
		  /* 8221AC60h */ case   14:  		/* bc 12, CR0_EQ, 28 */
		/* 8221AC60h case   14:*/		if ( regs.CR[0].eq ) { return 0x8221AC7C;  }
		/* 8221AC60h case   14:*/		return 0x8221AC64;
		  /* 8221AC64h */ case   15:  		/* li R7, 14017 */
		/* 8221AC64h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x36C1);
		/* 8221AC64h case   15:*/		return 0x8221AC68;
		  /* 8221AC68h */ case   16:  		/* lwz R6, <#[R1 + 84]> */
		/* 8221AC68h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 8221AC68h case   16:*/		return 0x8221AC6C;
		  /* 8221AC6Ch */ case   17:  		/* li R3, 0 */
		/* 8221AC6Ch case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221AC6Ch case   17:*/		return 0x8221AC70;
		  /* 8221AC70h */ case   18:  		/* lwz R5, <#[R1 + 100]> */
		/* 8221AC70h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000064) );
		/* 8221AC70h case   18:*/		return 0x8221AC74;
		  /* 8221AC74h */ case   19:  		/* lwz R4, <#[R1 + 88]> */
		/* 8221AC74h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 8221AC74h case   19:*/		return 0x8221AC78;
		  /* 8221AC78h */ case   20:  		/* bl -798832 */
		/* 8221AC78h case   20:*/		regs.LR = 0x8221AC7C; return 0x82157C08;
		/* 8221AC78h case   20:*/		return 0x8221AC7C;
	}
	return 0x8221AC7C;
} // Block from 8221AC28h-8221AC7Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 8221AC7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221AC7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221AC7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221AC7C);
		  /* 8221AC7Ch */ case    0:  		/* rlwinm R11, R18, 2, 0, 29 */
		/* 8221AC7Ch case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R18);
		/* 8221AC7Ch case    0:*/		return 0x8221AC80;
		  /* 8221AC80h */ case    1:  		/* addi R10, R1, 352 */
		/* 8221AC80h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x160);
		/* 8221AC80h case    1:*/		return 0x8221AC84;
		  /* 8221AC84h */ case    2:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8221AC84h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8221AC84h case    2:*/		return 0x8221AC88;
		  /* 8221AC88h */ case    3:  		/* cmplwi CR6, R11, 1 */
		/* 8221AC88h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8221AC88h case    3:*/		return 0x8221AC8C;
		  /* 8221AC8Ch */ case    4:  		/* bc 4, CR6_EQ, 20 */
		/* 8221AC8Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x8221ACA0;  }
		/* 8221AC8Ch case    4:*/		return 0x8221AC90;
		  /* 8221AC90h */ case    5:  		/* lwz R11, <#[R27]> */
		/* 8221AC90h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8221AC90h case    5:*/		return 0x8221AC94;
		  /* 8221AC94h */ case    6:  		/* addi R10, R1, 640 */
		/* 8221AC94h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x280);
		/* 8221AC94h case    6:*/		return 0x8221AC98;
		  /* 8221AC98h */ case    7:  		/* rlwinm R11, R11, 2, 14, 29 */
		/* 8221AC98h case    7:*/		cpu::op::rlwinm<0,2,14,29>(regs,&regs.R11,regs.R11);
		/* 8221AC98h case    7:*/		return 0x8221AC9C;
		  /* 8221AC9Ch */ case    8:  		/* stwx R19, <#[R11 + R10]> */
		/* 8221AC9Ch case    8:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8221AC9Ch case    8:*/		return 0x8221ACA0;
	}
	return 0x8221ACA0;
} // Block from 8221AC7Ch-8221ACA0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8221ACA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221ACA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221ACA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221ACA0);
		  /* 8221ACA0h */ case    0:  		/* lhz R11, <#[R27 + 2]> */
		/* 8221ACA0h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000002) );
		/* 8221ACA0h case    0:*/		return 0x8221ACA4;
		  /* 8221ACA4h */ case    1:  		/* addi R7, R1, 264 */
		/* 8221ACA4h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x108);
		/* 8221ACA4h case    1:*/		return 0x8221ACA8;
		  /* 8221ACA8h */ case    2:  		/* lhz R10, <#[R28 + 2]> */
		/* 8221ACA8h case    2:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000002) );
		/* 8221ACA8h case    2:*/		return 0x8221ACAC;
		  /* 8221ACACh */ case    3:  		/* li R6, 32 */
		/* 8221ACACh case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x20);
		/* 8221ACACh case    3:*/		return 0x8221ACB0;
		  /* 8221ACB0h */ case    4:  		/* stw R11, <#[R1 + 268]> */
		/* 8221ACB0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000010C) );
		/* 8221ACB0h case    4:*/		return 0x8221ACB4;
		  /* 8221ACB4h */ case    5:  		/* stw R10, <#[R1 + 264]> */
		/* 8221ACB4h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000108) );
		/* 8221ACB4h case    5:*/		return 0x8221ACB8;
		  /* 8221ACB8h */ case    6:  		/* b -392 */
		/* 8221ACB8h case    6:*/		return 0x8221AB30;
		/* 8221ACB8h case    6:*/		return 0x8221ACBC;
		  /* 8221ACBCh */ case    7:  		/* rlwinm R11, R18, 2, 0, 29 */
		/* 8221ACBCh case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R18);
		/* 8221ACBCh case    7:*/		return 0x8221ACC0;
		  /* 8221ACC0h */ case    8:  		/* stw R21, <#[R1 + 252]> */
		/* 8221ACC0h case    8:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x000000FC) );
		/* 8221ACC0h case    8:*/		return 0x8221ACC4;
		  /* 8221ACC4h */ case    9:  		/* addi R10, R1, 352 */
		/* 8221ACC4h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x160);
		/* 8221ACC4h case    9:*/		return 0x8221ACC8;
		  /* 8221ACC8h */ case   10:  		/* stw R21, <#[R1 + 248]> */
		/* 8221ACC8h case   10:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x000000F8) );
		/* 8221ACC8h case   10:*/		return 0x8221ACCC;
		  /* 8221ACCCh */ case   11:  		/* addi R7, R1, 248 */
		/* 8221ACCCh case   11:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xF8);
		/* 8221ACCCh case   11:*/		return 0x8221ACD0;
		  /* 8221ACD0h */ case   12:  		/* li R6, 64 */
		/* 8221ACD0h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x40);
		/* 8221ACD0h case   12:*/		return 0x8221ACD4;
		  /* 8221ACD4h */ case   13:  		/* addi R31, R31, 4 */
		/* 8221ACD4h case   13:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221ACD4h case   13:*/		return 0x8221ACD8;
		  /* 8221ACD8h */ case   14:  		/* stwx R21, <#[R11 + R10]> */
		/* 8221ACD8h case   14:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8221ACD8h case   14:*/		return 0x8221ACDC;
		  /* 8221ACDCh */ case   15:  		/* b -428 */
		/* 8221ACDCh case   15:*/		return 0x8221AB30;
		/* 8221ACDCh case   15:*/		return 0x8221ACE0;
		  /* 8221ACE0h */ case   16:  		/* addi R11, R31, 4 */
		/* 8221ACE0h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 8221ACE0h case   16:*/		return 0x8221ACE4;
		  /* 8221ACE4h */ case   17:  		/* addi R10, R1, 640 */
		/* 8221ACE4h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x280);
		/* 8221ACE4h case   17:*/		return 0x8221ACE8;
		  /* 8221ACE8h */ case   18:  		/* addi R31, R11, 4 */
		/* 8221ACE8h case   18:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 8221ACE8h case   18:*/		return 0x8221ACEC;
		  /* 8221ACECh */ case   19:  		/* lwz R11, <#[R11]> */
		/* 8221ACECh case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8221ACECh case   19:*/		return 0x8221ACF0;
		  /* 8221ACF0h */ case   20:  		/* rlwinm R11, R11, 0, 16, 31 */
		/* 8221ACF0h case   20:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R11);
		/* 8221ACF0h case   20:*/		return 0x8221ACF4;
		  /* 8221ACF4h */ case   21:  		/* rlwinm R9, R11, 2, 0, 29 */
		/* 8221ACF4h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 8221ACF4h case   21:*/		return 0x8221ACF8;
		  /* 8221ACF8h */ case   22:  		/* lwzx R10, <#[R9 + R10]> */
		/* 8221ACF8h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8221ACF8h case   22:*/		return 0x8221ACFC;
		  /* 8221ACFCh */ case   23:  		/* cmplwi CR6, R10, 1 */
		/* 8221ACFCh case   23:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8221ACFCh case   23:*/		return 0x8221AD00;
		  /* 8221AD00h */ case   24:  		/* bc 4, CR6_EQ, 16 */
		/* 8221AD00h case   24:*/		if ( !regs.CR[6].eq ) { return 0x8221AD10;  }
		/* 8221AD00h case   24:*/		return 0x8221AD04;
		  /* 8221AD04h */ case   25:  		/* rlwinm R10, R18, 2, 0, 29 */
		/* 8221AD04h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R18);
		/* 8221AD04h case   25:*/		return 0x8221AD08;
		  /* 8221AD08h */ case   26:  		/* addi R9, R1, 352 */
		/* 8221AD08h case   26:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x160);
		/* 8221AD08h case   26:*/		return 0x8221AD0C;
		  /* 8221AD0Ch */ case   27:  		/* stwx R19, <#[R10 + R9]> */
		/* 8221AD0Ch case   27:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8221AD0Ch case   27:*/		return 0x8221AD10;
	}
	return 0x8221AD10;
} // Block from 8221ACA0h-8221AD10h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8221AD10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221AD10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221AD10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221AD10);
		  /* 8221AD10h */ case    0:  		/* stw R11, <#[R1 + 156]> */
		/* 8221AD10h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000009C) );
		/* 8221AD10h case    0:*/		return 0x8221AD14;
		  /* 8221AD14h */ case    1:  		/* addi R7, R1, 152 */
		/* 8221AD14h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x98);
		/* 8221AD14h case    1:*/		return 0x8221AD18;
		  /* 8221AD18h */ case    2:  		/* stw R21, <#[R1 + 152]> */
		/* 8221AD18h case    2:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000098) );
		/* 8221AD18h case    2:*/		return 0x8221AD1C;
		  /* 8221AD1Ch */ case    3:  		/* li R6, 128 */
		/* 8221AD1Ch case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x80);
		/* 8221AD1Ch case    3:*/		return 0x8221AD20;
		  /* 8221AD20h */ case    4:  		/* lwz R5, <#[R29 + 12]> */
		/* 8221AD20h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 8221AD20h case    4:*/		return 0x8221AD24;
		  /* 8221AD24h */ case    5:  		/* addi R4, R29, 13152 */
		/* 8221AD24h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x3360);
		/* 8221AD24h case    5:*/		return 0x8221AD28;
		  /* 8221AD28h */ case    6:  		/* mr R3, R30 */
		/* 8221AD28h case    6:*/		regs.R3 = regs.R30;
		/* 8221AD28h case    6:*/		return 0x8221AD2C;
		  /* 8221AD2Ch */ case    7:  		/* bl -47564 */
		/* 8221AD2Ch case    7:*/		regs.LR = 0x8221AD30; return 0x8220F360;
		/* 8221AD2Ch case    7:*/		return 0x8221AD30;
		  /* 8221AD30h */ case    8:  		/* b 1556 */
		/* 8221AD30h case    8:*/		return 0x8221B344;
		/* 8221AD30h case    8:*/		return 0x8221AD34;
		  /* 8221AD34h */ case    9:  		/* addi R18, R18, 1 */
		/* 8221AD34h case    9:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0x1);
		/* 8221AD34h case    9:*/		return 0x8221AD38;
		  /* 8221AD38h */ case   10:  		/* addi R11, R1, 352 */
		/* 8221AD38h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x160);
		/* 8221AD38h case   10:*/		return 0x8221AD3C;
		  /* 8221AD3Ch */ case   11:  		/* rlwinm R27, R18, 2, 0, 29 */
		/* 8221AD3Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R27,regs.R18);
		/* 8221AD3Ch case   11:*/		return 0x8221AD40;
		  /* 8221AD40h */ case   12:  		/* addi R15, R15, 1 */
		/* 8221AD40h case   12:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R15,0x1);
		/* 8221AD40h case   12:*/		return 0x8221AD44;
		  /* 8221AD44h */ case   13:  		/* add R11, R27, R11 */
		/* 8221AD44h case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R27,regs.R11);
		/* 8221AD44h case   13:*/		return 0x8221AD48;
		  /* 8221AD48h */ case   14:  		/* cmplwi CR6, R15, 4 */
		/* 8221AD48h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000004);
		/* 8221AD48h case   14:*/		return 0x8221AD4C;
		  /* 8221AD4Ch */ case   15:  		/* lwz R10, <#[R11 - 4]> */
		/* 8221AD4Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 8221AD4Ch case   15:*/		return 0x8221AD50;
		  /* 8221AD50h */ case   16:  		/* addi R10, R10, -1 */
		/* 8221AD50h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8221AD50h case   16:*/		return 0x8221AD54;
		  /* 8221AD54h */ case   17:  		/* cntlzw R10, R10 */
		/* 8221AD54h case   17:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 8221AD54h case   17:*/		return 0x8221AD58;
		  /* 8221AD58h */ case   18:  		/* rlwinm R10, R10, 27, 31, 31 */
		/* 8221AD58h case   18:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R10,regs.R10);
		/* 8221AD58h case   18:*/		return 0x8221AD5C;
		  /* 8221AD5Ch */ case   19:  		/* stw R10, <#[R11]> */
		/* 8221AD5Ch case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221AD5Ch case   19:*/		return 0x8221AD60;
		  /* 8221AD60h */ case   20:  		/* bc 4, CR6_GT, 28 */
		/* 8221AD60h case   20:*/		if ( !regs.CR[6].gt ) { return 0x8221AD7C;  }
		/* 8221AD60h case   20:*/		return 0x8221AD64;
		  /* 8221AD64h */ case   21:  		/* li R7, 14119 */
		/* 8221AD64h case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x3727);
		/* 8221AD64h case   21:*/		return 0x8221AD68;
		  /* 8221AD68h */ case   22:  		/* lwz R6, <#[R1 + 84]> */
		/* 8221AD68h case   22:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 8221AD68h case   22:*/		return 0x8221AD6C;
		  /* 8221AD6Ch */ case   23:  		/* li R3, 0 */
		/* 8221AD6Ch case   23:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221AD6Ch case   23:*/		return 0x8221AD70;
		  /* 8221AD70h */ case   24:  		/* lwz R5, <#[R1 + 128]> */
		/* 8221AD70h case   24:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000080) );
		/* 8221AD70h case   24:*/		return 0x8221AD74;
		  /* 8221AD74h */ case   25:  		/* lwz R4, <#[R1 + 88]> */
		/* 8221AD74h case   25:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 8221AD74h case   25:*/		return 0x8221AD78;
		  /* 8221AD78h */ case   26:  		/* bl -799088 */
		/* 8221AD78h case   26:*/		regs.LR = 0x8221AD7C; return 0x82157C08;
		/* 8221AD78h case   26:*/		return 0x8221AD7C;
	}
	return 0x8221AD7C;
} // Block from 8221AD10h-8221AD7Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 8221AD7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221AD7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221AD7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221AD7C);
		  /* 8221AD7Ch */ case    0:  		/* addi R28, R31, 4 */
		/* 8221AD7Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R31,0x4);
		/* 8221AD7Ch case    0:*/		return 0x8221AD80;
		  /* 8221AD80h */ case    1:  		/* rlwinm R11, R15, 2, 0, 29 */
		/* 8221AD80h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R15);
		/* 8221AD80h case    1:*/		return 0x8221AD84;
		  /* 8221AD84h */ case    2:  		/* addi R10, R1, 320 */
		/* 8221AD84h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x140);
		/* 8221AD84h case    2:*/		return 0x8221AD88;
		  /* 8221AD88h */ case    3:  		/* addi R26, R28, 4 */
		/* 8221AD88h case    3:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R28,0x4);
		/* 8221AD88h case    3:*/		return 0x8221AD8C;
		  /* 8221AD8Ch */ case    4:  		/* lhz R9, <#[R28]> */
		/* 8221AD8Ch case    4:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000000) );
		/* 8221AD8Ch case    4:*/		return 0x8221AD90;
		  /* 8221AD90h */ case    5:  		/* stwx R18, <#[R11 + R10]> */
		/* 8221AD90h case    5:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8221AD90h case    5:*/		return 0x8221AD94;
		  /* 8221AD94h */ case    6:  		/* rlwinm R11, R9, 0, 26, 31 */
		/* 8221AD94h case    6:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R11,regs.R9);
		/* 8221AD94h case    6:*/		return 0x8221AD98;
		  /* 8221AD98h */ case    7:  		/* cmplwi CR6, R11, 2 */
		/* 8221AD98h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 8221AD98h case    7:*/		return 0x8221AD9C;
		  /* 8221AD9Ch */ case    8:  		/* bc 12, CR6_EQ, 28 */
		/* 8221AD9Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x8221ADB8;  }
		/* 8221AD9Ch case    8:*/		return 0x8221ADA0;
		  /* 8221ADA0h */ case    9:  		/* li R7, 14127 */
		/* 8221ADA0h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x372F);
		/* 8221ADA0h case    9:*/		return 0x8221ADA4;
		  /* 8221ADA4h */ case   10:  		/* lwz R6, <#[R1 + 84]> */
		/* 8221ADA4h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 8221ADA4h case   10:*/		return 0x8221ADA8;
		  /* 8221ADA8h */ case   11:  		/* li R3, 0 */
		/* 8221ADA8h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221ADA8h case   11:*/		return 0x8221ADAC;
		  /* 8221ADACh */ case   12:  		/* lwz R5, <#[R1 + 108]> */
		/* 8221ADACh case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000006C) );
		/* 8221ADACh case   12:*/		return 0x8221ADB0;
		  /* 8221ADB0h */ case   13:  		/* lwz R4, <#[R1 + 88]> */
		/* 8221ADB0h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 8221ADB0h case   13:*/		return 0x8221ADB4;
		  /* 8221ADB4h */ case   14:  		/* bl -799148 */
		/* 8221ADB4h case   14:*/		regs.LR = 0x8221ADB8; return 0x82157C08;
		/* 8221ADB4h case   14:*/		return 0x8221ADB8;
	}
	return 0x8221ADB8;
} // Block from 8221AD7Ch-8221ADB8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8221ADB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221ADB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221ADB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221ADB8);
		  /* 8221ADB8h */ case    0:  		/* lhz R10, <#[R28 + 2]> */
		/* 8221ADB8h case    0:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000002) );
		/* 8221ADB8h case    0:*/		return 0x8221ADBC;
		  /* 8221ADBCh */ case    1:  		/* addi R9, R1, 496 */
		/* 8221ADBCh case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x1F0);
		/* 8221ADBCh case    1:*/		return 0x8221ADC0;
		  /* 8221ADC0h */ case    2:  		/* stw R21, <#[R1 + 172]> */
		/* 8221ADC0h case    2:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x000000AC) );
		/* 8221ADC0h case    2:*/		return 0x8221ADC4;
		  /* 8221ADC4h */ case    3:  		/* addi R7, R1, 168 */
		/* 8221ADC4h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xA8);
		/* 8221ADC4h case    3:*/		return 0x8221ADC8;
		  /* 8221ADC8h */ case    4:  		/* lwz R11, <#[R29 + 12]> */
		/* 8221ADC8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 8221ADC8h case    4:*/		return 0x8221ADCC;
		  /* 8221ADCCh */ case    5:  		/* li R6, 256 */
		/* 8221ADCCh case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x100);
		/* 8221ADCCh case    5:*/		return 0x8221ADD0;
		  /* 8221ADD0h */ case    6:  		/* addi R4, R29, 13152 */
		/* 8221ADD0h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x3360);
		/* 8221ADD0h case    6:*/		return 0x8221ADD4;
		  /* 8221ADD4h */ case    7:  		/* addi R5, R11, 1 */
		/* 8221ADD4h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1);
		/* 8221ADD4h case    7:*/		return 0x8221ADD8;
		  /* 8221ADD8h */ case    8:  		/* stw R10, <#[R1 + 168]> */
		/* 8221ADD8h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000A8) );
		/* 8221ADD8h case    8:*/		return 0x8221ADDC;
		  /* 8221ADDCh */ case    9:  		/* mr R3, R30 */
		/* 8221ADDCh case    9:*/		regs.R3 = regs.R30;
		/* 8221ADDCh case    9:*/		return 0x8221ADE0;
		  /* 8221ADE0h */ case   10:  		/* stwx R10, <#[R27 + R9]> */
		/* 8221ADE0h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + regs.R9 + 0x00000000) );
		/* 8221ADE0h case   10:*/		return 0x8221ADE4;
		  /* 8221ADE4h */ case   11:  		/* bl -47748 */
		/* 8221ADE4h case   11:*/		regs.LR = 0x8221ADE8; return 0x8220F360;
		/* 8221ADE4h case   11:*/		return 0x8221ADE8;
		  /* 8221ADE8h */ case   12:  		/* lwz R11, <#[R29 + 12028]> */
		/* 8221ADE8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00002EFC) );
		/* 8221ADE8h case   12:*/		return 0x8221ADEC;
		  /* 8221ADECh */ case   13:  		/* mr R7, R16 */
		/* 8221ADECh case   13:*/		regs.R7 = regs.R16;
		/* 8221ADECh case   13:*/		return 0x8221ADF0;
		  /* 8221ADF0h */ case   14:  		/* addi R11, R11, 1 */
		/* 8221ADF0h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8221ADF0h case   14:*/		return 0x8221ADF4;
		  /* 8221ADF4h */ case   15:  		/* addi R6, R1, 80 */
		/* 8221ADF4h case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8221ADF4h case   15:*/		return 0x8221ADF8;
		  /* 8221ADF8h */ case   16:  		/* stw R11, <#[R29 + 12028]> */
		/* 8221ADF8h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00002EFC) );
		/* 8221ADF8h case   16:*/		return 0x8221ADFC;
		  /* 8221ADFCh */ case   17:  		/* mr R5, R23 */
		/* 8221ADFCh case   17:*/		regs.R5 = regs.R23;
		/* 8221ADFCh case   17:*/		return 0x8221AE00;
		  /* 8221AE00h */ case   18:  		/* mr R4, R31 */
		/* 8221AE00h case   18:*/		regs.R4 = regs.R31;
		/* 8221AE00h case   18:*/		return 0x8221AE04;
		  /* 8221AE04h */ case   19:  		/* mr R3, R30 */
		/* 8221AE04h case   19:*/		regs.R3 = regs.R30;
		/* 8221AE04h case   19:*/		return 0x8221AE08;
		  /* 8221AE08h */ case   20:  		/* lwz R11, <#[R31]> */
		/* 8221AE08h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8221AE08h case   20:*/		return 0x8221AE0C;
		  /* 8221AE0Ch */ case   21:  		/* rlwimi R11, R15, 16, 3, 15 */
		/* 8221AE0Ch case   21:*/		cpu::op::rlwimi<0,16,3,15>(regs,&regs.R11,regs.R15);
		/* 8221AE0Ch case   21:*/		return 0x8221AE10;
		  /* 8221AE10h */ case   22:  		/* stw R11, <#[R31]> */
		/* 8221AE10h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8221AE10h case   22:*/		return 0x8221AE14;
		  /* 8221AE14h */ case   23:  		/* bl -6340 */
		/* 8221AE14h case   23:*/		regs.LR = 0x8221AE18; return 0x82219550;
		/* 8221AE14h case   23:*/		return 0x8221AE18;
		  /* 8221AE18h */ case   24:  		/* mr R20, R19 */
		/* 8221AE18h case   24:*/		regs.R20 = regs.R19;
		/* 8221AE18h case   24:*/		return 0x8221AE1C;
		  /* 8221AE1Ch */ case   25:  		/* b 868 */
		/* 8221AE1Ch case   25:*/		return 0x8221B180;
		/* 8221AE1Ch case   25:*/		return 0x8221AE20;
		  /* 8221AE20h */ case   26:  		/* rlwinm R11, R15, 2, 0, 29 */
		/* 8221AE20h case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R15);
		/* 8221AE20h case   26:*/		return 0x8221AE24;
		  /* 8221AE24h */ case   27:  		/* addi R10, R1, 320 */
		/* 8221AE24h case   27:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x140);
		/* 8221AE24h case   27:*/		return 0x8221AE28;
		  /* 8221AE28h */ case   28:  		/* addi R9, R1, 352 */
		/* 8221AE28h case   28:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x160);
		/* 8221AE28h case   28:*/		return 0x8221AE2C;
		  /* 8221AE2Ch */ case   29:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8221AE2Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8221AE2Ch case   29:*/		return 0x8221AE30;
		  /* 8221AE30h */ case   30:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221AE30h case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221AE30h case   30:*/		return 0x8221AE34;
		  /* 8221AE34h */ case   31:  		/* stwx R19, <#[R11 + R9]> */
		/* 8221AE34h case   31:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8221AE34h case   31:*/		return 0x8221AE38;
		  /* 8221AE38h */ case   32:  		/* b -924 */
		/* 8221AE38h case   32:*/		return 0x8221AA9C;
		/* 8221AE38h case   32:*/		return 0x8221AE3C;
		  /* 8221AE3Ch */ case   33:  		/* rlwinm R11, R15, 2, 0, 29 */
		/* 8221AE3Ch case   33:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R15);
		/* 8221AE3Ch case   33:*/		return 0x8221AE40;
		  /* 8221AE40h */ case   34:  		/* addi R10, R1, 320 */
		/* 8221AE40h case   34:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x140);
		/* 8221AE40h case   34:*/		return 0x8221AE44;
		  /* 8221AE44h */ case   35:  		/* addi R9, R1, 352 */
		/* 8221AE44h case   35:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x160);
		/* 8221AE44h case   35:*/		return 0x8221AE48;
		  /* 8221AE48h */ case   36:  		/* mr R17, R21 */
		/* 8221AE48h case   36:*/		regs.R17 = regs.R21;
		/* 8221AE48h case   36:*/		return 0x8221AE4C;
		  /* 8221AE4Ch */ case   37:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8221AE4Ch case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8221AE4Ch case   37:*/		return 0x8221AE50;
		  /* 8221AE50h */ case   38:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221AE50h case   38:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221AE50h case   38:*/		return 0x8221AE54;
		  /* 8221AE54h */ case   39:  		/* stwx R19, <#[R11 + R9]> */
		/* 8221AE54h case   39:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8221AE54h case   39:*/		return 0x8221AE58;
		  /* 8221AE58h */ case   40:  		/* b 776 */
		/* 8221AE58h case   40:*/		return 0x8221B160;
		/* 8221AE58h case   40:*/		return 0x8221AE5C;
		  /* 8221AE5Ch */ case   41:  		/* rlwinm R28, R18, 2, 0, 29 */
		/* 8221AE5Ch case   41:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R18);
		/* 8221AE5Ch case   41:*/		return 0x8221AE60;
		  /* 8221AE60h */ case   42:  		/* lwz R5, <#[R29 + 12]> */
		/* 8221AE60h case   42:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 8221AE60h case   42:*/		return 0x8221AE64;
		  /* 8221AE64h */ case   43:  		/* addi R11, R1, 496 */
		/* 8221AE64h case   43:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x1F0);
		/* 8221AE64h case   43:*/		return 0x8221AE68;
		  /* 8221AE68h */ case   44:  		/* li R10, -1 */
		/* 8221AE68h case   44:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8221AE68h case   44:*/		return 0x8221AE6C;
		  /* 8221AE6Ch */ case   45:  		/* addi R7, R1, 200 */
		/* 8221AE6Ch case   45:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xC8);
		/* 8221AE6Ch case   45:*/		return 0x8221AE70;
		  /* 8221AE70h */ case   46:  		/* stw R10, <#[R1 + 204]> */
		/* 8221AE70h case   46:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000CC) );
		/* 8221AE70h case   46:*/		return 0x8221AE74;
		  /* 8221AE74h */ case   47:  		/* li R6, 512 */
		/* 8221AE74h case   47:*/		cpu::op::li<0>(regs,&regs.R6,0x200);
		/* 8221AE74h case   47:*/		return 0x8221AE78;
		  /* 8221AE78h */ case   48:  		/* addi R4, R29, 13152 */
		/* 8221AE78h case   48:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x3360);
		/* 8221AE78h case   48:*/		return 0x8221AE7C;
		  /* 8221AE7Ch */ case   49:  		/* lwzx R11, <#[R28 + R11]> */
		/* 8221AE7Ch case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 8221AE7Ch case   49:*/		return 0x8221AE80;
		  /* 8221AE80h */ case   50:  		/* mr R3, R30 */
		/* 8221AE80h case   50:*/		regs.R3 = regs.R30;
		/* 8221AE80h case   50:*/		return 0x8221AE84;
		  /* 8221AE84h */ case   51:  		/* stw R11, <#[R1 + 200]> */
		/* 8221AE84h case   51:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000C8) );
		/* 8221AE84h case   51:*/		return 0x8221AE88;
		  /* 8221AE88h */ case   52:  		/* bl -47912 */
		/* 8221AE88h case   52:*/		regs.LR = 0x8221AE8C; return 0x8220F360;
		/* 8221AE88h case   52:*/		return 0x8221AE8C;
		  /* 8221AE8Ch */ case   53:  		/* lwz R11, <#[R29 + 12028]> */
		/* 8221AE8Ch case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00002EFC) );
		/* 8221AE8Ch case   53:*/		return 0x8221AE90;
		  /* 8221AE90h */ case   54:  		/* mr R7, R16 */
		/* 8221AE90h case   54:*/		regs.R7 = regs.R16;
		/* 8221AE90h case   54:*/		return 0x8221AE94;
		  /* 8221AE94h */ case   55:  		/* addi R11, R11, 1 */
		/* 8221AE94h case   55:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8221AE94h case   55:*/		return 0x8221AE98;
		  /* 8221AE98h */ case   56:  		/* addi R6, R1, 80 */
		/* 8221AE98h case   56:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8221AE98h case   56:*/		return 0x8221AE9C;
		  /* 8221AE9Ch */ case   57:  		/* stw R11, <#[R29 + 12028]> */
		/* 8221AE9Ch case   57:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00002EFC) );
		/* 8221AE9Ch case   57:*/		return 0x8221AEA0;
		  /* 8221AEA0h */ case   58:  		/* mr R5, R23 */
		/* 8221AEA0h case   58:*/		regs.R5 = regs.R23;
		/* 8221AEA0h case   58:*/		return 0x8221AEA4;
		  /* 8221AEA4h */ case   59:  		/* mr R4, R31 */
		/* 8221AEA4h case   59:*/		regs.R4 = regs.R31;
		/* 8221AEA4h case   59:*/		return 0x8221AEA8;
		  /* 8221AEA8h */ case   60:  		/* mr R3, R30 */
		/* 8221AEA8h case   60:*/		regs.R3 = regs.R30;
		/* 8221AEA8h case   60:*/		return 0x8221AEAC;
		  /* 8221AEACh */ case   61:  		/* lwz R11, <#[R31]> */
		/* 8221AEACh case   61:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8221AEACh case   61:*/		return 0x8221AEB0;
		  /* 8221AEB0h */ case   62:  		/* rlwimi R11, R15, 16, 3, 15 */
		/* 8221AEB0h case   62:*/		cpu::op::rlwimi<0,16,3,15>(regs,&regs.R11,regs.R15);
		/* 8221AEB0h case   62:*/		return 0x8221AEB4;
		  /* 8221AEB4h */ case   63:  		/* stw R11, <#[R31]> */
		/* 8221AEB4h case   63:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8221AEB4h case   63:*/		return 0x8221AEB8;
		  /* 8221AEB8h */ case   64:  		/* bl -6504 */
		/* 8221AEB8h case   64:*/		regs.LR = 0x8221AEBC; return 0x82219550;
		/* 8221AEB8h case   64:*/		return 0x8221AEBC;
		  /* 8221AEBCh */ case   65:  		/* addi R11, R1, 352 */
		/* 8221AEBCh case   65:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x160);
		/* 8221AEBCh case   65:*/		return 0x8221AEC0;
		  /* 8221AEC0h */ case   66:  		/* addi R26, R31, 4 */
		/* 8221AEC0h case   66:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R31,0x4);
		/* 8221AEC0h case   66:*/		return 0x8221AEC4;
		  /* 8221AEC4h */ case   67:  		/* mr R20, R19 */
		/* 8221AEC4h case   67:*/		regs.R20 = regs.R19;
		/* 8221AEC4h case   67:*/		return 0x8221AEC8;
		  /* 8221AEC8h */ case   68:  		/* addi R18, R18, -1 */
		/* 8221AEC8h case   68:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0xFFFFFFFF);
		/* 8221AEC8h case   68:*/		return 0x8221AECC;
		  /* 8221AECCh */ case   69:  		/* addi R15, R15, -1 */
		/* 8221AECCh case   69:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R15,0xFFFFFFFF);
		/* 8221AECCh case   69:*/		return 0x8221AED0;
		  /* 8221AED0h */ case   70:  		/* stwx R21, <#[R28 + R11]> */
		/* 8221AED0h case   70:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 8221AED0h case   70:*/		return 0x8221AED4;
		  /* 8221AED4h */ case   71:  		/* b 684 */
		/* 8221AED4h case   71:*/		return 0x8221B180;
		/* 8221AED4h case   71:*/		return 0x8221AED8;
		  /* 8221AED8h */ case   72:  		/* stw R21, <#[R1 + 236]> */
		/* 8221AED8h case   72:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x000000EC) );
		/* 8221AED8h case   72:*/		return 0x8221AEDC;
		  /* 8221AEDCh */ case   73:  		/* addi R7, R1, 232 */
		/* 8221AEDCh case   73:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xE8);
		/* 8221AEDCh case   73:*/		return 0x8221AEE0;
		  /* 8221AEE0h */ case   74:  		/* stw R21, <#[R1 + 232]> */
		/* 8221AEE0h case   74:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x000000E8) );
		/* 8221AEE0h case   74:*/		return 0x8221AEE4;
		  /* 8221AEE4h */ case   75:  		/* li R6, 1024 */
		/* 8221AEE4h case   75:*/		cpu::op::li<0>(regs,&regs.R6,0x400);
		/* 8221AEE4h case   75:*/		return 0x8221AEE8;
		  /* 8221AEE8h */ case   76:  		/* addi R31, R31, 4 */
		/* 8221AEE8h case   76:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221AEE8h case   76:*/		return 0x8221AEEC;
		  /* 8221AEECh */ case   77:  		/* b -460 */
		/* 8221AEECh case   77:*/		return 0x8221AD20;
		/* 8221AEECh case   77:*/		return 0x8221AEF0;
		  /* 8221AEF0h */ case   78:  		/* lwz R11, <#[R29 + 16776]> */
		/* 8221AEF0h case   78:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00004188) );
		/* 8221AEF0h case   78:*/		return 0x8221AEF4;
		  /* 8221AEF4h */ case   79:  		/* cmplwi CR6, R11, 0 */
		/* 8221AEF4h case   79:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221AEF4h case   79:*/		return 0x8221AEF8;
		  /* 8221AEF8h */ case   80:  		/* bc 12, CR6_EQ, 32 */
		/* 8221AEF8h case   80:*/		if ( regs.CR[6].eq ) { return 0x8221AF18;  }
		/* 8221AEF8h case   80:*/		return 0x8221AEFC;
		  /* 8221AEFCh */ case   81:  		/* li R7, 0 */
		/* 8221AEFCh case   81:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8221AEFCh case   81:*/		return 0x8221AF00;
		  /* 8221AF00h */ case   82:  		/* lwz R5, <#[R29 + 12]> */
		/* 8221AF00h case   82:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 8221AF00h case   82:*/		return 0x8221AF04;
		  /* 8221AF04h */ case   83:  		/* lis R6, -32768 */
		/* 8221AF04h case   83:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8000);
		/* 8221AF04h case   83:*/		return 0x8221AF08;
		  /* 8221AF08h */ case   84:  		/* addi R4, R29, 13152 */
		/* 8221AF08h case   84:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x3360);
		/* 8221AF08h case   84:*/		return 0x8221AF0C;
		  /* 8221AF0Ch */ case   85:  		/* mr R3, R30 */
		/* 8221AF0Ch case   85:*/		regs.R3 = regs.R30;
		/* 8221AF0Ch case   85:*/		return 0x8221AF10;
		  /* 8221AF10h */ case   86:  		/* bl -48048 */
		/* 8221AF10h case   86:*/		regs.LR = 0x8221AF14; return 0x8220F360;
		/* 8221AF10h case   86:*/		return 0x8221AF14;
		  /* 8221AF14h */ case   87:  		/* b 16 */
		/* 8221AF14h case   87:*/		return 0x8221AF24;
		/* 8221AF14h case   87:*/		return 0x8221AF18;
	}
	return 0x8221AF18;
} // Block from 8221ADB8h-8221AF18h (88 instructions)

//////////////////////////////////////////////////////
// Block at 8221AF18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221AF18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221AF18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221AF18);
		  /* 8221AF18h */ case    0:  		/* lwz R11, <#[R29 + 8]> */
		/* 8221AF18h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8221AF18h case    0:*/		return 0x8221AF1C;
		  /* 8221AF1Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8221AF1Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221AF1Ch case    1:*/		return 0x8221AF20;
		  /* 8221AF20h */ case    2:  		/* bc 12, CR6_EQ, 44 */
		/* 8221AF20h case    2:*/		if ( regs.CR[6].eq ) { return 0x8221AF4C;  }
		/* 8221AF20h case    2:*/		return 0x8221AF24;
	}
	return 0x8221AF24;
} // Block from 8221AF18h-8221AF24h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221AF24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221AF24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221AF24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221AF24);
		  /* 8221AF24h */ case    0:  		/* mr R7, R16 */
		/* 8221AF24h case    0:*/		regs.R7 = regs.R16;
		/* 8221AF24h case    0:*/		return 0x8221AF28;
		  /* 8221AF28h */ case    1:  		/* addi R6, R1, 80 */
		/* 8221AF28h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8221AF28h case    1:*/		return 0x8221AF2C;
		  /* 8221AF2Ch */ case    2:  		/* mr R5, R23 */
		/* 8221AF2Ch case    2:*/		regs.R5 = regs.R23;
		/* 8221AF2Ch case    2:*/		return 0x8221AF30;
		  /* 8221AF30h */ case    3:  		/* mr R4, R31 */
		/* 8221AF30h case    3:*/		regs.R4 = regs.R31;
		/* 8221AF30h case    3:*/		return 0x8221AF34;
		  /* 8221AF34h */ case    4:  		/* mr R3, R30 */
		/* 8221AF34h case    4:*/		regs.R3 = regs.R30;
		/* 8221AF34h case    4:*/		return 0x8221AF38;
		  /* 8221AF38h */ case    5:  		/* mr R20, R19 */
		/* 8221AF38h case    5:*/		regs.R20 = regs.R19;
		/* 8221AF38h case    5:*/		return 0x8221AF3C;
		  /* 8221AF3Ch */ case    6:  		/* bl -6636 */
		/* 8221AF3Ch case    6:*/		regs.LR = 0x8221AF40; return 0x82219550;
		/* 8221AF3Ch case    6:*/		return 0x8221AF40;
		  /* 8221AF40h */ case    7:  		/* mr R26, R3 */
		/* 8221AF40h case    7:*/		regs.R26 = regs.R3;
		/* 8221AF40h case    7:*/		return 0x8221AF44;
		  /* 8221AF44h */ case    8:  		/* mr R31, R23 */
		/* 8221AF44h case    8:*/		regs.R31 = regs.R23;
		/* 8221AF44h case    8:*/		return 0x8221AF48;
		  /* 8221AF48h */ case    9:  		/* b 8 */
		/* 8221AF48h case    9:*/		return 0x8221AF50;
		/* 8221AF48h case    9:*/		return 0x8221AF4C;
	}
	return 0x8221AF4C;
} // Block from 8221AF24h-8221AF4Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8221AF4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221AF4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221AF4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221AF4C);
		  /* 8221AF4Ch */ case    0:  		/* stw R21, <#[R1 + 80]> */
		/* 8221AF4Ch case    0:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000050) );
		/* 8221AF4Ch case    0:*/		return 0x8221AF50;
	}
	return 0x8221AF50;
} // Block from 8221AF4Ch-8221AF50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221AF50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221AF50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221AF50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221AF50);
		  /* 8221AF50h */ case    0:  		/* stw R19, <#[R1 + 92]> */
		/* 8221AF50h case    0:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x0000005C) );
		/* 8221AF50h case    0:*/		return 0x8221AF54;
		  /* 8221AF54h */ case    1:  		/* b 560 */
		/* 8221AF54h case    1:*/		return 0x8221B184;
		/* 8221AF54h case    1:*/		return 0x8221AF58;
		  /* 8221AF58h */ case    2:  		/* lwz R11, <#[R24]> */
		/* 8221AF58h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 8221AF58h case    2:*/		return 0x8221AF5C;
		  /* 8221AF5Ch */ case    3:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 8221AF5Ch case    3:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 8221AF5Ch case    3:*/		return 0x8221AF60;
		  /* 8221AF60h */ case    4:  		/* addi R11, R31, 8 */
		/* 8221AF60h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x8);
		/* 8221AF60h case    4:*/		return 0x8221AF64;
		  /* 8221AF64h */ case    5:  		/* bc 4, CR0_EQ, 8 */
		/* 8221AF64h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8221AF6C;  }
		/* 8221AF64h case    5:*/		return 0x8221AF68;
		  /* 8221AF68h */ case    6:  		/* addi R11, R31, 4 */
		/* 8221AF68h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 8221AF68h case    6:*/		return 0x8221AF6C;
	}
	return 0x8221AF6C;
} // Block from 8221AF50h-8221AF6Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221AF6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221AF6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221AF6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221AF6C);
		  /* 8221AF6Ch */ case    0:  		/* mr R28, R11 */
		/* 8221AF6Ch case    0:*/		regs.R28 = regs.R11;
		/* 8221AF6Ch case    0:*/		return 0x8221AF70;
		  /* 8221AF70h */ case    1:  		/* addi R31, R11, 4 */
		/* 8221AF70h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 8221AF70h case    1:*/		return 0x8221AF74;
		  /* 8221AF74h */ case    2:  		/* lwz R11, <#[R11]> */
		/* 8221AF74h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8221AF74h case    2:*/		return 0x8221AF78;
		  /* 8221AF78h */ case    3:  		/* rlwinm. R11, R11, 0, 9, 9 */
		/* 8221AF78h case    3:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R11);
		/* 8221AF78h case    3:*/		return 0x8221AF7C;
		  /* 8221AF7Ch */ case    4:  		/* bc 12, CR0_EQ, 8 */
		/* 8221AF7Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x8221AF84;  }
		/* 8221AF7Ch case    4:*/		return 0x8221AF80;
		  /* 8221AF80h */ case    5:  		/* addi R31, R31, 4 */
		/* 8221AF80h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221AF80h case    5:*/		return 0x8221AF84;
	}
	return 0x8221AF84;
} // Block from 8221AF6Ch-8221AF84h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221AF84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221AF84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221AF84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221AF84);
		  /* 8221AF84h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 8221AF84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8221AF84h case    0:*/		return 0x8221AF88;
		  /* 8221AF88h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8221AF88h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221AF88h case    1:*/		return 0x8221AF8C;
		  /* 8221AF8Ch */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 8221AF8Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8221AFA8;  }
		/* 8221AF8Ch case    2:*/		return 0x8221AF90;
		  /* 8221AF90h */ case    3:  		/* li R7, 14401 */
		/* 8221AF90h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x3841);
		/* 8221AF90h case    3:*/		return 0x8221AF94;
		  /* 8221AF94h */ case    4:  		/* lwz R6, <#[R1 + 84]> */
		/* 8221AF94h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 8221AF94h case    4:*/		return 0x8221AF98;
		  /* 8221AF98h */ case    5:  		/* li R3, 0 */
		/* 8221AF98h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221AF98h case    5:*/		return 0x8221AF9C;
		  /* 8221AF9Ch */ case    6:  		/* lwz R5, <#[R1 + 120]> */
		/* 8221AF9Ch case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000078) );
		/* 8221AF9Ch case    6:*/		return 0x8221AFA0;
		  /* 8221AFA0h */ case    7:  		/* lwz R4, <#[R1 + 88]> */
		/* 8221AFA0h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 8221AFA0h case    7:*/		return 0x8221AFA4;
		  /* 8221AFA4h */ case    8:  		/* bl -799644 */
		/* 8221AFA4h case    8:*/		regs.LR = 0x8221AFA8; return 0x82157C08;
		/* 8221AFA4h case    8:*/		return 0x8221AFA8;
	}
	return 0x8221AFA8;
} // Block from 8221AF84h-8221AFA8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8221AFA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221AFA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221AFA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221AFA8);
		  /* 8221AFA8h */ case    0:  		/* lhz R11, <#[R24]> */
		/* 8221AFA8h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 8221AFA8h case    0:*/		return 0x8221AFAC;
		  /* 8221AFACh */ case    1:  		/* mr R4, R28 */
		/* 8221AFACh case    1:*/		regs.R4 = regs.R28;
		/* 8221AFACh case    1:*/		return 0x8221AFB0;
		  /* 8221AFB0h */ case    2:  		/* mr R3, R30 */
		/* 8221AFB0h case    2:*/		regs.R3 = regs.R30;
		/* 8221AFB0h case    2:*/		return 0x8221AFB4;
		  /* 8221AFB4h */ case    3:  		/* rlwinm R5, R11, 0, 19, 31 */
		/* 8221AFB4h case    3:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R5,regs.R11);
		/* 8221AFB4h case    3:*/		return 0x8221AFB8;
		  /* 8221AFB8h */ case    4:  		/* bl -17376 */
		/* 8221AFB8h case    4:*/		regs.LR = 0x8221AFBC; return 0x82216BD8;
		/* 8221AFB8h case    4:*/		return 0x8221AFBC;
		  /* 8221AFBCh */ case    5:  		/* b 904 */
		/* 8221AFBCh case    5:*/		return 0x8221B344;
		/* 8221AFBCh case    5:*/		return 0x8221AFC0;
		  /* 8221AFC0h */ case    6:  		/* addi R11, R31, 4 */
		/* 8221AFC0h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 8221AFC0h case    6:*/		return 0x8221AFC4;
		  /* 8221AFC4h */ case    7:  		/* mr R25, R11 */
		/* 8221AFC4h case    7:*/		regs.R25 = regs.R11;
		/* 8221AFC4h case    7:*/		return 0x8221AFC8;
		  /* 8221AFC8h */ case    8:  		/* addi R31, R11, 4 */
		/* 8221AFC8h case    8:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 8221AFC8h case    8:*/		return 0x8221AFCC;
		  /* 8221AFCCh */ case    9:  		/* lwz R11, <#[R11]> */
		/* 8221AFCCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8221AFCCh case    9:*/		return 0x8221AFD0;
		  /* 8221AFD0h */ case   10:  		/* rlwinm. R10, R11, 0, 9, 9 */
		/* 8221AFD0h case   10:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R11);
		/* 8221AFD0h case   10:*/		return 0x8221AFD4;
		  /* 8221AFD4h */ case   11:  		/* bc 12, CR0_EQ, 8 */
		/* 8221AFD4h case   11:*/		if ( regs.CR[0].eq ) { return 0x8221AFDC;  }
		/* 8221AFD4h case   11:*/		return 0x8221AFD8;
		  /* 8221AFD8h */ case   12:  		/* addi R31, R31, 4 */
		/* 8221AFD8h case   12:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221AFD8h case   12:*/		return 0x8221AFDC;
	}
	return 0x8221AFDC;
} // Block from 8221AFA8h-8221AFDCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8221AFDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221AFDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221AFDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221AFDC);
		  /* 8221AFDCh */ case    0:  		/* lwz R17, <#[R1 + 84]> */
		/* 8221AFDCh case    0:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R1 + 0x00000054) );
		/* 8221AFDCh case    0:*/		return 0x8221AFE0;
		  /* 8221AFE0h */ case    1:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 8221AFE0h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 8221AFE0h case    1:*/		return 0x8221AFE4;
		  /* 8221AFE4h */ case    2:  		/* lwz R22, <#[R1 + 88]> */
		/* 8221AFE4h case    2:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x00000058) );
		/* 8221AFE4h case    2:*/		return 0x8221AFE8;
		  /* 8221AFE8h */ case    3:  		/* bc 12, CR0_EQ, 32 */
		/* 8221AFE8h case    3:*/		if ( regs.CR[0].eq ) { return 0x8221B008;  }
		/* 8221AFE8h case    3:*/		return 0x8221AFEC;
		  /* 8221AFECh */ case    4:  		/* li R7, 14432 */
		/* 8221AFECh case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x3860);
		/* 8221AFECh case    4:*/		return 0x8221AFF0;
		  /* 8221AFF0h */ case    5:  		/* lwz R5, <#[R1 + 96]> */
		/* 8221AFF0h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000060) );
		/* 8221AFF0h case    5:*/		return 0x8221AFF4;
		  /* 8221AFF4h */ case    6:  		/* li R3, 0 */
		/* 8221AFF4h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221AFF4h case    6:*/		return 0x8221AFF8;
		  /* 8221AFF8h */ case    7:  		/* mr R6, R17 */
		/* 8221AFF8h case    7:*/		regs.R6 = regs.R17;
		/* 8221AFF8h case    7:*/		return 0x8221AFFC;
		  /* 8221AFFCh */ case    8:  		/* mr R4, R22 */
		/* 8221AFFCh case    8:*/		regs.R4 = regs.R22;
		/* 8221AFFCh case    8:*/		return 0x8221B000;
		  /* 8221B000h */ case    9:  		/* bl -799736 */
		/* 8221B000h case    9:*/		regs.LR = 0x8221B004; return 0x82157C08;
		/* 8221B000h case    9:*/		return 0x8221B004;
		  /* 8221B004h */ case   10:  		/* addi R31, R31, 4 */
		/* 8221B004h case   10:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221B004h case   10:*/		return 0x8221B008;
	}
	return 0x8221B008;
} // Block from 8221AFDCh-8221B008h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8221B008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B008);
		  /* 8221B008h */ case    0:  		/* mr R27, R31 */
		/* 8221B008h case    0:*/		regs.R27 = regs.R31;
		/* 8221B008h case    0:*/		return 0x8221B00C;
		  /* 8221B00Ch */ case    1:  		/* addi R31, R31, 4 */
		/* 8221B00Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221B00Ch case    1:*/		return 0x8221B010;
		  /* 8221B010h */ case    2:  		/* lwz R11, <#[R27]> */
		/* 8221B010h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8221B010h case    2:*/		return 0x8221B014;
		  /* 8221B014h */ case    3:  		/* rlwinm. R10, R11, 0, 9, 9 */
		/* 8221B014h case    3:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R11);
		/* 8221B014h case    3:*/		return 0x8221B018;
		  /* 8221B018h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 8221B018h case    4:*/		if ( regs.CR[0].eq ) { return 0x8221B028;  }
		/* 8221B018h case    4:*/		return 0x8221B01C;
		  /* 8221B01Ch */ case    5:  		/* mr R28, R31 */
		/* 8221B01Ch case    5:*/		regs.R28 = regs.R31;
		/* 8221B01Ch case    5:*/		return 0x8221B020;
		  /* 8221B020h */ case    6:  		/* addi R31, R31, 4 */
		/* 8221B020h case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221B020h case    6:*/		return 0x8221B024;
		  /* 8221B024h */ case    7:  		/* b 8 */
		/* 8221B024h case    7:*/		return 0x8221B02C;
		/* 8221B024h case    7:*/		return 0x8221B028;
	}
	return 0x8221B028;
} // Block from 8221B008h-8221B028h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8221B028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B028);
		  /* 8221B028h */ case    0:  		/* mr R28, R21 */
		/* 8221B028h case    0:*/		regs.R28 = regs.R21;
		/* 8221B028h case    0:*/		return 0x8221B02C;
	}
	return 0x8221B02C;
} // Block from 8221B028h-8221B02Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221B02Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B02C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B02C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B02C);
		  /* 8221B02Ch */ case    0:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 8221B02Ch case    0:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 8221B02Ch case    0:*/		return 0x8221B030;
		  /* 8221B030h */ case    1:  		/* bc 12, CR0_EQ, 32 */
		/* 8221B030h case    1:*/		if ( regs.CR[0].eq ) { return 0x8221B050;  }
		/* 8221B030h case    1:*/		return 0x8221B034;
		  /* 8221B034h */ case    2:  		/* mr R6, R17 */
		/* 8221B034h case    2:*/		regs.R6 = regs.R17;
		/* 8221B034h case    2:*/		return 0x8221B038;
		  /* 8221B038h */ case    3:  		/* lwz R5, <#[R1 + 96]> */
		/* 8221B038h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000060) );
		/* 8221B038h case    3:*/		return 0x8221B03C;
		  /* 8221B03Ch */ case    4:  		/* mr R4, R22 */
		/* 8221B03Ch case    4:*/		regs.R4 = regs.R22;
		/* 8221B03Ch case    4:*/		return 0x8221B040;
		  /* 8221B040h */ case    5:  		/* li R7, 14453 */
		/* 8221B040h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x3875);
		/* 8221B040h case    5:*/		return 0x8221B044;
		  /* 8221B044h */ case    6:  		/* li R3, 0 */
		/* 8221B044h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221B044h case    6:*/		return 0x8221B048;
		  /* 8221B048h */ case    7:  		/* bl -799808 */
		/* 8221B048h case    7:*/		regs.LR = 0x8221B04C; return 0x82157C08;
		/* 8221B048h case    7:*/		return 0x8221B04C;
		  /* 8221B04Ch */ case    8:  		/* addi R31, R31, 4 */
		/* 8221B04Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221B04Ch case    8:*/		return 0x8221B050;
	}
	return 0x8221B050;
} // Block from 8221B02Ch-8221B050h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8221B050h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B050);
		  /* 8221B050h */ case    0:  		/* lhz R11, <#[R24]> */
		/* 8221B050h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 8221B050h case    0:*/		return 0x8221B054;
		  /* 8221B054h */ case    1:  		/* rlwinm R11, R11, 0, 19, 31 */
		/* 8221B054h case    1:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R11,regs.R11);
		/* 8221B054h case    1:*/		return 0x8221B058;
		  /* 8221B058h */ case    2:  		/* cmplwi CR6, R11, 31 */
		/* 8221B058h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001F);
		/* 8221B058h case    2:*/		return 0x8221B05C;
		  /* 8221B05Ch */ case    3:  		/* bc 4, CR6_GT, 28 */
		/* 8221B05Ch case    3:*/		if ( !regs.CR[6].gt ) { return 0x8221B078;  }
		/* 8221B05Ch case    3:*/		return 0x8221B060;
		  /* 8221B060h */ case    4:  		/* mr R6, R17 */
		/* 8221B060h case    4:*/		regs.R6 = regs.R17;
		/* 8221B060h case    4:*/		return 0x8221B064;
		  /* 8221B064h */ case    5:  		/* lwz R5, <#[R1 + 112]> */
		/* 8221B064h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 8221B064h case    5:*/		return 0x8221B068;
		  /* 8221B068h */ case    6:  		/* mr R4, R22 */
		/* 8221B068h case    6:*/		regs.R4 = regs.R22;
		/* 8221B068h case    6:*/		return 0x8221B06C;
		  /* 8221B06Ch */ case    7:  		/* li R7, 14464 */
		/* 8221B06Ch case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x3880);
		/* 8221B06Ch case    7:*/		return 0x8221B070;
		  /* 8221B070h */ case    8:  		/* li R3, 0 */
		/* 8221B070h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221B070h case    8:*/		return 0x8221B074;
		  /* 8221B074h */ case    9:  		/* bl -799852 */
		/* 8221B074h case    9:*/		regs.LR = 0x8221B078; return 0x82157C08;
		/* 8221B074h case    9:*/		return 0x8221B078;
	}
	return 0x8221B078;
} // Block from 8221B050h-8221B078h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8221B078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B078);
		  /* 8221B078h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 8221B078h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8221B078h case    0:*/		return 0x8221B07C;
		  /* 8221B07Ch */ case    1:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 8221B07Ch case    1:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 8221B07Ch case    1:*/		return 0x8221B080;
		  /* 8221B080h */ case    2:  		/* cmplwi CR6, R11, 3 */
		/* 8221B080h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8221B080h case    2:*/		return 0x8221B084;
		  /* 8221B084h */ case    3:  		/* bc 4, CR6_GT, 28 */
		/* 8221B084h case    3:*/		if ( !regs.CR[6].gt ) { return 0x8221B0A0;  }
		/* 8221B084h case    3:*/		return 0x8221B088;
		  /* 8221B088h */ case    4:  		/* mr R6, R17 */
		/* 8221B088h case    4:*/		regs.R6 = regs.R17;
		/* 8221B088h case    4:*/		return 0x8221B08C;
		  /* 8221B08Ch */ case    5:  		/* lwz R5, <#[R1 + 116]> */
		/* 8221B08Ch case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000074) );
		/* 8221B08Ch case    5:*/		return 0x8221B090;
		  /* 8221B090h */ case    6:  		/* mr R4, R22 */
		/* 8221B090h case    6:*/		regs.R4 = regs.R22;
		/* 8221B090h case    6:*/		return 0x8221B094;
		  /* 8221B094h */ case    7:  		/* li R7, 14465 */
		/* 8221B094h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x3881);
		/* 8221B094h case    7:*/		return 0x8221B098;
	}
	return 0x8221B098;
} // Block from 8221B078h-8221B098h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8221B098h
// Function '?DoTranslation@XGRAPHICS@@YAXPAU_XLT_CONTEXT@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B098);
		  /* 8221B098h */ case    0:  		/* li R3, 0 */
		/* 8221B098h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221B098h case    0:*/		return 0x8221B09C;
		  /* 8221B09Ch */ case    1:  		/* bl -799892 */
		/* 8221B09Ch case    1:*/		regs.LR = 0x8221B0A0; return 0x82157C08;
		/* 8221B09Ch case    1:*/		return 0x8221B0A0;
	}
	return 0x8221B0A0;
} // Block from 8221B098h-8221B0A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221B0A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B0A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B0A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B0A0);
		  /* 8221B0A0h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 8221B0A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8221B0A0h case    0:*/		return 0x8221B0A4;
		  /* 8221B0A4h */ case    1:  		/* mr R3, R30 */
		/* 8221B0A4h case    1:*/		regs.R3 = regs.R30;
		/* 8221B0A4h case    1:*/		return 0x8221B0A8;
		  /* 8221B0A8h */ case    2:  		/* lwz R7, <#[R25]> */
		/* 8221B0A8h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R25 + 0x00000000) );
		/* 8221B0A8h case    2:*/		return 0x8221B0AC;
		  /* 8221B0ACh */ case    3:  		/* rlwinm R8, R11, 0, 16, 31 */
		/* 8221B0ACh case    3:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R8,regs.R11);
		/* 8221B0ACh case    3:*/		return 0x8221B0B0;
		  /* 8221B0B0h */ case    4:  		/* lwz R6, <#[R28]> */
		/* 8221B0B0h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R28 + 0x00000000) );
		/* 8221B0B0h case    4:*/		return 0x8221B0B4;
		  /* 8221B0B4h */ case    5:  		/* rlwinm R10, R11, 22, 20, 25 */
		/* 8221B0B4h case    5:*/		cpu::op::rlwinm<0,22,20,25>(regs,&regs.R10,regs.R11);
		/* 8221B0B4h case    5:*/		return 0x8221B0B8;
		  /* 8221B0B8h */ case    6:  		/* lhz R5, <#[R24]> */
		/* 8221B0B8h case    6:*/		cpu::mem::load16z( regs, &regs.R5, (uint32)(regs.R24 + 0x00000000) );
		/* 8221B0B8h case    6:*/		return 0x8221B0BC;
		  /* 8221B0BCh */ case    7:  		/* rlwinm R9, R7, 0, 16, 31 */
		/* 8221B0BCh case    7:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R7);
		/* 8221B0BCh case    7:*/		return 0x8221B0C0;
		  /* 8221B0C0h */ case    8:  		/* rlwinm R11, R7, 22, 20, 25 */
		/* 8221B0C0h case    8:*/		cpu::op::rlwinm<0,22,20,25>(regs,&regs.R11,regs.R7);
		/* 8221B0C0h case    8:*/		return 0x8221B0C4;
		  /* 8221B0C4h */ case    9:  		/* add R10, R10, R8 */
		/* 8221B0C4h case    9:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 8221B0C4h case    9:*/		return 0x8221B0C8;
		  /* 8221B0C8h */ case   10:  		/* add R11, R11, R9 */
		/* 8221B0C8h case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8221B0C8h case   10:*/		return 0x8221B0CC;
		  /* 8221B0CCh */ case   11:  		/* addi R10, R10, 4200 */
		/* 8221B0CCh case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1068);
		/* 8221B0CCh case   11:*/		return 0x8221B0D0;
		  /* 8221B0D0h */ case   12:  		/* addi R11, R11, 4200 */
		/* 8221B0D0h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1068);
		/* 8221B0D0h case   12:*/		return 0x8221B0D4;
		  /* 8221B0D4h */ case   13:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8221B0D4h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8221B0D4h case   13:*/		return 0x8221B0D8;
		  /* 8221B0D8h */ case   14:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221B0D8h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221B0D8h case   14:*/		return 0x8221B0DC;
		  /* 8221B0DCh */ case   15:  		/* rlwinm R7, R6, 0, 29, 31 */
		/* 8221B0DCh case   15:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R7,regs.R6);
		/* 8221B0DCh case   15:*/		return 0x8221B0E0;
		  /* 8221B0E0h */ case   16:  		/* rlwinm R5, R5, 0, 19, 31 */
		/* 8221B0E0h case   16:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R5,regs.R5);
		/* 8221B0E0h case   16:*/		return 0x8221B0E4;
		  /* 8221B0E4h */ case   17:  		/* lwzx R6, <#[R10 + R29]> */
		/* 8221B0E4h case   17:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + regs.R29 + 0x00000000) );
		/* 8221B0E4h case   17:*/		return 0x8221B0E8;
		  /* 8221B0E8h */ case   18:  		/* lwzx R4, <#[R11 + R29]> */
		/* 8221B0E8h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8221B0E8h case   18:*/		return 0x8221B0EC;
		  /* 8221B0ECh */ case   19:  		/* bl -48380 */
		/* 8221B0ECh case   19:*/		regs.LR = 0x8221B0F0; return 0x8220F3F0;
		/* 8221B0ECh case   19:*/		return 0x8221B0F0;
		  /* 8221B0F0h */ case   20:  		/* lwz R5, <#[R29 + 12]> */
		/* 8221B0F0h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 8221B0F0h case   20:*/		return 0x8221B0F4;
		  /* 8221B0F4h */ case   21:  		/* addi R7, R1, 136 */
		/* 8221B0F4h case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x88);
		/* 8221B0F4h case   21:*/		return 0x8221B0F8;
		  /* 8221B0F8h */ case   22:  		/* stw R19, <#[R1 + 140]> */
		/* 8221B0F8h case   22:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x0000008C) );
		/* 8221B0F8h case   22:*/		return 0x8221B0FC;
		  /* 8221B0FCh */ case   23:  		/* lis R6, 1 */
		/* 8221B0FCh case   23:*/		cpu::op::lis<0>(regs,&regs.R6,0x1);
		/* 8221B0FCh case   23:*/		return 0x8221B100;
		  /* 8221B100h */ case   24:  		/* stw R5, <#[R1 + 136]> */
		/* 8221B100h case   24:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000088) );
		/* 8221B100h case   24:*/		return 0x8221B104;
		  /* 8221B104h */ case   25:  		/* stw R5, <#[R1 + 144]> */
		/* 8221B104h case   25:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000090) );
		/* 8221B104h case   25:*/		return 0x8221B108;
		  /* 8221B108h */ case   26:  		/* b -996 */
		/* 8221B108h case   26:*/		return 0x8221AD24;
		/* 8221B108h case   26:*/		return 0x8221B10C;
		  /* 8221B10Ch */ case   27:  		/* lhz R10, <#[R24]> */
		/* 8221B10Ch case   27:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000000) );
		/* 8221B10Ch case   27:*/		return 0x8221B110;
		  /* 8221B110h */ case   28:  		/* addi R31, R31, 4 */
		/* 8221B110h case   28:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221B110h case   28:*/		return 0x8221B114;
		  /* 8221B114h */ case   29:  		/* lwz R11, <#[R30 + 28]> */
		/* 8221B114h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 8221B114h case   29:*/		return 0x8221B118;
		  /* 8221B118h */ case   30:  		/* rlwinm R8, R10, 0, 19, 31 */
		/* 8221B118h case   30:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R8,regs.R10);
		/* 8221B118h case   30:*/		return 0x8221B11C;
		  /* 8221B11Ch */ case   31:  		/* rlwinm R9, R8, 0, 24, 31 */
		/* 8221B11Ch case   31:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R9,regs.R8);
		/* 8221B11Ch case   31:*/		return 0x8221B120;
		  /* 8221B120h */ case   32:  		/* rlwinm R10, R8, 3, 21, 28 */
		/* 8221B120h case   32:*/		cpu::op::rlwinm<0,3,21,28>(regs,&regs.R10,regs.R8);
		/* 8221B120h case   32:*/		return 0x8221B124;
		  /* 8221B124h */ case   33:  		/* addi R9, R9, 1624 */
		/* 8221B124h case   33:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x658);
		/* 8221B124h case   33:*/		return 0x8221B128;
		  /* 8221B128h */ case   34:  		/* add R10, R10, R11 */
		/* 8221B128h case   34:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8221B128h case   34:*/		return 0x8221B12C;
		  /* 8221B12Ch */ case   35:  		/* rlwinm R9, R9, 3, 0, 28 */
		/* 8221B12Ch case   35:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R9,regs.R9);
		/* 8221B12Ch case   35:*/		return 0x8221B130;
		  /* 8221B130h */ case   36:  		/* rlwinm R7, R8, 24, 29, 31 */
		/* 8221B130h case   36:*/		cpu::op::rlwinm<0,24,29,31>(regs,&regs.R7,regs.R8);
		/* 8221B130h case   36:*/		return 0x8221B134;
		  /* 8221B134h */ case   37:  		/* rlwinm R8, R8, 21, 30, 31 */
		/* 8221B134h case   37:*/		cpu::op::rlwinm<0,21,30,31>(regs,&regs.R8,regs.R8);
		/* 8221B134h case   37:*/		return 0x8221B138;
		  /* 8221B138h */ case   38:  		/* stw R8, <#[R10 + 12996]> */
		/* 8221B138h case   38:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x000032C4) );
		/* 8221B138h case   38:*/		return 0x8221B13C;
		  /* 8221B13Ch */ case   39:  		/* stwx R7, <#[R9 + R11]> */
		/* 8221B13Ch case   39:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8221B13Ch case   39:*/		return 0x8221B140;
		  /* 8221B140h */ case   40:  		/* b 516 */
		/* 8221B140h case   40:*/		return 0x8221B344;
		/* 8221B140h case   40:*/		return 0x8221B144;
	}
	return 0x8221B144;
} // Block from 8221B0A0h-8221B144h (41 instructions)

//////////////////////////////////////////////////////
// Block at 8221B144h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B144( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B144) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B144);
		  /* 8221B144h */ case    0:  		/* addi R11, R16, 3292 */
		/* 8221B144h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R16,0xCDC);
		/* 8221B144h case    0:*/		return 0x8221B148;
		  /* 8221B148h */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221B148h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221B148h case    1:*/		return 0x8221B14C;
		  /* 8221B14Ch */ case    2:  		/* lwzx R11, <#[R11 + R29]> */
		/* 8221B14Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8221B14Ch case    2:*/		return 0x8221B150;
		  /* 8221B150h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8221B150h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221B150h case    3:*/		return 0x8221B154;
		  /* 8221B154h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 8221B154h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8221B160;  }
		/* 8221B154h case    4:*/		return 0x8221B158;
		  /* 8221B158h */ case    5:  		/* cmplwi CR6, R16, 0 */
		/* 8221B158h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 8221B158h case    5:*/		return 0x8221B15C;
		  /* 8221B15Ch */ case    6:  		/* bc 4, CR6_EQ, 40 */
		/* 8221B15Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x8221B184;  }
		/* 8221B15Ch case    6:*/		return 0x8221B160;
	}
	return 0x8221B160;
} // Block from 8221B144h-8221B160h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221B160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B160);
		  /* 8221B160h */ case    0:  		/* mr R7, R16 */
		/* 8221B160h case    0:*/		regs.R7 = regs.R16;
		/* 8221B160h case    0:*/		return 0x8221B164;
		  /* 8221B164h */ case    1:  		/* addi R6, R1, 80 */
		/* 8221B164h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8221B164h case    1:*/		return 0x8221B168;
		  /* 8221B168h */ case    2:  		/* mr R5, R23 */
		/* 8221B168h case    2:*/		regs.R5 = regs.R23;
		/* 8221B168h case    2:*/		return 0x8221B16C;
		  /* 8221B16Ch */ case    3:  		/* mr R4, R31 */
		/* 8221B16Ch case    3:*/		regs.R4 = regs.R31;
		/* 8221B16Ch case    3:*/		return 0x8221B170;
		  /* 8221B170h */ case    4:  		/* mr R3, R30 */
		/* 8221B170h case    4:*/		regs.R3 = regs.R30;
		/* 8221B170h case    4:*/		return 0x8221B174;
		  /* 8221B174h */ case    5:  		/* mr R20, R19 */
		/* 8221B174h case    5:*/		regs.R20 = regs.R19;
		/* 8221B174h case    5:*/		return 0x8221B178;
		  /* 8221B178h */ case    6:  		/* bl -7208 */
		/* 8221B178h case    6:*/		regs.LR = 0x8221B17C; return 0x82219550;
		/* 8221B178h case    6:*/		return 0x8221B17C;
	}
	return 0x8221B17C;
} // Block from 8221B160h-8221B17Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221B17Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B17C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B17C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B17C);
		  /* 8221B17Ch */ case    0:  		/* mr R26, R3 */
		/* 8221B17Ch case    0:*/		regs.R26 = regs.R3;
		/* 8221B17Ch case    0:*/		return 0x8221B180;
	}
	return 0x8221B180;
} // Block from 8221B17Ch-8221B180h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221B180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B180);
		  /* 8221B180h */ case    0:  		/* mr R31, R23 */
		/* 8221B180h case    0:*/		regs.R31 = regs.R23;
		/* 8221B180h case    0:*/		return 0x8221B184;
	}
	return 0x8221B184;
} // Block from 8221B180h-8221B184h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221B184h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B184( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B184) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B184);
		  /* 8221B184h */ case    0:  		/* lwz R22, <#[R1 + 80]> */
		/* 8221B184h case    0:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x00000050) );
		/* 8221B184h case    0:*/		return 0x8221B188;
		  /* 8221B188h */ case    1:  		/* cmplwi CR6, R22, 0 */
		/* 8221B188h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 8221B188h case    1:*/		return 0x8221B18C;
		  /* 8221B18Ch */ case    2:  		/* bc 12, CR6_EQ, 440 */
		/* 8221B18Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8221B344;  }
		/* 8221B18Ch case    2:*/		return 0x8221B190;
		  /* 8221B190h */ case    3:  		/* lwz R10, <#[R31]> */
		/* 8221B190h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8221B190h case    3:*/		return 0x8221B194;
		  /* 8221B194h */ case    4:  		/* addi R11, R31, 4 */
		/* 8221B194h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 8221B194h case    4:*/		return 0x8221B198;
		  /* 8221B198h */ case    5:  		/* lwz R9, <#[R1 + 124]> */
		/* 8221B198h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x0000007C) );
		/* 8221B198h case    5:*/		return 0x8221B19C;
		  /* 8221B19Ch */ case    6:  		/* cmplwi CR6, R17, 0 */
		/* 8221B19Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 8221B19Ch case    6:*/		return 0x8221B1A0;
		  /* 8221B1A0h */ case    7:  		/* rlwinm R8, R10, 2, 14, 29 */
		/* 8221B1A0h case    7:*/		cpu::op::rlwinm<0,2,14,29>(regs,&regs.R8,regs.R10);
		/* 8221B1A0h case    7:*/		return 0x8221B1A4;
		  /* 8221B1A4h */ case    8:  		/* addi R7, R9, 456 */
		/* 8221B1A4h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R9,0x1C8);
		/* 8221B1A4h case    8:*/		return 0x8221B1A8;
		  /* 8221B1A8h */ case    9:  		/* mr R27, R11 */
		/* 8221B1A8h case    9:*/		regs.R27 = regs.R11;
		/* 8221B1A8h case    9:*/		return 0x8221B1AC;
		  /* 8221B1ACh */ case   10:  		/* addi R31, R11, 4 */
		/* 8221B1ACh case   10:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 8221B1ACh case   10:*/		return 0x8221B1B0;
		  /* 8221B1B0h */ case   11:  		/* rlwinm R4, R10, 0, 16, 31 */
		/* 8221B1B0h case   11:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R4,regs.R10);
		/* 8221B1B0h case   11:*/		return 0x8221B1B4;
		  /* 8221B1B4h */ case   12:  		/* lwzx R24, <#[R8 + R9]> */
		/* 8221B1B4h case   12:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 8221B1B4h case   12:*/		return 0x8221B1B8;
		  /* 8221B1B8h */ case   13:  		/* lwzx R28, <#[R8 + R7]> */
		/* 8221B1B8h case   13:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 8221B1B8h case   13:*/		return 0x8221B1BC;
		  /* 8221B1BCh */ case   14:  		/* bc 12, CR6_EQ, 28 */
		/* 8221B1BCh case   14:*/		if ( regs.CR[6].eq ) { return 0x8221B1D8;  }
		/* 8221B1BCh case   14:*/		return 0x8221B1C0;
		  /* 8221B1C0h */ case   15:  		/* rlwinm R11, R18, 2, 0, 29 */
		/* 8221B1C0h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R18);
		/* 8221B1C0h case   15:*/		return 0x8221B1C4;
		  /* 8221B1C4h */ case   16:  		/* addi R9, R1, 352 */
		/* 8221B1C4h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x160);
		/* 8221B1C4h case   16:*/		return 0x8221B1C8;
		  /* 8221B1C8h */ case   17:  		/* mr R25, R19 */
		/* 8221B1C8h case   17:*/		regs.R25 = regs.R19;
		/* 8221B1C8h case   17:*/		return 0x8221B1CC;
		  /* 8221B1CCh */ case   18:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8221B1CCh case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8221B1CCh case   18:*/		return 0x8221B1D0;
		  /* 8221B1D0h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 8221B1D0h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221B1D0h case   19:*/		return 0x8221B1D4;
		  /* 8221B1D4h */ case   20:  		/* bc 4, CR6_EQ, 8 */
		/* 8221B1D4h case   20:*/		if ( !regs.CR[6].eq ) { return 0x8221B1DC;  }
		/* 8221B1D4h case   20:*/		return 0x8221B1D8;
	}
	return 0x8221B1D8;
} // Block from 8221B184h-8221B1D8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8221B1D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B1D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B1D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B1D8);
		  /* 8221B1D8h */ case    0:  		/* mr R25, R21 */
		/* 8221B1D8h case    0:*/		regs.R25 = regs.R21;
		/* 8221B1D8h case    0:*/		return 0x8221B1DC;
	}
	return 0x8221B1DC;
} // Block from 8221B1D8h-8221B1DCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221B1DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B1DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B1DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B1DC);
		  /* 8221B1DCh */ case    0:  		/* cmplwi CR6, R4, 112 */
		/* 8221B1DCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000070);
		/* 8221B1DCh case    0:*/		return 0x8221B1E0;
		  /* 8221B1E0h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 8221B1E0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8221B1E8;  }
		/* 8221B1E0h case    1:*/		return 0x8221B1E4;
		  /* 8221B1E4h */ case    2:  		/* mr R25, R19 */
		/* 8221B1E4h case    2:*/		regs.R25 = regs.R19;
		/* 8221B1E4h case    2:*/		return 0x8221B1E8;
	}
	return 0x8221B1E8;
} // Block from 8221B1DCh-8221B1E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221B1E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B1E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B1E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B1E8);
		  /* 8221B1E8h */ case    0:  		/* mr R6, R28 */
		/* 8221B1E8h case    0:*/		regs.R6 = regs.R28;
		/* 8221B1E8h case    0:*/		return 0x8221B1EC;
		  /* 8221B1ECh */ case    1:  		/* rlwinm R5, R10, 16, 19, 31 */
		/* 8221B1ECh case    1:*/		cpu::op::rlwinm<0,16,19,31>(regs,&regs.R5,regs.R10);
		/* 8221B1ECh case    1:*/		return 0x8221B1F0;
		  /* 8221B1F0h */ case    2:  		/* mr R3, R30 */
		/* 8221B1F0h case    2:*/		regs.R3 = regs.R30;
		/* 8221B1F0h case    2:*/		return 0x8221B1F4;
		  /* 8221B1F4h */ case    3:  		/* bl -46804 */
		/* 8221B1F4h case    3:*/		regs.LR = 0x8221B1F8; return 0x8220FB20;
		/* 8221B1F4h case    3:*/		return 0x8221B1F8;
		  /* 8221B1F8h */ case    4:  		/* lwz R11, <#[R27]> */
		/* 8221B1F8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8221B1F8h case    4:*/		return 0x8221B1FC;
		  /* 8221B1FCh */ case    5:  		/* rlwinm. R10, R11, 0, 9, 9 */
		/* 8221B1FCh case    5:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R11);
		/* 8221B1FCh case    5:*/		return 0x8221B200;
		  /* 8221B200h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 8221B200h case    6:*/		if ( regs.CR[0].eq ) { return 0x8221B210;  }
		/* 8221B200h case    6:*/		return 0x8221B204;
		  /* 8221B204h */ case    7:  		/* mr R5, R31 */
		/* 8221B204h case    7:*/		regs.R5 = regs.R31;
		/* 8221B204h case    7:*/		return 0x8221B208;
		  /* 8221B208h */ case    8:  		/* addi R31, R31, 4 */
		/* 8221B208h case    8:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221B208h case    8:*/		return 0x8221B20C;
		  /* 8221B20Ch */ case    9:  		/* b 8 */
		/* 8221B20Ch case    9:*/		return 0x8221B214;
		/* 8221B20Ch case    9:*/		return 0x8221B210;
	}
	return 0x8221B210;
} // Block from 8221B1E8h-8221B210h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8221B210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B210);
		  /* 8221B210h */ case    0:  		/* mr R5, R21 */
		/* 8221B210h case    0:*/		regs.R5 = regs.R21;
		/* 8221B210h case    0:*/		return 0x8221B214;
	}
	return 0x8221B214;
} // Block from 8221B210h-8221B214h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221B214h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B214( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B214) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B214);
		  /* 8221B214h */ case    0:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 8221B214h case    0:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 8221B214h case    0:*/		return 0x8221B218;
		  /* 8221B218h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8221B218h case    1:*/		if ( regs.CR[0].eq ) { return 0x8221B228;  }
		/* 8221B218h case    1:*/		return 0x8221B21C;
		  /* 8221B21Ch */ case    2:  		/* mr R6, R31 */
		/* 8221B21Ch case    2:*/		regs.R6 = regs.R31;
		/* 8221B21Ch case    2:*/		return 0x8221B220;
		  /* 8221B220h */ case    3:  		/* addi R31, R31, 4 */
		/* 8221B220h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221B220h case    3:*/		return 0x8221B224;
		  /* 8221B224h */ case    4:  		/* b 8 */
		/* 8221B224h case    4:*/		return 0x8221B22C;
		/* 8221B224h case    4:*/		return 0x8221B228;
	}
	return 0x8221B228;
} // Block from 8221B214h-8221B228h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221B228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B228);
		  /* 8221B228h */ case    0:  		/* mr R6, R21 */
		/* 8221B228h case    0:*/		regs.R6 = regs.R21;
		/* 8221B228h case    0:*/		return 0x8221B22C;
	}
	return 0x8221B22C;
} // Block from 8221B228h-8221B22Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221B22Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B22C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B22C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B22C);
		  /* 8221B22Ch */ case    0:  		/* mr R8, R25 */
		/* 8221B22Ch case    0:*/		regs.R8 = regs.R25;
		/* 8221B22Ch case    0:*/		return 0x8221B230;
		  /* 8221B230h */ case    1:  		/* mr R7, R28 */
		/* 8221B230h case    1:*/		regs.R7 = regs.R28;
		/* 8221B230h case    1:*/		return 0x8221B234;
		  /* 8221B234h */ case    2:  		/* mr R4, R27 */
		/* 8221B234h case    2:*/		regs.R4 = regs.R27;
		/* 8221B234h case    2:*/		return 0x8221B238;
		  /* 8221B238h */ case    3:  		/* mr R3, R30 */
		/* 8221B238h case    3:*/		regs.R3 = regs.R30;
		/* 8221B238h case    3:*/		return 0x8221B23C;
		  /* 8221B23Ch */ case    4:  		/* bl -45988 */
		/* 8221B23Ch case    4:*/		regs.LR = 0x8221B240; return 0x8220FE98;
		/* 8221B23Ch case    4:*/		return 0x8221B240;
		  /* 8221B240h */ case    5:  		/* cmplwi CR6, R28, 0 */
		/* 8221B240h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8221B240h case    5:*/		return 0x8221B244;
		  /* 8221B244h */ case    6:  		/* stw R21, <#[R1 + 80]> */
		/* 8221B244h case    6:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000050) );
		/* 8221B244h case    6:*/		return 0x8221B248;
		  /* 8221B248h */ case    7:  		/* bc 12, CR6_EQ, 108 */
		/* 8221B248h case    7:*/		if ( regs.CR[6].eq ) { return 0x8221B2B4;  }
		/* 8221B248h case    7:*/		return 0x8221B24C;
		  /* 8221B24Ch */ case    8:  		/* mr R28, R21 */
		/* 8221B24Ch case    8:*/		regs.R28 = regs.R21;
		/* 8221B24Ch case    8:*/		return 0x8221B250;
		  /* 8221B250h */ case    9:  		/* cmplwi CR6, R24, 0 */
		/* 8221B250h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8221B250h case    9:*/		return 0x8221B254;
		  /* 8221B254h */ case   10:  		/* bc 12, CR6_EQ, 172 */
		/* 8221B254h case   10:*/		if ( regs.CR[6].eq ) { return 0x8221B300;  }
		/* 8221B254h case   10:*/		return 0x8221B258;
		  /* 8221B258h */ case   11:  		/* mr R4, R31 */
		/* 8221B258h case   11:*/		regs.R4 = regs.R31;
		/* 8221B258h case   11:*/		return 0x8221B25C;
		  /* 8221B25Ch */ case   12:  		/* addi R31, R31, 4 */
		/* 8221B25Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221B25Ch case   12:*/		return 0x8221B260;
		  /* 8221B260h */ case   13:  		/* subfic R7, R28, 2 */
		/* 8221B260h case   13:*/		cpu::op::subfic<0>(regs,&regs.R7,regs.R28,0x2);
		/* 8221B260h case   13:*/		return 0x8221B264;
		  /* 8221B264h */ case   14:  		/* lwz R11, <#[R4]> */
		/* 8221B264h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 8221B264h case   14:*/		return 0x8221B268;
		  /* 8221B268h */ case   15:  		/* rlwinm. R10, R11, 0, 9, 9 */
		/* 8221B268h case   15:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R11);
		/* 8221B268h case   15:*/		return 0x8221B26C;
		  /* 8221B26Ch */ case   16:  		/* bc 12, CR0_EQ, 16 */
		/* 8221B26Ch case   16:*/		if ( regs.CR[0].eq ) { return 0x8221B27C;  }
		/* 8221B26Ch case   16:*/		return 0x8221B270;
		  /* 8221B270h */ case   17:  		/* mr R5, R31 */
		/* 8221B270h case   17:*/		regs.R5 = regs.R31;
		/* 8221B270h case   17:*/		return 0x8221B274;
		  /* 8221B274h */ case   18:  		/* addi R31, R31, 4 */
		/* 8221B274h case   18:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221B274h case   18:*/		return 0x8221B278;
		  /* 8221B278h */ case   19:  		/* b 8 */
		/* 8221B278h case   19:*/		return 0x8221B280;
		/* 8221B278h case   19:*/		return 0x8221B27C;
	}
	return 0x8221B27C;
} // Block from 8221B22Ch-8221B27Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 8221B27Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B27C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B27C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B27C);
		  /* 8221B27Ch */ case    0:  		/* mr R5, R21 */
		/* 8221B27Ch case    0:*/		regs.R5 = regs.R21;
		/* 8221B27Ch case    0:*/		return 0x8221B280;
	}
	return 0x8221B280;
} // Block from 8221B27Ch-8221B280h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221B280h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B280);
		  /* 8221B280h */ case    0:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 8221B280h case    0:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 8221B280h case    0:*/		return 0x8221B284;
		  /* 8221B284h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8221B284h case    1:*/		if ( regs.CR[0].eq ) { return 0x8221B294;  }
		/* 8221B284h case    1:*/		return 0x8221B288;
		  /* 8221B288h */ case    2:  		/* mr R6, R31 */
		/* 8221B288h case    2:*/		regs.R6 = regs.R31;
		/* 8221B288h case    2:*/		return 0x8221B28C;
		  /* 8221B28Ch */ case    3:  		/* addi R31, R31, 4 */
		/* 8221B28Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221B28Ch case    3:*/		return 0x8221B290;
		  /* 8221B290h */ case    4:  		/* b 8 */
		/* 8221B290h case    4:*/		return 0x8221B298;
		/* 8221B290h case    4:*/		return 0x8221B294;
	}
	return 0x8221B294;
} // Block from 8221B280h-8221B294h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221B294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B294);
		  /* 8221B294h */ case    0:  		/* mr R6, R21 */
		/* 8221B294h case    0:*/		regs.R6 = regs.R21;
		/* 8221B294h case    0:*/		return 0x8221B298;
	}
	return 0x8221B298;
} // Block from 8221B294h-8221B298h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221B298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B298);
		  /* 8221B298h */ case    0:  		/* addi R8, R1, 80 */
		/* 8221B298h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 8221B298h case    0:*/		return 0x8221B29C;
		  /* 8221B29Ch */ case    1:  		/* mr R3, R30 */
		/* 8221B29Ch case    1:*/		regs.R3 = regs.R30;
		/* 8221B29Ch case    1:*/		return 0x8221B2A0;
		  /* 8221B2A0h */ case    2:  		/* bl -45224 */
		/* 8221B2A0h case    2:*/		regs.LR = 0x8221B2A4; return 0x822101F8;
		/* 8221B2A0h case    2:*/		return 0x8221B2A4;
		  /* 8221B2A4h */ case    3:  		/* addi R28, R28, 1 */
		/* 8221B2A4h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8221B2A4h case    3:*/		return 0x8221B2A8;
		  /* 8221B2A8h */ case    4:  		/* cmplw CR6, R28, R24 */
		/* 8221B2A8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R24);
		/* 8221B2A8h case    4:*/		return 0x8221B2AC;
		  /* 8221B2ACh */ case    5:  		/* bc 12, CR6_LT, -84 */
		/* 8221B2ACh case    5:*/		if ( regs.CR[6].lt ) { return 0x8221B258;  }
		/* 8221B2ACh case    5:*/		return 0x8221B2B0;
		  /* 8221B2B0h */ case    6:  		/* b 80 */
		/* 8221B2B0h case    6:*/		return 0x8221B300;
		/* 8221B2B0h case    6:*/		return 0x8221B2B4;
	}
	return 0x8221B2B4;
} // Block from 8221B298h-8221B2B4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221B2B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B2B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B2B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B2B4);
		  /* 8221B2B4h */ case    0:  		/* mr R4, R31 */
		/* 8221B2B4h case    0:*/		regs.R4 = regs.R31;
		/* 8221B2B4h case    0:*/		return 0x8221B2B8;
		  /* 8221B2B8h */ case    1:  		/* addi R31, R31, 4 */
		/* 8221B2B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221B2B8h case    1:*/		return 0x8221B2BC;
		  /* 8221B2BCh */ case    2:  		/* lwz R11, <#[R4]> */
		/* 8221B2BCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 8221B2BCh case    2:*/		return 0x8221B2C0;
		  /* 8221B2C0h */ case    3:  		/* rlwinm. R10, R11, 0, 9, 9 */
		/* 8221B2C0h case    3:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R11);
		/* 8221B2C0h case    3:*/		return 0x8221B2C4;
		  /* 8221B2C4h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 8221B2C4h case    4:*/		if ( regs.CR[0].eq ) { return 0x8221B2D4;  }
		/* 8221B2C4h case    4:*/		return 0x8221B2C8;
		  /* 8221B2C8h */ case    5:  		/* mr R5, R31 */
		/* 8221B2C8h case    5:*/		regs.R5 = regs.R31;
		/* 8221B2C8h case    5:*/		return 0x8221B2CC;
		  /* 8221B2CCh */ case    6:  		/* addi R31, R31, 4 */
		/* 8221B2CCh case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221B2CCh case    6:*/		return 0x8221B2D0;
		  /* 8221B2D0h */ case    7:  		/* b 8 */
		/* 8221B2D0h case    7:*/		return 0x8221B2D8;
		/* 8221B2D0h case    7:*/		return 0x8221B2D4;
	}
	return 0x8221B2D4;
} // Block from 8221B2B4h-8221B2D4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8221B2D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B2D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B2D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B2D4);
		  /* 8221B2D4h */ case    0:  		/* mr R5, R21 */
		/* 8221B2D4h case    0:*/		regs.R5 = regs.R21;
		/* 8221B2D4h case    0:*/		return 0x8221B2D8;
	}
	return 0x8221B2D8;
} // Block from 8221B2D4h-8221B2D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221B2D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B2D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B2D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B2D8);
		  /* 8221B2D8h */ case    0:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 8221B2D8h case    0:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 8221B2D8h case    0:*/		return 0x8221B2DC;
		  /* 8221B2DCh */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8221B2DCh case    1:*/		if ( regs.CR[0].eq ) { return 0x8221B2EC;  }
		/* 8221B2DCh case    1:*/		return 0x8221B2E0;
		  /* 8221B2E0h */ case    2:  		/* mr R6, R31 */
		/* 8221B2E0h case    2:*/		regs.R6 = regs.R31;
		/* 8221B2E0h case    2:*/		return 0x8221B2E4;
		  /* 8221B2E4h */ case    3:  		/* addi R31, R31, 4 */
		/* 8221B2E4h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221B2E4h case    3:*/		return 0x8221B2E8;
		  /* 8221B2E8h */ case    4:  		/* b 8 */
		/* 8221B2E8h case    4:*/		return 0x8221B2F0;
		/* 8221B2E8h case    4:*/		return 0x8221B2EC;
	}
	return 0x8221B2EC;
} // Block from 8221B2D8h-8221B2ECh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221B2ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B2EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B2EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B2EC);
		  /* 8221B2ECh */ case    0:  		/* mr R6, R21 */
		/* 8221B2ECh case    0:*/		regs.R6 = regs.R21;
		/* 8221B2ECh case    0:*/		return 0x8221B2F0;
	}
	return 0x8221B2F0;
} // Block from 8221B2ECh-8221B2F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221B2F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B2F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B2F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B2F0);
		  /* 8221B2F0h */ case    0:  		/* addi R8, R1, 80 */
		/* 8221B2F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 8221B2F0h case    0:*/		return 0x8221B2F4;
		  /* 8221B2F4h */ case    1:  		/* li R7, 0 */
		/* 8221B2F4h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8221B2F4h case    1:*/		return 0x8221B2F8;
		  /* 8221B2F8h */ case    2:  		/* mr R3, R30 */
		/* 8221B2F8h case    2:*/		regs.R3 = regs.R30;
		/* 8221B2F8h case    2:*/		return 0x8221B2FC;
		  /* 8221B2FCh */ case    3:  		/* bl -45316 */
		/* 8221B2FCh case    3:*/		regs.LR = 0x8221B300; return 0x822101F8;
		/* 8221B2FCh case    3:*/		return 0x8221B300;
	}
	return 0x8221B300;
} // Block from 8221B2F0h-8221B300h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221B300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B300);
		  /* 8221B300h */ case    0:  		/* lwz R11, <#[R29 + 12]> */
		/* 8221B300h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 8221B300h case    0:*/		return 0x8221B304;
		  /* 8221B304h */ case    1:  		/* cmplwi CR6, R11, 900 */
		/* 8221B304h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000384);
		/* 8221B304h case    1:*/		return 0x8221B308;
		  /* 8221B308h */ case    2:  		/* bc 4, CR6_GT, 28 */
		/* 8221B308h case    2:*/		if ( !regs.CR[6].gt ) { return 0x8221B324;  }
		/* 8221B308h case    2:*/		return 0x8221B30C;
		  /* 8221B30Ch */ case    3:  		/* li R7, 14684 */
		/* 8221B30Ch case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x395C);
		/* 8221B30Ch case    3:*/		return 0x8221B310;
		  /* 8221B310h */ case    4:  		/* lwz R6, <#[R1 + 84]> */
		/* 8221B310h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 8221B310h case    4:*/		return 0x8221B314;
		  /* 8221B314h */ case    5:  		/* li R3, 0 */
		/* 8221B314h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221B314h case    5:*/		return 0x8221B318;
		  /* 8221B318h */ case    6:  		/* lwz R5, <#[R1 + 132]> */
		/* 8221B318h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000084) );
		/* 8221B318h case    6:*/		return 0x8221B31C;
		  /* 8221B31Ch */ case    7:  		/* lwz R4, <#[R1 + 88]> */
		/* 8221B31Ch case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 8221B31Ch case    7:*/		return 0x8221B320;
		  /* 8221B320h */ case    8:  		/* bl -800536 */
		/* 8221B320h case    8:*/		regs.LR = 0x8221B324; return 0x82157C08;
		/* 8221B320h case    8:*/		return 0x8221B324;
	}
	return 0x8221B324;
} // Block from 8221B300h-8221B324h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8221B324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B324);
		  /* 8221B324h */ case    0:  		/* lwz R10, <#[R29 + 10816]> */
		/* 8221B324h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00002A40) );
		/* 8221B324h case    0:*/		return 0x8221B328;
		  /* 8221B328h */ case    1:  		/* addic. R22, R22, -1 */
		/* 8221B328h case    1:*/		cpu::op::addic<1>(regs,&regs.R22,regs.R22,0xFFFFFFFF);
		/* 8221B328h case    1:*/		return 0x8221B32C;
		  /* 8221B32Ch */ case    2:  		/* lwz R11, <#[R29 + 12]> */
		/* 8221B32Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 8221B32Ch case    2:*/		return 0x8221B330;
		  /* 8221B330h */ case    3:  		/* addi R10, R10, 12 */
		/* 8221B330h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xC);
		/* 8221B330h case    3:*/		return 0x8221B334;
		  /* 8221B334h */ case    4:  		/* addi R11, R11, 1 */
		/* 8221B334h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8221B334h case    4:*/		return 0x8221B338;
		  /* 8221B338h */ case    5:  		/* stw R10, <#[R29 + 10816]> */
		/* 8221B338h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00002A40) );
		/* 8221B338h case    5:*/		return 0x8221B33C;
		  /* 8221B33Ch */ case    6:  		/* stw R11, <#[R29 + 12]> */
		/* 8221B33Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 8221B33Ch case    6:*/		return 0x8221B340;
		  /* 8221B340h */ case    7:  		/* bc 4, CR0_EQ, -432 */
		/* 8221B340h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8221B190;  }
		/* 8221B340h case    7:*/		return 0x8221B344;
	}
	return 0x8221B344;
} // Block from 8221B324h-8221B344h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8221B344h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B344( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B344) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B344);
		  /* 8221B344h */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 8221B344h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 8221B344h case    0:*/		return 0x8221B348;
		  /* 8221B348h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 8221B348h case    1:*/		if ( regs.CR[6].eq ) { return 0x8221B350;  }
		/* 8221B348h case    1:*/		return 0x8221B34C;
		  /* 8221B34Ch */ case    2:  		/* mr R31, R26 */
		/* 8221B34Ch case    2:*/		regs.R31 = regs.R26;
		/* 8221B34Ch case    2:*/		return 0x8221B350;
	}
	return 0x8221B350;
} // Block from 8221B344h-8221B350h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221B350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B350);
		  /* 8221B350h */ case    0:  		/* lwz R11, <#[R1 + 92]> */
		/* 8221B350h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8221B350h case    0:*/		return 0x8221B354;
		  /* 8221B354h */ case    1:  		/* addi R16, R16, 1 */
		/* 8221B354h case    1:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R16,0x1);
		/* 8221B354h case    1:*/		return 0x8221B358;
		  /* 8221B358h */ case    2:  		/* mr R17, R19 */
		/* 8221B358h case    2:*/		regs.R17 = regs.R19;
		/* 8221B358h case    2:*/		return 0x8221B35C;
		  /* 8221B35Ch */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8221B35Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221B35Ch case    3:*/		return 0x8221B360;
		  /* 8221B360h */ case    4:  		/* bc 12, CR6_EQ, -2964 */
		/* 8221B360h case    4:*/		if ( regs.CR[6].eq ) { return 0x8221A7CC;  }
		/* 8221B360h case    4:*/		return 0x8221B364;
		  /* 8221B364h */ case    5:  		/* cmplwi CR6, R18, 0 */
		/* 8221B364h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 8221B364h case    5:*/		return 0x8221B368;
		  /* 8221B368h */ case    6:  		/* bc 12, CR6_EQ, 32 */
		/* 8221B368h case    6:*/		if ( regs.CR[6].eq ) { return 0x8221B388;  }
		/* 8221B368h case    6:*/		return 0x8221B36C;
		  /* 8221B36Ch */ case    7:  		/* lis R11, -32252 */
		/* 8221B36Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221B36Ch case    7:*/		return 0x8221B370;
		  /* 8221B370h */ case    8:  		/* lwz R6, <#[R1 + 84]> */
		/* 8221B370h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 8221B370h case    8:*/		return 0x8221B374;
		  /* 8221B374h */ case    9:  		/* li R7, 14701 */
		/* 8221B374h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x396D);
		/* 8221B374h case    9:*/		return 0x8221B378;
		  /* 8221B378h */ case   10:  		/* lwz R4, <#[R1 + 88]> */
		/* 8221B378h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 8221B378h case   10:*/		return 0x8221B37C;
		  /* 8221B37Ch */ case   11:  		/* addi R5, R11, -4964 */
		/* 8221B37Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFEC9C);
		/* 8221B37Ch case   11:*/		return 0x8221B380;
		  /* 8221B380h */ case   12:  		/* li R3, 0 */
		/* 8221B380h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221B380h case   12:*/		return 0x8221B384;
		  /* 8221B384h */ case   13:  		/* bl -800636 */
		/* 8221B384h case   13:*/		regs.LR = 0x8221B388; return 0x82157C08;
		/* 8221B384h case   13:*/		return 0x8221B388;
	}
	return 0x8221B388;
} // Block from 8221B350h-8221B388h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8221B388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B388);
		  /* 8221B388h */ case    0:  		/* mr R3, R30 */
		/* 8221B388h case    0:*/		regs.R3 = regs.R30;
		/* 8221B388h case    0:*/		return 0x8221B38C;
		  /* 8221B38Ch */ case    1:  		/* bl -17356 */
		/* 8221B38Ch case    1:*/		regs.LR = 0x8221B390; return 0x82216FC0;
		/* 8221B38Ch case    1:*/		return 0x8221B390;
		  /* 8221B390h */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 8221B390h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8221B390h case    2:*/		return 0x8221B394;
		  /* 8221B394h */ case    3:  		/* mr R4, R23 */
		/* 8221B394h case    3:*/		regs.R4 = regs.R23;
		/* 8221B394h case    3:*/		return 0x8221B398;
		  /* 8221B398h */ case    4:  		/* lwz R3, <#[R30]> */
		/* 8221B398h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8221B398h case    4:*/		return 0x8221B39C;
		  /* 8221B39Ch */ case    5:  		/* mtspr CTR, R11 */
		/* 8221B39Ch case    5:*/		regs.CTR = regs.R11;
		/* 8221B39Ch case    5:*/		return 0x8221B3A0;
		  /* 8221B3A0h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 8221B3A0h case    6:*/		if ( 1 ) { regs.LR = 0x8221B3A4; return (uint32)regs.CTR; }
		/* 8221B3A0h case    6:*/		return 0x8221B3A4;
		  /* 8221B3A4h */ case    7:  		/* addi R1, R1, 928 */
		/* 8221B3A4h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x3A0);
		/* 8221B3A4h case    7:*/		return 0x8221B3A8;
		  /* 8221B3A8h */ case    8:  		/* b -1614136 */
		/* 8221B3A8h case    8:*/		return 0x82091270;
		/* 8221B3A8h case    8:*/		return 0x8221B3AC;
		  /* 8221B3ACh */ case    9:  		/* nop */
		/* 8221B3ACh case    9:*/		cpu::op::nop();
		/* 8221B3ACh case    9:*/		return 0x8221B3B0;
	}
	return 0x8221B3B0;
} // Block from 8221B388h-8221B3B0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8221B3B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B3B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B3B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B3B0);
		  /* 8221B3B0h */ case    0:  		/* mfspr R12, LR */
		/* 8221B3B0h case    0:*/		regs.R12 = regs.LR;
		/* 8221B3B0h case    0:*/		return 0x8221B3B4;
		  /* 8221B3B4h */ case    1:  		/* bl -1614228 */
		/* 8221B3B4h case    1:*/		regs.LR = 0x8221B3B8; return 0x82091220;
		/* 8221B3B4h case    1:*/		return 0x8221B3B8;
		  /* 8221B3B8h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 8221B3B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 8221B3B8h case    2:*/		return 0x8221B3BC;
		  /* 8221B3BCh */ case    3:  		/* li R10, 6400 */
		/* 8221B3BCh case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x1900);
		/* 8221B3BCh case    3:*/		return 0x8221B3C0;
		  /* 8221B3C0h */ case    4:  		/* lwz R31, <#[R3 + 28]> */
		/* 8221B3C0h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x0000001C) );
		/* 8221B3C0h case    4:*/		return 0x8221B3C4;
		  /* 8221B3C4h */ case    5:  		/* addi R11, R4, 4 */
		/* 8221B3C4h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0x4);
		/* 8221B3C4h case    5:*/		return 0x8221B3C8;
		  /* 8221B3C8h */ case    6:  		/* li R18, 0 */
		/* 8221B3C8h case    6:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 8221B3C8h case    6:*/		return 0x8221B3CC;
		  /* 8221B3CCh */ case    7:  		/* li R15, 1 */
		/* 8221B3CCh case    7:*/		cpu::op::li<0>(regs,&regs.R15,0x1);
		/* 8221B3CCh case    7:*/		return 0x8221B3D0;
		  /* 8221B3D0h */ case    8:  		/* addi R9, R31, 16800 */
		/* 8221B3D0h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x41A0);
		/* 8221B3D0h case    8:*/		return 0x8221B3D4;
		  /* 8221B3D4h */ case    9:  		/* stw R18, <#[R1 + 84]> */
		/* 8221B3D4h case    9:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x00000054) );
		/* 8221B3D4h case    9:*/		return 0x8221B3D8;
		  /* 8221B3D8h */ case   10:  		/* mr R19, R11 */
		/* 8221B3D8h case   10:*/		regs.R19 = regs.R11;
		/* 8221B3D8h case   10:*/		return 0x8221B3DC;
		  /* 8221B3DCh */ case   11:  		/* mtspr CTR, R10 */
		/* 8221B3DCh case   11:*/		regs.CTR = regs.R10;
		/* 8221B3DCh case   11:*/		return 0x8221B3E0;
		  /* 8221B3E0h */ case   12:  		/* addi R30, R11, 4 */
		/* 8221B3E0h case   12:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x4);
		/* 8221B3E0h case   12:*/		return 0x8221B3E4;
		  /* 8221B3E4h */ case   13:  		/* stw R18, <#[R1 + 80]> */
		/* 8221B3E4h case   13:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x00000050) );
		/* 8221B3E4h case   13:*/		return 0x8221B3E8;
		  /* 8221B3E8h */ case   14:  		/* mr R14, R3 */
		/* 8221B3E8h case   14:*/		regs.R14 = regs.R3;
		/* 8221B3E8h case   14:*/		return 0x8221B3EC;
		  /* 8221B3ECh */ case   15:  		/* mr R20, R18 */
		/* 8221B3ECh case   15:*/		regs.R20 = regs.R18;
		/* 8221B3ECh case   15:*/		return 0x8221B3F0;
		  /* 8221B3F0h */ case   16:  		/* mr R27, R15 */
		/* 8221B3F0h case   16:*/		regs.R27 = regs.R15;
		/* 8221B3F0h case   16:*/		return 0x8221B3F4;
		  /* 8221B3F4h */ case   17:  		/* addi R11, R9, -1 */
		/* 8221B3F4h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0xFFFFFFFF);
		/* 8221B3F4h case   17:*/		return 0x8221B3F8;
		  /* 8221B3F8h */ case   18:  		/* li R10, 255 */
		/* 8221B3F8h case   18:*/		cpu::op::li<0>(regs,&regs.R10,0xFF);
		/* 8221B3F8h case   18:*/		return 0x8221B3FC;
		  /* 8221B3FCh */ case   19:  		/* stbu R10, <#[R11 + 1]> */
		/* 8221B3FCh case   19:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000001) );
		regs.R11 = (uint32)(regs.R11 + 0x00000001);
		/* 8221B3FCh case   19:*/		return 0x8221B400;
		  /* 8221B400h */ case   20:  		/* bc 16, CR0_LT, -4 */
		/* 8221B400h case   20:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221B3FC;  }
		/* 8221B400h case   20:*/		return 0x8221B404;
		  /* 8221B404h */ case   21:  		/* lis R11, -32216 */
		/* 8221B404h case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 8221B404h case   21:*/		return 0x8221B408;
		  /* 8221B408h */ case   22:  		/* lis R10, -32253 */
		/* 8221B408h case   22:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8221B408h case   22:*/		return 0x8221B40C;
		  /* 8221B40Ch */ case   23:  		/* lis R9, -32252 */
		/* 8221B40Ch case   23:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8221B40Ch case   23:*/		return 0x8221B410;
		  /* 8221B410h */ case   24:  		/* lis R8, -32252 */
		/* 8221B410h case   24:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8204);
		/* 8221B410h case   24:*/		return 0x8221B414;
		  /* 8221B414h */ case   25:  		/* li R23, 4096 */
		/* 8221B414h case   25:*/		cpu::op::li<0>(regs,&regs.R23,0x1000);
		/* 8221B414h case   25:*/		return 0x8221B418;
		  /* 8221B418h */ case   26:  		/* lis R21, 1 */
		/* 8221B418h case   26:*/		cpu::op::lis<0>(regs,&regs.R21,0x1);
		/* 8221B418h case   26:*/		return 0x8221B41C;
		  /* 8221B41Ch */ case   27:  		/* addi R24, R11, 8968 */
		/* 8221B41Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0x2308);
		/* 8221B41Ch case   27:*/		return 0x8221B420;
		  /* 8221B420h */ case   28:  		/* addi R17, R10, 27460 */
		/* 8221B420h case   28:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R10,0x6B44);
		/* 8221B420h case   28:*/		return 0x8221B424;
		  /* 8221B424h */ case   29:  		/* addi R22, R9, -4656 */
		/* 8221B424h case   29:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R9,0xFFFFEDD0);
		/* 8221B424h case   29:*/		return 0x8221B428;
		  /* 8221B428h */ case   30:  		/* addi R16, R8, -7312 */
		/* 8221B428h case   30:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R8,0xFFFFE370);
		/* 8221B428h case   30:*/		return 0x8221B42C;
		  /* 8221B42Ch */ case   31:  		/* mr R26, R30 */
		/* 8221B42Ch case   31:*/		regs.R26 = regs.R30;
		/* 8221B42Ch case   31:*/		return 0x8221B430;
		  /* 8221B430h */ case   32:  		/* addi R8, R24, 456 */
		/* 8221B430h case   32:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R24,0x1C8);
		/* 8221B430h case   32:*/		return 0x8221B434;
		  /* 8221B434h */ case   33:  		/* addi R30, R30, 4 */
		/* 8221B434h case   33:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8221B434h case   33:*/		return 0x8221B438;
		  /* 8221B438h */ case   34:  		/* lwz R11, <#[R26]> */
		/* 8221B438h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8221B438h case   34:*/		return 0x8221B43C;
		  /* 8221B43Ch */ case   35:  		/* rlwinm R9, R11, 2, 14, 29 */
		/* 8221B43Ch case   35:*/		cpu::op::rlwinm<0,2,14,29>(regs,&regs.R9,regs.R11);
		/* 8221B43Ch case   35:*/		return 0x8221B440;
		  /* 8221B440h */ case   36:  		/* rlwinm R10, R11, 0, 16, 31 */
		/* 8221B440h case   36:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R11);
		/* 8221B440h case   36:*/		return 0x8221B444;
		  /* 8221B444h */ case   37:  		/* cmplwi CR6, R10, 40 */
		/* 8221B444h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000028);
		/* 8221B444h case   37:*/		return 0x8221B448;
		  /* 8221B448h */ case   38:  		/* lwzx R25, <#[R9 + R8]> */
		/* 8221B448h case   38:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 8221B448h case   38:*/		return 0x8221B44C;
		  /* 8221B44Ch */ case   39:  		/* bc 12, CR6_EQ, 1128 */
		/* 8221B44Ch case   39:*/		if ( regs.CR[6].eq ) { return 0x8221B8B4;  }
		/* 8221B44Ch case   39:*/		return 0x8221B450;
		  /* 8221B450h */ case   40:  		/* cmplwi CR6, R10, 26 */
		/* 8221B450h case   40:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000001A);
		/* 8221B450h case   40:*/		return 0x8221B454;
		  /* 8221B454h */ case   41:  		/* bc 4, CR6_EQ, 16 */
		/* 8221B454h case   41:*/		if ( !regs.CR[6].eq ) { return 0x8221B464;  }
		/* 8221B454h case   41:*/		return 0x8221B458;
		  /* 8221B458h */ case   42:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 8221B458h case   42:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 8221B458h case   42:*/		return 0x8221B45C;
		  /* 8221B45Ch */ case   43:  		/* bc 12, CR0_EQ, 8 */
		/* 8221B45Ch case   43:*/		if ( regs.CR[0].eq ) { return 0x8221B464;  }
		/* 8221B45Ch case   43:*/		return 0x8221B460;
		  /* 8221B460h */ case   44:  		/* addi R30, R30, 4 */
		/* 8221B460h case   44:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8221B460h case   44:*/		return 0x8221B464;
	}
	return 0x8221B464;
} // Block from 8221B3B0h-8221B464h (45 instructions)

//////////////////////////////////////////////////////
// Block at 8221B464h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B464( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B464) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B464);
		  /* 8221B464h */ case    0:  		/* lwzx R11, <#[R9 + R24]> */
		/* 8221B464h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R24 + 0x00000000) );
		/* 8221B464h case    0:*/		return 0x8221B468;
		  /* 8221B468h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8221B468h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221B468h case    1:*/		return 0x8221B46C;
		  /* 8221B46Ch */ case    2:  		/* bc 12, CR6_EQ, 256 */
		/* 8221B46Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8221B56C;  }
		/* 8221B46Ch case    2:*/		return 0x8221B470;
		  /* 8221B470h */ case    3:  		/* mr R8, R30 */
		/* 8221B470h case    3:*/		regs.R8 = regs.R30;
		/* 8221B470h case    3:*/		return 0x8221B474;
		  /* 8221B474h */ case    4:  		/* addi R30, R30, 4 */
		/* 8221B474h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8221B474h case    4:*/		return 0x8221B478;
		  /* 8221B478h */ case    5:  		/* lwz R9, <#[R8]> */
		/* 8221B478h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000000) );
		/* 8221B478h case    5:*/		return 0x8221B47C;
		  /* 8221B47Ch */ case    6:  		/* rlwinm R10, R9, 22, 20, 25 */
		/* 8221B47Ch case    6:*/		cpu::op::rlwinm<0,22,20,25>(regs,&regs.R10,regs.R9);
		/* 8221B47Ch case    6:*/		return 0x8221B480;
		  /* 8221B480h */ case    7:  		/* rlwinm R11, R9, 0, 16, 31 */
		/* 8221B480h case    7:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R9);
		/* 8221B480h case    7:*/		return 0x8221B484;
		  /* 8221B484h */ case    8:  		/* rlwinm R9, R9, 16, 26, 31 */
		/* 8221B484h case    8:*/		cpu::op::rlwinm<0,16,26,31>(regs,&regs.R9,regs.R9);
		/* 8221B484h case    8:*/		return 0x8221B488;
		  /* 8221B488h */ case    9:  		/* add R11, R10, R11 */
		/* 8221B488h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8221B488h case    9:*/		return 0x8221B48C;
		  /* 8221B48Ch */ case   10:  		/* addi R11, R11, 4200 */
		/* 8221B48Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1068);
		/* 8221B48Ch case   10:*/		return 0x8221B490;
		  /* 8221B490h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221B490h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221B490h case   11:*/		return 0x8221B494;
		  /* 8221B494h */ case   12:  		/* lwzx R10, <#[R11 + R31]> */
		/* 8221B494h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221B494h case   12:*/		return 0x8221B498;
		  /* 8221B498h */ case   13:  		/* cmpwi CR6, R10, -1 */
		/* 8221B498h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8221B498h case   13:*/		return 0x8221B49C;
		  /* 8221B49Ch */ case   14:  		/* bc 4, CR6_EQ, 32 */
		/* 8221B49Ch case   14:*/		if ( !regs.CR[6].eq ) { return 0x8221B4BC;  }
		/* 8221B49Ch case   14:*/		return 0x8221B4A0;
		  /* 8221B4A0h */ case   15:  		/* cmplwi CR6, R9, 0 */
		/* 8221B4A0h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8221B4A0h case   15:*/		return 0x8221B4A4;
		  /* 8221B4A4h */ case   16:  		/* bc 12, CR6_EQ, 24 */
		/* 8221B4A4h case   16:*/		if ( regs.CR[6].eq ) { return 0x8221B4BC;  }
		/* 8221B4A4h case   16:*/		return 0x8221B4A8;
		  /* 8221B4A8h */ case   17:  		/* cmplwi CR6, R9, 1 */
		/* 8221B4A8h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000001);
		/* 8221B4A8h case   17:*/		return 0x8221B4AC;
		  /* 8221B4ACh */ case   18:  		/* bc 12, CR6_EQ, 16 */
		/* 8221B4ACh case   18:*/		if ( regs.CR[6].eq ) { return 0x8221B4BC;  }
		/* 8221B4ACh case   18:*/		return 0x8221B4B0;
		  /* 8221B4B0h */ case   19:  		/* cmplwi CR6, R9, 2 */
		/* 8221B4B0h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000002);
		/* 8221B4B0h case   19:*/		return 0x8221B4B4;
		  /* 8221B4B4h */ case   20:  		/* bc 12, CR6_EQ, 8 */
		/* 8221B4B4h case   20:*/		if ( regs.CR[6].eq ) { return 0x8221B4BC;  }
		/* 8221B4B4h case   20:*/		return 0x8221B4B8;
		  /* 8221B4B8h */ case   21:  		/* stwx R18, <#[R11 + R31]> */
		/* 8221B4B8h case   21:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221B4B8h case   21:*/		return 0x8221B4BC;
	}
	return 0x8221B4BC;
} // Block from 8221B464h-8221B4BCh (22 instructions)

//////////////////////////////////////////////////////
// Block at 8221B4BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B4BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B4BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B4BC);
		  /* 8221B4BCh */ case    0:  		/* lbz R11, <#[R19 + 1]> */
		/* 8221B4BCh case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000001) );
		/* 8221B4BCh case    0:*/		return 0x8221B4C0;
		  /* 8221B4C0h */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 8221B4C0h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221B4C0h case    1:*/		return 0x8221B4C4;
		  /* 8221B4C4h */ case    2:  		/* lhz R11, <#[R8]> */
		/* 8221B4C4h case    2:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 8221B4C4h case    2:*/		return 0x8221B4C8;
		  /* 8221B4C8h */ case    3:  		/* rlwinm R11, R11, 0, 26, 31 */
		/* 8221B4C8h case    3:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R11,regs.R11);
		/* 8221B4C8h case    3:*/		return 0x8221B4CC;
		  /* 8221B4CCh */ case    4:  		/* bc 4, CR0_EQ, 60 */
		/* 8221B4CCh case    4:*/		if ( !regs.CR[0].eq ) { return 0x8221B508;  }
		/* 8221B4CCh case    4:*/		return 0x8221B4D0;
		  /* 8221B4D0h */ case    5:  		/* cmplwi CR6, R11, 14 */
		/* 8221B4D0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000E);
		/* 8221B4D0h case    5:*/		return 0x8221B4D4;
		  /* 8221B4D4h */ case    6:  		/* bc 12, CR6_EQ, 68 */
		/* 8221B4D4h case    6:*/		if ( regs.CR[6].eq ) { return 0x8221B518;  }
		/* 8221B4D4h case    6:*/		return 0x8221B4D8;
		  /* 8221B4D8h */ case    7:  		/* cmplwi CR6, R11, 15 */
		/* 8221B4D8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000F);
		/* 8221B4D8h case    7:*/		return 0x8221B4DC;
		  /* 8221B4DCh */ case    8:  		/* bc 12, CR6_EQ, 60 */
		/* 8221B4DCh case    8:*/		if ( regs.CR[6].eq ) { return 0x8221B518;  }
		/* 8221B4DCh case    8:*/		return 0x8221B4E0;
		  /* 8221B4E0h */ case    9:  		/* cmplwi CR6, R11, 18 */
		/* 8221B4E0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000012);
		/* 8221B4E0h case    9:*/		return 0x8221B4E4;
		  /* 8221B4E4h */ case   10:  		/* bc 12, CR6_EQ, 52 */
		/* 8221B4E4h case   10:*/		if ( regs.CR[6].eq ) { return 0x8221B518;  }
		/* 8221B4E4h case   10:*/		return 0x8221B4E8;
		  /* 8221B4E8h */ case   11:  		/* cmplwi CR6, R11, 19 */
		/* 8221B4E8h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000013);
		/* 8221B4E8h case   11:*/		return 0x8221B4EC;
		  /* 8221B4ECh */ case   12:  		/* bc 12, CR6_EQ, 44 */
		/* 8221B4ECh case   12:*/		if ( regs.CR[6].eq ) { return 0x8221B518;  }
		/* 8221B4ECh case   12:*/		return 0x8221B4F0;
		  /* 8221B4F0h */ case   13:  		/* cmplwi CR6, R11, 17 */
		/* 8221B4F0h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000011);
		/* 8221B4F0h case   13:*/		return 0x8221B4F4;
		  /* 8221B4F4h */ case   14:  		/* bc 12, CR6_EQ, 36 */
		/* 8221B4F4h case   14:*/		if ( regs.CR[6].eq ) { return 0x8221B518;  }
		/* 8221B4F4h case   14:*/		return 0x8221B4F8;
		  /* 8221B4F8h */ case   15:  		/* cmplwi CR6, R11, 16 */
		/* 8221B4F8h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000010);
		/* 8221B4F8h case   15:*/		return 0x8221B4FC;
		  /* 8221B4FCh */ case   16:  		/* bc 12, CR6_EQ, 28 */
		/* 8221B4FCh case   16:*/		if ( regs.CR[6].eq ) { return 0x8221B518;  }
		/* 8221B4FCh case   16:*/		return 0x8221B500;
		  /* 8221B500h */ case   17:  		/* cmplwi CR6, R11, 20 */
		/* 8221B500h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000014);
		/* 8221B500h case   17:*/		return 0x8221B504;
		  /* 8221B504h */ case   18:  		/* b 16 */
		/* 8221B504h case   18:*/		return 0x8221B514;
		/* 8221B504h case   18:*/		return 0x8221B508;
	}
	return 0x8221B508;
} // Block from 8221B4BCh-8221B508h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8221B508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B508);
		  /* 8221B508h */ case    0:  		/* cmplwi CR6, R11, 23 */
		/* 8221B508h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000017);
		/* 8221B508h case    0:*/		return 0x8221B50C;
		  /* 8221B50Ch */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8221B50Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8221B518;  }
		/* 8221B50Ch case    1:*/		return 0x8221B510;
		  /* 8221B510h */ case    2:  		/* cmplwi CR6, R11, 24 */
		/* 8221B510h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000018);
		/* 8221B510h case    2:*/		return 0x8221B514;
	}
	return 0x8221B514;
} // Block from 8221B508h-8221B514h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221B514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B514);
		  /* 8221B514h */ case    0:  		/* bc 4, CR6_EQ, 24 */
		/* 8221B514h case    0:*/		if ( !regs.CR[6].eq ) { return 0x8221B52C;  }
		/* 8221B514h case    0:*/		return 0x8221B518;
	}
	return 0x8221B518;
} // Block from 8221B514h-8221B518h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221B518h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B518);
		  /* 8221B518h */ case    0:  		/* addi R11, R27, 3292 */
		/* 8221B518h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xCDC);
		/* 8221B518h case    0:*/		return 0x8221B51C;
		  /* 8221B51Ch */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221B51Ch case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221B51Ch case    1:*/		return 0x8221B520;
		  /* 8221B520h */ case    2:  		/* lwzx R10, <#[R11 + R31]> */
		/* 8221B520h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221B520h case    2:*/		return 0x8221B524;
		  /* 8221B524h */ case    3:  		/* ori R10, R10, 2048 */
		/* 8221B524h case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x800);
		/* 8221B524h case    3:*/		return 0x8221B528;
		  /* 8221B528h */ case    4:  		/* stwx R10, <#[R11 + R31]> */
		/* 8221B528h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221B528h case    4:*/		return 0x8221B52C;
	}
	return 0x8221B52C;
} // Block from 8221B518h-8221B52Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221B52Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B52C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B52C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B52C);
		  /* 8221B52Ch */ case    0:  		/* lwz R11, <#[R8]> */
		/* 8221B52Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 8221B52Ch case    0:*/		return 0x8221B530;
		  /* 8221B530h */ case    1:  		/* rlwinm. R11, R11, 0, 9, 9 */
		/* 8221B530h case    1:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R11);
		/* 8221B530h case    1:*/		return 0x8221B534;
		  /* 8221B534h */ case    2:  		/* bc 12, CR0_EQ, 40 */
		/* 8221B534h case    2:*/		if ( regs.CR[0].eq ) { return 0x8221B55C;  }
		/* 8221B534h case    2:*/		return 0x8221B538;
		  /* 8221B538h */ case    3:  		/* lwz R11, <#[R30]> */
		/* 8221B538h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8221B538h case    3:*/		return 0x8221B53C;
		  /* 8221B53Ch */ case    4:  		/* rlwinm. R11, R11, 0, 19, 22 */
		/* 8221B53Ch case    4:*/		cpu::op::rlwinm<1,0,19,22>(regs,&regs.R11,regs.R11);
		/* 8221B53Ch case    4:*/		return 0x8221B540;
		  /* 8221B540h */ case    5:  		/* bc 12, CR0_EQ, 24 */
		/* 8221B540h case    5:*/		if ( regs.CR[0].eq ) { return 0x8221B558;  }
		/* 8221B540h case    5:*/		return 0x8221B544;
		  /* 8221B544h */ case    6:  		/* addi R11, R27, 3292 */
		/* 8221B544h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xCDC);
		/* 8221B544h case    6:*/		return 0x8221B548;
		  /* 8221B548h */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221B548h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221B548h case    7:*/		return 0x8221B54C;
		  /* 8221B54Ch */ case    8:  		/* lwzx R10, <#[R11 + R31]> */
		/* 8221B54Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221B54Ch case    8:*/		return 0x8221B550;
		  /* 8221B550h */ case    9:  		/* ori R10, R10, 4 */
		/* 8221B550h case    9:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8221B550h case    9:*/		return 0x8221B554;
		  /* 8221B554h */ case   10:  		/* stwx R10, <#[R11 + R31]> */
		/* 8221B554h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221B554h case   10:*/		return 0x8221B558;
	}
	return 0x8221B558;
} // Block from 8221B52Ch-8221B558h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8221B558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B558);
		  /* 8221B558h */ case    0:  		/* addi R30, R30, 4 */
		/* 8221B558h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8221B558h case    0:*/		return 0x8221B55C;
	}
	return 0x8221B55C;
} // Block from 8221B558h-8221B55Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221B55Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B55C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B55C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B55C);
		  /* 8221B55Ch */ case    0:  		/* lwz R11, <#[R8]> */
		/* 8221B55Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 8221B55Ch case    0:*/		return 0x8221B560;
		  /* 8221B560h */ case    1:  		/* rlwinm. R11, R11, 0, 8, 8 */
		/* 8221B560h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R11,regs.R11);
		/* 8221B560h case    1:*/		return 0x8221B564;
		  /* 8221B564h */ case    2:  		/* bc 12, CR0_EQ, 8 */
		/* 8221B564h case    2:*/		if ( regs.CR[0].eq ) { return 0x8221B56C;  }
		/* 8221B564h case    2:*/		return 0x8221B568;
		  /* 8221B568h */ case    3:  		/* addi R30, R30, 4 */
		/* 8221B568h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8221B568h case    3:*/		return 0x8221B56C;
	}
	return 0x8221B56C;
} // Block from 8221B55Ch-8221B56Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221B56Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B56C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B56C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B56C);
		  /* 8221B56Ch */ case    0:  		/* mr R28, R18 */
		/* 8221B56Ch case    0:*/		regs.R28 = regs.R18;
		/* 8221B56Ch case    0:*/		return 0x8221B570;
		  /* 8221B570h */ case    1:  		/* cmplwi CR6, R25, 0 */
		/* 8221B570h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8221B570h case    1:*/		return 0x8221B574;
		  /* 8221B574h */ case    2:  		/* bc 12, CR6_EQ, 764 */
		/* 8221B574h case    2:*/		if ( regs.CR[6].eq ) { return 0x8221B870;  }
		/* 8221B574h case    2:*/		return 0x8221B578;
		  /* 8221B578h */ case    3:  		/* mr R29, R30 */
		/* 8221B578h case    3:*/		regs.R29 = regs.R30;
		/* 8221B578h case    3:*/		return 0x8221B57C;
		  /* 8221B57Ch */ case    4:  		/* addi R30, R30, 4 */
		/* 8221B57Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8221B57Ch case    4:*/		return 0x8221B580;
		  /* 8221B580h */ case    5:  		/* lwz R10, <#[R29]> */
		/* 8221B580h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 8221B580h case    5:*/		return 0x8221B584;
		  /* 8221B584h */ case    6:  		/* rlwinm R9, R10, 0, 16, 31 */
		/* 8221B584h case    6:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R10);
		/* 8221B584h case    6:*/		return 0x8221B588;
		  /* 8221B588h */ case    7:  		/* rlwinm R11, R10, 22, 20, 25 */
		/* 8221B588h case    7:*/		cpu::op::rlwinm<0,22,20,25>(regs,&regs.R11,regs.R10);
		/* 8221B588h case    7:*/		return 0x8221B58C;
		  /* 8221B58Ch */ case    8:  		/* rlwinm R10, R10, 16, 26, 31 */
		/* 8221B58Ch case    8:*/		cpu::op::rlwinm<0,16,26,31>(regs,&regs.R10,regs.R10);
		/* 8221B58Ch case    8:*/		return 0x8221B590;
		  /* 8221B590h */ case    9:  		/* add R11, R11, R9 */
		/* 8221B590h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8221B590h case    9:*/		return 0x8221B594;
		  /* 8221B594h */ case   10:  		/* addi R11, R11, 4200 */
		/* 8221B594h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1068);
		/* 8221B594h case   10:*/		return 0x8221B598;
		  /* 8221B598h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221B598h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221B598h case   11:*/		return 0x8221B59C;
		  /* 8221B59Ch */ case   12:  		/* lwzx R8, <#[R11 + R31]> */
		/* 8221B59Ch case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221B59Ch case   12:*/		return 0x8221B5A0;
		  /* 8221B5A0h */ case   13:  		/* cmpwi CR6, R8, -1 */
		/* 8221B5A0h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R8,0xFFFFFFFF);
		/* 8221B5A0h case   13:*/		return 0x8221B5A4;
		  /* 8221B5A4h */ case   14:  		/* bc 4, CR6_EQ, 120 */
		/* 8221B5A4h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8221B61C;  }
		/* 8221B5A4h case   14:*/		return 0x8221B5A8;
		  /* 8221B5A8h */ case   15:  		/* cmplwi CR6, R10, 0 */
		/* 8221B5A8h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8221B5A8h case   15:*/		return 0x8221B5AC;
		  /* 8221B5ACh */ case   16:  		/* bc 12, CR6_EQ, 112 */
		/* 8221B5ACh case   16:*/		if ( regs.CR[6].eq ) { return 0x8221B61C;  }
		/* 8221B5ACh case   16:*/		return 0x8221B5B0;
		  /* 8221B5B0h */ case   17:  		/* cmplwi CR6, R10, 1 */
		/* 8221B5B0h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8221B5B0h case   17:*/		return 0x8221B5B4;
		  /* 8221B5B4h */ case   18:  		/* bc 12, CR6_EQ, 104 */
		/* 8221B5B4h case   18:*/		if ( regs.CR[6].eq ) { return 0x8221B61C;  }
		/* 8221B5B4h case   18:*/		return 0x8221B5B8;
		  /* 8221B5B8h */ case   19:  		/* cmplwi CR6, R10, 2 */
		/* 8221B5B8h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000002);
		/* 8221B5B8h case   19:*/		return 0x8221B5BC;
		  /* 8221B5BCh */ case   20:  		/* bc 12, CR6_EQ, 96 */
		/* 8221B5BCh case   20:*/		if ( regs.CR[6].eq ) { return 0x8221B61C;  }
		/* 8221B5BCh case   20:*/		return 0x8221B5C0;
		  /* 8221B5C0h */ case   21:  		/* cmplwi CR6, R10, 6 */
		/* 8221B5C0h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000006);
		/* 8221B5C0h case   21:*/		return 0x8221B5C4;
		  /* 8221B5C4h */ case   22:  		/* bc 12, CR6_EQ, 28 */
		/* 8221B5C4h case   22:*/		if ( regs.CR[6].eq ) { return 0x8221B5E0;  }
		/* 8221B5C4h case   22:*/		return 0x8221B5C8;
		  /* 8221B5C8h */ case   23:  		/* cmplwi CR6, R10, 8 */
		/* 8221B5C8h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000008);
		/* 8221B5C8h case   23:*/		return 0x8221B5CC;
		  /* 8221B5CCh */ case   24:  		/* bc 12, CR6_EQ, 20 */
		/* 8221B5CCh case   24:*/		if ( regs.CR[6].eq ) { return 0x8221B5E0;  }
		/* 8221B5CCh case   24:*/		return 0x8221B5D0;
		  /* 8221B5D0h */ case   25:  		/* cmplwi CR6, R10, 9 */
		/* 8221B5D0h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000009);
		/* 8221B5D0h case   25:*/		return 0x8221B5D4;
		  /* 8221B5D4h */ case   26:  		/* bc 12, CR6_EQ, 12 */
		/* 8221B5D4h case   26:*/		if ( regs.CR[6].eq ) { return 0x8221B5E0;  }
		/* 8221B5D4h case   26:*/		return 0x8221B5D8;
		  /* 8221B5D8h */ case   27:  		/* cmplwi CR6, R10, 10 */
		/* 8221B5D8h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000000A);
		/* 8221B5D8h case   27:*/		return 0x8221B5DC;
		  /* 8221B5DCh */ case   28:  		/* bc 4, CR6_EQ, 60 */
		/* 8221B5DCh case   28:*/		if ( !regs.CR[6].eq ) { return 0x8221B618;  }
		/* 8221B5DCh case   28:*/		return 0x8221B5E0;
	}
	return 0x8221B5E0;
} // Block from 8221B56Ch-8221B5E0h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8221B5E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B5E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B5E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B5E0);
		  /* 8221B5E0h */ case    0:  		/* cmplwi CR6, R9, 1 */
		/* 8221B5E0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000001);
		/* 8221B5E0h case    0:*/		return 0x8221B5E4;
		  /* 8221B5E4h */ case    1:  		/* bc 4, CR6_GT, 28 */
		/* 8221B5E4h case    1:*/		if ( !regs.CR[6].gt ) { return 0x8221B600;  }
		/* 8221B5E4h case    1:*/		return 0x8221B5E8;
		  /* 8221B5E8h */ case    2:  		/* mr R6, R16 */
		/* 8221B5E8h case    2:*/		regs.R6 = regs.R16;
		/* 8221B5E8h case    2:*/		return 0x8221B5EC;
		  /* 8221B5ECh */ case    3:  		/* mr R5, R22 */
		/* 8221B5ECh case    3:*/		regs.R5 = regs.R22;
		/* 8221B5ECh case    3:*/		return 0x8221B5F0;
		  /* 8221B5F0h */ case    4:  		/* mr R4, R17 */
		/* 8221B5F0h case    4:*/		regs.R4 = regs.R17;
		/* 8221B5F0h case    4:*/		return 0x8221B5F4;
		  /* 8221B5F4h */ case    5:  		/* li R7, 15541 */
		/* 8221B5F4h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x3CB5);
		/* 8221B5F4h case    5:*/		return 0x8221B5F8;
		  /* 8221B5F8h */ case    6:  		/* li R3, 0 */
		/* 8221B5F8h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221B5F8h case    6:*/		return 0x8221B5FC;
		  /* 8221B5FCh */ case    7:  		/* bl -801268 */
		/* 8221B5FCh case    7:*/		regs.LR = 0x8221B600; return 0x82157C08;
		/* 8221B5FCh case    7:*/		return 0x8221B600;
	}
	return 0x8221B600;
} // Block from 8221B5E0h-8221B600h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8221B600h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B600);
		  /* 8221B600h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 8221B600h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8221B600h case    0:*/		return 0x8221B604;
		  /* 8221B604h */ case    1:  		/* rlwinm R10, R11, 22, 20, 25 */
		/* 8221B604h case    1:*/		cpu::op::rlwinm<0,22,20,25>(regs,&regs.R10,regs.R11);
		/* 8221B604h case    1:*/		return 0x8221B608;
		  /* 8221B608h */ case    2:  		/* rlwinm R11, R11, 0, 16, 31 */
		/* 8221B608h case    2:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R11);
		/* 8221B608h case    2:*/		return 0x8221B60C;
		  /* 8221B60Ch */ case    3:  		/* add R11, R10, R11 */
		/* 8221B60Ch case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8221B60Ch case    3:*/		return 0x8221B610;
		  /* 8221B610h */ case    4:  		/* addi R11, R11, 4200 */
		/* 8221B610h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1068);
		/* 8221B610h case    4:*/		return 0x8221B614;
		  /* 8221B614h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221B614h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221B614h case    5:*/		return 0x8221B618;
	}
	return 0x8221B618;
} // Block from 8221B600h-8221B618h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221B618h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B618);
		  /* 8221B618h */ case    0:  		/* stwx R18, <#[R11 + R31]> */
		/* 8221B618h case    0:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221B618h case    0:*/		return 0x8221B61C;
	}
	return 0x8221B61C;
} // Block from 8221B618h-8221B61Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221B61Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B61C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B61C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B61C);
		  /* 8221B61Ch */ case    0:  		/* lhz R11, <#[R29]> */
		/* 8221B61Ch case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8221B61Ch case    0:*/		return 0x8221B620;
		  /* 8221B620h */ case    1:  		/* rlwinm R11, R11, 0, 26, 31 */
		/* 8221B620h case    1:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R11,regs.R11);
		/* 8221B620h case    1:*/		return 0x8221B624;
		  /* 8221B624h */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 8221B624h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8221B624h case    2:*/		return 0x8221B628;
		  /* 8221B628h */ case    3:  		/* bc 4, CR6_EQ, 60 */
		/* 8221B628h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8221B664;  }
		/* 8221B628h case    3:*/		return 0x8221B62C;
		  /* 8221B62Ch */ case    4:  		/* lhz R11, <#[R26 + 2]> */
		/* 8221B62Ch case    4:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000002) );
		/* 8221B62Ch case    4:*/		return 0x8221B630;
		  /* 8221B630h */ case    5:  		/* cmplwi CR6, R11, 57 */
		/* 8221B630h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000039);
		/* 8221B630h case    5:*/		return 0x8221B634;
		  /* 8221B634h */ case    6:  		/* bc 12, CR6_EQ, 28 */
		/* 8221B634h case    6:*/		if ( regs.CR[6].eq ) { return 0x8221B650;  }
		/* 8221B634h case    6:*/		return 0x8221B638;
		  /* 8221B638h */ case    7:  		/* cmplwi CR6, R11, 63 */
		/* 8221B638h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000003F);
		/* 8221B638h case    7:*/		return 0x8221B63C;
		  /* 8221B63Ch */ case    8:  		/* bc 12, CR6_EQ, 20 */
		/* 8221B63Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x8221B650;  }
		/* 8221B63Ch case    8:*/		return 0x8221B640;
		  /* 8221B640h */ case    9:  		/* cmplwi CR6, R11, 87 */
		/* 8221B640h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 8221B640h case    9:*/		return 0x8221B644;
		  /* 8221B644h */ case   10:  		/* bc 12, CR6_EQ, 12 */
		/* 8221B644h case   10:*/		if ( regs.CR[6].eq ) { return 0x8221B650;  }
		/* 8221B644h case   10:*/		return 0x8221B648;
		  /* 8221B648h */ case   11:  		/* cmplwi CR6, R11, 89 */
		/* 8221B648h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 8221B648h case   11:*/		return 0x8221B64C;
		  /* 8221B64Ch */ case   12:  		/* bc 4, CR6_EQ, 24 */
		/* 8221B64Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x8221B664;  }
		/* 8221B64Ch case   12:*/		return 0x8221B650;
	}
	return 0x8221B650;
} // Block from 8221B61Ch-8221B650h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8221B650h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B650( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B650) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B650);
		  /* 8221B650h */ case    0:  		/* addi R11, R27, 3292 */
		/* 8221B650h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xCDC);
		/* 8221B650h case    0:*/		return 0x8221B654;
		  /* 8221B654h */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221B654h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221B654h case    1:*/		return 0x8221B658;
		  /* 8221B658h */ case    2:  		/* lwzx R10, <#[R11 + R31]> */
		/* 8221B658h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221B658h case    2:*/		return 0x8221B65C;
		  /* 8221B65Ch */ case    3:  		/* ori R10, R10, 2 */
		/* 8221B65Ch case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x2);
		/* 8221B65Ch case    3:*/		return 0x8221B660;
		  /* 8221B660h */ case    4:  		/* stwx R10, <#[R11 + R31]> */
		/* 8221B660h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221B660h case    4:*/		return 0x8221B664;
	}
	return 0x8221B664;
} // Block from 8221B650h-8221B664h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221B664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B664);
		  /* 8221B664h */ case    0:  		/* lbz R11, <#[R19 + 1]> */
		/* 8221B664h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000001) );
		/* 8221B664h case    0:*/		return 0x8221B668;
		  /* 8221B668h */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 8221B668h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221B668h case    1:*/		return 0x8221B66C;
		  /* 8221B66Ch */ case    2:  		/* lhz R11, <#[R29]> */
		/* 8221B66Ch case    2:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8221B66Ch case    2:*/		return 0x8221B670;
		  /* 8221B670h */ case    3:  		/* rlwinm R11, R11, 0, 26, 31 */
		/* 8221B670h case    3:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R11,regs.R11);
		/* 8221B670h case    3:*/		return 0x8221B674;
		  /* 8221B674h */ case    4:  		/* bc 4, CR0_EQ, 60 */
		/* 8221B674h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8221B6B0;  }
		/* 8221B674h case    4:*/		return 0x8221B678;
		  /* 8221B678h */ case    5:  		/* cmplwi CR6, R11, 14 */
		/* 8221B678h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000E);
		/* 8221B678h case    5:*/		return 0x8221B67C;
		  /* 8221B67Ch */ case    6:  		/* bc 12, CR6_EQ, 68 */
		/* 8221B67Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x8221B6C0;  }
		/* 8221B67Ch case    6:*/		return 0x8221B680;
		  /* 8221B680h */ case    7:  		/* cmplwi CR6, R11, 15 */
		/* 8221B680h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000F);
		/* 8221B680h case    7:*/		return 0x8221B684;
		  /* 8221B684h */ case    8:  		/* bc 12, CR6_EQ, 60 */
		/* 8221B684h case    8:*/		if ( regs.CR[6].eq ) { return 0x8221B6C0;  }
		/* 8221B684h case    8:*/		return 0x8221B688;
		  /* 8221B688h */ case    9:  		/* cmplwi CR6, R11, 17 */
		/* 8221B688h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000011);
		/* 8221B688h case    9:*/		return 0x8221B68C;
		  /* 8221B68Ch */ case   10:  		/* bc 12, CR6_EQ, 52 */
		/* 8221B68Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x8221B6C0;  }
		/* 8221B68Ch case   10:*/		return 0x8221B690;
		  /* 8221B690h */ case   11:  		/* cmplwi CR6, R11, 18 */
		/* 8221B690h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000012);
		/* 8221B690h case   11:*/		return 0x8221B694;
		  /* 8221B694h */ case   12:  		/* bc 12, CR6_EQ, 44 */
		/* 8221B694h case   12:*/		if ( regs.CR[6].eq ) { return 0x8221B6C0;  }
		/* 8221B694h case   12:*/		return 0x8221B698;
		  /* 8221B698h */ case   13:  		/* cmplwi CR6, R11, 19 */
		/* 8221B698h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000013);
		/* 8221B698h case   13:*/		return 0x8221B69C;
		  /* 8221B69Ch */ case   14:  		/* bc 12, CR6_EQ, 36 */
		/* 8221B69Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x8221B6C0;  }
		/* 8221B69Ch case   14:*/		return 0x8221B6A0;
		  /* 8221B6A0h */ case   15:  		/* cmplwi CR6, R11, 16 */
		/* 8221B6A0h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000010);
		/* 8221B6A0h case   15:*/		return 0x8221B6A4;
		  /* 8221B6A4h */ case   16:  		/* bc 12, CR6_EQ, 28 */
		/* 8221B6A4h case   16:*/		if ( regs.CR[6].eq ) { return 0x8221B6C0;  }
		/* 8221B6A4h case   16:*/		return 0x8221B6A8;
		  /* 8221B6A8h */ case   17:  		/* cmplwi CR6, R11, 20 */
		/* 8221B6A8h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000014);
		/* 8221B6A8h case   17:*/		return 0x8221B6AC;
		  /* 8221B6ACh */ case   18:  		/* b 16 */
		/* 8221B6ACh case   18:*/		return 0x8221B6BC;
		/* 8221B6ACh case   18:*/		return 0x8221B6B0;
	}
	return 0x8221B6B0;
} // Block from 8221B664h-8221B6B0h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8221B6B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B6B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B6B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B6B0);
		  /* 8221B6B0h */ case    0:  		/* cmplwi CR6, R11, 23 */
		/* 8221B6B0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000017);
		/* 8221B6B0h case    0:*/		return 0x8221B6B4;
		  /* 8221B6B4h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8221B6B4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8221B6C0;  }
		/* 8221B6B4h case    1:*/		return 0x8221B6B8;
		  /* 8221B6B8h */ case    2:  		/* cmplwi CR6, R11, 24 */
		/* 8221B6B8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000018);
		/* 8221B6B8h case    2:*/		return 0x8221B6BC;
	}
	return 0x8221B6BC;
} // Block from 8221B6B0h-8221B6BCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221B6BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B6BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B6BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B6BC);
		  /* 8221B6BCh */ case    0:  		/* bc 4, CR6_EQ, 28 */
		/* 8221B6BCh case    0:*/		if ( !regs.CR[6].eq ) { return 0x8221B6D8;  }
		/* 8221B6BCh case    0:*/		return 0x8221B6C0;
	}
	return 0x8221B6C0;
} // Block from 8221B6BCh-8221B6C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221B6C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B6C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B6C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B6C0);
		  /* 8221B6C0h */ case    0:  		/* addi R11, R27, 3292 */
		/* 8221B6C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xCDC);
		/* 8221B6C0h case    0:*/		return 0x8221B6C4;
		  /* 8221B6C4h */ case    1:  		/* slw R10, R23, R28 */
		/* 8221B6C4h case    1:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R23,regs.R28);
		/* 8221B6C4h case    1:*/		return 0x8221B6C8;
		  /* 8221B6C8h */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221B6C8h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221B6C8h case    2:*/		return 0x8221B6CC;
		  /* 8221B6CCh */ case    3:  		/* lwzx R9, <#[R11 + R31]> */
		/* 8221B6CCh case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221B6CCh case    3:*/		return 0x8221B6D0;
		  /* 8221B6D0h */ case    4:  		/* or R10, R10, R9 */
		/* 8221B6D0h case    4:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8221B6D0h case    4:*/		return 0x8221B6D4;
		  /* 8221B6D4h */ case    5:  		/* stwx R10, <#[R11 + R31]> */
		/* 8221B6D4h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221B6D4h case    5:*/		return 0x8221B6D8;
	}
	return 0x8221B6D8;
} // Block from 8221B6C0h-8221B6D8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221B6D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B6D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B6D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B6D8);
		  /* 8221B6D8h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 8221B6D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8221B6D8h case    0:*/		return 0x8221B6DC;
		  /* 8221B6DCh */ case    1:  		/* rlwinm. R11, R11, 0, 9, 9 */
		/* 8221B6DCh case    1:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R11);
		/* 8221B6DCh case    1:*/		return 0x8221B6E0;
		  /* 8221B6E0h */ case    2:  		/* bc 12, CR0_EQ, 324 */
		/* 8221B6E0h case    2:*/		if ( regs.CR[0].eq ) { return 0x8221B824;  }
		/* 8221B6E0h case    2:*/		return 0x8221B6E4;
		  /* 8221B6E4h */ case    3:  		/* lwz R11, <#[R30]> */
		/* 8221B6E4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8221B6E4h case    3:*/		return 0x8221B6E8;
		  /* 8221B6E8h */ case    4:  		/* rlwinm R9, R11, 0, 29, 31 */
		/* 8221B6E8h case    4:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R9,regs.R11);
		/* 8221B6E8h case    4:*/		return 0x8221B6EC;
		  /* 8221B6ECh */ case    5:  		/* cmplwi CR6, R9, 4 */
		/* 8221B6ECh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000004);
		/* 8221B6ECh case    5:*/		return 0x8221B6F0;
		  /* 8221B6F0h */ case    6:  		/* bc 12, CR6_EQ, 72 */
		/* 8221B6F0h case    6:*/		if ( regs.CR[6].eq ) { return 0x8221B738;  }
		/* 8221B6F0h case    6:*/		return 0x8221B6F4;
		  /* 8221B6F4h */ case    7:  		/* rlwinm R8, R11, 28, 29, 31 */
		/* 8221B6F4h case    7:*/		cpu::op::rlwinm<0,28,29,31>(regs,&regs.R8,regs.R11);
		/* 8221B6F4h case    7:*/		return 0x8221B6F8;
		  /* 8221B6F8h */ case    8:  		/* cmplwi CR6, R8, 4 */
		/* 8221B6F8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000004);
		/* 8221B6F8h case    8:*/		return 0x8221B6FC;
		  /* 8221B6FCh */ case    9:  		/* bc 12, CR6_EQ, 60 */
		/* 8221B6FCh case    9:*/		if ( regs.CR[6].eq ) { return 0x8221B738;  }
		/* 8221B6FCh case    9:*/		return 0x8221B700;
		  /* 8221B700h */ case   10:  		/* rlwinm R10, R11, 24, 29, 31 */
		/* 8221B700h case   10:*/		cpu::op::rlwinm<0,24,29,31>(regs,&regs.R10,regs.R11);
		/* 8221B700h case   10:*/		return 0x8221B704;
		  /* 8221B704h */ case   11:  		/* cmplwi CR6, R10, 4 */
		/* 8221B704h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 8221B704h case   11:*/		return 0x8221B708;
		  /* 8221B708h */ case   12:  		/* bc 12, CR6_EQ, 48 */
		/* 8221B708h case   12:*/		if ( regs.CR[6].eq ) { return 0x8221B738;  }
		/* 8221B708h case   12:*/		return 0x8221B70C;
		  /* 8221B70Ch */ case   13:  		/* rlwinm R11, R11, 20, 29, 31 */
		/* 8221B70Ch case   13:*/		cpu::op::rlwinm<0,20,29,31>(regs,&regs.R11,regs.R11);
		/* 8221B70Ch case   13:*/		return 0x8221B710;
		  /* 8221B710h */ case   14:  		/* cmplwi CR6, R11, 4 */
		/* 8221B710h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 8221B710h case   14:*/		return 0x8221B714;
		  /* 8221B714h */ case   15:  		/* bc 12, CR6_EQ, 36 */
		/* 8221B714h case   15:*/		if ( regs.CR[6].eq ) { return 0x8221B738;  }
		/* 8221B714h case   15:*/		return 0x8221B718;
		  /* 8221B718h */ case   16:  		/* cmplwi CR6, R9, 5 */
		/* 8221B718h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000005);
		/* 8221B718h case   16:*/		return 0x8221B71C;
		  /* 8221B71Ch */ case   17:  		/* bc 12, CR6_EQ, 28 */
		/* 8221B71Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x8221B738;  }
		/* 8221B71Ch case   17:*/		return 0x8221B720;
		  /* 8221B720h */ case   18:  		/* cmplwi CR6, R8, 5 */
		/* 8221B720h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000005);
		/* 8221B720h case   18:*/		return 0x8221B724;
		  /* 8221B724h */ case   19:  		/* bc 12, CR6_EQ, 20 */
		/* 8221B724h case   19:*/		if ( regs.CR[6].eq ) { return 0x8221B738;  }
		/* 8221B724h case   19:*/		return 0x8221B728;
		  /* 8221B728h */ case   20:  		/* cmplwi CR6, R10, 5 */
		/* 8221B728h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000005);
		/* 8221B728h case   20:*/		return 0x8221B72C;
		  /* 8221B72Ch */ case   21:  		/* bc 12, CR6_EQ, 12 */
		/* 8221B72Ch case   21:*/		if ( regs.CR[6].eq ) { return 0x8221B738;  }
		/* 8221B72Ch case   21:*/		return 0x8221B730;
		  /* 8221B730h */ case   22:  		/* cmplwi CR6, R11, 5 */
		/* 8221B730h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 8221B730h case   22:*/		return 0x8221B734;
		  /* 8221B734h */ case   23:  		/* bc 4, CR6_EQ, 24 */
		/* 8221B734h case   23:*/		if ( !regs.CR[6].eq ) { return 0x8221B74C;  }
		/* 8221B734h case   23:*/		return 0x8221B738;
	}
	return 0x8221B738;
} // Block from 8221B6D8h-8221B738h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8221B738h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B738( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B738) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B738);
		  /* 8221B738h */ case    0:  		/* addi R11, R27, 3292 */
		/* 8221B738h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xCDC);
		/* 8221B738h case    0:*/		return 0x8221B73C;
		  /* 8221B73Ch */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221B73Ch case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221B73Ch case    1:*/		return 0x8221B740;
		  /* 8221B740h */ case    2:  		/* lwzx R10, <#[R11 + R31]> */
		/* 8221B740h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221B740h case    2:*/		return 0x8221B744;
		  /* 8221B744h */ case    3:  		/* ori R10, R10, 1 */
		/* 8221B744h case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8221B744h case    3:*/		return 0x8221B748;
		  /* 8221B748h */ case    4:  		/* stwx R10, <#[R11 + R31]> */
		/* 8221B748h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221B748h case    4:*/		return 0x8221B74C;
	}
	return 0x8221B74C;
} // Block from 8221B738h-8221B74Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221B74Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B74C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B74C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B74C);
		  /* 8221B74Ch */ case    0:  		/* lwz R11, <#[R30]> */
		/* 8221B74Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8221B74Ch case    0:*/		return 0x8221B750;
		  /* 8221B750h */ case    1:  		/* rlwinm R10, R11, 29, 31, 31 */
		/* 8221B750h case    1:*/		cpu::op::rlwinm<0,29,31,31>(regs,&regs.R10,regs.R11);
		/* 8221B750h case    1:*/		return 0x8221B754;
		  /* 8221B754h */ case    2:  		/* rlwinm R9, R11, 25, 31, 31 */
		/* 8221B754h case    2:*/		cpu::op::rlwinm<0,25,31,31>(regs,&regs.R9,regs.R11);
		/* 8221B754h case    2:*/		return 0x8221B758;
		  /* 8221B758h */ case    3:  		/* cmplw CR6, R10, R9 */
		/* 8221B758h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8221B758h case    3:*/		return 0x8221B75C;
		  /* 8221B75Ch */ case    4:  		/* bc 4, CR6_EQ, 28 */
		/* 8221B75Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x8221B778;  }
		/* 8221B75Ch case    4:*/		return 0x8221B760;
		  /* 8221B760h */ case    5:  		/* rlwinm R9, R11, 21, 31, 31 */
		/* 8221B760h case    5:*/		cpu::op::rlwinm<0,21,31,31>(regs,&regs.R9,regs.R11);
		/* 8221B760h case    5:*/		return 0x8221B764;
		  /* 8221B764h */ case    6:  		/* cmplw CR6, R10, R9 */
		/* 8221B764h case    6:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8221B764h case    6:*/		return 0x8221B768;
		  /* 8221B768h */ case    7:  		/* bc 4, CR6_EQ, 16 */
		/* 8221B768h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8221B778;  }
		/* 8221B768h case    7:*/		return 0x8221B76C;
		  /* 8221B76Ch */ case    8:  		/* rlwinm R11, R11, 17, 31, 31 */
		/* 8221B76Ch case    8:*/		cpu::op::rlwinm<0,17,31,31>(regs,&regs.R11,regs.R11);
		/* 8221B76Ch case    8:*/		return 0x8221B770;
		  /* 8221B770h */ case    9:  		/* cmplw CR6, R10, R11 */
		/* 8221B770h case    9:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8221B770h case    9:*/		return 0x8221B774;
		  /* 8221B774h */ case   10:  		/* bc 12, CR6_EQ, 24 */
		/* 8221B774h case   10:*/		if ( regs.CR[6].eq ) { return 0x8221B78C;  }
		/* 8221B774h case   10:*/		return 0x8221B778;
	}
	return 0x8221B778;
} // Block from 8221B74Ch-8221B778h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8221B778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B778);
		  /* 8221B778h */ case    0:  		/* addi R11, R27, 3292 */
		/* 8221B778h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xCDC);
		/* 8221B778h case    0:*/		return 0x8221B77C;
		  /* 8221B77Ch */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221B77Ch case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221B77Ch case    1:*/		return 0x8221B780;
		  /* 8221B780h */ case    2:  		/* lwzx R10, <#[R11 + R31]> */
		/* 8221B780h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221B780h case    2:*/		return 0x8221B784;
		  /* 8221B784h */ case    3:  		/* ori R10, R10, 1 */
		/* 8221B784h case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8221B784h case    3:*/		return 0x8221B788;
		  /* 8221B788h */ case    4:  		/* stwx R10, <#[R11 + R31]> */
		/* 8221B788h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221B788h case    4:*/		return 0x8221B78C;
	}
	return 0x8221B78C;
} // Block from 8221B778h-8221B78Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221B78Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B78C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B78C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B78C);
		  /* 8221B78Ch */ case    0:  		/* lhz R11, <#[R29]> */
		/* 8221B78Ch case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8221B78Ch case    0:*/		return 0x8221B790;
		  /* 8221B790h */ case    1:  		/* rlwinm R11, R11, 0, 26, 31 */
		/* 8221B790h case    1:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R11,regs.R11);
		/* 8221B790h case    1:*/		return 0x8221B794;
		  /* 8221B794h */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 8221B794h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8221B794h case    2:*/		return 0x8221B798;
		  /* 8221B798h */ case    3:  		/* bc 4, CR6_EQ, 44 */
		/* 8221B798h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8221B7C4;  }
		/* 8221B798h case    3:*/		return 0x8221B79C;
		  /* 8221B79Ch */ case    4:  		/* lwz R11, <#[R30]> */
		/* 8221B79Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8221B79Ch case    4:*/		return 0x8221B7A0;
		  /* 8221B7A0h */ case    5:  		/* lis R10, 16 */
		/* 8221B7A0h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0x10);
		/* 8221B7A0h case    5:*/		return 0x8221B7A4;
		  /* 8221B7A4h */ case    6:  		/* rlwinm R11, R11, 0, 11, 11 */
		/* 8221B7A4h case    6:*/		cpu::op::rlwinm<0,0,11,11>(regs,&regs.R11,regs.R11);
		/* 8221B7A4h case    6:*/		return 0x8221B7A8;
		  /* 8221B7A8h */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 8221B7A8h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8221B7A8h case    7:*/		return 0x8221B7AC;
		  /* 8221B7ACh */ case    8:  		/* bc 4, CR6_EQ, 24 */
		/* 8221B7ACh case    8:*/		if ( !regs.CR[6].eq ) { return 0x8221B7C4;  }
		/* 8221B7ACh case    8:*/		return 0x8221B7B0;
		  /* 8221B7B0h */ case    9:  		/* addi R11, R27, 3292 */
		/* 8221B7B0h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xCDC);
		/* 8221B7B0h case    9:*/		return 0x8221B7B4;
		  /* 8221B7B4h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221B7B4h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221B7B4h case   10:*/		return 0x8221B7B8;
		  /* 8221B7B8h */ case   11:  		/* lwzx R10, <#[R11 + R31]> */
		/* 8221B7B8h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221B7B8h case   11:*/		return 0x8221B7BC;
		  /* 8221B7BCh */ case   12:  		/* ori R10, R10, 1 */
		/* 8221B7BCh case   12:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8221B7BCh case   12:*/		return 0x8221B7C0;
		  /* 8221B7C0h */ case   13:  		/* stwx R10, <#[R11 + R31]> */
		/* 8221B7C0h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221B7C0h case   13:*/		return 0x8221B7C4;
	}
	return 0x8221B7C4;
} // Block from 8221B78Ch-8221B7C4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8221B7C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B7C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B7C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B7C4);
		  /* 8221B7C4h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 8221B7C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8221B7C4h case    0:*/		return 0x8221B7C8;
		  /* 8221B7C8h */ case    1:  		/* lis R10, 2 */
		/* 8221B7C8h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x2);
		/* 8221B7C8h case    1:*/		return 0x8221B7CC;
		  /* 8221B7CCh */ case    2:  		/* rlwinm R9, R11, 0, 14, 14 */
		/* 8221B7CCh case    2:*/		cpu::op::rlwinm<0,0,14,14>(regs,&regs.R9,regs.R11);
		/* 8221B7CCh case    2:*/		return 0x8221B7D0;
		  /* 8221B7D0h */ case    3:  		/* cmplw CR6, R9, R10 */
		/* 8221B7D0h case    3:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 8221B7D0h case    3:*/		return 0x8221B7D4;
		  /* 8221B7D4h */ case    4:  		/* bc 12, CR6_EQ, 56 */
		/* 8221B7D4h case    4:*/		if ( regs.CR[6].eq ) { return 0x8221B80C;  }
		/* 8221B7D4h case    4:*/		return 0x8221B7D8;
		  /* 8221B7D8h */ case    5:  		/* rlwinm R10, R11, 0, 15, 15 */
		/* 8221B7D8h case    5:*/		cpu::op::rlwinm<0,0,15,15>(regs,&regs.R10,regs.R11);
		/* 8221B7D8h case    5:*/		return 0x8221B7DC;
		  /* 8221B7DCh */ case    6:  		/* cmplw CR6, R10, R21 */
		/* 8221B7DCh case    6:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R21);
		/* 8221B7DCh case    6:*/		return 0x8221B7E0;
		  /* 8221B7E0h */ case    7:  		/* bc 12, CR6_EQ, 44 */
		/* 8221B7E0h case    7:*/		if ( regs.CR[6].eq ) { return 0x8221B80C;  }
		/* 8221B7E0h case    7:*/		return 0x8221B7E4;
		  /* 8221B7E4h */ case    8:  		/* rlwinm R10, R11, 0, 13, 13 */
		/* 8221B7E4h case    8:*/		cpu::op::rlwinm<0,0,13,13>(regs,&regs.R10,regs.R11);
		/* 8221B7E4h case    8:*/		return 0x8221B7E8;
		  /* 8221B7E8h */ case    9:  		/* lis R9, 4 */
		/* 8221B7E8h case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0x4);
		/* 8221B7E8h case    9:*/		return 0x8221B7EC;
		  /* 8221B7ECh */ case   10:  		/* cmplw CR6, R10, R9 */
		/* 8221B7ECh case   10:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8221B7ECh case   10:*/		return 0x8221B7F0;
		  /* 8221B7F0h */ case   11:  		/* bc 12, CR6_EQ, 28 */
		/* 8221B7F0h case   11:*/		if ( regs.CR[6].eq ) { return 0x8221B80C;  }
		/* 8221B7F0h case   11:*/		return 0x8221B7F4;
		  /* 8221B7F4h */ case   12:  		/* rlwinm R10, R11, 0, 12, 12 */
		/* 8221B7F4h case   12:*/		cpu::op::rlwinm<0,0,12,12>(regs,&regs.R10,regs.R11);
		/* 8221B7F4h case   12:*/		return 0x8221B7F8;
		  /* 8221B7F8h */ case   13:  		/* lis R9, 8 */
		/* 8221B7F8h case   13:*/		cpu::op::lis<0>(regs,&regs.R9,0x8);
		/* 8221B7F8h case   13:*/		return 0x8221B7FC;
		  /* 8221B7FCh */ case   14:  		/* cmplw CR6, R10, R9 */
		/* 8221B7FCh case   14:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8221B7FCh case   14:*/		return 0x8221B800;
		  /* 8221B800h */ case   15:  		/* bc 12, CR6_EQ, 12 */
		/* 8221B800h case   15:*/		if ( regs.CR[6].eq ) { return 0x8221B80C;  }
		/* 8221B800h case   15:*/		return 0x8221B804;
		  /* 8221B804h */ case   16:  		/* rlwinm. R11, R11, 0, 8, 10 */
		/* 8221B804h case   16:*/		cpu::op::rlwinm<1,0,8,10>(regs,&regs.R11,regs.R11);
		/* 8221B804h case   16:*/		return 0x8221B808;
		  /* 8221B808h */ case   17:  		/* bc 12, CR0_EQ, 24 */
		/* 8221B808h case   17:*/		if ( regs.CR[0].eq ) { return 0x8221B820;  }
		/* 8221B808h case   17:*/		return 0x8221B80C;
	}
	return 0x8221B80C;
} // Block from 8221B7C4h-8221B80Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 8221B80Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B80C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B80C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B80C);
		  /* 8221B80Ch */ case    0:  		/* addi R11, R27, 3292 */
		/* 8221B80Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xCDC);
		/* 8221B80Ch case    0:*/		return 0x8221B810;
		  /* 8221B810h */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221B810h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221B810h case    1:*/		return 0x8221B814;
		  /* 8221B814h */ case    2:  		/* lwzx R10, <#[R11 + R31]> */
		/* 8221B814h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221B814h case    2:*/		return 0x8221B818;
		  /* 8221B818h */ case    3:  		/* ori R10, R10, 1 */
		/* 8221B818h case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8221B818h case    3:*/		return 0x8221B81C;
		  /* 8221B81Ch */ case    4:  		/* stwx R10, <#[R11 + R31]> */
		/* 8221B81Ch case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221B81Ch case    4:*/		return 0x8221B820;
	}
	return 0x8221B820;
} // Block from 8221B80Ch-8221B820h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221B820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B820);
		  /* 8221B820h */ case    0:  		/* addi R30, R30, 4 */
		/* 8221B820h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8221B820h case    0:*/		return 0x8221B824;
	}
	return 0x8221B824;
} // Block from 8221B820h-8221B824h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221B824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B824);
		  /* 8221B824h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 8221B824h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8221B824h case    0:*/		return 0x8221B828;
		  /* 8221B828h */ case    1:  		/* rlwinm. R10, R11, 0, 8, 8 */
		/* 8221B828h case    1:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R11);
		/* 8221B828h case    1:*/		return 0x8221B82C;
		  /* 8221B82Ch */ case    2:  		/* bc 12, CR0_EQ, 56 */
		/* 8221B82Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x8221B864;  }
		/* 8221B82Ch case    2:*/		return 0x8221B830;
		  /* 8221B830h */ case    3:  		/* rlwinm R10, R11, 0, 10, 15 */
		/* 8221B830h case    3:*/		cpu::op::rlwinm<0,0,10,15>(regs,&regs.R10,regs.R11);
		/* 8221B830h case    3:*/		return 0x8221B834;
		  /* 8221B834h */ case    4:  		/* mr R11, R30 */
		/* 8221B834h case    4:*/		regs.R11 = regs.R30;
		/* 8221B834h case    4:*/		return 0x8221B838;
		  /* 8221B838h */ case    5:  		/* addi R30, R30, 4 */
		/* 8221B838h case    5:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8221B838h case    5:*/		return 0x8221B83C;
		  /* 8221B83Ch */ case    6:  		/* cmplw CR6, R10, R21 */
		/* 8221B83Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R21);
		/* 8221B83Ch case    6:*/		return 0x8221B840;
		  /* 8221B840h */ case    7:  		/* bc 4, CR6_EQ, 36 */
		/* 8221B840h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8221B864;  }
		/* 8221B840h case    7:*/		return 0x8221B844;
		  /* 8221B844h */ case    8:  		/* lhz R11, <#[R11]> */
		/* 8221B844h case    8:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8221B844h case    8:*/		return 0x8221B848;
		  /* 8221B848h */ case    9:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8221B848h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8221B848h case    9:*/		return 0x8221B84C;
		  /* 8221B84Ch */ case   10:  		/* bc 4, CR0_EQ, 24 */
		/* 8221B84Ch case   10:*/		if ( !regs.CR[0].eq ) { return 0x8221B864;  }
		/* 8221B84Ch case   10:*/		return 0x8221B850;
		  /* 8221B850h */ case   11:  		/* addi R11, R27, 3292 */
		/* 8221B850h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xCDC);
		/* 8221B850h case   11:*/		return 0x8221B854;
		  /* 8221B854h */ case   12:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221B854h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221B854h case   12:*/		return 0x8221B858;
		  /* 8221B858h */ case   13:  		/* lwzx R10, <#[R11 + R31]> */
		/* 8221B858h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221B858h case   13:*/		return 0x8221B85C;
		  /* 8221B85Ch */ case   14:  		/* ori R10, R10, 8 */
		/* 8221B85Ch case   14:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x8);
		/* 8221B85Ch case   14:*/		return 0x8221B860;
		  /* 8221B860h */ case   15:  		/* stwx R10, <#[R11 + R31]> */
		/* 8221B860h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221B860h case   15:*/		return 0x8221B864;
	}
	return 0x8221B864;
} // Block from 8221B824h-8221B864h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8221B864h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B864( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B864) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B864);
		  /* 8221B864h */ case    0:  		/* addi R28, R28, 1 */
		/* 8221B864h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8221B864h case    0:*/		return 0x8221B868;
		  /* 8221B868h */ case    1:  		/* cmplw CR6, R28, R25 */
		/* 8221B868h case    1:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R25);
		/* 8221B868h case    1:*/		return 0x8221B86C;
		  /* 8221B86Ch */ case    2:  		/* bc 12, CR6_LT, -756 */
		/* 8221B86Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x8221B578;  }
		/* 8221B86Ch case    2:*/		return 0x8221B870;
	}
	return 0x8221B870;
} // Block from 8221B864h-8221B870h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221B870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B870);
		  /* 8221B870h */ case    0:  		/* lhz R11, <#[R26 + 2]> */
		/* 8221B870h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000002) );
		/* 8221B870h case    0:*/		return 0x8221B874;
		  /* 8221B874h */ case    1:  		/* cmplwi CR6, R11, 28 */
		/* 8221B874h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001C);
		/* 8221B874h case    1:*/		return 0x8221B878;
		  /* 8221B878h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 8221B878h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8221B884;  }
		/* 8221B878h case    2:*/		return 0x8221B87C;
		  /* 8221B87Ch */ case    3:  		/* addi R30, R30, 16 */
		/* 8221B87Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x10);
		/* 8221B87Ch case    3:*/		return 0x8221B880;
		  /* 8221B880h */ case    4:  		/* b 16 */
		/* 8221B880h case    4:*/		return 0x8221B890;
		/* 8221B880h case    4:*/		return 0x8221B884;
	}
	return 0x8221B884;
} // Block from 8221B870h-8221B884h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221B884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B884);
		  /* 8221B884h */ case    0:  		/* cmplwi CR6, R11, 29 */
		/* 8221B884h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001D);
		/* 8221B884h case    0:*/		return 0x8221B888;
		  /* 8221B888h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 8221B888h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8221B890;  }
		/* 8221B888h case    1:*/		return 0x8221B88C;
		  /* 8221B88Ch */ case    2:  		/* addi R30, R30, 4 */
		/* 8221B88Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8221B88Ch case    2:*/		return 0x8221B890;
	}
	return 0x8221B890;
} // Block from 8221B884h-8221B890h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221B890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B890);
		  /* 8221B890h */ case    0:  		/* cmplwi CR6, R11, 8 */
		/* 8221B890h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000008);
		/* 8221B890h case    0:*/		return 0x8221B894;
		  /* 8221B894h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 8221B894h case    1:*/		if ( regs.CR[6].eq ) { return 0x8221B8A8;  }
		/* 8221B894h case    1:*/		return 0x8221B898;
		  /* 8221B898h */ case    2:  		/* cmplwi CR6, R11, 9 */
		/* 8221B898h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000009);
		/* 8221B898h case    2:*/		return 0x8221B89C;
		  /* 8221B89Ch */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 8221B89Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8221B8A8;  }
		/* 8221B89Ch case    3:*/		return 0x8221B8A0;
		  /* 8221B8A0h */ case    4:  		/* cmplwi CR6, R11, 50 */
		/* 8221B8A0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000032);
		/* 8221B8A0h case    4:*/		return 0x8221B8A4;
		  /* 8221B8A4h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 8221B8A4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8221B8AC;  }
		/* 8221B8A4h case    5:*/		return 0x8221B8A8;
	}
	return 0x8221B8A8;
} // Block from 8221B890h-8221B8A8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221B8A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B8A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B8A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B8A8);
		  /* 8221B8A8h */ case    0:  		/* addi R30, R30, 4 */
		/* 8221B8A8h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8221B8A8h case    0:*/		return 0x8221B8AC;
	}
	return 0x8221B8AC;
} // Block from 8221B8A8h-8221B8ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221B8ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B8AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B8AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B8AC);
		  /* 8221B8ACh */ case    0:  		/* addi R27, R27, 1 */
		/* 8221B8ACh case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 8221B8ACh case    0:*/		return 0x8221B8B0;
		  /* 8221B8B0h */ case    1:  		/* b 8 */
		/* 8221B8B0h case    1:*/		return 0x8221B8B8;
		/* 8221B8B0h case    1:*/		return 0x8221B8B4;
	}
	return 0x8221B8B4;
} // Block from 8221B8ACh-8221B8B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221B8B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B8B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B8B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B8B4);
		  /* 8221B8B4h */ case    0:  		/* mr R20, R15 */
		/* 8221B8B4h case    0:*/		regs.R20 = regs.R15;
		/* 8221B8B4h case    0:*/		return 0x8221B8B8;
	}
	return 0x8221B8B8;
} // Block from 8221B8B4h-8221B8B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221B8B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B8B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B8B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B8B8);
		  /* 8221B8B8h */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 8221B8B8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 8221B8B8h case    0:*/		return 0x8221B8BC;
		  /* 8221B8BCh */ case    1:  		/* bc 12, CR6_EQ, -1168 */
		/* 8221B8BCh case    1:*/		if ( regs.CR[6].eq ) { return 0x8221B42C;  }
		/* 8221B8BCh case    1:*/		return 0x8221B8C0;
		  /* 8221B8C0h */ case    2:  		/* lbz R11, <#[R19 + 1]> */
		/* 8221B8C0h case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000001) );
		/* 8221B8C0h case    2:*/		return 0x8221B8C4;
		  /* 8221B8C4h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 8221B8C4h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221B8C4h case    3:*/		return 0x8221B8C8;
		  /* 8221B8C8h */ case    4:  		/* bc 4, CR0_EQ, 680 */
		/* 8221B8C8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8221BB70;  }
		/* 8221B8C8h case    4:*/		return 0x8221B8CC;
		  /* 8221B8CCh */ case    5:  		/* li R10, 16 */
		/* 8221B8CCh case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x10);
		/* 8221B8CCh case    5:*/		return 0x8221B8D0;
		  /* 8221B8D0h */ case    6:  		/* li R9, 3 */
		/* 8221B8D0h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 8221B8D0h case    6:*/		return 0x8221B8D4;
		  /* 8221B8D4h */ case    7:  		/* addi R11, R31, 18080 */
		/* 8221B8D4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x46A0);
		/* 8221B8D4h case    7:*/		return 0x8221B8D8;
		  /* 8221B8D8h */ case    8:  		/* stw R9, <#[R31 + 23200]> */
		/* 8221B8D8h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221B8D8h case    8:*/		return 0x8221B8DC;
		  /* 8221B8DCh */ case    9:  		/* mtspr CTR, R10 */
		/* 8221B8DCh case    9:*/		regs.CTR = regs.R10;
		/* 8221B8DCh case    9:*/		return 0x8221B8E0;
		  /* 8221B8E0h */ case   10:  		/* lwz R10, <#[R11]> */
		/* 8221B8E0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221B8E0h case   10:*/		return 0x8221B8E4;
		  /* 8221B8E4h */ case   11:  		/* cmpwi CR6, R10, -1 */
		/* 8221B8E4h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8221B8E4h case   11:*/		return 0x8221B8E8;
		  /* 8221B8E8h */ case   12:  		/* bc 12, CR6_EQ, 24 */
		/* 8221B8E8h case   12:*/		if ( regs.CR[6].eq ) { return 0x8221B900;  }
		/* 8221B8E8h case   12:*/		return 0x8221B8EC;
		  /* 8221B8ECh */ case   13:  		/* lwz R10, <#[R31 + 23200]> */
		/* 8221B8ECh case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221B8ECh case   13:*/		return 0x8221B8F0;
		  /* 8221B8F0h */ case   14:  		/* stw R10, <#[R11]> */
		/* 8221B8F0h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221B8F0h case   14:*/		return 0x8221B8F4;
		  /* 8221B8F4h */ case   15:  		/* lwz R10, <#[R31 + 23200]> */
		/* 8221B8F4h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221B8F4h case   15:*/		return 0x8221B8F8;
		  /* 8221B8F8h */ case   16:  		/* addi R10, R10, 1 */
		/* 8221B8F8h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8221B8F8h case   16:*/		return 0x8221B8FC;
		  /* 8221B8FCh */ case   17:  		/* stw R10, <#[R31 + 23200]> */
		/* 8221B8FCh case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221B8FCh case   17:*/		return 0x8221B900;
	}
	return 0x8221B900;
} // Block from 8221B8B8h-8221B900h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8221B900h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B900( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B900) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B900);
		  /* 8221B900h */ case    0:  		/* addi R11, R11, 4 */
		/* 8221B900h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221B900h case    0:*/		return 0x8221B904;
		  /* 8221B904h */ case    1:  		/* bc 16, CR0_LT, -36 */
		/* 8221B904h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221B8E0;  }
		/* 8221B904h case    1:*/		return 0x8221B908;
		  /* 8221B908h */ case    2:  		/* lwz R11, <#[R31 + 17632]> */
		/* 8221B908h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000044E0) );
		/* 8221B908h case    2:*/		return 0x8221B90C;
		  /* 8221B90Ch */ case    3:  		/* cmpwi CR6, R11, -1 */
		/* 8221B90Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8221B90Ch case    3:*/		return 0x8221B910;
		  /* 8221B910h */ case    4:  		/* bc 12, CR6_EQ, 24 */
		/* 8221B910h case    4:*/		if ( regs.CR[6].eq ) { return 0x8221B928;  }
		/* 8221B910h case    4:*/		return 0x8221B914;
		  /* 8221B914h */ case    5:  		/* lwz R11, <#[R31 + 23200]> */
		/* 8221B914h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221B914h case    5:*/		return 0x8221B918;
		  /* 8221B918h */ case    6:  		/* stw R11, <#[R31 + 17632]> */
		/* 8221B918h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000044E0) );
		/* 8221B918h case    6:*/		return 0x8221B91C;
		  /* 8221B91Ch */ case    7:  		/* lwz R11, <#[R31 + 23200]> */
		/* 8221B91Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221B91Ch case    7:*/		return 0x8221B920;
		  /* 8221B920h */ case    8:  		/* addi R11, R11, 1 */
		/* 8221B920h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8221B920h case    8:*/		return 0x8221B924;
		  /* 8221B924h */ case    9:  		/* stw R11, <#[R31 + 23200]> */
		/* 8221B924h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221B924h case    9:*/		return 0x8221B928;
	}
	return 0x8221B928;
} // Block from 8221B900h-8221B928h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8221B928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B928);
		  /* 8221B928h */ case    0:  		/* lwz R11, <#[R31 + 18336]> */
		/* 8221B928h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000047A0) );
		/* 8221B928h case    0:*/		return 0x8221B92C;
		  /* 8221B92Ch */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 8221B92Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8221B92Ch case    1:*/		return 0x8221B930;
		  /* 8221B930h */ case    2:  		/* bc 12, CR6_EQ, 60 */
		/* 8221B930h case    2:*/		if ( regs.CR[6].eq ) { return 0x8221B96C;  }
		/* 8221B930h case    2:*/		return 0x8221B934;
		  /* 8221B934h */ case    3:  		/* lwz R29, <#[R14 + 20]> */
		/* 8221B934h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R14 + 0x00000014) );
		/* 8221B934h case    3:*/		return 0x8221B938;
		  /* 8221B938h */ case    4:  		/* li R4, 971 */
		/* 8221B938h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x3CB);
		/* 8221B938h case    4:*/		return 0x8221B93C;
		  /* 8221B93Ch */ case    5:  		/* mr R30, R15 */
		/* 8221B93Ch case    5:*/		regs.R30 = regs.R15;
		/* 8221B93Ch case    5:*/		return 0x8221B940;
		  /* 8221B940h */ case    6:  		/* mr R3, R29 */
		/* 8221B940h case    6:*/		regs.R3 = regs.R29;
		/* 8221B940h case    6:*/		return 0x8221B944;
		  /* 8221B944h */ case    7:  		/* bl -779316 */
		/* 8221B944h case    7:*/		regs.LR = 0x8221B948; return 0x8215D510;
		/* 8221B944h case    7:*/		return 0x8221B948;
		  /* 8221B948h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 8221B948h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8221B948h case    8:*/		return 0x8221B94C;
		  /* 8221B94Ch */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 8221B94Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x8221B964;  }
		/* 8221B94Ch case    9:*/		return 0x8221B950;
		  /* 8221B950h */ case   10:  		/* li R4, 974 */
		/* 8221B950h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x3CE);
		/* 8221B950h case   10:*/		return 0x8221B954;
		  /* 8221B954h */ case   11:  		/* mr R3, R29 */
		/* 8221B954h case   11:*/		regs.R3 = regs.R29;
		/* 8221B954h case   11:*/		return 0x8221B958;
		  /* 8221B958h */ case   12:  		/* bl -779336 */
		/* 8221B958h case   12:*/		regs.LR = 0x8221B95C; return 0x8215D510;
		/* 8221B958h case   12:*/		return 0x8221B95C;
		  /* 8221B95Ch */ case   13:  		/* cmplwi CR6, R3, 3 */
		/* 8221B95Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000003);
		/* 8221B95Ch case   13:*/		return 0x8221B960;
		  /* 8221B960h */ case   14:  		/* bc 4, CR6_EQ, 8 */
		/* 8221B960h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8221B968;  }
		/* 8221B960h case   14:*/		return 0x8221B964;
	}
	return 0x8221B964;
} // Block from 8221B928h-8221B964h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8221B964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B964);
		  /* 8221B964h */ case    0:  		/* mr R30, R18 */
		/* 8221B964h case    0:*/		regs.R30 = regs.R18;
		/* 8221B964h case    0:*/		return 0x8221B968;
	}
	return 0x8221B968;
} // Block from 8221B964h-8221B968h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221B968h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B968);
		  /* 8221B968h */ case    0:  		/* stw R30, <#[R31 + 18336]> */
		/* 8221B968h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x000047A0) );
		/* 8221B968h case    0:*/		return 0x8221B96C;
	}
	return 0x8221B96C;
} // Block from 8221B968h-8221B96Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221B96Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B96C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B96C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B96C);
		  /* 8221B96Ch */ case    0:  		/* lwz R11, <#[R31 + 18848]> */
		/* 8221B96Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000049A0) );
		/* 8221B96Ch case    0:*/		return 0x8221B970;
		  /* 8221B970h */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 8221B970h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8221B970h case    1:*/		return 0x8221B974;
		  /* 8221B974h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 8221B974h case    2:*/		if ( regs.CR[6].eq ) { return 0x8221B97C;  }
		/* 8221B974h case    2:*/		return 0x8221B978;
		  /* 8221B978h */ case    3:  		/* stw R18, <#[R31 + 18848]> */
		/* 8221B978h case    3:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R31 + 0x000049A0) );
		/* 8221B978h case    3:*/		return 0x8221B97C;
	}
	return 0x8221B97C;
} // Block from 8221B96Ch-8221B97Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221B97Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B97C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B97C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B97C);
		  /* 8221B97Ch */ case    0:  		/* lwz R11, <#[R31 + 19104]> */
		/* 8221B97Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00004AA0) );
		/* 8221B97Ch case    0:*/		return 0x8221B980;
		  /* 8221B980h */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 8221B980h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8221B980h case    1:*/		return 0x8221B984;
		  /* 8221B984h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 8221B984h case    2:*/		if ( regs.CR[6].eq ) { return 0x8221B98C;  }
		/* 8221B984h case    2:*/		return 0x8221B988;
		  /* 8221B988h */ case    3:  		/* stw R15, <#[R31 + 19104]> */
		/* 8221B988h case    3:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R31 + 0x00004AA0) );
		/* 8221B988h case    3:*/		return 0x8221B98C;
	}
	return 0x8221B98C;
} // Block from 8221B97Ch-8221B98Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221B98Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B98C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B98C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B98C);
		  /* 8221B98Ch */ case    0:  		/* lwz R11, <#[R31 + 19360]> */
		/* 8221B98Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00004BA0) );
		/* 8221B98Ch case    0:*/		return 0x8221B990;
		  /* 8221B990h */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 8221B990h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8221B990h case    1:*/		return 0x8221B994;
		  /* 8221B994h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 8221B994h case    2:*/		if ( regs.CR[6].eq ) { return 0x8221B99C;  }
		/* 8221B994h case    2:*/		return 0x8221B998;
		  /* 8221B998h */ case    3:  		/* stw R15, <#[R31 + 19360]> */
		/* 8221B998h case    3:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R31 + 0x00004BA0) );
		/* 8221B998h case    3:*/		return 0x8221B99C;
	}
	return 0x8221B99C;
} // Block from 8221B98Ch-8221B99Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221B99Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B99C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B99C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B99C);
		  /* 8221B99Ch */ case    0:  		/* lwz R11, <#[R31 + 18592]> */
		/* 8221B99Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000048A0) );
		/* 8221B99Ch case    0:*/		return 0x8221B9A0;
		  /* 8221B9A0h */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 8221B9A0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8221B9A0h case    1:*/		return 0x8221B9A4;
		  /* 8221B9A4h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 8221B9A4h case    2:*/		if ( regs.CR[6].eq ) { return 0x8221B9B0;  }
		/* 8221B9A4h case    2:*/		return 0x8221B9A8;
		  /* 8221B9A8h */ case    3:  		/* li R11, 2 */
		/* 8221B9A8h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 8221B9A8h case    3:*/		return 0x8221B9AC;
		  /* 8221B9ACh */ case    4:  		/* stw R11, <#[R31 + 18592]> */
		/* 8221B9ACh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000048A0) );
		/* 8221B9ACh case    4:*/		return 0x8221B9B0;
	}
	return 0x8221B9B0;
} // Block from 8221B99Ch-8221B9B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221B9B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B9B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B9B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B9B0);
		  /* 8221B9B0h */ case    0:  		/* li R10, 64 */
		/* 8221B9B0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x40);
		/* 8221B9B0h case    0:*/		return 0x8221B9B4;
		  /* 8221B9B4h */ case    1:  		/* addi R11, R31, 17824 */
		/* 8221B9B4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x45A0);
		/* 8221B9B4h case    1:*/		return 0x8221B9B8;
		  /* 8221B9B8h */ case    2:  		/* mtspr CTR, R10 */
		/* 8221B9B8h case    2:*/		regs.CTR = regs.R10;
		/* 8221B9B8h case    2:*/		return 0x8221B9BC;
		  /* 8221B9BCh */ case    3:  		/* lwz R10, <#[R11]> */
		/* 8221B9BCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221B9BCh case    3:*/		return 0x8221B9C0;
		  /* 8221B9C0h */ case    4:  		/* cmpwi CR6, R10, -1 */
		/* 8221B9C0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8221B9C0h case    4:*/		return 0x8221B9C4;
		  /* 8221B9C4h */ case    5:  		/* bc 12, CR6_EQ, 24 */
		/* 8221B9C4h case    5:*/		if ( regs.CR[6].eq ) { return 0x8221B9DC;  }
		/* 8221B9C4h case    5:*/		return 0x8221B9C8;
		  /* 8221B9C8h */ case    6:  		/* lwz R10, <#[R31 + 23200]> */
		/* 8221B9C8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221B9C8h case    6:*/		return 0x8221B9CC;
		  /* 8221B9CCh */ case    7:  		/* stw R10, <#[R11]> */
		/* 8221B9CCh case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221B9CCh case    7:*/		return 0x8221B9D0;
		  /* 8221B9D0h */ case    8:  		/* lwz R10, <#[R31 + 23200]> */
		/* 8221B9D0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221B9D0h case    8:*/		return 0x8221B9D4;
		  /* 8221B9D4h */ case    9:  		/* addi R10, R10, 1 */
		/* 8221B9D4h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8221B9D4h case    9:*/		return 0x8221B9D8;
		  /* 8221B9D8h */ case   10:  		/* stw R10, <#[R31 + 23200]> */
		/* 8221B9D8h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221B9D8h case   10:*/		return 0x8221B9DC;
	}
	return 0x8221B9DC;
} // Block from 8221B9B0h-8221B9DCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 8221B9DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B9DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B9DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B9DC);
		  /* 8221B9DCh */ case    0:  		/* addi R11, R11, 4 */
		/* 8221B9DCh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221B9DCh case    0:*/		return 0x8221B9E0;
		  /* 8221B9E0h */ case    1:  		/* bc 16, CR0_LT, -36 */
		/* 8221B9E0h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221B9BC;  }
		/* 8221B9E0h case    1:*/		return 0x8221B9E4;
		  /* 8221B9E4h */ case    2:  		/* lwz R11, <#[R31 + 20384]> */
		/* 8221B9E4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00004FA0) );
		/* 8221B9E4h case    2:*/		return 0x8221B9E8;
		  /* 8221B9E8h */ case    3:  		/* cmpwi CR6, R11, -1 */
		/* 8221B9E8h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8221B9E8h case    3:*/		return 0x8221B9EC;
		  /* 8221B9ECh */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 8221B9ECh case    4:*/		if ( regs.CR[6].eq ) { return 0x8221B9FC;  }
		/* 8221B9ECh case    4:*/		return 0x8221B9F0;
		  /* 8221B9F0h */ case    5:  		/* li R11, 62 */
		/* 8221B9F0h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x3E);
		/* 8221B9F0h case    5:*/		return 0x8221B9F4;
		  /* 8221B9F4h */ case    6:  		/* stw R15, <#[R1 + 84]> */
		/* 8221B9F4h case    6:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R1 + 0x00000054) );
		/* 8221B9F4h case    6:*/		return 0x8221B9F8;
		  /* 8221B9F8h */ case    7:  		/* stw R11, <#[R31 + 20384]> */
		/* 8221B9F8h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00004FA0) );
		/* 8221B9F8h case    7:*/		return 0x8221B9FC;
	}
	return 0x8221B9FC;
} // Block from 8221B9DCh-8221B9FCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 8221B9FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221B9FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221B9FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221B9FC);
		  /* 8221B9FCh */ case    0:  		/* li R9, 2 */
		/* 8221B9FCh case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 8221B9FCh case    0:*/		return 0x8221BA00;
		  /* 8221BA00h */ case    1:  		/* addi R11, R31, 21408 */
		/* 8221BA00h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x53A0);
		/* 8221BA00h case    1:*/		return 0x8221BA04;
		  /* 8221BA04h */ case    2:  		/* addi R10, R14, 1184 */
		/* 8221BA04h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R14,0x4A0);
		/* 8221BA04h case    2:*/		return 0x8221BA08;
		  /* 8221BA08h */ case    3:  		/* mtspr CTR, R9 */
		/* 8221BA08h case    3:*/		regs.CTR = regs.R9;
		/* 8221BA08h case    3:*/		return 0x8221BA0C;
		  /* 8221BA0Ch */ case    4:  		/* lwz R9, <#[R11]> */
		/* 8221BA0Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221BA0Ch case    4:*/		return 0x8221BA10;
		  /* 8221BA10h */ case    5:  		/* cmpwi CR6, R9, -1 */
		/* 8221BA10h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 8221BA10h case    5:*/		return 0x8221BA14;
		  /* 8221BA14h */ case    6:  		/* bc 12, CR6_EQ, 36 */
		/* 8221BA14h case    6:*/		if ( regs.CR[6].eq ) { return 0x8221BA38;  }
		/* 8221BA14h case    6:*/		return 0x8221BA18;
		  /* 8221BA18h */ case    7:  		/* lwz R9, <#[R31 + 23204]> */
		/* 8221BA18h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BA18h case    7:*/		return 0x8221BA1C;
		  /* 8221BA1Ch */ case    8:  		/* stw R15, <#[R1 + 80]> */
		/* 8221BA1Ch case    8:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R1 + 0x00000050) );
		/* 8221BA1Ch case    8:*/		return 0x8221BA20;
		  /* 8221BA20h */ case    9:  		/* stw R9, <#[R10]> */
		/* 8221BA20h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8221BA20h case    9:*/		return 0x8221BA24;
		  /* 8221BA24h */ case   10:  		/* lwz R9, <#[R31 + 23204]> */
		/* 8221BA24h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BA24h case   10:*/		return 0x8221BA28;
		  /* 8221BA28h */ case   11:  		/* stw R9, <#[R11]> */
		/* 8221BA28h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221BA28h case   11:*/		return 0x8221BA2C;
		  /* 8221BA2Ch */ case   12:  		/* lwz R9, <#[R31 + 23204]> */
		/* 8221BA2Ch case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BA2Ch case   12:*/		return 0x8221BA30;
		  /* 8221BA30h */ case   13:  		/* addi R9, R9, 1 */
		/* 8221BA30h case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8221BA30h case   13:*/		return 0x8221BA34;
		  /* 8221BA34h */ case   14:  		/* stw R9, <#[R31 + 23204]> */
		/* 8221BA34h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BA34h case   14:*/		return 0x8221BA38;
	}
	return 0x8221BA38;
} // Block from 8221B9FCh-8221BA38h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8221BA38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BA38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BA38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BA38);
		  /* 8221BA38h */ case    0:  		/* addi R10, R10, 4 */
		/* 8221BA38h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8221BA38h case    0:*/		return 0x8221BA3C;
		  /* 8221BA3Ch */ case    1:  		/* addi R11, R11, 4 */
		/* 8221BA3Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221BA3Ch case    1:*/		return 0x8221BA40;
		  /* 8221BA40h */ case    2:  		/* bc 16, CR0_LT, -52 */
		/* 8221BA40h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221BA0C;  }
		/* 8221BA40h case    2:*/		return 0x8221BA44;
		  /* 8221BA44h */ case    3:  		/* li R9, 2 */
		/* 8221BA44h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 8221BA44h case    3:*/		return 0x8221BA48;
		  /* 8221BA48h */ case    4:  		/* addi R11, R31, 21664 */
		/* 8221BA48h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x54A0);
		/* 8221BA48h case    4:*/		return 0x8221BA4C;
		  /* 8221BA4Ch */ case    5:  		/* addi R10, R14, 1248 */
		/* 8221BA4Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R14,0x4E0);
		/* 8221BA4Ch case    5:*/		return 0x8221BA50;
		  /* 8221BA50h */ case    6:  		/* mtspr CTR, R9 */
		/* 8221BA50h case    6:*/		regs.CTR = regs.R9;
		/* 8221BA50h case    6:*/		return 0x8221BA54;
		  /* 8221BA54h */ case    7:  		/* lwz R9, <#[R11]> */
		/* 8221BA54h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221BA54h case    7:*/		return 0x8221BA58;
		  /* 8221BA58h */ case    8:  		/* cmpwi CR6, R9, -1 */
		/* 8221BA58h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 8221BA58h case    8:*/		return 0x8221BA5C;
		  /* 8221BA5Ch */ case    9:  		/* bc 12, CR6_EQ, 36 */
		/* 8221BA5Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x8221BA80;  }
		/* 8221BA5Ch case    9:*/		return 0x8221BA60;
		  /* 8221BA60h */ case   10:  		/* lwz R9, <#[R31 + 23204]> */
		/* 8221BA60h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BA60h case   10:*/		return 0x8221BA64;
		  /* 8221BA64h */ case   11:  		/* stw R15, <#[R1 + 80]> */
		/* 8221BA64h case   11:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R1 + 0x00000050) );
		/* 8221BA64h case   11:*/		return 0x8221BA68;
		  /* 8221BA68h */ case   12:  		/* stw R9, <#[R10]> */
		/* 8221BA68h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8221BA68h case   12:*/		return 0x8221BA6C;
		  /* 8221BA6Ch */ case   13:  		/* lwz R9, <#[R31 + 23204]> */
		/* 8221BA6Ch case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BA6Ch case   13:*/		return 0x8221BA70;
		  /* 8221BA70h */ case   14:  		/* stw R9, <#[R11]> */
		/* 8221BA70h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221BA70h case   14:*/		return 0x8221BA74;
		  /* 8221BA74h */ case   15:  		/* lwz R9, <#[R31 + 23204]> */
		/* 8221BA74h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BA74h case   15:*/		return 0x8221BA78;
		  /* 8221BA78h */ case   16:  		/* addi R9, R9, 1 */
		/* 8221BA78h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8221BA78h case   16:*/		return 0x8221BA7C;
		  /* 8221BA7Ch */ case   17:  		/* stw R9, <#[R31 + 23204]> */
		/* 8221BA7Ch case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BA7Ch case   17:*/		return 0x8221BA80;
	}
	return 0x8221BA80;
} // Block from 8221BA38h-8221BA80h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8221BA80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BA80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BA80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BA80);
		  /* 8221BA80h */ case    0:  		/* addi R10, R10, 4 */
		/* 8221BA80h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8221BA80h case    0:*/		return 0x8221BA84;
		  /* 8221BA84h */ case    1:  		/* addi R11, R11, 4 */
		/* 8221BA84h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221BA84h case    1:*/		return 0x8221BA88;
		  /* 8221BA88h */ case    2:  		/* bc 16, CR0_LT, -52 */
		/* 8221BA88h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221BA54;  }
		/* 8221BA88h case    2:*/		return 0x8221BA8C;
		  /* 8221BA8Ch */ case    3:  		/* li R9, 16 */
		/* 8221BA8Ch case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x10);
		/* 8221BA8Ch case    3:*/		return 0x8221BA90;
		  /* 8221BA90h */ case    4:  		/* addi R11, R31, 21152 */
		/* 8221BA90h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x52A0);
		/* 8221BA90h case    4:*/		return 0x8221BA94;
		  /* 8221BA94h */ case    5:  		/* addi R10, R14, 1120 */
		/* 8221BA94h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R14,0x460);
		/* 8221BA94h case    5:*/		return 0x8221BA98;
		  /* 8221BA98h */ case    6:  		/* mtspr CTR, R9 */
		/* 8221BA98h case    6:*/		regs.CTR = regs.R9;
		/* 8221BA98h case    6:*/		return 0x8221BA9C;
		  /* 8221BA9Ch */ case    7:  		/* lwz R9, <#[R11]> */
		/* 8221BA9Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221BA9Ch case    7:*/		return 0x8221BAA0;
		  /* 8221BAA0h */ case    8:  		/* cmpwi CR6, R9, -1 */
		/* 8221BAA0h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 8221BAA0h case    8:*/		return 0x8221BAA4;
		  /* 8221BAA4h */ case    9:  		/* bc 12, CR6_EQ, 36 */
		/* 8221BAA4h case    9:*/		if ( regs.CR[6].eq ) { return 0x8221BAC8;  }
		/* 8221BAA4h case    9:*/		return 0x8221BAA8;
		  /* 8221BAA8h */ case   10:  		/* lwz R9, <#[R31 + 23204]> */
		/* 8221BAA8h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BAA8h case   10:*/		return 0x8221BAAC;
		  /* 8221BAACh */ case   11:  		/* stw R15, <#[R1 + 80]> */
		/* 8221BAACh case   11:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R1 + 0x00000050) );
		/* 8221BAACh case   11:*/		return 0x8221BAB0;
		  /* 8221BAB0h */ case   12:  		/* stw R9, <#[R10]> */
		/* 8221BAB0h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8221BAB0h case   12:*/		return 0x8221BAB4;
		  /* 8221BAB4h */ case   13:  		/* lwz R9, <#[R31 + 23204]> */
		/* 8221BAB4h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BAB4h case   13:*/		return 0x8221BAB8;
		  /* 8221BAB8h */ case   14:  		/* stw R9, <#[R11]> */
		/* 8221BAB8h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221BAB8h case   14:*/		return 0x8221BABC;
		  /* 8221BABCh */ case   15:  		/* lwz R9, <#[R31 + 23204]> */
		/* 8221BABCh case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BABCh case   15:*/		return 0x8221BAC0;
		  /* 8221BAC0h */ case   16:  		/* addi R9, R9, 1 */
		/* 8221BAC0h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8221BAC0h case   16:*/		return 0x8221BAC4;
		  /* 8221BAC4h */ case   17:  		/* stw R9, <#[R31 + 23204]> */
		/* 8221BAC4h case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BAC4h case   17:*/		return 0x8221BAC8;
	}
	return 0x8221BAC8;
} // Block from 8221BA80h-8221BAC8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8221BAC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BAC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BAC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BAC8);
		  /* 8221BAC8h */ case    0:  		/* addi R10, R10, 4 */
		/* 8221BAC8h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8221BAC8h case    0:*/		return 0x8221BACC;
		  /* 8221BACCh */ case    1:  		/* addi R11, R11, 4 */
		/* 8221BACCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221BACCh case    1:*/		return 0x8221BAD0;
		  /* 8221BAD0h */ case    2:  		/* bc 16, CR0_LT, -52 */
		/* 8221BAD0h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221BA9C;  }
		/* 8221BAD0h case    2:*/		return 0x8221BAD4;
		  /* 8221BAD4h */ case    3:  		/* li R9, 16 */
		/* 8221BAD4h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x10);
		/* 8221BAD4h case    3:*/		return 0x8221BAD8;
		  /* 8221BAD8h */ case    4:  		/* addi R11, R31, 20640 */
		/* 8221BAD8h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x50A0);
		/* 8221BAD8h case    4:*/		return 0x8221BADC;
		  /* 8221BADCh */ case    5:  		/* addi R10, R14, 992 */
		/* 8221BADCh case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R14,0x3E0);
		/* 8221BADCh case    5:*/		return 0x8221BAE0;
		  /* 8221BAE0h */ case    6:  		/* mtspr CTR, R9 */
		/* 8221BAE0h case    6:*/		regs.CTR = regs.R9;
		/* 8221BAE0h case    6:*/		return 0x8221BAE4;
		  /* 8221BAE4h */ case    7:  		/* lwz R9, <#[R11]> */
		/* 8221BAE4h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221BAE4h case    7:*/		return 0x8221BAE8;
		  /* 8221BAE8h */ case    8:  		/* cmpwi CR6, R9, -1 */
		/* 8221BAE8h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 8221BAE8h case    8:*/		return 0x8221BAEC;
		  /* 8221BAECh */ case    9:  		/* bc 12, CR6_EQ, 36 */
		/* 8221BAECh case    9:*/		if ( regs.CR[6].eq ) { return 0x8221BB10;  }
		/* 8221BAECh case    9:*/		return 0x8221BAF0;
		  /* 8221BAF0h */ case   10:  		/* lwz R9, <#[R31 + 23204]> */
		/* 8221BAF0h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BAF0h case   10:*/		return 0x8221BAF4;
		  /* 8221BAF4h */ case   11:  		/* stw R15, <#[R1 + 80]> */
		/* 8221BAF4h case   11:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R1 + 0x00000050) );
		/* 8221BAF4h case   11:*/		return 0x8221BAF8;
		  /* 8221BAF8h */ case   12:  		/* stw R9, <#[R10]> */
		/* 8221BAF8h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8221BAF8h case   12:*/		return 0x8221BAFC;
		  /* 8221BAFCh */ case   13:  		/* lwz R9, <#[R31 + 23204]> */
		/* 8221BAFCh case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BAFCh case   13:*/		return 0x8221BB00;
		  /* 8221BB00h */ case   14:  		/* stw R9, <#[R11]> */
		/* 8221BB00h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221BB00h case   14:*/		return 0x8221BB04;
		  /* 8221BB04h */ case   15:  		/* lwz R9, <#[R31 + 23204]> */
		/* 8221BB04h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BB04h case   15:*/		return 0x8221BB08;
		  /* 8221BB08h */ case   16:  		/* addi R9, R9, 1 */
		/* 8221BB08h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8221BB08h case   16:*/		return 0x8221BB0C;
		  /* 8221BB0Ch */ case   17:  		/* stw R9, <#[R31 + 23204]> */
		/* 8221BB0Ch case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BB0Ch case   17:*/		return 0x8221BB10;
	}
	return 0x8221BB10;
} // Block from 8221BAC8h-8221BB10h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8221BB10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BB10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BB10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BB10);
		  /* 8221BB10h */ case    0:  		/* addi R10, R10, 4 */
		/* 8221BB10h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8221BB10h case    0:*/		return 0x8221BB14;
		  /* 8221BB14h */ case    1:  		/* addi R11, R11, 4 */
		/* 8221BB14h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221BB14h case    1:*/		return 0x8221BB18;
		  /* 8221BB18h */ case    2:  		/* bc 16, CR0_LT, -52 */
		/* 8221BB18h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221BAE4;  }
		/* 8221BB18h case    2:*/		return 0x8221BB1C;
		  /* 8221BB1Ch */ case    3:  		/* lwz R11, <#[R31 + 20896]> */
		/* 8221BB1Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000051A0) );
		/* 8221BB1Ch case    3:*/		return 0x8221BB20;
		  /* 8221BB20h */ case    4:  		/* cmpwi CR6, R11, -1 */
		/* 8221BB20h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8221BB20h case    4:*/		return 0x8221BB24;
		  /* 8221BB24h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 8221BB24h case    5:*/		if ( regs.CR[6].eq ) { return 0x8221BB44;  }
		/* 8221BB24h case    5:*/		return 0x8221BB28;
		  /* 8221BB28h */ case    6:  		/* lwz R11, <#[R31 + 23204]> */
		/* 8221BB28h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BB28h case    6:*/		return 0x8221BB2C;
		  /* 8221BB2Ch */ case    7:  		/* stw R15, <#[R1 + 80]> */
		/* 8221BB2Ch case    7:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R1 + 0x00000050) );
		/* 8221BB2Ch case    7:*/		return 0x8221BB30;
		  /* 8221BB30h */ case    8:  		/* stw R11, <#[R14 + 1056]> */
		/* 8221BB30h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R14 + 0x00000420) );
		/* 8221BB30h case    8:*/		return 0x8221BB34;
		  /* 8221BB34h */ case    9:  		/* lwz R11, <#[R31 + 23204]> */
		/* 8221BB34h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BB34h case    9:*/		return 0x8221BB38;
		  /* 8221BB38h */ case   10:  		/* addi R10, R11, 1 */
		/* 8221BB38h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 8221BB38h case   10:*/		return 0x8221BB3C;
		  /* 8221BB3Ch */ case   11:  		/* stw R10, <#[R31 + 23204]> */
		/* 8221BB3Ch case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BB3Ch case   11:*/		return 0x8221BB40;
		  /* 8221BB40h */ case   12:  		/* stw R11, <#[R31 + 20896]> */
		/* 8221BB40h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000051A0) );
		/* 8221BB40h case   12:*/		return 0x8221BB44;
	}
	return 0x8221BB44;
} // Block from 8221BB10h-8221BB44h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8221BB44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BB44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BB44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BB44);
		  /* 8221BB44h */ case    0:  		/* lwz R11, <#[R31 + 20128]> */
		/* 8221BB44h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00004EA0) );
		/* 8221BB44h case    0:*/		return 0x8221BB48;
		  /* 8221BB48h */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 8221BB48h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8221BB48h case    1:*/		return 0x8221BB4C;
		  /* 8221BB4Ch */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 8221BB4Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8221BB64;  }
		/* 8221BB4Ch case    2:*/		return 0x8221BB50;
		  /* 8221BB50h */ case    3:  		/* lwz R11, <#[R31 + 23204]> */
		/* 8221BB50h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BB50h case    3:*/		return 0x8221BB54;
		  /* 8221BB54h */ case    4:  		/* stw R15, <#[R1 + 80]> */
		/* 8221BB54h case    4:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R1 + 0x00000050) );
		/* 8221BB54h case    4:*/		return 0x8221BB58;
		  /* 8221BB58h */ case    5:  		/* addi R10, R11, 1 */
		/* 8221BB58h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 8221BB58h case    5:*/		return 0x8221BB5C;
		  /* 8221BB5Ch */ case    6:  		/* stw R10, <#[R31 + 23204]> */
		/* 8221BB5Ch case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BB5Ch case    6:*/		return 0x8221BB60;
		  /* 8221BB60h */ case    7:  		/* stw R11, <#[R31 + 20128]> */
		/* 8221BB60h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00004EA0) );
		/* 8221BB60h case    7:*/		return 0x8221BB64;
	}
	return 0x8221BB64;
} // Block from 8221BB44h-8221BB64h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8221BB64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BB64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BB64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BB64);
		  /* 8221BB64h */ case    0:  		/* lwz R11, <#[R31 + 23204]> */
		/* 8221BB64h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BB64h case    0:*/		return 0x8221BB68;
		  /* 8221BB68h */ case    1:  		/* stw R11, <#[R14 + 1632]> */
		/* 8221BB68h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R14 + 0x00000660) );
		/* 8221BB68h case    1:*/		return 0x8221BB6C;
		  /* 8221BB6Ch */ case    2:  		/* b 672 */
		/* 8221BB6Ch case    2:*/		return 0x8221BE0C;
		/* 8221BB6Ch case    2:*/		return 0x8221BB70;
	}
	return 0x8221BB70;
} // Block from 8221BB64h-8221BB70h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221BB70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BB70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BB70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BB70);
		  /* 8221BB70h */ case    0:  		/* li R11, 2 */
		/* 8221BB70h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 8221BB70h case    0:*/		return 0x8221BB74;
		  /* 8221BB74h */ case    1:  		/* addi R9, R14, 1184 */
		/* 8221BB74h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R14,0x4A0);
		/* 8221BB74h case    1:*/		return 0x8221BB78;
		  /* 8221BB78h */ case    2:  		/* addi R10, R31, 21408 */
		/* 8221BB78h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x53A0);
		/* 8221BB78h case    2:*/		return 0x8221BB7C;
		  /* 8221BB7Ch */ case    3:  		/* mtspr CTR, R11 */
		/* 8221BB7Ch case    3:*/		regs.CTR = regs.R11;
		/* 8221BB7Ch case    3:*/		return 0x8221BB80;
		  /* 8221BB80h */ case    4:  		/* lis R11, -4370 */
		/* 8221BB80h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFEEEE);
		/* 8221BB80h case    4:*/		return 0x8221BB84;
		  /* 8221BB84h */ case    5:  		/* ori R8, R11, 61166 */
		/* 8221BB84h case    5:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R11,0xEEEE);
		/* 8221BB84h case    5:*/		return 0x8221BB88;
		  /* 8221BB88h */ case    6:  		/* lwz R11, <#[R10]> */
		/* 8221BB88h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8221BB88h case    6:*/		return 0x8221BB8C;
		  /* 8221BB8Ch */ case    7:  		/* cmpwi CR6, R11, -1 */
		/* 8221BB8Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8221BB8Ch case    7:*/		return 0x8221BB90;
		  /* 8221BB90h */ case    8:  		/* lwz R11, <#[R9]> */
		/* 8221BB90h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 8221BB90h case    8:*/		return 0x8221BB94;
		  /* 8221BB94h */ case    9:  		/* bc 12, CR6_EQ, 28 */
		/* 8221BB94h case    9:*/		if ( regs.CR[6].eq ) { return 0x8221BBB0;  }
		/* 8221BB94h case    9:*/		return 0x8221BB98;
		  /* 8221BB98h */ case   10:  		/* cmpwi CR6, R11, -1 */
		/* 8221BB98h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8221BB98h case   10:*/		return 0x8221BB9C;
		  /* 8221BB9Ch */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 8221BB9Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x8221BBA8;  }
		/* 8221BB9Ch case   11:*/		return 0x8221BBA0;
		  /* 8221BBA0h */ case   12:  		/* stw R11, <#[R10]> */
		/* 8221BBA0h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8221BBA0h case   12:*/		return 0x8221BBA4;
		  /* 8221BBA4h */ case   13:  		/* b 20 */
		/* 8221BBA4h case   13:*/		return 0x8221BBB8;
		/* 8221BBA4h case   13:*/		return 0x8221BBA8;
	}
	return 0x8221BBA8;
} // Block from 8221BB70h-8221BBA8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8221BBA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BBA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BBA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BBA8);
		  /* 8221BBA8h */ case    0:  		/* stw R8, <#[R10]> */
		/* 8221BBA8h case    0:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8221BBA8h case    0:*/		return 0x8221BBAC;
		  /* 8221BBACh */ case    1:  		/* b 24 */
		/* 8221BBACh case    1:*/		return 0x8221BBC4;
		/* 8221BBACh case    1:*/		return 0x8221BBB0;
	}
	return 0x8221BBB0;
} // Block from 8221BBA8h-8221BBB0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221BBB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BBB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BBB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BBB0);
		  /* 8221BBB0h */ case    0:  		/* cmpwi CR6, R11, -1 */
		/* 8221BBB0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8221BBB0h case    0:*/		return 0x8221BBB4;
		  /* 8221BBB4h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 8221BBB4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8221BBC4;  }
		/* 8221BBB4h case    1:*/		return 0x8221BBB8;
	}
	return 0x8221BBB8;
} // Block from 8221BBB0h-8221BBB8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221BBB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BBB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BBB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BBB8);
		  /* 8221BBB8h */ case    0:  		/* lwz R11, <#[R31 + 23200]> */
		/* 8221BBB8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221BBB8h case    0:*/		return 0x8221BBBC;
		  /* 8221BBBCh */ case    1:  		/* addi R11, R11, 1 */
		/* 8221BBBCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8221BBBCh case    1:*/		return 0x8221BBC0;
		  /* 8221BBC0h */ case    2:  		/* stw R11, <#[R31 + 23200]> */
		/* 8221BBC0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221BBC0h case    2:*/		return 0x8221BBC4;
	}
	return 0x8221BBC4;
} // Block from 8221BBB8h-8221BBC4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221BBC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BBC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BBC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BBC4);
		  /* 8221BBC4h */ case    0:  		/* addi R10, R10, 4 */
		/* 8221BBC4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8221BBC4h case    0:*/		return 0x8221BBC8;
		  /* 8221BBC8h */ case    1:  		/* addi R9, R9, 4 */
		/* 8221BBC8h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8221BBC8h case    1:*/		return 0x8221BBCC;
		  /* 8221BBCCh */ case    2:  		/* bc 16, CR0_LT, -68 */
		/* 8221BBCCh case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221BB88;  }
		/* 8221BBCCh case    2:*/		return 0x8221BBD0;
		  /* 8221BBD0h */ case    3:  		/* li R10, 2 */
		/* 8221BBD0h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 8221BBD0h case    3:*/		return 0x8221BBD4;
		  /* 8221BBD4h */ case    4:  		/* addi R9, R14, 1248 */
		/* 8221BBD4h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R14,0x4E0);
		/* 8221BBD4h case    4:*/		return 0x8221BBD8;
		  /* 8221BBD8h */ case    5:  		/* addi R11, R31, 21664 */
		/* 8221BBD8h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x54A0);
		/* 8221BBD8h case    5:*/		return 0x8221BBDC;
		  /* 8221BBDCh */ case    6:  		/* mtspr CTR, R10 */
		/* 8221BBDCh case    6:*/		regs.CTR = regs.R10;
		/* 8221BBDCh case    6:*/		return 0x8221BBE0;
		  /* 8221BBE0h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 8221BBE0h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221BBE0h case    7:*/		return 0x8221BBE4;
		  /* 8221BBE4h */ case    8:  		/* cmpwi CR6, R10, -1 */
		/* 8221BBE4h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8221BBE4h case    8:*/		return 0x8221BBE8;
		  /* 8221BBE8h */ case    9:  		/* lwz R10, <#[R9]> */
		/* 8221BBE8h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 8221BBE8h case    9:*/		return 0x8221BBEC;
		  /* 8221BBECh */ case   10:  		/* bc 12, CR6_EQ, 28 */
		/* 8221BBECh case   10:*/		if ( regs.CR[6].eq ) { return 0x8221BC08;  }
		/* 8221BBECh case   10:*/		return 0x8221BBF0;
		  /* 8221BBF0h */ case   11:  		/* cmpwi CR6, R10, -1 */
		/* 8221BBF0h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8221BBF0h case   11:*/		return 0x8221BBF4;
		  /* 8221BBF4h */ case   12:  		/* bc 12, CR6_EQ, 12 */
		/* 8221BBF4h case   12:*/		if ( regs.CR[6].eq ) { return 0x8221BC00;  }
		/* 8221BBF4h case   12:*/		return 0x8221BBF8;
		  /* 8221BBF8h */ case   13:  		/* stw R10, <#[R11]> */
		/* 8221BBF8h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221BBF8h case   13:*/		return 0x8221BBFC;
		  /* 8221BBFCh */ case   14:  		/* b 20 */
		/* 8221BBFCh case   14:*/		return 0x8221BC10;
		/* 8221BBFCh case   14:*/		return 0x8221BC00;
	}
	return 0x8221BC00;
} // Block from 8221BBC4h-8221BC00h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8221BC00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BC00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BC00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BC00);
		  /* 8221BC00h */ case    0:  		/* stw R8, <#[R11]> */
		/* 8221BC00h case    0:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221BC00h case    0:*/		return 0x8221BC04;
		  /* 8221BC04h */ case    1:  		/* b 24 */
		/* 8221BC04h case    1:*/		return 0x8221BC1C;
		/* 8221BC04h case    1:*/		return 0x8221BC08;
	}
	return 0x8221BC08;
} // Block from 8221BC00h-8221BC08h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221BC08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BC08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BC08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BC08);
		  /* 8221BC08h */ case    0:  		/* cmpwi CR6, R10, -1 */
		/* 8221BC08h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8221BC08h case    0:*/		return 0x8221BC0C;
		  /* 8221BC0Ch */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 8221BC0Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8221BC1C;  }
		/* 8221BC0Ch case    1:*/		return 0x8221BC10;
	}
	return 0x8221BC10;
} // Block from 8221BC08h-8221BC10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221BC10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BC10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BC10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BC10);
		  /* 8221BC10h */ case    0:  		/* lwz R10, <#[R31 + 23200]> */
		/* 8221BC10h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221BC10h case    0:*/		return 0x8221BC14;
		  /* 8221BC14h */ case    1:  		/* addi R10, R10, 1 */
		/* 8221BC14h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8221BC14h case    1:*/		return 0x8221BC18;
		  /* 8221BC18h */ case    2:  		/* stw R10, <#[R31 + 23200]> */
		/* 8221BC18h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221BC18h case    2:*/		return 0x8221BC1C;
	}
	return 0x8221BC1C;
} // Block from 8221BC10h-8221BC1Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221BC1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BC1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BC1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BC1C);
		  /* 8221BC1Ch */ case    0:  		/* addi R11, R11, 4 */
		/* 8221BC1Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221BC1Ch case    0:*/		return 0x8221BC20;
		  /* 8221BC20h */ case    1:  		/* addi R9, R9, 4 */
		/* 8221BC20h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8221BC20h case    1:*/		return 0x8221BC24;
		  /* 8221BC24h */ case    2:  		/* bc 16, CR0_LT, -68 */
		/* 8221BC24h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221BBE0;  }
		/* 8221BC24h case    2:*/		return 0x8221BC28;
		  /* 8221BC28h */ case    3:  		/* li R10, 16 */
		/* 8221BC28h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x10);
		/* 8221BC28h case    3:*/		return 0x8221BC2C;
		  /* 8221BC2Ch */ case    4:  		/* addi R9, R14, 1120 */
		/* 8221BC2Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R14,0x460);
		/* 8221BC2Ch case    4:*/		return 0x8221BC30;
		  /* 8221BC30h */ case    5:  		/* addi R11, R31, 21152 */
		/* 8221BC30h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x52A0);
		/* 8221BC30h case    5:*/		return 0x8221BC34;
		  /* 8221BC34h */ case    6:  		/* mtspr CTR, R10 */
		/* 8221BC34h case    6:*/		regs.CTR = regs.R10;
		/* 8221BC34h case    6:*/		return 0x8221BC38;
		  /* 8221BC38h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 8221BC38h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221BC38h case    7:*/		return 0x8221BC3C;
		  /* 8221BC3Ch */ case    8:  		/* cmpwi CR6, R10, -1 */
		/* 8221BC3Ch case    8:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8221BC3Ch case    8:*/		return 0x8221BC40;
		  /* 8221BC40h */ case    9:  		/* lwz R10, <#[R9]> */
		/* 8221BC40h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 8221BC40h case    9:*/		return 0x8221BC44;
		  /* 8221BC44h */ case   10:  		/* bc 12, CR6_EQ, 28 */
		/* 8221BC44h case   10:*/		if ( regs.CR[6].eq ) { return 0x8221BC60;  }
		/* 8221BC44h case   10:*/		return 0x8221BC48;
		  /* 8221BC48h */ case   11:  		/* cmpwi CR6, R10, -1 */
		/* 8221BC48h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8221BC48h case   11:*/		return 0x8221BC4C;
		  /* 8221BC4Ch */ case   12:  		/* bc 12, CR6_EQ, 12 */
		/* 8221BC4Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x8221BC58;  }
		/* 8221BC4Ch case   12:*/		return 0x8221BC50;
		  /* 8221BC50h */ case   13:  		/* stw R10, <#[R11]> */
		/* 8221BC50h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221BC50h case   13:*/		return 0x8221BC54;
		  /* 8221BC54h */ case   14:  		/* b 20 */
		/* 8221BC54h case   14:*/		return 0x8221BC68;
		/* 8221BC54h case   14:*/		return 0x8221BC58;
	}
	return 0x8221BC58;
} // Block from 8221BC1Ch-8221BC58h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8221BC58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BC58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BC58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BC58);
		  /* 8221BC58h */ case    0:  		/* stw R8, <#[R11]> */
		/* 8221BC58h case    0:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221BC58h case    0:*/		return 0x8221BC5C;
		  /* 8221BC5Ch */ case    1:  		/* b 24 */
		/* 8221BC5Ch case    1:*/		return 0x8221BC74;
		/* 8221BC5Ch case    1:*/		return 0x8221BC60;
	}
	return 0x8221BC60;
} // Block from 8221BC58h-8221BC60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221BC60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BC60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BC60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BC60);
		  /* 8221BC60h */ case    0:  		/* cmpwi CR6, R10, -1 */
		/* 8221BC60h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8221BC60h case    0:*/		return 0x8221BC64;
		  /* 8221BC64h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 8221BC64h case    1:*/		if ( regs.CR[6].eq ) { return 0x8221BC74;  }
		/* 8221BC64h case    1:*/		return 0x8221BC68;
	}
	return 0x8221BC68;
} // Block from 8221BC60h-8221BC68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221BC68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BC68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BC68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BC68);
		  /* 8221BC68h */ case    0:  		/* lwz R10, <#[R31 + 23200]> */
		/* 8221BC68h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221BC68h case    0:*/		return 0x8221BC6C;
		  /* 8221BC6Ch */ case    1:  		/* addi R10, R10, 1 */
		/* 8221BC6Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8221BC6Ch case    1:*/		return 0x8221BC70;
		  /* 8221BC70h */ case    2:  		/* stw R10, <#[R31 + 23200]> */
		/* 8221BC70h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221BC70h case    2:*/		return 0x8221BC74;
	}
	return 0x8221BC74;
} // Block from 8221BC68h-8221BC74h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221BC74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BC74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BC74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BC74);
		  /* 8221BC74h */ case    0:  		/* addi R11, R11, 4 */
		/* 8221BC74h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221BC74h case    0:*/		return 0x8221BC78;
		  /* 8221BC78h */ case    1:  		/* addi R9, R9, 4 */
		/* 8221BC78h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8221BC78h case    1:*/		return 0x8221BC7C;
		  /* 8221BC7Ch */ case    2:  		/* bc 16, CR0_LT, -68 */
		/* 8221BC7Ch case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221BC38;  }
		/* 8221BC7Ch case    2:*/		return 0x8221BC80;
		  /* 8221BC80h */ case    3:  		/* li R10, 16 */
		/* 8221BC80h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x10);
		/* 8221BC80h case    3:*/		return 0x8221BC84;
		  /* 8221BC84h */ case    4:  		/* addi R9, R14, 992 */
		/* 8221BC84h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R14,0x3E0);
		/* 8221BC84h case    4:*/		return 0x8221BC88;
		  /* 8221BC88h */ case    5:  		/* addi R11, R31, 20640 */
		/* 8221BC88h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x50A0);
		/* 8221BC88h case    5:*/		return 0x8221BC8C;
		  /* 8221BC8Ch */ case    6:  		/* mtspr CTR, R10 */
		/* 8221BC8Ch case    6:*/		regs.CTR = regs.R10;
		/* 8221BC8Ch case    6:*/		return 0x8221BC90;
		  /* 8221BC90h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 8221BC90h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221BC90h case    7:*/		return 0x8221BC94;
		  /* 8221BC94h */ case    8:  		/* cmpwi CR6, R10, -1 */
		/* 8221BC94h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8221BC94h case    8:*/		return 0x8221BC98;
		  /* 8221BC98h */ case    9:  		/* lwz R10, <#[R9]> */
		/* 8221BC98h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 8221BC98h case    9:*/		return 0x8221BC9C;
		  /* 8221BC9Ch */ case   10:  		/* bc 12, CR6_EQ, 28 */
		/* 8221BC9Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x8221BCB8;  }
		/* 8221BC9Ch case   10:*/		return 0x8221BCA0;
		  /* 8221BCA0h */ case   11:  		/* cmpwi CR6, R10, -1 */
		/* 8221BCA0h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8221BCA0h case   11:*/		return 0x8221BCA4;
		  /* 8221BCA4h */ case   12:  		/* bc 12, CR6_EQ, 12 */
		/* 8221BCA4h case   12:*/		if ( regs.CR[6].eq ) { return 0x8221BCB0;  }
		/* 8221BCA4h case   12:*/		return 0x8221BCA8;
		  /* 8221BCA8h */ case   13:  		/* stw R10, <#[R11]> */
		/* 8221BCA8h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221BCA8h case   13:*/		return 0x8221BCAC;
		  /* 8221BCACh */ case   14:  		/* b 20 */
		/* 8221BCACh case   14:*/		return 0x8221BCC0;
		/* 8221BCACh case   14:*/		return 0x8221BCB0;
	}
	return 0x8221BCB0;
} // Block from 8221BC74h-8221BCB0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8221BCB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BCB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BCB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BCB0);
		  /* 8221BCB0h */ case    0:  		/* stw R8, <#[R11]> */
		/* 8221BCB0h case    0:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8221BCB0h case    0:*/		return 0x8221BCB4;
		  /* 8221BCB4h */ case    1:  		/* b 24 */
		/* 8221BCB4h case    1:*/		return 0x8221BCCC;
		/* 8221BCB4h case    1:*/		return 0x8221BCB8;
	}
	return 0x8221BCB8;
} // Block from 8221BCB0h-8221BCB8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221BCB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BCB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BCB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BCB8);
		  /* 8221BCB8h */ case    0:  		/* cmpwi CR6, R10, -1 */
		/* 8221BCB8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8221BCB8h case    0:*/		return 0x8221BCBC;
		  /* 8221BCBCh */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 8221BCBCh case    1:*/		if ( regs.CR[6].eq ) { return 0x8221BCCC;  }
		/* 8221BCBCh case    1:*/		return 0x8221BCC0;
	}
	return 0x8221BCC0;
} // Block from 8221BCB8h-8221BCC0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221BCC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BCC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BCC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BCC0);
		  /* 8221BCC0h */ case    0:  		/* lwz R10, <#[R31 + 23200]> */
		/* 8221BCC0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221BCC0h case    0:*/		return 0x8221BCC4;
		  /* 8221BCC4h */ case    1:  		/* addi R10, R10, 1 */
		/* 8221BCC4h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8221BCC4h case    1:*/		return 0x8221BCC8;
		  /* 8221BCC8h */ case    2:  		/* stw R10, <#[R31 + 23200]> */
		/* 8221BCC8h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221BCC8h case    2:*/		return 0x8221BCCC;
	}
	return 0x8221BCCC;
} // Block from 8221BCC0h-8221BCCCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221BCCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BCCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BCCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BCCC);
		  /* 8221BCCCh */ case    0:  		/* addi R11, R11, 4 */
		/* 8221BCCCh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221BCCCh case    0:*/		return 0x8221BCD0;
		  /* 8221BCD0h */ case    1:  		/* addi R9, R9, 4 */
		/* 8221BCD0h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8221BCD0h case    1:*/		return 0x8221BCD4;
		  /* 8221BCD4h */ case    2:  		/* bc 16, CR0_LT, -68 */
		/* 8221BCD4h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221BC90;  }
		/* 8221BCD4h case    2:*/		return 0x8221BCD8;
		  /* 8221BCD8h */ case    3:  		/* lwz R11, <#[R31 + 20896]> */
		/* 8221BCD8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000051A0) );
		/* 8221BCD8h case    3:*/		return 0x8221BCDC;
		  /* 8221BCDCh */ case    4:  		/* cmpwi CR6, R11, -1 */
		/* 8221BCDCh case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8221BCDCh case    4:*/		return 0x8221BCE0;
		  /* 8221BCE0h */ case    5:  		/* lwz R11, <#[R14 + 1056]> */
		/* 8221BCE0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000420) );
		/* 8221BCE0h case    5:*/		return 0x8221BCE4;
		  /* 8221BCE4h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 8221BCE4h case    6:*/		if ( regs.CR[6].eq ) { return 0x8221BCF8;  }
		/* 8221BCE4h case    6:*/		return 0x8221BCE8;
		  /* 8221BCE8h */ case    7:  		/* cmpwi CR6, R11, -1 */
		/* 8221BCE8h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8221BCE8h case    7:*/		return 0x8221BCEC;
		  /* 8221BCECh */ case    8:  		/* bc 4, CR6_EQ, 20 */
		/* 8221BCECh case    8:*/		if ( !regs.CR[6].eq ) { return 0x8221BD00;  }
		/* 8221BCECh case    8:*/		return 0x8221BCF0;
		  /* 8221BCF0h */ case    9:  		/* stw R8, <#[R31 + 20896]> */
		/* 8221BCF0h case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x000051A0) );
		/* 8221BCF0h case    9:*/		return 0x8221BCF4;
		  /* 8221BCF4h */ case   10:  		/* b 28 */
		/* 8221BCF4h case   10:*/		return 0x8221BD10;
		/* 8221BCF4h case   10:*/		return 0x8221BCF8;
	}
	return 0x8221BCF8;
} // Block from 8221BCCCh-8221BCF8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8221BCF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BCF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BCF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BCF8);
		  /* 8221BCF8h */ case    0:  		/* cmpwi CR6, R11, -1 */
		/* 8221BCF8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8221BCF8h case    0:*/		return 0x8221BCFC;
		  /* 8221BCFCh */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 8221BCFCh case    1:*/		if ( regs.CR[6].eq ) { return 0x8221BD10;  }
		/* 8221BCFCh case    1:*/		return 0x8221BD00;
	}
	return 0x8221BD00;
} // Block from 8221BCF8h-8221BD00h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221BD00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BD00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BD00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BD00);
		  /* 8221BD00h */ case    0:  		/* stw R11, <#[R31 + 20896]> */
		/* 8221BD00h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000051A0) );
		/* 8221BD00h case    0:*/		return 0x8221BD04;
		  /* 8221BD04h */ case    1:  		/* lwz R11, <#[R31 + 23200]> */
		/* 8221BD04h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221BD04h case    1:*/		return 0x8221BD08;
		  /* 8221BD08h */ case    2:  		/* addi R11, R11, 1 */
		/* 8221BD08h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8221BD08h case    2:*/		return 0x8221BD0C;
		  /* 8221BD0Ch */ case    3:  		/* stw R11, <#[R31 + 23200]> */
		/* 8221BD0Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221BD0Ch case    3:*/		return 0x8221BD10;
	}
	return 0x8221BD10;
} // Block from 8221BD00h-8221BD10h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221BD10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BD10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BD10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BD10);
		  /* 8221BD10h */ case    0:  		/* lwz R10, <#[R31 + 21920]> */
		/* 8221BD10h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000055A0) );
		/* 8221BD10h case    0:*/		return 0x8221BD14;
		  /* 8221BD14h */ case    1:  		/* lis R11, -32252 */
		/* 8221BD14h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221BD14h case    1:*/		return 0x8221BD18;
		  /* 8221BD18h */ case    2:  		/* cmpwi CR6, R10, -1 */
		/* 8221BD18h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8221BD18h case    2:*/		return 0x8221BD1C;
		  /* 8221BD1Ch */ case    3:  		/* addi R30, R11, -25364 */
		/* 8221BD1Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFF9CEC);
		/* 8221BD1Ch case    3:*/		return 0x8221BD20;
		  /* 8221BD20h */ case    4:  		/* bc 4, CR6_EQ, 16 */
		/* 8221BD20h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8221BD30;  }
		/* 8221BD20h case    4:*/		return 0x8221BD24;
		  /* 8221BD24h */ case    5:  		/* lwz R11, <#[R31 + 22176]> */
		/* 8221BD24h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000056A0) );
		/* 8221BD24h case    5:*/		return 0x8221BD28;
		  /* 8221BD28h */ case    6:  		/* cmpwi CR6, R11, -1 */
		/* 8221BD28h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8221BD28h case    6:*/		return 0x8221BD2C;
		  /* 8221BD2Ch */ case    7:  		/* bc 12, CR6_EQ, 28 */
		/* 8221BD2Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x8221BD48;  }
		/* 8221BD2Ch case    7:*/		return 0x8221BD30;
	}
	return 0x8221BD30;
} // Block from 8221BD10h-8221BD30h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8221BD30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BD30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BD30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BD30);
		  /* 8221BD30h */ case    0:  		/* mr R6, R16 */
		/* 8221BD30h case    0:*/		regs.R6 = regs.R16;
		/* 8221BD30h case    0:*/		return 0x8221BD34;
		  /* 8221BD34h */ case    1:  		/* mr R5, R30 */
		/* 8221BD34h case    1:*/		regs.R5 = regs.R30;
		/* 8221BD34h case    1:*/		return 0x8221BD38;
		  /* 8221BD38h */ case    2:  		/* mr R4, R17 */
		/* 8221BD38h case    2:*/		regs.R4 = regs.R17;
		/* 8221BD38h case    2:*/		return 0x8221BD3C;
		  /* 8221BD3Ch */ case    3:  		/* li R7, 15999 */
		/* 8221BD3Ch case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x3E7F);
		/* 8221BD3Ch case    3:*/		return 0x8221BD40;
		  /* 8221BD40h */ case    4:  		/* li R3, 0 */
		/* 8221BD40h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221BD40h case    4:*/		return 0x8221BD44;
		  /* 8221BD44h */ case    5:  		/* bl -803132 */
		/* 8221BD44h case    5:*/		regs.LR = 0x8221BD48; return 0x82157C08;
		/* 8221BD44h case    5:*/		return 0x8221BD48;
	}
	return 0x8221BD48;
} // Block from 8221BD30h-8221BD48h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221BD48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BD48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BD48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BD48);
		  /* 8221BD48h */ case    0:  		/* lwz R11, <#[R31 + 22432]> */
		/* 8221BD48h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000057A0) );
		/* 8221BD48h case    0:*/		return 0x8221BD4C;
		  /* 8221BD4Ch */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 8221BD4Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8221BD4Ch case    1:*/		return 0x8221BD50;
		  /* 8221BD50h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 8221BD50h case    2:*/		if ( regs.CR[6].eq ) { return 0x8221BD6C;  }
		/* 8221BD50h case    2:*/		return 0x8221BD54;
		  /* 8221BD54h */ case    3:  		/* mr R6, R16 */
		/* 8221BD54h case    3:*/		regs.R6 = regs.R16;
		/* 8221BD54h case    3:*/		return 0x8221BD58;
		  /* 8221BD58h */ case    4:  		/* mr R5, R30 */
		/* 8221BD58h case    4:*/		regs.R5 = regs.R30;
		/* 8221BD58h case    4:*/		return 0x8221BD5C;
		  /* 8221BD5Ch */ case    5:  		/* mr R4, R17 */
		/* 8221BD5Ch case    5:*/		regs.R4 = regs.R17;
		/* 8221BD5Ch case    5:*/		return 0x8221BD60;
		  /* 8221BD60h */ case    6:  		/* li R7, 16005 */
		/* 8221BD60h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x3E85);
		/* 8221BD60h case    6:*/		return 0x8221BD64;
		  /* 8221BD64h */ case    7:  		/* li R3, 0 */
		/* 8221BD64h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221BD64h case    7:*/		return 0x8221BD68;
		  /* 8221BD68h */ case    8:  		/* bl -803168 */
		/* 8221BD68h case    8:*/		regs.LR = 0x8221BD6C; return 0x82157C08;
		/* 8221BD68h case    8:*/		return 0x8221BD6C;
	}
	return 0x8221BD6C;
} // Block from 8221BD48h-8221BD6Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8221BD6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BD6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BD6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BD6C);
		  /* 8221BD6Ch */ case    0:  		/* lwz R11, <#[R31 + 18592]> */
		/* 8221BD6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000048A0) );
		/* 8221BD6Ch case    0:*/		return 0x8221BD70;
		  /* 8221BD70h */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 8221BD70h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8221BD70h case    1:*/		return 0x8221BD74;
		  /* 8221BD74h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 8221BD74h case    2:*/		if ( regs.CR[6].eq ) { return 0x8221BD90;  }
		/* 8221BD74h case    2:*/		return 0x8221BD78;
		  /* 8221BD78h */ case    3:  		/* mr R6, R16 */
		/* 8221BD78h case    3:*/		regs.R6 = regs.R16;
		/* 8221BD78h case    3:*/		return 0x8221BD7C;
		  /* 8221BD7Ch */ case    4:  		/* mr R5, R30 */
		/* 8221BD7Ch case    4:*/		regs.R5 = regs.R30;
		/* 8221BD7Ch case    4:*/		return 0x8221BD80;
		  /* 8221BD80h */ case    5:  		/* mr R4, R17 */
		/* 8221BD80h case    5:*/		regs.R4 = regs.R17;
		/* 8221BD80h case    5:*/		return 0x8221BD84;
		  /* 8221BD84h */ case    6:  		/* li R7, 16012 */
		/* 8221BD84h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x3E8C);
		/* 8221BD84h case    6:*/		return 0x8221BD88;
		  /* 8221BD88h */ case    7:  		/* li R3, 0 */
		/* 8221BD88h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221BD88h case    7:*/		return 0x8221BD8C;
		  /* 8221BD8Ch */ case    8:  		/* bl -803204 */
		/* 8221BD8Ch case    8:*/		regs.LR = 0x8221BD90; return 0x82157C08;
		/* 8221BD8Ch case    8:*/		return 0x8221BD90;
	}
	return 0x8221BD90;
} // Block from 8221BD6Ch-8221BD90h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8221BD90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BD90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BD90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BD90);
		  /* 8221BD90h */ case    0:  		/* li R10, 64 */
		/* 8221BD90h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x40);
		/* 8221BD90h case    0:*/		return 0x8221BD94;
		  /* 8221BD94h */ case    1:  		/* addi R11, R31, 17824 */
		/* 8221BD94h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x45A0);
		/* 8221BD94h case    1:*/		return 0x8221BD98;
		  /* 8221BD98h */ case    2:  		/* mtspr CTR, R10 */
		/* 8221BD98h case    2:*/		regs.CTR = regs.R10;
		/* 8221BD98h case    2:*/		return 0x8221BD9C;
		  /* 8221BD9Ch */ case    3:  		/* lwz R10, <#[R11]> */
		/* 8221BD9Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221BD9Ch case    3:*/		return 0x8221BDA0;
		  /* 8221BDA0h */ case    4:  		/* cmpwi CR6, R10, -1 */
		/* 8221BDA0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8221BDA0h case    4:*/		return 0x8221BDA4;
		  /* 8221BDA4h */ case    5:  		/* bc 12, CR6_EQ, 24 */
		/* 8221BDA4h case    5:*/		if ( regs.CR[6].eq ) { return 0x8221BDBC;  }
		/* 8221BDA4h case    5:*/		return 0x8221BDA8;
		  /* 8221BDA8h */ case    6:  		/* lwz R10, <#[R31 + 23200]> */
		/* 8221BDA8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221BDA8h case    6:*/		return 0x8221BDAC;
		  /* 8221BDACh */ case    7:  		/* stw R10, <#[R11]> */
		/* 8221BDACh case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221BDACh case    7:*/		return 0x8221BDB0;
		  /* 8221BDB0h */ case    8:  		/* lwz R10, <#[R31 + 23200]> */
		/* 8221BDB0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221BDB0h case    8:*/		return 0x8221BDB4;
		  /* 8221BDB4h */ case    9:  		/* addi R10, R10, 1 */
		/* 8221BDB4h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8221BDB4h case    9:*/		return 0x8221BDB8;
		  /* 8221BDB8h */ case   10:  		/* stw R10, <#[R31 + 23200]> */
		/* 8221BDB8h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00005AA0) );
		/* 8221BDB8h case   10:*/		return 0x8221BDBC;
	}
	return 0x8221BDBC;
} // Block from 8221BD90h-8221BDBCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 8221BDBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BDBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BDBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BDBC);
		  /* 8221BDBCh */ case    0:  		/* addi R11, R11, 4 */
		/* 8221BDBCh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221BDBCh case    0:*/		return 0x8221BDC0;
		  /* 8221BDC0h */ case    1:  		/* bc 16, CR0_LT, -36 */
		/* 8221BDC0h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221BD9C;  }
		/* 8221BDC0h case    1:*/		return 0x8221BDC4;
		  /* 8221BDC4h */ case    2:  		/* li R10, 4 */
		/* 8221BDC4h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 8221BDC4h case    2:*/		return 0x8221BDC8;
		  /* 8221BDC8h */ case    3:  		/* addi R11, R31, 22688 */
		/* 8221BDC8h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x58A0);
		/* 8221BDC8h case    3:*/		return 0x8221BDCC;
		  /* 8221BDCCh */ case    4:  		/* mtspr CTR, R10 */
		/* 8221BDCCh case    4:*/		regs.CTR = regs.R10;
		/* 8221BDCCh case    4:*/		return 0x8221BDD0;
	}
	return 0x8221BDD0;
} // Block from 8221BDBCh-8221BDD0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221BDD0h
// Function '?BuildSymbolTable@XGRAPHICS@@YAXPAU_XLT_CONTEXT@1@PATIL_Token@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BDD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BDD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BDD0);
		  /* 8221BDD0h */ case    0:  		/* lwz R10, <#[R11]> */
		/* 8221BDD0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221BDD0h case    0:*/		return 0x8221BDD4;
		  /* 8221BDD4h */ case    1:  		/* cmpwi CR6, R10, -1 */
		/* 8221BDD4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 8221BDD4h case    1:*/		return 0x8221BDD8;
		  /* 8221BDD8h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 8221BDD8h case    2:*/		if ( regs.CR[6].eq ) { return 0x8221BDF0;  }
		/* 8221BDD8h case    2:*/		return 0x8221BDDC;
		  /* 8221BDDCh */ case    3:  		/* lwz R10, <#[R31 + 23204]> */
		/* 8221BDDCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BDDCh case    3:*/		return 0x8221BDE0;
		  /* 8221BDE0h */ case    4:  		/* stw R10, <#[R11]> */
		/* 8221BDE0h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221BDE0h case    4:*/		return 0x8221BDE4;
		  /* 8221BDE4h */ case    5:  		/* lwz R10, <#[R31 + 23204]> */
		/* 8221BDE4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BDE4h case    5:*/		return 0x8221BDE8;
		  /* 8221BDE8h */ case    6:  		/* addi R10, R10, 1 */
		/* 8221BDE8h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8221BDE8h case    6:*/		return 0x8221BDEC;
		  /* 8221BDECh */ case    7:  		/* stw R10, <#[R31 + 23204]> */
		/* 8221BDECh case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00005AA4) );
		/* 8221BDECh case    7:*/		return 0x8221BDF0;
	}
	return 0x8221BDF0;
} // Block from 8221BDD0h-8221BDF0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8221BDF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BDF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BDF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BDF0);
		  /* 8221BDF0h */ case    0:  		/* addi R11, R11, 4 */
		/* 8221BDF0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221BDF0h case    0:*/		return 0x8221BDF4;
		  /* 8221BDF4h */ case    1:  		/* bc 16, CR0_LT, -36 */
		/* 8221BDF4h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221BDD0;  }
		/* 8221BDF4h case    1:*/		return 0x8221BDF8;
		  /* 8221BDF8h */ case    2:  		/* lwz R11, <#[R31 + 22944]> */
		/* 8221BDF8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000059A0) );
		/* 8221BDF8h case    2:*/		return 0x8221BDFC;
		  /* 8221BDFCh */ case    3:  		/* cmpwi CR6, R11, -1 */
		/* 8221BDFCh case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 8221BDFCh case    3:*/		return 0x8221BE00;
		  /* 8221BE00h */ case    4:  		/* bc 12, CR6_EQ, 12 */
		/* 8221BE00h case    4:*/		if ( regs.CR[6].eq ) { return 0x8221BE0C;  }
		/* 8221BE00h case    4:*/		return 0x8221BE04;
		  /* 8221BE04h */ case    5:  		/* li R11, 63 */
		/* 8221BE04h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x3F);
		/* 8221BE04h case    5:*/		return 0x8221BE08;
		  /* 8221BE08h */ case    6:  		/* stw R11, <#[R31 + 22944]> */
		/* 8221BE08h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000059A0) );
		/* 8221BE08h case    6:*/		return 0x8221BE0C;
	}
	return 0x8221BE0C;
} // Block from 8221BDF0h-8221BE0Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221BE0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BE0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BE0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BE0C);
		  /* 8221BE0Ch */ case    0:  		/* lwz R11, <#[R1 + 84]> */
		/* 8221BE0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8221BE0Ch case    0:*/		return 0x8221BE10;
		  /* 8221BE10h */ case    1:  		/* mr R3, R14 */
		/* 8221BE10h case    1:*/		regs.R3 = regs.R14;
		/* 8221BE10h case    1:*/		return 0x8221BE14;
		  /* 8221BE14h */ case    2:  		/* lwz R10, <#[R1 + 80]> */
		/* 8221BE14h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8221BE14h case    2:*/		return 0x8221BE18;
		  /* 8221BE18h */ case    3:  		/* stw R11, <#[R31 + 23368]> */
		/* 8221BE18h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00005B48) );
		/* 8221BE18h case    3:*/		return 0x8221BE1C;
		  /* 8221BE1Ch */ case    4:  		/* stw R10, <#[R31 + 23372]> */
		/* 8221BE1Ch case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00005B4C) );
		/* 8221BE1Ch case    4:*/		return 0x8221BE20;
		  /* 8221BE20h */ case    5:  		/* bl 5536 */
		/* 8221BE20h case    5:*/		regs.LR = 0x8221BE24; return 0x8221D3C0;
		/* 8221BE20h case    5:*/		return 0x8221BE24;
		  /* 8221BE24h */ case    6:  		/* addi R1, R1, 240 */
		/* 8221BE24h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 8221BE24h case    6:*/		return 0x8221BE28;
		  /* 8221BE28h */ case    7:  		/* b -1616824 */
		/* 8221BE28h case    7:*/		return 0x82091270;
		/* 8221BE28h case    7:*/		return 0x8221BE2C;
		  /* 8221BE2Ch */ case    8:  		/* nop */
		/* 8221BE2Ch case    8:*/		cpu::op::nop();
		/* 8221BE2Ch case    8:*/		return 0x8221BE30;
	}
	return 0x8221BE30;
} // Block from 8221BE0Ch-8221BE30h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8221BE30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BE30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BE30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BE30);
		  /* 8221BE30h */ case    0:  		/* mfspr R12, LR */
		/* 8221BE30h case    0:*/		regs.R12 = regs.LR;
		/* 8221BE30h case    0:*/		return 0x8221BE34;
		  /* 8221BE34h */ case    1:  		/* bl -1616856 */
		/* 8221BE34h case    1:*/		regs.LR = 0x8221BE38; return 0x8209125C;
		/* 8221BE34h case    1:*/		return 0x8221BE38;
		  /* 8221BE38h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8221BE38h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8221BE38h case    2:*/		return 0x8221BE3C;
		  /* 8221BE3Ch */ case    3:  		/* mr R31, R3 */
		/* 8221BE3Ch case    3:*/		regs.R31 = regs.R3;
		/* 8221BE3Ch case    3:*/		return 0x8221BE40;
		  /* 8221BE40h */ case    4:  		/* mr R30, R4 */
		/* 8221BE40h case    4:*/		regs.R30 = regs.R4;
		/* 8221BE40h case    4:*/		return 0x8221BE44;
		  /* 8221BE44h */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8221BE44h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8221BE44h case    5:*/		return 0x8221BE48;
		  /* 8221BE48h */ case    6:  		/* bc 12, CR6_EQ, 244 */
		/* 8221BE48h case    6:*/		if ( regs.CR[6].eq ) { return 0x8221BF3C;  }
		/* 8221BE48h case    6:*/		return 0x8221BE4C;
		  /* 8221BE4Ch */ case    7:  		/* li R10, 23380 */
		/* 8221BE4Ch case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x5B54);
		/* 8221BE4Ch case    7:*/		return 0x8221BE50;
		  /* 8221BE50h */ case    8:  		/* lwz R11, <#[R31 + 28]> */
		/* 8221BE50h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221BE50h case    8:*/		return 0x8221BE54;
		  /* 8221BE54h */ case    9:  		/* li R29, 0 */
		/* 8221BE54h case    9:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8221BE54h case    9:*/		return 0x8221BE58;
		  /* 8221BE58h */ case   10:  		/* mr R9, R29 */
		/* 8221BE58h case   10:*/		regs.R9 = regs.R29;
		/* 8221BE58h case   10:*/		return 0x8221BE5C;
		  /* 8221BE5Ch */ case   11:  		/* mtspr CTR, R10 */
		/* 8221BE5Ch case   11:*/		regs.CTR = regs.R10;
		/* 8221BE5Ch case   11:*/		return 0x8221BE60;
		  /* 8221BE60h */ case   12:  		/* addi R10, R11, -1 */
		/* 8221BE60h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 8221BE60h case   12:*/		return 0x8221BE64;
		  /* 8221BE64h */ case   13:  		/* stbu R9, <#[R10 + 1]> */
		/* 8221BE64h case   13:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R10 + 0x00000001) );
		regs.R10 = (uint32)(regs.R10 + 0x00000001);
		/* 8221BE64h case   13:*/		return 0x8221BE68;
		  /* 8221BE68h */ case   14:  		/* bc 16, CR0_LT, -4 */
		/* 8221BE68h case   14:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221BE64;  }
		/* 8221BE68h case   14:*/		return 0x8221BE6C;
		  /* 8221BE6Ch */ case   15:  		/* li R10, 20 */
		/* 8221BE6Ch case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x14);
		/* 8221BE6Ch case   15:*/		return 0x8221BE70;
		  /* 8221BE70h */ case   16:  		/* stw R29, <#[R11 + 13152]> */
		/* 8221BE70h case   16:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00003360) );
		/* 8221BE70h case   16:*/		return 0x8221BE74;
		  /* 8221BE74h */ case   17:  		/* addi R9, R11, 16 */
		/* 8221BE74h case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x10);
		/* 8221BE74h case   17:*/		return 0x8221BE78;
		  /* 8221BE78h */ case   18:  		/* stw R29, <#[R11 + 13156]> */
		/* 8221BE78h case   18:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00003364) );
		/* 8221BE78h case   18:*/		return 0x8221BE7C;
		  /* 8221BE7Ch */ case   19:  		/* addi R8, R11, 10824 */
		/* 8221BE7Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x2A48);
		/* 8221BE7Ch case   19:*/		return 0x8221BE80;
		  /* 8221BE80h */ case   20:  		/* stw R29, <#[R11 + 13160]> */
		/* 8221BE80h case   20:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00003368) );
		/* 8221BE80h case   20:*/		return 0x8221BE84;
		  /* 8221BE84h */ case   21:  		/* stw R9, <#[R11 + 10816]> */
		/* 8221BE84h case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00002A40) );
		/* 8221BE84h case   21:*/		return 0x8221BE88;
		  /* 8221BE88h */ case   22:  		/* addi R9, R11, 12404 */
		/* 8221BE88h case   22:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x3074);
		/* 8221BE88h case   22:*/		return 0x8221BE8C;
		  /* 8221BE8Ch */ case   23:  		/* stw R8, <#[R11 + 12024]> */
		/* 8221BE8Ch case   23:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00002EF8) );
		/* 8221BE8Ch case   23:*/		return 0x8221BE90;
		  /* 8221BE90h */ case   24:  		/* mtspr CTR, R10 */
		/* 8221BE90h case   24:*/		regs.CTR = regs.R10;
		/* 8221BE90h case   24:*/		return 0x8221BE94;
		  /* 8221BE94h */ case   25:  		/* li R10, 25 */
		/* 8221BE94h case   25:*/		cpu::op::li<0>(regs,&regs.R10,0x19);
		/* 8221BE94h case   25:*/		return 0x8221BE98;
		  /* 8221BE98h */ case   26:  		/* stwu R10, <#[R9 + 28]> */
		/* 8221BE98h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x0000001C) );
		regs.R9 = (uint32)(regs.R9 + 0x0000001C);
		/* 8221BE98h case   26:*/		return 0x8221BE9C;
		  /* 8221BE9Ch */ case   27:  		/* bc 16, CR0_LT, -8 */
		/* 8221BE9Ch case   27:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221BE94;  }
		/* 8221BE9Ch case   27:*/		return 0x8221BEA0;
		  /* 8221BEA0h */ case   28:  		/* stw R5, <#[R11 + 12424]> */
		/* 8221BEA0h case   28:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00003088) );
		/* 8221BEA0h case   28:*/		return 0x8221BEA4;
		  /* 8221BEA4h */ case   29:  		/* mr R4, R30 */
		/* 8221BEA4h case   29:*/		regs.R4 = regs.R30;
		/* 8221BEA4h case   29:*/		return 0x8221BEA8;
		  /* 8221BEA8h */ case   30:  		/* mr R3, R31 */
		/* 8221BEA8h case   30:*/		regs.R3 = regs.R31;
		/* 8221BEA8h case   30:*/		return 0x8221BEAC;
		  /* 8221BEACh */ case   31:  		/* bl -2812 */
		/* 8221BEACh case   31:*/		regs.LR = 0x8221BEB0; return 0x8221B3B0;
		/* 8221BEACh case   31:*/		return 0x8221BEB0;
		  /* 8221BEB0h */ case   32:  		/* addi R11, R30, 4 */
		/* 8221BEB0h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 8221BEB0h case   32:*/		return 0x8221BEB4;
		  /* 8221BEB4h */ case   33:  		/* addi R11, R11, 4 */
		/* 8221BEB4h case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221BEB4h case   33:*/		return 0x8221BEB8;
		  /* 8221BEB8h */ case   34:  		/* stw R11, <#[R31 + 24]> */
		/* 8221BEB8h case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8221BEB8h case   34:*/		return 0x8221BEBC;
		  /* 8221BEBCh */ case   35:  		/* lbz R10, <#[R30 + 5]> */
		/* 8221BEBCh case   35:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000005) );
		/* 8221BEBCh case   35:*/		return 0x8221BEC0;
		  /* 8221BEC0h */ case   36:  		/* lwz R11, <#[R31 + 28]> */
		/* 8221BEC0h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221BEC0h case   36:*/		return 0x8221BEC4;
		  /* 8221BEC4h */ case   37:  		/* stw R10, <#[R11]> */
		/* 8221BEC4h case   37:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221BEC4h case   37:*/		return 0x8221BEC8;
		  /* 8221BEC8h */ case   38:  		/* lwz R11, <#[R31 + 28]> */
		/* 8221BEC8h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221BEC8h case   38:*/		return 0x8221BECC;
		  /* 8221BECCh */ case   39:  		/* lbz R10, <#[R30 + 4]> */
		/* 8221BECCh case   39:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 8221BECCh case   39:*/		return 0x8221BED0;
		  /* 8221BED0h */ case   40:  		/* rlwinm R10, R10, 0, 31, 31 */
		/* 8221BED0h case   40:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R10);
		/* 8221BED0h case   40:*/		return 0x8221BED4;
		  /* 8221BED4h */ case   41:  		/* stw R10, <#[R11 + 8]> */
		/* 8221BED4h case   41:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8221BED4h case   41:*/		return 0x8221BED8;
		  /* 8221BED8h */ case   42:  		/* lbz R11, <#[R30 + 3]> */
		/* 8221BED8h case   42:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000003) );
		/* 8221BED8h case   42:*/		return 0x8221BEDC;
		  /* 8221BEDCh */ case   43:  		/* lwz R10, <#[R31 + 28]> */
		/* 8221BEDCh case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221BEDCh case   43:*/		return 0x8221BEE0;
		  /* 8221BEE0h */ case   44:  		/* stw R11, <#[R10 + 4]> */
		/* 8221BEE0h case   44:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8221BEE0h case   44:*/		return 0x8221BEE4;
		  /* 8221BEE4h */ case   45:  		/* lwz R11, <#[R31 + 28]> */
		/* 8221BEE4h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221BEE4h case   45:*/		return 0x8221BEE8;
		  /* 8221BEE8h */ case   46:  		/* lwz R10, <#[R11 + 8]> */
		/* 8221BEE8h case   46:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8221BEE8h case   46:*/		return 0x8221BEEC;
		  /* 8221BEECh */ case   47:  		/* cmplwi CR6, R10, 0 */
		/* 8221BEECh case   47:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8221BEECh case   47:*/		return 0x8221BEF0;
		  /* 8221BEF0h */ case   48:  		/* bc 12, CR6_EQ, 24 */
		/* 8221BEF0h case   48:*/		if ( regs.CR[6].eq ) { return 0x8221BF08;  }
		/* 8221BEF0h case   48:*/		return 0x8221BEF4;
		  /* 8221BEF4h */ case   49:  		/* li R10, 7 */
		/* 8221BEF4h case   49:*/		cpu::op::li<0>(regs,&regs.R10,0x7);
		/* 8221BEF4h case   49:*/		return 0x8221BEF8;
		  /* 8221BEF8h */ case   50:  		/* li R9, 1 */
		/* 8221BEF8h case   50:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8221BEF8h case   50:*/		return 0x8221BEFC;
		  /* 8221BEFCh */ case   51:  		/* stw R10, <#[R31 + 1664]> */
		/* 8221BEFCh case   51:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000680) );
		/* 8221BEFCh case   51:*/		return 0x8221BF00;
		  /* 8221BF00h */ case   52:  		/* stw R9, <#[R11 + 23368]> */
		/* 8221BF00h case   52:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00005B48) );
		/* 8221BF00h case   52:*/		return 0x8221BF04;
		  /* 8221BF04h */ case   53:  		/* b 8 */
		/* 8221BF04h case   53:*/		return 0x8221BF0C;
		/* 8221BF04h case   53:*/		return 0x8221BF08;
	}
	return 0x8221BF08;
} // Block from 8221BE30h-8221BF08h (54 instructions)

//////////////////////////////////////////////////////
// Block at 8221BF08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BF08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BF08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BF08);
		  /* 8221BF08h */ case    0:  		/* stw R29, <#[R31 + 1664]> */
		/* 8221BF08h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000680) );
		/* 8221BF08h case    0:*/		return 0x8221BF0C;
	}
	return 0x8221BF0C;
} // Block from 8221BF08h-8221BF0Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221BF0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BF0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BF0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BF0C);
		  /* 8221BF0Ch */ case    0:  		/* mr R3, R31 */
		/* 8221BF0Ch case    0:*/		regs.R3 = regs.R31;
		/* 8221BF0Ch case    0:*/		return 0x8221BF10;
		  /* 8221BF10h */ case    1:  		/* bl -17208 */
		/* 8221BF10h case    1:*/		regs.LR = 0x8221BF14; return 0x82217BD8;
		/* 8221BF10h case    1:*/		return 0x8221BF14;
		  /* 8221BF14h */ case    2:  		/* mr R3, R31 */
		/* 8221BF14h case    2:*/		regs.R3 = regs.R31;
		/* 8221BF14h case    2:*/		return 0x8221BF18;
		  /* 8221BF18h */ case    3:  		/* bl -6304 */
		/* 8221BF18h case    3:*/		regs.LR = 0x8221BF1C; return 0x8221A678;
		/* 8221BF18h case    3:*/		return 0x8221BF1C;
		  /* 8221BF1Ch */ case    4:  		/* mr R3, R31 */
		/* 8221BF1Ch case    4:*/		regs.R3 = regs.R31;
		/* 8221BF1Ch case    4:*/		return 0x8221BF20;
		  /* 8221BF20h */ case    5:  		/* lwz R4, <#[R31 + 16]> */
		/* 8221BF20h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 8221BF20h case    5:*/		return 0x8221BF24;
		  /* 8221BF24h */ case    6:  		/* bl -17836 */
		/* 8221BF24h case    6:*/		regs.LR = 0x8221BF28; return 0x82217978;
		/* 8221BF24h case    6:*/		return 0x8221BF28;
		  /* 8221BF28h */ case    7:  		/* mr R3, R31 */
		/* 8221BF28h case    7:*/		regs.R3 = regs.R31;
		/* 8221BF28h case    7:*/		return 0x8221BF2C;
		  /* 8221BF2Ch */ case    8:  		/* bl 5268 */
		/* 8221BF2Ch case    8:*/		regs.LR = 0x8221BF30; return 0x8221D3C0;
		/* 8221BF2Ch case    8:*/		return 0x8221BF30;
		  /* 8221BF30h */ case    9:  		/* lwz R11, <#[R31 + 28]> */
		/* 8221BF30h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221BF30h case    9:*/		return 0x8221BF34;
		  /* 8221BF34h */ case   10:  		/* lwz R11, <#[R11 + 12428]> */
		/* 8221BF34h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000308C) );
		/* 8221BF34h case   10:*/		return 0x8221BF38;
		  /* 8221BF38h */ case   11:  		/* mulli R3, R11, 12 */
		/* 8221BF38h case   11:*/		cpu::op::mulli<0>(regs,&regs.R3,regs.R11,0xC);
		/* 8221BF38h case   11:*/		return 0x8221BF3C;
	}
	return 0x8221BF3C;
} // Block from 8221BF0Ch-8221BF3Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8221BF3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BF3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BF3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BF3C);
		  /* 8221BF3Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 8221BF3Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8221BF3Ch case    0:*/		return 0x8221BF40;
		  /* 8221BF40h */ case    1:  		/* b -1617044 */
		/* 8221BF40h case    1:*/		return 0x820912AC;
		/* 8221BF40h case    1:*/		return 0x8221BF44;
		  /* 8221BF44h */ case    2:  		/* nop */
		/* 8221BF44h case    2:*/		cpu::op::nop();
		/* 8221BF44h case    2:*/		return 0x8221BF48;
	}
	return 0x8221BF48;
} // Block from 8221BF3Ch-8221BF48h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221BF48h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BF48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BF48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BF48);
		  /* 8221BF48h */ case    0:  		/* mfspr R12, LR */
		/* 8221BF48h case    0:*/		regs.R12 = regs.LR;
		/* 8221BF48h case    0:*/		return 0x8221BF4C;
		  /* 8221BF4Ch */ case    1:  		/* bl -1617152 */
		/* 8221BF4Ch case    1:*/		regs.LR = 0x8221BF50; return 0x8209124C;
		/* 8221BF4Ch case    1:*/		return 0x8221BF50;
		  /* 8221BF50h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8221BF50h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8221BF50h case    2:*/		return 0x8221BF54;
		  /* 8221BF54h */ case    3:  		/* lis R11, -32253 */
		/* 8221BF54h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8221BF54h case    3:*/		return 0x8221BF58;
		  /* 8221BF58h */ case    4:  		/* lis R10, -32252 */
		/* 8221BF58h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221BF58h case    4:*/		return 0x8221BF5C;
		  /* 8221BF5Ch */ case    5:  		/* mr R30, R3 */
		/* 8221BF5Ch case    5:*/		regs.R30 = regs.R3;
		/* 8221BF5Ch case    5:*/		return 0x8221BF60;
		  /* 8221BF60h */ case    6:  		/* mr R28, R4 */
		/* 8221BF60h case    6:*/		regs.R28 = regs.R4;
		/* 8221BF60h case    6:*/		return 0x8221BF64;
		  /* 8221BF64h */ case    7:  		/* mr R26, R5 */
		/* 8221BF64h case    7:*/		regs.R26 = regs.R5;
		/* 8221BF64h case    7:*/		return 0x8221BF68;
		  /* 8221BF68h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8221BF68h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8221BF68h case    8:*/		return 0x8221BF6C;
		  /* 8221BF6Ch */ case    9:  		/* addi R31, R11, 27460 */
		/* 8221BF6Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x6B44);
		/* 8221BF6Ch case    9:*/		return 0x8221BF70;
		  /* 8221BF70h */ case   10:  		/* addi R29, R10, -7312 */
		/* 8221BF70h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFE370);
		/* 8221BF70h case   10:*/		return 0x8221BF74;
		  /* 8221BF74h */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 8221BF74h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8221BF94;  }
		/* 8221BF74h case   11:*/		return 0x8221BF78;
		  /* 8221BF78h */ case   12:  		/* lis R11, -32252 */
		/* 8221BF78h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221BF78h case   12:*/		return 0x8221BF7C;
		  /* 8221BF7Ch */ case   13:  		/* mr R6, R29 */
		/* 8221BF7Ch case   13:*/		regs.R6 = regs.R29;
		/* 8221BF7Ch case   13:*/		return 0x8221BF80;
		  /* 8221BF80h */ case   14:  		/* addi R5, R11, -4576 */
		/* 8221BF80h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFEE20);
		/* 8221BF80h case   14:*/		return 0x8221BF84;
		  /* 8221BF84h */ case   15:  		/* mr R4, R31 */
		/* 8221BF84h case   15:*/		regs.R4 = regs.R31;
		/* 8221BF84h case   15:*/		return 0x8221BF88;
		  /* 8221BF88h */ case   16:  		/* li R7, 16240 */
		/* 8221BF88h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x3F70);
		/* 8221BF88h case   16:*/		return 0x8221BF8C;
		  /* 8221BF8Ch */ case   17:  		/* li R3, 0 */
		/* 8221BF8Ch case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221BF8Ch case   17:*/		return 0x8221BF90;
		  /* 8221BF90h */ case   18:  		/* bl -803720 */
		/* 8221BF90h case   18:*/		regs.LR = 0x8221BF94; return 0x82157C08;
		/* 8221BF90h case   18:*/		return 0x8221BF94;
	}
	return 0x8221BF94;
} // Block from 8221BF48h-8221BF94h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8221BF94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BF94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BF94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BF94);
		  /* 8221BF94h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8221BF94h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8221BF94h case    0:*/		return 0x8221BF98;
		  /* 8221BF98h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8221BF98h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8221BFB8;  }
		/* 8221BF98h case    1:*/		return 0x8221BF9C;
		  /* 8221BF9Ch */ case    2:  		/* lis R11, -32252 */
		/* 8221BF9Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221BF9Ch case    2:*/		return 0x8221BFA0;
		  /* 8221BFA0h */ case    3:  		/* mr R6, R29 */
		/* 8221BFA0h case    3:*/		regs.R6 = regs.R29;
		/* 8221BFA0h case    3:*/		return 0x8221BFA4;
		  /* 8221BFA4h */ case    4:  		/* addi R5, R11, -18196 */
		/* 8221BFA4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB8EC);
		/* 8221BFA4h case    4:*/		return 0x8221BFA8;
		  /* 8221BFA8h */ case    5:  		/* mr R4, R31 */
		/* 8221BFA8h case    5:*/		regs.R4 = regs.R31;
		/* 8221BFA8h case    5:*/		return 0x8221BFAC;
		  /* 8221BFACh */ case    6:  		/* li R7, 16241 */
		/* 8221BFACh case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x3F71);
		/* 8221BFACh case    6:*/		return 0x8221BFB0;
		  /* 8221BFB0h */ case    7:  		/* li R3, 0 */
		/* 8221BFB0h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221BFB0h case    7:*/		return 0x8221BFB4;
		  /* 8221BFB4h */ case    8:  		/* bl -803756 */
		/* 8221BFB4h case    8:*/		regs.LR = 0x8221BFB8; return 0x82157C08;
		/* 8221BFB4h case    8:*/		return 0x8221BFB8;
	}
	return 0x8221BFB8;
} // Block from 8221BF94h-8221BFB8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8221BFB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BFB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BFB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BFB8);
		  /* 8221BFB8h */ case    0:  		/* li R4, 0 */
		/* 8221BFB8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8221BFB8h case    0:*/		return 0x8221BFBC;
		  /* 8221BFBCh */ case    1:  		/* mr R3, R28 */
		/* 8221BFBCh case    1:*/		regs.R3 = regs.R28;
		/* 8221BFBCh case    1:*/		return 0x8221BFC0;
		  /* 8221BFC0h */ case    2:  		/* bl -780976 */
		/* 8221BFC0h case    2:*/		regs.LR = 0x8221BFC4; return 0x8215D510;
		/* 8221BFC0h case    2:*/		return 0x8221BFC4;
		  /* 8221BFC4h */ case    3:  		/* mr R4, R3 */
		/* 8221BFC4h case    3:*/		regs.R4 = regs.R3;
		/* 8221BFC4h case    3:*/		return 0x8221BFC8;
		  /* 8221BFC8h */ case    4:  		/* lwz R3, <#[R30 + 20]> */
		/* 8221BFC8h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000014) );
		/* 8221BFC8h case    4:*/		return 0x8221BFCC;
		  /* 8221BFCCh */ case    5:  		/* bl -770548 */
		/* 8221BFCCh case    5:*/		regs.LR = 0x8221BFD0; return 0x8215FDD8;
		/* 8221BFCCh case    5:*/		return 0x8221BFD0;
		  /* 8221BFD0h */ case    6:  		/* or. R27, R3, R3 */
		/* 8221BFD0h case    6:*/		cpu::op::or<1>(regs,&regs.R27,regs.R3,regs.R3);
		/* 8221BFD0h case    6:*/		return 0x8221BFD4;
		  /* 8221BFD4h */ case    7:  		/* bc 4, CR0_EQ, 32 */
		/* 8221BFD4h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8221BFF4;  }
		/* 8221BFD4h case    7:*/		return 0x8221BFD8;
		  /* 8221BFD8h */ case    8:  		/* lis R11, -32252 */
		/* 8221BFD8h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221BFD8h case    8:*/		return 0x8221BFDC;
		  /* 8221BFDCh */ case    9:  		/* mr R6, R29 */
		/* 8221BFDCh case    9:*/		regs.R6 = regs.R29;
		/* 8221BFDCh case    9:*/		return 0x8221BFE0;
		  /* 8221BFE0h */ case   10:  		/* addi R5, R11, -4600 */
		/* 8221BFE0h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFEE08);
		/* 8221BFE0h case   10:*/		return 0x8221BFE4;
		  /* 8221BFE4h */ case   11:  		/* mr R4, R31 */
		/* 8221BFE4h case   11:*/		regs.R4 = regs.R31;
		/* 8221BFE4h case   11:*/		return 0x8221BFE8;
		  /* 8221BFE8h */ case   12:  		/* li R7, 16251 */
		/* 8221BFE8h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3F7B);
		/* 8221BFE8h case   12:*/		return 0x8221BFEC;
		  /* 8221BFECh */ case   13:  		/* li R3, 0 */
		/* 8221BFECh case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221BFECh case   13:*/		return 0x8221BFF0;
		  /* 8221BFF0h */ case   14:  		/* bl -803816 */
		/* 8221BFF0h case   14:*/		regs.LR = 0x8221BFF4; return 0x82157C08;
		/* 8221BFF0h case   14:*/		return 0x8221BFF4;
	}
	return 0x8221BFF4;
} // Block from 8221BFB8h-8221BFF4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8221BFF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221BFF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221BFF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221BFF4);
		  /* 8221BFF4h */ case    0:  		/* li R4, 1 */
		/* 8221BFF4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8221BFF4h case    0:*/		return 0x8221BFF8;
		  /* 8221BFF8h */ case    1:  		/* mr R3, R28 */
		/* 8221BFF8h case    1:*/		regs.R3 = regs.R28;
		/* 8221BFF8h case    1:*/		return 0x8221BFFC;
		  /* 8221BFFCh */ case    2:  		/* bl -781036 */
		/* 8221BFFCh case    2:*/		regs.LR = 0x8221C000; return 0x8215D510;
		/* 8221BFFCh case    2:*/		return 0x8221C000;
		  /* 8221C000h */ case    3:  		/* mr R4, R3 */
		/* 8221C000h case    3:*/		regs.R4 = regs.R3;
		/* 8221C000h case    3:*/		return 0x8221C004;
		  /* 8221C004h */ case    4:  		/* lwz R3, <#[R30 + 20]> */
		/* 8221C004h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000014) );
		/* 8221C004h case    4:*/		return 0x8221C008;
		  /* 8221C008h */ case    5:  		/* bl -770608 */
		/* 8221C008h case    5:*/		regs.LR = 0x8221C00C; return 0x8215FDD8;
		/* 8221C008h case    5:*/		return 0x8221C00C;
		  /* 8221C00Ch */ case    6:  		/* or. R25, R3, R3 */
		/* 8221C00Ch case    6:*/		cpu::op::or<1>(regs,&regs.R25,regs.R3,regs.R3);
		/* 8221C00Ch case    6:*/		return 0x8221C010;
		  /* 8221C010h */ case    7:  		/* bc 4, CR0_EQ, 32 */
		/* 8221C010h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8221C030;  }
		/* 8221C010h case    7:*/		return 0x8221C014;
		  /* 8221C014h */ case    8:  		/* lis R11, -32252 */
		/* 8221C014h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221C014h case    8:*/		return 0x8221C018;
		  /* 8221C018h */ case    9:  		/* mr R6, R29 */
		/* 8221C018h case    9:*/		regs.R6 = regs.R29;
		/* 8221C018h case    9:*/		return 0x8221C01C;
		  /* 8221C01Ch */ case   10:  		/* addi R5, R11, -4624 */
		/* 8221C01Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFEDF0);
		/* 8221C01Ch case   10:*/		return 0x8221C020;
		  /* 8221C020h */ case   11:  		/* mr R4, R31 */
		/* 8221C020h case   11:*/		regs.R4 = regs.R31;
		/* 8221C020h case   11:*/		return 0x8221C024;
		  /* 8221C024h */ case   12:  		/* li R7, 16261 */
		/* 8221C024h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x3F85);
		/* 8221C024h case   12:*/		return 0x8221C028;
		  /* 8221C028h */ case   13:  		/* li R3, 0 */
		/* 8221C028h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221C028h case   13:*/		return 0x8221C02C;
		  /* 8221C02Ch */ case   14:  		/* bl -803876 */
		/* 8221C02Ch case   14:*/		regs.LR = 0x8221C030; return 0x82157C08;
		/* 8221C02Ch case   14:*/		return 0x8221C030;
	}
	return 0x8221C030;
} // Block from 8221BFF4h-8221C030h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8221C030h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C030);
		  /* 8221C030h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 8221C030h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8221C030h case    0:*/		return 0x8221C034;
		  /* 8221C034h */ case    1:  		/* li R4, 1760 */
		/* 8221C034h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x6E0);
		/* 8221C034h case    1:*/		return 0x8221C038;
		  /* 8221C038h */ case    2:  		/* lwz R3, <#[R30]> */
		/* 8221C038h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8221C038h case    2:*/		return 0x8221C03C;
		  /* 8221C03Ch */ case    3:  		/* mtspr CTR, R11 */
		/* 8221C03Ch case    3:*/		regs.CTR = regs.R11;
		/* 8221C03Ch case    3:*/		return 0x8221C040;
		  /* 8221C040h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8221C040h case    4:*/		if ( 1 ) { regs.LR = 0x8221C044; return (uint32)regs.CTR; }
		/* 8221C040h case    4:*/		return 0x8221C044;
		  /* 8221C044h */ case    5:  		/* li R11, 1760 */
		/* 8221C044h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x6E0);
		/* 8221C044h case    5:*/		return 0x8221C048;
		  /* 8221C048h */ case    6:  		/* mr R31, R3 */
		/* 8221C048h case    6:*/		regs.R31 = regs.R3;
		/* 8221C048h case    6:*/		return 0x8221C04C;
		  /* 8221C04Ch */ case    7:  		/* li R9, 0 */
		/* 8221C04Ch case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8221C04Ch case    7:*/		return 0x8221C050;
		  /* 8221C050h */ case    8:  		/* addi R8, R3, 32 */
		/* 8221C050h case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R3,0x20);
		/* 8221C050h case    8:*/		return 0x8221C054;
		  /* 8221C054h */ case    9:  		/* addi R10, R3, -1 */
		/* 8221C054h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0xFFFFFFFF);
		/* 8221C054h case    9:*/		return 0x8221C058;
		  /* 8221C058h */ case   10:  		/* mtspr CTR, R11 */
		/* 8221C058h case   10:*/		regs.CTR = regs.R11;
		/* 8221C058h case   10:*/		return 0x8221C05C;
		  /* 8221C05Ch */ case   11:  		/* stbu R9, <#[R10 + 1]> */
		/* 8221C05Ch case   11:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R10 + 0x00000001) );
		regs.R10 = (uint32)(regs.R10 + 0x00000001);
		/* 8221C05Ch case   11:*/		return 0x8221C060;
		  /* 8221C060h */ case   12:  		/* bc 16, CR0_LT, -4 */
		/* 8221C060h case   12:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221C05C;  }
		/* 8221C060h case   12:*/		return 0x8221C064;
		  /* 8221C064h */ case   13:  		/* li R10, 1600 */
		/* 8221C064h case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x640);
		/* 8221C064h case   13:*/		return 0x8221C068;
		  /* 8221C068h */ case   14:  		/* addi R11, R8, -1 */
		/* 8221C068h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0xFFFFFFFF);
		/* 8221C068h case   14:*/		return 0x8221C06C;
		  /* 8221C06Ch */ case   15:  		/* li R8, 255 */
		/* 8221C06Ch case   15:*/		cpu::op::li<0>(regs,&regs.R8,0xFF);
		/* 8221C06Ch case   15:*/		return 0x8221C070;
		  /* 8221C070h */ case   16:  		/* mtspr CTR, R10 */
		/* 8221C070h case   16:*/		regs.CTR = regs.R10;
		/* 8221C070h case   16:*/		return 0x8221C074;
		  /* 8221C074h */ case   17:  		/* stbu R8, <#[R11 + 1]> */
		/* 8221C074h case   17:*/		cpu::mem::store8( regs, regs.R8, (uint32)(regs.R11 + 0x00000001) );
		regs.R11 = (uint32)(regs.R11 + 0x00000001);
		/* 8221C074h case   17:*/		return 0x8221C078;
		  /* 8221C078h */ case   18:  		/* bc 16, CR0_LT, -4 */
		/* 8221C078h case   18:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221C074;  }
		/* 8221C078h case   18:*/		return 0x8221C07C;
		  /* 8221C07Ch */ case   19:  		/* lwz R11, <#[R30]> */
		/* 8221C07Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8221C07Ch case   19:*/		return 0x8221C080;
		  /* 8221C080h */ case   20:  		/* lis R10, 0 */
		/* 8221C080h case   20:*/		cpu::op::lis<0>(regs,&regs.R10,0x0);
		/* 8221C080h case   20:*/		return 0x8221C084;
		  /* 8221C084h */ case   21:  		/* li R8, 1 */
		/* 8221C084h case   21:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8221C084h case   21:*/		return 0x8221C088;
		  /* 8221C088h */ case   22:  		/* li R7, 2 */
		/* 8221C088h case   22:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 8221C088h case   22:*/		return 0x8221C08C;
		  /* 8221C08Ch */ case   23:  		/* ori R10, R10, 65535 */
		/* 8221C08Ch case   23:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0xFFFF);
		/* 8221C08Ch case   23:*/		return 0x8221C090;
		  /* 8221C090h */ case   24:  		/* li R4, 23380 */
		/* 8221C090h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x5B54);
		/* 8221C090h case   24:*/		return 0x8221C094;
		  /* 8221C094h */ case   25:  		/* stw R11, <#[R31]> */
		/* 8221C094h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8221C094h case   25:*/		return 0x8221C098;
		  /* 8221C098h */ case   26:  		/* lwz R11, <#[R30 + 4]> */
		/* 8221C098h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8221C098h case   26:*/		return 0x8221C09C;
		  /* 8221C09Ch */ case   27:  		/* stw R11, <#[R31 + 4]> */
		/* 8221C09Ch case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8221C09Ch case   27:*/		return 0x8221C0A0;
		  /* 8221C0A0h */ case   28:  		/* lwz R11, <#[R30 + 8]> */
		/* 8221C0A0h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8221C0A0h case   28:*/		return 0x8221C0A4;
		  /* 8221C0A4h */ case   29:  		/* stw R11, <#[R31 + 8]> */
		/* 8221C0A4h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8221C0A4h case   29:*/		return 0x8221C0A8;
		  /* 8221C0A8h */ case   30:  		/* lwz R11, <#[R30 + 12]> */
		/* 8221C0A8h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8221C0A8h case   30:*/		return 0x8221C0AC;
		  /* 8221C0ACh */ case   31:  		/* stw R11, <#[R31 + 12]> */
		/* 8221C0ACh case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221C0ACh case   31:*/		return 0x8221C0B0;
		  /* 8221C0B0h */ case   32:  		/* stw R28, <#[R31 + 20]> */
		/* 8221C0B0h case   32:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000014) );
		/* 8221C0B0h case   32:*/		return 0x8221C0B4;
		  /* 8221C0B4h */ case   33:  		/* stw R26, <#[R31 + 16]> */
		/* 8221C0B4h case   33:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000010) );
		/* 8221C0B4h case   33:*/		return 0x8221C0B8;
		  /* 8221C0B8h */ case   34:  		/* stw R8, <#[R31 + 1656]> */
		/* 8221C0B8h case   34:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000678) );
		/* 8221C0B8h case   34:*/		return 0x8221C0BC;
		  /* 8221C0BCh */ case   35:  		/* stw R9, <#[R31 + 1652]> */
		/* 8221C0BCh case   35:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000674) );
		/* 8221C0BCh case   35:*/		return 0x8221C0C0;
		  /* 8221C0C0h */ case   36:  		/* stw R7, <#[R31 + 1668]> */
		/* 8221C0C0h case   36:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x00000684) );
		/* 8221C0C0h case   36:*/		return 0x8221C0C4;
		  /* 8221C0C4h */ case   37:  		/* stw R9, <#[R31 + 1692]> */
		/* 8221C0C4h case   37:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000069C) );
		/* 8221C0C4h case   37:*/		return 0x8221C0C8;
		  /* 8221C0C8h */ case   38:  		/* stw R10, <#[R31 + 1672]> */
		/* 8221C0C8h case   38:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000688) );
		/* 8221C0C8h case   38:*/		return 0x8221C0CC;
		  /* 8221C0CCh */ case   39:  		/* stw R9, <#[R31 + 1676]> */
		/* 8221C0CCh case   39:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000068C) );
		/* 8221C0CCh case   39:*/		return 0x8221C0D0;
		  /* 8221C0D0h */ case   40:  		/* lwz R3, <#[R30]> */
		/* 8221C0D0h case   40:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8221C0D0h case   40:*/		return 0x8221C0D4;
		  /* 8221C0D4h */ case   41:  		/* lwz R11, <#[R30 + 4]> */
		/* 8221C0D4h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8221C0D4h case   41:*/		return 0x8221C0D8;
		  /* 8221C0D8h */ case   42:  		/* mtspr CTR, R11 */
		/* 8221C0D8h case   42:*/		regs.CTR = regs.R11;
		/* 8221C0D8h case   42:*/		return 0x8221C0DC;
		  /* 8221C0DCh */ case   43:  		/* bcctrl 20, CR0_LT */
		/* 8221C0DCh case   43:*/		if ( 1 ) { regs.LR = 0x8221C0E0; return (uint32)regs.CTR; }
		/* 8221C0DCh case   43:*/		return 0x8221C0E0;
		  /* 8221C0E0h */ case   44:  		/* stw R3, <#[R31 + 28]> */
		/* 8221C0E0h case   44:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221C0E0h case   44:*/		return 0x8221C0E4;
		  /* 8221C0E4h */ case   45:  		/* cmplwi CR6, R27, 0 */
		/* 8221C0E4h case   45:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8221C0E4h case   45:*/		return 0x8221C0E8;
		  /* 8221C0E8h */ case   46:  		/* bc 12, CR6_EQ, 80 */
		/* 8221C0E8h case   46:*/		if ( regs.CR[6].eq ) { return 0x8221C138;  }
		/* 8221C0E8h case   46:*/		return 0x8221C0EC;
		  /* 8221C0ECh */ case   47:  		/* lwz R11, <#[R30 + 4]> */
		/* 8221C0ECh case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8221C0ECh case   47:*/		return 0x8221C0F0;
		  /* 8221C0F0h */ case   48:  		/* li R4, 12000 */
		/* 8221C0F0h case   48:*/		cpu::op::li<0>(regs,&regs.R4,0x2EE0);
		/* 8221C0F0h case   48:*/		return 0x8221C0F4;
		  /* 8221C0F4h */ case   49:  		/* lwz R3, <#[R30]> */
		/* 8221C0F4h case   49:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8221C0F4h case   49:*/		return 0x8221C0F8;
		  /* 8221C0F8h */ case   50:  		/* mtspr CTR, R11 */
		/* 8221C0F8h case   50:*/		regs.CTR = regs.R11;
		/* 8221C0F8h case   50:*/		return 0x8221C0FC;
		  /* 8221C0FCh */ case   51:  		/* bcctrl 20, CR0_LT */
		/* 8221C0FCh case   51:*/		if ( 1 ) { regs.LR = 0x8221C100; return (uint32)regs.CTR; }
		/* 8221C0FCh case   51:*/		return 0x8221C100;
		  /* 8221C100h */ case   52:  		/* mr R29, R3 */
		/* 8221C100h case   52:*/		regs.R29 = regs.R3;
		/* 8221C100h case   52:*/		return 0x8221C104;
		  /* 8221C104h */ case   53:  		/* mr R5, R3 */
		/* 8221C104h case   53:*/		regs.R5 = regs.R3;
		/* 8221C104h case   53:*/		return 0x8221C108;
		  /* 8221C108h */ case   54:  		/* mr R4, R27 */
		/* 8221C108h case   54:*/		regs.R4 = regs.R27;
		/* 8221C108h case   54:*/		return 0x8221C10C;
		  /* 8221C10Ch */ case   55:  		/* mr R3, R31 */
		/* 8221C10Ch case   55:*/		regs.R3 = regs.R31;
		/* 8221C10Ch case   55:*/		return 0x8221C110;
		  /* 8221C110h */ case   56:  		/* bl -736 */
		/* 8221C110h case   56:*/		regs.LR = 0x8221C114; return 0x8221BE30;
		/* 8221C110h case   56:*/		return 0x8221C114;
		  /* 8221C114h */ case   57:  		/* rlwinm R4, R3, 30, 2, 31 */
		/* 8221C114h case   57:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R4,regs.R3);
		/* 8221C114h case   57:*/		return 0x8221C118;
		  /* 8221C118h */ case   58:  		/* mr R5, R29 */
		/* 8221C118h case   58:*/		regs.R5 = regs.R29;
		/* 8221C118h case   58:*/		return 0x8221C11C;
		  /* 8221C11Ch */ case   59:  		/* mr R3, R26 */
		/* 8221C11Ch case   59:*/		regs.R3 = regs.R26;
		/* 8221C11Ch case   59:*/		return 0x8221C120;
		  /* 8221C120h */ case   60:  		/* bl 16664 */
		/* 8221C120h case   60:*/		regs.LR = 0x8221C124; return 0x82220238;
		/* 8221C120h case   60:*/		return 0x8221C124;
		  /* 8221C124h */ case   61:  		/* lwz R11, <#[R30 + 8]> */
		/* 8221C124h case   61:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8221C124h case   61:*/		return 0x8221C128;
		  /* 8221C128h */ case   62:  		/* mr R4, R29 */
		/* 8221C128h case   62:*/		regs.R4 = regs.R29;
		/* 8221C128h case   62:*/		return 0x8221C12C;
		  /* 8221C12Ch */ case   63:  		/* lwz R3, <#[R30]> */
		/* 8221C12Ch case   63:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8221C12Ch case   63:*/		return 0x8221C130;
		  /* 8221C130h */ case   64:  		/* mtspr CTR, R11 */
		/* 8221C130h case   64:*/		regs.CTR = regs.R11;
		/* 8221C130h case   64:*/		return 0x8221C134;
		  /* 8221C134h */ case   65:  		/* bcctrl 20, CR0_LT */
		/* 8221C134h case   65:*/		if ( 1 ) { regs.LR = 0x8221C138; return (uint32)regs.CTR; }
		/* 8221C134h case   65:*/		return 0x8221C138;
	}
	return 0x8221C138;
} // Block from 8221C030h-8221C138h (66 instructions)

//////////////////////////////////////////////////////
// Block at 8221C138h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C138( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C138) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C138);
		  /* 8221C138h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 8221C138h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8221C138h case    0:*/		return 0x8221C13C;
		  /* 8221C13Ch */ case    1:  		/* bc 12, CR6_EQ, 80 */
		/* 8221C13Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8221C18C;  }
		/* 8221C13Ch case    1:*/		return 0x8221C140;
		  /* 8221C140h */ case    2:  		/* lwz R11, <#[R30 + 4]> */
		/* 8221C140h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8221C140h case    2:*/		return 0x8221C144;
		  /* 8221C144h */ case    3:  		/* li R4, 12000 */
		/* 8221C144h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x2EE0);
		/* 8221C144h case    3:*/		return 0x8221C148;
		  /* 8221C148h */ case    4:  		/* lwz R3, <#[R30]> */
		/* 8221C148h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8221C148h case    4:*/		return 0x8221C14C;
		  /* 8221C14Ch */ case    5:  		/* mtspr CTR, R11 */
		/* 8221C14Ch case    5:*/		regs.CTR = regs.R11;
		/* 8221C14Ch case    5:*/		return 0x8221C150;
		  /* 8221C150h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 8221C150h case    6:*/		if ( 1 ) { regs.LR = 0x8221C154; return (uint32)regs.CTR; }
		/* 8221C150h case    6:*/		return 0x8221C154;
		  /* 8221C154h */ case    7:  		/* mr R29, R3 */
		/* 8221C154h case    7:*/		regs.R29 = regs.R3;
		/* 8221C154h case    7:*/		return 0x8221C158;
		  /* 8221C158h */ case    8:  		/* mr R5, R3 */
		/* 8221C158h case    8:*/		regs.R5 = regs.R3;
		/* 8221C158h case    8:*/		return 0x8221C15C;
		  /* 8221C15Ch */ case    9:  		/* mr R4, R25 */
		/* 8221C15Ch case    9:*/		regs.R4 = regs.R25;
		/* 8221C15Ch case    9:*/		return 0x8221C160;
		  /* 8221C160h */ case   10:  		/* mr R3, R31 */
		/* 8221C160h case   10:*/		regs.R3 = regs.R31;
		/* 8221C160h case   10:*/		return 0x8221C164;
		  /* 8221C164h */ case   11:  		/* bl -820 */
		/* 8221C164h case   11:*/		regs.LR = 0x8221C168; return 0x8221BE30;
		/* 8221C164h case   11:*/		return 0x8221C168;
		  /* 8221C168h */ case   12:  		/* rlwinm R4, R3, 30, 2, 31 */
		/* 8221C168h case   12:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R4,regs.R3);
		/* 8221C168h case   12:*/		return 0x8221C16C;
		  /* 8221C16Ch */ case   13:  		/* mr R5, R29 */
		/* 8221C16Ch case   13:*/		regs.R5 = regs.R29;
		/* 8221C16Ch case   13:*/		return 0x8221C170;
		  /* 8221C170h */ case   14:  		/* mr R3, R26 */
		/* 8221C170h case   14:*/		regs.R3 = regs.R26;
		/* 8221C170h case   14:*/		return 0x8221C174;
		  /* 8221C174h */ case   15:  		/* bl 16484 */
		/* 8221C174h case   15:*/		regs.LR = 0x8221C178; return 0x822201D8;
		/* 8221C174h case   15:*/		return 0x8221C178;
		  /* 8221C178h */ case   16:  		/* lwz R11, <#[R30 + 8]> */
		/* 8221C178h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8221C178h case   16:*/		return 0x8221C17C;
		  /* 8221C17Ch */ case   17:  		/* mr R4, R29 */
		/* 8221C17Ch case   17:*/		regs.R4 = regs.R29;
		/* 8221C17Ch case   17:*/		return 0x8221C180;
		  /* 8221C180h */ case   18:  		/* lwz R3, <#[R30]> */
		/* 8221C180h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8221C180h case   18:*/		return 0x8221C184;
		  /* 8221C184h */ case   19:  		/* mtspr CTR, R11 */
		/* 8221C184h case   19:*/		regs.CTR = regs.R11;
		/* 8221C184h case   19:*/		return 0x8221C188;
		  /* 8221C188h */ case   20:  		/* bcctrl 20, CR0_LT */
		/* 8221C188h case   20:*/		if ( 1 ) { regs.LR = 0x8221C18C; return (uint32)regs.CTR; }
		/* 8221C188h case   20:*/		return 0x8221C18C;
	}
	return 0x8221C18C;
} // Block from 8221C138h-8221C18Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 8221C18Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C18C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C18C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C18C);
		  /* 8221C18Ch */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 8221C18Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8221C18Ch case    0:*/		return 0x8221C190;
		  /* 8221C190h */ case    1:  		/* lwz R4, <#[R31 + 28]> */
		/* 8221C190h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221C190h case    1:*/		return 0x8221C194;
		  /* 8221C194h */ case    2:  		/* lwz R3, <#[R30]> */
		/* 8221C194h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8221C194h case    2:*/		return 0x8221C198;
		  /* 8221C198h */ case    3:  		/* mtspr CTR, R11 */
		/* 8221C198h case    3:*/		regs.CTR = regs.R11;
		/* 8221C198h case    3:*/		return 0x8221C19C;
		  /* 8221C19Ch */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8221C19Ch case    4:*/		if ( 1 ) { regs.LR = 0x8221C1A0; return (uint32)regs.CTR; }
		/* 8221C19Ch case    4:*/		return 0x8221C1A0;
		  /* 8221C1A0h */ case    5:  		/* lwz R11, <#[R30 + 8]> */
		/* 8221C1A0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8221C1A0h case    5:*/		return 0x8221C1A4;
		  /* 8221C1A4h */ case    6:  		/* mr R4, R31 */
		/* 8221C1A4h case    6:*/		regs.R4 = regs.R31;
		/* 8221C1A4h case    6:*/		return 0x8221C1A8;
		  /* 8221C1A8h */ case    7:  		/* lwz R3, <#[R30]> */
		/* 8221C1A8h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8221C1A8h case    7:*/		return 0x8221C1AC;
		  /* 8221C1ACh */ case    8:  		/* mtspr CTR, R11 */
		/* 8221C1ACh case    8:*/		regs.CTR = regs.R11;
		/* 8221C1ACh case    8:*/		return 0x8221C1B0;
		  /* 8221C1B0h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 8221C1B0h case    9:*/		if ( 1 ) { regs.LR = 0x8221C1B4; return (uint32)regs.CTR; }
		/* 8221C1B0h case    9:*/		return 0x8221C1B4;
		  /* 8221C1B4h */ case   10:  		/* li R3, 0 */
		/* 8221C1B4h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221C1B4h case   10:*/		return 0x8221C1B8;
		  /* 8221C1B8h */ case   11:  		/* addi R1, R1, 144 */
		/* 8221C1B8h case   11:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8221C1B8h case   11:*/		return 0x8221C1BC;
		  /* 8221C1BCh */ case   12:  		/* b -1617696 */
		/* 8221C1BCh case   12:*/		return 0x8209129C;
		/* 8221C1BCh case   12:*/		return 0x8221C1C0;
	}
	return 0x8221C1C0;
} // Block from 8221C18Ch-8221C1C0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8221C1C0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C1C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C1C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C1C0);
		  /* 8221C1C0h */ case    0:  		/* mfspr R12, LR */
		/* 8221C1C0h case    0:*/		regs.R12 = regs.LR;
		/* 8221C1C0h case    0:*/		return 0x8221C1C4;
		  /* 8221C1C4h */ case    1:  		/* bl -1617780 */
		/* 8221C1C4h case    1:*/		regs.LR = 0x8221C1C8; return 0x82091250;
		/* 8221C1C4h case    1:*/		return 0x8221C1C8;
		  /* 8221C1C8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8221C1C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8221C1C8h case    2:*/		return 0x8221C1CC;
		  /* 8221C1CCh */ case    3:  		/* lis R11, -32253 */
		/* 8221C1CCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8221C1CCh case    3:*/		return 0x8221C1D0;
		  /* 8221C1D0h */ case    4:  		/* lis R10, -32252 */
		/* 8221C1D0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221C1D0h case    4:*/		return 0x8221C1D4;
		  /* 8221C1D4h */ case    5:  		/* mr R30, R3 */
		/* 8221C1D4h case    5:*/		regs.R30 = regs.R3;
		/* 8221C1D4h case    5:*/		return 0x8221C1D8;
		  /* 8221C1D8h */ case    6:  		/* mr R27, R4 */
		/* 8221C1D8h case    6:*/		regs.R27 = regs.R4;
		/* 8221C1D8h case    6:*/		return 0x8221C1DC;
		  /* 8221C1DCh */ case    7:  		/* mr R28, R5 */
		/* 8221C1DCh case    7:*/		regs.R28 = regs.R5;
		/* 8221C1DCh case    7:*/		return 0x8221C1E0;
		  /* 8221C1E0h */ case    8:  		/* mr R26, R6 */
		/* 8221C1E0h case    8:*/		regs.R26 = regs.R6;
		/* 8221C1E0h case    8:*/		return 0x8221C1E4;
		  /* 8221C1E4h */ case    9:  		/* cmplwi CR6, R3, 0 */
		/* 8221C1E4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8221C1E4h case    9:*/		return 0x8221C1E8;
		  /* 8221C1E8h */ case   10:  		/* addi R31, R11, 27460 */
		/* 8221C1E8h case   10:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x6B44);
		/* 8221C1E8h case   10:*/		return 0x8221C1EC;
		  /* 8221C1ECh */ case   11:  		/* addi R29, R10, -7312 */
		/* 8221C1ECh case   11:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFE370);
		/* 8221C1ECh case   11:*/		return 0x8221C1F0;
		  /* 8221C1F0h */ case   12:  		/* bc 4, CR6_EQ, 32 */
		/* 8221C1F0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8221C210;  }
		/* 8221C1F0h case   12:*/		return 0x8221C1F4;
		  /* 8221C1F4h */ case   13:  		/* lis R11, -32252 */
		/* 8221C1F4h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221C1F4h case   13:*/		return 0x8221C1F8;
		  /* 8221C1F8h */ case   14:  		/* mr R6, R29 */
		/* 8221C1F8h case   14:*/		regs.R6 = regs.R29;
		/* 8221C1F8h case   14:*/		return 0x8221C1FC;
		  /* 8221C1FCh */ case   15:  		/* addi R5, R11, -4576 */
		/* 8221C1FCh case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFEE20);
		/* 8221C1FCh case   15:*/		return 0x8221C200;
		  /* 8221C200h */ case   16:  		/* mr R4, R31 */
		/* 8221C200h case   16:*/		regs.R4 = regs.R31;
		/* 8221C200h case   16:*/		return 0x8221C204;
		  /* 8221C204h */ case   17:  		/* li R7, 16315 */
		/* 8221C204h case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x3FBB);
		/* 8221C204h case   17:*/		return 0x8221C208;
		  /* 8221C208h */ case   18:  		/* li R3, 0 */
		/* 8221C208h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221C208h case   18:*/		return 0x8221C20C;
		  /* 8221C20Ch */ case   19:  		/* bl -804356 */
		/* 8221C20Ch case   19:*/		regs.LR = 0x8221C210; return 0x82157C08;
		/* 8221C20Ch case   19:*/		return 0x8221C210;
	}
	return 0x8221C210;
} // Block from 8221C1C0h-8221C210h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8221C210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C210);
		  /* 8221C210h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8221C210h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8221C210h case    0:*/		return 0x8221C214;
		  /* 8221C214h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8221C214h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8221C234;  }
		/* 8221C214h case    1:*/		return 0x8221C218;
		  /* 8221C218h */ case    2:  		/* lis R11, -32252 */
		/* 8221C218h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221C218h case    2:*/		return 0x8221C21C;
		  /* 8221C21Ch */ case    3:  		/* mr R6, R29 */
		/* 8221C21Ch case    3:*/		regs.R6 = regs.R29;
		/* 8221C21Ch case    3:*/		return 0x8221C220;
		  /* 8221C220h */ case    4:  		/* addi R5, R11, -18196 */
		/* 8221C220h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFB8EC);
		/* 8221C220h case    4:*/		return 0x8221C224;
		  /* 8221C224h */ case    5:  		/* mr R4, R31 */
		/* 8221C224h case    5:*/		regs.R4 = regs.R31;
		/* 8221C224h case    5:*/		return 0x8221C228;
		  /* 8221C228h */ case    6:  		/* li R7, 16316 */
		/* 8221C228h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x3FBC);
		/* 8221C228h case    6:*/		return 0x8221C22C;
		  /* 8221C22Ch */ case    7:  		/* li R3, 0 */
		/* 8221C22Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221C22Ch case    7:*/		return 0x8221C230;
		  /* 8221C230h */ case    8:  		/* bl -804392 */
		/* 8221C230h case    8:*/		regs.LR = 0x8221C234; return 0x82157C08;
		/* 8221C230h case    8:*/		return 0x8221C234;
	}
	return 0x8221C234;
} // Block from 8221C210h-8221C234h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8221C234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C234);
		  /* 8221C234h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 8221C234h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8221C234h case    0:*/		return 0x8221C238;
		  /* 8221C238h */ case    1:  		/* li R4, 1760 */
		/* 8221C238h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x6E0);
		/* 8221C238h case    1:*/		return 0x8221C23C;
		  /* 8221C23Ch */ case    2:  		/* lwz R3, <#[R30]> */
		/* 8221C23Ch case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8221C23Ch case    2:*/		return 0x8221C240;
		  /* 8221C240h */ case    3:  		/* mtspr CTR, R11 */
		/* 8221C240h case    3:*/		regs.CTR = regs.R11;
		/* 8221C240h case    3:*/		return 0x8221C244;
		  /* 8221C244h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8221C244h case    4:*/		if ( 1 ) { regs.LR = 0x8221C248; return (uint32)regs.CTR; }
		/* 8221C244h case    4:*/		return 0x8221C248;
		  /* 8221C248h */ case    5:  		/* li R11, 1760 */
		/* 8221C248h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x6E0);
		/* 8221C248h case    5:*/		return 0x8221C24C;
		  /* 8221C24Ch */ case    6:  		/* mr R31, R3 */
		/* 8221C24Ch case    6:*/		regs.R31 = regs.R3;
		/* 8221C24Ch case    6:*/		return 0x8221C250;
		  /* 8221C250h */ case    7:  		/* li R9, 0 */
		/* 8221C250h case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8221C250h case    7:*/		return 0x8221C254;
		  /* 8221C254h */ case    8:  		/* addi R8, R3, 32 */
		/* 8221C254h case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R3,0x20);
		/* 8221C254h case    8:*/		return 0x8221C258;
		  /* 8221C258h */ case    9:  		/* addi R10, R3, -1 */
		/* 8221C258h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0xFFFFFFFF);
		/* 8221C258h case    9:*/		return 0x8221C25C;
		  /* 8221C25Ch */ case   10:  		/* mtspr CTR, R11 */
		/* 8221C25Ch case   10:*/		regs.CTR = regs.R11;
		/* 8221C25Ch case   10:*/		return 0x8221C260;
		  /* 8221C260h */ case   11:  		/* stbu R9, <#[R10 + 1]> */
		/* 8221C260h case   11:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R10 + 0x00000001) );
		regs.R10 = (uint32)(regs.R10 + 0x00000001);
		/* 8221C260h case   11:*/		return 0x8221C264;
		  /* 8221C264h */ case   12:  		/* bc 16, CR0_LT, -4 */
		/* 8221C264h case   12:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221C260;  }
		/* 8221C264h case   12:*/		return 0x8221C268;
		  /* 8221C268h */ case   13:  		/* li R10, 1600 */
		/* 8221C268h case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x640);
		/* 8221C268h case   13:*/		return 0x8221C26C;
		  /* 8221C26Ch */ case   14:  		/* addi R11, R8, -1 */
		/* 8221C26Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0xFFFFFFFF);
		/* 8221C26Ch case   14:*/		return 0x8221C270;
		  /* 8221C270h */ case   15:  		/* li R8, 255 */
		/* 8221C270h case   15:*/		cpu::op::li<0>(regs,&regs.R8,0xFF);
		/* 8221C270h case   15:*/		return 0x8221C274;
		  /* 8221C274h */ case   16:  		/* mtspr CTR, R10 */
		/* 8221C274h case   16:*/		regs.CTR = regs.R10;
		/* 8221C274h case   16:*/		return 0x8221C278;
		  /* 8221C278h */ case   17:  		/* stbu R8, <#[R11 + 1]> */
		/* 8221C278h case   17:*/		cpu::mem::store8( regs, regs.R8, (uint32)(regs.R11 + 0x00000001) );
		regs.R11 = (uint32)(regs.R11 + 0x00000001);
		/* 8221C278h case   17:*/		return 0x8221C27C;
		  /* 8221C27Ch */ case   18:  		/* bc 16, CR0_LT, -4 */
		/* 8221C27Ch case   18:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221C278;  }
		/* 8221C27Ch case   18:*/		return 0x8221C280;
		  /* 8221C280h */ case   19:  		/* lwz R11, <#[R30]> */
		/* 8221C280h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8221C280h case   19:*/		return 0x8221C284;
		  /* 8221C284h */ case   20:  		/* lis R10, 0 */
		/* 8221C284h case   20:*/		cpu::op::lis<0>(regs,&regs.R10,0x0);
		/* 8221C284h case   20:*/		return 0x8221C288;
		  /* 8221C288h */ case   21:  		/* li R8, 1 */
		/* 8221C288h case   21:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8221C288h case   21:*/		return 0x8221C28C;
		  /* 8221C28Ch */ case   22:  		/* li R7, 2 */
		/* 8221C28Ch case   22:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 8221C28Ch case   22:*/		return 0x8221C290;
		  /* 8221C290h */ case   23:  		/* ori R10, R10, 65535 */
		/* 8221C290h case   23:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0xFFFF);
		/* 8221C290h case   23:*/		return 0x8221C294;
		  /* 8221C294h */ case   24:  		/* li R4, 23380 */
		/* 8221C294h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x5B54);
		/* 8221C294h case   24:*/		return 0x8221C298;
		  /* 8221C298h */ case   25:  		/* stw R11, <#[R31]> */
		/* 8221C298h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8221C298h case   25:*/		return 0x8221C29C;
		  /* 8221C29Ch */ case   26:  		/* lwz R11, <#[R30 + 4]> */
		/* 8221C29Ch case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8221C29Ch case   26:*/		return 0x8221C2A0;
		  /* 8221C2A0h */ case   27:  		/* stw R11, <#[R31 + 4]> */
		/* 8221C2A0h case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8221C2A0h case   27:*/		return 0x8221C2A4;
		  /* 8221C2A4h */ case   28:  		/* lwz R11, <#[R30 + 8]> */
		/* 8221C2A4h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8221C2A4h case   28:*/		return 0x8221C2A8;
		  /* 8221C2A8h */ case   29:  		/* stw R11, <#[R31 + 8]> */
		/* 8221C2A8h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8221C2A8h case   29:*/		return 0x8221C2AC;
		  /* 8221C2ACh */ case   30:  		/* lwz R11, <#[R30 + 12]> */
		/* 8221C2ACh case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8221C2ACh case   30:*/		return 0x8221C2B0;
		  /* 8221C2B0h */ case   31:  		/* stw R11, <#[R31 + 12]> */
		/* 8221C2B0h case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221C2B0h case   31:*/		return 0x8221C2B4;
		  /* 8221C2B4h */ case   32:  		/* stw R27, <#[R31 + 20]> */
		/* 8221C2B4h case   32:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000014) );
		/* 8221C2B4h case   32:*/		return 0x8221C2B8;
		  /* 8221C2B8h */ case   33:  		/* stw R28, <#[R31 + 16]> */
		/* 8221C2B8h case   33:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000010) );
		/* 8221C2B8h case   33:*/		return 0x8221C2BC;
		  /* 8221C2BCh */ case   34:  		/* stw R8, <#[R31 + 1656]> */
		/* 8221C2BCh case   34:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000678) );
		/* 8221C2BCh case   34:*/		return 0x8221C2C0;
		  /* 8221C2C0h */ case   35:  		/* stw R9, <#[R31 + 1652]> */
		/* 8221C2C0h case   35:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000674) );
		/* 8221C2C0h case   35:*/		return 0x8221C2C4;
		  /* 8221C2C4h */ case   36:  		/* stw R7, <#[R31 + 1668]> */
		/* 8221C2C4h case   36:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x00000684) );
		/* 8221C2C4h case   36:*/		return 0x8221C2C8;
		  /* 8221C2C8h */ case   37:  		/* stw R9, <#[R31 + 1692]> */
		/* 8221C2C8h case   37:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000069C) );
		/* 8221C2C8h case   37:*/		return 0x8221C2CC;
		  /* 8221C2CCh */ case   38:  		/* stw R10, <#[R31 + 1672]> */
		/* 8221C2CCh case   38:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000688) );
		/* 8221C2CCh case   38:*/		return 0x8221C2D0;
		  /* 8221C2D0h */ case   39:  		/* stw R9, <#[R31 + 1676]> */
		/* 8221C2D0h case   39:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000068C) );
		/* 8221C2D0h case   39:*/		return 0x8221C2D4;
		  /* 8221C2D4h */ case   40:  		/* lwz R3, <#[R30]> */
		/* 8221C2D4h case   40:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8221C2D4h case   40:*/		return 0x8221C2D8;
		  /* 8221C2D8h */ case   41:  		/* lwz R11, <#[R30 + 4]> */
		/* 8221C2D8h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8221C2D8h case   41:*/		return 0x8221C2DC;
		  /* 8221C2DCh */ case   42:  		/* mtspr CTR, R11 */
		/* 8221C2DCh case   42:*/		regs.CTR = regs.R11;
		/* 8221C2DCh case   42:*/		return 0x8221C2E0;
		  /* 8221C2E0h */ case   43:  		/* bcctrl 20, CR0_LT */
		/* 8221C2E0h case   43:*/		if ( 1 ) { regs.LR = 0x8221C2E4; return (uint32)regs.CTR; }
		/* 8221C2E0h case   43:*/		return 0x8221C2E4;
		  /* 8221C2E4h */ case   44:  		/* stw R3, <#[R31 + 28]> */
		/* 8221C2E4h case   44:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221C2E4h case   44:*/		return 0x8221C2E8;
		  /* 8221C2E8h */ case   45:  		/* lwz R3, <#[R30]> */
		/* 8221C2E8h case   45:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8221C2E8h case   45:*/		return 0x8221C2EC;
		  /* 8221C2ECh */ case   46:  		/* li R4, 12000 */
		/* 8221C2ECh case   46:*/		cpu::op::li<0>(regs,&regs.R4,0x2EE0);
		/* 8221C2ECh case   46:*/		return 0x8221C2F0;
		  /* 8221C2F0h */ case   47:  		/* lwz R11, <#[R30 + 4]> */
		/* 8221C2F0h case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8221C2F0h case   47:*/		return 0x8221C2F4;
		  /* 8221C2F4h */ case   48:  		/* mtspr CTR, R11 */
		/* 8221C2F4h case   48:*/		regs.CTR = regs.R11;
		/* 8221C2F4h case   48:*/		return 0x8221C2F8;
		  /* 8221C2F8h */ case   49:  		/* bcctrl 20, CR0_LT */
		/* 8221C2F8h case   49:*/		if ( 1 ) { regs.LR = 0x8221C2FC; return (uint32)regs.CTR; }
		/* 8221C2F8h case   49:*/		return 0x8221C2FC;
		  /* 8221C2FCh */ case   50:  		/* mr R29, R3 */
		/* 8221C2FCh case   50:*/		regs.R29 = regs.R3;
		/* 8221C2FCh case   50:*/		return 0x8221C300;
		  /* 8221C300h */ case   51:  		/* mr R5, R3 */
		/* 8221C300h case   51:*/		regs.R5 = regs.R3;
		/* 8221C300h case   51:*/		return 0x8221C304;
		  /* 8221C304h */ case   52:  		/* mr R4, R26 */
		/* 8221C304h case   52:*/		regs.R4 = regs.R26;
		/* 8221C304h case   52:*/		return 0x8221C308;
		  /* 8221C308h */ case   53:  		/* mr R3, R31 */
		/* 8221C308h case   53:*/		regs.R3 = regs.R31;
		/* 8221C308h case   53:*/		return 0x8221C30C;
		  /* 8221C30Ch */ case   54:  		/* bl -1244 */
		/* 8221C30Ch case   54:*/		regs.LR = 0x8221C310; return 0x8221BE30;
		/* 8221C30Ch case   54:*/		return 0x8221C310;
		  /* 8221C310h */ case   55:  		/* rlwinm R4, R3, 30, 2, 31 */
		/* 8221C310h case   55:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R4,regs.R3);
		/* 8221C310h case   55:*/		return 0x8221C314;
		  /* 8221C314h */ case   56:  		/* mr R5, R29 */
		/* 8221C314h case   56:*/		regs.R5 = regs.R29;
		/* 8221C314h case   56:*/		return 0x8221C318;
		  /* 8221C318h */ case   57:  		/* mr R3, R28 */
		/* 8221C318h case   57:*/		regs.R3 = regs.R28;
		/* 8221C318h case   57:*/		return 0x8221C31C;
		  /* 8221C31Ch */ case   58:  		/* bl 16156 */
		/* 8221C31Ch case   58:*/		regs.LR = 0x8221C320; return 0x82220238;
		/* 8221C31Ch case   58:*/		return 0x8221C320;
		  /* 8221C320h */ case   59:  		/* lwz R11, <#[R30 + 8]> */
		/* 8221C320h case   59:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8221C320h case   59:*/		return 0x8221C324;
		  /* 8221C324h */ case   60:  		/* mr R4, R29 */
		/* 8221C324h case   60:*/		regs.R4 = regs.R29;
		/* 8221C324h case   60:*/		return 0x8221C328;
		  /* 8221C328h */ case   61:  		/* lwz R3, <#[R30]> */
		/* 8221C328h case   61:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8221C328h case   61:*/		return 0x8221C32C;
		  /* 8221C32Ch */ case   62:  		/* mtspr CTR, R11 */
		/* 8221C32Ch case   62:*/		regs.CTR = regs.R11;
		/* 8221C32Ch case   62:*/		return 0x8221C330;
		  /* 8221C330h */ case   63:  		/* bcctrl 20, CR0_LT */
		/* 8221C330h case   63:*/		if ( 1 ) { regs.LR = 0x8221C334; return (uint32)regs.CTR; }
		/* 8221C330h case   63:*/		return 0x8221C334;
		  /* 8221C334h */ case   64:  		/* lwz R11, <#[R30 + 8]> */
		/* 8221C334h case   64:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8221C334h case   64:*/		return 0x8221C338;
		  /* 8221C338h */ case   65:  		/* lwz R4, <#[R31 + 28]> */
		/* 8221C338h case   65:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221C338h case   65:*/		return 0x8221C33C;
		  /* 8221C33Ch */ case   66:  		/* lwz R3, <#[R30]> */
		/* 8221C33Ch case   66:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8221C33Ch case   66:*/		return 0x8221C340;
		  /* 8221C340h */ case   67:  		/* mtspr CTR, R11 */
		/* 8221C340h case   67:*/		regs.CTR = regs.R11;
		/* 8221C340h case   67:*/		return 0x8221C344;
		  /* 8221C344h */ case   68:  		/* bcctrl 20, CR0_LT */
		/* 8221C344h case   68:*/		if ( 1 ) { regs.LR = 0x8221C348; return (uint32)regs.CTR; }
		/* 8221C344h case   68:*/		return 0x8221C348;
		  /* 8221C348h */ case   69:  		/* lwz R11, <#[R30 + 8]> */
		/* 8221C348h case   69:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8221C348h case   69:*/		return 0x8221C34C;
		  /* 8221C34Ch */ case   70:  		/* mr R4, R31 */
		/* 8221C34Ch case   70:*/		regs.R4 = regs.R31;
		/* 8221C34Ch case   70:*/		return 0x8221C350;
		  /* 8221C350h */ case   71:  		/* lwz R3, <#[R30]> */
		/* 8221C350h case   71:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8221C350h case   71:*/		return 0x8221C354;
		  /* 8221C354h */ case   72:  		/* mtspr CTR, R11 */
		/* 8221C354h case   72:*/		regs.CTR = regs.R11;
		/* 8221C354h case   72:*/		return 0x8221C358;
		  /* 8221C358h */ case   73:  		/* bcctrl 20, CR0_LT */
		/* 8221C358h case   73:*/		if ( 1 ) { regs.LR = 0x8221C35C; return (uint32)regs.CTR; }
		/* 8221C358h case   73:*/		return 0x8221C35C;
		  /* 8221C35Ch */ case   74:  		/* li R3, 0 */
		/* 8221C35Ch case   74:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221C35Ch case   74:*/		return 0x8221C360;
		  /* 8221C360h */ case   75:  		/* addi R1, R1, 144 */
		/* 8221C360h case   75:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8221C360h case   75:*/		return 0x8221C364;
		  /* 8221C364h */ case   76:  		/* b -1618116 */
		/* 8221C364h case   76:*/		return 0x820912A0;
		/* 8221C364h case   76:*/		return 0x8221C368;
		  /* 8221C368h */ case   77:  		/* lwz R3, <#[R3 + 1488]> */
		/* 8221C368h case   77:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x000005D0) );
		/* 8221C368h case   77:*/		return 0x8221C36C;
		  /* 8221C36Ch */ case   78:  		/* lwz R11, <#[R3]> */
		/* 8221C36Ch case   78:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8221C36Ch case   78:*/		return 0x8221C370;
		  /* 8221C370h */ case   79:  		/* lwz R11, <#[R11 + 8]> */
		/* 8221C370h case   79:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8221C370h case   79:*/		return 0x8221C374;
		  /* 8221C374h */ case   80:  		/* mtspr CTR, R11 */
		/* 8221C374h case   80:*/		regs.CTR = regs.R11;
		/* 8221C374h case   80:*/		return 0x8221C378;
		  /* 8221C378h */ case   81:  		/* bcctr 20, CR0_LT */
		/* 8221C378h case   81:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 8221C378h case   81:*/		return 0x8221C37C;
		  /* 8221C37Ch */ case   82:  		/* nop */
		/* 8221C37Ch case   82:*/		cpu::op::nop();
		/* 8221C37Ch case   82:*/		return 0x8221C380;
	}
	return 0x8221C380;
} // Block from 8221C234h-8221C380h (83 instructions)

//////////////////////////////////////////////////////
// Block at 8221C380h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C380( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C380) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C380);
		  /* 8221C380h */ case    0:  		/* mfspr R12, LR */
		/* 8221C380h case    0:*/		regs.R12 = regs.LR;
		/* 8221C380h case    0:*/		return 0x8221C384;
		  /* 8221C384h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8221C384h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221C384h case    1:*/		return 0x8221C388;
		  /* 8221C388h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8221C388h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221C388h case    2:*/		return 0x8221C38C;
		  /* 8221C38Ch */ case    3:  		/* stwu R1, <#[R1 - 112]> */
		/* 8221C38Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8221C38Ch case    3:*/		return 0x8221C390;
		  /* 8221C390h */ case    4:  		/* mr R31, R3 */
		/* 8221C390h case    4:*/		regs.R31 = regs.R3;
		/* 8221C390h case    4:*/		return 0x8221C394;
		  /* 8221C394h */ case    5:  		/* lwz R3, <#[R3 + 2736]> */
		/* 8221C394h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000AB0) );
		/* 8221C394h case    5:*/		return 0x8221C398;
		  /* 8221C398h */ case    6:  		/* bl 104736 */
		/* 8221C398h case    6:*/		regs.LR = 0x8221C39C; return 0x82235CB8;
		/* 8221C398h case    6:*/		return 0x8221C39C;
		  /* 8221C39Ch */ case    7:  		/* rlwinm R10, R3, 0, 24, 31 */
		/* 8221C39Ch case    7:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R3);
		/* 8221C39Ch case    7:*/		return 0x8221C3A0;
		  /* 8221C3A0h */ case    8:  		/* lwz R11, <#[R31 + 1488]> */
		/* 8221C3A0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000005D0) );
		/* 8221C3A0h case    8:*/		return 0x8221C3A4;
		  /* 8221C3A4h */ case    9:  		/* addi R8, R1, 84 */
		/* 8221C3A4h case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x54);
		/* 8221C3A4h case    9:*/		return 0x8221C3A8;
		  /* 8221C3A8h */ case   10:  		/* cntlzw R10, R10 */
		/* 8221C3A8h case   10:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 8221C3A8h case   10:*/		return 0x8221C3AC;
		  /* 8221C3ACh */ case   11:  		/* mr R3, R11 */
		/* 8221C3ACh case   11:*/		regs.R3 = regs.R11;
		/* 8221C3ACh case   11:*/		return 0x8221C3B0;
		  /* 8221C3B0h */ case   12:  		/* rlwinm R4, R10, 27, 31, 31 */
		/* 8221C3B0h case   12:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R4,regs.R10);
		/* 8221C3B0h case   12:*/		return 0x8221C3B4;
		  /* 8221C3B4h */ case   13:  		/* addi R7, R1, 80 */
		/* 8221C3B4h case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8221C3B4h case   13:*/		return 0x8221C3B8;
		  /* 8221C3B8h */ case   14:  		/* lwz R10, <#[R11]> */
		/* 8221C3B8h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221C3B8h case   14:*/		return 0x8221C3BC;
		  /* 8221C3BCh */ case   15:  		/* li R6, 2 */
		/* 8221C3BCh case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 8221C3BCh case   15:*/		return 0x8221C3C0;
		  /* 8221C3C0h */ case   16:  		/* li R5, 2 */
		/* 8221C3C0h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8221C3C0h case   16:*/		return 0x8221C3C4;
		  /* 8221C3C4h */ case   17:  		/* lwz R11, <#[R10 + 12]> */
		/* 8221C3C4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 8221C3C4h case   17:*/		return 0x8221C3C8;
		  /* 8221C3C8h */ case   18:  		/* mtspr CTR, R11 */
		/* 8221C3C8h case   18:*/		regs.CTR = regs.R11;
		/* 8221C3C8h case   18:*/		return 0x8221C3CC;
		  /* 8221C3CCh */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 8221C3CCh case   19:*/		if ( 1 ) { regs.LR = 0x8221C3D0; return (uint32)regs.CTR; }
		/* 8221C3CCh case   19:*/		return 0x8221C3D0;
		  /* 8221C3D0h */ case   20:  		/* lwz R3, <#[R1 + 80]> */
		/* 8221C3D0h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 8221C3D0h case   20:*/		return 0x8221C3D4;
		  /* 8221C3D4h */ case   21:  		/* addi R1, R1, 112 */
		/* 8221C3D4h case   21:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8221C3D4h case   21:*/		return 0x8221C3D8;
		  /* 8221C3D8h */ case   22:  		/* lwz R12, <#[R1 - 8]> */
		/* 8221C3D8h case   22:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221C3D8h case   22:*/		return 0x8221C3DC;
		  /* 8221C3DCh */ case   23:  		/* mtspr LR, R12 */
		/* 8221C3DCh case   23:*/		regs.LR = regs.R12;
		/* 8221C3DCh case   23:*/		return 0x8221C3E0;
		  /* 8221C3E0h */ case   24:  		/* ld R31, <#[R1 - 16]> */
		/* 8221C3E0h case   24:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221C3E0h case   24:*/		return 0x8221C3E4;
		  /* 8221C3E4h */ case   25:  		/* bclr 20, CR0_LT */
		/* 8221C3E4h case   25:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221C3E4h case   25:*/		return 0x8221C3E8;
	}
	return 0x8221C3E8;
} // Block from 8221C380h-8221C3E8h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8221C3E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C3E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C3E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C3E8);
		  /* 8221C3E8h */ case    0:  		/* mfspr R12, LR */
		/* 8221C3E8h case    0:*/		regs.R12 = regs.LR;
		/* 8221C3E8h case    0:*/		return 0x8221C3EC;
		  /* 8221C3ECh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8221C3ECh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221C3ECh case    1:*/		return 0x8221C3F0;
		  /* 8221C3F0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8221C3F0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221C3F0h case    2:*/		return 0x8221C3F4;
		  /* 8221C3F4h */ case    3:  		/* stwu R1, <#[R1 - 112]> */
		/* 8221C3F4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8221C3F4h case    3:*/		return 0x8221C3F8;
		  /* 8221C3F8h */ case    4:  		/* mr R31, R3 */
		/* 8221C3F8h case    4:*/		regs.R31 = regs.R3;
		/* 8221C3F8h case    4:*/		return 0x8221C3FC;
		  /* 8221C3FCh */ case    5:  		/* lwz R3, <#[R3 + 2736]> */
		/* 8221C3FCh case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000AB0) );
		/* 8221C3FCh case    5:*/		return 0x8221C400;
		  /* 8221C400h */ case    6:  		/* bl 104632 */
		/* 8221C400h case    6:*/		regs.LR = 0x8221C404; return 0x82235CB8;
		/* 8221C400h case    6:*/		return 0x8221C404;
		  /* 8221C404h */ case    7:  		/* rlwinm R10, R3, 0, 24, 31 */
		/* 8221C404h case    7:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R3);
		/* 8221C404h case    7:*/		return 0x8221C408;
		  /* 8221C408h */ case    8:  		/* lwz R11, <#[R31 + 1488]> */
		/* 8221C408h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000005D0) );
		/* 8221C408h case    8:*/		return 0x8221C40C;
		  /* 8221C40Ch */ case    9:  		/* addi R8, R1, 84 */
		/* 8221C40Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x54);
		/* 8221C40Ch case    9:*/		return 0x8221C410;
		  /* 8221C410h */ case   10:  		/* cntlzw R10, R10 */
		/* 8221C410h case   10:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 8221C410h case   10:*/		return 0x8221C414;
		  /* 8221C414h */ case   11:  		/* mr R3, R11 */
		/* 8221C414h case   11:*/		regs.R3 = regs.R11;
		/* 8221C414h case   11:*/		return 0x8221C418;
		  /* 8221C418h */ case   12:  		/* rlwinm R4, R10, 27, 31, 31 */
		/* 8221C418h case   12:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R4,regs.R10);
		/* 8221C418h case   12:*/		return 0x8221C41C;
		  /* 8221C41Ch */ case   13:  		/* addi R7, R1, 80 */
		/* 8221C41Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8221C41Ch case   13:*/		return 0x8221C420;
		  /* 8221C420h */ case   14:  		/* lwz R10, <#[R11]> */
		/* 8221C420h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221C420h case   14:*/		return 0x8221C424;
		  /* 8221C424h */ case   15:  		/* li R6, 0 */
		/* 8221C424h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8221C424h case   15:*/		return 0x8221C428;
		  /* 8221C428h */ case   16:  		/* li R5, 2 */
		/* 8221C428h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8221C428h case   16:*/		return 0x8221C42C;
		  /* 8221C42Ch */ case   17:  		/* lwz R11, <#[R10 + 12]> */
		/* 8221C42Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 8221C42Ch case   17:*/		return 0x8221C430;
		  /* 8221C430h */ case   18:  		/* mtspr CTR, R11 */
		/* 8221C430h case   18:*/		regs.CTR = regs.R11;
		/* 8221C430h case   18:*/		return 0x8221C434;
		  /* 8221C434h */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 8221C434h case   19:*/		if ( 1 ) { regs.LR = 0x8221C438; return (uint32)regs.CTR; }
		/* 8221C434h case   19:*/		return 0x8221C438;
		  /* 8221C438h */ case   20:  		/* lwz R3, <#[R1 + 80]> */
		/* 8221C438h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 8221C438h case   20:*/		return 0x8221C43C;
		  /* 8221C43Ch */ case   21:  		/* addi R1, R1, 112 */
		/* 8221C43Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8221C43Ch case   21:*/		return 0x8221C440;
		  /* 8221C440h */ case   22:  		/* lwz R12, <#[R1 - 8]> */
		/* 8221C440h case   22:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221C440h case   22:*/		return 0x8221C444;
		  /* 8221C444h */ case   23:  		/* mtspr LR, R12 */
		/* 8221C444h case   23:*/		regs.LR = regs.R12;
		/* 8221C444h case   23:*/		return 0x8221C448;
		  /* 8221C448h */ case   24:  		/* ld R31, <#[R1 - 16]> */
		/* 8221C448h case   24:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221C448h case   24:*/		return 0x8221C44C;
		  /* 8221C44Ch */ case   25:  		/* bclr 20, CR0_LT */
		/* 8221C44Ch case   25:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221C44Ch case   25:*/		return 0x8221C450;
	}
	return 0x8221C450;
} // Block from 8221C3E8h-8221C450h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8221C450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C450);
		  /* 8221C450h */ case    0:  		/* mfspr R12, LR */
		/* 8221C450h case    0:*/		regs.R12 = regs.LR;
		/* 8221C450h case    0:*/		return 0x8221C454;
		  /* 8221C454h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8221C454h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221C454h case    1:*/		return 0x8221C458;
		  /* 8221C458h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8221C458h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221C458h case    2:*/		return 0x8221C45C;
		  /* 8221C45Ch */ case    3:  		/* stwu R1, <#[R1 - 112]> */
		/* 8221C45Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8221C45Ch case    3:*/		return 0x8221C460;
		  /* 8221C460h */ case    4:  		/* mr R31, R3 */
		/* 8221C460h case    4:*/		regs.R31 = regs.R3;
		/* 8221C460h case    4:*/		return 0x8221C464;
		  /* 8221C464h */ case    5:  		/* lwz R3, <#[R3 + 2736]> */
		/* 8221C464h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000AB0) );
		/* 8221C464h case    5:*/		return 0x8221C468;
		  /* 8221C468h */ case    6:  		/* bl 104528 */
		/* 8221C468h case    6:*/		regs.LR = 0x8221C46C; return 0x82235CB8;
		/* 8221C468h case    6:*/		return 0x8221C46C;
		  /* 8221C46Ch */ case    7:  		/* rlwinm R10, R3, 0, 24, 31 */
		/* 8221C46Ch case    7:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R3);
		/* 8221C46Ch case    7:*/		return 0x8221C470;
		  /* 8221C470h */ case    8:  		/* lwz R11, <#[R31 + 1488]> */
		/* 8221C470h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000005D0) );
		/* 8221C470h case    8:*/		return 0x8221C474;
		  /* 8221C474h */ case    9:  		/* addi R8, R1, 84 */
		/* 8221C474h case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x54);
		/* 8221C474h case    9:*/		return 0x8221C478;
		  /* 8221C478h */ case   10:  		/* cntlzw R10, R10 */
		/* 8221C478h case   10:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 8221C478h case   10:*/		return 0x8221C47C;
		  /* 8221C47Ch */ case   11:  		/* mr R3, R11 */
		/* 8221C47Ch case   11:*/		regs.R3 = regs.R11;
		/* 8221C47Ch case   11:*/		return 0x8221C480;
		  /* 8221C480h */ case   12:  		/* rlwinm R4, R10, 27, 31, 31 */
		/* 8221C480h case   12:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R4,regs.R10);
		/* 8221C480h case   12:*/		return 0x8221C484;
		  /* 8221C484h */ case   13:  		/* addi R7, R1, 80 */
		/* 8221C484h case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8221C484h case   13:*/		return 0x8221C488;
		  /* 8221C488h */ case   14:  		/* lwz R10, <#[R11]> */
		/* 8221C488h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221C488h case   14:*/		return 0x8221C48C;
		  /* 8221C48Ch */ case   15:  		/* li R6, 1 */
		/* 8221C48Ch case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8221C48Ch case   15:*/		return 0x8221C490;
		  /* 8221C490h */ case   16:  		/* li R5, 2 */
		/* 8221C490h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8221C490h case   16:*/		return 0x8221C494;
		  /* 8221C494h */ case   17:  		/* lwz R11, <#[R10 + 12]> */
		/* 8221C494h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 8221C494h case   17:*/		return 0x8221C498;
		  /* 8221C498h */ case   18:  		/* mtspr CTR, R11 */
		/* 8221C498h case   18:*/		regs.CTR = regs.R11;
		/* 8221C498h case   18:*/		return 0x8221C49C;
		  /* 8221C49Ch */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 8221C49Ch case   19:*/		if ( 1 ) { regs.LR = 0x8221C4A0; return (uint32)regs.CTR; }
		/* 8221C49Ch case   19:*/		return 0x8221C4A0;
		  /* 8221C4A0h */ case   20:  		/* lwz R3, <#[R1 + 80]> */
		/* 8221C4A0h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 8221C4A0h case   20:*/		return 0x8221C4A4;
		  /* 8221C4A4h */ case   21:  		/* addi R1, R1, 112 */
		/* 8221C4A4h case   21:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8221C4A4h case   21:*/		return 0x8221C4A8;
		  /* 8221C4A8h */ case   22:  		/* lwz R12, <#[R1 - 8]> */
		/* 8221C4A8h case   22:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221C4A8h case   22:*/		return 0x8221C4AC;
		  /* 8221C4ACh */ case   23:  		/* mtspr LR, R12 */
		/* 8221C4ACh case   23:*/		regs.LR = regs.R12;
		/* 8221C4ACh case   23:*/		return 0x8221C4B0;
		  /* 8221C4B0h */ case   24:  		/* ld R31, <#[R1 - 16]> */
		/* 8221C4B0h case   24:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221C4B0h case   24:*/		return 0x8221C4B4;
		  /* 8221C4B4h */ case   25:  		/* bclr 20, CR0_LT */
		/* 8221C4B4h case   25:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221C4B4h case   25:*/		return 0x8221C4B8;
	}
	return 0x8221C4B8;
} // Block from 8221C450h-8221C4B8h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8221C4B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C4B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C4B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C4B8);
		  /* 8221C4B8h */ case    0:  		/* mfspr R12, LR */
		/* 8221C4B8h case    0:*/		regs.R12 = regs.LR;
		/* 8221C4B8h case    0:*/		return 0x8221C4BC;
		  /* 8221C4BCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8221C4BCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221C4BCh case    1:*/		return 0x8221C4C0;
		  /* 8221C4C0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8221C4C0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8221C4C0h case    2:*/		return 0x8221C4C4;
		  /* 8221C4C4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8221C4C4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221C4C4h case    3:*/		return 0x8221C4C8;
		  /* 8221C4C8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8221C4C8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8221C4C8h case    4:*/		return 0x8221C4CC;
		  /* 8221C4CCh */ case    5:  		/* addi R10, R4, 3 */
		/* 8221C4CCh case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R4,0x3);
		/* 8221C4CCh case    5:*/		return 0x8221C4D0;
		  /* 8221C4D0h */ case    6:  		/* lwz R11, <#[R3 + 8]> */
		/* 8221C4D0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8221C4D0h case    6:*/		return 0x8221C4D4;
		  /* 8221C4D4h */ case    7:  		/* lwz R9, <#[R3 + 16]> */
		/* 8221C4D4h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000010) );
		/* 8221C4D4h case    7:*/		return 0x8221C4D8;
		  /* 8221C4D8h */ case    8:  		/* mr R31, R3 */
		/* 8221C4D8h case    8:*/		regs.R31 = regs.R3;
		/* 8221C4D8h case    8:*/		return 0x8221C4DC;
		  /* 8221C4DCh */ case    9:  		/* rlwinm R30, R10, 0, 0, 29 */
		/* 8221C4DCh case    9:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R30,regs.R10);
		/* 8221C4DCh case    9:*/		return 0x8221C4E0;
		  /* 8221C4E0h */ case   10:  		/* add R11, R11, R30 */
		/* 8221C4E0h case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8221C4E0h case   10:*/		return 0x8221C4E4;
		  /* 8221C4E4h */ case   11:  		/* cmplw CR6, R11, R9 */
		/* 8221C4E4h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8221C4E4h case   11:*/		return 0x8221C4E8;
		  /* 8221C4E8h */ case   12:  		/* bc 4, CR6_GT, 12 */
		/* 8221C4E8h case   12:*/		if ( !regs.CR[6].gt ) { return 0x8221C4F4;  }
		/* 8221C4E8h case   12:*/		return 0x8221C4EC;
		  /* 8221C4ECh */ case   13:  		/* mr R4, R30 */
		/* 8221C4ECh case   13:*/		regs.R4 = regs.R30;
		/* 8221C4ECh case   13:*/		return 0x8221C4F0;
		  /* 8221C4F0h */ case   14:  		/* bl 132576 */
		/* 8221C4F0h case   14:*/		regs.LR = 0x8221C4F4; return 0x8223CAD0;
		/* 8221C4F0h case   14:*/		return 0x8221C4F4;
	}
	return 0x8221C4F4;
} // Block from 8221C4B8h-8221C4F4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8221C4F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C4F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C4F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C4F4);
		  /* 8221C4F4h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8221C4F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8221C4F4h case    0:*/		return 0x8221C4F8;
		  /* 8221C4F8h */ case    1:  		/* lbz R10, <#[R31 + 40]> */
		/* 8221C4F8h case    1:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 8221C4F8h case    1:*/		return 0x8221C4FC;
		  /* 8221C4FCh */ case    2:  		/* cmplwi CR0, R10, 0 */
		/* 8221C4FCh case    2:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221C4FCh case    2:*/		return 0x8221C500;
		  /* 8221C500h */ case    3:  		/* stw R11, <#[R31 + 20]> */
		/* 8221C500h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8221C500h case    3:*/		return 0x8221C504;
		  /* 8221C504h */ case    4:  		/* bc 12, CR0_EQ, 64 */
		/* 8221C504h case    4:*/		if ( regs.CR[0].eq ) { return 0x8221C544;  }
		/* 8221C504h case    4:*/		return 0x8221C508;
		  /* 8221C508h */ case    5:  		/* lwz R10, <#[R31 + 12]> */
		/* 8221C508h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221C508h case    5:*/		return 0x8221C50C;
		  /* 8221C50Ch */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 8221C50Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8221C50Ch case    6:*/		return 0x8221C510;
		  /* 8221C510h */ case    7:  		/* bc 4, CR6_LT, 52 */
		/* 8221C510h case    7:*/		if ( !regs.CR[6].lt ) { return 0x8221C544;  }
		/* 8221C510h case    7:*/		return 0x8221C514;
		  /* 8221C514h */ case    8:  		/* lwz R9, <#[R31 + 28]> */
		/* 8221C514h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221C514h case    8:*/		return 0x8221C518;
		  /* 8221C518h */ case    9:  		/* add R8, R11, R30 */
		/* 8221C518h case    9:*/		cpu::op::add<0>(regs,&regs.R8,regs.R11,regs.R30);
		/* 8221C518h case    9:*/		return 0x8221C51C;
		  /* 8221C51Ch */ case   10:  		/* addi R9, R9, 1 */
		/* 8221C51Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8221C51Ch case   10:*/		return 0x8221C520;
		  /* 8221C520h */ case   11:  		/* cmplw CR6, R8, R10 */
		/* 8221C520h case   11:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R10);
		/* 8221C520h case   11:*/		return 0x8221C524;
		  /* 8221C524h */ case   12:  		/* stw R9, <#[R31 + 28]> */
		/* 8221C524h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221C524h case   12:*/		return 0x8221C528;
		  /* 8221C528h */ case   13:  		/* bc 4, CR6_LT, 12 */
		/* 8221C528h case   13:*/		if ( !regs.CR[6].lt ) { return 0x8221C534;  }
		/* 8221C528h case   13:*/		return 0x8221C52C;
		  /* 8221C52Ch */ case   14:  		/* mr R10, R30 */
		/* 8221C52Ch case   14:*/		regs.R10 = regs.R30;
		/* 8221C52Ch case   14:*/		return 0x8221C530;
		  /* 8221C530h */ case   15:  		/* b 8 */
		/* 8221C530h case   15:*/		return 0x8221C538;
		/* 8221C530h case   15:*/		return 0x8221C534;
	}
	return 0x8221C534;
} // Block from 8221C4F4h-8221C534h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8221C534h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C534( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C534) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C534);
		  /* 8221C534h */ case    0:  		/* subf R10, R11, R10 */
		/* 8221C534h case    0:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 8221C534h case    0:*/		return 0x8221C538;
	}
	return 0x8221C538;
} // Block from 8221C534h-8221C538h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221C538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C538);
		  /* 8221C538h */ case    0:  		/* lwz R9, <#[R31 + 36]> */
		/* 8221C538h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000024) );
		/* 8221C538h case    0:*/		return 0x8221C53C;
		  /* 8221C53Ch */ case    1:  		/* add R10, R9, R10 */
		/* 8221C53Ch case    1:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8221C53Ch case    1:*/		return 0x8221C540;
		  /* 8221C540h */ case    2:  		/* stw R10, <#[R31 + 36]> */
		/* 8221C540h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000024) );
		/* 8221C540h case    2:*/		return 0x8221C544;
	}
	return 0x8221C544;
} // Block from 8221C538h-8221C544h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221C544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C544);
		  /* 8221C544h */ case    0:  		/* lwz R10, <#[R31 + 12]> */
		/* 8221C544h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221C544h case    0:*/		return 0x8221C548;
		  /* 8221C548h */ case    1:  		/* add R11, R11, R30 */
		/* 8221C548h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8221C548h case    1:*/		return 0x8221C54C;
		  /* 8221C54Ch */ case    2:  		/* stw R11, <#[R31 + 8]> */
		/* 8221C54Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8221C54Ch case    2:*/		return 0x8221C550;
		  /* 8221C550h */ case    3:  		/* cmplw CR6, R10, R11 */
		/* 8221C550h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8221C550h case    3:*/		return 0x8221C554;
		  /* 8221C554h */ case    4:  		/* bc 12, CR6_LT, 8 */
		/* 8221C554h case    4:*/		if ( regs.CR[6].lt ) { return 0x8221C55C;  }
		/* 8221C554h case    4:*/		return 0x8221C558;
		  /* 8221C558h */ case    5:  		/* mr R11, R10 */
		/* 8221C558h case    5:*/		regs.R11 = regs.R10;
		/* 8221C558h case    5:*/		return 0x8221C55C;
	}
	return 0x8221C55C;
} // Block from 8221C544h-8221C55Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221C55Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C55C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C55C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C55C);
		  /* 8221C55Ch */ case    0:  		/* lwz R3, <#[R31 + 20]> */
		/* 8221C55Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 8221C55Ch case    0:*/		return 0x8221C560;
		  /* 8221C560h */ case    1:  		/* stw R11, <#[R31 + 12]> */
		/* 8221C560h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221C560h case    1:*/		return 0x8221C564;
		  /* 8221C564h */ case    2:  		/* addi R1, R1, 112 */
		/* 8221C564h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8221C564h case    2:*/		return 0x8221C568;
		  /* 8221C568h */ case    3:  		/* lwz R12, <#[R1 - 8]> */
		/* 8221C568h case    3:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221C568h case    3:*/		return 0x8221C56C;
		  /* 8221C56Ch */ case    4:  		/* mtspr LR, R12 */
		/* 8221C56Ch case    4:*/		regs.LR = regs.R12;
		/* 8221C56Ch case    4:*/		return 0x8221C570;
		  /* 8221C570h */ case    5:  		/* ld R30, <#[R1 - 24]> */
		/* 8221C570h case    5:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8221C570h case    5:*/		return 0x8221C574;
		  /* 8221C574h */ case    6:  		/* ld R31, <#[R1 - 16]> */
		/* 8221C574h case    6:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221C574h case    6:*/		return 0x8221C578;
		  /* 8221C578h */ case    7:  		/* bclr 20, CR0_LT */
		/* 8221C578h case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221C578h case    7:*/		return 0x8221C57C;
	}
	return 0x8221C57C;
} // Block from 8221C55Ch-8221C57Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8221C57Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C57C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C57C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C57C);
		  /* 8221C57Ch */ case    0:  		/* nop */
		/* 8221C57Ch case    0:*/		cpu::op::nop();
		/* 8221C57Ch case    0:*/		return 0x8221C580;
	}
	return 0x8221C580;
} // Block from 8221C57Ch-8221C580h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221C580h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C580);
		  /* 8221C580h */ case    0:  		/* mfspr R12, LR */
		/* 8221C580h case    0:*/		regs.R12 = regs.LR;
		/* 8221C580h case    0:*/		return 0x8221C584;
		  /* 8221C584h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8221C584h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221C584h case    1:*/		return 0x8221C588;
		  /* 8221C588h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8221C588h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221C588h case    2:*/		return 0x8221C58C;
		  /* 8221C58Ch */ case    3:  		/* stwu R1, <#[R1 - 112]> */
		/* 8221C58Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8221C58Ch case    3:*/		return 0x8221C590;
		  /* 8221C590h */ case    4:  		/* mr R31, R3 */
		/* 8221C590h case    4:*/		regs.R31 = regs.R3;
		/* 8221C590h case    4:*/		return 0x8221C594;
		  /* 8221C594h */ case    5:  		/* lwz R3, <#[R3 + 2736]> */
		/* 8221C594h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000AB0) );
		/* 8221C594h case    5:*/		return 0x8221C598;
		  /* 8221C598h */ case    6:  		/* bl 104224 */
		/* 8221C598h case    6:*/		regs.LR = 0x8221C59C; return 0x82235CB8;
		/* 8221C598h case    6:*/		return 0x8221C59C;
		  /* 8221C59Ch */ case    7:  		/* rlwinm R10, R3, 0, 24, 31 */
		/* 8221C59Ch case    7:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R3);
		/* 8221C59Ch case    7:*/		return 0x8221C5A0;
		  /* 8221C5A0h */ case    8:  		/* lwz R11, <#[R31 + 1488]> */
		/* 8221C5A0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000005D0) );
		/* 8221C5A0h case    8:*/		return 0x8221C5A4;
		  /* 8221C5A4h */ case    9:  		/* addi R8, R1, 84 */
		/* 8221C5A4h case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x54);
		/* 8221C5A4h case    9:*/		return 0x8221C5A8;
		  /* 8221C5A8h */ case   10:  		/* cntlzw R10, R10 */
		/* 8221C5A8h case   10:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 8221C5A8h case   10:*/		return 0x8221C5AC;
		  /* 8221C5ACh */ case   11:  		/* mr R3, R11 */
		/* 8221C5ACh case   11:*/		regs.R3 = regs.R11;
		/* 8221C5ACh case   11:*/		return 0x8221C5B0;
		  /* 8221C5B0h */ case   12:  		/* rlwinm R4, R10, 27, 31, 31 */
		/* 8221C5B0h case   12:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R4,regs.R10);
		/* 8221C5B0h case   12:*/		return 0x8221C5B4;
		  /* 8221C5B4h */ case   13:  		/* addi R7, R1, 80 */
		/* 8221C5B4h case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8221C5B4h case   13:*/		return 0x8221C5B8;
		  /* 8221C5B8h */ case   14:  		/* lwz R10, <#[R11]> */
		/* 8221C5B8h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221C5B8h case   14:*/		return 0x8221C5BC;
		  /* 8221C5BCh */ case   15:  		/* li R6, 3 */
		/* 8221C5BCh case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 8221C5BCh case   15:*/		return 0x8221C5C0;
		  /* 8221C5C0h */ case   16:  		/* li R5, 2 */
		/* 8221C5C0h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 8221C5C0h case   16:*/		return 0x8221C5C4;
		  /* 8221C5C4h */ case   17:  		/* lwz R11, <#[R10 + 12]> */
		/* 8221C5C4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 8221C5C4h case   17:*/		return 0x8221C5C8;
		  /* 8221C5C8h */ case   18:  		/* mtspr CTR, R11 */
		/* 8221C5C8h case   18:*/		regs.CTR = regs.R11;
		/* 8221C5C8h case   18:*/		return 0x8221C5CC;
		  /* 8221C5CCh */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 8221C5CCh case   19:*/		if ( 1 ) { regs.LR = 0x8221C5D0; return (uint32)regs.CTR; }
		/* 8221C5CCh case   19:*/		return 0x8221C5D0;
		  /* 8221C5D0h */ case   20:  		/* lwz R3, <#[R1 + 80]> */
		/* 8221C5D0h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 8221C5D0h case   20:*/		return 0x8221C5D4;
		  /* 8221C5D4h */ case   21:  		/* addi R1, R1, 112 */
		/* 8221C5D4h case   21:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8221C5D4h case   21:*/		return 0x8221C5D8;
		  /* 8221C5D8h */ case   22:  		/* lwz R12, <#[R1 - 8]> */
		/* 8221C5D8h case   22:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221C5D8h case   22:*/		return 0x8221C5DC;
		  /* 8221C5DCh */ case   23:  		/* mtspr LR, R12 */
		/* 8221C5DCh case   23:*/		regs.LR = regs.R12;
		/* 8221C5DCh case   23:*/		return 0x8221C5E0;
		  /* 8221C5E0h */ case   24:  		/* ld R31, <#[R1 - 16]> */
		/* 8221C5E0h case   24:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221C5E0h case   24:*/		return 0x8221C5E4;
		  /* 8221C5E4h */ case   25:  		/* bclr 20, CR0_LT */
		/* 8221C5E4h case   25:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221C5E4h case   25:*/		return 0x8221C5E8;
	}
	return 0x8221C5E8;
} // Block from 8221C580h-8221C5E8h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8221C5E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C5E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C5E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C5E8);
		  /* 8221C5E8h */ case    0:  		/* mfspr R12, LR */
		/* 8221C5E8h case    0:*/		regs.R12 = regs.LR;
		/* 8221C5E8h case    0:*/		return 0x8221C5EC;
		  /* 8221C5ECh */ case    1:  		/* bl -1618836 */
		/* 8221C5ECh case    1:*/		regs.LR = 0x8221C5F0; return 0x82091258;
		/* 8221C5ECh case    1:*/		return 0x8221C5F0;
		  /* 8221C5F0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8221C5F0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8221C5F0h case    2:*/		return 0x8221C5F4;
		  /* 8221C5F4h */ case    3:  		/* mr R31, R3 */
		/* 8221C5F4h case    3:*/		regs.R31 = regs.R3;
		/* 8221C5F4h case    3:*/		return 0x8221C5F8;
		  /* 8221C5F8h */ case    4:  		/* lwz R3, <#[R3 + 2736]> */
		/* 8221C5F8h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000AB0) );
		/* 8221C5F8h case    4:*/		return 0x8221C5FC;
		  /* 8221C5FCh */ case    5:  		/* mr R30, R4 */
		/* 8221C5FCh case    5:*/		regs.R30 = regs.R4;
		/* 8221C5FCh case    5:*/		return 0x8221C600;
		  /* 8221C600h */ case    6:  		/* mr R29, R5 */
		/* 8221C600h case    6:*/		regs.R29 = regs.R5;
		/* 8221C600h case    6:*/		return 0x8221C604;
		  /* 8221C604h */ case    7:  		/* mr R28, R6 */
		/* 8221C604h case    7:*/		regs.R28 = regs.R6;
		/* 8221C604h case    7:*/		return 0x8221C608;
		  /* 8221C608h */ case    8:  		/* bl 104112 */
		/* 8221C608h case    8:*/		regs.LR = 0x8221C60C; return 0x82235CB8;
		/* 8221C608h case    8:*/		return 0x8221C60C;
		  /* 8221C60Ch */ case    9:  		/* lwz R11, <#[R31 + 1488]> */
		/* 8221C60Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000005D0) );
		/* 8221C60Ch case    9:*/		return 0x8221C610;
		  /* 8221C610h */ case   10:  		/* mr R5, R3 */
		/* 8221C610h case   10:*/		regs.R5 = regs.R3;
		/* 8221C610h case   10:*/		return 0x8221C614;
		  /* 8221C614h */ case   11:  		/* mr R7, R28 */
		/* 8221C614h case   11:*/		regs.R7 = regs.R28;
		/* 8221C614h case   11:*/		return 0x8221C618;
		  /* 8221C618h */ case   12:  		/* mr R3, R11 */
		/* 8221C618h case   12:*/		regs.R3 = regs.R11;
		/* 8221C618h case   12:*/		return 0x8221C61C;
		  /* 8221C61Ch */ case   13:  		/* mr R6, R29 */
		/* 8221C61Ch case   13:*/		regs.R6 = regs.R29;
		/* 8221C61Ch case   13:*/		return 0x8221C620;
		  /* 8221C620h */ case   14:  		/* mr R4, R30 */
		/* 8221C620h case   14:*/		regs.R4 = regs.R30;
		/* 8221C620h case   14:*/		return 0x8221C624;
		  /* 8221C624h */ case   15:  		/* lwz R10, <#[R11]> */
		/* 8221C624h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221C624h case   15:*/		return 0x8221C628;
		  /* 8221C628h */ case   16:  		/* lwz R11, <#[R10 + 20]> */
		/* 8221C628h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000014) );
		/* 8221C628h case   16:*/		return 0x8221C62C;
		  /* 8221C62Ch */ case   17:  		/* mtspr CTR, R11 */
		/* 8221C62Ch case   17:*/		regs.CTR = regs.R11;
		/* 8221C62Ch case   17:*/		return 0x8221C630;
		  /* 8221C630h */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 8221C630h case   18:*/		if ( 1 ) { regs.LR = 0x8221C634; return (uint32)regs.CTR; }
		/* 8221C630h case   18:*/		return 0x8221C634;
		  /* 8221C634h */ case   19:  		/* lwz R3, <#[R29]> */
		/* 8221C634h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 8221C634h case   19:*/		return 0x8221C638;
		  /* 8221C638h */ case   20:  		/* addi R1, R1, 128 */
		/* 8221C638h case   20:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8221C638h case   20:*/		return 0x8221C63C;
		  /* 8221C63Ch */ case   21:  		/* b -1618836 */
		/* 8221C63Ch case   21:*/		return 0x820912A8;
		/* 8221C63Ch case   21:*/		return 0x8221C640;
	}
	return 0x8221C640;
} // Block from 8221C5E8h-8221C640h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8221C640h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C640);
		  /* 8221C640h */ case    0:  		/* mfspr R12, LR */
		/* 8221C640h case    0:*/		regs.R12 = regs.LR;
		/* 8221C640h case    0:*/		return 0x8221C644;
		  /* 8221C644h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8221C644h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221C644h case    1:*/		return 0x8221C648;
		  /* 8221C648h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8221C648h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221C648h case    2:*/		return 0x8221C64C;
		  /* 8221C64Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8221C64Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8221C64Ch case    3:*/		return 0x8221C650;
		  /* 8221C650h */ case    4:  		/* mr R31, R3 */
		/* 8221C650h case    4:*/		regs.R31 = regs.R3;
		/* 8221C650h case    4:*/		return 0x8221C654;
		  /* 8221C654h */ case    5:  		/* mr R3, R4 */
		/* 8221C654h case    5:*/		regs.R3 = regs.R4;
		/* 8221C654h case    5:*/		return 0x8221C658;
		  /* 8221C658h */ case    6:  		/* lbz R11, <#[R31 + 40]> */
		/* 8221C658h case    6:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 8221C658h case    6:*/		return 0x8221C65C;
		  /* 8221C65Ch */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 8221C65Ch case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221C65Ch case    7:*/		return 0x8221C660;
		  /* 8221C660h */ case    8:  		/* bc 12, CR0_EQ, 72 */
		/* 8221C660h case    8:*/		if ( regs.CR[0].eq ) { return 0x8221C6A8;  }
		/* 8221C660h case    8:*/		return 0x8221C664;
		  /* 8221C664h */ case    9:  		/* lwz R11, <#[R31 + 20]> */
		/* 8221C664h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8221C664h case    9:*/		return 0x8221C668;
		  /* 8221C668h */ case   10:  		/* cmplw CR6, R4, R11 */
		/* 8221C668h case   10:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 8221C668h case   10:*/		return 0x8221C66C;
		  /* 8221C66Ch */ case   11:  		/* bc 4, CR6_EQ, 60 */
		/* 8221C66Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x8221C6A8;  }
		/* 8221C66Ch case   11:*/		return 0x8221C670;
		  /* 8221C670h */ case   12:  		/* lwz R10, <#[R31 + 8]> */
		/* 8221C670h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8221C670h case   12:*/		return 0x8221C674;
		  /* 8221C674h */ case   13:  		/* li R4, 0 */
		/* 8221C674h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8221C674h case   13:*/		return 0x8221C678;
		  /* 8221C678h */ case   14:  		/* subf R5, R11, R10 */
		/* 8221C678h case   14:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R11,regs.R10);
		/* 8221C678h case   14:*/		return 0x8221C67C;
		  /* 8221C67Ch */ case   15:  		/* bl -1618748 */
		/* 8221C67Ch case   15:*/		regs.LR = 0x8221C680; return 0x82091340;
		/* 8221C67Ch case   15:*/		return 0x8221C680;
		  /* 8221C680h */ case   16:  		/* lwz R11, <#[R31 + 24]> */
		/* 8221C680h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8221C680h case   16:*/		return 0x8221C684;
		  /* 8221C684h */ case   17:  		/* lwz R10, <#[R31 + 32]> */
		/* 8221C684h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000020) );
		/* 8221C684h case   17:*/		return 0x8221C688;
		  /* 8221C688h */ case   18:  		/* addi R11, R11, 1 */
		/* 8221C688h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8221C688h case   18:*/		return 0x8221C68C;
		  /* 8221C68Ch */ case   19:  		/* lwz R9, <#[R31 + 8]> */
		/* 8221C68Ch case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 8221C68Ch case   19:*/		return 0x8221C690;
		  /* 8221C690h */ case   20:  		/* stw R11, <#[R31 + 24]> */
		/* 8221C690h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8221C690h case   20:*/		return 0x8221C694;
		  /* 8221C694h */ case   21:  		/* lwz R11, <#[R31 + 20]> */
		/* 8221C694h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8221C694h case   21:*/		return 0x8221C698;
		  /* 8221C698h */ case   22:  		/* subf R10, R11, R10 */
		/* 8221C698h case   22:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 8221C698h case   22:*/		return 0x8221C69C;
		  /* 8221C69Ch */ case   23:  		/* add R10, R10, R9 */
		/* 8221C69Ch case   23:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8221C69Ch case   23:*/		return 0x8221C6A0;
		  /* 8221C6A0h */ case   24:  		/* stw R11, <#[R31 + 8]> */
		/* 8221C6A0h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8221C6A0h case   24:*/		return 0x8221C6A4;
		  /* 8221C6A4h */ case   25:  		/* stw R10, <#[R31 + 32]> */
		/* 8221C6A4h case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000020) );
		/* 8221C6A4h case   25:*/		return 0x8221C6A8;
	}
	return 0x8221C6A8;
} // Block from 8221C640h-8221C6A8h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8221C6A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C6A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C6A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C6A8);
		  /* 8221C6A8h */ case    0:  		/* addi R1, R1, 96 */
		/* 8221C6A8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8221C6A8h case    0:*/		return 0x8221C6AC;
		  /* 8221C6ACh */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8221C6ACh case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221C6ACh case    1:*/		return 0x8221C6B0;
		  /* 8221C6B0h */ case    2:  		/* mtspr LR, R12 */
		/* 8221C6B0h case    2:*/		regs.LR = regs.R12;
		/* 8221C6B0h case    2:*/		return 0x8221C6B4;
		  /* 8221C6B4h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 8221C6B4h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221C6B4h case    3:*/		return 0x8221C6B8;
		  /* 8221C6B8h */ case    4:  		/* bclr 20, CR0_LT */
		/* 8221C6B8h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221C6B8h case    4:*/		return 0x8221C6BC;
	}
	return 0x8221C6BC;
} // Block from 8221C6A8h-8221C6BCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221C6BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C6BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C6BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C6BC);
		  /* 8221C6BCh */ case    0:  		/* nop */
		/* 8221C6BCh case    0:*/		cpu::op::nop();
		/* 8221C6BCh case    0:*/		return 0x8221C6C0;
	}
	return 0x8221C6C0;
} // Block from 8221C6BCh-8221C6C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221C6C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C6C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C6C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C6C0);
		  /* 8221C6C0h */ case    0:  		/* mfspr R12, LR */
		/* 8221C6C0h case    0:*/		regs.R12 = regs.LR;
		/* 8221C6C0h case    0:*/		return 0x8221C6C4;
		  /* 8221C6C4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8221C6C4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221C6C4h case    1:*/		return 0x8221C6C8;
		  /* 8221C6C8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8221C6C8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8221C6C8h case    2:*/		return 0x8221C6CC;
		  /* 8221C6CCh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8221C6CCh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221C6CCh case    3:*/		return 0x8221C6D0;
		  /* 8221C6D0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8221C6D0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8221C6D0h case    4:*/		return 0x8221C6D4;
		  /* 8221C6D4h */ case    5:  		/* mr R31, R3 */
		/* 8221C6D4h case    5:*/		regs.R31 = regs.R3;
		/* 8221C6D4h case    5:*/		return 0x8221C6D8;
		  /* 8221C6D8h */ case    6:  		/* lwz R3, <#[R3 + 2736]> */
		/* 8221C6D8h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000AB0) );
		/* 8221C6D8h case    6:*/		return 0x8221C6DC;
		  /* 8221C6DCh */ case    7:  		/* mr R30, R4 */
		/* 8221C6DCh case    7:*/		regs.R30 = regs.R4;
		/* 8221C6DCh case    7:*/		return 0x8221C6E0;
		  /* 8221C6E0h */ case    8:  		/* bl 103896 */
		/* 8221C6E0h case    8:*/		regs.LR = 0x8221C6E4; return 0x82235CB8;
		/* 8221C6E0h case    8:*/		return 0x8221C6E4;
		  /* 8221C6E4h */ case    9:  		/* lwz R11, <#[R31 + 1488]> */
		/* 8221C6E4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000005D0) );
		/* 8221C6E4h case    9:*/		return 0x8221C6E8;
		  /* 8221C6E8h */ case   10:  		/* mr R5, R3 */
		/* 8221C6E8h case   10:*/		regs.R5 = regs.R3;
		/* 8221C6E8h case   10:*/		return 0x8221C6EC;
		  /* 8221C6ECh */ case   11:  		/* addi R7, R1, 84 */
		/* 8221C6ECh case   11:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x54);
		/* 8221C6ECh case   11:*/		return 0x8221C6F0;
		  /* 8221C6F0h */ case   12:  		/* mr R3, R11 */
		/* 8221C6F0h case   12:*/		regs.R3 = regs.R11;
		/* 8221C6F0h case   12:*/		return 0x8221C6F4;
		  /* 8221C6F4h */ case   13:  		/* addi R6, R1, 80 */
		/* 8221C6F4h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8221C6F4h case   13:*/		return 0x8221C6F8;
		  /* 8221C6F8h */ case   14:  		/* mr R4, R30 */
		/* 8221C6F8h case   14:*/		regs.R4 = regs.R30;
		/* 8221C6F8h case   14:*/		return 0x8221C6FC;
		  /* 8221C6FCh */ case   15:  		/* lwz R10, <#[R11]> */
		/* 8221C6FCh case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221C6FCh case   15:*/		return 0x8221C700;
		  /* 8221C700h */ case   16:  		/* lwz R11, <#[R10 + 16]> */
		/* 8221C700h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 8221C700h case   16:*/		return 0x8221C704;
		  /* 8221C704h */ case   17:  		/* mtspr CTR, R11 */
		/* 8221C704h case   17:*/		regs.CTR = regs.R11;
		/* 8221C704h case   17:*/		return 0x8221C708;
		  /* 8221C708h */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 8221C708h case   18:*/		if ( 1 ) { regs.LR = 0x8221C70C; return (uint32)regs.CTR; }
		/* 8221C708h case   18:*/		return 0x8221C70C;
		  /* 8221C70Ch */ case   19:  		/* lwz R3, <#[R1 + 80]> */
		/* 8221C70Ch case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 8221C70Ch case   19:*/		return 0x8221C710;
		  /* 8221C710h */ case   20:  		/* addi R1, R1, 112 */
		/* 8221C710h case   20:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8221C710h case   20:*/		return 0x8221C714;
		  /* 8221C714h */ case   21:  		/* lwz R12, <#[R1 - 8]> */
		/* 8221C714h case   21:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221C714h case   21:*/		return 0x8221C718;
		  /* 8221C718h */ case   22:  		/* mtspr LR, R12 */
		/* 8221C718h case   22:*/		regs.LR = regs.R12;
		/* 8221C718h case   22:*/		return 0x8221C71C;
		  /* 8221C71Ch */ case   23:  		/* ld R30, <#[R1 - 24]> */
		/* 8221C71Ch case   23:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8221C71Ch case   23:*/		return 0x8221C720;
		  /* 8221C720h */ case   24:  		/* ld R31, <#[R1 - 16]> */
		/* 8221C720h case   24:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221C720h case   24:*/		return 0x8221C724;
		  /* 8221C724h */ case   25:  		/* bclr 20, CR0_LT */
		/* 8221C724h case   25:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221C724h case   25:*/		return 0x8221C728;
	}
	return 0x8221C728;
} // Block from 8221C6C0h-8221C728h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8221C728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C728);
		  /* 8221C728h */ case    0:  		/* lwz R3, <#[R3 + 4]> */
		/* 8221C728h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 8221C728h case    0:*/		return 0x8221C72C;
		  /* 8221C72Ch */ case    1:  		/* b -779820 */
		/* 8221C72Ch case    1:*/		return 0x8215E100;
		/* 8221C72Ch case    1:*/		return 0x8221C730;
	}
	return 0x8221C730;
} // Block from 8221C728h-8221C730h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221C730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C730);
		  /* 8221C730h */ case    0:  		/* lwz R11, <#[R3 + 16]> */
		/* 8221C730h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8221C730h case    0:*/		return 0x8221C734;
		  /* 8221C734h */ case    1:  		/* lbz R11, <#[R11 + 1380]> */
		/* 8221C734h case    1:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000564) );
		/* 8221C734h case    1:*/		return 0x8221C738;
		  /* 8221C738h */ case    2:  		/* cmplwi CR0, R11, 0 */
		/* 8221C738h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221C738h case    2:*/		return 0x8221C73C;
		  /* 8221C73Ch */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 8221C73Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x8221C748;  }
		/* 8221C73Ch case    3:*/		return 0x8221C740;
		  /* 8221C740h */ case    4:  		/* lwz R3, <#[R3 + 4]> */
		/* 8221C740h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 8221C740h case    4:*/		return 0x8221C744;
		  /* 8221C744h */ case    5:  		/* b -779844 */
		/* 8221C744h case    5:*/		return 0x8215E100;
		/* 8221C744h case    5:*/		return 0x8221C748;
	}
	return 0x8221C748;
} // Block from 8221C730h-8221C748h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221C748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C748);
		  /* 8221C748h */ case    0:  		/* lwz R3, <#[R3 + 8]> */
		/* 8221C748h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000008) );
		/* 8221C748h case    0:*/		return 0x8221C74C;
		  /* 8221C74Ch */ case    1:  		/* b -779852 */
		/* 8221C74Ch case    1:*/		return 0x8215E100;
		/* 8221C74Ch case    1:*/		return 0x8221C750;
	}
	return 0x8221C750;
} // Block from 8221C748h-8221C750h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221C750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C750);
		  /* 8221C750h */ case    0:  		/* lwz R11, <#[R3 + 16]> */
		/* 8221C750h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8221C750h case    0:*/		return 0x8221C754;
		  /* 8221C754h */ case    1:  		/* lbz R11, <#[R11 + 1380]> */
		/* 8221C754h case    1:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000564) );
		/* 8221C754h case    1:*/		return 0x8221C758;
		  /* 8221C758h */ case    2:  		/* cmplwi CR0, R11, 0 */
		/* 8221C758h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221C758h case    2:*/		return 0x8221C75C;
		  /* 8221C75Ch */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 8221C75Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x8221C768;  }
		/* 8221C75Ch case    3:*/		return 0x8221C760;
		  /* 8221C760h */ case    4:  		/* lwz R3, <#[R3 + 4]> */
		/* 8221C760h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 8221C760h case    4:*/		return 0x8221C764;
		  /* 8221C764h */ case    5:  		/* b -779772 */
		/* 8221C764h case    5:*/		return 0x8215E168;
		/* 8221C764h case    5:*/		return 0x8221C768;
	}
	return 0x8221C768;
} // Block from 8221C750h-8221C768h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221C768h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C768( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C768) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C768);
		  /* 8221C768h */ case    0:  		/* lwz R3, <#[R3 + 8]> */
		/* 8221C768h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000008) );
		/* 8221C768h case    0:*/		return 0x8221C76C;
		  /* 8221C76Ch */ case    1:  		/* b -779780 */
		/* 8221C76Ch case    1:*/		return 0x8215E168;
		/* 8221C76Ch case    1:*/		return 0x8221C770;
	}
	return 0x8221C770;
} // Block from 8221C768h-8221C770h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221C770h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C770);
		  /* 8221C770h */ case    0:  		/* mfspr R12, LR */
		/* 8221C770h case    0:*/		regs.R12 = regs.LR;
		/* 8221C770h case    0:*/		return 0x8221C774;
		  /* 8221C774h */ case    1:  		/* bl -1619260 */
		/* 8221C774h case    1:*/		regs.LR = 0x8221C778; return 0x82091238;
		/* 8221C774h case    1:*/		return 0x8221C778;
		  /* 8221C778h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 8221C778h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 8221C778h case    2:*/		return 0x8221C77C;
		  /* 8221C77Ch */ case    3:  		/* lwz R11, <#[R3 + 16]> */
		/* 8221C77Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8221C77Ch case    3:*/		return 0x8221C780;
		  /* 8221C780h */ case    4:  		/* mr R24, R4 */
		/* 8221C780h case    4:*/		regs.R24 = regs.R4;
		/* 8221C780h case    4:*/		return 0x8221C784;
		  /* 8221C784h */ case    5:  		/* mr R30, R5 */
		/* 8221C784h case    5:*/		regs.R30 = regs.R5;
		/* 8221C784h case    5:*/		return 0x8221C788;
		  /* 8221C788h */ case    6:  		/* mr R23, R6 */
		/* 8221C788h case    6:*/		regs.R23 = regs.R6;
		/* 8221C788h case    6:*/		return 0x8221C78C;
		  /* 8221C78Ch */ case    7:  		/* mr R22, R7 */
		/* 8221C78Ch case    7:*/		regs.R22 = regs.R7;
		/* 8221C78Ch case    7:*/		return 0x8221C790;
		  /* 8221C790h */ case    8:  		/* mr R28, R8 */
		/* 8221C790h case    8:*/		regs.R28 = regs.R8;
		/* 8221C790h case    8:*/		return 0x8221C794;
		  /* 8221C794h */ case    9:  		/* lbz R11, <#[R11 + 1380]> */
		/* 8221C794h case    9:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000564) );
		/* 8221C794h case    9:*/		return 0x8221C798;
		  /* 8221C798h */ case   10:  		/* mr R21, R9 */
		/* 8221C798h case   10:*/		regs.R21 = regs.R9;
		/* 8221C798h case   10:*/		return 0x8221C79C;
		  /* 8221C79Ch */ case   11:  		/* mr R20, R10 */
		/* 8221C79Ch case   11:*/		regs.R20 = regs.R10;
		/* 8221C79Ch case   11:*/		return 0x8221C7A0;
		  /* 8221C7A0h */ case   12:  		/* cmplwi CR0, R11, 0 */
		/* 8221C7A0h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221C7A0h case   12:*/		return 0x8221C7A4;
		  /* 8221C7A4h */ case   13:  		/* bc 12, CR0_EQ, 12 */
		/* 8221C7A4h case   13:*/		if ( regs.CR[0].eq ) { return 0x8221C7B0;  }
		/* 8221C7A4h case   13:*/		return 0x8221C7A8;
		  /* 8221C7A8h */ case   14:  		/* lwz R25, <#[R3 + 4]> */
		/* 8221C7A8h case   14:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R3 + 0x00000004) );
		/* 8221C7A8h case   14:*/		return 0x8221C7AC;
		  /* 8221C7ACh */ case   15:  		/* b 8 */
		/* 8221C7ACh case   15:*/		return 0x8221C7B4;
		/* 8221C7ACh case   15:*/		return 0x8221C7B0;
	}
	return 0x8221C7B0;
} // Block from 8221C770h-8221C7B0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8221C7B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C7B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C7B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C7B0);
		  /* 8221C7B0h */ case    0:  		/* lwz R25, <#[R3 + 8]> */
		/* 8221C7B0h case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R3 + 0x00000008) );
		/* 8221C7B0h case    0:*/		return 0x8221C7B4;
	}
	return 0x8221C7B4;
} // Block from 8221C7B0h-8221C7B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221C7B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C7B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C7B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C7B4);
		  /* 8221C7B4h */ case    0:  		/* lis R11, -32252 */
		/* 8221C7B4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221C7B4h case    0:*/		return 0x8221C7B8;
		  /* 8221C7B8h */ case    1:  		/* rlwinm R31, R30, 3, 0, 28 */
		/* 8221C7B8h case    1:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R31,regs.R30);
		/* 8221C7B8h case    1:*/		return 0x8221C7BC;
		  /* 8221C7BCh */ case    2:  		/* addi R29, R11, -3560 */
		/* 8221C7BCh case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFF218);
		/* 8221C7BCh case    2:*/		return 0x8221C7C0;
		  /* 8221C7C0h */ case    3:  		/* lis R11, -32253 */
		/* 8221C7C0h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8221C7C0h case    3:*/		return 0x8221C7C4;
		  /* 8221C7C4h */ case    4:  		/* lis R10, -32252 */
		/* 8221C7C4h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221C7C4h case    4:*/		return 0x8221C7C8;
		  /* 8221C7C8h */ case    5:  		/* addi R27, R11, 27460 */
		/* 8221C7C8h case    5:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x6B44);
		/* 8221C7C8h case    5:*/		return 0x8221C7CC;
		  /* 8221C7CCh */ case    6:  		/* addi R26, R10, -3104 */
		/* 8221C7CCh case    6:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFF3E0);
		/* 8221C7CCh case    6:*/		return 0x8221C7D0;
		  /* 8221C7D0h */ case    7:  		/* lwzx R11, <#[R31 + R29]> */
		/* 8221C7D0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 8221C7D0h case    7:*/		return 0x8221C7D4;
		  /* 8221C7D4h */ case    8:  		/* cmpw CR6, R30, R11 */
		/* 8221C7D4h case    8:*/		cpu::op::cmpw<6>(regs,regs.R30,regs.R11);
		/* 8221C7D4h case    8:*/		return 0x8221C7D8;
		  /* 8221C7D8h */ case    9:  		/* bc 12, CR6_EQ, 32 */
		/* 8221C7D8h case    9:*/		if ( regs.CR[6].eq ) { return 0x8221C7F8;  }
		/* 8221C7D8h case    9:*/		return 0x8221C7DC;
		  /* 8221C7DCh */ case   10:  		/* lis R11, -32252 */
		/* 8221C7DCh case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221C7DCh case   10:*/		return 0x8221C7E0;
		  /* 8221C7E0h */ case   11:  		/* mr R6, R26 */
		/* 8221C7E0h case   11:*/		regs.R6 = regs.R26;
		/* 8221C7E0h case   11:*/		return 0x8221C7E4;
		  /* 8221C7E4h */ case   12:  		/* addi R5, R11, -3164 */
		/* 8221C7E4h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFF3A4);
		/* 8221C7E4h case   12:*/		return 0x8221C7E8;
		  /* 8221C7E8h */ case   13:  		/* mr R4, R27 */
		/* 8221C7E8h case   13:*/		regs.R4 = regs.R27;
		/* 8221C7E8h case   13:*/		return 0x8221C7EC;
		  /* 8221C7ECh */ case   14:  		/* li R7, 494 */
		/* 8221C7ECh case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x1EE);
		/* 8221C7ECh case   14:*/		return 0x8221C7F0;
		  /* 8221C7F0h */ case   15:  		/* li R3, 0 */
		/* 8221C7F0h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221C7F0h case   15:*/		return 0x8221C7F4;
		  /* 8221C7F4h */ case   16:  		/* bl -805868 */
		/* 8221C7F4h case   16:*/		regs.LR = 0x8221C7F8; return 0x82157C08;
		/* 8221C7F4h case   16:*/		return 0x8221C7F8;
	}
	return 0x8221C7F8;
} // Block from 8221C7B4h-8221C7F8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8221C7F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C7F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C7F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C7F8);
		  /* 8221C7F8h */ case    0:  		/* addi R11, R29, 4 */
		/* 8221C7F8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x4);
		/* 8221C7F8h case    0:*/		return 0x8221C7FC;
		  /* 8221C7FCh */ case    1:  		/* cmpwi CR6, R30, 33 */
		/* 8221C7FCh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000021);
		/* 8221C7FCh case    1:*/		return 0x8221C800;
		  /* 8221C800h */ case    2:  		/* lwzx R31, <#[R31 + R11]> */
		/* 8221C800h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 8221C800h case    2:*/		return 0x8221C804;
		  /* 8221C804h */ case    3:  		/* bc 4, CR6_EQ, 72 */
		/* 8221C804h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8221C84C;  }
		/* 8221C804h case    3:*/		return 0x8221C808;
		  /* 8221C808h */ case    4:  		/* li R11, 0 */
		/* 8221C808h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8221C808h case    4:*/		return 0x8221C80C;
		  /* 8221C80Ch */ case    5:  		/* mr R10, R28 */
		/* 8221C80Ch case    5:*/		regs.R10 = regs.R28;
		/* 8221C80Ch case    5:*/		return 0x8221C810;
		  /* 8221C810h */ case    6:  		/* lwz R9, <#[R10]> */
		/* 8221C810h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8221C810h case    6:*/		return 0x8221C814;
		  /* 8221C814h */ case    7:  		/* cmpwi CR6, R9, 21 */
		/* 8221C814h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000015);
		/* 8221C814h case    7:*/		return 0x8221C818;
		  /* 8221C818h */ case    8:  		/* bc 12, CR6_EQ, 32 */
		/* 8221C818h case    8:*/		if ( regs.CR[6].eq ) { return 0x8221C838;  }
		/* 8221C818h case    8:*/		return 0x8221C81C;
		  /* 8221C81Ch */ case    9:  		/* cmpwi CR6, R9, 22 */
		/* 8221C81Ch case    9:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000016);
		/* 8221C81Ch case    9:*/		return 0x8221C820;
		  /* 8221C820h */ case   10:  		/* bc 12, CR6_EQ, 24 */
		/* 8221C820h case   10:*/		if ( regs.CR[6].eq ) { return 0x8221C838;  }
		/* 8221C820h case   10:*/		return 0x8221C824;
		  /* 8221C824h */ case   11:  		/* addi R11, R11, 1 */
		/* 8221C824h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8221C824h case   11:*/		return 0x8221C828;
		  /* 8221C828h */ case   12:  		/* addi R10, R10, 4 */
		/* 8221C828h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8221C828h case   12:*/		return 0x8221C82C;
		  /* 8221C82Ch */ case   13:  		/* cmpwi CR6, R11, 4 */
		/* 8221C82Ch case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 8221C82Ch case   13:*/		return 0x8221C830;
		  /* 8221C830h */ case   14:  		/* bc 12, CR6_LT, -32 */
		/* 8221C830h case   14:*/		if ( regs.CR[6].lt ) { return 0x8221C810;  }
		/* 8221C830h case   14:*/		return 0x8221C834;
		  /* 8221C834h */ case   15:  		/* b 24 */
		/* 8221C834h case   15:*/		return 0x8221C84C;
		/* 8221C834h case   15:*/		return 0x8221C838;
	}
	return 0x8221C838;
} // Block from 8221C7F8h-8221C838h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8221C838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C838);
		  /* 8221C838h */ case    0:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221C838h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221C838h case    0:*/		return 0x8221C83C;
		  /* 8221C83Ch */ case    1:  		/* addi R10, R29, 4 */
		/* 8221C83Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x4);
		/* 8221C83Ch case    1:*/		return 0x8221C840;
		  /* 8221C840h */ case    2:  		/* lwzx R11, <#[R11 + R28]> */
		/* 8221C840h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8221C840h case    2:*/		return 0x8221C844;
		  /* 8221C844h */ case    3:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 8221C844h case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 8221C844h case    3:*/		return 0x8221C848;
		  /* 8221C848h */ case    4:  		/* lwzx R31, <#[R11 + R10]> */
		/* 8221C848h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8221C848h case    4:*/		return 0x8221C84C;
	}
	return 0x8221C84C;
} // Block from 8221C838h-8221C84Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221C84Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C84C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C84C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C84C);
		  /* 8221C84Ch */ case    0:  		/* cmpwi CR6, R31, 0 */
		/* 8221C84Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 8221C84Ch case    0:*/		return 0x8221C850;
	}
	return 0x8221C850;
} // Block from 8221C84Ch-8221C850h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221C850h
// Function '?TranslateShader@XGRAPHICS@@YAIPAU_XLT_CONTEXT@1@PAEPAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C850);
		  /* 8221C850h */ case    0:  		/* bc 12, CR6_GT, 32 */
		/* 8221C850h case    0:*/		if ( regs.CR[6].gt ) { return 0x8221C870;  }
		/* 8221C850h case    0:*/		return 0x8221C854;
		  /* 8221C854h */ case    1:  		/* lis R11, -32252 */
		/* 8221C854h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221C854h case    1:*/		return 0x8221C858;
		  /* 8221C858h */ case    2:  		/* mr R6, R26 */
		/* 8221C858h case    2:*/		regs.R6 = regs.R26;
		/* 8221C858h case    2:*/		return 0x8221C85C;
		  /* 8221C85Ch */ case    3:  		/* addi R5, R11, -3176 */
		/* 8221C85Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFF398);
		/* 8221C85Ch case    3:*/		return 0x8221C860;
		  /* 8221C860h */ case    4:  		/* mr R4, R27 */
		/* 8221C860h case    4:*/		regs.R4 = regs.R27;
		/* 8221C860h case    4:*/		return 0x8221C864;
		  /* 8221C864h */ case    5:  		/* li R7, 507 */
		/* 8221C864h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x1FB);
		/* 8221C864h case    5:*/		return 0x8221C868;
		  /* 8221C868h */ case    6:  		/* li R3, 0 */
		/* 8221C868h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221C868h case    6:*/		return 0x8221C86C;
		  /* 8221C86Ch */ case    7:  		/* bl -805988 */
		/* 8221C86Ch case    7:*/		regs.LR = 0x8221C870; return 0x82157C08;
		/* 8221C86Ch case    7:*/		return 0x8221C870;
	}
	return 0x8221C870;
} // Block from 8221C850h-8221C870h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8221C870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C870);
		  /* 8221C870h */ case    0:  		/* cntlzw R11, R22 */
		/* 8221C870h case    0:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R22);
		/* 8221C870h case    0:*/		return 0x8221C874;
		  /* 8221C874h */ case    1:  		/* stw R20, <#[R1 + 92]> */
		/* 8221C874h case    1:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x0000005C) );
		/* 8221C874h case    1:*/		return 0x8221C878;
		  /* 8221C878h */ case    2:  		/* lis R7, 257 */
		/* 8221C878h case    2:*/		cpu::op::lis<0>(regs,&regs.R7,0x101);
		/* 8221C878h case    2:*/		return 0x8221C87C;
		  /* 8221C87Ch */ case    3:  		/* stw R21, <#[R1 + 84]> */
		/* 8221C87Ch case    3:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000054) );
		/* 8221C87Ch case    3:*/		return 0x8221C880;
		  /* 8221C880h */ case    4:  		/* rlwinm R8, R11, 27, 31, 31 */
		/* 8221C880h case    4:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R8,regs.R11);
		/* 8221C880h case    4:*/		return 0x8221C884;
		  /* 8221C884h */ case    5:  		/* ori R7, R7, 257 */
		/* 8221C884h case    5:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R7,0x101);
		/* 8221C884h case    5:*/		return 0x8221C888;
		  /* 8221C888h */ case    6:  		/* mr R10, R28 */
		/* 8221C888h case    6:*/		regs.R10 = regs.R28;
		/* 8221C888h case    6:*/		return 0x8221C88C;
		  /* 8221C88Ch */ case    7:  		/* mr R9, R30 */
		/* 8221C88Ch case    7:*/		regs.R9 = regs.R30;
		/* 8221C88Ch case    7:*/		return 0x8221C890;
		  /* 8221C890h */ case    8:  		/* mr R6, R23 */
		/* 8221C890h case    8:*/		regs.R6 = regs.R23;
		/* 8221C890h case    8:*/		return 0x8221C894;
		  /* 8221C894h */ case    9:  		/* mr R5, R31 */
		/* 8221C894h case    9:*/		regs.R5 = regs.R31;
		/* 8221C894h case    9:*/		return 0x8221C898;
		  /* 8221C898h */ case   10:  		/* mr R4, R24 */
		/* 8221C898h case   10:*/		regs.R4 = regs.R24;
		/* 8221C898h case   10:*/		return 0x8221C89C;
		  /* 8221C89Ch */ case   11:  		/* mr R3, R25 */
		/* 8221C89Ch case   11:*/		regs.R3 = regs.R25;
		/* 8221C89Ch case   11:*/		return 0x8221C8A0;
		  /* 8221C8A0h */ case   12:  		/* bl -779672 */
		/* 8221C8A0h case   12:*/		regs.LR = 0x8221C8A4; return 0x8215E308;
		/* 8221C8A0h case   12:*/		return 0x8221C8A4;
		  /* 8221C8A4h */ case   13:  		/* addi R1, R1, 208 */
		/* 8221C8A4h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8221C8A4h case   13:*/		return 0x8221C8A8;
		  /* 8221C8A8h */ case   14:  		/* b -1619488 */
		/* 8221C8A8h case   14:*/		return 0x82091288;
		/* 8221C8A8h case   14:*/		return 0x8221C8AC;
		  /* 8221C8ACh */ case   15:  		/* nop */
		/* 8221C8ACh case   15:*/		cpu::op::nop();
		/* 8221C8ACh case   15:*/		return 0x8221C8B0;
	}
	return 0x8221C8B0;
} // Block from 8221C870h-8221C8B0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8221C8B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C8B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C8B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C8B0);
		  /* 8221C8B0h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 8221C8B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8221C8B0h case    0:*/		return 0x8221C8B4;
		  /* 8221C8B4h */ case    1:  		/* rlwinm R10, R5, 0, 24, 31 */
		/* 8221C8B4h case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R5);
		/* 8221C8B4h case    1:*/		return 0x8221C8B8;
		  /* 8221C8B8h */ case    2:  		/* mr R8, R7 */
		/* 8221C8B8h case    2:*/		regs.R8 = regs.R7;
		/* 8221C8B8h case    2:*/		return 0x8221C8BC;
		  /* 8221C8BCh */ case    3:  		/* cntlzw R10, R10 */
		/* 8221C8BCh case    3:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 8221C8BCh case    3:*/		return 0x8221C8C0;
		  /* 8221C8C0h */ case    4:  		/* mr R7, R6 */
		/* 8221C8C0h case    4:*/		regs.R7 = regs.R6;
		/* 8221C8C0h case    4:*/		return 0x8221C8C4;
		  /* 8221C8C4h */ case    5:  		/* rlwinm R10, R10, 27, 31, 31 */
		/* 8221C8C4h case    5:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R10,regs.R10);
		/* 8221C8C4h case    5:*/		return 0x8221C8C8;
		  /* 8221C8C8h */ case    6:  		/* lwz R11, <#[R11 + 12]> */
		/* 8221C8C8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8221C8C8h case    6:*/		return 0x8221C8CC;
		  /* 8221C8CCh */ case    7:  		/* mr R6, R4 */
		/* 8221C8CCh case    7:*/		regs.R6 = regs.R4;
		/* 8221C8CCh case    7:*/		return 0x8221C8D0;
		  /* 8221C8D0h */ case    8:  		/* li R5, 0 */
		/* 8221C8D0h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8221C8D0h case    8:*/		return 0x8221C8D4;
		  /* 8221C8D4h */ case    9:  		/* mr R4, R10 */
		/* 8221C8D4h case    9:*/		regs.R4 = regs.R10;
		/* 8221C8D4h case    9:*/		return 0x8221C8D8;
		  /* 8221C8D8h */ case   10:  		/* mtspr CTR, R11 */
		/* 8221C8D8h case   10:*/		regs.CTR = regs.R11;
		/* 8221C8D8h case   10:*/		return 0x8221C8DC;
		  /* 8221C8DCh */ case   11:  		/* bcctr 20, CR0_LT */
		/* 8221C8DCh case   11:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 8221C8DCh case   11:*/		return 0x8221C8E0;
	}
	return 0x8221C8E0;
} // Block from 8221C8B0h-8221C8E0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8221C8E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C8E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C8E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C8E0);
		  /* 8221C8E0h */ case    0:  		/* rlwinm R10, R5, 0, 24, 31 */
		/* 8221C8E0h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R5);
		/* 8221C8E0h case    0:*/		return 0x8221C8E4;
		  /* 8221C8E4h */ case    1:  		/* mr R11, R4 */
		/* 8221C8E4h case    1:*/		regs.R11 = regs.R4;
		/* 8221C8E4h case    1:*/		return 0x8221C8E8;
		  /* 8221C8E8h */ case    2:  		/* cntlzw R10, R10 */
		/* 8221C8E8h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 8221C8E8h case    2:*/		return 0x8221C8EC;
		  /* 8221C8ECh */ case    3:  		/* mr R8, R7 */
		/* 8221C8ECh case    3:*/		regs.R8 = regs.R7;
		/* 8221C8ECh case    3:*/		return 0x8221C8F0;
		  /* 8221C8F0h */ case    4:  		/* cmpwi CR6, R4, -1 */
		/* 8221C8F0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R4,0xFFFFFFFF);
		/* 8221C8F0h case    4:*/		return 0x8221C8F4;
		  /* 8221C8F4h */ case    5:  		/* rlwinm R4, R10, 27, 31, 31 */
		/* 8221C8F4h case    5:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R4,regs.R10);
		/* 8221C8F4h case    5:*/		return 0x8221C8F8;
		  /* 8221C8F8h */ case    6:  		/* mr R7, R6 */
		/* 8221C8F8h case    6:*/		regs.R7 = regs.R6;
		/* 8221C8F8h case    6:*/		return 0x8221C8FC;
		  /* 8221C8FCh */ case    7:  		/* bc 4, CR6_EQ, 28 */
		/* 8221C8FCh case    7:*/		if ( !regs.CR[6].eq ) { return 0x8221C918;  }
		/* 8221C8FCh case    7:*/		return 0x8221C900;
		  /* 8221C900h */ case    8:  		/* lwz R11, <#[R3]> */
		/* 8221C900h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8221C900h case    8:*/		return 0x8221C904;
		  /* 8221C904h */ case    9:  		/* li R6, 1 */
		/* 8221C904h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8221C904h case    9:*/		return 0x8221C908;
		  /* 8221C908h */ case   10:  		/* li R5, 3 */
		/* 8221C908h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 8221C908h case   10:*/		return 0x8221C90C;
		  /* 8221C90Ch */ case   11:  		/* lwz R11, <#[R11 + 12]> */
		/* 8221C90Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8221C90Ch case   11:*/		return 0x8221C910;
		  /* 8221C910h */ case   12:  		/* mtspr CTR, R11 */
		/* 8221C910h case   12:*/		regs.CTR = regs.R11;
		/* 8221C910h case   12:*/		return 0x8221C914;
		  /* 8221C914h */ case   13:  		/* bcctr 20, CR0_LT */
		/* 8221C914h case   13:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 8221C914h case   13:*/		return 0x8221C918;
	}
	return 0x8221C918;
} // Block from 8221C8E0h-8221C918h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8221C918h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C918);
		  /* 8221C918h */ case    0:  		/* lwz R10, <#[R3]> */
		/* 8221C918h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8221C918h case    0:*/		return 0x8221C91C;
		  /* 8221C91Ch */ case    1:  		/* mr R6, R11 */
		/* 8221C91Ch case    1:*/		regs.R6 = regs.R11;
		/* 8221C91Ch case    1:*/		return 0x8221C920;
		  /* 8221C920h */ case    2:  		/* li R5, 1 */
		/* 8221C920h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8221C920h case    2:*/		return 0x8221C924;
		  /* 8221C924h */ case    3:  		/* lwz R11, <#[R10 + 12]> */
		/* 8221C924h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 8221C924h case    3:*/		return 0x8221C928;
		  /* 8221C928h */ case    4:  		/* mtspr CTR, R11 */
		/* 8221C928h case    4:*/		regs.CTR = regs.R11;
		/* 8221C928h case    4:*/		return 0x8221C92C;
		  /* 8221C92Ch */ case    5:  		/* bcctr 20, CR0_LT */
		/* 8221C92Ch case    5:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 8221C92Ch case    5:*/		return 0x8221C930;
	}
	return 0x8221C930;
} // Block from 8221C918h-8221C930h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221C930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C930);
		  /* 8221C930h */ case    0:  		/* lwz R11, <#[R3 + 16]> */
		/* 8221C930h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8221C930h case    0:*/		return 0x8221C934;
		  /* 8221C934h */ case    1:  		/* lbz R11, <#[R11 + 1380]> */
		/* 8221C934h case    1:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000564) );
		/* 8221C934h case    1:*/		return 0x8221C938;
		  /* 8221C938h */ case    2:  		/* cmplwi CR0, R11, 0 */
		/* 8221C938h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221C938h case    2:*/		return 0x8221C93C;
		  /* 8221C93Ch */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 8221C93Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x8221C948;  }
		/* 8221C93Ch case    3:*/		return 0x8221C940;
		  /* 8221C940h */ case    4:  		/* lwz R3, <#[R3 + 4]> */
		/* 8221C940h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 8221C940h case    4:*/		return 0x8221C944;
		  /* 8221C944h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8221C944h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221C944h case    5:*/		return 0x8221C948;
	}
	return 0x8221C948;
} // Block from 8221C930h-8221C948h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221C948h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C948);
		  /* 8221C948h */ case    0:  		/* lwz R3, <#[R3 + 8]> */
		/* 8221C948h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000008) );
		/* 8221C948h case    0:*/		return 0x8221C94C;
		  /* 8221C94Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 8221C94Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221C94Ch case    1:*/		return 0x8221C950;
	}
	return 0x8221C950;
} // Block from 8221C948h-8221C950h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221C950h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C950);
		  /* 8221C950h */ case    0:  		/* lwz R3, <#[R3 + 4]> */
		/* 8221C950h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 8221C950h case    0:*/		return 0x8221C954;
		  /* 8221C954h */ case    1:  		/* b -780268 */
		/* 8221C954h case    1:*/		return 0x8215E168;
		/* 8221C954h case    1:*/		return 0x8221C958;
	}
	return 0x8221C958;
} // Block from 8221C950h-8221C958h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221C958h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C958);
		  /* 8221C958h */ case    0:  		/* mfspr R12, LR */
		/* 8221C958h case    0:*/		regs.R12 = regs.LR;
		/* 8221C958h case    0:*/		return 0x8221C95C;
		  /* 8221C95Ch */ case    1:  		/* bl -1619748 */
		/* 8221C95Ch case    1:*/		regs.LR = 0x8221C960; return 0x82091238;
		/* 8221C95Ch case    1:*/		return 0x8221C960;
		  /* 8221C960h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 8221C960h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 8221C960h case    2:*/		return 0x8221C964;
		  /* 8221C964h */ case    3:  		/* lis R11, -32252 */
		/* 8221C964h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221C964h case    3:*/		return 0x8221C968;
	}
	return 0x8221C968;
} // Block from 8221C958h-8221C968h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221C968h
// Function '?XLT_TranslateProgram@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_XLT_STATE_TRANSLATOR@1@PAU_ABSTRACT_STATE@1@PAU_CP_COMPILED_PROGRAM@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C968);
		  /* 8221C968h */ case    0:  		/* rlwinm R30, R5, 3, 0, 28 */
		/* 8221C968h case    0:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R30,regs.R5);
		/* 8221C968h case    0:*/		return 0x8221C96C;
		  /* 8221C96Ch */ case    1:  		/* addi R29, R11, -3560 */
		/* 8221C96Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFF218);
		/* 8221C96Ch case    1:*/		return 0x8221C970;
		  /* 8221C970h */ case    2:  		/* lis R11, -32253 */
		/* 8221C970h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8221C970h case    2:*/		return 0x8221C974;
		  /* 8221C974h */ case    3:  		/* mr R22, R10 */
		/* 8221C974h case    3:*/		regs.R22 = regs.R10;
		/* 8221C974h case    3:*/		return 0x8221C978;
		  /* 8221C978h */ case    4:  		/* addi R21, R11, 27460 */
		/* 8221C978h case    4:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R11,0x6B44);
		/* 8221C978h case    4:*/		return 0x8221C97C;
		  /* 8221C97Ch */ case    5:  		/* lis R10, -32252 */
		/* 8221C97Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221C97Ch case    5:*/		return 0x8221C980;
		  /* 8221C980h */ case    6:  		/* lwzx R11, <#[R30 + R29]> */
		/* 8221C980h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R29 + 0x00000000) );
		/* 8221C980h case    6:*/		return 0x8221C984;
		  /* 8221C984h */ case    7:  		/* mr R27, R3 */
		/* 8221C984h case    7:*/		regs.R27 = regs.R3;
		/* 8221C984h case    7:*/		return 0x8221C988;
		  /* 8221C988h */ case    8:  		/* mr R26, R4 */
		/* 8221C988h case    8:*/		regs.R26 = regs.R4;
		/* 8221C988h case    8:*/		return 0x8221C98C;
		  /* 8221C98Ch */ case    9:  		/* mr R31, R5 */
		/* 8221C98Ch case    9:*/		regs.R31 = regs.R5;
		/* 8221C98Ch case    9:*/		return 0x8221C990;
		  /* 8221C990h */ case   10:  		/* mr R25, R6 */
		/* 8221C990h case   10:*/		regs.R25 = regs.R6;
		/* 8221C990h case   10:*/		return 0x8221C994;
		  /* 8221C994h */ case   11:  		/* mr R24, R7 */
		/* 8221C994h case   11:*/		regs.R24 = regs.R7;
		/* 8221C994h case   11:*/		return 0x8221C998;
		  /* 8221C998h */ case   12:  		/* mr R28, R8 */
		/* 8221C998h case   12:*/		regs.R28 = regs.R8;
		/* 8221C998h case   12:*/		return 0x8221C99C;
		  /* 8221C99Ch */ case   13:  		/* mr R23, R9 */
		/* 8221C99Ch case   13:*/		regs.R23 = regs.R9;
		/* 8221C99Ch case   13:*/		return 0x8221C9A0;
		  /* 8221C9A0h */ case   14:  		/* addi R20, R10, -3104 */
		/* 8221C9A0h case   14:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R10,0xFFFFF3E0);
		/* 8221C9A0h case   14:*/		return 0x8221C9A4;
		  /* 8221C9A4h */ case   15:  		/* cmpw CR6, R5, R11 */
		/* 8221C9A4h case   15:*/		cpu::op::cmpw<6>(regs,regs.R5,regs.R11);
		/* 8221C9A4h case   15:*/		return 0x8221C9A8;
		  /* 8221C9A8h */ case   16:  		/* bc 12, CR6_EQ, 32 */
		/* 8221C9A8h case   16:*/		if ( regs.CR[6].eq ) { return 0x8221C9C8;  }
		/* 8221C9A8h case   16:*/		return 0x8221C9AC;
		  /* 8221C9ACh */ case   17:  		/* lis R11, -32252 */
		/* 8221C9ACh case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221C9ACh case   17:*/		return 0x8221C9B0;
		  /* 8221C9B0h */ case   18:  		/* mr R6, R20 */
		/* 8221C9B0h case   18:*/		regs.R6 = regs.R20;
		/* 8221C9B0h case   18:*/		return 0x8221C9B4;
		  /* 8221C9B4h */ case   19:  		/* addi R5, R11, -3164 */
		/* 8221C9B4h case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFF3A4);
		/* 8221C9B4h case   19:*/		return 0x8221C9B8;
		  /* 8221C9B8h */ case   20:  		/* mr R4, R21 */
		/* 8221C9B8h case   20:*/		regs.R4 = regs.R21;
		/* 8221C9B8h case   20:*/		return 0x8221C9BC;
		  /* 8221C9BCh */ case   21:  		/* li R7, 680 */
		/* 8221C9BCh case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x2A8);
		/* 8221C9BCh case   21:*/		return 0x8221C9C0;
		  /* 8221C9C0h */ case   22:  		/* li R3, 0 */
		/* 8221C9C0h case   22:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221C9C0h case   22:*/		return 0x8221C9C4;
		  /* 8221C9C4h */ case   23:  		/* bl -806332 */
		/* 8221C9C4h case   23:*/		regs.LR = 0x8221C9C8; return 0x82157C08;
		/* 8221C9C4h case   23:*/		return 0x8221C9C8;
	}
	return 0x8221C9C8;
} // Block from 8221C968h-8221C9C8h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8221C9C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221C9C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221C9C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221C9C8);
		  /* 8221C9C8h */ case    0:  		/* addi R11, R29, 4 */
		/* 8221C9C8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x4);
		/* 8221C9C8h case    0:*/		return 0x8221C9CC;
		  /* 8221C9CCh */ case    1:  		/* cmpwi CR6, R31, 33 */
		/* 8221C9CCh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000021);
		/* 8221C9CCh case    1:*/		return 0x8221C9D0;
		  /* 8221C9D0h */ case    2:  		/* lwzx R30, <#[R30 + R11]> */
		/* 8221C9D0h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 8221C9D0h case    2:*/		return 0x8221C9D4;
		  /* 8221C9D4h */ case    3:  		/* bc 4, CR6_EQ, 72 */
		/* 8221C9D4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8221CA1C;  }
		/* 8221C9D4h case    3:*/		return 0x8221C9D8;
		  /* 8221C9D8h */ case    4:  		/* li R11, 0 */
		/* 8221C9D8h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8221C9D8h case    4:*/		return 0x8221C9DC;
		  /* 8221C9DCh */ case    5:  		/* mr R10, R28 */
		/* 8221C9DCh case    5:*/		regs.R10 = regs.R28;
		/* 8221C9DCh case    5:*/		return 0x8221C9E0;
		  /* 8221C9E0h */ case    6:  		/* lwz R9, <#[R10]> */
		/* 8221C9E0h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8221C9E0h case    6:*/		return 0x8221C9E4;
		  /* 8221C9E4h */ case    7:  		/* cmpwi CR6, R9, 21 */
		/* 8221C9E4h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000015);
		/* 8221C9E4h case    7:*/		return 0x8221C9E8;
		  /* 8221C9E8h */ case    8:  		/* bc 12, CR6_EQ, 32 */
		/* 8221C9E8h case    8:*/		if ( regs.CR[6].eq ) { return 0x8221CA08;  }
		/* 8221C9E8h case    8:*/		return 0x8221C9EC;
		  /* 8221C9ECh */ case    9:  		/* cmpwi CR6, R9, 22 */
		/* 8221C9ECh case    9:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000016);
		/* 8221C9ECh case    9:*/		return 0x8221C9F0;
		  /* 8221C9F0h */ case   10:  		/* bc 12, CR6_EQ, 24 */
		/* 8221C9F0h case   10:*/		if ( regs.CR[6].eq ) { return 0x8221CA08;  }
		/* 8221C9F0h case   10:*/		return 0x8221C9F4;
		  /* 8221C9F4h */ case   11:  		/* addi R11, R11, 1 */
		/* 8221C9F4h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8221C9F4h case   11:*/		return 0x8221C9F8;
		  /* 8221C9F8h */ case   12:  		/* addi R10, R10, 4 */
		/* 8221C9F8h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8221C9F8h case   12:*/		return 0x8221C9FC;
		  /* 8221C9FCh */ case   13:  		/* cmpwi CR6, R11, 4 */
		/* 8221C9FCh case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 8221C9FCh case   13:*/		return 0x8221CA00;
		  /* 8221CA00h */ case   14:  		/* bc 12, CR6_LT, -32 */
		/* 8221CA00h case   14:*/		if ( regs.CR[6].lt ) { return 0x8221C9E0;  }
		/* 8221CA00h case   14:*/		return 0x8221CA04;
		  /* 8221CA04h */ case   15:  		/* b 24 */
		/* 8221CA04h case   15:*/		return 0x8221CA1C;
		/* 8221CA04h case   15:*/		return 0x8221CA08;
	}
	return 0x8221CA08;
} // Block from 8221C9C8h-8221CA08h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8221CA08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CA08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CA08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CA08);
		  /* 8221CA08h */ case    0:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221CA08h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221CA08h case    0:*/		return 0x8221CA0C;
		  /* 8221CA0Ch */ case    1:  		/* addi R10, R29, 4 */
		/* 8221CA0Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x4);
		/* 8221CA0Ch case    1:*/		return 0x8221CA10;
		  /* 8221CA10h */ case    2:  		/* lwzx R11, <#[R11 + R28]> */
		/* 8221CA10h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8221CA10h case    2:*/		return 0x8221CA14;
		  /* 8221CA14h */ case    3:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 8221CA14h case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 8221CA14h case    3:*/		return 0x8221CA18;
		  /* 8221CA18h */ case    4:  		/* lwzx R30, <#[R11 + R10]> */
		/* 8221CA18h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8221CA18h case    4:*/		return 0x8221CA1C;
	}
	return 0x8221CA1C;
} // Block from 8221CA08h-8221CA1Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221CA1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CA1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CA1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CA1C);
		  /* 8221CA1Ch */ case    0:  		/* cmpwi CR6, R30, 0 */
		/* 8221CA1Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 8221CA1Ch case    0:*/		return 0x8221CA20;
		  /* 8221CA20h */ case    1:  		/* bc 12, CR6_GT, 32 */
		/* 8221CA20h case    1:*/		if ( regs.CR[6].gt ) { return 0x8221CA40;  }
		/* 8221CA20h case    1:*/		return 0x8221CA24;
		  /* 8221CA24h */ case    2:  		/* lis R11, -32252 */
		/* 8221CA24h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221CA24h case    2:*/		return 0x8221CA28;
		  /* 8221CA28h */ case    3:  		/* mr R6, R20 */
		/* 8221CA28h case    3:*/		regs.R6 = regs.R20;
		/* 8221CA28h case    3:*/		return 0x8221CA2C;
		  /* 8221CA2Ch */ case    4:  		/* addi R5, R11, -3176 */
		/* 8221CA2Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFF398);
		/* 8221CA2Ch case    4:*/		return 0x8221CA30;
		  /* 8221CA30h */ case    5:  		/* mr R4, R21 */
		/* 8221CA30h case    5:*/		regs.R4 = regs.R21;
		/* 8221CA30h case    5:*/		return 0x8221CA34;
		  /* 8221CA34h */ case    6:  		/* li R7, 694 */
		/* 8221CA34h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x2B6);
		/* 8221CA34h case    6:*/		return 0x8221CA38;
		  /* 8221CA38h */ case    7:  		/* li R3, 0 */
		/* 8221CA38h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221CA38h case    7:*/		return 0x8221CA3C;
		  /* 8221CA3Ch */ case    8:  		/* bl -806452 */
		/* 8221CA3Ch case    8:*/		regs.LR = 0x8221CA40; return 0x82157C08;
		/* 8221CA3Ch case    8:*/		return 0x8221CA40;
	}
	return 0x8221CA40;
} // Block from 8221CA1Ch-8221CA40h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8221CA40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CA40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CA40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CA40);
		  /* 8221CA40h */ case    0:  		/* cntlzw R11, R24 */
		/* 8221CA40h case    0:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R24);
		/* 8221CA40h case    0:*/		return 0x8221CA44;
		  /* 8221CA44h */ case    1:  		/* lwz R3, <#[R27 + 4]> */
		/* 8221CA44h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000004) );
		/* 8221CA44h case    1:*/		return 0x8221CA48;
		  /* 8221CA48h */ case    2:  		/* lis R7, 257 */
		/* 8221CA48h case    2:*/		cpu::op::lis<0>(regs,&regs.R7,0x101);
		/* 8221CA48h case    2:*/		return 0x8221CA4C;
		  /* 8221CA4Ch */ case    3:  		/* stw R22, <#[R1 + 92]> */
		/* 8221CA4Ch case    3:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x0000005C) );
		/* 8221CA4Ch case    3:*/		return 0x8221CA50;
		  /* 8221CA50h */ case    4:  		/* rlwinm R8, R11, 27, 31, 31 */
		/* 8221CA50h case    4:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R8,regs.R11);
		/* 8221CA50h case    4:*/		return 0x8221CA54;
		  /* 8221CA54h */ case    5:  		/* stw R23, <#[R1 + 84]> */
		/* 8221CA54h case    5:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R1 + 0x00000054) );
		/* 8221CA54h case    5:*/		return 0x8221CA58;
		  /* 8221CA58h */ case    6:  		/* ori R7, R7, 257 */
		/* 8221CA58h case    6:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R7,0x101);
		/* 8221CA58h case    6:*/		return 0x8221CA5C;
		  /* 8221CA5Ch */ case    7:  		/* mr R10, R28 */
		/* 8221CA5Ch case    7:*/		regs.R10 = regs.R28;
		/* 8221CA5Ch case    7:*/		return 0x8221CA60;
		  /* 8221CA60h */ case    8:  		/* mr R9, R31 */
		/* 8221CA60h case    8:*/		regs.R9 = regs.R31;
		/* 8221CA60h case    8:*/		return 0x8221CA64;
		  /* 8221CA64h */ case    9:  		/* mr R6, R25 */
		/* 8221CA64h case    9:*/		regs.R6 = regs.R25;
		/* 8221CA64h case    9:*/		return 0x8221CA68;
		  /* 8221CA68h */ case   10:  		/* mr R5, R30 */
		/* 8221CA68h case   10:*/		regs.R5 = regs.R30;
		/* 8221CA68h case   10:*/		return 0x8221CA6C;
		  /* 8221CA6Ch */ case   11:  		/* mr R4, R26 */
		/* 8221CA6Ch case   11:*/		regs.R4 = regs.R26;
		/* 8221CA6Ch case   11:*/		return 0x8221CA70;
		  /* 8221CA70h */ case   12:  		/* bl -780136 */
		/* 8221CA70h case   12:*/		regs.LR = 0x8221CA74; return 0x8215E308;
		/* 8221CA70h case   12:*/		return 0x8221CA74;
		  /* 8221CA74h */ case   13:  		/* addi R1, R1, 208 */
		/* 8221CA74h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8221CA74h case   13:*/		return 0x8221CA78;
		  /* 8221CA78h */ case   14:  		/* b -1619952 */
		/* 8221CA78h case   14:*/		return 0x82091288;
		/* 8221CA78h case   14:*/		return 0x8221CA7C;
		  /* 8221CA7Ch */ case   15:  		/* nop */
		/* 8221CA7Ch case   15:*/		cpu::op::nop();
		/* 8221CA7Ch case   15:*/		return 0x8221CA80;
	}
	return 0x8221CA80;
} // Block from 8221CA40h-8221CA80h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8221CA80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CA80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CA80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CA80);
		  /* 8221CA80h */ case    0:  		/* mfspr R12, LR */
		/* 8221CA80h case    0:*/		regs.R12 = regs.LR;
		/* 8221CA80h case    0:*/		return 0x8221CA84;
		  /* 8221CA84h */ case    1:  		/* bl -1620008 */
		/* 8221CA84h case    1:*/		regs.LR = 0x8221CA88; return 0x8209125C;
		/* 8221CA84h case    1:*/		return 0x8221CA88;
		  /* 8221CA88h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8221CA88h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8221CA88h case    2:*/		return 0x8221CA8C;
		  /* 8221CA8Ch */ case    3:  		/* lwz R10, <#[R3 + 1504]> */
		/* 8221CA8Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x000005E0) );
		/* 8221CA8Ch case    3:*/		return 0x8221CA90;
		  /* 8221CA90h */ case    4:  		/* lis R9, -32252 */
		/* 8221CA90h case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8221CA90h case    4:*/		return 0x8221CA94;
		  /* 8221CA94h */ case    5:  		/* lwz R11, <#[R3 + 1500]> */
		/* 8221CA94h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000005DC) );
		/* 8221CA94h case    5:*/		return 0x8221CA98;
		  /* 8221CA98h */ case    6:  		/* lis R8, -32255 */
		/* 8221CA98h case    6:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8201);
		/* 8221CA98h case    6:*/		return 0x8221CA9C;
		  /* 8221CA9Ch */ case    7:  		/* addi R7, R10, 1 */
		/* 8221CA9Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x1);
		/* 8221CA9Ch case    7:*/		return 0x8221CAA0;
		  /* 8221CAA0h */ case    8:  		/* lwz R10, <#[R3 + 1496]> */
		/* 8221CAA0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x000005D8) );
		/* 8221CAA0h case    8:*/		return 0x8221CAA4;
		  /* 8221CAA4h */ case    9:  		/* mr R31, R3 */
		/* 8221CAA4h case    9:*/		regs.R31 = regs.R3;
		/* 8221CAA4h case    9:*/		return 0x8221CAA8;
		  /* 8221CAA8h */ case   10:  		/* stw R7, <#[R3 + 1504]> */
		/* 8221CAA8h case   10:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x000005E0) );
		/* 8221CAA8h case   10:*/		return 0x8221CAAC;
		  /* 8221CAACh */ case   11:  		/* mr R30, R4 */
		/* 8221CAACh case   11:*/		regs.R30 = regs.R4;
		/* 8221CAACh case   11:*/		return 0x8221CAB0;
		  /* 8221CAB0h */ case   12:  		/* mr R29, R5 */
		/* 8221CAB0h case   12:*/		regs.R29 = regs.R5;
		/* 8221CAB0h case   12:*/		return 0x8221CAB4;
		  /* 8221CAB4h */ case   13:  		/* addi R6, R9, -2980 */
		/* 8221CAB4h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0xFFFFF45C);
		/* 8221CAB4h case   13:*/		return 0x8221CAB8;
		  /* 8221CAB8h */ case   14:  		/* addi R5, R8, -10432 */
		/* 8221CAB8h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R8,0xFFFFD740);
		/* 8221CAB8h case   14:*/		return 0x8221CABC;
		  /* 8221CABCh */ case   15:  		/* subfic R4, R11, 8192 */
		/* 8221CABCh case   15:*/		cpu::op::subfic<0>(regs,&regs.R4,regs.R11,0x2000);
		/* 8221CABCh case   15:*/		return 0x8221CAC0;
		  /* 8221CAC0h */ case   16:  		/* add R3, R11, R10 */
		/* 8221CAC0h case   16:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 8221CAC0h case   16:*/		return 0x8221CAC4;
		  /* 8221CAC4h */ case   17:  		/* bl 312036 */
		/* 8221CAC4h case   17:*/		regs.LR = 0x8221CAC8; return 0x82268DA8;
		/* 8221CAC4h case   17:*/		return 0x8221CAC8;
		  /* 8221CAC8h */ case   18:  		/* lwz R11, <#[R31 + 1500]> */
		/* 8221CAC8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000005DC) );
		/* 8221CAC8h case   18:*/		return 0x8221CACC;
		  /* 8221CACCh */ case   19:  		/* lwz R10, <#[R31 + 1496]> */
		/* 8221CACCh case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000005D8) );
		/* 8221CACCh case   19:*/		return 0x8221CAD0;
		  /* 8221CAD0h */ case   20:  		/* mr R6, R29 */
		/* 8221CAD0h case   20:*/		regs.R6 = regs.R29;
		/* 8221CAD0h case   20:*/		return 0x8221CAD4;
		  /* 8221CAD4h */ case   21:  		/* add R11, R3, R11 */
		/* 8221CAD4h case   21:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 8221CAD4h case   21:*/		return 0x8221CAD8;
		  /* 8221CAD8h */ case   22:  		/* mr R5, R30 */
		/* 8221CAD8h case   22:*/		regs.R5 = regs.R30;
		/* 8221CAD8h case   22:*/		return 0x8221CADC;
		  /* 8221CADCh */ case   23:  		/* stw R11, <#[R31 + 1500]> */
		/* 8221CADCh case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000005DC) );
		/* 8221CADCh case   23:*/		return 0x8221CAE0;
		  /* 8221CAE0h */ case   24:  		/* subfic R4, R11, 8192 */
		/* 8221CAE0h case   24:*/		cpu::op::subfic<0>(regs,&regs.R4,regs.R11,0x2000);
		/* 8221CAE0h case   24:*/		return 0x8221CAE4;
		  /* 8221CAE4h */ case   25:  		/* add R3, R11, R10 */
		/* 8221CAE4h case   25:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 8221CAE4h case   25:*/		return 0x8221CAE8;
		  /* 8221CAE8h */ case   26:  		/* bl -1579808 */
		/* 8221CAE8h case   26:*/		regs.LR = 0x8221CAEC; return 0x8209AFC8;
		/* 8221CAE8h case   26:*/		return 0x8221CAEC;
		  /* 8221CAECh */ case   27:  		/* lwz R11, <#[R31 + 1500]> */
		/* 8221CAECh case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000005DC) );
		/* 8221CAECh case   27:*/		return 0x8221CAF0;
		  /* 8221CAF0h */ case   28:  		/* add R11, R3, R11 */
		/* 8221CAF0h case   28:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 8221CAF0h case   28:*/		return 0x8221CAF4;
		  /* 8221CAF4h */ case   29:  		/* stw R11, <#[R31 + 1500]> */
		/* 8221CAF4h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000005DC) );
		/* 8221CAF4h case   29:*/		return 0x8221CAF8;
		  /* 8221CAF8h */ case   30:  		/* cmpwi CR6, R11, 8192 */
		/* 8221CAF8h case   30:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00002000);
		/* 8221CAF8h case   30:*/		return 0x8221CAFC;
		  /* 8221CAFCh */ case   31:  		/* bc 12, CR6_LT, 40 */
		/* 8221CAFCh case   31:*/		if ( regs.CR[6].lt ) { return 0x8221CB24;  }
		/* 8221CAFCh case   31:*/		return 0x8221CB00;
		  /* 8221CB00h */ case   32:  		/* lis R11, -32252 */
		/* 8221CB00h case   32:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221CB00h case   32:*/		return 0x8221CB04;
		  /* 8221CB04h */ case   33:  		/* lis R10, -32252 */
		/* 8221CB04h case   33:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221CB04h case   33:*/		return 0x8221CB08;
		  /* 8221CB08h */ case   34:  		/* lis R9, -32253 */
		/* 8221CB08h case   34:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8221CB08h case   34:*/		return 0x8221CB0C;
		  /* 8221CB0Ch */ case   35:  		/* addi R6, R11, -3104 */
		/* 8221CB0Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFF3E0);
		/* 8221CB0Ch case   35:*/		return 0x8221CB10;
		  /* 8221CB10h */ case   36:  		/* addi R5, R10, -3012 */
		/* 8221CB10h case   36:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFF43C);
		/* 8221CB10h case   36:*/		return 0x8221CB14;
		  /* 8221CB14h */ case   37:  		/* addi R4, R9, 27460 */
		/* 8221CB14h case   37:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8221CB14h case   37:*/		return 0x8221CB18;
		  /* 8221CB18h */ case   38:  		/* li R7, 1585 */
		/* 8221CB18h case   38:*/		cpu::op::li<0>(regs,&regs.R7,0x631);
		/* 8221CB18h case   38:*/		return 0x8221CB1C;
		  /* 8221CB1Ch */ case   39:  		/* li R3, 0 */
		/* 8221CB1Ch case   39:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221CB1Ch case   39:*/		return 0x8221CB20;
		  /* 8221CB20h */ case   40:  		/* bl -806680 */
		/* 8221CB20h case   40:*/		regs.LR = 0x8221CB24; return 0x82157C08;
		/* 8221CB20h case   40:*/		return 0x8221CB24;
	}
	return 0x8221CB24;
} // Block from 8221CA80h-8221CB24h (41 instructions)

//////////////////////////////////////////////////////
// Block at 8221CB24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CB24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CB24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CB24);
		  /* 8221CB24h */ case    0:  		/* addi R1, R1, 112 */
		/* 8221CB24h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8221CB24h case    0:*/		return 0x8221CB28;
		  /* 8221CB28h */ case    1:  		/* b -1620092 */
		/* 8221CB28h case    1:*/		return 0x820912AC;
		/* 8221CB28h case    1:*/		return 0x8221CB2C;
		  /* 8221CB2Ch */ case    2:  		/* nop */
		/* 8221CB2Ch case    2:*/		cpu::op::nop();
		/* 8221CB2Ch case    2:*/		return 0x8221CB30;
	}
	return 0x8221CB30;
} // Block from 8221CB24h-8221CB30h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221CB30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CB30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CB30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CB30);
		  /* 8221CB30h */ case    0:  		/* mfspr R12, LR */
		/* 8221CB30h case    0:*/		regs.R12 = regs.LR;
		/* 8221CB30h case    0:*/		return 0x8221CB34;
		  /* 8221CB34h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8221CB34h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221CB34h case    1:*/		return 0x8221CB38;
		  /* 8221CB38h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8221CB38h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221CB38h case    2:*/		return 0x8221CB3C;
		  /* 8221CB3Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8221CB3Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8221CB3Ch case    3:*/		return 0x8221CB40;
		  /* 8221CB40h */ case    4:  		/* lbz R11, <#[R3 + 1368]> */
		/* 8221CB40h case    4:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000558) );
		/* 8221CB40h case    4:*/		return 0x8221CB44;
		  /* 8221CB44h */ case    5:  		/* mr R31, R3 */
		/* 8221CB44h case    5:*/		regs.R31 = regs.R3;
		/* 8221CB44h case    5:*/		return 0x8221CB48;
		  /* 8221CB48h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 8221CB48h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221CB48h case    6:*/		return 0x8221CB4C;
		  /* 8221CB4Ch */ case    7:  		/* bc 4, CR0_EQ, 12 */
		/* 8221CB4Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x8221CB58;  }
		/* 8221CB4Ch case    7:*/		return 0x8221CB50;
		  /* 8221CB50h */ case    8:  		/* lwz R3, <#[R3 + 1372]> */
		/* 8221CB50h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000055C) );
		/* 8221CB50h case    8:*/		return 0x8221CB54;
		  /* 8221CB54h */ case    9:  		/* bl -806052 */
		/* 8221CB54h case    9:*/		regs.LR = 0x8221CB58; return 0x82157EB0;
		/* 8221CB54h case    9:*/		return 0x8221CB58;
	}
	return 0x8221CB58;
} // Block from 8221CB30h-8221CB58h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8221CB58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CB58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CB58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CB58);
		  /* 8221CB58h */ case    0:  		/* li R11, 1 */
		/* 8221CB58h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8221CB58h case    0:*/		return 0x8221CB5C;
		  /* 8221CB5Ch */ case    1:  		/* stb R11, <#[R31 + 1368]> */
		/* 8221CB5Ch case    1:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00000558) );
		/* 8221CB5Ch case    1:*/		return 0x8221CB60;
		  /* 8221CB60h */ case    2:  		/* addi R1, R1, 96 */
		/* 8221CB60h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8221CB60h case    2:*/		return 0x8221CB64;
		  /* 8221CB64h */ case    3:  		/* lwz R12, <#[R1 - 8]> */
		/* 8221CB64h case    3:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221CB64h case    3:*/		return 0x8221CB68;
		  /* 8221CB68h */ case    4:  		/* mtspr LR, R12 */
		/* 8221CB68h case    4:*/		regs.LR = regs.R12;
		/* 8221CB68h case    4:*/		return 0x8221CB6C;
		  /* 8221CB6Ch */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 8221CB6Ch case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221CB6Ch case    5:*/		return 0x8221CB70;
		  /* 8221CB70h */ case    6:  		/* bclr 20, CR0_LT */
		/* 8221CB70h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221CB70h case    6:*/		return 0x8221CB74;
	}
	return 0x8221CB74;
} // Block from 8221CB58h-8221CB74h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221CB74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CB74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CB74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CB74);
		  /* 8221CB74h */ case    0:  		/* nop */
		/* 8221CB74h case    0:*/		cpu::op::nop();
		/* 8221CB74h case    0:*/		return 0x8221CB78;
	}
	return 0x8221CB78;
} // Block from 8221CB74h-8221CB78h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221CB78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CB78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CB78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CB78);
		  /* 8221CB78h */ case    0:  		/* mfspr R12, LR */
		/* 8221CB78h case    0:*/		regs.R12 = regs.LR;
		/* 8221CB78h case    0:*/		return 0x8221CB7C;
		  /* 8221CB7Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8221CB7Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221CB7Ch case    1:*/		return 0x8221CB80;
		  /* 8221CB80h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8221CB80h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8221CB80h case    2:*/		return 0x8221CB84;
		  /* 8221CB84h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8221CB84h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221CB84h case    3:*/		return 0x8221CB88;
		  /* 8221CB88h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8221CB88h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8221CB88h case    4:*/		return 0x8221CB8C;
		  /* 8221CB8Ch */ case    5:  		/* lwz R11, <#[R3 + 1440]> */
		/* 8221CB8Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000005A0) );
		/* 8221CB8Ch case    5:*/		return 0x8221CB90;
		  /* 8221CB90h */ case    6:  		/* mr R30, R3 */
		/* 8221CB90h case    6:*/		regs.R30 = regs.R3;
		/* 8221CB90h case    6:*/		return 0x8221CB94;
		  /* 8221CB94h */ case    7:  		/* lwz R3, <#[R3 + 1444]> */
		/* 8221CB94h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x000005A4) );
		/* 8221CB94h case    7:*/		return 0x8221CB98;
		  /* 8221CB98h */ case    8:  		/* mr R31, R5 */
		/* 8221CB98h case    8:*/		regs.R31 = regs.R5;
		/* 8221CB98h case    8:*/		return 0x8221CB9C;
		  /* 8221CB9Ch */ case    9:  		/* mtspr CTR, R11 */
		/* 8221CB9Ch case    9:*/		regs.CTR = regs.R11;
		/* 8221CB9Ch case    9:*/		return 0x8221CBA0;
		  /* 8221CBA0h */ case   10:  		/* bcctrl 20, CR0_LT */
		/* 8221CBA0h case   10:*/		if ( 1 ) { regs.LR = 0x8221CBA4; return (uint32)regs.CTR; }
		/* 8221CBA0h case   10:*/		return 0x8221CBA4;
		  /* 8221CBA4h */ case   11:  		/* addi R11, R31, 405 */
		/* 8221CBA4h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x195);
		/* 8221CBA4h case   11:*/		return 0x8221CBA8;
		  /* 8221CBA8h */ case   12:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221CBA8h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221CBA8h case   12:*/		return 0x8221CBAC;
		  /* 8221CBACh */ case   13:  		/* stwx R3, <#[R11 + R30]> */
		/* 8221CBACh case   13:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 8221CBACh case   13:*/		return 0x8221CBB0;
		  /* 8221CBB0h */ case   14:  		/* addi R1, R1, 112 */
		/* 8221CBB0h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8221CBB0h case   14:*/		return 0x8221CBB4;
		  /* 8221CBB4h */ case   15:  		/* lwz R12, <#[R1 - 8]> */
		/* 8221CBB4h case   15:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221CBB4h case   15:*/		return 0x8221CBB8;
		  /* 8221CBB8h */ case   16:  		/* mtspr LR, R12 */
		/* 8221CBB8h case   16:*/		regs.LR = regs.R12;
		/* 8221CBB8h case   16:*/		return 0x8221CBBC;
		  /* 8221CBBCh */ case   17:  		/* ld R30, <#[R1 - 24]> */
		/* 8221CBBCh case   17:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8221CBBCh case   17:*/		return 0x8221CBC0;
		  /* 8221CBC0h */ case   18:  		/* ld R31, <#[R1 - 16]> */
		/* 8221CBC0h case   18:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221CBC0h case   18:*/		return 0x8221CBC4;
		  /* 8221CBC4h */ case   19:  		/* bclr 20, CR0_LT */
		/* 8221CBC4h case   19:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221CBC4h case   19:*/		return 0x8221CBC8;
	}
	return 0x8221CBC8;
} // Block from 8221CB78h-8221CBC8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8221CBC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CBC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CBC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CBC8);
		  /* 8221CBC8h */ case    0:  		/* lwz R3, <#[R3 + 4]> */
		/* 8221CBC8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 8221CBC8h case    0:*/		return 0x8221CBCC;
		  /* 8221CBCCh */ case    1:  		/* bclr 20, CR0_LT */
		/* 8221CBCCh case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221CBCCh case    1:*/		return 0x8221CBD0;
	}
	return 0x8221CBD0;
} // Block from 8221CBC8h-8221CBD0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221CBD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CBD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CBD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CBD0);
		  /* 8221CBD0h */ case    0:  		/* mfspr R12, LR */
		/* 8221CBD0h case    0:*/		regs.R12 = regs.LR;
		/* 8221CBD0h case    0:*/		return 0x8221CBD4;
		  /* 8221CBD4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8221CBD4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221CBD4h case    1:*/		return 0x8221CBD8;
		  /* 8221CBD8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8221CBD8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221CBD8h case    2:*/		return 0x8221CBDC;
		  /* 8221CBDCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8221CBDCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8221CBDCh case    3:*/		return 0x8221CBE0;
	}
	return 0x8221CBE0;
} // Block from 8221CBD0h-8221CBE0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221CBE0h
// Function '?XLT_TranslateShader@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_XLT_STATE_TRANSLATOR@1@PAU_ABSTRACT_STATE@1@PAU_CP_COMPILED_PROGRAM@1@PAE@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CBE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CBE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CBE0);
		  /* 8221CBE0h */ case    0:  		/* lwz R11, <#[R3 + 1440]> */
		/* 8221CBE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000005A0) );
		/* 8221CBE0h case    0:*/		return 0x8221CBE4;
		  /* 8221CBE4h */ case    1:  		/* mr R31, R3 */
		/* 8221CBE4h case    1:*/		regs.R31 = regs.R3;
		/* 8221CBE4h case    1:*/		return 0x8221CBE8;
		  /* 8221CBE8h */ case    2:  		/* lwz R3, <#[R3 + 1444]> */
		/* 8221CBE8h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x000005A4) );
		/* 8221CBE8h case    2:*/		return 0x8221CBEC;
		  /* 8221CBECh */ case    3:  		/* mtspr CTR, R11 */
		/* 8221CBECh case    3:*/		regs.CTR = regs.R11;
		/* 8221CBECh case    3:*/		return 0x8221CBF0;
		  /* 8221CBF0h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8221CBF0h case    4:*/		if ( 1 ) { regs.LR = 0x8221CBF4; return (uint32)regs.CTR; }
		/* 8221CBF0h case    4:*/		return 0x8221CBF4;
		  /* 8221CBF4h */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8221CBF4h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8221CBF4h case    5:*/		return 0x8221CBF8;
		  /* 8221CBF8h */ case    6:  		/* bc 4, CR0_EQ, 24 */
		/* 8221CBF8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8221CC10;  }
		/* 8221CBF8h case    6:*/		return 0x8221CBFC;
		  /* 8221CBFCh */ case    7:  		/* li R11, 16 */
		/* 8221CBFCh case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x10);
		/* 8221CBFCh case    7:*/		return 0x8221CC00;
		  /* 8221CC00h */ case    8:  		/* li R4, 1 */
		/* 8221CC00h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8221CC00h case    8:*/		return 0x8221CC04;
		  /* 8221CC04h */ case    9:  		/* stw R11, <#[R31 + 1364]> */
		/* 8221CC04h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000554) );
		/* 8221CC04h case    9:*/		return 0x8221CC08;
		  /* 8221CC08h */ case   10:  		/* addi R3, R31, 16 */
		/* 8221CC08h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x10);
		/* 8221CC08h case   10:*/		return 0x8221CC0C;
		  /* 8221CC0Ch */ case   11:  		/* bl 311972 */
		/* 8221CC0Ch case   11:*/		regs.LR = 0x8221CC10; return 0x82268EB0;
		/* 8221CC0Ch case   11:*/		return 0x8221CC10;
	}
	return 0x8221CC10;
} // Block from 8221CBE0h-8221CC10h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8221CC10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CC10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CC10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CC10);
		  /* 8221CC10h */ case    0:  		/* addi R1, R1, 96 */
		/* 8221CC10h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8221CC10h case    0:*/		return 0x8221CC14;
		  /* 8221CC14h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8221CC14h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221CC14h case    1:*/		return 0x8221CC18;
		  /* 8221CC18h */ case    2:  		/* mtspr LR, R12 */
		/* 8221CC18h case    2:*/		regs.LR = regs.R12;
		/* 8221CC18h case    2:*/		return 0x8221CC1C;
		  /* 8221CC1Ch */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 8221CC1Ch case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221CC1Ch case    3:*/		return 0x8221CC20;
		  /* 8221CC20h */ case    4:  		/* bclr 20, CR0_LT */
		/* 8221CC20h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221CC20h case    4:*/		return 0x8221CC24;
	}
	return 0x8221CC24;
} // Block from 8221CC10h-8221CC24h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221CC24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CC24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CC24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CC24);
		  /* 8221CC24h */ case    0:  		/* nop */
		/* 8221CC24h case    0:*/		cpu::op::nop();
		/* 8221CC24h case    0:*/		return 0x8221CC28;
	}
	return 0x8221CC28;
} // Block from 8221CC24h-8221CC28h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221CC28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CC28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CC28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CC28);
		  /* 8221CC28h */ case    0:  		/* mfspr R12, LR */
		/* 8221CC28h case    0:*/		regs.R12 = regs.LR;
		/* 8221CC28h case    0:*/		return 0x8221CC2C;
		  /* 8221CC2Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8221CC2Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221CC2Ch case    1:*/		return 0x8221CC30;
		  /* 8221CC30h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8221CC30h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8221CC30h case    2:*/		return 0x8221CC34;
		  /* 8221CC34h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8221CC34h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221CC34h case    3:*/		return 0x8221CC38;
		  /* 8221CC38h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8221CC38h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8221CC38h case    4:*/		return 0x8221CC3C;
		  /* 8221CC3Ch */ case    5:  		/* addi R11, R4, 362 */
		/* 8221CC3Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0x16A);
		/* 8221CC3Ch case    5:*/		return 0x8221CC40;
		  /* 8221CC40h */ case    6:  		/* mr R31, R3 */
		/* 8221CC40h case    6:*/		regs.R31 = regs.R3;
		/* 8221CC40h case    6:*/		return 0x8221CC44;
		  /* 8221CC44h */ case    7:  		/* rlwinm R30, R11, 2, 0, 29 */
		/* 8221CC44h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R11);
		/* 8221CC44h case    7:*/		return 0x8221CC48;
		  /* 8221CC48h */ case    8:  		/* lwzx R11, <#[R30 + R3]> */
		/* 8221CC48h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R3 + 0x00000000) );
		/* 8221CC48h case    8:*/		return 0x8221CC4C;
		  /* 8221CC4Ch */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 8221CC4Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221CC4Ch case    9:*/		return 0x8221CC50;
		  /* 8221CC50h */ case   10:  		/* bc 4, CR6_EQ, 96 */
		/* 8221CC50h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8221CCB0;  }
		/* 8221CC50h case   10:*/		return 0x8221CC54;
		  /* 8221CC54h */ case   11:  		/* lwz R11, <#[R3 + 1440]> */
		/* 8221CC54h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000005A0) );
		/* 8221CC54h case   11:*/		return 0x8221CC58;
		  /* 8221CC58h */ case   12:  		/* li R4, 44 */
		/* 8221CC58h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x2C);
		/* 8221CC58h case   12:*/		return 0x8221CC5C;
		  /* 8221CC5Ch */ case   13:  		/* lwz R3, <#[R3 + 1444]> */
		/* 8221CC5Ch case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x000005A4) );
		/* 8221CC5Ch case   13:*/		return 0x8221CC60;
		  /* 8221CC60h */ case   14:  		/* mtspr CTR, R11 */
		/* 8221CC60h case   14:*/		regs.CTR = regs.R11;
		/* 8221CC60h case   14:*/		return 0x8221CC64;
		  /* 8221CC64h */ case   15:  		/* bcctrl 20, CR0_LT */
		/* 8221CC64h case   15:*/		if ( 1 ) { regs.LR = 0x8221CC68; return (uint32)regs.CTR; }
		/* 8221CC64h case   15:*/		return 0x8221CC68;
		  /* 8221CC68h */ case   16:  		/* cmplwi CR0, R3, 0 */
		/* 8221CC68h case   16:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8221CC68h case   16:*/		return 0x8221CC6C;
		  /* 8221CC6Ch */ case   17:  		/* bc 12, CR0_EQ, 60 */
		/* 8221CC6Ch case   17:*/		if ( regs.CR[0].eq ) { return 0x8221CCA8;  }
		/* 8221CC6Ch case   17:*/		return 0x8221CC70;
		  /* 8221CC70h */ case   18:  		/* li R11, 0 */
		/* 8221CC70h case   18:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8221CC70h case   18:*/		return 0x8221CC74;
		  /* 8221CC74h */ case   19:  		/* stw R31, <#[R3]> */
		/* 8221CC74h case   19:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 8221CC74h case   19:*/		return 0x8221CC78;
		  /* 8221CC78h */ case   20:  		/* mr R10, R3 */
		/* 8221CC78h case   20:*/		regs.R10 = regs.R3;
		/* 8221CC78h case   20:*/		return 0x8221CC7C;
		  /* 8221CC7Ch */ case   21:  		/* stw R11, <#[R3 + 4]> */
		/* 8221CC7Ch case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8221CC7Ch case   21:*/		return 0x8221CC80;
		  /* 8221CC80h */ case   22:  		/* stw R11, <#[R3 + 8]> */
		/* 8221CC80h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8221CC80h case   22:*/		return 0x8221CC84;
		  /* 8221CC84h */ case   23:  		/* stw R11, <#[R3 + 12]> */
		/* 8221CC84h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 8221CC84h case   23:*/		return 0x8221CC88;
		  /* 8221CC88h */ case   24:  		/* stw R11, <#[R3 + 16]> */
		/* 8221CC88h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8221CC88h case   24:*/		return 0x8221CC8C;
		  /* 8221CC8Ch */ case   25:  		/* stw R11, <#[R3 + 20]> */
		/* 8221CC8Ch case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 8221CC8Ch case   25:*/		return 0x8221CC90;
		  /* 8221CC90h */ case   26:  		/* stw R11, <#[R3 + 24]> */
		/* 8221CC90h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 8221CC90h case   26:*/		return 0x8221CC94;
		  /* 8221CC94h */ case   27:  		/* stw R11, <#[R3 + 28]> */
		/* 8221CC94h case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000001C) );
		/* 8221CC94h case   27:*/		return 0x8221CC98;
		  /* 8221CC98h */ case   28:  		/* stw R11, <#[R3 + 32]> */
		/* 8221CC98h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000020) );
		/* 8221CC98h case   28:*/		return 0x8221CC9C;
		  /* 8221CC9Ch */ case   29:  		/* stw R11, <#[R3 + 36]> */
		/* 8221CC9Ch case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000024) );
		/* 8221CC9Ch case   29:*/		return 0x8221CCA0;
		  /* 8221CCA0h */ case   30:  		/* stb R11, <#[R3 + 40]> */
		/* 8221CCA0h case   30:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R3 + 0x00000028) );
		/* 8221CCA0h case   30:*/		return 0x8221CCA4;
		  /* 8221CCA4h */ case   31:  		/* b 8 */
		/* 8221CCA4h case   31:*/		return 0x8221CCAC;
		/* 8221CCA4h case   31:*/		return 0x8221CCA8;
	}
	return 0x8221CCA8;
} // Block from 8221CC28h-8221CCA8h (32 instructions)

//////////////////////////////////////////////////////
// Block at 8221CCA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CCA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CCA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CCA8);
		  /* 8221CCA8h */ case    0:  		/* li R10, 0 */
		/* 8221CCA8h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8221CCA8h case    0:*/		return 0x8221CCAC;
	}
	return 0x8221CCAC;
} // Block from 8221CCA8h-8221CCACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221CCACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CCAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CCAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CCAC);
		  /* 8221CCACh */ case    0:  		/* stwx R10, <#[R30 + R31]> */
		/* 8221CCACh case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + regs.R31 + 0x00000000) );
		/* 8221CCACh case    0:*/		return 0x8221CCB0;
	}
	return 0x8221CCB0;
} // Block from 8221CCACh-8221CCB0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221CCB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CCB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CCB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CCB0);
		  /* 8221CCB0h */ case    0:  		/* addi R1, R1, 112 */
		/* 8221CCB0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8221CCB0h case    0:*/		return 0x8221CCB4;
		  /* 8221CCB4h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8221CCB4h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221CCB4h case    1:*/		return 0x8221CCB8;
		  /* 8221CCB8h */ case    2:  		/* mtspr LR, R12 */
		/* 8221CCB8h case    2:*/		regs.LR = regs.R12;
		/* 8221CCB8h case    2:*/		return 0x8221CCBC;
		  /* 8221CCBCh */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8221CCBCh case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8221CCBCh case    3:*/		return 0x8221CCC0;
		  /* 8221CCC0h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8221CCC0h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221CCC0h case    4:*/		return 0x8221CCC4;
		  /* 8221CCC4h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8221CCC4h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221CCC4h case    5:*/		return 0x8221CCC8;
	}
	return 0x8221CCC8;
} // Block from 8221CCB0h-8221CCC8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221CCC8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CCC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CCC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CCC8);
		  /* 8221CCC8h */ case    0:  		/* mfspr R12, LR */
		/* 8221CCC8h case    0:*/		regs.R12 = regs.LR;
		/* 8221CCC8h case    0:*/		return 0x8221CCCC;
		  /* 8221CCCCh */ case    1:  		/* bl -1620592 */
		/* 8221CCCCh case    1:*/		regs.LR = 0x8221CCD0; return 0x8209125C;
		/* 8221CCCCh case    1:*/		return 0x8221CCD0;
		  /* 8221CCD0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8221CCD0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8221CCD0h case    2:*/		return 0x8221CCD4;
		  /* 8221CCD4h */ case    3:  		/* mr R30, R3 */
		/* 8221CCD4h case    3:*/		regs.R30 = regs.R3;
		/* 8221CCD4h case    3:*/		return 0x8221CCD8;
		  /* 8221CCD8h */ case    4:  		/* rlwinm. R11, R4, 0, 24, 31 */
		/* 8221CCD8h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R4);
		/* 8221CCD8h case    4:*/		return 0x8221CCDC;
		  /* 8221CCDCh */ case    5:  		/* bc 12, CR0_EQ, 24 */
		/* 8221CCDCh case    5:*/		if ( regs.CR[0].eq ) { return 0x8221CCF4;  }
		/* 8221CCDCh case    5:*/		return 0x8221CCE0;
		  /* 8221CCE0h */ case    6:  		/* lwz R11, <#[R3 + 1436]> */
		/* 8221CCE0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000059C) );
		/* 8221CCE0h case    6:*/		return 0x8221CCE4;
		  /* 8221CCE4h */ case    7:  		/* lwz R4, <#[R3 + 1360]> */
		/* 8221CCE4h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000550) );
		/* 8221CCE4h case    7:*/		return 0x8221CCE8;
		  /* 8221CCE8h */ case    8:  		/* lwz R3, <#[R3 + 1444]> */
		/* 8221CCE8h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x000005A4) );
		/* 8221CCE8h case    8:*/		return 0x8221CCEC;
		  /* 8221CCECh */ case    9:  		/* mtspr CTR, R11 */
		/* 8221CCECh case    9:*/		regs.CTR = regs.R11;
		/* 8221CCECh case    9:*/		return 0x8221CCF0;
		  /* 8221CCF0h */ case   10:  		/* bcctrl 20, CR0_LT */
		/* 8221CCF0h case   10:*/		if ( 1 ) { regs.LR = 0x8221CCF4; return (uint32)regs.CTR; }
		/* 8221CCF0h case   10:*/		return 0x8221CCF4;
	}
	return 0x8221CCF4;
} // Block from 8221CCC8h-8221CCF4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8221CCF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CCF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CCF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CCF4);
		  /* 8221CCF4h */ case    0:  		/* addi R31, R30, 1448 */
		/* 8221CCF4h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R30,0x5A8);
		/* 8221CCF4h case    0:*/		return 0x8221CCF8;
		  /* 8221CCF8h */ case    1:  		/* li R29, 3 */
		/* 8221CCF8h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x3);
		/* 8221CCF8h case    1:*/		return 0x8221CCFC;
		  /* 8221CCFCh */ case    2:  		/* lwz R3, <#[R31]> */
		/* 8221CCFCh case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8221CCFCh case    2:*/		return 0x8221CD00;
		  /* 8221CD00h */ case    3:  		/* cmplwi CR6, R3, 0 */
		/* 8221CD00h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8221CD00h case    3:*/		return 0x8221CD04;
		  /* 8221CD04h */ case    4:  		/* bc 12, CR6_EQ, 36 */
		/* 8221CD04h case    4:*/		if ( regs.CR[6].eq ) { return 0x8221CD28;  }
		/* 8221CD04h case    4:*/		return 0x8221CD08;
		  /* 8221CD08h */ case    5:  		/* bl 130312 */
		/* 8221CD08h case    5:*/		regs.LR = 0x8221CD0C; return 0x8223CA10;
		/* 8221CD08h case    5:*/		return 0x8221CD0C;
		  /* 8221CD0Ch */ case    6:  		/* lwz R11, <#[R30 + 1436]> */
		/* 8221CD0Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000059C) );
		/* 8221CD0Ch case    6:*/		return 0x8221CD10;
		  /* 8221CD10h */ case    7:  		/* lwz R3, <#[R30 + 1444]> */
		/* 8221CD10h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000005A4) );
		/* 8221CD10h case    7:*/		return 0x8221CD14;
		  /* 8221CD14h */ case    8:  		/* lwz R4, <#[R31]> */
		/* 8221CD14h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 8221CD14h case    8:*/		return 0x8221CD18;
		  /* 8221CD18h */ case    9:  		/* mtspr CTR, R11 */
		/* 8221CD18h case    9:*/		regs.CTR = regs.R11;
		/* 8221CD18h case    9:*/		return 0x8221CD1C;
		  /* 8221CD1Ch */ case   10:  		/* bcctrl 20, CR0_LT */
		/* 8221CD1Ch case   10:*/		if ( 1 ) { regs.LR = 0x8221CD20; return (uint32)regs.CTR; }
		/* 8221CD1Ch case   10:*/		return 0x8221CD20;
		  /* 8221CD20h */ case   11:  		/* li R11, 0 */
		/* 8221CD20h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8221CD20h case   11:*/		return 0x8221CD24;
		  /* 8221CD24h */ case   12:  		/* stw R11, <#[R31]> */
		/* 8221CD24h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8221CD24h case   12:*/		return 0x8221CD28;
	}
	return 0x8221CD28;
} // Block from 8221CCF4h-8221CD28h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8221CD28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CD28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CD28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CD28);
		  /* 8221CD28h */ case    0:  		/* addic. R29, R29, -1 */
		/* 8221CD28h case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 8221CD28h case    0:*/		return 0x8221CD2C;
		  /* 8221CD2Ch */ case    1:  		/* addi R31, R31, 4 */
		/* 8221CD2Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8221CD2Ch case    1:*/		return 0x8221CD30;
		  /* 8221CD30h */ case    2:  		/* bc 4, CR0_EQ, -52 */
		/* 8221CD30h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8221CCFC;  }
		/* 8221CD30h case    2:*/		return 0x8221CD34;
		  /* 8221CD34h */ case    3:  		/* addi R1, R1, 112 */
		/* 8221CD34h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8221CD34h case    3:*/		return 0x8221CD38;
		  /* 8221CD38h */ case    4:  		/* b -1620620 */
		/* 8221CD38h case    4:*/		return 0x820912AC;
		/* 8221CD38h case    4:*/		return 0x8221CD3C;
		  /* 8221CD3Ch */ case    5:  		/* nop */
		/* 8221CD3Ch case    5:*/		cpu::op::nop();
		/* 8221CD3Ch case    5:*/		return 0x8221CD40;
	}
	return 0x8221CD40;
} // Block from 8221CD28h-8221CD40h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221CD40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CD40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CD40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CD40);
		  /* 8221CD40h */ case    0:  		/* mfspr R12, LR */
		/* 8221CD40h case    0:*/		regs.R12 = regs.LR;
		/* 8221CD40h case    0:*/		return 0x8221CD44;
		  /* 8221CD44h */ case    1:  		/* bl -1620720 */
		/* 8221CD44h case    1:*/		regs.LR = 0x8221CD48; return 0x82091254;
		/* 8221CD44h case    1:*/		return 0x8221CD48;
		  /* 8221CD48h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8221CD48h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8221CD48h case    2:*/		return 0x8221CD4C;
		  /* 8221CD4Ch */ case    3:  		/* mr R31, R3 */
		/* 8221CD4Ch case    3:*/		regs.R31 = regs.R3;
		/* 8221CD4Ch case    3:*/		return 0x8221CD50;
		  /* 8221CD50h */ case    4:  		/* lwz R3, <#[R3 + 1488]> */
		/* 8221CD50h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x000005D0) );
		/* 8221CD50h case    4:*/		return 0x8221CD54;
		  /* 8221CD54h */ case    5:  		/* std R6, <#[R1 + 216]> */
		/* 8221CD54h case    5:*/		cpu::mem::store64( regs, regs.R6, (uint32)(regs.R1 + 0x000000D8) );
		/* 8221CD54h case    5:*/		return 0x8221CD58;
		  /* 8221CD58h */ case    6:  		/* mr R30, R4 */
		/* 8221CD58h case    6:*/		regs.R30 = regs.R4;
		/* 8221CD58h case    6:*/		return 0x8221CD5C;
		  /* 8221CD5Ch */ case    7:  		/* lwz R11, <#[R1 + 216]> */
		/* 8221CD5Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000D8) );
		/* 8221CD5Ch case    7:*/		return 0x8221CD60;
		  /* 8221CD60h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 8221CD60h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221CD60h case    8:*/		return 0x8221CD64;
		  /* 8221CD64h */ case    9:  		/* lwz R11, <#[R3]> */
		/* 8221CD64h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8221CD64h case    9:*/		return 0x8221CD68;
		  /* 8221CD68h */ case   10:  		/* mr R29, R5 */
		/* 8221CD68h case   10:*/		regs.R29 = regs.R5;
		/* 8221CD68h case   10:*/		return 0x8221CD6C;
		  /* 8221CD6Ch */ case   11:  		/* bc 4, CR6_EQ, 24 */
		/* 8221CD6Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x8221CD84;  }
		/* 8221CD6Ch case   11:*/		return 0x8221CD70;
		  /* 8221CD70h */ case   12:  		/* lwz R11, <#[R11]> */
		/* 8221CD70h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8221CD70h case   12:*/		return 0x8221CD74;
		  /* 8221CD74h */ case   13:  		/* lfs FR1, <#[R1 + 220]> */
		/* 8221CD74h case   13:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0x000000DC) );
		/* 8221CD74h case   13:*/		return 0x8221CD78;
		  /* 8221CD78h */ case   14:  		/* mtspr CTR, R11 */
		/* 8221CD78h case   14:*/		regs.CTR = regs.R11;
		/* 8221CD78h case   14:*/		return 0x8221CD7C;
		  /* 8221CD7Ch */ case   15:  		/* bcctrl 20, CR0_LT */
		/* 8221CD7Ch case   15:*/		if ( 1 ) { regs.LR = 0x8221CD80; return (uint32)regs.CTR; }
		/* 8221CD7Ch case   15:*/		return 0x8221CD80;
		  /* 8221CD80h */ case   16:  		/* b 76 */
		/* 8221CD80h case   16:*/		return 0x8221CDCC;
		/* 8221CD80h case   16:*/		return 0x8221CD84;
	}
	return 0x8221CD84;
} // Block from 8221CD40h-8221CD84h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8221CD84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CD84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CD84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CD84);
		  /* 8221CD84h */ case    0:  		/* lwz R11, <#[R11 + 4]> */
		/* 8221CD84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8221CD84h case    0:*/		return 0x8221CD88;
	}
	return 0x8221CD88;
} // Block from 8221CD84h-8221CD88h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221CD88h
// Function '?SetInterpUsage@Compiler@XGRAPHICS@@QAAXHHHHPAH00@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CD88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CD88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CD88);
		  /* 8221CD88h */ case    0:  		/* lha R28, <#[R1 + 222]> */
		/* 8221CD88h case    0:*/		cpu::mem::load16a( regs, &regs.R28, (uint32)(regs.R1 + 0x000000DE) );
		/* 8221CD88h case    0:*/		return 0x8221CD8C;
		  /* 8221CD8Ch */ case    1:  		/* lha R27, <#[R1 + 220]> */
		/* 8221CD8Ch case    1:*/		cpu::mem::load16a( regs, &regs.R27, (uint32)(regs.R1 + 0x000000DC) );
		/* 8221CD8Ch case    1:*/		return 0x8221CD90;
		  /* 8221CD90h */ case    2:  		/* mr R7, R28 */
		/* 8221CD90h case    2:*/		regs.R7 = regs.R28;
		/* 8221CD90h case    2:*/		return 0x8221CD94;
		  /* 8221CD94h */ case    3:  		/* mr R6, R27 */
		/* 8221CD94h case    3:*/		regs.R6 = regs.R27;
		/* 8221CD94h case    3:*/		return 0x8221CD98;
		  /* 8221CD98h */ case    4:  		/* mtspr CTR, R11 */
		/* 8221CD98h case    4:*/		regs.CTR = regs.R11;
		/* 8221CD98h case    4:*/		return 0x8221CD9C;
		  /* 8221CD9Ch */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 8221CD9Ch case    5:*/		if ( 1 ) { regs.LR = 0x8221CDA0; return (uint32)regs.CTR; }
		/* 8221CD9Ch case    5:*/		return 0x8221CDA0;
	}
	return 0x8221CDA0;
} // Block from 8221CD88h-8221CDA0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221CDA0h
// Function '?GetTextureFetchConstForPointAA@Compiler@XGRAPHICS@@QAAIXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CDA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CDA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CDA0);
		  /* 8221CDA0h */ case    0:  		/* lis R11, -32216 */
		/* 8221CDA0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8228);
		/* 8221CDA0h case    0:*/		return 0x8221CDA4;
		  /* 8221CDA4h */ case    1:  		/* rlwinm R10, R27, 2, 0, 29 */
		/* 8221CDA4h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R27);
		/* 8221CDA4h case    1:*/		return 0x8221CDA8;
		  /* 8221CDA8h */ case    2:  		/* addi R11, R11, 10392 */
		/* 8221CDA8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2898);
		/* 8221CDA8h case    2:*/		return 0x8221CDAC;
		  /* 8221CDACh */ case    3:  		/* lis R9, -32252 */
		/* 8221CDACh case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8221CDACh case    3:*/		return 0x8221CDB0;
		  /* 8221CDB0h */ case    4:  		/* mr R8, R28 */
		/* 8221CDB0h case    4:*/		regs.R8 = regs.R28;
		/* 8221CDB0h case    4:*/		return 0x8221CDB4;
		  /* 8221CDB4h */ case    5:  		/* addi R4, R9, -2928 */
		/* 8221CDB4h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0xFFFFF490);
		/* 8221CDB4h case    5:*/		return 0x8221CDB8;
		  /* 8221CDB8h */ case    6:  		/* mr R6, R29 */
		/* 8221CDB8h case    6:*/		regs.R6 = regs.R29;
		/* 8221CDB8h case    6:*/		return 0x8221CDBC;
		  /* 8221CDBCh */ case    7:  		/* mr R5, R30 */
		/* 8221CDBCh case    7:*/		regs.R5 = regs.R30;
		/* 8221CDBCh case    7:*/		return 0x8221CDC0;
		  /* 8221CDC0h */ case    8:  		/* lwzx R7, <#[R10 + R11]> */
		/* 8221CDC0h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8221CDC0h case    8:*/		return 0x8221CDC4;
		  /* 8221CDC4h */ case    9:  		/* mr R3, R31 */
		/* 8221CDC4h case    9:*/		regs.R3 = regs.R31;
		/* 8221CDC4h case    9:*/		return 0x8221CDC8;
		  /* 8221CDC8h */ case   10:  		/* bl 1528 */
		/* 8221CDC8h case   10:*/		regs.LR = 0x8221CDCC; return 0x8221D3C0;
		/* 8221CDC8h case   10:*/		return 0x8221CDCC;
	}
	return 0x8221CDCC;
} // Block from 8221CDA0h-8221CDCCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 8221CDCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CDCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CDCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CDCC);
		  /* 8221CDCCh */ case    0:  		/* addi R1, R1, 176 */
		/* 8221CDCCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8221CDCCh case    0:*/		return 0x8221CDD0;
		  /* 8221CDD0h */ case    1:  		/* b -1620780 */
		/* 8221CDD0h case    1:*/		return 0x820912A4;
		/* 8221CDD0h case    1:*/		return 0x8221CDD4;
		  /* 8221CDD4h */ case    2:  		/* nop */
		/* 8221CDD4h case    2:*/		cpu::op::nop();
		/* 8221CDD4h case    2:*/		return 0x8221CDD8;
	}
	return 0x8221CDD8;
} // Block from 8221CDCCh-8221CDD8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221CDD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CDD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CDD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CDD8);
		  /* 8221CDD8h */ case    0:  		/* mfspr R12, LR */
		/* 8221CDD8h case    0:*/		regs.R12 = regs.LR;
		/* 8221CDD8h case    0:*/		return 0x8221CDDC;
		  /* 8221CDDCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8221CDDCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221CDDCh case    1:*/		return 0x8221CDE0;
		  /* 8221CDE0h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8221CDE0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8221CDE0h case    2:*/		return 0x8221CDE4;
		  /* 8221CDE4h */ case    3:  		/* lwz R11, <#[R3 + 16]> */
		/* 8221CDE4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8221CDE4h case    3:*/		return 0x8221CDE8;
		  /* 8221CDE8h */ case    4:  		/* lbz R10, <#[R11 + 1380]> */
		/* 8221CDE8h case    4:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000564) );
		/* 8221CDE8h case    4:*/		return 0x8221CDEC;
		  /* 8221CDECh */ case    5:  		/* lwz R4, <#[R11 + 1536]> */
		/* 8221CDECh case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000600) );
		/* 8221CDECh case    5:*/		return 0x8221CDF0;
		  /* 8221CDF0h */ case    6:  		/* cmplwi CR0, R10, 0 */
		/* 8221CDF0h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221CDF0h case    6:*/		return 0x8221CDF4;
		  /* 8221CDF4h */ case    7:  		/* bc 12, CR0_EQ, 12 */
		/* 8221CDF4h case    7:*/		if ( regs.CR[0].eq ) { return 0x8221CE00;  }
		/* 8221CDF4h case    7:*/		return 0x8221CDF8;
		  /* 8221CDF8h */ case    8:  		/* lwz R3, <#[R3 + 4]> */
		/* 8221CDF8h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 8221CDF8h case    8:*/		return 0x8221CDFC;
		  /* 8221CDFCh */ case    9:  		/* b 8 */
		/* 8221CDFCh case    9:*/		return 0x8221CE04;
		/* 8221CDFCh case    9:*/		return 0x8221CE00;
	}
	return 0x8221CE00;
} // Block from 8221CDD8h-8221CE00h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8221CE00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CE00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CE00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CE00);
		  /* 8221CE00h */ case    0:  		/* lwz R3, <#[R3 + 8]> */
		/* 8221CE00h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000008) );
		/* 8221CE00h case    0:*/		return 0x8221CE04;
	}
	return 0x8221CE04;
} // Block from 8221CE00h-8221CE04h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221CE04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CE04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CE04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CE04);
		  /* 8221CE04h */ case    0:  		/* bl -781940 */
		/* 8221CE04h case    0:*/		regs.LR = 0x8221CE08; return 0x8215DF90;
		/* 8221CE04h case    0:*/		return 0x8221CE08;
	}
	return 0x8221CE08;
} // Block from 8221CE04h-8221CE08h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221CE08h
// Function '?GetTextureFetchConstForPixelFog@Compiler@XGRAPHICS@@QAAIXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CE08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CE08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CE08);
		  /* 8221CE08h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 8221CE08h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8221CE08h case    0:*/		return 0x8221CE0C;
		  /* 8221CE0Ch */ case    1:  		/* bc 12, CR6_EQ, 40 */
		/* 8221CE0Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8221CE34;  }
		/* 8221CE0Ch case    1:*/		return 0x8221CE10;
		  /* 8221CE10h */ case    2:  		/* lis R11, -32252 */
		/* 8221CE10h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221CE10h case    2:*/		return 0x8221CE14;
		  /* 8221CE14h */ case    3:  		/* lis R10, -32252 */
		/* 8221CE14h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221CE14h case    3:*/		return 0x8221CE18;
		  /* 8221CE18h */ case    4:  		/* lis R9, -32253 */
		/* 8221CE18h case    4:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8221CE18h case    4:*/		return 0x8221CE1C;
		  /* 8221CE1Ch */ case    5:  		/* addi R6, R11, -3104 */
		/* 8221CE1Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFF3E0);
		/* 8221CE1Ch case    5:*/		return 0x8221CE20;
		  /* 8221CE20h */ case    6:  		/* addi R5, R10, -5996 */
		/* 8221CE20h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFE894);
		/* 8221CE20h case    6:*/		return 0x8221CE24;
		  /* 8221CE24h */ case    7:  		/* addi R4, R9, 27460 */
		/* 8221CE24h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8221CE24h case    7:*/		return 0x8221CE28;
		  /* 8221CE28h */ case    8:  		/* li R7, 561 */
		/* 8221CE28h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x231);
		/* 8221CE28h case    8:*/		return 0x8221CE2C;
		  /* 8221CE2Ch */ case    9:  		/* li R3, 0 */
		/* 8221CE2Ch case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221CE2Ch case    9:*/		return 0x8221CE30;
		  /* 8221CE30h */ case   10:  		/* bl -807464 */
		/* 8221CE30h case   10:*/		regs.LR = 0x8221CE34; return 0x82157C08;
		/* 8221CE30h case   10:*/		return 0x8221CE34;
	}
	return 0x8221CE34;
} // Block from 8221CE08h-8221CE34h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8221CE34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CE34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CE34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CE34);
		  /* 8221CE34h */ case    0:  		/* addi R1, R1, 96 */
		/* 8221CE34h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8221CE34h case    0:*/		return 0x8221CE38;
		  /* 8221CE38h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8221CE38h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221CE38h case    1:*/		return 0x8221CE3C;
		  /* 8221CE3Ch */ case    2:  		/* mtspr LR, R12 */
		/* 8221CE3Ch case    2:*/		regs.LR = regs.R12;
		/* 8221CE3Ch case    2:*/		return 0x8221CE40;
		  /* 8221CE40h */ case    3:  		/* bclr 20, CR0_LT */
		/* 8221CE40h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221CE40h case    3:*/		return 0x8221CE44;
	}
	return 0x8221CE44;
} // Block from 8221CE34h-8221CE44h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221CE44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CE44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CE44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CE44);
		  /* 8221CE44h */ case    0:  		/* nop */
		/* 8221CE44h case    0:*/		cpu::op::nop();
		/* 8221CE44h case    0:*/		return 0x8221CE48;
	}
	return 0x8221CE48;
} // Block from 8221CE44h-8221CE48h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221CE48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CE48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CE48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CE48);
		  /* 8221CE48h */ case    0:  		/* mfspr R12, LR */
		/* 8221CE48h case    0:*/		regs.R12 = regs.LR;
		/* 8221CE48h case    0:*/		return 0x8221CE4C;
		  /* 8221CE4Ch */ case    1:  		/* bl -1620988 */
		/* 8221CE4Ch case    1:*/		regs.LR = 0x8221CE50; return 0x82091250;
		/* 8221CE4Ch case    1:*/		return 0x8221CE50;
		  /* 8221CE50h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8221CE50h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8221CE50h case    2:*/		return 0x8221CE54;
		  /* 8221CE54h */ case    3:  		/* mr R28, R4 */
		/* 8221CE54h case    3:*/		regs.R28 = regs.R4;
		/* 8221CE54h case    3:*/		return 0x8221CE58;
		  /* 8221CE58h */ case    4:  		/* mr R30, R6 */
		/* 8221CE58h case    4:*/		regs.R30 = regs.R6;
		/* 8221CE58h case    4:*/		return 0x8221CE5C;
		  /* 8221CE5Ch */ case    5:  		/* lis R11, -32252 */
		/* 8221CE5Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221CE5Ch case    5:*/		return 0x8221CE60;
		  /* 8221CE60h */ case    6:  		/* mr R6, R5 */
		/* 8221CE60h case    6:*/		regs.R6 = regs.R5;
		/* 8221CE60h case    6:*/		return 0x8221CE64;
		  /* 8221CE64h */ case    7:  		/* mr R29, R3 */
		/* 8221CE64h case    7:*/		regs.R29 = regs.R3;
		/* 8221CE64h case    7:*/		return 0x8221CE68;
		  /* 8221CE68h */ case    8:  		/* mr R27, R5 */
		/* 8221CE68h case    8:*/		regs.R27 = regs.R5;
		/* 8221CE68h case    8:*/		return 0x8221CE6C;
		  /* 8221CE6Ch */ case    9:  		/* addi R4, R11, -2868 */
		/* 8221CE6Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFF4CC);
		/* 8221CE6Ch case    9:*/		return 0x8221CE70;
	}
	return 0x8221CE70;
} // Block from 8221CE48h-8221CE70h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8221CE70h
// Function '?GetTextureFetchConstForLineAA@Compiler@XGRAPHICS@@QAAIXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CE70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CE70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CE70);
		  /* 8221CE70h */ case    0:  		/* mr R5, R28 */
		/* 8221CE70h case    0:*/		regs.R5 = regs.R28;
		/* 8221CE70h case    0:*/		return 0x8221CE74;
		  /* 8221CE74h */ case    1:  		/* mr R3, R30 */
		/* 8221CE74h case    1:*/		regs.R3 = regs.R30;
		/* 8221CE74h case    1:*/		return 0x8221CE78;
		  /* 8221CE78h */ case    2:  		/* mr R26, R7 */
		/* 8221CE78h case    2:*/		regs.R26 = regs.R7;
		/* 8221CE78h case    2:*/		return 0x8221CE7C;
		  /* 8221CE7Ch */ case    3:  		/* bl 1348 */
		/* 8221CE7Ch case    3:*/		regs.LR = 0x8221CE80; return 0x8221D3C0;
		/* 8221CE7Ch case    3:*/		return 0x8221CE80;
		  /* 8221CE80h */ case    4:  		/* li R4, 32 */
		/* 8221CE80h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 8221CE80h case    4:*/		return 0x8221CE84;
		  /* 8221CE84h */ case    5:  		/* bl -692 */
		/* 8221CE84h case    5:*/		regs.LR = 0x8221CE88; return 0x8221CBD0;
		/* 8221CE84h case    5:*/		return 0x8221CE88;
		  /* 8221CE88h */ case    6:  		/* li R11, 0 */
		/* 8221CE88h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8221CE88h case    6:*/		return 0x8221CE8C;
		  /* 8221CE8Ch */ case    7:  		/* li R10, 1 */
		/* 8221CE8Ch case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8221CE8Ch case    7:*/		return 0x8221CE90;
		  /* 8221CE90h */ case    8:  		/* stw R28, <#[R3 + 4]> */
		/* 8221CE90h case    8:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		/* 8221CE90h case    8:*/		return 0x8221CE94;
		  /* 8221CE94h */ case    9:  		/* li R9, 2 */
		/* 8221CE94h case    9:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 8221CE94h case    9:*/		return 0x8221CE98;
		  /* 8221CE98h */ case   10:  		/* stw R11, <#[R3]> */
		/* 8221CE98h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8221CE98h case   10:*/		return 0x8221CE9C;
		  /* 8221CE9Ch */ case   11:  		/* li R8, 3 */
		/* 8221CE9Ch case   11:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 8221CE9Ch case   11:*/		return 0x8221CEA0;
		  /* 8221CEA0h */ case   12:  		/* stw R27, <#[R3 + 8]> */
		/* 8221CEA0h case   12:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000008) );
		/* 8221CEA0h case   12:*/		return 0x8221CEA4;
		  /* 8221CEA4h */ case   13:  		/* stw R26, <#[R3 + 12]> */
		/* 8221CEA4h case   13:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x0000000C) );
		/* 8221CEA4h case   13:*/		return 0x8221CEA8;
		  /* 8221CEA8h */ case   14:  		/* mr R31, R3 */
		/* 8221CEA8h case   14:*/		regs.R31 = regs.R3;
		/* 8221CEA8h case   14:*/		return 0x8221CEAC;
		  /* 8221CEACh */ case   15:  		/* stw R11, <#[R3 + 16]> */
		/* 8221CEACh case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8221CEACh case   15:*/		return 0x8221CEB0;
		  /* 8221CEB0h */ case   16:  		/* mr R4, R3 */
		/* 8221CEB0h case   16:*/		regs.R4 = regs.R3;
		/* 8221CEB0h case   16:*/		return 0x8221CEB4;
		  /* 8221CEB4h */ case   17:  		/* stw R10, <#[R3 + 20]> */
		/* 8221CEB4h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000014) );
		/* 8221CEB4h case   17:*/		return 0x8221CEB8;
		  /* 8221CEB8h */ case   18:  		/* stw R9, <#[R3 + 24]> */
		/* 8221CEB8h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000018) );
		/* 8221CEB8h case   18:*/		return 0x8221CEBC;
		  /* 8221CEBCh */ case   19:  		/* stw R8, <#[R3 + 28]> */
		/* 8221CEBCh case   19:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x0000001C) );
		/* 8221CEBCh case   19:*/		return 0x8221CEC0;
		  /* 8221CEC0h */ case   20:  		/* lbz R11, <#[R30 + 1380]> */
		/* 8221CEC0h case   20:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000564) );
		/* 8221CEC0h case   20:*/		return 0x8221CEC4;
		  /* 8221CEC4h */ case   21:  		/* cmplwi CR0, R11, 0 */
		/* 8221CEC4h case   21:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221CEC4h case   21:*/		return 0x8221CEC8;
		  /* 8221CEC8h */ case   22:  		/* bc 12, CR0_EQ, 12 */
		/* 8221CEC8h case   22:*/		if ( regs.CR[0].eq ) { return 0x8221CED4;  }
		/* 8221CEC8h case   22:*/		return 0x8221CECC;
		  /* 8221CECCh */ case   23:  		/* lwz R3, <#[R29 + 4]> */
		/* 8221CECCh case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000004) );
		/* 8221CECCh case   23:*/		return 0x8221CED0;
		  /* 8221CED0h */ case   24:  		/* b 8 */
		/* 8221CED0h case   24:*/		return 0x8221CED8;
		/* 8221CED0h case   24:*/		return 0x8221CED4;
	}
	return 0x8221CED4;
} // Block from 8221CE70h-8221CED4h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8221CED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CED4);
		  /* 8221CED4h */ case    0:  		/* lwz R3, <#[R29 + 8]> */
		/* 8221CED4h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000008) );
		/* 8221CED4h case    0:*/		return 0x8221CED8;
	}
	return 0x8221CED8;
} // Block from 8221CED4h-8221CED8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221CED8h
// Function '?Malloc@Arena@XGRAPHICS@@QBAPAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CED8);
		  /* 8221CED8h */ case    0:  		/* bl -780472 */
		/* 8221CED8h case    0:*/		regs.LR = 0x8221CEDC; return 0x8215E620;
		/* 8221CED8h case    0:*/		return 0x8221CEDC;
		  /* 8221CEDCh */ case    1:  		/* lwz R11, <#[R30 + 1436]> */
		/* 8221CEDCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000059C) );
		/* 8221CEDCh case    1:*/		return 0x8221CEE0;
		  /* 8221CEE0h */ case    2:  		/* mr R4, R31 */
		/* 8221CEE0h case    2:*/		regs.R4 = regs.R31;
		/* 8221CEE0h case    2:*/		return 0x8221CEE4;
		  /* 8221CEE4h */ case    3:  		/* lwz R3, <#[R30 + 1444]> */
		/* 8221CEE4h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x000005A4) );
		/* 8221CEE4h case    3:*/		return 0x8221CEE8;
		  /* 8221CEE8h */ case    4:  		/* mtspr CTR, R11 */
		/* 8221CEE8h case    4:*/		regs.CTR = regs.R11;
		/* 8221CEE8h case    4:*/		return 0x8221CEEC;
		  /* 8221CEECh */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 8221CEECh case    5:*/		if ( 1 ) { regs.LR = 0x8221CEF0; return (uint32)regs.CTR; }
		/* 8221CEECh case    5:*/		return 0x8221CEF0;
		  /* 8221CEF0h */ case    6:  		/* addi R1, R1, 176 */
		/* 8221CEF0h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8221CEF0h case    6:*/		return 0x8221CEF4;
		  /* 8221CEF4h */ case    7:  		/* b -1621076 */
		/* 8221CEF4h case    7:*/		return 0x820912A0;
		/* 8221CEF4h case    7:*/		return 0x8221CEF8;
	}
	return 0x8221CEF8;
} // Block from 8221CED8h-8221CEF8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8221CEF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CEF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CEF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CEF8);
		  /* 8221CEF8h */ case    0:  		/* mfspr R12, LR */
		/* 8221CEF8h case    0:*/		regs.R12 = regs.LR;
		/* 8221CEF8h case    0:*/		return 0x8221CEFC;
		  /* 8221CEFCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8221CEFCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221CEFCh case    1:*/		return 0x8221CF00;
		  /* 8221CF00h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8221CF00h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8221CF00h case    2:*/		return 0x8221CF04;
		  /* 8221CF04h */ case    3:  		/* lwz R11, <#[R3 + 16]> */
		/* 8221CF04h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8221CF04h case    3:*/		return 0x8221CF08;
		  /* 8221CF08h */ case    4:  		/* lwz R3, <#[R3 + 4]> */
		/* 8221CF08h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 8221CF08h case    4:*/		return 0x8221CF0C;
		  /* 8221CF0Ch */ case    5:  		/* lwz R4, <#[R11 + 1536]> */
		/* 8221CF0Ch case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000600) );
		/* 8221CF0Ch case    5:*/		return 0x8221CF10;
		  /* 8221CF10h */ case    6:  		/* bl -782208 */
		/* 8221CF10h case    6:*/		regs.LR = 0x8221CF14; return 0x8215DF90;
		/* 8221CF10h case    6:*/		return 0x8221CF14;
		  /* 8221CF14h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 8221CF14h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8221CF14h case    7:*/		return 0x8221CF18;
		  /* 8221CF18h */ case    8:  		/* bc 12, CR0_EQ, 40 */
		/* 8221CF18h case    8:*/		if ( regs.CR[0].eq ) { return 0x8221CF40;  }
		/* 8221CF18h case    8:*/		return 0x8221CF1C;
		  /* 8221CF1Ch */ case    9:  		/* lis R11, -32252 */
		/* 8221CF1Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221CF1Ch case    9:*/		return 0x8221CF20;
		  /* 8221CF20h */ case   10:  		/* lis R10, -32252 */
		/* 8221CF20h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221CF20h case   10:*/		return 0x8221CF24;
		  /* 8221CF24h */ case   11:  		/* lis R9, -32253 */
		/* 8221CF24h case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8221CF24h case   11:*/		return 0x8221CF28;
		  /* 8221CF28h */ case   12:  		/* addi R6, R11, -3104 */
		/* 8221CF28h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFF3E0);
		/* 8221CF28h case   12:*/		return 0x8221CF2C;
		  /* 8221CF2Ch */ case   13:  		/* addi R5, R10, -5996 */
		/* 8221CF2Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFE894);
		/* 8221CF2Ch case   13:*/		return 0x8221CF30;
		  /* 8221CF30h */ case   14:  		/* addi R4, R9, 27460 */
		/* 8221CF30h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8221CF30h case   14:*/		return 0x8221CF34;
		  /* 8221CF34h */ case   15:  		/* li R7, 739 */
		/* 8221CF34h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x2E3);
		/* 8221CF34h case   15:*/		return 0x8221CF38;
		  /* 8221CF38h */ case   16:  		/* li R3, 0 */
		/* 8221CF38h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221CF38h case   16:*/		return 0x8221CF3C;
		  /* 8221CF3Ch */ case   17:  		/* bl -807732 */
		/* 8221CF3Ch case   17:*/		regs.LR = 0x8221CF40; return 0x82157C08;
		/* 8221CF3Ch case   17:*/		return 0x8221CF40;
	}
	return 0x8221CF40;
} // Block from 8221CEF8h-8221CF40h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8221CF40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CF40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CF40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CF40);
		  /* 8221CF40h */ case    0:  		/* addi R1, R1, 96 */
		/* 8221CF40h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8221CF40h case    0:*/		return 0x8221CF44;
		  /* 8221CF44h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8221CF44h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221CF44h case    1:*/		return 0x8221CF48;
		  /* 8221CF48h */ case    2:  		/* mtspr LR, R12 */
		/* 8221CF48h case    2:*/		regs.LR = regs.R12;
		/* 8221CF48h case    2:*/		return 0x8221CF4C;
		  /* 8221CF4Ch */ case    3:  		/* bclr 20, CR0_LT */
		/* 8221CF4Ch case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221CF4Ch case    3:*/		return 0x8221CF50;
	}
	return 0x8221CF50;
} // Block from 8221CF40h-8221CF50h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221CF50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CF50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CF50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CF50);
		  /* 8221CF50h */ case    0:  		/* li R10, 3 */
		/* 8221CF50h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 8221CF50h case    0:*/		return 0x8221CF54;
		  /* 8221CF54h */ case    1:  		/* addi R11, R3, 1444 */
		/* 8221CF54h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x5A4);
		/* 8221CF54h case    1:*/		return 0x8221CF58;
		  /* 8221CF58h */ case    2:  		/* mtspr CTR, R10 */
		/* 8221CF58h case    2:*/		regs.CTR = regs.R10;
		/* 8221CF58h case    2:*/		return 0x8221CF5C;
		  /* 8221CF5Ch */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 8221CF5Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8221CF5Ch case    3:*/		return 0x8221CF60;
		  /* 8221CF60h */ case    4:  		/* lwz R9, <#[R3 + 2136]> */
		/* 8221CF60h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000858) );
		/* 8221CF60h case    4:*/		return 0x8221CF64;
		  /* 8221CF64h */ case    5:  		/* rlwinm R9, R9, 18, 31, 31 */
		/* 8221CF64h case    5:*/		cpu::op::rlwinm<0,18,31,31>(regs,&regs.R9,regs.R9);
		/* 8221CF64h case    5:*/		return 0x8221CF68;
		  /* 8221CF68h */ case    6:  		/* stb R9, <#[R10 + 40]> */
		/* 8221CF68h case    6:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R10 + 0x00000028) );
		/* 8221CF68h case    6:*/		return 0x8221CF6C;
		  /* 8221CF6Ch */ case    7:  		/* lwz R10, <#[R11 + 4]> */
		/* 8221CF6Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8221CF6Ch case    7:*/		return 0x8221CF70;
		  /* 8221CF70h */ case    8:  		/* lwz R9, <#[R3 + 2136]> */
		/* 8221CF70h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000858) );
		/* 8221CF70h case    8:*/		return 0x8221CF74;
		  /* 8221CF74h */ case    9:  		/* rlwinm R9, R9, 18, 31, 31 */
		/* 8221CF74h case    9:*/		cpu::op::rlwinm<0,18,31,31>(regs,&regs.R9,regs.R9);
		/* 8221CF74h case    9:*/		return 0x8221CF78;
		  /* 8221CF78h */ case   10:  		/* stb R9, <#[R10 + 40]> */
		/* 8221CF78h case   10:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R10 + 0x00000028) );
		/* 8221CF78h case   10:*/		return 0x8221CF7C;
		  /* 8221CF7Ch */ case   11:  		/* lwzu R10, <#[R11 + 4]> */
		/* 8221CF7Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8221CF7Ch case   11:*/		return 0x8221CF80;
		  /* 8221CF80h */ case   12:  		/* lwz R9, <#[R3 + 2136]> */
		/* 8221CF80h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000858) );
		/* 8221CF80h case   12:*/		return 0x8221CF84;
		  /* 8221CF84h */ case   13:  		/* rlwinm R9, R9, 18, 31, 31 */
		/* 8221CF84h case   13:*/		cpu::op::rlwinm<0,18,31,31>(regs,&regs.R9,regs.R9);
		/* 8221CF84h case   13:*/		return 0x8221CF88;
		  /* 8221CF88h */ case   14:  		/* stb R9, <#[R10 + 40]> */
		/* 8221CF88h case   14:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R10 + 0x00000028) );
		/* 8221CF88h case   14:*/		return 0x8221CF8C;
		  /* 8221CF8Ch */ case   15:  		/* bc 16, CR0_LT, -48 */
		/* 8221CF8Ch case   15:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221CF5C;  }
		/* 8221CF8Ch case   15:*/		return 0x8221CF90;
		  /* 8221CF90h */ case   16:  		/* bclr 20, CR0_LT */
		/* 8221CF90h case   16:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221CF90h case   16:*/		return 0x8221CF94;
	}
	return 0x8221CF94;
} // Block from 8221CF50h-8221CF94h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8221CF94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CF94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CF94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CF94);
		  /* 8221CF94h */ case    0:  		/* nop */
		/* 8221CF94h case    0:*/		cpu::op::nop();
		/* 8221CF94h case    0:*/		return 0x8221CF98;
	}
	return 0x8221CF98;
} // Block from 8221CF94h-8221CF98h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221CF98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CF98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CF98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CF98);
		  /* 8221CF98h */ case    0:  		/* mfspr R12, LR */
		/* 8221CF98h case    0:*/		regs.R12 = regs.LR;
		/* 8221CF98h case    0:*/		return 0x8221CF9C;
		  /* 8221CF9Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8221CF9Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221CF9Ch case    1:*/		return 0x8221CFA0;
	}
	return 0x8221CFA0;
} // Block from 8221CF98h-8221CFA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221CFA0h
// Function '?GetTextureFetchConstForPolyStipple@Compiler@XGRAPHICS@@QAAIXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CFA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CFA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CFA0);
		  /* 8221CFA0h */ case    0:  		/* std R5, <#[R1 + 32]> */
		/* 8221CFA0h case    0:*/		cpu::mem::store64( regs, regs.R5, (uint32)(regs.R1 + 0x00000020) );
		/* 8221CFA0h case    0:*/		return 0x8221CFA4;
		  /* 8221CFA4h */ case    1:  		/* std R6, <#[R1 + 40]> */
		/* 8221CFA4h case    1:*/		cpu::mem::store64( regs, regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 8221CFA4h case    1:*/		return 0x8221CFA8;
		  /* 8221CFA8h */ case    2:  		/* std R7, <#[R1 + 48]> */
		/* 8221CFA8h case    2:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R1 + 0x00000030) );
		/* 8221CFA8h case    2:*/		return 0x8221CFAC;
		  /* 8221CFACh */ case    3:  		/* std R8, <#[R1 + 56]> */
		/* 8221CFACh case    3:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R1 + 0x00000038) );
		/* 8221CFACh case    3:*/		return 0x8221CFB0;
		  /* 8221CFB0h */ case    4:  		/* std R9, <#[R1 + 64]> */
		/* 8221CFB0h case    4:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000040) );
		/* 8221CFB0h case    4:*/		return 0x8221CFB4;
		  /* 8221CFB4h */ case    5:  		/* std R10, <#[R1 + 72]> */
		/* 8221CFB4h case    5:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000048) );
		/* 8221CFB4h case    5:*/		return 0x8221CFB8;
		  /* 8221CFB8h */ case    6:  		/* stwu R1, <#[R1 - 96]> */
		/* 8221CFB8h case    6:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8221CFB8h case    6:*/		return 0x8221CFBC;
		  /* 8221CFBCh */ case    7:  		/* stw R4, <#[R1 + 124]> */
		/* 8221CFBCh case    7:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000007C) );
		/* 8221CFBCh case    7:*/		return 0x8221CFC0;
		  /* 8221CFC0h */ case    8:  		/* addi R11, R1, 80 */
		/* 8221CFC0h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8221CFC0h case    8:*/		return 0x8221CFC4;
		  /* 8221CFC4h */ case    9:  		/* addi R10, R1, 128 */
		/* 8221CFC4h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 8221CFC4h case    9:*/		return 0x8221CFC8;
		  /* 8221CFC8h */ case   10:  		/* stw R10, <#[R11]> */
		/* 8221CFC8h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221CFC8h case   10:*/		return 0x8221CFCC;
		  /* 8221CFCCh */ case   11:  		/* lwz R5, <#[R1 + 80]> */
		/* 8221CFCCh case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000050) );
		/* 8221CFCCh case   11:*/		return 0x8221CFD0;
		  /* 8221CFD0h */ case   12:  		/* bl -1360 */
		/* 8221CFD0h case   12:*/		regs.LR = 0x8221CFD4; return 0x8221CA80;
		/* 8221CFD0h case   12:*/		return 0x8221CFD4;
		  /* 8221CFD4h */ case   13:  		/* addi R1, R1, 96 */
		/* 8221CFD4h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8221CFD4h case   13:*/		return 0x8221CFD8;
		  /* 8221CFD8h */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 8221CFD8h case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221CFD8h case   14:*/		return 0x8221CFDC;
		  /* 8221CFDCh */ case   15:  		/* mtspr LR, R12 */
		/* 8221CFDCh case   15:*/		regs.LR = regs.R12;
		/* 8221CFDCh case   15:*/		return 0x8221CFE0;
		  /* 8221CFE0h */ case   16:  		/* bclr 20, CR0_LT */
		/* 8221CFE0h case   16:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221CFE0h case   16:*/		return 0x8221CFE4;
	}
	return 0x8221CFE4;
} // Block from 8221CFA0h-8221CFE4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8221CFE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CFE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CFE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CFE4);
		  /* 8221CFE4h */ case    0:  		/* nop */
		/* 8221CFE4h case    0:*/		cpu::op::nop();
		/* 8221CFE4h case    0:*/		return 0x8221CFE8;
	}
	return 0x8221CFE8;
} // Block from 8221CFE4h-8221CFE8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221CFE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221CFE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221CFE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221CFE8);
		  /* 8221CFE8h */ case    0:  		/* mfspr R12, LR */
		/* 8221CFE8h case    0:*/		regs.R12 = regs.LR;
		/* 8221CFE8h case    0:*/		return 0x8221CFEC;
		  /* 8221CFECh */ case    1:  		/* bl -1621404 */
		/* 8221CFECh case    1:*/		regs.LR = 0x8221CFF0; return 0x82091250;
		/* 8221CFECh case    1:*/		return 0x8221CFF0;
		  /* 8221CFF0h */ case    2:  		/* stwu R1, <#[R1 - 304]> */
		/* 8221CFF0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFED0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFED0);
		/* 8221CFF0h case    2:*/		return 0x8221CFF4;
		  /* 8221CFF4h */ case    3:  		/* lwz R11, <#[R3 + 1500]> */
		/* 8221CFF4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000005DC) );
		/* 8221CFF4h case    3:*/		return 0x8221CFF8;
		  /* 8221CFF8h */ case    4:  		/* li R26, 0 */
		/* 8221CFF8h case    4:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 8221CFF8h case    4:*/		return 0x8221CFFC;
		  /* 8221CFFCh */ case    5:  		/* mr R30, R3 */
		/* 8221CFFCh case    5:*/		regs.R30 = regs.R3;
		/* 8221CFFCh case    5:*/		return 0x8221D000;
		  /* 8221D000h */ case    6:  		/* mr R31, R26 */
		/* 8221D000h case    6:*/		regs.R31 = regs.R26;
		/* 8221D000h case    6:*/		return 0x8221D004;
		  /* 8221D004h */ case    7:  		/* cmpwi CR6, R11, 0 */
		/* 8221D004h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8221D004h case    7:*/		return 0x8221D008;
	}
	return 0x8221D008;
} // Block from 8221CFE8h-8221D008h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8221D008h
// Function '?GetVertexFetchConst@Compiler@XGRAPHICS@@QAAIHPAI0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D008);
		  /* 8221D008h */ case    0:  		/* bc 4, CR6_GT, 68 */
		/* 8221D008h case    0:*/		if ( !regs.CR[6].gt ) { return 0x8221D04C;  }
		/* 8221D008h case    0:*/		return 0x8221D00C;
		  /* 8221D00Ch */ case    1:  		/* rlwinm R27, R11, 0, 0, 31 */
		/* 8221D00Ch case    1:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R27,regs.R11);
		/* 8221D00Ch case    1:*/		return 0x8221D010;
		  /* 8221D010h */ case    2:  		/* lwz R28, <#[R3 + 1496]> */
		/* 8221D010h case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + 0x000005D8) );
		/* 8221D010h case    2:*/		return 0x8221D014;
		  /* 8221D014h */ case    3:  		/* lis R11, -32255 */
		/* 8221D014h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8221D014h case    3:*/		return 0x8221D018;
		  /* 8221D018h */ case    4:  		/* addi R29, R11, -10432 */
		/* 8221D018h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFD740);
		/* 8221D018h case    4:*/		return 0x8221D01C;
		  /* 8221D01Ch */ case    5:  		/* add R4, R28, R31 */
		/* 8221D01Ch case    5:*/		cpu::op::add<0>(regs,&regs.R4,regs.R28,regs.R31);
		/* 8221D01Ch case    5:*/		return 0x8221D020;
		  /* 8221D020h */ case    6:  		/* addi R3, R1, 112 */
		/* 8221D020h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 8221D020h case    6:*/		return 0x8221D024;
		  /* 8221D024h */ case    7:  		/* li R5, 128 */
		/* 8221D024h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x80);
		/* 8221D024h case    7:*/		return 0x8221D028;
		  /* 8221D028h */ case    8:  		/* bl -1619576 */
		/* 8221D028h case    8:*/		regs.LR = 0x8221D02C; return 0x820919B0;
		/* 8221D028h case    8:*/		return 0x8221D02C;
		  /* 8221D02Ch */ case    9:  		/* stb R26, <#[R1 + 240]> */
		/* 8221D02Ch case    9:*/		cpu::mem::store8( regs, regs.R26, (uint32)(regs.R1 + 0x000000F0) );
		/* 8221D02Ch case    9:*/		return 0x8221D030;
		  /* 8221D030h */ case   10:  		/* mr R4, R29 */
		/* 8221D030h case   10:*/		regs.R4 = regs.R29;
		/* 8221D030h case   10:*/		return 0x8221D034;
		  /* 8221D034h */ case   11:  		/* addi R5, R1, 112 */
		/* 8221D034h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 8221D034h case   11:*/		return 0x8221D038;
		  /* 8221D038h */ case   12:  		/* mr R3, R30 */
		/* 8221D038h case   12:*/		regs.R3 = regs.R30;
		/* 8221D038h case   12:*/		return 0x8221D03C;
		  /* 8221D03Ch */ case   13:  		/* bl 900 */
		/* 8221D03Ch case   13:*/		regs.LR = 0x8221D040; return 0x8221D3C0;
		/* 8221D03Ch case   13:*/		return 0x8221D040;
		  /* 8221D040h */ case   14:  		/* addi R31, R31, 128 */
		/* 8221D040h case   14:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x80);
		/* 8221D040h case   14:*/		return 0x8221D044;
		  /* 8221D044h */ case   15:  		/* cmpw CR6, R31, R27 */
		/* 8221D044h case   15:*/		cpu::op::cmpw<6>(regs,regs.R31,regs.R27);
		/* 8221D044h case   15:*/		return 0x8221D048;
		  /* 8221D048h */ case   16:  		/* bc 12, CR6_LT, -44 */
		/* 8221D048h case   16:*/		if ( regs.CR[6].lt ) { return 0x8221D01C;  }
		/* 8221D048h case   16:*/		return 0x8221D04C;
	}
	return 0x8221D04C;
} // Block from 8221D008h-8221D04Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8221D04Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D04C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D04C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D04C);
		  /* 8221D04Ch */ case    0:  		/* lis R11, -32256 */
		/* 8221D04Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8221D04Ch case    0:*/		return 0x8221D050;
		  /* 8221D050h */ case    1:  		/* mr R3, R30 */
		/* 8221D050h case    1:*/		regs.R3 = regs.R30;
		/* 8221D050h case    1:*/		return 0x8221D054;
		  /* 8221D054h */ case    2:  		/* addi R4, R11, 17768 */
		/* 8221D054h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4568);
		/* 8221D054h case    2:*/		return 0x8221D058;
		  /* 8221D058h */ case    3:  		/* bl 872 */
		/* 8221D058h case    3:*/		regs.LR = 0x8221D05C; return 0x8221D3C0;
		/* 8221D058h case    3:*/		return 0x8221D05C;
		  /* 8221D05Ch */ case    4:  		/* stw R26, <#[R30 + 1500]> */
		/* 8221D05Ch case    4:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R30 + 0x000005DC) );
		/* 8221D05Ch case    4:*/		return 0x8221D060;
	}
	return 0x8221D060;
} // Block from 8221D04Ch-8221D060h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221D060h
// Function '?Free@Arena@XGRAPHICS@@QBAXPAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D060);
		  /* 8221D060h */ case    0:  		/* stw R26, <#[R30 + 1504]> */
		/* 8221D060h case    0:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R30 + 0x000005E0) );
		/* 8221D060h case    0:*/		return 0x8221D064;
		  /* 8221D064h */ case    1:  		/* addi R1, R1, 304 */
		/* 8221D064h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x130);
		/* 8221D064h case    1:*/		return 0x8221D068;
		  /* 8221D068h */ case    2:  		/* b -1621448 */
		/* 8221D068h case    2:*/		return 0x820912A0;
		/* 8221D068h case    2:*/		return 0x8221D06C;
		  /* 8221D06Ch */ case    3:  		/* nop */
		/* 8221D06Ch case    3:*/		cpu::op::nop();
		/* 8221D06Ch case    3:*/		return 0x8221D070;
	}
	return 0x8221D070;
} // Block from 8221D060h-8221D070h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221D070h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D070( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D070) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D070);
		  /* 8221D070h */ case    0:  		/* mfspr R12, LR */
		/* 8221D070h case    0:*/		regs.R12 = regs.LR;
		/* 8221D070h case    0:*/		return 0x8221D074;
		  /* 8221D074h */ case    1:  		/* bl -1621528 */
		/* 8221D074h case    1:*/		regs.LR = 0x8221D078; return 0x8209125C;
		/* 8221D074h case    1:*/		return 0x8221D078;
		  /* 8221D078h */ case    2:  		/* stwu R1, <#[R1 - 368]> */
		/* 8221D078h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE90);
		/* 8221D078h case    2:*/		return 0x8221D07C;
		  /* 8221D07Ch */ case    3:  		/* lis R11, -32217 */
		/* 8221D07Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8221D07Ch case    3:*/		return 0x8221D080;
		  /* 8221D080h */ case    4:  		/* mr R30, R3 */
		/* 8221D080h case    4:*/		regs.R30 = regs.R3;
		/* 8221D080h case    4:*/		return 0x8221D084;
		  /* 8221D084h */ case    5:  		/* addi R31, R11, 19864 */
		/* 8221D084h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4D98);
		/* 8221D084h case    5:*/		return 0x8221D088;
		  /* 8221D088h */ case    6:  		/* mr R6, R5 */
		/* 8221D088h case    6:*/		regs.R6 = regs.R5;
		/* 8221D088h case    6:*/		return 0x8221D08C;
		  /* 8221D08Ch */ case    7:  		/* lwz R11, <#[R31 + 176]> */
		/* 8221D08Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000B0) );
		/* 8221D08Ch case    7:*/		return 0x8221D090;
		  /* 8221D090h */ case    8:  		/* cmpwi CR6, R11, 0 */
		/* 8221D090h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8221D090h case    8:*/		return 0x8221D094;
		  /* 8221D094h */ case    9:  		/* bc 12, CR6_EQ, 88 */
		/* 8221D094h case    9:*/		if ( regs.CR[6].eq ) { return 0x8221D0EC;  }
		/* 8221D094h case    9:*/		return 0x8221D098;
		  /* 8221D098h */ case   10:  		/* mr R5, R4 */
		/* 8221D098h case   10:*/		regs.R5 = regs.R4;
		/* 8221D098h case   10:*/		return 0x8221D09C;
		  /* 8221D09Ch */ case   11:  		/* li R4, 255 */
		/* 8221D09Ch case   11:*/		cpu::op::li<0>(regs,&regs.R4,0xFF);
		/* 8221D09Ch case   11:*/		return 0x8221D0A0;
		  /* 8221D0A0h */ case   12:  		/* addi R3, R1, 80 */
		/* 8221D0A0h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8221D0A0h case   12:*/		return 0x8221D0A4;
		  /* 8221D0A4h */ case   13:  		/* bl -1581276 */
		/* 8221D0A4h case   13:*/		regs.LR = 0x8221D0A8; return 0x8209AFC8;
		/* 8221D0A4h case   13:*/		return 0x8221D0A8;
		  /* 8221D0A8h */ case   14:  		/* addi R11, R1, 80 */
		/* 8221D0A8h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8221D0A8h case   14:*/		return 0x8221D0AC;
		  /* 8221D0ACh */ case   15:  		/* li R29, 0 */
		/* 8221D0ACh case   15:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8221D0ACh case   15:*/		return 0x8221D0B0;
		  /* 8221D0B0h */ case   16:  		/* stbx R29, <#[R3 + R11]> */
		/* 8221D0B0h case   16:*/		cpu::mem::store8( regs, regs.R29, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 8221D0B0h case   16:*/		return 0x8221D0B4;
		  /* 8221D0B4h */ case   17:  		/* lbz R11, <#[R1 + 80]> */
		/* 8221D0B4h case   17:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8221D0B4h case   17:*/		return 0x8221D0B8;
		  /* 8221D0B8h */ case   18:  		/* cmplwi CR0, R11, 0 */
		/* 8221D0B8h case   18:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221D0B8h case   18:*/		return 0x8221D0BC;
		  /* 8221D0BCh */ case   19:  		/* bc 12, CR0_EQ, 48 */
		/* 8221D0BCh case   19:*/		if ( regs.CR[0].eq ) { return 0x8221D0EC;  }
		/* 8221D0BCh case   19:*/		return 0x8221D0C0;
		  /* 8221D0C0h */ case   20:  		/* lwz R11, <#[R31 + 176]> */
		/* 8221D0C0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000B0) );
		/* 8221D0C0h case   20:*/		return 0x8221D0C4;
		  /* 8221D0C4h */ case   21:  		/* cmpwi CR6, R11, 2 */
		/* 8221D0C4h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8221D0C4h case   21:*/		return 0x8221D0C8;
		  /* 8221D0C8h */ case   22:  		/* bc 4, CR6_EQ, 36 */
		/* 8221D0C8h case   22:*/		if ( !regs.CR[6].eq ) { return 0x8221D0EC;  }
		/* 8221D0C8h case   22:*/		return 0x8221D0CC;
		  /* 8221D0CCh */ case   23:  		/* lbz R11, <#[R30 + 1368]> */
		/* 8221D0CCh case   23:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000558) );
		/* 8221D0CCh case   23:*/		return 0x8221D0D0;
		  /* 8221D0D0h */ case   24:  		/* cmplwi CR0, R11, 0 */
		/* 8221D0D0h case   24:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221D0D0h case   24:*/		return 0x8221D0D4;
		  /* 8221D0D4h */ case   25:  		/* bc 12, CR0_EQ, 24 */
		/* 8221D0D4h case   25:*/		if ( regs.CR[0].eq ) { return 0x8221D0EC;  }
		/* 8221D0D4h case   25:*/		return 0x8221D0D8;
		  /* 8221D0D8h */ case   26:  		/* lis R11, -32252 */
		/* 8221D0D8h case   26:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221D0D8h case   26:*/		return 0x8221D0DC;
		  /* 8221D0DCh */ case   27:  		/* addi R3, R11, -2976 */
		/* 8221D0DCh case   27:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0xFFFFF460);
		/* 8221D0DCh case   27:*/		return 0x8221D0E0;
	}
	return 0x8221D0E0;
} // Block from 8221D070h-8221D0E0h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8221D0E0h
// Function '?GetTextureFetchConst@Compiler@XGRAPHICS@@QAAIH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D0E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D0E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D0E0);
		  /* 8221D0E0h */ case    0:  		/* bl -807560 */
		/* 8221D0E0h case    0:*/		regs.LR = 0x8221D0E4; return 0x82157E58;
		/* 8221D0E0h case    0:*/		return 0x8221D0E4;
		  /* 8221D0E4h */ case    1:  		/* stw R3, <#[R30 + 1372]> */
		/* 8221D0E4h case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000055C) );
		/* 8221D0E4h case    1:*/		return 0x8221D0E8;
		  /* 8221D0E8h */ case    2:  		/* stb R29, <#[R30 + 1368]> */
		/* 8221D0E8h case    2:*/		cpu::mem::store8( regs, regs.R29, (uint32)(regs.R30 + 0x00000558) );
		/* 8221D0E8h case    2:*/		return 0x8221D0EC;
	}
	return 0x8221D0EC;
} // Block from 8221D0E0h-8221D0ECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221D0ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D0EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D0EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D0EC);
		  /* 8221D0ECh */ case    0:  		/* addi R1, R1, 368 */
		/* 8221D0ECh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x170);
		/* 8221D0ECh case    0:*/		return 0x8221D0F0;
		  /* 8221D0F0h */ case    1:  		/* b -1621572 */
		/* 8221D0F0h case    1:*/		return 0x820912AC;
		/* 8221D0F0h case    1:*/		return 0x8221D0F4;
		  /* 8221D0F4h */ case    2:  		/* nop */
		/* 8221D0F4h case    2:*/		cpu::op::nop();
		/* 8221D0F4h case    2:*/		return 0x8221D0F8;
	}
	return 0x8221D0F8;
} // Block from 8221D0ECh-8221D0F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221D0F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D0F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D0F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D0F8);
		  /* 8221D0F8h */ case    0:  		/* mfspr R12, LR */
		/* 8221D0F8h case    0:*/		regs.R12 = regs.LR;
		/* 8221D0F8h case    0:*/		return 0x8221D0FC;
		  /* 8221D0FCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8221D0FCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221D0FCh case    1:*/		return 0x8221D100;
		  /* 8221D100h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8221D100h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221D100h case    2:*/		return 0x8221D104;
		  /* 8221D104h */ case    3:  		/* std R5, <#[R1 + 32]> */
		/* 8221D104h case    3:*/		cpu::mem::store64( regs, regs.R5, (uint32)(regs.R1 + 0x00000020) );
		/* 8221D104h case    3:*/		return 0x8221D108;
		  /* 8221D108h */ case    4:  		/* std R6, <#[R1 + 40]> */
		/* 8221D108h case    4:*/		cpu::mem::store64( regs, regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 8221D108h case    4:*/		return 0x8221D10C;
		  /* 8221D10Ch */ case    5:  		/* std R7, <#[R1 + 48]> */
		/* 8221D10Ch case    5:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R1 + 0x00000030) );
		/* 8221D10Ch case    5:*/		return 0x8221D110;
		  /* 8221D110h */ case    6:  		/* std R8, <#[R1 + 56]> */
		/* 8221D110h case    6:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R1 + 0x00000038) );
		/* 8221D110h case    6:*/		return 0x8221D114;
		  /* 8221D114h */ case    7:  		/* std R9, <#[R1 + 64]> */
		/* 8221D114h case    7:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000040) );
		/* 8221D114h case    7:*/		return 0x8221D118;
		  /* 8221D118h */ case    8:  		/* std R10, <#[R1 + 72]> */
		/* 8221D118h case    8:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000048) );
		/* 8221D118h case    8:*/		return 0x8221D11C;
		  /* 8221D11Ch */ case    9:  		/* stwu R1, <#[R1 - 112]> */
		/* 8221D11Ch case    9:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8221D11Ch case    9:*/		return 0x8221D120;
		  /* 8221D120h */ case   10:  		/* stw R4, <#[R1 + 140]> */
		/* 8221D120h case   10:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000008C) );
		/* 8221D120h case   10:*/		return 0x8221D124;
		  /* 8221D124h */ case   11:  		/* addi R11, R1, 80 */
		/* 8221D124h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8221D124h case   11:*/		return 0x8221D128;
		  /* 8221D128h */ case   12:  		/* addi R10, R1, 144 */
		/* 8221D128h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x90);
		/* 8221D128h case   12:*/		return 0x8221D12C;
		  /* 8221D12Ch */ case   13:  		/* mr R31, R3 */
		/* 8221D12Ch case   13:*/		regs.R31 = regs.R3;
		/* 8221D12Ch case   13:*/		return 0x8221D130;
		  /* 8221D130h */ case   14:  		/* stw R10, <#[R11]> */
		/* 8221D130h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221D130h case   14:*/		return 0x8221D134;
		  /* 8221D134h */ case   15:  		/* lwz R5, <#[R1 + 80]> */
		/* 8221D134h case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000050) );
		/* 8221D134h case   15:*/		return 0x8221D138;
		  /* 8221D138h */ case   16:  		/* bl -200 */
		/* 8221D138h case   16:*/		regs.LR = 0x8221D13C; return 0x8221D070;
		/* 8221D138h case   16:*/		return 0x8221D13C;
		  /* 8221D13Ch */ case   17:  		/* mr R3, R31 */
		/* 8221D13Ch case   17:*/		regs.R3 = regs.R31;
		/* 8221D13Ch case   17:*/		return 0x8221D140;
		  /* 8221D140h */ case   18:  		/* bl -1552 */
		/* 8221D140h case   18:*/		regs.LR = 0x8221D144; return 0x8221CB30;
		/* 8221D140h case   18:*/		return 0x8221D144;
		  /* 8221D144h */ case   19:  		/* addi R1, R1, 112 */
		/* 8221D144h case   19:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8221D144h case   19:*/		return 0x8221D148;
	}
	return 0x8221D148;
} // Block from 8221D0F8h-8221D148h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8221D148h
// Function '?SetConstByValue@ShaderOutput@XGRAPHICS@@UAAXHHM@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D148);
		  /* 8221D148h */ case    0:  		/* lwz R12, <#[R1 - 8]> */
		/* 8221D148h case    0:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221D148h case    0:*/		return 0x8221D14C;
		  /* 8221D14Ch */ case    1:  		/* mtspr LR, R12 */
		/* 8221D14Ch case    1:*/		regs.LR = regs.R12;
		/* 8221D14Ch case    1:*/		return 0x8221D150;
	}
	return 0x8221D150;
} // Block from 8221D148h-8221D150h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221D150h
// Function '?SetConstByValue@ShaderPairOutput@XGRAPHICS@@UAAXHHM@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D150);
		  /* 8221D150h */ case    0:  		/* ld R31, <#[R1 - 16]> */
		/* 8221D150h case    0:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221D150h case    0:*/		return 0x8221D154;
		  /* 8221D154h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8221D154h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221D154h case    1:*/		return 0x8221D158;
	}
	return 0x8221D158;
} // Block from 8221D150h-8221D158h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221D158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D158);
		  /* 8221D158h */ case    0:  		/* mfspr R12, LR */
		/* 8221D158h case    0:*/		regs.R12 = regs.LR;
		/* 8221D158h case    0:*/		return 0x8221D15C;
		  /* 8221D15Ch */ case    1:  		/* bl -1621760 */
		/* 8221D15Ch case    1:*/		regs.LR = 0x8221D160; return 0x8209125C;
		/* 8221D15Ch case    1:*/		return 0x8221D160;
		  /* 8221D160h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8221D160h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8221D160h case    2:*/		return 0x8221D164;
		  /* 8221D164h */ case    3:  		/* li R10, 20 */
		/* 8221D164h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x14);
		/* 8221D164h case    3:*/		return 0x8221D168;
		  /* 8221D168h */ case    4:  		/* li R30, 0 */
		/* 8221D168h case    4:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8221D168h case    4:*/		return 0x8221D16C;
		  /* 8221D16Ch */ case    5:  		/* li R9, -1 */
		/* 8221D16Ch case    5:*/		cpu::op::li<0>(regs,&regs.R9,0xFFFFFFFF);
		/* 8221D16Ch case    5:*/		return 0x8221D170;
	}
	return 0x8221D170;
} // Block from 8221D158h-8221D170h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221D170h
// Function '?SetConstByName@ShaderPairOutput@XGRAPHICS@@UAAXHHHH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D170);
		  /* 8221D170h */ case    0:  		/* mr R31, R3 */
		/* 8221D170h case    0:*/		regs.R31 = regs.R3;
		/* 8221D170h case    0:*/		return 0x8221D174;
		  /* 8221D174h */ case    1:  		/* stw R30, <#[R3 + 2732]> */
		/* 8221D174h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000AAC) );
		/* 8221D174h case    1:*/		return 0x8221D178;
		  /* 8221D178h */ case    2:  		/* addi R11, R3, 2040 */
		/* 8221D178h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x7F8);
		/* 8221D178h case    2:*/		return 0x8221D17C;
		  /* 8221D17Ch */ case    3:  		/* stw R30, <#[R3 + 1364]> */
		/* 8221D17Ch case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000554) );
		/* 8221D17Ch case    3:*/		return 0x8221D180;
		  /* 8221D180h */ case    4:  		/* stw R9, <#[R3 + 2036]> */
		/* 8221D180h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x000007F4) );
		/* 8221D180h case    4:*/		return 0x8221D184;
		  /* 8221D184h */ case    5:  		/* mtspr CTR, R10 */
		/* 8221D184h case    5:*/		regs.CTR = regs.R10;
		/* 8221D184h case    5:*/		return 0x8221D188;
		  /* 8221D188h */ case    6:  		/* stw R30, <#[R3 + 2032]> */
		/* 8221D188h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x000007F0) );
		/* 8221D188h case    6:*/		return 0x8221D18C;
		  /* 8221D18Ch */ case    7:  		/* stb R30, <#[R3 + 2029]> */
		/* 8221D18Ch case    7:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R3 + 0x000007ED) );
		/* 8221D18Ch case    7:*/		return 0x8221D190;
	}
	return 0x8221D190;
} // Block from 8221D170h-8221D190h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8221D190h
// Function '?SetInterpUsage@ShaderPairOutput@XGRAPHICS@@UAAXHHHHPAH00@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D190);
		  /* 8221D190h */ case    0:  		/* stb R30, <#[R3 + 2025]> */
		/* 8221D190h case    0:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R3 + 0x000007E9) );
		/* 8221D190h case    0:*/		return 0x8221D194;
		  /* 8221D194h */ case    1:  		/* stb R30, <#[R3 + 2026]> */
		/* 8221D194h case    1:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R3 + 0x000007EA) );
		/* 8221D194h case    1:*/		return 0x8221D198;
		  /* 8221D198h */ case    2:  		/* stb R30, <#[R3 + 2028]> */
		/* 8221D198h case    2:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R3 + 0x000007EC) );
		/* 8221D198h case    2:*/		return 0x8221D19C;
		  /* 8221D19Ch */ case    3:  		/* stb R30, <#[R3 + 2027]> */
		/* 8221D19Ch case    3:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R3 + 0x000007EB) );
		/* 8221D19Ch case    3:*/		return 0x8221D1A0;
		  /* 8221D1A0h */ case    4:  		/* stb R30, <#[R3 + 2030]> */
		/* 8221D1A0h case    4:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R3 + 0x000007EE) );
		/* 8221D1A0h case    4:*/		return 0x8221D1A4;
		  /* 8221D1A4h */ case    5:  		/* stb R30, <#[R3 + 2024]> */
		/* 8221D1A4h case    5:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R3 + 0x000007E8) );
		/* 8221D1A4h case    5:*/		return 0x8221D1A8;
		  /* 8221D1A8h */ case    6:  		/* stw R30, <#[R3 + 2124]> */
		/* 8221D1A8h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x0000084C) );
		/* 8221D1A8h case    6:*/		return 0x8221D1AC;
		  /* 8221D1ACh */ case    7:  		/* stw R30, <#[R3 + 2040]> */
		/* 8221D1ACh case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x000007F8) );
		/* 8221D1ACh case    7:*/		return 0x8221D1B0;
		  /* 8221D1B0h */ case    8:  		/* stw R30, <#[R11 - 500]> */
		/* 8221D1B0h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0xFFFFFE0C) );
		/* 8221D1B0h case    8:*/		return 0x8221D1B4;
		  /* 8221D1B4h */ case    9:  		/* stw R30, <#[R11 - 420]> */
		/* 8221D1B4h case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0xFFFFFE5C) );
		/* 8221D1B4h case    9:*/		return 0x8221D1B8;
		  /* 8221D1B8h */ case   10:  		/* stw R30, <#[R11 - 340]> */
		/* 8221D1B8h case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0xFFFFFEAC) );
		/* 8221D1B8h case   10:*/		return 0x8221D1BC;
		  /* 8221D1BCh */ case   11:  		/* stw R30, <#[R11 - 260]> */
		/* 8221D1BCh case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0xFFFFFEFC) );
		/* 8221D1BCh case   11:*/		return 0x8221D1C0;
		  /* 8221D1C0h */ case   12:  		/* stw R30, <#[R11 - 180]> */
		/* 8221D1C0h case   12:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0xFFFFFF4C) );
		/* 8221D1C0h case   12:*/		return 0x8221D1C4;
		  /* 8221D1C4h */ case   13:  		/* stwu R30, <#[R11 + 4]> */
		/* 8221D1C4h case   13:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8221D1C4h case   13:*/		return 0x8221D1C8;
		  /* 8221D1C8h */ case   14:  		/* bc 16, CR0_LT, -24 */
		/* 8221D1C8h case   14:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221D1B0;  }
		/* 8221D1C8h case   14:*/		return 0x8221D1CC;
		  /* 8221D1CCh */ case   15:  		/* mr R29, R30 */
		/* 8221D1CCh case   15:*/		regs.R29 = regs.R30;
		/* 8221D1CCh case   15:*/		return 0x8221D1D0;
		  /* 8221D1D0h */ case   16:  		/* mr R4, R29 */
		/* 8221D1D0h case   16:*/		regs.R4 = regs.R29;
		/* 8221D1D0h case   16:*/		return 0x8221D1D4;
		  /* 8221D1D4h */ case   17:  		/* mr R3, R31 */
		/* 8221D1D4h case   17:*/		regs.R3 = regs.R31;
		/* 8221D1D4h case   17:*/		return 0x8221D1D8;
		  /* 8221D1D8h */ case   18:  		/* bl -1456 */
		/* 8221D1D8h case   18:*/		regs.LR = 0x8221D1DC; return 0x8221CC28;
		/* 8221D1D8h case   18:*/		return 0x8221D1DC;
		  /* 8221D1DCh */ case   19:  		/* addi R29, R29, 1 */
		/* 8221D1DCh case   19:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8221D1DCh case   19:*/		return 0x8221D1E0;
		  /* 8221D1E0h */ case   20:  		/* cmpwi CR6, R29, 3 */
		/* 8221D1E0h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000003);
		/* 8221D1E0h case   20:*/		return 0x8221D1E4;
		  /* 8221D1E4h */ case   21:  		/* bc 12, CR6_LT, -20 */
		/* 8221D1E4h case   21:*/		if ( regs.CR[6].lt ) { return 0x8221D1D0;  }
		/* 8221D1E4h case   21:*/		return 0x8221D1E8;
		  /* 8221D1E8h */ case   22:  		/* li R4, 8192 */
		/* 8221D1E8h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x2000);
		/* 8221D1E8h case   22:*/		return 0x8221D1EC;
		  /* 8221D1ECh */ case   23:  		/* lwz R3, <#[R31 + 1448]> */
		/* 8221D1ECh case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005A8) );
		/* 8221D1ECh case   23:*/		return 0x8221D1F0;
		  /* 8221D1F0h */ case   24:  		/* bl -3384 */
		/* 8221D1F0h case   24:*/		regs.LR = 0x8221D1F4; return 0x8221C4B8;
		/* 8221D1F0h case   24:*/		return 0x8221D1F4;
		  /* 8221D1F4h */ case   25:  		/* stw R3, <#[R31 + 1496]> */
		/* 8221D1F4h case   25:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000005D8) );
		/* 8221D1F4h case   25:*/		return 0x8221D1F8;
		  /* 8221D1F8h */ case   26:  		/* stw R30, <#[R31 + 1500]> */
		/* 8221D1F8h case   26:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x000005DC) );
		/* 8221D1F8h case   26:*/		return 0x8221D1FC;
		  /* 8221D1FCh */ case   27:  		/* stw R30, <#[R31 + 1504]> */
		/* 8221D1FCh case   27:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x000005E0) );
		/* 8221D1FCh case   27:*/		return 0x8221D200;
		  /* 8221D200h */ case   28:  		/* addi R1, R1, 112 */
		/* 8221D200h case   28:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8221D200h case   28:*/		return 0x8221D204;
		  /* 8221D204h */ case   29:  		/* b -1621848 */
		/* 8221D204h case   29:*/		return 0x820912AC;
		/* 8221D204h case   29:*/		return 0x8221D208;
		  /* 8221D208h */ case   30:  		/* li R11, 0 */
		/* 8221D208h case   30:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8221D208h case   30:*/		return 0x8221D20C;
		  /* 8221D20Ch */ case   31:  		/* li R10, 1 */
		/* 8221D20Ch case   31:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8221D20Ch case   31:*/		return 0x8221D210;
		  /* 8221D210h */ case   32:  		/* li R9, -1 */
		/* 8221D210h case   32:*/		cpu::op::li<0>(regs,&regs.R9,0xFFFFFFFF);
		/* 8221D210h case   32:*/		return 0x8221D214;
		  /* 8221D214h */ case   33:  		/* stw R11, <#[R3 + 1376]> */
		/* 8221D214h case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000560) );
		/* 8221D214h case   33:*/		return 0x8221D218;
		  /* 8221D218h */ case   34:  		/* li R8, 3 */
		/* 8221D218h case   34:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 8221D218h case   34:*/		return 0x8221D21C;
		  /* 8221D21Ch */ case   35:  		/* stb R11, <#[R3 + 1380]> */
		/* 8221D21Ch case   35:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R3 + 0x00000564) );
		/* 8221D21Ch case   35:*/		return 0x8221D220;
		  /* 8221D220h */ case   36:  		/* stw R11, <#[R3 + 1388]> */
		/* 8221D220h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000056C) );
		/* 8221D220h case   36:*/		return 0x8221D224;
		  /* 8221D224h */ case   37:  		/* stb R11, <#[R3 + 1393]> */
		/* 8221D224h case   37:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R3 + 0x00000571) );
		/* 8221D224h case   37:*/		return 0x8221D228;
		  /* 8221D228h */ case   38:  		/* stb R11, <#[R3 + 1392]> */
		/* 8221D228h case   38:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R3 + 0x00000570) );
		/* 8221D228h case   38:*/		return 0x8221D22C;
		  /* 8221D22Ch */ case   39:  		/* stb R11, <#[R3 + 1394]> */
		/* 8221D22Ch case   39:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R3 + 0x00000572) );
		/* 8221D22Ch case   39:*/		return 0x8221D230;
		  /* 8221D230h */ case   40:  		/* stw R11, <#[R3 + 1400]> */
		/* 8221D230h case   40:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000578) );
		/* 8221D230h case   40:*/		return 0x8221D234;
		  /* 8221D234h */ case   41:  		/* stb R10, <#[R3 + 1395]> */
		/* 8221D234h case   41:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R3 + 0x00000573) );
		/* 8221D234h case   41:*/		return 0x8221D238;
		  /* 8221D238h */ case   42:  		/* stb R11, <#[R3 + 1396]> */
		/* 8221D238h case   42:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R3 + 0x00000574) );
		/* 8221D238h case   42:*/		return 0x8221D23C;
		  /* 8221D23Ch */ case   43:  		/* stw R11, <#[R3 + 1404]> */
		/* 8221D23Ch case   43:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000057C) );
		/* 8221D23Ch case   43:*/		return 0x8221D240;
		  /* 8221D240h */ case   44:  		/* stw R11, <#[R3 + 1408]> */
		/* 8221D240h case   44:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000580) );
		/* 8221D240h case   44:*/		return 0x8221D244;
		  /* 8221D244h */ case   45:  		/* stw R10, <#[R3 + 1412]> */
		/* 8221D244h case   45:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000584) );
		/* 8221D244h case   45:*/		return 0x8221D248;
		  /* 8221D248h */ case   46:  		/* stw R11, <#[R3 + 1416]> */
		/* 8221D248h case   46:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000588) );
		/* 8221D248h case   46:*/		return 0x8221D24C;
		  /* 8221D24Ch */ case   47:  		/* stw R11, <#[R3 + 1420]> */
		/* 8221D24Ch case   47:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000058C) );
		/* 8221D24Ch case   47:*/		return 0x8221D250;
		  /* 8221D250h */ case   48:  		/* stw R11, <#[R3 + 1424]> */
		/* 8221D250h case   48:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000590) );
		/* 8221D250h case   48:*/		return 0x8221D254;
		  /* 8221D254h */ case   49:  		/* stw R11, <#[R3 + 1428]> */
		/* 8221D254h case   49:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000594) );
		/* 8221D254h case   49:*/		return 0x8221D258;
		  /* 8221D258h */ case   50:  		/* stw R11, <#[R3 + 1432]> */
		/* 8221D258h case   50:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000598) );
		/* 8221D258h case   50:*/		return 0x8221D25C;
		  /* 8221D25Ch */ case   51:  		/* stw R11, <#[R3 + 1508]> */
		/* 8221D25Ch case   51:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x000005E4) );
		/* 8221D25Ch case   51:*/		return 0x8221D260;
		  /* 8221D260h */ case   52:  		/* stw R11, <#[R3 + 1512]> */
		/* 8221D260h case   52:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x000005E8) );
		/* 8221D260h case   52:*/		return 0x8221D264;
		  /* 8221D264h */ case   53:  		/* stw R11, <#[R3 + 1516]> */
		/* 8221D264h case   53:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x000005EC) );
		/* 8221D264h case   53:*/		return 0x8221D268;
		  /* 8221D268h */ case   54:  		/* stw R11, <#[R3 + 1520]> */
		/* 8221D268h case   54:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x000005F0) );
		/* 8221D268h case   54:*/		return 0x8221D26C;
		  /* 8221D26Ch */ case   55:  		/* stw R9, <#[R3 + 1524]> */
		/* 8221D26Ch case   55:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x000005F4) );
		/* 8221D26Ch case   55:*/		return 0x8221D270;
		  /* 8221D270h */ case   56:  		/* stw R8, <#[R3 + 1528]> */
		/* 8221D270h case   56:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x000005F8) );
		/* 8221D270h case   56:*/		return 0x8221D274;
		  /* 8221D274h */ case   57:  		/* stw R11, <#[R3 + 1492]> */
		/* 8221D274h case   57:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x000005D4) );
		/* 8221D274h case   57:*/		return 0x8221D278;
		  /* 8221D278h */ case   58:  		/* stw R11, <#[R3 + 2708]> */
		/* 8221D278h case   58:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000A94) );
		/* 8221D278h case   58:*/		return 0x8221D27C;
		  /* 8221D27Ch */ case   59:  		/* bclr 20, CR0_LT */
		/* 8221D27Ch case   59:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221D27Ch case   59:*/		return 0x8221D280;
	}
	return 0x8221D280;
} // Block from 8221D190h-8221D280h (60 instructions)

//////////////////////////////////////////////////////
// Block at 8221D280h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D280);
		  /* 8221D280h */ case    0:  		/* mfspr R12, LR */
		/* 8221D280h case    0:*/		regs.R12 = regs.LR;
		/* 8221D280h case    0:*/		return 0x8221D284;
		  /* 8221D284h */ case    1:  		/* bl -1622060 */
		/* 8221D284h case    1:*/		regs.LR = 0x8221D288; return 0x82091258;
		/* 8221D284h case    1:*/		return 0x8221D288;
		  /* 8221D288h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8221D288h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8221D288h case    2:*/		return 0x8221D28C;
		  /* 8221D28Ch */ case    3:  		/* lwz R28, <#[R5 + 1448]> */
		/* 8221D28Ch case    3:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R5 + 0x000005A8) );
		/* 8221D28Ch case    3:*/		return 0x8221D290;
		  /* 8221D290h */ case    4:  		/* mr R30, R3 */
		/* 8221D290h case    4:*/		regs.R30 = regs.R3;
		/* 8221D290h case    4:*/		return 0x8221D294;
		  /* 8221D294h */ case    5:  		/* mr R29, R4 */
		/* 8221D294h case    5:*/		regs.R29 = regs.R4;
		/* 8221D294h case    5:*/		return 0x8221D298;
		  /* 8221D298h */ case    6:  		/* li R4, 24 */
		/* 8221D298h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x18);
		/* 8221D298h case    6:*/		return 0x8221D29C;
		  /* 8221D29Ch */ case    7:  		/* mr R3, R28 */
		/* 8221D29Ch case    7:*/		regs.R3 = regs.R28;
		/* 8221D29Ch case    7:*/		return 0x8221D2A0;
		  /* 8221D2A0h */ case    8:  		/* mr R31, R5 */
		/* 8221D2A0h case    8:*/		regs.R31 = regs.R5;
		/* 8221D2A0h case    8:*/		return 0x8221D2A4;
		  /* 8221D2A4h */ case    9:  		/* bl -3564 */
		/* 8221D2A4h case    9:*/		regs.LR = 0x8221D2A8; return 0x8221C4B8;
		/* 8221D2A4h case    9:*/		return 0x8221D2A8;
		  /* 8221D2A8h */ case   10:  		/* addic. R11, R3, 4 */
		/* 8221D2A8h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R3,0x4);
		/* 8221D2A8h case   10:*/		return 0x8221D2AC;
		  /* 8221D2ACh */ case   11:  		/* stw R28, <#[R3]> */
		/* 8221D2ACh case   11:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000000) );
		/* 8221D2ACh case   11:*/		return 0x8221D2B0;
		  /* 8221D2B0h */ case   12:  		/* bc 12, CR0_EQ, 36 */
		/* 8221D2B0h case   12:*/		if ( regs.CR[0].eq ) { return 0x8221D2D4;  }
		/* 8221D2B0h case   12:*/		return 0x8221D2B4;
		  /* 8221D2B4h */ case   13:  		/* lis R10, -32252 */
		/* 8221D2B4h case   13:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221D2B4h case   13:*/		return 0x8221D2B8;
		  /* 8221D2B8h */ case   14:  		/* stw R30, <#[R11 + 4]> */
		/* 8221D2B8h case   14:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 8221D2B8h case   14:*/		return 0x8221D2BC;
		  /* 8221D2BCh */ case   15:  		/* mr R3, R11 */
		/* 8221D2BCh case   15:*/		regs.R3 = regs.R11;
		/* 8221D2BCh case   15:*/		return 0x8221D2C0;
		  /* 8221D2C0h */ case   16:  		/* stw R29, <#[R11 + 8]> */
		/* 8221D2C0h case   16:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000008) );
		/* 8221D2C0h case   16:*/		return 0x8221D2C4;
		  /* 8221D2C4h */ case   17:  		/* addi R10, R10, -2960 */
		/* 8221D2C4h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFF470);
		/* 8221D2C4h case   17:*/		return 0x8221D2C8;
		  /* 8221D2C8h */ case   18:  		/* stw R31, <#[R11 + 16]> */
		/* 8221D2C8h case   18:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 8221D2C8h case   18:*/		return 0x8221D2CC;
		  /* 8221D2CCh */ case   19:  		/* stw R10, <#[R11]> */
		/* 8221D2CCh case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221D2CCh case   19:*/		return 0x8221D2D0;
	}
	return 0x8221D2D0;
} // Block from 8221D280h-8221D2D0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8221D2D0h
// Function '?GetPCS@ShaderPairOutput@XGRAPHICS@@UAAPAU_CS_COMPILED_SHADER@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D2D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D2D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D2D0);
		  /* 8221D2D0h */ case    0:  		/* b 8 */
		/* 8221D2D0h case    0:*/		return 0x8221D2D8;
		/* 8221D2D0h case    0:*/		return 0x8221D2D4;
	}
	return 0x8221D2D4;
} // Block from 8221D2D0h-8221D2D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221D2D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D2D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D2D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D2D4);
		  /* 8221D2D4h */ case    0:  		/* li R3, 0 */
		/* 8221D2D4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221D2D4h case    0:*/		return 0x8221D2D8;
	}
	return 0x8221D2D8;
} // Block from 8221D2D4h-8221D2D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221D2D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D2D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D2D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D2D8);
		  /* 8221D2D8h */ case    0:  		/* addi R1, R1, 128 */
		/* 8221D2D8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8221D2D8h case    0:*/		return 0x8221D2DC;
		  /* 8221D2DCh */ case    1:  		/* b -1622068 */
		/* 8221D2DCh case    1:*/		return 0x820912A8;
		/* 8221D2DCh case    1:*/		return 0x8221D2E0;
	}
	return 0x8221D2E0;
} // Block from 8221D2D8h-8221D2E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221D2E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D2E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D2E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D2E0);
		  /* 8221D2E0h */ case    0:  		/* mfspr R12, LR */
		/* 8221D2E0h case    0:*/		regs.R12 = regs.LR;
		/* 8221D2E0h case    0:*/		return 0x8221D2E4;
		  /* 8221D2E4h */ case    1:  		/* bl -1622164 */
		/* 8221D2E4h case    1:*/		regs.LR = 0x8221D2E8; return 0x82091250;
		/* 8221D2E4h case    1:*/		return 0x8221D2E8;
		  /* 8221D2E8h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8221D2E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8221D2E8h case    2:*/		return 0x8221D2EC;
		  /* 8221D2ECh */ case    3:  		/* mr R30, R4 */
		/* 8221D2ECh case    3:*/		regs.R30 = regs.R4;
		/* 8221D2ECh case    3:*/		return 0x8221D2F0;
	}
	return 0x8221D2F0;
} // Block from 8221D2E0h-8221D2F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221D2F0h
// Function '?SetConstByName@ShaderOutput@XGRAPHICS@@UAAXHHHH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D2F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D2F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D2F0);
		  /* 8221D2F0h */ case    0:  		/* mr R28, R6 */
		/* 8221D2F0h case    0:*/		regs.R28 = regs.R6;
		/* 8221D2F0h case    0:*/		return 0x8221D2F4;
		  /* 8221D2F4h */ case    1:  		/* lis R11, -32252 */
		/* 8221D2F4h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221D2F4h case    1:*/		return 0x8221D2F8;
	}
	return 0x8221D2F8;
} // Block from 8221D2F0h-8221D2F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221D2F8h
// Function '?SetInterpUsage@ShaderOutput@XGRAPHICS@@UAAXHHHHPAH00@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D2F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D2F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D2F8);
		  /* 8221D2F8h */ case    0:  		/* mr R6, R5 */
		/* 8221D2F8h case    0:*/		regs.R6 = regs.R5;
		/* 8221D2F8h case    0:*/		return 0x8221D2FC;
		  /* 8221D2FCh */ case    1:  		/* mr R31, R3 */
		/* 8221D2FCh case    1:*/		regs.R31 = regs.R3;
		/* 8221D2FCh case    1:*/		return 0x8221D300;
		  /* 8221D300h */ case    2:  		/* mr R29, R5 */
		/* 8221D300h case    2:*/		regs.R29 = regs.R5;
		/* 8221D300h case    2:*/		return 0x8221D304;
		  /* 8221D304h */ case    3:  		/* addi R4, R11, -2868 */
		/* 8221D304h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFF4CC);
		/* 8221D304h case    3:*/		return 0x8221D308;
		  /* 8221D308h */ case    4:  		/* mr R5, R30 */
		/* 8221D308h case    4:*/		regs.R5 = regs.R30;
		/* 8221D308h case    4:*/		return 0x8221D30C;
		  /* 8221D30Ch */ case    5:  		/* mr R3, R28 */
		/* 8221D30Ch case    5:*/		regs.R3 = regs.R28;
		/* 8221D30Ch case    5:*/		return 0x8221D310;
		  /* 8221D310h */ case    6:  		/* mr R27, R7 */
		/* 8221D310h case    6:*/		regs.R27 = regs.R7;
		/* 8221D310h case    6:*/		return 0x8221D314;
		  /* 8221D314h */ case    7:  		/* bl 172 */
		/* 8221D314h case    7:*/		regs.LR = 0x8221D318; return 0x8221D3C0;
		/* 8221D314h case    7:*/		return 0x8221D318;
		  /* 8221D318h */ case    8:  		/* li R4, 32 */
		/* 8221D318h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x20);
		/* 8221D318h case    8:*/		return 0x8221D31C;
		  /* 8221D31Ch */ case    9:  		/* bl -1868 */
		/* 8221D31Ch case    9:*/		regs.LR = 0x8221D320; return 0x8221CBD0;
		/* 8221D31Ch case    9:*/		return 0x8221D320;
		  /* 8221D320h */ case   10:  		/* li R11, 0 */
		/* 8221D320h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8221D320h case   10:*/		return 0x8221D324;
		  /* 8221D324h */ case   11:  		/* li R10, 1 */
		/* 8221D324h case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8221D324h case   11:*/		return 0x8221D328;
		  /* 8221D328h */ case   12:  		/* stw R30, <#[R3 + 4]> */
		/* 8221D328h case   12:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000004) );
		/* 8221D328h case   12:*/		return 0x8221D32C;
		  /* 8221D32Ch */ case   13:  		/* li R9, 2 */
		/* 8221D32Ch case   13:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 8221D32Ch case   13:*/		return 0x8221D330;
		  /* 8221D330h */ case   14:  		/* stw R11, <#[R3]> */
		/* 8221D330h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8221D330h case   14:*/		return 0x8221D334;
		  /* 8221D334h */ case   15:  		/* li R8, 3 */
		/* 8221D334h case   15:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 8221D334h case   15:*/		return 0x8221D338;
		  /* 8221D338h */ case   16:  		/* stw R29, <#[R3 + 8]> */
		/* 8221D338h case   16:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000008) );
		/* 8221D338h case   16:*/		return 0x8221D33C;
		  /* 8221D33Ch */ case   17:  		/* stw R27, <#[R3 + 12]> */
		/* 8221D33Ch case   17:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x0000000C) );
		/* 8221D33Ch case   17:*/		return 0x8221D340;
		  /* 8221D340h */ case   18:  		/* mr R4, R3 */
		/* 8221D340h case   18:*/		regs.R4 = regs.R3;
		/* 8221D340h case   18:*/		return 0x8221D344;
		  /* 8221D344h */ case   19:  		/* stw R11, <#[R3 + 16]> */
		/* 8221D344h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8221D344h case   19:*/		return 0x8221D348;
		  /* 8221D348h */ case   20:  		/* mr R26, R3 */
		/* 8221D348h case   20:*/		regs.R26 = regs.R3;
		/* 8221D348h case   20:*/		return 0x8221D34C;
		  /* 8221D34Ch */ case   21:  		/* stw R10, <#[R3 + 20]> */
		/* 8221D34Ch case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000014) );
		/* 8221D34Ch case   21:*/		return 0x8221D350;
		  /* 8221D350h */ case   22:  		/* stw R9, <#[R3 + 24]> */
		/* 8221D350h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000018) );
		/* 8221D350h case   22:*/		return 0x8221D354;
		  /* 8221D354h */ case   23:  		/* stw R8, <#[R3 + 28]> */
		/* 8221D354h case   23:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x0000001C) );
		/* 8221D354h case   23:*/		return 0x8221D358;
		  /* 8221D358h */ case   24:  		/* lwz R3, <#[R31 + 4]> */
		/* 8221D358h case   24:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8221D358h case   24:*/		return 0x8221D35C;
		  /* 8221D35Ch */ case   25:  		/* bl -781628 */
		/* 8221D35Ch case   25:*/		regs.LR = 0x8221D360; return 0x8215E620;
		/* 8221D35Ch case   25:*/		return 0x8221D360;
		  /* 8221D360h */ case   26:  		/* lwz R11, <#[R28 + 1436]> */
		/* 8221D360h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000059C) );
		/* 8221D360h case   26:*/		return 0x8221D364;
		  /* 8221D364h */ case   27:  		/* mr R4, R26 */
		/* 8221D364h case   27:*/		regs.R4 = regs.R26;
		/* 8221D364h case   27:*/		return 0x8221D368;
		  /* 8221D368h */ case   28:  		/* lwz R3, <#[R28 + 1444]> */
		/* 8221D368h case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x000005A4) );
		/* 8221D368h case   28:*/		return 0x8221D36C;
		  /* 8221D36Ch */ case   29:  		/* mtspr CTR, R11 */
		/* 8221D36Ch case   29:*/		regs.CTR = regs.R11;
		/* 8221D36Ch case   29:*/		return 0x8221D370;
		  /* 8221D370h */ case   30:  		/* bcctrl 20, CR0_LT */
		/* 8221D370h case   30:*/		if ( 1 ) { regs.LR = 0x8221D374; return (uint32)regs.CTR; }
		/* 8221D370h case   30:*/		return 0x8221D374;
		  /* 8221D374h */ case   31:  		/* addi R1, R1, 176 */
		/* 8221D374h case   31:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8221D374h case   31:*/		return 0x8221D378;
		  /* 8221D378h */ case   32:  		/* b -1622232 */
		/* 8221D378h case   32:*/		return 0x820912A0;
		/* 8221D378h case   32:*/		return 0x8221D37C;
		  /* 8221D37Ch */ case   33:  		/* nop */
		/* 8221D37Ch case   33:*/		cpu::op::nop();
		/* 8221D37Ch case   33:*/		return 0x8221D380;
	}
	return 0x8221D380;
} // Block from 8221D2F8h-8221D380h (34 instructions)

//////////////////////////////////////////////////////
// Block at 8221D380h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D380( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D380) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D380);
		  /* 8221D380h */ case    0:  		/* li R11, 256 */
		/* 8221D380h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x100);
		/* 8221D380h case    0:*/		return 0x8221D384;
		  /* 8221D384h */ case    1:  		/* li R10, 16 */
		/* 8221D384h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x10);
		/* 8221D384h case    1:*/		return 0x8221D388;
		  /* 8221D388h */ case    2:  		/* li R9, 31 */
		/* 8221D388h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x1F);
		/* 8221D388h case    2:*/		return 0x8221D38C;
		  /* 8221D38Ch */ case    3:  		/* stw R11, <#[R3 + 40]> */
		/* 8221D38Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000028) );
		/* 8221D38Ch case    3:*/		return 0x8221D390;
		  /* 8221D390h */ case    4:  		/* stw R10, <#[R3 + 44]> */
		/* 8221D390h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x0000002C) );
		/* 8221D390h case    4:*/		return 0x8221D394;
		  /* 8221D394h */ case    5:  		/* stw R9, <#[R3 + 48]> */
		/* 8221D394h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000030) );
		/* 8221D394h case    5:*/		return 0x8221D398;
		  /* 8221D398h */ case    6:  		/* bclr 20, CR0_LT */
		/* 8221D398h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221D398h case    6:*/		return 0x8221D39C;
	}
	return 0x8221D39C;
} // Block from 8221D380h-8221D39Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221D39Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D39C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D39C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D39C);
		  /* 8221D39Ch */ case    0:  		/* nop */
		/* 8221D39Ch case    0:*/		cpu::op::nop();
		/* 8221D39Ch case    0:*/		return 0x8221D3A0;
	}
	return 0x8221D3A0;
} // Block from 8221D39Ch-8221D3A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221D3A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D3A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D3A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D3A0);
		  /* 8221D3A0h */ case    0:  		/* li R11, 256 */
		/* 8221D3A0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x100);
		/* 8221D3A0h case    0:*/		return 0x8221D3A4;
		  /* 8221D3A4h */ case    1:  		/* li R10, 0 */
		/* 8221D3A4h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8221D3A4h case    1:*/		return 0x8221D3A8;
		  /* 8221D3A8h */ case    2:  		/* li R9, 15 */
		/* 8221D3A8h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0xF);
		/* 8221D3A8h case    2:*/		return 0x8221D3AC;
		  /* 8221D3ACh */ case    3:  		/* stw R11, <#[R3 + 40]> */
		/* 8221D3ACh case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000028) );
		/* 8221D3ACh case    3:*/		return 0x8221D3B0;
		  /* 8221D3B0h */ case    4:  		/* stw R10, <#[R3 + 44]> */
		/* 8221D3B0h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x0000002C) );
		/* 8221D3B0h case    4:*/		return 0x8221D3B4;
		  /* 8221D3B4h */ case    5:  		/* stw R9, <#[R3 + 48]> */
		/* 8221D3B4h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000030) );
		/* 8221D3B4h case    5:*/		return 0x8221D3B8;
		  /* 8221D3B8h */ case    6:  		/* bclr 20, CR0_LT */
		/* 8221D3B8h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221D3B8h case    6:*/		return 0x8221D3BC;
	}
	return 0x8221D3BC;
} // Block from 8221D3A0h-8221D3BCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221D3BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D3BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D3BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D3BC);
		  /* 8221D3BCh */ case    0:  		/* nop */
		/* 8221D3BCh case    0:*/		cpu::op::nop();
		/* 8221D3BCh case    0:*/		return 0x8221D3C0;
	}
	return 0x8221D3C0;
} // Block from 8221D3BCh-8221D3C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221D3C0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D3C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D3C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D3C0);
		  /* 8221D3C0h */ case    0:  		/* bclr 20, CR0_LT */
		/* 8221D3C0h case    0:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221D3C0h case    0:*/		return 0x8221D3C4;
	}
	return 0x8221D3C4;
} // Block from 8221D3C0h-8221D3C4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221D3C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D3C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D3C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D3C4);
		  /* 8221D3C4h */ case    0:  		/* nop */
		/* 8221D3C4h case    0:*/		cpu::op::nop();
		/* 8221D3C4h case    0:*/		return 0x8221D3C8;
	}
	return 0x8221D3C8;
} // Block from 8221D3C4h-8221D3C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221D3C8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D3C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D3C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D3C8);
		  /* 8221D3C8h */ case    0:  		/* mfspr R12, LR */
		/* 8221D3C8h case    0:*/		regs.R12 = regs.LR;
		/* 8221D3C8h case    0:*/		return 0x8221D3CC;
		  /* 8221D3CCh */ case    1:  		/* bl -1622384 */
		/* 8221D3CCh case    1:*/		regs.LR = 0x8221D3D0; return 0x8209125C;
		/* 8221D3CCh case    1:*/		return 0x8221D3D0;
		  /* 8221D3D0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8221D3D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8221D3D0h case    2:*/		return 0x8221D3D4;
		  /* 8221D3D4h */ case    3:  		/* mr R9, R4 */
		/* 8221D3D4h case    3:*/		regs.R9 = regs.R4;
		/* 8221D3D4h case    3:*/		return 0x8221D3D8;
		  /* 8221D3D8h */ case    4:  		/* stw R4, <#[R3 + 1444]> */
		/* 8221D3D8h case    4:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x000005A4) );
		/* 8221D3D8h case    4:*/		return 0x8221D3DC;
		  /* 8221D3DCh */ case    5:  		/* mr R31, R3 */
		/* 8221D3DCh case    5:*/		regs.R31 = regs.R3;
		/* 8221D3DCh case    5:*/		return 0x8221D3E0;
		  /* 8221D3E0h */ case    6:  		/* stw R8, <#[R3 + 1384]> */
		/* 8221D3E0h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000568) );
		/* 8221D3E0h case    6:*/		return 0x8221D3E4;
		  /* 8221D3E4h */ case    7:  		/* lis R4, 0 */
		/* 8221D3E4h case    7:*/		cpu::op::lis<0>(regs,&regs.R4,0x0);
		/* 8221D3E4h case    7:*/		return 0x8221D3E8;
		  /* 8221D3E8h */ case    8:  		/* stw R6, <#[R3 + 1436]> */
		/* 8221D3E8h case    8:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x0000059C) );
		/* 8221D3E8h case    8:*/		return 0x8221D3EC;
		  /* 8221D3ECh */ case    9:  		/* lis R11, 32767 */
		/* 8221D3ECh case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0x7FFF);
		/* 8221D3ECh case    9:*/		return 0x8221D3F0;
		  /* 8221D3F0h */ case   10:  		/* stw R5, <#[R3 + 1440]> */
		/* 8221D3F0h case   10:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x000005A0) );
		/* 8221D3F0h case   10:*/		return 0x8221D3F4;
		  /* 8221D3F4h */ case   11:  		/* li R10, 1 */
		/* 8221D3F4h case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8221D3F4h case   11:*/		return 0x8221D3F8;
		  /* 8221D3F8h */ case   12:  		/* mtspr CTR, R5 */
		/* 8221D3F8h case   12:*/		regs.CTR = regs.R5;
		/* 8221D3F8h case   12:*/		return 0x8221D3FC;
		  /* 8221D3FCh */ case   13:  		/* ori R11, R11, 65535 */
		/* 8221D3FCh case   13:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xFFFF);
		/* 8221D3FCh case   13:*/		return 0x8221D400;
		  /* 8221D400h */ case   14:  		/* ori R8, R4, 61370 */
		/* 8221D400h case   14:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R4,0xEFBA);
		/* 8221D400h case   14:*/		return 0x8221D404;
		  /* 8221D404h */ case   15:  		/* stb R10, <#[R3 + 1368]> */
		/* 8221D404h case   15:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R3 + 0x00000558) );
		/* 8221D404h case   15:*/		return 0x8221D408;
		  /* 8221D408h */ case   16:  		/* li R29, 0 */
		/* 8221D408h case   16:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8221D408h case   16:*/		return 0x8221D40C;
		  /* 8221D40Ch */ case   17:  		/* stw R11, <#[R3 + 2712]> */
		/* 8221D40Ch case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000A98) );
		/* 8221D40Ch case   17:*/		return 0x8221D410;
		  /* 8221D410h */ case   18:  		/* li R30, 16 */
		/* 8221D410h case   18:*/		cpu::op::li<0>(regs,&regs.R30,0x10);
		/* 8221D410h case   18:*/		return 0x8221D414;
		  /* 8221D414h */ case   19:  		/* stb R10, <#[R3 + 2128]> */
		/* 8221D414h case   19:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R3 + 0x00000850) );
		/* 8221D414h case   19:*/		return 0x8221D418;
		  /* 8221D418h */ case   20:  		/* stb R10, <#[R3 + 2129]> */
		/* 8221D418h case   20:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R3 + 0x00000851) );
		/* 8221D418h case   20:*/		return 0x8221D41C;
		  /* 8221D41Ch */ case   21:  		/* li R4, 52 */
		/* 8221D41Ch case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x34);
		/* 8221D41Ch case   21:*/		return 0x8221D420;
	}
	return 0x8221D420;
} // Block from 8221D3C8h-8221D420h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8221D420h
// Function '?AllocTextureFetchConst@ShaderPairOutput@XGRAPHICS@@UAAXH_NPAI1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D420);
		  /* 8221D420h */ case    0:  		/* stw R29, <#[R3 + 2736]> */
		/* 8221D420h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000AB0) );
		/* 8221D420h case    0:*/		return 0x8221D424;
		  /* 8221D424h */ case    1:  		/* mr R3, R9 */
		/* 8221D424h case    1:*/		regs.R3 = regs.R9;
		/* 8221D424h case    1:*/		return 0x8221D428;
		  /* 8221D428h */ case    2:  		/* stw R8, <#[R31 + 2136]> */
		/* 8221D428h case    2:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000858) );
		/* 8221D428h case    2:*/		return 0x8221D42C;
		  /* 8221D42Ch */ case    3:  		/* stw R11, <#[R31 + 2716]> */
		/* 8221D42Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000A9C) );
		/* 8221D42Ch case    3:*/		return 0x8221D430;
		  /* 8221D430h */ case    4:  		/* stw R11, <#[R31 + 2720]> */
		/* 8221D430h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000AA0) );
		/* 8221D430h case    4:*/		return 0x8221D434;
		  /* 8221D434h */ case    5:  		/* stw R11, <#[R31 + 2724]> */
		/* 8221D434h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000AA4) );
		/* 8221D434h case    5:*/		return 0x8221D438;
		  /* 8221D438h */ case    6:  		/* stw R30, <#[R31 + 2728]> */
		/* 8221D438h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000AA8) );
		/* 8221D438h case    6:*/		return 0x8221D43C;
		  /* 8221D43Ch */ case    7:  		/* stw R7, <#[R31]> */
		/* 8221D43Ch case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x00000000) );
		/* 8221D43Ch case    7:*/		return 0x8221D440;
		  /* 8221D440h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 8221D440h case    8:*/		if ( 1 ) { regs.LR = 0x8221D444; return (uint32)regs.CTR; }
		/* 8221D440h case    8:*/		return 0x8221D444;
		  /* 8221D444h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 8221D444h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8221D444h case    9:*/		return 0x8221D448;
		  /* 8221D448h */ case   10:  		/* bc 12, CR0_EQ, 84 */
		/* 8221D448h case   10:*/		if ( regs.CR[0].eq ) { return 0x8221D49C;  }
		/* 8221D448h case   10:*/		return 0x8221D44C;
		  /* 8221D44Ch */ case   11:  		/* li R11, 256 */
		/* 8221D44Ch case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x100);
		/* 8221D44Ch case   11:*/		return 0x8221D450;
	}
	return 0x8221D450;
} // Block from 8221D420h-8221D450h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8221D450h
// Function '?AllocVertexFetchConst@ShaderPairOutput@XGRAPHICS@@UAAXH_NPAI1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D450);
		  /* 8221D450h */ case    0:  		/* stw R30, <#[R3 + 8]> */
		/* 8221D450h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000008) );
		/* 8221D450h case    0:*/		return 0x8221D454;
		  /* 8221D454h */ case    1:  		/* lis R8, -32252 */
		/* 8221D454h case    1:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8204);
		/* 8221D454h case    1:*/		return 0x8221D458;
		  /* 8221D458h */ case    2:  		/* stw R30, <#[R3 + 36]> */
		/* 8221D458h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000024) );
		/* 8221D458h case    2:*/		return 0x8221D45C;
		  /* 8221D45Ch */ case    3:  		/* stw R11, <#[R3 + 32]> */
		/* 8221D45Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000020) );
		/* 8221D45Ch case    3:*/		return 0x8221D460;
		  /* 8221D460h */ case    4:  		/* li R9, 4095 */
		/* 8221D460h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0xFFF);
		/* 8221D460h case    4:*/		return 0x8221D464;
		  /* 8221D464h */ case    5:  		/* stw R11, <#[R3 + 40]> */
		/* 8221D464h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000028) );
		/* 8221D464h case    5:*/		return 0x8221D468;
		  /* 8221D468h */ case    6:  		/* addi R11, R8, -2824 */
		/* 8221D468h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0xFFFFF4F8);
		/* 8221D468h case    6:*/		return 0x8221D46C;
		  /* 8221D46Ch */ case    7:  		/* li R10, 4 */
		/* 8221D46Ch case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 8221D46Ch case    7:*/		return 0x8221D470;
		  /* 8221D470h */ case    8:  		/* stw R9, <#[R3 + 12]> */
		/* 8221D470h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x0000000C) );
		/* 8221D470h case    8:*/		return 0x8221D474;
		  /* 8221D474h */ case    9:  		/* li R7, 64 */
		/* 8221D474h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x40);
		/* 8221D474h case    9:*/		return 0x8221D478;
		  /* 8221D478h */ case   10:  		/* stw R11, <#[R3]> */
		/* 8221D478h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8221D478h case   10:*/		return 0x8221D47C;
		  /* 8221D47Ch */ case   11:  		/* li R8, 32 */
		/* 8221D47Ch case   11:*/		cpu::op::li<0>(regs,&regs.R8,0x20);
		/* 8221D47Ch case   11:*/		return 0x8221D480;
		  /* 8221D480h */ case   12:  		/* stw R10, <#[R3 + 16]> */
		/* 8221D480h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 8221D480h case   12:*/		return 0x8221D484;
		  /* 8221D484h */ case   13:  		/* stw R7, <#[R3 + 4]> */
		/* 8221D484h case   13:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		/* 8221D484h case   13:*/		return 0x8221D488;
		  /* 8221D488h */ case   14:  		/* mr R11, R3 */
		/* 8221D488h case   14:*/		regs.R11 = regs.R3;
		/* 8221D488h case   14:*/		return 0x8221D48C;
		  /* 8221D48Ch */ case   15:  		/* stw R9, <#[R3 + 20]> */
		/* 8221D48Ch case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000014) );
		/* 8221D48Ch case   15:*/		return 0x8221D490;
		  /* 8221D490h */ case   16:  		/* stw R8, <#[R3 + 24]> */
		/* 8221D490h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000018) );
		/* 8221D490h case   16:*/		return 0x8221D494;
		  /* 8221D494h */ case   17:  		/* stw R10, <#[R3 + 28]> */
		/* 8221D494h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x0000001C) );
		/* 8221D494h case   17:*/		return 0x8221D498;
		  /* 8221D498h */ case   18:  		/* b 8 */
		/* 8221D498h case   18:*/		return 0x8221D4A0;
		/* 8221D498h case   18:*/		return 0x8221D49C;
	}
	return 0x8221D49C;
} // Block from 8221D450h-8221D49Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8221D49Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D49C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D49C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D49C);
		  /* 8221D49Ch */ case    0:  		/* mr R11, R29 */
		/* 8221D49Ch case    0:*/		regs.R11 = regs.R29;
		/* 8221D49Ch case    0:*/		return 0x8221D4A0;
	}
	return 0x8221D4A0;
} // Block from 8221D49Ch-8221D4A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221D4A0h
// Function '?RSLog@Compiler@XGRAPHICS@@QAAXPBDPAD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D4A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D4A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D4A0);
		  /* 8221D4A0h */ case    0:  		/* stw R11, <#[R31 + 1360]> */
		/* 8221D4A0h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000550) );
		/* 8221D4A0h case    0:*/		return 0x8221D4A4;
		  /* 8221D4A4h */ case    1:  		/* mr R3, R31 */
		/* 8221D4A4h case    1:*/		regs.R3 = regs.R31;
		/* 8221D4A4h case    1:*/		return 0x8221D4A8;
		  /* 8221D4A8h */ case    2:  		/* stw R29, <#[R31 + 1448]> */
		/* 8221D4A8h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x000005A8) );
		/* 8221D4A8h case    2:*/		return 0x8221D4AC;
		  /* 8221D4ACh */ case    3:  		/* stw R29, <#[R31 + 1452]> */
		/* 8221D4ACh case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x000005AC) );
		/* 8221D4ACh case    3:*/		return 0x8221D4B0;
		  /* 8221D4B0h */ case    4:  		/* stw R29, <#[R31 + 1456]> */
		/* 8221D4B0h case    4:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x000005B0) );
		/* 8221D4B0h case    4:*/		return 0x8221D4B4;
		  /* 8221D4B4h */ case    5:  		/* bl -860 */
		/* 8221D4B4h case    5:*/		regs.LR = 0x8221D4B8; return 0x8221D158;
		/* 8221D4B4h case    5:*/		return 0x8221D4B8;
		  /* 8221D4B8h */ case    6:  		/* mr R3, R31 */
		/* 8221D4B8h case    6:*/		regs.R3 = regs.R31;
		/* 8221D4B8h case    6:*/		return 0x8221D4BC;
		  /* 8221D4BCh */ case    7:  		/* bl -692 */
		/* 8221D4BCh case    7:*/		regs.LR = 0x8221D4C0; return 0x8221D208;
		/* 8221D4BCh case    7:*/		return 0x8221D4C0;
		  /* 8221D4C0h */ case    8:  		/* addi R1, R1, 112 */
		/* 8221D4C0h case    8:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8221D4C0h case    8:*/		return 0x8221D4C4;
		  /* 8221D4C4h */ case    9:  		/* b -1622552 */
		/* 8221D4C4h case    9:*/		return 0x820912AC;
		/* 8221D4C4h case    9:*/		return 0x8221D4C8;
	}
	return 0x8221D4C8;
} // Block from 8221D4A0h-8221D4C8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8221D4C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D4C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D4C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D4C8);
		  /* 8221D4C8h */ case    0:  		/* mfspr R12, LR */
		/* 8221D4C8h case    0:*/		regs.R12 = regs.LR;
		/* 8221D4C8h case    0:*/		return 0x8221D4CC;
		  /* 8221D4CCh */ case    1:  		/* bl -1622644 */
		/* 8221D4CCh case    1:*/		regs.LR = 0x8221D4D0; return 0x82091258;
		/* 8221D4CCh case    1:*/		return 0x8221D4D0;
		  /* 8221D4D0h */ case    2:  		/* stwu R1, <#[R1 - 288]> */
		/* 8221D4D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEE0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEE0);
		/* 8221D4D0h case    2:*/		return 0x8221D4D4;
		  /* 8221D4D4h */ case    3:  		/* lis R11, -32252 */
		/* 8221D4D4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221D4D4h case    3:*/		return 0x8221D4D8;
		  /* 8221D4D8h */ case    4:  		/* lis R10, -32252 */
		/* 8221D4D8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221D4D8h case    4:*/		return 0x8221D4DC;
		  /* 8221D4DCh */ case    5:  		/* lis R9, -32252 */
		/* 8221D4DCh case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8221D4DCh case    5:*/		return 0x8221D4E0;
		  /* 8221D4E0h */ case    6:  		/* addi R6, R11, -2708 */
		/* 8221D4E0h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFF56C);
		/* 8221D4E0h case    6:*/		return 0x8221D4E4;
		  /* 8221D4E4h */ case    7:  		/* addi R5, R10, -2716 */
		/* 8221D4E4h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFF564);
		/* 8221D4E4h case    7:*/		return 0x8221D4E8;
		  /* 8221D4E8h */ case    8:  		/* addi R4, R9, -2752 */
		/* 8221D4E8h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0xFFFFF540);
		/* 8221D4E8h case    8:*/		return 0x8221D4EC;
		  /* 8221D4ECh */ case    9:  		/* mr R29, R3 */
		/* 8221D4ECh case    9:*/		regs.R29 = regs.R3;
		/* 8221D4ECh case    9:*/		return 0x8221D4F0;
		  /* 8221D4F0h */ case   10:  		/* bl -1016 */
		/* 8221D4F0h case   10:*/		regs.LR = 0x8221D4F4; return 0x8221D0F8;
		/* 8221D4F0h case   10:*/		return 0x8221D4F4;
		  /* 8221D4F4h */ case   11:  		/* lis R11, -32252 */
		/* 8221D4F4h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221D4F4h case   11:*/		return 0x8221D4F8;
		  /* 8221D4F8h */ case   12:  		/* addi R31, R29, 2120 */
		/* 8221D4F8h case   12:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R29,0x848);
		/* 8221D4F8h case   12:*/		return 0x8221D4FC;
		  /* 8221D4FCh */ case   13:  		/* li R30, 16 */
		/* 8221D4FCh case   13:*/		cpu::op::li<0>(regs,&regs.R30,0x10);
		/* 8221D4FCh case   13:*/		return 0x8221D500;
		  /* 8221D500h */ case   14:  		/* addi R28, R11, -2780 */
		/* 8221D500h case   14:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFF524);
		/* 8221D500h case   14:*/		return 0x8221D504;
		  /* 8221D504h */ case   15:  		/* mr R4, R28 */
		/* 8221D504h case   15:*/		regs.R4 = regs.R28;
		/* 8221D504h case   15:*/		return 0x8221D508;
		  /* 8221D508h */ case   16:  		/* lwz R5, <#[R31 + 36]> */
		/* 8221D508h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000024) );
		/* 8221D508h case   16:*/		return 0x8221D50C;
		  /* 8221D50Ch */ case   17:  		/* addi R3, R1, 112 */
		/* 8221D50Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 8221D50Ch case   17:*/		return 0x8221D510;
		  /* 8221D510h */ case   18:  		/* lwz R6, <#[R31 + 32]> */
		/* 8221D510h case   18:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000020) );
		/* 8221D510h case   18:*/		return 0x8221D514;
		  /* 8221D514h */ case   19:  		/* ldu R7, <#[R31 + 24]> */
		/* 8221D514h case   19:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R31 + 0x00000018) );
		regs.R31 = (uint32)(regs.R31 + 0x00000018);
		/* 8221D514h case   19:*/		return 0x8221D518;
		  /* 8221D518h */ case   20:  		/* bl 309160 */
		/* 8221D518h case   20:*/		regs.LR = 0x8221D51C; return 0x82268CC0;
		/* 8221D518h case   20:*/		return 0x8221D51C;
		  /* 8221D51Ch */ case   21:  		/* addi R4, R1, 112 */
		/* 8221D51Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 8221D51Ch case   21:*/		return 0x8221D520;
		  /* 8221D520h */ case   22:  		/* mr R3, R29 */
		/* 8221D520h case   22:*/		regs.R3 = regs.R29;
		/* 8221D520h case   22:*/		return 0x8221D524;
		  /* 8221D524h */ case   23:  		/* bl -1068 */
		/* 8221D524h case   23:*/		regs.LR = 0x8221D528; return 0x8221D0F8;
		/* 8221D524h case   23:*/		return 0x8221D528;
		  /* 8221D528h */ case   24:  		/* addic. R30, R30, -1 */
		/* 8221D528h case   24:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8221D528h case   24:*/		return 0x8221D52C;
		  /* 8221D52Ch */ case   25:  		/* bc 4, CR0_EQ, -40 */
		/* 8221D52Ch case   25:*/		if ( !regs.CR[0].eq ) { return 0x8221D504;  }
		/* 8221D52Ch case   25:*/		return 0x8221D530;
		  /* 8221D530h */ case   26:  		/* addi R1, R1, 288 */
		/* 8221D530h case   26:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x120);
		/* 8221D530h case   26:*/		return 0x8221D534;
		  /* 8221D534h */ case   27:  		/* b -1622668 */
		/* 8221D534h case   27:*/		return 0x820912A8;
		/* 8221D534h case   27:*/		return 0x8221D538;
	}
	return 0x8221D538;
} // Block from 8221D4C8h-8221D538h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8221D538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D538);
		  /* 8221D538h */ case    0:  		/* mfspr R12, LR */
		/* 8221D538h case    0:*/		regs.R12 = regs.LR;
		/* 8221D538h case    0:*/		return 0x8221D53C;
		  /* 8221D53Ch */ case    1:  		/* bl -1622792 */
		/* 8221D53Ch case    1:*/		regs.LR = 0x8221D540; return 0x82091234;
		/* 8221D53Ch case    1:*/		return 0x8221D540;
		  /* 8221D540h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 8221D540h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 8221D540h case    2:*/		return 0x8221D544;
		  /* 8221D544h */ case    3:  		/* mr R31, R3 */
		/* 8221D544h case    3:*/		regs.R31 = regs.R3;
		/* 8221D544h case    3:*/		return 0x8221D548;
		  /* 8221D548h */ case    4:  		/* mr R22, R4 */
		/* 8221D548h case    4:*/		regs.R22 = regs.R4;
		/* 8221D548h case    4:*/		return 0x8221D54C;
		  /* 8221D54Ch */ case    5:  		/* bl -1532 */
		/* 8221D54Ch case    5:*/		regs.LR = 0x8221D550; return 0x8221CF50;
		/* 8221D54Ch case    5:*/		return 0x8221D550;
	}
	return 0x8221D550;
} // Block from 8221D538h-8221D550h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221D550h
// Function '?FlushOutput@Compiler@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D550);
		  /* 8221D550h */ case    0:  		/* li R10, 16 */
		/* 8221D550h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x10);
		/* 8221D550h case    0:*/		return 0x8221D554;
		  /* 8221D554h */ case    1:  		/* addi R11, R3, 2136 */
		/* 8221D554h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x858);
		/* 8221D554h case    1:*/		return 0x8221D558;
		  /* 8221D558h */ case    2:  		/* li R21, 0 */
		/* 8221D558h case    2:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 8221D558h case    2:*/		return 0x8221D55C;
		  /* 8221D55Ch */ case    3:  		/* mtspr CTR, R10 */
		/* 8221D55Ch case    3:*/		regs.CTR = regs.R10;
		/* 8221D55Ch case    3:*/		return 0x8221D560;
		  /* 8221D560h */ case    4:  		/* stw R21, <#[R11 + 16]> */
		/* 8221D560h case    4:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x00000010) );
		/* 8221D560h case    4:*/		return 0x8221D564;
		  /* 8221D564h */ case    5:  		/* std R21, <#[R11 + 8]> */
		/* 8221D564h case    5:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R11 + 0x00000008) );
		/* 8221D564h case    5:*/		return 0x8221D568;
		  /* 8221D568h */ case    6:  		/* stbu R21, <#[R11 + 24]> */
		/* 8221D568h case    6:*/		cpu::mem::store8( regs, regs.R21, (uint32)(regs.R11 + 0x00000018) );
		regs.R11 = (uint32)(regs.R11 + 0x00000018);
		/* 8221D568h case    6:*/		return 0x8221D56C;
		  /* 8221D56Ch */ case    7:  		/* bc 16, CR0_LT, -12 */
		/* 8221D56Ch case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8221D560;  }
		/* 8221D56Ch case    7:*/		return 0x8221D570;
		  /* 8221D570h */ case    8:  		/* lis R10, -32252 */
		/* 8221D570h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221D570h case    8:*/		return 0x8221D574;
		  /* 8221D574h */ case    9:  		/* lwz R30, <#[R31 + 1448]> */
		/* 8221D574h case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x000005A8) );
		/* 8221D574h case    9:*/		return 0x8221D578;
		  /* 8221D578h */ case   10:  		/* lis R4, -32252 */
		/* 8221D578h case   10:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8204);
		/* 8221D578h case   10:*/		return 0x8221D57C;
		  /* 8221D57Ch */ case   11:  		/* addi R10, R10, -2492 */
		/* 8221D57Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFF644);
		/* 8221D57Ch case   11:*/		return 0x8221D580;
		  /* 8221D580h */ case   12:  		/* lis R3, -32252 */
		/* 8221D580h case   12:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8204);
		/* 8221D580h case   12:*/		return 0x8221D584;
		  /* 8221D584h */ case   13:  		/* lis R28, -32252 */
		/* 8221D584h case   13:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8204);
		/* 8221D584h case   13:*/		return 0x8221D588;
		  /* 8221D588h */ case   14:  		/* stw R10, <#[R31 + 2180]> */
		/* 8221D588h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000884) );
		/* 8221D588h case   14:*/		return 0x8221D58C;
		  /* 8221D58Ch */ case   15:  		/* lis R27, -32252 */
		/* 8221D58Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8204);
		/* 8221D58Ch case   15:*/		return 0x8221D590;
		  /* 8221D590h */ case   16:  		/* lis R26, -32252 */
		/* 8221D590h case   16:*/		cpu::op::lis<0>(regs,&regs.R26,0xFFFF8204);
		/* 8221D590h case   16:*/		return 0x8221D594;
		  /* 8221D594h */ case   17:  		/* addi R20, R4, -2504 */
		/* 8221D594h case   17:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R4,0xFFFFF638);
		/* 8221D594h case   17:*/		return 0x8221D598;
	}
	return 0x8221D598;
} // Block from 8221D550h-8221D598h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8221D598h
// Function '?CodeBuffer@Compiler@XGRAPHICS@@QAAPADHH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D598);
		  /* 8221D598h */ case    0:  		/* addi R19, R3, -2520 */
		/* 8221D598h case    0:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R3,0xFFFFF628);
		/* 8221D598h case    0:*/		return 0x8221D59C;
		  /* 8221D59Ch */ case    1:  		/* addi R4, R28, -2536 */
		/* 8221D59Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R28,0xFFFFF618);
		/* 8221D59Ch case    1:*/		return 0x8221D5A0;
		  /* 8221D5A0h */ case    2:  		/* stw R20, <#[R31 + 2372]> */
		/* 8221D5A0h case    2:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R31 + 0x00000944) );
		/* 8221D5A0h case    2:*/		return 0x8221D5A4;
		  /* 8221D5A4h */ case    3:  		/* addi R3, R27, -2548 */
		/* 8221D5A4h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R27,0xFFFFF60C);
		/* 8221D5A4h case    3:*/		return 0x8221D5A8;
		  /* 8221D5A8h */ case    4:  		/* stw R19, <#[R31 + 2396]> */
		/* 8221D5A8h case    4:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R31 + 0x0000095C) );
		/* 8221D5A8h case    4:*/		return 0x8221D5AC;
		  /* 8221D5ACh */ case    5:  		/* addi R10, R26, -2560 */
		/* 8221D5ACh case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R26,0xFFFFF600);
		/* 8221D5ACh case    5:*/		return 0x8221D5B0;
		  /* 8221D5B0h */ case    6:  		/* stw R4, <#[R31 + 2444]> */
		/* 8221D5B0h case    6:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R31 + 0x0000098C) );
		/* 8221D5B0h case    6:*/		return 0x8221D5B4;
		  /* 8221D5B4h */ case    7:  		/* lis R11, -32252 */
		/* 8221D5B4h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221D5B4h case    7:*/		return 0x8221D5B8;
		  /* 8221D5B8h */ case    8:  		/* stw R3, <#[R31 + 2468]> */
		/* 8221D5B8h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000009A4) );
		/* 8221D5B8h case    8:*/		return 0x8221D5BC;
		  /* 8221D5BCh */ case    9:  		/* lis R9, -32252 */
		/* 8221D5BCh case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8221D5BCh case    9:*/		return 0x8221D5C0;
		  /* 8221D5C0h */ case   10:  		/* stw R10, <#[R31 + 2492]> */
		/* 8221D5C0h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x000009BC) );
		/* 8221D5C0h case   10:*/		return 0x8221D5C4;
		  /* 8221D5C4h */ case   11:  		/* lis R8, -32252 */
		/* 8221D5C4h case   11:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8204);
		/* 8221D5C4h case   11:*/		return 0x8221D5C8;
		  /* 8221D5C8h */ case   12:  		/* stw R20, <#[R31 + 2648]> */
		/* 8221D5C8h case   12:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R31 + 0x00000A58) );
		/* 8221D5C8h case   12:*/		return 0x8221D5CC;
		  /* 8221D5CCh */ case   13:  		/* lis R7, -32252 */
		/* 8221D5CCh case   13:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8204);
		/* 8221D5CCh case   13:*/		return 0x8221D5D0;
		  /* 8221D5D0h */ case   14:  		/* stw R19, <#[R31 + 2668]> */
		/* 8221D5D0h case   14:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R31 + 0x00000A6C) );
		/* 8221D5D0h case   14:*/		return 0x8221D5D4;
		  /* 8221D5D4h */ case   15:  		/* lis R6, -32252 */
		/* 8221D5D4h case   15:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8204);
		/* 8221D5D4h case   15:*/		return 0x8221D5D8;
		  /* 8221D5D8h */ case   16:  		/* lis R5, -32252 */
		/* 8221D5D8h case   16:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8204);
		/* 8221D5D8h case   16:*/		return 0x8221D5DC;
		  /* 8221D5DCh */ case   17:  		/* lis R29, -32252 */
		/* 8221D5DCh case   17:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8204);
		/* 8221D5DCh case   17:*/		return 0x8221D5E0;
		  /* 8221D5E0h */ case   18:  		/* lis R25, -32252 */
		/* 8221D5E0h case   18:*/		cpu::op::lis<0>(regs,&regs.R25,0xFFFF8204);
		/* 8221D5E0h case   18:*/		return 0x8221D5E4;
		  /* 8221D5E4h */ case   19:  		/* lis R24, -32252 */
		/* 8221D5E4h case   19:*/		cpu::op::lis<0>(regs,&regs.R24,0xFFFF8204);
		/* 8221D5E4h case   19:*/		return 0x8221D5E8;
	}
	return 0x8221D5E8;
} // Block from 8221D598h-8221D5E8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8221D5E8h
// Function '?GetPCS@ShaderOutput@XGRAPHICS@@UAAPAU_CS_COMPILED_SHADER@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D5E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D5E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D5E8);
		  /* 8221D5E8h */ case    0:  		/* lis R23, -32252 */
		/* 8221D5E8h case    0:*/		cpu::op::lis<0>(regs,&regs.R23,0xFFFF8204);
		/* 8221D5E8h case    0:*/		return 0x8221D5EC;
		  /* 8221D5ECh */ case    1:  		/* addi R11, R11, -2576 */
		/* 8221D5ECh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFF5F0);
		/* 8221D5ECh case    1:*/		return 0x8221D5F0;
	}
	return 0x8221D5F0;
} // Block from 8221D5E8h-8221D5F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221D5F0h
// Function '?Malloc@Compiler@XGRAPHICS@@QAAPAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D5F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D5F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D5F0);
		  /* 8221D5F0h */ case    0:  		/* addi R9, R9, -2588 */
		/* 8221D5F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFF5E4);
		/* 8221D5F0h case    0:*/		return 0x8221D5F4;
		  /* 8221D5F4h */ case    1:  		/* addi R8, R8, -2600 */
		/* 8221D5F4h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFF5D8);
		/* 8221D5F4h case    1:*/		return 0x8221D5F8;
		  /* 8221D5F8h */ case    2:  		/* stw R11, <#[R31 + 2156]> */
		/* 8221D5F8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000086C) );
		/* 8221D5F8h case    2:*/		return 0x8221D5FC;
		  /* 8221D5FCh */ case    3:  		/* addi R7, R7, -2608 */
		/* 8221D5FCh case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0xFFFFF5D0);
		/* 8221D5FCh case    3:*/		return 0x8221D600;
		  /* 8221D600h */ case    4:  		/* stw R9, <#[R31 + 2252]> */
		/* 8221D600h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x000008CC) );
		/* 8221D600h case    4:*/		return 0x8221D604;
		  /* 8221D604h */ case    5:  		/* addi R6, R6, -2616 */
		/* 8221D604h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0xFFFFF5C8);
		/* 8221D604h case    5:*/		return 0x8221D608;
		  /* 8221D608h */ case    6:  		/* stw R8, <#[R31 + 2276]> */
		/* 8221D608h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x000008E4) );
		/* 8221D608h case    6:*/		return 0x8221D60C;
		  /* 8221D60Ch */ case    7:  		/* addi R5, R5, -2624 */
		/* 8221D60Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0xFFFFF5C0);
		/* 8221D60Ch case    7:*/		return 0x8221D610;
		  /* 8221D610h */ case    8:  		/* stw R7, <#[R31 + 2300]> */
		/* 8221D610h case    8:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x000008FC) );
		/* 8221D610h case    8:*/		return 0x8221D614;
		  /* 8221D614h */ case    9:  		/* addi R29, R29, -2636 */
		/* 8221D614h case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFF5B4);
		/* 8221D614h case    9:*/		return 0x8221D618;
		  /* 8221D618h */ case   10:  		/* stw R6, <#[R31 + 2324]> */
		/* 8221D618h case   10:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R31 + 0x00000914) );
		/* 8221D618h case   10:*/		return 0x8221D61C;
		  /* 8221D61Ch */ case   11:  		/* addi R4, R25, -2652 */
		/* 8221D61Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R25,0xFFFFF5A4);
		/* 8221D61Ch case   11:*/		return 0x8221D620;
		  /* 8221D620h */ case   12:  		/* stw R5, <#[R31 + 2348]> */
		/* 8221D620h case   12:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R31 + 0x0000092C) );
		/* 8221D620h case   12:*/		return 0x8221D624;
		  /* 8221D624h */ case   13:  		/* addi R3, R24, -2660 */
		/* 8221D624h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R24,0xFFFFF59C);
		/* 8221D624h case   13:*/		return 0x8221D628;
		  /* 8221D628h */ case   14:  		/* stw R29, <#[R31 + 2420]> */
		/* 8221D628h case   14:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000974) );
		/* 8221D628h case   14:*/		return 0x8221D62C;
		  /* 8221D62Ch */ case   15:  		/* addi R10, R23, -2668 */
		/* 8221D62Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R23,0xFFFFF594);
		/* 8221D62Ch case   15:*/		return 0x8221D630;
		  /* 8221D630h */ case   16:  		/* stw R4, <#[R31 + 2516]> */
		/* 8221D630h case   16:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R31 + 0x000009D4) );
		/* 8221D630h case   16:*/		return 0x8221D634;
		  /* 8221D634h */ case   17:  		/* stw R3, <#[R31 + 2228]> */
		/* 8221D634h case   17:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000008B4) );
		/* 8221D634h case   17:*/		return 0x8221D638;
		  /* 8221D638h */ case   18:  		/* li R4, 1884 */
		/* 8221D638h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x75C);
		/* 8221D638h case   18:*/		return 0x8221D63C;
		  /* 8221D63Ch */ case   19:  		/* stw R10, <#[R31 + 2204]> */
		/* 8221D63Ch case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000089C) );
		/* 8221D63Ch case   19:*/		return 0x8221D640;
		  /* 8221D640h */ case   20:  		/* mr R3, R30 */
		/* 8221D640h case   20:*/		regs.R3 = regs.R30;
		/* 8221D640h case   20:*/		return 0x8221D644;
		  /* 8221D644h */ case   21:  		/* stw R11, <#[R31 + 2528]> */
		/* 8221D644h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000009E0) );
		/* 8221D644h case   21:*/		return 0x8221D648;
	}
	return 0x8221D648;
} // Block from 8221D5F0h-8221D648h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8221D648h
// Function '?MakeAp@Compiler@XGRAPHICS@@QAAXH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D648);
		  /* 8221D648h */ case    0:  		/* stw R9, <#[R31 + 2548]> */
		/* 8221D648h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x000009F4) );
		/* 8221D648h case    0:*/		return 0x8221D64C;
		  /* 8221D64Ch */ case    1:  		/* stw R8, <#[R31 + 2568]> */
		/* 8221D64Ch case    1:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000A08) );
		/* 8221D64Ch case    1:*/		return 0x8221D650;
		  /* 8221D650h */ case    2:  		/* stw R7, <#[R31 + 2588]> */
		/* 8221D650h case    2:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x00000A1C) );
		/* 8221D650h case    2:*/		return 0x8221D654;
		  /* 8221D654h */ case    3:  		/* stw R6, <#[R31 + 2608]> */
		/* 8221D654h case    3:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R31 + 0x00000A30) );
		/* 8221D654h case    3:*/		return 0x8221D658;
		  /* 8221D658h */ case    4:  		/* stw R5, <#[R31 + 2628]> */
		/* 8221D658h case    4:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R31 + 0x00000A44) );
		/* 8221D658h case    4:*/		return 0x8221D65C;
		  /* 8221D65Ch */ case    5:  		/* stw R29, <#[R31 + 2688]> */
		/* 8221D65Ch case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000A80) );
		/* 8221D65Ch case    5:*/		return 0x8221D660;
		  /* 8221D660h */ case    6:  		/* bl -4520 */
		/* 8221D660h case    6:*/		regs.LR = 0x8221D664; return 0x8221C4B8;
		/* 8221D660h case    6:*/		return 0x8221D664;
		  /* 8221D664h */ case    7:  		/* mr R11, R3 */
		/* 8221D664h case    7:*/		regs.R11 = regs.R3;
		/* 8221D664h case    7:*/		return 0x8221D668;
		  /* 8221D668h */ case    8:  		/* addic. R3, R3, 4 */
		/* 8221D668h case    8:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R3,0x4);
		/* 8221D668h case    8:*/		return 0x8221D66C;
		  /* 8221D66Ch */ case    9:  		/* stw R30, <#[R11]> */
		/* 8221D66Ch case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 8221D66Ch case    9:*/		return 0x8221D670;
		  /* 8221D670h */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 8221D670h case   10:*/		if ( regs.CR[0].eq ) { return 0x8221D680;  }
		/* 8221D670h case   10:*/		return 0x8221D674;
		  /* 8221D674h */ case   11:  		/* mr R4, R31 */
		/* 8221D674h case   11:*/		regs.R4 = regs.R31;
		/* 8221D674h case   11:*/		return 0x8221D678;
		  /* 8221D678h */ case   12:  		/* bl 213264 */
		/* 8221D678h case   12:*/		regs.LR = 0x8221D67C; return 0x82251788;
		/* 8221D678h case   12:*/		return 0x8221D67C;
		  /* 8221D67Ch */ case   13:  		/* b 8 */
		/* 8221D67Ch case   13:*/		return 0x8221D684;
		/* 8221D67Ch case   13:*/		return 0x8221D680;
	}
	return 0x8221D680;
} // Block from 8221D648h-8221D680h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8221D680h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D680);
		  /* 8221D680h */ case    0:  		/* mr R3, R21 */
		/* 8221D680h case    0:*/		regs.R3 = regs.R21;
		/* 8221D680h case    0:*/		return 0x8221D684;
	}
	return 0x8221D684;
} // Block from 8221D680h-8221D684h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221D684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D684);
		  /* 8221D684h */ case    0:  		/* stw R3, <#[R31 + 2020]> */
		/* 8221D684h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000007E4) );
		/* 8221D684h case    0:*/		return 0x8221D688;
		  /* 8221D688h */ case    1:  		/* lwz R11, <#[R22 + 8]> */
		/* 8221D688h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 8221D688h case    1:*/		return 0x8221D68C;
		  /* 8221D68Ch */ case    2:  		/* addic. R26, R11, -1 */
		/* 8221D68Ch case    2:*/		cpu::op::addic<1>(regs,&regs.R26,regs.R11,0xFFFFFFFF);
		/* 8221D68Ch case    2:*/		return 0x8221D690;
		  /* 8221D690h */ case    3:  		/* bc 12, CR0_LT, 1128 */
		/* 8221D690h case    3:*/		if ( regs.CR[0].lt ) { return 0x8221DAF8;  }
		/* 8221D690h case    3:*/		return 0x8221D694;
		  /* 8221D694h */ case    4:  		/* addi R11, R26, 425 */
		/* 8221D694h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0x1A9);
		/* 8221D694h case    4:*/		return 0x8221D698;
		  /* 8221D698h */ case    5:  		/* addi R23, R22, 12 */
		/* 8221D698h case    5:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R22,0xC);
		/* 8221D698h case    5:*/		return 0x8221D69C;
		  /* 8221D69Ch */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221D69Ch case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221D69Ch case    6:*/		return 0x8221D6A0;
		  /* 8221D6A0h */ case    7:  		/* subfic R25, R31, -1700 */
		/* 8221D6A0h case    7:*/		cpu::op::subfic<0>(regs,&regs.R25,regs.R31,0xFFFFF95C);
		/* 8221D6A0h case    7:*/		return 0x8221D6A4;
		  /* 8221D6A4h */ case    8:  		/* add R29, R11, R31 */
		/* 8221D6A4h case    8:*/		cpu::op::add<0>(regs,&regs.R29,regs.R11,regs.R31);
		/* 8221D6A4h case    8:*/		return 0x8221D6A8;
		  /* 8221D6A8h */ case    9:  		/* lis R11, -32252 */
		/* 8221D6A8h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221D6A8h case    9:*/		return 0x8221D6AC;
		  /* 8221D6ACh */ case   10:  		/* li R27, 1 */
		/* 8221D6ACh case   10:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 8221D6ACh case   10:*/		return 0x8221D6B0;
		  /* 8221D6B0h */ case   11:  		/* addi R24, R11, -2700 */
		/* 8221D6B0h case   11:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0xFFFFF574);
		/* 8221D6B0h case   11:*/		return 0x8221D6B4;
		  /* 8221D6B4h */ case   12:  		/* mr R3, R31 */
		/* 8221D6B4h case   12:*/		regs.R3 = regs.R31;
		/* 8221D6B4h case   12:*/		return 0x8221D6B8;
		  /* 8221D6B8h */ case   13:  		/* stw R26, <#[R31 + 2036]> */
		/* 8221D6B8h case   13:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x000007F4) );
		/* 8221D6B8h case   13:*/		return 0x8221D6BC;
		  /* 8221D6BCh */ case   14:  		/* bl -1204 */
		/* 8221D6BCh case   14:*/		regs.LR = 0x8221D6C0; return 0x8221D208;
		/* 8221D6BCh case   14:*/		return 0x8221D6C0;
		  /* 8221D6C0h */ case   15:  		/* cmpwi CR6, R26, 2 */
		/* 8221D6C0h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000002);
		/* 8221D6C0h case   15:*/		return 0x8221D6C4;
		  /* 8221D6C4h */ case   16:  		/* bc 4, CR6_LT, 12 */
		/* 8221D6C4h case   16:*/		if ( !regs.CR[6].lt ) { return 0x8221D6D0;  }
		/* 8221D6C4h case   16:*/		return 0x8221D6C8;
		  /* 8221D6C8h */ case   17:  		/* add R11, R25, R23 */
		/* 8221D6C8h case   17:*/		cpu::op::add<0>(regs,&regs.R11,regs.R25,regs.R23);
		/* 8221D6C8h case   17:*/		return 0x8221D6CC;
		  /* 8221D6CCh */ case   18:  		/* b 12 */
		/* 8221D6CCh case   18:*/		return 0x8221D6D8;
		/* 8221D6CCh case   18:*/		return 0x8221D6D0;
	}
	return 0x8221D6D0;
} // Block from 8221D684h-8221D6D0h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8221D6D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D6D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D6D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D6D0);
		  /* 8221D6D0h */ case    0:  		/* lwz R11, <#[R22 + 20]> */
		/* 8221D6D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000014) );
		/* 8221D6D0h case    0:*/		return 0x8221D6D4;
		  /* 8221D6D4h */ case    1:  		/* add R11, R11, R25 */
		/* 8221D6D4h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R25);
		/* 8221D6D4h case    1:*/		return 0x8221D6D8;
	}
	return 0x8221D6D8;
} // Block from 8221D6D0h-8221D6D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221D6D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D6D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D6D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D6D8);
		  /* 8221D6D8h */ case    0:  		/* lwz R28, <#[R31 + 1456]> */
		/* 8221D6D8h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x000005B0) );
		/* 8221D6D8h case    0:*/		return 0x8221D6DC;
		  /* 8221D6DCh */ case    1:  		/* li R4, 76 */
		/* 8221D6DCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x4C);
		/* 8221D6DCh case    1:*/		return 0x8221D6E0;
		  /* 8221D6E0h */ case    2:  		/* lwzx R30, <#[R11 + R29]> */
		/* 8221D6E0h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8221D6E0h case    2:*/		return 0x8221D6E4;
		  /* 8221D6E4h */ case    3:  		/* mr R3, R28 */
		/* 8221D6E4h case    3:*/		regs.R3 = regs.R28;
		/* 8221D6E4h case    3:*/		return 0x8221D6E8;
	}
	return 0x8221D6E8;
} // Block from 8221D6D8h-8221D6E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221D6E8h
// Function '?ReleaseSpace@Compiler@XGRAPHICS@@QAAX_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D6E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D6E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D6E8);
		  /* 8221D6E8h */ case    0:  		/* bl -4656 */
		/* 8221D6E8h case    0:*/		regs.LR = 0x8221D6EC; return 0x8221C4B8;
		/* 8221D6E8h case    0:*/		return 0x8221D6EC;
		  /* 8221D6ECh */ case    1:  		/* mr R11, R3 */
		/* 8221D6ECh case    1:*/		regs.R11 = regs.R3;
		/* 8221D6ECh case    1:*/		return 0x8221D6F0;
		  /* 8221D6F0h */ case    2:  		/* addic. R3, R3, 4 */
		/* 8221D6F0h case    2:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R3,0x4);
		/* 8221D6F0h case    2:*/		return 0x8221D6F4;
		  /* 8221D6F4h */ case    3:  		/* stw R28, <#[R11]> */
		/* 8221D6F4h case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 8221D6F4h case    3:*/		return 0x8221D6F8;
		  /* 8221D6F8h */ case    4:  		/* bc 12, CR0_EQ, 24 */
		/* 8221D6F8h case    4:*/		if ( regs.CR[0].eq ) { return 0x8221D710;  }
		/* 8221D6F8h case    4:*/		return 0x8221D6FC;
		  /* 8221D6FCh */ case    5:  		/* mr R5, R31 */
		/* 8221D6FCh case    5:*/		regs.R5 = regs.R31;
		/* 8221D6FCh case    5:*/		return 0x8221D700;
		  /* 8221D700h */ case    6:  		/* mr R4, R30 */
		/* 8221D700h case    6:*/		regs.R4 = regs.R30;
		/* 8221D700h case    6:*/		return 0x8221D704;
		  /* 8221D704h */ case    7:  		/* bl 129740 */
		/* 8221D704h case    7:*/		regs.LR = 0x8221D708; return 0x8223D1D0;
		/* 8221D704h case    7:*/		return 0x8221D708;
		  /* 8221D708h */ case    8:  		/* mr R28, R3 */
		/* 8221D708h case    8:*/		regs.R28 = regs.R3;
		/* 8221D708h case    8:*/		return 0x8221D70C;
		  /* 8221D70Ch */ case    9:  		/* b 8 */
		/* 8221D70Ch case    9:*/		return 0x8221D714;
		/* 8221D70Ch case    9:*/		return 0x8221D710;
	}
	return 0x8221D710;
} // Block from 8221D6E8h-8221D710h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8221D710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D710);
		  /* 8221D710h */ case    0:  		/* mr R28, R21 */
		/* 8221D710h case    0:*/		regs.R28 = regs.R21;
		/* 8221D710h case    0:*/		return 0x8221D714;
	}
	return 0x8221D714;
} // Block from 8221D710h-8221D714h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221D714h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D714( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D714) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D714);
		  /* 8221D714h */ case    0:  		/* lwz R30, <#[R31 + 1452]> */
		/* 8221D714h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x000005AC) );
		/* 8221D714h case    0:*/		return 0x8221D718;
		  /* 8221D718h */ case    1:  		/* li R4, 2180 */
		/* 8221D718h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x884);
		/* 8221D718h case    1:*/		return 0x8221D71C;
		  /* 8221D71Ch */ case    2:  		/* mr R3, R30 */
		/* 8221D71Ch case    2:*/		regs.R3 = regs.R30;
		/* 8221D71Ch case    2:*/		return 0x8221D720;
		  /* 8221D720h */ case    3:  		/* bl -4712 */
		/* 8221D720h case    3:*/		regs.LR = 0x8221D724; return 0x8221C4B8;
		/* 8221D720h case    3:*/		return 0x8221D724;
		  /* 8221D724h */ case    4:  		/* mr R11, R3 */
		/* 8221D724h case    4:*/		regs.R11 = regs.R3;
		/* 8221D724h case    4:*/		return 0x8221D728;
		  /* 8221D728h */ case    5:  		/* addic. R3, R3, 4 */
		/* 8221D728h case    5:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R3,0x4);
		/* 8221D728h case    5:*/		return 0x8221D72C;
		  /* 8221D72Ch */ case    6:  		/* stw R30, <#[R11]> */
		/* 8221D72Ch case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 8221D72Ch case    6:*/		return 0x8221D730;
		  /* 8221D730h */ case    7:  		/* bc 12, CR0_EQ, 28 */
		/* 8221D730h case    7:*/		if ( regs.CR[0].eq ) { return 0x8221D74C;  }
		/* 8221D730h case    7:*/		return 0x8221D734;
		  /* 8221D734h */ case    8:  		/* mr R6, R31 */
		/* 8221D734h case    8:*/		regs.R6 = regs.R31;
		/* 8221D734h case    8:*/		return 0x8221D738;
		  /* 8221D738h */ case    9:  		/* lwz R5, <#[R31 + 1536]> */
		/* 8221D738h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000600) );
		/* 8221D738h case    9:*/		return 0x8221D73C;
		  /* 8221D73Ch */ case   10:  		/* lwz R4, <#[R31 + 2020]> */
		/* 8221D73Ch case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x000007E4) );
		/* 8221D73Ch case   10:*/		return 0x8221D740;
		  /* 8221D740h */ case   11:  		/* bl 114176 */
		/* 8221D740h case   11:*/		regs.LR = 0x8221D744; return 0x82239540;
		/* 8221D740h case   11:*/		return 0x8221D744;
		  /* 8221D744h */ case   12:  		/* mr R30, R3 */
		/* 8221D744h case   12:*/		regs.R30 = regs.R3;
		/* 8221D744h case   12:*/		return 0x8221D748;
		  /* 8221D748h */ case   13:  		/* b 8 */
		/* 8221D748h case   13:*/		return 0x8221D750;
		/* 8221D748h case   13:*/		return 0x8221D74C;
	}
	return 0x8221D74C;
} // Block from 8221D714h-8221D74Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8221D74Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D74C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D74C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D74C);
		  /* 8221D74Ch */ case    0:  		/* mr R30, R21 */
		/* 8221D74Ch case    0:*/		regs.R30 = regs.R21;
		/* 8221D74Ch case    0:*/		return 0x8221D750;
	}
	return 0x8221D750;
} // Block from 8221D74Ch-8221D750h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221D750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D750);
		  /* 8221D750h */ case    0:  		/* mr R4, R28 */
		/* 8221D750h case    0:*/		regs.R4 = regs.R28;
		/* 8221D750h case    0:*/		return 0x8221D754;
		  /* 8221D754h */ case    1:  		/* mr R3, R30 */
		/* 8221D754h case    1:*/		regs.R3 = regs.R30;
		/* 8221D754h case    1:*/		return 0x8221D758;
		  /* 8221D758h */ case    2:  		/* bl 127352 */
		/* 8221D758h case    2:*/		regs.LR = 0x8221D75C; return 0x8223C8D0;
		/* 8221D758h case    2:*/		return 0x8221D75C;
		  /* 8221D75Ch */ case    3:  		/* cmplwi CR6, R28, 0 */
		/* 8221D75Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8221D75Ch case    3:*/		return 0x8221D760;
	}
	return 0x8221D760;
} // Block from 8221D750h-8221D760h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221D760h
// Function '?SetConstantComponent@Compiler@XGRAPHICS@@QAAXHHUkonst@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D760);
		  /* 8221D760h */ case    0:  		/* bc 12, CR6_EQ, 24 */
		/* 8221D760h case    0:*/		if ( regs.CR[6].eq ) { return 0x8221D778;  }
		/* 8221D760h case    0:*/		return 0x8221D764;
		  /* 8221D764h */ case    1:  		/* mr R3, R28 */
		/* 8221D764h case    1:*/		regs.R3 = regs.R28;
		/* 8221D764h case    1:*/		return 0x8221D768;
		  /* 8221D768h */ case    2:  		/* bl 130176 */
		/* 8221D768h case    2:*/		regs.LR = 0x8221D76C; return 0x8223D3E8;
		/* 8221D768h case    2:*/		return 0x8221D76C;
		  /* 8221D76Ch */ case    3:  		/* addi R4, R28, -4 */
		/* 8221D76Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R28,0xFFFFFFFC);
		/* 8221D76Ch case    3:*/		return 0x8221D770;
		  /* 8221D770h */ case    4:  		/* lwz R3, <#[R28 - 4]> */
		/* 8221D770h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0xFFFFFFFC) );
		/* 8221D770h case    4:*/		return 0x8221D774;
		  /* 8221D774h */ case    5:  		/* bl -4404 */
		/* 8221D774h case    5:*/		regs.LR = 0x8221D778; return 0x8221C640;
		/* 8221D774h case    5:*/		return 0x8221D778;
	}
	return 0x8221D778;
} // Block from 8221D760h-8221D778h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221D778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D778);
		  /* 8221D778h */ case    0:  		/* stb R27, <#[R31 + 2544]> */
		/* 8221D778h case    0:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R31 + 0x000009F0) );
		/* 8221D778h case    0:*/		return 0x8221D77C;
		  /* 8221D77Ch */ case    1:  		/* lwz R3, <#[R31 + 1456]> */
		/* 8221D77Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005B0) );
		/* 8221D77Ch case    1:*/		return 0x8221D780;
		  /* 8221D780h */ case    2:  		/* bl 127752 */
		/* 8221D780h case    2:*/		regs.LR = 0x8221D784; return 0x8223CA88;
		/* 8221D780h case    2:*/		return 0x8221D784;
		  /* 8221D784h */ case    3:  		/* stw R3, <#[R31 + 2532]> */
		/* 8221D784h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000009E4) );
		/* 8221D784h case    3:*/		return 0x8221D788;
		  /* 8221D788h */ case    4:  		/* lwz R3, <#[R31 + 1452]> */
		/* 8221D788h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005AC) );
		/* 8221D788h case    4:*/		return 0x8221D78C;
		  /* 8221D78Ch */ case    5:  		/* bl 127740 */
		/* 8221D78Ch case    5:*/		regs.LR = 0x8221D790; return 0x8223CA88;
		/* 8221D78Ch case    5:*/		return 0x8221D790;
		  /* 8221D790h */ case    6:  		/* stw R3, <#[R31 + 2536]> */
		/* 8221D790h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000009E8) );
		/* 8221D790h case    6:*/		return 0x8221D794;
		  /* 8221D794h */ case    7:  		/* lwz R3, <#[R31 + 1448]> */
		/* 8221D794h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005A8) );
		/* 8221D794h case    7:*/		return 0x8221D798;
		  /* 8221D798h */ case    8:  		/* bl 127728 */
		/* 8221D798h case    8:*/		regs.LR = 0x8221D79C; return 0x8223CA88;
		/* 8221D798h case    8:*/		return 0x8221D79C;
		  /* 8221D79Ch */ case    9:  		/* stw R3, <#[R31 + 2540]> */
		/* 8221D79Ch case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000009EC) );
		/* 8221D79Ch case    9:*/		return 0x8221D7A0;
		  /* 8221D7A0h */ case   10:  		/* lwz R3, <#[R31 + 1456]> */
		/* 8221D7A0h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005B0) );
		/* 8221D7A0h case   10:*/		return 0x8221D7A4;
		  /* 8221D7A4h */ case   11:  		/* bl 127596 */
		/* 8221D7A4h case   11:*/		regs.LR = 0x8221D7A8; return 0x8223CA10;
		/* 8221D7A4h case   11:*/		return 0x8221D7A8;
		  /* 8221D7A8h */ case   12:  		/* mr R3, R30 */
		/* 8221D7A8h case   12:*/		regs.R3 = regs.R30;
		/* 8221D7A8h case   12:*/		return 0x8221D7AC;
		  /* 8221D7ACh */ case   13:  		/* bl 184220 */
		/* 8221D7ACh case   13:*/		regs.LR = 0x8221D7B0; return 0x8224A748;
		/* 8221D7ACh case   13:*/		return 0x8221D7B0;
		  /* 8221D7B0h */ case   14:  		/* stb R27, <#[R31 + 2564]> */
		/* 8221D7B0h case   14:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R31 + 0x00000A04) );
		/* 8221D7B0h case   14:*/		return 0x8221D7B4;
		  /* 8221D7B4h */ case   15:  		/* lwz R3, <#[R31 + 1456]> */
		/* 8221D7B4h case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005B0) );
		/* 8221D7B4h case   15:*/		return 0x8221D7B8;
		  /* 8221D7B8h */ case   16:  		/* bl 127696 */
		/* 8221D7B8h case   16:*/		regs.LR = 0x8221D7BC; return 0x8223CA88;
		/* 8221D7B8h case   16:*/		return 0x8221D7BC;
		  /* 8221D7BCh */ case   17:  		/* stw R3, <#[R31 + 2552]> */
		/* 8221D7BCh case   17:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000009F8) );
		/* 8221D7BCh case   17:*/		return 0x8221D7C0;
		  /* 8221D7C0h */ case   18:  		/* lwz R3, <#[R31 + 1452]> */
		/* 8221D7C0h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005AC) );
		/* 8221D7C0h case   18:*/		return 0x8221D7C4;
		  /* 8221D7C4h */ case   19:  		/* bl 127684 */
		/* 8221D7C4h case   19:*/		regs.LR = 0x8221D7C8; return 0x8223CA88;
		/* 8221D7C4h case   19:*/		return 0x8221D7C8;
		  /* 8221D7C8h */ case   20:  		/* stw R3, <#[R31 + 2556]> */
		/* 8221D7C8h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000009FC) );
		/* 8221D7C8h case   20:*/		return 0x8221D7CC;
		  /* 8221D7CCh */ case   21:  		/* lwz R3, <#[R31 + 1448]> */
		/* 8221D7CCh case   21:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005A8) );
		/* 8221D7CCh case   21:*/		return 0x8221D7D0;
		  /* 8221D7D0h */ case   22:  		/* bl 127672 */
		/* 8221D7D0h case   22:*/		regs.LR = 0x8221D7D4; return 0x8223CA88;
		/* 8221D7D0h case   22:*/		return 0x8221D7D4;
		  /* 8221D7D4h */ case   23:  		/* stw R3, <#[R31 + 2560]> */
		/* 8221D7D4h case   23:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000A00) );
		/* 8221D7D4h case   23:*/		return 0x8221D7D8;
		  /* 8221D7D8h */ case   24:  		/* lwz R3, <#[R31 + 1456]> */
		/* 8221D7D8h case   24:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005B0) );
		/* 8221D7D8h case   24:*/		return 0x8221D7DC;
		  /* 8221D7DCh */ case   25:  		/* bl 127540 */
		/* 8221D7DCh case   25:*/		regs.LR = 0x8221D7E0; return 0x8223CA10;
		/* 8221D7DCh case   25:*/		return 0x8221D7E0;
		  /* 8221D7E0h */ case   26:  		/* lwz R11, <#[R31 + 2136]> */
		/* 8221D7E0h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000858) );
		/* 8221D7E0h case   26:*/		return 0x8221D7E4;
		  /* 8221D7E4h */ case   27:  		/* rlwinm. R11, R11, 28, 31, 31 */
		/* 8221D7E4h case   27:*/		cpu::op::rlwinm<1,28,31,31>(regs,&regs.R11,regs.R11);
		/* 8221D7E4h case   27:*/		return 0x8221D7E8;
		  /* 8221D7E8h */ case   28:  		/* bc 12, CR0_EQ, 12 */
		/* 8221D7E8h case   28:*/		if ( regs.CR[0].eq ) { return 0x8221D7F4;  }
		/* 8221D7E8h case   28:*/		return 0x8221D7EC;
		  /* 8221D7ECh */ case   29:  		/* mr R3, R30 */
		/* 8221D7ECh case   29:*/		regs.R3 = regs.R30;
		/* 8221D7ECh case   29:*/		return 0x8221D7F0;
		  /* 8221D7F0h */ case   30:  		/* bl 211528 */
		/* 8221D7F0h case   30:*/		regs.LR = 0x8221D7F4; return 0x82251238;
		/* 8221D7F0h case   30:*/		return 0x8221D7F4;
	}
	return 0x8221D7F4;
} // Block from 8221D778h-8221D7F4h (31 instructions)

//////////////////////////////////////////////////////
// Block at 8221D7F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D7F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D7F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D7F4);
		  /* 8221D7F4h */ case    0:  		/* lwz R11, <#[R31 + 2136]> */
		/* 8221D7F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000858) );
		/* 8221D7F4h case    0:*/		return 0x8221D7F8;
	}
	return 0x8221D7F8;
} // Block from 8221D7F4h-8221D7F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221D7F8h
// Function '?AllocFetchConst@ShaderPairOutput@XGRAPHICS@@UAAXW4IL_Shader_Type@2@W4E_FETCH_TYPE@2@IPAI2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D7F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D7F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D7F8);
		  /* 8221D7F8h */ case    0:  		/* rlwinm. R11, R11, 27, 31, 31 */
		/* 8221D7F8h case    0:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R11,regs.R11);
		/* 8221D7F8h case    0:*/		return 0x8221D7FC;
		  /* 8221D7FCh */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 8221D7FCh case    1:*/		if ( regs.CR[0].eq ) { return 0x8221D808;  }
		/* 8221D7FCh case    1:*/		return 0x8221D800;
		  /* 8221D800h */ case    2:  		/* mr R3, R30 */
		/* 8221D800h case    2:*/		regs.R3 = regs.R30;
		/* 8221D800h case    2:*/		return 0x8221D804;
		  /* 8221D804h */ case    3:  		/* bl 212340 */
		/* 8221D804h case    3:*/		regs.LR = 0x8221D808; return 0x82251578;
		/* 8221D804h case    3:*/		return 0x8221D808;
	}
	return 0x8221D808;
} // Block from 8221D7F8h-8221D808h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221D808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D808);
		  /* 8221D808h */ case    0:  		/* mr R3, R30 */
		/* 8221D808h case    0:*/		regs.R3 = regs.R30;
		/* 8221D808h case    0:*/		return 0x8221D80C;
		  /* 8221D80Ch */ case    1:  		/* bl 126908 */
		/* 8221D80Ch case    1:*/		regs.LR = 0x8221D810; return 0x8223C7C8;
		/* 8221D80Ch case    1:*/		return 0x8221D810;
		  /* 8221D810h */ case    2:  		/* stb R27, <#[R31 + 2584]> */
		/* 8221D810h case    2:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R31 + 0x00000A18) );
		/* 8221D810h case    2:*/		return 0x8221D814;
		  /* 8221D814h */ case    3:  		/* lwz R3, <#[R31 + 1456]> */
		/* 8221D814h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005B0) );
		/* 8221D814h case    3:*/		return 0x8221D818;
		  /* 8221D818h */ case    4:  		/* bl 127600 */
		/* 8221D818h case    4:*/		regs.LR = 0x8221D81C; return 0x8223CA88;
		/* 8221D818h case    4:*/		return 0x8221D81C;
		  /* 8221D81Ch */ case    5:  		/* stw R3, <#[R31 + 2572]> */
		/* 8221D81Ch case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000A0C) );
		/* 8221D81Ch case    5:*/		return 0x8221D820;
		  /* 8221D820h */ case    6:  		/* lwz R3, <#[R31 + 1452]> */
		/* 8221D820h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005AC) );
		/* 8221D820h case    6:*/		return 0x8221D824;
		  /* 8221D824h */ case    7:  		/* bl 127588 */
		/* 8221D824h case    7:*/		regs.LR = 0x8221D828; return 0x8223CA88;
		/* 8221D824h case    7:*/		return 0x8221D828;
		  /* 8221D828h */ case    8:  		/* stw R3, <#[R31 + 2576]> */
		/* 8221D828h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000A10) );
		/* 8221D828h case    8:*/		return 0x8221D82C;
		  /* 8221D82Ch */ case    9:  		/* lwz R3, <#[R31 + 1448]> */
		/* 8221D82Ch case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005A8) );
		/* 8221D82Ch case    9:*/		return 0x8221D830;
		  /* 8221D830h */ case   10:  		/* bl 127576 */
		/* 8221D830h case   10:*/		regs.LR = 0x8221D834; return 0x8223CA88;
		/* 8221D830h case   10:*/		return 0x8221D834;
		  /* 8221D834h */ case   11:  		/* stw R3, <#[R31 + 2580]> */
		/* 8221D834h case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000A14) );
		/* 8221D834h case   11:*/		return 0x8221D838;
		  /* 8221D838h */ case   12:  		/* lwz R3, <#[R31 + 1456]> */
		/* 8221D838h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005B0) );
		/* 8221D838h case   12:*/		return 0x8221D83C;
		  /* 8221D83Ch */ case   13:  		/* bl 127444 */
		/* 8221D83Ch case   13:*/		regs.LR = 0x8221D840; return 0x8223CA10;
		/* 8221D83Ch case   13:*/		return 0x8221D840;
		  /* 8221D840h */ case   14:  		/* lwz R11, <#[R31 + 2136]> */
		/* 8221D840h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000858) );
		/* 8221D840h case   14:*/		return 0x8221D844;
		  /* 8221D844h */ case   15:  		/* rlwinm. R11, R11, 24, 31, 31 */
		/* 8221D844h case   15:*/		cpu::op::rlwinm<1,24,31,31>(regs,&regs.R11,regs.R11);
		/* 8221D844h case   15:*/		return 0x8221D848;
		  /* 8221D848h */ case   16:  		/* bc 12, CR0_EQ, 12 */
		/* 8221D848h case   16:*/		if ( regs.CR[0].eq ) { return 0x8221D854;  }
		/* 8221D848h case   16:*/		return 0x8221D84C;
		  /* 8221D84Ch */ case   17:  		/* mr R3, R30 */
		/* 8221D84Ch case   17:*/		regs.R3 = regs.R30;
		/* 8221D84Ch case   17:*/		return 0x8221D850;
		  /* 8221D850h */ case   18:  		/* bl 205488 */
		/* 8221D850h case   18:*/		regs.LR = 0x8221D854; return 0x8224FB00;
		/* 8221D850h case   18:*/		return 0x8221D854;
	}
	return 0x8221D854;
} // Block from 8221D808h-8221D854h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8221D854h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D854( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D854) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D854);
		  /* 8221D854h */ case    0:  		/* stb R27, <#[R31 + 2604]> */
		/* 8221D854h case    0:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R31 + 0x00000A2C) );
		/* 8221D854h case    0:*/		return 0x8221D858;
		  /* 8221D858h */ case    1:  		/* lwz R3, <#[R31 + 1456]> */
		/* 8221D858h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005B0) );
		/* 8221D858h case    1:*/		return 0x8221D85C;
		  /* 8221D85Ch */ case    2:  		/* bl 127532 */
		/* 8221D85Ch case    2:*/		regs.LR = 0x8221D860; return 0x8223CA88;
		/* 8221D85Ch case    2:*/		return 0x8221D860;
		  /* 8221D860h */ case    3:  		/* stw R3, <#[R31 + 2592]> */
		/* 8221D860h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000A20) );
		/* 8221D860h case    3:*/		return 0x8221D864;
		  /* 8221D864h */ case    4:  		/* lwz R3, <#[R31 + 1452]> */
		/* 8221D864h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005AC) );
		/* 8221D864h case    4:*/		return 0x8221D868;
	}
	return 0x8221D868;
} // Block from 8221D854h-8221D868h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221D868h
// Function '?OutputVertexPatch@ShaderPairOutput@XGRAPHICS@@UAAXHHPAVCompiler@2@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D868);
		  /* 8221D868h */ case    0:  		/* bl 127520 */
		/* 8221D868h case    0:*/		regs.LR = 0x8221D86C; return 0x8223CA88;
		/* 8221D868h case    0:*/		return 0x8221D86C;
		  /* 8221D86Ch */ case    1:  		/* stw R3, <#[R31 + 2596]> */
		/* 8221D86Ch case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000A24) );
		/* 8221D86Ch case    1:*/		return 0x8221D870;
		  /* 8221D870h */ case    2:  		/* lwz R3, <#[R31 + 1448]> */
		/* 8221D870h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005A8) );
		/* 8221D870h case    2:*/		return 0x8221D874;
		  /* 8221D874h */ case    3:  		/* bl 127508 */
		/* 8221D874h case    3:*/		regs.LR = 0x8221D878; return 0x8223CA88;
		/* 8221D874h case    3:*/		return 0x8221D878;
		  /* 8221D878h */ case    4:  		/* stw R3, <#[R31 + 2600]> */
		/* 8221D878h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000A28) );
		/* 8221D878h case    4:*/		return 0x8221D87C;
		  /* 8221D87Ch */ case    5:  		/* lwz R3, <#[R31 + 1456]> */
		/* 8221D87Ch case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005B0) );
		/* 8221D87Ch case    5:*/		return 0x8221D880;
		  /* 8221D880h */ case    6:  		/* bl 127376 */
		/* 8221D880h case    6:*/		regs.LR = 0x8221D884; return 0x8223CA10;
		/* 8221D880h case    6:*/		return 0x8221D884;
		  /* 8221D884h */ case    7:  		/* mr R3, R30 */
		/* 8221D884h case    7:*/		regs.R3 = regs.R30;
		/* 8221D884h case    7:*/		return 0x8221D888;
		  /* 8221D888h */ case    8:  		/* lwz R4, <#[R31 + 2020]> */
		/* 8221D888h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x000007E4) );
		/* 8221D888h case    8:*/		return 0x8221D88C;
		  /* 8221D88Ch */ case    9:  		/* bl 99444 */
		/* 8221D88Ch case    9:*/		regs.LR = 0x8221D890; return 0x82235D00;
		/* 8221D88Ch case    9:*/		return 0x8221D890;
		  /* 8221D890h */ case   10:  		/* stb R27, <#[R31 + 2624]> */
		/* 8221D890h case   10:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R31 + 0x00000A40) );
		/* 8221D890h case   10:*/		return 0x8221D894;
		  /* 8221D894h */ case   11:  		/* lwz R3, <#[R31 + 1456]> */
		/* 8221D894h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005B0) );
		/* 8221D894h case   11:*/		return 0x8221D898;
		  /* 8221D898h */ case   12:  		/* bl 127472 */
		/* 8221D898h case   12:*/		regs.LR = 0x8221D89C; return 0x8223CA88;
		/* 8221D898h case   12:*/		return 0x8221D89C;
		  /* 8221D89Ch */ case   13:  		/* stw R3, <#[R31 + 2612]> */
		/* 8221D89Ch case   13:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000A34) );
		/* 8221D89Ch case   13:*/		return 0x8221D8A0;
		  /* 8221D8A0h */ case   14:  		/* lwz R3, <#[R31 + 1452]> */
		/* 8221D8A0h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005AC) );
		/* 8221D8A0h case   14:*/		return 0x8221D8A4;
		  /* 8221D8A4h */ case   15:  		/* bl 127460 */
		/* 8221D8A4h case   15:*/		regs.LR = 0x8221D8A8; return 0x8223CA88;
		/* 8221D8A4h case   15:*/		return 0x8221D8A8;
		  /* 8221D8A8h */ case   16:  		/* stw R3, <#[R31 + 2616]> */
		/* 8221D8A8h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000A38) );
		/* 8221D8A8h case   16:*/		return 0x8221D8AC;
		  /* 8221D8ACh */ case   17:  		/* lwz R3, <#[R31 + 1448]> */
		/* 8221D8ACh case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005A8) );
		/* 8221D8ACh case   17:*/		return 0x8221D8B0;
		  /* 8221D8B0h */ case   18:  		/* bl 127448 */
		/* 8221D8B0h case   18:*/		regs.LR = 0x8221D8B4; return 0x8223CA88;
		/* 8221D8B0h case   18:*/		return 0x8221D8B4;
		  /* 8221D8B4h */ case   19:  		/* stw R3, <#[R31 + 2620]> */
		/* 8221D8B4h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000A3C) );
		/* 8221D8B4h case   19:*/		return 0x8221D8B8;
		  /* 8221D8B8h */ case   20:  		/* lwz R3, <#[R31 + 1456]> */
		/* 8221D8B8h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005B0) );
		/* 8221D8B8h case   20:*/		return 0x8221D8BC;
		  /* 8221D8BCh */ case   21:  		/* bl 127316 */
		/* 8221D8BCh case   21:*/		regs.LR = 0x8221D8C0; return 0x8223CA10;
		/* 8221D8BCh case   21:*/		return 0x8221D8C0;
		  /* 8221D8C0h */ case   22:  		/* mr R3, R30 */
		/* 8221D8C0h case   22:*/		regs.R3 = regs.R30;
		/* 8221D8C0h case   22:*/		return 0x8221D8C4;
		  /* 8221D8C4h */ case   23:  		/* bl 204612 */
		/* 8221D8C4h case   23:*/		regs.LR = 0x8221D8C8; return 0x8224F808;
		/* 8221D8C4h case   23:*/		return 0x8221D8C8;
		  /* 8221D8C8h */ case   24:  		/* stb R27, <#[R31 + 2644]> */
		/* 8221D8C8h case   24:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R31 + 0x00000A54) );
		/* 8221D8C8h case   24:*/		return 0x8221D8CC;
		  /* 8221D8CCh */ case   25:  		/* lwz R3, <#[R31 + 1456]> */
		/* 8221D8CCh case   25:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005B0) );
		/* 8221D8CCh case   25:*/		return 0x8221D8D0;
		  /* 8221D8D0h */ case   26:  		/* bl 127416 */
		/* 8221D8D0h case   26:*/		regs.LR = 0x8221D8D4; return 0x8223CA88;
		/* 8221D8D0h case   26:*/		return 0x8221D8D4;
		  /* 8221D8D4h */ case   27:  		/* stw R3, <#[R31 + 2632]> */
		/* 8221D8D4h case   27:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000A48) );
		/* 8221D8D4h case   27:*/		return 0x8221D8D8;
		  /* 8221D8D8h */ case   28:  		/* lwz R3, <#[R31 + 1452]> */
		/* 8221D8D8h case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005AC) );
		/* 8221D8D8h case   28:*/		return 0x8221D8DC;
		  /* 8221D8DCh */ case   29:  		/* bl 127404 */
		/* 8221D8DCh case   29:*/		regs.LR = 0x8221D8E0; return 0x8223CA88;
		/* 8221D8DCh case   29:*/		return 0x8221D8E0;
		  /* 8221D8E0h */ case   30:  		/* stw R3, <#[R31 + 2636]> */
		/* 8221D8E0h case   30:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000A4C) );
		/* 8221D8E0h case   30:*/		return 0x8221D8E4;
		  /* 8221D8E4h */ case   31:  		/* lwz R3, <#[R31 + 1448]> */
		/* 8221D8E4h case   31:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005A8) );
		/* 8221D8E4h case   31:*/		return 0x8221D8E8;
		  /* 8221D8E8h */ case   32:  		/* bl 127392 */
		/* 8221D8E8h case   32:*/		regs.LR = 0x8221D8EC; return 0x8223CA88;
		/* 8221D8E8h case   32:*/		return 0x8221D8EC;
		  /* 8221D8ECh */ case   33:  		/* stw R3, <#[R31 + 2640]> */
		/* 8221D8ECh case   33:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000A50) );
		/* 8221D8ECh case   33:*/		return 0x8221D8F0;
		  /* 8221D8F0h */ case   34:  		/* lwz R3, <#[R31 + 1456]> */
		/* 8221D8F0h case   34:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005B0) );
		/* 8221D8F0h case   34:*/		return 0x8221D8F4;
		  /* 8221D8F4h */ case   35:  		/* bl 127260 */
		/* 8221D8F4h case   35:*/		regs.LR = 0x8221D8F8; return 0x8223CA10;
		/* 8221D8F4h case   35:*/		return 0x8221D8F8;
		  /* 8221D8F8h */ case   36:  		/* mr R3, R30 */
		/* 8221D8F8h case   36:*/		regs.R3 = regs.R30;
		/* 8221D8F8h case   36:*/		return 0x8221D8FC;
		  /* 8221D8FCh */ case   37:  		/* bl 180012 */
		/* 8221D8FCh case   37:*/		regs.LR = 0x8221D900; return 0x82249828;
		/* 8221D8FCh case   37:*/		return 0x8221D900;
		  /* 8221D900h */ case   38:  		/* stb R27, <#[R31 + 2664]> */
		/* 8221D900h case   38:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R31 + 0x00000A68) );
		/* 8221D900h case   38:*/		return 0x8221D904;
		  /* 8221D904h */ case   39:  		/* lwz R3, <#[R31 + 1456]> */
		/* 8221D904h case   39:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005B0) );
		/* 8221D904h case   39:*/		return 0x8221D908;
		  /* 8221D908h */ case   40:  		/* bl 127360 */
		/* 8221D908h case   40:*/		regs.LR = 0x8221D90C; return 0x8223CA88;
		/* 8221D908h case   40:*/		return 0x8221D90C;
		  /* 8221D90Ch */ case   41:  		/* stw R3, <#[R31 + 2652]> */
		/* 8221D90Ch case   41:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000A5C) );
		/* 8221D90Ch case   41:*/		return 0x8221D910;
		  /* 8221D910h */ case   42:  		/* lwz R3, <#[R31 + 1452]> */
		/* 8221D910h case   42:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005AC) );
		/* 8221D910h case   42:*/		return 0x8221D914;
		  /* 8221D914h */ case   43:  		/* bl 127348 */
		/* 8221D914h case   43:*/		regs.LR = 0x8221D918; return 0x8223CA88;
		/* 8221D914h case   43:*/		return 0x8221D918;
	}
	return 0x8221D918;
} // Block from 8221D868h-8221D918h (44 instructions)

//////////////////////////////////////////////////////
// Block at 8221D918h
// Function '?AllocFetchConst@ShaderOutput@XGRAPHICS@@UAAXW4IL_Shader_Type@2@W4E_FETCH_TYPE@2@IPAI2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D918);
		  /* 8221D918h */ case    0:  		/* stw R3, <#[R31 + 2656]> */
		/* 8221D918h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000A60) );
		/* 8221D918h case    0:*/		return 0x8221D91C;
		  /* 8221D91Ch */ case    1:  		/* lwz R3, <#[R31 + 1448]> */
		/* 8221D91Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005A8) );
		/* 8221D91Ch case    1:*/		return 0x8221D920;
		  /* 8221D920h */ case    2:  		/* bl 127336 */
		/* 8221D920h case    2:*/		regs.LR = 0x8221D924; return 0x8223CA88;
		/* 8221D920h case    2:*/		return 0x8221D924;
		  /* 8221D924h */ case    3:  		/* stw R3, <#[R31 + 2660]> */
		/* 8221D924h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000A64) );
		/* 8221D924h case    3:*/		return 0x8221D928;
		  /* 8221D928h */ case    4:  		/* lwz R3, <#[R31 + 1456]> */
		/* 8221D928h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005B0) );
		/* 8221D928h case    4:*/		return 0x8221D92C;
		  /* 8221D92Ch */ case    5:  		/* bl 127204 */
		/* 8221D92Ch case    5:*/		regs.LR = 0x8221D930; return 0x8223CA10;
		/* 8221D92Ch case    5:*/		return 0x8221D930;
		  /* 8221D930h */ case    6:  		/* mr R3, R30 */
		/* 8221D930h case    6:*/		regs.R3 = regs.R30;
		/* 8221D930h case    6:*/		return 0x8221D934;
		  /* 8221D934h */ case    7:  		/* bl 173492 */
		/* 8221D934h case    7:*/		regs.LR = 0x8221D938; return 0x82247EE8;
		/* 8221D934h case    7:*/		return 0x8221D938;
		  /* 8221D938h */ case    8:  		/* stb R27, <#[R31 + 2684]> */
		/* 8221D938h case    8:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R31 + 0x00000A7C) );
		/* 8221D938h case    8:*/		return 0x8221D93C;
		  /* 8221D93Ch */ case    9:  		/* lwz R3, <#[R31 + 1456]> */
		/* 8221D93Ch case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005B0) );
		/* 8221D93Ch case    9:*/		return 0x8221D940;
		  /* 8221D940h */ case   10:  		/* bl 127304 */
		/* 8221D940h case   10:*/		regs.LR = 0x8221D944; return 0x8223CA88;
		/* 8221D940h case   10:*/		return 0x8221D944;
		  /* 8221D944h */ case   11:  		/* stw R3, <#[R31 + 2672]> */
		/* 8221D944h case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000A70) );
		/* 8221D944h case   11:*/		return 0x8221D948;
		  /* 8221D948h */ case   12:  		/* lwz R3, <#[R31 + 1452]> */
		/* 8221D948h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005AC) );
		/* 8221D948h case   12:*/		return 0x8221D94C;
		  /* 8221D94Ch */ case   13:  		/* bl 127292 */
		/* 8221D94Ch case   13:*/		regs.LR = 0x8221D950; return 0x8223CA88;
		/* 8221D94Ch case   13:*/		return 0x8221D950;
		  /* 8221D950h */ case   14:  		/* stw R3, <#[R31 + 2676]> */
		/* 8221D950h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000A74) );
		/* 8221D950h case   14:*/		return 0x8221D954;
		  /* 8221D954h */ case   15:  		/* lwz R3, <#[R31 + 1448]> */
		/* 8221D954h case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005A8) );
		/* 8221D954h case   15:*/		return 0x8221D958;
		  /* 8221D958h */ case   16:  		/* bl 127280 */
		/* 8221D958h case   16:*/		regs.LR = 0x8221D95C; return 0x8223CA88;
		/* 8221D958h case   16:*/		return 0x8221D95C;
		  /* 8221D95Ch */ case   17:  		/* stw R3, <#[R31 + 2680]> */
		/* 8221D95Ch case   17:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000A78) );
		/* 8221D95Ch case   17:*/		return 0x8221D960;
		  /* 8221D960h */ case   18:  		/* lwz R3, <#[R31 + 1456]> */
		/* 8221D960h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005B0) );
		/* 8221D960h case   18:*/		return 0x8221D964;
		  /* 8221D964h */ case   19:  		/* bl 127148 */
		/* 8221D964h case   19:*/		regs.LR = 0x8221D968; return 0x8223CA10;
		/* 8221D964h case   19:*/		return 0x8221D968;
		  /* 8221D968h */ case   20:  		/* mr R3, R30 */
		/* 8221D968h case   20:*/		regs.R3 = regs.R30;
		/* 8221D968h case   20:*/		return 0x8221D96C;
		  /* 8221D96Ch */ case   21:  		/* bl 170836 */
		/* 8221D96Ch case   21:*/		regs.LR = 0x8221D970; return 0x822474C0;
		/* 8221D96Ch case   21:*/		return 0x8221D970;
	}
	return 0x8221D970;
} // Block from 8221D918h-8221D970h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8221D970h
// Function '?SetRecycle@Compiler@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D970);
		  /* 8221D970h */ case    0:  		/* mr R5, R26 */
		/* 8221D970h case    0:*/		regs.R5 = regs.R26;
		/* 8221D970h case    0:*/		return 0x8221D974;
		  /* 8221D974h */ case    1:  		/* addi R4, R29, -160 */
		/* 8221D974h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0xFFFFFF60);
		/* 8221D974h case    1:*/		return 0x8221D978;
		  /* 8221D978h */ case    2:  		/* mr R3, R30 */
		/* 8221D978h case    2:*/		regs.R3 = regs.R30;
		/* 8221D978h case    2:*/		return 0x8221D97C;
		  /* 8221D97Ch */ case    3:  		/* bl 159132 */
		/* 8221D97Ch case    3:*/		regs.LR = 0x8221D980; return 0x82244718;
		/* 8221D97Ch case    3:*/		return 0x8221D980;
		  /* 8221D980h */ case    4:  		/* stb R27, <#[R31 + 2704]> */
		/* 8221D980h case    4:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R31 + 0x00000A90) );
		/* 8221D980h case    4:*/		return 0x8221D984;
		  /* 8221D984h */ case    5:  		/* lwz R3, <#[R31 + 1456]> */
		/* 8221D984h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005B0) );
		/* 8221D984h case    5:*/		return 0x8221D988;
		  /* 8221D988h */ case    6:  		/* bl 127232 */
		/* 8221D988h case    6:*/		regs.LR = 0x8221D98C; return 0x8223CA88;
		/* 8221D988h case    6:*/		return 0x8221D98C;
		  /* 8221D98Ch */ case    7:  		/* stw R3, <#[R31 + 2692]> */
		/* 8221D98Ch case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000A84) );
		/* 8221D98Ch case    7:*/		return 0x8221D990;
		  /* 8221D990h */ case    8:  		/* lwz R3, <#[R31 + 1452]> */
		/* 8221D990h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005AC) );
		/* 8221D990h case    8:*/		return 0x8221D994;
		  /* 8221D994h */ case    9:  		/* bl 127220 */
		/* 8221D994h case    9:*/		regs.LR = 0x8221D998; return 0x8223CA88;
		/* 8221D994h case    9:*/		return 0x8221D998;
		  /* 8221D998h */ case   10:  		/* stw R3, <#[R31 + 2696]> */
		/* 8221D998h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000A88) );
		/* 8221D998h case   10:*/		return 0x8221D99C;
		  /* 8221D99Ch */ case   11:  		/* lwz R3, <#[R31 + 1448]> */
		/* 8221D99Ch case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005A8) );
		/* 8221D99Ch case   11:*/		return 0x8221D9A0;
		  /* 8221D9A0h */ case   12:  		/* bl 127208 */
		/* 8221D9A0h case   12:*/		regs.LR = 0x8221D9A4; return 0x8223CA88;
		/* 8221D9A0h case   12:*/		return 0x8221D9A4;
		  /* 8221D9A4h */ case   13:  		/* stw R3, <#[R31 + 2700]> */
		/* 8221D9A4h case   13:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000A8C) );
		/* 8221D9A4h case   13:*/		return 0x8221D9A8;
		  /* 8221D9A8h */ case   14:  		/* lwz R3, <#[R31 + 1456]> */
		/* 8221D9A8h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005B0) );
		/* 8221D9A8h case   14:*/		return 0x8221D9AC;
		  /* 8221D9ACh */ case   15:  		/* bl 127076 */
		/* 8221D9ACh case   15:*/		regs.LR = 0x8221D9B0; return 0x8223CA10;
		/* 8221D9ACh case   15:*/		return 0x8221D9B0;
		  /* 8221D9B0h */ case   16:  		/* lwz R11, <#[R30 + 2080]> */
		/* 8221D9B0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000820) );
		/* 8221D9B0h case   16:*/		return 0x8221D9B4;
		  /* 8221D9B4h */ case   17:  		/* mr R4, R24 */
		/* 8221D9B4h case   17:*/		regs.R4 = regs.R24;
		/* 8221D9B4h case   17:*/		return 0x8221D9B8;
	}
	return 0x8221D9B8;
} // Block from 8221D970h-8221D9B8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8221D9B8h
// Function '?RSLogWrapper@Compiler@XGRAPHICS@@SAXPAXPBDZZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221D9B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221D9B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221D9B8);
		  /* 8221D9B8h */ case    0:  		/* mr R3, R31 */
		/* 8221D9B8h case    0:*/		regs.R3 = regs.R31;
		/* 8221D9B8h case    0:*/		return 0x8221D9BC;
		  /* 8221D9BCh */ case    1:  		/* addi R5, R11, 1 */
		/* 8221D9BCh case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1);
		/* 8221D9BCh case    1:*/		return 0x8221D9C0;
		  /* 8221D9C0h */ case    2:  		/* bl -1536 */
		/* 8221D9C0h case    2:*/		regs.LR = 0x8221D9C4; return 0x8221D3C0;
		/* 8221D9C0h case    2:*/		return 0x8221D9C4;
		  /* 8221D9C4h */ case    3:  		/* mr R3, R30 */
		/* 8221D9C4h case    3:*/		regs.R3 = regs.R30;
		/* 8221D9C4h case    3:*/		return 0x8221D9C8;
		  /* 8221D9C8h */ case    4:  		/* lwz R10, <#[R30 + 2080]> */
		/* 8221D9C8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000820) );
		/* 8221D9C8h case    4:*/		return 0x8221D9CC;
		  /* 8221D9CCh */ case    5:  		/* rlwinm R11, R10, 1, 31, 31 */
		/* 8221D9CCh case    5:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R11,regs.R10);
		/* 8221D9CCh case    5:*/		return 0x8221D9D0;
		  /* 8221D9D0h */ case    6:  		/* addi R11, R11, -1 */
		/* 8221D9D0h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8221D9D0h case    6:*/		return 0x8221D9D4;
		  /* 8221D9D4h */ case    7:  		/* and R11, R11, R10 */
		/* 8221D9D4h case    7:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8221D9D4h case    7:*/		return 0x8221D9D8;
		  /* 8221D9D8h */ case    8:  		/* stw R11, <#[R29]> */
		/* 8221D9D8h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8221D9D8h case    8:*/		return 0x8221D9DC;
		  /* 8221D9DCh */ case    9:  		/* lwz R11, <#[R30 + 2084]> */
		/* 8221D9DCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000824) );
		/* 8221D9DCh case    9:*/		return 0x8221D9E0;
		  /* 8221D9E0h */ case   10:  		/* stw R11, <#[R29 + 80]> */
		/* 8221D9E0h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000050) );
		/* 8221D9E0h case   10:*/		return 0x8221D9E4;
		  /* 8221D9E4h */ case   11:  		/* bl 99172 */
		/* 8221D9E4h case   11:*/		regs.LR = 0x8221D9E8; return 0x82235D48;
		/* 8221D9E4h case   11:*/		return 0x8221D9E8;
		  /* 8221D9E8h */ case   12:  		/* lbz R11, <#[R31 + 2029]> */
		/* 8221D9E8h case   12:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x000007ED) );
		/* 8221D9E8h case   12:*/		return 0x8221D9EC;
		  /* 8221D9ECh */ case   13:  		/* rlwinm R10, R3, 0, 24, 31 */
		/* 8221D9ECh case   13:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R3);
		/* 8221D9ECh case   13:*/		return 0x8221D9F0;
		  /* 8221D9F0h */ case   14:  		/* mr R3, R30 */
		/* 8221D9F0h case   14:*/		regs.R3 = regs.R30;
		/* 8221D9F0h case   14:*/		return 0x8221D9F4;
		  /* 8221D9F4h */ case   15:  		/* or R11, R10, R11 */
		/* 8221D9F4h case   15:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8221D9F4h case   15:*/		return 0x8221D9F8;
		  /* 8221D9F8h */ case   16:  		/* stb R11, <#[R31 + 2029]> */
		/* 8221D9F8h case   16:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x000007ED) );
		/* 8221D9F8h case   16:*/		return 0x8221D9FC;
		  /* 8221D9FCh */ case   17:  		/* bl 99164 */
		/* 8221D9FCh case   17:*/		regs.LR = 0x8221DA00; return 0x82235D58;
		/* 8221D9FCh case   17:*/		return 0x8221DA00;
		  /* 8221DA00h */ case   18:  		/* lbz R11, <#[R31 + 2030]> */
		/* 8221DA00h case   18:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x000007EE) );
		/* 8221DA00h case   18:*/		return 0x8221DA04;
		  /* 8221DA04h */ case   19:  		/* rlwinm R10, R3, 0, 24, 31 */
		/* 8221DA04h case   19:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R3);
		/* 8221DA04h case   19:*/		return 0x8221DA08;
	}
	return 0x8221DA08;
} // Block from 8221D9B8h-8221DA08h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8221DA08h
// Function '?FlushRSLog@Compiler@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DA08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DA08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DA08);
		  /* 8221DA08h */ case    0:  		/* or R11, R10, R11 */
		/* 8221DA08h case    0:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8221DA08h case    0:*/		return 0x8221DA0C;
		  /* 8221DA0Ch */ case    1:  		/* stb R11, <#[R31 + 2030]> */
		/* 8221DA0Ch case    1:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x000007EE) );
		/* 8221DA0Ch case    1:*/		return 0x8221DA10;
		  /* 8221DA10h */ case    2:  		/* lwz R11, <#[R30 + 120]> */
		/* 8221DA10h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000078) );
		/* 8221DA10h case    2:*/		return 0x8221DA14;
		  /* 8221DA14h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8221DA14h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221DA14h case    3:*/		return 0x8221DA18;
		  /* 8221DA18h */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 8221DA18h case    4:*/		if ( regs.CR[6].eq ) { return 0x8221DA2C;  }
		/* 8221DA18h case    4:*/		return 0x8221DA1C;
		  /* 8221DA1Ch */ case    5:  		/* lbz R11, <#[R30 + 126]> */
		/* 8221DA1Ch case    5:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000007E) );
		/* 8221DA1Ch case    5:*/		return 0x8221DA20;
		  /* 8221DA20h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 8221DA20h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221DA20h case    6:*/		return 0x8221DA24;
		  /* 8221DA24h */ case    7:  		/* mr R11, R27 */
		/* 8221DA24h case    7:*/		regs.R11 = regs.R27;
		/* 8221DA24h case    7:*/		return 0x8221DA28;
		  /* 8221DA28h */ case    8:  		/* bc 4, CR0_EQ, 8 */
		/* 8221DA28h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8221DA30;  }
		/* 8221DA28h case    8:*/		return 0x8221DA2C;
	}
	return 0x8221DA2C;
} // Block from 8221DA08h-8221DA2Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8221DA2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DA2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DA2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DA2C);
		  /* 8221DA2Ch */ case    0:  		/* mr R11, R21 */
		/* 8221DA2Ch case    0:*/		regs.R11 = regs.R21;
		/* 8221DA2Ch case    0:*/		return 0x8221DA30;
	}
	return 0x8221DA30;
} // Block from 8221DA2Ch-8221DA30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221DA30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DA30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DA30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DA30);
		  /* 8221DA30h */ case    0:  		/* lbz R10, <#[R31 + 2025]> */
		/* 8221DA30h case    0:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007E9) );
		/* 8221DA30h case    0:*/		return 0x8221DA34;
		  /* 8221DA34h */ case    1:  		/* or R11, R10, R11 */
		/* 8221DA34h case    1:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8221DA34h case    1:*/		return 0x8221DA38;
		  /* 8221DA38h */ case    2:  		/* stb R11, <#[R31 + 2025]> */
		/* 8221DA38h case    2:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x000007E9) );
		/* 8221DA38h case    2:*/		return 0x8221DA3C;
		  /* 8221DA3Ch */ case    3:  		/* lwz R11, <#[R30 + 120]> */
		/* 8221DA3Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000078) );
		/* 8221DA3Ch case    3:*/		return 0x8221DA40;
		  /* 8221DA40h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8221DA40h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221DA40h case    4:*/		return 0x8221DA44;
		  /* 8221DA44h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 8221DA44h case    5:*/		if ( regs.CR[6].eq ) { return 0x8221DA58;  }
		/* 8221DA44h case    5:*/		return 0x8221DA48;
		  /* 8221DA48h */ case    6:  		/* lbz R11, <#[R30 + 125]> */
		/* 8221DA48h case    6:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000007D) );
		/* 8221DA48h case    6:*/		return 0x8221DA4C;
		  /* 8221DA4Ch */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 8221DA4Ch case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221DA4Ch case    7:*/		return 0x8221DA50;
		  /* 8221DA50h */ case    8:  		/* mr R11, R27 */
		/* 8221DA50h case    8:*/		regs.R11 = regs.R27;
		/* 8221DA50h case    8:*/		return 0x8221DA54;
		  /* 8221DA54h */ case    9:  		/* bc 4, CR0_EQ, 8 */
		/* 8221DA54h case    9:*/		if ( !regs.CR[0].eq ) { return 0x8221DA5C;  }
		/* 8221DA54h case    9:*/		return 0x8221DA58;
	}
	return 0x8221DA58;
} // Block from 8221DA30h-8221DA58h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8221DA58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DA58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DA58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DA58);
		  /* 8221DA58h */ case    0:  		/* mr R11, R21 */
		/* 8221DA58h case    0:*/		regs.R11 = regs.R21;
		/* 8221DA58h case    0:*/		return 0x8221DA5C;
	}
	return 0x8221DA5C;
} // Block from 8221DA58h-8221DA5Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221DA5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DA5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DA5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DA5C);
		  /* 8221DA5Ch */ case    0:  		/* lbz R10, <#[R31 + 2026]> */
		/* 8221DA5Ch case    0:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EA) );
		/* 8221DA5Ch case    0:*/		return 0x8221DA60;
		  /* 8221DA60h */ case    1:  		/* mr R3, R30 */
		/* 8221DA60h case    1:*/		regs.R3 = regs.R30;
		/* 8221DA60h case    1:*/		return 0x8221DA64;
		  /* 8221DA64h */ case    2:  		/* lbz R9, <#[R31 + 2024]> */
		/* 8221DA64h case    2:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R31 + 0x000007E8) );
		/* 8221DA64h case    2:*/		return 0x8221DA68;
		  /* 8221DA68h */ case    3:  		/* or R11, R10, R11 */
		/* 8221DA68h case    3:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8221DA68h case    3:*/		return 0x8221DA6C;
		  /* 8221DA6Ch */ case    4:  		/* lbz R10, <#[R31 + 2027]> */
		/* 8221DA6Ch case    4:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EB) );
		/* 8221DA6Ch case    4:*/		return 0x8221DA70;
		  /* 8221DA70h */ case    5:  		/* stb R11, <#[R31 + 2026]> */
		/* 8221DA70h case    5:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x000007EA) );
		/* 8221DA70h case    5:*/		return 0x8221DA74;
		  /* 8221DA74h */ case    6:  		/* lwz R11, <#[R30 + 112]> */
		/* 8221DA74h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000070) );
		/* 8221DA74h case    6:*/		return 0x8221DA78;
		  /* 8221DA78h */ case    7:  		/* addic R8, R11, -1 */
		/* 8221DA78h case    7:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R11,0xFFFFFFFF);
		/* 8221DA78h case    7:*/		return 0x8221DA7C;
		  /* 8221DA7Ch */ case    8:  		/* subfe R11, R8, R11 */
		/* 8221DA7Ch case    8:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 8221DA7Ch case    8:*/		return 0x8221DA80;
		  /* 8221DA80h */ case    9:  		/* or R11, R11, R9 */
		/* 8221DA80h case    9:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8221DA80h case    9:*/		return 0x8221DA84;
		  /* 8221DA84h */ case   10:  		/* stb R11, <#[R31 + 2024]> */
		/* 8221DA84h case   10:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x000007E8) );
		/* 8221DA84h case   10:*/		return 0x8221DA88;
		  /* 8221DA88h */ case   11:  		/* lbz R11, <#[R30 + 124]> */
		/* 8221DA88h case   11:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000007C) );
		/* 8221DA88h case   11:*/		return 0x8221DA8C;
		  /* 8221DA8Ch */ case   12:  		/* or R11, R11, R10 */
		/* 8221DA8Ch case   12:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8221DA8Ch case   12:*/		return 0x8221DA90;
	}
	return 0x8221DA90;
} // Block from 8221DA5Ch-8221DA90h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8221DA90h
// Function '?OpenCompilerOutputFile@Compiler@XGRAPHICS@@AAAXPBDPAD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DA90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DA90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DA90);
		  /* 8221DA90h */ case    0:  		/* stb R11, <#[R31 + 2027]> */
		/* 8221DA90h case    0:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x000007EB) );
		/* 8221DA90h case    0:*/		return 0x8221DA94;
		  /* 8221DA94h */ case    1:  		/* bl 98996 */
		/* 8221DA94h case    1:*/		regs.LR = 0x8221DA98; return 0x82235D48;
		/* 8221DA94h case    1:*/		return 0x8221DA98;
		  /* 8221DA98h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8221DA98h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8221DA98h case    2:*/		return 0x8221DA9C;
		  /* 8221DA9Ch */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 8221DA9Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x8221DAAC;  }
		/* 8221DA9Ch case    3:*/		return 0x8221DAA0;
		  /* 8221DAA0h */ case    4:  		/* mr R3, R30 */
		/* 8221DAA0h case    4:*/		regs.R3 = regs.R30;
		/* 8221DAA0h case    4:*/		return 0x8221DAA4;
		  /* 8221DAA4h */ case    5:  		/* bl 98988 */
		/* 8221DAA4h case    5:*/		regs.LR = 0x8221DAA8; return 0x82235D50;
		/* 8221DAA4h case    5:*/		return 0x8221DAA8;
		  /* 8221DAA8h */ case    6:  		/* stw R3, <#[R31 + 2032]> */
		/* 8221DAA8h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000007F0) );
		/* 8221DAA8h case    6:*/		return 0x8221DAAC;
	}
	return 0x8221DAAC;
} // Block from 8221DA90h-8221DAACh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221DAACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DAAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DAAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DAAC);
		  /* 8221DAACh */ case    0:  		/* lwz R11, <#[R30 + 2092]> */
		/* 8221DAACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000082C) );
		/* 8221DAACh case    0:*/		return 0x8221DAB0;
		  /* 8221DAB0h */ case    1:  		/* mr R3, R31 */
		/* 8221DAB0h case    1:*/		regs.R3 = regs.R31;
		/* 8221DAB0h case    1:*/		return 0x8221DAB4;
		  /* 8221DAB4h */ case    2:  		/* stw R11, <#[R29 + 240]> */
		/* 8221DAB4h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x000000F0) );
		/* 8221DAB4h case    2:*/		return 0x8221DAB8;
		  /* 8221DAB8h */ case    3:  		/* lwz R11, <#[R30 + 2096]> */
		/* 8221DAB8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000830) );
		/* 8221DAB8h case    3:*/		return 0x8221DABC;
		  /* 8221DABCh */ case    4:  		/* addi R11, R11, 1 */
		/* 8221DABCh case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8221DABCh case    4:*/		return 0x8221DAC0;
		  /* 8221DAC0h */ case    5:  		/* stw R11, <#[R29 + 160]> */
		/* 8221DAC0h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x000000A0) );
		/* 8221DAC0h case    5:*/		return 0x8221DAC4;
		  /* 8221DAC4h */ case    6:  		/* bl -1532 */
		/* 8221DAC4h case    6:*/		regs.LR = 0x8221DAC8; return 0x8221D4C8;
		/* 8221DAC4h case    6:*/		return 0x8221DAC8;
		  /* 8221DAC8h */ case    7:  		/* mr R3, R30 */
		/* 8221DAC8h case    7:*/		regs.R3 = regs.R30;
		/* 8221DAC8h case    7:*/		return 0x8221DACC;
		  /* 8221DACCh */ case    8:  		/* bl 114028 */
		/* 8221DACCh case    8:*/		regs.LR = 0x8221DAD0; return 0x82239838;
		/* 8221DACCh case    8:*/		return 0x8221DAD0;
		  /* 8221DAD0h */ case    9:  		/* addi R4, R30, -4 */
		/* 8221DAD0h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R30,0xFFFFFFFC);
		/* 8221DAD0h case    9:*/		return 0x8221DAD4;
		  /* 8221DAD4h */ case   10:  		/* lwz R3, <#[R30 - 4]> */
		/* 8221DAD4h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0xFFFFFFFC) );
		/* 8221DAD4h case   10:*/		return 0x8221DAD8;
		  /* 8221DAD8h */ case   11:  		/* bl -5272 */
		/* 8221DAD8h case   11:*/		regs.LR = 0x8221DADC; return 0x8221C640;
		/* 8221DAD8h case   11:*/		return 0x8221DADC;
		  /* 8221DADCh */ case   12:  		/* lwz R3, <#[R31 + 1452]> */
		/* 8221DADCh case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005AC) );
		/* 8221DADCh case   12:*/		return 0x8221DAE0;
		  /* 8221DAE0h */ case   13:  		/* bl 126768 */
		/* 8221DAE0h case   13:*/		regs.LR = 0x8221DAE4; return 0x8223CA10;
		/* 8221DAE0h case   13:*/		return 0x8221DAE4;
		  /* 8221DAE4h */ case   14:  		/* lwz R3, <#[R31 + 1456]> */
		/* 8221DAE4h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005B0) );
		/* 8221DAE4h case   14:*/		return 0x8221DAE8;
		  /* 8221DAE8h */ case   15:  		/* bl 126760 */
		/* 8221DAE8h case   15:*/		regs.LR = 0x8221DAEC; return 0x8223CA10;
		/* 8221DAE8h case   15:*/		return 0x8221DAEC;
		  /* 8221DAECh */ case   16:  		/* addic. R26, R26, -1 */
		/* 8221DAECh case   16:*/		cpu::op::addic<1>(regs,&regs.R26,regs.R26,0xFFFFFFFF);
		/* 8221DAECh case   16:*/		return 0x8221DAF0;
		  /* 8221DAF0h */ case   17:  		/* addi R29, R29, -4 */
		/* 8221DAF0h case   17:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFFFC);
		/* 8221DAF0h case   17:*/		return 0x8221DAF4;
		  /* 8221DAF4h */ case   18:  		/* bc 4, CR0_LT, -1088 */
		/* 8221DAF4h case   18:*/		if ( !regs.CR[0].lt ) { return 0x8221D6B4;  }
		/* 8221DAF4h case   18:*/		return 0x8221DAF8;
	}
	return 0x8221DAF8;
} // Block from 8221DAACh-8221DAF8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8221DAF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DAF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DAF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DAF8);
		  /* 8221DAF8h */ case    0:  		/* addi R1, R1, 224 */
		/* 8221DAF8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 8221DAF8h case    0:*/		return 0x8221DAFC;
		  /* 8221DAFCh */ case    1:  		/* b -1624184 */
		/* 8221DAFCh case    1:*/		return 0x82091284;
		/* 8221DAFCh case    1:*/		return 0x8221DB00;
	}
	return 0x8221DB00;
} // Block from 8221DAF8h-8221DB00h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221DB00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DB00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DB00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DB00);
		  /* 8221DB00h */ case    0:  		/* mfspr R12, LR */
		/* 8221DB00h case    0:*/		regs.R12 = regs.LR;
		/* 8221DB00h case    0:*/		return 0x8221DB04;
		  /* 8221DB04h */ case    1:  		/* bl -1624232 */
		/* 8221DB04h case    1:*/		regs.LR = 0x8221DB08; return 0x8209125C;
		/* 8221DB04h case    1:*/		return 0x8221DB08;
		  /* 8221DB08h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8221DB08h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8221DB08h case    2:*/		return 0x8221DB0C;
		  /* 8221DB0Ch */ case    3:  		/* lwz R29, <#[R4 + 1448]> */
		/* 8221DB0Ch case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R4 + 0x000005A8) );
		/* 8221DB0Ch case    3:*/		return 0x8221DB10;
		  /* 8221DB10h */ case    4:  		/* mr R30, R3 */
		/* 8221DB10h case    4:*/		regs.R30 = regs.R3;
		/* 8221DB10h case    4:*/		return 0x8221DB14;
		  /* 8221DB14h */ case    5:  		/* mr R31, R4 */
		/* 8221DB14h case    5:*/		regs.R31 = regs.R4;
		/* 8221DB14h case    5:*/		return 0x8221DB18;
	}
	return 0x8221DB18;
} // Block from 8221DB00h-8221DB18h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221DB18h
// Function '?RelOutput@Compiler@XGRAPHICS@@QAAXPBDZZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DB18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DB18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DB18);
		  /* 8221DB18h */ case    0:  		/* li R4, 24 */
		/* 8221DB18h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x18);
		/* 8221DB18h case    0:*/		return 0x8221DB1C;
		  /* 8221DB1Ch */ case    1:  		/* mr R3, R29 */
		/* 8221DB1Ch case    1:*/		regs.R3 = regs.R29;
		/* 8221DB1Ch case    1:*/		return 0x8221DB20;
		  /* 8221DB20h */ case    2:  		/* bl -5736 */
		/* 8221DB20h case    2:*/		regs.LR = 0x8221DB24; return 0x8221C4B8;
		/* 8221DB20h case    2:*/		return 0x8221DB24;
		  /* 8221DB24h */ case    3:  		/* addic. R11, R3, 4 */
		/* 8221DB24h case    3:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R3,0x4);
		/* 8221DB24h case    3:*/		return 0x8221DB28;
		  /* 8221DB28h */ case    4:  		/* stw R29, <#[R3]> */
		/* 8221DB28h case    4:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000000) );
		/* 8221DB28h case    4:*/		return 0x8221DB2C;
		  /* 8221DB2Ch */ case    5:  		/* bc 12, CR0_EQ, 32 */
		/* 8221DB2Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x8221DB4C;  }
		/* 8221DB2Ch case    5:*/		return 0x8221DB30;
		  /* 8221DB30h */ case    6:  		/* lis R10, -32252 */
		/* 8221DB30h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221DB30h case    6:*/		return 0x8221DB34;
		  /* 8221DB34h */ case    7:  		/* stw R30, <#[R11 + 4]> */
		/* 8221DB34h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 8221DB34h case    7:*/		return 0x8221DB38;
		  /* 8221DB38h */ case    8:  		/* mr R3, R11 */
		/* 8221DB38h case    8:*/		regs.R3 = regs.R11;
		/* 8221DB38h case    8:*/		return 0x8221DB3C;
		  /* 8221DB3Ch */ case    9:  		/* stw R31, <#[R11 + 16]> */
		/* 8221DB3Ch case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 8221DB3Ch case    9:*/		return 0x8221DB40;
		  /* 8221DB40h */ case   10:  		/* addi R10, R10, -2816 */
		/* 8221DB40h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFF500);
		/* 8221DB40h case   10:*/		return 0x8221DB44;
		  /* 8221DB44h */ case   11:  		/* stw R10, <#[R11]> */
		/* 8221DB44h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221DB44h case   11:*/		return 0x8221DB48;
		  /* 8221DB48h */ case   12:  		/* b 8 */
		/* 8221DB48h case   12:*/		return 0x8221DB50;
		/* 8221DB48h case   12:*/		return 0x8221DB4C;
	}
	return 0x8221DB4C;
} // Block from 8221DB18h-8221DB4Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8221DB4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DB4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DB4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DB4C);
		  /* 8221DB4Ch */ case    0:  		/* li R3, 0 */
		/* 8221DB4Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221DB4Ch case    0:*/		return 0x8221DB50;
	}
	return 0x8221DB50;
} // Block from 8221DB4Ch-8221DB50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221DB50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DB50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DB50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DB50);
		  /* 8221DB50h */ case    0:  		/* addi R1, R1, 112 */
		/* 8221DB50h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8221DB50h case    0:*/		return 0x8221DB54;
		  /* 8221DB54h */ case    1:  		/* b -1624232 */
		/* 8221DB54h case    1:*/		return 0x820912AC;
		/* 8221DB54h case    1:*/		return 0x8221DB58;
	}
	return 0x8221DB58;
} // Block from 8221DB50h-8221DB58h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221DB58h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DB58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DB58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DB58);
		  /* 8221DB58h */ case    0:  		/* mfspr R12, LR */
		/* 8221DB58h case    0:*/		regs.R12 = regs.LR;
		/* 8221DB58h case    0:*/		return 0x8221DB5C;
		  /* 8221DB5Ch */ case    1:  		/* bl -1624348 */
		/* 8221DB5Ch case    1:*/		regs.LR = 0x8221DB60; return 0x82091240;
		/* 8221DB5Ch case    1:*/		return 0x8221DB60;
		  /* 8221DB60h */ case    2:  		/* ld R12, <#[R1 - 4096]> */
		/* 8221DB60h case    2:*/		cpu::mem::load64( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFF000) );
		/* 8221DB60h case    2:*/		return 0x8221DB64;
		  /* 8221DB64h */ case    3:  		/* ld R12, <#[R1 - 8192]> */
		/* 8221DB64h case    3:*/		cpu::mem::load64( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFE000) );
		/* 8221DB64h case    3:*/		return 0x8221DB68;
		  /* 8221DB68h */ case    4:  		/* ld R12, <#[R1 - 12288]> */
		/* 8221DB68h case    4:*/		cpu::mem::load64( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFD000) );
		/* 8221DB68h case    4:*/		return 0x8221DB6C;
		  /* 8221DB6Ch */ case    5:  		/* ld R12, <#[R1 - 16384]> */
		/* 8221DB6Ch case    5:*/		cpu::mem::load64( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFC000) );
		/* 8221DB6Ch case    5:*/		return 0x8221DB70;
		  /* 8221DB70h */ case    6:  		/* stwu R1, <#[R1 - 16672]> */
		/* 8221DB70h case    6:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFBEE0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFBEE0);
		/* 8221DB70h case    6:*/		return 0x8221DB74;
		  /* 8221DB74h */ case    7:  		/* mr R31, R3 */
		/* 8221DB74h case    7:*/		regs.R31 = regs.R3;
		/* 8221DB74h case    7:*/		return 0x8221DB78;
	}
	return 0x8221DB78;
} // Block from 8221DB58h-8221DB78h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8221DB78h
// Function '?InitContextPerApp@Compiler@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DB78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DB78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DB78);
		  /* 8221DB78h */ case    0:  		/* stw R3, <#[R1 + 16692]> */
		/* 8221DB78h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00004134) );
		/* 8221DB78h case    0:*/		return 0x8221DB7C;
		  /* 8221DB7Ch */ case    1:  		/* mr R30, R4 */
		/* 8221DB7Ch case    1:*/		regs.R30 = regs.R4;
		/* 8221DB7Ch case    1:*/		return 0x8221DB80;
		  /* 8221DB80h */ case    2:  		/* stw R4, <#[R1 + 16700]> */
		/* 8221DB80h case    2:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000413C) );
		/* 8221DB80h case    2:*/		return 0x8221DB84;
		  /* 8221DB84h */ case    3:  		/* stw R6, <#[R1 + 16716]> */
		/* 8221DB84h case    3:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x0000414C) );
		/* 8221DB84h case    3:*/		return 0x8221DB88;
		  /* 8221DB88h */ case    4:  		/* mr R29, R5 */
		/* 8221DB88h case    4:*/		regs.R29 = regs.R5;
		/* 8221DB88h case    4:*/		return 0x8221DB8C;
		  /* 8221DB8Ch */ case    5:  		/* stw R5, <#[R1 + 16708]> */
		/* 8221DB8Ch case    5:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00004144) );
		/* 8221DB8Ch case    5:*/		return 0x8221DB90;
		  /* 8221DB90h */ case    6:  		/* mr R28, R8 */
		/* 8221DB90h case    6:*/		regs.R28 = regs.R8;
		/* 8221DB90h case    6:*/		return 0x8221DB94;
		  /* 8221DB94h */ case    7:  		/* stw R7, <#[R1 + 16724]> */
		/* 8221DB94h case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00004154) );
		/* 8221DB94h case    7:*/		return 0x8221DB98;
		  /* 8221DB98h */ case    8:  		/* stw R3, <#[R1 + 128]> */
		/* 8221DB98h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000080) );
		/* 8221DB98h case    8:*/		return 0x8221DB9C;
		  /* 8221DB9Ch */ case    9:  		/* bl -2628 */
		/* 8221DB9Ch case    9:*/		regs.LR = 0x8221DBA0; return 0x8221D158;
		/* 8221DB9Ch case    9:*/		return 0x8221DBA0;
		  /* 8221DBA0h */ case   10:  		/* mr R3, R31 */
		/* 8221DBA0h case   10:*/		regs.R3 = regs.R31;
		/* 8221DBA0h case   10:*/		return 0x8221DBA4;
		  /* 8221DBA4h */ case   11:  		/* bl -2460 */
		/* 8221DBA4h case   11:*/		regs.LR = 0x8221DBA8; return 0x8221D208;
		/* 8221DBA4h case   11:*/		return 0x8221DBA8;
		  /* 8221DBA8h */ case   12:  		/* stw R28, <#[R31 + 1536]> */
		/* 8221DBA8h case   12:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000600) );
		/* 8221DBA8h case   12:*/		return 0x8221DBAC;
		  /* 8221DBACh */ case   13:  		/* mr R5, R31 */
		/* 8221DBACh case   13:*/		regs.R5 = regs.R31;
		/* 8221DBACh case   13:*/		return 0x8221DBB0;
		  /* 8221DBB0h */ case   14:  		/* mr R4, R29 */
		/* 8221DBB0h case   14:*/		regs.R4 = regs.R29;
		/* 8221DBB0h case   14:*/		return 0x8221DBB4;
		  /* 8221DBB4h */ case   15:  		/* mr R3, R30 */
		/* 8221DBB4h case   15:*/		regs.R3 = regs.R30;
		/* 8221DBB4h case   15:*/		return 0x8221DBB8;
		  /* 8221DBB8h */ case   16:  		/* bl -2360 */
		/* 8221DBB8h case   16:*/		regs.LR = 0x8221DBBC; return 0x8221D280;
		/* 8221DBB8h case   16:*/		return 0x8221DBBC;
		  /* 8221DBBCh */ case   17:  		/* stw R3, <#[R31 + 1488]> */
		/* 8221DBBCh case   17:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000005D0) );
		/* 8221DBBCh case   17:*/		return 0x8221DBC0;
		  /* 8221DBC0h */ case   18:  		/* addi R3, R31, 16 */
		/* 8221DBC0h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x10);
		/* 8221DBC0h case   18:*/		return 0x8221DBC4;
		  /* 8221DBC4h */ case   19:  		/* bl 308748 */
		/* 8221DBC4h case   19:*/		regs.LR = 0x8221DBC8; return 0x822691D0;
		/* 8221DBC4h case   19:*/		return 0x8221DBC8;
		  /* 8221DBC8h */ case   20:  		/* lwz R31, <#[R1 + 16692]> */
		/* 8221DBC8h case   20:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00004134) );
		/* 8221DBC8h case   20:*/		return 0x8221DBCC;
		  /* 8221DBCCh */ case   21:  		/* lwz R26, <#[R1 + 16708]> */
		/* 8221DBCCh case   21:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00004144) );
		/* 8221DBCCh case   21:*/		return 0x8221DBD0;
		  /* 8221DBD0h */ case   22:  		/* li R25, 0 */
		/* 8221DBD0h case   22:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 8221DBD0h case   22:*/		return 0x8221DBD4;
		  /* 8221DBD4h */ case   23:  		/* lwz R27, <#[R1 + 16700]> */
		/* 8221DBD4h case   23:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x0000413C) );
		/* 8221DBD4h case   23:*/		return 0x8221DBD8;
		  /* 8221DBD8h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 8221DBD8h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8221DBD8h case   24:*/		return 0x8221DBDC;
		  /* 8221DBDCh */ case   25:  		/* lwz R24, <#[R1 + 128]> */
		/* 8221DBDCh case   25:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000080) );
		/* 8221DBDCh case   25:*/		return 0x8221DBE0;
		  /* 8221DBE0h */ case   26:  		/* bc 4, CR0_EQ, 452 */
		/* 8221DBE0h case   26:*/		if ( !regs.CR[0].eq ) { return 0x8221DDA4;  }
		/* 8221DBE0h case   26:*/		return 0x8221DBE4;
		  /* 8221DBE4h */ case   27:  		/* li R4, 8 */
		/* 8221DBE4h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 8221DBE4h case   27:*/		return 0x8221DBE8;
		  /* 8221DBE8h */ case   28:  		/* lwz R3, <#[R24 + 1384]> */
		/* 8221DBE8h case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R24 + 0x00000568) );
		/* 8221DBE8h case   28:*/		return 0x8221DBEC;
		  /* 8221DBECh */ case   29:  		/* bl -80484 */
		/* 8221DBECh case   29:*/		regs.LR = 0x8221DBF0; return 0x8220A188;
		/* 8221DBECh case   29:*/		return 0x8221DBF0;
		  /* 8221DBF0h */ case   30:  		/* cmplwi CR0, R3, 0 */
		/* 8221DBF0h case   30:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8221DBF0h case   30:*/		return 0x8221DBF4;
		  /* 8221DBF4h */ case   31:  		/* mr R3, R31 */
		/* 8221DBF4h case   31:*/		regs.R3 = regs.R31;
		/* 8221DBF4h case   31:*/		return 0x8221DBF8;
		  /* 8221DBF8h */ case   32:  		/* bc 12, CR0_EQ, 16 */
		/* 8221DBF8h case   32:*/		if ( regs.CR[0].eq ) { return 0x8221DC08;  }
		/* 8221DBF8h case   32:*/		return 0x8221DBFC;
		  /* 8221DBFCh */ case   33:  		/* lis R11, -32252 */
		/* 8221DBFCh case   33:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221DBFCh case   33:*/		return 0x8221DC00;
		  /* 8221DC00h */ case   34:  		/* addi R4, R11, -2396 */
		/* 8221DC00h case   34:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFF6A4);
		/* 8221DC00h case   34:*/		return 0x8221DC04;
		  /* 8221DC04h */ case   35:  		/* b 12 */
		/* 8221DC04h case   35:*/		return 0x8221DC10;
		/* 8221DC04h case   35:*/		return 0x8221DC08;
	}
	return 0x8221DC08;
} // Block from 8221DB78h-8221DC08h (36 instructions)

//////////////////////////////////////////////////////
// Block at 8221DC08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DC08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DC08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DC08);
		  /* 8221DC08h */ case    0:  		/* lis R11, -32252 */
		/* 8221DC08h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221DC08h case    0:*/		return 0x8221DC0C;
		  /* 8221DC0Ch */ case    1:  		/* addi R4, R11, -2444 */
		/* 8221DC0Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFF674);
		/* 8221DC0Ch case    1:*/		return 0x8221DC10;
	}
	return 0x8221DC10;
} // Block from 8221DC08h-8221DC10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221DC10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DC10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DC10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DC10);
		  /* 8221DC10h */ case    0:  		/* bl -2128 */
		/* 8221DC10h case    0:*/		regs.LR = 0x8221DC14; return 0x8221D3C0;
		/* 8221DC10h case    0:*/		return 0x8221DC14;
		  /* 8221DC14h */ case    1:  		/* lwz R3, <#[R1 + 16716]> */
		/* 8221DC14h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000414C) );
		/* 8221DC14h case    1:*/		return 0x8221DC18;
		  /* 8221DC18h */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 8221DC18h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8221DC18h case    2:*/		return 0x8221DC1C;
		  /* 8221DC1Ch */ case    3:  		/* bc 12, CR6_EQ, 1268 */
		/* 8221DC1Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8221E110;  }
		/* 8221DC1Ch case    3:*/		return 0x8221DC20;
		  /* 8221DC20h */ case    4:  		/* lwz R4, <#[R1 + 16724]> */
		/* 8221DC20h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00004154) );
		/* 8221DC20h case    4:*/		return 0x8221DC24;
		  /* 8221DC24h */ case    5:  		/* cmplwi CR6, R4, 0 */
		/* 8221DC24h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8221DC24h case    5:*/		return 0x8221DC28;
	}
	return 0x8221DC28;
} // Block from 8221DC10h-8221DC28h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221DC28h
// Function '?InitContextPerShader@Compiler@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DC28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DC28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DC28);
		  /* 8221DC28h */ case    0:  		/* bc 12, CR6_EQ, 1256 */
		/* 8221DC28h case    0:*/		if ( regs.CR[6].eq ) { return 0x8221E110;  }
		/* 8221DC28h case    0:*/		return 0x8221DC2C;
		  /* 8221DC2Ch */ case    1:  		/* mr R5, R24 */
		/* 8221DC2Ch case    1:*/		regs.R5 = regs.R24;
		/* 8221DC2Ch case    1:*/		return 0x8221DC30;
		  /* 8221DC30h */ case    2:  		/* bl 126896 */
		/* 8221DC30h case    2:*/		regs.LR = 0x8221DC34; return 0x8223CBE0;
		/* 8221DC30h case    2:*/		return 0x8221DC34;
		  /* 8221DC34h */ case    3:  		/* mr R30, R3 */
		/* 8221DC34h case    3:*/		regs.R30 = regs.R3;
		/* 8221DC34h case    3:*/		return 0x8221DC38;
		  /* 8221DC38h */ case    4:  		/* mr R3, R31 */
		/* 8221DC38h case    4:*/		regs.R3 = regs.R31;
		/* 8221DC38h case    4:*/		return 0x8221DC3C;
		  /* 8221DC3Ch */ case    5:  		/* mr R4, R30 */
		/* 8221DC3Ch case    5:*/		regs.R4 = regs.R30;
		/* 8221DC3Ch case    5:*/		return 0x8221DC40;
		  /* 8221DC40h */ case    6:  		/* bl -1800 */
		/* 8221DC40h case    6:*/		regs.LR = 0x8221DC44; return 0x8221D538;
		/* 8221DC40h case    6:*/		return 0x8221DC44;
		  /* 8221DC44h */ case    7:  		/* cmplwi CR6, R30, 0 */
		/* 8221DC44h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8221DC44h case    7:*/		return 0x8221DC48;
		  /* 8221DC48h */ case    8:  		/* bc 12, CR6_EQ, 24 */
		/* 8221DC48h case    8:*/		if ( regs.CR[6].eq ) { return 0x8221DC60;  }
		/* 8221DC48h case    8:*/		return 0x8221DC4C;
		  /* 8221DC4Ch */ case    9:  		/* mr R3, R30 */
		/* 8221DC4Ch case    9:*/		regs.R3 = regs.R30;
		/* 8221DC4Ch case    9:*/		return 0x8221DC50;
		  /* 8221DC50h */ case   10:  		/* bl 126704 */
		/* 8221DC50h case   10:*/		regs.LR = 0x8221DC54; return 0x8223CB40;
		/* 8221DC50h case   10:*/		return 0x8221DC54;
		  /* 8221DC54h */ case   11:  		/* addi R4, R30, -4 */
		/* 8221DC54h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R30,0xFFFFFFFC);
		/* 8221DC54h case   11:*/		return 0x8221DC58;
		  /* 8221DC58h */ case   12:  		/* lwz R3, <#[R30 - 4]> */
		/* 8221DC58h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0xFFFFFFFC) );
		/* 8221DC58h case   12:*/		return 0x8221DC5C;
		  /* 8221DC5Ch */ case   13:  		/* bl -5660 */
		/* 8221DC5Ch case   13:*/		regs.LR = 0x8221DC60; return 0x8221C640;
		/* 8221DC5Ch case   13:*/		return 0x8221DC60;
	}
	return 0x8221DC60;
} // Block from 8221DC28h-8221DC60h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8221DC60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DC60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DC60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DC60);
		  /* 8221DC60h */ case    0:  		/* mr R3, R27 */
		/* 8221DC60h case    0:*/		regs.R3 = regs.R27;
		/* 8221DC60h case    0:*/		return 0x8221DC64;
		  /* 8221DC64h */ case    1:  		/* lwz R5, <#[R31 + 1620]> */
		/* 8221DC64h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000654) );
		/* 8221DC64h case    1:*/		return 0x8221DC68;
		  /* 8221DC68h */ case    2:  		/* lwz R4, <#[R31 + 1540]> */
		/* 8221DC68h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000604) );
		/* 8221DC68h case    2:*/		return 0x8221DC6C;
		  /* 8221DC6Ch */ case    3:  		/* bl -787884 */
		/* 8221DC6Ch case    3:*/		regs.LR = 0x8221DC70; return 0x8215D6C0;
		/* 8221DC6Ch case    3:*/		return 0x8221DC70;
		  /* 8221DC70h */ case    4:  		/* lis R11, -32253 */
		/* 8221DC70h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8221DC70h case    4:*/		return 0x8221DC74;
		  /* 8221DC74h */ case    5:  		/* lis R10, -32252 */
		/* 8221DC74h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221DC74h case    5:*/		return 0x8221DC78;
		  /* 8221DC78h */ case    6:  		/* lis R9, -32252 */
		/* 8221DC78h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 8221DC78h case    6:*/		return 0x8221DC7C;
		  /* 8221DC7Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 8221DC7Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8221DC7Ch case    7:*/		return 0x8221DC80;
		  /* 8221DC80h */ case    8:  		/* addi R30, R11, 27460 */
		/* 8221DC80h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8221DC80h case    8:*/		return 0x8221DC84;
		  /* 8221DC84h */ case    9:  		/* addi R29, R10, -8328 */
		/* 8221DC84h case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFDF78);
		/* 8221DC84h case    9:*/		return 0x8221DC88;
		  /* 8221DC88h */ case   10:  		/* addi R28, R9, -3104 */
		/* 8221DC88h case   10:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R9,0xFFFFF3E0);
		/* 8221DC88h case   10:*/		return 0x8221DC8C;
		  /* 8221DC8Ch */ case   11:  		/* bc 12, CR0_EQ, 28 */
		/* 8221DC8Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x8221DCA8;  }
		/* 8221DC8Ch case   11:*/		return 0x8221DC90;
		  /* 8221DC90h */ case   12:  		/* mr R6, R28 */
		/* 8221DC90h case   12:*/		regs.R6 = regs.R28;
		/* 8221DC90h case   12:*/		return 0x8221DC94;
		  /* 8221DC94h */ case   13:  		/* mr R5, R29 */
		/* 8221DC94h case   13:*/		regs.R5 = regs.R29;
		/* 8221DC94h case   13:*/		return 0x8221DC98;
		  /* 8221DC98h */ case   14:  		/* mr R4, R30 */
		/* 8221DC98h case   14:*/		regs.R4 = regs.R30;
		/* 8221DC98h case   14:*/		return 0x8221DC9C;
		  /* 8221DC9Ch */ case   15:  		/* li R7, 838 */
		/* 8221DC9Ch case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x346);
		/* 8221DC9Ch case   15:*/		return 0x8221DCA0;
	}
	return 0x8221DCA0;
} // Block from 8221DC60h-8221DCA0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8221DCA0h
// Function '?Make@SSMHandle@XGRAPHICS@@SAPAV12@PAU_CS_COMPILED_SHADER@2@0PAVCompiler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DCA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DCA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DCA0);
		  /* 8221DCA0h */ case    0:  		/* li R3, 0 */
		/* 8221DCA0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221DCA0h case    0:*/		return 0x8221DCA4;
		  /* 8221DCA4h */ case    1:  		/* bl -811164 */
		/* 8221DCA4h case    1:*/		regs.LR = 0x8221DCA8; return 0x82157C08;
		/* 8221DCA4h case    1:*/		return 0x8221DCA8;
	}
	return 0x8221DCA8;
} // Block from 8221DCA0h-8221DCA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221DCA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DCA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DCA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DCA8);
		  /* 8221DCA8h */ case    0:  		/* mr R3, R26 */
		/* 8221DCA8h case    0:*/		regs.R3 = regs.R26;
		/* 8221DCA8h case    0:*/		return 0x8221DCAC;
		  /* 8221DCACh */ case    1:  		/* lwz R5, <#[R31 + 1624]> */
		/* 8221DCACh case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000658) );
		/* 8221DCACh case    1:*/		return 0x8221DCB0;
		  /* 8221DCB0h */ case    2:  		/* lwz R4, <#[R31 + 1544]> */
		/* 8221DCB0h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000608) );
		/* 8221DCB0h case    2:*/		return 0x8221DCB4;
		  /* 8221DCB4h */ case    3:  		/* bl -787956 */
		/* 8221DCB4h case    3:*/		regs.LR = 0x8221DCB8; return 0x8215D6C0;
		/* 8221DCB4h case    3:*/		return 0x8221DCB8;
		  /* 8221DCB8h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 8221DCB8h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8221DCB8h case    4:*/		return 0x8221DCBC;
		  /* 8221DCBCh */ case    5:  		/* bc 12, CR0_EQ, 28 */
		/* 8221DCBCh case    5:*/		if ( regs.CR[0].eq ) { return 0x8221DCD8;  }
		/* 8221DCBCh case    5:*/		return 0x8221DCC0;
		  /* 8221DCC0h */ case    6:  		/* mr R6, R28 */
		/* 8221DCC0h case    6:*/		regs.R6 = regs.R28;
		/* 8221DCC0h case    6:*/		return 0x8221DCC4;
		  /* 8221DCC4h */ case    7:  		/* mr R5, R29 */
		/* 8221DCC4h case    7:*/		regs.R5 = regs.R29;
		/* 8221DCC4h case    7:*/		return 0x8221DCC8;
		  /* 8221DCC8h */ case    8:  		/* mr R4, R30 */
		/* 8221DCC8h case    8:*/		regs.R4 = regs.R30;
		/* 8221DCC8h case    8:*/		return 0x8221DCCC;
		  /* 8221DCCCh */ case    9:  		/* li R7, 842 */
		/* 8221DCCCh case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x34A);
		/* 8221DCCCh case    9:*/		return 0x8221DCD0;
		  /* 8221DCD0h */ case   10:  		/* li R3, 0 */
		/* 8221DCD0h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221DCD0h case   10:*/		return 0x8221DCD4;
		  /* 8221DCD4h */ case   11:  		/* bl -811212 */
		/* 8221DCD4h case   11:*/		regs.LR = 0x8221DCD8; return 0x82157C08;
		/* 8221DCD4h case   11:*/		return 0x8221DCD8;
	}
	return 0x8221DCD8;
} // Block from 8221DCA8h-8221DCD8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8221DCD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DCD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DCD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DCD8);
		  /* 8221DCD8h */ case    0:  		/* lwz R30, <#[R31 + 1540]> */
		/* 8221DCD8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000604) );
		/* 8221DCD8h case    0:*/		return 0x8221DCDC;
		  /* 8221DCDCh */ case    1:  		/* lis R11, -32252 */
		/* 8221DCDCh case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221DCDCh case    1:*/		return 0x8221DCE0;
		  /* 8221DCE0h */ case    2:  		/* lis R10, -32252 */
		/* 8221DCE0h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221DCE0h case    2:*/		return 0x8221DCE4;
		  /* 8221DCE4h */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 8221DCE4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8221DCE4h case    3:*/		return 0x8221DCE8;
		  /* 8221DCE8h */ case    4:  		/* addi R29, R11, -2964 */
		/* 8221DCE8h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFF46C);
		/* 8221DCE8h case    4:*/		return 0x8221DCEC;
		  /* 8221DCECh */ case    5:  		/* addi R28, R10, -2784 */
		/* 8221DCECh case    5:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFF520);
		/* 8221DCECh case    5:*/		return 0x8221DCF0;
		  /* 8221DCF0h */ case    6:  		/* bc 12, CR6_EQ, 84 */
		/* 8221DCF0h case    6:*/		if ( regs.CR[6].eq ) { return 0x8221DD44;  }
		/* 8221DCF0h case    6:*/		return 0x8221DCF4;
		  /* 8221DCF4h */ case    7:  		/* lbz R11, <#[R31 + 2129]> */
		/* 8221DCF4h case    7:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000851) );
		/* 8221DCF4h case    7:*/		return 0x8221DCF8;
		  /* 8221DCF8h */ case    8:  		/* stw R25, <#[R31 + 2036]> */
		/* 8221DCF8h case    8:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x000007F4) );
		/* 8221DCF8h case    8:*/		return 0x8221DCFC;
		  /* 8221DCFCh */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 8221DCFCh case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221DCFCh case    9:*/		return 0x8221DD00;
	}
	return 0x8221DD00;
} // Block from 8221DCD8h-8221DD00h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8221DD00h
// Function '?OutputVertexPatch@ShaderOutput@XGRAPHICS@@UAAXHHPAVCompiler@2@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DD00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DD00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DD00);
		  /* 8221DD00h */ case    0:  		/* bc 12, CR0_EQ, 68 */
		/* 8221DD00h case    0:*/		if ( regs.CR[0].eq ) { return 0x8221DD44;  }
		/* 8221DD00h case    0:*/		return 0x8221DD04;
		  /* 8221DD04h */ case    1:  		/* lis R11, -32252 */
		/* 8221DD04h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221DD04h case    1:*/		return 0x8221DD08;
		  /* 8221DD08h */ case    2:  		/* mr R3, R31 */
		/* 8221DD08h case    2:*/		regs.R3 = regs.R31;
		/* 8221DD08h case    2:*/		return 0x8221DD0C;
		  /* 8221DD0Ch */ case    3:  		/* addi R4, R11, -2464 */
		/* 8221DD0Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFF660);
		/* 8221DD0Ch case    3:*/		return 0x8221DD10;
		  /* 8221DD10h */ case    4:  		/* bl -2384 */
		/* 8221DD10h case    4:*/		regs.LR = 0x8221DD14; return 0x8221D3C0;
		/* 8221DD10h case    4:*/		return 0x8221DD14;
		  /* 8221DD14h */ case    5:  		/* li R5, 8192 */
		/* 8221DD14h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x2000);
		/* 8221DD14h case    5:*/		return 0x8221DD18;
		  /* 8221DD18h */ case    6:  		/* li R4, 0 */
		/* 8221DD18h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8221DD18h case    6:*/		return 0x8221DD1C;
		  /* 8221DD1Ch */ case    7:  		/* addi R3, R1, 160 */
		/* 8221DD1Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xA0);
		/* 8221DD1Ch case    7:*/		return 0x8221DD20;
		  /* 8221DD20h */ case    8:  		/* bl -1624544 */
		/* 8221DD20h case    8:*/		regs.LR = 0x8221DD24; return 0x82091340;
		/* 8221DD20h case    8:*/		return 0x8221DD24;
		  /* 8221DD24h */ case    9:  		/* stw R31, <#[R1 + 8352]> */
		/* 8221DD24h case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x000020A0) );
		/* 8221DD24h case    9:*/		return 0x8221DD28;
		  /* 8221DD28h */ case   10:  		/* stw R28, <#[R1 + 144]> */
		/* 8221DD28h case   10:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000090) );
		/* 8221DD28h case   10:*/		return 0x8221DD2C;
		  /* 8221DD2Ch */ case   11:  		/* li R6, 0 */
		/* 8221DD2Ch case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8221DD2Ch case   11:*/		return 0x8221DD30;
		  /* 8221DD30h */ case   12:  		/* mr R5, R30 */
		/* 8221DD30h case   12:*/		regs.R5 = regs.R30;
		/* 8221DD30h case   12:*/		return 0x8221DD34;
		  /* 8221DD34h */ case   13:  		/* lwz R4, <#[R31 + 1620]> */
		/* 8221DD34h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000654) );
		/* 8221DD34h case   13:*/		return 0x8221DD38;
		  /* 8221DD38h */ case   14:  		/* addi R3, R1, 144 */
		/* 8221DD38h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 8221DD38h case   14:*/		return 0x8221DD3C;
		  /* 8221DD3Ch */ case   15:  		/* bl -801892 */
		/* 8221DD3Ch case   15:*/		regs.LR = 0x8221DD40; return 0x8215A0D8;
		/* 8221DD3Ch case   15:*/		return 0x8221DD40;
		  /* 8221DD40h */ case   16:  		/* stw R29, <#[R1 + 144]> */
		/* 8221DD40h case   16:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000090) );
		/* 8221DD40h case   16:*/		return 0x8221DD44;
	}
	return 0x8221DD44;
} // Block from 8221DD00h-8221DD44h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8221DD44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DD44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DD44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DD44);
		  /* 8221DD44h */ case    0:  		/* lwz R30, <#[R31 + 1544]> */
		/* 8221DD44h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000608) );
		/* 8221DD44h case    0:*/		return 0x8221DD48;
		  /* 8221DD48h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8221DD48h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8221DD48h case    1:*/		return 0x8221DD4C;
		  /* 8221DD4Ch */ case    2:  		/* bc 12, CR6_EQ, 88 */
		/* 8221DD4Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8221DDA4;  }
		/* 8221DD4Ch case    2:*/		return 0x8221DD50;
		  /* 8221DD50h */ case    3:  		/* lbz R11, <#[R31 + 2129]> */
		/* 8221DD50h case    3:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000851) );
		/* 8221DD50h case    3:*/		return 0x8221DD54;
		  /* 8221DD54h */ case    4:  		/* li R10, 1 */
		/* 8221DD54h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8221DD54h case    4:*/		return 0x8221DD58;
		  /* 8221DD58h */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 8221DD58h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221DD58h case    5:*/		return 0x8221DD5C;
		  /* 8221DD5Ch */ case    6:  		/* stw R10, <#[R31 + 2036]> */
		/* 8221DD5Ch case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x000007F4) );
		/* 8221DD5Ch case    6:*/		return 0x8221DD60;
		  /* 8221DD60h */ case    7:  		/* bc 12, CR0_EQ, 68 */
		/* 8221DD60h case    7:*/		if ( regs.CR[0].eq ) { return 0x8221DDA4;  }
		/* 8221DD60h case    7:*/		return 0x8221DD64;
		  /* 8221DD64h */ case    8:  		/* lis R11, -32252 */
		/* 8221DD64h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221DD64h case    8:*/		return 0x8221DD68;
		  /* 8221DD68h */ case    9:  		/* mr R3, R31 */
		/* 8221DD68h case    9:*/		regs.R3 = regs.R31;
		/* 8221DD68h case    9:*/		return 0x8221DD6C;
		  /* 8221DD6Ch */ case   10:  		/* addi R4, R11, -2484 */
		/* 8221DD6Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFF64C);
		/* 8221DD6Ch case   10:*/		return 0x8221DD70;
		  /* 8221DD70h */ case   11:  		/* bl -2480 */
		/* 8221DD70h case   11:*/		regs.LR = 0x8221DD74; return 0x8221D3C0;
		/* 8221DD70h case   11:*/		return 0x8221DD74;
		  /* 8221DD74h */ case   12:  		/* li R5, 8192 */
		/* 8221DD74h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x2000);
		/* 8221DD74h case   12:*/		return 0x8221DD78;
		  /* 8221DD78h */ case   13:  		/* li R4, 0 */
		/* 8221DD78h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8221DD78h case   13:*/		return 0x8221DD7C;
		  /* 8221DD7Ch */ case   14:  		/* addi R3, R1, 8384 */
		/* 8221DD7Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x20C0);
		/* 8221DD7Ch case   14:*/		return 0x8221DD80;
		  /* 8221DD80h */ case   15:  		/* bl -1624640 */
		/* 8221DD80h case   15:*/		regs.LR = 0x8221DD84; return 0x82091340;
		/* 8221DD80h case   15:*/		return 0x8221DD84;
		  /* 8221DD84h */ case   16:  		/* stw R31, <#[R1 + 16576]> */
		/* 8221DD84h case   16:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x000040C0) );
		/* 8221DD84h case   16:*/		return 0x8221DD88;
		  /* 8221DD88h */ case   17:  		/* stw R28, <#[R1 + 8368]> */
		/* 8221DD88h case   17:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x000020B0) );
		/* 8221DD88h case   17:*/		return 0x8221DD8C;
		  /* 8221DD8Ch */ case   18:  		/* li R6, 0 */
		/* 8221DD8Ch case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8221DD8Ch case   18:*/		return 0x8221DD90;
		  /* 8221DD90h */ case   19:  		/* mr R5, R30 */
		/* 8221DD90h case   19:*/		regs.R5 = regs.R30;
		/* 8221DD90h case   19:*/		return 0x8221DD94;
		  /* 8221DD94h */ case   20:  		/* lwz R4, <#[R31 + 1624]> */
		/* 8221DD94h case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000658) );
		/* 8221DD94h case   20:*/		return 0x8221DD98;
		  /* 8221DD98h */ case   21:  		/* addi R3, R1, 8368 */
		/* 8221DD98h case   21:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x20B0);
		/* 8221DD98h case   21:*/		return 0x8221DD9C;
		  /* 8221DD9Ch */ case   22:  		/* bl -801988 */
		/* 8221DD9Ch case   22:*/		regs.LR = 0x8221DDA0; return 0x8215A0D8;
		/* 8221DD9Ch case   22:*/		return 0x8221DDA0;
	}
	return 0x8221DDA0;
} // Block from 8221DD44h-8221DDA0h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8221DDA0h
// Function '?AdjustForPixelShader@Crayola@XGRAPHICS@@UAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DDA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DDA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DDA0);
		  /* 8221DDA0h */ case    0:  		/* stw R29, <#[R1 + 8368]> */
		/* 8221DDA0h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x000020B0) );
		/* 8221DDA0h case    0:*/		return 0x8221DDA4;
	}
	return 0x8221DDA4;
} // Block from 8221DDA0h-8221DDA4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221DDA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DDA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DDA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DDA4);
		  /* 8221DDA4h */ case    0:  		/* lwz R4, <#[R31 + 1620]> */
		/* 8221DDA4h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000654) );
		/* 8221DDA4h case    0:*/		return 0x8221DDA8;
		  /* 8221DDA8h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 8221DDA8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8221DDA8h case    1:*/		return 0x8221DDAC;
		  /* 8221DDACh */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 8221DDACh case    2:*/		if ( regs.CR[6].eq ) { return 0x8221DDC0;  }
		/* 8221DDACh case    2:*/		return 0x8221DDB0;
		  /* 8221DDB0h */ case    3:  		/* lwz R11, <#[R31 + 1436]> */
		/* 8221DDB0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000059C) );
		/* 8221DDB0h case    3:*/		return 0x8221DDB4;
		  /* 8221DDB4h */ case    4:  		/* lwz R3, <#[R31 + 1444]> */
		/* 8221DDB4h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005A4) );
		/* 8221DDB4h case    4:*/		return 0x8221DDB8;
		  /* 8221DDB8h */ case    5:  		/* mtspr CTR, R11 */
		/* 8221DDB8h case    5:*/		regs.CTR = regs.R11;
		/* 8221DDB8h case    5:*/		return 0x8221DDBC;
		  /* 8221DDBCh */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 8221DDBCh case    6:*/		if ( 1 ) { regs.LR = 0x8221DDC0; return (uint32)regs.CTR; }
		/* 8221DDBCh case    6:*/		return 0x8221DDC0;
	}
	return 0x8221DDC0;
} // Block from 8221DDA4h-8221DDC0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221DDC0h
// Function '?AdjustForVertexShader@Crayola@XGRAPHICS@@UAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DDC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DDC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DDC0);
		  /* 8221DDC0h */ case    0:  		/* stw R25, <#[R31 + 1540]> */
		/* 8221DDC0h case    0:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000604) );
		/* 8221DDC0h case    0:*/		return 0x8221DDC4;
		  /* 8221DDC4h */ case    1:  		/* stw R25, <#[R31 + 1620]> */
		/* 8221DDC4h case    1:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000654) );
		/* 8221DDC4h case    1:*/		return 0x8221DDC8;
		  /* 8221DDC8h */ case    2:  		/* lwz R4, <#[R31 + 1624]> */
		/* 8221DDC8h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000658) );
		/* 8221DDC8h case    2:*/		return 0x8221DDCC;
		  /* 8221DDCCh */ case    3:  		/* cmplwi CR6, R4, 0 */
		/* 8221DDCCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8221DDCCh case    3:*/		return 0x8221DDD0;
		  /* 8221DDD0h */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 8221DDD0h case    4:*/		if ( regs.CR[6].eq ) { return 0x8221DDE4;  }
		/* 8221DDD0h case    4:*/		return 0x8221DDD4;
		  /* 8221DDD4h */ case    5:  		/* lwz R11, <#[R31 + 1436]> */
		/* 8221DDD4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000059C) );
		/* 8221DDD4h case    5:*/		return 0x8221DDD8;
		  /* 8221DDD8h */ case    6:  		/* lwz R3, <#[R31 + 1444]> */
		/* 8221DDD8h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005A4) );
		/* 8221DDD8h case    6:*/		return 0x8221DDDC;
		  /* 8221DDDCh */ case    7:  		/* mtspr CTR, R11 */
		/* 8221DDDCh case    7:*/		regs.CTR = regs.R11;
		/* 8221DDDCh case    7:*/		return 0x8221DDE0;
	}
	return 0x8221DDE0;
} // Block from 8221DDC0h-8221DDE0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8221DDE0h
// Function '??0Compiler@XGRAPHICS@@QAA@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZPAU_SS_SHADER_STORE@1@PAU_SSM_REGISTRY@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DDE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DDE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DDE0);
		  /* 8221DDE0h */ case    0:  		/* bcctrl 20, CR0_LT */
		/* 8221DDE0h case    0:*/		if ( 1 ) { regs.LR = 0x8221DDE4; return (uint32)regs.CTR; }
		/* 8221DDE0h case    0:*/		return 0x8221DDE4;
	}
	return 0x8221DDE4;
} // Block from 8221DDE0h-8221DDE4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221DDE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DDE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DDE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DDE4);
		  /* 8221DDE4h */ case    0:  		/* stw R25, <#[R31 + 1624]> */
		/* 8221DDE4h case    0:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000658) );
		/* 8221DDE4h case    0:*/		return 0x8221DDE8;
		  /* 8221DDE8h */ case    1:  		/* stw R25, <#[R31 + 1544]> */
		/* 8221DDE8h case    1:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000608) );
		/* 8221DDE8h case    1:*/		return 0x8221DDEC;
		  /* 8221DDECh */ case    2:  		/* lwz R28, <#[R24 + 1364]> */
		/* 8221DDECh case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R24 + 0x00000554) );
		/* 8221DDECh case    2:*/		return 0x8221DDF0;
		  /* 8221DDF0h */ case    3:  		/* cmpwi CR6, R28, 0 */
		/* 8221DDF0h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 8221DDF0h case    3:*/		return 0x8221DDF4;
		  /* 8221DDF4h */ case    4:  		/* bc 4, CR6_EQ, 772 */
		/* 8221DDF4h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8221E0F8;  }
		/* 8221DDF4h case    4:*/		return 0x8221DDF8;
		  /* 8221DDF8h */ case    5:  		/* lbz R11, <#[R31 + 2025]> */
		/* 8221DDF8h case    5:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x000007E9) );
		/* 8221DDF8h case    5:*/		return 0x8221DDFC;
		  /* 8221DDFCh */ case    6:  		/* mr R29, R25 */
		/* 8221DDFCh case    6:*/		regs.R29 = regs.R25;
		/* 8221DDFCh case    6:*/		return 0x8221DE00;
		  /* 8221DE00h */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 8221DE00h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221DE00h case    7:*/		return 0x8221DE04;
		  /* 8221DE04h */ case    8:  		/* bc 12, CR0_EQ, 44 */
		/* 8221DE04h case    8:*/		if ( regs.CR[0].eq ) { return 0x8221DE30;  }
		/* 8221DE04h case    8:*/		return 0x8221DE08;
		  /* 8221DE08h */ case    9:  		/* lbz R10, <#[R31 + 2026]> */
		/* 8221DE08h case    9:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EA) );
		/* 8221DE08h case    9:*/		return 0x8221DE0C;
		  /* 8221DE0Ch */ case   10:  		/* cmplwi CR0, R10, 0 */
		/* 8221DE0Ch case   10:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221DE0Ch case   10:*/		return 0x8221DE10;
		  /* 8221DE10h */ case   11:  		/* bc 4, CR0_EQ, 32 */
		/* 8221DE10h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8221DE30;  }
		/* 8221DE10h case   11:*/		return 0x8221DE14;
		  /* 8221DE14h */ case   12:  		/* lbz R10, <#[R31 + 2027]> */
		/* 8221DE14h case   12:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EB) );
		/* 8221DE14h case   12:*/		return 0x8221DE18;
		  /* 8221DE18h */ case   13:  		/* cmplwi CR0, R10, 0 */
		/* 8221DE18h case   13:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221DE18h case   13:*/		return 0x8221DE1C;
		  /* 8221DE1Ch */ case   14:  		/* bc 4, CR0_EQ, 20 */
		/* 8221DE1Ch case   14:*/		if ( !regs.CR[0].eq ) { return 0x8221DE30;  }
		/* 8221DE1Ch case   14:*/		return 0x8221DE20;
		  /* 8221DE20h */ case   15:  		/* lbz R10, <#[R31 + 2028]> */
		/* 8221DE20h case   15:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EC) );
		/* 8221DE20h case   15:*/		return 0x8221DE24;
		  /* 8221DE24h */ case   16:  		/* cmplwi CR0, R10, 0 */
		/* 8221DE24h case   16:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221DE24h case   16:*/		return 0x8221DE28;
		  /* 8221DE28h */ case   17:  		/* bc 4, CR0_EQ, 8 */
		/* 8221DE28h case   17:*/		if ( !regs.CR[0].eq ) { return 0x8221DE30;  }
		/* 8221DE28h case   17:*/		return 0x8221DE2C;
		  /* 8221DE2Ch */ case   18:  		/* li R29, 2 */
		/* 8221DE2Ch case   18:*/		cpu::op::li<0>(regs,&regs.R29,0x2);
		/* 8221DE2Ch case   18:*/		return 0x8221DE30;
	}
	return 0x8221DE30;
} // Block from 8221DDE4h-8221DE30h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8221DE30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DE30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DE30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DE30);
		  /* 8221DE30h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8221DE30h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221DE30h case    0:*/		return 0x8221DE34;
		  /* 8221DE34h */ case    1:  		/* bc 4, CR6_EQ, 100 */
		/* 8221DE34h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8221DE98;  }
		/* 8221DE34h case    1:*/		return 0x8221DE38;
		  /* 8221DE38h */ case    2:  		/* lbz R10, <#[R31 + 2026]> */
		/* 8221DE38h case    2:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EA) );
		/* 8221DE38h case    2:*/		return 0x8221DE3C;
		  /* 8221DE3Ch */ case    3:  		/* cmplwi CR0, R10, 0 */
		/* 8221DE3Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221DE3Ch case    3:*/		return 0x8221DE40;
		  /* 8221DE40h */ case    4:  		/* bc 4, CR0_EQ, 32 */
		/* 8221DE40h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8221DE60;  }
		/* 8221DE40h case    4:*/		return 0x8221DE44;
		  /* 8221DE44h */ case    5:  		/* lbz R10, <#[R31 + 2027]> */
		/* 8221DE44h case    5:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EB) );
		/* 8221DE44h case    5:*/		return 0x8221DE48;
		  /* 8221DE48h */ case    6:  		/* cmplwi CR0, R10, 0 */
		/* 8221DE48h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221DE48h case    6:*/		return 0x8221DE4C;
		  /* 8221DE4Ch */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 8221DE4Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x8221DE60;  }
		/* 8221DE4Ch case    7:*/		return 0x8221DE50;
		  /* 8221DE50h */ case    8:  		/* lbz R10, <#[R31 + 2028]> */
		/* 8221DE50h case    8:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EC) );
		/* 8221DE50h case    8:*/		return 0x8221DE54;
		  /* 8221DE54h */ case    9:  		/* cmplwi CR0, R10, 0 */
		/* 8221DE54h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221DE54h case    9:*/		return 0x8221DE58;
		  /* 8221DE58h */ case   10:  		/* bc 4, CR0_EQ, 8 */
		/* 8221DE58h case   10:*/		if ( !regs.CR[0].eq ) { return 0x8221DE60;  }
		/* 8221DE58h case   10:*/		return 0x8221DE5C;
		  /* 8221DE5Ch */ case   11:  		/* li R29, 3 */
		/* 8221DE5Ch case   11:*/		cpu::op::li<0>(regs,&regs.R29,0x3);
		/* 8221DE5Ch case   11:*/		return 0x8221DE60;
	}
	return 0x8221DE60;
} // Block from 8221DE30h-8221DE60h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8221DE60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DE60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DE60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DE60);
		  /* 8221DE60h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8221DE60h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221DE60h case    0:*/		return 0x8221DE64;
		  /* 8221DE64h */ case    1:  		/* bc 4, CR6_EQ, 52 */
		/* 8221DE64h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8221DE98;  }
		/* 8221DE64h case    1:*/		return 0x8221DE68;
		  /* 8221DE68h */ case    2:  		/* lbz R10, <#[R31 + 2026]> */
		/* 8221DE68h case    2:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EA) );
		/* 8221DE68h case    2:*/		return 0x8221DE6C;
		  /* 8221DE6Ch */ case    3:  		/* cmplwi CR0, R10, 0 */
		/* 8221DE6Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221DE6Ch case    3:*/		return 0x8221DE70;
		  /* 8221DE70h */ case    4:  		/* bc 12, CR0_EQ, 32 */
		/* 8221DE70h case    4:*/		if ( regs.CR[0].eq ) { return 0x8221DE90;  }
		/* 8221DE70h case    4:*/		return 0x8221DE74;
		  /* 8221DE74h */ case    5:  		/* lbz R10, <#[R31 + 2027]> */
		/* 8221DE74h case    5:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EB) );
		/* 8221DE74h case    5:*/		return 0x8221DE78;
		  /* 8221DE78h */ case    6:  		/* cmplwi CR0, R10, 0 */
		/* 8221DE78h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221DE78h case    6:*/		return 0x8221DE7C;
		  /* 8221DE7Ch */ case    7:  		/* bc 4, CR0_EQ, 20 */
		/* 8221DE7Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x8221DE90;  }
		/* 8221DE7Ch case    7:*/		return 0x8221DE80;
		  /* 8221DE80h */ case    8:  		/* lbz R10, <#[R31 + 2028]> */
		/* 8221DE80h case    8:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EC) );
		/* 8221DE80h case    8:*/		return 0x8221DE84;
		  /* 8221DE84h */ case    9:  		/* cmplwi CR0, R10, 0 */
		/* 8221DE84h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221DE84h case    9:*/		return 0x8221DE88;
		  /* 8221DE88h */ case   10:  		/* bc 4, CR0_EQ, 8 */
		/* 8221DE88h case   10:*/		if ( !regs.CR[0].eq ) { return 0x8221DE90;  }
		/* 8221DE88h case   10:*/		return 0x8221DE8C;
		  /* 8221DE8Ch */ case   11:  		/* li R29, 4 */
		/* 8221DE8Ch case   11:*/		cpu::op::li<0>(regs,&regs.R29,0x4);
		/* 8221DE8Ch case   11:*/		return 0x8221DE90;
	}
	return 0x8221DE90;
} // Block from 8221DE60h-8221DE90h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8221DE90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DE90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DE90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DE90);
		  /* 8221DE90h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8221DE90h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221DE90h case    0:*/		return 0x8221DE94;
		  /* 8221DE94h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 8221DE94h case    1:*/		if ( regs.CR[6].eq ) { return 0x8221DEC8;  }
		/* 8221DE94h case    1:*/		return 0x8221DE98;
	}
	return 0x8221DE98;
} // Block from 8221DE90h-8221DE98h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221DE98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DE98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DE98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DE98);
		  /* 8221DE98h */ case    0:  		/* lbz R10, <#[R31 + 2026]> */
		/* 8221DE98h case    0:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EA) );
		/* 8221DE98h case    0:*/		return 0x8221DE9C;
		  /* 8221DE9Ch */ case    1:  		/* cmplwi CR0, R10, 0 */
		/* 8221DE9Ch case    1:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221DE9Ch case    1:*/		return 0x8221DEA0;
		  /* 8221DEA0h */ case    2:  		/* bc 12, CR0_EQ, 32 */
		/* 8221DEA0h case    2:*/		if ( regs.CR[0].eq ) { return 0x8221DEC0;  }
		/* 8221DEA0h case    2:*/		return 0x8221DEA4;
		  /* 8221DEA4h */ case    3:  		/* lbz R10, <#[R31 + 2027]> */
		/* 8221DEA4h case    3:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EB) );
		/* 8221DEA4h case    3:*/		return 0x8221DEA8;
		  /* 8221DEA8h */ case    4:  		/* cmplwi CR0, R10, 0 */
		/* 8221DEA8h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221DEA8h case    4:*/		return 0x8221DEAC;
		  /* 8221DEACh */ case    5:  		/* bc 4, CR0_EQ, 20 */
		/* 8221DEACh case    5:*/		if ( !regs.CR[0].eq ) { return 0x8221DEC0;  }
		/* 8221DEACh case    5:*/		return 0x8221DEB0;
		  /* 8221DEB0h */ case    6:  		/* lbz R10, <#[R31 + 2028]> */
		/* 8221DEB0h case    6:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EC) );
		/* 8221DEB0h case    6:*/		return 0x8221DEB4;
		  /* 8221DEB4h */ case    7:  		/* cmplwi CR0, R10, 0 */
		/* 8221DEB4h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221DEB4h case    7:*/		return 0x8221DEB8;
		  /* 8221DEB8h */ case    8:  		/* bc 4, CR0_EQ, 8 */
		/* 8221DEB8h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8221DEC0;  }
		/* 8221DEB8h case    8:*/		return 0x8221DEBC;
		  /* 8221DEBCh */ case    9:  		/* li R29, 5 */
		/* 8221DEBCh case    9:*/		cpu::op::li<0>(regs,&regs.R29,0x5);
		/* 8221DEBCh case    9:*/		return 0x8221DEC0;
	}
	return 0x8221DEC0;
} // Block from 8221DE98h-8221DEC0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8221DEC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DEC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DEC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DEC0);
		  /* 8221DEC0h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8221DEC0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221DEC0h case    0:*/		return 0x8221DEC4;
		  /* 8221DEC4h */ case    1:  		/* bc 4, CR6_EQ, 92 */
		/* 8221DEC4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8221DF20;  }
		/* 8221DEC4h case    1:*/		return 0x8221DEC8;
	}
	return 0x8221DEC8;
} // Block from 8221DEC0h-8221DEC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221DEC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DEC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DEC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DEC8);
		  /* 8221DEC8h */ case    0:  		/* lbz R10, <#[R31 + 2026]> */
		/* 8221DEC8h case    0:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EA) );
		/* 8221DEC8h case    0:*/		return 0x8221DECC;
		  /* 8221DECCh */ case    1:  		/* cmplwi CR0, R10, 0 */
		/* 8221DECCh case    1:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221DECCh case    1:*/		return 0x8221DED0;
		  /* 8221DED0h */ case    2:  		/* bc 12, CR0_EQ, 32 */
		/* 8221DED0h case    2:*/		if ( regs.CR[0].eq ) { return 0x8221DEF0;  }
		/* 8221DED0h case    2:*/		return 0x8221DED4;
		  /* 8221DED4h */ case    3:  		/* lbz R10, <#[R31 + 2027]> */
		/* 8221DED4h case    3:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EB) );
		/* 8221DED4h case    3:*/		return 0x8221DED8;
		  /* 8221DED8h */ case    4:  		/* cmplwi CR0, R10, 0 */
		/* 8221DED8h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221DED8h case    4:*/		return 0x8221DEDC;
		  /* 8221DEDCh */ case    5:  		/* bc 12, CR0_EQ, 20 */
		/* 8221DEDCh case    5:*/		if ( regs.CR[0].eq ) { return 0x8221DEF0;  }
		/* 8221DEDCh case    5:*/		return 0x8221DEE0;
	}
	return 0x8221DEE0;
} // Block from 8221DEC8h-8221DEE0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221DEE0h
// Function '?PerfDumpData@Compiler@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DEE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DEE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DEE0);
		  /* 8221DEE0h */ case    0:  		/* lbz R10, <#[R31 + 2028]> */
		/* 8221DEE0h case    0:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EC) );
		/* 8221DEE0h case    0:*/		return 0x8221DEE4;
		  /* 8221DEE4h */ case    1:  		/* cmplwi CR0, R10, 0 */
		/* 8221DEE4h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221DEE4h case    1:*/		return 0x8221DEE8;
		  /* 8221DEE8h */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 8221DEE8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8221DEF0;  }
		/* 8221DEE8h case    2:*/		return 0x8221DEEC;
		  /* 8221DEECh */ case    3:  		/* li R29, 6 */
		/* 8221DEECh case    3:*/		cpu::op::li<0>(regs,&regs.R29,0x6);
		/* 8221DEECh case    3:*/		return 0x8221DEF0;
	}
	return 0x8221DEF0;
} // Block from 8221DEE0h-8221DEF0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221DEF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DEF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DEF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DEF0);
		  /* 8221DEF0h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8221DEF0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221DEF0h case    0:*/		return 0x8221DEF4;
		  /* 8221DEF4h */ case    1:  		/* bc 4, CR6_EQ, 44 */
		/* 8221DEF4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8221DF20;  }
		/* 8221DEF4h case    1:*/		return 0x8221DEF8;
		  /* 8221DEF8h */ case    2:  		/* lbz R11, <#[R31 + 2026]> */
		/* 8221DEF8h case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x000007EA) );
		/* 8221DEF8h case    2:*/		return 0x8221DEFC;
		  /* 8221DEFCh */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 8221DEFCh case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221DEFCh case    3:*/		return 0x8221DF00;
		  /* 8221DF00h */ case    4:  		/* bc 4, CR0_EQ, 32 */
		/* 8221DF00h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8221DF20;  }
		/* 8221DF00h case    4:*/		return 0x8221DF04;
		  /* 8221DF04h */ case    5:  		/* lbz R11, <#[R31 + 2027]> */
		/* 8221DF04h case    5:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x000007EB) );
		/* 8221DF04h case    5:*/		return 0x8221DF08;
		  /* 8221DF08h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 8221DF08h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221DF08h case    6:*/		return 0x8221DF0C;
		  /* 8221DF0Ch */ case    7:  		/* bc 4, CR0_EQ, 20 */
		/* 8221DF0Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x8221DF20;  }
		/* 8221DF0Ch case    7:*/		return 0x8221DF10;
		  /* 8221DF10h */ case    8:  		/* lbz R11, <#[R31 + 2028]> */
		/* 8221DF10h case    8:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x000007EC) );
		/* 8221DF10h case    8:*/		return 0x8221DF14;
		  /* 8221DF14h */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 8221DF14h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221DF14h case    9:*/		return 0x8221DF18;
		  /* 8221DF18h */ case   10:  		/* bc 12, CR0_EQ, 8 */
		/* 8221DF18h case   10:*/		if ( regs.CR[0].eq ) { return 0x8221DF20;  }
		/* 8221DF18h case   10:*/		return 0x8221DF1C;
		  /* 8221DF1Ch */ case   11:  		/* li R29, 7 */
		/* 8221DF1Ch case   11:*/		cpu::op::li<0>(regs,&regs.R29,0x7);
		/* 8221DF1Ch case   11:*/		return 0x8221DF20;
	}
	return 0x8221DF20;
} // Block from 8221DEF0h-8221DF20h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8221DF20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DF20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DF20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DF20);
		  /* 8221DF20h */ case    0:  		/* lwz R11, <#[R31 + 1864]> */
		/* 8221DF20h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000748) );
		/* 8221DF20h case    0:*/		return 0x8221DF24;
		  /* 8221DF24h */ case    1:  		/* lbz R10, <#[R31 + 2024]> */
		/* 8221DF24h case    1:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007E8) );
		/* 8221DF24h case    1:*/		return 0x8221DF28;
		  /* 8221DF28h */ case    2:  		/* rlwinm R30, R11, 1, 0, 30 */
		/* 8221DF28h case    2:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R30,regs.R11);
		/* 8221DF28h case    2:*/		return 0x8221DF2C;
		  /* 8221DF2Ch */ case    3:  		/* cmplwi CR0, R10, 0 */
		/* 8221DF2Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221DF2Ch case    3:*/		return 0x8221DF30;
		  /* 8221DF30h */ case    4:  		/* bc 12, CR0_EQ, 8 */
		/* 8221DF30h case    4:*/		if ( regs.CR[0].eq ) { return 0x8221DF38;  }
		/* 8221DF30h case    4:*/		return 0x8221DF34;
		  /* 8221DF34h */ case    5:  		/* ori R30, R30, 1 */
		/* 8221DF34h case    5:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8221DF34h case    5:*/		return 0x8221DF38;
	}
	return 0x8221DF38;
} // Block from 8221DF20h-8221DF38h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221DF38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DF38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DF38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DF38);
		  /* 8221DF38h */ case    0:  		/* lwz R11, <#[R31 + 1780]> */
		/* 8221DF38h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000006F4) );
		/* 8221DF38h case    0:*/		return 0x8221DF3C;
		  /* 8221DF3Ch */ case    1:  		/* lwz R10, <#[R31 + 1784]> */
		/* 8221DF3Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000006F8) );
		/* 8221DF3Ch case    1:*/		return 0x8221DF40;
		  /* 8221DF40h */ case    2:  		/* cmpw CR6, R11, R10 */
		/* 8221DF40h case    2:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 8221DF40h case    2:*/		return 0x8221DF44;
		  /* 8221DF44h */ case    3:  		/* addi R11, R11, -1 */
		/* 8221DF44h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8221DF44h case    3:*/		return 0x8221DF48;
		  /* 8221DF48h */ case    4:  		/* bc 12, CR6_GT, 8 */
		/* 8221DF48h case    4:*/		if ( regs.CR[6].gt ) { return 0x8221DF50;  }
		/* 8221DF48h case    4:*/		return 0x8221DF4C;
		  /* 8221DF4Ch */ case    5:  		/* addi R11, R10, -1 */
		/* 8221DF4Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFFFFF);
		/* 8221DF4Ch case    5:*/		return 0x8221DF50;
	}
	return 0x8221DF50;
} // Block from 8221DF38h-8221DF50h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221DF50h
// Function '?Compile@Compiler@XGRAPHICS@@AAAXPAVILProgram@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221DF50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221DF50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221DF50);
		  /* 8221DF50h */ case    0:  		/* rlwinm R10, R11, 1, 31, 31 */
		/* 8221DF50h case    0:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R10,regs.R11);
		/* 8221DF50h case    0:*/		return 0x8221DF54;
		  /* 8221DF54h */ case    1:  		/* lwz R25, <#[R31 + 1940]> */
		/* 8221DF54h case    1:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R31 + 0x00000794) );
		/* 8221DF54h case    1:*/		return 0x8221DF58;
		  /* 8221DF58h */ case    2:  		/* li R4, 1978 */
		/* 8221DF58h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x7BA);
		/* 8221DF58h case    2:*/		return 0x8221DF5C;
		  /* 8221DF5Ch */ case    3:  		/* lwz R23, <#[R31 + 1944]> */
		/* 8221DF5Ch case    3:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R31 + 0x00000798) );
		/* 8221DF5Ch case    3:*/		return 0x8221DF60;
		  /* 8221DF60h */ case    4:  		/* addi R10, R10, -1 */
		/* 8221DF60h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8221DF60h case    4:*/		return 0x8221DF64;
		  /* 8221DF64h */ case    5:  		/* lwz R5, <#[R31 + 1700]> */
		/* 8221DF64h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x000006A4) );
		/* 8221DF64h case    5:*/		return 0x8221DF68;
		  /* 8221DF68h */ case    6:  		/* mr R3, R27 */
		/* 8221DF68h case    6:*/		regs.R3 = regs.R27;
		/* 8221DF68h case    6:*/		return 0x8221DF6C;
		  /* 8221DF6Ch */ case    7:  		/* and R22, R10, R11 */
		/* 8221DF6Ch case    7:*/		cpu::op::and<0>(regs,&regs.R22,regs.R10,regs.R11);
		/* 8221DF6Ch case    7:*/		return 0x8221DF70;
		  /* 8221DF70h */ case    8:  		/* bl -787824 */
		/* 8221DF70h case    8:*/		regs.LR = 0x8221DF74; return 0x8215DA00;
		/* 8221DF70h case    8:*/		return 0x8221DF74;
		  /* 8221DF74h */ case    9:  		/* li R4, 1978 */
		/* 8221DF74h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x7BA);
		/* 8221DF74h case    9:*/		return 0x8221DF78;
		  /* 8221DF78h */ case   10:  		/* mr R3, R26 */
		/* 8221DF78h case   10:*/		regs.R3 = regs.R26;
		/* 8221DF78h case   10:*/		return 0x8221DF7C;
		  /* 8221DF7Ch */ case   11:  		/* lwz R5, <#[R31 + 1700]> */
		/* 8221DF7Ch case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x000006A4) );
		/* 8221DF7Ch case   11:*/		return 0x8221DF80;
		  /* 8221DF80h */ case   12:  		/* bl -787840 */
		/* 8221DF80h case   12:*/		regs.LR = 0x8221DF84; return 0x8215DA00;
		/* 8221DF80h case   12:*/		return 0x8221DF84;
		  /* 8221DF84h */ case   13:  		/* li R4, 1979 */
		/* 8221DF84h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x7BB);
		/* 8221DF84h case   13:*/		return 0x8221DF88;
		  /* 8221DF88h */ case   14:  		/* mr R3, R27 */
		/* 8221DF88h case   14:*/		regs.R3 = regs.R27;
		/* 8221DF88h case   14:*/		return 0x8221DF8C;
		  /* 8221DF8Ch */ case   15:  		/* lwz R5, <#[R31 + 1704]> */
		/* 8221DF8Ch case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x000006A8) );
		/* 8221DF8Ch case   15:*/		return 0x8221DF90;
		  /* 8221DF90h */ case   16:  		/* bl -787856 */
		/* 8221DF90h case   16:*/		regs.LR = 0x8221DF94; return 0x8215DA00;
		/* 8221DF90h case   16:*/		return 0x8221DF94;
		  /* 8221DF94h */ case   17:  		/* li R4, 1979 */
		/* 8221DF94h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x7BB);
		/* 8221DF94h case   17:*/		return 0x8221DF98;
		  /* 8221DF98h */ case   18:  		/* mr R3, R26 */
		/* 8221DF98h case   18:*/		regs.R3 = regs.R26;
		/* 8221DF98h case   18:*/		return 0x8221DF9C;
		  /* 8221DF9Ch */ case   19:  		/* lwz R5, <#[R31 + 1704]> */
		/* 8221DF9Ch case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x000006A8) );
		/* 8221DF9Ch case   19:*/		return 0x8221DFA0;
		  /* 8221DFA0h */ case   20:  		/* bl -787872 */
		/* 8221DFA0h case   20:*/		regs.LR = 0x8221DFA4; return 0x8215DA00;
		/* 8221DFA0h case   20:*/		return 0x8221DFA4;
		  /* 8221DFA4h */ case   21:  		/* mr R5, R25 */
		/* 8221DFA4h case   21:*/		regs.R5 = regs.R25;
		/* 8221DFA4h case   21:*/		return 0x8221DFA8;
		  /* 8221DFA8h */ case   22:  		/* li R4, 1980 */
		/* 8221DFA8h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x7BC);
		/* 8221DFA8h case   22:*/		return 0x8221DFAC;
		  /* 8221DFACh */ case   23:  		/* mr R3, R27 */
		/* 8221DFACh case   23:*/		regs.R3 = regs.R27;
		/* 8221DFACh case   23:*/		return 0x8221DFB0;
		  /* 8221DFB0h */ case   24:  		/* bl -787888 */
		/* 8221DFB0h case   24:*/		regs.LR = 0x8221DFB4; return 0x8215DA00;
		/* 8221DFB0h case   24:*/		return 0x8221DFB4;
		  /* 8221DFB4h */ case   25:  		/* mr R5, R25 */
		/* 8221DFB4h case   25:*/		regs.R5 = regs.R25;
		/* 8221DFB4h case   25:*/		return 0x8221DFB8;
		  /* 8221DFB8h */ case   26:  		/* li R4, 1980 */
		/* 8221DFB8h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x7BC);
		/* 8221DFB8h case   26:*/		return 0x8221DFBC;
		  /* 8221DFBCh */ case   27:  		/* mr R3, R26 */
		/* 8221DFBCh case   27:*/		regs.R3 = regs.R26;
		/* 8221DFBCh case   27:*/		return 0x8221DFC0;
		  /* 8221DFC0h */ case   28:  		/* bl -787904 */
		/* 8221DFC0h case   28:*/		regs.LR = 0x8221DFC4; return 0x8215DA00;
		/* 8221DFC0h case   28:*/		return 0x8221DFC4;
		  /* 8221DFC4h */ case   29:  		/* mr R5, R23 */
		/* 8221DFC4h case   29:*/		regs.R5 = regs.R23;
		/* 8221DFC4h case   29:*/		return 0x8221DFC8;
		  /* 8221DFC8h */ case   30:  		/* li R4, 1981 */
		/* 8221DFC8h case   30:*/		cpu::op::li<0>(regs,&regs.R4,0x7BD);
		/* 8221DFC8h case   30:*/		return 0x8221DFCC;
		  /* 8221DFCCh */ case   31:  		/* mr R3, R27 */
		/* 8221DFCCh case   31:*/		regs.R3 = regs.R27;
		/* 8221DFCCh case   31:*/		return 0x8221DFD0;
		  /* 8221DFD0h */ case   32:  		/* bl -787920 */
		/* 8221DFD0h case   32:*/		regs.LR = 0x8221DFD4; return 0x8215DA00;
		/* 8221DFD0h case   32:*/		return 0x8221DFD4;
		  /* 8221DFD4h */ case   33:  		/* mr R5, R23 */
		/* 8221DFD4h case   33:*/		regs.R5 = regs.R23;
		/* 8221DFD4h case   33:*/		return 0x8221DFD8;
		  /* 8221DFD8h */ case   34:  		/* li R4, 1981 */
		/* 8221DFD8h case   34:*/		cpu::op::li<0>(regs,&regs.R4,0x7BD);
		/* 8221DFD8h case   34:*/		return 0x8221DFDC;
		  /* 8221DFDCh */ case   35:  		/* mr R3, R26 */
		/* 8221DFDCh case   35:*/		regs.R3 = regs.R26;
		/* 8221DFDCh case   35:*/		return 0x8221DFE0;
		  /* 8221DFE0h */ case   36:  		/* bl -787936 */
		/* 8221DFE0h case   36:*/		regs.LR = 0x8221DFE4; return 0x8215DA00;
		/* 8221DFE0h case   36:*/		return 0x8221DFE4;
		  /* 8221DFE4h */ case   37:  		/* li R4, 1982 */
		/* 8221DFE4h case   37:*/		cpu::op::li<0>(regs,&regs.R4,0x7BE);
		/* 8221DFE4h case   37:*/		return 0x8221DFE8;
		  /* 8221DFE8h */ case   38:  		/* mr R3, R27 */
		/* 8221DFE8h case   38:*/		regs.R3 = regs.R27;
		/* 8221DFE8h case   38:*/		return 0x8221DFEC;
		  /* 8221DFECh */ case   39:  		/* lbz R5, <#[R31 + 2029]> */
		/* 8221DFECh case   39:*/		cpu::mem::load8z( regs, &regs.R5, (uint32)(regs.R31 + 0x000007ED) );
		/* 8221DFECh case   39:*/		return 0x8221DFF0;
		  /* 8221DFF0h */ case   40:  		/* bl -787952 */
		/* 8221DFF0h case   40:*/		regs.LR = 0x8221DFF4; return 0x8215DA00;
		/* 8221DFF0h case   40:*/		return 0x8221DFF4;
		  /* 8221DFF4h */ case   41:  		/* li R4, 1982 */
		/* 8221DFF4h case   41:*/		cpu::op::li<0>(regs,&regs.R4,0x7BE);
		/* 8221DFF4h case   41:*/		return 0x8221DFF8;
		  /* 8221DFF8h */ case   42:  		/* mr R3, R26 */
		/* 8221DFF8h case   42:*/		regs.R3 = regs.R26;
		/* 8221DFF8h case   42:*/		return 0x8221DFFC;
		  /* 8221DFFCh */ case   43:  		/* lbz R5, <#[R31 + 2029]> */
		/* 8221DFFCh case   43:*/		cpu::mem::load8z( regs, &regs.R5, (uint32)(regs.R31 + 0x000007ED) );
		/* 8221DFFCh case   43:*/		return 0x8221E000;
		  /* 8221E000h */ case   44:  		/* bl -787968 */
		/* 8221E000h case   44:*/		regs.LR = 0x8221E004; return 0x8215DA00;
		/* 8221E000h case   44:*/		return 0x8221E004;
		  /* 8221E004h */ case   45:  		/* li R5, 0 */
		/* 8221E004h case   45:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8221E004h case   45:*/		return 0x8221E008;
		  /* 8221E008h */ case   46:  		/* li R4, 1983 */
		/* 8221E008h case   46:*/		cpu::op::li<0>(regs,&regs.R4,0x7BF);
		/* 8221E008h case   46:*/		return 0x8221E00C;
		  /* 8221E00Ch */ case   47:  		/* mr R3, R27 */
		/* 8221E00Ch case   47:*/		regs.R3 = regs.R27;
		/* 8221E00Ch case   47:*/		return 0x8221E010;
		  /* 8221E010h */ case   48:  		/* bl -787984 */
		/* 8221E010h case   48:*/		regs.LR = 0x8221E014; return 0x8215DA00;
		/* 8221E010h case   48:*/		return 0x8221E014;
		  /* 8221E014h */ case   49:  		/* li R5, 0 */
		/* 8221E014h case   49:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8221E014h case   49:*/		return 0x8221E018;
		  /* 8221E018h */ case   50:  		/* li R4, 1983 */
		/* 8221E018h case   50:*/		cpu::op::li<0>(regs,&regs.R4,0x7BF);
		/* 8221E018h case   50:*/		return 0x8221E01C;
		  /* 8221E01Ch */ case   51:  		/* mr R3, R26 */
		/* 8221E01Ch case   51:*/		regs.R3 = regs.R26;
		/* 8221E01Ch case   51:*/		return 0x8221E020;
		  /* 8221E020h */ case   52:  		/* bl -788000 */
		/* 8221E020h case   52:*/		regs.LR = 0x8221E024; return 0x8215DA00;
		/* 8221E020h case   52:*/		return 0x8221E024;
		  /* 8221E024h */ case   53:  		/* mr R5, R22 */
		/* 8221E024h case   53:*/		regs.R5 = regs.R22;
		/* 8221E024h case   53:*/		return 0x8221E028;
		  /* 8221E028h */ case   54:  		/* li R4, 1984 */
		/* 8221E028h case   54:*/		cpu::op::li<0>(regs,&regs.R4,0x7C0);
		/* 8221E028h case   54:*/		return 0x8221E02C;
		  /* 8221E02Ch */ case   55:  		/* mr R3, R27 */
		/* 8221E02Ch case   55:*/		regs.R3 = regs.R27;
		/* 8221E02Ch case   55:*/		return 0x8221E030;
		  /* 8221E030h */ case   56:  		/* bl -788016 */
		/* 8221E030h case   56:*/		regs.LR = 0x8221E034; return 0x8215DA00;
		/* 8221E030h case   56:*/		return 0x8221E034;
		  /* 8221E034h */ case   57:  		/* mr R5, R22 */
		/* 8221E034h case   57:*/		regs.R5 = regs.R22;
		/* 8221E034h case   57:*/		return 0x8221E038;
		  /* 8221E038h */ case   58:  		/* li R4, 1984 */
		/* 8221E038h case   58:*/		cpu::op::li<0>(regs,&regs.R4,0x7C0);
		/* 8221E038h case   58:*/		return 0x8221E03C;
		  /* 8221E03Ch */ case   59:  		/* mr R3, R26 */
		/* 8221E03Ch case   59:*/		regs.R3 = regs.R26;
		/* 8221E03Ch case   59:*/		return 0x8221E040;
		  /* 8221E040h */ case   60:  		/* bl -788032 */
		/* 8221E040h case   60:*/		regs.LR = 0x8221E044; return 0x8215DA00;
		/* 8221E040h case   60:*/		return 0x8221E044;
		  /* 8221E044h */ case   61:  		/* mr R5, R29 */
		/* 8221E044h case   61:*/		regs.R5 = regs.R29;
		/* 8221E044h case   61:*/		return 0x8221E048;
		  /* 8221E048h */ case   62:  		/* li R4, 1985 */
		/* 8221E048h case   62:*/		cpu::op::li<0>(regs,&regs.R4,0x7C1);
		/* 8221E048h case   62:*/		return 0x8221E04C;
		  /* 8221E04Ch */ case   63:  		/* mr R3, R27 */
		/* 8221E04Ch case   63:*/		regs.R3 = regs.R27;
		/* 8221E04Ch case   63:*/		return 0x8221E050;
		  /* 8221E050h */ case   64:  		/* bl -788048 */
		/* 8221E050h case   64:*/		regs.LR = 0x8221E054; return 0x8215DA00;
		/* 8221E050h case   64:*/		return 0x8221E054;
		  /* 8221E054h */ case   65:  		/* mr R5, R29 */
		/* 8221E054h case   65:*/		regs.R5 = regs.R29;
		/* 8221E054h case   65:*/		return 0x8221E058;
		  /* 8221E058h */ case   66:  		/* li R4, 1985 */
		/* 8221E058h case   66:*/		cpu::op::li<0>(regs,&regs.R4,0x7C1);
		/* 8221E058h case   66:*/		return 0x8221E05C;
		  /* 8221E05Ch */ case   67:  		/* mr R3, R26 */
		/* 8221E05Ch case   67:*/		regs.R3 = regs.R26;
		/* 8221E05Ch case   67:*/		return 0x8221E060;
		  /* 8221E060h */ case   68:  		/* bl -788064 */
		/* 8221E060h case   68:*/		regs.LR = 0x8221E064; return 0x8215DA00;
		/* 8221E060h case   68:*/		return 0x8221E064;
		  /* 8221E064h */ case   69:  		/* mr R5, R30 */
		/* 8221E064h case   69:*/		regs.R5 = regs.R30;
		/* 8221E064h case   69:*/		return 0x8221E068;
		  /* 8221E068h */ case   70:  		/* li R4, 1986 */
		/* 8221E068h case   70:*/		cpu::op::li<0>(regs,&regs.R4,0x7C2);
		/* 8221E068h case   70:*/		return 0x8221E06C;
		  /* 8221E06Ch */ case   71:  		/* mr R3, R27 */
		/* 8221E06Ch case   71:*/		regs.R3 = regs.R27;
		/* 8221E06Ch case   71:*/		return 0x8221E070;
		  /* 8221E070h */ case   72:  		/* bl -788080 */
		/* 8221E070h case   72:*/		regs.LR = 0x8221E074; return 0x8215DA00;
		/* 8221E070h case   72:*/		return 0x8221E074;
		  /* 8221E074h */ case   73:  		/* mr R5, R30 */
		/* 8221E074h case   73:*/		regs.R5 = regs.R30;
		/* 8221E074h case   73:*/		return 0x8221E078;
		  /* 8221E078h */ case   74:  		/* li R4, 1986 */
		/* 8221E078h case   74:*/		cpu::op::li<0>(regs,&regs.R4,0x7C2);
		/* 8221E078h case   74:*/		return 0x8221E07C;
		  /* 8221E07Ch */ case   75:  		/* mr R3, R26 */
		/* 8221E07Ch case   75:*/		regs.R3 = regs.R26;
		/* 8221E07Ch case   75:*/		return 0x8221E080;
		  /* 8221E080h */ case   76:  		/* bl -788096 */
		/* 8221E080h case   76:*/		regs.LR = 0x8221E084; return 0x8215DA00;
		/* 8221E080h case   76:*/		return 0x8221E084;
		  /* 8221E084h */ case   77:  		/* li R5, 0 */
		/* 8221E084h case   77:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8221E084h case   77:*/		return 0x8221E088;
		  /* 8221E088h */ case   78:  		/* li R4, 1987 */
		/* 8221E088h case   78:*/		cpu::op::li<0>(regs,&regs.R4,0x7C3);
		/* 8221E088h case   78:*/		return 0x8221E08C;
		  /* 8221E08Ch */ case   79:  		/* mr R3, R27 */
		/* 8221E08Ch case   79:*/		regs.R3 = regs.R27;
		/* 8221E08Ch case   79:*/		return 0x8221E090;
		  /* 8221E090h */ case   80:  		/* bl -788112 */
		/* 8221E090h case   80:*/		regs.LR = 0x8221E094; return 0x8215DA00;
		/* 8221E090h case   80:*/		return 0x8221E094;
		  /* 8221E094h */ case   81:  		/* li R5, 0 */
		/* 8221E094h case   81:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8221E094h case   81:*/		return 0x8221E098;
		  /* 8221E098h */ case   82:  		/* li R4, 1987 */
		/* 8221E098h case   82:*/		cpu::op::li<0>(regs,&regs.R4,0x7C3);
		/* 8221E098h case   82:*/		return 0x8221E09C;
		  /* 8221E09Ch */ case   83:  		/* mr R3, R26 */
		/* 8221E09Ch case   83:*/		regs.R3 = regs.R26;
		/* 8221E09Ch case   83:*/		return 0x8221E0A0;
		  /* 8221E0A0h */ case   84:  		/* bl -788128 */
		/* 8221E0A0h case   84:*/		regs.LR = 0x8221E0A4; return 0x8215DA00;
		/* 8221E0A0h case   84:*/		return 0x8221E0A4;
		  /* 8221E0A4h */ case   85:  		/* li R4, 1991 */
		/* 8221E0A4h case   85:*/		cpu::op::li<0>(regs,&regs.R4,0x7C7);
		/* 8221E0A4h case   85:*/		return 0x8221E0A8;
		  /* 8221E0A8h */ case   86:  		/* mr R3, R27 */
		/* 8221E0A8h case   86:*/		regs.R3 = regs.R27;
		/* 8221E0A8h case   86:*/		return 0x8221E0AC;
		  /* 8221E0ACh */ case   87:  		/* lwz R5, <#[R31 + 2032]> */
		/* 8221E0ACh case   87:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x000007F0) );
		/* 8221E0ACh case   87:*/		return 0x8221E0B0;
		  /* 8221E0B0h */ case   88:  		/* bl -788144 */
		/* 8221E0B0h case   88:*/		regs.LR = 0x8221E0B4; return 0x8215DA00;
		/* 8221E0B0h case   88:*/		return 0x8221E0B4;
		  /* 8221E0B4h */ case   89:  		/* li R4, 1991 */
		/* 8221E0B4h case   89:*/		cpu::op::li<0>(regs,&regs.R4,0x7C7);
		/* 8221E0B4h case   89:*/		return 0x8221E0B8;
		  /* 8221E0B8h */ case   90:  		/* mr R3, R26 */
		/* 8221E0B8h case   90:*/		regs.R3 = regs.R26;
		/* 8221E0B8h case   90:*/		return 0x8221E0BC;
		  /* 8221E0BCh */ case   91:  		/* lwz R5, <#[R31 + 2032]> */
		/* 8221E0BCh case   91:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x000007F0) );
		/* 8221E0BCh case   91:*/		return 0x8221E0C0;
		  /* 8221E0C0h */ case   92:  		/* bl -788160 */
		/* 8221E0C0h case   92:*/		regs.LR = 0x8221E0C4; return 0x8215DA00;
		/* 8221E0C0h case   92:*/		return 0x8221E0C4;
		  /* 8221E0C4h */ case   93:  		/* li R4, 1989 */
		/* 8221E0C4h case   93:*/		cpu::op::li<0>(regs,&regs.R4,0x7C5);
		/* 8221E0C4h case   93:*/		return 0x8221E0C8;
		  /* 8221E0C8h */ case   94:  		/* mr R3, R27 */
		/* 8221E0C8h case   94:*/		regs.R3 = regs.R27;
		/* 8221E0C8h case   94:*/		return 0x8221E0CC;
		  /* 8221E0CCh */ case   95:  		/* lbz R5, <#[R31 + 2030]> */
		/* 8221E0CCh case   95:*/		cpu::mem::load8z( regs, &regs.R5, (uint32)(regs.R31 + 0x000007EE) );
		/* 8221E0CCh case   95:*/		return 0x8221E0D0;
		  /* 8221E0D0h */ case   96:  		/* bl -788176 */
		/* 8221E0D0h case   96:*/		regs.LR = 0x8221E0D4; return 0x8215DA00;
		/* 8221E0D0h case   96:*/		return 0x8221E0D4;
		  /* 8221E0D4h */ case   97:  		/* li R4, 1989 */
		/* 8221E0D4h case   97:*/		cpu::op::li<0>(regs,&regs.R4,0x7C5);
		/* 8221E0D4h case   97:*/		return 0x8221E0D8;
		  /* 8221E0D8h */ case   98:  		/* mr R3, R26 */
		/* 8221E0D8h case   98:*/		regs.R3 = regs.R26;
		/* 8221E0D8h case   98:*/		return 0x8221E0DC;
		  /* 8221E0DCh */ case   99:  		/* lbz R5, <#[R31 + 2030]> */
		/* 8221E0DCh case   99:*/		cpu::mem::load8z( regs, &regs.R5, (uint32)(regs.R31 + 0x000007EE) );
		/* 8221E0DCh case   99:*/		return 0x8221E0E0;
		  /* 8221E0E0h */ case  100:  		/* bl -788192 */
		/* 8221E0E0h case  100:*/		regs.LR = 0x8221E0E4; return 0x8215DA00;
		/* 8221E0E0h case  100:*/		return 0x8221E0E4;
		  /* 8221E0E4h */ case  101:  		/* lis R11, -32256 */
		/* 8221E0E4h case  101:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8221E0E4h case  101:*/		return 0x8221E0E8;
		  /* 8221E0E8h */ case  102:  		/* mr R3, R31 */
		/* 8221E0E8h case  102:*/		regs.R3 = regs.R31;
		/* 8221E0E8h case  102:*/		return 0x8221E0EC;
		  /* 8221E0ECh */ case  103:  		/* addi R4, R11, 17768 */
		/* 8221E0ECh case  103:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4568);
		/* 8221E0ECh case  103:*/		return 0x8221E0F0;
		  /* 8221E0F0h */ case  104:  		/* bl -3376 */
		/* 8221E0F0h case  104:*/		regs.LR = 0x8221E0F4; return 0x8221D3C0;
		/* 8221E0F0h case  104:*/		return 0x8221E0F4;
		  /* 8221E0F4h */ case  105:  		/* bl -4364 */
		/* 8221E0F4h case  105:*/		regs.LR = 0x8221E0F8; return 0x8221CFE8;
		/* 8221E0F4h case  105:*/		return 0x8221E0F8;
	}
	return 0x8221E0F8;
} // Block from 8221DF50h-8221E0F8h (106 instructions)

//////////////////////////////////////////////////////
// Block at 8221E0F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E0F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E0F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E0F8);
		  /* 8221E0F8h */ case    0:  		/* li R4, 0 */
		/* 8221E0F8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8221E0F8h case    0:*/		return 0x8221E0FC;
		  /* 8221E0FCh */ case    1:  		/* mr R3, R24 */
		/* 8221E0FCh case    1:*/		regs.R3 = regs.R24;
		/* 8221E0FCh case    1:*/		return 0x8221E100;
		  /* 8221E100h */ case    2:  		/* bl -5176 */
		/* 8221E100h case    2:*/		regs.LR = 0x8221E104; return 0x8221CCC8;
		/* 8221E100h case    2:*/		return 0x8221E104;
		  /* 8221E104h */ case    3:  		/* mr R3, R28 */
		/* 8221E104h case    3:*/		regs.R3 = regs.R28;
		/* 8221E104h case    3:*/		return 0x8221E108;
		  /* 8221E108h */ case    4:  		/* addi R1, R1, 16672 */
		/* 8221E108h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x4120);
		/* 8221E108h case    4:*/		return 0x8221E10C;
		  /* 8221E10Ch */ case    5:  		/* b -1625724 */
		/* 8221E10Ch case    5:*/		return 0x82091290;
		/* 8221E10Ch case    5:*/		return 0x8221E110;
	}
	return 0x8221E110;
} // Block from 8221E0F8h-8221E110h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221E110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E110);
		  /* 8221E110h */ case    0:  		/* li R11, 21 */
		/* 8221E110h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x15);
		/* 8221E110h case    0:*/		return 0x8221E114;
		  /* 8221E114h */ case    1:  		/* li R4, 1 */
		/* 8221E114h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8221E114h case    1:*/		return 0x8221E118;
		  /* 8221E118h */ case    2:  		/* stw R11, <#[R31 + 1364]> */
		/* 8221E118h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000554) );
		/* 8221E118h case    2:*/		return 0x8221E11C;
		  /* 8221E11Ch */ case    3:  		/* addi R3, R31, 16 */
		/* 8221E11Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x10);
		/* 8221E11Ch case    3:*/		return 0x8221E120;
		  /* 8221E120h */ case    4:  		/* bl 306576 */
		/* 8221E120h case    4:*/		regs.LR = 0x8221E124; return 0x82268EB0;
		/* 8221E120h case    4:*/		return 0x8221E124;
		  /* 8221E124h */ case    5:  		/* nop */
		/* 8221E124h case    5:*/		cpu::op::nop();
		/* 8221E124h case    5:*/		return 0x8221E128;
	}
	return 0x8221E128;
} // Block from 8221E110h-8221E128h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221E128h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E128);
		  /* 8221E128h */ case    0:  		/* mfspr R12, LR */
		/* 8221E128h case    0:*/		regs.R12 = regs.LR;
		/* 8221E128h case    0:*/		return 0x8221E12C;
		  /* 8221E12Ch */ case    1:  		/* bl -1625828 */
		/* 8221E12Ch case    1:*/		regs.LR = 0x8221E130; return 0x82091248;
		/* 8221E12Ch case    1:*/		return 0x8221E130;
		  /* 8221E130h */ case    2:  		/* ld R12, <#[R1 - 4096]> */
		/* 8221E130h case    2:*/		cpu::mem::load64( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFF000) );
		/* 8221E130h case    2:*/		return 0x8221E134;
		  /* 8221E134h */ case    3:  		/* ld R12, <#[R1 - 8192]> */
		/* 8221E134h case    3:*/		cpu::mem::load64( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFE000) );
		/* 8221E134h case    3:*/		return 0x8221E138;
		  /* 8221E138h */ case    4:  		/* ld R12, <#[R1 - 12288]> */
		/* 8221E138h case    4:*/		cpu::mem::load64( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFD000) );
		/* 8221E138h case    4:*/		return 0x8221E13C;
		  /* 8221E13Ch */ case    5:  		/* ld R12, <#[R1 - 16384]> */
		/* 8221E13Ch case    5:*/		cpu::mem::load64( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFC000) );
		/* 8221E13Ch case    5:*/		return 0x8221E140;
		  /* 8221E140h */ case    6:  		/* stwu R1, <#[R1 - 16640]> */
		/* 8221E140h case    6:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFBF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFBF00);
		/* 8221E140h case    6:*/		return 0x8221E144;
		  /* 8221E144h */ case    7:  		/* stw R3, <#[R1 + 16660]> */
		/* 8221E144h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00004114) );
		/* 8221E144h case    7:*/		return 0x8221E148;
		  /* 8221E148h */ case    8:  		/* mr R31, R3 */
		/* 8221E148h case    8:*/		regs.R31 = regs.R3;
		/* 8221E148h case    8:*/		return 0x8221E14C;
		  /* 8221E14Ch */ case    9:  		/* mr R30, R4 */
		/* 8221E14Ch case    9:*/		regs.R30 = regs.R4;
		/* 8221E14Ch case    9:*/		return 0x8221E150;
		  /* 8221E150h */ case   10:  		/* stw R4, <#[R1 + 16668]> */
		/* 8221E150h case   10:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000411C) );
		/* 8221E150h case   10:*/		return 0x8221E154;
		  /* 8221E154h */ case   11:  		/* stw R5, <#[R1 + 16676]> */
		/* 8221E154h case   11:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00004124) );
		/* 8221E154h case   11:*/		return 0x8221E158;
		  /* 8221E158h */ case   12:  		/* mr R29, R6 */
		/* 8221E158h case   12:*/		regs.R29 = regs.R6;
		/* 8221E158h case   12:*/		return 0x8221E15C;
		  /* 8221E15Ch */ case   13:  		/* stw R3, <#[R1 + 116]> */
		/* 8221E15Ch case   13:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000074) );
		/* 8221E15Ch case   13:*/		return 0x8221E160;
		  /* 8221E160h */ case   14:  		/* bl -4104 */
		/* 8221E160h case   14:*/		regs.LR = 0x8221E164; return 0x8221D158;
		/* 8221E160h case   14:*/		return 0x8221E164;
		  /* 8221E164h */ case   15:  		/* mr R3, R31 */
		/* 8221E164h case   15:*/		regs.R3 = regs.R31;
		/* 8221E164h case   15:*/		return 0x8221E168;
		  /* 8221E168h */ case   16:  		/* bl -3936 */
		/* 8221E168h case   16:*/		regs.LR = 0x8221E16C; return 0x8221D208;
		/* 8221E168h case   16:*/		return 0x8221E16C;
		  /* 8221E16Ch */ case   17:  		/* stw R29, <#[R31 + 1536]> */
		/* 8221E16Ch case   17:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000600) );
		/* 8221E16Ch case   17:*/		return 0x8221E170;
		  /* 8221E170h */ case   18:  		/* mr R4, R31 */
		/* 8221E170h case   18:*/		regs.R4 = regs.R31;
		/* 8221E170h case   18:*/		return 0x8221E174;
		  /* 8221E174h */ case   19:  		/* mr R3, R30 */
		/* 8221E174h case   19:*/		regs.R3 = regs.R30;
		/* 8221E174h case   19:*/		return 0x8221E178;
		  /* 8221E178h */ case   20:  		/* bl -1656 */
		/* 8221E178h case   20:*/		regs.LR = 0x8221E17C; return 0x8221DB00;
		/* 8221E178h case   20:*/		return 0x8221E17C;
		  /* 8221E17Ch */ case   21:  		/* stw R3, <#[R31 + 1488]> */
		/* 8221E17Ch case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000005D0) );
		/* 8221E17Ch case   21:*/		return 0x8221E180;
		  /* 8221E180h */ case   22:  		/* li R27, 1 */
		/* 8221E180h case   22:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 8221E180h case   22:*/		return 0x8221E184;
		  /* 8221E184h */ case   23:  		/* addi R3, R31, 16 */
		/* 8221E184h case   23:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x10);
		/* 8221E184h case   23:*/		return 0x8221E188;
		  /* 8221E188h */ case   24:  		/* stb R27, <#[R1 + 112]> */
		/* 8221E188h case   24:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R1 + 0x00000070) );
		/* 8221E188h case   24:*/		return 0x8221E18C;
		  /* 8221E18Ch */ case   25:  		/* bl 307268 */
		/* 8221E18Ch case   25:*/		regs.LR = 0x8221E190; return 0x822691D0;
		/* 8221E18Ch case   25:*/		return 0x8221E190;
		  /* 8221E190h */ case   26:  		/* lwz R31, <#[R1 + 16660]> */
		/* 8221E190h case   26:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00004114) );
		/* 8221E190h case   26:*/		return 0x8221E194;
		  /* 8221E194h */ case   27:  		/* lwz R25, <#[R1 + 16668]> */
		/* 8221E194h case   27:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x0000411C) );
		/* 8221E194h case   27:*/		return 0x8221E198;
		  /* 8221E198h */ case   28:  		/* li R26, 0 */
		/* 8221E198h case   28:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 8221E198h case   28:*/		return 0x8221E19C;
		  /* 8221E19Ch */ case   29:  		/* lwz R24, <#[R1 + 116]> */
		/* 8221E19Ch case   29:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000074) );
		/* 8221E19Ch case   29:*/		return 0x8221E1A0;
		  /* 8221E1A0h */ case   30:  		/* cmpwi CR0, R3, 0 */
		/* 8221E1A0h case   30:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8221E1A0h case   30:*/		return 0x8221E1A4;
		  /* 8221E1A4h */ case   31:  		/* bc 4, CR0_EQ, 348 */
		/* 8221E1A4h case   31:*/		if ( !regs.CR[0].eq ) { return 0x8221E300;  }
		/* 8221E1A4h case   31:*/		return 0x8221E1A8;
		  /* 8221E1A8h */ case   32:  		/* mr R4, R24 */
		/* 8221E1A8h case   32:*/		regs.R4 = regs.R24;
		/* 8221E1A8h case   32:*/		return 0x8221E1AC;
		  /* 8221E1ACh */ case   33:  		/* lwz R3, <#[R1 + 16676]> */
		/* 8221E1ACh case   33:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00004124) );
		/* 8221E1ACh case   33:*/		return 0x8221E1B0;
		  /* 8221E1B0h */ case   34:  		/* bl 125360 */
		/* 8221E1B0h case   34:*/		regs.LR = 0x8221E1B4; return 0x8223CB60;
		/* 8221E1B0h case   34:*/		return 0x8221E1B4;
		  /* 8221E1B4h */ case   35:  		/* lwz R11, <#[R3 + 4]> */
		/* 8221E1B4h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8221E1B4h case   35:*/		return 0x8221E1B8;
		  /* 8221E1B8h */ case   36:  		/* mr R30, R3 */
		/* 8221E1B8h case   36:*/		regs.R30 = regs.R3;
		/* 8221E1B8h case   36:*/		return 0x8221E1BC;
		  /* 8221E1BCh */ case   37:  		/* rlwinm. R11, R11, 30, 31, 31 */
		/* 8221E1BCh case   37:*/		cpu::op::rlwinm<1,30,31,31>(regs,&regs.R11,regs.R11);
		/* 8221E1BCh case   37:*/		return 0x8221E1C0;
		  /* 8221E1C0h */ case   38:  		/* mr R3, R25 */
		/* 8221E1C0h case   38:*/		regs.R3 = regs.R25;
		/* 8221E1C0h case   38:*/		return 0x8221E1C4;
		  /* 8221E1C4h */ case   39:  		/* bc 12, CR0_EQ, 16 */
		/* 8221E1C4h case   39:*/		if ( regs.CR[0].eq ) { return 0x8221E1D4;  }
		/* 8221E1C4h case   39:*/		return 0x8221E1C8;
		  /* 8221E1C8h */ case   40:  		/* stb R26, <#[R1 + 112]> */
		/* 8221E1C8h case   40:*/		cpu::mem::store8( regs, regs.R26, (uint32)(regs.R1 + 0x00000070) );
		/* 8221E1C8h case   40:*/		return 0x8221E1CC;
		  /* 8221E1CCh */ case   41:  		/* li R4, 1 */
		/* 8221E1CCh case   41:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8221E1CCh case   41:*/		return 0x8221E1D0;
		  /* 8221E1D0h */ case   42:  		/* b 8 */
		/* 8221E1D0h case   42:*/		return 0x8221E1D8;
		/* 8221E1D0h case   42:*/		return 0x8221E1D4;
	}
	return 0x8221E1D4;
} // Block from 8221E128h-8221E1D4h (43 instructions)

//////////////////////////////////////////////////////
// Block at 8221E1D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E1D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E1D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E1D4);
		  /* 8221E1D4h */ case    0:  		/* li R4, 0 */
		/* 8221E1D4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8221E1D4h case    0:*/		return 0x8221E1D8;
	}
	return 0x8221E1D8;
} // Block from 8221E1D4h-8221E1D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221E1D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E1D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E1D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E1D8);
		  /* 8221E1D8h */ case    0:  		/* bl -789896 */
		/* 8221E1D8h case    0:*/		regs.LR = 0x8221E1DC; return 0x8215D450;
		/* 8221E1D8h case    0:*/		return 0x8221E1DC;
		  /* 8221E1DCh */ case    1:  		/* mr R4, R30 */
		/* 8221E1DCh case    1:*/		regs.R4 = regs.R30;
		/* 8221E1DCh case    1:*/		return 0x8221E1E0;
		  /* 8221E1E0h */ case    2:  		/* mr R3, R31 */
		/* 8221E1E0h case    2:*/		regs.R3 = regs.R31;
		/* 8221E1E0h case    2:*/		return 0x8221E1E4;
		  /* 8221E1E4h */ case    3:  		/* bl -3244 */
		/* 8221E1E4h case    3:*/		regs.LR = 0x8221E1E8; return 0x8221D538;
		/* 8221E1E4h case    3:*/		return 0x8221E1E8;
		  /* 8221E1E8h */ case    4:  		/* mr R3, R30 */
		/* 8221E1E8h case    4:*/		regs.R3 = regs.R30;
		/* 8221E1E8h case    4:*/		return 0x8221E1EC;
		  /* 8221E1ECh */ case    5:  		/* bl 125268 */
		/* 8221E1ECh case    5:*/		regs.LR = 0x8221E1F0; return 0x8223CB40;
		/* 8221E1ECh case    5:*/		return 0x8221E1F0;
		  /* 8221E1F0h */ case    6:  		/* addi R4, R30, -4 */
		/* 8221E1F0h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R30,0xFFFFFFFC);
		/* 8221E1F0h case    6:*/		return 0x8221E1F4;
		  /* 8221E1F4h */ case    7:  		/* lwz R3, <#[R30 - 4]> */
		/* 8221E1F4h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0xFFFFFFFC) );
		/* 8221E1F4h case    7:*/		return 0x8221E1F8;
		  /* 8221E1F8h */ case    8:  		/* bl -7096 */
		/* 8221E1F8h case    8:*/		regs.LR = 0x8221E1FC; return 0x8221C640;
		/* 8221E1F8h case    8:*/		return 0x8221E1FC;
		  /* 8221E1FCh */ case    9:  		/* mr R3, R25 */
		/* 8221E1FCh case    9:*/		regs.R3 = regs.R25;
		/* 8221E1FCh case    9:*/		return 0x8221E200;
		  /* 8221E200h */ case   10:  		/* lwz R5, <#[R31 + 1620]> */
		/* 8221E200h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000654) );
		/* 8221E200h case   10:*/		return 0x8221E204;
		  /* 8221E204h */ case   11:  		/* lwz R4, <#[R31 + 1540]> */
		/* 8221E204h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000604) );
		/* 8221E204h case   11:*/		return 0x8221E208;
		  /* 8221E208h */ case   12:  		/* bl -789320 */
		/* 8221E208h case   12:*/		regs.LR = 0x8221E20C; return 0x8215D6C0;
		/* 8221E208h case   12:*/		return 0x8221E20C;
		  /* 8221E20Ch */ case   13:  		/* cmpwi CR0, R3, 0 */
		/* 8221E20Ch case   13:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8221E20Ch case   13:*/		return 0x8221E210;
		  /* 8221E210h */ case   14:  		/* bc 12, CR0_EQ, 40 */
		/* 8221E210h case   14:*/		if ( regs.CR[0].eq ) { return 0x8221E238;  }
		/* 8221E210h case   14:*/		return 0x8221E214;
		  /* 8221E214h */ case   15:  		/* lis R11, -32252 */
		/* 8221E214h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221E214h case   15:*/		return 0x8221E218;
		  /* 8221E218h */ case   16:  		/* lis R10, -32252 */
		/* 8221E218h case   16:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221E218h case   16:*/		return 0x8221E21C;
		  /* 8221E21Ch */ case   17:  		/* lis R9, -32253 */
		/* 8221E21Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8221E21Ch case   17:*/		return 0x8221E220;
		  /* 8221E220h */ case   18:  		/* addi R6, R11, -3104 */
		/* 8221E220h case   18:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFF3E0);
		/* 8221E220h case   18:*/		return 0x8221E224;
		  /* 8221E224h */ case   19:  		/* addi R5, R10, -8328 */
		/* 8221E224h case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFDF78);
		/* 8221E224h case   19:*/		return 0x8221E228;
		  /* 8221E228h */ case   20:  		/* addi R4, R9, 27460 */
		/* 8221E228h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8221E228h case   20:*/		return 0x8221E22C;
		  /* 8221E22Ch */ case   21:  		/* li R7, 1094 */
		/* 8221E22Ch case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x446);
		/* 8221E22Ch case   21:*/		return 0x8221E230;
		  /* 8221E230h */ case   22:  		/* li R3, 0 */
		/* 8221E230h case   22:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221E230h case   22:*/		return 0x8221E234;
		  /* 8221E234h */ case   23:  		/* bl -812588 */
		/* 8221E234h case   23:*/		regs.LR = 0x8221E238; return 0x82157C08;
		/* 8221E234h case   23:*/		return 0x8221E238;
	}
	return 0x8221E238;
} // Block from 8221E1D8h-8221E238h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8221E238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E238);
		  /* 8221E238h */ case    0:  		/* lwz R30, <#[R31 + 1540]> */
		/* 8221E238h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000604) );
		/* 8221E238h case    0:*/		return 0x8221E23C;
		  /* 8221E23Ch */ case    1:  		/* lis R11, -32252 */
		/* 8221E23Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221E23Ch case    1:*/		return 0x8221E240;
		  /* 8221E240h */ case    2:  		/* lis R10, -32252 */
		/* 8221E240h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221E240h case    2:*/		return 0x8221E244;
		  /* 8221E244h */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 8221E244h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8221E244h case    3:*/		return 0x8221E248;
		  /* 8221E248h */ case    4:  		/* addi R29, R11, -2964 */
		/* 8221E248h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFF46C);
		/* 8221E248h case    4:*/		return 0x8221E24C;
		  /* 8221E24Ch */ case    5:  		/* addi R28, R10, -2784 */
		/* 8221E24Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFF520);
		/* 8221E24Ch case    5:*/		return 0x8221E250;
		  /* 8221E250h */ case    6:  		/* bc 12, CR6_EQ, 84 */
		/* 8221E250h case    6:*/		if ( regs.CR[6].eq ) { return 0x8221E2A4;  }
		/* 8221E250h case    6:*/		return 0x8221E254;
		  /* 8221E254h */ case    7:  		/* lbz R11, <#[R31 + 2129]> */
		/* 8221E254h case    7:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000851) );
		/* 8221E254h case    7:*/		return 0x8221E258;
		  /* 8221E258h */ case    8:  		/* stw R26, <#[R31 + 2036]> */
		/* 8221E258h case    8:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x000007F4) );
		/* 8221E258h case    8:*/		return 0x8221E25C;
		  /* 8221E25Ch */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 8221E25Ch case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221E25Ch case    9:*/		return 0x8221E260;
		  /* 8221E260h */ case   10:  		/* bc 12, CR0_EQ, 68 */
		/* 8221E260h case   10:*/		if ( regs.CR[0].eq ) { return 0x8221E2A4;  }
		/* 8221E260h case   10:*/		return 0x8221E264;
		  /* 8221E264h */ case   11:  		/* lis R11, -32252 */
		/* 8221E264h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221E264h case   11:*/		return 0x8221E268;
		  /* 8221E268h */ case   12:  		/* mr R3, R31 */
		/* 8221E268h case   12:*/		regs.R3 = regs.R31;
		/* 8221E268h case   12:*/		return 0x8221E26C;
		  /* 8221E26Ch */ case   13:  		/* addi R4, R11, -2464 */
		/* 8221E26Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFF660);
		/* 8221E26Ch case   13:*/		return 0x8221E270;
		  /* 8221E270h */ case   14:  		/* bl -3760 */
		/* 8221E270h case   14:*/		regs.LR = 0x8221E274; return 0x8221D3C0;
		/* 8221E270h case   14:*/		return 0x8221E274;
		  /* 8221E274h */ case   15:  		/* li R5, 8192 */
		/* 8221E274h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x2000);
		/* 8221E274h case   15:*/		return 0x8221E278;
		  /* 8221E278h */ case   16:  		/* li R4, 0 */
		/* 8221E278h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8221E278h case   16:*/		return 0x8221E27C;
		  /* 8221E27Ch */ case   17:  		/* addi R3, R1, 144 */
		/* 8221E27Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 8221E27Ch case   17:*/		return 0x8221E280;
		  /* 8221E280h */ case   18:  		/* bl -1625920 */
		/* 8221E280h case   18:*/		regs.LR = 0x8221E284; return 0x82091340;
		/* 8221E280h case   18:*/		return 0x8221E284;
		  /* 8221E284h */ case   19:  		/* stw R31, <#[R1 + 8336]> */
		/* 8221E284h case   19:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00002090) );
		/* 8221E284h case   19:*/		return 0x8221E288;
		  /* 8221E288h */ case   20:  		/* stw R28, <#[R1 + 128]> */
		/* 8221E288h case   20:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000080) );
		/* 8221E288h case   20:*/		return 0x8221E28C;
		  /* 8221E28Ch */ case   21:  		/* li R6, 0 */
		/* 8221E28Ch case   21:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8221E28Ch case   21:*/		return 0x8221E290;
		  /* 8221E290h */ case   22:  		/* mr R5, R30 */
		/* 8221E290h case   22:*/		regs.R5 = regs.R30;
		/* 8221E290h case   22:*/		return 0x8221E294;
		  /* 8221E294h */ case   23:  		/* lwz R4, <#[R31 + 1620]> */
		/* 8221E294h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000654) );
		/* 8221E294h case   23:*/		return 0x8221E298;
		  /* 8221E298h */ case   24:  		/* addi R3, R1, 128 */
		/* 8221E298h case   24:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 8221E298h case   24:*/		return 0x8221E29C;
		  /* 8221E29Ch */ case   25:  		/* bl -803268 */
		/* 8221E29Ch case   25:*/		regs.LR = 0x8221E2A0; return 0x8215A0D8;
		/* 8221E29Ch case   25:*/		return 0x8221E2A0;
		  /* 8221E2A0h */ case   26:  		/* stw R29, <#[R1 + 128]> */
		/* 8221E2A0h case   26:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000080) );
		/* 8221E2A0h case   26:*/		return 0x8221E2A4;
	}
	return 0x8221E2A4;
} // Block from 8221E238h-8221E2A4h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8221E2A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E2A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E2A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E2A4);
		  /* 8221E2A4h */ case    0:  		/* lwz R30, <#[R31 + 1544]> */
		/* 8221E2A4h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000608) );
		/* 8221E2A4h case    0:*/		return 0x8221E2A8;
		  /* 8221E2A8h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8221E2A8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8221E2A8h case    1:*/		return 0x8221E2AC;
		  /* 8221E2ACh */ case    2:  		/* bc 12, CR6_EQ, 84 */
		/* 8221E2ACh case    2:*/		if ( regs.CR[6].eq ) { return 0x8221E300;  }
		/* 8221E2ACh case    2:*/		return 0x8221E2B0;
		  /* 8221E2B0h */ case    3:  		/* lbz R11, <#[R31 + 2129]> */
		/* 8221E2B0h case    3:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000851) );
		/* 8221E2B0h case    3:*/		return 0x8221E2B4;
		  /* 8221E2B4h */ case    4:  		/* stw R27, <#[R31 + 2036]> */
		/* 8221E2B4h case    4:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x000007F4) );
		/* 8221E2B4h case    4:*/		return 0x8221E2B8;
		  /* 8221E2B8h */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 8221E2B8h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221E2B8h case    5:*/		return 0x8221E2BC;
		  /* 8221E2BCh */ case    6:  		/* bc 12, CR0_EQ, 68 */
		/* 8221E2BCh case    6:*/		if ( regs.CR[0].eq ) { return 0x8221E300;  }
		/* 8221E2BCh case    6:*/		return 0x8221E2C0;
		  /* 8221E2C0h */ case    7:  		/* lis R11, -32252 */
		/* 8221E2C0h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221E2C0h case    7:*/		return 0x8221E2C4;
		  /* 8221E2C4h */ case    8:  		/* mr R3, R31 */
		/* 8221E2C4h case    8:*/		regs.R3 = regs.R31;
		/* 8221E2C4h case    8:*/		return 0x8221E2C8;
		  /* 8221E2C8h */ case    9:  		/* addi R4, R11, -2484 */
		/* 8221E2C8h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFF64C);
		/* 8221E2C8h case    9:*/		return 0x8221E2CC;
		  /* 8221E2CCh */ case   10:  		/* bl -3852 */
		/* 8221E2CCh case   10:*/		regs.LR = 0x8221E2D0; return 0x8221D3C0;
		/* 8221E2CCh case   10:*/		return 0x8221E2D0;
		  /* 8221E2D0h */ case   11:  		/* li R5, 8192 */
		/* 8221E2D0h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x2000);
		/* 8221E2D0h case   11:*/		return 0x8221E2D4;
		  /* 8221E2D4h */ case   12:  		/* li R4, 0 */
		/* 8221E2D4h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8221E2D4h case   12:*/		return 0x8221E2D8;
		  /* 8221E2D8h */ case   13:  		/* addi R3, R1, 8368 */
		/* 8221E2D8h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x20B0);
		/* 8221E2D8h case   13:*/		return 0x8221E2DC;
		  /* 8221E2DCh */ case   14:  		/* bl -1626012 */
		/* 8221E2DCh case   14:*/		regs.LR = 0x8221E2E0; return 0x82091340;
		/* 8221E2DCh case   14:*/		return 0x8221E2E0;
		  /* 8221E2E0h */ case   15:  		/* stw R31, <#[R1 + 16560]> */
		/* 8221E2E0h case   15:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x000040B0) );
		/* 8221E2E0h case   15:*/		return 0x8221E2E4;
		  /* 8221E2E4h */ case   16:  		/* stw R28, <#[R1 + 8352]> */
		/* 8221E2E4h case   16:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x000020A0) );
		/* 8221E2E4h case   16:*/		return 0x8221E2E8;
		  /* 8221E2E8h */ case   17:  		/* li R6, 0 */
		/* 8221E2E8h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8221E2E8h case   17:*/		return 0x8221E2EC;
		  /* 8221E2ECh */ case   18:  		/* mr R5, R30 */
		/* 8221E2ECh case   18:*/		regs.R5 = regs.R30;
		/* 8221E2ECh case   18:*/		return 0x8221E2F0;
		  /* 8221E2F0h */ case   19:  		/* lwz R4, <#[R31 + 1624]> */
		/* 8221E2F0h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000658) );
		/* 8221E2F0h case   19:*/		return 0x8221E2F4;
		  /* 8221E2F4h */ case   20:  		/* addi R3, R1, 8352 */
		/* 8221E2F4h case   20:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x20A0);
		/* 8221E2F4h case   20:*/		return 0x8221E2F8;
		  /* 8221E2F8h */ case   21:  		/* bl -803360 */
		/* 8221E2F8h case   21:*/		regs.LR = 0x8221E2FC; return 0x8215A0D8;
		/* 8221E2F8h case   21:*/		return 0x8221E2FC;
		  /* 8221E2FCh */ case   22:  		/* stw R29, <#[R1 + 8352]> */
		/* 8221E2FCh case   22:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x000020A0) );
		/* 8221E2FCh case   22:*/		return 0x8221E300;
	}
	return 0x8221E300;
} // Block from 8221E2A4h-8221E300h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8221E300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E300);
		  /* 8221E300h */ case    0:  		/* lwz R4, <#[R31 + 1620]> */
		/* 8221E300h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000654) );
		/* 8221E300h case    0:*/		return 0x8221E304;
		  /* 8221E304h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 8221E304h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8221E304h case    1:*/		return 0x8221E308;
		  /* 8221E308h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 8221E308h case    2:*/		if ( regs.CR[6].eq ) { return 0x8221E31C;  }
		/* 8221E308h case    2:*/		return 0x8221E30C;
		  /* 8221E30Ch */ case    3:  		/* lwz R11, <#[R31 + 1436]> */
		/* 8221E30Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000059C) );
		/* 8221E30Ch case    3:*/		return 0x8221E310;
		  /* 8221E310h */ case    4:  		/* lwz R3, <#[R31 + 1444]> */
		/* 8221E310h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005A4) );
		/* 8221E310h case    4:*/		return 0x8221E314;
		  /* 8221E314h */ case    5:  		/* mtspr CTR, R11 */
		/* 8221E314h case    5:*/		regs.CTR = regs.R11;
		/* 8221E314h case    5:*/		return 0x8221E318;
		  /* 8221E318h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 8221E318h case    6:*/		if ( 1 ) { regs.LR = 0x8221E31C; return (uint32)regs.CTR; }
		/* 8221E318h case    6:*/		return 0x8221E31C;
	}
	return 0x8221E31C;
} // Block from 8221E300h-8221E31Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221E31Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E31C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E31C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E31C);
		  /* 8221E31Ch */ case    0:  		/* stw R26, <#[R31 + 1540]> */
		/* 8221E31Ch case    0:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000604) );
		/* 8221E31Ch case    0:*/		return 0x8221E320;
		  /* 8221E320h */ case    1:  		/* stw R26, <#[R31 + 1620]> */
		/* 8221E320h case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000654) );
		/* 8221E320h case    1:*/		return 0x8221E324;
		  /* 8221E324h */ case    2:  		/* lwz R4, <#[R31 + 1624]> */
		/* 8221E324h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000658) );
		/* 8221E324h case    2:*/		return 0x8221E328;
		  /* 8221E328h */ case    3:  		/* cmplwi CR6, R4, 0 */
		/* 8221E328h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8221E328h case    3:*/		return 0x8221E32C;
		  /* 8221E32Ch */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 8221E32Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x8221E340;  }
		/* 8221E32Ch case    4:*/		return 0x8221E330;
		  /* 8221E330h */ case    5:  		/* lwz R11, <#[R31 + 1436]> */
		/* 8221E330h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000059C) );
		/* 8221E330h case    5:*/		return 0x8221E334;
		  /* 8221E334h */ case    6:  		/* lwz R3, <#[R31 + 1444]> */
		/* 8221E334h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000005A4) );
		/* 8221E334h case    6:*/		return 0x8221E338;
		  /* 8221E338h */ case    7:  		/* mtspr CTR, R11 */
		/* 8221E338h case    7:*/		regs.CTR = regs.R11;
		/* 8221E338h case    7:*/		return 0x8221E33C;
		  /* 8221E33Ch */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 8221E33Ch case    8:*/		if ( 1 ) { regs.LR = 0x8221E340; return (uint32)regs.CTR; }
		/* 8221E33Ch case    8:*/		return 0x8221E340;
	}
	return 0x8221E340;
} // Block from 8221E31Ch-8221E340h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8221E340h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E340( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E340) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E340);
		  /* 8221E340h */ case    0:  		/* stw R26, <#[R31 + 1624]> */
		/* 8221E340h case    0:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000658) );
		/* 8221E340h case    0:*/		return 0x8221E344;
		  /* 8221E344h */ case    1:  		/* stw R26, <#[R31 + 1544]> */
		/* 8221E344h case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000608) );
		/* 8221E344h case    1:*/		return 0x8221E348;
		  /* 8221E348h */ case    2:  		/* lwz R27, <#[R24 + 1364]> */
		/* 8221E348h case    2:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R24 + 0x00000554) );
		/* 8221E348h case    2:*/		return 0x8221E34C;
		  /* 8221E34Ch */ case    3:  		/* cmpwi CR6, R27, 0 */
		/* 8221E34Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 8221E34Ch case    3:*/		return 0x8221E350;
		  /* 8221E350h */ case    4:  		/* bc 4, CR6_EQ, 572 */
		/* 8221E350h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8221E58C;  }
		/* 8221E350h case    4:*/		return 0x8221E354;
		  /* 8221E354h */ case    5:  		/* lbz R11, <#[R31 + 2025]> */
		/* 8221E354h case    5:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x000007E9) );
		/* 8221E354h case    5:*/		return 0x8221E358;
		  /* 8221E358h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 8221E358h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221E358h case    6:*/		return 0x8221E35C;
		  /* 8221E35Ch */ case    7:  		/* bc 12, CR0_EQ, 44 */
		/* 8221E35Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x8221E388;  }
		/* 8221E35Ch case    7:*/		return 0x8221E360;
		  /* 8221E360h */ case    8:  		/* lbz R10, <#[R31 + 2026]> */
		/* 8221E360h case    8:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EA) );
		/* 8221E360h case    8:*/		return 0x8221E364;
		  /* 8221E364h */ case    9:  		/* cmplwi CR0, R10, 0 */
		/* 8221E364h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221E364h case    9:*/		return 0x8221E368;
		  /* 8221E368h */ case   10:  		/* bc 4, CR0_EQ, 32 */
		/* 8221E368h case   10:*/		if ( !regs.CR[0].eq ) { return 0x8221E388;  }
		/* 8221E368h case   10:*/		return 0x8221E36C;
		  /* 8221E36Ch */ case   11:  		/* lbz R10, <#[R31 + 2027]> */
		/* 8221E36Ch case   11:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EB) );
		/* 8221E36Ch case   11:*/		return 0x8221E370;
		  /* 8221E370h */ case   12:  		/* cmplwi CR0, R10, 0 */
		/* 8221E370h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221E370h case   12:*/		return 0x8221E374;
		  /* 8221E374h */ case   13:  		/* bc 4, CR0_EQ, 20 */
		/* 8221E374h case   13:*/		if ( !regs.CR[0].eq ) { return 0x8221E388;  }
		/* 8221E374h case   13:*/		return 0x8221E378;
		  /* 8221E378h */ case   14:  		/* lbz R10, <#[R31 + 2028]> */
		/* 8221E378h case   14:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EC) );
		/* 8221E378h case   14:*/		return 0x8221E37C;
		  /* 8221E37Ch */ case   15:  		/* cmplwi CR0, R10, 0 */
		/* 8221E37Ch case   15:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221E37Ch case   15:*/		return 0x8221E380;
		  /* 8221E380h */ case   16:  		/* bc 4, CR0_EQ, 8 */
		/* 8221E380h case   16:*/		if ( !regs.CR[0].eq ) { return 0x8221E388;  }
		/* 8221E380h case   16:*/		return 0x8221E384;
		  /* 8221E384h */ case   17:  		/* li R26, 2 */
		/* 8221E384h case   17:*/		cpu::op::li<0>(regs,&regs.R26,0x2);
		/* 8221E384h case   17:*/		return 0x8221E388;
	}
	return 0x8221E388;
} // Block from 8221E340h-8221E388h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8221E388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E388);
		  /* 8221E388h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8221E388h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221E388h case    0:*/		return 0x8221E38C;
		  /* 8221E38Ch */ case    1:  		/* bc 4, CR6_EQ, 100 */
		/* 8221E38Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8221E3F0;  }
		/* 8221E38Ch case    1:*/		return 0x8221E390;
		  /* 8221E390h */ case    2:  		/* lbz R10, <#[R31 + 2026]> */
		/* 8221E390h case    2:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EA) );
		/* 8221E390h case    2:*/		return 0x8221E394;
		  /* 8221E394h */ case    3:  		/* cmplwi CR0, R10, 0 */
		/* 8221E394h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221E394h case    3:*/		return 0x8221E398;
		  /* 8221E398h */ case    4:  		/* bc 4, CR0_EQ, 32 */
		/* 8221E398h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8221E3B8;  }
		/* 8221E398h case    4:*/		return 0x8221E39C;
		  /* 8221E39Ch */ case    5:  		/* lbz R10, <#[R31 + 2027]> */
		/* 8221E39Ch case    5:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EB) );
		/* 8221E39Ch case    5:*/		return 0x8221E3A0;
		  /* 8221E3A0h */ case    6:  		/* cmplwi CR0, R10, 0 */
		/* 8221E3A0h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221E3A0h case    6:*/		return 0x8221E3A4;
		  /* 8221E3A4h */ case    7:  		/* bc 12, CR0_EQ, 20 */
		/* 8221E3A4h case    7:*/		if ( regs.CR[0].eq ) { return 0x8221E3B8;  }
		/* 8221E3A4h case    7:*/		return 0x8221E3A8;
		  /* 8221E3A8h */ case    8:  		/* lbz R10, <#[R31 + 2028]> */
		/* 8221E3A8h case    8:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EC) );
		/* 8221E3A8h case    8:*/		return 0x8221E3AC;
		  /* 8221E3ACh */ case    9:  		/* cmplwi CR0, R10, 0 */
		/* 8221E3ACh case    9:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221E3ACh case    9:*/		return 0x8221E3B0;
		  /* 8221E3B0h */ case   10:  		/* bc 4, CR0_EQ, 8 */
		/* 8221E3B0h case   10:*/		if ( !regs.CR[0].eq ) { return 0x8221E3B8;  }
		/* 8221E3B0h case   10:*/		return 0x8221E3B4;
		  /* 8221E3B4h */ case   11:  		/* li R26, 3 */
		/* 8221E3B4h case   11:*/		cpu::op::li<0>(regs,&regs.R26,0x3);
		/* 8221E3B4h case   11:*/		return 0x8221E3B8;
	}
	return 0x8221E3B8;
} // Block from 8221E388h-8221E3B8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8221E3B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E3B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E3B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E3B8);
		  /* 8221E3B8h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8221E3B8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221E3B8h case    0:*/		return 0x8221E3BC;
		  /* 8221E3BCh */ case    1:  		/* bc 4, CR6_EQ, 52 */
		/* 8221E3BCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8221E3F0;  }
		/* 8221E3BCh case    1:*/		return 0x8221E3C0;
		  /* 8221E3C0h */ case    2:  		/* lbz R10, <#[R31 + 2026]> */
		/* 8221E3C0h case    2:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EA) );
		/* 8221E3C0h case    2:*/		return 0x8221E3C4;
		  /* 8221E3C4h */ case    3:  		/* cmplwi CR0, R10, 0 */
		/* 8221E3C4h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221E3C4h case    3:*/		return 0x8221E3C8;
		  /* 8221E3C8h */ case    4:  		/* bc 12, CR0_EQ, 32 */
		/* 8221E3C8h case    4:*/		if ( regs.CR[0].eq ) { return 0x8221E3E8;  }
		/* 8221E3C8h case    4:*/		return 0x8221E3CC;
		  /* 8221E3CCh */ case    5:  		/* lbz R10, <#[R31 + 2027]> */
		/* 8221E3CCh case    5:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EB) );
		/* 8221E3CCh case    5:*/		return 0x8221E3D0;
		  /* 8221E3D0h */ case    6:  		/* cmplwi CR0, R10, 0 */
		/* 8221E3D0h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221E3D0h case    6:*/		return 0x8221E3D4;
		  /* 8221E3D4h */ case    7:  		/* bc 4, CR0_EQ, 20 */
		/* 8221E3D4h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8221E3E8;  }
		/* 8221E3D4h case    7:*/		return 0x8221E3D8;
		  /* 8221E3D8h */ case    8:  		/* lbz R10, <#[R31 + 2028]> */
		/* 8221E3D8h case    8:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EC) );
		/* 8221E3D8h case    8:*/		return 0x8221E3DC;
		  /* 8221E3DCh */ case    9:  		/* cmplwi CR0, R10, 0 */
		/* 8221E3DCh case    9:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221E3DCh case    9:*/		return 0x8221E3E0;
		  /* 8221E3E0h */ case   10:  		/* bc 4, CR0_EQ, 8 */
		/* 8221E3E0h case   10:*/		if ( !regs.CR[0].eq ) { return 0x8221E3E8;  }
		/* 8221E3E0h case   10:*/		return 0x8221E3E4;
		  /* 8221E3E4h */ case   11:  		/* li R26, 4 */
		/* 8221E3E4h case   11:*/		cpu::op::li<0>(regs,&regs.R26,0x4);
		/* 8221E3E4h case   11:*/		return 0x8221E3E8;
	}
	return 0x8221E3E8;
} // Block from 8221E3B8h-8221E3E8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8221E3E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E3E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E3E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E3E8);
		  /* 8221E3E8h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8221E3E8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221E3E8h case    0:*/		return 0x8221E3EC;
		  /* 8221E3ECh */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 8221E3ECh case    1:*/		if ( regs.CR[6].eq ) { return 0x8221E420;  }
		/* 8221E3ECh case    1:*/		return 0x8221E3F0;
	}
	return 0x8221E3F0;
} // Block from 8221E3E8h-8221E3F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221E3F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E3F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E3F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E3F0);
		  /* 8221E3F0h */ case    0:  		/* lbz R10, <#[R31 + 2026]> */
		/* 8221E3F0h case    0:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EA) );
		/* 8221E3F0h case    0:*/		return 0x8221E3F4;
		  /* 8221E3F4h */ case    1:  		/* cmplwi CR0, R10, 0 */
		/* 8221E3F4h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221E3F4h case    1:*/		return 0x8221E3F8;
		  /* 8221E3F8h */ case    2:  		/* bc 12, CR0_EQ, 32 */
		/* 8221E3F8h case    2:*/		if ( regs.CR[0].eq ) { return 0x8221E418;  }
		/* 8221E3F8h case    2:*/		return 0x8221E3FC;
		  /* 8221E3FCh */ case    3:  		/* lbz R10, <#[R31 + 2027]> */
		/* 8221E3FCh case    3:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EB) );
		/* 8221E3FCh case    3:*/		return 0x8221E400;
		  /* 8221E400h */ case    4:  		/* cmplwi CR0, R10, 0 */
		/* 8221E400h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221E400h case    4:*/		return 0x8221E404;
		  /* 8221E404h */ case    5:  		/* bc 4, CR0_EQ, 20 */
		/* 8221E404h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8221E418;  }
		/* 8221E404h case    5:*/		return 0x8221E408;
		  /* 8221E408h */ case    6:  		/* lbz R10, <#[R31 + 2028]> */
		/* 8221E408h case    6:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EC) );
		/* 8221E408h case    6:*/		return 0x8221E40C;
		  /* 8221E40Ch */ case    7:  		/* cmplwi CR0, R10, 0 */
		/* 8221E40Ch case    7:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221E40Ch case    7:*/		return 0x8221E410;
		  /* 8221E410h */ case    8:  		/* bc 4, CR0_EQ, 8 */
		/* 8221E410h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8221E418;  }
		/* 8221E410h case    8:*/		return 0x8221E414;
		  /* 8221E414h */ case    9:  		/* li R26, 5 */
		/* 8221E414h case    9:*/		cpu::op::li<0>(regs,&regs.R26,0x5);
		/* 8221E414h case    9:*/		return 0x8221E418;
	}
	return 0x8221E418;
} // Block from 8221E3F0h-8221E418h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8221E418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E418);
		  /* 8221E418h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8221E418h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221E418h case    0:*/		return 0x8221E41C;
		  /* 8221E41Ch */ case    1:  		/* bc 4, CR6_EQ, 92 */
		/* 8221E41Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8221E478;  }
		/* 8221E41Ch case    1:*/		return 0x8221E420;
	}
	return 0x8221E420;
} // Block from 8221E418h-8221E420h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221E420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E420);
		  /* 8221E420h */ case    0:  		/* lbz R10, <#[R31 + 2026]> */
		/* 8221E420h case    0:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EA) );
		/* 8221E420h case    0:*/		return 0x8221E424;
		  /* 8221E424h */ case    1:  		/* cmplwi CR0, R10, 0 */
		/* 8221E424h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221E424h case    1:*/		return 0x8221E428;
		  /* 8221E428h */ case    2:  		/* bc 12, CR0_EQ, 32 */
		/* 8221E428h case    2:*/		if ( regs.CR[0].eq ) { return 0x8221E448;  }
		/* 8221E428h case    2:*/		return 0x8221E42C;
		  /* 8221E42Ch */ case    3:  		/* lbz R10, <#[R31 + 2027]> */
		/* 8221E42Ch case    3:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EB) );
		/* 8221E42Ch case    3:*/		return 0x8221E430;
		  /* 8221E430h */ case    4:  		/* cmplwi CR0, R10, 0 */
		/* 8221E430h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221E430h case    4:*/		return 0x8221E434;
		  /* 8221E434h */ case    5:  		/* bc 12, CR0_EQ, 20 */
		/* 8221E434h case    5:*/		if ( regs.CR[0].eq ) { return 0x8221E448;  }
		/* 8221E434h case    5:*/		return 0x8221E438;
		  /* 8221E438h */ case    6:  		/* lbz R10, <#[R31 + 2028]> */
		/* 8221E438h case    6:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x000007EC) );
		/* 8221E438h case    6:*/		return 0x8221E43C;
		  /* 8221E43Ch */ case    7:  		/* cmplwi CR0, R10, 0 */
		/* 8221E43Ch case    7:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8221E43Ch case    7:*/		return 0x8221E440;
		  /* 8221E440h */ case    8:  		/* bc 4, CR0_EQ, 8 */
		/* 8221E440h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8221E448;  }
		/* 8221E440h case    8:*/		return 0x8221E444;
		  /* 8221E444h */ case    9:  		/* li R26, 6 */
		/* 8221E444h case    9:*/		cpu::op::li<0>(regs,&regs.R26,0x6);
		/* 8221E444h case    9:*/		return 0x8221E448;
	}
	return 0x8221E448;
} // Block from 8221E420h-8221E448h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8221E448h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E448);
		  /* 8221E448h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8221E448h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221E448h case    0:*/		return 0x8221E44C;
		  /* 8221E44Ch */ case    1:  		/* bc 4, CR6_EQ, 44 */
		/* 8221E44Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8221E478;  }
		/* 8221E44Ch case    1:*/		return 0x8221E450;
		  /* 8221E450h */ case    2:  		/* lbz R11, <#[R31 + 2026]> */
		/* 8221E450h case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x000007EA) );
		/* 8221E450h case    2:*/		return 0x8221E454;
		  /* 8221E454h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 8221E454h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221E454h case    3:*/		return 0x8221E458;
		  /* 8221E458h */ case    4:  		/* bc 4, CR0_EQ, 32 */
		/* 8221E458h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8221E478;  }
		/* 8221E458h case    4:*/		return 0x8221E45C;
		  /* 8221E45Ch */ case    5:  		/* lbz R11, <#[R31 + 2027]> */
		/* 8221E45Ch case    5:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x000007EB) );
		/* 8221E45Ch case    5:*/		return 0x8221E460;
		  /* 8221E460h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 8221E460h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221E460h case    6:*/		return 0x8221E464;
		  /* 8221E464h */ case    7:  		/* bc 4, CR0_EQ, 20 */
		/* 8221E464h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8221E478;  }
		/* 8221E464h case    7:*/		return 0x8221E468;
		  /* 8221E468h */ case    8:  		/* lbz R11, <#[R31 + 2028]> */
		/* 8221E468h case    8:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x000007EC) );
		/* 8221E468h case    8:*/		return 0x8221E46C;
		  /* 8221E46Ch */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 8221E46Ch case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221E46Ch case    9:*/		return 0x8221E470;
		  /* 8221E470h */ case   10:  		/* bc 12, CR0_EQ, 8 */
		/* 8221E470h case   10:*/		if ( regs.CR[0].eq ) { return 0x8221E478;  }
		/* 8221E470h case   10:*/		return 0x8221E474;
		  /* 8221E474h */ case   11:  		/* li R26, 7 */
		/* 8221E474h case   11:*/		cpu::op::li<0>(regs,&regs.R26,0x7);
		/* 8221E474h case   11:*/		return 0x8221E478;
	}
	return 0x8221E478;
} // Block from 8221E448h-8221E478h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8221E478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E478);
		  /* 8221E478h */ case    0:  		/* lwz R11, <#[R31 + 1780]> */
		/* 8221E478h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000006F4) );
		/* 8221E478h case    0:*/		return 0x8221E47C;
		  /* 8221E47Ch */ case    1:  		/* lwz R10, <#[R31 + 1784]> */
		/* 8221E47Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000006F8) );
		/* 8221E47Ch case    1:*/		return 0x8221E480;
		  /* 8221E480h */ case    2:  		/* cmpw CR6, R11, R10 */
		/* 8221E480h case    2:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 8221E480h case    2:*/		return 0x8221E484;
		  /* 8221E484h */ case    3:  		/* addi R11, R11, -1 */
		/* 8221E484h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8221E484h case    3:*/		return 0x8221E488;
		  /* 8221E488h */ case    4:  		/* bc 12, CR6_GT, 8 */
		/* 8221E488h case    4:*/		if ( regs.CR[6].gt ) { return 0x8221E490;  }
		/* 8221E488h case    4:*/		return 0x8221E48C;
		  /* 8221E48Ch */ case    5:  		/* addi R11, R10, -1 */
		/* 8221E48Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFFFFF);
		/* 8221E48Ch case    5:*/		return 0x8221E490;
	}
	return 0x8221E490;
} // Block from 8221E478h-8221E490h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221E490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E490);
		  /* 8221E490h */ case    0:  		/* rlwinm R10, R11, 1, 31, 31 */
		/* 8221E490h case    0:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R10,regs.R11);
		/* 8221E490h case    0:*/		return 0x8221E494;
		  /* 8221E494h */ case    1:  		/* lwz R9, <#[R31 + 1860]> */
		/* 8221E494h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000744) );
		/* 8221E494h case    1:*/		return 0x8221E498;
		  /* 8221E498h */ case    2:  		/* lbz R8, <#[R31 + 2024]> */
		/* 8221E498h case    2:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R31 + 0x000007E8) );
		/* 8221E498h case    2:*/		return 0x8221E49C;
		  /* 8221E49Ch */ case    3:  		/* addi R10, R10, -1 */
		/* 8221E49Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8221E49Ch case    3:*/		return 0x8221E4A0;
		  /* 8221E4A0h */ case    4:  		/* lwz R30, <#[R31 + 1940]> */
		/* 8221E4A0h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000794) );
		/* 8221E4A0h case    4:*/		return 0x8221E4A4;
		  /* 8221E4A4h */ case    5:  		/* rlwinm R29, R9, 1, 0, 30 */
		/* 8221E4A4h case    5:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R29,regs.R9);
		/* 8221E4A4h case    5:*/		return 0x8221E4A8;
		  /* 8221E4A8h */ case    6:  		/* and R28, R10, R11 */
		/* 8221E4A8h case    6:*/		cpu::op::and<0>(regs,&regs.R28,regs.R10,regs.R11);
		/* 8221E4A8h case    6:*/		return 0x8221E4AC;
		  /* 8221E4ACh */ case    7:  		/* cmplwi CR0, R8, 0 */
		/* 8221E4ACh case    7:*/		cpu::op::cmplwi<0>(regs,regs.R8,0x00000000);
		/* 8221E4ACh case    7:*/		return 0x8221E4B0;
		  /* 8221E4B0h */ case    8:  		/* bc 12, CR0_EQ, 8 */
		/* 8221E4B0h case    8:*/		if ( regs.CR[0].eq ) { return 0x8221E4B8;  }
		/* 8221E4B0h case    8:*/		return 0x8221E4B4;
		  /* 8221E4B4h */ case    9:  		/* ori R29, R29, 1 */
		/* 8221E4B4h case    9:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8221E4B4h case    9:*/		return 0x8221E4B8;
	}
	return 0x8221E4B8;
} // Block from 8221E490h-8221E4B8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8221E4B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E4B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E4B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E4B8);
		  /* 8221E4B8h */ case    0:  		/* lbz R11, <#[R1 + 112]> */
		/* 8221E4B8h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 8221E4B8h case    0:*/		return 0x8221E4BC;
		  /* 8221E4BCh */ case    1:  		/* mr R3, R25 */
		/* 8221E4BCh case    1:*/		regs.R3 = regs.R25;
		/* 8221E4BCh case    1:*/		return 0x8221E4C0;
		  /* 8221E4C0h */ case    2:  		/* lwz R5, <#[R31 + 1700]> */
		/* 8221E4C0h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x000006A4) );
		/* 8221E4C0h case    2:*/		return 0x8221E4C4;
		  /* 8221E4C4h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 8221E4C4h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8221E4C4h case    3:*/		return 0x8221E4C8;
		  /* 8221E4C8h */ case    4:  		/* bc 12, CR0_EQ, 72 */
		/* 8221E4C8h case    4:*/		if ( regs.CR[0].eq ) { return 0x8221E510;  }
		/* 8221E4C8h case    4:*/		return 0x8221E4CC;
		  /* 8221E4CCh */ case    5:  		/* li R4, 1978 */
		/* 8221E4CCh case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x7BA);
		/* 8221E4CCh case    5:*/		return 0x8221E4D0;
		  /* 8221E4D0h */ case    6:  		/* bl -789200 */
		/* 8221E4D0h case    6:*/		regs.LR = 0x8221E4D4; return 0x8215DA00;
		/* 8221E4D0h case    6:*/		return 0x8221E4D4;
		  /* 8221E4D4h */ case    7:  		/* mr R5, R30 */
		/* 8221E4D4h case    7:*/		regs.R5 = regs.R30;
		/* 8221E4D4h case    7:*/		return 0x8221E4D8;
		  /* 8221E4D8h */ case    8:  		/* li R4, 1980 */
		/* 8221E4D8h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x7BC);
		/* 8221E4D8h case    8:*/		return 0x8221E4DC;
		  /* 8221E4DCh */ case    9:  		/* mr R3, R25 */
		/* 8221E4DCh case    9:*/		regs.R3 = regs.R25;
		/* 8221E4DCh case    9:*/		return 0x8221E4E0;
		  /* 8221E4E0h */ case   10:  		/* bl -789216 */
		/* 8221E4E0h case   10:*/		regs.LR = 0x8221E4E4; return 0x8215DA00;
		/* 8221E4E0h case   10:*/		return 0x8221E4E4;
		  /* 8221E4E4h */ case   11:  		/* mr R5, R28 */
		/* 8221E4E4h case   11:*/		regs.R5 = regs.R28;
		/* 8221E4E4h case   11:*/		return 0x8221E4E8;
		  /* 8221E4E8h */ case   12:  		/* li R4, 1984 */
		/* 8221E4E8h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x7C0);
		/* 8221E4E8h case   12:*/		return 0x8221E4EC;
		  /* 8221E4ECh */ case   13:  		/* mr R3, R25 */
		/* 8221E4ECh case   13:*/		regs.R3 = regs.R25;
		/* 8221E4ECh case   13:*/		return 0x8221E4F0;
		  /* 8221E4F0h */ case   14:  		/* bl -789232 */
		/* 8221E4F0h case   14:*/		regs.LR = 0x8221E4F4; return 0x8215DA00;
		/* 8221E4F0h case   14:*/		return 0x8221E4F4;
		  /* 8221E4F4h */ case   15:  		/* mr R5, R26 */
		/* 8221E4F4h case   15:*/		regs.R5 = regs.R26;
		/* 8221E4F4h case   15:*/		return 0x8221E4F8;
		  /* 8221E4F8h */ case   16:  		/* li R4, 1985 */
		/* 8221E4F8h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x7C1);
		/* 8221E4F8h case   16:*/		return 0x8221E4FC;
		  /* 8221E4FCh */ case   17:  		/* mr R3, R25 */
		/* 8221E4FCh case   17:*/		regs.R3 = regs.R25;
		/* 8221E4FCh case   17:*/		return 0x8221E500;
		  /* 8221E500h */ case   18:  		/* bl -789248 */
		/* 8221E500h case   18:*/		regs.LR = 0x8221E504; return 0x8215DA00;
		/* 8221E500h case   18:*/		return 0x8221E504;
		  /* 8221E504h */ case   19:  		/* li R5, 0 */
		/* 8221E504h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8221E504h case   19:*/		return 0x8221E508;
		  /* 8221E508h */ case   20:  		/* li R4, 1987 */
		/* 8221E508h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x7C3);
		/* 8221E508h case   20:*/		return 0x8221E50C;
		  /* 8221E50Ch */ case   21:  		/* b 100 */
		/* 8221E50Ch case   21:*/		return 0x8221E570;
		/* 8221E50Ch case   21:*/		return 0x8221E510;
	}
	return 0x8221E510;
} // Block from 8221E4B8h-8221E510h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8221E510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E510);
		  /* 8221E510h */ case    0:  		/* li R4, 1979 */
		/* 8221E510h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x7BB);
		/* 8221E510h case    0:*/		return 0x8221E514;
		  /* 8221E514h */ case    1:  		/* bl -789268 */
		/* 8221E514h case    1:*/		regs.LR = 0x8221E518; return 0x8215DA00;
		/* 8221E514h case    1:*/		return 0x8221E518;
	}
	return 0x8221E518;
} // Block from 8221E510h-8221E518h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221E518h
// Function '?Make@SSMHandle@XGRAPHICS@@SAPAV12@PAU_CS_COMPILED_SHADER@2@PAVCompiler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E518);
		  /* 8221E518h */ case    0:  		/* mr R5, R30 */
		/* 8221E518h case    0:*/		regs.R5 = regs.R30;
		/* 8221E518h case    0:*/		return 0x8221E51C;
		  /* 8221E51Ch */ case    1:  		/* li R4, 1981 */
		/* 8221E51Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x7BD);
		/* 8221E51Ch case    1:*/		return 0x8221E520;
		  /* 8221E520h */ case    2:  		/* mr R3, R25 */
		/* 8221E520h case    2:*/		regs.R3 = regs.R25;
		/* 8221E520h case    2:*/		return 0x8221E524;
		  /* 8221E524h */ case    3:  		/* bl -789284 */
		/* 8221E524h case    3:*/		regs.LR = 0x8221E528; return 0x8215DA00;
		/* 8221E524h case    3:*/		return 0x8221E528;
		  /* 8221E528h */ case    4:  		/* li R4, 1982 */
		/* 8221E528h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x7BE);
		/* 8221E528h case    4:*/		return 0x8221E52C;
		  /* 8221E52Ch */ case    5:  		/* mr R3, R25 */
		/* 8221E52Ch case    5:*/		regs.R3 = regs.R25;
		/* 8221E52Ch case    5:*/		return 0x8221E530;
		  /* 8221E530h */ case    6:  		/* lbz R5, <#[R31 + 2029]> */
		/* 8221E530h case    6:*/		cpu::mem::load8z( regs, &regs.R5, (uint32)(regs.R31 + 0x000007ED) );
		/* 8221E530h case    6:*/		return 0x8221E534;
		  /* 8221E534h */ case    7:  		/* bl -789300 */
		/* 8221E534h case    7:*/		regs.LR = 0x8221E538; return 0x8215DA00;
		/* 8221E534h case    7:*/		return 0x8221E538;
		  /* 8221E538h */ case    8:  		/* li R5, 0 */
		/* 8221E538h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8221E538h case    8:*/		return 0x8221E53C;
		  /* 8221E53Ch */ case    9:  		/* li R4, 1983 */
		/* 8221E53Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x7BF);
		/* 8221E53Ch case    9:*/		return 0x8221E540;
		  /* 8221E540h */ case   10:  		/* mr R3, R25 */
		/* 8221E540h case   10:*/		regs.R3 = regs.R25;
		/* 8221E540h case   10:*/		return 0x8221E544;
		  /* 8221E544h */ case   11:  		/* bl -789316 */
		/* 8221E544h case   11:*/		regs.LR = 0x8221E548; return 0x8215DA00;
		/* 8221E544h case   11:*/		return 0x8221E548;
		  /* 8221E548h */ case   12:  		/* mr R5, R29 */
		/* 8221E548h case   12:*/		regs.R5 = regs.R29;
		/* 8221E548h case   12:*/		return 0x8221E54C;
		  /* 8221E54Ch */ case   13:  		/* li R4, 1986 */
		/* 8221E54Ch case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x7C2);
		/* 8221E54Ch case   13:*/		return 0x8221E550;
		  /* 8221E550h */ case   14:  		/* mr R3, R25 */
		/* 8221E550h case   14:*/		regs.R3 = regs.R25;
		/* 8221E550h case   14:*/		return 0x8221E554;
		  /* 8221E554h */ case   15:  		/* bl -789332 */
		/* 8221E554h case   15:*/		regs.LR = 0x8221E558; return 0x8215DA00;
		/* 8221E554h case   15:*/		return 0x8221E558;
		  /* 8221E558h */ case   16:  		/* li R4, 1991 */
		/* 8221E558h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x7C7);
		/* 8221E558h case   16:*/		return 0x8221E55C;
		  /* 8221E55Ch */ case   17:  		/* mr R3, R25 */
		/* 8221E55Ch case   17:*/		regs.R3 = regs.R25;
		/* 8221E55Ch case   17:*/		return 0x8221E560;
		  /* 8221E560h */ case   18:  		/* lwz R5, <#[R31 + 2032]> */
		/* 8221E560h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x000007F0) );
		/* 8221E560h case   18:*/		return 0x8221E564;
		  /* 8221E564h */ case   19:  		/* bl -789348 */
		/* 8221E564h case   19:*/		regs.LR = 0x8221E568; return 0x8215DA00;
		/* 8221E564h case   19:*/		return 0x8221E568;
		  /* 8221E568h */ case   20:  		/* lbz R5, <#[R31 + 2030]> */
		/* 8221E568h case   20:*/		cpu::mem::load8z( regs, &regs.R5, (uint32)(regs.R31 + 0x000007EE) );
		/* 8221E568h case   20:*/		return 0x8221E56C;
		  /* 8221E56Ch */ case   21:  		/* li R4, 1989 */
		/* 8221E56Ch case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x7C5);
		/* 8221E56Ch case   21:*/		return 0x8221E570;
	}
	return 0x8221E570;
} // Block from 8221E518h-8221E570h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8221E570h
// Function '?CompileShaderPair@Compiler@XGRAPHICS@@QAAHPAU_CS_COMPILED_SHADER@2@0PAE1PAU_ABSTRACT_STATE@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E570);
		  /* 8221E570h */ case    0:  		/* mr R3, R25 */
		/* 8221E570h case    0:*/		regs.R3 = regs.R25;
		/* 8221E570h case    0:*/		return 0x8221E574;
		  /* 8221E574h */ case    1:  		/* bl -789364 */
		/* 8221E574h case    1:*/		regs.LR = 0x8221E578; return 0x8215DA00;
		/* 8221E574h case    1:*/		return 0x8221E578;
		  /* 8221E578h */ case    2:  		/* lis R11, -32256 */
		/* 8221E578h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8221E578h case    2:*/		return 0x8221E57C;
		  /* 8221E57Ch */ case    3:  		/* mr R3, R31 */
		/* 8221E57Ch case    3:*/		regs.R3 = regs.R31;
		/* 8221E57Ch case    3:*/		return 0x8221E580;
		  /* 8221E580h */ case    4:  		/* addi R4, R11, 17768 */
		/* 8221E580h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4568);
		/* 8221E580h case    4:*/		return 0x8221E584;
		  /* 8221E584h */ case    5:  		/* bl -4548 */
		/* 8221E584h case    5:*/		regs.LR = 0x8221E588; return 0x8221D3C0;
		/* 8221E584h case    5:*/		return 0x8221E588;
		  /* 8221E588h */ case    6:  		/* bl -5536 */
		/* 8221E588h case    6:*/		regs.LR = 0x8221E58C; return 0x8221CFE8;
		/* 8221E588h case    6:*/		return 0x8221E58C;
	}
	return 0x8221E58C;
} // Block from 8221E570h-8221E58Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221E58Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E58C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E58C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E58C);
		  /* 8221E58Ch */ case    0:  		/* li R4, 0 */
		/* 8221E58Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8221E58Ch case    0:*/		return 0x8221E590;
		  /* 8221E590h */ case    1:  		/* mr R3, R24 */
		/* 8221E590h case    1:*/		regs.R3 = regs.R24;
		/* 8221E590h case    1:*/		return 0x8221E594;
		  /* 8221E594h */ case    2:  		/* bl -6348 */
		/* 8221E594h case    2:*/		regs.LR = 0x8221E598; return 0x8221CCC8;
		/* 8221E594h case    2:*/		return 0x8221E598;
		  /* 8221E598h */ case    3:  		/* mr R3, R27 */
		/* 8221E598h case    3:*/		regs.R3 = regs.R27;
		/* 8221E598h case    3:*/		return 0x8221E59C;
		  /* 8221E59Ch */ case    4:  		/* addi R1, R1, 16640 */
		/* 8221E59Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x4100);
		/* 8221E59Ch case    4:*/		return 0x8221E5A0;
		  /* 8221E5A0h */ case    5:  		/* b -1626888 */
		/* 8221E5A0h case    5:*/		return 0x82091298;
		/* 8221E5A0h case    5:*/		return 0x8221E5A4;
		  /* 8221E5A4h */ case    6:  		/* nop */
		/* 8221E5A4h case    6:*/		cpu::op::nop();
		/* 8221E5A4h case    6:*/		return 0x8221E5A8;
	}
	return 0x8221E5A8;
} // Block from 8221E58Ch-8221E5A8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221E5A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E5A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E5A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E5A8);
		  /* 8221E5A8h */ case    0:  		/* mfspr R12, LR */
		/* 8221E5A8h case    0:*/		regs.R12 = regs.LR;
		/* 8221E5A8h case    0:*/		return 0x8221E5AC;
		  /* 8221E5ACh */ case    1:  		/* bl -1626996 */
		/* 8221E5ACh case    1:*/		regs.LR = 0x8221E5B0; return 0x82091238;
		/* 8221E5ACh case    1:*/		return 0x8221E5B0;
		  /* 8221E5B0h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 8221E5B0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 8221E5B0h case    2:*/		return 0x8221E5B4;
		  /* 8221E5B4h */ case    3:  		/* lwz R11, <#[R3 + 24]> */
		/* 8221E5B4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 8221E5B4h case    3:*/		return 0x8221E5B8;
		  /* 8221E5B8h */ case    4:  		/* li R22, 16 */
		/* 8221E5B8h case    4:*/		cpu::op::li<0>(regs,&regs.R22,0x10);
		/* 8221E5B8h case    4:*/		return 0x8221E5BC;
		  /* 8221E5BCh */ case    5:  		/* lwz R10, <#[R3 + 40]> */
		/* 8221E5BCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000028) );
		/* 8221E5BCh case    5:*/		return 0x8221E5C0;
		  /* 8221E5C0h */ case    6:  		/* lis R9, -32253 */
		/* 8221E5C0h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8221E5C0h case    6:*/		return 0x8221E5C4;
		  /* 8221E5C4h */ case    7:  		/* lwz R27, <#[R3 + 28]> */
		/* 8221E5C4h case    7:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R3 + 0x0000001C) );
		/* 8221E5C4h case    7:*/		return 0x8221E5C8;
		  /* 8221E5C8h */ case    8:  		/* addi R30, R11, 8 */
		/* 8221E5C8h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x8);
		/* 8221E5C8h case    8:*/		return 0x8221E5CC;
		  /* 8221E5CCh */ case    9:  		/* lwz R29, <#[R3 + 32]> */
		/* 8221E5CCh case    9:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x00000020) );
		/* 8221E5CCh case    9:*/		return 0x8221E5D0;
		  /* 8221E5D0h */ case   10:  		/* lis R8, -32252 */
		/* 8221E5D0h case   10:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8204);
		/* 8221E5D0h case   10:*/		return 0x8221E5D4;
		  /* 8221E5D4h */ case   11:  		/* mr R31, R3 */
		/* 8221E5D4h case   11:*/		regs.R31 = regs.R3;
		/* 8221E5D4h case   11:*/		return 0x8221E5D8;
		  /* 8221E5D8h */ case   12:  		/* stw R22, <#[R11]> */
		/* 8221E5D8h case   12:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R11 + 0x00000000) );
		/* 8221E5D8h case   12:*/		return 0x8221E5DC;
		  /* 8221E5DCh */ case   13:  		/* addi R28, R10, 8 */
		/* 8221E5DCh case   13:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0x8);
		/* 8221E5DCh case   13:*/		return 0x8221E5E0;
		  /* 8221E5E0h */ case   14:  		/* lwz R11, <#[R3 + 24]> */
		/* 8221E5E0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 8221E5E0h case   14:*/		return 0x8221E5E4;
		  /* 8221E5E4h */ case   15:  		/* addi R25, R9, 27460 */
		/* 8221E5E4h case   15:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R9,0x6B44);
		/* 8221E5E4h case   15:*/		return 0x8221E5E8;
		  /* 8221E5E8h */ case   16:  		/* addi R24, R8, -1768 */
		/* 8221E5E8h case   16:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R8,0xFFFFF918);
		/* 8221E5E8h case   16:*/		return 0x8221E5EC;
		  /* 8221E5ECh */ case   17:  		/* lwz R11, <#[R11]> */
		/* 8221E5ECh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8221E5ECh case   17:*/		return 0x8221E5F0;
		  /* 8221E5F0h */ case   18:  		/* rlwinm R11, R11, 0, 0, 28 */
		/* 8221E5F0h case   18:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R11,regs.R11);
		/* 8221E5F0h case   18:*/		return 0x8221E5F4;
		  /* 8221E5F4h */ case   19:  		/* cmplwi CR6, R11, 128 */
		/* 8221E5F4h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 8221E5F4h case   19:*/		return 0x8221E5F8;
		  /* 8221E5F8h */ case   20:  		/* bc 12, CR6_LT, 32 */
		/* 8221E5F8h case   20:*/		if ( regs.CR[6].lt ) { return 0x8221E618;  }
		/* 8221E5F8h case   20:*/		return 0x8221E5FC;
		  /* 8221E5FCh */ case   21:  		/* lis R11, -32252 */
		/* 8221E5FCh case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221E5FCh case   21:*/		return 0x8221E600;
		  /* 8221E600h */ case   22:  		/* mr R6, R24 */
		/* 8221E600h case   22:*/		regs.R6 = regs.R24;
		/* 8221E600h case   22:*/		return 0x8221E604;
		  /* 8221E604h */ case   23:  		/* addi R5, R11, -1816 */
		/* 8221E604h case   23:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFF8E8);
		/* 8221E604h case   23:*/		return 0x8221E608;
		  /* 8221E608h */ case   24:  		/* mr R4, R25 */
		/* 8221E608h case   24:*/		regs.R4 = regs.R25;
		/* 8221E608h case   24:*/		return 0x8221E60C;
		  /* 8221E60Ch */ case   25:  		/* li R7, 490 */
		/* 8221E60Ch case   25:*/		cpu::op::li<0>(regs,&regs.R7,0x1EA);
		/* 8221E60Ch case   25:*/		return 0x8221E610;
		  /* 8221E610h */ case   26:  		/* li R3, 0 */
		/* 8221E610h case   26:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221E610h case   26:*/		return 0x8221E614;
		  /* 8221E614h */ case   27:  		/* bl -813580 */
		/* 8221E614h case   27:*/		regs.LR = 0x8221E618; return 0x82157C08;
		/* 8221E614h case   27:*/		return 0x8221E618;
	}
	return 0x8221E618;
} // Block from 8221E5A8h-8221E618h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8221E618h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E618);
		  /* 8221E618h */ case    0:  		/* lwz R9, <#[R31 + 24]> */
		/* 8221E618h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000018) );
		/* 8221E618h case    0:*/		return 0x8221E61C;
		  /* 8221E61Ch */ case    1:  		/* li R10, 3 */
		/* 8221E61Ch case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 8221E61Ch case    1:*/		return 0x8221E620;
		  /* 8221E620h */ case    2:  		/* lis R8, 8192 */
		/* 8221E620h case    2:*/		cpu::op::lis<0>(regs,&regs.R8,0x2000);
		/* 8221E620h case    2:*/		return 0x8221E624;
		  /* 8221E624h */ case    3:  		/* mr R7, R10 */
		/* 8221E624h case    3:*/		regs.R7 = regs.R10;
		/* 8221E624h case    3:*/		return 0x8221E628;
		  /* 8221E628h */ case    4:  		/* mr R6, R10 */
		/* 8221E628h case    4:*/		regs.R6 = regs.R10;
		/* 8221E628h case    4:*/		return 0x8221E62C;
		  /* 8221E62Ch */ case    5:  		/* mr R5, R10 */
		/* 8221E62Ch case    5:*/		regs.R5 = regs.R10;
		/* 8221E62Ch case    5:*/		return 0x8221E630;
		  /* 8221E630h */ case    6:  		/* lwz R11, <#[R9]> */
		/* 8221E630h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 8221E630h case    6:*/		return 0x8221E634;
		  /* 8221E634h */ case    7:  		/* li R23, 32 */
		/* 8221E634h case    7:*/		cpu::op::li<0>(regs,&regs.R23,0x20);
		/* 8221E634h case    7:*/		return 0x8221E638;
		  /* 8221E638h */ case    8:  		/* li R26, 0 */
		/* 8221E638h case    8:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 8221E638h case    8:*/		return 0x8221E63C;
		  /* 8221E63Ch */ case    9:  		/* addi R11, R11, -1 */
		/* 8221E63Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8221E63Ch case    9:*/		return 0x8221E640;
		  /* 8221E640h */ case   10:  		/* ori R8, R8, 8192 */
		/* 8221E640h case   10:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x2000);
		/* 8221E640h case   10:*/		return 0x8221E644;
		  /* 8221E644h */ case   11:  		/* rlwinm R11, R11, 29, 28, 31 */
		/* 8221E644h case   11:*/		cpu::op::rlwinm<0,29,28,31>(regs,&regs.R11,regs.R11);
		/* 8221E644h case   11:*/		return 0x8221E648;
		  /* 8221E648h */ case   12:  		/* li R4, 5 */
		/* 8221E648h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x5);
		/* 8221E648h case   12:*/		return 0x8221E64C;
		  /* 8221E64Ch */ case   13:  		/* stw R11, <#[R9 + 4]> */
		/* 8221E64Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 8221E64Ch case   13:*/		return 0x8221E650;
		  /* 8221E650h */ case   14:  		/* lwz R3, <#[R30 + 8]> */
		/* 8221E650h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 8221E650h case   14:*/		return 0x8221E654;
		  /* 8221E654h */ case   15:  		/* lwz R20, <#[R30 + 12]> */
		/* 8221E654h case   15:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R30 + 0x0000000C) );
		/* 8221E654h case   15:*/		return 0x8221E658;
		  /* 8221E658h */ case   16:  		/* lwz R11, <#[R30 + 20]> */
		/* 8221E658h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 8221E658h case   16:*/		return 0x8221E65C;
		  /* 8221E65Ch */ case   17:  		/* rlwimi R11, R10, 17, 20, 31 */
		/* 8221E65Ch case   17:*/		cpu::op::rlwimi<0,17,20,31>(regs,&regs.R11,regs.R10);
		/* 8221E65Ch case   17:*/		return 0x8221E660;
		  /* 8221E660h */ case   18:  		/* lwz R9, <#[R30 + 4]> */
		/* 8221E660h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000004) );
		/* 8221E660h case   18:*/		return 0x8221E664;
		  /* 8221E664h */ case   19:  		/* rlwimi R20, R6, 17, 20, 31 */
		/* 8221E664h case   19:*/		cpu::op::rlwimi<0,17,20,31>(regs,&regs.R20,regs.R6);
		/* 8221E664h case   19:*/		return 0x8221E668;
		  /* 8221E668h */ case   20:  		/* lwz R21, <#[R30 + 16]> */
		/* 8221E668h case   20:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R30 + 0x00000010) );
		/* 8221E668h case   20:*/		return 0x8221E66C;
		  /* 8221E66Ch */ case   21:  		/* rlwinm R3, R3, 0, 0, 19 */
		/* 8221E66Ch case   21:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R3,regs.R3);
		/* 8221E66Ch case   21:*/		return 0x8221E670;
		  /* 8221E670h */ case   22:  		/* rlwimi R9, R7, 17, 20, 31 */
		/* 8221E670h case   22:*/		cpu::op::rlwimi<0,17,20,31>(regs,&regs.R9,regs.R7);
		/* 8221E670h case   22:*/		return 0x8221E674;
		  /* 8221E674h */ case   23:  		/* stw R23, <#[R30]> */
		/* 8221E674h case   23:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R30 + 0x00000000) );
		/* 8221E674h case   23:*/		return 0x8221E678;
		  /* 8221E678h */ case   24:  		/* rlwimi R21, R5, 17, 20, 31 */
		/* 8221E678h case   24:*/		cpu::op::rlwimi<0,17,20,31>(regs,&regs.R21,regs.R5);
		/* 8221E678h case   24:*/		return 0x8221E67C;
		  /* 8221E67Ch */ case   25:  		/* stw R26, <#[R30 + 56]> */
		/* 8221E67Ch case   25:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R30 + 0x00000038) );
		/* 8221E67Ch case   25:*/		return 0x8221E680;
		  /* 8221E680h */ case   26:  		/* rlwimi R11, R10, 17, 6, 15 */
		/* 8221E680h case   26:*/		cpu::op::rlwimi<0,17,6,15>(regs,&regs.R11,regs.R10);
		/* 8221E680h case   26:*/		return 0x8221E684;
		  /* 8221E684h */ case   27:  		/* stw R8, <#[R30 + 60]> */
		/* 8221E684h case   27:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R30 + 0x0000003C) );
		/* 8221E684h case   27:*/		return 0x8221E688;
		  /* 8221E688h */ case   28:  		/* rlwinm R3, R3, 0, 16, 14 */
		/* 8221E688h case   28:*/		cpu::op::rlwinm<0,0,16,14>(regs,&regs.R3,regs.R3);
		/* 8221E688h case   28:*/		return 0x8221E68C;
		  /* 8221E68Ch */ case   29:  		/* rlwimi R20, R10, 17, 6, 15 */
		/* 8221E68Ch case   29:*/		cpu::op::rlwimi<0,17,6,15>(regs,&regs.R20,regs.R10);
		/* 8221E68Ch case   29:*/		return 0x8221E690;
		  /* 8221E690h */ case   30:  		/* stw R11, <#[R30 + 20]> */
		/* 8221E690h case   30:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 8221E690h case   30:*/		return 0x8221E694;
		  /* 8221E694h */ case   31:  		/* rlwimi R9, R10, 17, 6, 15 */
		/* 8221E694h case   31:*/		cpu::op::rlwimi<0,17,6,15>(regs,&regs.R9,regs.R10);
		/* 8221E694h case   31:*/		return 0x8221E698;
		  /* 8221E698h */ case   32:  		/* stw R3, <#[R30 + 8]> */
		/* 8221E698h case   32:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 8221E698h case   32:*/		return 0x8221E69C;
		  /* 8221E69Ch */ case   33:  		/* rlwimi R21, R10, 17, 6, 15 */
		/* 8221E69Ch case   33:*/		cpu::op::rlwimi<0,17,6,15>(regs,&regs.R21,regs.R10);
		/* 8221E69Ch case   33:*/		return 0x8221E6A0;
		  /* 8221E6A0h */ case   34:  		/* stw R20, <#[R30 + 12]> */
		/* 8221E6A0h case   34:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R30 + 0x0000000C) );
		/* 8221E6A0h case   34:*/		return 0x8221E6A4;
		  /* 8221E6A4h */ case   35:  		/* stw R9, <#[R30 + 4]> */
		/* 8221E6A4h case   35:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000004) );
		/* 8221E6A4h case   35:*/		return 0x8221E6A8;
		  /* 8221E6A8h */ case   36:  		/* stw R21, <#[R30 + 16]> */
		/* 8221E6A8h case   36:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R30 + 0x00000010) );
		/* 8221E6A8h case   36:*/		return 0x8221E6AC;
		  /* 8221E6ACh */ case   37:  		/* lwz R11, <#[R31 + 28]> */
		/* 8221E6ACh case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221E6ACh case   37:*/		return 0x8221E6B0;
		  /* 8221E6B0h */ case   38:  		/* stw R4, <#[R11]> */
		/* 8221E6B0h case   38:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 8221E6B0h case   38:*/		return 0x8221E6B4;
		  /* 8221E6B4h */ case   39:  		/* lwz R11, <#[R31 + 28]> */
		/* 8221E6B4h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221E6B4h case   39:*/		return 0x8221E6B8;
		  /* 8221E6B8h */ case   40:  		/* lwz R11, <#[R11]> */
		/* 8221E6B8h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8221E6B8h case   40:*/		return 0x8221E6BC;
		  /* 8221E6BCh */ case   41:  		/* rlwinm R11, R11, 0, 0, 28 */
		/* 8221E6BCh case   41:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R11,regs.R11);
		/* 8221E6BCh case   41:*/		return 0x8221E6C0;
		  /* 8221E6C0h */ case   42:  		/* cmplwi CR6, R11, 128 */
		/* 8221E6C0h case   42:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 8221E6C0h case   42:*/		return 0x8221E6C4;
		  /* 8221E6C4h */ case   43:  		/* bc 12, CR6_LT, 32 */
		/* 8221E6C4h case   43:*/		if ( regs.CR[6].lt ) { return 0x8221E6E4;  }
		/* 8221E6C4h case   43:*/		return 0x8221E6C8;
		  /* 8221E6C8h */ case   44:  		/* lis R11, -32252 */
		/* 8221E6C8h case   44:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221E6C8h case   44:*/		return 0x8221E6CC;
		  /* 8221E6CCh */ case   45:  		/* mr R6, R24 */
		/* 8221E6CCh case   45:*/		regs.R6 = regs.R24;
		/* 8221E6CCh case   45:*/		return 0x8221E6D0;
		  /* 8221E6D0h */ case   46:  		/* addi R5, R11, -1860 */
		/* 8221E6D0h case   46:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFF8BC);
		/* 8221E6D0h case   46:*/		return 0x8221E6D4;
		  /* 8221E6D4h */ case   47:  		/* mr R4, R25 */
		/* 8221E6D4h case   47:*/		regs.R4 = regs.R25;
		/* 8221E6D4h case   47:*/		return 0x8221E6D8;
		  /* 8221E6D8h */ case   48:  		/* li R7, 516 */
		/* 8221E6D8h case   48:*/		cpu::op::li<0>(regs,&regs.R7,0x204);
		/* 8221E6D8h case   48:*/		return 0x8221E6DC;
		  /* 8221E6DCh */ case   49:  		/* li R3, 0 */
		/* 8221E6DCh case   49:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221E6DCh case   49:*/		return 0x8221E6E0;
		  /* 8221E6E0h */ case   50:  		/* bl -813784 */
		/* 8221E6E0h case   50:*/		regs.LR = 0x8221E6E4; return 0x82157C08;
		/* 8221E6E0h case   50:*/		return 0x8221E6E4;
	}
	return 0x8221E6E4;
} // Block from 8221E618h-8221E6E4h (51 instructions)

//////////////////////////////////////////////////////
// Block at 8221E6E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E6E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E6E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E6E4);
		  /* 8221E6E4h */ case    0:  		/* lwz R10, <#[R31 + 28]> */
		/* 8221E6E4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221E6E4h case    0:*/		return 0x8221E6E8;
		  /* 8221E6E8h */ case    1:  		/* lis R11, 4097 */
		/* 8221E6E8h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0x1001);
		/* 8221E6E8h case    1:*/		return 0x8221E6EC;
		  /* 8221E6ECh */ case    2:  		/* lis R9, 0 */
		/* 8221E6ECh case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0x0);
		/* 8221E6ECh case    2:*/		return 0x8221E6F0;
		  /* 8221E6F0h */ case    3:  		/* ori R8, R11, 260 */
		/* 8221E6F0h case    3:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R11,0x104);
		/* 8221E6F0h case    3:*/		return 0x8221E6F4;
		  /* 8221E6F4h */ case    4:  		/* ori R9, R9, 65535 */
		/* 8221E6F4h case    4:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0xFFFF);
		/* 8221E6F4h case    4:*/		return 0x8221E6F8;
		  /* 8221E6F8h */ case    5:  		/* li R7, 12 */
		/* 8221E6F8h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0xC);
		/* 8221E6F8h case    5:*/		return 0x8221E6FC;
		  /* 8221E6FCh */ case    6:  		/* lwz R11, <#[R10]> */
		/* 8221E6FCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8221E6FCh case    6:*/		return 0x8221E700;
		  /* 8221E700h */ case    7:  		/* addi R11, R11, -1 */
		/* 8221E700h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8221E700h case    7:*/		return 0x8221E704;
		  /* 8221E704h */ case    8:  		/* rlwinm R11, R11, 29, 28, 31 */
		/* 8221E704h case    8:*/		cpu::op::rlwinm<0,29,28,31>(regs,&regs.R11,regs.R11);
		/* 8221E704h case    8:*/		return 0x8221E708;
		  /* 8221E708h */ case    9:  		/* stw R11, <#[R10 + 4]> */
		/* 8221E708h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8221E708h case    9:*/		return 0x8221E70C;
		  /* 8221E70Ch */ case   10:  		/* stw R8, <#[R27 + 8]> */
		/* 8221E70Ch case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R27 + 0x00000008) );
		/* 8221E70Ch case   10:*/		return 0x8221E710;
		  /* 8221E710h */ case   11:  		/* stw R9, <#[R27 + 16]> */
		/* 8221E710h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R27 + 0x00000010) );
		/* 8221E710h case   11:*/		return 0x8221E714;
		  /* 8221E714h */ case   12:  		/* lwz R11, <#[R31 + 32]> */
		/* 8221E714h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 8221E714h case   12:*/		return 0x8221E718;
		  /* 8221E718h */ case   13:  		/* stw R7, <#[R11]> */
		/* 8221E718h case   13:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8221E718h case   13:*/		return 0x8221E71C;
		  /* 8221E71Ch */ case   14:  		/* lwz R11, <#[R31 + 32]> */
		/* 8221E71Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 8221E71Ch case   14:*/		return 0x8221E720;
		  /* 8221E720h */ case   15:  		/* lwz R11, <#[R11]> */
		/* 8221E720h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8221E720h case   15:*/		return 0x8221E724;
		  /* 8221E724h */ case   16:  		/* rlwinm R11, R11, 0, 0, 28 */
		/* 8221E724h case   16:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R11,regs.R11);
		/* 8221E724h case   16:*/		return 0x8221E728;
		  /* 8221E728h */ case   17:  		/* cmplwi CR6, R11, 128 */
		/* 8221E728h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 8221E728h case   17:*/		return 0x8221E72C;
		  /* 8221E72Ch */ case   18:  		/* bc 12, CR6_LT, 32 */
		/* 8221E72Ch case   18:*/		if ( regs.CR[6].lt ) { return 0x8221E74C;  }
		/* 8221E72Ch case   18:*/		return 0x8221E730;
		  /* 8221E730h */ case   19:  		/* lis R11, -32252 */
		/* 8221E730h case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221E730h case   19:*/		return 0x8221E734;
		  /* 8221E734h */ case   20:  		/* mr R6, R24 */
		/* 8221E734h case   20:*/		regs.R6 = regs.R24;
		/* 8221E734h case   20:*/		return 0x8221E738;
		  /* 8221E738h */ case   21:  		/* addi R5, R11, -1904 */
		/* 8221E738h case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFF890);
		/* 8221E738h case   21:*/		return 0x8221E73C;
		  /* 8221E73Ch */ case   22:  		/* mr R4, R25 */
		/* 8221E73Ch case   22:*/		regs.R4 = regs.R25;
		/* 8221E73Ch case   22:*/		return 0x8221E740;
		  /* 8221E740h */ case   23:  		/* li R7, 534 */
		/* 8221E740h case   23:*/		cpu::op::li<0>(regs,&regs.R7,0x216);
		/* 8221E740h case   23:*/		return 0x8221E744;
		  /* 8221E744h */ case   24:  		/* li R3, 0 */
		/* 8221E744h case   24:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221E744h case   24:*/		return 0x8221E748;
		  /* 8221E748h */ case   25:  		/* bl -813888 */
		/* 8221E748h case   25:*/		regs.LR = 0x8221E74C; return 0x82157C08;
		/* 8221E748h case   25:*/		return 0x8221E74C;
	}
	return 0x8221E74C;
} // Block from 8221E6E4h-8221E74Ch (26 instructions)

//////////////////////////////////////////////////////
// Block at 8221E74Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E74C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E74C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E74C);
		  /* 8221E74Ch */ case    0:  		/* lwz R9, <#[R31 + 32]> */
		/* 8221E74Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 8221E74Ch case    0:*/		return 0x8221E750;
		  /* 8221E750h */ case    1:  		/* lis R11, 4 */
		/* 8221E750h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0x4);
		/* 8221E750h case    1:*/		return 0x8221E754;
		  /* 8221E754h */ case    2:  		/* li R8, 4 */
		/* 8221E754h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 8221E754h case    2:*/		return 0x8221E758;
		  /* 8221E758h */ case    3:  		/* ori R11, R11, 4 */
		/* 8221E758h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8221E758h case    3:*/		return 0x8221E75C;
		  /* 8221E75Ch */ case    4:  		/* lis R7, 1 */
		/* 8221E75Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R7,0x1);
		/* 8221E75Ch case    4:*/		return 0x8221E760;
		  /* 8221E760h */ case    5:  		/* li R6, 7 */
		/* 8221E760h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x7);
		/* 8221E760h case    5:*/		return 0x8221E764;
		  /* 8221E764h */ case    6:  		/* lwz R10, <#[R9]> */
		/* 8221E764h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 8221E764h case    6:*/		return 0x8221E768;
		  /* 8221E768h */ case    7:  		/* li R5, 20 */
		/* 8221E768h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 8221E768h case    7:*/		return 0x8221E76C;
		  /* 8221E76Ch */ case    8:  		/* addi R10, R10, -1 */
		/* 8221E76Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8221E76Ch case    8:*/		return 0x8221E770;
		  /* 8221E770h */ case    9:  		/* rlwinm R10, R10, 29, 28, 31 */
		/* 8221E770h case    9:*/		cpu::op::rlwinm<0,29,28,31>(regs,&regs.R10,regs.R10);
		/* 8221E770h case    9:*/		return 0x8221E774;
		  /* 8221E774h */ case   10:  		/* stw R10, <#[R9 + 4]> */
		/* 8221E774h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000004) );
		/* 8221E774h case   10:*/		return 0x8221E778;
		  /* 8221E778h */ case   11:  		/* lwz R10, <#[R29 + 28]> */
		/* 8221E778h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000001C) );
		/* 8221E778h case   11:*/		return 0x8221E77C;
		  /* 8221E77Ch */ case   12:  		/* rlwinm R10, R10, 0, 9, 6 */
		/* 8221E77Ch case   12:*/		cpu::op::rlwinm<0,0,9,6>(regs,&regs.R10,regs.R10);
		/* 8221E77Ch case   12:*/		return 0x8221E780;
		  /* 8221E780h */ case   13:  		/* stw R11, <#[R29 + 12]> */
		/* 8221E780h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 8221E780h case   13:*/		return 0x8221E784;
		  /* 8221E784h */ case   14:  		/* stw R11, <#[R29 + 44]> */
		/* 8221E784h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x0000002C) );
		/* 8221E784h case   14:*/		return 0x8221E788;
		  /* 8221E788h */ case   15:  		/* stw R11, <#[R29 + 48]> */
		/* 8221E788h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 8221E788h case   15:*/		return 0x8221E78C;
		  /* 8221E78Ch */ case   16:  		/* stw R11, <#[R29 + 52]> */
		/* 8221E78Ch case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000034) );
		/* 8221E78Ch case   16:*/		return 0x8221E790;
		  /* 8221E790h */ case   17:  		/* stw R11, <#[R29 + 20]> */
		/* 8221E790h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 8221E790h case   17:*/		return 0x8221E794;
		  /* 8221E794h */ case   18:  		/* stw R26, <#[R29 + 8]> */
		/* 8221E794h case   18:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R29 + 0x00000008) );
		/* 8221E794h case   18:*/		return 0x8221E798;
		  /* 8221E798h */ case   19:  		/* stw R8, <#[R29 + 40]> */
		/* 8221E798h case   19:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R29 + 0x00000028) );
		/* 8221E798h case   19:*/		return 0x8221E79C;
		  /* 8221E79Ch */ case   20:  		/* stw R7, <#[R29 + 24]> */
		/* 8221E79Ch case   20:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R29 + 0x00000018) );
		/* 8221E79Ch case   20:*/		return 0x8221E7A0;
		  /* 8221E7A0h */ case   21:  		/* stw R6, <#[R29 + 16]> */
		/* 8221E7A0h case   21:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R29 + 0x00000010) );
		/* 8221E7A0h case   21:*/		return 0x8221E7A4;
		  /* 8221E7A4h */ case   22:  		/* stw R10, <#[R29 + 28]> */
		/* 8221E7A4h case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x0000001C) );
		/* 8221E7A4h case   22:*/		return 0x8221E7A8;
		  /* 8221E7A8h */ case   23:  		/* lwz R11, <#[R31 + 36]> */
		/* 8221E7A8h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 8221E7A8h case   23:*/		return 0x8221E7AC;
		  /* 8221E7ACh */ case   24:  		/* stw R5, <#[R11]> */
		/* 8221E7ACh case   24:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8221E7ACh case   24:*/		return 0x8221E7B0;
		  /* 8221E7B0h */ case   25:  		/* lwz R11, <#[R31 + 36]> */
		/* 8221E7B0h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 8221E7B0h case   25:*/		return 0x8221E7B4;
		  /* 8221E7B4h */ case   26:  		/* lwz R11, <#[R11]> */
		/* 8221E7B4h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8221E7B4h case   26:*/		return 0x8221E7B8;
		  /* 8221E7B8h */ case   27:  		/* rlwinm R11, R11, 0, 0, 28 */
		/* 8221E7B8h case   27:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R11,regs.R11);
		/* 8221E7B8h case   27:*/		return 0x8221E7BC;
		  /* 8221E7BCh */ case   28:  		/* cmplwi CR6, R11, 128 */
		/* 8221E7BCh case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 8221E7BCh case   28:*/		return 0x8221E7C0;
		  /* 8221E7C0h */ case   29:  		/* bc 12, CR6_LT, 32 */
		/* 8221E7C0h case   29:*/		if ( regs.CR[6].lt ) { return 0x8221E7E0;  }
		/* 8221E7C0h case   29:*/		return 0x8221E7C4;
		  /* 8221E7C4h */ case   30:  		/* lis R11, -32252 */
		/* 8221E7C4h case   30:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221E7C4h case   30:*/		return 0x8221E7C8;
		  /* 8221E7C8h */ case   31:  		/* mr R6, R24 */
		/* 8221E7C8h case   31:*/		regs.R6 = regs.R24;
		/* 8221E7C8h case   31:*/		return 0x8221E7CC;
		  /* 8221E7CCh */ case   32:  		/* addi R5, R11, -1948 */
		/* 8221E7CCh case   32:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFF864);
		/* 8221E7CCh case   32:*/		return 0x8221E7D0;
		  /* 8221E7D0h */ case   33:  		/* mr R4, R25 */
		/* 8221E7D0h case   33:*/		regs.R4 = regs.R25;
		/* 8221E7D0h case   33:*/		return 0x8221E7D4;
		  /* 8221E7D4h */ case   34:  		/* li R7, 562 */
		/* 8221E7D4h case   34:*/		cpu::op::li<0>(regs,&regs.R7,0x232);
		/* 8221E7D4h case   34:*/		return 0x8221E7D8;
		  /* 8221E7D8h */ case   35:  		/* li R3, 0 */
		/* 8221E7D8h case   35:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221E7D8h case   35:*/		return 0x8221E7DC;
		  /* 8221E7DCh */ case   36:  		/* bl -814036 */
		/* 8221E7DCh case   36:*/		regs.LR = 0x8221E7E0; return 0x82157C08;
		/* 8221E7DCh case   36:*/		return 0x8221E7E0;
	}
	return 0x8221E7E0;
} // Block from 8221E74Ch-8221E7E0h (37 instructions)

//////////////////////////////////////////////////////
// Block at 8221E7E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E7E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E7E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E7E0);
		  /* 8221E7E0h */ case    0:  		/* lwz R10, <#[R31 + 36]> */
		/* 8221E7E0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000024) );
		/* 8221E7E0h case    0:*/		return 0x8221E7E4;
		  /* 8221E7E4h */ case    1:  		/* li R9, 38 */
		/* 8221E7E4h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x26);
		/* 8221E7E4h case    1:*/		return 0x8221E7E8;
		  /* 8221E7E8h */ case    2:  		/* lwz R11, <#[R10]> */
		/* 8221E7E8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8221E7E8h case    2:*/		return 0x8221E7EC;
		  /* 8221E7ECh */ case    3:  		/* addi R11, R11, -1 */
		/* 8221E7ECh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8221E7ECh case    3:*/		return 0x8221E7F0;
		  /* 8221E7F0h */ case    4:  		/* rlwinm R11, R11, 29, 28, 31 */
		/* 8221E7F0h case    4:*/		cpu::op::rlwinm<0,29,28,31>(regs,&regs.R11,regs.R11);
		/* 8221E7F0h case    4:*/		return 0x8221E7F4;
		  /* 8221E7F4h */ case    5:  		/* stw R11, <#[R10 + 4]> */
		/* 8221E7F4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8221E7F4h case    5:*/		return 0x8221E7F8;
		  /* 8221E7F8h */ case    6:  		/* lwz R11, <#[R31 + 40]> */
		/* 8221E7F8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 8221E7F8h case    6:*/		return 0x8221E7FC;
		  /* 8221E7FCh */ case    7:  		/* stw R9, <#[R11]> */
		/* 8221E7FCh case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221E7FCh case    7:*/		return 0x8221E800;
		  /* 8221E800h */ case    8:  		/* lwz R11, <#[R31 + 40]> */
		/* 8221E800h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 8221E800h case    8:*/		return 0x8221E804;
		  /* 8221E804h */ case    9:  		/* lwz R11, <#[R11]> */
		/* 8221E804h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8221E804h case    9:*/		return 0x8221E808;
		  /* 8221E808h */ case   10:  		/* rlwinm R11, R11, 0, 0, 28 */
		/* 8221E808h case   10:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R11,regs.R11);
		/* 8221E808h case   10:*/		return 0x8221E80C;
		  /* 8221E80Ch */ case   11:  		/* cmplwi CR6, R11, 128 */
		/* 8221E80Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 8221E80Ch case   11:*/		return 0x8221E810;
		  /* 8221E810h */ case   12:  		/* bc 12, CR6_LT, 32 */
		/* 8221E810h case   12:*/		if ( regs.CR[6].lt ) { return 0x8221E830;  }
		/* 8221E810h case   12:*/		return 0x8221E814;
		  /* 8221E814h */ case   13:  		/* lis R11, -32252 */
		/* 8221E814h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221E814h case   13:*/		return 0x8221E818;
		  /* 8221E818h */ case   14:  		/* mr R6, R24 */
		/* 8221E818h case   14:*/		regs.R6 = regs.R24;
		/* 8221E818h case   14:*/		return 0x8221E81C;
		  /* 8221E81Ch */ case   15:  		/* addi R5, R11, -1992 */
		/* 8221E81Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFF838);
		/* 8221E81Ch case   15:*/		return 0x8221E820;
		  /* 8221E820h */ case   16:  		/* mr R4, R25 */
		/* 8221E820h case   16:*/		regs.R4 = regs.R25;
		/* 8221E820h case   16:*/		return 0x8221E824;
		  /* 8221E824h */ case   17:  		/* li R7, 570 */
		/* 8221E824h case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x23A);
		/* 8221E824h case   17:*/		return 0x8221E828;
		  /* 8221E828h */ case   18:  		/* li R3, 0 */
		/* 8221E828h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221E828h case   18:*/		return 0x8221E82C;
		  /* 8221E82Ch */ case   19:  		/* bl -814116 */
		/* 8221E82Ch case   19:*/		regs.LR = 0x8221E830; return 0x82157C08;
		/* 8221E82Ch case   19:*/		return 0x8221E830;
	}
	return 0x8221E830;
} // Block from 8221E7E0h-8221E830h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8221E830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E830);
		  /* 8221E830h */ case    0:  		/* lwz R10, <#[R31 + 40]> */
		/* 8221E830h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 8221E830h case    0:*/		return 0x8221E834;
		  /* 8221E834h */ case    1:  		/* li R9, -1 */
		/* 8221E834h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0xFFFFFFFF);
		/* 8221E834h case    1:*/		return 0x8221E838;
		  /* 8221E838h */ case    2:  		/* li R8, 4081 */
		/* 8221E838h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0xFF1);
		/* 8221E838h case    2:*/		return 0x8221E83C;
		  /* 8221E83Ch */ case    3:  		/* li R7, 255 */
		/* 8221E83Ch case    3:*/		cpu::op::li<0>(regs,&regs.R7,0xFF);
		/* 8221E83Ch case    3:*/		return 0x8221E840;
		  /* 8221E840h */ case    4:  		/* li R6, 14 */
		/* 8221E840h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0xE);
		/* 8221E840h case    4:*/		return 0x8221E844;
		  /* 8221E844h */ case    5:  		/* lwz R11, <#[R10]> */
		/* 8221E844h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8221E844h case    5:*/		return 0x8221E848;
		  /* 8221E848h */ case    6:  		/* addi R11, R11, -1 */
		/* 8221E848h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8221E848h case    6:*/		return 0x8221E84C;
		  /* 8221E84Ch */ case    7:  		/* rlwinm R11, R11, 29, 28, 31 */
		/* 8221E84Ch case    7:*/		cpu::op::rlwinm<0,29,28,31>(regs,&regs.R11,regs.R11);
		/* 8221E84Ch case    7:*/		return 0x8221E850;
		  /* 8221E850h */ case    8:  		/* stw R11, <#[R10 + 4]> */
		/* 8221E850h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8221E850h case    8:*/		return 0x8221E854;
		  /* 8221E854h */ case    9:  		/* stw R9, <#[R28 + 72]> */
		/* 8221E854h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R28 + 0x00000048) );
		/* 8221E854h case    9:*/		return 0x8221E858;
		  /* 8221E858h */ case   10:  		/* stw R22, <#[R28 + 92]> */
		/* 8221E858h case   10:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R28 + 0x0000005C) );
		/* 8221E858h case   10:*/		return 0x8221E85C;
		  /* 8221E85Ch */ case   11:  		/* stw R6, <#[R28 + 88]> */
		/* 8221E85Ch case   11:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R28 + 0x00000058) );
		/* 8221E85Ch case   11:*/		return 0x8221E860;
		  /* 8221E860h */ case   12:  		/* stw R23, <#[R28 + 104]> */
		/* 8221E860h case   12:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R28 + 0x00000068) );
		/* 8221E860h case   12:*/		return 0x8221E864;
		  /* 8221E864h */ case   13:  		/* lwz R11, <#[R28 + 32]> */
		/* 8221E864h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000020) );
		/* 8221E864h case   13:*/		return 0x8221E868;
		  /* 8221E868h */ case   14:  		/* lwz R10, <#[R28 + 28]> */
		/* 8221E868h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x0000001C) );
		/* 8221E868h case   14:*/		return 0x8221E86C;
		  /* 8221E86Ch */ case   15:  		/* rlwimi R11, R7, 12, 23, 31 */
		/* 8221E86Ch case   15:*/		cpu::op::rlwimi<0,12,23,31>(regs,&regs.R11,regs.R7);
		/* 8221E86Ch case   15:*/		return 0x8221E870;
		  /* 8221E870h */ case   16:  		/* rlwimi R10, R8, 8, 23, 31 */
		/* 8221E870h case   16:*/		cpu::op::rlwimi<0,8,23,31>(regs,&regs.R10,regs.R8);
		/* 8221E870h case   16:*/		return 0x8221E874;
		  /* 8221E874h */ case   17:  		/* rlwimi R11, R7, 12, 11, 19 */
		/* 8221E874h case   17:*/		cpu::op::rlwimi<0,12,11,19>(regs,&regs.R11,regs.R7);
		/* 8221E874h case   17:*/		return 0x8221E878;
		  /* 8221E878h */ case   18:  		/* rlwimi R10, R8, 8, 11, 19 */
		/* 8221E878h case   18:*/		cpu::op::rlwimi<0,8,11,19>(regs,&regs.R10,regs.R8);
		/* 8221E878h case   18:*/		return 0x8221E87C;
		  /* 8221E87Ch */ case   19:  		/* stw R11, <#[R28 + 32]> */
		/* 8221E87Ch case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000020) );
		/* 8221E87Ch case   19:*/		return 0x8221E880;
		  /* 8221E880h */ case   20:  		/* stw R10, <#[R28 + 28]> */
		/* 8221E880h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x0000001C) );
		/* 8221E880h case   20:*/		return 0x8221E884;
		  /* 8221E884h */ case   21:  		/* lwz R11, <#[R31 + 44]> */
		/* 8221E884h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 8221E884h case   21:*/		return 0x8221E888;
		  /* 8221E888h */ case   22:  		/* stw R23, <#[R11]> */
		/* 8221E888h case   22:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R11 + 0x00000000) );
		/* 8221E888h case   22:*/		return 0x8221E88C;
		  /* 8221E88Ch */ case   23:  		/* lwz R11, <#[R31 + 44]> */
		/* 8221E88Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 8221E88Ch case   23:*/		return 0x8221E890;
		  /* 8221E890h */ case   24:  		/* lwz R11, <#[R11]> */
		/* 8221E890h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8221E890h case   24:*/		return 0x8221E894;
		  /* 8221E894h */ case   25:  		/* rlwinm R11, R11, 0, 0, 28 */
		/* 8221E894h case   25:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R11,regs.R11);
		/* 8221E894h case   25:*/		return 0x8221E898;
		  /* 8221E898h */ case   26:  		/* cmplwi CR6, R11, 128 */
		/* 8221E898h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 8221E898h case   26:*/		return 0x8221E89C;
		  /* 8221E89Ch */ case   27:  		/* bc 12, CR6_LT, 32 */
		/* 8221E89Ch case   27:*/		if ( regs.CR[6].lt ) { return 0x8221E8BC;  }
		/* 8221E89Ch case   27:*/		return 0x8221E8A0;
		  /* 8221E8A0h */ case   28:  		/* lis R11, -32252 */
		/* 8221E8A0h case   28:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221E8A0h case   28:*/		return 0x8221E8A4;
		  /* 8221E8A4h */ case   29:  		/* mr R6, R24 */
		/* 8221E8A4h case   29:*/		regs.R6 = regs.R24;
		/* 8221E8A4h case   29:*/		return 0x8221E8A8;
		  /* 8221E8A8h */ case   30:  		/* addi R5, R11, -2036 */
		/* 8221E8A8h case   30:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFF80C);
		/* 8221E8A8h case   30:*/		return 0x8221E8AC;
		  /* 8221E8ACh */ case   31:  		/* mr R4, R25 */
		/* 8221E8ACh case   31:*/		regs.R4 = regs.R25;
		/* 8221E8ACh case   31:*/		return 0x8221E8B0;
		  /* 8221E8B0h */ case   32:  		/* li R7, 605 */
		/* 8221E8B0h case   32:*/		cpu::op::li<0>(regs,&regs.R7,0x25D);
		/* 8221E8B0h case   32:*/		return 0x8221E8B4;
		  /* 8221E8B4h */ case   33:  		/* li R3, 0 */
		/* 8221E8B4h case   33:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221E8B4h case   33:*/		return 0x8221E8B8;
		  /* 8221E8B8h */ case   34:  		/* bl -814256 */
		/* 8221E8B8h case   34:*/		regs.LR = 0x8221E8BC; return 0x82157C08;
		/* 8221E8B8h case   34:*/		return 0x8221E8BC;
	}
	return 0x8221E8BC;
} // Block from 8221E830h-8221E8BCh (35 instructions)

//////////////////////////////////////////////////////
// Block at 8221E8BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E8BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E8BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E8BC);
		  /* 8221E8BCh */ case    0:  		/* lwz R10, <#[R31 + 44]> */
		/* 8221E8BCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000002C) );
		/* 8221E8BCh case    0:*/		return 0x8221E8C0;
		  /* 8221E8C0h */ case    1:  		/* lwz R11, <#[R10]> */
		/* 8221E8C0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8221E8C0h case    1:*/		return 0x8221E8C4;
		  /* 8221E8C4h */ case    2:  		/* addi R11, R11, -1 */
		/* 8221E8C4h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8221E8C4h case    2:*/		return 0x8221E8C8;
		  /* 8221E8C8h */ case    3:  		/* rlwinm R11, R11, 29, 28, 31 */
		/* 8221E8C8h case    3:*/		cpu::op::rlwinm<0,29,28,31>(regs,&regs.R11,regs.R11);
		/* 8221E8C8h case    3:*/		return 0x8221E8CC;
		  /* 8221E8CCh */ case    4:  		/* stw R11, <#[R10 + 4]> */
		/* 8221E8CCh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8221E8CCh case    4:*/		return 0x8221E8D0;
		  /* 8221E8D0h */ case    5:  		/* addi R1, R1, 192 */
		/* 8221E8D0h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8221E8D0h case    5:*/		return 0x8221E8D4;
		  /* 8221E8D4h */ case    6:  		/* b -1627724 */
		/* 8221E8D4h case    6:*/		return 0x82091288;
		/* 8221E8D4h case    6:*/		return 0x8221E8D8;
	}
	return 0x8221E8D8;
} // Block from 8221E8BCh-8221E8D8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221E8D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E8D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E8D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E8D8);
		  /* 8221E8D8h */ case    0:  		/* mfspr R12, LR */
		/* 8221E8D8h case    0:*/		regs.R12 = regs.LR;
		/* 8221E8D8h case    0:*/		return 0x8221E8DC;
		  /* 8221E8DCh */ case    1:  		/* bl -1627788 */
		/* 8221E8DCh case    1:*/		regs.LR = 0x8221E8E0; return 0x82091250;
		/* 8221E8DCh case    1:*/		return 0x8221E8E0;
		  /* 8221E8E0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8221E8E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8221E8E0h case    2:*/		return 0x8221E8E4;
		  /* 8221E8E4h */ case    3:  		/* lis R11, -32253 */
		/* 8221E8E4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8221E8E4h case    3:*/		return 0x8221E8E8;
		  /* 8221E8E8h */ case    4:  		/* lis R10, -32252 */
		/* 8221E8E8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221E8E8h case    4:*/		return 0x8221E8EC;
		  /* 8221E8ECh */ case    5:  		/* mr R31, R3 */
		/* 8221E8ECh case    5:*/		regs.R31 = regs.R3;
		/* 8221E8ECh case    5:*/		return 0x8221E8F0;
		  /* 8221E8F0h */ case    6:  		/* mr R30, R4 */
		/* 8221E8F0h case    6:*/		regs.R30 = regs.R4;
		/* 8221E8F0h case    6:*/		return 0x8221E8F4;
		  /* 8221E8F4h */ case    7:  		/* mr R29, R5 */
		/* 8221E8F4h case    7:*/		regs.R29 = regs.R5;
		/* 8221E8F4h case    7:*/		return 0x8221E8F8;
		  /* 8221E8F8h */ case    8:  		/* mr R28, R6 */
		/* 8221E8F8h case    8:*/		regs.R28 = regs.R6;
		/* 8221E8F8h case    8:*/		return 0x8221E8FC;
		  /* 8221E8FCh */ case    9:  		/* cmplwi CR6, R6, 0 */
		/* 8221E8FCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 8221E8FCh case    9:*/		return 0x8221E900;
		  /* 8221E900h */ case   10:  		/* addi R27, R11, 27460 */
		/* 8221E900h case   10:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x6B44);
		/* 8221E900h case   10:*/		return 0x8221E904;
		  /* 8221E904h */ case   11:  		/* addi R26, R10, -12448 */
		/* 8221E904h case   11:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0xFFFFCF60);
		/* 8221E904h case   11:*/		return 0x8221E908;
		  /* 8221E908h */ case   12:  		/* bc 4, CR6_EQ, 32 */
		/* 8221E908h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8221E928;  }
		/* 8221E908h case   12:*/		return 0x8221E90C;
		  /* 8221E90Ch */ case   13:  		/* lis R11, -32252 */
		/* 8221E90Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221E90Ch case   13:*/		return 0x8221E910;
		  /* 8221E910h */ case   14:  		/* mr R6, R26 */
		/* 8221E910h case   14:*/		regs.R6 = regs.R26;
		/* 8221E910h case   14:*/		return 0x8221E914;
		  /* 8221E914h */ case   15:  		/* addi R5, R11, -1664 */
		/* 8221E914h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFF980);
		/* 8221E914h case   15:*/		return 0x8221E918;
		  /* 8221E918h */ case   16:  		/* mr R4, R27 */
		/* 8221E918h case   16:*/		regs.R4 = regs.R27;
		/* 8221E918h case   16:*/		return 0x8221E91C;
		  /* 8221E91Ch */ case   17:  		/* li R7, 163 */
		/* 8221E91Ch case   17:*/		cpu::op::li<0>(regs,&regs.R7,0xA3);
		/* 8221E91Ch case   17:*/		return 0x8221E920;
		  /* 8221E920h */ case   18:  		/* li R3, 0 */
		/* 8221E920h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221E920h case   18:*/		return 0x8221E924;
		  /* 8221E924h */ case   19:  		/* bl -814364 */
		/* 8221E924h case   19:*/		regs.LR = 0x8221E928; return 0x82157C08;
		/* 8221E924h case   19:*/		return 0x8221E928;
	}
	return 0x8221E928;
} // Block from 8221E8D8h-8221E928h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8221E928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E928);
		  /* 8221E928h */ case    0:  		/* lwz R11, <#[R31 + 72]> */
		/* 8221E928h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000048) );
		/* 8221E928h case    0:*/		return 0x8221E92C;
		  /* 8221E92Ch */ case    1:  		/* cmplw CR6, R30, R11 */
		/* 8221E92Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8221E92Ch case    1:*/		return 0x8221E930;
		  /* 8221E930h */ case    2:  		/* bc 12, CR6_LT, 32 */
		/* 8221E930h case    2:*/		if ( regs.CR[6].lt ) { return 0x8221E950;  }
		/* 8221E930h case    2:*/		return 0x8221E934;
		  /* 8221E934h */ case    3:  		/* lis R11, -32253 */
		/* 8221E934h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8221E934h case    3:*/		return 0x8221E938;
		  /* 8221E938h */ case    4:  		/* mr R6, R26 */
		/* 8221E938h case    4:*/		regs.R6 = regs.R26;
		/* 8221E938h case    4:*/		return 0x8221E93C;
		  /* 8221E93Ch */ case    5:  		/* addi R5, R11, 27976 */
		/* 8221E93Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6D48);
		/* 8221E93Ch case    5:*/		return 0x8221E940;
		  /* 8221E940h */ case    6:  		/* mr R4, R27 */
		/* 8221E940h case    6:*/		regs.R4 = regs.R27;
		/* 8221E940h case    6:*/		return 0x8221E944;
		  /* 8221E944h */ case    7:  		/* li R7, 164 */
		/* 8221E944h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0xA4);
		/* 8221E944h case    7:*/		return 0x8221E948;
		  /* 8221E948h */ case    8:  		/* li R3, 0 */
		/* 8221E948h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221E948h case    8:*/		return 0x8221E94C;
		  /* 8221E94Ch */ case    9:  		/* bl -814404 */
		/* 8221E94Ch case    9:*/		regs.LR = 0x8221E950; return 0x82157C08;
		/* 8221E94Ch case    9:*/		return 0x8221E950;
	}
	return 0x8221E950;
} // Block from 8221E928h-8221E950h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8221E950h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E950);
		  /* 8221E950h */ case    0:  		/* lwz R11, <#[R31 + 84]> */
		/* 8221E950h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 8221E950h case    0:*/		return 0x8221E954;
		  /* 8221E954h */ case    1:  		/* mulli R30, R30, 12 */
		/* 8221E954h case    1:*/		cpu::op::mulli<0>(regs,&regs.R30,regs.R30,0xC);
		/* 8221E954h case    1:*/		return 0x8221E958;
		  /* 8221E958h */ case    2:  		/* add R11, R11, R30 */
		/* 8221E958h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8221E958h case    2:*/		return 0x8221E95C;
		  /* 8221E95Ch */ case    3:  		/* lwz R11, <#[R11 + 8]> */
		/* 8221E95Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8221E95Ch case    3:*/		return 0x8221E960;
		  /* 8221E960h */ case    4:  		/* cmplw CR6, R29, R11 */
		/* 8221E960h case    4:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8221E960h case    4:*/		return 0x8221E964;
		  /* 8221E964h */ case    5:  		/* bc 12, CR6_LT, 32 */
		/* 8221E964h case    5:*/		if ( regs.CR[6].lt ) { return 0x8221E984;  }
		/* 8221E964h case    5:*/		return 0x8221E968;
		  /* 8221E968h */ case    6:  		/* lis R11, -32253 */
		/* 8221E968h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8221E968h case    6:*/		return 0x8221E96C;
		  /* 8221E96Ch */ case    7:  		/* mr R6, R26 */
		/* 8221E96Ch case    7:*/		regs.R6 = regs.R26;
		/* 8221E96Ch case    7:*/		return 0x8221E970;
		  /* 8221E970h */ case    8:  		/* addi R5, R11, 27904 */
		/* 8221E970h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6D00);
		/* 8221E970h case    8:*/		return 0x8221E974;
		  /* 8221E974h */ case    9:  		/* mr R4, R27 */
		/* 8221E974h case    9:*/		regs.R4 = regs.R27;
		/* 8221E974h case    9:*/		return 0x8221E978;
		  /* 8221E978h */ case   10:  		/* li R7, 165 */
		/* 8221E978h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0xA5);
		/* 8221E978h case   10:*/		return 0x8221E97C;
		  /* 8221E97Ch */ case   11:  		/* li R3, 0 */
		/* 8221E97Ch case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221E97Ch case   11:*/		return 0x8221E980;
		  /* 8221E980h */ case   12:  		/* bl -814456 */
		/* 8221E980h case   12:*/		regs.LR = 0x8221E984; return 0x82157C08;
		/* 8221E980h case   12:*/		return 0x8221E984;
	}
	return 0x8221E984;
} // Block from 8221E950h-8221E984h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8221E984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E984);
		  /* 8221E984h */ case    0:  		/* lwz R11, <#[R31 + 84]> */
		/* 8221E984h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 8221E984h case    0:*/		return 0x8221E988;
		  /* 8221E988h */ case    1:  		/* lwz R9, <#[R31 + 8]> */
		/* 8221E988h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 8221E988h case    1:*/		return 0x8221E98C;
		  /* 8221E98Ch */ case    2:  		/* add R11, R11, R30 */
		/* 8221E98Ch case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8221E98Ch case    2:*/		return 0x8221E990;
		  /* 8221E990h */ case    3:  		/* lwz R8, <#[R11 + 4]> */
		/* 8221E990h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 8221E990h case    3:*/		return 0x8221E994;
		  /* 8221E994h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 8221E994h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221E994h case    4:*/		return 0x8221E998;
		  /* 8221E998h */ case    5:  		/* mullw R11, R8, R29 */
		/* 8221E998h case    5:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R8,regs.R29);
		/* 8221E998h case    5:*/		return 0x8221E99C;
		  /* 8221E99Ch */ case    6:  		/* add R3, R11, R10 */
		/* 8221E99Ch case    6:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 8221E99Ch case    6:*/		return 0x8221E9A0;
		  /* 8221E9A0h */ case    7:  		/* rlwinm R11, R3, 2, 0, 29 */
		/* 8221E9A0h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R3);
		/* 8221E9A0h case    7:*/		return 0x8221E9A4;
		  /* 8221E9A4h */ case    8:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8221E9A4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8221E9A4h case    8:*/		return 0x8221E9A8;
		  /* 8221E9A8h */ case    9:  		/* stw R11, <#[R28]> */
		/* 8221E9A8h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8221E9A8h case    9:*/		return 0x8221E9AC;
		  /* 8221E9ACh */ case   10:  		/* addi R1, R1, 144 */
		/* 8221E9ACh case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8221E9ACh case   10:*/		return 0x8221E9B0;
		  /* 8221E9B0h */ case   11:  		/* b -1627920 */
		/* 8221E9B0h case   11:*/		return 0x820912A0;
		/* 8221E9B0h case   11:*/		return 0x8221E9B4;
		  /* 8221E9B4h */ case   12:  		/* nop */
		/* 8221E9B4h case   12:*/		cpu::op::nop();
		/* 8221E9B4h case   12:*/		return 0x8221E9B8;
	}
	return 0x8221E9B8;
} // Block from 8221E984h-8221E9B8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8221E9B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221E9B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221E9B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221E9B8);
		  /* 8221E9B8h */ case    0:  		/* mfspr R12, LR */
		/* 8221E9B8h case    0:*/		regs.R12 = regs.LR;
		/* 8221E9B8h case    0:*/		return 0x8221E9BC;
		  /* 8221E9BCh */ case    1:  		/* bl -1628008 */
		/* 8221E9BCh case    1:*/		regs.LR = 0x8221E9C0; return 0x82091254;
		/* 8221E9BCh case    1:*/		return 0x8221E9C0;
		  /* 8221E9C0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8221E9C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8221E9C0h case    2:*/		return 0x8221E9C4;
		  /* 8221E9C4h */ case    3:  		/* mr R28, R4 */
		/* 8221E9C4h case    3:*/		regs.R28 = regs.R4;
		/* 8221E9C4h case    3:*/		return 0x8221E9C8;
		  /* 8221E9C8h */ case    4:  		/* mr R30, R3 */
		/* 8221E9C8h case    4:*/		regs.R30 = regs.R3;
		/* 8221E9C8h case    4:*/		return 0x8221E9CC;
		  /* 8221E9CCh */ case    5:  		/* li R4, 2 */
		/* 8221E9CCh case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8221E9CCh case    5:*/		return 0x8221E9D0;
		  /* 8221E9D0h */ case    6:  		/* mr R3, R28 */
		/* 8221E9D0h case    6:*/		regs.R3 = regs.R28;
		/* 8221E9D0h case    6:*/		return 0x8221E9D4;
		  /* 8221E9D4h */ case    7:  		/* mr R29, R5 */
		/* 8221E9D4h case    7:*/		regs.R29 = regs.R5;
		/* 8221E9D4h case    7:*/		return 0x8221E9D8;
		  /* 8221E9D8h */ case    8:  		/* bl -791752 */
		/* 8221E9D8h case    8:*/		regs.LR = 0x8221E9DC; return 0x8215D510;
		/* 8221E9D8h case    8:*/		return 0x8221E9DC;
		  /* 8221E9DCh */ case    9:  		/* lwz R11, <#[R30 + 32]> */
		/* 8221E9DCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8221E9DCh case    9:*/		return 0x8221E9E0;
		  /* 8221E9E0h */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 8221E9E0h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8221E9E0h case   10:*/		return 0x8221E9E4;
		  /* 8221E9E4h */ case   11:  		/* addi R31, R11, 8 */
		/* 8221E9E4h case   11:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x8);
		/* 8221E9E4h case   11:*/		return 0x8221E9E8;
		  /* 8221E9E8h */ case   12:  		/* bc 12, CR0_EQ, 320 */
		/* 8221E9E8h case   12:*/		if ( regs.CR[0].eq ) { return 0x8221EB28;  }
		/* 8221E9E8h case   12:*/		return 0x8221E9EC;
		  /* 8221E9ECh */ case   13:  		/* li R4, 11 */
		/* 8221E9ECh case   13:*/		cpu::op::li<0>(regs,&regs.R4,0xB);
		/* 8221E9ECh case   13:*/		return 0x8221E9F0;
		  /* 8221E9F0h */ case   14:  		/* lwz R3, <#[R30 + 12]> */
		/* 8221E9F0h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x0000000C) );
		/* 8221E9F0h case   14:*/		return 0x8221E9F4;
		  /* 8221E9F4h */ case   15:  		/* li R27, 1 */
		/* 8221E9F4h case   15:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 8221E9F4h case   15:*/		return 0x8221E9F8;
		  /* 8221E9F8h */ case   16:  		/* bl -84080 */
		/* 8221E9F8h case   16:*/		regs.LR = 0x8221E9FC; return 0x8220A188;
		/* 8221E9F8h case   16:*/		return 0x8221E9FC;
		  /* 8221E9FCh */ case   17:  		/* cmplwi CR0, R3, 0 */
		/* 8221E9FCh case   17:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8221E9FCh case   17:*/		return 0x8221EA00;
		  /* 8221EA00h */ case   18:  		/* bc 12, CR0_EQ, 112 */
		/* 8221EA00h case   18:*/		if ( regs.CR[0].eq ) { return 0x8221EA70;  }
		/* 8221EA00h case   18:*/		return 0x8221EA04;
		  /* 8221EA04h */ case   19:  		/* li R30, 0 */
		/* 8221EA04h case   19:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8221EA04h case   19:*/		return 0x8221EA08;
		  /* 8221EA08h */ case   20:  		/* cmplwi CR6, R30, 4 */
		/* 8221EA08h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000004);
		/* 8221EA08h case   20:*/		return 0x8221EA0C;
		  /* 8221EA0Ch */ case   21:  		/* bc 4, CR6_LT, 92 */
		/* 8221EA0Ch case   21:*/		if ( !regs.CR[6].lt ) { return 0x8221EA68;  }
		/* 8221EA0Ch case   21:*/		return 0x8221EA10;
		  /* 8221EA10h */ case   22:  		/* mr R5, R30 */
		/* 8221EA10h case   22:*/		regs.R5 = regs.R30;
		/* 8221EA10h case   22:*/		return 0x8221EA14;
		  /* 8221EA14h */ case   23:  		/* li R4, 33 */
		/* 8221EA14h case   23:*/		cpu::op::li<0>(regs,&regs.R4,0x21);
		/* 8221EA14h case   23:*/		return 0x8221EA18;
		  /* 8221EA18h */ case   24:  		/* mr R3, R28 */
		/* 8221EA18h case   24:*/		regs.R3 = regs.R28;
		/* 8221EA18h case   24:*/		return 0x8221EA1C;
		  /* 8221EA1Ch */ case   25:  		/* bl -791004 */
		/* 8221EA1Ch case   25:*/		regs.LR = 0x8221EA20; return 0x8215D840;
		/* 8221EA1Ch case   25:*/		return 0x8221EA20;
		  /* 8221EA20h */ case   26:  		/* cmplwi CR0, R3, 0 */
		/* 8221EA20h case   26:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8221EA20h case   26:*/		return 0x8221EA24;
		  /* 8221EA24h */ case   27:  		/* bc 12, CR0_EQ, 52 */
		/* 8221EA24h case   27:*/		if ( regs.CR[0].eq ) { return 0x8221EA58;  }
		/* 8221EA24h case   27:*/		return 0x8221EA28;
		  /* 8221EA28h */ case   28:  		/* lwz R11, <#[R29]> */
		/* 8221EA28h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8221EA28h case   28:*/		return 0x8221EA2C;
		  /* 8221EA2Ch */ case   29:  		/* lhz R11, <#[R11]> */
		/* 8221EA2Ch case   29:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8221EA2Ch case   29:*/		return 0x8221EA30;
		  /* 8221EA30h */ case   30:  		/* rlwinm R11, R11, 0, 28, 31 */
		/* 8221EA30h case   30:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R11,regs.R11);
		/* 8221EA30h case   30:*/		return 0x8221EA34;
		  /* 8221EA34h */ case   31:  		/* cmplwi CR6, R11, 24 */
		/* 8221EA34h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000018);
		/* 8221EA34h case   31:*/		return 0x8221EA38;
		  /* 8221EA38h */ case   32:  		/* bc 12, CR6_LT, 32 */
		/* 8221EA38h case   32:*/		if ( regs.CR[6].lt ) { return 0x8221EA58;  }
		/* 8221EA38h case   32:*/		return 0x8221EA3C;
		  /* 8221EA3Ch */ case   33:  		/* cmplwi CR6, R11, 26 */
		/* 8221EA3Ch case   33:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001A);
		/* 8221EA3Ch case   33:*/		return 0x8221EA40;
		  /* 8221EA40h */ case   34:  		/* bc 4, CR6_GT, 20 */
		/* 8221EA40h case   34:*/		if ( !regs.CR[6].gt ) { return 0x8221EA54;  }
		/* 8221EA40h case   34:*/		return 0x8221EA44;
		  /* 8221EA44h */ case   35:  		/* cmplwi CR6, R11, 35 */
		/* 8221EA44h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000023);
		/* 8221EA44h case   35:*/		return 0x8221EA48;
		  /* 8221EA48h */ case   36:  		/* bc 4, CR6_GT, 16 */
		/* 8221EA48h case   36:*/		if ( !regs.CR[6].gt ) { return 0x8221EA58;  }
		/* 8221EA48h case   36:*/		return 0x8221EA4C;
		  /* 8221EA4Ch */ case   37:  		/* cmplwi CR6, R11, 38 */
		/* 8221EA4Ch case   37:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000026);
		/* 8221EA4Ch case   37:*/		return 0x8221EA50;
		  /* 8221EA50h */ case   38:  		/* bc 12, CR6_GT, 8 */
		/* 8221EA50h case   38:*/		if ( regs.CR[6].gt ) { return 0x8221EA58;  }
		/* 8221EA50h case   38:*/		return 0x8221EA54;
	}
	return 0x8221EA54;
} // Block from 8221E9B8h-8221EA54h (39 instructions)

//////////////////////////////////////////////////////
// Block at 8221EA54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EA54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EA54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EA54);
		  /* 8221EA54h */ case    0:  		/* li R27, 0 */
		/* 8221EA54h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8221EA54h case    0:*/		return 0x8221EA58;
	}
	return 0x8221EA58;
} // Block from 8221EA54h-8221EA58h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221EA58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EA58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EA58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EA58);
		  /* 8221EA58h */ case    0:  		/* addi R30, R30, 1 */
		/* 8221EA58h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8221EA58h case    0:*/		return 0x8221EA5C;
		  /* 8221EA5Ch */ case    1:  		/* addi R29, R29, 4 */
		/* 8221EA5Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8221EA5Ch case    1:*/		return 0x8221EA60;
		  /* 8221EA60h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 8221EA60h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8221EA60h case    2:*/		return 0x8221EA64;
		  /* 8221EA64h */ case    3:  		/* bc 4, CR6_EQ, -92 */
		/* 8221EA64h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8221EA08;  }
		/* 8221EA64h case    3:*/		return 0x8221EA68;
	}
	return 0x8221EA68;
} // Block from 8221EA58h-8221EA68h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221EA68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EA68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EA68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EA68);
		  /* 8221EA68h */ case    0:  		/* cmplwi CR6, R27, 1 */
		/* 8221EA68h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000001);
		/* 8221EA68h case    0:*/		return 0x8221EA6C;
		  /* 8221EA6Ch */ case    1:  		/* bc 4, CR6_EQ, 188 */
		/* 8221EA6Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8221EB28;  }
		/* 8221EA6Ch case    1:*/		return 0x8221EA70;
	}
	return 0x8221EA70;
} // Block from 8221EA68h-8221EA70h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221EA70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EA70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EA70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EA70);
		  /* 8221EA70h */ case    0:  		/* li R5, 0 */
		/* 8221EA70h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8221EA70h case    0:*/		return 0x8221EA74;
		  /* 8221EA74h */ case    1:  		/* li R4, 0 */
		/* 8221EA74h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8221EA74h case    1:*/		return 0x8221EA78;
		  /* 8221EA78h */ case    2:  		/* mr R3, R28 */
		/* 8221EA78h case    2:*/		regs.R3 = regs.R28;
		/* 8221EA78h case    2:*/		return 0x8221EA7C;
		  /* 8221EA7Ch */ case    3:  		/* bl -791100 */
		/* 8221EA7Ch case    3:*/		regs.LR = 0x8221EA80; return 0x8215D840;
		/* 8221EA7Ch case    3:*/		return 0x8221EA80;
		  /* 8221EA80h */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 8221EA80h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8221EA80h case    4:*/		return 0x8221EA84;
		  /* 8221EA84h */ case    5:  		/* li R5, 0 */
		/* 8221EA84h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8221EA84h case    5:*/		return 0x8221EA88;
		  /* 8221EA88h */ case    6:  		/* rlwimi R11, R3, 0, 27, 31 */
		/* 8221EA88h case    6:*/		cpu::op::rlwimi<0,0,27,31>(regs,&regs.R11,regs.R3);
		/* 8221EA88h case    6:*/		return 0x8221EA8C;
		  /* 8221EA8Ch */ case    7:  		/* li R4, 2 */
		/* 8221EA8Ch case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8221EA8Ch case    7:*/		return 0x8221EA90;
		  /* 8221EA90h */ case    8:  		/* stw R11, <#[R31 + 4]> */
		/* 8221EA90h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8221EA90h case    8:*/		return 0x8221EA94;
		  /* 8221EA94h */ case    9:  		/* mr R3, R28 */
		/* 8221EA94h case    9:*/		regs.R3 = regs.R28;
		/* 8221EA94h case    9:*/		return 0x8221EA98;
		  /* 8221EA98h */ case   10:  		/* bl -791128 */
		/* 8221EA98h case   10:*/		regs.LR = 0x8221EA9C; return 0x8215D840;
		/* 8221EA98h case   10:*/		return 0x8221EA9C;
		  /* 8221EA9Ch */ case   11:  		/* lwz R11, <#[R31 + 4]> */
		/* 8221EA9Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8221EA9Ch case   11:*/		return 0x8221EAA0;
		  /* 8221EAA0h */ case   12:  		/* li R5, 0 */
		/* 8221EAA0h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8221EAA0h case   12:*/		return 0x8221EAA4;
		  /* 8221EAA4h */ case   13:  		/* rlwimi R11, R3, 8, 19, 23 */
		/* 8221EAA4h case   13:*/		cpu::op::rlwimi<0,8,19,23>(regs,&regs.R11,regs.R3);
		/* 8221EAA4h case   13:*/		return 0x8221EAA8;
		  /* 8221EAA8h */ case   14:  		/* li R4, 1 */
		/* 8221EAA8h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8221EAA8h case   14:*/		return 0x8221EAAC;
		  /* 8221EAACh */ case   15:  		/* stw R11, <#[R31 + 4]> */
		/* 8221EAACh case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8221EAACh case   15:*/		return 0x8221EAB0;
		  /* 8221EAB0h */ case   16:  		/* mr R3, R28 */
		/* 8221EAB0h case   16:*/		regs.R3 = regs.R28;
		/* 8221EAB0h case   16:*/		return 0x8221EAB4;
		  /* 8221EAB4h */ case   17:  		/* bl -791156 */
		/* 8221EAB4h case   17:*/		regs.LR = 0x8221EAB8; return 0x8215D840;
		/* 8221EAB4h case   17:*/		return 0x8221EAB8;
		  /* 8221EAB8h */ case   18:  		/* lwz R11, <#[R31 + 4]> */
		/* 8221EAB8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8221EAB8h case   18:*/		return 0x8221EABC;
		  /* 8221EABCh */ case   19:  		/* li R5, 0 */
		/* 8221EABCh case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8221EABCh case   19:*/		return 0x8221EAC0;
		  /* 8221EAC0h */ case   20:  		/* rlwimi R11, R3, 5, 24, 26 */
		/* 8221EAC0h case   20:*/		cpu::op::rlwimi<0,5,24,26>(regs,&regs.R11,regs.R3);
		/* 8221EAC0h case   20:*/		return 0x8221EAC4;
		  /* 8221EAC4h */ case   21:  		/* li R4, 3 */
		/* 8221EAC4h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 8221EAC4h case   21:*/		return 0x8221EAC8;
		  /* 8221EAC8h */ case   22:  		/* stw R11, <#[R31 + 4]> */
		/* 8221EAC8h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8221EAC8h case   22:*/		return 0x8221EACC;
		  /* 8221EACCh */ case   23:  		/* mr R3, R28 */
		/* 8221EACCh case   23:*/		regs.R3 = regs.R28;
		/* 8221EACCh case   23:*/		return 0x8221EAD0;
		  /* 8221EAD0h */ case   24:  		/* bl -791184 */
		/* 8221EAD0h case   24:*/		regs.LR = 0x8221EAD4; return 0x8215D840;
		/* 8221EAD0h case   24:*/		return 0x8221EAD4;
		  /* 8221EAD4h */ case   25:  		/* lwz R11, <#[R31 + 4]> */
		/* 8221EAD4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8221EAD4h case   25:*/		return 0x8221EAD8;
		  /* 8221EAD8h */ case   26:  		/* li R5, 0 */
		/* 8221EAD8h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8221EAD8h case   26:*/		return 0x8221EADC;
		  /* 8221EADCh */ case   27:  		/* rlwimi R11, R3, 16, 11, 15 */
		/* 8221EADCh case   27:*/		cpu::op::rlwimi<0,16,11,15>(regs,&regs.R11,regs.R3);
		/* 8221EADCh case   27:*/		return 0x8221EAE0;
		  /* 8221EAE0h */ case   28:  		/* li R4, 5 */
		/* 8221EAE0h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x5);
		/* 8221EAE0h case   28:*/		return 0x8221EAE4;
		  /* 8221EAE4h */ case   29:  		/* stw R11, <#[R31 + 4]> */
		/* 8221EAE4h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8221EAE4h case   29:*/		return 0x8221EAE8;
		  /* 8221EAE8h */ case   30:  		/* mr R3, R28 */
		/* 8221EAE8h case   30:*/		regs.R3 = regs.R28;
		/* 8221EAE8h case   30:*/		return 0x8221EAEC;
		  /* 8221EAECh */ case   31:  		/* bl -791212 */
		/* 8221EAECh case   31:*/		regs.LR = 0x8221EAF0; return 0x8215D840;
		/* 8221EAECh case   31:*/		return 0x8221EAF0;
		  /* 8221EAF0h */ case   32:  		/* lwz R11, <#[R31 + 4]> */
		/* 8221EAF0h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8221EAF0h case   32:*/		return 0x8221EAF4;
		  /* 8221EAF4h */ case   33:  		/* li R5, 0 */
		/* 8221EAF4h case   33:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8221EAF4h case   33:*/		return 0x8221EAF8;
		  /* 8221EAF8h */ case   34:  		/* rlwimi R11, R3, 24, 3, 7 */
		/* 8221EAF8h case   34:*/		cpu::op::rlwimi<0,24,3,7>(regs,&regs.R11,regs.R3);
		/* 8221EAF8h case   34:*/		return 0x8221EAFC;
		  /* 8221EAFCh */ case   35:  		/* li R4, 4 */
		/* 8221EAFCh case   35:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 8221EAFCh case   35:*/		return 0x8221EB00;
		  /* 8221EB00h */ case   36:  		/* stw R11, <#[R31 + 4]> */
		/* 8221EB00h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8221EB00h case   36:*/		return 0x8221EB04;
		  /* 8221EB04h */ case   37:  		/* mr R3, R28 */
		/* 8221EB04h case   37:*/		regs.R3 = regs.R28;
		/* 8221EB04h case   37:*/		return 0x8221EB08;
		  /* 8221EB08h */ case   38:  		/* bl -791240 */
		/* 8221EB08h case   38:*/		regs.LR = 0x8221EB0C; return 0x8215D840;
		/* 8221EB08h case   38:*/		return 0x8221EB0C;
		  /* 8221EB0Ch */ case   39:  		/* lwz R11, <#[R31 + 4]> */
		/* 8221EB0Ch case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8221EB0Ch case   39:*/		return 0x8221EB10;
		  /* 8221EB10h */ case   40:  		/* rlwimi R11, R3, 21, 8, 10 */
		/* 8221EB10h case   40:*/		cpu::op::rlwimi<0,21,8,10>(regs,&regs.R11,regs.R3);
		/* 8221EB10h case   40:*/		return 0x8221EB14;
		  /* 8221EB14h */ case   41:  		/* stw R11, <#[R31 + 4]> */
		/* 8221EB14h case   41:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8221EB14h case   41:*/		return 0x8221EB18;
		  /* 8221EB18h */ case   42:  		/* stw R11, <#[R31 + 36]> */
		/* 8221EB18h case   42:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 8221EB18h case   42:*/		return 0x8221EB1C;
		  /* 8221EB1Ch */ case   43:  		/* stw R11, <#[R31 + 40]> */
		/* 8221EB1Ch case   43:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 8221EB1Ch case   43:*/		return 0x8221EB20;
		  /* 8221EB20h */ case   44:  		/* stw R11, <#[R31 + 44]> */
		/* 8221EB20h case   44:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 8221EB20h case   44:*/		return 0x8221EB24;
		  /* 8221EB24h */ case   45:  		/* b 28 */
		/* 8221EB24h case   45:*/		return 0x8221EB40;
		/* 8221EB24h case   45:*/		return 0x8221EB28;
	}
	return 0x8221EB28;
} // Block from 8221EA70h-8221EB28h (46 instructions)

//////////////////////////////////////////////////////
// Block at 8221EB28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EB28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EB28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EB28);
		  /* 8221EB28h */ case    0:  		/* lis R11, 1 */
		/* 8221EB28h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x1);
		/* 8221EB28h case    0:*/		return 0x8221EB2C;
		  /* 8221EB2Ch */ case    1:  		/* lwz R10, <#[R31 + 4]> */
		/* 8221EB2Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8221EB2Ch case    1:*/		return 0x8221EB30;
		  /* 8221EB30h */ case    2:  		/* ori R11, R11, 1 */
		/* 8221EB30h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8221EB30h case    2:*/		return 0x8221EB34;
		  /* 8221EB34h */ case    3:  		/* rlwimi R10, R11, 0, 19, 31 */
		/* 8221EB34h case    3:*/		cpu::op::rlwimi<0,0,19,31>(regs,&regs.R10,regs.R11);
		/* 8221EB34h case    3:*/		return 0x8221EB38;
		  /* 8221EB38h */ case    4:  		/* rlwimi R10, R11, 0, 3, 15 */
		/* 8221EB38h case    4:*/		cpu::op::rlwimi<0,0,3,15>(regs,&regs.R10,regs.R11);
		/* 8221EB38h case    4:*/		return 0x8221EB3C;
		  /* 8221EB3Ch */ case    5:  		/* stw R10, <#[R31 + 4]> */
		/* 8221EB3Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8221EB3Ch case    5:*/		return 0x8221EB40;
	}
	return 0x8221EB40;
} // Block from 8221EB28h-8221EB40h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221EB40h
// Function '?CompileShader@Compiler@XGRAPHICS@@QAAHPAU_CS_COMPILED_SHADER@2@PAEPAU_ABSTRACT_STATE@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EB40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EB40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EB40);
		  /* 8221EB40h */ case    0:  		/* addi R1, R1, 128 */
		/* 8221EB40h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8221EB40h case    0:*/		return 0x8221EB44;
		  /* 8221EB44h */ case    1:  		/* b -1628320 */
		/* 8221EB44h case    1:*/		return 0x820912A4;
		/* 8221EB44h case    1:*/		return 0x8221EB48;
	}
	return 0x8221EB48;
} // Block from 8221EB40h-8221EB48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221EB48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EB48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EB48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EB48);
		  /* 8221EB48h */ case    0:  		/* mfspr R12, LR */
		/* 8221EB48h case    0:*/		regs.R12 = regs.LR;
		/* 8221EB48h case    0:*/		return 0x8221EB4C;
		  /* 8221EB4Ch */ case    1:  		/* bl -1628404 */
		/* 8221EB4Ch case    1:*/		regs.LR = 0x8221EB50; return 0x82091258;
		/* 8221EB4Ch case    1:*/		return 0x8221EB50;
		  /* 8221EB50h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8221EB50h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8221EB50h case    2:*/		return 0x8221EB54;
		  /* 8221EB54h */ case    3:  		/* li R4, 49 */
		/* 8221EB54h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x31);
		/* 8221EB54h case    3:*/		return 0x8221EB58;
		  /* 8221EB58h */ case    4:  		/* mr R30, R3 */
		/* 8221EB58h case    4:*/		regs.R30 = regs.R3;
		/* 8221EB58h case    4:*/		return 0x8221EB5C;
		  /* 8221EB5Ch */ case    5:  		/* bl -792140 */
		/* 8221EB5Ch case    5:*/		regs.LR = 0x8221EB60; return 0x8215D510;
		/* 8221EB5Ch case    5:*/		return 0x8221EB60;
		  /* 8221EB60h */ case    6:  		/* mr R31, R3 */
		/* 8221EB60h case    6:*/		regs.R31 = regs.R3;
		/* 8221EB60h case    6:*/		return 0x8221EB64;
		  /* 8221EB64h */ case    7:  		/* li R4, 50 */
		/* 8221EB64h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x32);
		/* 8221EB64h case    7:*/		return 0x8221EB68;
		  /* 8221EB68h */ case    8:  		/* mr R3, R30 */
		/* 8221EB68h case    8:*/		regs.R3 = regs.R30;
		/* 8221EB68h case    8:*/		return 0x8221EB6C;
		  /* 8221EB6Ch */ case    9:  		/* bl -792156 */
		/* 8221EB6Ch case    9:*/		regs.LR = 0x8221EB70; return 0x8215D510;
		/* 8221EB6Ch case    9:*/		return 0x8221EB70;
		  /* 8221EB70h */ case   10:  		/* lis R11, -32253 */
		/* 8221EB70h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8221EB70h case   10:*/		return 0x8221EB74;
		  /* 8221EB74h */ case   11:  		/* lis R10, -32252 */
		/* 8221EB74h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221EB74h case   11:*/		return 0x8221EB78;
		  /* 8221EB78h */ case   12:  		/* mr R28, R3 */
		/* 8221EB78h case   12:*/		regs.R28 = regs.R3;
		/* 8221EB78h case   12:*/		return 0x8221EB7C;
		  /* 8221EB7Ch */ case   13:  		/* cmplwi CR6, R31, 31 */
		/* 8221EB7Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x0000001F);
		/* 8221EB7Ch case   13:*/		return 0x8221EB80;
		  /* 8221EB80h */ case   14:  		/* addi R30, R11, 27460 */
		/* 8221EB80h case   14:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8221EB80h case   14:*/		return 0x8221EB84;
		  /* 8221EB84h */ case   15:  		/* addi R29, R10, -1768 */
		/* 8221EB84h case   15:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFF918);
		/* 8221EB84h case   15:*/		return 0x8221EB88;
		  /* 8221EB88h */ case   16:  		/* bc 12, CR6_EQ, 40 */
		/* 8221EB88h case   16:*/		if ( regs.CR[6].eq ) { return 0x8221EBB0;  }
		/* 8221EB88h case   16:*/		return 0x8221EB8C;
		  /* 8221EB8Ch */ case   17:  		/* cmplwi CR6, R31, 32 */
		/* 8221EB8Ch case   17:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000020);
		/* 8221EB8Ch case   17:*/		return 0x8221EB90;
		  /* 8221EB90h */ case   18:  		/* bc 12, CR6_EQ, 32 */
		/* 8221EB90h case   18:*/		if ( regs.CR[6].eq ) { return 0x8221EBB0;  }
		/* 8221EB90h case   18:*/		return 0x8221EB94;
		  /* 8221EB94h */ case   19:  		/* lis R11, -32252 */
		/* 8221EB94h case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221EB94h case   19:*/		return 0x8221EB98;
		  /* 8221EB98h */ case   20:  		/* mr R6, R29 */
		/* 8221EB98h case   20:*/		regs.R6 = regs.R29;
		/* 8221EB98h case   20:*/		return 0x8221EB9C;
		  /* 8221EB9Ch */ case   21:  		/* addi R5, R11, -1552 */
		/* 8221EB9Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFF9F0);
		/* 8221EB9Ch case   21:*/		return 0x8221EBA0;
		  /* 8221EBA0h */ case   22:  		/* mr R4, R30 */
		/* 8221EBA0h case   22:*/		regs.R4 = regs.R30;
		/* 8221EBA0h case   22:*/		return 0x8221EBA4;
		  /* 8221EBA4h */ case   23:  		/* li R7, 384 */
		/* 8221EBA4h case   23:*/		cpu::op::li<0>(regs,&regs.R7,0x180);
		/* 8221EBA4h case   23:*/		return 0x8221EBA8;
		  /* 8221EBA8h */ case   24:  		/* li R3, 0 */
		/* 8221EBA8h case   24:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221EBA8h case   24:*/		return 0x8221EBAC;
		  /* 8221EBACh */ case   25:  		/* bl -815012 */
		/* 8221EBACh case   25:*/		regs.LR = 0x8221EBB0; return 0x82157C08;
		/* 8221EBACh case   25:*/		return 0x8221EBB0;
	}
	return 0x8221EBB0;
} // Block from 8221EB48h-8221EBB0h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8221EBB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EBB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EBB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EBB0);
		  /* 8221EBB0h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8221EBB0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8221EBB0h case    0:*/		return 0x8221EBB4;
		  /* 8221EBB4h */ case    1:  		/* bc 12, CR6_EQ, 40 */
		/* 8221EBB4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8221EBDC;  }
		/* 8221EBB4h case    1:*/		return 0x8221EBB8;
		  /* 8221EBB8h */ case    2:  		/* cmplwi CR6, R28, 64 */
		/* 8221EBB8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000040);
		/* 8221EBB8h case    2:*/		return 0x8221EBBC;
		  /* 8221EBBCh */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 8221EBBCh case    3:*/		if ( regs.CR[6].eq ) { return 0x8221EBDC;  }
		/* 8221EBBCh case    3:*/		return 0x8221EBC0;
		  /* 8221EBC0h */ case    4:  		/* lis R11, -32252 */
		/* 8221EBC0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221EBC0h case    4:*/		return 0x8221EBC4;
		  /* 8221EBC4h */ case    5:  		/* mr R6, R29 */
		/* 8221EBC4h case    5:*/		regs.R6 = regs.R29;
		/* 8221EBC4h case    5:*/		return 0x8221EBC8;
		  /* 8221EBC8h */ case    6:  		/* addi R5, R11, -1640 */
		/* 8221EBC8h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFF998);
		/* 8221EBC8h case    6:*/		return 0x8221EBCC;
		  /* 8221EBCCh */ case    7:  		/* mr R4, R30 */
		/* 8221EBCCh case    7:*/		regs.R4 = regs.R30;
		/* 8221EBCCh case    7:*/		return 0x8221EBD0;
		  /* 8221EBD0h */ case    8:  		/* li R7, 388 */
		/* 8221EBD0h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x184);
		/* 8221EBD0h case    8:*/		return 0x8221EBD4;
		  /* 8221EBD4h */ case    9:  		/* li R3, 0 */
		/* 8221EBD4h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221EBD4h case    9:*/		return 0x8221EBD8;
		  /* 8221EBD8h */ case   10:  		/* bl -815056 */
		/* 8221EBD8h case   10:*/		regs.LR = 0x8221EBDC; return 0x82157C08;
		/* 8221EBD8h case   10:*/		return 0x8221EBDC;
	}
	return 0x8221EBDC;
} // Block from 8221EBB0h-8221EBDCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 8221EBDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EBDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EBDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EBDC);
		  /* 8221EBDCh */ case    0:  		/* cmplwi CR6, R31, 31 */
		/* 8221EBDCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x0000001F);
		/* 8221EBDCh case    0:*/		return 0x8221EBE0;
		  /* 8221EBE0h */ case    1:  		/* bc 12, CR6_LT, 28 */
		/* 8221EBE0h case    1:*/		if ( regs.CR[6].lt ) { return 0x8221EBFC;  }
		/* 8221EBE0h case    1:*/		return 0x8221EBE4;
		  /* 8221EBE4h */ case    2:  		/* cmplwi CR6, R31, 32 */
		/* 8221EBE4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000020);
		/* 8221EBE4h case    2:*/		return 0x8221EBE8;
		  /* 8221EBE8h */ case    3:  		/* bc 12, CR6_GT, 20 */
		/* 8221EBE8h case    3:*/		if ( regs.CR[6].gt ) { return 0x8221EBFC;  }
		/* 8221EBE8h case    3:*/		return 0x8221EBEC;
		  /* 8221EBECh */ case    4:  		/* addi R11, R28, -64 */
		/* 8221EBECh case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFC0);
		/* 8221EBECh case    4:*/		return 0x8221EBF0;
		  /* 8221EBF0h */ case    5:  		/* cntlzw R11, R11 */
		/* 8221EBF0h case    5:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8221EBF0h case    5:*/		return 0x8221EBF4;
		  /* 8221EBF4h */ case    6:  		/* rlwinm R3, R11, 27, 31, 31 */
		/* 8221EBF4h case    6:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R3,regs.R11);
		/* 8221EBF4h case    6:*/		return 0x8221EBF8;
		  /* 8221EBF8h */ case    7:  		/* b 8 */
		/* 8221EBF8h case    7:*/		return 0x8221EC00;
		/* 8221EBF8h case    7:*/		return 0x8221EBFC;
	}
	return 0x8221EBFC;
} // Block from 8221EBDCh-8221EBFCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 8221EBFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EBFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EBFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EBFC);
		  /* 8221EBFCh */ case    0:  		/* li R3, 0 */
		/* 8221EBFCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221EBFCh case    0:*/		return 0x8221EC00;
	}
	return 0x8221EC00;
} // Block from 8221EBFCh-8221EC00h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221EC00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EC00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EC00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EC00);
		  /* 8221EC00h */ case    0:  		/* addi R1, R1, 128 */
		/* 8221EC00h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8221EC00h case    0:*/		return 0x8221EC04;
		  /* 8221EC04h */ case    1:  		/* b -1628508 */
		/* 8221EC04h case    1:*/		return 0x820912A8;
		/* 8221EC04h case    1:*/		return 0x8221EC08;
	}
	return 0x8221EC08;
} // Block from 8221EC00h-8221EC08h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221EC08h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EC08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EC08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EC08);
		  /* 8221EC08h */ case    0:  		/* mfspr R12, LR */
		/* 8221EC08h case    0:*/		regs.R12 = regs.LR;
		/* 8221EC08h case    0:*/		return 0x8221EC0C;
		  /* 8221EC0Ch */ case    1:  		/* bl -1628640 */
		/* 8221EC0Ch case    1:*/		regs.LR = 0x8221EC10; return 0x8209122C;
		/* 8221EC0Ch case    1:*/		return 0x8221EC10;
		  /* 8221EC10h */ case    2:  		/* stfd FR31, <#[R1 - 136]> */
		/* 8221EC10h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF78) );
		/* 8221EC10h case    2:*/		return 0x8221EC14;
		  /* 8221EC14h */ case    3:  		/* stwu R1, <#[R1 - 416]> */
		/* 8221EC14h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE60);
		/* 8221EC14h case    3:*/		return 0x8221EC18;
		  /* 8221EC18h */ case    4:  		/* lis R10, -32216 */
		/* 8221EC18h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8228);
		/* 8221EC18h case    4:*/		return 0x8221EC1C;
		  /* 8221EC1Ch */ case    5:  		/* lis R11, -32253 */
		/* 8221EC1Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8221EC1Ch case    5:*/		return 0x8221EC20;
		  /* 8221EC20h */ case    6:  		/* addi R9, R10, 8496 */
		/* 8221EC20h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x2130);
		/* 8221EC20h case    6:*/		return 0x8221EC24;
		  /* 8221EC24h */ case    7:  		/* lis R10, -32252 */
		/* 8221EC24h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221EC24h case    7:*/		return 0x8221EC28;
		  /* 8221EC28h */ case    8:  		/* mr R21, R3 */
		/* 8221EC28h case    8:*/		regs.R21 = regs.R3;
		/* 8221EC28h case    8:*/		return 0x8221EC2C;
		  /* 8221EC2Ch */ case    9:  		/* mr R30, R4 */
		/* 8221EC2Ch case    9:*/		regs.R30 = regs.R4;
		/* 8221EC2Ch case    9:*/		return 0x8221EC30;
		  /* 8221EC30h */ case   10:  		/* cmplwi CR6, R3, 0 */
		/* 8221EC30h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8221EC30h case   10:*/		return 0x8221EC34;
		  /* 8221EC34h */ case   11:  		/* lwz R25, <#[R9 + 8]> */
		/* 8221EC34h case   11:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R9 + 0x00000008) );
		/* 8221EC34h case   11:*/		return 0x8221EC38;
		  /* 8221EC38h */ case   12:  		/* addi R18, R11, 27460 */
		/* 8221EC38h case   12:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R11,0x6B44);
		/* 8221EC38h case   12:*/		return 0x8221EC3C;
		  /* 8221EC3Ch */ case   13:  		/* addi R17, R10, -1768 */
		/* 8221EC3Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R10,0xFFFFF918);
		/* 8221EC3Ch case   13:*/		return 0x8221EC40;
		  /* 8221EC40h */ case   14:  		/* bc 4, CR6_EQ, 32 */
		/* 8221EC40h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8221EC60;  }
		/* 8221EC40h case   14:*/		return 0x8221EC44;
		  /* 8221EC44h */ case   15:  		/* lis R11, -32252 */
		/* 8221EC44h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221EC44h case   15:*/		return 0x8221EC48;
		  /* 8221EC48h */ case   16:  		/* mr R6, R17 */
		/* 8221EC48h case   16:*/		regs.R6 = regs.R17;
		/* 8221EC48h case   16:*/		return 0x8221EC4C;
		  /* 8221EC4Ch */ case   17:  		/* addi R5, R11, -8448 */
		/* 8221EC4Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDF00);
		/* 8221EC4Ch case   17:*/		return 0x8221EC50;
		  /* 8221EC50h */ case   18:  		/* mr R4, R18 */
		/* 8221EC50h case   18:*/		regs.R4 = regs.R18;
		/* 8221EC50h case   18:*/		return 0x8221EC54;
		  /* 8221EC54h */ case   19:  		/* li R7, 655 */
		/* 8221EC54h case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x28F);
		/* 8221EC54h case   19:*/		return 0x8221EC58;
		  /* 8221EC58h */ case   20:  		/* li R3, 0 */
		/* 8221EC58h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221EC58h case   20:*/		return 0x8221EC5C;
		  /* 8221EC5Ch */ case   21:  		/* bl -815188 */
		/* 8221EC5Ch case   21:*/		regs.LR = 0x8221EC60; return 0x82157C08;
		/* 8221EC5Ch case   21:*/		return 0x8221EC60;
	}
	return 0x8221EC60;
} // Block from 8221EC08h-8221EC60h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8221EC60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EC60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EC60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EC60);
		  /* 8221EC60h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8221EC60h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8221EC60h case    0:*/		return 0x8221EC64;
		  /* 8221EC64h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8221EC64h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8221EC84;  }
		/* 8221EC64h case    1:*/		return 0x8221EC68;
		  /* 8221EC68h */ case    2:  		/* lis R11, -32252 */
		/* 8221EC68h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221EC68h case    2:*/		return 0x8221EC6C;
		  /* 8221EC6Ch */ case    3:  		/* mr R6, R17 */
		/* 8221EC6Ch case    3:*/		regs.R6 = regs.R17;
		/* 8221EC6Ch case    3:*/		return 0x8221EC70;
		  /* 8221EC70h */ case    4:  		/* addi R5, R11, -22012 */
		/* 8221EC70h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAA04);
		/* 8221EC70h case    4:*/		return 0x8221EC74;
		  /* 8221EC74h */ case    5:  		/* mr R4, R18 */
		/* 8221EC74h case    5:*/		regs.R4 = regs.R18;
		/* 8221EC74h case    5:*/		return 0x8221EC78;
		  /* 8221EC78h */ case    6:  		/* li R7, 656 */
		/* 8221EC78h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x290);
		/* 8221EC78h case    6:*/		return 0x8221EC7C;
		  /* 8221EC7Ch */ case    7:  		/* li R3, 0 */
		/* 8221EC7Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221EC7Ch case    7:*/		return 0x8221EC80;
		  /* 8221EC80h */ case    8:  		/* bl -815224 */
		/* 8221EC80h case    8:*/		regs.LR = 0x8221EC84; return 0x82157C08;
		/* 8221EC80h case    8:*/		return 0x8221EC84;
	}
	return 0x8221EC84;
} // Block from 8221EC60h-8221EC84h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8221EC84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EC84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EC84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EC84);
		  /* 8221EC84h */ case    0:  		/* lis R11, -32252 */
		/* 8221EC84h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221EC84h case    0:*/		return 0x8221EC88;
		  /* 8221EC88h */ case    1:  		/* li R29, 67 */
		/* 8221EC88h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x43);
		/* 8221EC88h case    1:*/		return 0x8221EC8C;
		  /* 8221EC8Ch */ case    2:  		/* addi R26, R11, -2352 */
		/* 8221EC8Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFFF6D0);
		/* 8221EC8Ch case    2:*/		return 0x8221EC90;
		  /* 8221EC90h */ case    3:  		/* addi R27, R26, -4 */
		/* 8221EC90h case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R26,0xFFFFFFFC);
		/* 8221EC90h case    3:*/		return 0x8221EC94;
		  /* 8221EC94h */ case    4:  		/* lwzu R28, <#[R27 + 4]> */
		/* 8221EC94h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R27 + 0x00000004) );
		regs.R27 = (uint32)(regs.R27 + 0x00000004);
		/* 8221EC94h case    4:*/		return 0x8221EC98;
		  /* 8221EC98h */ case    5:  		/* mr R3, R21 */
		/* 8221EC98h case    5:*/		regs.R3 = regs.R21;
		/* 8221EC98h case    5:*/		return 0x8221EC9C;
		  /* 8221EC9Ch */ case    6:  		/* rlwinm R11, R28, 4, 0, 27 */
		/* 8221EC9Ch case    6:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R28);
		/* 8221EC9Ch case    6:*/		return 0x8221ECA0;
		  /* 8221ECA0h */ case    7:  		/* add R31, R11, R25 */
		/* 8221ECA0h case    7:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R25);
		/* 8221ECA0h case    7:*/		return 0x8221ECA4;
		  /* 8221ECA4h */ case    8:  		/* lwzx R4, <#[R11 + R25]> */
		/* 8221ECA4h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R25 + 0x00000000) );
		/* 8221ECA4h case    8:*/		return 0x8221ECA8;
		  /* 8221ECA8h */ case    9:  		/* bl 3976 */
		/* 8221ECA8h case    9:*/		regs.LR = 0x8221ECAC; return 0x8221FC30;
		/* 8221ECA8h case    9:*/		return 0x8221ECAC;
		  /* 8221ECACh */ case   10:  		/* lwz R11, <#[R31 + 4]> */
		/* 8221ECACh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8221ECACh case   10:*/		return 0x8221ECB0;
		  /* 8221ECB0h */ case   11:  		/* lwz R10, <#[R31 + 8]> */
		/* 8221ECB0h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8221ECB0h case   11:*/		return 0x8221ECB4;
		  /* 8221ECB4h */ case   12:  		/* addi R11, R11, 2 */
		/* 8221ECB4h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 8221ECB4h case   12:*/		return 0x8221ECB8;
		  /* 8221ECB8h */ case   13:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221ECB8h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221ECB8h case   13:*/		return 0x8221ECBC;
		  /* 8221ECBCh */ case   14:  		/* add R11, R3, R11 */
		/* 8221ECBCh case   14:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 8221ECBCh case   14:*/		return 0x8221ECC0;
		  /* 8221ECC0h */ case   15:  		/* mr R3, R21 */
		/* 8221ECC0h case   15:*/		regs.R3 = regs.R21;
		/* 8221ECC0h case   15:*/		return 0x8221ECC4;
		  /* 8221ECC4h */ case   16:  		/* lwz R9, <#[R11]> */
		/* 8221ECC4h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221ECC4h case   16:*/		return 0x8221ECC8;
		  /* 8221ECC8h */ case   17:  		/* andc R10, R9, R10 */
		/* 8221ECC8h case   17:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8221ECC8h case   17:*/		return 0x8221ECCC;
		  /* 8221ECCCh */ case   18:  		/* stw R10, <#[R11]> */
		/* 8221ECCCh case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221ECCCh case   18:*/		return 0x8221ECD0;
		  /* 8221ECD0h */ case   19:  		/* lwz R4, <#[R31]> */
		/* 8221ECD0h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 8221ECD0h case   19:*/		return 0x8221ECD4;
		  /* 8221ECD4h */ case   20:  		/* bl 3932 */
		/* 8221ECD4h case   20:*/		regs.LR = 0x8221ECD8; return 0x8221FC30;
		/* 8221ECD4h case   20:*/		return 0x8221ECD8;
		  /* 8221ECD8h */ case   21:  		/* lwz R11, <#[R31 + 4]> */
		/* 8221ECD8h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8221ECD8h case   21:*/		return 0x8221ECDC;
		  /* 8221ECDCh */ case   22:  		/* addi R11, R11, 2 */
		/* 8221ECDCh case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 8221ECDCh case   22:*/		return 0x8221ECE0;
		  /* 8221ECE0h */ case   23:  		/* mr R4, R28 */
		/* 8221ECE0h case   23:*/		regs.R4 = regs.R28;
		/* 8221ECE0h case   23:*/		return 0x8221ECE4;
		  /* 8221ECE4h */ case   24:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221ECE4h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221ECE4h case   24:*/		return 0x8221ECE8;
		  /* 8221ECE8h */ case   25:  		/* add R28, R3, R11 */
		/* 8221ECE8h case   25:*/		cpu::op::add<0>(regs,&regs.R28,regs.R3,regs.R11);
		/* 8221ECE8h case   25:*/		return 0x8221ECEC;
		  /* 8221ECECh */ case   26:  		/* mr R3, R30 */
		/* 8221ECECh case   26:*/		regs.R3 = regs.R30;
		/* 8221ECECh case   26:*/		return 0x8221ECF0;
		  /* 8221ECF0h */ case   27:  		/* bl -792544 */
		/* 8221ECF0h case   27:*/		regs.LR = 0x8221ECF4; return 0x8215D510;
		/* 8221ECF0h case   27:*/		return 0x8221ECF4;
		  /* 8221ECF4h */ case   28:  		/* lwz R11, <#[R31 + 12]> */
		/* 8221ECF4h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221ECF4h case   28:*/		return 0x8221ECF8;
		  /* 8221ECF8h */ case   29:  		/* lwz R10, <#[R31 + 8]> */
		/* 8221ECF8h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8221ECF8h case   29:*/		return 0x8221ECFC;
		  /* 8221ECFCh */ case   30:  		/* addic. R29, R29, -1 */
		/* 8221ECFCh case   30:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 8221ECFCh case   30:*/		return 0x8221ED00;
		  /* 8221ED00h */ case   31:  		/* slw R11, R3, R11 */
		/* 8221ED00h case   31:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 8221ED00h case   31:*/		return 0x8221ED04;
		  /* 8221ED04h */ case   32:  		/* lwz R9, <#[R28]> */
		/* 8221ED04h case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000000) );
		/* 8221ED04h case   32:*/		return 0x8221ED08;
		  /* 8221ED08h */ case   33:  		/* and R11, R11, R10 */
		/* 8221ED08h case   33:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8221ED08h case   33:*/		return 0x8221ED0C;
		  /* 8221ED0Ch */ case   34:  		/* or R11, R11, R9 */
		/* 8221ED0Ch case   34:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8221ED0Ch case   34:*/		return 0x8221ED10;
		  /* 8221ED10h */ case   35:  		/* stw R11, <#[R28]> */
		/* 8221ED10h case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8221ED10h case   35:*/		return 0x8221ED14;
		  /* 8221ED14h */ case   36:  		/* bc 4, CR0_EQ, -128 */
		/* 8221ED14h case   36:*/		if ( !regs.CR[0].eq ) { return 0x8221EC94;  }
		/* 8221ED14h case   36:*/		return 0x8221ED18;
		  /* 8221ED18h */ case   37:  		/* li R20, 0 */
		/* 8221ED18h case   37:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 8221ED18h case   37:*/		return 0x8221ED1C;
		  /* 8221ED1Ch */ case   38:  		/* mr R28, R20 */
		/* 8221ED1Ch case   38:*/		regs.R28 = regs.R20;
		/* 8221ED1Ch case   38:*/		return 0x8221ED20;
		  /* 8221ED20h */ case   39:  		/* addi R11, R26, 268 */
		/* 8221ED20h case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0x10C);
		/* 8221ED20h case   39:*/		return 0x8221ED24;
		  /* 8221ED24h */ case   40:  		/* mr R29, R20 */
		/* 8221ED24h case   40:*/		regs.R29 = regs.R20;
		/* 8221ED24h case   40:*/		return 0x8221ED28;
		  /* 8221ED28h */ case   41:  		/* addi R27, R11, 4 */
		/* 8221ED28h case   41:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x4);
		/* 8221ED28h case   41:*/		return 0x8221ED2C;
		  /* 8221ED2Ch */ case   42:  		/* lwzx R11, <#[R28 + R27]> */
		/* 8221ED2Ch case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R27 + 0x00000000) );
		/* 8221ED2Ch case   42:*/		return 0x8221ED30;
		  /* 8221ED30h */ case   43:  		/* cmplwi CR6, R11, 0 */
		/* 8221ED30h case   43:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221ED30h case   43:*/		return 0x8221ED34;
		  /* 8221ED34h */ case   44:  		/* bc 4, CR6_GT, 160 */
		/* 8221ED34h case   44:*/		if ( !regs.CR[6].gt ) { return 0x8221EDD4;  }
		/* 8221ED34h case   44:*/		return 0x8221ED38;
		  /* 8221ED38h */ case   45:  		/* addi R11, R26, 268 */
		/* 8221ED38h case   45:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0x10C);
		/* 8221ED38h case   45:*/		return 0x8221ED3C;
		  /* 8221ED3Ch */ case   46:  		/* addi R6, R1, 96 */
		/* 8221ED3Ch case   46:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x60);
		/* 8221ED3Ch case   46:*/		return 0x8221ED40;
		  /* 8221ED40h */ case   47:  		/* mr R5, R29 */
		/* 8221ED40h case   47:*/		regs.R5 = regs.R29;
		/* 8221ED40h case   47:*/		return 0x8221ED44;
		  /* 8221ED44h */ case   48:  		/* mr R3, R30 */
		/* 8221ED44h case   48:*/		regs.R3 = regs.R30;
		/* 8221ED44h case   48:*/		return 0x8221ED48;
		  /* 8221ED48h */ case   49:  		/* lwzx R4, <#[R28 + R11]> */
		/* 8221ED48h case   49:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 8221ED48h case   49:*/		return 0x8221ED4C;
		  /* 8221ED4Ch */ case   50:  		/* bl -1140 */
		/* 8221ED4Ch case   50:*/		regs.LR = 0x8221ED50; return 0x8221E8D8;
		/* 8221ED4Ch case   50:*/		return 0x8221ED50;
		  /* 8221ED50h */ case   51:  		/* mr R11, R3 */
		/* 8221ED50h case   51:*/		regs.R11 = regs.R3;
		/* 8221ED50h case   51:*/		return 0x8221ED54;
		  /* 8221ED54h */ case   52:  		/* mr R3, R21 */
		/* 8221ED54h case   52:*/		regs.R3 = regs.R21;
		/* 8221ED54h case   52:*/		return 0x8221ED58;
		  /* 8221ED58h */ case   53:  		/* rlwinm R11, R11, 4, 0, 27 */
		/* 8221ED58h case   53:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R11);
		/* 8221ED58h case   53:*/		return 0x8221ED5C;
		  /* 8221ED5Ch */ case   54:  		/* add R31, R11, R25 */
		/* 8221ED5Ch case   54:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R25);
		/* 8221ED5Ch case   54:*/		return 0x8221ED60;
		  /* 8221ED60h */ case   55:  		/* lwzx R4, <#[R11 + R25]> */
		/* 8221ED60h case   55:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R25 + 0x00000000) );
		/* 8221ED60h case   55:*/		return 0x8221ED64;
		  /* 8221ED64h */ case   56:  		/* bl 3788 */
		/* 8221ED64h case   56:*/		regs.LR = 0x8221ED68; return 0x8221FC30;
		/* 8221ED64h case   56:*/		return 0x8221ED68;
		  /* 8221ED68h */ case   57:  		/* lwz R11, <#[R31 + 4]> */
		/* 8221ED68h case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8221ED68h case   57:*/		return 0x8221ED6C;
		  /* 8221ED6Ch */ case   58:  		/* lwz R10, <#[R31 + 8]> */
		/* 8221ED6Ch case   58:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8221ED6Ch case   58:*/		return 0x8221ED70;
		  /* 8221ED70h */ case   59:  		/* addi R11, R11, 2 */
		/* 8221ED70h case   59:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 8221ED70h case   59:*/		return 0x8221ED74;
		  /* 8221ED74h */ case   60:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221ED74h case   60:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221ED74h case   60:*/		return 0x8221ED78;
		  /* 8221ED78h */ case   61:  		/* add R11, R3, R11 */
		/* 8221ED78h case   61:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 8221ED78h case   61:*/		return 0x8221ED7C;
		  /* 8221ED7Ch */ case   62:  		/* mr R3, R21 */
		/* 8221ED7Ch case   62:*/		regs.R3 = regs.R21;
		/* 8221ED7Ch case   62:*/		return 0x8221ED80;
		  /* 8221ED80h */ case   63:  		/* lwz R9, <#[R11]> */
		/* 8221ED80h case   63:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221ED80h case   63:*/		return 0x8221ED84;
		  /* 8221ED84h */ case   64:  		/* andc R10, R9, R10 */
		/* 8221ED84h case   64:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8221ED84h case   64:*/		return 0x8221ED88;
		  /* 8221ED88h */ case   65:  		/* stw R10, <#[R11]> */
		/* 8221ED88h case   65:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221ED88h case   65:*/		return 0x8221ED8C;
		  /* 8221ED8Ch */ case   66:  		/* lwz R4, <#[R31]> */
		/* 8221ED8Ch case   66:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 8221ED8Ch case   66:*/		return 0x8221ED90;
		  /* 8221ED90h */ case   67:  		/* bl 3744 */
		/* 8221ED90h case   67:*/		regs.LR = 0x8221ED94; return 0x8221FC30;
		/* 8221ED90h case   67:*/		return 0x8221ED94;
		  /* 8221ED94h */ case   68:  		/* lwz R11, <#[R31 + 4]> */
		/* 8221ED94h case   68:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8221ED94h case   68:*/		return 0x8221ED98;
		  /* 8221ED98h */ case   69:  		/* addi R11, R11, 2 */
		/* 8221ED98h case   69:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 8221ED98h case   69:*/		return 0x8221ED9C;
		  /* 8221ED9Ch */ case   70:  		/* lwz R10, <#[R31 + 12]> */
		/* 8221ED9Ch case   70:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221ED9Ch case   70:*/		return 0x8221EDA0;
		  /* 8221EDA0h */ case   71:  		/* lwz R9, <#[R1 + 96]> */
		/* 8221EDA0h case   71:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 8221EDA0h case   71:*/		return 0x8221EDA4;
		  /* 8221EDA4h */ case   72:  		/* addi R29, R29, 1 */
		/* 8221EDA4h case   72:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8221EDA4h case   72:*/		return 0x8221EDA8;
		  /* 8221EDA8h */ case   73:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221EDA8h case   73:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221EDA8h case   73:*/		return 0x8221EDAC;
		  /* 8221EDACh */ case   74:  		/* lwz R8, <#[R31 + 8]> */
		/* 8221EDACh case   74:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 8221EDACh case   74:*/		return 0x8221EDB0;
		  /* 8221EDB0h */ case   75:  		/* slw R10, R9, R10 */
		/* 8221EDB0h case   75:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8221EDB0h case   75:*/		return 0x8221EDB4;
		  /* 8221EDB4h */ case   76:  		/* add R11, R3, R11 */
		/* 8221EDB4h case   76:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 8221EDB4h case   76:*/		return 0x8221EDB8;
		  /* 8221EDB8h */ case   77:  		/* and R10, R10, R8 */
		/* 8221EDB8h case   77:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 8221EDB8h case   77:*/		return 0x8221EDBC;
		  /* 8221EDBCh */ case   78:  		/* lwz R9, <#[R11]> */
		/* 8221EDBCh case   78:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8221EDBCh case   78:*/		return 0x8221EDC0;
		  /* 8221EDC0h */ case   79:  		/* or R10, R10, R9 */
		/* 8221EDC0h case   79:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8221EDC0h case   79:*/		return 0x8221EDC4;
		  /* 8221EDC4h */ case   80:  		/* stw R10, <#[R11]> */
		/* 8221EDC4h case   80:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8221EDC4h case   80:*/		return 0x8221EDC8;
		  /* 8221EDC8h */ case   81:  		/* lwzx R11, <#[R28 + R27]> */
		/* 8221EDC8h case   81:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R27 + 0x00000000) );
		/* 8221EDC8h case   81:*/		return 0x8221EDCC;
		  /* 8221EDCCh */ case   82:  		/* cmplw CR6, R29, R11 */
		/* 8221EDCCh case   82:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8221EDCCh case   82:*/		return 0x8221EDD0;
		  /* 8221EDD0h */ case   83:  		/* bc 12, CR6_LT, -152 */
		/* 8221EDD0h case   83:*/		if ( regs.CR[6].lt ) { return 0x8221ED38;  }
		/* 8221EDD0h case   83:*/		return 0x8221EDD4;
	}
	return 0x8221EDD4;
} // Block from 8221EC84h-8221EDD4h (84 instructions)

//////////////////////////////////////////////////////
// Block at 8221EDD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EDD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EDD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EDD4);
		  /* 8221EDD4h */ case    0:  		/* addi R28, R28, 8 */
		/* 8221EDD4h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x8);
		/* 8221EDD4h case    0:*/		return 0x8221EDD8;
		  /* 8221EDD8h */ case    1:  		/* cmplwi CR6, R28, 48 */
		/* 8221EDD8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000030);
		/* 8221EDD8h case    1:*/		return 0x8221EDDC;
		  /* 8221EDDCh */ case    2:  		/* bc 12, CR6_LT, -188 */
		/* 8221EDDCh case    2:*/		if ( regs.CR[6].lt ) { return 0x8221ED20;  }
		/* 8221EDDCh case    2:*/		return 0x8221EDE0;
		  /* 8221EDE0h */ case    3:  		/* lwz R11, <#[R21 + 24]> */
		/* 8221EDE0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000018) );
		/* 8221EDE0h case    3:*/		return 0x8221EDE4;
		  /* 8221EDE4h */ case    4:  		/* mr R31, R20 */
		/* 8221EDE4h case    4:*/		regs.R31 = regs.R20;
		/* 8221EDE4h case    4:*/		return 0x8221EDE8;
		  /* 8221EDE8h */ case    5:  		/* addi R27, R1, 80 */
		/* 8221EDE8h case    5:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R1,0x50);
		/* 8221EDE8h case    5:*/		return 0x8221EDEC;
		  /* 8221EDECh */ case    6:  		/* addi R19, R11, 8 */
		/* 8221EDECh case    6:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R11,0x8);
		/* 8221EDECh case    6:*/		return 0x8221EDF0;
		  /* 8221EDF0h */ case    7:  		/* addi R11, R19, 4 */
		/* 8221EDF0h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R19,0x4);
		/* 8221EDF0h case    7:*/		return 0x8221EDF4;
		  /* 8221EDF4h */ case    8:  		/* addi R10, R19, 12 */
		/* 8221EDF4h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R19,0xC);
		/* 8221EDF4h case    8:*/		return 0x8221EDF8;
		  /* 8221EDF8h */ case    9:  		/* stw R11, <#[R1 + 80]> */
		/* 8221EDF8h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8221EDF8h case    9:*/		return 0x8221EDFC;
		  /* 8221EDFCh */ case   10:  		/* addi R11, R19, 20 */
		/* 8221EDFCh case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R19,0x14);
		/* 8221EDFCh case   10:*/		return 0x8221EE00;
		  /* 8221EE00h */ case   11:  		/* addi R9, R19, 16 */
		/* 8221EE00h case   11:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R19,0x10);
		/* 8221EE00h case   11:*/		return 0x8221EE04;
		  /* 8221EE04h */ case   12:  		/* stw R10, <#[R1 + 84]> */
		/* 8221EE04h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8221EE04h case   12:*/		return 0x8221EE08;
		  /* 8221EE08h */ case   13:  		/* stw R11, <#[R1 + 92]> */
		/* 8221EE08h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8221EE08h case   13:*/		return 0x8221EE0C;
		  /* 8221EE0Ch */ case   14:  		/* lis R11, -32252 */
		/* 8221EE0Ch case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221EE0Ch case   14:*/		return 0x8221EE10;
		  /* 8221EE10h */ case   15:  		/* stw R9, <#[R1 + 88]> */
		/* 8221EE10h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8221EE10h case   15:*/		return 0x8221EE14;
		  /* 8221EE14h */ case   16:  		/* addi R26, R11, -1208 */
		/* 8221EE14h case   16:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFFFB48);
		/* 8221EE14h case   16:*/		return 0x8221EE18;
		  /* 8221EE18h */ case   17:  		/* mr R5, R31 */
		/* 8221EE18h case   17:*/		regs.R5 = regs.R31;
		/* 8221EE18h case   17:*/		return 0x8221EE1C;
		  /* 8221EE1Ch */ case   18:  		/* li R4, 33 */
		/* 8221EE1Ch case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x21);
		/* 8221EE1Ch case   18:*/		return 0x8221EE20;
		  /* 8221EE20h */ case   19:  		/* mr R3, R30 */
		/* 8221EE20h case   19:*/		regs.R3 = regs.R30;
		/* 8221EE20h case   19:*/		return 0x8221EE24;
		  /* 8221EE24h */ case   20:  		/* bl -792036 */
		/* 8221EE24h case   20:*/		regs.LR = 0x8221EE28; return 0x8215D840;
		/* 8221EE24h case   20:*/		return 0x8221EE28;
		  /* 8221EE28h */ case   21:  		/* mr R28, R3 */
		/* 8221EE28h case   21:*/		regs.R28 = regs.R3;
		/* 8221EE28h case   21:*/		return 0x8221EE2C;
		  /* 8221EE2Ch */ case   22:  		/* mr R5, R31 */
		/* 8221EE2Ch case   22:*/		regs.R5 = regs.R31;
		/* 8221EE2Ch case   22:*/		return 0x8221EE30;
		  /* 8221EE30h */ case   23:  		/* li R4, 34 */
		/* 8221EE30h case   23:*/		cpu::op::li<0>(regs,&regs.R4,0x22);
		/* 8221EE30h case   23:*/		return 0x8221EE34;
		  /* 8221EE34h */ case   24:  		/* mr R3, R30 */
		/* 8221EE34h case   24:*/		regs.R3 = regs.R30;
		/* 8221EE34h case   24:*/		return 0x8221EE38;
		  /* 8221EE38h */ case   25:  		/* bl -792056 */
		/* 8221EE38h case   25:*/		regs.LR = 0x8221EE3C; return 0x8215D840;
		/* 8221EE38h case   25:*/		return 0x8221EE3C;
		  /* 8221EE3Ch */ case   26:  		/* cmplwi CR0, R3, 0 */
		/* 8221EE3Ch case   26:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8221EE3Ch case   26:*/		return 0x8221EE40;
		  /* 8221EE40h */ case   27:  		/* bc 12, CR0_EQ, 84 */
		/* 8221EE40h case   27:*/		if ( regs.CR[0].eq ) { return 0x8221EE94;  }
		/* 8221EE40h case   27:*/		return 0x8221EE44;
		  /* 8221EE44h */ case   28:  		/* addi R5, R1, 108 */
		/* 8221EE44h case   28:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x6C);
		/* 8221EE44h case   28:*/		return 0x8221EE48;
		  /* 8221EE48h */ case   29:  		/* mr R4, R31 */
		/* 8221EE48h case   29:*/		regs.R4 = regs.R31;
		/* 8221EE48h case   29:*/		return 0x8221EE4C;
		  /* 8221EE4Ch */ case   30:  		/* mr R3, R30 */
		/* 8221EE4Ch case   30:*/		regs.R3 = regs.R30;
		/* 8221EE4Ch case   30:*/		return 0x8221EE50;
		  /* 8221EE50h */ case   31:  		/* bl 93392 */
		/* 8221EE50h case   31:*/		regs.LR = 0x8221EE54; return 0x82235B20;
		/* 8221EE50h case   31:*/		return 0x8221EE54;
		  /* 8221EE54h */ case   32:  		/* lwz R29, <#[R27]> */
		/* 8221EE54h case   32:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R27 + 0x00000000) );
		/* 8221EE54h case   32:*/		return 0x8221EE58;
		  /* 8221EE58h */ case   33:  		/* rlwinm. R11, R28, 0, 0, 20 */
		/* 8221EE58h case   33:*/		cpu::op::rlwinm<1,0,0,20>(regs,&regs.R11,regs.R28);
		/* 8221EE58h case   33:*/		return 0x8221EE5C;
		  /* 8221EE5Ch */ case   34:  		/* stw R20, <#[R29]> */
		/* 8221EE5Ch case   34:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R29 + 0x00000000) );
		/* 8221EE5Ch case   34:*/		return 0x8221EE60;
		  /* 8221EE60h */ case   35:  		/* bc 12, CR0_EQ, 28 */
		/* 8221EE60h case   35:*/		if ( regs.CR[0].eq ) { return 0x8221EE7C;  }
		/* 8221EE60h case   35:*/		return 0x8221EE64;
		  /* 8221EE64h */ case   36:  		/* mr R6, R17 */
		/* 8221EE64h case   36:*/		regs.R6 = regs.R17;
		/* 8221EE64h case   36:*/		return 0x8221EE68;
		  /* 8221EE68h */ case   37:  		/* mr R5, R26 */
		/* 8221EE68h case   37:*/		regs.R5 = regs.R26;
		/* 8221EE68h case   37:*/		return 0x8221EE6C;
		  /* 8221EE6Ch */ case   38:  		/* mr R4, R18 */
		/* 8221EE6Ch case   38:*/		regs.R4 = regs.R18;
		/* 8221EE6Ch case   38:*/		return 0x8221EE70;
		  /* 8221EE70h */ case   39:  		/* li R7, 718 */
		/* 8221EE70h case   39:*/		cpu::op::li<0>(regs,&regs.R7,0x2CE);
		/* 8221EE70h case   39:*/		return 0x8221EE74;
		  /* 8221EE74h */ case   40:  		/* li R3, 0 */
		/* 8221EE74h case   40:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221EE74h case   40:*/		return 0x8221EE78;
		  /* 8221EE78h */ case   41:  		/* bl -815728 */
		/* 8221EE78h case   41:*/		regs.LR = 0x8221EE7C; return 0x82157C08;
		/* 8221EE78h case   41:*/		return 0x8221EE7C;
	}
	return 0x8221EE7C;
} // Block from 8221EDD4h-8221EE7Ch (42 instructions)

//////////////////////////////////////////////////////
// Block at 8221EE7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EE7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EE7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EE7C);
		  /* 8221EE7Ch */ case    0:  		/* lwz R11, <#[R1 + 108]> */
		/* 8221EE7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 8221EE7Ch case    0:*/		return 0x8221EE80;
		  /* 8221EE80h */ case    1:  		/* lwz R10, <#[R29]> */
		/* 8221EE80h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 8221EE80h case    1:*/		return 0x8221EE84;
		  /* 8221EE84h */ case    2:  		/* rlwinm R11, R11, 16, 0, 15 */
		/* 8221EE84h case    2:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R11,regs.R11);
		/* 8221EE84h case    2:*/		return 0x8221EE88;
		  /* 8221EE88h */ case    3:  		/* or R11, R11, R10 */
		/* 8221EE88h case    3:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8221EE88h case    3:*/		return 0x8221EE8C;
		  /* 8221EE8Ch */ case    4:  		/* or R11, R11, R28 */
		/* 8221EE8Ch case    4:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 8221EE8Ch case    4:*/		return 0x8221EE90;
		  /* 8221EE90h */ case    5:  		/* stw R11, <#[R29]> */
		/* 8221EE90h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8221EE90h case    5:*/		return 0x8221EE94;
	}
	return 0x8221EE94;
} // Block from 8221EE7Ch-8221EE94h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221EE94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EE94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EE94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EE94);
		  /* 8221EE94h */ case    0:  		/* addi R31, R31, 1 */
		/* 8221EE94h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8221EE94h case    0:*/		return 0x8221EE98;
		  /* 8221EE98h */ case    1:  		/* addi R27, R27, 4 */
		/* 8221EE98h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 8221EE98h case    1:*/		return 0x8221EE9C;
		  /* 8221EE9Ch */ case    2:  		/* cmplwi CR6, R31, 4 */
		/* 8221EE9Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000004);
		/* 8221EE9Ch case    2:*/		return 0x8221EEA0;
		  /* 8221EEA0h */ case    3:  		/* bc 12, CR6_LT, -136 */
		/* 8221EEA0h case    3:*/		if ( regs.CR[6].lt ) { return 0x8221EE18;  }
		/* 8221EEA0h case    3:*/		return 0x8221EEA4;
		  /* 8221EEA4h */ case    4:  		/* li R4, 46 */
		/* 8221EEA4h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x2E);
		/* 8221EEA4h case    4:*/		return 0x8221EEA8;
		  /* 8221EEA8h */ case    5:  		/* mr R3, R30 */
		/* 8221EEA8h case    5:*/		regs.R3 = regs.R30;
		/* 8221EEA8h case    5:*/		return 0x8221EEAC;
		  /* 8221EEACh */ case    6:  		/* bl -792988 */
		/* 8221EEACh case    6:*/		regs.LR = 0x8221EEB0; return 0x8215D510;
		/* 8221EEACh case    6:*/		return 0x8221EEB0;
		  /* 8221EEB0h */ case    7:  		/* mr R31, R3 */
		/* 8221EEB0h case    7:*/		regs.R31 = regs.R3;
		/* 8221EEB0h case    7:*/		return 0x8221EEB4;
		  /* 8221EEB4h */ case    8:  		/* mr R3, R30 */
		/* 8221EEB4h case    8:*/		regs.R3 = regs.R30;
		/* 8221EEB4h case    8:*/		return 0x8221EEB8;
		  /* 8221EEB8h */ case    9:  		/* bl -880 */
		/* 8221EEB8h case    9:*/		regs.LR = 0x8221EEBC; return 0x8221EB48;
		/* 8221EEB8h case    9:*/		return 0x8221EEBC;
		  /* 8221EEBCh */ case   10:  		/* rlwinm. R11, R31, 0, 0, 20 */
		/* 8221EEBCh case   10:*/		cpu::op::rlwinm<1,0,0,20>(regs,&regs.R11,regs.R31);
		/* 8221EEBCh case   10:*/		return 0x8221EEC0;
		  /* 8221EEC0h */ case   11:  		/* mr R29, R3 */
		/* 8221EEC0h case   11:*/		regs.R29 = regs.R3;
		/* 8221EEC0h case   11:*/		return 0x8221EEC4;
		  /* 8221EEC4h */ case   12:  		/* bc 12, CR0_EQ, 28 */
		/* 8221EEC4h case   12:*/		if ( regs.CR[0].eq ) { return 0x8221EEE0;  }
		/* 8221EEC4h case   12:*/		return 0x8221EEC8;
		  /* 8221EEC8h */ case   13:  		/* mr R6, R17 */
		/* 8221EEC8h case   13:*/		regs.R6 = regs.R17;
		/* 8221EEC8h case   13:*/		return 0x8221EECC;
		  /* 8221EECCh */ case   14:  		/* mr R5, R26 */
		/* 8221EECCh case   14:*/		regs.R5 = regs.R26;
		/* 8221EECCh case   14:*/		return 0x8221EED0;
		  /* 8221EED0h */ case   15:  		/* mr R4, R18 */
		/* 8221EED0h case   15:*/		regs.R4 = regs.R18;
		/* 8221EED0h case   15:*/		return 0x8221EED4;
		  /* 8221EED4h */ case   16:  		/* li R7, 739 */
		/* 8221EED4h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x2E3);
		/* 8221EED4h case   16:*/		return 0x8221EED8;
		  /* 8221EED8h */ case   17:  		/* li R3, 0 */
		/* 8221EED8h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221EED8h case   17:*/		return 0x8221EEDC;
		  /* 8221EEDCh */ case   18:  		/* bl -815828 */
		/* 8221EEDCh case   18:*/		regs.LR = 0x8221EEE0; return 0x82157C08;
		/* 8221EEDCh case   18:*/		return 0x8221EEE0;
	}
	return 0x8221EEE0;
} // Block from 8221EE94h-8221EEE0h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8221EEE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EEE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EEE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EEE0);
		  /* 8221EEE0h */ case    0:  		/* lwz R11, <#[R19 + 8]> */
		/* 8221EEE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 8221EEE0h case    0:*/		return 0x8221EEE4;
		  /* 8221EEE4h */ case    1:  		/* li R4, 652 */
		/* 8221EEE4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x28C);
		/* 8221EEE4h case    1:*/		return 0x8221EEE8;
		  /* 8221EEE8h */ case    2:  		/* mr R3, R30 */
		/* 8221EEE8h case    2:*/		regs.R3 = regs.R30;
		/* 8221EEE8h case    2:*/		return 0x8221EEEC;
		  /* 8221EEECh */ case    3:  		/* rlwimi R11, R29, 16, 15, 15 */
		/* 8221EEECh case    3:*/		cpu::op::rlwimi<0,16,15,15>(regs,&regs.R11,regs.R29);
		/* 8221EEECh case    3:*/		return 0x8221EEF0;
		  /* 8221EEF0h */ case    4:  		/* rlwimi R11, R31, 0, 20, 31 */
		/* 8221EEF0h case    4:*/		cpu::op::rlwimi<0,0,20,31>(regs,&regs.R11,regs.R31);
		/* 8221EEF0h case    4:*/		return 0x8221EEF4;
		  /* 8221EEF4h */ case    5:  		/* stw R11, <#[R19 + 8]> */
		/* 8221EEF4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 8221EEF4h case    5:*/		return 0x8221EEF8;
		  /* 8221EEF8h */ case    6:  		/* bl -793064 */
		/* 8221EEF8h case    6:*/		regs.LR = 0x8221EEFC; return 0x8215D510;
		/* 8221EEF8h case    6:*/		return 0x8221EEFC;
		  /* 8221EEFCh */ case    7:  		/* mr R31, R3 */
		/* 8221EEFCh case    7:*/		regs.R31 = regs.R3;
		/* 8221EEFCh case    7:*/		return 0x8221EF00;
		  /* 8221EF00h */ case    8:  		/* li R4, 957 */
		/* 8221EF00h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x3BD);
		/* 8221EF00h case    8:*/		return 0x8221EF04;
		  /* 8221EF04h */ case    9:  		/* mr R3, R30 */
		/* 8221EF04h case    9:*/		regs.R3 = regs.R30;
		/* 8221EF04h case    9:*/		return 0x8221EF08;
		  /* 8221EF08h */ case   10:  		/* bl -793080 */
		/* 8221EF08h case   10:*/		regs.LR = 0x8221EF0C; return 0x8215D510;
		/* 8221EF08h case   10:*/		return 0x8221EF0C;
		  /* 8221EF0Ch */ case   11:  		/* cmplwi CR6, R3, 4 */
		/* 8221EF0Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000004);
		/* 8221EF0Ch case   11:*/		return 0x8221EF10;
		  /* 8221EF10h */ case   12:  		/* bc 4, CR6_EQ, 28 */
		/* 8221EF10h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8221EF2C;  }
		/* 8221EF10h case   12:*/		return 0x8221EF14;
		  /* 8221EF14h */ case   13:  		/* rlwinm. R11, R31, 0, 28, 31 */
		/* 8221EF14h case   13:*/		cpu::op::rlwinm<1,0,28,31>(regs,&regs.R11,regs.R31);
		/* 8221EF14h case   13:*/		return 0x8221EF18;
		  /* 8221EF18h */ case   14:  		/* bc 12, CR0_EQ, 56 */
		/* 8221EF18h case   14:*/		if ( regs.CR[0].eq ) { return 0x8221EF50;  }
		/* 8221EF18h case   14:*/		return 0x8221EF1C;
		  /* 8221EF1Ch */ case   15:  		/* lis R11, -32252 */
		/* 8221EF1Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221EF1Ch case   15:*/		return 0x8221EF20;
		  /* 8221EF20h */ case   16:  		/* li R7, 755 */
		/* 8221EF20h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x2F3);
		/* 8221EF20h case   16:*/		return 0x8221EF24;
		  /* 8221EF24h */ case   17:  		/* addi R5, R11, -1228 */
		/* 8221EF24h case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFB34);
		/* 8221EF24h case   17:*/		return 0x8221EF28;
		  /* 8221EF28h */ case   18:  		/* b 24 */
		/* 8221EF28h case   18:*/		return 0x8221EF40;
		/* 8221EF28h case   18:*/		return 0x8221EF2C;
	}
	return 0x8221EF2C;
} // Block from 8221EEE0h-8221EF2Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8221EF2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EF2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EF2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EF2C);
		  /* 8221EF2Ch */ case    0:  		/* rlwinm. R11, R31, 0, 27, 31 */
		/* 8221EF2Ch case    0:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R11,regs.R31);
		/* 8221EF2Ch case    0:*/		return 0x8221EF30;
		  /* 8221EF30h */ case    1:  		/* bc 12, CR0_EQ, 32 */
		/* 8221EF30h case    1:*/		if ( regs.CR[0].eq ) { return 0x8221EF50;  }
		/* 8221EF30h case    1:*/		return 0x8221EF34;
		  /* 8221EF34h */ case    2:  		/* lis R11, -32252 */
		/* 8221EF34h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221EF34h case    2:*/		return 0x8221EF38;
		  /* 8221EF38h */ case    3:  		/* li R7, 759 */
		/* 8221EF38h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x2F7);
		/* 8221EF38h case    3:*/		return 0x8221EF3C;
		  /* 8221EF3Ch */ case    4:  		/* addi R5, R11, -1248 */
		/* 8221EF3Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFB20);
		/* 8221EF3Ch case    4:*/		return 0x8221EF40;
	}
	return 0x8221EF40;
} // Block from 8221EF2Ch-8221EF40h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221EF40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EF40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EF40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EF40);
		  /* 8221EF40h */ case    0:  		/* mr R6, R17 */
		/* 8221EF40h case    0:*/		regs.R6 = regs.R17;
		/* 8221EF40h case    0:*/		return 0x8221EF44;
		  /* 8221EF44h */ case    1:  		/* mr R4, R18 */
		/* 8221EF44h case    1:*/		regs.R4 = regs.R18;
		/* 8221EF44h case    1:*/		return 0x8221EF48;
		  /* 8221EF48h */ case    2:  		/* li R3, 0 */
		/* 8221EF48h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221EF48h case    2:*/		return 0x8221EF4C;
		  /* 8221EF4Ch */ case    3:  		/* bl -815940 */
		/* 8221EF4Ch case    3:*/		regs.LR = 0x8221EF50; return 0x82157C08;
		/* 8221EF4Ch case    3:*/		return 0x8221EF50;
	}
	return 0x8221EF50;
} // Block from 8221EF40h-8221EF50h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221EF50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EF50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EF50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EF50);
		  /* 8221EF50h */ case    0:  		/* lwz R11, <#[R19]> */
		/* 8221EF50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 8221EF50h case    0:*/		return 0x8221EF54;
		  /* 8221EF54h */ case    1:  		/* li R4, 654 */
		/* 8221EF54h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x28E);
		/* 8221EF54h case    1:*/		return 0x8221EF58;
		  /* 8221EF58h */ case    2:  		/* mr R3, R30 */
		/* 8221EF58h case    2:*/		regs.R3 = regs.R30;
		/* 8221EF58h case    2:*/		return 0x8221EF5C;
		  /* 8221EF5Ch */ case    3:  		/* rlwimi R11, R31, 0, 18, 31 */
		/* 8221EF5Ch case    3:*/		cpu::op::rlwimi<0,0,18,31>(regs,&regs.R11,regs.R31);
		/* 8221EF5Ch case    3:*/		return 0x8221EF60;
		  /* 8221EF60h */ case    4:  		/* rlwinm R11, R11, 0, 16, 13 */
		/* 8221EF60h case    4:*/		cpu::op::rlwinm<0,0,16,13>(regs,&regs.R11,regs.R11);
		/* 8221EF60h case    4:*/		return 0x8221EF64;
		  /* 8221EF64h */ case    5:  		/* stw R11, <#[R19]> */
		/* 8221EF64h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 8221EF64h case    5:*/		return 0x8221EF68;
		  /* 8221EF68h */ case    6:  		/* lwz R11, <#[R21 + 28]> */
		/* 8221EF68h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000001C) );
		/* 8221EF68h case    6:*/		return 0x8221EF6C;
		  /* 8221EF6Ch */ case    7:  		/* addi R31, R11, 8 */
		/* 8221EF6Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x8);
		/* 8221EF6Ch case    7:*/		return 0x8221EF70;
		  /* 8221EF70h */ case    8:  		/* bl -793184 */
		/* 8221EF70h case    8:*/		regs.LR = 0x8221EF74; return 0x8215D510;
		/* 8221EF70h case    8:*/		return 0x8221EF74;
		  /* 8221EF74h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 8221EF74h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8221EF74h case    9:*/		return 0x8221EF78;
		  /* 8221EF78h */ case   10:  		/* bc 4, CR0_EQ, 12 */
		/* 8221EF78h case   10:*/		if ( !regs.CR[0].eq ) { return 0x8221EF84;  }
		/* 8221EF78h case   10:*/		return 0x8221EF7C;
		  /* 8221EF7Ch */ case   11:  		/* sth R20, <#[R31 + 8]> */
		/* 8221EF7Ch case   11:*/		cpu::mem::store16( regs, regs.R20, (uint32)(regs.R31 + 0x00000008) );
		/* 8221EF7Ch case   11:*/		return 0x8221EF80;
		  /* 8221EF80h */ case   12:  		/* b 64 */
		/* 8221EF80h case   12:*/		return 0x8221EFC0;
		/* 8221EF80h case   12:*/		return 0x8221EF84;
	}
	return 0x8221EF84;
} // Block from 8221EF50h-8221EF84h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8221EF84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EF84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EF84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EF84);
		  /* 8221EF84h */ case    0:  		/* li R4, 654 */
		/* 8221EF84h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x28E);
		/* 8221EF84h case    0:*/		return 0x8221EF88;
		  /* 8221EF88h */ case    1:  		/* mr R3, R30 */
		/* 8221EF88h case    1:*/		regs.R3 = regs.R30;
		/* 8221EF88h case    1:*/		return 0x8221EF8C;
		  /* 8221EF8Ch */ case    2:  		/* bl -793212 */
		/* 8221EF8Ch case    2:*/		regs.LR = 0x8221EF90; return 0x8215D510;
		/* 8221EF8Ch case    2:*/		return 0x8221EF90;
		  /* 8221EF90h */ case    3:  		/* cmplwi CR6, R3, 1 */
		/* 8221EF90h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 8221EF90h case    3:*/		return 0x8221EF94;
		  /* 8221EF94h */ case    4:  		/* bc 12, CR6_EQ, 32 */
		/* 8221EF94h case    4:*/		if ( regs.CR[6].eq ) { return 0x8221EFB4;  }
		/* 8221EF94h case    4:*/		return 0x8221EF98;
		  /* 8221EF98h */ case    5:  		/* lis R11, -32252 */
		/* 8221EF98h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221EF98h case    5:*/		return 0x8221EF9C;
		  /* 8221EF9Ch */ case    6:  		/* mr R6, R17 */
		/* 8221EF9Ch case    6:*/		regs.R6 = regs.R17;
		/* 8221EF9Ch case    6:*/		return 0x8221EFA0;
		  /* 8221EFA0h */ case    7:  		/* addi R5, R11, -1296 */
		/* 8221EFA0h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFAF0);
		/* 8221EFA0h case    7:*/		return 0x8221EFA4;
		  /* 8221EFA4h */ case    8:  		/* mr R4, R18 */
		/* 8221EFA4h case    8:*/		regs.R4 = regs.R18;
		/* 8221EFA4h case    8:*/		return 0x8221EFA8;
		  /* 8221EFA8h */ case    9:  		/* li R7, 786 */
		/* 8221EFA8h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x312);
		/* 8221EFA8h case    9:*/		return 0x8221EFAC;
		  /* 8221EFACh */ case   10:  		/* li R3, 0 */
		/* 8221EFACh case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221EFACh case   10:*/		return 0x8221EFB0;
		  /* 8221EFB0h */ case   11:  		/* bl -816040 */
		/* 8221EFB0h case   11:*/		regs.LR = 0x8221EFB4; return 0x82157C08;
		/* 8221EFB0h case   11:*/		return 0x8221EFB4;
	}
	return 0x8221EFB4;
} // Block from 8221EF84h-8221EFB4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8221EFB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EFB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EFB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EFB4);
		  /* 8221EFB4h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8221EFB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8221EFB4h case    0:*/		return 0x8221EFB8;
		  /* 8221EFB8h */ case    1:  		/* oris R11, R11, 65535 */
		/* 8221EFB8h case    1:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0xFFFF);
		/* 8221EFB8h case    1:*/		return 0x8221EFBC;
		  /* 8221EFBCh */ case    2:  		/* stw R11, <#[R31 + 8]> */
		/* 8221EFBCh case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8221EFBCh case    2:*/		return 0x8221EFC0;
	}
	return 0x8221EFC0;
} // Block from 8221EFB4h-8221EFC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221EFC0h
// Function '?InitCompiledRenderState@XGRAPHICS@@YAXPAU_CP_COMPILED_PROGRAM@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221EFC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221EFC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221EFC0);
		  /* 8221EFC0h */ case    0:  		/* li R4, 572 */
		/* 8221EFC0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x23C);
		/* 8221EFC0h case    0:*/		return 0x8221EFC4;
		  /* 8221EFC4h */ case    1:  		/* mr R3, R30 */
		/* 8221EFC4h case    1:*/		regs.R3 = regs.R30;
		/* 8221EFC4h case    1:*/		return 0x8221EFC8;
		  /* 8221EFC8h */ case    2:  		/* bl -793272 */
		/* 8221EFC8h case    2:*/		regs.LR = 0x8221EFCC; return 0x8215D510;
		/* 8221EFC8h case    2:*/		return 0x8221EFCC;
		  /* 8221EFCCh */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 8221EFCCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8221EFCCh case    3:*/		return 0x8221EFD0;
		  /* 8221EFD0h */ case    4:  		/* addi R10, R3, -1 */
		/* 8221EFD0h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0xFFFFFFFF);
		/* 8221EFD0h case    4:*/		return 0x8221EFD4;
		  /* 8221EFD4h */ case    5:  		/* stw R20, <#[R31 + 12]> */
		/* 8221EFD4h case    5:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221EFD4h case    5:*/		return 0x8221EFD8;
		  /* 8221EFD8h */ case    6:  		/* ori R11, R11, 65535 */
		/* 8221EFD8h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xFFFF);
		/* 8221EFD8h case    6:*/		return 0x8221EFDC;
		  /* 8221EFDCh */ case    7:  		/* stw R20, <#[R31 + 16]> */
		/* 8221EFDCh case    7:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R31 + 0x00000010) );
		/* 8221EFDCh case    7:*/		return 0x8221EFE0;
		  /* 8221EFE0h */ case    8:  		/* cntlzw R10, R10 */
		/* 8221EFE0h case    8:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 8221EFE0h case    8:*/		return 0x8221EFE4;
		  /* 8221EFE4h */ case    9:  		/* stw R11, <#[R31 + 8]> */
		/* 8221EFE4h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8221EFE4h case    9:*/		return 0x8221EFE8;
		  /* 8221EFE8h */ case   10:  		/* lis R11, -32252 */
		/* 8221EFE8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221EFE8h case   10:*/		return 0x8221EFEC;
		  /* 8221EFECh */ case   11:  		/* mr R27, R20 */
		/* 8221EFECh case   11:*/		regs.R27 = regs.R20;
		/* 8221EFECh case   11:*/		return 0x8221EFF0;
		  /* 8221EFF0h */ case   12:  		/* sth R20, <#[R31 + 8]> */
		/* 8221EFF0h case   12:*/		cpu::mem::store16( regs, regs.R20, (uint32)(regs.R31 + 0x00000008) );
		/* 8221EFF0h case   12:*/		return 0x8221EFF4;
		  /* 8221EFF4h */ case   13:  		/* rlwinm R25, R10, 27, 31, 31 */
		/* 8221EFF4h case   13:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R25,regs.R10);
		/* 8221EFF4h case   13:*/		return 0x8221EFF8;
		  /* 8221EFF8h */ case   14:  		/* mr R28, R20 */
		/* 8221EFF8h case   14:*/		regs.R28 = regs.R20;
		/* 8221EFF8h case   14:*/		return 0x8221EFFC;
		  /* 8221EFFCh */ case   15:  		/* li R22, 1 */
		/* 8221EFFCh case   15:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 8221EFFCh case   15:*/		return 0x8221F000;
		  /* 8221F000h */ case   16:  		/* addi R26, R11, -1368 */
		/* 8221F000h case   16:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFFFAA8);
		/* 8221F000h case   16:*/		return 0x8221F004;
		  /* 8221F004h */ case   17:  		/* addi R5, R1, 128 */
		/* 8221F004h case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 8221F004h case   17:*/		return 0x8221F008;
		  /* 8221F008h */ case   18:  		/* lwz R3, <#[R21 + 52]> */
		/* 8221F008h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R21 + 0x00000034) );
		/* 8221F008h case   18:*/		return 0x8221F00C;
		  /* 8221F00Ch */ case   19:  		/* mr R4, R27 */
		/* 8221F00Ch case   19:*/		regs.R4 = regs.R27;
		/* 8221F00Ch case   19:*/		return 0x8221F010;
		  /* 8221F010h */ case   20:  		/* bl -792352 */
		/* 8221F010h case   20:*/		regs.LR = 0x8221F014; return 0x8215D8F0;
		/* 8221F010h case   20:*/		return 0x8221F014;
		  /* 8221F014h */ case   21:  		/* lwz R11, <#[R1 + 128]> */
		/* 8221F014h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 8221F014h case   21:*/		return 0x8221F018;
		  /* 8221F018h */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 8221F018h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221F018h case   22:*/		return 0x8221F01C;
		  /* 8221F01Ch */ case   23:  		/* bc 12, CR6_EQ, 264 */
		/* 8221F01Ch case   23:*/		if ( regs.CR[6].eq ) { return 0x8221F124;  }
		/* 8221F01Ch case   23:*/		return 0x8221F020;
		  /* 8221F020h */ case   24:  		/* lwz R11, <#[R1 + 264]> */
		/* 8221F020h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000108) );
		/* 8221F020h case   24:*/		return 0x8221F024;
		  /* 8221F024h */ case   25:  		/* cmplwi CR6, R11, 0 */
		/* 8221F024h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221F024h case   25:*/		return 0x8221F028;
		  /* 8221F028h */ case   26:  		/* bc 12, CR6_EQ, 32 */
		/* 8221F028h case   26:*/		if ( regs.CR[6].eq ) { return 0x8221F048;  }
		/* 8221F028h case   26:*/		return 0x8221F02C;
		  /* 8221F02Ch */ case   27:  		/* cmplwi CR6, R25, 0 */
		/* 8221F02Ch case   27:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8221F02Ch case   27:*/		return 0x8221F030;
		  /* 8221F030h */ case   28:  		/* bc 12, CR6_EQ, 216 */
		/* 8221F030h case   28:*/		if ( regs.CR[6].eq ) { return 0x8221F108;  }
		/* 8221F030h case   28:*/		return 0x8221F034;
		  /* 8221F034h */ case   29:  		/* lwz R11, <#[R31 + 8]> */
		/* 8221F034h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8221F034h case   29:*/		return 0x8221F038;
		  /* 8221F038h */ case   30:  		/* slw R10, R22, R27 */
		/* 8221F038h case   30:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R22,regs.R27);
		/* 8221F038h case   30:*/		return 0x8221F03C;
		  /* 8221F03Ch */ case   31:  		/* andc R11, R11, R10 */
		/* 8221F03Ch case   31:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8221F03Ch case   31:*/		return 0x8221F040;
		  /* 8221F040h */ case   32:  		/* sth R11, <#[R31 + 10]> */
		/* 8221F040h case   32:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R31 + 0x0000000A) );
		/* 8221F040h case   32:*/		return 0x8221F044;
		  /* 8221F044h */ case   33:  		/* b 196 */
		/* 8221F044h case   33:*/		return 0x8221F108;
		/* 8221F044h case   33:*/		return 0x8221F048;
	}
	return 0x8221F048;
} // Block from 8221EFC0h-8221F048h (34 instructions)

//////////////////////////////////////////////////////
// Block at 8221F048h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F048( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F048) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F048);
		  /* 8221F048h */ case    0:  		/* lwz R11, <#[R1 + 268]> */
		/* 8221F048h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000010C) );
		/* 8221F048h case    0:*/		return 0x8221F04C;
		  /* 8221F04Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8221F04Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221F04Ch case    1:*/		return 0x8221F050;
		  /* 8221F050h */ case    2:  		/* bc 12, CR6_EQ, 184 */
		/* 8221F050h case    2:*/		if ( regs.CR[6].eq ) { return 0x8221F108;  }
		/* 8221F050h case    2:*/		return 0x8221F054;
		  /* 8221F054h */ case    3:  		/* mr R29, R20 */
		/* 8221F054h case    3:*/		regs.R29 = regs.R20;
		/* 8221F054h case    3:*/		return 0x8221F058;
		  /* 8221F058h */ case    4:  		/* rlwinm R11, R29, 2, 0, 29 */
		/* 8221F058h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R29);
		/* 8221F058h case    4:*/		return 0x8221F05C;
		  /* 8221F05Ch */ case    5:  		/* addi R10, R1, 148 */
		/* 8221F05Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x94);
		/* 8221F05Ch case    5:*/		return 0x8221F060;
		  /* 8221F060h */ case    6:  		/* li R4, 13 */
		/* 8221F060h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0xD);
		/* 8221F060h case    6:*/		return 0x8221F064;
		  /* 8221F064h */ case    7:  		/* mr R3, R30 */
		/* 8221F064h case    7:*/		regs.R3 = regs.R30;
		/* 8221F064h case    7:*/		return 0x8221F068;
		  /* 8221F068h */ case    8:  		/* lwzx R5, <#[R11 + R10]> */
		/* 8221F068h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8221F068h case    8:*/		return 0x8221F06C;
		  /* 8221F06Ch */ case    9:  		/* bl -792620 */
		/* 8221F06Ch case    9:*/		regs.LR = 0x8221F070; return 0x8215D840;
		/* 8221F06Ch case    9:*/		return 0x8221F070;
		  /* 8221F070h */ case   10:  		/* cmplwi CR6, R29, 1 */
		/* 8221F070h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000001);
		/* 8221F070h case   10:*/		return 0x8221F074;
		  /* 8221F074h */ case   11:  		/* bc 12, CR6_LT, 72 */
		/* 8221F074h case   11:*/		if ( regs.CR[6].lt ) { return 0x8221F0BC;  }
		/* 8221F074h case   11:*/		return 0x8221F078;
		  /* 8221F078h */ case   12:  		/* bc 12, CR6_EQ, 60 */
		/* 8221F078h case   12:*/		if ( regs.CR[6].eq ) { return 0x8221F0B4;  }
		/* 8221F078h case   12:*/		return 0x8221F07C;
		  /* 8221F07Ch */ case   13:  		/* cmplwi CR6, R29, 3 */
		/* 8221F07Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000003);
		/* 8221F07Ch case   13:*/		return 0x8221F080;
		  /* 8221F080h */ case   14:  		/* bc 12, CR6_LT, 44 */
		/* 8221F080h case   14:*/		if ( regs.CR[6].lt ) { return 0x8221F0AC;  }
		/* 8221F080h case   14:*/		return 0x8221F084;
		  /* 8221F084h */ case   15:  		/* bc 12, CR6_EQ, 32 */
		/* 8221F084h case   15:*/		if ( regs.CR[6].eq ) { return 0x8221F0A4;  }
		/* 8221F084h case   15:*/		return 0x8221F088;
		  /* 8221F088h */ case   16:  		/* mr R6, R17 */
		/* 8221F088h case   16:*/		regs.R6 = regs.R17;
		/* 8221F088h case   16:*/		return 0x8221F08C;
		  /* 8221F08Ch */ case   17:  		/* mr R5, R26 */
		/* 8221F08Ch case   17:*/		regs.R5 = regs.R26;
		/* 8221F08Ch case   17:*/		return 0x8221F090;
		  /* 8221F090h */ case   18:  		/* mr R4, R18 */
		/* 8221F090h case   18:*/		regs.R4 = regs.R18;
		/* 8221F090h case   18:*/		return 0x8221F094;
		  /* 8221F094h */ case   19:  		/* li R7, 877 */
		/* 8221F094h case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x36D);
		/* 8221F094h case   19:*/		return 0x8221F098;
		  /* 8221F098h */ case   20:  		/* li R3, 0 */
		/* 8221F098h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221F098h case   20:*/		return 0x8221F09C;
		  /* 8221F09Ch */ case   21:  		/* bl -816276 */
		/* 8221F09Ch case   21:*/		regs.LR = 0x8221F0A0; return 0x82157C08;
		/* 8221F09Ch case   21:*/		return 0x8221F0A0;
		  /* 8221F0A0h */ case   22:  		/* b 92 */
		/* 8221F0A0h case   22:*/		return 0x8221F0FC;
		/* 8221F0A0h case   22:*/		return 0x8221F0A4;
	}
	return 0x8221F0A4;
} // Block from 8221F048h-8221F0A4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8221F0A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F0A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F0A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F0A4);
		  /* 8221F0A4h */ case    0:  		/* rlwinm R11, R3, 0, 28, 28 */
		/* 8221F0A4h case    0:*/		cpu::op::rlwinm<0,0,28,28>(regs,&regs.R11,regs.R3);
		/* 8221F0A4h case    0:*/		return 0x8221F0A8;
		  /* 8221F0A8h */ case    1:  		/* b 24 */
		/* 8221F0A8h case    1:*/		return 0x8221F0C0;
		/* 8221F0A8h case    1:*/		return 0x8221F0AC;
	}
	return 0x8221F0AC;
} // Block from 8221F0A4h-8221F0ACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221F0ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F0AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F0AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F0AC);
		  /* 8221F0ACh */ case    0:  		/* rlwinm R11, R3, 0, 29, 29 */
		/* 8221F0ACh case    0:*/		cpu::op::rlwinm<0,0,29,29>(regs,&regs.R11,regs.R3);
		/* 8221F0ACh case    0:*/		return 0x8221F0B0;
		  /* 8221F0B0h */ case    1:  		/* b 16 */
		/* 8221F0B0h case    1:*/		return 0x8221F0C0;
		/* 8221F0B0h case    1:*/		return 0x8221F0B4;
	}
	return 0x8221F0B4;
} // Block from 8221F0ACh-8221F0B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221F0B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F0B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F0B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F0B4);
		  /* 8221F0B4h */ case    0:  		/* rlwinm R11, R3, 0, 30, 30 */
		/* 8221F0B4h case    0:*/		cpu::op::rlwinm<0,0,30,30>(regs,&regs.R11,regs.R3);
		/* 8221F0B4h case    0:*/		return 0x8221F0B8;
		  /* 8221F0B8h */ case    1:  		/* b 8 */
		/* 8221F0B8h case    1:*/		return 0x8221F0C0;
		/* 8221F0B8h case    1:*/		return 0x8221F0BC;
	}
	return 0x8221F0BC;
} // Block from 8221F0B4h-8221F0BCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221F0BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F0BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F0BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F0BC);
		  /* 8221F0BCh */ case    0:  		/* rlwinm R11, R3, 0, 31, 31 */
		/* 8221F0BCh case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R3);
		/* 8221F0BCh case    0:*/		return 0x8221F0C0;
	}
	return 0x8221F0C0;
} // Block from 8221F0BCh-8221F0C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221F0C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F0C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F0C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F0C0);
		  /* 8221F0C0h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8221F0C0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221F0C0h case    0:*/		return 0x8221F0C4;
		  /* 8221F0C4h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 8221F0C4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8221F0FC;  }
		/* 8221F0C4h case    1:*/		return 0x8221F0C8;
		  /* 8221F0C8h */ case    2:  		/* cmplwi CR6, R28, 32 */
		/* 8221F0C8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000020);
		/* 8221F0C8h case    2:*/		return 0x8221F0CC;
		  /* 8221F0CCh */ case    3:  		/* add R11, R28, R29 */
		/* 8221F0CCh case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R28,regs.R29);
		/* 8221F0CCh case    3:*/		return 0x8221F0D0;
		  /* 8221F0D0h */ case    4:  		/* bc 4, CR6_LT, 24 */
		/* 8221F0D0h case    4:*/		if ( !regs.CR[6].lt ) { return 0x8221F0E8;  }
		/* 8221F0D0h case    4:*/		return 0x8221F0D4;
		  /* 8221F0D4h */ case    5:  		/* lwz R10, <#[R31 + 12]> */
		/* 8221F0D4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221F0D4h case    5:*/		return 0x8221F0D8;
		  /* 8221F0D8h */ case    6:  		/* slw R11, R22, R11 */
		/* 8221F0D8h case    6:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R22,regs.R11);
		/* 8221F0D8h case    6:*/		return 0x8221F0DC;
		  /* 8221F0DCh */ case    7:  		/* or R11, R11, R10 */
		/* 8221F0DCh case    7:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8221F0DCh case    7:*/		return 0x8221F0E0;
		  /* 8221F0E0h */ case    8:  		/* stw R11, <#[R31 + 12]> */
		/* 8221F0E0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221F0E0h case    8:*/		return 0x8221F0E4;
		  /* 8221F0E4h */ case    9:  		/* b 24 */
		/* 8221F0E4h case    9:*/		return 0x8221F0FC;
		/* 8221F0E4h case    9:*/		return 0x8221F0E8;
	}
	return 0x8221F0E8;
} // Block from 8221F0C0h-8221F0E8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8221F0E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F0E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F0E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F0E8);
		  /* 8221F0E8h */ case    0:  		/* addi R11, R11, -32 */
		/* 8221F0E8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFE0);
		/* 8221F0E8h case    0:*/		return 0x8221F0EC;
		  /* 8221F0ECh */ case    1:  		/* lwz R10, <#[R31 + 16]> */
		/* 8221F0ECh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8221F0ECh case    1:*/		return 0x8221F0F0;
		  /* 8221F0F0h */ case    2:  		/* slw R11, R22, R11 */
		/* 8221F0F0h case    2:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R22,regs.R11);
		/* 8221F0F0h case    2:*/		return 0x8221F0F4;
		  /* 8221F0F4h */ case    3:  		/* or R11, R11, R10 */
		/* 8221F0F4h case    3:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8221F0F4h case    3:*/		return 0x8221F0F8;
		  /* 8221F0F8h */ case    4:  		/* stw R11, <#[R31 + 16]> */
		/* 8221F0F8h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8221F0F8h case    4:*/		return 0x8221F0FC;
	}
	return 0x8221F0FC;
} // Block from 8221F0E8h-8221F0FCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221F0FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F0FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F0FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F0FC);
		  /* 8221F0FCh */ case    0:  		/* addi R29, R29, 1 */
		/* 8221F0FCh case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8221F0FCh case    0:*/		return 0x8221F100;
		  /* 8221F100h */ case    1:  		/* cmpwi CR6, R29, 4 */
		/* 8221F100h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000004);
		/* 8221F100h case    1:*/		return 0x8221F104;
		  /* 8221F104h */ case    2:  		/* bc 12, CR6_LT, -172 */
		/* 8221F104h case    2:*/		if ( regs.CR[6].lt ) { return 0x8221F058;  }
		/* 8221F104h case    2:*/		return 0x8221F108;
	}
	return 0x8221F108;
} // Block from 8221F0FCh-8221F108h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221F108h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F108);
		  /* 8221F108h */ case    0:  		/* lwz R11, <#[R1 + 260]> */
		/* 8221F108h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000104) );
		/* 8221F108h case    0:*/		return 0x8221F10C;
		  /* 8221F10Ch */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8221F10Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8221F10Ch case    1:*/		return 0x8221F110;
		  /* 8221F110h */ case    2:  		/* bc 4, CR6_EQ, 20 */
		/* 8221F110h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8221F124;  }
		/* 8221F110h case    2:*/		return 0x8221F114;
		  /* 8221F114h */ case    3:  		/* lhz R11, <#[R31 + 8]> */
		/* 8221F114h case    3:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8221F114h case    3:*/		return 0x8221F118;
		  /* 8221F118h */ case    4:  		/* slw R10, R22, R27 */
		/* 8221F118h case    4:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R22,regs.R27);
		/* 8221F118h case    4:*/		return 0x8221F11C;
		  /* 8221F11Ch */ case    5:  		/* or R11, R10, R11 */
		/* 8221F11Ch case    5:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8221F11Ch case    5:*/		return 0x8221F120;
		  /* 8221F120h */ case    6:  		/* sth R11, <#[R31 + 8]> */
		/* 8221F120h case    6:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8221F120h case    6:*/		return 0x8221F124;
	}
	return 0x8221F124;
} // Block from 8221F108h-8221F124h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221F124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F124);
		  /* 8221F124h */ case    0:  		/* addi R28, R28, 4 */
		/* 8221F124h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 8221F124h case    0:*/		return 0x8221F128;
		  /* 8221F128h */ case    1:  		/* addi R27, R27, 1 */
		/* 8221F128h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 8221F128h case    1:*/		return 0x8221F12C;
		  /* 8221F12Ch */ case    2:  		/* cmplwi CR6, R28, 64 */
		/* 8221F12Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000040);
		/* 8221F12Ch case    2:*/		return 0x8221F130;
		  /* 8221F130h */ case    3:  		/* bc 12, CR6_LT, -300 */
		/* 8221F130h case    3:*/		if ( regs.CR[6].lt ) { return 0x8221F004;  }
		/* 8221F130h case    3:*/		return 0x8221F134;
		  /* 8221F134h */ case    4:  		/* li R4, 95 */
		/* 8221F134h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x5F);
		/* 8221F134h case    4:*/		return 0x8221F138;
		  /* 8221F138h */ case    5:  		/* lwz R31, <#[R21 + 32]> */
		/* 8221F138h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R21 + 0x00000020) );
		/* 8221F138h case    5:*/		return 0x8221F13C;
		  /* 8221F13Ch */ case    6:  		/* mr R3, R30 */
		/* 8221F13Ch case    6:*/		regs.R3 = regs.R30;
		/* 8221F13Ch case    6:*/		return 0x8221F140;
		  /* 8221F140h */ case    7:  		/* bl -793648 */
		/* 8221F140h case    7:*/		regs.LR = 0x8221F144; return 0x8215D510;
		/* 8221F140h case    7:*/		return 0x8221F144;
		  /* 8221F144h */ case    8:  		/* cntlzw R11, R3 */
		/* 8221F144h case    8:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R3);
		/* 8221F144h case    8:*/		return 0x8221F148;
		  /* 8221F148h */ case    9:  		/* lwz R10, <#[R31 + 24]> */
		/* 8221F148h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 8221F148h case    9:*/		return 0x8221F14C;
		  /* 8221F14Ch */ case   10:  		/* addi R5, R1, 80 */
		/* 8221F14Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8221F14Ch case   10:*/		return 0x8221F150;
		  /* 8221F150h */ case   11:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 8221F150h case   11:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 8221F150h case   11:*/		return 0x8221F154;
		  /* 8221F154h */ case   12:  		/* mr R4, R30 */
		/* 8221F154h case   12:*/		regs.R4 = regs.R30;
		/* 8221F154h case   12:*/		return 0x8221F158;
		  /* 8221F158h */ case   13:  		/* rlwimi R10, R11, 16, 15, 15 */
		/* 8221F158h case   13:*/		cpu::op::rlwimi<0,16,15,15>(regs,&regs.R10,regs.R11);
		/* 8221F158h case   13:*/		return 0x8221F15C;
		  /* 8221F15Ch */ case   14:  		/* mr R3, R21 */
		/* 8221F15Ch case   14:*/		regs.R3 = regs.R21;
		/* 8221F15Ch case   14:*/		return 0x8221F160;
		  /* 8221F160h */ case   15:  		/* stw R10, <#[R31 + 24]> */
		/* 8221F160h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 8221F160h case   15:*/		return 0x8221F164;
		  /* 8221F164h */ case   16:  		/* bl -1964 */
		/* 8221F164h case   16:*/		regs.LR = 0x8221F168; return 0x8221E9B8;
		/* 8221F164h case   16:*/		return 0x8221F168;
		  /* 8221F168h */ case   17:  		/* li R4, 571 */
		/* 8221F168h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x23B);
		/* 8221F168h case   17:*/		return 0x8221F16C;
		  /* 8221F16Ch */ case   18:  		/* mr R3, R30 */
		/* 8221F16Ch case   18:*/		regs.R3 = regs.R30;
		/* 8221F16Ch case   18:*/		return 0x8221F170;
		  /* 8221F170h */ case   19:  		/* mr R29, R22 */
		/* 8221F170h case   19:*/		regs.R29 = regs.R22;
		/* 8221F170h case   19:*/		return 0x8221F174;
		  /* 8221F174h */ case   20:  		/* bl -793700 */
		/* 8221F174h case   20:*/		regs.LR = 0x8221F178; return 0x8215D510;
		/* 8221F174h case   20:*/		return 0x8221F178;
		  /* 8221F178h */ case   21:  		/* cmplwi CR6, R3, 2 */
		/* 8221F178h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000002);
		/* 8221F178h case   21:*/		return 0x8221F17C;
		  /* 8221F17Ch */ case   22:  		/* bc 4, CR6_EQ, 32 */
		/* 8221F17Ch case   22:*/		if ( !regs.CR[6].eq ) { return 0x8221F19C;  }
		/* 8221F17Ch case   22:*/		return 0x8221F180;
		  /* 8221F180h */ case   23:  		/* li R4, 570 */
		/* 8221F180h case   23:*/		cpu::op::li<0>(regs,&regs.R4,0x23A);
		/* 8221F180h case   23:*/		return 0x8221F184;
		  /* 8221F184h */ case   24:  		/* mr R3, R30 */
		/* 8221F184h case   24:*/		regs.R3 = regs.R30;
		/* 8221F184h case   24:*/		return 0x8221F188;
		  /* 8221F188h */ case   25:  		/* bl -793720 */
		/* 8221F188h case   25:*/		regs.LR = 0x8221F18C; return 0x8215D510;
		/* 8221F188h case   25:*/		return 0x8221F18C;
		  /* 8221F18Ch */ case   26:  		/* addi R11, R3, -2 */
		/* 8221F18Ch case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0xFFFFFFFE);
		/* 8221F18Ch case   26:*/		return 0x8221F190;
		  /* 8221F190h */ case   27:  		/* subfic R11, R11, 0 */
		/* 8221F190h case   27:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 8221F190h case   27:*/		return 0x8221F194;
		  /* 8221F194h */ case   28:  		/* subfe R11, R11, R11 */
		/* 8221F194h case   28:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8221F194h case   28:*/		return 0x8221F198;
		  /* 8221F198h */ case   29:  		/* and R29, R11, R29 */
		/* 8221F198h case   29:*/		cpu::op::and<0>(regs,&regs.R29,regs.R11,regs.R29);
		/* 8221F198h case   29:*/		return 0x8221F19C;
	}
	return 0x8221F19C;
} // Block from 8221F124h-8221F19Ch (30 instructions)

//////////////////////////////////////////////////////
// Block at 8221F19Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F19C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F19C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F19C);
		  /* 8221F19Ch */ case    0:  		/* lwz R11, <#[R31 + 28]> */
		/* 8221F19Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221F19Ch case    0:*/		return 0x8221F1A0;
		  /* 8221F1A0h */ case    1:  		/* li R4, 154 */
		/* 8221F1A0h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x9A);
		/* 8221F1A0h case    1:*/		return 0x8221F1A4;
		  /* 8221F1A4h */ case    2:  		/* mr R3, R30 */
		/* 8221F1A4h case    2:*/		regs.R3 = regs.R30;
		/* 8221F1A4h case    2:*/		return 0x8221F1A8;
		  /* 8221F1A8h */ case    3:  		/* rlwimi R11, R29, 3, 27, 28 */
		/* 8221F1A8h case    3:*/		cpu::op::rlwimi<0,3,27,28>(regs,&regs.R11,regs.R29);
		/* 8221F1A8h case    3:*/		return 0x8221F1AC;
		  /* 8221F1ACh */ case    4:  		/* stw R11, <#[R31 + 28]> */
		/* 8221F1ACh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221F1ACh case    4:*/		return 0x8221F1B0;
		  /* 8221F1B0h */ case    5:  		/* bl -793760 */
		/* 8221F1B0h case    5:*/		regs.LR = 0x8221F1B4; return 0x8215D510;
		/* 8221F1B0h case    5:*/		return 0x8221F1B4;
		  /* 8221F1B4h */ case    6:  		/* lwz R11, <#[R31 + 32]> */
		/* 8221F1B4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 8221F1B4h case    6:*/		return 0x8221F1B8;
		  /* 8221F1B8h */ case    7:  		/* li R4, 28 */
		/* 8221F1B8h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x1C);
		/* 8221F1B8h case    7:*/		return 0x8221F1BC;
		  /* 8221F1BCh */ case    8:  		/* rlwimi R11, R3, 0, 26, 31 */
		/* 8221F1BCh case    8:*/		cpu::op::rlwimi<0,0,26,31>(regs,&regs.R11,regs.R3);
		/* 8221F1BCh case    8:*/		return 0x8221F1C0;
		  /* 8221F1C0h */ case    9:  		/* mr R3, R30 */
		/* 8221F1C0h case    9:*/		regs.R3 = regs.R30;
		/* 8221F1C0h case    9:*/		return 0x8221F1C4;
		  /* 8221F1C4h */ case   10:  		/* stw R11, <#[R31 + 32]> */
		/* 8221F1C4h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 8221F1C4h case   10:*/		return 0x8221F1C8;
		  /* 8221F1C8h */ case   11:  		/* bl -793784 */
		/* 8221F1C8h case   11:*/		regs.LR = 0x8221F1CC; return 0x8215D510;
		/* 8221F1C8h case   11:*/		return 0x8221F1CC;
		  /* 8221F1CCh */ case   12:  		/* lwz R11, <#[R31 + 16]> */
		/* 8221F1CCh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8221F1CCh case   12:*/		return 0x8221F1D0;
		  /* 8221F1D0h */ case   13:  		/* li R4, 27 */
		/* 8221F1D0h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x1B);
		/* 8221F1D0h case   13:*/		return 0x8221F1D4;
		  /* 8221F1D4h */ case   14:  		/* rlwimi R11, R3, 0, 29, 31 */
		/* 8221F1D4h case   14:*/		cpu::op::rlwimi<0,0,29,31>(regs,&regs.R11,regs.R3);
		/* 8221F1D4h case   14:*/		return 0x8221F1D8;
		  /* 8221F1D8h */ case   15:  		/* mr R3, R30 */
		/* 8221F1D8h case   15:*/		regs.R3 = regs.R30;
		/* 8221F1D8h case   15:*/		return 0x8221F1DC;
		  /* 8221F1DCh */ case   16:  		/* stw R11, <#[R31 + 16]> */
		/* 8221F1DCh case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8221F1DCh case   16:*/		return 0x8221F1E0;
		  /* 8221F1E0h */ case   17:  		/* bl -793808 */
		/* 8221F1E0h case   17:*/		regs.LR = 0x8221F1E4; return 0x8215D510;
		/* 8221F1E0h case   17:*/		return 0x8221F1E4;
		  /* 8221F1E4h */ case   18:  		/* lwz R11, <#[R31 + 16]> */
		/* 8221F1E4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8221F1E4h case   18:*/		return 0x8221F1E8;
		  /* 8221F1E8h */ case   19:  		/* li R4, 29 */
		/* 8221F1E8h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x1D);
		/* 8221F1E8h case   19:*/		return 0x8221F1EC;
		  /* 8221F1ECh */ case   20:  		/* rlwimi R11, R3, 3, 28, 28 */
		/* 8221F1ECh case   20:*/		cpu::op::rlwimi<0,3,28,28>(regs,&regs.R11,regs.R3);
		/* 8221F1ECh case   20:*/		return 0x8221F1F0;
		  /* 8221F1F0h */ case   21:  		/* mr R3, R30 */
		/* 8221F1F0h case   21:*/		regs.R3 = regs.R30;
		/* 8221F1F0h case   21:*/		return 0x8221F1F4;
		  /* 8221F1F4h */ case   22:  		/* stw R11, <#[R31 + 16]> */
		/* 8221F1F4h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8221F1F4h case   22:*/		return 0x8221F1F8;
		  /* 8221F1F8h */ case   23:  		/* bl -793832 */
		/* 8221F1F8h case   23:*/		regs.LR = 0x8221F1FC; return 0x8215D510;
		/* 8221F1F8h case   23:*/		return 0x8221F1FC;
		  /* 8221F1FCh */ case   24:  		/* lwz R11, <#[R31 + 16]> */
		/* 8221F1FCh case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8221F1FCh case   24:*/		return 0x8221F200;
		  /* 8221F200h */ case   25:  		/* li R4, 671 */
		/* 8221F200h case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x29F);
		/* 8221F200h case   25:*/		return 0x8221F204;
		  /* 8221F204h */ case   26:  		/* rlwinm R11, R11, 0, 8, 31 */
		/* 8221F204h case   26:*/		cpu::op::rlwinm<0,0,8,31>(regs,&regs.R11,regs.R11);
		/* 8221F204h case   26:*/		return 0x8221F208;
		  /* 8221F208h */ case   27:  		/* mr R3, R30 */
		/* 8221F208h case   27:*/		regs.R3 = regs.R30;
		/* 8221F208h case   27:*/		return 0x8221F20C;
		  /* 8221F20Ch */ case   28:  		/* rlwinm R11, R11, 0, 28, 26 */
		/* 8221F20Ch case   28:*/		cpu::op::rlwinm<0,0,28,26>(regs,&regs.R11,regs.R11);
		/* 8221F20Ch case   28:*/		return 0x8221F210;
		  /* 8221F210h */ case   29:  		/* stw R11, <#[R31 + 16]> */
		/* 8221F210h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8221F210h case   29:*/		return 0x8221F214;
		  /* 8221F214h */ case   30:  		/* bl -793860 */
		/* 8221F214h case   30:*/		regs.LR = 0x8221F218; return 0x8215D510;
		/* 8221F214h case   30:*/		return 0x8221F218;
		  /* 8221F218h */ case   31:  		/* lwz R11, <#[R31 + 40]> */
		/* 8221F218h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 8221F218h case   31:*/		return 0x8221F21C;
		  /* 8221F21Ch */ case   32:  		/* lwz R10, <#[R31 + 20]> */
		/* 8221F21Ch case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8221F21Ch case   32:*/		return 0x8221F220;
		  /* 8221F220h */ case   33:  		/* li R4, 128 */
		/* 8221F220h case   33:*/		cpu::op::li<0>(regs,&regs.R4,0x80);
		/* 8221F220h case   33:*/		return 0x8221F224;
		  /* 8221F224h */ case   34:  		/* rlwimi R3, R11, 0, 0, 28 */
		/* 8221F224h case   34:*/		cpu::op::rlwimi<0,0,0,28>(regs,&regs.R3,regs.R11);
		/* 8221F224h case   34:*/		return 0x8221F228;
		  /* 8221F228h */ case   35:  		/* rlwinm R11, R10, 0, 0, 27 */
		/* 8221F228h case   35:*/		cpu::op::rlwinm<0,0,0,27>(regs,&regs.R11,regs.R10);
		/* 8221F228h case   35:*/		return 0x8221F22C;
		  /* 8221F22Ch */ case   36:  		/* stw R3, <#[R31 + 40]> */
		/* 8221F22Ch case   36:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000028) );
		/* 8221F22Ch case   36:*/		return 0x8221F230;
		  /* 8221F230h */ case   37:  		/* mr R3, R30 */
		/* 8221F230h case   37:*/		regs.R3 = regs.R30;
		/* 8221F230h case   37:*/		return 0x8221F234;
		  /* 8221F234h */ case   38:  		/* stw R11, <#[R31 + 20]> */
		/* 8221F234h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8221F234h case   38:*/		return 0x8221F238;
		  /* 8221F238h */ case   39:  		/* lwz R11, <#[R21 + 36]> */
		/* 8221F238h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000024) );
		/* 8221F238h case   39:*/		return 0x8221F23C;
		  /* 8221F23Ch */ case   40:  		/* addi R31, R11, 8 */
		/* 8221F23Ch case   40:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x8);
		/* 8221F23Ch case   40:*/		return 0x8221F240;
		  /* 8221F240h */ case   41:  		/* bl -67912 */
		/* 8221F240h case   41:*/		regs.LR = 0x8221F244; return 0x8220E8F8;
		/* 8221F240h case   41:*/		return 0x8221F244;
		  /* 8221F244h */ case   42:  		/* lis R11, -32256 */
		/* 8221F244h case   42:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8221F244h case   42:*/		return 0x8221F248;
		  /* 8221F248h */ case   43:  		/* li R5, 4 */
		/* 8221F248h case   43:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8221F248h case   43:*/		return 0x8221F24C;
		  /* 8221F24Ch */ case   44:  		/* li R4, 12 */
		/* 8221F24Ch case   44:*/		cpu::op::li<0>(regs,&regs.R4,0xC);
		/* 8221F24Ch case   44:*/		return 0x8221F250;
		  /* 8221F250h */ case   45:  		/* lfs FR31, <#[R11 + 1820]> */
		/* 8221F250h case   45:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R11 + 0x0000071C) );
		/* 8221F250h case   45:*/		return 0x8221F254;
		  /* 8221F254h */ case   46:  		/* fmuls FR1, FR1, FR31 */
		/* 8221F254h case   46:*/		cpu::op::fmuls<0>(regs,&regs.FR1,regs.FR1,regs.FR31);
		/* 8221F254h case   46:*/		return 0x8221F258;
		  /* 8221F258h */ case   47:  		/* bl 223712 */
		/* 8221F258h case   47:*/		regs.LR = 0x8221F25C; return 0x82255C38;
		/* 8221F258h case   47:*/		return 0x8221F25C;
		  /* 8221F25Ch */ case   48:  		/* rlwinm R11, R3, 0, 16, 31 */
		/* 8221F25Ch case   48:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R3);
		/* 8221F25Ch case   48:*/		return 0x8221F260;
		  /* 8221F260h */ case   49:  		/* li R4, 129 */
		/* 8221F260h case   49:*/		cpu::op::li<0>(regs,&regs.R4,0x81);
		/* 8221F260h case   49:*/		return 0x8221F264;
		  /* 8221F264h */ case   50:  		/* sth R11, <#[R31]> */
		/* 8221F264h case   50:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8221F264h case   50:*/		return 0x8221F268;
		  /* 8221F268h */ case   51:  		/* mr R3, R30 */
		/* 8221F268h case   51:*/		regs.R3 = regs.R30;
		/* 8221F268h case   51:*/		return 0x8221F26C;
		  /* 8221F26Ch */ case   52:  		/* sth R11, <#[R31 + 2]> */
		/* 8221F26Ch case   52:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R31 + 0x00000002) );
		/* 8221F26Ch case   52:*/		return 0x8221F270;
		  /* 8221F270h */ case   53:  		/* bl -67960 */
		/* 8221F270h case   53:*/		regs.LR = 0x8221F274; return 0x8220E8F8;
		/* 8221F270h case   53:*/		return 0x8221F274;
		  /* 8221F274h */ case   54:  		/* li R5, 4 */
		/* 8221F274h case   54:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8221F274h case   54:*/		return 0x8221F278;
		  /* 8221F278h */ case   55:  		/* li R4, 12 */
		/* 8221F278h case   55:*/		cpu::op::li<0>(regs,&regs.R4,0xC);
		/* 8221F278h case   55:*/		return 0x8221F27C;
		  /* 8221F27Ch */ case   56:  		/* fmuls FR1, FR1, FR31 */
		/* 8221F27Ch case   56:*/		cpu::op::fmuls<0>(regs,&regs.FR1,regs.FR1,regs.FR31);
		/* 8221F27Ch case   56:*/		return 0x8221F280;
		  /* 8221F280h */ case   57:  		/* bl 223672 */
		/* 8221F280h case   57:*/		regs.LR = 0x8221F284; return 0x82255C38;
		/* 8221F280h case   57:*/		return 0x8221F284;
		  /* 8221F284h */ case   58:  		/* sth R3, <#[R31 + 6]> */
		/* 8221F284h case   58:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R31 + 0x00000006) );
		/* 8221F284h case   58:*/		return 0x8221F288;
		  /* 8221F288h */ case   59:  		/* li R4, 130 */
		/* 8221F288h case   59:*/		cpu::op::li<0>(regs,&regs.R4,0x82);
		/* 8221F288h case   59:*/		return 0x8221F28C;
		  /* 8221F28Ch */ case   60:  		/* mr R3, R30 */
		/* 8221F28Ch case   60:*/		regs.R3 = regs.R30;
		/* 8221F28Ch case   60:*/		return 0x8221F290;
		  /* 8221F290h */ case   61:  		/* bl -67992 */
		/* 8221F290h case   61:*/		regs.LR = 0x8221F294; return 0x8220E8F8;
		/* 8221F290h case   61:*/		return 0x8221F294;
		  /* 8221F294h */ case   62:  		/* li R5, 4 */
		/* 8221F294h case   62:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8221F294h case   62:*/		return 0x8221F298;
		  /* 8221F298h */ case   63:  		/* li R4, 12 */
		/* 8221F298h case   63:*/		cpu::op::li<0>(regs,&regs.R4,0xC);
		/* 8221F298h case   63:*/		return 0x8221F29C;
		  /* 8221F29Ch */ case   64:  		/* fmuls FR1, FR1, FR31 */
		/* 8221F29Ch case   64:*/		cpu::op::fmuls<0>(regs,&regs.FR1,regs.FR1,regs.FR31);
		/* 8221F29Ch case   64:*/		return 0x8221F2A0;
		  /* 8221F2A0h */ case   65:  		/* bl 223640 */
		/* 8221F2A0h case   65:*/		regs.LR = 0x8221F2A4; return 0x82255C38;
		/* 8221F2A0h case   65:*/		return 0x8221F2A4;
		  /* 8221F2A4h */ case   66:  		/* sth R3, <#[R31 + 4]> */
		/* 8221F2A4h case   66:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8221F2A4h case   66:*/		return 0x8221F2A8;
		  /* 8221F2A8h */ case   67:  		/* li R4, 573 */
		/* 8221F2A8h case   67:*/		cpu::op::li<0>(regs,&regs.R4,0x23D);
		/* 8221F2A8h case   67:*/		return 0x8221F2AC;
		  /* 8221F2ACh */ case   68:  		/* mr R3, R30 */
		/* 8221F2ACh case   68:*/		regs.R3 = regs.R30;
		/* 8221F2ACh case   68:*/		return 0x8221F2B0;
		  /* 8221F2B0h */ case   69:  		/* bl -68024 */
		/* 8221F2B0h case   69:*/		regs.LR = 0x8221F2B4; return 0x8220E8F8;
		/* 8221F2B0h case   69:*/		return 0x8221F2B4;
		  /* 8221F2B4h */ case   70:  		/* lis R11, -32256 */
		/* 8221F2B4h case   70:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8221F2B4h case   70:*/		return 0x8221F2B8;
		  /* 8221F2B8h */ case   71:  		/* li R4, 971 */
		/* 8221F2B8h case   71:*/		cpu::op::li<0>(regs,&regs.R4,0x3CB);
		/* 8221F2B8h case   71:*/		return 0x8221F2BC;
		  /* 8221F2BCh */ case   72:  		/* mr R3, R30 */
		/* 8221F2BCh case   72:*/		regs.R3 = regs.R30;
		/* 8221F2BCh case   72:*/		return 0x8221F2C0;
		  /* 8221F2C0h */ case   73:  		/* lfs FR0, <#[R11 + 2976]> */
		/* 8221F2C0h case   73:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000BA0) );
		/* 8221F2C0h case   73:*/		return 0x8221F2C4;
		  /* 8221F2C4h */ case   74:  		/* fmuls FR0, FR1, FR0 */
		/* 8221F2C4h case   74:*/		cpu::op::fmuls<0>(regs,&regs.FR0,regs.FR1,regs.FR0);
		/* 8221F2C4h case   74:*/		return 0x8221F2C8;
		  /* 8221F2C8h */ case   75:  		/* fctidz FR0, FR0 */
		/* 8221F2C8h case   75:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR0);
		/* 8221F2C8h case   75:*/		return 0x8221F2CC;
		  /* 8221F2CCh */ case   76:  		/* stfd FR0, <#[R1 + 96]> */
		/* 8221F2CCh case   76:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000060) );
		/* 8221F2CCh case   76:*/		return 0x8221F2D0;
		  /* 8221F2D0h */ case   77:  		/* lwz R11, <#[R1 + 100]> */
		/* 8221F2D0h case   77:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 8221F2D0h case   77:*/		return 0x8221F2D4;
		  /* 8221F2D4h */ case   78:  		/* rlwinm R11, R11, 31, 16, 31 */
		/* 8221F2D4h case   78:*/		cpu::op::rlwinm<0,31,16,31>(regs,&regs.R11,regs.R11);
		/* 8221F2D4h case   78:*/		return 0x8221F2D8;
		  /* 8221F2D8h */ case   79:  		/* sth R11, <#[R31 + 10]> */
		/* 8221F2D8h case   79:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R31 + 0x0000000A) );
		/* 8221F2D8h case   79:*/		return 0x8221F2DC;
		  /* 8221F2DCh */ case   80:  		/* bl -794060 */
		/* 8221F2DCh case   80:*/		regs.LR = 0x8221F2E0; return 0x8215D510;
		/* 8221F2DCh case   80:*/		return 0x8221F2E0;
		  /* 8221F2E0h */ case   81:  		/* cmplwi CR6, R3, 1 */
		/* 8221F2E0h case   81:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000001);
		/* 8221F2E0h case   81:*/		return 0x8221F2E4;
		  /* 8221F2E4h */ case   82:  		/* bc 4, CR6_EQ, 748 */
		/* 8221F2E4h case   82:*/		if ( !regs.CR[6].eq ) { return 0x8221F5D0;  }
		/* 8221F2E4h case   82:*/		return 0x8221F2E8;
		  /* 8221F2E8h */ case   83:  		/* li R4, 974 */
		/* 8221F2E8h case   83:*/		cpu::op::li<0>(regs,&regs.R4,0x3CE);
		/* 8221F2E8h case   83:*/		return 0x8221F2EC;
		  /* 8221F2ECh */ case   84:  		/* mr R3, R30 */
		/* 8221F2ECh case   84:*/		regs.R3 = regs.R30;
		/* 8221F2ECh case   84:*/		return 0x8221F2F0;
	}
	return 0x8221F2F0;
} // Block from 8221F19Ch-8221F2F0h (85 instructions)

//////////////////////////////////////////////////////
// Block at 8221F2F0h
// Function '?AS_GetArrayStateAndIdx@XGRAPHICS@@YAIPAU_ABSTRACT_STATE@1@W4_E_AS_ARRAY_STATE@1@IPAT__AS_STATEVALUE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F2F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F2F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F2F0);
		  /* 8221F2F0h */ case    0:  		/* bl -794080 */
		/* 8221F2F0h case    0:*/		regs.LR = 0x8221F2F4; return 0x8215D510;
		/* 8221F2F0h case    0:*/		return 0x8221F2F4;
		  /* 8221F2F4h */ case    1:  		/* li R27, 2 */
		/* 8221F2F4h case    1:*/		cpu::op::li<0>(regs,&regs.R27,0x2);
		/* 8221F2F4h case    1:*/		return 0x8221F2F8;
		  /* 8221F2F8h */ case    2:  		/* cmplwi CR6, R3, 3 */
		/* 8221F2F8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000003);
		/* 8221F2F8h case    2:*/		return 0x8221F2FC;
		  /* 8221F2FCh */ case    3:  		/* stw R3, <#[R31 + 16]> */
		/* 8221F2FCh case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8221F2FCh case    3:*/		return 0x8221F300;
		  /* 8221F300h */ case    4:  		/* bc 12, CR6_EQ, 12 */
		/* 8221F300h case    4:*/		if ( regs.CR[6].eq ) { return 0x8221F30C;  }
		/* 8221F300h case    4:*/		return 0x8221F304;
		  /* 8221F304h */ case    5:  		/* stw R22, <#[R31 + 12]> */
		/* 8221F304h case    5:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221F304h case    5:*/		return 0x8221F308;
		  /* 8221F308h */ case    6:  		/* b 8 */
		/* 8221F308h case    6:*/		return 0x8221F310;
		/* 8221F308h case    6:*/		return 0x8221F30C;
	}
	return 0x8221F30C;
} // Block from 8221F2F0h-8221F30Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221F30Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F30C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F30C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F30C);
		  /* 8221F30Ch */ case    0:  		/* stw R27, <#[R31 + 12]> */
		/* 8221F30Ch case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221F30Ch case    0:*/		return 0x8221F310;
	}
	return 0x8221F310;
} // Block from 8221F30Ch-8221F310h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221F310h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F310);
		  /* 8221F310h */ case    0:  		/* li R4, 973 */
		/* 8221F310h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x3CD);
		/* 8221F310h case    0:*/		return 0x8221F314;
		  /* 8221F314h */ case    1:  		/* mr R3, R30 */
		/* 8221F314h case    1:*/		regs.R3 = regs.R30;
		/* 8221F314h case    1:*/		return 0x8221F318;
		  /* 8221F318h */ case    2:  		/* bl -68128 */
		/* 8221F318h case    2:*/		regs.LR = 0x8221F31C; return 0x8220E8F8;
		/* 8221F318h case    2:*/		return 0x8221F31C;
		  /* 8221F31Ch */ case    3:  		/* stfs FR1, <#[R31 + 20]> */
		/* 8221F31Ch case    3:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000014) );
		/* 8221F31Ch case    3:*/		return 0x8221F320;
		  /* 8221F320h */ case    4:  		/* li R4, 972 */
		/* 8221F320h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x3CC);
		/* 8221F320h case    4:*/		return 0x8221F324;
		  /* 8221F324h */ case    5:  		/* mr R3, R30 */
		/* 8221F324h case    5:*/		regs.R3 = regs.R30;
		/* 8221F324h case    5:*/		return 0x8221F328;
		  /* 8221F328h */ case    6:  		/* bl -68144 */
		/* 8221F328h case    6:*/		regs.LR = 0x8221F32C; return 0x8220E8F8;
		/* 8221F328h case    6:*/		return 0x8221F32C;
		  /* 8221F32Ch */ case    7:  		/* li R11, 14 */
		/* 8221F32Ch case    7:*/		cpu::op::li<0>(regs,&regs.R11,0xE);
		/* 8221F32Ch case    7:*/		return 0x8221F330;
		  /* 8221F330h */ case    8:  		/* stfs FR1, <#[R31 + 24]> */
		/* 8221F330h case    8:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R31 + 0x00000018) );
		/* 8221F330h case    8:*/		return 0x8221F334;
		  /* 8221F334h */ case    9:  		/* li R4, 567 */
		/* 8221F334h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x237);
		/* 8221F334h case    9:*/		return 0x8221F338;
		  /* 8221F338h */ case   10:  		/* stw R11, <#[R31 + 28]> */
		/* 8221F338h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8221F338h case   10:*/		return 0x8221F33C;
		  /* 8221F33Ch */ case   11:  		/* mr R3, R30 */
		/* 8221F33Ch case   11:*/		regs.R3 = regs.R30;
		/* 8221F33Ch case   11:*/		return 0x8221F340;
		  /* 8221F340h */ case   12:  		/* bl -794160 */
		/* 8221F340h case   12:*/		regs.LR = 0x8221F344; return 0x8215D510;
		/* 8221F340h case   12:*/		return 0x8221F344;
		  /* 8221F344h */ case   13:  		/* mr R25, R3 */
		/* 8221F344h case   13:*/		regs.R25 = regs.R3;
		/* 8221F344h case   13:*/		return 0x8221F348;
		  /* 8221F348h */ case   14:  		/* li R4, 568 */
		/* 8221F348h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x238);
		/* 8221F348h case   14:*/		return 0x8221F34C;
		  /* 8221F34Ch */ case   15:  		/* mr R3, R30 */
		/* 8221F34Ch case   15:*/		regs.R3 = regs.R30;
		/* 8221F34Ch case   15:*/		return 0x8221F350;
		  /* 8221F350h */ case   16:  		/* bl -794176 */
		/* 8221F350h case   16:*/		regs.LR = 0x8221F354; return 0x8215D510;
		/* 8221F350h case   16:*/		return 0x8221F354;
		  /* 8221F354h */ case   17:  		/* mr R24, R3 */
		/* 8221F354h case   17:*/		regs.R24 = regs.R3;
		/* 8221F354h case   17:*/		return 0x8221F358;
		  /* 8221F358h */ case   18:  		/* li R4, 569 */
		/* 8221F358h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x239);
		/* 8221F358h case   18:*/		return 0x8221F35C;
		  /* 8221F35Ch */ case   19:  		/* mr R3, R30 */
		/* 8221F35Ch case   19:*/		regs.R3 = regs.R30;
		/* 8221F35Ch case   19:*/		return 0x8221F360;
		  /* 8221F360h */ case   20:  		/* bl -794192 */
		/* 8221F360h case   20:*/		regs.LR = 0x8221F364; return 0x8215D510;
		/* 8221F360h case   20:*/		return 0x8221F364;
		  /* 8221F364h */ case   21:  		/* lis R11, -32252 */
		/* 8221F364h case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221F364h case   21:*/		return 0x8221F368;
		  /* 8221F368h */ case   22:  		/* mr R29, R3 */
		/* 8221F368h case   22:*/		regs.R29 = regs.R3;
		/* 8221F368h case   22:*/		return 0x8221F36C;
		  /* 8221F36Ch */ case   23:  		/* li R23, 4 */
		/* 8221F36Ch case   23:*/		cpu::op::li<0>(regs,&regs.R23,0x4);
		/* 8221F36Ch case   23:*/		return 0x8221F370;
		  /* 8221F370h */ case   24:  		/* addi R28, R3, 1 */
		/* 8221F370h case   24:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R3,0x1);
		/* 8221F370h case   24:*/		return 0x8221F374;
		  /* 8221F374h */ case   25:  		/* cmplwi CR6, R25, 1 */
		/* 8221F374h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000001);
		/* 8221F374h case   25:*/		return 0x8221F378;
		  /* 8221F378h */ case   26:  		/* addi R26, R11, -25364 */
		/* 8221F378h case   26:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFF9CEC);
		/* 8221F378h case   26:*/		return 0x8221F37C;
		  /* 8221F37Ch */ case   27:  		/* bc 12, CR6_LT, 52 */
		/* 8221F37Ch case   27:*/		if ( regs.CR[6].lt ) { return 0x8221F3B0;  }
		/* 8221F37Ch case   27:*/		return 0x8221F380;
		  /* 8221F380h */ case   28:  		/* bc 12, CR6_EQ, 52 */
		/* 8221F380h case   28:*/		if ( regs.CR[6].eq ) { return 0x8221F3B4;  }
		/* 8221F380h case   28:*/		return 0x8221F384;
		  /* 8221F384h */ case   29:  		/* cmplwi CR6, R25, 3 */
		/* 8221F384h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000003);
		/* 8221F384h case   29:*/		return 0x8221F388;
		  /* 8221F388h */ case   30:  		/* bc 12, CR6_LT, 116 */
		/* 8221F388h case   30:*/		if ( regs.CR[6].lt ) { return 0x8221F3FC;  }
		/* 8221F388h case   30:*/		return 0x8221F38C;
		  /* 8221F38Ch */ case   31:  		/* bc 12, CR6_EQ, 112 */
		/* 8221F38Ch case   31:*/		if ( regs.CR[6].eq ) { return 0x8221F3FC;  }
		/* 8221F38Ch case   31:*/		return 0x8221F390;
		  /* 8221F390h */ case   32:  		/* cmplwi CR6, R25, 5 */
		/* 8221F390h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000005);
		/* 8221F390h case   32:*/		return 0x8221F394;
		  /* 8221F394h */ case   33:  		/* bc 12, CR6_LT, 96 */
		/* 8221F394h case   33:*/		if ( regs.CR[6].lt ) { return 0x8221F3F4;  }
		/* 8221F394h case   33:*/		return 0x8221F398;
		  /* 8221F398h */ case   34:  		/* mr R6, R17 */
		/* 8221F398h case   34:*/		regs.R6 = regs.R17;
		/* 8221F398h case   34:*/		return 0x8221F39C;
		  /* 8221F39Ch */ case   35:  		/* mr R5, R26 */
		/* 8221F39Ch case   35:*/		regs.R5 = regs.R26;
		/* 8221F39Ch case   35:*/		return 0x8221F3A0;
		  /* 8221F3A0h */ case   36:  		/* mr R4, R18 */
		/* 8221F3A0h case   36:*/		regs.R4 = regs.R18;
		/* 8221F3A0h case   36:*/		return 0x8221F3A4;
		  /* 8221F3A4h */ case   37:  		/* li R7, 1138 */
		/* 8221F3A4h case   37:*/		cpu::op::li<0>(regs,&regs.R7,0x472);
		/* 8221F3A4h case   37:*/		return 0x8221F3A8;
		  /* 8221F3A8h */ case   38:  		/* li R3, 0 */
		/* 8221F3A8h case   38:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221F3A8h case   38:*/		return 0x8221F3AC;
		  /* 8221F3ACh */ case   39:  		/* bl -817060 */
		/* 8221F3ACh case   39:*/		regs.LR = 0x8221F3B0; return 0x82157C08;
		/* 8221F3ACh case   39:*/		return 0x8221F3B0;
	}
	return 0x8221F3B0;
} // Block from 8221F310h-8221F3B0h (40 instructions)

//////////////////////////////////////////////////////
// Block at 8221F3B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F3B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F3B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F3B0);
		  /* 8221F3B0h */ case    0:  		/* mr R27, R22 */
		/* 8221F3B0h case    0:*/		regs.R27 = regs.R22;
		/* 8221F3B0h case    0:*/		return 0x8221F3B4;
	}
	return 0x8221F3B4;
} // Block from 8221F3B0h-8221F3B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221F3B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F3B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F3B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F3B4);
		  /* 8221F3B4h */ case    0:  		/* cmplwi CR6, R24, 1 */
		/* 8221F3B4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000001);
		/* 8221F3B4h case    0:*/		return 0x8221F3B8;
		  /* 8221F3B8h */ case    1:  		/* bc 12, CR6_LT, 96 */
		/* 8221F3B8h case    1:*/		if ( regs.CR[6].lt ) { return 0x8221F418;  }
		/* 8221F3B8h case    1:*/		return 0x8221F3BC;
		  /* 8221F3BCh */ case    2:  		/* bc 12, CR6_EQ, 72 */
		/* 8221F3BCh case    2:*/		if ( regs.CR[6].eq ) { return 0x8221F404;  }
		/* 8221F3BCh case    2:*/		return 0x8221F3C0;
		  /* 8221F3C0h */ case    3:  		/* cmplwi CR6, R24, 3 */
		/* 8221F3C0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000003);
		/* 8221F3C0h case    3:*/		return 0x8221F3C4;
		  /* 8221F3C4h */ case    4:  		/* bc 12, CR6_LT, 40 */
		/* 8221F3C4h case    4:*/		if ( regs.CR[6].lt ) { return 0x8221F3EC;  }
		/* 8221F3C4h case    4:*/		return 0x8221F3C8;
		  /* 8221F3C8h */ case    5:  		/* bc 12, CR6_EQ, 36 */
		/* 8221F3C8h case    5:*/		if ( regs.CR[6].eq ) { return 0x8221F3EC;  }
		/* 8221F3C8h case    5:*/		return 0x8221F3CC;
		  /* 8221F3CCh */ case    6:  		/* cmplwi CR6, R24, 5 */
		/* 8221F3CCh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000005);
		/* 8221F3CCh case    6:*/		return 0x8221F3D0;
	}
	return 0x8221F3D0;
} // Block from 8221F3B4h-8221F3D0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221F3D0h
// Function '?CP_CompileRenderStateGetBlendEnable@XGRAPHICS@@YAXPAU_CP_COMPILED_PROGRAM@1@PAU_ABSTRACT_STATE@1@QAPAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F3D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F3D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F3D0);
		  /* 8221F3D0h */ case    0:  		/* bc 12, CR6_LT, 28 */
		/* 8221F3D0h case    0:*/		if ( regs.CR[6].lt ) { return 0x8221F3EC;  }
		/* 8221F3D0h case    0:*/		return 0x8221F3D4;
		  /* 8221F3D4h */ case    1:  		/* mr R6, R17 */
		/* 8221F3D4h case    1:*/		regs.R6 = regs.R17;
		/* 8221F3D4h case    1:*/		return 0x8221F3D8;
		  /* 8221F3D8h */ case    2:  		/* mr R5, R26 */
		/* 8221F3D8h case    2:*/		regs.R5 = regs.R26;
		/* 8221F3D8h case    2:*/		return 0x8221F3DC;
		  /* 8221F3DCh */ case    3:  		/* mr R4, R18 */
		/* 8221F3DCh case    3:*/		regs.R4 = regs.R18;
		/* 8221F3DCh case    3:*/		return 0x8221F3E0;
		  /* 8221F3E0h */ case    4:  		/* li R7, 1168 */
		/* 8221F3E0h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x490);
		/* 8221F3E0h case    4:*/		return 0x8221F3E4;
		  /* 8221F3E4h */ case    5:  		/* li R3, 0 */
		/* 8221F3E4h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221F3E4h case    5:*/		return 0x8221F3E8;
		  /* 8221F3E8h */ case    6:  		/* bl -817120 */
		/* 8221F3E8h case    6:*/		regs.LR = 0x8221F3EC; return 0x82157C08;
		/* 8221F3E8h case    6:*/		return 0x8221F3EC;
	}
	return 0x8221F3EC;
} // Block from 8221F3D0h-8221F3ECh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221F3ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F3EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F3EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F3EC);
		  /* 8221F3ECh */ case    0:  		/* mr R10, R22 */
		/* 8221F3ECh case    0:*/		regs.R10 = regs.R22;
		/* 8221F3ECh case    0:*/		return 0x8221F3F0;
		  /* 8221F3F0h */ case    1:  		/* b 44 */
		/* 8221F3F0h case    1:*/		return 0x8221F41C;
		/* 8221F3F0h case    1:*/		return 0x8221F3F4;
	}
	return 0x8221F3F4;
} // Block from 8221F3ECh-8221F3F4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221F3F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F3F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F3F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F3F4);
		  /* 8221F3F4h */ case    0:  		/* mr R27, R23 */
		/* 8221F3F4h case    0:*/		regs.R27 = regs.R23;
		/* 8221F3F4h case    0:*/		return 0x8221F3F8;
		  /* 8221F3F8h */ case    1:  		/* b -68 */
		/* 8221F3F8h case    1:*/		return 0x8221F3B4;
		/* 8221F3F8h case    1:*/		return 0x8221F3FC;
	}
	return 0x8221F3FC;
} // Block from 8221F3F4h-8221F3FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221F3FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F3FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F3FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F3FC);
		  /* 8221F3FCh */ case    0:  		/* li R27, 3 */
		/* 8221F3FCh case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x3);
		/* 8221F3FCh case    0:*/		return 0x8221F400;
		  /* 8221F400h */ case    1:  		/* b -76 */
		/* 8221F400h case    1:*/		return 0x8221F3B4;
		/* 8221F400h case    1:*/		return 0x8221F404;
	}
	return 0x8221F404;
} // Block from 8221F3FCh-8221F404h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221F404h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F404( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F404) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F404);
		  /* 8221F404h */ case    0:  		/* addi R11, R25, -4 */
		/* 8221F404h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFC);
		/* 8221F404h case    0:*/		return 0x8221F408;
		  /* 8221F408h */ case    1:  		/* cntlzw R11, R11 */
		/* 8221F408h case    1:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8221F408h case    1:*/		return 0x8221F40C;
		  /* 8221F40Ch */ case    2:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 8221F40Ch case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 8221F40Ch case    2:*/		return 0x8221F410;
		  /* 8221F410h */ case    3:  		/* addi R10, R11, 1 */
		/* 8221F410h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1);
		/* 8221F410h case    3:*/		return 0x8221F414;
		  /* 8221F414h */ case    4:  		/* b 8 */
		/* 8221F414h case    4:*/		return 0x8221F41C;
		/* 8221F414h case    4:*/		return 0x8221F418;
	}
	return 0x8221F418;
} // Block from 8221F404h-8221F418h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221F418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F418);
		  /* 8221F418h */ case    0:  		/* mr R10, R27 */
		/* 8221F418h case    0:*/		regs.R10 = regs.R27;
		/* 8221F418h case    0:*/		return 0x8221F41C;
	}
	return 0x8221F41C;
} // Block from 8221F418h-8221F41Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221F41Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F41C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F41C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F41C);
		  /* 8221F41Ch */ case    0:  		/* lwz R11, <#[R31 + 32]> */
		/* 8221F41Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 8221F41Ch case    0:*/		return 0x8221F420;
		  /* 8221F420h */ case    1:  		/* lwz R9, <#[R31 + 12]> */
		/* 8221F420h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221F420h case    1:*/		return 0x8221F424;
		  /* 8221F424h */ case    2:  		/* rlwimi R11, R24, 16, 13, 15 */
		/* 8221F424h case    2:*/		cpu::op::rlwimi<0,16,13,15>(regs,&regs.R11,regs.R24);
		/* 8221F424h case    2:*/		return 0x8221F428;
		  /* 8221F428h */ case    3:  		/* stw R27, <#[R31 + 36]> */
		/* 8221F428h case    3:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000024) );
		/* 8221F428h case    3:*/		return 0x8221F42C;
		  /* 8221F42Ch */ case    4:  		/* cmplwi CR6, R9, 2 */
		/* 8221F42Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000002);
		/* 8221F42Ch case    4:*/		return 0x8221F430;
		  /* 8221F430h */ case    5:  		/* stw R10, <#[R31 + 40]> */
		/* 8221F430h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 8221F430h case    5:*/		return 0x8221F434;
		  /* 8221F434h */ case    6:  		/* rlwimi R11, R25, 0, 28, 31 */
		/* 8221F434h case    6:*/		cpu::op::rlwimi<0,0,28,31>(regs,&regs.R11,regs.R25);
		/* 8221F434h case    6:*/		return 0x8221F438;
		  /* 8221F438h */ case    7:  		/* rlwinm R11, R11, 0, 18, 15 */
		/* 8221F438h case    7:*/		cpu::op::rlwinm<0,0,18,15>(regs,&regs.R11,regs.R11);
		/* 8221F438h case    7:*/		return 0x8221F43C;
		  /* 8221F43Ch */ case    8:  		/* stw R11, <#[R31 + 32]> */
		/* 8221F43Ch case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 8221F43Ch case    8:*/		return 0x8221F440;
		  /* 8221F440h */ case    9:  		/* bc 4, CR6_EQ, 156 */
		/* 8221F440h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8221F4DC;  }
		/* 8221F440h case    9:*/		return 0x8221F444;
		  /* 8221F444h */ case   10:  		/* rlwinm R9, R29, 0, 28, 31 */
		/* 8221F444h case   10:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R29);
		/* 8221F444h case   10:*/		return 0x8221F448;
		  /* 8221F448h */ case   11:  		/* lwz R8, <#[R31 + 44]> */
		/* 8221F448h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000002C) );
		/* 8221F448h case   11:*/		return 0x8221F44C;
		  /* 8221F44Ch */ case   12:  		/* rlwinm R7, R29, 16, 12, 15 */
		/* 8221F44Ch case   12:*/		cpu::op::rlwinm<0,16,12,15>(regs,&regs.R7,regs.R29);
		/* 8221F44Ch case   12:*/		return 0x8221F450;
		  /* 8221F450h */ case   13:  		/* lwz R6, <#[R31 + 48]> */
		/* 8221F450h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000030) );
		/* 8221F450h case   13:*/		return 0x8221F454;
		  /* 8221F454h */ case   14:  		/* rlwinm R5, R29, 24, 4, 7 */
		/* 8221F454h case   14:*/		cpu::op::rlwinm<0,24,4,7>(regs,&regs.R5,regs.R29);
		/* 8221F454h case   14:*/		return 0x8221F458;
		  /* 8221F458h */ case   15:  		/* stw R22, <#[R31 + 36]> */
		/* 8221F458h case   15:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R31 + 0x00000024) );
		/* 8221F458h case   15:*/		return 0x8221F45C;
		  /* 8221F45Ch */ case   16:  		/* or R7, R7, R9 */
		/* 8221F45Ch case   16:*/		cpu::op::or<0>(regs,&regs.R7,regs.R7,regs.R9);
		/* 8221F45Ch case   16:*/		return 0x8221F460;
		  /* 8221F460h */ case   17:  		/* stw R22, <#[R31 + 40]> */
		/* 8221F460h case   17:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R31 + 0x00000028) );
		/* 8221F460h case   17:*/		return 0x8221F464;
		  /* 8221F464h */ case   18:  		/* lis R12, 3855 */
		/* 8221F464h case   18:*/		cpu::op::lis<0>(regs,&regs.R12,0xF0F);
		/* 8221F464h case   18:*/		return 0x8221F468;
		  /* 8221F468h */ case   19:  		/* or R7, R7, R5 */
		/* 8221F468h case   19:*/		cpu::op::or<0>(regs,&regs.R7,regs.R7,regs.R5);
		/* 8221F468h case   19:*/		return 0x8221F46C;
		  /* 8221F46Ch */ case   20:  		/* rlwimi R9, R28, 4, 24, 27 */
		/* 8221F46Ch case   20:*/		cpu::op::rlwimi<0,4,24,27>(regs,&regs.R9,regs.R28);
		/* 8221F46Ch case   20:*/		return 0x8221F470;
		  /* 8221F470h */ case   21:  		/* ori R12, R12, 3855 */
		/* 8221F470h case   21:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xF0F);
		/* 8221F470h case   21:*/		return 0x8221F474;
		  /* 8221F474h */ case   22:  		/* rlwinm R9, R9, 8, 16, 23 */
		/* 8221F474h case   22:*/		cpu::op::rlwinm<0,8,16,23>(regs,&regs.R9,regs.R9);
		/* 8221F474h case   22:*/		return 0x8221F478;
		  /* 8221F478h */ case   23:  		/* and R7, R7, R12 */
		/* 8221F478h case   23:*/		cpu::op::and<0>(regs,&regs.R7,regs.R7,regs.R12);
		/* 8221F478h case   23:*/		return 0x8221F47C;
		  /* 8221F47Ch */ case   24:  		/* lis R5, 24647 */
		/* 8221F47Ch case   24:*/		cpu::op::lis<0>(regs,&regs.R5,0x6047);
		/* 8221F47Ch case   24:*/		return 0x8221F480;
		  /* 8221F480h */ case   25:  		/* li R4, 7 */
		/* 8221F480h case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x7);
		/* 8221F480h case   25:*/		return 0x8221F484;
		  /* 8221F484h */ case   26:  		/* or R9, R7, R9 */
		/* 8221F484h case   26:*/		cpu::op::or<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 8221F484h case   26:*/		return 0x8221F488;
		  /* 8221F488h */ case   27:  		/* mullw R3, R27, R28 */
		/* 8221F488h case   27:*/		cpu::op::mullw<0>(regs,&regs.R3,regs.R27,regs.R28);
		/* 8221F488h case   27:*/		return 0x8221F48C;
		  /* 8221F48Ch */ case   28:  		/* rlwinm R7, R28, 21, 8, 10 */
		/* 8221F48Ch case   28:*/		cpu::op::rlwinm<0,21,8,10>(regs,&regs.R7,regs.R28);
		/* 8221F48Ch case   28:*/		return 0x8221F490;
		  /* 8221F490h */ case   29:  		/* ori R5, R5, 9991 */
		/* 8221F490h case   29:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x2707);
		/* 8221F490h case   29:*/		return 0x8221F494;
		  /* 8221F494h */ case   30:  		/* rlwinm R11, R11, 0, 0, 27 */
		/* 8221F494h case   30:*/		cpu::op::rlwinm<0,0,0,27>(regs,&regs.R11,regs.R11);
		/* 8221F494h case   30:*/		return 0x8221F498;
		  /* 8221F498h */ case   31:  		/* rlwimi R8, R4, 0, 28, 31 */
		/* 8221F498h case   31:*/		cpu::op::rlwimi<0,0,28,31>(regs,&regs.R8,regs.R4);
		/* 8221F498h case   31:*/		return 0x8221F49C;
		  /* 8221F49Ch */ case   32:  		/* rlwimi R6, R22, 0, 28, 31 */
		/* 8221F49Ch case   32:*/		cpu::op::rlwimi<0,0,28,31>(regs,&regs.R6,regs.R22);
		/* 8221F49Ch case   32:*/		return 0x8221F4A0;
		  /* 8221F4A0h */ case   33:  		/* rlwinm R4, R3, 0, 24, 31 */
		/* 8221F4A0h case   33:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R4,regs.R3);
		/* 8221F4A0h case   33:*/		return 0x8221F4A4;
		  /* 8221F4A4h */ case   34:  		/* stw R8, <#[R31 + 44]> */
		/* 8221F4A4h case   34:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x0000002C) );
		/* 8221F4A4h case   34:*/		return 0x8221F4A8;
		  /* 8221F4A8h */ case   35:  		/* mullw R10, R10, R28 */
		/* 8221F4A8h case   35:*/		cpu::op::mullw<0>(regs,&regs.R10,regs.R10,regs.R28);
		/* 8221F4A8h case   35:*/		return 0x8221F4AC;
		  /* 8221F4ACh */ case   36:  		/* stw R6, <#[R31 + 48]> */
		/* 8221F4ACh case   36:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R31 + 0x00000030) );
		/* 8221F4ACh case   36:*/		return 0x8221F4B0;
		  /* 8221F4B0h */ case   37:  		/* stb R4, <#[R31 + 46]> */
		/* 8221F4B0h case   37:*/		cpu::mem::store8( regs, regs.R4, (uint32)(regs.R31 + 0x0000002E) );
		/* 8221F4B0h case   37:*/		return 0x8221F4B4;
		  /* 8221F4B4h */ case   38:  		/* stb R20, <#[R31 + 45]> */
		/* 8221F4B4h case   38:*/		cpu::mem::store8( regs, regs.R20, (uint32)(regs.R31 + 0x0000002D) );
		/* 8221F4B4h case   38:*/		return 0x8221F4B8;
		  /* 8221F4B8h */ case   39:  		/* stb R4, <#[R31 + 50]> */
		/* 8221F4B8h case   39:*/		cpu::mem::store8( regs, regs.R4, (uint32)(regs.R31 + 0x00000032) );
		/* 8221F4B8h case   39:*/		return 0x8221F4BC;
		  /* 8221F4BCh */ case   40:  		/* stb R10, <#[R31 + 49]> */
		/* 8221F4BCh case   40:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R31 + 0x00000031) );
		/* 8221F4BCh case   40:*/		return 0x8221F4C0;
		  /* 8221F4C0h */ case   41:  		/* rlwinm R11, R11, 0, 16, 12 */
		/* 8221F4C0h case   41:*/		cpu::op::rlwinm<0,0,16,12>(regs,&regs.R11,regs.R11);
		/* 8221F4C0h case   41:*/		return 0x8221F4C4;
		  /* 8221F4C4h */ case   42:  		/* or R9, R9, R7 */
		/* 8221F4C4h case   42:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 8221F4C4h case   42:*/		return 0x8221F4C8;
		  /* 8221F4C8h */ case   43:  		/* rlwimi R5, R29, 24, 4, 7 */
		/* 8221F4C8h case   43:*/		cpu::op::rlwimi<0,24,4,7>(regs,&regs.R5,regs.R29);
		/* 8221F4C8h case   43:*/		return 0x8221F4CC;
		  /* 8221F4CCh */ case   44:  		/* stw R11, <#[R31 + 32]> */
		/* 8221F4CCh case   44:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 8221F4CCh case   44:*/		return 0x8221F4D0;
		  /* 8221F4D0h */ case   45:  		/* stw R9, <#[R31 + 52]> */
		/* 8221F4D0h case   45:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000034) );
		/* 8221F4D0h case   45:*/		return 0x8221F4D4;
		  /* 8221F4D4h */ case   46:  		/* stw R5, <#[R31 + 56]> */
		/* 8221F4D4h case   46:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R31 + 0x00000038) );
		/* 8221F4D4h case   46:*/		return 0x8221F4D8;
		  /* 8221F4D8h */ case   47:  		/* b 248 */
		/* 8221F4D8h case   47:*/		return 0x8221F5D0;
		/* 8221F4D8h case   47:*/		return 0x8221F4DC;
	}
	return 0x8221F4DC;
} // Block from 8221F41Ch-8221F4DCh (48 instructions)

//////////////////////////////////////////////////////
// Block at 8221F4DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F4DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F4DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F4DC);
		  /* 8221F4DCh */ case    0:  		/* lwz R9, <#[R31 + 16]> */
		/* 8221F4DCh case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 8221F4DCh case    0:*/		return 0x8221F4E0;
		  /* 8221F4E0h */ case    1:  		/* cmplwi CR6, R9, 2 */
		/* 8221F4E0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000002);
		/* 8221F4E0h case    1:*/		return 0x8221F4E4;
		  /* 8221F4E4h */ case    2:  		/* bc 4, CR6_EQ, 96 */
		/* 8221F4E4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8221F544;  }
		/* 8221F4E4h case    2:*/		return 0x8221F4E8;
		  /* 8221F4E8h */ case    3:  		/* lwz R9, <#[R31 + 44]> */
		/* 8221F4E8h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000002C) );
		/* 8221F4E8h case    3:*/		return 0x8221F4EC;
		  /* 8221F4ECh */ case    4:  		/* li R8, 13 */
		/* 8221F4ECh case    4:*/		cpu::op::li<0>(regs,&regs.R8,0xD);
		/* 8221F4ECh case    4:*/		return 0x8221F4F0;
		  /* 8221F4F0h */ case    5:  		/* lwz R10, <#[R31 + 48]> */
		/* 8221F4F0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 8221F4F0h case    5:*/		return 0x8221F4F4;
		  /* 8221F4F4h */ case    6:  		/* lis R7, 24897 */
		/* 8221F4F4h case    6:*/		cpu::op::lis<0>(regs,&regs.R7,0x6141);
		/* 8221F4F4h case    6:*/		return 0x8221F4F8;
		  /* 8221F4F8h */ case    7:  		/* rlwimi R9, R22, 0, 28, 31 */
		/* 8221F4F8h case    7:*/		cpu::op::rlwimi<0,0,28,31>(regs,&regs.R9,regs.R22);
		/* 8221F4F8h case    7:*/		return 0x8221F4FC;
		  /* 8221F4FCh */ case    8:  		/* stw R23, <#[R31 + 36]> */
		/* 8221F4FCh case    8:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x00000024) );
		/* 8221F4FCh case    8:*/		return 0x8221F500;
		  /* 8221F500h */ case    9:  		/* lis R6, 24902 */
		/* 8221F500h case    9:*/		cpu::op::lis<0>(regs,&regs.R6,0x6146);
		/* 8221F500h case    9:*/		return 0x8221F504;
		  /* 8221F504h */ case   10:  		/* stw R23, <#[R31 + 40]> */
		/* 8221F504h case   10:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x00000028) );
		/* 8221F504h case   10:*/		return 0x8221F508;
		  /* 8221F508h */ case   11:  		/* stw R9, <#[R31 + 44]> */
		/* 8221F508h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000002C) );
		/* 8221F508h case   11:*/		return 0x8221F50C;
		  /* 8221F50Ch */ case   12:  		/* ori R5, R10, 15 */
		/* 8221F50Ch case   12:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R10,0xF);
		/* 8221F50Ch case   12:*/		return 0x8221F510;
		  /* 8221F510h */ case   13:  		/* rlwimi R11, R8, 0, 28, 31 */
		/* 8221F510h case   13:*/		cpu::op::rlwimi<0,0,28,31>(regs,&regs.R11,regs.R8);
		/* 8221F510h case   13:*/		return 0x8221F514;
		  /* 8221F514h */ case   14:  		/* stb R20, <#[R31 + 45]> */
		/* 8221F514h case   14:*/		cpu::mem::store8( regs, regs.R20, (uint32)(regs.R31 + 0x0000002D) );
		/* 8221F514h case   14:*/		return 0x8221F518;
		  /* 8221F518h */ case   15:  		/* li R10, 8 */
		/* 8221F518h case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x8);
		/* 8221F518h case   15:*/		return 0x8221F51C;
		  /* 8221F51Ch */ case   16:  		/* stw R5, <#[R31 + 48]> */
		/* 8221F51Ch case   16:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R31 + 0x00000030) );
		/* 8221F51Ch case   16:*/		return 0x8221F520;
		  /* 8221F520h */ case   17:  		/* ori R9, R7, 8455 */
		/* 8221F520h case   17:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R7,0x2107);
		/* 8221F520h case   17:*/		return 0x8221F524;
		  /* 8221F524h */ case   18:  		/* stw R11, <#[R31 + 32]> */
		/* 8221F524h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 8221F524h case   18:*/		return 0x8221F528;
		  /* 8221F528h */ case   19:  		/* ori R8, R6, 9734 */
		/* 8221F528h case   19:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R6,0x2606);
		/* 8221F528h case   19:*/		return 0x8221F52C;
		  /* 8221F52Ch */ case   20:  		/* stb R10, <#[R31 + 46]> */
		/* 8221F52Ch case   20:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R31 + 0x0000002E) );
		/* 8221F52Ch case   20:*/		return 0x8221F530;
		  /* 8221F530h */ case   21:  		/* stw R9, <#[R31 + 52]> */
		/* 8221F530h case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000034) );
		/* 8221F530h case   21:*/		return 0x8221F534;
		  /* 8221F534h */ case   22:  		/* stb R10, <#[R31 + 50]> */
		/* 8221F534h case   22:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R31 + 0x00000032) );
		/* 8221F534h case   22:*/		return 0x8221F538;
		  /* 8221F538h */ case   23:  		/* stb R10, <#[R31 + 49]> */
		/* 8221F538h case   23:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R31 + 0x00000031) );
		/* 8221F538h case   23:*/		return 0x8221F53C;
		  /* 8221F53Ch */ case   24:  		/* stw R8, <#[R31 + 56]> */
		/* 8221F53Ch case   24:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000038) );
		/* 8221F53Ch case   24:*/		return 0x8221F540;
		  /* 8221F540h */ case   25:  		/* b 144 */
		/* 8221F540h case   25:*/		return 0x8221F5D0;
		/* 8221F540h case   25:*/		return 0x8221F544;
	}
	return 0x8221F544;
} // Block from 8221F4DCh-8221F544h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8221F544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F544);
		  /* 8221F544h */ case    0:  		/* lwz R11, <#[R31 + 52]> */
		/* 8221F544h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000034) );
		/* 8221F544h case    0:*/		return 0x8221F548;
		  /* 8221F548h */ case    1:  		/* rlwinm R9, R29, 0, 28, 31 */
		/* 8221F548h case    1:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R29);
		/* 8221F548h case    1:*/		return 0x8221F54C;
		  /* 8221F54Ch */ case    2:  		/* lwz R6, <#[R31 + 48]> */
		/* 8221F54Ch case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000030) );
		/* 8221F54Ch case    2:*/		return 0x8221F550;
		  /* 8221F550h */ case    3:  		/* li R7, 7 */
		/* 8221F550h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x7);
		/* 8221F550h case    3:*/		return 0x8221F554;
		  /* 8221F554h */ case    4:  		/* rlwinm R11, R11, 0, 0, 27 */
		/* 8221F554h case    4:*/		cpu::op::rlwinm<0,0,0,27>(regs,&regs.R11,regs.R11);
		/* 8221F554h case    4:*/		return 0x8221F558;
		  /* 8221F558h */ case    5:  		/* lwz R8, <#[R31 + 44]> */
		/* 8221F558h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000002C) );
		/* 8221F558h case    5:*/		return 0x8221F55C;
		  /* 8221F55Ch */ case    6:  		/* mullw R5, R27, R28 */
		/* 8221F55Ch case    6:*/		cpu::op::mullw<0>(regs,&regs.R5,regs.R27,regs.R28);
		/* 8221F55Ch case    6:*/		return 0x8221F560;
	}
	return 0x8221F560;
} // Block from 8221F544h-8221F560h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221F560h
// Function '?CP_GetXenosZBufferElementFmt@XGRAPHICS@@YAIPAU_ABSTRACT_STATE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F560);
		  /* 8221F560h */ case    0:  		/* stw R20, <#[R31 + 56]> */
		/* 8221F560h case    0:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R31 + 0x00000038) );
		/* 8221F560h case    0:*/		return 0x8221F564;
		  /* 8221F564h */ case    1:  		/* or R11, R11, R9 */
		/* 8221F564h case    1:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8221F564h case    1:*/		return 0x8221F568;
		  /* 8221F568h */ case    2:  		/* rlwimi R8, R7, 0, 28, 31 */
		/* 8221F568h case    2:*/		cpu::op::rlwimi<0,0,28,31>(regs,&regs.R8,regs.R7);
		/* 8221F568h case    2:*/		return 0x8221F56C;
		  /* 8221F56Ch */ case    3:  		/* rlwimi R11, R29, 8, 20, 23 */
		/* 8221F56Ch case    3:*/		cpu::op::rlwimi<0,8,20,23>(regs,&regs.R11,regs.R29);
		/* 8221F56Ch case    3:*/		return 0x8221F570;
		  /* 8221F570h */ case    4:  		/* mullw R10, R10, R28 */
		/* 8221F570h case    4:*/		cpu::op::mullw<0>(regs,&regs.R10,regs.R10,regs.R28);
		/* 8221F570h case    4:*/		return 0x8221F574;
		  /* 8221F574h */ case    5:  		/* stw R8, <#[R31 + 44]> */
		/* 8221F574h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x0000002C) );
		/* 8221F574h case    5:*/		return 0x8221F578;
		  /* 8221F578h */ case    6:  		/* stw R11, <#[R31 + 52]> */
		/* 8221F578h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000034) );
		/* 8221F578h case    6:*/		return 0x8221F57C;
		  /* 8221F57Ch */ case    7:  		/* lwz R9, <#[R31 + 52]> */
		/* 8221F57Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000034) );
		/* 8221F57Ch case    7:*/		return 0x8221F580;
		  /* 8221F580h */ case    8:  		/* stb R5, <#[R31 + 46]> */
		/* 8221F580h case    8:*/		cpu::mem::store8( regs, regs.R5, (uint32)(regs.R31 + 0x0000002E) );
		/* 8221F580h case    8:*/		return 0x8221F584;
		  /* 8221F584h */ case    9:  		/* stb R10, <#[R31 + 45]> */
		/* 8221F584h case    9:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R31 + 0x0000002D) );
		/* 8221F584h case    9:*/		return 0x8221F588;
		  /* 8221F588h */ case   10:  		/* rlwinm R11, R6, 0, 0, 27 */
		/* 8221F588h case   10:*/		cpu::op::rlwinm<0,0,0,27>(regs,&regs.R11,regs.R6);
		/* 8221F588h case   10:*/		return 0x8221F58C;
		  /* 8221F58Ch */ case   11:  		/* rlwimi R9, R29, 16, 12, 15 */
		/* 8221F58Ch case   11:*/		cpu::op::rlwimi<0,16,12,15>(regs,&regs.R9,regs.R29);
		/* 8221F58Ch case   11:*/		return 0x8221F590;
		  /* 8221F590h */ case   12:  		/* stw R11, <#[R31 + 48]> */
		/* 8221F590h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 8221F590h case   12:*/		return 0x8221F594;
		  /* 8221F594h */ case   13:  		/* mr R11, R9 */
		/* 8221F594h case   13:*/		regs.R11 = regs.R9;
		/* 8221F594h case   13:*/		return 0x8221F598;
		  /* 8221F598h */ case   14:  		/* stw R9, <#[R31 + 52]> */
		/* 8221F598h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000034) );
		/* 8221F598h case   14:*/		return 0x8221F59C;
		  /* 8221F59Ch */ case   15:  		/* rlwimi R11, R29, 24, 4, 7 */
		/* 8221F59Ch case   15:*/		cpu::op::rlwimi<0,24,4,7>(regs,&regs.R11,regs.R29);
		/* 8221F59Ch case   15:*/		return 0x8221F5A0;
		  /* 8221F5A0h */ case   16:  		/* stb R20, <#[R31 + 50]> */
		/* 8221F5A0h case   16:*/		cpu::mem::store8( regs, regs.R20, (uint32)(regs.R31 + 0x00000032) );
		/* 8221F5A0h case   16:*/		return 0x8221F5A4;
		  /* 8221F5A4h */ case   17:  		/* stb R20, <#[R31 + 49]> */
		/* 8221F5A4h case   17:*/		cpu::mem::store8( regs, regs.R20, (uint32)(regs.R31 + 0x00000031) );
		/* 8221F5A4h case   17:*/		return 0x8221F5A8;
		  /* 8221F5A8h */ case   18:  		/* rlwinm R11, R11, 0, 28, 23 */
		/* 8221F5A8h case   18:*/		cpu::op::rlwinm<0,0,28,23>(regs,&regs.R11,regs.R11);
		/* 8221F5A8h case   18:*/		return 0x8221F5AC;
		  /* 8221F5ACh */ case   19:  		/* stw R11, <#[R31 + 52]> */
		/* 8221F5ACh case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000034) );
		/* 8221F5ACh case   19:*/		return 0x8221F5B0;
		  /* 8221F5B0h */ case   20:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8221F5B0h case   20:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8221F5B0h case   20:*/		return 0x8221F5B4;
		  /* 8221F5B4h */ case   21:  		/* rlwimi R11, R28, 12, 16, 19 */
		/* 8221F5B4h case   21:*/		cpu::op::rlwimi<0,12,16,19>(regs,&regs.R11,regs.R28);
		/* 8221F5B4h case   21:*/		return 0x8221F5B8;
		  /* 8221F5B8h */ case   22:  		/* stw R11, <#[R31 + 52]> */
		/* 8221F5B8h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000034) );
		/* 8221F5B8h case   22:*/		return 0x8221F5BC;
		  /* 8221F5BCh */ case   23:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8221F5BCh case   23:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8221F5BCh case   23:*/		return 0x8221F5C0;
		  /* 8221F5C0h */ case   24:  		/* rlwimi R11, R28, 21, 8, 10 */
		/* 8221F5C0h case   24:*/		cpu::op::rlwimi<0,21,8,10>(regs,&regs.R11,regs.R28);
		/* 8221F5C0h case   24:*/		return 0x8221F5C4;
		  /* 8221F5C4h */ case   25:  		/* rlwinm R11, R11, 0, 4, 31 */
		/* 8221F5C4h case   25:*/		cpu::op::rlwinm<0,0,4,31>(regs,&regs.R11,regs.R11);
		/* 8221F5C4h case   25:*/		return 0x8221F5C8;
		  /* 8221F5C8h */ case   26:  		/* rlwinm R11, R11, 0, 12, 10 */
		/* 8221F5C8h case   26:*/		cpu::op::rlwinm<0,0,12,10>(regs,&regs.R11,regs.R11);
		/* 8221F5C8h case   26:*/		return 0x8221F5CC;
		  /* 8221F5CCh */ case   27:  		/* stw R11, <#[R31 + 52]> */
		/* 8221F5CCh case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000034) );
		/* 8221F5CCh case   27:*/		return 0x8221F5D0;
	}
	return 0x8221F5D0;
} // Block from 8221F560h-8221F5D0h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8221F5D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F5D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F5D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F5D0);
		  /* 8221F5D0h */ case    0:  		/* lwz R11, <#[R21 + 40]> */
		/* 8221F5D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000028) );
		/* 8221F5D0h case    0:*/		return 0x8221F5D4;
		  /* 8221F5D4h */ case    1:  		/* li R4, 624 */
		/* 8221F5D4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x270);
		/* 8221F5D4h case    1:*/		return 0x8221F5D8;
		  /* 8221F5D8h */ case    2:  		/* mr R3, R30 */
		/* 8221F5D8h case    2:*/		regs.R3 = regs.R30;
		/* 8221F5D8h case    2:*/		return 0x8221F5DC;
		  /* 8221F5DCh */ case    3:  		/* addi R31, R11, 8 */
		/* 8221F5DCh case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x8);
		/* 8221F5DCh case    3:*/		return 0x8221F5E0;
		  /* 8221F5E0h */ case    4:  		/* bl -68840 */
		/* 8221F5E0h case    4:*/		regs.LR = 0x8221F5E4; return 0x8220E8F8;
		/* 8221F5E0h case    4:*/		return 0x8221F5E4;
		  /* 8221F5E4h */ case    5:  		/* stfs FR1, <#[R1 + 112]> */
		/* 8221F5E4h case    5:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R1 + 0x00000070) );
		/* 8221F5E4h case    5:*/		return 0x8221F5E8;
		  /* 8221F5E8h */ case    6:  		/* li R4, 625 */
		/* 8221F5E8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x271);
		/* 8221F5E8h case    6:*/		return 0x8221F5EC;
		  /* 8221F5ECh */ case    7:  		/* mr R3, R30 */
		/* 8221F5ECh case    7:*/		regs.R3 = regs.R30;
		/* 8221F5ECh case    7:*/		return 0x8221F5F0;
		  /* 8221F5F0h */ case    8:  		/* bl -68856 */
		/* 8221F5F0h case    8:*/		regs.LR = 0x8221F5F4; return 0x8220E8F8;
		/* 8221F5F0h case    8:*/		return 0x8221F5F4;
		  /* 8221F5F4h */ case    9:  		/* stfs FR1, <#[R1 + 116]> */
		/* 8221F5F4h case    9:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R1 + 0x00000074) );
		/* 8221F5F4h case    9:*/		return 0x8221F5F8;
		  /* 8221F5F8h */ case   10:  		/* li R4, 626 */
		/* 8221F5F8h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x272);
		/* 8221F5F8h case   10:*/		return 0x8221F5FC;
		  /* 8221F5FCh */ case   11:  		/* mr R3, R30 */
		/* 8221F5FCh case   11:*/		regs.R3 = regs.R30;
		/* 8221F5FCh case   11:*/		return 0x8221F600;
		  /* 8221F600h */ case   12:  		/* bl -68872 */
		/* 8221F600h case   12:*/		regs.LR = 0x8221F604; return 0x8220E8F8;
		/* 8221F600h case   12:*/		return 0x8221F604;
		  /* 8221F604h */ case   13:  		/* stfs FR1, <#[R1 + 120]> */
		/* 8221F604h case   13:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R1 + 0x00000078) );
		/* 8221F604h case   13:*/		return 0x8221F608;
		  /* 8221F608h */ case   14:  		/* li R4, 627 */
		/* 8221F608h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x273);
		/* 8221F608h case   14:*/		return 0x8221F60C;
		  /* 8221F60Ch */ case   15:  		/* mr R3, R30 */
		/* 8221F60Ch case   15:*/		regs.R3 = regs.R30;
		/* 8221F60Ch case   15:*/		return 0x8221F610;
		  /* 8221F610h */ case   16:  		/* bl -68888 */
		/* 8221F610h case   16:*/		regs.LR = 0x8221F614; return 0x8220E8F8;
		/* 8221F610h case   16:*/		return 0x8221F614;
		  /* 8221F614h */ case   17:  		/* stfs FR1, <#[R1 + 124]> */
		/* 8221F614h case   17:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R1 + 0x0000007C) );
		/* 8221F614h case   17:*/		return 0x8221F618;
		  /* 8221F618h */ case   18:  		/* li R5, 0 */
		/* 8221F618h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8221F618h case   18:*/		return 0x8221F61C;
		  /* 8221F61Ch */ case   19:  		/* li R4, 34 */
		/* 8221F61Ch case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x22);
		/* 8221F61Ch case   19:*/		return 0x8221F620;
	}
	return 0x8221F620;
} // Block from 8221F5D0h-8221F620h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8221F620h
// Function '?CP_CompileRenderState@XGRAPHICS@@YAXPAU_CP_COMPILED_PROGRAM@1@PAU_ABSTRACT_STATE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F620);
		  /* 8221F620h */ case    0:  		/* mr R3, R30 */
		/* 8221F620h case    0:*/		regs.R3 = regs.R30;
		/* 8221F620h case    0:*/		return 0x8221F624;
		  /* 8221F624h */ case    1:  		/* bl -794084 */
		/* 8221F624h case    1:*/		regs.LR = 0x8221F628; return 0x8215D840;
		/* 8221F624h case    1:*/		return 0x8221F628;
		  /* 8221F628h */ case    2:  		/* cmplwi CR0, R3, 0 */
		/* 8221F628h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8221F628h case    2:*/		return 0x8221F62C;
		  /* 8221F62Ch */ case    3:  		/* bc 12, CR0_EQ, 20 */
		/* 8221F62Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x8221F640;  }
		/* 8221F62Ch case    3:*/		return 0x8221F630;
		  /* 8221F630h */ case    4:  		/* addi R5, R1, 96 */
		/* 8221F630h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 8221F630h case    4:*/		return 0x8221F634;
		  /* 8221F634h */ case    5:  		/* li R4, 0 */
		/* 8221F634h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8221F634h case    5:*/		return 0x8221F638;
		  /* 8221F638h */ case    6:  		/* mr R3, R30 */
		/* 8221F638h case    6:*/		regs.R3 = regs.R30;
		/* 8221F638h case    6:*/		return 0x8221F63C;
		  /* 8221F63Ch */ case    7:  		/* bl 90212 */
		/* 8221F63Ch case    7:*/		regs.LR = 0x8221F640; return 0x822356A0;
		/* 8221F63Ch case    7:*/		return 0x8221F640;
	}
	return 0x8221F640;
} // Block from 8221F620h-8221F640h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8221F640h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F640);
		  /* 8221F640h */ case    0:  		/* lwz R11, <#[R1 + 96]> */
		/* 8221F640h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 8221F640h case    0:*/		return 0x8221F644;
		  /* 8221F644h */ case    1:  		/* li R7, 0 */
		/* 8221F644h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8221F644h case    1:*/		return 0x8221F648;
		  /* 8221F648h */ case    2:  		/* addi R4, R1, 80 */
		/* 8221F648h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8221F648h case    2:*/		return 0x8221F64C;
		  /* 8221F64Ch */ case    3:  		/* lwz R6, <#[R1 + 104]> */
		/* 8221F64Ch case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000068) );
		/* 8221F64Ch case    3:*/		return 0x8221F650;
		  /* 8221F650h */ case    4:  		/* addic R10, R11, -1 */
		/* 8221F650h case    4:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 8221F650h case    4:*/		return 0x8221F654;
		  /* 8221F654h */ case    5:  		/* lwz R5, <#[R1 + 100]> */
		/* 8221F654h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000064) );
		/* 8221F654h case    5:*/		return 0x8221F658;
		  /* 8221F658h */ case    6:  		/* addi R3, R1, 112 */
		/* 8221F658h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 8221F658h case    6:*/		return 0x8221F65C;
		  /* 8221F65Ch */ case    7:  		/* subfe R8, R10, R11 */
		/* 8221F65Ch case    7:*/		cpu::op::subfe<0>(regs,&regs.R8,regs.R10,regs.R11);
		/* 8221F65Ch case    7:*/		return 0x8221F660;
		  /* 8221F660h */ case    8:  		/* bl 89696 */
		/* 8221F660h case    8:*/		regs.LR = 0x8221F664; return 0x822354C0;
		/* 8221F660h case    8:*/		return 0x8221F664;
		  /* 8221F664h */ case    9:  		/* cmplwi CR6, R3, 8 */
		/* 8221F664h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000008);
		/* 8221F664h case    9:*/		return 0x8221F668;
		  /* 8221F668h */ case   10:  		/* bc 12, CR6_GT, 112 */
		/* 8221F668h case   10:*/		if ( regs.CR[6].gt ) { return 0x8221F6D8;  }
		/* 8221F668h case   10:*/		return 0x8221F66C;
		  /* 8221F66Ch */ case   11:  		/* lwz R11, <#[R1 + 88]> */
		/* 8221F66Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8221F66Ch case   11:*/		return 0x8221F670;
		  /* 8221F670h */ case   12:  		/* lwz R10, <#[R1 + 80]> */
		/* 8221F670h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8221F670h case   12:*/		return 0x8221F674;
		  /* 8221F674h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 8221F674h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8221F674h case   13:*/		return 0x8221F678;
		  /* 8221F678h */ case   14:  		/* bc 12, CR6_EQ, 32 */
		/* 8221F678h case   14:*/		if ( regs.CR[6].eq ) { return 0x8221F698;  }
		/* 8221F678h case   14:*/		return 0x8221F67C;
		  /* 8221F67Ch */ case   15:  		/* lis R11, -32252 */
		/* 8221F67Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221F67Ch case   15:*/		return 0x8221F680;
		  /* 8221F680h */ case   16:  		/* mr R6, R17 */
		/* 8221F680h case   16:*/		regs.R6 = regs.R17;
		/* 8221F680h case   16:*/		return 0x8221F684;
		  /* 8221F684h */ case   17:  		/* addi R5, R11, -1404 */
		/* 8221F684h case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFA84);
		/* 8221F684h case   17:*/		return 0x8221F688;
		  /* 8221F688h */ case   18:  		/* mr R4, R18 */
		/* 8221F688h case   18:*/		regs.R4 = regs.R18;
		/* 8221F688h case   18:*/		return 0x8221F68C;
		  /* 8221F68Ch */ case   19:  		/* li R7, 1366 */
		/* 8221F68Ch case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x556);
		/* 8221F68Ch case   19:*/		return 0x8221F690;
		  /* 8221F690h */ case   20:  		/* li R3, 0 */
		/* 8221F690h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221F690h case   20:*/		return 0x8221F694;
		  /* 8221F694h */ case   21:  		/* bl -817804 */
		/* 8221F694h case   21:*/		regs.LR = 0x8221F698; return 0x82157C08;
		/* 8221F694h case   21:*/		return 0x8221F698;
	}
	return 0x8221F698;
} // Block from 8221F640h-8221F698h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8221F698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F698);
		  /* 8221F698h */ case    0:  		/* lwz R11, <#[R1 + 92]> */
		/* 8221F698h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8221F698h case    0:*/		return 0x8221F69C;
		  /* 8221F69Ch */ case    1:  		/* lwz R10, <#[R1 + 84]> */
		/* 8221F69Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8221F69Ch case    1:*/		return 0x8221F6A0;
		  /* 8221F6A0h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 8221F6A0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8221F6A0h case    2:*/		return 0x8221F6A4;
		  /* 8221F6A4h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 8221F6A4h case    3:*/		if ( regs.CR[6].eq ) { return 0x8221F6C4;  }
		/* 8221F6A4h case    3:*/		return 0x8221F6A8;
		  /* 8221F6A8h */ case    4:  		/* lis R11, -32252 */
		/* 8221F6A8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221F6A8h case    4:*/		return 0x8221F6AC;
		  /* 8221F6ACh */ case    5:  		/* mr R6, R17 */
		/* 8221F6ACh case    5:*/		regs.R6 = regs.R17;
		/* 8221F6ACh case    5:*/		return 0x8221F6B0;
		  /* 8221F6B0h */ case    6:  		/* addi R5, R11, -1436 */
		/* 8221F6B0h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFA64);
		/* 8221F6B0h case    6:*/		return 0x8221F6B4;
		  /* 8221F6B4h */ case    7:  		/* mr R4, R18 */
		/* 8221F6B4h case    7:*/		regs.R4 = regs.R18;
		/* 8221F6B4h case    7:*/		return 0x8221F6B8;
		  /* 8221F6B8h */ case    8:  		/* li R7, 1367 */
		/* 8221F6B8h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x557);
		/* 8221F6B8h case    8:*/		return 0x8221F6BC;
		  /* 8221F6BCh */ case    9:  		/* li R3, 0 */
		/* 8221F6BCh case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221F6BCh case    9:*/		return 0x8221F6C0;
		  /* 8221F6C0h */ case   10:  		/* bl -817848 */
		/* 8221F6C0h case   10:*/		regs.LR = 0x8221F6C4; return 0x82157C08;
		/* 8221F6C0h case   10:*/		return 0x8221F6C4;
	}
	return 0x8221F6C4;
} // Block from 8221F698h-8221F6C4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8221F6C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F6C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F6C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F6C4);
		  /* 8221F6C4h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 8221F6C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8221F6C4h case    0:*/		return 0x8221F6C8;
		  /* 8221F6C8h */ case    1:  		/* lwz R10, <#[R1 + 84]> */
		/* 8221F6C8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8221F6C8h case    1:*/		return 0x8221F6CC;
		  /* 8221F6CCh */ case    2:  		/* stw R11, <#[R31 + 124]> */
		/* 8221F6CCh case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000007C) );
		/* 8221F6CCh case    2:*/		return 0x8221F6D0;
		  /* 8221F6D0h */ case    3:  		/* stw R10, <#[R31 + 120]> */
		/* 8221F6D0h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000078) );
		/* 8221F6D0h case    3:*/		return 0x8221F6D4;
		  /* 8221F6D4h */ case    4:  		/* b 12 */
		/* 8221F6D4h case    4:*/		return 0x8221F6E0;
		/* 8221F6D4h case    4:*/		return 0x8221F6D8;
	}
	return 0x8221F6D8;
} // Block from 8221F6C4h-8221F6D8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221F6D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F6D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F6D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F6D8);
		  /* 8221F6D8h */ case    0:  		/* stw R20, <#[R31 + 124]> */
		/* 8221F6D8h case    0:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R31 + 0x0000007C) );
		/* 8221F6D8h case    0:*/		return 0x8221F6DC;
		  /* 8221F6DCh */ case    1:  		/* stw R20, <#[R31 + 120]> */
		/* 8221F6DCh case    1:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R31 + 0x00000078) );
		/* 8221F6DCh case    1:*/		return 0x8221F6E0;
	}
	return 0x8221F6E0;
} // Block from 8221F6D8h-8221F6E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221F6E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F6E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F6E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F6E0);
		  /* 8221F6E0h */ case    0:  		/* li R4, 53 */
		/* 8221F6E0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x35);
		/* 8221F6E0h case    0:*/		return 0x8221F6E4;
		  /* 8221F6E4h */ case    1:  		/* mr R3, R30 */
		/* 8221F6E4h case    1:*/		regs.R3 = regs.R30;
		/* 8221F6E4h case    1:*/		return 0x8221F6E8;
		  /* 8221F6E8h */ case    2:  		/* bl -69104 */
		/* 8221F6E8h case    2:*/		regs.LR = 0x8221F6EC; return 0x8220E8F8;
		/* 8221F6E8h case    2:*/		return 0x8221F6EC;
		  /* 8221F6ECh */ case    3:  		/* bl 211732 */
		/* 8221F6ECh case    3:*/		regs.LR = 0x8221F6F0; return 0x82253200;
		/* 8221F6ECh case    3:*/		return 0x8221F6F0;
		  /* 8221F6F0h */ case    4:  		/* stw R3, <#[R31 + 116]> */
		/* 8221F6F0h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000074) );
		/* 8221F6F0h case    4:*/		return 0x8221F6F4;
		  /* 8221F6F4h */ case    5:  		/* li R4, 672 */
		/* 8221F6F4h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x2A0);
		/* 8221F6F4h case    5:*/		return 0x8221F6F8;
		  /* 8221F6F8h */ case    6:  		/* mr R3, R30 */
		/* 8221F6F8h case    6:*/		regs.R3 = regs.R30;
		/* 8221F6F8h case    6:*/		return 0x8221F6FC;
		  /* 8221F6FCh */ case    7:  		/* bl -795116 */
		/* 8221F6FCh case    7:*/		regs.LR = 0x8221F700; return 0x8215D510;
		/* 8221F6FCh case    7:*/		return 0x8221F700;
		  /* 8221F700h */ case    8:  		/* lwz R11, <#[R31 + 96]> */
		/* 8221F700h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 8221F700h case    8:*/		return 0x8221F704;
		  /* 8221F704h */ case    9:  		/* li R4, 673 */
		/* 8221F704h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x2A1);
		/* 8221F704h case    9:*/		return 0x8221F708;
		  /* 8221F708h */ case   10:  		/* rlwimi R11, R3, 0, 29, 31 */
		/* 8221F708h case   10:*/		cpu::op::rlwimi<0,0,29,31>(regs,&regs.R11,regs.R3);
		/* 8221F708h case   10:*/		return 0x8221F70C;
		  /* 8221F70Ch */ case   11:  		/* mr R3, R30 */
		/* 8221F70Ch case   11:*/		regs.R3 = regs.R30;
		/* 8221F70Ch case   11:*/		return 0x8221F710;
		  /* 8221F710h */ case   12:  		/* stw R11, <#[R31 + 96]> */
		/* 8221F710h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 8221F710h case   12:*/		return 0x8221F714;
		  /* 8221F714h */ case   13:  		/* bl -795140 */
		/* 8221F714h case   13:*/		regs.LR = 0x8221F718; return 0x8215D510;
		/* 8221F714h case   13:*/		return 0x8221F718;
		  /* 8221F718h */ case   14:  		/* lwz R11, <#[R31 + 96]> */
		/* 8221F718h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 8221F718h case   14:*/		return 0x8221F71C;
		  /* 8221F71Ch */ case   15:  		/* li R4, 618 */
		/* 8221F71Ch case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x26A);
		/* 8221F71Ch case   15:*/		return 0x8221F720;
		  /* 8221F720h */ case   16:  		/* rlwimi R11, R3, 4, 25, 27 */
		/* 8221F720h case   16:*/		cpu::op::rlwimi<0,4,25,27>(regs,&regs.R11,regs.R3);
		/* 8221F720h case   16:*/		return 0x8221F724;
		  /* 8221F724h */ case   17:  		/* mr R3, R30 */
		/* 8221F724h case   17:*/		regs.R3 = regs.R30;
		/* 8221F724h case   17:*/		return 0x8221F728;
		  /* 8221F728h */ case   18:  		/* stw R11, <#[R31 + 96]> */
		/* 8221F728h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 8221F728h case   18:*/		return 0x8221F72C;
		  /* 8221F72Ch */ case   19:  		/* bl -795164 */
		/* 8221F72Ch case   19:*/		regs.LR = 0x8221F730; return 0x8215D510;
		/* 8221F72Ch case   19:*/		return 0x8221F730;
		  /* 8221F730h */ case   20:  		/* lwz R11, <#[R31 + 96]> */
		/* 8221F730h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 8221F730h case   20:*/		return 0x8221F734;
		  /* 8221F734h */ case   21:  		/* li R4, 55 */
		/* 8221F734h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x37);
		/* 8221F734h case   21:*/		return 0x8221F738;
		  /* 8221F738h */ case   22:  		/* rlwimi R11, R3, 8, 23, 23 */
		/* 8221F738h case   22:*/		cpu::op::rlwimi<0,8,23,23>(regs,&regs.R11,regs.R3);
		/* 8221F738h case   22:*/		return 0x8221F73C;
		  /* 8221F73Ch */ case   23:  		/* mr R3, R30 */
		/* 8221F73Ch case   23:*/		regs.R3 = regs.R30;
		/* 8221F73Ch case   23:*/		return 0x8221F740;
		  /* 8221F740h */ case   24:  		/* stw R11, <#[R31 + 96]> */
		/* 8221F740h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 8221F740h case   24:*/		return 0x8221F744;
		  /* 8221F744h */ case   25:  		/* bl -795188 */
		/* 8221F744h case   25:*/		regs.LR = 0x8221F748; return 0x8215D510;
		/* 8221F744h case   25:*/		return 0x8221F748;
		  /* 8221F748h */ case   26:  		/* lwz R11, <#[R31 + 96]> */
		/* 8221F748h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 8221F748h case   26:*/		return 0x8221F74C;
		  /* 8221F74Ch */ case   27:  		/* li R4, 674 */
		/* 8221F74Ch case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x2A2);
		/* 8221F74Ch case   27:*/		return 0x8221F750;
		  /* 8221F750h */ case   28:  		/* rlwimi R11, R3, 9, 22, 22 */
		/* 8221F750h case   28:*/		cpu::op::rlwimi<0,9,22,22>(regs,&regs.R11,regs.R3);
		/* 8221F750h case   28:*/		return 0x8221F754;
		  /* 8221F754h */ case   29:  		/* mr R3, R30 */
		/* 8221F754h case   29:*/		regs.R3 = regs.R30;
		/* 8221F754h case   29:*/		return 0x8221F758;
		  /* 8221F758h */ case   30:  		/* stw R11, <#[R31 + 96]> */
		/* 8221F758h case   30:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 8221F758h case   30:*/		return 0x8221F75C;
		  /* 8221F75Ch */ case   31:  		/* bl -795212 */
		/* 8221F75Ch case   31:*/		regs.LR = 0x8221F760; return 0x8215D510;
		/* 8221F75Ch case   31:*/		return 0x8221F760;
		  /* 8221F760h */ case   32:  		/* lwz R11, <#[R31 + 96]> */
		/* 8221F760h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 8221F760h case   32:*/		return 0x8221F764;
		  /* 8221F764h */ case   33:  		/* li R4, 675 */
		/* 8221F764h case   33:*/		cpu::op::li<0>(regs,&regs.R4,0x2A3);
		/* 8221F764h case   33:*/		return 0x8221F768;
		  /* 8221F768h */ case   34:  		/* rlwimi R11, R3, 20, 10, 11 */
		/* 8221F768h case   34:*/		cpu::op::rlwimi<0,20,10,11>(regs,&regs.R11,regs.R3);
		/* 8221F768h case   34:*/		return 0x8221F76C;
		  /* 8221F76Ch */ case   35:  		/* mr R3, R30 */
		/* 8221F76Ch case   35:*/		regs.R3 = regs.R30;
		/* 8221F76Ch case   35:*/		return 0x8221F770;
		  /* 8221F770h */ case   36:  		/* stw R11, <#[R31 + 96]> */
		/* 8221F770h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 8221F770h case   36:*/		return 0x8221F774;
		  /* 8221F774h */ case   37:  		/* bl -795236 */
		/* 8221F774h case   37:*/		regs.LR = 0x8221F778; return 0x8215D510;
		/* 8221F774h case   37:*/		return 0x8221F778;
		  /* 8221F778h */ case   38:  		/* stw R3, <#[R31 + 100]> */
		/* 8221F778h case   38:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000064) );
		/* 8221F778h case   38:*/		return 0x8221F77C;
		  /* 8221F77Ch */ case   39:  		/* li R4, 680 */
		/* 8221F77Ch case   39:*/		cpu::op::li<0>(regs,&regs.R4,0x2A8);
		/* 8221F77Ch case   39:*/		return 0x8221F780;
		  /* 8221F780h */ case   40:  		/* mr R3, R30 */
		/* 8221F780h case   40:*/		regs.R3 = regs.R30;
		/* 8221F780h case   40:*/		return 0x8221F784;
		  /* 8221F784h */ case   41:  		/* bl -795252 */
		/* 8221F784h case   41:*/		regs.LR = 0x8221F788; return 0x8215D510;
		/* 8221F784h case   41:*/		return 0x8221F788;
		  /* 8221F788h */ case   42:  		/* mr R29, R3 */
		/* 8221F788h case   42:*/		regs.R29 = regs.R3;
		/* 8221F788h case   42:*/		return 0x8221F78C;
		  /* 8221F78Ch */ case   43:  		/* rlwinm. R11, R3, 0, 27, 31 */
		/* 8221F78Ch case   43:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R11,regs.R3);
		/* 8221F78Ch case   43:*/		return 0x8221F790;
		  /* 8221F790h */ case   44:  		/* bc 12, CR0_EQ, 32 */
		/* 8221F790h case   44:*/		if ( regs.CR[0].eq ) { return 0x8221F7B0;  }
		/* 8221F790h case   44:*/		return 0x8221F794;
		  /* 8221F794h */ case   45:  		/* lis R11, -32252 */
		/* 8221F794h case   45:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221F794h case   45:*/		return 0x8221F798;
		  /* 8221F798h */ case   46:  		/* mr R6, R17 */
		/* 8221F798h case   46:*/		regs.R6 = regs.R17;
		/* 8221F798h case   46:*/		return 0x8221F79C;
		  /* 8221F79Ch */ case   47:  		/* addi R5, R11, -1460 */
		/* 8221F79Ch case   47:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFA4C);
		/* 8221F79Ch case   47:*/		return 0x8221F7A0;
		  /* 8221F7A0h */ case   48:  		/* mr R4, R18 */
		/* 8221F7A0h case   48:*/		regs.R4 = regs.R18;
		/* 8221F7A0h case   48:*/		return 0x8221F7A4;
		  /* 8221F7A4h */ case   49:  		/* li R7, 1417 */
		/* 8221F7A4h case   49:*/		cpu::op::li<0>(regs,&regs.R7,0x589);
		/* 8221F7A4h case   49:*/		return 0x8221F7A8;
		  /* 8221F7A8h */ case   50:  		/* li R3, 0 */
		/* 8221F7A8h case   50:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221F7A8h case   50:*/		return 0x8221F7AC;
		  /* 8221F7ACh */ case   51:  		/* bl -818084 */
		/* 8221F7ACh case   51:*/		regs.LR = 0x8221F7B0; return 0x82157C08;
		/* 8221F7ACh case   51:*/		return 0x8221F7B0;
	}
	return 0x8221F7B0;
} // Block from 8221F6E0h-8221F7B0h (52 instructions)

//////////////////////////////////////////////////////
// Block at 8221F7B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F7B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F7B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F7B0);
		  /* 8221F7B0h */ case    0:  		/* lwz R11, <#[R31 + 104]> */
		/* 8221F7B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000068) );
		/* 8221F7B0h case    0:*/		return 0x8221F7B4;
		  /* 8221F7B4h */ case    1:  		/* li R4, 681 */
		/* 8221F7B4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x2A9);
		/* 8221F7B4h case    1:*/		return 0x8221F7B8;
		  /* 8221F7B8h */ case    2:  		/* mr R3, R30 */
		/* 8221F7B8h case    2:*/		regs.R3 = regs.R30;
		/* 8221F7B8h case    2:*/		return 0x8221F7BC;
		  /* 8221F7BCh */ case    3:  		/* rlwimi R11, R29, 0, 18, 31 */
		/* 8221F7BCh case    3:*/		cpu::op::rlwimi<0,0,18,31>(regs,&regs.R11,regs.R29);
		/* 8221F7BCh case    3:*/		return 0x8221F7C0;
		  /* 8221F7C0h */ case    4:  		/* stw R11, <#[R31 + 104]> */
		/* 8221F7C0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000068) );
		/* 8221F7C0h case    4:*/		return 0x8221F7C4;
		  /* 8221F7C4h */ case    5:  		/* bl -795316 */
		/* 8221F7C4h case    5:*/		regs.LR = 0x8221F7C8; return 0x8215D510;
		/* 8221F7C4h case    5:*/		return 0x8221F7C8;
		  /* 8221F7C8h */ case    6:  		/* lwz R11, <#[R31 + 104]> */
		/* 8221F7C8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000068) );
		/* 8221F7C8h case    6:*/		return 0x8221F7CC;
		  /* 8221F7CCh */ case    7:  		/* li R4, 676 */
		/* 8221F7CCh case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x2A4);
		/* 8221F7CCh case    7:*/		return 0x8221F7D0;
		  /* 8221F7D0h */ case    8:  		/* rlwimi R11, R3, 16, 2, 15 */
		/* 8221F7D0h case    8:*/		cpu::op::rlwimi<0,16,2,15>(regs,&regs.R11,regs.R3);
		/* 8221F7D0h case    8:*/		return 0x8221F7D4;
		  /* 8221F7D4h */ case    9:  		/* mr R3, R30 */
		/* 8221F7D4h case    9:*/		regs.R3 = regs.R30;
		/* 8221F7D4h case    9:*/		return 0x8221F7D8;
		  /* 8221F7D8h */ case   10:  		/* stw R11, <#[R31 + 104]> */
		/* 8221F7D8h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000068) );
		/* 8221F7D8h case   10:*/		return 0x8221F7DC;
		  /* 8221F7DCh */ case   11:  		/* bl -795340 */
		/* 8221F7DCh case   11:*/		regs.LR = 0x8221F7E0; return 0x8215D510;
		/* 8221F7DCh case   11:*/		return 0x8221F7E0;
		  /* 8221F7E0h */ case   12:  		/* lwz R11, <#[R31 + 108]> */
		/* 8221F7E0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8221F7E0h case   12:*/		return 0x8221F7E4;
		  /* 8221F7E4h */ case   13:  		/* li R4, 622 */
		/* 8221F7E4h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x26E);
		/* 8221F7E4h case   13:*/		return 0x8221F7E8;
		  /* 8221F7E8h */ case   14:  		/* rlwimi R11, R3, 0, 29, 31 */
		/* 8221F7E8h case   14:*/		cpu::op::rlwimi<0,0,29,31>(regs,&regs.R11,regs.R3);
		/* 8221F7E8h case   14:*/		return 0x8221F7EC;
		  /* 8221F7ECh */ case   15:  		/* mr R3, R30 */
		/* 8221F7ECh case   15:*/		regs.R3 = regs.R30;
		/* 8221F7ECh case   15:*/		return 0x8221F7F0;
		  /* 8221F7F0h */ case   16:  		/* stw R11, <#[R31 + 108]> */
		/* 8221F7F0h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8221F7F0h case   16:*/		return 0x8221F7F4;
		  /* 8221F7F4h */ case   17:  		/* bl -795364 */
		/* 8221F7F4h case   17:*/		regs.LR = 0x8221F7F8; return 0x8215D510;
		/* 8221F7F4h case   17:*/		return 0x8221F7F8;
		  /* 8221F7F8h */ case   18:  		/* lwz R11, <#[R31 + 108]> */
		/* 8221F7F8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8221F7F8h case   18:*/		return 0x8221F7FC;
		  /* 8221F7FCh */ case   19:  		/* li R4, 621 */
		/* 8221F7FCh case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x26D);
		/* 8221F7FCh case   19:*/		return 0x8221F800;
		  /* 8221F800h */ case   20:  		/* rlwimi R11, R3, 3, 28, 28 */
		/* 8221F800h case   20:*/		cpu::op::rlwimi<0,3,28,28>(regs,&regs.R11,regs.R3);
		/* 8221F800h case   20:*/		return 0x8221F804;
		  /* 8221F804h */ case   21:  		/* mr R3, R30 */
		/* 8221F804h case   21:*/		regs.R3 = regs.R30;
		/* 8221F804h case   21:*/		return 0x8221F808;
		  /* 8221F808h */ case   22:  		/* stw R11, <#[R31 + 108]> */
		/* 8221F808h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8221F808h case   22:*/		return 0x8221F80C;
		  /* 8221F80Ch */ case   23:  		/* bl -795388 */
		/* 8221F80Ch case   23:*/		regs.LR = 0x8221F810; return 0x8215D510;
		/* 8221F80Ch case   23:*/		return 0x8221F810;
		  /* 8221F810h */ case   24:  		/* lwz R11, <#[R31 + 108]> */
		/* 8221F810h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8221F810h case   24:*/		return 0x8221F814;
		  /* 8221F814h */ case   25:  		/* li R4, 670 */
		/* 8221F814h case   25:*/		cpu::op::li<0>(regs,&regs.R4,0x29E);
		/* 8221F814h case   25:*/		return 0x8221F818;
		  /* 8221F818h */ case   26:  		/* rlwimi R11, R3, 4, 25, 27 */
		/* 8221F818h case   26:*/		cpu::op::rlwimi<0,4,25,27>(regs,&regs.R11,regs.R3);
		/* 8221F818h case   26:*/		return 0x8221F81C;
		  /* 8221F81Ch */ case   27:  		/* mr R3, R30 */
		/* 8221F81Ch case   27:*/		regs.R3 = regs.R30;
		/* 8221F81Ch case   27:*/		return 0x8221F820;
		  /* 8221F820h */ case   28:  		/* stw R11, <#[R31 + 108]> */
		/* 8221F820h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8221F820h case   28:*/		return 0x8221F824;
		  /* 8221F824h */ case   29:  		/* bl -795412 */
		/* 8221F824h case   29:*/		regs.LR = 0x8221F828; return 0x8215D510;
		/* 8221F824h case   29:*/		return 0x8221F828;
		  /* 8221F828h */ case   30:  		/* lwz R11, <#[R31 + 108]> */
		/* 8221F828h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8221F828h case   30:*/		return 0x8221F82C;
		  /* 8221F82Ch */ case   31:  		/* li R4, 677 */
		/* 8221F82Ch case   31:*/		cpu::op::li<0>(regs,&regs.R4,0x2A5);
		/* 8221F82Ch case   31:*/		return 0x8221F830;
		  /* 8221F830h */ case   32:  		/* rlwimi R11, R3, 7, 19, 24 */
		/* 8221F830h case   32:*/		cpu::op::rlwimi<0,7,19,24>(regs,&regs.R11,regs.R3);
		/* 8221F830h case   32:*/		return 0x8221F834;
		  /* 8221F834h */ case   33:  		/* mr R3, R30 */
		/* 8221F834h case   33:*/		regs.R3 = regs.R30;
		/* 8221F834h case   33:*/		return 0x8221F838;
		  /* 8221F838h */ case   34:  		/* stw R11, <#[R31 + 108]> */
		/* 8221F838h case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8221F838h case   34:*/		return 0x8221F83C;
		  /* 8221F83Ch */ case   35:  		/* bl -795436 */
		/* 8221F83Ch case   35:*/		regs.LR = 0x8221F840; return 0x8215D510;
		/* 8221F83Ch case   35:*/		return 0x8221F840;
		  /* 8221F840h */ case   36:  		/* lwz R11, <#[R31 + 108]> */
		/* 8221F840h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8221F840h case   36:*/		return 0x8221F844;
		  /* 8221F844h */ case   37:  		/* li R4, 678 */
		/* 8221F844h case   37:*/		cpu::op::li<0>(regs,&regs.R4,0x2A6);
		/* 8221F844h case   37:*/		return 0x8221F848;
		  /* 8221F848h */ case   38:  		/* rlwimi R11, R3, 13, 16, 18 */
		/* 8221F848h case   38:*/		cpu::op::rlwimi<0,13,16,18>(regs,&regs.R11,regs.R3);
		/* 8221F848h case   38:*/		return 0x8221F84C;
		  /* 8221F84Ch */ case   39:  		/* mr R3, R30 */
		/* 8221F84Ch case   39:*/		regs.R3 = regs.R30;
		/* 8221F84Ch case   39:*/		return 0x8221F850;
		  /* 8221F850h */ case   40:  		/* stw R11, <#[R31 + 108]> */
		/* 8221F850h case   40:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8221F850h case   40:*/		return 0x8221F854;
		  /* 8221F854h */ case   41:  		/* bl -795460 */
		/* 8221F854h case   41:*/		regs.LR = 0x8221F858; return 0x8215D510;
		/* 8221F854h case   41:*/		return 0x8221F858;
		  /* 8221F858h */ case   42:  		/* lwz R11, <#[R31 + 108]> */
		/* 8221F858h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8221F858h case   42:*/		return 0x8221F85C;
		  /* 8221F85Ch */ case   43:  		/* li R4, 679 */
		/* 8221F85Ch case   43:*/		cpu::op::li<0>(regs,&regs.R4,0x2A7);
		/* 8221F85Ch case   43:*/		return 0x8221F860;
		  /* 8221F860h */ case   44:  		/* rlwimi R11, R3, 16, 10, 15 */
		/* 8221F860h case   44:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R11,regs.R3);
		/* 8221F860h case   44:*/		return 0x8221F864;
		  /* 8221F864h */ case   45:  		/* mr R3, R30 */
		/* 8221F864h case   45:*/		regs.R3 = regs.R30;
		/* 8221F864h case   45:*/		return 0x8221F868;
		  /* 8221F868h */ case   46:  		/* stw R11, <#[R31 + 108]> */
		/* 8221F868h case   46:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8221F868h case   46:*/		return 0x8221F86C;
		  /* 8221F86Ch */ case   47:  		/* bl -795484 */
		/* 8221F86Ch case   47:*/		regs.LR = 0x8221F870; return 0x8215D510;
		/* 8221F86Ch case   47:*/		return 0x8221F870;
		  /* 8221F870h */ case   48:  		/* lwz R11, <#[R31 + 108]> */
		/* 8221F870h case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8221F870h case   48:*/		return 0x8221F874;
		  /* 8221F874h */ case   49:  		/* li R4, 682 */
		/* 8221F874h case   49:*/		cpu::op::li<0>(regs,&regs.R4,0x2AA);
		/* 8221F874h case   49:*/		return 0x8221F878;
		  /* 8221F878h */ case   50:  		/* rlwimi R11, R3, 24, 7, 7 */
		/* 8221F878h case   50:*/		cpu::op::rlwimi<0,24,7,7>(regs,&regs.R11,regs.R3);
		/* 8221F878h case   50:*/		return 0x8221F87C;
		  /* 8221F87Ch */ case   51:  		/* mr R3, R30 */
		/* 8221F87Ch case   51:*/		regs.R3 = regs.R30;
		/* 8221F87Ch case   51:*/		return 0x8221F880;
		  /* 8221F880h */ case   52:  		/* stw R11, <#[R31 + 108]> */
		/* 8221F880h case   52:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8221F880h case   52:*/		return 0x8221F884;
		  /* 8221F884h */ case   53:  		/* bl -795508 */
		/* 8221F884h case   53:*/		regs.LR = 0x8221F888; return 0x8215D510;
		/* 8221F884h case   53:*/		return 0x8221F888;
		  /* 8221F888h */ case   54:  		/* lwz R11, <#[R31 + 128]> */
		/* 8221F888h case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000080) );
		/* 8221F888h case   54:*/		return 0x8221F88C;
		  /* 8221F88Ch */ case   55:  		/* mr R10, R3 */
		/* 8221F88Ch case   55:*/		regs.R10 = regs.R3;
		/* 8221F88Ch case   55:*/		return 0x8221F890;
		  /* 8221F890h */ case   56:  		/* li R4, 684 */
		/* 8221F890h case   56:*/		cpu::op::li<0>(regs,&regs.R4,0x2AC);
		/* 8221F890h case   56:*/		return 0x8221F894;
		  /* 8221F894h */ case   57:  		/* rlwimi R10, R11, 0, 0, 28 */
		/* 8221F894h case   57:*/		cpu::op::rlwimi<0,0,0,28>(regs,&regs.R10,regs.R11);
		/* 8221F894h case   57:*/		return 0x8221F898;
		  /* 8221F898h */ case   58:  		/* mr R3, R30 */
		/* 8221F898h case   58:*/		regs.R3 = regs.R30;
		/* 8221F898h case   58:*/		return 0x8221F89C;
		  /* 8221F89Ch */ case   59:  		/* stw R10, <#[R31 + 128]> */
		/* 8221F89Ch case   59:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000080) );
		/* 8221F89Ch case   59:*/		return 0x8221F8A0;
		  /* 8221F8A0h */ case   60:  		/* bl -795536 */
		/* 8221F8A0h case   60:*/		regs.LR = 0x8221F8A4; return 0x8215D510;
		/* 8221F8A0h case   60:*/		return 0x8221F8A4;
		  /* 8221F8A4h */ case   61:  		/* lwz R11, <#[R31 + 128]> */
		/* 8221F8A4h case   61:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000080) );
		/* 8221F8A4h case   61:*/		return 0x8221F8A8;
		  /* 8221F8A8h */ case   62:  		/* li R4, 683 */
		/* 8221F8A8h case   62:*/		cpu::op::li<0>(regs,&regs.R4,0x2AB);
		/* 8221F8A8h case   62:*/		return 0x8221F8AC;
		  /* 8221F8ACh */ case   63:  		/* rlwimi R11, R3, 4, 25, 27 */
		/* 8221F8ACh case   63:*/		cpu::op::rlwimi<0,4,25,27>(regs,&regs.R11,regs.R3);
		/* 8221F8ACh case   63:*/		return 0x8221F8B0;
		  /* 8221F8B0h */ case   64:  		/* mr R3, R30 */
		/* 8221F8B0h case   64:*/		regs.R3 = regs.R30;
		/* 8221F8B0h case   64:*/		return 0x8221F8B4;
		  /* 8221F8B4h */ case   65:  		/* stw R11, <#[R31 + 128]> */
		/* 8221F8B4h case   65:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000080) );
		/* 8221F8B4h case   65:*/		return 0x8221F8B8;
		  /* 8221F8B8h */ case   66:  		/* bl -795560 */
		/* 8221F8B8h case   66:*/		regs.LR = 0x8221F8BC; return 0x8215D510;
		/* 8221F8B8h case   66:*/		return 0x8221F8BC;
		  /* 8221F8BCh */ case   67:  		/* lwz R11, <#[R31 + 128]> */
		/* 8221F8BCh case   67:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000080) );
		/* 8221F8BCh case   67:*/		return 0x8221F8C0;
		  /* 8221F8C0h */ case   68:  		/* li R4, 685 */
		/* 8221F8C0h case   68:*/		cpu::op::li<0>(regs,&regs.R4,0x2AD);
		/* 8221F8C0h case   68:*/		return 0x8221F8C4;
		  /* 8221F8C4h */ case   69:  		/* rlwimi R11, R3, 8, 21, 23 */
		/* 8221F8C4h case   69:*/		cpu::op::rlwimi<0,8,21,23>(regs,&regs.R11,regs.R3);
		/* 8221F8C4h case   69:*/		return 0x8221F8C8;
		  /* 8221F8C8h */ case   70:  		/* mr R3, R30 */
		/* 8221F8C8h case   70:*/		regs.R3 = regs.R30;
		/* 8221F8C8h case   70:*/		return 0x8221F8CC;
		  /* 8221F8CCh */ case   71:  		/* stw R11, <#[R31 + 128]> */
		/* 8221F8CCh case   71:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000080) );
		/* 8221F8CCh case   71:*/		return 0x8221F8D0;
		  /* 8221F8D0h */ case   72:  		/* bl -795584 */
		/* 8221F8D0h case   72:*/		regs.LR = 0x8221F8D4; return 0x8215D510;
		/* 8221F8D0h case   72:*/		return 0x8221F8D4;
		  /* 8221F8D4h */ case   73:  		/* lwz R11, <#[R31 + 128]> */
		/* 8221F8D4h case   73:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000080) );
		/* 8221F8D4h case   73:*/		return 0x8221F8D8;
		  /* 8221F8D8h */ case   74:  		/* li R10, -1 */
		/* 8221F8D8h case   74:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8221F8D8h case   74:*/		return 0x8221F8DC;
		  /* 8221F8DCh */ case   75:  		/* stw R20, <#[R31 + 132]> */
		/* 8221F8DCh case   75:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R31 + 0x00000084) );
		/* 8221F8DCh case   75:*/		return 0x8221F8E0;
		  /* 8221F8E0h */ case   76:  		/* rlwimi R11, R3, 12, 17, 19 */
		/* 8221F8E0h case   76:*/		cpu::op::rlwimi<0,12,17,19>(regs,&regs.R11,regs.R3);
		/* 8221F8E0h case   76:*/		return 0x8221F8E4;
		  /* 8221F8E4h */ case   77:  		/* stw R10, <#[R31 + 136]> */
		/* 8221F8E4h case   77:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000088) );
		/* 8221F8E4h case   77:*/		return 0x8221F8E8;
		  /* 8221F8E8h */ case   78:  		/* stw R11, <#[R31 + 128]> */
		/* 8221F8E8h case   78:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000080) );
		/* 8221F8E8h case   78:*/		return 0x8221F8EC;
		  /* 8221F8ECh */ case   79:  		/* lwz R11, <#[R19]> */
		/* 8221F8ECh case   79:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 8221F8ECh case   79:*/		return 0x8221F8F0;
		  /* 8221F8F0h */ case   80:  		/* rlwinm R11, R11, 0, 16, 13 */
		/* 8221F8F0h case   80:*/		cpu::op::rlwinm<0,0,16,13>(regs,&regs.R11,regs.R11);
		/* 8221F8F0h case   80:*/		return 0x8221F8F4;
		  /* 8221F8F4h */ case   81:  		/* stw R11, <#[R19]> */
		/* 8221F8F4h case   81:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 8221F8F4h case   81:*/		return 0x8221F8F8;
		  /* 8221F8F8h */ case   82:  		/* lwz R11, <#[R31 + 96]> */
		/* 8221F8F8h case   82:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 8221F8F8h case   82:*/		return 0x8221F8FC;
		  /* 8221F8FCh */ case   83:  		/* rlwinm R11, R11, 0, 28, 24 */
		/* 8221F8FCh case   83:*/		cpu::op::rlwinm<0,0,28,24>(regs,&regs.R11,regs.R11);
		/* 8221F8FCh case   83:*/		return 0x8221F900;
		  /* 8221F900h */ case   84:  		/* stw R11, <#[R31 + 96]> */
		/* 8221F900h case   84:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 8221F900h case   84:*/		return 0x8221F904;
		  /* 8221F904h */ case   85:  		/* stw R22, <#[R21 + 64]> */
		/* 8221F904h case   85:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R21 + 0x00000040) );
		/* 8221F904h case   85:*/		return 0x8221F908;
		  /* 8221F908h */ case   86:  		/* addi R1, R1, 416 */
		/* 8221F908h case   86:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1A0);
		/* 8221F908h case   86:*/		return 0x8221F90C;
		  /* 8221F90Ch */ case   87:  		/* lfd FR31, <#[R1 - 136]> */
		/* 8221F90Ch case   87:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF78) );
		/* 8221F90Ch case   87:*/		return 0x8221F910;
		  /* 8221F910h */ case   88:  		/* b -1631892 */
		/* 8221F910h case   88:*/		return 0x8209127C;
		/* 8221F910h case   88:*/		return 0x8221F914;
		  /* 8221F914h */ case   89:  		/* nop */
		/* 8221F914h case   89:*/		cpu::op::nop();
		/* 8221F914h case   89:*/		return 0x8221F918;
	}
	return 0x8221F918;
} // Block from 8221F7B0h-8221F918h (90 instructions)

//////////////////////////////////////////////////////
// Block at 8221F918h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F918);
		  /* 8221F918h */ case    0:  		/* mfspr R12, LR */
		/* 8221F918h case    0:*/		regs.R12 = regs.LR;
		/* 8221F918h case    0:*/		return 0x8221F91C;
		  /* 8221F91Ch */ case    1:  		/* bl -1631940 */
		/* 8221F91Ch case    1:*/		regs.LR = 0x8221F920; return 0x82091258;
		/* 8221F91Ch case    1:*/		return 0x8221F920;
		  /* 8221F920h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8221F920h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8221F920h case    2:*/		return 0x8221F924;
		  /* 8221F924h */ case    3:  		/* lis R11, -32253 */
		/* 8221F924h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8221F924h case    3:*/		return 0x8221F928;
		  /* 8221F928h */ case    4:  		/* lis R10, -32252 */
		/* 8221F928h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221F928h case    4:*/		return 0x8221F92C;
		  /* 8221F92Ch */ case    5:  		/* mr R31, R3 */
		/* 8221F92Ch case    5:*/		regs.R31 = regs.R3;
		/* 8221F92Ch case    5:*/		return 0x8221F930;
		  /* 8221F930h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8221F930h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8221F930h case    6:*/		return 0x8221F934;
		  /* 8221F934h */ case    7:  		/* addi R30, R11, 27460 */
		/* 8221F934h case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8221F934h case    7:*/		return 0x8221F938;
		  /* 8221F938h */ case    8:  		/* addi R29, R10, -1152 */
		/* 8221F938h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFFB80);
		/* 8221F938h case    8:*/		return 0x8221F93C;
		  /* 8221F93Ch */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8221F93Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8221F95C;  }
		/* 8221F93Ch case    9:*/		return 0x8221F940;
		  /* 8221F940h */ case   10:  		/* lis R11, -32252 */
		/* 8221F940h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221F940h case   10:*/		return 0x8221F944;
		  /* 8221F944h */ case   11:  		/* mr R6, R29 */
		/* 8221F944h case   11:*/		regs.R6 = regs.R29;
		/* 8221F944h case   11:*/		return 0x8221F948;
		  /* 8221F948h */ case   12:  		/* addi R5, R11, -8448 */
		/* 8221F948h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDF00);
		/* 8221F948h case   12:*/		return 0x8221F94C;
		  /* 8221F94Ch */ case   13:  		/* mr R4, R30 */
		/* 8221F94Ch case   13:*/		regs.R4 = regs.R30;
		/* 8221F94Ch case   13:*/		return 0x8221F950;
		  /* 8221F950h */ case   14:  		/* li R7, 203 */
		/* 8221F950h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0xCB);
		/* 8221F950h case   14:*/		return 0x8221F954;
		  /* 8221F954h */ case   15:  		/* li R3, 0 */
		/* 8221F954h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221F954h case   15:*/		return 0x8221F958;
		  /* 8221F958h */ case   16:  		/* bl -818512 */
		/* 8221F958h case   16:*/		regs.LR = 0x8221F95C; return 0x82157C08;
		/* 8221F958h case   16:*/		return 0x8221F95C;
	}
	return 0x8221F95C;
} // Block from 8221F918h-8221F95Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8221F95Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F95C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F95C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F95C);
		  /* 8221F95Ch */ case    0:  		/* lwz R11, <#[R31 + 72]> */
		/* 8221F95Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000048) );
		/* 8221F95Ch case    0:*/		return 0x8221F960;
		  /* 8221F960h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8221F960h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221F960h case    1:*/		return 0x8221F964;
		  /* 8221F964h */ case    2:  		/* bc 12, CR6_GT, 32 */
		/* 8221F964h case    2:*/		if ( regs.CR[6].gt ) { return 0x8221F984;  }
		/* 8221F964h case    2:*/		return 0x8221F968;
		  /* 8221F968h */ case    3:  		/* lis R11, -32252 */
		/* 8221F968h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221F968h case    3:*/		return 0x8221F96C;
		  /* 8221F96Ch */ case    4:  		/* mr R6, R29 */
		/* 8221F96Ch case    4:*/		regs.R6 = regs.R29;
		/* 8221F96Ch case    4:*/		return 0x8221F970;
		  /* 8221F970h */ case    5:  		/* addi R5, R11, -1176 */
		/* 8221F970h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFB68);
		/* 8221F970h case    5:*/		return 0x8221F974;
		  /* 8221F974h */ case    6:  		/* mr R4, R30 */
		/* 8221F974h case    6:*/		regs.R4 = regs.R30;
		/* 8221F974h case    6:*/		return 0x8221F978;
		  /* 8221F978h */ case    7:  		/* li R7, 204 */
		/* 8221F978h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0xCC);
		/* 8221F978h case    7:*/		return 0x8221F97C;
		  /* 8221F97Ch */ case    8:  		/* li R3, 0 */
		/* 8221F97Ch case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221F97Ch case    8:*/		return 0x8221F980;
		  /* 8221F980h */ case    9:  		/* bl -818552 */
		/* 8221F980h case    9:*/		regs.LR = 0x8221F984; return 0x82157C08;
		/* 8221F980h case    9:*/		return 0x8221F984;
	}
	return 0x8221F984;
} // Block from 8221F95Ch-8221F984h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8221F984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F984);
		  /* 8221F984h */ case    0:  		/* lwz R11, <#[R31 + 72]> */
		/* 8221F984h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000048) );
		/* 8221F984h case    0:*/		return 0x8221F988;
		  /* 8221F988h */ case    1:  		/* addic. R11, R11, -1 */
		/* 8221F988h case    1:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8221F988h case    1:*/		return 0x8221F98C;
		  /* 8221F98Ch */ case    2:  		/* stw R11, <#[R31 + 72]> */
		/* 8221F98Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000048) );
		/* 8221F98Ch case    2:*/		return 0x8221F990;
		  /* 8221F990h */ case    3:  		/* bc 4, CR0_EQ, 164 */
		/* 8221F990h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8221FA34;  }
		/* 8221F990h case    3:*/		return 0x8221F994;
		  /* 8221F994h */ case    4:  		/* lwz R4, <#[R31 + 56]> */
		/* 8221F994h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000038) );
		/* 8221F994h case    4:*/		return 0x8221F998;
		  /* 8221F998h */ case    5:  		/* lwz R28, <#[R31]> */
		/* 8221F998h case    5:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000000) );
		/* 8221F998h case    5:*/		return 0x8221F99C;
		  /* 8221F99Ch */ case    6:  		/* cmplwi CR6, R4, 0 */
		/* 8221F99Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8221F99Ch case    6:*/		return 0x8221F9A0;
		  /* 8221F9A0h */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 8221F9A0h case    7:*/		if ( regs.CR[6].eq ) { return 0x8221F9B4;  }
		/* 8221F9A0h case    7:*/		return 0x8221F9A4;
		  /* 8221F9A4h */ case    8:  		/* lwz R11, <#[R31 + 8]> */
		/* 8221F9A4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8221F9A4h case    8:*/		return 0x8221F9A8;
		  /* 8221F9A8h */ case    9:  		/* mr R3, R28 */
		/* 8221F9A8h case    9:*/		regs.R3 = regs.R28;
		/* 8221F9A8h case    9:*/		return 0x8221F9AC;
		  /* 8221F9ACh */ case   10:  		/* mtspr CTR, R11 */
		/* 8221F9ACh case   10:*/		regs.CTR = regs.R11;
		/* 8221F9ACh case   10:*/		return 0x8221F9B0;
		  /* 8221F9B0h */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 8221F9B0h case   11:*/		if ( 1 ) { regs.LR = 0x8221F9B4; return (uint32)regs.CTR; }
		/* 8221F9B0h case   11:*/		return 0x8221F9B4;
	}
	return 0x8221F9B4;
} // Block from 8221F984h-8221F9B4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8221F9B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F9B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F9B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F9B4);
		  /* 8221F9B4h */ case    0:  		/* lwz R4, <#[R31 + 60]> */
		/* 8221F9B4h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000003C) );
		/* 8221F9B4h case    0:*/		return 0x8221F9B8;
		  /* 8221F9B8h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 8221F9B8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8221F9B8h case    1:*/		return 0x8221F9BC;
		  /* 8221F9BCh */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 8221F9BCh case    2:*/		if ( regs.CR[6].eq ) { return 0x8221F9D0;  }
		/* 8221F9BCh case    2:*/		return 0x8221F9C0;
		  /* 8221F9C0h */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 8221F9C0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8221F9C0h case    3:*/		return 0x8221F9C4;
		  /* 8221F9C4h */ case    4:  		/* mr R3, R28 */
		/* 8221F9C4h case    4:*/		regs.R3 = regs.R28;
		/* 8221F9C4h case    4:*/		return 0x8221F9C8;
		  /* 8221F9C8h */ case    5:  		/* mtspr CTR, R11 */
		/* 8221F9C8h case    5:*/		regs.CTR = regs.R11;
		/* 8221F9C8h case    5:*/		return 0x8221F9CC;
		  /* 8221F9CCh */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 8221F9CCh case    6:*/		if ( 1 ) { regs.LR = 0x8221F9D0; return (uint32)regs.CTR; }
		/* 8221F9CCh case    6:*/		return 0x8221F9D0;
	}
	return 0x8221F9D0;
} // Block from 8221F9B4h-8221F9D0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8221F9D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F9D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F9D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F9D0);
		  /* 8221F9D0h */ case    0:  		/* lwz R3, <#[R31 + 48]> */
		/* 8221F9D0h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 8221F9D0h case    0:*/		return 0x8221F9D4;
		  /* 8221F9D4h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8221F9D4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8221F9D4h case    1:*/		return 0x8221F9D8;
		  /* 8221F9D8h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 8221F9D8h case    2:*/		if ( regs.CR[6].eq ) { return 0x8221F9E0;  }
		/* 8221F9D8h case    2:*/		return 0x8221F9DC;
		  /* 8221F9DCh */ case    3:  		/* bl -796612 */
		/* 8221F9DCh case    3:*/		regs.LR = 0x8221F9E0; return 0x8215D218;
		/* 8221F9DCh case    3:*/		return 0x8221F9E0;
	}
	return 0x8221F9E0;
} // Block from 8221F9D0h-8221F9E0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221F9E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F9E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F9E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F9E0);
		  /* 8221F9E0h */ case    0:  		/* lwz R3, <#[R31 + 52]> */
		/* 8221F9E0h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 8221F9E0h case    0:*/		return 0x8221F9E4;
		  /* 8221F9E4h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 8221F9E4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8221F9E4h case    1:*/		return 0x8221F9E8;
		  /* 8221F9E8h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 8221F9E8h case    2:*/		if ( regs.CR[6].eq ) { return 0x8221F9F0;  }
		/* 8221F9E8h case    2:*/		return 0x8221F9EC;
		  /* 8221F9ECh */ case    3:  		/* bl -796628 */
		/* 8221F9ECh case    3:*/		regs.LR = 0x8221F9F0; return 0x8215D218;
		/* 8221F9ECh case    3:*/		return 0x8221F9F0;
	}
	return 0x8221F9F0;
} // Block from 8221F9E0h-8221F9F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221F9F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221F9F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221F9F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221F9F0);
		  /* 8221F9F0h */ case    0:  		/* addi R30, R31, 24 */
		/* 8221F9F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x18);
		/* 8221F9F0h case    0:*/		return 0x8221F9F4;
		  /* 8221F9F4h */ case    1:  		/* li R29, 6 */
		/* 8221F9F4h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x6);
		/* 8221F9F4h case    1:*/		return 0x8221F9F8;
		  /* 8221F9F8h */ case    2:  		/* lwz R4, <#[R30]> */
		/* 8221F9F8h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 8221F9F8h case    2:*/		return 0x8221F9FC;
		  /* 8221F9FCh */ case    3:  		/* cmplwi CR6, R4, 0 */
		/* 8221F9FCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8221F9FCh case    3:*/		return 0x8221FA00;
		  /* 8221FA00h */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 8221FA00h case    4:*/		if ( regs.CR[6].eq ) { return 0x8221FA14;  }
		/* 8221FA00h case    4:*/		return 0x8221FA04;
		  /* 8221FA04h */ case    5:  		/* lwz R11, <#[R31 + 8]> */
		/* 8221FA04h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8221FA04h case    5:*/		return 0x8221FA08;
		  /* 8221FA08h */ case    6:  		/* mr R3, R28 */
		/* 8221FA08h case    6:*/		regs.R3 = regs.R28;
		/* 8221FA08h case    6:*/		return 0x8221FA0C;
		  /* 8221FA0Ch */ case    7:  		/* mtspr CTR, R11 */
		/* 8221FA0Ch case    7:*/		regs.CTR = regs.R11;
		/* 8221FA0Ch case    7:*/		return 0x8221FA10;
		  /* 8221FA10h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 8221FA10h case    8:*/		if ( 1 ) { regs.LR = 0x8221FA14; return (uint32)regs.CTR; }
		/* 8221FA10h case    8:*/		return 0x8221FA14;
	}
	return 0x8221FA14;
} // Block from 8221F9F0h-8221FA14h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8221FA14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FA14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FA14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FA14);
		  /* 8221FA14h */ case    0:  		/* addic. R29, R29, -1 */
		/* 8221FA14h case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 8221FA14h case    0:*/		return 0x8221FA18;
		  /* 8221FA18h */ case    1:  		/* addi R30, R30, 4 */
		/* 8221FA18h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8221FA18h case    1:*/		return 0x8221FA1C;
		  /* 8221FA1Ch */ case    2:  		/* bc 4, CR0_EQ, -36 */
		/* 8221FA1Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x8221F9F8;  }
		/* 8221FA1Ch case    2:*/		return 0x8221FA20;
		  /* 8221FA20h */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 8221FA20h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8221FA20h case    3:*/		return 0x8221FA24;
		  /* 8221FA24h */ case    4:  		/* mr R4, R31 */
		/* 8221FA24h case    4:*/		regs.R4 = regs.R31;
		/* 8221FA24h case    4:*/		return 0x8221FA28;
		  /* 8221FA28h */ case    5:  		/* mr R3, R28 */
		/* 8221FA28h case    5:*/		regs.R3 = regs.R28;
		/* 8221FA28h case    5:*/		return 0x8221FA2C;
		  /* 8221FA2Ch */ case    6:  		/* mtspr CTR, R11 */
		/* 8221FA2Ch case    6:*/		regs.CTR = regs.R11;
		/* 8221FA2Ch case    6:*/		return 0x8221FA30;
		  /* 8221FA30h */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 8221FA30h case    7:*/		if ( 1 ) { regs.LR = 0x8221FA34; return (uint32)regs.CTR; }
		/* 8221FA30h case    7:*/		return 0x8221FA34;
	}
	return 0x8221FA34;
} // Block from 8221FA14h-8221FA34h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8221FA34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FA34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FA34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FA34);
		  /* 8221FA34h */ case    0:  		/* li R3, 0 */
		/* 8221FA34h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221FA34h case    0:*/		return 0x8221FA38;
		  /* 8221FA38h */ case    1:  		/* addi R1, R1, 128 */
		/* 8221FA38h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8221FA38h case    1:*/		return 0x8221FA3C;
		  /* 8221FA3Ch */ case    2:  		/* b -1632148 */
		/* 8221FA3Ch case    2:*/		return 0x820912A8;
		/* 8221FA3Ch case    2:*/		return 0x8221FA40;
	}
	return 0x8221FA40;
} // Block from 8221FA34h-8221FA40h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221FA40h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FA40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FA40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FA40);
		  /* 8221FA40h */ case    0:  		/* mfspr R12, LR */
		/* 8221FA40h case    0:*/		regs.R12 = regs.LR;
		/* 8221FA40h case    0:*/		return 0x8221FA44;
		  /* 8221FA44h */ case    1:  		/* bl -1632236 */
		/* 8221FA44h case    1:*/		regs.LR = 0x8221FA48; return 0x82091258;
		/* 8221FA44h case    1:*/		return 0x8221FA48;
		  /* 8221FA48h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8221FA48h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8221FA48h case    2:*/		return 0x8221FA4C;
		  /* 8221FA4Ch */ case    3:  		/* lis R11, -32253 */
		/* 8221FA4Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8221FA4Ch case    3:*/		return 0x8221FA50;
		  /* 8221FA50h */ case    4:  		/* lis R10, -32252 */
		/* 8221FA50h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221FA50h case    4:*/		return 0x8221FA54;
		  /* 8221FA54h */ case    5:  		/* mr R31, R3 */
		/* 8221FA54h case    5:*/		regs.R31 = regs.R3;
		/* 8221FA54h case    5:*/		return 0x8221FA58;
		  /* 8221FA58h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8221FA58h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8221FA58h case    6:*/		return 0x8221FA5C;
		  /* 8221FA5Ch */ case    7:  		/* addi R29, R11, 27460 */
		/* 8221FA5Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6B44);
		/* 8221FA5Ch case    7:*/		return 0x8221FA60;
		  /* 8221FA60h */ case    8:  		/* addi R28, R10, -1152 */
		/* 8221FA60h case    8:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFFB80);
		/* 8221FA60h case    8:*/		return 0x8221FA64;
		  /* 8221FA64h */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 8221FA64h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8221FA84;  }
		/* 8221FA64h case    9:*/		return 0x8221FA68;
		  /* 8221FA68h */ case   10:  		/* lis R11, -32252 */
		/* 8221FA68h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221FA68h case   10:*/		return 0x8221FA6C;
		  /* 8221FA6Ch */ case   11:  		/* mr R6, R28 */
		/* 8221FA6Ch case   11:*/		regs.R6 = regs.R28;
		/* 8221FA6Ch case   11:*/		return 0x8221FA70;
		  /* 8221FA70h */ case   12:  		/* addi R5, R11, -11784 */
		/* 8221FA70h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFD1F8);
		/* 8221FA70h case   12:*/		return 0x8221FA74;
		  /* 8221FA74h */ case   13:  		/* mr R4, R29 */
		/* 8221FA74h case   13:*/		regs.R4 = regs.R29;
		/* 8221FA74h case   13:*/		return 0x8221FA78;
		  /* 8221FA78h */ case   14:  		/* li R7, 325 */
		/* 8221FA78h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x145);
		/* 8221FA78h case   14:*/		return 0x8221FA7C;
		  /* 8221FA7Ch */ case   15:  		/* li R3, 0 */
		/* 8221FA7Ch case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221FA7Ch case   15:*/		return 0x8221FA80;
		  /* 8221FA80h */ case   16:  		/* bl -818808 */
		/* 8221FA80h case   16:*/		regs.LR = 0x8221FA84; return 0x82157C08;
		/* 8221FA80h case   16:*/		return 0x8221FA84;
	}
	return 0x8221FA84;
} // Block from 8221FA40h-8221FA84h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8221FA84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FA84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FA84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FA84);
		  /* 8221FA84h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8221FA84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8221FA84h case    0:*/		return 0x8221FA88;
		  /* 8221FA88h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8221FA88h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8221FA88h case    1:*/		return 0x8221FA8C;
		  /* 8221FA8Ch */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8221FA8Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8221FAAC;  }
		/* 8221FA8Ch case    2:*/		return 0x8221FA90;
		  /* 8221FA90h */ case    3:  		/* lis R11, -32252 */
		/* 8221FA90h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221FA90h case    3:*/		return 0x8221FA94;
		  /* 8221FA94h */ case    4:  		/* mr R6, R28 */
		/* 8221FA94h case    4:*/		regs.R6 = regs.R28;
		/* 8221FA94h case    4:*/		return 0x8221FA98;
		  /* 8221FA98h */ case    5:  		/* addi R5, R11, -984 */
		/* 8221FA98h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFC28);
		/* 8221FA98h case    5:*/		return 0x8221FA9C;
		  /* 8221FA9Ch */ case    6:  		/* mr R4, R29 */
		/* 8221FA9Ch case    6:*/		regs.R4 = regs.R29;
		/* 8221FA9Ch case    6:*/		return 0x8221FAA0;
		  /* 8221FAA0h */ case    7:  		/* li R7, 326 */
		/* 8221FAA0h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x146);
		/* 8221FAA0h case    7:*/		return 0x8221FAA4;
		  /* 8221FAA4h */ case    8:  		/* li R3, 0 */
		/* 8221FAA4h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221FAA4h case    8:*/		return 0x8221FAA8;
		  /* 8221FAA8h */ case    9:  		/* bl -818848 */
		/* 8221FAA8h case    9:*/		regs.LR = 0x8221FAAC; return 0x82157C08;
		/* 8221FAA8h case    9:*/		return 0x8221FAAC;
	}
	return 0x8221FAAC;
} // Block from 8221FA84h-8221FAACh (10 instructions)

//////////////////////////////////////////////////////
// Block at 8221FAACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FAAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FAAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FAAC);
		  /* 8221FAACh */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8221FAACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8221FAACh case    0:*/		return 0x8221FAB0;
		  /* 8221FAB0h */ case    1:  		/* li R4, 1668 */
		/* 8221FAB0h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x684);
		/* 8221FAB0h case    1:*/		return 0x8221FAB4;
		  /* 8221FAB4h */ case    2:  		/* lwz R3, <#[R31 + 16]> */
		/* 8221FAB4h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8221FAB4h case    2:*/		return 0x8221FAB8;
		  /* 8221FAB8h */ case    3:  		/* mtspr CTR, R11 */
		/* 8221FAB8h case    3:*/		regs.CTR = regs.R11;
		/* 8221FAB8h case    3:*/		return 0x8221FABC;
		  /* 8221FABCh */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 8221FABCh case    4:*/		if ( 1 ) { regs.LR = 0x8221FAC0; return (uint32)regs.CTR; }
		/* 8221FABCh case    4:*/		return 0x8221FAC0;
		  /* 8221FAC0h */ case    5:  		/* or. R30, R3, R3 */
		/* 8221FAC0h case    5:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8221FAC0h case    5:*/		return 0x8221FAC4;
		  /* 8221FAC4h */ case    6:  		/* bc 12, CR0_EQ, 44 */
		/* 8221FAC4h case    6:*/		if ( regs.CR[0].eq ) { return 0x8221FAF0;  }
		/* 8221FAC4h case    6:*/		return 0x8221FAC8;
		  /* 8221FAC8h */ case    7:  		/* li R5, 1668 */
		/* 8221FAC8h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x684);
		/* 8221FAC8h case    7:*/		return 0x8221FACC;
		  /* 8221FACCh */ case    8:  		/* li R4, 0 */
		/* 8221FACCh case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8221FACCh case    8:*/		return 0x8221FAD0;
		  /* 8221FAD0h */ case    9:  		/* mr R3, R30 */
		/* 8221FAD0h case    9:*/		regs.R3 = regs.R30;
		/* 8221FAD0h case    9:*/		return 0x8221FAD4;
		  /* 8221FAD4h */ case   10:  		/* bl -1632148 */
		/* 8221FAD4h case   10:*/		regs.LR = 0x8221FAD8; return 0x82091340;
		/* 8221FAD4h case   10:*/		return 0x8221FAD8;
		  /* 8221FAD8h */ case   11:  		/* lwz R11, <#[R31 + 16]> */
		/* 8221FAD8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8221FAD8h case   11:*/		return 0x8221FADC;
		  /* 8221FADCh */ case   12:  		/* mr R3, R30 */
		/* 8221FADCh case   12:*/		regs.R3 = regs.R30;
		/* 8221FADCh case   12:*/		return 0x8221FAE0;
		  /* 8221FAE0h */ case   13:  		/* stw R11, <#[R30]> */
		/* 8221FAE0h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8221FAE0h case   13:*/		return 0x8221FAE4;
		  /* 8221FAE4h */ case   14:  		/* lwz R11, <#[R31 + 24]> */
		/* 8221FAE4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8221FAE4h case   14:*/		return 0x8221FAE8;
		  /* 8221FAE8h */ case   15:  		/* stw R11, <#[R30 + 4]> */
		/* 8221FAE8h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8221FAE8h case   15:*/		return 0x8221FAEC;
		  /* 8221FAECh */ case   16:  		/* b 36 */
		/* 8221FAECh case   16:*/		return 0x8221FB10;
		/* 8221FAECh case   16:*/		return 0x8221FAF0;
	}
	return 0x8221FAF0;
} // Block from 8221FAACh-8221FAF0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8221FAF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FAF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FAF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FAF0);
		  /* 8221FAF0h */ case    0:  		/* lis R11, -32252 */
		/* 8221FAF0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221FAF0h case    0:*/		return 0x8221FAF4;
		  /* 8221FAF4h */ case    1:  		/* mr R6, R28 */
		/* 8221FAF4h case    1:*/		regs.R6 = regs.R28;
		/* 8221FAF4h case    1:*/		return 0x8221FAF8;
		  /* 8221FAF8h */ case    2:  		/* addi R5, R11, -1044 */
		/* 8221FAF8h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFBEC);
		/* 8221FAF8h case    2:*/		return 0x8221FAFC;
		  /* 8221FAFCh */ case    3:  		/* mr R4, R29 */
		/* 8221FAFCh case    3:*/		regs.R4 = regs.R29;
		/* 8221FAFCh case    3:*/		return 0x8221FB00;
		  /* 8221FB00h */ case    4:  		/* li R7, 348 */
		/* 8221FB00h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x15C);
		/* 8221FB00h case    4:*/		return 0x8221FB04;
		  /* 8221FB04h */ case    5:  		/* li R3, 0 */
		/* 8221FB04h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221FB04h case    5:*/		return 0x8221FB08;
		  /* 8221FB08h */ case    6:  		/* bl -818944 */
		/* 8221FB08h case    6:*/		regs.LR = 0x8221FB0C; return 0x82157C08;
		/* 8221FB08h case    6:*/		return 0x8221FB0C;
		  /* 8221FB0Ch */ case    7:  		/* li R3, 0 */
		/* 8221FB0Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221FB0Ch case    7:*/		return 0x8221FB10;
	}
	return 0x8221FB10;
} // Block from 8221FAF0h-8221FB10h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8221FB10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FB10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FB10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FB10);
		  /* 8221FB10h */ case    0:  		/* addi R1, R1, 128 */
		/* 8221FB10h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8221FB10h case    0:*/		return 0x8221FB14;
		  /* 8221FB14h */ case    1:  		/* b -1632364 */
		/* 8221FB14h case    1:*/		return 0x820912A8;
		/* 8221FB14h case    1:*/		return 0x8221FB18;
	}
	return 0x8221FB18;
} // Block from 8221FB10h-8221FB18h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221FB18h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FB18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FB18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FB18);
		  /* 8221FB18h */ case    0:  		/* mfspr R12, LR */
		/* 8221FB18h case    0:*/		regs.R12 = regs.LR;
		/* 8221FB18h case    0:*/		return 0x8221FB1C;
		  /* 8221FB1Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8221FB1Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221FB1Ch case    1:*/		return 0x8221FB20;
		  /* 8221FB20h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8221FB20h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8221FB20h case    2:*/		return 0x8221FB24;
		  /* 8221FB24h */ case    3:  		/* mr R4, R3 */
		/* 8221FB24h case    3:*/		regs.R4 = regs.R3;
		/* 8221FB24h case    3:*/		return 0x8221FB28;
		  /* 8221FB28h */ case    4:  		/* cmplwi CR6, R3, 0 */
		/* 8221FB28h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8221FB28h case    4:*/		return 0x8221FB2C;
		  /* 8221FB2Ch */ case    5:  		/* bc 12, CR6_EQ, 24 */
		/* 8221FB2Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x8221FB44;  }
		/* 8221FB2Ch case    5:*/		return 0x8221FB30;
		  /* 8221FB30h */ case    6:  		/* lwz R11, <#[R3 + 4]> */
		/* 8221FB30h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8221FB30h case    6:*/		return 0x8221FB34;
		  /* 8221FB34h */ case    7:  		/* lwz R3, <#[R3]> */
		/* 8221FB34h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000000) );
		/* 8221FB34h case    7:*/		return 0x8221FB38;
		  /* 8221FB38h */ case    8:  		/* mtspr CTR, R11 */
		/* 8221FB38h case    8:*/		regs.CTR = regs.R11;
		/* 8221FB38h case    8:*/		return 0x8221FB3C;
		  /* 8221FB3Ch */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 8221FB3Ch case    9:*/		if ( 1 ) { regs.LR = 0x8221FB40; return (uint32)regs.CTR; }
		/* 8221FB3Ch case    9:*/		return 0x8221FB40;
		  /* 8221FB40h */ case   10:  		/* b 40 */
		/* 8221FB40h case   10:*/		return 0x8221FB68;
		/* 8221FB40h case   10:*/		return 0x8221FB44;
	}
	return 0x8221FB44;
} // Block from 8221FB18h-8221FB44h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8221FB44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FB44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FB44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FB44);
		  /* 8221FB44h */ case    0:  		/* lis R11, -32252 */
		/* 8221FB44h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221FB44h case    0:*/		return 0x8221FB48;
		  /* 8221FB48h */ case    1:  		/* lis R10, -32252 */
		/* 8221FB48h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221FB48h case    1:*/		return 0x8221FB4C;
		  /* 8221FB4Ch */ case    2:  		/* lis R9, -32253 */
		/* 8221FB4Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8221FB4Ch case    2:*/		return 0x8221FB50;
		  /* 8221FB50h */ case    3:  		/* addi R6, R11, -1152 */
		/* 8221FB50h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFFB80);
		/* 8221FB50h case    3:*/		return 0x8221FB54;
		  /* 8221FB54h */ case    4:  		/* addi R5, R10, -956 */
		/* 8221FB54h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFFC44);
		/* 8221FB54h case    4:*/		return 0x8221FB58;
		  /* 8221FB58h */ case    5:  		/* addi R4, R9, 27460 */
		/* 8221FB58h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8221FB58h case    5:*/		return 0x8221FB5C;
		  /* 8221FB5Ch */ case    6:  		/* li R7, 384 */
		/* 8221FB5Ch case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x180);
		/* 8221FB5Ch case    6:*/		return 0x8221FB60;
		  /* 8221FB60h */ case    7:  		/* li R3, 0 */
		/* 8221FB60h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221FB60h case    7:*/		return 0x8221FB64;
		  /* 8221FB64h */ case    8:  		/* bl -819036 */
		/* 8221FB64h case    8:*/		regs.LR = 0x8221FB68; return 0x82157C08;
		/* 8221FB64h case    8:*/		return 0x8221FB68;
	}
	return 0x8221FB68;
} // Block from 8221FB44h-8221FB68h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8221FB68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FB68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FB68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FB68);
		  /* 8221FB68h */ case    0:  		/* li R3, 0 */
		/* 8221FB68h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221FB68h case    0:*/		return 0x8221FB6C;
		  /* 8221FB6Ch */ case    1:  		/* addi R1, R1, 96 */
		/* 8221FB6Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8221FB6Ch case    1:*/		return 0x8221FB70;
		  /* 8221FB70h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8221FB70h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221FB70h case    2:*/		return 0x8221FB74;
		  /* 8221FB74h */ case    3:  		/* mtspr LR, R12 */
		/* 8221FB74h case    3:*/		regs.LR = regs.R12;
		/* 8221FB74h case    3:*/		return 0x8221FB78;
		  /* 8221FB78h */ case    4:  		/* bclr 20, CR0_LT */
		/* 8221FB78h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221FB78h case    4:*/		return 0x8221FB7C;
	}
	return 0x8221FB7C;
} // Block from 8221FB68h-8221FB7Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221FB7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FB7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FB7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FB7C);
		  /* 8221FB7Ch */ case    0:  		/* nop */
		/* 8221FB7Ch case    0:*/		cpu::op::nop();
		/* 8221FB7Ch case    0:*/		return 0x8221FB80;
	}
	return 0x8221FB80;
} // Block from 8221FB7Ch-8221FB80h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221FB80h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FB80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FB80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FB80);
		  /* 8221FB80h */ case    0:  		/* mfspr R12, LR */
		/* 8221FB80h case    0:*/		regs.R12 = regs.LR;
		/* 8221FB80h case    0:*/		return 0x8221FB84;
		  /* 8221FB84h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8221FB84h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221FB84h case    1:*/		return 0x8221FB88;
		  /* 8221FB88h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8221FB88h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221FB88h case    2:*/		return 0x8221FB8C;
		  /* 8221FB8Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8221FB8Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8221FB8Ch case    3:*/		return 0x8221FB90;
		  /* 8221FB90h */ case    4:  		/* mr R31, R3 */
		/* 8221FB90h case    4:*/		regs.R31 = regs.R3;
		/* 8221FB90h case    4:*/		return 0x8221FB94;
		  /* 8221FB94h */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8221FB94h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8221FB94h case    5:*/		return 0x8221FB98;
		  /* 8221FB98h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 8221FB98h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8221FBBC;  }
		/* 8221FB98h case    6:*/		return 0x8221FB9C;
		  /* 8221FB9Ch */ case    7:  		/* lis R11, -32252 */
		/* 8221FB9Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221FB9Ch case    7:*/		return 0x8221FBA0;
		  /* 8221FBA0h */ case    8:  		/* lis R10, -32252 */
		/* 8221FBA0h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221FBA0h case    8:*/		return 0x8221FBA4;
		  /* 8221FBA4h */ case    9:  		/* lis R9, -32253 */
		/* 8221FBA4h case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8221FBA4h case    9:*/		return 0x8221FBA8;
		  /* 8221FBA8h */ case   10:  		/* addi R6, R11, -1152 */
		/* 8221FBA8h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFFB80);
		/* 8221FBA8h case   10:*/		return 0x8221FBAC;
		  /* 8221FBACh */ case   11:  		/* addi R5, R10, -8448 */
		/* 8221FBACh case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFDF00);
		/* 8221FBACh case   11:*/		return 0x8221FBB0;
		  /* 8221FBB0h */ case   12:  		/* addi R4, R9, 27460 */
		/* 8221FBB0h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8221FBB0h case   12:*/		return 0x8221FBB4;
		  /* 8221FBB4h */ case   13:  		/* li R7, 539 */
		/* 8221FBB4h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x21B);
		/* 8221FBB4h case   13:*/		return 0x8221FBB8;
		  /* 8221FBB8h */ case   14:  		/* bl -819120 */
		/* 8221FBB8h case   14:*/		regs.LR = 0x8221FBBC; return 0x82157C08;
		/* 8221FBB8h case   14:*/		return 0x8221FBBC;
	}
	return 0x8221FBBC;
} // Block from 8221FB80h-8221FBBCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 8221FBBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FBBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FBBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FBBC);
		  /* 8221FBBCh */ case    0:  		/* lwz R3, <#[R31 + 48]> */
		/* 8221FBBCh case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 8221FBBCh case    0:*/		return 0x8221FBC0;
		  /* 8221FBC0h */ case    1:  		/* addi R1, R1, 96 */
		/* 8221FBC0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8221FBC0h case    1:*/		return 0x8221FBC4;
		  /* 8221FBC4h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8221FBC4h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221FBC4h case    2:*/		return 0x8221FBC8;
		  /* 8221FBC8h */ case    3:  		/* mtspr LR, R12 */
		/* 8221FBC8h case    3:*/		regs.LR = regs.R12;
		/* 8221FBC8h case    3:*/		return 0x8221FBCC;
		  /* 8221FBCCh */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8221FBCCh case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221FBCCh case    4:*/		return 0x8221FBD0;
		  /* 8221FBD0h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8221FBD0h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221FBD0h case    5:*/		return 0x8221FBD4;
	}
	return 0x8221FBD4;
} // Block from 8221FBBCh-8221FBD4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221FBD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FBD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FBD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FBD4);
		  /* 8221FBD4h */ case    0:  		/* nop */
		/* 8221FBD4h case    0:*/		cpu::op::nop();
		/* 8221FBD4h case    0:*/		return 0x8221FBD8;
	}
	return 0x8221FBD8;
} // Block from 8221FBD4h-8221FBD8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221FBD8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FBD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FBD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FBD8);
		  /* 8221FBD8h */ case    0:  		/* mfspr R12, LR */
		/* 8221FBD8h case    0:*/		regs.R12 = regs.LR;
		/* 8221FBD8h case    0:*/		return 0x8221FBDC;
		  /* 8221FBDCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8221FBDCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221FBDCh case    1:*/		return 0x8221FBE0;
		  /* 8221FBE0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8221FBE0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221FBE0h case    2:*/		return 0x8221FBE4;
		  /* 8221FBE4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8221FBE4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8221FBE4h case    3:*/		return 0x8221FBE8;
		  /* 8221FBE8h */ case    4:  		/* mr R31, R3 */
		/* 8221FBE8h case    4:*/		regs.R31 = regs.R3;
		/* 8221FBE8h case    4:*/		return 0x8221FBEC;
		  /* 8221FBECh */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8221FBECh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8221FBECh case    5:*/		return 0x8221FBF0;
		  /* 8221FBF0h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 8221FBF0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8221FC14;  }
		/* 8221FBF0h case    6:*/		return 0x8221FBF4;
		  /* 8221FBF4h */ case    7:  		/* lis R11, -32252 */
		/* 8221FBF4h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221FBF4h case    7:*/		return 0x8221FBF8;
		  /* 8221FBF8h */ case    8:  		/* lis R10, -32252 */
		/* 8221FBF8h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221FBF8h case    8:*/		return 0x8221FBFC;
		  /* 8221FBFCh */ case    9:  		/* lis R9, -32253 */
		/* 8221FBFCh case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8221FBFCh case    9:*/		return 0x8221FC00;
		  /* 8221FC00h */ case   10:  		/* addi R6, R11, -1152 */
		/* 8221FC00h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFFB80);
		/* 8221FC00h case   10:*/		return 0x8221FC04;
		  /* 8221FC04h */ case   11:  		/* addi R5, R10, -8448 */
		/* 8221FC04h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFDF00);
		/* 8221FC04h case   11:*/		return 0x8221FC08;
		  /* 8221FC08h */ case   12:  		/* addi R4, R9, 27460 */
		/* 8221FC08h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8221FC08h case   12:*/		return 0x8221FC0C;
		  /* 8221FC0Ch */ case   13:  		/* li R7, 574 */
		/* 8221FC0Ch case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x23E);
		/* 8221FC0Ch case   13:*/		return 0x8221FC10;
		  /* 8221FC10h */ case   14:  		/* bl -819208 */
		/* 8221FC10h case   14:*/		regs.LR = 0x8221FC14; return 0x82157C08;
		/* 8221FC10h case   14:*/		return 0x8221FC14;
	}
	return 0x8221FC14;
} // Block from 8221FBD8h-8221FC14h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8221FC14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FC14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FC14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FC14);
		  /* 8221FC14h */ case    0:  		/* lwz R3, <#[R31 + 52]> */
		/* 8221FC14h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 8221FC14h case    0:*/		return 0x8221FC18;
		  /* 8221FC18h */ case    1:  		/* addi R1, R1, 96 */
		/* 8221FC18h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8221FC18h case    1:*/		return 0x8221FC1C;
		  /* 8221FC1Ch */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8221FC1Ch case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221FC1Ch case    2:*/		return 0x8221FC20;
		  /* 8221FC20h */ case    3:  		/* mtspr LR, R12 */
		/* 8221FC20h case    3:*/		regs.LR = regs.R12;
		/* 8221FC20h case    3:*/		return 0x8221FC24;
		  /* 8221FC24h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8221FC24h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8221FC24h case    4:*/		return 0x8221FC28;
		  /* 8221FC28h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8221FC28h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221FC28h case    5:*/		return 0x8221FC2C;
	}
	return 0x8221FC2C;
} // Block from 8221FC14h-8221FC2Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8221FC2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FC2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FC2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FC2C);
		  /* 8221FC2Ch */ case    0:  		/* nop */
		/* 8221FC2Ch case    0:*/		cpu::op::nop();
		/* 8221FC2Ch case    0:*/		return 0x8221FC30;
	}
	return 0x8221FC30;
} // Block from 8221FC2Ch-8221FC30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221FC30h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FC30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FC30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FC30);
		  /* 8221FC30h */ case    0:  		/* mfspr R12, LR */
		/* 8221FC30h case    0:*/		regs.R12 = regs.LR;
		/* 8221FC30h case    0:*/		return 0x8221FC34;
		  /* 8221FC34h */ case    1:  		/* bl -1632732 */
		/* 8221FC34h case    1:*/		regs.LR = 0x8221FC38; return 0x82091258;
		/* 8221FC34h case    1:*/		return 0x8221FC38;
		  /* 8221FC38h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8221FC38h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8221FC38h case    2:*/		return 0x8221FC3C;
		  /* 8221FC3Ch */ case    3:  		/* lis R11, -32253 */
		/* 8221FC3Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8221FC3Ch case    3:*/		return 0x8221FC40;
		  /* 8221FC40h */ case    4:  		/* lis R10, -32252 */
		/* 8221FC40h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221FC40h case    4:*/		return 0x8221FC44;
		  /* 8221FC44h */ case    5:  		/* mr R31, R3 */
		/* 8221FC44h case    5:*/		regs.R31 = regs.R3;
		/* 8221FC44h case    5:*/		return 0x8221FC48;
		  /* 8221FC48h */ case    6:  		/* mr R28, R4 */
		/* 8221FC48h case    6:*/		regs.R28 = regs.R4;
		/* 8221FC48h case    6:*/		return 0x8221FC4C;
		  /* 8221FC4Ch */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8221FC4Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8221FC4Ch case    7:*/		return 0x8221FC50;
		  /* 8221FC50h */ case    8:  		/* addi R30, R11, 27460 */
		/* 8221FC50h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8221FC50h case    8:*/		return 0x8221FC54;
		  /* 8221FC54h */ case    9:  		/* addi R29, R10, -1152 */
		/* 8221FC54h case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFFB80);
		/* 8221FC54h case    9:*/		return 0x8221FC58;
		  /* 8221FC58h */ case   10:  		/* bc 4, CR6_EQ, 32 */
		/* 8221FC58h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8221FC78;  }
		/* 8221FC58h case   10:*/		return 0x8221FC5C;
		  /* 8221FC5Ch */ case   11:  		/* lis R11, -32252 */
		/* 8221FC5Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221FC5Ch case   11:*/		return 0x8221FC60;
		  /* 8221FC60h */ case   12:  		/* mr R6, R29 */
		/* 8221FC60h case   12:*/		regs.R6 = regs.R29;
		/* 8221FC60h case   12:*/		return 0x8221FC64;
		  /* 8221FC64h */ case   13:  		/* addi R5, R11, -8448 */
		/* 8221FC64h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDF00);
		/* 8221FC64h case   13:*/		return 0x8221FC68;
		  /* 8221FC68h */ case   14:  		/* mr R4, R30 */
		/* 8221FC68h case   14:*/		regs.R4 = regs.R30;
		/* 8221FC68h case   14:*/		return 0x8221FC6C;
		  /* 8221FC6Ch */ case   15:  		/* li R7, 604 */
		/* 8221FC6Ch case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x25C);
		/* 8221FC6Ch case   15:*/		return 0x8221FC70;
		  /* 8221FC70h */ case   16:  		/* li R3, 0 */
		/* 8221FC70h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221FC70h case   16:*/		return 0x8221FC74;
		  /* 8221FC74h */ case   17:  		/* bl -819308 */
		/* 8221FC74h case   17:*/		regs.LR = 0x8221FC78; return 0x82157C08;
		/* 8221FC74h case   17:*/		return 0x8221FC78;
	}
	return 0x8221FC78;
} // Block from 8221FC30h-8221FC78h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8221FC78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FC78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FC78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FC78);
		  /* 8221FC78h */ case    0:  		/* cmplwi CR6, R28, 6 */
		/* 8221FC78h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000006);
		/* 8221FC78h case    0:*/		return 0x8221FC7C;
		  /* 8221FC7Ch */ case    1:  		/* bc 12, CR6_LT, 32 */
		/* 8221FC7Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x8221FC9C;  }
		/* 8221FC7Ch case    1:*/		return 0x8221FC80;
		  /* 8221FC80h */ case    2:  		/* lis R11, -32252 */
		/* 8221FC80h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221FC80h case    2:*/		return 0x8221FC84;
		  /* 8221FC84h */ case    3:  		/* mr R6, R29 */
		/* 8221FC84h case    3:*/		regs.R6 = regs.R29;
		/* 8221FC84h case    3:*/		return 0x8221FC88;
		  /* 8221FC88h */ case    4:  		/* addi R5, R11, -924 */
		/* 8221FC88h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFC64);
		/* 8221FC88h case    4:*/		return 0x8221FC8C;
		  /* 8221FC8Ch */ case    5:  		/* mr R4, R30 */
		/* 8221FC8Ch case    5:*/		regs.R4 = regs.R30;
		/* 8221FC8Ch case    5:*/		return 0x8221FC90;
		  /* 8221FC90h */ case    6:  		/* li R7, 606 */
		/* 8221FC90h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x25E);
		/* 8221FC90h case    6:*/		return 0x8221FC94;
		  /* 8221FC94h */ case    7:  		/* li R3, 0 */
		/* 8221FC94h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221FC94h case    7:*/		return 0x8221FC98;
		  /* 8221FC98h */ case    8:  		/* bl -819344 */
		/* 8221FC98h case    8:*/		regs.LR = 0x8221FC9C; return 0x82157C08;
		/* 8221FC98h case    8:*/		return 0x8221FC9C;
	}
	return 0x8221FC9C;
} // Block from 8221FC78h-8221FC9Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8221FC9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FC9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FC9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FC9C);
		  /* 8221FC9Ch */ case    0:  		/* addi R11, R28, 6 */
		/* 8221FC9Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x6);
		/* 8221FC9Ch case    0:*/		return 0x8221FCA0;
		  /* 8221FCA0h */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8221FCA0h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8221FCA0h case    1:*/		return 0x8221FCA4;
		  /* 8221FCA4h */ case    2:  		/* lwzx R3, <#[R11 + R31]> */
		/* 8221FCA4h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8221FCA4h case    2:*/		return 0x8221FCA8;
		  /* 8221FCA8h */ case    3:  		/* addi R1, R1, 128 */
		/* 8221FCA8h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8221FCA8h case    3:*/		return 0x8221FCAC;
		  /* 8221FCACh */ case    4:  		/* b -1632772 */
		/* 8221FCACh case    4:*/		return 0x820912A8;
		/* 8221FCACh case    4:*/		return 0x8221FCB0;
	}
	return 0x8221FCB0;
} // Block from 8221FC9Ch-8221FCB0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221FCB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FCB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FCB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FCB0);
		  /* 8221FCB0h */ case    0:  		/* mfspr R12, LR */
		/* 8221FCB0h case    0:*/		regs.R12 = regs.LR;
		/* 8221FCB0h case    0:*/		return 0x8221FCB4;
		  /* 8221FCB4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8221FCB4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221FCB4h case    1:*/		return 0x8221FCB8;
		  /* 8221FCB8h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8221FCB8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8221FCB8h case    2:*/		return 0x8221FCBC;
		  /* 8221FCBCh */ case    3:  		/* extsb R11, R3 */
		/* 8221FCBCh case    3:*/		cpu::op::extsb<0>(regs,&regs.R11,regs.R3);
		/* 8221FCBCh case    3:*/		return 0x8221FCC0;
		  /* 8221FCC0h */ case    4:  		/* cmpwi CR6, R11, 48 */
		/* 8221FCC0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000030);
		/* 8221FCC0h case    4:*/		return 0x8221FCC4;
		  /* 8221FCC4h */ case    5:  		/* bc 12, CR6_EQ, 136 */
		/* 8221FCC4h case    5:*/		if ( regs.CR[6].eq ) { return 0x8221FD4C;  }
		/* 8221FCC4h case    5:*/		return 0x8221FCC8;
		  /* 8221FCC8h */ case    6:  		/* cmpwi CR6, R11, 49 */
		/* 8221FCC8h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000031);
		/* 8221FCC8h case    6:*/		return 0x8221FCCC;
		  /* 8221FCCCh */ case    7:  		/* bc 12, CR6_EQ, 120 */
		/* 8221FCCCh case    7:*/		if ( regs.CR[6].eq ) { return 0x8221FD44;  }
		/* 8221FCCCh case    7:*/		return 0x8221FCD0;
		  /* 8221FCD0h */ case    8:  		/* cmpwi CR6, R11, 95 */
		/* 8221FCD0h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000005F);
		/* 8221FCD0h case    8:*/		return 0x8221FCD4;
		  /* 8221FCD4h */ case    9:  		/* bc 12, CR6_EQ, 104 */
		/* 8221FCD4h case    9:*/		if ( regs.CR[6].eq ) { return 0x8221FD3C;  }
		/* 8221FCD4h case    9:*/		return 0x8221FCD8;
		  /* 8221FCD8h */ case   10:  		/* cmpwi CR6, R11, 119 */
		/* 8221FCD8h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000077);
		/* 8221FCD8h case   10:*/		return 0x8221FCDC;
		  /* 8221FCDCh */ case   11:  		/* bc 12, CR6_EQ, 88 */
		/* 8221FCDCh case   11:*/		if ( regs.CR[6].eq ) { return 0x8221FD34;  }
		/* 8221FCDCh case   11:*/		return 0x8221FCE0;
		  /* 8221FCE0h */ case   12:  		/* cmpwi CR6, R11, 120 */
		/* 8221FCE0h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000078);
		/* 8221FCE0h case   12:*/		return 0x8221FCE4;
		  /* 8221FCE4h */ case   13:  		/* bc 12, CR6_EQ, 56 */
		/* 8221FCE4h case   13:*/		if ( regs.CR[6].eq ) { return 0x8221FD1C;  }
		/* 8221FCE4h case   13:*/		return 0x8221FCE8;
		  /* 8221FCE8h */ case   14:  		/* cmpwi CR6, R11, 121 */
		/* 8221FCE8h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000079);
		/* 8221FCE8h case   14:*/		return 0x8221FCEC;
		  /* 8221FCECh */ case   15:  		/* bc 12, CR6_EQ, 64 */
		/* 8221FCECh case   15:*/		if ( regs.CR[6].eq ) { return 0x8221FD2C;  }
		/* 8221FCECh case   15:*/		return 0x8221FCF0;
		  /* 8221FCF0h */ case   16:  		/* cmpwi CR6, R11, 122 */
		/* 8221FCF0h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000007A);
		/* 8221FCF0h case   16:*/		return 0x8221FCF4;
		  /* 8221FCF4h */ case   17:  		/* bc 12, CR6_EQ, 48 */
		/* 8221FCF4h case   17:*/		if ( regs.CR[6].eq ) { return 0x8221FD24;  }
		/* 8221FCF4h case   17:*/		return 0x8221FCF8;
		  /* 8221FCF8h */ case   18:  		/* lis R11, -32252 */
		/* 8221FCF8h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221FCF8h case   18:*/		return 0x8221FCFC;
		  /* 8221FCFCh */ case   19:  		/* lis R10, -32252 */
		/* 8221FCFCh case   19:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221FCFCh case   19:*/		return 0x8221FD00;
		  /* 8221FD00h */ case   20:  		/* lis R9, -32253 */
		/* 8221FD00h case   20:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8221FD00h case   20:*/		return 0x8221FD04;
		  /* 8221FD04h */ case   21:  		/* addi R6, R11, -1152 */
		/* 8221FD04h case   21:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFFB80);
		/* 8221FD04h case   21:*/		return 0x8221FD08;
		  /* 8221FD08h */ case   22:  		/* addi R5, R10, -888 */
		/* 8221FD08h case   22:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFFC88);
		/* 8221FD08h case   22:*/		return 0x8221FD0C;
		  /* 8221FD0Ch */ case   23:  		/* addi R4, R9, 27460 */
		/* 8221FD0Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8221FD0Ch case   23:*/		return 0x8221FD10;
		  /* 8221FD10h */ case   24:  		/* li R7, 703 */
		/* 8221FD10h case   24:*/		cpu::op::li<0>(regs,&regs.R7,0x2BF);
		/* 8221FD10h case   24:*/		return 0x8221FD14;
		  /* 8221FD14h */ case   25:  		/* li R3, 0 */
		/* 8221FD14h case   25:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221FD14h case   25:*/		return 0x8221FD18;
		  /* 8221FD18h */ case   26:  		/* bl -819472 */
		/* 8221FD18h case   26:*/		regs.LR = 0x8221FD1C; return 0x82157C08;
		/* 8221FD18h case   26:*/		return 0x8221FD1C;
	}
	return 0x8221FD1C;
} // Block from 8221FCB0h-8221FD1Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 8221FD1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FD1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FD1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FD1C);
		  /* 8221FD1Ch */ case    0:  		/* li R3, 0 */
		/* 8221FD1Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221FD1Ch case    0:*/		return 0x8221FD20;
		  /* 8221FD20h */ case    1:  		/* b 48 */
		/* 8221FD20h case    1:*/		return 0x8221FD50;
		/* 8221FD20h case    1:*/		return 0x8221FD24;
	}
	return 0x8221FD24;
} // Block from 8221FD1Ch-8221FD24h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221FD24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FD24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FD24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FD24);
		  /* 8221FD24h */ case    0:  		/* li R3, 2 */
		/* 8221FD24h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x2);
		/* 8221FD24h case    0:*/		return 0x8221FD28;
		  /* 8221FD28h */ case    1:  		/* b 40 */
		/* 8221FD28h case    1:*/		return 0x8221FD50;
		/* 8221FD28h case    1:*/		return 0x8221FD2C;
	}
	return 0x8221FD2C;
} // Block from 8221FD24h-8221FD2Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221FD2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FD2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FD2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FD2C);
		  /* 8221FD2Ch */ case    0:  		/* li R3, 1 */
		/* 8221FD2Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8221FD2Ch case    0:*/		return 0x8221FD30;
		  /* 8221FD30h */ case    1:  		/* b 32 */
		/* 8221FD30h case    1:*/		return 0x8221FD50;
		/* 8221FD30h case    1:*/		return 0x8221FD34;
	}
	return 0x8221FD34;
} // Block from 8221FD2Ch-8221FD34h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221FD34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FD34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FD34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FD34);
		  /* 8221FD34h */ case    0:  		/* li R3, 3 */
		/* 8221FD34h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 8221FD34h case    0:*/		return 0x8221FD38;
		  /* 8221FD38h */ case    1:  		/* b 24 */
		/* 8221FD38h case    1:*/		return 0x8221FD50;
		/* 8221FD38h case    1:*/		return 0x8221FD3C;
	}
	return 0x8221FD3C;
} // Block from 8221FD34h-8221FD3Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221FD3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FD3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FD3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FD3C);
		  /* 8221FD3Ch */ case    0:  		/* li R3, 7 */
		/* 8221FD3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x7);
		/* 8221FD3Ch case    0:*/		return 0x8221FD40;
		  /* 8221FD40h */ case    1:  		/* b 16 */
		/* 8221FD40h case    1:*/		return 0x8221FD50;
		/* 8221FD40h case    1:*/		return 0x8221FD44;
	}
	return 0x8221FD44;
} // Block from 8221FD3Ch-8221FD44h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221FD44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FD44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FD44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FD44);
		  /* 8221FD44h */ case    0:  		/* li R3, 5 */
		/* 8221FD44h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x5);
		/* 8221FD44h case    0:*/		return 0x8221FD48;
		  /* 8221FD48h */ case    1:  		/* b 8 */
		/* 8221FD48h case    1:*/		return 0x8221FD50;
		/* 8221FD48h case    1:*/		return 0x8221FD4C;
	}
	return 0x8221FD4C;
} // Block from 8221FD44h-8221FD4Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221FD4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FD4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FD4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FD4C);
		  /* 8221FD4Ch */ case    0:  		/* li R3, 4 */
		/* 8221FD4Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x4);
		/* 8221FD4Ch case    0:*/		return 0x8221FD50;
	}
	return 0x8221FD50;
} // Block from 8221FD4Ch-8221FD50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221FD50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FD50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FD50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FD50);
		  /* 8221FD50h */ case    0:  		/* addi R1, R1, 96 */
		/* 8221FD50h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8221FD50h case    0:*/		return 0x8221FD54;
		  /* 8221FD54h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8221FD54h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8221FD54h case    1:*/		return 0x8221FD58;
		  /* 8221FD58h */ case    2:  		/* mtspr LR, R12 */
		/* 8221FD58h case    2:*/		regs.LR = regs.R12;
		/* 8221FD58h case    2:*/		return 0x8221FD5C;
		  /* 8221FD5Ch */ case    3:  		/* bclr 20, CR0_LT */
		/* 8221FD5Ch case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8221FD5Ch case    3:*/		return 0x8221FD60;
	}
	return 0x8221FD60;
} // Block from 8221FD50h-8221FD60h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221FD60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FD60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FD60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FD60);
		  /* 8221FD60h */ case    0:  		/* mfspr R12, LR */
		/* 8221FD60h case    0:*/		regs.R12 = regs.LR;
		/* 8221FD60h case    0:*/		return 0x8221FD64;
		  /* 8221FD64h */ case    1:  		/* bl -1633036 */
		/* 8221FD64h case    1:*/		regs.LR = 0x8221FD68; return 0x82091258;
		/* 8221FD64h case    1:*/		return 0x8221FD68;
		  /* 8221FD68h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8221FD68h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8221FD68h case    2:*/		return 0x8221FD6C;
		  /* 8221FD6Ch */ case    3:  		/* li R11, 0 */
		/* 8221FD6Ch case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8221FD6Ch case    3:*/		return 0x8221FD70;
		  /* 8221FD70h */ case    4:  		/* mr R31, R4 */
		/* 8221FD70h case    4:*/		regs.R31 = regs.R4;
		/* 8221FD70h case    4:*/		return 0x8221FD74;
		  /* 8221FD74h */ case    5:  		/* lwz R4, <#[R3 + 4]> */
		/* 8221FD74h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000004) );
		/* 8221FD74h case    5:*/		return 0x8221FD78;
		  /* 8221FD78h */ case    6:  		/* stw R11, <#[R1 + 80]> */
		/* 8221FD78h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8221FD78h case    6:*/		return 0x8221FD7C;
		  /* 8221FD7Ch */ case    7:  		/* mr R30, R3 */
		/* 8221FD7Ch case    7:*/		regs.R30 = regs.R3;
		/* 8221FD7Ch case    7:*/		return 0x8221FD80;
		  /* 8221FD80h */ case    8:  		/* mr R29, R5 */
		/* 8221FD80h case    8:*/		regs.R29 = regs.R5;
		/* 8221FD80h case    8:*/		return 0x8221FD84;
		  /* 8221FD84h */ case    9:  		/* mr R28, R6 */
		/* 8221FD84h case    9:*/		regs.R28 = regs.R6;
		/* 8221FD84h case    9:*/		return 0x8221FD88;
		  /* 8221FD88h */ case   10:  		/* mr R7, R6 */
		/* 8221FD88h case   10:*/		regs.R7 = regs.R6;
		/* 8221FD88h case   10:*/		return 0x8221FD8C;
		  /* 8221FD8Ch */ case   11:  		/* mr R3, R5 */
		/* 8221FD8Ch case   11:*/		regs.R3 = regs.R5;
		/* 8221FD8Ch case   11:*/		return 0x8221FD90;
		  /* 8221FD90h */ case   12:  		/* li R9, 0 */
		/* 8221FD90h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8221FD90h case   12:*/		return 0x8221FD94;
		  /* 8221FD94h */ case   13:  		/* li R8, 0 */
		/* 8221FD94h case   13:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8221FD94h case   13:*/		return 0x8221FD98;
		  /* 8221FD98h */ case   14:  		/* addi R6, R1, 80 */
		/* 8221FD98h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8221FD98h case   14:*/		return 0x8221FD9C;
		  /* 8221FD9Ch */ case   15:  		/* li R5, 0 */
		/* 8221FD9Ch case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8221FD9Ch case   15:*/		return 0x8221FDA0;
		  /* 8221FDA0h */ case   16:  		/* bl 77288 */
		/* 8221FDA0h case   16:*/		regs.LR = 0x8221FDA4; return 0x82232B88;
		/* 8221FDA0h case   16:*/		return 0x8221FDA4;
		  /* 8221FDA4h */ case   17:  		/* li R8, 0 */
		/* 8221FDA4h case   17:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8221FDA4h case   17:*/		return 0x8221FDA8;
		  /* 8221FDA8h */ case   18:  		/* li R7, 0 */
		/* 8221FDA8h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8221FDA8h case   18:*/		return 0x8221FDAC;
		  /* 8221FDACh */ case   19:  		/* lwz R4, <#[R30 + 4]> */
		/* 8221FDACh case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000004) );
		/* 8221FDACh case   19:*/		return 0x8221FDB0;
		  /* 8221FDB0h */ case   20:  		/* mr R6, R28 */
		/* 8221FDB0h case   20:*/		regs.R6 = regs.R28;
		/* 8221FDB0h case   20:*/		return 0x8221FDB4;
		  /* 8221FDB4h */ case   21:  		/* addi R5, R1, 96 */
		/* 8221FDB4h case   21:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 8221FDB4h case   21:*/		return 0x8221FDB8;
		  /* 8221FDB8h */ case   22:  		/* mr R3, R29 */
		/* 8221FDB8h case   22:*/		regs.R3 = regs.R29;
		/* 8221FDB8h case   22:*/		return 0x8221FDBC;
		  /* 8221FDBCh */ case   23:  		/* bl 76588 */
		/* 8221FDBCh case   23:*/		regs.LR = 0x8221FDC0; return 0x822328E8;
		/* 8221FDBCh case   23:*/		return 0x8221FDC0;
		  /* 8221FDC0h */ case   24:  		/* lwz R11, <#[R30 + 8]> */
		/* 8221FDC0h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8221FDC0h case   24:*/		return 0x8221FDC4;
		  /* 8221FDC4h */ case   25:  		/* add R31, R11, R31 */
		/* 8221FDC4h case   25:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 8221FDC4h case   25:*/		return 0x8221FDC8;
		  /* 8221FDC8h */ case   26:  		/* addi R11, R31, 8 */
		/* 8221FDC8h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x8);
		/* 8221FDC8h case   26:*/		return 0x8221FDCC;
		  /* 8221FDCCh */ case   27:  		/* lwz R10, <#[R31 + 8]> */
		/* 8221FDCCh case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8221FDCCh case   27:*/		return 0x8221FDD0;
		  /* 8221FDD0h */ case   28:  		/* lwz R9, <#[R31 + 12]> */
		/* 8221FDD0h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221FDD0h case   28:*/		return 0x8221FDD4;
		  /* 8221FDD4h */ case   29:  		/* lwz R11, <#[R1 + 96]> */
		/* 8221FDD4h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 8221FDD4h case   29:*/		return 0x8221FDD8;
		  /* 8221FDD8h */ case   30:  		/* rlwimi R10, R11, 12, 19, 19 */
		/* 8221FDD8h case   30:*/		cpu::op::rlwimi<0,12,19,19>(regs,&regs.R10,regs.R11);
		/* 8221FDD8h case   30:*/		return 0x8221FDDC;
		  /* 8221FDDCh */ case   31:  		/* stw R10, <#[R31 + 8]> */
		/* 8221FDDCh case   31:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8221FDDCh case   31:*/		return 0x8221FDE0;
		  /* 8221FDE0h */ case   32:  		/* lwz R11, <#[R1 + 100]> */
		/* 8221FDE0h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 8221FDE0h case   32:*/		return 0x8221FDE4;
		  /* 8221FDE4h */ case   33:  		/* rlwimi R9, R11, 19, 12, 12 */
		/* 8221FDE4h case   33:*/		cpu::op::rlwimi<0,19,12,12>(regs,&regs.R9,regs.R11);
		/* 8221FDE4h case   33:*/		return 0x8221FDE8;
		  /* 8221FDE8h */ case   34:  		/* mr R11, R9 */
		/* 8221FDE8h case   34:*/		regs.R11 = regs.R9;
		/* 8221FDE8h case   34:*/		return 0x8221FDEC;
		  /* 8221FDECh */ case   35:  		/* stw R9, <#[R31 + 12]> */
		/* 8221FDECh case   35:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221FDECh case   35:*/		return 0x8221FDF0;
		  /* 8221FDF0h */ case   36:  		/* lwz R10, <#[R1 + 104]> */
		/* 8221FDF0h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000068) );
		/* 8221FDF0h case   36:*/		return 0x8221FDF4;
		  /* 8221FDF4h */ case   37:  		/* rlwimi R11, R10, 18, 13, 13 */
		/* 8221FDF4h case   37:*/		cpu::op::rlwimi<0,18,13,13>(regs,&regs.R11,regs.R10);
		/* 8221FDF4h case   37:*/		return 0x8221FDF8;
		  /* 8221FDF8h */ case   38:  		/* mr R10, R11 */
		/* 8221FDF8h case   38:*/		regs.R10 = regs.R11;
		/* 8221FDF8h case   38:*/		return 0x8221FDFC;
		  /* 8221FDFCh */ case   39:  		/* stw R11, <#[R31 + 12]> */
		/* 8221FDFCh case   39:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221FDFCh case   39:*/		return 0x8221FE00;
		  /* 8221FE00h */ case   40:  		/* lwz R11, <#[R1 + 108]> */
		/* 8221FE00h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 8221FE00h case   40:*/		return 0x8221FE04;
		  /* 8221FE04h */ case   41:  		/* rlwimi R10, R11, 17, 14, 14 */
		/* 8221FE04h case   41:*/		cpu::op::rlwimi<0,17,14,14>(regs,&regs.R10,regs.R11);
		/* 8221FE04h case   41:*/		return 0x8221FE08;
		  /* 8221FE08h */ case   42:  		/* mr R11, R10 */
		/* 8221FE08h case   42:*/		regs.R11 = regs.R10;
		/* 8221FE08h case   42:*/		return 0x8221FE0C;
		  /* 8221FE0Ch */ case   43:  		/* stw R10, <#[R31 + 12]> */
		/* 8221FE0Ch case   43:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221FE0Ch case   43:*/		return 0x8221FE10;
		  /* 8221FE10h */ case   44:  		/* lwz R10, <#[R1 + 112]> */
		/* 8221FE10h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 8221FE10h case   44:*/		return 0x8221FE14;
		  /* 8221FE14h */ case   45:  		/* rlwimi R11, R10, 16, 15, 15 */
		/* 8221FE14h case   45:*/		cpu::op::rlwimi<0,16,15,15>(regs,&regs.R11,regs.R10);
		/* 8221FE14h case   45:*/		return 0x8221FE18;
		  /* 8221FE18h */ case   46:  		/* mr R10, R11 */
		/* 8221FE18h case   46:*/		regs.R10 = regs.R11;
		/* 8221FE18h case   46:*/		return 0x8221FE1C;
		  /* 8221FE1Ch */ case   47:  		/* stw R11, <#[R31 + 12]> */
		/* 8221FE1Ch case   47:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221FE1Ch case   47:*/		return 0x8221FE20;
		  /* 8221FE20h */ case   48:  		/* lwz R11, <#[R1 + 116]> */
		/* 8221FE20h case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 8221FE20h case   48:*/		return 0x8221FE24;
		  /* 8221FE24h */ case   49:  		/* rlwimi R10, R11, 10, 16, 21 */
		/* 8221FE24h case   49:*/		cpu::op::rlwimi<0,10,16,21>(regs,&regs.R10,regs.R11);
		/* 8221FE24h case   49:*/		return 0x8221FE28;
		  /* 8221FE28h */ case   50:  		/* mr R11, R10 */
		/* 8221FE28h case   50:*/		regs.R11 = regs.R10;
		/* 8221FE28h case   50:*/		return 0x8221FE2C;
		  /* 8221FE2Ch */ case   51:  		/* stw R10, <#[R31 + 12]> */
		/* 8221FE2Ch case   51:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221FE2Ch case   51:*/		return 0x8221FE30;
		  /* 8221FE30h */ case   52:  		/* lwz R10, <#[R1 + 120]> */
		/* 8221FE30h case   52:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 8221FE30h case   52:*/		return 0x8221FE34;
		  /* 8221FE34h */ case   53:  		/* rlwimi R11, R10, 2, 24, 29 */
		/* 8221FE34h case   53:*/		cpu::op::rlwimi<0,2,24,29>(regs,&regs.R11,regs.R10);
		/* 8221FE34h case   53:*/		return 0x8221FE38;
		  /* 8221FE38h */ case   54:  		/* stw R11, <#[R31 + 12]> */
		/* 8221FE38h case   54:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221FE38h case   54:*/		return 0x8221FE3C;
		  /* 8221FE3Ch */ case   55:  		/* lwz R11, <#[R1 + 124]> */
		/* 8221FE3Ch case   55:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 8221FE3Ch case   55:*/		return 0x8221FE40;
		  /* 8221FE40h */ case   56:  		/* srawi R11, R11, 2 */
		/* 8221FE40h case   56:*/		cpu::op::srawi<0,2>(regs,&regs.R11,regs.R11);
		/* 8221FE40h case   56:*/		return 0x8221FE44;
		  /* 8221FE44h */ case   57:  		/* addze R11, R11 */
		/* 8221FE44h case   57:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8221FE44h case   57:*/		return 0x8221FE48;
		  /* 8221FE48h */ case   58:  		/* stb R11, <#[R31 + 16]> */
		/* 8221FE48h case   58:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8221FE48h case   58:*/		return 0x8221FE4C;
		  /* 8221FE4Ch */ case   59:  		/* lwz R11, <#[R30 + 12]> */
		/* 8221FE4Ch case   59:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8221FE4Ch case   59:*/		return 0x8221FE50;
		  /* 8221FE50h */ case   60:  		/* lwz R9, <#[R31 + 16]> */
		/* 8221FE50h case   60:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 8221FE50h case   60:*/		return 0x8221FE54;
		  /* 8221FE54h */ case   61:  		/* lwz R10, <#[R1 + 128]> */
		/* 8221FE54h case   61:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 8221FE54h case   61:*/		return 0x8221FE58;
		  /* 8221FE58h */ case   62:  		/* srawi R10, R10, 2 */
		/* 8221FE58h case   62:*/		cpu::op::srawi<0,2>(regs,&regs.R10,regs.R10);
		/* 8221FE58h case   62:*/		return 0x8221FE5C;
		  /* 8221FE5Ch */ case   63:  		/* addze R10, R10 */
		/* 8221FE5Ch case   63:*/		cpu::op::addze<0>(regs,&regs.R10,regs.R10);
		/* 8221FE5Ch case   63:*/		return 0x8221FE60;
		  /* 8221FE60h */ case   64:  		/* add R11, R10, R11 */
		/* 8221FE60h case   64:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8221FE60h case   64:*/		return 0x8221FE64;
		  /* 8221FE64h */ case   65:  		/* rlwimi R9, R11, 1, 8, 30 */
		/* 8221FE64h case   65:*/		cpu::op::rlwimi<0,1,8,30>(regs,&regs.R9,regs.R11);
		/* 8221FE64h case   65:*/		return 0x8221FE68;
		  /* 8221FE68h */ case   66:  		/* stw R9, <#[R31 + 16]> */
		/* 8221FE68h case   66:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 8221FE68h case   66:*/		return 0x8221FE6C;
		  /* 8221FE6Ch */ case   67:  		/* lwz R11, <#[R1 + 80]> */
		/* 8221FE6Ch case   67:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8221FE6Ch case   67:*/		return 0x8221FE70;
		  /* 8221FE70h */ case   68:  		/* lbz R3, <#[R11]> */
		/* 8221FE70h case   68:*/		cpu::mem::load8z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 8221FE70h case   68:*/		return 0x8221FE74;
		  /* 8221FE74h */ case   69:  		/* bl -452 */
		/* 8221FE74h case   69:*/		regs.LR = 0x8221FE78; return 0x8221FCB0;
		/* 8221FE74h case   69:*/		return 0x8221FE78;
		  /* 8221FE78h */ case   70:  		/* lwz R11, <#[R31 + 12]> */
		/* 8221FE78h case   70:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221FE78h case   70:*/		return 0x8221FE7C;
		  /* 8221FE7Ch */ case   71:  		/* rlwimi R11, R3, 29, 0, 2 */
		/* 8221FE7Ch case   71:*/		cpu::op::rlwimi<0,29,0,2>(regs,&regs.R11,regs.R3);
		/* 8221FE7Ch case   71:*/		return 0x8221FE80;
		  /* 8221FE80h */ case   72:  		/* stw R11, <#[R31 + 12]> */
		/* 8221FE80h case   72:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221FE80h case   72:*/		return 0x8221FE84;
		  /* 8221FE84h */ case   73:  		/* lwz R11, <#[R1 + 80]> */
		/* 8221FE84h case   73:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8221FE84h case   73:*/		return 0x8221FE88;
		  /* 8221FE88h */ case   74:  		/* lbz R3, <#[R11 + 1]> */
		/* 8221FE88h case   74:*/		cpu::mem::load8z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000001) );
		/* 8221FE88h case   74:*/		return 0x8221FE8C;
		  /* 8221FE8Ch */ case   75:  		/* bl -476 */
		/* 8221FE8Ch case   75:*/		regs.LR = 0x8221FE90; return 0x8221FCB0;
		/* 8221FE8Ch case   75:*/		return 0x8221FE90;
		  /* 8221FE90h */ case   76:  		/* lwz R11, <#[R31 + 12]> */
		/* 8221FE90h case   76:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221FE90h case   76:*/		return 0x8221FE94;
		  /* 8221FE94h */ case   77:  		/* rlwimi R11, R3, 26, 3, 5 */
		/* 8221FE94h case   77:*/		cpu::op::rlwimi<0,26,3,5>(regs,&regs.R11,regs.R3);
		/* 8221FE94h case   77:*/		return 0x8221FE98;
		  /* 8221FE98h */ case   78:  		/* stw R11, <#[R31 + 12]> */
		/* 8221FE98h case   78:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221FE98h case   78:*/		return 0x8221FE9C;
		  /* 8221FE9Ch */ case   79:  		/* lwz R11, <#[R1 + 80]> */
		/* 8221FE9Ch case   79:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8221FE9Ch case   79:*/		return 0x8221FEA0;
		  /* 8221FEA0h */ case   80:  		/* lbz R3, <#[R11 + 2]> */
		/* 8221FEA0h case   80:*/		cpu::mem::load8z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000002) );
		/* 8221FEA0h case   80:*/		return 0x8221FEA4;
		  /* 8221FEA4h */ case   81:  		/* bl -500 */
		/* 8221FEA4h case   81:*/		regs.LR = 0x8221FEA8; return 0x8221FCB0;
		/* 8221FEA4h case   81:*/		return 0x8221FEA8;
		  /* 8221FEA8h */ case   82:  		/* lwz R11, <#[R31 + 12]> */
		/* 8221FEA8h case   82:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221FEA8h case   82:*/		return 0x8221FEAC;
		  /* 8221FEACh */ case   83:  		/* rlwimi R11, R3, 23, 6, 8 */
		/* 8221FEACh case   83:*/		cpu::op::rlwimi<0,23,6,8>(regs,&regs.R11,regs.R3);
		/* 8221FEACh case   83:*/		return 0x8221FEB0;
		  /* 8221FEB0h */ case   84:  		/* stw R11, <#[R31 + 12]> */
		/* 8221FEB0h case   84:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221FEB0h case   84:*/		return 0x8221FEB4;
		  /* 8221FEB4h */ case   85:  		/* lwz R11, <#[R1 + 80]> */
		/* 8221FEB4h case   85:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8221FEB4h case   85:*/		return 0x8221FEB8;
		  /* 8221FEB8h */ case   86:  		/* lbz R3, <#[R11 + 3]> */
		/* 8221FEB8h case   86:*/		cpu::mem::load8z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000003) );
		/* 8221FEB8h case   86:*/		return 0x8221FEBC;
		  /* 8221FEBCh */ case   87:  		/* bl -524 */
		/* 8221FEBCh case   87:*/		regs.LR = 0x8221FEC0; return 0x8221FCB0;
		/* 8221FEBCh case   87:*/		return 0x8221FEC0;
		  /* 8221FEC0h */ case   88:  		/* lwz R11, <#[R31 + 12]> */
		/* 8221FEC0h case   88:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221FEC0h case   88:*/		return 0x8221FEC4;
		  /* 8221FEC4h */ case   89:  		/* rlwimi R11, R3, 20, 9, 11 */
		/* 8221FEC4h case   89:*/		cpu::op::rlwimi<0,20,9,11>(regs,&regs.R11,regs.R3);
		/* 8221FEC4h case   89:*/		return 0x8221FEC8;
		  /* 8221FEC8h */ case   90:  		/* stw R11, <#[R31 + 12]> */
		/* 8221FEC8h case   90:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8221FEC8h case   90:*/		return 0x8221FECC;
		  /* 8221FECCh */ case   91:  		/* addi R1, R1, 176 */
		/* 8221FECCh case   91:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8221FECCh case   91:*/		return 0x8221FED0;
		  /* 8221FED0h */ case   92:  		/* b -1633320 */
		/* 8221FED0h case   92:*/		return 0x820912A8;
		/* 8221FED0h case   92:*/		return 0x8221FED4;
		  /* 8221FED4h */ case   93:  		/* nop */
		/* 8221FED4h case   93:*/		cpu::op::nop();
		/* 8221FED4h case   93:*/		return 0x8221FED8;
	}
	return 0x8221FED8;
} // Block from 8221FD60h-8221FED8h (94 instructions)

//////////////////////////////////////////////////////
// Block at 8221FED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FED8);
		  /* 8221FED8h */ case    0:  		/* mfspr R12, LR */
		/* 8221FED8h case    0:*/		regs.R12 = regs.LR;
		/* 8221FED8h case    0:*/		return 0x8221FEDC;
		  /* 8221FEDCh */ case    1:  		/* bl -1633428 */
		/* 8221FEDCh case    1:*/		regs.LR = 0x8221FEE0; return 0x82091248;
		/* 8221FEDCh case    1:*/		return 0x8221FEE0;
		  /* 8221FEE0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8221FEE0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8221FEE0h case    2:*/		return 0x8221FEE4;
		  /* 8221FEE4h */ case    3:  		/* mr R30, R3 */
		/* 8221FEE4h case    3:*/		regs.R30 = regs.R3;
		/* 8221FEE4h case    3:*/		return 0x8221FEE8;
		  /* 8221FEE8h */ case    4:  		/* mr R3, R4 */
		/* 8221FEE8h case    4:*/		regs.R3 = regs.R4;
		/* 8221FEE8h case    4:*/		return 0x8221FEEC;
		  /* 8221FEECh */ case    5:  		/* mr R31, R4 */
		/* 8221FEECh case    5:*/		regs.R31 = regs.R4;
		/* 8221FEECh case    5:*/		return 0x8221FEF0;
		  /* 8221FEF0h */ case    6:  		/* mr R24, R5 */
		/* 8221FEF0h case    6:*/		regs.R24 = regs.R5;
		/* 8221FEF0h case    6:*/		return 0x8221FEF4;
		  /* 8221FEF4h */ case    7:  		/* bl -795980 */
		/* 8221FEF4h case    7:*/		regs.LR = 0x8221FEF8; return 0x8215D9A8;
		/* 8221FEF4h case    7:*/		return 0x8221FEF8;
		  /* 8221FEF8h */ case    8:  		/* mr R25, R3 */
		/* 8221FEF8h case    8:*/		regs.R25 = regs.R3;
		/* 8221FEF8h case    8:*/		return 0x8221FEFC;
		  /* 8221FEFCh */ case    9:  		/* bl -800708 */
		/* 8221FEFCh case    9:*/		regs.LR = 0x8221FF00; return 0x8215C738;
		/* 8221FEFCh case    9:*/		return 0x8221FF00;
		  /* 8221FF00h */ case   10:  		/* cmplwi CR0, R3, 0 */
		/* 8221FF00h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8221FF00h case   10:*/		return 0x8221FF04;
		  /* 8221FF04h */ case   11:  		/* bc 12, CR0_EQ, 196 */
		/* 8221FF04h case   11:*/		if ( regs.CR[0].eq ) { return 0x8221FFC8;  }
		/* 8221FF04h case   11:*/		return 0x8221FF08;
		  /* 8221FF08h */ case   12:  		/* mr R3, R31 */
		/* 8221FF08h case   12:*/		regs.R3 = regs.R31;
		/* 8221FF08h case   12:*/		return 0x8221FF0C;
		  /* 8221FF0Ch */ case   13:  		/* bl -796452 */
		/* 8221FF0Ch case   13:*/		regs.LR = 0x8221FF10; return 0x8215D7E8;
		/* 8221FF0Ch case   13:*/		return 0x8221FF10;
		  /* 8221FF10h */ case   14:  		/* mr R31, R3 */
		/* 8221FF10h case   14:*/		regs.R31 = regs.R3;
		/* 8221FF10h case   14:*/		return 0x8221FF14;
		  /* 8221FF14h */ case   15:  		/* lwz R10, <#[R30 + 4]> */
		/* 8221FF14h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 8221FF14h case   15:*/		return 0x8221FF18;
		  /* 8221FF18h */ case   16:  		/* lwz R3, <#[R30]> */
		/* 8221FF18h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8221FF18h case   16:*/		return 0x8221FF1C;
		  /* 8221FF1Ch */ case   17:  		/* lwz R11, <#[R31]> */
		/* 8221FF1Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8221FF1Ch case   17:*/		return 0x8221FF20;
		  /* 8221FF20h */ case   18:  		/* mtspr CTR, R10 */
		/* 8221FF20h case   18:*/		regs.CTR = regs.R10;
		/* 8221FF20h case   18:*/		return 0x8221FF24;
		  /* 8221FF24h */ case   19:  		/* addi R11, R11, 2 */
		/* 8221FF24h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 8221FF24h case   19:*/		return 0x8221FF28;
		  /* 8221FF28h */ case   20:  		/* rlwinm R28, R11, 2, 0, 29 */
		/* 8221FF28h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R28,regs.R11);
		/* 8221FF28h case   20:*/		return 0x8221FF2C;
		  /* 8221FF2Ch */ case   21:  		/* mr R4, R28 */
		/* 8221FF2Ch case   21:*/		regs.R4 = regs.R28;
		/* 8221FF2Ch case   21:*/		return 0x8221FF30;
		  /* 8221FF30h */ case   22:  		/* bcctrl 20, CR0_LT */
		/* 8221FF30h case   22:*/		if ( 1 ) { regs.LR = 0x8221FF34; return (uint32)regs.CTR; }
		/* 8221FF30h case   22:*/		return 0x8221FF34;
		  /* 8221FF34h */ case   23:  		/* mr R5, R28 */
		/* 8221FF34h case   23:*/		regs.R5 = regs.R28;
		/* 8221FF34h case   23:*/		return 0x8221FF38;
		  /* 8221FF38h */ case   24:  		/* mr R4, R31 */
		/* 8221FF38h case   24:*/		regs.R4 = regs.R31;
		/* 8221FF38h case   24:*/		return 0x8221FF3C;
		  /* 8221FF3Ch */ case   25:  		/* mr R29, R3 */
		/* 8221FF3Ch case   25:*/		regs.R29 = regs.R3;
		/* 8221FF3Ch case   25:*/		return 0x8221FF40;
		  /* 8221FF40h */ case   26:  		/* bl -1631632 */
		/* 8221FF40h case   26:*/		regs.LR = 0x8221FF44; return 0x820919B0;
		/* 8221FF40h case   26:*/		return 0x8221FF44;
		  /* 8221FF44h */ case   27:  		/* mr R3, R25 */
		/* 8221FF44h case   27:*/		regs.R3 = regs.R25;
		/* 8221FF44h case   27:*/		return 0x8221FF48;
		  /* 8221FF48h */ case   28:  		/* bl -800008 */
		/* 8221FF48h case   28:*/		regs.LR = 0x8221FF4C; return 0x8215CA40;
		/* 8221FF48h case   28:*/		return 0x8221FF4C;
		  /* 8221FF4Ch */ case   29:  		/* or. R31, R3, R3 */
		/* 8221FF4Ch case   29:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8221FF4Ch case   29:*/		return 0x8221FF50;
		  /* 8221FF50h */ case   30:  		/* bc 12, CR0_EQ, 112 */
		/* 8221FF50h case   30:*/		if ( regs.CR[0].eq ) { return 0x8221FFC0;  }
		/* 8221FF50h case   30:*/		return 0x8221FF54;
		  /* 8221FF54h */ case   31:  		/* lis R9, -32253 */
		/* 8221FF54h case   31:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8221FF54h case   31:*/		return 0x8221FF58;
		  /* 8221FF58h */ case   32:  		/* lis R10, -32252 */
		/* 8221FF58h case   32:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221FF58h case   32:*/		return 0x8221FF5C;
		  /* 8221FF5Ch */ case   33:  		/* lis R11, -32252 */
		/* 8221FF5Ch case   33:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8221FF5Ch case   33:*/		return 0x8221FF60;
		  /* 8221FF60h */ case   34:  		/* addi R28, R9, 27460 */
		/* 8221FF60h case   34:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R9,0x6B44);
		/* 8221FF60h case   34:*/		return 0x8221FF64;
		  /* 8221FF64h */ case   35:  		/* addi R27, R10, -844 */
		/* 8221FF64h case   35:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFFFCB4);
		/* 8221FF64h case   35:*/		return 0x8221FF68;
		  /* 8221FF68h */ case   36:  		/* addi R26, R11, -1152 */
		/* 8221FF68h case   36:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFFFB80);
		/* 8221FF68h case   36:*/		return 0x8221FF6C;
		  /* 8221FF6Ch */ case   37:  		/* mr R3, R31 */
		/* 8221FF6Ch case   37:*/		regs.R3 = regs.R31;
		/* 8221FF6Ch case   37:*/		return 0x8221FF70;
		  /* 8221FF70h */ case   38:  		/* bl -799104 */
		/* 8221FF70h case   38:*/		regs.LR = 0x8221FF74; return 0x8215CDF0;
		/* 8221FF70h case   38:*/		return 0x8221FF74;
		  /* 8221FF74h */ case   39:  		/* lwz R11, <#[R3]> */
		/* 8221FF74h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8221FF74h case   39:*/		return 0x8221FF78;
		  /* 8221FF78h */ case   40:  		/* cmpwi CR6, R11, 0 */
		/* 8221FF78h case   40:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8221FF78h case   40:*/		return 0x8221FF7C;
		  /* 8221FF7Ch */ case   41:  		/* bc 12, CR6_EQ, 32 */
		/* 8221FF7Ch case   41:*/		if ( regs.CR[6].eq ) { return 0x8221FF9C;  }
		/* 8221FF7Ch case   41:*/		return 0x8221FF80;
		  /* 8221FF80h */ case   42:  		/* mr R6, R26 */
		/* 8221FF80h case   42:*/		regs.R6 = regs.R26;
		/* 8221FF80h case   42:*/		return 0x8221FF84;
		  /* 8221FF84h */ case   43:  		/* mr R5, R27 */
		/* 8221FF84h case   43:*/		regs.R5 = regs.R27;
		/* 8221FF84h case   43:*/		return 0x8221FF88;
		  /* 8221FF88h */ case   44:  		/* mr R4, R28 */
		/* 8221FF88h case   44:*/		regs.R4 = regs.R28;
		/* 8221FF88h case   44:*/		return 0x8221FF8C;
		  /* 8221FF8Ch */ case   45:  		/* li R7, 842 */
		/* 8221FF8Ch case   45:*/		cpu::op::li<0>(regs,&regs.R7,0x34A);
		/* 8221FF8Ch case   45:*/		return 0x8221FF90;
		  /* 8221FF90h */ case   46:  		/* li R3, 0 */
		/* 8221FF90h case   46:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221FF90h case   46:*/		return 0x8221FF94;
		  /* 8221FF94h */ case   47:  		/* bl -820108 */
		/* 8221FF94h case   47:*/		regs.LR = 0x8221FF98; return 0x82157C08;
		/* 8221FF94h case   47:*/		return 0x8221FF98;
		  /* 8221FF98h */ case   48:  		/* b 20 */
		/* 8221FF98h case   48:*/		return 0x8221FFAC;
		/* 8221FF98h case   48:*/		return 0x8221FF9C;
	}
	return 0x8221FF9C;
} // Block from 8221FED8h-8221FF9Ch (49 instructions)

//////////////////////////////////////////////////////
// Block at 8221FF9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FF9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FF9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FF9C);
		  /* 8221FF9Ch */ case    0:  		/* mr R5, R24 */
		/* 8221FF9Ch case    0:*/		regs.R5 = regs.R24;
		/* 8221FF9Ch case    0:*/		return 0x8221FFA0;
		  /* 8221FFA0h */ case    1:  		/* lwz R6, <#[R30 + 12]> */
		/* 8221FFA0h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x0000000C) );
		/* 8221FFA0h case    1:*/		return 0x8221FFA4;
		  /* 8221FFA4h */ case    2:  		/* mr R4, R29 */
		/* 8221FFA4h case    2:*/		regs.R4 = regs.R29;
		/* 8221FFA4h case    2:*/		return 0x8221FFA8;
		  /* 8221FFA8h */ case    3:  		/* bl -584 */
		/* 8221FFA8h case    3:*/		regs.LR = 0x8221FFAC; return 0x8221FD60;
		/* 8221FFA8h case    3:*/		return 0x8221FFAC;
	}
	return 0x8221FFAC;
} // Block from 8221FF9Ch-8221FFACh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8221FFACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FFAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FFAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FFAC);
		  /* 8221FFACh */ case    0:  		/* mr R4, R31 */
		/* 8221FFACh case    0:*/		regs.R4 = regs.R31;
		/* 8221FFACh case    0:*/		return 0x8221FFB0;
		  /* 8221FFB0h */ case    1:  		/* mr R3, R25 */
		/* 8221FFB0h case    1:*/		regs.R3 = regs.R25;
		/* 8221FFB0h case    1:*/		return 0x8221FFB4;
		  /* 8221FFB4h */ case    2:  		/* bl -799348 */
		/* 8221FFB4h case    2:*/		regs.LR = 0x8221FFB8; return 0x8215CD40;
		/* 8221FFB4h case    2:*/		return 0x8221FFB8;
		  /* 8221FFB8h */ case    3:  		/* or. R31, R3, R3 */
		/* 8221FFB8h case    3:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8221FFB8h case    3:*/		return 0x8221FFBC;
		  /* 8221FFBCh */ case    4:  		/* bc 4, CR0_EQ, -80 */
		/* 8221FFBCh case    4:*/		if ( !regs.CR[0].eq ) { return 0x8221FF6C;  }
		/* 8221FFBCh case    4:*/		return 0x8221FFC0;
	}
	return 0x8221FFC0;
} // Block from 8221FFACh-8221FFC0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8221FFC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FFC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FFC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FFC0);
		  /* 8221FFC0h */ case    0:  		/* mr R3, R29 */
		/* 8221FFC0h case    0:*/		regs.R3 = regs.R29;
		/* 8221FFC0h case    0:*/		return 0x8221FFC4;
		  /* 8221FFC4h */ case    1:  		/* b 8 */
		/* 8221FFC4h case    1:*/		return 0x8221FFCC;
		/* 8221FFC4h case    1:*/		return 0x8221FFC8;
	}
	return 0x8221FFC8;
} // Block from 8221FFC0h-8221FFC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8221FFC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FFC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FFC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FFC8);
		  /* 8221FFC8h */ case    0:  		/* li R3, 0 */
		/* 8221FFC8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8221FFC8h case    0:*/		return 0x8221FFCC;
	}
	return 0x8221FFCC;
} // Block from 8221FFC8h-8221FFCCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8221FFCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FFCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FFCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FFCC);
		  /* 8221FFCCh */ case    0:  		/* addi R1, R1, 160 */
		/* 8221FFCCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8221FFCCh case    0:*/		return 0x8221FFD0;
		  /* 8221FFD0h */ case    1:  		/* b -1633592 */
		/* 8221FFD0h case    1:*/		return 0x82091298;
		/* 8221FFD0h case    1:*/		return 0x8221FFD4;
		  /* 8221FFD4h */ case    2:  		/* nop */
		/* 8221FFD4h case    2:*/		cpu::op::nop();
		/* 8221FFD4h case    2:*/		return 0x8221FFD8;
	}
	return 0x8221FFD8;
} // Block from 8221FFCCh-8221FFD8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8221FFD8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8221FFD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8221FFD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8221FFD8);
		  /* 8221FFD8h */ case    0:  		/* mfspr R12, LR */
		/* 8221FFD8h case    0:*/		regs.R12 = regs.LR;
		/* 8221FFD8h case    0:*/		return 0x8221FFDC;
		  /* 8221FFDCh */ case    1:  		/* bl -1633684 */
		/* 8221FFDCh case    1:*/		regs.LR = 0x8221FFE0; return 0x82091248;
		/* 8221FFDCh case    1:*/		return 0x8221FFE0;
		  /* 8221FFE0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8221FFE0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8221FFE0h case    2:*/		return 0x8221FFE4;
		  /* 8221FFE4h */ case    3:  		/* lis R11, -32253 */
		/* 8221FFE4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8221FFE4h case    3:*/		return 0x8221FFE8;
		  /* 8221FFE8h */ case    4:  		/* lis R10, -32252 */
		/* 8221FFE8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8221FFE8h case    4:*/		return 0x8221FFEC;
		  /* 8221FFECh */ case    5:  		/* mr R31, R3 */
		/* 8221FFECh case    5:*/		regs.R31 = regs.R3;
		/* 8221FFECh case    5:*/		return 0x8221FFF0;
		  /* 8221FFF0h */ case    6:  		/* mr R24, R4 */
		/* 8221FFF0h case    6:*/		regs.R24 = regs.R4;
		/* 8221FFF0h case    6:*/		return 0x8221FFF4;
		  /* 8221FFF4h */ case    7:  		/* mr R30, R5 */
		/* 8221FFF4h case    7:*/		regs.R30 = regs.R5;
		/* 8221FFF4h case    7:*/		return 0x8221FFF8;
		  /* 8221FFF8h */ case    8:  		/* mr R29, R6 */
		/* 8221FFF8h case    8:*/		regs.R29 = regs.R6;
		/* 8221FFF8h case    8:*/		return 0x8221FFFC;
		  /* 8221FFFCh */ case    9:  		/* mr R28, R7 */
		/* 8221FFFCh case    9:*/		regs.R28 = regs.R7;
		/* 8221FFFCh case    9:*/		return 0x82220000;
		  /* 82220000h */ case   10:  		/* mr R27, R8 */
		/* 82220000h case   10:*/		regs.R27 = regs.R8;
		/* 82220000h case   10:*/		return 0x82220004;
		  /* 82220004h */ case   11:  		/* cmplwi CR6, R3, 0 */
		/* 82220004h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82220004h case   11:*/		return 0x82220008;
		  /* 82220008h */ case   12:  		/* addi R26, R11, 27460 */
		/* 82220008h case   12:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0x6B44);
		/* 82220008h case   12:*/		return 0x8222000C;
		  /* 8222000Ch */ case   13:  		/* addi R25, R10, -1152 */
		/* 8222000Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R10,0xFFFFFB80);
		/* 8222000Ch case   13:*/		return 0x82220010;
		  /* 82220010h */ case   14:  		/* bc 4, CR6_EQ, 32 */
		/* 82220010h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82220030;  }
		/* 82220010h case   14:*/		return 0x82220014;
		  /* 82220014h */ case   15:  		/* lis R11, -32252 */
		/* 82220014h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82220014h case   15:*/		return 0x82220018;
		  /* 82220018h */ case   16:  		/* mr R6, R25 */
		/* 82220018h case   16:*/		regs.R6 = regs.R25;
		/* 82220018h case   16:*/		return 0x8222001C;
		  /* 8222001Ch */ case   17:  		/* addi R5, R11, -8448 */
		/* 8222001Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDF00);
		/* 8222001Ch case   17:*/		return 0x82220020;
		  /* 82220020h */ case   18:  		/* mr R4, R26 */
		/* 82220020h case   18:*/		regs.R4 = regs.R26;
		/* 82220020h case   18:*/		return 0x82220024;
		  /* 82220024h */ case   19:  		/* li R7, 1091 */
		/* 82220024h case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x443);
		/* 82220024h case   19:*/		return 0x82220028;
		  /* 82220028h */ case   20:  		/* li R3, 0 */
		/* 82220028h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82220028h case   20:*/		return 0x8222002C;
		  /* 8222002Ch */ case   21:  		/* bl -820260 */
		/* 8222002Ch case   21:*/		regs.LR = 0x82220030; return 0x82157C08;
		/* 8222002Ch case   21:*/		return 0x82220030;
	}
	return 0x82220030;
} // Block from 8221FFD8h-82220030h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82220030h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220030);
		  /* 82220030h */ case    0:  		/* cmpwi CR6, R24, 0 */
		/* 82220030h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 82220030h case    0:*/		return 0x82220034;
		  /* 82220034h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82220034h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82220040;  }
		/* 82220034h case    1:*/		return 0x82220038;
		  /* 82220038h */ case    2:  		/* lwz R3, <#[R31 + 52]> */
		/* 82220038h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 82220038h case    2:*/		return 0x8222003C;
		  /* 8222003Ch */ case    3:  		/* b 44 */
		/* 8222003Ch case    3:*/		return 0x82220068;
		/* 8222003Ch case    3:*/		return 0x82220040;
	}
	return 0x82220040;
} // Block from 82220030h-82220040h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82220040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220040);
		  /* 82220040h */ case    0:  		/* cmpwi CR6, R24, 1 */
		/* 82220040h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000001);
		/* 82220040h case    0:*/		return 0x82220044;
		  /* 82220044h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 82220044h case    1:*/		if ( regs.CR[6].eq ) { return 0x82220064;  }
		/* 82220044h case    1:*/		return 0x82220048;
		  /* 82220048h */ case    2:  		/* lis R11, -32252 */
		/* 82220048h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82220048h case    2:*/		return 0x8222004C;
		  /* 8222004Ch */ case    3:  		/* mr R6, R25 */
		/* 8222004Ch case    3:*/		regs.R6 = regs.R25;
		/* 8222004Ch case    3:*/		return 0x82220050;
		  /* 82220050h */ case    4:  		/* addi R5, R11, -20960 */
		/* 82220050h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAE20);
		/* 82220050h case    4:*/		return 0x82220054;
		  /* 82220054h */ case    5:  		/* mr R4, R26 */
		/* 82220054h case    5:*/		regs.R4 = regs.R26;
		/* 82220054h case    5:*/		return 0x82220058;
		  /* 82220058h */ case    6:  		/* li R7, 1101 */
		/* 82220058h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x44D);
		/* 82220058h case    6:*/		return 0x8222005C;
		  /* 8222005Ch */ case    7:  		/* li R3, 0 */
		/* 8222005Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8222005Ch case    7:*/		return 0x82220060;
		  /* 82220060h */ case    8:  		/* bl -820312 */
		/* 82220060h case    8:*/		regs.LR = 0x82220064; return 0x82157C08;
		/* 82220060h case    8:*/		return 0x82220064;
	}
	return 0x82220064;
} // Block from 82220040h-82220064h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82220064h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220064( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220064) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220064);
		  /* 82220064h */ case    0:  		/* lwz R3, <#[R31 + 48]> */
		/* 82220064h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82220064h case    0:*/		return 0x82220068;
	}
	return 0x82220068;
} // Block from 82220064h-82220068h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82220068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220068);
		  /* 82220068h */ case    0:  		/* mr R7, R27 */
		/* 82220068h case    0:*/		regs.R7 = regs.R27;
		/* 82220068h case    0:*/		return 0x8222006C;
		  /* 8222006Ch */ case    1:  		/* mr R6, R28 */
		/* 8222006Ch case    1:*/		regs.R6 = regs.R28;
		/* 8222006Ch case    1:*/		return 0x82220070;
		  /* 82220070h */ case    2:  		/* mr R5, R29 */
		/* 82220070h case    2:*/		regs.R5 = regs.R29;
		/* 82220070h case    2:*/		return 0x82220074;
		  /* 82220074h */ case    3:  		/* mr R4, R30 */
		/* 82220074h case    3:*/		regs.R4 = regs.R30;
		/* 82220074h case    3:*/		return 0x82220078;
		  /* 82220078h */ case    4:  		/* bl -795016 */
		/* 82220078h case    4:*/		regs.LR = 0x8222007C; return 0x8215DEF0;
		/* 82220078h case    4:*/		return 0x8222007C;
		  /* 8222007Ch */ case    5:  		/* addi R1, R1, 160 */
		/* 8222007Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8222007Ch case    5:*/		return 0x82220080;
		  /* 82220080h */ case    6:  		/* b -1633768 */
		/* 82220080h case    6:*/		return 0x82091298;
		/* 82220080h case    6:*/		return 0x82220084;
		  /* 82220084h */ case    7:  		/* nop */
		/* 82220084h case    7:*/		cpu::op::nop();
		/* 82220084h case    7:*/		return 0x82220088;
	}
	return 0x82220088;
} // Block from 82220068h-82220088h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82220088h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220088);
		  /* 82220088h */ case    0:  		/* mfspr R12, LR */
		/* 82220088h case    0:*/		regs.R12 = regs.LR;
		/* 82220088h case    0:*/		return 0x8222008C;
		  /* 8222008Ch */ case    1:  		/* bl -1633852 */
		/* 8222008Ch case    1:*/		regs.LR = 0x82220090; return 0x82091250;
		/* 8222008Ch case    1:*/		return 0x82220090;
		  /* 82220090h */ case    2:  		/* stfd FR31, <#[R1 - 64]> */
		/* 82220090h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFC0) );
		/* 82220090h case    2:*/		return 0x82220094;
		  /* 82220094h */ case    3:  		/* stwu R1, <#[R1 - 144]> */
		/* 82220094h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82220094h case    3:*/		return 0x82220098;
		  /* 82220098h */ case    4:  		/* lis R11, -32253 */
		/* 82220098h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82220098h case    4:*/		return 0x8222009C;
		  /* 8222009Ch */ case    5:  		/* fmr FR31, FR1 */
		/* 8222009Ch case    5:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 8222009Ch case    5:*/		return 0x822200A0;
		  /* 822200A0h */ case    6:  		/* lis R10, -32252 */
		/* 822200A0h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822200A0h case    6:*/		return 0x822200A4;
		  /* 822200A4h */ case    7:  		/* mr R31, R3 */
		/* 822200A4h case    7:*/		regs.R31 = regs.R3;
		/* 822200A4h case    7:*/		return 0x822200A8;
		  /* 822200A8h */ case    8:  		/* mr R26, R4 */
		/* 822200A8h case    8:*/		regs.R26 = regs.R4;
		/* 822200A8h case    8:*/		return 0x822200AC;
		  /* 822200ACh */ case    9:  		/* mr R30, R5 */
		/* 822200ACh case    9:*/		regs.R30 = regs.R5;
		/* 822200ACh case    9:*/		return 0x822200B0;
		  /* 822200B0h */ case   10:  		/* mr R29, R6 */
		/* 822200B0h case   10:*/		regs.R29 = regs.R6;
		/* 822200B0h case   10:*/		return 0x822200B4;
		  /* 822200B4h */ case   11:  		/* cmplwi CR6, R3, 0 */
		/* 822200B4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822200B4h case   11:*/		return 0x822200B8;
		  /* 822200B8h */ case   12:  		/* addi R28, R11, 27460 */
		/* 822200B8h case   12:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 822200B8h case   12:*/		return 0x822200BC;
		  /* 822200BCh */ case   13:  		/* addi R27, R10, -1152 */
		/* 822200BCh case   13:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFFFB80);
		/* 822200BCh case   13:*/		return 0x822200C0;
		  /* 822200C0h */ case   14:  		/* bc 4, CR6_EQ, 32 */
		/* 822200C0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x822200E0;  }
		/* 822200C0h case   14:*/		return 0x822200C4;
		  /* 822200C4h */ case   15:  		/* lis R11, -32252 */
		/* 822200C4h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822200C4h case   15:*/		return 0x822200C8;
		  /* 822200C8h */ case   16:  		/* mr R6, R27 */
		/* 822200C8h case   16:*/		regs.R6 = regs.R27;
		/* 822200C8h case   16:*/		return 0x822200CC;
		  /* 822200CCh */ case   17:  		/* addi R5, R11, -8448 */
		/* 822200CCh case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDF00);
		/* 822200CCh case   17:*/		return 0x822200D0;
		  /* 822200D0h */ case   18:  		/* mr R4, R28 */
		/* 822200D0h case   18:*/		regs.R4 = regs.R28;
		/* 822200D0h case   18:*/		return 0x822200D4;
		  /* 822200D4h */ case   19:  		/* li R7, 1154 */
		/* 822200D4h case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x482);
		/* 822200D4h case   19:*/		return 0x822200D8;
		  /* 822200D8h */ case   20:  		/* li R3, 0 */
		/* 822200D8h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822200D8h case   20:*/		return 0x822200DC;
		  /* 822200DCh */ case   21:  		/* bl -820436 */
		/* 822200DCh case   21:*/		regs.LR = 0x822200E0; return 0x82157C08;
		/* 822200DCh case   21:*/		return 0x822200E0;
	}
	return 0x822200E0;
} // Block from 82220088h-822200E0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 822200E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822200E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822200E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822200E0);
		  /* 822200E0h */ case    0:  		/* cmpwi CR6, R26, 0 */
		/* 822200E0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 822200E0h case    0:*/		return 0x822200E4;
		  /* 822200E4h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 822200E4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x822200F0;  }
		/* 822200E4h case    1:*/		return 0x822200E8;
		  /* 822200E8h */ case    2:  		/* lwz R3, <#[R31 + 52]> */
		/* 822200E8h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 822200E8h case    2:*/		return 0x822200EC;
		  /* 822200ECh */ case    3:  		/* b 44 */
		/* 822200ECh case    3:*/		return 0x82220118;
		/* 822200ECh case    3:*/		return 0x822200F0;
	}
	return 0x822200F0;
} // Block from 822200E0h-822200F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822200F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822200F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822200F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822200F0);
		  /* 822200F0h */ case    0:  		/* cmpwi CR6, R26, 1 */
		/* 822200F0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000001);
		/* 822200F0h case    0:*/		return 0x822200F4;
		  /* 822200F4h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 822200F4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82220114;  }
		/* 822200F4h case    1:*/		return 0x822200F8;
		  /* 822200F8h */ case    2:  		/* lis R11, -32252 */
		/* 822200F8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822200F8h case    2:*/		return 0x822200FC;
		  /* 822200FCh */ case    3:  		/* mr R6, R27 */
		/* 822200FCh case    3:*/		regs.R6 = regs.R27;
		/* 822200FCh case    3:*/		return 0x82220100;
		  /* 82220100h */ case    4:  		/* addi R5, R11, -20960 */
		/* 82220100h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAE20);
		/* 82220100h case    4:*/		return 0x82220104;
		  /* 82220104h */ case    5:  		/* mr R4, R28 */
		/* 82220104h case    5:*/		regs.R4 = regs.R28;
		/* 82220104h case    5:*/		return 0x82220108;
		  /* 82220108h */ case    6:  		/* li R7, 1164 */
		/* 82220108h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x48C);
		/* 82220108h case    6:*/		return 0x8222010C;
		  /* 8222010Ch */ case    7:  		/* li R3, 0 */
		/* 8222010Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8222010Ch case    7:*/		return 0x82220110;
		  /* 82220110h */ case    8:  		/* bl -820488 */
		/* 82220110h case    8:*/		regs.LR = 0x82220114; return 0x82157C08;
		/* 82220110h case    8:*/		return 0x82220114;
	}
	return 0x82220114;
} // Block from 822200F0h-82220114h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82220114h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220114( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220114) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220114);
		  /* 82220114h */ case    0:  		/* lwz R3, <#[R31 + 48]> */
		/* 82220114h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82220114h case    0:*/		return 0x82220118;
	}
	return 0x82220118;
} // Block from 82220114h-82220118h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82220118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220118);
		  /* 82220118h */ case    0:  		/* mr R5, R29 */
		/* 82220118h case    0:*/		regs.R5 = regs.R29;
		/* 82220118h case    0:*/		return 0x8222011C;
		  /* 8222011Ch */ case    1:  		/* fmr FR1, FR31 */
		/* 8222011Ch case    1:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8222011Ch case    1:*/		return 0x82220120;
		  /* 82220120h */ case    2:  		/* mr R4, R30 */
		/* 82220120h case    2:*/		regs.R4 = regs.R30;
		/* 82220120h case    2:*/		return 0x82220124;
		  /* 82220124h */ case    3:  		/* bl -794660 */
		/* 82220124h case    3:*/		regs.LR = 0x82220128; return 0x8215E100;
		/* 82220124h case    3:*/		return 0x82220128;
		  /* 82220128h */ case    4:  		/* addi R1, R1, 144 */
		/* 82220128h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82220128h case    4:*/		return 0x8222012C;
		  /* 8222012Ch */ case    5:  		/* lfd FR31, <#[R1 - 64]> */
		/* 8222012Ch case    5:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFC0) );
		/* 8222012Ch case    5:*/		return 0x82220130;
		  /* 82220130h */ case    6:  		/* b -1633936 */
		/* 82220130h case    6:*/		return 0x820912A0;
		/* 82220130h case    6:*/		return 0x82220134;
		  /* 82220134h */ case    7:  		/* nop */
		/* 82220134h case    7:*/		cpu::op::nop();
		/* 82220134h case    7:*/		return 0x82220138;
	}
	return 0x82220138;
} // Block from 82220118h-82220138h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82220138h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220138( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220138) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220138);
		  /* 82220138h */ case    0:  		/* mfspr R12, LR */
		/* 82220138h case    0:*/		regs.R12 = regs.LR;
		/* 82220138h case    0:*/		return 0x8222013C;
		  /* 8222013Ch */ case    1:  		/* bl -1634028 */
		/* 8222013Ch case    1:*/		regs.LR = 0x82220140; return 0x82091250;
		/* 8222013Ch case    1:*/		return 0x82220140;
		  /* 82220140h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82220140h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82220140h case    2:*/		return 0x82220144;
		  /* 82220144h */ case    3:  		/* lis R11, -32253 */
		/* 82220144h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82220144h case    3:*/		return 0x82220148;
		  /* 82220148h */ case    4:  		/* lis R10, -32252 */
		/* 82220148h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82220148h case    4:*/		return 0x8222014C;
		  /* 8222014Ch */ case    5:  		/* mr R31, R3 */
		/* 8222014Ch case    5:*/		regs.R31 = regs.R3;
		/* 8222014Ch case    5:*/		return 0x82220150;
		  /* 82220150h */ case    6:  		/* mr R26, R4 */
		/* 82220150h case    6:*/		regs.R26 = regs.R4;
		/* 82220150h case    6:*/		return 0x82220154;
		  /* 82220154h */ case    7:  		/* mr R30, R5 */
		/* 82220154h case    7:*/		regs.R30 = regs.R5;
		/* 82220154h case    7:*/		return 0x82220158;
		  /* 82220158h */ case    8:  		/* mr R29, R6 */
		/* 82220158h case    8:*/		regs.R29 = regs.R6;
		/* 82220158h case    8:*/		return 0x8222015C;
		  /* 8222015Ch */ case    9:  		/* cmplwi CR6, R3, 0 */
		/* 8222015Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8222015Ch case    9:*/		return 0x82220160;
		  /* 82220160h */ case   10:  		/* addi R28, R11, 27460 */
		/* 82220160h case   10:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 82220160h case   10:*/		return 0x82220164;
		  /* 82220164h */ case   11:  		/* addi R27, R10, -1152 */
		/* 82220164h case   11:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFFFB80);
		/* 82220164h case   11:*/		return 0x82220168;
		  /* 82220168h */ case   12:  		/* bc 4, CR6_EQ, 32 */
		/* 82220168h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82220188;  }
		/* 82220168h case   12:*/		return 0x8222016C;
		  /* 8222016Ch */ case   13:  		/* lis R11, -32252 */
		/* 8222016Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8222016Ch case   13:*/		return 0x82220170;
		  /* 82220170h */ case   14:  		/* mr R6, R27 */
		/* 82220170h case   14:*/		regs.R6 = regs.R27;
		/* 82220170h case   14:*/		return 0x82220174;
		  /* 82220174h */ case   15:  		/* addi R5, R11, -8448 */
		/* 82220174h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDF00);
		/* 82220174h case   15:*/		return 0x82220178;
		  /* 82220178h */ case   16:  		/* mr R4, R28 */
		/* 82220178h case   16:*/		regs.R4 = regs.R28;
		/* 82220178h case   16:*/		return 0x8222017C;
		  /* 8222017Ch */ case   17:  		/* li R7, 1284 */
		/* 8222017Ch case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x504);
		/* 8222017Ch case   17:*/		return 0x82220180;
		  /* 82220180h */ case   18:  		/* li R3, 0 */
		/* 82220180h case   18:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82220180h case   18:*/		return 0x82220184;
		  /* 82220184h */ case   19:  		/* bl -820604 */
		/* 82220184h case   19:*/		regs.LR = 0x82220188; return 0x82157C08;
		/* 82220184h case   19:*/		return 0x82220188;
	}
	return 0x82220188;
} // Block from 82220138h-82220188h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82220188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220188);
		  /* 82220188h */ case    0:  		/* cmpwi CR6, R26, 0 */
		/* 82220188h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 82220188h case    0:*/		return 0x8222018C;
		  /* 8222018Ch */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 8222018Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82220198;  }
		/* 8222018Ch case    1:*/		return 0x82220190;
		  /* 82220190h */ case    2:  		/* lwz R3, <#[R31 + 52]> */
		/* 82220190h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 82220190h case    2:*/		return 0x82220194;
		  /* 82220194h */ case    3:  		/* b 44 */
		/* 82220194h case    3:*/		return 0x822201C0;
		/* 82220194h case    3:*/		return 0x82220198;
	}
	return 0x82220198;
} // Block from 82220188h-82220198h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82220198h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220198( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220198) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220198);
		  /* 82220198h */ case    0:  		/* cmpwi CR6, R26, 1 */
		/* 82220198h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000001);
		/* 82220198h case    0:*/		return 0x8222019C;
		  /* 8222019Ch */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 8222019Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x822201BC;  }
		/* 8222019Ch case    1:*/		return 0x822201A0;
		  /* 822201A0h */ case    2:  		/* lis R11, -32252 */
		/* 822201A0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822201A0h case    2:*/		return 0x822201A4;
		  /* 822201A4h */ case    3:  		/* mr R6, R27 */
		/* 822201A4h case    3:*/		regs.R6 = regs.R27;
		/* 822201A4h case    3:*/		return 0x822201A8;
		  /* 822201A8h */ case    4:  		/* addi R5, R11, -20960 */
		/* 822201A8h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAE20);
		/* 822201A8h case    4:*/		return 0x822201AC;
		  /* 822201ACh */ case    5:  		/* mr R4, R28 */
		/* 822201ACh case    5:*/		regs.R4 = regs.R28;
		/* 822201ACh case    5:*/		return 0x822201B0;
		  /* 822201B0h */ case    6:  		/* li R7, 1293 */
		/* 822201B0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x50D);
		/* 822201B0h case    6:*/		return 0x822201B4;
		  /* 822201B4h */ case    7:  		/* li R3, 0 */
		/* 822201B4h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822201B4h case    7:*/		return 0x822201B8;
		  /* 822201B8h */ case    8:  		/* bl -820656 */
		/* 822201B8h case    8:*/		regs.LR = 0x822201BC; return 0x82157C08;
		/* 822201B8h case    8:*/		return 0x822201BC;
	}
	return 0x822201BC;
} // Block from 82220198h-822201BCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 822201BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822201BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822201BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822201BC);
		  /* 822201BCh */ case    0:  		/* lwz R3, <#[R31 + 48]> */
		/* 822201BCh case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 822201BCh case    0:*/		return 0x822201C0;
	}
	return 0x822201C0;
} // Block from 822201BCh-822201C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822201C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822201C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822201C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822201C0);
		  /* 822201C0h */ case    0:  		/* mr R5, R29 */
		/* 822201C0h case    0:*/		regs.R5 = regs.R29;
		/* 822201C0h case    0:*/		return 0x822201C4;
		  /* 822201C4h */ case    1:  		/* mr R4, R30 */
		/* 822201C4h case    1:*/		regs.R4 = regs.R30;
		/* 822201C4h case    1:*/		return 0x822201C8;
		  /* 822201C8h */ case    2:  		/* bl -794616 */
		/* 822201C8h case    2:*/		regs.LR = 0x822201CC; return 0x8215E1D0;
		/* 822201C8h case    2:*/		return 0x822201CC;
		  /* 822201CCh */ case    3:  		/* addi R1, R1, 144 */
		/* 822201CCh case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 822201CCh case    3:*/		return 0x822201D0;
		  /* 822201D0h */ case    4:  		/* b -1634096 */
		/* 822201D0h case    4:*/		return 0x820912A0;
		/* 822201D0h case    4:*/		return 0x822201D4;
		  /* 822201D4h */ case    5:  		/* nop */
		/* 822201D4h case    5:*/		cpu::op::nop();
		/* 822201D4h case    5:*/		return 0x822201D8;
	}
	return 0x822201D8;
} // Block from 822201C0h-822201D8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822201D8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822201D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822201D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822201D8);
		  /* 822201D8h */ case    0:  		/* mfspr R12, LR */
		/* 822201D8h case    0:*/		regs.R12 = regs.LR;
		/* 822201D8h case    0:*/		return 0x822201DC;
		  /* 822201DCh */ case    1:  		/* bl -1634176 */
		/* 822201DCh case    1:*/		regs.LR = 0x822201E0; return 0x8209125C;
		/* 822201DCh case    1:*/		return 0x822201E0;
		  /* 822201E0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 822201E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 822201E0h case    2:*/		return 0x822201E4;
		  /* 822201E4h */ case    3:  		/* mr R31, R3 */
		/* 822201E4h case    3:*/		regs.R31 = regs.R3;
		/* 822201E4h case    3:*/		return 0x822201E8;
		  /* 822201E8h */ case    4:  		/* mr R30, R4 */
		/* 822201E8h case    4:*/		regs.R30 = regs.R4;
		/* 822201E8h case    4:*/		return 0x822201EC;
		  /* 822201ECh */ case    5:  		/* mr R29, R5 */
		/* 822201ECh case    5:*/		regs.R29 = regs.R5;
		/* 822201ECh case    5:*/		return 0x822201F0;
		  /* 822201F0h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 822201F0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822201F0h case    6:*/		return 0x822201F4;
		  /* 822201F4h */ case    7:  		/* bc 4, CR6_EQ, 36 */
		/* 822201F4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82220218;  }
		/* 822201F4h case    7:*/		return 0x822201F8;
		  /* 822201F8h */ case    8:  		/* lis R11, -32252 */
		/* 822201F8h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822201F8h case    8:*/		return 0x822201FC;
		  /* 822201FCh */ case    9:  		/* lis R10, -32252 */
		/* 822201FCh case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822201FCh case    9:*/		return 0x82220200;
		  /* 82220200h */ case   10:  		/* lis R9, -32253 */
		/* 82220200h case   10:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82220200h case   10:*/		return 0x82220204;
		  /* 82220204h */ case   11:  		/* addi R6, R11, -1152 */
		/* 82220204h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFFB80);
		/* 82220204h case   11:*/		return 0x82220208;
		  /* 82220208h */ case   12:  		/* addi R5, R10, -8448 */
		/* 82220208h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFDF00);
		/* 82220208h case   12:*/		return 0x8222020C;
		  /* 8222020Ch */ case   13:  		/* addi R4, R9, 27460 */
		/* 8222020Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8222020Ch case   13:*/		return 0x82220210;
		  /* 82220210h */ case   14:  		/* li R7, 1401 */
		/* 82220210h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x579);
		/* 82220210h case   14:*/		return 0x82220214;
		  /* 82220214h */ case   15:  		/* bl -820748 */
		/* 82220214h case   15:*/		regs.LR = 0x82220218; return 0x82157C08;
		/* 82220214h case   15:*/		return 0x82220218;
	}
	return 0x82220218;
} // Block from 822201D8h-82220218h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82220218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220218);
		  /* 82220218h */ case    0:  		/* mr R5, R29 */
		/* 82220218h case    0:*/		regs.R5 = regs.R29;
		/* 82220218h case    0:*/		return 0x8222021C;
		  /* 8222021Ch */ case    1:  		/* lwz R3, <#[R31 + 48]> */
		/* 8222021Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 8222021Ch case    1:*/		return 0x82220220;
		  /* 82220220h */ case    2:  		/* mr R4, R30 */
		/* 82220220h case    2:*/		regs.R4 = regs.R30;
		/* 82220220h case    2:*/		return 0x82220224;
		  /* 82220224h */ case    3:  		/* bl -797540 */
		/* 82220224h case    3:*/		regs.LR = 0x82220228; return 0x8215D6C0;
		/* 82220224h case    3:*/		return 0x82220228;
		  /* 82220228h */ case    4:  		/* li R3, 0 */
		/* 82220228h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82220228h case    4:*/		return 0x8222022C;
		  /* 8222022Ch */ case    5:  		/* addi R1, R1, 112 */
		/* 8222022Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8222022Ch case    5:*/		return 0x82220230;
		  /* 82220230h */ case    6:  		/* b -1634180 */
		/* 82220230h case    6:*/		return 0x820912AC;
		/* 82220230h case    6:*/		return 0x82220234;
		  /* 82220234h */ case    7:  		/* nop */
		/* 82220234h case    7:*/		cpu::op::nop();
		/* 82220234h case    7:*/		return 0x82220238;
	}
	return 0x82220238;
} // Block from 82220218h-82220238h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82220238h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220238);
		  /* 82220238h */ case    0:  		/* mfspr R12, LR */
		/* 82220238h case    0:*/		regs.R12 = regs.LR;
		/* 82220238h case    0:*/		return 0x8222023C;
		  /* 8222023Ch */ case    1:  		/* bl -1634272 */
		/* 8222023Ch case    1:*/		regs.LR = 0x82220240; return 0x8209125C;
		/* 8222023Ch case    1:*/		return 0x82220240;
		  /* 82220240h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82220240h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82220240h case    2:*/		return 0x82220244;
		  /* 82220244h */ case    3:  		/* mr R31, R3 */
		/* 82220244h case    3:*/		regs.R31 = regs.R3;
		/* 82220244h case    3:*/		return 0x82220248;
		  /* 82220248h */ case    4:  		/* mr R30, R4 */
		/* 82220248h case    4:*/		regs.R30 = regs.R4;
		/* 82220248h case    4:*/		return 0x8222024C;
		  /* 8222024Ch */ case    5:  		/* mr R29, R5 */
		/* 8222024Ch case    5:*/		regs.R29 = regs.R5;
		/* 8222024Ch case    5:*/		return 0x82220250;
		  /* 82220250h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 82220250h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82220250h case    6:*/		return 0x82220254;
		  /* 82220254h */ case    7:  		/* bc 4, CR6_EQ, 36 */
		/* 82220254h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82220278;  }
		/* 82220254h case    7:*/		return 0x82220258;
		  /* 82220258h */ case    8:  		/* lis R11, -32252 */
		/* 82220258h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82220258h case    8:*/		return 0x8222025C;
		  /* 8222025Ch */ case    9:  		/* lis R10, -32252 */
		/* 8222025Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8222025Ch case    9:*/		return 0x82220260;
		  /* 82220260h */ case   10:  		/* lis R9, -32253 */
		/* 82220260h case   10:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82220260h case   10:*/		return 0x82220264;
		  /* 82220264h */ case   11:  		/* addi R6, R11, -1152 */
		/* 82220264h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFFB80);
		/* 82220264h case   11:*/		return 0x82220268;
		  /* 82220268h */ case   12:  		/* addi R5, R10, -8448 */
		/* 82220268h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFDF00);
		/* 82220268h case   12:*/		return 0x8222026C;
		  /* 8222026Ch */ case   13:  		/* addi R4, R9, 27460 */
		/* 8222026Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8222026Ch case   13:*/		return 0x82220270;
		  /* 82220270h */ case   14:  		/* li R7, 1444 */
		/* 82220270h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x5A4);
		/* 82220270h case   14:*/		return 0x82220274;
		  /* 82220274h */ case   15:  		/* bl -820844 */
		/* 82220274h case   15:*/		regs.LR = 0x82220278; return 0x82157C08;
		/* 82220274h case   15:*/		return 0x82220278;
	}
	return 0x82220278;
} // Block from 82220238h-82220278h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82220278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220278);
		  /* 82220278h */ case    0:  		/* mr R5, R29 */
		/* 82220278h case    0:*/		regs.R5 = regs.R29;
		/* 82220278h case    0:*/		return 0x8222027C;
		  /* 8222027Ch */ case    1:  		/* lwz R3, <#[R31 + 52]> */
		/* 8222027Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 8222027Ch case    1:*/		return 0x82220280;
		  /* 82220280h */ case    2:  		/* mr R4, R30 */
		/* 82220280h case    2:*/		regs.R4 = regs.R30;
		/* 82220280h case    2:*/		return 0x82220284;
		  /* 82220284h */ case    3:  		/* bl -797636 */
		/* 82220284h case    3:*/		regs.LR = 0x82220288; return 0x8215D6C0;
		/* 82220284h case    3:*/		return 0x82220288;
		  /* 82220288h */ case    4:  		/* li R3, 0 */
		/* 82220288h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82220288h case    4:*/		return 0x8222028C;
		  /* 8222028Ch */ case    5:  		/* addi R1, R1, 112 */
		/* 8222028Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8222028Ch case    5:*/		return 0x82220290;
		  /* 82220290h */ case    6:  		/* b -1634276 */
		/* 82220290h case    6:*/		return 0x820912AC;
		/* 82220290h case    6:*/		return 0x82220294;
		  /* 82220294h */ case    7:  		/* nop */
		/* 82220294h case    7:*/		cpu::op::nop();
		/* 82220294h case    7:*/		return 0x82220298;
	}
	return 0x82220298;
} // Block from 82220278h-82220298h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82220298h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220298);
		  /* 82220298h */ case    0:  		/* mfspr R12, LR */
		/* 82220298h case    0:*/		regs.R12 = regs.LR;
		/* 82220298h case    0:*/		return 0x8222029C;
		  /* 8222029Ch */ case    1:  		/* bl -1634396 */
		/* 8222029Ch case    1:*/		regs.LR = 0x822202A0; return 0x82091240;
		/* 8222029Ch case    1:*/		return 0x822202A0;
		  /* 822202A0h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 822202A0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 822202A0h case    2:*/		return 0x822202A4;
		  /* 822202A4h */ case    3:  		/* mr R25, R10 */
		/* 822202A4h case    3:*/		regs.R25 = regs.R10;
		/* 822202A4h case    3:*/		return 0x822202A8;
		  /* 822202A8h */ case    4:  		/* lis R11, -32253 */
		/* 822202A8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 822202A8h case    4:*/		return 0x822202AC;
		  /* 822202ACh */ case    5:  		/* lis R10, -32252 */
		/* 822202ACh case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822202ACh case    5:*/		return 0x822202B0;
		  /* 822202B0h */ case    6:  		/* mr R31, R3 */
		/* 822202B0h case    6:*/		regs.R31 = regs.R3;
		/* 822202B0h case    6:*/		return 0x822202B4;
		  /* 822202B4h */ case    7:  		/* mr R22, R4 */
		/* 822202B4h case    7:*/		regs.R22 = regs.R4;
		/* 822202B4h case    7:*/		return 0x822202B8;
		  /* 822202B8h */ case    8:  		/* mr R30, R5 */
		/* 822202B8h case    8:*/		regs.R30 = regs.R5;
		/* 822202B8h case    8:*/		return 0x822202BC;
		  /* 822202BCh */ case    9:  		/* mr R29, R6 */
		/* 822202BCh case    9:*/		regs.R29 = regs.R6;
		/* 822202BCh case    9:*/		return 0x822202C0;
		  /* 822202C0h */ case   10:  		/* mr R28, R7 */
		/* 822202C0h case   10:*/		regs.R28 = regs.R7;
		/* 822202C0h case   10:*/		return 0x822202C4;
		  /* 822202C4h */ case   11:  		/* mr R27, R8 */
		/* 822202C4h case   11:*/		regs.R27 = regs.R8;
		/* 822202C4h case   11:*/		return 0x822202C8;
		  /* 822202C8h */ case   12:  		/* mr R26, R9 */
		/* 822202C8h case   12:*/		regs.R26 = regs.R9;
		/* 822202C8h case   12:*/		return 0x822202CC;
		  /* 822202CCh */ case   13:  		/* cmplwi CR6, R3, 0 */
		/* 822202CCh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822202CCh case   13:*/		return 0x822202D0;
		  /* 822202D0h */ case   14:  		/* addi R24, R11, 27460 */
		/* 822202D0h case   14:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0x6B44);
		/* 822202D0h case   14:*/		return 0x822202D4;
		  /* 822202D4h */ case   15:  		/* addi R23, R10, -1152 */
		/* 822202D4h case   15:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R10,0xFFFFFB80);
		/* 822202D4h case   15:*/		return 0x822202D8;
		  /* 822202D8h */ case   16:  		/* bc 4, CR6_EQ, 32 */
		/* 822202D8h case   16:*/		if ( !regs.CR[6].eq ) { return 0x822202F8;  }
		/* 822202D8h case   16:*/		return 0x822202DC;
		  /* 822202DCh */ case   17:  		/* lis R11, -32252 */
		/* 822202DCh case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822202DCh case   17:*/		return 0x822202E0;
		  /* 822202E0h */ case   18:  		/* mr R6, R23 */
		/* 822202E0h case   18:*/		regs.R6 = regs.R23;
		/* 822202E0h case   18:*/		return 0x822202E4;
		  /* 822202E4h */ case   19:  		/* addi R5, R11, -8448 */
		/* 822202E4h case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDF00);
		/* 822202E4h case   19:*/		return 0x822202E8;
		  /* 822202E8h */ case   20:  		/* mr R4, R24 */
		/* 822202E8h case   20:*/		regs.R4 = regs.R24;
		/* 822202E8h case   20:*/		return 0x822202EC;
		  /* 822202ECh */ case   21:  		/* li R7, 1509 */
		/* 822202ECh case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x5E5);
		/* 822202ECh case   21:*/		return 0x822202F0;
		  /* 822202F0h */ case   22:  		/* li R3, 0 */
		/* 822202F0h case   22:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822202F0h case   22:*/		return 0x822202F4;
		  /* 822202F4h */ case   23:  		/* bl -820972 */
		/* 822202F4h case   23:*/		regs.LR = 0x822202F8; return 0x82157C08;
		/* 822202F4h case   23:*/		return 0x822202F8;
	}
	return 0x822202F8;
} // Block from 82220298h-822202F8h (24 instructions)

//////////////////////////////////////////////////////
// Block at 822202F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822202F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822202F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822202F8);
		  /* 822202F8h */ case    0:  		/* cmpwi CR6, R22, 0 */
		/* 822202F8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 822202F8h case    0:*/		return 0x822202FC;
		  /* 822202FCh */ case    1:  		/* bc 4, CR6_EQ, 60 */
		/* 822202FCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x82220338;  }
		/* 822202FCh case    1:*/		return 0x82220300;
		  /* 82220300h */ case    2:  		/* mr R9, R25 */
		/* 82220300h case    2:*/		regs.R9 = regs.R25;
		/* 82220300h case    2:*/		return 0x82220304;
		  /* 82220304h */ case    3:  		/* lwz R11, <#[R1 + 292]> */
		/* 82220304h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000124) );
		/* 82220304h case    3:*/		return 0x82220308;
		  /* 82220308h */ case    4:  		/* lwz R25, <#[R1 + 284]> */
		/* 82220308h case    4:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x0000011C) );
		/* 82220308h case    4:*/		return 0x8222030C;
		  /* 8222030Ch */ case    5:  		/* mr R8, R26 */
		/* 8222030Ch case    5:*/		regs.R8 = regs.R26;
		/* 8222030Ch case    5:*/		return 0x82220310;
		  /* 82220310h */ case    6:  		/* mr R7, R27 */
		/* 82220310h case    6:*/		regs.R7 = regs.R27;
		/* 82220310h case    6:*/		return 0x82220314;
		  /* 82220314h */ case    7:  		/* lwz R10, <#[R1 + 276]> */
		/* 82220314h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000114) );
		/* 82220314h case    7:*/		return 0x82220318;
		  /* 82220318h */ case    8:  		/* mr R6, R28 */
		/* 82220318h case    8:*/		regs.R6 = regs.R28;
		/* 82220318h case    8:*/		return 0x8222031C;
		  /* 8222031Ch */ case    9:  		/* lwz R3, <#[R31 + 52]> */
		/* 8222031Ch case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 8222031Ch case    9:*/		return 0x82220320;
		  /* 82220320h */ case   10:  		/* mr R5, R29 */
		/* 82220320h case   10:*/		regs.R5 = regs.R29;
		/* 82220320h case   10:*/		return 0x82220324;
		  /* 82220324h */ case   11:  		/* mr R4, R30 */
		/* 82220324h case   11:*/		regs.R4 = regs.R30;
		/* 82220324h case   11:*/		return 0x82220328;
		  /* 82220328h */ case   12:  		/* stw R11, <#[R1 + 92]> */
		/* 82220328h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 82220328h case   12:*/		return 0x8222032C;
		  /* 8222032Ch */ case   13:  		/* stw R25, <#[R1 + 84]> */
		/* 8222032Ch case   13:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000054) );
		/* 8222032Ch case   13:*/		return 0x82220330;
	}
	return 0x82220330;
} // Block from 822202F8h-82220330h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82220330h
// Function '?CP_Destroy@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_CP_COMPILED_PROGRAM@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220330( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220330) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220330);
		  /* 82220330h */ case    0:  		/* bl -794664 */
		/* 82220330h case    0:*/		regs.LR = 0x82220334; return 0x8215E308;
		/* 82220330h case    0:*/		return 0x82220334;
		  /* 82220334h */ case    1:  		/* b 92 */
		/* 82220334h case    1:*/		return 0x82220390;
		/* 82220334h case    1:*/		return 0x82220338;
	}
	return 0x82220338;
} // Block from 82220330h-82220338h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82220338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220338);
		  /* 82220338h */ case    0:  		/* cmpwi CR6, R22, 1 */
		/* 82220338h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000001);
		/* 82220338h case    0:*/		return 0x8222033C;
		  /* 8222033Ch */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 8222033Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8222035C;  }
		/* 8222033Ch case    1:*/		return 0x82220340;
		  /* 82220340h */ case    2:  		/* lis R11, -32252 */
		/* 82220340h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82220340h case    2:*/		return 0x82220344;
		  /* 82220344h */ case    3:  		/* mr R6, R23 */
		/* 82220344h case    3:*/		regs.R6 = regs.R23;
		/* 82220344h case    3:*/		return 0x82220348;
		  /* 82220348h */ case    4:  		/* addi R5, R11, -20960 */
		/* 82220348h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAE20);
		/* 82220348h case    4:*/		return 0x8222034C;
		  /* 8222034Ch */ case    5:  		/* mr R4, R24 */
		/* 8222034Ch case    5:*/		regs.R4 = regs.R24;
		/* 8222034Ch case    5:*/		return 0x82220350;
		  /* 82220350h */ case    6:  		/* li R7, 1519 */
		/* 82220350h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x5EF);
		/* 82220350h case    6:*/		return 0x82220354;
		  /* 82220354h */ case    7:  		/* li R3, 0 */
		/* 82220354h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82220354h case    7:*/		return 0x82220358;
		  /* 82220358h */ case    8:  		/* bl -821072 */
		/* 82220358h case    8:*/		regs.LR = 0x8222035C; return 0x82157C08;
		/* 82220358h case    8:*/		return 0x8222035C;
	}
	return 0x8222035C;
} // Block from 82220338h-8222035Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8222035Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222035C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222035C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222035C);
		  /* 8222035Ch */ case    0:  		/* mr R9, R25 */
		/* 8222035Ch case    0:*/		regs.R9 = regs.R25;
		/* 8222035Ch case    0:*/		return 0x82220360;
		  /* 82220360h */ case    1:  		/* lwz R11, <#[R1 + 292]> */
		/* 82220360h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000124) );
		/* 82220360h case    1:*/		return 0x82220364;
		  /* 82220364h */ case    2:  		/* lwz R25, <#[R1 + 284]> */
		/* 82220364h case    2:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x0000011C) );
		/* 82220364h case    2:*/		return 0x82220368;
		  /* 82220368h */ case    3:  		/* mr R8, R26 */
		/* 82220368h case    3:*/		regs.R8 = regs.R26;
		/* 82220368h case    3:*/		return 0x8222036C;
		  /* 8222036Ch */ case    4:  		/* mr R7, R27 */
		/* 8222036Ch case    4:*/		regs.R7 = regs.R27;
		/* 8222036Ch case    4:*/		return 0x82220370;
		  /* 82220370h */ case    5:  		/* lwz R10, <#[R1 + 276]> */
		/* 82220370h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000114) );
		/* 82220370h case    5:*/		return 0x82220374;
		  /* 82220374h */ case    6:  		/* mr R6, R28 */
		/* 82220374h case    6:*/		regs.R6 = regs.R28;
		/* 82220374h case    6:*/		return 0x82220378;
		  /* 82220378h */ case    7:  		/* lwz R3, <#[R31 + 48]> */
		/* 82220378h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82220378h case    7:*/		return 0x8222037C;
		  /* 8222037Ch */ case    8:  		/* mr R5, R29 */
		/* 8222037Ch case    8:*/		regs.R5 = regs.R29;
		/* 8222037Ch case    8:*/		return 0x82220380;
		  /* 82220380h */ case    9:  		/* mr R4, R30 */
		/* 82220380h case    9:*/		regs.R4 = regs.R30;
		/* 82220380h case    9:*/		return 0x82220384;
		  /* 82220384h */ case   10:  		/* stw R11, <#[R1 + 92]> */
		/* 82220384h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 82220384h case   10:*/		return 0x82220388;
		  /* 82220388h */ case   11:  		/* stw R25, <#[R1 + 84]> */
		/* 82220388h case   11:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000054) );
		/* 82220388h case   11:*/		return 0x8222038C;
		  /* 8222038Ch */ case   12:  		/* bl -794756 */
		/* 8222038Ch case   12:*/		regs.LR = 0x82220390; return 0x8215E308;
		/* 8222038Ch case   12:*/		return 0x82220390;
	}
	return 0x82220390;
} // Block from 8222035Ch-82220390h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82220390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220390);
		  /* 82220390h */ case    0:  		/* li R3, 0 */
		/* 82220390h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82220390h case    0:*/		return 0x82220394;
		  /* 82220394h */ case    1:  		/* addi R1, R1, 192 */
		/* 82220394h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82220394h case    1:*/		return 0x82220398;
		  /* 82220398h */ case    2:  		/* b -1634568 */
		/* 82220398h case    2:*/		return 0x82091290;
		/* 82220398h case    2:*/		return 0x8222039C;
		  /* 8222039Ch */ case    3:  		/* nop */
		/* 8222039Ch case    3:*/		cpu::op::nop();
		/* 8222039Ch case    3:*/		return 0x822203A0;
	}
	return 0x822203A0;
} // Block from 82220390h-822203A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822203A0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822203A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822203A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822203A0);
		  /* 822203A0h */ case    0:  		/* mfspr R12, LR */
		/* 822203A0h case    0:*/		regs.R12 = regs.LR;
		/* 822203A0h case    0:*/		return 0x822203A4;
		  /* 822203A4h */ case    1:  		/* bl -1634680 */
		/* 822203A4h case    1:*/		regs.LR = 0x822203A8; return 0x8209122C;
		/* 822203A4h case    1:*/		return 0x822203A8;
		  /* 822203A8h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 822203A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 822203A8h case    2:*/		return 0x822203AC;
		  /* 822203ACh */ case    3:  		/* mr R17, R10 */
		/* 822203ACh case    3:*/		regs.R17 = regs.R10;
		/* 822203ACh case    3:*/		return 0x822203B0;
		  /* 822203B0h */ case    4:  		/* lis R11, -32253 */
		/* 822203B0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 822203B0h case    4:*/		return 0x822203B4;
		  /* 822203B4h */ case    5:  		/* lis R10, -32252 */
		/* 822203B4h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822203B4h case    5:*/		return 0x822203B8;
		  /* 822203B8h */ case    6:  		/* mr R29, R3 */
		/* 822203B8h case    6:*/		regs.R29 = regs.R3;
		/* 822203B8h case    6:*/		return 0x822203BC;
		  /* 822203BCh */ case    7:  		/* mr R30, R4 */
		/* 822203BCh case    7:*/		regs.R30 = regs.R4;
		/* 822203BCh case    7:*/		return 0x822203C0;
		  /* 822203C0h */ case    8:  		/* mr R28, R5 */
		/* 822203C0h case    8:*/		regs.R28 = regs.R5;
		/* 822203C0h case    8:*/		return 0x822203C4;
		  /* 822203C4h */ case    9:  		/* mr R26, R6 */
		/* 822203C4h case    9:*/		regs.R26 = regs.R6;
		/* 822203C4h case    9:*/		return 0x822203C8;
		  /* 822203C8h */ case   10:  		/* mr R27, R7 */
		/* 822203C8h case   10:*/		regs.R27 = regs.R7;
		/* 822203C8h case   10:*/		return 0x822203CC;
		  /* 822203CCh */ case   11:  		/* mr R20, R8 */
		/* 822203CCh case   11:*/		regs.R20 = regs.R8;
		/* 822203CCh case   11:*/		return 0x822203D0;
		  /* 822203D0h */ case   12:  		/* mr R18, R9 */
		/* 822203D0h case   12:*/		regs.R18 = regs.R9;
		/* 822203D0h case   12:*/		return 0x822203D4;
		  /* 822203D4h */ case   13:  		/* cmplwi CR6, R4, 0 */
		/* 822203D4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 822203D4h case   13:*/		return 0x822203D8;
		  /* 822203D8h */ case   14:  		/* addi R23, R11, 27460 */
		/* 822203D8h case   14:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0x6B44);
		/* 822203D8h case   14:*/		return 0x822203DC;
		  /* 822203DCh */ case   15:  		/* addi R22, R10, -1152 */
		/* 822203DCh case   15:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R10,0xFFFFFB80);
		/* 822203DCh case   15:*/		return 0x822203E0;
		  /* 822203E0h */ case   16:  		/* bc 4, CR6_EQ, 32 */
		/* 822203E0h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82220400;  }
		/* 822203E0h case   16:*/		return 0x822203E4;
		  /* 822203E4h */ case   17:  		/* lis R11, -32252 */
		/* 822203E4h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822203E4h case   17:*/		return 0x822203E8;
		  /* 822203E8h */ case   18:  		/* mr R6, R22 */
		/* 822203E8h case   18:*/		regs.R6 = regs.R22;
		/* 822203E8h case   18:*/		return 0x822203EC;
		  /* 822203ECh */ case   19:  		/* addi R5, R11, -21620 */
		/* 822203ECh case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB8C);
		/* 822203ECh case   19:*/		return 0x822203F0;
		  /* 822203F0h */ case   20:  		/* mr R4, R23 */
		/* 822203F0h case   20:*/		regs.R4 = regs.R23;
		/* 822203F0h case   20:*/		return 0x822203F4;
		  /* 822203F4h */ case   21:  		/* li R7, 78 */
		/* 822203F4h case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x4E);
		/* 822203F4h case   21:*/		return 0x822203F8;
		  /* 822203F8h */ case   22:  		/* li R3, 0 */
		/* 822203F8h case   22:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822203F8h case   22:*/		return 0x822203FC;
		  /* 822203FCh */ case   23:  		/* bl -821236 */
		/* 822203FCh case   23:*/		regs.LR = 0x82220400; return 0x82157C08;
		/* 822203FCh case   23:*/		return 0x82220400;
	}
	return 0x82220400;
} // Block from 822203A0h-82220400h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82220400h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220400);
		  /* 82220400h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82220400h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82220400h case    0:*/		return 0x82220404;
		  /* 82220404h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 82220404h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82220424;  }
		/* 82220404h case    1:*/		return 0x82220408;
		  /* 82220408h */ case    2:  		/* lis R11, -32252 */
		/* 82220408h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82220408h case    2:*/		return 0x8222040C;
		  /* 8222040Ch */ case    3:  		/* mr R6, R22 */
		/* 8222040Ch case    3:*/		regs.R6 = regs.R22;
		/* 8222040Ch case    3:*/		return 0x82220410;
		  /* 82220410h */ case    4:  		/* addi R5, R11, -21632 */
		/* 82220410h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAB80);
		/* 82220410h case    4:*/		return 0x82220414;
		  /* 82220414h */ case    5:  		/* mr R4, R23 */
		/* 82220414h case    5:*/		regs.R4 = regs.R23;
		/* 82220414h case    5:*/		return 0x82220418;
		  /* 82220418h */ case    6:  		/* li R7, 79 */
		/* 82220418h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x4F);
		/* 82220418h case    6:*/		return 0x8222041C;
		  /* 8222041Ch */ case    7:  		/* li R3, 0 */
		/* 8222041Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8222041Ch case    7:*/		return 0x82220420;
		  /* 82220420h */ case    8:  		/* bl -821272 */
		/* 82220420h case    8:*/		regs.LR = 0x82220424; return 0x82157C08;
		/* 82220420h case    8:*/		return 0x82220424;
	}
	return 0x82220424;
} // Block from 82220400h-82220424h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82220424h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220424( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220424) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220424);
		  /* 82220424h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82220424h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82220424h case    0:*/		return 0x82220428;
		  /* 82220428h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 82220428h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82220448;  }
		/* 82220428h case    1:*/		return 0x8222042C;
		  /* 8222042Ch */ case    2:  		/* lis R11, -32252 */
		/* 8222042Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 8222042Ch case    2:*/		return 0x82220430;
		  /* 82220430h */ case    3:  		/* mr R6, R22 */
		/* 82220430h case    3:*/		regs.R6 = regs.R22;
		/* 82220430h case    3:*/		return 0x82220434;
		  /* 82220434h */ case    4:  		/* addi R5, R11, -21104 */
		/* 82220434h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAD90);
		/* 82220434h case    4:*/		return 0x82220438;
		  /* 82220438h */ case    5:  		/* mr R4, R23 */
		/* 82220438h case    5:*/		regs.R4 = regs.R23;
		/* 82220438h case    5:*/		return 0x8222043C;
		  /* 8222043Ch */ case    6:  		/* li R7, 80 */
		/* 8222043Ch case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x50);
		/* 8222043Ch case    6:*/		return 0x82220440;
		  /* 82220440h */ case    7:  		/* li R3, 0 */
		/* 82220440h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82220440h case    7:*/		return 0x82220444;
		  /* 82220444h */ case    8:  		/* bl -821308 */
		/* 82220444h case    8:*/		regs.LR = 0x82220448; return 0x82157C08;
		/* 82220444h case    8:*/		return 0x82220448;
	}
	return 0x82220448;
} // Block from 82220424h-82220448h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82220448h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220448);
		  /* 82220448h */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 82220448h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 82220448h case    0:*/		return 0x8222044C;
		  /* 8222044Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 8222044Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8222046C;  }
		/* 8222044Ch case    1:*/		return 0x82220450;
		  /* 82220450h */ case    2:  		/* lis R11, -32252 */
		/* 82220450h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82220450h case    2:*/		return 0x82220454;
		  /* 82220454h */ case    3:  		/* mr R6, R22 */
		/* 82220454h case    3:*/		regs.R6 = regs.R22;
		/* 82220454h case    3:*/		return 0x82220458;
	}
	return 0x82220458;
} // Block from 82220448h-82220458h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82220458h
// Function '?CP_CreateDataObject@XGRAPHICS@@YAPAXPAU_SSM_SSMDEVICE2CLIENT_INTERFACE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220458);
		  /* 82220458h */ case    0:  		/* addi R5, R11, -21120 */
		/* 82220458h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAD80);
		/* 82220458h case    0:*/		return 0x8222045C;
		  /* 8222045Ch */ case    1:  		/* mr R4, R23 */
		/* 8222045Ch case    1:*/		regs.R4 = regs.R23;
		/* 8222045Ch case    1:*/		return 0x82220460;
		  /* 82220460h */ case    2:  		/* li R7, 81 */
		/* 82220460h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x51);
		/* 82220460h case    2:*/		return 0x82220464;
		  /* 82220464h */ case    3:  		/* li R3, 0 */
		/* 82220464h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82220464h case    3:*/		return 0x82220468;
		  /* 82220468h */ case    4:  		/* bl -821344 */
		/* 82220468h case    4:*/		regs.LR = 0x8222046C; return 0x82157C08;
		/* 82220468h case    4:*/		return 0x8222046C;
	}
	return 0x8222046C;
} // Block from 82220458h-8222046Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8222046Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222046C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222046C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222046C);
		  /* 8222046Ch */ case    0:  		/* li R4, 76 */
		/* 8222046Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x4C);
		/* 8222046Ch case    0:*/		return 0x82220470;
		  /* 82220470h */ case    1:  		/* mtspr CTR, R30 */
		/* 82220470h case    1:*/		regs.CTR = regs.R30;
		/* 82220470h case    1:*/		return 0x82220474;
		  /* 82220474h */ case    2:  		/* mr R3, R29 */
		/* 82220474h case    2:*/		regs.R3 = regs.R29;
		/* 82220474h case    2:*/		return 0x82220478;
		  /* 82220478h */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 82220478h case    3:*/		if ( 1 ) { regs.LR = 0x8222047C; return (uint32)regs.CTR; }
		/* 82220478h case    3:*/		return 0x8222047C;
		  /* 8222047Ch */ case    4:  		/* or. R31, R3, R3 */
		/* 8222047Ch case    4:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8222047Ch case    4:*/		return 0x82220480;
		  /* 82220480h */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 82220480h case    5:*/		if ( !regs.CR[0].eq ) { return 0x822204A8;  }
		/* 82220480h case    5:*/		return 0x82220484;
		  /* 82220484h */ case    6:  		/* lis R11, -32252 */
		/* 82220484h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82220484h case    6:*/		return 0x82220488;
		  /* 82220488h */ case    7:  		/* mr R6, R22 */
		/* 82220488h case    7:*/		regs.R6 = regs.R22;
		/* 82220488h case    7:*/		return 0x8222048C;
		  /* 8222048Ch */ case    8:  		/* addi R5, R11, -8448 */
		/* 8222048Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDF00);
		/* 8222048Ch case    8:*/		return 0x82220490;
		  /* 82220490h */ case    9:  		/* mr R4, R23 */
		/* 82220490h case    9:*/		regs.R4 = regs.R23;
		/* 82220490h case    9:*/		return 0x82220494;
		  /* 82220494h */ case   10:  		/* li R7, 87 */
		/* 82220494h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x57);
		/* 82220494h case   10:*/		return 0x82220498;
		  /* 82220498h */ case   11:  		/* li R3, 0 */
		/* 82220498h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82220498h case   11:*/		return 0x8222049C;
		  /* 8222049Ch */ case   12:  		/* bl -821396 */
		/* 8222049Ch case   12:*/		regs.LR = 0x822204A0; return 0x82157C08;
		/* 8222049Ch case   12:*/		return 0x822204A0;
		  /* 822204A0h */ case   13:  		/* li R3, 0 */
		/* 822204A0h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822204A0h case   13:*/		return 0x822204A4;
		  /* 822204A4h */ case   14:  		/* b 284 */
		/* 822204A4h case   14:*/		return 0x822205C0;
		/* 822204A4h case   14:*/		return 0x822204A8;
	}
	return 0x822204A8;
} // Block from 8222046Ch-822204A8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 822204A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822204A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822204A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822204A8);
		  /* 822204A8h */ case    0:  		/* li R11, 1 */
		/* 822204A8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 822204A8h case    0:*/		return 0x822204AC;
		  /* 822204ACh */ case    1:  		/* lwz R24, <#[R1 + 292]> */
		/* 822204ACh case    1:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000124) );
		/* 822204ACh case    1:*/		return 0x822204B0;
		  /* 822204B0h */ case    2:  		/* li R19, 0 */
		/* 822204B0h case    2:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 822204B0h case    2:*/		return 0x822204B4;
		  /* 822204B4h */ case    3:  		/* stw R26, <#[R31 + 16]> */
		/* 822204B4h case    3:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00000010) );
		/* 822204B4h case    3:*/		return 0x822204B8;
		  /* 822204B8h */ case    4:  		/* stw R11, <#[R31 + 72]> */
		/* 822204B8h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000048) );
		/* 822204B8h case    4:*/		return 0x822204BC;
		  /* 822204BCh */ case    5:  		/* lis R11, -32252 */
		/* 822204BCh case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822204BCh case    5:*/		return 0x822204C0;
		  /* 822204C0h */ case    6:  		/* stw R29, <#[R31]> */
		/* 822204C0h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 822204C0h case    6:*/		return 0x822204C4;
		  /* 822204C4h */ case    7:  		/* mr R25, R19 */
		/* 822204C4h case    7:*/		regs.R25 = regs.R19;
		/* 822204C4h case    7:*/		return 0x822204C8;
		  /* 822204C8h */ case    8:  		/* stw R30, <#[R31 + 4]> */
		/* 822204C8h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 822204C8h case    8:*/		return 0x822204CC;
		  /* 822204CCh */ case    9:  		/* addi R26, R31, 24 */
		/* 822204CCh case    9:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R31,0x18);
		/* 822204CCh case    9:*/		return 0x822204D0;
		  /* 822204D0h */ case   10:  		/* stw R28, <#[R31 + 8]> */
		/* 822204D0h case   10:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000008) );
		/* 822204D0h case   10:*/		return 0x822204D4;
		  /* 822204D4h */ case   11:  		/* addi R21, R11, -812 */
		/* 822204D4h case   11:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R11,0xFFFFFCD4);
		/* 822204D4h case   11:*/		return 0x822204D8;
		  /* 822204D8h */ case   12:  		/* stw R27, <#[R31 + 12]> */
		/* 822204D8h case   12:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x0000000C) );
		/* 822204D8h case   12:*/		return 0x822204DC;
		  /* 822204DCh */ case   13:  		/* stw R24, <#[R31 + 20]> */
		/* 822204DCh case   13:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000014) );
		/* 822204DCh case   13:*/		return 0x822204E0;
		  /* 822204E0h */ case   14:  		/* stw R19, <#[R31 + 64]> */
		/* 822204E0h case   14:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R31 + 0x00000040) );
		/* 822204E0h case   14:*/		return 0x822204E4;
		  /* 822204E4h */ case   15:  		/* stw R19, <#[R31 + 68]> */
		/* 822204E4h case   15:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R31 + 0x00000044) );
		/* 822204E4h case   15:*/		return 0x822204E8;
		  /* 822204E8h */ case   16:  		/* li R4, 160 */
		/* 822204E8h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0xA0);
		/* 822204E8h case   16:*/		return 0x822204EC;
		  /* 822204ECh */ case   17:  		/* mtspr CTR, R30 */
		/* 822204ECh case   17:*/		regs.CTR = regs.R30;
		/* 822204ECh case   17:*/		return 0x822204F0;
		  /* 822204F0h */ case   18:  		/* mr R3, R29 */
		/* 822204F0h case   18:*/		regs.R3 = regs.R29;
		/* 822204F0h case   18:*/		return 0x822204F4;
		  /* 822204F4h */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 822204F4h case   19:*/		if ( 1 ) { regs.LR = 0x822204F8; return (uint32)regs.CTR; }
		/* 822204F4h case   19:*/		return 0x822204F8;
		  /* 822204F8h */ case   20:  		/* stw R3, <#[R26]> */
		/* 822204F8h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + 0x00000000) );
		/* 822204F8h case   20:*/		return 0x822204FC;
		  /* 822204FCh */ case   21:  		/* cmplwi CR0, R3, 0 */
		/* 822204FCh case   21:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 822204FCh case   21:*/		return 0x82220500;
		  /* 82220500h */ case   22:  		/* bc 4, CR0_EQ, 24 */
		/* 82220500h case   22:*/		if ( !regs.CR[0].eq ) { return 0x82220518;  }
		/* 82220500h case   22:*/		return 0x82220504;
		  /* 82220504h */ case   23:  		/* mr R6, R22 */
		/* 82220504h case   23:*/		regs.R6 = regs.R22;
		/* 82220504h case   23:*/		return 0x82220508;
		  /* 82220508h */ case   24:  		/* mr R5, R21 */
		/* 82220508h case   24:*/		regs.R5 = regs.R21;
		/* 82220508h case   24:*/		return 0x8222050C;
		  /* 8222050Ch */ case   25:  		/* mr R4, R23 */
		/* 8222050Ch case   25:*/		regs.R4 = regs.R23;
		/* 8222050Ch case   25:*/		return 0x82220510;
		  /* 82220510h */ case   26:  		/* li R7, 119 */
		/* 82220510h case   26:*/		cpu::op::li<0>(regs,&regs.R7,0x77);
		/* 82220510h case   26:*/		return 0x82220514;
		  /* 82220514h */ case   27:  		/* bl -821516 */
		/* 82220514h case   27:*/		regs.LR = 0x82220518; return 0x82157C08;
		/* 82220514h case   27:*/		return 0x82220518;
	}
	return 0x82220518;
} // Block from 822204A8h-82220518h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82220518h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220518);
		  /* 82220518h */ case    0:  		/* lwz R11, <#[R26]> */
		/* 82220518h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82220518h case    0:*/		return 0x8222051C;
		  /* 8222051Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8222051Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8222051Ch case    1:*/		return 0x82220520;
		  /* 82220520h */ case    2:  		/* bc 12, CR6_EQ, 168 */
		/* 82220520h case    2:*/		if ( regs.CR[6].eq ) { return 0x822205C8;  }
		/* 82220520h case    2:*/		return 0x82220524;
		  /* 82220524h */ case    3:  		/* addi R25, R25, 1 */
		/* 82220524h case    3:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 82220524h case    3:*/		return 0x82220528;
		  /* 82220528h */ case    4:  		/* addi R26, R26, 4 */
		/* 82220528h case    4:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 82220528h case    4:*/		return 0x8222052C;
		  /* 8222052Ch */ case    5:  		/* cmplwi CR6, R25, 6 */
		/* 8222052Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000006);
		/* 8222052Ch case    5:*/		return 0x82220530;
	}
	return 0x82220530;
} // Block from 82220518h-82220530h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82220530h
// Function '?CP_DestroyDataObject@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220530);
		  /* 82220530h */ case    0:  		/* bc 12, CR6_LT, -72 */
		/* 82220530h case    0:*/		if ( regs.CR[6].lt ) { return 0x822204E8;  }
		/* 82220530h case    0:*/		return 0x82220534;
		  /* 82220534h */ case    1:  		/* mr R3, R31 */
		/* 82220534h case    1:*/		regs.R3 = regs.R31;
		/* 82220534h case    1:*/		return 0x82220538;
		  /* 82220538h */ case    2:  		/* bl -8080 */
		/* 82220538h case    2:*/		regs.LR = 0x8222053C; return 0x8221E5A8;
		/* 82220538h case    2:*/		return 0x8222053C;
		  /* 8222053Ch */ case    3:  		/* cmpwi CR6, R24, 2 */
		/* 8222053Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000002);
		/* 8222053Ch case    3:*/		return 0x82220540;
		  /* 82220540h */ case    4:  		/* bc 12, CR6_EQ, 60 */
		/* 82220540h case    4:*/		if ( regs.CR[6].eq ) { return 0x8222057C;  }
		/* 82220540h case    4:*/		return 0x82220544;
		  /* 82220544h */ case    5:  		/* li R10, 0 */
		/* 82220544h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82220544h case    5:*/		return 0x82220548;
		  /* 82220548h */ case    6:  		/* mr R9, R17 */
		/* 82220548h case    6:*/		regs.R9 = regs.R17;
		/* 82220548h case    6:*/		return 0x8222054C;
		  /* 8222054Ch */ case    7:  		/* mr R8, R18 */
		/* 8222054Ch case    7:*/		regs.R8 = regs.R18;
		/* 8222054Ch case    7:*/		return 0x82220550;
		  /* 82220550h */ case    8:  		/* mr R7, R20 */
		/* 82220550h case    8:*/		regs.R7 = regs.R20;
		/* 82220550h case    8:*/		return 0x82220554;
		  /* 82220554h */ case    9:  		/* mr R6, R27 */
		/* 82220554h case    9:*/		regs.R6 = regs.R27;
		/* 82220554h case    9:*/		return 0x82220558;
		  /* 82220558h */ case   10:  		/* mr R5, R28 */
		/* 82220558h case   10:*/		regs.R5 = regs.R28;
		/* 82220558h case   10:*/		return 0x8222055C;
		  /* 8222055Ch */ case   11:  		/* mr R4, R30 */
		/* 8222055Ch case   11:*/		regs.R4 = regs.R30;
		/* 8222055Ch case   11:*/		return 0x82220560;
		  /* 82220560h */ case   12:  		/* mr R3, R29 */
		/* 82220560h case   12:*/		regs.R3 = regs.R29;
		/* 82220560h case   12:*/		return 0x82220564;
		  /* 82220564h */ case   13:  		/* bl -800036 */
		/* 82220564h case   13:*/		regs.LR = 0x82220568; return 0x8215D040;
		/* 82220564h case   13:*/		return 0x82220568;
		  /* 82220568h */ case   14:  		/* stw R3, <#[R31 + 52]> */
		/* 82220568h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 82220568h case   14:*/		return 0x8222056C;
		  /* 8222056Ch */ case   15:  		/* cmplwi CR0, R3, 0 */
		/* 8222056Ch case   15:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8222056Ch case   15:*/		return 0x82220570;
		  /* 82220570h */ case   16:  		/* bc 12, CR0_EQ, 88 */
		/* 82220570h case   16:*/		if ( regs.CR[0].eq ) { return 0x822205C8;  }
		/* 82220570h case   16:*/		return 0x82220574;
		  /* 82220574h */ case   17:  		/* li R4, 0 */
		/* 82220574h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82220574h case   17:*/		return 0x82220578;
		  /* 82220578h */ case   18:  		/* bl -799016 */
		/* 82220578h case   18:*/		regs.LR = 0x8222057C; return 0x8215D450;
		/* 82220578h case   18:*/		return 0x8222057C;
	}
	return 0x8222057C;
} // Block from 82220530h-8222057Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8222057Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222057C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222057C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222057C);
		  /* 8222057Ch */ case    0:  		/* li R10, 0 */
		/* 8222057Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8222057Ch case    0:*/		return 0x82220580;
		  /* 82220580h */ case    1:  		/* mr R9, R17 */
		/* 82220580h case    1:*/		regs.R9 = regs.R17;
		/* 82220580h case    1:*/		return 0x82220584;
		  /* 82220584h */ case    2:  		/* mr R8, R18 */
		/* 82220584h case    2:*/		regs.R8 = regs.R18;
		/* 82220584h case    2:*/		return 0x82220588;
		  /* 82220588h */ case    3:  		/* mr R7, R20 */
		/* 82220588h case    3:*/		regs.R7 = regs.R20;
		/* 82220588h case    3:*/		return 0x8222058C;
		  /* 8222058Ch */ case    4:  		/* mr R6, R27 */
		/* 8222058Ch case    4:*/		regs.R6 = regs.R27;
		/* 8222058Ch case    4:*/		return 0x82220590;
		  /* 82220590h */ case    5:  		/* mr R5, R28 */
		/* 82220590h case    5:*/		regs.R5 = regs.R28;
		/* 82220590h case    5:*/		return 0x82220594;
		  /* 82220594h */ case    6:  		/* mr R4, R30 */
		/* 82220594h case    6:*/		regs.R4 = regs.R30;
		/* 82220594h case    6:*/		return 0x82220598;
	}
	return 0x82220598;
} // Block from 8222057Ch-82220598h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82220598h
// Function '?CP_GetCS_ps@XGRAPHICS@@YAPAU_CS_COMPILED_SHADER@1@PAU_CP_COMPILED_PROGRAM@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220598);
		  /* 82220598h */ case    0:  		/* mr R3, R29 */
		/* 82220598h case    0:*/		regs.R3 = regs.R29;
		/* 82220598h case    0:*/		return 0x8222059C;
		  /* 8222059Ch */ case    1:  		/* bl -800092 */
		/* 8222059Ch case    1:*/		regs.LR = 0x822205A0; return 0x8215D040;
		/* 8222059Ch case    1:*/		return 0x822205A0;
		  /* 822205A0h */ case    2:  		/* stw R3, <#[R31 + 48]> */
		/* 822205A0h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 822205A0h case    2:*/		return 0x822205A4;
		  /* 822205A4h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 822205A4h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 822205A4h case    3:*/		return 0x822205A8;
		  /* 822205A8h */ case    4:  		/* bc 12, CR0_EQ, 32 */
		/* 822205A8h case    4:*/		if ( regs.CR[0].eq ) { return 0x822205C8;  }
		/* 822205A8h case    4:*/		return 0x822205AC;
		  /* 822205ACh */ case    5:  		/* li R4, 1 */
		/* 822205ACh case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 822205ACh case    5:*/		return 0x822205B0;
		  /* 822205B0h */ case    6:  		/* bl -799072 */
		/* 822205B0h case    6:*/		regs.LR = 0x822205B4; return 0x8215D450;
		/* 822205B0h case    6:*/		return 0x822205B4;
		  /* 822205B4h */ case    7:  		/* stw R19, <#[R31 + 56]> */
		/* 822205B4h case    7:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R31 + 0x00000038) );
		/* 822205B4h case    7:*/		return 0x822205B8;
		  /* 822205B8h */ case    8:  		/* mr R3, R31 */
		/* 822205B8h case    8:*/		regs.R3 = regs.R31;
		/* 822205B8h case    8:*/		return 0x822205BC;
		  /* 822205BCh */ case    9:  		/* stw R19, <#[R31 + 60]> */
		/* 822205BCh case    9:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R31 + 0x0000003C) );
		/* 822205BCh case    9:*/		return 0x822205C0;
	}
	return 0x822205C0;
} // Block from 82220598h-822205C0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 822205C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822205C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822205C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822205C0);
		  /* 822205C0h */ case    0:  		/* addi R1, R1, 208 */
		/* 822205C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 822205C0h case    0:*/		return 0x822205C4;
		  /* 822205C4h */ case    1:  		/* b -1635144 */
		/* 822205C4h case    1:*/		return 0x8209127C;
		/* 822205C4h case    1:*/		return 0x822205C8;
	}
	return 0x822205C8;
} // Block from 822205C0h-822205C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822205C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822205C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822205C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822205C8);
		  /* 822205C8h */ case    0:  		/* mr R3, R31 */
		/* 822205C8h case    0:*/		regs.R3 = regs.R31;
		/* 822205C8h case    0:*/		return 0x822205CC;
		  /* 822205CCh */ case    1:  		/* bl -3252 */
		/* 822205CCh case    1:*/		regs.LR = 0x822205D0; return 0x8221F918;
		/* 822205CCh case    1:*/		return 0x822205D0;
		  /* 822205D0h */ case    2:  		/* b -304 */
		/* 822205D0h case    2:*/		return 0x822204A0;
		/* 822205D0h case    2:*/		return 0x822205D4;
		  /* 822205D4h */ case    3:  		/* nop */
		/* 822205D4h case    3:*/		cpu::op::nop();
		/* 822205D4h case    3:*/		return 0x822205D8;
	}
	return 0x822205D8;
} // Block from 822205C8h-822205D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822205D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822205D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822205D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822205D8);
		  /* 822205D8h */ case    0:  		/* mfspr R12, LR */
		/* 822205D8h case    0:*/		regs.R12 = regs.LR;
		/* 822205D8h case    0:*/		return 0x822205DC;
		  /* 822205DCh */ case    1:  		/* bl -1635204 */
		/* 822205DCh case    1:*/		regs.LR = 0x822205E0; return 0x82091258;
		/* 822205DCh case    1:*/		return 0x822205E0;
		  /* 822205E0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 822205E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 822205E0h case    2:*/		return 0x822205E4;
		  /* 822205E4h */ case    3:  		/* lis R11, -32253 */
		/* 822205E4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 822205E4h case    3:*/		return 0x822205E8;
		  /* 822205E8h */ case    4:  		/* lis R10, -32252 */
		/* 822205E8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822205E8h case    4:*/		return 0x822205EC;
		  /* 822205ECh */ case    5:  		/* mr R29, R3 */
		/* 822205ECh case    5:*/		regs.R29 = regs.R3;
		/* 822205ECh case    5:*/		return 0x822205F0;
	}
	return 0x822205F0;
} // Block from 822205D8h-822205F0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822205F0h
// Function '?CP_GetCS_vs@XGRAPHICS@@YAPAU_CS_COMPILED_SHADER@1@PAU_CP_COMPILED_PROGRAM@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822205F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822205F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822205F0);
		  /* 822205F0h */ case    0:  		/* mr R28, R4 */
		/* 822205F0h case    0:*/		regs.R28 = regs.R4;
		/* 822205F0h case    0:*/		return 0x822205F4;
		  /* 822205F4h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 822205F4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822205F4h case    1:*/		return 0x822205F8;
		  /* 822205F8h */ case    2:  		/* addi R31, R11, 27460 */
		/* 822205F8h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x6B44);
		/* 822205F8h case    2:*/		return 0x822205FC;
		  /* 822205FCh */ case    3:  		/* addi R30, R10, -1152 */
		/* 822205FCh case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R10,0xFFFFFB80);
		/* 822205FCh case    3:*/		return 0x82220600;
		  /* 82220600h */ case    4:  		/* bc 4, CR6_EQ, 32 */
		/* 82220600h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82220620;  }
		/* 82220600h case    4:*/		return 0x82220604;
		  /* 82220604h */ case    5:  		/* lis R11, -32252 */
		/* 82220604h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82220604h case    5:*/		return 0x82220608;
		  /* 82220608h */ case    6:  		/* mr R6, R30 */
		/* 82220608h case    6:*/		regs.R6 = regs.R30;
		/* 82220608h case    6:*/		return 0x8222060C;
		  /* 8222060Ch */ case    7:  		/* addi R5, R11, -8448 */
		/* 8222060Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDF00);
		/* 8222060Ch case    7:*/		return 0x82220610;
		  /* 82220610h */ case    8:  		/* mr R4, R31 */
		/* 82220610h case    8:*/		regs.R4 = regs.R31;
		/* 82220610h case    8:*/		return 0x82220614;
		  /* 82220614h */ case    9:  		/* li R7, 642 */
		/* 82220614h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x282);
		/* 82220614h case    9:*/		return 0x82220618;
		  /* 82220618h */ case   10:  		/* li R3, 0 */
		/* 82220618h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82220618h case   10:*/		return 0x8222061C;
		  /* 8222061Ch */ case   11:  		/* bl -821780 */
		/* 8222061Ch case   11:*/		regs.LR = 0x82220620; return 0x82157C08;
		/* 8222061Ch case   11:*/		return 0x82220620;
	}
	return 0x82220620;
} // Block from 822205F0h-82220620h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82220620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220620);
		  /* 82220620h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82220620h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82220620h case    0:*/		return 0x82220624;
		  /* 82220624h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 82220624h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82220644;  }
		/* 82220624h case    1:*/		return 0x82220628;
		  /* 82220628h */ case    2:  		/* lis R11, -32252 */
		/* 82220628h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82220628h case    2:*/		return 0x8222062C;
		  /* 8222062Ch */ case    3:  		/* mr R6, R30 */
		/* 8222062Ch case    3:*/		regs.R6 = regs.R30;
		/* 8222062Ch case    3:*/		return 0x82220630;
		  /* 82220630h */ case    4:  		/* addi R5, R11, -800 */
		/* 82220630h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFCE0);
		/* 82220630h case    4:*/		return 0x82220634;
		  /* 82220634h */ case    5:  		/* mr R4, R31 */
		/* 82220634h case    5:*/		regs.R4 = regs.R31;
		/* 82220634h case    5:*/		return 0x82220638;
		  /* 82220638h */ case    6:  		/* li R7, 643 */
		/* 82220638h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x283);
		/* 82220638h case    6:*/		return 0x8222063C;
		  /* 8222063Ch */ case    7:  		/* li R3, 0 */
		/* 8222063Ch case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8222063Ch case    7:*/		return 0x82220640;
		  /* 82220640h */ case    8:  		/* bl -821816 */
		/* 82220640h case    8:*/		regs.LR = 0x82220644; return 0x82157C08;
		/* 82220640h case    8:*/		return 0x82220644;
	}
	return 0x82220644;
} // Block from 82220620h-82220644h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82220644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220644);
		  /* 82220644h */ case    0:  		/* mr R3, R28 */
		/* 82220644h case    0:*/		regs.R3 = regs.R28;
		/* 82220644h case    0:*/		return 0x82220648;
	}
	return 0x82220648;
} // Block from 82220644h-82220648h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82220648h
// Function '?CP_GetRS@XGRAPHICS@@YAPAU_CP_RENDERSTATE_BLOCK@1@PAU_CP_COMPILED_PROGRAM@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220648);
		  /* 82220648h */ case    0:  		/* bl -801800 */
		/* 82220648h case    0:*/		regs.LR = 0x8222064C; return 0x8215CA40;
		/* 82220648h case    0:*/		return 0x8222064C;
		  /* 8222064Ch */ case    1:  		/* b 44 */
		/* 8222064Ch case    1:*/		return 0x82220678;
		/* 8222064Ch case    1:*/		return 0x82220650;
		  /* 82220650h */ case    2:  		/* mr R3, R31 */
		/* 82220650h case    2:*/		regs.R3 = regs.R31;
		/* 82220650h case    2:*/		return 0x82220654;
		  /* 82220654h */ case    3:  		/* bl -800868 */
		/* 82220654h case    3:*/		regs.LR = 0x82220658; return 0x8215CDF0;
		/* 82220654h case    3:*/		return 0x82220658;
		  /* 82220658h */ case    4:  		/* mr R11, R3 */
		/* 82220658h case    4:*/		regs.R11 = regs.R3;
		/* 82220658h case    4:*/		return 0x8222065C;
		  /* 8222065Ch */ case    5:  		/* mr R3, R29 */
		/* 8222065Ch case    5:*/		regs.R3 = regs.R29;
		/* 8222065Ch case    5:*/		return 0x82220660;
		  /* 82220660h */ case    6:  		/* lwz R5, <#[R11 + 4]> */
		/* 82220660h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000004) );
		/* 82220660h case    6:*/		return 0x82220664;
		  /* 82220664h */ case    7:  		/* lwz R4, <#[R11]> */
		/* 82220664h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82220664h case    7:*/		return 0x82220668;
		  /* 82220668h */ case    8:  		/* bl 85344 */
		/* 82220668h case    8:*/		regs.LR = 0x8222066C; return 0x822353C8;
		/* 82220668h case    8:*/		return 0x8222066C;
		  /* 8222066Ch */ case    9:  		/* mr R4, R31 */
		/* 8222066Ch case    9:*/		regs.R4 = regs.R31;
		/* 8222066Ch case    9:*/		return 0x82220670;
		  /* 82220670h */ case   10:  		/* mr R3, R28 */
		/* 82220670h case   10:*/		regs.R3 = regs.R28;
		/* 82220670h case   10:*/		return 0x82220674;
		  /* 82220674h */ case   11:  		/* bl -801076 */
		/* 82220674h case   11:*/		regs.LR = 0x82220678; return 0x8215CD40;
		/* 82220674h case   11:*/		return 0x82220678;
	}
	return 0x82220678;
} // Block from 82220648h-82220678h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82220678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220678);
		  /* 82220678h */ case    0:  		/* or. R31, R3, R3 */
		/* 82220678h case    0:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82220678h case    0:*/		return 0x8222067C;
		  /* 8222067Ch */ case    1:  		/* bc 4, CR0_EQ, -44 */
		/* 8222067Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x82220650;  }
		/* 8222067Ch case    1:*/		return 0x82220680;
		  /* 82220680h */ case    2:  		/* addi R1, R1, 128 */
		/* 82220680h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82220680h case    2:*/		return 0x82220684;
		  /* 82220684h */ case    3:  		/* b -1635292 */
		/* 82220684h case    3:*/		return 0x820912A8;
		/* 82220684h case    3:*/		return 0x82220688;
	}
	return 0x82220688;
} // Block from 82220678h-82220688h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82220688h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220688);
		  /* 82220688h */ case    0:  		/* mfspr R12, LR */
		/* 82220688h case    0:*/		regs.R12 = regs.LR;
		/* 82220688h case    0:*/		return 0x8222068C;
		  /* 8222068Ch */ case    1:  		/* bl -1635384 */
		/* 8222068Ch case    1:*/		regs.LR = 0x82220690; return 0x82091254;
		/* 8222068Ch case    1:*/		return 0x82220690;
		  /* 82220690h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82220690h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82220690h case    2:*/		return 0x82220694;
		  /* 82220694h */ case    3:  		/* li R9, 0 */
		/* 82220694h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82220694h case    3:*/		return 0x82220698;
		  /* 82220698h */ case    4:  		/* lis R11, -32253 */
		/* 82220698h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82220698h case    4:*/		return 0x8222069C;
		  /* 8222069Ch */ case    5:  		/* lis R10, -32252 */
		/* 8222069Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 8222069Ch case    5:*/		return 0x822206A0;
		  /* 822206A0h */ case    6:  		/* stw R9, <#[R1 + 80]> */
		/* 822206A0h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 822206A0h case    6:*/		return 0x822206A4;
		  /* 822206A4h */ case    7:  		/* mr R31, R3 */
		/* 822206A4h case    7:*/		regs.R31 = regs.R3;
		/* 822206A4h case    7:*/		return 0x822206A8;
		  /* 822206A8h */ case    8:  		/* mr R28, R4 */
		/* 822206A8h case    8:*/		regs.R28 = regs.R4;
		/* 822206A8h case    8:*/		return 0x822206AC;
		  /* 822206ACh */ case    9:  		/* mr R27, R5 */
		/* 822206ACh case    9:*/		regs.R27 = regs.R5;
		/* 822206ACh case    9:*/		return 0x822206B0;
		  /* 822206B0h */ case   10:  		/* cmplwi CR6, R3, 0 */
		/* 822206B0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822206B0h case   10:*/		return 0x822206B4;
		  /* 822206B4h */ case   11:  		/* addi R30, R11, 27460 */
		/* 822206B4h case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 822206B4h case   11:*/		return 0x822206B8;
		  /* 822206B8h */ case   12:  		/* addi R29, R10, -1152 */
		/* 822206B8h case   12:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFFB80);
		/* 822206B8h case   12:*/		return 0x822206BC;
		  /* 822206BCh */ case   13:  		/* bc 4, CR6_EQ, 32 */
		/* 822206BCh case   13:*/		if ( !regs.CR[6].eq ) { return 0x822206DC;  }
		/* 822206BCh case   13:*/		return 0x822206C0;
		  /* 822206C0h */ case   14:  		/* lis R11, -32252 */
		/* 822206C0h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822206C0h case   14:*/		return 0x822206C4;
		  /* 822206C4h */ case   15:  		/* mr R6, R29 */
		/* 822206C4h case   15:*/		regs.R6 = regs.R29;
		/* 822206C4h case   15:*/		return 0x822206C8;
	}
	return 0x822206C8;
} // Block from 82220688h-822206C8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 822206C8h
// Function '?ConvertVertexFetchInstrMask@XGRAPHICS@@YA?AW4_VERTEX_INSTR_DESTSEL@1@D@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822206C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822206C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822206C8);
		  /* 822206C8h */ case    0:  		/* addi R5, R11, -8448 */
		/* 822206C8h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDF00);
		/* 822206C8h case    0:*/		return 0x822206CC;
		  /* 822206CCh */ case    1:  		/* mr R4, R30 */
		/* 822206CCh case    1:*/		regs.R4 = regs.R30;
		/* 822206CCh case    1:*/		return 0x822206D0;
		  /* 822206D0h */ case    2:  		/* li R7, 890 */
		/* 822206D0h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x37A);
		/* 822206D0h case    2:*/		return 0x822206D4;
		  /* 822206D4h */ case    3:  		/* li R3, 0 */
		/* 822206D4h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822206D4h case    3:*/		return 0x822206D8;
		  /* 822206D8h */ case    4:  		/* bl -821968 */
		/* 822206D8h case    4:*/		regs.LR = 0x822206DC; return 0x82157C08;
		/* 822206D8h case    4:*/		return 0x822206DC;
	}
	return 0x822206DC;
} // Block from 822206C8h-822206DCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 822206DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822206DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822206DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822206DC);
		  /* 822206DCh */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 822206DCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 822206DCh case    0:*/		return 0x822206E0;
		  /* 822206E0h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 822206E0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82220700;  }
		/* 822206E0h case    1:*/		return 0x822206E4;
		  /* 822206E4h */ case    2:  		/* lis R11, -32252 */
		/* 822206E4h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822206E4h case    2:*/		return 0x822206E8;
		  /* 822206E8h */ case    3:  		/* mr R6, R29 */
		/* 822206E8h case    3:*/		regs.R6 = regs.R29;
		/* 822206E8h case    3:*/		return 0x822206EC;
		  /* 822206ECh */ case    4:  		/* addi R5, R11, -9040 */
		/* 822206ECh case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDCB0);
		/* 822206ECh case    4:*/		return 0x822206F0;
		  /* 822206F0h */ case    5:  		/* mr R4, R30 */
		/* 822206F0h case    5:*/		regs.R4 = regs.R30;
		/* 822206F0h case    5:*/		return 0x822206F4;
		  /* 822206F4h */ case    6:  		/* li R7, 891 */
		/* 822206F4h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x37B);
		/* 822206F4h case    6:*/		return 0x822206F8;
		  /* 822206F8h */ case    7:  		/* li R3, 0 */
		/* 822206F8h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822206F8h case    7:*/		return 0x822206FC;
		  /* 822206FCh */ case    8:  		/* bl -822004 */
		/* 822206FCh case    8:*/		regs.LR = 0x82220700; return 0x82157C08;
		/* 822206FCh case    8:*/		return 0x82220700;
	}
	return 0x82220700;
} // Block from 822206DCh-82220700h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82220700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220700);
		  /* 82220700h */ case    0:  		/* addi R4, R1, 80 */
		/* 82220700h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82220700h case    0:*/		return 0x82220704;
		  /* 82220704h */ case    1:  		/* mr R3, R28 */
		/* 82220704h case    1:*/		regs.R3 = regs.R28;
		/* 82220704h case    1:*/		return 0x82220708;
		  /* 82220708h */ case    2:  		/* bl -799112 */
		/* 82220708h case    2:*/		regs.LR = 0x8222070C; return 0x8215D580;
		/* 82220708h case    2:*/		return 0x8222070C;
		  /* 8222070Ch */ case    3:  		/* lwz R11, <#[R1 + 80]> */
		/* 8222070Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8222070Ch case    3:*/		return 0x82220710;
		  /* 82220710h */ case    4:  		/* cmpwi CR6, R11, 1 */
		/* 82220710h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82220710h case    4:*/		return 0x82220714;
		  /* 82220714h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 82220714h case    5:*/		if ( regs.CR[6].eq ) { return 0x82220734;  }
		/* 82220714h case    5:*/		return 0x82220718;
		  /* 82220718h */ case    6:  		/* lis R11, -32252 */
		/* 82220718h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82220718h case    6:*/		return 0x8222071C;
		  /* 8222071Ch */ case    7:  		/* mr R6, R29 */
		/* 8222071Ch case    7:*/		regs.R6 = regs.R29;
		/* 8222071Ch case    7:*/		return 0x82220720;
		  /* 82220720h */ case    8:  		/* addi R5, R11, -20960 */
		/* 82220720h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFAE20);
		/* 82220720h case    8:*/		return 0x82220724;
		  /* 82220724h */ case    9:  		/* mr R4, R30 */
		/* 82220724h case    9:*/		regs.R4 = regs.R30;
		/* 82220724h case    9:*/		return 0x82220728;
		  /* 82220728h */ case   10:  		/* li R7, 896 */
		/* 82220728h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x380);
		/* 82220728h case   10:*/		return 0x8222072C;
		  /* 8222072Ch */ case   11:  		/* li R3, 0 */
		/* 8222072Ch case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8222072Ch case   11:*/		return 0x82220730;
		  /* 82220730h */ case   12:  		/* bl -822056 */
		/* 82220730h case   12:*/		regs.LR = 0x82220734; return 0x82157C08;
		/* 82220730h case   12:*/		return 0x82220734;
	}
	return 0x82220734;
} // Block from 82220700h-82220734h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82220734h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220734( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220734) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220734);
		  /* 82220734h */ case    0:  		/* lwz R3, <#[R31 + 48]> */
		/* 82220734h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82220734h case    0:*/		return 0x82220738;
		  /* 82220738h */ case    1:  		/* bl -800032 */
		/* 82220738h case    1:*/		regs.LR = 0x8222073C; return 0x8215D218;
		/* 82220738h case    1:*/		return 0x8222073C;
		  /* 8222073Ch */ case    2:  		/* lwz R4, <#[R31 + 56]> */
		/* 8222073Ch case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000038) );
		/* 8222073Ch case    2:*/		return 0x82220740;
		  /* 82220740h */ case    3:  		/* stw R28, <#[R31 + 48]> */
		/* 82220740h case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000030) );
		/* 82220740h case    3:*/		return 0x82220744;
		  /* 82220744h */ case    4:  		/* cmplwi CR6, R4, 0 */
		/* 82220744h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82220744h case    4:*/		return 0x82220748;
		  /* 82220748h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 82220748h case    5:*/		if ( regs.CR[6].eq ) { return 0x8222075C;  }
		/* 82220748h case    5:*/		return 0x8222074C;
		  /* 8222074Ch */ case    6:  		/* lwz R11, <#[R31 + 8]> */
		/* 8222074Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8222074Ch case    6:*/		return 0x82220750;
		  /* 82220750h */ case    7:  		/* lwz R3, <#[R31]> */
		/* 82220750h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 82220750h case    7:*/		return 0x82220754;
		  /* 82220754h */ case    8:  		/* mtspr CTR, R11 */
		/* 82220754h case    8:*/		regs.CTR = regs.R11;
		/* 82220754h case    8:*/		return 0x82220758;
		  /* 82220758h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 82220758h case    9:*/		if ( 1 ) { regs.LR = 0x8222075C; return (uint32)regs.CTR; }
		/* 82220758h case    9:*/		return 0x8222075C;
	}
	return 0x8222075C;
} // Block from 82220734h-8222075Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8222075Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222075C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222075C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222075C);
		  /* 8222075Ch */ case    0:  		/* mr R3, R28 */
		/* 8222075Ch case    0:*/		regs.R3 = regs.R28;
		/* 8222075Ch case    0:*/		return 0x82220760;
		  /* 82220760h */ case    1:  		/* bl -797720 */
		/* 82220760h case    1:*/		regs.LR = 0x82220764; return 0x8215DB48;
		/* 82220760h case    1:*/		return 0x82220764;
		  /* 82220764h */ case    2:  		/* mr R4, R3 */
		/* 82220764h case    2:*/		regs.R4 = regs.R3;
		/* 82220764h case    2:*/		return 0x82220768;
		  /* 82220768h */ case    3:  		/* mr R3, R31 */
		/* 82220768h case    3:*/		regs.R3 = regs.R31;
		/* 82220768h case    3:*/		return 0x8222076C;
		  /* 8222076Ch */ case    4:  		/* bl -404 */
		/* 8222076Ch case    4:*/		regs.LR = 0x82220770; return 0x822205D8;
		/* 8222076Ch case    4:*/		return 0x82220770;
		  /* 82220770h */ case    5:  		/* mr R5, R27 */
		/* 82220770h case    5:*/		regs.R5 = regs.R27;
		/* 82220770h case    5:*/		return 0x82220774;
		  /* 82220774h */ case    6:  		/* mr R4, R28 */
		/* 82220774h case    6:*/		regs.R4 = regs.R28;
		/* 82220774h case    6:*/		return 0x82220778;
	}
	return 0x82220778;
} // Block from 8222075Ch-82220778h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82220778h
// Function '?ProcessVertexInputPatch@XGRAPHICS@@YAXPAU_CS_VERTEX_INPUT_PATCH@1@PAU_CP_SHADERPROGRAM_BLOCK@1@PAU_ABSTRACT_STATE@1@PAU_SSM_REGISTRY@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220778);
		  /* 82220778h */ case    0:  		/* mr R3, R31 */
		/* 82220778h case    0:*/		regs.R3 = regs.R31;
		/* 82220778h case    0:*/		return 0x8222077C;
		  /* 8222077Ch */ case    1:  		/* bl -2212 */
		/* 8222077Ch case    1:*/		regs.LR = 0x82220780; return 0x8221FED8;
		/* 8222077Ch case    1:*/		return 0x82220780;
		  /* 82220780h */ case    2:  		/* stw R3, <#[R31 + 56]> */
		/* 82220780h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000038) );
		/* 82220780h case    2:*/		return 0x82220784;
		  /* 82220784h */ case    3:  		/* addi R1, R1, 144 */
		/* 82220784h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82220784h case    3:*/		return 0x82220788;
		  /* 82220788h */ case    4:  		/* b -1635556 */
		/* 82220788h case    4:*/		return 0x820912A4;
		/* 82220788h case    4:*/		return 0x8222078C;
		  /* 8222078Ch */ case    5:  		/* nop */
		/* 8222078Ch case    5:*/		cpu::op::nop();
		/* 8222078Ch case    5:*/		return 0x82220790;
	}
	return 0x82220790;
} // Block from 82220778h-82220790h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82220790h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220790);
		  /* 82220790h */ case    0:  		/* mfspr R12, LR */
		/* 82220790h case    0:*/		regs.R12 = regs.LR;
		/* 82220790h case    0:*/		return 0x82220794;
		  /* 82220794h */ case    1:  		/* bl -1635648 */
		/* 82220794h case    1:*/		regs.LR = 0x82220798; return 0x82091254;
		/* 82220794h case    1:*/		return 0x82220798;
		  /* 82220798h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82220798h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82220798h case    2:*/		return 0x8222079C;
		  /* 8222079Ch */ case    3:  		/* li R9, 1 */
		/* 8222079Ch case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8222079Ch case    3:*/		return 0x822207A0;
		  /* 822207A0h */ case    4:  		/* lis R11, -32253 */
		/* 822207A0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 822207A0h case    4:*/		return 0x822207A4;
		  /* 822207A4h */ case    5:  		/* lis R10, -32252 */
		/* 822207A4h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822207A4h case    5:*/		return 0x822207A8;
		  /* 822207A8h */ case    6:  		/* stw R9, <#[R1 + 80]> */
		/* 822207A8h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 822207A8h case    6:*/		return 0x822207AC;
		  /* 822207ACh */ case    7:  		/* mr R31, R3 */
		/* 822207ACh case    7:*/		regs.R31 = regs.R3;
		/* 822207ACh case    7:*/		return 0x822207B0;
		  /* 822207B0h */ case    8:  		/* mr R28, R4 */
		/* 822207B0h case    8:*/		regs.R28 = regs.R4;
		/* 822207B0h case    8:*/		return 0x822207B4;
		  /* 822207B4h */ case    9:  		/* mr R27, R5 */
		/* 822207B4h case    9:*/		regs.R27 = regs.R5;
		/* 822207B4h case    9:*/		return 0x822207B8;
		  /* 822207B8h */ case   10:  		/* cmplwi CR6, R3, 0 */
		/* 822207B8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822207B8h case   10:*/		return 0x822207BC;
		  /* 822207BCh */ case   11:  		/* addi R30, R11, 27460 */
		/* 822207BCh case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 822207BCh case   11:*/		return 0x822207C0;
		  /* 822207C0h */ case   12:  		/* addi R29, R10, -1152 */
		/* 822207C0h case   12:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFFB80);
		/* 822207C0h case   12:*/		return 0x822207C4;
		  /* 822207C4h */ case   13:  		/* bc 4, CR6_EQ, 32 */
		/* 822207C4h case   13:*/		if ( !regs.CR[6].eq ) { return 0x822207E4;  }
		/* 822207C4h case   13:*/		return 0x822207C8;
		  /* 822207C8h */ case   14:  		/* lis R11, -32252 */
		/* 822207C8h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822207C8h case   14:*/		return 0x822207CC;
		  /* 822207CCh */ case   15:  		/* mr R6, R29 */
		/* 822207CCh case   15:*/		regs.R6 = regs.R29;
		/* 822207CCh case   15:*/		return 0x822207D0;
		  /* 822207D0h */ case   16:  		/* addi R5, R11, -8448 */
		/* 822207D0h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDF00);
		/* 822207D0h case   16:*/		return 0x822207D4;
		  /* 822207D4h */ case   17:  		/* mr R4, R30 */
		/* 822207D4h case   17:*/		regs.R4 = regs.R30;
		/* 822207D4h case   17:*/		return 0x822207D8;
		  /* 822207D8h */ case   18:  		/* li R7, 950 */
		/* 822207D8h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x3B6);
		/* 822207D8h case   18:*/		return 0x822207DC;
		  /* 822207DCh */ case   19:  		/* li R3, 0 */
		/* 822207DCh case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822207DCh case   19:*/		return 0x822207E0;
		  /* 822207E0h */ case   20:  		/* bl -822232 */
		/* 822207E0h case   20:*/		regs.LR = 0x822207E4; return 0x82157C08;
		/* 822207E0h case   20:*/		return 0x822207E4;
	}
	return 0x822207E4;
} // Block from 82220790h-822207E4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 822207E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822207E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822207E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822207E4);
		  /* 822207E4h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 822207E4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 822207E4h case    0:*/		return 0x822207E8;
		  /* 822207E8h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 822207E8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82220808;  }
		/* 822207E8h case    1:*/		return 0x822207EC;
		  /* 822207ECh */ case    2:  		/* lis R11, -32252 */
		/* 822207ECh case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822207ECh case    2:*/		return 0x822207F0;
		  /* 822207F0h */ case    3:  		/* mr R6, R29 */
		/* 822207F0h case    3:*/		regs.R6 = regs.R29;
		/* 822207F0h case    3:*/		return 0x822207F4;
		  /* 822207F4h */ case    4:  		/* addi R5, R11, -9048 */
		/* 822207F4h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDCA8);
		/* 822207F4h case    4:*/		return 0x822207F8;
		  /* 822207F8h */ case    5:  		/* mr R4, R30 */
		/* 822207F8h case    5:*/		regs.R4 = regs.R30;
		/* 822207F8h case    5:*/		return 0x822207FC;
		  /* 822207FCh */ case    6:  		/* li R7, 951 */
		/* 822207FCh case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x3B7);
		/* 822207FCh case    6:*/		return 0x82220800;
		  /* 82220800h */ case    7:  		/* li R3, 0 */
		/* 82220800h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82220800h case    7:*/		return 0x82220804;
		  /* 82220804h */ case    8:  		/* bl -822268 */
		/* 82220804h case    8:*/		regs.LR = 0x82220808; return 0x82157C08;
		/* 82220804h case    8:*/		return 0x82220808;
	}
	return 0x82220808;
} // Block from 822207E4h-82220808h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82220808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220808);
		  /* 82220808h */ case    0:  		/* addi R4, R1, 80 */
		/* 82220808h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82220808h case    0:*/		return 0x8222080C;
		  /* 8222080Ch */ case    1:  		/* mr R3, R28 */
		/* 8222080Ch case    1:*/		regs.R3 = regs.R28;
		/* 8222080Ch case    1:*/		return 0x82220810;
		  /* 82220810h */ case    2:  		/* bl -799376 */
		/* 82220810h case    2:*/		regs.LR = 0x82220814; return 0x8215D580;
		/* 82220810h case    2:*/		return 0x82220814;
		  /* 82220814h */ case    3:  		/* lwz R11, <#[R1 + 80]> */
		/* 82220814h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82220814h case    3:*/		return 0x82220818;
		  /* 82220818h */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 82220818h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82220818h case    4:*/		return 0x8222081C;
		  /* 8222081Ch */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 8222081Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x8222083C;  }
		/* 8222081Ch case    5:*/		return 0x82220820;
		  /* 82220820h */ case    6:  		/* lis R11, -32252 */
		/* 82220820h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82220820h case    6:*/		return 0x82220824;
		  /* 82220824h */ case    7:  		/* mr R6, R29 */
		/* 82220824h case    7:*/		regs.R6 = regs.R29;
		/* 82220824h case    7:*/		return 0x82220828;
		  /* 82220828h */ case    8:  		/* addi R5, R11, -788 */
		/* 82220828h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFCEC);
		/* 82220828h case    8:*/		return 0x8222082C;
		  /* 8222082Ch */ case    9:  		/* mr R4, R30 */
		/* 8222082Ch case    9:*/		regs.R4 = regs.R30;
		/* 8222082Ch case    9:*/		return 0x82220830;
		  /* 82220830h */ case   10:  		/* li R7, 956 */
		/* 82220830h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x3BC);
		/* 82220830h case   10:*/		return 0x82220834;
		  /* 82220834h */ case   11:  		/* li R3, 0 */
		/* 82220834h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82220834h case   11:*/		return 0x82220838;
		  /* 82220838h */ case   12:  		/* bl -822320 */
		/* 82220838h case   12:*/		regs.LR = 0x8222083C; return 0x82157C08;
		/* 82220838h case   12:*/		return 0x8222083C;
	}
	return 0x8222083C;
} // Block from 82220808h-8222083Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8222083Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222083C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222083C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222083C);
		  /* 8222083Ch */ case    0:  		/* lwz R3, <#[R31 + 52]> */
		/* 8222083Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 8222083Ch case    0:*/		return 0x82220840;
		  /* 82220840h */ case    1:  		/* bl -800296 */
		/* 82220840h case    1:*/		regs.LR = 0x82220844; return 0x8215D218;
		/* 82220840h case    1:*/		return 0x82220844;
		  /* 82220844h */ case    2:  		/* lwz R4, <#[R31 + 60]> */
		/* 82220844h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000003C) );
		/* 82220844h case    2:*/		return 0x82220848;
		  /* 82220848h */ case    3:  		/* stw R28, <#[R31 + 52]> */
		/* 82220848h case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000034) );
		/* 82220848h case    3:*/		return 0x8222084C;
		  /* 8222084Ch */ case    4:  		/* cmplwi CR6, R4, 0 */
		/* 8222084Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8222084Ch case    4:*/		return 0x82220850;
		  /* 82220850h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 82220850h case    5:*/		if ( regs.CR[6].eq ) { return 0x82220864;  }
		/* 82220850h case    5:*/		return 0x82220854;
		  /* 82220854h */ case    6:  		/* lwz R11, <#[R31 + 8]> */
		/* 82220854h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82220854h case    6:*/		return 0x82220858;
		  /* 82220858h */ case    7:  		/* lwz R3, <#[R31]> */
		/* 82220858h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 82220858h case    7:*/		return 0x8222085C;
		  /* 8222085Ch */ case    8:  		/* mtspr CTR, R11 */
		/* 8222085Ch case    8:*/		regs.CTR = regs.R11;
		/* 8222085Ch case    8:*/		return 0x82220860;
		  /* 82220860h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 82220860h case    9:*/		if ( 1 ) { regs.LR = 0x82220864; return (uint32)regs.CTR; }
		/* 82220860h case    9:*/		return 0x82220864;
	}
	return 0x82220864;
} // Block from 8222083Ch-82220864h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82220864h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220864( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220864) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220864);
		  /* 82220864h */ case    0:  		/* mr R3, R28 */
		/* 82220864h case    0:*/		regs.R3 = regs.R28;
		/* 82220864h case    0:*/		return 0x82220868;
		  /* 82220868h */ case    1:  		/* bl -797984 */
		/* 82220868h case    1:*/		regs.LR = 0x8222086C; return 0x8215DB48;
		/* 82220868h case    1:*/		return 0x8222086C;
		  /* 8222086Ch */ case    2:  		/* mr R4, R3 */
		/* 8222086Ch case    2:*/		regs.R4 = regs.R3;
		/* 8222086Ch case    2:*/		return 0x82220870;
		  /* 82220870h */ case    3:  		/* mr R3, R31 */
		/* 82220870h case    3:*/		regs.R3 = regs.R31;
		/* 82220870h case    3:*/		return 0x82220874;
		  /* 82220874h */ case    4:  		/* bl -668 */
		/* 82220874h case    4:*/		regs.LR = 0x82220878; return 0x822205D8;
		/* 82220874h case    4:*/		return 0x82220878;
		  /* 82220878h */ case    5:  		/* mr R5, R27 */
		/* 82220878h case    5:*/		regs.R5 = regs.R27;
		/* 82220878h case    5:*/		return 0x8222087C;
		  /* 8222087Ch */ case    6:  		/* mr R4, R28 */
		/* 8222087Ch case    6:*/		regs.R4 = regs.R28;
		/* 8222087Ch case    6:*/		return 0x82220880;
		  /* 82220880h */ case    7:  		/* mr R3, R31 */
		/* 82220880h case    7:*/		regs.R3 = regs.R31;
		/* 82220880h case    7:*/		return 0x82220884;
		  /* 82220884h */ case    8:  		/* bl -2476 */
		/* 82220884h case    8:*/		regs.LR = 0x82220888; return 0x8221FED8;
		/* 82220884h case    8:*/		return 0x82220888;
		  /* 82220888h */ case    9:  		/* stw R3, <#[R31 + 60]> */
		/* 82220888h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000003C) );
		/* 82220888h case    9:*/		return 0x8222088C;
		  /* 8222088Ch */ case   10:  		/* addi R1, R1, 144 */
		/* 8222088Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8222088Ch case   10:*/		return 0x82220890;
		  /* 82220890h */ case   11:  		/* b -1635820 */
		/* 82220890h case   11:*/		return 0x820912A4;
		/* 82220890h case   11:*/		return 0x82220894;
		  /* 82220894h */ case   12:  		/* nop */
		/* 82220894h case   12:*/		cpu::op::nop();
		/* 82220894h case   12:*/		return 0x82220898;
	}
	return 0x82220898;
} // Block from 82220864h-82220898h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82220898h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220898);
		  /* 82220898h */ case    0:  		/* mfspr R12, LR */
		/* 82220898h case    0:*/		regs.R12 = regs.LR;
		/* 82220898h case    0:*/		return 0x8222089C;
		  /* 8222089Ch */ case    1:  		/* bl -1635904 */
		/* 8222089Ch case    1:*/		regs.LR = 0x822208A0; return 0x8209125C;
		/* 8222089Ch case    1:*/		return 0x822208A0;
		  /* 822208A0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 822208A0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 822208A0h case    2:*/		return 0x822208A4;
		  /* 822208A4h */ case    3:  		/* lis R11, -32253 */
		/* 822208A4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 822208A4h case    3:*/		return 0x822208A8;
		  /* 822208A8h */ case    4:  		/* lis R10, -32252 */
		/* 822208A8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 822208A8h case    4:*/		return 0x822208AC;
		  /* 822208ACh */ case    5:  		/* mr R31, R3 */
		/* 822208ACh case    5:*/		regs.R31 = regs.R3;
		/* 822208ACh case    5:*/		return 0x822208B0;
		  /* 822208B0h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 822208B0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 822208B0h case    6:*/		return 0x822208B4;
		  /* 822208B4h */ case    7:  		/* addi R30, R11, 27460 */
		/* 822208B4h case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 822208B4h case    7:*/		return 0x822208B8;
		  /* 822208B8h */ case    8:  		/* addi R29, R10, -1152 */
		/* 822208B8h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFFB80);
		/* 822208B8h case    8:*/		return 0x822208BC;
		  /* 822208BCh */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 822208BCh case    9:*/		if ( !regs.CR[6].eq ) { return 0x822208DC;  }
		/* 822208BCh case    9:*/		return 0x822208C0;
		  /* 822208C0h */ case   10:  		/* lis R11, -32252 */
		/* 822208C0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822208C0h case   10:*/		return 0x822208C4;
		  /* 822208C4h */ case   11:  		/* mr R6, R29 */
		/* 822208C4h case   11:*/		regs.R6 = regs.R29;
		/* 822208C4h case   11:*/		return 0x822208C8;
		  /* 822208C8h */ case   12:  		/* addi R5, R11, -8448 */
		/* 822208C8h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDF00);
		/* 822208C8h case   12:*/		return 0x822208CC;
		  /* 822208CCh */ case   13:  		/* mr R4, R30 */
		/* 822208CCh case   13:*/		regs.R4 = regs.R30;
		/* 822208CCh case   13:*/		return 0x822208D0;
		  /* 822208D0h */ case   14:  		/* li R7, 1002 */
		/* 822208D0h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x3EA);
		/* 822208D0h case   14:*/		return 0x822208D4;
		  /* 822208D4h */ case   15:  		/* li R3, 0 */
		/* 822208D4h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822208D4h case   15:*/		return 0x822208D8;
		  /* 822208D8h */ case   16:  		/* bl -822480 */
		/* 822208D8h case   16:*/		regs.LR = 0x822208DC; return 0x82157C08;
		/* 822208D8h case   16:*/		return 0x822208DC;
	}
	return 0x822208DC;
} // Block from 82220898h-822208DCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 822208DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822208DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822208DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822208DC);
		  /* 822208DCh */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 822208DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 822208DCh case    0:*/		return 0x822208E0;
		  /* 822208E0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 822208E0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 822208E0h case    1:*/		return 0x822208E4;
		  /* 822208E4h */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 822208E4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82220904;  }
		/* 822208E4h case    2:*/		return 0x822208E8;
		  /* 822208E8h */ case    3:  		/* lis R11, -32252 */
		/* 822208E8h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 822208E8h case    3:*/		return 0x822208EC;
		  /* 822208ECh */ case    4:  		/* mr R6, R29 */
		/* 822208ECh case    4:*/		regs.R6 = regs.R29;
		/* 822208ECh case    4:*/		return 0x822208F0;
	}
	return 0x822208F0;
} // Block from 822208DCh-822208F0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 822208F0h
// Function '?PatchCompiledShader@XGRAPHICS@@YAPAU_CP_SHADERPROGRAM_BLOCK@1@PAU_CP_COMPILED_PROGRAM@1@PAU_CS_COMPILED_SHADER@1@PAU_ABSTRACT_STATE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822208F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822208F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822208F0);
		  /* 822208F0h */ case    0:  		/* addi R5, R11, -936 */
		/* 822208F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFC58);
		/* 822208F0h case    0:*/		return 0x822208F4;
		  /* 822208F4h */ case    1:  		/* mr R4, R30 */
		/* 822208F4h case    1:*/		regs.R4 = regs.R30;
		/* 822208F4h case    1:*/		return 0x822208F8;
		  /* 822208F8h */ case    2:  		/* li R7, 1003 */
		/* 822208F8h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x3EB);
		/* 822208F8h case    2:*/		return 0x822208FC;
		  /* 822208FCh */ case    3:  		/* li R3, 0 */
		/* 822208FCh case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822208FCh case    3:*/		return 0x82220900;
		  /* 82220900h */ case    4:  		/* bl -822520 */
		/* 82220900h case    4:*/		regs.LR = 0x82220904; return 0x82157C08;
		/* 82220900h case    4:*/		return 0x82220904;
	}
	return 0x82220904;
} // Block from 822208F0h-82220904h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82220904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220904);
		  /* 82220904h */ case    0:  		/* lwz R3, <#[R31 + 48]> */
		/* 82220904h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82220904h case    0:*/		return 0x82220908;
		  /* 82220908h */ case    1:  		/* bl -798144 */
		/* 82220908h case    1:*/		regs.LR = 0x8222090C; return 0x8215DB48;
		/* 82220908h case    1:*/		return 0x8222090C;
		  /* 8222090Ch */ case    2:  		/* mr R4, R3 */
		/* 8222090Ch case    2:*/		regs.R4 = regs.R3;
		/* 8222090Ch case    2:*/		return 0x82220910;
		  /* 82220910h */ case    3:  		/* mr R3, R31 */
		/* 82220910h case    3:*/		regs.R3 = regs.R31;
		/* 82220910h case    3:*/		return 0x82220914;
		  /* 82220914h */ case    4:  		/* bl -828 */
		/* 82220914h case    4:*/		regs.LR = 0x82220918; return 0x822205D8;
		/* 82220914h case    4:*/		return 0x82220918;
		  /* 82220918h */ case    5:  		/* addi R1, R1, 112 */
		/* 82220918h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82220918h case    5:*/		return 0x8222091C;
		  /* 8222091Ch */ case    6:  		/* b -1635952 */
		/* 8222091Ch case    6:*/		return 0x820912AC;
		/* 8222091Ch case    6:*/		return 0x82220920;
	}
	return 0x82220920;
} // Block from 82220904h-82220920h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82220920h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220920);
		  /* 82220920h */ case    0:  		/* mfspr R12, LR */
		/* 82220920h case    0:*/		regs.R12 = regs.LR;
		/* 82220920h case    0:*/		return 0x82220924;
		  /* 82220924h */ case    1:  		/* bl -1636040 */
		/* 82220924h case    1:*/		regs.LR = 0x82220928; return 0x8209125C;
		/* 82220924h case    1:*/		return 0x82220928;
		  /* 82220928h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82220928h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82220928h case    2:*/		return 0x8222092C;
		  /* 8222092Ch */ case    3:  		/* lis R11, -32253 */
		/* 8222092Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8222092Ch case    3:*/		return 0x82220930;
		  /* 82220930h */ case    4:  		/* lis R10, -32252 */
		/* 82220930h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 82220930h case    4:*/		return 0x82220934;
		  /* 82220934h */ case    5:  		/* mr R31, R3 */
		/* 82220934h case    5:*/		regs.R31 = regs.R3;
		/* 82220934h case    5:*/		return 0x82220938;
		  /* 82220938h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 82220938h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82220938h case    6:*/		return 0x8222093C;
		  /* 8222093Ch */ case    7:  		/* addi R30, R11, 27460 */
		/* 8222093Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6B44);
		/* 8222093Ch case    7:*/		return 0x82220940;
		  /* 82220940h */ case    8:  		/* addi R29, R10, -1152 */
		/* 82220940h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0xFFFFFB80);
		/* 82220940h case    8:*/		return 0x82220944;
		  /* 82220944h */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 82220944h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82220964;  }
		/* 82220944h case    9:*/		return 0x82220948;
		  /* 82220948h */ case   10:  		/* lis R11, -32252 */
		/* 82220948h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82220948h case   10:*/		return 0x8222094C;
		  /* 8222094Ch */ case   11:  		/* mr R6, R29 */
		/* 8222094Ch case   11:*/		regs.R6 = regs.R29;
		/* 8222094Ch case   11:*/		return 0x82220950;
		  /* 82220950h */ case   12:  		/* addi R5, R11, -8448 */
		/* 82220950h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFDF00);
		/* 82220950h case   12:*/		return 0x82220954;
		  /* 82220954h */ case   13:  		/* mr R4, R30 */
		/* 82220954h case   13:*/		regs.R4 = regs.R30;
		/* 82220954h case   13:*/		return 0x82220958;
		  /* 82220958h */ case   14:  		/* li R7, 1032 */
		/* 82220958h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x408);
		/* 82220958h case   14:*/		return 0x8222095C;
		  /* 8222095Ch */ case   15:  		/* li R3, 0 */
		/* 8222095Ch case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8222095Ch case   15:*/		return 0x82220960;
		  /* 82220960h */ case   16:  		/* bl -822616 */
		/* 82220960h case   16:*/		regs.LR = 0x82220964; return 0x82157C08;
		/* 82220960h case   16:*/		return 0x82220964;
	}
	return 0x82220964;
} // Block from 82220920h-82220964h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82220964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220964);
		  /* 82220964h */ case    0:  		/* lwz R11, <#[R31 + 52]> */
		/* 82220964h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000034) );
		/* 82220964h case    0:*/		return 0x82220968;
		  /* 82220968h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82220968h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82220968h case    1:*/		return 0x8222096C;
		  /* 8222096Ch */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 8222096Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8222098C;  }
		/* 8222096Ch case    2:*/		return 0x82220970;
		  /* 82220970h */ case    3:  		/* lis R11, -32252 */
		/* 82220970h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82220970h case    3:*/		return 0x82220974;
		  /* 82220974h */ case    4:  		/* mr R6, R29 */
		/* 82220974h case    4:*/		regs.R6 = regs.R29;
		/* 82220974h case    4:*/		return 0x82220978;
		  /* 82220978h */ case    5:  		/* addi R5, R11, -756 */
		/* 82220978h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFFD0C);
		/* 82220978h case    5:*/		return 0x8222097C;
		  /* 8222097Ch */ case    6:  		/* mr R4, R30 */
		/* 8222097Ch case    6:*/		regs.R4 = regs.R30;
		/* 8222097Ch case    6:*/		return 0x82220980;
		  /* 82220980h */ case    7:  		/* li R7, 1033 */
		/* 82220980h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x409);
		/* 82220980h case    7:*/		return 0x82220984;
		  /* 82220984h */ case    8:  		/* li R3, 0 */
		/* 82220984h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82220984h case    8:*/		return 0x82220988;
		  /* 82220988h */ case    9:  		/* bl -822656 */
		/* 82220988h case    9:*/		regs.LR = 0x8222098C; return 0x82157C08;
		/* 82220988h case    9:*/		return 0x8222098C;
	}
	return 0x8222098C;
} // Block from 82220964h-8222098Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8222098Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8222098C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8222098C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8222098C);
		  /* 8222098Ch */ case    0:  		/* lwz R3, <#[R31 + 52]> */
		/* 8222098Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 8222098Ch case    0:*/		return 0x82220990;
		  /* 82220990h */ case    1:  		/* bl -798280 */
		/* 82220990h case    1:*/		regs.LR = 0x82220994; return 0x8215DB48;
		/* 82220990h case    1:*/		return 0x82220994;
		  /* 82220994h */ case    2:  		/* mr R4, R3 */
		/* 82220994h case    2:*/		regs.R4 = regs.R3;
		/* 82220994h case    2:*/		return 0x82220998;
		  /* 82220998h */ case    3:  		/* mr R3, R31 */
		/* 82220998h case    3:*/		regs.R3 = regs.R31;
		/* 82220998h case    3:*/		return 0x8222099C;
		  /* 8222099Ch */ case    4:  		/* bl -964 */
		/* 8222099Ch case    4:*/		regs.LR = 0x822209A0; return 0x822205D8;
		/* 8222099Ch case    4:*/		return 0x822209A0;
		  /* 822209A0h */ case    5:  		/* addi R1, R1, 112 */
		/* 822209A0h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 822209A0h case    5:*/		return 0x822209A4;
		  /* 822209A4h */ case    6:  		/* b -1636088 */
		/* 822209A4h case    6:*/		return 0x820912AC;
		/* 822209A4h case    6:*/		return 0x822209A8;
		  /* 822209A8h */ case    7:  		/* lwz R11, <#[R3 + 8]> */
		/* 822209A8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 822209A8h case    7:*/		return 0x822209AC;
		  /* 822209ACh */ case    8:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 822209ACh case    8:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 822209ACh case    8:*/		return 0x822209B0;
		  /* 822209B0h */ case    9:  		/* cmplwi CR6, R11, 32 */
		/* 822209B0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000020);
		/* 822209B0h case    9:*/		return 0x822209B4;
		  /* 822209B4h */ case   10:  		/* bc 12, CR6_LT, 16 */
		/* 822209B4h case   10:*/		if ( regs.CR[6].lt ) { return 0x822209C4;  }
		/* 822209B4h case   10:*/		return 0x822209B8;
		  /* 822209B8h */ case   11:  		/* cmplwi CR6, R11, 82 */
		/* 822209B8h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000052);
		/* 822209B8h case   11:*/		return 0x822209BC;
		  /* 822209BCh */ case   12:  		/* li R10, 1 */
		/* 822209BCh case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 822209BCh case   12:*/		return 0x822209C0;
		  /* 822209C0h */ case   13:  		/* bc 4, CR6_GT, 8 */
		/* 822209C0h case   13:*/		if ( !regs.CR[6].gt ) { return 0x822209C8;  }
		/* 822209C0h case   13:*/		return 0x822209C4;
	}
	return 0x822209C4;
} // Block from 8222098Ch-822209C4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 822209C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822209C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822209C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822209C4);
		  /* 822209C4h */ case    0:  		/* li R10, 0 */
		/* 822209C4h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 822209C4h case    0:*/		return 0x822209C8;
	}
	return 0x822209C8;
} // Block from 822209C4h-822209C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 822209C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822209C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822209C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822209C8);
		  /* 822209C8h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 822209C8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 822209C8h case    0:*/		return 0x822209CC;
		  /* 822209CCh */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 822209CCh case    1:*/		if ( regs.CR[0].eq ) { return 0x822209D8;  }
		/* 822209CCh case    1:*/		return 0x822209D0;
		  /* 822209D0h */ case    2:  		/* li R3, 1 */
		/* 822209D0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 822209D0h case    2:*/		return 0x822209D4;
		  /* 822209D4h */ case    3:  		/* bclr 20, CR0_LT */
		/* 822209D4h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 822209D4h case    3:*/		return 0x822209D8;
	}
	return 0x822209D8;
} // Block from 822209C8h-822209D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 822209D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822209D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822209D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822209D8);
		  /* 822209D8h */ case    0:  		/* cmplwi CR6, R11, 16 */
		/* 822209D8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000010);
		/* 822209D8h case    0:*/		return 0x822209DC;
		  /* 822209DCh */ case    1:  		/* bc 12, CR6_LT, 28 */
		/* 822209DCh case    1:*/		if ( regs.CR[6].lt ) { return 0x822209F8;  }
		/* 822209DCh case    1:*/		return 0x822209E0;
		  /* 822209E0h */ case    2:  		/* cmplwi CR6, R11, 18 */
		/* 822209E0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000012);
		/* 822209E0h case    2:*/		return 0x822209E4;
		  /* 822209E4h */ case    3:  		/* bc 4, CR6_GT, -20 */
		/* 822209E4h case    3:*/		if ( !regs.CR[6].gt ) { return 0x822209D0;  }
		/* 822209E4h case    3:*/		return 0x822209E8;
		  /* 822209E8h */ case    4:  		/* cmplwi CR6, R11, 19 */
		/* 822209E8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000013);
		/* 822209E8h case    4:*/		return 0x822209EC;
		  /* 822209ECh */ case    5:  		/* bc 4, CR6_GT, 12 */
		/* 822209ECh case    5:*/		if ( !regs.CR[6].gt ) { return 0x822209F8;  }
		/* 822209ECh case    5:*/		return 0x822209F0;
	}
	return 0x822209F0;
} // Block from 822209D8h-822209F0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 822209F0h
// Function '?CP_AllocFetchConst@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_CP_COMPILED_PROGRAM@1@W4IL_Shader_Type@1@W4E_FETCH_TYPE@1@IPAI3@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822209F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822209F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822209F0);
		  /* 822209F0h */ case    0:  		/* cmplwi CR6, R11, 24 */
		/* 822209F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000018);
		/* 822209F0h case    0:*/		return 0x822209F4;
		  /* 822209F4h */ case    1:  		/* bc 4, CR6_GT, -36 */
		/* 822209F4h case    1:*/		if ( !regs.CR[6].gt ) { return 0x822209D0;  }
		/* 822209F4h case    1:*/		return 0x822209F8;
	}
	return 0x822209F8;
} // Block from 822209F0h-822209F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 822209F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block822209F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x822209F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x822209F8);
		  /* 822209F8h */ case    0:  		/* li R3, 0 */
		/* 822209F8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 822209F8h case    0:*/		return 0x822209FC;
		  /* 822209FCh */ case    1:  		/* bclr 20, CR0_LT */
		/* 822209FCh case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 822209FCh case    1:*/		return 0x82220A00;
	}
	return 0x82220A00;
} // Block from 822209F8h-82220A00h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82220A00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220A00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220A00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220A00);
		  /* 82220A00h */ case    0:  		/* mfspr R12, LR */
		/* 82220A00h case    0:*/		regs.R12 = regs.LR;
		/* 82220A00h case    0:*/		return 0x82220A04;
		  /* 82220A04h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82220A04h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82220A04h case    1:*/		return 0x82220A08;
		  /* 82220A08h */ case    2:  		/* stfd FR31, <#[R1 - 16]> */
		/* 82220A08h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82220A08h case    2:*/		return 0x82220A0C;
		  /* 82220A0Ch */ case    3:  		/* stwu R1, <#[R1 - 112]> */
		/* 82220A0Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82220A0Ch case    3:*/		return 0x82220A10;
		  /* 82220A10h */ case    4:  		/* fmr FR31, FR1 */
		/* 82220A10h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 82220A10h case    4:*/		return 0x82220A14;
		  /* 82220A14h */ case    5:  		/* bl -1608156 */
		/* 82220A14h case    5:*/		regs.LR = 0x82220A18; return 0x82098038;
		/* 82220A14h case    5:*/		return 0x82220A18;
		  /* 82220A18h */ case    6:  		/* cmpwi CR6, R3, 32 */
		/* 82220A18h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000020);
		/* 82220A18h case    6:*/		return 0x82220A1C;
		  /* 82220A1Ch */ case    7:  		/* bc 12, CR6_GT, 84 */
		/* 82220A1Ch case    7:*/		if ( regs.CR[6].gt ) { return 0x82220A70;  }
		/* 82220A1Ch case    7:*/		return 0x82220A20;
		  /* 82220A20h */ case    8:  		/* bc 12, CR6_EQ, 36 */
		/* 82220A20h case    8:*/		if ( regs.CR[6].eq ) { return 0x82220A44;  }
		/* 82220A20h case    8:*/		return 0x82220A24;
		  /* 82220A24h */ case    9:  		/* cmpwi CR6, R3, 0 */
		/* 82220A24h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82220A24h case    9:*/		return 0x82220A28;
		  /* 82220A28h */ case   10:  		/* bc 4, CR6_GT, 96 */
		/* 82220A28h case   10:*/		if ( !regs.CR[6].gt ) { return 0x82220A88;  }
		/* 82220A28h case   10:*/		return 0x82220A2C;
		  /* 82220A2Ch */ case   11:  		/* cmpwi CR6, R3, 2 */
		/* 82220A2Ch case   11:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 82220A2Ch case   11:*/		return 0x82220A30;
		  /* 82220A30h */ case   12:  		/* bc 4, CR6_GT, 48 */
		/* 82220A30h case   12:*/		if ( !regs.CR[6].gt ) { return 0x82220A60;  }
		/* 82220A30h case   12:*/		return 0x82220A34;
		  /* 82220A34h */ case   13:  		/* cmpwi CR6, R3, 4 */
		/* 82220A34h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 82220A34h case   13:*/		return 0x82220A38;
		  /* 82220A38h */ case   14:  		/* bc 12, CR6_EQ, 12 */
		/* 82220A38h case   14:*/		if ( regs.CR[6].eq ) { return 0x82220A44;  }
		/* 82220A38h case   14:*/		return 0x82220A3C;
		  /* 82220A3Ch */ case   15:  		/* cmpwi CR6, R3, 16 */
		/* 82220A3Ch case   15:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000010);
		/* 82220A3Ch case   15:*/		return 0x82220A40;
		  /* 82220A40h */ case   16:  		/* bc 4, CR6_EQ, 72 */
		/* 82220A40h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82220A88;  }
		/* 82220A40h case   16:*/		return 0x82220A44;
	}
	return 0x82220A44;
} // Block from 82220A00h-82220A44h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82220A44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220A44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220A44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220A44);
		  /* 82220A44h */ case    0:  		/* lis R11, -32256 */
		/* 82220A44h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82220A44h case    0:*/		return 0x82220A48;
		  /* 82220A48h */ case    1:  		/* lfs FR1, <#[R11 + 1816]> */
		/* 82220A48h case    1:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000718) );
		/* 82220A48h case    1:*/		return 0x82220A4C;
		  /* 82220A4Ch */ case    2:  		/* addi R1, R1, 112 */
		/* 82220A4Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82220A4Ch case    2:*/		return 0x82220A50;
		  /* 82220A50h */ case    3:  		/* lwz R12, <#[R1 - 8]> */
		/* 82220A50h case    3:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82220A50h case    3:*/		return 0x82220A54;
		  /* 82220A54h */ case    4:  		/* mtspr LR, R12 */
		/* 82220A54h case    4:*/		regs.LR = regs.R12;
		/* 82220A54h case    4:*/		return 0x82220A58;
		  /* 82220A58h */ case    5:  		/* lfd FR31, <#[R1 - 16]> */
		/* 82220A58h case    5:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82220A58h case    5:*/		return 0x82220A5C;
		  /* 82220A5Ch */ case    6:  		/* bclr 20, CR0_LT */
		/* 82220A5Ch case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82220A5Ch case    6:*/		return 0x82220A60;
	}
	return 0x82220A60;
} // Block from 82220A44h-82220A60h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82220A60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220A60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220A60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220A60);
		  /* 82220A60h */ case    0:  		/* lis R11, -64 */
		/* 82220A60h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFC0);
		/* 82220A60h case    0:*/		return 0x82220A64;
		  /* 82220A64h */ case    1:  		/* stw R11, <#[R1 + 80]> */
		/* 82220A64h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82220A64h case    1:*/		return 0x82220A68;
		  /* 82220A68h */ case    2:  		/* lfs FR1, <#[R1 + 80]> */
		/* 82220A68h case    2:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000050) );
		/* 82220A68h case    2:*/		return 0x82220A6C;
		  /* 82220A6Ch */ case    3:  		/* b -32 */
		/* 82220A6Ch case    3:*/		return 0x82220A4C;
		/* 82220A6Ch case    3:*/		return 0x82220A70;
	}
	return 0x82220A70;
} // Block from 82220A60h-82220A70h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82220A70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220A70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220A70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220A70);
		  /* 82220A70h */ case    0:  		/* cmpwi CR6, R3, 64 */
		/* 82220A70h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000040);
		/* 82220A70h case    0:*/		return 0x82220A74;
		  /* 82220A74h */ case    1:  		/* bc 12, CR6_EQ, -48 */
		/* 82220A74h case    1:*/		if ( regs.CR[6].eq ) { return 0x82220A44;  }
		/* 82220A74h case    1:*/		return 0x82220A78;
		  /* 82220A78h */ case    2:  		/* cmpwi CR6, R3, 128 */
		/* 82220A78h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000080);
		/* 82220A78h case    2:*/		return 0x82220A7C;
		  /* 82220A7Ch */ case    3:  		/* bc 12, CR6_EQ, -56 */
		/* 82220A7Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82220A44;  }
		/* 82220A7Ch case    3:*/		return 0x82220A80;
		  /* 82220A80h */ case    4:  		/* cmpwi CR6, R3, 512 */
		/* 82220A80h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000200);
		/* 82220A80h case    4:*/		return 0x82220A84;
		  /* 82220A84h */ case    5:  		/* bc 12, CR6_EQ, 48 */
		/* 82220A84h case    5:*/		if ( regs.CR[6].eq ) { return 0x82220AB4;  }
		/* 82220A84h case    5:*/		return 0x82220A88;
	}
	return 0x82220A88;
} // Block from 82220A70h-82220A88h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82220A88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220A88);
		  /* 82220A88h */ case    0:  		/* lis R11, -32256 */
		/* 82220A88h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82220A88h case    0:*/		return 0x82220A8C;
		  /* 82220A8Ch */ case    1:  		/* lfs FR0, <#[R11 + 1816]> */
		/* 82220A8Ch case    1:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000718) );
		/* 82220A8Ch case    1:*/		return 0x82220A90;
		  /* 82220A90h */ case    2:  		/* fcmpu CR6, FR31, FR0 */
		/* 82220A90h case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR0);
		/* 82220A90h case    2:*/		return 0x82220A94;
		  /* 82220A94h */ case    3:  		/* bc 12, CR6_LT, 20 */
		/* 82220A94h case    3:*/		if ( regs.CR[6].lt ) { return 0x82220AA8;  }
		/* 82220A94h case    3:*/		return 0x82220A98;
		  /* 82220A98h */ case    4:  		/* lis R11, -32256 */
		/* 82220A98h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82220A98h case    4:*/		return 0x82220A9C;
		  /* 82220A9Ch */ case    5:  		/* lfs FR0, <#[R11 + 1792]> */
		/* 82220A9Ch case    5:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000700) );
		/* 82220A9Ch case    5:*/		return 0x82220AA0;
	}
	return 0x82220AA0;
} // Block from 82220A88h-82220AA0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82220AA0h
// Function '?CP_AllocStaticScalarConst@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_CP_COMPILED_PROGRAM@1@W4IL_Shader_Type@1@IW4E_IA_FLOAT_CHANNEL@1@M@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220AA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220AA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220AA0);
		  /* 82220AA0h */ case    0:  		/* fcmpu CR6, FR31, FR0 */
		/* 82220AA0h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR0);
		/* 82220AA0h case    0:*/		return 0x82220AA4;
		  /* 82220AA4h */ case    1:  		/* bc 4, CR6_GT, 8 */
		/* 82220AA4h case    1:*/		if ( !regs.CR[6].gt ) { return 0x82220AAC;  }
		/* 82220AA4h case    1:*/		return 0x82220AA8;
	}
	return 0x82220AA8;
} // Block from 82220AA0h-82220AA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82220AA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220AA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220AA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220AA8);
		  /* 82220AA8h */ case    0:  		/* fmr FR31, FR0 */
		/* 82220AA8h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR0);
		/* 82220AA8h case    0:*/		return 0x82220AAC;
	}
	return 0x82220AAC;
} // Block from 82220AA8h-82220AACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82220AACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220AAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220AAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220AAC);
		  /* 82220AACh */ case    0:  		/* fmr FR1, FR31 */
		/* 82220AACh case    0:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82220AACh case    0:*/		return 0x82220AB0;
		  /* 82220AB0h */ case    1:  		/* b -100 */
		/* 82220AB0h case    1:*/		return 0x82220A4C;
		/* 82220AB0h case    1:*/		return 0x82220AB4;
	}
	return 0x82220AB4;
} // Block from 82220AACh-82220AB4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82220AB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220AB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220AB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220AB4);
		  /* 82220AB4h */ case    0:  		/* lis R11, -32256 */
		/* 82220AB4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82220AB4h case    0:*/		return 0x82220AB8;
		  /* 82220AB8h */ case    1:  		/* lfs FR1, <#[R11 + 1792]> */
		/* 82220AB8h case    1:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000700) );
		/* 82220AB8h case    1:*/		return 0x82220ABC;
		  /* 82220ABCh */ case    2:  		/* b -112 */
		/* 82220ABCh case    2:*/		return 0x82220A4C;
		/* 82220ABCh case    2:*/		return 0x82220AC0;
	}
	return 0x82220AC0;
} // Block from 82220AB4h-82220AC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82220AC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220AC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220AC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220AC0);
		  /* 82220AC0h */ case    0:  		/* mfspr R12, LR */
		/* 82220AC0h case    0:*/		regs.R12 = regs.LR;
		/* 82220AC0h case    0:*/		return 0x82220AC4;
		  /* 82220AC4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82220AC4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82220AC4h case    1:*/		return 0x82220AC8;
		  /* 82220AC8h */ case    2:  		/* stfd FR31, <#[R1 - 16]> */
		/* 82220AC8h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82220AC8h case    2:*/		return 0x82220ACC;
		  /* 82220ACCh */ case    3:  		/* stwu R1, <#[R1 - 112]> */
		/* 82220ACCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82220ACCh case    3:*/		return 0x82220AD0;
		  /* 82220AD0h */ case    4:  		/* lis R11, -32252 */
		/* 82220AD0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82220AD0h case    4:*/		return 0x82220AD4;
		  /* 82220AD4h */ case    5:  		/* fmr FR31, FR1 */
		/* 82220AD4h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 82220AD4h case    5:*/		return 0x82220AD8;
		  /* 82220AD8h */ case    6:  		/* lfd FR0, <#[R11 - 15800]> */
		/* 82220AD8h case    6:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0xFFFFC248) );
		/* 82220AD8h case    6:*/		return 0x82220ADC;
		  /* 82220ADCh */ case    7:  		/* fcmpu CR6, FR1, FR0 */
		/* 82220ADCh case    7:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 82220ADCh case    7:*/		return 0x82220AE0;
		  /* 82220AE0h */ case    8:  		/* bc 12, CR6_LT, 20 */
		/* 82220AE0h case    8:*/		if ( regs.CR[6].lt ) { return 0x82220AF4;  }
		/* 82220AE0h case    8:*/		return 0x82220AE4;
		  /* 82220AE4h */ case    9:  		/* lis R11, 32640 */
		/* 82220AE4h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0x7F80);
		/* 82220AE4h case    9:*/		return 0x82220AE8;
		  /* 82220AE8h */ case   10:  		/* stw R11, <#[R1 + 80]> */
		/* 82220AE8h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82220AE8h case   10:*/		return 0x82220AEC;
		  /* 82220AECh */ case   11:  		/* lfs FR1, <#[R1 + 80]> */
		/* 82220AECh case   11:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000050) );
		/* 82220AECh case   11:*/		return 0x82220AF0;
		  /* 82220AF0h */ case   12:  		/* b 68 */
		/* 82220AF0h case   12:*/		return 0x82220B34;
		/* 82220AF0h case   12:*/		return 0x82220AF4;
	}
	return 0x82220AF4;
} // Block from 82220AC0h-82220AF4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82220AF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220AF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220AF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220AF4);
		  /* 82220AF4h */ case    0:  		/* fabs FR13, FR31 */
		/* 82220AF4h case    0:*/		cpu::op::fabs<0>(regs,&regs.FR13,regs.FR31);
		/* 82220AF4h case    0:*/		return 0x82220AF8;
		  /* 82220AF8h */ case    1:  		/* fcmpu CR6, FR13, FR0 */
		/* 82220AF8h case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 82220AF8h case    1:*/		return 0x82220AFC;
		  /* 82220AFCh */ case    2:  		/* bc 4, CR6_LT, 48 */
		/* 82220AFCh case    2:*/		if ( !regs.CR[6].lt ) { return 0x82220B2C;  }
		/* 82220AFCh case    2:*/		return 0x82220B00;
		  /* 82220B00h */ case    3:  		/* fmr FR1, FR31 */
		/* 82220B00h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82220B00h case    3:*/		return 0x82220B04;
		  /* 82220B04h */ case    4:  		/* bl -1608396 */
		/* 82220B04h case    4:*/		regs.LR = 0x82220B08; return 0x82098038;
		/* 82220B04h case    4:*/		return 0x82220B08;
		  /* 82220B08h */ case    5:  		/* cmpwi CR6, R3, 4 */
		/* 82220B08h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 82220B08h case    5:*/		return 0x82220B0C;
		  /* 82220B0Ch */ case    6:  		/* bc 12, CR6_EQ, 32 */
		/* 82220B0Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x82220B2C;  }
		/* 82220B0Ch case    6:*/		return 0x82220B10;
		  /* 82220B10h */ case    7:  		/* cmpwi CR6, R3, 512 */
		/* 82220B10h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000200);
		/* 82220B10h case    7:*/		return 0x82220B14;
		  /* 82220B14h */ case    8:  		/* bc 12, CR6_EQ, -48 */
		/* 82220B14h case    8:*/		if ( regs.CR[6].eq ) { return 0x82220AE4;  }
		/* 82220B14h case    8:*/		return 0x82220B18;
		  /* 82220B18h */ case    9:  		/* lis R11, -32255 */
		/* 82220B18h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82220B18h case    9:*/		return 0x82220B1C;
		  /* 82220B1Ch */ case   10:  		/* fmr FR2, FR31 */
		/* 82220B1Ch case   10:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 82220B1Ch case   10:*/		return 0x82220B20;
		  /* 82220B20h */ case   11:  		/* lfd FR1, <#[R11 - 24504]> */
		/* 82220B20h case   11:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFA048) );
		/* 82220B20h case   11:*/		return 0x82220B24;
		  /* 82220B24h */ case   12:  		/* bl -1631596 */
		/* 82220B24h case   12:*/		regs.LR = 0x82220B28; return 0x820925B8;
		/* 82220B24h case   12:*/		return 0x82220B28;
		  /* 82220B28h */ case   13:  		/* b 12 */
		/* 82220B28h case   13:*/		return 0x82220B34;
		/* 82220B28h case   13:*/		return 0x82220B2C;
	}
	return 0x82220B2C;
} // Block from 82220AF4h-82220B2Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 82220B2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220B2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220B2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220B2C);
		  /* 82220B2Ch */ case    0:  		/* lis R11, -32256 */
		/* 82220B2Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82220B2Ch case    0:*/		return 0x82220B30;
		  /* 82220B30h */ case    1:  		/* lfd FR1, <#[R11 + 1808]> */
		/* 82220B30h case    1:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000710) );
		/* 82220B30h case    1:*/		return 0x82220B34;
	}
	return 0x82220B34;
} // Block from 82220B2Ch-82220B34h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82220B34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220B34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220B34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220B34);
		  /* 82220B34h */ case    0:  		/* addi R1, R1, 112 */
		/* 82220B34h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82220B34h case    0:*/		return 0x82220B38;
		  /* 82220B38h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82220B38h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82220B38h case    1:*/		return 0x82220B3C;
		  /* 82220B3Ch */ case    2:  		/* mtspr LR, R12 */
		/* 82220B3Ch case    2:*/		regs.LR = regs.R12;
		/* 82220B3Ch case    2:*/		return 0x82220B40;
		  /* 82220B40h */ case    3:  		/* lfd FR31, <#[R1 - 16]> */
		/* 82220B40h case    3:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82220B40h case    3:*/		return 0x82220B44;
		  /* 82220B44h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82220B44h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82220B44h case    4:*/		return 0x82220B48;
	}
	return 0x82220B48;
} // Block from 82220B34h-82220B48h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82220B48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220B48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220B48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220B48);
		  /* 82220B48h */ case    0:  		/* mfspr R12, LR */
		/* 82220B48h case    0:*/		regs.R12 = regs.LR;
		/* 82220B48h case    0:*/		return 0x82220B4C;
		  /* 82220B4Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82220B4Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82220B4Ch case    1:*/		return 0x82220B50;
	}
	return 0x82220B50;
} // Block from 82220B48h-82220B50h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82220B50h
// Function '?CP_AllocExportConst@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_CP_COMPILED_PROGRAM@1@W4IL_Shader_Type@1@II@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220B50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220B50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220B50);
		  /* 82220B50h */ case    0:  		/* stfd FR31, <#[R1 - 16]> */
		/* 82220B50h case    0:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82220B50h case    0:*/		return 0x82220B54;
		  /* 82220B54h */ case    1:  		/* stwu R1, <#[R1 - 112]> */
		/* 82220B54h case    1:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82220B54h case    1:*/		return 0x82220B58;
		  /* 82220B58h */ case    2:  		/* lis R11, -32256 */
		/* 82220B58h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82220B58h case    2:*/		return 0x82220B5C;
		  /* 82220B5Ch */ case    3:  		/* fmr FR31, FR1 */
		/* 82220B5Ch case    3:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 82220B5Ch case    3:*/		return 0x82220B60;
		  /* 82220B60h */ case    4:  		/* lfd FR0, <#[R11 + 1808]> */
		/* 82220B60h case    4:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000710) );
		/* 82220B60h case    4:*/		return 0x82220B64;
		  /* 82220B64h */ case    5:  		/* fcmpu CR6, FR1, FR0 */
		/* 82220B64h case    5:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 82220B64h case    5:*/		return 0x82220B68;
		  /* 82220B68h */ case    6:  		/* bc 4, CR6_EQ, 12 */
		/* 82220B68h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82220B74;  }
		/* 82220B68h case    6:*/		return 0x82220B6C;
		  /* 82220B6Ch */ case    7:  		/* lis R11, -128 */
		/* 82220B6Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFF80);
		/* 82220B6Ch case    7:*/		return 0x82220B70;
		  /* 82220B70h */ case    8:  		/* b 80 */
		/* 82220B70h case    8:*/		return 0x82220BC0;
		/* 82220B70h case    8:*/		return 0x82220B74;
	}
	return 0x82220B74;
} // Block from 82220B50h-82220B74h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82220B74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220B74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220B74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220B74);
		  /* 82220B74h */ case    0:  		/* fcmpu CR6, FR31, FR0 */
		/* 82220B74h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR0);
		/* 82220B74h case    0:*/		return 0x82220B78;
		  /* 82220B78h */ case    1:  		/* bc 12, CR6_LT, 68 */
		/* 82220B78h case    1:*/		if ( regs.CR[6].lt ) { return 0x82220BBC;  }
		/* 82220B78h case    1:*/		return 0x82220B7C;
		  /* 82220B7Ch */ case    2:  		/* fmr FR1, FR31 */
		/* 82220B7Ch case    2:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82220B7Ch case    2:*/		return 0x82220B80;
		  /* 82220B80h */ case    3:  		/* bl -1608520 */
		/* 82220B80h case    3:*/		regs.LR = 0x82220B84; return 0x82098038;
		/* 82220B80h case    3:*/		return 0x82220B84;
		  /* 82220B84h */ case    4:  		/* cmpwi CR6, R3, 4 */
		/* 82220B84h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 82220B84h case    4:*/		return 0x82220B88;
		  /* 82220B88h */ case    5:  		/* bc 12, CR6_EQ, 52 */
		/* 82220B88h case    5:*/		if ( regs.CR[6].eq ) { return 0x82220BBC;  }
		/* 82220B88h case    5:*/		return 0x82220B8C;
		  /* 82220B8Ch */ case    6:  		/* cmpwi CR6, R3, 512 */
		/* 82220B8Ch case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000200);
		/* 82220B8Ch case    6:*/		return 0x82220B90;
		  /* 82220B90h */ case    7:  		/* bc 12, CR6_EQ, 36 */
		/* 82220B90h case    7:*/		if ( regs.CR[6].eq ) { return 0x82220BB4;  }
		/* 82220B90h case    7:*/		return 0x82220B94;
		  /* 82220B94h */ case    8:  		/* fmr FR1, FR31 */
		/* 82220B94h case    8:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82220B94h case    8:*/		return 0x82220B98;
		  /* 82220B98h */ case    9:  		/* bl -1609152 */
		/* 82220B98h case    9:*/		regs.LR = 0x82220B9C; return 0x82097DD8;
		/* 82220B98h case    9:*/		return 0x82220B9C;
		  /* 82220B9Ch */ case   10:  		/* lis R11, -32255 */
		/* 82220B9Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82220B9Ch case   10:*/		return 0x82220BA0;
		  /* 82220BA0h */ case   11:  		/* fmr FR31, FR1 */
		/* 82220BA0h case   11:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 82220BA0h case   11:*/		return 0x82220BA4;
		  /* 82220BA4h */ case   12:  		/* lfd FR1, <#[R11 - 24504]> */
		/* 82220BA4h case   12:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFA048) );
		/* 82220BA4h case   12:*/		return 0x82220BA8;
		  /* 82220BA8h */ case   13:  		/* bl -1609168 */
		/* 82220BA8h case   13:*/		regs.LR = 0x82220BAC; return 0x82097DD8;
		/* 82220BA8h case   13:*/		return 0x82220BAC;
		  /* 82220BACh */ case   14:  		/* fdiv FR1, FR31, FR1 */
		/* 82220BACh case   14:*/		cpu::op::fdiv<0>(regs,&regs.FR1,regs.FR31,regs.FR1);
		/* 82220BACh case   14:*/		return 0x82220BB0;
		  /* 82220BB0h */ case   15:  		/* b 24 */
		/* 82220BB0h case   15:*/		return 0x82220BC8;
		/* 82220BB0h case   15:*/		return 0x82220BB4;
	}
	return 0x82220BB4;
} // Block from 82220B74h-82220BB4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82220BB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220BB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220BB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220BB4);
		  /* 82220BB4h */ case    0:  		/* lis R11, 32640 */
		/* 82220BB4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x7F80);
		/* 82220BB4h case    0:*/		return 0x82220BB8;
		  /* 82220BB8h */ case    1:  		/* b 8 */
		/* 82220BB8h case    1:*/		return 0x82220BC0;
		/* 82220BB8h case    1:*/		return 0x82220BBC;
	}
	return 0x82220BBC;
} // Block from 82220BB4h-82220BBCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82220BBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220BBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220BBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220BBC);
		  /* 82220BBCh */ case    0:  		/* lis R11, -64 */
		/* 82220BBCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFC0);
		/* 82220BBCh case    0:*/		return 0x82220BC0;
	}
	return 0x82220BC0;
} // Block from 82220BBCh-82220BC0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82220BC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220BC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220BC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220BC0);
		  /* 82220BC0h */ case    0:  		/* stw R11, <#[R1 + 80]> */
		/* 82220BC0h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82220BC0h case    0:*/		return 0x82220BC4;
		  /* 82220BC4h */ case    1:  		/* lfs FR1, <#[R1 + 80]> */
		/* 82220BC4h case    1:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000050) );
		/* 82220BC4h case    1:*/		return 0x82220BC8;
	}
	return 0x82220BC8;
} // Block from 82220BC0h-82220BC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82220BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220BC8);
		  /* 82220BC8h */ case    0:  		/* addi R1, R1, 112 */
		/* 82220BC8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82220BC8h case    0:*/		return 0x82220BCC;
		  /* 82220BCCh */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82220BCCh case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82220BCCh case    1:*/		return 0x82220BD0;
		  /* 82220BD0h */ case    2:  		/* mtspr LR, R12 */
		/* 82220BD0h case    2:*/		regs.LR = regs.R12;
		/* 82220BD0h case    2:*/		return 0x82220BD4;
		  /* 82220BD4h */ case    3:  		/* lfd FR31, <#[R1 - 16]> */
		/* 82220BD4h case    3:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82220BD4h case    3:*/		return 0x82220BD8;
		  /* 82220BD8h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82220BD8h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82220BD8h case    4:*/		return 0x82220BDC;
	}
	return 0x82220BDC;
} // Block from 82220BC8h-82220BDCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 82220BDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220BDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220BDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220BDC);
		  /* 82220BDCh */ case    0:  		/* nop */
		/* 82220BDCh case    0:*/		cpu::op::nop();
		/* 82220BDCh case    0:*/		return 0x82220BE0;
	}
	return 0x82220BE0;
} // Block from 82220BDCh-82220BE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82220BE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220BE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220BE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220BE0);
		  /* 82220BE0h */ case    0:  		/* mfspr R12, LR */
		/* 82220BE0h case    0:*/		regs.R12 = regs.LR;
		/* 82220BE0h case    0:*/		return 0x82220BE4;
		  /* 82220BE4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82220BE4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82220BE4h case    1:*/		return 0x82220BE8;
		  /* 82220BE8h */ case    2:  		/* stfd FR31, <#[R1 - 16]> */
		/* 82220BE8h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82220BE8h case    2:*/		return 0x82220BEC;
		  /* 82220BECh */ case    3:  		/* stwu R1, <#[R1 - 112]> */
		/* 82220BECh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82220BECh case    3:*/		return 0x82220BF0;
	}
	return 0x82220BF0;
} // Block from 82220BE0h-82220BF0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82220BF0h
// Function '?CP_CopyPixelShader@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_CP_COMPILED_PROGRAM@1@IPAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220BF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220BF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220BF0);
		  /* 82220BF0h */ case    0:  		/* fmr FR31, FR1 */
		/* 82220BF0h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 82220BF0h case    0:*/		return 0x82220BF4;
		  /* 82220BF4h */ case    1:  		/* lis R11, -32256 */
		/* 82220BF4h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82220BF4h case    1:*/		return 0x82220BF8;
		  /* 82220BF8h */ case    2:  		/* lfd FR1, <#[R11 + 1848]> */
		/* 82220BF8h case    2:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000738) );
		/* 82220BF8h case    2:*/		return 0x82220BFC;
		  /* 82220BFCh */ case    3:  		/* fcmpu CR6, FR31, FR1 */
		/* 82220BFCh case    3:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR1);
		/* 82220BFCh case    3:*/		return 0x82220C00;
		  /* 82220C00h */ case    4:  		/* bc 12, CR6_EQ, 92 */
		/* 82220C00h case    4:*/		if ( regs.CR[6].eq ) { return 0x82220C5C;  }
		/* 82220C00h case    4:*/		return 0x82220C04;
		  /* 82220C04h */ case    5:  		/* lis R11, -32256 */
		/* 82220C04h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82220C04h case    5:*/		return 0x82220C08;
		  /* 82220C08h */ case    6:  		/* lfd FR0, <#[R11 + 1808]> */
		/* 82220C08h case    6:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000710) );
		/* 82220C08h case    6:*/		return 0x82220C0C;
		  /* 82220C0Ch */ case    7:  		/* fcmpu CR6, FR31, FR0 */
		/* 82220C0Ch case    7:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR0);
		/* 82220C0Ch case    7:*/		return 0x82220C10;
		  /* 82220C10h */ case    8:  		/* bc 4, CR6_LT, 20 */
		/* 82220C10h case    8:*/		if ( !regs.CR[6].lt ) { return 0x82220C24;  }
		/* 82220C10h case    8:*/		return 0x82220C14;
		  /* 82220C14h */ case    9:  		/* lis R11, -64 */
		/* 82220C14h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFC0);
		/* 82220C14h case    9:*/		return 0x82220C18;
		  /* 82220C18h */ case   10:  		/* stw R11, <#[R1 + 80]> */
		/* 82220C18h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82220C18h case   10:*/		return 0x82220C1C;
		  /* 82220C1Ch */ case   11:  		/* lfs FR1, <#[R1 + 80]> */
		/* 82220C1Ch case   11:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000050) );
		/* 82220C1Ch case   11:*/		return 0x82220C20;
		  /* 82220C20h */ case   12:  		/* b 60 */
		/* 82220C20h case   12:*/		return 0x82220C5C;
		/* 82220C20h case   12:*/		return 0x82220C24;
	}
	return 0x82220C24;
} // Block from 82220BF0h-82220C24h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82220C24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220C24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220C24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220C24);
		  /* 82220C24h */ case    0:  		/* fmr FR1, FR31 */
		/* 82220C24h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82220C24h case    0:*/		return 0x82220C28;
		  /* 82220C28h */ case    1:  		/* bl -1608688 */
		/* 82220C28h case    1:*/		regs.LR = 0x82220C2C; return 0x82098038;
		/* 82220C28h case    1:*/		return 0x82220C2C;
		  /* 82220C2Ch */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82220C2Ch case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82220C2Ch case    2:*/		return 0x82220C30;
		  /* 82220C30h */ case    3:  		/* bc 4, CR0_GT, 36 */
		/* 82220C30h case    3:*/		if ( !regs.CR[0].gt ) { return 0x82220C54;  }
		/* 82220C30h case    3:*/		return 0x82220C34;
		  /* 82220C34h */ case    4:  		/* cmpwi CR6, R3, 2 */
		/* 82220C34h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 82220C34h case    4:*/		return 0x82220C38;
		  /* 82220C38h */ case    5:  		/* bc 4, CR6_GT, -36 */
		/* 82220C38h case    5:*/		if ( !regs.CR[6].gt ) { return 0x82220C14;  }
		/* 82220C38h case    5:*/		return 0x82220C3C;
		  /* 82220C3Ch */ case    6:  		/* cmpwi CR6, R3, 4 */
		/* 82220C3Ch case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 82220C3Ch case    6:*/		return 0x82220C40;
		  /* 82220C40h */ case    7:  		/* bc 12, CR6_EQ, -44 */
		/* 82220C40h case    7:*/		if ( regs.CR[6].eq ) { return 0x82220C14;  }
		/* 82220C40h case    7:*/		return 0x82220C44;
		  /* 82220C44h */ case    8:  		/* cmpwi CR6, R3, 512 */
		/* 82220C44h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000200);
		/* 82220C44h case    8:*/		return 0x82220C48;
		  /* 82220C48h */ case    9:  		/* bc 4, CR6_EQ, 12 */
		/* 82220C48h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82220C54;  }
		/* 82220C48h case    9:*/		return 0x82220C4C;
		  /* 82220C4Ch */ case   10:  		/* lis R11, 32640 */
		/* 82220C4Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0x7F80);
		/* 82220C4Ch case   10:*/		return 0x82220C50;
	}
	return 0x82220C50;
} // Block from 82220C24h-82220C50h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82220C50h
// Function '?CP_CopyVertexShader@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_CP_COMPILED_PROGRAM@1@IPAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220C50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220C50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220C50);
		  /* 82220C50h */ case    0:  		/* b -56 */
		/* 82220C50h case    0:*/		return 0x82220C18;
		/* 82220C50h case    0:*/		return 0x82220C54;
	}
	return 0x82220C54;
} // Block from 82220C50h-82220C54h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82220C54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220C54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220C54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220C54);
		  /* 82220C54h */ case    0:  		/* fsqrt FR1, FR31 */
		/* 82220C54h case    0:*/		cpu::op::fsqrt<0>(regs,&regs.FR1,regs.FR31);
		/* 82220C54h case    0:*/		return 0x82220C58;
		  /* 82220C58h */ case    1:  		/* bl -409032 */
		/* 82220C58h case    1:*/		regs.LR = 0x82220C5C; return 0x821BCE90;
		/* 82220C58h case    1:*/		return 0x82220C5C;
	}
	return 0x82220C5C;
} // Block from 82220C54h-82220C5Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82220C5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220C5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220C5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220C5C);
		  /* 82220C5Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 82220C5Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82220C5Ch case    0:*/		return 0x82220C60;
		  /* 82220C60h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82220C60h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82220C60h case    1:*/		return 0x82220C64;
		  /* 82220C64h */ case    2:  		/* mtspr LR, R12 */
		/* 82220C64h case    2:*/		regs.LR = regs.R12;
		/* 82220C64h case    2:*/		return 0x82220C68;
		  /* 82220C68h */ case    3:  		/* lfd FR31, <#[R1 - 16]> */
		/* 82220C68h case    3:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82220C68h case    3:*/		return 0x82220C6C;
		  /* 82220C6Ch */ case    4:  		/* bclr 20, CR0_LT */
		/* 82220C6Ch case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82220C6Ch case    4:*/		return 0x82220C70;
	}
	return 0x82220C70;
} // Block from 82220C5Ch-82220C70h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82220C70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220C70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220C70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220C70);
		  /* 82220C70h */ case    0:  		/* mfspr R12, LR */
		/* 82220C70h case    0:*/		regs.R12 = regs.LR;
		/* 82220C70h case    0:*/		return 0x82220C74;
		  /* 82220C74h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82220C74h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82220C74h case    1:*/		return 0x82220C78;
		  /* 82220C78h */ case    2:  		/* stfd FR29, <#[R1 - 32]> */
		/* 82220C78h case    2:*/		cpu::mem::store64f( regs, regs.FR29, (uint32)(regs.R1 + 0xFFFFFFE0) );
		/* 82220C78h case    2:*/		return 0x82220C7C;
		  /* 82220C7Ch */ case    3:  		/* stfd FR30, <#[R1 - 24]> */
		/* 82220C7Ch case    3:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82220C7Ch case    3:*/		return 0x82220C80;
		  /* 82220C80h */ case    4:  		/* stfd FR31, <#[R1 - 16]> */
		/* 82220C80h case    4:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82220C80h case    4:*/		return 0x82220C84;
		  /* 82220C84h */ case    5:  		/* stwu R1, <#[R1 - 128]> */
		/* 82220C84h case    5:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82220C84h case    5:*/		return 0x82220C88;
		  /* 82220C88h */ case    6:  		/* lis R11, -32256 */
		/* 82220C88h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82220C88h case    6:*/		return 0x82220C8C;
		  /* 82220C8Ch */ case    7:  		/* fmr FR31, FR1 */
		/* 82220C8Ch case    7:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 82220C8Ch case    7:*/		return 0x82220C90;
		  /* 82220C90h */ case    8:  		/* lfd FR29, <#[R11 + 1848]> */
		/* 82220C90h case    8:*/		cpu::mem::load64f( regs, &regs.FR29, (uint32)(regs.R11 + 0x00000738) );
		/* 82220C90h case    8:*/		return 0x82220C94;
		  /* 82220C94h */ case    9:  		/* fcmpu CR6, FR1, FR29 */
		/* 82220C94h case    9:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR29);
		/* 82220C94h case    9:*/		return 0x82220C98;
		  /* 82220C98h */ case   10:  		/* bc 4, CR6_EQ, 12 */
		/* 82220C98h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82220CA4;  }
		/* 82220C98h case   10:*/		return 0x82220C9C;
		  /* 82220C9Ch */ case   11:  		/* fmr FR1, FR29 */
		/* 82220C9Ch case   11:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 82220C9Ch case   11:*/		return 0x82220CA0;
		  /* 82220CA0h */ case   12:  		/* b 128 */
		/* 82220CA0h case   12:*/		return 0x82220D20;
		/* 82220CA0h case   12:*/		return 0x82220CA4;
	}
	return 0x82220CA4;
} // Block from 82220C70h-82220CA4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82220CA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220CA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220CA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220CA4);
		  /* 82220CA4h */ case    0:  		/* lis R11, -32256 */
		/* 82220CA4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82220CA4h case    0:*/		return 0x82220CA8;
		  /* 82220CA8h */ case    1:  		/* lfd FR30, <#[R11 + 1808]> */
		/* 82220CA8h case    1:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R11 + 0x00000710) );
		/* 82220CA8h case    1:*/		return 0x82220CAC;
		  /* 82220CACh */ case    2:  		/* fcmpu CR6, FR31, FR30 */
		/* 82220CACh case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR30);
		/* 82220CACh case    2:*/		return 0x82220CB0;
	}
	return 0x82220CB0;
} // Block from 82220CA4h-82220CB0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82220CB0h
// Function '?CP_SetInterpUsage@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAU_CP_COMPILED_PROGRAM@1@W4IL_Shader_Type@1@IW4_E_INTERP_USAGE@1@IT_CS_COMPONENT_SEL@1@W4_E_INTERP_SAMPLING@1@HPAH55@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220CB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220CB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220CB0);
		  /* 82220CB0h */ case    0:  		/* bc 4, CR6_LT, 20 */
		/* 82220CB0h case    0:*/		if ( !regs.CR[6].lt ) { return 0x82220CC4;  }
		/* 82220CB0h case    0:*/		return 0x82220CB4;
		  /* 82220CB4h */ case    1:  		/* lis R11, -64 */
		/* 82220CB4h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFC0);
		/* 82220CB4h case    1:*/		return 0x82220CB8;
		  /* 82220CB8h */ case    2:  		/* stw R11, <#[R1 + 80]> */
		/* 82220CB8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82220CB8h case    2:*/		return 0x82220CBC;
		  /* 82220CBCh */ case    3:  		/* lfs FR1, <#[R1 + 80]> */
		/* 82220CBCh case    3:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000050) );
		/* 82220CBCh case    3:*/		return 0x82220CC0;
		  /* 82220CC0h */ case    4:  		/* b 96 */
		/* 82220CC0h case    4:*/		return 0x82220D20;
		/* 82220CC0h case    4:*/		return 0x82220CC4;
	}
	return 0x82220CC4;
} // Block from 82220CB0h-82220CC4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82220CC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220CC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220CC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220CC4);
		  /* 82220CC4h */ case    0:  		/* fmr FR1, FR31 */
		/* 82220CC4h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82220CC4h case    0:*/		return 0x82220CC8;
		  /* 82220CC8h */ case    1:  		/* bl -1608848 */
		/* 82220CC8h case    1:*/		regs.LR = 0x82220CCC; return 0x82098038;
		/* 82220CC8h case    1:*/		return 0x82220CCC;
		  /* 82220CCCh */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82220CCCh case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82220CCCh case    2:*/		return 0x82220CD0;
		  /* 82220CD0h */ case    3:  		/* bc 4, CR0_GT, 68 */
		/* 82220CD0h case    3:*/		if ( !regs.CR[0].gt ) { return 0x82220D14;  }
		/* 82220CD0h case    3:*/		return 0x82220CD4;
		  /* 82220CD4h */ case    4:  		/* cmpwi CR6, R3, 2 */
		/* 82220CD4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 82220CD4h case    4:*/		return 0x82220CD8;
		  /* 82220CD8h */ case    5:  		/* bc 4, CR6_GT, -36 */
		/* 82220CD8h case    5:*/		if ( !regs.CR[6].gt ) { return 0x82220CB4;  }
		/* 82220CD8h case    5:*/		return 0x82220CDC;
		  /* 82220CDCh */ case    6:  		/* cmpwi CR6, R3, 4 */
		/* 82220CDCh case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 82220CDCh case    6:*/		return 0x82220CE0;
		  /* 82220CE0h */ case    7:  		/* bc 12, CR6_EQ, -44 */
		/* 82220CE0h case    7:*/		if ( regs.CR[6].eq ) { return 0x82220CB4;  }
		/* 82220CE0h case    7:*/		return 0x82220CE4;
		  /* 82220CE4h */ case    8:  		/* cmpwi CR6, R3, 32 */
		/* 82220CE4h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000020);
		/* 82220CE4h case    8:*/		return 0x82220CE8;
		  /* 82220CE8h */ case    9:  		/* bc 12, CR6_EQ, 36 */
		/* 82220CE8h case    9:*/		if ( regs.CR[6].eq ) { return 0x82220D0C;  }
		/* 82220CE8h case    9:*/		return 0x82220CEC;
		  /* 82220CECh */ case   10:  		/* cmpwi CR6, R3, 64 */
		/* 82220CECh case   10:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000040);
		/* 82220CECh case   10:*/		return 0x82220CF0;
		  /* 82220CF0h */ case   11:  		/* bc 12, CR6_EQ, 20 */
		/* 82220CF0h case   11:*/		if ( regs.CR[6].eq ) { return 0x82220D04;  }
		/* 82220CF0h case   11:*/		return 0x82220CF4;
		  /* 82220CF4h */ case   12:  		/* cmpwi CR6, R3, 512 */
		/* 82220CF4h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000200);
		/* 82220CF4h case   12:*/		return 0x82220CF8;
		  /* 82220CF8h */ case   13:  		/* bc 4, CR6_EQ, 28 */
		/* 82220CF8h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82220D14;  }
		/* 82220CF8h case   13:*/		return 0x82220CFC;
		  /* 82220CFCh */ case   14:  		/* fmr FR1, FR30 */
		/* 82220CFCh case   14:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 82220CFCh case   14:*/		return 0x82220D00;
		  /* 82220D00h */ case   15:  		/* b 32 */
		/* 82220D00h case   15:*/		return 0x82220D20;
		/* 82220D00h case   15:*/		return 0x82220D04;
	}
	return 0x82220D04;
} // Block from 82220CC4h-82220D04h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82220D04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220D04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220D04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220D04);
		  /* 82220D04h */ case    0:  		/* lis R11, 32640 */
		/* 82220D04h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x7F80);
		/* 82220D04h case    0:*/		return 0x82220D08;
		  /* 82220D08h */ case    1:  		/* b -80 */
		/* 82220D08h case    1:*/		return 0x82220CB8;
		/* 82220D08h case    1:*/		return 0x82220D0C;
	}
	return 0x82220D0C;
} // Block from 82220D04h-82220D0Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82220D0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220D0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220D0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220D0C);
		  /* 82220D0Ch */ case    0:  		/* lis R11, -128 */
		/* 82220D0Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFF80);
		/* 82220D0Ch case    0:*/		return 0x82220D10;
		  /* 82220D10h */ case    1:  		/* b -88 */
		/* 82220D10h case    1:*/		return 0x82220CB8;
		/* 82220D10h case    1:*/		return 0x82220D14;
	}
	return 0x82220D14;
} // Block from 82220D0Ch-82220D14h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82220D14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220D14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220D14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220D14);
		  /* 82220D14h */ case    0:  		/* fsqrt FR0, FR31 */
		/* 82220D14h case    0:*/		cpu::op::fsqrt<0>(regs,&regs.FR0,regs.FR31);
		/* 82220D14h case    0:*/		return 0x82220D18;
		  /* 82220D18h */ case    1:  		/* fdiv FR1, FR29, FR0 */
		/* 82220D18h case    1:*/		cpu::op::fdiv<0>(regs,&regs.FR1,regs.FR29,regs.FR0);
		/* 82220D18h case    1:*/		return 0x82220D1C;
		  /* 82220D1Ch */ case    2:  		/* bl -409228 */
		/* 82220D1Ch case    2:*/		regs.LR = 0x82220D20; return 0x821BCE90;
		/* 82220D1Ch case    2:*/		return 0x82220D20;
	}
	return 0x82220D20;
} // Block from 82220D14h-82220D20h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82220D20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220D20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220D20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220D20);
		  /* 82220D20h */ case    0:  		/* addi R1, R1, 128 */
		/* 82220D20h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82220D20h case    0:*/		return 0x82220D24;
		  /* 82220D24h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82220D24h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82220D24h case    1:*/		return 0x82220D28;
		  /* 82220D28h */ case    2:  		/* mtspr LR, R12 */
		/* 82220D28h case    2:*/		regs.LR = regs.R12;
		/* 82220D28h case    2:*/		return 0x82220D2C;
		  /* 82220D2Ch */ case    3:  		/* lfd FR29, <#[R1 - 32]> */
		/* 82220D2Ch case    3:*/		cpu::mem::load64f( regs, &regs.FR29, (uint32)(regs.R1 + 0xFFFFFFE0) );
		/* 82220D2Ch case    3:*/		return 0x82220D30;
		  /* 82220D30h */ case    4:  		/* lfd FR30, <#[R1 - 24]> */
		/* 82220D30h case    4:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82220D30h case    4:*/		return 0x82220D34;
		  /* 82220D34h */ case    5:  		/* lfd FR31, <#[R1 - 16]> */
		/* 82220D34h case    5:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82220D34h case    5:*/		return 0x82220D38;
		  /* 82220D38h */ case    6:  		/* bclr 20, CR0_LT */
		/* 82220D38h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82220D38h case    6:*/		return 0x82220D3C;
	}
	return 0x82220D3C;
} // Block from 82220D20h-82220D3Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82220D3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220D3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220D3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220D3C);
		  /* 82220D3Ch */ case    0:  		/* nop */
		/* 82220D3Ch case    0:*/		cpu::op::nop();
		/* 82220D3Ch case    0:*/		return 0x82220D40;
	}
	return 0x82220D40;
} // Block from 82220D3Ch-82220D40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82220D40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220D40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220D40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220D40);
		  /* 82220D40h */ case    0:  		/* mfspr R12, LR */
		/* 82220D40h case    0:*/		regs.R12 = regs.LR;
		/* 82220D40h case    0:*/		return 0x82220D44;
		  /* 82220D44h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82220D44h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82220D44h case    1:*/		return 0x82220D48;
		  /* 82220D48h */ case    2:  		/* stfd FR30, <#[R1 - 24]> */
		/* 82220D48h case    2:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82220D48h case    2:*/		return 0x82220D4C;
		  /* 82220D4Ch */ case    3:  		/* stfd FR31, <#[R1 - 16]> */
		/* 82220D4Ch case    3:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82220D4Ch case    3:*/		return 0x82220D50;
		  /* 82220D50h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82220D50h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82220D50h case    4:*/		return 0x82220D54;
		  /* 82220D54h */ case    5:  		/* lis R11, -32256 */
		/* 82220D54h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82220D54h case    5:*/		return 0x82220D58;
		  /* 82220D58h */ case    6:  		/* fmr FR31, FR1 */
		/* 82220D58h case    6:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 82220D58h case    6:*/		return 0x82220D5C;
		  /* 82220D5Ch */ case    7:  		/* lfd FR30, <#[R11 + 1848]> */
		/* 82220D5Ch case    7:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R11 + 0x00000738) );
		/* 82220D5Ch case    7:*/		return 0x82220D60;
		  /* 82220D60h */ case    8:  		/* fcmpu CR6, FR1, FR30 */
		/* 82220D60h case    8:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR30);
		/* 82220D60h case    8:*/		return 0x82220D64;
		  /* 82220D64h */ case    9:  		/* bc 4, CR6_EQ, 12 */
		/* 82220D64h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82220D70;  }
		/* 82220D64h case    9:*/		return 0x82220D68;
		  /* 82220D68h */ case   10:  		/* fmr FR1, FR30 */
		/* 82220D68h case   10:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 82220D68h case   10:*/		return 0x82220D6C;
		  /* 82220D6Ch */ case   11:  		/* b 120 */
		/* 82220D6Ch case   11:*/		return 0x82220DE4;
		/* 82220D6Ch case   11:*/		return 0x82220D70;
	}
	return 0x82220D70;
} // Block from 82220D40h-82220D70h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82220D70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220D70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220D70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220D70);
		  /* 82220D70h */ case    0:  		/* fmr FR1, FR31 */
		/* 82220D70h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 82220D70h case    0:*/		return 0x82220D74;
		  /* 82220D74h */ case    1:  		/* bl -1609020 */
		/* 82220D74h case    1:*/		regs.LR = 0x82220D78; return 0x82098038;
		/* 82220D74h case    1:*/		return 0x82220D78;
		  /* 82220D78h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82220D78h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82220D78h case    2:*/		return 0x82220D7C;
		  /* 82220D7Ch */ case    3:  		/* bc 4, CR0_GT, 96 */
		/* 82220D7Ch case    3:*/		if ( !regs.CR[0].gt ) { return 0x82220DDC;  }
		/* 82220D7Ch case    3:*/		return 0x82220D80;
		  /* 82220D80h */ case    4:  		/* cmpwi CR6, R3, 2 */
		/* 82220D80h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 82220D80h case    4:*/		return 0x82220D84;
		  /* 82220D84h */ case    5:  		/* bc 4, CR6_GT, 72 */
		/* 82220D84h case    5:*/		if ( !regs.CR[6].gt ) { return 0x82220DCC;  }
		/* 82220D84h case    5:*/		return 0x82220D88;
		  /* 82220D88h */ case    6:  		/* cmpwi CR6, R3, 4 */
		/* 82220D88h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 82220D88h case    6:*/		return 0x82220D8C;
		  /* 82220D8Ch */ case    7:  		/* bc 12, CR6_EQ, 56 */
		/* 82220D8Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82220DC4;  }
		/* 82220D8Ch case    7:*/		return 0x82220D90;
		  /* 82220D90h */ case    8:  		/* cmpwi CR6, R3, 32 */
		/* 82220D90h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000020);
		/* 82220D90h case    8:*/		return 0x82220D94;
		  /* 82220D94h */ case    9:  		/* bc 12, CR6_EQ, 40 */
		/* 82220D94h case    9:*/		if ( regs.CR[6].eq ) { return 0x82220DBC;  }
		/* 82220D94h case    9:*/		return 0x82220D98;
		  /* 82220D98h */ case   10:  		/* cmpwi CR6, R3, 64 */
		/* 82220D98h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000040);
		/* 82220D98h case   10:*/		return 0x82220D9C;
		  /* 82220D9Ch */ case   11:  		/* bc 12, CR6_EQ, 24 */
		/* 82220D9Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x82220DB4;  }
		/* 82220D9Ch case   11:*/		return 0x82220DA0;
		  /* 82220DA0h */ case   12:  		/* cmpwi CR6, R3, 512 */
		/* 82220DA0h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000200);
		/* 82220DA0h case   12:*/		return 0x82220DA4;
		  /* 82220DA4h */ case   13:  		/* bc 4, CR6_EQ, 56 */
		/* 82220DA4h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82220DDC;  }
		/* 82220DA4h case   13:*/		return 0x82220DA8;
		  /* 82220DA8h */ case   14:  		/* lis R11, -32256 */
		/* 82220DA8h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82220DA8h case   14:*/		return 0x82220DAC;
		  /* 82220DACh */ case   15:  		/* lfd FR1, <#[R11 + 1808]> */
		/* 82220DACh case   15:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000710) );
		/* 82220DACh case   15:*/		return 0x82220DB0;
		  /* 82220DB0h */ case   16:  		/* b 52 */
		/* 82220DB0h case   16:*/		return 0x82220DE4;
		/* 82220DB0h case   16:*/		return 0x82220DB4;
	}
	return 0x82220DB4;
} // Block from 82220D70h-82220DB4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82220DB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220DB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220DB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220DB4);
		  /* 82220DB4h */ case    0:  		/* lis R11, 32640 */
		/* 82220DB4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x7F80);
		/* 82220DB4h case    0:*/		return 0x82220DB8;
	}
	return 0x82220DB8;
} // Block from 82220DB4h-82220DB8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82220DB8h
// Function '?CP_Create@XGRAPHICS@@YAPAU_CP_COMPILED_PROGRAM@1@PAXP6APAX0I@ZP6A?AW4_E_SSM_RETURNCODE@1@00@ZPAU_TS_TEXTURE_SERVER@1@PAU_SSM_REGISTRY@1@PAU_ORDERED_LIST_FACTORY@1@PAU_INTEGER_LIST_FACTORY@1@PAU_OBJECT_LIST_FACTORY@1@W4_E_COMPILED_PROGRAM_TYPE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220DB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220DB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220DB8);
		  /* 82220DB8h */ case    0:  		/* b 24 */
		/* 82220DB8h case    0:*/		return 0x82220DD0;
		/* 82220DB8h case    0:*/		return 0x82220DBC;
	}
	return 0x82220DBC;
} // Block from 82220DB8h-82220DBCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82220DBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220DBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220DBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220DBC);
		  /* 82220DBCh */ case    0:  		/* lis R11, -128 */
		/* 82220DBCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFF80);
		/* 82220DBCh case    0:*/		return 0x82220DC0;
		  /* 82220DC0h */ case    1:  		/* b 16 */
		/* 82220DC0h case    1:*/		return 0x82220DD0;
		/* 82220DC0h case    1:*/		return 0x82220DC4;
	}
	return 0x82220DC4;
} // Block from 82220DBCh-82220DC4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82220DC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220DC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220DC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220DC4);
		  /* 82220DC4h */ case    0:  		/* lis R11, -32768 */
		/* 82220DC4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 82220DC4h case    0:*/		return 0x82220DC8;
		  /* 82220DC8h */ case    1:  		/* b 8 */
		/* 82220DC8h case    1:*/		return 0x82220DD0;
		/* 82220DC8h case    1:*/		return 0x82220DCC;
	}
	return 0x82220DCC;
} // Block from 82220DC4h-82220DCCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82220DCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220DCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220DCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220DCC);
		  /* 82220DCCh */ case    0:  		/* lis R11, -64 */
		/* 82220DCCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFC0);
		/* 82220DCCh case    0:*/		return 0x82220DD0;
	}
	return 0x82220DD0;
} // Block from 82220DCCh-82220DD0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82220DD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220DD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220DD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220DD0);
		  /* 82220DD0h */ case    0:  		/* stw R11, <#[R1 + 80]> */
		/* 82220DD0h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82220DD0h case    0:*/		return 0x82220DD4;
		  /* 82220DD4h */ case    1:  		/* lfs FR1, <#[R1 + 80]> */
		/* 82220DD4h case    1:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000050) );
		/* 82220DD4h case    1:*/		return 0x82220DD8;
		  /* 82220DD8h */ case    2:  		/* b 12 */
		/* 82220DD8h case    2:*/		return 0x82220DE4;
		/* 82220DD8h case    2:*/		return 0x82220DDC;
	}
	return 0x82220DDC;
} // Block from 82220DD0h-82220DDCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82220DDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220DDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220DDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220DDC);
		  /* 82220DDCh */ case    0:  		/* fdiv FR1, FR30, FR31 */
		/* 82220DDCh case    0:*/		cpu::op::fdiv<0>(regs,&regs.FR1,regs.FR30,regs.FR31);
		/* 82220DDCh case    0:*/		return 0x82220DE0;
		  /* 82220DE0h */ case    1:  		/* bl -409424 */
		/* 82220DE0h case    1:*/		regs.LR = 0x82220DE4; return 0x821BCE90;
		/* 82220DE0h case    1:*/		return 0x82220DE4;
	}
	return 0x82220DE4;
} // Block from 82220DDCh-82220DE4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82220DE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220DE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220DE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220DE4);
		  /* 82220DE4h */ case    0:  		/* addi R1, R1, 112 */
		/* 82220DE4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82220DE4h case    0:*/		return 0x82220DE8;
		  /* 82220DE8h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82220DE8h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82220DE8h case    1:*/		return 0x82220DEC;
		  /* 82220DECh */ case    2:  		/* mtspr LR, R12 */
		/* 82220DECh case    2:*/		regs.LR = regs.R12;
		/* 82220DECh case    2:*/		return 0x82220DF0;
		  /* 82220DF0h */ case    3:  		/* lfd FR30, <#[R1 - 24]> */
		/* 82220DF0h case    3:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82220DF0h case    3:*/		return 0x82220DF4;
		  /* 82220DF4h */ case    4:  		/* lfd FR31, <#[R1 - 16]> */
		/* 82220DF4h case    4:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82220DF4h case    4:*/		return 0x82220DF8;
		  /* 82220DF8h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82220DF8h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82220DF8h case    5:*/		return 0x82220DFC;
	}
	return 0x82220DFC;
} // Block from 82220DE4h-82220DFCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 82220DFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220DFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220DFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220DFC);
		  /* 82220DFCh */ case    0:  		/* nop */
		/* 82220DFCh case    0:*/		cpu::op::nop();
		/* 82220DFCh case    0:*/		return 0x82220E00;
	}
	return 0x82220E00;
} // Block from 82220DFCh-82220E00h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82220E00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82220E00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82220E00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82220E00);
		  /* 82220E00h */ case    0:  		/* mfspr R12, LR */
		/* 82220E00h case    0:*/		regs.R12 = regs.LR;
		/* 82220E00h case    0:*/		return 0x82220E04;
		  /* 82220E04h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82220E04h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82220E04h case    1:*/		return 0x82220E08;
		  /* 82220E08h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82220E08h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82220E08h case    2:*/		return 0x82220E0C;
		  /* 82220E0Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82220E0Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82220E0Ch case    3:*/		return 0x82220E10;
		  /* 82220E10h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82220E10h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82220E10h case    4:*/		return 0x82220E14;
		  /* 82220E14h */ case    5:  		/* mr R30, R3 */
		/* 82220E14h case    5:*/		regs.R30 = regs.R3;
		/* 82220E14h case    5:*/		return 0x82220E18;
		  /* 82220E18h */ case    6:  		/* mr R31, R4 */
		/* 82220E18h case    6:*/		regs.R31 = regs.R4;
		/* 82220E18h case    6:*/		return 0x82220E1C;
		  /* 82220E1Ch */ case    7:  		/* b 52 */
		/* 82220E1Ch case    7:*/		return 0x82220E50;
		/* 82220E1Ch case    7:*/		return 0x82220E20;
		  /* 82220E20h */ case    8:  		/* lwz R11, <#[R30 + 4]> */
		/* 82220E20h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82220E20h case    8:*/		return 0x82220E24;
		  /* 82220E24h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 82220E24h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82220E24h case    9:*/		return 0x82220E28;
		  /* 82220E28h */ case   10:  		/* bc 12, CR6_EQ, 28 */
		/* 82220E28h case   10:*/		if ( regs.CR[6].eq ) { return 0x82220E44;  }
		/* 82220E28h case   10:*/		return 0x82220E2C;
		  /* 82220E2Ch */ case   11:  		/* cmplw CR6, R11, R31 */
		/* 82220E2Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 82220E2Ch case   11:*/		return 0x82220E30;
		  /* 82220E30h */ case   12:  		/* bc 4, CR6_LT, 44 */
		/* 82220E30h case   12:*/		if ( !regs.CR[6].lt ) { return 0x82220E5C;  }
		/* 82220E30h case   12:*/		return 0x82220E34;
		  /* 82220E34h */ case   13:  		/* li R10, 0 */
		/* 82220E34h case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82220E34h case   13:*/		return 0x82220E38;
		  /* 82220E38h */ case   14:  		/* subf R31, R11, R31 */
		/* 82220E38h case   14:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 82220E38h case   14:*/		return 0x82220E3C;
		  /* 82220E3Ch */ case   15:  		/* stw R10, <#[R30 + 4]> */
		/* 82220E3Ch case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82220E3Ch case   15:*/		return 0x82220E40;
		  /* 82220E40h */ case   16:  		/* b 16 */
		/* 82220E40h case   16:*/		return 0x82220E50;
		/* 82220E40h case   16:*/		return 0x82220E44;
	}
	return 0x82220E44;
} // Block from 82220E00h-82220E44h (17 instructions)

