#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 82080094h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080094( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080094) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080094);
		  /* 82080094h */ case    0:  		/* lwz R8, <#[R1 + 80]> */
		/* 82080094h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000050) );
		/* 82080094h case    0:*/		return 0x82080098;
		  /* 82080098h */ case    1:  		/* lwz R7, <#[R1 + 80]> */
		/* 82080098h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 82080098h case    1:*/		return 0x8208009C;
	}
	return 0x8208009C;
} // Block from 82080094h-8208009Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8208009Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208009C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208009C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208009C);
		  /* 8208009Ch */ case    0:  		/* lwz R9, <#[R31 + 376]> */
		/* 8208009Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000178) );
		/* 8208009Ch case    0:*/		return 0x820800A0;
		  /* 820800A0h */ case    1:  		/* lis R10, -32217 */
		/* 820800A0h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 820800A0h case    1:*/		return 0x820800A4;
		  /* 820800A4h */ case    2:  		/* li R5, 260 */
		/* 820800A4h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x104);
		/* 820800A4h case    2:*/		return 0x820800A8;
		  /* 820800A8h */ case    3:  		/* lwz R4, <#[R1 + 564]> */
		/* 820800A8h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000234) );
		/* 820800A8h case    3:*/		return 0x820800AC;
		  /* 820800ACh */ case    4:  		/* mullw R11, R9, R7 */
		/* 820800ACh case    4:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R9,regs.R7);
		/* 820800ACh case    4:*/		return 0x820800B0;
		  /* 820800B0h */ case    5:  		/* lwz R10, <#[R10 + 5916]> */
		/* 820800B0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000171C) );
		/* 820800B0h case    5:*/		return 0x820800B4;
		  /* 820800B4h */ case    6:  		/* addi R11, R11, 511 */
		/* 820800B4h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1FF);
		/* 820800B4h case    6:*/		return 0x820800B8;
		  /* 820800B8h */ case    7:  		/* mullw R9, R9, R8 */
		/* 820800B8h case    7:*/		cpu::op::mullw<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 820800B8h case    7:*/		return 0x820800BC;
		  /* 820800BCh */ case    8:  		/* stw R9, <#[R31 + 388]> */
		/* 820800BCh case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000184) );
		/* 820800BCh case    8:*/		return 0x820800C0;
		  /* 820800C0h */ case    9:  		/* rlwinm R11, R11, 23, 16, 31 */
		/* 820800C0h case    9:*/		cpu::op::rlwinm<0,23,16,31>(regs,&regs.R11,regs.R11);
		/* 820800C0h case    9:*/		return 0x820800C4;
		  /* 820800C4h */ case   10:  		/* addi R3, R1, 128 */
		/* 820800C4h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 820800C4h case   10:*/		return 0x820800C8;
	}
	return 0x820800C8;
} // Block from 8208009Ch-820800C8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820800C8h
// Function '?CodecShowFrame@D3D@@YAHPAVCDevice@1@KPAPAUPIX_CHUNK@@KKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820800C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820800C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820800C8);
		  /* 820800C8h */ case    0:  		/* sth R11, <#[R31 + 14]> */
		/* 820800C8h case    0:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R31 + 0x0000000E) );
		/* 820800C8h case    0:*/		return 0x820800CC;
		  /* 820800CCh */ case    1:  		/* addi R11, R11, 172 */
		/* 820800CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xAC);
		/* 820800CCh case    1:*/		return 0x820800D0;
		  /* 820800D0h */ case    2:  		/* rldicr R30, R10, 20, 63 */
		/* 820800D0h case    2:*/		cpu::op::rldicr<0,20,63>(regs,&regs.R30,regs.R10);
		/* 820800D0h case    2:*/		return 0x820800D4;
		  /* 820800D4h */ case    3:  		/* rlwinm R28, R11, 9, 0, 22 */
		/* 820800D4h case    3:*/		cpu::op::rlwinm<0,9,0,22>(regs,&regs.R28,regs.R11);
		/* 820800D4h case    3:*/		return 0x820800D8;
		  /* 820800D8h */ case    4:  		/* bl 76272 */
		/* 820800D8h case    4:*/		regs.LR = 0x820800DC; return 0x82092AC8;
		/* 820800D8h case    4:*/		return 0x820800DC;
		  /* 820800DCh */ case    5:  		/* li R27, 0 */
		/* 820800DCh case    5:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 820800DCh case    5:*/		return 0x820800E0;
		  /* 820800E0h */ case    6:  		/* addi R11, R1, 128 */
		/* 820800E0h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 820800E0h case    6:*/		return 0x820800E4;
		  /* 820800E4h */ case    7:  		/* stb R27, <#[R1 + 387]> */
		/* 820800E4h case    7:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R1 + 0x00000183) );
		/* 820800E4h case    7:*/		return 0x820800E8;
		  /* 820800E8h */ case    8:  		/* mr R10, R11 */
		/* 820800E8h case    8:*/		regs.R10 = regs.R11;
		/* 820800E8h case    8:*/		return 0x820800EC;
		  /* 820800ECh */ case    9:  		/* lbz R9, <#[R11]> */
		/* 820800ECh case    9:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 820800ECh case    9:*/		return 0x820800F0;
		  /* 820800F0h */ case   10:  		/* addi R11, R11, 1 */
		/* 820800F0h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820800F0h case   10:*/		return 0x820800F4;
		  /* 820800F4h */ case   11:  		/* cmplwi CR6, R9, 0 */
		/* 820800F4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 820800F4h case   11:*/		return 0x820800F8;
		  /* 820800F8h */ case   12:  		/* bc 4, CR6_EQ, -12 */
		/* 820800F8h case   12:*/		if ( !regs.CR[6].eq ) { return 0x820800EC;  }
		/* 820800F8h case   12:*/		return 0x820800FC;
		  /* 820800FCh */ case   13:  		/* subf R11, R10, R11 */
		/* 820800FCh case   13:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 820800FCh case   13:*/		return 0x82080100;
		  /* 82080100h */ case   14:  		/* addi R10, R1, 128 */
		/* 82080100h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 82080100h case   14:*/		return 0x82080104;
		  /* 82080104h */ case   15:  		/* addi R11, R11, -1 */
		/* 82080104h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82080104h case   15:*/		return 0x82080108;
		  /* 82080108h */ case   16:  		/* addi R9, R1, 128 */
		/* 82080108h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 82080108h case   16:*/		return 0x8208010C;
		  /* 8208010Ch */ case   17:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8208010Ch case   17:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8208010Ch case   17:*/		return 0x82080110;
		  /* 82080110h */ case   18:  		/* add R11, R11, R10 */
		/* 82080110h case   18:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82080110h case   18:*/		return 0x82080114;
		  /* 82080114h */ case   19:  		/* addi R11, R11, -1 */
		/* 82080114h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82080114h case   19:*/		return 0x82080118;
		  /* 82080118h */ case   20:  		/* cmplw CR6, R11, R9 */
		/* 82080118h case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82080118h case   20:*/		return 0x8208011C;
		  /* 8208011Ch */ case   21:  		/* bc 12, CR6_LT, 32 */
		/* 8208011Ch case   21:*/		if ( regs.CR[6].lt ) { return 0x8208013C;  }
		/* 8208011Ch case   21:*/		return 0x82080120;
		  /* 82080120h */ case   22:  		/* lbz R10, <#[R11]> */
		/* 82080120h case   22:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82080120h case   22:*/		return 0x82080124;
		  /* 82080124h */ case   23:  		/* cmplwi CR6, R10, 92 */
		/* 82080124h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000005C);
		/* 82080124h case   23:*/		return 0x82080128;
		  /* 82080128h */ case   24:  		/* bc 12, CR6_EQ, 20 */
		/* 82080128h case   24:*/		if ( regs.CR[6].eq ) { return 0x8208013C;  }
		/* 82080128h case   24:*/		return 0x8208012C;
		  /* 8208012Ch */ case   25:  		/* addi R11, R11, -1 */
		/* 8208012Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8208012Ch case   25:*/		return 0x82080130;
		  /* 82080130h */ case   26:  		/* addi R10, R1, 128 */
		/* 82080130h case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 82080130h case   26:*/		return 0x82080134;
		  /* 82080134h */ case   27:  		/* cmplw CR6, R11, R10 */
		/* 82080134h case   27:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82080134h case   27:*/		return 0x82080138;
		  /* 82080138h */ case   28:  		/* bc 4, CR6_LT, -24 */
		/* 82080138h case   28:*/		if ( !regs.CR[6].lt ) { return 0x82080120;  }
		/* 82080138h case   28:*/		return 0x8208013C;
	}
	return 0x8208013C;
} // Block from 820800C8h-8208013Ch (29 instructions)

//////////////////////////////////////////////////////
// Block at 8208013Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208013C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208013C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208013C);
		  /* 8208013Ch */ case    0:  		/* stb R27, <#[R11 + 1]> */
		/* 8208013Ch case    0:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R11 + 0x00000001) );
		/* 8208013Ch case    0:*/		return 0x82080140;
		  /* 82080140h */ case    1:  		/* li R6, 0 */
		/* 82080140h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82080140h case    1:*/		return 0x82080144;
		  /* 82080144h */ case    2:  		/* li R5, 0 */
		/* 82080144h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82080144h case    2:*/		return 0x82080148;
		  /* 82080148h */ case    3:  		/* addi R4, R1, 96 */
		/* 82080148h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 82080148h case    3:*/		return 0x8208014C;
		  /* 8208014Ch */ case    4:  		/* addi R3, R1, 128 */
		/* 8208014Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 8208014Ch case    4:*/		return 0x82080150;
		  /* 82080150h */ case    5:  		/* bl 34216 */
		/* 82080150h case    5:*/		regs.LR = 0x82080154; return 0x820886F8;
		/* 82080150h case    5:*/		return 0x82080154;
		  /* 82080154h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 82080154h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82080154h case    6:*/		return 0x82080158;
		  /* 82080158h */ case    7:  		/* bc 12, CR0_EQ, 48 */
		/* 82080158h case    7:*/		if ( regs.CR[0].eq ) { return 0x82080188;  }
		/* 82080158h case    7:*/		return 0x8208015C;
		  /* 8208015Ch */ case    8:  		/* lis R10, 640 */
		/* 8208015Ch case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0x280);
		/* 8208015Ch case    8:*/		return 0x82080160;
		  /* 82080160h */ case    9:  		/* ld R11, <#[R1 + 96]> */
		/* 82080160h case    9:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 82080160h case    9:*/		return 0x82080164;
		  /* 82080164h */ case   10:  		/* add R9, R30, R10 */
		/* 82080164h case   10:*/		cpu::op::add<0>(regs,&regs.R9,regs.R30,regs.R10);
		/* 82080164h case   10:*/		return 0x82080168;
		  /* 82080168h */ case   11:  		/* cmpld CR6, R11, R9 */
		/* 82080168h case   11:*/		cpu::op::cmpld<6>(regs,regs.R11,regs.R9);
		/* 82080168h case   11:*/		return 0x8208016C;
		  /* 8208016Ch */ case   12:  		/* bc 4, CR6_LT, 28 */
		/* 8208016Ch case   12:*/		if ( !regs.CR[6].lt ) { return 0x82080188;  }
		/* 8208016Ch case   12:*/		return 0x82080170;
		  /* 82080170h */ case   13:  		/* cmpld CR6, R11, R10 */
		/* 82080170h case   13:*/		cpu::op::cmpld<6>(regs,regs.R11,regs.R10);
		/* 82080170h case   13:*/		return 0x82080174;
		  /* 82080174h */ case   14:  		/* bc 4, CR6_GT, 16 */
		/* 82080174h case   14:*/		if ( !regs.CR[6].gt ) { return 0x82080184;  }
		/* 82080174h case   14:*/		return 0x82080178;
		  /* 82080178h */ case   15:  		/* lis R10, -640 */
		/* 82080178h case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFD80);
		/* 82080178h case   15:*/		return 0x8208017C;
		  /* 8208017Ch */ case   16:  		/* add R30, R11, R10 */
		/* 8208017Ch case   16:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R10);
		/* 8208017Ch case   16:*/		return 0x82080180;
		  /* 82080180h */ case   17:  		/* b 8 */
		/* 82080180h case   17:*/		return 0x82080188;
		/* 82080180h case   17:*/		return 0x82080184;
	}
	return 0x82080184;
} // Block from 8208013Ch-82080184h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82080184h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080184( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080184) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080184);
		  /* 82080184h */ case    0:  		/* mr R30, R27 */
		/* 82080184h case    0:*/		regs.R30 = regs.R27;
		/* 82080184h case    0:*/		return 0x82080188;
	}
	return 0x82080188;
} // Block from 82080184h-82080188h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82080188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080188);
		  /* 82080188h */ case    0:  		/* addi R11, R28, 2048 */
		/* 82080188h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x800);
		/* 82080188h case    0:*/		return 0x8208018C;
		  /* 8208018Ch */ case    1:  		/* rldicl R11, R11, 0, 32 */
		/* 8208018Ch case    1:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R11);
		/* 8208018Ch case    1:*/		return 0x82080190;
		  /* 82080190h */ case    2:  		/* cmpld CR6, R11, R30 */
		/* 82080190h case    2:*/		cpu::op::cmpld<6>(regs,regs.R11,regs.R30);
		/* 82080190h case    2:*/		return 0x82080194;
		  /* 82080194h */ case    3:  		/* bc 4, CR6_GT, 16 */
		/* 82080194h case    3:*/		if ( !regs.CR[6].gt ) { return 0x820801A4;  }
		/* 82080194h case    3:*/		return 0x82080198;
		  /* 82080198h */ case    4:  		/* lis R3, -32768 */
		/* 82080198h case    4:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 82080198h case    4:*/		return 0x8208019C;
		  /* 8208019Ch */ case    5:  		/* ori R3, R3, 16389 */
		/* 8208019Ch case    5:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8208019Ch case    5:*/		return 0x820801A0;
		  /* 820801A0h */ case    6:  		/* b 304 */
		/* 820801A0h case    6:*/		return 0x820802D0;
		/* 820801A0h case    6:*/		return 0x820801A4;
	}
	return 0x820801A4;
} // Block from 82080188h-820801A4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820801A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820801A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820801A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820801A4);
		  /* 820801A4h */ case    0:  		/* lis R11, -17 */
		/* 820801A4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFEF);
		/* 820801A4h case    0:*/		return 0x820801A8;
		  /* 820801A8h */ case    1:  		/* lwz R9, <#[R31 + 596]> */
		/* 820801A8h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000254) );
		/* 820801A8h case    1:*/		return 0x820801AC;
		  /* 820801ACh */ case    2:  		/* li R10, 0 */
		/* 820801ACh case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820801ACh case    2:*/		return 0x820801B0;
		  /* 820801B0h */ case    3:  		/* ori R11, R11, 65535 */
		/* 820801B0h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xFFFF);
		/* 820801B0h case    3:*/		return 0x820801B4;
		  /* 820801B4h */ case    4:  		/* oris R8, R10, 65520 */
		/* 820801B4h case    4:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R10,0xFFF0);
		/* 820801B4h case    4:*/		return 0x820801B8;
		  /* 820801B8h */ case    5:  		/* rldicl R11, R11, 0, 32 */
		/* 820801B8h case    5:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R11);
		/* 820801B8h case    5:*/		return 0x820801BC;
		  /* 820801BCh */ case    6:  		/* rlwinm R10, R30, 0, 0, 31 */
		/* 820801BCh case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R30);
		/* 820801BCh case    6:*/		return 0x820801C0;
		  /* 820801C0h */ case    7:  		/* add R11, R30, R11 */
		/* 820801C0h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 820801C0h case    7:*/		return 0x820801C4;
		  /* 820801C4h */ case    8:  		/* mr R29, R27 */
		/* 820801C4h case    8:*/		regs.R29 = regs.R27;
		/* 820801C4h case    8:*/		return 0x820801C8;
		  /* 820801C8h */ case    9:  		/* divdu R11, R11, R8 */
		/* 820801C8h case    9:*/		cpu::op::divdu<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 820801C8h case    9:*/		return 0x820801CC;
		  /* 820801CCh */ case   10:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 820801CCh case   10:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 820801CCh case   10:*/		return 0x820801D0;
		  /* 820801D0h */ case   11:  		/* rlwimi R9, R11, 14, 12, 17 */
		/* 820801D0h case   11:*/		cpu::op::rlwimi<0,14,12,17>(regs,&regs.R9,regs.R11);
		/* 820801D0h case   11:*/		return 0x820801D4;
		  /* 820801D4h */ case   12:  		/* rlwinm R11, R9, 18, 26, 31 */
		/* 820801D4h case   12:*/		cpu::op::rlwinm<0,18,26,31>(regs,&regs.R11,regs.R9);
		/* 820801D4h case   12:*/		return 0x820801D8;
		  /* 820801D8h */ case   13:  		/* stw R9, <#[R31 + 596]> */
		/* 820801D8h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000254) );
		/* 820801D8h case   13:*/		return 0x820801DC;
		  /* 820801DCh */ case   14:  		/* addi R11, R11, -1 */
		/* 820801DCh case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820801DCh case   14:*/		return 0x820801E0;
		  /* 820801E0h */ case   15:  		/* rlwinm R11, R11, 20, 0, 11 */
		/* 820801E0h case   15:*/		cpu::op::rlwinm<0,20,0,11>(regs,&regs.R11,regs.R11);
		/* 820801E0h case   15:*/		return 0x820801E4;
		  /* 820801E4h */ case   16:  		/* add R11, R11, R10 */
		/* 820801E4h case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 820801E4h case   16:*/		return 0x820801E8;
		  /* 820801E8h */ case   17:  		/* stw R11, <#[R31 + 384]> */
		/* 820801E8h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000180) );
		/* 820801E8h case   17:*/		return 0x820801EC;
		  /* 820801ECh */ case   18:  		/* cmplwi CR6, R29, 0 */
		/* 820801ECh case   18:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820801ECh case   18:*/		return 0x820801F0;
		  /* 820801F0h */ case   19:  		/* bc 12, CR6_EQ, 24 */
		/* 820801F0h case   19:*/		if ( regs.CR[6].eq ) { return 0x82080208;  }
		/* 820801F0h case   19:*/		return 0x820801F4;
		  /* 820801F4h */ case   20:  		/* lwz R11, <#[R31 + 612]> */
		/* 820801F4h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000264) );
		/* 820801F4h case   20:*/		return 0x820801F8;
		  /* 820801F8h */ case   21:  		/* mr R4, R27 */
		/* 820801F8h case   21:*/		regs.R4 = regs.R27;
		/* 820801F8h case   21:*/		return 0x820801FC;
		  /* 820801FCh */ case   22:  		/* srawi R11, R11, 30 */
		/* 820801FCh case   22:*/		cpu::op::srawi<0,30>(regs,&regs.R11,regs.R11);
		/* 820801FCh case   22:*/		return 0x82080200;
		  /* 82080200h */ case   23:  		/* cmpwi CR6, R11, 2 */
		/* 82080200h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 82080200h case   23:*/		return 0x82080204;
		  /* 82080204h */ case   24:  		/* bc 12, CR6_EQ, 8 */
		/* 82080204h case   24:*/		if ( regs.CR[6].eq ) { return 0x8208020C;  }
		/* 82080204h case   24:*/		return 0x82080208;
	}
	return 0x82080208;
} // Block from 820801A4h-82080208h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82080208h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080208);
		  /* 82080208h */ case    0:  		/* lwz R4, <#[R31 + 616]> */
		/* 82080208h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000268) );
		/* 82080208h case    0:*/		return 0x8208020C;
	}
	return 0x8208020C;
} // Block from 82080208h-8208020Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8208020Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208020C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208020C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208020C);
		  /* 8208020Ch */ case    0:  		/* rlwinm R11, R29, 2, 0, 29 */
		/* 8208020Ch case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R29);
		/* 8208020Ch case    0:*/		return 0x82080210;
		  /* 82080210h */ case    1:  		/* addi R6, R1, 80 */
		/* 82080210h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82080210h case    1:*/		return 0x82080214;
		  /* 82080214h */ case    2:  		/* add R30, R11, R31 */
		/* 82080214h case    2:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R31);
		/* 82080214h case    2:*/		return 0x82080218;
		  /* 82080218h */ case    3:  		/* mr R3, R28 */
		/* 82080218h case    3:*/		regs.R3 = regs.R28;
		/* 82080218h case    3:*/		return 0x8208021C;
		  /* 8208021Ch */ case    4:  		/* mr R5, R30 */
		/* 8208021Ch case    4:*/		regs.R5 = regs.R30;
		/* 8208021Ch case    4:*/		return 0x82080220;
		  /* 82080220h */ case    5:  		/* bl -2024 */
		/* 82080220h case    5:*/		regs.LR = 0x82080224; return 0x8207FA38;
		/* 82080220h case    5:*/		return 0x82080224;
		  /* 82080224h */ case    6:  		/* lwz R11, <#[R30]> */
		/* 82080224h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82080224h case    6:*/		return 0x82080228;
		  /* 82080228h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82080228h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82080228h case    7:*/		return 0x8208022C;
		  /* 8208022Ch */ case    8:  		/* bc 12, CR6_EQ, 156 */
		/* 8208022Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x820802C8;  }
		/* 8208022Ch case    8:*/		return 0x82080230;
		  /* 82080230h */ case    9:  		/* lwz R11, <#[R31 + 612]> */
		/* 82080230h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000264) );
		/* 82080230h case    9:*/		return 0x82080234;
		  /* 82080234h */ case   10:  		/* cmplwi CR6, R29, 0 */
		/* 82080234h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82080234h case   10:*/		return 0x82080238;
		  /* 82080238h */ case   11:  		/* lwz R10, <#[R1 + 80]> */
		/* 82080238h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82080238h case   11:*/		return 0x8208023C;
		  /* 8208023Ch */ case   12:  		/* bc 4, CR6_EQ, 12 */
		/* 8208023Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x82080248;  }
		/* 8208023Ch case   12:*/		return 0x82080240;
		  /* 82080240h */ case   13:  		/* rlwimi R11, R10, 30, 0, 1 */
		/* 82080240h case   13:*/		cpu::op::rlwimi<0,30,0,1>(regs,&regs.R11,regs.R10);
		/* 82080240h case   13:*/		return 0x82080244;
		  /* 82080244h */ case   14:  		/* b 8 */
		/* 82080244h case   14:*/		return 0x8208024C;
		/* 82080244h case   14:*/		return 0x82080248;
	}
	return 0x82080248;
} // Block from 8208020Ch-82080248h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82080248h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080248( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080248) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080248);
		  /* 82080248h */ case    0:  		/* rlwimi R11, R10, 28, 2, 3 */
		/* 82080248h case    0:*/		cpu::op::rlwimi<0,28,2,3>(regs,&regs.R11,regs.R10);
		/* 82080248h case    0:*/		return 0x8208024C;
	}
	return 0x8208024C;
} // Block from 82080248h-8208024Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8208024Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208024C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208024C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208024C);
		  /* 8208024Ch */ case    0:  		/* addi R29, R29, 1 */
		/* 8208024Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8208024Ch case    0:*/		return 0x82080250;
		  /* 82080250h */ case    1:  		/* stw R11, <#[R31 + 612]> */
		/* 82080250h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000264) );
		/* 82080250h case    1:*/		return 0x82080254;
		  /* 82080254h */ case    2:  		/* cmplwi CR6, R29, 2 */
		/* 82080254h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000002);
		/* 82080254h case    2:*/		return 0x82080258;
		  /* 82080258h */ case    3:  		/* bc 12, CR6_LT, -108 */
		/* 82080258h case    3:*/		if ( regs.CR[6].lt ) { return 0x820801EC;  }
		/* 82080258h case    3:*/		return 0x8208025C;
		  /* 8208025Ch */ case    4:  		/* li R8, 4096 */
		/* 8208025Ch case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x1000);
		/* 8208025Ch case    4:*/		return 0x82080260;
		  /* 82080260h */ case    5:  		/* li R7, -1 */
		/* 82080260h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0xFFFFFFFF);
		/* 82080260h case    5:*/		return 0x82080264;
		  /* 82080264h */ case    6:  		/* li R6, 0 */
		/* 82080264h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82080264h case    6:*/		return 0x82080268;
		  /* 82080268h */ case    7:  		/* li R5, 4 */
		/* 82080268h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82080268h case    7:*/		return 0x8208026C;
		  /* 8208026Ch */ case    8:  		/* li R4, 1536 */
		/* 8208026Ch case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x600);
		/* 8208026Ch case    8:*/		return 0x82080270;
		  /* 82080270h */ case    9:  		/* li R3, 2 */
		/* 82080270h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x2);
		/* 82080270h case    9:*/		return 0x82080274;
		  /* 82080274h */ case   10:  		/* bl 2019156 */
		/* 82080274h case   10:*/		regs.LR = 0x82080278; return 0x8226D1C8;
		/* 82080274h case   10:*/		return 0x82080278;
		  /* 82080278h */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 82080278h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82080278h case   11:*/		return 0x8208027C;
		  /* 8208027Ch */ case   12:  		/* stw R3, <#[R31 + 592]> */
		/* 8208027Ch case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000250) );
		/* 8208027Ch case   12:*/		return 0x82080280;
		  /* 82080280h */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 82080280h case   13:*/		if ( regs.CR[0].eq ) { return 0x82080290;  }
		/* 82080280h case   13:*/		return 0x82080284;
		  /* 82080284h */ case   14:  		/* lwz R11, <#[R31 + 612]> */
		/* 82080284h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000264) );
		/* 82080284h case   14:*/		return 0x82080288;
		  /* 82080288h */ case   15:  		/* rlwinm R11, R11, 0, 5, 3 */
		/* 82080288h case   15:*/		cpu::op::rlwinm<0,0,5,3>(regs,&regs.R11,regs.R11);
		/* 82080288h case   15:*/		return 0x8208028C;
		  /* 8208028Ch */ case   16:  		/* b 36 */
		/* 8208028Ch case   16:*/		return 0x820802B0;
		/* 8208028Ch case   16:*/		return 0x82080290;
	}
	return 0x82080290;
} // Block from 8208024Ch-82080290h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82080290h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080290);
		  /* 82080290h */ case    0:  		/* lis R4, 9344 */
		/* 82080290h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2480);
		/* 82080290h case    0:*/		return 0x82080294;
		  /* 82080294h */ case    1:  		/* li R3, 1536 */
		/* 82080294h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x600);
		/* 82080294h case    1:*/		return 0x82080298;
		  /* 82080298h */ case    2:  		/* bl 32616 */
		/* 82080298h case    2:*/		regs.LR = 0x8208029C; return 0x82088200;
		/* 82080298h case    2:*/		return 0x8208029C;
		  /* 8208029Ch */ case    3:  		/* stw R3, <#[R31 + 592]> */
		/* 8208029Ch case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000250) );
		/* 8208029Ch case    3:*/		return 0x820802A0;
		  /* 820802A0h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 820802A0h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820802A0h case    4:*/		return 0x820802A4;
		  /* 820802A4h */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 820802A4h case    5:*/		if ( regs.CR[0].eq ) { return 0x820802C8;  }
		/* 820802A4h case    5:*/		return 0x820802A8;
		  /* 820802A8h */ case    6:  		/* lwz R11, <#[R31 + 612]> */
		/* 820802A8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000264) );
		/* 820802A8h case    6:*/		return 0x820802AC;
		  /* 820802ACh */ case    7:  		/* oris R11, R11, 2048 */
		/* 820802ACh case    7:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x800);
		/* 820802ACh case    7:*/		return 0x820802B0;
	}
	return 0x820802B0;
} // Block from 82080290h-820802B0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820802B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820802B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820802B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820802B0);
		  /* 820802B0h */ case    0:  		/* stw R11, <#[R31 + 612]> */
		/* 820802B0h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000264) );
		/* 820802B0h case    0:*/		return 0x820802B4;
		  /* 820802B4h */ case    1:  		/* li R3, 0 */
		/* 820802B4h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820802B4h case    1:*/		return 0x820802B8;
		  /* 820802B8h */ case    2:  		/* lbz R11, <#[R31 + 608]> */
		/* 820802B8h case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000260) );
		/* 820802B8h case    2:*/		return 0x820802BC;
		  /* 820802BCh */ case    3:  		/* ori R11, R11, 16 */
		/* 820802BCh case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x10);
		/* 820802BCh case    3:*/		return 0x820802C0;
		  /* 820802C0h */ case    4:  		/* stb R11, <#[R31 + 608]> */
		/* 820802C0h case    4:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00000260) );
		/* 820802C0h case    4:*/		return 0x820802C4;
		  /* 820802C4h */ case    5:  		/* b 12 */
		/* 820802C4h case    5:*/		return 0x820802D0;
		/* 820802C4h case    5:*/		return 0x820802C8;
	}
	return 0x820802C8;
} // Block from 820802B0h-820802C8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820802C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820802C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820802C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820802C8);
		  /* 820802C8h */ case    0:  		/* lis R3, -32761 */
		/* 820802C8h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 820802C8h case    0:*/		return 0x820802CC;
		  /* 820802CCh */ case    1:  		/* ori R3, R3, 14 */
		/* 820802CCh case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 820802CCh case    1:*/		return 0x820802D0;
	}
	return 0x820802D0;
} // Block from 820802C8h-820802D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820802D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820802D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820802D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820802D0);
		  /* 820802D0h */ case    0:  		/* addi R1, R1, 528 */
		/* 820802D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x210);
		/* 820802D0h case    0:*/		return 0x820802D4;
		  /* 820802D4h */ case    1:  		/* b 69544 */
		/* 820802D4h case    1:*/		return 0x8209127C;
		/* 820802D4h case    1:*/		return 0x820802D8;
		  /* 820802D8h */ case    2:  		/* lhz R11, <#[R3 + 14]> */
		/* 820802D8h case    2:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000E) );
		/* 820802D8h case    2:*/		return 0x820802DC;
		  /* 820802DCh */ case    3:  		/* lwz R8, <#[R3 + 596]> */
		/* 820802DCh case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000254) );
		/* 820802DCh case    3:*/		return 0x820802E0;
		  /* 820802E0h */ case    4:  		/* addi R10, R11, 172 */
		/* 820802E0h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xAC);
		/* 820802E0h case    4:*/		return 0x820802E4;
		  /* 820802E4h */ case    5:  		/* lwz R11, <#[R3 + 380]> */
		/* 820802E4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000017C) );
		/* 820802E4h case    5:*/		return 0x820802E8;
		  /* 820802E8h */ case    6:  		/* rlwinm R9, R8, 18, 26, 31 */
		/* 820802E8h case    6:*/		cpu::op::rlwinm<0,18,26,31>(regs,&regs.R9,regs.R8);
		/* 820802E8h case    6:*/		return 0x820802EC;
		  /* 820802ECh */ case    7:  		/* add R11, R4, R11 */
		/* 820802ECh case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R4,regs.R11);
		/* 820802ECh case    7:*/		return 0x820802F0;
		  /* 820802F0h */ case    8:  		/* rlwinm R10, R10, 9, 0, 22 */
		/* 820802F0h case    8:*/		cpu::op::rlwinm<0,9,0,22>(regs,&regs.R10,regs.R10);
		/* 820802F0h case    8:*/		return 0x820802F4;
		  /* 820802F4h */ case    9:  		/* rlwinm R8, R8, 12, 26, 31 */
		/* 820802F4h case    9:*/		cpu::op::rlwinm<0,12,26,31>(regs,&regs.R8,regs.R8);
		/* 820802F4h case    9:*/		return 0x820802F8;
		  /* 820802F8h */ case   10:  		/* stw R11, <#[R3 + 380]> */
		/* 820802F8h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000017C) );
		/* 820802F8h case   10:*/		return 0x820802FC;
		  /* 820802FCh */ case   11:  		/* addi R9, R9, -1 */
		/* 820802FCh case   11:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 820802FCh case   11:*/		return 0x82080300;
		  /* 82080300h */ case   12:  		/* add R10, R10, R11 */
		/* 82080300h case   12:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82080300h case   12:*/		return 0x82080304;
		  /* 82080304h */ case   13:  		/* cmplw CR6, R8, R9 */
		/* 82080304h case   13:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 82080304h case   13:*/		return 0x82080308;
		  /* 82080308h */ case   14:  		/* bc 4, CR6_EQ, 12 */
		/* 82080308h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82080314;  }
		/* 82080308h case   14:*/		return 0x8208030C;
		  /* 8208030Ch */ case   15:  		/* lwz R9, <#[R3 + 384]> */
		/* 8208030Ch case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000180) );
		/* 8208030Ch case   15:*/		return 0x82080310;
		  /* 82080310h */ case   16:  		/* b 8 */
		/* 82080310h case   16:*/		return 0x82080318;
		/* 82080310h case   16:*/		return 0x82080314;
	}
	return 0x82080314;
} // Block from 820802D0h-82080314h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82080314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080314);
		  /* 82080314h */ case    0:  		/* lis R9, -16 */
		/* 82080314h case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFFFFF0);
		/* 82080314h case    0:*/		return 0x82080318;
	}
	return 0x82080318;
} // Block from 82080314h-82080318h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82080318h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080318);
		  /* 82080318h */ case    0:  		/* cmplw CR6, R10, R11 */
		/* 82080318h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82080318h case    0:*/		return 0x8208031C;
		  /* 8208031Ch */ case    1:  		/* bc 12, CR6_LT, 20 */
		/* 8208031Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x82080330;  }
		/* 8208031Ch case    1:*/		return 0x82080320;
		  /* 82080320h */ case    2:  		/* cmplw CR6, R10, R9 */
		/* 82080320h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82080320h case    2:*/		return 0x82080324;
		  /* 82080324h */ case    3:  		/* bclr 4, CR6_GT */
		/* 82080324h case    3:*/		if ( !regs.CR[6].gt ) { return (uint32)regs.LR; }
		/* 82080324h case    3:*/		return 0x82080328;
	}
	return 0x82080328;
} // Block from 82080318h-82080328h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82080328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080328);
		  /* 82080328h */ case    0:  		/* cmplwi CR6, R9, 0 */
		/* 82080328h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82080328h case    0:*/		return 0x8208032C;
		  /* 8208032Ch */ case    1:  		/* bclr 12, CR6_EQ */
		/* 8208032Ch case    1:*/		if ( regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 8208032Ch case    1:*/		return 0x82080330;
	}
	return 0x82080330;
} // Block from 82080328h-82080330h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82080330h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080330( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080330) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080330);
		  /* 82080330h */ case    0:  		/* addi R10, R8, 46 */
		/* 82080330h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0x2E);
		/* 82080330h case    0:*/		return 0x82080334;
		  /* 82080334h */ case    1:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82080334h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82080334h case    1:*/		return 0x82080338;
		  /* 82080338h */ case    2:  		/* stwx R11, <#[R10 + R3]> */
		/* 82080338h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82080338h case    2:*/		return 0x8208033C;
		  /* 8208033Ch */ case    3:  		/* lwz R10, <#[R3 + 596]> */
		/* 8208033Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000254) );
		/* 8208033Ch case    3:*/		return 0x82080340;
		  /* 82080340h */ case    4:  		/* rlwinm R11, R10, 12, 26, 31 */
		/* 82080340h case    4:*/		cpu::op::rlwinm<0,12,26,31>(regs,&regs.R11,regs.R10);
		/* 82080340h case    4:*/		return 0x82080344;
		  /* 82080344h */ case    5:  		/* rlwinm R9, R10, 18, 26, 31 */
		/* 82080344h case    5:*/		cpu::op::rlwinm<0,18,26,31>(regs,&regs.R9,regs.R10);
		/* 82080344h case    5:*/		return 0x82080348;
		  /* 82080348h */ case    6:  		/* addi R11, R11, 1 */
		/* 82080348h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82080348h case    6:*/		return 0x8208034C;
		  /* 8208034Ch */ case    7:  		/* twi 6, R9, 0 */
		/* 8208034Ch case    7:*/		cpu::op::tw<6>(regs, 0x8208034C, regs.R9, 0x00000000);
		/* 8208034Ch case    7:*/		return 0x82080350;
		  /* 82080350h */ case    8:  		/* divwu R8, R11, R9 */
		/* 82080350h case    8:*/		cpu::op::divwu<0>(regs,&regs.R8,regs.R11,regs.R9);
		/* 82080350h case    8:*/		return 0x82080354;
		  /* 82080354h */ case    9:  		/* mullw R9, R8, R9 */
		/* 82080354h case    9:*/		cpu::op::mullw<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82080354h case    9:*/		return 0x82080358;
		  /* 82080358h */ case   10:  		/* subf R11, R9, R11 */
		/* 82080358h case   10:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82080358h case   10:*/		return 0x8208035C;
		  /* 8208035Ch */ case   11:  		/* rlwimi R10, R11, 20, 6, 11 */
		/* 8208035Ch case   11:*/		cpu::op::rlwimi<0,20,6,11>(regs,&regs.R10,regs.R11);
		/* 8208035Ch case   11:*/		return 0x82080360;
		  /* 82080360h */ case   12:  		/* rlwinm. R11, R10, 0, 6, 11 */
		/* 82080360h case   12:*/		cpu::op::rlwinm<1,0,6,11>(regs,&regs.R11,regs.R10);
		/* 82080360h case   12:*/		return 0x82080364;
		  /* 82080364h */ case   13:  		/* stw R10, <#[R3 + 596]> */
		/* 82080364h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000254) );
		/* 82080364h case   13:*/		return 0x82080368;
		  /* 82080368h */ case   14:  		/* bc 4, CR0_EQ, 28 */
		/* 82080368h case   14:*/		if ( !regs.CR[0].eq ) { return 0x82080384;  }
		/* 82080368h case   14:*/		return 0x8208036C;
		  /* 8208036Ch */ case   15:  		/* lbz R11, <#[R3 + 608]> */
		/* 8208036Ch case   15:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000260) );
		/* 8208036Ch case   15:*/		return 0x82080370;
		  /* 82080370h */ case   16:  		/* li R10, 2048 */
		/* 82080370h case   16:*/		cpu::op::li<0>(regs,&regs.R10,0x800);
		/* 82080370h case   16:*/		return 0x82080374;
		  /* 82080374h */ case   17:  		/* ori R11, R11, 32 */
		/* 82080374h case   17:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x20);
		/* 82080374h case   17:*/		return 0x82080378;
		  /* 82080378h */ case   18:  		/* stw R10, <#[R3 + 380]> */
		/* 82080378h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x0000017C) );
		/* 82080378h case   18:*/		return 0x8208037C;
		  /* 8208037Ch */ case   19:  		/* stb R11, <#[R3 + 608]> */
		/* 8208037Ch case   19:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R3 + 0x00000260) );
		/* 8208037Ch case   19:*/		return 0x82080380;
		  /* 82080380h */ case   20:  		/* bclr 20, CR0_LT */
		/* 82080380h case   20:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82080380h case   20:*/		return 0x82080384;
	}
	return 0x82080384;
} // Block from 82080330h-82080384h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82080384h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080384( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080384) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080384);
		  /* 82080384h */ case    0:  		/* li R11, 0 */
		/* 82080384h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82080384h case    0:*/		return 0x82080388;
		  /* 82080388h */ case    1:  		/* stw R11, <#[R3 + 380]> */
		/* 82080388h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000017C) );
		/* 82080388h case    1:*/		return 0x8208038C;
		  /* 8208038Ch */ case    2:  		/* bclr 20, CR0_LT */
		/* 8208038Ch case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8208038Ch case    2:*/		return 0x82080390;
	}
	return 0x82080390;
} // Block from 82080384h-82080390h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82080390h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080390);
		  /* 82080390h */ case    0:  		/* mfspr R12, LR */
		/* 82080390h case    0:*/		regs.R12 = regs.LR;
		/* 82080390h case    0:*/		return 0x82080394;
		  /* 82080394h */ case    1:  		/* bl 69296 */
		/* 82080394h case    1:*/		regs.LR = 0x82080398; return 0x82091244;
		/* 82080394h case    1:*/		return 0x82080398;
		  /* 82080398h */ case    2:  		/* stwu R1, <#[R1 - 2320]> */
		/* 82080398h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFF6F0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFF6F0);
		/* 82080398h case    2:*/		return 0x8208039C;
		  /* 8208039Ch */ case    3:  		/* lbz R11, <#[R3 + 24380]> */
		/* 8208039Ch case    3:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R3 + 0x00005F3C) );
		/* 8208039Ch case    3:*/		return 0x820803A0;
		  /* 820803A0h */ case    4:  		/* mr R26, R3 */
		/* 820803A0h case    4:*/		regs.R26 = regs.R3;
		/* 820803A0h case    4:*/		return 0x820803A4;
		  /* 820803A4h */ case    5:  		/* addi R31, R3, 23772 */
		/* 820803A4h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R3,0x5CDC);
		/* 820803A4h case    5:*/		return 0x820803A8;
		  /* 820803A8h */ case    6:  		/* li R27, 0 */
		/* 820803A8h case    6:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 820803A8h case    6:*/		return 0x820803AC;
		  /* 820803ACh */ case    7:  		/* rlwinm. R10, R11, 0, 27, 27 */
		/* 820803ACh case    7:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R11);
		/* 820803ACh case    7:*/		return 0x820803B0;
		  /* 820803B0h */ case    8:  		/* bc 12, CR0_EQ, 872 */
		/* 820803B0h case    8:*/		if ( regs.CR[0].eq ) { return 0x82080718;  }
		/* 820803B0h case    8:*/		return 0x820803B4;
		  /* 820803B4h */ case    9:  		/* lwz R3, <#[R31 + 364]> */
		/* 820803B4h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000016C) );
		/* 820803B4h case    9:*/		return 0x820803B8;
		  /* 820803B8h */ case   10:  		/* cmplwi CR6, R3, 0 */
		/* 820803B8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 820803B8h case   10:*/		return 0x820803BC;
		  /* 820803BCh */ case   11:  		/* bc 12, CR6_EQ, 820 */
		/* 820803BCh case   11:*/		if ( regs.CR[6].eq ) { return 0x820806F0;  }
		/* 820803BCh case   11:*/		return 0x820803C0;
		  /* 820803C0h */ case   12:  		/* rlwinm. R10, R11, 0, 0, 24 */
		/* 820803C0h case   12:*/		cpu::op::rlwinm<1,0,0,24>(regs,&regs.R10,regs.R11);
		/* 820803C0h case   12:*/		return 0x820803C4;
		  /* 820803C4h */ case   13:  		/* li R28, -1 */
		/* 820803C4h case   13:*/		cpu::op::li<0>(regs,&regs.R28,0xFFFFFFFF);
		/* 820803C4h case   13:*/		return 0x820803C8;
		  /* 820803C8h */ case   14:  		/* bc 12, CR0_EQ, 280 */
		/* 820803C8h case   14:*/		if ( regs.CR[0].eq ) { return 0x820804E0;  }
		/* 820803C8h case   14:*/		return 0x820803CC;
		  /* 820803CCh */ case   15:  		/* rlwinm. R11, R11, 0, 25, 25 */
		/* 820803CCh case   15:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R11);
		/* 820803CCh case   15:*/		return 0x820803D0;
		  /* 820803D0h */ case   16:  		/* bc 12, CR0_EQ, 12 */
		/* 820803D0h case   16:*/		if ( regs.CR[0].eq ) { return 0x820803DC;  }
		/* 820803D0h case   16:*/		return 0x820803D4;
		  /* 820803D4h */ case   17:  		/* mr R4, R28 */
		/* 820803D4h case   17:*/		regs.R4 = regs.R28;
		/* 820803D4h case   17:*/		return 0x820803D8;
		  /* 820803D8h */ case   18:  		/* bl 34744 */
		/* 820803D8h case   18:*/		regs.LR = 0x820803DC; return 0x82088B90;
		/* 820803D8h case   18:*/		return 0x820803DC;
	}
	return 0x820803DC;
} // Block from 82080390h-820803DCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 820803DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820803DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820803DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820803DC);
		  /* 820803DCh */ case    0:  		/* lwz R30, <#[R31 + 16]> */
		/* 820803DCh case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000010) );
		/* 820803DCh case    0:*/		return 0x820803E0;
		  /* 820803E0h */ case    1:  		/* lwz R3, <#[R31 + 588]> */
		/* 820803E0h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000024C) );
		/* 820803E0h case    1:*/		return 0x820803E4;
		  /* 820803E4h */ case    2:  		/* bl -54764 */
		/* 820803E4h case    2:*/		regs.LR = 0x820803E8; return 0x82072DF8;
		/* 820803E4h case    2:*/		return 0x820803E8;
		  /* 820803E8h */ case    3:  		/* lis R8, -32215 */
		/* 820803E8h case    3:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8229);
		/* 820803E8h case    3:*/		return 0x820803EC;
		  /* 820803ECh */ case    4:  		/* lis R11, -32217 */
		/* 820803ECh case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 820803ECh case    4:*/		return 0x820803F0;
		  /* 820803F0h */ case    5:  		/* addi R8, R8, -25088 */
		/* 820803F0h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFF9E00);
		/* 820803F0h case    5:*/		return 0x820803F4;
		  /* 820803F4h */ case    6:  		/* addi R29, R11, 5912 */
		/* 820803F4h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x1718);
		/* 820803F4h case    6:*/		return 0x820803F8;
		  /* 820803F8h */ case    7:  		/* mr R7, R29 */
		/* 820803F8h case    7:*/		regs.R7 = regs.R29;
		/* 820803F8h case    7:*/		return 0x820803FC;
		  /* 820803FCh */ case    8:  		/* lwz R11, <#[R8 + 4]> */
		/* 820803FCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 820803FCh case    8:*/		return 0x82080400;
		  /* 82080400h */ case    9:  		/* mfmsr R9, MSR */
		/* 82080400h case    9:*/		regs.R9 = regs.MSR;
		/* 82080400h case    9:*/		return 0x82080404;
		  /* 82080404h */ case   10:  		/* mtmsrd MSR, R13 */
		/* 82080404h case   10:*/		regs.MSR = regs.R13;
		/* 82080404h case   10:*/		return 0x82080408;
		  /* 82080408h */ case   11:  		/* lwarx R10, <#[R7]> */
		/* 82080408h case   11:*/		cpu::mem::lwarx( regs, &regs.R10, (uint32)(regs.R7 + 0x00000000) );
		/* 82080408h case   11:*/		return 0x8208040C;
		  /* 8208040Ch */ case   12:  		/* stwcx. R11, <#[R7]> */
		/* 8208040Ch case   12:*/		cpu::mem::stwcx( regs, regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 8208040Ch case   12:*/		return 0x82080410;
		  /* 82080410h */ case   13:  		/* mtmsrd MSR, R9 */
		/* 82080410h case   13:*/		regs.MSR = regs.R9;
		/* 82080410h case   13:*/		return 0x82080414;
		  /* 82080414h */ case   14:  		/* bc 4, CR0_EQ, -20 */
		/* 82080414h case   14:*/		if ( !regs.CR[0].eq ) { return 0x82080400;  }
		/* 82080414h case   14:*/		return 0x82080418;
		  /* 82080418h */ case   15:  		/* lwz R9, <#[R31 + 8]> */
		/* 82080418h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 82080418h case   15:*/		return 0x8208041C;
		  /* 8208041Ch */ case   16:  		/* mr R11, R10 */
		/* 8208041Ch case   16:*/		regs.R11 = regs.R10;
		/* 8208041Ch case   16:*/		return 0x82080420;
		  /* 82080420h */ case   17:  		/* li R10, 6144 */
		/* 82080420h case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x1800);
		/* 82080420h case   17:*/		return 0x82080424;
		  /* 82080424h */ case   18:  		/* subf R11, R9, R11 */
		/* 82080424h case   18:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82080424h case   18:*/		return 0x82080428;
		  /* 82080428h */ case   19:  		/* divwu R10, R11, R10 */
		/* 82080428h case   19:*/		cpu::op::divwu<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 82080428h case   19:*/		return 0x8208042C;
		  /* 8208042Ch */ case   20:  		/* cmplwi CR6, R10, 14 */
		/* 8208042Ch case   20:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000000E);
		/* 8208042Ch case   20:*/		return 0x82080430;
		  /* 82080430h */ case   21:  		/* bc 12, CR6_LT, 8 */
		/* 82080430h case   21:*/		if ( regs.CR[6].lt ) { return 0x82080438;  }
		/* 82080430h case   21:*/		return 0x82080434;
		  /* 82080434h */ case   22:  		/* li R10, 14 */
		/* 82080434h case   22:*/		cpu::op::li<0>(regs,&regs.R10,0xE);
		/* 82080434h case   22:*/		return 0x82080438;
	}
	return 0x82080438;
} // Block from 820803DCh-82080438h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82080438h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080438);
		  /* 82080438h */ case    0:  		/* lwz R11, <#[R31 + 584]> */
		/* 82080438h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000248) );
		/* 82080438h case    0:*/		return 0x8208043C;
		  /* 8208043Ch */ case    1:  		/* mulli R9, R10, 12 */
		/* 8208043Ch case    1:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R10,0xC);
		/* 8208043Ch case    1:*/		return 0x82080440;
		  /* 82080440h */ case    2:  		/* lwz R6, <#[R31 + 596]> */
		/* 82080440h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000254) );
		/* 82080440h case    2:*/		return 0x82080444;
		  /* 82080444h */ case    3:  		/* lhz R8, <#[R31 + 12]> */
		/* 82080444h case    3:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000000C) );
		/* 82080444h case    3:*/		return 0x82080448;
		  /* 82080448h */ case    4:  		/* lwz R5, <#[R31 + 380]> */
		/* 82080448h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000017C) );
		/* 82080448h case    4:*/		return 0x8208044C;
		  /* 8208044Ch */ case    5:  		/* addi R4, R11, -1 */
		/* 8208044Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFF);
		/* 8208044Ch case    5:*/		return 0x82080450;
		  /* 82080450h */ case    6:  		/* rlwinm R11, R6, 12, 26, 31 */
		/* 82080450h case    6:*/		cpu::op::rlwinm<0,12,26,31>(regs,&regs.R11,regs.R6);
		/* 82080450h case    6:*/		return 0x82080454;
		  /* 82080454h */ case    7:  		/* rlwinm R4, R4, 2, 29, 29 */
		/* 82080454h case    7:*/		cpu::op::rlwinm<0,2,29,29>(regs,&regs.R4,regs.R4);
		/* 82080454h case    7:*/		return 0x82080458;
		  /* 82080458h */ case    8:  		/* addi R11, R11, 5 */
		/* 82080458h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x5);
		/* 82080458h case    8:*/		return 0x8208045C;
		  /* 8208045Ch */ case    9:  		/* add R9, R8, R9 */
		/* 8208045Ch case    9:*/		cpu::op::add<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8208045Ch case    9:*/		return 0x82080460;
		  /* 82080460h */ case   10:  		/* rlwinm R8, R11, 2, 0, 29 */
		/* 82080460h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R11);
		/* 82080460h case   10:*/		return 0x82080464;
		  /* 82080464h */ case   11:  		/* lis R7, -25768 */
		/* 82080464h case   11:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF9B58);
		/* 82080464h case   11:*/		return 0x82080468;
		  /* 82080468h */ case   12:  		/* lwzx R4, <#[R4 + R31]> */
		/* 82080468h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + regs.R31 + 0x00000000) );
		/* 82080468h case   12:*/		return 0x8208046C;
		  /* 8208046Ch */ case   13:  		/* rlwinm R24, R6, 4, 30, 31 */
		/* 8208046Ch case   13:*/		cpu::op::rlwinm<0,4,30,31>(regs,&regs.R24,regs.R6);
		/* 8208046Ch case   13:*/		return 0x82080470;
		  /* 82080470h */ case   14:  		/* ori R25, R7, 59162 */
		/* 82080470h case   14:*/		cpu::op::ori<0>(regs,&regs.R25,regs.R7,0xE71A);
		/* 82080470h case   14:*/		return 0x82080474;
		  /* 82080474h */ case   15:  		/* stw R5, <#[R31 + 356]> */
		/* 82080474h case   15:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R31 + 0x00000164) );
		/* 82080474h case   15:*/		return 0x82080478;
		  /* 82080478h */ case   16:  		/* addi R11, R4, -4 */
		/* 82080478h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0xFFFFFFFC);
		/* 82080478h case   16:*/		return 0x8208047C;
		  /* 8208047Ch */ case   17:  		/* stw R27, <#[R31 + 360]> */
		/* 8208047Ch case   17:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000168) );
		/* 8208047Ch case   17:*/		return 0x82080480;
		  /* 82080480h */ case   18:  		/* rlwinm R23, R9, 9, 0, 22 */
		/* 82080480h case   18:*/		cpu::op::rlwinm<0,9,0,22>(regs,&regs.R23,regs.R9);
		/* 82080480h case   18:*/		return 0x82080484;
		  /* 82080484h */ case   19:  		/* lwzx R3, <#[R8 + R31]> */
		/* 82080484h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R8 + regs.R31 + 0x00000000) );
		/* 82080484h case   19:*/		return 0x82080488;
		  /* 82080488h */ case   20:  		/* addi R7, R31, 348 */
		/* 82080488h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R31,0x15C);
		/* 82080488h case   20:*/		return 0x8208048C;
		  /* 8208048Ch */ case   21:  		/* mr R5, R23 */
		/* 8208048Ch case   21:*/		regs.R5 = regs.R23;
		/* 8208048Ch case   21:*/		return 0x82080490;
		  /* 82080490h */ case   22:  		/* addi R6, R1, 80 */
		/* 82080490h case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82080490h case   22:*/		return 0x82080494;
		  /* 82080494h */ case   23:  		/* stwu R25, <#[R11 + 4]> */
		/* 82080494h case   23:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82080494h case   23:*/		return 0x82080498;
		  /* 82080498h */ case   24:  		/* stwu R24, <#[R11 + 4]> */
		/* 82080498h case   24:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82080498h case   24:*/		return 0x8208049C;
		  /* 8208049Ch */ case   25:  		/* stwu R30, <#[R11 + 4]> */
		/* 8208049Ch case   25:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8208049Ch case   25:*/		return 0x820804A0;
		  /* 820804A0h */ case   26:  		/* stwu R10, <#[R11 + 4]> */
		/* 820804A0h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820804A0h case   26:*/		return 0x820804A4;
		  /* 820804A4h */ case   27:  		/* bl 34244 */
		/* 820804A4h case   27:*/		regs.LR = 0x820804A8; return 0x82088A68;
		/* 820804A4h case   27:*/		return 0x820804A8;
		  /* 820804A8h */ case   28:  		/* mr R4, R23 */
		/* 820804A8h case   28:*/		regs.R4 = regs.R23;
		/* 820804A8h case   28:*/		return 0x820804AC;
		  /* 820804ACh */ case   29:  		/* mr R3, R31 */
		/* 820804ACh case   29:*/		regs.R3 = regs.R31;
		/* 820804ACh case   29:*/		return 0x820804B0;
		  /* 820804B0h */ case   30:  		/* bl -472 */
		/* 820804B0h case   30:*/		regs.LR = 0x820804B4; return 0x820802D8;
		/* 820804B0h case   30:*/		return 0x820804B4;
		  /* 820804B4h */ case   31:  		/* mr R4, R28 */
		/* 820804B4h case   31:*/		regs.R4 = regs.R28;
		/* 820804B4h case   31:*/		return 0x820804B8;
		  /* 820804B8h */ case   32:  		/* lwz R3, <#[R31 + 364]> */
		/* 820804B8h case   32:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000016C) );
		/* 820804B8h case   32:*/		return 0x820804BC;
		  /* 820804BCh */ case   33:  		/* bl 34516 */
		/* 820804BCh case   33:*/		regs.LR = 0x820804C0; return 0x82088B90;
		/* 820804BCh case   33:*/		return 0x820804C0;
		  /* 820804C0h */ case   34:  		/* lis R30, -32215 */
		/* 820804C0h case   34:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8229);
		/* 820804C0h case   34:*/		return 0x820804C4;
		  /* 820804C4h */ case   35:  		/* b 12 */
		/* 820804C4h case   35:*/		return 0x820804D0;
		/* 820804C4h case   35:*/		return 0x820804C8;
		  /* 820804C8h */ case   36:  		/* li R3, 6 */
		/* 820804C8h case   36:*/		cpu::op::li<0>(regs,&regs.R3,0x6);
		/* 820804C8h case   36:*/		return 0x820804CC;
		  /* 820804CCh */ case   37:  		/* bl 32620 */
		/* 820804CCh case   37:*/		regs.LR = 0x820804D0; return 0x82088438;
		/* 820804CCh case   37:*/		return 0x820804D0;
	}
	return 0x820804D0;
} // Block from 82080438h-820804D0h (38 instructions)

//////////////////////////////////////////////////////
// Block at 820804D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820804D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820804D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820804D0);
		  /* 820804D0h */ case    0:  		/* lwz R10, <#[R29]> */
		/* 820804D0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 820804D0h case    0:*/		return 0x820804D4;
		  /* 820804D4h */ case    1:  		/* lwz R11, <#[R30 - 25084]> */
		/* 820804D4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0xFFFF9E04) );
		/* 820804D4h case    1:*/		return 0x820804D8;
		  /* 820804D8h */ case    2:  		/* cmplw CR6, R10, R11 */
		/* 820804D8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 820804D8h case    2:*/		return 0x820804DC;
		  /* 820804DCh */ case    3:  		/* bc 4, CR6_EQ, -20 */
		/* 820804DCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x820804C8;  }
		/* 820804DCh case    3:*/		return 0x820804E0;
	}
	return 0x820804E0;
} // Block from 820804D0h-820804E0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820804E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820804E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820804E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820804E0);
		  /* 820804E0h */ case    0:  		/* lwz R11, <#[R31 + 596]> */
		/* 820804E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000254) );
		/* 820804E0h case    0:*/		return 0x820804E4;
		  /* 820804E4h */ case    1:  		/* mr R30, R27 */
		/* 820804E4h case    1:*/		regs.R30 = regs.R27;
		/* 820804E4h case    1:*/		return 0x820804E8;
		  /* 820804E8h */ case    2:  		/* stw R27, <#[R1 + 84]> */
		/* 820804E8h case    2:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000054) );
		/* 820804E8h case    2:*/		return 0x820804EC;
		  /* 820804ECh */ case    3:  		/* rlwinm. R11, R11, 0, 12, 17 */
		/* 820804ECh case    3:*/		cpu::op::rlwinm<1,0,12,17>(regs,&regs.R11,regs.R11);
		/* 820804ECh case    3:*/		return 0x820804F0;
		  /* 820804F0h */ case    4:  		/* bc 12, CR0_EQ, 104 */
		/* 820804F0h case    4:*/		if ( regs.CR[0].eq ) { return 0x82080558;  }
		/* 820804F0h case    4:*/		return 0x820804F4;
		  /* 820804F4h */ case    5:  		/* addi R29, R31, 16 */
		/* 820804F4h case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x10);
		/* 820804F4h case    5:*/		return 0x820804F8;
		  /* 820804F8h */ case    6:  		/* lbz R11, <#[R31 + 608]> */
		/* 820804F8h case    6:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000260) );
		/* 820804F8h case    6:*/		return 0x820804FC;
		  /* 820804FCh */ case    7:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 820804FCh case    7:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 820804FCh case    7:*/		return 0x82080500;
		  /* 82080500h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 82080500h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82080528;  }
		/* 82080500h case    8:*/		return 0x82080504;
		  /* 82080504h */ case    9:  		/* lwz R11, <#[R31 + 596]> */
		/* 82080504h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000254) );
		/* 82080504h case    9:*/		return 0x82080508;
		  /* 82080508h */ case   10:  		/* rlwinm R11, R11, 12, 26, 31 */
		/* 82080508h case   10:*/		cpu::op::rlwinm<0,12,26,31>(regs,&regs.R11,regs.R11);
		/* 82080508h case   10:*/		return 0x8208050C;
		  /* 8208050Ch */ case   11:  		/* cmplw CR6, R30, R11 */
		/* 8208050Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8208050Ch case   11:*/		return 0x82080510;
		  /* 82080510h */ case   12:  		/* bc 12, CR6_LT, 24 */
		/* 82080510h case   12:*/		if ( regs.CR[6].lt ) { return 0x82080528;  }
		/* 82080510h case   12:*/		return 0x82080514;
		  /* 82080514h */ case   13:  		/* bc 4, CR6_GT, 12 */
		/* 82080514h case   13:*/		if ( !regs.CR[6].gt ) { return 0x82080520;  }
		/* 82080514h case   13:*/		return 0x82080518;
		  /* 82080518h */ case   14:  		/* mr R4, R27 */
		/* 82080518h case   14:*/		regs.R4 = regs.R27;
		/* 82080518h case   14:*/		return 0x8208051C;
		  /* 8208051Ch */ case   15:  		/* b 16 */
		/* 8208051Ch case   15:*/		return 0x8208052C;
		/* 8208051Ch case   15:*/		return 0x82080520;
	}
	return 0x82080520;
} // Block from 820804E0h-82080520h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82080520h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080520);
		  /* 82080520h */ case    0:  		/* lwz R4, <#[R31 + 380]> */
		/* 82080520h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000017C) );
		/* 82080520h case    0:*/		return 0x82080524;
		  /* 82080524h */ case    1:  		/* b 8 */
		/* 82080524h case    1:*/		return 0x8208052C;
		/* 82080524h case    1:*/		return 0x82080528;
	}
	return 0x82080528;
} // Block from 82080520h-82080528h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82080528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080528);
		  /* 82080528h */ case    0:  		/* lwz R4, <#[R29 + 168]> */
		/* 82080528h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x000000A8) );
		/* 82080528h case    0:*/		return 0x8208052C;
	}
	return 0x8208052C;
} // Block from 82080528h-8208052Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8208052Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208052C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208052C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208052C);
		  /* 8208052Ch */ case    0:  		/* li R6, 0 */
		/* 8208052Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8208052Ch case    0:*/		return 0x82080530;
		  /* 82080530h */ case    1:  		/* lwz R3, <#[R29 + 4]> */
		/* 82080530h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000004) );
		/* 82080530h case    1:*/		return 0x82080534;
		  /* 82080534h */ case    2:  		/* addi R5, R1, 84 */
		/* 82080534h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 82080534h case    2:*/		return 0x82080538;
		  /* 82080538h */ case    3:  		/* bl 33728 */
		/* 82080538h case    3:*/		regs.LR = 0x8208053C; return 0x820888F8;
		/* 82080538h case    3:*/		return 0x8208053C;
		  /* 8208053Ch */ case    4:  		/* lwzu R3, <#[R29 + 4]> */
		/* 8208053Ch case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 8208053Ch case    4:*/		return 0x82080540;
		  /* 82080540h */ case    5:  		/* bl 33552 */
		/* 82080540h case    5:*/		regs.LR = 0x82080544; return 0x82088850;
		/* 82080540h case    5:*/		return 0x82080544;
		  /* 82080544h */ case    6:  		/* lwz R11, <#[R31 + 596]> */
		/* 82080544h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000254) );
		/* 82080544h case    6:*/		return 0x82080548;
		  /* 82080548h */ case    7:  		/* addi R30, R30, 1 */
		/* 82080548h case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82080548h case    7:*/		return 0x8208054C;
		  /* 8208054Ch */ case    8:  		/* rlwinm R11, R11, 18, 26, 31 */
		/* 8208054Ch case    8:*/		cpu::op::rlwinm<0,18,26,31>(regs,&regs.R11,regs.R11);
		/* 8208054Ch case    8:*/		return 0x82080550;
		  /* 82080550h */ case    9:  		/* cmplw CR6, R30, R11 */
		/* 82080550h case    9:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82080550h case    9:*/		return 0x82080554;
		  /* 82080554h */ case   10:  		/* bc 12, CR6_LT, -92 */
		/* 82080554h case   10:*/		if ( regs.CR[6].lt ) { return 0x820804F8;  }
		/* 82080554h case   10:*/		return 0x82080558;
	}
	return 0x82080558;
} // Block from 8208052Ch-82080558h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82080558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080558);
		  /* 82080558h */ case    0:  		/* addi R3, R1, 96 */
		/* 82080558h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 82080558h case    0:*/		return 0x8208055C;
		  /* 8208055Ch */ case    1:  		/* bl 2018300 */
		/* 8208055Ch case    1:*/		regs.LR = 0x82080560; return 0x8226D158;
		/* 8208055Ch case    1:*/		return 0x82080560;
		  /* 82080560h */ case    2:  		/* lwz R11, <#[R31 + 604]> */
		/* 82080560h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000025C) );
		/* 82080560h case    2:*/		return 0x82080564;
		  /* 82080564h */ case    3:  		/* srawi. R11, R11, 29 */
		/* 82080564h case    3:*/		cpu::op::srawi<1,29>(regs,&regs.R11,regs.R11);
		/* 82080564h case    3:*/		return 0x82080568;
		  /* 82080568h */ case    4:  		/* bc 4, CR0_EQ, 16 */
		/* 82080568h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82080578;  }
		/* 82080568h case    4:*/		return 0x8208056C;
		  /* 8208056Ch */ case    5:  		/* lis R10, 21415 */
		/* 8208056Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0x53A7);
		/* 8208056Ch case    5:*/		return 0x82080570;
		  /* 82080570h */ case    6:  		/* ori R10, R10, 8884 */
		/* 82080570h case    6:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x22B4);
		/* 82080570h case    6:*/		return 0x82080574;
		  /* 82080574h */ case    7:  		/* b 40 */
		/* 82080574h case    7:*/		return 0x8208059C;
		/* 82080574h case    7:*/		return 0x82080578;
	}
	return 0x82080578;
} // Block from 82080558h-82080578h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82080578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080578);
		  /* 82080578h */ case    0:  		/* cmpwi CR6, R11, 1 */
		/* 82080578h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82080578h case    0:*/		return 0x8208057C;
		  /* 8208057Ch */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 8208057Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8208058C;  }
		/* 8208057Ch case    1:*/		return 0x82080580;
		  /* 82080580h */ case    2:  		/* lis R10, 21415 */
		/* 82080580h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0x53A7);
		/* 82080580h case    2:*/		return 0x82080584;
		  /* 82080584h */ case    3:  		/* ori R10, R10, 8885 */
		/* 82080584h case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x22B5);
		/* 82080584h case    3:*/		return 0x82080588;
		  /* 82080588h */ case    4:  		/* b 20 */
		/* 82080588h case    4:*/		return 0x8208059C;
		/* 82080588h case    4:*/		return 0x8208058C;
	}
	return 0x8208058C;
} // Block from 82080578h-8208058Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8208058Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208058C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208058C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208058C);
		  /* 8208058Ch */ case    0:  		/* cmpwi CR6, R11, 2 */
		/* 8208058Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8208058Ch case    0:*/		return 0x82080590;
		  /* 82080590h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82080590h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820805A0;  }
		/* 82080590h case    1:*/		return 0x82080594;
		  /* 82080594h */ case    2:  		/* lis R10, 21415 */
		/* 82080594h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0x53A7);
		/* 82080594h case    2:*/		return 0x82080598;
		  /* 82080598h */ case    3:  		/* ori R10, R10, 8886 */
		/* 82080598h case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x22B6);
		/* 82080598h case    3:*/		return 0x8208059C;
	}
	return 0x8208059C;
} // Block from 8208058Ch-8208059Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8208059Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208059C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208059C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208059C);
		  /* 8208059Ch */ case    0:  		/* stw R10, <#[R1 + 192]> */
		/* 8208059Ch case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000C0) );
		/* 8208059Ch case    0:*/		return 0x820805A0;
	}
	return 0x820805A0;
} // Block from 8208059Ch-820805A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820805A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820805A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820805A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820805A0);
		  /* 820805A0h */ case    0:  		/* lis R10, 1 */
		/* 820805A0h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x1);
		/* 820805A0h case    0:*/		return 0x820805A4;
		  /* 820805A4h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820805A4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820805A4h case    1:*/		return 0x820805A8;
		  /* 820805A8h */ case    2:  		/* ori R10, R10, 1 */
		/* 820805A8h case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820805A8h case    2:*/		return 0x820805AC;
		  /* 820805ACh */ case    3:  		/* stw R10, <#[R1 + 196]> */
		/* 820805ACh case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000C4) );
		/* 820805ACh case    3:*/		return 0x820805B0;
		  /* 820805B0h */ case    4:  		/* bc 12, CR6_EQ, 48 */
		/* 820805B0h case    4:*/		if ( regs.CR[6].eq ) { return 0x820805E0;  }
		/* 820805B0h case    4:*/		return 0x820805B4;
		  /* 820805B4h */ case    5:  		/* cmpwi CR6, R11, 1 */
		/* 820805B4h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 820805B4h case    5:*/		return 0x820805B8;
		  /* 820805B8h */ case    6:  		/* bc 12, CR6_EQ, 40 */
		/* 820805B8h case    6:*/		if ( regs.CR[6].eq ) { return 0x820805E0;  }
		/* 820805B8h case    6:*/		return 0x820805BC;
		  /* 820805BCh */ case    7:  		/* cmpwi CR6, R11, 2 */
		/* 820805BCh case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 820805BCh case    7:*/		return 0x820805C0;
		  /* 820805C0h */ case    8:  		/* bc 4, CR6_EQ, 64 */
		/* 820805C0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82080600;  }
		/* 820805C0h case    8:*/		return 0x820805C4;
		  /* 820805C4h */ case    9:  		/* li R10, 400 */
		/* 820805C4h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x190);
		/* 820805C4h case    9:*/		return 0x820805C8;
		  /* 820805C8h */ case   10:  		/* li R11, 224 */
		/* 820805C8h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0xE0);
		/* 820805C8h case   10:*/		return 0x820805CC;
		  /* 820805CCh */ case   11:  		/* stw R10, <#[R1 + 208]> */
		/* 820805CCh case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000D0) );
		/* 820805CCh case   11:*/		return 0x820805D0;
		  /* 820805D0h */ case   12:  		/* stw R11, <#[R1 + 212]> */
		/* 820805D0h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000D4) );
		/* 820805D0h case   12:*/		return 0x820805D4;
		  /* 820805D4h */ case   13:  		/* stw R10, <#[R1 + 216]> */
		/* 820805D4h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000D8) );
		/* 820805D4h case   13:*/		return 0x820805D8;
		  /* 820805D8h */ case   14:  		/* stw R11, <#[R1 + 220]> */
		/* 820805D8h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000DC) );
		/* 820805D8h case   14:*/		return 0x820805DC;
		  /* 820805DCh */ case   15:  		/* b 36 */
		/* 820805DCh case   15:*/		return 0x82080600;
		/* 820805DCh case   15:*/		return 0x820805E0;
	}
	return 0x820805E0;
} // Block from 820805A0h-820805E0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820805E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820805E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820805E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820805E0);
		  /* 820805E0h */ case    0:  		/* lhz R11, <#[R31 + 368]> */
		/* 820805E0h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000170) );
		/* 820805E0h case    0:*/		return 0x820805E4;
		  /* 820805E4h */ case    1:  		/* lhz R10, <#[R31 + 370]> */
		/* 820805E4h case    1:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000172) );
		/* 820805E4h case    1:*/		return 0x820805E8;
		  /* 820805E8h */ case    2:  		/* lhz R9, <#[R1 + 168]> */
		/* 820805E8h case    2:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R1 + 0x000000A8) );
		/* 820805E8h case    2:*/		return 0x820805EC;
		  /* 820805ECh */ case    3:  		/* lhz R8, <#[R1 + 170]> */
		/* 820805ECh case    3:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000AA) );
		/* 820805ECh case    3:*/		return 0x820805F0;
		  /* 820805F0h */ case    4:  		/* stw R11, <#[R1 + 208]> */
		/* 820805F0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000D0) );
		/* 820805F0h case    4:*/		return 0x820805F4;
		  /* 820805F4h */ case    5:  		/* stw R10, <#[R1 + 212]> */
		/* 820805F4h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000D4) );
		/* 820805F4h case    5:*/		return 0x820805F8;
		  /* 820805F8h */ case    6:  		/* stw R9, <#[R1 + 216]> */
		/* 820805F8h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000000D8) );
		/* 820805F8h case    6:*/		return 0x820805FC;
		  /* 820805FCh */ case    7:  		/* stw R8, <#[R1 + 220]> */
		/* 820805FCh case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000000DC) );
		/* 820805FCh case    7:*/		return 0x82080600;
	}
	return 0x82080600;
} // Block from 820805E0h-82080600h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82080600h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080600);
		  /* 82080600h */ case    0:  		/* bl 2017592 */
		/* 82080600h case    0:*/		regs.LR = 0x82080604; return 0x8226CF38;
		/* 82080600h case    0:*/		return 0x82080604;
		  /* 82080604h */ case    1:  		/* lwz R11, <#[R31 + 596]> */
		/* 82080604h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000254) );
		/* 82080604h case    1:*/		return 0x82080608;
		  /* 82080608h */ case    2:  		/* mr R9, R27 */
		/* 82080608h case    2:*/		regs.R9 = regs.R27;
		/* 82080608h case    2:*/		return 0x8208060C;
		  /* 8208060Ch */ case    3:  		/* stw R3, <#[R1 + 224]> */
		/* 8208060Ch case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000E0) );
		/* 8208060Ch case    3:*/		return 0x82080610;
		  /* 82080610h */ case    4:  		/* rlwinm. R8, R11, 6, 31, 31 */
		/* 82080610h case    4:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R8,regs.R11);
		/* 82080610h case    4:*/		return 0x82080614;
		  /* 82080614h */ case    5:  		/* stw R27, <#[R1 + 228]> */
		/* 82080614h case    5:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x000000E4) );
		/* 82080614h case    5:*/		return 0x82080618;
		  /* 82080618h */ case    6:  		/* rlwinm R10, R11, 6, 26, 31 */
		/* 82080618h case    6:*/		cpu::op::rlwinm<0,6,26,31>(regs,&regs.R10,regs.R11);
		/* 82080618h case    6:*/		return 0x8208061C;
		  /* 8208061Ch */ case    7:  		/* bc 12, CR0_EQ, 12 */
		/* 8208061Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x82080628;  }
		/* 8208061Ch case    7:*/		return 0x82080620;
		  /* 82080620h */ case    8:  		/* li R9, 1 */
		/* 82080620h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 82080620h case    8:*/		return 0x82080624;
		  /* 82080624h */ case    9:  		/* stw R9, <#[R1 + 228]> */
		/* 82080624h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000000E4) );
		/* 82080624h case    9:*/		return 0x82080628;
	}
	return 0x82080628;
} // Block from 82080600h-82080628h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82080628h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080628);
		  /* 82080628h */ case    0:  		/* rlwinm. R10, R10, 0, 30, 30 */
		/* 82080628h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R10);
		/* 82080628h case    0:*/		return 0x8208062C;
		  /* 8208062Ch */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 8208062Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82080638;  }
		/* 8208062Ch case    1:*/		return 0x82080630;
		  /* 82080630h */ case    2:  		/* ori R9, R9, 2 */
		/* 82080630h case    2:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x2);
		/* 82080630h case    2:*/		return 0x82080634;
		  /* 82080634h */ case    3:  		/* stw R9, <#[R1 + 228]> */
		/* 82080634h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000000E4) );
		/* 82080634h case    3:*/		return 0x82080638;
	}
	return 0x82080638;
} // Block from 82080628h-82080638h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82080638h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080638);
		  /* 82080638h */ case    0:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82080638h case    0:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82080638h case    0:*/		return 0x8208063C;
		  /* 8208063Ch */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 8208063Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82080648;  }
		/* 8208063Ch case    1:*/		return 0x82080640;
		  /* 82080640h */ case    2:  		/* lwz R4, <#[R31 + 592]> */
		/* 82080640h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000250) );
		/* 82080640h case    2:*/		return 0x82080644;
		  /* 82080644h */ case    3:  		/* b 8 */
		/* 82080644h case    3:*/		return 0x8208064C;
		/* 82080644h case    3:*/		return 0x82080648;
	}
	return 0x82080648;
} // Block from 82080638h-82080648h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82080648h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080648);
		  /* 82080648h */ case    0:  		/* addi R4, R26, 15408 */
		/* 82080648h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R26,0x3C30);
		/* 82080648h case    0:*/		return 0x8208064C;
	}
	return 0x8208064C;
} // Block from 82080648h-8208064Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8208064Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208064C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208064C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208064C);
		  /* 8208064Ch */ case    0:  		/* lbz R11, <#[R1 + 101]> */
		/* 8208064Ch case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000065) );
		/* 8208064Ch case    0:*/		return 0x82080650;
		  /* 82080650h */ case    1:  		/* li R5, 1 */
		/* 82080650h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82080650h case    1:*/		return 0x82080654;
		  /* 82080654h */ case    2:  		/* addi R3, R1, 288 */
		/* 82080654h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x120);
		/* 82080654h case    2:*/		return 0x82080658;
		  /* 82080658h */ case    3:  		/* cmplwi CR6, R11, 1 */
		/* 82080658h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82080658h case    3:*/		return 0x8208065C;
		  /* 8208065Ch */ case    4:  		/* bc 4, CR6_EQ, 20 */
		/* 8208065Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x82080670;  }
		/* 8208065Ch case    4:*/		return 0x82080660;
		  /* 82080660h */ case    5:  		/* ori R11, R9, 4 */
		/* 82080660h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R9,0x4);
		/* 82080660h case    5:*/		return 0x82080664;
		  /* 82080664h */ case    6:  		/* stw R11, <#[R1 + 228]> */
		/* 82080664h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000E4) );
		/* 82080664h case    6:*/		return 0x82080668;
		  /* 82080668h */ case    7:  		/* bl -46712 */
		/* 82080668h case    7:*/		regs.LR = 0x8208066C; return 0x82074FF0;
		/* 82080668h case    7:*/		return 0x8208066C;
		  /* 8208066Ch */ case    8:  		/* b 8 */
		/* 8208066Ch case    8:*/		return 0x82080674;
		/* 8208066Ch case    8:*/		return 0x82080670;
	}
	return 0x82080670;
} // Block from 8208064Ch-82080670h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82080670h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080670);
		  /* 82080670h */ case    0:  		/* bl -46872 */
		/* 82080670h case    0:*/		regs.LR = 0x82080674; return 0x82074F58;
		/* 82080670h case    0:*/		return 0x82080674;
	}
	return 0x82080674;
} // Block from 82080670h-82080674h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82080674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080674);
		  /* 82080674h */ case    0:  		/* lwz R30, <#[R31 + 596]> */
		/* 82080674h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000254) );
		/* 82080674h case    0:*/		return 0x82080678;
		  /* 82080678h */ case    1:  		/* addi R3, R1, 232 */
		/* 82080678h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE8);
		/* 82080678h case    1:*/		return 0x8208067C;
		  /* 8208067Ch */ case    2:  		/* li R5, 56 */
		/* 8208067Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x38);
		/* 8208067Ch case    2:*/		return 0x82080680;
		  /* 82080680h */ case    3:  		/* rlwinm. R11, R30, 0, 5, 5 */
		/* 82080680h case    3:*/		cpu::op::rlwinm<1,0,5,5>(regs,&regs.R11,regs.R30);
		/* 82080680h case    3:*/		return 0x82080684;
		  /* 82080684h */ case    4:  		/* addi R4, R26, 14128 */
		/* 82080684h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R26,0x3730);
		/* 82080684h case    4:*/		return 0x82080688;
		  /* 82080688h */ case    5:  		/* bc 4, CR0_EQ, 8 */
		/* 82080688h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82080690;  }
		/* 82080688h case    5:*/		return 0x8208068C;
		  /* 8208068Ch */ case    6:  		/* addi R4, R1, 104 */
		/* 8208068Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x68);
		/* 8208068Ch case    6:*/		return 0x82080690;
	}
	return 0x82080690;
} // Block from 82080674h-82080690h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82080690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080690);
		  /* 82080690h */ case    0:  		/* bl 70432 */
		/* 82080690h case    0:*/		regs.LR = 0x82080694; return 0x820919B0;
		/* 82080690h case    0:*/		return 0x82080694;
		  /* 82080694h */ case    1:  		/* lbz R11, <#[R31 + 608]> */
		/* 82080694h case    1:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000260) );
		/* 82080694h case    1:*/		return 0x82080698;
		  /* 82080698h */ case    2:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 82080698h case    2:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 82080698h case    2:*/		return 0x8208069C;
		  /* 8208069Ch */ case    3:  		/* bc 12, CR0_EQ, 20 */
		/* 8208069Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x820806B0;  }
		/* 8208069Ch case    3:*/		return 0x820806A0;
		  /* 820806A0h */ case    4:  		/* rlwinm R10, R30, 12, 26, 31 */
		/* 820806A0h case    4:*/		cpu::op::rlwinm<0,12,26,31>(regs,&regs.R10,regs.R30);
		/* 820806A0h case    4:*/		return 0x820806A4;
		  /* 820806A4h */ case    5:  		/* lwz R11, <#[R31 + 380]> */
		/* 820806A4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000017C) );
		/* 820806A4h case    5:*/		return 0x820806A8;
		  /* 820806A8h */ case    6:  		/* stw R10, <#[R1 + 204]> */
		/* 820806A8h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000CC) );
		/* 820806A8h case    6:*/		return 0x820806AC;
		  /* 820806ACh */ case    7:  		/* b 12 */
		/* 820806ACh case    7:*/		return 0x820806B8;
		/* 820806ACh case    7:*/		return 0x820806B0;
	}
	return 0x820806B0;
} // Block from 82080690h-820806B0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820806B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820806B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820806B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820806B0);
		  /* 820806B0h */ case    0:  		/* li R11, 2048 */
		/* 820806B0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x800);
		/* 820806B0h case    0:*/		return 0x820806B4;
		  /* 820806B4h */ case    1:  		/* stw R27, <#[R1 + 204]> */
		/* 820806B4h case    1:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x000000CC) );
		/* 820806B4h case    1:*/		return 0x820806B8;
	}
	return 0x820806B8;
} // Block from 820806B0h-820806B8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820806B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820806B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820806B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820806B8);
		  /* 820806B8h */ case    0:  		/* stw R11, <#[R1 + 200]> */
		/* 820806B8h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000C8) );
		/* 820806B8h case    0:*/		return 0x820806BC;
		  /* 820806BCh */ case    1:  		/* addi R7, R31, 348 */
		/* 820806BCh case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R31,0x15C);
		/* 820806BCh case    1:*/		return 0x820806C0;
		  /* 820806C0h */ case    2:  		/* stw R27, <#[R31 + 356]> */
		/* 820806C0h case    2:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000164) );
		/* 820806C0h case    2:*/		return 0x820806C4;
		  /* 820806C4h */ case    3:  		/* addi R6, R1, 80 */
		/* 820806C4h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 820806C4h case    3:*/		return 0x820806C8;
		  /* 820806C8h */ case    4:  		/* stw R27, <#[R31 + 360]> */
		/* 820806C8h case    4:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000168) );
		/* 820806C8h case    4:*/		return 0x820806CC;
		  /* 820806CCh */ case    5:  		/* li R5, 2048 */
		/* 820806CCh case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x800);
		/* 820806CCh case    5:*/		return 0x820806D0;
		  /* 820806D0h */ case    6:  		/* addi R4, R1, 192 */
		/* 820806D0h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 820806D0h case    6:*/		return 0x820806D4;
		  /* 820806D4h */ case    7:  		/* lwz R3, <#[R31 + 20]> */
		/* 820806D4h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000014) );
		/* 820806D4h case    7:*/		return 0x820806D8;
		  /* 820806D8h */ case    8:  		/* bl 33680 */
		/* 820806D8h case    8:*/		regs.LR = 0x820806DC; return 0x82088A68;
		/* 820806D8h case    8:*/		return 0x820806DC;
		  /* 820806DCh */ case    9:  		/* mr R4, R28 */
		/* 820806DCh case    9:*/		regs.R4 = regs.R28;
		/* 820806DCh case    9:*/		return 0x820806E0;
		  /* 820806E0h */ case   10:  		/* lwz R3, <#[R31 + 364]> */
		/* 820806E0h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000016C) );
		/* 820806E0h case   10:*/		return 0x820806E4;
		  /* 820806E4h */ case   11:  		/* bl 33964 */
		/* 820806E4h case   11:*/		regs.LR = 0x820806E8; return 0x82088B90;
		/* 820806E4h case   11:*/		return 0x820806E8;
		  /* 820806E8h */ case   12:  		/* lwz R3, <#[R31 + 364]> */
		/* 820806E8h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000016C) );
		/* 820806E8h case   12:*/		return 0x820806EC;
		  /* 820806ECh */ case   13:  		/* bl 33052 */
		/* 820806ECh case   13:*/		regs.LR = 0x820806F0; return 0x82088808;
		/* 820806ECh case   13:*/		return 0x820806F0;
	}
	return 0x820806F0;
} // Block from 820806B8h-820806F0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820806F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820806F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820806F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820806F0);
		  /* 820806F0h */ case    0:  		/* mr R30, R27 */
		/* 820806F0h case    0:*/		regs.R30 = regs.R27;
		/* 820806F0h case    0:*/		return 0x820806F4;
		  /* 820806F4h */ case    1:  		/* addi R31, R31, 20 */
		/* 820806F4h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x14);
		/* 820806F4h case    1:*/		return 0x820806F8;
		  /* 820806F8h */ case    2:  		/* lwz R3, <#[R31]> */
		/* 820806F8h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 820806F8h case    2:*/		return 0x820806FC;
		  /* 820806FCh */ case    3:  		/* cmpwi CR6, R3, -1 */
		/* 820806FCh case    3:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820806FCh case    3:*/		return 0x82080700;
		  /* 82080700h */ case    4:  		/* bc 12, CR6_EQ, 24 */
		/* 82080700h case    4:*/		if ( regs.CR[6].eq ) { return 0x82080718;  }
		/* 82080700h case    4:*/		return 0x82080704;
		  /* 82080704h */ case    5:  		/* bl 33028 */
		/* 82080704h case    5:*/		regs.LR = 0x82080708; return 0x82088808;
		/* 82080704h case    5:*/		return 0x82080708;
		  /* 82080708h */ case    6:  		/* addi R30, R30, 1 */
		/* 82080708h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82080708h case    6:*/		return 0x8208070C;
		  /* 8208070Ch */ case    7:  		/* addi R31, R31, 4 */
		/* 8208070Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8208070Ch case    7:*/		return 0x82080710;
		  /* 82080710h */ case    8:  		/* cmplwi CR6, R30, 41 */
		/* 82080710h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000029);
		/* 82080710h case    8:*/		return 0x82080714;
		  /* 82080714h */ case    9:  		/* bc 12, CR6_LT, -28 */
		/* 82080714h case    9:*/		if ( regs.CR[6].lt ) { return 0x820806F8;  }
		/* 82080714h case    9:*/		return 0x82080718;
	}
	return 0x82080718;
} // Block from 820806F0h-82080718h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82080718h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080718( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080718) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080718);
		  /* 82080718h */ case    0:  		/* lis R11, -32256 */
		/* 82080718h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82080718h case    0:*/		return 0x8208071C;
		  /* 8208071Ch */ case    1:  		/* lwz R11, <#[R11 + 1144]> */
		/* 8208071Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000478) );
		/* 8208071Ch case    1:*/		return 0x82080720;
		  /* 82080720h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 82080720h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82080720h case    2:*/		return 0x82080724;
		  /* 82080724h */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 82080724h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82080724h case    3:*/		return 0x82080728;
		  /* 82080728h */ case    4:  		/* bc 12, CR6_EQ, 32 */
		/* 82080728h case    4:*/		if ( regs.CR[6].eq ) { return 0x82080748;  }
		/* 82080728h case    4:*/		return 0x8208072C;
		  /* 8208072Ch */ case    5:  		/* rlwinm R11, R10, 0, 0, 31 */
		/* 8208072Ch case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R10);
		/* 8208072Ch case    5:*/		return 0x82080730;
		  /* 82080730h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82080730h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82080730h case    6:*/		return 0x82080734;
		  /* 82080734h */ case    7:  		/* bc 12, CR6_EQ, 64 */
		/* 82080734h case    7:*/		if ( regs.CR[6].eq ) { return 0x82080774;  }
		/* 82080734h case    7:*/		return 0x82080738;
		  /* 82080738h */ case    8:  		/* lwz R11, <#[R11]> */
		/* 82080738h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82080738h case    8:*/		return 0x8208073C;
		  /* 8208073Ch */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 8208073Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8208073Ch case    9:*/		return 0x82080740;
		  /* 82080740h */ case   10:  		/* bc 12, CR6_EQ, 52 */
		/* 82080740h case   10:*/		if ( regs.CR[6].eq ) { return 0x82080774;  }
		/* 82080740h case   10:*/		return 0x82080744;
		  /* 82080744h */ case   11:  		/* b 28 */
		/* 82080744h case   11:*/		return 0x82080760;
		/* 82080744h case   11:*/		return 0x82080748;
	}
	return 0x82080748;
} // Block from 82080718h-82080748h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82080748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080748);
		  /* 82080748h */ case    0:  		/* lis R11, -32256 */
		/* 82080748h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82080748h case    0:*/		return 0x8208074C;
		  /* 8208074Ch */ case    1:  		/* lwz R11, <#[R11 + 1140]> */
		/* 8208074Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000474) );
		/* 8208074Ch case    1:*/		return 0x82080750;
		  /* 82080750h */ case    2:  		/* lwz R11, <#[R11]> */
		/* 82080750h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82080750h case    2:*/		return 0x82080754;
		  /* 82080754h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 82080754h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82080754h case    3:*/		return 0x82080758;
		  /* 82080758h */ case    4:  		/* bc 12, CR6_EQ, 28 */
		/* 82080758h case    4:*/		if ( regs.CR[6].eq ) { return 0x82080774;  }
		/* 82080758h case    4:*/		return 0x8208075C;
		  /* 8208075Ch */ case    5:  		/* lwz R11, <#[R11 + 24]> */
		/* 8208075Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 8208075Ch case    5:*/		return 0x82080760;
	}
	return 0x82080760;
} // Block from 82080748h-82080760h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82080760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080760);
		  /* 82080760h */ case    0:  		/* lis R10, -32256 */
		/* 82080760h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82080760h case    0:*/		return 0x82080764;
		  /* 82080764h */ case    1:  		/* mtspr CTR, R11 */
		/* 82080764h case    1:*/		regs.CTR = regs.R11;
		/* 82080764h case    1:*/		return 0x82080768;
		  /* 82080768h */ case    2:  		/* li R3, 27 */
		/* 82080768h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x1B);
		/* 82080768h case    2:*/		return 0x8208076C;
		  /* 8208076Ch */ case    3:  		/* addi R4, R10, 16784 */
		/* 8208076Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x4190);
		/* 8208076Ch case    3:*/		return 0x82080770;
		  /* 82080770h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 82080770h case    4:*/		if ( 1 ) { regs.LR = 0x82080774; return (uint32)regs.CTR; }
		/* 82080770h case    4:*/		return 0x82080774;
	}
	return 0x82080774;
} // Block from 82080760h-82080774h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82080774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080774);
		  /* 82080774h */ case    0:  		/* mr R3, R26 */
		/* 82080774h case    0:*/		regs.R3 = regs.R26;
		/* 82080774h case    0:*/		return 0x82080778;
		  /* 82080778h */ case    1:  		/* bl -3264 */
		/* 82080778h case    1:*/		regs.LR = 0x8208077C; return 0x8207FAB8;
		/* 82080778h case    1:*/		return 0x8208077C;
		  /* 8208077Ch */ case    2:  		/* lis R11, -32217 */
		/* 8208077Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8208077Ch case    2:*/		return 0x82080780;
		  /* 82080780h */ case    3:  		/* addi R3, R11, 5936 */
		/* 82080780h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x1730);
		/* 82080780h case    3:*/		return 0x82080784;
		  /* 82080784h */ case    4:  		/* bl 2017876 */
		/* 82080784h case    4:*/		regs.LR = 0x82080788; return 0x8226D1D8;
		/* 82080784h case    4:*/		return 0x82080788;
		  /* 82080788h */ case    5:  		/* lis R8, -32215 */
		/* 82080788h case    5:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8229);
		/* 82080788h case    5:*/		return 0x8208078C;
		  /* 8208078Ch */ case    6:  		/* mr R11, R27 */
		/* 8208078Ch case    6:*/		regs.R11 = regs.R27;
		/* 8208078Ch case    6:*/		return 0x82080790;
		  /* 82080790h */ case    7:  		/* addi R7, R8, -31322 */
		/* 82080790h case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R8,0xFFFF85A6);
		/* 82080790h case    7:*/		return 0x82080794;
		  /* 82080794h */ case    8:  		/* mr R10, R27 */
		/* 82080794h case    8:*/		regs.R10 = regs.R27;
		/* 82080794h case    8:*/		return 0x82080798;
		  /* 82080798h */ case    9:  		/* mr R9, R27 */
		/* 82080798h case    9:*/		regs.R9 = regs.R27;
		/* 82080798h case    9:*/		return 0x8208079C;
		  /* 8208079Ch */ case   10:  		/* stb R27, <#[R8 - 31322]> */
		/* 8208079Ch case   10:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R8 + 0xFFFF85A6) );
		/* 8208079Ch case   10:*/		return 0x820807A0;
		  /* 820807A0h */ case   11:  		/* stb R27, <#[R7 - 2]> */
		/* 820807A0h case   11:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R7 + 0xFFFFFFFE) );
		/* 820807A0h case   11:*/		return 0x820807A4;
		  /* 820807A4h */ case   12:  		/* stb R27, <#[R7 - 1]> */
		/* 820807A4h case   12:*/		cpu::mem::store8( regs, regs.R27, (uint32)(regs.R7 + 0xFFFFFFFF) );
		/* 820807A4h case   12:*/		return 0x820807A8;
		  /* 820807A8h */ case   13:  		/* addi R1, R1, 2320 */
		/* 820807A8h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x910);
		/* 820807A8h case   13:*/		return 0x820807AC;
		  /* 820807ACh */ case   14:  		/* b 68328 */
		/* 820807ACh case   14:*/		return 0x82091294;
		/* 820807ACh case   14:*/		return 0x820807B0;
	}
	return 0x820807B0;
} // Block from 82080774h-820807B0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820807B0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820807B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820807B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820807B0);
		  /* 820807B0h */ case    0:  		/* mfspr R12, LR */
		/* 820807B0h case    0:*/		regs.R12 = regs.LR;
		/* 820807B0h case    0:*/		return 0x820807B4;
		  /* 820807B4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820807B4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820807B4h case    1:*/		return 0x820807B8;
		  /* 820807B8h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 820807B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820807B8h case    2:*/		return 0x820807BC;
		  /* 820807BCh */ case    3:  		/* bl -1068 */
		/* 820807BCh case    3:*/		regs.LR = 0x820807C0; return 0x82080390;
		/* 820807BCh case    3:*/		return 0x820807C0;
		  /* 820807C0h */ case    4:  		/* lis R10, -32215 */
		/* 820807C0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8229);
		/* 820807C0h case    4:*/		return 0x820807C4;
		  /* 820807C4h */ case    5:  		/* li R11, 0 */
		/* 820807C4h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820807C4h case    5:*/		return 0x820807C8;
		  /* 820807C8h */ case    6:  		/* stb R11, <#[R10 - 31321]> */
		/* 820807C8h case    6:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R10 + 0xFFFF85A7) );
		/* 820807C8h case    6:*/		return 0x820807CC;
		  /* 820807CCh */ case    7:  		/* addi R1, R1, 96 */
		/* 820807CCh case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820807CCh case    7:*/		return 0x820807D0;
		  /* 820807D0h */ case    8:  		/* lwz R12, <#[R1 - 8]> */
		/* 820807D0h case    8:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820807D0h case    8:*/		return 0x820807D4;
		  /* 820807D4h */ case    9:  		/* mtspr LR, R12 */
		/* 820807D4h case    9:*/		regs.LR = regs.R12;
		/* 820807D4h case    9:*/		return 0x820807D8;
		  /* 820807D8h */ case   10:  		/* bclr 20, CR0_LT */
		/* 820807D8h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820807D8h case   10:*/		return 0x820807DC;
	}
	return 0x820807DC;
} // Block from 820807B0h-820807DCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 820807DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820807DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820807DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820807DC);
		  /* 820807DCh */ case    0:  		/* nop */
		/* 820807DCh case    0:*/		cpu::op::nop();
		/* 820807DCh case    0:*/		return 0x820807E0;
	}
	return 0x820807E0;
} // Block from 820807DCh-820807E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820807E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820807E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820807E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820807E0);
		  /* 820807E0h */ case    0:  		/* mfspr R12, LR */
		/* 820807E0h case    0:*/		regs.R12 = regs.LR;
		/* 820807E0h case    0:*/		return 0x820807E4;
		  /* 820807E4h */ case    1:  		/* bl 68196 */
		/* 820807E4h case    1:*/		regs.LR = 0x820807E8; return 0x82091248;
		/* 820807E4h case    1:*/		return 0x820807E8;
		  /* 820807E8h */ case    2:  		/* stwu R1, <#[R1 - 816]> */
		/* 820807E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFCD0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFCD0);
		/* 820807E8h case    2:*/		return 0x820807EC;
		  /* 820807ECh */ case    3:  		/* lbz R11, <#[R3 + 24380]> */
		/* 820807ECh case    3:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R3 + 0x00005F3C) );
		/* 820807ECh case    3:*/		return 0x820807F0;
		  /* 820807F0h */ case    4:  		/* mr R29, R4 */
		/* 820807F0h case    4:*/		regs.R29 = regs.R4;
		/* 820807F0h case    4:*/		return 0x820807F4;
		  /* 820807F4h */ case    5:  		/* mr R24, R3 */
		/* 820807F4h case    5:*/		regs.R24 = regs.R3;
		/* 820807F4h case    5:*/		return 0x820807F8;
		  /* 820807F8h */ case    6:  		/* mr R4, R5 */
		/* 820807F8h case    6:*/		regs.R4 = regs.R5;
		/* 820807F8h case    6:*/		return 0x820807FC;
		  /* 820807FCh */ case    7:  		/* addi R30, R3, 23772 */
		/* 820807FCh case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R3,0x5CDC);
		/* 820807FCh case    7:*/		return 0x82080800;
		  /* 82080800h */ case    8:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 82080800h case    8:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 82080800h case    8:*/		return 0x82080804;
		  /* 82080804h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 82080804h case    9:*/		if ( regs.CR[0].eq ) { return 0x82080818;  }
		/* 82080804h case    9:*/		return 0x82080808;
		  /* 82080808h */ case   10:  		/* mr R3, R24 */
		/* 82080808h case   10:*/		regs.R3 = regs.R24;
		/* 82080808h case   10:*/		return 0x8208080C;
		  /* 8208080Ch */ case   11:  		/* bl -1148 */
		/* 8208080Ch case   11:*/		regs.LR = 0x82080810; return 0x82080390;
		/* 8208080Ch case   11:*/		return 0x82080810;
		  /* 82080810h */ case   12:  		/* li R3, 0 */
		/* 82080810h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82080810h case   12:*/		return 0x82080814;
		  /* 82080814h */ case   13:  		/* b 812 */
		/* 82080814h case   13:*/		return 0x82080B40;
		/* 82080814h case   13:*/		return 0x82080818;
	}
	return 0x82080818;
} // Block from 820807E0h-82080818h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82080818h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080818);
		  /* 82080818h */ case    0:  		/* li R5, 260 */
		/* 82080818h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x104);
		/* 82080818h case    0:*/		return 0x8208081C;
		  /* 8208081Ch */ case    1:  		/* addi R3, R1, 112 */
		/* 8208081Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 8208081Ch case    1:*/		return 0x82080820;
		  /* 82080820h */ case    2:  		/* bl 74408 */
		/* 82080820h case    2:*/		regs.LR = 0x82080824; return 0x82092AC8;
		/* 82080820h case    2:*/		return 0x82080824;
		  /* 82080824h */ case    3:  		/* li R25, 0 */
		/* 82080824h case    3:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 82080824h case    3:*/		return 0x82080828;
		  /* 82080828h */ case    4:  		/* addi R11, R1, 112 */
		/* 82080828h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 82080828h case    4:*/		return 0x8208082C;
		  /* 8208082Ch */ case    5:  		/* stb R25, <#[R1 + 371]> */
		/* 8208082Ch case    5:*/		cpu::mem::store8( regs, regs.R25, (uint32)(regs.R1 + 0x00000173) );
		/* 8208082Ch case    5:*/		return 0x82080830;
		  /* 82080830h */ case    6:  		/* mr R10, R11 */
		/* 82080830h case    6:*/		regs.R10 = regs.R11;
		/* 82080830h case    6:*/		return 0x82080834;
		  /* 82080834h */ case    7:  		/* lbz R9, <#[R11]> */
		/* 82080834h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82080834h case    7:*/		return 0x82080838;
		  /* 82080838h */ case    8:  		/* addi R11, R11, 1 */
		/* 82080838h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82080838h case    8:*/		return 0x8208083C;
		  /* 8208083Ch */ case    9:  		/* cmplwi CR6, R9, 0 */
		/* 8208083Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8208083Ch case    9:*/		return 0x82080840;
		  /* 82080840h */ case   10:  		/* bc 4, CR6_EQ, -12 */
		/* 82080840h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82080834;  }
		/* 82080840h case   10:*/		return 0x82080844;
		  /* 82080844h */ case   11:  		/* subf R11, R10, R11 */
		/* 82080844h case   11:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82080844h case   11:*/		return 0x82080848;
		  /* 82080848h */ case   12:  		/* addi R10, R1, 112 */
		/* 82080848h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 82080848h case   12:*/		return 0x8208084C;
		  /* 8208084Ch */ case   13:  		/* addi R11, R11, -1 */
		/* 8208084Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8208084Ch case   13:*/		return 0x82080850;
		  /* 82080850h */ case   14:  		/* addi R9, R1, 112 */
		/* 82080850h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 82080850h case   14:*/		return 0x82080854;
		  /* 82080854h */ case   15:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 82080854h case   15:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 82080854h case   15:*/		return 0x82080858;
		  /* 82080858h */ case   16:  		/* add R11, R11, R10 */
		/* 82080858h case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82080858h case   16:*/		return 0x8208085C;
		  /* 8208085Ch */ case   17:  		/* addi R31, R11, -1 */
		/* 8208085Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFFFFFF);
		/* 8208085Ch case   17:*/		return 0x82080860;
		  /* 82080860h */ case   18:  		/* cmplw CR6, R31, R9 */
		/* 82080860h case   18:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R9);
		/* 82080860h case   18:*/		return 0x82080864;
		  /* 82080864h */ case   19:  		/* bc 12, CR6_LT, 32 */
		/* 82080864h case   19:*/		if ( regs.CR[6].lt ) { return 0x82080884;  }
		/* 82080864h case   19:*/		return 0x82080868;
		  /* 82080868h */ case   20:  		/* lbz R11, <#[R31]> */
		/* 82080868h case   20:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82080868h case   20:*/		return 0x8208086C;
		  /* 8208086Ch */ case   21:  		/* cmplwi CR6, R11, 92 */
		/* 8208086Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005C);
		/* 8208086Ch case   21:*/		return 0x82080870;
		  /* 82080870h */ case   22:  		/* bc 12, CR6_EQ, 20 */
		/* 82080870h case   22:*/		if ( regs.CR[6].eq ) { return 0x82080884;  }
		/* 82080870h case   22:*/		return 0x82080874;
		  /* 82080874h */ case   23:  		/* addi R31, R31, -1 */
		/* 82080874h case   23:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 82080874h case   23:*/		return 0x82080878;
		  /* 82080878h */ case   24:  		/* addi R11, R1, 112 */
		/* 82080878h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 82080878h case   24:*/		return 0x8208087C;
		  /* 8208087Ch */ case   25:  		/* cmplw CR6, R31, R11 */
		/* 8208087Ch case   25:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8208087Ch case   25:*/		return 0x82080880;
		  /* 82080880h */ case   26:  		/* bc 4, CR6_LT, -24 */
		/* 82080880h case   26:*/		if ( !regs.CR[6].lt ) { return 0x82080868;  }
		/* 82080880h case   26:*/		return 0x82080884;
	}
	return 0x82080884;
} // Block from 82080818h-82080884h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82080884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080884);
		  /* 82080884h */ case    0:  		/* lbz R11, <#[R31]> */
		/* 82080884h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82080884h case    0:*/		return 0x82080888;
		  /* 82080888h */ case    1:  		/* cmplwi CR6, R11, 92 */
		/* 82080888h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005C);
		/* 82080888h case    1:*/		return 0x8208088C;
		  /* 8208088Ch */ case    2:  		/* bc 4, CR6_EQ, -132 */
		/* 8208088Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82080808;  }
		/* 8208088Ch case    2:*/		return 0x82080890;
		  /* 82080890h */ case    3:  		/* stb R25, <#[R31]> */
		/* 82080890h case    3:*/		cpu::mem::store8( regs, regs.R25, (uint32)(regs.R31 + 0x00000000) );
		/* 82080890h case    3:*/		return 0x82080894;
		  /* 82080894h */ case    4:  		/* addi R4, R1, 112 */
		/* 82080894h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 82080894h case    4:*/		return 0x82080898;
		  /* 82080898h */ case    5:  		/* addi R3, R1, 88 */
		/* 82080898h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x58);
		/* 82080898h case    5:*/		return 0x8208089C;
		  /* 8208089Ch */ case    6:  		/* bl 2017628 */
		/* 8208089Ch case    6:*/		regs.LR = 0x820808A0; return 0x8226D1F8;
		/* 8208089Ch case    6:*/		return 0x820808A0;
		  /* 820808A0h */ case    7:  		/* lis R11, -32217 */
		/* 820808A0h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 820808A0h case    7:*/		return 0x820808A4;
		  /* 820808A4h */ case    8:  		/* addi R4, R1, 88 */
		/* 820808A4h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x58);
		/* 820808A4h case    8:*/		return 0x820808A8;
		  /* 820808A8h */ case    9:  		/* addi R3, R11, 5936 */
		/* 820808A8h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x1730);
		/* 820808A8h case    9:*/		return 0x820808AC;
		  /* 820808ACh */ case   10:  		/* bl 2017596 */
		/* 820808ACh case   10:*/		regs.LR = 0x820808B0; return 0x8226D1E8;
		/* 820808ACh case   10:*/		return 0x820808B0;
		  /* 820808B0h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 820808B0h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820808B0h case   11:*/		return 0x820808B4;
		  /* 820808B4h */ case   12:  		/* bc 12, CR0_LT, -172 */
		/* 820808B4h case   12:*/		if ( regs.CR[0].lt ) { return 0x82080808;  }
		/* 820808B4h case   12:*/		return 0x820808B8;
		  /* 820808B8h */ case   13:  		/* lis R11, -32256 */
		/* 820808B8h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820808B8h case   13:*/		return 0x820808BC;
		  /* 820808BCh */ case   14:  		/* lis R10, -32256 */
		/* 820808BCh case   14:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 820808BCh case   14:*/		return 0x820808C0;
		  /* 820808C0h */ case   15:  		/* addi R5, R11, 16820 */
		/* 820808C0h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x41B4);
		/* 820808C0h case   15:*/		return 0x820808C4;
		  /* 820808C4h */ case   16:  		/* addi R4, R10, 16812 */
		/* 820808C4h case   16:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x41AC);
		/* 820808C4h case   16:*/		return 0x820808C8;
		  /* 820808C8h */ case   17:  		/* addi R6, R31, 1 */
		/* 820808C8h case   17:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x1);
		/* 820808C8h case   17:*/		return 0x820808CC;
		  /* 820808CCh */ case   18:  		/* addi R3, R1, 480 */
		/* 820808CCh case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x1E0);
		/* 820808CCh case   18:*/		return 0x820808D0;
		  /* 820808D0h */ case   19:  		/* bl 2017096 */
		/* 820808D0h case   19:*/		regs.LR = 0x820808D4; return 0x8226D018;
		/* 820808D0h case   19:*/		return 0x820808D4;
		  /* 820808D4h */ case   20:  		/* addi R5, R1, 480 */
		/* 820808D4h case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x1E0);
		/* 820808D4h case   20:*/		return 0x820808D8;
		  /* 820808D8h */ case   21:  		/* mr R4, R29 */
		/* 820808D8h case   21:*/		regs.R4 = regs.R29;
		/* 820808D8h case   21:*/		return 0x820808DC;
		  /* 820808DCh */ case   22:  		/* mr R3, R24 */
		/* 820808DCh case   22:*/		regs.R3 = regs.R24;
		/* 820808DCh case   22:*/		return 0x820808E0;
		  /* 820808E0h */ case   23:  		/* bl -3360 */
		/* 820808E0h case   23:*/		regs.LR = 0x820808E4; return 0x8207FBC0;
		/* 820808E0h case   23:*/		return 0x820808E4;
		  /* 820808E4h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 820808E4h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820808E4h case   24:*/		return 0x820808E8;
		  /* 820808E8h */ case   25:  		/* bc 12, CR0_LT, -224 */
		/* 820808E8h case   25:*/		if ( regs.CR[0].lt ) { return 0x82080808;  }
		/* 820808E8h case   25:*/		return 0x820808EC;
		  /* 820808ECh */ case   26:  		/* li R5, 260 */
		/* 820808ECh case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x104);
		/* 820808ECh case   26:*/		return 0x820808F0;
		  /* 820808F0h */ case   27:  		/* addi R4, R1, 480 */
		/* 820808F0h case   27:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x1E0);
		/* 820808F0h case   27:*/		return 0x820808F4;
		  /* 820808F4h */ case   28:  		/* addi R3, R1, 112 */
		/* 820808F4h case   28:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 820808F4h case   28:*/		return 0x820808F8;
		  /* 820808F8h */ case   29:  		/* bl 74192 */
		/* 820808F8h case   29:*/		regs.LR = 0x820808FC; return 0x82092AC8;
		/* 820808F8h case   29:*/		return 0x820808FC;
		  /* 820808FCh */ case   30:  		/* addi R11, R1, 112 */
		/* 820808FCh case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 820808FCh case   30:*/		return 0x82080900;
		  /* 82080900h */ case   31:  		/* stb R25, <#[R1 + 371]> */
		/* 82080900h case   31:*/		cpu::mem::store8( regs, regs.R25, (uint32)(regs.R1 + 0x00000173) );
		/* 82080900h case   31:*/		return 0x82080904;
		  /* 82080904h */ case   32:  		/* mr R10, R11 */
		/* 82080904h case   32:*/		regs.R10 = regs.R11;
		/* 82080904h case   32:*/		return 0x82080908;
		  /* 82080908h */ case   33:  		/* lbz R9, <#[R11]> */
		/* 82080908h case   33:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82080908h case   33:*/		return 0x8208090C;
		  /* 8208090Ch */ case   34:  		/* addi R11, R11, 1 */
		/* 8208090Ch case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8208090Ch case   34:*/		return 0x82080910;
		  /* 82080910h */ case   35:  		/* cmplwi CR6, R9, 0 */
		/* 82080910h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82080910h case   35:*/		return 0x82080914;
		  /* 82080914h */ case   36:  		/* bc 4, CR6_EQ, -12 */
		/* 82080914h case   36:*/		if ( !regs.CR[6].eq ) { return 0x82080908;  }
		/* 82080914h case   36:*/		return 0x82080918;
		  /* 82080918h */ case   37:  		/* subf R11, R10, R11 */
		/* 82080918h case   37:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82080918h case   37:*/		return 0x8208091C;
		  /* 8208091Ch */ case   38:  		/* addi R10, R1, 112 */
		/* 8208091Ch case   38:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 8208091Ch case   38:*/		return 0x82080920;
		  /* 82080920h */ case   39:  		/* addi R11, R11, -1 */
		/* 82080920h case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82080920h case   39:*/		return 0x82080924;
		  /* 82080924h */ case   40:  		/* addi R9, R1, 112 */
		/* 82080924h case   40:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 82080924h case   40:*/		return 0x82080928;
		  /* 82080928h */ case   41:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 82080928h case   41:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 82080928h case   41:*/		return 0x8208092C;
		  /* 8208092Ch */ case   42:  		/* add R11, R11, R10 */
		/* 8208092Ch case   42:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8208092Ch case   42:*/		return 0x82080930;
		  /* 82080930h */ case   43:  		/* addi R11, R11, -1 */
		/* 82080930h case   43:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82080930h case   43:*/		return 0x82080934;
		  /* 82080934h */ case   44:  		/* mr R29, R11 */
		/* 82080934h case   44:*/		regs.R29 = regs.R11;
		/* 82080934h case   44:*/		return 0x82080938;
		  /* 82080938h */ case   45:  		/* cmplw CR6, R11, R9 */
		/* 82080938h case   45:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82080938h case   45:*/		return 0x8208093C;
		  /* 8208093Ch */ case   46:  		/* bc 12, CR6_LT, 44 */
		/* 8208093Ch case   46:*/		if ( regs.CR[6].lt ) { return 0x82080968;  }
		/* 8208093Ch case   46:*/		return 0x82080940;
		  /* 82080940h */ case   47:  		/* lbz R10, <#[R29]> */
		/* 82080940h case   47:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 82080940h case   47:*/		return 0x82080944;
		  /* 82080944h */ case   48:  		/* extsb R10, R10 */
		/* 82080944h case   48:*/		cpu::op::extsb<0>(regs,&regs.R10,regs.R10);
		/* 82080944h case   48:*/		return 0x82080948;
		  /* 82080948h */ case   49:  		/* cmpwi CR6, R10, 46 */
		/* 82080948h case   49:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000002E);
		/* 82080948h case   49:*/		return 0x8208094C;
		  /* 8208094Ch */ case   50:  		/* bc 12, CR6_EQ, 28 */
		/* 8208094Ch case   50:*/		if ( regs.CR[6].eq ) { return 0x82080968;  }
		/* 8208094Ch case   50:*/		return 0x82080950;
		  /* 82080950h */ case   51:  		/* cmpwi CR6, R10, 92 */
		/* 82080950h case   51:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x0000005C);
		/* 82080950h case   51:*/		return 0x82080954;
		  /* 82080954h */ case   52:  		/* bc 12, CR6_EQ, 20 */
		/* 82080954h case   52:*/		if ( regs.CR[6].eq ) { return 0x82080968;  }
		/* 82080954h case   52:*/		return 0x82080958;
		  /* 82080958h */ case   53:  		/* addi R29, R29, -1 */
		/* 82080958h case   53:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 82080958h case   53:*/		return 0x8208095C;
		  /* 8208095Ch */ case   54:  		/* addi R10, R1, 112 */
		/* 8208095Ch case   54:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 8208095Ch case   54:*/		return 0x82080960;
		  /* 82080960h */ case   55:  		/* cmplw CR6, R29, R10 */
		/* 82080960h case   55:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R10);
		/* 82080960h case   55:*/		return 0x82080964;
		  /* 82080964h */ case   56:  		/* bc 4, CR6_LT, -36 */
		/* 82080964h case   56:*/		if ( !regs.CR[6].lt ) { return 0x82080940;  }
		/* 82080964h case   56:*/		return 0x82080968;
	}
	return 0x82080968;
} // Block from 82080884h-82080968h (57 instructions)

//////////////////////////////////////////////////////
// Block at 82080968h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080968);
		  /* 82080968h */ case    0:  		/* lbz R10, <#[R29]> */
		/* 82080968h case    0:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 82080968h case    0:*/		return 0x8208096C;
		  /* 8208096Ch */ case    1:  		/* cmplwi CR6, R10, 46 */
		/* 8208096Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000002E);
		/* 8208096Ch case    1:*/		return 0x82080970;
	}
	return 0x82080970;
} // Block from 82080968h-82080970h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82080970h
// Function '?CodecVideoEncode@D3D@@YAXPAVCDevice@1@KPAPAUPIX_CHUNK@@KKPAUD3DTexture@@QBM33K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080970);
		  /* 82080970h */ case    0:  		/* bc 12, CR6_EQ, 8 */
		/* 82080970h case    0:*/		if ( regs.CR[6].eq ) { return 0x82080978;  }
		/* 82080970h case    0:*/		return 0x82080974;
		  /* 82080974h */ case    1:  		/* mr R29, R11 */
		/* 82080974h case    1:*/		regs.R29 = regs.R11;
		/* 82080974h case    1:*/		return 0x82080978;
	}
	return 0x82080978;
} // Block from 82080970h-82080978h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82080978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080978);
		  /* 82080978h */ case    0:  		/* lwz R10, <#[R30 + 596]> */
		/* 82080978h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000254) );
		/* 82080978h case    0:*/		return 0x8208097C;
		  /* 8208097Ch */ case    1:  		/* lis R11, -32256 */
		/* 8208097Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8208097Ch case    1:*/		return 0x82080980;
		  /* 82080980h */ case    2:  		/* mr R31, R25 */
		/* 82080980h case    2:*/		regs.R31 = regs.R25;
		/* 82080980h case    2:*/		return 0x82080984;
		  /* 82080984h */ case    3:  		/* rlwinm. R10, R10, 0, 12, 17 */
		/* 82080984h case    3:*/		cpu::op::rlwinm<1,0,12,17>(regs,&regs.R10,regs.R10);
		/* 82080984h case    3:*/		return 0x82080988;
		  /* 82080988h */ case    4:  		/* addi R27, R11, 16804 */
		/* 82080988h case    4:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x41A4);
		/* 82080988h case    4:*/		return 0x8208098C;
		  /* 8208098Ch */ case    5:  		/* bc 12, CR0_EQ, 208 */
		/* 8208098Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x82080A5C;  }
		/* 8208098Ch case    5:*/		return 0x82080990;
		  /* 82080990h */ case    6:  		/* addi R28, R30, 16 */
		/* 82080990h case    6:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R30,0x10);
		/* 82080990h case    6:*/		return 0x82080994;
		  /* 82080994h */ case    7:  		/* lis R26, -32215 */
		/* 82080994h case    7:*/		cpu::op::lis<0>(regs,&regs.R26,0xFFFF8229);
		/* 82080994h case    7:*/		return 0x82080998;
		  /* 82080998h */ case    8:  		/* lbz R11, <#[R26 - 31324]> */
		/* 82080998h case    8:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R26 + 0xFFFF85A4) );
		/* 82080998h case    8:*/		return 0x8208099C;
		  /* 8208099Ch */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 8208099Ch case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8208099Ch case    9:*/		return 0x820809A0;
		  /* 820809A0h */ case   10:  		/* bc 4, CR0_EQ, -408 */
		/* 820809A0h case   10:*/		if ( !regs.CR[0].eq ) { return 0x82080808;  }
		/* 820809A0h case   10:*/		return 0x820809A4;
		  /* 820809A4h */ case   11:  		/* addi R11, R1, 112 */
		/* 820809A4h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 820809A4h case   11:*/		return 0x820809A8;
		  /* 820809A8h */ case   12:  		/* addi R10, R1, 480 */
		/* 820809A8h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x1E0);
		/* 820809A8h case   12:*/		return 0x820809AC;
		  /* 820809ACh */ case   13:  		/* subf R11, R11, R29 */
		/* 820809ACh case   13:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 820809ACh case   13:*/		return 0x820809B0;
		  /* 820809B0h */ case   14:  		/* mr R4, R27 */
		/* 820809B0h case   14:*/		regs.R4 = regs.R27;
		/* 820809B0h case   14:*/		return 0x820809B4;
		  /* 820809B4h */ case   15:  		/* add R6, R11, R10 */
		/* 820809B4h case   15:*/		cpu::op::add<0>(regs,&regs.R6,regs.R11,regs.R10);
		/* 820809B4h case   15:*/		return 0x820809B8;
		  /* 820809B8h */ case   16:  		/* mr R5, R31 */
		/* 820809B8h case   16:*/		regs.R5 = regs.R31;
		/* 820809B8h case   16:*/		return 0x820809BC;
		  /* 820809BCh */ case   17:  		/* mr R3, R29 */
		/* 820809BCh case   17:*/		regs.R3 = regs.R29;
		/* 820809BCh case   17:*/		return 0x820809C0;
		  /* 820809C0h */ case   18:  		/* bl 2016856 */
		/* 820809C0h case   18:*/		regs.LR = 0x820809C4; return 0x8226D018;
		/* 820809C0h case   18:*/		return 0x820809C4;
		  /* 820809C4h */ case   19:  		/* li R9, 0 */
		/* 820809C4h case   19:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820809C4h case   19:*/		return 0x820809C8;
		  /* 820809C8h */ case   20:  		/* lis R8, 26624 */
		/* 820809C8h case   20:*/		cpu::op::lis<0>(regs,&regs.R8,0x6800);
		/* 820809C8h case   20:*/		return 0x820809CC;
		  /* 820809CCh */ case   21:  		/* li R7, 2 */
		/* 820809CCh case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 820809CCh case   21:*/		return 0x820809D0;
		  /* 820809D0h */ case   22:  		/* li R6, 0 */
		/* 820809D0h case   22:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820809D0h case   22:*/		return 0x820809D4;
		  /* 820809D4h */ case   23:  		/* li R5, 0 */
		/* 820809D4h case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820809D4h case   23:*/		return 0x820809D8;
		  /* 820809D8h */ case   24:  		/* lis R4, 16384 */
		/* 820809D8h case   24:*/		cpu::op::lis<0>(regs,&regs.R4,0x4000);
		/* 820809D8h case   24:*/		return 0x820809DC;
		  /* 820809DCh */ case   25:  		/* addi R3, R1, 112 */
		/* 820809DCh case   25:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 820809DCh case   25:*/		return 0x820809E0;
		  /* 820809E0h */ case   26:  		/* bl 33552 */
		/* 820809E0h case   26:*/		regs.LR = 0x820809E4; return 0x82088CF0;
		/* 820809E0h case   26:*/		return 0x820809E4;
		  /* 820809E4h */ case   27:  		/* stw R3, <#[R28 + 4]> */
		/* 820809E4h case   27:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x00000004) );
		/* 820809E4h case   27:*/		return 0x820809E8;
		  /* 820809E8h */ case   28:  		/* cmpwi CR6, R3, -1 */
		/* 820809E8h case   28:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820809E8h case   28:*/		return 0x820809EC;
		  /* 820809ECh */ case   29:  		/* bc 12, CR6_EQ, -484 */
		/* 820809ECh case   29:*/		if ( regs.CR[6].eq ) { return 0x82080808;  }
		/* 820809ECh case   29:*/		return 0x820809F0;
		  /* 820809F0h */ case   30:  		/* lwz R11, <#[R30 + 596]> */
		/* 820809F0h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000254) );
		/* 820809F0h case   30:*/		return 0x820809F4;
		  /* 820809F4h */ case   31:  		/* rlwinm R11, R11, 18, 26, 31 */
		/* 820809F4h case   31:*/		cpu::op::rlwinm<0,18,26,31>(regs,&regs.R11,regs.R11);
		/* 820809F4h case   31:*/		return 0x820809F8;
		  /* 820809F8h */ case   32:  		/* addi R11, R11, -1 */
		/* 820809F8h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820809F8h case   32:*/		return 0x820809FC;
		  /* 820809FCh */ case   33:  		/* cmplw CR6, R31, R11 */
		/* 820809FCh case   33:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 820809FCh case   33:*/		return 0x82080A00;
		  /* 82080A00h */ case   34:  		/* bc 4, CR6_EQ, 36 */
		/* 82080A00h case   34:*/		if ( !regs.CR[6].eq ) { return 0x82080A24;  }
		/* 82080A00h case   34:*/		return 0x82080A04;
		  /* 82080A04h */ case   35:  		/* lwz R11, <#[R30 + 384]> */
		/* 82080A04h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000180) );
		/* 82080A04h case   35:*/		return 0x82080A08;
		  /* 82080A08h */ case   36:  		/* cmplwi CR6, R11, 0 */
		/* 82080A08h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82080A08h case   36:*/		return 0x82080A0C;
		  /* 82080A0Ch */ case   37:  		/* bc 12, CR6_EQ, 12 */
		/* 82080A0Ch case   37:*/		if ( regs.CR[6].eq ) { return 0x82080A18;  }
		/* 82080A0Ch case   37:*/		return 0x82080A10;
		  /* 82080A10h */ case   38:  		/* rldicl R11, R11, 0, 32 */
		/* 82080A10h case   38:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R11);
		/* 82080A10h case   38:*/		return 0x82080A14;
		  /* 82080A14h */ case   39:  		/* b 24 */
		/* 82080A14h case   39:*/		return 0x82080A2C;
		/* 82080A14h case   39:*/		return 0x82080A18;
	}
	return 0x82080A18;
} // Block from 82080978h-82080A18h (40 instructions)

//////////////////////////////////////////////////////
// Block at 82080A18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080A18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080A18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080A18);
		  /* 82080A18h */ case    0:  		/* li R11, 1 */
		/* 82080A18h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82080A18h case    0:*/		return 0x82080A1C;
		  /* 82080A1Ch */ case    1:  		/* rldicr R11, R11, 32, 63 */
		/* 82080A1Ch case    1:*/		cpu::op::rldicr<0,32,63>(regs,&regs.R11,regs.R11);
		/* 82080A1Ch case    1:*/		return 0x82080A20;
		  /* 82080A20h */ case    2:  		/* b 12 */
		/* 82080A20h case    2:*/		return 0x82080A2C;
		/* 82080A20h case    2:*/		return 0x82080A24;
	}
	return 0x82080A24;
} // Block from 82080A18h-82080A24h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82080A24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080A24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080A24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080A24);
		  /* 82080A24h */ case    0:  		/* li R11, 0 */
		/* 82080A24h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82080A24h case    0:*/		return 0x82080A28;
		  /* 82080A28h */ case    1:  		/* oris R11, R11, 65520 */
		/* 82080A28h case    1:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0xFFF0);
		/* 82080A28h case    1:*/		return 0x82080A2C;
	}
	return 0x82080A2C;
} // Block from 82080A24h-82080A2Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82080A2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080A2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080A2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080A2C);
		  /* 82080A2Ch */ case    0:  		/* std R11, <#[R1 + 80]> */
		/* 82080A2Ch case    0:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82080A2Ch case    0:*/		return 0x82080A30;
		  /* 82080A30h */ case    1:  		/* li R6, 0 */
		/* 82080A30h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82080A30h case    1:*/		return 0x82080A34;
		  /* 82080A34h */ case    2:  		/* addi R5, R1, 80 */
		/* 82080A34h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82080A34h case    2:*/		return 0x82080A38;
		  /* 82080A38h */ case    3:  		/* lwz R4, <#[R1 + 84]> */
		/* 82080A38h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000054) );
		/* 82080A38h case    3:*/		return 0x82080A3C;
		  /* 82080A3Ch */ case    4:  		/* bl 32444 */
		/* 82080A3Ch case    4:*/		regs.LR = 0x82080A40; return 0x820888F8;
		/* 82080A3Ch case    4:*/		return 0x82080A40;
		  /* 82080A40h */ case    5:  		/* lwzu R3, <#[R28 + 4]> */
		/* 82080A40h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000004) );
		regs.R28 = (uint32)(regs.R28 + 0x00000004);
		/* 82080A40h case    5:*/		return 0x82080A44;
		  /* 82080A44h */ case    6:  		/* bl 32268 */
		/* 82080A44h case    6:*/		regs.LR = 0x82080A48; return 0x82088850;
		/* 82080A44h case    6:*/		return 0x82080A48;
		  /* 82080A48h */ case    7:  		/* lwz R11, <#[R30 + 596]> */
		/* 82080A48h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000254) );
		/* 82080A48h case    7:*/		return 0x82080A4C;
		  /* 82080A4Ch */ case    8:  		/* addi R31, R31, 1 */
		/* 82080A4Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82080A4Ch case    8:*/		return 0x82080A50;
		  /* 82080A50h */ case    9:  		/* rlwinm R11, R11, 18, 26, 31 */
		/* 82080A50h case    9:*/		cpu::op::rlwinm<0,18,26,31>(regs,&regs.R11,regs.R11);
		/* 82080A50h case    9:*/		return 0x82080A54;
		  /* 82080A54h */ case   10:  		/* cmplw CR6, R31, R11 */
		/* 82080A54h case   10:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 82080A54h case   10:*/		return 0x82080A58;
		  /* 82080A58h */ case   11:  		/* bc 12, CR6_LT, -192 */
		/* 82080A58h case   11:*/		if ( regs.CR[6].lt ) { return 0x82080998;  }
		/* 82080A58h case   11:*/		return 0x82080A5C;
	}
	return 0x82080A5C;
} // Block from 82080A2Ch-82080A5Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 82080A5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080A5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080A5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080A5C);
		  /* 82080A5Ch */ case    0:  		/* addi R11, R1, 112 */
		/* 82080A5Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 82080A5Ch case    0:*/		return 0x82080A60;
		  /* 82080A60h */ case    1:  		/* addi R10, R1, 480 */
		/* 82080A60h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x1E0);
		/* 82080A60h case    1:*/		return 0x82080A64;
		  /* 82080A64h */ case    2:  		/* subf R11, R11, R29 */
		/* 82080A64h case    2:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 82080A64h case    2:*/		return 0x82080A68;
		  /* 82080A68h */ case    3:  		/* add R28, R11, R10 */
		/* 82080A68h case    3:*/		cpu::op::add<0>(regs,&regs.R28,regs.R11,regs.R10);
		/* 82080A68h case    3:*/		return 0x82080A6C;
		  /* 82080A6Ch */ case    4:  		/* mr R4, R27 */
		/* 82080A6Ch case    4:*/		regs.R4 = regs.R27;
		/* 82080A6Ch case    4:*/		return 0x82080A70;
		  /* 82080A70h */ case    5:  		/* mr R6, R28 */
		/* 82080A70h case    5:*/		regs.R6 = regs.R28;
		/* 82080A70h case    5:*/		return 0x82080A74;
		  /* 82080A74h */ case    6:  		/* mr R5, R31 */
		/* 82080A74h case    6:*/		regs.R5 = regs.R31;
		/* 82080A74h case    6:*/		return 0x82080A78;
		  /* 82080A78h */ case    7:  		/* mr R3, R29 */
		/* 82080A78h case    7:*/		regs.R3 = regs.R29;
		/* 82080A78h case    7:*/		return 0x82080A7C;
		  /* 82080A7Ch */ case    8:  		/* bl 2016668 */
		/* 82080A7Ch case    8:*/		regs.LR = 0x82080A80; return 0x8226D018;
		/* 82080A7Ch case    8:*/		return 0x82080A80;
		  /* 82080A80h */ case    9:  		/* addi R3, R1, 112 */
		/* 82080A80h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 82080A80h case    9:*/		return 0x82080A84;
		  /* 82080A84h */ case   10:  		/* addi R31, R31, 1 */
		/* 82080A84h case   10:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82080A84h case   10:*/		return 0x82080A88;
		  /* 82080A88h */ case   11:  		/* bl 33200 */
		/* 82080A88h case   11:*/		regs.LR = 0x82080A8C; return 0x82088C38;
		/* 82080A88h case   11:*/		return 0x82080A8C;
		  /* 82080A8Ch */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 82080A8Ch case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82080A8Ch case   12:*/		return 0x82080A90;
		  /* 82080A90h */ case   13:  		/* bc 4, CR0_EQ, -36 */
		/* 82080A90h case   13:*/		if ( !regs.CR[0].eq ) { return 0x82080A6C;  }
		/* 82080A90h case   13:*/		return 0x82080A94;
		  /* 82080A94h */ case   14:  		/* stw R25, <#[R30 + 348]> */
		/* 82080A94h case   14:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R30 + 0x0000015C) );
		/* 82080A94h case   14:*/		return 0x82080A98;
		  /* 82080A98h */ case   15:  		/* li R6, 0 */
		/* 82080A98h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82080A98h case   15:*/		return 0x82080A9C;
		  /* 82080A9Ch */ case   16:  		/* stw R25, <#[R30 + 352]> */
		/* 82080A9Ch case   16:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R30 + 0x00000160) );
		/* 82080A9Ch case   16:*/		return 0x82080AA0;
		  /* 82080AA0h */ case   17:  		/* li R5, 0 */
		/* 82080AA0h case   17:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82080AA0h case   17:*/		return 0x82080AA4;
		  /* 82080AA4h */ case   18:  		/* stw R25, <#[R30 + 356]> */
		/* 82080AA4h case   18:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R30 + 0x00000164) );
		/* 82080AA4h case   18:*/		return 0x82080AA8;
		  /* 82080AA8h */ case   19:  		/* li R4, 0 */
		/* 82080AA8h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82080AA8h case   19:*/		return 0x82080AAC;
		  /* 82080AACh */ case   20:  		/* stw R25, <#[R30 + 360]> */
		/* 82080AACh case   20:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R30 + 0x00000168) );
		/* 82080AACh case   20:*/		return 0x82080AB0;
		  /* 82080AB0h */ case   21:  		/* addi R31, R30, 348 */
		/* 82080AB0h case   21:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R30,0x15C);
		/* 82080AB0h case   21:*/		return 0x82080AB4;
		  /* 82080AB4h */ case   22:  		/* stw R25, <#[R30 + 364]> */
		/* 82080AB4h case   22:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R30 + 0x0000016C) );
		/* 82080AB4h case   22:*/		return 0x82080AB8;
		  /* 82080AB8h */ case   23:  		/* bl 32992 */
		/* 82080AB8h case   23:*/		regs.LR = 0x82080ABC; return 0x82088B98;
		/* 82080AB8h case   23:*/		return 0x82080ABC;
		  /* 82080ABCh */ case   24:  		/* cmplwi CR0, R3, 0 */
		/* 82080ABCh case   24:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82080ABCh case   24:*/		return 0x82080AC0;
		  /* 82080AC0h */ case   25:  		/* stw R3, <#[R30 + 364]> */
		/* 82080AC0h case   25:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000016C) );
		/* 82080AC0h case   25:*/		return 0x82080AC4;
		  /* 82080AC4h */ case   26:  		/* bc 12, CR0_EQ, -700 */
		/* 82080AC4h case   26:*/		if ( regs.CR[0].eq ) { return 0x82080808;  }
		/* 82080AC4h case   26:*/		return 0x82080AC8;
		  /* 82080AC8h */ case   27:  		/* li R5, 2048 */
		/* 82080AC8h case   27:*/		cpu::op::li<0>(regs,&regs.R5,0x800);
		/* 82080AC8h case   27:*/		return 0x82080ACC;
		  /* 82080ACCh */ case   28:  		/* lwz R3, <#[R30]> */
		/* 82080ACCh case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 82080ACCh case   28:*/		return 0x82080AD0;
		  /* 82080AD0h */ case   29:  		/* li R4, 0 */
		/* 82080AD0h case   29:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82080AD0h case   29:*/		return 0x82080AD4;
		  /* 82080AD4h */ case   30:  		/* stw R25, <#[R30 + 356]> */
		/* 82080AD4h case   30:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R30 + 0x00000164) );
		/* 82080AD4h case   30:*/		return 0x82080AD8;
		  /* 82080AD8h */ case   31:  		/* stw R25, <#[R30 + 360]> */
		/* 82080AD8h case   31:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R30 + 0x00000168) );
		/* 82080AD8h case   31:*/		return 0x82080ADC;
		  /* 82080ADCh */ case   32:  		/* bl 67684 */
		/* 82080ADCh case   32:*/		regs.LR = 0x82080AE0; return 0x82091340;
		/* 82080ADCh case   32:*/		return 0x82080AE0;
		  /* 82080AE0h */ case   33:  		/* mr R7, R31 */
		/* 82080AE0h case   33:*/		regs.R7 = regs.R31;
		/* 82080AE0h case   33:*/		return 0x82080AE4;
		  /* 82080AE4h */ case   34:  		/* addi R6, R1, 96 */
		/* 82080AE4h case   34:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x60);
		/* 82080AE4h case   34:*/		return 0x82080AE8;
		  /* 82080AE8h */ case   35:  		/* lwz R4, <#[R30]> */
		/* 82080AE8h case   35:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 82080AE8h case   35:*/		return 0x82080AEC;
		  /* 82080AECh */ case   36:  		/* li R5, 2048 */
		/* 82080AECh case   36:*/		cpu::op::li<0>(regs,&regs.R5,0x800);
		/* 82080AECh case   36:*/		return 0x82080AF0;
		  /* 82080AF0h */ case   37:  		/* lwz R3, <#[R30 + 20]> */
		/* 82080AF0h case   37:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000014) );
		/* 82080AF0h case   37:*/		return 0x82080AF4;
		  /* 82080AF4h */ case   38:  		/* bl 32628 */
		/* 82080AF4h case   38:*/		regs.LR = 0x82080AF8; return 0x82088A68;
		/* 82080AF4h case   38:*/		return 0x82080AF8;
		  /* 82080AF8h */ case   39:  		/* li R4, -1 */
		/* 82080AF8h case   39:*/		cpu::op::li<0>(regs,&regs.R4,0xFFFFFFFF);
		/* 82080AF8h case   39:*/		return 0x82080AFC;
		  /* 82080AFCh */ case   40:  		/* lwz R3, <#[R30 + 364]> */
		/* 82080AFCh case   40:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x0000016C) );
		/* 82080AFCh case   40:*/		return 0x82080B00;
		  /* 82080B00h */ case   41:  		/* bl 32912 */
		/* 82080B00h case   41:*/		regs.LR = 0x82080B04; return 0x82088B90;
		/* 82080B00h case   41:*/		return 0x82080B04;
		  /* 82080B04h */ case   42:  		/* addi R3, R1, 384 */
		/* 82080B04h case   42:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x180);
		/* 82080B04h case   42:*/		return 0x82080B08;
		  /* 82080B08h */ case   43:  		/* bl 2016848 */
		/* 82080B08h case   43:*/		regs.LR = 0x82080B0C; return 0x8226D158;
		/* 82080B08h case   43:*/		return 0x82080B0C;
		  /* 82080B0Ch */ case   44:  		/* li R11, 2048 */
		/* 82080B0Ch case   44:*/		cpu::op::li<0>(regs,&regs.R11,0x800);
		/* 82080B0Ch case   44:*/		return 0x82080B10;
		  /* 82080B10h */ case   45:  		/* lbz R10, <#[R30 + 600]> */
		/* 82080B10h case   45:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000258) );
		/* 82080B10h case   45:*/		return 0x82080B14;
		  /* 82080B14h */ case   46:  		/* li R3, 1 */
		/* 82080B14h case   46:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82080B14h case   46:*/		return 0x82080B18;
		  /* 82080B18h */ case   47:  		/* stw R11, <#[R30 + 380]> */
		/* 82080B18h case   47:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000017C) );
		/* 82080B18h case   47:*/		return 0x82080B1C;
		  /* 82080B1Ch */ case   48:  		/* lwz R9, <#[R30 + 596]> */
		/* 82080B1Ch case   48:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000254) );
		/* 82080B1Ch case   48:*/		return 0x82080B20;
		  /* 82080B20h */ case   49:  		/* stw R25, <#[R30 + 584]> */
		/* 82080B20h case   49:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R30 + 0x00000248) );
		/* 82080B20h case   49:*/		return 0x82080B24;
		  /* 82080B24h */ case   50:  		/* rlwinm R9, R9, 0, 12, 5 */
		/* 82080B24h case   50:*/		cpu::op::rlwinm<0,0,12,5>(regs,&regs.R9,regs.R9);
		/* 82080B24h case   50:*/		return 0x82080B28;
		  /* 82080B28h */ case   51:  		/* stw R9, <#[R30 + 596]> */
		/* 82080B28h case   51:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000254) );
		/* 82080B28h case   51:*/		return 0x82080B2C;
		  /* 82080B2Ch */ case   52:  		/* lbz R11, <#[R1 + 389]> */
		/* 82080B2Ch case   52:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000185) );
		/* 82080B2Ch case   52:*/		return 0x82080B30;
		  /* 82080B30h */ case   53:  		/* addi R11, R11, -1 */
		/* 82080B30h case   53:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82080B30h case   53:*/		return 0x82080B34;
		  /* 82080B34h */ case   54:  		/* cntlzw R11, R11 */
		/* 82080B34h case   54:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82080B34h case   54:*/		return 0x82080B38;
		  /* 82080B38h */ case   55:  		/* rlwimi R10, R11, 2, 24, 24 */
		/* 82080B38h case   55:*/		cpu::op::rlwimi<0,2,24,24>(regs,&regs.R10,regs.R11);
		/* 82080B38h case   55:*/		return 0x82080B3C;
		  /* 82080B3Ch */ case   56:  		/* stb R10, <#[R30 + 600]> */
		/* 82080B3Ch case   56:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R30 + 0x00000258) );
		/* 82080B3Ch case   56:*/		return 0x82080B40;
	}
	return 0x82080B40;
} // Block from 82080A5Ch-82080B40h (57 instructions)

//////////////////////////////////////////////////////
// Block at 82080B40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080B40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080B40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080B40);
		  /* 82080B40h */ case    0:  		/* addi R1, R1, 816 */
		/* 82080B40h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x330);
		/* 82080B40h case    0:*/		return 0x82080B44;
		  /* 82080B44h */ case    1:  		/* b 67412 */
		/* 82080B44h case    1:*/		return 0x82091298;
		/* 82080B44h case    1:*/		return 0x82080B48;
	}
	return 0x82080B48;
} // Block from 82080B40h-82080B48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82080B48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080B48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080B48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080B48);
		  /* 82080B48h */ case    0:  		/* mfspr R12, LR */
		/* 82080B48h case    0:*/		regs.R12 = regs.LR;
		/* 82080B48h case    0:*/		return 0x82080B4C;
		  /* 82080B4Ch */ case    1:  		/* bl 67316 */
		/* 82080B4Ch case    1:*/		regs.LR = 0x82080B50; return 0x82091240;
		/* 82080B4Ch case    1:*/		return 0x82080B50;
		  /* 82080B50h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82080B50h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82080B50h case    2:*/		return 0x82080B54;
		  /* 82080B54h */ case    3:  		/* mr R28, R4 */
		/* 82080B54h case    3:*/		regs.R28 = regs.R4;
		/* 82080B54h case    3:*/		return 0x82080B58;
		  /* 82080B58h */ case    4:  		/* li R6, 16 */
		/* 82080B58h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x10);
		/* 82080B58h case    4:*/		return 0x82080B5C;
		  /* 82080B5Ch */ case    5:  		/* li R5, 112 */
		/* 82080B5Ch case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x70);
		/* 82080B5Ch case    5:*/		return 0x82080B60;
		  /* 82080B60h */ case    6:  		/* li R4, 0 */
		/* 82080B60h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82080B60h case    6:*/		return 0x82080B64;
		  /* 82080B64h */ case    7:  		/* mr R31, R3 */
		/* 82080B64h case    7:*/		regs.R31 = regs.R3;
		/* 82080B64h case    7:*/		return 0x82080B68;
		  /* 82080B68h */ case    8:  		/* addi R30, R3, 23772 */
		/* 82080B68h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R3,0x5CDC);
		/* 82080B68h case    8:*/		return 0x82080B6C;
		  /* 82080B6Ch */ case    9:  		/* bl -96164 */
		/* 82080B6Ch case    9:*/		regs.LR = 0x82080B70; return 0x820693C8;
		/* 82080B6Ch case    9:*/		return 0x82080B70;
		  /* 82080B70h */ case   10:  		/* ld R4, <#[R31 + 16]> */
		/* 82080B70h case   10:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 82080B70h case   10:*/		return 0x82080B74;
		  /* 82080B74h */ case   11:  		/* cmpldi CR6, R4, 0 */
		/* 82080B74h case   11:*/		cpu::op::cmpldi<6>(regs,regs.R4,0x00000000);
		/* 82080B74h case   11:*/		return 0x82080B78;
		  /* 82080B78h */ case   12:  		/* bc 12, CR6_EQ, 280 */
		/* 82080B78h case   12:*/		if ( regs.CR[6].eq ) { return 0x82080C90;  }
		/* 82080B78h case   12:*/		return 0x82080B7C;
		  /* 82080B7Ch */ case   13:  		/* ld R11, <#[R31 + 40]> */
		/* 82080B7Ch case   13:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82080B7Ch case   13:*/		return 0x82080B80;
		  /* 82080B80h */ case   14:  		/* and R11, R11, R4 */
		/* 82080B80h case   14:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 82080B80h case   14:*/		return 0x82080B84;
		  /* 82080B84h */ case   15:  		/* cmpldi CR6, R11, 0 */
		/* 82080B84h case   15:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82080B84h case   15:*/		return 0x82080B88;
		  /* 82080B88h */ case   16:  		/* bc 12, CR6_EQ, 20 */
		/* 82080B88h case   16:*/		if ( regs.CR[6].eq ) { return 0x82080B9C;  }
		/* 82080B88h case   16:*/		return 0x82080B8C;
		  /* 82080B8Ch */ case   17:  		/* mr R3, R31 */
		/* 82080B8Ch case   17:*/		regs.R3 = regs.R31;
		/* 82080B8Ch case   17:*/		return 0x82080B90;
		  /* 82080B90h */ case   18:  		/* lwz R5, <#[R31 + 10560]> */
		/* 82080B90h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00002940) );
		/* 82080B90h case   18:*/		return 0x82080B94;
		  /* 82080B94h */ case   19:  		/* bl 10228 */
		/* 82080B94h case   19:*/		regs.LR = 0x82080B98; return 0x82083388;
		/* 82080B94h case   19:*/		return 0x82080B98;
		  /* 82080B98h */ case   20:  		/* std R3, <#[R31 + 16]> */
		/* 82080B98h case   20:*/		cpu::mem::store64( regs, regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 82080B98h case   20:*/		return 0x82080B9C;
	}
	return 0x82080B9C;
} // Block from 82080B48h-82080B9Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 82080B9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080B9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080B9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080B9C);
		  /* 82080B9Ch */ case    0:  		/* ld R11, <#[R31 + 16]> */
		/* 82080B9Ch case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82080B9Ch case    0:*/		return 0x82080BA0;
		  /* 82080BA0h */ case    1:  		/* rldicl R10, R11, 0, 52 */
		/* 82080BA0h case    1:*/		cpu::op::rldicl<0,0,52>(regs,&regs.R10,regs.R11);
		/* 82080BA0h case    1:*/		return 0x82080BA4;
		  /* 82080BA4h */ case    2:  		/* cmpldi CR6, R10, 0 */
		/* 82080BA4h case    2:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 82080BA4h case    2:*/		return 0x82080BA8;
		  /* 82080BA8h */ case    3:  		/* bc 12, CR6_EQ, 36 */
		/* 82080BA8h case    3:*/		if ( regs.CR[6].eq ) { return 0x82080BCC;  }
		/* 82080BA8h case    3:*/		return 0x82080BAC;
		  /* 82080BACh */ case    4:  		/* addi R6, R31, 10548 */
		/* 82080BACh case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x2934);
		/* 82080BACh case    4:*/		return 0x82080BB0;
		  /* 82080BB0h */ case    5:  		/* li R5, 8704 */
		/* 82080BB0h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x2200);
		/* 82080BB0h case    5:*/		return 0x82080BB4;
		  /* 82080BB4h */ case    6:  		/* rldicr R4, R11, 52, 11 */
		/* 82080BB4h case    6:*/		cpu::op::rldicr<0,52,11>(regs,&regs.R4,regs.R11);
		/* 82080BB4h case    6:*/		return 0x82080BB8;
		  /* 82080BB8h */ case    7:  		/* mr R3, R31 */
		/* 82080BB8h case    7:*/		regs.R3 = regs.R31;
		/* 82080BB8h case    7:*/		return 0x82080BBC;
		  /* 82080BBCh */ case    8:  		/* bl 11100 */
		/* 82080BBCh case    8:*/		regs.LR = 0x82080BC0; return 0x82083718;
		/* 82080BBCh case    8:*/		return 0x82080BC0;
		  /* 82080BC0h */ case    9:  		/* ld R11, <#[R31 + 16]> */
		/* 82080BC0h case    9:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82080BC0h case    9:*/		return 0x82080BC4;
		  /* 82080BC4h */ case   10:  		/* rldicr R11, R11, 0, 51 */
		/* 82080BC4h case   10:*/		cpu::op::rldicr<0,0,51>(regs,&regs.R11,regs.R11);
		/* 82080BC4h case   10:*/		return 0x82080BC8;
		  /* 82080BC8h */ case   11:  		/* std R11, <#[R31 + 16]> */
		/* 82080BC8h case   11:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82080BC8h case   11:*/		return 0x82080BCC;
	}
	return 0x82080BCC;
} // Block from 82080B9Ch-82080BCCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 82080BCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080BCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080BCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080BCC);
		  /* 82080BCCh */ case    0:  		/* ld R11, <#[R31 + 16]> */
		/* 82080BCCh case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82080BCCh case    0:*/		return 0x82080BD0;
		  /* 82080BD0h */ case    1:  		/* rlwinm R10, R11, 0, 15, 19 */
		/* 82080BD0h case    1:*/		cpu::op::rlwinm<0,0,15,19>(regs,&regs.R10,regs.R11);
		/* 82080BD0h case    1:*/		return 0x82080BD4;
		  /* 82080BD4h */ case    2:  		/* cmpldi CR6, R10, 0 */
		/* 82080BD4h case    2:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 82080BD4h case    2:*/		return 0x82080BD8;
		  /* 82080BD8h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 82080BD8h case    3:*/		if ( regs.CR[6].eq ) { return 0x82080C04;  }
		/* 82080BD8h case    3:*/		return 0x82080BDC;
		  /* 82080BDCh */ case    4:  		/* addi R6, R31, 10528 */
		/* 82080BDCh case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x2920);
		/* 82080BDCh case    4:*/		return 0x82080BE0;
		  /* 82080BE0h */ case    5:  		/* li R5, 8576 */
		/* 82080BE0h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x2180);
		/* 82080BE0h case    5:*/		return 0x82080BE4;
		  /* 82080BE4h */ case    6:  		/* rldicr R4, R11, 47, 4 */
		/* 82080BE4h case    6:*/		cpu::op::rldicr<0,47,4>(regs,&regs.R4,regs.R11);
		/* 82080BE4h case    6:*/		return 0x82080BE8;
		  /* 82080BE8h */ case    7:  		/* mr R3, R31 */
		/* 82080BE8h case    7:*/		regs.R3 = regs.R31;
		/* 82080BE8h case    7:*/		return 0x82080BEC;
		  /* 82080BECh */ case    8:  		/* bl 11052 */
		/* 82080BECh case    8:*/		regs.LR = 0x82080BF0; return 0x82083718;
		/* 82080BECh case    8:*/		return 0x82080BF0;
		  /* 82080BF0h */ case    9:  		/* lis R12, -2 */
		/* 82080BF0h case    9:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFFFE);
		/* 82080BF0h case    9:*/		return 0x82080BF4;
		  /* 82080BF4h */ case   10:  		/* ld R11, <#[R31 + 16]> */
		/* 82080BF4h case   10:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82080BF4h case   10:*/		return 0x82080BF8;
		  /* 82080BF8h */ case   11:  		/* ori R12, R12, 4095 */
		/* 82080BF8h case   11:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xFFF);
		/* 82080BF8h case   11:*/		return 0x82080BFC;
		  /* 82080BFCh */ case   12:  		/* and R11, R11, R12 */
		/* 82080BFCh case   12:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 82080BFCh case   12:*/		return 0x82080C00;
		  /* 82080C00h */ case   13:  		/* std R11, <#[R31 + 16]> */
		/* 82080C00h case   13:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82080C00h case   13:*/		return 0x82080C04;
	}
	return 0x82080C04;
} // Block from 82080BCCh-82080C04h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82080C04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080C04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080C04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080C04);
		  /* 82080C04h */ case    0:  		/* lis R12, 0 */
		/* 82080C04h case    0:*/		cpu::op::lis<0>(regs,&regs.R12,0x0);
		/* 82080C04h case    0:*/		return 0x82080C08;
		  /* 82080C08h */ case    1:  		/* ld R11, <#[R31 + 16]> */
		/* 82080C08h case    1:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82080C08h case    1:*/		return 0x82080C0C;
		  /* 82080C0Ch */ case    2:  		/* ori R12, R12, 65535 */
		/* 82080C0Ch case    2:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xFFFF);
		/* 82080C0Ch case    2:*/		return 0x82080C10;
		  /* 82080C10h */ case    3:  		/* rldicr R12, R12, 42, 21 */
		/* 82080C10h case    3:*/		cpu::op::rldicr<0,42,21>(regs,&regs.R12,regs.R12);
		/* 82080C10h case    3:*/		return 0x82080C14;
		  /* 82080C14h */ case    4:  		/* and R10, R11, R12 */
		/* 82080C14h case    4:*/		cpu::op::and<0>(regs,&regs.R10,regs.R11,regs.R12);
		/* 82080C14h case    4:*/		return 0x82080C18;
		  /* 82080C18h */ case    5:  		/* cmpldi CR6, R10, 0 */
		/* 82080C18h case    5:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 82080C18h case    5:*/		return 0x82080C1C;
		  /* 82080C1Ch */ case    6:  		/* bc 12, CR6_EQ, 48 */
		/* 82080C1Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x82080C4C;  }
		/* 82080C1Ch case    6:*/		return 0x82080C20;
		  /* 82080C20h */ case    7:  		/* addi R6, R31, 10368 */
		/* 82080C20h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x2880);
		/* 82080C20h case    7:*/		return 0x82080C24;
		  /* 82080C24h */ case    8:  		/* li R5, 8192 */
		/* 82080C24h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x2000);
		/* 82080C24h case    8:*/		return 0x82080C28;
		  /* 82080C28h */ case    9:  		/* rldicr R4, R11, 6, 15 */
		/* 82080C28h case    9:*/		cpu::op::rldicr<0,6,15>(regs,&regs.R4,regs.R11);
		/* 82080C28h case    9:*/		return 0x82080C2C;
		  /* 82080C2Ch */ case   10:  		/* mr R3, R31 */
		/* 82080C2Ch case   10:*/		regs.R3 = regs.R31;
		/* 82080C2Ch case   10:*/		return 0x82080C30;
		  /* 82080C30h */ case   11:  		/* bl 10984 */
		/* 82080C30h case   11:*/		regs.LR = 0x82080C34; return 0x82083718;
		/* 82080C30h case   11:*/		return 0x82080C34;
		  /* 82080C34h */ case   12:  		/* lis R12, -1 */
		/* 82080C34h case   12:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFFFF);
		/* 82080C34h case   12:*/		return 0x82080C38;
		  /* 82080C38h */ case   13:  		/* ld R11, <#[R31 + 16]> */
		/* 82080C38h case   13:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82080C38h case   13:*/		return 0x82080C3C;
		  /* 82080C3Ch */ case   14:  		/* ori R12, R12, 0 */
		/* 82080C3Ch case   14:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0x0);
		/* 82080C3Ch case   14:*/		return 0x82080C40;
		  /* 82080C40h */ case   15:  		/* rldicr R12, R12, 42, 63 */
		/* 82080C40h case   15:*/		cpu::op::rldicr<0,42,63>(regs,&regs.R12,regs.R12);
		/* 82080C40h case   15:*/		return 0x82080C44;
		  /* 82080C44h */ case   16:  		/* and R11, R11, R12 */
		/* 82080C44h case   16:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 82080C44h case   16:*/		return 0x82080C48;
		  /* 82080C48h */ case   17:  		/* std R11, <#[R31 + 16]> */
		/* 82080C48h case   17:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82080C48h case   17:*/		return 0x82080C4C;
	}
	return 0x82080C4C;
} // Block from 82080C04h-82080C4Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 82080C4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080C4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080C4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080C4C);
		  /* 82080C4Ch */ case    0:  		/* lis R12, -32 */
		/* 82080C4Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFFE0);
		/* 82080C4Ch case    0:*/		return 0x82080C50;
		  /* 82080C50h */ case    1:  		/* ld R11, <#[R31 + 16]> */
		/* 82080C50h case    1:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82080C50h case    1:*/		return 0x82080C54;
		  /* 82080C54h */ case    2:  		/* rldicl R12, R12, 0, 22 */
		/* 82080C54h case    2:*/		cpu::op::rldicl<0,0,22>(regs,&regs.R12,regs.R12);
		/* 82080C54h case    2:*/		return 0x82080C58;
		  /* 82080C58h */ case    3:  		/* and R10, R11, R12 */
		/* 82080C58h case    3:*/		cpu::op::and<0>(regs,&regs.R10,regs.R11,regs.R12);
		/* 82080C58h case    3:*/		return 0x82080C5C;
		  /* 82080C5Ch */ case    4:  		/* cmpldi CR6, R10, 0 */
		/* 82080C5Ch case    4:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 82080C5Ch case    4:*/		return 0x82080C60;
		  /* 82080C60h */ case    5:  		/* bc 12, CR6_EQ, 48 */
		/* 82080C60h case    5:*/		if ( regs.CR[6].eq ) { return 0x82080C90;  }
		/* 82080C60h case    5:*/		return 0x82080C64;
		  /* 82080C64h */ case    6:  		/* addi R6, R31, 10444 */
		/* 82080C64h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x28CC);
		/* 82080C64h case    6:*/		return 0x82080C68;
		  /* 82080C68h */ case    7:  		/* li R5, 8448 */
		/* 82080C68h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x2100);
		/* 82080C68h case    7:*/		return 0x82080C6C;
		  /* 82080C6Ch */ case    8:  		/* rldicr R4, R11, 22, 20 */
		/* 82080C6Ch case    8:*/		cpu::op::rldicr<0,22,20>(regs,&regs.R4,regs.R11);
		/* 82080C6Ch case    8:*/		return 0x82080C70;
		  /* 82080C70h */ case    9:  		/* mr R3, R31 */
		/* 82080C70h case    9:*/		regs.R3 = regs.R31;
		/* 82080C70h case    9:*/		return 0x82080C74;
		  /* 82080C74h */ case   10:  		/* bl 10916 */
		/* 82080C74h case   10:*/		regs.LR = 0x82080C78; return 0x82083718;
		/* 82080C74h case   10:*/		return 0x82080C78;
		  /* 82080C78h */ case   11:  		/* lis R12, -32 */
		/* 82080C78h case   11:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFFE0);
		/* 82080C78h case   11:*/		return 0x82080C7C;
		  /* 82080C7Ch */ case   12:  		/* ld R11, <#[R31 + 16]> */
		/* 82080C7Ch case   12:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82080C7Ch case   12:*/		return 0x82080C80;
		  /* 82080C80h */ case   13:  		/* ori R12, R12, 0 */
		/* 82080C80h case   13:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0x0);
		/* 82080C80h case   13:*/		return 0x82080C84;
		  /* 82080C84h */ case   14:  		/* rldicr R12, R12, 21, 63 */
		/* 82080C84h case   14:*/		cpu::op::rldicr<0,21,63>(regs,&regs.R12,regs.R12);
		/* 82080C84h case   14:*/		return 0x82080C88;
		  /* 82080C88h */ case   15:  		/* and R11, R11, R12 */
		/* 82080C88h case   15:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 82080C88h case   15:*/		return 0x82080C8C;
		  /* 82080C8Ch */ case   16:  		/* std R11, <#[R31 + 16]> */
		/* 82080C8Ch case   16:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82080C8Ch case   16:*/		return 0x82080C90;
	}
	return 0x82080C90;
} // Block from 82080C4Ch-82080C90h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82080C90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080C90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080C90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080C90);
		  /* 82080C90h */ case    0:  		/* ld R11, <#[R31 + 24]> */
		/* 82080C90h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82080C90h case    0:*/		return 0x82080C94;
		  /* 82080C94h */ case    1:  		/* cmpldi CR6, R11, 0 */
		/* 82080C94h case    1:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82080C94h case    1:*/		return 0x82080C98;
		  /* 82080C98h */ case    2:  		/* bc 12, CR6_EQ, 72 */
		/* 82080C98h case    2:*/		if ( regs.CR[6].eq ) { return 0x82080CE0;  }
		/* 82080C98h case    2:*/		return 0x82080C9C;
		  /* 82080C9Ch */ case    3:  		/* lis R12, 31 */
		/* 82080C9Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R12,0x1F);
		/* 82080C9Ch case    3:*/		return 0x82080CA0;
		  /* 82080CA0h */ case    4:  		/* ori R12, R12, 65535 */
		/* 82080CA0h case    4:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xFFFF);
		/* 82080CA0h case    4:*/		return 0x82080CA4;
		  /* 82080CA4h */ case    5:  		/* rldicr R12, R12, 34, 29 */
		/* 82080CA4h case    5:*/		cpu::op::rldicr<0,34,29>(regs,&regs.R12,regs.R12);
		/* 82080CA4h case    5:*/		return 0x82080CA8;
		  /* 82080CA8h */ case    6:  		/* and R10, R11, R12 */
		/* 82080CA8h case    6:*/		cpu::op::and<0>(regs,&regs.R10,regs.R11,regs.R12);
		/* 82080CA8h case    6:*/		return 0x82080CAC;
		  /* 82080CACh */ case    7:  		/* cmpldi CR6, R10, 0 */
		/* 82080CACh case    7:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 82080CACh case    7:*/		return 0x82080CB0;
		  /* 82080CB0h */ case    8:  		/* bc 12, CR6_EQ, 48 */
		/* 82080CB0h case    8:*/		if ( regs.CR[6].eq ) { return 0x82080CE0;  }
		/* 82080CB0h case    8:*/		return 0x82080CB4;
		  /* 82080CB4h */ case    9:  		/* addi R6, R31, 10596 */
		/* 82080CB4h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x2964);
		/* 82080CB4h case    9:*/		return 0x82080CB8;
		  /* 82080CB8h */ case   10:  		/* li R5, 8832 */
		/* 82080CB8h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x2280);
		/* 82080CB8h case   10:*/		return 0x82080CBC;
		  /* 82080CBCh */ case   11:  		/* rldicr R4, R11, 9, 20 */
		/* 82080CBCh case   11:*/		cpu::op::rldicr<0,9,20>(regs,&regs.R4,regs.R11);
		/* 82080CBCh case   11:*/		return 0x82080CC0;
		  /* 82080CC0h */ case   12:  		/* mr R3, R31 */
		/* 82080CC0h case   12:*/		regs.R3 = regs.R31;
		/* 82080CC0h case   12:*/		return 0x82080CC4;
		  /* 82080CC4h */ case   13:  		/* bl 10836 */
		/* 82080CC4h case   13:*/		regs.LR = 0x82080CC8; return 0x82083718;
		/* 82080CC4h case   13:*/		return 0x82080CC8;
		  /* 82080CC8h */ case   14:  		/* lis R12, -32 */
		/* 82080CC8h case   14:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFFE0);
		/* 82080CC8h case   14:*/		return 0x82080CCC;
		  /* 82080CCCh */ case   15:  		/* ld R11, <#[R31 + 24]> */
		/* 82080CCCh case   15:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82080CCCh case   15:*/		return 0x82080CD0;
		  /* 82080CD0h */ case   16:  		/* ori R12, R12, 0 */
		/* 82080CD0h case   16:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0x0);
		/* 82080CD0h case   16:*/		return 0x82080CD4;
		  /* 82080CD4h */ case   17:  		/* rldicr R12, R12, 34, 63 */
		/* 82080CD4h case   17:*/		cpu::op::rldicr<0,34,63>(regs,&regs.R12,regs.R12);
		/* 82080CD4h case   17:*/		return 0x82080CD8;
		  /* 82080CD8h */ case   18:  		/* and R11, R11, R12 */
		/* 82080CD8h case   18:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 82080CD8h case   18:*/		return 0x82080CDC;
		  /* 82080CDCh */ case   19:  		/* std R11, <#[R31 + 24]> */
		/* 82080CDCh case   19:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82080CDCh case   19:*/		return 0x82080CE0;
	}
	return 0x82080CE0;
} // Block from 82080C90h-82080CE0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82080CE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080CE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080CE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080CE0);
		  /* 82080CE0h */ case    0:  		/* ld R11, <#[R31 + 32]> */
		/* 82080CE0h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82080CE0h case    0:*/		return 0x82080CE4;
		  /* 82080CE4h */ case    1:  		/* cmpldi CR6, R11, 0 */
		/* 82080CE4h case    1:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82080CE4h case    1:*/		return 0x82080CE8;
		  /* 82080CE8h */ case    2:  		/* bc 12, CR6_EQ, 48 */
		/* 82080CE8h case    2:*/		if ( regs.CR[6].eq ) { return 0x82080D18;  }
		/* 82080CE8h case    2:*/		return 0x82080CEC;
		  /* 82080CECh */ case    3:  		/* rldicl R10, R11, 0, 26 */
		/* 82080CECh case    3:*/		cpu::op::rldicl<0,0,26>(regs,&regs.R10,regs.R11);
		/* 82080CECh case    3:*/		return 0x82080CF0;
		  /* 82080CF0h */ case    4:  		/* cmpldi CR6, R10, 0 */
		/* 82080CF0h case    4:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 82080CF0h case    4:*/		return 0x82080CF4;
		  /* 82080CF4h */ case    5:  		/* bc 12, CR6_EQ, 36 */
		/* 82080CF4h case    5:*/		if ( regs.CR[6].eq ) { return 0x82080D18;  }
		/* 82080CF4h case    5:*/		return 0x82080CF8;
		  /* 82080CF8h */ case    6:  		/* addi R6, R31, 10680 */
		/* 82080CF8h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x29B8);
		/* 82080CF8h case    6:*/		return 0x82080CFC;
		  /* 82080CFCh */ case    7:  		/* li R5, 8960 */
		/* 82080CFCh case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x2300);
		/* 82080CFCh case    7:*/		return 0x82080D00;
		  /* 82080D00h */ case    8:  		/* rldicr R4, R11, 26, 37 */
		/* 82080D00h case    8:*/		cpu::op::rldicr<0,26,37>(regs,&regs.R4,regs.R11);
		/* 82080D00h case    8:*/		return 0x82080D04;
		  /* 82080D04h */ case    9:  		/* mr R3, R31 */
		/* 82080D04h case    9:*/		regs.R3 = regs.R31;
		/* 82080D04h case    9:*/		return 0x82080D08;
		  /* 82080D08h */ case   10:  		/* bl 10768 */
		/* 82080D08h case   10:*/		regs.LR = 0x82080D0C; return 0x82083718;
		/* 82080D08h case   10:*/		return 0x82080D0C;
		  /* 82080D0Ch */ case   11:  		/* ld R11, <#[R31 + 32]> */
		/* 82080D0Ch case   11:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82080D0Ch case   11:*/		return 0x82080D10;
		  /* 82080D10h */ case   12:  		/* rldicr R11, R11, 0, 25 */
		/* 82080D10h case   12:*/		cpu::op::rldicr<0,0,25>(regs,&regs.R11,regs.R11);
		/* 82080D10h case   12:*/		return 0x82080D14;
		  /* 82080D14h */ case   13:  		/* std R11, <#[R31 + 32]> */
		/* 82080D14h case   13:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82080D14h case   13:*/		return 0x82080D18;
	}
	return 0x82080D18;
} // Block from 82080CE0h-82080D18h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82080D18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080D18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080D18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080D18);
		  /* 82080D18h */ case    0:  		/* lis R11, -32256 */
		/* 82080D18h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82080D18h case    0:*/		return 0x82080D1C;
		  /* 82080D1Ch */ case    1:  		/* lwz R10, <#[R30 + 604]> */
		/* 82080D1Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000025C) );
		/* 82080D1Ch case    1:*/		return 0x82080D20;
		  /* 82080D20h */ case    2:  		/* addi R24, R11, 9616 */
		/* 82080D20h case    2:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0x2590);
		/* 82080D20h case    2:*/		return 0x82080D24;
		  /* 82080D24h */ case    3:  		/* srawi. R11, R10, 29 */
		/* 82080D24h case    3:*/		cpu::op::srawi<1,29>(regs,&regs.R11,regs.R10);
		/* 82080D24h case    3:*/		return 0x82080D28;
		  /* 82080D28h */ case    4:  		/* bc 4, CR0_EQ, 24 */
		/* 82080D28h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82080D40;  }
		/* 82080D28h case    4:*/		return 0x82080D2C;
		  /* 82080D2Ch */ case    5:  		/* lis R25, 1792 */
		/* 82080D2Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R25,0x700);
		/* 82080D2Ch case    5:*/		return 0x82080D30;
		  /* 82080D30h */ case    6:  		/* mr R26, R24 */
		/* 82080D30h case    6:*/		regs.R26 = regs.R24;
		/* 82080D30h case    6:*/		return 0x82080D34;
		  /* 82080D34h */ case    7:  		/* li R29, 525 */
		/* 82080D34h case    7:*/		cpu::op::li<0>(regs,&regs.R29,0x20D);
		/* 82080D34h case    7:*/		return 0x82080D38;
		  /* 82080D38h */ case    8:  		/* ori R25, R25, 21 */
		/* 82080D38h case    8:*/		cpu::op::ori<0>(regs,&regs.R25,regs.R25,0x15);
		/* 82080D38h case    8:*/		return 0x82080D3C;
		  /* 82080D3Ch */ case    9:  		/* b 72 */
		/* 82080D3Ch case    9:*/		return 0x82080D84;
		/* 82080D3Ch case    9:*/		return 0x82080D40;
	}
	return 0x82080D40;
} // Block from 82080D18h-82080D40h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82080D40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080D40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080D40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080D40);
		  /* 82080D40h */ case    0:  		/* cmpwi CR6, R11, 1 */
		/* 82080D40h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82080D40h case    0:*/		return 0x82080D44;
		  /* 82080D44h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 82080D44h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82080D5C;  }
		/* 82080D44h case    1:*/		return 0x82080D48;
		  /* 82080D48h */ case    2:  		/* lis R25, 1792 */
		/* 82080D48h case    2:*/		cpu::op::lis<0>(regs,&regs.R25,0x700);
		/* 82080D48h case    2:*/		return 0x82080D4C;
		  /* 82080D4Ch */ case    3:  		/* addi R26, R24, 2160 */
		/* 82080D4Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R24,0x870);
		/* 82080D4Ch case    3:*/		return 0x82080D50;
		  /* 82080D50h */ case    4:  		/* li R29, 933 */
		/* 82080D50h case    4:*/		cpu::op::li<0>(regs,&regs.R29,0x3A5);
		/* 82080D50h case    4:*/		return 0x82080D54;
		  /* 82080D54h */ case    5:  		/* ori R25, R25, 19 */
		/* 82080D54h case    5:*/		cpu::op::ori<0>(regs,&regs.R25,regs.R25,0x13);
		/* 82080D54h case    5:*/		return 0x82080D58;
		  /* 82080D58h */ case    6:  		/* b 44 */
		/* 82080D58h case    6:*/		return 0x82080D84;
		/* 82080D58h case    6:*/		return 0x82080D5C;
	}
	return 0x82080D5C;
} // Block from 82080D40h-82080D5Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82080D5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080D5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080D5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080D5C);
		  /* 82080D5Ch */ case    0:  		/* cmpwi CR6, R11, 2 */
		/* 82080D5Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 82080D5Ch case    0:*/		return 0x82080D60;
		  /* 82080D60h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 82080D60h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82080D78;  }
		/* 82080D60h case    1:*/		return 0x82080D64;
		  /* 82080D64h */ case    2:  		/* lis R25, 1792 */
		/* 82080D64h case    2:*/		cpu::op::lis<0>(regs,&regs.R25,0x700);
		/* 82080D64h case    2:*/		return 0x82080D68;
		  /* 82080D68h */ case    3:  		/* addi R26, R24, 5896 */
		/* 82080D68h case    3:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R24,0x1708);
		/* 82080D68h case    3:*/		return 0x82080D6C;
		  /* 82080D6Ch */ case    4:  		/* li R29, 210 */
		/* 82080D6Ch case    4:*/		cpu::op::li<0>(regs,&regs.R29,0xD2);
		/* 82080D6Ch case    4:*/		return 0x82080D70;
		  /* 82080D70h */ case    5:  		/* ori R25, R25, 15 */
		/* 82080D70h case    5:*/		cpu::op::ori<0>(regs,&regs.R25,regs.R25,0xF);
		/* 82080D70h case    5:*/		return 0x82080D74;
		  /* 82080D74h */ case    6:  		/* b 16 */
		/* 82080D74h case    6:*/		return 0x82080D84;
		/* 82080D74h case    6:*/		return 0x82080D78;
	}
	return 0x82080D78;
} // Block from 82080D5Ch-82080D78h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82080D78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080D78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080D78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080D78);
		  /* 82080D78h */ case    0:  		/* lwz R29, <#[R1 + 80]> */
		/* 82080D78h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 82080D78h case    0:*/		return 0x82080D7C;
		  /* 82080D7Ch */ case    1:  		/* lwz R26, <#[R1 + 80]> */
		/* 82080D7Ch case    1:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000050) );
		/* 82080D7Ch case    1:*/		return 0x82080D80;
		  /* 82080D80h */ case    2:  		/* lwz R25, <#[R1 + 80]> */
		/* 82080D80h case    2:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000050) );
		/* 82080D80h case    2:*/		return 0x82080D84;
	}
	return 0x82080D84;
} // Block from 82080D78h-82080D84h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82080D84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080D84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080D84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080D84);
		  /* 82080D84h */ case    0:  		/* addi R4, R29, 5 */
		/* 82080D84h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x5);
		/* 82080D84h case    0:*/		return 0x82080D88;
		  /* 82080D88h */ case    1:  		/* mr R3, R31 */
		/* 82080D88h case    1:*/		regs.R3 = regs.R31;
		/* 82080D88h case    1:*/		return 0x82080D8C;
		  /* 82080D8Ch */ case    2:  		/* bl -51788 */
		/* 82080D8Ch case    2:*/		regs.LR = 0x82080D90; return 0x82074340;
		/* 82080D8Ch case    2:*/		return 0x82080D90;
		  /* 82080D90h */ case    3:  		/* lis R11, -16384 */
		/* 82080D90h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC000);
		/* 82080D90h case    3:*/		return 0x82080D94;
		  /* 82080D94h */ case    4:  		/* li R10, 768 */
		/* 82080D94h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x300);
		/* 82080D94h case    4:*/		return 0x82080D98;
		  /* 82080D98h */ case    5:  		/* ori R9, R11, 15104 */
		/* 82080D98h case    5:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R11,0x3B00);
		/* 82080D98h case    5:*/		return 0x82080D9C;
		  /* 82080D9Ch */ case    6:  		/* addi R11, R29, 2 */
		/* 82080D9Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x2);
		/* 82080D9Ch case    6:*/		return 0x82080DA0;
		  /* 82080DA0h */ case    7:  		/* stwu R9, <#[R3 + 4]> */
		/* 82080DA0h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080DA0h case    7:*/		return 0x82080DA4;
		  /* 82080DA4h */ case    8:  		/* lis R9, -16384 */
		/* 82080DA4h case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFFC000);
		/* 82080DA4h case    8:*/		return 0x82080DA8;
		  /* 82080DA8h */ case    9:  		/* addi R11, R11, -1 */
		/* 82080DA8h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82080DA8h case    9:*/		return 0x82080DAC;
		  /* 82080DACh */ case   10:  		/* ori R9, R9, 11008 */
		/* 82080DACh case   10:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x2B00);
		/* 82080DACh case   10:*/		return 0x82080DB0;
		  /* 82080DB0h */ case   11:  		/* li R22, 0 */
		/* 82080DB0h case   11:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 82080DB0h case   11:*/		return 0x82080DB4;
		  /* 82080DB4h */ case   12:  		/* rlwimi R9, R11, 16, 2, 15 */
		/* 82080DB4h case   12:*/		cpu::op::rlwimi<0,16,2,15>(regs,&regs.R9,regs.R11);
		/* 82080DB4h case   12:*/		return 0x82080DB8;
		  /* 82080DB8h */ case   13:  		/* stwu R10, <#[R3 + 4]> */
		/* 82080DB8h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080DB8h case   13:*/		return 0x82080DBC;
		  /* 82080DBCh */ case   14:  		/* rlwinm R10, R29, 0, 18, 31 */
		/* 82080DBCh case   14:*/		cpu::op::rlwinm<0,0,18,31>(regs,&regs.R10,regs.R29);
		/* 82080DBCh case   14:*/		return 0x82080DC0;
		  /* 82080DC0h */ case   15:  		/* rlwinm R27, R29, 2, 0, 29 */
		/* 82080DC0h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R27,regs.R29);
		/* 82080DC0h case   15:*/		return 0x82080DC4;
		  /* 82080DC4h */ case   16:  		/* mr R4, R26 */
		/* 82080DC4h case   16:*/		regs.R4 = regs.R26;
		/* 82080DC4h case   16:*/		return 0x82080DC8;
		  /* 82080DC8h */ case   17:  		/* mr R5, R27 */
		/* 82080DC8h case   17:*/		regs.R5 = regs.R27;
		/* 82080DC8h case   17:*/		return 0x82080DCC;
		  /* 82080DCCh */ case   18:  		/* mr R11, R22 */
		/* 82080DCCh case   18:*/		regs.R11 = regs.R22;
		/* 82080DCCh case   18:*/		return 0x82080DD0;
		  /* 82080DD0h */ case   19:  		/* stwu R9, <#[R3 + 4]> */
		/* 82080DD0h case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080DD0h case   19:*/		return 0x82080DD4;
		  /* 82080DD4h */ case   20:  		/* stwu R22, <#[R3 + 4]> */
		/* 82080DD4h case   20:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080DD4h case   20:*/		return 0x82080DD8;
		  /* 82080DD8h */ case   21:  		/* mr R29, R3 */
		/* 82080DD8h case   21:*/		regs.R29 = regs.R3;
		/* 82080DD8h case   21:*/		return 0x82080DDC;
		  /* 82080DDCh */ case   22:  		/* stwu R10, <#[R29 + 4]> */
		/* 82080DDCh case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 82080DDCh case   22:*/		return 0x82080DE0;
		  /* 82080DE0h */ case   23:  		/* addi R3, R29, 4 */
		/* 82080DE0h case   23:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R29,0x4);
		/* 82080DE0h case   23:*/		return 0x82080DE4;
		  /* 82080DE4h */ case   24:  		/* bl 68556 */
		/* 82080DE4h case   24:*/		regs.LR = 0x82080DE8; return 0x820919B0;
		/* 82080DE4h case   24:*/		return 0x82080DE8;
		  /* 82080DE8h */ case   25:  		/* lwz R11, <#[R31 + 56]> */
		/* 82080DE8h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82080DE8h case   25:*/		return 0x82080DEC;
		  /* 82080DECh */ case   26:  		/* add R3, R27, R29 */
		/* 82080DECh case   26:*/		cpu::op::add<0>(regs,&regs.R3,regs.R27,regs.R29);
		/* 82080DECh case   26:*/		return 0x82080DF0;
		  /* 82080DF0h */ case   27:  		/* stw R3, <#[R31 + 48]> */
		/* 82080DF0h case   27:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82080DF0h case   27:*/		return 0x82080DF4;
		  /* 82080DF4h */ case   28:  		/* cmplw CR6, R3, R11 */
		/* 82080DF4h case   28:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82080DF4h case   28:*/		return 0x82080DF8;
		  /* 82080DF8h */ case   29:  		/* bc 4, CR6_GT, 12 */
		/* 82080DF8h case   29:*/		if ( !regs.CR[6].gt ) { return 0x82080E04;  }
		/* 82080DF8h case   29:*/		return 0x82080DFC;
		  /* 82080DFCh */ case   30:  		/* mr R3, R31 */
		/* 82080DFCh case   30:*/		regs.R3 = regs.R31;
		/* 82080DFCh case   30:*/		return 0x82080E00;
		  /* 82080E00h */ case   31:  		/* bl -52472 */
		/* 82080E00h case   31:*/		regs.LR = 0x82080E04; return 0x82074108;
		/* 82080E00h case   31:*/		return 0x82080E04;
	}
	return 0x82080E04;
} // Block from 82080D84h-82080E04h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82080E04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080E04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080E04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080E04);
		  /* 82080E04h */ case    0:  		/* lis R11, -16368 */
		/* 82080E04h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC010);
		/* 82080E04h case    0:*/		return 0x82080E08;
		  /* 82080E08h */ case    1:  		/* li R10, 1 */
		/* 82080E08h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82080E08h case    1:*/		return 0x82080E0C;
		  /* 82080E0Ch */ case    2:  		/* ori R11, R11, 11008 */
		/* 82080E0Ch case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2B00);
		/* 82080E0Ch case    2:*/		return 0x82080E10;
		  /* 82080E10h */ case    3:  		/* li R9, 15 */
		/* 82080E10h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0xF);
		/* 82080E10h case    3:*/		return 0x82080E14;
		  /* 82080E14h */ case    4:  		/* stwu R11, <#[R3 + 4]> */
		/* 82080E14h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080E14h case    4:*/		return 0x82080E18;
		  /* 82080E18h */ case    5:  		/* addi R4, R24, 2100 */
		/* 82080E18h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R24,0x834);
		/* 82080E18h case    5:*/		return 0x82080E1C;
		  /* 82080E1Ch */ case    6:  		/* li R5, 60 */
		/* 82080E1Ch case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x3C);
		/* 82080E1Ch case    6:*/		return 0x82080E20;
		  /* 82080E20h */ case    7:  		/* stwu R10, <#[R3 + 4]> */
		/* 82080E20h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080E20h case    7:*/		return 0x82080E24;
		  /* 82080E24h */ case    8:  		/* mr R29, R3 */
		/* 82080E24h case    8:*/		regs.R29 = regs.R3;
		/* 82080E24h case    8:*/		return 0x82080E28;
		  /* 82080E28h */ case    9:  		/* stwu R9, <#[R29 + 4]> */
		/* 82080E28h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 82080E28h case    9:*/		return 0x82080E2C;
		  /* 82080E2Ch */ case   10:  		/* addi R3, R29, 4 */
		/* 82080E2Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R29,0x4);
		/* 82080E2Ch case   10:*/		return 0x82080E30;
		  /* 82080E30h */ case   11:  		/* bl 68480 */
		/* 82080E30h case   11:*/		regs.LR = 0x82080E34; return 0x820919B0;
		/* 82080E30h case   11:*/		return 0x82080E34;
		  /* 82080E34h */ case   12:  		/* addi R11, R29, 60 */
		/* 82080E34h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x3C);
		/* 82080E34h case   12:*/		return 0x82080E38;
		  /* 82080E38h */ case   13:  		/* lis R10, 1 */
		/* 82080E38h case   13:*/		cpu::op::lis<0>(regs,&regs.R10,0x1);
		/* 82080E38h case   13:*/		return 0x82080E3C;
		  /* 82080E3Ch */ case   14:  		/* oris R9, R25, 4096 */
		/* 82080E3Ch case   14:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R25,0x1000);
		/* 82080E3Ch case   14:*/		return 0x82080E40;
		  /* 82080E40h */ case   15:  		/* ori R10, R10, 8576 */
		/* 82080E40h case   15:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x2180);
		/* 82080E40h case   15:*/		return 0x82080E44;
		  /* 82080E44h */ case   16:  		/* mr R8, R22 */
		/* 82080E44h case   16:*/		regs.R8 = regs.R22;
		/* 82080E44h case   16:*/		return 0x82080E48;
		  /* 82080E48h */ case   17:  		/* stwu R10, <#[R11 + 4]> */
		/* 82080E48h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82080E48h case   17:*/		return 0x82080E4C;
		  /* 82080E4Ch */ case   18:  		/* stwu R9, <#[R11 + 4]> */
		/* 82080E4Ch case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82080E4Ch case   18:*/		return 0x82080E50;
		  /* 82080E50h */ case   19:  		/* stwu R22, <#[R11 + 4]> */
		/* 82080E50h case   19:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82080E50h case   19:*/		return 0x82080E54;
		  /* 82080E54h */ case   20:  		/* mr R3, R11 */
		/* 82080E54h case   20:*/		regs.R3 = regs.R11;
		/* 82080E54h case   20:*/		return 0x82080E58;
		  /* 82080E58h */ case   21:  		/* lwz R10, <#[R31 + 56]> */
		/* 82080E58h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000038) );
		/* 82080E58h case   21:*/		return 0x82080E5C;
		  /* 82080E5Ch */ case   22:  		/* stw R11, <#[R31 + 48]> */
		/* 82080E5Ch case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82080E5Ch case   22:*/		return 0x82080E60;
		  /* 82080E60h */ case   23:  		/* cmplw CR6, R11, R10 */
		/* 82080E60h case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82080E60h case   23:*/		return 0x82080E64;
		  /* 82080E64h */ case   24:  		/* bc 4, CR6_GT, 12 */
		/* 82080E64h case   24:*/		if ( !regs.CR[6].gt ) { return 0x82080E70;  }
		/* 82080E64h case   24:*/		return 0x82080E68;
		  /* 82080E68h */ case   25:  		/* mr R3, R31 */
		/* 82080E68h case   25:*/		regs.R3 = regs.R31;
		/* 82080E68h case   25:*/		return 0x82080E6C;
		  /* 82080E6Ch */ case   26:  		/* bl -52580 */
		/* 82080E6Ch case   26:*/		regs.LR = 0x82080E70; return 0x82074108;
		/* 82080E6Ch case   26:*/		return 0x82080E70;
	}
	return 0x82080E70;
} // Block from 82080E04h-82080E70h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82080E70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080E70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080E70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080E70);
		  /* 82080E70h */ case    0:  		/* lis R11, 2 */
		/* 82080E70h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x2);
		/* 82080E70h case    0:*/		return 0x82080E74;
		  /* 82080E74h */ case    1:  		/* lis R10, 0 */
		/* 82080E74h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x0);
		/* 82080E74h case    1:*/		return 0x82080E78;
		  /* 82080E78h */ case    2:  		/* ori R11, R11, 8448 */
		/* 82080E78h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2100);
		/* 82080E78h case    2:*/		return 0x82080E7C;
		  /* 82080E7Ch */ case    3:  		/* ori R10, R10, 65535 */
		/* 82080E7Ch case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0xFFFF);
		/* 82080E7Ch case    3:*/		return 0x82080E80;
		  /* 82080E80h */ case    4:  		/* stwu R11, <#[R3 + 4]> */
		/* 82080E80h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080E80h case    4:*/		return 0x82080E84;
		  /* 82080E84h */ case    5:  		/* li R8, 8851 */
		/* 82080E84h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x2293);
		/* 82080E84h case    5:*/		return 0x82080E88;
		  /* 82080E88h */ case    6:  		/* lis R6, 2 */
		/* 82080E88h case    6:*/		cpu::op::lis<0>(regs,&regs.R6,0x2);
		/* 82080E88h case    6:*/		return 0x82080E8C;
		  /* 82080E8Ch */ case    7:  		/* lis R5, 1 */
		/* 82080E8Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R5,0x1);
		/* 82080E8Ch case    7:*/		return 0x82080E90;
		  /* 82080E90h */ case    8:  		/* li R4, 768 */
		/* 82080E90h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x300);
		/* 82080E90h case    8:*/		return 0x82080E94;
		  /* 82080E94h */ case    9:  		/* li R29, 8978 */
		/* 82080E94h case    9:*/		cpu::op::li<0>(regs,&regs.R29,0x2312);
		/* 82080E94h case    9:*/		return 0x82080E98;
		  /* 82080E98h */ case   10:  		/* stwu R10, <#[R3 + 4]> */
		/* 82080E98h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080E98h case   10:*/		return 0x82080E9C;
		  /* 82080E9Ch */ case   11:  		/* ori R10, R6, 8708 */
		/* 82080E9Ch case   11:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R6,0x2204);
		/* 82080E9Ch case   11:*/		return 0x82080EA0;
		  /* 82080EA0h */ case   12:  		/* lis R6, 1 */
		/* 82080EA0h case   12:*/		cpu::op::lis<0>(regs,&regs.R6,0x1);
		/* 82080EA0h case   12:*/		return 0x82080EA4;
		  /* 82080EA4h */ case   13:  		/* lis R27, 0 */
		/* 82080EA4h case   13:*/		cpu::op::lis<0>(regs,&regs.R27,0x0);
		/* 82080EA4h case   13:*/		return 0x82080EA8;
		  /* 82080EA8h */ case   14:  		/* mr R11, R22 */
		/* 82080EA8h case   14:*/		regs.R11 = regs.R22;
		/* 82080EA8h case   14:*/		return 0x82080EAC;
		  /* 82080EACh */ case   15:  		/* ori R11, R27, 65535 */
		/* 82080EACh case   15:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R27,0xFFFF);
		/* 82080EACh case   15:*/		return 0x82080EB0;
		  /* 82080EB0h */ case   16:  		/* stwu R22, <#[R3 + 4]> */
		/* 82080EB0h case   16:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080EB0h case   16:*/		return 0x82080EB4;
		  /* 82080EB4h */ case   17:  		/* li R26, 8205 */
		/* 82080EB4h case   17:*/		cpu::op::li<0>(regs,&regs.R26,0x200D);
		/* 82080EB4h case   17:*/		return 0x82080EB8;
		  /* 82080EB8h */ case   18:  		/* li R25, 8704 */
		/* 82080EB8h case   18:*/		cpu::op::li<0>(regs,&regs.R25,0x2200);
		/* 82080EB8h case   18:*/		return 0x82080EBC;
		  /* 82080EBCh */ case   19:  		/* mr R9, R22 */
		/* 82080EBCh case   19:*/		regs.R9 = regs.R22;
		/* 82080EBCh case   19:*/		return 0x82080EC0;
		  /* 82080EC0h */ case   20:  		/* mr R7, R22 */
		/* 82080EC0h case   20:*/		regs.R7 = regs.R22;
		/* 82080EC0h case   20:*/		return 0x82080EC4;
		  /* 82080EC4h */ case   21:  		/* mr R27, R22 */
		/* 82080EC4h case   21:*/		regs.R27 = regs.R22;
		/* 82080EC4h case   21:*/		return 0x82080EC8;
	}
	return 0x82080EC8;
} // Block from 82080E70h-82080EC8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82080EC8h
// Function '?PixDecodeVideoFrame@D3D@@YAKPAXKPAPAUPIX_CHUNK@@KKPAUPIX_DECODE_VIDEO_DATA@@K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080EC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080EC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080EC8);
		  /* 82080EC8h */ case    0:  		/* stwu R22, <#[R3 + 4]> */
		/* 82080EC8h case    0:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080EC8h case    0:*/		return 0x82080ECC;
		  /* 82080ECCh */ case    1:  		/* mr R24, R22 */
		/* 82080ECCh case    1:*/		regs.R24 = regs.R22;
		/* 82080ECCh case    1:*/		return 0x82080ED0;
		  /* 82080ED0h */ case    2:  		/* stwu R8, <#[R3 + 4]> */
		/* 82080ED0h case    2:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080ED0h case    2:*/		return 0x82080ED4;
		  /* 82080ED4h */ case    3:  		/* stwu R22, <#[R3 + 4]> */
		/* 82080ED4h case    3:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080ED4h case    3:*/		return 0x82080ED8;
		  /* 82080ED8h */ case    4:  		/* stwu R10, <#[R3 + 4]> */
		/* 82080ED8h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080ED8h case    4:*/		return 0x82080EDC;
		  /* 82080EDCh */ case    5:  		/* stwu R5, <#[R3 + 4]> */
		/* 82080EDCh case    5:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080EDCh case    5:*/		return 0x82080EE0;
		  /* 82080EE0h */ case    6:  		/* stwu R6, <#[R3 + 4]> */
		/* 82080EE0h case    6:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080EE0h case    6:*/		return 0x82080EE4;
		  /* 82080EE4h */ case    7:  		/* stwu R4, <#[R3 + 4]> */
		/* 82080EE4h case    7:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080EE4h case    7:*/		return 0x82080EE8;
		  /* 82080EE8h */ case    8:  		/* stwu R29, <#[R3 + 4]> */
		/* 82080EE8h case    8:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080EE8h case    8:*/		return 0x82080EEC;
		  /* 82080EECh */ case    9:  		/* stwu R11, <#[R3 + 4]> */
		/* 82080EECh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080EECh case    9:*/		return 0x82080EF0;
		  /* 82080EF0h */ case   10:  		/* stwu R26, <#[R3 + 4]> */
		/* 82080EF0h case   10:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080EF0h case   10:*/		return 0x82080EF4;
		  /* 82080EF4h */ case   11:  		/* stwu R22, <#[R3 + 4]> */
		/* 82080EF4h case   11:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080EF4h case   11:*/		return 0x82080EF8;
		  /* 82080EF8h */ case   12:  		/* stwu R25, <#[R3 + 4]> */
		/* 82080EF8h case   12:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080EF8h case   12:*/		return 0x82080EFC;
		  /* 82080EFCh */ case   13:  		/* stwu R22, <#[R3 + 4]> */
		/* 82080EFCh case   13:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080EFCh case   13:*/		return 0x82080F00;
		  /* 82080F00h */ case   14:  		/* lwz R11, <#[R31 + 56]> */
		/* 82080F00h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82080F00h case   14:*/		return 0x82080F04;
		  /* 82080F04h */ case   15:  		/* cmplw CR6, R3, R11 */
		/* 82080F04h case   15:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82080F04h case   15:*/		return 0x82080F08;
		  /* 82080F08h */ case   16:  		/* stw R3, <#[R31 + 48]> */
		/* 82080F08h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82080F08h case   16:*/		return 0x82080F0C;
		  /* 82080F0Ch */ case   17:  		/* bc 4, CR6_GT, 12 */
		/* 82080F0Ch case   17:*/		if ( !regs.CR[6].gt ) { return 0x82080F18;  }
		/* 82080F0Ch case   17:*/		return 0x82080F10;
		  /* 82080F10h */ case   18:  		/* mr R3, R31 */
		/* 82080F10h case   18:*/		regs.R3 = regs.R31;
		/* 82080F10h case   18:*/		return 0x82080F14;
		  /* 82080F14h */ case   19:  		/* bl -52748 */
		/* 82080F14h case   19:*/		regs.LR = 0x82080F18; return 0x82074108;
		/* 82080F14h case   19:*/		return 0x82080F18;
	}
	return 0x82080F18;
} // Block from 82080EC8h-82080F18h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82080F18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080F18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080F18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080F18);
		  /* 82080F18h */ case    0:  		/* lis R11, 5 */
		/* 82080F18h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x5);
		/* 82080F18h case    0:*/		return 0x82080F1C;
		  /* 82080F1Ch */ case    1:  		/* li R9, 1 */
		/* 82080F1Ch case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 82080F1Ch case    1:*/		return 0x82080F20;
		  /* 82080F20h */ case    2:  		/* ori R11, R11, 18432 */
		/* 82080F20h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4800);
		/* 82080F20h case    2:*/		return 0x82080F24;
		  /* 82080F24h */ case    3:  		/* addi R29, R30, 392 */
		/* 82080F24h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x188);
		/* 82080F24h case    3:*/		return 0x82080F28;
		  /* 82080F28h */ case    4:  		/* stwu R11, <#[R3 + 4]> */
		/* 82080F28h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080F28h case    4:*/		return 0x82080F2C;
		  /* 82080F2Ch */ case    5:  		/* lwz R11, <#[R28 + 28]> */
		/* 82080F2Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000001C) );
		/* 82080F2Ch case    5:*/		return 0x82080F30;
		  /* 82080F30h */ case    6:  		/* lhz R10, <#[R30 + 372]> */
		/* 82080F30h case    6:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000174) );
		/* 82080F30h case    6:*/		return 0x82080F34;
		  /* 82080F34h */ case    7:  		/* rlwinm R11, R11, 0, 22, 29 */
		/* 82080F34h case    7:*/		cpu::op::rlwinm<0,0,22,29>(regs,&regs.R11,regs.R11);
		/* 82080F34h case    7:*/		return 0x82080F38;
		  /* 82080F38h */ case    8:  		/* rlwinm R10, R10, 17, 0, 9 */
		/* 82080F38h case    8:*/		cpu::op::rlwinm<0,17,0,9>(regs,&regs.R10,regs.R10);
		/* 82080F38h case    8:*/		return 0x82080F3C;
		  /* 82080F3Ch */ case    9:  		/* or R11, R10, R11 */
		/* 82080F3Ch case    9:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82080F3Ch case    9:*/		return 0x82080F40;
		  /* 82080F40h */ case   10:  		/* oris R11, R11, 32768 */
		/* 82080F40h case   10:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8000);
		/* 82080F40h case   10:*/		return 0x82080F44;
		  /* 82080F44h */ case   11:  		/* ori R11, R11, 18434 */
		/* 82080F44h case   11:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4802);
		/* 82080F44h case   11:*/		return 0x82080F48;
		  /* 82080F48h */ case   12:  		/* stwu R11, <#[R3 + 4]> */
		/* 82080F48h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080F48h case   12:*/		return 0x82080F4C;
		  /* 82080F4Ch */ case   13:  		/* lwz R10, <#[R28 + 32]> */
		/* 82080F4Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000020) );
		/* 82080F4Ch case   13:*/		return 0x82080F50;
		  /* 82080F50h */ case   14:  		/* rlwinm R11, R10, 12, 20, 31 */
		/* 82080F50h case   14:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R11,regs.R10);
		/* 82080F50h case   14:*/		return 0x82080F54;
		  /* 82080F54h */ case   15:  		/* rlwinm R10, R10, 0, 3, 31 */
		/* 82080F54h case   15:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R10);
		/* 82080F54h case   15:*/		return 0x82080F58;
		  /* 82080F58h */ case   16:  		/* addi R11, R11, 512 */
		/* 82080F58h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x200);
		/* 82080F58h case   16:*/		return 0x82080F5C;
		  /* 82080F5Ch */ case   17:  		/* rlwinm R11, R11, 0, 19, 19 */
		/* 82080F5Ch case   17:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R11,regs.R11);
		/* 82080F5Ch case   17:*/		return 0x82080F60;
		  /* 82080F60h */ case   18:  		/* add R11, R11, R10 */
		/* 82080F60h case   18:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82080F60h case   18:*/		return 0x82080F64;
		  /* 82080F64h */ case   19:  		/* stwu R11, <#[R3 + 4]> */
		/* 82080F64h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080F64h case   19:*/		return 0x82080F68;
		  /* 82080F68h */ case   20:  		/* lwz R11, <#[R28 + 36]> */
		/* 82080F68h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000024) );
		/* 82080F68h case   20:*/		return 0x82080F6C;
		  /* 82080F6Ch */ case   21:  		/* stwu R11, <#[R3 + 4]> */
		/* 82080F6Ch case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080F6Ch case   21:*/		return 0x82080F70;
		  /* 82080F70h */ case   22:  		/* lwz R11, <#[R28 + 40]> */
		/* 82080F70h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000028) );
		/* 82080F70h case   22:*/		return 0x82080F74;
		  /* 82080F74h */ case   23:  		/* rlwimi R11, R9, 24, 1, 12 */
		/* 82080F74h case   23:*/		cpu::op::rlwimi<0,24,1,12>(regs,&regs.R11,regs.R9);
		/* 82080F74h case   23:*/		return 0x82080F78;
		  /* 82080F78h */ case   24:  		/* stwu R11, <#[R3 + 4]> */
		/* 82080F78h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080F78h case   24:*/		return 0x82080F7C;
		  /* 82080F7Ch */ case   25:  		/* lwz R11, <#[R28 + 44]> */
		/* 82080F7Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000002C) );
		/* 82080F7Ch case   25:*/		return 0x82080F80;
		  /* 82080F80h */ case   26:  		/* stwu R11, <#[R3 + 4]> */
		/* 82080F80h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080F80h case   26:*/		return 0x82080F84;
		  /* 82080F84h */ case   27:  		/* lwz R11, <#[R28 + 48]> */
		/* 82080F84h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000030) );
		/* 82080F84h case   27:*/		return 0x82080F88;
		  /* 82080F88h */ case   28:  		/* stwu R11, <#[R3 + 4]> */
		/* 82080F88h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82080F88h case   28:*/		return 0x82080F8C;
		  /* 82080F8Ch */ case   29:  		/* stw R3, <#[R31 + 48]> */
		/* 82080F8Ch case   29:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82080F8Ch case   29:*/		return 0x82080F90;
		  /* 82080F90h */ case   30:  		/* lwz R11, <#[R30 + 596]> */
		/* 82080F90h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000254) );
		/* 82080F90h case   30:*/		return 0x82080F94;
		  /* 82080F94h */ case   31:  		/* lwz R8, <#[R30 + 604]> */
		/* 82080F94h case   31:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x0000025C) );
		/* 82080F94h case   31:*/		return 0x82080F98;
		  /* 82080F98h */ case   32:  		/* lwz R10, <#[R30 + 584]> */
		/* 82080F98h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000248) );
		/* 82080F98h case   32:*/		return 0x82080F9C;
		  /* 82080F9Ch */ case   33:  		/* rlwinm R10, R10, 2, 29, 29 */
		/* 82080F9Ch case   33:*/		cpu::op::rlwinm<0,2,29,29>(regs,&regs.R10,regs.R10);
		/* 82080F9Ch case   33:*/		return 0x82080FA0;
		  /* 82080FA0h */ case   34:  		/* rlwinm R26, R11, 2, 30, 31 */
		/* 82080FA0h case   34:*/		cpu::op::rlwinm<0,2,30,31>(regs,&regs.R26,regs.R11);
		/* 82080FA0h case   34:*/		return 0x82080FA4;
		  /* 82080FA4h */ case   35:  		/* lwzx R25, <#[R10 + R30]> */
		/* 82080FA4h case   35:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 82080FA4h case   35:*/		return 0x82080FA8;
		  /* 82080FA8h */ case   36:  		/* rlwinm R23, R26, 0, 31, 31 */
		/* 82080FA8h case   36:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R23,regs.R26);
		/* 82080FA8h case   36:*/		return 0x82080FAC;
		  /* 82080FACh */ case   37:  		/* rlwinm R10, R26, 31, 31, 31 */
		/* 82080FACh case   37:*/		cpu::op::rlwinm<0,31,31,31>(regs,&regs.R10,regs.R26);
		/* 82080FACh case   37:*/		return 0x82080FB0;
		  /* 82080FB0h */ case   38:  		/* mulli R11, R23, 56 */
		/* 82080FB0h case   38:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R23,0x38);
		/* 82080FB0h case   38:*/		return 0x82080FB4;
		  /* 82080FB4h */ case   39:  		/* addi R11, R11, 527 */
		/* 82080FB4h case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x20F);
		/* 82080FB4h case   39:*/		return 0x82080FB8;
		  /* 82080FB8h */ case   40:  		/* mulli R9, R10, 1536 */
		/* 82080FB8h case   40:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R10,0x600);
		/* 82080FB8h case   40:*/		return 0x82080FBC;
		  /* 82080FBCh */ case   41:  		/* rlwinm R10, R11, 0, 0, 22 */
		/* 82080FBCh case   41:*/		cpu::op::rlwinm<0,0,0,22>(regs,&regs.R10,regs.R11);
		/* 82080FBCh case   41:*/		return 0x82080FC0;
		  /* 82080FC0h */ case   42:  		/* srawi. R11, R8, 29 */
		/* 82080FC0h case   42:*/		cpu::op::srawi<1,29>(regs,&regs.R11,regs.R8);
		/* 82080FC0h case   42:*/		return 0x82080FC4;
		  /* 82080FC4h */ case   43:  		/* add R10, R9, R10 */
		/* 82080FC4h case   43:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82080FC4h case   43:*/		return 0x82080FC8;
		  /* 82080FC8h */ case   44:  		/* add R28, R10, R25 */
		/* 82080FC8h case   44:*/		cpu::op::add<0>(regs,&regs.R28,regs.R10,regs.R25);
		/* 82080FC8h case   44:*/		return 0x82080FCC;
		  /* 82080FCCh */ case   45:  		/* bc 4, CR0_EQ, 24 */
		/* 82080FCCh case   45:*/		if ( !regs.CR[0].eq ) { return 0x82080FE4;  }
		/* 82080FCCh case   45:*/		return 0x82080FD0;
		  /* 82080FD0h */ case   46:  		/* lwz R9, <#[R29 + 8]> */
		/* 82080FD0h case   46:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000008) );
		/* 82080FD0h case   46:*/		return 0x82080FD4;
		  /* 82080FD4h */ case   47:  		/* andi. R9, R9, 49400 */
		/* 82080FD4h case   47:*/		cpu::op::andi<1>(regs,&regs.R9,regs.R9,0xC0F8);
		/* 82080FD4h case   47:*/		return 0x82080FD8;
		  /* 82080FD8h */ case   48:  		/* oris R9, R9, 19200 */
		/* 82080FD8h case   48:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x4B00);
		/* 82080FD8h case   48:*/		return 0x82080FDC;
		  /* 82080FDCh */ case   49:  		/* ori R9, R9, 1536 */
		/* 82080FDCh case   49:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x600);
		/* 82080FDCh case   49:*/		return 0x82080FE0;
		  /* 82080FE0h */ case   50:  		/* b 36 */
		/* 82080FE0h case   50:*/		return 0x82081004;
		/* 82080FE0h case   50:*/		return 0x82080FE4;
	}
	return 0x82080FE4;
} // Block from 82080F18h-82080FE4h (51 instructions)

//////////////////////////////////////////////////////
// Block at 82080FE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82080FE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82080FE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82080FE4);
		  /* 82080FE4h */ case    0:  		/* cmpwi CR6, R11, 1 */
		/* 82080FE4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82080FE4h case    0:*/		return 0x82080FE8;
		  /* 82080FE8h */ case    1:  		/* bc 12, CR6_EQ, -24 */
		/* 82080FE8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82080FD0;  }
		/* 82080FE8h case    1:*/		return 0x82080FEC;
		  /* 82080FECh */ case    2:  		/* cmpwi CR6, R11, 2 */
		/* 82080FECh case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 82080FECh case    2:*/		return 0x82080FF0;
		  /* 82080FF0h */ case    3:  		/* bc 4, CR6_EQ, 80 */
		/* 82080FF0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82081040;  }
		/* 82080FF0h case    3:*/		return 0x82080FF4;
		  /* 82080FF4h */ case    4:  		/* lwz R9, <#[R29 + 8]> */
		/* 82080FF4h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000008) );
		/* 82080FF4h case    4:*/		return 0x82080FF8;
		  /* 82080FF8h */ case    5:  		/* andi. R9, R9, 49400 */
		/* 82080FF8h case    5:*/		cpu::op::andi<1>(regs,&regs.R9,regs.R9,0xC0F8);
		/* 82080FF8h case    5:*/		return 0x82080FFC;
		  /* 82080FFCh */ case    6:  		/* oris R9, R9, 19200 */
		/* 82080FFCh case    6:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x4B00);
		/* 82080FFCh case    6:*/		return 0x82081000;
		  /* 82081000h */ case    7:  		/* ori R9, R9, 2560 */
		/* 82081000h case    7:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0xA00);
		/* 82081000h case    7:*/		return 0x82081004;
	}
	return 0x82081004;
} // Block from 82080FE4h-82081004h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82081004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081004);
		  /* 82081004h */ case    0:  		/* rlwinm R11, R28, 12, 20, 31 */
		/* 82081004h case    0:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R11,regs.R28);
		/* 82081004h case    0:*/		return 0x82081008;
		  /* 82081008h */ case    1:  		/* lwz R8, <#[R30 + 388]> */
		/* 82081008h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000184) );
		/* 82081008h case    1:*/		return 0x8208100C;
		  /* 8208100Ch */ case    2:  		/* rlwinm R10, R28, 0, 3, 29 */
		/* 8208100Ch case    2:*/		cpu::op::rlwinm<0,0,3,29>(regs,&regs.R10,regs.R28);
		/* 8208100Ch case    2:*/		return 0x82081010;
		  /* 82081010h */ case    3:  		/* stw R9, <#[R29 + 8]> */
		/* 82081010h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R29 + 0x00000008) );
		/* 82081010h case    3:*/		return 0x82081014;
		  /* 82081014h */ case    4:  		/* addi R11, R11, 512 */
		/* 82081014h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x200);
		/* 82081014h case    4:*/		return 0x82081018;
		  /* 82081018h */ case    5:  		/* lis R7, 16384 */
		/* 82081018h case    5:*/		cpu::op::lis<0>(regs,&regs.R7,0x4000);
		/* 82081018h case    5:*/		return 0x8208101C;
		  /* 8208101Ch */ case    6:  		/* rlwinm R11, R11, 0, 19, 19 */
		/* 8208101Ch case    6:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R11,regs.R11);
		/* 8208101Ch case    6:*/		return 0x82081020;
		  /* 82081020h */ case    7:  		/* add R11, R11, R10 */
		/* 82081020h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82081020h case    7:*/		return 0x82081024;
		  /* 82081024h */ case    8:  		/* li R10, 75 */
		/* 82081024h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x4B);
		/* 82081024h case    8:*/		return 0x82081028;
		  /* 82081028h */ case    9:  		/* rlwimi R7, R11, 30, 2, 31 */
		/* 82081028h case    9:*/		cpu::op::rlwimi<0,30,2,31>(regs,&regs.R7,regs.R11);
		/* 82081028h case    9:*/		return 0x8208102C;
		  /* 8208102Ch */ case   10:  		/* lis R11, 19200 */
		/* 8208102Ch case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0x4B00);
		/* 8208102Ch case   10:*/		return 0x82081030;
		  /* 82081030h */ case   11:  		/* rlwimi R8, R10, 24, 0, 8 */
		/* 82081030h case   11:*/		cpu::op::rlwimi<0,24,0,8>(regs,&regs.R8,regs.R10);
		/* 82081030h case   11:*/		return 0x82081034;
		  /* 82081034h */ case   12:  		/* stw R7, <#[R29]> */
		/* 82081034h case   12:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R29 + 0x00000000) );
		/* 82081034h case   12:*/		return 0x82081038;
		  /* 82081038h */ case   13:  		/* stw R11, <#[R29 + 4]> */
		/* 82081038h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 82081038h case   13:*/		return 0x8208103C;
		  /* 8208103Ch */ case   14:  		/* stw R8, <#[R29 + 12]> */
		/* 8208103Ch case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R29 + 0x0000000C) );
		/* 8208103Ch case   14:*/		return 0x82081040;
	}
	return 0x82081040;
} // Block from 82081004h-82081040h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82081040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081040);
		  /* 82081040h */ case    0:  		/* li R4, 49 */
		/* 82081040h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x31);
		/* 82081040h case    0:*/		return 0x82081044;
		  /* 82081044h */ case    1:  		/* mr R3, R31 */
		/* 82081044h case    1:*/		regs.R3 = regs.R31;
		/* 82081044h case    1:*/		return 0x82081048;
		  /* 82081048h */ case    2:  		/* bl -52488 */
		/* 82081048h case    2:*/		regs.LR = 0x8208104C; return 0x82074340;
		/* 82081048h case    2:*/		return 0x8208104C;
		  /* 8208104Ch */ case    3:  		/* lis R11, 47 */
		/* 8208104Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0x2F);
		/* 8208104Ch case    3:*/		return 0x82081050;
		  /* 82081050h */ case    4:  		/* mr R4, R29 */
		/* 82081050h case    4:*/		regs.R4 = regs.R29;
		/* 82081050h case    4:*/		return 0x82081054;
		  /* 82081054h */ case    5:  		/* ori R11, R11, 16384 */
		/* 82081054h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4000);
		/* 82081054h case    5:*/		return 0x82081058;
		  /* 82081058h */ case    6:  		/* li R5, 192 */
		/* 82081058h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0xC0);
		/* 82081058h case    6:*/		return 0x8208105C;
		  /* 8208105Ch */ case    7:  		/* stwu R11, <#[R3 + 4]> */
		/* 8208105Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8208105Ch case    7:*/		return 0x82081060;
		  /* 82081060h */ case    8:  		/* mr R29, R3 */
		/* 82081060h case    8:*/		regs.R29 = regs.R3;
		/* 82081060h case    8:*/		return 0x82081064;
		  /* 82081064h */ case    9:  		/* addi R3, R3, 4 */
		/* 82081064h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x4);
		/* 82081064h case    9:*/		return 0x82081068;
		  /* 82081068h */ case   10:  		/* bl 67912 */
		/* 82081068h case   10:*/		regs.LR = 0x8208106C; return 0x820919B0;
		/* 82081068h case   10:*/		return 0x8208106C;
		  /* 8208106Ch */ case   11:  		/* addi R11, R29, 192 */
		/* 8208106Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0xC0);
		/* 8208106Ch case   11:*/		return 0x82081070;
		  /* 82081070h */ case   12:  		/* stw R11, <#[R31 + 48]> */
		/* 82081070h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82081070h case   12:*/		return 0x82081074;
		  /* 82081074h */ case   13:  		/* lbz R11, <#[R30 + 608]> */
		/* 82081074h case   13:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000260) );
		/* 82081074h case   13:*/		return 0x82081078;
		  /* 82081078h */ case   14:  		/* rlwinm. R11, R11, 0, 25, 25 */
		/* 82081078h case   14:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R11);
		/* 82081078h case   14:*/		return 0x8208107C;
		  /* 8208107Ch */ case   15:  		/* bc 12, CR0_EQ, 16 */
		/* 8208107Ch case   15:*/		if ( regs.CR[0].eq ) { return 0x8208108C;  }
		/* 8208107Ch case   15:*/		return 0x82081080;
		  /* 82081080h */ case   16:  		/* li R4, -1 */
		/* 82081080h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0xFFFFFFFF);
		/* 82081080h case   16:*/		return 0x82081084;
		  /* 82081084h */ case   17:  		/* lwz R3, <#[R30 + 364]> */
		/* 82081084h case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x0000016C) );
		/* 82081084h case   17:*/		return 0x82081088;
		  /* 82081088h */ case   18:  		/* bl 31496 */
		/* 82081088h case   18:*/		regs.LR = 0x8208108C; return 0x82088B90;
		/* 82081088h case   18:*/		return 0x8208108C;
	}
	return 0x8208108C;
} // Block from 82081040h-8208108Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8208108Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208108C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208108C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208108C);
		  /* 8208108Ch */ case    0:  		/* lhz R11, <#[R30 + 14]> */
		/* 8208108Ch case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000E) );
		/* 8208108Ch case    0:*/		return 0x82081090;
		  /* 82081090h */ case    1:  		/* lis R10, -32217 */
		/* 82081090h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 82081090h case    1:*/		return 0x82081094;
		  /* 82081094h */ case    2:  		/* rlwinm R11, R11, 9, 0, 31 */
		/* 82081094h case    2:*/		cpu::op::rlwinm<0,9,0,31>(regs,&regs.R11,regs.R11);
		/* 82081094h case    2:*/		return 0x82081098;
		  /* 82081098h */ case    3:  		/* addi R7, R10, 5912 */
		/* 82081098h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x1718);
		/* 82081098h case    3:*/		return 0x8208109C;
		  /* 8208109Ch */ case    4:  		/* add R10, R11, R28 */
		/* 8208109Ch case    4:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R28);
		/* 8208109Ch case    4:*/		return 0x820810A0;
		  /* 820810A0h */ case    5:  		/* mfmsr R8, MSR */
		/* 820810A0h case    5:*/		regs.R8 = regs.MSR;
		/* 820810A0h case    5:*/		return 0x820810A4;
		  /* 820810A4h */ case    6:  		/* mtmsrd MSR, R13 */
		/* 820810A4h case    6:*/		regs.MSR = regs.R13;
		/* 820810A4h case    6:*/		return 0x820810A8;
		  /* 820810A8h */ case    7:  		/* lwarx R9, <#[R7]> */
		/* 820810A8h case    7:*/		cpu::mem::lwarx( regs, &regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 820810A8h case    7:*/		return 0x820810AC;
		  /* 820810ACh */ case    8:  		/* stwcx. R10, <#[R7]> */
		/* 820810ACh case    8:*/		cpu::mem::stwcx( regs, regs.R10, (uint32)(regs.R7 + 0x00000000) );
		/* 820810ACh case    8:*/		return 0x820810B0;
		  /* 820810B0h */ case    9:  		/* mtmsrd MSR, R8 */
		/* 820810B0h case    9:*/		regs.MSR = regs.R8;
		/* 820810B0h case    9:*/		return 0x820810B4;
		  /* 820810B4h */ case   10:  		/* bc 4, CR0_EQ, -20 */
		/* 820810B4h case   10:*/		if ( !regs.CR[0].eq ) { return 0x820810A0;  }
		/* 820810B4h case   10:*/		return 0x820810B8;
		  /* 820810B8h */ case   11:  		/* mr R11, R9 */
		/* 820810B8h case   11:*/		regs.R11 = regs.R9;
		/* 820810B8h case   11:*/		return 0x820810BC;
		  /* 820810BCh */ case   12:  		/* lwz R9, <#[R30 + 8]> */
		/* 820810BCh case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 820810BCh case   12:*/		return 0x820810C0;
		  /* 820810C0h */ case   13:  		/* li R8, 6144 */
		/* 820810C0h case   13:*/		cpu::op::li<0>(regs,&regs.R8,0x1800);
		/* 820810C0h case   13:*/		return 0x820810C4;
		  /* 820810C4h */ case   14:  		/* subf R11, R9, R11 */
		/* 820810C4h case   14:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 820810C4h case   14:*/		return 0x820810C8;
		  /* 820810C8h */ case   15:  		/* divwu R11, R11, R8 */
		/* 820810C8h case   15:*/		cpu::op::divwu<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 820810C8h case   15:*/		return 0x820810CC;
		  /* 820810CCh */ case   16:  		/* cmplwi CR6, R11, 14 */
		/* 820810CCh case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000E);
		/* 820810CCh case   16:*/		return 0x820810D0;
		  /* 820810D0h */ case   17:  		/* mr R24, R11 */
		/* 820810D0h case   17:*/		regs.R24 = regs.R11;
		/* 820810D0h case   17:*/		return 0x820810D4;
		  /* 820810D4h */ case   18:  		/* bc 12, CR6_LT, 8 */
		/* 820810D4h case   18:*/		if ( regs.CR[6].lt ) { return 0x820810DC;  }
		/* 820810D4h case   18:*/		return 0x820810D8;
		  /* 820810D8h */ case   19:  		/* li R24, 14 */
		/* 820810D8h case   19:*/		cpu::op::li<0>(regs,&regs.R24,0xE);
		/* 820810D8h case   19:*/		return 0x820810DC;
	}
	return 0x820810DC;
} // Block from 8208108Ch-820810DCh (20 instructions)

//////////////////////////////////////////////////////
// Block at 820810DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820810DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820810DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820810DC);
		  /* 820810DCh */ case    0:  		/* lwz R11, <#[R30 + 584]> */
		/* 820810DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000248) );
		/* 820810DCh case    0:*/		return 0x820810E0;
		  /* 820810E0h */ case    1:  		/* lis R9, -25768 */
		/* 820810E0h case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF9B58);
		/* 820810E0h case    1:*/		return 0x820810E4;
		  /* 820810E4h */ case    2:  		/* stw R10, <#[R30 + 8]> */
		/* 820810E4h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 820810E4h case    2:*/		return 0x820810E8;
		  /* 820810E8h */ case    3:  		/* rlwinm R10, R28, 12, 20, 31 */
		/* 820810E8h case    3:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R28);
		/* 820810E8h case    3:*/		return 0x820810EC;
		  /* 820810ECh */ case    4:  		/* addi R11, R11, -1 */
		/* 820810ECh case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820810ECh case    4:*/		return 0x820810F0;
		  /* 820810F0h */ case    5:  		/* lwz R8, <#[R30 + 596]> */
		/* 820810F0h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000254) );
		/* 820810F0h case    5:*/		return 0x820810F4;
		  /* 820810F4h */ case    6:  		/* ori R7, R9, 59162 */
		/* 820810F4h case    6:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R9,0xE71A);
		/* 820810F4h case    6:*/		return 0x820810F8;
		  /* 820810F8h */ case    7:  		/* lwz R6, <#[R30 + 16]> */
		/* 820810F8h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000010) );
		/* 820810F8h case    7:*/		return 0x820810FC;
		  /* 820810FCh */ case    8:  		/* rlwinm R11, R11, 2, 29, 29 */
		/* 820810FCh case    8:*/		cpu::op::rlwinm<0,2,29,29>(regs,&regs.R11,regs.R11);
		/* 820810FCh case    8:*/		return 0x82081100;
		  /* 82081100h */ case    9:  		/* lwz R3, <#[R31 + 48]> */
		/* 82081100h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82081100h case    9:*/		return 0x82081104;
		  /* 82081104h */ case   10:  		/* rlwinm R8, R8, 4, 30, 31 */
		/* 82081104h case   10:*/		cpu::op::rlwinm<0,4,30,31>(regs,&regs.R8,regs.R8);
		/* 82081104h case   10:*/		return 0x82081108;
		  /* 82081108h */ case   11:  		/* lwz R5, <#[R31 + 56]> */
		/* 82081108h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000038) );
		/* 82081108h case   11:*/		return 0x8208110C;
		  /* 8208110Ch */ case   12:  		/* addi R9, R10, 512 */
		/* 8208110Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x200);
		/* 8208110Ch case   12:*/		return 0x82081110;
		  /* 82081110h */ case   13:  		/* rlwinm R10, R28, 0, 3, 31 */
		/* 82081110h case   13:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R28);
		/* 82081110h case   13:*/		return 0x82081114;
		  /* 82081114h */ case   14:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82081114h case   14:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82081114h case   14:*/		return 0x82081118;
		  /* 82081118h */ case   15:  		/* lwzx R11, <#[R11 + R30]> */
		/* 82081118h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82081118h case   15:*/		return 0x8208111C;
		  /* 8208111Ch */ case   16:  		/* cmplw CR6, R3, R5 */
		/* 8208111Ch case   16:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R5);
		/* 8208111Ch case   16:*/		return 0x82081120;
		  /* 82081120h */ case   17:  		/* add R10, R9, R10 */
		/* 82081120h case   17:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82081120h case   17:*/		return 0x82081124;
		  /* 82081124h */ case   18:  		/* stw R10, <#[R31 + 10392]> */
		/* 82081124h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00002898) );
		/* 82081124h case   18:*/		return 0x82081128;
		  /* 82081128h */ case   19:  		/* addi R11, R11, -4 */
		/* 82081128h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 82081128h case   19:*/		return 0x8208112C;
		  /* 8208112Ch */ case   20:  		/* stwu R7, <#[R11 + 4]> */
		/* 8208112Ch case   20:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8208112Ch case   20:*/		return 0x82081130;
		  /* 82081130h */ case   21:  		/* stwu R8, <#[R11 + 4]> */
		/* 82081130h case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82081130h case   21:*/		return 0x82081134;
		  /* 82081134h */ case   22:  		/* stwu R6, <#[R11 + 4]> */
		/* 82081134h case   22:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82081134h case   22:*/		return 0x82081138;
		  /* 82081138h */ case   23:  		/* stwu R24, <#[R11 + 4]> */
		/* 82081138h case   23:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82081138h case   23:*/		return 0x8208113C;
		  /* 8208113Ch */ case   24:  		/* bc 4, CR6_GT, 12 */
		/* 8208113Ch case   24:*/		if ( !regs.CR[6].gt ) { return 0x82081148;  }
		/* 8208113Ch case   24:*/		return 0x82081140;
		  /* 82081140h */ case   25:  		/* mr R3, R31 */
		/* 82081140h case   25:*/		regs.R3 = regs.R31;
		/* 82081140h case   25:*/		return 0x82081144;
		  /* 82081144h */ case   26:  		/* bl -53308 */
		/* 82081144h case   26:*/		regs.LR = 0x82081148; return 0x82074108;
		/* 82081144h case   26:*/		return 0x82081148;
	}
	return 0x82081148;
} // Block from 820810DCh-82081148h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82081148h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081148);
		  /* 82081148h */ case    0:  		/* li R11, 8198 */
		/* 82081148h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2006);
		/* 82081148h case    0:*/		return 0x8208114C;
		  /* 8208114Ch */ case    1:  		/* mr R10, R22 */
		/* 8208114Ch case    1:*/		regs.R10 = regs.R22;
		/* 8208114Ch case    1:*/		return 0x82081150;
		  /* 82081150h */ case    2:  		/* stwu R11, <#[R3 + 4]> */
		/* 82081150h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82081150h case    2:*/		return 0x82081154;
		  /* 82081154h */ case    3:  		/* mr R28, R22 */
		/* 82081154h case    3:*/		regs.R28 = regs.R22;
		/* 82081154h case    3:*/		return 0x82081158;
		  /* 82081158h */ case    4:  		/* stwu R22, <#[R3 + 4]> */
		/* 82081158h case    4:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82081158h case    4:*/		return 0x8208115C;
		  /* 8208115Ch */ case    5:  		/* lwz R11, <#[R31 + 13904]> */
		/* 8208115Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003650) );
		/* 8208115Ch case    5:*/		return 0x82081160;
		  /* 82081160h */ case    6:  		/* addi R11, R11, 1 */
		/* 82081160h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82081160h case    6:*/		return 0x82081164;
		  /* 82081164h */ case    7:  		/* stw R3, <#[R31 + 48]> */
		/* 82081164h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82081164h case    7:*/		return 0x82081168;
		  /* 82081168h */ case    8:  		/* stw R11, <#[R31 + 13904]> */
		/* 82081168h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00003650) );
		/* 82081168h case    8:*/		return 0x8208116C;
		  /* 8208116Ch */ case    9:  		/* lwz R29, <#[R30 + 376]> */
		/* 8208116Ch case    9:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x00000178) );
		/* 8208116Ch case    9:*/		return 0x82081170;
		  /* 82081170h */ case   10:  		/* lwz R3, <#[R31 + 48]> */
		/* 82081170h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82081170h case   10:*/		return 0x82081174;
		  /* 82081174h */ case   11:  		/* lwz R11, <#[R31 + 56]> */
		/* 82081174h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82081174h case   11:*/		return 0x82081178;
		  /* 82081178h */ case   12:  		/* cmplw CR6, R3, R11 */
		/* 82081178h case   12:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82081178h case   12:*/		return 0x8208117C;
		  /* 8208117Ch */ case   13:  		/* bc 4, CR6_GT, 12 */
		/* 8208117Ch case   13:*/		if ( !regs.CR[6].gt ) { return 0x82081188;  }
		/* 8208117Ch case   13:*/		return 0x82081180;
		  /* 82081180h */ case   14:  		/* mr R3, R31 */
		/* 82081180h case   14:*/		regs.R3 = regs.R31;
		/* 82081180h case   14:*/		return 0x82081184;
		  /* 82081184h */ case   15:  		/* bl -53372 */
		/* 82081184h case   15:*/		regs.LR = 0x82081188; return 0x82074108;
		/* 82081184h case   15:*/		return 0x82081188;
	}
	return 0x82081188;
} // Block from 82081148h-82081188h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82081188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081188);
		  /* 82081188h */ case    0:  		/* li R11, 8450 */
		/* 82081188h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2102);
		/* 82081188h case    0:*/		return 0x8208118C;
		  /* 8208118Ch */ case    1:  		/* mr R10, R29 */
		/* 8208118Ch case    1:*/		regs.R10 = regs.R29;
		/* 8208118Ch case    1:*/		return 0x82081190;
		  /* 82081190h */ case    2:  		/* stwu R11, <#[R3 + 4]> */
		/* 82081190h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82081190h case    2:*/		return 0x82081194;
		  /* 82081194h */ case    3:  		/* cmplwi CR6, R29, 65535 */
		/* 82081194h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x0000FFFF);
		/* 82081194h case    3:*/		return 0x82081198;
		  /* 82081198h */ case    4:  		/* stwu R28, <#[R3 + 4]> */
		/* 82081198h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82081198h case    4:*/		return 0x8208119C;
		  /* 8208119Ch */ case    5:  		/* mr R11, R3 */
		/* 8208119Ch case    5:*/		regs.R11 = regs.R3;
		/* 8208119Ch case    5:*/		return 0x820811A0;
		  /* 820811A0h */ case    6:  		/* bc 4, CR6_GT, 12 */
		/* 820811A0h case    6:*/		if ( !regs.CR[6].gt ) { return 0x820811AC;  }
		/* 820811A0h case    6:*/		return 0x820811A4;
		  /* 820811A4h */ case    7:  		/* lis R10, 0 */
		/* 820811A4h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0x0);
		/* 820811A4h case    7:*/		return 0x820811A8;
		  /* 820811A8h */ case    8:  		/* ori R10, R10, 65534 */
		/* 820811A8h case    8:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0xFFFE);
		/* 820811A8h case    8:*/		return 0x820811AC;
	}
	return 0x820811AC;
} // Block from 82081188h-820811ACh (9 instructions)

//////////////////////////////////////////////////////
// Block at 820811ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820811AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820811AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820811AC);
		  /* 820811ACh */ case    0:  		/* lis R9, -16384 */
		/* 820811ACh case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFFC000);
		/* 820811ACh case    0:*/		return 0x820811B0;
		  /* 820811B0h */ case    1:  		/* li R8, 129 */
		/* 820811B0h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x81);
		/* 820811B0h case    1:*/		return 0x820811B4;
		  /* 820811B4h */ case    2:  		/* ori R9, R9, 13825 */
		/* 820811B4h case    2:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x3601);
		/* 820811B4h case    2:*/		return 0x820811B8;
		  /* 820811B8h */ case    3:  		/* rlwimi R8, R10, 16, 0, 15 */
		/* 820811B8h case    3:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R8,regs.R10);
		/* 820811B8h case    3:*/		return 0x820811BC;
		  /* 820811BCh */ case    4:  		/* stwu R9, <#[R11 + 4]> */
		/* 820811BCh case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820811BCh case    4:*/		return 0x820811C0;
		  /* 820811C0h */ case    5:  		/* subf. R29, R10, R29 */
		/* 820811C0h case    5:*/		cpu::op::subf<1>(regs,&regs.R29,regs.R10,regs.R29);
		/* 820811C0h case    5:*/		return 0x820811C4;
		  /* 820811C4h */ case    6:  		/* stwu R8, <#[R11 + 4]> */
		/* 820811C4h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820811C4h case    6:*/		return 0x820811C8;
		  /* 820811C8h */ case    7:  		/* mr R3, R11 */
		/* 820811C8h case    7:*/		regs.R3 = regs.R11;
		/* 820811C8h case    7:*/		return 0x820811CC;
		  /* 820811CCh */ case    8:  		/* stw R11, <#[R31 + 48]> */
		/* 820811CCh case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 820811CCh case    8:*/		return 0x820811D0;
		  /* 820811D0h */ case    9:  		/* bc 12, CR0_EQ, 12 */
		/* 820811D0h case    9:*/		if ( regs.CR[0].eq ) { return 0x820811DC;  }
		/* 820811D0h case    9:*/		return 0x820811D4;
		  /* 820811D4h */ case   10:  		/* add R28, R10, R28 */
		/* 820811D4h case   10:*/		cpu::op::add<0>(regs,&regs.R28,regs.R10,regs.R28);
		/* 820811D4h case   10:*/		return 0x820811D8;
		  /* 820811D8h */ case   11:  		/* b -104 */
		/* 820811D8h case   11:*/		return 0x82081170;
		/* 820811D8h case   11:*/		return 0x820811DC;
	}
	return 0x820811DC;
} // Block from 820811ACh-820811DCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 820811DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820811DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820811DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820811DC);
		  /* 820811DCh */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 820811DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 820811DCh case    0:*/		return 0x820811E0;
		  /* 820811E0h */ case    1:  		/* stw R22, <#[R31 + 10392]> */
		/* 820811E0h case    1:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R31 + 0x00002898) );
		/* 820811E0h case    1:*/		return 0x820811E4;
		  /* 820811E4h */ case    2:  		/* cmplw CR6, R3, R11 */
		/* 820811E4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 820811E4h case    2:*/		return 0x820811E8;
		  /* 820811E8h */ case    3:  		/* bc 4, CR6_GT, 12 */
		/* 820811E8h case    3:*/		if ( !regs.CR[6].gt ) { return 0x820811F4;  }
		/* 820811E8h case    3:*/		return 0x820811EC;
		  /* 820811ECh */ case    4:  		/* mr R3, R31 */
		/* 820811ECh case    4:*/		regs.R3 = regs.R31;
		/* 820811ECh case    4:*/		return 0x820811F0;
		  /* 820811F0h */ case    5:  		/* bl -53480 */
		/* 820811F0h case    5:*/		regs.LR = 0x820811F4; return 0x82074108;
		/* 820811F0h case    5:*/		return 0x820811F4;
	}
	return 0x820811F4;
} // Block from 820811DCh-820811F4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820811F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820811F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820811F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820811F4);
		  /* 820811F4h */ case    0:  		/* li R11, 8198 */
		/* 820811F4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2006);
		/* 820811F4h case    0:*/		return 0x820811F8;
		  /* 820811F8h */ case    1:  		/* mr R10, R22 */
		/* 820811F8h case    1:*/		regs.R10 = regs.R22;
		/* 820811F8h case    1:*/		return 0x820811FC;
		  /* 820811FCh */ case    2:  		/* stwu R11, <#[R3 + 4]> */
		/* 820811FCh case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820811FCh case    2:*/		return 0x82081200;
		  /* 82081200h */ case    3:  		/* stwu R22, <#[R3 + 4]> */
		/* 82081200h case    3:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82081200h case    3:*/		return 0x82081204;
		  /* 82081204h */ case    4:  		/* lwz R10, <#[R31 + 13904]> */
		/* 82081204h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00003650) );
		/* 82081204h case    4:*/		return 0x82081208;
		  /* 82081208h */ case    5:  		/* lwz R9, <#[R31 + 56]> */
		/* 82081208h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000038) );
		/* 82081208h case    5:*/		return 0x8208120C;
		  /* 8208120Ch */ case    6:  		/* mr R11, R3 */
		/* 8208120Ch case    6:*/		regs.R11 = regs.R3;
		/* 8208120Ch case    6:*/		return 0x82081210;
		  /* 82081210h */ case    7:  		/* addi R10, R10, -1 */
		/* 82081210h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82081210h case    7:*/		return 0x82081214;
		  /* 82081214h */ case    8:  		/* cmplw CR6, R3, R9 */
		/* 82081214h case    8:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R9);
		/* 82081214h case    8:*/		return 0x82081218;
		  /* 82081218h */ case    9:  		/* stw R3, <#[R31 + 48]> */
		/* 82081218h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82081218h case    9:*/		return 0x8208121C;
		  /* 8208121Ch */ case   10:  		/* stw R10, <#[R31 + 13904]> */
		/* 8208121Ch case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00003650) );
		/* 8208121Ch case   10:*/		return 0x82081220;
		  /* 82081220h */ case   11:  		/* bc 4, CR6_GT, 16 */
		/* 82081220h case   11:*/		if ( !regs.CR[6].gt ) { return 0x82081230;  }
		/* 82081220h case   11:*/		return 0x82081224;
		  /* 82081224h */ case   12:  		/* mr R3, R31 */
		/* 82081224h case   12:*/		regs.R3 = regs.R31;
		/* 82081224h case   12:*/		return 0x82081228;
		  /* 82081228h */ case   13:  		/* bl -53536 */
		/* 82081228h case   13:*/		regs.LR = 0x8208122C; return 0x82074108;
		/* 82081228h case   13:*/		return 0x8208122C;
		  /* 8208122Ch */ case   14:  		/* mr R11, R3 */
		/* 8208122Ch case   14:*/		regs.R11 = regs.R3;
		/* 8208122Ch case   14:*/		return 0x82081230;
	}
	return 0x82081230;
} // Block from 820811F4h-82081230h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82081230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081230);
		  /* 82081230h */ case    0:  		/* lis R10, -16384 */
		/* 82081230h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFC000);
		/* 82081230h case    0:*/		return 0x82081234;
		  /* 82081234h */ case    1:  		/* li R9, 6 */
		/* 82081234h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x6);
		/* 82081234h case    1:*/		return 0x82081238;
		  /* 82081238h */ case    2:  		/* ori R10, R10, 17920 */
		/* 82081238h case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x4600);
		/* 82081238h case    2:*/		return 0x8208123C;
		  /* 8208123Ch */ case    3:  		/* mr R3, R31 */
		/* 8208123Ch case    3:*/		regs.R3 = regs.R31;
		/* 8208123Ch case    3:*/		return 0x82081240;
		  /* 82081240h */ case    4:  		/* stwu R10, <#[R11 + 4]> */
		/* 82081240h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82081240h case    4:*/		return 0x82081244;
		  /* 82081244h */ case    5:  		/* stwu R9, <#[R11 + 4]> */
		/* 82081244h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82081244h case    5:*/		return 0x82081248;
		  /* 82081248h */ case    6:  		/* stw R11, <#[R31 + 48]> */
		/* 82081248h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82081248h case    6:*/		return 0x8208124C;
		  /* 8208124Ch */ case    7:  		/* ld R11, <#[R31 + 16]> */
		/* 8208124Ch case    7:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8208124Ch case    7:*/		return 0x82081250;
		  /* 82081250h */ case    8:  		/* ori R11, R11, 8 */
		/* 82081250h case    8:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x8);
		/* 82081250h case    8:*/		return 0x82081254;
		  /* 82081254h */ case    9:  		/* std R11, <#[R31 + 16]> */
		/* 82081254h case    9:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82081254h case    9:*/		return 0x82081258;
		  /* 82081258h */ case   10:  		/* oris R11, R11, 8 */
		/* 82081258h case   10:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8);
		/* 82081258h case   10:*/		return 0x8208125C;
		  /* 8208125Ch */ case   11:  		/* std R11, <#[R31 + 16]> */
		/* 8208125Ch case   11:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8208125Ch case   11:*/		return 0x82081260;
		  /* 82081260h */ case   12:  		/* oris R11, R11, 16 */
		/* 82081260h case   12:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x10);
		/* 82081260h case   12:*/		return 0x82081264;
		  /* 82081264h */ case   13:  		/* std R11, <#[R31 + 16]> */
		/* 82081264h case   13:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82081264h case   13:*/		return 0x82081268;
		  /* 82081268h */ case   14:  		/* ld R11, <#[R31 + 24]> */
		/* 82081268h case   14:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82081268h case   14:*/		return 0x8208126C;
		  /* 8208126Ch */ case   15:  		/* oris R11, R11, 65024 */
		/* 8208126Ch case   15:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0xFE00);
		/* 8208126Ch case   15:*/		return 0x82081270;
		  /* 82081270h */ case   16:  		/* std R11, <#[R31 + 24]> */
		/* 82081270h case   16:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82081270h case   16:*/		return 0x82081274;
		  /* 82081274h */ case   17:  		/* ld R11, <#[R31 + 16]> */
		/* 82081274h case   17:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82081274h case   17:*/		return 0x82081278;
		  /* 82081278h */ case   18:  		/* ori R11, R11, 2048 */
		/* 82081278h case   18:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x800);
		/* 82081278h case   18:*/		return 0x8208127C;
		  /* 8208127Ch */ case   19:  		/* std R11, <#[R31 + 16]> */
		/* 8208127Ch case   19:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8208127Ch case   19:*/		return 0x82081280;
		  /* 82081280h */ case   20:  		/* ori R11, R11, 256 */
		/* 82081280h case   20:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x100);
		/* 82081280h case   20:*/		return 0x82081284;
		  /* 82081284h */ case   21:  		/* std R11, <#[R31 + 16]> */
		/* 82081284h case   21:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82081284h case   21:*/		return 0x82081288;
		  /* 82081288h */ case   22:  		/* lwz R27, <#[R30 + 588]> */
		/* 82081288h case   22:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R30 + 0x0000024C) );
		/* 82081288h case   22:*/		return 0x8208128C;
		  /* 8208128Ch */ case   23:  		/* bl -53372 */
		/* 8208128Ch case   23:*/		regs.LR = 0x82081290; return 0x82074210;
		/* 8208128Ch case   23:*/		return 0x82081290;
		  /* 82081290h */ case   24:  		/* stw R3, <#[R30 + 588]> */
		/* 82081290h case   24:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000024C) );
		/* 82081290h case   24:*/		return 0x82081294;
		  /* 82081294h */ case   25:  		/* li R6, 0 */
		/* 82081294h case   25:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82081294h case   25:*/		return 0x82081298;
		  /* 82081298h */ case   26:  		/* li R5, 0 */
		/* 82081298h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82081298h case   26:*/		return 0x8208129C;
		  /* 8208129Ch */ case   27:  		/* li R4, 0 */
		/* 8208129Ch case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8208129Ch case   27:*/		return 0x820812A0;
		  /* 820812A0h */ case   28:  		/* mr R3, R31 */
		/* 820812A0h case   28:*/		regs.R3 = regs.R31;
		/* 820812A0h case   28:*/		return 0x820812A4;
		  /* 820812A4h */ case   29:  		/* bl -98012 */
		/* 820812A4h case   29:*/		regs.LR = 0x820812A8; return 0x820693C8;
		/* 820812A4h case   29:*/		return 0x820812A8;
		  /* 820812A8h */ case   30:  		/* li R6, 0 */
		/* 820812A8h case   30:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820812A8h case   30:*/		return 0x820812AC;
		  /* 820812ACh */ case   31:  		/* li R5, 0 */
		/* 820812ACh case   31:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820812ACh case   31:*/		return 0x820812B0;
	}
	return 0x820812B0;
} // Block from 82081230h-820812B0h (32 instructions)

//////////////////////////////////////////////////////
// Block at 820812B0h
// Function '?PixEstimateVideoCost@D3D@@YAXPAVCDevice@1@PAUPIX_ESTIMATE_VIDEO_COST@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820812B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820812B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820812B0);
		  /* 820812B0h */ case    0:  		/* li R4, 0 */
		/* 820812B0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820812B0h case    0:*/		return 0x820812B4;
		  /* 820812B4h */ case    1:  		/* mr R3, R31 */
		/* 820812B4h case    1:*/		regs.R3 = regs.R31;
		/* 820812B4h case    1:*/		return 0x820812B8;
		  /* 820812B8h */ case    2:  		/* bl -98032 */
		/* 820812B8h case    2:*/		regs.LR = 0x820812BC; return 0x820693C8;
		/* 820812B8h case    2:*/		return 0x820812BC;
		  /* 820812BCh */ case    3:  		/* lwz R11, <#[R30 + 596]> */
		/* 820812BCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000254) );
		/* 820812BCh case    3:*/		return 0x820812C0;
		  /* 820812C0h */ case    4:  		/* rlwinm R28, R26, 0, 30, 31 */
		/* 820812C0h case    4:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R28,regs.R26);
		/* 820812C0h case    4:*/		return 0x820812C4;
		  /* 820812C4h */ case    5:  		/* rlwimi R11, R26, 28, 2, 3 */
		/* 820812C4h case    5:*/		cpu::op::rlwimi<0,28,2,3>(regs,&regs.R11,regs.R26);
		/* 820812C4h case    5:*/		return 0x820812C8;
		  /* 820812C8h */ case    6:  		/* addi R29, R25, 16 */
		/* 820812C8h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R25,0x10);
		/* 820812C8h case    6:*/		return 0x820812CC;
		  /* 820812CCh */ case    7:  		/* cmplwi CR6, R23, 0 */
		/* 820812CCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 820812CCh case    7:*/		return 0x820812D0;
		  /* 820812D0h */ case    8:  		/* stw R11, <#[R30 + 596]> */
		/* 820812D0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000254) );
		/* 820812D0h case    8:*/		return 0x820812D4;
		  /* 820812D4h */ case    9:  		/* bc 12, CR6_EQ, 24 */
		/* 820812D4h case    9:*/		if ( regs.CR[6].eq ) { return 0x820812EC;  }
		/* 820812D4h case    9:*/		return 0x820812D8;
		  /* 820812D8h */ case   10:  		/* li R5, 56 */
		/* 820812D8h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x38);
		/* 820812D8h case   10:*/		return 0x820812DC;
		  /* 820812DCh */ case   11:  		/* addi R4, R31, 14128 */
		/* 820812DCh case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x3730);
		/* 820812DCh case   11:*/		return 0x820812E0;
		  /* 820812E0h */ case   12:  		/* mr R3, R29 */
		/* 820812E0h case   12:*/		regs.R3 = regs.R29;
		/* 820812E0h case   12:*/		return 0x820812E4;
		  /* 820812E4h */ case   13:  		/* bl 67276 */
		/* 820812E4h case   13:*/		regs.LR = 0x820812E8; return 0x820919B0;
		/* 820812E4h case   13:*/		return 0x820812E8;
		  /* 820812E8h */ case   14:  		/* addi R29, R29, 56 */
		/* 820812E8h case   14:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x38);
		/* 820812E8h case   14:*/		return 0x820812EC;
	}
	return 0x820812EC;
} // Block from 820812B0h-820812ECh (15 instructions)

//////////////////////////////////////////////////////
// Block at 820812ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820812EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820812EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820812EC);
		  /* 820812ECh */ case    0:  		/* subf R11, R25, R29 */
		/* 820812ECh case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R25,regs.R29);
		/* 820812ECh case    0:*/		return 0x820812F0;
		  /* 820812F0h */ case    1:  		/* rlwinm. R10, R26, 0, 30, 30 */
		/* 820812F0h case    1:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R26);
		/* 820812F0h case    1:*/		return 0x820812F4;
		  /* 820812F4h */ case    2:  		/* addi R11, R11, 511 */
		/* 820812F4h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1FF);
		/* 820812F4h case    2:*/		return 0x820812F8;
		  /* 820812F8h */ case    3:  		/* rlwinm R11, R11, 0, 0, 22 */
		/* 820812F8h case    3:*/		cpu::op::rlwinm<0,0,0,22>(regs,&regs.R11,regs.R11);
		/* 820812F8h case    3:*/		return 0x820812FC;
		  /* 820812FCh */ case    4:  		/* add R29, R11, R25 */
		/* 820812FCh case    4:*/		cpu::op::add<0>(regs,&regs.R29,regs.R11,regs.R25);
		/* 820812FCh case    4:*/		return 0x82081300;
		  /* 82081300h */ case    5:  		/* bc 12, CR0_EQ, 60 */
		/* 82081300h case    5:*/		if ( regs.CR[0].eq ) { return 0x8208133C;  }
		/* 82081300h case    5:*/		return 0x82081304;
		  /* 82081304h */ case    6:  		/* lbz R11, <#[R30 + 600]> */
		/* 82081304h case    6:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000258) );
		/* 82081304h case    6:*/		return 0x82081308;
		  /* 82081308h */ case    7:  		/* li R5, 1 */
		/* 82081308h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82081308h case    7:*/		return 0x8208130C;
		  /* 8208130Ch */ case    8:  		/* lwz R3, <#[R30 + 592]> */
		/* 8208130Ch case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000250) );
		/* 8208130Ch case    8:*/		return 0x82081310;
		  /* 82081310h */ case    9:  		/* rlwinm. R11, R11, 0, 0, 24 */
		/* 82081310h case    9:*/		cpu::op::rlwinm<1,0,0,24>(regs,&regs.R11,regs.R11);
		/* 82081310h case    9:*/		return 0x82081314;
		  /* 82081314h */ case   10:  		/* mr R4, R3 */
		/* 82081314h case   10:*/		regs.R4 = regs.R3;
		/* 82081314h case   10:*/		return 0x82081318;
		  /* 82081318h */ case   11:  		/* bc 12, CR0_EQ, 12 */
		/* 82081318h case   11:*/		if ( regs.CR[0].eq ) { return 0x82081324;  }
		/* 82081318h case   11:*/		return 0x8208131C;
		  /* 8208131Ch */ case   12:  		/* bl -49964 */
		/* 8208131Ch case   12:*/		regs.LR = 0x82081320; return 0x82074FF0;
		/* 8208131Ch case   12:*/		return 0x82081320;
		  /* 82081320h */ case   13:  		/* b 8 */
		/* 82081320h case   13:*/		return 0x82081328;
		/* 82081320h case   13:*/		return 0x82081324;
	}
	return 0x82081324;
} // Block from 820812ECh-82081324h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82081324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081324);
		  /* 82081324h */ case    0:  		/* bl -50124 */
		/* 82081324h case    0:*/		regs.LR = 0x82081328; return 0x82074F58;
		/* 82081324h case    0:*/		return 0x82081328;
	}
	return 0x82081328;
} // Block from 82081324h-82081328h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82081328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081328);
		  /* 82081328h */ case    0:  		/* li R5, 1536 */
		/* 82081328h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x600);
		/* 82081328h case    0:*/		return 0x8208132C;
		  /* 8208132Ch */ case    1:  		/* lwz R4, <#[R30 + 592]> */
		/* 8208132Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000250) );
		/* 8208132Ch case    1:*/		return 0x82081330;
		  /* 82081330h */ case    2:  		/* mr R3, R29 */
		/* 82081330h case    2:*/		regs.R3 = regs.R29;
		/* 82081330h case    2:*/		return 0x82081334;
		  /* 82081334h */ case    3:  		/* bl 67196 */
		/* 82081334h case    3:*/		regs.LR = 0x82081338; return 0x820919B0;
		/* 82081334h case    3:*/		return 0x82081338;
		  /* 82081338h */ case    4:  		/* addi R29, R29, 1536 */
		/* 82081338h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x600);
		/* 82081338h case    4:*/		return 0x8208133C;
	}
	return 0x8208133C;
} // Block from 82081328h-8208133Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8208133Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208133C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208133C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208133C);
		  /* 8208133Ch */ case    0:  		/* lwz R8, <#[R30 + 584]> */
		/* 8208133Ch case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000248) );
		/* 8208133Ch case    0:*/		return 0x82081340;
		  /* 82081340h */ case    1:  		/* mulli R10, R24, 12 */
		/* 82081340h case    1:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R24,0xC);
		/* 82081340h case    1:*/		return 0x82081344;
		  /* 82081344h */ case    2:  		/* lhz R11, <#[R30 + 12]> */
		/* 82081344h case    2:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82081344h case    2:*/		return 0x82081348;
		  /* 82081348h */ case    3:  		/* lwz R7, <#[R30 + 596]> */
		/* 82081348h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000254) );
		/* 82081348h case    3:*/		return 0x8208134C;
		  /* 8208134Ch */ case    4:  		/* lhz R9, <#[R30 + 14]> */
		/* 8208134Ch case    4:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R30 + 0x0000000E) );
		/* 8208134Ch case    4:*/		return 0x82081350;
		  /* 82081350h */ case    5:  		/* lbz R6, <#[R30 + 608]> */
		/* 82081350h case    5:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000260) );
		/* 82081350h case    5:*/		return 0x82081354;
		  /* 82081354h */ case    6:  		/* rlwinm R8, R8, 2, 29, 29 */
		/* 82081354h case    6:*/		cpu::op::rlwinm<0,2,29,29>(regs,&regs.R8,regs.R8);
		/* 82081354h case    6:*/		return 0x82081358;
		  /* 82081358h */ case    7:  		/* add R11, R10, R11 */
		/* 82081358h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82081358h case    7:*/		return 0x8208135C;
		  /* 8208135Ch */ case    8:  		/* rlwinm R10, R28, 26, 0, 5 */
		/* 8208135Ch case    8:*/		cpu::op::rlwinm<0,26,0,5>(regs,&regs.R10,regs.R28);
		/* 8208135Ch case    8:*/		return 0x82081360;
		  /* 82081360h */ case    9:  		/* rlwinm R31, R11, 9, 0, 22 */
		/* 82081360h case    9:*/		cpu::op::rlwinm<0,9,0,22>(regs,&regs.R31,regs.R11);
		/* 82081360h case    9:*/		return 0x82081364;
		  /* 82081364h */ case   10:  		/* or R10, R10, R7 */
		/* 82081364h case   10:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 82081364h case   10:*/		return 0x82081368;
		  /* 82081368h */ case   11:  		/* lwzx R8, <#[R8 + R30]> */
		/* 82081368h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R30 + 0x00000000) );
		/* 82081368h case   11:*/		return 0x8208136C;
		  /* 8208136Ch */ case   12:  		/* rlwinm. R6, R6, 0, 0, 24 */
		/* 8208136Ch case   12:*/		cpu::op::rlwinm<1,0,0,24>(regs,&regs.R6,regs.R6);
		/* 8208136Ch case   12:*/		return 0x82081370;
		  /* 82081370h */ case   13:  		/* rlwinm R11, R10, 0, 2, 31 */
		/* 82081370h case   13:*/		cpu::op::rlwinm<0,0,2,31>(regs,&regs.R11,regs.R10);
		/* 82081370h case   13:*/		return 0x82081374;
		  /* 82081374h */ case   14:  		/* subf R10, R8, R29 */
		/* 82081374h case   14:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R8,regs.R29);
		/* 82081374h case   14:*/		return 0x82081378;
		  /* 82081378h */ case   15:  		/* stw R11, <#[R30 + 596]> */
		/* 82081378h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000254) );
		/* 82081378h case   15:*/		return 0x8208137C;
		  /* 8208137Ch */ case   16:  		/* rlwinm R11, R10, 23, 9, 31 */
		/* 8208137Ch case   16:*/		cpu::op::rlwinm<0,23,9,31>(regs,&regs.R11,regs.R10);
		/* 8208137Ch case   16:*/		return 0x82081380;
		  /* 82081380h */ case   17:  		/* add R11, R11, R9 */
		/* 82081380h case   17:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82081380h case   17:*/		return 0x82081384;
		  /* 82081384h */ case   18:  		/* sth R11, <#[R30 + 12]> */
		/* 82081384h case   18:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82081384h case   18:*/		return 0x82081388;
		  /* 82081388h */ case   19:  		/* bc 12, CR0_EQ, 100 */
		/* 82081388h case   19:*/		if ( regs.CR[0].eq ) { return 0x820813EC;  }
		/* 82081388h case   19:*/		return 0x8208138C;
		  /* 8208138Ch */ case   20:  		/* lwz R11, <#[R30 + 380]> */
		/* 8208138Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000017C) );
		/* 8208138Ch case   20:*/		return 0x82081390;
		  /* 82081390h */ case   21:  		/* mr R3, R27 */
		/* 82081390h case   21:*/		regs.R3 = regs.R27;
		/* 82081390h case   21:*/		return 0x82081394;
		  /* 82081394h */ case   22:  		/* stw R22, <#[R30 + 360]> */
		/* 82081394h case   22:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R30 + 0x00000168) );
		/* 82081394h case   22:*/		return 0x82081398;
		  /* 82081398h */ case   23:  		/* stw R11, <#[R30 + 356]> */
		/* 82081398h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000164) );
		/* 82081398h case   23:*/		return 0x8208139C;
		  /* 8208139Ch */ case   24:  		/* bl -58788 */
		/* 8208139Ch case   24:*/		regs.LR = 0x820813A0; return 0x82072DF8;
		/* 8208139Ch case   24:*/		return 0x820813A0;
		  /* 820813A0h */ case   25:  		/* lwz R11, <#[R30 + 584]> */
		/* 820813A0h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000248) );
		/* 820813A0h case   25:*/		return 0x820813A4;
		  /* 820813A4h */ case   26:  		/* addi R7, R30, 348 */
		/* 820813A4h case   26:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R30,0x15C);
		/* 820813A4h case   26:*/		return 0x820813A8;
		  /* 820813A8h */ case   27:  		/* addi R11, R11, -1 */
		/* 820813A8h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820813A8h case   27:*/		return 0x820813AC;
		  /* 820813ACh */ case   28:  		/* addi R6, R1, 80 */
		/* 820813ACh case   28:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 820813ACh case   28:*/		return 0x820813B0;
		  /* 820813B0h */ case   29:  		/* rlwinm R11, R11, 2, 29, 29 */
		/* 820813B0h case   29:*/		cpu::op::rlwinm<0,2,29,29>(regs,&regs.R11,regs.R11);
		/* 820813B0h case   29:*/		return 0x820813B4;
		  /* 820813B4h */ case   30:  		/* mr R5, R31 */
		/* 820813B4h case   30:*/		regs.R5 = regs.R31;
		/* 820813B4h case   30:*/		return 0x820813B8;
	}
	return 0x820813B8;
} // Block from 8208133Ch-820813B8h (31 instructions)

//////////////////////////////////////////////////////
// Block at 820813B8h
// Function '?FrameDone@D3D@@YAXK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820813B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820813B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820813B8);
		  /* 820813B8h */ case    0:  		/* lwzx R4, <#[R11 + R30]> */
		/* 820813B8h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820813B8h case    0:*/		return 0x820813BC;
		  /* 820813BCh */ case    1:  		/* lwz R11, <#[R30 + 596]> */
		/* 820813BCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000254) );
		/* 820813BCh case    1:*/		return 0x820813C0;
		  /* 820813C0h */ case    2:  		/* rlwinm R10, R11, 12, 26, 31 */
		/* 820813C0h case    2:*/		cpu::op::rlwinm<0,12,26,31>(regs,&regs.R10,regs.R11);
		/* 820813C0h case    2:*/		return 0x820813C4;
		  /* 820813C4h */ case    3:  		/* addi R11, R10, 5 */
		/* 820813C4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x5);
		/* 820813C4h case    3:*/		return 0x820813C8;
		  /* 820813C8h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820813C8h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820813C8h case    4:*/		return 0x820813CC;
		  /* 820813CCh */ case    5:  		/* lwzx R3, <#[R11 + R30]> */
		/* 820813CCh case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 820813CCh case    5:*/		return 0x820813D0;
		  /* 820813D0h */ case    6:  		/* bl 30360 */
		/* 820813D0h case    6:*/		regs.LR = 0x820813D4; return 0x82088A68;
		/* 820813D0h case    6:*/		return 0x820813D4;
		  /* 820813D4h */ case    7:  		/* lbz R11, <#[R30 + 608]> */
		/* 820813D4h case    7:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000260) );
		/* 820813D4h case    7:*/		return 0x820813D8;
		  /* 820813D8h */ case    8:  		/* mr R4, R31 */
		/* 820813D8h case    8:*/		regs.R4 = regs.R31;
		/* 820813D8h case    8:*/		return 0x820813DC;
		  /* 820813DCh */ case    9:  		/* mr R3, R30 */
		/* 820813DCh case    9:*/		regs.R3 = regs.R30;
		/* 820813DCh case    9:*/		return 0x820813E0;
		  /* 820813E0h */ case   10:  		/* ori R11, R11, 64 */
		/* 820813E0h case   10:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x40);
		/* 820813E0h case   10:*/		return 0x820813E4;
		  /* 820813E4h */ case   11:  		/* stb R11, <#[R30 + 608]> */
		/* 820813E4h case   11:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R30 + 0x00000260) );
		/* 820813E4h case   11:*/		return 0x820813E8;
		  /* 820813E8h */ case   12:  		/* bl -4368 */
		/* 820813E8h case   12:*/		regs.LR = 0x820813EC; return 0x820802D8;
		/* 820813E8h case   12:*/		return 0x820813EC;
	}
	return 0x820813EC;
} // Block from 820813B8h-820813ECh (13 instructions)

//////////////////////////////////////////////////////
// Block at 820813ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820813EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820813EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820813EC);
		  /* 820813ECh */ case    0:  		/* lbz R10, <#[R30 + 608]> */
		/* 820813ECh case    0:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000260) );
		/* 820813ECh case    0:*/		return 0x820813F0;
		  /* 820813F0h */ case    1:  		/* lwz R11, <#[R30 + 584]> */
		/* 820813F0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000248) );
		/* 820813F0h case    1:*/		return 0x820813F4;
		  /* 820813F4h */ case    2:  		/* ori R10, R10, 128 */
		/* 820813F4h case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x80);
		/* 820813F4h case    2:*/		return 0x820813F8;
		  /* 820813F8h */ case    3:  		/* addi R11, R11, 1 */
		/* 820813F8h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820813F8h case    3:*/		return 0x820813FC;
		  /* 820813FCh */ case    4:  		/* stb R10, <#[R30 + 608]> */
		/* 820813FCh case    4:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R30 + 0x00000260) );
		/* 820813FCh case    4:*/		return 0x82081400;
		  /* 82081400h */ case    5:  		/* stw R11, <#[R30 + 584]> */
		/* 82081400h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000248) );
		/* 82081400h case    5:*/		return 0x82081404;
		  /* 82081404h */ case    6:  		/* addi R1, R1, 176 */
		/* 82081404h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82081404h case    6:*/		return 0x82081408;
		  /* 82081408h */ case    7:  		/* b 65160 */
		/* 82081408h case    7:*/		return 0x82091290;
		/* 82081408h case    7:*/		return 0x8208140C;
		  /* 8208140Ch */ case    8:  		/* nop */
		/* 8208140Ch case    8:*/		cpu::op::nop();
		/* 8208140Ch case    8:*/		return 0x82081410;
	}
	return 0x82081410;
} // Block from 820813ECh-82081410h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82081410h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081410);
		  /* 82081410h */ case    0:  		/* mfspr R12, LR */
		/* 82081410h case    0:*/		regs.R12 = regs.LR;
		/* 82081410h case    0:*/		return 0x82081414;
		  /* 82081414h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82081414h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82081414h case    1:*/		return 0x82081418;
		  /* 82081418h */ case    2:  		/* stwu R1, <#[R1 - 352]> */
		/* 82081418h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEA0);
		/* 82081418h case    2:*/		return 0x8208141C;
		  /* 8208141Ch */ case    3:  		/* lis R11, -32215 */
		/* 8208141Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 8208141Ch case    3:*/		return 0x82081420;
		  /* 82081420h */ case    4:  		/* addi R5, R11, -31584 */
		/* 82081420h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFF84A0);
		/* 82081420h case    4:*/		return 0x82081424;
		  /* 82081424h */ case    5:  		/* lbz R11, <#[R5 + 262]> */
		/* 82081424h case    5:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000106) );
		/* 82081424h case    5:*/		return 0x82081428;
		  /* 82081428h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 82081428h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82081428h case    6:*/		return 0x8208142C;
		  /* 8208142Ch */ case    7:  		/* bc 12, CR0_EQ, 192 */
		/* 8208142Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x820814EC;  }
		/* 8208142Ch case    7:*/		return 0x82081430;
		  /* 82081430h */ case    8:  		/* lbz R11, <#[R3 + 24380]> */
		/* 82081430h case    8:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R3 + 0x00005F3C) );
		/* 82081430h case    8:*/		return 0x82081434;
		  /* 82081434h */ case    9:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 82081434h case    9:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 82081434h case    9:*/		return 0x82081438;
		  /* 82081438h */ case   10:  		/* bc 4, CR0_EQ, 144 */
		/* 82081438h case   10:*/		if ( !regs.CR[0].eq ) { return 0x820814C8;  }
		/* 82081438h case   10:*/		return 0x8208143C;
		  /* 8208143Ch */ case   11:  		/* bl -3164 */
		/* 8208143Ch case   11:*/		regs.LR = 0x82081440; return 0x820807E0;
		/* 8208143Ch case   11:*/		return 0x82081440;
		  /* 82081440h */ case   12:  		/* addic R11, R3, -1 */
		/* 82081440h case   12:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R3,0xFFFFFFFF);
		/* 82081440h case   12:*/		return 0x82081444;
		  /* 82081444h */ case   13:  		/* lis R10, -32768 */
		/* 82081444h case   13:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 82081444h case   13:*/		return 0x82081448;
		  /* 82081448h */ case   14:  		/* subfe R11, R11, R11 */
		/* 82081448h case   14:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82081448h case   14:*/		return 0x8208144C;
		  /* 8208144Ch */ case   15:  		/* ori R10, R10, 16389 */
		/* 8208144Ch case   15:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x4005);
		/* 8208144Ch case   15:*/		return 0x82081450;
		  /* 82081450h */ case   16:  		/* lis R9, -32256 */
		/* 82081450h case   16:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 82081450h case   16:*/		return 0x82081454;
		  /* 82081454h */ case   17:  		/* lis R8, -32256 */
		/* 82081454h case   17:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 82081454h case   17:*/		return 0x82081458;
	}
	return 0x82081458;
} // Block from 82081410h-82081458h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82081458h
// Function '?BuildVideoRecord@D3D@@YAKPAVCDevice@1@KW4_D3DFORMAT@@KKPBU_D3DPRIVATE_SCALER_PARAMETERS@@PBU_D3DGAMMARAMP@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081458);
		  /* 82081458h */ case    0:  		/* addi R5, R9, 16840 */
		/* 82081458h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R9,0x41C8);
		/* 82081458h case    0:*/		return 0x8208145C;
		  /* 8208145Ch */ case    1:  		/* and R6, R11, R10 */
		/* 8208145Ch case    1:*/		cpu::op::and<0>(regs,&regs.R6,regs.R11,regs.R10);
		/* 8208145Ch case    1:*/		return 0x82081460;
		  /* 82081460h */ case    2:  		/* addi R4, R8, 16828 */
		/* 82081460h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R8,0x41BC);
		/* 82081460h case    2:*/		return 0x82081464;
		  /* 82081464h */ case    3:  		/* addi R3, R1, 80 */
		/* 82081464h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82081464h case    3:*/		return 0x82081468;
		  /* 82081468h */ case    4:  		/* bl 2014128 */
		/* 82081468h case    4:*/		regs.LR = 0x8208146C; return 0x8226D018;
		/* 82081468h case    4:*/		return 0x8208146C;
		  /* 8208146Ch */ case    5:  		/* lis R11, -32256 */
		/* 8208146Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8208146Ch case    5:*/		return 0x82081470;
		  /* 82081470h */ case    6:  		/* lwz R11, <#[R11 + 1144]> */
		/* 82081470h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000478) );
		/* 82081470h case    6:*/		return 0x82081474;
		  /* 82081474h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 82081474h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82081474h case    7:*/		return 0x82081478;
		  /* 82081478h */ case    8:  		/* cmplwi CR6, R10, 0 */
		/* 82081478h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82081478h case    8:*/		return 0x8208147C;
		  /* 8208147Ch */ case    9:  		/* bc 12, CR6_EQ, 32 */
		/* 8208147Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x8208149C;  }
		/* 8208147Ch case    9:*/		return 0x82081480;
		  /* 82081480h */ case   10:  		/* rlwinm R11, R10, 0, 0, 31 */
		/* 82081480h case   10:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R10);
		/* 82081480h case   10:*/		return 0x82081484;
		  /* 82081484h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 82081484h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82081484h case   11:*/		return 0x82081488;
		  /* 82081488h */ case   12:  		/* bc 12, CR6_EQ, 100 */
		/* 82081488h case   12:*/		if ( regs.CR[6].eq ) { return 0x820814EC;  }
		/* 82081488h case   12:*/		return 0x8208148C;
		  /* 8208148Ch */ case   13:  		/* lwz R11, <#[R11]> */
		/* 8208148Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8208148Ch case   13:*/		return 0x82081490;
		  /* 82081490h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 82081490h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82081490h case   14:*/		return 0x82081494;
		  /* 82081494h */ case   15:  		/* bc 12, CR6_EQ, 88 */
		/* 82081494h case   15:*/		if ( regs.CR[6].eq ) { return 0x820814EC;  }
		/* 82081494h case   15:*/		return 0x82081498;
		  /* 82081498h */ case   16:  		/* b 28 */
		/* 82081498h case   16:*/		return 0x820814B4;
		/* 82081498h case   16:*/		return 0x8208149C;
	}
	return 0x8208149C;
} // Block from 82081458h-8208149Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8208149Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208149C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208149C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208149C);
		  /* 8208149Ch */ case    0:  		/* lis R11, -32256 */
		/* 8208149Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8208149Ch case    0:*/		return 0x820814A0;
		  /* 820814A0h */ case    1:  		/* lwz R11, <#[R11 + 1140]> */
		/* 820814A0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000474) );
		/* 820814A0h case    1:*/		return 0x820814A4;
		  /* 820814A4h */ case    2:  		/* lwz R11, <#[R11]> */
		/* 820814A4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820814A4h case    2:*/		return 0x820814A8;
		  /* 820814A8h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 820814A8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820814A8h case    3:*/		return 0x820814AC;
		  /* 820814ACh */ case    4:  		/* bc 12, CR6_EQ, 64 */
		/* 820814ACh case    4:*/		if ( regs.CR[6].eq ) { return 0x820814EC;  }
		/* 820814ACh case    4:*/		return 0x820814B0;
		  /* 820814B0h */ case    5:  		/* lwz R11, <#[R11 + 24]> */
		/* 820814B0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 820814B0h case    5:*/		return 0x820814B4;
	}
	return 0x820814B4;
} // Block from 8208149Ch-820814B4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820814B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820814B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820814B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820814B4);
		  /* 820814B4h */ case    0:  		/* li R3, 27 */
		/* 820814B4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1B);
		/* 820814B4h case    0:*/		return 0x820814B8;
		  /* 820814B8h */ case    1:  		/* mtspr CTR, R11 */
		/* 820814B8h case    1:*/		regs.CTR = regs.R11;
		/* 820814B8h case    1:*/		return 0x820814BC;
		  /* 820814BCh */ case    2:  		/* addi R4, R1, 80 */
		/* 820814BCh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 820814BCh case    2:*/		return 0x820814C0;
		  /* 820814C0h */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 820814C0h case    3:*/		if ( 1 ) { regs.LR = 0x820814C4; return (uint32)regs.CTR; }
		/* 820814C0h case    3:*/		return 0x820814C4;
		  /* 820814C4h */ case    4:  		/* b 40 */
		/* 820814C4h case    4:*/		return 0x820814EC;
		/* 820814C4h case    4:*/		return 0x820814C8;
	}
	return 0x820814C8;
} // Block from 820814B4h-820814C8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820814C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820814C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820814C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820814C8);
		  /* 820814C8h */ case    0:  		/* lbz R11, <#[R5 + 260]> */
		/* 820814C8h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000104) );
		/* 820814C8h case    0:*/		return 0x820814CC;
		  /* 820814CCh */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 820814CCh case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 820814CCh case    1:*/		return 0x820814D0;
		  /* 820814D0h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 820814D0h case    2:*/		if ( regs.CR[0].eq ) { return 0x820814DC;  }
		/* 820814D0h case    2:*/		return 0x820814D4;
		  /* 820814D4h */ case    3:  		/* bl -4420 */
		/* 820814D4h case    3:*/		regs.LR = 0x820814D8; return 0x82080390;
		/* 820814D4h case    3:*/		return 0x820814D8;
		  /* 820814D8h */ case    4:  		/* b 20 */
		/* 820814D8h case    4:*/		return 0x820814EC;
		/* 820814D8h case    4:*/		return 0x820814DC;
	}
	return 0x820814DC;
} // Block from 820814C8h-820814DCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 820814DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820814DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820814DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820814DC);
		  /* 820814DCh */ case    0:  		/* lbz R11, <#[R5 + 261]> */
		/* 820814DCh case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000105) );
		/* 820814DCh case    0:*/		return 0x820814E0;
		  /* 820814E0h */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 820814E0h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 820814E0h case    1:*/		return 0x820814E4;
		  /* 820814E4h */ case    2:  		/* bc 12, CR0_EQ, 8 */
		/* 820814E4h case    2:*/		if ( regs.CR[0].eq ) { return 0x820814EC;  }
		/* 820814E4h case    2:*/		return 0x820814E8;
		  /* 820814E8h */ case    3:  		/* bl -2464 */
		/* 820814E8h case    3:*/		regs.LR = 0x820814EC; return 0x82080B48;
		/* 820814E8h case    3:*/		return 0x820814EC;
	}
	return 0x820814EC;
} // Block from 820814DCh-820814ECh (4 instructions)

//////////////////////////////////////////////////////
// Block at 820814ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820814EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820814EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820814EC);
		  /* 820814ECh */ case    0:  		/* addi R1, R1, 352 */
		/* 820814ECh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x160);
		/* 820814ECh case    0:*/		return 0x820814F0;
		  /* 820814F0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820814F0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820814F0h case    1:*/		return 0x820814F4;
		  /* 820814F4h */ case    2:  		/* mtspr LR, R12 */
		/* 820814F4h case    2:*/		regs.LR = regs.R12;
		/* 820814F4h case    2:*/		return 0x820814F8;
		  /* 820814F8h */ case    3:  		/* bclr 20, CR0_LT */
		/* 820814F8h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820814F8h case    3:*/		return 0x820814FC;
	}
	return 0x820814FC;
} // Block from 820814ECh-820814FCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 820814FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820814FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820814FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820814FC);
		  /* 820814FCh */ case    0:  		/* nop */
		/* 820814FCh case    0:*/		cpu::op::nop();
		/* 820814FCh case    0:*/		return 0x82081500;
		  /* 82081500h */ case    1:  		/* cmplwi CR6, R3, 30 */
		/* 82081500h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000001E);
		/* 82081500h case    1:*/		return 0x82081504;
		  /* 82081504h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 82081504h case    2:*/		if ( regs.CR[6].eq ) { return 0x82081544;  }
		/* 82081504h case    2:*/		return 0x82081508;
		  /* 82081508h */ case    3:  		/* cmplwi CR6, R3, 31 */
		/* 82081508h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000001F);
		/* 82081508h case    3:*/		return 0x8208150C;
		  /* 8208150Ch */ case    4:  		/* bc 12, CR6_EQ, 56 */
		/* 8208150Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x82081544;  }
		/* 8208150Ch case    4:*/		return 0x82081510;
		  /* 82081510h */ case    5:  		/* cmplwi CR6, R3, 32 */
		/* 82081510h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000020);
		/* 82081510h case    5:*/		return 0x82081514;
		  /* 82081514h */ case    6:  		/* bc 12, CR6_EQ, 48 */
		/* 82081514h case    6:*/		if ( regs.CR[6].eq ) { return 0x82081544;  }
		/* 82081514h case    6:*/		return 0x82081518;
		  /* 82081518h */ case    7:  		/* cmplwi CR6, R3, 36 */
		/* 82081518h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000024);
		/* 82081518h case    7:*/		return 0x8208151C;
		  /* 8208151Ch */ case    8:  		/* bc 12, CR6_EQ, 40 */
		/* 8208151Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x82081544;  }
		/* 8208151Ch case    8:*/		return 0x82081520;
		  /* 82081520h */ case    9:  		/* cmplwi CR6, R3, 37 */
		/* 82081520h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000025);
		/* 82081520h case    9:*/		return 0x82081524;
		  /* 82081524h */ case   10:  		/* bc 12, CR6_EQ, 32 */
		/* 82081524h case   10:*/		if ( regs.CR[6].eq ) { return 0x82081544;  }
		/* 82081524h case   10:*/		return 0x82081528;
		  /* 82081528h */ case   11:  		/* cmplwi CR6, R3, 38 */
		/* 82081528h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000026);
		/* 82081528h case   11:*/		return 0x8208152C;
		  /* 8208152Ch */ case   12:  		/* bc 12, CR6_EQ, 24 */
		/* 8208152Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x82081544;  }
		/* 8208152Ch case   12:*/		return 0x82081530;
		  /* 82081530h */ case   13:  		/* cmplwi CR6, R3, 57 */
		/* 82081530h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000039);
		/* 82081530h case   13:*/		return 0x82081534;
		  /* 82081534h */ case   14:  		/* bc 12, CR6_EQ, 16 */
		/* 82081534h case   14:*/		if ( regs.CR[6].eq ) { return 0x82081544;  }
		/* 82081534h case   14:*/		return 0x82081538;
		  /* 82081538h */ case   15:  		/* cmplwi CR6, R3, 63 */
		/* 82081538h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000003F);
		/* 82081538h case   15:*/		return 0x8208153C;
		  /* 8208153Ch */ case   16:  		/* li R3, 0 */
		/* 8208153Ch case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8208153Ch case   16:*/		return 0x82081540;
		  /* 82081540h */ case   17:  		/* bclr 4, CR6_EQ */
		/* 82081540h case   17:*/		if ( !regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 82081540h case   17:*/		return 0x82081544;
	}
	return 0x82081544;
} // Block from 820814FCh-82081544h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82081544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081544);
		  /* 82081544h */ case    0:  		/* li R3, 1 */
		/* 82081544h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82081544h case    0:*/		return 0x82081548;
		  /* 82081548h */ case    1:  		/* bclr 20, CR0_LT */
		/* 82081548h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82081548h case    1:*/		return 0x8208154C;
	}
	return 0x8208154C;
} // Block from 82081544h-8208154Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8208154Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208154C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208154C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208154C);
		  /* 8208154Ch */ case    0:  		/* nop */
		/* 8208154Ch case    0:*/		cpu::op::nop();
		/* 8208154Ch case    0:*/		return 0x82081550;
		  /* 82081550h */ case    1:  		/* lis R11, -32256 */
		/* 82081550h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82081550h case    1:*/		return 0x82081554;
		  /* 82081554h */ case    2:  		/* mr VR60, VR1 */
		/* 82081554h case    2:*/		regs.VR60 = regs.VR1;
		/* 82081554h case    2:*/		return 0x82081558;
		  /* 82081558h */ case    3:  		/* lis R10, -32256 */
		/* 82081558h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82081558h case    3:*/		return 0x8208155C;
		  /* 8208155Ch */ case    4:  		/* addi R11, R11, 17008 */
		/* 8208155Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4270);
		/* 8208155Ch case    4:*/		return 0x82081560;
		  /* 82081560h */ case    5:  		/* addi R10, R10, 16992 */
		/* 82081560h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4260);
		/* 82081560h case    5:*/		return 0x82081564;
		  /* 82081564h */ case    6:  		/* lis R9, -32256 */
		/* 82081564h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 82081564h case    6:*/		return 0x82081568;
		  /* 82081568h */ case    7:  		/* addi R9, R9, 16976 */
		/* 82081568h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4250);
		/* 82081568h case    7:*/		return 0x8208156C;
		  /* 8208156Ch */ case    8:  		/* lvx VR63, <#[R11]> */
		/* 8208156Ch case    8:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R11 + 0x00000000) );
		/* 8208156Ch case    8:*/		return 0x82081570;
		  /* 82081570h */ case    9:  		/* lvx VR62, <#[R10]> */
		/* 82081570h case    9:*/		cpu::mem::lvx( regs, &regs.VR62, (uint32)(regs.R10 + 0x00000000) );
		/* 82081570h case    9:*/		return 0x82081574;
		  /* 82081574h */ case   10:  		/* vspltw VR59, VR63, 0 */
		/* 82081574h case   10:*/		cpu::op::vspltw<0,0>(regs,&regs.VR59,regs.VR63);
		/* 82081574h case   10:*/		return 0x82081578;
		  /* 82081578h */ case   11:  		/* vspltw VR0, VR62, 3 */
		/* 82081578h case   11:*/		cpu::op::vspltw<0,3>(regs,&regs.VR0,regs.VR62);
		/* 82081578h case   11:*/		return 0x8208157C;
		  /* 8208157Ch */ case   12:  		/* vspltw VR56, VR62, 2 */
		/* 8208157Ch case   12:*/		cpu::op::vspltw<0,2>(regs,&regs.VR56,regs.VR62);
		/* 8208157Ch case   12:*/		return 0x82081580;
		  /* 82081580h */ case   13:  		/* lvx VR61, <#[R9]> */
		/* 82081580h case   13:*/		cpu::mem::lvx( regs, &regs.VR61, (uint32)(regs.R9 + 0x00000000) );
		/* 82081580h case   13:*/		return 0x82081584;
		  /* 82081584h */ case   14:  		/* vspltw VR55, VR62, 1 */
		/* 82081584h case   14:*/		cpu::op::vspltw<0,1>(regs,&regs.VR55,regs.VR62);
		/* 82081584h case   14:*/		return 0x82081588;
		  /* 82081588h */ case   15:  		/* vmulfp128 VR59, VR60, VR59 */
		/* 82081588h case   15:*/		cpu::op::vmulfp128<0>(regs,&regs.VR59,regs.VR60,regs.VR59);
		/* 82081588h case   15:*/		return 0x8208158C;
		  /* 8208158Ch */ case   16:  		/* vspltw VR62, VR62, 0 */
		/* 8208158Ch case   16:*/		cpu::op::vspltw<0,0>(regs,&regs.VR62,regs.VR62);
		/* 8208158Ch case   16:*/		return 0x82081590;
		  /* 82081590h */ case   17:  		/* vspltw VR58, VR63, 2 */
		/* 82081590h case   17:*/		cpu::op::vspltw<0,2>(regs,&regs.VR58,regs.VR63);
		/* 82081590h case   17:*/		return 0x82081594;
		  /* 82081594h */ case   18:  		/* vspltw VR57, VR63, 3 */
		/* 82081594h case   18:*/		cpu::op::vspltw<0,3>(regs,&regs.VR57,regs.VR63);
		/* 82081594h case   18:*/		return 0x82081598;
		  /* 82081598h */ case   19:  		/* vcmpgtfp VR12, VR56, VR60 */
		/* 82081598h case   19:*/		cpu::op::vcmpgtfp<0>(regs,&regs.VR12,regs.VR56,regs.VR60);
		/* 82081598h case   19:*/		return 0x8208159C;
		  /* 8208159Ch */ case   20:  		/* vspltw VR9, VR61, 2 */
		/* 8208159Ch case   20:*/		cpu::op::vspltw<0,2>(regs,&regs.VR9,regs.VR61);
		/* 8208159Ch case   20:*/		return 0x820815A0;
		  /* 820815A0h */ case   21:  		/* vcmpgtfp VR7, VR55, VR60 */
		/* 820815A0h case   21:*/		cpu::op::vcmpgtfp<0>(regs,&regs.VR7,regs.VR55,regs.VR60);
		/* 820815A0h case   21:*/		return 0x820815A4;
		  /* 820815A4h */ case   22:  		/* vcmpgtfp VR8, VR62, VR60 */
		/* 820815A4h case   22:*/		cpu::op::vcmpgtfp<0>(regs,&regs.VR8,regs.VR62,regs.VR60);
		/* 820815A4h case   22:*/		return 0x820815A8;
		  /* 820815A8h */ case   23:  		/* vspltw VR4, VR61, 3 */
		/* 820815A8h case   23:*/		cpu::op::vspltw<0,3>(regs,&regs.VR4,regs.VR61);
		/* 820815A8h case   23:*/		return 0x820815AC;
		  /* 820815ACh */ case   24:  		/* vspltw VR11, VR61, 1 */
		/* 820815ACh case   24:*/		cpu::op::vspltw<0,1>(regs,&regs.VR11,regs.VR61);
		/* 820815ACh case   24:*/		return 0x820815B0;
		  /* 820815B0h */ case   25:  		/* vspltw VR63, VR63, 1 */
		/* 820815B0h case   25:*/		cpu::op::vspltw<0,1>(regs,&regs.VR63,regs.VR63);
		/* 820815B0h case   25:*/		return 0x820815B4;
		  /* 820815B4h */ case   26:  		/* vrfin VR62, VR59 */
		/* 820815B4h case   26:*/		cpu::op::vrfin<0>(regs,&regs.VR62,regs.VR59);
		/* 820815B4h case   26:*/		return 0x820815B8;
		  /* 820815B8h */ case   27:  		/* vmulfp128 VR61, VR62, VR58 */
		/* 820815B8h case   27:*/		cpu::op::vmulfp128<0>(regs,&regs.VR61,regs.VR62,regs.VR58);
		/* 820815B8h case   27:*/		return 0x820815BC;
		  /* 820815BCh */ case   28:  		/* vmulfp128 VR59, VR62, VR57 */
		/* 820815BCh case   28:*/		cpu::op::vmulfp128<0>(regs,&regs.VR59,regs.VR62,regs.VR57);
		/* 820815BCh case   28:*/		return 0x820815C0;
		  /* 820815C0h */ case   29:  		/* vmulfp128 VR63, VR62, VR63 */
		/* 820815C0h case   29:*/		cpu::op::vmulfp128<0>(regs,&regs.VR63,regs.VR62,regs.VR63);
		/* 820815C0h case   29:*/		return 0x820815C4;
		  /* 820815C4h */ case   30:  		/* vmulfp128 VR13, VR62, VR0 */
		/* 820815C4h case   30:*/		cpu::op::vmulfp128<0>(regs,&regs.VR13,regs.VR62,regs.VR0);
		/* 820815C4h case   30:*/		return 0x820815C8;
		  /* 820815C8h */ case   31:  		/* vrfiz VR10, VR61 */
		/* 820815C8h case   31:*/		cpu::op::vrfiz<0>(regs,&regs.VR10,regs.VR61);
		/* 820815C8h case   31:*/		return 0x820815CC;
		  /* 820815CCh */ case   32:  		/* vrfiz VR5, VR59 */
		/* 820815CCh case   32:*/		cpu::op::vrfiz<0>(regs,&regs.VR5,regs.VR59);
		/* 820815CCh case   32:*/		return 0x820815D0;
		  /* 820815D0h */ case   33:  		/* vrfiz VR6, VR63 */
		/* 820815D0h case   33:*/		cpu::op::vrfiz<0>(regs,&regs.VR6,regs.VR63);
		/* 820815D0h case   33:*/		return 0x820815D4;
		  /* 820815D4h */ case   34:  		/* vmaddfp VR9, VR10, VR0, VR9 */
		/* 820815D4h case   34:*/		cpu::op::vmaddfp<0>(regs,&regs.VR9,regs.VR10,regs.VR0,regs.VR9);
		/* 820815D4h case   34:*/		return 0x820815D8;
		  /* 820815D8h */ case   35:  		/* vmaddfp VR10, VR5, VR0, VR4 */
		/* 820815D8h case   35:*/		cpu::op::vmaddfp<0>(regs,&regs.VR10,regs.VR5,regs.VR0,regs.VR4);
		/* 820815D8h case   35:*/		return 0x820815DC;
		  /* 820815DCh */ case   36:  		/* vmaddfp VR11, VR6, VR0, VR11 */
		/* 820815DCh case   36:*/		cpu::op::vmaddfp<0>(regs,&regs.VR11,regs.VR6,regs.VR0,regs.VR11);
		/* 820815DCh case   36:*/		return 0x820815E0;
		  /* 820815E0h */ case   37:  		/* vsel VR12, VR10, VR9, VR12 */
		/* 820815E0h case   37:*/		cpu::op::vsel<0>(regs,&regs.VR12,regs.VR10,regs.VR9,regs.VR12);
		/* 820815E0h case   37:*/		return 0x820815E4;
		  /* 820815E4h */ case   38:  		/* vsel VR0, VR12, VR11, VR7 */
		/* 820815E4h case   38:*/		cpu::op::vsel<0>(regs,&regs.VR0,regs.VR12,regs.VR11,regs.VR7);
		/* 820815E4h case   38:*/		return 0x820815E8;
		  /* 820815E8h */ case   39:  		/* vsel VR1, VR0, VR13, VR8 */
		/* 820815E8h case   39:*/		cpu::op::vsel<0>(regs,&regs.VR1,regs.VR0,regs.VR13,regs.VR8);
		/* 820815E8h case   39:*/		return 0x820815EC;
		  /* 820815ECh */ case   40:  		/* vrlimi128 VR1, VR60, 1, 0 */
		/* 820815ECh case   40:*/		cpu::op::vrlimi128<0,1,0>(regs,&regs.VR1,regs.VR60);
		/* 820815ECh case   40:*/		return 0x820815F0;
		  /* 820815F0h */ case   41:  		/* bclr 20, CR0_LT */
		/* 820815F0h case   41:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820815F0h case   41:*/		return 0x820815F4;
	}
	return 0x820815F4;
} // Block from 8208154Ch-820815F4h (42 instructions)

//////////////////////////////////////////////////////
// Block at 820815F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820815F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820815F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820815F4);
		  /* 820815F4h */ case    0:  		/* nop */
		/* 820815F4h case    0:*/		cpu::op::nop();
		/* 820815F4h case    0:*/		return 0x820815F8;
		  /* 820815F8h */ case    1:  		/* stfs FR1, <#[R1 + 20]> */
		/* 820815F8h case    1:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R1 + 0x00000014) );
		/* 820815F8h case    1:*/		return 0x820815FC;
		  /* 820815FCh */ case    2:  		/* lwz R10, <#[R1 + 20]> */
		/* 820815FCh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000014) );
		/* 820815FCh case    2:*/		return 0x82081600;
		  /* 82081600h */ case    3:  		/* rlwinm. R11, R10, 0, 0, 0 */
		/* 82081600h case    3:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R10);
		/* 82081600h case    3:*/		return 0x82081604;
		  /* 82081604h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 82081604h case    4:*/		if ( regs.CR[0].eq ) { return 0x82081610;  }
		/* 82081604h case    4:*/		return 0x82081608;
		  /* 82081608h */ case    5:  		/* li R11, 0 */
		/* 82081608h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82081608h case    5:*/		return 0x8208160C;
		  /* 8208160Ch */ case    6:  		/* b 72 */
		/* 8208160Ch case    6:*/		return 0x82081654;
		/* 8208160Ch case    6:*/		return 0x82081610;
	}
	return 0x82081610;
} // Block from 820815F4h-82081610h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82081610h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081610( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081610) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081610);
		  /* 82081610h */ case    0:  		/* rlwinm R11, R10, 9, 23, 31 */
		/* 82081610h case    0:*/		cpu::op::rlwinm<0,9,23,31>(regs,&regs.R11,regs.R10);
		/* 82081610h case    0:*/		return 0x82081614;
		  /* 82081614h */ case    1:  		/* cmplwi CR6, R11, 113 */
		/* 82081614h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000071);
		/* 82081614h case    1:*/		return 0x82081618;
		  /* 82081618h */ case    2:  		/* bc 12, CR6_LT, 24 */
		/* 82081618h case    2:*/		if ( regs.CR[6].lt ) { return 0x82081630;  }
		/* 82081618h case    2:*/		return 0x8208161C;
		  /* 8208161Ch */ case    3:  		/* rlwinm R11, R10, 0, 5, 8 */
		/* 8208161Ch case    3:*/		cpu::op::rlwinm<0,0,5,8>(regs,&regs.R11,regs.R10);
		/* 8208161Ch case    3:*/		return 0x82081620;
		  /* 82081620h */ case    4:  		/* addi R10, R10, 4 */
		/* 82081620h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82081620h case    4:*/		return 0x82081624;
		  /* 82081624h */ case    5:  		/* or R11, R11, R10 */
		/* 82081624h case    5:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82081624h case    5:*/		return 0x82081628;
		  /* 82081628h */ case    6:  		/* rlwinm R11, R11, 29, 3, 31 */
		/* 82081628h case    6:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R11,regs.R11);
		/* 82081628h case    6:*/		return 0x8208162C;
		  /* 8208162Ch */ case    7:  		/* b 40 */
		/* 8208162Ch case    7:*/		return 0x82081654;
		/* 8208162Ch case    7:*/		return 0x82081630;
	}
	return 0x82081630;
} // Block from 82081610h-82081630h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82081630h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081630);
		  /* 82081630h */ case    0:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 82081630h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82081630h case    0:*/		return 0x82081634;
		  /* 82081634h */ case    1:  		/* rlwinm R9, R10, 0, 9, 31 */
		/* 82081634h case    1:*/		cpu::op::rlwinm<0,0,9,31>(regs,&regs.R9,regs.R10);
		/* 82081634h case    1:*/		return 0x82081638;
		  /* 82081638h */ case    2:  		/* subfic R11, R11, 113 */
		/* 82081638h case    2:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x71);
		/* 82081638h case    2:*/		return 0x8208163C;
		  /* 8208163Ch */ case    3:  		/* li R8, 1 */
		/* 8208163Ch case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8208163Ch case    3:*/		return 0x82081640;
		  /* 82081640h */ case    4:  		/* addi R10, R11, -1 */
		/* 82081640h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 82081640h case    4:*/		return 0x82081644;
		  /* 82081644h */ case    5:  		/* slw R10, R8, R10 */
		/* 82081644h case    5:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 82081644h case    5:*/		return 0x82081648;
		  /* 82081648h */ case    6:  		/* add R10, R10, R9 */
		/* 82081648h case    6:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82081648h case    6:*/		return 0x8208164C;
		  /* 8208164Ch */ case    7:  		/* oris R10, R10, 128 */
		/* 8208164Ch case    7:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x80);
		/* 8208164Ch case    7:*/		return 0x82081650;
		  /* 82081650h */ case    8:  		/* srw R11, R10, R11 */
		/* 82081650h case    8:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82081650h case    8:*/		return 0x82081654;
	}
	return 0x82081654;
} // Block from 82081630h-82081654h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82081654h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081654( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081654) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081654);
		  /* 82081654h */ case    0:  		/* mr R3, R4 */
		/* 82081654h case    0:*/		regs.R3 = regs.R4;
		/* 82081654h case    0:*/		return 0x82081658;
		  /* 82081658h */ case    1:  		/* rlwimi R3, R11, 8, 0, 23 */
		/* 82081658h case    1:*/		cpu::op::rlwimi<0,8,0,23>(regs,&regs.R3,regs.R11);
		/* 82081658h case    1:*/		return 0x8208165C;
		  /* 8208165Ch */ case    2:  		/* bclr 20, CR0_LT */
		/* 8208165Ch case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8208165Ch case    2:*/		return 0x82081660;
	}
	return 0x82081660;
} // Block from 82081654h-82081660h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82081660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081660);
		  /* 82081660h */ case    0:  		/* mfspr R12, LR */
		/* 82081660h case    0:*/		regs.R12 = regs.LR;
		/* 82081660h case    0:*/		return 0x82081664;
		  /* 82081664h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82081664h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82081664h case    1:*/		return 0x82081668;
		  /* 82081668h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82081668h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82081668h case    2:*/		return 0x8208166C;
		  /* 8208166Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8208166Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8208166Ch case    3:*/		return 0x82081670;
		  /* 82081670h */ case    4:  		/* stwu R1, <#[R1 - 128]> */
		/* 82081670h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82081670h case    4:*/		return 0x82081674;
		  /* 82081674h */ case    5:  		/* mr R30, R3 */
		/* 82081674h case    5:*/		regs.R30 = regs.R3;
		/* 82081674h case    5:*/		return 0x82081678;
		  /* 82081678h */ case    6:  		/* mr R31, R6 */
		/* 82081678h case    6:*/		regs.R31 = regs.R6;
		/* 82081678h case    6:*/		return 0x8208167C;
		  /* 8208167Ch */ case    7:  		/* cmplwi CR6, R4, 0 */
		/* 8208167Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8208167Ch case    7:*/		return 0x82081680;
		  /* 82081680h */ case    8:  		/* bc 4, CR6_EQ, 72 */
		/* 82081680h case    8:*/		if ( !regs.CR[6].eq ) { return 0x820816C8;  }
		/* 82081680h case    8:*/		return 0x82081684;
		  /* 82081684h */ case    9:  		/* lhz R11, <#[R3 + 10376]> */
		/* 82081684h case    9:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R3 + 0x00002888) );
		/* 82081684h case    9:*/		return 0x82081688;
		  /* 82081688h */ case   10:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82081688h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82081688h case   10:*/		return 0x8208168C;
		  /* 8208168Ch */ case   11:  		/* bc 4, CR0_EQ, 148 */
		/* 8208168Ch case   11:*/		if ( !regs.CR[0].eq ) { return 0x82081720;  }
		/* 8208168Ch case   11:*/		return 0x82081690;
		  /* 82081690h */ case   12:  		/* lis R11, -32256 */
		/* 82081690h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82081690h case   12:*/		return 0x82081694;
		  /* 82081694h */ case   13:  		/* lis R10, -32256 */
		/* 82081694h case   13:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82081694h case   13:*/		return 0x82081698;
		  /* 82081698h */ case   14:  		/* lfs FR0, <#[R11 + 17028]> */
		/* 82081698h case   14:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00004284) );
		/* 82081698h case   14:*/		return 0x8208169C;
		  /* 8208169Ch */ case   15:  		/* fmuls FR13, FR1, FR0 */
		/* 8208169Ch case   15:*/		cpu::op::fmuls<0>(regs,&regs.FR13,regs.FR1,regs.FR0);
		/* 8208169Ch case   15:*/		return 0x820816A0;
		  /* 820816A0h */ case   16:  		/* lfs FR0, <#[R10 + 17024]> */
		/* 820816A0h case   16:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00004280) );
		/* 820816A0h case   16:*/		return 0x820816A4;
		  /* 820816A4h */ case   17:  		/* fmuls FR0, FR1, FR0 */
		/* 820816A4h case   17:*/		cpu::op::fmuls<0>(regs,&regs.FR0,regs.FR1,regs.FR0);
		/* 820816A4h case   17:*/		return 0x820816A8;
		  /* 820816A8h */ case   18:  		/* fctidz FR13, FR13 */
		/* 820816A8h case   18:*/		cpu::op::fctidz<0>(regs,&regs.FR13,regs.FR13);
		/* 820816A8h case   18:*/		return 0x820816AC;
		  /* 820816ACh */ case   19:  		/* stfd FR13, <#[R1 + 80]> */
		/* 820816ACh case   19:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R1 + 0x00000050) );
		/* 820816ACh case   19:*/		return 0x820816B0;
		  /* 820816B0h */ case   20:  		/* lwz R11, <#[R1 + 84]> */
		/* 820816B0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 820816B0h case   20:*/		return 0x820816B4;
		  /* 820816B4h */ case   21:  		/* fctidz FR0, FR0 */
		/* 820816B4h case   21:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR0);
		/* 820816B4h case   21:*/		return 0x820816B8;
		  /* 820816B8h */ case   22:  		/* stfd FR0, <#[R1 + 80]> */
		/* 820816B8h case   22:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 820816B8h case   22:*/		return 0x820816BC;
		  /* 820816BCh */ case   23:  		/* rlwinm R10, R11, 8, 0, 23 */
		/* 820816BCh case   23:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R10,regs.R11);
		/* 820816BCh case   23:*/		return 0x820816C0;
		  /* 820816C0h */ case   24:  		/* lwz R11, <#[R1 + 84]> */
		/* 820816C0h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 820816C0h case   24:*/		return 0x820816C4;
		  /* 820816C4h */ case   25:  		/* b 84 */
		/* 820816C4h case   25:*/		return 0x82081718;
		/* 820816C4h case   25:*/		return 0x820816C8;
	}
	return 0x820816C8;
} // Block from 82081660h-820816C8h (26 instructions)

//////////////////////////////////////////////////////
// Block at 820816C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820816C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820816C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820816C8);
		  /* 820816C8h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 820816C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 820816C8h case    0:*/		return 0x820816CC;
		  /* 820816CCh */ case    1:  		/* lis R10, -32256 */
		/* 820816CCh case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 820816CCh case    1:*/		return 0x820816D0;
		  /* 820816D0h */ case    2:  		/* rlwinm R11, R11, 1, 25, 30 */
		/* 820816D0h case    2:*/		cpu::op::rlwinm<0,1,25,30>(regs,&regs.R11,regs.R11);
		/* 820816D0h case    2:*/		return 0x820816D4;
		  /* 820816D4h */ case    3:  		/* addi R10, R10, 2992 */
		/* 820816D4h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xBB0);
		/* 820816D4h case    3:*/		return 0x820816D8;
		  /* 820816D8h */ case    4:  		/* lhzx R11, <#[R11 + R10]> */
		/* 820816D8h case    4:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820816D8h case    4:*/		return 0x820816DC;
		  /* 820816DCh */ case    5:  		/* rlwinm. R11, R11, 0, 20, 23 */
		/* 820816DCh case    5:*/		cpu::op::rlwinm<1,0,20,23>(regs,&regs.R11,regs.R11);
		/* 820816DCh case    5:*/		return 0x820816E0;
		  /* 820816E0h */ case    6:  		/* bc 4, CR0_EQ, 64 */
		/* 820816E0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82081720;  }
		/* 820816E0h case    6:*/		return 0x820816E4;
		  /* 820816E4h */ case    7:  		/* lis R11, -32256 */
		/* 820816E4h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820816E4h case    7:*/		return 0x820816E8;
		  /* 820816E8h */ case    8:  		/* lis R10, -32256 */
		/* 820816E8h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 820816E8h case    8:*/		return 0x820816EC;
		  /* 820816ECh */ case    9:  		/* lfs FR0, <#[R11 + 17024]> */
		/* 820816ECh case    9:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00004280) );
		/* 820816ECh case    9:*/		return 0x820816F0;
		  /* 820816F0h */ case   10:  		/* fmuls FR13, FR1, FR0 */
		/* 820816F0h case   10:*/		cpu::op::fmuls<0>(regs,&regs.FR13,regs.FR1,regs.FR0);
		/* 820816F0h case   10:*/		return 0x820816F4;
		  /* 820816F4h */ case   11:  		/* lfs FR0, <#[R10 + 17028]> */
		/* 820816F4h case   11:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00004284) );
		/* 820816F4h case   11:*/		return 0x820816F8;
		  /* 820816F8h */ case   12:  		/* fmuls FR0, FR1, FR0 */
		/* 820816F8h case   12:*/		cpu::op::fmuls<0>(regs,&regs.FR0,regs.FR1,regs.FR0);
		/* 820816F8h case   12:*/		return 0x820816FC;
		  /* 820816FCh */ case   13:  		/* fctidz FR13, FR13 */
		/* 820816FCh case   13:*/		cpu::op::fctidz<0>(regs,&regs.FR13,regs.FR13);
		/* 820816FCh case   13:*/		return 0x82081700;
		  /* 82081700h */ case   14:  		/* stfd FR13, <#[R1 + 88]> */
		/* 82081700h case   14:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R1 + 0x00000058) );
		/* 82081700h case   14:*/		return 0x82081704;
		  /* 82081704h */ case   15:  		/* fctidz FR0, FR0 */
		/* 82081704h case   15:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR0);
		/* 82081704h case   15:*/		return 0x82081708;
		  /* 82081708h */ case   16:  		/* stfd FR0, <#[R1 + 80]> */
		/* 82081708h case   16:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 82081708h case   16:*/		return 0x8208170C;
		  /* 8208170Ch */ case   17:  		/* lwz R11, <#[R1 + 84]> */
		/* 8208170Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8208170Ch case   17:*/		return 0x82081710;
		  /* 82081710h */ case   18:  		/* rlwinm R10, R11, 8, 0, 23 */
		/* 82081710h case   18:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R10,regs.R11);
		/* 82081710h case   18:*/		return 0x82081714;
		  /* 82081714h */ case   19:  		/* lwz R11, <#[R1 + 92]> */
		/* 82081714h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 82081714h case   19:*/		return 0x82081718;
	}
	return 0x82081718;
} // Block from 820816C8h-82081718h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82081718h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081718( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081718) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081718);
		  /* 82081718h */ case    0:  		/* or R3, R10, R31 */
		/* 82081718h case    0:*/		cpu::op::or<0>(regs,&regs.R3,regs.R10,regs.R31);
		/* 82081718h case    0:*/		return 0x8208171C;
		  /* 8208171Ch */ case    1:  		/* b 16 */
		/* 8208171Ch case    1:*/		return 0x8208172C;
		/* 8208171Ch case    1:*/		return 0x82081720;
	}
	return 0x82081720;
} // Block from 82081718h-82081720h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82081720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081720);
		  /* 82081720h */ case    0:  		/* mr R4, R31 */
		/* 82081720h case    0:*/		regs.R4 = regs.R31;
		/* 82081720h case    0:*/		return 0x82081724;
		  /* 82081724h */ case    1:  		/* bl -300 */
		/* 82081724h case    1:*/		regs.LR = 0x82081728; return 0x820815F8;
		/* 82081724h case    1:*/		return 0x82081728;
		  /* 82081728h */ case    2:  		/* rlwinm R11, R3, 11, 21, 31 */
		/* 82081728h case    2:*/		cpu::op::rlwinm<0,11,21,31>(regs,&regs.R11,regs.R3);
		/* 82081728h case    2:*/		return 0x8208172C;
	}
	return 0x8208172C;
} // Block from 82081720h-8208172Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8208172Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208172C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208172C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208172C);
		  /* 8208172Ch */ case    0:  		/* lbz R10, <#[R30 + 10562]> */
		/* 8208172Ch case    0:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R30 + 0x00002942) );
		/* 8208172Ch case    0:*/		return 0x82081730;
		  /* 82081730h */ case    1:  		/* lwz R9, <#[R30 + 10560]> */
		/* 82081730h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00002940) );
		/* 82081730h case    1:*/		return 0x82081734;
		  /* 82081734h */ case    2:  		/* subf R10, R10, R31 */
		/* 82081734h case    2:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R31);
		/* 82081734h case    2:*/		return 0x82081738;
		  /* 82081738h */ case    3:  		/* stw R3, <#[R30 + 10796]> */
		/* 82081738h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00002A2C) );
		/* 82081738h case    3:*/		return 0x8208173C;
		  /* 8208173Ch */ case    4:  		/* nor R9, R9, R9 */
		/* 8208173Ch case    4:*/		cpu::op::nor<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 8208173Ch case    4:*/		return 0x82081740;
		  /* 82081740h */ case    5:  		/* addic R8, R10, -1 */
		/* 82081740h case    5:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R10,0xFFFFFFFF);
		/* 82081740h case    5:*/		return 0x82081744;
		  /* 82081744h */ case    6:  		/* rlwinm R9, R9, 6, 20, 20 */
		/* 82081744h case    6:*/		cpu::op::rlwinm<0,6,20,20>(regs,&regs.R9,regs.R9);
		/* 82081744h case    6:*/		return 0x82081748;
		  /* 82081748h */ case    7:  		/* subfe R10, R8, R10 */
		/* 82081748h case    7:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 82081748h case    7:*/		return 0x8208174C;
		  /* 8208174Ch */ case    8:  		/* rlwinm R10, R10, 11, 0, 20 */
		/* 8208174Ch case    8:*/		cpu::op::rlwinm<0,11,0,20>(regs,&regs.R10,regs.R10);
		/* 8208174Ch case    8:*/		return 0x82081750;
		  /* 82081750h */ case    9:  		/* xor R10, R10, R9 */
		/* 82081750h case    9:*/		cpu::op::xor<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82081750h case    9:*/		return 0x82081754;
		  /* 82081754h */ case   10:  		/* or R11, R10, R11 */
		/* 82081754h case   10:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82081754h case   10:*/		return 0x82081758;
		  /* 82081758h */ case   11:  		/* stw R11, <#[R30 + 10792]> */
		/* 82081758h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00002A28) );
		/* 82081758h case   11:*/		return 0x8208175C;
		  /* 8208175Ch */ case   12:  		/* ld R11, <#[R30 + 32]> */
		/* 8208175Ch case   12:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8208175Ch case   12:*/		return 0x82081760;
		  /* 82081760h */ case   13:  		/* ori R11, R11, 768 */
		/* 82081760h case   13:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x300);
		/* 82081760h case   13:*/		return 0x82081764;
		  /* 82081764h */ case   14:  		/* std R11, <#[R30 + 32]> */
		/* 82081764h case   14:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 82081764h case   14:*/		return 0x82081768;
		  /* 82081768h */ case   15:  		/* addi R1, R1, 128 */
		/* 82081768h case   15:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82081768h case   15:*/		return 0x8208176C;
		  /* 8208176Ch */ case   16:  		/* lwz R12, <#[R1 - 8]> */
		/* 8208176Ch case   16:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208176Ch case   16:*/		return 0x82081770;
		  /* 82081770h */ case   17:  		/* mtspr LR, R12 */
		/* 82081770h case   17:*/		regs.LR = regs.R12;
		/* 82081770h case   17:*/		return 0x82081774;
		  /* 82081774h */ case   18:  		/* ld R30, <#[R1 - 24]> */
		/* 82081774h case   18:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82081774h case   18:*/		return 0x82081778;
		  /* 82081778h */ case   19:  		/* ld R31, <#[R1 - 16]> */
		/* 82081778h case   19:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82081778h case   19:*/		return 0x8208177C;
		  /* 8208177Ch */ case   20:  		/* bclr 20, CR0_LT */
		/* 8208177Ch case   20:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8208177Ch case   20:*/		return 0x82081780;
	}
	return 0x82081780;
} // Block from 8208172Ch-82081780h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82081780h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081780);
		  /* 82081780h */ case    0:  		/* mfspr R12, LR */
		/* 82081780h case    0:*/		regs.R12 = regs.LR;
		/* 82081780h case    0:*/		return 0x82081784;
		  /* 82081784h */ case    1:  		/* bl 64208 */
		/* 82081784h case    1:*/		regs.LR = 0x82081788; return 0x82091254;
		/* 82081784h case    1:*/		return 0x82081788;
		  /* 82081788h */ case    2:  		/* stfd FR31, <#[R1 - 56]> */
		/* 82081788h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFC8) );
		/* 82081788h case    2:*/		return 0x8208178C;
		  /* 8208178Ch */ case    3:  		/* li R12, -80 */
		/* 8208178Ch case    3:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFFFB0);
		/* 8208178Ch case    3:*/		return 0x82081790;
		  /* 82081790h */ case    4:  		/* stvx VR127, <#[R1 + R12]> */
		/* 82081790h case    4:*/		cpu::mem::stvx( regs, regs.VR127, (uint32)(regs.R1 + regs.R12 + 0x00000000) );
		/* 82081790h case    4:*/		return 0x82081794;
		  /* 82081794h */ case    5:  		/* stwu R1, <#[R1 - 208]> */
		/* 82081794h case    5:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 82081794h case    5:*/		return 0x82081798;
		  /* 82081798h */ case    6:  		/* addi R11, R1, 240 */
		/* 82081798h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xF0);
		/* 82081798h case    6:*/		return 0x8208179C;
		  /* 8208179Ch */ case    7:  		/* mr VR127, VR1 */
		/* 8208179Ch case    7:*/		regs.VR127 = regs.VR1;
		/* 8208179Ch case    7:*/		return 0x820817A0;
		  /* 820817A0h */ case    8:  		/* mr R31, R3 */
		/* 820817A0h case    8:*/		regs.R31 = regs.R3;
		/* 820817A0h case    8:*/		return 0x820817A4;
		  /* 820817A4h */ case    9:  		/* li R10, 0 */
		/* 820817A4h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820817A4h case    9:*/		return 0x820817A8;
		  /* 820817A8h */ case   10:  		/* mr R28, R5 */
		/* 820817A8h case   10:*/		regs.R28 = regs.R5;
		/* 820817A8h case   10:*/		return 0x820817AC;
		  /* 820817ACh */ case   11:  		/* mr R27, R6 */
		/* 820817ACh case   11:*/		regs.R27 = regs.R6;
		/* 820817ACh case   11:*/		return 0x820817B0;
		  /* 820817B0h */ case   12:  		/* li R30, 1 */
		/* 820817B0h case   12:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 820817B0h case   12:*/		return 0x820817B4;
		  /* 820817B4h */ case   13:  		/* stvx VR127, <#[R11]> */
		/* 820817B4h case   13:*/		cpu::mem::stvx( regs, regs.VR127, (uint32)(regs.R11 + 0x00000000) );
		/* 820817B4h case   13:*/		return 0x820817B8;
		  /* 820817B8h */ case   14:  		/* li R29, 32 */
		/* 820817B8h case   14:*/		cpu::op::li<0>(regs,&regs.R29,0x20);
		/* 820817B8h case   14:*/		return 0x820817BC;
		  /* 820817BCh */ case   15:  		/* cmplwi CR6, R4, 0 */
		/* 820817BCh case   15:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 820817BCh case   15:*/		return 0x820817C0;
		  /* 820817C0h */ case   16:  		/* bc 12, CR6_EQ, 176 */
		/* 820817C0h case   16:*/		if ( regs.CR[6].eq ) { return 0x82081870;  }
		/* 820817C0h case   16:*/		return 0x820817C4;
		  /* 820817C4h */ case   17:  		/* rlwinm R9, R4, 29, 29, 29 */
		/* 820817C4h case   17:*/		cpu::op::rlwinm<0,29,29,29>(regs,&regs.R9,regs.R4);
		/* 820817C4h case   17:*/		return 0x820817C8;
		  /* 820817C8h */ case   18:  		/* stw R10, <#[R1 + 80]> */
		/* 820817C8h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 820817C8h case   18:*/		return 0x820817CC;
		  /* 820817CCh */ case   19:  		/* addi R7, R1, 80 */
		/* 820817CCh case   19:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 820817CCh case   19:*/		return 0x820817D0;
		  /* 820817D0h */ case   20:  		/* li R11, 4 */
		/* 820817D0h case   20:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 820817D0h case   20:*/		return 0x820817D4;
		  /* 820817D4h */ case   21:  		/* li R6, -64 */
		/* 820817D4h case   21:*/		cpu::op::li<0>(regs,&regs.R6,0xFFFFFFC0);
		/* 820817D4h case   21:*/		return 0x820817D8;
		  /* 820817D8h */ case   22:  		/* mr R8, R10 */
		/* 820817D8h case   22:*/		regs.R8 = regs.R10;
		/* 820817D8h case   22:*/		return 0x820817DC;
		  /* 820817DCh */ case   23:  		/* stw R6, <#[R1 + 84]> */
		/* 820817DCh case   23:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 820817DCh case   23:*/		return 0x820817E0;
		  /* 820817E0h */ case   24:  		/* lwzx R9, <#[R9 + R7]> */
		/* 820817E0h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 820817E0h case   24:*/		return 0x820817E4;
		  /* 820817E4h */ case   25:  		/* or R6, R9, R4 */
		/* 820817E4h case   25:*/		cpu::op::or<0>(regs,&regs.R6,regs.R9,regs.R4);
		/* 820817E4h case   25:*/		return 0x820817E8;
		  /* 820817E8h */ case   26:  		/* mtspr CTR, R11 */
		/* 820817E8h case   26:*/		regs.CTR = regs.R11;
		/* 820817E8h case   26:*/		return 0x820817EC;
		  /* 820817ECh */ case   27:  		/* addi R11, R1, 80 */
		/* 820817ECh case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 820817ECh case   27:*/		return 0x820817F0;
		  /* 820817F0h */ case   28:  		/* addi R9, R1, 80 */
		/* 820817F0h case   28:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 820817F0h case   28:*/		return 0x820817F4;
		  /* 820817F4h */ case   29:  		/* stvx VR127, <#[R11]> */
		/* 820817F4h case   29:*/		cpu::mem::stvx( regs, regs.VR127, (uint32)(regs.R11 + 0x00000000) );
		/* 820817F4h case   29:*/		return 0x820817F8;
		  /* 820817F8h */ case   30:  		/* lwzx R7, <#[R8 + R9]> */
		/* 820817F8h case   30:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 820817F8h case   30:*/		return 0x820817FC;
		  /* 820817FCh */ case   31:  		/* rlwinm. R11, R7, 9, 24, 31 */
		/* 820817FCh case   31:*/		cpu::op::rlwinm<1,9,24,31>(regs,&regs.R11,regs.R7);
		/* 820817FCh case   31:*/		return 0x82081800;
		  /* 82081800h */ case   32:  		/* bc 4, CR0_GT, 96 */
		/* 82081800h case   32:*/		if ( !regs.CR[0].gt ) { return 0x82081860;  }
		/* 82081800h case   32:*/		return 0x82081804;
		  /* 82081804h */ case   33:  		/* cmpwi CR6, R11, 255 */
		/* 82081804h case   33:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x000000FF);
		/* 82081804h case   33:*/		return 0x82081808;
		  /* 82081808h */ case   34:  		/* bc 4, CR6_LT, 88 */
		/* 82081808h case   34:*/		if ( !regs.CR[6].lt ) { return 0x82081860;  }
		/* 82081808h case   34:*/		return 0x8208180C;
		  /* 8208180Ch */ case   35:  		/* add R11, R11, R6 */
		/* 8208180Ch case   35:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R6);
		/* 8208180Ch case   35:*/		return 0x82081810;
		  /* 82081810h */ case   36:  		/* cmpwi CR6, R11, 1 */
		/* 82081810h case   36:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82081810h case   36:*/		return 0x82081814;
		  /* 82081814h */ case   37:  		/* mr R9, R11 */
		/* 82081814h case   37:*/		regs.R9 = regs.R11;
		/* 82081814h case   37:*/		return 0x82081818;
		  /* 82081818h */ case   38:  		/* bc 12, CR6_GT, 8 */
		/* 82081818h case   38:*/		if ( regs.CR[6].gt ) { return 0x82081820;  }
		/* 82081818h case   38:*/		return 0x8208181C;
		  /* 8208181Ch */ case   39:  		/* mr R9, R30 */
		/* 8208181Ch case   39:*/		regs.R9 = regs.R30;
		/* 8208181Ch case   39:*/		return 0x82081820;
	}
	return 0x82081820;
} // Block from 82081780h-82081820h (40 instructions)

//////////////////////////////////////////////////////
// Block at 82081820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081820);
		  /* 82081820h */ case    0:  		/* cmpwi CR6, R9, 254 */
		/* 82081820h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x000000FE);
		/* 82081820h case    0:*/		return 0x82081824;
		  /* 82081824h */ case    1:  		/* bc 4, CR6_LT, 20 */
		/* 82081824h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82081838;  }
		/* 82081824h case    1:*/		return 0x82081828;
		  /* 82081828h */ case    2:  		/* cmpwi CR6, R11, 1 */
		/* 82081828h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82081828h case    2:*/		return 0x8208182C;
		  /* 8208182Ch */ case    3:  		/* bc 12, CR6_GT, 16 */
		/* 8208182Ch case    3:*/		if ( regs.CR[6].gt ) { return 0x8208183C;  }
		/* 8208182Ch case    3:*/		return 0x82081830;
		  /* 82081830h */ case    4:  		/* mr R11, R30 */
		/* 82081830h case    4:*/		regs.R11 = regs.R30;
		/* 82081830h case    4:*/		return 0x82081834;
		  /* 82081834h */ case    5:  		/* b 8 */
		/* 82081834h case    5:*/		return 0x8208183C;
		/* 82081834h case    5:*/		return 0x82081838;
	}
	return 0x82081838;
} // Block from 82081820h-82081838h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82081838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081838);
		  /* 82081838h */ case    0:  		/* li R11, 254 */
		/* 82081838h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xFE);
		/* 82081838h case    0:*/		return 0x8208183C;
	}
	return 0x8208183C;
} // Block from 82081838h-8208183Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8208183Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208183C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208183C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208183C);
		  /* 8208183Ch */ case    0:  		/* addi R9, R1, 96 */
		/* 8208183Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 8208183Ch case    0:*/		return 0x82081840;
		  /* 82081840h */ case    1:  		/* rlwinm R11, R11, 23, 0, 8 */
		/* 82081840h case    1:*/		cpu::op::rlwinm<0,23,0,8>(regs,&regs.R11,regs.R11);
		/* 82081840h case    1:*/		return 0x82081844;
		  /* 82081844h */ case    2:  		/* rlwinm R7, R7, 0, 9, 0 */
		/* 82081844h case    2:*/		cpu::op::rlwinm<0,0,9,0>(regs,&regs.R7,regs.R7);
		/* 82081844h case    2:*/		return 0x82081848;
		  /* 82081848h */ case    3:  		/* addi R5, R1, 96 */
		/* 82081848h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 82081848h case    3:*/		return 0x8208184C;
		  /* 8208184Ch */ case    4:  		/* addi R4, R1, 96 */
		/* 8208184Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8208184Ch case    4:*/		return 0x82081850;
		  /* 82081850h */ case    5:  		/* or R11, R11, R7 */
		/* 82081850h case    5:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 82081850h case    5:*/		return 0x82081854;
		  /* 82081854h */ case    6:  		/* stvx VR127, <#[R9]> */
		/* 82081854h case    6:*/		cpu::mem::stvx( regs, regs.VR127, (uint32)(regs.R9 + 0x00000000) );
		/* 82081854h case    6:*/		return 0x82081858;
		  /* 82081858h */ case    7:  		/* stwx R11, <#[R8 + R5]> */
		/* 82081858h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + regs.R5 + 0x00000000) );
		/* 82081858h case    7:*/		return 0x8208185C;
		  /* 8208185Ch */ case    8:  		/* lvx VR127, <#[R4]> */
		/* 8208185Ch case    8:*/		cpu::mem::lvx( regs, &regs.VR127, (uint32)(regs.R4 + 0x00000000) );
		/* 8208185Ch case    8:*/		return 0x82081860;
	}
	return 0x82081860;
} // Block from 8208183Ch-82081860h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82081860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081860);
		  /* 82081860h */ case    0:  		/* addi R8, R8, 4 */
		/* 82081860h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 82081860h case    0:*/		return 0x82081864;
		  /* 82081864h */ case    1:  		/* bc 16, CR0_LT, -120 */
		/* 82081864h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820817EC;  }
		/* 82081864h case    1:*/		return 0x82081868;
		  /* 82081868h */ case    2:  		/* addi R11, R1, 240 */
		/* 82081868h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xF0);
		/* 82081868h case    2:*/		return 0x8208186C;
		  /* 8208186Ch */ case    3:  		/* stvx VR127, <#[R11]> */
		/* 8208186Ch case    3:*/		cpu::mem::stvx( regs, regs.VR127, (uint32)(regs.R11 + 0x00000000) );
		/* 8208186Ch case    3:*/		return 0x82081870;
	}
	return 0x82081870;
} // Block from 82081860h-82081870h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82081870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081870);
		  /* 82081870h */ case    0:  		/* cmplwi CR6, R31, 15 */
		/* 82081870h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x0000000F);
		/* 82081870h case    0:*/		return 0x82081874;
		  /* 82081874h */ case    1:  		/* bc 12, CR6_GT, 860 */
		/* 82081874h case    1:*/		if ( regs.CR[6].gt ) { return 0x82081BD0;  }
		/* 82081874h case    1:*/		return 0x82081878;
		  /* 82081878h */ case    2:  		/* lis R12, -32256 */
		/* 82081878h case    2:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8200);
		/* 82081878h case    2:*/		return 0x8208187C;
		  /* 8208187Ch */ case    3:  		/* addi R12, R12, 16944 */
		/* 8208187Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x4230);
		/* 8208187Ch case    3:*/		return 0x82081880;
		  /* 82081880h */ case    4:  		/* lbzx R0, <#[R12 + R31]> */
		/* 82081880h case    4:*/		cpu::mem::load8z( regs, &regs.R0, (uint32)(regs.R12 + regs.R31 + 0x00000000) );
		/* 82081880h case    4:*/		return 0x82081884;
		  /* 82081884h */ case    5:  		/* rlwinm R0, R0, 2, 0, 29 */
		/* 82081884h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R0,regs.R0);
		/* 82081884h case    5:*/		return 0x82081888;
		  /* 82081888h */ case    6:  		/* lis R12, -32248 */
		/* 82081888h case    6:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8208);
		/* 82081888h case    6:*/		return 0x8208188C;
		  /* 8208188Ch */ case    7:  		/* ori R0, R0, 0 */
		/* 8208188Ch case    7:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 8208188Ch case    7:*/		return 0x82081890;
		  /* 82081890h */ case    8:  		/* addi R12, R12, 6304 */
		/* 82081890h case    8:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x18A0);
		/* 82081890h case    8:*/		return 0x82081894;
		  /* 82081894h */ case    9:  		/* add R12, R12, R0 */
		/* 82081894h case    9:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 82081894h case    9:*/		return 0x82081898;
		  /* 82081898h */ case   10:  		/* mtspr CTR, R12 */
		/* 82081898h case   10:*/		regs.CTR = regs.R12;
		/* 82081898h case   10:*/		return 0x8208189C;
		  /* 8208189Ch */ case   11:  		/* bcctr 20, CR0_LT */
		/* 8208189Ch case   11:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 8208189Ch case   11:*/		return 0x820818A0;
		  /* 820818A0h */ case   12:  		/* mr VR1, VR127 */
		/* 820818A0h case   12:*/		regs.VR1 = regs.VR127;
		/* 820818A0h case   12:*/		return 0x820818A4;
		  /* 820818A4h */ case   13:  		/* bl -852 */
		/* 820818A4h case   13:*/		regs.LR = 0x820818A8; return 0x82081550;
		/* 820818A4h case   13:*/		return 0x820818A8;
		  /* 820818A8h */ case   14:  		/* mr VR127, VR1 */
		/* 820818A8h case   14:*/		regs.VR127 = regs.VR1;
		/* 820818A8h case   14:*/		return 0x820818AC;
		  /* 820818ACh */ case   15:  		/* cmplwi CR6, R31, 10 */
		/* 820818ACh case   15:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x0000000A);
		/* 820818ACh case   15:*/		return 0x820818B0;
		  /* 820818B0h */ case   16:  		/* li R11, 2 */
		/* 820818B0h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 820818B0h case   16:*/		return 0x820818B4;
		  /* 820818B4h */ case   17:  		/* bc 12, CR6_EQ, 8 */
		/* 820818B4h case   17:*/		if ( regs.CR[6].eq ) { return 0x820818BC;  }
		/* 820818B4h case   17:*/		return 0x820818B8;
		  /* 820818B8h */ case   18:  		/* mr R11, R31 */
		/* 820818B8h case   18:*/		regs.R11 = regs.R31;
		/* 820818B8h case   18:*/		return 0x820818BC;
	}
	return 0x820818BC;
} // Block from 82081870h-820818BCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 820818BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820818BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820818BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820818BC);
		  /* 820818BCh */ case    0:  		/* lis R10, -32256 */
		/* 820818BCh case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 820818BCh case    0:*/		return 0x820818C0;
		  /* 820818C0h */ case    1:  		/* vspltisw VR62, 0 */
		/* 820818C0h case    1:*/		cpu::op::vspltisw<0,0>(regs,&regs.VR62);
		/* 820818C0h case    1:*/		return 0x820818C4;
		  /* 820818C4h */ case    2:  		/* lis R9, -32256 */
		/* 820818C4h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 820818C4h case    2:*/		return 0x820818C8;
		  /* 820818C8h */ case    3:  		/* addi R10, R10, 17092 */
		/* 820818C8h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x42C4);
		/* 820818C8h case    3:*/		return 0x820818CC;
		  /* 820818CCh */ case    4:  		/* addi R9, R9, 17088 */
		/* 820818CCh case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x42C0);
		/* 820818CCh case    4:*/		return 0x820818D0;
		  /* 820818D0h */ case    5:  		/* lis R8, -32256 */
		/* 820818D0h case    5:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 820818D0h case    5:*/		return 0x820818D4;
		  /* 820818D4h */ case    6:  		/* addi R7, R1, 96 */
		/* 820818D4h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 820818D4h case    6:*/		return 0x820818D8;
		  /* 820818D8h */ case    7:  		/* addi R6, R1, 96 */
		/* 820818D8h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x60);
		/* 820818D8h case    7:*/		return 0x820818DC;
		  /* 820818DCh */ case    8:  		/* lbzx R10, <#[R11 + R10]> */
		/* 820818DCh case    8:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820818DCh case    8:*/		return 0x820818E0;
		  /* 820818E0h */ case    9:  		/* addi R5, R1, 96 */
		/* 820818E0h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 820818E0h case    9:*/		return 0x820818E4;
		  /* 820818E4h */ case   10:  		/* lbzx R11, <#[R11 + R9]> */
		/* 820818E4h case   10:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 820818E4h case   10:*/		return 0x820818E8;
		  /* 820818E8h */ case   11:  		/* li R9, 16 */
		/* 820818E8h case   11:*/		cpu::op::li<0>(regs,&regs.R9,0x10);
		/* 820818E8h case   11:*/		return 0x820818EC;
		  /* 820818ECh */ case   12:  		/* slw R10, R30, R10 */
		/* 820818ECh case   12:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R30,regs.R10);
		/* 820818ECh case   12:*/		return 0x820818F0;
		  /* 820818F0h */ case   13:  		/* lfs FR0, <#[R8 + 1792]> */
		/* 820818F0h case   13:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R8 + 0x00000700) );
		/* 820818F0h case   13:*/		return 0x820818F4;
		  /* 820818F4h */ case   14:  		/* extsw R10, R10 */
		/* 820818F4h case   14:*/		cpu::op::extsw<0>(regs,&regs.R10,regs.R10);
		/* 820818F4h case   14:*/		return 0x820818F8;
		  /* 820818F8h */ case   15:  		/* slw R8, R30, R11 */
		/* 820818F8h case   15:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R30,regs.R11);
		/* 820818F8h case   15:*/		return 0x820818FC;
		  /* 820818FCh */ case   16:  		/* std R10, <#[R1 + 96]> */
		/* 820818FCh case   16:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 820818FCh case   16:*/		return 0x82081900;
		  /* 82081900h */ case   17:  		/* extsw R10, R8 */
		/* 82081900h case   17:*/		cpu::op::extsw<0>(regs,&regs.R10,regs.R8);
		/* 82081900h case   17:*/		return 0x82081904;
		  /* 82081904h */ case   18:  		/* lfd FR12, <#[R1 + 96]> */
		/* 82081904h case   18:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R1 + 0x00000060) );
		/* 82081904h case   18:*/		return 0x82081908;
		  /* 82081908h */ case   19:  		/* fcfid FR12, FR12 */
		/* 82081908h case   19:*/		cpu::op::fcfid<0>(regs,&regs.FR12,regs.FR12);
		/* 82081908h case   19:*/		return 0x8208190C;
		  /* 8208190Ch */ case   20:  		/* std R10, <#[R1 + 80]> */
		/* 8208190Ch case   20:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8208190Ch case   20:*/		return 0x82081910;
		  /* 82081910h */ case   21:  		/* lfd FR13, <#[R1 + 80]> */
		/* 82081910h case   21:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000050) );
		/* 82081910h case   21:*/		return 0x82081914;
		  /* 82081914h */ case   22:  		/* fcfid FR13, FR13 */
		/* 82081914h case   22:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 82081914h case   22:*/		return 0x82081918;
		  /* 82081918h */ case   23:  		/* mulli R8, R11, 3 */
		/* 82081918h case   23:*/		cpu::op::mulli<0>(regs,&regs.R8,regs.R11,0x3);
		/* 82081918h case   23:*/		return 0x8208191C;
		  /* 8208191Ch */ case   24:  		/* frsp FR13, FR13 */
		/* 8208191Ch case   24:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 8208191Ch case   24:*/		return 0x82081920;
		  /* 82081920h */ case   25:  		/* rlwinm R10, R11, 1, 0, 31 */
		/* 82081920h case   25:*/		cpu::op::rlwinm<0,1,0,31>(regs,&regs.R10,regs.R11);
		/* 82081920h case   25:*/		return 0x82081924;
		  /* 82081924h */ case   26:  		/* frsp FR12, FR12 */
		/* 82081924h case   26:*/		cpu::op::frsp<0>(regs,&regs.FR12,regs.FR12);
		/* 82081924h case   26:*/		return 0x82081928;
		  /* 82081928h */ case   27:  		/* fsubs FR13, FR13, FR0 */
		/* 82081928h case   27:*/		cpu::op::fsubs<0>(regs,&regs.FR13,regs.FR13,regs.FR0);
		/* 82081928h case   27:*/		return 0x8208192C;
		  /* 8208192Ch */ case   28:  		/* stfs FR13, <#[R1 + 96]> */
		/* 8208192Ch case   28:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R1 + 0x00000060) );
		/* 8208192Ch case   28:*/		return 0x82081930;
		  /* 82081930h */ case   29:  		/* fsubs FR0, FR12, FR0 */
		/* 82081930h case   29:*/		cpu::op::fsubs<0>(regs,&regs.FR0,regs.FR12,regs.FR0);
		/* 82081930h case   29:*/		return 0x82081934;
		  /* 82081934h */ case   30:  		/* stfs FR13, <#[R1 + 100]> */
		/* 82081934h case   30:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R1 + 0x00000064) );
		/* 82081934h case   30:*/		return 0x82081938;
		  /* 82081938h */ case   31:  		/* stfs FR13, <#[R1 + 104]> */
		/* 82081938h case   31:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R1 + 0x00000068) );
		/* 82081938h case   31:*/		return 0x8208193C;
		  /* 8208193Ch */ case   32:  		/* stfs FR0, <#[R1 + 108]> */
		/* 8208193Ch case   32:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x0000006C) );
		/* 8208193Ch case   32:*/		return 0x82081940;
		  /* 82081940h */ case   33:  		/* lvx VR63, <#[R7]> */
		/* 82081940h case   33:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R7 + 0x00000000) );
		/* 82081940h case   33:*/		return 0x82081944;
		  /* 82081944h */ case   34:  		/* vmulfp128 VR61, VR127, VR63 */
		/* 82081944h case   34:*/		cpu::op::vmulfp128<0>(regs,&regs.VR61,regs.VR127,regs.VR63);
		/* 82081944h case   34:*/		return 0x82081948;
		  /* 82081948h */ case   35:  		/* vmaxfp VR62, VR62, VR61 */
		/* 82081948h case   35:*/		cpu::op::vmaxfp<0>(regs,&regs.VR62,regs.VR62,regs.VR61);
		/* 82081948h case   35:*/		return 0x8208194C;
		  /* 8208194Ch */ case   36:  		/* vminfp VR63, VR63, VR62 */
		/* 8208194Ch case   36:*/		cpu::op::vminfp<0>(regs,&regs.VR63,regs.VR63,regs.VR62);
		/* 8208194Ch case   36:*/		return 0x82081950;
		  /* 82081950h */ case   37:  		/* vrfin VR63, VR63 */
		/* 82081950h case   37:*/		cpu::op::vrfin<0>(regs,&regs.VR63,regs.VR63);
		/* 82081950h case   37:*/		return 0x82081954;
		  /* 82081954h */ case   38:  		/* vcfpsxws VR63, VR63, 0 */
		/* 82081954h case   38:*/		cpu::op::vcfpsxws<0,0>(regs,&regs.VR63,regs.VR63);
		/* 82081954h case   38:*/		return 0x82081958;
		  /* 82081958h */ case   39:  		/* stvlx VR63, <#[R6]> */
		/* 82081958h case   39:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R6 + 0x00000000) );
		/* 82081958h case   39:*/		return 0x8208195C;
		  /* 8208195Ch */ case   40:  		/* stvrx VR63, <#[R5 + R9]> */
		/* 8208195Ch case   40:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R5 + regs.R9 + 0x00000000) );
		/* 8208195Ch case   40:*/		return 0x82081960;
		  /* 82081960h */ case   41:  		/* lwz R5, <#[R1 + 104]> */
		/* 82081960h case   41:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000068) );
		/* 82081960h case   41:*/		return 0x82081964;
		  /* 82081964h */ case   42:  		/* lwz R7, <#[R1 + 100]> */
		/* 82081964h case   42:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000064) );
		/* 82081964h case   42:*/		return 0x82081968;
		  /* 82081968h */ case   43:  		/* lwz R6, <#[R1 + 96]> */
		/* 82081968h case   43:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000060) );
		/* 82081968h case   43:*/		return 0x8208196C;
		  /* 8208196Ch */ case   44:  		/* lwz R9, <#[R1 + 108]> */
		/* 8208196Ch case   44:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x0000006C) );
		/* 8208196Ch case   44:*/		return 0x82081970;
		  /* 82081970h */ case   45:  		/* slw R9, R9, R8 */
		/* 82081970h case   45:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 82081970h case   45:*/		return 0x82081974;
		  /* 82081974h */ case   46:  		/* slw R10, R5, R10 */
		/* 82081974h case   46:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R5,regs.R10);
		/* 82081974h case   46:*/		return 0x82081978;
		  /* 82081978h */ case   47:  		/* or R10, R9, R10 */
		/* 82081978h case   47:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82081978h case   47:*/		return 0x8208197C;
		  /* 8208197Ch */ case   48:  		/* slw R11, R7, R11 */
		/* 8208197Ch case   48:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R7,regs.R11);
		/* 8208197Ch case   48:*/		return 0x82081980;
		  /* 82081980h */ case   49:  		/* or R11, R10, R11 */
		/* 82081980h case   49:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82081980h case   49:*/		return 0x82081984;
		  /* 82081984h */ case   50:  		/* or R10, R11, R6 */
		/* 82081984h case   50:*/		cpu::op::or<0>(regs,&regs.R10,regs.R11,regs.R6);
		/* 82081984h case   50:*/		return 0x82081988;
		  /* 82081988h */ case   51:  		/* mr R11, R10 */
		/* 82081988h case   51:*/		regs.R11 = regs.R10;
		/* 82081988h case   51:*/		return 0x8208198C;
		  /* 8208198Ch */ case   52:  		/* b 584 */
		/* 8208198Ch case   52:*/		return 0x82081BD4;
		/* 8208198Ch case   52:*/		return 0x82081990;
		  /* 82081990h */ case   53:  		/* lis R11, -32256 */
		/* 82081990h case   53:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82081990h case   53:*/		return 0x82081994;
		  /* 82081994h */ case   54:  		/* lis R10, -32256 */
		/* 82081994h case   54:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82081994h case   54:*/		return 0x82081998;
		  /* 82081998h */ case   55:  		/* addi R11, R11, 2988 */
		/* 82081998h case   55:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xBAC);
		/* 82081998h case   55:*/		return 0x8208199C;
		  /* 8208199Ch */ case   56:  		/* addi R10, R10, 8792 */
		/* 8208199Ch case   56:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2258);
		/* 8208199Ch case   56:*/		return 0x820819A0;
		  /* 820819A0h */ case   57:  		/* lis R9, -32256 */
		/* 820819A0h case   57:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 820819A0h case   57:*/		return 0x820819A4;
		  /* 820819A4h */ case   58:  		/* lis R8, -32256 */
		/* 820819A4h case   58:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 820819A4h case   58:*/		return 0x820819A8;
		  /* 820819A8h */ case   59:  		/* addi R9, R9, 1792 */
		/* 820819A8h case   59:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x700);
		/* 820819A8h case   59:*/		return 0x820819AC;
		  /* 820819ACh */ case   60:  		/* lvlx VR63, <#[R11]> */
		/* 820819ACh case   60:*/		cpu::mem::lvlx( regs, &regs.VR63, (uint32)(regs.R11 + 0x00000000) );
		/* 820819ACh case   60:*/		return 0x820819B0;
		  /* 820819B0h */ case   61:  		/* lis R11, -32256 */
		/* 820819B0h case   61:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820819B0h case   61:*/		return 0x820819B4;
		  /* 820819B4h */ case   62:  		/* lvlx VR62, <#[R10]> */
		/* 820819B4h case   62:*/		cpu::mem::lvlx( regs, &regs.VR62, (uint32)(regs.R10 + 0x00000000) );
		/* 820819B4h case   62:*/		return 0x820819B8;
		  /* 820819B8h */ case   63:  		/* addi R10, R8, 17072 */
		/* 820819B8h case   63:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0x42B0);
		/* 820819B8h case   63:*/		return 0x820819BC;
		  /* 820819BCh */ case   64:  		/* vspltw VR63, VR63, 0 */
		/* 820819BCh case   64:*/		cpu::op::vspltw<0,0>(regs,&regs.VR63,regs.VR63);
		/* 820819BCh case   64:*/		return 0x820819C0;
		  /* 820819C0h */ case   65:  		/* addi R11, R11, 17056 */
		/* 820819C0h case   65:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x42A0);
		/* 820819C0h case   65:*/		return 0x820819C4;
		  /* 820819C4h */ case   66:  		/* vspltw VR62, VR62, 0 */
		/* 820819C4h case   66:*/		cpu::op::vspltw<0,0>(regs,&regs.VR62,regs.VR62);
		/* 820819C4h case   66:*/		return 0x820819C8;
		  /* 820819C8h */ case   67:  		/* lis R8, -32256 */
		/* 820819C8h case   67:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 820819C8h case   67:*/		return 0x820819CC;
		  /* 820819CCh */ case   68:  		/* lvlx VR61, <#[R9]> */
		/* 820819CCh case   68:*/		cpu::mem::lvlx( regs, &regs.VR61, (uint32)(regs.R9 + 0x00000000) );
		/* 820819CCh case   68:*/		return 0x820819D0;
		  /* 820819D0h */ case   69:  		/* addi R9, R1, 96 */
		/* 820819D0h case   69:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 820819D0h case   69:*/		return 0x820819D4;
		  /* 820819D4h */ case   70:  		/* addi R8, R8, 17040 */
		/* 820819D4h case   70:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4290);
		/* 820819D4h case   70:*/		return 0x820819D8;
		  /* 820819D8h */ case   71:  		/* vmulfp128 VR60, VR127, VR63 */
		/* 820819D8h case   71:*/		cpu::op::vmulfp128<0>(regs,&regs.VR60,regs.VR127,regs.VR63);
		/* 820819D8h case   71:*/		return 0x820819DC;
		  /* 820819DCh */ case   72:  		/* vspltw VR61, VR61, 0 */
		/* 820819DCh case   72:*/		cpu::op::vspltw<0,0>(regs,&regs.VR61,regs.VR61);
		/* 820819DCh case   72:*/		return 0x820819E0;
		  /* 820819E0h */ case   73:  		/* lvx VR13, <#[R11]> */
		/* 820819E0h case   73:*/		cpu::mem::lvx( regs, &regs.VR13, (uint32)(regs.R11 + 0x00000000) );
		/* 820819E0h case   73:*/		return 0x820819E4;
		  /* 820819E4h */ case   74:  		/* li R11, 16 */
		/* 820819E4h case   74:*/		cpu::op::li<0>(regs,&regs.R11,0x10);
		/* 820819E4h case   74:*/		return 0x820819E8;
		  /* 820819E8h */ case   75:  		/* lvx VR0, <#[R10]> */
		/* 820819E8h case   75:*/		cpu::mem::lvx( regs, &regs.VR0, (uint32)(regs.R10 + 0x00000000) );
		/* 820819E8h case   75:*/		return 0x820819EC;
		  /* 820819ECh */ case   76:  		/* addi R10, R1, 96 */
		/* 820819ECh case   76:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 820819ECh case   76:*/		return 0x820819F0;
		  /* 820819F0h */ case   77:  		/* cmplwi CR6, R31, 5 */
		/* 820819F0h case   77:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000005);
		/* 820819F0h case   77:*/		return 0x820819F4;
		  /* 820819F4h */ case   78:  		/* lvx VR63, <#[R8]> */
		/* 820819F4h case   78:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R8 + 0x00000000) );
		/* 820819F4h case   78:*/		return 0x820819F8;
		  /* 820819F8h */ case   79:  		/* vmaxfp VR62, VR62, VR60 */
		/* 820819F8h case   79:*/		cpu::op::vmaxfp<0>(regs,&regs.VR62,regs.VR62,regs.VR60);
		/* 820819F8h case   79:*/		return 0x820819FC;
		  /* 820819FCh */ case   80:  		/* vminfp VR12, VR61, VR62 */
		/* 820819FCh case   80:*/		cpu::op::vminfp<0>(regs,&regs.VR12,regs.VR61,regs.VR62);
		/* 820819FCh case   80:*/		return 0x82081A00;
		  /* 82081A00h */ case   81:  		/* vmaddfp VR0, VR12, VR13, VR0 */
		/* 82081A00h case   81:*/		cpu::op::vmaddfp<0>(regs,&regs.VR0,regs.VR12,regs.VR13,regs.VR0);
		/* 82081A00h case   81:*/		return 0x82081A04;
		  /* 82081A04h */ case   82:  		/* vrfin VR62, VR0 */
		/* 82081A04h case   82:*/		cpu::op::vrfin<0>(regs,&regs.VR62,regs.VR0);
		/* 82081A04h case   82:*/		return 0x82081A08;
		  /* 82081A08h */ case   83:  		/* vcfpsxws VR62, VR62, 0 */
		/* 82081A08h case   83:*/		cpu::op::vcfpsxws<0,0>(regs,&regs.VR62,regs.VR62);
		/* 82081A08h case   83:*/		return 0x82081A0C;
		  /* 82081A0Ch */ case   84:  		/* vxor VR63, VR62, VR63 */
		/* 82081A0Ch case   84:*/		cpu::op::vxor<0>(regs,&regs.VR63,regs.VR62,regs.VR63);
		/* 82081A0Ch case   84:*/		return 0x82081A10;
		  /* 82081A10h */ case   85:  		/* stvlx VR63, <#[R9]> */
		/* 82081A10h case   85:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R9 + 0x00000000) );
		/* 82081A10h case   85:*/		return 0x82081A14;
		  /* 82081A14h */ case   86:  		/* stvrx VR63, <#[R10 + R11]> */
		/* 82081A14h case   86:*/		cpu::mem::stvrx( regs, regs.VR63, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82081A14h case   86:*/		return 0x82081A18;
		  /* 82081A18h */ case   87:  		/* lwz R11, <#[R1 + 100]> */
		/* 82081A18h case   87:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 82081A18h case   87:*/		return 0x82081A1C;
		  /* 82081A1Ch */ case   88:  		/* rlwinm R11, R11, 16, 0, 15 */
		/* 82081A1Ch case   88:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R11,regs.R11);
		/* 82081A1Ch case   88:*/		return 0x82081A20;
		  /* 82081A20h */ case   89:  		/* bc 4, CR6_EQ, 36 */
		/* 82081A20h case   89:*/		if ( !regs.CR[6].eq ) { return 0x82081A44;  }
		/* 82081A20h case   89:*/		return 0x82081A24;
		  /* 82081A24h */ case   90:  		/* lwz R10, <#[R1 + 108]> */
		/* 82081A24h case   90:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000006C) );
		/* 82081A24h case   90:*/		return 0x82081A28;
		  /* 82081A28h */ case   91:  		/* li R29, 64 */
		/* 82081A28h case   91:*/		cpu::op::li<0>(regs,&regs.R29,0x40);
		/* 82081A28h case   91:*/		return 0x82081A2C;
		  /* 82081A2Ch */ case   92:  		/* lwz R9, <#[R1 + 96]> */
		/* 82081A2Ch case   92:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 82081A2Ch case   92:*/		return 0x82081A30;
		  /* 82081A30h */ case   93:  		/* lwz R8, <#[R1 + 104]> */
		/* 82081A30h case   93:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000068) );
		/* 82081A30h case   93:*/		return 0x82081A34;
		  /* 82081A34h */ case   94:  		/* rlwinm R7, R10, 16, 0, 15 */
		/* 82081A34h case   94:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R7,regs.R10);
		/* 82081A34h case   94:*/		return 0x82081A38;
		  /* 82081A38h */ case   95:  		/* or R10, R11, R9 */
		/* 82081A38h case   95:*/		cpu::op::or<0>(regs,&regs.R10,regs.R11,regs.R9);
		/* 82081A38h case   95:*/		return 0x82081A3C;
		  /* 82081A3Ch */ case   96:  		/* or R11, R7, R8 */
		/* 82081A3Ch case   96:*/		cpu::op::or<0>(regs,&regs.R11,regs.R7,regs.R8);
		/* 82081A3Ch case   96:*/		return 0x82081A40;
		  /* 82081A40h */ case   97:  		/* b 404 */
		/* 82081A40h case   97:*/		return 0x82081BD4;
		/* 82081A40h case   97:*/		return 0x82081A44;
	}
	return 0x82081A44;
} // Block from 820818BCh-82081A44h (98 instructions)

//////////////////////////////////////////////////////
// Block at 82081A44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081A44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081A44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081A44);
		  /* 82081A44h */ case    0:  		/* lwz R10, <#[R1 + 96]> */
		/* 82081A44h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 82081A44h case    0:*/		return 0x82081A48;
		  /* 82081A48h */ case    1:  		/* or R10, R11, R10 */
		/* 82081A48h case    1:*/		cpu::op::or<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 82081A48h case    1:*/		return 0x82081A4C;
		  /* 82081A4Ch */ case    2:  		/* b -196 */
		/* 82081A4Ch case    2:*/		return 0x82081988;
		/* 82081A4Ch case    2:*/		return 0x82081A50;
		  /* 82081A50h */ case    3:  		/* addi R11, R1, 112 */
		/* 82081A50h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 82081A50h case    3:*/		return 0x82081A54;
		  /* 82081A54h */ case    4:  		/* mr R31, R10 */
		/* 82081A54h case    4:*/		regs.R31 = regs.R10;
		/* 82081A54h case    4:*/		return 0x82081A58;
		  /* 82081A58h */ case    5:  		/* stvx VR127, <#[R11]> */
		/* 82081A58h case    5:*/		cpu::mem::stvx( regs, regs.VR127, (uint32)(regs.R11 + 0x00000000) );
		/* 82081A58h case    5:*/		return 0x82081A5C;
		  /* 82081A5Ch */ case    6:  		/* lis R11, -32256 */
		/* 82081A5Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82081A5Ch case    6:*/		return 0x82081A60;
		  /* 82081A60h */ case    7:  		/* lfs FR31, <#[R11 + 1816]> */
		/* 82081A60h case    7:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000718) );
		/* 82081A60h case    7:*/		return 0x82081A64;
		  /* 82081A64h */ case    8:  		/* addi R11, R1, 112 */
		/* 82081A64h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 82081A64h case    8:*/		return 0x82081A68;
		  /* 82081A68h */ case    9:  		/* li R4, -124 */
		/* 82081A68h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0xFFFFFF84);
		/* 82081A68h case    9:*/		return 0x82081A6C;
		  /* 82081A6Ch */ case   10:  		/* lfsx FR1, <#[R31 + R11]> */
		/* 82081A6Ch case   10:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 82081A6Ch case   10:*/		return 0x82081A70;
		  /* 82081A70h */ case   11:  		/* bl 69896 */
		/* 82081A70h case   11:*/		regs.LR = 0x82081A74; return 0x82092B78;
		/* 82081A70h case   11:*/		return 0x82081A74;
		  /* 82081A74h */ case   12:  		/* frsp FR0, FR1 */
		/* 82081A74h case   12:*/		cpu::op::frsp<0>(regs,&regs.FR0,regs.FR1);
		/* 82081A74h case   12:*/		return 0x82081A78;
		  /* 82081A78h */ case   13:  		/* stfs FR0, <#[R1 + 80]> */
		/* 82081A78h case   13:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 82081A78h case   13:*/		return 0x82081A7C;
		  /* 82081A7Ch */ case   14:  		/* lwz R11, <#[R1 + 80]> */
		/* 82081A7Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82081A7Ch case   14:*/		return 0x82081A80;
		  /* 82081A80h */ case   15:  		/* addis R11, R11, 1 */
		/* 82081A80h case   15:*/		cpu::op::addis<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82081A80h case   15:*/		return 0x82081A84;
		  /* 82081A84h */ case   16:  		/* addi R11, R11, -32768 */
		/* 82081A84h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFF8000);
		/* 82081A84h case   16:*/		return 0x82081A88;
		  /* 82081A88h */ case   17:  		/* rlwinm. R10, R11, 0, 1, 5 */
		/* 82081A88h case   17:*/		cpu::op::rlwinm<1,0,1,5>(regs,&regs.R10,regs.R11);
		/* 82081A88h case   17:*/		return 0x82081A8C;
		  /* 82081A8Ch */ case   18:  		/* stw R11, <#[R1 + 80]> */
		/* 82081A8Ch case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82081A8Ch case   18:*/		return 0x82081A90;
		  /* 82081A90h */ case   19:  		/* bc 12, CR0_EQ, 28 */
		/* 82081A90h case   19:*/		if ( regs.CR[0].eq ) { return 0x82081AAC;  }
		/* 82081A90h case   19:*/		return 0x82081A94;
		  /* 82081A94h */ case   20:  		/* lfs FR0, <#[R1 + 80]> */
		/* 82081A94h case   20:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 82081A94h case   20:*/		return 0x82081A98;
		  /* 82081A98h */ case   21:  		/* li R11, 1023 */
		/* 82081A98h case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x3FF);
		/* 82081A98h case   21:*/		return 0x82081A9C;
		  /* 82081A9Ch */ case   22:  		/* fcmpu CR6, FR0, FR31 */
		/* 82081A9Ch case   22:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 82081A9Ch case   22:*/		return 0x82081AA0;
		  /* 82081AA0h */ case   23:  		/* bc 12, CR6_LT, 16 */
		/* 82081AA0h case   23:*/		if ( regs.CR[6].lt ) { return 0x82081AB0;  }
		/* 82081AA0h case   23:*/		return 0x82081AA4;
		  /* 82081AA4h */ case   24:  		/* li R11, 511 */
		/* 82081AA4h case   24:*/		cpu::op::li<0>(regs,&regs.R11,0x1FF);
		/* 82081AA4h case   24:*/		return 0x82081AA8;
		  /* 82081AA8h */ case   25:  		/* b 8 */
		/* 82081AA8h case   25:*/		return 0x82081AB0;
		/* 82081AA8h case   25:*/		return 0x82081AAC;
	}
	return 0x82081AAC;
} // Block from 82081A44h-82081AACh (26 instructions)

//////////////////////////////////////////////////////
// Block at 82081AACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081AAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081AAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081AAC);
		  /* 82081AACh */ case    0:  		/* rlwinm R11, R11, 16, 22, 31 */
		/* 82081AACh case    0:*/		cpu::op::rlwinm<0,16,22,31>(regs,&regs.R11,regs.R11);
		/* 82081AACh case    0:*/		return 0x82081AB0;
	}
	return 0x82081AB0;
} // Block from 82081AACh-82081AB0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82081AB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081AB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081AB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081AB0);
		  /* 82081AB0h */ case    0:  		/* addi R10, R1, 96 */
		/* 82081AB0h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 82081AB0h case    0:*/		return 0x82081AB4;
		  /* 82081AB4h */ case    1:  		/* stwx R11, <#[R31 + R10]> */
		/* 82081AB4h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + regs.R10 + 0x00000000) );
		/* 82081AB4h case    1:*/		return 0x82081AB8;
		  /* 82081AB8h */ case    2:  		/* addi R31, R31, 4 */
		/* 82081AB8h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82081AB8h case    2:*/		return 0x82081ABC;
		  /* 82081ABCh */ case    3:  		/* cmplwi CR6, R31, 12 */
		/* 82081ABCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x0000000C);
		/* 82081ABCh case    3:*/		return 0x82081AC0;
		  /* 82081AC0h */ case    4:  		/* bc 12, CR6_LT, -92 */
		/* 82081AC0h case    4:*/		if ( regs.CR[6].lt ) { return 0x82081A64;  }
		/* 82081AC0h case    4:*/		return 0x82081AC4;
		  /* 82081AC4h */ case    5:  		/* addi R11, R1, 112 */
		/* 82081AC4h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 82081AC4h case    5:*/		return 0x82081AC8;
		  /* 82081AC8h */ case    6:  		/* lis R10, -32256 */
		/* 82081AC8h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82081AC8h case    6:*/		return 0x82081ACC;
		  /* 82081ACCh */ case    7:  		/* stvx VR127, <#[R11]> */
		/* 82081ACCh case    7:*/		cpu::mem::stvx( regs, regs.VR127, (uint32)(regs.R11 + 0x00000000) );
		/* 82081ACCh case    7:*/		return 0x82081AD0;
		  /* 82081AD0h */ case    8:  		/* lfs FR12, <#[R10 + 8532]> */
		/* 82081AD0h case    8:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R10 + 0x00002154) );
		/* 82081AD0h case    8:*/		return 0x82081AD4;
		  /* 82081AD4h */ case    9:  		/* lfs FR0, <#[R1 + 124]> */
		/* 82081AD4h case    9:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R1 + 0x0000007C) );
		/* 82081AD4h case    9:*/		return 0x82081AD8;
		  /* 82081AD8h */ case   10:  		/* fmuls FR0, FR0, FR12 */
		/* 82081AD8h case   10:*/		cpu::op::fmuls<0>(regs,&regs.FR0,regs.FR0,regs.FR12);
		/* 82081AD8h case   10:*/		return 0x82081ADC;
		  /* 82081ADCh */ case   11:  		/* fcmpu CR6, FR0, FR31 */
		/* 82081ADCh case   11:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 82081ADCh case   11:*/		return 0x82081AE0;
		  /* 82081AE0h */ case   12:  		/* bc 4, CR6_GT, 12 */
		/* 82081AE0h case   12:*/		if ( !regs.CR[6].gt ) { return 0x82081AEC;  }
		/* 82081AE0h case   12:*/		return 0x82081AE4;
		  /* 82081AE4h */ case   13:  		/* fmr FR13, FR0 */
		/* 82081AE4h case   13:*/		cpu::op::fmr<0>(regs,&regs.FR13,regs.FR0);
		/* 82081AE4h case   13:*/		return 0x82081AE8;
		  /* 82081AE8h */ case   14:  		/* b 8 */
		/* 82081AE8h case   14:*/		return 0x82081AF0;
		/* 82081AE8h case   14:*/		return 0x82081AEC;
	}
	return 0x82081AEC;
} // Block from 82081AB0h-82081AECh (15 instructions)

//////////////////////////////////////////////////////
// Block at 82081AECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081AEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081AEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081AEC);
		  /* 82081AECh */ case    0:  		/* fmr FR13, FR31 */
		/* 82081AECh case    0:*/		cpu::op::fmr<0>(regs,&regs.FR13,regs.FR31);
		/* 82081AECh case    0:*/		return 0x82081AF0;
	}
	return 0x82081AF0;
} // Block from 82081AECh-82081AF0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82081AF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081AF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081AF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081AF0);
		  /* 82081AF0h */ case    0:  		/* fcmpu CR6, FR13, FR12 */
		/* 82081AF0h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR12);
		/* 82081AF0h case    0:*/		return 0x82081AF4;
		  /* 82081AF4h */ case    1:  		/* bc 4, CR6_LT, 20 */
		/* 82081AF4h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82081B08;  }
		/* 82081AF4h case    1:*/		return 0x82081AF8;
		  /* 82081AF8h */ case    2:  		/* fcmpu CR6, FR0, FR31 */
		/* 82081AF8h case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 82081AF8h case    2:*/		return 0x82081AFC;
		  /* 82081AFCh */ case    3:  		/* bc 12, CR6_GT, 16 */
		/* 82081AFCh case    3:*/		if ( regs.CR[6].gt ) { return 0x82081B0C;  }
		/* 82081AFCh case    3:*/		return 0x82081B00;
		  /* 82081B00h */ case    4:  		/* fmr FR0, FR31 */
		/* 82081B00h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR31);
		/* 82081B00h case    4:*/		return 0x82081B04;
		  /* 82081B04h */ case    5:  		/* b 8 */
		/* 82081B04h case    5:*/		return 0x82081B0C;
		/* 82081B04h case    5:*/		return 0x82081B08;
	}
	return 0x82081B08;
} // Block from 82081AF0h-82081B08h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82081B08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081B08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081B08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081B08);
		  /* 82081B08h */ case    0:  		/* fmr FR0, FR12 */
		/* 82081B08h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR0,regs.FR12);
		/* 82081B08h case    0:*/		return 0x82081B0C;
	}
	return 0x82081B0C;
} // Block from 82081B08h-82081B0Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82081B0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081B0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081B0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081B0C);
		  /* 82081B0Ch */ case    0:  		/* lis R11, -32256 */
		/* 82081B0Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82081B0Ch case    0:*/		return 0x82081B10;
		  /* 82081B10h */ case    1:  		/* lwz R9, <#[R1 + 100]> */
		/* 82081B10h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000064) );
		/* 82081B10h case    1:*/		return 0x82081B14;
		  /* 82081B14h */ case    2:  		/* lwz R8, <#[R1 + 96]> */
		/* 82081B14h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000060) );
		/* 82081B14h case    2:*/		return 0x82081B18;
		  /* 82081B18h */ case    3:  		/* lwz R10, <#[R1 + 104]> */
		/* 82081B18h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000068) );
		/* 82081B18h case    3:*/		return 0x82081B1C;
		  /* 82081B1Ch */ case    4:  		/* lfs FR13, <#[R11 + 1820]> */
		/* 82081B1Ch case    4:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R11 + 0x0000071C) );
		/* 82081B1Ch case    4:*/		return 0x82081B20;
		  /* 82081B20h */ case    5:  		/* fadds FR0, FR0, FR13 */
		/* 82081B20h case    5:*/		cpu::op::fadds<0>(regs,&regs.FR0,regs.FR0,regs.FR13);
		/* 82081B20h case    5:*/		return 0x82081B24;
		  /* 82081B24h */ case    6:  		/* fctidz FR0, FR0 */
		/* 82081B24h case    6:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR0);
		/* 82081B24h case    6:*/		return 0x82081B28;
		  /* 82081B28h */ case    7:  		/* stfd FR0, <#[R1 + 96]> */
		/* 82081B28h case    7:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000060) );
		/* 82081B28h case    7:*/		return 0x82081B2C;
		  /* 82081B2Ch */ case    8:  		/* lwz R11, <#[R1 + 100]> */
		/* 82081B2Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 82081B2Ch case    8:*/		return 0x82081B30;
		  /* 82081B30h */ case    9:  		/* rlwinm R11, R11, 10, 0, 21 */
		/* 82081B30h case    9:*/		cpu::op::rlwinm<0,10,0,21>(regs,&regs.R11,regs.R11);
		/* 82081B30h case    9:*/		return 0x82081B34;
		  /* 82081B34h */ case   10:  		/* or R11, R11, R10 */
		/* 82081B34h case   10:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82081B34h case   10:*/		return 0x82081B38;
		  /* 82081B38h */ case   11:  		/* rlwinm R11, R11, 10, 0, 21 */
		/* 82081B38h case   11:*/		cpu::op::rlwinm<0,10,0,21>(regs,&regs.R11,regs.R11);
		/* 82081B38h case   11:*/		return 0x82081B3C;
		  /* 82081B3Ch */ case   12:  		/* or R11, R11, R9 */
		/* 82081B3Ch case   12:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82081B3Ch case   12:*/		return 0x82081B40;
		  /* 82081B40h */ case   13:  		/* rlwinm R11, R11, 10, 0, 21 */
		/* 82081B40h case   13:*/		cpu::op::rlwinm<0,10,0,21>(regs,&regs.R11,regs.R11);
		/* 82081B40h case   13:*/		return 0x82081B44;
		  /* 82081B44h */ case   14:  		/* or R10, R11, R8 */
		/* 82081B44h case   14:*/		cpu::op::or<0>(regs,&regs.R10,regs.R11,regs.R8);
		/* 82081B44h case   14:*/		return 0x82081B48;
		  /* 82081B48h */ case   15:  		/* b -448 */
		/* 82081B48h case   15:*/		return 0x82081988;
		/* 82081B48h case   15:*/		return 0x82081B4C;
		  /* 82081B4Ch */ case   16:  		/* vspltisw VR63, 0 */
		/* 82081B4Ch case   16:*/		cpu::op::vspltisw<0,0>(regs,&regs.VR63);
		/* 82081B4Ch case   16:*/		return 0x82081B50;
		  /* 82081B50h */ case   17:  		/* addi R11, R1, 80 */
		/* 82081B50h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 82081B50h case   17:*/		return 0x82081B54;
		  /* 82081B54h */ case   18:  		/* vpkd3d128 VR63, VR127, 3, 1, 3 */
		/* 82081B54h case   18:*/		cpu::op::vpkd3d128<0,3,1,3>(regs,&regs.VR63,regs.VR127);
		/* 82081B54h case   18:*/		return 0x82081B58;
		  /* 82081B58h */ case   19:  		/* vspltw VR63, VR63, 0 */
		/* 82081B58h case   19:*/		cpu::op::vspltw<0,0>(regs,&regs.VR63,regs.VR63);
		/* 82081B58h case   19:*/		return 0x82081B5C;
		  /* 82081B5Ch */ case   20:  		/* stvewx VR63, <#[R11]> */
		/* 82081B5Ch case   20:*/		cpu::mem::stvewx( regs, regs.VR63, (uint32)(regs.R11 + 0x00000000) );
		/* 82081B5Ch case   20:*/		return 0x82081B60;
	}
	return 0x82081B60;
} // Block from 82081B0Ch-82081B60h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82081B60h
// Function '?PixCaptureVideoFrame@D3D@@YAXPAVCDevice@1@KKKW4_D3DFORMAT@@KKPBU_D3DPRIVATE_SCALER_PARAMETERS@@PBU_D3DGAMMARAMP@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081B60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081B60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081B60);
		  /* 82081B60h */ case    0:  		/* lhz R10, <#[R1 + 80]> */
		/* 82081B60h case    0:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82081B60h case    0:*/		return 0x82081B64;
		  /* 82081B64h */ case    1:  		/* lhz R11, <#[R1 + 82]> */
		/* 82081B64h case    1:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000052) );
		/* 82081B64h case    1:*/		return 0x82081B68;
		  /* 82081B68h */ case    2:  		/* rlwimi R10, R11, 16, 0, 15 */
		/* 82081B68h case    2:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R10,regs.R11);
		/* 82081B68h case    2:*/		return 0x82081B6C;
		  /* 82081B6Ch */ case    3:  		/* b -484 */
		/* 82081B6Ch case    3:*/		return 0x82081988;
		/* 82081B6Ch case    3:*/		return 0x82081B70;
		  /* 82081B70h */ case    4:  		/* vspltisw VR63, 0 */
		/* 82081B70h case    4:*/		cpu::op::vspltisw<0,0>(regs,&regs.VR63);
		/* 82081B70h case    4:*/		return 0x82081B74;
		  /* 82081B74h */ case    5:  		/* addi R11, R1, 80 */
		/* 82081B74h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 82081B74h case    5:*/		return 0x82081B78;
		  /* 82081B78h */ case    6:  		/* li R10, 4 */
		/* 82081B78h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 82081B78h case    6:*/		return 0x82081B7C;
		  /* 82081B7Ch */ case    7:  		/* addi R9, R1, 80 */
		/* 82081B7Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 82081B7Ch case    7:*/		return 0x82081B80;
		  /* 82081B80h */ case    8:  		/* li R29, 64 */
		/* 82081B80h case    8:*/		cpu::op::li<0>(regs,&regs.R29,0x40);
		/* 82081B80h case    8:*/		return 0x82081B84;
		  /* 82081B84h */ case    9:  		/* vpkd3d128 VR63, VR127, 5, 2, 2 */
		/* 82081B84h case    9:*/		cpu::op::vpkd3d128<0,5,2,2>(regs,&regs.VR63,regs.VR127);
		/* 82081B84h case    9:*/		return 0x82081B88;
		  /* 82081B88h */ case   10:  		/* vspltw VR62, VR63, 0 */
		/* 82081B88h case   10:*/		cpu::op::vspltw<0,0>(regs,&regs.VR62,regs.VR63);
		/* 82081B88h case   10:*/		return 0x82081B8C;
		  /* 82081B8Ch */ case   11:  		/* vspltw VR63, VR63, 1 */
		/* 82081B8Ch case   11:*/		cpu::op::vspltw<0,1>(regs,&regs.VR63,regs.VR63);
		/* 82081B8Ch case   11:*/		return 0x82081B90;
		  /* 82081B90h */ case   12:  		/* stvewx VR62, <#[R11]> */
		/* 82081B90h case   12:*/		cpu::mem::stvewx( regs, regs.VR62, (uint32)(regs.R11 + 0x00000000) );
		/* 82081B90h case   12:*/		return 0x82081B94;
		  /* 82081B94h */ case   13:  		/* stvewx VR63, <#[R9 + R10]> */
		/* 82081B94h case   13:*/		cpu::mem::stvewx( regs, regs.VR63, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82081B94h case   13:*/		return 0x82081B98;
		  /* 82081B98h */ case   14:  		/* lhz R9, <#[R1 + 82]> */
		/* 82081B98h case   14:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000052) );
		/* 82081B98h case   14:*/		return 0x82081B9C;
		  /* 82081B9Ch */ case   15:  		/* lhz R10, <#[R1 + 80]> */
		/* 82081B9Ch case   15:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82081B9Ch case   15:*/		return 0x82081BA0;
		  /* 82081BA0h */ case   16:  		/* rlwimi R10, R9, 16, 0, 15 */
		/* 82081BA0h case   16:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R10,regs.R9);
		/* 82081BA0h case   16:*/		return 0x82081BA4;
		  /* 82081BA4h */ case   17:  		/* lhz R11, <#[R1 + 84]> */
		/* 82081BA4h case   17:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82081BA4h case   17:*/		return 0x82081BA8;
		  /* 82081BA8h */ case   18:  		/* lhz R9, <#[R1 + 86]> */
		/* 82081BA8h case   18:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000056) );
		/* 82081BA8h case   18:*/		return 0x82081BAC;
		  /* 82081BACh */ case   19:  		/* rlwimi R11, R9, 16, 0, 15 */
		/* 82081BACh case   19:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R11,regs.R9);
		/* 82081BACh case   19:*/		return 0x82081BB0;
		  /* 82081BB0h */ case   20:  		/* b 36 */
		/* 82081BB0h case   20:*/		return 0x82081BD4;
		/* 82081BB0h case   20:*/		return 0x82081BB4;
		  /* 82081BB4h */ case   21:  		/* lwz R11, <#[R1 + 240]> */
		/* 82081BB4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000F0) );
		/* 82081BB4h case   21:*/		return 0x82081BB8;
		  /* 82081BB8h */ case   22:  		/* mr R10, R11 */
		/* 82081BB8h case   22:*/		regs.R10 = regs.R11;
		/* 82081BB8h case   22:*/		return 0x82081BBC;
		  /* 82081BBCh */ case   23:  		/* b 24 */
		/* 82081BBCh case   23:*/		return 0x82081BD4;
		/* 82081BBCh case   23:*/		return 0x82081BC0;
		  /* 82081BC0h */ case   24:  		/* lwz R10, <#[R1 + 240]> */
		/* 82081BC0h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000F0) );
		/* 82081BC0h case   24:*/		return 0x82081BC4;
		  /* 82081BC4h */ case   25:  		/* li R29, 64 */
		/* 82081BC4h case   25:*/		cpu::op::li<0>(regs,&regs.R29,0x40);
		/* 82081BC4h case   25:*/		return 0x82081BC8;
		  /* 82081BC8h */ case   26:  		/* lwz R11, <#[R1 + 244]> */
		/* 82081BC8h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000F4) );
		/* 82081BC8h case   26:*/		return 0x82081BCC;
		  /* 82081BCCh */ case   27:  		/* b 8 */
		/* 82081BCCh case   27:*/		return 0x82081BD4;
		/* 82081BCCh case   27:*/		return 0x82081BD0;
	}
	return 0x82081BD0;
} // Block from 82081B60h-82081BD0h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82081BD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081BD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081BD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081BD0);
		  /* 82081BD0h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 82081BD0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82081BD0h case    0:*/		return 0x82081BD4;
	}
	return 0x82081BD4;
} // Block from 82081BD0h-82081BD4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82081BD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081BD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081BD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081BD4);
		  /* 82081BD4h */ case    0:  		/* stw R11, <#[R28]> */
		/* 82081BD4h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82081BD4h case    0:*/		return 0x82081BD8;
		  /* 82081BD8h */ case    1:  		/* mr R3, R29 */
		/* 82081BD8h case    1:*/		regs.R3 = regs.R29;
		/* 82081BD8h case    1:*/		return 0x82081BDC;
		  /* 82081BDCh */ case    2:  		/* stw R10, <#[R27]> */
		/* 82081BDCh case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 82081BDCh case    2:*/		return 0x82081BE0;
		  /* 82081BE0h */ case    3:  		/* addi R1, R1, 208 */
		/* 82081BE0h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 82081BE0h case    3:*/		return 0x82081BE4;
		  /* 82081BE4h */ case    4:  		/* li R0, -80 */
		/* 82081BE4h case    4:*/		cpu::op::li<0>(regs,&regs.R0,0xFFFFFFB0);
		/* 82081BE4h case    4:*/		return 0x82081BE8;
		  /* 82081BE8h */ case    5:  		/* lvx VR127, <#[R1 + R0]> */
		/* 82081BE8h case    5:*/		cpu::mem::lvx( regs, &regs.VR127, (uint32)(regs.R1 + regs.R0 + 0x00000000) );
		/* 82081BE8h case    5:*/		return 0x82081BEC;
		  /* 82081BECh */ case    6:  		/* lfd FR31, <#[R1 - 56]> */
		/* 82081BECh case    6:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFC8) );
		/* 82081BECh case    6:*/		return 0x82081BF0;
		  /* 82081BF0h */ case    7:  		/* b 63156 */
		/* 82081BF0h case    7:*/		return 0x820912A4;
		/* 82081BF0h case    7:*/		return 0x82081BF4;
		  /* 82081BF4h */ case    8:  		/* nop */
		/* 82081BF4h case    8:*/		cpu::op::nop();
		/* 82081BF4h case    8:*/		return 0x82081BF8;
	}
	return 0x82081BF8;
} // Block from 82081BD4h-82081BF8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82081BF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081BF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081BF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081BF8);
		  /* 82081BF8h */ case    0:  		/* mfspr R12, LR */
		/* 82081BF8h case    0:*/		regs.R12 = regs.LR;
		/* 82081BF8h case    0:*/		return 0x82081BFC;
		  /* 82081BFCh */ case    1:  		/* bl 63072 */
		/* 82081BFCh case    1:*/		regs.LR = 0x82081C00; return 0x8209125C;
		/* 82081BFCh case    1:*/		return 0x82081C00;
		  /* 82081C00h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82081C00h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82081C00h case    2:*/		return 0x82081C04;
		  /* 82081C04h */ case    3:  		/* mr R30, R3 */
		/* 82081C04h case    3:*/		regs.R30 = regs.R3;
		/* 82081C04h case    3:*/		return 0x82081C08;
		  /* 82081C08h */ case    4:  		/* cmplwi CR6, R5, 0 */
		/* 82081C08h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82081C08h case    4:*/		return 0x82081C0C;
		  /* 82081C0Ch */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 82081C0Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x82081C18;  }
		/* 82081C0Ch case    5:*/		return 0x82081C10;
		  /* 82081C10h */ case    6:  		/* addi R11, R3, 10372 */
		/* 82081C10h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x2884);
		/* 82081C10h case    6:*/		return 0x82081C14;
		  /* 82081C14h */ case    7:  		/* b 16 */
		/* 82081C14h case    7:*/		return 0x82081C24;
		/* 82081C14h case    7:*/		return 0x82081C18;
	}
	return 0x82081C18;
} // Block from 82081BF8h-82081C18h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82081C18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081C18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081C18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081C18);
		  /* 82081C18h */ case    0:  		/* addi R11, R5, 2594 */
		/* 82081C18h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R5,0xA22);
		/* 82081C18h case    0:*/		return 0x82081C1C;
		  /* 82081C1Ch */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82081C1Ch case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82081C1Ch case    1:*/		return 0x82081C20;
		  /* 82081C20h */ case    2:  		/* add R11, R11, R30 */
		/* 82081C20h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 82081C20h case    2:*/		return 0x82081C24;
	}
	return 0x82081C24;
} // Block from 82081C18h-82081C24h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82081C24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081C24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081C24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081C24);
		  /* 82081C24h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 82081C24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82081C24h case    0:*/		return 0x82081C28;
		  /* 82081C28h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 82081C28h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82081C28h case    1:*/		return 0x82081C2C;
		  /* 82081C2Ch */ case    2:  		/* rlwinm R3, R11, 16, 28, 31 */
		/* 82081C2Ch case    2:*/		cpu::op::rlwinm<0,16,28,31>(regs,&regs.R3,regs.R11);
		/* 82081C2Ch case    2:*/		return 0x82081C30;
		  /* 82081C30h */ case    3:  		/* bc 4, CR6_EQ, 24 */
		/* 82081C30h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82081C48;  }
		/* 82081C30h case    3:*/		return 0x82081C34;
		  /* 82081C34h */ case    4:  		/* addi R6, R1, 84 */
		/* 82081C34h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x54);
		/* 82081C34h case    4:*/		return 0x82081C38;
		  /* 82081C38h */ case    5:  		/* addi R5, R1, 80 */
		/* 82081C38h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82081C38h case    5:*/		return 0x82081C3C;
		  /* 82081C3Ch */ case    6:  		/* rlwinm R4, R11, 12, 26, 31 */
		/* 82081C3Ch case    6:*/		cpu::op::rlwinm<0,12,26,31>(regs,&regs.R4,regs.R11);
		/* 82081C3Ch case    6:*/		return 0x82081C40;
		  /* 82081C40h */ case    7:  		/* bl -1216 */
		/* 82081C40h case    7:*/		regs.LR = 0x82081C44; return 0x82081780;
		/* 82081C40h case    7:*/		return 0x82081C44;
		  /* 82081C44h */ case    8:  		/* b 104 */
		/* 82081C44h case    8:*/		return 0x82081CAC;
		/* 82081C44h case    8:*/		return 0x82081C48;
	}
	return 0x82081C48;
} // Block from 82081C24h-82081C48h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82081C48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081C48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081C48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081C48);
		  /* 82081C48h */ case    0:  		/* lis R10, -32256 */
		/* 82081C48h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82081C48h case    0:*/		return 0x82081C4C;
		  /* 82081C4Ch */ case    1:  		/* lwz R9, <#[R4]> */
		/* 82081C4Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000000) );
		/* 82081C4Ch case    1:*/		return 0x82081C50;
		  /* 82081C50h */ case    2:  		/* lis R11, -32256 */
		/* 82081C50h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82081C50h case    2:*/		return 0x82081C54;
		  /* 82081C54h */ case    3:  		/* addi R8, R10, 16960 */
		/* 82081C54h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4240);
		/* 82081C54h case    3:*/		return 0x82081C58;
		  /* 82081C58h */ case    4:  		/* addi R10, R11, 2992 */
		/* 82081C58h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xBB0);
		/* 82081C58h case    4:*/		return 0x82081C5C;
		  /* 82081C5Ch */ case    5:  		/* rlwinm R11, R9, 0, 26, 31 */
		/* 82081C5Ch case    5:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R11,regs.R9);
		/* 82081C5Ch case    5:*/		return 0x82081C60;
		  /* 82081C60h */ case    6:  		/* addi R9, R10, 1 */
		/* 82081C60h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x1);
		/* 82081C60h case    6:*/		return 0x82081C64;
		  /* 82081C64h */ case    7:  		/* cmplwi CR6, R11, 54 */
		/* 82081C64h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000036);
		/* 82081C64h case    7:*/		return 0x82081C68;
		  /* 82081C68h */ case    8:  		/* lbzx R8, <#[R3 + R8]> */
		/* 82081C68h case    8:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R3 + regs.R8 + 0x00000000) );
		/* 82081C68h case    8:*/		return 0x82081C6C;
		  /* 82081C6Ch */ case    9:  		/* rlwinm R8, R8, 1, 0, 31 */
		/* 82081C6Ch case    9:*/		cpu::op::rlwinm<0,1,0,31>(regs,&regs.R8,regs.R8);
		/* 82081C6Ch case    9:*/		return 0x82081C70;
		  /* 82081C70h */ case   10:  		/* lbzx R31, <#[R8 + R9]> */
		/* 82081C70h case   10:*/		cpu::mem::load8z( regs, &regs.R31, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 82081C70h case   10:*/		return 0x82081C74;
		  /* 82081C74h */ case   11:  		/* bc 4, CR6_EQ, 8 */
		/* 82081C74h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82081C7C;  }
		/* 82081C74h case   11:*/		return 0x82081C78;
		  /* 82081C78h */ case   12:  		/* li R11, 7 */
		/* 82081C78h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x7);
		/* 82081C78h case   12:*/		return 0x82081C7C;
	}
	return 0x82081C7C;
} // Block from 82081C48h-82081C7Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 82081C7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081C7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081C7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081C7C);
		  /* 82081C7Ch */ case    0:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 82081C7Ch case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 82081C7Ch case    0:*/		return 0x82081C80;
		  /* 82081C80h */ case    1:  		/* lwz R4, <#[R4 + 4]> */
		/* 82081C80h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000004) );
		/* 82081C80h case    1:*/		return 0x82081C84;
		  /* 82081C84h */ case    2:  		/* addi R6, R1, 84 */
		/* 82081C84h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x54);
		/* 82081C84h case    2:*/		return 0x82081C88;
		  /* 82081C88h */ case    3:  		/* addi R5, R1, 80 */
		/* 82081C88h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82081C88h case    3:*/		return 0x82081C8C;
		  /* 82081C8Ch */ case    4:  		/* lhzx R11, <#[R11 + R10]> */
		/* 82081C8Ch case    4:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82081C8Ch case    4:*/		return 0x82081C90;
	}
	return 0x82081C90;
} // Block from 82081C7Ch-82081C90h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82081C90h
// Function '?GetDrPixCounters@D3D@@YAXKP6AXKPBXKK@ZK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081C90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081C90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081C90);
		  /* 82081C90h */ case    0:  		/* rlwinm R3, R11, 24, 28, 31 */
		/* 82081C90h case    0:*/		cpu::op::rlwinm<0,24,28,31>(regs,&regs.R3,regs.R11);
		/* 82081C90h case    0:*/		return 0x82081C94;
		  /* 82081C94h */ case    1:  		/* rlwinm R29, R11, 0, 24, 31 */
		/* 82081C94h case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R29,regs.R11);
		/* 82081C94h case    1:*/		return 0x82081C98;
		  /* 82081C98h */ case    2:  		/* bl -1304 */
		/* 82081C98h case    2:*/		regs.LR = 0x82081C9C; return 0x82081780;
		/* 82081C98h case    2:*/		return 0x82081C9C;
		  /* 82081C9Ch */ case    3:  		/* cmplw CR6, R31, R29 */
		/* 82081C9Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R29);
		/* 82081C9Ch case    3:*/		return 0x82081CA0;
	}
	return 0x82081CA0;
} // Block from 82081C90h-82081CA0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82081CA0h
// Function '?GetGPUPerfCounters@D3D@@YAHPAVCDevice@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081CA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081CA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081CA0);
		  /* 82081CA0h */ case    0:  		/* bc 4, CR6_GT, 12 */
		/* 82081CA0h case    0:*/		if ( !regs.CR[6].gt ) { return 0x82081CAC;  }
		/* 82081CA0h case    0:*/		return 0x82081CA4;
		  /* 82081CA4h */ case    1:  		/* lwz R11, <#[R1 + 80]> */
		/* 82081CA4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82081CA4h case    1:*/		return 0x82081CA8;
		  /* 82081CA8h */ case    2:  		/* stw R11, <#[R1 + 84]> */
		/* 82081CA8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82081CA8h case    2:*/		return 0x82081CAC;
	}
	return 0x82081CAC;
} // Block from 82081CA0h-82081CACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82081CACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081CAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081CAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081CAC);
		  /* 82081CACh */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 82081CACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82081CACh case    0:*/		return 0x82081CB0;
		  /* 82081CB0h */ case    1:  		/* lwz R10, <#[R1 + 84]> */
		/* 82081CB0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 82081CB0h case    1:*/		return 0x82081CB4;
		  /* 82081CB4h */ case    2:  		/* stw R11, <#[R30 + 10800]> */
		/* 82081CB4h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00002A30) );
		/* 82081CB4h case    2:*/		return 0x82081CB8;
		  /* 82081CB8h */ case    3:  		/* stw R10, <#[R30 + 10804]> */
		/* 82081CB8h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00002A34) );
		/* 82081CB8h case    3:*/		return 0x82081CBC;
		  /* 82081CBCh */ case    4:  		/* ld R11, <#[R30 + 32]> */
		/* 82081CBCh case    4:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 82081CBCh case    4:*/		return 0x82081CC0;
		  /* 82081CC0h */ case    5:  		/* ori R11, R11, 192 */
		/* 82081CC0h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xC0);
		/* 82081CC0h case    5:*/		return 0x82081CC4;
		  /* 82081CC4h */ case    6:  		/* std R11, <#[R30 + 32]> */
		/* 82081CC4h case    6:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 82081CC4h case    6:*/		return 0x82081CC8;
		  /* 82081CC8h */ case    7:  		/* addi R1, R1, 128 */
		/* 82081CC8h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82081CC8h case    7:*/		return 0x82081CCC;
		  /* 82081CCCh */ case    8:  		/* b 62944 */
		/* 82081CCCh case    8:*/		return 0x820912AC;
		/* 82081CCCh case    8:*/		return 0x82081CD0;
	}
	return 0x82081CD0;
} // Block from 82081CACh-82081CD0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82081CD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081CD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081CD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081CD0);
		  /* 82081CD0h */ case    0:  		/* mfspr R12, LR */
		/* 82081CD0h case    0:*/		regs.R12 = regs.LR;
		/* 82081CD0h case    0:*/		return 0x82081CD4;
		  /* 82081CD4h */ case    1:  		/* bl 62844 */
		/* 82081CD4h case    1:*/		regs.LR = 0x82081CD8; return 0x82091250;
		/* 82081CD4h case    1:*/		return 0x82081CD8;
		  /* 82081CD8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82081CD8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82081CD8h case    2:*/		return 0x82081CDC;
		  /* 82081CDCh */ case    3:  		/* ld R4, <#[R3]> */
		/* 82081CDCh case    3:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R3 + 0x00000000) );
		/* 82081CDCh case    3:*/		return 0x82081CE0;
		  /* 82081CE0h */ case    4:  		/* mr R31, R3 */
		/* 82081CE0h case    4:*/		regs.R31 = regs.R3;
		/* 82081CE0h case    4:*/		return 0x82081CE4;
		  /* 82081CE4h */ case    5:  		/* ld R27, <#[R3 + 32]> */
		/* 82081CE4h case    5:*/		cpu::mem::load64( regs, &regs.R27, (uint32)(regs.R3 + 0x00000020) );
		/* 82081CE4h case    5:*/		return 0x82081CE8;
		  /* 82081CE8h */ case    6:  		/* li R26, 0 */
		/* 82081CE8h case    6:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 82081CE8h case    6:*/		return 0x82081CEC;
		  /* 82081CECh */ case    7:  		/* ld R28, <#[R3 + 24]> */
		/* 82081CECh case    7:*/		cpu::mem::load64( regs, &regs.R28, (uint32)(regs.R3 + 0x00000018) );
		/* 82081CECh case    7:*/		return 0x82081CF0;
		  /* 82081CF0h */ case    8:  		/* cmpldi CR6, R4, 0 */
		/* 82081CF0h case    8:*/		cpu::op::cmpldi<6>(regs,regs.R4,0x00000000);
		/* 82081CF0h case    8:*/		return 0x82081CF4;
		  /* 82081CF4h */ case    9:  		/* ld R30, <#[R3 + 16]> */
		/* 82081CF4h case    9:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R3 + 0x00000010) );
		/* 82081CF4h case    9:*/		return 0x82081CF8;
		  /* 82081CF8h */ case   10:  		/* ld R29, <#[R3 + 8]> */
		/* 82081CF8h case   10:*/		cpu::mem::load64( regs, &regs.R29, (uint32)(regs.R3 + 0x00000008) );
		/* 82081CF8h case   10:*/		return 0x82081CFC;
		  /* 82081CFCh */ case   11:  		/* bc 12, CR6_EQ, 20 */
		/* 82081CFCh case   11:*/		if ( regs.CR[6].eq ) { return 0x82081D10;  }
		/* 82081CFCh case   11:*/		return 0x82081D00;
		  /* 82081D00h */ case   12:  		/* addi R6, R3, 1920 */
		/* 82081D00h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R3,0x780);
		/* 82081D00h case   12:*/		return 0x82081D04;
		  /* 82081D04h */ case   13:  		/* li R5, 16384 */
		/* 82081D04h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x4000);
		/* 82081D04h case   13:*/		return 0x82081D08;
		  /* 82081D08h */ case   14:  		/* bl 7592 */
		/* 82081D08h case   14:*/		regs.LR = 0x82081D0C; return 0x82083AB0;
		/* 82081D08h case   14:*/		return 0x82081D0C;
		  /* 82081D0Ch */ case   15:  		/* std R26, <#[R31]> */
		/* 82081D0Ch case   15:*/		cpu::mem::store64( regs, regs.R26, (uint32)(regs.R31 + 0x00000000) );
		/* 82081D0Ch case   15:*/		return 0x82081D10;
	}
	return 0x82081D10;
} // Block from 82081CD0h-82081D10h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82081D10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081D10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081D10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081D10);
		  /* 82081D10h */ case    0:  		/* cmpldi CR6, R29, 0 */
		/* 82081D10h case    0:*/		cpu::op::cmpldi<6>(regs,regs.R29,0x00000000);
		/* 82081D10h case    0:*/		return 0x82081D14;
		  /* 82081D14h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 82081D14h case    1:*/		if ( regs.CR[6].eq ) { return 0x82081D30;  }
		/* 82081D14h case    1:*/		return 0x82081D18;
		  /* 82081D18h */ case    2:  		/* addi R6, R31, 6016 */
		/* 82081D18h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x1780);
		/* 82081D18h case    2:*/		return 0x82081D1C;
		  /* 82081D1Ch */ case    3:  		/* li R5, 17408 */
		/* 82081D1Ch case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x4400);
		/* 82081D1Ch case    3:*/		return 0x82081D20;
		  /* 82081D20h */ case    4:  		/* mr R4, R29 */
		/* 82081D20h case    4:*/		regs.R4 = regs.R29;
		/* 82081D20h case    4:*/		return 0x82081D24;
		  /* 82081D24h */ case    5:  		/* mr R3, R31 */
		/* 82081D24h case    5:*/		regs.R3 = regs.R31;
		/* 82081D24h case    5:*/		return 0x82081D28;
		  /* 82081D28h */ case    6:  		/* bl 7560 */
		/* 82081D28h case    6:*/		regs.LR = 0x82081D2C; return 0x82083AB0;
		/* 82081D28h case    6:*/		return 0x82081D2C;
		  /* 82081D2Ch */ case    7:  		/* std R26, <#[R31 + 8]> */
		/* 82081D2Ch case    7:*/		cpu::mem::store64( regs, regs.R26, (uint32)(regs.R31 + 0x00000008) );
		/* 82081D2Ch case    7:*/		return 0x82081D30;
	}
	return 0x82081D30;
} // Block from 82081D10h-82081D30h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82081D30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081D30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081D30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081D30);
		  /* 82081D30h */ case    0:  		/* cmpldi CR6, R30, 0 */
		/* 82081D30h case    0:*/		cpu::op::cmpldi<6>(regs,regs.R30,0x00000000);
		/* 82081D30h case    0:*/		return 0x82081D34;
		  /* 82081D34h */ case    1:  		/* bc 12, CR6_EQ, 220 */
		/* 82081D34h case    1:*/		if ( regs.CR[6].eq ) { return 0x82081E10;  }
		/* 82081D34h case    1:*/		return 0x82081D38;
		  /* 82081D38h */ case    2:  		/* rlwinm R11, R30, 0, 11, 14 */
		/* 82081D38h case    2:*/		cpu::op::rlwinm<0,0,11,14>(regs,&regs.R11,regs.R30);
		/* 82081D38h case    2:*/		return 0x82081D3C;
		  /* 82081D3Ch */ case    3:  		/* cmpldi CR6, R11, 0 */
		/* 82081D3Ch case    3:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82081D3Ch case    3:*/		return 0x82081D40;
		  /* 82081D40h */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 82081D40h case    4:*/		if ( regs.CR[6].eq ) { return 0x82081D54;  }
		/* 82081D40h case    4:*/		return 0x82081D44;
		  /* 82081D44h */ case    5:  		/* mr R4, R30 */
		/* 82081D44h case    5:*/		regs.R4 = regs.R30;
		/* 82081D44h case    5:*/		return 0x82081D48;
		  /* 82081D48h */ case    6:  		/* mr R3, R31 */
		/* 82081D48h case    6:*/		regs.R3 = regs.R31;
		/* 82081D48h case    6:*/		return 0x82081D4C;
		  /* 82081D4Ch */ case    7:  		/* bl 11004 */
		/* 82081D4Ch case    7:*/		regs.LR = 0x82081D50; return 0x82084848;
		/* 82081D4Ch case    7:*/		return 0x82081D50;
		  /* 82081D50h */ case    8:  		/* mr R30, R3 */
		/* 82081D50h case    8:*/		regs.R30 = regs.R3;
		/* 82081D50h case    8:*/		return 0x82081D54;
	}
	return 0x82081D54;
} // Block from 82081D30h-82081D54h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82081D54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081D54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081D54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081D54);
		  /* 82081D54h */ case    0:  		/* ld R11, <#[R31 + 40]> */
		/* 82081D54h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82081D54h case    0:*/		return 0x82081D58;
		  /* 82081D58h */ case    1:  		/* and R11, R11, R30 */
		/* 82081D58h case    1:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 82081D58h case    1:*/		return 0x82081D5C;
		  /* 82081D5Ch */ case    2:  		/* cmpldi CR6, R11, 0 */
		/* 82081D5Ch case    2:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82081D5Ch case    2:*/		return 0x82081D60;
		  /* 82081D60h */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 82081D60h case    3:*/		if ( regs.CR[6].eq ) { return 0x82081D78;  }
		/* 82081D60h case    3:*/		return 0x82081D64;
		  /* 82081D64h */ case    4:  		/* mr R4, R30 */
		/* 82081D64h case    4:*/		regs.R4 = regs.R30;
		/* 82081D64h case    4:*/		return 0x82081D68;
		  /* 82081D68h */ case    5:  		/* lwz R5, <#[R31 + 10560]> */
		/* 82081D68h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00002940) );
		/* 82081D68h case    5:*/		return 0x82081D6C;
		  /* 82081D6Ch */ case    6:  		/* mr R3, R31 */
		/* 82081D6Ch case    6:*/		regs.R3 = regs.R31;
		/* 82081D6Ch case    6:*/		return 0x82081D70;
		  /* 82081D70h */ case    7:  		/* bl 5656 */
		/* 82081D70h case    7:*/		regs.LR = 0x82081D74; return 0x82083388;
		/* 82081D70h case    7:*/		return 0x82081D74;
		  /* 82081D74h */ case    8:  		/* mr R30, R3 */
		/* 82081D74h case    8:*/		regs.R30 = regs.R3;
		/* 82081D74h case    8:*/		return 0x82081D78;
	}
	return 0x82081D78;
} // Block from 82081D54h-82081D78h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82081D78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081D78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081D78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081D78);
		  /* 82081D78h */ case    0:  		/* rldicl R11, R30, 0, 52 */
		/* 82081D78h case    0:*/		cpu::op::rldicl<0,0,52>(regs,&regs.R11,regs.R30);
		/* 82081D78h case    0:*/		return 0x82081D7C;
		  /* 82081D7Ch */ case    1:  		/* cmpldi CR6, R11, 0 */
		/* 82081D7Ch case    1:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82081D7Ch case    1:*/		return 0x82081D80;
		  /* 82081D80h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 82081D80h case    2:*/		if ( regs.CR[6].eq ) { return 0x82081D98;  }
		/* 82081D80h case    2:*/		return 0x82081D84;
		  /* 82081D84h */ case    3:  		/* addi R6, R31, 10548 */
		/* 82081D84h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x2934);
		/* 82081D84h case    3:*/		return 0x82081D88;
		  /* 82081D88h */ case    4:  		/* li R5, 8704 */
		/* 82081D88h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x2200);
		/* 82081D88h case    4:*/		return 0x82081D8C;
		  /* 82081D8Ch */ case    5:  		/* rldicr R4, R30, 52, 11 */
		/* 82081D8Ch case    5:*/		cpu::op::rldicr<0,52,11>(regs,&regs.R4,regs.R30);
		/* 82081D8Ch case    5:*/		return 0x82081D90;
		  /* 82081D90h */ case    6:  		/* mr R3, R31 */
		/* 82081D90h case    6:*/		regs.R3 = regs.R31;
		/* 82081D90h case    6:*/		return 0x82081D94;
		  /* 82081D94h */ case    7:  		/* bl 6532 */
		/* 82081D94h case    7:*/		regs.LR = 0x82081D98; return 0x82083718;
		/* 82081D94h case    7:*/		return 0x82081D98;
	}
	return 0x82081D98;
} // Block from 82081D78h-82081D98h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82081D98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081D98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081D98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081D98);
		  /* 82081D98h */ case    0:  		/* rlwinm R11, R30, 0, 15, 19 */
		/* 82081D98h case    0:*/		cpu::op::rlwinm<0,0,15,19>(regs,&regs.R11,regs.R30);
		/* 82081D98h case    0:*/		return 0x82081D9C;
		  /* 82081D9Ch */ case    1:  		/* cmpldi CR6, R11, 0 */
		/* 82081D9Ch case    1:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82081D9Ch case    1:*/		return 0x82081DA0;
		  /* 82081DA0h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 82081DA0h case    2:*/		if ( regs.CR[6].eq ) { return 0x82081DB8;  }
		/* 82081DA0h case    2:*/		return 0x82081DA4;
		  /* 82081DA4h */ case    3:  		/* addi R6, R31, 10528 */
		/* 82081DA4h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x2920);
		/* 82081DA4h case    3:*/		return 0x82081DA8;
		  /* 82081DA8h */ case    4:  		/* li R5, 8576 */
		/* 82081DA8h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x2180);
		/* 82081DA8h case    4:*/		return 0x82081DAC;
		  /* 82081DACh */ case    5:  		/* rldicr R4, R30, 47, 4 */
		/* 82081DACh case    5:*/		cpu::op::rldicr<0,47,4>(regs,&regs.R4,regs.R30);
		/* 82081DACh case    5:*/		return 0x82081DB0;
		  /* 82081DB0h */ case    6:  		/* mr R3, R31 */
		/* 82081DB0h case    6:*/		regs.R3 = regs.R31;
		/* 82081DB0h case    6:*/		return 0x82081DB4;
		  /* 82081DB4h */ case    7:  		/* bl 6500 */
		/* 82081DB4h case    7:*/		regs.LR = 0x82081DB8; return 0x82083718;
		/* 82081DB4h case    7:*/		return 0x82081DB8;
	}
	return 0x82081DB8;
} // Block from 82081D98h-82081DB8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82081DB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081DB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081DB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081DB8);
		  /* 82081DB8h */ case    0:  		/* lis R12, 0 */
		/* 82081DB8h case    0:*/		cpu::op::lis<0>(regs,&regs.R12,0x0);
		/* 82081DB8h case    0:*/		return 0x82081DBC;
		  /* 82081DBCh */ case    1:  		/* ori R12, R12, 65535 */
		/* 82081DBCh case    1:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xFFFF);
		/* 82081DBCh case    1:*/		return 0x82081DC0;
		  /* 82081DC0h */ case    2:  		/* rldicr R12, R12, 42, 21 */
		/* 82081DC0h case    2:*/		cpu::op::rldicr<0,42,21>(regs,&regs.R12,regs.R12);
		/* 82081DC0h case    2:*/		return 0x82081DC4;
		  /* 82081DC4h */ case    3:  		/* and R11, R30, R12 */
		/* 82081DC4h case    3:*/		cpu::op::and<0>(regs,&regs.R11,regs.R30,regs.R12);
		/* 82081DC4h case    3:*/		return 0x82081DC8;
		  /* 82081DC8h */ case    4:  		/* cmpldi CR6, R11, 0 */
		/* 82081DC8h case    4:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82081DC8h case    4:*/		return 0x82081DCC;
		  /* 82081DCCh */ case    5:  		/* bc 12, CR6_EQ, 24 */
		/* 82081DCCh case    5:*/		if ( regs.CR[6].eq ) { return 0x82081DE4;  }
		/* 82081DCCh case    5:*/		return 0x82081DD0;
		  /* 82081DD0h */ case    6:  		/* addi R6, R31, 10368 */
		/* 82081DD0h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x2880);
		/* 82081DD0h case    6:*/		return 0x82081DD4;
		  /* 82081DD4h */ case    7:  		/* li R5, 8192 */
		/* 82081DD4h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x2000);
		/* 82081DD4h case    7:*/		return 0x82081DD8;
		  /* 82081DD8h */ case    8:  		/* rldicr R4, R30, 6, 15 */
		/* 82081DD8h case    8:*/		cpu::op::rldicr<0,6,15>(regs,&regs.R4,regs.R30);
		/* 82081DD8h case    8:*/		return 0x82081DDC;
		  /* 82081DDCh */ case    9:  		/* mr R3, R31 */
		/* 82081DDCh case    9:*/		regs.R3 = regs.R31;
		/* 82081DDCh case    9:*/		return 0x82081DE0;
		  /* 82081DE0h */ case   10:  		/* bl 6456 */
		/* 82081DE0h case   10:*/		regs.LR = 0x82081DE4; return 0x82083718;
		/* 82081DE0h case   10:*/		return 0x82081DE4;
	}
	return 0x82081DE4;
} // Block from 82081DB8h-82081DE4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82081DE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081DE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081DE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081DE4);
		  /* 82081DE4h */ case    0:  		/* lis R12, -32 */
		/* 82081DE4h case    0:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFFE0);
		/* 82081DE4h case    0:*/		return 0x82081DE8;
		  /* 82081DE8h */ case    1:  		/* rldicl R12, R12, 0, 22 */
		/* 82081DE8h case    1:*/		cpu::op::rldicl<0,0,22>(regs,&regs.R12,regs.R12);
		/* 82081DE8h case    1:*/		return 0x82081DEC;
		  /* 82081DECh */ case    2:  		/* and R11, R30, R12 */
		/* 82081DECh case    2:*/		cpu::op::and<0>(regs,&regs.R11,regs.R30,regs.R12);
		/* 82081DECh case    2:*/		return 0x82081DF0;
		  /* 82081DF0h */ case    3:  		/* cmpldi CR6, R11, 0 */
		/* 82081DF0h case    3:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82081DF0h case    3:*/		return 0x82081DF4;
		  /* 82081DF4h */ case    4:  		/* bc 12, CR6_EQ, 24 */
		/* 82081DF4h case    4:*/		if ( regs.CR[6].eq ) { return 0x82081E0C;  }
		/* 82081DF4h case    4:*/		return 0x82081DF8;
		  /* 82081DF8h */ case    5:  		/* addi R6, R31, 10444 */
		/* 82081DF8h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x28CC);
		/* 82081DF8h case    5:*/		return 0x82081DFC;
		  /* 82081DFCh */ case    6:  		/* li R5, 8448 */
		/* 82081DFCh case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x2100);
		/* 82081DFCh case    6:*/		return 0x82081E00;
		  /* 82081E00h */ case    7:  		/* rldicr R4, R30, 22, 20 */
		/* 82081E00h case    7:*/		cpu::op::rldicr<0,22,20>(regs,&regs.R4,regs.R30);
		/* 82081E00h case    7:*/		return 0x82081E04;
		  /* 82081E04h */ case    8:  		/* mr R3, R31 */
		/* 82081E04h case    8:*/		regs.R3 = regs.R31;
		/* 82081E04h case    8:*/		return 0x82081E08;
		  /* 82081E08h */ case    9:  		/* bl 6416 */
		/* 82081E08h case    9:*/		regs.LR = 0x82081E0C; return 0x82083718;
		/* 82081E08h case    9:*/		return 0x82081E0C;
	}
	return 0x82081E0C;
} // Block from 82081DE4h-82081E0Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 82081E0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081E0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081E0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081E0C);
		  /* 82081E0Ch */ case    0:  		/* std R26, <#[R31 + 16]> */
		/* 82081E0Ch case    0:*/		cpu::mem::store64( regs, regs.R26, (uint32)(regs.R31 + 0x00000010) );
		/* 82081E0Ch case    0:*/		return 0x82081E10;
	}
	return 0x82081E10;
} // Block from 82081E0Ch-82081E10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82081E10h
// Function '?CalculateBandwidth@D3D@@YAM_K0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081E10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081E10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081E10);
		  /* 82081E10h */ case    0:  		/* cmpldi CR6, R28, 0 */
		/* 82081E10h case    0:*/		cpu::op::cmpldi<6>(regs,regs.R28,0x00000000);
		/* 82081E10h case    0:*/		return 0x82081E14;
		  /* 82081E14h */ case    1:  		/* bc 12, CR6_EQ, 76 */
		/* 82081E14h case    1:*/		if ( regs.CR[6].eq ) { return 0x82081E60;  }
		/* 82081E14h case    1:*/		return 0x82081E18;
		  /* 82081E18h */ case    2:  		/* rldicl R11, R28, 0, 32 */
		/* 82081E18h case    2:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R28);
		/* 82081E18h case    2:*/		return 0x82081E1C;
		  /* 82081E1Ch */ case    3:  		/* cmpldi CR6, R11, 0 */
		/* 82081E1Ch case    3:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82081E1Ch case    3:*/		return 0x82081E20;
		  /* 82081E20h */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 82081E20h case    4:*/		if ( regs.CR[6].eq ) { return 0x82081E30;  }
		/* 82081E20h case    4:*/		return 0x82081E24;
		  /* 82081E24h */ case    5:  		/* rldicr R4, R28, 32, 31 */
		/* 82081E24h case    5:*/		cpu::op::rldicr<0,32,31>(regs,&regs.R4,regs.R28);
		/* 82081E24h case    5:*/		return 0x82081E28;
		  /* 82081E28h */ case    6:  		/* mr R3, R31 */
		/* 82081E28h case    6:*/		regs.R3 = regs.R31;
		/* 82081E28h case    6:*/		return 0x82081E2C;
		  /* 82081E2Ch */ case    7:  		/* bl 6956 */
		/* 82081E2Ch case    7:*/		regs.LR = 0x82081E30; return 0x82083958;
		/* 82081E2Ch case    7:*/		return 0x82081E30;
	}
	return 0x82081E30;
} // Block from 82081E10h-82081E30h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82081E30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081E30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081E30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081E30);
		  /* 82081E30h */ case    0:  		/* lis R12, 31 */
		/* 82081E30h case    0:*/		cpu::op::lis<0>(regs,&regs.R12,0x1F);
		/* 82081E30h case    0:*/		return 0x82081E34;
		  /* 82081E34h */ case    1:  		/* ori R12, R12, 65535 */
		/* 82081E34h case    1:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xFFFF);
		/* 82081E34h case    1:*/		return 0x82081E38;
		  /* 82081E38h */ case    2:  		/* rldicr R12, R12, 34, 29 */
		/* 82081E38h case    2:*/		cpu::op::rldicr<0,34,29>(regs,&regs.R12,regs.R12);
		/* 82081E38h case    2:*/		return 0x82081E3C;
		  /* 82081E3Ch */ case    3:  		/* and R11, R28, R12 */
		/* 82081E3Ch case    3:*/		cpu::op::and<0>(regs,&regs.R11,regs.R28,regs.R12);
		/* 82081E3Ch case    3:*/		return 0x82081E40;
		  /* 82081E40h */ case    4:  		/* cmpldi CR6, R11, 0 */
		/* 82081E40h case    4:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82081E40h case    4:*/		return 0x82081E44;
		  /* 82081E44h */ case    5:  		/* bc 12, CR6_EQ, 24 */
		/* 82081E44h case    5:*/		if ( regs.CR[6].eq ) { return 0x82081E5C;  }
		/* 82081E44h case    5:*/		return 0x82081E48;
		  /* 82081E48h */ case    6:  		/* addi R6, R31, 10596 */
		/* 82081E48h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x2964);
		/* 82081E48h case    6:*/		return 0x82081E4C;
		  /* 82081E4Ch */ case    7:  		/* li R5, 8832 */
		/* 82081E4Ch case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x2280);
		/* 82081E4Ch case    7:*/		return 0x82081E50;
		  /* 82081E50h */ case    8:  		/* rldicr R4, R28, 9, 20 */
		/* 82081E50h case    8:*/		cpu::op::rldicr<0,9,20>(regs,&regs.R4,regs.R28);
		/* 82081E50h case    8:*/		return 0x82081E54;
		  /* 82081E54h */ case    9:  		/* mr R3, R31 */
		/* 82081E54h case    9:*/		regs.R3 = regs.R31;
		/* 82081E54h case    9:*/		return 0x82081E58;
		  /* 82081E58h */ case   10:  		/* bl 6336 */
		/* 82081E58h case   10:*/		regs.LR = 0x82081E5C; return 0x82083718;
		/* 82081E58h case   10:*/		return 0x82081E5C;
	}
	return 0x82081E5C;
} // Block from 82081E30h-82081E5Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82081E5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081E5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081E5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081E5C);
		  /* 82081E5Ch */ case    0:  		/* std R26, <#[R31 + 24]> */
		/* 82081E5Ch case    0:*/		cpu::mem::store64( regs, regs.R26, (uint32)(regs.R31 + 0x00000018) );
		/* 82081E5Ch case    0:*/		return 0x82081E60;
	}
	return 0x82081E60;
} // Block from 82081E5Ch-82081E60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82081E60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081E60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081E60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081E60);
		  /* 82081E60h */ case    0:  		/* cmpldi CR6, R27, 0 */
		/* 82081E60h case    0:*/		cpu::op::cmpldi<6>(regs,regs.R27,0x00000000);
		/* 82081E60h case    0:*/		return 0x82081E64;
		  /* 82081E64h */ case    1:  		/* bc 12, CR6_EQ, 192 */
		/* 82081E64h case    1:*/		if ( regs.CR[6].eq ) { return 0x82081F24;  }
		/* 82081E64h case    1:*/		return 0x82081E68;
		  /* 82081E68h */ case    2:  		/* li R12, 255 */
		/* 82081E68h case    2:*/		cpu::op::li<0>(regs,&regs.R12,0xFF);
		/* 82081E68h case    2:*/		return 0x82081E6C;
		  /* 82081E6Ch */ case    3:  		/* rldicr R12, R12, 38, 25 */
		/* 82081E6Ch case    3:*/		cpu::op::rldicr<0,38,25>(regs,&regs.R12,regs.R12);
		/* 82081E6Ch case    3:*/		return 0x82081E70;
		  /* 82081E70h */ case    4:  		/* and R11, R27, R12 */
		/* 82081E70h case    4:*/		cpu::op::and<0>(regs,&regs.R11,regs.R27,regs.R12);
		/* 82081E70h case    4:*/		return 0x82081E74;
		  /* 82081E74h */ case    5:  		/* cmpldi CR6, R11, 0 */
		/* 82081E74h case    5:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82081E74h case    5:*/		return 0x82081E78;
		  /* 82081E78h */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 82081E78h case    6:*/		if ( regs.CR[6].eq ) { return 0x82081E90;  }
		/* 82081E78h case    6:*/		return 0x82081E7C;
		  /* 82081E7Ch */ case    7:  		/* addi R6, R31, 10832 */
		/* 82081E7Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x2A50);
		/* 82081E7Ch case    7:*/		return 0x82081E80;
	}
	return 0x82081E80;
} // Block from 82081E60h-82081E80h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82081E80h
// Function '?ShortPercentClamp@D3D@@YAK_J0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081E80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081E80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081E80);
		  /* 82081E80h */ case    0:  		/* li R5, 9088 */
		/* 82081E80h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x2380);
		/* 82081E80h case    0:*/		return 0x82081E84;
		  /* 82081E84h */ case    1:  		/* rldicr R4, R27, 18, 7 */
		/* 82081E84h case    1:*/		cpu::op::rldicr<0,18,7>(regs,&regs.R4,regs.R27);
		/* 82081E84h case    1:*/		return 0x82081E88;
		  /* 82081E88h */ case    2:  		/* mr R3, R31 */
		/* 82081E88h case    2:*/		regs.R3 = regs.R31;
		/* 82081E88h case    2:*/		return 0x82081E8C;
		  /* 82081E8Ch */ case    3:  		/* bl 6284 */
		/* 82081E8Ch case    3:*/		regs.LR = 0x82081E90; return 0x82083718;
		/* 82081E8Ch case    3:*/		return 0x82081E90;
	}
	return 0x82081E90;
} // Block from 82081E80h-82081E90h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82081E90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081E90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081E90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081E90);
		  /* 82081E90h */ case    0:  		/* li R12, 63 */
		/* 82081E90h case    0:*/		cpu::op::li<0>(regs,&regs.R12,0x3F);
		/* 82081E90h case    0:*/		return 0x82081E94;
		  /* 82081E94h */ case    1:  		/* rldicr R12, R12, 49, 14 */
		/* 82081E94h case    1:*/		cpu::op::rldicr<0,49,14>(regs,&regs.R12,regs.R12);
		/* 82081E94h case    1:*/		return 0x82081E98;
		  /* 82081E98h */ case    2:  		/* and R11, R27, R12 */
		/* 82081E98h case    2:*/		cpu::op::and<0>(regs,&regs.R11,regs.R27,regs.R12);
		/* 82081E98h case    2:*/		return 0x82081E9C;
		  /* 82081E9Ch */ case    3:  		/* cmpldi CR6, R11, 0 */
		/* 82081E9Ch case    3:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82081E9Ch case    3:*/		return 0x82081EA0;
		  /* 82081EA0h */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 82081EA0h case    4:*/		if ( regs.CR[6].eq ) { return 0x82081EB0;  }
		/* 82081EA0h case    4:*/		return 0x82081EA4;
		  /* 82081EA4h */ case    5:  		/* rldicr R4, R27, 9, 5 */
		/* 82081EA4h case    5:*/		cpu::op::rldicr<0,9,5>(regs,&regs.R4,regs.R27);
		/* 82081EA4h case    5:*/		return 0x82081EA8;
		  /* 82081EA8h */ case    6:  		/* mr R3, R31 */
		/* 82081EA8h case    6:*/		regs.R3 = regs.R31;
		/* 82081EA8h case    6:*/		return 0x82081EAC;
		  /* 82081EACh */ case    7:  		/* bl 6444 */
		/* 82081EACh case    7:*/		regs.LR = 0x82081EB0; return 0x820837D8;
		/* 82081EACh case    7:*/		return 0x82081EB0;
	}
	return 0x82081EB0;
} // Block from 82081E90h-82081EB0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82081EB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081EB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081EB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081EB0);
		  /* 82081EB0h */ case    0:  		/* li R12, 1 */
		/* 82081EB0h case    0:*/		cpu::op::li<0>(regs,&regs.R12,0x1);
		/* 82081EB0h case    0:*/		return 0x82081EB4;
		  /* 82081EB4h */ case    1:  		/* rldicr R12, R12, 56, 63 */
		/* 82081EB4h case    1:*/		cpu::op::rldicr<0,56,63>(regs,&regs.R12,regs.R12);
		/* 82081EB4h case    1:*/		return 0x82081EB8;
		  /* 82081EB8h */ case    2:  		/* and R11, R27, R12 */
		/* 82081EB8h case    2:*/		cpu::op::and<0>(regs,&regs.R11,regs.R27,regs.R12);
		/* 82081EB8h case    2:*/		return 0x82081EBC;
		  /* 82081EBCh */ case    3:  		/* cmpldi CR6, R11, 0 */
		/* 82081EBCh case    3:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82081EBCh case    3:*/		return 0x82081EC0;
		  /* 82081EC0h */ case    4:  		/* bc 12, CR6_EQ, 24 */
		/* 82081EC0h case    4:*/		if ( regs.CR[6].eq ) { return 0x82081ED8;  }
		/* 82081EC0h case    4:*/		return 0x82081EC4;
		  /* 82081EC4h */ case    5:  		/* addi R6, R31, 10112 */
		/* 82081EC4h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x2780);
		/* 82081EC4h case    5:*/		return 0x82081EC8;
		  /* 82081EC8h */ case    6:  		/* li R5, 18688 */
		/* 82081EC8h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x4900);
		/* 82081EC8h case    6:*/		return 0x82081ECC;
		  /* 82081ECCh */ case    7:  		/* lis R4, -256 */
		/* 82081ECCh case    7:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFFF00);
		/* 82081ECCh case    7:*/		return 0x82081ED0;
		  /* 82081ED0h */ case    8:  		/* mr R3, R31 */
		/* 82081ED0h case    8:*/		regs.R3 = regs.R31;
		/* 82081ED0h case    8:*/		return 0x82081ED4;
		  /* 82081ED4h */ case    9:  		/* bl 6212 */
		/* 82081ED4h case    9:*/		regs.LR = 0x82081ED8; return 0x82083718;
		/* 82081ED4h case    9:*/		return 0x82081ED8;
	}
	return 0x82081ED8;
} // Block from 82081EB0h-82081ED8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82081ED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081ED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081ED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081ED8);
		  /* 82081ED8h */ case    0:  		/* rldicl R11, R27, 0, 26 */
		/* 82081ED8h case    0:*/		cpu::op::rldicl<0,0,26>(regs,&regs.R11,regs.R27);
		/* 82081ED8h case    0:*/		return 0x82081EDC;
		  /* 82081EDCh */ case    1:  		/* cmpldi CR6, R11, 0 */
		/* 82081EDCh case    1:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82081EDCh case    1:*/		return 0x82081EE0;
		  /* 82081EE0h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 82081EE0h case    2:*/		if ( regs.CR[6].eq ) { return 0x82081EF8;  }
		/* 82081EE0h case    2:*/		return 0x82081EE4;
		  /* 82081EE4h */ case    3:  		/* addi R6, R31, 10680 */
		/* 82081EE4h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x29B8);
		/* 82081EE4h case    3:*/		return 0x82081EE8;
	}
	return 0x82081EE8;
} // Block from 82081ED8h-82081EE8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82081EE8h
// Function '?SubmitGeneralCounters@D3D@@YAXPAVCDevice@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081EE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081EE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081EE8);
		  /* 82081EE8h */ case    0:  		/* li R5, 8960 */
		/* 82081EE8h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x2300);
		/* 82081EE8h case    0:*/		return 0x82081EEC;
		  /* 82081EECh */ case    1:  		/* rldicr R4, R27, 26, 37 */
		/* 82081EECh case    1:*/		cpu::op::rldicr<0,26,37>(regs,&regs.R4,regs.R27);
		/* 82081EECh case    1:*/		return 0x82081EF0;
		  /* 82081EF0h */ case    2:  		/* mr R3, R31 */
		/* 82081EF0h case    2:*/		regs.R3 = regs.R31;
		/* 82081EF0h case    2:*/		return 0x82081EF4;
		  /* 82081EF4h */ case    3:  		/* bl 6180 */
		/* 82081EF4h case    3:*/		regs.LR = 0x82081EF8; return 0x82083718;
		/* 82081EF4h case    3:*/		return 0x82081EF8;
	}
	return 0x82081EF8;
} // Block from 82081EE8h-82081EF8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82081EF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081EF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081EF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081EF8);
		  /* 82081EF8h */ case    0:  		/* rldicr R11, R27, 0, 1 */
		/* 82081EF8h case    0:*/		cpu::op::rldicr<0,0,1>(regs,&regs.R11,regs.R27);
		/* 82081EF8h case    0:*/		return 0x82081EFC;
		  /* 82081EFCh */ case    1:  		/* cmpldi CR6, R11, 0 */
		/* 82081EFCh case    1:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82081EFCh case    1:*/		return 0x82081F00;
		  /* 82081F00h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 82081F00h case    2:*/		if ( regs.CR[6].eq ) { return 0x82081F20;  }
		/* 82081F00h case    2:*/		return 0x82081F04;
		  /* 82081F04h */ case    3:  		/* lbz R11, <#[R31 + 11072]> */
		/* 82081F04h case    3:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B40) );
		/* 82081F04h case    3:*/		return 0x82081F08;
		  /* 82081F08h */ case    4:  		/* rlwinm. R10, R11, 0, 0, 24 */
		/* 82081F08h case    4:*/		cpu::op::rlwinm<1,0,0,24>(regs,&regs.R10,regs.R11);
		/* 82081F08h case    4:*/		return 0x82081F0C;
		  /* 82081F0Ch */ case    5:  		/* bc 4, CR0_EQ, 12 */
		/* 82081F0Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x82081F18;  }
		/* 82081F0Ch case    5:*/		return 0x82081F10;
		  /* 82081F10h */ case    6:  		/* rlwinm. R11, R11, 0, 25, 25 */
		/* 82081F10h case    6:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R11);
		/* 82081F10h case    6:*/		return 0x82081F14;
		  /* 82081F14h */ case    7:  		/* bc 12, CR0_EQ, 12 */
		/* 82081F14h case    7:*/		if ( regs.CR[0].eq ) { return 0x82081F20;  }
		/* 82081F14h case    7:*/		return 0x82081F18;
	}
	return 0x82081F18;
} // Block from 82081EF8h-82081F18h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82081F18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081F18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081F18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081F18);
		  /* 82081F18h */ case    0:  		/* mr R3, R31 */
		/* 82081F18h case    0:*/		regs.R3 = regs.R31;
		/* 82081F18h case    0:*/		return 0x82081F1C;
		  /* 82081F1Ch */ case    1:  		/* bl -20500 */
		/* 82081F1Ch case    1:*/		regs.LR = 0x82081F20; return 0x8207CF08;
		/* 82081F1Ch case    1:*/		return 0x82081F20;
	}
	return 0x82081F20;
} // Block from 82081F18h-82081F20h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82081F20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081F20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081F20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081F20);
		  /* 82081F20h */ case    0:  		/* std R26, <#[R31 + 32]> */
		/* 82081F20h case    0:*/		cpu::mem::store64( regs, regs.R26, (uint32)(regs.R31 + 0x00000020) );
		/* 82081F20h case    0:*/		return 0x82081F24;
	}
	return 0x82081F24;
} // Block from 82081F20h-82081F24h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82081F24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081F24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081F24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081F24);
		  /* 82081F24h */ case    0:  		/* addi R1, R1, 144 */
		/* 82081F24h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82081F24h case    0:*/		return 0x82081F28;
		  /* 82081F28h */ case    1:  		/* b 62328 */
		/* 82081F28h case    1:*/		return 0x820912A0;
		/* 82081F28h case    1:*/		return 0x82081F2C;
		  /* 82081F2Ch */ case    2:  		/* nop */
		/* 82081F2Ch case    2:*/		cpu::op::nop();
		/* 82081F2Ch case    2:*/		return 0x82081F30;
	}
	return 0x82081F30;
} // Block from 82081F24h-82081F30h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82081F30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081F30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081F30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081F30);
		  /* 82081F30h */ case    0:  		/* mfspr R12, LR */
		/* 82081F30h case    0:*/		regs.R12 = regs.LR;
		/* 82081F30h case    0:*/		return 0x82081F34;
		  /* 82081F34h */ case    1:  		/* bl 62188 */
		/* 82081F34h case    1:*/		regs.LR = 0x82081F38; return 0x82091220;
		/* 82081F34h case    1:*/		return 0x82081F38;
		  /* 82081F38h */ case    2:  		/* stfd FR31, <#[R1 - 160]> */
		/* 82081F38h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 82081F38h case    2:*/		return 0x82081F3C;
		  /* 82081F3Ch */ case    3:  		/* stwu R1, <#[R1 - 384]> */
		/* 82081F3Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE80);
		/* 82081F3Ch case    3:*/		return 0x82081F40;
		  /* 82081F40h */ case    4:  		/* mr R31, R3 */
		/* 82081F40h case    4:*/		regs.R31 = regs.R3;
		/* 82081F40h case    4:*/		return 0x82081F44;
		  /* 82081F44h */ case    5:  		/* stw R7, <#[R1 + 436]> */
		/* 82081F44h case    5:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x000001B4) );
		/* 82081F44h case    5:*/		return 0x82081F48;
		  /* 82081F48h */ case    6:  		/* mr R21, R4 */
		/* 82081F48h case    6:*/		regs.R21 = regs.R4;
		/* 82081F48h case    6:*/		return 0x82081F4C;
		  /* 82081F4Ch */ case    7:  		/* stw R10, <#[R1 + 460]> */
		/* 82081F4Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000001CC) );
		/* 82081F4Ch case    7:*/		return 0x82081F50;
		  /* 82081F50h */ case    8:  		/* mr R23, R5 */
		/* 82081F50h case    8:*/		regs.R23 = regs.R5;
		/* 82081F50h case    8:*/		return 0x82081F54;
		  /* 82081F54h */ case    9:  		/* fmr FR31, FR1 */
		/* 82081F54h case    9:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 82081F54h case    9:*/		return 0x82081F58;
		  /* 82081F58h */ case   10:  		/* mr R16, R6 */
		/* 82081F58h case   10:*/		regs.R16 = regs.R6;
		/* 82081F58h case   10:*/		return 0x82081F5C;
		  /* 82081F5Ch */ case   11:  		/* mr R15, R8 */
		/* 82081F5Ch case   11:*/		regs.R15 = regs.R8;
		/* 82081F5Ch case   11:*/		return 0x82081F60;
		  /* 82081F60h */ case   12:  		/* mr R29, R9 */
		/* 82081F60h case   12:*/		regs.R29 = regs.R9;
		/* 82081F60h case   12:*/		return 0x82081F64;
		  /* 82081F64h */ case   13:  		/* mr R26, R10 */
		/* 82081F64h case   13:*/		regs.R26 = regs.R10;
		/* 82081F64h case   13:*/		return 0x82081F68;
		  /* 82081F68h */ case   14:  		/* rlwinm. R11, R4, 0, 17, 17 */
		/* 82081F68h case   14:*/		cpu::op::rlwinm<1,0,17,17>(regs,&regs.R11,regs.R4);
		/* 82081F68h case   14:*/		return 0x82081F6C;
		  /* 82081F6Ch */ case   15:  		/* li R25, 0 */
		/* 82081F6Ch case   15:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 82081F6Ch case   15:*/		return 0x82081F70;
		  /* 82081F70h */ case   16:  		/* li R22, 1 */
		/* 82081F70h case   16:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 82081F70h case   16:*/		return 0x82081F74;
		  /* 82081F74h */ case   17:  		/* bc 12, CR0_EQ, 24 */
		/* 82081F74h case   17:*/		if ( regs.CR[0].eq ) { return 0x82081F8C;  }
		/* 82081F74h case   17:*/		return 0x82081F78;
		  /* 82081F78h */ case   18:  		/* lis R11, -32215 */
		/* 82081F78h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82081F78h case   18:*/		return 0x82081F7C;
		  /* 82081F7Ch */ case   19:  		/* stw R22, <#[R1 + 144]> */
		/* 82081F7Ch case   19:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000090) );
		/* 82081F7Ch case   19:*/		return 0x82081F80;
		  /* 82081F80h */ case   20:  		/* lwz R11, <#[R11 - 31316]> */
		/* 82081F80h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0xFFFF85AC) );
		/* 82081F80h case   20:*/		return 0x82081F84;
		  /* 82081F84h */ case   21:  		/* cmpwi CR6, R11, 0 */
		/* 82081F84h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82081F84h case   21:*/		return 0x82081F88;
		  /* 82081F88h */ case   22:  		/* bc 12, CR6_EQ, 8 */
		/* 82081F88h case   22:*/		if ( regs.CR[6].eq ) { return 0x82081F90;  }
		/* 82081F88h case   22:*/		return 0x82081F8C;
	}
	return 0x82081F8C;
} // Block from 82081F30h-82081F8Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 82081F8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081F8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081F8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081F8C);
		  /* 82081F8Ch */ case    0:  		/* stw R25, <#[R1 + 144]> */
		/* 82081F8Ch case    0:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000090) );
		/* 82081F8Ch case    0:*/		return 0x82081F90;
	}
	return 0x82081F90;
} // Block from 82081F8Ch-82081F90h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82081F90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081F90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081F90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081F90);
		  /* 82081F90h */ case    0:  		/* rlwinm. R11, R21, 0, 16, 16 */
		/* 82081F90h case    0:*/		cpu::op::rlwinm<1,0,16,16>(regs,&regs.R11,regs.R21);
		/* 82081F90h case    0:*/		return 0x82081F94;
		  /* 82081F94h */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 82081F94h case    1:*/		if ( regs.CR[0].eq ) { return 0x82081FAC;  }
		/* 82081F94h case    1:*/		return 0x82081F98;
		  /* 82081F98h */ case    2:  		/* lis R11, -32215 */
		/* 82081F98h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82081F98h case    2:*/		return 0x82081F9C;
		  /* 82081F9Ch */ case    3:  		/* stw R22, <#[R1 + 136]> */
		/* 82081F9Ch case    3:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000088) );
		/* 82081F9Ch case    3:*/		return 0x82081FA0;
		  /* 82081FA0h */ case    4:  		/* lwz R11, <#[R11 - 31312]> */
		/* 82081FA0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0xFFFF85B0) );
		/* 82081FA0h case    4:*/		return 0x82081FA4;
		  /* 82081FA4h */ case    5:  		/* cmpwi CR6, R11, 0 */
		/* 82081FA4h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82081FA4h case    5:*/		return 0x82081FA8;
		  /* 82081FA8h */ case    6:  		/* bc 12, CR6_EQ, 8 */
		/* 82081FA8h case    6:*/		if ( regs.CR[6].eq ) { return 0x82081FB0;  }
		/* 82081FA8h case    6:*/		return 0x82081FAC;
	}
	return 0x82081FAC;
} // Block from 82081F90h-82081FACh (7 instructions)

//////////////////////////////////////////////////////
// Block at 82081FACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081FAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081FAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081FAC);
		  /* 82081FACh */ case    0:  		/* stw R25, <#[R1 + 136]> */
		/* 82081FACh case    0:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000088) );
		/* 82081FACh case    0:*/		return 0x82081FB0;
	}
	return 0x82081FB0;
} // Block from 82081FACh-82081FB0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82081FB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081FB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081FB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081FB0);
		  /* 82081FB0h */ case    0:  		/* rlwinm R11, R21, 0, 29, 31 */
		/* 82081FB0h case    0:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R21);
		/* 82081FB0h case    0:*/		return 0x82081FB4;
		  /* 82081FB4h */ case    1:  		/* rlwinm. R10, R21, 0, 25, 27 */
		/* 82081FB4h case    1:*/		cpu::op::rlwinm<1,0,25,27>(regs,&regs.R10,regs.R21);
		/* 82081FB4h case    1:*/		return 0x82081FB8;
		  /* 82081FB8h */ case    2:  		/* stw R11, <#[R1 + 148]> */
		/* 82081FB8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 82081FB8h case    2:*/		return 0x82081FBC;
		  /* 82081FBCh */ case    3:  		/* bc 4, CR0_EQ, 76 */
		/* 82081FBCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x82082008;  }
		/* 82081FBCh case    3:*/		return 0x82081FC0;
		  /* 82081FC0h */ case    4:  		/* cmplwi CR6, R11, 4 */
		/* 82081FC0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 82081FC0h case    4:*/		return 0x82081FC4;
		  /* 82081FC4h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 82081FC4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82081FD0;  }
		/* 82081FC4h case    5:*/		return 0x82081FC8;
		  /* 82081FC8h */ case    6:  		/* lwz R11, <#[R31 + 12832]> */
		/* 82081FC8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003220) );
		/* 82081FC8h case    6:*/		return 0x82081FCC;
		  /* 82081FCCh */ case    7:  		/* b 16 */
		/* 82081FCCh case    7:*/		return 0x82081FDC;
		/* 82081FCCh case    7:*/		return 0x82081FD0;
	}
	return 0x82081FD0;
} // Block from 82081FB0h-82081FD0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82081FD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081FD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081FD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081FD0);
		  /* 82081FD0h */ case    0:  		/* addi R11, R11, 3204 */
		/* 82081FD0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xC84);
		/* 82081FD0h case    0:*/		return 0x82081FD4;
		  /* 82081FD4h */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82081FD4h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82081FD4h case    1:*/		return 0x82081FD8;
		  /* 82081FD8h */ case    2:  		/* lwzx R11, <#[R11 + R31]> */
		/* 82081FD8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82081FD8h case    2:*/		return 0x82081FDC;
	}
	return 0x82081FDC;
} // Block from 82081FD0h-82081FDCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82081FDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081FDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081FDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081FDC);
		  /* 82081FDCh */ case    0:  		/* lhz R11, <#[R11 + 24]> */
		/* 82081FDCh case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82081FDCh case    0:*/		return 0x82081FE0;
		  /* 82081FE0h */ case    1:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 82081FE0h case    1:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 82081FE0h case    1:*/		return 0x82081FE4;
		  /* 82081FE4h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82081FE4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82081FE4h case    2:*/		return 0x82081FE8;
		  /* 82081FE8h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 82081FE8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82081FF4;  }
		/* 82081FE8h case    3:*/		return 0x82081FEC;
		  /* 82081FECh */ case    4:  		/* ori R21, R21, 16 */
		/* 82081FECh case    4:*/		cpu::op::ori<0>(regs,&regs.R21,regs.R21,0x10);
		/* 82081FECh case    4:*/		return 0x82081FF0;
		  /* 82081FF0h */ case    5:  		/* b 24 */
		/* 82081FF0h case    5:*/		return 0x82082008;
		/* 82081FF0h case    5:*/		return 0x82081FF4;
	}
	return 0x82081FF4;
} // Block from 82081FDCh-82081FF4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82081FF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82081FF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82081FF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82081FF4);
		  /* 82081FF4h */ case    0:  		/* cmplwi CR6, R11, 1 */
		/* 82081FF4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82081FF4h case    0:*/		return 0x82081FF8;
		  /* 82081FF8h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82081FF8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82082004;  }
		/* 82081FF8h case    1:*/		return 0x82081FFC;
		  /* 82081FFCh */ case    2:  		/* ori R21, R21, 80 */
		/* 82081FFCh case    2:*/		cpu::op::ori<0>(regs,&regs.R21,regs.R21,0x50);
		/* 82081FFCh case    2:*/		return 0x82082000;
		  /* 82082000h */ case    3:  		/* b 8 */
		/* 82082000h case    3:*/		return 0x82082008;
		/* 82082000h case    3:*/		return 0x82082004;
	}
	return 0x82082004;
} // Block from 82081FF4h-82082004h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82082004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082004);
		  /* 82082004h */ case    0:  		/* ori R21, R21, 112 */
		/* 82082004h case    0:*/		cpu::op::ori<0>(regs,&regs.R21,regs.R21,0x70);
		/* 82082004h case    0:*/		return 0x82082008;
	}
	return 0x82082008;
} // Block from 82082004h-82082008h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82082008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082008);
		  /* 82082008h */ case    0:  		/* lwz R17, <#[R1 + 476]> */
		/* 82082008h case    0:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R1 + 0x000001DC) );
		/* 82082008h case    0:*/		return 0x8208200C;
		  /* 8208200Ch */ case    1:  		/* cmplwi CR6, R17, 0 */
		/* 8208200Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 8208200Ch case    1:*/		return 0x82082010;
		  /* 82082010h */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 82082010h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8208202C;  }
		/* 82082010h case    2:*/		return 0x82082014;
		  /* 82082014h */ case    3:  		/* lis R11, -32256 */
		/* 82082014h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82082014h case    3:*/		return 0x82082018;
		  /* 82082018h */ case    4:  		/* addi R10, R1, 208 */
		/* 82082018h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xD0);
		/* 82082018h case    4:*/		return 0x8208201C;
		  /* 8208201Ch */ case    5:  		/* addi R11, R11, 1904 */
		/* 8208201Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x770);
		/* 8208201Ch case    5:*/		return 0x82082020;
		  /* 82082020h */ case    6:  		/* addi R17, R1, 208 */
		/* 82082020h case    6:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R1,0xD0);
		/* 82082020h case    6:*/		return 0x82082024;
		  /* 82082024h */ case    7:  		/* lvx VR63, <#[R11]> */
		/* 82082024h case    7:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R11 + 0x00000000) );
		/* 82082024h case    7:*/		return 0x82082028;
		  /* 82082028h */ case    8:  		/* stvx VR63, <#[R10]> */
		/* 82082028h case    8:*/		cpu::mem::stvx( regs, regs.VR63, (uint32)(regs.R10 + 0x00000000) );
		/* 82082028h case    8:*/		return 0x8208202C;
	}
	return 0x8208202C;
} // Block from 82082008h-8208202Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8208202Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208202C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208202C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208202C);
		  /* 8208202Ch */ case    0:  		/* lwz R11, <#[R15 + 40]> */
		/* 8208202Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000028) );
		/* 8208202Ch case    0:*/		return 0x82082030;
		  /* 82082030h */ case    1:  		/* lwz R10, <#[R15 + 48]> */
		/* 82082030h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R15 + 0x00000030) );
		/* 82082030h case    1:*/		return 0x82082034;
		  /* 82082034h */ case    2:  		/* rlwinm R11, R11, 2, 30, 30 */
		/* 82082034h case    2:*/		cpu::op::rlwinm<0,2,30,30>(regs,&regs.R11,regs.R11);
		/* 82082034h case    2:*/		return 0x82082038;
		  /* 82082038h */ case    3:  		/* lwz R9, <#[R15 + 36]> */
		/* 82082038h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R15 + 0x00000024) );
		/* 82082038h case    3:*/		return 0x8208203C;
		  /* 8208203Ch */ case    4:  		/* rlwinm R10, R10, 0, 21, 22 */
		/* 8208203Ch case    4:*/		cpu::op::rlwinm<0,0,21,22>(regs,&regs.R10,regs.R10);
		/* 8208203Ch case    4:*/		return 0x82082040;
		  /* 82082040h */ case    5:  		/* addi R11, R11, 1 */
		/* 82082040h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82082040h case    5:*/		return 0x82082044;
		  /* 82082044h */ case    6:  		/* cmplwi CR6, R10, 1024 */
		/* 82082044h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000400);
		/* 82082044h case    6:*/		return 0x82082048;
		  /* 82082048h */ case    7:  		/* bc 12, CR6_EQ, 16 */
		/* 82082048h case    7:*/		if ( regs.CR[6].eq ) { return 0x82082058;  }
		/* 82082048h case    7:*/		return 0x8208204C;
		  /* 8208204Ch */ case    8:  		/* rlwinm R10, R9, 0, 19, 31 */
		/* 8208204Ch case    8:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R10,regs.R9);
		/* 8208204Ch case    8:*/		return 0x82082050;
		  /* 82082050h */ case    9:  		/* rlwinm R9, R9, 19, 19, 31 */
		/* 82082050h case    9:*/		cpu::op::rlwinm<0,19,19,31>(regs,&regs.R9,regs.R9);
		/* 82082050h case    9:*/		return 0x82082054;
		  /* 82082054h */ case   10:  		/* b 16 */
		/* 82082054h case   10:*/		return 0x82082064;
		/* 82082054h case   10:*/		return 0x82082058;
	}
	return 0x82082058;
} // Block from 8208202Ch-82082058h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82082058h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082058( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082058) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082058);
		  /* 82082058h */ case    0:  		/* rlwinm R10, R9, 0, 21, 31 */
		/* 82082058h case    0:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R10,regs.R9);
		/* 82082058h case    0:*/		return 0x8208205C;
		  /* 8208205Ch */ case    1:  		/* li R22, 8 */
		/* 8208205Ch case    1:*/		cpu::op::li<0>(regs,&regs.R22,0x8);
		/* 8208205Ch case    1:*/		return 0x82082060;
		  /* 82082060h */ case    2:  		/* rlwinm R9, R9, 21, 21, 31 */
		/* 82082060h case    2:*/		cpu::op::rlwinm<0,21,21,31>(regs,&regs.R9,regs.R9);
		/* 82082060h case    2:*/		return 0x82082064;
	}
	return 0x82082064;
} // Block from 82082058h-82082064h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82082064h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082064( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082064) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082064);
		  /* 82082064h */ case    0:  		/* lwz R30, <#[R15 + 32]> */
		/* 82082064h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R15 + 0x00000020) );
		/* 82082064h case    0:*/		return 0x82082068;
		  /* 82082068h */ case    1:  		/* add R24, R9, R11 */
		/* 82082068h case    1:*/		cpu::op::add<0>(regs,&regs.R24,regs.R9,regs.R11);
		/* 82082068h case    1:*/		return 0x8208206C;
		  /* 8208206Ch */ case    2:  		/* add R10, R10, R11 */
		/* 8208206Ch case    2:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8208206Ch case    2:*/		return 0x82082070;
		  /* 82082070h */ case    3:  		/* addi R5, R1, 156 */
		/* 82082070h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x9C);
		/* 82082070h case    3:*/		return 0x82082074;
		  /* 82082074h */ case    4:  		/* stw R24, <#[R1 + 128]> */
		/* 82082074h case    4:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000080) );
		/* 82082074h case    4:*/		return 0x82082078;
		  /* 82082078h */ case    5:  		/* addi R4, R1, 152 */
		/* 82082078h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x98);
		/* 82082078h case    5:*/		return 0x8208207C;
		  /* 8208207Ch */ case    6:  		/* stw R10, <#[R1 + 132]> */
		/* 8208207Ch case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000084) );
		/* 8208207Ch case    6:*/		return 0x82082080;
	}
	return 0x82082080;
} // Block from 82082064h-82082080h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82082080h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082080);
		  /* 82082080h */ case    0:  		/* rlwinm R3, R30, 0, 26, 31 */
		/* 82082080h case    0:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R3,regs.R30);
		/* 82082080h case    0:*/		return 0x82082084;
		  /* 82082084h */ case    1:  		/* bl -117180 */
		/* 82082084h case    1:*/		regs.LR = 0x82082088; return 0x820656C8;
		/* 82082084h case    1:*/		return 0x82082088;
		  /* 82082088h */ case    2:  		/* lis R11, -32256 */
		/* 82082088h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82082088h case    2:*/		return 0x8208208C;
		  /* 8208208Ch */ case    3:  		/* rlwinm R9, R30, 1, 25, 30 */
		/* 8208208Ch case    3:*/		cpu::op::rlwinm<0,1,25,30>(regs,&regs.R9,regs.R30);
		/* 8208208Ch case    3:*/		return 0x82082090;
		  /* 82082090h */ case    4:  		/* lwz R8, <#[R15 + 28]> */
		/* 82082090h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R15 + 0x0000001C) );
		/* 82082090h case    4:*/		return 0x82082094;
		  /* 82082094h */ case    5:  		/* addi R11, R11, 2992 */
		/* 82082094h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xBB0);
		/* 82082094h case    5:*/		return 0x82082098;
		  /* 82082098h */ case    6:  		/* lwz R20, <#[R1 + 468]> */
		/* 82082098h case    6:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x000001D4) );
		/* 82082098h case    6:*/		return 0x8208209C;
		  /* 8208209Ch */ case    7:  		/* rlwinm R10, R30, 0, 0, 19 */
		/* 8208209Ch case    7:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R10,regs.R30);
		/* 8208209Ch case    7:*/		return 0x820820A0;
		  /* 820820A0h */ case    8:  		/* addi R11, R11, 1 */
		/* 820820A0h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820820A0h case    8:*/		return 0x820820A4;
		  /* 820820A4h */ case    9:  		/* rlwinm R8, R8, 15, 18, 26 */
		/* 820820A4h case    9:*/		cpu::op::rlwinm<0,15,18,26>(regs,&regs.R8,regs.R8);
		/* 820820A4h case    9:*/		return 0x820820A8;
		  /* 820820A8h */ case   10:  		/* stw R10, <#[R1 + 140]> */
		/* 820820A8h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000008C) );
		/* 820820A8h case   10:*/		return 0x820820AC;
		  /* 820820ACh */ case   11:  		/* addi R27, R15, 28 */
		/* 820820ACh case   11:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R15,0x1C);
		/* 820820ACh case   11:*/		return 0x820820B0;
		  /* 820820B0h */ case   12:  		/* cmplwi CR6, R26, 0 */
		/* 820820B0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 820820B0h case   12:*/		return 0x820820B4;
		  /* 820820B4h */ case   13:  		/* lbzx R9, <#[R9 + R11]> */
		/* 820820B4h case   13:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 820820B4h case   13:*/		return 0x820820B8;
		  /* 820820B8h */ case   14:  		/* lwz R11, <#[R1 + 152]> */
		/* 820820B8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000098) );
		/* 820820B8h case   14:*/		return 0x820820BC;
		  /* 820820BCh */ case   15:  		/* lwz R30, <#[R1 + 156]> */
		/* 820820BCh case   15:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x0000009C) );
		/* 820820BCh case   15:*/		return 0x820820C0;
		  /* 820820C0h */ case   16:  		/* mullw R9, R9, R11 */
		/* 820820C0h case   16:*/		cpu::op::mullw<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 820820C0h case   16:*/		return 0x820820C4;
		  /* 820820C4h */ case   17:  		/* mullw R9, R9, R30 */
		/* 820820C4h case   17:*/		cpu::op::mullw<0>(regs,&regs.R9,regs.R9,regs.R30);
		/* 820820C4h case   17:*/		return 0x820820C8;
		  /* 820820C8h */ case   18:  		/* rlwinm R28, R9, 29, 3, 31 */
		/* 820820C8h case   18:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R28,regs.R9);
		/* 820820C8h case   18:*/		return 0x820820CC;
		  /* 820820CCh */ case   19:  		/* divwu R19, R8, R11 */
		/* 820820CCh case   19:*/		cpu::op::divwu<0>(regs,&regs.R19,regs.R8,regs.R11);
		/* 820820CCh case   19:*/		return 0x820820D0;
		  /* 820820D0h */ case   20:  		/* twi 6, R11, 0 */
		/* 820820D0h case   20:*/		cpu::op::tw<6>(regs, 0x820820D0, regs.R11, 0x00000000);
		/* 820820D0h case   20:*/		return 0x820820D4;
		  /* 820820D4h */ case   21:  		/* stw R28, <#[R1 + 152]> */
		/* 820820D4h case   21:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000098) );
		/* 820820D4h case   21:*/		return 0x820820D8;
		  /* 820820D8h */ case   22:  		/* bc 4, CR6_EQ, 12 */
		/* 820820D8h case   22:*/		if ( !regs.CR[6].eq ) { return 0x820820E4;  }
		/* 820820D8h case   22:*/		return 0x820820DC;
		  /* 820820DCh */ case   23:  		/* cmplwi CR6, R20, 0 */
		/* 820820DCh case   23:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 820820DCh case   23:*/		return 0x820820E0;
		  /* 820820E0h */ case   24:  		/* bc 12, CR6_EQ, 88 */
		/* 820820E0h case   24:*/		if ( regs.CR[6].eq ) { return 0x82082138;  }
		/* 820820E0h case   24:*/		return 0x820820E4;
	}
	return 0x820820E4;
} // Block from 82082080h-820820E4h (25 instructions)

//////////////////////////////////////////////////////
// Block at 820820E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820820E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820820E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820820E4);
		  /* 820820E4h */ case    0:  		/* addi R10, R1, 140 */
		/* 820820E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x8C);
		/* 820820E4h case    0:*/		return 0x820820E8;
		  /* 820820E8h */ case    1:  		/* addi R9, R1, 160 */
		/* 820820E8h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xA0);
		/* 820820E8h case    1:*/		return 0x820820EC;
		  /* 820820ECh */ case    2:  		/* addi R8, R1, 128 */
		/* 820820ECh case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 820820ECh case    2:*/		return 0x820820F0;
		  /* 820820F0h */ case    3:  		/* stw R10, <#[R1 + 100]> */
		/* 820820F0h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 820820F0h case    3:*/		return 0x820820F4;
		  /* 820820F4h */ case    4:  		/* addi R11, R22, -1 */
		/* 820820F4h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R22,0xFFFFFFFF);
		/* 820820F4h case    4:*/		return 0x820820F8;
		  /* 820820F8h */ case    5:  		/* stw R9, <#[R1 + 92]> */
		/* 820820F8h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000005C) );
		/* 820820F8h case    5:*/		return 0x820820FC;
		  /* 820820FCh */ case    6:  		/* stw R8, <#[R1 + 84]> */
		/* 820820FCh case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000054) );
		/* 820820FCh case    6:*/		return 0x82082100;
		  /* 82082100h */ case    7:  		/* addi R10, R1, 132 */
		/* 82082100h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x84);
		/* 82082100h case    7:*/		return 0x82082104;
		  /* 82082104h */ case    8:  		/* addi R9, R1, 168 */
		/* 82082104h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xA8);
		/* 82082104h case    8:*/		return 0x82082108;
		  /* 82082108h */ case    9:  		/* addi R8, R1, 176 */
		/* 82082108h case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xB0);
		/* 82082108h case    9:*/		return 0x8208210C;
		  /* 8208210Ch */ case   10:  		/* addi R7, R1, 192 */
		/* 8208210Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xC0);
		/* 8208210Ch case   10:*/		return 0x82082110;
		  /* 82082110h */ case   11:  		/* addi R6, R1, 156 */
		/* 82082110h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x9C);
		/* 82082110h case   11:*/		return 0x82082114;
		  /* 82082114h */ case   12:  		/* mr R5, R26 */
		/* 82082114h case   12:*/		regs.R5 = regs.R26;
		/* 82082114h case   12:*/		return 0x82082118;
		  /* 82082118h */ case   13:  		/* andc R4, R20, R11 */
		/* 82082118h case   13:*/		cpu::op::andc<0>(regs,&regs.R4,regs.R20,regs.R11);
		/* 82082118h case   13:*/		return 0x8208211C;
		  /* 8208211Ch */ case   14:  		/* mr R3, R15 */
		/* 8208211Ch case   14:*/		regs.R3 = regs.R15;
		/* 8208211Ch case   14:*/		return 0x82082120;
		  /* 82082120h */ case   15:  		/* bl -114288 */
		/* 82082120h case   15:*/		regs.LR = 0x82082124; return 0x820662B0;
		/* 82082120h case   15:*/		return 0x82082124;
		  /* 82082124h */ case   16:  		/* lwz R11, <#[R1 + 156]> */
		/* 82082124h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000009C) );
		/* 82082124h case   16:*/		return 0x82082128;
		  /* 82082128h */ case   17:  		/* lwz R10, <#[R1 + 140]> */
		/* 82082128h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000008C) );
		/* 82082128h case   17:*/		return 0x8208212C;
		  /* 8208212Ch */ case   18:  		/* twi 6, R28, 0 */
		/* 8208212Ch case   18:*/		cpu::op::tw<6>(regs, 0x8208212C, regs.R28, 0x00000000);
		/* 8208212Ch case   18:*/		return 0x82082130;
		  /* 82082130h */ case   19:  		/* divwu R19, R11, R28 */
		/* 82082130h case   19:*/		cpu::op::divwu<0>(regs,&regs.R19,regs.R11,regs.R28);
		/* 82082130h case   19:*/		return 0x82082134;
		  /* 82082134h */ case   20:  		/* lwz R24, <#[R1 + 128]> */
		/* 82082134h case   20:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000080) );
		/* 82082134h case   20:*/		return 0x82082138;
	}
	return 0x82082138;
} // Block from 820820E4h-82082138h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82082138h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082138( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082138) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082138);
		  /* 82082138h */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 82082138h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 82082138h case    0:*/		return 0x8208213C;
		  /* 8208213Ch */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 8208213Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82082158;  }
		/* 8208213Ch case    1:*/		return 0x82082140;
		  /* 82082140h */ case    2:  		/* lwz R11, <#[R1 + 132]> */
		/* 82082140h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 82082140h case    2:*/		return 0x82082144;
		  /* 82082144h */ case    3:  		/* addi R23, R1, 192 */
		/* 82082144h case    3:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R1,0xC0);
		/* 82082144h case    3:*/		return 0x82082148;
		  /* 82082148h */ case    4:  		/* stw R24, <#[R1 + 204]> */
		/* 82082148h case    4:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x000000CC) );
		/* 82082148h case    4:*/		return 0x8208214C;
		  /* 8208214Ch */ case    5:  		/* stw R25, <#[R1 + 192]> */
		/* 8208214Ch case    5:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000C0) );
		/* 8208214Ch case    5:*/		return 0x82082150;
		  /* 82082150h */ case    6:  		/* stw R25, <#[R1 + 196]> */
		/* 82082150h case    6:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x000000C4) );
		/* 82082150h case    6:*/		return 0x82082154;
		  /* 82082154h */ case    7:  		/* stw R11, <#[R1 + 200]> */
		/* 82082154h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000C8) );
		/* 82082154h case    7:*/		return 0x82082158;
	}
	return 0x82082158;
} // Block from 82082138h-82082158h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82082158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082158);
		  /* 82082158h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82082158h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82082158h case    0:*/		return 0x8208215C;
		  /* 8208215Ch */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 8208215Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82082168;  }
		/* 8208215Ch case    1:*/		return 0x82082160;
		  /* 82082160h */ case    2:  		/* lis R11, -32256 */
		/* 82082160h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82082160h case    2:*/		return 0x82082164;
		  /* 82082164h */ case    3:  		/* addi R29, R11, 17096 */
		/* 82082164h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x42C8);
		/* 82082164h case    3:*/		return 0x82082168;
	}
	return 0x82082168;
} // Block from 82082158h-82082168h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82082168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082168);
		  /* 82082168h */ case    0:  		/* rlwinm R11, R10, 12, 20, 31 */
		/* 82082168h case    0:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R11,regs.R10);
		/* 82082168h case    0:*/		return 0x8208216C;
		  /* 8208216Ch */ case    1:  		/* lwz R9, <#[R29 + 4]> */
		/* 8208216Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000004) );
		/* 8208216Ch case    1:*/		return 0x82082170;
		  /* 82082170h */ case    2:  		/* lwz R8, <#[R29]> */
		/* 82082170h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000000) );
		/* 82082170h case    2:*/		return 0x82082174;
		  /* 82082174h */ case    3:  		/* twi 6, R30, 0 */
		/* 82082174h case    3:*/		cpu::op::tw<6>(regs, 0x82082174, regs.R30, 0x00000000);
		/* 82082174h case    3:*/		return 0x82082178;
		  /* 82082178h */ case    4:  		/* addi R7, R11, 512 */
		/* 82082178h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x200);
		/* 82082178h case    4:*/		return 0x8208217C;
		  /* 8208217Ch */ case    5:  		/* lwz R11, <#[R23 + 4]> */
		/* 8208217Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 8208217Ch case    5:*/		return 0x82082180;
		  /* 82082180h */ case    6:  		/* lwz R6, <#[R23]> */
		/* 82082180h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R23 + 0x00000000) );
		/* 82082180h case    6:*/		return 0x82082184;
		  /* 82082184h */ case    7:  		/* subf R5, R9, R24 */
		/* 82082184h case    7:*/		cpu::op::subf<0>(regs,&regs.R5,regs.R9,regs.R24);
		/* 82082184h case    7:*/		return 0x82082188;
		  /* 82082188h */ case    8:  		/* subf R9, R11, R9 */
		/* 82082188h case    8:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 82082188h case    8:*/		return 0x8208218C;
		  /* 8208218Ch */ case    9:  		/* lwz R4, <#[R15 + 40]> */
		/* 8208218Ch case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R15 + 0x00000028) );
		/* 8208218Ch case    9:*/		return 0x82082190;
		  /* 82082190h */ case   10:  		/* subf R6, R6, R8 */
		/* 82082190h case   10:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R6,regs.R8);
		/* 82082190h case   10:*/		return 0x82082194;
		  /* 82082194h */ case   11:  		/* lwz R29, <#[R15 + 32]> */
		/* 82082194h case   11:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R15 + 0x00000020) );
		/* 82082194h case   11:*/		return 0x82082198;
		  /* 82082198h */ case   12:  		/* mullw R8, R9, R19 */
		/* 82082198h case   12:*/		cpu::op::mullw<0>(regs,&regs.R8,regs.R9,regs.R19);
		/* 82082198h case   12:*/		return 0x8208219C;
		  /* 8208219Ch */ case   13:  		/* lwz R3, <#[R27]> */
		/* 8208219Ch case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000000) );
		/* 8208219Ch case   13:*/		return 0x820821A0;
		  /* 820821A0h */ case   14:  		/* rlwinm R9, R6, 5, 0, 26 */
		/* 820821A0h case   14:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R6);
		/* 820821A0h case   14:*/		return 0x820821A4;
		  /* 820821A4h */ case   15:  		/* rlwinm R7, R7, 0, 19, 19 */
		/* 820821A4h case   15:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R7,regs.R7);
		/* 820821A4h case   15:*/		return 0x820821A8;
		  /* 820821A8h */ case   16:  		/* add R8, R8, R9 */
		/* 820821A8h case   16:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R9);
		/* 820821A8h case   16:*/		return 0x820821AC;
		  /* 820821ACh */ case   17:  		/* rlwinm R9, R10, 0, 3, 31 */
		/* 820821ACh case   17:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R9,regs.R10);
		/* 820821ACh case   17:*/		return 0x820821B0;
		  /* 820821B0h */ case   18:  		/* mullw R10, R8, R28 */
		/* 820821B0h case   18:*/		cpu::op::mullw<0>(regs,&regs.R10,regs.R8,regs.R28);
		/* 820821B0h case   18:*/		return 0x820821B4;
		  /* 820821B4h */ case   19:  		/* rlwinm R6, R4, 0, 28, 30 */
		/* 820821B4h case   19:*/		cpu::op::rlwinm<0,0,28,30>(regs,&regs.R6,regs.R4);
		/* 820821B4h case   19:*/		return 0x820821B8;
		  /* 820821B8h */ case   20:  		/* divwu R8, R5, R30 */
		/* 820821B8h case   20:*/		cpu::op::divwu<0>(regs,&regs.R8,regs.R5,regs.R30);
		/* 820821B8h case   20:*/		return 0x820821BC;
		  /* 820821BCh */ case   21:  		/* add R10, R10, R7 */
		/* 820821BCh case   21:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 820821BCh case   21:*/		return 0x820821C0;
		  /* 820821C0h */ case   22:  		/* rlwinm R30, R29, 0, 26, 31 */
		/* 820821C0h case   22:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R30,regs.R29);
		/* 820821C0h case   22:*/		return 0x820821C4;
		  /* 820821C4h */ case   23:  		/* addic R7, R6, -1 */
		/* 820821C4h case   23:*/		cpu::op::addic<0>(regs,&regs.R7,regs.R6,0xFFFFFFFF);
		/* 820821C4h case   23:*/		return 0x820821C8;
		  /* 820821C8h */ case   24:  		/* add R26, R8, R11 */
		/* 820821C8h case   24:*/		cpu::op::add<0>(regs,&regs.R26,regs.R8,regs.R11);
		/* 820821C8h case   24:*/		return 0x820821CC;
		  /* 820821CCh */ case   25:  		/* add R18, R10, R9 */
		/* 820821CCh case   25:*/		cpu::op::add<0>(regs,&regs.R18,regs.R10,regs.R9);
		/* 820821CCh case   25:*/		return 0x820821D0;
		  /* 820821D0h */ case   26:  		/* rlwinm R27, R21, 6, 26, 31 */
		/* 820821D0h case   26:*/		cpu::op::rlwinm<0,6,26,31>(regs,&regs.R27,regs.R21);
		/* 820821D0h case   26:*/		return 0x820821D4;
		  /* 820821D4h */ case   27:  		/* rlwinm R11, R4, 0, 31, 31 */
		/* 820821D4h case   27:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R4);
		/* 820821D4h case   27:*/		return 0x820821D8;
		  /* 820821D8h */ case   28:  		/* rlwinm R14, R3, 30, 30, 31 */
		/* 820821D8h case   28:*/		cpu::op::rlwinm<0,30,30,31>(regs,&regs.R14,regs.R3);
		/* 820821D8h case   28:*/		return 0x820821DC;
		  /* 820821DCh */ case   29:  		/* subfe R25, R7, R6 */
		/* 820821DCh case   29:*/		cpu::op::subfe<0>(regs,&regs.R25,regs.R7,regs.R6);
		/* 820821DCh case   29:*/		return 0x820821E0;
		  /* 820821E0h */ case   30:  		/* cmplwi CR6, R30, 54 */
		/* 820821E0h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000036);
		/* 820821E0h case   30:*/		return 0x820821E4;
		  /* 820821E4h */ case   31:  		/* bc 4, CR6_EQ, 12 */
		/* 820821E4h case   31:*/		if ( !regs.CR[6].eq ) { return 0x820821F0;  }
		/* 820821E4h case   31:*/		return 0x820821E8;
		  /* 820821E8h */ case   32:  		/* li R30, 7 */
		/* 820821E8h case   32:*/		cpu::op::li<0>(regs,&regs.R30,0x7);
		/* 820821E8h case   32:*/		return 0x820821EC;
		  /* 820821ECh */ case   33:  		/* b 112 */
		/* 820821ECh case   33:*/		return 0x8208225C;
		/* 820821ECh case   33:*/		return 0x820821F0;
	}
	return 0x820821F0;
} // Block from 82082168h-820821F0h (34 instructions)

//////////////////////////////////////////////////////
// Block at 820821F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820821F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820821F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820821F0);
		  /* 820821F0h */ case    0:  		/* cmplwi CR6, R30, 55 */
		/* 820821F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000037);
		/* 820821F0h case    0:*/		return 0x820821F4;
		  /* 820821F4h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 820821F4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82082200;  }
		/* 820821F4h case    1:*/		return 0x820821F8;
		  /* 820821F8h */ case    2:  		/* li R30, 16 */
		/* 820821F8h case    2:*/		cpu::op::li<0>(regs,&regs.R30,0x10);
		/* 820821F8h case    2:*/		return 0x820821FC;
		  /* 820821FCh */ case    3:  		/* b 96 */
		/* 820821FCh case    3:*/		return 0x8208225C;
		/* 820821FCh case    3:*/		return 0x82082200;
	}
	return 0x82082200;
} // Block from 820821F0h-82082200h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82082200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082200);
		  /* 82082200h */ case    0:  		/* cmplwi CR6, R30, 56 */
		/* 82082200h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000038);
		/* 82082200h case    0:*/		return 0x82082204;
		  /* 82082204h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82082204h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82082210;  }
		/* 82082204h case    1:*/		return 0x82082208;
		  /* 82082208h */ case    2:  		/* li R30, 17 */
		/* 82082208h case    2:*/		cpu::op::li<0>(regs,&regs.R30,0x11);
		/* 82082208h case    2:*/		return 0x8208220C;
		  /* 8208220Ch */ case    3:  		/* b 80 */
		/* 8208220Ch case    3:*/		return 0x8208225C;
		/* 8208220Ch case    3:*/		return 0x82082210;
	}
	return 0x82082210;
} // Block from 82082200h-82082210h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82082210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082210);
		  /* 82082210h */ case    0:  		/* cmplwi CR6, R30, 27 */
		/* 82082210h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x0000001B);
		/* 82082210h case    0:*/		return 0x82082214;
		  /* 82082214h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82082214h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82082220;  }
		/* 82082214h case    1:*/		return 0x82082218;
		  /* 82082218h */ case    2:  		/* li R30, 30 */
		/* 82082218h case    2:*/		cpu::op::li<0>(regs,&regs.R30,0x1E);
		/* 82082218h case    2:*/		return 0x8208221C;
		  /* 8208221Ch */ case    3:  		/* b 64 */
		/* 8208221Ch case    3:*/		return 0x8208225C;
		/* 8208221Ch case    3:*/		return 0x82082220;
	}
	return 0x82082220;
} // Block from 82082210h-82082220h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82082220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082220);
		  /* 82082220h */ case    0:  		/* cmplwi CR6, R30, 28 */
		/* 82082220h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x0000001C);
		/* 82082220h case    0:*/		return 0x82082224;
		  /* 82082224h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82082224h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82082230;  }
		/* 82082224h case    1:*/		return 0x82082228;
		  /* 82082228h */ case    2:  		/* li R30, 31 */
		/* 82082228h case    2:*/		cpu::op::li<0>(regs,&regs.R30,0x1F);
		/* 82082228h case    2:*/		return 0x8208222C;
		  /* 8208222Ch */ case    3:  		/* b 48 */
		/* 8208222Ch case    3:*/		return 0x8208225C;
		/* 8208222Ch case    3:*/		return 0x82082230;
	}
	return 0x82082230;
} // Block from 82082220h-82082230h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82082230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082230);
		  /* 82082230h */ case    0:  		/* cmplwi CR6, R30, 29 */
		/* 82082230h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x0000001D);
		/* 82082230h case    0:*/		return 0x82082234;
		  /* 82082234h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82082234h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82082240;  }
		/* 82082234h case    1:*/		return 0x82082238;
		  /* 82082238h */ case    2:  		/* li R30, 32 */
		/* 82082238h case    2:*/		cpu::op::li<0>(regs,&regs.R30,0x20);
		/* 82082238h case    2:*/		return 0x8208223C;
		  /* 8208223Ch */ case    3:  		/* b 32 */
		/* 8208223Ch case    3:*/		return 0x8208225C;
		/* 8208223Ch case    3:*/		return 0x82082240;
	}
	return 0x82082240;
} // Block from 82082230h-82082240h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82082240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082240);
		  /* 82082240h */ case    0:  		/* cmplwi CR6, R30, 22 */
		/* 82082240h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000016);
		/* 82082240h case    0:*/		return 0x82082244;
		  /* 82082244h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 82082244h case    1:*/		if ( regs.CR[6].eq ) { return 0x82082258;  }
		/* 82082244h case    1:*/		return 0x82082248;
		  /* 82082248h */ case    2:  		/* cmplwi CR6, R30, 23 */
		/* 82082248h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000017);
		/* 82082248h case    2:*/		return 0x8208224C;
		  /* 8208224Ch */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 8208224Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82082258;  }
		/* 8208224Ch case    3:*/		return 0x82082250;
		  /* 82082250h */ case    4:  		/* cmplwi CR6, R30, 50 */
		/* 82082250h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000032);
		/* 82082250h case    4:*/		return 0x82082254;
		  /* 82082254h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 82082254h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8208225C;  }
		/* 82082254h case    5:*/		return 0x82082258;
	}
	return 0x82082258;
} // Block from 82082240h-82082258h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82082258h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082258( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082258) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082258);
		  /* 82082258h */ case    0:  		/* li R30, 6 */
		/* 82082258h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x6);
		/* 82082258h case    0:*/		return 0x8208225C;
	}
	return 0x8208225C;
} // Block from 82082258h-8208225Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8208225Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208225C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208225C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208225C);
		  /* 8208225Ch */ case    0:  		/* cmplwi CR6, R11, 1 */
		/* 8208225Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8208225Ch case    0:*/		return 0x82082260;
		  /* 82082260h */ case    1:  		/* addi R11, R14, -1 */
		/* 82082260h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R14,0xFFFFFFFF);
		/* 82082260h case    1:*/		return 0x82082264;
		  /* 82082264h */ case    2:  		/* cntlzw R11, R11 */
		/* 82082264h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82082264h case    2:*/		return 0x82082268;
		  /* 82082268h */ case    3:  		/* bc 4, CR6_EQ, 16 */
		/* 82082268h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82082278;  }
		/* 82082268h case    3:*/		return 0x8208226C;
		  /* 8208226Ch */ case    4:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 8208226Ch case    4:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 8208226Ch case    4:*/		return 0x82082270;
		  /* 82082270h */ case    5:  		/* addi R28, R11, 2 */
		/* 82082270h case    5:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x2);
		/* 82082270h case    5:*/		return 0x82082274;
		  /* 82082274h */ case    6:  		/* b 8 */
		/* 82082274h case    6:*/		return 0x8208227C;
		/* 82082274h case    6:*/		return 0x82082278;
	}
	return 0x82082278;
} // Block from 8208225Ch-82082278h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82082278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082278);
		  /* 82082278h */ case    0:  		/* rlwinm R28, R11, 27, 31, 31 */
		/* 82082278h case    0:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R28,regs.R11);
		/* 82082278h case    0:*/		return 0x8208227C;
	}
	return 0x8208227C;
} // Block from 82082278h-8208227Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8208227Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208227C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208227C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208227C);
		  /* 8208227Ch */ case    0:  		/* mr R3, R30 */
		/* 8208227Ch case    0:*/		regs.R3 = regs.R30;
		/* 8208227Ch case    0:*/		return 0x82082280;
		  /* 82082280h */ case    1:  		/* bl -3456 */
		/* 82082280h case    1:*/		regs.LR = 0x82082284; return 0x82081500;
		/* 82082280h case    1:*/		return 0x82082284;
		  /* 82082284h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 82082284h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82082284h case    2:*/		return 0x82082288;
		  /* 82082288h */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 82082288h case    3:*/		if ( regs.CR[0].eq ) { return 0x82082290;  }
		/* 82082288h case    3:*/		return 0x8208228C;
		  /* 8208228Ch */ case    4:  		/* li R28, 7 */
		/* 8208228Ch case    4:*/		cpu::op::li<0>(regs,&regs.R28,0x7);
		/* 8208228Ch case    4:*/		return 0x82082290;
	}
	return 0x82082290;
} // Block from 8208227Ch-82082290h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82082290h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082290);
		  /* 82082290h */ case    0:  		/* rlwimi R27, R25, 8, 23, 23 */
		/* 82082290h case    0:*/		cpu::op::rlwimi<0,8,23,23>(regs,&regs.R27,regs.R25);
		/* 82082290h case    0:*/		return 0x82082294;
		  /* 82082294h */ case    1:  		/* lwz R11, <#[R15 + 48]> */
		/* 82082294h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000030) );
		/* 82082294h case    1:*/		return 0x82082298;
		  /* 82082298h */ case    2:  		/* mr R10, R30 */
		/* 82082298h case    2:*/		regs.R10 = regs.R30;
		/* 82082298h case    2:*/		return 0x8208229C;
		  /* 8208229Ch */ case    3:  		/* andi. R9, R27, 319 */
		/* 8208229Ch case    3:*/		cpu::op::andi<1>(regs,&regs.R9,regs.R27,0x13F);
		/* 8208229Ch case    3:*/		return 0x820822A0;
		  /* 820822A0h */ case    4:  		/* rlwimi R28, R9, 3, 0, 28 */
		/* 820822A0h case    4:*/		cpu::op::rlwimi<0,3,0,28>(regs,&regs.R28,regs.R9);
		/* 820822A0h case    4:*/		return 0x820822A4;
		  /* 820822A4h */ case    5:  		/* rlwinm R6, R11, 0, 21, 22 */
		/* 820822A4h case    5:*/		cpu::op::rlwinm<0,0,21,22>(regs,&regs.R6,regs.R11);
		/* 820822A4h case    5:*/		return 0x820822A8;
		  /* 820822A8h */ case    6:  		/* rlwimi R10, R28, 6, 0, 25 */
		/* 820822A8h case    6:*/		cpu::op::rlwimi<0,6,0,25>(regs,&regs.R10,regs.R28);
		/* 820822A8h case    6:*/		return 0x820822AC;
		  /* 820822ACh */ case    7:  		/* rlwinm R8, R26, 16, 2, 15 */
		/* 820822ACh case    7:*/		cpu::op::rlwinm<0,16,2,15>(regs,&regs.R8,regs.R26);
		/* 820822ACh case    7:*/		return 0x820822B0;
		  /* 820822B0h */ case    8:  		/* rlwinm R9, R19, 0, 18, 31 */
		/* 820822B0h case    8:*/		cpu::op::rlwinm<0,0,18,31>(regs,&regs.R9,regs.R19);
		/* 820822B0h case    8:*/		return 0x820822B4;
		  /* 820822B4h */ case    9:  		/* rlwinm R7, R29, 26, 30, 31 */
		/* 820822B4h case    9:*/		cpu::op::rlwinm<0,26,30,31>(regs,&regs.R7,regs.R29);
		/* 820822B4h case    9:*/		return 0x820822B8;
		  /* 820822B8h */ case   10:  		/* rlwinm R10, R10, 7, 0, 24 */
		/* 820822B8h case   10:*/		cpu::op::rlwinm<0,7,0,24>(regs,&regs.R10,regs.R10);
		/* 820822B8h case   10:*/		return 0x820822BC;
		  /* 820822BCh */ case   11:  		/* or R8, R8, R9 */
		/* 820822BCh case   11:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R9);
		/* 820822BCh case   11:*/		return 0x820822C0;
		  /* 820822C0h */ case   12:  		/* or R11, R10, R7 */
		/* 820822C0h case   12:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R7);
		/* 820822C0h case   12:*/		return 0x820822C4;
		  /* 820822C4h */ case   13:  		/* cmplwi CR6, R6, 1024 */
		/* 820822C4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000400);
		/* 820822C4h case   13:*/		return 0x820822C8;
		  /* 820822C8h */ case   14:  		/* bc 4, CR6_EQ, 44 */
		/* 820822C8h case   14:*/		if ( !regs.CR[6].eq ) { return 0x820822F4;  }
		/* 820822C8h case   14:*/		return 0x820822CC;
		  /* 820822CCh */ case   15:  		/* addi R10, R22, -1 */
		/* 820822CCh case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R22,0xFFFFFFFF);
		/* 820822CCh case   15:*/		return 0x820822D0;
		  /* 820822D0h */ case   16:  		/* mullw R9, R19, R24 */
		/* 820822D0h case   16:*/		cpu::op::mullw<0>(regs,&regs.R9,regs.R19,regs.R24);
		/* 820822D0h case   16:*/		return 0x820822D4;
		  /* 820822D4h */ case   17:  		/* stw R9, <#[R31 + 10820]> */
		/* 820822D4h case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00002A44) );
		/* 820822D4h case   17:*/		return 0x820822D8;
		  /* 820822D8h */ case   18:  		/* ld R9, <#[R31 + 32]> */
		/* 820822D8h case   18:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 820822D8h case   18:*/		return 0x820822DC;
		  /* 820822DCh */ case   19:  		/* and R10, R10, R20 */
		/* 820822DCh case   19:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R20);
		/* 820822DCh case   19:*/		return 0x820822E0;
		  /* 820822E0h */ case   20:  		/* ori R9, R9, 4 */
		/* 820822E0h case   20:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820822E0h case   20:*/		return 0x820822E4;
		  /* 820822E4h */ case   21:  		/* rlwinm R10, R10, 4, 25, 27 */
		/* 820822E4h case   21:*/		cpu::op::rlwinm<0,4,25,27>(regs,&regs.R10,regs.R10);
		/* 820822E4h case   21:*/		return 0x820822E8;
		  /* 820822E8h */ case   22:  		/* std R9, <#[R31 + 32]> */
		/* 820822E8h case   22:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 820822E8h case   22:*/		return 0x820822EC;
		  /* 820822ECh */ case   23:  		/* or R11, R10, R11 */
		/* 820822ECh case   23:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 820822ECh case   23:*/		return 0x820822F0;
		  /* 820822F0h */ case   24:  		/* ori R11, R11, 8 */
		/* 820822F0h case   24:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x8);
		/* 820822F0h case   24:*/		return 0x820822F4;
	}
	return 0x820822F4;
} // Block from 82082290h-820822F4h (25 instructions)

//////////////////////////////////////////////////////
// Block at 820822F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820822F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820822F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820822F4);
		  /* 820822F4h */ case    0:  		/* rlwinm. R10, R21, 0, 18, 18 */
		/* 820822F4h case    0:*/		cpu::op::rlwinm<1,0,18,18>(regs,&regs.R10,regs.R21);
		/* 820822F4h case    0:*/		return 0x820822F8;
		  /* 820822F8h */ case    1:  		/* li R9, 1 */
		/* 820822F8h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 820822F8h case    1:*/		return 0x820822FC;
		  /* 820822FCh */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 820822FCh case    2:*/		if ( regs.CR[0].eq ) { return 0x82082308;  }
		/* 820822FCh case    2:*/		return 0x82082300;
		  /* 82082300h */ case    3:  		/* li R9, 3 */
		/* 82082300h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 82082300h case    3:*/		return 0x82082304;
		  /* 82082304h */ case    4:  		/* b 36 */
		/* 82082304h case    4:*/		return 0x82082328;
		/* 82082304h case    4:*/		return 0x82082308;
	}
	return 0x82082308;
} // Block from 820822F4h-82082308h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82082308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082308);
		  /* 82082308h */ case    0:  		/* lwz R10, <#[R1 + 148]> */
		/* 82082308h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000094) );
		/* 82082308h case    0:*/		return 0x8208230C;
		  /* 8208230Ch */ case    1:  		/* cmplwi CR6, R10, 4 */
		/* 8208230Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 8208230Ch case    1:*/		return 0x82082310;
		  /* 82082310h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 82082310h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8208231C;  }
		/* 82082310h case    2:*/		return 0x82082314;
		  /* 82082314h */ case    3:  		/* li R9, 0 */
		/* 82082314h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82082314h case    3:*/		return 0x82082318;
		  /* 82082318h */ case    4:  		/* b 16 */
		/* 82082318h case    4:*/		return 0x82082328;
		/* 82082318h case    4:*/		return 0x8208231C;
	}
	return 0x8208231C;
} // Block from 82082308h-8208231Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8208231Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208231C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208231C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208231C);
		  /* 8208231Ch */ case    0:  		/* cmplwi CR6, R30, 61 */
		/* 8208231Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x0000003D);
		/* 8208231Ch case    0:*/		return 0x82082320;
		  /* 82082320h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 82082320h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82082328;  }
		/* 82082320h case    1:*/		return 0x82082324;
		  /* 82082324h */ case    2:  		/* li R9, 2 */
		/* 82082324h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 82082324h case    2:*/		return 0x82082328;
	}
	return 0x82082328;
} // Block from 8208231Ch-82082328h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82082328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082328);
		  /* 82082328h */ case    0:  		/* stw R11, <#[R31 + 10788]> */
		/* 82082328h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00002A24) );
		/* 82082328h case    0:*/		return 0x8208232C;
		  /* 8208232Ch */ case    1:  		/* andi. R10, R21, 887 */
		/* 8208232Ch case    1:*/		cpu::op::andi<1>(regs,&regs.R10,regs.R21,0x377);
		/* 8208232Ch case    1:*/		return 0x82082330;
		  /* 82082330h */ case    2:  		/* rlwinm R9, R9, 20, 10, 11 */
		/* 82082330h case    2:*/		cpu::op::rlwinm<0,20,10,11>(regs,&regs.R9,regs.R9);
		/* 82082330h case    2:*/		return 0x82082334;
		  /* 82082334h */ case    3:  		/* stw R18, <#[R31 + 10780]> */
		/* 82082334h case    3:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R31 + 0x00002A1C) );
		/* 82082334h case    3:*/		return 0x82082338;
	}
	return 0x82082338;
} // Block from 82082328h-82082338h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82082338h
// Function '?GetCounter@D3D@@YAMPAVCDevice@1@W4_D3DCOUNTER@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082338);
		  /* 82082338h */ case    0:  		/* addi R10, R10, -16 */
		/* 82082338h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFF0);
		/* 82082338h case    0:*/		return 0x8208233C;
		  /* 8208233Ch */ case    1:  		/* stw R8, <#[R31 + 10784]> */
		/* 8208233Ch case    1:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00002A20) );
		/* 8208233Ch case    1:*/		return 0x82082340;
		  /* 82082340h */ case    2:  		/* lwz R29, <#[R1 + 500]> */
		/* 82082340h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000001F4) );
		/* 82082340h case    2:*/		return 0x82082344;
		  /* 82082344h */ case    3:  		/* li R20, -1 */
		/* 82082344h case    3:*/		cpu::op::li<0>(regs,&regs.R20,0xFFFFFFFF);
		/* 82082344h case    3:*/		return 0x82082348;
		  /* 82082348h */ case    4:  		/* or R28, R9, R10 */
		/* 82082348h case    4:*/		cpu::op::or<0>(regs,&regs.R28,regs.R9,regs.R10);
		/* 82082348h case    4:*/		return 0x8208234C;
		  /* 8208234Ch */ case    5:  		/* cmplwi CR6, R30, 61 */
		/* 8208234Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x0000003D);
		/* 8208234Ch case    5:*/		return 0x82082350;
		  /* 82082350h */ case    6:  		/* stw R28, <#[R31 + 10776]> */
		/* 82082350h case    6:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00002A18) );
		/* 82082350h case    6:*/		return 0x82082354;
		  /* 82082354h */ case    7:  		/* ld R11, <#[R31 + 32]> */
		/* 82082354h case    7:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82082354h case    7:*/		return 0x82082358;
		  /* 82082358h */ case    8:  		/* ori R11, R11, 15360 */
		/* 82082358h case    8:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x3C00);
		/* 82082358h case    8:*/		return 0x8208235C;
		  /* 8208235Ch */ case    9:  		/* std R11, <#[R31 + 32]> */
		/* 8208235Ch case    9:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 8208235Ch case    9:*/		return 0x82082360;
		  /* 82082360h */ case   10:  		/* bc 4, CR6_EQ, 200 */
		/* 82082360h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82082428;  }
		/* 82082360h case   10:*/		return 0x82082364;
		  /* 82082364h */ case   11:  		/* cmplwi CR6, R29, 0 */
		/* 82082364h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82082364h case   11:*/		return 0x82082368;
		  /* 82082368h */ case   12:  		/* bc 12, CR6_EQ, 136 */
		/* 82082368h case   12:*/		if ( regs.CR[6].eq ) { return 0x820823F0;  }
		/* 82082368h case   12:*/		return 0x8208236C;
		  /* 8208236Ch */ case   13:  		/* lwz R9, <#[R29 + 24]> */
		/* 8208236Ch case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000018) );
		/* 8208236Ch case   13:*/		return 0x82082370;
		  /* 82082370h */ case   14:  		/* lwz R8, <#[R29 + 20]> */
		/* 82082370h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000014) );
		/* 82082370h case   14:*/		return 0x82082374;
		  /* 82082374h */ case   15:  		/* lbz R11, <#[R29 + 28]> */
		/* 82082374h case   15:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 82082374h case   15:*/		return 0x82082378;
		  /* 82082378h */ case   16:  		/* lbz R10, <#[R29 + 32]> */
		/* 82082378h case   16:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000020) );
		/* 82082378h case   16:*/		return 0x8208237C;
		  /* 8208237Ch */ case   17:  		/* rlwimi R8, R9, 4, 25, 27 */
		/* 8208237Ch case   17:*/		cpu::op::rlwimi<0,4,25,27>(regs,&regs.R8,regs.R9);
		/* 8208237Ch case   17:*/		return 0x82082380;
		  /* 82082380h */ case   18:  		/* lbz R7, <#[R29 + 31]> */
		/* 82082380h case   18:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R29 + 0x0000001F) );
		/* 82082380h case   18:*/		return 0x82082384;
		  /* 82082384h */ case   19:  		/* rlwinm R11, R11, 8, 0, 31 */
		/* 82082384h case   19:*/		cpu::op::rlwinm<0,8,0,31>(regs,&regs.R11,regs.R11);
		/* 82082384h case   19:*/		return 0x82082388;
		  /* 82082388h */ case   20:  		/* lbz R6, <#[R29 + 35]> */
		/* 82082388h case   20:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R29 + 0x00000023) );
		/* 82082388h case   20:*/		return 0x8208238C;
		  /* 8208238Ch */ case   21:  		/* rlwinm R10, R10, 8, 0, 31 */
		/* 8208238Ch case   21:*/		cpu::op::rlwinm<0,8,0,31>(regs,&regs.R10,regs.R10);
		/* 8208238Ch case   21:*/		return 0x82082390;
		  /* 82082390h */ case   22:  		/* lwz R9, <#[R29 + 16]> */
		/* 82082390h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000010) );
		/* 82082390h case   22:*/		return 0x82082394;
		  /* 82082394h */ case   23:  		/* rlwinm R8, R8, 4, 21, 27 */
		/* 82082394h case   23:*/		cpu::op::rlwinm<0,4,21,27>(regs,&regs.R8,regs.R8);
		/* 82082394h case   23:*/		return 0x82082398;
		  /* 82082398h */ case   24:  		/* or R11, R11, R7 */
		/* 82082398h case   24:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 82082398h case   24:*/		return 0x8208239C;
		  /* 8208239Ch */ case   25:  		/* lbz R7, <#[R29 + 30]> */
		/* 8208239Ch case   25:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R29 + 0x0000001E) );
		/* 8208239Ch case   25:*/		return 0x820823A0;
		  /* 820823A0h */ case   26:  		/* or R10, R10, R6 */
		/* 820823A0h case   26:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R6);
		/* 820823A0h case   26:*/		return 0x820823A4;
		  /* 820823A4h */ case   27:  		/* lbz R6, <#[R29 + 34]> */
		/* 820823A4h case   27:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R29 + 0x00000022) );
		/* 820823A4h case   27:*/		return 0x820823A8;
		  /* 820823A8h */ case   28:  		/* rlwinm R9, R9, 0, 29, 31 */
		/* 820823A8h case   28:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R9,regs.R9);
		/* 820823A8h case   28:*/		return 0x820823AC;
		  /* 820823ACh */ case   29:  		/* lwz R5, <#[R29 + 12]> */
		/* 820823ACh case   29:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 820823ACh case   29:*/		return 0x820823B0;
		  /* 820823B0h */ case   30:  		/* rlwinm R8, R8, 0, 25, 23 */
		/* 820823B0h case   30:*/		cpu::op::rlwinm<0,0,25,23>(regs,&regs.R8,regs.R8);
		/* 820823B0h case   30:*/		return 0x820823B4;
		  /* 820823B4h */ case   31:  		/* lbz R4, <#[R29 + 29]> */
		/* 820823B4h case   31:*/		cpu::mem::load8z( regs, &regs.R4, (uint32)(regs.R29 + 0x0000001D) );
		/* 820823B4h case   31:*/		return 0x820823B8;
		  /* 820823B8h */ case   32:  		/* rlwinm R11, R11, 8, 0, 23 */
		/* 820823B8h case   32:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R11,regs.R11);
		/* 820823B8h case   32:*/		return 0x820823BC;
		  /* 820823BCh */ case   33:  		/* lbz R3, <#[R29 + 33]> */
		/* 820823BCh case   33:*/		cpu::mem::load8z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000021) );
		/* 820823BCh case   33:*/		return 0x820823C0;
		  /* 820823C0h */ case   34:  		/* rlwinm R10, R10, 8, 0, 23 */
		/* 820823C0h case   34:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R10,regs.R10);
		/* 820823C0h case   34:*/		return 0x820823C4;
		  /* 820823C4h */ case   35:  		/* or R9, R8, R9 */
		/* 820823C4h case   35:*/		cpu::op::or<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 820823C4h case   35:*/		return 0x820823C8;
		  /* 820823C8h */ case   36:  		/* or R11, R11, R7 */
		/* 820823C8h case   36:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 820823C8h case   36:*/		return 0x820823CC;
		  /* 820823CCh */ case   37:  		/* or R10, R10, R6 */
		/* 820823CCh case   37:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R6);
		/* 820823CCh case   37:*/		return 0x820823D0;
		  /* 820823D0h */ case   38:  		/* rlwinm R9, R9, 4, 0, 27 */
		/* 820823D0h case   38:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R9,regs.R9);
		/* 820823D0h case   38:*/		return 0x820823D4;
		  /* 820823D4h */ case   39:  		/* rlwinm R8, R5, 0, 29, 31 */
		/* 820823D4h case   39:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R8,regs.R5);
		/* 820823D4h case   39:*/		return 0x820823D8;
		  /* 820823D8h */ case   40:  		/* rlwinm R7, R11, 8, 0, 23 */
		/* 820823D8h case   40:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R7,regs.R11);
		/* 820823D8h case   40:*/		return 0x820823DC;
		  /* 820823DCh */ case   41:  		/* rlwinm R6, R10, 8, 0, 23 */
		/* 820823DCh case   41:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R6,regs.R10);
		/* 820823DCh case   41:*/		return 0x820823E0;
		  /* 820823E0h */ case   42:  		/* or R11, R9, R8 */
		/* 820823E0h case   42:*/		cpu::op::or<0>(regs,&regs.R11,regs.R9,regs.R8);
		/* 820823E0h case   42:*/		return 0x820823E4;
		  /* 820823E4h */ case   43:  		/* or R10, R7, R4 */
		/* 820823E4h case   43:*/		cpu::op::or<0>(regs,&regs.R10,regs.R7,regs.R4);
		/* 820823E4h case   43:*/		return 0x820823E8;
		  /* 820823E8h */ case   44:  		/* or R9, R6, R3 */
		/* 820823E8h case   44:*/		cpu::op::or<0>(regs,&regs.R9,regs.R6,regs.R3);
		/* 820823E8h case   44:*/		return 0x820823EC;
		  /* 820823ECh */ case   45:  		/* b 20 */
		/* 820823ECh case   45:*/		return 0x82082400;
		/* 820823ECh case   45:*/		return 0x820823F0;
	}
	return 0x820823F0;
} // Block from 82082338h-820823F0h (46 instructions)

//////////////////////////////////////////////////////
// Block at 820823F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820823F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820823F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820823F0);
		  /* 820823F0h */ case    0:  		/* lis R10, -32640 */
		/* 820823F0h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8080);
		/* 820823F0h case    0:*/		return 0x820823F4;
		  /* 820823F4h */ case    1:  		/* li R11, 4369 */
		/* 820823F4h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1111);
		/* 820823F4h case    1:*/		return 0x820823F8;
		  /* 820823F8h */ case    2:  		/* ori R10, R10, 32896 */
		/* 820823F8h case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x8080);
		/* 820823F8h case    2:*/		return 0x820823FC;
		  /* 820823FCh */ case    3:  		/* mr R9, R20 */
		/* 820823FCh case    3:*/		regs.R9 = regs.R20;
		/* 820823FCh case    3:*/		return 0x82082400;
	}
	return 0x82082400;
} // Block from 820823F0h-82082400h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82082400h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082400);
		  /* 82082400h */ case    0:  		/* stw R11, <#[R31 + 10808]> */
		/* 82082400h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00002A38) );
		/* 82082400h case    0:*/		return 0x82082404;
		  /* 82082404h */ case    1:  		/* stw R10, <#[R31 + 10812]> */
		/* 82082404h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00002A3C) );
		/* 82082404h case    1:*/		return 0x82082408;
		  /* 82082408h */ case    2:  		/* stw R9, <#[R31 + 10816]> */
		/* 82082408h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00002A40) );
		/* 82082408h case    2:*/		return 0x8208240C;
		  /* 8208240Ch */ case    3:  		/* ld R11, <#[R31 + 32]> */
		/* 8208240Ch case    3:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 8208240Ch case    3:*/		return 0x82082410;
		  /* 82082410h */ case    4:  		/* ori R11, R11, 60 */
		/* 82082410h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x3C);
		/* 82082410h case    4:*/		return 0x82082414;
		  /* 82082414h */ case    5:  		/* std R11, <#[R31 + 32]> */
		/* 82082414h case    5:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82082414h case    5:*/		return 0x82082418;
		  /* 82082418h */ case    6:  		/* ori R11, R11, 30 */
		/* 82082418h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1E);
		/* 82082418h case    6:*/		return 0x8208241C;
		  /* 8208241Ch */ case    7:  		/* std R11, <#[R31 + 32]> */
		/* 8208241Ch case    7:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 8208241Ch case    7:*/		return 0x82082420;
		  /* 82082420h */ case    8:  		/* ori R11, R11, 15 */
		/* 82082420h case    8:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xF);
		/* 82082420h case    8:*/		return 0x82082424;
		  /* 82082424h */ case    9:  		/* std R11, <#[R31 + 32]> */
		/* 82082424h case    9:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82082424h case    9:*/		return 0x82082428;
	}
	return 0x82082428;
} // Block from 82082400h-82082428h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82082428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082428);
		  /* 82082428h */ case    0:  		/* rlwinm. R26, R21, 0, 22, 22 */
		/* 82082428h case    0:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R26,regs.R21);
		/* 82082428h case    0:*/		return 0x8208242C;
		  /* 8208242Ch */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 8208242Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82082444;  }
		/* 8208242Ch case    1:*/		return 0x82082430;
		  /* 82082430h */ case    2:  		/* mr R4, R29 */
		/* 82082430h case    2:*/		regs.R4 = regs.R29;
		/* 82082430h case    2:*/		return 0x82082434;
		  /* 82082434h */ case    3:  		/* lwz R6, <#[R1 + 492]> */
		/* 82082434h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000001EC) );
		/* 82082434h case    3:*/		return 0x82082438;
		  /* 82082438h */ case    4:  		/* mr R3, R31 */
		/* 82082438h case    4:*/		regs.R3 = regs.R31;
		/* 82082438h case    4:*/		return 0x8208243C;
		  /* 8208243Ch */ case    5:  		/* fmr FR1, FR31 */
		/* 8208243Ch case    5:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8208243Ch case    5:*/		return 0x82082440;
		  /* 82082440h */ case    6:  		/* bl -3552 */
		/* 82082440h case    6:*/		regs.LR = 0x82082444; return 0x82081660;
		/* 82082440h case    6:*/		return 0x82082444;
	}
	return 0x82082444;
} // Block from 82082428h-82082444h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82082444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082444);
		  /* 82082444h */ case    0:  		/* rlwinm. R11, R21, 0, 23, 23 */
		/* 82082444h case    0:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R21);
		/* 82082444h case    0:*/		return 0x82082448;
		  /* 82082448h */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 82082448h case    1:*/		if ( regs.CR[0].eq ) { return 0x82082460;  }
		/* 82082448h case    1:*/		return 0x8208244C;
		  /* 8208244Ch */ case    2:  		/* rlwinm R5, R28, 0, 29, 31 */
		/* 8208244Ch case    2:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R5,regs.R28);
		/* 8208244Ch case    2:*/		return 0x82082450;
		  /* 82082450h */ case    3:  		/* lvx VR1, <#[R17]> */
		/* 82082450h case    3:*/		cpu::mem::lvx( regs, &regs.VR1, (uint32)(regs.R17 + 0x00000000) );
		/* 82082450h case    3:*/		return 0x82082454;
		  /* 82082454h */ case    4:  		/* mr R4, R29 */
		/* 82082454h case    4:*/		regs.R4 = regs.R29;
		/* 82082454h case    4:*/		return 0x82082458;
		  /* 82082458h */ case    5:  		/* mr R3, R31 */
		/* 82082458h case    5:*/		regs.R3 = regs.R31;
		/* 82082458h case    5:*/		return 0x8208245C;
		  /* 8208245Ch */ case    6:  		/* bl -2148 */
		/* 8208245Ch case    6:*/		regs.LR = 0x82082460; return 0x82081BF8;
		/* 8208245Ch case    6:*/		return 0x82082460;
	}
	return 0x82082460;
} // Block from 82082444h-82082460h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82082460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082460);
		  /* 82082460h */ case    0:  		/* lwz R11, <#[R23 + 8]> */
		/* 82082460h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 82082460h case    0:*/		return 0x82082464;
		  /* 82082464h */ case    1:  		/* li R22, 0 */
		/* 82082464h case    1:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 82082464h case    1:*/		return 0x82082468;
		  /* 82082468h */ case    2:  		/* lwz R10, <#[R23 + 12]> */
		/* 82082468h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x0000000C) );
		/* 82082468h case    2:*/		return 0x8208246C;
		  /* 8208246Ch */ case    3:  		/* addi R9, R11, 7 */
		/* 8208246Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x7);
		/* 8208246Ch case    3:*/		return 0x82082470;
		  /* 82082470h */ case    4:  		/* lwz R11, <#[R31 + 10436]> */
		/* 82082470h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000028C4) );
		/* 82082470h case    4:*/		return 0x82082474;
		  /* 82082474h */ case    5:  		/* lwz R27, <#[R23]> */
		/* 82082474h case    5:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R23 + 0x00000000) );
		/* 82082474h case    5:*/		return 0x82082478;
		  /* 82082478h */ case    6:  		/* addi R10, R10, 7 */
		/* 82082478h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x7);
		/* 82082478h case    6:*/		return 0x8208247C;
		  /* 8208247Ch */ case    7:  		/* rlwinm R8, R11, 17, 0, 14 */
		/* 8208247Ch case    7:*/		cpu::op::rlwinm<0,17,0,14>(regs,&regs.R8,regs.R11);
		/* 8208247Ch case    7:*/		return 0x82082480;
		  /* 82082480h */ case    8:  		/* lwz R25, <#[R23 + 4]> */
		/* 82082480h case    8:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R23 + 0x00000004) );
		/* 82082480h case    8:*/		return 0x82082484;
		  /* 82082484h */ case    9:  		/* rlwinm R24, R9, 0, 0, 28 */
		/* 82082484h case    9:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R24,regs.R9);
		/* 82082484h case    9:*/		return 0x82082488;
		  /* 82082488h */ case   10:  		/* srawi R9, R8, 17 */
		/* 82082488h case   10:*/		cpu::op::srawi<0,17>(regs,&regs.R9,regs.R8);
		/* 82082488h case   10:*/		return 0x8208248C;
		  /* 8208248Ch */ case   11:  		/* rlwinm R23, R10, 0, 0, 28 */
		/* 8208248Ch case   11:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R23,regs.R10);
		/* 8208248Ch case   11:*/		return 0x82082490;
		  /* 82082490h */ case   12:  		/* cmpw CR6, R27, R9 */
		/* 82082490h case   12:*/		cpu::op::cmpw<6>(regs,regs.R27,regs.R9);
		/* 82082490h case   12:*/		return 0x82082494;
		  /* 82082494h */ case   13:  		/* bc 12, CR6_LT, 56 */
		/* 82082494h case   13:*/		if ( regs.CR[6].lt ) { return 0x820824CC;  }
		/* 82082494h case   13:*/		return 0x82082498;
		  /* 82082498h */ case   14:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 82082498h case   14:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 82082498h case   14:*/		return 0x8208249C;
		  /* 8208249Ch */ case   15:  		/* srawi R11, R11, 17 */
		/* 8208249Ch case   15:*/		cpu::op::srawi<0,17>(regs,&regs.R11,regs.R11);
		/* 8208249Ch case   15:*/		return 0x820824A0;
		  /* 820824A0h */ case   16:  		/* cmpw CR6, R25, R11 */
		/* 820824A0h case   16:*/		cpu::op::cmpw<6>(regs,regs.R25,regs.R11);
		/* 820824A0h case   16:*/		return 0x820824A4;
		  /* 820824A4h */ case   17:  		/* bc 12, CR6_LT, 40 */
		/* 820824A4h case   17:*/		if ( regs.CR[6].lt ) { return 0x820824CC;  }
		/* 820824A4h case   17:*/		return 0x820824A8;
		  /* 820824A8h */ case   18:  		/* lwz R11, <#[R31 + 10440]> */
		/* 820824A8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000028C8) );
		/* 820824A8h case   18:*/		return 0x820824AC;
		  /* 820824ACh */ case   19:  		/* rlwinm R10, R11, 17, 0, 14 */
		/* 820824ACh case   19:*/		cpu::op::rlwinm<0,17,0,14>(regs,&regs.R10,regs.R11);
		/* 820824ACh case   19:*/		return 0x820824B0;
		  /* 820824B0h */ case   20:  		/* srawi R10, R10, 17 */
		/* 820824B0h case   20:*/		cpu::op::srawi<0,17>(regs,&regs.R10,regs.R10);
		/* 820824B0h case   20:*/		return 0x820824B4;
		  /* 820824B4h */ case   21:  		/* cmpw CR6, R24, R10 */
		/* 820824B4h case   21:*/		cpu::op::cmpw<6>(regs,regs.R24,regs.R10);
		/* 820824B4h case   21:*/		return 0x820824B8;
		  /* 820824B8h */ case   22:  		/* bc 12, CR6_GT, 20 */
		/* 820824B8h case   22:*/		if ( regs.CR[6].gt ) { return 0x820824CC;  }
		/* 820824B8h case   22:*/		return 0x820824BC;
		  /* 820824BCh */ case   23:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 820824BCh case   23:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 820824BCh case   23:*/		return 0x820824C0;
		  /* 820824C0h */ case   24:  		/* srawi R11, R11, 17 */
		/* 820824C0h case   24:*/		cpu::op::srawi<0,17>(regs,&regs.R11,regs.R11);
		/* 820824C0h case   24:*/		return 0x820824C4;
		  /* 820824C4h */ case   25:  		/* cmpw CR6, R23, R11 */
		/* 820824C4h case   25:*/		cpu::op::cmpw<6>(regs,regs.R23,regs.R11);
		/* 820824C4h case   25:*/		return 0x820824C8;
		  /* 820824C8h */ case   26:  		/* bc 4, CR6_GT, 32 */
		/* 820824C8h case   26:*/		if ( !regs.CR[6].gt ) { return 0x820824E8;  }
		/* 820824C8h case   26:*/		return 0x820824CC;
	}
	return 0x820824CC;
} // Block from 82082460h-820824CCh (27 instructions)

//////////////////////////////////////////////////////
// Block at 820824CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820824CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820824CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820824CC);
		  /* 820824CCh */ case    0:  		/* mr R7, R23 */
		/* 820824CCh case    0:*/		regs.R7 = regs.R23;
		/* 820824CCh case    0:*/		return 0x820824D0;
		  /* 820824D0h */ case    1:  		/* mr R6, R24 */
		/* 820824D0h case    1:*/		regs.R6 = regs.R24;
		/* 820824D0h case    1:*/		return 0x820824D4;
		  /* 820824D4h */ case    2:  		/* mr R5, R25 */
		/* 820824D4h case    2:*/		regs.R5 = regs.R25;
		/* 820824D4h case    2:*/		return 0x820824D8;
		  /* 820824D8h */ case    3:  		/* mr R4, R27 */
		/* 820824D8h case    3:*/		regs.R4 = regs.R27;
		/* 820824D8h case    3:*/		return 0x820824DC;
		  /* 820824DCh */ case    4:  		/* mr R3, R31 */
		/* 820824DCh case    4:*/		regs.R3 = regs.R31;
		/* 820824DCh case    4:*/		return 0x820824E0;
		  /* 820824E0h */ case    5:  		/* bl -132408 */
		/* 820824E0h case    5:*/		regs.LR = 0x820824E4; return 0x82061FA8;
		/* 820824E0h case    5:*/		return 0x820824E4;
		  /* 820824E4h */ case    6:  		/* li R22, 1 */
		/* 820824E4h case    6:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 820824E4h case    6:*/		return 0x820824E8;
	}
	return 0x820824E8;
} // Block from 820824CCh-820824E8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820824E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820824E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820824E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820824E8);
		  /* 820824E8h */ case    0:  		/* lwz R11, <#[R1 + 436]> */
		/* 820824E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001B4) );
		/* 820824E8h case    0:*/		return 0x820824EC;
		  /* 820824ECh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 820824ECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820824ECh case    1:*/		return 0x820824F0;
		  /* 820824F0h */ case    2:  		/* bc 4, CR6_EQ, 432 */
		/* 820824F0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820826A0;  }
		/* 820824F0h case    2:*/		return 0x820824F4;
		  /* 820824F4h */ case    3:  		/* ld R4, <#[R31 + 16]> */
		/* 820824F4h case    3:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 820824F4h case    3:*/		return 0x820824F8;
		  /* 820824F8h */ case    4:  		/* cmpldi CR6, R4, 0 */
		/* 820824F8h case    4:*/		cpu::op::cmpldi<6>(regs,regs.R4,0x00000000);
		/* 820824F8h case    4:*/		return 0x820824FC;
		  /* 820824FCh */ case    5:  		/* bc 12, CR6_EQ, 280 */
		/* 820824FCh case    5:*/		if ( regs.CR[6].eq ) { return 0x82082614;  }
		/* 820824FCh case    5:*/		return 0x82082500;
		  /* 82082500h */ case    6:  		/* ld R11, <#[R31 + 40]> */
		/* 82082500h case    6:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82082500h case    6:*/		return 0x82082504;
		  /* 82082504h */ case    7:  		/* and R11, R11, R4 */
		/* 82082504h case    7:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 82082504h case    7:*/		return 0x82082508;
		  /* 82082508h */ case    8:  		/* cmpldi CR6, R11, 0 */
		/* 82082508h case    8:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82082508h case    8:*/		return 0x8208250C;
		  /* 8208250Ch */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 8208250Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x82082520;  }
		/* 8208250Ch case    9:*/		return 0x82082510;
		  /* 82082510h */ case   10:  		/* mr R3, R31 */
		/* 82082510h case   10:*/		regs.R3 = regs.R31;
		/* 82082510h case   10:*/		return 0x82082514;
		  /* 82082514h */ case   11:  		/* lwz R5, <#[R31 + 10560]> */
		/* 82082514h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00002940) );
		/* 82082514h case   11:*/		return 0x82082518;
		  /* 82082518h */ case   12:  		/* bl 3696 */
		/* 82082518h case   12:*/		regs.LR = 0x8208251C; return 0x82083388;
		/* 82082518h case   12:*/		return 0x8208251C;
		  /* 8208251Ch */ case   13:  		/* std R3, <#[R31 + 16]> */
		/* 8208251Ch case   13:*/		cpu::mem::store64( regs, regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 8208251Ch case   13:*/		return 0x82082520;
	}
	return 0x82082520;
} // Block from 820824E8h-82082520h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82082520h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082520);
		  /* 82082520h */ case    0:  		/* ld R11, <#[R31 + 16]> */
		/* 82082520h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082520h case    0:*/		return 0x82082524;
		  /* 82082524h */ case    1:  		/* rldicl R10, R11, 0, 52 */
		/* 82082524h case    1:*/		cpu::op::rldicl<0,0,52>(regs,&regs.R10,regs.R11);
		/* 82082524h case    1:*/		return 0x82082528;
		  /* 82082528h */ case    2:  		/* cmpldi CR6, R10, 0 */
		/* 82082528h case    2:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 82082528h case    2:*/		return 0x8208252C;
		  /* 8208252Ch */ case    3:  		/* bc 12, CR6_EQ, 36 */
		/* 8208252Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82082550;  }
		/* 8208252Ch case    3:*/		return 0x82082530;
		  /* 82082530h */ case    4:  		/* addi R6, R31, 10548 */
		/* 82082530h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x2934);
		/* 82082530h case    4:*/		return 0x82082534;
		  /* 82082534h */ case    5:  		/* li R5, 8704 */
		/* 82082534h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x2200);
		/* 82082534h case    5:*/		return 0x82082538;
		  /* 82082538h */ case    6:  		/* rldicr R4, R11, 52, 11 */
		/* 82082538h case    6:*/		cpu::op::rldicr<0,52,11>(regs,&regs.R4,regs.R11);
		/* 82082538h case    6:*/		return 0x8208253C;
		  /* 8208253Ch */ case    7:  		/* mr R3, R31 */
		/* 8208253Ch case    7:*/		regs.R3 = regs.R31;
		/* 8208253Ch case    7:*/		return 0x82082540;
		  /* 82082540h */ case    8:  		/* bl 4568 */
		/* 82082540h case    8:*/		regs.LR = 0x82082544; return 0x82083718;
		/* 82082540h case    8:*/		return 0x82082544;
		  /* 82082544h */ case    9:  		/* ld R11, <#[R31 + 16]> */
		/* 82082544h case    9:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082544h case    9:*/		return 0x82082548;
		  /* 82082548h */ case   10:  		/* rldicr R11, R11, 0, 51 */
		/* 82082548h case   10:*/		cpu::op::rldicr<0,0,51>(regs,&regs.R11,regs.R11);
		/* 82082548h case   10:*/		return 0x8208254C;
		  /* 8208254Ch */ case   11:  		/* std R11, <#[R31 + 16]> */
		/* 8208254Ch case   11:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8208254Ch case   11:*/		return 0x82082550;
	}
	return 0x82082550;
} // Block from 82082520h-82082550h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82082550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082550);
		  /* 82082550h */ case    0:  		/* ld R11, <#[R31 + 16]> */
		/* 82082550h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082550h case    0:*/		return 0x82082554;
		  /* 82082554h */ case    1:  		/* rlwinm R10, R11, 0, 15, 19 */
		/* 82082554h case    1:*/		cpu::op::rlwinm<0,0,15,19>(regs,&regs.R10,regs.R11);
		/* 82082554h case    1:*/		return 0x82082558;
		  /* 82082558h */ case    2:  		/* cmpldi CR6, R10, 0 */
		/* 82082558h case    2:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 82082558h case    2:*/		return 0x8208255C;
		  /* 8208255Ch */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 8208255Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82082588;  }
		/* 8208255Ch case    3:*/		return 0x82082560;
		  /* 82082560h */ case    4:  		/* addi R6, R31, 10528 */
		/* 82082560h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x2920);
		/* 82082560h case    4:*/		return 0x82082564;
		  /* 82082564h */ case    5:  		/* li R5, 8576 */
		/* 82082564h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x2180);
		/* 82082564h case    5:*/		return 0x82082568;
		  /* 82082568h */ case    6:  		/* rldicr R4, R11, 47, 4 */
		/* 82082568h case    6:*/		cpu::op::rldicr<0,47,4>(regs,&regs.R4,regs.R11);
		/* 82082568h case    6:*/		return 0x8208256C;
		  /* 8208256Ch */ case    7:  		/* mr R3, R31 */
		/* 8208256Ch case    7:*/		regs.R3 = regs.R31;
		/* 8208256Ch case    7:*/		return 0x82082570;
		  /* 82082570h */ case    8:  		/* bl 4520 */
		/* 82082570h case    8:*/		regs.LR = 0x82082574; return 0x82083718;
		/* 82082570h case    8:*/		return 0x82082574;
		  /* 82082574h */ case    9:  		/* lis R12, -2 */
		/* 82082574h case    9:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFFFE);
		/* 82082574h case    9:*/		return 0x82082578;
		  /* 82082578h */ case   10:  		/* ld R11, <#[R31 + 16]> */
		/* 82082578h case   10:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082578h case   10:*/		return 0x8208257C;
		  /* 8208257Ch */ case   11:  		/* ori R12, R12, 4095 */
		/* 8208257Ch case   11:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xFFF);
		/* 8208257Ch case   11:*/		return 0x82082580;
		  /* 82082580h */ case   12:  		/* and R11, R11, R12 */
		/* 82082580h case   12:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 82082580h case   12:*/		return 0x82082584;
		  /* 82082584h */ case   13:  		/* std R11, <#[R31 + 16]> */
		/* 82082584h case   13:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082584h case   13:*/		return 0x82082588;
	}
	return 0x82082588;
} // Block from 82082550h-82082588h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82082588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082588);
		  /* 82082588h */ case    0:  		/* lis R12, 0 */
		/* 82082588h case    0:*/		cpu::op::lis<0>(regs,&regs.R12,0x0);
		/* 82082588h case    0:*/		return 0x8208258C;
		  /* 8208258Ch */ case    1:  		/* ld R11, <#[R31 + 16]> */
		/* 8208258Ch case    1:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8208258Ch case    1:*/		return 0x82082590;
		  /* 82082590h */ case    2:  		/* ori R12, R12, 65535 */
		/* 82082590h case    2:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xFFFF);
		/* 82082590h case    2:*/		return 0x82082594;
		  /* 82082594h */ case    3:  		/* rldicr R12, R12, 42, 21 */
		/* 82082594h case    3:*/		cpu::op::rldicr<0,42,21>(regs,&regs.R12,regs.R12);
		/* 82082594h case    3:*/		return 0x82082598;
		  /* 82082598h */ case    4:  		/* and R10, R11, R12 */
		/* 82082598h case    4:*/		cpu::op::and<0>(regs,&regs.R10,regs.R11,regs.R12);
		/* 82082598h case    4:*/		return 0x8208259C;
		  /* 8208259Ch */ case    5:  		/* cmpldi CR6, R10, 0 */
		/* 8208259Ch case    5:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 8208259Ch case    5:*/		return 0x820825A0;
		  /* 820825A0h */ case    6:  		/* bc 12, CR6_EQ, 48 */
		/* 820825A0h case    6:*/		if ( regs.CR[6].eq ) { return 0x820825D0;  }
		/* 820825A0h case    6:*/		return 0x820825A4;
		  /* 820825A4h */ case    7:  		/* addi R6, R31, 10368 */
		/* 820825A4h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x2880);
		/* 820825A4h case    7:*/		return 0x820825A8;
		  /* 820825A8h */ case    8:  		/* li R5, 8192 */
		/* 820825A8h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x2000);
		/* 820825A8h case    8:*/		return 0x820825AC;
		  /* 820825ACh */ case    9:  		/* rldicr R4, R11, 6, 15 */
		/* 820825ACh case    9:*/		cpu::op::rldicr<0,6,15>(regs,&regs.R4,regs.R11);
		/* 820825ACh case    9:*/		return 0x820825B0;
		  /* 820825B0h */ case   10:  		/* mr R3, R31 */
		/* 820825B0h case   10:*/		regs.R3 = regs.R31;
		/* 820825B0h case   10:*/		return 0x820825B4;
		  /* 820825B4h */ case   11:  		/* bl 4452 */
		/* 820825B4h case   11:*/		regs.LR = 0x820825B8; return 0x82083718;
		/* 820825B4h case   11:*/		return 0x820825B8;
		  /* 820825B8h */ case   12:  		/* lis R12, -1 */
		/* 820825B8h case   12:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFFFF);
		/* 820825B8h case   12:*/		return 0x820825BC;
		  /* 820825BCh */ case   13:  		/* ld R11, <#[R31 + 16]> */
		/* 820825BCh case   13:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820825BCh case   13:*/		return 0x820825C0;
		  /* 820825C0h */ case   14:  		/* ori R12, R12, 0 */
		/* 820825C0h case   14:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0x0);
		/* 820825C0h case   14:*/		return 0x820825C4;
		  /* 820825C4h */ case   15:  		/* rldicr R12, R12, 42, 63 */
		/* 820825C4h case   15:*/		cpu::op::rldicr<0,42,63>(regs,&regs.R12,regs.R12);
		/* 820825C4h case   15:*/		return 0x820825C8;
		  /* 820825C8h */ case   16:  		/* and R11, R11, R12 */
		/* 820825C8h case   16:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 820825C8h case   16:*/		return 0x820825CC;
		  /* 820825CCh */ case   17:  		/* std R11, <#[R31 + 16]> */
		/* 820825CCh case   17:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820825CCh case   17:*/		return 0x820825D0;
	}
	return 0x820825D0;
} // Block from 82082588h-820825D0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820825D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820825D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820825D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820825D0);
		  /* 820825D0h */ case    0:  		/* lis R12, -32 */
		/* 820825D0h case    0:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFFE0);
		/* 820825D0h case    0:*/		return 0x820825D4;
		  /* 820825D4h */ case    1:  		/* ld R11, <#[R31 + 16]> */
		/* 820825D4h case    1:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820825D4h case    1:*/		return 0x820825D8;
		  /* 820825D8h */ case    2:  		/* rldicl R12, R12, 0, 22 */
		/* 820825D8h case    2:*/		cpu::op::rldicl<0,0,22>(regs,&regs.R12,regs.R12);
		/* 820825D8h case    2:*/		return 0x820825DC;
		  /* 820825DCh */ case    3:  		/* and R10, R11, R12 */
		/* 820825DCh case    3:*/		cpu::op::and<0>(regs,&regs.R10,regs.R11,regs.R12);
		/* 820825DCh case    3:*/		return 0x820825E0;
		  /* 820825E0h */ case    4:  		/* cmpldi CR6, R10, 0 */
		/* 820825E0h case    4:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 820825E0h case    4:*/		return 0x820825E4;
		  /* 820825E4h */ case    5:  		/* bc 12, CR6_EQ, 48 */
		/* 820825E4h case    5:*/		if ( regs.CR[6].eq ) { return 0x82082614;  }
		/* 820825E4h case    5:*/		return 0x820825E8;
		  /* 820825E8h */ case    6:  		/* addi R6, R31, 10444 */
		/* 820825E8h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x28CC);
		/* 820825E8h case    6:*/		return 0x820825EC;
		  /* 820825ECh */ case    7:  		/* li R5, 8448 */
		/* 820825ECh case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x2100);
		/* 820825ECh case    7:*/		return 0x820825F0;
		  /* 820825F0h */ case    8:  		/* rldicr R4, R11, 22, 20 */
		/* 820825F0h case    8:*/		cpu::op::rldicr<0,22,20>(regs,&regs.R4,regs.R11);
		/* 820825F0h case    8:*/		return 0x820825F4;
		  /* 820825F4h */ case    9:  		/* mr R3, R31 */
		/* 820825F4h case    9:*/		regs.R3 = regs.R31;
		/* 820825F4h case    9:*/		return 0x820825F8;
		  /* 820825F8h */ case   10:  		/* bl 4384 */
		/* 820825F8h case   10:*/		regs.LR = 0x820825FC; return 0x82083718;
		/* 820825F8h case   10:*/		return 0x820825FC;
		  /* 820825FCh */ case   11:  		/* lis R12, -32 */
		/* 820825FCh case   11:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFFE0);
		/* 820825FCh case   11:*/		return 0x82082600;
		  /* 82082600h */ case   12:  		/* ld R11, <#[R31 + 16]> */
		/* 82082600h case   12:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082600h case   12:*/		return 0x82082604;
		  /* 82082604h */ case   13:  		/* ori R12, R12, 0 */
		/* 82082604h case   13:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0x0);
		/* 82082604h case   13:*/		return 0x82082608;
		  /* 82082608h */ case   14:  		/* rldicr R12, R12, 21, 63 */
		/* 82082608h case   14:*/		cpu::op::rldicr<0,21,63>(regs,&regs.R12,regs.R12);
		/* 82082608h case   14:*/		return 0x8208260C;
		  /* 8208260Ch */ case   15:  		/* and R11, R11, R12 */
		/* 8208260Ch case   15:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 8208260Ch case   15:*/		return 0x82082610;
		  /* 82082610h */ case   16:  		/* std R11, <#[R31 + 16]> */
		/* 82082610h case   16:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082610h case   16:*/		return 0x82082614;
	}
	return 0x82082614;
} // Block from 820825D0h-82082614h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82082614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082614);
		  /* 82082614h */ case    0:  		/* ld R11, <#[R31 + 24]> */
		/* 82082614h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82082614h case    0:*/		return 0x82082618;
		  /* 82082618h */ case    1:  		/* cmpldi CR6, R11, 0 */
		/* 82082618h case    1:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82082618h case    1:*/		return 0x8208261C;
		  /* 8208261Ch */ case    2:  		/* bc 12, CR6_EQ, 72 */
		/* 8208261Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82082664;  }
		/* 8208261Ch case    2:*/		return 0x82082620;
		  /* 82082620h */ case    3:  		/* lis R12, 31 */
		/* 82082620h case    3:*/		cpu::op::lis<0>(regs,&regs.R12,0x1F);
		/* 82082620h case    3:*/		return 0x82082624;
		  /* 82082624h */ case    4:  		/* ori R12, R12, 65535 */
		/* 82082624h case    4:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xFFFF);
		/* 82082624h case    4:*/		return 0x82082628;
		  /* 82082628h */ case    5:  		/* rldicr R12, R12, 34, 29 */
		/* 82082628h case    5:*/		cpu::op::rldicr<0,34,29>(regs,&regs.R12,regs.R12);
		/* 82082628h case    5:*/		return 0x8208262C;
		  /* 8208262Ch */ case    6:  		/* and R10, R11, R12 */
		/* 8208262Ch case    6:*/		cpu::op::and<0>(regs,&regs.R10,regs.R11,regs.R12);
		/* 8208262Ch case    6:*/		return 0x82082630;
		  /* 82082630h */ case    7:  		/* cmpldi CR6, R10, 0 */
		/* 82082630h case    7:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 82082630h case    7:*/		return 0x82082634;
		  /* 82082634h */ case    8:  		/* bc 12, CR6_EQ, 48 */
		/* 82082634h case    8:*/		if ( regs.CR[6].eq ) { return 0x82082664;  }
		/* 82082634h case    8:*/		return 0x82082638;
		  /* 82082638h */ case    9:  		/* addi R6, R31, 10596 */
		/* 82082638h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x2964);
		/* 82082638h case    9:*/		return 0x8208263C;
		  /* 8208263Ch */ case   10:  		/* li R5, 8832 */
		/* 8208263Ch case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x2280);
		/* 8208263Ch case   10:*/		return 0x82082640;
		  /* 82082640h */ case   11:  		/* rldicr R4, R11, 9, 20 */
		/* 82082640h case   11:*/		cpu::op::rldicr<0,9,20>(regs,&regs.R4,regs.R11);
		/* 82082640h case   11:*/		return 0x82082644;
		  /* 82082644h */ case   12:  		/* mr R3, R31 */
		/* 82082644h case   12:*/		regs.R3 = regs.R31;
		/* 82082644h case   12:*/		return 0x82082648;
		  /* 82082648h */ case   13:  		/* bl 4304 */
		/* 82082648h case   13:*/		regs.LR = 0x8208264C; return 0x82083718;
		/* 82082648h case   13:*/		return 0x8208264C;
		  /* 8208264Ch */ case   14:  		/* lis R12, -32 */
		/* 8208264Ch case   14:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFFE0);
		/* 8208264Ch case   14:*/		return 0x82082650;
		  /* 82082650h */ case   15:  		/* ld R11, <#[R31 + 24]> */
		/* 82082650h case   15:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82082650h case   15:*/		return 0x82082654;
		  /* 82082654h */ case   16:  		/* ori R12, R12, 0 */
		/* 82082654h case   16:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0x0);
		/* 82082654h case   16:*/		return 0x82082658;
		  /* 82082658h */ case   17:  		/* rldicr R12, R12, 34, 63 */
		/* 82082658h case   17:*/		cpu::op::rldicr<0,34,63>(regs,&regs.R12,regs.R12);
		/* 82082658h case   17:*/		return 0x8208265C;
		  /* 8208265Ch */ case   18:  		/* and R11, R11, R12 */
		/* 8208265Ch case   18:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 8208265Ch case   18:*/		return 0x82082660;
		  /* 82082660h */ case   19:  		/* std R11, <#[R31 + 24]> */
		/* 82082660h case   19:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82082660h case   19:*/		return 0x82082664;
	}
	return 0x82082664;
} // Block from 82082614h-82082664h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82082664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082664);
		  /* 82082664h */ case    0:  		/* ld R11, <#[R31 + 32]> */
		/* 82082664h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82082664h case    0:*/		return 0x82082668;
		  /* 82082668h */ case    1:  		/* cmpldi CR6, R11, 0 */
		/* 82082668h case    1:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82082668h case    1:*/		return 0x8208266C;
		  /* 8208266Ch */ case    2:  		/* bc 12, CR6_EQ, 112 */
		/* 8208266Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x820826DC;  }
		/* 8208266Ch case    2:*/		return 0x82082670;
		  /* 82082670h */ case    3:  		/* rldicl R10, R11, 0, 26 */
		/* 82082670h case    3:*/		cpu::op::rldicl<0,0,26>(regs,&regs.R10,regs.R11);
		/* 82082670h case    3:*/		return 0x82082674;
		  /* 82082674h */ case    4:  		/* cmpldi CR6, R10, 0 */
		/* 82082674h case    4:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 82082674h case    4:*/		return 0x82082678;
		  /* 82082678h */ case    5:  		/* bc 12, CR6_EQ, 100 */
		/* 82082678h case    5:*/		if ( regs.CR[6].eq ) { return 0x820826DC;  }
		/* 82082678h case    5:*/		return 0x8208267C;
		  /* 8208267Ch */ case    6:  		/* addi R6, R31, 10680 */
		/* 8208267Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x29B8);
		/* 8208267Ch case    6:*/		return 0x82082680;
		  /* 82082680h */ case    7:  		/* li R5, 8960 */
		/* 82082680h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x2300);
		/* 82082680h case    7:*/		return 0x82082684;
		  /* 82082684h */ case    8:  		/* rldicr R4, R11, 26, 37 */
		/* 82082684h case    8:*/		cpu::op::rldicr<0,26,37>(regs,&regs.R4,regs.R11);
		/* 82082684h case    8:*/		return 0x82082688;
		  /* 82082688h */ case    9:  		/* mr R3, R31 */
		/* 82082688h case    9:*/		regs.R3 = regs.R31;
		/* 82082688h case    9:*/		return 0x8208268C;
		  /* 8208268Ch */ case   10:  		/* bl 4236 */
		/* 8208268Ch case   10:*/		regs.LR = 0x82082690; return 0x82083718;
		/* 8208268Ch case   10:*/		return 0x82082690;
		  /* 82082690h */ case   11:  		/* ld R11, <#[R31 + 32]> */
		/* 82082690h case   11:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82082690h case   11:*/		return 0x82082694;
		  /* 82082694h */ case   12:  		/* rldicr R11, R11, 0, 25 */
		/* 82082694h case   12:*/		cpu::op::rldicr<0,0,25>(regs,&regs.R11,regs.R11);
		/* 82082694h case   12:*/		return 0x82082698;
		  /* 82082698h */ case   13:  		/* std R11, <#[R31 + 32]> */
		/* 82082698h case   13:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82082698h case   13:*/		return 0x8208269C;
		  /* 8208269Ch */ case   14:  		/* b 64 */
		/* 8208269Ch case   14:*/		return 0x820826DC;
		/* 8208269Ch case   14:*/		return 0x820826A0;
	}
	return 0x820826A0;
} // Block from 82082664h-820826A0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820826A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820826A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820826A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820826A0);
		  /* 820826A0h */ case    0:  		/* li R4, 0 */
		/* 820826A0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820826A0h case    0:*/		return 0x820826A4;
		  /* 820826A4h */ case    1:  		/* mr R3, R31 */
		/* 820826A4h case    1:*/		regs.R3 = regs.R31;
		/* 820826A4h case    1:*/		return 0x820826A8;
		  /* 820826A8h */ case    2:  		/* bl -2520 */
		/* 820826A8h case    2:*/		regs.LR = 0x820826AC; return 0x82081CD0;
		/* 820826A8h case    2:*/		return 0x820826AC;
		  /* 820826ACh */ case    3:  		/* cmplwi CR6, R16, 0 */
		/* 820826ACh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 820826ACh case    3:*/		return 0x820826B0;
		  /* 820826B0h */ case    4:  		/* bc 12, CR6_EQ, 44 */
		/* 820826B0h case    4:*/		if ( regs.CR[6].eq ) { return 0x820826DC;  }
		/* 820826B0h case    4:*/		return 0x820826B4;
		  /* 820826B4h */ case    5:  		/* lwz R11, <#[R31 + 56]> */
		/* 820826B4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 820826B4h case    5:*/		return 0x820826B8;
		  /* 820826B8h */ case    6:  		/* lwz R3, <#[R31 + 48]> */
		/* 820826B8h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 820826B8h case    6:*/		return 0x820826BC;
		  /* 820826BCh */ case    7:  		/* cmplw CR6, R3, R11 */
		/* 820826BCh case    7:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 820826BCh case    7:*/		return 0x820826C0;
		  /* 820826C0h */ case    8:  		/* bc 4, CR6_GT, 12 */
		/* 820826C0h case    8:*/		if ( !regs.CR[6].gt ) { return 0x820826CC;  }
		/* 820826C0h case    8:*/		return 0x820826C4;
		  /* 820826C4h */ case    9:  		/* mr R3, R31 */
		/* 820826C4h case    9:*/		regs.R3 = regs.R31;
		/* 820826C4h case    9:*/		return 0x820826C8;
		  /* 820826C8h */ case   10:  		/* bl -58816 */
		/* 820826C8h case   10:*/		regs.LR = 0x820826CC; return 0x82074108;
		/* 820826C8h case   10:*/		return 0x820826CC;
	}
	return 0x820826CC;
} // Block from 820826A0h-820826CCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 820826CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820826CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820826CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820826CC);
		  /* 820826CCh */ case    0:  		/* li R11, 8450 */
		/* 820826CCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2102);
		/* 820826CCh case    0:*/		return 0x820826D0;
		  /* 820826D0h */ case    1:  		/* stwu R11, <#[R3 + 4]> */
		/* 820826D0h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820826D0h case    1:*/		return 0x820826D4;
		  /* 820826D4h */ case    2:  		/* stwu R16, <#[R3 + 4]> */
		/* 820826D4h case    2:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820826D4h case    2:*/		return 0x820826D8;
		  /* 820826D8h */ case    3:  		/* stw R3, <#[R31 + 48]> */
		/* 820826D8h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 820826D8h case    3:*/		return 0x820826DC;
	}
	return 0x820826DC;
} // Block from 820826CCh-820826DCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 820826DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820826DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820826DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820826DC);
		  /* 820826DCh */ case    0:  		/* lbz R11, <#[R31 + 11068]> */
		/* 820826DCh case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3C) );
		/* 820826DCh case    0:*/		return 0x820826E0;
		  /* 820826E0h */ case    1:  		/* rlwinm. R10, R11, 0, 27, 27 */
		/* 820826E0h case    1:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R11);
		/* 820826E0h case    1:*/		return 0x820826E4;
		  /* 820826E4h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 820826E4h case    2:*/		if ( regs.CR[0].eq ) { return 0x820826F0;  }
		/* 820826E4h case    2:*/		return 0x820826E8;
		  /* 820826E8h */ case    3:  		/* li R11, 1 */
		/* 820826E8h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 820826E8h case    3:*/		return 0x820826EC;
		  /* 820826ECh */ case    4:  		/* b 148 */
		/* 820826ECh case    4:*/		return 0x82082780;
		/* 820826ECh case    4:*/		return 0x820826F0;
	}
	return 0x820826F0;
} // Block from 820826DCh-820826F0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820826F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820826F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820826F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820826F0);
		  /* 820826F0h */ case    0:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 820826F0h case    0:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 820826F0h case    0:*/		return 0x820826F4;
		  /* 820826F4h */ case    1:  		/* bc 12, CR0_EQ, 132 */
		/* 820826F4h case    1:*/		if ( regs.CR[0].eq ) { return 0x82082778;  }
		/* 820826F4h case    1:*/		return 0x820826F8;
		  /* 820826F8h */ case    2:  		/* lwz R11, <#[R31 + 12816]> */
		/* 820826F8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003210) );
		/* 820826F8h case    2:*/		return 0x820826FC;
		  /* 820826FCh */ case    3:  		/* lwz R10, <#[R31 + 13104]> */
		/* 820826FCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00003330) );
		/* 820826FCh case    3:*/		return 0x82082700;
		  /* 82082700h */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 82082700h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82082700h case    4:*/		return 0x82082704;
		  /* 82082704h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 82082704h case    5:*/		if ( regs.CR[6].eq ) { return 0x82082710;  }
		/* 82082704h case    5:*/		return 0x82082708;
		  /* 82082708h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82082708h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82082708h case    6:*/		return 0x8208270C;
		  /* 8208270Ch */ case    7:  		/* bc 4, CR6_EQ, 108 */
		/* 8208270Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x82082778;  }
		/* 8208270Ch case    7:*/		return 0x82082710;
	}
	return 0x82082710;
} // Block from 820826F0h-82082710h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82082710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082710);
		  /* 82082710h */ case    0:  		/* lwz R11, <#[R31 + 12820]> */
		/* 82082710h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003214) );
		/* 82082710h case    0:*/		return 0x82082714;
		  /* 82082714h */ case    1:  		/* lwz R10, <#[R31 + 13108]> */
		/* 82082714h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00003334) );
		/* 82082714h case    1:*/		return 0x82082718;
		  /* 82082718h */ case    2:  		/* cmplw CR6, R10, R11 */
		/* 82082718h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82082718h case    2:*/		return 0x8208271C;
		  /* 8208271Ch */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 8208271Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82082728;  }
		/* 8208271Ch case    3:*/		return 0x82082720;
		  /* 82082720h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82082720h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82082720h case    4:*/		return 0x82082724;
		  /* 82082724h */ case    5:  		/* bc 4, CR6_EQ, 84 */
		/* 82082724h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82082778;  }
		/* 82082724h case    5:*/		return 0x82082728;
	}
	return 0x82082728;
} // Block from 82082710h-82082728h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82082728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082728);
		  /* 82082728h */ case    0:  		/* lwz R11, <#[R31 + 12824]> */
		/* 82082728h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003218) );
		/* 82082728h case    0:*/		return 0x8208272C;
		  /* 8208272Ch */ case    1:  		/* lwz R10, <#[R31 + 13112]> */
		/* 8208272Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00003338) );
		/* 8208272Ch case    1:*/		return 0x82082730;
		  /* 82082730h */ case    2:  		/* cmplw CR6, R10, R11 */
		/* 82082730h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82082730h case    2:*/		return 0x82082734;
		  /* 82082734h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 82082734h case    3:*/		if ( regs.CR[6].eq ) { return 0x82082740;  }
		/* 82082734h case    3:*/		return 0x82082738;
		  /* 82082738h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82082738h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82082738h case    4:*/		return 0x8208273C;
		  /* 8208273Ch */ case    5:  		/* bc 4, CR6_EQ, 60 */
		/* 8208273Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x82082778;  }
		/* 8208273Ch case    5:*/		return 0x82082740;
	}
	return 0x82082740;
} // Block from 82082728h-82082740h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82082740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082740);
		  /* 82082740h */ case    0:  		/* lwz R11, <#[R31 + 12828]> */
		/* 82082740h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000321C) );
		/* 82082740h case    0:*/		return 0x82082744;
		  /* 82082744h */ case    1:  		/* lwz R10, <#[R31 + 13116]> */
		/* 82082744h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000333C) );
		/* 82082744h case    1:*/		return 0x82082748;
		  /* 82082748h */ case    2:  		/* cmplw CR6, R10, R11 */
		/* 82082748h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82082748h case    2:*/		return 0x8208274C;
		  /* 8208274Ch */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 8208274Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82082758;  }
		/* 8208274Ch case    3:*/		return 0x82082750;
		  /* 82082750h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82082750h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82082750h case    4:*/		return 0x82082754;
		  /* 82082754h */ case    5:  		/* bc 4, CR6_EQ, 36 */
		/* 82082754h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82082778;  }
		/* 82082754h case    5:*/		return 0x82082758;
	}
	return 0x82082758;
} // Block from 82082740h-82082758h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82082758h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082758);
		  /* 82082758h */ case    0:  		/* lwz R11, <#[R31 + 12832]> */
		/* 82082758h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003220) );
		/* 82082758h case    0:*/		return 0x8208275C;
		  /* 8208275Ch */ case    1:  		/* lwz R10, <#[R31 + 13120]> */
		/* 8208275Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00003340) );
		/* 8208275Ch case    1:*/		return 0x82082760;
		  /* 82082760h */ case    2:  		/* cmplw CR6, R10, R11 */
		/* 82082760h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82082760h case    2:*/		return 0x82082764;
		  /* 82082764h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 82082764h case    3:*/		if ( regs.CR[6].eq ) { return 0x82082770;  }
		/* 82082764h case    3:*/		return 0x82082768;
		  /* 82082768h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82082768h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82082768h case    4:*/		return 0x8208276C;
		  /* 8208276Ch */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 8208276Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x82082778;  }
		/* 8208276Ch case    5:*/		return 0x82082770;
	}
	return 0x82082770;
} // Block from 82082758h-82082770h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82082770h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082770);
		  /* 82082770h */ case    0:  		/* li R11, 1 */
		/* 82082770h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82082770h case    0:*/		return 0x82082774;
		  /* 82082774h */ case    1:  		/* b 8 */
		/* 82082774h case    1:*/		return 0x8208277C;
		/* 82082774h case    1:*/		return 0x82082778;
	}
	return 0x82082778;
} // Block from 82082770h-82082778h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82082778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082778);
		  /* 82082778h */ case    0:  		/* li R11, 0 */
		/* 82082778h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82082778h case    0:*/		return 0x8208277C;
	}
	return 0x8208277C;
} // Block from 82082778h-8208277Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8208277Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208277C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208277C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208277C);
		  /* 8208277Ch */ case    0:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 8208277Ch case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8208277Ch case    0:*/		return 0x82082780;
	}
	return 0x82082780;
} // Block from 8208277Ch-82082780h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82082780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082780);
		  /* 82082780h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82082780h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82082780h case    0:*/		return 0x82082784;
		  /* 82082784h */ case    1:  		/* bc 12, CR0_EQ, 264 */
		/* 82082784h case    1:*/		if ( regs.CR[0].eq ) { return 0x8208288C;  }
		/* 82082784h case    1:*/		return 0x82082788;
		  /* 82082788h */ case    2:  		/* lwz R3, <#[R31 + 48]> */
		/* 82082788h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82082788h case    2:*/		return 0x8208278C;
		  /* 8208278Ch */ case    3:  		/* lwz R11, <#[R31 + 56]> */
		/* 8208278Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 8208278Ch case    3:*/		return 0x82082790;
		  /* 82082790h */ case    4:  		/* cmplw CR6, R3, R11 */
		/* 82082790h case    4:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82082790h case    4:*/		return 0x82082794;
		  /* 82082794h */ case    5:  		/* bc 4, CR6_GT, 12 */
		/* 82082794h case    5:*/		if ( !regs.CR[6].gt ) { return 0x820827A0;  }
		/* 82082794h case    5:*/		return 0x82082798;
		  /* 82082798h */ case    6:  		/* mr R3, R31 */
		/* 82082798h case    6:*/		regs.R3 = regs.R31;
		/* 82082798h case    6:*/		return 0x8208279C;
		  /* 8208279Ch */ case    7:  		/* bl -59028 */
		/* 8208279Ch case    7:*/		regs.LR = 0x820827A0; return 0x82074108;
		/* 8208279Ch case    7:*/		return 0x820827A0;
	}
	return 0x820827A0;
} // Block from 82082780h-820827A0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820827A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820827A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820827A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820827A0);
		  /* 820827A0h */ case    0:  		/* lis R11, -16384 */
		/* 820827A0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC000);
		/* 820827A0h case    0:*/		return 0x820827A4;
		  /* 820827A4h */ case    1:  		/* li R10, 0 */
		/* 820827A4h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 820827A4h case    1:*/		return 0x820827A8;
		  /* 820827A8h */ case    2:  		/* ori R11, R11, 24832 */
		/* 820827A8h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x6100);
		/* 820827A8h case    2:*/		return 0x820827AC;
		  /* 820827ACh */ case    3:  		/* li R28, 0 */
		/* 820827ACh case    3:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 820827ACh case    3:*/		return 0x820827B0;
		  /* 820827B0h */ case    4:  		/* stwu R11, <#[R3 + 4]> */
		/* 820827B0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820827B0h case    4:*/		return 0x820827B4;
		  /* 820827B4h */ case    5:  		/* stwu R10, <#[R3 + 4]> */
		/* 820827B4h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820827B4h case    5:*/		return 0x820827B8;
		  /* 820827B8h */ case    6:  		/* lwz R10, <#[R31 + 13124]> */
		/* 820827B8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00003344) );
		/* 820827B8h case    6:*/		return 0x820827BC;
		  /* 820827BCh */ case    7:  		/* mr R11, R3 */
		/* 820827BCh case    7:*/		regs.R11 = regs.R3;
		/* 820827BCh case    7:*/		return 0x820827C0;
		  /* 820827C0h */ case    8:  		/* cmplwi CR6, R10, 0 */
		/* 820827C0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820827C0h case    8:*/		return 0x820827C4;
		  /* 820827C4h */ case    9:  		/* bc 4, CR6_GT, 156 */
		/* 820827C4h case    9:*/		if ( !regs.CR[6].gt ) { return 0x82082860;  }
		/* 820827C4h case    9:*/		return 0x820827C8;
		  /* 820827C8h */ case   10:  		/* li R29, 0 */
		/* 820827C8h case   10:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 820827C8h case   10:*/		return 0x820827CC;
		  /* 820827CCh */ case   11:  		/* addi R30, R31, 13368 */
		/* 820827CCh case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x3438);
		/* 820827CCh case   11:*/		return 0x820827D0;
		  /* 820827D0h */ case   12:  		/* lis R10, -16384 */
		/* 820827D0h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFC000);
		/* 820827D0h case   12:*/		return 0x820827D4;
		  /* 820827D4h */ case   13:  		/* lwz R9, <#[R30]> */
		/* 820827D4h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 820827D4h case   13:*/		return 0x820827D8;
		  /* 820827D8h */ case   14:  		/* lwz R8, <#[R30 + 4]> */
		/* 820827D8h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 820827D8h case   14:*/		return 0x820827DC;
		  /* 820827DCh */ case   15:  		/* li R7, 3 */
		/* 820827DCh case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 820827DCh case   15:*/		return 0x820827E0;
		  /* 820827E0h */ case   16:  		/* ori R10, R10, 24576 */
		/* 820827E0h case   16:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x6000);
		/* 820827E0h case   16:*/		return 0x820827E4;
		  /* 820827E4h */ case   17:  		/* lwz R6, <#[R1 + 152]> */
		/* 820827E4h case   17:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000098) );
		/* 820827E4h case   17:*/		return 0x820827E8;
		  /* 820827E8h */ case   18:  		/* slw R7, R7, R29 */
		/* 820827E8h case   18:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R7,regs.R29);
		/* 820827E8h case   18:*/		return 0x820827EC;
		  /* 820827ECh */ case   19:  		/* stwu R10, <#[R11 + 4]> */
		/* 820827ECh case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820827ECh case   19:*/		return 0x820827F0;
		  /* 820827F0h */ case   20:  		/* lis R10, -16383 */
		/* 820827F0h case   20:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFC001);
		/* 820827F0h case   20:*/		return 0x820827F4;
		  /* 820827F4h */ case   21:  		/* li R5, 8985 */
		/* 820827F4h case   21:*/		cpu::op::li<0>(regs,&regs.R5,0x2319);
		/* 820827F4h case   21:*/		return 0x820827F8;
		  /* 820827F8h */ case   22:  		/* mr R4, R11 */
		/* 820827F8h case   22:*/		regs.R4 = regs.R11;
		/* 820827F8h case   22:*/		return 0x820827FC;
		  /* 820827FCh */ case   23:  		/* ori R3, R10, 21761 */
		/* 820827FCh case   23:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R10,0x5501);
		/* 820827FCh case   23:*/		return 0x82082800;
		  /* 82082800h */ case   24:  		/* rlwinm R11, R9, 5, 0, 26 */
		/* 82082800h case   24:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R9);
		/* 82082800h case   24:*/		return 0x82082804;
		  /* 82082804h */ case   25:  		/* mullw R10, R8, R19 */
		/* 82082804h case   25:*/		cpu::op::mullw<0>(regs,&regs.R10,regs.R8,regs.R19);
		/* 82082804h case   25:*/		return 0x82082808;
		  /* 82082808h */ case   26:  		/* stwu R7, <#[R4 + 4]> */
		/* 82082808h case   26:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R4 + 0x00000004) );
		regs.R4 = (uint32)(regs.R4 + 0x00000004);
		/* 82082808h case   26:*/		return 0x8208280C;
		  /* 8208280Ch */ case   27:  		/* stwu R3, <#[R4 + 4]> */
		/* 8208280Ch case   27:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R4 + 0x00000004) );
		regs.R4 = (uint32)(regs.R4 + 0x00000004);
		/* 8208280Ch case   27:*/		return 0x82082810;
		  /* 82082810h */ case   28:  		/* add R11, R10, R11 */
		/* 82082810h case   28:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82082810h case   28:*/		return 0x82082814;
		  /* 82082814h */ case   29:  		/* stwu R5, <#[R4 + 4]> */
		/* 82082814h case   29:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R4 + 0x00000004) );
		regs.R4 = (uint32)(regs.R4 + 0x00000004);
		/* 82082814h case   29:*/		return 0x82082818;
		  /* 82082818h */ case   30:  		/* mullw R11, R11, R6 */
		/* 82082818h case   30:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R6);
		/* 82082818h case   30:*/		return 0x8208281C;
		  /* 8208281Ch */ case   31:  		/* mr R10, R4 */
		/* 8208281Ch case   31:*/		regs.R10 = regs.R4;
		/* 8208281Ch case   31:*/		return 0x82082820;
	}
	return 0x82082820;
} // Block from 820827A0h-82082820h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82082820h
// Function '?BlockUntilIdleCallback@D3D@@YAXPAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082820);
		  /* 82082820h */ case    0:  		/* add R11, R11, R18 */
		/* 82082820h case    0:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R18);
		/* 82082820h case    0:*/		return 0x82082824;
		  /* 82082824h */ case    1:  		/* stwu R11, <#[R10 + 4]> */
		/* 82082824h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 82082824h case    1:*/		return 0x82082828;
	}
	return 0x82082828;
} // Block from 82082820h-82082828h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82082828h
// Function '?HandleCaptureState@D3D@@YAXPAVCDevice@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082828);
		  /* 82082828h */ case    0:  		/* lwz R9, <#[R31 + 56]> */
		/* 82082828h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000038) );
		/* 82082828h case    0:*/		return 0x8208282C;
		  /* 8208282Ch */ case    1:  		/* mr R11, R10 */
		/* 8208282Ch case    1:*/		regs.R11 = regs.R10;
		/* 8208282Ch case    1:*/		return 0x82082830;
		  /* 82082830h */ case    2:  		/* cmplw CR6, R10, R9 */
		/* 82082830h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82082830h case    2:*/		return 0x82082834;
		  /* 82082834h */ case    3:  		/* stw R10, <#[R31 + 48]> */
		/* 82082834h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 82082834h case    3:*/		return 0x82082838;
		  /* 82082838h */ case    4:  		/* bc 4, CR6_GT, 16 */
		/* 82082838h case    4:*/		if ( !regs.CR[6].gt ) { return 0x82082848;  }
		/* 82082838h case    4:*/		return 0x8208283C;
		  /* 8208283Ch */ case    5:  		/* mr R3, R31 */
		/* 8208283Ch case    5:*/		regs.R3 = regs.R31;
		/* 8208283Ch case    5:*/		return 0x82082840;
		  /* 82082840h */ case    6:  		/* bl -59192 */
		/* 82082840h case    6:*/		regs.LR = 0x82082844; return 0x82074108;
		/* 82082840h case    6:*/		return 0x82082844;
		  /* 82082844h */ case    7:  		/* mr R11, R3 */
		/* 82082844h case    7:*/		regs.R11 = regs.R3;
		/* 82082844h case    7:*/		return 0x82082848;
	}
	return 0x82082848;
} // Block from 82082828h-82082848h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82082848h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082848);
		  /* 82082848h */ case    0:  		/* lwz R10, <#[R31 + 13124]> */
		/* 82082848h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00003344) );
		/* 82082848h case    0:*/		return 0x8208284C;
		  /* 8208284Ch */ case    1:  		/* addi R28, R28, 1 */
		/* 8208284Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8208284Ch case    1:*/		return 0x82082850;
		  /* 82082850h */ case    2:  		/* addi R30, R30, 8 */
		/* 82082850h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x8);
		/* 82082850h case    2:*/		return 0x82082854;
		  /* 82082854h */ case    3:  		/* addi R29, R29, 2 */
		/* 82082854h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x2);
		/* 82082854h case    3:*/		return 0x82082858;
		  /* 82082858h */ case    4:  		/* cmplw CR6, R28, R10 */
		/* 82082858h case    4:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R10);
		/* 82082858h case    4:*/		return 0x8208285C;
		  /* 8208285Ch */ case    5:  		/* bc 12, CR6_LT, -140 */
		/* 8208285Ch case    5:*/		if ( regs.CR[6].lt ) { return 0x820827D0;  }
		/* 8208285Ch case    5:*/		return 0x82082860;
	}
	return 0x82082860;
} // Block from 82082848h-82082860h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82082860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082860);
		  /* 82082860h */ case    0:  		/* lis R10, -16384 */
		/* 82082860h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFC000);
		/* 82082860h case    0:*/		return 0x82082864;
		  /* 82082864h */ case    1:  		/* lis R9, -16384 */
		/* 82082864h case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFFC000);
		/* 82082864h case    1:*/		return 0x82082868;
		  /* 82082868h */ case    2:  		/* ori R10, R10, 24576 */
		/* 82082868h case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x6000);
		/* 82082868h case    2:*/		return 0x8208286C;
		  /* 8208286Ch */ case    3:  		/* ori R9, R9, 24832 */
		/* 8208286Ch case    3:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x6100);
		/* 8208286Ch case    3:*/		return 0x82082870;
		  /* 82082870h */ case    4:  		/* stwu R10, <#[R11 + 4]> */
		/* 82082870h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82082870h case    4:*/		return 0x82082874;
		  /* 82082874h */ case    5:  		/* lwz R10, <#[R31 + 13084]> */
		/* 82082874h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000331C) );
		/* 82082874h case    5:*/		return 0x82082878;
		  /* 82082878h */ case    6:  		/* stwu R10, <#[R11 + 4]> */
		/* 82082878h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82082878h case    6:*/		return 0x8208287C;
		  /* 8208287Ch */ case    7:  		/* stwu R9, <#[R11 + 4]> */
		/* 8208287Ch case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8208287Ch case    7:*/		return 0x82082880;
		  /* 82082880h */ case    8:  		/* lwz R10, <#[R31 + 13088]> */
		/* 82082880h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00003320) );
		/* 82082880h case    8:*/		return 0x82082884;
		  /* 82082884h */ case    9:  		/* stwu R10, <#[R11 + 4]> */
		/* 82082884h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82082884h case    9:*/		return 0x82082888;
		  /* 82082888h */ case   10:  		/* stw R11, <#[R31 + 48]> */
		/* 82082888h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82082888h case   10:*/		return 0x8208288C;
	}
	return 0x8208288C;
} // Block from 82082860h-8208288Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8208288Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208288C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208288C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208288C);
		  /* 8208288Ch */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 8208288Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 8208288Ch case    0:*/		return 0x82082890;
		  /* 82082890h */ case    1:  		/* lwz R10, <#[R31 + 56]> */
		/* 82082890h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000038) );
		/* 82082890h case    1:*/		return 0x82082894;
		  /* 82082894h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 82082894h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82082894h case    2:*/		return 0x82082898;
		  /* 82082898h */ case    3:  		/* bc 4, CR6_GT, 16 */
		/* 82082898h case    3:*/		if ( !regs.CR[6].gt ) { return 0x820828A8;  }
		/* 82082898h case    3:*/		return 0x8208289C;
		  /* 8208289Ch */ case    4:  		/* mr R3, R31 */
		/* 8208289Ch case    4:*/		regs.R3 = regs.R31;
		/* 8208289Ch case    4:*/		return 0x820828A0;
		  /* 820828A0h */ case    5:  		/* bl -59288 */
		/* 820828A0h case    5:*/		regs.LR = 0x820828A4; return 0x82074108;
		/* 820828A0h case    5:*/		return 0x820828A4;
		  /* 820828A4h */ case    6:  		/* mr R11, R3 */
		/* 820828A4h case    6:*/		regs.R11 = regs.R3;
		/* 820828A4h case    6:*/		return 0x820828A8;
	}
	return 0x820828A8;
} // Block from 8208288Ch-820828A8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820828A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820828A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820828A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820828A8);
		  /* 820828A8h */ case    0:  		/* lbz R10, <#[R31 + 11070]> */
		/* 820828A8h case    0:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002B3E) );
		/* 820828A8h case    0:*/		return 0x820828AC;
		  /* 820828ACh */ case    1:  		/* lis R9, -16384 */
		/* 820828ACh case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFFC000);
		/* 820828ACh case    1:*/		return 0x820828B0;
		  /* 820828B0h */ case    2:  		/* rlwinm. R10, R10, 0, 28, 28 */
		/* 820828B0h case    2:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R10,regs.R10);
		/* 820828B0h case    2:*/		return 0x820828B4;
		  /* 820828B4h */ case    3:  		/* ori R28, R9, 17920 */
		/* 820828B4h case    3:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R9,0x4600);
		/* 820828B4h case    3:*/		return 0x820828B8;
		  /* 820828B8h */ case    4:  		/* bc 12, CR0_EQ, 60 */
		/* 820828B8h case    4:*/		if ( regs.CR[0].eq ) { return 0x820828F4;  }
		/* 820828B8h case    4:*/		return 0x820828BC;
		  /* 820828BCh */ case    5:  		/* stwu R28, <#[R11 + 4]> */
		/* 820828BCh case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820828BCh case    5:*/		return 0x820828C0;
		  /* 820828C0h */ case    6:  		/* li R9, 6 */
		/* 820828C0h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x6);
		/* 820828C0h case    6:*/		return 0x820828C4;
		  /* 820828C4h */ case    7:  		/* li R8, 6 */
		/* 820828C4h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x6);
		/* 820828C4h case    7:*/		return 0x820828C8;
		  /* 820828C8h */ case    8:  		/* li R6, 6 */
		/* 820828C8h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x6);
		/* 820828C8h case    8:*/		return 0x820828CC;
		  /* 820828CCh */ case    9:  		/* mr R10, R28 */
		/* 820828CCh case    9:*/		regs.R10 = regs.R28;
		/* 820828CCh case    9:*/		return 0x820828D0;
		  /* 820828D0h */ case   10:  		/* mr R7, R28 */
		/* 820828D0h case   10:*/		regs.R7 = regs.R28;
		/* 820828D0h case   10:*/		return 0x820828D4;
		  /* 820828D4h */ case   11:  		/* stwu R9, <#[R11 + 4]> */
		/* 820828D4h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820828D4h case   11:*/		return 0x820828D8;
		  /* 820828D8h */ case   12:  		/* stwu R28, <#[R11 + 4]> */
		/* 820828D8h case   12:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820828D8h case   12:*/		return 0x820828DC;
		  /* 820828DCh */ case   13:  		/* stwu R8, <#[R11 + 4]> */
		/* 820828DCh case   13:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820828DCh case   13:*/		return 0x820828E0;
		  /* 820828E0h */ case   14:  		/* stwu R28, <#[R11 + 4]> */
		/* 820828E0h case   14:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820828E0h case   14:*/		return 0x820828E4;
		  /* 820828E4h */ case   15:  		/* stwu R6, <#[R11 + 4]> */
		/* 820828E4h case   15:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820828E4h case   15:*/		return 0x820828E8;
		  /* 820828E8h */ case   16:  		/* lbz R10, <#[R31 + 11070]> */
		/* 820828E8h case   16:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002B3E) );
		/* 820828E8h case   16:*/		return 0x820828EC;
		  /* 820828ECh */ case   17:  		/* andi. R10, R10, 247 */
		/* 820828ECh case   17:*/		cpu::op::andi<1>(regs,&regs.R10,regs.R10,0xF7);
		/* 820828ECh case   17:*/		return 0x820828F0;
		  /* 820828F0h */ case   18:  		/* stb R10, <#[R31 + 11070]> */
		/* 820828F0h case   18:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R31 + 0x00002B3E) );
		/* 820828F0h case   18:*/		return 0x820828F4;
	}
	return 0x820828F4;
} // Block from 820828A8h-820828F4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 820828F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820828F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820828F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820828F4);
		  /* 820828F4h */ case    0:  		/* lwz R21, <#[R1 + 436]> */
		/* 820828F4h case    0:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x000001B4) );
		/* 820828F4h case    0:*/		return 0x820828F8;
		  /* 820828F8h */ case    1:  		/* lwz R29, <#[R1 + 136]> */
		/* 820828F8h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000088) );
		/* 820828F8h case    1:*/		return 0x820828FC;
		  /* 820828FCh */ case    2:  		/* cmplwi CR6, R21, 0 */
		/* 820828FCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 820828FCh case    2:*/		return 0x82082900;
		  /* 82082900h */ case    3:  		/* bc 4, CR6_EQ, 120 */
		/* 82082900h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82082978;  }
		/* 82082900h case    3:*/		return 0x82082904;
		  /* 82082904h */ case    4:  		/* cmpwi CR6, R29, 0 */
		/* 82082904h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 82082904h case    4:*/		return 0x82082908;
		  /* 82082908h */ case    5:  		/* bc 4, CR6_EQ, 112 */
		/* 82082908h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82082978;  }
		/* 82082908h case    5:*/		return 0x8208290C;
		  /* 8208290Ch */ case    6:  		/* lis R10, -16384 */
		/* 8208290Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFC000);
		/* 8208290Ch case    6:*/		return 0x82082910;
		  /* 82082910h */ case    7:  		/* li R9, 256 */
		/* 82082910h case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x100);
		/* 82082910h case    7:*/		return 0x82082914;
		  /* 82082914h */ case    8:  		/* ori R10, R10, 15104 */
		/* 82082914h case    8:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x3B00);
		/* 82082914h case    8:*/		return 0x82082918;
		  /* 82082918h */ case    9:  		/* lis R8, -16368 */
		/* 82082918h case    9:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFFC010);
		/* 82082918h case    9:*/		return 0x8208291C;
		  /* 8208291Ch */ case   10:  		/* stwu R10, <#[R11 + 4]> */
		/* 8208291Ch case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8208291Ch case   10:*/		return 0x82082920;
		  /* 82082920h */ case   11:  		/* li R10, 0 */
		/* 82082920h case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82082920h case   11:*/		return 0x82082924;
		  /* 82082924h */ case   12:  		/* ori R8, R8, 11008 */
		/* 82082924h case   12:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x2B00);
		/* 82082924h case   12:*/		return 0x82082928;
		  /* 82082928h */ case   13:  		/* li R7, 15 */
		/* 82082928h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0xF);
		/* 82082928h case   13:*/		return 0x8208292C;
		  /* 8208292Ch */ case   14:  		/* lis R6, -32256 */
		/* 8208292Ch case   14:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8200);
		/* 8208292Ch case   14:*/		return 0x82082930;
		  /* 82082930h */ case   15:  		/* li R5, 60 */
		/* 82082930h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x3C);
		/* 82082930h case   15:*/		return 0x82082934;
		  /* 82082934h */ case   16:  		/* stwu R9, <#[R11 + 4]> */
		/* 82082934h case   16:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82082934h case   16:*/		return 0x82082938;
		  /* 82082938h */ case   17:  		/* addi R4, R6, 16880 */
		/* 82082938h case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R6,0x41F0);
		/* 82082938h case   17:*/		return 0x8208293C;
		  /* 8208293Ch */ case   18:  		/* stwu R8, <#[R11 + 4]> */
		/* 8208293Ch case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8208293Ch case   18:*/		return 0x82082940;
		  /* 82082940h */ case   19:  		/* stwu R10, <#[R11 + 4]> */
		/* 82082940h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82082940h case   19:*/		return 0x82082944;
		  /* 82082944h */ case   20:  		/* mr R30, R11 */
		/* 82082944h case   20:*/		regs.R30 = regs.R11;
		/* 82082944h case   20:*/		return 0x82082948;
		  /* 82082948h */ case   21:  		/* stwu R7, <#[R30 + 4]> */
		/* 82082948h case   21:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82082948h case   21:*/		return 0x8208294C;
		  /* 8208294Ch */ case   22:  		/* addi R3, R30, 4 */
		/* 8208294Ch case   22:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0x4);
		/* 8208294Ch case   22:*/		return 0x82082950;
		  /* 82082950h */ case   23:  		/* bl 61536 */
		/* 82082950h case   23:*/		regs.LR = 0x82082954; return 0x820919B0;
		/* 82082950h case   23:*/		return 0x82082954;
		  /* 82082954h */ case   24:  		/* addi R11, R30, 60 */
		/* 82082954h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x3C);
		/* 82082954h case   24:*/		return 0x82082958;
		  /* 82082958h */ case   25:  		/* lis R10, 1 */
		/* 82082958h case   25:*/		cpu::op::lis<0>(regs,&regs.R10,0x1);
		/* 82082958h case   25:*/		return 0x8208295C;
		  /* 8208295Ch */ case   26:  		/* lis R9, 1 */
		/* 8208295Ch case   26:*/		cpu::op::lis<0>(regs,&regs.R9,0x1);
		/* 8208295Ch case   26:*/		return 0x82082960;
		  /* 82082960h */ case   27:  		/* ori R10, R10, 8576 */
		/* 82082960h case   27:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x2180);
		/* 82082960h case   27:*/		return 0x82082964;
		  /* 82082964h */ case   28:  		/* ori R9, R9, 2 */
		/* 82082964h case   28:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x2);
		/* 82082964h case   28:*/		return 0x82082968;
		  /* 82082968h */ case   29:  		/* stwu R10, <#[R11 + 4]> */
		/* 82082968h case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82082968h case   29:*/		return 0x8208296C;
		  /* 8208296Ch */ case   30:  		/* li R10, 0 */
		/* 8208296Ch case   30:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8208296Ch case   30:*/		return 0x82082970;
		  /* 82082970h */ case   31:  		/* stwu R9, <#[R11 + 4]> */
		/* 82082970h case   31:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82082970h case   31:*/		return 0x82082974;
		  /* 82082974h */ case   32:  		/* stwu R10, <#[R11 + 4]> */
		/* 82082974h case   32:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82082974h case   32:*/		return 0x82082978;
	}
	return 0x82082978;
} // Block from 820828F4h-82082978h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82082978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082978);
		  /* 82082978h */ case    0:  		/* li R10, 8712 */
		/* 82082978h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x2208);
		/* 82082978h case    0:*/		return 0x8208297C;
		  /* 8208297Ch */ case    1:  		/* li R9, 6 */
		/* 8208297Ch case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x6);
		/* 8208297Ch case    1:*/		return 0x82082980;
		  /* 82082980h */ case    2:  		/* stwu R10, <#[R11 + 4]> */
		/* 82082980h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82082980h case    2:*/		return 0x82082984;
		  /* 82082984h */ case    3:  		/* li R10, 8704 */
		/* 82082984h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x2200);
		/* 82082984h case    3:*/		return 0x82082988;
		  /* 82082988h */ case    4:  		/* li R19, 0 */
		/* 82082988h case    4:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 82082988h case    4:*/		return 0x8208298C;
		  /* 8208298Ch */ case    5:  		/* cmplwi CR6, R26, 0 */
		/* 8208298Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8208298Ch case    5:*/		return 0x82082990;
	}
	return 0x82082990;
} // Block from 82082978h-82082990h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82082990h
// Function '?CommandHandler@D3D@@YAJPBDPADKPAU_DM_CMDCONT@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082990);
		  /* 82082990h */ case    0:  		/* mr R8, R19 */
		/* 82082990h case    0:*/		regs.R8 = regs.R19;
		/* 82082990h case    0:*/		return 0x82082994;
		  /* 82082994h */ case    1:  		/* mr R30, R19 */
		/* 82082994h case    1:*/		regs.R30 = regs.R19;
		/* 82082994h case    1:*/		return 0x82082998;
		  /* 82082998h */ case    2:  		/* stwu R9, <#[R11 + 4]> */
		/* 82082998h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82082998h case    2:*/		return 0x8208299C;
		  /* 8208299Ch */ case    3:  		/* stwu R10, <#[R11 + 4]> */
		/* 8208299Ch case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8208299Ch case    3:*/		return 0x820829A0;
		  /* 820829A0h */ case    4:  		/* stwu R19, <#[R11 + 4]> */
		/* 820829A0h case    4:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820829A0h case    4:*/		return 0x820829A4;
		  /* 820829A4h */ case    5:  		/* bc 12, CR6_EQ, 60 */
		/* 820829A4h case    5:*/		if ( regs.CR[6].eq ) { return 0x820829E0;  }
		/* 820829A4h case    5:*/		return 0x820829A8;
		  /* 820829A8h */ case    6:  		/* lbz R9, <#[R31 + 11069]> */
		/* 820829A8h case    6:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R31 + 0x00002B3D) );
		/* 820829A8h case    6:*/		return 0x820829AC;
		  /* 820829ACh */ case    7:  		/* lbz R10, <#[R31 + 11070]> */
		/* 820829ACh case    7:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002B3E) );
		/* 820829ACh case    7:*/		return 0x820829B0;
		  /* 820829B0h */ case    8:  		/* ori R9, R9, 4 */
		/* 820829B0h case    8:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x4);
		/* 820829B0h case    8:*/		return 0x820829B4;
		  /* 820829B4h */ case    9:  		/* lwz R7, <#[R31 + 10560]> */
		/* 820829B4h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00002940) );
		/* 820829B4h case    9:*/		return 0x820829B8;
		  /* 820829B8h */ case   10:  		/* mr R8, R10 */
		/* 820829B8h case   10:*/		regs.R8 = regs.R10;
		/* 820829B8h case   10:*/		return 0x820829BC;
		  /* 820829BCh */ case   11:  		/* stb R9, <#[R31 + 11069]> */
		/* 820829BCh case   11:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R31 + 0x00002B3D) );
		/* 820829BCh case   11:*/		return 0x820829C0;
		  /* 820829C0h */ case   12:  		/* rlwimi R8, R10, 30, 28, 28 */
		/* 820829C0h case   12:*/		cpu::op::rlwimi<0,30,28,28>(regs,&regs.R8,regs.R10);
		/* 820829C0h case   12:*/		return 0x820829C4;
		  /* 820829C4h */ case   13:  		/* rlwinm R10, R7, 0, 0, 27 */
		/* 820829C4h case   13:*/		cpu::op::rlwinm<0,0,0,27>(regs,&regs.R10,regs.R7);
		/* 820829C4h case   13:*/		return 0x820829C8;
		  /* 820829C8h */ case   14:  		/* rlwinm R8, R8, 29, 29, 31 */
		/* 820829C8h case   14:*/		cpu::op::rlwinm<0,29,29,31>(regs,&regs.R8,regs.R8);
		/* 820829C8h case   14:*/		return 0x820829CC;
		  /* 820829CCh */ case   15:  		/* rlwinm R8, R8, 0, 31, 29 */
		/* 820829CCh case   15:*/		cpu::op::rlwinm<0,0,31,29>(regs,&regs.R8,regs.R8);
		/* 820829CCh case   15:*/		return 0x820829D0;
		  /* 820829D0h */ case   16:  		/* or R30, R8, R10 */
		/* 820829D0h case   16:*/		cpu::op::or<0>(regs,&regs.R30,regs.R8,regs.R10);
		/* 820829D0h case   16:*/		return 0x820829D4;
		  /* 820829D4h */ case   17:  		/* ld R9, <#[R31 + 16]> */
		/* 820829D4h case   17:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 820829D4h case   17:*/		return 0x820829D8;
		  /* 820829D8h */ case   18:  		/* oris R9, R9, 2 */
		/* 820829D8h case   18:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x2);
		/* 820829D8h case   18:*/		return 0x820829DC;
		  /* 820829DCh */ case   19:  		/* std R9, <#[R31 + 16]> */
		/* 820829DCh case   19:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 820829DCh case   19:*/		return 0x820829E0;
	}
	return 0x820829E0;
} // Block from 82082990h-820829E0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820829E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820829E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820829E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820829E0);
		  /* 820829E0h */ case    0:  		/* stw R11, <#[R31 + 48]> */
		/* 820829E0h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 820829E0h case    0:*/		return 0x820829E4;
		  /* 820829E4h */ case    1:  		/* cmpwi CR6, R29, 0 */
		/* 820829E4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 820829E4h case    1:*/		return 0x820829E8;
		  /* 820829E8h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 820829E8h case    2:*/		if ( regs.CR[6].eq ) { return 0x820829F8;  }
		/* 820829E8h case    2:*/		return 0x820829EC;
		  /* 820829ECh */ case    3:  		/* lbz R11, <#[R31 + 11072]> */
		/* 820829ECh case    3:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B40) );
		/* 820829ECh case    3:*/		return 0x820829F0;
		  /* 820829F0h */ case    4:  		/* rlwinm. R11, R11, 0, 0, 24 */
		/* 820829F0h case    4:*/		cpu::op::rlwinm<1,0,0,24>(regs,&regs.R11,regs.R11);
		/* 820829F0h case    4:*/		return 0x820829F4;
		  /* 820829F4h */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 820829F4h case    5:*/		if ( regs.CR[0].eq ) { return 0x82082A00;  }
		/* 820829F4h case    5:*/		return 0x820829F8;
	}
	return 0x820829F8;
} // Block from 820829E0h-820829F8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820829F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820829F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820829F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820829F8);
		  /* 820829F8h */ case    0:  		/* mr R3, R31 */
		/* 820829F8h case    0:*/		regs.R3 = regs.R31;
		/* 820829F8h case    0:*/		return 0x820829FC;
		  /* 820829FCh */ case    1:  		/* bl -23284 */
		/* 820829FCh case    1:*/		regs.LR = 0x82082A00; return 0x8207CF08;
		/* 820829FCh case    1:*/		return 0x82082A00;
	}
	return 0x82082A00;
} // Block from 820829F8h-82082A00h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82082A00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082A00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082A00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082A00);
		  /* 82082A00h */ case    0:  		/* mr R5, R30 */
		/* 82082A00h case    0:*/		regs.R5 = regs.R30;
		/* 82082A00h case    0:*/		return 0x82082A04;
		  /* 82082A04h */ case    1:  		/* li R4, 256 */
		/* 82082A04h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x100);
		/* 82082A04h case    1:*/		return 0x82082A08;
		  /* 82082A08h */ case    2:  		/* mr R3, R31 */
		/* 82082A08h case    2:*/		regs.R3 = regs.R31;
		/* 82082A08h case    2:*/		return 0x82082A0C;
		  /* 82082A0Ch */ case    3:  		/* bl 2428 */
		/* 82082A0Ch case    3:*/		regs.LR = 0x82082A10; return 0x82083388;
		/* 82082A0Ch case    3:*/		return 0x82082A10;
		  /* 82082A10h */ case    4:  		/* cmpwi CR6, R29, 0 */
		/* 82082A10h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 82082A10h case    4:*/		return 0x82082A14;
		  /* 82082A14h */ case    5:  		/* bc 4, CR6_EQ, 160 */
		/* 82082A14h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82082AB4;  }
		/* 82082A14h case    5:*/		return 0x82082A18;
		  /* 82082A18h */ case    6:  		/* lwz R3, <#[R31 + 48]> */
		/* 82082A18h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82082A18h case    6:*/		return 0x82082A1C;
		  /* 82082A1Ch */ case    7:  		/* lwz R11, <#[R31 + 56]> */
		/* 82082A1Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82082A1Ch case    7:*/		return 0x82082A20;
		  /* 82082A20h */ case    8:  		/* cmplw CR6, R3, R11 */
		/* 82082A20h case    8:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82082A20h case    8:*/		return 0x82082A24;
		  /* 82082A24h */ case    9:  		/* bc 4, CR6_GT, 12 */
		/* 82082A24h case    9:*/		if ( !regs.CR[6].gt ) { return 0x82082A30;  }
		/* 82082A24h case    9:*/		return 0x82082A28;
		  /* 82082A28h */ case   10:  		/* mr R3, R31 */
		/* 82082A28h case   10:*/		regs.R3 = regs.R31;
		/* 82082A28h case   10:*/		return 0x82082A2C;
		  /* 82082A2Ch */ case   11:  		/* bl -59684 */
		/* 82082A2Ch case   11:*/		regs.LR = 0x82082A30; return 0x82074108;
		/* 82082A2Ch case   11:*/		return 0x82082A30;
	}
	return 0x82082A30;
} // Block from 82082A00h-82082A30h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82082A30h
// Function '?CounterHandler@D3D@@YAXKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082A30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082A30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082A30);
		  /* 82082A30h */ case    0:  		/* lis R11, 2 */
		/* 82082A30h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x2);
		/* 82082A30h case    0:*/		return 0x82082A34;
		  /* 82082A34h */ case    1:  		/* lis R10, 0 */
		/* 82082A34h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x0);
		/* 82082A34h case    1:*/		return 0x82082A38;
		  /* 82082A38h */ case    2:  		/* ori R11, R11, 8448 */
		/* 82082A38h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2100);
		/* 82082A38h case    2:*/		return 0x82082A3C;
		  /* 82082A3Ch */ case    3:  		/* ori R10, R10, 65535 */
		/* 82082A3Ch case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0xFFFF);
		/* 82082A3Ch case    3:*/		return 0x82082A40;
		  /* 82082A40h */ case    4:  		/* stwu R11, <#[R3 + 4]> */
		/* 82082A40h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082A40h case    4:*/		return 0x82082A44;
		  /* 82082A44h */ case    5:  		/* li R8, 8851 */
		/* 82082A44h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x2293);
		/* 82082A44h case    5:*/		return 0x82082A48;
		  /* 82082A48h */ case    6:  		/* lis R6, 2 */
		/* 82082A48h case    6:*/		cpu::op::lis<0>(regs,&regs.R6,0x2);
		/* 82082A48h case    6:*/		return 0x82082A4C;
		  /* 82082A4Ch */ case    7:  		/* lis R5, 1 */
		/* 82082A4Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R5,0x1);
		/* 82082A4Ch case    7:*/		return 0x82082A50;
		  /* 82082A50h */ case    8:  		/* li R4, 768 */
		/* 82082A50h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x300);
		/* 82082A50h case    8:*/		return 0x82082A54;
		  /* 82082A54h */ case    9:  		/* li R30, 8978 */
		/* 82082A54h case    9:*/		cpu::op::li<0>(regs,&regs.R30,0x2312);
		/* 82082A54h case    9:*/		return 0x82082A58;
		  /* 82082A58h */ case   10:  		/* stwu R10, <#[R3 + 4]> */
		/* 82082A58h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082A58h case   10:*/		return 0x82082A5C;
		  /* 82082A5Ch */ case   11:  		/* ori R10, R6, 8708 */
		/* 82082A5Ch case   11:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R6,0x2204);
		/* 82082A5Ch case   11:*/		return 0x82082A60;
		  /* 82082A60h */ case   12:  		/* lis R6, 1 */
		/* 82082A60h case   12:*/		cpu::op::lis<0>(regs,&regs.R6,0x1);
		/* 82082A60h case   12:*/		return 0x82082A64;
		  /* 82082A64h */ case   13:  		/* lis R29, 0 */
		/* 82082A64h case   13:*/		cpu::op::lis<0>(regs,&regs.R29,0x0);
		/* 82082A64h case   13:*/		return 0x82082A68;
		  /* 82082A68h */ case   14:  		/* mr R11, R19 */
		/* 82082A68h case   14:*/		regs.R11 = regs.R19;
		/* 82082A68h case   14:*/		return 0x82082A6C;
		  /* 82082A6Ch */ case   15:  		/* ori R11, R29, 65535 */
		/* 82082A6Ch case   15:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R29,0xFFFF);
		/* 82082A6Ch case   15:*/		return 0x82082A70;
		  /* 82082A70h */ case   16:  		/* stwu R19, <#[R3 + 4]> */
		/* 82082A70h case   16:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082A70h case   16:*/		return 0x82082A74;
		  /* 82082A74h */ case   17:  		/* li R26, 8205 */
		/* 82082A74h case   17:*/		cpu::op::li<0>(regs,&regs.R26,0x200D);
		/* 82082A74h case   17:*/		return 0x82082A78;
		  /* 82082A78h */ case   18:  		/* mr R9, R19 */
		/* 82082A78h case   18:*/		regs.R9 = regs.R19;
		/* 82082A78h case   18:*/		return 0x82082A7C;
		  /* 82082A7Ch */ case   19:  		/* mr R7, R19 */
		/* 82082A7Ch case   19:*/		regs.R7 = regs.R19;
		/* 82082A7Ch case   19:*/		return 0x82082A80;
		  /* 82082A80h */ case   20:  		/* mr R29, R19 */
		/* 82082A80h case   20:*/		regs.R29 = regs.R19;
		/* 82082A80h case   20:*/		return 0x82082A84;
		  /* 82082A84h */ case   21:  		/* stwu R19, <#[R3 + 4]> */
		/* 82082A84h case   21:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082A84h case   21:*/		return 0x82082A88;
		  /* 82082A88h */ case   22:  		/* stwu R8, <#[R3 + 4]> */
		/* 82082A88h case   22:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082A88h case   22:*/		return 0x82082A8C;
		  /* 82082A8Ch */ case   23:  		/* stwu R19, <#[R3 + 4]> */
		/* 82082A8Ch case   23:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082A8Ch case   23:*/		return 0x82082A90;
		  /* 82082A90h */ case   24:  		/* stwu R10, <#[R3 + 4]> */
		/* 82082A90h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082A90h case   24:*/		return 0x82082A94;
		  /* 82082A94h */ case   25:  		/* stwu R5, <#[R3 + 4]> */
		/* 82082A94h case   25:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082A94h case   25:*/		return 0x82082A98;
		  /* 82082A98h */ case   26:  		/* stwu R6, <#[R3 + 4]> */
		/* 82082A98h case   26:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082A98h case   26:*/		return 0x82082A9C;
		  /* 82082A9Ch */ case   27:  		/* stwu R4, <#[R3 + 4]> */
		/* 82082A9Ch case   27:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082A9Ch case   27:*/		return 0x82082AA0;
		  /* 82082AA0h */ case   28:  		/* stwu R30, <#[R3 + 4]> */
		/* 82082AA0h case   28:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082AA0h case   28:*/		return 0x82082AA4;
		  /* 82082AA4h */ case   29:  		/* stwu R11, <#[R3 + 4]> */
		/* 82082AA4h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082AA4h case   29:*/		return 0x82082AA8;
		  /* 82082AA8h */ case   30:  		/* stwu R26, <#[R3 + 4]> */
		/* 82082AA8h case   30:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082AA8h case   30:*/		return 0x82082AAC;
		  /* 82082AACh */ case   31:  		/* stwu R19, <#[R3 + 4]> */
		/* 82082AACh case   31:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082AACh case   31:*/		return 0x82082AB0;
		  /* 82082AB0h */ case   32:  		/* stw R3, <#[R31 + 48]> */
		/* 82082AB0h case   32:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82082AB0h case   32:*/		return 0x82082AB4;
	}
	return 0x82082AB4;
} // Block from 82082A30h-82082AB4h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82082AB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082AB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082AB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082AB4);
		  /* 82082AB4h */ case    0:  		/* lwz R26, <#[R1 + 144]> */
		/* 82082AB4h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000090) );
		/* 82082AB4h case    0:*/		return 0x82082AB8;
		  /* 82082AB8h */ case    1:  		/* cmpwi CR6, R26, 0 */
		/* 82082AB8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 82082AB8h case    1:*/		return 0x82082ABC;
		  /* 82082ABCh */ case    2:  		/* bc 4, CR6_EQ, 136 */
		/* 82082ABCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x82082B44;  }
		/* 82082ABCh case    2:*/		return 0x82082AC0;
		  /* 82082AC0h */ case    3:  		/* li R12, 1 */
		/* 82082AC0h case    3:*/		cpu::op::li<0>(regs,&regs.R12,0x1);
		/* 82082AC0h case    3:*/		return 0x82082AC4;
		  /* 82082AC4h */ case    4:  		/* ld R11, <#[R31 + 16]> */
		/* 82082AC4h case    4:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082AC4h case    4:*/		return 0x82082AC8;
		  /* 82082AC8h */ case    5:  		/* rldicr R12, R12, 41, 63 */
		/* 82082AC8h case    5:*/		cpu::op::rldicr<0,41,63>(regs,&regs.R12,regs.R12);
		/* 82082AC8h case    5:*/		return 0x82082ACC;
		  /* 82082ACCh */ case    6:  		/* or R11, R11, R12 */
		/* 82082ACCh case    6:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 82082ACCh case    6:*/		return 0x82082AD0;
		  /* 82082AD0h */ case    7:  		/* li R12, 1 */
		/* 82082AD0h case    7:*/		cpu::op::li<0>(regs,&regs.R12,0x1);
		/* 82082AD0h case    7:*/		return 0x82082AD4;
		  /* 82082AD4h */ case    8:  		/* std R11, <#[R31 + 16]> */
		/* 82082AD4h case    8:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082AD4h case    8:*/		return 0x82082AD8;
		  /* 82082AD8h */ case    9:  		/* rldicr R12, R12, 40, 63 */
		/* 82082AD8h case    9:*/		cpu::op::rldicr<0,40,63>(regs,&regs.R12,regs.R12);
		/* 82082AD8h case    9:*/		return 0x82082ADC;
		  /* 82082ADCh */ case   10:  		/* or R11, R11, R12 */
		/* 82082ADCh case   10:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 82082ADCh case   10:*/		return 0x82082AE0;
		  /* 82082AE0h */ case   11:  		/* li R12, 1 */
		/* 82082AE0h case   11:*/		cpu::op::li<0>(regs,&regs.R12,0x1);
		/* 82082AE0h case   11:*/		return 0x82082AE4;
		  /* 82082AE4h */ case   12:  		/* std R11, <#[R31 + 16]> */
		/* 82082AE4h case   12:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082AE4h case   12:*/		return 0x82082AE8;
		  /* 82082AE8h */ case   13:  		/* rldicr R12, R12, 39, 63 */
		/* 82082AE8h case   13:*/		cpu::op::rldicr<0,39,63>(regs,&regs.R12,regs.R12);
		/* 82082AE8h case   13:*/		return 0x82082AEC;
		  /* 82082AECh */ case   14:  		/* or R11, R11, R12 */
		/* 82082AECh case   14:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 82082AECh case   14:*/		return 0x82082AF0;
		  /* 82082AF0h */ case   15:  		/* li R12, 1 */
		/* 82082AF0h case   15:*/		cpu::op::li<0>(regs,&regs.R12,0x1);
		/* 82082AF0h case   15:*/		return 0x82082AF4;
		  /* 82082AF4h */ case   16:  		/* std R11, <#[R31 + 16]> */
		/* 82082AF4h case   16:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082AF4h case   16:*/		return 0x82082AF8;
		  /* 82082AF8h */ case   17:  		/* rldicr R12, R12, 35, 63 */
		/* 82082AF8h case   17:*/		cpu::op::rldicr<0,35,63>(regs,&regs.R12,regs.R12);
		/* 82082AF8h case   17:*/		return 0x82082AFC;
		  /* 82082AFCh */ case   18:  		/* ld R11, <#[R31 + 24]> */
		/* 82082AFCh case   18:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82082AFCh case   18:*/		return 0x82082B00;
		  /* 82082B00h */ case   19:  		/* or R11, R11, R12 */
		/* 82082B00h case   19:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 82082B00h case   19:*/		return 0x82082B04;
		  /* 82082B04h */ case   20:  		/* std R11, <#[R31 + 24]> */
		/* 82082B04h case   20:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82082B04h case   20:*/		return 0x82082B08;
		  /* 82082B08h */ case   21:  		/* li R12, 1 */
		/* 82082B08h case   21:*/		cpu::op::li<0>(regs,&regs.R12,0x1);
		/* 82082B08h case   21:*/		return 0x82082B0C;
		  /* 82082B0Ch */ case   22:  		/* ld R11, <#[R31 + 16]> */
		/* 82082B0Ch case   22:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082B0Ch case   22:*/		return 0x82082B10;
		  /* 82082B10h */ case   23:  		/* ori R11, R11, 128 */
		/* 82082B10h case   23:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x80);
		/* 82082B10h case   23:*/		return 0x82082B14;
		  /* 82082B14h */ case   24:  		/* std R11, <#[R31 + 16]> */
		/* 82082B14h case   24:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082B14h case   24:*/		return 0x82082B18;
		  /* 82082B18h */ case   25:  		/* ori R11, R11, 64 */
		/* 82082B18h case   25:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x40);
		/* 82082B18h case   25:*/		return 0x82082B1C;
		  /* 82082B1Ch */ case   26:  		/* rldicr R12, R12, 44, 63 */
		/* 82082B1Ch case   26:*/		cpu::op::rldicr<0,44,63>(regs,&regs.R12,regs.R12);
		/* 82082B1Ch case   26:*/		return 0x82082B20;
		  /* 82082B20h */ case   27:  		/* std R11, <#[R31 + 16]> */
		/* 82082B20h case   27:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082B20h case   27:*/		return 0x82082B24;
		  /* 82082B24h */ case   28:  		/* ori R11, R11, 32 */
		/* 82082B24h case   28:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x20);
		/* 82082B24h case   28:*/		return 0x82082B28;
		  /* 82082B28h */ case   29:  		/* std R11, <#[R31 + 16]> */
		/* 82082B28h case   29:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082B28h case   29:*/		return 0x82082B2C;
		  /* 82082B2Ch */ case   30:  		/* ld R11, <#[R31 + 32]> */
		/* 82082B2Ch case   30:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82082B2Ch case   30:*/		return 0x82082B30;
		  /* 82082B30h */ case   31:  		/* oris R11, R11, 8 */
		/* 82082B30h case   31:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8);
		/* 82082B30h case   31:*/		return 0x82082B34;
		  /* 82082B34h */ case   32:  		/* std R11, <#[R31 + 32]> */
		/* 82082B34h case   32:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82082B34h case   32:*/		return 0x82082B38;
		  /* 82082B38h */ case   33:  		/* ld R11, <#[R31 + 16]> */
		/* 82082B38h case   33:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082B38h case   33:*/		return 0x82082B3C;
		  /* 82082B3Ch */ case   34:  		/* or R11, R11, R12 */
		/* 82082B3Ch case   34:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 82082B3Ch case   34:*/		return 0x82082B40;
		  /* 82082B40h */ case   35:  		/* std R11, <#[R31 + 16]> */
		/* 82082B40h case   35:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082B40h case   35:*/		return 0x82082B44;
	}
	return 0x82082B44;
} // Block from 82082AB4h-82082B44h (36 instructions)

//////////////////////////////////////////////////////
// Block at 82082B44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082B44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082B44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082B44);
		  /* 82082B44h */ case    0:  		/* cmplwi CR6, R14, 3 */
		/* 82082B44h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000003);
		/* 82082B44h case    0:*/		return 0x82082B48;
		  /* 82082B48h */ case    1:  		/* bc 4, CR6_EQ, 152 */
		/* 82082B48h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82082BE0;  }
		/* 82082B48h case    1:*/		return 0x82082B4C;
		  /* 82082B4Ch */ case    2:  		/* lwz R11, <#[R1 + 148]> */
		/* 82082B4Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 82082B4Ch case    2:*/		return 0x82082B50;
		  /* 82082B50h */ case    3:  		/* cmplwi CR6, R11, 4 */
		/* 82082B50h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 82082B50h case    3:*/		return 0x82082B54;
		  /* 82082B54h */ case    4:  		/* bc 12, CR6_EQ, 140 */
		/* 82082B54h case    4:*/		if ( regs.CR[6].eq ) { return 0x82082BE0;  }
		/* 82082B54h case    4:*/		return 0x82082B58;
		  /* 82082B58h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82082B58h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82082B58h case    5:*/		return 0x82082B5C;
		  /* 82082B5Ch */ case    6:  		/* mr R30, R19 */
		/* 82082B5Ch case    6:*/		regs.R30 = regs.R19;
		/* 82082B5Ch case    6:*/		return 0x82082B60;
		  /* 82082B60h */ case    7:  		/* bc 12, CR6_EQ, 8 */
		/* 82082B60h case    7:*/		if ( regs.CR[6].eq ) { return 0x82082B68;  }
		/* 82082B60h case    7:*/		return 0x82082B64;
		  /* 82082B64h */ case    8:  		/* addi R30, R11, 1 */
		/* 82082B64h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x1);
		/* 82082B64h case    8:*/		return 0x82082B68;
	}
	return 0x82082B68;
} // Block from 82082B44h-82082B68h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82082B68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082B68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082B68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082B68);
		  /* 82082B68h */ case    0:  		/* addi R11, R30, 2593 */
		/* 82082B68h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xA21);
		/* 82082B68h case    0:*/		return 0x82082B6C;
		  /* 82082B6Ch */ case    1:  		/* lis R10, 1 */
		/* 82082B6Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x1);
		/* 82082B6Ch case    1:*/		return 0x82082B70;
		  /* 82082B70h */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82082B70h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82082B70h case    2:*/		return 0x82082B74;
		  /* 82082B74h */ case    3:  		/* lwzx R29, <#[R11 + R31]> */
		/* 82082B74h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82082B74h case    3:*/		return 0x82082B78;
		  /* 82082B78h */ case    4:  		/* rlwinm R11, R29, 0, 12, 15 */
		/* 82082B78h case    4:*/		cpu::op::rlwinm<0,0,12,15>(regs,&regs.R11,regs.R29);
		/* 82082B78h case    4:*/		return 0x82082B7C;
		  /* 82082B7Ch */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 82082B7Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82082B7Ch case    5:*/		return 0x82082B80;
		  /* 82082B80h */ case    6:  		/* bc 4, CR6_EQ, 96 */
		/* 82082B80h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82082BE0;  }
		/* 82082B80h case    6:*/		return 0x82082B84;
		  /* 82082B84h */ case    7:  		/* lwz R3, <#[R31 + 48]> */
		/* 82082B84h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82082B84h case    7:*/		return 0x82082B88;
		  /* 82082B88h */ case    8:  		/* lwz R11, <#[R31 + 56]> */
		/* 82082B88h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82082B88h case    8:*/		return 0x82082B8C;
		  /* 82082B8Ch */ case    9:  		/* cmplw CR6, R3, R11 */
		/* 82082B8Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82082B8Ch case    9:*/		return 0x82082B90;
		  /* 82082B90h */ case   10:  		/* bc 4, CR6_GT, 12 */
		/* 82082B90h case   10:*/		if ( !regs.CR[6].gt ) { return 0x82082B9C;  }
		/* 82082B90h case   10:*/		return 0x82082B94;
		  /* 82082B94h */ case   11:  		/* mr R3, R31 */
		/* 82082B94h case   11:*/		regs.R3 = regs.R31;
		/* 82082B94h case   11:*/		return 0x82082B98;
		  /* 82082B98h */ case   12:  		/* bl -60048 */
		/* 82082B98h case   12:*/		regs.LR = 0x82082B9C; return 0x82074108;
		/* 82082B98h case   12:*/		return 0x82082B9C;
	}
	return 0x82082B9C;
} // Block from 82082B68h-82082B9Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 82082B9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082B9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082B9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082B9C);
		  /* 82082B9Ch */ case    0:  		/* addis R10, R30, 2 */
		/* 82082B9Ch case    0:*/		cpu::op::addis<0>(regs,&regs.R10,regs.R30,0x2);
		/* 82082B9Ch case    0:*/		return 0x82082BA0;
		  /* 82082BA0h */ case    1:  		/* addi R11, R30, 8193 */
		/* 82082BA0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x2001);
		/* 82082BA0h case    1:*/		return 0x82082BA4;
		  /* 82082BA4h */ case    2:  		/* addi R10, R10, 263 */
		/* 82082BA4h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x107);
		/* 82082BA4h case    2:*/		return 0x82082BA8;
		  /* 82082BA8h */ case    3:  		/* stwu R11, <#[R3 + 4]> */
		/* 82082BA8h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082BA8h case    3:*/		return 0x82082BAC;
		  /* 82082BACh */ case    4:  		/* rlwinm R8, R29, 0, 6, 31 */
		/* 82082BACh case    4:*/		cpu::op::rlwinm<0,0,6,31>(regs,&regs.R8,regs.R29);
		/* 82082BACh case    4:*/		return 0x82082BB0;
		  /* 82082BB0h */ case    5:  		/* srawi R11, R10, 16 */
		/* 82082BB0h case    5:*/		cpu::op::srawi<0,16>(regs,&regs.R11,regs.R10);
		/* 82082BB0h case    5:*/		return 0x82082BB4;
		  /* 82082BB4h */ case    6:  		/* li R9, 1 */
		/* 82082BB4h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 82082BB4h case    6:*/		return 0x82082BB8;
		  /* 82082BB8h */ case    7:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 82082BB8h case    7:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 82082BB8h case    7:*/		return 0x82082BBC;
		  /* 82082BBCh */ case    8:  		/* rlwinm R8, R8, 0, 20, 11 */
		/* 82082BBCh case    8:*/		cpu::op::rlwinm<0,0,20,11>(regs,&regs.R8,regs.R8);
		/* 82082BBCh case    8:*/		return 0x82082BC0;
		  /* 82082BC0h */ case    9:  		/* rldicl R10, R10, 0, 56 */
		/* 82082BC0h case    9:*/		cpu::op::rldicl<0,0,56>(regs,&regs.R10,regs.R10);
		/* 82082BC0h case    9:*/		return 0x82082BC4;
		  /* 82082BC4h */ case   10:  		/* rldicr R9, R9, 63, 63 */
		/* 82082BC4h case   10:*/		cpu::op::rldicr<0,63,63>(regs,&regs.R9,regs.R9);
		/* 82082BC4h case   10:*/		return 0x82082BC8;
		  /* 82082BC8h */ case   11:  		/* stwu R8, <#[R3 + 4]> */
		/* 82082BC8h case   11:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082BC8h case   11:*/		return 0x82082BCC;
		  /* 82082BCCh */ case   12:  		/* ldx R8, <#[R11 + R31]> */
		/* 82082BCCh case   12:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82082BCCh case   12:*/		return 0x82082BD0;
		  /* 82082BD0h */ case   13:  		/* srd R10, R9, R10 */
		/* 82082BD0h case   13:*/		cpu::op::srd<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82082BD0h case   13:*/		return 0x82082BD4;
		  /* 82082BD4h */ case   14:  		/* or R10, R10, R8 */
		/* 82082BD4h case   14:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 82082BD4h case   14:*/		return 0x82082BD8;
		  /* 82082BD8h */ case   15:  		/* stdx R10, <#[R11 + R31]> */
		/* 82082BD8h case   15:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82082BD8h case   15:*/		return 0x82082BDC;
		  /* 82082BDCh */ case   16:  		/* stw R3, <#[R31 + 48]> */
		/* 82082BDCh case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82082BDCh case   16:*/		return 0x82082BE0;
	}
	return 0x82082BE0;
} // Block from 82082B9Ch-82082BE0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82082BE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082BE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082BE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082BE0);
		  /* 82082BE0h */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 82082BE0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 82082BE0h case    0:*/		return 0x82082BE4;
		  /* 82082BE4h */ case    1:  		/* bc 4, CR6_EQ, 356 */
		/* 82082BE4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82082D48;  }
		/* 82082BE4h case    1:*/		return 0x82082BE8;
		  /* 82082BE8h */ case    2:  		/* lwz R30, <#[R31 + 48]> */
		/* 82082BE8h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000030) );
		/* 82082BE8h case    2:*/		return 0x82082BEC;
		  /* 82082BECh */ case    3:  		/* lwz R11, <#[R31 + 56]> */
		/* 82082BECh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82082BECh case    3:*/		return 0x82082BF0;
		  /* 82082BF0h */ case    4:  		/* cmplw CR6, R30, R11 */
		/* 82082BF0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82082BF0h case    4:*/		return 0x82082BF4;
		  /* 82082BF4h */ case    5:  		/* bc 4, CR6_GT, 16 */
		/* 82082BF4h case    5:*/		if ( !regs.CR[6].gt ) { return 0x82082C04;  }
		/* 82082BF4h case    5:*/		return 0x82082BF8;
		  /* 82082BF8h */ case    6:  		/* mr R3, R31 */
		/* 82082BF8h case    6:*/		regs.R3 = regs.R31;
		/* 82082BF8h case    6:*/		return 0x82082BFC;
		  /* 82082BFCh */ case    7:  		/* bl -60148 */
		/* 82082BFCh case    7:*/		regs.LR = 0x82082C00; return 0x82074108;
		/* 82082BFCh case    7:*/		return 0x82082C00;
		  /* 82082C00h */ case    8:  		/* mr R30, R3 */
		/* 82082C00h case    8:*/		regs.R30 = regs.R3;
		/* 82082C00h case    8:*/		return 0x82082C04;
	}
	return 0x82082C04;
} // Block from 82082BE0h-82082C04h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82082C04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082C04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082C04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082C04);
		  /* 82082C04h */ case    0:  		/* li R5, 4 */
		/* 82082C04h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 82082C04h case    0:*/		return 0x82082C08;
		  /* 82082C08h */ case    1:  		/* li R4, 6 */
		/* 82082C08h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x6);
		/* 82082C08h case    1:*/		return 0x82082C0C;
		  /* 82082C0Ch */ case    2:  		/* mr R3, R31 */
		/* 82082C0Ch case    2:*/		regs.R3 = regs.R31;
		/* 82082C0Ch case    2:*/		return 0x82082C10;
	}
	return 0x82082C10;
} // Block from 82082C04h-82082C10h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82082C10h
// Function '?InitXBDMInterface@D3D@@YAXPAVCDevice@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082C10);
		  /* 82082C10h */ case    0:  		/* bl -64720 */
		/* 82082C10h case    0:*/		regs.LR = 0x82082C14; return 0x82072F40;
		/* 82082C10h case    0:*/		return 0x82082C14;
		  /* 82082C14h */ case    1:  		/* cmplwi CR0, R3, 0 */
		/* 82082C14h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82082C14h case    1:*/		return 0x82082C18;
		  /* 82082C18h */ case    2:  		/* bc 4, CR0_EQ, 12 */
		/* 82082C18h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82082C24;  }
		/* 82082C18h case    2:*/		return 0x82082C1C;
		  /* 82082C1Ch */ case    3:  		/* stw R30, <#[R31 + 48]> */
		/* 82082C1Ch case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000030) );
		/* 82082C1Ch case    3:*/		return 0x82082C20;
		  /* 82082C20h */ case    4:  		/* b 1112 */
		/* 82082C20h case    4:*/		return 0x82083078;
		/* 82082C20h case    4:*/		return 0x82082C24;
	}
	return 0x82082C24;
} // Block from 82082C10h-82082C24h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82082C24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082C24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082C24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082C24);
		  /* 82082C24h */ case    0:  		/* rlwinm R11, R3, 12, 20, 31 */
		/* 82082C24h case    0:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R11,regs.R3);
		/* 82082C24h case    0:*/		return 0x82082C28;
		  /* 82082C28h */ case    1:  		/* lwz R9, <#[R31 + 10688]> */
		/* 82082C28h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x000029C0) );
		/* 82082C28h case    1:*/		return 0x82082C2C;
		  /* 82082C2Ch */ case    2:  		/* rlwinm R10, R3, 0, 3, 31 */
		/* 82082C2Ch case    2:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R3);
		/* 82082C2Ch case    2:*/		return 0x82082C30;
		  /* 82082C30h */ case    3:  		/* addi R11, R11, 512 */
		/* 82082C30h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x200);
		/* 82082C30h case    3:*/		return 0x82082C34;
		  /* 82082C34h */ case    4:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 82082C34h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 82082C34h case    4:*/		return 0x82082C38;
		  /* 82082C38h */ case    5:  		/* rlwinm R11, R11, 0, 19, 19 */
		/* 82082C38h case    5:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R11,regs.R11);
		/* 82082C38h case    5:*/		return 0x82082C3C;
		  /* 82082C3Ch */ case    6:  		/* add R11, R11, R10 */
		/* 82082C3Ch case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82082C3Ch case    6:*/		return 0x82082C40;
		  /* 82082C40h */ case    7:  		/* bc 4, CR0_EQ, 16 */
		/* 82082C40h case    7:*/		if ( !regs.CR[0].eq ) { return 0x82082C50;  }
		/* 82082C40h case    7:*/		return 0x82082C44;
		  /* 82082C44h */ case    8:  		/* lis R10, -32256 */
		/* 82082C44h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82082C44h case    8:*/		return 0x82082C48;
		  /* 82082C48h */ case    9:  		/* lfs FR0, <#[R10 + 1820]> */
		/* 82082C48h case    9:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x0000071C) );
		/* 82082C48h case    9:*/		return 0x82082C4C;
		  /* 82082C4Ch */ case   10:  		/* b 12 */
		/* 82082C4Ch case   10:*/		return 0x82082C58;
		/* 82082C4Ch case   10:*/		return 0x82082C50;
	}
	return 0x82082C50;
} // Block from 82082C24h-82082C50h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82082C50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082C50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082C50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082C50);
		  /* 82082C50h */ case    0:  		/* lis R10, -32256 */
		/* 82082C50h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82082C50h case    0:*/		return 0x82082C54;
		  /* 82082C54h */ case    1:  		/* lfs FR0, <#[R10 + 1816]> */
		/* 82082C54h case    1:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000718) );
		/* 82082C54h case    1:*/		return 0x82082C58;
	}
	return 0x82082C58;
} // Block from 82082C50h-82082C58h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82082C58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082C58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082C58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082C58);
		  /* 82082C58h */ case    0:  		/* extsw R10, R27 */
		/* 82082C58h case    0:*/		cpu::op::extsw<0>(regs,&regs.R10,regs.R27);
		/* 82082C58h case    0:*/		return 0x82082C5C;
		  /* 82082C5Ch */ case    1:  		/* std R10, <#[R1 + 192]> */
		/* 82082C5Ch case    1:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x000000C0) );
		/* 82082C5Ch case    1:*/		return 0x82082C60;
		  /* 82082C60h */ case    2:  		/* extsw R10, R25 */
		/* 82082C60h case    2:*/		cpu::op::extsw<0>(regs,&regs.R10,regs.R25);
		/* 82082C60h case    2:*/		return 0x82082C64;
		  /* 82082C64h */ case    3:  		/* std R10, <#[R1 + 176]> */
		/* 82082C64h case    3:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x000000B0) );
		/* 82082C64h case    3:*/		return 0x82082C68;
		  /* 82082C68h */ case    4:  		/* subf R10, R25, R23 */
		/* 82082C68h case    4:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R25,regs.R23);
		/* 82082C68h case    4:*/		return 0x82082C6C;
		  /* 82082C6Ch */ case    5:  		/* subf R9, R27, R24 */
		/* 82082C6Ch case    5:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R27,regs.R24);
		/* 82082C6Ch case    5:*/		return 0x82082C70;
		  /* 82082C70h */ case    6:  		/* extsw R10, R10 */
		/* 82082C70h case    6:*/		cpu::op::extsw<0>(regs,&regs.R10,regs.R10);
		/* 82082C70h case    6:*/		return 0x82082C74;
		  /* 82082C74h */ case    7:  		/* extsw R9, R9 */
		/* 82082C74h case    7:*/		cpu::op::extsw<0>(regs,&regs.R9,regs.R9);
		/* 82082C74h case    7:*/		return 0x82082C78;
		  /* 82082C78h */ case    8:  		/* std R10, <#[R1 + 160]> */
		/* 82082C78h case    8:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x000000A0) );
		/* 82082C78h case    8:*/		return 0x82082C7C;
		  /* 82082C7Ch */ case    9:  		/* lfd FR10, <#[R1 + 160]> */
		/* 82082C7Ch case    9:*/		cpu::mem::load64f( regs, &regs.FR10, (uint32)(regs.R1 + 0x000000A0) );
		/* 82082C7Ch case    9:*/		return 0x82082C80;
		  /* 82082C80h */ case   10:  		/* std R9, <#[R1 + 168]> */
		/* 82082C80h case   10:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x000000A8) );
		/* 82082C80h case   10:*/		return 0x82082C84;
		  /* 82082C84h */ case   11:  		/* lfd FR11, <#[R1 + 168]> */
		/* 82082C84h case   11:*/		cpu::mem::load64f( regs, &regs.FR11, (uint32)(regs.R1 + 0x000000A8) );
		/* 82082C84h case   11:*/		return 0x82082C88;
		  /* 82082C88h */ case   12:  		/* fcfid FR11, FR11 */
		/* 82082C88h case   12:*/		cpu::op::fcfid<0>(regs,&regs.FR11,regs.FR11);
		/* 82082C88h case   12:*/		return 0x82082C8C;
		  /* 82082C8Ch */ case   13:  		/* lis R9, 5 */
		/* 82082C8Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R9,0x5);
		/* 82082C8Ch case   13:*/		return 0x82082C90;
		  /* 82082C90h */ case   14:  		/* lfd FR13, <#[R1 + 192]> */
		/* 82082C90h case   14:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x000000C0) );
		/* 82082C90h case   14:*/		return 0x82082C94;
		  /* 82082C94h */ case   15:  		/* fcfid FR10, FR10 */
		/* 82082C94h case   15:*/		cpu::op::fcfid<0>(regs,&regs.FR10,regs.FR10);
		/* 82082C94h case   15:*/		return 0x82082C98;
		  /* 82082C98h */ case   16:  		/* fcfid FR13, FR13 */
		/* 82082C98h case   16:*/		cpu::op::fcfid<0>(regs,&regs.FR13,regs.FR13);
		/* 82082C98h case   16:*/		return 0x82082C9C;
		  /* 82082C9Ch */ case   17:  		/* lfd FR12, <#[R1 + 176]> */
		/* 82082C9Ch case   17:*/		cpu::mem::load64f( regs, &regs.FR12, (uint32)(regs.R1 + 0x000000B0) );
		/* 82082C9Ch case   17:*/		return 0x82082CA0;
		  /* 82082CA0h */ case   18:  		/* fcfid FR12, FR12 */
		/* 82082CA0h case   18:*/		cpu::op::fcfid<0>(regs,&regs.FR12,regs.FR12);
		/* 82082CA0h case   18:*/		return 0x82082CA4;
		  /* 82082CA4h */ case   19:  		/* ori R10, R9, 18432 */
		/* 82082CA4h case   19:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R9,0x4800);
		/* 82082CA4h case   19:*/		return 0x82082CA8;
		  /* 82082CA8h */ case   20:  		/* frsp FR11, FR11 */
		/* 82082CA8h case   20:*/		cpu::op::frsp<0>(regs,&regs.FR11,regs.FR11);
		/* 82082CA8h case   20:*/		return 0x82082CAC;
		  /* 82082CACh */ case   21:  		/* ori R11, R11, 3 */
		/* 82082CACh case   21:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x3);
		/* 82082CACh case   21:*/		return 0x82082CB0;
		  /* 82082CB0h */ case   22:  		/* lis R9, 4096 */
		/* 82082CB0h case   22:*/		cpu::op::lis<0>(regs,&regs.R9,0x1000);
		/* 82082CB0h case   22:*/		return 0x82082CB4;
		  /* 82082CB4h */ case   23:  		/* lis R4, 2 */
		/* 82082CB4h case   23:*/		cpu::op::lis<0>(regs,&regs.R4,0x2);
		/* 82082CB4h case   23:*/		return 0x82082CB8;
		  /* 82082CB8h */ case   24:  		/* ori R9, R9, 26 */
		/* 82082CB8h case   24:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x1A);
		/* 82082CB8h case   24:*/		return 0x82082CBC;
		  /* 82082CBCh */ case   25:  		/* ori R4, R4, 20480 */
		/* 82082CBCh case   25:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x5000);
		/* 82082CBCh case   25:*/		return 0x82082CC0;
		  /* 82082CC0h */ case   26:  		/* mr R8, R19 */
		/* 82082CC0h case   26:*/		regs.R8 = regs.R19;
		/* 82082CC0h case   26:*/		return 0x82082CC4;
		  /* 82082CC4h */ case   27:  		/* mr R7, R19 */
		/* 82082CC4h case   27:*/		regs.R7 = regs.R19;
		/* 82082CC4h case   27:*/		return 0x82082CC8;
		  /* 82082CC8h */ case   28:  		/* frsp FR10, FR10 */
		/* 82082CC8h case   28:*/		cpu::op::frsp<0>(regs,&regs.FR10,regs.FR10);
		/* 82082CC8h case   28:*/		return 0x82082CCC;
		  /* 82082CCCh */ case   29:  		/* mr R6, R19 */
		/* 82082CCCh case   29:*/		regs.R6 = regs.R19;
		/* 82082CCCh case   29:*/		return 0x82082CD0;
		  /* 82082CD0h */ case   30:  		/* frsp FR13, FR13 */
		/* 82082CD0h case   30:*/		cpu::op::frsp<0>(regs,&regs.FR13,regs.FR13);
		/* 82082CD0h case   30:*/		return 0x82082CD4;
		  /* 82082CD4h */ case   31:  		/* mr R5, R19 */
		/* 82082CD4h case   31:*/		regs.R5 = regs.R19;
		/* 82082CD4h case   31:*/		return 0x82082CD8;
		  /* 82082CD8h */ case   32:  		/* frsp FR12, FR12 */
		/* 82082CD8h case   32:*/		cpu::op::frsp<0>(regs,&regs.FR12,regs.FR12);
		/* 82082CD8h case   32:*/		return 0x82082CDC;
		  /* 82082CDCh */ case   33:  		/* mr R27, R19 */
		/* 82082CDCh case   33:*/		regs.R27 = regs.R19;
		/* 82082CDCh case   33:*/		return 0x82082CE0;
		  /* 82082CE0h */ case   34:  		/* mr R25, R19 */
		/* 82082CE0h case   34:*/		regs.R25 = regs.R19;
		/* 82082CE0h case   34:*/		return 0x82082CE4;
		  /* 82082CE4h */ case   35:  		/* mr R24, R19 */
		/* 82082CE4h case   35:*/		regs.R24 = regs.R19;
		/* 82082CE4h case   35:*/		return 0x82082CE8;
		  /* 82082CE8h */ case   36:  		/* li R29, 3 */
		/* 82082CE8h case   36:*/		cpu::op::li<0>(regs,&regs.R29,0x3);
		/* 82082CE8h case   36:*/		return 0x82082CEC;
		  /* 82082CECh */ case   37:  		/* fsubs FR13, FR13, FR0 */
		/* 82082CECh case   37:*/		cpu::op::fsubs<0>(regs,&regs.FR13,regs.FR13,regs.FR0);
		/* 82082CECh case   37:*/		return 0x82082CF0;
		  /* 82082CF0h */ case   38:  		/* stfs FR13, <#[R3]> */
		/* 82082CF0h case   38:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R3 + 0x00000000) );
		/* 82082CF0h case   38:*/		return 0x82082CF4;
		  /* 82082CF4h */ case   39:  		/* fsubs FR0, FR12, FR0 */
		/* 82082CF4h case   39:*/		cpu::op::fsubs<0>(regs,&regs.FR0,regs.FR12,regs.FR0);
		/* 82082CF4h case   39:*/		return 0x82082CF8;
		  /* 82082CF8h */ case   40:  		/* stfs FR0, <#[R3 + 4]> */
		/* 82082CF8h case   40:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R3 + 0x00000004) );
		/* 82082CF8h case   40:*/		return 0x82082CFC;
		  /* 82082CFCh */ case   41:  		/* fadds FR13, FR11, FR13 */
		/* 82082CFCh case   41:*/		cpu::op::fadds<0>(regs,&regs.FR13,regs.FR11,regs.FR13);
		/* 82082CFCh case   41:*/		return 0x82082D00;
	}
	return 0x82082D00;
} // Block from 82082C58h-82082D00h (42 instructions)

//////////////////////////////////////////////////////
// Block at 82082D00h
// Function '?UninitXBDMInterface@D3D@@YAXPAVCDevice@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082D00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082D00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082D00);
		  /* 82082D00h */ case    0:  		/* stfs FR13, <#[R3 + 8]> */
		/* 82082D00h case    0:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R3 + 0x00000008) );
		/* 82082D00h case    0:*/		return 0x82082D04;
		  /* 82082D04h */ case    1:  		/* stfs FR0, <#[R3 + 12]> */
		/* 82082D04h case    1:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R3 + 0x0000000C) );
		/* 82082D04h case    1:*/		return 0x82082D08;
		  /* 82082D08h */ case    2:  		/* fadds FR0, FR10, FR0 */
		/* 82082D08h case    2:*/		cpu::op::fadds<0>(regs,&regs.FR0,regs.FR10,regs.FR0);
		/* 82082D08h case    2:*/		return 0x82082D0C;
		  /* 82082D0Ch */ case    3:  		/* stfs FR13, <#[R3 + 16]> */
		/* 82082D0Ch case    3:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R3 + 0x00000010) );
		/* 82082D0Ch case    3:*/		return 0x82082D10;
		  /* 82082D10h */ case    4:  		/* stfs FR0, <#[R3 + 20]> */
		/* 82082D10h case    4:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R3 + 0x00000014) );
		/* 82082D10h case    4:*/		return 0x82082D14;
		  /* 82082D14h */ case    5:  		/* stwu R10, <#[R30 + 4]> */
		/* 82082D14h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82082D14h case    5:*/		return 0x82082D18;
		  /* 82082D18h */ case    6:  		/* stwu R11, <#[R30 + 4]> */
		/* 82082D18h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82082D18h case    6:*/		return 0x82082D1C;
		  /* 82082D1Ch */ case    7:  		/* stwu R9, <#[R30 + 4]> */
		/* 82082D1Ch case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82082D1Ch case    7:*/		return 0x82082D20;
		  /* 82082D20h */ case    8:  		/* stwu R19, <#[R30 + 4]> */
		/* 82082D20h case    8:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82082D20h case    8:*/		return 0x82082D24;
		  /* 82082D24h */ case    9:  		/* stwu R19, <#[R30 + 4]> */
		/* 82082D24h case    9:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82082D24h case    9:*/		return 0x82082D28;
		  /* 82082D28h */ case   10:  		/* stwu R19, <#[R30 + 4]> */
		/* 82082D28h case   10:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82082D28h case   10:*/		return 0x82082D2C;
		  /* 82082D2Ch */ case   11:  		/* stwu R19, <#[R30 + 4]> */
		/* 82082D2Ch case   11:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82082D2Ch case   11:*/		return 0x82082D30;
		  /* 82082D30h */ case   12:  		/* stwu R4, <#[R30 + 4]> */
		/* 82082D30h case   12:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82082D30h case   12:*/		return 0x82082D34;
		  /* 82082D34h */ case   13:  		/* stwu R19, <#[R30 + 4]> */
		/* 82082D34h case   13:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82082D34h case   13:*/		return 0x82082D38;
		  /* 82082D38h */ case   14:  		/* stwu R19, <#[R30 + 4]> */
		/* 82082D38h case   14:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82082D38h case   14:*/		return 0x82082D3C;
		  /* 82082D3Ch */ case   15:  		/* stwu R19, <#[R30 + 4]> */
		/* 82082D3Ch case   15:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82082D3Ch case   15:*/		return 0x82082D40;
		  /* 82082D40h */ case   16:  		/* stw R30, <#[R31 + 48]> */
		/* 82082D40h case   16:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000030) );
		/* 82082D40h case   16:*/		return 0x82082D44;
		  /* 82082D44h */ case   17:  		/* b 8 */
		/* 82082D44h case   17:*/		return 0x82082D4C;
		/* 82082D44h case   17:*/		return 0x82082D48;
	}
	return 0x82082D48;
} // Block from 82082D00h-82082D48h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82082D48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082D48);
		  /* 82082D48h */ case    0:  		/* mr R29, R21 */
		/* 82082D48h case    0:*/		regs.R29 = regs.R21;
		/* 82082D48h case    0:*/		return 0x82082D4C;
	}
	return 0x82082D4C;
} // Block from 82082D48h-82082D4Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82082D4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082D4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082D4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082D4C);
		  /* 82082D4Ch */ case    0:  		/* lwz R3, <#[R31 + 48]> */
		/* 82082D4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82082D4Ch case    0:*/		return 0x82082D50;
		  /* 82082D50h */ case    1:  		/* lwz R11, <#[R31 + 56]> */
		/* 82082D50h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82082D50h case    1:*/		return 0x82082D54;
		  /* 82082D54h */ case    2:  		/* cmplw CR6, R3, R11 */
		/* 82082D54h case    2:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82082D54h case    2:*/		return 0x82082D58;
		  /* 82082D58h */ case    3:  		/* bc 4, CR6_GT, 12 */
		/* 82082D58h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82082D64;  }
		/* 82082D58h case    3:*/		return 0x82082D5C;
		  /* 82082D5Ch */ case    4:  		/* mr R3, R31 */
		/* 82082D5Ch case    4:*/		regs.R3 = regs.R31;
		/* 82082D5Ch case    4:*/		return 0x82082D60;
		  /* 82082D60h */ case    5:  		/* bl -60504 */
		/* 82082D60h case    5:*/		regs.LR = 0x82082D64; return 0x82074108;
		/* 82082D60h case    5:*/		return 0x82082D64;
	}
	return 0x82082D64;
} // Block from 82082D4Ch-82082D64h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82082D64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082D64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082D64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082D64);
		  /* 82082D64h */ case    0:  		/* lwz R11, <#[R31 + 13092]> */
		/* 82082D64h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003324) );
		/* 82082D64h case    0:*/		return 0x82082D68;
		  /* 82082D68h */ case    1:  		/* li R10, 136 */
		/* 82082D68h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x88);
		/* 82082D68h case    1:*/		return 0x82082D6C;
		  /* 82082D6Ch */ case    2:  		/* li R9, 8199 */
		/* 82082D6Ch case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x2007);
		/* 82082D6Ch case    2:*/		return 0x82082D70;
		  /* 82082D70h */ case    3:  		/* oris R11, R11, 49152 */
		/* 82082D70h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0xC000);
		/* 82082D70h case    3:*/		return 0x82082D74;
		  /* 82082D74h */ case    4:  		/* rlwimi R10, R29, 16, 0, 15 */
		/* 82082D74h case    4:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R10,regs.R29);
		/* 82082D74h case    4:*/		return 0x82082D78;
		  /* 82082D78h */ case    5:  		/* ori R11, R11, 13824 */
		/* 82082D78h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x3600);
		/* 82082D78h case    5:*/		return 0x82082D7C;
		  /* 82082D7Ch */ case    6:  		/* cmpwi CR6, R22, 0 */
		/* 82082D7Ch case    6:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 82082D7Ch case    6:*/		return 0x82082D80;
		  /* 82082D80h */ case    7:  		/* stwu R11, <#[R3 + 4]> */
		/* 82082D80h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082D80h case    7:*/		return 0x82082D84;
		  /* 82082D84h */ case    8:  		/* li R11, 6 */
		/* 82082D84h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 82082D84h case    8:*/		return 0x82082D88;
		  /* 82082D88h */ case    9:  		/* stwu R10, <#[R3 + 4]> */
		/* 82082D88h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082D88h case    9:*/		return 0x82082D8C;
		  /* 82082D8Ch */ case   10:  		/* stwu R28, <#[R3 + 4]> */
		/* 82082D8Ch case   10:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082D8Ch case   10:*/		return 0x82082D90;
		  /* 82082D90h */ case   11:  		/* stwu R11, <#[R3 + 4]> */
		/* 82082D90h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082D90h case   11:*/		return 0x82082D94;
		  /* 82082D94h */ case   12:  		/* stwu R9, <#[R3 + 4]> */
		/* 82082D94h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082D94h case   12:*/		return 0x82082D98;
		  /* 82082D98h */ case   13:  		/* lwz R11, <#[R31 + 10396]> */
		/* 82082D98h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000289C) );
		/* 82082D98h case   13:*/		return 0x82082D9C;
		  /* 82082D9Ch */ case   14:  		/* stwu R11, <#[R3 + 4]> */
		/* 82082D9Ch case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082D9Ch case   14:*/		return 0x82082DA0;
		  /* 82082DA0h */ case   15:  		/* stw R3, <#[R31 + 48]> */
		/* 82082DA0h case   15:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82082DA0h case   15:*/		return 0x82082DA4;
		  /* 82082DA4h */ case   16:  		/* bc 12, CR6_EQ, 52 */
		/* 82082DA4h case   16:*/		if ( regs.CR[6].eq ) { return 0x82082DD8;  }
		/* 82082DA4h case   16:*/		return 0x82082DA8;
		  /* 82082DA8h */ case   17:  		/* lwz R11, <#[R31 + 10440]> */
		/* 82082DA8h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000028C8) );
		/* 82082DA8h case   17:*/		return 0x82082DAC;
		  /* 82082DACh */ case   18:  		/* mr R3, R31 */
		/* 82082DACh case   18:*/		regs.R3 = regs.R31;
		/* 82082DACh case   18:*/		return 0x82082DB0;
		  /* 82082DB0h */ case   19:  		/* lwz R10, <#[R31 + 10436]> */
		/* 82082DB0h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000028C4) );
		/* 82082DB0h case   19:*/		return 0x82082DB4;
		  /* 82082DB4h */ case   20:  		/* rlwinm R9, R11, 1, 0, 30 */
		/* 82082DB4h case   20:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R11);
		/* 82082DB4h case   20:*/		return 0x82082DB8;
	}
	return 0x82082DB8;
} // Block from 82082D64h-82082DB8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82082DB8h
// Function '?PixSyncronizeToPresentationInterval@D3D@@YAXPAVCDevice@1@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082DB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082DB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082DB8);
		  /* 82082DB8h */ case    0:  		/* rlwinm R11, R11, 17, 0, 14 */
		/* 82082DB8h case    0:*/		cpu::op::rlwinm<0,17,0,14>(regs,&regs.R11,regs.R11);
		/* 82082DB8h case    0:*/		return 0x82082DBC;
		  /* 82082DBCh */ case    1:  		/* rlwinm R8, R10, 1, 0, 30 */
		/* 82082DBCh case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R8,regs.R10);
		/* 82082DBCh case    1:*/		return 0x82082DC0;
		  /* 82082DC0h */ case    2:  		/* srawi R7, R9, 17 */
		/* 82082DC0h case    2:*/		cpu::op::srawi<0,17>(regs,&regs.R7,regs.R9);
		/* 82082DC0h case    2:*/		return 0x82082DC4;
		  /* 82082DC4h */ case    3:  		/* rlwinm R10, R10, 17, 0, 14 */
		/* 82082DC4h case    3:*/		cpu::op::rlwinm<0,17,0,14>(regs,&regs.R10,regs.R10);
		/* 82082DC4h case    3:*/		return 0x82082DC8;
		  /* 82082DC8h */ case    4:  		/* srawi R6, R11, 17 */
		/* 82082DC8h case    4:*/		cpu::op::srawi<0,17>(regs,&regs.R6,regs.R11);
		/* 82082DC8h case    4:*/		return 0x82082DCC;
		  /* 82082DCCh */ case    5:  		/* srawi R5, R8, 17 */
		/* 82082DCCh case    5:*/		cpu::op::srawi<0,17>(regs,&regs.R5,regs.R8);
		/* 82082DCCh case    5:*/		return 0x82082DD0;
		  /* 82082DD0h */ case    6:  		/* srawi R4, R10, 17 */
		/* 82082DD0h case    6:*/		cpu::op::srawi<0,17>(regs,&regs.R4,regs.R10);
		/* 82082DD0h case    6:*/		return 0x82082DD4;
		  /* 82082DD4h */ case    7:  		/* bl -134700 */
		/* 82082DD4h case    7:*/		regs.LR = 0x82082DD8; return 0x82061FA8;
		/* 82082DD4h case    7:*/		return 0x82082DD8;
	}
	return 0x82082DD8;
} // Block from 82082DB8h-82082DD8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82082DD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082DD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082DD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082DD8);
		  /* 82082DD8h */ case    0:  		/* lwz R11, <#[R31 + 11036]> */
		/* 82082DD8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B1C) );
		/* 82082DD8h case    0:*/		return 0x82082DDC;
		  /* 82082DDCh */ case    1:  		/* cmplwi CR6, R21, 0 */
		/* 82082DDCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 82082DDCh case    1:*/		return 0x82082DE0;
		  /* 82082DE0h */ case    2:  		/* stw R11, <#[R15 + 8]> */
		/* 82082DE0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000008) );
		/* 82082DE0h case    2:*/		return 0x82082DE4;
		  /* 82082DE4h */ case    3:  		/* bc 4, CR6_EQ, 44 */
		/* 82082DE4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82082E10;  }
		/* 82082DE4h case    3:*/		return 0x82082DE8;
		  /* 82082DE8h */ case    4:  		/* ld R11, <#[R31 + 16]> */
		/* 82082DE8h case    4:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082DE8h case    4:*/		return 0x82082DEC;
		  /* 82082DECh */ case    5:  		/* oris R11, R11, 8 */
		/* 82082DECh case    5:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8);
		/* 82082DECh case    5:*/		return 0x82082DF0;
		  /* 82082DF0h */ case    6:  		/* std R11, <#[R31 + 16]> */
		/* 82082DF0h case    6:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082DF0h case    6:*/		return 0x82082DF4;
		  /* 82082DF4h */ case    7:  		/* ld R11, <#[R31 + 24]> */
		/* 82082DF4h case    7:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82082DF4h case    7:*/		return 0x82082DF8;
		  /* 82082DF8h */ case    8:  		/* oris R11, R11, 32768 */
		/* 82082DF8h case    8:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8000);
		/* 82082DF8h case    8:*/		return 0x82082DFC;
		  /* 82082DFCh */ case    9:  		/* std R11, <#[R31 + 24]> */
		/* 82082DFCh case    9:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 82082DFCh case    9:*/		return 0x82082E00;
		  /* 82082E00h */ case   10:  		/* ld R11, <#[R31 + 16]> */
		/* 82082E00h case   10:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082E00h case   10:*/		return 0x82082E04;
		  /* 82082E04h */ case   11:  		/* oris R11, R11, 1 */
		/* 82082E04h case   11:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82082E04h case   11:*/		return 0x82082E08;
		  /* 82082E08h */ case   12:  		/* ori R11, R11, 32768 */
		/* 82082E08h case   12:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x8000);
		/* 82082E08h case   12:*/		return 0x82082E0C;
		  /* 82082E0Ch */ case   13:  		/* std R11, <#[R31 + 16]> */
		/* 82082E0Ch case   13:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082E0Ch case   13:*/		return 0x82082E10;
	}
	return 0x82082E10;
} // Block from 82082DD8h-82082E10h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82082E10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082E10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082E10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082E10);
		  /* 82082E10h */ case    0:  		/* ld R11, <#[R31 + 16]> */
		/* 82082E10h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082E10h case    0:*/		return 0x82082E14;
		  /* 82082E14h */ case    1:  		/* addi R3, R15, 28 */
		/* 82082E14h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R15,0x1C);
		/* 82082E14h case    1:*/		return 0x82082E18;
		  /* 82082E18h */ case    2:  		/* addi R6, R1, 156 */
		/* 82082E18h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x9C);
		/* 82082E18h case    2:*/		return 0x82082E1C;
		  /* 82082E1Ch */ case    3:  		/* ori R11, R11, 8 */
		/* 82082E1Ch case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x8);
		/* 82082E1Ch case    3:*/		return 0x82082E20;
		  /* 82082E20h */ case    4:  		/* addi R5, R1, 148 */
		/* 82082E20h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x94);
		/* 82082E20h case    4:*/		return 0x82082E24;
		  /* 82082E24h */ case    5:  		/* std R11, <#[R31 + 16]> */
		/* 82082E24h case    5:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082E24h case    5:*/		return 0x82082E28;
		  /* 82082E28h */ case    6:  		/* ori R11, R11, 2048 */
		/* 82082E28h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x800);
		/* 82082E28h case    6:*/		return 0x82082E2C;
		  /* 82082E2Ch */ case    7:  		/* addi R4, R1, 144 */
		/* 82082E2Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x90);
		/* 82082E2Ch case    7:*/		return 0x82082E30;
		  /* 82082E30h */ case    8:  		/* std R11, <#[R31 + 16]> */
		/* 82082E30h case    8:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082E30h case    8:*/		return 0x82082E34;
		  /* 82082E34h */ case    9:  		/* ori R11, R11, 256 */
		/* 82082E34h case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x100);
		/* 82082E34h case    9:*/		return 0x82082E38;
		  /* 82082E38h */ case   10:  		/* std R11, <#[R31 + 16]> */
		/* 82082E38h case   10:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82082E38h case   10:*/		return 0x82082E3C;
		  /* 82082E3Ch */ case   11:  		/* bl -120964 */
		/* 82082E3Ch case   11:*/		regs.LR = 0x82082E40; return 0x820655B8;
		/* 82082E3Ch case   11:*/		return 0x82082E40;
		  /* 82082E40h */ case   12:  		/* addi R11, R1, 136 */
		/* 82082E40h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x88);
		/* 82082E40h case   12:*/		return 0x82082E44;
		  /* 82082E44h */ case   13:  		/* addi R10, R1, 160 */
		/* 82082E44h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xA0);
		/* 82082E44h case   13:*/		return 0x82082E48;
		  /* 82082E48h */ case   14:  		/* lwz R9, <#[R1 + 152]> */
		/* 82082E48h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000098) );
		/* 82082E48h case   14:*/		return 0x82082E4C;
		  /* 82082E4Ch */ case   15:  		/* addi R8, R1, 192 */
		/* 82082E4Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 82082E4Ch case   15:*/		return 0x82082E50;
		  /* 82082E50h */ case   16:  		/* stw R11, <#[R1 + 124]> */
		/* 82082E50h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 82082E50h case   16:*/		return 0x82082E54;
		  /* 82082E54h */ case   17:  		/* stw R10, <#[R1 + 116]> */
		/* 82082E54h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000074) );
		/* 82082E54h case   17:*/		return 0x82082E58;
		  /* 82082E58h */ case   18:  		/* stw R8, <#[R1 + 108]> */
		/* 82082E58h case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x0000006C) );
		/* 82082E58h case   18:*/		return 0x82082E5C;
		  /* 82082E5Ch */ case   19:  		/* lwz R7, <#[R15 + 44]> */
		/* 82082E5Ch case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R15 + 0x0000002C) );
		/* 82082E5Ch case   19:*/		return 0x82082E60;
		  /* 82082E60h */ case   20:  		/* lwz R5, <#[R1 + 156]> */
		/* 82082E60h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000009C) );
		/* 82082E60h case   20:*/		return 0x82082E64;
		  /* 82082E64h */ case   21:  		/* lwz R4, <#[R1 + 148]> */
		/* 82082E64h case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000094) );
		/* 82082E64h case   21:*/		return 0x82082E68;
		  /* 82082E68h */ case   22:  		/* lwz R3, <#[R1 + 144]> */
		/* 82082E68h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000090) );
		/* 82082E68h case   22:*/		return 0x82082E6C;
		  /* 82082E6Ch */ case   23:  		/* lwz R8, <#[R15 + 28]> */
		/* 82082E6Ch case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R15 + 0x0000001C) );
		/* 82082E6Ch case   23:*/		return 0x82082E70;
		  /* 82082E70h */ case   24:  		/* lwz R10, <#[R15 + 40]> */
		/* 82082E70h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R15 + 0x00000028) );
		/* 82082E70h case   24:*/		return 0x82082E74;
		  /* 82082E74h */ case   25:  		/* rlwinm R11, R8, 10, 23, 31 */
		/* 82082E74h case   25:*/		cpu::op::rlwinm<0,10,23,31>(regs,&regs.R11,regs.R8);
		/* 82082E74h case   25:*/		return 0x82082E78;
		  /* 82082E78h */ case   26:  		/* lwz R30, <#[R15 + 48]> */
		/* 82082E78h case   26:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R15 + 0x00000030) );
		/* 82082E78h case   26:*/		return 0x82082E7C;
		  /* 82082E7Ch */ case   27:  		/* rlwinm R6, R10, 13, 0, 18 */
		/* 82082E7Ch case   27:*/		cpu::op::rlwinm<0,13,0,18>(regs,&regs.R6,regs.R10);
		/* 82082E7Ch case   27:*/		return 0x82082E80;
		  /* 82082E80h */ case   28:  		/* lwz R29, <#[R15 + 32]> */
		/* 82082E80h case   28:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R15 + 0x00000020) );
		/* 82082E80h case   28:*/		return 0x82082E84;
		  /* 82082E84h */ case   29:  		/* mullw R9, R11, R9 */
		/* 82082E84h case   29:*/		cpu::op::mullw<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 82082E84h case   29:*/		return 0x82082E88;
		  /* 82082E88h */ case   30:  		/* rlwinm R11, R7, 26, 28, 31 */
		/* 82082E88h case   30:*/		cpu::op::rlwinm<0,26,28,31>(regs,&regs.R11,regs.R7);
		/* 82082E88h case   30:*/		return 0x82082E8C;
		  /* 82082E8Ch */ case   31:  		/* srawi R7, R6, 26 */
		/* 82082E8Ch case   31:*/		cpu::op::srawi<0,26>(regs,&regs.R7,regs.R6);
		/* 82082E8Ch case   31:*/		return 0x82082E90;
	}
	return 0x82082E90;
} // Block from 82082E10h-82082E90h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82082E90h
// Function '?PixInitializePerfMemory@D3D@@YA_NPAVCDevice@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082E90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082E90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082E90);
		  /* 82082E90h */ case    0:  		/* rlwinm R9, R9, 5, 0, 26 */
		/* 82082E90h case    0:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R9);
		/* 82082E90h case    0:*/		return 0x82082E94;
		  /* 82082E94h */ case    1:  		/* rlwinm R6, R10, 1, 31, 31 */
		/* 82082E94h case    1:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R6,regs.R10);
		/* 82082E94h case    1:*/		return 0x82082E98;
		  /* 82082E98h */ case    2:  		/* stw R7, <#[R1 + 92]> */
		/* 82082E98h case    2:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x0000005C) );
		/* 82082E98h case    2:*/		return 0x82082E9C;
		  /* 82082E9Ch */ case    3:  		/* stw R9, <#[R1 + 100]> */
		/* 82082E9Ch case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000064) );
		/* 82082E9Ch case    3:*/		return 0x82082EA0;
		  /* 82082EA0h */ case    4:  		/* rlwinm R9, R8, 1, 31, 31 */
		/* 82082EA0h case    4:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R9,regs.R8);
		/* 82082EA0h case    4:*/		return 0x82082EA4;
		  /* 82082EA4h */ case    5:  		/* stw R6, <#[R1 + 84]> */
		/* 82082EA4h case    5:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 82082EA4h case    5:*/		return 0x82082EA8;
		  /* 82082EA8h */ case    6:  		/* rlwinm R10, R30, 21, 31, 31 */
		/* 82082EA8h case    6:*/		cpu::op::rlwinm<0,21,31,31>(regs,&regs.R10,regs.R30);
		/* 82082EA8h case    6:*/		return 0x82082EAC;
		  /* 82082EACh */ case    7:  		/* rlwinm R8, R30, 23, 30, 31 */
		/* 82082EACh case    7:*/		cpu::op::rlwinm<0,23,30,31>(regs,&regs.R8,regs.R30);
		/* 82082EACh case    7:*/		return 0x82082EB0;
		  /* 82082EB0h */ case    8:  		/* rlwinm R7, R29, 0, 26, 31 */
		/* 82082EB0h case    8:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R7,regs.R29);
		/* 82082EB0h case    8:*/		return 0x82082EB4;
		  /* 82082EB4h */ case    9:  		/* addi R6, R11, 1 */
		/* 82082EB4h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x1);
		/* 82082EB4h case    9:*/		return 0x82082EB8;
		  /* 82082EB8h */ case   10:  		/* bl -120240 */
		/* 82082EB8h case   10:*/		regs.LR = 0x82082EBC; return 0x82065908;
		/* 82082EB8h case   10:*/		return 0x82082EBC;
		  /* 82082EBCh */ case   11:  		/* lwz R11, <#[R1 + 460]> */
		/* 82082EBCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001CC) );
		/* 82082EBCh case   11:*/		return 0x82082EC0;
		  /* 82082EC0h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 82082EC0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82082EC0h case   12:*/		return 0x82082EC4;
		  /* 82082EC4h */ case   13:  		/* bc 12, CR6_EQ, 44 */
		/* 82082EC4h case   13:*/		if ( regs.CR[6].eq ) { return 0x82082EF0;  }
		/* 82082EC4h case   13:*/		return 0x82082EC8;
		  /* 82082EC8h */ case   14:  		/* lwz R11, <#[R15 + 48]> */
		/* 82082EC8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000030) );
		/* 82082EC8h case   14:*/		return 0x82082ECC;
		  /* 82082ECCh */ case   15:  		/* rlwinm. R10, R11, 0, 0, 19 */
		/* 82082ECCh case   15:*/		cpu::op::rlwinm<1,0,0,19>(regs,&regs.R10,regs.R11);
		/* 82082ECCh case   15:*/		return 0x82082ED0;
		  /* 82082ED0h */ case   16:  		/* bc 12, CR0_EQ, 32 */
		/* 82082ED0h case   16:*/		if ( regs.CR[0].eq ) { return 0x82082EF0;  }
		/* 82082ED0h case   16:*/		return 0x82082ED4;
		  /* 82082ED4h */ case   17:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82082ED4h case   17:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82082ED4h case   17:*/		return 0x82082ED8;
		  /* 82082ED8h */ case   18:  		/* lwz R30, <#[R1 + 136]> */
		/* 82082ED8h case   18:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000088) );
		/* 82082ED8h case   18:*/		return 0x82082EDC;
		  /* 82082EDCh */ case   19:  		/* rlwinm R11, R11, 0, 3, 19 */
		/* 82082EDCh case   19:*/		cpu::op::rlwinm<0,0,3,19>(regs,&regs.R11,regs.R11);
		/* 82082EDCh case   19:*/		return 0x82082EE0;
		  /* 82082EE0h */ case   20:  		/* addi R10, R10, 512 */
		/* 82082EE0h case   20:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82082EE0h case   20:*/		return 0x82082EE4;
		  /* 82082EE4h */ case   21:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 82082EE4h case   21:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 82082EE4h case   21:*/		return 0x82082EE8;
		  /* 82082EE8h */ case   22:  		/* add R29, R10, R11 */
		/* 82082EE8h case   22:*/		cpu::op::add<0>(regs,&regs.R29,regs.R10,regs.R11);
		/* 82082EE8h case   22:*/		return 0x82082EEC;
		  /* 82082EECh */ case   23:  		/* b 36 */
		/* 82082EECh case   23:*/		return 0x82082F10;
		/* 82082EECh case   23:*/		return 0x82082EF0;
	}
	return 0x82082EF0;
} // Block from 82082E90h-82082EF0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82082EF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082EF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082EF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082EF0);
		  /* 82082EF0h */ case    0:  		/* lwz R11, <#[R15 + 32]> */
		/* 82082EF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000020) );
		/* 82082EF0h case    0:*/		return 0x82082EF4;
		  /* 82082EF4h */ case    1:  		/* lwz R30, <#[R1 + 160]> */
		/* 82082EF4h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000000A0) );
		/* 82082EF4h case    1:*/		return 0x82082EF8;
		  /* 82082EF8h */ case    2:  		/* rlwinm R10, R11, 0, 0, 19 */
		/* 82082EF8h case    2:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R10,regs.R11);
		/* 82082EF8h case    2:*/		return 0x82082EFC;
		  /* 82082EFCh */ case    3:  		/* rlwinm R11, R10, 12, 20, 31 */
		/* 82082EFCh case    3:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R11,regs.R10);
		/* 82082EFCh case    3:*/		return 0x82082F00;
		  /* 82082F00h */ case    4:  		/* rlwinm R10, R10, 0, 3, 31 */
		/* 82082F00h case    4:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R10);
		/* 82082F00h case    4:*/		return 0x82082F04;
		  /* 82082F04h */ case    5:  		/* addi R11, R11, 512 */
		/* 82082F04h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x200);
		/* 82082F04h case    5:*/		return 0x82082F08;
		  /* 82082F08h */ case    6:  		/* rlwinm R11, R11, 0, 19, 19 */
		/* 82082F08h case    6:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R11,regs.R11);
		/* 82082F08h case    6:*/		return 0x82082F0C;
		  /* 82082F0Ch */ case    7:  		/* add R29, R11, R10 */
		/* 82082F0Ch case    7:*/		cpu::op::add<0>(regs,&regs.R29,regs.R11,regs.R10);
		/* 82082F0Ch case    7:*/		return 0x82082F10;
	}
	return 0x82082F10;
} // Block from 82082EF0h-82082F10h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82082F10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082F10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082F10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082F10);
		  /* 82082F10h */ case    0:  		/* lwz R3, <#[R31 + 48]> */
		/* 82082F10h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82082F10h case    0:*/		return 0x82082F14;
		  /* 82082F14h */ case    1:  		/* lwz R11, <#[R31 + 56]> */
		/* 82082F14h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82082F14h case    1:*/		return 0x82082F18;
		  /* 82082F18h */ case    2:  		/* cmplw CR6, R3, R11 */
		/* 82082F18h case    2:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82082F18h case    2:*/		return 0x82082F1C;
		  /* 82082F1Ch */ case    3:  		/* bc 4, CR6_GT, 12 */
		/* 82082F1Ch case    3:*/		if ( !regs.CR[6].gt ) { return 0x82082F28;  }
		/* 82082F1Ch case    3:*/		return 0x82082F20;
		  /* 82082F20h */ case    4:  		/* mr R3, R31 */
		/* 82082F20h case    4:*/		regs.R3 = regs.R31;
		/* 82082F20h case    4:*/		return 0x82082F24;
		  /* 82082F24h */ case    5:  		/* bl -60956 */
		/* 82082F24h case    5:*/		regs.LR = 0x82082F28; return 0x82074108;
		/* 82082F24h case    5:*/		return 0x82082F28;
	}
	return 0x82082F28;
} // Block from 82082F10h-82082F28h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82082F28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082F28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082F28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082F28);
		  /* 82082F28h */ case    0:  		/* lis R10, -32215 */
		/* 82082F28h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8229);
		/* 82082F28h case    0:*/		return 0x82082F2C;
		  /* 82082F2Ch */ case    1:  		/* mr R11, R3 */
		/* 82082F2Ch case    1:*/		regs.R11 = regs.R3;
		/* 82082F2Ch case    1:*/		return 0x82082F30;
		  /* 82082F30h */ case    2:  		/* lwz R10, <#[R10 - 31320]> */
		/* 82082F30h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0xFFFF85A8) );
		/* 82082F30h case    2:*/		return 0x82082F34;
		  /* 82082F34h */ case    3:  		/* cmpwi CR6, R10, 0 */
		/* 82082F34h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 82082F34h case    3:*/		return 0x82082F38;
		  /* 82082F38h */ case    4:  		/* bc 12, CR6_EQ, 136 */
		/* 82082F38h case    4:*/		if ( regs.CR[6].eq ) { return 0x82082FC0;  }
		/* 82082F38h case    4:*/		return 0x82082F3C;
		  /* 82082F3Ch */ case    5:  		/* cmpwi CR6, R26, 0 */
		/* 82082F3Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 82082F3Ch case    5:*/		return 0x82082F40;
		  /* 82082F40h */ case    6:  		/* bc 4, CR6_EQ, 168 */
		/* 82082F40h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82082FE8;  }
		/* 82082F40h case    6:*/		return 0x82082F44;
		  /* 82082F44h */ case    7:  		/* li R11, 2609 */
		/* 82082F44h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0xA31);
		/* 82082F44h case    7:*/		return 0x82082F48;
		  /* 82082F48h */ case    8:  		/* lis R10, 768 */
		/* 82082F48h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0x300);
		/* 82082F48h case    8:*/		return 0x82082F4C;
		  /* 82082F4Ch */ case    9:  		/* stwu R11, <#[R3 + 4]> */
		/* 82082F4Ch case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082F4Ch case    9:*/		return 0x82082F50;
		  /* 82082F50h */ case   10:  		/* lis R11, 1 */
		/* 82082F50h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0x1);
		/* 82082F50h case   10:*/		return 0x82082F54;
		  /* 82082F54h */ case   11:  		/* addi R9, R30, 8191 */
		/* 82082F54h case   11:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R30,0x1FFF);
		/* 82082F54h case   11:*/		return 0x82082F58;
		  /* 82082F58h */ case   12:  		/* ori R11, R11, 2607 */
		/* 82082F58h case   12:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xA2F);
		/* 82082F58h case   12:*/		return 0x82082F5C;
		  /* 82082F5Ch */ case   13:  		/* rlwinm R9, R9, 0, 0, 19 */
		/* 82082F5Ch case   13:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R9,regs.R9);
		/* 82082F5Ch case   13:*/		return 0x82082F60;
		  /* 82082F60h */ case   14:  		/* rlwinm R8, R29, 0, 0, 19 */
		/* 82082F60h case   14:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R8,regs.R29);
		/* 82082F60h case   14:*/		return 0x82082F64;
		  /* 82082F64h */ case   15:  		/* stwu R10, <#[R3 + 4]> */
		/* 82082F64h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082F64h case   15:*/		return 0x82082F68;
		  /* 82082F68h */ case   16:  		/* lis R7, -16380 */
		/* 82082F68h case   16:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFFC004);
		/* 82082F68h case   16:*/		return 0x82082F6C;
		  /* 82082F6Ch */ case   17:  		/* li R10, 3 */
		/* 82082F6Ch case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 82082F6Ch case   17:*/		return 0x82082F70;
		  /* 82082F70h */ case   18:  		/* ori R7, R7, 15360 */
		/* 82082F70h case   18:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R7,0x3C00);
		/* 82082F70h case   18:*/		return 0x82082F74;
		  /* 82082F74h */ case   19:  		/* li R6, 2609 */
		/* 82082F74h case   19:*/		cpu::op::li<0>(regs,&regs.R6,0xA31);
		/* 82082F74h case   19:*/		return 0x82082F78;
		  /* 82082F78h */ case   20:  		/* lis R4, -32768 */
		/* 82082F78h case   20:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8000);
		/* 82082F78h case   20:*/		return 0x82082F7C;
		  /* 82082F7Ch */ case   21:  		/* stwu R11, <#[R3 + 4]> */
		/* 82082F7Ch case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082F7Ch case   21:*/		return 0x82082F80;
		  /* 82082F80h */ case   22:  		/* li R30, 8 */
		/* 82082F80h case   22:*/		cpu::op::li<0>(regs,&regs.R30,0x8);
		/* 82082F80h case   22:*/		return 0x82082F84;
		  /* 82082F84h */ case   23:  		/* li R11, 1480 */
		/* 82082F84h case   23:*/		cpu::op::li<0>(regs,&regs.R11,0x5C8);
		/* 82082F84h case   23:*/		return 0x82082F88;
		  /* 82082F88h */ case   24:  		/* lis R29, 2 */
		/* 82082F88h case   24:*/		cpu::op::lis<0>(regs,&regs.R29,0x2);
		/* 82082F88h case   24:*/		return 0x82082F8C;
		  /* 82082F8Ch */ case   25:  		/* mr R5, R19 */
		/* 82082F8Ch case   25:*/		regs.R5 = regs.R19;
		/* 82082F8Ch case   25:*/		return 0x82082F90;
	}
	return 0x82082F90;
} // Block from 82082F28h-82082F90h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82082F90h
// Function '?PixSwap@D3D@@YAXPAVCDevice@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082F90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082F90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082F90);
		  /* 82082F90h */ case    0:  		/* stwu R9, <#[R3 + 4]> */
		/* 82082F90h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082F90h case    0:*/		return 0x82082F94;
		  /* 82082F94h */ case    1:  		/* stwu R8, <#[R3 + 4]> */
		/* 82082F94h case    1:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082F94h case    1:*/		return 0x82082F98;
		  /* 82082F98h */ case    2:  		/* stwu R7, <#[R3 + 4]> */
		/* 82082F98h case    2:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082F98h case    2:*/		return 0x82082F9C;
		  /* 82082F9Ch */ case    3:  		/* stwu R10, <#[R3 + 4]> */
		/* 82082F9Ch case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082F9Ch case    3:*/		return 0x82082FA0;
		  /* 82082FA0h */ case    4:  		/* stwu R6, <#[R3 + 4]> */
		/* 82082FA0h case    4:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082FA0h case    4:*/		return 0x82082FA4;
		  /* 82082FA4h */ case    5:  		/* stwu R19, <#[R3 + 4]> */
		/* 82082FA4h case    5:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082FA4h case    5:*/		return 0x82082FA8;
		  /* 82082FA8h */ case    6:  		/* stwu R4, <#[R3 + 4]> */
		/* 82082FA8h case    6:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082FA8h case    6:*/		return 0x82082FAC;
		  /* 82082FACh */ case    7:  		/* stwu R30, <#[R3 + 4]> */
		/* 82082FACh case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082FACh case    7:*/		return 0x82082FB0;
		  /* 82082FB0h */ case    8:  		/* stwu R11, <#[R3 + 4]> */
		/* 82082FB0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82082FB0h case    8:*/		return 0x82082FB4;
		  /* 82082FB4h */ case    9:  		/* mr R11, R3 */
		/* 82082FB4h case    9:*/		regs.R11 = regs.R3;
		/* 82082FB4h case    9:*/		return 0x82082FB8;
		  /* 82082FB8h */ case   10:  		/* stwu R29, <#[R11 + 4]> */
		/* 82082FB8h case   10:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82082FB8h case   10:*/		return 0x82082FBC;
		  /* 82082FBCh */ case   11:  		/* b 44 */
		/* 82082FBCh case   11:*/		return 0x82082FE8;
		/* 82082FBCh case   11:*/		return 0x82082FC0;
	}
	return 0x82082FC0;
} // Block from 82082F90h-82082FC0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82082FC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082FC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082FC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082FC0);
		  /* 82082FC0h */ case    0:  		/* cmpwi CR6, R26, 0 */
		/* 82082FC0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 82082FC0h case    0:*/		return 0x82082FC4;
		  /* 82082FC4h */ case    1:  		/* bc 4, CR6_EQ, 36 */
		/* 82082FC4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82082FE8;  }
		/* 82082FC4h case    1:*/		return 0x82082FC8;
		  /* 82082FC8h */ case    2:  		/* lbz R10, <#[R31 + 11072]> */
		/* 82082FC8h case    2:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002B40) );
		/* 82082FC8h case    2:*/		return 0x82082FCC;
		  /* 82082FCCh */ case    3:  		/* li R12, 3 */
		/* 82082FCCh case    3:*/		cpu::op::li<0>(regs,&regs.R12,0x3);
		/* 82082FCCh case    3:*/		return 0x82082FD0;
		  /* 82082FD0h */ case    4:  		/* ori R10, R10, 192 */
		/* 82082FD0h case    4:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0xC0);
		/* 82082FD0h case    4:*/		return 0x82082FD4;
		  /* 82082FD4h */ case    5:  		/* rldicr R12, R12, 62, 1 */
		/* 82082FD4h case    5:*/		cpu::op::rldicr<0,62,1>(regs,&regs.R12,regs.R12);
		/* 82082FD4h case    5:*/		return 0x82082FD8;
		  /* 82082FD8h */ case    6:  		/* stb R10, <#[R31 + 11072]> */
		/* 82082FD8h case    6:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R31 + 0x00002B40) );
		/* 82082FD8h case    6:*/		return 0x82082FDC;
		  /* 82082FDCh */ case    7:  		/* ld R10, <#[R31 + 32]> */
		/* 82082FDCh case    7:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R31 + 0x00000020) );
		/* 82082FDCh case    7:*/		return 0x82082FE0;
		  /* 82082FE0h */ case    8:  		/* or R10, R10, R12 */
		/* 82082FE0h case    8:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 82082FE0h case    8:*/		return 0x82082FE4;
		  /* 82082FE4h */ case    9:  		/* std R10, <#[R31 + 32]> */
		/* 82082FE4h case    9:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R31 + 0x00000020) );
		/* 82082FE4h case    9:*/		return 0x82082FE8;
	}
	return 0x82082FE8;
} // Block from 82082FC0h-82082FE8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82082FE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82082FE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82082FE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82082FE8);
		  /* 82082FE8h */ case    0:  		/* li R10, 8984 */
		/* 82082FE8h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x2318);
		/* 82082FE8h case    0:*/		return 0x82082FEC;
		  /* 82082FECh */ case    1:  		/* stw R19, <#[R31 + 10776]> */
		/* 82082FECh case    1:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R31 + 0x00002A18) );
		/* 82082FECh case    1:*/		return 0x82082FF0;
		  /* 82082FF0h */ case    2:  		/* stw R19, <#[R31 + 10788]> */
		/* 82082FF0h case    2:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R31 + 0x00002A24) );
		/* 82082FF0h case    2:*/		return 0x82082FF4;
		  /* 82082FF4h */ case    3:  		/* mr R9, R19 */
		/* 82082FF4h case    3:*/		regs.R9 = regs.R19;
		/* 82082FF4h case    3:*/		return 0x82082FF8;
		  /* 82082FF8h */ case    4:  		/* stwu R10, <#[R11 + 4]> */
		/* 82082FF8h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82082FF8h case    4:*/		return 0x82082FFC;
		  /* 82082FFCh */ case    5:  		/* li R10, 8987 */
		/* 82082FFCh case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x231B);
		/* 82082FFCh case    5:*/		return 0x82083000;
		  /* 82083000h */ case    6:  		/* stwu R19, <#[R11 + 4]> */
		/* 82083000h case    6:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82083000h case    6:*/		return 0x82083004;
		  /* 82083004h */ case    7:  		/* stwu R10, <#[R11 + 4]> */
		/* 82083004h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82083004h case    7:*/		return 0x82083008;
		  /* 82083008h */ case    8:  		/* mr R10, R11 */
		/* 82083008h case    8:*/		regs.R10 = regs.R11;
		/* 82083008h case    8:*/		return 0x8208300C;
		  /* 8208300Ch */ case    9:  		/* stwu R19, <#[R10 + 4]> */
		/* 8208300Ch case    9:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 8208300Ch case    9:*/		return 0x82083010;
		  /* 82083010h */ case   10:  		/* lwz R11, <#[R31 + 11036]> */
		/* 82083010h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B1C) );
		/* 82083010h case   10:*/		return 0x82083014;
		  /* 82083014h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 82083014h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82083014h case   11:*/		return 0x82083018;
		  /* 82083018h */ case   12:  		/* stw R10, <#[R31 + 48]> */
		/* 82083018h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 82083018h case   12:*/		return 0x8208301C;
		  /* 8208301Ch */ case   13:  		/* bc 12, CR6_EQ, 16 */
		/* 8208301Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x8208302C;  }
		/* 8208301Ch case   13:*/		return 0x82083020;
		  /* 82083020h */ case   14:  		/* stw R11, <#[R15 + 8]> */
		/* 82083020h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000008) );
		/* 82083020h case   14:*/		return 0x82083024;
		  /* 82083024h */ case   15:  		/* stw R11, <#[R15 + 12]> */
		/* 82083024h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x0000000C) );
		/* 82083024h case   15:*/		return 0x82083028;
		  /* 82083028h */ case   16:  		/* b 80 */
		/* 82083028h case   16:*/		return 0x82083078;
		/* 82083028h case   16:*/		return 0x8208302C;
	}
	return 0x8208302C;
} // Block from 82082FE8h-8208302Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8208302Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208302C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208302C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208302C);
		  /* 8208302Ch */ case    0:  		/* lwz R11, <#[R31 + 11040]> */
		/* 8208302Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B20) );
		/* 8208302Ch case    0:*/		return 0x82083030;
		  /* 82083030h */ case    1:  		/* lwz R10, <#[R15]> */
		/* 82083030h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R15 + 0x00000000) );
		/* 82083030h case    1:*/		return 0x82083034;
		  /* 82083034h */ case    2:  		/* and. R11, R11, R10 */
		/* 82083034h case    2:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82083034h case    2:*/		return 0x82083038;
		  /* 82083038h */ case    3:  		/* bc 12, CR0_EQ, 64 */
		/* 82083038h case    3:*/		if ( regs.CR[0].eq ) { return 0x82083078;  }
		/* 82083038h case    3:*/		return 0x8208303C;
		  /* 8208303Ch */ case    4:  		/* lwz R11, <#[R31 + 13932]> */
		/* 8208303Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000366C) );
		/* 8208303Ch case    4:*/		return 0x82083040;
		  /* 82083040h */ case    5:  		/* lwz R3, <#[R31 + 13928]> */
		/* 82083040h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00003668) );
		/* 82083040h case    5:*/		return 0x82083044;
		  /* 82083044h */ case    6:  		/* cmplw CR6, R3, R11 */
		/* 82083044h case    6:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82083044h case    6:*/		return 0x82083048;
		  /* 82083048h */ case    7:  		/* bc 12, CR6_LT, 12 */
		/* 82083048h case    7:*/		if ( regs.CR[6].lt ) { return 0x82083054;  }
		/* 82083048h case    7:*/		return 0x8208304C;
		  /* 8208304Ch */ case    8:  		/* mr R3, R31 */
		/* 8208304Ch case    8:*/		regs.R3 = regs.R31;
		/* 8208304Ch case    8:*/		return 0x82083050;
		  /* 82083050h */ case    9:  		/* bl -59104 */
		/* 82083050h case    9:*/		regs.LR = 0x82083054; return 0x82074970;
		/* 82083050h case    9:*/		return 0x82083054;
	}
	return 0x82083054;
} // Block from 8208302Ch-82083054h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82083054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083054);
		  /* 82083054h */ case    0:  		/* stw R20, <#[R1 + 196]> */
		/* 82083054h case    0:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x000000C4) );
		/* 82083054h case    0:*/		return 0x82083058;
		  /* 82083058h */ case    1:  		/* addi R11, R3, 8 */
		/* 82083058h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x8);
		/* 82083058h case    1:*/		return 0x8208305C;
		  /* 8208305Ch */ case    2:  		/* lwz R10, <#[R1 + 192]> */
		/* 8208305Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000C0) );
		/* 8208305Ch case    2:*/		return 0x82083060;
		  /* 82083060h */ case    3:  		/* rlwimi R10, R15, 30, 2, 31 */
		/* 82083060h case    3:*/		cpu::op::rlwimi<0,30,2,31>(regs,&regs.R10,regs.R15);
		/* 82083060h case    3:*/		return 0x82083064;
		  /* 82083064h */ case    4:  		/* oris R10, R10, 16384 */
		/* 82083064h case    4:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x4000);
		/* 82083064h case    4:*/		return 0x82083068;
		  /* 82083068h */ case    5:  		/* stw R10, <#[R1 + 192]> */
		/* 82083068h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000C0) );
		/* 82083068h case    5:*/		return 0x8208306C;
		  /* 8208306Ch */ case    6:  		/* ld R10, <#[R1 + 192]> */
		/* 8208306Ch case    6:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R1 + 0x000000C0) );
		/* 8208306Ch case    6:*/		return 0x82083070;
		  /* 82083070h */ case    7:  		/* std R10, <#[R3]> */
		/* 82083070h case    7:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 82083070h case    7:*/		return 0x82083074;
		  /* 82083074h */ case    8:  		/* stw R11, <#[R31 + 13928]> */
		/* 82083074h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00003668) );
		/* 82083074h case    8:*/		return 0x82083078;
	}
	return 0x82083078;
} // Block from 82083054h-82083078h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82083078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083078);
		  /* 82083078h */ case    0:  		/* addi R1, R1, 384 */
		/* 82083078h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x180);
		/* 82083078h case    0:*/		return 0x8208307C;
		  /* 8208307Ch */ case    1:  		/* lfd FR31, <#[R1 - 160]> */
		/* 8208307Ch case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 8208307Ch case    1:*/		return 0x82083080;
		  /* 82083080h */ case    2:  		/* b 57840 */
		/* 82083080h case    2:*/		return 0x82091270;
		/* 82083080h case    2:*/		return 0x82083084;
		  /* 82083084h */ case    3:  		/* nop */
		/* 82083084h case    3:*/		cpu::op::nop();
		/* 82083084h case    3:*/		return 0x82083088;
	}
	return 0x82083088;
} // Block from 82083078h-82083088h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82083088h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083088);
		  /* 82083088h */ case    0:  		/* mfspr R12, LR */
		/* 82083088h case    0:*/		regs.R12 = regs.LR;
		/* 82083088h case    0:*/		return 0x8208308C;
		  /* 8208308Ch */ case    1:  		/* bl 57808 */
		/* 8208308Ch case    1:*/		regs.LR = 0x82083090; return 0x8209125C;
		/* 8208308Ch case    1:*/		return 0x82083090;
		  /* 82083090h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82083090h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82083090h case    2:*/		return 0x82083094;
		  /* 82083094h */ case    3:  		/* lwz R30, <#[R1 + 260]> */
		/* 82083094h case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000104) );
		/* 82083094h case    3:*/		return 0x82083098;
		  /* 82083098h */ case    4:  		/* mr R31, R10 */
		/* 82083098h case    4:*/		regs.R31 = regs.R10;
		/* 82083098h case    4:*/		return 0x8208309C;
		  /* 8208309Ch */ case    5:  		/* lwz R29, <#[R1 + 252]> */
		/* 8208309Ch case    5:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000000FC) );
		/* 8208309Ch case    5:*/		return 0x820830A0;
		  /* 820830A0h */ case    6:  		/* mr R11, R9 */
		/* 820830A0h case    6:*/		regs.R11 = regs.R9;
		/* 820830A0h case    6:*/		return 0x820830A4;
		  /* 820830A4h */ case    7:  		/* mr R10, R8 */
		/* 820830A4h case    7:*/		regs.R10 = regs.R8;
		/* 820830A4h case    7:*/		return 0x820830A8;
		  /* 820830A8h */ case    8:  		/* stw R31, <#[R1 + 92]> */
		/* 820830A8h case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 820830A8h case    8:*/		return 0x820830AC;
		  /* 820830ACh */ case    9:  		/* mr R9, R7 */
		/* 820830ACh case    9:*/		regs.R9 = regs.R7;
		/* 820830ACh case    9:*/		return 0x820830B0;
		  /* 820830B0h */ case   10:  		/* stw R11, <#[R1 + 84]> */
		/* 820830B0h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 820830B0h case   10:*/		return 0x820830B4;
		  /* 820830B4h */ case   11:  		/* mr R8, R6 */
		/* 820830B4h case   11:*/		regs.R8 = regs.R6;
		/* 820830B4h case   11:*/		return 0x820830B8;
		  /* 820830B8h */ case   12:  		/* li R7, 0 */
		/* 820830B8h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820830B8h case   12:*/		return 0x820830BC;
		  /* 820830BCh */ case   13:  		/* stw R30, <#[R1 + 116]> */
		/* 820830BCh case   13:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000074) );
		/* 820830BCh case   13:*/		return 0x820830C0;
		  /* 820830C0h */ case   14:  		/* li R6, 0 */
		/* 820830C0h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820830C0h case   14:*/		return 0x820830C4;
		  /* 820830C4h */ case   15:  		/* stw R29, <#[R1 + 108]> */
		/* 820830C4h case   15:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x0000006C) );
		/* 820830C4h case   15:*/		return 0x820830C8;
		  /* 820830C8h */ case   16:  		/* bl -4504 */
		/* 820830C8h case   16:*/		regs.LR = 0x820830CC; return 0x82081F30;
		/* 820830C8h case   16:*/		return 0x820830CC;
		  /* 820830CCh */ case   17:  		/* addi R1, R1, 160 */
		/* 820830CCh case   17:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 820830CCh case   17:*/		return 0x820830D0;
		  /* 820830D0h */ case   18:  		/* b 57820 */
		/* 820830D0h case   18:*/		return 0x820912AC;
		/* 820830D0h case   18:*/		return 0x820830D4;
		  /* 820830D4h */ case   19:  		/* nop */
		/* 820830D4h case   19:*/		cpu::op::nop();
		/* 820830D4h case   19:*/		return 0x820830D8;
	}
	return 0x820830D8;
} // Block from 82083088h-820830D8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820830D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820830D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820830D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820830D8);
		  /* 820830D8h */ case    0:  		/* mfspr R12, LR */
		/* 820830D8h case    0:*/		regs.R12 = regs.LR;
		/* 820830D8h case    0:*/		return 0x820830DC;
		  /* 820830DCh */ case    1:  		/* bl 57720 */
		/* 820830DCh case    1:*/		regs.LR = 0x820830E0; return 0x82091254;
		/* 820830DCh case    1:*/		return 0x820830E0;
		  /* 820830E0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820830E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820830E0h case    2:*/		return 0x820830E4;
		  /* 820830E4h */ case    3:  		/* mr R29, R3 */
		/* 820830E4h case    3:*/		regs.R29 = regs.R3;
		/* 820830E4h case    3:*/		return 0x820830E8;
		  /* 820830E8h */ case    4:  		/* mr R28, R5 */
		/* 820830E8h case    4:*/		regs.R28 = regs.R5;
		/* 820830E8h case    4:*/		return 0x820830EC;
		  /* 820830ECh */ case    5:  		/* mr R27, R6 */
		/* 820830ECh case    5:*/		regs.R27 = regs.R6;
		/* 820830ECh case    5:*/		return 0x820830F0;
		  /* 820830F0h */ case    6:  		/* mr R31, R7 */
		/* 820830F0h case    6:*/		regs.R31 = regs.R7;
		/* 820830F0h case    6:*/		return 0x820830F4;
		  /* 820830F4h */ case    7:  		/* mr R30, R8 */
		/* 820830F4h case    7:*/		regs.R30 = regs.R8;
		/* 820830F4h case    7:*/		return 0x820830F8;
		  /* 820830F8h */ case    8:  		/* lwz R11, <#[R29 + 52]> */
		/* 820830F8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000034) );
		/* 820830F8h case    8:*/		return 0x820830FC;
		  /* 820830FCh */ case    9:  		/* twi 6, R30, 0 */
		/* 820830FCh case    9:*/		cpu::op::tw<6>(regs, 0x820830FC, regs.R30, 0x00000000);
		/* 820830FCh case    9:*/		return 0x82083100;
		  /* 82083100h */ case   10:  		/* subf R11, R4, R11 */
		/* 82083100h case   10:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R4,regs.R11);
		/* 82083100h case   10:*/		return 0x82083104;
		  /* 82083104h */ case   11:  		/* srawi R11, R11, 2 */
		/* 82083104h case   11:*/		cpu::op::srawi<0,2>(regs,&regs.R11,regs.R11);
		/* 82083104h case   11:*/		return 0x82083108;
		  /* 82083108h */ case   12:  		/* addi R11, R11, -1 */
		/* 82083108h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82083108h case   12:*/		return 0x8208310C;
		  /* 8208310Ch */ case   13:  		/* rlwinm R10, R11, 1, 0, 31 */
		/* 8208310Ch case   13:*/		cpu::op::rlwinm<0,1,0,31>(regs,&regs.R10,regs.R11);
		/* 8208310Ch case   13:*/		return 0x82083110;
		  /* 82083110h */ case   14:  		/* divw. R11, R11, R30 */
		/* 82083110h case   14:*/		cpu::op::divw<1>(regs,&regs.R11,regs.R11,regs.R30);
		/* 82083110h case   14:*/		return 0x82083114;
		  /* 82083114h */ case   15:  		/* addi R10, R10, -1 */
		/* 82083114h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82083114h case   15:*/		return 0x82083118;
		  /* 82083118h */ case   16:  		/* andc R10, R30, R10 */
		/* 82083118h case   16:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R30,regs.R10);
		/* 82083118h case   16:*/		return 0x8208311C;
		  /* 8208311Ch */ case   17:  		/* twi 5, R10, -1 */
		/* 8208311Ch case   17:*/		cpu::op::tw<5>(regs, 0x8208311C, regs.R10, 0xFFFFFFFF);
		/* 8208311Ch case   17:*/		return 0x82083120;
		  /* 82083120h */ case   18:  		/* bc 4, CR0_GT, 68 */
		/* 82083120h case   18:*/		if ( !regs.CR[0].gt ) { return 0x82083164;  }
		/* 82083120h case   18:*/		return 0x82083124;
		  /* 82083124h */ case   19:  		/* mullw R11, R11, R30 */
		/* 82083124h case   19:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 82083124h case   19:*/		return 0x82083128;
		  /* 82083128h */ case   20:  		/* cmplw CR6, R11, R31 */
		/* 82083128h case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 82083128h case   20:*/		return 0x8208312C;
		  /* 8208312Ch */ case   21:  		/* bc 12, CR6_LT, 8 */
		/* 8208312Ch case   21:*/		if ( regs.CR[6].lt ) { return 0x82083134;  }
		/* 8208312Ch case   21:*/		return 0x82083130;
		  /* 82083130h */ case   22:  		/* mr R11, R31 */
		/* 82083130h case   22:*/		regs.R11 = regs.R31;
		/* 82083130h case   22:*/		return 0x82083134;
	}
	return 0x82083134;
} // Block from 820830D8h-82083134h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82083134h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083134( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083134) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083134);
		  /* 82083134h */ case    0:  		/* addi R10, R11, -1 */
		/* 82083134h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 82083134h case    0:*/		return 0x82083138;
		  /* 82083138h */ case    1:  		/* subf R31, R11, R31 */
		/* 82083138h case    1:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 82083138h case    1:*/		return 0x8208313C;
		  /* 8208313Ch */ case    2:  		/* rlwinm R10, R10, 16, 0, 15 */
		/* 8208313Ch case    2:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R10,regs.R10);
		/* 8208313Ch case    2:*/		return 0x82083140;
		  /* 82083140h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 82083140h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82083140h case    3:*/		return 0x82083144;
		  /* 82083144h */ case    4:  		/* or R10, R10, R28 */
		/* 82083144h case    4:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R28);
		/* 82083144h case    4:*/		return 0x82083148;
		  /* 82083148h */ case    5:  		/* stwu R10, <#[R4 + 4]> */
		/* 82083148h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R4 + 0x00000004) );
		regs.R4 = (uint32)(regs.R4 + 0x00000004);
		/* 82083148h case    5:*/		return 0x8208314C;
		  /* 8208314Ch */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 8208314Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x82083160;  }
		/* 8208314Ch case    6:*/		return 0x82083150;
		  /* 82083150h */ case    7:  		/* mtspr CTR, R11 */
		/* 82083150h case    7:*/		regs.CTR = regs.R11;
		/* 82083150h case    7:*/		return 0x82083154;
		  /* 82083154h */ case    8:  		/* lwzu R10, <#[R27 + 4]> */
		/* 82083154h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000004) );
		regs.R27 = (uint32)(regs.R27 + 0x00000004);
		/* 82083154h case    8:*/		return 0x82083158;
		  /* 82083158h */ case    9:  		/* stwu R10, <#[R4 + 4]> */
		/* 82083158h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R4 + 0x00000004) );
		regs.R4 = (uint32)(regs.R4 + 0x00000004);
		/* 82083158h case    9:*/		return 0x8208315C;
		  /* 8208315Ch */ case   10:  		/* bc 16, CR0_LT, -8 */
		/* 8208315Ch case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82083154;  }
		/* 8208315Ch case   10:*/		return 0x82083160;
	}
	return 0x82083160;
} // Block from 82083134h-82083160h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82083160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083160);
		  /* 82083160h */ case    0:  		/* add R28, R11, R28 */
		/* 82083160h case    0:*/		cpu::op::add<0>(regs,&regs.R28,regs.R11,regs.R28);
		/* 82083160h case    0:*/		return 0x82083164;
	}
	return 0x82083164;
} // Block from 82083160h-82083164h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82083164h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083164( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083164) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083164);
		  /* 82083164h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82083164h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82083164h case    0:*/		return 0x82083168;
		  /* 82083168h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82083168h case    1:*/		if ( regs.CR[6].eq ) { return 0x82083180;  }
		/* 82083168h case    1:*/		return 0x8208316C;
		  /* 8208316Ch */ case    2:  		/* stw R4, <#[R29 + 48]> */
		/* 8208316Ch case    2:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R29 + 0x00000030) );
		/* 8208316Ch case    2:*/		return 0x82083170;
		  /* 82083170h */ case    3:  		/* mr R3, R29 */
		/* 82083170h case    3:*/		regs.R3 = regs.R29;
		/* 82083170h case    3:*/		return 0x82083174;
		  /* 82083174h */ case    4:  		/* bl -61548 */
		/* 82083174h case    4:*/		regs.LR = 0x82083178; return 0x82074108;
		/* 82083174h case    4:*/		return 0x82083178;
		  /* 82083178h */ case    5:  		/* lwz R4, <#[R29 + 48]> */
		/* 82083178h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000030) );
		/* 82083178h case    5:*/		return 0x8208317C;
		  /* 8208317Ch */ case    6:  		/* b -132 */
		/* 8208317Ch case    6:*/		return 0x820830F8;
		/* 8208317Ch case    6:*/		return 0x82083180;
	}
	return 0x82083180;
} // Block from 82083164h-82083180h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82083180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083180);
		  /* 82083180h */ case    0:  		/* mr R3, R4 */
		/* 82083180h case    0:*/		regs.R3 = regs.R4;
		/* 82083180h case    0:*/		return 0x82083184;
		  /* 82083184h */ case    1:  		/* addi R1, R1, 128 */
		/* 82083184h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82083184h case    1:*/		return 0x82083188;
		  /* 82083188h */ case    2:  		/* b 57628 */
		/* 82083188h case    2:*/		return 0x820912A4;
		/* 82083188h case    2:*/		return 0x8208318C;
		  /* 8208318Ch */ case    3:  		/* nop */
		/* 8208318Ch case    3:*/		cpu::op::nop();
		/* 8208318Ch case    3:*/		return 0x82083190;
	}
	return 0x82083190;
} // Block from 82083180h-82083190h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82083190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083190);
		  /* 82083190h */ case    0:  		/* mfspr R12, LR */
		/* 82083190h case    0:*/		regs.R12 = regs.LR;
		/* 82083190h case    0:*/		return 0x82083194;
		  /* 82083194h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82083194h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82083194h case    1:*/		return 0x82083198;
		  /* 82083198h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82083198h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82083198h case    2:*/		return 0x8208319C;
		  /* 8208319Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8208319Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8208319Ch case    3:*/		return 0x820831A0;
		  /* 820831A0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 820831A0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820831A0h case    4:*/		return 0x820831A4;
		  /* 820831A4h */ case    5:  		/* lwz R11, <#[R3 + 13068]> */
		/* 820831A4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000330C) );
		/* 820831A4h case    5:*/		return 0x820831A8;
		  /* 820831A8h */ case    6:  		/* mr R31, R3 */
		/* 820831A8h case    6:*/		regs.R31 = regs.R3;
		/* 820831A8h case    6:*/		return 0x820831AC;
		  /* 820831ACh */ case    7:  		/* mr R30, R4 */
		/* 820831ACh case    7:*/		regs.R30 = regs.R4;
		/* 820831ACh case    7:*/		return 0x820831B0;
		  /* 820831B0h */ case    8:  		/* li R8, 0 */
		/* 820831B0h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820831B0h case    8:*/		return 0x820831B4;
		  /* 820831B4h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 820831B4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820831B4h case    9:*/		return 0x820831B8;
		  /* 820831B8h */ case   10:  		/* bc 12, CR6_EQ, 20 */
		/* 820831B8h case   10:*/		if ( regs.CR[6].eq ) { return 0x820831CC;  }
		/* 820831B8h case   10:*/		return 0x820831BC;
		  /* 820831BCh */ case   11:  		/* lwz R10, <#[R11 + 64]> */
		/* 820831BCh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000040) );
		/* 820831BCh case   11:*/		return 0x820831C0;
		  /* 820831C0h */ case   12:  		/* add R11, R10, R11 */
		/* 820831C0h case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 820831C0h case   12:*/		return 0x820831C4;
		  /* 820831C4h */ case   13:  		/* lwz R11, <#[R11 + 48]> */
		/* 820831C4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 820831C4h case   13:*/		return 0x820831C8;
		  /* 820831C8h */ case   14:  		/* rlwinm R8, R11, 5, 31, 31 */
		/* 820831C8h case   14:*/		cpu::op::rlwinm<0,5,31,31>(regs,&regs.R8,regs.R11);
		/* 820831C8h case   14:*/		return 0x820831CC;
	}
	return 0x820831CC;
} // Block from 82083190h-820831CCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 820831CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820831CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820831CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820831CC);
		  /* 820831CCh */ case    0:  		/* lwz R10, <#[R31 + 10548]> */
		/* 820831CCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002934) );
		/* 820831CCh case    0:*/		return 0x820831D0;
		  /* 820831D0h */ case    1:  		/* lbz R11, <#[R31 + 11070]> */
		/* 820831D0h case    1:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3E) );
		/* 820831D0h case    1:*/		return 0x820831D4;
		  /* 820831D4h */ case    2:  		/* rlwinm R7, R10, 31, 1, 31 */
		/* 820831D4h case    2:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R7,regs.R10);
		/* 820831D4h case    2:*/		return 0x820831D8;
		  /* 820831D8h */ case    3:  		/* lwz R6, <#[R31 + 10560]> */
		/* 820831D8h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00002940) );
		/* 820831D8h case    3:*/		return 0x820831DC;
		  /* 820831DCh */ case    4:  		/* rlwinm R11, R11, 27, 5, 31 */
		/* 820831DCh case    4:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R11);
		/* 820831DCh case    4:*/		return 0x820831E0;
		  /* 820831E0h */ case    5:  		/* lwz R9, <#[R31 + 12284]> */
		/* 820831E0h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00002FFC) );
		/* 820831E0h case    5:*/		return 0x820831E4;
		  /* 820831E4h */ case    6:  		/* and R11, R11, R7 */
		/* 820831E4h case    6:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 820831E4h case    6:*/		return 0x820831E8;
		  /* 820831E8h */ case    7:  		/* rlwinm R9, R9, 12, 20, 31 */
		/* 820831E8h case    7:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R9,regs.R9);
		/* 820831E8h case    7:*/		return 0x820831EC;
		  /* 820831ECh */ case    8:  		/* rlwimi R11, R6, 0, 0, 30 */
		/* 820831ECh case    8:*/		cpu::op::rlwimi<0,0,0,30>(regs,&regs.R11,regs.R6);
		/* 820831ECh case    8:*/		return 0x820831F0;
		  /* 820831F0h */ case    9:  		/* rlwinm. R5, R9, 0, 30, 30 */
		/* 820831F0h case    9:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R5,regs.R9);
		/* 820831F0h case    9:*/		return 0x820831F4;
		  /* 820831F4h */ case   10:  		/* stw R11, <#[R31 + 10560]> */
		/* 820831F4h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00002940) );
		/* 820831F4h case   10:*/		return 0x820831F8;
		  /* 820831F8h */ case   11:  		/* bc 4, CR0_EQ, 12 */
		/* 820831F8h case   11:*/		if ( !regs.CR[0].eq ) { return 0x82083204;  }
		/* 820831F8h case   11:*/		return 0x820831FC;
		  /* 820831FCh */ case   12:  		/* rlwinm R11, R9, 0, 31, 31 */
		/* 820831FCh case   12:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R9);
		/* 820831FCh case   12:*/		return 0x82083200;
		  /* 82083200h */ case   13:  		/* b 160 */
		/* 82083200h case   13:*/		return 0x820832A0;
		/* 82083200h case   13:*/		return 0x82083204;
	}
	return 0x82083204;
} // Block from 820831CCh-82083204h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82083204h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083204( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083204) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083204);
		  /* 82083204h */ case    0:  		/* rlwinm. R6, R11, 0, 27, 27 */
		/* 82083204h case    0:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R6,regs.R11);
		/* 82083204h case    0:*/		return 0x82083208;
		  /* 82083208h */ case    1:  		/* rlwinm R9, R10, 28, 29, 31 */
		/* 82083208h case    1:*/		cpu::op::rlwinm<0,28,29,31>(regs,&regs.R9,regs.R10);
		/* 82083208h case    1:*/		return 0x8208320C;
		  /* 8208320Ch */ case    2:  		/* bc 4, CR0_EQ, 20 */
		/* 8208320Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x82083220;  }
		/* 8208320Ch case    2:*/		return 0x82083210;
		  /* 82083210h */ case    3:  		/* cmplwi CR6, R9, 1 */
		/* 82083210h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000001);
		/* 82083210h case    3:*/		return 0x82083214;
		  /* 82083214h */ case    4:  		/* bc 12, CR6_EQ, 40 */
		/* 82083214h case    4:*/		if ( regs.CR[6].eq ) { return 0x8208323C;  }
		/* 82083214h case    4:*/		return 0x82083218;
		  /* 82083218h */ case    5:  		/* cmplwi CR6, R9, 3 */
		/* 82083218h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000003);
		/* 82083218h case    5:*/		return 0x8208321C;
		  /* 8208321Ch */ case    6:  		/* b 16 */
		/* 8208321Ch case    6:*/		return 0x8208322C;
		/* 8208321Ch case    6:*/		return 0x82083220;
	}
	return 0x82083220;
} // Block from 82083204h-82083220h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82083220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083220);
		  /* 82083220h */ case    0:  		/* cmplwi CR6, R9, 4 */
		/* 82083220h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000004);
		/* 82083220h case    0:*/		return 0x82083224;
		  /* 82083224h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 82083224h case    1:*/		if ( regs.CR[6].eq ) { return 0x8208323C;  }
		/* 82083224h case    1:*/		return 0x82083228;
		  /* 82083228h */ case    2:  		/* cmplwi CR6, R9, 6 */
		/* 82083228h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000006);
		/* 82083228h case    2:*/		return 0x8208322C;
	}
	return 0x8208322C;
} // Block from 82083220h-8208322Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8208322Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208322C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208322C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208322C);
		  /* 8208322Ch */ case    0:  		/* bc 12, CR6_EQ, 16 */
		/* 8208322Ch case    0:*/		if ( regs.CR[6].eq ) { return 0x8208323C;  }
		/* 8208322Ch case    0:*/		return 0x82083230;
		  /* 82083230h */ case    1:  		/* cmplwi CR6, R9, 2 */
		/* 82083230h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000002);
		/* 82083230h case    1:*/		return 0x82083234;
		  /* 82083234h */ case    2:  		/* li R9, 0 */
		/* 82083234h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82083234h case    2:*/		return 0x82083238;
		  /* 82083238h */ case    3:  		/* bc 4, CR6_EQ, 8 */
		/* 82083238h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82083240;  }
		/* 82083238h case    3:*/		return 0x8208323C;
	}
	return 0x8208323C;
} // Block from 8208322Ch-8208323Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8208323Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208323C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208323C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208323C);
		  /* 8208323Ch */ case    0:  		/* li R9, 1 */
		/* 8208323Ch case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8208323Ch case    0:*/		return 0x82083240;
	}
	return 0x82083240;
} // Block from 8208323Ch-82083240h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82083240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083240);
		  /* 82083240h */ case    0:  		/* andc R11, R11, R8 */
		/* 82083240h case    0:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82083240h case    0:*/		return 0x82083244;
		  /* 82083244h */ case    1:  		/* rlwinm. R8, R10, 0, 31, 31 */
		/* 82083244h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R10);
		/* 82083244h case    1:*/		return 0x82083248;
		  /* 82083248h */ case    2:  		/* and R11, R11, R7 */
		/* 82083248h case    2:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 82083248h case    2:*/		return 0x8208324C;
		  /* 8208324Ch */ case    3:  		/* and R11, R11, R9 */
		/* 8208324Ch case    3:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8208324Ch case    3:*/		return 0x82083250;
		  /* 82083250h */ case    4:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 82083250h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82083250h case    4:*/		return 0x82083254;
		  /* 82083254h */ case    5:  		/* bc 12, CR0_EQ, 76 */
		/* 82083254h case    5:*/		if ( regs.CR[0].eq ) { return 0x820832A0;  }
		/* 82083254h case    5:*/		return 0x82083258;
		  /* 82083258h */ case    6:  		/* rlwinm R9, R10, 0, 18, 20 */
		/* 82083258h case    6:*/		cpu::op::rlwinm<0,0,18,20>(regs,&regs.R9,regs.R10);
		/* 82083258h case    6:*/		return 0x8208325C;
		  /* 8208325Ch */ case    7:  		/* rlwinm R8, R10, 0, 12, 14 */
		/* 8208325Ch case    7:*/		cpu::op::rlwinm<0,0,12,14>(regs,&regs.R8,regs.R10);
		/* 8208325Ch case    7:*/		return 0x82083260;
		  /* 82083260h */ case    8:  		/* cntlzw R9, R9 */
		/* 82083260h case    8:*/		cpu::op::cntlzw<0>(regs,&regs.R9,regs.R9);
		/* 82083260h case    8:*/		return 0x82083264;
		  /* 82083264h */ case    9:  		/* cntlzw R8, R8 */
		/* 82083264h case    9:*/		cpu::op::cntlzw<0>(regs,&regs.R8,regs.R8);
		/* 82083264h case    9:*/		return 0x82083268;
	}
	return 0x82083268;
} // Block from 82083240h-82083268h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82083268h
// Function '?TrainEDRAM@D3D@@YAHPAVCDevice@1@KH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083268);
		  /* 82083268h */ case    0:  		/* rlwinm R9, R9, 27, 31, 31 */
		/* 82083268h case    0:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R9,regs.R9);
		/* 82083268h case    0:*/		return 0x8208326C;
		  /* 8208326Ch */ case    1:  		/* rlwinm R8, R8, 27, 31, 31 */
		/* 8208326Ch case    1:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R8,regs.R8);
		/* 8208326Ch case    1:*/		return 0x82083270;
		  /* 82083270h */ case    2:  		/* rlwinm. R6, R10, 0, 24, 24 */
		/* 82083270h case    2:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R6,regs.R10);
		/* 82083270h case    2:*/		return 0x82083274;
		  /* 82083274h */ case    3:  		/* and R9, R9, R8 */
		/* 82083274h case    3:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 82083274h case    3:*/		return 0x82083278;
		  /* 82083278h */ case    4:  		/* and R11, R9, R11 */
		/* 82083278h case    4:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82083278h case    4:*/		return 0x8208327C;
		  /* 8208327Ch */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 8208327Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x820832A0;  }
		/* 8208327Ch case    5:*/		return 0x82083280;
		  /* 82083280h */ case    6:  		/* rlwinm R9, R10, 0, 0, 2 */
		/* 82083280h case    6:*/		cpu::op::rlwinm<0,0,0,2>(regs,&regs.R9,regs.R10);
		/* 82083280h case    6:*/		return 0x82083284;
		  /* 82083284h */ case    7:  		/* rlwinm R8, R10, 0, 6, 8 */
		/* 82083284h case    7:*/		cpu::op::rlwinm<0,0,6,8>(regs,&regs.R8,regs.R10);
		/* 82083284h case    7:*/		return 0x82083288;
		  /* 82083288h */ case    8:  		/* cntlzw R9, R9 */
		/* 82083288h case    8:*/		cpu::op::cntlzw<0>(regs,&regs.R9,regs.R9);
		/* 82083288h case    8:*/		return 0x8208328C;
		  /* 8208328Ch */ case    9:  		/* cntlzw R8, R8 */
		/* 8208328Ch case    9:*/		cpu::op::cntlzw<0>(regs,&regs.R8,regs.R8);
		/* 8208328Ch case    9:*/		return 0x82083290;
		  /* 82083290h */ case   10:  		/* rlwinm R9, R9, 27, 31, 31 */
		/* 82083290h case   10:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R9,regs.R9);
		/* 82083290h case   10:*/		return 0x82083294;
		  /* 82083294h */ case   11:  		/* rlwinm R8, R8, 27, 31, 31 */
		/* 82083294h case   11:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R8,regs.R8);
		/* 82083294h case   11:*/		return 0x82083298;
		  /* 82083298h */ case   12:  		/* and R9, R9, R8 */
		/* 82083298h case   12:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 82083298h case   12:*/		return 0x8208329C;
		  /* 8208329Ch */ case   13:  		/* and R11, R9, R11 */
		/* 8208329Ch case   13:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8208329Ch case   13:*/		return 0x820832A0;
	}
	return 0x820832A0;
} // Block from 82083268h-820832A0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820832A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820832A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820832A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820832A0);
		  /* 820832A0h */ case    0:  		/* lwz R9, <#[R31 + 10560]> */
		/* 820832A0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00002940) );
		/* 820832A0h case    0:*/		return 0x820832A4;
		  /* 820832A4h */ case    1:  		/* rlwimi R9, R11, 1, 30, 30 */
		/* 820832A4h case    1:*/		cpu::op::rlwimi<0,1,30,30>(regs,&regs.R9,regs.R11);
		/* 820832A4h case    1:*/		return 0x820832A8;
		  /* 820832A8h */ case    2:  		/* rlwinm. R11, R9, 0, 30, 30 */
		/* 820832A8h case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R9);
		/* 820832A8h case    2:*/		return 0x820832AC;
		  /* 820832ACh */ case    3:  		/* stw R9, <#[R31 + 10560]> */
		/* 820832ACh case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00002940) );
		/* 820832ACh case    3:*/		return 0x820832B0;
		  /* 820832B0h */ case    4:  		/* bc 12, CR0_EQ, 100 */
		/* 820832B0h case    4:*/		if ( regs.CR[0].eq ) { return 0x82083314;  }
		/* 820832B0h case    4:*/		return 0x820832B4;
		  /* 820832B4h */ case    5:  		/* lbz R11, <#[R31 + 11069]> */
		/* 820832B4h case    5:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3D) );
		/* 820832B4h case    5:*/		return 0x820832B8;
		  /* 820832B8h */ case    6:  		/* rlwinm. R10, R11, 0, 29, 29 */
		/* 820832B8h case    6:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R10,regs.R11);
		/* 820832B8h case    6:*/		return 0x820832BC;
		  /* 820832BCh */ case    7:  		/* bc 12, CR0_EQ, 176 */
		/* 820832BCh case    7:*/		if ( regs.CR[0].eq ) { return 0x8208336C;  }
		/* 820832BCh case    7:*/		return 0x820832C0;
		  /* 820832C0h */ case    8:  		/* lwz R10, <#[R31 + 13904]> */
		/* 820832C0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00003650) );
		/* 820832C0h case    8:*/		return 0x820832C4;
		  /* 820832C4h */ case    9:  		/* cmplwi CR6, R10, 0 */
		/* 820832C4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 820832C4h case    9:*/		return 0x820832C8;
		  /* 820832C8h */ case   10:  		/* bc 12, CR6_EQ, 16 */
		/* 820832C8h case   10:*/		if ( regs.CR[6].eq ) { return 0x820832D8;  }
		/* 820832C8h case   10:*/		return 0x820832CC;
		  /* 820832CCh */ case   11:  		/* lwz R10, <#[R31 + 13912]> */
		/* 820832CCh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00003658) );
		/* 820832CCh case   11:*/		return 0x820832D0;
		  /* 820832D0h */ case   12:  		/* cmplwi CR6, R10, 1 */
		/* 820832D0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 820832D0h case   12:*/		return 0x820832D4;
		  /* 820832D4h */ case   13:  		/* bc 4, CR6_EQ, 152 */
		/* 820832D4h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8208336C;  }
		/* 820832D4h case   13:*/		return 0x820832D8;
	}
	return 0x820832D8;
} // Block from 820832A0h-820832D8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820832D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820832D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820832D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820832D8);
		  /* 820832D8h */ case    0:  		/* lwz R10, <#[R31 + 56]> */
		/* 820832D8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000038) );
		/* 820832D8h case    0:*/		return 0x820832DC;
		  /* 820832DCh */ case    1:  		/* andi. R11, R11, 251 */
		/* 820832DCh case    1:*/		cpu::op::andi<1>(regs,&regs.R11,regs.R11,0xFB);
		/* 820832DCh case    1:*/		return 0x820832E0;
		  /* 820832E0h */ case    2:  		/* lwz R3, <#[R31 + 48]> */
		/* 820832E0h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 820832E0h case    2:*/		return 0x820832E4;
		  /* 820832E4h */ case    3:  		/* stb R11, <#[R31 + 11069]> */
		/* 820832E4h case    3:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00002B3D) );
		/* 820832E4h case    3:*/		return 0x820832E8;
		  /* 820832E8h */ case    4:  		/* cmplw CR6, R3, R10 */
		/* 820832E8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R10);
		/* 820832E8h case    4:*/		return 0x820832EC;
		  /* 820832ECh */ case    5:  		/* bc 4, CR6_GT, 12 */
		/* 820832ECh case    5:*/		if ( !regs.CR[6].gt ) { return 0x820832F8;  }
		/* 820832ECh case    5:*/		return 0x820832F0;
		  /* 820832F0h */ case    6:  		/* mr R3, R31 */
		/* 820832F0h case    6:*/		regs.R3 = regs.R31;
		/* 820832F0h case    6:*/		return 0x820832F4;
		  /* 820832F4h */ case    7:  		/* bl -61932 */
		/* 820832F4h case    7:*/		regs.LR = 0x820832F8; return 0x82074108;
		/* 820832F4h case    7:*/		return 0x820832F8;
	}
	return 0x820832F8;
} // Block from 820832D8h-820832F8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820832F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820832F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820832F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820832F8);
		  /* 820832F8h */ case    0:  		/* lis R11, -16384 */
		/* 820832F8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC000);
		/* 820832F8h case    0:*/		return 0x820832FC;
		  /* 820832FCh */ case    1:  		/* li R10, 15 */
		/* 820832FCh case    1:*/		cpu::op::li<0>(regs,&regs.R10,0xF);
		/* 820832FCh case    1:*/		return 0x82083300;
		  /* 82083300h */ case    2:  		/* ori R11, R11, 17920 */
		/* 82083300h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4600);
		/* 82083300h case    2:*/		return 0x82083304;
		  /* 82083304h */ case    3:  		/* stwu R11, <#[R3 + 4]> */
		/* 82083304h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82083304h case    3:*/		return 0x82083308;
		  /* 82083308h */ case    4:  		/* stwu R10, <#[R3 + 4]> */
		/* 82083308h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82083308h case    4:*/		return 0x8208330C;
		  /* 8208330Ch */ case    5:  		/* stw R3, <#[R31 + 48]> */
		/* 8208330Ch case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 8208330Ch case    5:*/		return 0x82083310;
		  /* 82083310h */ case    6:  		/* b 92 */
		/* 82083310h case    6:*/		return 0x8208336C;
		/* 82083310h case    6:*/		return 0x82083314;
	}
	return 0x82083314;
} // Block from 820832F8h-82083314h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82083314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083314);
		  /* 82083314h */ case    0:  		/* rlwinm. R11, R7, 0, 31, 31 */
		/* 82083314h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R7);
		/* 82083314h case    0:*/		return 0x82083318;
		  /* 82083318h */ case    1:  		/* bc 12, CR0_EQ, 84 */
		/* 82083318h case    1:*/		if ( regs.CR[0].eq ) { return 0x8208336C;  }
		/* 82083318h case    1:*/		return 0x8208331C;
		  /* 8208331Ch */ case    2:  		/* rlwinm. R11, R10, 0, 29, 29 */
		/* 8208331Ch case    2:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R10);
		/* 8208331Ch case    2:*/		return 0x82083320;
		  /* 82083320h */ case    3:  		/* bc 12, CR0_EQ, 76 */
		/* 82083320h case    3:*/		if ( regs.CR[0].eq ) { return 0x8208336C;  }
		/* 82083320h case    3:*/		return 0x82083324;
		  /* 82083324h */ case    4:  		/* rlwinm R11, R10, 28, 29, 31 */
		/* 82083324h case    4:*/		cpu::op::rlwinm<0,28,29,31>(regs,&regs.R11,regs.R10);
		/* 82083324h case    4:*/		return 0x82083328;
		  /* 82083328h */ case    5:  		/* cmplwi CR6, R11, 7 */
		/* 82083328h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000007);
		/* 82083328h case    5:*/		return 0x8208332C;
		  /* 8208332Ch */ case    6:  		/* bc 12, CR6_EQ, 52 */
		/* 8208332Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x82083360;  }
		/* 8208332Ch case    6:*/		return 0x82083330;
		  /* 82083330h */ case    7:  		/* cmplwi CR6, R11, 5 */
		/* 82083330h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 82083330h case    7:*/		return 0x82083334;
		  /* 82083334h */ case    8:  		/* bc 12, CR6_EQ, 44 */
		/* 82083334h case    8:*/		if ( regs.CR[6].eq ) { return 0x82083360;  }
		/* 82083334h case    8:*/		return 0x82083338;
		  /* 82083338h */ case    9:  		/* rlwinm. R10, R9, 0, 27, 27 */
		/* 82083338h case    9:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R9);
		/* 82083338h case    9:*/		return 0x8208333C;
		  /* 8208333Ch */ case   10:  		/* bc 4, CR0_EQ, 20 */
		/* 8208333Ch case   10:*/		if ( !regs.CR[0].eq ) { return 0x82083350;  }
		/* 8208333Ch case   10:*/		return 0x82083340;
		  /* 82083340h */ case   11:  		/* cmplwi CR6, R11, 4 */
		/* 82083340h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 82083340h case   11:*/		return 0x82083344;
		  /* 82083344h */ case   12:  		/* bc 12, CR6_EQ, 28 */
		/* 82083344h case   12:*/		if ( regs.CR[6].eq ) { return 0x82083360;  }
		/* 82083344h case   12:*/		return 0x82083348;
		  /* 82083348h */ case   13:  		/* cmplwi CR6, R11, 6 */
		/* 82083348h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 82083348h case   13:*/		return 0x8208334C;
		  /* 8208334Ch */ case   14:  		/* b 16 */
		/* 8208334Ch case   14:*/		return 0x8208335C;
		/* 8208334Ch case   14:*/		return 0x82083350;
	}
	return 0x82083350;
} // Block from 82083314h-82083350h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82083350h
// Function 'D3DDevice_SetPredication'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083350);
		  /* 82083350h */ case    0:  		/* cmplwi CR6, R11, 1 */
		/* 82083350h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82083350h case    0:*/		return 0x82083354;
		  /* 82083354h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82083354h case    1:*/		if ( regs.CR[6].eq ) { return 0x82083360;  }
		/* 82083354h case    1:*/		return 0x82083358;
		  /* 82083358h */ case    2:  		/* cmplwi CR6, R11, 3 */
		/* 82083358h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82083358h case    2:*/		return 0x8208335C;
	}
	return 0x8208335C;
} // Block from 82083350h-8208335Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8208335Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208335C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208335C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208335C);
		  /* 8208335Ch */ case    0:  		/* bc 4, CR6_EQ, 16 */
		/* 8208335Ch case    0:*/		if ( !regs.CR[6].eq ) { return 0x8208336C;  }
		/* 8208335Ch case    0:*/		return 0x82083360;
	}
	return 0x82083360;
} // Block from 8208335Ch-82083360h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82083360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083360);
		  /* 82083360h */ case    0:  		/* lbz R11, <#[R31 + 11069]> */
		/* 82083360h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3D) );
		/* 82083360h case    0:*/		return 0x82083364;
		  /* 82083364h */ case    1:  		/* ori R11, R11, 4 */
		/* 82083364h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82083364h case    1:*/		return 0x82083368;
		  /* 82083368h */ case    2:  		/* stb R11, <#[R31 + 11069]> */
		/* 82083368h case    2:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00002B3D) );
		/* 82083368h case    2:*/		return 0x8208336C;
	}
	return 0x8208336C;
} // Block from 82083360h-8208336Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8208336Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208336C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208336C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208336C);
		  /* 8208336Ch */ case    0:  		/* ori R3, R30, 256 */
		/* 8208336Ch case    0:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R30,0x100);
		/* 8208336Ch case    0:*/		return 0x82083370;
		  /* 82083370h */ case    1:  		/* addi R1, R1, 112 */
		/* 82083370h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82083370h case    1:*/		return 0x82083374;
		  /* 82083374h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 82083374h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82083374h case    2:*/		return 0x82083378;
		  /* 82083378h */ case    3:  		/* mtspr LR, R12 */
		/* 82083378h case    3:*/		regs.LR = regs.R12;
		/* 82083378h case    3:*/		return 0x8208337C;
		  /* 8208337Ch */ case    4:  		/* ld R30, <#[R1 - 24]> */
		/* 8208337Ch case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8208337Ch case    4:*/		return 0x82083380;
		  /* 82083380h */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 82083380h case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82083380h case    5:*/		return 0x82083384;
		  /* 82083384h */ case    6:  		/* bclr 20, CR0_LT */
		/* 82083384h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82083384h case    6:*/		return 0x82083388;
	}
	return 0x82083388;
} // Block from 8208336Ch-82083388h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82083388h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083388);
		  /* 82083388h */ case    0:  		/* mfspr R12, LR */
		/* 82083388h case    0:*/		regs.R12 = regs.LR;
		/* 82083388h case    0:*/		return 0x8208338C;
		  /* 8208338Ch */ case    1:  		/* bl 57008 */
		/* 8208338Ch case    1:*/		regs.LR = 0x82083390; return 0x8209123C;
		/* 8208338Ch case    1:*/		return 0x82083390;
		  /* 82083390h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82083390h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82083390h case    2:*/		return 0x82083394;
		  /* 82083394h */ case    3:  		/* lwz R11, <#[R3 + 48]> */
		/* 82083394h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000030) );
		/* 82083394h case    3:*/		return 0x82083398;
		  /* 82083398h */ case    4:  		/* mr R31, R3 */
		/* 82083398h case    4:*/		regs.R31 = regs.R3;
		/* 82083398h case    4:*/		return 0x8208339C;
		  /* 8208339Ch */ case    5:  		/* lwz R10, <#[R3 + 56]> */
		/* 8208339Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000038) );
		/* 8208339Ch case    5:*/		return 0x820833A0;
		  /* 820833A0h */ case    6:  		/* mr R26, R4 */
		/* 820833A0h case    6:*/		regs.R26 = regs.R4;
		/* 820833A0h case    6:*/		return 0x820833A4;
		  /* 820833A4h */ case    7:  		/* mr R28, R5 */
		/* 820833A4h case    7:*/		regs.R28 = regs.R5;
		/* 820833A4h case    7:*/		return 0x820833A8;
		  /* 820833A8h */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 820833A8h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820833A8h case    8:*/		return 0x820833AC;
		  /* 820833ACh */ case    9:  		/* bc 4, CR6_GT, 12 */
		/* 820833ACh case    9:*/		if ( !regs.CR[6].gt ) { return 0x820833B8;  }
		/* 820833ACh case    9:*/		return 0x820833B0;
		  /* 820833B0h */ case   10:  		/* bl -62120 */
		/* 820833B0h case   10:*/		regs.LR = 0x820833B4; return 0x82074108;
		/* 820833B0h case   10:*/		return 0x820833B4;
		  /* 820833B4h */ case   11:  		/* mr R11, R3 */
		/* 820833B4h case   11:*/		regs.R11 = regs.R3;
		/* 820833B4h case   11:*/		return 0x820833B8;
	}
	return 0x820833B8;
} // Block from 82083388h-820833B8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820833B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820833B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820833B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820833B8);
		  /* 820833B8h */ case    0:  		/* li R10, -1 */
		/* 820833B8h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820833B8h case    0:*/		return 0x820833BC;
		  /* 820833BCh */ case    1:  		/* rlwinm R9, R26, 0, 23, 23 */
		/* 820833BCh case    1:*/		cpu::op::rlwinm<0,0,23,23>(regs,&regs.R9,regs.R26);
		/* 820833BCh case    1:*/		return 0x820833C0;
		  /* 820833C0h */ case    2:  		/* lis R8, -16384 */
		/* 820833C0h case    2:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFFC000);
		/* 820833C0h case    2:*/		return 0x820833C4;
		  /* 820833C4h */ case    3:  		/* lis R7, -16384 */
		/* 820833C4h case    3:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFFC000);
		/* 820833C4h case    3:*/		return 0x820833C8;
		  /* 820833C8h */ case    4:  		/* lis R6, -16383 */
		/* 820833C8h case    4:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFFC001);
		/* 820833C8h case    4:*/		return 0x820833CC;
		  /* 820833CCh */ case    5:  		/* mr R23, R10 */
		/* 820833CCh case    5:*/		regs.R23 = regs.R10;
		/* 820833CCh case    5:*/		return 0x820833D0;
		  /* 820833D0h */ case    6:  		/* mr R24, R10 */
		/* 820833D0h case    6:*/		regs.R24 = regs.R10;
		/* 820833D0h case    6:*/		return 0x820833D4;
		  /* 820833D4h */ case    7:  		/* ori R21, R8, 24832 */
		/* 820833D4h case    7:*/		cpu::op::ori<0>(regs,&regs.R21,regs.R8,0x6100);
		/* 820833D4h case    7:*/		return 0x820833D8;
		  /* 820833D8h */ case    8:  		/* ori R27, R7, 24576 */
		/* 820833D8h case    8:*/		cpu::op::ori<0>(regs,&regs.R27,regs.R7,0x6000);
		/* 820833D8h case    8:*/		return 0x820833DC;
		  /* 820833DCh */ case    9:  		/* ori R25, R6, 21761 */
		/* 820833DCh case    9:*/		cpu::op::ori<0>(regs,&regs.R25,regs.R6,0x5501);
		/* 820833DCh case    9:*/		return 0x820833E0;
		  /* 820833E0h */ case   10:  		/* mr R22, R10 */
		/* 820833E0h case   10:*/		regs.R22 = regs.R10;
		/* 820833E0h case   10:*/		return 0x820833E4;
		  /* 820833E4h */ case   11:  		/* cmpldi CR6, R9, 0 */
		/* 820833E4h case   11:*/		cpu::op::cmpldi<6>(regs,regs.R9,0x00000000);
		/* 820833E4h case   11:*/		return 0x820833E8;
		  /* 820833E8h */ case   12:  		/* bc 12, CR6_EQ, 524 */
		/* 820833E8h case   12:*/		if ( regs.CR[6].eq ) { return 0x820835F4;  }
		/* 820833E8h case   12:*/		return 0x820833EC;
		  /* 820833ECh */ case   13:  		/* lbz R10, <#[R31 + 11071]> */
		/* 820833ECh case   13:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002B3F) );
		/* 820833ECh case   13:*/		return 0x820833F0;
		  /* 820833F0h */ case   14:  		/* rlwinm. R10, R10, 0, 26, 26 */
		/* 820833F0h case   14:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R10,regs.R10);
		/* 820833F0h case   14:*/		return 0x820833F4;
		  /* 820833F4h */ case   15:  		/* bc 12, CR0_EQ, 448 */
		/* 820833F4h case   15:*/		if ( regs.CR[0].eq ) { return 0x820835B4;  }
		/* 820833F4h case   15:*/		return 0x820833F8;
		  /* 820833F8h */ case   16:  		/* lbz R10, <#[R31 + 11068]> */
		/* 820833F8h case   16:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002B3C) );
		/* 820833F8h case   16:*/		return 0x820833FC;
		  /* 820833FCh */ case   17:  		/* rlwinm. R9, R10, 0, 27, 27 */
		/* 820833FCh case   17:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R9,regs.R10);
		/* 820833FCh case   17:*/		return 0x82083400;
		  /* 82083400h */ case   18:  		/* bc 12, CR0_EQ, 12 */
		/* 82083400h case   18:*/		if ( regs.CR[0].eq ) { return 0x8208340C;  }
		/* 82083400h case   18:*/		return 0x82083404;
		  /* 82083404h */ case   19:  		/* li R10, 1 */
		/* 82083404h case   19:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82083404h case   19:*/		return 0x82083408;
		  /* 82083408h */ case   20:  		/* b 148 */
		/* 82083408h case   20:*/		return 0x8208349C;
		/* 82083408h case   20:*/		return 0x8208340C;
	}
	return 0x8208340C;
} // Block from 820833B8h-8208340Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 8208340Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208340C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208340C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208340C);
		  /* 8208340Ch */ case    0:  		/* rlwinm. R10, R10, 0, 26, 26 */
		/* 8208340Ch case    0:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R10,regs.R10);
		/* 8208340Ch case    0:*/		return 0x82083410;
		  /* 82083410h */ case    1:  		/* bc 12, CR0_EQ, 132 */
		/* 82083410h case    1:*/		if ( regs.CR[0].eq ) { return 0x82083494;  }
		/* 82083410h case    1:*/		return 0x82083414;
		  /* 82083414h */ case    2:  		/* lwz R10, <#[R31 + 12816]> */
		/* 82083414h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00003210) );
		/* 82083414h case    2:*/		return 0x82083418;
		  /* 82083418h */ case    3:  		/* lwz R9, <#[R31 + 13104]> */
		/* 82083418h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00003330) );
		/* 82083418h case    3:*/		return 0x8208341C;
		  /* 8208341Ch */ case    4:  		/* cmplw CR6, R9, R10 */
		/* 8208341Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 8208341Ch case    4:*/		return 0x82083420;
		  /* 82083420h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 82083420h case    5:*/		if ( regs.CR[6].eq ) { return 0x8208342C;  }
		/* 82083420h case    5:*/		return 0x82083424;
		  /* 82083424h */ case    6:  		/* cmplwi CR6, R10, 0 */
		/* 82083424h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82083424h case    6:*/		return 0x82083428;
		  /* 82083428h */ case    7:  		/* bc 4, CR6_EQ, 108 */
		/* 82083428h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82083494;  }
		/* 82083428h case    7:*/		return 0x8208342C;
	}
	return 0x8208342C;
} // Block from 8208340Ch-8208342Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8208342Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208342C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208342C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208342C);
		  /* 8208342Ch */ case    0:  		/* lwz R10, <#[R31 + 12820]> */
		/* 8208342Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00003214) );
		/* 8208342Ch case    0:*/		return 0x82083430;
		  /* 82083430h */ case    1:  		/* lwz R9, <#[R31 + 13108]> */
		/* 82083430h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00003334) );
		/* 82083430h case    1:*/		return 0x82083434;
		  /* 82083434h */ case    2:  		/* cmplw CR6, R9, R10 */
		/* 82083434h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 82083434h case    2:*/		return 0x82083438;
		  /* 82083438h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 82083438h case    3:*/		if ( regs.CR[6].eq ) { return 0x82083444;  }
		/* 82083438h case    3:*/		return 0x8208343C;
		  /* 8208343Ch */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 8208343Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8208343Ch case    4:*/		return 0x82083440;
		  /* 82083440h */ case    5:  		/* bc 4, CR6_EQ, 84 */
		/* 82083440h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82083494;  }
		/* 82083440h case    5:*/		return 0x82083444;
	}
	return 0x82083444;
} // Block from 8208342Ch-82083444h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82083444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083444);
		  /* 82083444h */ case    0:  		/* lwz R10, <#[R31 + 12824]> */
		/* 82083444h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00003218) );
		/* 82083444h case    0:*/		return 0x82083448;
		  /* 82083448h */ case    1:  		/* lwz R9, <#[R31 + 13112]> */
		/* 82083448h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00003338) );
		/* 82083448h case    1:*/		return 0x8208344C;
		  /* 8208344Ch */ case    2:  		/* cmplw CR6, R9, R10 */
		/* 8208344Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 8208344Ch case    2:*/		return 0x82083450;
		  /* 82083450h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 82083450h case    3:*/		if ( regs.CR[6].eq ) { return 0x8208345C;  }
		/* 82083450h case    3:*/		return 0x82083454;
		  /* 82083454h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 82083454h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82083454h case    4:*/		return 0x82083458;
		  /* 82083458h */ case    5:  		/* bc 4, CR6_EQ, 60 */
		/* 82083458h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82083494;  }
		/* 82083458h case    5:*/		return 0x8208345C;
	}
	return 0x8208345C;
} // Block from 82083444h-8208345Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8208345Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208345C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208345C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208345C);
		  /* 8208345Ch */ case    0:  		/* lwz R10, <#[R31 + 12828]> */
		/* 8208345Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000321C) );
		/* 8208345Ch case    0:*/		return 0x82083460;
		  /* 82083460h */ case    1:  		/* lwz R9, <#[R31 + 13116]> */
		/* 82083460h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000333C) );
		/* 82083460h case    1:*/		return 0x82083464;
		  /* 82083464h */ case    2:  		/* cmplw CR6, R9, R10 */
		/* 82083464h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 82083464h case    2:*/		return 0x82083468;
		  /* 82083468h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 82083468h case    3:*/		if ( regs.CR[6].eq ) { return 0x82083474;  }
		/* 82083468h case    3:*/		return 0x8208346C;
		  /* 8208346Ch */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 8208346Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8208346Ch case    4:*/		return 0x82083470;
		  /* 82083470h */ case    5:  		/* bc 4, CR6_EQ, 36 */
		/* 82083470h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82083494;  }
		/* 82083470h case    5:*/		return 0x82083474;
	}
	return 0x82083474;
} // Block from 8208345Ch-82083474h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82083474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083474);
		  /* 82083474h */ case    0:  		/* lwz R10, <#[R31 + 12832]> */
		/* 82083474h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00003220) );
		/* 82083474h case    0:*/		return 0x82083478;
		  /* 82083478h */ case    1:  		/* lwz R9, <#[R31 + 13120]> */
		/* 82083478h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00003340) );
		/* 82083478h case    1:*/		return 0x8208347C;
		  /* 8208347Ch */ case    2:  		/* cmplw CR6, R9, R10 */
		/* 8208347Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 8208347Ch case    2:*/		return 0x82083480;
		  /* 82083480h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 82083480h case    3:*/		if ( regs.CR[6].eq ) { return 0x8208348C;  }
		/* 82083480h case    3:*/		return 0x82083484;
		  /* 82083484h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 82083484h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82083484h case    4:*/		return 0x82083488;
		  /* 82083488h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 82083488h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82083494;  }
		/* 82083488h case    5:*/		return 0x8208348C;
	}
	return 0x8208348C;
} // Block from 82083474h-8208348Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8208348Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208348C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208348C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208348C);
		  /* 8208348Ch */ case    0:  		/* li R10, 1 */
		/* 8208348Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8208348Ch case    0:*/		return 0x82083490;
		  /* 82083490h */ case    1:  		/* b 8 */
		/* 82083490h case    1:*/		return 0x82083498;
		/* 82083490h case    1:*/		return 0x82083494;
	}
	return 0x82083494;
} // Block from 8208348Ch-82083494h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82083494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083494);
		  /* 82083494h */ case    0:  		/* li R10, 0 */
		/* 82083494h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82083494h case    0:*/		return 0x82083498;
	}
	return 0x82083498;
} // Block from 82083494h-82083498h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82083498h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083498);
		  /* 82083498h */ case    0:  		/* rlwinm R10, R10, 0, 24, 31 */
		/* 82083498h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R10);
		/* 82083498h case    0:*/		return 0x8208349C;
	}
	return 0x8208349C;
} // Block from 82083498h-8208349Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8208349Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208349C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208349C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208349C);
		  /* 8208349Ch */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 8208349Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 8208349Ch case    0:*/		return 0x820834A0;
	}
	return 0x820834A0;
} // Block from 8208349Ch-820834A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820834A0h
// Function '?XpsConfigureForWork@D3D@@YAXPAVCDevice@1@PAVCXpsGlobal@1@K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820834A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820834A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820834A0);
		  /* 820834A0h */ case    0:  		/* bc 12, CR0_EQ, 276 */
		/* 820834A0h case    0:*/		if ( regs.CR[0].eq ) { return 0x820835B4;  }
		/* 820834A0h case    0:*/		return 0x820834A4;
		  /* 820834A4h */ case    1:  		/* stwu R21, <#[R11 + 4]> */
		/* 820834A4h case    1:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820834A4h case    1:*/		return 0x820834A8;
		  /* 820834A8h */ case    2:  		/* li R9, 0 */
		/* 820834A8h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 820834A8h case    2:*/		return 0x820834AC;
		  /* 820834ACh */ case    3:  		/* mr R10, R21 */
		/* 820834ACh case    3:*/		regs.R10 = regs.R21;
		/* 820834ACh case    3:*/		return 0x820834B0;
		  /* 820834B0h */ case    4:  		/* stwu R9, <#[R11 + 4]> */
		/* 820834B0h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820834B0h case    4:*/		return 0x820834B4;
		  /* 820834B4h */ case    5:  		/* lwz R10, <#[R31 + 13124]> */
		/* 820834B4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00003344) );
		/* 820834B4h case    5:*/		return 0x820834B8;
		  /* 820834B8h */ case    6:  		/* addic. R30, R10, -1 */
		/* 820834B8h case    6:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R10,0xFFFFFFFF);
		/* 820834B8h case    6:*/		return 0x820834BC;
		  /* 820834BCh */ case    7:  		/* bc 12, CR0_LT, 152 */
		/* 820834BCh case    7:*/		if ( regs.CR[0].lt ) { return 0x82083554;  }
		/* 820834BCh case    7:*/		return 0x820834C0;
		  /* 820834C0h */ case    8:  		/* addi R10, R30, 3372 */
		/* 820834C0h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0xD2C);
		/* 820834C0h case    8:*/		return 0x820834C4;
		  /* 820834C4h */ case    9:  		/* lwz R9, <#[R31 + 12284]> */
		/* 820834C4h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00002FFC) );
		/* 820834C4h case    9:*/		return 0x820834C8;
		  /* 820834C8h */ case   10:  		/* rlwinm R8, R10, 2, 0, 29 */
		/* 820834C8h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R10);
		/* 820834C8h case   10:*/		return 0x820834CC;
		  /* 820834CCh */ case   11:  		/* rlwinm. R10, R9, 15, 29, 31 */
		/* 820834CCh case   11:*/		cpu::op::rlwinm<1,15,29,31>(regs,&regs.R10,regs.R9);
		/* 820834CCh case   11:*/		return 0x820834D0;
		  /* 820834D0h */ case   12:  		/* lwzx R9, <#[R8 + R31]> */
		/* 820834D0h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + regs.R31 + 0x00000000) );
		/* 820834D0h case   12:*/		return 0x820834D4;
		  /* 820834D4h */ case   13:  		/* rlwimi R28, R9, 17, 0, 14 */
		/* 820834D4h case   13:*/		cpu::op::rlwimi<0,17,0,14>(regs,&regs.R28,regs.R9);
		/* 820834D4h case   13:*/		return 0x820834D8;
		  /* 820834D8h */ case   14:  		/* mr R29, R28 */
		/* 820834D8h case   14:*/		regs.R29 = regs.R28;
		/* 820834D8h case   14:*/		return 0x820834DC;
		  /* 820834DCh */ case   15:  		/* bc 12, CR0_EQ, 32 */
		/* 820834DCh case   15:*/		if ( regs.CR[0].eq ) { return 0x820834FC;  }
		/* 820834DCh case   15:*/		return 0x820834E0;
		  /* 820834E0h */ case   16:  		/* cmplwi CR6, R10, 2 */
		/* 820834E0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000002);
		/* 820834E0h case   16:*/		return 0x820834E4;
		  /* 820834E4h */ case   17:  		/* bc 4, CR6_EQ, 28 */
		/* 820834E4h case   17:*/		if ( !regs.CR[6].eq ) { return 0x82083500;  }
		/* 820834E4h case   17:*/		return 0x820834E8;
		  /* 820834E8h */ case   18:  		/* cmpwi CR6, R30, 0 */
		/* 820834E8h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 820834E8h case   18:*/		return 0x820834EC;
		  /* 820834ECh */ case   19:  		/* bc 4, CR6_EQ, 16 */
		/* 820834ECh case   19:*/		if ( !regs.CR[6].eq ) { return 0x820834FC;  }
		/* 820834ECh case   19:*/		return 0x820834F0;
		  /* 820834F0h */ case   20:  		/* lbz R10, <#[R31 + 11071]> */
		/* 820834F0h case   20:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002B3F) );
		/* 820834F0h case   20:*/		return 0x820834F4;
		  /* 820834F4h */ case   21:  		/* rlwinm. R10, R10, 0, 27, 27 */
		/* 820834F4h case   21:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R10);
		/* 820834F4h case   21:*/		return 0x820834F8;
		  /* 820834F8h */ case   22:  		/* bc 4, CR0_EQ, 8 */
		/* 820834F8h case   22:*/		if ( !regs.CR[0].eq ) { return 0x82083500;  }
		/* 820834F8h case   22:*/		return 0x820834FC;
	}
	return 0x820834FC;
} // Block from 820834A0h-820834FCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 820834FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820834FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820834FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820834FC);
		  /* 820834FCh */ case    0:  		/* rlwinm R29, R28, 0, 0, 30 */
		/* 820834FCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R29,regs.R28);
		/* 820834FCh case    0:*/		return 0x82083500;
	}
	return 0x82083500;
} // Block from 820834FCh-82083500h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82083500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083500);
		  /* 82083500h */ case    0:  		/* mr R10, R27 */
		/* 82083500h case    0:*/		regs.R10 = regs.R27;
		/* 82083500h case    0:*/		return 0x82083504;
		  /* 82083504h */ case    1:  		/* stwu R27, <#[R11 + 4]> */
		/* 82083504h case    1:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82083504h case    1:*/		return 0x82083508;
		  /* 82083508h */ case    2:  		/* rlwinm R9, R30, 1, 0, 30 */
		/* 82083508h case    2:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R30);
		/* 82083508h case    2:*/		return 0x8208350C;
		  /* 8208350Ch */ case    3:  		/* li R10, 3 */
		/* 8208350Ch case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 8208350Ch case    3:*/		return 0x82083510;
		  /* 82083510h */ case    4:  		/* mr R8, R25 */
		/* 82083510h case    4:*/		regs.R8 = regs.R25;
		/* 82083510h case    4:*/		return 0x82083514;
		  /* 82083514h */ case    5:  		/* slw R10, R10, R9 */
		/* 82083514h case    5:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82083514h case    5:*/		return 0x82083518;
		  /* 82083518h */ case    6:  		/* stwu R10, <#[R11 + 4]> */
		/* 82083518h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82083518h case    6:*/		return 0x8208351C;
		  /* 8208351Ch */ case    7:  		/* li R10, 8707 */
		/* 8208351Ch case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x2203);
		/* 8208351Ch case    7:*/		return 0x82083520;
		  /* 82083520h */ case    8:  		/* stwu R25, <#[R11 + 4]> */
		/* 82083520h case    8:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82083520h case    8:*/		return 0x82083524;
		  /* 82083524h */ case    9:  		/* stwu R10, <#[R11 + 4]> */
		/* 82083524h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82083524h case    9:*/		return 0x82083528;
		  /* 82083528h */ case   10:  		/* stwu R29, <#[R11 + 4]> */
		/* 82083528h case   10:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82083528h case   10:*/		return 0x8208352C;
		  /* 8208352Ch */ case   11:  		/* lwz R10, <#[R31 + 56]> */
		/* 8208352Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000038) );
		/* 8208352Ch case   11:*/		return 0x82083530;
		  /* 82083530h */ case   12:  		/* cmplw CR6, R11, R10 */
		/* 82083530h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82083530h case   12:*/		return 0x82083534;
		  /* 82083534h */ case   13:  		/* stw R11, <#[R31 + 48]> */
		/* 82083534h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82083534h case   13:*/		return 0x82083538;
		  /* 82083538h */ case   14:  		/* bc 4, CR6_GT, 16 */
		/* 82083538h case   14:*/		if ( !regs.CR[6].gt ) { return 0x82083548;  }
		/* 82083538h case   14:*/		return 0x8208353C;
		  /* 8208353Ch */ case   15:  		/* mr R3, R31 */
		/* 8208353Ch case   15:*/		regs.R3 = regs.R31;
		/* 8208353Ch case   15:*/		return 0x82083540;
		  /* 82083540h */ case   16:  		/* bl -62520 */
		/* 82083540h case   16:*/		regs.LR = 0x82083544; return 0x82074108;
		/* 82083540h case   16:*/		return 0x82083544;
		  /* 82083544h */ case   17:  		/* mr R11, R3 */
		/* 82083544h case   17:*/		regs.R11 = regs.R3;
		/* 82083544h case   17:*/		return 0x82083548;
	}
	return 0x82083548;
} // Block from 82083500h-82083548h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82083548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083548);
		  /* 82083548h */ case    0:  		/* addic. R30, R30, -1 */
		/* 82083548h case    0:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 82083548h case    0:*/		return 0x8208354C;
		  /* 8208354Ch */ case    1:  		/* bc 4, CR0_LT, -140 */
		/* 8208354Ch case    1:*/		if ( !regs.CR[0].lt ) { return 0x820834C0;  }
		/* 8208354Ch case    1:*/		return 0x82083550;
		  /* 82083550h */ case    2:  		/* b 8 */
		/* 82083550h case    2:*/		return 0x82083558;
		/* 82083550h case    2:*/		return 0x82083554;
	}
	return 0x82083554;
} // Block from 82083548h-82083554h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82083554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083554);
		  /* 82083554h */ case    0:  		/* lwz R29, <#[R1 + 80]> */
		/* 82083554h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 82083554h case    0:*/		return 0x82083558;
	}
	return 0x82083558;
} // Block from 82083554h-82083558h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82083558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083558);
		  /* 82083558h */ case    0:  		/* cmplw CR6, R29, R28 */
		/* 82083558h case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R28);
		/* 82083558h case    0:*/		return 0x8208355C;
		  /* 8208355Ch */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 8208355Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82083590;  }
		/* 8208355Ch case    1:*/		return 0x82083560;
		  /* 82083560h */ case    2:  		/* lbz R10, <#[R31 + 11068]> */
		/* 82083560h case    2:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002B3C) );
		/* 82083560h case    2:*/		return 0x82083564;
		  /* 82083564h */ case    3:  		/* rlwinm. R10, R10, 0, 25, 25 */
		/* 82083564h case    3:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R10,regs.R10);
		/* 82083564h case    3:*/		return 0x82083568;
		  /* 82083568h */ case    4:  		/* bc 12, CR0_EQ, 40 */
		/* 82083568h case    4:*/		if ( regs.CR[0].eq ) { return 0x82083590;  }
		/* 82083568h case    4:*/		return 0x8208356C;
		  /* 8208356Ch */ case    5:  		/* stwu R27, <#[R11 + 4]> */
		/* 8208356Ch case    5:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8208356Ch case    5:*/		return 0x82083570;
		  /* 82083570h */ case    6:  		/* li R9, 1 */
		/* 82083570h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 82083570h case    6:*/		return 0x82083574;
		  /* 82083574h */ case    7:  		/* li R7, 8707 */
		/* 82083574h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x2203);
		/* 82083574h case    7:*/		return 0x82083578;
		  /* 82083578h */ case    8:  		/* mr R10, R27 */
		/* 82083578h case    8:*/		regs.R10 = regs.R27;
		/* 82083578h case    8:*/		return 0x8208357C;
		  /* 8208357Ch */ case    9:  		/* mr R8, R25 */
		/* 8208357Ch case    9:*/		regs.R8 = regs.R25;
		/* 8208357Ch case    9:*/		return 0x82083580;
		  /* 82083580h */ case   10:  		/* stwu R9, <#[R11 + 4]> */
		/* 82083580h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82083580h case   10:*/		return 0x82083584;
		  /* 82083584h */ case   11:  		/* stwu R25, <#[R11 + 4]> */
		/* 82083584h case   11:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82083584h case   11:*/		return 0x82083588;
		  /* 82083588h */ case   12:  		/* stwu R7, <#[R11 + 4]> */
		/* 82083588h case   12:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82083588h case   12:*/		return 0x8208358C;
		  /* 8208358Ch */ case   13:  		/* stwu R28, <#[R11 + 4]> */
		/* 8208358Ch case   13:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8208358Ch case   13:*/		return 0x82083590;
	}
	return 0x82083590;
} // Block from 82083558h-82083590h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82083590h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083590( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083590) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083590);
		  /* 82083590h */ case    0:  		/* stwu R27, <#[R11 + 4]> */
		/* 82083590h case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82083590h case    0:*/		return 0x82083594;
		  /* 82083594h */ case    1:  		/* mr R10, R27 */
		/* 82083594h case    1:*/		regs.R10 = regs.R27;
		/* 82083594h case    1:*/		return 0x82083598;
		  /* 82083598h */ case    2:  		/* lwz R10, <#[R31 + 13084]> */
		/* 82083598h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000331C) );
		/* 82083598h case    2:*/		return 0x8208359C;
		  /* 8208359Ch */ case    3:  		/* mr R9, R21 */
		/* 8208359Ch case    3:*/		regs.R9 = regs.R21;
		/* 8208359Ch case    3:*/		return 0x820835A0;
		  /* 820835A0h */ case    4:  		/* stwu R10, <#[R11 + 4]> */
		/* 820835A0h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820835A0h case    4:*/		return 0x820835A4;
		  /* 820835A4h */ case    5:  		/* stwu R21, <#[R11 + 4]> */
		/* 820835A4h case    5:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820835A4h case    5:*/		return 0x820835A8;
		  /* 820835A8h */ case    6:  		/* lwz R10, <#[R31 + 13088]> */
		/* 820835A8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00003320) );
		/* 820835A8h case    6:*/		return 0x820835AC;
		  /* 820835ACh */ case    7:  		/* stwu R10, <#[R11 + 4]> */
		/* 820835ACh case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820835ACh case    7:*/		return 0x820835B0;
		  /* 820835B0h */ case    8:  		/* b 60 */
		/* 820835B0h case    8:*/		return 0x820835EC;
		/* 820835B0h case    8:*/		return 0x820835B4;
	}
	return 0x820835B4;
} // Block from 82083590h-820835B4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820835B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820835B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820835B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820835B4);
		  /* 820835B4h */ case    0:  		/* lwz R9, <#[R31 + 12284]> */
		/* 820835B4h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00002FFC) );
		/* 820835B4h case    0:*/		return 0x820835B8;
		  /* 820835B8h */ case    1:  		/* mr R10, R28 */
		/* 820835B8h case    1:*/		regs.R10 = regs.R28;
		/* 820835B8h case    1:*/		return 0x820835BC;
		  /* 820835BCh */ case    2:  		/* rlwinm. R9, R9, 0, 12, 14 */
		/* 820835BCh case    2:*/		cpu::op::rlwinm<1,0,12,14>(regs,&regs.R9,regs.R9);
		/* 820835BCh case    2:*/		return 0x820835C0;
		  /* 820835C0h */ case    3:  		/* bc 4, CR0_EQ, 8 */
		/* 820835C0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x820835C8;  }
		/* 820835C0h case    3:*/		return 0x820835C4;
		  /* 820835C4h */ case    4:  		/* rlwinm R10, R28, 0, 0, 30 */
		/* 820835C4h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R28);
		/* 820835C4h case    4:*/		return 0x820835C8;
	}
	return 0x820835C8;
} // Block from 820835B4h-820835C8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820835C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820835C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820835C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820835C8);
		  /* 820835C8h */ case    0:  		/* li R9, 8707 */
		/* 820835C8h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x2203);
		/* 820835C8h case    0:*/		return 0x820835CC;
		  /* 820835CCh */ case    1:  		/* cmplw CR6, R10, R28 */
		/* 820835CCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R28);
		/* 820835CCh case    1:*/		return 0x820835D0;
		  /* 820835D0h */ case    2:  		/* stwu R9, <#[R11 + 4]> */
		/* 820835D0h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820835D0h case    2:*/		return 0x820835D4;
		  /* 820835D4h */ case    3:  		/* stwu R10, <#[R11 + 4]> */
		/* 820835D4h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820835D4h case    3:*/		return 0x820835D8;
		  /* 820835D8h */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 820835D8h case    4:*/		if ( regs.CR[6].eq ) { return 0x820835EC;  }
		/* 820835D8h case    4:*/		return 0x820835DC;
		  /* 820835DCh */ case    5:  		/* lbz R10, <#[R31 + 11068]> */
		/* 820835DCh case    5:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002B3C) );
		/* 820835DCh case    5:*/		return 0x820835E0;
		  /* 820835E0h */ case    6:  		/* rlwinm. R10, R10, 0, 25, 25 */
		/* 820835E0h case    6:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R10,regs.R10);
		/* 820835E0h case    6:*/		return 0x820835E4;
		  /* 820835E4h */ case    7:  		/* bc 12, CR0_EQ, 8 */
		/* 820835E4h case    7:*/		if ( regs.CR[0].eq ) { return 0x820835EC;  }
		/* 820835E4h case    7:*/		return 0x820835E8;
		  /* 820835E8h */ case    8:  		/* mr R23, R28 */
		/* 820835E8h case    8:*/		regs.R23 = regs.R28;
		/* 820835E8h case    8:*/		return 0x820835EC;
	}
	return 0x820835EC;
} // Block from 820835C8h-820835ECh (9 instructions)

//////////////////////////////////////////////////////
// Block at 820835ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820835EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820835EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820835EC);
		  /* 820835ECh */ case    0:  		/* li R12, -257 */
		/* 820835ECh case    0:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFFEFF);
		/* 820835ECh case    0:*/		return 0x820835F0;
		  /* 820835F0h */ case    1:  		/* and R26, R26, R12 */
		/* 820835F0h case    1:*/		cpu::op::and<0>(regs,&regs.R26,regs.R26,regs.R12);
		/* 820835F0h case    1:*/		return 0x820835F4;
	}
	return 0x820835F4;
} // Block from 820835ECh-820835F4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820835F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820835F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820835F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820835F4);
		  /* 820835F4h */ case    0:  		/* ld R10, <#[R31 + 40]> */
		/* 820835F4h case    0:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 820835F4h case    0:*/		return 0x820835F8;
		  /* 820835F8h */ case    1:  		/* li R12, 1 */
		/* 820835F8h case    1:*/		cpu::op::li<0>(regs,&regs.R12,0x1);
		/* 820835F8h case    1:*/		return 0x820835FC;
		  /* 820835FCh */ case    2:  		/* and R10, R10, R26 */
		/* 820835FCh case    2:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R26);
		/* 820835FCh case    2:*/		return 0x82083600;
		  /* 82083600h */ case    3:  		/* rldicr R12, R12, 57, 63 */
		/* 82083600h case    3:*/		cpu::op::rldicr<0,57,63>(regs,&regs.R12,regs.R12);
		/* 82083600h case    3:*/		return 0x82083604;
		  /* 82083604h */ case    4:  		/* and R9, R10, R12 */
		/* 82083604h case    4:*/		cpu::op::and<0>(regs,&regs.R9,regs.R10,regs.R12);
		/* 82083604h case    4:*/		return 0x82083608;
		  /* 82083608h */ case    5:  		/* cmpldi CR6, R9, 0 */
		/* 82083608h case    5:*/		cpu::op::cmpldi<6>(regs,regs.R9,0x00000000);
		/* 82083608h case    5:*/		return 0x8208360C;
		  /* 8208360Ch */ case    6:  		/* bc 12, CR6_EQ, 40 */
		/* 8208360Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x82083634;  }
		/* 8208360Ch case    6:*/		return 0x82083610;
		  /* 82083610h */ case    7:  		/* li R8, 8192 */
		/* 82083610h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x2000);
		/* 82083610h case    7:*/		return 0x82083614;
		  /* 82083614h */ case    8:  		/* lwz R9, <#[R31 + 10368]> */
		/* 82083614h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00002880) );
		/* 82083614h case    8:*/		return 0x82083618;
		  /* 82083618h */ case    9:  		/* li R12, -2 */
		/* 82083618h case    9:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFFFFE);
		/* 82083618h case    9:*/		return 0x8208361C;
		  /* 8208361Ch */ case   10:  		/* stwu R8, <#[R11 + 4]> */
		/* 8208361Ch case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8208361Ch case   10:*/		return 0x82083620;
		  /* 82083620h */ case   11:  		/* rldicr R12, R12, 57, 63 */
		/* 82083620h case   11:*/		cpu::op::rldicr<0,57,63>(regs,&regs.R12,regs.R12);
		/* 82083620h case   11:*/		return 0x82083624;
		  /* 82083624h */ case   12:  		/* and R26, R26, R12 */
		/* 82083624h case   12:*/		cpu::op::and<0>(regs,&regs.R26,regs.R26,regs.R12);
		/* 82083624h case   12:*/		return 0x82083628;
		  /* 82083628h */ case   13:  		/* stwu R9, <#[R11 + 4]> */
		/* 82083628h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82083628h case   13:*/		return 0x8208362C;
		  /* 8208362Ch */ case   14:  		/* lwz R24, <#[R31 + 13552]> */
		/* 8208362Ch case   14:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R31 + 0x000034F0) );
		/* 8208362Ch case   14:*/		return 0x82083630;
		  /* 82083630h */ case   15:  		/* rlwimi R24, R9, 0, 0, 17 */
		/* 82083630h case   15:*/		cpu::op::rlwimi<0,0,0,17>(regs,&regs.R24,regs.R9);
		/* 82083630h case   15:*/		return 0x82083634;
	}
	return 0x82083634;
} // Block from 820835F4h-82083634h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82083634h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083634( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083634) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083634);
		  /* 82083634h */ case    0:  		/* li R12, 1 */
		/* 82083634h case    0:*/		cpu::op::li<0>(regs,&regs.R12,0x1);
		/* 82083634h case    0:*/		return 0x82083638;
		  /* 82083638h */ case    1:  		/* rldicr R12, R12, 37, 63 */
		/* 82083638h case    1:*/		cpu::op::rldicr<0,37,63>(regs,&regs.R12,regs.R12);
		/* 82083638h case    1:*/		return 0x8208363C;
		  /* 8208363Ch */ case    2:  		/* and R10, R10, R12 */
		/* 8208363Ch case    2:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 8208363Ch case    2:*/		return 0x82083640;
		  /* 82083640h */ case    3:  		/* cmpldi CR6, R10, 0 */
		/* 82083640h case    3:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 82083640h case    3:*/		return 0x82083644;
		  /* 82083644h */ case    4:  		/* bc 12, CR6_EQ, 36 */
		/* 82083644h case    4:*/		if ( regs.CR[6].eq ) { return 0x82083668;  }
		/* 82083644h case    4:*/		return 0x82083648;
		  /* 82083648h */ case    5:  		/* li R10, 8452 */
		/* 82083648h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x2104);
		/* 82083648h case    5:*/		return 0x8208364C;
		  /* 8208364Ch */ case    6:  		/* li R12, -2 */
		/* 8208364Ch case    6:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFFFFE);
		/* 8208364Ch case    6:*/		return 0x82083650;
		  /* 82083650h */ case    7:  		/* stwu R10, <#[R11 + 4]> */
		/* 82083650h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82083650h case    7:*/		return 0x82083654;
		  /* 82083654h */ case    8:  		/* li R22, 0 */
		/* 82083654h case    8:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 82083654h case    8:*/		return 0x82083658;
		  /* 82083658h */ case    9:  		/* lwz R10, <#[R31 + 10460]> */
		/* 82083658h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000028DC) );
		/* 82083658h case    9:*/		return 0x8208365C;
		  /* 8208365Ch */ case   10:  		/* rldicr R12, R12, 37, 63 */
		/* 8208365Ch case   10:*/		cpu::op::rldicr<0,37,63>(regs,&regs.R12,regs.R12);
		/* 8208365Ch case   10:*/		return 0x82083660;
		  /* 82083660h */ case   11:  		/* and R26, R26, R12 */
		/* 82083660h case   11:*/		cpu::op::and<0>(regs,&regs.R26,regs.R26,regs.R12);
		/* 82083660h case   11:*/		return 0x82083664;
		  /* 82083664h */ case   12:  		/* stwu R10, <#[R11 + 4]> */
		/* 82083664h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82083664h case   12:*/		return 0x82083668;
	}
	return 0x82083668;
} // Block from 82083634h-82083668h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82083668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083668);
		  /* 82083668h */ case    0:  		/* and R10, R22, R24 */
		/* 82083668h case    0:*/		cpu::op::and<0>(regs,&regs.R10,regs.R22,regs.R24);
		/* 82083668h case    0:*/		return 0x8208366C;
		  /* 8208366Ch */ case    1:  		/* and R10, R10, R23 */
		/* 8208366Ch case    1:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R23);
		/* 8208366Ch case    1:*/		return 0x82083670;
		  /* 82083670h */ case    2:  		/* cmpwi CR6, R10, -1 */
		/* 82083670h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 82083670h case    2:*/		return 0x82083674;
		  /* 82083674h */ case    3:  		/* bc 12, CR6_EQ, 144 */
		/* 82083674h case    3:*/		if ( regs.CR[6].eq ) { return 0x82083704;  }
		/* 82083674h case    3:*/		return 0x82083678;
		  /* 82083678h */ case    4:  		/* stwu R21, <#[R11 + 4]> */
		/* 82083678h case    4:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82083678h case    4:*/		return 0x8208367C;
		  /* 8208367Ch */ case    5:  		/* li R9, 0 */
		/* 8208367Ch case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8208367Ch case    5:*/		return 0x82083680;
		  /* 82083680h */ case    6:  		/* lis R8, 5461 */
		/* 82083680h case    6:*/		cpu::op::lis<0>(regs,&regs.R8,0x1555);
		/* 82083680h case    6:*/		return 0x82083684;
		  /* 82083684h */ case    7:  		/* mr R10, R21 */
		/* 82083684h case    7:*/		regs.R10 = regs.R21;
		/* 82083684h case    7:*/		return 0x82083688;
		  /* 82083688h */ case    8:  		/* ori R8, R8, 21845 */
		/* 82083688h case    8:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x5555);
		/* 82083688h case    8:*/		return 0x8208368C;
		  /* 8208368Ch */ case    9:  		/* mr R10, R27 */
		/* 8208368Ch case    9:*/		regs.R10 = regs.R27;
		/* 8208368Ch case    9:*/		return 0x82083690;
		  /* 82083690h */ case   10:  		/* stwu R9, <#[R11 + 4]> */
		/* 82083690h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82083690h case   10:*/		return 0x82083694;
		  /* 82083694h */ case   11:  		/* cmpwi CR6, R23, -1 */
		/* 82083694h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R23,0xFFFFFFFF);
		/* 82083694h case   11:*/		return 0x82083698;
		  /* 82083698h */ case   12:  		/* stwu R27, <#[R11 + 4]> */
		/* 82083698h case   12:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82083698h case   12:*/		return 0x8208369C;
		  /* 8208369Ch */ case   13:  		/* stwu R8, <#[R11 + 4]> */
		/* 8208369Ch case   13:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8208369Ch case   13:*/		return 0x820836A0;
		  /* 820836A0h */ case   14:  		/* bc 12, CR6_EQ, 24 */
		/* 820836A0h case   14:*/		if ( regs.CR[6].eq ) { return 0x820836B8;  }
		/* 820836A0h case   14:*/		return 0x820836A4;
		  /* 820836A4h */ case   15:  		/* stwu R25, <#[R11 + 4]> */
		/* 820836A4h case   15:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820836A4h case   15:*/		return 0x820836A8;
		  /* 820836A8h */ case   16:  		/* li R9, 8707 */
		/* 820836A8h case   16:*/		cpu::op::li<0>(regs,&regs.R9,0x2203);
		/* 820836A8h case   16:*/		return 0x820836AC;
		  /* 820836ACh */ case   17:  		/* mr R10, R25 */
		/* 820836ACh case   17:*/		regs.R10 = regs.R25;
		/* 820836ACh case   17:*/		return 0x820836B0;
		  /* 820836B0h */ case   18:  		/* stwu R9, <#[R11 + 4]> */
		/* 820836B0h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820836B0h case   18:*/		return 0x820836B4;
		  /* 820836B4h */ case   19:  		/* stwu R23, <#[R11 + 4]> */
		/* 820836B4h case   19:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820836B4h case   19:*/		return 0x820836B8;
	}
	return 0x820836B8;
} // Block from 82083668h-820836B8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820836B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820836B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820836B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820836B8);
		  /* 820836B8h */ case    0:  		/* cmpwi CR6, R24, -1 */
		/* 820836B8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R24,0xFFFFFFFF);
		/* 820836B8h case    0:*/		return 0x820836BC;
		  /* 820836BCh */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 820836BCh case    1:*/		if ( regs.CR[6].eq ) { return 0x820836D4;  }
		/* 820836BCh case    1:*/		return 0x820836C0;
		  /* 820836C0h */ case    2:  		/* stwu R25, <#[R11 + 4]> */
		/* 820836C0h case    2:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820836C0h case    2:*/		return 0x820836C4;
		  /* 820836C4h */ case    3:  		/* li R9, 8192 */
		/* 820836C4h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x2000);
		/* 820836C4h case    3:*/		return 0x820836C8;
		  /* 820836C8h */ case    4:  		/* mr R10, R25 */
		/* 820836C8h case    4:*/		regs.R10 = regs.R25;
		/* 820836C8h case    4:*/		return 0x820836CC;
		  /* 820836CCh */ case    5:  		/* stwu R9, <#[R11 + 4]> */
		/* 820836CCh case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820836CCh case    5:*/		return 0x820836D0;
		  /* 820836D0h */ case    6:  		/* stwu R24, <#[R11 + 4]> */
		/* 820836D0h case    6:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820836D0h case    6:*/		return 0x820836D4;
	}
	return 0x820836D4;
} // Block from 820836B8h-820836D4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820836D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820836D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820836D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820836D4);
		  /* 820836D4h */ case    0:  		/* cmpwi CR6, R22, -1 */
		/* 820836D4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R22,0xFFFFFFFF);
		/* 820836D4h case    0:*/		return 0x820836D8;
		  /* 820836D8h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 820836D8h case    1:*/		if ( regs.CR[6].eq ) { return 0x820836EC;  }
		/* 820836D8h case    1:*/		return 0x820836DC;
		  /* 820836DCh */ case    2:  		/* stwu R25, <#[R11 + 4]> */
		/* 820836DCh case    2:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820836DCh case    2:*/		return 0x820836E0;
	}
	return 0x820836E0;
} // Block from 820836D4h-820836E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820836E0h
// Function '?UpdatePredicationSelect@D3D@@YAXPAVCXpsGlobal@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820836E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820836E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820836E0);
		  /* 820836E0h */ case    0:  		/* li R10, 8452 */
		/* 820836E0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x2104);
		/* 820836E0h case    0:*/		return 0x820836E4;
		  /* 820836E4h */ case    1:  		/* stwu R10, <#[R11 + 4]> */
		/* 820836E4h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820836E4h case    1:*/		return 0x820836E8;
		  /* 820836E8h */ case    2:  		/* stwu R22, <#[R11 + 4]> */
		/* 820836E8h case    2:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820836E8h case    2:*/		return 0x820836EC;
	}
	return 0x820836EC;
} // Block from 820836E0h-820836ECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 820836ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820836EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820836EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820836EC);
		  /* 820836ECh */ case    0:  		/* stwu R27, <#[R11 + 4]> */
		/* 820836ECh case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820836ECh case    0:*/		return 0x820836F0;
		  /* 820836F0h */ case    1:  		/* lwz R10, <#[R31 + 13084]> */
		/* 820836F0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000331C) );
		/* 820836F0h case    1:*/		return 0x820836F4;
		  /* 820836F4h */ case    2:  		/* stwu R10, <#[R11 + 4]> */
		/* 820836F4h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820836F4h case    2:*/		return 0x820836F8;
		  /* 820836F8h */ case    3:  		/* stwu R21, <#[R11 + 4]> */
		/* 820836F8h case    3:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820836F8h case    3:*/		return 0x820836FC;
		  /* 820836FCh */ case    4:  		/* lwz R10, <#[R31 + 13088]> */
		/* 820836FCh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00003320) );
		/* 820836FCh case    4:*/		return 0x82083700;
		  /* 82083700h */ case    5:  		/* stwu R10, <#[R11 + 4]> */
		/* 82083700h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82083700h case    5:*/		return 0x82083704;
	}
	return 0x82083704;
} // Block from 820836ECh-82083704h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82083704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083704);
		  /* 82083704h */ case    0:  		/* stw R11, <#[R31 + 48]> */
		/* 82083704h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82083704h case    0:*/		return 0x82083708;
		  /* 82083708h */ case    1:  		/* mr R3, R26 */
		/* 82083708h case    1:*/		regs.R3 = regs.R26;
		/* 82083708h case    1:*/		return 0x8208370C;
		  /* 8208370Ch */ case    2:  		/* addi R1, R1, 192 */
		/* 8208370Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8208370Ch case    2:*/		return 0x82083710;
		  /* 82083710h */ case    3:  		/* b 56188 */
		/* 82083710h case    3:*/		return 0x8209128C;
		/* 82083710h case    3:*/		return 0x82083714;
		  /* 82083714h */ case    4:  		/* nop */
		/* 82083714h case    4:*/		cpu::op::nop();
		/* 82083714h case    4:*/		return 0x82083718;
	}
	return 0x82083718;
} // Block from 82083704h-82083718h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82083718h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083718( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083718) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083718);
		  /* 82083718h */ case    0:  		/* mfspr R12, LR */
		/* 82083718h case    0:*/		regs.R12 = regs.LR;
		/* 82083718h case    0:*/		return 0x8208371C;
		  /* 8208371Ch */ case    1:  		/* bl 56116 */
		/* 8208371Ch case    1:*/		regs.LR = 0x82083720; return 0x82091250;
		/* 8208371Ch case    1:*/		return 0x82083720;
		  /* 82083720h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82083720h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82083720h case    2:*/		return 0x82083724;
		  /* 82083724h */ case    3:  		/* mr R31, R4 */
		/* 82083724h case    3:*/		regs.R31 = regs.R4;
		/* 82083724h case    3:*/		return 0x82083728;
		  /* 82083728h */ case    4:  		/* lwz R4, <#[R3 + 48]> */
		/* 82083728h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000030) );
		/* 82083728h case    4:*/		return 0x8208372C;
		  /* 8208372Ch */ case    5:  		/* mr R26, R3 */
		/* 8208372Ch case    5:*/		regs.R26 = regs.R3;
		/* 8208372Ch case    5:*/		return 0x82083730;
		  /* 82083730h */ case    6:  		/* addi R29, R6, -4 */
		/* 82083730h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R6,0xFFFFFFFC);
		/* 82083730h case    6:*/		return 0x82083734;
		  /* 82083734h */ case    7:  		/* cntlzd R11, R31 */
		/* 82083734h case    7:*/		cpu::op::cntlzd<0>(regs,&regs.R11,regs.R31);
		/* 82083734h case    7:*/		return 0x82083738;
		  /* 82083738h */ case    8:  		/* lwz R9, <#[R26 + 52]> */
		/* 82083738h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000034) );
		/* 82083738h case    8:*/		return 0x8208373C;
		  /* 8208373Ch */ case    9:  		/* rldicl R8, R11, 0, 32 */
		/* 8208373Ch case    9:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R8,regs.R11);
		/* 8208373Ch case    9:*/		return 0x82083740;
		  /* 82083740h */ case   10:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 82083740h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 82083740h case   10:*/		return 0x82083744;
		  /* 82083744h */ case   11:  		/* sld R31, R31, R8 */
		/* 82083744h case   11:*/		cpu::op::sld<0>(regs,&regs.R31,regs.R31,regs.R8);
		/* 82083744h case   11:*/		return 0x82083748;
		  /* 82083748h */ case   12:  		/* nor R8, R31, R31 */
		/* 82083748h case   12:*/		cpu::op::nor<0>(regs,&regs.R8,regs.R31,regs.R31);
		/* 82083748h case   12:*/		return 0x8208374C;
		  /* 8208374Ch */ case   13:  		/* add R29, R10, R29 */
		/* 8208374Ch case   13:*/		cpu::op::add<0>(regs,&regs.R29,regs.R10,regs.R29);
		/* 8208374Ch case   13:*/		return 0x82083750;
		  /* 82083750h */ case   14:  		/* cntlzd R30, R8 */
		/* 82083750h case   14:*/		cpu::op::cntlzd<0>(regs,&regs.R30,regs.R8);
		/* 82083750h case   14:*/		return 0x82083754;
		  /* 82083754h */ case   15:  		/* add R28, R11, R5 */
		/* 82083754h case   15:*/		cpu::op::add<0>(regs,&regs.R28,regs.R11,regs.R5);
		/* 82083754h case   15:*/		return 0x82083758;
		  /* 82083758h */ case   16:  		/* rlwinm R27, R30, 2, 0, 29 */
		/* 82083758h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R27,regs.R30);
		/* 82083758h case   16:*/		return 0x8208375C;
		  /* 8208375Ch */ case   17:  		/* mr R11, R30 */
		/* 8208375Ch case   17:*/		regs.R11 = regs.R30;
		/* 8208375Ch case   17:*/		return 0x82083760;
		  /* 82083760h */ case   18:  		/* add R10, R27, R4 */
		/* 82083760h case   18:*/		cpu::op::add<0>(regs,&regs.R10,regs.R27,regs.R4);
		/* 82083760h case   18:*/		return 0x82083764;
		  /* 82083764h */ case   19:  		/* cmplw CR6, R10, R9 */
		/* 82083764h case   19:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82083764h case   19:*/		return 0x82083768;
		  /* 82083768h */ case   20:  		/* bc 12, CR6_LT, 52 */
		/* 82083768h case   20:*/		if ( regs.CR[6].lt ) { return 0x8208379C;  }
		/* 82083768h case   20:*/		return 0x8208376C;
		  /* 8208376Ch */ case   21:  		/* li R8, 1 */
		/* 8208376Ch case   21:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8208376Ch case   21:*/		return 0x82083770;
		  /* 82083770h */ case   22:  		/* mr R7, R30 */
		/* 82083770h case   22:*/		regs.R7 = regs.R30;
		/* 82083770h case   22:*/		return 0x82083774;
		  /* 82083774h */ case   23:  		/* mr R6, R29 */
		/* 82083774h case   23:*/		regs.R6 = regs.R29;
		/* 82083774h case   23:*/		return 0x82083778;
		  /* 82083778h */ case   24:  		/* mr R5, R28 */
		/* 82083778h case   24:*/		regs.R5 = regs.R28;
		/* 82083778h case   24:*/		return 0x8208377C;
		  /* 8208377Ch */ case   25:  		/* mr R3, R26 */
		/* 8208377Ch case   25:*/		regs.R3 = regs.R26;
		/* 8208377Ch case   25:*/		return 0x82083780;
		  /* 82083780h */ case   26:  		/* bl -1704 */
		/* 82083780h case   26:*/		regs.LR = 0x82083784; return 0x820830D8;
		/* 82083780h case   26:*/		return 0x82083784;
		  /* 82083784h */ case   27:  		/* rldicl R11, R30, 0, 32 */
		/* 82083784h case   27:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R30);
		/* 82083784h case   27:*/		return 0x82083788;
		  /* 82083788h */ case   28:  		/* mr R4, R3 */
		/* 82083788h case   28:*/		regs.R4 = regs.R3;
		/* 82083788h case   28:*/		return 0x8208378C;
		  /* 8208378Ch */ case   29:  		/* add R29, R27, R29 */
		/* 8208378Ch case   29:*/		cpu::op::add<0>(regs,&regs.R29,regs.R27,regs.R29);
		/* 8208378Ch case   29:*/		return 0x82083790;
		  /* 82083790h */ case   30:  		/* add R5, R30, R28 */
		/* 82083790h case   30:*/		cpu::op::add<0>(regs,&regs.R5,regs.R30,regs.R28);
		/* 82083790h case   30:*/		return 0x82083794;
		  /* 82083794h */ case   31:  		/* sld R31, R31, R11 */
		/* 82083794h case   31:*/		cpu::op::sld<0>(regs,&regs.R31,regs.R31,regs.R11);
		/* 82083794h case   31:*/		return 0x82083798;
		  /* 82083798h */ case   32:  		/* b 44 */
		/* 82083798h case   32:*/		return 0x820837C4;
		/* 82083798h case   32:*/		return 0x8208379C;
	}
	return 0x8208379C;
} // Block from 82083718h-8208379Ch (33 instructions)

//////////////////////////////////////////////////////
// Block at 8208379Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208379C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208379C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208379C);
		  /* 8208379Ch */ case    0:  		/* addi R10, R30, -1 */
		/* 8208379Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0xFFFFFFFF);
		/* 8208379Ch case    0:*/		return 0x820837A0;
		  /* 820837A0h */ case    1:  		/* add R5, R30, R28 */
		/* 820837A0h case    1:*/		cpu::op::add<0>(regs,&regs.R5,regs.R30,regs.R28);
		/* 820837A0h case    1:*/		return 0x820837A4;
		  /* 820837A4h */ case    2:  		/* rlwinm R10, R10, 16, 0, 15 */
		/* 820837A4h case    2:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R10,regs.R10);
		/* 820837A4h case    2:*/		return 0x820837A8;
		  /* 820837A8h */ case    3:  		/* or R10, R10, R28 */
		/* 820837A8h case    3:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R28);
		/* 820837A8h case    3:*/		return 0x820837AC;
		  /* 820837ACh */ case    4:  		/* stwu R10, <#[R4 + 4]> */
		/* 820837ACh case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R4 + 0x00000004) );
		regs.R4 = (uint32)(regs.R4 + 0x00000004);
		/* 820837ACh case    4:*/		return 0x820837B0;
		  /* 820837B0h */ case    5:  		/* lwzu R10, <#[R29 + 4]> */
		/* 820837B0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 820837B0h case    5:*/		return 0x820837B4;
		  /* 820837B4h */ case    6:  		/* addic. R11, R11, -1 */
		/* 820837B4h case    6:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820837B4h case    6:*/		return 0x820837B8;
		  /* 820837B8h */ case    7:  		/* rldicr R31, R31, 1, 62 */
		/* 820837B8h case    7:*/		cpu::op::rldicr<0,1,62>(regs,&regs.R31,regs.R31);
		/* 820837B8h case    7:*/		return 0x820837BC;
		  /* 820837BCh */ case    8:  		/* stwu R10, <#[R4 + 4]> */
		/* 820837BCh case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R4 + 0x00000004) );
		regs.R4 = (uint32)(regs.R4 + 0x00000004);
		/* 820837BCh case    8:*/		return 0x820837C0;
	}
	return 0x820837C0;
} // Block from 8208379Ch-820837C0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820837C0h
// Function '?XpsVisibilityPatch@D3D@@YAXPBVCXpsVisibilityPatchListChunk@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820837C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820837C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820837C0);
		  /* 820837C0h */ case    0:  		/* bc 4, CR0_EQ, -16 */
		/* 820837C0h case    0:*/		if ( !regs.CR[0].eq ) { return 0x820837B0;  }
		/* 820837C0h case    0:*/		return 0x820837C4;
	}
	return 0x820837C4;
} // Block from 820837C0h-820837C4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820837C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820837C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820837C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820837C4);
		  /* 820837C4h */ case    0:  		/* cmpldi CR6, R31, 0 */
		/* 820837C4h case    0:*/		cpu::op::cmpldi<6>(regs,regs.R31,0x00000000);
		/* 820837C4h case    0:*/		return 0x820837C8;
		  /* 820837C8h */ case    1:  		/* bc 4, CR6_EQ, -148 */
		/* 820837C8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82083734;  }
		/* 820837C8h case    1:*/		return 0x820837CC;
		  /* 820837CCh */ case    2:  		/* stw R4, <#[R26 + 48]> */
		/* 820837CCh case    2:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R26 + 0x00000030) );
		/* 820837CCh case    2:*/		return 0x820837D0;
		  /* 820837D0h */ case    3:  		/* addi R1, R1, 144 */
		/* 820837D0h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 820837D0h case    3:*/		return 0x820837D4;
		  /* 820837D4h */ case    4:  		/* b 56012 */
		/* 820837D4h case    4:*/		return 0x820912A0;
		/* 820837D4h case    4:*/		return 0x820837D8;
	}
	return 0x820837D8;
} // Block from 820837C4h-820837D8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820837D8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820837D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820837D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820837D8);
		  /* 820837D8h */ case    0:  		/* mfspr R12, LR */
		/* 820837D8h case    0:*/		regs.R12 = regs.LR;
		/* 820837D8h case    0:*/		return 0x820837DC;
		  /* 820837DCh */ case    1:  		/* bl 55920 */
		/* 820837DCh case    1:*/		regs.LR = 0x820837E0; return 0x8209124C;
		/* 820837DCh case    1:*/		return 0x820837E0;
		  /* 820837E0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 820837E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 820837E0h case    2:*/		return 0x820837E4;
		  /* 820837E4h */ case    3:  		/* lwz R11, <#[R3 + 56]> */
		/* 820837E4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000038) );
		/* 820837E4h case    3:*/		return 0x820837E8;
		  /* 820837E8h */ case    4:  		/* mr R29, R3 */
		/* 820837E8h case    4:*/		regs.R29 = regs.R3;
		/* 820837E8h case    4:*/		return 0x820837EC;
		  /* 820837ECh */ case    5:  		/* lwz R3, <#[R3 + 48]> */
		/* 820837ECh case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000030) );
		/* 820837ECh case    5:*/		return 0x820837F0;
		  /* 820837F0h */ case    6:  		/* mr R30, R4 */
		/* 820837F0h case    6:*/		regs.R30 = regs.R4;
		/* 820837F0h case    6:*/		return 0x820837F4;
		  /* 820837F4h */ case    7:  		/* li R27, 9096 */
		/* 820837F4h case    7:*/		cpu::op::li<0>(regs,&regs.R27,0x2388);
		/* 820837F4h case    7:*/		return 0x820837F8;
		  /* 820837F8h */ case    8:  		/* addi R31, R29, 10272 */
		/* 820837F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R29,0x2820);
		/* 820837F8h case    8:*/		return 0x820837FC;
		  /* 820837FCh */ case    9:  		/* cmplw CR6, R3, R11 */
		/* 820837FCh case    9:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 820837FCh case    9:*/		return 0x82083800;
		  /* 82083800h */ case   10:  		/* bc 4, CR6_GT, 12 */
		/* 82083800h case   10:*/		if ( !regs.CR[6].gt ) { return 0x8208380C;  }
		/* 82083800h case   10:*/		return 0x82083804;
		  /* 82083804h */ case   11:  		/* mr R3, R29 */
		/* 82083804h case   11:*/		regs.R3 = regs.R29;
		/* 82083804h case   11:*/		return 0x82083808;
		  /* 82083808h */ case   12:  		/* bl -63232 */
		/* 82083808h case   12:*/		regs.LR = 0x8208380C; return 0x82074108;
		/* 82083808h case   12:*/		return 0x8208380C;
	}
	return 0x8208380C;
} // Block from 820837D8h-8208380Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8208380Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208380C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208380C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208380C);
		  /* 8208380Ch */ case    0:  		/* li R11, 8199 */
		/* 8208380Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2007);
		/* 8208380Ch case    0:*/		return 0x82083810;
		  /* 82083810h */ case    1:  		/* li R10, 2609 */
		/* 82083810h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0xA31);
		/* 82083810h case    1:*/		return 0x82083814;
		  /* 82083814h */ case    2:  		/* stwu R11, <#[R3 + 4]> */
		/* 82083814h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82083814h case    2:*/		return 0x82083818;
		  /* 82083818h */ case    3:  		/* lis R11, 1 */
		/* 82083818h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0x1);
		/* 82083818h case    3:*/		return 0x8208381C;
		  /* 8208381Ch */ case    4:  		/* lwz R9, <#[R29 + 10396]> */
		/* 8208381Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x0000289C) );
		/* 8208381Ch case    4:*/		return 0x82083820;
		  /* 82083820h */ case    5:  		/* lis R8, 1 */
		/* 82083820h case    5:*/		cpu::op::lis<0>(regs,&regs.R8,0x1);
		/* 82083820h case    5:*/		return 0x82083824;
		  /* 82083824h */ case    6:  		/* li R7, 0 */
		/* 82083824h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82083824h case    6:*/		return 0x82083828;
		  /* 82083828h */ case    7:  		/* ori R8, R8, 2607 */
		/* 82083828h case    7:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0xA2F);
		/* 82083828h case    7:*/		return 0x8208382C;
		  /* 8208382Ch */ case    8:  		/* li R6, 4096 */
		/* 8208382Ch case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x1000);
		/* 8208382Ch case    8:*/		return 0x82083830;
		  /* 82083830h */ case    9:  		/* lis R5, -16380 */
		/* 82083830h case    9:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFFC004);
		/* 82083830h case    9:*/		return 0x82083834;
		  /* 82083834h */ case   10:  		/* stwu R9, <#[R3 + 4]> */
		/* 82083834h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82083834h case   10:*/		return 0x82083838;
		  /* 82083838h */ case   11:  		/* li R9, 3 */
		/* 82083838h case   11:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 82083838h case   11:*/		return 0x8208383C;
		  /* 8208383Ch */ case   12:  		/* ori R5, R5, 15360 */
		/* 8208383Ch case   12:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x3C00);
		/* 8208383Ch case   12:*/		return 0x82083840;
		  /* 82083840h */ case   13:  		/* li R4, 2609 */
		/* 82083840h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0xA31);
		/* 82083840h case   13:*/		return 0x82083844;
		  /* 82083844h */ case   14:  		/* li R28, 0 */
		/* 82083844h case   14:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82083844h case   14:*/		return 0x82083848;
		  /* 82083848h */ case   15:  		/* lis R26, -32768 */
		/* 82083848h case   15:*/		cpu::op::lis<0>(regs,&regs.R26,0xFFFF8000);
		/* 82083848h case   15:*/		return 0x8208384C;
		  /* 8208384Ch */ case   16:  		/* stwu R10, <#[R3 + 4]> */
		/* 8208384Ch case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8208384Ch case   16:*/		return 0x82083850;
		  /* 82083850h */ case   17:  		/* li R25, 8 */
		/* 82083850h case   17:*/		cpu::op::li<0>(regs,&regs.R25,0x8);
		/* 82083850h case   17:*/		return 0x82083854;
		  /* 82083854h */ case   18:  		/* addi R31, R31, -4 */
		/* 82083854h case   18:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0xFFFFFFFC);
		/* 82083854h case   18:*/		return 0x82083858;
		  /* 82083858h */ case   19:  		/* stwu R11, <#[R3 + 4]> */
		/* 82083858h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82083858h case   19:*/		return 0x8208385C;
		  /* 8208385Ch */ case   20:  		/* stwu R8, <#[R3 + 4]> */
		/* 8208385Ch case   20:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8208385Ch case   20:*/		return 0x82083860;
		  /* 82083860h */ case   21:  		/* stwu R7, <#[R3 + 4]> */
		/* 82083860h case   21:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82083860h case   21:*/		return 0x82083864;
		  /* 82083864h */ case   22:  		/* stwu R6, <#[R3 + 4]> */
		/* 82083864h case   22:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82083864h case   22:*/		return 0x82083868;
		  /* 82083868h */ case   23:  		/* stwu R5, <#[R3 + 4]> */
		/* 82083868h case   23:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82083868h case   23:*/		return 0x8208386C;
		  /* 8208386Ch */ case   24:  		/* stwu R9, <#[R3 + 4]> */
		/* 8208386Ch case   24:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8208386Ch case   24:*/		return 0x82083870;
		  /* 82083870h */ case   25:  		/* stwu R4, <#[R3 + 4]> */
		/* 82083870h case   25:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82083870h case   25:*/		return 0x82083874;
		  /* 82083874h */ case   26:  		/* stwu R28, <#[R3 + 4]> */
		/* 82083874h case   26:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82083874h case   26:*/		return 0x82083878;
		  /* 82083878h */ case   27:  		/* stwu R26, <#[R3 + 4]> */
		/* 82083878h case   27:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82083878h case   27:*/		return 0x8208387C;
		  /* 8208387Ch */ case   28:  		/* mr R4, R3 */
		/* 8208387Ch case   28:*/		regs.R4 = regs.R3;
		/* 8208387Ch case   28:*/		return 0x82083880;
		  /* 82083880h */ case   29:  		/* stwu R25, <#[R4 + 4]> */
		/* 82083880h case   29:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R4 + 0x00000004) );
		regs.R4 = (uint32)(regs.R4 + 0x00000004);
		/* 82083880h case   29:*/		return 0x82083884;
		  /* 82083884h */ case   30:  		/* stw R4, <#[R29 + 48]> */
		/* 82083884h case   30:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R29 + 0x00000030) );
		/* 82083884h case   30:*/		return 0x82083888;
		  /* 82083888h */ case   31:  		/* cntlzd R10, R30 */
		/* 82083888h case   31:*/		cpu::op::cntlzd<0>(regs,&regs.R10,regs.R30);
		/* 82083888h case   31:*/		return 0x8208388C;
		  /* 8208388Ch */ case   32:  		/* lwz R9, <#[R29 + 52]> */
		/* 8208388Ch case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000034) );
		/* 8208388Ch case   32:*/		return 0x82083890;
		  /* 82083890h */ case   33:  		/* rldicl R8, R10, 0, 32 */
		/* 82083890h case   33:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R8,regs.R10);
		/* 82083890h case   33:*/		return 0x82083894;
		  /* 82083894h */ case   34:  		/* rlwinm R11, R10, 4, 0, 27 */
		/* 82083894h case   34:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R10);
		/* 82083894h case   34:*/		return 0x82083898;
		  /* 82083898h */ case   35:  		/* sld R30, R30, R8 */
		/* 82083898h case   35:*/		cpu::op::sld<0>(regs,&regs.R30,regs.R30,regs.R8);
		/* 82083898h case   35:*/		return 0x8208389C;
		  /* 8208389Ch */ case   36:  		/* nor R8, R30, R30 */
		/* 8208389Ch case   36:*/		cpu::op::nor<0>(regs,&regs.R8,regs.R30,regs.R30);
		/* 8208389Ch case   36:*/		return 0x820838A0;
	}
	return 0x820838A0;
} // Block from 8208380Ch-820838A0h (37 instructions)

//////////////////////////////////////////////////////
// Block at 820838A0h
// Function '?XpsQueryPatch@D3D@@YAXPAUWorkerState@1@PAVCXpsQueryPatchListChunk@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820838A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820838A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820838A0);
		  /* 820838A0h */ case    0:  		/* add R31, R11, R31 */
		/* 820838A0h case    0:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 820838A0h case    0:*/		return 0x820838A4;
		  /* 820838A4h */ case    1:  		/* cntlzd R28, R8 */
		/* 820838A4h case    1:*/		cpu::op::cntlzd<0>(regs,&regs.R28,regs.R8);
		/* 820838A4h case    1:*/		return 0x820838A8;
		  /* 820838A8h */ case    2:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 820838A8h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 820838A8h case    2:*/		return 0x820838AC;
		  /* 820838ACh */ case    3:  		/* rlwinm R25, R28, 4, 0, 27 */
		/* 820838ACh case    3:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R25,regs.R28);
		/* 820838ACh case    3:*/		return 0x820838B0;
		  /* 820838B0h */ case    4:  		/* add R27, R10, R27 */
		/* 820838B0h case    4:*/		cpu::op::add<0>(regs,&regs.R27,regs.R10,regs.R27);
		/* 820838B0h case    4:*/		return 0x820838B4;
		  /* 820838B4h */ case    5:  		/* add R11, R25, R4 */
		/* 820838B4h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R25,regs.R4);
		/* 820838B4h case    5:*/		return 0x820838B8;
		  /* 820838B8h */ case    6:  		/* rlwinm R26, R28, 2, 0, 29 */
		/* 820838B8h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R26,regs.R28);
		/* 820838B8h case    6:*/		return 0x820838BC;
		  /* 820838BCh */ case    7:  		/* addi R11, R11, 4 */
		/* 820838BCh case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 820838BCh case    7:*/		return 0x820838C0;
		  /* 820838C0h */ case    8:  		/* cmplw CR6, R11, R9 */
		/* 820838C0h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 820838C0h case    8:*/		return 0x820838C4;
		  /* 820838C4h */ case    9:  		/* bc 12, CR6_LT, 52 */
		/* 820838C4h case    9:*/		if ( regs.CR[6].lt ) { return 0x820838F8;  }
		/* 820838C4h case    9:*/		return 0x820838C8;
		  /* 820838C8h */ case   10:  		/* li R8, 4 */
		/* 820838C8h case   10:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 820838C8h case   10:*/		return 0x820838CC;
		  /* 820838CCh */ case   11:  		/* mr R7, R26 */
		/* 820838CCh case   11:*/		regs.R7 = regs.R26;
		/* 820838CCh case   11:*/		return 0x820838D0;
		  /* 820838D0h */ case   12:  		/* mr R6, R31 */
		/* 820838D0h case   12:*/		regs.R6 = regs.R31;
		/* 820838D0h case   12:*/		return 0x820838D4;
		  /* 820838D4h */ case   13:  		/* mr R5, R27 */
		/* 820838D4h case   13:*/		regs.R5 = regs.R27;
		/* 820838D4h case   13:*/		return 0x820838D8;
		  /* 820838D8h */ case   14:  		/* mr R3, R29 */
		/* 820838D8h case   14:*/		regs.R3 = regs.R29;
		/* 820838D8h case   14:*/		return 0x820838DC;
		  /* 820838DCh */ case   15:  		/* bl -2052 */
		/* 820838DCh case   15:*/		regs.LR = 0x820838E0; return 0x820830D8;
		/* 820838DCh case   15:*/		return 0x820838E0;
		  /* 820838E0h */ case   16:  		/* rldicl R11, R28, 0, 32 */
		/* 820838E0h case   16:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R28);
		/* 820838E0h case   16:*/		return 0x820838E4;
		  /* 820838E4h */ case   17:  		/* mr R4, R3 */
		/* 820838E4h case   17:*/		regs.R4 = regs.R3;
		/* 820838E4h case   17:*/		return 0x820838E8;
		  /* 820838E8h */ case   18:  		/* add R31, R25, R31 */
		/* 820838E8h case   18:*/		cpu::op::add<0>(regs,&regs.R31,regs.R25,regs.R31);
		/* 820838E8h case   18:*/		return 0x820838EC;
		  /* 820838ECh */ case   19:  		/* add R27, R26, R27 */
		/* 820838ECh case   19:*/		cpu::op::add<0>(regs,&regs.R27,regs.R26,regs.R27);
		/* 820838ECh case   19:*/		return 0x820838F0;
		  /* 820838F0h */ case   20:  		/* sld R30, R30, R11 */
		/* 820838F0h case   20:*/		cpu::op::sld<0>(regs,&regs.R30,regs.R30,regs.R11);
		/* 820838F0h case   20:*/		return 0x820838F4;
		  /* 820838F4h */ case   21:  		/* b 76 */
		/* 820838F4h case   21:*/		return 0x82083940;
		/* 820838F4h case   21:*/		return 0x820838F8;
	}
	return 0x820838F8;
} // Block from 820838A0h-820838F8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 820838F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820838F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820838F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820838F8);
		  /* 820838F8h */ case    0:  		/* lis R10, -32768 */
		/* 820838F8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 820838F8h case    0:*/		return 0x820838FC;
		  /* 820838FCh */ case    1:  		/* rlwinm R11, R4, 0, 29, 31 */
		/* 820838FCh case    1:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R4);
		/* 820838FCh case    1:*/		return 0x82083900;
		  /* 82083900h */ case    2:  		/* addi R9, R26, -1 */
		/* 82083900h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R26,0xFFFFFFFF);
		/* 82083900h case    2:*/		return 0x82083904;
		  /* 82083904h */ case    3:  		/* stw R10, <#[R4 + 4]> */
		/* 82083904h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R4 + 0x00000004) );
		/* 82083904h case    3:*/		return 0x82083908;
		  /* 82083908h */ case    4:  		/* add R4, R11, R4 */
		/* 82083908h case    4:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R4);
		/* 82083908h case    4:*/		return 0x8208390C;
		  /* 8208390Ch */ case    5:  		/* rlwinm R11, R9, 16, 0, 15 */
		/* 8208390Ch case    5:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R11,regs.R9);
		/* 8208390Ch case    5:*/		return 0x82083910;
		  /* 82083910h */ case    6:  		/* or R11, R11, R27 */
		/* 82083910h case    6:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 82083910h case    6:*/		return 0x82083914;
		  /* 82083914h */ case    7:  		/* add R27, R26, R27 */
		/* 82083914h case    7:*/		cpu::op::add<0>(regs,&regs.R27,regs.R26,regs.R27);
		/* 82083914h case    7:*/		return 0x82083918;
		  /* 82083918h */ case    8:  		/* stwu R11, <#[R4 + 4]> */
		/* 82083918h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000004) );
		regs.R4 = (uint32)(regs.R4 + 0x00000004);
		/* 82083918h case    8:*/		return 0x8208391C;
		  /* 8208391Ch */ case    9:  		/* ld R11, <#[R31 + 4]> */
		/* 8208391Ch case    9:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8208391Ch case    9:*/		return 0x82083920;
		  /* 82083920h */ case   10:  		/* addic. R28, R28, -1 */
		/* 82083920h case   10:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 82083920h case   10:*/		return 0x82083924;
		  /* 82083924h */ case   11:  		/* ld R10, <#[R31 + 12]> */
		/* 82083924h case   11:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 82083924h case   11:*/		return 0x82083928;
		  /* 82083928h */ case   12:  		/* addi R31, R31, 16 */
		/* 82083928h case   12:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 82083928h case   12:*/		return 0x8208392C;
		  /* 8208392Ch */ case   13:  		/* rldicr R30, R30, 1, 62 */
		/* 8208392Ch case   13:*/		cpu::op::rldicr<0,1,62>(regs,&regs.R30,regs.R30);
		/* 8208392Ch case   13:*/		return 0x82083930;
		  /* 82083930h */ case   14:  		/* std R11, <#[R4 + 4]> */
		/* 82083930h case   14:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 82083930h case   14:*/		return 0x82083934;
		  /* 82083934h */ case   15:  		/* std R10, <#[R4 + 12]> */
		/* 82083934h case   15:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R4 + 0x0000000C) );
		/* 82083934h case   15:*/		return 0x82083938;
		  /* 82083938h */ case   16:  		/* addi R4, R4, 16 */
		/* 82083938h case   16:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x10);
		/* 82083938h case   16:*/		return 0x8208393C;
		  /* 8208393Ch */ case   17:  		/* bc 4, CR0_EQ, -32 */
		/* 8208393Ch case   17:*/		if ( !regs.CR[0].eq ) { return 0x8208391C;  }
		/* 8208393Ch case   17:*/		return 0x82083940;
	}
	return 0x82083940;
} // Block from 820838F8h-82083940h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82083940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083940);
		  /* 82083940h */ case    0:  		/* cmpldi CR6, R30, 0 */
		/* 82083940h case    0:*/		cpu::op::cmpldi<6>(regs,regs.R30,0x00000000);
		/* 82083940h case    0:*/		return 0x82083944;
		  /* 82083944h */ case    1:  		/* bc 4, CR6_EQ, -188 */
		/* 82083944h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82083888;  }
		/* 82083944h case    1:*/		return 0x82083948;
		  /* 82083948h */ case    2:  		/* stw R4, <#[R29 + 48]> */
		/* 82083948h case    2:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R29 + 0x00000030) );
		/* 82083948h case    2:*/		return 0x8208394C;
		  /* 8208394Ch */ case    3:  		/* addi R1, R1, 144 */
		/* 8208394Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8208394Ch case    3:*/		return 0x82083950;
		  /* 82083950h */ case    4:  		/* b 55628 */
		/* 82083950h case    4:*/		return 0x8209129C;
		/* 82083950h case    4:*/		return 0x82083954;
		  /* 82083954h */ case    5:  		/* nop */
		/* 82083954h case    5:*/		cpu::op::nop();
		/* 82083954h case    5:*/		return 0x82083958;
	}
	return 0x82083958;
} // Block from 82083940h-82083958h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82083958h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083958);
		  /* 82083958h */ case    0:  		/* mfspr R12, LR */
		/* 82083958h case    0:*/		regs.R12 = regs.LR;
		/* 82083958h case    0:*/		return 0x8208395C;
		  /* 8208395Ch */ case    1:  		/* bl 55540 */
		/* 8208395Ch case    1:*/		regs.LR = 0x82083960; return 0x82091250;
		/* 8208395Ch case    1:*/		return 0x82083960;
		  /* 82083960h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82083960h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82083960h case    2:*/		return 0x82083964;
		  /* 82083964h */ case    3:  		/* addi R10, R3, 1152 */
		/* 82083964h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0x480);
		/* 82083964h case    3:*/		return 0x82083968;
		  /* 82083968h */ case    4:  		/* mr R31, R4 */
		/* 82083968h case    4:*/		regs.R31 = regs.R4;
		/* 82083968h case    4:*/		return 0x8208396C;
		  /* 8208396Ch */ case    5:  		/* lwz R4, <#[R3 + 48]> */
		/* 8208396Ch case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000030) );
		/* 8208396Ch case    5:*/		return 0x82083970;
		  /* 82083970h */ case    6:  		/* mr R27, R3 */
		/* 82083970h case    6:*/		regs.R27 = regs.R3;
		/* 82083970h case    6:*/		return 0x82083974;
		  /* 82083974h */ case    7:  		/* li R11, 18432 */
		/* 82083974h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x4800);
		/* 82083974h case    7:*/		return 0x82083978;
		  /* 82083978h */ case    8:  		/* addi R30, R10, -4 */
		/* 82083978h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R10,0xFFFFFFFC);
		/* 82083978h case    8:*/		return 0x8208397C;
		  /* 8208397Ch */ case    9:  		/* cntlzd R10, R31 */
		/* 8208397Ch case    9:*/		cpu::op::cntlzd<0>(regs,&regs.R10,regs.R31);
		/* 8208397Ch case    9:*/		return 0x82083980;
		  /* 82083980h */ case   10:  		/* lwz R8, <#[R27 + 52]> */
		/* 82083980h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x00000034) );
		/* 82083980h case   10:*/		return 0x82083984;
		  /* 82083984h */ case   11:  		/* rldicl R7, R10, 0, 32 */
		/* 82083984h case   11:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R7,regs.R10);
		/* 82083984h case   11:*/		return 0x82083988;
		  /* 82083988h */ case   12:  		/* mulli R9, R10, 6 */
		/* 82083988h case   12:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R10,0x6);
		/* 82083988h case   12:*/		return 0x8208398C;
		  /* 8208398Ch */ case   13:  		/* sld R31, R31, R7 */
		/* 8208398Ch case   13:*/		cpu::op::sld<0>(regs,&regs.R31,regs.R31,regs.R7);
		/* 8208398Ch case   13:*/		return 0x82083990;
		  /* 82083990h */ case   14:  		/* nor R7, R31, R31 */
		/* 82083990h case   14:*/		cpu::op::nor<0>(regs,&regs.R7,regs.R31,regs.R31);
		/* 82083990h case   14:*/		return 0x82083994;
		  /* 82083994h */ case   15:  		/* add R28, R9, R11 */
		/* 82083994h case   15:*/		cpu::op::add<0>(regs,&regs.R28,regs.R9,regs.R11);
		/* 82083994h case   15:*/		return 0x82083998;
		  /* 82083998h */ case   16:  		/* cntlzd R26, R7 */
		/* 82083998h case   16:*/		cpu::op::cntlzd<0>(regs,&regs.R26,regs.R7);
		/* 82083998h case   16:*/		return 0x8208399C;
		  /* 8208399Ch */ case   17:  		/* mulli R10, R10, 24 */
		/* 8208399Ch case   17:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x18);
		/* 8208399Ch case   17:*/		return 0x820839A0;
		  /* 820839A0h */ case   18:  		/* mulli R29, R26, 6 */
		/* 820839A0h case   18:*/		cpu::op::mulli<0>(regs,&regs.R29,regs.R26,0x6);
		/* 820839A0h case   18:*/		return 0x820839A4;
		  /* 820839A4h */ case   19:  		/* addi R11, R29, 5 */
		/* 820839A4h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x5);
		/* 820839A4h case   19:*/		return 0x820839A8;
		  /* 820839A8h */ case   20:  		/* add R30, R10, R30 */
		/* 820839A8h case   20:*/		cpu::op::add<0>(regs,&regs.R30,regs.R10,regs.R30);
		/* 820839A8h case   20:*/		return 0x820839AC;
		  /* 820839ACh */ case   21:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 820839ACh case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 820839ACh case   21:*/		return 0x820839B0;
		  /* 820839B0h */ case   22:  		/* add R11, R11, R4 */
		/* 820839B0h case   22:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 820839B0h case   22:*/		return 0x820839B4;
		  /* 820839B4h */ case   23:  		/* cmplw CR6, R11, R8 */
		/* 820839B4h case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 820839B4h case   23:*/		return 0x820839B8;
		  /* 820839B8h */ case   24:  		/* bc 12, CR6_LT, 128 */
		/* 820839B8h case   24:*/		if ( regs.CR[6].lt ) { return 0x82083A38;  }
		/* 820839B8h case   24:*/		return 0x820839BC;
		  /* 820839BCh */ case   25:  		/* li R8, 6 */
		/* 820839BCh case   25:*/		cpu::op::li<0>(regs,&regs.R8,0x6);
		/* 820839BCh case   25:*/		return 0x820839C0;
		  /* 820839C0h */ case   26:  		/* mr R7, R29 */
		/* 820839C0h case   26:*/		regs.R7 = regs.R29;
		/* 820839C0h case   26:*/		return 0x820839C4;
		  /* 820839C4h */ case   27:  		/* mr R6, R30 */
		/* 820839C4h case   27:*/		regs.R6 = regs.R30;
		/* 820839C4h case   27:*/		return 0x820839C8;
		  /* 820839C8h */ case   28:  		/* mr R5, R28 */
		/* 820839C8h case   28:*/		regs.R5 = regs.R28;
		/* 820839C8h case   28:*/		return 0x820839CC;
		  /* 820839CCh */ case   29:  		/* mr R3, R27 */
		/* 820839CCh case   29:*/		regs.R3 = regs.R27;
		/* 820839CCh case   29:*/		return 0x820839D0;
		  /* 820839D0h */ case   30:  		/* bl -2296 */
		/* 820839D0h case   30:*/		regs.LR = 0x820839D4; return 0x820830D8;
		/* 820839D0h case   30:*/		return 0x820839D4;
		  /* 820839D4h */ case   31:  		/* rldicl R10, R26, 0, 32 */
		/* 820839D4h case   31:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R10,regs.R26);
		/* 820839D4h case   31:*/		return 0x820839D8;
		  /* 820839D8h */ case   32:  		/* rlwinm R11, R29, 2, 0, 29 */
		/* 820839D8h case   32:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R29);
		/* 820839D8h case   32:*/		return 0x820839DC;
		  /* 820839DCh */ case   33:  		/* sld R31, R31, R10 */
		/* 820839DCh case   33:*/		cpu::op::sld<0>(regs,&regs.R31,regs.R31,regs.R10);
		/* 820839DCh case   33:*/		return 0x820839E0;
	}
	return 0x820839E0;
} // Block from 82083958h-820839E0h (34 instructions)

//////////////////////////////////////////////////////
// Block at 820839E0h
// Function '?XpsAutoPatch@D3D@@YAXPAUWorkerState@1@PAVCXpsPatchListChunk@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820839E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820839E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820839E0);
		  /* 820839E0h */ case    0:  		/* add R30, R11, R30 */
		/* 820839E0h case    0:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 820839E0h case    0:*/		return 0x820839E4;
		  /* 820839E4h */ case    1:  		/* mr R4, R3 */
		/* 820839E4h case    1:*/		regs.R4 = regs.R3;
		/* 820839E4h case    1:*/		return 0x820839E8;
		  /* 820839E8h */ case    2:  		/* add R11, R29, R28 */
		/* 820839E8h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R29,regs.R28);
		/* 820839E8h case    2:*/		return 0x820839EC;
		  /* 820839ECh */ case    3:  		/* cmpldi CR6, R31, 0 */
		/* 820839ECh case    3:*/		cpu::op::cmpldi<6>(regs,regs.R31,0x00000000);
		/* 820839ECh case    3:*/		return 0x820839F0;
		  /* 820839F0h */ case    4:  		/* bc 4, CR6_EQ, -116 */
		/* 820839F0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8208397C;  }
		/* 820839F0h case    4:*/		return 0x820839F4;
		  /* 820839F4h */ case    5:  		/* lwz R11, <#[R27 + 56]> */
		/* 820839F4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000038) );
		/* 820839F4h case    5:*/		return 0x820839F8;
		  /* 820839F8h */ case    6:  		/* stw R3, <#[R27 + 48]> */
		/* 820839F8h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000030) );
		/* 820839F8h case    6:*/		return 0x820839FC;
		  /* 820839FCh */ case    7:  		/* cmplw CR6, R3, R11 */
		/* 820839FCh case    7:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 820839FCh case    7:*/		return 0x82083A00;
		  /* 82083A00h */ case    8:  		/* bc 4, CR6_GT, 12 */
		/* 82083A00h case    8:*/		if ( !regs.CR[6].gt ) { return 0x82083A0C;  }
		/* 82083A00h case    8:*/		return 0x82083A04;
		  /* 82083A04h */ case    9:  		/* mr R3, R27 */
		/* 82083A04h case    9:*/		regs.R3 = regs.R27;
		/* 82083A04h case    9:*/		return 0x82083A08;
		  /* 82083A08h */ case   10:  		/* bl -63744 */
		/* 82083A08h case   10:*/		regs.LR = 0x82083A0C; return 0x82074108;
		/* 82083A08h case   10:*/		return 0x82083A0C;
	}
	return 0x82083A0C;
} // Block from 820839E0h-82083A0Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82083A0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083A0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083A0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083A0C);
		  /* 82083A0Ch */ case    0:  		/* lis R11, 2 */
		/* 82083A0Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x2);
		/* 82083A0Ch case    0:*/		return 0x82083A10;
		  /* 82083A10h */ case    1:  		/* li R10, 0 */
		/* 82083A10h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82083A10h case    1:*/		return 0x82083A14;
		  /* 82083A14h */ case    2:  		/* ori R11, R11, 20480 */
		/* 82083A14h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x5000);
		/* 82083A14h case    2:*/		return 0x82083A18;
		  /* 82083A18h */ case    3:  		/* li R9, 0 */
		/* 82083A18h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82083A18h case    3:*/		return 0x82083A1C;
		  /* 82083A1Ch */ case    4:  		/* stwu R11, <#[R3 + 4]> */
		/* 82083A1Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82083A1Ch case    4:*/		return 0x82083A20;
		  /* 82083A20h */ case    5:  		/* li R11, 0 */
		/* 82083A20h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82083A20h case    5:*/		return 0x82083A24;
		  /* 82083A24h */ case    6:  		/* stwu R10, <#[R3 + 4]> */
		/* 82083A24h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82083A24h case    6:*/		return 0x82083A28;
		  /* 82083A28h */ case    7:  		/* stwu R9, <#[R3 + 4]> */
		/* 82083A28h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82083A28h case    7:*/		return 0x82083A2C;
		  /* 82083A2Ch */ case    8:  		/* stwu R11, <#[R3 + 4]> */
		/* 82083A2Ch case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82083A2Ch case    8:*/		return 0x82083A30;
		  /* 82083A30h */ case    9:  		/* stw R3, <#[R27 + 48]> */
		/* 82083A30h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000030) );
		/* 82083A30h case    9:*/		return 0x82083A34;
		  /* 82083A34h */ case   10:  		/* b 116 */
		/* 82083A34h case   10:*/		return 0x82083AA8;
		/* 82083A34h case   10:*/		return 0x82083A38;
	}
	return 0x82083A38;
} // Block from 82083A0Ch-82083A38h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82083A38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083A38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083A38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083A38);
		  /* 82083A38h */ case    0:  		/* lis R10, -32768 */
		/* 82083A38h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 82083A38h case    0:*/		return 0x82083A3C;
		  /* 82083A3Ch */ case    1:  		/* rlwinm R11, R4, 0, 29, 31 */
		/* 82083A3Ch case    1:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R4);
		/* 82083A3Ch case    1:*/		return 0x82083A40;
		  /* 82083A40h */ case    2:  		/* addi R9, R29, -1 */
		/* 82083A40h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R29,0xFFFFFFFF);
		/* 82083A40h case    2:*/		return 0x82083A44;
		  /* 82083A44h */ case    3:  		/* stw R10, <#[R4 + 4]> */
		/* 82083A44h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R4 + 0x00000004) );
		/* 82083A44h case    3:*/		return 0x82083A48;
		  /* 82083A48h */ case    4:  		/* add R4, R11, R4 */
		/* 82083A48h case    4:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R4);
		/* 82083A48h case    4:*/		return 0x82083A4C;
		  /* 82083A4Ch */ case    5:  		/* rlwinm R10, R9, 16, 0, 15 */
		/* 82083A4Ch case    5:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R10,regs.R9);
		/* 82083A4Ch case    5:*/		return 0x82083A50;
		  /* 82083A50h */ case    6:  		/* add R11, R29, R28 */
		/* 82083A50h case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R29,regs.R28);
		/* 82083A50h case    6:*/		return 0x82083A54;
		  /* 82083A54h */ case    7:  		/* or R10, R10, R28 */
		/* 82083A54h case    7:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R28);
		/* 82083A54h case    7:*/		return 0x82083A58;
		  /* 82083A58h */ case    8:  		/* stwu R10, <#[R4 + 4]> */
		/* 82083A58h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R4 + 0x00000004) );
		regs.R4 = (uint32)(regs.R4 + 0x00000004);
		/* 82083A58h case    8:*/		return 0x82083A5C;
		  /* 82083A5Ch */ case    9:  		/* ld R10, <#[R30 + 4]> */
		/* 82083A5Ch case    9:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82083A5Ch case    9:*/		return 0x82083A60;
		  /* 82083A60h */ case   10:  		/* addic. R26, R26, -1 */
		/* 82083A60h case   10:*/		cpu::op::addic<1>(regs,&regs.R26,regs.R26,0xFFFFFFFF);
		/* 82083A60h case   10:*/		return 0x82083A64;
		  /* 82083A64h */ case   11:  		/* ld R9, <#[R30 + 12]> */
		/* 82083A64h case   11:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R30 + 0x0000000C) );
		/* 82083A64h case   11:*/		return 0x82083A68;
		  /* 82083A68h */ case   12:  		/* rldicr R31, R31, 1, 62 */
		/* 82083A68h case   12:*/		cpu::op::rldicr<0,1,62>(regs,&regs.R31,regs.R31);
		/* 82083A68h case   12:*/		return 0x82083A6C;
		  /* 82083A6Ch */ case   13:  		/* ld R8, <#[R30 + 20]> */
		/* 82083A6Ch case   13:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R30 + 0x00000014) );
		/* 82083A6Ch case   13:*/		return 0x82083A70;
		  /* 82083A70h */ case   14:  		/* addi R30, R30, 24 */
		/* 82083A70h case   14:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x18);
		/* 82083A70h case   14:*/		return 0x82083A74;
		  /* 82083A74h */ case   15:  		/* std R10, <#[R4 + 4]> */
		/* 82083A74h case   15:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R4 + 0x00000004) );
		/* 82083A74h case   15:*/		return 0x82083A78;
		  /* 82083A78h */ case   16:  		/* std R9, <#[R4 + 12]> */
		/* 82083A78h case   16:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R4 + 0x0000000C) );
		/* 82083A78h case   16:*/		return 0x82083A7C;
		  /* 82083A7Ch */ case   17:  		/* std R8, <#[R4 + 20]> */
		/* 82083A7Ch case   17:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R4 + 0x00000014) );
		/* 82083A7Ch case   17:*/		return 0x82083A80;
		  /* 82083A80h */ case   18:  		/* addi R4, R4, 24 */
		/* 82083A80h case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x18);
		/* 82083A80h case   18:*/		return 0x82083A84;
		  /* 82083A84h */ case   19:  		/* bc 4, CR0_EQ, -40 */
		/* 82083A84h case   19:*/		if ( !regs.CR[0].eq ) { return 0x82083A5C;  }
		/* 82083A84h case   19:*/		return 0x82083A88;
		  /* 82083A88h */ case   20:  		/* cmpldi CR6, R31, 0 */
		/* 82083A88h case   20:*/		cpu::op::cmpldi<6>(regs,regs.R31,0x00000000);
		/* 82083A88h case   20:*/		return 0x82083A8C;
		  /* 82083A8Ch */ case   21:  		/* bc 4, CR6_EQ, -272 */
		/* 82083A8Ch case   21:*/		if ( !regs.CR[6].eq ) { return 0x8208397C;  }
		/* 82083A8Ch case   21:*/		return 0x82083A90;
		  /* 82083A90h */ case   22:  		/* li R11, 37 */
		/* 82083A90h case   22:*/		cpu::op::li<0>(regs,&regs.R11,0x25);
		/* 82083A90h case   22:*/		return 0x82083A94;
		  /* 82083A94h */ case   23:  		/* addi R10, R4, 16 */
		/* 82083A94h case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R4,0x10);
		/* 82083A94h case   23:*/		return 0x82083A98;
		  /* 82083A98h */ case   24:  		/* rldicr R11, R11, 44, 19 */
		/* 82083A98h case   24:*/		cpu::op::rldicr<0,44,19>(regs,&regs.R11,regs.R11);
		/* 82083A98h case   24:*/		return 0x82083A9C;
		  /* 82083A9Ch */ case   25:  		/* stw R10, <#[R27 + 48]> */
		/* 82083A9Ch case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000030) );
		/* 82083A9Ch case   25:*/		return 0x82083AA0;
		  /* 82083AA0h */ case   26:  		/* std R11, <#[R4 + 4]> */
		/* 82083AA0h case   26:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 82083AA0h case   26:*/		return 0x82083AA4;
		  /* 82083AA4h */ case   27:  		/* std R11, <#[R4 + 12]> */
		/* 82083AA4h case   27:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 82083AA4h case   27:*/		return 0x82083AA8;
	}
	return 0x82083AA8;
} // Block from 82083A38h-82083AA8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82083AA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083AA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083AA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083AA8);
		  /* 82083AA8h */ case    0:  		/* addi R1, R1, 144 */
		/* 82083AA8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82083AA8h case    0:*/		return 0x82083AAC;
		  /* 82083AACh */ case    1:  		/* b 55284 */
		/* 82083AACh case    1:*/		return 0x820912A0;
		/* 82083AACh case    1:*/		return 0x82083AB0;
	}
	return 0x82083AB0;
} // Block from 82083AA8h-82083AB0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82083AB0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083AB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083AB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083AB0);
		  /* 82083AB0h */ case    0:  		/* mfspr R12, LR */
		/* 82083AB0h case    0:*/		regs.R12 = regs.LR;
		/* 82083AB0h case    0:*/		return 0x82083AB4;
		  /* 82083AB4h */ case    1:  		/* bl 55180 */
		/* 82083AB4h case    1:*/		regs.LR = 0x82083AB8; return 0x82091240;
		/* 82083AB4h case    1:*/		return 0x82083AB8;
		  /* 82083AB8h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82083AB8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82083AB8h case    2:*/		return 0x82083ABC;
		  /* 82083ABCh */ case    3:  		/* mr R30, R4 */
		/* 82083ABCh case    3:*/		regs.R30 = regs.R4;
		/* 82083ABCh case    3:*/		return 0x82083AC0;
		  /* 82083AC0h */ case    4:  		/* lwz R4, <#[R3 + 48]> */
		/* 82083AC0h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000030) );
		/* 82083AC0h case    4:*/		return 0x82083AC4;
		  /* 82083AC4h */ case    5:  		/* mr R26, R3 */
		/* 82083AC4h case    5:*/		regs.R26 = regs.R3;
		/* 82083AC4h case    5:*/		return 0x82083AC8;
		  /* 82083AC8h */ case    6:  		/* addi R31, R6, -4 */
		/* 82083AC8h case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R6,0xFFFFFFFC);
		/* 82083AC8h case    6:*/		return 0x82083ACC;
		  /* 82083ACCh */ case    7:  		/* li R22, 4 */
		/* 82083ACCh case    7:*/		cpu::op::li<0>(regs,&regs.R22,0x4);
		/* 82083ACCh case    7:*/		return 0x82083AD0;
		  /* 82083AD0h */ case    8:  		/* li R23, 20 */
		/* 82083AD0h case    8:*/		cpu::op::li<0>(regs,&regs.R23,0x14);
		/* 82083AD0h case    8:*/		return 0x82083AD4;
		  /* 82083AD4h */ case    9:  		/* li R24, 36 */
		/* 82083AD4h case    9:*/		cpu::op::li<0>(regs,&regs.R24,0x24);
		/* 82083AD4h case    9:*/		return 0x82083AD8;
	}
	return 0x82083AD8;
} // Block from 82083AB0h-82083AD8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82083AD8h
// Function '?AutoPatch@D3D@@YAXPAUWorkerState@1@PAVCPatchListChunk@1@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083AD8);
		  /* 82083AD8h */ case    0:  		/* li R25, 52 */
		/* 82083AD8h case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x34);
		/* 82083AD8h case    0:*/		return 0x82083ADC;
		  /* 82083ADCh */ case    1:  		/* cntlzd R10, R30 */
		/* 82083ADCh case    1:*/		cpu::op::cntlzd<0>(regs,&regs.R10,regs.R30);
		/* 82083ADCh case    1:*/		return 0x82083AE0;
		  /* 82083AE0h */ case    2:  		/* lwz R9, <#[R26 + 52]> */
		/* 82083AE0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000034) );
		/* 82083AE0h case    2:*/		return 0x82083AE4;
		  /* 82083AE4h */ case    3:  		/* rldicl R8, R10, 0, 32 */
		/* 82083AE4h case    3:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R8,regs.R10);
		/* 82083AE4h case    3:*/		return 0x82083AE8;
		  /* 82083AE8h */ case    4:  		/* rlwinm R11, R10, 6, 0, 25 */
		/* 82083AE8h case    4:*/		cpu::op::rlwinm<0,6,0,25>(regs,&regs.R11,regs.R10);
		/* 82083AE8h case    4:*/		return 0x82083AEC;
		  /* 82083AECh */ case    5:  		/* sld R30, R30, R8 */
		/* 82083AECh case    5:*/		cpu::op::sld<0>(regs,&regs.R30,regs.R30,regs.R8);
		/* 82083AECh case    5:*/		return 0x82083AF0;
		  /* 82083AF0h */ case    6:  		/* nor R8, R30, R30 */
		/* 82083AF0h case    6:*/		cpu::op::nor<0>(regs,&regs.R8,regs.R30,regs.R30);
		/* 82083AF0h case    6:*/		return 0x82083AF4;
		  /* 82083AF4h */ case    7:  		/* add R31, R11, R31 */
		/* 82083AF4h case    7:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 82083AF4h case    7:*/		return 0x82083AF8;
		  /* 82083AF8h */ case    8:  		/* cntlzd R28, R8 */
		/* 82083AF8h case    8:*/		cpu::op::cntlzd<0>(regs,&regs.R28,regs.R8);
		/* 82083AF8h case    8:*/		return 0x82083AFC;
		  /* 82083AFCh */ case    9:  		/* rlwinm R10, R10, 4, 0, 27 */
		/* 82083AFCh case    9:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R10,regs.R10);
		/* 82083AFCh case    9:*/		return 0x82083B00;
		  /* 82083B00h */ case   10:  		/* rlwinm R29, R28, 4, 0, 27 */
		/* 82083B00h case   10:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R29,regs.R28);
		/* 82083B00h case   10:*/		return 0x82083B04;
		  /* 82083B04h */ case   11:  		/* add R27, R10, R5 */
		/* 82083B04h case   11:*/		cpu::op::add<0>(regs,&regs.R27,regs.R10,regs.R5);
		/* 82083B04h case   11:*/		return 0x82083B08;
		  /* 82083B08h */ case   12:  		/* addi R11, R29, 3 */
		/* 82083B08h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x3);
		/* 82083B08h case   12:*/		return 0x82083B0C;
		  /* 82083B0Ch */ case   13:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82083B0Ch case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82083B0Ch case   13:*/		return 0x82083B10;
		  /* 82083B10h */ case   14:  		/* add R11, R11, R4 */
		/* 82083B10h case   14:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 82083B10h case   14:*/		return 0x82083B14;
		  /* 82083B14h */ case   15:  		/* cmplw CR6, R11, R9 */
		/* 82083B14h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82083B14h case   15:*/		return 0x82083B18;
		  /* 82083B18h */ case   16:  		/* bc 12, CR6_LT, 56 */
		/* 82083B18h case   16:*/		if ( regs.CR[6].lt ) { return 0x82083B50;  }
		/* 82083B18h case   16:*/		return 0x82083B1C;
		  /* 82083B1Ch */ case   17:  		/* li R8, 16 */
		/* 82083B1Ch case   17:*/		cpu::op::li<0>(regs,&regs.R8,0x10);
		/* 82083B1Ch case   17:*/		return 0x82083B20;
		  /* 82083B20h */ case   18:  		/* mr R7, R29 */
		/* 82083B20h case   18:*/		regs.R7 = regs.R29;
		/* 82083B20h case   18:*/		return 0x82083B24;
		  /* 82083B24h */ case   19:  		/* mr R6, R31 */
		/* 82083B24h case   19:*/		regs.R6 = regs.R31;
		/* 82083B24h case   19:*/		return 0x82083B28;
		  /* 82083B28h */ case   20:  		/* mr R5, R27 */
		/* 82083B28h case   20:*/		regs.R5 = regs.R27;
		/* 82083B28h case   20:*/		return 0x82083B2C;
		  /* 82083B2Ch */ case   21:  		/* mr R3, R26 */
		/* 82083B2Ch case   21:*/		regs.R3 = regs.R26;
		/* 82083B2Ch case   21:*/		return 0x82083B30;
		  /* 82083B30h */ case   22:  		/* bl -2648 */
		/* 82083B30h case   22:*/		regs.LR = 0x82083B34; return 0x820830D8;
		/* 82083B30h case   22:*/		return 0x82083B34;
		  /* 82083B34h */ case   23:  		/* rlwinm R11, R29, 2, 0, 29 */
		/* 82083B34h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R29);
		/* 82083B34h case   23:*/		return 0x82083B38;
		  /* 82083B38h */ case   24:  		/* rldicl R10, R28, 0, 32 */
		/* 82083B38h case   24:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R10,regs.R28);
		/* 82083B38h case   24:*/		return 0x82083B3C;
		  /* 82083B3Ch */ case   25:  		/* mr R4, R3 */
		/* 82083B3Ch case   25:*/		regs.R4 = regs.R3;
		/* 82083B3Ch case   25:*/		return 0x82083B40;
		  /* 82083B40h */ case   26:  		/* add R31, R11, R31 */
		/* 82083B40h case   26:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 82083B40h case   26:*/		return 0x82083B44;
		  /* 82083B44h */ case   27:  		/* add R5, R29, R27 */
		/* 82083B44h case   27:*/		cpu::op::add<0>(regs,&regs.R5,regs.R29,regs.R27);
		/* 82083B44h case   27:*/		return 0x82083B48;
		  /* 82083B48h */ case   28:  		/* sld R30, R30, R10 */
		/* 82083B48h case   28:*/		cpu::op::sld<0>(regs,&regs.R30,regs.R30,regs.R10);
		/* 82083B48h case   28:*/		return 0x82083B4C;
		  /* 82083B4Ch */ case   29:  		/* b 160 */
		/* 82083B4Ch case   29:*/		return 0x82083BEC;
		/* 82083B4Ch case   29:*/		return 0x82083B50;
	}
	return 0x82083B50;
} // Block from 82083AD8h-82083B50h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82083B50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083B50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083B50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083B50);
		  /* 82083B50h */ case    0:  		/* rlwinm R11, R4, 0, 28, 31 */
		/* 82083B50h case    0:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R11,regs.R4);
		/* 82083B50h case    0:*/		return 0x82083B54;
		  /* 82083B54h */ case    1:  		/* cmplwi CR6, R11, 4 */
		/* 82083B54h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 82083B54h case    1:*/		return 0x82083B58;
		  /* 82083B58h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 82083B58h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82083B68;  }
		/* 82083B58h case    2:*/		return 0x82083B5C;
		  /* 82083B5Ch */ case    3:  		/* lis R11, -32768 */
		/* 82083B5Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 82083B5Ch case    3:*/		return 0x82083B60;
		  /* 82083B60h */ case    4:  		/* stwu R11, <#[R4 + 4]> */
		/* 82083B60h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000004) );
		regs.R4 = (uint32)(regs.R4 + 0x00000004);
		/* 82083B60h case    4:*/		return 0x82083B64;
		  /* 82083B64h */ case    5:  		/* b 64 */
		/* 82083B64h case    5:*/		return 0x82083BA4;
		/* 82083B64h case    5:*/		return 0x82083B68;
	}
	return 0x82083B68;
} // Block from 82083B50h-82083B68h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82083B68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083B68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083B68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083B68);
		  /* 82083B68h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 82083B68h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82083B68h case    0:*/		return 0x82083B6C;
		  /* 82083B6Ch */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 82083B6Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82083B84;  }
		/* 82083B6Ch case    1:*/		return 0x82083B70;
		  /* 82083B70h */ case    2:  		/* lis R11, -32768 */
		/* 82083B70h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 82083B70h case    2:*/		return 0x82083B74;
		  /* 82083B74h */ case    3:  		/* lis R10, -32768 */
		/* 82083B74h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 82083B74h case    3:*/		return 0x82083B78;
		  /* 82083B78h */ case    4:  		/* stwu R11, <#[R4 + 4]> */
		/* 82083B78h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000004) );
		regs.R4 = (uint32)(regs.R4 + 0x00000004);
		/* 82083B78h case    4:*/		return 0x82083B7C;
		  /* 82083B7Ch */ case    5:  		/* stwu R10, <#[R4 + 4]> */
		/* 82083B7Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R4 + 0x00000004) );
		regs.R4 = (uint32)(regs.R4 + 0x00000004);
		/* 82083B7Ch case    5:*/		return 0x82083B80;
		  /* 82083B80h */ case    6:  		/* b 36 */
		/* 82083B80h case    6:*/		return 0x82083BA4;
		/* 82083B80h case    6:*/		return 0x82083B84;
	}
	return 0x82083B84;
} // Block from 82083B68h-82083B84h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82083B84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083B84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083B84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083B84);
		  /* 82083B84h */ case    0:  		/* cmplwi CR6, R11, 12 */
		/* 82083B84h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000C);
		/* 82083B84h case    0:*/		return 0x82083B88;
		  /* 82083B88h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 82083B88h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82083BA4;  }
		/* 82083B88h case    1:*/		return 0x82083B8C;
		  /* 82083B8Ch */ case    2:  		/* lis R11, -32768 */
		/* 82083B8Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 82083B8Ch case    2:*/		return 0x82083B90;
		  /* 82083B90h */ case    3:  		/* lis R10, -32768 */
		/* 82083B90h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 82083B90h case    3:*/		return 0x82083B94;
		  /* 82083B94h */ case    4:  		/* stwu R11, <#[R4 + 4]> */
		/* 82083B94h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000004) );
		regs.R4 = (uint32)(regs.R4 + 0x00000004);
		/* 82083B94h case    4:*/		return 0x82083B98;
		  /* 82083B98h */ case    5:  		/* lis R9, -32768 */
		/* 82083B98h case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8000);
		/* 82083B98h case    5:*/		return 0x82083B9C;
		  /* 82083B9Ch */ case    6:  		/* stwu R10, <#[R4 + 4]> */
		/* 82083B9Ch case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R4 + 0x00000004) );
		regs.R4 = (uint32)(regs.R4 + 0x00000004);
		/* 82083B9Ch case    6:*/		return 0x82083BA0;
		  /* 82083BA0h */ case    7:  		/* stwu R9, <#[R4 + 4]> */
		/* 82083BA0h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R4 + 0x00000004) );
		regs.R4 = (uint32)(regs.R4 + 0x00000004);
		/* 82083BA0h case    7:*/		return 0x82083BA4;
	}
	return 0x82083BA4;
} // Block from 82083B84h-82083BA4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82083BA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083BA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083BA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083BA4);
		  /* 82083BA4h */ case    0:  		/* addi R11, R29, -1 */
		/* 82083BA4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0xFFFFFFFF);
		/* 82083BA4h case    0:*/		return 0x82083BA8;
		  /* 82083BA8h */ case    1:  		/* add R5, R29, R27 */
		/* 82083BA8h case    1:*/		cpu::op::add<0>(regs,&regs.R5,regs.R29,regs.R27);
		/* 82083BA8h case    1:*/		return 0x82083BAC;
		  /* 82083BACh */ case    2:  		/* rlwinm R11, R11, 16, 0, 15 */
		/* 82083BACh case    2:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R11,regs.R11);
		/* 82083BACh case    2:*/		return 0x82083BB0;
		  /* 82083BB0h */ case    3:  		/* or R11, R11, R27 */
		/* 82083BB0h case    3:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 82083BB0h case    3:*/		return 0x82083BB4;
		  /* 82083BB4h */ case    4:  		/* stwu R11, <#[R4 + 4]> */
		/* 82083BB4h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000004) );
		regs.R4 = (uint32)(regs.R4 + 0x00000004);
		/* 82083BB4h case    4:*/		return 0x82083BB8;
		  /* 82083BB8h */ case    5:  		/* lvx VR63, <#[R31 + R22]> */
		/* 82083BB8h case    5:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R31 + regs.R22 + 0x00000000) );
		/* 82083BB8h case    5:*/		return 0x82083BBC;
		  /* 82083BBCh */ case    6:  		/* addic. R28, R28, -1 */
		/* 82083BBCh case    6:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 82083BBCh case    6:*/		return 0x82083BC0;
		  /* 82083BC0h */ case    7:  		/* lvx VR62, <#[R31 + R23]> */
		/* 82083BC0h case    7:*/		cpu::mem::lvx( regs, &regs.VR62, (uint32)(regs.R31 + regs.R23 + 0x00000000) );
		/* 82083BC0h case    7:*/		return 0x82083BC4;
		  /* 82083BC4h */ case    8:  		/* rldicr R30, R30, 1, 62 */
		/* 82083BC4h case    8:*/		cpu::op::rldicr<0,1,62>(regs,&regs.R30,regs.R30);
		/* 82083BC4h case    8:*/		return 0x82083BC8;
		  /* 82083BC8h */ case    9:  		/* lvx VR61, <#[R31 + R24]> */
		/* 82083BC8h case    9:*/		cpu::mem::lvx( regs, &regs.VR61, (uint32)(regs.R31 + regs.R24 + 0x00000000) );
		/* 82083BC8h case    9:*/		return 0x82083BCC;
		  /* 82083BCCh */ case   10:  		/* lvx VR60, <#[R31 + R25]> */
		/* 82083BCCh case   10:*/		cpu::mem::lvx( regs, &regs.VR60, (uint32)(regs.R31 + regs.R25 + 0x00000000) );
		/* 82083BCCh case   10:*/		return 0x82083BD0;
		  /* 82083BD0h */ case   11:  		/* addi R31, R31, 64 */
		/* 82083BD0h case   11:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x40);
		/* 82083BD0h case   11:*/		return 0x82083BD4;
		  /* 82083BD4h */ case   12:  		/* stvx VR63, <#[R4 + R22]> */
		/* 82083BD4h case   12:*/		cpu::mem::stvx( regs, regs.VR63, (uint32)(regs.R4 + regs.R22 + 0x00000000) );
		/* 82083BD4h case   12:*/		return 0x82083BD8;
	}
	return 0x82083BD8;
} // Block from 82083BA4h-82083BD8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82083BD8h
// Function '?TilingPatch@D3D@@YAXPAUWorkerState@1@PAVCPatchListChunk@1@PAVCCommandBufferCallListChunk@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083BD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083BD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083BD8);
		  /* 82083BD8h */ case    0:  		/* stvx VR62, <#[R4 + R23]> */
		/* 82083BD8h case    0:*/		cpu::mem::stvx( regs, regs.VR62, (uint32)(regs.R4 + regs.R23 + 0x00000000) );
		/* 82083BD8h case    0:*/		return 0x82083BDC;
		  /* 82083BDCh */ case    1:  		/* stvx VR61, <#[R4 + R24]> */
		/* 82083BDCh case    1:*/		cpu::mem::stvx( regs, regs.VR61, (uint32)(regs.R4 + regs.R24 + 0x00000000) );
		/* 82083BDCh case    1:*/		return 0x82083BE0;
		  /* 82083BE0h */ case    2:  		/* stvx VR60, <#[R4 + R25]> */
		/* 82083BE0h case    2:*/		cpu::mem::stvx( regs, regs.VR60, (uint32)(regs.R4 + regs.R25 + 0x00000000) );
		/* 82083BE0h case    2:*/		return 0x82083BE4;
		  /* 82083BE4h */ case    3:  		/* addi R4, R4, 64 */
		/* 82083BE4h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x40);
		/* 82083BE4h case    3:*/		return 0x82083BE8;
		  /* 82083BE8h */ case    4:  		/* bc 4, CR0_EQ, -48 */
		/* 82083BE8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82083BB8;  }
		/* 82083BE8h case    4:*/		return 0x82083BEC;
	}
	return 0x82083BEC;
} // Block from 82083BD8h-82083BECh (5 instructions)

//////////////////////////////////////////////////////
// Block at 82083BECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083BEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083BEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083BEC);
		  /* 82083BECh */ case    0:  		/* cmpldi CR6, R30, 0 */
		/* 82083BECh case    0:*/		cpu::op::cmpldi<6>(regs,regs.R30,0x00000000);
		/* 82083BECh case    0:*/		return 0x82083BF0;
		  /* 82083BF0h */ case    1:  		/* bc 4, CR6_EQ, -276 */
		/* 82083BF0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82083ADC;  }
		/* 82083BF0h case    1:*/		return 0x82083BF4;
		  /* 82083BF4h */ case    2:  		/* stw R4, <#[R26 + 48]> */
		/* 82083BF4h case    2:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R26 + 0x00000030) );
		/* 82083BF4h case    2:*/		return 0x82083BF8;
		  /* 82083BF8h */ case    3:  		/* addi R1, R1, 176 */
		/* 82083BF8h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82083BF8h case    3:*/		return 0x82083BFC;
		  /* 82083BFCh */ case    4:  		/* b 54932 */
		/* 82083BFCh case    4:*/		return 0x82091290;
		/* 82083BFCh case    4:*/		return 0x82083C00;
	}
	return 0x82083C00;
} // Block from 82083BECh-82083C00h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82083C00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083C00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083C00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083C00);
		  /* 82083C00h */ case    0:  		/* mfspr R12, LR */
		/* 82083C00h case    0:*/		regs.R12 = regs.LR;
		/* 82083C00h case    0:*/		return 0x82083C04;
		  /* 82083C04h */ case    1:  		/* bl 54836 */
		/* 82083C04h case    1:*/		regs.LR = 0x82083C08; return 0x82091238;
		/* 82083C04h case    1:*/		return 0x82083C08;
		  /* 82083C08h */ case    2:  		/* stwu R1, <#[R1 - 592]> */
		/* 82083C08h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFDB0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFDB0);
		/* 82083C08h case    2:*/		return 0x82083C0C;
		  /* 82083C0Ch */ case    3:  		/* addi R11, R7, 112 */
		/* 82083C0Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R7,0x70);
		/* 82083C0Ch case    3:*/		return 0x82083C10;
		  /* 82083C10h */ case    4:  		/* mr R23, R4 */
		/* 82083C10h case    4:*/		regs.R23 = regs.R4;
		/* 82083C10h case    4:*/		return 0x82083C14;
		  /* 82083C14h */ case    5:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 82083C14h case    5:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 82083C14h case    5:*/		return 0x82083C18;
		  /* 82083C18h */ case    6:  		/* lwzx R11, <#[R11 + R3]> */
		/* 82083C18h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82083C18h case    6:*/		return 0x82083C1C;
		  /* 82083C1Ch */ case    7:  		/* add R11, R11, R3 */
		/* 82083C1Ch case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 82083C1Ch case    7:*/		return 0x82083C20;
		  /* 82083C20h */ case    8:  		/* addi R11, R11, 872 */
		/* 82083C20h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x368);
		/* 82083C20h case    8:*/		return 0x82083C24;
		  /* 82083C24h */ case    9:  		/* lwz R28, <#[R11 + 28]> */
		/* 82083C24h case    9:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x0000001C) );
		/* 82083C24h case    9:*/		return 0x82083C28;
		  /* 82083C28h */ case   10:  		/* cmplwi CR6, R28, 0 */
		/* 82083C28h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82083C28h case   10:*/		return 0x82083C2C;
		  /* 82083C2Ch */ case   11:  		/* bc 12, CR6_EQ, 1520 */
		/* 82083C2Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x8208421C;  }
		/* 82083C2Ch case   11:*/		return 0x82083C30;
		  /* 82083C30h */ case   12:  		/* lwz R10, <#[R11 + 24]> */
		/* 82083C30h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 82083C30h case   12:*/		return 0x82083C34;
		  /* 82083C34h */ case   13:  		/* mulli R9, R7, 416 */
		/* 82083C34h case   13:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R7,0x1A0);
		/* 82083C34h case   13:*/		return 0x82083C38;
		  /* 82083C38h */ case   14:  		/* lwz R25, <#[R5 + 24]> */
		/* 82083C38h case   14:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R5 + 0x00000018) );
		/* 82083C38h case   14:*/		return 0x82083C3C;
		  /* 82083C3Ch */ case   15:  		/* addi R8, R10, 9 */
		/* 82083C3Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x9);
		/* 82083C3Ch case   15:*/		return 0x82083C40;
		  /* 82083C40h */ case   16:  		/* add R10, R9, R3 */
		/* 82083C40h case   16:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R3);
		/* 82083C40h case   16:*/		return 0x82083C44;
		  /* 82083C44h */ case   17:  		/* rlwinm R9, R8, 2, 0, 29 */
		/* 82083C44h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R8);
		/* 82083C44h case   17:*/		return 0x82083C48;
		  /* 82083C48h */ case   18:  		/* addi R10, R10, 68 */
		/* 82083C48h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x44);
		/* 82083C48h case   18:*/		return 0x82083C4C;
		  /* 82083C4Ch */ case   19:  		/* add R30, R9, R11 */
		/* 82083C4Ch case   19:*/		cpu::op::add<0>(regs,&regs.R30,regs.R9,regs.R11);
		/* 82083C4Ch case   19:*/		return 0x82083C50;
		  /* 82083C50h */ case   20:  		/* cmplwi CR6, R28, 0 */
		/* 82083C50h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82083C50h case   20:*/		return 0x82083C54;
		  /* 82083C54h */ case   21:  		/* mr R27, R30 */
		/* 82083C54h case   21:*/		regs.R27 = regs.R30;
		/* 82083C54h case   21:*/		return 0x82083C58;
		  /* 82083C58h */ case   22:  		/* bc 12, CR6_EQ, 740 */
		/* 82083C58h case   22:*/		if ( regs.CR[6].eq ) { return 0x82083F3C;  }
		/* 82083C58h case   22:*/		return 0x82083C5C;
		  /* 82083C5Ch */ case   23:  		/* addi R11, R1, 96 */
		/* 82083C5Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 82083C5Ch case   23:*/		return 0x82083C60;
		  /* 82083C60h */ case   24:  		/* addi R24, R5, 52 */
		/* 82083C60h case   24:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R5,0x34);
		/* 82083C60h case   24:*/		return 0x82083C64;
		  /* 82083C64h */ case   25:  		/* subf R26, R11, R10 */
		/* 82083C64h case   25:*/		cpu::op::subf<0>(regs,&regs.R26,regs.R11,regs.R10);
		/* 82083C64h case   25:*/		return 0x82083C68;
		  /* 82083C68h */ case   26:  		/* lhz R10, <#[R1 + 80]> */
		/* 82083C68h case   26:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82083C68h case   26:*/		return 0x82083C6C;
		  /* 82083C6Ch */ case   27:  		/* lis R11, -32256 */
		/* 82083C6Ch case   27:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82083C6Ch case   27:*/		return 0x82083C70;
		  /* 82083C70h */ case   28:  		/* addi R7, R1, 96 */
		/* 82083C70h case   28:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 82083C70h case   28:*/		return 0x82083C74;
		  /* 82083C74h */ case   29:  		/* mr R29, R28 */
		/* 82083C74h case   29:*/		regs.R29 = regs.R28;
		/* 82083C74h case   29:*/		return 0x82083C78;
		  /* 82083C78h */ case   30:  		/* addi R31, R11, 17104 */
		/* 82083C78h case   30:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x42D0);
		/* 82083C78h case   30:*/		return 0x82083C7C;
		  /* 82083C7Ch */ case   31:  		/* add R5, R26, R7 */
		/* 82083C7Ch case   31:*/		cpu::op::add<0>(regs,&regs.R5,regs.R26,regs.R7);
		/* 82083C7Ch case   31:*/		return 0x82083C80;
		  /* 82083C80h */ case   32:  		/* lwzx R11, <#[R26 + R7]> */
		/* 82083C80h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + regs.R7 + 0x00000000) );
		/* 82083C80h case   32:*/		return 0x82083C84;
		  /* 82083C84h */ case   33:  		/* mr R8, R24 */
		/* 82083C84h case   33:*/		regs.R8 = regs.R24;
		/* 82083C84h case   33:*/		return 0x82083C88;
		  /* 82083C88h */ case   34:  		/* li R9, 0 */
		/* 82083C88h case   34:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82083C88h case   34:*/		return 0x82083C8C;
		  /* 82083C8Ch */ case   35:  		/* cmplwi CR6, R25, 0 */
		/* 82083C8Ch case   35:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82083C8Ch case   35:*/		return 0x82083C90;
	}
	return 0x82083C90;
} // Block from 82083C00h-82083C90h (36 instructions)

//////////////////////////////////////////////////////
// Block at 82083C90h
// Function '?DispatchCommands@D3D@@YAPAKPAKPAVCXpsGlobal@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083C90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083C90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083C90);
		  /* 82083C90h */ case    0:  		/* lwz R4, <#[R5 + 4]> */
		/* 82083C90h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x00000004) );
		/* 82083C90h case    0:*/		return 0x82083C94;
		  /* 82083C94h */ case    1:  		/* lwz R3, <#[R5 + 8]> */
		/* 82083C94h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R5 + 0x00000008) );
		/* 82083C94h case    1:*/		return 0x82083C98;
		  /* 82083C98h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 82083C98h case    2:*/		if ( regs.CR[6].eq ) { return 0x82083CD8;  }
		/* 82083C98h case    2:*/		return 0x82083C9C;
		  /* 82083C9Ch */ case    3:  		/* lwz R5, <#[R27]> */
		/* 82083C9Ch case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x00000000) );
		/* 82083C9Ch case    3:*/		return 0x82083CA0;
		  /* 82083CA0h */ case    4:  		/* lbz R22, <#[R8 + 9]> */
		/* 82083CA0h case    4:*/		cpu::mem::load8z( regs, &regs.R22, (uint32)(regs.R8 + 0x00000009) );
		/* 82083CA0h case    4:*/		return 0x82083CA4;
		  /* 82083CA4h */ case    5:  		/* rlwinm R21, R5, 20, 28, 31 */
		/* 82083CA4h case    5:*/		cpu::op::rlwinm<0,20,28,31>(regs,&regs.R21,regs.R5);
		/* 82083CA4h case    5:*/		return 0x82083CA8;
		  /* 82083CA8h */ case    6:  		/* cmplw CR6, R22, R21 */
		/* 82083CA8h case    6:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R21);
		/* 82083CA8h case    6:*/		return 0x82083CAC;
		  /* 82083CACh */ case    7:  		/* bc 4, CR6_EQ, 20 */
		/* 82083CACh case    7:*/		if ( !regs.CR[6].eq ) { return 0x82083CC0;  }
		/* 82083CACh case    7:*/		return 0x82083CB0;
		  /* 82083CB0h */ case    8:  		/* lbz R22, <#[R8 + 10]> */
		/* 82083CB0h case    8:*/		cpu::mem::load8z( regs, &regs.R22, (uint32)(regs.R8 + 0x0000000A) );
		/* 82083CB0h case    8:*/		return 0x82083CB4;
		  /* 82083CB4h */ case    9:  		/* rlwinm R21, R5, 16, 28, 31 */
		/* 82083CB4h case    9:*/		cpu::op::rlwinm<0,16,28,31>(regs,&regs.R21,regs.R5);
		/* 82083CB4h case    9:*/		return 0x82083CB8;
		  /* 82083CB8h */ case   10:  		/* cmplw CR6, R22, R21 */
		/* 82083CB8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R21);
		/* 82083CB8h case   10:*/		return 0x82083CBC;
		  /* 82083CBCh */ case   11:  		/* bc 12, CR6_EQ, 20 */
		/* 82083CBCh case   11:*/		if ( regs.CR[6].eq ) { return 0x82083CD0;  }
		/* 82083CBCh case   11:*/		return 0x82083CC0;
	}
	return 0x82083CC0;
} // Block from 82083C90h-82083CC0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82083CC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083CC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083CC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083CC0);
		  /* 82083CC0h */ case    0:  		/* addi R9, R9, 1 */
		/* 82083CC0h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82083CC0h case    0:*/		return 0x82083CC4;
		  /* 82083CC4h */ case    1:  		/* addi R8, R8, 12 */
		/* 82083CC4h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xC);
		/* 82083CC4h case    1:*/		return 0x82083CC8;
		  /* 82083CC8h */ case    2:  		/* cmplw CR6, R9, R25 */
		/* 82083CC8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R25);
		/* 82083CC8h case    2:*/		return 0x82083CCC;
		  /* 82083CCCh */ case    3:  		/* bc 12, CR6_LT, -44 */
		/* 82083CCCh case    3:*/		if ( regs.CR[6].lt ) { return 0x82083CA0;  }
		/* 82083CCCh case    3:*/		return 0x82083CD0;
	}
	return 0x82083CD0;
} // Block from 82083CC0h-82083CD0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82083CD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083CD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083CD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083CD0);
		  /* 82083CD0h */ case    0:  		/* cmplw CR6, R9, R25 */
		/* 82083CD0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R25);
		/* 82083CD0h case    0:*/		return 0x82083CD4;
		  /* 82083CD4h */ case    1:  		/* bc 12, CR6_LT, 56 */
		/* 82083CD4h case    1:*/		if ( regs.CR[6].lt ) { return 0x82083D0C;  }
		/* 82083CD4h case    1:*/		return 0x82083CD8;
	}
	return 0x82083CD8;
} // Block from 82083CD0h-82083CD8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82083CD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083CD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083CD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083CD8);
		  /* 82083CD8h */ case    0:  		/* lis R12, -16442 */
		/* 82083CD8h case    0:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFBFC6);
		/* 82083CD8h case    0:*/		return 0x82083CDC;
		  /* 82083CDCh */ case    1:  		/* lbz R8, <#[R6]> */
		/* 82083CDCh case    1:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R6 + 0x00000000) );
		/* 82083CDCh case    1:*/		return 0x82083CE0;
		  /* 82083CE0h */ case    2:  		/* li R9, 95 */
		/* 82083CE0h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x5F);
		/* 82083CE0h case    2:*/		return 0x82083CE4;
		  /* 82083CE4h */ case    3:  		/* ori R12, R12, 53247 */
		/* 82083CE4h case    3:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xCFFF);
		/* 82083CE4h case    3:*/		return 0x82083CE8;
		  /* 82083CE8h */ case    4:  		/* rlwimi R11, R9, 20, 2, 11 */
		/* 82083CE8h case    4:*/		cpu::op::rlwimi<0,20,2,11>(regs,&regs.R11,regs.R9);
		/* 82083CE8h case    4:*/		return 0x82083CEC;
		  /* 82083CECh */ case    5:  		/* and R5, R4, R12 */
		/* 82083CECh case    5:*/		cpu::op::and<0>(regs,&regs.R5,regs.R4,regs.R12);
		/* 82083CECh case    5:*/		return 0x82083CF0;
		  /* 82083CF0h */ case    6:  		/* rlwinm R10, R10, 0, 28, 31 */
		/* 82083CF0h case    6:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R10,regs.R10);
		/* 82083CF0h case    6:*/		return 0x82083CF4;
		  /* 82083CF4h */ case    7:  		/* rlwinm R4, R3, 0, 0, 0 */
		/* 82083CF4h case    7:*/		cpu::op::rlwinm<0,0,0,0>(regs,&regs.R4,regs.R3);
		/* 82083CF4h case    7:*/		return 0x82083CF8;
		  /* 82083CF8h */ case    8:  		/* mr R9, R11 */
		/* 82083CF8h case    8:*/		regs.R9 = regs.R11;
		/* 82083CF8h case    8:*/		return 0x82083CFC;
		  /* 82083CFCh */ case    9:  		/* ori R10, R10, 37456 */
		/* 82083CFCh case    9:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x9250);
		/* 82083CFCh case    9:*/		return 0x82083D00;
		  /* 82083D00h */ case   10:  		/* oris R11, R5, 6 */
		/* 82083D00h case   10:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R5,0x6);
		/* 82083D00h case   10:*/		return 0x82083D04;
		  /* 82083D04h */ case   11:  		/* or R8, R4, R8 */
		/* 82083D04h case   11:*/		cpu::op::or<0>(regs,&regs.R8,regs.R4,regs.R8);
		/* 82083D04h case   11:*/		return 0x82083D08;
		  /* 82083D08h */ case   12:  		/* b 292 */
		/* 82083D08h case   12:*/		return 0x82083E2C;
		/* 82083D08h case   12:*/		return 0x82083D0C;
	}
	return 0x82083D0C;
} // Block from 82083CD8h-82083D0Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 82083D0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083D0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083D0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083D0C);
		  /* 82083D0Ch */ case    0:  		/* lwz R9, <#[R8 + 4]> */
		/* 82083D0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000004) );
		/* 82083D0Ch case    0:*/		return 0x82083D10;
		  /* 82083D10h */ case    1:  		/* rlwinm R10, R10, 0, 28, 31 */
		/* 82083D10h case    1:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R10,regs.R10);
		/* 82083D10h case    1:*/		return 0x82083D14;
		  /* 82083D14h */ case    2:  		/* rlwinm R22, R9, 16, 29, 31 */
		/* 82083D14h case    2:*/		cpu::op::rlwinm<0,16,29,31>(regs,&regs.R22,regs.R9);
		/* 82083D14h case    2:*/		return 0x82083D18;
		  /* 82083D18h */ case    3:  		/* rlwinm R5, R9, 22, 26, 28 */
		/* 82083D18h case    3:*/		cpu::op::rlwinm<0,22,26,28>(regs,&regs.R5,regs.R9);
		/* 82083D18h case    3:*/		return 0x82083D1C;
		  /* 82083D1Ch */ case    4:  		/* rlwinm R21, R9, 13, 29, 31 */
		/* 82083D1Ch case    4:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R21,regs.R9);
		/* 82083D1Ch case    4:*/		return 0x82083D20;
		  /* 82083D20h */ case    5:  		/* or R5, R5, R22 */
		/* 82083D20h case    5:*/		cpu::op::or<0>(regs,&regs.R5,regs.R5,regs.R22);
		/* 82083D20h case    5:*/		return 0x82083D24;
		  /* 82083D24h */ case    6:  		/* rlwinm R22, R9, 0, 16, 21 */
		/* 82083D24h case    6:*/		cpu::op::rlwinm<0,0,16,21>(regs,&regs.R22,regs.R9);
		/* 82083D24h case    6:*/		return 0x82083D28;
		  /* 82083D28h */ case    7:  		/* rlwinm R5, R5, 3, 0, 28 */
		/* 82083D28h case    7:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R5,regs.R5);
		/* 82083D28h case    7:*/		return 0x82083D2C;
		  /* 82083D2Ch */ case    8:  		/* rlwinm R20, R9, 0, 24, 25 */
		/* 82083D2Ch case    8:*/		cpu::op::rlwinm<0,0,24,25>(regs,&regs.R20,regs.R9);
		/* 82083D2Ch case    8:*/		return 0x82083D30;
		  /* 82083D30h */ case    9:  		/* or R5, R5, R21 */
		/* 82083D30h case    9:*/		cpu::op::or<0>(regs,&regs.R5,regs.R5,regs.R21);
		/* 82083D30h case    9:*/		return 0x82083D34;
		  /* 82083D34h */ case   10:  		/* cmplwi CR6, R20, 64 */
		/* 82083D34h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000040);
		/* 82083D34h case   10:*/		return 0x82083D38;
		  /* 82083D38h */ case   11:  		/* rlwinm R5, R5, 1, 0, 30 */
		/* 82083D38h case   11:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R5);
		/* 82083D38h case   11:*/		return 0x82083D3C;
		  /* 82083D3Ch */ case   12:  		/* or R5, R5, R22 */
		/* 82083D3Ch case   12:*/		cpu::op::or<0>(regs,&regs.R5,regs.R5,regs.R22);
		/* 82083D3Ch case   12:*/		return 0x82083D40;
		  /* 82083D40h */ case   13:  		/* rlwinm R5, R5, 3, 0, 28 */
		/* 82083D40h case   13:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R5,regs.R5);
		/* 82083D40h case   13:*/		return 0x82083D44;
		  /* 82083D44h */ case   14:  		/* or R10, R5, R10 */
		/* 82083D44h case   14:*/		cpu::op::or<0>(regs,&regs.R10,regs.R5,regs.R10);
		/* 82083D44h case   14:*/		return 0x82083D48;
		  /* 82083D48h */ case   15:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 82083D48h case   15:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 82083D48h case   15:*/		return 0x82083D4C;
		  /* 82083D4Ch */ case   16:  		/* bc 4, CR6_EQ, 132 */
		/* 82083D4Ch case   16:*/		if ( !regs.CR[6].eq ) { return 0x82083DD0;  }
		/* 82083D4Ch case   16:*/		return 0x82083D50;
		  /* 82083D50h */ case   17:  		/* rlwinm R22, R10, 0, 16, 18 */
		/* 82083D50h case   17:*/		cpu::op::rlwinm<0,0,16,18>(regs,&regs.R22,regs.R10);
		/* 82083D50h case   17:*/		return 0x82083D54;
		  /* 82083D54h */ case   18:  		/* rlwinm R5, R10, 0, 16, 31 */
		/* 82083D54h case   18:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R5,regs.R10);
		/* 82083D54h case   18:*/		return 0x82083D58;
		  /* 82083D58h */ case   19:  		/* cmplwi CR6, R22, 24576 */
		/* 82083D58h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00006000);
		/* 82083D58h case   19:*/		return 0x82083D5C;
		  /* 82083D5Ch */ case   20:  		/* bc 12, CR6_GT, 20 */
		/* 82083D5Ch case   20:*/		if ( regs.CR[6].gt ) { return 0x82083D70;  }
		/* 82083D5Ch case   20:*/		return 0x82083D60;
		  /* 82083D60h */ case   21:  		/* rlwinm R10, R5, 0, 16, 18 */
		/* 82083D60h case   21:*/		cpu::op::rlwinm<0,0,16,18>(regs,&regs.R10,regs.R5);
		/* 82083D60h case   21:*/		return 0x82083D64;
		  /* 82083D64h */ case   22:  		/* rlwinm R5, R5, 0, 19, 31 */
		/* 82083D64h case   22:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R5,regs.R5);
		/* 82083D64h case   22:*/		return 0x82083D68;
		  /* 82083D68h */ case   23:  		/* xori R10, R10, 8192 */
		/* 82083D68h case   23:*/		cpu::op::xori<0>(regs,&regs.R10,regs.R10,0x2000);
		/* 82083D68h case   23:*/		return 0x82083D6C;
		  /* 82083D6Ch */ case   24:  		/* or R10, R10, R5 */
		/* 82083D6Ch case   24:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R5);
		/* 82083D6Ch case   24:*/		return 0x82083D70;
	}
	return 0x82083D70;
} // Block from 82083D0Ch-82083D70h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82083D70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083D70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083D70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083D70);
		  /* 82083D70h */ case    0:  		/* rlwinm R22, R10, 0, 19, 21 */
		/* 82083D70h case    0:*/		cpu::op::rlwinm<0,0,19,21>(regs,&regs.R22,regs.R10);
		/* 82083D70h case    0:*/		return 0x82083D74;
		  /* 82083D74h */ case    1:  		/* rlwinm R5, R10, 0, 16, 31 */
		/* 82083D74h case    1:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R5,regs.R10);
		/* 82083D74h case    1:*/		return 0x82083D78;
		  /* 82083D78h */ case    2:  		/* cmplwi CR6, R22, 3072 */
		/* 82083D78h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000C00);
		/* 82083D78h case    2:*/		return 0x82083D7C;
		  /* 82083D7Ch */ case    3:  		/* bc 12, CR6_GT, 20 */
		/* 82083D7Ch case    3:*/		if ( regs.CR[6].gt ) { return 0x82083D90;  }
		/* 82083D7Ch case    3:*/		return 0x82083D80;
		  /* 82083D80h */ case    4:  		/* rlwinm R10, R5, 0, 19, 21 */
		/* 82083D80h case    4:*/		cpu::op::rlwinm<0,0,19,21>(regs,&regs.R10,regs.R5);
		/* 82083D80h case    4:*/		return 0x82083D84;
		  /* 82083D84h */ case    5:  		/* andi. R5, R5, 58367 */
		/* 82083D84h case    5:*/		cpu::op::andi<1>(regs,&regs.R5,regs.R5,0xE3FF);
		/* 82083D84h case    5:*/		return 0x82083D88;
		  /* 82083D88h */ case    6:  		/* xori R10, R10, 1024 */
		/* 82083D88h case    6:*/		cpu::op::xori<0>(regs,&regs.R10,regs.R10,0x400);
		/* 82083D88h case    6:*/		return 0x82083D8C;
		  /* 82083D8Ch */ case    7:  		/* or R10, R10, R5 */
		/* 82083D8Ch case    7:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R5);
		/* 82083D8Ch case    7:*/		return 0x82083D90;
	}
	return 0x82083D90;
} // Block from 82083D70h-82083D90h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82083D90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083D90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083D90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083D90);
		  /* 82083D90h */ case    0:  		/* rlwinm R22, R10, 0, 22, 24 */
		/* 82083D90h case    0:*/		cpu::op::rlwinm<0,0,22,24>(regs,&regs.R22,regs.R10);
		/* 82083D90h case    0:*/		return 0x82083D94;
		  /* 82083D94h */ case    1:  		/* rlwinm R5, R10, 0, 16, 31 */
		/* 82083D94h case    1:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R5,regs.R10);
		/* 82083D94h case    1:*/		return 0x82083D98;
		  /* 82083D98h */ case    2:  		/* cmplwi CR6, R22, 384 */
		/* 82083D98h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000180);
		/* 82083D98h case    2:*/		return 0x82083D9C;
		  /* 82083D9Ch */ case    3:  		/* bc 12, CR6_GT, 20 */
		/* 82083D9Ch case    3:*/		if ( regs.CR[6].gt ) { return 0x82083DB0;  }
		/* 82083D9Ch case    3:*/		return 0x82083DA0;
		  /* 82083DA0h */ case    4:  		/* rlwinm R10, R5, 0, 22, 24 */
		/* 82083DA0h case    4:*/		cpu::op::rlwinm<0,0,22,24>(regs,&regs.R10,regs.R5);
		/* 82083DA0h case    4:*/		return 0x82083DA4;
		  /* 82083DA4h */ case    5:  		/* andi. R5, R5, 64639 */
		/* 82083DA4h case    5:*/		cpu::op::andi<1>(regs,&regs.R5,regs.R5,0xFC7F);
		/* 82083DA4h case    5:*/		return 0x82083DA8;
		  /* 82083DA8h */ case    6:  		/* xori R10, R10, 128 */
		/* 82083DA8h case    6:*/		cpu::op::xori<0>(regs,&regs.R10,regs.R10,0x80);
		/* 82083DA8h case    6:*/		return 0x82083DAC;
		  /* 82083DACh */ case    7:  		/* or R10, R10, R5 */
		/* 82083DACh case    7:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R5);
		/* 82083DACh case    7:*/		return 0x82083DB0;
	}
	return 0x82083DB0;
} // Block from 82083D90h-82083DB0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82083DB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083DB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083DB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083DB0);
		  /* 82083DB0h */ case    0:  		/* rlwinm R22, R10, 0, 25, 27 */
		/* 82083DB0h case    0:*/		cpu::op::rlwinm<0,0,25,27>(regs,&regs.R22,regs.R10);
		/* 82083DB0h case    0:*/		return 0x82083DB4;
		  /* 82083DB4h */ case    1:  		/* rlwinm R5, R10, 0, 16, 31 */
		/* 82083DB4h case    1:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R5,regs.R10);
		/* 82083DB4h case    1:*/		return 0x82083DB8;
		  /* 82083DB8h */ case    2:  		/* cmplwi CR6, R22, 48 */
		/* 82083DB8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000030);
		/* 82083DB8h case    2:*/		return 0x82083DBC;
		  /* 82083DBCh */ case    3:  		/* bc 12, CR6_GT, 20 */
		/* 82083DBCh case    3:*/		if ( regs.CR[6].gt ) { return 0x82083DD0;  }
		/* 82083DBCh case    3:*/		return 0x82083DC0;
		  /* 82083DC0h */ case    4:  		/* rlwinm R10, R5, 0, 25, 27 */
		/* 82083DC0h case    4:*/		cpu::op::rlwinm<0,0,25,27>(regs,&regs.R10,regs.R5);
		/* 82083DC0h case    4:*/		return 0x82083DC4;
		  /* 82083DC4h */ case    5:  		/* andi. R5, R5, 65423 */
		/* 82083DC4h case    5:*/		cpu::op::andi<1>(regs,&regs.R5,regs.R5,0xFF8F);
		/* 82083DC4h case    5:*/		return 0x82083DC8;
		  /* 82083DC8h */ case    6:  		/* xori R10, R10, 16 */
		/* 82083DC8h case    6:*/		cpu::op::xori<0>(regs,&regs.R10,regs.R10,0x10);
		/* 82083DC8h case    6:*/		return 0x82083DCC;
		  /* 82083DCCh */ case    7:  		/* or R10, R10, R5 */
		/* 82083DCCh case    7:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R5);
		/* 82083DCCh case    7:*/		return 0x82083DD0;
	}
	return 0x82083DD0;
} // Block from 82083DB0h-82083DD0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82083DD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083DD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083DD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083DD0);
		  /* 82083DD0h */ case    0:  		/* lhz R5, <#[R8]> */
		/* 82083DD0h case    0:*/		cpu::mem::load16z( regs, &regs.R5, (uint32)(regs.R8 + 0x00000000) );
		/* 82083DD0h case    0:*/		return 0x82083DD4;
		  /* 82083DD4h */ case    1:  		/* lis R22, 342 */
		/* 82083DD4h case    1:*/		cpu::op::lis<0>(regs,&regs.R22,0x156);
		/* 82083DD4h case    1:*/		return 0x82083DD8;
		  /* 82083DD8h */ case    2:  		/* lhz R8, <#[R8 + 2]> */
		/* 82083DD8h case    2:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000002) );
		/* 82083DD8h case    2:*/		return 0x82083DDC;
		  /* 82083DDCh */ case    3:  		/* rlwinm R21, R9, 12, 14, 19 */
		/* 82083DDCh case    3:*/		cpu::op::rlwinm<0,12,14,19>(regs,&regs.R21,regs.R9);
		/* 82083DDCh case    3:*/		return 0x82083DE0;
		  /* 82083DE0h */ case    4:  		/* subfic R20, R5, 95 */
		/* 82083DE0h case    4:*/		cpu::op::subfic<0>(regs,&regs.R20,regs.R5,0x5F);
		/* 82083DE0h case    4:*/		return 0x82083DE4;
		  /* 82083DE4h */ case    5:  		/* ori R22, R22, 86 */
		/* 82083DE4h case    5:*/		cpu::op::ori<0>(regs,&regs.R22,regs.R22,0x56);
		/* 82083DE4h case    5:*/		return 0x82083DE8;
		  /* 82083DE8h */ case    6:  		/* rlwinm R9, R9, 0, 22, 23 */
		/* 82083DE8h case    6:*/		cpu::op::rlwinm<0,0,22,23>(regs,&regs.R9,regs.R9);
		/* 82083DE8h case    6:*/		return 0x82083DEC;
		  /* 82083DECh */ case    7:  		/* mullw R22, R20, R22 */
		/* 82083DECh case    7:*/		cpu::op::mullw<0>(regs,&regs.R22,regs.R20,regs.R22);
		/* 82083DECh case    7:*/		return 0x82083DF0;
		  /* 82083DF0h */ case    8:  		/* lbzx R5, <#[R5 + R6]> */
		/* 82083DF0h case    8:*/		cpu::mem::load8z( regs, &regs.R5, (uint32)(regs.R5 + regs.R6 + 0x00000000) );
		/* 82083DF0h case    8:*/		return 0x82083DF4;
		  /* 82083DF4h */ case    9:  		/* mr R20, R22 */
		/* 82083DF4h case    9:*/		regs.R20 = regs.R22;
		/* 82083DF4h case    9:*/		return 0x82083DF8;
		  /* 82083DF8h */ case   10:  		/* lis R12, -16448 */
		/* 82083DF8h case   10:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFBFC0);
		/* 82083DF8h case   10:*/		return 0x82083DFC;
		  /* 82083DFCh */ case   11:  		/* rlwimi R20, R22, 11, 8, 12 */
		/* 82083DFCh case   11:*/		cpu::op::rlwimi<0,11,8,12>(regs,&regs.R20,regs.R22);
		/* 82083DFCh case   11:*/		return 0x82083E00;
		  /* 82083E00h */ case   12:  		/* rlwinm R8, R8, 6, 1, 23 */
		/* 82083E00h case   12:*/		cpu::op::rlwinm<0,6,1,23>(regs,&regs.R8,regs.R8);
		/* 82083E00h case   12:*/		return 0x82083E04;
		  /* 82083E04h */ case   13:  		/* or R9, R21, R9 */
		/* 82083E04h case   13:*/		cpu::op::or<0>(regs,&regs.R9,regs.R21,regs.R9);
		/* 82083E04h case   13:*/		return 0x82083E08;
		  /* 82083E08h */ case   14:  		/* ori R12, R12, 53247 */
		/* 82083E08h case   14:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xCFFF);
		/* 82083E08h case   14:*/		return 0x82083E0C;
		  /* 82083E0Ch */ case   15:  		/* rlwimi R11, R20, 1, 5, 11 */
		/* 82083E0Ch case   15:*/		cpu::op::rlwimi<0,1,5,11>(regs,&regs.R11,regs.R20);
		/* 82083E0Ch case   15:*/		return 0x82083E10;
		  /* 82083E10h */ case   16:  		/* or R8, R8, R5 */
		/* 82083E10h case   16:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R5);
		/* 82083E10h case   16:*/		return 0x82083E14;
		  /* 82083E14h */ case   17:  		/* rlwinm R22, R9, 4, 0, 27 */
		/* 82083E14h case   17:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R22,regs.R9);
		/* 82083E14h case   17:*/		return 0x82083E18;
		  /* 82083E18h */ case   18:  		/* and R4, R4, R12 */
		/* 82083E18h case   18:*/		cpu::op::and<0>(regs,&regs.R4,regs.R4,regs.R12);
		/* 82083E18h case   18:*/		return 0x82083E1C;
		  /* 82083E1Ch */ case   19:  		/* rlwinm R5, R3, 0, 0, 0 */
		/* 82083E1Ch case   19:*/		cpu::op::rlwinm<0,0,0,0>(regs,&regs.R5,regs.R3);
		/* 82083E1Ch case   19:*/		return 0x82083E20;
		  /* 82083E20h */ case   20:  		/* rlwinm R9, R11, 0, 5, 1 */
		/* 82083E20h case   20:*/		cpu::op::rlwinm<0,0,5,1>(regs,&regs.R9,regs.R11);
		/* 82083E20h case   20:*/		return 0x82083E24;
		  /* 82083E24h */ case   21:  		/* or R11, R22, R4 */
		/* 82083E24h case   21:*/		cpu::op::or<0>(regs,&regs.R11,regs.R22,regs.R4);
		/* 82083E24h case   21:*/		return 0x82083E28;
		  /* 82083E28h */ case   22:  		/* or R8, R8, R5 */
		/* 82083E28h case   22:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R5);
		/* 82083E28h case   22:*/		return 0x82083E2C;
	}
	return 0x82083E2C;
} // Block from 82083DD0h-82083E2Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 82083E2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083E2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083E2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083E2C);
		  /* 82083E2Ch */ case    0:  		/* rlwinm R5, R11, 1, 28, 30 */
		/* 82083E2Ch case    0:*/		cpu::op::rlwinm<0,1,28,30>(regs,&regs.R5,regs.R11);
		/* 82083E2Ch case    0:*/		return 0x82083E30;
		  /* 82083E30h */ case    1:  		/* stw R9, <#[R7]> */
		/* 82083E30h case    1:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 82083E30h case    1:*/		return 0x82083E34;
		  /* 82083E34h */ case    2:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 82083E34h case    2:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 82083E34h case    2:*/		return 0x82083E38;
		  /* 82083E38h */ case    3:  		/* stw R8, <#[R7 + 8]> */
		/* 82083E38h case    3:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000008) );
		/* 82083E38h case    3:*/		return 0x82083E3C;
		  /* 82083E3Ch */ case    4:  		/* addic. R29, R29, -1 */
		/* 82083E3Ch case    4:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 82083E3Ch case    4:*/		return 0x82083E40;
		  /* 82083E40h */ case    5:  		/* ori R10, R10, 14 */
		/* 82083E40h case    5:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0xE);
		/* 82083E40h case    5:*/		return 0x82083E44;
		  /* 82083E44h */ case    6:  		/* addi R27, R27, 4 */
		/* 82083E44h case    6:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 82083E44h case    6:*/		return 0x82083E48;
		  /* 82083E48h */ case    7:  		/* lhzx R9, <#[R5 + R31]> */
		/* 82083E48h case    7:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R5 + regs.R31 + 0x00000000) );
		/* 82083E48h case    7:*/		return 0x82083E4C;
		  /* 82083E4Ch */ case    8:  		/* rlwinm R8, R10, 0, 16, 31 */
		/* 82083E4Ch case    8:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R8,regs.R10);
		/* 82083E4Ch case    8:*/		return 0x82083E50;
		  /* 82083E50h */ case    9:  		/* rlwinm R5, R10, 0, 16, 31 */
		/* 82083E50h case    9:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R5,regs.R10);
		/* 82083E50h case    9:*/		return 0x82083E54;
		  /* 82083E54h */ case   10:  		/* and R9, R9, R8 */
		/* 82083E54h case   10:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 82083E54h case   10:*/		return 0x82083E58;
		  /* 82083E58h */ case   11:  		/* rlwinm R8, R10, 0, 16, 31 */
		/* 82083E58h case   11:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R8,regs.R10);
		/* 82083E58h case   11:*/		return 0x82083E5C;
		  /* 82083E5Ch */ case   12:  		/* rlwinm R4, R9, 0, 16, 31 */
		/* 82083E5Ch case   12:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R4,regs.R9);
		/* 82083E5Ch case   12:*/		return 0x82083E60;
		  /* 82083E60h */ case   13:  		/* rlwinm R9, R9, 29, 19, 31 */
		/* 82083E60h case   13:*/		cpu::op::rlwinm<0,29,19,31>(regs,&regs.R9,regs.R9);
		/* 82083E60h case   13:*/		return 0x82083E64;
		  /* 82083E64h */ case   14:  		/* rlwinm R3, R10, 0, 16, 31 */
		/* 82083E64h case   14:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R3,regs.R10);
		/* 82083E64h case   14:*/		return 0x82083E68;
		  /* 82083E68h */ case   15:  		/* or R9, R9, R4 */
		/* 82083E68h case   15:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R4);
		/* 82083E68h case   15:*/		return 0x82083E6C;
		  /* 82083E6Ch */ case   16:  		/* rlwinm R9, R9, 29, 3, 31 */
		/* 82083E6Ch case   16:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R9,regs.R9);
		/* 82083E6Ch case   16:*/		return 0x82083E70;
		  /* 82083E70h */ case   17:  		/* or R9, R9, R4 */
		/* 82083E70h case   17:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R4);
		/* 82083E70h case   17:*/		return 0x82083E74;
		  /* 82083E74h */ case   18:  		/* rlwinm R9, R9, 29, 3, 31 */
		/* 82083E74h case   18:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R9,regs.R9);
		/* 82083E74h case   18:*/		return 0x82083E78;
		  /* 82083E78h */ case   19:  		/* or R9, R9, R4 */
		/* 82083E78h case   19:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R4);
		/* 82083E78h case   19:*/		return 0x82083E7C;
		  /* 82083E7Ch */ case   20:  		/* rlwinm R9, R9, 29, 3, 31 */
		/* 82083E7Ch case   20:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R9,regs.R9);
		/* 82083E7Ch case   20:*/		return 0x82083E80;
		  /* 82083E80h */ case   21:  		/* or R9, R9, R4 */
		/* 82083E80h case   21:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R4);
		/* 82083E80h case   21:*/		return 0x82083E84;
		  /* 82083E84h */ case   22:  		/* rlwimi R11, R9, 31, 29, 31 */
		/* 82083E84h case   22:*/		cpu::op::rlwimi<0,31,29,31>(regs,&regs.R11,regs.R9);
		/* 82083E84h case   22:*/		return 0x82083E88;
		  /* 82083E88h */ case   23:  		/* rlwinm R9, R11, 30, 28, 30 */
		/* 82083E88h case   23:*/		cpu::op::rlwinm<0,30,28,30>(regs,&regs.R9,regs.R11);
		/* 82083E88h case   23:*/		return 0x82083E8C;
		  /* 82083E8Ch */ case   24:  		/* lhzx R9, <#[R9 + R31]> */
		/* 82083E8Ch case   24:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R9 + regs.R31 + 0x00000000) );
		/* 82083E8Ch case   24:*/		return 0x82083E90;
		  /* 82083E90h */ case   25:  		/* and R9, R9, R5 */
		/* 82083E90h case   25:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R5);
		/* 82083E90h case   25:*/		return 0x82083E94;
		  /* 82083E94h */ case   26:  		/* rlwinm R5, R9, 0, 16, 31 */
		/* 82083E94h case   26:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R5,regs.R9);
		/* 82083E94h case   26:*/		return 0x82083E98;
		  /* 82083E98h */ case   27:  		/* rlwinm R4, R9, 29, 19, 31 */
		/* 82083E98h case   27:*/		cpu::op::rlwinm<0,29,19,31>(regs,&regs.R4,regs.R9);
		/* 82083E98h case   27:*/		return 0x82083E9C;
		  /* 82083E9Ch */ case   28:  		/* rlwinm R9, R9, 2, 14, 29 */
		/* 82083E9Ch case   28:*/		cpu::op::rlwinm<0,2,14,29>(regs,&regs.R9,regs.R9);
		/* 82083E9Ch case   28:*/		return 0x82083EA0;
		  /* 82083EA0h */ case   29:  		/* or R4, R4, R5 */
		/* 82083EA0h case   29:*/		cpu::op::or<0>(regs,&regs.R4,regs.R4,regs.R5);
		/* 82083EA0h case   29:*/		return 0x82083EA4;
		  /* 82083EA4h */ case   30:  		/* rlwinm R4, R4, 29, 3, 31 */
		/* 82083EA4h case   30:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R4,regs.R4);
		/* 82083EA4h case   30:*/		return 0x82083EA8;
		  /* 82083EA8h */ case   31:  		/* or R4, R4, R5 */
		/* 82083EA8h case   31:*/		cpu::op::or<0>(regs,&regs.R4,regs.R4,regs.R5);
		/* 82083EA8h case   31:*/		return 0x82083EAC;
		  /* 82083EACh */ case   32:  		/* rlwinm R4, R4, 29, 3, 31 */
		/* 82083EACh case   32:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R4,regs.R4);
		/* 82083EACh case   32:*/		return 0x82083EB0;
		  /* 82083EB0h */ case   33:  		/* or R5, R4, R5 */
		/* 82083EB0h case   33:*/		cpu::op::or<0>(regs,&regs.R5,regs.R4,regs.R5);
		/* 82083EB0h case   33:*/		return 0x82083EB4;
		  /* 82083EB4h */ case   34:  		/* rlwinm R5, R5, 31, 1, 31 */
		/* 82083EB4h case   34:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R5,regs.R5);
		/* 82083EB4h case   34:*/		return 0x82083EB8;
		  /* 82083EB8h */ case   35:  		/* or R9, R5, R9 */
		/* 82083EB8h case   35:*/		cpu::op::or<0>(regs,&regs.R9,regs.R5,regs.R9);
		/* 82083EB8h case   35:*/		return 0x82083EBC;
		  /* 82083EBCh */ case   36:  		/* rlwimi R9, R11, 0, 29, 25 */
		/* 82083EBCh case   36:*/		cpu::op::rlwimi<0,0,29,25>(regs,&regs.R9,regs.R11);
		/* 82083EBCh case   36:*/		return 0x82083EC0;
		  /* 82083EC0h */ case   37:  		/* rlwinm R11, R9, 27, 28, 30 */
		/* 82083EC0h case   37:*/		cpu::op::rlwinm<0,27,28,30>(regs,&regs.R11,regs.R9);
		/* 82083EC0h case   37:*/		return 0x82083EC4;
		  /* 82083EC4h */ case   38:  		/* lhzx R11, <#[R11 + R31]> */
		/* 82083EC4h case   38:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82083EC4h case   38:*/		return 0x82083EC8;
		  /* 82083EC8h */ case   39:  		/* and R11, R11, R8 */
		/* 82083EC8h case   39:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82083EC8h case   39:*/		return 0x82083ECC;
		  /* 82083ECCh */ case   40:  		/* rlwinm R8, R11, 0, 16, 31 */
		/* 82083ECCh case   40:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R8,regs.R11);
		/* 82083ECCh case   40:*/		return 0x82083ED0;
		  /* 82083ED0h */ case   41:  		/* rlwinm R5, R11, 29, 19, 31 */
		/* 82083ED0h case   41:*/		cpu::op::rlwinm<0,29,19,31>(regs,&regs.R5,regs.R11);
		/* 82083ED0h case   41:*/		return 0x82083ED4;
		  /* 82083ED4h */ case   42:  		/* rlwinm R11, R11, 3, 13, 28 */
		/* 82083ED4h case   42:*/		cpu::op::rlwinm<0,3,13,28>(regs,&regs.R11,regs.R11);
		/* 82083ED4h case   42:*/		return 0x82083ED8;
		  /* 82083ED8h */ case   43:  		/* or R5, R5, R8 */
		/* 82083ED8h case   43:*/		cpu::op::or<0>(regs,&regs.R5,regs.R5,regs.R8);
		/* 82083ED8h case   43:*/		return 0x82083EDC;
		  /* 82083EDCh */ case   44:  		/* or R11, R11, R8 */
		/* 82083EDCh case   44:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82083EDCh case   44:*/		return 0x82083EE0;
		  /* 82083EE0h */ case   45:  		/* rlwinm R5, R5, 29, 3, 31 */
		/* 82083EE0h case   45:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R5,regs.R5);
		/* 82083EE0h case   45:*/		return 0x82083EE4;
		  /* 82083EE4h */ case   46:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82083EE4h case   46:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82083EE4h case   46:*/		return 0x82083EE8;
		  /* 82083EE8h */ case   47:  		/* or R8, R5, R8 */
		/* 82083EE8h case   47:*/		cpu::op::or<0>(regs,&regs.R8,regs.R5,regs.R8);
		/* 82083EE8h case   47:*/		return 0x82083EEC;
		  /* 82083EECh */ case   48:  		/* rlwinm R8, R8, 31, 1, 31 */
		/* 82083EECh case   48:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R8,regs.R8);
		/* 82083EECh case   48:*/		return 0x82083EF0;
		  /* 82083EF0h */ case   49:  		/* or R11, R8, R11 */
		/* 82083EF0h case   49:*/		cpu::op::or<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 82083EF0h case   49:*/		return 0x82083EF4;
		  /* 82083EF4h */ case   50:  		/* rlwimi R11, R9, 0, 26, 22 */
		/* 82083EF4h case   50:*/		cpu::op::rlwimi<0,0,26,22>(regs,&regs.R11,regs.R9);
		/* 82083EF4h case   50:*/		return 0x82083EF8;
		  /* 82083EF8h */ case   51:  		/* rlwinm R9, R11, 24, 28, 30 */
		/* 82083EF8h case   51:*/		cpu::op::rlwinm<0,24,28,30>(regs,&regs.R9,regs.R11);
		/* 82083EF8h case   51:*/		return 0x82083EFC;
		  /* 82083EFCh */ case   52:  		/* lhzx R9, <#[R9 + R31]> */
		/* 82083EFCh case   52:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R9 + regs.R31 + 0x00000000) );
		/* 82083EFCh case   52:*/		return 0x82083F00;
		  /* 82083F00h */ case   53:  		/* and R9, R9, R3 */
		/* 82083F00h case   53:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R3);
		/* 82083F00h case   53:*/		return 0x82083F04;
		  /* 82083F04h */ case   54:  		/* rlwinm R8, R9, 0, 16, 31 */
		/* 82083F04h case   54:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R8,regs.R9);
		/* 82083F04h case   54:*/		return 0x82083F08;
		  /* 82083F08h */ case   55:  		/* rlwinm R5, R9, 3, 13, 28 */
		/* 82083F08h case   55:*/		cpu::op::rlwinm<0,3,13,28>(regs,&regs.R5,regs.R9);
		/* 82083F08h case   55:*/		return 0x82083F0C;
		  /* 82083F0Ch */ case   56:  		/* rlwinm R9, R9, 29, 19, 31 */
		/* 82083F0Ch case   56:*/		cpu::op::rlwinm<0,29,19,31>(regs,&regs.R9,regs.R9);
		/* 82083F0Ch case   56:*/		return 0x82083F10;
		  /* 82083F10h */ case   57:  		/* or R5, R5, R8 */
		/* 82083F10h case   57:*/		cpu::op::or<0>(regs,&regs.R5,regs.R5,regs.R8);
		/* 82083F10h case   57:*/		return 0x82083F14;
		  /* 82083F14h */ case   58:  		/* or R9, R9, R8 */
		/* 82083F14h case   58:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 82083F14h case   58:*/		return 0x82083F18;
		  /* 82083F18h */ case   59:  		/* rlwinm R5, R5, 3, 0, 28 */
		/* 82083F18h case   59:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R5,regs.R5);
		/* 82083F18h case   59:*/		return 0x82083F1C;
		  /* 82083F1Ch */ case   60:  		/* rlwinm R9, R9, 31, 1, 31 */
		/* 82083F1Ch case   60:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R9,regs.R9);
		/* 82083F1Ch case   60:*/		return 0x82083F20;
		  /* 82083F20h */ case   61:  		/* or R8, R5, R8 */
		/* 82083F20h case   61:*/		cpu::op::or<0>(regs,&regs.R8,regs.R5,regs.R8);
		/* 82083F20h case   61:*/		return 0x82083F24;
		  /* 82083F24h */ case   62:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 82083F24h case   62:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 82083F24h case   62:*/		return 0x82083F28;
		  /* 82083F28h */ case   63:  		/* or R9, R8, R9 */
		/* 82083F28h case   63:*/		cpu::op::or<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 82083F28h case   63:*/		return 0x82083F2C;
		  /* 82083F2Ch */ case   64:  		/* rlwimi R9, R11, 0, 23, 19 */
		/* 82083F2Ch case   64:*/		cpu::op::rlwimi<0,0,23,19>(regs,&regs.R9,regs.R11);
		/* 82083F2Ch case   64:*/		return 0x82083F30;
		  /* 82083F30h */ case   65:  		/* stw R9, <#[R7 + 4]> */
		/* 82083F30h case   65:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + 0x00000004) );
		/* 82083F30h case   65:*/		return 0x82083F34;
		  /* 82083F34h */ case   66:  		/* addi R7, R7, 12 */
		/* 82083F34h case   66:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0xC);
		/* 82083F34h case   66:*/		return 0x82083F38;
		  /* 82083F38h */ case   67:  		/* bc 4, CR0_EQ, -700 */
		/* 82083F38h case   67:*/		if ( !regs.CR[0].eq ) { return 0x82083C7C;  }
		/* 82083F38h case   67:*/		return 0x82083F3C;
	}
	return 0x82083F3C;
} // Block from 82083E2Ch-82083F3Ch (68 instructions)

//////////////////////////////////////////////////////
// Block at 82083F3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083F3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083F3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083F3C);
		  /* 82083F3Ch */ case    0:  		/* rlwinm R11, R28, 2, 0, 29 */
		/* 82083F3Ch case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R28);
		/* 82083F3Ch case    0:*/		return 0x82083F40;
		  /* 82083F40h */ case    1:  		/* mr R27, R30 */
		/* 82083F40h case    1:*/		regs.R27 = regs.R30;
		/* 82083F40h case    1:*/		return 0x82083F44;
		  /* 82083F44h */ case    2:  		/* add R26, R11, R30 */
		/* 82083F44h case    2:*/		cpu::op::add<0>(regs,&regs.R26,regs.R11,regs.R30);
		/* 82083F44h case    2:*/		return 0x82083F48;
		  /* 82083F48h */ case    3:  		/* cmplw CR6, R30, R26 */
		/* 82083F48h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R26);
		/* 82083F48h case    3:*/		return 0x82083F4C;
		  /* 82083F4Ch */ case    4:  		/* bc 4, CR6_LT, 660 */
		/* 82083F4Ch case    4:*/		if ( !regs.CR[6].lt ) { return 0x820841E0;  }
		/* 82083F4Ch case    4:*/		return 0x82083F50;
		  /* 82083F50h */ case    5:  		/* lis R11, -32256 */
		/* 82083F50h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82083F50h case    5:*/		return 0x82083F54;
		  /* 82083F54h */ case    6:  		/* addi R25, R11, 17120 */
		/* 82083F54h case    6:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x42E0);
		/* 82083F54h case    6:*/		return 0x82083F58;
		  /* 82083F58h */ case    7:  		/* cmplw CR6, R27, R26 */
		/* 82083F58h case    7:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R26);
		/* 82083F58h case    7:*/		return 0x82083F5C;
		  /* 82083F5Ch */ case    8:  		/* bc 4, CR6_LT, 644 */
		/* 82083F5Ch case    8:*/		if ( !regs.CR[6].lt ) { return 0x820841E0;  }
		/* 82083F5Ch case    8:*/		return 0x82083F60;
		  /* 82083F60h */ case    9:  		/* lwz R11, <#[R27]> */
		/* 82083F60h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 82083F60h case    9:*/		return 0x82083F64;
		  /* 82083F64h */ case   10:  		/* rlwinm. R11, R11, 0, 10, 11 */
		/* 82083F64h case   10:*/		cpu::op::rlwinm<1,0,10,11>(regs,&regs.R11,regs.R11);
		/* 82083F64h case   10:*/		return 0x82083F68;
		  /* 82083F68h */ case   11:  		/* bc 4, CR0_EQ, 16 */
		/* 82083F68h case   11:*/		if ( !regs.CR[0].eq ) { return 0x82083F78;  }
		/* 82083F68h case   11:*/		return 0x82083F6C;
		  /* 82083F6Ch */ case   12:  		/* addi R27, R27, 4 */
		/* 82083F6Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 82083F6Ch case   12:*/		return 0x82083F70;
		  /* 82083F70h */ case   13:  		/* cmplw CR6, R27, R26 */
		/* 82083F70h case   13:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R26);
		/* 82083F70h case   13:*/		return 0x82083F74;
		  /* 82083F74h */ case   14:  		/* bc 12, CR6_LT, -20 */
		/* 82083F74h case   14:*/		if ( regs.CR[6].lt ) { return 0x82083F60;  }
		/* 82083F74h case   14:*/		return 0x82083F78;
	}
	return 0x82083F78;
} // Block from 82083F3Ch-82083F78h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82083F78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083F78);
		  /* 82083F78h */ case    0:  		/* cmplw CR6, R27, R26 */
		/* 82083F78h case    0:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R26);
		/* 82083F78h case    0:*/		return 0x82083F7C;
		  /* 82083F7Ch */ case    1:  		/* bc 4, CR6_LT, 612 */
		/* 82083F7Ch case    1:*/		if ( !regs.CR[6].lt ) { return 0x820841E0;  }
		/* 82083F7Ch case    1:*/		return 0x82083F80;
		  /* 82083F80h */ case    2:  		/* addi R11, R27, 4 */
		/* 82083F80h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x4);
		/* 82083F80h case    2:*/		return 0x82083F84;
		  /* 82083F84h */ case    3:  		/* mr R10, R27 */
		/* 82083F84h case    3:*/		regs.R10 = regs.R27;
		/* 82083F84h case    3:*/		return 0x82083F88;
		  /* 82083F88h */ case    4:  		/* cmplw CR6, R11, R26 */
		/* 82083F88h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 82083F88h case    4:*/		return 0x82083F8C;
		  /* 82083F8Ch */ case    5:  		/* bc 4, CR6_LT, 596 */
		/* 82083F8Ch case    5:*/		if ( !regs.CR[6].lt ) { return 0x820841E0;  }
		/* 82083F8Ch case    5:*/		return 0x82083F90;
		  /* 82083F90h */ case    6:  		/* lwz R9, <#[R11]> */
		/* 82083F90h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82083F90h case    6:*/		return 0x82083F94;
		  /* 82083F94h */ case    7:  		/* rlwinm. R9, R9, 0, 10, 11 */
		/* 82083F94h case    7:*/		cpu::op::rlwinm<1,0,10,11>(regs,&regs.R9,regs.R9);
		/* 82083F94h case    7:*/		return 0x82083F98;
		  /* 82083F98h */ case    8:  		/* bc 4, CR0_EQ, 16 */
		/* 82083F98h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82083FA8;  }
		/* 82083F98h case    8:*/		return 0x82083F9C;
		  /* 82083F9Ch */ case    9:  		/* addi R11, R11, 4 */
		/* 82083F9Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82083F9Ch case    9:*/		return 0x82083FA0;
		  /* 82083FA0h */ case   10:  		/* cmplw CR6, R11, R26 */
		/* 82083FA0h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 82083FA0h case   10:*/		return 0x82083FA4;
		  /* 82083FA4h */ case   11:  		/* bc 12, CR6_LT, -20 */
		/* 82083FA4h case   11:*/		if ( regs.CR[6].lt ) { return 0x82083F90;  }
		/* 82083FA4h case   11:*/		return 0x82083FA8;
	}
	return 0x82083FA8;
} // Block from 82083F78h-82083FA8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82083FA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82083FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82083FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82083FA8);
		  /* 82083FA8h */ case    0:  		/* cmplw CR6, R11, R26 */
		/* 82083FA8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 82083FA8h case    0:*/		return 0x82083FAC;
		  /* 82083FACh */ case    1:  		/* bc 4, CR6_LT, 564 */
		/* 82083FACh case    1:*/		if ( !regs.CR[6].lt ) { return 0x820841E0;  }
		/* 82083FACh case    1:*/		return 0x82083FB0;
		  /* 82083FB0h */ case    2:  		/* subf R8, R30, R10 */
		/* 82083FB0h case    2:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R30,regs.R10);
		/* 82083FB0h case    2:*/		return 0x82083FB4;
		  /* 82083FB4h */ case    3:  		/* lwz R7, <#[R11]> */
		/* 82083FB4h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82083FB4h case    3:*/		return 0x82083FB8;
		  /* 82083FB8h */ case    4:  		/* subf R10, R10, R11 */
		/* 82083FB8h case    4:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82083FB8h case    4:*/		return 0x82083FBC;
		  /* 82083FBCh */ case    5:  		/* addi R9, R1, 96 */
		/* 82083FBCh case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 82083FBCh case    5:*/		return 0x82083FC0;
		  /* 82083FC0h */ case    6:  		/* srawi R10, R10, 2 */
		/* 82083FC0h case    6:*/		cpu::op::srawi<0,2>(regs,&regs.R10,regs.R10);
		/* 82083FC0h case    6:*/		return 0x82083FC4;
		  /* 82083FC4h */ case    7:  		/* srawi R8, R8, 2 */
		/* 82083FC4h case    7:*/		cpu::op::srawi<0,2>(regs,&regs.R8,regs.R8);
		/* 82083FC4h case    7:*/		return 0x82083FC8;
		  /* 82083FC8h */ case    8:  		/* addi R5, R10, 1 */
		/* 82083FC8h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x1);
		/* 82083FC8h case    8:*/		return 0x82083FCC;
		  /* 82083FCCh */ case    9:  		/* mulli R8, R8, 12 */
		/* 82083FCCh case    9:*/		cpu::op::mulli<0>(regs,&regs.R8,regs.R8,0xC);
		/* 82083FCCh case    9:*/		return 0x82083FD0;
		  /* 82083FD0h */ case   10:  		/* addi R10, R5, -1 */
		/* 82083FD0h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R5,0xFFFFFFFF);
		/* 82083FD0h case   10:*/		return 0x82083FD4;
		  /* 82083FD4h */ case   11:  		/* rlwinm R7, R7, 0, 10, 11 */
		/* 82083FD4h case   11:*/		cpu::op::rlwinm<0,0,10,11>(regs,&regs.R7,regs.R7);
		/* 82083FD4h case   11:*/		return 0x82083FD8;
		  /* 82083FD8h */ case   12:  		/* lis R6, 48 */
		/* 82083FD8h case   12:*/		cpu::op::lis<0>(regs,&regs.R6,0x30);
		/* 82083FD8h case   12:*/		return 0x82083FDC;
		  /* 82083FDCh */ case   13:  		/* add R3, R8, R9 */
		/* 82083FDCh case   13:*/		cpu::op::add<0>(regs,&regs.R3,regs.R8,regs.R9);
		/* 82083FDCh case   13:*/		return 0x82083FE0;
		  /* 82083FE0h */ case   14:  		/* addi R27, R11, 4 */
		/* 82083FE0h case   14:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x4);
		/* 82083FE0h case   14:*/		return 0x82083FE4;
		  /* 82083FE4h */ case   15:  		/* mr R9, R10 */
		/* 82083FE4h case   15:*/		regs.R9 = regs.R10;
		/* 82083FE4h case   15:*/		return 0x82083FE8;
		  /* 82083FE8h */ case   16:  		/* mr R4, R5 */
		/* 82083FE8h case   16:*/		regs.R4 = regs.R5;
		/* 82083FE8h case   16:*/		return 0x82083FEC;
		  /* 82083FECh */ case   17:  		/* li R29, -1 */
		/* 82083FECh case   17:*/		cpu::op::li<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 82083FECh case   17:*/		return 0x82083FF0;
		  /* 82083FF0h */ case   18:  		/* cmplw CR6, R7, R6 */
		/* 82083FF0h case   18:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R6);
		/* 82083FF0h case   18:*/		return 0x82083FF4;
		  /* 82083FF4h */ case   19:  		/* bc 4, CR6_EQ, 44 */
		/* 82083FF4h case   19:*/		if ( !regs.CR[6].eq ) { return 0x82084020;  }
		/* 82083FF4h case   19:*/		return 0x82083FF8;
		  /* 82083FF8h */ case   20:  		/* subf R8, R30, R11 */
		/* 82083FF8h case   20:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R30,regs.R11);
		/* 82083FF8h case   20:*/		return 0x82083FFC;
		  /* 82083FFCh */ case   21:  		/* addi R11, R1, 96 */
		/* 82083FFCh case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 82083FFCh case   21:*/		return 0x82084000;
	}
	return 0x82084000;
} // Block from 82083FA8h-82084000h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82084000h
// Function '?DispatchCompletion@D3D@@YAPAKPAVCXpsGlobal@1@PAUD3DXpsThread@@PCK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084000);
		  /* 82084000h */ case    0:  		/* srawi R8, R8, 2 */
		/* 82084000h case    0:*/		cpu::op::srawi<0,2>(regs,&regs.R8,regs.R8);
		/* 82084000h case    0:*/		return 0x82084004;
		  /* 82084004h */ case    1:  		/* addi R9, R9, -1 */
		/* 82084004h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 82084004h case    1:*/		return 0x82084008;
		  /* 82084008h */ case    2:  		/* mulli R8, R8, 12 */
		/* 82084008h case    2:*/		cpu::op::mulli<0>(regs,&regs.R8,regs.R8,0xC);
		/* 82084008h case    2:*/		return 0x8208400C;
		  /* 8208400Ch */ case    3:  		/* lwzx R11, <#[R8 + R11]> */
		/* 8208400Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 8208400Ch case    3:*/		return 0x82084010;
		  /* 82084010h */ case    4:  		/* rlwinm R8, R11, 14, 25, 29 */
		/* 82084010h case    4:*/		cpu::op::rlwinm<0,14,25,29>(regs,&regs.R8,regs.R11);
		/* 82084010h case    4:*/		return 0x82084014;
		  /* 82084014h */ case    5:  		/* rlwinm R11, R11, 7, 30, 31 */
		/* 82084014h case    5:*/		cpu::op::rlwinm<0,7,30,31>(regs,&regs.R11,regs.R11);
		/* 82084014h case    5:*/		return 0x82084018;
		  /* 82084018h */ case    6:  		/* mr R4, R10 */
		/* 82084018h case    6:*/		regs.R4 = regs.R10;
		/* 82084018h case    6:*/		return 0x8208401C;
		  /* 8208401Ch */ case    7:  		/* or R29, R8, R11 */
		/* 8208401Ch case    7:*/		cpu::op::or<0>(regs,&regs.R29,regs.R8,regs.R11);
		/* 8208401Ch case    7:*/		return 0x82084020;
	}
	return 0x82084020;
} // Block from 82084000h-82084020h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82084020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084020);
		  /* 82084020h */ case    0:  		/* cmplwi CR6, R9, 0 */
		/* 82084020h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82084020h case    0:*/		return 0x82084024;
		  /* 82084024h */ case    1:  		/* bc 12, CR6_EQ, 236 */
		/* 82084024h case    1:*/		if ( regs.CR[6].eq ) { return 0x82084110;  }
		/* 82084024h case    1:*/		return 0x82084028;
		  /* 82084028h */ case    2:  		/* li R31, 1 */
		/* 82084028h case    2:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 82084028h case    2:*/		return 0x8208402C;
		  /* 8208402Ch */ case    3:  		/* mr R11, R3 */
		/* 8208402Ch case    3:*/		regs.R11 = regs.R3;
		/* 8208402Ch case    3:*/		return 0x82084030;
		  /* 82084030h */ case    4:  		/* cmplw CR6, R31, R4 */
		/* 82084030h case    4:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R4);
		/* 82084030h case    4:*/		return 0x82084034;
		  /* 82084034h */ case    5:  		/* bc 4, CR6_LT, 204 */
		/* 82084034h case    5:*/		if ( !regs.CR[6].lt ) { return 0x82084100;  }
		/* 82084034h case    5:*/		return 0x82084038;
		  /* 82084038h */ case    6:  		/* addi R10, R11, 12 */
		/* 82084038h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xC);
		/* 82084038h case    6:*/		return 0x8208403C;
		  /* 8208403Ch */ case    7:  		/* subf R28, R31, R4 */
		/* 8208403Ch case    7:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R31,regs.R4);
		/* 8208403Ch case    7:*/		return 0x82084040;
		  /* 82084040h */ case    8:  		/* lwz R8, <#[R11]> */
		/* 82084040h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82084040h case    8:*/		return 0x82084044;
		  /* 82084044h */ case    9:  		/* lwz R7, <#[R10]> */
		/* 82084044h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 82084044h case    9:*/		return 0x82084048;
		  /* 82084048h */ case   10:  		/* rlwinm R6, R8, 14, 25, 29 */
		/* 82084048h case   10:*/		cpu::op::rlwinm<0,14,25,29>(regs,&regs.R6,regs.R8);
		/* 82084048h case   10:*/		return 0x8208404C;
		  /* 8208404Ch */ case   11:  		/* rlwinm R8, R8, 7, 30, 31 */
		/* 8208404Ch case   11:*/		cpu::op::rlwinm<0,7,30,31>(regs,&regs.R8,regs.R8);
		/* 8208404Ch case   11:*/		return 0x82084050;
		  /* 82084050h */ case   12:  		/* rlwinm R24, R7, 14, 25, 29 */
		/* 82084050h case   12:*/		cpu::op::rlwinm<0,14,25,29>(regs,&regs.R24,regs.R7);
		/* 82084050h case   12:*/		return 0x82084054;
		  /* 82084054h */ case   13:  		/* rlwinm R22, R7, 7, 30, 31 */
		/* 82084054h case   13:*/		cpu::op::rlwinm<0,7,30,31>(regs,&regs.R22,regs.R7);
		/* 82084054h case   13:*/		return 0x82084058;
		  /* 82084058h */ case   14:  		/* or R7, R6, R8 */
		/* 82084058h case   14:*/		cpu::op::or<0>(regs,&regs.R7,regs.R6,regs.R8);
		/* 82084058h case   14:*/		return 0x8208405C;
		  /* 8208405Ch */ case   15:  		/* or R6, R24, R22 */
		/* 8208405Ch case   15:*/		cpu::op::or<0>(regs,&regs.R6,regs.R24,regs.R22);
		/* 8208405Ch case   15:*/		return 0x82084060;
		  /* 82084060h */ case   16:  		/* subf. R8, R7, R6 */
		/* 82084060h case   16:*/		cpu::op::subf<1>(regs,&regs.R8,regs.R7,regs.R6);
		/* 82084060h case   16:*/		return 0x82084064;
		  /* 82084064h */ case   17:  		/* bc 12, CR0_EQ, 28 */
		/* 82084064h case   17:*/		if ( regs.CR[0].eq ) { return 0x82084080;  }
		/* 82084064h case   17:*/		return 0x82084068;
		  /* 82084068h */ case   18:  		/* cmpw CR6, R29, R7 */
		/* 82084068h case   18:*/		cpu::op::cmpw<6>(regs,regs.R29,regs.R7);
		/* 82084068h case   18:*/		return 0x8208406C;
		  /* 8208406Ch */ case   19:  		/* bc 12, CR6_EQ, 88 */
		/* 8208406Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x820840C4;  }
		/* 8208406Ch case   19:*/		return 0x82084070;
		  /* 82084070h */ case   20:  		/* cmpw CR6, R29, R6 */
		/* 82084070h case   20:*/		cpu::op::cmpw<6>(regs,regs.R29,regs.R6);
		/* 82084070h case   20:*/		return 0x82084074;
		  /* 82084074h */ case   21:  		/* bc 4, CR6_EQ, 72 */
		/* 82084074h case   21:*/		if ( !regs.CR[6].eq ) { return 0x820840BC;  }
		/* 82084074h case   21:*/		return 0x82084078;
		  /* 82084078h */ case   22:  		/* li R8, -1 */
		/* 82084078h case   22:*/		cpu::op::li<0>(regs,&regs.R8,0xFFFFFFFF);
		/* 82084078h case   22:*/		return 0x8208407C;
		  /* 8208407Ch */ case   23:  		/* b 64 */
		/* 8208407Ch case   23:*/		return 0x820840BC;
		/* 8208407Ch case   23:*/		return 0x82084080;
	}
	return 0x82084080;
} // Block from 82084020h-82084080h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82084080h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084080);
		  /* 82084080h */ case    0:  		/* lwz R8, <#[R11 + 8]> */
		/* 82084080h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 82084080h case    0:*/		return 0x82084084;
		  /* 82084084h */ case    1:  		/* lwz R7, <#[R10 + 8]> */
		/* 82084084h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000008) );
		/* 82084084h case    1:*/		return 0x82084088;
		  /* 82084088h */ case    2:  		/* rlwinm R8, R8, 1, 0, 30 */
		/* 82084088h case    2:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R8,regs.R8);
		/* 82084088h case    2:*/		return 0x8208408C;
		  /* 8208408Ch */ case    3:  		/* rlwinm R7, R7, 1, 0, 30 */
		/* 8208408Ch case    3:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R7,regs.R7);
		/* 8208408Ch case    3:*/		return 0x82084090;
		  /* 82084090h */ case    4:  		/* srawi R8, R8, 9 */
		/* 82084090h case    4:*/		cpu::op::srawi<0,9>(regs,&regs.R8,regs.R8);
		/* 82084090h case    4:*/		return 0x82084094;
		  /* 82084094h */ case    5:  		/* srawi R7, R7, 9 */
		/* 82084094h case    5:*/		cpu::op::srawi<0,9>(regs,&regs.R7,regs.R7);
		/* 82084094h case    5:*/		return 0x82084098;
		  /* 82084098h */ case    6:  		/* subf. R8, R7, R8 */
		/* 82084098h case    6:*/		cpu::op::subf<1>(regs,&regs.R8,regs.R7,regs.R8);
		/* 82084098h case    6:*/		return 0x8208409C;
		  /* 8208409Ch */ case    7:  		/* bc 4, CR0_EQ, 32 */
		/* 8208409Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x820840BC;  }
		/* 8208409Ch case    7:*/		return 0x820840A0;
		  /* 820840A0h */ case    8:  		/* lhz R8, <#[R11 + 4]> */
		/* 820840A0h case    8:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 820840A0h case    8:*/		return 0x820840A4;
		  /* 820840A4h */ case    9:  		/* lhz R7, <#[R10 + 4]> */
		/* 820840A4h case    9:*/		cpu::mem::load16z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 820840A4h case    9:*/		return 0x820840A8;
		  /* 820840A8h */ case   10:  		/* rlwinm R8, R8, 0, 26, 31 */
		/* 820840A8h case   10:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R8,regs.R8);
		/* 820840A8h case   10:*/		return 0x820840AC;
		  /* 820840ACh */ case   11:  		/* rlwinm R7, R7, 0, 26, 31 */
		/* 820840ACh case   11:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R7,regs.R7);
		/* 820840ACh case   11:*/		return 0x820840B0;
		  /* 820840B0h */ case   12:  		/* lbzx R8, <#[R8 + R25]> */
		/* 820840B0h case   12:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R8 + regs.R25 + 0x00000000) );
		/* 820840B0h case   12:*/		return 0x820840B4;
		  /* 820840B4h */ case   13:  		/* lbzx R7, <#[R7 + R25]> */
		/* 820840B4h case   13:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R7 + regs.R25 + 0x00000000) );
		/* 820840B4h case   13:*/		return 0x820840B8;
		  /* 820840B8h */ case   14:  		/* subf R8, R7, R8 */
		/* 820840B8h case   14:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 820840B8h case   14:*/		return 0x820840BC;
	}
	return 0x820840BC;
} // Block from 82084080h-820840BCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 820840BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820840BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820840BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820840BC);
		  /* 820840BCh */ case    0:  		/* cmpwi CR6, R8, 0 */
		/* 820840BCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 820840BCh case    0:*/		return 0x820840C0;
		  /* 820840C0h */ case    1:  		/* bc 4, CR6_GT, 52 */
		/* 820840C0h case    1:*/		if ( !regs.CR[6].gt ) { return 0x820840F4;  }
		/* 820840C0h case    1:*/		return 0x820840C4;
	}
	return 0x820840C4;
} // Block from 820840BCh-820840C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820840C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820840C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820840C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820840C4);
		  /* 820840C4h */ case    0:  		/* lwz R8, <#[R10]> */
		/* 820840C4h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 820840C4h case    0:*/		return 0x820840C8;
		  /* 820840C8h */ case    1:  		/* lwz R7, <#[R11]> */
		/* 820840C8h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 820840C8h case    1:*/		return 0x820840CC;
		  /* 820840CCh */ case    2:  		/* lwz R6, <#[R11 + 4]> */
		/* 820840CCh case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 820840CCh case    2:*/		return 0x820840D0;
		  /* 820840D0h */ case    3:  		/* lwz R24, <#[R11 + 8]> */
		/* 820840D0h case    3:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R11 + 0x00000008) );
		/* 820840D0h case    3:*/		return 0x820840D4;
		  /* 820840D4h */ case    4:  		/* stw R8, <#[R11]> */
		/* 820840D4h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 820840D4h case    4:*/		return 0x820840D8;
		  /* 820840D8h */ case    5:  		/* lwz R8, <#[R10 + 4]> */
		/* 820840D8h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 820840D8h case    5:*/		return 0x820840DC;
		  /* 820840DCh */ case    6:  		/* stw R8, <#[R11 + 4]> */
		/* 820840DCh case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 820840DCh case    6:*/		return 0x820840E0;
		  /* 820840E0h */ case    7:  		/* lwz R8, <#[R10 + 8]> */
		/* 820840E0h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000008) );
		/* 820840E0h case    7:*/		return 0x820840E4;
		  /* 820840E4h */ case    8:  		/* stw R8, <#[R11 + 8]> */
		/* 820840E4h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 820840E4h case    8:*/		return 0x820840E8;
		  /* 820840E8h */ case    9:  		/* stw R7, <#[R10]> */
		/* 820840E8h case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 820840E8h case    9:*/		return 0x820840EC;
		  /* 820840ECh */ case   10:  		/* stw R6, <#[R10 + 4]> */
		/* 820840ECh case   10:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 820840ECh case   10:*/		return 0x820840F0;
		  /* 820840F0h */ case   11:  		/* stw R24, <#[R10 + 8]> */
		/* 820840F0h case   11:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R10 + 0x00000008) );
		/* 820840F0h case   11:*/		return 0x820840F4;
	}
	return 0x820840F4;
} // Block from 820840C4h-820840F4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820840F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820840F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820840F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820840F4);
		  /* 820840F4h */ case    0:  		/* addic. R28, R28, -1 */
		/* 820840F4h case    0:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 820840F4h case    0:*/		return 0x820840F8;
		  /* 820840F8h */ case    1:  		/* addi R10, R10, 12 */
		/* 820840F8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xC);
		/* 820840F8h case    1:*/		return 0x820840FC;
		  /* 820840FCh */ case    2:  		/* bc 4, CR0_EQ, -188 */
		/* 820840FCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x82084040;  }
		/* 820840FCh case    2:*/		return 0x82084100;
	}
	return 0x82084100;
} // Block from 820840F4h-82084100h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82084100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084100);
		  /* 82084100h */ case    0:  		/* addic. R9, R9, -1 */
		/* 82084100h case    0:*/		cpu::op::addic<1>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 82084100h case    0:*/		return 0x82084104;
		  /* 82084104h */ case    1:  		/* addi R11, R11, 12 */
		/* 82084104h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xC);
		/* 82084104h case    1:*/		return 0x82084108;
		  /* 82084108h */ case    2:  		/* addi R31, R31, 1 */
		/* 82084108h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82084108h case    2:*/		return 0x8208410C;
		  /* 8208410Ch */ case    3:  		/* bc 4, CR0_EQ, -220 */
		/* 8208410Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x82084030;  }
		/* 8208410Ch case    3:*/		return 0x82084110;
	}
	return 0x82084110;
} // Block from 82084100h-82084110h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82084110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084110);
		  /* 82084110h */ case    0:  		/* mulli R11, R5, 12 */
		/* 82084110h case    0:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R5,0xC);
		/* 82084110h case    0:*/		return 0x82084114;
		  /* 82084114h */ case    1:  		/* add R10, R11, R3 */
		/* 82084114h case    1:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R3);
		/* 82084114h case    1:*/		return 0x82084118;
		  /* 82084118h */ case    2:  		/* addi R11, R3, 12 */
		/* 82084118h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0xC);
		/* 82084118h case    2:*/		return 0x8208411C;
		  /* 8208411Ch */ case    3:  		/* mr R7, R3 */
		/* 8208411Ch case    3:*/		regs.R7 = regs.R3;
		/* 8208411Ch case    3:*/		return 0x82084120;
		  /* 82084120h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 82084120h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82084120h case    4:*/		return 0x82084124;
		  /* 82084124h */ case    5:  		/* bc 4, CR6_LT, -460 */
		/* 82084124h case    5:*/		if ( !regs.CR[6].lt ) { return 0x82083F58;  }
		/* 82084124h case    5:*/		return 0x82084128;
		  /* 82084128h */ case    6:  		/* subf R10, R11, R10 */
		/* 82084128h case    6:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 82084128h case    6:*/		return 0x8208412C;
		  /* 8208412Ch */ case    7:  		/* li R9, 12 */
		/* 8208412Ch case    7:*/		cpu::op::li<0>(regs,&regs.R9,0xC);
		/* 8208412Ch case    7:*/		return 0x82084130;
		  /* 82084130h */ case    8:  		/* addi R10, R10, -1 */
		/* 82084130h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82084130h case    8:*/		return 0x82084134;
		  /* 82084134h */ case    9:  		/* divwu R10, R10, R9 */
		/* 82084134h case    9:*/		cpu::op::divwu<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82084134h case    9:*/		return 0x82084138;
		  /* 82084138h */ case   10:  		/* addi R10, R10, 1 */
		/* 82084138h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82084138h case   10:*/		return 0x8208413C;
		  /* 8208413Ch */ case   11:  		/* mtspr CTR, R10 */
		/* 8208413Ch case   11:*/		regs.CTR = regs.R10;
		/* 8208413Ch case   11:*/		return 0x82084140;
		  /* 82084140h */ case   12:  		/* lwz R10, <#[R11]> */
		/* 82084140h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82084140h case   12:*/		return 0x82084144;
		  /* 82084144h */ case   13:  		/* lwz R8, <#[R7]> */
		/* 82084144h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R7 + 0x00000000) );
		/* 82084144h case   13:*/		return 0x82084148;
		  /* 82084148h */ case   14:  		/* mr R9, R10 */
		/* 82084148h case   14:*/		regs.R9 = regs.R10;
		/* 82084148h case   14:*/		return 0x8208414C;
		  /* 8208414Ch */ case   15:  		/* mr R6, R8 */
		/* 8208414Ch case   15:*/		regs.R6 = regs.R8;
		/* 8208414Ch case   15:*/		return 0x82084150;
		  /* 82084150h */ case   16:  		/* rlwimi R9, R10, 25, 12, 13 */
		/* 82084150h case   16:*/		cpu::op::rlwimi<0,25,12,13>(regs,&regs.R9,regs.R10);
		/* 82084150h case   16:*/		return 0x82084154;
		  /* 82084154h */ case   17:  		/* rlwimi R6, R8, 25, 12, 13 */
		/* 82084154h case   17:*/		cpu::op::rlwimi<0,25,12,13>(regs,&regs.R6,regs.R8);
		/* 82084154h case   17:*/		return 0x82084158;
		  /* 82084158h */ case   18:  		/* rlwinm R10, R9, 0, 7, 13 */
		/* 82084158h case   18:*/		cpu::op::rlwinm<0,0,7,13>(regs,&regs.R10,regs.R9);
		/* 82084158h case   18:*/		return 0x8208415C;
		  /* 8208415Ch */ case   19:  		/* rlwinm R9, R6, 0, 7, 13 */
		/* 8208415Ch case   19:*/		cpu::op::rlwinm<0,0,7,13>(regs,&regs.R9,regs.R6);
		/* 8208415Ch case   19:*/		return 0x82084160;
		  /* 82084160h */ case   20:  		/* cmplw CR6, R9, R10 */
		/* 82084160h case   20:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 82084160h case   20:*/		return 0x82084164;
		  /* 82084164h */ case   21:  		/* bc 4, CR6_EQ, 108 */
		/* 82084164h case   21:*/		if ( !regs.CR[6].eq ) { return 0x820841D0;  }
		/* 82084164h case   21:*/		return 0x82084168;
		  /* 82084168h */ case   22:  		/* lwz R10, <#[R7 + 8]> */
		/* 82084168h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000008) );
		/* 82084168h case   22:*/		return 0x8208416C;
		  /* 8208416Ch */ case   23:  		/* lwz R9, <#[R11 + 8]> */
		/* 8208416Ch case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 8208416Ch case   23:*/		return 0x82084170;
		  /* 82084170h */ case   24:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 82084170h case   24:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 82084170h case   24:*/		return 0x82084174;
		  /* 82084174h */ case   25:  		/* rlwinm R9, R9, 1, 0, 30 */
		/* 82084174h case   25:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R9);
		/* 82084174h case   25:*/		return 0x82084178;
		  /* 82084178h */ case   26:  		/* srawi R10, R10, 9 */
		/* 82084178h case   26:*/		cpu::op::srawi<0,9>(regs,&regs.R10,regs.R10);
		/* 82084178h case   26:*/		return 0x8208417C;
		  /* 8208417Ch */ case   27:  		/* srawi R9, R9, 9 */
		/* 8208417Ch case   27:*/		cpu::op::srawi<0,9>(regs,&regs.R9,regs.R9);
		/* 8208417Ch case   27:*/		return 0x82084180;
		  /* 82084180h */ case   28:  		/* cmplw CR6, R10, R9 */
		/* 82084180h case   28:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82084180h case   28:*/		return 0x82084184;
		  /* 82084184h */ case   29:  		/* bc 12, CR6_GT, 76 */
		/* 82084184h case   29:*/		if ( regs.CR[6].gt ) { return 0x820841D0;  }
		/* 82084184h case   29:*/		return 0x82084188;
		  /* 82084188h */ case   30:  		/* lhz R6, <#[R11 + 4]> */
		/* 82084188h case   30:*/		cpu::mem::load16z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 82084188h case   30:*/		return 0x8208418C;
		  /* 8208418Ch */ case   31:  		/* rlwinm R6, R6, 0, 26, 31 */
		/* 8208418Ch case   31:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R6,regs.R6);
		/* 8208418Ch case   31:*/		return 0x82084190;
		  /* 82084190h */ case   32:  		/* lbzx R6, <#[R6 + R25]> */
		/* 82084190h case   32:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R6 + regs.R25 + 0x00000000) );
		/* 82084190h case   32:*/		return 0x82084194;
		  /* 82084194h */ case   33:  		/* subf R10, R10, R6 */
		/* 82084194h case   33:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R6);
		/* 82084194h case   33:*/		return 0x82084198;
		  /* 82084198h */ case   34:  		/* add R10, R10, R9 */
		/* 82084198h case   34:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82084198h case   34:*/		return 0x8208419C;
		  /* 8208419Ch */ case   35:  		/* cmplwi CR6, R10, 8 */
		/* 8208419Ch case   35:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000008);
		/* 8208419Ch case   35:*/		return 0x820841A0;
		  /* 820841A0h */ case   36:  		/* bc 12, CR6_GT, 48 */
		/* 820841A0h case   36:*/		if ( regs.CR[6].gt ) { return 0x820841D0;  }
		/* 820841A0h case   36:*/		return 0x820841A4;
		  /* 820841A4h */ case   37:  		/* rlwinm R9, R8, 5, 29, 31 */
		/* 820841A4h case   37:*/		cpu::op::rlwinm<0,5,29,31>(regs,&regs.R9,regs.R8);
		/* 820841A4h case   37:*/		return 0x820841A8;
		  /* 820841A8h */ case   38:  		/* addi R10, R10, -1 */
		/* 820841A8h case   38:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 820841A8h case   38:*/		return 0x820841AC;
		  /* 820841ACh */ case   39:  		/* cmplw CR6, R9, R10 */
		/* 820841ACh case   39:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 820841ACh case   39:*/		return 0x820841B0;
		  /* 820841B0h */ case   40:  		/* bc 4, CR6_GT, 8 */
		/* 820841B0h case   40:*/		if ( !regs.CR[6].gt ) { return 0x820841B8;  }
		/* 820841B0h case   40:*/		return 0x820841B4;
		  /* 820841B4h */ case   41:  		/* mr R10, R9 */
		/* 820841B4h case   41:*/		regs.R10 = regs.R9;
		/* 820841B4h case   41:*/		return 0x820841B8;
	}
	return 0x820841B8;
} // Block from 82084110h-820841B8h (42 instructions)

//////////////////////////////////////////////////////
// Block at 820841B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820841B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820841B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820841B8);
		  /* 820841B8h */ case    0:  		/* rlwimi R8, R10, 27, 2, 4 */
		/* 820841B8h case    0:*/		cpu::op::rlwimi<0,27,2,4>(regs,&regs.R8,regs.R10);
		/* 820841B8h case    0:*/		return 0x820841BC;
		  /* 820841BCh */ case    1:  		/* stw R8, <#[R7]> */
		/* 820841BCh case    1:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000000) );
		/* 820841BCh case    1:*/		return 0x820841C0;
		  /* 820841C0h */ case    2:  		/* lwz R10, <#[R11 + 4]> */
		/* 820841C0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 820841C0h case    2:*/		return 0x820841C4;
		  /* 820841C4h */ case    3:  		/* oris R10, R10, 16384 */
		/* 820841C4h case    3:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x4000);
		/* 820841C4h case    3:*/		return 0x820841C8;
		  /* 820841C8h */ case    4:  		/* stw R10, <#[R11 + 4]> */
		/* 820841C8h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 820841C8h case    4:*/		return 0x820841CC;
		  /* 820841CCh */ case    5:  		/* b 8 */
		/* 820841CCh case    5:*/		return 0x820841D4;
		/* 820841CCh case    5:*/		return 0x820841D0;
	}
	return 0x820841D0;
} // Block from 820841B8h-820841D0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820841D0h
// Function '?DispatchWorker@D3D@@YAXPAUD3DXpsThread@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820841D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820841D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820841D0);
		  /* 820841D0h */ case    0:  		/* mr R7, R11 */
		/* 820841D0h case    0:*/		regs.R7 = regs.R11;
		/* 820841D0h case    0:*/		return 0x820841D4;
	}
	return 0x820841D4;
} // Block from 820841D0h-820841D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820841D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820841D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820841D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820841D4);
		  /* 820841D4h */ case    0:  		/* addi R11, R11, 12 */
		/* 820841D4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xC);
		/* 820841D4h case    0:*/		return 0x820841D8;
		  /* 820841D8h */ case    1:  		/* bc 16, CR0_LT, -152 */
		/* 820841D8h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82084140;  }
		/* 820841D8h case    1:*/		return 0x820841DC;
		  /* 820841DCh */ case    2:  		/* b -644 */
		/* 820841DCh case    2:*/		return 0x82083F58;
		/* 820841DCh case    2:*/		return 0x820841E0;
	}
	return 0x820841E0;
} // Block from 820841D4h-820841E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820841E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820841E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820841E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820841E0);
		  /* 820841E0h */ case    0:  		/* addi R31, R1, 96 */
		/* 820841E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0x60);
		/* 820841E0h case    0:*/		return 0x820841E4;
		  /* 820841E4h */ case    1:  		/* b 48 */
		/* 820841E4h case    1:*/		return 0x82084214;
		/* 820841E4h case    1:*/		return 0x820841E8;
		  /* 820841E8h */ case    2:  		/* lwz R11, <#[R30]> */
		/* 820841E8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 820841E8h case    2:*/		return 0x820841EC;
		  /* 820841ECh */ case    3:  		/* rlwinm R11, R11, 0, 20, 31 */
		/* 820841ECh case    3:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R11,regs.R11);
		/* 820841ECh case    3:*/		return 0x820841F0;
		  /* 820841F0h */ case    4:  		/* mulli R11, R11, 12 */
		/* 820841F0h case    4:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 820841F0h case    4:*/		return 0x820841F4;
		  /* 820841F4h */ case    5:  		/* add R3, R11, R23 */
		/* 820841F4h case    5:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R23);
		/* 820841F4h case    5:*/		return 0x820841F8;
		  /* 820841F8h */ case    6:  		/* cmplw CR6, R3, R31 */
		/* 820841F8h case    6:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R31);
		/* 820841F8h case    6:*/		return 0x820841FC;
		  /* 820841FCh */ case    7:  		/* bc 12, CR6_EQ, 16 */
		/* 820841FCh case    7:*/		if ( regs.CR[6].eq ) { return 0x8208420C;  }
		/* 820841FCh case    7:*/		return 0x82084200;
		  /* 82084200h */ case    8:  		/* li R5, 12 */
		/* 82084200h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 82084200h case    8:*/		return 0x82084204;
		  /* 82084204h */ case    9:  		/* mr R4, R31 */
		/* 82084204h case    9:*/		regs.R4 = regs.R31;
		/* 82084204h case    9:*/		return 0x82084208;
		  /* 82084208h */ case   10:  		/* bl 55208 */
		/* 82084208h case   10:*/		regs.LR = 0x8208420C; return 0x820919B0;
		/* 82084208h case   10:*/		return 0x8208420C;
	}
	return 0x8208420C;
} // Block from 820841E0h-8208420Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8208420Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208420C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208420C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208420C);
		  /* 8208420Ch */ case    0:  		/* addi R30, R30, 4 */
		/* 8208420Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8208420Ch case    0:*/		return 0x82084210;
		  /* 82084210h */ case    1:  		/* addi R31, R31, 12 */
		/* 82084210h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0xC);
		/* 82084210h case    1:*/		return 0x82084214;
	}
	return 0x82084214;
} // Block from 8208420Ch-82084214h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82084214h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084214( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084214) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084214);
		  /* 82084214h */ case    0:  		/* cmplw CR6, R30, R26 */
		/* 82084214h case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R26);
		/* 82084214h case    0:*/		return 0x82084218;
		  /* 82084218h */ case    1:  		/* bc 12, CR6_LT, -48 */
		/* 82084218h case    1:*/		if ( regs.CR[6].lt ) { return 0x820841E8;  }
		/* 82084218h case    1:*/		return 0x8208421C;
	}
	return 0x8208421C;
} // Block from 82084214h-8208421Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8208421Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208421C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208421C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208421C);
		  /* 8208421Ch */ case    0:  		/* addi R1, R1, 592 */
		/* 8208421Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x250);
		/* 8208421Ch case    0:*/		return 0x82084220;
		  /* 82084220h */ case    1:  		/* b 53352 */
		/* 82084220h case    1:*/		return 0x82091288;
		/* 82084220h case    1:*/		return 0x82084224;
		  /* 82084224h */ case    2:  		/* nop */
		/* 82084224h case    2:*/		cpu::op::nop();
		/* 82084224h case    2:*/		return 0x82084228;
	}
	return 0x82084228;
} // Block from 8208421Ch-82084228h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82084228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084228);
		  /* 82084228h */ case    0:  		/* mfspr R12, LR */
		/* 82084228h case    0:*/		regs.R12 = regs.LR;
		/* 82084228h case    0:*/		return 0x8208422C;
		  /* 8208422Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8208422Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208422Ch case    1:*/		return 0x82084230;
		  /* 82084230h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82084230h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82084230h case    2:*/		return 0x82084234;
		  /* 82084234h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82084234h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82084234h case    3:*/		return 0x82084238;
		  /* 82084238h */ case    4:  		/* stwu R1, <#[R1 - 128]> */
		/* 82084238h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82084238h case    4:*/		return 0x8208423C;
		  /* 8208423Ch */ case    5:  		/* addi R6, R1, 80 */
		/* 8208423Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8208423Ch case    5:*/		return 0x82084240;
		  /* 82084240h */ case    6:  		/* lwz R11, <#[R3 + 20]> */
		/* 82084240h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 82084240h case    6:*/		return 0x82084244;
		  /* 82084244h */ case    7:  		/* li R7, 0 */
		/* 82084244h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82084244h case    7:*/		return 0x82084248;
		  /* 82084248h */ case    8:  		/* lhz R8, <#[R5]> */
		/* 82084248h case    8:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R5 + 0x00000000) );
		/* 82084248h case    8:*/		return 0x8208424C;
		  /* 8208424Ch */ case    9:  		/* rlwinm R10, R11, 27, 27, 31 */
		/* 8208424Ch case    9:*/		cpu::op::rlwinm<0,27,27,31>(regs,&regs.R10,regs.R11);
		/* 8208424Ch case    9:*/		return 0x82084250;
		  /* 82084250h */ case   10:  		/* lwz R9, <#[R3 + 28]> */
		/* 82084250h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x0000001C) );
		/* 82084250h case   10:*/		return 0x82084254;
		  /* 82084254h */ case   11:  		/* rlwinm R11, R8, 0, 20, 31 */
		/* 82084254h case   11:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R11,regs.R8);
		/* 82084254h case   11:*/		return 0x82084258;
		  /* 82084258h */ case   12:  		/* lwz R8, <#[R3 + 24]> */
		/* 82084258h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000018) );
		/* 82084258h case   12:*/		return 0x8208425C;
		  /* 8208425Ch */ case   13:  		/* li R5, 1 */
		/* 8208425Ch case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8208425Ch case   13:*/		return 0x82084260;
		  /* 82084260h */ case   14:  		/* std R7, <#[R6]> */
		/* 82084260h case   14:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R6 + 0x00000000) );
		/* 82084260h case   14:*/		return 0x82084264;
		  /* 82084264h */ case   15:  		/* add R11, R10, R11 */
		/* 82084264h case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82084264h case   15:*/		return 0x82084268;
		  /* 82084268h */ case   16:  		/* stw R7, <#[R6 + 8]> */
		/* 82084268h case   16:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R6 + 0x00000008) );
		/* 82084268h case   16:*/		return 0x8208426C;
		  /* 8208426Ch */ case   17:  		/* mr R30, R4 */
		/* 8208426Ch case   17:*/		regs.R30 = regs.R4;
		/* 8208426Ch case   17:*/		return 0x82084270;
		  /* 82084270h */ case   18:  		/* add R11, R11, R9 */
		/* 82084270h case   18:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82084270h case   18:*/		return 0x82084274;
		  /* 82084274h */ case   19:  		/* add R11, R11, R8 */
		/* 82084274h case   19:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82084274h case   19:*/		return 0x82084278;
		  /* 82084278h */ case   20:  		/* addi R11, R11, 9 */
		/* 82084278h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x9);
		/* 82084278h case   20:*/		return 0x8208427C;
		  /* 8208427Ch */ case   21:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8208427Ch case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8208427Ch case   21:*/		return 0x82084280;
		  /* 82084280h */ case   22:  		/* add R31, R11, R3 */
		/* 82084280h case   22:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R3);
		/* 82084280h case   22:*/		return 0x82084284;
		  /* 82084284h */ case   23:  		/* lwz R11, <#[R1 + 88]> */
		/* 82084284h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 82084284h case   23:*/		return 0x82084288;
		  /* 82084288h */ case   24:  		/* lwz R10, <#[R1 + 80]> */
		/* 82084288h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82084288h case   24:*/		return 0x8208428C;
		  /* 8208428Ch */ case   25:  		/* rlwinm R10, R10, 0, 6, 31 */
		/* 8208428Ch case   25:*/		cpu::op::rlwinm<0,0,6,31>(regs,&regs.R10,regs.R10);
		/* 8208428Ch case   25:*/		return 0x82084290;
		  /* 82084290h */ case   26:  		/* rlwimi R11, R5, 25, 3, 7 */
		/* 82084290h case   26:*/		cpu::op::rlwimi<0,25,3,7>(regs,&regs.R11,regs.R5);
		/* 82084290h case   26:*/		return 0x82084294;
		  /* 82084294h */ case   27:  		/* oris R10, R10, 51200 */
		/* 82084294h case   27:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0xC800);
		/* 82084294h case   27:*/		return 0x82084298;
		  /* 82084298h */ case   28:  		/* stw R11, <#[R1 + 88]> */
		/* 82084298h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 82084298h case   28:*/		return 0x8208429C;
		  /* 8208429Ch */ case   29:  		/* stw R10, <#[R1 + 80]> */
		/* 8208429Ch case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8208429Ch case   29:*/		return 0x820842A0;
		  /* 820842A0h */ case   30:  		/* lwz R11, <#[R31]> */
		/* 820842A0h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820842A0h case   30:*/		return 0x820842A4;
		  /* 820842A4h */ case   31:  		/* addi R10, R1, 80 */
		/* 820842A4h case   31:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 820842A4h case   31:*/		return 0x820842A8;
		  /* 820842A8h */ case   32:  		/* rlwinm R11, R11, 0, 20, 31 */
		/* 820842A8h case   32:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R11,regs.R11);
		/* 820842A8h case   32:*/		return 0x820842AC;
		  /* 820842ACh */ case   33:  		/* mulli R11, R11, 12 */
		/* 820842ACh case   33:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 820842ACh case   33:*/		return 0x820842B0;
		  /* 820842B0h */ case   34:  		/* add R3, R11, R30 */
		/* 820842B0h case   34:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R30);
		/* 820842B0h case   34:*/		return 0x820842B4;
		  /* 820842B4h */ case   35:  		/* cmplw CR6, R3, R10 */
		/* 820842B4h case   35:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R10);
		/* 820842B4h case   35:*/		return 0x820842B8;
		  /* 820842B8h */ case   36:  		/* bc 12, CR6_EQ, 16 */
		/* 820842B8h case   36:*/		if ( regs.CR[6].eq ) { return 0x820842C8;  }
		/* 820842B8h case   36:*/		return 0x820842BC;
		  /* 820842BCh */ case   37:  		/* li R5, 12 */
		/* 820842BCh case   37:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 820842BCh case   37:*/		return 0x820842C0;
		  /* 820842C0h */ case   38:  		/* addi R4, R1, 80 */
		/* 820842C0h case   38:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 820842C0h case   38:*/		return 0x820842C4;
		  /* 820842C4h */ case   39:  		/* bl 55020 */
		/* 820842C4h case   39:*/		regs.LR = 0x820842C8; return 0x820919B0;
		/* 820842C4h case   39:*/		return 0x820842C8;
	}
	return 0x820842C8;
} // Block from 82084228h-820842C8h (40 instructions)

//////////////////////////////////////////////////////
// Block at 820842C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820842C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820842C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820842C8);
		  /* 820842C8h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 820842C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820842C8h case    0:*/		return 0x820842CC;
		  /* 820842CCh */ case    1:  		/* rlwinm. R11, R11, 0, 19, 19 */
		/* 820842CCh case    1:*/		cpu::op::rlwinm<1,0,19,19>(regs,&regs.R11,regs.R11);
		/* 820842CCh case    1:*/		return 0x820842D0;
		  /* 820842D0h */ case    2:  		/* bc 4, CR0_EQ, 12 */
		/* 820842D0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x820842DC;  }
		/* 820842D0h case    2:*/		return 0x820842D4;
		  /* 820842D4h */ case    3:  		/* addi R31, R31, 4 */
		/* 820842D4h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 820842D4h case    3:*/		return 0x820842D8;
		  /* 820842D8h */ case    4:  		/* b -56 */
		/* 820842D8h case    4:*/		return 0x820842A0;
		/* 820842D8h case    4:*/		return 0x820842DC;
	}
	return 0x820842DC;
} // Block from 820842C8h-820842DCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 820842DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820842DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820842DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820842DC);
		  /* 820842DCh */ case    0:  		/* addi R1, R1, 128 */
		/* 820842DCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820842DCh case    0:*/		return 0x820842E0;
		  /* 820842E0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820842E0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820842E0h case    1:*/		return 0x820842E4;
		  /* 820842E4h */ case    2:  		/* mtspr LR, R12 */
		/* 820842E4h case    2:*/		regs.LR = regs.R12;
		/* 820842E4h case    2:*/		return 0x820842E8;
		  /* 820842E8h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 820842E8h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820842E8h case    3:*/		return 0x820842EC;
		  /* 820842ECh */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 820842ECh case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820842ECh case    4:*/		return 0x820842F0;
		  /* 820842F0h */ case    5:  		/* bclr 20, CR0_LT */
		/* 820842F0h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820842F0h case    5:*/		return 0x820842F4;
	}
	return 0x820842F4;
} // Block from 820842DCh-820842F4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820842F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820842F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820842F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820842F4);
		  /* 820842F4h */ case    0:  		/* nop */
		/* 820842F4h case    0:*/		cpu::op::nop();
		/* 820842F4h case    0:*/		return 0x820842F8;
	}
	return 0x820842F8;
} // Block from 820842F4h-820842F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820842F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820842F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820842F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820842F8);
		  /* 820842F8h */ case    0:  		/* mfspr R12, LR */
		/* 820842F8h case    0:*/		regs.R12 = regs.LR;
		/* 820842F8h case    0:*/		return 0x820842FC;
		  /* 820842FCh */ case    1:  		/* bl 53084 */
		/* 820842FCh case    1:*/		regs.LR = 0x82084300; return 0x82091258;
		/* 820842FCh case    1:*/		return 0x82084300;
		  /* 82084300h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82084300h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82084300h case    2:*/		return 0x82084304;
		  /* 82084304h */ case    3:  		/* lwz R11, <#[R3 + 20]> */
		/* 82084304h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 82084304h case    3:*/		return 0x82084308;
		  /* 82084308h */ case    4:  		/* mr R29, R4 */
		/* 82084308h case    4:*/		regs.R29 = regs.R4;
		/* 82084308h case    4:*/		return 0x8208430C;
		  /* 8208430Ch */ case    5:  		/* lhz R10, <#[R5]> */
		/* 8208430Ch case    5:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000000) );
		/* 8208430Ch case    5:*/		return 0x82084310;
		  /* 82084310h */ case    6:  		/* mr R28, R6 */
		/* 82084310h case    6:*/		regs.R28 = regs.R6;
		/* 82084310h case    6:*/		return 0x82084314;
		  /* 82084314h */ case    7:  		/* rlwinm R9, R11, 27, 27, 31 */
		/* 82084314h case    7:*/		cpu::op::rlwinm<0,27,27,31>(regs,&regs.R9,regs.R11);
		/* 82084314h case    7:*/		return 0x82084318;
		  /* 82084318h */ case    8:  		/* lwz R8, <#[R3 + 28]> */
		/* 82084318h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x0000001C) );
		/* 82084318h case    8:*/		return 0x8208431C;
		  /* 8208431Ch */ case    9:  		/* rlwinm R11, R10, 0, 20, 31 */
		/* 8208431Ch case    9:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R11,regs.R10);
		/* 8208431Ch case    9:*/		return 0x82084320;
		  /* 82084320h */ case   10:  		/* lwz R10, <#[R3 + 24]> */
		/* 82084320h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000018) );
		/* 82084320h case   10:*/		return 0x82084324;
		  /* 82084324h */ case   11:  		/* add R11, R9, R11 */
		/* 82084324h case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82084324h case   11:*/		return 0x82084328;
		  /* 82084328h */ case   12:  		/* add R11, R11, R8 */
		/* 82084328h case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82084328h case   12:*/		return 0x8208432C;
		  /* 8208432Ch */ case   13:  		/* add R11, R11, R10 */
		/* 8208432Ch case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8208432Ch case   13:*/		return 0x82084330;
		  /* 82084330h */ case   14:  		/* addi R11, R11, 9 */
		/* 82084330h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x9);
		/* 82084330h case   14:*/		return 0x82084334;
		  /* 82084334h */ case   15:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82084334h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82084334h case   15:*/		return 0x82084338;
		  /* 82084338h */ case   16:  		/* add R30, R11, R3 */
		/* 82084338h case   16:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R3);
		/* 82084338h case   16:*/		return 0x8208433C;
		  /* 8208433Ch */ case   17:  		/* lwz R11, <#[R30]> */
		/* 8208433Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8208433Ch case   17:*/		return 0x82084340;
		  /* 82084340h */ case   18:  		/* addi R10, R1, 80 */
		/* 82084340h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 82084340h case   18:*/		return 0x82084344;
		  /* 82084344h */ case   19:  		/* rlwinm R11, R11, 0, 20, 31 */
		/* 82084344h case   19:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R11,regs.R11);
		/* 82084344h case   19:*/		return 0x82084348;
		  /* 82084348h */ case   20:  		/* mulli R11, R11, 12 */
		/* 82084348h case   20:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 82084348h case   20:*/		return 0x8208434C;
		  /* 8208434Ch */ case   21:  		/* add R31, R11, R29 */
		/* 8208434Ch case   21:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R29);
		/* 8208434Ch case   21:*/		return 0x82084350;
		  /* 82084350h */ case   22:  		/* cmplw CR6, R10, R31 */
		/* 82084350h case   22:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 82084350h case   22:*/		return 0x82084354;
		  /* 82084354h */ case   23:  		/* bc 12, CR6_EQ, 20 */
		/* 82084354h case   23:*/		if ( regs.CR[6].eq ) { return 0x82084368;  }
		/* 82084354h case   23:*/		return 0x82084358;
		  /* 82084358h */ case   24:  		/* li R5, 12 */
		/* 82084358h case   24:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 82084358h case   24:*/		return 0x8208435C;
		  /* 8208435Ch */ case   25:  		/* mr R4, R31 */
		/* 8208435Ch case   25:*/		regs.R4 = regs.R31;
		/* 8208435Ch case   25:*/		return 0x82084360;
		  /* 82084360h */ case   26:  		/* addi R3, R1, 80 */
		/* 82084360h case   26:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82084360h case   26:*/		return 0x82084364;
		  /* 82084364h */ case   27:  		/* bl 54860 */
		/* 82084364h case   27:*/		regs.LR = 0x82084368; return 0x820919B0;
		/* 82084364h case   27:*/		return 0x82084368;
	}
	return 0x82084368;
} // Block from 820842F8h-82084368h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82084368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084368);
		  /* 82084368h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 82084368h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82084368h case    0:*/		return 0x8208436C;
		  /* 8208436Ch */ case    1:  		/* addi R10, R1, 80 */
		/* 8208436Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 8208436Ch case    1:*/		return 0x82084370;
		  /* 82084370h */ case    2:  		/* lwz R9, <#[R28]> */
		/* 82084370h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000000) );
		/* 82084370h case    2:*/		return 0x82084374;
		  /* 82084374h */ case    3:  		/* cmplw CR6, R31, R10 */
		/* 82084374h case    3:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 82084374h case    3:*/		return 0x82084378;
		  /* 82084378h */ case    4:  		/* rlwimi R11, R9, 24, 28, 31 */
		/* 82084378h case    4:*/		cpu::op::rlwimi<0,24,28,31>(regs,&regs.R11,regs.R9);
		/* 82084378h case    4:*/		return 0x8208437C;
		  /* 8208437Ch */ case    5:  		/* stw R11, <#[R1 + 80]> */
		/* 8208437Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8208437Ch case    5:*/		return 0x82084380;
		  /* 82084380h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 82084380h case    6:*/		if ( regs.CR[6].eq ) { return 0x82084394;  }
		/* 82084380h case    6:*/		return 0x82084384;
		  /* 82084384h */ case    7:  		/* li R5, 12 */
		/* 82084384h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 82084384h case    7:*/		return 0x82084388;
		  /* 82084388h */ case    8:  		/* addi R4, R1, 80 */
		/* 82084388h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82084388h case    8:*/		return 0x8208438C;
		  /* 8208438Ch */ case    9:  		/* mr R3, R31 */
		/* 8208438Ch case    9:*/		regs.R3 = regs.R31;
		/* 8208438Ch case    9:*/		return 0x82084390;
		  /* 82084390h */ case   10:  		/* bl 54816 */
		/* 82084390h case   10:*/		regs.LR = 0x82084394; return 0x820919B0;
		/* 82084390h case   10:*/		return 0x82084394;
	}
	return 0x82084394;
} // Block from 82084368h-82084394h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82084394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084394);
		  /* 82084394h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 82084394h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82084394h case    0:*/		return 0x82084398;
		  /* 82084398h */ case    1:  		/* rlwinm. R11, R11, 0, 19, 19 */
		/* 82084398h case    1:*/		cpu::op::rlwinm<1,0,19,19>(regs,&regs.R11,regs.R11);
		/* 82084398h case    1:*/		return 0x8208439C;
		  /* 8208439Ch */ case    2:  		/* bc 4, CR0_EQ, 12 */
		/* 8208439Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x820843A8;  }
		/* 8208439Ch case    2:*/		return 0x820843A0;
		  /* 820843A0h */ case    3:  		/* addi R30, R30, 4 */
		/* 820843A0h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 820843A0h case    3:*/		return 0x820843A4;
		  /* 820843A4h */ case    4:  		/* b -104 */
		/* 820843A4h case    4:*/		return 0x8208433C;
		/* 820843A4h case    4:*/		return 0x820843A8;
	}
	return 0x820843A8;
} // Block from 82084394h-820843A8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820843A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820843A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820843A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820843A8);
		  /* 820843A8h */ case    0:  		/* addi R1, R1, 144 */
		/* 820843A8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 820843A8h case    0:*/		return 0x820843AC;
		  /* 820843ACh */ case    1:  		/* b 52988 */
		/* 820843ACh case    1:*/		return 0x820912A8;
		/* 820843ACh case    1:*/		return 0x820843B0;
	}
	return 0x820843B0;
} // Block from 820843A8h-820843B0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820843B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820843B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820843B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820843B0);
		  /* 820843B0h */ case    0:  		/* mfspr R12, LR */
		/* 820843B0h case    0:*/		regs.R12 = regs.LR;
		/* 820843B0h case    0:*/		return 0x820843B4;
		  /* 820843B4h */ case    1:  		/* bl 52876 */
		/* 820843B4h case    1:*/		regs.LR = 0x820843B8; return 0x82091240;
		/* 820843B4h case    1:*/		return 0x820843B8;
		  /* 820843B8h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 820843B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 820843B8h case    2:*/		return 0x820843BC;
		  /* 820843BCh */ case    3:  		/* lbz R11, <#[R3 + 8]> */
		/* 820843BCh case    3:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 820843BCh case    3:*/		return 0x820843C0;
		  /* 820843C0h */ case    4:  		/* mr R30, R3 */
		/* 820843C0h case    4:*/		regs.R30 = regs.R3;
		/* 820843C0h case    4:*/		return 0x820843C4;
		  /* 820843C4h */ case    5:  		/* mr R23, R4 */
		/* 820843C4h case    5:*/		regs.R23 = regs.R4;
		/* 820843C4h case    5:*/		return 0x820843C8;
		  /* 820843C8h */ case    6:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 820843C8h case    6:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 820843C8h case    6:*/		return 0x820843CC;
		  /* 820843CCh */ case    7:  		/* mr R22, R5 */
		/* 820843CCh case    7:*/		regs.R22 = regs.R5;
		/* 820843CCh case    7:*/		return 0x820843D0;
		  /* 820843D0h */ case    8:  		/* cmplwi CR6, R11, 7 */
		/* 820843D0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000007);
		/* 820843D0h case    8:*/		return 0x820843D4;
		  /* 820843D4h */ case    9:  		/* bc 12, CR6_EQ, 292 */
		/* 820843D4h case    9:*/		if ( regs.CR[6].eq ) { return 0x820844F8;  }
		/* 820843D4h case    9:*/		return 0x820843D8;
		  /* 820843D8h */ case   10:  		/* lwz R10, <#[R3 + 20]> */
		/* 820843D8h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000014) );
		/* 820843D8h case   10:*/		return 0x820843DC;
		  /* 820843DCh */ case   11:  		/* rlwinm. R11, R10, 0, 13, 13 */
		/* 820843DCh case   11:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R10);
		/* 820843DCh case   11:*/		return 0x820843E0;
		  /* 820843E0h */ case   12:  		/* bc 4, CR0_EQ, 280 */
		/* 820843E0h case   12:*/		if ( !regs.CR[0].eq ) { return 0x820844F8;  }
		/* 820843E0h case   12:*/		return 0x820843E4;
		  /* 820843E4h */ case   13:  		/* cmplwi CR6, R6, 0 */
		/* 820843E4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 820843E4h case   13:*/		return 0x820843E8;
		  /* 820843E8h */ case   14:  		/* bc 12, CR6_EQ, 16 */
		/* 820843E8h case   14:*/		if ( regs.CR[6].eq ) { return 0x820843F8;  }
		/* 820843E8h case   14:*/		return 0x820843EC;
		  /* 820843ECh */ case   15:  		/* lwz R11, <#[R6 + 20]> */
		/* 820843ECh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000014) );
		/* 820843ECh case   15:*/		return 0x820843F0;
		  /* 820843F0h */ case   16:  		/* rlwinm. R11, R11, 0, 14, 14 */
		/* 820843F0h case   16:*/		cpu::op::rlwinm<1,0,14,14>(regs,&regs.R11,regs.R11);
		/* 820843F0h case   16:*/		return 0x820843F4;
		  /* 820843F4h */ case   17:  		/* bc 4, CR0_EQ, 260 */
		/* 820843F4h case   17:*/		if ( !regs.CR[0].eq ) { return 0x820844F8;  }
		/* 820843F4h case   17:*/		return 0x820843F8;
	}
	return 0x820843F8;
} // Block from 820843B0h-820843F8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 820843F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820843F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820843F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820843F8);
		  /* 820843F8h */ case    0:  		/* rlwinm R26, R10, 27, 27, 31 */
		/* 820843F8h case    0:*/		cpu::op::rlwinm<0,27,27,31>(regs,&regs.R26,regs.R10);
		/* 820843F8h case    0:*/		return 0x820843FC;
		  /* 820843FCh */ case    1:  		/* lwz R11, <#[R30 + 28]> */
		/* 820843FCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 820843FCh case    1:*/		return 0x82084400;
		  /* 82084400h */ case    2:  		/* lwz R10, <#[R30 + 24]> */
		/* 82084400h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000018) );
		/* 82084400h case    2:*/		return 0x82084404;
		  /* 82084404h */ case    3:  		/* li R29, 0 */
		/* 82084404h case    3:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82084404h case    3:*/		return 0x82084408;
		  /* 82084408h */ case    4:  		/* cmplwi CR6, R6, 0 */
		/* 82084408h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 82084408h case    4:*/		return 0x8208440C;
		  /* 8208440Ch */ case    5:  		/* add R11, R11, R10 */
		/* 8208440Ch case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8208440Ch case    5:*/		return 0x82084410;
		  /* 82084410h */ case    6:  		/* addi R11, R11, 9 */
		/* 82084410h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x9);
		/* 82084410h case    6:*/		return 0x82084414;
		  /* 82084414h */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82084414h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82084414h case    7:*/		return 0x82084418;
		  /* 82084418h */ case    8:  		/* add R31, R11, R30 */
		/* 82084418h case    8:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R30);
		/* 82084418h case    8:*/		return 0x8208441C;
		  /* 8208441Ch */ case    9:  		/* bc 12, CR6_EQ, 32 */
		/* 8208441Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x8208443C;  }
		/* 8208441Ch case    9:*/		return 0x82084420;
		  /* 82084420h */ case   10:  		/* lwz R11, <#[R6 + 20]> */
		/* 82084420h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000014) );
		/* 82084420h case   10:*/		return 0x82084424;
		  /* 82084424h */ case   11:  		/* addi R28, R6, 32 */
		/* 82084424h case   11:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R6,0x20);
		/* 82084424h case   11:*/		return 0x82084428;
		  /* 82084428h */ case   12:  		/* rlwinm. R24, R11, 0, 27, 31 */
		/* 82084428h case   12:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R24,regs.R11);
		/* 82084428h case   12:*/		return 0x8208442C;
		  /* 8208442Ch */ case   13:  		/* rlwinm R11, R11, 27, 27, 31 */
		/* 8208442Ch case   13:*/		cpu::op::rlwinm<0,27,27,31>(regs,&regs.R11,regs.R11);
		/* 8208442Ch case   13:*/		return 0x82084430;
		  /* 82084430h */ case   14:  		/* bc 12, CR0_EQ, 24 */
		/* 82084430h case   14:*/		if ( regs.CR[0].eq ) { return 0x82084448;  }
		/* 82084430h case   14:*/		return 0x82084434;
		  /* 82084434h */ case   15:  		/* addi R24, R24, -1 */
		/* 82084434h case   15:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0xFFFFFFFF);
		/* 82084434h case   15:*/		return 0x82084438;
		  /* 82084438h */ case   16:  		/* b 16 */
		/* 82084438h case   16:*/		return 0x82084448;
		/* 82084438h case   16:*/		return 0x8208443C;
	}
	return 0x8208443C;
} // Block from 820843F8h-8208443Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8208443Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208443C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208443C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208443C);
		  /* 8208443Ch */ case    0:  		/* li R28, 0 */
		/* 8208443Ch case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8208443Ch case    0:*/		return 0x82084440;
		  /* 82084440h */ case    1:  		/* li R11, 0 */
		/* 82084440h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82084440h case    1:*/		return 0x82084444;
		  /* 82084444h */ case    2:  		/* li R24, 0 */
		/* 82084444h case    2:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 82084444h case    2:*/		return 0x82084448;
	}
	return 0x82084448;
} // Block from 8208443Ch-82084448h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82084448h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084448);
		  /* 82084448h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 82084448h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82084448h case    0:*/		return 0x8208444C;
		  /* 8208444Ch */ case    1:  		/* bc 12, CR6_EQ, 120 */
		/* 8208444Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x820844C4;  }
		/* 8208444Ch case    1:*/		return 0x82084450;
		  /* 82084450h */ case    2:  		/* mr R25, R11 */
		/* 82084450h case    2:*/		regs.R25 = regs.R11;
		/* 82084450h case    2:*/		return 0x82084454;
		  /* 82084454h */ case    3:  		/* lbz R27, <#[R28 + 3]> */
		/* 82084454h case    3:*/		cpu::mem::load8z( regs, &regs.R27, (uint32)(regs.R28 + 0x00000003) );
		/* 82084454h case    3:*/		return 0x82084458;
		  /* 82084458h */ case    4:  		/* b 40 */
		/* 82084458h case    4:*/		return 0x82084480;
		/* 82084458h case    4:*/		return 0x8208445C;
		  /* 8208445Ch */ case    5:  		/* lbz R11, <#[R31 + 3]> */
		/* 8208445Ch case    5:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000003) );
		/* 8208445Ch case    5:*/		return 0x82084460;
		  /* 82084460h */ case    6:  		/* cmplw CR6, R11, R27 */
		/* 82084460h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 82084460h case    6:*/		return 0x82084464;
		  /* 82084464h */ case    7:  		/* bc 4, CR6_LT, 36 */
		/* 82084464h case    7:*/		if ( !regs.CR[6].lt ) { return 0x82084488;  }
		/* 82084464h case    7:*/		return 0x82084468;
		  /* 82084468h */ case    8:  		/* mr R5, R31 */
		/* 82084468h case    8:*/		regs.R5 = regs.R31;
		/* 82084468h case    8:*/		return 0x8208446C;
		  /* 8208446Ch */ case    9:  		/* mr R4, R23 */
		/* 8208446Ch case    9:*/		regs.R4 = regs.R23;
		/* 8208446Ch case    9:*/		return 0x82084470;
		  /* 82084470h */ case   10:  		/* mr R3, R30 */
		/* 82084470h case   10:*/		regs.R3 = regs.R30;
		/* 82084470h case   10:*/		return 0x82084474;
		  /* 82084474h */ case   11:  		/* bl -588 */
		/* 82084474h case   11:*/		regs.LR = 0x82084478; return 0x82084228;
		/* 82084474h case   11:*/		return 0x82084478;
		  /* 82084478h */ case   12:  		/* addi R29, R29, 1 */
		/* 82084478h case   12:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82084478h case   12:*/		return 0x8208447C;
		  /* 8208447Ch */ case   13:  		/* addi R31, R31, 4 */
		/* 8208447Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8208447Ch case   13:*/		return 0x82084480;
	}
	return 0x82084480;
} // Block from 82084448h-82084480h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82084480h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084480( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084480) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084480);
		  /* 82084480h */ case    0:  		/* cmplw CR6, R29, R26 */
		/* 82084480h case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R26);
		/* 82084480h case    0:*/		return 0x82084484;
		  /* 82084484h */ case    1:  		/* bc 12, CR6_LT, -40 */
		/* 82084484h case    1:*/		if ( regs.CR[6].lt ) { return 0x8208445C;  }
		/* 82084484h case    1:*/		return 0x82084488;
	}
	return 0x82084488;
} // Block from 82084480h-82084488h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82084488h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084488);
		  /* 82084488h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82084488h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82084488h case    0:*/		return 0x8208448C;
		  /* 8208448Ch */ case    1:  		/* lwz R10, <#[R28]> */
		/* 8208448Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 8208448Ch case    1:*/		return 0x82084490;
	}
	return 0x82084490;
} // Block from 82084488h-82084490h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82084490h
// Function '?WorkerThread@D3D@@YAKPAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084490);
		  /* 82084490h */ case    0:  		/* xor R11, R11, R10 */
		/* 82084490h case    0:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82084490h case    0:*/		return 0x82084494;
		  /* 82084494h */ case    1:  		/* rlwinm. R11, R11, 0, 20, 23 */
		/* 82084494h case    1:*/		cpu::op::rlwinm<1,0,20,23>(regs,&regs.R11,regs.R11);
		/* 82084494h case    1:*/		return 0x82084498;
		  /* 82084498h */ case    2:  		/* bc 12, CR0_EQ, 24 */
		/* 82084498h case    2:*/		if ( regs.CR[0].eq ) { return 0x820844B0;  }
		/* 82084498h case    2:*/		return 0x8208449C;
		  /* 8208449Ch */ case    3:  		/* mr R6, R28 */
		/* 8208449Ch case    3:*/		regs.R6 = regs.R28;
		/* 8208449Ch case    3:*/		return 0x820844A0;
		  /* 820844A0h */ case    4:  		/* mr R5, R31 */
		/* 820844A0h case    4:*/		regs.R5 = regs.R31;
		/* 820844A0h case    4:*/		return 0x820844A4;
		  /* 820844A4h */ case    5:  		/* mr R4, R23 */
		/* 820844A4h case    5:*/		regs.R4 = regs.R23;
		/* 820844A4h case    5:*/		return 0x820844A8;
		  /* 820844A8h */ case    6:  		/* mr R3, R30 */
		/* 820844A8h case    6:*/		regs.R3 = regs.R30;
		/* 820844A8h case    6:*/		return 0x820844AC;
		  /* 820844ACh */ case    7:  		/* bl -436 */
		/* 820844ACh case    7:*/		regs.LR = 0x820844B0; return 0x820842F8;
		/* 820844ACh case    7:*/		return 0x820844B0;
	}
	return 0x820844B0;
} // Block from 82084490h-820844B0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820844B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820844B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820844B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820844B0);
		  /* 820844B0h */ case    0:  		/* addic. R25, R25, -1 */
		/* 820844B0h case    0:*/		cpu::op::addic<1>(regs,&regs.R25,regs.R25,0xFFFFFFFF);
		/* 820844B0h case    0:*/		return 0x820844B4;
		  /* 820844B4h */ case    1:  		/* addi R31, R31, 4 */
		/* 820844B4h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 820844B4h case    1:*/		return 0x820844B8;
		  /* 820844B8h */ case    2:  		/* addi R28, R28, 4 */
		/* 820844B8h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 820844B8h case    2:*/		return 0x820844BC;
		  /* 820844BCh */ case    3:  		/* addi R29, R29, 1 */
		/* 820844BCh case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 820844BCh case    3:*/		return 0x820844C0;
		  /* 820844C0h */ case    4:  		/* bc 4, CR0_EQ, -108 */
		/* 820844C0h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82084454;  }
		/* 820844C0h case    4:*/		return 0x820844C4;
	}
	return 0x820844C4;
} // Block from 820844B0h-820844C4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820844C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820844C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820844C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820844C4);
		  /* 820844C4h */ case    0:  		/* cmplw CR6, R29, R26 */
		/* 820844C4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R26);
		/* 820844C4h case    0:*/		return 0x820844C8;
		  /* 820844C8h */ case    1:  		/* bc 4, CR6_LT, 36 */
		/* 820844C8h case    1:*/		if ( !regs.CR[6].lt ) { return 0x820844EC;  }
		/* 820844C8h case    1:*/		return 0x820844CC;
		  /* 820844CCh */ case    2:  		/* subf R29, R29, R26 */
		/* 820844CCh case    2:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R29,regs.R26);
		/* 820844CCh case    2:*/		return 0x820844D0;
		  /* 820844D0h */ case    3:  		/* mr R5, R31 */
		/* 820844D0h case    3:*/		regs.R5 = regs.R31;
		/* 820844D0h case    3:*/		return 0x820844D4;
		  /* 820844D4h */ case    4:  		/* mr R4, R23 */
		/* 820844D4h case    4:*/		regs.R4 = regs.R23;
		/* 820844D4h case    4:*/		return 0x820844D8;
		  /* 820844D8h */ case    5:  		/* mr R3, R30 */
		/* 820844D8h case    5:*/		regs.R3 = regs.R30;
		/* 820844D8h case    5:*/		return 0x820844DC;
		  /* 820844DCh */ case    6:  		/* bl -692 */
		/* 820844DCh case    6:*/		regs.LR = 0x820844E0; return 0x82084228;
		/* 820844DCh case    6:*/		return 0x820844E0;
		  /* 820844E0h */ case    7:  		/* addic. R29, R29, -1 */
		/* 820844E0h case    7:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 820844E0h case    7:*/		return 0x820844E4;
		  /* 820844E4h */ case    8:  		/* addi R31, R31, 4 */
		/* 820844E4h case    8:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 820844E4h case    8:*/		return 0x820844E8;
		  /* 820844E8h */ case    9:  		/* bc 4, CR0_EQ, -24 */
		/* 820844E8h case    9:*/		if ( !regs.CR[0].eq ) { return 0x820844D0;  }
		/* 820844E8h case    9:*/		return 0x820844EC;
	}
	return 0x820844EC;
} // Block from 820844C4h-820844ECh (10 instructions)

//////////////////////////////////////////////////////
// Block at 820844ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820844EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820844EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820844EC);
		  /* 820844ECh */ case    0:  		/* lwz R11, <#[R22]> */
		/* 820844ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 820844ECh case    0:*/		return 0x820844F0;
		  /* 820844F0h */ case    1:  		/* rlwimi R11, R24, 20, 8, 11 */
		/* 820844F0h case    1:*/		cpu::op::rlwimi<0,20,8,11>(regs,&regs.R11,regs.R24);
		/* 820844F0h case    1:*/		return 0x820844F4;
		  /* 820844F4h */ case    2:  		/* stw R11, <#[R22]> */
		/* 820844F4h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 820844F4h case    2:*/		return 0x820844F8;
	}
	return 0x820844F8;
} // Block from 820844ECh-820844F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820844F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820844F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820844F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820844F8);
		  /* 820844F8h */ case    0:  		/* addi R1, R1, 176 */
		/* 820844F8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 820844F8h case    0:*/		return 0x820844FC;
		  /* 820844FCh */ case    1:  		/* b 52628 */
		/* 820844FCh case    1:*/		return 0x82091290;
		/* 820844FCh case    1:*/		return 0x82084500;
	}
	return 0x82084500;
} // Block from 820844F8h-82084500h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82084500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084500);
		  /* 82084500h */ case    0:  		/* mfspr R12, LR */
		/* 82084500h case    0:*/		regs.R12 = regs.LR;
		/* 82084500h case    0:*/		return 0x82084504;
		  /* 82084504h */ case    1:  		/* bl 52528 */
		/* 82084504h case    1:*/		regs.LR = 0x82084508; return 0x82091234;
		/* 82084504h case    1:*/		return 0x82084508;
		  /* 82084508h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82084508h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82084508h case    2:*/		return 0x8208450C;
		  /* 8208450Ch */ case    3:  		/* addi R11, R10, 112 */
		/* 8208450Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x70);
		/* 8208450Ch case    3:*/		return 0x82084510;
		  /* 82084510h */ case    4:  		/* mr R25, R4 */
		/* 82084510h case    4:*/		regs.R25 = regs.R4;
		/* 82084510h case    4:*/		return 0x82084514;
		  /* 82084514h */ case    5:  		/* rlwinm R29, R11, 3, 0, 28 */
		/* 82084514h case    5:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R29,regs.R11);
		/* 82084514h case    5:*/		return 0x82084518;
		  /* 82084518h */ case    6:  		/* mr R30, R3 */
		/* 82084518h case    6:*/		regs.R30 = regs.R3;
		/* 82084518h case    6:*/		return 0x8208451C;
		  /* 8208451Ch */ case    7:  		/* mr R31, R5 */
		/* 8208451Ch case    7:*/		regs.R31 = regs.R5;
		/* 8208451Ch case    7:*/		return 0x82084520;
		  /* 82084520h */ case    8:  		/* mr R21, R6 */
		/* 82084520h case    8:*/		regs.R21 = regs.R6;
		/* 82084520h case    8:*/		return 0x82084524;
		  /* 82084524h */ case    9:  		/* mr R22, R7 */
		/* 82084524h case    9:*/		regs.R22 = regs.R7;
		/* 82084524h case    9:*/		return 0x82084528;
		  /* 82084528h */ case   10:  		/* lwzx R11, <#[R29 + R5]> */
		/* 82084528h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + regs.R5 + 0x00000000) );
		/* 82084528h case   10:*/		return 0x8208452C;
		  /* 8208452Ch */ case   11:  		/* mr R20, R8 */
		/* 8208452Ch case   11:*/		regs.R20 = regs.R8;
		/* 8208452Ch case   11:*/		return 0x82084530;
		  /* 82084530h */ case   12:  		/* mr R19, R9 */
		/* 82084530h case   12:*/		regs.R19 = regs.R9;
		/* 82084530h case   12:*/		return 0x82084534;
		  /* 82084534h */ case   13:  		/* add R11, R11, R5 */
		/* 82084534h case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R5);
		/* 82084534h case   13:*/		return 0x82084538;
		  /* 82084538h */ case   14:  		/* mr R23, R10 */
		/* 82084538h case   14:*/		regs.R23 = regs.R10;
		/* 82084538h case   14:*/		return 0x8208453C;
		  /* 8208453Ch */ case   15:  		/* lwz R27, <#[R11 + 876]> */
		/* 8208453Ch case   15:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x0000036C) );
		/* 8208453Ch case   15:*/		return 0x82084540;
		  /* 82084540h */ case   16:  		/* rlwinm R28, R27, 30, 2, 31 */
		/* 82084540h case   16:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R28,regs.R27);
		/* 82084540h case   16:*/		return 0x82084544;
		  /* 82084544h */ case   17:  		/* addi R4, R28, 5 */
		/* 82084544h case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R28,0x5);
		/* 82084544h case   17:*/		return 0x82084548;
		  /* 82084548h */ case   18:  		/* bl -66056 */
		/* 82084548h case   18:*/		regs.LR = 0x8208454C; return 0x82074340;
		/* 82084548h case   18:*/		return 0x8208454C;
		  /* 8208454Ch */ case   19:  		/* cmplwi CR0, R3, 0 */
		/* 8208454Ch case   19:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8208454Ch case   19:*/		return 0x82084550;
		  /* 82084550h */ case   20:  		/* bc 12, CR0_EQ, 252 */
		/* 82084550h case   20:*/		if ( regs.CR[0].eq ) { return 0x8208464C;  }
		/* 82084550h case   20:*/		return 0x82084554;
		  /* 82084554h */ case   21:  		/* lis R11, -16384 */
		/* 82084554h case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC000);
		/* 82084554h case   21:*/		return 0x82084558;
		  /* 82084558h */ case   22:  		/* li R10, 256 */
		/* 82084558h case   22:*/		cpu::op::li<0>(regs,&regs.R10,0x100);
		/* 82084558h case   22:*/		return 0x8208455C;
		  /* 8208455Ch */ case   23:  		/* ori R9, R11, 15104 */
		/* 8208455Ch case   23:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R11,0x3B00);
		/* 8208455Ch case   23:*/		return 0x82084560;
		  /* 82084560h */ case   24:  		/* addi R11, R28, 2 */
		/* 82084560h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x2);
		/* 82084560h case   24:*/		return 0x82084564;
		  /* 82084564h */ case   25:  		/* stwu R9, <#[R3 + 4]> */
		/* 82084564h case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82084564h case   25:*/		return 0x82084568;
		  /* 82084568h */ case   26:  		/* lis R9, -16384 */
		/* 82084568h case   26:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFFC000);
		/* 82084568h case   26:*/		return 0x8208456C;
		  /* 8208456Ch */ case   27:  		/* addi R11, R11, -1 */
		/* 8208456Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8208456Ch case   27:*/		return 0x82084570;
		  /* 82084570h */ case   28:  		/* ori R9, R9, 11008 */
		/* 82084570h case   28:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x2B00);
		/* 82084570h case   28:*/		return 0x82084574;
		  /* 82084574h */ case   29:  		/* li R8, 0 */
		/* 82084574h case   29:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82084574h case   29:*/		return 0x82084578;
		  /* 82084578h */ case   30:  		/* rlwimi R9, R11, 16, 2, 15 */
		/* 82084578h case   30:*/		cpu::op::rlwimi<0,16,2,15>(regs,&regs.R9,regs.R11);
		/* 82084578h case   30:*/		return 0x8208457C;
		  /* 8208457Ch */ case   31:  		/* stwu R10, <#[R3 + 4]> */
		/* 8208457Ch case   31:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8208457Ch case   31:*/		return 0x82084580;
		  /* 82084580h */ case   32:  		/* rlwinm R11, R28, 0, 18, 31 */
		/* 82084580h case   32:*/		cpu::op::rlwinm<0,0,18,31>(regs,&regs.R11,regs.R28);
		/* 82084580h case   32:*/		return 0x82084584;
		  /* 82084584h */ case   33:  		/* stwu R9, <#[R3 + 4]> */
		/* 82084584h case   33:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82084584h case   33:*/		return 0x82084588;
		  /* 82084588h */ case   34:  		/* stwu R8, <#[R3 + 4]> */
		/* 82084588h case   34:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82084588h case   34:*/		return 0x8208458C;
		  /* 8208458Ch */ case   35:  		/* mr R24, R3 */
		/* 8208458Ch case   35:*/		regs.R24 = regs.R3;
		/* 8208458Ch case   35:*/		return 0x82084590;
		  /* 82084590h */ case   36:  		/* stwu R11, <#[R24 + 4]> */
		/* 82084590h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000004) );
		regs.R24 = (uint32)(regs.R24 + 0x00000004);
		/* 82084590h case   36:*/		return 0x82084594;
		  /* 82084594h */ case   37:  		/* lwzx R11, <#[R29 + R31]> */
		/* 82084594h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + regs.R31 + 0x00000000) );
		/* 82084594h case   37:*/		return 0x82084598;
		  /* 82084598h */ case   38:  		/* lwz R10, <#[R31 + 32]> */
		/* 82084598h case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000020) );
		/* 82084598h case   38:*/		return 0x8208459C;
		  /* 8208459Ch */ case   39:  		/* addi R26, R24, 4 */
		/* 8208459Ch case   39:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R24,0x4);
		/* 8208459Ch case   39:*/		return 0x820845A0;
		  /* 820845A0h */ case   40:  		/* add R11, R11, R31 */
		/* 820845A0h case   40:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 820845A0h case   40:*/		return 0x820845A4;
		  /* 820845A4h */ case   41:  		/* lwz R11, <#[R11 + 872]> */
		/* 820845A4h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000368) );
		/* 820845A4h case   41:*/		return 0x820845A8;
		  /* 820845A8h */ case   42:  		/* add R11, R11, R10 */
		/* 820845A8h case   42:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 820845A8h case   42:*/		return 0x820845AC;
		  /* 820845ACh */ case   43:  		/* rlwinm R9, R11, 12, 20, 31 */
		/* 820845ACh case   43:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R9,regs.R11);
		/* 820845ACh case   43:*/		return 0x820845B0;
		  /* 820845B0h */ case   44:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 820845B0h case   44:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 820845B0h case   44:*/		return 0x820845B4;
		  /* 820845B4h */ case   45:  		/* addi R11, R9, 512 */
		/* 820845B4h case   45:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0x200);
		/* 820845B4h case   45:*/		return 0x820845B8;
		  /* 820845B8h */ case   46:  		/* rlwinm R11, R11, 0, 19, 19 */
		/* 820845B8h case   46:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R11,regs.R11);
		/* 820845B8h case   46:*/		return 0x820845BC;
		  /* 820845BCh */ case   47:  		/* add R11, R11, R10 */
		/* 820845BCh case   47:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 820845BCh case   47:*/		return 0x820845C0;
		  /* 820845C0h */ case   48:  		/* addis R29, R11, -16384 */
		/* 820845C0h case   48:*/		cpu::op::addis<0>(regs,&regs.R29,regs.R11,0xFFFFC000);
		/* 820845C0h case   48:*/		return 0x820845C4;
		  /* 820845C4h */ case   49:  		/* sync */
		/* 820845C4h case   49:*/		cpu::op::sync<0>(regs);
		/* 820845C4h case   49:*/		return 0x820845C8;
		  /* 820845C8h */ case   50:  		/* mr R4, R29 */
		/* 820845C8h case   50:*/		regs.R4 = regs.R29;
		/* 820845C8h case   50:*/		return 0x820845CC;
		  /* 820845CCh */ case   51:  		/* mr R5, R27 */
		/* 820845CCh case   51:*/		regs.R5 = regs.R27;
		/* 820845CCh case   51:*/		return 0x820845D0;
		  /* 820845D0h */ case   52:  		/* mr R3, R26 */
		/* 820845D0h case   52:*/		regs.R3 = regs.R26;
		/* 820845D0h case   52:*/		return 0x820845D4;
		  /* 820845D4h */ case   53:  		/* bl 54236 */
		/* 820845D4h case   53:*/		regs.LR = 0x820845D8; return 0x820919B0;
		/* 820845D4h case   53:*/		return 0x820845D8;
		  /* 820845D8h */ case   54:  		/* add R4, R29, R27 */
		/* 820845D8h case   54:*/		cpu::op::add<0>(regs,&regs.R4,regs.R29,regs.R27);
		/* 820845D8h case   54:*/		return 0x820845DC;
		  /* 820845DCh */ case   55:  		/* li R5, 0 */
		/* 820845DCh case   55:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820845DCh case   55:*/		return 0x820845E0;
		  /* 820845E0h */ case   56:  		/* mr R3, R29 */
		/* 820845E0h case   56:*/		regs.R3 = regs.R29;
		/* 820845E0h case   56:*/		return 0x820845E4;
		  /* 820845E4h */ case   57:  		/* bl 3044 */
		/* 820845E4h case   57:*/		regs.LR = 0x820845E8; return 0x820851C8;
		/* 820845E4h case   57:*/		return 0x820845E8;
		  /* 820845E8h */ case   58:  		/* cmpwi CR6, R25, 0 */
		/* 820845E8h case   58:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 820845E8h case   58:*/		return 0x820845EC;
		  /* 820845ECh */ case   59:  		/* bc 12, CR6_EQ, 24 */
		/* 820845ECh case   59:*/		if ( regs.CR[6].eq ) { return 0x82084604;  }
		/* 820845ECh case   59:*/		return 0x820845F0;
		  /* 820845F0h */ case   60:  		/* mr R6, R19 */
		/* 820845F0h case   60:*/		regs.R6 = regs.R19;
		/* 820845F0h case   60:*/		return 0x820845F4;
		  /* 820845F4h */ case   61:  		/* mr R5, R21 */
		/* 820845F4h case   61:*/		regs.R5 = regs.R21;
		/* 820845F4h case   61:*/		return 0x820845F8;
		  /* 820845F8h */ case   62:  		/* mr R4, R26 */
		/* 820845F8h case   62:*/		regs.R4 = regs.R26;
		/* 820845F8h case   62:*/		return 0x820845FC;
		  /* 820845FCh */ case   63:  		/* mr R3, R20 */
		/* 820845FCh case   63:*/		regs.R3 = regs.R20;
		/* 820845FCh case   63:*/		return 0x82084600;
		  /* 82084600h */ case   64:  		/* bl -592 */
		/* 82084600h case   64:*/		regs.LR = 0x82084604; return 0x820843B0;
		/* 82084600h case   64:*/		return 0x82084604;
	}
	return 0x82084604;
} // Block from 82084500h-82084604h (65 instructions)

//////////////////////////////////////////////////////
// Block at 82084604h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084604( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084604) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084604);
		  /* 82084604h */ case    0:  		/* addic R11, R25, -1 */
		/* 82084604h case    0:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R25,0xFFFFFFFF);
		/* 82084604h case    0:*/		return 0x82084608;
		  /* 82084608h */ case    1:  		/* lbz R10, <#[R30 + 11070]> */
		/* 82084608h case    1:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R30 + 0x00002B3E) );
		/* 82084608h case    1:*/		return 0x8208460C;
		  /* 8208460Ch */ case    2:  		/* addi R6, R30, 12904 */
		/* 8208460Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R30,0x3268);
		/* 8208460Ch case    2:*/		return 0x82084610;
		  /* 82084610h */ case    3:  		/* subfe R11, R11, R25 */
		/* 82084610h case    3:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R25);
		/* 82084610h case    3:*/		return 0x82084614;
		  /* 82084614h */ case    4:  		/* mr R7, R23 */
		/* 82084614h case    4:*/		regs.R7 = regs.R23;
		/* 82084614h case    4:*/		return 0x82084618;
		  /* 82084618h */ case    5:  		/* rlwimi R10, R11, 7, 24, 24 */
		/* 82084618h case    5:*/		cpu::op::rlwimi<0,7,24,24>(regs,&regs.R10,regs.R11);
		/* 82084618h case    5:*/		return 0x8208461C;
		  /* 8208461Ch */ case    6:  		/* mr R5, R22 */
		/* 8208461Ch case    6:*/		regs.R5 = regs.R22;
		/* 8208461Ch case    6:*/		return 0x82084620;
		  /* 82084620h */ case    7:  		/* stb R10, <#[R30 + 11070]> */
		/* 82084620h case    7:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R30 + 0x00002B3E) );
		/* 82084620h case    7:*/		return 0x82084624;
		  /* 82084624h */ case    8:  		/* mr R4, R26 */
		/* 82084624h case    8:*/		regs.R4 = regs.R26;
		/* 82084624h case    8:*/		return 0x82084628;
		  /* 82084628h */ case    9:  		/* mr R3, R31 */
		/* 82084628h case    9:*/		regs.R3 = regs.R31;
		/* 82084628h case    9:*/		return 0x8208462C;
		  /* 8208462Ch */ case   10:  		/* bl -2604 */
		/* 8208462Ch case   10:*/		regs.LR = 0x82084630; return 0x82083C00;
		/* 8208462Ch case   10:*/		return 0x82084630;
		  /* 82084630h */ case   11:  		/* rlwinm R11, R28, 2, 0, 29 */
		/* 82084630h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R28);
		/* 82084630h case   11:*/		return 0x82084634;
		  /* 82084634h */ case   12:  		/* ld R10, <#[R30 + 12912]> */
		/* 82084634h case   12:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R30 + 0x00003270) );
		/* 82084634h case   12:*/		return 0x82084638;
	}
	return 0x82084638;
} // Block from 82084604h-82084638h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82084638h
// Function '?KickOffWorkerThreadDpc@D3D@@YAXPAU_KDPC@@PAX11@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084638);
		  /* 82084638h */ case    0:  		/* add R11, R11, R24 */
		/* 82084638h case    0:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R24);
		/* 82084638h case    0:*/		return 0x8208463C;
		  /* 8208463Ch */ case    1:  		/* stw R11, <#[R30 + 48]> */
		/* 8208463Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 8208463Ch case    1:*/		return 0x82084640;
		  /* 82084640h */ case    2:  		/* std R10, <#[R30 + 12272]> */
		/* 82084640h case    2:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R30 + 0x00002FF0) );
		/* 82084640h case    2:*/		return 0x82084644;
		  /* 82084644h */ case    3:  		/* ld R11, <#[R30 + 12904]> */
		/* 82084644h case    3:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R30 + 0x00003268) );
		/* 82084644h case    3:*/		return 0x82084648;
		  /* 82084648h */ case    4:  		/* std R11, <#[R30 + 12264]> */
		/* 82084648h case    4:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R30 + 0x00002FE8) );
		/* 82084648h case    4:*/		return 0x8208464C;
	}
	return 0x8208464C;
} // Block from 82084638h-8208464Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8208464Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208464C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208464C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208464C);
		  /* 8208464Ch */ case    0:  		/* addi R1, R1, 192 */
		/* 8208464Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8208464Ch case    0:*/		return 0x82084650;
		  /* 82084650h */ case    1:  		/* b 52276 */
		/* 82084650h case    1:*/		return 0x82091284;
		/* 82084650h case    1:*/		return 0x82084654;
		  /* 82084654h */ case    2:  		/* nop */
		/* 82084654h case    2:*/		cpu::op::nop();
		/* 82084654h case    2:*/		return 0x82084658;
	}
	return 0x82084658;
} // Block from 8208464Ch-82084658h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82084658h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084658);
		  /* 82084658h */ case    0:  		/* mfspr R12, LR */
		/* 82084658h case    0:*/		regs.R12 = regs.LR;
		/* 82084658h case    0:*/		return 0x8208465C;
		  /* 8208465Ch */ case    1:  		/* bl 52208 */
		/* 8208465Ch case    1:*/		regs.LR = 0x82084660; return 0x8209124C;
		/* 8208465Ch case    1:*/		return 0x82084660;
		  /* 82084660h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82084660h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82084660h case    2:*/		return 0x82084664;
		  /* 82084664h */ case    3:  		/* lwz R11, <#[R4 + 20]> */
		/* 82084664h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000014) );
		/* 82084664h case    3:*/		return 0x82084668;
		  /* 82084668h */ case    4:  		/* mr R29, R3 */
		/* 82084668h case    4:*/		regs.R29 = regs.R3;
		/* 82084668h case    4:*/		return 0x8208466C;
		  /* 8208466Ch */ case    5:  		/* mr R25, R5 */
		/* 8208466Ch case    5:*/		regs.R25 = regs.R5;
		/* 8208466Ch case    5:*/		return 0x82084670;
	}
	return 0x82084670;
} // Block from 82084658h-82084670h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82084670h
// Function '?InitializeXps@D3D@@YAHPAVCDevice@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084670);
		  /* 82084670h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 82084670h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82084670h case    0:*/		return 0x82084674;
		  /* 82084674h */ case    1:  		/* bc 12, CR6_EQ, 140 */
		/* 82084674h case    1:*/		if ( regs.CR[6].eq ) { return 0x82084700;  }
		/* 82084674h case    1:*/		return 0x82084678;
		  /* 82084678h */ case    2:  		/* add R11, R11, R4 */
		/* 82084678h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 82084678h case    2:*/		return 0x8208467C;
		  /* 8208467Ch */ case    3:  		/* addi R31, R11, 20 */
		/* 8208467Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x14);
		/* 8208467Ch case    3:*/		return 0x82084680;
		  /* 82084680h */ case    4:  		/* lwz R11, <#[R11 + 16]> */
		/* 82084680h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82084680h case    4:*/		return 0x82084684;
		  /* 82084684h */ case    5:  		/* add R27, R11, R31 */
		/* 82084684h case    5:*/		cpu::op::add<0>(regs,&regs.R27,regs.R11,regs.R31);
		/* 82084684h case    5:*/		return 0x82084688;
		  /* 82084688h */ case    6:  		/* b 112 */
		/* 82084688h case    6:*/		return 0x820846F8;
		/* 82084688h case    6:*/		return 0x8208468C;
		  /* 8208468Ch */ case    7:  		/* lhz R28, <#[R31 + 2]> */
		/* 8208468Ch case    7:*/		cpu::mem::load16z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000002) );
		/* 8208468Ch case    7:*/		return 0x82084690;
		  /* 82084690h */ case    8:  		/* addi R11, R31, 4 */
		/* 82084690h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 82084690h case    8:*/		return 0x82084694;
		  /* 82084694h */ case    9:  		/* lhz R26, <#[R31]> */
		/* 82084694h case    9:*/		cpu::mem::load16z( regs, &regs.R26, (uint32)(regs.R31 + 0x00000000) );
		/* 82084694h case    9:*/		return 0x82084698;
		  /* 82084698h */ case   10:  		/* cmplwi CR0, R28, 0 */
		/* 82084698h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R28,0x00000000);
		/* 82084698h case   10:*/		return 0x8208469C;
		  /* 8208469Ch */ case   11:  		/* bc 12, CR0_EQ, 100 */
		/* 8208469Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x82084700;  }
		/* 8208469Ch case   11:*/		return 0x820846A0;
		  /* 820846A0h */ case   12:  		/* lwz R10, <#[R11]> */
		/* 820846A0h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 820846A0h case   12:*/		return 0x820846A4;
		  /* 820846A4h */ case   13:  		/* addi R31, R11, 4 */
		/* 820846A4h case   13:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 820846A4h case   13:*/		return 0x820846A8;
		  /* 820846A8h */ case   14:  		/* lwz R11, <#[R29 + 56]> */
		/* 820846A8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000038) );
		/* 820846A8h case   14:*/		return 0x820846AC;
		  /* 820846ACh */ case   15:  		/* lwz R3, <#[R29 + 48]> */
		/* 820846ACh case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000030) );
		/* 820846ACh case   15:*/		return 0x820846B0;
		  /* 820846B0h */ case   16:  		/* add R30, R10, R25 */
		/* 820846B0h case   16:*/		cpu::op::add<0>(regs,&regs.R30,regs.R10,regs.R25);
		/* 820846B0h case   16:*/		return 0x820846B4;
		  /* 820846B4h */ case   17:  		/* cmplw CR6, R3, R11 */
		/* 820846B4h case   17:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 820846B4h case   17:*/		return 0x820846B8;
		  /* 820846B8h */ case   18:  		/* bc 4, CR6_GT, 12 */
		/* 820846B8h case   18:*/		if ( !regs.CR[6].gt ) { return 0x820846C4;  }
		/* 820846B8h case   18:*/		return 0x820846BC;
		  /* 820846BCh */ case   19:  		/* mr R3, R29 */
		/* 820846BCh case   19:*/		regs.R3 = regs.R29;
		/* 820846BCh case   19:*/		return 0x820846C0;
		  /* 820846C0h */ case   20:  		/* bl -67000 */
		/* 820846C0h case   20:*/		regs.LR = 0x820846C4; return 0x82074108;
		/* 820846C0h case   20:*/		return 0x820846C4;
	}
	return 0x820846C4;
} // Block from 82084670h-820846C4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 820846C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820846C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820846C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820846C4);
		  /* 820846C4h */ case    0:  		/* lis R10, -16382 */
		/* 820846C4h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFC002);
		/* 820846C4h case    0:*/		return 0x820846C8;
		  /* 820846C8h */ case    1:  		/* rlwinm R11, R30, 12, 20, 31 */
		/* 820846C8h case    1:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R11,regs.R30);
		/* 820846C8h case    1:*/		return 0x820846CC;
		  /* 820846CCh */ case    2:  		/* ori R10, R10, 12032 */
		/* 820846CCh case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x2F00);
		/* 820846CCh case    2:*/		return 0x820846D0;
		  /* 820846D0h */ case    3:  		/* addi R11, R11, 512 */
		/* 820846D0h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x200);
		/* 820846D0h case    3:*/		return 0x820846D4;
		  /* 820846D4h */ case    4:  		/* stwu R10, <#[R3 + 4]> */
		/* 820846D4h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820846D4h case    4:*/		return 0x820846D8;
		  /* 820846D8h */ case    5:  		/* rlwinm R10, R30, 0, 3, 31 */
		/* 820846D8h case    5:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R30);
		/* 820846D8h case    5:*/		return 0x820846DC;
		  /* 820846DCh */ case    6:  		/* rlwinm R11, R11, 0, 19, 19 */
		/* 820846DCh case    6:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R11,regs.R11);
		/* 820846DCh case    6:*/		return 0x820846E0;
		  /* 820846E0h */ case    7:  		/* add R11, R11, R10 */
		/* 820846E0h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 820846E0h case    7:*/		return 0x820846E4;
		  /* 820846E4h */ case    8:  		/* rlwinm R10, R26, 2, 0, 29 */
		/* 820846E4h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R26);
		/* 820846E4h case    8:*/		return 0x820846E8;
		  /* 820846E8h */ case    9:  		/* stwu R11, <#[R3 + 4]> */
		/* 820846E8h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820846E8h case    9:*/		return 0x820846EC;
		  /* 820846ECh */ case   10:  		/* stwu R10, <#[R3 + 4]> */
		/* 820846ECh case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820846ECh case   10:*/		return 0x820846F0;
		  /* 820846F0h */ case   11:  		/* stwu R28, <#[R3 + 4]> */
		/* 820846F0h case   11:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820846F0h case   11:*/		return 0x820846F4;
		  /* 820846F4h */ case   12:  		/* stw R3, <#[R29 + 48]> */
		/* 820846F4h case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000030) );
		/* 820846F4h case   12:*/		return 0x820846F8;
	}
	return 0x820846F8;
} // Block from 820846C4h-820846F8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820846F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820846F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820846F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820846F8);
		  /* 820846F8h */ case    0:  		/* cmplw CR6, R31, R27 */
		/* 820846F8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R27);
		/* 820846F8h case    0:*/		return 0x820846FC;
		  /* 820846FCh */ case    1:  		/* bc 12, CR6_LT, -112 */
		/* 820846FCh case    1:*/		if ( regs.CR[6].lt ) { return 0x8208468C;  }
		/* 820846FCh case    1:*/		return 0x82084700;
	}
	return 0x82084700;
} // Block from 820846F8h-82084700h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82084700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084700);
		  /* 82084700h */ case    0:  		/* addi R1, R1, 144 */
		/* 82084700h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82084700h case    0:*/		return 0x82084704;
		  /* 82084704h */ case    1:  		/* b 52120 */
		/* 82084704h case    1:*/		return 0x8209129C;
		/* 82084704h case    1:*/		return 0x82084708;
	}
	return 0x82084708;
} // Block from 82084700h-82084708h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82084708h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084708);
		  /* 82084708h */ case    0:  		/* mfspr R12, LR */
		/* 82084708h case    0:*/		regs.R12 = regs.LR;
		/* 82084708h case    0:*/		return 0x8208470C;
		  /* 8208470Ch */ case    1:  		/* bl 52044 */
		/* 8208470Ch case    1:*/		regs.LR = 0x82084710; return 0x82091258;
		/* 8208470Ch case    1:*/		return 0x82084710;
		  /* 82084710h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82084710h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82084710h case    2:*/		return 0x82084714;
		  /* 82084714h */ case    3:  		/* mulli R11, R6, 416 */
		/* 82084714h case    3:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R6,0x1A0);
		/* 82084714h case    3:*/		return 0x82084718;
		  /* 82084718h */ case    4:  		/* add R28, R11, R4 */
		/* 82084718h case    4:*/		cpu::op::add<0>(regs,&regs.R28,regs.R11,regs.R4);
		/* 82084718h case    4:*/		return 0x8208471C;
		  /* 8208471Ch */ case    5:  		/* lwz R11, <#[R5 + 48]> */
		/* 8208471Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000030) );
		/* 8208471Ch case    5:*/		return 0x82084720;
		  /* 82084720h */ case    6:  		/* mr R30, R3 */
		/* 82084720h case    6:*/		regs.R30 = regs.R3;
		/* 82084720h case    6:*/		return 0x82084724;
		  /* 82084724h */ case    7:  		/* mr R31, R5 */
		/* 82084724h case    7:*/		regs.R31 = regs.R5;
		/* 82084724h case    7:*/		return 0x82084728;
		  /* 82084728h */ case    8:  		/* mr R7, R6 */
		/* 82084728h case    8:*/		regs.R7 = regs.R6;
		/* 82084728h case    8:*/		return 0x8208472C;
		  /* 8208472Ch */ case    9:  		/* lwz R10, <#[R28 + 40]> */
		/* 8208472Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000028) );
		/* 8208472Ch case    9:*/		return 0x82084730;
		  /* 82084730h */ case   10:  		/* cmplw CR6, R10, R11 */
		/* 82084730h case   10:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82084730h case   10:*/		return 0x82084734;
		  /* 82084734h */ case   11:  		/* bc 4, CR6_EQ, 60 */
		/* 82084734h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82084770;  }
		/* 82084734h case   11:*/		return 0x82084738;
		  /* 82084738h */ case   12:  		/* ld R9, <#[R3 + 12912]> */
		/* 82084738h case   12:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R3 + 0x00003270) );
		/* 82084738h case   12:*/		return 0x8208473C;
		  /* 8208473Ch */ case   13:  		/* addi R29, R3, 12904 */
		/* 8208473Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0x3268);
		/* 8208473Ch case   13:*/		return 0x82084740;
		  /* 82084740h */ case   14:  		/* ld R10, <#[R28 + 56]> */
		/* 82084740h case   14:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R28 + 0x00000038) );
		/* 82084740h case   14:*/		return 0x82084744;
		  /* 82084744h */ case   15:  		/* ld R11, <#[R28 + 48]> */
		/* 82084744h case   15:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R28 + 0x00000030) );
		/* 82084744h case   15:*/		return 0x82084748;
		  /* 82084748h */ case   16:  		/* ld R8, <#[R3 + 12904]> */
		/* 82084748h case   16:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R3 + 0x00003268) );
		/* 82084748h case   16:*/		return 0x8208474C;
		  /* 8208474Ch */ case   17:  		/* xor R10, R10, R9 */
		/* 8208474Ch case   17:*/		cpu::op::xor<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8208474Ch case   17:*/		return 0x82084750;
		  /* 82084750h */ case   18:  		/* ld R6, <#[R5 + 32]> */
		/* 82084750h case   18:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R5 + 0x00000020) );
		/* 82084750h case   18:*/		return 0x82084754;
		  /* 82084754h */ case   19:  		/* ld R9, <#[R5 + 40]> */
		/* 82084754h case   19:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R5 + 0x00000028) );
		/* 82084754h case   19:*/		return 0x82084758;
		  /* 82084758h */ case   20:  		/* xor R11, R11, R8 */
		/* 82084758h case   20:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82084758h case   20:*/		return 0x8208475C;
		  /* 8208475Ch */ case   21:  		/* and R10, R10, R9 */
		/* 8208475Ch case   21:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8208475Ch case   21:*/		return 0x82084760;
		  /* 82084760h */ case   22:  		/* and R11, R11, R6 */
		/* 82084760h case   22:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R6);
		/* 82084760h case   22:*/		return 0x82084764;
		  /* 82084764h */ case   23:  		/* or R11, R11, R10 */
		/* 82084764h case   23:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82084764h case   23:*/		return 0x82084768;
		  /* 82084768h */ case   24:  		/* cmpldi CR6, R11, 0 */
		/* 82084768h case   24:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82084768h case   24:*/		return 0x8208476C;
		  /* 8208476Ch */ case   25:  		/* bc 12, CR6_EQ, 192 */
		/* 8208476Ch case   25:*/		if ( regs.CR[6].eq ) { return 0x8208482C;  }
		/* 8208476Ch case   25:*/		return 0x82084770;
	}
	return 0x82084770;
} // Block from 82084708h-82084770h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82084770h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084770);
		  /* 82084770h */ case    0:  		/* lwz R11, <#[R28 + 64]> */
		/* 82084770h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000040) );
		/* 82084770h case    0:*/		return 0x82084774;
		  /* 82084774h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82084774h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82084774h case    1:*/		return 0x82084778;
		  /* 82084778h */ case    2:  		/* bc 12, CR6_EQ, 40 */
		/* 82084778h case    2:*/		if ( regs.CR[6].eq ) { return 0x820847A0;  }
		/* 82084778h case    2:*/		return 0x8208477C;
		  /* 8208477Ch */ case    3:  		/* lwz R10, <#[R30 + 11024]> */
		/* 8208477Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00002B10) );
		/* 8208477Ch case    3:*/		return 0x82084780;
		  /* 82084780h */ case    4:  		/* lwz R9, <#[R30 + 11036]> */
		/* 82084780h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00002B1C) );
		/* 82084780h case    4:*/		return 0x82084784;
		  /* 82084784h */ case    5:  		/* subf R11, R11, R9 */
		/* 82084784h case    5:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82084784h case    5:*/		return 0x82084788;
		  /* 82084788h */ case    6:  		/* lwz R10, <#[R10]> */
		/* 82084788h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 82084788h case    6:*/		return 0x8208478C;
		  /* 8208478Ch */ case    7:  		/* subf R10, R10, R9 */
		/* 8208478Ch case    7:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8208478Ch case    7:*/		return 0x82084790;
		  /* 82084790h */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 82084790h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82084790h case    8:*/		return 0x82084794;
		  /* 82084794h */ case    9:  		/* bc 4, CR6_LT, 12 */
		/* 82084794h case    9:*/		if ( !regs.CR[6].lt ) { return 0x820847A0;  }
		/* 82084794h case    9:*/		return 0x82084798;
		  /* 82084798h */ case   10:  		/* li R3, 0 */
		/* 82084798h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82084798h case   10:*/		return 0x8208479C;
		  /* 8208479Ch */ case   11:  		/* b 164 */
		/* 8208479Ch case   11:*/		return 0x82084840;
		/* 8208479Ch case   11:*/		return 0x820847A0;
	}
	return 0x820847A0;
} // Block from 82084770h-820847A0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820847A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820847A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820847A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820847A0);
		  /* 820847A0h */ case    0:  		/* addi R11, R7, 112 */
		/* 820847A0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R7,0x70);
		/* 820847A0h case    0:*/		return 0x820847A4;
		  /* 820847A4h */ case    1:  		/* lwz R10, <#[R4 + 32]> */
		/* 820847A4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000020) );
		/* 820847A4h case    1:*/		return 0x820847A8;
		  /* 820847A8h */ case    2:  		/* addi R29, R30, 12904 */
		/* 820847A8h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x3268);
		/* 820847A8h case    2:*/		return 0x820847AC;
		  /* 820847ACh */ case    3:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 820847ACh case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 820847ACh case    3:*/		return 0x820847B0;
		  /* 820847B0h */ case    4:  		/* mr R3, R4 */
		/* 820847B0h case    4:*/		regs.R3 = regs.R4;
		/* 820847B0h case    4:*/		return 0x820847B4;
		  /* 820847B4h */ case    5:  		/* mr R6, R29 */
		/* 820847B4h case    5:*/		regs.R6 = regs.R29;
		/* 820847B4h case    5:*/		return 0x820847B8;
		  /* 820847B8h */ case    6:  		/* mr R5, R31 */
		/* 820847B8h case    6:*/		regs.R5 = regs.R31;
		/* 820847B8h case    6:*/		return 0x820847BC;
		  /* 820847BCh */ case    7:  		/* lwzx R11, <#[R11 + R4]> */
		/* 820847BCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 820847BCh case    7:*/		return 0x820847C0;
		  /* 820847C0h */ case    8:  		/* add R11, R11, R4 */
		/* 820847C0h case    8:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 820847C0h case    8:*/		return 0x820847C4;
		  /* 820847C4h */ case    9:  		/* lwz R11, <#[R11 + 872]> */
		/* 820847C4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000368) );
		/* 820847C4h case    9:*/		return 0x820847C8;
		  /* 820847C8h */ case   10:  		/* add R4, R11, R10 */
		/* 820847C8h case   10:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R10);
		/* 820847C8h case   10:*/		return 0x820847CC;
		  /* 820847CCh */ case   11:  		/* bl -3020 */
		/* 820847CCh case   11:*/		regs.LR = 0x820847D0; return 0x82083C00;
		/* 820847CCh case   11:*/		return 0x820847D0;
		  /* 820847D0h */ case   12:  		/* lwz R11, <#[R31 + 48]> */
		/* 820847D0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 820847D0h case   12:*/		return 0x820847D4;
		  /* 820847D4h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 820847D4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820847D4h case   13:*/		return 0x820847D8;
		  /* 820847D8h */ case   14:  		/* bc 4, CR6_EQ, 60 */
		/* 820847D8h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82084814;  }
		/* 820847D8h case   14:*/		return 0x820847DC;
		  /* 820847DCh */ case   15:  		/* lis R11, -32215 */
		/* 820847DCh case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 820847DCh case   15:*/		return 0x820847E0;
		  /* 820847E0h */ case   16:  		/* addi R10, R11, -31300 */
		/* 820847E0h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFF85BC);
		/* 820847E0h case   16:*/		return 0x820847E4;
		  /* 820847E4h */ case   17:  		/* mr R8, R10 */
		/* 820847E4h case   17:*/		regs.R8 = regs.R10;
		/* 820847E4h case   17:*/		return 0x820847E8;
		  /* 820847E8h */ case   18:  		/* mfmsr R9, MSR */
		/* 820847E8h case   18:*/		regs.R9 = regs.MSR;
		/* 820847E8h case   18:*/		return 0x820847EC;
		  /* 820847ECh */ case   19:  		/* mtmsrd MSR, R13 */
		/* 820847ECh case   19:*/		regs.MSR = regs.R13;
		/* 820847ECh case   19:*/		return 0x820847F0;
		  /* 820847F0h */ case   20:  		/* lwarx R11, <#[R8]> */
		/* 820847F0h case   20:*/		cpu::mem::lwarx( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 820847F0h case   20:*/		return 0x820847F4;
		  /* 820847F4h */ case   21:  		/* addi R11, R11, 1 */
		/* 820847F4h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820847F4h case   21:*/		return 0x820847F8;
		  /* 820847F8h */ case   22:  		/* stwcx. R11, <#[R8]> */
		/* 820847F8h case   22:*/		cpu::mem::stwcx( regs, regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 820847F8h case   22:*/		return 0x820847FC;
		  /* 820847FCh */ case   23:  		/* mtmsrd MSR, R9 */
		/* 820847FCh case   23:*/		regs.MSR = regs.R9;
		/* 820847FCh case   23:*/		return 0x82084800;
		  /* 82084800h */ case   24:  		/* bc 4, CR0_EQ, -24 */
		/* 82084800h case   24:*/		if ( !regs.CR[0].eq ) { return 0x820847E8;  }
		/* 82084800h case   24:*/		return 0x82084804;
		  /* 82084804h */ case   25:  		/* addi R9, R11, 1 */
		/* 82084804h case   25:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 82084804h case   25:*/		return 0x82084808;
		  /* 82084808h */ case   26:  		/* cmplwi CR6, R9, 2 */
		/* 82084808h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000002);
		/* 82084808h case   26:*/		return 0x8208480C;
		  /* 8208480Ch */ case   27:  		/* bc 12, CR6_LT, -40 */
		/* 8208480Ch case   27:*/		if ( regs.CR[6].lt ) { return 0x820847E4;  }
		/* 8208480Ch case   27:*/		return 0x82084810;
		  /* 82084810h */ case   28:  		/* stw R11, <#[R31 + 48]> */
		/* 82084810h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82084810h case   28:*/		return 0x82084814;
	}
	return 0x82084814;
} // Block from 820847A0h-82084814h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82084814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084814);
		  /* 82084814h */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 82084814h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82084814h case    0:*/		return 0x82084818;
		  /* 82084818h */ case    1:  		/* stw R11, <#[R28 + 40]> */
		/* 82084818h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000028) );
		/* 82084818h case    1:*/		return 0x8208481C;
		  /* 8208481Ch */ case    2:  		/* ld R11, <#[R29]> */
		/* 8208481Ch case    2:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8208481Ch case    2:*/		return 0x82084820;
		  /* 82084820h */ case    3:  		/* std R11, <#[R28 + 48]> */
		/* 82084820h case    3:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R28 + 0x00000030) );
		/* 82084820h case    3:*/		return 0x82084824;
		  /* 82084824h */ case    4:  		/* ld R11, <#[R30 + 12912]> */
		/* 82084824h case    4:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R30 + 0x00003270) );
		/* 82084824h case    4:*/		return 0x82084828;
		  /* 82084828h */ case    5:  		/* std R11, <#[R28 + 56]> */
		/* 82084828h case    5:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R28 + 0x00000038) );
		/* 82084828h case    5:*/		return 0x8208482C;
	}
	return 0x8208482C;
} // Block from 82084814h-8208482Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8208482Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208482C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208482C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208482C);
		  /* 8208482Ch */ case    0:  		/* ld R11, <#[R29]> */
		/* 8208482Ch case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8208482Ch case    0:*/		return 0x82084830;
		  /* 82084830h */ case    1:  		/* li R3, 1 */
		/* 82084830h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82084830h case    1:*/		return 0x82084834;
		  /* 82084834h */ case    2:  		/* ld R10, <#[R30 + 12912]> */
		/* 82084834h case    2:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R30 + 0x00003270) );
		/* 82084834h case    2:*/		return 0x82084838;
		  /* 82084838h */ case    3:  		/* std R11, <#[R30 + 12264]> */
		/* 82084838h case    3:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R30 + 0x00002FE8) );
		/* 82084838h case    3:*/		return 0x8208483C;
		  /* 8208483Ch */ case    4:  		/* std R10, <#[R30 + 12272]> */
		/* 8208483Ch case    4:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R30 + 0x00002FF0) );
		/* 8208483Ch case    4:*/		return 0x82084840;
	}
	return 0x82084840;
} // Block from 8208482Ch-82084840h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82084840h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084840);
		  /* 82084840h */ case    0:  		/* addi R1, R1, 128 */
		/* 82084840h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82084840h case    0:*/		return 0x82084844;
		  /* 82084844h */ case    1:  		/* b 51812 */
		/* 82084844h case    1:*/		return 0x820912A8;
		/* 82084844h case    1:*/		return 0x82084848;
	}
	return 0x82084848;
} // Block from 82084840h-82084848h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82084848h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084848);
		  /* 82084848h */ case    0:  		/* mfspr R12, LR */
		/* 82084848h case    0:*/		regs.R12 = regs.LR;
		/* 82084848h case    0:*/		return 0x8208484C;
		  /* 8208484Ch */ case    1:  		/* bl 51668 */
		/* 8208484Ch case    1:*/		regs.LR = 0x82084850; return 0x82091220;
		/* 8208484Ch case    1:*/		return 0x82084850;
		  /* 82084850h */ case    2:  		/* stwu R1, <#[R1 - 272]> */
		/* 82084850h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEF0);
		/* 82084850h case    2:*/		return 0x82084854;
		  /* 82084854h */ case    3:  		/* li R11, -1 */
		/* 82084854h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82084854h case    3:*/		return 0x82084858;
		  /* 82084858h */ case    4:  		/* rlwinm R10, R4, 0, 14, 14 */
		/* 82084858h case    4:*/		cpu::op::rlwinm<0,0,14,14>(regs,&regs.R10,regs.R4);
		/* 82084858h case    4:*/		return 0x8208485C;
		  /* 8208485Ch */ case    5:  		/* li R16, 0 */
		/* 8208485Ch case    5:*/		cpu::op::li<0>(regs,&regs.R16,0x0);
		/* 8208485Ch case    5:*/		return 0x82084860;
		  /* 82084860h */ case    6:  		/* stw R11, <#[R1 + 84]> */
		/* 82084860h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82084860h case    6:*/		return 0x82084864;
		  /* 82084864h */ case    7:  		/* mr R31, R3 */
		/* 82084864h case    7:*/		regs.R31 = regs.R3;
		/* 82084864h case    7:*/		return 0x82084868;
	}
	return 0x82084868;
} // Block from 82084848h-82084868h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82084868h
// Function '?XenonGpu_Initialize@D3D@@YAXPAVCDevice@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084868);
		  /* 82084868h */ case    0:  		/* stw R11, <#[R1 + 88]> */
		/* 82084868h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 82084868h case    0:*/		return 0x8208486C;
		  /* 8208486Ch */ case    1:  		/* mr R17, R4 */
		/* 8208486Ch case    1:*/		regs.R17 = regs.R4;
		/* 8208486Ch case    1:*/		return 0x82084870;
		  /* 82084870h */ case    2:  		/* stw R11, <#[R1 + 100]> */
		/* 82084870h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 82084870h case    2:*/		return 0x82084874;
		  /* 82084874h */ case    3:  		/* cmpldi CR6, R10, 0 */
		/* 82084874h case    3:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 82084874h case    3:*/		return 0x82084878;
		  /* 82084878h */ case    4:  		/* stw R11, <#[R1 + 104]> */
		/* 82084878h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 82084878h case    4:*/		return 0x8208487C;
		  /* 8208487Ch */ case    5:  		/* stw R11, <#[R1 + 92]> */
		/* 8208487Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8208487Ch case    5:*/		return 0x82084880;
		  /* 82084880h */ case    6:  		/* mr R15, R11 */
		/* 82084880h case    6:*/		regs.R15 = regs.R11;
		/* 82084880h case    6:*/		return 0x82084884;
		  /* 82084884h */ case    7:  		/* stw R16, <#[R1 + 96]> */
		/* 82084884h case    7:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x00000060) );
		/* 82084884h case    7:*/		return 0x82084888;
		  /* 82084888h */ case    8:  		/* bc 12, CR6_EQ, 12 */
		/* 82084888h case    8:*/		if ( regs.CR[6].eq ) { return 0x82084894;  }
		/* 82084888h case    8:*/		return 0x8208488C;
		  /* 8208488Ch */ case    9:  		/* bl -5884 */
		/* 8208488Ch case    9:*/		regs.LR = 0x82084890; return 0x82083190;
		/* 8208488Ch case    9:*/		return 0x82084890;
		  /* 82084890h */ case   10:  		/* mr R17, R3 */
		/* 82084890h case   10:*/		regs.R17 = regs.R3;
		/* 82084890h case   10:*/		return 0x82084894;
	}
	return 0x82084894;
} // Block from 82084868h-82084894h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82084894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084894);
		  /* 82084894h */ case    0:  		/* lwz R30, <#[R31 + 13072]> */
		/* 82084894h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00003310) );
		/* 82084894h case    0:*/		return 0x82084898;
		  /* 82084898h */ case    1:  		/* lwz R20, <#[R31 + 12240]> */
		/* 82084898h case    1:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R31 + 0x00002FD0) );
		/* 82084898h case    1:*/		return 0x8208489C;
		  /* 8208489Ch */ case    2:  		/* lwz R29, <#[R31 + 13068]> */
		/* 8208489Ch case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x0000330C) );
		/* 8208489Ch case    2:*/		return 0x820848A0;
		  /* 820848A0h */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 820848A0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820848A0h case    3:*/		return 0x820848A4;
		  /* 820848A4h */ case    4:  		/* bc 12, CR6_EQ, 2328 */
		/* 820848A4h case    4:*/		if ( regs.CR[6].eq ) { return 0x820851BC;  }
		/* 820848A4h case    4:*/		return 0x820848A8;
		  /* 820848A8h */ case    5:  		/* lwz R11, <#[R30 + 896]> */
		/* 820848A8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000380) );
		/* 820848A8h case    5:*/		return 0x820848AC;
		  /* 820848ACh */ case    6:  		/* lis R10, -16383 */
		/* 820848ACh case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFC001);
		/* 820848ACh case    6:*/		return 0x820848B0;
		  /* 820848B0h */ case    7:  		/* mr R23, R16 */
		/* 820848B0h case    7:*/		regs.R23 = regs.R16;
		/* 820848B0h case    7:*/		return 0x820848B4;
		  /* 820848B4h */ case    8:  		/* add R11, R11, R30 */
		/* 820848B4h case    8:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 820848B4h case    8:*/		return 0x820848B8;
		  /* 820848B8h */ case    9:  		/* li R22, 5 */
		/* 820848B8h case    9:*/		cpu::op::li<0>(regs,&regs.R22,0x5);
		/* 820848B8h case    9:*/		return 0x820848BC;
		  /* 820848BCh */ case   10:  		/* lis R21, 4096 */
		/* 820848BCh case   10:*/		cpu::op::lis<0>(regs,&regs.R21,0x1000);
		/* 820848BCh case   10:*/		return 0x820848C0;
		  /* 820848C0h */ case   11:  		/* cmplwi CR6, R29, 0 */
		/* 820848C0h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820848C0h case   11:*/		return 0x820848C4;
		  /* 820848C4h */ case   12:  		/* ori R14, R10, 9984 */
		/* 820848C4h case   12:*/		cpu::op::ori<0>(regs,&regs.R14,regs.R10,0x2700);
		/* 820848C4h case   12:*/		return 0x820848C8;
		  /* 820848C8h */ case   13:  		/* addi R25, R11, 872 */
		/* 820848C8h case   13:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x368);
		/* 820848C8h case   13:*/		return 0x820848CC;
		  /* 820848CCh */ case   14:  		/* bc 4, CR6_EQ, 228 */
		/* 820848CCh case   14:*/		if ( !regs.CR[6].eq ) { return 0x820849B0;  }
		/* 820848CCh case   14:*/		return 0x820848D0;
		  /* 820848D0h */ case   15:  		/* lbz R11, <#[R31 + 11071]> */
		/* 820848D0h case   15:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3F) );
		/* 820848D0h case   15:*/		return 0x820848D4;
		  /* 820848D4h */ case   16:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 820848D4h case   16:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 820848D4h case   16:*/		return 0x820848D8;
		  /* 820848D8h */ case   17:  		/* bc 12, CR0_EQ, 60 */
		/* 820848D8h case   17:*/		if ( regs.CR[0].eq ) { return 0x82084914;  }
		/* 820848D8h case   17:*/		return 0x820848DC;
		  /* 820848DCh */ case   18:  		/* lwz R11, <#[R31 + 56]> */
		/* 820848DCh case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 820848DCh case   18:*/		return 0x820848E0;
		  /* 820848E0h */ case   19:  		/* lwz R3, <#[R31 + 48]> */
		/* 820848E0h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 820848E0h case   19:*/		return 0x820848E4;
		  /* 820848E4h */ case   20:  		/* cmplw CR6, R3, R11 */
		/* 820848E4h case   20:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 820848E4h case   20:*/		return 0x820848E8;
		  /* 820848E8h */ case   21:  		/* bc 4, CR6_GT, 12 */
		/* 820848E8h case   21:*/		if ( !regs.CR[6].gt ) { return 0x820848F4;  }
		/* 820848E8h case   21:*/		return 0x820848EC;
		  /* 820848ECh */ case   22:  		/* mr R3, R31 */
		/* 820848ECh case   22:*/		regs.R3 = regs.R31;
		/* 820848ECh case   22:*/		return 0x820848F0;
		  /* 820848F0h */ case   23:  		/* bl -67560 */
		/* 820848F0h case   23:*/		regs.LR = 0x820848F4; return 0x82074108;
		/* 820848F0h case   23:*/		return 0x820848F4;
	}
	return 0x820848F4;
} // Block from 82084894h-820848F4h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820848F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820848F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820848F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820848F4);
		  /* 820848F4h */ case    0:  		/* li R11, 1480 */
		/* 820848F4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x5C8);
		/* 820848F4h case    0:*/		return 0x820848F8;
		  /* 820848F8h */ case    1:  		/* lis R10, 2 */
		/* 820848F8h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x2);
		/* 820848F8h case    1:*/		return 0x820848FC;
		  /* 820848FCh */ case    2:  		/* stwu R11, <#[R3 + 4]> */
		/* 820848FCh case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820848FCh case    2:*/		return 0x82084900;
		  /* 82084900h */ case    3:  		/* stwu R10, <#[R3 + 4]> */
		/* 82084900h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82084900h case    3:*/		return 0x82084904;
		  /* 82084904h */ case    4:  		/* lbz R11, <#[R31 + 11071]> */
		/* 82084904h case    4:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3F) );
		/* 82084904h case    4:*/		return 0x82084908;
		  /* 82084908h */ case    5:  		/* rlwinm R11, R11, 0, 0, 29 */
		/* 82084908h case    5:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R11,regs.R11);
		/* 82084908h case    5:*/		return 0x8208490C;
		  /* 8208490Ch */ case    6:  		/* stw R3, <#[R31 + 48]> */
		/* 8208490Ch case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 8208490Ch case    6:*/		return 0x82084910;
		  /* 82084910h */ case    7:  		/* stb R11, <#[R31 + 11071]> */
		/* 82084910h case    7:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00002B3F) );
		/* 82084910h case    7:*/		return 0x82084914;
	}
	return 0x82084914;
} // Block from 820848F4h-82084914h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82084914h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084914( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084914) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084914);
		  /* 82084914h */ case    0:  		/* lwz R11, <#[R30 + 872]> */
		/* 82084914h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000368) );
		/* 82084914h case    0:*/		return 0x82084918;
		  /* 82084918h */ case    1:  		/* mr R27, R16 */
		/* 82084918h case    1:*/		regs.R27 = regs.R16;
		/* 82084918h case    1:*/		return 0x8208491C;
		  /* 8208491Ch */ case    2:  		/* mr R18, R16 */
		/* 8208491Ch case    2:*/		regs.R18 = regs.R16;
		/* 8208491Ch case    2:*/		return 0x82084920;
		  /* 82084920h */ case    3:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 82084920h case    3:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 82084920h case    3:*/		return 0x82084924;
		  /* 82084924h */ case    4:  		/* mr R19, R16 */
		/* 82084924h case    4:*/		regs.R19 = regs.R16;
		/* 82084924h case    4:*/		return 0x82084928;
		  /* 82084928h */ case    5:  		/* bc 12, CR0_EQ, 20 */
		/* 82084928h case    5:*/		if ( regs.CR[0].eq ) { return 0x8208493C;  }
		/* 82084928h case    5:*/		return 0x8208492C;
		  /* 8208492Ch */ case    6:  		/* lwz R11, <#[R30 + 904]> */
		/* 8208492Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000388) );
		/* 8208492Ch case    6:*/		return 0x82084930;
		  /* 82084930h */ case    7:  		/* li R23, 1 */
		/* 82084930h case    7:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 82084930h case    7:*/		return 0x82084934;
		  /* 82084934h */ case    8:  		/* add R11, R11, R30 */
		/* 82084934h case    8:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 82084934h case    8:*/		return 0x82084938;
		  /* 82084938h */ case    9:  		/* addi R25, R11, 872 */
		/* 82084938h case    9:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x368);
		/* 82084938h case    9:*/		return 0x8208493C;
	}
	return 0x8208493C;
} // Block from 82084914h-8208493Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8208493Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208493C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208493C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208493C);
		  /* 8208493Ch */ case    0:  		/* lbz R11, <#[R31 + 11071]> */
		/* 8208493Ch case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3F) );
		/* 8208493Ch case    0:*/		return 0x82084940;
		  /* 82084940h */ case    1:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 82084940h case    1:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 82084940h case    1:*/		return 0x82084944;
		  /* 82084944h */ case    2:  		/* bc 12, CR0_EQ, 28 */
		/* 82084944h case    2:*/		if ( regs.CR[0].eq ) { return 0x82084960;  }
		/* 82084944h case    2:*/		return 0x82084948;
		  /* 82084948h */ case    3:  		/* lwz R11, <#[R31 + 10372]> */
		/* 82084948h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002884) );
		/* 82084948h case    3:*/		return 0x8208494C;
		  /* 8208494Ch */ case    4:  		/* li R12, 1 */
		/* 8208494Ch case    4:*/		cpu::op::li<0>(regs,&regs.R12,0x1);
		/* 8208494Ch case    4:*/		return 0x82084950;
		  /* 82084950h */ case    5:  		/* rldicr R12, R12, 56, 63 */
		/* 82084950h case    5:*/		cpu::op::rldicr<0,56,63>(regs,&regs.R12,regs.R12);
		/* 82084950h case    5:*/		return 0x82084954;
		  /* 82084954h */ case    6:  		/* rlwinm R11, R11, 0, 16, 11 */
		/* 82084954h case    6:*/		cpu::op::rlwinm<0,0,16,11>(regs,&regs.R11,regs.R11);
		/* 82084954h case    6:*/		return 0x82084958;
		  /* 82084958h */ case    7:  		/* or R17, R17, R12 */
		/* 82084958h case    7:*/		cpu::op::or<0>(regs,&regs.R17,regs.R17,regs.R12);
		/* 82084958h case    7:*/		return 0x8208495C;
		  /* 8208495Ch */ case    8:  		/* stw R11, <#[R31 + 10372]> */
		/* 8208495Ch case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00002884) );
		/* 8208495Ch case    8:*/		return 0x82084960;
	}
	return 0x82084960;
} // Block from 8208493Ch-82084960h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82084960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084960);
		  /* 82084960h */ case    0:  		/* lwz R11, <#[R31 + 10580]> */
		/* 82084960h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002954) );
		/* 82084960h case    0:*/		return 0x82084964;
		  /* 82084964h */ case    1:  		/* rlwinm R10, R11, 0, 29, 31 */
		/* 82084964h case    1:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R11);
		/* 82084964h case    1:*/		return 0x82084968;
		  /* 82084968h */ case    2:  		/* cmplwi CR6, R10, 5 */
		/* 82084968h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000005);
		/* 82084968h case    2:*/		return 0x8208496C;
		  /* 8208496Ch */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 8208496Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82084980;  }
		/* 8208496Ch case    3:*/		return 0x82084970;
		  /* 82084970h */ case    4:  		/* rlwimi R11, R22, 0, 29, 31 */
		/* 82084970h case    4:*/		cpu::op::rlwimi<0,0,29,31>(regs,&regs.R11,regs.R22);
		/* 82084970h case    4:*/		return 0x82084974;
		  /* 82084974h */ case    5:  		/* oris R17, R17, 8 */
		/* 82084974h case    5:*/		cpu::op::oris<0>(regs,&regs.R17,regs.R17,0x8);
		/* 82084974h case    5:*/		return 0x82084978;
		  /* 82084978h */ case    6:  		/* stw R11, <#[R31 + 10580]> */
		/* 82084978h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00002954) );
		/* 82084978h case    6:*/		return 0x8208497C;
		  /* 8208497Ch */ case    7:  		/* ori R17, R17, 8 */
		/* 8208497Ch case    7:*/		cpu::op::ori<0>(regs,&regs.R17,regs.R17,0x8);
		/* 8208497Ch case    7:*/		return 0x82084980;
	}
	return 0x82084980;
} // Block from 82084960h-82084980h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82084980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084980);
		  /* 82084980h */ case    0:  		/* lwz R11, <#[R25 + 20]> */
		/* 82084980h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000014) );
		/* 82084980h case    0:*/		return 0x82084984;
		  /* 82084984h */ case    1:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 82084984h case    1:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 82084984h case    1:*/		return 0x82084988;
		  /* 82084988h */ case    2:  		/* addic R10, R11, -1 */
		/* 82084988h case    2:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 82084988h case    2:*/		return 0x8208498C;
		  /* 8208498Ch */ case    3:  		/* subfe R28, R10, R11 */
		/* 8208498Ch case    3:*/		cpu::op::subfe<0>(regs,&regs.R28,regs.R10,regs.R11);
		/* 8208498Ch case    3:*/		return 0x82084990;
		  /* 82084990h */ case    4:  		/* lwz R11, <#[R31 + 13904]> */
		/* 82084990h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003650) );
		/* 82084990h case    4:*/		return 0x82084994;
		  /* 82084994h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82084994h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82084994h case    5:*/		return 0x82084998;
		  /* 82084998h */ case    6:  		/* bc 4, CR6_EQ, 428 */
		/* 82084998h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82084B44;  }
		/* 82084998h case    6:*/		return 0x8208499C;
		  /* 8208499Ch */ case    7:  		/* lwz R11, <#[R30 + 872]> */
		/* 8208499Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000368) );
		/* 8208499Ch case    7:*/		return 0x820849A0;
		  /* 820849A0h */ case    8:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 820849A0h case    8:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 820849A0h case    8:*/		return 0x820849A4;
		  /* 820849A4h */ case    9:  		/* bc 12, CR0_EQ, 416 */
		/* 820849A4h case    9:*/		if ( regs.CR[0].eq ) { return 0x82084B44;  }
		/* 820849A4h case    9:*/		return 0x820849A8;
		  /* 820849A8h */ case   10:  		/* li R3, 245 */
		/* 820849A8h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0xF5);
		/* 820849A8h case   10:*/		return 0x820849AC;
		  /* 820849ACh */ case   11:  		/* bl 2000988 */
		/* 820849ACh case   11:*/		regs.LR = 0x820849B0; return 0x8226D208;
		/* 820849ACh case   11:*/		return 0x820849B0;
	}
	return 0x820849B0;
} // Block from 82084980h-820849B0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820849B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820849B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820849B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820849B0);
		  /* 820849B0h */ case    0:  		/* lwz R11, <#[R29 + 64]> */
		/* 820849B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000040) );
		/* 820849B0h case    0:*/		return 0x820849B4;
		  /* 820849B4h */ case    1:  		/* rlwinm R10, R17, 0, 11, 11 */
		/* 820849B4h case    1:*/		cpu::op::rlwinm<0,0,11,11>(regs,&regs.R10,regs.R17);
		/* 820849B4h case    1:*/		return 0x820849B8;
		  /* 820849B8h */ case    2:  		/* lbz R9, <#[R31 + 11070]> */
		/* 820849B8h case    2:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R31 + 0x00002B3E) );
		/* 820849B8h case    2:*/		return 0x820849BC;
		  /* 820849BCh */ case    3:  		/* add R11, R11, R29 */
		/* 820849BCh case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 820849BCh case    3:*/		return 0x820849C0;
		  /* 820849C0h */ case    4:  		/* lbz R8, <#[R31 + 11071]> */
		/* 820849C0h case    4:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R31 + 0x00002B3F) );
		/* 820849C0h case    4:*/		return 0x820849C4;
		  /* 820849C4h */ case    5:  		/* cmpldi CR6, R10, 0 */
		/* 820849C4h case    5:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 820849C4h case    5:*/		return 0x820849C8;
		  /* 820849C8h */ case    6:  		/* addi R27, R11, 40 */
		/* 820849C8h case    6:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x28);
		/* 820849C8h case    6:*/		return 0x820849CC;
		  /* 820849CCh */ case    7:  		/* lwz R18, <#[R11 + 48]> */
		/* 820849CCh case    7:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R11 + 0x00000030) );
		/* 820849CCh case    7:*/		return 0x820849D0;
		  /* 820849D0h */ case    8:  		/* lwz R16, <#[R11 + 52]> */
		/* 820849D0h case    8:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R11 + 0x00000034) );
		/* 820849D0h case    8:*/		return 0x820849D4;
		  /* 820849D4h */ case    9:  		/* rlwinm R11, R18, 0, 1, 3 */
		/* 820849D4h case    9:*/		cpu::op::rlwinm<0,0,1,3>(regs,&regs.R11,regs.R18);
		/* 820849D4h case    9:*/		return 0x820849D8;
		  /* 820849D8h */ case   10:  		/* mr R19, R18 */
		/* 820849D8h case   10:*/		regs.R19 = regs.R18;
		/* 820849D8h case   10:*/		return 0x820849DC;
		  /* 820849DCh */ case   11:  		/* subfc R11, R11, R21 */
		/* 820849DCh case   11:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R11,regs.R21);
		/* 820849DCh case   11:*/		return 0x820849E0;
		  /* 820849E0h */ case   12:  		/* subfe R11, R11, R11 */
		/* 820849E0h case   12:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 820849E0h case   12:*/		return 0x820849E4;
		  /* 820849E4h */ case   13:  		/* rlwinm R11, R11, 0, 31, 31 */
		/* 820849E4h case   13:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R11);
		/* 820849E4h case   13:*/		return 0x820849E8;
		  /* 820849E8h */ case   14:  		/* rlwinm R10, R11, 3, 21, 28 */
		/* 820849E8h case   14:*/		cpu::op::rlwinm<0,3,21,28>(regs,&regs.R10,regs.R11);
		/* 820849E8h case   14:*/		return 0x820849EC;
		  /* 820849ECh */ case   15:  		/* rlwinm R11, R11, 1, 23, 30 */
		/* 820849ECh case   15:*/		cpu::op::rlwinm<0,1,23,30>(regs,&regs.R11,regs.R11);
		/* 820849ECh case   15:*/		return 0x820849F0;
		  /* 820849F0h */ case   16:  		/* or R10, R10, R9 */
		/* 820849F0h case   16:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 820849F0h case   16:*/		return 0x820849F4;
		  /* 820849F4h */ case   17:  		/* or R11, R11, R8 */
		/* 820849F4h case   17:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 820849F4h case   17:*/		return 0x820849F8;
		  /* 820849F8h */ case   18:  		/* rlwimi R9, R10, 0, 28, 28 */
		/* 820849F8h case   18:*/		cpu::op::rlwimi<0,0,28,28>(regs,&regs.R9,regs.R10);
		/* 820849F8h case   18:*/		return 0x820849FC;
		  /* 820849FCh */ case   19:  		/* rlwimi R8, R11, 0, 30, 30 */
		/* 820849FCh case   19:*/		cpu::op::rlwimi<0,0,30,30>(regs,&regs.R8,regs.R11);
		/* 820849FCh case   19:*/		return 0x82084A00;
		  /* 82084A00h */ case   20:  		/* stb R9, <#[R31 + 11070]> */
		/* 82084A00h case   20:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R31 + 0x00002B3E) );
		/* 82084A00h case   20:*/		return 0x82084A04;
		  /* 82084A04h */ case   21:  		/* stb R8, <#[R31 + 11071]> */
		/* 82084A04h case   21:*/		cpu::mem::store8( regs, regs.R8, (uint32)(regs.R31 + 0x00002B3F) );
		/* 82084A04h case   21:*/		return 0x82084A08;
		  /* 82084A08h */ case   22:  		/* bc 12, CR6_EQ, 208 */
		/* 82084A08h case   22:*/		if ( regs.CR[6].eq ) { return 0x82084AD8;  }
		/* 82084A08h case   22:*/		return 0x82084A0C;
		  /* 82084A0Ch */ case   23:  		/* addi R4, R29, 40 */
		/* 82084A0Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x28);
		/* 82084A0Ch case   23:*/		return 0x82084A10;
		  /* 82084A10h */ case   24:  		/* lwz R5, <#[R29 + 24]> */
		/* 82084A10h case   24:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000018) );
		/* 82084A10h case   24:*/		return 0x82084A14;
		  /* 82084A14h */ case   25:  		/* mr R3, R31 */
		/* 82084A14h case   25:*/		regs.R3 = regs.R31;
		/* 82084A14h case   25:*/		return 0x82084A18;
		  /* 82084A18h */ case   26:  		/* bl -960 */
		/* 82084A18h case   26:*/		regs.LR = 0x82084A1C; return 0x82084658;
		/* 82084A18h case   26:*/		return 0x82084A1C;
		  /* 82084A1Ch */ case   27:  		/* lwz R3, <#[R31 + 48]> */
		/* 82084A1Ch case   27:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82084A1Ch case   27:*/		return 0x82084A20;
		  /* 82084A20h */ case   28:  		/* lwz R11, <#[R31 + 56]> */
		/* 82084A20h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82084A20h case   28:*/		return 0x82084A24;
		  /* 82084A24h */ case   29:  		/* cmplw CR6, R3, R11 */
		/* 82084A24h case   29:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82084A24h case   29:*/		return 0x82084A28;
		  /* 82084A28h */ case   30:  		/* bc 4, CR6_GT, 12 */
		/* 82084A28h case   30:*/		if ( !regs.CR[6].gt ) { return 0x82084A34;  }
		/* 82084A28h case   30:*/		return 0x82084A2C;
		  /* 82084A2Ch */ case   31:  		/* mr R3, R31 */
		/* 82084A2Ch case   31:*/		regs.R3 = regs.R31;
		/* 82084A2Ch case   31:*/		return 0x82084A30;
		  /* 82084A30h */ case   32:  		/* bl -67880 */
		/* 82084A30h case   32:*/		regs.LR = 0x82084A34; return 0x82074108;
		/* 82084A30h case   32:*/		return 0x82084A34;
	}
	return 0x82084A34;
} // Block from 820849B0h-82084A34h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82084A34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084A34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084A34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084A34);
		  /* 82084A34h */ case    0:  		/* stwu R14, <#[R3 + 4]> */
		/* 82084A34h case    0:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82084A34h case    0:*/		return 0x82084A38;
		  /* 82084A38h */ case    1:  		/* mr R11, R14 */
		/* 82084A38h case    1:*/		regs.R11 = regs.R14;
		/* 82084A38h case    1:*/		return 0x82084A3C;
		  /* 82084A3Ch */ case    2:  		/* lwz R11, <#[R29 + 64]> */
		/* 82084A3Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000040) );
		/* 82084A3Ch case    2:*/		return 0x82084A40;
		  /* 82084A40h */ case    3:  		/* ori R17, R17, 16384 */
		/* 82084A40h case    3:*/		cpu::op::ori<0>(regs,&regs.R17,regs.R17,0x4000);
		/* 82084A40h case    3:*/		return 0x82084A44;
		  /* 82084A44h */ case    4:  		/* lwz R10, <#[R29 + 24]> */
		/* 82084A44h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000018) );
		/* 82084A44h case    4:*/		return 0x82084A48;
		  /* 82084A48h */ case    5:  		/* add R11, R11, R29 */
		/* 82084A48h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 82084A48h case    5:*/		return 0x82084A4C;
		  /* 82084A4Ch */ case    6:  		/* lwz R11, <#[R11 + 40]> */
		/* 82084A4Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82084A4Ch case    6:*/		return 0x82084A50;
		  /* 82084A50h */ case    7:  		/* add R11, R11, R10 */
		/* 82084A50h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82084A50h case    7:*/		return 0x82084A54;
		  /* 82084A54h */ case    8:  		/* rlwinm R10, R11, 12, 20, 31 */
		/* 82084A54h case    8:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R10,regs.R11);
		/* 82084A54h case    8:*/		return 0x82084A58;
		  /* 82084A58h */ case    9:  		/* rlwinm R11, R11, 0, 3, 30 */
		/* 82084A58h case    9:*/		cpu::op::rlwinm<0,0,3,30>(regs,&regs.R11,regs.R11);
		/* 82084A58h case    9:*/		return 0x82084A5C;
		  /* 82084A5Ch */ case   10:  		/* addi R10, R10, 512 */
		/* 82084A5Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x200);
		/* 82084A5Ch case   10:*/		return 0x82084A60;
		  /* 82084A60h */ case   11:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 82084A60h case   11:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 82084A60h case   11:*/		return 0x82084A64;
		  /* 82084A64h */ case   12:  		/* add R11, R10, R11 */
		/* 82084A64h case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82084A64h case   12:*/		return 0x82084A68;
		  /* 82084A68h */ case   13:  		/* ori R11, R11, 1 */
		/* 82084A68h case   13:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82084A68h case   13:*/		return 0x82084A6C;
		  /* 82084A6Ch */ case   14:  		/* stwu R11, <#[R3 + 4]> */
		/* 82084A6Ch case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82084A6Ch case   14:*/		return 0x82084A70;
		  /* 82084A70h */ case   15:  		/* lwz R11, <#[R29 + 64]> */
		/* 82084A70h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000040) );
		/* 82084A70h case   15:*/		return 0x82084A74;
		  /* 82084A74h */ case   16:  		/* add R11, R11, R29 */
		/* 82084A74h case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 82084A74h case   16:*/		return 0x82084A78;
	}
	return 0x82084A78;
} // Block from 82084A34h-82084A78h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82084A78h
// Function '?ReadMMRegUlong@D3D@@YAKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084A78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084A78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084A78);
		  /* 82084A78h */ case    0:  		/* lwz R11, <#[R11 + 44]> */
		/* 82084A78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 82084A78h case    0:*/		return 0x82084A7C;
		  /* 82084A7Ch */ case    1:  		/* rlwinm R11, R11, 30, 2, 31 */
		/* 82084A7Ch case    1:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R11,regs.R11);
		/* 82084A7Ch case    1:*/		return 0x82084A80;
		  /* 82084A80h */ case    2:  		/* stwu R11, <#[R3 + 4]> */
		/* 82084A80h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82084A80h case    2:*/		return 0x82084A84;
		  /* 82084A84h */ case    3:  		/* stw R3, <#[R31 + 48]> */
		/* 82084A84h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82084A84h case    3:*/		return 0x82084A88;
	}
	return 0x82084A88;
} // Block from 82084A78h-82084A88h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82084A88h
// Function '?WriteMMRegUlong@D3D@@YAXKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084A88);
		  /* 82084A88h */ case    0:  		/* lbz R11, <#[R31 + 11071]> */
		/* 82084A88h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3F) );
		/* 82084A88h case    0:*/		return 0x82084A8C;
		  /* 82084A8Ch */ case    1:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 82084A8Ch case    1:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 82084A8Ch case    1:*/		return 0x82084A90;
		  /* 82084A90h */ case    2:  		/* lwz R11, <#[R27 + 24]> */
		/* 82084A90h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000018) );
		/* 82084A90h case    2:*/		return 0x82084A94;
		  /* 82084A94h */ case    3:  		/* stw R11, <#[R31 + 10536]> */
		/* 82084A94h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00002928) );
		/* 82084A94h case    3:*/		return 0x82084A98;
		  /* 82084A98h */ case    4:  		/* bc 12, CR0_EQ, 28 */
		/* 82084A98h case    4:*/		if ( regs.CR[0].eq ) { return 0x82084AB4;  }
		/* 82084A98h case    4:*/		return 0x82084A9C;
		  /* 82084A9Ch */ case    5:  		/* lwz R11, <#[R31 + 12816]> */
		/* 82084A9Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003210) );
		/* 82084A9Ch case    5:*/		return 0x82084AA0;
	}
	return 0x82084AA0;
} // Block from 82084A88h-82084AA0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82084AA0h
// Function '?Out@Hang@D3D@@QAAXPBDZZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084AA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084AA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084AA0);
		  /* 82084AA0h */ case    0:  		/* li R12, 1 */
		/* 82084AA0h case    0:*/		cpu::op::li<0>(regs,&regs.R12,0x1);
		/* 82084AA0h case    0:*/		return 0x82084AA4;
		  /* 82084AA4h */ case    1:  		/* rldicr R12, R12, 56, 63 */
		/* 82084AA4h case    1:*/		cpu::op::rldicr<0,56,63>(regs,&regs.R12,regs.R12);
		/* 82084AA4h case    1:*/		return 0x82084AA8;
		  /* 82084AA8h */ case    2:  		/* or R17, R17, R12 */
		/* 82084AA8h case    2:*/		cpu::op::or<0>(regs,&regs.R17,regs.R17,regs.R12);
		/* 82084AA8h case    2:*/		return 0x82084AAC;
		  /* 82084AACh */ case    3:  		/* lwz R11, <#[R11 + 28]> */
		/* 82084AACh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 82084AACh case    3:*/		return 0x82084AB0;
		  /* 82084AB0h */ case    4:  		/* stw R11, <#[R31 + 10372]> */
		/* 82084AB0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00002884) );
		/* 82084AB0h case    4:*/		return 0x82084AB4;
	}
	return 0x82084AB4;
} // Block from 82084AA0h-82084AB4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82084AB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084AB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084AB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084AB4);
		  /* 82084AB4h */ case    0:  		/* lwz R11, <#[R31 + 10580]> */
		/* 82084AB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002954) );
		/* 82084AB4h case    0:*/		return 0x82084AB8;
		  /* 82084AB8h */ case    1:  		/* rlwinm R10, R11, 0, 29, 31 */
		/* 82084AB8h case    1:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R11);
		/* 82084AB8h case    1:*/		return 0x82084ABC;
		  /* 82084ABCh */ case    2:  		/* cmplwi CR6, R10, 4 */
		/* 82084ABCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 82084ABCh case    2:*/		return 0x82084AC0;
		  /* 82084AC0h */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 82084AC0h case    3:*/		if ( regs.CR[6].eq ) { return 0x82084AD8;  }
		/* 82084AC0h case    3:*/		return 0x82084AC4;
		  /* 82084AC4h */ case    4:  		/* li R10, 1 */
		/* 82084AC4h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82084AC4h case    4:*/		return 0x82084AC8;
		  /* 82084AC8h */ case    5:  		/* oris R17, R17, 8 */
		/* 82084AC8h case    5:*/		cpu::op::oris<0>(regs,&regs.R17,regs.R17,0x8);
		/* 82084AC8h case    5:*/		return 0x82084ACC;
		  /* 82084ACCh */ case    6:  		/* rlwimi R11, R10, 2, 29, 31 */
		/* 82084ACCh case    6:*/		cpu::op::rlwimi<0,2,29,31>(regs,&regs.R11,regs.R10);
		/* 82084ACCh case    6:*/		return 0x82084AD0;
		  /* 82084AD0h */ case    7:  		/* ori R17, R17, 8 */
		/* 82084AD0h case    7:*/		cpu::op::ori<0>(regs,&regs.R17,regs.R17,0x8);
		/* 82084AD0h case    7:*/		return 0x82084AD4;
		  /* 82084AD4h */ case    8:  		/* stw R11, <#[R31 + 10580]> */
		/* 82084AD4h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00002954) );
		/* 82084AD4h case    8:*/		return 0x82084AD8;
	}
	return 0x82084AD8;
} // Block from 82084AB4h-82084AD8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82084AD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084AD8);
		  /* 82084AD8h */ case    0:  		/* lis R10, -32215 */
		/* 82084AD8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8229);
		/* 82084AD8h case    0:*/		return 0x82084ADC;
		  /* 82084ADCh */ case    1:  		/* lwz R7, <#[R27 + 20]> */
		/* 82084ADCh case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R27 + 0x00000014) );
		/* 82084ADCh case    1:*/		return 0x82084AE0;
		  /* 82084AE0h */ case    2:  		/* lwz R6, <#[R25 + 20]> */
		/* 82084AE0h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R25 + 0x00000014) );
		/* 82084AE0h case    2:*/		return 0x82084AE4;
		  /* 82084AE4h */ case    3:  		/* lis R9, -32215 */
		/* 82084AE4h case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8229);
		/* 82084AE4h case    3:*/		return 0x82084AE8;
		  /* 82084AE8h */ case    4:  		/* lwz R11, <#[R10 - 31304]> */
		/* 82084AE8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0xFFFF85B8) );
		/* 82084AE8h case    4:*/		return 0x82084AEC;
		  /* 82084AECh */ case    5:  		/* rlwinm. R8, R11, 0, 31, 31 */
		/* 82084AECh case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R11);
		/* 82084AECh case    5:*/		return 0x82084AF0;
		  /* 82084AF0h */ case    6:  		/* bc 4, CR0_EQ, 28 */
		/* 82084AF0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82084B0C;  }
		/* 82084AF0h case    6:*/		return 0x82084AF4;
		  /* 82084AF4h */ case    7:  		/* ori R8, R11, 1 */
		/* 82084AF4h case    7:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R11,0x1);
		/* 82084AF4h case    7:*/		return 0x82084AF8;
		  /* 82084AF8h */ case    8:  		/* lis R11, 6 */
		/* 82084AF8h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0x6);
		/* 82084AF8h case    8:*/		return 0x82084AFC;
		  /* 82084AFCh */ case    9:  		/* stw R8, <#[R10 - 31304]> */
		/* 82084AFCh case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0xFFFF85B8) );
		/* 82084AFCh case    9:*/		return 0x82084B00;
		  /* 82084B00h */ case   10:  		/* ori R11, R11, 1023 */
		/* 82084B00h case   10:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x3FF);
		/* 82084B00h case   10:*/		return 0x82084B04;
		  /* 82084B04h */ case   11:  		/* stw R11, <#[R9 - 31308]> */
		/* 82084B04h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0xFFFF85B4) );
		/* 82084B04h case   11:*/		return 0x82084B08;
		  /* 82084B08h */ case   12:  		/* b 8 */
		/* 82084B08h case   12:*/		return 0x82084B10;
		/* 82084B08h case   12:*/		return 0x82084B0C;
	}
	return 0x82084B0C;
} // Block from 82084AD8h-82084B0Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 82084B0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084B0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084B0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084B0C);
		  /* 82084B0Ch */ case    0:  		/* lwz R11, <#[R9 - 31308]> */
		/* 82084B0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0xFFFF85B4) );
		/* 82084B0Ch case    0:*/		return 0x82084B10;
	}
	return 0x82084B10;
} // Block from 82084B0Ch-82084B10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82084B10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084B10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084B10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084B10);
		  /* 82084B10h */ case    0:  		/* and R10, R7, R11 */
		/* 82084B10h case    0:*/		cpu::op::and<0>(regs,&regs.R10,regs.R7,regs.R11);
		/* 82084B10h case    0:*/		return 0x82084B14;
		  /* 82084B14h */ case    1:  		/* lwz R9, <#[R31 + 13904]> */
		/* 82084B14h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00003650) );
		/* 82084B14h case    1:*/		return 0x82084B18;
		  /* 82084B18h */ case    2:  		/* and R11, R6, R11 */
		/* 82084B18h case    2:*/		cpu::op::and<0>(regs,&regs.R11,regs.R6,regs.R11);
		/* 82084B18h case    2:*/		return 0x82084B1C;
		  /* 82084B1Ch */ case    3:  		/* cmplwi CR6, R9, 0 */
		/* 82084B1Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82084B1Ch case    3:*/		return 0x82084B20;
		  /* 82084B20h */ case    4:  		/* subf R11, R11, R10 */
		/* 82084B20h case    4:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82084B20h case    4:*/		return 0x82084B24;
		  /* 82084B24h */ case    5:  		/* addic R10, R11, -1 */
		/* 82084B24h case    5:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 82084B24h case    5:*/		return 0x82084B28;
	}
	return 0x82084B28;
} // Block from 82084B10h-82084B28h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82084B28h
// Function '?HangStateDump@D3D@@YAXPAVHang@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084B28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084B28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084B28);
		  /* 82084B28h */ case    0:  		/* subfe R28, R10, R11 */
		/* 82084B28h case    0:*/		cpu::op::subfe<0>(regs,&regs.R28,regs.R10,regs.R11);
		/* 82084B28h case    0:*/		return 0x82084B2C;
		  /* 82084B2Ch */ case    1:  		/* bc 4, CR6_EQ, -412 */
		/* 82084B2Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82084990;  }
		/* 82084B2Ch case    1:*/		return 0x82084B30;
		  /* 82084B30h */ case    2:  		/* lwz R11, <#[R29 + 40]> */
		/* 82084B30h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000028) );
		/* 82084B30h case    2:*/		return 0x82084B34;
		  /* 82084B34h */ case    3:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 82084B34h case    3:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 82084B34h case    3:*/		return 0x82084B38;
		  /* 82084B38h */ case    4:  		/* bc 12, CR0_EQ, -424 */
		/* 82084B38h case    4:*/		if ( regs.CR[0].eq ) { return 0x82084990;  }
		/* 82084B38h case    4:*/		return 0x82084B3C;
		  /* 82084B3Ch */ case    5:  		/* li R3, 245 */
		/* 82084B3Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0xF5);
		/* 82084B3Ch case    5:*/		return 0x82084B40;
		  /* 82084B40h */ case    6:  		/* bl 2000584 */
		/* 82084B40h case    6:*/		regs.LR = 0x82084B44; return 0x8226D208;
		/* 82084B40h case    6:*/		return 0x82084B44;
	}
	return 0x82084B44;
} // Block from 82084B28h-82084B44h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82084B44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084B44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084B44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084B44);
		  /* 82084B44h */ case    0:  		/* lwz R10, <#[R25 + 8]> */
		/* 82084B44h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000008) );
		/* 82084B44h case    0:*/		return 0x82084B48;
		  /* 82084B48h */ case    1:  		/* lbz R11, <#[R31 + 11068]> */
		/* 82084B48h case    1:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3C) );
		/* 82084B48h case    1:*/		return 0x82084B4C;
		  /* 82084B4Ch */ case    2:  		/* lwz R26, <#[R31 + 10580]> */
		/* 82084B4Ch case    2:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R31 + 0x00002954) );
		/* 82084B4Ch case    2:*/		return 0x82084B50;
		  /* 82084B50h */ case    3:  		/* lwz R24, <#[R25 + 12]> */
		/* 82084B50h case    3:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R25 + 0x0000000C) );
		/* 82084B50h case    3:*/		return 0x82084B54;
		  /* 82084B54h */ case    4:  		/* rlwinm. R11, R11, 0, 25, 25 */
		/* 82084B54h case    4:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R11);
		/* 82084B54h case    4:*/		return 0x82084B58;
		  /* 82084B58h */ case    5:  		/* mr R29, R26 */
		/* 82084B58h case    5:*/		regs.R29 = regs.R26;
		/* 82084B58h case    5:*/		return 0x82084B5C;
		  /* 82084B5Ch */ case    6:  		/* stw R10, <#[R1 + 80]> */
		/* 82084B5Ch case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82084B5Ch case    6:*/		return 0x82084B60;
		  /* 82084B60h */ case    7:  		/* bc 12, CR0_EQ, 176 */
		/* 82084B60h case    7:*/		if ( regs.CR[0].eq ) { return 0x82084C10;  }
		/* 82084B60h case    7:*/		return 0x82084B64;
		  /* 82084B64h */ case    8:  		/* cmplwi CR6, R27, 0 */
		/* 82084B64h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82084B64h case    8:*/		return 0x82084B68;
		  /* 82084B68h */ case    9:  		/* bc 12, CR6_EQ, 64 */
		/* 82084B68h case    9:*/		if ( regs.CR[6].eq ) { return 0x82084BA8;  }
		/* 82084B68h case    9:*/		return 0x82084B6C;
		  /* 82084B6Ch */ case   10:  		/* lwz R11, <#[R31 + 10556]> */
		/* 82084B6Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000293C) );
		/* 82084B6Ch case   10:*/		return 0x82084B70;
		  /* 82084B70h */ case   11:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 82084B70h case   11:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 82084B70h case   11:*/		return 0x82084B74;
		  /* 82084B74h */ case   12:  		/* bc 4, CR0_EQ, 56 */
		/* 82084B74h case   12:*/		if ( !regs.CR[0].eq ) { return 0x82084BAC;  }
		/* 82084B74h case   12:*/		return 0x82084B78;
		  /* 82084B78h */ case   13:  		/* lwz R11, <#[R27 + 28]> */
		/* 82084B78h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000001C) );
		/* 82084B78h case   13:*/		return 0x82084B7C;
		  /* 82084B7Ch */ case   14:  		/* rlwinm. R9, R11, 0, 27, 27 */
		/* 82084B7Ch case   14:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R9,regs.R11);
		/* 82084B7Ch case   14:*/		return 0x82084B80;
		  /* 82084B80h */ case   15:  		/* bc 4, CR0_EQ, 44 */
		/* 82084B80h case   15:*/		if ( !regs.CR[0].eq ) { return 0x82084BAC;  }
		/* 82084B80h case   15:*/		return 0x82084B84;
		  /* 82084B84h */ case   16:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 82084B84h case   16:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 82084B84h case   16:*/		return 0x82084B88;
		  /* 82084B88h */ case   17:  		/* bc 4, CR0_EQ, 36 */
		/* 82084B88h case   17:*/		if ( !regs.CR[0].eq ) { return 0x82084BAC;  }
		/* 82084B88h case   17:*/		return 0x82084B8C;
		  /* 82084B8Ch */ case   18:  		/* lbz R11, <#[R31 + 11071]> */
		/* 82084B8Ch case   18:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3F) );
		/* 82084B8Ch case   18:*/		return 0x82084B90;
		  /* 82084B90h */ case   19:  		/* li R19, 0 */
		/* 82084B90h case   19:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 82084B90h case   19:*/		return 0x82084B94;
		  /* 82084B94h */ case   20:  		/* mr R9, R11 */
		/* 82084B94h case   20:*/		regs.R9 = regs.R11;
		/* 82084B94h case   20:*/		return 0x82084B98;
		  /* 82084B98h */ case   21:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82084B98h case   21:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82084B98h case   21:*/		return 0x82084B9C;
		  /* 82084B9Ch */ case   22:  		/* rlwinm R9, R9, 0, 31, 31 */
		/* 82084B9Ch case   22:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R9);
		/* 82084B9Ch case   22:*/		return 0x82084BA0;
		  /* 82084BA0h */ case   23:  		/* stb R11, <#[R31 + 11071]> */
		/* 82084BA0h case   23:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00002B3F) );
		/* 82084BA0h case   23:*/		return 0x82084BA4;
		  /* 82084BA4h */ case   24:  		/* stw R9, <#[R1 + 96]> */
		/* 82084BA4h case   24:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 82084BA4h case   24:*/		return 0x82084BA8;
	}
	return 0x82084BA8;
} // Block from 82084B44h-82084BA8h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82084BA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084BA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084BA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084BA8);
		  /* 82084BA8h */ case    0:  		/* rlwimi R29, R22, 0, 29, 31 */
		/* 82084BA8h case    0:*/		cpu::op::rlwimi<0,0,29,31>(regs,&regs.R29,regs.R22);
		/* 82084BA8h case    0:*/		return 0x82084BAC;
	}
	return 0x82084BAC;
} // Block from 82084BA8h-82084BACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82084BACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084BAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084BAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084BAC);
		  /* 82084BACh */ case    0:  		/* rlwinm R11, R17, 0, 13, 13 */
		/* 82084BACh case    0:*/		cpu::op::rlwinm<0,0,13,13>(regs,&regs.R11,regs.R17);
		/* 82084BACh case    0:*/		return 0x82084BB0;
		  /* 82084BB0h */ case    1:  		/* cmpldi CR6, R11, 0 */
		/* 82084BB0h case    1:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82084BB0h case    1:*/		return 0x82084BB4;
		  /* 82084BB4h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 82084BB4h case    2:*/		if ( regs.CR[6].eq ) { return 0x82084BC8;  }
		/* 82084BB4h case    2:*/		return 0x82084BB8;
		  /* 82084BB8h */ case    3:  		/* or R11, R10, R19 */
		/* 82084BB8h case    3:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R19);
		/* 82084BB8h case    3:*/		return 0x82084BBC;
		  /* 82084BBCh */ case    4:  		/* or R10, R24, R16 */
		/* 82084BBCh case    4:*/		cpu::op::or<0>(regs,&regs.R10,regs.R24,regs.R16);
		/* 82084BBCh case    4:*/		return 0x82084BC0;
		  /* 82084BC0h */ case    5:  		/* stw R11, <#[R1 + 84]> */
		/* 82084BC0h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82084BC0h case    5:*/		return 0x82084BC4;
		  /* 82084BC4h */ case    6:  		/* stw R10, <#[R1 + 88]> */
		/* 82084BC4h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 82084BC4h case    6:*/		return 0x82084BC8;
	}
	return 0x82084BC8;
} // Block from 82084BACh-82084BC8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82084BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084BC8);
		  /* 82084BC8h */ case    0:  		/* lbz R11, <#[R31 + 11071]> */
		/* 82084BC8h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3F) );
		/* 82084BC8h case    0:*/		return 0x82084BCC;
		  /* 82084BCCh */ case    1:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 82084BCCh case    1:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 82084BCCh case    1:*/		return 0x82084BD0;
		  /* 82084BD0h */ case    2:  		/* bc 12, CR0_EQ, 28 */
		/* 82084BD0h case    2:*/		if ( regs.CR[0].eq ) { return 0x82084BEC;  }
		/* 82084BD0h case    2:*/		return 0x82084BD4;
		  /* 82084BD4h */ case    3:  		/* rlwinm R10, R29, 0, 29, 31 */
		/* 82084BD4h case    3:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R29);
		/* 82084BD4h case    3:*/		return 0x82084BD8;
		  /* 82084BD8h */ case    4:  		/* lwz R11, <#[R31 + 10372]> */
		/* 82084BD8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002884) );
		/* 82084BD8h case    4:*/		return 0x82084BDC;
		  /* 82084BDCh */ case    5:  		/* cmplwi CR6, R10, 5 */
		/* 82084BDCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000005);
		/* 82084BDCh case    5:*/		return 0x82084BE0;
		  /* 82084BE0h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 82084BE0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82084BE8;  }
		/* 82084BE0h case    6:*/		return 0x82084BE4;
		  /* 82084BE4h */ case    7:  		/* rlwinm R11, R11, 0, 16, 11 */
		/* 82084BE4h case    7:*/		cpu::op::rlwinm<0,0,16,11>(regs,&regs.R11,regs.R11);
		/* 82084BE4h case    7:*/		return 0x82084BE8;
	}
	return 0x82084BE8;
} // Block from 82084BC8h-82084BE8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82084BE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084BE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084BE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084BE8);
		  /* 82084BE8h */ case    0:  		/* stw R11, <#[R1 + 104]> */
		/* 82084BE8h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 82084BE8h case    0:*/		return 0x82084BEC;
	}
	return 0x82084BEC;
} // Block from 82084BE8h-82084BECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82084BECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084BEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084BEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084BEC);
		  /* 82084BECh */ case    0:  		/* lwz R11, <#[R31 + 13076]> */
		/* 82084BECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003314) );
		/* 82084BECh case    0:*/		return 0x82084BF0;
		  /* 82084BF0h */ case    1:  		/* cmplw CR6, R29, R11 */
		/* 82084BF0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82084BF0h case    1:*/		return 0x82084BF4;
		  /* 82084BF4h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 82084BF4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82084C04;  }
		/* 82084BF4h case    2:*/		return 0x82084BF8;
		  /* 82084BF8h */ case    3:  		/* rlwinm R11, R17, 0, 28, 28 */
		/* 82084BF8h case    3:*/		cpu::op::rlwinm<0,0,28,28>(regs,&regs.R11,regs.R17);
		/* 82084BF8h case    3:*/		return 0x82084BFC;
		  /* 82084BFCh */ case    4:  		/* cmpldi CR6, R11, 0 */
		/* 82084BFCh case    4:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82084BFCh case    4:*/		return 0x82084C00;
		  /* 82084C00h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 82084C00h case    5:*/		if ( regs.CR[6].eq ) { return 0x82084C10;  }
		/* 82084C00h case    5:*/		return 0x82084C04;
	}
	return 0x82084C04;
} // Block from 82084BECh-82084C04h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82084C04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084C04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084C04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084C04);
		  /* 82084C04h */ case    0:  		/* stw R29, <#[R31 + 13076]> */
		/* 82084C04h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00003314) );
		/* 82084C04h case    0:*/		return 0x82084C08;
		  /* 82084C08h */ case    1:  		/* ori R17, R17, 8 */
		/* 82084C08h case    1:*/		cpu::op::ori<0>(regs,&regs.R17,regs.R17,0x8);
		/* 82084C08h case    1:*/		return 0x82084C0C;
		  /* 82084C0Ch */ case    2:  		/* stw R29, <#[R1 + 100]> */
		/* 82084C0Ch case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000064) );
		/* 82084C0Ch case    2:*/		return 0x82084C10;
	}
	return 0x82084C10;
} // Block from 82084C04h-82084C10h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82084C10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084C10);
		  /* 82084C10h */ case    0:  		/* rlwinm R10, R19, 0, 1, 3 */
		/* 82084C10h case    0:*/		cpu::op::rlwinm<0,0,1,3>(regs,&regs.R10,regs.R19);
		/* 82084C10h case    0:*/		return 0x82084C14;
		  /* 82084C14h */ case    1:  		/* lbz R9, <#[R31 + 11071]> */
		/* 82084C14h case    1:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R31 + 0x00002B3F) );
		/* 82084C14h case    1:*/		return 0x82084C18;
		  /* 82084C18h */ case    2:  		/* lbz R11, <#[R31 + 11070]> */
		/* 82084C18h case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3E) );
		/* 82084C18h case    2:*/		return 0x82084C1C;
		  /* 82084C1Ch */ case    3:  		/* subfc R10, R10, R21 */
		/* 82084C1Ch case    3:*/		cpu::op::subfc<0>(regs,&regs.R10,regs.R10,regs.R21);
		/* 82084C1Ch case    3:*/		return 0x82084C20;
		  /* 82084C20h */ case    4:  		/* mr R8, R9 */
		/* 82084C20h case    4:*/		regs.R8 = regs.R9;
		/* 82084C20h case    4:*/		return 0x82084C24;
		  /* 82084C24h */ case    5:  		/* subfe R10, R10, R10 */
		/* 82084C24h case    5:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 82084C24h case    5:*/		return 0x82084C28;
		  /* 82084C28h */ case    6:  		/* rlwinm. R7, R11, 0, 0, 24 */
		/* 82084C28h case    6:*/		cpu::op::rlwinm<1,0,0,24>(regs,&regs.R7,regs.R11);
		/* 82084C28h case    6:*/		return 0x82084C2C;
		  /* 82084C2Ch */ case    7:  		/* rlwinm R10, R10, 0, 31, 31 */
		/* 82084C2Ch case    7:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R10);
		/* 82084C2Ch case    7:*/		return 0x82084C30;
		  /* 82084C30h */ case    8:  		/* or R10, R10, R9 */
		/* 82084C30h case    8:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82084C30h case    8:*/		return 0x82084C34;
		  /* 82084C34h */ case    9:  		/* rlwimi R10, R9, 0, 24, 30 */
		/* 82084C34h case    9:*/		cpu::op::rlwimi<0,0,24,30>(regs,&regs.R10,regs.R9);
		/* 82084C34h case    9:*/		return 0x82084C38;
		  /* 82084C38h */ case   10:  		/* stb R10, <#[R31 + 11071]> */
		/* 82084C38h case   10:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R31 + 0x00002B3F) );
		/* 82084C38h case   10:*/		return 0x82084C3C;
		  /* 82084C3Ch */ case   11:  		/* bc 4, CR0_EQ, 304 */
		/* 82084C3Ch case   11:*/		if ( !regs.CR[0].eq ) { return 0x82084D6C;  }
		/* 82084C3Ch case   11:*/		return 0x82084C40;
		  /* 82084C40h */ case   12:  		/* cmpwi CR6, R28, 0 */
		/* 82084C40h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 82084C40h case   12:*/		return 0x82084C44;
		  /* 82084C44h */ case   13:  		/* bc 4, CR6_EQ, 296 */
		/* 82084C44h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82084D6C;  }
		/* 82084C44h case   13:*/		return 0x82084C48;
		  /* 82084C48h */ case   14:  		/* rlwinm R11, R17, 0, 12, 12 */
		/* 82084C48h case   14:*/		cpu::op::rlwinm<0,0,12,12>(regs,&regs.R11,regs.R17);
		/* 82084C48h case   14:*/		return 0x82084C4C;
		  /* 82084C4Ch */ case   15:  		/* cmpldi CR6, R11, 0 */
		/* 82084C4Ch case   15:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82084C4Ch case   15:*/		return 0x82084C50;
		  /* 82084C50h */ case   16:  		/* bc 12, CR6_EQ, 356 */
		/* 82084C50h case   16:*/		if ( regs.CR[6].eq ) { return 0x82084DB4;  }
		/* 82084C50h case   16:*/		return 0x82084C54;
		  /* 82084C54h */ case   17:  		/* addi R28, R30, 872 */
		/* 82084C54h case   17:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R30,0x368);
		/* 82084C54h case   17:*/		return 0x82084C58;
		  /* 82084C58h */ case   18:  		/* lwz R5, <#[R30 + 32]> */
		/* 82084C58h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000020) );
		/* 82084C58h case   18:*/		return 0x82084C5C;
		  /* 82084C5Ch */ case   19:  		/* mr R3, R31 */
		/* 82084C5Ch case   19:*/		regs.R3 = regs.R31;
		/* 82084C5Ch case   19:*/		return 0x82084C60;
		  /* 82084C60h */ case   20:  		/* mr R4, R28 */
		/* 82084C60h case   20:*/		regs.R4 = regs.R28;
		/* 82084C60h case   20:*/		return 0x82084C64;
		  /* 82084C64h */ case   21:  		/* bl -1548 */
		/* 82084C64h case   21:*/		regs.LR = 0x82084C68; return 0x82084658;
		/* 82084C64h case   21:*/		return 0x82084C68;
		  /* 82084C68h */ case   22:  		/* lbz R11, <#[R31 + 11070]> */
		/* 82084C68h case   22:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3E) );
		/* 82084C68h case   22:*/		return 0x82084C6C;
		  /* 82084C6Ch */ case   23:  		/* cmplwi CR6, R20, 0 */
		/* 82084C6Ch case   23:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 82084C6Ch case   23:*/		return 0x82084C70;
		  /* 82084C70h */ case   24:  		/* andi. R10, R11, 191 */
		/* 82084C70h case   24:*/		cpu::op::andi<1>(regs,&regs.R10,regs.R11,0xBF);
		/* 82084C70h case   24:*/		return 0x82084C74;
		  /* 82084C74h */ case   25:  		/* stb R10, <#[R31 + 11070]> */
		/* 82084C74h case   25:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R31 + 0x00002B3E) );
		/* 82084C74h case   25:*/		return 0x82084C78;
		  /* 82084C78h */ case   26:  		/* bc 12, CR6_EQ, 184 */
		/* 82084C78h case   26:*/		if ( regs.CR[6].eq ) { return 0x82084D30;  }
		/* 82084C78h case   26:*/		return 0x82084C7C;
		  /* 82084C7Ch */ case   27:  		/* lwz R11, <#[R28]> */
		/* 82084C7Ch case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82084C7Ch case   27:*/		return 0x82084C80;
		  /* 82084C80h */ case   28:  		/* rlwinm. R11, R11, 0, 25, 25 */
		/* 82084C80h case   28:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R11);
		/* 82084C80h case   28:*/		return 0x82084C84;
		  /* 82084C84h */ case   29:  		/* bc 4, CR0_EQ, 172 */
		/* 82084C84h case   29:*/		if ( !regs.CR[0].eq ) { return 0x82084D30;  }
		/* 82084C84h case   29:*/		return 0x82084C88;
		  /* 82084C88h */ case   30:  		/* lbz R11, <#[R31 + 11068]> */
		/* 82084C88h case   30:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3C) );
		/* 82084C88h case   30:*/		return 0x82084C8C;
		  /* 82084C8Ch */ case   31:  		/* mr R3, R31 */
		/* 82084C8Ch case   31:*/		regs.R3 = regs.R31;
		/* 82084C8Ch case   31:*/		return 0x82084C90;
		  /* 82084C90h */ case   32:  		/* rlwinm. R11, R11, 0, 0, 24 */
		/* 82084C90h case   32:*/		cpu::op::rlwinm<1,0,0,24>(regs,&regs.R11,regs.R11);
		/* 82084C90h case   32:*/		return 0x82084C94;
		  /* 82084C94h */ case   33:  		/* bc 12, CR0_EQ, 12 */
		/* 82084C94h case   33:*/		if ( regs.CR[0].eq ) { return 0x82084CA0;  }
		/* 82084C94h case   33:*/		return 0x82084C98;
		  /* 82084C98h */ case   34:  		/* li R4, 0 */
		/* 82084C98h case   34:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82084C98h case   34:*/		return 0x82084C9C;
		  /* 82084C9Ch */ case   35:  		/* b 252 */
		/* 82084C9Ch case   35:*/		return 0x82084D98;
		/* 82084C9Ch case   35:*/		return 0x82084CA0;
	}
	return 0x82084CA0;
} // Block from 82084C10h-82084CA0h (36 instructions)

//////////////////////////////////////////////////////
// Block at 82084CA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084CA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084CA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084CA0);
		  /* 82084CA0h */ case    0:  		/* mr R6, R23 */
		/* 82084CA0h case    0:*/		regs.R6 = regs.R23;
		/* 82084CA0h case    0:*/		return 0x82084CA4;
		  /* 82084CA4h */ case    1:  		/* mr R5, R20 */
		/* 82084CA4h case    1:*/		regs.R5 = regs.R20;
		/* 82084CA4h case    1:*/		return 0x82084CA8;
		  /* 82084CA8h */ case    2:  		/* mr R4, R30 */
		/* 82084CA8h case    2:*/		regs.R4 = regs.R30;
		/* 82084CA8h case    2:*/		return 0x82084CAC;
		  /* 82084CACh */ case    3:  		/* bl -1444 */
		/* 82084CACh case    3:*/		regs.LR = 0x82084CB0; return 0x82084708;
		/* 82084CACh case    3:*/		return 0x82084CB0;
		  /* 82084CB0h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 82084CB0h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82084CB0h case    4:*/		return 0x82084CB4;
		  /* 82084CB4h */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 82084CB4h case    5:*/		if ( regs.CR[0].eq ) { return 0x82084CC0;  }
		/* 82084CB4h case    5:*/		return 0x82084CB8;
		  /* 82084CB8h */ case    6:  		/* mr R15, R23 */
		/* 82084CB8h case    6:*/		regs.R15 = regs.R23;
		/* 82084CB8h case    6:*/		return 0x82084CBC;
		  /* 82084CBCh */ case    7:  		/* b 40 */
		/* 82084CBCh case    7:*/		return 0x82084CE4;
		/* 82084CBCh case    7:*/		return 0x82084CC0;
	}
	return 0x82084CC0;
} // Block from 82084CA0h-82084CC0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82084CC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084CC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084CC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084CC0);
		  /* 82084CC0h */ case    0:  		/* mr R10, R23 */
		/* 82084CC0h case    0:*/		regs.R10 = regs.R23;
		/* 82084CC0h case    0:*/		return 0x82084CC4;
		  /* 82084CC4h */ case    1:  		/* mr R9, R27 */
		/* 82084CC4h case    1:*/		regs.R9 = regs.R27;
		/* 82084CC4h case    1:*/		return 0x82084CC8;
		  /* 82084CC8h */ case    2:  		/* mr R8, R25 */
		/* 82084CC8h case    2:*/		regs.R8 = regs.R25;
		/* 82084CC8h case    2:*/		return 0x82084CCC;
		  /* 82084CCCh */ case    3:  		/* mr R7, R20 */
		/* 82084CCCh case    3:*/		regs.R7 = regs.R20;
		/* 82084CCCh case    3:*/		return 0x82084CD0;
		  /* 82084CD0h */ case    4:  		/* addi R6, R1, 80 */
		/* 82084CD0h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82084CD0h case    4:*/		return 0x82084CD4;
		  /* 82084CD4h */ case    5:  		/* mr R5, R30 */
		/* 82084CD4h case    5:*/		regs.R5 = regs.R30;
		/* 82084CD4h case    5:*/		return 0x82084CD8;
		  /* 82084CD8h */ case    6:  		/* li R4, 0 */
		/* 82084CD8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82084CD8h case    6:*/		return 0x82084CDC;
		  /* 82084CDCh */ case    7:  		/* mr R3, R31 */
		/* 82084CDCh case    7:*/		regs.R3 = regs.R31;
		/* 82084CDCh case    7:*/		return 0x82084CE0;
		  /* 82084CE0h */ case    8:  		/* bl -2016 */
		/* 82084CE0h case    8:*/		regs.LR = 0x82084CE4; return 0x82084500;
		/* 82084CE0h case    8:*/		return 0x82084CE4;
	}
	return 0x82084CE4;
} // Block from 82084CC0h-82084CE4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82084CE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084CE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084CE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084CE4);
		  /* 82084CE4h */ case    0:  		/* xor R11, R29, R26 */
		/* 82084CE4h case    0:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R29,regs.R26);
		/* 82084CE4h case    0:*/		return 0x82084CE8;
		  /* 82084CE8h */ case    1:  		/* rlwinm. R11, R11, 0, 29, 31 */
		/* 82084CE8h case    1:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R11,regs.R11);
		/* 82084CE8h case    1:*/		return 0x82084CEC;
		  /* 82084CECh */ case    2:  		/* bc 12, CR0_EQ, 200 */
		/* 82084CECh case    2:*/		if ( regs.CR[0].eq ) { return 0x82084DB4;  }
		/* 82084CECh case    2:*/		return 0x82084CF0;
		  /* 82084CF0h */ case    3:  		/* lwz R11, <#[R28]> */
		/* 82084CF0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82084CF0h case    3:*/		return 0x82084CF4;
		  /* 82084CF4h */ case    4:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 82084CF4h case    4:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 82084CF4h case    4:*/		return 0x82084CF8;
		  /* 82084CF8h */ case    5:  		/* bc 12, CR0_EQ, 188 */
		/* 82084CF8h case    5:*/		if ( regs.CR[0].eq ) { return 0x82084DB4;  }
		/* 82084CF8h case    5:*/		return 0x82084CFC;
		  /* 82084CFCh */ case    6:  		/* li R6, 1 */
		/* 82084CFCh case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82084CFCh case    6:*/		return 0x82084D00;
		  /* 82084D00h */ case    7:  		/* mr R5, R20 */
		/* 82084D00h case    7:*/		regs.R5 = regs.R20;
		/* 82084D00h case    7:*/		return 0x82084D04;
		  /* 82084D04h */ case    8:  		/* mr R4, R30 */
		/* 82084D04h case    8:*/		regs.R4 = regs.R30;
		/* 82084D04h case    8:*/		return 0x82084D08;
		  /* 82084D08h */ case    9:  		/* mr R3, R31 */
		/* 82084D08h case    9:*/		regs.R3 = regs.R31;
		/* 82084D08h case    9:*/		return 0x82084D0C;
		  /* 82084D0Ch */ case   10:  		/* bl -1540 */
		/* 82084D0Ch case   10:*/		regs.LR = 0x82084D10; return 0x82084708;
		/* 82084D0Ch case   10:*/		return 0x82084D10;
		  /* 82084D10h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 82084D10h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82084D10h case   11:*/		return 0x82084D14;
		  /* 82084D14h */ case   12:  		/* bc 12, CR0_EQ, 160 */
		/* 82084D14h case   12:*/		if ( regs.CR[0].eq ) { return 0x82084DB4;  }
		/* 82084D14h case   12:*/		return 0x82084D18;
		  /* 82084D18h */ case   13:  		/* lbz R11, <#[R31 + 11070]> */
		/* 82084D18h case   13:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3E) );
		/* 82084D18h case   13:*/		return 0x82084D1C;
		  /* 82084D1Ch */ case   14:  		/* li R10, 1 */
		/* 82084D1Ch case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82084D1Ch case   14:*/		return 0x82084D20;
		  /* 82084D20h */ case   15:  		/* ori R11, R11, 64 */
		/* 82084D20h case   15:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x40);
		/* 82084D20h case   15:*/		return 0x82084D24;
		  /* 82084D24h */ case   16:  		/* stw R10, <#[R1 + 92]> */
		/* 82084D24h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 82084D24h case   16:*/		return 0x82084D28;
		  /* 82084D28h */ case   17:  		/* stb R11, <#[R31 + 11070]> */
		/* 82084D28h case   17:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00002B3E) );
		/* 82084D28h case   17:*/		return 0x82084D2C;
		  /* 82084D2Ch */ case   18:  		/* b 136 */
		/* 82084D2Ch case   18:*/		return 0x82084DB4;
		/* 82084D2Ch case   18:*/		return 0x82084D30;
	}
	return 0x82084D30;
} // Block from 82084CE4h-82084D30h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82084D30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084D30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084D30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084D30);
		  /* 82084D30h */ case    0:  		/* mulli R11, R23, 416 */
		/* 82084D30h case    0:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R23,0x1A0);
		/* 82084D30h case    0:*/		return 0x82084D34;
		  /* 82084D34h */ case    1:  		/* add R11, R11, R30 */
		/* 82084D34h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 82084D34h case    1:*/		return 0x82084D38;
		  /* 82084D38h */ case    2:  		/* xor R9, R29, R26 */
		/* 82084D38h case    2:*/		cpu::op::xor<0>(regs,&regs.R9,regs.R29,regs.R26);
		/* 82084D38h case    2:*/		return 0x82084D3C;
		  /* 82084D3Ch */ case    3:  		/* mr R15, R23 */
		/* 82084D3Ch case    3:*/		regs.R15 = regs.R23;
		/* 82084D3Ch case    3:*/		return 0x82084D40;
		  /* 82084D40h */ case    4:  		/* rlwinm. R9, R9, 0, 29, 31 */
		/* 82084D40h case    4:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R9,regs.R9);
		/* 82084D40h case    4:*/		return 0x82084D44;
		  /* 82084D44h */ case    5:  		/* ld R8, <#[R11 + 48]> */
		/* 82084D44h case    5:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R11 + 0x00000030) );
		/* 82084D44h case    5:*/		return 0x82084D48;
		  /* 82084D48h */ case    6:  		/* std R8, <#[R31 + 12264]> */
		/* 82084D48h case    6:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R31 + 0x00002FE8) );
		/* 82084D48h case    6:*/		return 0x82084D4C;
		  /* 82084D4Ch */ case    7:  		/* ld R11, <#[R11 + 56]> */
		/* 82084D4Ch case    7:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R11 + 0x00000038) );
		/* 82084D4Ch case    7:*/		return 0x82084D50;
		  /* 82084D50h */ case    8:  		/* std R11, <#[R31 + 12272]> */
		/* 82084D50h case    8:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00002FF0) );
		/* 82084D50h case    8:*/		return 0x82084D54;
		  /* 82084D54h */ case    9:  		/* bc 12, CR0_EQ, 96 */
		/* 82084D54h case    9:*/		if ( regs.CR[0].eq ) { return 0x82084DB4;  }
		/* 82084D54h case    9:*/		return 0x82084D58;
		  /* 82084D58h */ case   10:  		/* lwz R11, <#[R28]> */
		/* 82084D58h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82084D58h case   10:*/		return 0x82084D5C;
		  /* 82084D5Ch */ case   11:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 82084D5Ch case   11:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 82084D5Ch case   11:*/		return 0x82084D60;
		  /* 82084D60h */ case   12:  		/* bc 12, CR0_EQ, 84 */
		/* 82084D60h case   12:*/		if ( regs.CR[0].eq ) { return 0x82084DB4;  }
		/* 82084D60h case   12:*/		return 0x82084D64;
		  /* 82084D64h */ case   13:  		/* mr R11, R10 */
		/* 82084D64h case   13:*/		regs.R11 = regs.R10;
		/* 82084D64h case   13:*/		return 0x82084D68;
		  /* 82084D68h */ case   14:  		/* b -76 */
		/* 82084D68h case   14:*/		return 0x82084D1C;
		/* 82084D68h case   14:*/		return 0x82084D6C;
	}
	return 0x82084D6C;
} // Block from 82084D30h-82084D6Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 82084D6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084D6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084D6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084D6C);
		  /* 82084D6Ch */ case    0:  		/* rlwinm R10, R17, 0, 11, 12 */
		/* 82084D6Ch case    0:*/		cpu::op::rlwinm<0,0,11,12>(regs,&regs.R10,regs.R17);
		/* 82084D6Ch case    0:*/		return 0x82084D70;
		  /* 82084D70h */ case    1:  		/* cmpldi CR6, R10, 0 */
		/* 82084D70h case    1:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 82084D70h case    1:*/		return 0x82084D74;
		  /* 82084D74h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 82084D74h case    2:*/		if ( regs.CR[6].eq ) { return 0x82084DB4;  }
		/* 82084D74h case    2:*/		return 0x82084D78;
		  /* 82084D78h */ case    3:  		/* andi. R11, R11, 191 */
		/* 82084D78h case    3:*/		cpu::op::andi<1>(regs,&regs.R11,regs.R11,0xBF);
		/* 82084D78h case    3:*/		return 0x82084D7C;
		  /* 82084D7Ch */ case    4:  		/* stb R11, <#[R31 + 11070]> */
		/* 82084D7Ch case    4:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00002B3E) );
		/* 82084D7Ch case    4:*/		return 0x82084D80;
		  /* 82084D80h */ case    5:  		/* addi R4, R30, 872 */
		/* 82084D80h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R30,0x368);
		/* 82084D80h case    5:*/		return 0x82084D84;
		  /* 82084D84h */ case    6:  		/* mr R3, R31 */
		/* 82084D84h case    6:*/		regs.R3 = regs.R31;
		/* 82084D84h case    6:*/		return 0x82084D88;
		  /* 82084D88h */ case    7:  		/* lwz R5, <#[R30 + 32]> */
		/* 82084D88h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000020) );
		/* 82084D88h case    7:*/		return 0x82084D8C;
		  /* 82084D8Ch */ case    8:  		/* bl -1844 */
		/* 82084D8Ch case    8:*/		regs.LR = 0x82084D90; return 0x82084658;
		/* 82084D8Ch case    8:*/		return 0x82084D90;
	}
	return 0x82084D90;
} // Block from 82084D6Ch-82084D90h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82084D90h
// Function '?HangCommandBufferDump@D3D@@YAXPAVHang@1@KH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084D90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084D90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084D90);
		  /* 82084D90h */ case    0:  		/* mr R4, R28 */
		/* 82084D90h case    0:*/		regs.R4 = regs.R28;
		/* 82084D90h case    0:*/		return 0x82084D94;
		  /* 82084D94h */ case    1:  		/* mr R3, R31 */
		/* 82084D94h case    1:*/		regs.R3 = regs.R31;
		/* 82084D94h case    1:*/		return 0x82084D98;
	}
	return 0x82084D98;
} // Block from 82084D90h-82084D98h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82084D98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084D98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084D98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084D98);
		  /* 82084D98h */ case    0:  		/* mr R10, R23 */
		/* 82084D98h case    0:*/		regs.R10 = regs.R23;
		/* 82084D98h case    0:*/		return 0x82084D9C;
		  /* 82084D9Ch */ case    1:  		/* mr R9, R27 */
		/* 82084D9Ch case    1:*/		regs.R9 = regs.R27;
		/* 82084D9Ch case    1:*/		return 0x82084DA0;
		  /* 82084DA0h */ case    2:  		/* mr R8, R25 */
		/* 82084DA0h case    2:*/		regs.R8 = regs.R25;
		/* 82084DA0h case    2:*/		return 0x82084DA4;
		  /* 82084DA4h */ case    3:  		/* mr R7, R20 */
		/* 82084DA4h case    3:*/		regs.R7 = regs.R20;
		/* 82084DA4h case    3:*/		return 0x82084DA8;
		  /* 82084DA8h */ case    4:  		/* addi R6, R1, 80 */
		/* 82084DA8h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82084DA8h case    4:*/		return 0x82084DAC;
		  /* 82084DACh */ case    5:  		/* mr R5, R30 */
		/* 82084DACh case    5:*/		regs.R5 = regs.R30;
		/* 82084DACh case    5:*/		return 0x82084DB0;
		  /* 82084DB0h */ case    6:  		/* bl -2224 */
		/* 82084DB0h case    6:*/		regs.LR = 0x82084DB4; return 0x82084500;
		/* 82084DB0h case    6:*/		return 0x82084DB4;
	}
	return 0x82084DB4;
} // Block from 82084D98h-82084DB4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82084DB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084DB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084DB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084DB4);
		  /* 82084DB4h */ case    0:  		/* rlwinm R11, R17, 0, 11, 12 */
		/* 82084DB4h case    0:*/		cpu::op::rlwinm<0,0,11,12>(regs,&regs.R11,regs.R17);
		/* 82084DB4h case    0:*/		return 0x82084DB8;
		  /* 82084DB8h */ case    1:  		/* cmpldi CR6, R11, 0 */
		/* 82084DB8h case    1:*/		cpu::op::cmpldi<6>(regs,regs.R11,0x00000000);
		/* 82084DB8h case    1:*/		return 0x82084DBC;
		  /* 82084DBCh */ case    2:  		/* bc 12, CR6_EQ, 108 */
		/* 82084DBCh case    2:*/		if ( regs.CR[6].eq ) { return 0x82084E28;  }
		/* 82084DBCh case    2:*/		return 0x82084DC0;
		  /* 82084DC0h */ case    3:  		/* or R9, R24, R16 */
		/* 82084DC0h case    3:*/		cpu::op::or<0>(regs,&regs.R9,regs.R24,regs.R16);
		/* 82084DC0h case    3:*/		return 0x82084DC4;
		  /* 82084DC4h */ case    4:  		/* lwz R11, <#[R1 + 80]> */
		/* 82084DC4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82084DC4h case    4:*/		return 0x82084DC8;
		  /* 82084DC8h */ case    5:  		/* lbz R10, <#[R31 + 11070]> */
		/* 82084DC8h case    5:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002B3E) );
		/* 82084DC8h case    5:*/		return 0x82084DCC;
		  /* 82084DCCh */ case    6:  		/* oris R17, R17, 1 */
		/* 82084DCCh case    6:*/		cpu::op::oris<0>(regs,&regs.R17,regs.R17,0x1);
		/* 82084DCCh case    6:*/		return 0x82084DD0;
		  /* 82084DD0h */ case    7:  		/* stw R9, <#[R31 + 10532]> */
		/* 82084DD0h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00002924) );
		/* 82084DD0h case    7:*/		return 0x82084DD4;
		  /* 82084DD4h */ case    8:  		/* or R9, R11, R18 */
		/* 82084DD4h case    8:*/		cpu::op::or<0>(regs,&regs.R9,regs.R11,regs.R18);
		/* 82084DD4h case    8:*/		return 0x82084DD8;
		  /* 82084DD8h */ case    9:  		/* ori R17, R17, 32768 */
		/* 82084DD8h case    9:*/		cpu::op::ori<0>(regs,&regs.R17,regs.R17,0x8000);
		/* 82084DD8h case    9:*/		return 0x82084DDC;
		  /* 82084DDCh */ case   10:  		/* rlwinm. R10, R10, 0, 25, 25 */
		/* 82084DDCh case   10:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R10,regs.R10);
		/* 82084DDCh case   10:*/		return 0x82084DE0;
		  /* 82084DE0h */ case   11:  		/* stw R9, <#[R31 + 10528]> */
		/* 82084DE0h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00002920) );
		/* 82084DE0h case   11:*/		return 0x82084DE4;
		  /* 82084DE4h */ case   12:  		/* bc 12, CR0_EQ, 44 */
		/* 82084DE4h case   12:*/		if ( regs.CR[0].eq ) { return 0x82084E10;  }
		/* 82084DE4h case   12:*/		return 0x82084DE8;
		  /* 82084DE8h */ case   13:  		/* lwz R11, <#[R30 + 904]> */
		/* 82084DE8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000388) );
		/* 82084DE8h case   13:*/		return 0x82084DEC;
		  /* 82084DECh */ case   14:  		/* add R11, R11, R30 */
		/* 82084DECh case   14:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 82084DECh case   14:*/		return 0x82084DF0;
		  /* 82084DF0h */ case   15:  		/* addi R10, R11, 872 */
		/* 82084DF0h case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x368);
		/* 82084DF0h case   15:*/		return 0x82084DF4;
		  /* 82084DF4h */ case   16:  		/* lwz R10, <#[R11 + 880]> */
		/* 82084DF4h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000370) );
		/* 82084DF4h case   16:*/		return 0x82084DF8;
		  /* 82084DF8h */ case   17:  		/* lwz R11, <#[R11 + 884]> */
		/* 82084DF8h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000374) );
		/* 82084DF8h case   17:*/		return 0x82084DFC;
		  /* 82084DFCh */ case   18:  		/* or R10, R10, R19 */
		/* 82084DFCh case   18:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R19);
		/* 82084DFCh case   18:*/		return 0x82084E00;
		  /* 82084E00h */ case   19:  		/* or R11, R11, R16 */
		/* 82084E00h case   19:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R16);
		/* 82084E00h case   19:*/		return 0x82084E04;
		  /* 82084E04h */ case   20:  		/* stw R10, <#[R1 + 84]> */
		/* 82084E04h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 82084E04h case   20:*/		return 0x82084E08;
		  /* 82084E08h */ case   21:  		/* stw R11, <#[R1 + 88]> */
		/* 82084E08h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 82084E08h case   21:*/		return 0x82084E0C;
		  /* 82084E0Ch */ case   22:  		/* b 28 */
		/* 82084E0Ch case   22:*/		return 0x82084E28;
		/* 82084E0Ch case   22:*/		return 0x82084E10;
	}
	return 0x82084E10;
} // Block from 82084DB4h-82084E10h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82084E10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084E10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084E10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084E10);
		  /* 82084E10h */ case    0:  		/* cmplwi CR6, R19, 0 */
		/* 82084E10h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 82084E10h case    0:*/		return 0x82084E14;
		  /* 82084E14h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 82084E14h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82084E28;  }
		/* 82084E14h case    1:*/		return 0x82084E18;
		  /* 82084E18h */ case    2:  		/* cmplwi CR6, R18, 0 */
		/* 82084E18h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 82084E18h case    2:*/		return 0x82084E1C;
		  /* 82084E1Ch */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 82084E1Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82084E28;  }
		/* 82084E1Ch case    3:*/		return 0x82084E20;
		  /* 82084E20h */ case    4:  		/* stw R11, <#[R1 + 84]> */
		/* 82084E20h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82084E20h case    4:*/		return 0x82084E24;
		  /* 82084E24h */ case    5:  		/* stw R24, <#[R1 + 88]> */
		/* 82084E24h case    5:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000058) );
		/* 82084E24h case    5:*/		return 0x82084E28;
	}
	return 0x82084E28;
} // Block from 82084E10h-82084E28h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82084E28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084E28);
		  /* 82084E28h */ case    0:  		/* lbz R11, <#[R31 + 11068]> */
		/* 82084E28h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3C) );
		/* 82084E28h case    0:*/		return 0x82084E2C;
		  /* 82084E2Ch */ case    1:  		/* rlwinm. R11, R11, 0, 25, 25 */
		/* 82084E2Ch case    1:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R11);
		/* 82084E2Ch case    1:*/		return 0x82084E30;
		  /* 82084E30h */ case    2:  		/* bc 12, CR0_EQ, 780 */
		/* 82084E30h case    2:*/		if ( regs.CR[0].eq ) { return 0x8208513C;  }
		/* 82084E30h case    2:*/		return 0x82084E34;
		  /* 82084E34h */ case    3:  		/* lwz R11, <#[R31 + 56]> */
		/* 82084E34h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82084E34h case    3:*/		return 0x82084E38;
		  /* 82084E38h */ case    4:  		/* lwz R3, <#[R31 + 48]> */
		/* 82084E38h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82084E38h case    4:*/		return 0x82084E3C;
		  /* 82084E3Ch */ case    5:  		/* cmplw CR6, R3, R11 */
		/* 82084E3Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82084E3Ch case    5:*/		return 0x82084E40;
		  /* 82084E40h */ case    6:  		/* bc 4, CR6_GT, 12 */
		/* 82084E40h case    6:*/		if ( !regs.CR[6].gt ) { return 0x82084E4C;  }
		/* 82084E40h case    6:*/		return 0x82084E44;
		  /* 82084E44h */ case    7:  		/* mr R3, R31 */
		/* 82084E44h case    7:*/		regs.R3 = regs.R31;
		/* 82084E44h case    7:*/		return 0x82084E48;
		  /* 82084E48h */ case    8:  		/* bl -68928 */
		/* 82084E48h case    8:*/		regs.LR = 0x82084E4C; return 0x82074108;
		/* 82084E48h case    8:*/		return 0x82084E4C;
	}
	return 0x82084E4C;
} // Block from 82084E28h-82084E4Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82084E4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084E4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084E4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084E4C);
		  /* 82084E4Ch */ case    0:  		/* lis R11, -16384 */
		/* 82084E4Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC000);
		/* 82084E4Ch case    0:*/		return 0x82084E50;
		  /* 82084E50h */ case    1:  		/* lis R10, 5461 */
		/* 82084E50h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x1555);
		/* 82084E50h case    1:*/		return 0x82084E54;
		  /* 82084E54h */ case    2:  		/* ori R7, R11, 24576 */
		/* 82084E54h case    2:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R11,0x6000);
		/* 82084E54h case    2:*/		return 0x82084E58;
		  /* 82084E58h */ case    3:  		/* ori R11, R10, 21845 */
		/* 82084E58h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R10,0x5555);
		/* 82084E58h case    3:*/		return 0x82084E5C;
		  /* 82084E5Ch */ case    4:  		/* stwu R7, <#[R3 + 4]> */
		/* 82084E5Ch case    4:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82084E5Ch case    4:*/		return 0x82084E60;
		  /* 82084E60h */ case    5:  		/* lis R9, -16384 */
		/* 82084E60h case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFFC000);
		/* 82084E60h case    5:*/		return 0x82084E64;
		  /* 82084E64h */ case    6:  		/* mr R10, R7 */
		/* 82084E64h case    6:*/		regs.R10 = regs.R7;
		/* 82084E64h case    6:*/		return 0x82084E68;
		  /* 82084E68h */ case    7:  		/* ori R9, R9, 24832 */
		/* 82084E68h case    7:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x6100);
		/* 82084E68h case    7:*/		return 0x82084E6C;
		  /* 82084E6Ch */ case    8:  		/* li R10, 0 */
		/* 82084E6Ch case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82084E6Ch case    8:*/		return 0x82084E70;
		  /* 82084E70h */ case    9:  		/* rlwinm R8, R17, 0, 28, 28 */
		/* 82084E70h case    9:*/		cpu::op::rlwinm<0,0,28,28>(regs,&regs.R8,regs.R17);
		/* 82084E70h case    9:*/		return 0x82084E74;
		  /* 82084E74h */ case   10:  		/* stwu R11, <#[R3 + 4]> */
		/* 82084E74h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82084E74h case   10:*/		return 0x82084E78;
		  /* 82084E78h */ case   11:  		/* cmpldi CR6, R8, 0 */
		/* 82084E78h case   11:*/		cpu::op::cmpldi<6>(regs,regs.R8,0x00000000);
		/* 82084E78h case   11:*/		return 0x82084E7C;
		  /* 82084E7Ch */ case   12:  		/* stwu R9, <#[R3 + 4]> */
		/* 82084E7Ch case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82084E7Ch case   12:*/		return 0x82084E80;
		  /* 82084E80h */ case   13:  		/* mr R11, R3 */
		/* 82084E80h case   13:*/		regs.R11 = regs.R3;
		/* 82084E80h case   13:*/		return 0x82084E84;
		  /* 82084E84h */ case   14:  		/* stwu R10, <#[R11 + 4]> */
		/* 82084E84h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82084E84h case   14:*/		return 0x82084E88;
		  /* 82084E88h */ case   15:  		/* bc 12, CR6_EQ, 28 */
		/* 82084E88h case   15:*/		if ( regs.CR[6].eq ) { return 0x82084EA4;  }
		/* 82084E88h case   15:*/		return 0x82084E8C;
		  /* 82084E8Ch */ case   16:  		/* li R10, 8712 */
		/* 82084E8Ch case   16:*/		cpu::op::li<0>(regs,&regs.R10,0x2208);
		/* 82084E8Ch case   16:*/		return 0x82084E90;
		  /* 82084E90h */ case   17:  		/* li R12, -9 */
		/* 82084E90h case   17:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFFFF7);
		/* 82084E90h case   17:*/		return 0x82084E94;
		  /* 82084E94h */ case   18:  		/* stwu R10, <#[R11 + 4]> */
		/* 82084E94h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82084E94h case   18:*/		return 0x82084E98;
		  /* 82084E98h */ case   19:  		/* lwz R10, <#[R31 + 10580]> */
		/* 82084E98h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002954) );
		/* 82084E98h case   19:*/		return 0x82084E9C;
		  /* 82084E9Ch */ case   20:  		/* and R17, R17, R12 */
		/* 82084E9Ch case   20:*/		cpu::op::and<0>(regs,&regs.R17,regs.R17,regs.R12);
		/* 82084E9Ch case   20:*/		return 0x82084EA0;
		  /* 82084EA0h */ case   21:  		/* stwu R10, <#[R11 + 4]> */
		/* 82084EA0h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82084EA0h case   21:*/		return 0x82084EA4;
	}
	return 0x82084EA4;
} // Block from 82084E4Ch-82084EA4h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82084EA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084EA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084EA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084EA4);
		  /* 82084EA4h */ case    0:  		/* lwz R10, <#[R1 + 96]> */
		/* 82084EA4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 82084EA4h case    0:*/		return 0x82084EA8;
		  /* 82084EA8h */ case    1:  		/* cmpwi CR6, R10, 0 */
		/* 82084EA8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 82084EA8h case    1:*/		return 0x82084EAC;
		  /* 82084EACh */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 82084EACh case    2:*/		if ( regs.CR[6].eq ) { return 0x82084EC4;  }
		/* 82084EACh case    2:*/		return 0x82084EB0;
		  /* 82084EB0h */ case    3:  		/* lis R10, -16384 */
		/* 82084EB0h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFC000);
		/* 82084EB0h case    3:*/		return 0x82084EB4;
		  /* 82084EB4h */ case    4:  		/* li R9, 0 */
		/* 82084EB4h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82084EB4h case    4:*/		return 0x82084EB8;
		  /* 82084EB8h */ case    5:  		/* ori R10, R10, 9729 */
		/* 82084EB8h case    5:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x2601);
		/* 82084EB8h case    5:*/		return 0x82084EBC;
		  /* 82084EBCh */ case    6:  		/* stwu R10, <#[R11 + 4]> */
		/* 82084EBCh case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82084EBCh case    6:*/		return 0x82084EC0;
		  /* 82084EC0h */ case    7:  		/* stwu R9, <#[R11 + 4]> */
		/* 82084EC0h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82084EC0h case    7:*/		return 0x82084EC4;
	}
	return 0x82084EC4;
} // Block from 82084EA4h-82084EC4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82084EC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084EC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084EC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084EC4);
		  /* 82084EC4h */ case    0:  		/* lwz R10, <#[R1 + 100]> */
		/* 82084EC4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 82084EC4h case    0:*/		return 0x82084EC8;
		  /* 82084EC8h */ case    1:  		/* cmpwi CR6, R10, -1 */
		/* 82084EC8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 82084EC8h case    1:*/		return 0x82084ECC;
		  /* 82084ECCh */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 82084ECCh case    2:*/		if ( regs.CR[6].eq ) { return 0x82084EE8;  }
		/* 82084ECCh case    2:*/		return 0x82084ED0;
		  /* 82084ED0h */ case    3:  		/* lis R9, -16383 */
		/* 82084ED0h case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFFC001);
		/* 82084ED0h case    3:*/		return 0x82084ED4;
		  /* 82084ED4h */ case    4:  		/* li R8, 8712 */
		/* 82084ED4h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x2208);
		/* 82084ED4h case    4:*/		return 0x82084ED8;
		  /* 82084ED8h */ case    5:  		/* ori R9, R9, 21761 */
		/* 82084ED8h case    5:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x5501);
		/* 82084ED8h case    5:*/		return 0x82084EDC;
		  /* 82084EDCh */ case    6:  		/* stwu R9, <#[R11 + 4]> */
		/* 82084EDCh case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82084EDCh case    6:*/		return 0x82084EE0;
		  /* 82084EE0h */ case    7:  		/* stwu R8, <#[R11 + 4]> */
		/* 82084EE0h case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82084EE0h case    7:*/		return 0x82084EE4;
		  /* 82084EE4h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 82084EE4h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82084EE4h case    8:*/		return 0x82084EE8;
	}
	return 0x82084EE8;
} // Block from 82084EC4h-82084EE8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82084EE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084EE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084EE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084EE8);
		  /* 82084EE8h */ case    0:  		/* li R12, 1 */
		/* 82084EE8h case    0:*/		cpu::op::li<0>(regs,&regs.R12,0x1);
		/* 82084EE8h case    0:*/		return 0x82084EEC;
		  /* 82084EECh */ case    1:  		/* rldicr R12, R12, 56, 63 */
		/* 82084EECh case    1:*/		cpu::op::rldicr<0,56,63>(regs,&regs.R12,regs.R12);
		/* 82084EECh case    1:*/		return 0x82084EF0;
		  /* 82084EF0h */ case    2:  		/* and R10, R17, R12 */
		/* 82084EF0h case    2:*/		cpu::op::and<0>(regs,&regs.R10,regs.R17,regs.R12);
		/* 82084EF0h case    2:*/		return 0x82084EF4;
		  /* 82084EF4h */ case    3:  		/* cmpldi CR6, R10, 0 */
		/* 82084EF4h case    3:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 82084EF4h case    3:*/		return 0x82084EF8;
		  /* 82084EF8h */ case    4:  		/* bc 12, CR6_EQ, 32 */
		/* 82084EF8h case    4:*/		if ( regs.CR[6].eq ) { return 0x82084F18;  }
		/* 82084EF8h case    4:*/		return 0x82084EFC;
		  /* 82084EFCh */ case    5:  		/* li R10, 8193 */
		/* 82084EFCh case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x2001);
		/* 82084EFCh case    5:*/		return 0x82084F00;
		  /* 82084F00h */ case    6:  		/* li R12, -2 */
		/* 82084F00h case    6:*/		cpu::op::li<0>(regs,&regs.R12,0xFFFFFFFE);
		/* 82084F00h case    6:*/		return 0x82084F04;
		  /* 82084F04h */ case    7:  		/* stwu R10, <#[R11 + 4]> */
		/* 82084F04h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82084F04h case    7:*/		return 0x82084F08;
		  /* 82084F08h */ case    8:  		/* lwz R10, <#[R31 + 10372]> */
		/* 82084F08h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002884) );
		/* 82084F08h case    8:*/		return 0x82084F0C;
		  /* 82084F0Ch */ case    9:  		/* rldicr R12, R12, 56, 63 */
		/* 82084F0Ch case    9:*/		cpu::op::rldicr<0,56,63>(regs,&regs.R12,regs.R12);
		/* 82084F0Ch case    9:*/		return 0x82084F10;
		  /* 82084F10h */ case   10:  		/* and R17, R17, R12 */
		/* 82084F10h case   10:*/		cpu::op::and<0>(regs,&regs.R17,regs.R17,regs.R12);
		/* 82084F10h case   10:*/		return 0x82084F14;
		  /* 82084F14h */ case   11:  		/* stwu R10, <#[R11 + 4]> */
		/* 82084F14h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82084F14h case   11:*/		return 0x82084F18;
	}
	return 0x82084F18;
} // Block from 82084EE8h-82084F18h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82084F18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084F18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084F18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084F18);
		  /* 82084F18h */ case    0:  		/* lwz R10, <#[R1 + 104]> */
		/* 82084F18h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000068) );
		/* 82084F18h case    0:*/		return 0x82084F1C;
		  /* 82084F1Ch */ case    1:  		/* cmpwi CR6, R10, -1 */
		/* 82084F1Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 82084F1Ch case    1:*/		return 0x82084F20;
		  /* 82084F20h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 82084F20h case    2:*/		if ( regs.CR[6].eq ) { return 0x82084F3C;  }
		/* 82084F20h case    2:*/		return 0x82084F24;
		  /* 82084F24h */ case    3:  		/* lis R9, -16383 */
		/* 82084F24h case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFFC001);
		/* 82084F24h case    3:*/		return 0x82084F28;
		  /* 82084F28h */ case    4:  		/* li R8, 8193 */
		/* 82084F28h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x2001);
		/* 82084F28h case    4:*/		return 0x82084F2C;
		  /* 82084F2Ch */ case    5:  		/* ori R9, R9, 21761 */
		/* 82084F2Ch case    5:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x5501);
		/* 82084F2Ch case    5:*/		return 0x82084F30;
		  /* 82084F30h */ case    6:  		/* stwu R9, <#[R11 + 4]> */
		/* 82084F30h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82084F30h case    6:*/		return 0x82084F34;
		  /* 82084F34h */ case    7:  		/* stwu R8, <#[R11 + 4]> */
		/* 82084F34h case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82084F34h case    7:*/		return 0x82084F38;
		  /* 82084F38h */ case    8:  		/* stwu R10, <#[R11 + 4]> */
		/* 82084F38h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82084F38h case    8:*/		return 0x82084F3C;
	}
	return 0x82084F3C;
} // Block from 82084F18h-82084F3Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82084F3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084F3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084F3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084F3C);
		  /* 82084F3Ch */ case    0:  		/* rlwinm R10, R17, 0, 15, 15 */
		/* 82084F3Ch case    0:*/		cpu::op::rlwinm<0,0,15,15>(regs,&regs.R10,regs.R17);
		/* 82084F3Ch case    0:*/		return 0x82084F40;
		  /* 82084F40h */ case    1:  		/* cmpldi CR6, R10, 0 */
		/* 82084F40h case    1:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 82084F40h case    1:*/		return 0x82084F44;
		  /* 82084F44h */ case    2:  		/* bc 12, CR6_EQ, 44 */
		/* 82084F44h case    2:*/		if ( regs.CR[6].eq ) { return 0x82084F70;  }
		/* 82084F44h case    2:*/		return 0x82084F48;
		  /* 82084F48h */ case    3:  		/* lis R10, 1 */
		/* 82084F48h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x1);
		/* 82084F48h case    3:*/		return 0x82084F4C;
		  /* 82084F4Ch */ case    4:  		/* lis R12, -2 */
		/* 82084F4Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFFFE);
		/* 82084F4Ch case    4:*/		return 0x82084F50;
		  /* 82084F50h */ case    5:  		/* ori R10, R10, 8576 */
		/* 82084F50h case    5:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x2180);
		/* 82084F50h case    5:*/		return 0x82084F54;
		  /* 82084F54h */ case    6:  		/* ori R12, R12, 32767 */
		/* 82084F54h case    6:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0x7FFF);
		/* 82084F54h case    6:*/		return 0x82084F58;
		  /* 82084F58h */ case    7:  		/* stwu R10, <#[R11 + 4]> */
		/* 82084F58h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82084F58h case    7:*/		return 0x82084F5C;
		  /* 82084F5Ch */ case    8:  		/* lwz R10, <#[R31 + 10528]> */
		/* 82084F5Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002920) );
		/* 82084F5Ch case    8:*/		return 0x82084F60;
		  /* 82084F60h */ case    9:  		/* and R17, R17, R12 */
		/* 82084F60h case    9:*/		cpu::op::and<0>(regs,&regs.R17,regs.R17,regs.R12);
		/* 82084F60h case    9:*/		return 0x82084F64;
		  /* 82084F64h */ case   10:  		/* stwu R10, <#[R11 + 4]> */
		/* 82084F64h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82084F64h case   10:*/		return 0x82084F68;
		  /* 82084F68h */ case   11:  		/* lwz R10, <#[R31 + 10532]> */
		/* 82084F68h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002924) );
		/* 82084F68h case   11:*/		return 0x82084F6C;
		  /* 82084F6Ch */ case   12:  		/* stwu R10, <#[R11 + 4]> */
		/* 82084F6Ch case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82084F6Ch case   12:*/		return 0x82084F70;
	}
	return 0x82084F70;
} // Block from 82084F3Ch-82084F70h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82084F70h
// Function '?HangRecognizer@D3D@@YAXPAUD3DDevice@@P6AXPBD@ZP6AKK@ZP6AXKK@Z@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084F70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084F70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084F70);
		  /* 82084F70h */ case    0:  		/* lwz R10, <#[R1 + 84]> */
		/* 82084F70h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 82084F70h case    0:*/		return 0x82084F74;
		  /* 82084F74h */ case    1:  		/* cmpwi CR6, R10, -1 */
		/* 82084F74h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0xFFFFFFFF);
		/* 82084F74h case    1:*/		return 0x82084F78;
		  /* 82084F78h */ case    2:  		/* bc 12, CR6_EQ, 36 */
		/* 82084F78h case    2:*/		if ( regs.CR[6].eq ) { return 0x82084F9C;  }
		/* 82084F78h case    2:*/		return 0x82084F7C;
		  /* 82084F7Ch */ case    3:  		/* lis R8, -16382 */
		/* 82084F7Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFFC002);
		/* 82084F7Ch case    3:*/		return 0x82084F80;
		  /* 82084F80h */ case    4:  		/* lwz R9, <#[R1 + 88]> */
		/* 82084F80h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 82084F80h case    4:*/		return 0x82084F84;
		  /* 82084F84h */ case    5:  		/* li R6, 8576 */
		/* 82084F84h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x2180);
		/* 82084F84h case    5:*/		return 0x82084F88;
		  /* 82084F88h */ case    6:  		/* ori R8, R8, 21761 */
		/* 82084F88h case    6:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x5501);
		/* 82084F88h case    6:*/		return 0x82084F8C;
		  /* 82084F8Ch */ case    7:  		/* stwu R8, <#[R11 + 4]> */
		/* 82084F8Ch case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82084F8Ch case    7:*/		return 0x82084F90;
		  /* 82084F90h */ case    8:  		/* stwu R6, <#[R11 + 4]> */
		/* 82084F90h case    8:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82084F90h case    8:*/		return 0x82084F94;
		  /* 82084F94h */ case    9:  		/* stwu R10, <#[R11 + 4]> */
		/* 82084F94h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82084F94h case    9:*/		return 0x82084F98;
		  /* 82084F98h */ case   10:  		/* stwu R9, <#[R11 + 4]> */
		/* 82084F98h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82084F98h case   10:*/		return 0x82084F9C;
	}
	return 0x82084F9C;
} // Block from 82084F70h-82084F9Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82084F9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82084F9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82084F9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82084F9C);
		  /* 82084F9Ch */ case    0:  		/* lwz R9, <#[R1 + 92]> */
		/* 82084F9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x0000005C) );
		/* 82084F9Ch case    0:*/		return 0x82084FA0;
		  /* 82084FA0h */ case    1:  		/* cmpwi CR6, R9, -1 */
		/* 82084FA0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R9,0xFFFFFFFF);
		/* 82084FA0h case    1:*/		return 0x82084FA4;
		  /* 82084FA4h */ case    2:  		/* bc 12, CR6_EQ, 256 */
		/* 82084FA4h case    2:*/		if ( regs.CR[6].eq ) { return 0x820850A4;  }
		/* 82084FA4h case    2:*/		return 0x82084FA8;
		  /* 82084FA8h */ case    3:  		/* addi R10, R9, 112 */
		/* 82084FA8h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x70);
		/* 82084FA8h case    3:*/		return 0x82084FAC;
		  /* 82084FACh */ case    4:  		/* mr R6, R11 */
		/* 82084FACh case    4:*/		regs.R6 = regs.R11;
		/* 82084FACh case    4:*/		return 0x82084FB0;
		  /* 82084FB0h */ case    5:  		/* lis R11, -16383 */
		/* 82084FB0h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC001);
		/* 82084FB0h case    5:*/		return 0x82084FB4;
		  /* 82084FB4h */ case    6:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 82084FB4h case    6:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 82084FB4h case    6:*/		return 0x82084FB8;
		  /* 82084FB8h */ case    7:  		/* ori R11, R11, 9985 */
		/* 82084FB8h case    7:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2701);
		/* 82084FB8h case    7:*/		return 0x82084FBC;
		  /* 82084FBCh */ case    8:  		/* mulli R9, R9, 416 */
		/* 82084FBCh case    8:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R9,0x1A0);
		/* 82084FBCh case    8:*/		return 0x82084FC0;
		  /* 82084FC0h */ case    9:  		/* stwu R11, <#[R6 + 4]> */
		/* 82084FC0h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000004) );
		regs.R6 = (uint32)(regs.R6 + 0x00000004);
		/* 82084FC0h case    9:*/		return 0x82084FC4;
		  /* 82084FC4h */ case   10:  		/* lwz R8, <#[R30 + 32]> */
		/* 82084FC4h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000020) );
		/* 82084FC4h case   10:*/		return 0x82084FC8;
		  /* 82084FC8h */ case   11:  		/* lwzx R11, <#[R10 + R30]> */
		/* 82084FC8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 82084FC8h case   11:*/		return 0x82084FCC;
		  /* 82084FCCh */ case   12:  		/* add R11, R11, R30 */
		/* 82084FCCh case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 82084FCCh case   12:*/		return 0x82084FD0;
		  /* 82084FD0h */ case   13:  		/* add R5, R9, R30 */
		/* 82084FD0h case   13:*/		cpu::op::add<0>(regs,&regs.R5,regs.R9,regs.R30);
		/* 82084FD0h case   13:*/		return 0x82084FD4;
		  /* 82084FD4h */ case   14:  		/* cmpwi CR6, R15, -1 */
		/* 82084FD4h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R15,0xFFFFFFFF);
		/* 82084FD4h case   14:*/		return 0x82084FD8;
		  /* 82084FD8h */ case   15:  		/* lwz R11, <#[R11 + 872]> */
		/* 82084FD8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000368) );
		/* 82084FD8h case   15:*/		return 0x82084FDC;
		  /* 82084FDCh */ case   16:  		/* add R11, R11, R8 */
		/* 82084FDCh case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82084FDCh case   16:*/		return 0x82084FE0;
		  /* 82084FE0h */ case   17:  		/* rlwinm R9, R11, 12, 20, 31 */
		/* 82084FE0h case   17:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R9,regs.R11);
		/* 82084FE0h case   17:*/		return 0x82084FE4;
		  /* 82084FE4h */ case   18:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82084FE4h case   18:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82084FE4h case   18:*/		return 0x82084FE8;
		  /* 82084FE8h */ case   19:  		/* addi R9, R9, 512 */
		/* 82084FE8h case   19:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x200);
		/* 82084FE8h case   19:*/		return 0x82084FEC;
		  /* 82084FECh */ case   20:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82084FECh case   20:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82084FECh case   20:*/		return 0x82084FF0;
		  /* 82084FF0h */ case   21:  		/* add R11, R9, R11 */
		/* 82084FF0h case   21:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82084FF0h case   21:*/		return 0x82084FF4;
		  /* 82084FF4h */ case   22:  		/* stwu R11, <#[R6 + 4]> */
		/* 82084FF4h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000004) );
		regs.R6 = (uint32)(regs.R6 + 0x00000004);
		/* 82084FF4h case   22:*/		return 0x82084FF8;
		  /* 82084FF8h */ case   23:  		/* lwzx R11, <#[R10 + R30]> */
		/* 82084FF8h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 82084FF8h case   23:*/		return 0x82084FFC;
		  /* 82084FFCh */ case   24:  		/* mr R10, R6 */
		/* 82084FFCh case   24:*/		regs.R10 = regs.R6;
		/* 82084FFCh case   24:*/		return 0x82085000;
		  /* 82085000h */ case   25:  		/* add R11, R11, R30 */
		/* 82085000h case   25:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 82085000h case   25:*/		return 0x82085004;
		  /* 82085004h */ case   26:  		/* lwz R11, <#[R11 + 876]> */
		/* 82085004h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000036C) );
		/* 82085004h case   26:*/		return 0x82085008;
		  /* 82085008h */ case   27:  		/* rlwinm R11, R11, 30, 2, 31 */
		/* 82085008h case   27:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R11,regs.R11);
		/* 82085008h case   27:*/		return 0x8208500C;
		  /* 8208500Ch */ case   28:  		/* stwu R11, <#[R10 + 4]> */
		/* 8208500Ch case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 8208500Ch case   28:*/		return 0x82085010;
		  /* 82085010h */ case   29:  		/* lwz R9, <#[R31 + 11036]> */
		/* 82085010h case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00002B1C) );
		/* 82085010h case   29:*/		return 0x82085014;
		  /* 82085014h */ case   30:  		/* mr R11, R10 */
		/* 82085014h case   30:*/		regs.R11 = regs.R10;
		/* 82085014h case   30:*/		return 0x82085018;
		  /* 82085018h */ case   31:  		/* stw R9, <#[R5 + 64]> */
		/* 82085018h case   31:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R5 + 0x00000040) );
		/* 82085018h case   31:*/		return 0x8208501C;
		  /* 8208501Ch */ case   32:  		/* bc 12, CR6_EQ, 248 */
		/* 8208501Ch case   32:*/		if ( regs.CR[6].eq ) { return 0x82085114;  }
		/* 8208501Ch case   32:*/		return 0x82085020;
		  /* 82085020h */ case   33:  		/* addi R8, R15, 112 */
		/* 82085020h case   33:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R15,0x70);
		/* 82085020h case   33:*/		return 0x82085024;
		  /* 82085024h */ case   34:  		/* stwu R7, <#[R11 + 4]> */
		/* 82085024h case   34:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82085024h case   34:*/		return 0x82085028;
		  /* 82085028h */ case   35:  		/* mr R10, R7 */
		/* 82085028h case   35:*/		regs.R10 = regs.R7;
		/* 82085028h case   35:*/		return 0x8208502C;
		  /* 8208502Ch */ case   36:  		/* rlwinm R10, R8, 3, 0, 28 */
		/* 8208502Ch case   36:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R8);
		/* 8208502Ch case   36:*/		return 0x82085030;
		  /* 82085030h */ case   37:  		/* mr R8, R11 */
		/* 82085030h case   37:*/		regs.R8 = regs.R11;
		/* 82085030h case   37:*/		return 0x82085034;
		  /* 82085034h */ case   38:  		/* lis R9, 10922 */
		/* 82085034h case   38:*/		cpu::op::lis<0>(regs,&regs.R9,0x2AAA);
		/* 82085034h case   38:*/		return 0x82085038;
		  /* 82085038h */ case   39:  		/* lis R6, -16383 */
		/* 82085038h case   39:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFFC001);
		/* 82085038h case   39:*/		return 0x8208503C;
		  /* 8208503Ch */ case   40:  		/* ori R9, R9, 43690 */
		/* 8208503Ch case   40:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0xAAAA);
		/* 8208503Ch case   40:*/		return 0x82085040;
		  /* 82085040h */ case   41:  		/* mulli R11, R15, 416 */
		/* 82085040h case   41:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R15,0x1A0);
		/* 82085040h case   41:*/		return 0x82085044;
		  /* 82085044h */ case   42:  		/* stwu R9, <#[R8 + 4]> */
		/* 82085044h case   42:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x00000004) );
		regs.R8 = (uint32)(regs.R8 + 0x00000004);
		/* 82085044h case   42:*/		return 0x82085048;
		  /* 82085048h */ case   43:  		/* ori R9, R6, 9985 */
		/* 82085048h case   43:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R6,0x2701);
		/* 82085048h case   43:*/		return 0x8208504C;
		  /* 8208504Ch */ case   44:  		/* add R6, R11, R30 */
		/* 8208504Ch case   44:*/		cpu::op::add<0>(regs,&regs.R6,regs.R11,regs.R30);
		/* 8208504Ch case   44:*/		return 0x82085050;
		  /* 82085050h */ case   45:  		/* stwu R9, <#[R8 + 4]> */
		/* 82085050h case   45:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x00000004) );
		regs.R8 = (uint32)(regs.R8 + 0x00000004);
		/* 82085050h case   45:*/		return 0x82085054;
		  /* 82085054h */ case   46:  		/* lwzx R11, <#[R10 + R30]> */
		/* 82085054h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 82085054h case   46:*/		return 0x82085058;
		  /* 82085058h */ case   47:  		/* lwz R9, <#[R30 + 32]> */
		/* 82085058h case   47:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000020) );
		/* 82085058h case   47:*/		return 0x8208505C;
		  /* 8208505Ch */ case   48:  		/* add R11, R11, R30 */
		/* 8208505Ch case   48:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8208505Ch case   48:*/		return 0x82085060;
		  /* 82085060h */ case   49:  		/* lwz R11, <#[R11 + 872]> */
		/* 82085060h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000368) );
		/* 82085060h case   49:*/		return 0x82085064;
		  /* 82085064h */ case   50:  		/* add R11, R11, R9 */
		/* 82085064h case   50:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82085064h case   50:*/		return 0x82085068;
		  /* 82085068h */ case   51:  		/* rlwinm R9, R11, 12, 20, 31 */
		/* 82085068h case   51:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R9,regs.R11);
		/* 82085068h case   51:*/		return 0x8208506C;
		  /* 8208506Ch */ case   52:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 8208506Ch case   52:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 8208506Ch case   52:*/		return 0x82085070;
		  /* 82085070h */ case   53:  		/* addi R9, R9, 512 */
		/* 82085070h case   53:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x200);
		/* 82085070h case   53:*/		return 0x82085074;
		  /* 82085074h */ case   54:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82085074h case   54:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82085074h case   54:*/		return 0x82085078;
		  /* 82085078h */ case   55:  		/* add R11, R9, R11 */
		/* 82085078h case   55:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82085078h case   55:*/		return 0x8208507C;
		  /* 8208507Ch */ case   56:  		/* stwu R11, <#[R8 + 4]> */
		/* 8208507Ch case   56:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000004) );
		regs.R8 = (uint32)(regs.R8 + 0x00000004);
		/* 8208507Ch case   56:*/		return 0x82085080;
		  /* 82085080h */ case   57:  		/* lwzx R11, <#[R10 + R30]> */
		/* 82085080h case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 82085080h case   57:*/		return 0x82085084;
		  /* 82085084h */ case   58:  		/* mr R10, R8 */
		/* 82085084h case   58:*/		regs.R10 = regs.R8;
		/* 82085084h case   58:*/		return 0x82085088;
		  /* 82085088h */ case   59:  		/* add R11, R11, R30 */
		/* 82085088h case   59:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 82085088h case   59:*/		return 0x8208508C;
		  /* 8208508Ch */ case   60:  		/* lwz R11, <#[R11 + 876]> */
		/* 8208508Ch case   60:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000036C) );
		/* 8208508Ch case   60:*/		return 0x82085090;
		  /* 82085090h */ case   61:  		/* rlwinm R11, R11, 30, 2, 31 */
		/* 82085090h case   61:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R11,regs.R11);
		/* 82085090h case   61:*/		return 0x82085094;
		  /* 82085094h */ case   62:  		/* stwu R11, <#[R10 + 4]> */
		/* 82085094h case   62:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 82085094h case   62:*/		return 0x82085098;
		  /* 82085098h */ case   63:  		/* lwz R9, <#[R31 + 11036]> */
		/* 82085098h case   63:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00002B1C) );
		/* 82085098h case   63:*/		return 0x8208509C;
		  /* 8208509Ch */ case   64:  		/* stw R9, <#[R6 + 64]> */
		/* 8208509Ch case   64:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0x00000040) );
		/* 8208509Ch case   64:*/		return 0x820850A0;
		  /* 820850A0h */ case   65:  		/* b 112 */
		/* 820850A0h case   65:*/		return 0x82085110;
		/* 820850A0h case   65:*/		return 0x820850A4;
	}
	return 0x820850A4;
} // Block from 82084F9Ch-820850A4h (66 instructions)

//////////////////////////////////////////////////////
// Block at 820850A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820850A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820850A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820850A4);
		  /* 820850A4h */ case    0:  		/* cmpwi CR6, R15, -1 */
		/* 820850A4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R15,0xFFFFFFFF);
		/* 820850A4h case    0:*/		return 0x820850A8;
		  /* 820850A8h */ case    1:  		/* bc 12, CR6_EQ, 108 */
		/* 820850A8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82085114;  }
		/* 820850A8h case    1:*/		return 0x820850AC;
		  /* 820850ACh */ case    2:  		/* addi R10, R15, 112 */
		/* 820850ACh case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R15,0x70);
		/* 820850ACh case    2:*/		return 0x820850B0;
		  /* 820850B0h */ case    3:  		/* mr R6, R11 */
		/* 820850B0h case    3:*/		regs.R6 = regs.R11;
		/* 820850B0h case    3:*/		return 0x820850B4;
		  /* 820850B4h */ case    4:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 820850B4h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 820850B4h case    4:*/		return 0x820850B8;
		  /* 820850B8h */ case    5:  		/* mulli R9, R15, 416 */
		/* 820850B8h case    5:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R15,0x1A0);
		/* 820850B8h case    5:*/		return 0x820850BC;
		  /* 820850BCh */ case    6:  		/* stwu R14, <#[R6 + 4]> */
		/* 820850BCh case    6:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R6 + 0x00000004) );
		regs.R6 = (uint32)(regs.R6 + 0x00000004);
		/* 820850BCh case    6:*/		return 0x820850C0;
		  /* 820850C0h */ case    7:  		/* lwzx R11, <#[R10 + R30]> */
		/* 820850C0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 820850C0h case    7:*/		return 0x820850C4;
		  /* 820850C4h */ case    8:  		/* lwz R8, <#[R30 + 32]> */
		/* 820850C4h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000020) );
		/* 820850C4h case    8:*/		return 0x820850C8;
		  /* 820850C8h */ case    9:  		/* add R11, R11, R30 */
		/* 820850C8h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 820850C8h case    9:*/		return 0x820850CC;
		  /* 820850CCh */ case   10:  		/* add R5, R9, R30 */
		/* 820850CCh case   10:*/		cpu::op::add<0>(regs,&regs.R5,regs.R9,regs.R30);
		/* 820850CCh case   10:*/		return 0x820850D0;
		  /* 820850D0h */ case   11:  		/* lwz R11, <#[R11 + 872]> */
		/* 820850D0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000368) );
		/* 820850D0h case   11:*/		return 0x820850D4;
		  /* 820850D4h */ case   12:  		/* add R11, R11, R8 */
		/* 820850D4h case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 820850D4h case   12:*/		return 0x820850D8;
		  /* 820850D8h */ case   13:  		/* rlwinm R9, R11, 12, 20, 31 */
		/* 820850D8h case   13:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R9,regs.R11);
		/* 820850D8h case   13:*/		return 0x820850DC;
		  /* 820850DCh */ case   14:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 820850DCh case   14:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 820850DCh case   14:*/		return 0x820850E0;
		  /* 820850E0h */ case   15:  		/* addi R9, R9, 512 */
		/* 820850E0h case   15:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x200);
		/* 820850E0h case   15:*/		return 0x820850E4;
		  /* 820850E4h */ case   16:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 820850E4h case   16:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 820850E4h case   16:*/		return 0x820850E8;
		  /* 820850E8h */ case   17:  		/* add R11, R9, R11 */
		/* 820850E8h case   17:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 820850E8h case   17:*/		return 0x820850EC;
		  /* 820850ECh */ case   18:  		/* stwu R11, <#[R6 + 4]> */
		/* 820850ECh case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000004) );
		regs.R6 = (uint32)(regs.R6 + 0x00000004);
		/* 820850ECh case   18:*/		return 0x820850F0;
		  /* 820850F0h */ case   19:  		/* lwzx R11, <#[R10 + R30]> */
		/* 820850F0h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 820850F0h case   19:*/		return 0x820850F4;
		  /* 820850F4h */ case   20:  		/* mr R10, R6 */
		/* 820850F4h case   20:*/		regs.R10 = regs.R6;
		/* 820850F4h case   20:*/		return 0x820850F8;
		  /* 820850F8h */ case   21:  		/* add R11, R11, R30 */
		/* 820850F8h case   21:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 820850F8h case   21:*/		return 0x820850FC;
		  /* 820850FCh */ case   22:  		/* lwz R11, <#[R11 + 876]> */
		/* 820850FCh case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000036C) );
		/* 820850FCh case   22:*/		return 0x82085100;
		  /* 82085100h */ case   23:  		/* rlwinm R11, R11, 30, 2, 31 */
		/* 82085100h case   23:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R11,regs.R11);
		/* 82085100h case   23:*/		return 0x82085104;
		  /* 82085104h */ case   24:  		/* stwu R11, <#[R10 + 4]> */
		/* 82085104h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 82085104h case   24:*/		return 0x82085108;
		  /* 82085108h */ case   25:  		/* lwz R9, <#[R31 + 11036]> */
		/* 82085108h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00002B1C) );
		/* 82085108h case   25:*/		return 0x8208510C;
		  /* 8208510Ch */ case   26:  		/* stw R9, <#[R5 + 64]> */
		/* 8208510Ch case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R5 + 0x00000040) );
		/* 8208510Ch case   26:*/		return 0x82085110;
	}
	return 0x82085110;
} // Block from 820850A4h-82085110h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82085110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085110);
		  /* 82085110h */ case    0:  		/* mr R11, R10 */
		/* 82085110h case    0:*/		regs.R11 = regs.R10;
		/* 82085110h case    0:*/		return 0x82085114;
	}
	return 0x82085114;
} // Block from 82085110h-82085114h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82085114h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085114( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085114) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085114);
		  /* 82085114h */ case    0:  		/* stwu R7, <#[R11 + 4]> */
		/* 82085114h case    0:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82085114h case    0:*/		return 0x82085118;
		  /* 82085118h */ case    1:  		/* lis R10, -16384 */
		/* 82085118h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFC000);
		/* 82085118h case    1:*/		return 0x8208511C;
		  /* 8208511Ch */ case    2:  		/* lwz R9, <#[R31 + 13084]> */
		/* 8208511Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000331C) );
		/* 8208511Ch case    2:*/		return 0x82085120;
		  /* 82085120h */ case    3:  		/* ori R10, R10, 24832 */
		/* 82085120h case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x6100);
		/* 82085120h case    3:*/		return 0x82085124;
		  /* 82085124h */ case    4:  		/* stwu R9, <#[R11 + 4]> */
		/* 82085124h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82085124h case    4:*/		return 0x82085128;
		  /* 82085128h */ case    5:  		/* stwu R10, <#[R11 + 4]> */
		/* 82085128h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82085128h case    5:*/		return 0x8208512C;
		  /* 8208512Ch */ case    6:  		/* lwz R10, <#[R31 + 13088]> */
		/* 8208512Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00003320) );
		/* 8208512Ch case    6:*/		return 0x82085130;
		  /* 82085130h */ case    7:  		/* stwu R10, <#[R11 + 4]> */
		/* 82085130h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82085130h case    7:*/		return 0x82085134;
		  /* 82085134h */ case    8:  		/* stw R11, <#[R31 + 48]> */
		/* 82085134h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82085134h case    8:*/		return 0x82085138;
		  /* 82085138h */ case    9:  		/* b 132 */
		/* 82085138h case    9:*/		return 0x820851BC;
		/* 82085138h case    9:*/		return 0x8208513C;
	}
	return 0x8208513C;
} // Block from 82085114h-8208513Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8208513Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208513C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208513C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208513C);
		  /* 8208513Ch */ case    0:  		/* cmpwi CR6, R15, -1 */
		/* 8208513Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R15,0xFFFFFFFF);
		/* 8208513Ch case    0:*/		return 0x82085140;
		  /* 82085140h */ case    1:  		/* bc 12, CR6_EQ, 124 */
		/* 82085140h case    1:*/		if ( regs.CR[6].eq ) { return 0x820851BC;  }
		/* 82085140h case    1:*/		return 0x82085144;
		  /* 82085144h */ case    2:  		/* lwz R11, <#[R31 + 56]> */
		/* 82085144h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82085144h case    2:*/		return 0x82085148;
		  /* 82085148h */ case    3:  		/* lwz R3, <#[R31 + 48]> */
		/* 82085148h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82085148h case    3:*/		return 0x8208514C;
		  /* 8208514Ch */ case    4:  		/* cmplw CR6, R3, R11 */
		/* 8208514Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8208514Ch case    4:*/		return 0x82085150;
		  /* 82085150h */ case    5:  		/* bc 4, CR6_GT, 12 */
		/* 82085150h case    5:*/		if ( !regs.CR[6].gt ) { return 0x8208515C;  }
		/* 82085150h case    5:*/		return 0x82085154;
		  /* 82085154h */ case    6:  		/* mr R3, R31 */
		/* 82085154h case    6:*/		regs.R3 = regs.R31;
		/* 82085154h case    6:*/		return 0x82085158;
		  /* 82085158h */ case    7:  		/* bl -69712 */
		/* 82085158h case    7:*/		regs.LR = 0x8208515C; return 0x82074108;
		/* 82085158h case    7:*/		return 0x8208515C;
	}
	return 0x8208515C;
} // Block from 8208513Ch-8208515Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8208515Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208515C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208515C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208515C);
		  /* 8208515Ch */ case    0:  		/* addi R11, R15, 112 */
		/* 8208515Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R15,0x70);
		/* 8208515Ch case    0:*/		return 0x82085160;
		  /* 82085160h */ case    1:  		/* stwu R14, <#[R3 + 4]> */
		/* 82085160h case    1:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82085160h case    1:*/		return 0x82085164;
		  /* 82085164h */ case    2:  		/* lwz R8, <#[R30 + 32]> */
		/* 82085164h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000020) );
		/* 82085164h case    2:*/		return 0x82085168;
		  /* 82085168h */ case    3:  		/* mulli R9, R15, 416 */
		/* 82085168h case    3:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R15,0x1A0);
		/* 82085168h case    3:*/		return 0x8208516C;
		  /* 8208516Ch */ case    4:  		/* rlwinm R10, R11, 3, 0, 28 */
		/* 8208516Ch case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R11);
		/* 8208516Ch case    4:*/		return 0x82085170;
		  /* 82085170h */ case    5:  		/* add R7, R9, R30 */
		/* 82085170h case    5:*/		cpu::op::add<0>(regs,&regs.R7,regs.R9,regs.R30);
		/* 82085170h case    5:*/		return 0x82085174;
		  /* 82085174h */ case    6:  		/* lwzx R11, <#[R10 + R30]> */
		/* 82085174h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 82085174h case    6:*/		return 0x82085178;
		  /* 82085178h */ case    7:  		/* add R11, R11, R30 */
		/* 82085178h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 82085178h case    7:*/		return 0x8208517C;
		  /* 8208517Ch */ case    8:  		/* lwz R11, <#[R11 + 872]> */
		/* 8208517Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000368) );
		/* 8208517Ch case    8:*/		return 0x82085180;
		  /* 82085180h */ case    9:  		/* add R11, R11, R8 */
		/* 82085180h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82085180h case    9:*/		return 0x82085184;
		  /* 82085184h */ case   10:  		/* rlwinm R9, R11, 12, 20, 31 */
		/* 82085184h case   10:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R9,regs.R11);
		/* 82085184h case   10:*/		return 0x82085188;
		  /* 82085188h */ case   11:  		/* rlwinm R11, R11, 0, 3, 31 */
		/* 82085188h case   11:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R11);
		/* 82085188h case   11:*/		return 0x8208518C;
		  /* 8208518Ch */ case   12:  		/* addi R9, R9, 512 */
		/* 8208518Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x200);
		/* 8208518Ch case   12:*/		return 0x82085190;
		  /* 82085190h */ case   13:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82085190h case   13:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82085190h case   13:*/		return 0x82085194;
		  /* 82085194h */ case   14:  		/* add R11, R9, R11 */
		/* 82085194h case   14:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82085194h case   14:*/		return 0x82085198;
		  /* 82085198h */ case   15:  		/* stwu R11, <#[R3 + 4]> */
		/* 82085198h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82085198h case   15:*/		return 0x8208519C;
		  /* 8208519Ch */ case   16:  		/* lwzx R11, <#[R10 + R30]> */
		/* 8208519Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 8208519Ch case   16:*/		return 0x820851A0;
		  /* 820851A0h */ case   17:  		/* add R11, R11, R30 */
		/* 820851A0h case   17:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 820851A0h case   17:*/		return 0x820851A4;
		  /* 820851A4h */ case   18:  		/* lwz R11, <#[R11 + 876]> */
		/* 820851A4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000036C) );
		/* 820851A4h case   18:*/		return 0x820851A8;
		  /* 820851A8h */ case   19:  		/* rlwinm R11, R11, 30, 2, 31 */
		/* 820851A8h case   19:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R11,regs.R11);
		/* 820851A8h case   19:*/		return 0x820851AC;
		  /* 820851ACh */ case   20:  		/* stwu R11, <#[R3 + 4]> */
		/* 820851ACh case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820851ACh case   20:*/		return 0x820851B0;
		  /* 820851B0h */ case   21:  		/* lwz R11, <#[R31 + 11036]> */
		/* 820851B0h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B1C) );
		/* 820851B0h case   21:*/		return 0x820851B4;
		  /* 820851B4h */ case   22:  		/* stw R11, <#[R7 + 64]> */
		/* 820851B4h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R7 + 0x00000040) );
		/* 820851B4h case   22:*/		return 0x820851B8;
		  /* 820851B8h */ case   23:  		/* stw R3, <#[R31 + 48]> */
		/* 820851B8h case   23:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 820851B8h case   23:*/		return 0x820851BC;
	}
	return 0x820851BC;
} // Block from 8208515Ch-820851BCh (24 instructions)

//////////////////////////////////////////////////////
// Block at 820851BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820851BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820851BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820851BC);
		  /* 820851BCh */ case    0:  		/* mr R3, R17 */
		/* 820851BCh case    0:*/		regs.R3 = regs.R17;
		/* 820851BCh case    0:*/		return 0x820851C0;
		  /* 820851C0h */ case    1:  		/* addi R1, R1, 272 */
		/* 820851C0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x110);
		/* 820851C0h case    1:*/		return 0x820851C4;
		  /* 820851C4h */ case    2:  		/* b 49324 */
		/* 820851C4h case    2:*/		return 0x82091270;
		/* 820851C4h case    2:*/		return 0x820851C8;
	}
	return 0x820851C8;
} // Block from 820851BCh-820851C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820851C8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820851C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820851C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820851C8);
		  /* 820851C8h */ case    0:  		/* lis R11, 32528 */
		/* 820851C8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x7F10);
		/* 820851C8h case    0:*/		return 0x820851CC;
		  /* 820851CCh */ case    1:  		/* cmplw CR6, R3, R11 */
		/* 820851CCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 820851CCh case    1:*/		return 0x820851D0;
		  /* 820851D0h */ case    2:  		/* bc 12, CR6_LT, 16 */
		/* 820851D0h case    2:*/		if ( regs.CR[6].lt ) { return 0x820851E0;  }
		/* 820851D0h case    2:*/		return 0x820851D4;
		  /* 820851D4h */ case    3:  		/* lis R11, -30976 */
		/* 820851D4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8700);
		/* 820851D4h case    3:*/		return 0x820851D8;
		  /* 820851D8h */ case    4:  		/* cmplw CR6, R3, R11 */
		/* 820851D8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 820851D8h case    4:*/		return 0x820851DC;
		  /* 820851DCh */ case    5:  		/* bclr 12, CR6_LT */
		/* 820851DCh case    5:*/		if ( regs.CR[6].lt ) { return (uint32)regs.LR; }
		/* 820851DCh case    5:*/		return 0x820851E0;
	}
	return 0x820851E0;
} // Block from 820851C8h-820851E0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820851E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820851E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820851E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820851E0);
		  /* 820851E0h */ case    0:  		/* addi R10, R4, 127 */
		/* 820851E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R4,0x7F);
		/* 820851E0h case    0:*/		return 0x820851E4;
		  /* 820851E4h */ case    1:  		/* rlwinm R11, R3, 0, 0, 24 */
		/* 820851E4h case    1:*/		cpu::op::rlwinm<0,0,0,24>(regs,&regs.R11,regs.R3);
		/* 820851E4h case    1:*/		return 0x820851E8;
		  /* 820851E8h */ case    2:  		/* rlwinm R9, R10, 0, 0, 24 */
		/* 820851E8h case    2:*/		cpu::op::rlwinm<0,0,0,24>(regs,&regs.R9,regs.R10);
		/* 820851E8h case    2:*/		return 0x820851EC;
		  /* 820851ECh */ case    3:  		/* mr R10, R11 */
		/* 820851ECh case    3:*/		regs.R10 = regs.R11;
		/* 820851ECh case    3:*/		return 0x820851F0;
		  /* 820851F0h */ case    4:  		/* subf R11, R11, R9 */
		/* 820851F0h case    4:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 820851F0h case    4:*/		return 0x820851F4;
		  /* 820851F4h */ case    5:  		/* srawi R11, R11, 7 */
		/* 820851F4h case    5:*/		cpu::op::srawi<0,7>(regs,&regs.R11,regs.R11);
		/* 820851F4h case    5:*/		return 0x820851F8;
		  /* 820851F8h */ case    6:  		/* addze R11, R11 */
		/* 820851F8h case    6:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 820851F8h case    6:*/		return 0x820851FC;
		  /* 820851FCh */ case    7:  		/* rlwinm. R9, R11, 29, 3, 31 */
		/* 820851FCh case    7:*/		cpu::op::rlwinm<1,29,3,31>(regs,&regs.R9,regs.R11);
		/* 820851FCh case    7:*/		return 0x82085200;
		  /* 82085200h */ case    8:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 82085200h case    8:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 82085200h case    8:*/		return 0x82085204;
		  /* 82085204h */ case    9:  		/* bc 12, CR0_EQ, 76 */
		/* 82085204h case    9:*/		if ( regs.CR[0].eq ) { return 0x82085250;  }
		/* 82085204h case    9:*/		return 0x82085208;
		  /* 82085208h */ case   10:  		/* mtspr CTR, R9 */
		/* 82085208h case   10:*/		regs.CTR = regs.R9;
		/* 82085208h case   10:*/		return 0x8208520C;
		  /* 8208520Ch */ case   11:  		/* dcbf R0, R10 */
		/* 8208520Ch case   11:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R10);
		/* 8208520Ch case   11:*/		return 0x82085210;
		  /* 82085210h */ case   12:  		/* li R9, 128 */
		/* 82085210h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x80);
		/* 82085210h case   12:*/		return 0x82085214;
		  /* 82085214h */ case   13:  		/* dcbf R9, R10 */
		/* 82085214h case   13:*/		cpu::op::dcbf<0>(regs,&regs.R9,regs.R10);
		/* 82085214h case   13:*/		return 0x82085218;
		  /* 82085218h */ case   14:  		/* li R9, 256 */
		/* 82085218h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x100);
		/* 82085218h case   14:*/		return 0x8208521C;
		  /* 8208521Ch */ case   15:  		/* dcbf R9, R10 */
		/* 8208521Ch case   15:*/		cpu::op::dcbf<0>(regs,&regs.R9,regs.R10);
		/* 8208521Ch case   15:*/		return 0x82085220;
		  /* 82085220h */ case   16:  		/* li R9, 384 */
		/* 82085220h case   16:*/		cpu::op::li<0>(regs,&regs.R9,0x180);
		/* 82085220h case   16:*/		return 0x82085224;
		  /* 82085224h */ case   17:  		/* dcbf R9, R10 */
		/* 82085224h case   17:*/		cpu::op::dcbf<0>(regs,&regs.R9,regs.R10);
		/* 82085224h case   17:*/		return 0x82085228;
		  /* 82085228h */ case   18:  		/* li R9, 512 */
		/* 82085228h case   18:*/		cpu::op::li<0>(regs,&regs.R9,0x200);
		/* 82085228h case   18:*/		return 0x8208522C;
		  /* 8208522Ch */ case   19:  		/* dcbf R9, R10 */
		/* 8208522Ch case   19:*/		cpu::op::dcbf<0>(regs,&regs.R9,regs.R10);
		/* 8208522Ch case   19:*/		return 0x82085230;
		  /* 82085230h */ case   20:  		/* li R9, 640 */
		/* 82085230h case   20:*/		cpu::op::li<0>(regs,&regs.R9,0x280);
		/* 82085230h case   20:*/		return 0x82085234;
		  /* 82085234h */ case   21:  		/* dcbf R9, R10 */
		/* 82085234h case   21:*/		cpu::op::dcbf<0>(regs,&regs.R9,regs.R10);
		/* 82085234h case   21:*/		return 0x82085238;
		  /* 82085238h */ case   22:  		/* li R9, 768 */
		/* 82085238h case   22:*/		cpu::op::li<0>(regs,&regs.R9,0x300);
		/* 82085238h case   22:*/		return 0x8208523C;
		  /* 8208523Ch */ case   23:  		/* dcbf R9, R10 */
		/* 8208523Ch case   23:*/		cpu::op::dcbf<0>(regs,&regs.R9,regs.R10);
		/* 8208523Ch case   23:*/		return 0x82085240;
		  /* 82085240h */ case   24:  		/* li R9, 896 */
		/* 82085240h case   24:*/		cpu::op::li<0>(regs,&regs.R9,0x380);
		/* 82085240h case   24:*/		return 0x82085244;
		  /* 82085244h */ case   25:  		/* dcbf R9, R10 */
		/* 82085244h case   25:*/		cpu::op::dcbf<0>(regs,&regs.R9,regs.R10);
		/* 82085244h case   25:*/		return 0x82085248;
		  /* 82085248h */ case   26:  		/* addi R10, R10, 1024 */
		/* 82085248h case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x400);
		/* 82085248h case   26:*/		return 0x8208524C;
		  /* 8208524Ch */ case   27:  		/* bc 16, CR0_LT, -64 */
		/* 8208524Ch case   27:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8208520C;  }
		/* 8208524Ch case   27:*/		return 0x82085250;
	}
	return 0x82085250;
} // Block from 820851E0h-82085250h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82085250h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085250);
		  /* 82085250h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 82085250h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82085250h case    0:*/		return 0x82085254;
		  /* 82085254h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 82085254h case    1:*/		if ( regs.CR[6].eq ) { return 0x82085268;  }
		/* 82085254h case    1:*/		return 0x82085258;
		  /* 82085258h */ case    2:  		/* mtspr CTR, R11 */
		/* 82085258h case    2:*/		regs.CTR = regs.R11;
		/* 82085258h case    2:*/		return 0x8208525C;
		  /* 8208525Ch */ case    3:  		/* dcbf R0, R10 */
		/* 8208525Ch case    3:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R10);
		/* 8208525Ch case    3:*/		return 0x82085260;
		  /* 82085260h */ case    4:  		/* addi R10, R10, 128 */
		/* 82085260h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x80);
		/* 82085260h case    4:*/		return 0x82085264;
		  /* 82085264h */ case    5:  		/* bc 16, CR0_LT, -8 */
		/* 82085264h case    5:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8208525C;  }
		/* 82085264h case    5:*/		return 0x82085268;
	}
	return 0x82085268;
} // Block from 82085250h-82085268h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82085268h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085268);
		  /* 82085268h */ case    0:  		/* sync */
		/* 82085268h case    0:*/		cpu::op::sync<0>(regs);
		/* 82085268h case    0:*/		return 0x8208526C;
		  /* 8208526Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 8208526Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8208526Ch case    1:*/		return 0x82085270;
	}
	return 0x82085270;
} // Block from 82085268h-82085270h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82085270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085270);
		  /* 82085270h */ case    0:  		/* mfspr R12, LR */
		/* 82085270h case    0:*/		regs.R12 = regs.LR;
		/* 82085270h case    0:*/		return 0x82085274;
		  /* 82085274h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82085274h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82085274h case    1:*/		return 0x82085278;
		  /* 82085278h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82085278h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82085278h case    2:*/		return 0x8208527C;
		  /* 8208527Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8208527Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8208527Ch case    3:*/		return 0x82085280;
		  /* 82085280h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82085280h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82085280h case    4:*/		return 0x82085284;
		  /* 82085284h */ case    5:  		/* li R10, 1 */
		/* 82085284h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82085284h case    5:*/		return 0x82085288;
		  /* 82085288h */ case    6:  		/* rlwinm. R11, R4, 0, 31, 31 */
		/* 82085288h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R4);
		/* 82085288h case    6:*/		return 0x8208528C;
		  /* 8208528Ch */ case    7:  		/* stw R10, <#[R3 + 112]> */
		/* 8208528Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000070) );
		/* 8208528Ch case    7:*/		return 0x82085290;
		  /* 82085290h */ case    8:  		/* lis R30, 4 */
		/* 82085290h case    8:*/		cpu::op::lis<0>(regs,&regs.R30,0x4);
		/* 82085290h case    8:*/		return 0x82085294;
		  /* 82085294h */ case    9:  		/* bc 4, CR0_EQ, 8 */
		/* 82085294h case    9:*/		if ( !regs.CR[0].eq ) { return 0x8208529C;  }
		/* 82085294h case    9:*/		return 0x82085298;
		  /* 82085298h */ case   10:  		/* lis R30, 2 */
		/* 82085298h case   10:*/		cpu::op::lis<0>(regs,&regs.R30,0x2);
		/* 82085298h case   10:*/		return 0x8208529C;
	}
	return 0x8208529C;
} // Block from 82085270h-8208529Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8208529Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208529C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208529C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208529C);
		  /* 8208529Ch */ case    0:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 8208529Ch case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 8208529Ch case    0:*/		return 0x820852A0;
		  /* 820852A0h */ case    1:  		/* mr R5, R30 */
		/* 820852A0h case    1:*/		regs.R5 = regs.R30;
		/* 820852A0h case    1:*/		return 0x820852A4;
		  /* 820852A4h */ case    2:  		/* ori R6, R11, 1 */
		/* 820852A4h case    2:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R11,0x1);
		/* 820852A4h case    2:*/		return 0x820852A8;
		  /* 820852A8h */ case    3:  		/* lis R4, 32528 */
		/* 820852A8h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x7F10);
		/* 820852A8h case    3:*/		return 0x820852AC;
		  /* 820852ACh */ case    4:  		/* mr R7, R6 */
		/* 820852ACh case    4:*/		regs.R7 = regs.R6;
		/* 820852ACh case    4:*/		return 0x820852B0;
		  /* 820852B0h */ case    5:  		/* li R3, 0 */
		/* 820852B0h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820852B0h case    5:*/		return 0x820852B4;
		  /* 820852B4h */ case    6:  		/* lis R31, 32528 */
		/* 820852B4h case    6:*/		cpu::op::lis<0>(regs,&regs.R31,0x7F10);
		/* 820852B4h case    6:*/		return 0x820852B8;
		  /* 820852B8h */ case    7:  		/* bl 1998688 */
		/* 820852B8h case    7:*/		regs.LR = 0x820852BC; return 0x8226D218;
		/* 820852B8h case    7:*/		return 0x820852BC;
		  /* 820852BCh */ case    8:  		/* add R11, R30, R31 */
		/* 820852BCh case    8:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R31);
		/* 820852BCh case    8:*/		return 0x820852C0;
		  /* 820852C0h */ case    9:  		/* dcbz <#[R31]> */
		/* 820852C0h case    9:*/		cpu::op::dcbz<0>(regs, regs.R31 + 0x00000000);
		/* 820852C0h case    9:*/		return 0x820852C4;
		  /* 820852C4h */ case   10:  		/* li R10, 128 */
		/* 820852C4h case   10:*/		cpu::op::li<0>(regs,&regs.R10,0x80);
		/* 820852C4h case   10:*/		return 0x820852C8;
		  /* 820852C8h */ case   11:  		/* dcbz <#[R10 + R31]> */
		/* 820852C8h case   11:*/		cpu::op::dcbz<0>(regs, regs.R10 + regs.R31 + 0x00000000);
		/* 820852C8h case   11:*/		return 0x820852CC;
		  /* 820852CCh */ case   12:  		/* li R10, 256 */
		/* 820852CCh case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x100);
		/* 820852CCh case   12:*/		return 0x820852D0;
		  /* 820852D0h */ case   13:  		/* dcbz <#[R10 + R31]> */
		/* 820852D0h case   13:*/		cpu::op::dcbz<0>(regs, regs.R10 + regs.R31 + 0x00000000);
		/* 820852D0h case   13:*/		return 0x820852D4;
		  /* 820852D4h */ case   14:  		/* li R10, 384 */
		/* 820852D4h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x180);
		/* 820852D4h case   14:*/		return 0x820852D8;
		  /* 820852D8h */ case   15:  		/* dcbz <#[R10 + R31]> */
		/* 820852D8h case   15:*/		cpu::op::dcbz<0>(regs, regs.R10 + regs.R31 + 0x00000000);
		/* 820852D8h case   15:*/		return 0x820852DC;
		  /* 820852DCh */ case   16:  		/* li R10, 512 */
		/* 820852DCh case   16:*/		cpu::op::li<0>(regs,&regs.R10,0x200);
		/* 820852DCh case   16:*/		return 0x820852E0;
		  /* 820852E0h */ case   17:  		/* dcbz <#[R10 + R31]> */
		/* 820852E0h case   17:*/		cpu::op::dcbz<0>(regs, regs.R10 + regs.R31 + 0x00000000);
		/* 820852E0h case   17:*/		return 0x820852E4;
		  /* 820852E4h */ case   18:  		/* li R10, 640 */
		/* 820852E4h case   18:*/		cpu::op::li<0>(regs,&regs.R10,0x280);
		/* 820852E4h case   18:*/		return 0x820852E8;
		  /* 820852E8h */ case   19:  		/* dcbz <#[R10 + R31]> */
		/* 820852E8h case   19:*/		cpu::op::dcbz<0>(regs, regs.R10 + regs.R31 + 0x00000000);
		/* 820852E8h case   19:*/		return 0x820852EC;
		  /* 820852ECh */ case   20:  		/* li R10, 768 */
		/* 820852ECh case   20:*/		cpu::op::li<0>(regs,&regs.R10,0x300);
		/* 820852ECh case   20:*/		return 0x820852F0;
		  /* 820852F0h */ case   21:  		/* dcbz <#[R10 + R31]> */
		/* 820852F0h case   21:*/		cpu::op::dcbz<0>(regs, regs.R10 + regs.R31 + 0x00000000);
		/* 820852F0h case   21:*/		return 0x820852F4;
		  /* 820852F4h */ case   22:  		/* li R10, 896 */
		/* 820852F4h case   22:*/		cpu::op::li<0>(regs,&regs.R10,0x380);
		/* 820852F4h case   22:*/		return 0x820852F8;
		  /* 820852F8h */ case   23:  		/* dcbz <#[R10 + R31]> */
		/* 820852F8h case   23:*/		cpu::op::dcbz<0>(regs, regs.R10 + regs.R31 + 0x00000000);
		/* 820852F8h case   23:*/		return 0x820852FC;
		  /* 820852FCh */ case   24:  		/* addi R31, R31, 1024 */
		/* 820852FCh case   24:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x400);
		/* 820852FCh case   24:*/		return 0x82085300;
		  /* 82085300h */ case   25:  		/* cmplw CR6, R31, R11 */
		/* 82085300h case   25:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 82085300h case   25:*/		return 0x82085304;
		  /* 82085304h */ case   26:  		/* bc 12, CR6_LT, -68 */
		/* 82085304h case   26:*/		if ( regs.CR[6].lt ) { return 0x820852C0;  }
		/* 82085304h case   26:*/		return 0x82085308;
		  /* 82085308h */ case   27:  		/* sync */
		/* 82085308h case   27:*/		cpu::op::sync<0>(regs);
		/* 82085308h case   27:*/		return 0x8208530C;
		  /* 8208530Ch */ case   28:  		/* addi R1, R1, 112 */
		/* 8208530Ch case   28:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8208530Ch case   28:*/		return 0x82085310;
		  /* 82085310h */ case   29:  		/* lwz R12, <#[R1 - 8]> */
		/* 82085310h case   29:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82085310h case   29:*/		return 0x82085314;
		  /* 82085314h */ case   30:  		/* mtspr LR, R12 */
		/* 82085314h case   30:*/		regs.LR = regs.R12;
		/* 82085314h case   30:*/		return 0x82085318;
		  /* 82085318h */ case   31:  		/* ld R30, <#[R1 - 24]> */
		/* 82085318h case   31:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82085318h case   31:*/		return 0x8208531C;
		  /* 8208531Ch */ case   32:  		/* ld R31, <#[R1 - 16]> */
		/* 8208531Ch case   32:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8208531Ch case   32:*/		return 0x82085320;
		  /* 82085320h */ case   33:  		/* bclr 20, CR0_LT */
		/* 82085320h case   33:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82085320h case   33:*/		return 0x82085324;
	}
	return 0x82085324;
} // Block from 8208529Ch-82085324h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82085324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085324);
		  /* 82085324h */ case    0:  		/* nop */
		/* 82085324h case    0:*/		cpu::op::nop();
		/* 82085324h case    0:*/		return 0x82085328;
		  /* 82085328h */ case    1:  		/* lwz R10, <#[R3 + 56]> */
		/* 82085328h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000038) );
		/* 82085328h case    1:*/		return 0x8208532C;
		  /* 8208532Ch */ case    2:  		/* srawi. R9, R10, 31 */
		/* 8208532Ch case    2:*/		cpu::op::srawi<1,31>(regs,&regs.R9,regs.R10);
		/* 8208532Ch case    2:*/		return 0x82085330;
		  /* 82085330h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 82085330h case    3:*/		if ( regs.CR[0].eq ) { return 0x82085340;  }
		/* 82085330h case    3:*/		return 0x82085334;
		  /* 82085334h */ case    4:  		/* lis R11, 10922 */
		/* 82085334h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0x2AAA);
		/* 82085334h case    4:*/		return 0x82085338;
		  /* 82085338h */ case    5:  		/* ori R11, R11, 43690 */
		/* 82085338h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xAAAA);
		/* 82085338h case    5:*/		return 0x8208533C;
		  /* 8208533Ch */ case    6:  		/* b 28 */
		/* 8208533Ch case    6:*/		return 0x82085358;
		/* 8208533Ch case    6:*/		return 0x82085340;
	}
	return 0x82085340;
} // Block from 82085324h-82085340h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82085340h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085340( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085340) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085340);
		  /* 82085340h */ case    0:  		/* rlwinm. R11, R10, 0, 1, 1 */
		/* 82085340h case    0:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R10);
		/* 82085340h case    0:*/		return 0x82085344;
		  /* 82085344h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 82085344h case    1:*/		if ( regs.CR[0].eq ) { return 0x82085354;  }
		/* 82085344h case    1:*/		return 0x82085348;
		  /* 82085348h */ case    2:  		/* lis R11, 5461 */
		/* 82085348h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0x1555);
		/* 82085348h case    2:*/		return 0x8208534C;
		  /* 8208534Ch */ case    3:  		/* ori R11, R11, 21845 */
		/* 8208534Ch case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x5555);
		/* 8208534Ch case    3:*/		return 0x82085350;
		  /* 82085350h */ case    4:  		/* b 8 */
		/* 82085350h case    4:*/		return 0x82085358;
		/* 82085350h case    4:*/		return 0x82085354;
	}
	return 0x82085354;
} // Block from 82085340h-82085354h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82085354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085354);
		  /* 82085354h */ case    0:  		/* li R11, -1 */
		/* 82085354h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82085354h case    0:*/		return 0x82085358;
	}
	return 0x82085358;
} // Block from 82085354h-82085358h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82085358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085358);
		  /* 82085358h */ case    0:  		/* rlwinm. R10, R10, 0, 2, 2 */
		/* 82085358h case    0:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R10,regs.R10);
		/* 82085358h case    0:*/		return 0x8208535C;
		  /* 8208535Ch */ case    1:  		/* bc 12, CR0_EQ, 44 */
		/* 8208535Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82085388;  }
		/* 8208535Ch case    1:*/		return 0x82085360;
		  /* 82085360h */ case    2:  		/* lwz R10, <#[R3 + 60]> */
		/* 82085360h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000003C) );
		/* 82085360h case    2:*/		return 0x82085364;
		  /* 82085364h */ case    3:  		/* li R8, 3 */
		/* 82085364h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 82085364h case    3:*/		return 0x82085368;
		  /* 82085368h */ case    4:  		/* rlwinm R7, R10, 1, 0, 30 */
		/* 82085368h case    4:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R7,regs.R10);
		/* 82085368h case    4:*/		return 0x8208536C;
		  /* 8208536Ch */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 8208536Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8208536Ch case    5:*/		return 0x82085370;
		  /* 82085370h */ case    6:  		/* slw R10, R8, R7 */
		/* 82085370h case    6:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R8,regs.R7);
		/* 82085370h case    6:*/		return 0x82085374;
		  /* 82085374h */ case    7:  		/* and R11, R10, R11 */
		/* 82085374h case    7:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82085374h case    7:*/		return 0x82085378;
		  /* 82085378h */ case    8:  		/* bc 4, CR6_EQ, 16 */
		/* 82085378h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82085388;  }
		/* 82085378h case    8:*/		return 0x8208537C;
		  /* 8208537Ch */ case    9:  		/* cmpwi CR6, R9, 0 */
		/* 8208537Ch case    9:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8208537Ch case    9:*/		return 0x82085380;
		  /* 82085380h */ case   10:  		/* bc 4, CR6_EQ, 8 */
		/* 82085380h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82085388;  }
		/* 82085380h case   10:*/		return 0x82085384;
		  /* 82085384h */ case   11:  		/* oris R11, R11, 32768 */
		/* 82085384h case   11:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8000);
		/* 82085384h case   11:*/		return 0x82085388;
	}
	return 0x82085388;
} // Block from 82085358h-82085388h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82085388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085388);
		  /* 82085388h */ case    0:  		/* mr R3, R11 */
		/* 82085388h case    0:*/		regs.R3 = regs.R11;
		/* 82085388h case    0:*/		return 0x8208538C;
		  /* 8208538Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 8208538Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8208538Ch case    1:*/		return 0x82085390;
	}
	return 0x82085390;
} // Block from 82085388h-82085390h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82085390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085390);
		  /* 82085390h */ case    0:  		/* mfspr R12, LR */
		/* 82085390h case    0:*/		regs.R12 = regs.LR;
		/* 82085390h case    0:*/		return 0x82085394;
		  /* 82085394h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82085394h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82085394h case    1:*/		return 0x82085398;
		  /* 82085398h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82085398h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82085398h case    2:*/		return 0x8208539C;
		  /* 8208539Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8208539Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8208539Ch case    3:*/		return 0x820853A0;
		  /* 820853A0h */ case    4:  		/* stwu R1, <#[R1 - 128]> */
		/* 820853A0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820853A0h case    4:*/		return 0x820853A4;
		  /* 820853A4h */ case    5:  		/* mr R30, R3 */
		/* 820853A4h case    5:*/		regs.R30 = regs.R3;
		/* 820853A4h case    5:*/		return 0x820853A8;
		  /* 820853A8h */ case    6:  		/* bl -128 */
		/* 820853A8h case    6:*/		regs.LR = 0x820853AC; return 0x82085328;
		/* 820853A8h case    6:*/		return 0x820853AC;
		  /* 820853ACh */ case    7:  		/* mr R31, R3 */
		/* 820853ACh case    7:*/		regs.R31 = regs.R3;
		/* 820853ACh case    7:*/		return 0x820853B0;
		  /* 820853B0h */ case    8:  		/* bl 1997640 */
		/* 820853B0h case    8:*/		regs.LR = 0x820853B4; return 0x8226CEF8;
		/* 820853B0h case    8:*/		return 0x820853B4;
		  /* 820853B4h */ case    9:  		/* cmpwi CR6, R3, 2 */
		/* 820853B4h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 820853B4h case    9:*/		return 0x820853B8;
		  /* 820853B8h */ case   10:  		/* bc 4, CR6_EQ, 16 */
		/* 820853B8h case   10:*/		if ( !regs.CR[6].eq ) { return 0x820853C8;  }
		/* 820853B8h case   10:*/		return 0x820853BC;
		  /* 820853BCh */ case   11:  		/* lis R11, -32256 */
		/* 820853BCh case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820853BCh case   11:*/		return 0x820853C0;
		  /* 820853C0h */ case   12:  		/* lwz R11, <#[R11 + 1452]> */
		/* 820853C0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000005AC) );
		/* 820853C0h case   12:*/		return 0x820853C4;
		  /* 820853C4h */ case   13:  		/* b 12 */
		/* 820853C4h case   13:*/		return 0x820853D0;
		/* 820853C4h case   13:*/		return 0x820853C8;
	}
	return 0x820853C8;
} // Block from 82085390h-820853C8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820853C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820853C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820853C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820853C8);
		  /* 820853C8h */ case    0:  		/* lis R11, -32256 */
		/* 820853C8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820853C8h case    0:*/		return 0x820853CC;
		  /* 820853CCh */ case    1:  		/* lwz R11, <#[R11 + 1456]> */
		/* 820853CCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000005B0) );
		/* 820853CCh case    1:*/		return 0x820853D0;
	}
	return 0x820853D0;
} // Block from 820853C8h-820853D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820853D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820853D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820853D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820853D0);
		  /* 820853D0h */ case    0:  		/* lwz R3, <#[R11]> */
		/* 820853D0h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 820853D0h case    0:*/		return 0x820853D4;
		  /* 820853D4h */ case    1:  		/* lwz R11, <#[R30 + 364]> */
		/* 820853D4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000016C) );
		/* 820853D4h case    1:*/		return 0x820853D8;
		  /* 820853D8h */ case    2:  		/* cmplw CR6, R31, R11 */
		/* 820853D8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 820853D8h case    2:*/		return 0x820853DC;
		  /* 820853DCh */ case    3:  		/* bc 12, CR6_EQ, 36 */
		/* 820853DCh case    3:*/		if ( regs.CR[6].eq ) { return 0x82085400;  }
		/* 820853DCh case    3:*/		return 0x820853E0;
		  /* 820853E0h */ case    4:  		/* lis R11, -16384 */
		/* 820853E0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC000);
		/* 820853E0h case    4:*/		return 0x820853E4;
		  /* 820853E4h */ case    5:  		/* stw R31, <#[R30 + 364]> */
		/* 820853E4h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x0000016C) );
		/* 820853E4h case    5:*/		return 0x820853E8;
		  /* 820853E8h */ case    6:  		/* stw R31, <#[R1 + 84]> */
		/* 820853E8h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 820853E8h case    6:*/		return 0x820853EC;
		  /* 820853ECh */ case    7:  		/* li R5, 2 */
		/* 820853ECh case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 820853ECh case    7:*/		return 0x820853F0;
		  /* 820853F0h */ case    8:  		/* ori R11, R11, 25088 */
		/* 820853F0h case    8:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x6200);
		/* 820853F0h case    8:*/		return 0x820853F4;
		  /* 820853F4h */ case    9:  		/* addi R4, R1, 80 */
		/* 820853F4h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 820853F4h case    9:*/		return 0x820853F8;
		  /* 820853F8h */ case   10:  		/* stw R11, <#[R1 + 80]> */
		/* 820853F8h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 820853F8h case   10:*/		return 0x820853FC;
		  /* 820853FCh */ case   11:  		/* bl -76692 */
		/* 820853FCh case   11:*/		regs.LR = 0x82085400; return 0x82072868;
		/* 820853FCh case   11:*/		return 0x82085400;
	}
	return 0x82085400;
} // Block from 820853D0h-82085400h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82085400h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085400);
		  /* 82085400h */ case    0:  		/* addi R1, R1, 128 */
		/* 82085400h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82085400h case    0:*/		return 0x82085404;
		  /* 82085404h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82085404h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82085404h case    1:*/		return 0x82085408;
		  /* 82085408h */ case    2:  		/* mtspr LR, R12 */
		/* 82085408h case    2:*/		regs.LR = regs.R12;
		/* 82085408h case    2:*/		return 0x8208540C;
		  /* 8208540Ch */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8208540Ch case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8208540Ch case    3:*/		return 0x82085410;
		  /* 82085410h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82085410h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82085410h case    4:*/		return 0x82085414;
		  /* 82085414h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82085414h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82085414h case    5:*/		return 0x82085418;
	}
	return 0x82085418;
} // Block from 82085400h-82085418h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82085418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085418);
		  /* 82085418h */ case    0:  		/* mfspr R12, LR */
		/* 82085418h case    0:*/		regs.R12 = regs.LR;
		/* 82085418h case    0:*/		return 0x8208541C;
		  /* 8208541Ch */ case    1:  		/* bl 48700 */
		/* 8208541Ch case    1:*/		regs.LR = 0x82085420; return 0x82091258;
		/* 8208541Ch case    1:*/		return 0x82085420;
		  /* 82085420h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82085420h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82085420h case    2:*/		return 0x82085424;
		  /* 82085424h */ case    3:  		/* bl 1997524 */
		/* 82085424h case    3:*/		regs.LR = 0x82085428; return 0x8226CEF8;
		/* 82085424h case    3:*/		return 0x82085428;
		  /* 82085428h */ case    4:  		/* cmpwi CR6, R3, 2 */
		/* 82085428h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 82085428h case    4:*/		return 0x8208542C;
		  /* 8208542Ch */ case    5:  		/* bc 4, CR6_EQ, 16 */
		/* 8208542Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x8208543C;  }
		/* 8208542Ch case    5:*/		return 0x82085430;
		  /* 82085430h */ case    6:  		/* lis R11, -32256 */
		/* 82085430h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82085430h case    6:*/		return 0x82085434;
		  /* 82085434h */ case    7:  		/* lwz R11, <#[R11 + 1452]> */
		/* 82085434h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000005AC) );
		/* 82085434h case    7:*/		return 0x82085438;
		  /* 82085438h */ case    8:  		/* b 12 */
		/* 82085438h case    8:*/		return 0x82085444;
		/* 82085438h case    8:*/		return 0x8208543C;
	}
	return 0x8208543C;
} // Block from 82085418h-8208543Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8208543Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208543C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208543C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208543C);
		  /* 8208543Ch */ case    0:  		/* lis R11, -32256 */
		/* 8208543Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8208543Ch case    0:*/		return 0x82085440;
		  /* 82085440h */ case    1:  		/* lwz R11, <#[R11 + 1456]> */
		/* 82085440h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000005B0) );
		/* 82085440h case    1:*/		return 0x82085444;
	}
	return 0x82085444;
} // Block from 8208543Ch-82085444h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82085444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085444);
		  /* 82085444h */ case    0:  		/* lwz R29, <#[R11]> */
		/* 82085444h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 82085444h case    0:*/		return 0x82085448;
		  /* 82085448h */ case    1:  		/* li R28, 6 */
		/* 82085448h case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x6);
		/* 82085448h case    1:*/		return 0x8208544C;
		  /* 8208544Ch */ case    2:  		/* addi R31, R29, 11588 */
		/* 8208544Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R29,0x2D44);
		/* 8208544Ch case    2:*/		return 0x82085450;
		  /* 82085450h */ case    3:  		/* lwz R11, <#[R31 + 4]> */
		/* 82085450h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82085450h case    3:*/		return 0x82085454;
		  /* 82085454h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82085454h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82085454h case    4:*/		return 0x82085458;
		  /* 82085458h */ case    5:  		/* bc 12, CR6_EQ, 72 */
		/* 82085458h case    5:*/		if ( regs.CR[6].eq ) { return 0x820854A0;  }
		/* 82085458h case    5:*/		return 0x8208545C;
		  /* 8208545Ch */ case    6:  		/* lwz R30, <#[R31 - 4]> */
		/* 8208545Ch case    6:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0xFFFFFFFC) );
		/* 8208545Ch case    6:*/		return 0x82085460;
		  /* 82085460h */ case    7:  		/* li R5, 0 */
		/* 82085460h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82085460h case    7:*/		return 0x82085464;
		  /* 82085464h */ case    8:  		/* lwz R11, <#[R31]> */
		/* 82085464h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82085464h case    8:*/		return 0x82085468;
		  /* 82085468h */ case    9:  		/* mr R4, R29 */
		/* 82085468h case    9:*/		regs.R4 = regs.R29;
		/* 82085468h case    9:*/		return 0x8208546C;
		  /* 8208546Ch */ case   10:  		/* addi R3, R1, 80 */
		/* 8208546Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8208546Ch case   10:*/		return 0x82085470;
		  /* 82085470h */ case   11:  		/* rlwimi R30, R11, 0, 30, 31 */
		/* 82085470h case   11:*/		cpu::op::rlwimi<0,0,30,31>(regs,&regs.R30,regs.R11);
		/* 82085470h case   11:*/		return 0x82085474;
		  /* 82085474h */ case   12:  		/* bl -35084 */
		/* 82085474h case   12:*/		regs.LR = 0x82085478; return 0x8207CB68;
		/* 82085474h case   12:*/		return 0x82085478;
		  /* 82085478h */ case   13:  		/* addi R3, R1, 80 */
		/* 82085478h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82085478h case   13:*/		return 0x8208547C;
		  /* 8208547Ch */ case   14:  		/* bl -34844 */
		/* 8208547Ch case   14:*/		regs.LR = 0x82085480; return 0x8207CC60;
		/* 8208547Ch case   14:*/		return 0x82085480;
		  /* 82085480h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 82085480h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82085480h case   15:*/		return 0x82085484;
		  /* 82085484h */ case   16:  		/* bc 12, CR0_EQ, 20 */
		/* 82085484h case   16:*/		if ( regs.CR[0].eq ) { return 0x82085498;  }
		/* 82085484h case   16:*/		return 0x82085488;
		  /* 82085488h */ case   17:  		/* lwz R11, <#[R31 + 16]> */
		/* 82085488h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 82085488h case   17:*/		return 0x8208548C;
		  /* 8208548Ch */ case   18:  		/* lwz R11, <#[R11]> */
		/* 8208548Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8208548Ch case   18:*/		return 0x82085490;
		  /* 82085490h */ case   19:  		/* cmplw CR6, R11, R30 */
		/* 82085490h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 82085490h case   19:*/		return 0x82085494;
		  /* 82085494h */ case   20:  		/* bc 4, CR6_EQ, -28 */
		/* 82085494h case   20:*/		if ( !regs.CR[6].eq ) { return 0x82085478;  }
		/* 82085494h case   20:*/		return 0x82085498;
	}
	return 0x82085498;
} // Block from 82085444h-82085498h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82085498h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085498);
		  /* 82085498h */ case    0:  		/* addi R3, R1, 80 */
		/* 82085498h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82085498h case    0:*/		return 0x8208549C;
		  /* 8208549Ch */ case    1:  		/* bl -35076 */
		/* 8208549Ch case    1:*/		regs.LR = 0x820854A0; return 0x8207CB98;
		/* 8208549Ch case    1:*/		return 0x820854A0;
	}
	return 0x820854A0;
} // Block from 82085498h-820854A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820854A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820854A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820854A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820854A0);
		  /* 820854A0h */ case    0:  		/* addic. R28, R28, -1 */
		/* 820854A0h case    0:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 820854A0h case    0:*/		return 0x820854A4;
		  /* 820854A4h */ case    1:  		/* addi R31, R31, 108 */
		/* 820854A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x6C);
		/* 820854A4h case    1:*/		return 0x820854A8;
		  /* 820854A8h */ case    2:  		/* bc 4, CR0_EQ, -88 */
		/* 820854A8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82085450;  }
		/* 820854A8h case    2:*/		return 0x820854AC;
		  /* 820854ACh */ case    3:  		/* addi R1, R1, 144 */
		/* 820854ACh case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 820854ACh case    3:*/		return 0x820854B0;
		  /* 820854B0h */ case    4:  		/* b 48632 */
		/* 820854B0h case    4:*/		return 0x820912A8;
		/* 820854B0h case    4:*/		return 0x820854B4;
		  /* 820854B4h */ case    5:  		/* nop */
		/* 820854B4h case    5:*/		cpu::op::nop();
		/* 820854B4h case    5:*/		return 0x820854B8;
	}
	return 0x820854B8;
} // Block from 820854A0h-820854B8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820854B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820854B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820854B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820854B8);
		  /* 820854B8h */ case    0:  		/* mfspr R12, LR */
		/* 820854B8h case    0:*/		regs.R12 = regs.LR;
		/* 820854B8h case    0:*/		return 0x820854BC;
		  /* 820854BCh */ case    1:  		/* bl 48524 */
		/* 820854BCh case    1:*/		regs.LR = 0x820854C0; return 0x82091248;
		/* 820854BCh case    1:*/		return 0x820854C0;
		  /* 820854C0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 820854C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 820854C0h case    2:*/		return 0x820854C4;
		  /* 820854C4h */ case    3:  		/* mr R11, R3 */
		/* 820854C4h case    3:*/		regs.R11 = regs.R3;
		/* 820854C4h case    3:*/		return 0x820854C8;
		  /* 820854C8h */ case    4:  		/* mr R3, R4 */
		/* 820854C8h case    4:*/		regs.R3 = regs.R4;
		/* 820854C8h case    4:*/		return 0x820854CC;
		  /* 820854CCh */ case    5:  		/* mr R25, R5 */
		/* 820854CCh case    5:*/		regs.R25 = regs.R5;
		/* 820854CCh case    5:*/		return 0x820854D0;
		  /* 820854D0h */ case    6:  		/* addi R27, R11, 8 */
		/* 820854D0h case    6:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x8);
		/* 820854D0h case    6:*/		return 0x820854D4;
		  /* 820854D4h */ case    7:  		/* lwz R26, <#[R11 + 4]> */
		/* 820854D4h case    7:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + 0x00000004) );
		/* 820854D4h case    7:*/		return 0x820854D8;
		  /* 820854D8h */ case    8:  		/* lwz R4, <#[R3]> */
		/* 820854D8h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000000) );
		/* 820854D8h case    8:*/		return 0x820854DC;
		  /* 820854DCh */ case    9:  		/* addi R10, R3, 4 */
		/* 820854DCh case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0x4);
		/* 820854DCh case    9:*/		return 0x820854E0;
		  /* 820854E0h */ case   10:  		/* cmplw CR6, R10, R4 */
		/* 820854E0h case   10:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R4);
		/* 820854E0h case   10:*/		return 0x820854E4;
		  /* 820854E4h */ case   11:  		/* bc 4, CR6_LT, 172 */
		/* 820854E4h case   11:*/		if ( !regs.CR[6].lt ) { return 0x82085590;  }
		/* 820854E4h case   11:*/		return 0x820854E8;
		  /* 820854E8h */ case   12:  		/* addi R5, R26, -1 */
		/* 820854E8h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R26,0xFFFFFFFF);
		/* 820854E8h case   12:*/		return 0x820854EC;
		  /* 820854ECh */ case   13:  		/* addi R11, R10, 8 */
		/* 820854ECh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 820854ECh case   13:*/		return 0x820854F0;
		  /* 820854F0h */ case   14:  		/* lhz R9, <#[R11 - 2]> */
		/* 820854F0h case   14:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R11 + 0xFFFFFFFE) );
		/* 820854F0h case   14:*/		return 0x820854F4;
		  /* 820854F4h */ case   15:  		/* rlwinm R7, R5, 4, 0, 27 */
		/* 820854F4h case   15:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R7,regs.R5);
		/* 820854F4h case   15:*/		return 0x820854F8;
		  /* 820854F8h */ case   16:  		/* lhz R8, <#[R11 + 2]> */
		/* 820854F8h case   16:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 820854F8h case   16:*/		return 0x820854FC;
		  /* 820854FCh */ case   17:  		/* li R6, 0 */
		/* 820854FCh case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820854FCh case   17:*/		return 0x82085500;
		  /* 82085500h */ case   18:  		/* addi R28, R9, 1 */
		/* 82085500h case   18:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R9,0x1);
		/* 82085500h case   18:*/		return 0x82085504;
		  /* 82085504h */ case   19:  		/* lhz R30, <#[R11 - 4]> */
		/* 82085504h case   19:*/		cpu::mem::load16z( regs, &regs.R30, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 82085504h case   19:*/		return 0x82085508;
		  /* 82085508h */ case   20:  		/* addi R8, R8, 1 */
		/* 82085508h case   20:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82085508h case   20:*/		return 0x8208550C;
		  /* 8208550Ch */ case   21:  		/* lhz R29, <#[R11]> */
		/* 8208550Ch case   21:*/		cpu::mem::load16z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 8208550Ch case   21:*/		return 0x82085510;
		  /* 82085510h */ case   22:  		/* add R9, R7, R27 */
		/* 82085510h case   22:*/		cpu::op::add<0>(regs,&regs.R9,regs.R7,regs.R27);
		/* 82085510h case   22:*/		return 0x82085514;
		  /* 82085514h */ case   23:  		/* lwz R31, <#[R10]> */
		/* 82085514h case   23:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000000) );
		/* 82085514h case   23:*/		return 0x82085518;
		  /* 82085518h */ case   24:  		/* rlwinm R7, R28, 3, 0, 28 */
		/* 82085518h case   24:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R7,regs.R28);
		/* 82085518h case   24:*/		return 0x8208551C;
		  /* 8208551Ch */ case   25:  		/* rlwinm R28, R8, 3, 0, 28 */
		/* 8208551Ch case   25:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R28,regs.R8);
		/* 8208551Ch case   25:*/		return 0x82085520;
		  /* 82085520h */ case   26:  		/* rlwinm R30, R30, 3, 0, 31 */
		/* 82085520h case   26:*/		cpu::op::rlwinm<0,3,0,31>(regs,&regs.R30,regs.R30);
		/* 82085520h case   26:*/		return 0x82085524;
		  /* 82085524h */ case   27:  		/* rlwinm R29, R29, 3, 0, 31 */
		/* 82085524h case   27:*/		cpu::op::rlwinm<0,3,0,31>(regs,&regs.R29,regs.R29);
		/* 82085524h case   27:*/		return 0x82085528;
		  /* 82085528h */ case   28:  		/* mr R8, R5 */
		/* 82085528h case   28:*/		regs.R8 = regs.R5;
		/* 82085528h case   28:*/		return 0x8208552C;
		  /* 8208552Ch */ case   29:  		/* addi R9, R9, 4 */
		/* 8208552Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 8208552Ch case   29:*/		return 0x82085530;
		  /* 82085530h */ case   30:  		/* lwz R24, <#[R9 - 4]> */
		/* 82085530h case   30:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R9 + 0xFFFFFFFC) );
		/* 82085530h case   30:*/		return 0x82085534;
		  /* 82085534h */ case   31:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 82085534h case   31:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 82085534h case   31:*/		return 0x82085538;
		  /* 82085538h */ case   32:  		/* cmplw CR6, R24, R7 */
		/* 82085538h case   32:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R7);
		/* 82085538h case   32:*/		return 0x8208553C;
		  /* 8208553Ch */ case   33:  		/* bc 4, CR6_LT, 44 */
		/* 8208553Ch case   33:*/		if ( !regs.CR[6].lt ) { return 0x82085568;  }
		/* 8208553Ch case   33:*/		return 0x82085540;
		  /* 82085540h */ case   34:  		/* lwz R24, <#[R9 + 4]> */
		/* 82085540h case   34:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R9 + 0x00000004) );
		/* 82085540h case   34:*/		return 0x82085544;
		  /* 82085544h */ case   35:  		/* cmplw CR6, R24, R30 */
		/* 82085544h case   35:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R30);
		/* 82085544h case   35:*/		return 0x82085548;
		  /* 82085548h */ case   36:  		/* bc 4, CR6_GT, 32 */
		/* 82085548h case   36:*/		if ( !regs.CR[6].gt ) { return 0x82085568;  }
		/* 82085548h case   36:*/		return 0x8208554C;
		  /* 8208554Ch */ case   37:  		/* lwz R24, <#[R9]> */
		/* 8208554Ch case   37:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R9 + 0x00000000) );
		/* 8208554Ch case   37:*/		return 0x82085550;
		  /* 82085550h */ case   38:  		/* cmplw CR6, R24, R28 */
		/* 82085550h case   38:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R28);
		/* 82085550h case   38:*/		return 0x82085554;
		  /* 82085554h */ case   39:  		/* bc 4, CR6_LT, 20 */
		/* 82085554h case   39:*/		if ( !regs.CR[6].lt ) { return 0x82085568;  }
		/* 82085554h case   39:*/		return 0x82085558;
		  /* 82085558h */ case   40:  		/* lwz R24, <#[R9 + 8]> */
		/* 82085558h case   40:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R9 + 0x00000008) );
		/* 82085558h case   40:*/		return 0x8208555C;
		  /* 8208555Ch */ case   41:  		/* cmplw CR6, R24, R29 */
		/* 8208555Ch case   41:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R29);
		/* 8208555Ch case   41:*/		return 0x82085560;
		  /* 82085560h */ case   42:  		/* bc 4, CR6_GT, 8 */
		/* 82085560h case   42:*/		if ( !regs.CR[6].gt ) { return 0x82085568;  }
		/* 82085560h case   42:*/		return 0x82085564;
		  /* 82085564h */ case   43:  		/* ori R6, R6, 3 */
		/* 82085564h case   43:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R6,0x3);
		/* 82085564h case   43:*/		return 0x82085568;
	}
	return 0x82085568;
} // Block from 820854B8h-82085568h (44 instructions)

//////////////////////////////////////////////////////
// Block at 82085568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085568);
		  /* 82085568h */ case    0:  		/* cmplwi CR6, R8, 0 */
		/* 82085568h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82085568h case    0:*/		return 0x8208556C;
		  /* 8208556Ch */ case    1:  		/* addi R8, R8, -1 */
		/* 8208556Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 8208556Ch case    1:*/		return 0x82085570;
		  /* 82085570h */ case    2:  		/* addi R9, R9, -16 */
		/* 82085570h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFF0);
		/* 82085570h case    2:*/		return 0x82085574;
		  /* 82085574h */ case    3:  		/* bc 4, CR6_EQ, -68 */
		/* 82085574h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82085530;  }
		/* 82085574h case    3:*/		return 0x82085578;
		  /* 82085578h */ case    4:  		/* oris R9, R6, 32768 */
		/* 82085578h case    4:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R6,0x8000);
		/* 82085578h case    4:*/		return 0x8208557C;
		  /* 8208557Ch */ case    5:  		/* addi R10, R10, 16 */
		/* 8208557Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x10);
		/* 8208557Ch case    5:*/		return 0x82085580;
		  /* 82085580h */ case    6:  		/* stw R9, <#[R31 + 8]> */
		/* 82085580h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 82085580h case    6:*/		return 0x82085584;
		  /* 82085584h */ case    7:  		/* addi R11, R11, 16 */
		/* 82085584h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 82085584h case    7:*/		return 0x82085588;
		  /* 82085588h */ case    8:  		/* cmplw CR6, R10, R4 */
		/* 82085588h case    8:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R4);
		/* 82085588h case    8:*/		return 0x8208558C;
		  /* 8208558Ch */ case    9:  		/* bc 12, CR6_LT, -156 */
		/* 8208558Ch case    9:*/		if ( regs.CR[6].lt ) { return 0x820854F0;  }
		/* 8208558Ch case    9:*/		return 0x82085590;
	}
	return 0x82085590;
} // Block from 82085568h-82085590h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82085590h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085590( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085590) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085590);
		  /* 82085590h */ case    0:  		/* lwz R31, <#[R10]> */
		/* 82085590h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000000) );
		/* 82085590h case    0:*/		return 0x82085594;
		  /* 82085594h */ case    1:  		/* cmpwi CR6, R25, 0 */
		/* 82085594h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 82085594h case    1:*/		return 0x82085598;
		  /* 82085598h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 82085598h case    2:*/		if ( regs.CR[6].eq ) { return 0x820855A4;  }
		/* 82085598h case    2:*/		return 0x8208559C;
		  /* 8208559Ch */ case    3:  		/* li R5, 0 */
		/* 8208559Ch case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8208559Ch case    3:*/		return 0x820855A0;
		  /* 820855A0h */ case    4:  		/* bl -984 */
		/* 820855A0h case    4:*/		regs.LR = 0x820855A4; return 0x820851C8;
		/* 820855A0h case    4:*/		return 0x820855A4;
	}
	return 0x820855A4;
} // Block from 82085590h-820855A4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820855A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820855A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820855A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820855A4);
		  /* 820855A4h */ case    0:  		/* lis R11, -16384 */
		/* 820855A4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC000);
		/* 820855A4h case    0:*/		return 0x820855A8;
		  /* 820855A8h */ case    1:  		/* mr R3, R31 */
		/* 820855A8h case    1:*/		regs.R3 = regs.R31;
		/* 820855A8h case    1:*/		return 0x820855AC;
		  /* 820855ACh */ case    2:  		/* cmplw CR6, R31, R11 */
		/* 820855ACh case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 820855ACh case    2:*/		return 0x820855B0;
		  /* 820855B0h */ case    3:  		/* bc 4, CR6_EQ, -216 */
		/* 820855B0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820854D8;  }
		/* 820855B0h case    3:*/		return 0x820855B4;
		  /* 820855B4h */ case    4:  		/* addi R1, R1, 160 */
		/* 820855B4h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 820855B4h case    4:*/		return 0x820855B8;
		  /* 820855B8h */ case    5:  		/* b 48352 */
		/* 820855B8h case    5:*/		return 0x82091298;
		/* 820855B8h case    5:*/		return 0x820855BC;
		  /* 820855BCh */ case    6:  		/* nop */
		/* 820855BCh case    6:*/		cpu::op::nop();
		/* 820855BCh case    6:*/		return 0x820855C0;
	}
	return 0x820855C0;
} // Block from 820855A4h-820855C0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820855C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820855C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820855C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820855C0);
		  /* 820855C0h */ case    0:  		/* mfspr R12, LR */
		/* 820855C0h case    0:*/		regs.R12 = regs.LR;
		/* 820855C0h case    0:*/		return 0x820855C4;
		  /* 820855C4h */ case    1:  		/* bl 48268 */
		/* 820855C4h case    1:*/		regs.LR = 0x820855C8; return 0x82091250;
		/* 820855C4h case    1:*/		return 0x820855C8;
		  /* 820855C8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 820855C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 820855C8h case    2:*/		return 0x820855CC;
		  /* 820855CCh */ case    3:  		/* addi R27, R3, 76 */
		/* 820855CCh case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R3,0x4C);
		/* 820855CCh case    3:*/		return 0x820855D0;
		  /* 820855D0h */ case    4:  		/* mr R31, R3 */
		/* 820855D0h case    4:*/		regs.R31 = regs.R3;
		/* 820855D0h case    4:*/		return 0x820855D4;
		  /* 820855D4h */ case    5:  		/* mr R3, R27 */
		/* 820855D4h case    5:*/		regs.R3 = regs.R27;
		/* 820855D4h case    5:*/		return 0x820855D8;
		  /* 820855D8h */ case    6:  		/* mr R28, R4 */
		/* 820855D8h case    6:*/		regs.R28 = regs.R4;
		/* 820855D8h case    6:*/		return 0x820855DC;
		  /* 820855DCh */ case    7:  		/* mr R30, R5 */
		/* 820855DCh case    7:*/		regs.R30 = regs.R5;
		/* 820855DCh case    7:*/		return 0x820855E0;
		  /* 820855E0h */ case    8:  		/* bl 1997128 */
		/* 820855E0h case    8:*/		regs.LR = 0x820855E4; return 0x8226CF28;
		/* 820855E0h case    8:*/		return 0x820855E4;
		  /* 820855E4h */ case    9:  		/* lwz R29, <#[R30]> */
		/* 820855E4h case    9:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x00000000) );
		/* 820855E4h case    9:*/		return 0x820855E8;
		  /* 820855E8h */ case   10:  		/* lis R11, -16384 */
		/* 820855E8h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC000);
		/* 820855E8h case   10:*/		return 0x820855EC;
		  /* 820855ECh */ case   11:  		/* mr R26, R3 */
		/* 820855ECh case   11:*/		regs.R26 = regs.R3;
		/* 820855ECh case   11:*/		return 0x820855F0;
		  /* 820855F0h */ case   12:  		/* cmplw CR6, R29, R11 */
		/* 820855F0h case   12:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 820855F0h case   12:*/		return 0x820855F4;
		  /* 820855F4h */ case   13:  		/* bc 4, CR6_EQ, 236 */
		/* 820855F4h case   13:*/		if ( !regs.CR[6].eq ) { return 0x820856E0;  }
		/* 820855F4h case   13:*/		return 0x820855F8;
		  /* 820855F8h */ case   14:  		/* lis R29, 256 */
		/* 820855F8h case   14:*/		cpu::op::lis<0>(regs,&regs.R29,0x100);
		/* 820855F8h case   14:*/		return 0x820855FC;
		  /* 820855FCh */ case   15:  		/* stw R30, <#[R31 + 36]> */
		/* 820855FCh case   15:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000024) );
		/* 820855FCh case   15:*/		return 0x82085600;
		  /* 82085600h */ case   16:  		/* lwz R11, <#[R28 + 4]> */
		/* 82085600h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 82085600h case   16:*/		return 0x82085604;
		  /* 82085604h */ case   17:  		/* lwz R10, <#[R31 + 64]> */
		/* 82085604h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000040) );
		/* 82085604h case   17:*/		return 0x82085608;
		  /* 82085608h */ case   18:  		/* slw R11, R29, R11 */
		/* 82085608h case   18:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 82085608h case   18:*/		return 0x8208560C;
		  /* 8208560Ch */ case   19:  		/* andc R11, R10, R11 */
		/* 8208560Ch case   19:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8208560Ch case   19:*/		return 0x82085610;
		  /* 82085610h */ case   20:  		/* stw R11, <#[R31 + 64]> */
		/* 82085610h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000040) );
		/* 82085610h case   20:*/		return 0x82085614;
		  /* 82085614h */ case   21:  		/* lwz R11, <#[R31 + 68]> */
		/* 82085614h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000044) );
		/* 82085614h case   21:*/		return 0x82085618;
		  /* 82085618h */ case   22:  		/* addic. R11, R11, -1 */
		/* 82085618h case   22:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82085618h case   22:*/		return 0x8208561C;
		  /* 8208561Ch */ case   23:  		/* stw R11, <#[R31 + 68]> */
		/* 8208561Ch case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000044) );
		/* 8208561Ch case   23:*/		return 0x82085620;
		  /* 82085620h */ case   24:  		/* bc 4, CR0_EQ, 132 */
		/* 82085620h case   24:*/		if ( !regs.CR[0].eq ) { return 0x820856A4;  }
		/* 82085620h case   24:*/		return 0x82085624;
		  /* 82085624h */ case   25:  		/* bl 1997012 */
		/* 82085624h case   25:*/		regs.LR = 0x82085628; return 0x8226CEF8;
		/* 82085624h case   25:*/		return 0x82085628;
		  /* 82085628h */ case   26:  		/* cmpwi CR6, R3, 2 */
		/* 82085628h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 82085628h case   26:*/		return 0x8208562C;
		  /* 8208562Ch */ case   27:  		/* bc 4, CR6_EQ, 16 */
		/* 8208562Ch case   27:*/		if ( !regs.CR[6].eq ) { return 0x8208563C;  }
		/* 8208562Ch case   27:*/		return 0x82085630;
		  /* 82085630h */ case   28:  		/* lis R11, -32256 */
		/* 82085630h case   28:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82085630h case   28:*/		return 0x82085634;
		  /* 82085634h */ case   29:  		/* lwz R11, <#[R11 + 1452]> */
		/* 82085634h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000005AC) );
		/* 82085634h case   29:*/		return 0x82085638;
		  /* 82085638h */ case   30:  		/* b 12 */
		/* 82085638h case   30:*/		return 0x82085644;
		/* 82085638h case   30:*/		return 0x8208563C;
	}
	return 0x8208563C;
} // Block from 820855C0h-8208563Ch (31 instructions)

//////////////////////////////////////////////////////
// Block at 8208563Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208563C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208563C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208563C);
		  /* 8208563Ch */ case    0:  		/* lis R11, -32256 */
		/* 8208563Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8208563Ch case    0:*/		return 0x82085640;
		  /* 82085640h */ case    1:  		/* lwz R11, <#[R11 + 1456]> */
		/* 82085640h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000005B0) );
		/* 82085640h case    1:*/		return 0x82085644;
	}
	return 0x82085644;
} // Block from 8208563Ch-82085644h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82085644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085644);
		  /* 82085644h */ case    0:  		/* li R10, 6 */
		/* 82085644h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x6);
		/* 82085644h case    0:*/		return 0x82085648;
		  /* 82085648h */ case    1:  		/* lwz R11, <#[R11]> */
		/* 82085648h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82085648h case    1:*/		return 0x8208564C;
		  /* 8208564Ch */ case    2:  		/* li R8, 0 */
		/* 8208564Ch case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8208564Ch case    2:*/		return 0x82085650;
		  /* 82085650h */ case    3:  		/* addi R11, R11, 11664 */
		/* 82085650h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2D90);
		/* 82085650h case    3:*/		return 0x82085654;
		  /* 82085654h */ case    4:  		/* mtspr CTR, R10 */
		/* 82085654h case    4:*/		regs.CTR = regs.R10;
		/* 82085654h case    4:*/		return 0x82085658;
		  /* 82085658h */ case    5:  		/* lwz R9, <#[R31 + 64]> */
		/* 82085658h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000040) );
		/* 82085658h case    5:*/		return 0x8208565C;
		  /* 8208565Ch */ case    6:  		/* slw R10, R29, R8 */
		/* 8208565Ch case    6:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R29,regs.R8);
		/* 8208565Ch case    6:*/		return 0x82085660;
		  /* 82085660h */ case    7:  		/* and. R9, R9, R10 */
		/* 82085660h case    7:*/		cpu::op::and<1>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82085660h case    7:*/		return 0x82085664;
		  /* 82085664h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 82085664h case    8:*/		if ( regs.CR[0].eq ) { return 0x82085680;  }
		/* 82085664h case    8:*/		return 0x82085668;
		  /* 82085668h */ case    9:  		/* lwz R9, <#[R11]> */
		/* 82085668h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82085668h case    9:*/		return 0x8208566C;
		  /* 8208566Ch */ case   10:  		/* addi R9, R9, 1 */
		/* 8208566Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8208566Ch case   10:*/		return 0x82085670;
		  /* 82085670h */ case   11:  		/* stw R9, <#[R11]> */
		/* 82085670h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82085670h case   11:*/		return 0x82085674;
		  /* 82085674h */ case   12:  		/* lwz R9, <#[R31 + 64]> */
		/* 82085674h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000040) );
		/* 82085674h case   12:*/		return 0x82085678;
		  /* 82085678h */ case   13:  		/* andc R10, R9, R10 */
		/* 82085678h case   13:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82085678h case   13:*/		return 0x8208567C;
		  /* 8208567Ch */ case   14:  		/* stw R10, <#[R31 + 64]> */
		/* 8208567Ch case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000040) );
		/* 8208567Ch case   14:*/		return 0x82085680;
	}
	return 0x82085680;
} // Block from 82085644h-82085680h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82085680h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085680);
		  /* 82085680h */ case    0:  		/* addi R8, R8, 1 */
		/* 82085680h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82085680h case    0:*/		return 0x82085684;
		  /* 82085684h */ case    1:  		/* addi R11, R11, 108 */
		/* 82085684h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x6C);
		/* 82085684h case    1:*/		return 0x82085688;
		  /* 82085688h */ case    2:  		/* bc 16, CR0_LT, -48 */
		/* 82085688h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82085658;  }
		/* 82085688h case    2:*/		return 0x8208568C;
		  /* 8208568Ch */ case    3:  		/* lwz R11, <#[R31 + 80]> */
		/* 8208568Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 8208568Ch case    3:*/		return 0x82085690;
		  /* 82085690h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82085690h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82085690h case    4:*/		return 0x82085694;
		  /* 82085694h */ case    5:  		/* bc 4, CR6_EQ, 16 */
		/* 82085694h case    5:*/		if ( !regs.CR[6].eq ) { return 0x820856A4;  }
		/* 82085694h case    5:*/		return 0x82085698;
		  /* 82085698h */ case    6:  		/* lwz R11, <#[R31 + 72]> */
		/* 82085698h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000048) );
		/* 82085698h case    6:*/		return 0x8208569C;
		  /* 8208569Ch */ case    7:  		/* addi R11, R11, -1 */
		/* 8208569Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8208569Ch case    7:*/		return 0x820856A0;
		  /* 820856A0h */ case    8:  		/* stw R11, <#[R31 + 72]> */
		/* 820856A0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000048) );
		/* 820856A0h case    8:*/		return 0x820856A4;
	}
	return 0x820856A4;
} // Block from 82085680h-820856A4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820856A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820856A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820856A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820856A4);
		  /* 820856A4h */ case    0:  		/* mr R4, R26 */
		/* 820856A4h case    0:*/		regs.R4 = regs.R26;
		/* 820856A4h case    0:*/		return 0x820856A8;
		  /* 820856A8h */ case    1:  		/* mr R3, R27 */
		/* 820856A8h case    1:*/		regs.R3 = regs.R27;
		/* 820856A8h case    1:*/		return 0x820856AC;
		  /* 820856ACh */ case    2:  		/* bl 1996892 */
		/* 820856ACh case    2:*/		regs.LR = 0x820856B0; return 0x8226CF08;
		/* 820856ACh case    2:*/		return 0x820856B0;
		  /* 820856B0h */ case    3:  		/* mr R3, R31 */
		/* 820856B0h case    3:*/		regs.R3 = regs.R31;
		/* 820856B0h case    3:*/		return 0x820856B4;
		  /* 820856B4h */ case    4:  		/* bl -668 */
		/* 820856B4h case    4:*/		regs.LR = 0x820856B8; return 0x82085418;
		/* 820856B4h case    4:*/		return 0x820856B8;
		  /* 820856B8h */ case    5:  		/* lwz R11, <#[R31 + 112]> */
		/* 820856B8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 820856B8h case    5:*/		return 0x820856BC;
		  /* 820856BCh */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 820856BCh case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820856BCh case    6:*/		return 0x820856C0;
		  /* 820856C0h */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 820856C0h case    7:*/		if ( regs.CR[6].eq ) { return 0x820856CC;  }
		/* 820856C0h case    7:*/		return 0x820856C4;
		  /* 820856C4h */ case    8:  		/* li R3, 0 */
		/* 820856C4h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820856C4h case    8:*/		return 0x820856C8;
		  /* 820856C8h */ case    9:  		/* bl 1997664 */
		/* 820856C8h case    9:*/		regs.LR = 0x820856CC; return 0x8226D228;
		/* 820856C8h case    9:*/		return 0x820856CC;
	}
	return 0x820856CC;
} // Block from 820856A4h-820856CCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 820856CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820856CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820856CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820856CC);
		  /* 820856CCh */ case    0:  		/* lwsync */
		/* 820856CCh case    0:*/		cpu::op::lwsync<0>(regs);
		/* 820856CCh case    0:*/		return 0x820856D0;
		  /* 820856D0h */ case    1:  		/* li R11, 0 */
		/* 820856D0h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820856D0h case    1:*/		return 0x820856D4;
		  /* 820856D4h */ case    2:  		/* li R3, 0 */
		/* 820856D4h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820856D4h case    2:*/		return 0x820856D8;
		  /* 820856D8h */ case    3:  		/* stw R11, <#[R31]> */
		/* 820856D8h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820856D8h case    3:*/		return 0x820856DC;
		  /* 820856DCh */ case    4:  		/* b 20 */
		/* 820856DCh case    4:*/		return 0x820856F0;
		/* 820856DCh case    4:*/		return 0x820856E0;
	}
	return 0x820856E0;
} // Block from 820856CCh-820856E0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820856E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820856E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820856E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820856E0);
		  /* 820856E0h */ case    0:  		/* mr R4, R26 */
		/* 820856E0h case    0:*/		regs.R4 = regs.R26;
		/* 820856E0h case    0:*/		return 0x820856E4;
		  /* 820856E4h */ case    1:  		/* mr R3, R27 */
		/* 820856E4h case    1:*/		regs.R3 = regs.R27;
		/* 820856E4h case    1:*/		return 0x820856E8;
		  /* 820856E8h */ case    2:  		/* bl 1996832 */
		/* 820856E8h case    2:*/		regs.LR = 0x820856EC; return 0x8226CF08;
		/* 820856E8h case    2:*/		return 0x820856EC;
		  /* 820856ECh */ case    3:  		/* addi R3, R29, 4 */
		/* 820856ECh case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R29,0x4);
		/* 820856ECh case    3:*/		return 0x820856F0;
	}
	return 0x820856F0;
} // Block from 820856E0h-820856F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820856F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820856F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820856F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820856F0);
		  /* 820856F0h */ case    0:  		/* addi R1, R1, 144 */
		/* 820856F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 820856F0h case    0:*/		return 0x820856F4;
		  /* 820856F4h */ case    1:  		/* b 48044 */
		/* 820856F4h case    1:*/		return 0x820912A0;
		/* 820856F4h case    1:*/		return 0x820856F8;
		  /* 820856F8h */ case    2:  		/* lwz R10, <#[R4 + 84]> */
		/* 820856F8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000054) );
		/* 820856F8h case    2:*/		return 0x820856FC;
		  /* 820856FCh */ case    3:  		/* mr R11, R4 */
		/* 820856FCh case    3:*/		regs.R11 = regs.R4;
		/* 820856FCh case    3:*/		return 0x82085700;
		  /* 82085700h */ case    4:  		/* mr R9, R5 */
		/* 82085700h case    4:*/		regs.R9 = regs.R5;
		/* 82085700h case    4:*/		return 0x82085704;
		  /* 82085704h */ case    5:  		/* rlwinm R10, R10, 0, 30, 31 */
		/* 82085704h case    5:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R10);
		/* 82085704h case    5:*/		return 0x82085708;
		  /* 82085708h */ case    6:  		/* li R5, 0 */
		/* 82085708h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82085708h case    6:*/		return 0x8208570C;
		  /* 8208570Ch */ case    7:  		/* addi R10, R10, 23 */
		/* 8208570Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x17);
		/* 8208570Ch case    7:*/		return 0x82085710;
		  /* 82085710h */ case    8:  		/* li R4, 1 */
		/* 82085710h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82085710h case    8:*/		return 0x82085714;
		  /* 82085714h */ case    9:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82085714h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82085714h case    9:*/		return 0x82085718;
		  /* 82085718h */ case   10:  		/* addi R3, R11, 60 */
		/* 82085718h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x3C);
		/* 82085718h case   10:*/		return 0x8208571C;
		  /* 8208571Ch */ case   11:  		/* stwx R9, <#[R10 + R11]> */
		/* 8208571Ch case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8208571Ch case   11:*/		return 0x82085720;
		  /* 82085720h */ case   12:  		/* lwz R10, <#[R11 + 84]> */
		/* 82085720h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000054) );
		/* 82085720h case   12:*/		return 0x82085724;
		  /* 82085724h */ case   13:  		/* addi R10, R10, 1 */
		/* 82085724h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82085724h case   13:*/		return 0x82085728;
		  /* 82085728h */ case   14:  		/* stw R10, <#[R11 + 84]> */
		/* 82085728h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000054) );
		/* 82085728h case   14:*/		return 0x8208572C;
		  /* 8208572Ch */ case   15:  		/* b 1996780 */
		/* 8208572Ch case   15:*/		return 0x8226CF18;
		/* 8208572Ch case   15:*/		return 0x82085730;
	}
	return 0x82085730;
} // Block from 820856F0h-82085730h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82085730h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085730);
		  /* 82085730h */ case    0:  		/* mfspr R12, LR */
		/* 82085730h case    0:*/		regs.R12 = regs.LR;
		/* 82085730h case    0:*/		return 0x82085734;
		  /* 82085734h */ case    1:  		/* bl 47908 */
		/* 82085734h case    1:*/		regs.LR = 0x82085738; return 0x82091258;
		/* 82085734h case    1:*/		return 0x82085738;
		  /* 82085738h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82085738h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82085738h case    2:*/		return 0x8208573C;
		  /* 8208573Ch */ case    3:  		/* mr R31, R3 */
		/* 8208573Ch case    3:*/		regs.R31 = regs.R3;
		/* 8208573Ch case    3:*/		return 0x82085740;
		  /* 82085740h */ case    4:  		/* lwz R3, <#[R3 + 12224]> */
		/* 82085740h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00002FC0) );
		/* 82085740h case    4:*/		return 0x82085744;
		  /* 82085744h */ case    5:  		/* li R28, 0 */
		/* 82085744h case    5:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82085744h case    5:*/		return 0x82085748;
		  /* 82085748h */ case    6:  		/* lis R4, -20096 */
		/* 82085748h case    6:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB180);
		/* 82085748h case    6:*/		return 0x8208574C;
		  /* 8208574Ch */ case    7:  		/* stw R28, <#[R31 + 11084]> */
		/* 8208574Ch case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00002B4C) );
		/* 8208574Ch case    7:*/		return 0x82085750;
		  /* 82085750h */ case    8:  		/* bl 11240 */
		/* 82085750h case    8:*/		regs.LR = 0x82085754; return 0x82088338;
		/* 82085750h case    8:*/		return 0x82085754;
		  /* 82085754h */ case    9:  		/* lis R4, -20096 */
		/* 82085754h case    9:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB180);
		/* 82085754h case    9:*/		return 0x82085758;
		  /* 82085758h */ case   10:  		/* lwz R3, <#[R31 + 11128]> */
		/* 82085758h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00002B78) );
		/* 82085758h case   10:*/		return 0x8208575C;
		  /* 8208575Ch */ case   11:  		/* bl 11228 */
		/* 8208575Ch case   11:*/		regs.LR = 0x82085760; return 0x82088338;
		/* 8208575Ch case   11:*/		return 0x82085760;
		  /* 82085760h */ case   12:  		/* addi R30, R31, 11636 */
		/* 82085760h case   12:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x2D74);
		/* 82085760h case   12:*/		return 0x82085764;
		  /* 82085764h */ case   13:  		/* li R29, 6 */
		/* 82085764h case   13:*/		cpu::op::li<0>(regs,&regs.R29,0x6);
		/* 82085764h case   13:*/		return 0x82085768;
		  /* 82085768h */ case   14:  		/* lwz R11, <#[R30 + 16]> */
		/* 82085768h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82085768h case   14:*/		return 0x8208576C;
		  /* 8208576Ch */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 8208576Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8208576Ch case   15:*/		return 0x82085770;
		  /* 82085770h */ case   16:  		/* bc 12, CR6_EQ, 20 */
		/* 82085770h case   16:*/		if ( regs.CR[6].eq ) { return 0x82085784;  }
		/* 82085770h case   16:*/		return 0x82085774;
		  /* 82085774h */ case   17:  		/* li R5, 0 */
		/* 82085774h case   17:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82085774h case   17:*/		return 0x82085778;
		  /* 82085778h */ case   18:  		/* li R4, 1 */
		/* 82085778h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82085778h case   18:*/		return 0x8208577C;
		  /* 8208577Ch */ case   19:  		/* mr R3, R30 */
		/* 8208577Ch case   19:*/		regs.R3 = regs.R30;
		/* 8208577Ch case   19:*/		return 0x82085780;
		  /* 82085780h */ case   20:  		/* bl 1996696 */
		/* 82085780h case   20:*/		regs.LR = 0x82085784; return 0x8226CF18;
		/* 82085780h case   20:*/		return 0x82085784;
	}
	return 0x82085784;
} // Block from 82085730h-82085784h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82085784h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085784( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085784) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085784);
		  /* 82085784h */ case    0:  		/* addic. R29, R29, -1 */
		/* 82085784h case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 82085784h case    0:*/		return 0x82085788;
		  /* 82085788h */ case    1:  		/* addi R30, R30, 108 */
		/* 82085788h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x6C);
		/* 82085788h case    1:*/		return 0x8208578C;
		  /* 8208578Ch */ case    2:  		/* bc 4, CR0_EQ, -36 */
		/* 8208578Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x82085768;  }
		/* 8208578Ch case    2:*/		return 0x82085790;
		  /* 82085790h */ case    3:  		/* addi R30, R31, 11652 */
		/* 82085790h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x2D84);
		/* 82085790h case    3:*/		return 0x82085794;
		  /* 82085794h */ case    4:  		/* li R29, 6 */
		/* 82085794h case    4:*/		cpu::op::li<0>(regs,&regs.R29,0x6);
		/* 82085794h case    4:*/		return 0x82085798;
		  /* 82085798h */ case    5:  		/* lwz R3, <#[R30]> */
		/* 82085798h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 82085798h case    5:*/		return 0x8208579C;
		  /* 8208579Ch */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 8208579Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8208579Ch case    6:*/		return 0x820857A0;
		  /* 820857A0h */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 820857A0h case    7:*/		if ( regs.CR[6].eq ) { return 0x820857B4;  }
		/* 820857A0h case    7:*/		return 0x820857A4;
		  /* 820857A4h */ case    8:  		/* li R4, -1 */
		/* 820857A4h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0xFFFFFFFF);
		/* 820857A4h case    8:*/		return 0x820857A8;
		  /* 820857A8h */ case    9:  		/* bl 13288 */
		/* 820857A8h case    9:*/		regs.LR = 0x820857AC; return 0x82088B90;
		/* 820857A8h case    9:*/		return 0x820857AC;
		  /* 820857ACh */ case   10:  		/* lwz R3, <#[R30]> */
		/* 820857ACh case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 820857ACh case   10:*/		return 0x820857B0;
		  /* 820857B0h */ case   11:  		/* bl 12376 */
		/* 820857B0h case   11:*/		regs.LR = 0x820857B4; return 0x82088808;
		/* 820857B0h case   11:*/		return 0x820857B4;
	}
	return 0x820857B4;
} // Block from 82085784h-820857B4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820857B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820857B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820857B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820857B4);
		  /* 820857B4h */ case    0:  		/* addic. R29, R29, -1 */
		/* 820857B4h case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 820857B4h case    0:*/		return 0x820857B8;
		  /* 820857B8h */ case    1:  		/* addi R30, R30, 108 */
		/* 820857B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x6C);
		/* 820857B8h case    1:*/		return 0x820857BC;
		  /* 820857BCh */ case    2:  		/* bc 4, CR0_EQ, -36 */
		/* 820857BCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x82085798;  }
		/* 820857BCh case    2:*/		return 0x820857C0;
		  /* 820857C0h */ case    3:  		/* stw R28, <#[R31 + 11120]> */
		/* 820857C0h case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00002B70) );
		/* 820857C0h case    3:*/		return 0x820857C4;
		  /* 820857C4h */ case    4:  		/* stw R28, <#[R31 + 11124]> */
		/* 820857C4h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00002B74) );
		/* 820857C4h case    4:*/		return 0x820857C8;
		  /* 820857C8h */ case    5:  		/* addi R1, R1, 128 */
		/* 820857C8h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820857C8h case    5:*/		return 0x820857CC;
		  /* 820857CCh */ case    6:  		/* b 47836 */
		/* 820857CCh case    6:*/		return 0x820912A8;
		/* 820857CCh case    6:*/		return 0x820857D0;
	}
	return 0x820857D0;
} // Block from 820857B4h-820857D0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820857D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820857D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820857D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820857D0);
		  /* 820857D0h */ case    0:  		/* mfspr R12, LR */
		/* 820857D0h case    0:*/		regs.R12 = regs.LR;
		/* 820857D0h case    0:*/		return 0x820857D4;
		  /* 820857D4h */ case    1:  		/* bl 47740 */
		/* 820857D4h case    1:*/		regs.LR = 0x820857D8; return 0x82091250;
		/* 820857D4h case    1:*/		return 0x820857D8;
		  /* 820857D8h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 820857D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 820857D8h case    2:*/		return 0x820857DC;
		  /* 820857DCh */ case    3:  		/* mr R30, R4 */
		/* 820857DCh case    3:*/		regs.R30 = regs.R4;
		/* 820857DCh case    3:*/		return 0x820857E0;
		  /* 820857E0h */ case    4:  		/* mr R31, R3 */
		/* 820857E0h case    4:*/		regs.R31 = regs.R3;
		/* 820857E0h case    4:*/		return 0x820857E4;
		  /* 820857E4h */ case    5:  		/* mr R4, R5 */
		/* 820857E4h case    5:*/		regs.R4 = regs.R5;
		/* 820857E4h case    5:*/		return 0x820857E8;
		  /* 820857E8h */ case    6:  		/* mr R3, R30 */
		/* 820857E8h case    6:*/		regs.R3 = regs.R30;
		/* 820857E8h case    6:*/		return 0x820857EC;
		  /* 820857ECh */ case    7:  		/* mr R27, R5 */
		/* 820857ECh case    7:*/		regs.R27 = regs.R5;
		/* 820857ECh case    7:*/		return 0x820857F0;
		  /* 820857F0h */ case    8:  		/* bl -1408 */
		/* 820857F0h case    8:*/		regs.LR = 0x820857F4; return 0x82085270;
		/* 820857F0h case    8:*/		return 0x820857F4;
		  /* 820857F4h */ case    9:  		/* li R11, 6 */
		/* 820857F4h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 820857F4h case    9:*/		return 0x820857F8;
		  /* 820857F8h */ case   10:  		/* li R29, 0 */
		/* 820857F8h case   10:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 820857F8h case   10:*/		return 0x820857FC;
		  /* 820857FCh */ case   11:  		/* lis R26, 256 */
		/* 820857FCh case   11:*/		cpu::op::lis<0>(regs,&regs.R26,0x100);
		/* 820857FCh case   11:*/		return 0x82085800;
		  /* 82085800h */ case   12:  		/* mr R10, R29 */
		/* 82085800h case   12:*/		regs.R10 = regs.R29;
		/* 82085800h case   12:*/		return 0x82085804;
		  /* 82085804h */ case   13:  		/* mr R9, R29 */
		/* 82085804h case   13:*/		regs.R9 = regs.R29;
		/* 82085804h case   13:*/		return 0x82085808;
		  /* 82085808h */ case   14:  		/* mtspr CTR, R11 */
		/* 82085808h case   14:*/		regs.CTR = regs.R11;
		/* 82085808h case   14:*/		return 0x8208580C;
		  /* 8208580Ch */ case   15:  		/* slw R11, R26, R9 */
		/* 8208580Ch case   15:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R26,regs.R9);
		/* 8208580Ch case   15:*/		return 0x82085810;
		  /* 82085810h */ case   16:  		/* and. R11, R11, R27 */
		/* 82085810h case   16:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R27);
		/* 82085810h case   16:*/		return 0x82085814;
		  /* 82085814h */ case   17:  		/* bc 12, CR0_EQ, 8 */
		/* 82085814h case   17:*/		if ( regs.CR[0].eq ) { return 0x8208581C;  }
		/* 82085814h case   17:*/		return 0x82085818;
		  /* 82085818h */ case   18:  		/* addi R10, R10, 1 */
		/* 82085818h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82085818h case   18:*/		return 0x8208581C;
	}
	return 0x8208581C;
} // Block from 820857D0h-8208581Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8208581Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208581C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208581C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208581C);
		  /* 8208581Ch */ case    0:  		/* addi R9, R9, 1 */
		/* 8208581Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8208581Ch case    0:*/		return 0x82085820;
		  /* 82085820h */ case    1:  		/* bc 16, CR0_LT, -20 */
		/* 82085820h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8208580C;  }
		/* 82085820h case    1:*/		return 0x82085824;
		  /* 82085824h */ case    2:  		/* rlwinm R11, R27, 0, 2, 7 */
		/* 82085824h case    2:*/		cpu::op::rlwinm<0,0,2,7>(regs,&regs.R11,regs.R27);
		/* 82085824h case    2:*/		return 0x82085828;
	}
	return 0x82085828;
} // Block from 8208581Ch-82085828h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82085828h
// Function '?DebugGpuDeadlock@D3D@@YAHPAVCDevice@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085828);
		  /* 82085828h */ case    0:  		/* rlwinm. R9, R27, 0, 31, 31 */
		/* 82085828h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R27);
		/* 82085828h case    0:*/		return 0x8208582C;
		  /* 8208582Ch */ case    1:  		/* stw R11, <#[R30 + 64]> */
		/* 8208582Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000040) );
		/* 8208582Ch case    1:*/		return 0x82085830;
		  /* 82085830h */ case    2:  		/* lis R11, 4 */
		/* 82085830h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0x4);
		/* 82085830h case    2:*/		return 0x82085834;
		  /* 82085834h */ case    3:  		/* bc 4, CR0_EQ, 8 */
		/* 82085834h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8208583C;  }
		/* 82085834h case    3:*/		return 0x82085838;
		  /* 82085838h */ case    4:  		/* lis R11, 2 */
		/* 82085838h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0x2);
		/* 82085838h case    4:*/		return 0x8208583C;
	}
	return 0x8208583C;
} // Block from 82085828h-8208583Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8208583Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208583C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208583C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208583C);
		  /* 8208583Ch */ case    0:  		/* li R8, 6 */
		/* 8208583Ch case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x6);
		/* 8208583Ch case    0:*/		return 0x82085840;
		  /* 82085840h */ case    1:  		/* divwu R11, R11, R10 */
		/* 82085840h case    1:*/		cpu::op::divwu<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82085840h case    1:*/		return 0x82085844;
		  /* 82085844h */ case    2:  		/* twi 6, R10, 0 */
		/* 82085844h case    2:*/		cpu::op::tw<6>(regs, 0x82085844, regs.R10, 0x00000000);
		/* 82085844h case    2:*/		return 0x82085848;
		  /* 82085848h */ case    3:  		/* lwz R10, <#[R31 + 12224]> */
		/* 82085848h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002FC0) );
		/* 82085848h case    3:*/		return 0x8208584C;
		  /* 8208584Ch */ case    4:  		/* rlwinm R6, R11, 0, 0, 24 */
		/* 8208584Ch case    4:*/		cpu::op::rlwinm<0,0,0,24>(regs,&regs.R6,regs.R11);
		/* 8208584Ch case    4:*/		return 0x82085850;
		  /* 82085850h */ case    5:  		/* mr R7, R29 */
		/* 82085850h case    5:*/		regs.R7 = regs.R29;
		/* 82085850h case    5:*/		return 0x82085854;
		  /* 82085854h */ case    6:  		/* lis R9, 32528 */
		/* 82085854h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0x7F10);
		/* 82085854h case    6:*/		return 0x82085858;
		  /* 82085858h */ case    7:  		/* mtspr CTR, R8 */
		/* 82085858h case    7:*/		regs.CTR = regs.R8;
		/* 82085858h case    7:*/		return 0x8208585C;
		  /* 8208585Ch */ case    8:  		/* addi R11, R31, 11592 */
		/* 8208585Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x2D48);
		/* 8208585Ch case    8:*/		return 0x82085860;
		  /* 82085860h */ case    9:  		/* slw R8, R26, R7 */
		/* 82085860h case    9:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R26,regs.R7);
		/* 82085860h case    9:*/		return 0x82085864;
		  /* 82085864h */ case   10:  		/* and. R8, R8, R27 */
		/* 82085864h case   10:*/		cpu::op::and<1>(regs,&regs.R8,regs.R8,regs.R27);
		/* 82085864h case   10:*/		return 0x82085868;
		  /* 82085868h */ case   11:  		/* bc 12, CR0_EQ, 76 */
		/* 82085868h case   11:*/		if ( regs.CR[0].eq ) { return 0x820858B4;  }
		/* 82085868h case   11:*/		return 0x8208586C;
		  /* 8208586Ch */ case   12:  		/* rlwinm R5, R9, 0, 0, 31 */
		/* 8208586Ch case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R9);
		/* 8208586Ch case   12:*/		return 0x82085870;
		  /* 82085870h */ case   13:  		/* stw R9, <#[R11]> */
		/* 82085870h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82085870h case   13:*/		return 0x82085874;
		  /* 82085874h */ case   14:  		/* lis R8, -16382 */
		/* 82085874h case   14:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFFC002);
		/* 82085874h case   14:*/		return 0x82085878;
		  /* 82085878h */ case   15:  		/* stw R29, <#[R11 - 4]> */
		/* 82085878h case   15:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 82085878h case   15:*/		return 0x8208587C;
		  /* 8208587Ch */ case   16:  		/* add R9, R9, R6 */
		/* 8208587Ch case   16:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R6);
		/* 8208587Ch case   16:*/		return 0x82085880;
		  /* 82085880h */ case   17:  		/* stw R5, <#[R11 - 8]> */
		/* 82085880h case   17:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0xFFFFFFF8) );
		/* 82085880h case   17:*/		return 0x82085884;
		  /* 82085884h */ case   18:  		/* ori R8, R8, 22528 */
		/* 82085884h case   18:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x5800);
		/* 82085884h case   18:*/		return 0x82085888;
		  /* 82085888h */ case   19:  		/* li R5, 3 */
		/* 82085888h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 82085888h case   19:*/		return 0x8208588C;
		  /* 8208588Ch */ case   20:  		/* stw R9, <#[R11 + 4]> */
		/* 8208588Ch case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 8208588Ch case   20:*/		return 0x82085890;
		  /* 82085890h */ case   21:  		/* stw R8, <#[R10]> */
		/* 82085890h case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82085890h case   21:*/		return 0x82085894;
		  /* 82085894h */ case   22:  		/* stw R5, <#[R10 + 4]> */
		/* 82085894h case   22:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R10 + 0x00000004) );
		/* 82085894h case   22:*/		return 0x82085898;
		  /* 82085898h */ case   23:  		/* lwz R8, <#[R11 + 8]> */
		/* 82085898h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 82085898h case   23:*/		return 0x8208589C;
		  /* 8208589Ch */ case   24:  		/* stw R8, <#[R10 + 8]> */
		/* 8208589Ch case   24:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000008) );
		/* 8208589Ch case   24:*/		return 0x820858A0;
		  /* 820858A0h */ case   25:  		/* lwz R8, <#[R11 - 4]> */
		/* 820858A0h case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 820858A0h case   25:*/		return 0x820858A4;
		  /* 820858A4h */ case   26:  		/* lwz R5, <#[R11 - 8]> */
		/* 820858A4h case   26:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0xFFFFFFF8) );
		/* 820858A4h case   26:*/		return 0x820858A8;
		  /* 820858A8h */ case   27:  		/* rlwimi R8, R5, 0, 0, 29 */
		/* 820858A8h case   27:*/		cpu::op::rlwimi<0,0,0,29>(regs,&regs.R8,regs.R5);
		/* 820858A8h case   27:*/		return 0x820858AC;
		  /* 820858ACh */ case   28:  		/* stw R8, <#[R10 + 12]> */
		/* 820858ACh case   28:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x0000000C) );
		/* 820858ACh case   28:*/		return 0x820858B0;
		  /* 820858B0h */ case   29:  		/* addi R10, R10, 16 */
		/* 820858B0h case   29:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x10);
		/* 820858B0h case   29:*/		return 0x820858B4;
	}
	return 0x820858B4;
} // Block from 8208583Ch-820858B4h (30 instructions)

//////////////////////////////////////////////////////
// Block at 820858B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820858B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820858B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820858B4);
		  /* 820858B4h */ case    0:  		/* addi R7, R7, 1 */
		/* 820858B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 820858B4h case    0:*/		return 0x820858B8;
		  /* 820858B8h */ case    1:  		/* addi R11, R11, 108 */
		/* 820858B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x6C);
		/* 820858B8h case    1:*/		return 0x820858BC;
		  /* 820858BCh */ case    2:  		/* bc 16, CR0_LT, -92 */
		/* 820858BCh case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82085860;  }
		/* 820858BCh case    2:*/		return 0x820858C0;
		  /* 820858C0h */ case    3:  		/* lwz R9, <#[R31 + 12224]> */
		/* 820858C0h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00002FC0) );
		/* 820858C0h case    3:*/		return 0x820858C4;
		  /* 820858C4h */ case    4:  		/* addi R8, R1, 84 */
		/* 820858C4h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x54);
		/* 820858C4h case    4:*/		return 0x820858C8;
		  /* 820858C8h */ case    5:  		/* li R5, 1 */
		/* 820858C8h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820858C8h case    5:*/		return 0x820858CC;
		  /* 820858CCh */ case    6:  		/* subf R10, R9, R10 */
		/* 820858CCh case    6:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 820858CCh case    6:*/		return 0x820858D0;
		  /* 820858D0h */ case    7:  		/* rlwinm R11, R9, 12, 20, 31 */
		/* 820858D0h case    7:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R11,regs.R9);
		/* 820858D0h case    7:*/		return 0x820858D4;
		  /* 820858D4h */ case    8:  		/* srawi R7, R10, 2 */
		/* 820858D4h case    8:*/		cpu::op::srawi<0,2>(regs,&regs.R7,regs.R10);
		/* 820858D4h case    8:*/		return 0x820858D8;
		  /* 820858D8h */ case    9:  		/* addi R10, R11, 512 */
		/* 820858D8h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x200);
		/* 820858D8h case    9:*/		return 0x820858DC;
		  /* 820858DCh */ case   10:  		/* stw R29, <#[R8]> */
		/* 820858DCh case   10:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R8 + 0x00000000) );
		/* 820858DCh case   10:*/		return 0x820858E0;
		  /* 820858E0h */ case   11:  		/* rlwinm R11, R9, 0, 3, 31 */
		/* 820858E0h case   11:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R11,regs.R9);
		/* 820858E0h case   11:*/		return 0x820858E4;
		  /* 820858E4h */ case   12:  		/* rlwinm R10, R10, 0, 19, 19 */
		/* 820858E4h case   12:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R10,regs.R10);
		/* 820858E4h case   12:*/		return 0x820858E8;
		  /* 820858E8h */ case   13:  		/* rlwinm R9, R7, 0, 8, 31 */
		/* 820858E8h case   13:*/		cpu::op::rlwinm<0,0,8,31>(regs,&regs.R9,regs.R7);
		/* 820858E8h case   13:*/		return 0x820858EC;
		  /* 820858ECh */ case   14:  		/* add R11, R10, R11 */
		/* 820858ECh case   14:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 820858ECh case   14:*/		return 0x820858F0;
		  /* 820858F0h */ case   15:  		/* oris R10, R9, 33024 */
		/* 820858F0h case   15:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R9,0x8100);
		/* 820858F0h case   15:*/		return 0x820858F4;
		  /* 820858F4h */ case   16:  		/* stw R11, <#[R1 + 84]> */
		/* 820858F4h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 820858F4h case   16:*/		return 0x820858F8;
		  /* 820858F8h */ case   17:  		/* addi R4, R1, 80 */
		/* 820858F8h case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 820858F8h case   17:*/		return 0x820858FC;
		  /* 820858FCh */ case   18:  		/* stw R10, <#[R1 + 80]> */
		/* 820858FCh case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 820858FCh case   18:*/		return 0x82085900;
		  /* 82085900h */ case   19:  		/* mr R3, R31 */
		/* 82085900h case   19:*/		regs.R3 = regs.R31;
		/* 82085900h case   19:*/		return 0x82085904;
		  /* 82085904h */ case   20:  		/* bl -75628 */
		/* 82085904h case   20:*/		regs.LR = 0x82085908; return 0x82073198;
		/* 82085904h case   20:*/		return 0x82085908;
		  /* 82085908h */ case   21:  		/* addi R30, R31, 11584 */
		/* 82085908h case   21:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x2D40);
		/* 82085908h case   21:*/		return 0x8208590C;
		  /* 8208590Ch */ case   22:  		/* slw R11, R26, R29 */
		/* 8208590Ch case   22:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R26,regs.R29);
		/* 8208590Ch case   22:*/		return 0x82085910;
		  /* 82085910h */ case   23:  		/* and. R11, R11, R27 */
		/* 82085910h case   23:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R27);
		/* 82085910h case   23:*/		return 0x82085914;
		  /* 82085914h */ case   24:  		/* bc 12, CR0_EQ, 72 */
		/* 82085914h case   24:*/		if ( regs.CR[0].eq ) { return 0x8208595C;  }
		/* 82085914h case   24:*/		return 0x82085918;
		  /* 82085918h */ case   25:  		/* lwz R28, <#[R30 + 4]> */
		/* 82085918h case   25:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R30 + 0x00000004) );
		/* 82085918h case   25:*/		return 0x8208591C;
		  /* 8208591Ch */ case   26:  		/* li R5, 0 */
		/* 8208591Ch case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8208591Ch case   26:*/		return 0x82085920;
		  /* 82085920h */ case   27:  		/* lwz R11, <#[R30]> */
		/* 82085920h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82085920h case   27:*/		return 0x82085924;
		  /* 82085924h */ case   28:  		/* mr R4, R31 */
		/* 82085924h case   28:*/		regs.R4 = regs.R31;
		/* 82085924h case   28:*/		return 0x82085928;
	}
	return 0x82085928;
} // Block from 820858B4h-82085928h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82085928h
// Function '?PixNullHardwareInterruptCallback@D3D@@YAXPAU_KDPC@@PAX11@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085928);
		  /* 82085928h */ case    0:  		/* addi R3, R1, 96 */
		/* 82085928h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 82085928h case    0:*/		return 0x8208592C;
		  /* 8208592Ch */ case    1:  		/* rlwimi R28, R11, 0, 0, 29 */
		/* 8208592Ch case    1:*/		cpu::op::rlwimi<0,0,0,29>(regs,&regs.R28,regs.R11);
		/* 8208592Ch case    1:*/		return 0x82085930;
		  /* 82085930h */ case    2:  		/* bl -36296 */
		/* 82085930h case    2:*/		regs.LR = 0x82085934; return 0x8207CB68;
		/* 82085930h case    2:*/		return 0x82085934;
		  /* 82085934h */ case    3:  		/* addi R3, R1, 96 */
		/* 82085934h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 82085934h case    3:*/		return 0x82085938;
		  /* 82085938h */ case    4:  		/* bl -36056 */
		/* 82085938h case    4:*/		regs.LR = 0x8208593C; return 0x8207CC60;
		/* 82085938h case    4:*/		return 0x8208593C;
		  /* 8208593Ch */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 8208593Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8208593Ch case    5:*/		return 0x82085940;
		  /* 82085940h */ case    6:  		/* bc 12, CR0_EQ, 20 */
		/* 82085940h case    6:*/		if ( regs.CR[0].eq ) { return 0x82085954;  }
		/* 82085940h case    6:*/		return 0x82085944;
		  /* 82085944h */ case    7:  		/* lwz R11, <#[R30 + 20]> */
		/* 82085944h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 82085944h case    7:*/		return 0x82085948;
		  /* 82085948h */ case    8:  		/* lwz R11, <#[R11]> */
		/* 82085948h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82085948h case    8:*/		return 0x8208594C;
		  /* 8208594Ch */ case    9:  		/* cmplw CR6, R11, R28 */
		/* 8208594Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 8208594Ch case    9:*/		return 0x82085950;
		  /* 82085950h */ case   10:  		/* bc 4, CR6_EQ, -28 */
		/* 82085950h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82085934;  }
		/* 82085950h case   10:*/		return 0x82085954;
	}
	return 0x82085954;
} // Block from 82085928h-82085954h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82085954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085954);
		  /* 82085954h */ case    0:  		/* addi R3, R1, 96 */
		/* 82085954h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 82085954h case    0:*/		return 0x82085958;
		  /* 82085958h */ case    1:  		/* bl -36288 */
		/* 82085958h case    1:*/		regs.LR = 0x8208595C; return 0x8207CB98;
		/* 82085958h case    1:*/		return 0x8208595C;
	}
	return 0x8208595C;
} // Block from 82085954h-8208595Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8208595Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208595C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208595C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208595C);
		  /* 8208595Ch */ case    0:  		/* addi R29, R29, 1 */
		/* 8208595Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8208595Ch case    0:*/		return 0x82085960;
		  /* 82085960h */ case    1:  		/* addi R30, R30, 108 */
		/* 82085960h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x6C);
		/* 82085960h case    1:*/		return 0x82085964;
		  /* 82085964h */ case    2:  		/* cmplwi CR6, R29, 6 */
		/* 82085964h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000006);
		/* 82085964h case    2:*/		return 0x82085968;
		  /* 82085968h */ case    3:  		/* bc 12, CR6_LT, -92 */
		/* 82085968h case    3:*/		if ( regs.CR[6].lt ) { return 0x8208590C;  }
		/* 82085968h case    3:*/		return 0x8208596C;
		  /* 8208596Ch */ case    4:  		/* addi R1, R1, 176 */
		/* 8208596Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8208596Ch case    4:*/		return 0x82085970;
		  /* 82085970h */ case    5:  		/* b 47408 */
		/* 82085970h case    5:*/		return 0x820912A0;
		/* 82085970h case    5:*/		return 0x82085974;
		  /* 82085974h */ case    6:  		/* nop */
		/* 82085974h case    6:*/		cpu::op::nop();
		/* 82085974h case    6:*/		return 0x82085978;
		  /* 82085978h */ case    7:  		/* lis R5, 16384 */
		/* 82085978h case    7:*/		cpu::op::lis<0>(regs,&regs.R5,0x4000);
		/* 82085978h case    7:*/		return 0x8208597C;
		  /* 8208597Ch */ case    8:  		/* li R6, -1 */
		/* 8208597Ch case    8:*/		cpu::op::li<0>(regs,&regs.R6,0xFFFFFFFF);
		/* 8208597Ch case    8:*/		return 0x82085980;
		  /* 82085980h */ case    9:  		/* lwz R11, <#[R3]> */
		/* 82085980h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82085980h case    9:*/		return 0x82085984;
		  /* 82085984h */ case   10:  		/* addi R10, R3, 4 */
		/* 82085984h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0x4);
		/* 82085984h case   10:*/		return 0x82085988;
		  /* 82085988h */ case   11:  		/* cmplw CR6, R10, R11 */
		/* 82085988h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82085988h case   11:*/		return 0x8208598C;
		  /* 8208598Ch */ case   12:  		/* bc 4, CR6_LT, 184 */
		/* 8208598Ch case   12:*/		if ( !regs.CR[6].lt ) { return 0x82085A44;  }
		/* 8208598Ch case   12:*/		return 0x82085990;
		  /* 82085990h */ case   13:  		/* subf R11, R10, R11 */
		/* 82085990h case   13:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82085990h case   13:*/		return 0x82085994;
		  /* 82085994h */ case   14:  		/* addi R11, R11, -1 */
		/* 82085994h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82085994h case   14:*/		return 0x82085998;
		  /* 82085998h */ case   15:  		/* rlwinm R11, R11, 29, 3, 31 */
		/* 82085998h case   15:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R11,regs.R11);
		/* 82085998h case   15:*/		return 0x8208599C;
		  /* 8208599Ch */ case   16:  		/* addi R11, R11, 1 */
		/* 8208599Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8208599Ch case   16:*/		return 0x820859A0;
		  /* 820859A0h */ case   17:  		/* mtspr CTR, R11 */
		/* 820859A0h case   17:*/		regs.CTR = regs.R11;
		/* 820859A0h case   17:*/		return 0x820859A4;
		  /* 820859A4h */ case   18:  		/* lwz R11, <#[R10]> */
		/* 820859A4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 820859A4h case   18:*/		return 0x820859A8;
		  /* 820859A8h */ case   19:  		/* lwz R9, <#[R10 + 4]> */
		/* 820859A8h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 820859A8h case   19:*/		return 0x820859AC;
		  /* 820859ACh */ case   20:  		/* rlwinm R8, R11, 29, 3, 29 */
		/* 820859ACh case   20:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R8,regs.R11);
		/* 820859ACh case   20:*/		return 0x820859B0;
		  /* 820859B0h */ case   21:  		/* rlwinm. R7, R11, 0, 31, 31 */
		/* 820859B0h case   21:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R7,regs.R11);
		/* 820859B0h case   21:*/		return 0x820859B4;
		  /* 820859B4h */ case   22:  		/* subf R11, R5, R8 */
		/* 820859B4h case   22:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R5,regs.R8);
		/* 820859B4h case   22:*/		return 0x820859B8;
		  /* 820859B8h */ case   23:  		/* bc 12, CR0_EQ, 32 */
		/* 820859B8h case   23:*/		if ( regs.CR[0].eq ) { return 0x820859D8;  }
		/* 820859B8h case   23:*/		return 0x820859BC;
		  /* 820859BCh */ case   24:  		/* lhz R8, <#[R11 + 2]> */
		/* 820859BCh case   24:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 820859BCh case   24:*/		return 0x820859C0;
		  /* 820859C0h */ case   25:  		/* lhz R7, <#[R11]> */
		/* 820859C0h case   25:*/		cpu::mem::load16z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 820859C0h case   25:*/		return 0x820859C4;
		  /* 820859C4h */ case   26:  		/* addi R8, R8, 1 */
		/* 820859C4h case   26:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 820859C4h case   26:*/		return 0x820859C8;
		  /* 820859C8h */ case   27:  		/* subfc R8, R7, R8 */
		/* 820859C8h case   27:*/		cpu::op::subfc<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 820859C8h case   27:*/		return 0x820859CC;
		  /* 820859CCh */ case   28:  		/* addze R4, R7 */
		/* 820859CCh case   28:*/		cpu::op::addze<0>(regs,&regs.R4,regs.R7);
		/* 820859CCh case   28:*/		return 0x820859D0;
		  /* 820859D0h */ case   29:  		/* subf R8, R4, R7 */
		/* 820859D0h case   29:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R4,regs.R7);
		/* 820859D0h case   29:*/		return 0x820859D4;
		  /* 820859D4h */ case   30:  		/* b 56 */
		/* 820859D4h case   30:*/		return 0x82085A0C;
		/* 820859D4h case   30:*/		return 0x820859D8;
	}
	return 0x820859D8;
} // Block from 8208595Ch-820859D8h (31 instructions)

//////////////////////////////////////////////////////
// Block at 820859D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820859D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820859D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820859D8);
		  /* 820859D8h */ case    0:  		/* addi R8, R11, 48 */
		/* 820859D8h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x30);
		/* 820859D8h case    0:*/		return 0x820859DC;
		  /* 820859DCh */ case    1:  		/* addi R7, R11, 16 */
		/* 820859DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x10);
		/* 820859DCh case    1:*/		return 0x820859E0;
	}
	return 0x820859E0;
} // Block from 820859D8h-820859E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820859E0h
// Function '?DebugSpew@ATG@@YAXPBDZZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820859E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820859E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820859E0);
		  /* 820859E0h */ case    0:  		/* addi R4, R11, 52 */
		/* 820859E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x34);
		/* 820859E0h case    0:*/		return 0x820859E4;
		  /* 820859E4h */ case    1:  		/* addi R3, R11, 20 */
		/* 820859E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x14);
		/* 820859E4h case    1:*/		return 0x820859E8;
		  /* 820859E8h */ case    2:  		/* lwbrx R8, <#[R8]> */
		/* 820859E8h case    2:*/		cpu::mem::lwbrx( regs, &regs.R8, (uint32)(regs.R8 + 0x00000000) );
		/* 820859E8h case    2:*/		return 0x820859EC;
		  /* 820859ECh */ case    3:  		/* lwbrx R7, <#[R7]> */
		/* 820859ECh case    3:*/		cpu::mem::lwbrx( regs, &regs.R7, (uint32)(regs.R7 + 0x00000000) );
		/* 820859ECh case    3:*/		return 0x820859F0;
		  /* 820859F0h */ case    4:  		/* lwbrx R4, <#[R4]> */
		/* 820859F0h case    4:*/		cpu::mem::lwbrx( regs, &regs.R4, (uint32)(regs.R4 + 0x00000000) );
		/* 820859F0h case    4:*/		return 0x820859F4;
		  /* 820859F4h */ case    5:  		/* subf R8, R8, R7 */
		/* 820859F4h case    5:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R8,regs.R7);
		/* 820859F4h case    5:*/		return 0x820859F8;
		  /* 820859F8h */ case    6:  		/* lwbrx R7, <#[R3]> */
		/* 820859F8h case    6:*/		cpu::mem::lwbrx( regs, &regs.R7, (uint32)(regs.R3 + 0x00000000) );
		/* 820859F8h case    6:*/		return 0x820859FC;
		  /* 820859FCh */ case    7:  		/* subf R8, R4, R8 */
		/* 820859FCh case    7:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R4,regs.R8);
		/* 820859FCh case    7:*/		return 0x82085A00;
		  /* 82085A00h */ case    8:  		/* add R8, R8, R7 */
		/* 82085A00h case    8:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R7);
		/* 82085A00h case    8:*/		return 0x82085A04;
		  /* 82085A04h */ case    9:  		/* subfic R8, R8, 0 */
		/* 82085A04h case    9:*/		cpu::op::subfic<0>(regs,&regs.R8,regs.R8,0x0);
		/* 82085A04h case    9:*/		return 0x82085A08;
		  /* 82085A08h */ case   10:  		/* subfe R8, R8, R8 */
		/* 82085A08h case   10:*/		cpu::op::subfe<0>(regs,&regs.R8,regs.R8,regs.R8);
		/* 82085A08h case   10:*/		return 0x82085A0C;
	}
	return 0x82085A0C;
} // Block from 820859E0h-82085A0Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82085A0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085A0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085A0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085A0C);
		  /* 82085A0Ch */ case    0:  		/* and R8, R8, R6 */
		/* 82085A0Ch case    0:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R6);
		/* 82085A0Ch case    0:*/		return 0x82085A10;
		  /* 82085A10h */ case    1:  		/* rlwinm R7, R9, 12, 20, 31 */
		/* 82085A10h case    1:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R7,regs.R9);
		/* 82085A10h case    1:*/		return 0x82085A14;
		  /* 82085A14h */ case    2:  		/* stw R8, <#[R9]> */
		/* 82085A14h case    2:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 82085A14h case    2:*/		return 0x82085A18;
		  /* 82085A18h */ case    3:  		/* rlwinm R8, R9, 0, 3, 31 */
		/* 82085A18h case    3:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R8,regs.R9);
		/* 82085A18h case    3:*/		return 0x82085A1C;
		  /* 82085A1Ch */ case    4:  		/* addi R9, R7, 512 */
		/* 82085A1Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R7,0x200);
		/* 82085A1Ch case    4:*/		return 0x82085A20;
		  /* 82085A20h */ case    5:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82085A20h case    5:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82085A20h case    5:*/		return 0x82085A24;
		  /* 82085A24h */ case    6:  		/* add R9, R9, R8 */
		/* 82085A24h case    6:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 82085A24h case    6:*/		return 0x82085A28;
		  /* 82085A28h */ case    7:  		/* subf R9, R5, R9 */
		/* 82085A28h case    7:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R5,regs.R9);
		/* 82085A28h case    7:*/		return 0x82085A2C;
		  /* 82085A2Ch */ case    8:  		/* dcbf R0, R9 */
		/* 82085A2Ch case    8:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R9);
		/* 82085A2Ch case    8:*/		return 0x82085A30;
		  /* 82085A30h */ case    9:  		/* dcbf R0, R11 */
		/* 82085A30h case    9:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R11);
		/* 82085A30h case    9:*/		return 0x82085A34;
		  /* 82085A34h */ case   10:  		/* li R9, 24 */
		/* 82085A34h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x18);
		/* 82085A34h case   10:*/		return 0x82085A38;
		  /* 82085A38h */ case   11:  		/* dcbf R9, R11 */
		/* 82085A38h case   11:*/		cpu::op::dcbf<0>(regs,&regs.R9,regs.R11);
		/* 82085A38h case   11:*/		return 0x82085A3C;
		  /* 82085A3Ch */ case   12:  		/* addi R10, R10, 8 */
		/* 82085A3Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x8);
		/* 82085A3Ch case   12:*/		return 0x82085A40;
		  /* 82085A40h */ case   13:  		/* bc 16, CR0_LT, -156 */
		/* 82085A40h case   13:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820859A4;  }
		/* 82085A40h case   13:*/		return 0x82085A44;
	}
	return 0x82085A44;
} // Block from 82085A0Ch-82085A44h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82085A44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085A44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085A44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085A44);
		  /* 82085A44h */ case    0:  		/* lwz R3, <#[R10]> */
		/* 82085A44h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0x00000000) );
		/* 82085A44h case    0:*/		return 0x82085A48;
	}
	return 0x82085A48;
} // Block from 82085A44h-82085A48h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82085A48h
// Function '?FatalError@ATG@@YAXPBDZZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085A48);
		  /* 82085A48h */ case    0:  		/* lis R11, -16384 */
		/* 82085A48h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC000);
		/* 82085A48h case    0:*/		return 0x82085A4C;
		  /* 82085A4Ch */ case    1:  		/* cmplw CR6, R3, R11 */
		/* 82085A4Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82085A4Ch case    1:*/		return 0x82085A50;
		  /* 82085A50h */ case    2:  		/* bc 4, CR6_EQ, -208 */
		/* 82085A50h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82085980;  }
		/* 82085A50h case    2:*/		return 0x82085A54;
		  /* 82085A54h */ case    3:  		/* bclr 20, CR0_LT */
		/* 82085A54h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82085A54h case    3:*/		return 0x82085A58;
	}
	return 0x82085A58;
} // Block from 82085A48h-82085A58h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82085A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085A58);
		  /* 82085A58h */ case    0:  		/* mfspr R12, LR */
		/* 82085A58h case    0:*/		regs.R12 = regs.LR;
		/* 82085A58h case    0:*/		return 0x82085A5C;
		  /* 82085A5Ch */ case    1:  		/* bl 47092 */
		/* 82085A5Ch case    1:*/		regs.LR = 0x82085A60; return 0x82091250;
		/* 82085A5Ch case    1:*/		return 0x82085A60;
		  /* 82085A60h */ case    2:  		/* lwz R31, <#[R3 + 4]> */
		/* 82085A60h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000004) );
		/* 82085A60h case    2:*/		return 0x82085A64;
		  /* 82085A64h */ case    3:  		/* addi R30, R3, 8 */
		/* 82085A64h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R3,0x8);
		/* 82085A64h case    3:*/		return 0x82085A68;
		  /* 82085A68h */ case    4:  		/* lis R28, 16384 */
		/* 82085A68h case    4:*/		cpu::op::lis<0>(regs,&regs.R28,0x4000);
		/* 82085A68h case    4:*/		return 0x82085A6C;
		  /* 82085A6Ch */ case    5:  		/* lwz R29, <#[R4]> */
		/* 82085A6Ch case    5:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R4 + 0x00000000) );
		/* 82085A6Ch case    5:*/		return 0x82085A70;
		  /* 82085A70h */ case    6:  		/* addi R5, R4, 4 */
		/* 82085A70h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x4);
		/* 82085A70h case    6:*/		return 0x82085A74;
		  /* 82085A74h */ case    7:  		/* b 264 */
		/* 82085A74h case    7:*/		return 0x82085B7C;
		/* 82085A74h case    7:*/		return 0x82085A78;
		  /* 82085A78h */ case    8:  		/* lwz R10, <#[R5]> */
		/* 82085A78h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000000) );
		/* 82085A78h case    8:*/		return 0x82085A7C;
		  /* 82085A7Ch */ case    9:  		/* lwz R3, <#[R5 + 4]> */
		/* 82085A7Ch case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R5 + 0x00000004) );
		/* 82085A7Ch case    9:*/		return 0x82085A80;
		  /* 82085A80h */ case   10:  		/* rlwinm R11, R10, 0, 0, 29 */
		/* 82085A80h case   10:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R11,regs.R10);
		/* 82085A80h case   10:*/		return 0x82085A84;
		  /* 82085A84h */ case   11:  		/* subf R11, R28, R11 */
		/* 82085A84h case   11:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R28,regs.R11);
		/* 82085A84h case   11:*/		return 0x82085A88;
		  /* 82085A88h */ case   12:  		/* dcbf R0, R11 */
		/* 82085A88h case   12:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R11);
		/* 82085A88h case   12:*/		return 0x82085A8C;
		  /* 82085A8Ch */ case   13:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 82085A8Ch case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 82085A8Ch case   13:*/		return 0x82085A90;
		  /* 82085A90h */ case   14:  		/* bc 4, CR0_EQ, 140 */
		/* 82085A90h case   14:*/		if ( !regs.CR[0].eq ) { return 0x82085B1C;  }
		/* 82085A90h case   14:*/		return 0x82085A94;
		  /* 82085A94h */ case   15:  		/* addi R6, R31, -1 */
		/* 82085A94h case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0xFFFFFFFF);
		/* 82085A94h case   15:*/		return 0x82085A98;
		  /* 82085A98h */ case   16:  		/* lhz R9, <#[R11 + 6]> */
		/* 82085A98h case   16:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000006) );
		/* 82085A98h case   16:*/		return 0x82085A9C;
		  /* 82085A9Ch */ case   17:  		/* lhz R10, <#[R11 + 2]> */
		/* 82085A9Ch case   17:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000002) );
		/* 82085A9Ch case   17:*/		return 0x82085AA0;
		  /* 82085AA0h */ case   18:  		/* li R7, 0 */
		/* 82085AA0h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82085AA0h case   18:*/		return 0x82085AA4;
		  /* 82085AA4h */ case   19:  		/* rlwinm R8, R6, 4, 0, 27 */
		/* 82085AA4h case   19:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R8,regs.R6);
		/* 82085AA4h case   19:*/		return 0x82085AA8;
		  /* 82085AA8h */ case   20:  		/* lhz R4, <#[R11]> */
		/* 82085AA8h case   20:*/		cpu::mem::load16z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 82085AA8h case   20:*/		return 0x82085AAC;
		  /* 82085AACh */ case   21:  		/* lhz R27, <#[R11 + 4]> */
		/* 82085AACh case   21:*/		cpu::mem::load16z( regs, &regs.R27, (uint32)(regs.R11 + 0x00000004) );
		/* 82085AACh case   21:*/		return 0x82085AB0;
	}
	return 0x82085AB0;
} // Block from 82085A58h-82085AB0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82085AB0h
// Function '?LoadFile@ATG@@YAJPBDPAPAXPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085AB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085AB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085AB0);
		  /* 82085AB0h */ case    0:  		/* addi R26, R9, 1 */
		/* 82085AB0h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R9,0x1);
		/* 82085AB0h case    0:*/		return 0x82085AB4;
		  /* 82085AB4h */ case    1:  		/* add R11, R8, R30 */
		/* 82085AB4h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R8,regs.R30);
		/* 82085AB4h case    1:*/		return 0x82085AB8;
		  /* 82085AB8h */ case    2:  		/* addi R10, R10, 1 */
		/* 82085AB8h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82085AB8h case    2:*/		return 0x82085ABC;
		  /* 82085ABCh */ case    3:  		/* rlwinm R9, R4, 3, 0, 31 */
		/* 82085ABCh case    3:*/		cpu::op::rlwinm<0,3,0,31>(regs,&regs.R9,regs.R4);
		/* 82085ABCh case    3:*/		return 0x82085AC0;
		  /* 82085AC0h */ case    4:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 82085AC0h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 82085AC0h case    4:*/		return 0x82085AC4;
		  /* 82085AC4h */ case    5:  		/* rlwinm R8, R27, 3, 0, 31 */
		/* 82085AC4h case    5:*/		cpu::op::rlwinm<0,3,0,31>(regs,&regs.R8,regs.R27);
		/* 82085AC4h case    5:*/		return 0x82085AC8;
		  /* 82085AC8h */ case    6:  		/* rlwinm R4, R26, 3, 0, 28 */
		/* 82085AC8h case    6:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R4,regs.R26);
		/* 82085AC8h case    6:*/		return 0x82085ACC;
		  /* 82085ACCh */ case    7:  		/* addi R11, R11, 4 */
		/* 82085ACCh case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82085ACCh case    7:*/		return 0x82085AD0;
		  /* 82085AD0h */ case    8:  		/* lwz R27, <#[R11 - 4]> */
		/* 82085AD0h case    8:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 82085AD0h case    8:*/		return 0x82085AD4;
		  /* 82085AD4h */ case    9:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 82085AD4h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 82085AD4h case    9:*/		return 0x82085AD8;
		  /* 82085AD8h */ case   10:  		/* cmplw CR6, R27, R10 */
		/* 82085AD8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R10);
		/* 82085AD8h case   10:*/		return 0x82085ADC;
		  /* 82085ADCh */ case   11:  		/* bc 4, CR6_LT, 44 */
		/* 82085ADCh case   11:*/		if ( !regs.CR[6].lt ) { return 0x82085B08;  }
		/* 82085ADCh case   11:*/		return 0x82085AE0;
		  /* 82085AE0h */ case   12:  		/* lwz R27, <#[R11 + 4]> */
		/* 82085AE0h case   12:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x00000004) );
		/* 82085AE0h case   12:*/		return 0x82085AE4;
		  /* 82085AE4h */ case   13:  		/* cmplw CR6, R27, R9 */
		/* 82085AE4h case   13:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R9);
		/* 82085AE4h case   13:*/		return 0x82085AE8;
		  /* 82085AE8h */ case   14:  		/* bc 4, CR6_GT, 32 */
		/* 82085AE8h case   14:*/		if ( !regs.CR[6].gt ) { return 0x82085B08;  }
		/* 82085AE8h case   14:*/		return 0x82085AEC;
		  /* 82085AECh */ case   15:  		/* lwz R27, <#[R11]> */
		/* 82085AECh case   15:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 82085AECh case   15:*/		return 0x82085AF0;
		  /* 82085AF0h */ case   16:  		/* cmplw CR6, R27, R4 */
		/* 82085AF0h case   16:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R4);
		/* 82085AF0h case   16:*/		return 0x82085AF4;
		  /* 82085AF4h */ case   17:  		/* bc 4, CR6_LT, 20 */
		/* 82085AF4h case   17:*/		if ( !regs.CR[6].lt ) { return 0x82085B08;  }
		/* 82085AF4h case   17:*/		return 0x82085AF8;
		  /* 82085AF8h */ case   18:  		/* lwz R27, <#[R11 + 8]> */
		/* 82085AF8h case   18:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x00000008) );
		/* 82085AF8h case   18:*/		return 0x82085AFC;
		  /* 82085AFCh */ case   19:  		/* cmplw CR6, R27, R8 */
		/* 82085AFCh case   19:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R8);
		/* 82085AFCh case   19:*/		return 0x82085B00;
		  /* 82085B00h */ case   20:  		/* bc 4, CR6_GT, 8 */
		/* 82085B00h case   20:*/		if ( !regs.CR[6].gt ) { return 0x82085B08;  }
		/* 82085B00h case   20:*/		return 0x82085B04;
		  /* 82085B04h */ case   21:  		/* ori R7, R7, 3 */
		/* 82085B04h case   21:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R7,0x3);
		/* 82085B04h case   21:*/		return 0x82085B08;
	}
	return 0x82085B08;
} // Block from 82085AB0h-82085B08h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82085B08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085B08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085B08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085B08);
		  /* 82085B08h */ case    0:  		/* cmplwi CR6, R6, 0 */
		/* 82085B08h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 82085B08h case    0:*/		return 0x82085B0C;
		  /* 82085B0Ch */ case    1:  		/* addi R6, R6, -1 */
		/* 82085B0Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0xFFFFFFFF);
		/* 82085B0Ch case    1:*/		return 0x82085B10;
		  /* 82085B10h */ case    2:  		/* addi R11, R11, -16 */
		/* 82085B10h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFF0);
		/* 82085B10h case    2:*/		return 0x82085B14;
		  /* 82085B14h */ case    3:  		/* bc 4, CR6_EQ, -68 */
		/* 82085B14h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82085AD0;  }
		/* 82085B14h case    3:*/		return 0x82085B18;
		  /* 82085B18h */ case    4:  		/* b 64 */
		/* 82085B18h case    4:*/		return 0x82085B58;
		/* 82085B18h case    4:*/		return 0x82085B1C;
	}
	return 0x82085B1C;
} // Block from 82085B08h-82085B1Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82085B1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085B1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085B1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085B1C);
		  /* 82085B1Ch */ case    0:  		/* addi R10, R11, 48 */
		/* 82085B1Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x30);
		/* 82085B1Ch case    0:*/		return 0x82085B20;
		  /* 82085B20h */ case    1:  		/* addi R9, R11, 16 */
		/* 82085B20h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x10);
		/* 82085B20h case    1:*/		return 0x82085B24;
		  /* 82085B24h */ case    2:  		/* addi R8, R11, 52 */
		/* 82085B24h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x34);
		/* 82085B24h case    2:*/		return 0x82085B28;
		  /* 82085B28h */ case    3:  		/* addi R11, R11, 20 */
		/* 82085B28h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x14);
		/* 82085B28h case    3:*/		return 0x82085B2C;
		  /* 82085B2Ch */ case    4:  		/* li R7, -1 */
		/* 82085B2Ch case    4:*/		cpu::op::li<0>(regs,&regs.R7,0xFFFFFFFF);
		/* 82085B2Ch case    4:*/		return 0x82085B30;
		  /* 82085B30h */ case    5:  		/* lwbrx R10, <#[R10]> */
		/* 82085B30h case    5:*/		cpu::mem::lwbrx( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 82085B30h case    5:*/		return 0x82085B34;
		  /* 82085B34h */ case    6:  		/* lwbrx R9, <#[R9]> */
		/* 82085B34h case    6:*/		cpu::mem::lwbrx( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 82085B34h case    6:*/		return 0x82085B38;
		  /* 82085B38h */ case    7:  		/* lwbrx R8, <#[R8]> */
		/* 82085B38h case    7:*/		cpu::mem::lwbrx( regs, &regs.R8, (uint32)(regs.R8 + 0x00000000) );
		/* 82085B38h case    7:*/		return 0x82085B3C;
		  /* 82085B3Ch */ case    8:  		/* subf R10, R10, R9 */
		/* 82085B3Ch case    8:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82085B3Ch case    8:*/		return 0x82085B40;
		  /* 82085B40h */ case    9:  		/* lwbrx R11, <#[R11]> */
		/* 82085B40h case    9:*/		cpu::mem::lwbrx( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82085B40h case    9:*/		return 0x82085B44;
		  /* 82085B44h */ case   10:  		/* subf R10, R8, R10 */
		/* 82085B44h case   10:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 82085B44h case   10:*/		return 0x82085B48;
		  /* 82085B48h */ case   11:  		/* add R11, R10, R11 */
		/* 82085B48h case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82085B48h case   11:*/		return 0x82085B4C;
		  /* 82085B4Ch */ case   12:  		/* subfic R11, R11, 0 */
		/* 82085B4Ch case   12:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 82085B4Ch case   12:*/		return 0x82085B50;
		  /* 82085B50h */ case   13:  		/* subfe R11, R11, R11 */
		/* 82085B50h case   13:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82085B50h case   13:*/		return 0x82085B54;
		  /* 82085B54h */ case   14:  		/* and R7, R11, R7 */
		/* 82085B54h case   14:*/		cpu::op::and<0>(regs,&regs.R7,regs.R11,regs.R7);
		/* 82085B54h case   14:*/		return 0x82085B58;
	}
	return 0x82085B58;
} // Block from 82085B1Ch-82085B58h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82085B58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085B58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085B58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085B58);
		  /* 82085B58h */ case    0:  		/* rlwinm R11, R3, 12, 20, 31 */
		/* 82085B58h case    0:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R11,regs.R3);
		/* 82085B58h case    0:*/		return 0x82085B5C;
		  /* 82085B5Ch */ case    1:  		/* stw R7, <#[R3]> */
		/* 82085B5Ch case    1:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R3 + 0x00000000) );
		/* 82085B5Ch case    1:*/		return 0x82085B60;
		  /* 82085B60h */ case    2:  		/* rlwinm R10, R3, 0, 3, 31 */
		/* 82085B60h case    2:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R3);
		/* 82085B60h case    2:*/		return 0x82085B64;
		  /* 82085B64h */ case    3:  		/* addi R11, R11, 512 */
		/* 82085B64h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x200);
		/* 82085B64h case    3:*/		return 0x82085B68;
		  /* 82085B68h */ case    4:  		/* rlwinm R11, R11, 0, 19, 19 */
		/* 82085B68h case    4:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R11,regs.R11);
		/* 82085B68h case    4:*/		return 0x82085B6C;
		  /* 82085B6Ch */ case    5:  		/* add R11, R11, R10 */
		/* 82085B6Ch case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82085B6Ch case    5:*/		return 0x82085B70;
		  /* 82085B70h */ case    6:  		/* subf R11, R28, R11 */
		/* 82085B70h case    6:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R28,regs.R11);
		/* 82085B70h case    6:*/		return 0x82085B74;
		  /* 82085B74h */ case    7:  		/* dcbf R0, R11 */
		/* 82085B74h case    7:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R11);
		/* 82085B74h case    7:*/		return 0x82085B78;
		  /* 82085B78h */ case    8:  		/* addi R5, R5, 8 */
		/* 82085B78h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x8);
		/* 82085B78h case    8:*/		return 0x82085B7C;
	}
	return 0x82085B7C;
} // Block from 82085B58h-82085B7Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82085B7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085B7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085B7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085B7C);
		  /* 82085B7Ch */ case    0:  		/* cmplw CR6, R5, R29 */
		/* 82085B7Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R29);
		/* 82085B7Ch case    0:*/		return 0x82085B80;
	}
	return 0x82085B80;
} // Block from 82085B7Ch-82085B80h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82085B80h
// Function '?LoadVertexShader@ATG@@YAJPBDPAPAUD3DVertexShader@@PAPAUID3DXConstantTable@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085B80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085B80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085B80);
		  /* 82085B80h */ case    0:  		/* bc 12, CR6_LT, -264 */
		/* 82085B80h case    0:*/		if ( regs.CR[6].lt ) { return 0x82085A78;  }
		/* 82085B80h case    0:*/		return 0x82085B84;
		  /* 82085B84h */ case    1:  		/* lwz R4, <#[R5]> */
		/* 82085B84h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x00000000) );
		/* 82085B84h case    1:*/		return 0x82085B88;
		  /* 82085B88h */ case    2:  		/* lis R11, -16384 */
		/* 82085B88h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC000);
		/* 82085B88h case    2:*/		return 0x82085B8C;
		  /* 82085B8Ch */ case    3:  		/* cmplw CR6, R4, R11 */
		/* 82085B8Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82085B8Ch case    3:*/		return 0x82085B90;
		  /* 82085B90h */ case    4:  		/* bc 4, CR6_EQ, -292 */
		/* 82085B90h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82085A6C;  }
		/* 82085B90h case    4:*/		return 0x82085B94;
		  /* 82085B94h */ case    5:  		/* b 46860 */
		/* 82085B94h case    5:*/		return 0x820912A0;
		/* 82085B94h case    5:*/		return 0x82085B98;
	}
	return 0x82085B98;
} // Block from 82085B80h-82085B98h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82085B98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085B98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085B98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085B98);
		  /* 82085B98h */ case    0:  		/* mfspr R12, LR */
		/* 82085B98h case    0:*/		regs.R12 = regs.LR;
		/* 82085B98h case    0:*/		return 0x82085B9C;
		  /* 82085B9Ch */ case    1:  		/* bl 46772 */
		/* 82085B9Ch case    1:*/		regs.LR = 0x82085BA0; return 0x82091250;
		/* 82085B9Ch case    1:*/		return 0x82085BA0;
		  /* 82085BA0h */ case    2:  		/* lwz R27, <#[R3 + 4]> */
		/* 82085BA0h case    2:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R3 + 0x00000004) );
		/* 82085BA0h case    2:*/		return 0x82085BA4;
		  /* 82085BA4h */ case    3:  		/* addi R29, R3, 8 */
		/* 82085BA4h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0x8);
		/* 82085BA4h case    3:*/		return 0x82085BA8;
		  /* 82085BA8h */ case    4:  		/* lwz R28, <#[R4]> */
		/* 82085BA8h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R4 + 0x00000000) );
		/* 82085BA8h case    4:*/		return 0x82085BAC;
		  /* 82085BACh */ case    5:  		/* addi R10, R4, 4 */
		/* 82085BACh case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R4,0x4);
		/* 82085BACh case    5:*/		return 0x82085BB0;
		  /* 82085BB0h */ case    6:  		/* cmplw CR6, R10, R28 */
		/* 82085BB0h case    6:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R28);
		/* 82085BB0h case    6:*/		return 0x82085BB4;
		  /* 82085BB4h */ case    7:  		/* bc 4, CR6_LT, 196 */
		/* 82085BB4h case    7:*/		if ( !regs.CR[6].lt ) { return 0x82085C78;  }
		/* 82085BB4h case    7:*/		return 0x82085BB8;
		  /* 82085BB8h */ case    8:  		/* addi R4, R27, -1 */
		/* 82085BB8h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R27,0xFFFFFFFF);
		/* 82085BB8h case    8:*/		return 0x82085BBC;
		  /* 82085BBCh */ case    9:  		/* addi R11, R10, 8 */
		/* 82085BBCh case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 82085BBCh case    9:*/		return 0x82085BC0;
		  /* 82085BC0h */ case   10:  		/* lhz R9, <#[R11 - 2]> */
		/* 82085BC0h case   10:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R11 + 0xFFFFFFFE) );
		/* 82085BC0h case   10:*/		return 0x82085BC4;
		  /* 82085BC4h */ case   11:  		/* rlwinm R7, R4, 4, 0, 27 */
		/* 82085BC4h case   11:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R7,regs.R4);
		/* 82085BC4h case   11:*/		return 0x82085BC8;
		  /* 82085BC8h */ case   12:  		/* lhz R8, <#[R11 + 2]> */
		/* 82085BC8h case   12:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000002) );
		/* 82085BC8h case   12:*/		return 0x82085BCC;
		  /* 82085BCCh */ case   13:  		/* li R5, 0 */
		/* 82085BCCh case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82085BCCh case   13:*/		return 0x82085BD0;
		  /* 82085BD0h */ case   14:  		/* addi R30, R9, 1 */
		/* 82085BD0h case   14:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R9,0x1);
		/* 82085BD0h case   14:*/		return 0x82085BD4;
		  /* 82085BD4h */ case   15:  		/* lhz R3, <#[R11 - 4]> */
		/* 82085BD4h case   15:*/		cpu::mem::load16z( regs, &regs.R3, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 82085BD4h case   15:*/		return 0x82085BD8;
		  /* 82085BD8h */ case   16:  		/* addi R8, R8, 1 */
		/* 82085BD8h case   16:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82085BD8h case   16:*/		return 0x82085BDC;
		  /* 82085BDCh */ case   17:  		/* lhz R31, <#[R11]> */
		/* 82085BDCh case   17:*/		cpu::mem::load16z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 82085BDCh case   17:*/		return 0x82085BE0;
		  /* 82085BE0h */ case   18:  		/* add R9, R7, R29 */
		/* 82085BE0h case   18:*/		cpu::op::add<0>(regs,&regs.R9,regs.R7,regs.R29);
		/* 82085BE0h case   18:*/		return 0x82085BE4;
		  /* 82085BE4h */ case   19:  		/* lwz R6, <#[R10]> */
		/* 82085BE4h case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 82085BE4h case   19:*/		return 0x82085BE8;
		  /* 82085BE8h */ case   20:  		/* rlwinm R7, R30, 3, 0, 28 */
		/* 82085BE8h case   20:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R7,regs.R30);
		/* 82085BE8h case   20:*/		return 0x82085BEC;
		  /* 82085BECh */ case   21:  		/* rlwinm R30, R8, 3, 0, 28 */
		/* 82085BECh case   21:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R30,regs.R8);
		/* 82085BECh case   21:*/		return 0x82085BF0;
		  /* 82085BF0h */ case   22:  		/* rlwinm R3, R3, 3, 0, 31 */
		/* 82085BF0h case   22:*/		cpu::op::rlwinm<0,3,0,31>(regs,&regs.R3,regs.R3);
		/* 82085BF0h case   22:*/		return 0x82085BF4;
		  /* 82085BF4h */ case   23:  		/* rlwinm R31, R31, 3, 0, 31 */
		/* 82085BF4h case   23:*/		cpu::op::rlwinm<0,3,0,31>(regs,&regs.R31,regs.R31);
		/* 82085BF4h case   23:*/		return 0x82085BF8;
		  /* 82085BF8h */ case   24:  		/* mr R8, R4 */
		/* 82085BF8h case   24:*/		regs.R8 = regs.R4;
		/* 82085BF8h case   24:*/		return 0x82085BFC;
		  /* 82085BFCh */ case   25:  		/* addi R9, R9, 4 */
		/* 82085BFCh case   25:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 82085BFCh case   25:*/		return 0x82085C00;
		  /* 82085C00h */ case   26:  		/* lwz R26, <#[R9 - 4]> */
		/* 82085C00h case   26:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R9 + 0xFFFFFFFC) );
		/* 82085C00h case   26:*/		return 0x82085C04;
		  /* 82085C04h */ case   27:  		/* rlwinm R5, R5, 2, 0, 29 */
		/* 82085C04h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R5);
		/* 82085C04h case   27:*/		return 0x82085C08;
		  /* 82085C08h */ case   28:  		/* cmplw CR6, R26, R7 */
		/* 82085C08h case   28:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R7);
		/* 82085C08h case   28:*/		return 0x82085C0C;
		  /* 82085C0Ch */ case   29:  		/* bc 4, CR6_LT, 44 */
		/* 82085C0Ch case   29:*/		if ( !regs.CR[6].lt ) { return 0x82085C38;  }
		/* 82085C0Ch case   29:*/		return 0x82085C10;
		  /* 82085C10h */ case   30:  		/* lwz R26, <#[R9 + 4]> */
		/* 82085C10h case   30:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R9 + 0x00000004) );
		/* 82085C10h case   30:*/		return 0x82085C14;
		  /* 82085C14h */ case   31:  		/* cmplw CR6, R26, R3 */
		/* 82085C14h case   31:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R3);
		/* 82085C14h case   31:*/		return 0x82085C18;
		  /* 82085C18h */ case   32:  		/* bc 4, CR6_GT, 32 */
		/* 82085C18h case   32:*/		if ( !regs.CR[6].gt ) { return 0x82085C38;  }
		/* 82085C18h case   32:*/		return 0x82085C1C;
		  /* 82085C1Ch */ case   33:  		/* lwz R26, <#[R9]> */
		/* 82085C1Ch case   33:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R9 + 0x00000000) );
		/* 82085C1Ch case   33:*/		return 0x82085C20;
		  /* 82085C20h */ case   34:  		/* cmplw CR6, R26, R30 */
		/* 82085C20h case   34:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R30);
		/* 82085C20h case   34:*/		return 0x82085C24;
		  /* 82085C24h */ case   35:  		/* bc 4, CR6_LT, 20 */
		/* 82085C24h case   35:*/		if ( !regs.CR[6].lt ) { return 0x82085C38;  }
		/* 82085C24h case   35:*/		return 0x82085C28;
		  /* 82085C28h */ case   36:  		/* lwz R26, <#[R9 + 8]> */
		/* 82085C28h case   36:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R9 + 0x00000008) );
		/* 82085C28h case   36:*/		return 0x82085C2C;
		  /* 82085C2Ch */ case   37:  		/* cmplw CR6, R26, R31 */
		/* 82085C2Ch case   37:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R31);
		/* 82085C2Ch case   37:*/		return 0x82085C30;
		  /* 82085C30h */ case   38:  		/* bc 4, CR6_GT, 8 */
		/* 82085C30h case   38:*/		if ( !regs.CR[6].gt ) { return 0x82085C38;  }
		/* 82085C30h case   38:*/		return 0x82085C34;
		  /* 82085C34h */ case   39:  		/* ori R5, R5, 3 */
		/* 82085C34h case   39:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x3);
		/* 82085C34h case   39:*/		return 0x82085C38;
	}
	return 0x82085C38;
} // Block from 82085B98h-82085C38h (40 instructions)

//////////////////////////////////////////////////////
// Block at 82085C38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085C38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085C38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085C38);
		  /* 82085C38h */ case    0:  		/* cmplwi CR6, R8, 0 */
		/* 82085C38h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82085C38h case    0:*/		return 0x82085C3C;
		  /* 82085C3Ch */ case    1:  		/* addi R8, R8, -1 */
		/* 82085C3Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 82085C3Ch case    1:*/		return 0x82085C40;
		  /* 82085C40h */ case    2:  		/* addi R9, R9, -16 */
		/* 82085C40h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFF0);
		/* 82085C40h case    2:*/		return 0x82085C44;
		  /* 82085C44h */ case    3:  		/* bc 4, CR6_EQ, -68 */
		/* 82085C44h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82085C00;  }
		/* 82085C44h case    3:*/		return 0x82085C48;
		  /* 82085C48h */ case    4:  		/* rlwinm R9, R6, 12, 20, 31 */
		/* 82085C48h case    4:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R9,regs.R6);
		/* 82085C48h case    4:*/		return 0x82085C4C;
		  /* 82085C4Ch */ case    5:  		/* stw R5, <#[R6]> */
		/* 82085C4Ch case    5:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R6 + 0x00000000) );
		/* 82085C4Ch case    5:*/		return 0x82085C50;
		  /* 82085C50h */ case    6:  		/* rlwinm R8, R6, 0, 3, 31 */
		/* 82085C50h case    6:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R8,regs.R6);
		/* 82085C50h case    6:*/		return 0x82085C54;
		  /* 82085C54h */ case    7:  		/* addi R9, R9, 512 */
		/* 82085C54h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x200);
		/* 82085C54h case    7:*/		return 0x82085C58;
		  /* 82085C58h */ case    8:  		/* lis R7, -16384 */
		/* 82085C58h case    8:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFFC000);
		/* 82085C58h case    8:*/		return 0x82085C5C;
		  /* 82085C5Ch */ case    9:  		/* rlwinm R9, R9, 0, 19, 19 */
		/* 82085C5Ch case    9:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R9,regs.R9);
		/* 82085C5Ch case    9:*/		return 0x82085C60;
		  /* 82085C60h */ case   10:  		/* add R9, R9, R8 */
		/* 82085C60h case   10:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 82085C60h case   10:*/		return 0x82085C64;
		  /* 82085C64h */ case   11:  		/* dcbf R9, R7 */
		/* 82085C64h case   11:*/		cpu::op::dcbf<0>(regs,&regs.R9,regs.R7);
		/* 82085C64h case   11:*/		return 0x82085C68;
		  /* 82085C68h */ case   12:  		/* addi R10, R10, 16 */
		/* 82085C68h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x10);
		/* 82085C68h case   12:*/		return 0x82085C6C;
		  /* 82085C6Ch */ case   13:  		/* addi R11, R11, 16 */
		/* 82085C6Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 82085C6Ch case   13:*/		return 0x82085C70;
		  /* 82085C70h */ case   14:  		/* cmplw CR6, R10, R28 */
		/* 82085C70h case   14:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R28);
		/* 82085C70h case   14:*/		return 0x82085C74;
		  /* 82085C74h */ case   15:  		/* bc 12, CR6_LT, -180 */
		/* 82085C74h case   15:*/		if ( regs.CR[6].lt ) { return 0x82085BC0;  }
		/* 82085C74h case   15:*/		return 0x82085C78;
	}
	return 0x82085C78;
} // Block from 82085C38h-82085C78h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82085C78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085C78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085C78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085C78);
		  /* 82085C78h */ case    0:  		/* lwz R4, <#[R10]> */
		/* 82085C78h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000000) );
		/* 82085C78h case    0:*/		return 0x82085C7C;
		  /* 82085C7Ch */ case    1:  		/* lis R11, -16384 */
		/* 82085C7Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC000);
		/* 82085C7Ch case    1:*/		return 0x82085C80;
		  /* 82085C80h */ case    2:  		/* cmplw CR6, R4, R11 */
		/* 82085C80h case    2:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82085C80h case    2:*/		return 0x82085C84;
		  /* 82085C84h */ case    3:  		/* bc 4, CR6_EQ, -220 */
		/* 82085C84h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82085BA8;  }
		/* 82085C84h case    3:*/		return 0x82085C88;
		  /* 82085C88h */ case    4:  		/* b 46616 */
		/* 82085C88h case    4:*/		return 0x820912A0;
		/* 82085C88h case    4:*/		return 0x82085C8C;
		  /* 82085C8Ch */ case    5:  		/* nop */
		/* 82085C8Ch case    5:*/		cpu::op::nop();
		/* 82085C8Ch case    5:*/		return 0x82085C90;
	}
	return 0x82085C90;
} // Block from 82085C78h-82085C90h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82085C90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085C90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085C90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085C90);
		  /* 82085C90h */ case    0:  		/* mfspr R12, LR */
		/* 82085C90h case    0:*/		regs.R12 = regs.LR;
		/* 82085C90h case    0:*/		return 0x82085C94;
		  /* 82085C94h */ case    1:  		/* bl 46536 */
		/* 82085C94h case    1:*/		regs.LR = 0x82085C98; return 0x8209125C;
		/* 82085C94h case    1:*/		return 0x82085C98;
		  /* 82085C98h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82085C98h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82085C98h case    2:*/		return 0x82085C9C;
		  /* 82085C9Ch */ case    3:  		/* mr R31, R5 */
		/* 82085C9Ch case    3:*/		regs.R31 = regs.R5;
		/* 82085C9Ch case    3:*/		return 0x82085CA0;
		  /* 82085CA0h */ case    4:  		/* li R5, 0 */
		/* 82085CA0h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82085CA0h case    4:*/		return 0x82085CA4;
		  /* 82085CA4h */ case    5:  		/* mr R29, R3 */
		/* 82085CA4h case    5:*/		regs.R29 = regs.R3;
		/* 82085CA4h case    5:*/		return 0x82085CA8;
		  /* 82085CA8h */ case    6:  		/* bl -2032 */
		/* 82085CA8h case    6:*/		regs.LR = 0x82085CAC; return 0x820854B8;
		/* 82085CA8h case    6:*/		return 0x82085CAC;
		  /* 82085CACh */ case    7:  		/* mr R11, R31 */
		/* 82085CACh case    7:*/		regs.R11 = regs.R31;
		/* 82085CACh case    7:*/		return 0x82085CB0;
		  /* 82085CB0h */ case    8:  		/* lwz R30, <#[R11]> */
		/* 82085CB0h case    8:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 82085CB0h case    8:*/		return 0x82085CB4;
		  /* 82085CB4h */ case    9:  		/* addi R31, R11, 4 */
		/* 82085CB4h case    9:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 82085CB4h case    9:*/		return 0x82085CB8;
	}
	return 0x82085CB8;
} // Block from 82085C90h-82085CB8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82085CB8h
// Function '?LoadPixelShader@ATG@@YAJPBDPAPAUD3DPixelShader@@PAPAUID3DXConstantTable@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085CB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085CB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085CB8);
		  /* 82085CB8h */ case    0:  		/* b 112 */
		/* 82085CB8h case    0:*/		return 0x82085D28;
		/* 82085CB8h case    0:*/		return 0x82085CBC;
		  /* 82085CBCh */ case    1:  		/* li R4, 0 */
		/* 82085CBCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82085CBCh case    1:*/		return 0x82085CC0;
		  /* 82085CC0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82085CC0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82085CC0h case    2:*/		return 0x82085CC4;
		  /* 82085CC4h */ case    3:  		/* bc 12, CR0_EQ, 72 */
		/* 82085CC4h case    3:*/		if ( regs.CR[0].eq ) { return 0x82085D0C;  }
		/* 82085CC4h case    3:*/		return 0x82085CC8;
		  /* 82085CC8h */ case    4:  		/* rlwinm. R11, R11, 0, 0, 30 */
		/* 82085CC8h case    4:*/		cpu::op::rlwinm<1,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82085CC8h case    4:*/		return 0x82085CCC;
		  /* 82085CCCh */ case    5:  		/* bc 12, CR0_EQ, 88 */
		/* 82085CCCh case    5:*/		if ( regs.CR[0].eq ) { return 0x82085D24;  }
		/* 82085CCCh case    5:*/		return 0x82085CD0;
		  /* 82085CD0h */ case    6:  		/* lwz R7, <#[R11 + 124]> */
		/* 82085CD0h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x0000007C) );
		/* 82085CD0h case    6:*/		return 0x82085CD4;
		  /* 82085CD4h */ case    7:  		/* li R9, 0 */
		/* 82085CD4h case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82085CD4h case    7:*/		return 0x82085CD8;
		  /* 82085CD8h */ case    8:  		/* cmplwi CR6, R7, 0 */
		/* 82085CD8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82085CD8h case    8:*/		return 0x82085CDC;
		  /* 82085CDCh */ case    9:  		/* bc 12, CR6_EQ, 72 */
		/* 82085CDCh case    9:*/		if ( regs.CR[6].eq ) { return 0x82085D24;  }
		/* 82085CDCh case    9:*/		return 0x82085CE0;
		  /* 82085CE0h */ case   10:  		/* lwz R8, <#[R11 + 132]> */
		/* 82085CE0h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000084) );
		/* 82085CE0h case   10:*/		return 0x82085CE4;
		  /* 82085CE4h */ case   11:  		/* li R11, 0 */
		/* 82085CE4h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82085CE4h case   11:*/		return 0x82085CE8;
		  /* 82085CE8h */ case   12:  		/* lwzx R10, <#[R11 + R8]> */
		/* 82085CE8h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82085CE8h case   12:*/		return 0x82085CEC;
		  /* 82085CECh */ case   13:  		/* cmplwi CR6, R10, 0 */
		/* 82085CECh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82085CECh case   13:*/		return 0x82085CF0;
		  /* 82085CF0h */ case   14:  		/* bc 12, CR6_EQ, 8 */
		/* 82085CF0h case   14:*/		if ( regs.CR[6].eq ) { return 0x82085CF8;  }
		/* 82085CF0h case   14:*/		return 0x82085CF4;
		  /* 82085CF4h */ case   15:  		/* lwz R4, <#[R10 + 120]> */
		/* 82085CF4h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000078) );
		/* 82085CF4h case   15:*/		return 0x82085CF8;
	}
	return 0x82085CF8;
} // Block from 82085CB8h-82085CF8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82085CF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085CF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085CF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085CF8);
		  /* 82085CF8h */ case    0:  		/* addi R9, R9, 1 */
		/* 82085CF8h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82085CF8h case    0:*/		return 0x82085CFC;
		  /* 82085CFCh */ case    1:  		/* addi R11, R11, 8 */
		/* 82085CFCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 82085CFCh case    1:*/		return 0x82085D00;
		  /* 82085D00h */ case    2:  		/* cmplw CR6, R9, R7 */
		/* 82085D00h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 82085D00h case    2:*/		return 0x82085D04;
		  /* 82085D04h */ case    3:  		/* bc 12, CR6_LT, -28 */
		/* 82085D04h case    3:*/		if ( regs.CR[6].lt ) { return 0x82085CE8;  }
		/* 82085D04h case    3:*/		return 0x82085D08;
		  /* 82085D08h */ case    4:  		/* b 8 */
		/* 82085D08h case    4:*/		return 0x82085D10;
		/* 82085D08h case    4:*/		return 0x82085D0C;
	}
	return 0x82085D0C;
} // Block from 82085CF8h-82085D0Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82085D0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085D0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085D0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085D0C);
		  /* 82085D0Ch */ case    0:  		/* mr R4, R11 */
		/* 82085D0Ch case    0:*/		regs.R4 = regs.R11;
		/* 82085D0Ch case    0:*/		return 0x82085D10;
	}
	return 0x82085D10;
} // Block from 82085D0Ch-82085D10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82085D10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085D10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085D10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085D10);
		  /* 82085D10h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 82085D10h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 82085D10h case    0:*/		return 0x82085D14;
		  /* 82085D14h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 82085D14h case    1:*/		if ( regs.CR[6].eq ) { return 0x82085D24;  }
		/* 82085D14h case    1:*/		return 0x82085D18;
		  /* 82085D18h */ case    2:  		/* li R5, 1 */
		/* 82085D18h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82085D18h case    2:*/		return 0x82085D1C;
		  /* 82085D1Ch */ case    3:  		/* mr R3, R29 */
		/* 82085D1Ch case    3:*/		regs.R3 = regs.R29;
		/* 82085D1Ch case    3:*/		return 0x82085D20;
		  /* 82085D20h */ case    4:  		/* bl -2152 */
		/* 82085D20h case    4:*/		regs.LR = 0x82085D24; return 0x820854B8;
		/* 82085D20h case    4:*/		return 0x82085D24;
	}
	return 0x82085D24;
} // Block from 82085D10h-82085D24h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82085D24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085D24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085D24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085D24);
		  /* 82085D24h */ case    0:  		/* addi R31, R31, 4 */
		/* 82085D24h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82085D24h case    0:*/		return 0x82085D28;
	}
	return 0x82085D28;
} // Block from 82085D24h-82085D28h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82085D28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085D28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085D28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085D28);
		  /* 82085D28h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82085D28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82085D28h case    0:*/		return 0x82085D2C;
		  /* 82085D2Ch */ case    1:  		/* cmplw CR6, R31, R30 */
		/* 82085D2Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 82085D2Ch case    1:*/		return 0x82085D30;
		  /* 82085D30h */ case    2:  		/* bc 12, CR6_LT, -116 */
		/* 82085D30h case    2:*/		if ( regs.CR[6].lt ) { return 0x82085CBC;  }
		/* 82085D30h case    2:*/		return 0x82085D34;
		  /* 82085D34h */ case    3:  		/* lis R10, -16384 */
		/* 82085D34h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFC000);
		/* 82085D34h case    3:*/		return 0x82085D38;
		  /* 82085D38h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 82085D38h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82085D38h case    4:*/		return 0x82085D3C;
		  /* 82085D3Ch */ case    5:  		/* bc 4, CR6_EQ, -140 */
		/* 82085D3Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x82085CB0;  }
		/* 82085D3Ch case    5:*/		return 0x82085D40;
		  /* 82085D40h */ case    6:  		/* addi R1, R1, 112 */
		/* 82085D40h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82085D40h case    6:*/		return 0x82085D44;
		  /* 82085D44h */ case    7:  		/* b 46440 */
		/* 82085D44h case    7:*/		return 0x820912AC;
		/* 82085D44h case    7:*/		return 0x82085D48;
	}
	return 0x82085D48;
} // Block from 82085D28h-82085D48h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82085D48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085D48);
		  /* 82085D48h */ case    0:  		/* mfspr R12, LR */
		/* 82085D48h case    0:*/		regs.R12 = regs.LR;
		/* 82085D48h case    0:*/		return 0x82085D4C;
		  /* 82085D4Ch */ case    1:  		/* bl 46328 */
		/* 82085D4Ch case    1:*/		regs.LR = 0x82085D50; return 0x82091244;
		/* 82085D4Ch case    1:*/		return 0x82085D50;
		  /* 82085D50h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82085D50h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82085D50h case    2:*/		return 0x82085D54;
		  /* 82085D54h */ case    3:  		/* mr R31, R3 */
		/* 82085D54h case    3:*/		regs.R31 = regs.R3;
		/* 82085D54h case    3:*/		return 0x82085D58;
		  /* 82085D58h */ case    4:  		/* mr R30, R4 */
		/* 82085D58h case    4:*/		regs.R30 = regs.R4;
		/* 82085D58h case    4:*/		return 0x82085D5C;
		  /* 82085D5Ch */ case    5:  		/* bl 1995164 */
		/* 82085D5Ch case    5:*/		regs.LR = 0x82085D60; return 0x8226CEF8;
		/* 82085D5Ch case    5:*/		return 0x82085D60;
		  /* 82085D60h */ case    6:  		/* cmpwi CR6, R3, 2 */
		/* 82085D60h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 82085D60h case    6:*/		return 0x82085D64;
		  /* 82085D64h */ case    7:  		/* bc 4, CR6_EQ, 16 */
		/* 82085D64h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82085D74;  }
		/* 82085D64h case    7:*/		return 0x82085D68;
		  /* 82085D68h */ case    8:  		/* lis R11, -32256 */
		/* 82085D68h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82085D68h case    8:*/		return 0x82085D6C;
		  /* 82085D6Ch */ case    9:  		/* lwz R11, <#[R11 + 1452]> */
		/* 82085D6Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000005AC) );
		/* 82085D6Ch case    9:*/		return 0x82085D70;
		  /* 82085D70h */ case   10:  		/* b 12 */
		/* 82085D70h case   10:*/		return 0x82085D7C;
		/* 82085D70h case   10:*/		return 0x82085D74;
	}
	return 0x82085D74;
} // Block from 82085D48h-82085D74h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82085D74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085D74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085D74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085D74);
		  /* 82085D74h */ case    0:  		/* lis R11, -32256 */
		/* 82085D74h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82085D74h case    0:*/		return 0x82085D78;
		  /* 82085D78h */ case    1:  		/* lwz R11, <#[R11 + 1456]> */
		/* 82085D78h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000005B0) );
		/* 82085D78h case    1:*/		return 0x82085D7C;
	}
	return 0x82085D7C;
} // Block from 82085D74h-82085D7Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82085D7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085D7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085D7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085D7C);
		  /* 82085D7Ch */ case    0:  		/* lwz R10, <#[R31]> */
		/* 82085D7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82085D7Ch case    0:*/		return 0x82085D80;
		  /* 82085D80h */ case    1:  		/* lwz R27, <#[R11]> */
		/* 82085D80h case    1:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 82085D80h case    1:*/		return 0x82085D84;
		  /* 82085D84h */ case    2:  		/* rlwinm. R11, R10, 0, 0, 0 */
		/* 82085D84h case    2:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R10);
		/* 82085D84h case    2:*/		return 0x82085D88;
		  /* 82085D88h */ case    3:  		/* bc 12, CR0_EQ, 804 */
		/* 82085D88h case    3:*/		if ( regs.CR[0].eq ) { return 0x820860AC;  }
		/* 82085D88h case    3:*/		return 0x82085D8C;
		  /* 82085D8Ch */ case    4:  		/* lis R26, -30720 */
		/* 82085D8Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R26,0xFFFF8800);
		/* 82085D8Ch case    4:*/		return 0x82085D90;
		  /* 82085D90h */ case    5:  		/* lis R24, -31744 */
		/* 82085D90h case    5:*/		cpu::op::lis<0>(regs,&regs.R24,0xFFFF8400);
		/* 82085D90h case    5:*/		return 0x82085D94;
		  /* 82085D94h */ case    6:  		/* lis R25, -29440 */
		/* 82085D94h case    6:*/		cpu::op::lis<0>(regs,&regs.R25,0xFFFF8D00);
		/* 82085D94h case    6:*/		return 0x82085D98;
		  /* 82085D98h */ case    7:  		/* rlwinm R11, R10, 0, 0, 7 */
		/* 82085D98h case    7:*/		cpu::op::rlwinm<0,0,0,7>(regs,&regs.R11,regs.R10);
		/* 82085D98h case    7:*/		return 0x82085D9C;
		  /* 82085D9Ch */ case    8:  		/* cmplw CR6, R11, R26 */
		/* 82085D9Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 82085D9Ch case    8:*/		return 0x82085DA0;
		  /* 82085DA0h */ case    9:  		/* bc 12, CR6_GT, 396 */
		/* 82085DA0h case    9:*/		if ( regs.CR[6].gt ) { return 0x82085F2C;  }
		/* 82085DA0h case    9:*/		return 0x82085DA4;
		  /* 82085DA4h */ case   10:  		/* bc 12, CR6_EQ, 360 */
		/* 82085DA4h case   10:*/		if ( regs.CR[6].eq ) { return 0x82085F0C;  }
		/* 82085DA4h case   10:*/		return 0x82085DA8;
		  /* 82085DA8h */ case   11:  		/* cmplw CR6, R11, R24 */
		/* 82085DA8h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 82085DA8h case   11:*/		return 0x82085DAC;
		  /* 82085DACh */ case   12:  		/* bc 12, CR6_GT, 204 */
		/* 82085DACh case   12:*/		if ( regs.CR[6].gt ) { return 0x82085E78;  }
		/* 82085DACh case   12:*/		return 0x82085DB0;
		  /* 82085DB0h */ case   13:  		/* bc 12, CR6_EQ, 168 */
		/* 82085DB0h case   13:*/		if ( regs.CR[6].eq ) { return 0x82085E58;  }
		/* 82085DB0h case   13:*/		return 0x82085DB4;
		  /* 82085DB4h */ case   14:  		/* lis R9, -32768 */
		/* 82085DB4h case   14:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8000);
		/* 82085DB4h case   14:*/		return 0x82085DB8;
		  /* 82085DB8h */ case   15:  		/* cmplw CR6, R11, R9 */
		/* 82085DB8h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82085DB8h case   15:*/		return 0x82085DBC;
		  /* 82085DBCh */ case   16:  		/* bc 12, CR6_EQ, 104 */
		/* 82085DBCh case   16:*/		if ( regs.CR[6].eq ) { return 0x82085E24;  }
		/* 82085DBCh case   16:*/		return 0x82085DC0;
		  /* 82085DC0h */ case   17:  		/* lis R9, -32512 */
		/* 82085DC0h case   17:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8100);
		/* 82085DC0h case   17:*/		return 0x82085DC4;
		  /* 82085DC4h */ case   18:  		/* cmplw CR6, R11, R9 */
		/* 82085DC4h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82085DC4h case   18:*/		return 0x82085DC8;
		  /* 82085DC8h */ case   19:  		/* bc 12, CR6_EQ, 636 */
		/* 82085DC8h case   19:*/		if ( regs.CR[6].eq ) { return 0x82086044;  }
		/* 82085DC8h case   19:*/		return 0x82085DCC;
		  /* 82085DCCh */ case   20:  		/* lis R9, -32256 */
		/* 82085DCCh case   20:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 82085DCCh case   20:*/		return 0x82085DD0;
		  /* 82085DD0h */ case   21:  		/* cmplw CR6, R11, R9 */
		/* 82085DD0h case   21:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82085DD0h case   21:*/		return 0x82085DD4;
		  /* 82085DD4h */ case   22:  		/* bc 12, CR6_EQ, 716 */
		/* 82085DD4h case   22:*/		if ( regs.CR[6].eq ) { return 0x820860A0;  }
		/* 82085DD4h case   22:*/		return 0x82085DD8;
		  /* 82085DD8h */ case   23:  		/* lis R9, -32000 */
		/* 82085DD8h case   23:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8300);
		/* 82085DD8h case   23:*/		return 0x82085DDC;
		  /* 82085DDCh */ case   24:  		/* cmplw CR6, R11, R9 */
		/* 82085DDCh case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82085DDCh case   24:*/		return 0x82085DE0;
		  /* 82085DE0h */ case   25:  		/* bc 4, CR6_EQ, 572 */
		/* 82085DE0h case   25:*/		if ( !regs.CR[6].eq ) { return 0x8208601C;  }
		/* 82085DE0h case   25:*/		return 0x82085DE4;
		  /* 82085DE4h */ case   26:  		/* lwz R11, <#[R30 + 56]> */
		/* 82085DE4h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 82085DE4h case   26:*/		return 0x82085DE8;
		  /* 82085DE8h */ case   27:  		/* lwz R10, <#[R30 + 60]> */
		/* 82085DE8h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000003C) );
		/* 82085DE8h case   27:*/		return 0x82085DEC;
		  /* 82085DECh */ case   28:  		/* oris R11, R11, 16384 */
		/* 82085DECh case   28:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x4000);
		/* 82085DECh case   28:*/		return 0x82085DF0;
		  /* 82085DF0h */ case   29:  		/* stw R31, <#[R30 + 372]> */
		/* 82085DF0h case   29:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000174) );
		/* 82085DF0h case   29:*/		return 0x82085DF4;
		  /* 82085DF4h */ case   30:  		/* addi R31, R31, 4 */
		/* 82085DF4h case   30:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82085DF4h case   30:*/		return 0x82085DF8;
	}
	return 0x82085DF8;
} // Block from 82085D7Ch-82085DF8h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82085DF8h
// Function '?AppendVertexElements@ATG@@YAXPAU_D3DVERTEXELEMENT9@@K0KK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085DF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085DF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085DF8);
		  /* 82085DF8h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 82085DF8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82085DF8h case    0:*/		return 0x82085DFC;
		  /* 82085DFCh */ case    1:  		/* stw R11, <#[R30 + 56]> */
		/* 82085DFCh case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 82085DFCh case    1:*/		return 0x82085E00;
		  /* 82085E00h */ case    2:  		/* bc 4, CR6_GT, 24 */
		/* 82085E00h case    2:*/		if ( !regs.CR[6].gt ) { return 0x82085E18;  }
		/* 82085E00h case    2:*/		return 0x82085E04;
		  /* 82085E04h */ case    3:  		/* lwz R10, <#[R30 + 116]> */
		/* 82085E04h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000074) );
		/* 82085E04h case    3:*/		return 0x82085E08;
		  /* 82085E08h */ case    4:  		/* rlwinm. R10, R10, 0, 30, 30 */
		/* 82085E08h case    4:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R10);
		/* 82085E08h case    4:*/		return 0x82085E0C;
		  /* 82085E0Ch */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 82085E0Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x82085E18;  }
		/* 82085E0Ch case    5:*/		return 0x82085E10;
		  /* 82085E10h */ case    6:  		/* oris R11, R11, 32768 */
		/* 82085E10h case    6:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8000);
		/* 82085E10h case    6:*/		return 0x82085E14;
		  /* 82085E14h */ case    7:  		/* stw R11, <#[R30 + 56]> */
		/* 82085E14h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 82085E14h case    7:*/		return 0x82085E18;
	}
	return 0x82085E18;
} // Block from 82085DF8h-82085E18h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82085E18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085E18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085E18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085E18);
		  /* 82085E18h */ case    0:  		/* mr R3, R30 */
		/* 82085E18h case    0:*/		regs.R3 = regs.R30;
		/* 82085E18h case    0:*/		return 0x82085E1C;
		  /* 82085E1Ch */ case    1:  		/* bl -2700 */
		/* 82085E1Ch case    1:*/		regs.LR = 0x82085E20; return 0x82085390;
		/* 82085E1Ch case    1:*/		return 0x82085E20;
		  /* 82085E20h */ case    2:  		/* b 640 */
		/* 82085E20h case    2:*/		return 0x820860A0;
		/* 82085E20h case    2:*/		return 0x82085E24;
	}
	return 0x82085E24;
} // Block from 82085E18h-82085E24h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82085E24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085E24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085E24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085E24);
		  /* 82085E24h */ case    0:  		/* addi R4, R31, 4 */
		/* 82085E24h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x4);
		/* 82085E24h case    0:*/		return 0x82085E28;
		  /* 82085E28h */ case    1:  		/* addi R3, R30, 116 */
		/* 82085E28h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0x74);
		/* 82085E28h case    1:*/		return 0x82085E2C;
		  /* 82085E2Ch */ case    2:  		/* li R5, 248 */
		/* 82085E2Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0xF8);
		/* 82085E2Ch case    2:*/		return 0x82085E30;
		  /* 82085E30h */ case    3:  		/* bl 48000 */
		/* 82085E30h case    3:*/		regs.LR = 0x82085E34; return 0x820919B0;
		/* 82085E30h case    3:*/		return 0x82085E34;
		  /* 82085E34h */ case    4:  		/* lis R11, 32767 */
		/* 82085E34h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0x7FFF);
		/* 82085E34h case    4:*/		return 0x82085E38;
		  /* 82085E38h */ case    5:  		/* li R10, 0 */
		/* 82085E38h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82085E38h case    5:*/		return 0x82085E3C;
		  /* 82085E3Ch */ case    6:  		/* ori R11, R11, 65535 */
		/* 82085E3Ch case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xFFFF);
		/* 82085E3Ch case    6:*/		return 0x82085E40;
		  /* 82085E40h */ case    7:  		/* li R9, -1 */
		/* 82085E40h case    7:*/		cpu::op::li<0>(regs,&regs.R9,0xFFFFFFFF);
		/* 82085E40h case    7:*/		return 0x82085E44;
		  /* 82085E44h */ case    8:  		/* stw R10, <#[R30 + 60]> */
		/* 82085E44h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x0000003C) );
		/* 82085E44h case    8:*/		return 0x82085E48;
		  /* 82085E48h */ case    9:  		/* addi R31, R31, 252 */
		/* 82085E48h case    9:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0xFC);
		/* 82085E48h case    9:*/		return 0x82085E4C;
		  /* 82085E4Ch */ case   10:  		/* stw R11, <#[R30 + 364]> */
		/* 82085E4Ch case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000016C) );
		/* 82085E4Ch case   10:*/		return 0x82085E50;
		  /* 82085E50h */ case   11:  		/* stw R9, <#[R30 + 368]> */
		/* 82085E50h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000170) );
		/* 82085E50h case   11:*/		return 0x82085E54;
		  /* 82085E54h */ case   12:  		/* b 588 */
		/* 82085E54h case   12:*/		return 0x820860A0;
		/* 82085E54h case   12:*/		return 0x82085E58;
	}
	return 0x82085E58;
} // Block from 82085E24h-82085E58h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82085E58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085E58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085E58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085E58);
		  /* 82085E58h */ case    0:  		/* lwz R11, <#[R30 + 56]> */
		/* 82085E58h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 82085E58h case    0:*/		return 0x82085E5C;
		  /* 82085E5Ch */ case    1:  		/* addi R31, R31, 4 */
		/* 82085E5Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82085E5Ch case    1:*/		return 0x82085E60;
		  /* 82085E60h */ case    2:  		/* rlwinm R11, R11, 0, 2, 0 */
		/* 82085E60h case    2:*/		cpu::op::rlwinm<0,0,2,0>(regs,&regs.R11,regs.R11);
		/* 82085E60h case    2:*/		return 0x82085E64;
		  /* 82085E64h */ case    3:  		/* rlwinm. R10, R11, 0, 0, 0 */
		/* 82085E64h case    3:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R10,regs.R11);
		/* 82085E64h case    3:*/		return 0x82085E68;
		  /* 82085E68h */ case    4:  		/* stw R11, <#[R30 + 56]> */
		/* 82085E68h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 82085E68h case    4:*/		return 0x82085E6C;
		  /* 82085E6Ch */ case    5:  		/* bc 12, CR0_EQ, -84 */
		/* 82085E6Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x82085E18;  }
		/* 82085E6Ch case    5:*/		return 0x82085E70;
		  /* 82085E70h */ case    6:  		/* lwz R31, <#[R30 + 376]> */
		/* 82085E70h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000178) );
		/* 82085E70h case    6:*/		return 0x82085E74;
		  /* 82085E74h */ case    7:  		/* b 556 */
		/* 82085E74h case    7:*/		return 0x820860A0;
		/* 82085E74h case    7:*/		return 0x82085E78;
	}
	return 0x82085E78;
} // Block from 82085E58h-82085E78h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82085E78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085E78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085E78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085E78);
		  /* 82085E78h */ case    0:  		/* lis R9, -31488 */
		/* 82085E78h case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8500);
		/* 82085E78h case    0:*/		return 0x82085E7C;
		  /* 82085E7Ch */ case    1:  		/* cmplw CR6, R11, R9 */
		/* 82085E7Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82085E7Ch case    1:*/		return 0x82085E80;
		  /* 82085E80h */ case    2:  		/* bc 12, CR6_EQ, 96 */
		/* 82085E80h case    2:*/		if ( regs.CR[6].eq ) { return 0x82085EE0;  }
		/* 82085E80h case    2:*/		return 0x82085E84;
		  /* 82085E84h */ case    3:  		/* lis R9, -31232 */
		/* 82085E84h case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8600);
		/* 82085E84h case    3:*/		return 0x82085E88;
		  /* 82085E88h */ case    4:  		/* cmplw CR6, R11, R9 */
		/* 82085E88h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82085E88h case    4:*/		return 0x82085E8C;
		  /* 82085E8Ch */ case    5:  		/* bc 12, CR6_EQ, 64 */
		/* 82085E8Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x82085ECC;  }
		/* 82085E8Ch case    5:*/		return 0x82085E90;
		  /* 82085E90h */ case    6:  		/* lis R9, -30976 */
		/* 82085E90h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8700);
		/* 82085E90h case    6:*/		return 0x82085E94;
		  /* 82085E94h */ case    7:  		/* cmplw CR6, R11, R9 */
		/* 82085E94h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82085E94h case    7:*/		return 0x82085E98;
		  /* 82085E98h */ case    8:  		/* bc 4, CR6_EQ, 388 */
		/* 82085E98h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8208601C;  }
		/* 82085E98h case    8:*/		return 0x82085E9C;
		  /* 82085E9Ch */ case    9:  		/* lwz R11, <#[R30 + 60]> */
		/* 82085E9Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 82085E9Ch case    9:*/		return 0x82085EA0;
		  /* 82085EA0h */ case   10:  		/* addi R31, R31, 4 */
		/* 82085EA0h case   10:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82085EA0h case   10:*/		return 0x82085EA4;
		  /* 82085EA4h */ case   11:  		/* lwz R10, <#[R30 + 56]> */
		/* 82085EA4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000038) );
		/* 82085EA4h case   11:*/		return 0x82085EA8;
		  /* 82085EA8h */ case   12:  		/* lwz R9, <#[R30 + 120]> */
		/* 82085EA8h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000078) );
		/* 82085EA8h case   12:*/		return 0x82085EAC;
		  /* 82085EACh */ case   13:  		/* addi R11, R11, 1 */
		/* 82085EACh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82085EACh case   13:*/		return 0x82085EB0;
		  /* 82085EB0h */ case   14:  		/* rlwinm R10, R10, 0, 3, 1 */
		/* 82085EB0h case   14:*/		cpu::op::rlwinm<0,0,3,1>(regs,&regs.R10,regs.R10);
		/* 82085EB0h case   14:*/		return 0x82085EB4;
		  /* 82085EB4h */ case   15:  		/* cmplw CR6, R11, R9 */
		/* 82085EB4h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82085EB4h case   15:*/		return 0x82085EB8;
	}
	return 0x82085EB8;
} // Block from 82085E78h-82085EB8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82085EB8h
// Function '?ConvertThumbstickValue@ATG@@YAMFF@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085EB8);
		  /* 82085EB8h */ case    0:  		/* stw R11, <#[R30 + 60]> */
		/* 82085EB8h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 82085EB8h case    0:*/		return 0x82085EBC;
		  /* 82085EBCh */ case    1:  		/* stw R10, <#[R30 + 56]> */
		/* 82085EBCh case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000038) );
		/* 82085EBCh case    1:*/		return 0x82085EC0;
		  /* 82085EC0h */ case    2:  		/* bc 4, CR6_LT, -168 */
		/* 82085EC0h case    2:*/		if ( !regs.CR[6].lt ) { return 0x82085E18;  }
		/* 82085EC0h case    2:*/		return 0x82085EC4;
		  /* 82085EC4h */ case    3:  		/* lwz R31, <#[R30 + 380]> */
		/* 82085EC4h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x0000017C) );
		/* 82085EC4h case    3:*/		return 0x82085EC8;
		  /* 82085EC8h */ case    4:  		/* b 472 */
		/* 82085EC8h case    4:*/		return 0x820860A0;
		/* 82085EC8h case    4:*/		return 0x82085ECC;
	}
	return 0x82085ECC;
} // Block from 82085EB8h-82085ECCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 82085ECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085ECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085ECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085ECC);
		  /* 82085ECCh */ case    0:  		/* lwz R11, <#[R30 + 56]> */
		/* 82085ECCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 82085ECCh case    0:*/		return 0x82085ED0;
		  /* 82085ED0h */ case    1:  		/* stw R31, <#[R30 + 380]> */
		/* 82085ED0h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x0000017C) );
		/* 82085ED0h case    1:*/		return 0x82085ED4;
		  /* 82085ED4h */ case    2:  		/* addi R31, R31, 4 */
		/* 82085ED4h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82085ED4h case    2:*/		return 0x82085ED8;
		  /* 82085ED8h */ case    3:  		/* oris R11, R11, 8192 */
		/* 82085ED8h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2000);
		/* 82085ED8h case    3:*/		return 0x82085EDC;
		  /* 82085EDCh */ case    4:  		/* b -200 */
		/* 82085EDCh case    4:*/		return 0x82085E14;
		/* 82085EDCh case    4:*/		return 0x82085EE0;
	}
	return 0x82085EE0;
} // Block from 82085ECCh-82085EE0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82085EE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085EE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085EE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085EE0);
		  /* 82085EE0h */ case    0:  		/* lwz R11, <#[R30 + 56]> */
		/* 82085EE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 82085EE0h case    0:*/		return 0x82085EE4;
		  /* 82085EE4h */ case    1:  		/* stw R31, <#[R30 + 376]> */
		/* 82085EE4h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000178) );
		/* 82085EE4h case    1:*/		return 0x82085EE8;
		  /* 82085EE8h */ case    2:  		/* addi R31, R31, 4 */
		/* 82085EE8h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82085EE8h case    2:*/		return 0x82085EEC;
		  /* 82085EECh */ case    3:  		/* rlwinm R10, R11, 0, 0, 0 */
		/* 82085EECh case    3:*/		cpu::op::rlwinm<0,0,0,0>(regs,&regs.R10,regs.R11);
		/* 82085EECh case    3:*/		return 0x82085EF0;
		  /* 82085EF0h */ case    4:  		/* cntlzw R10, R10 */
		/* 82085EF0h case    4:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 82085EF0h case    4:*/		return 0x82085EF4;
		  /* 82085EF4h */ case    5:  		/* rlwimi R11, R10, 26, 0, 0 */
		/* 82085EF4h case    5:*/		cpu::op::rlwimi<0,26,0,0>(regs,&regs.R11,regs.R10);
		/* 82085EF4h case    5:*/		return 0x82085EF8;
		  /* 82085EF8h */ case    6:  		/* rlwinm. R10, R11, 0, 0, 0 */
		/* 82085EF8h case    6:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R10,regs.R11);
		/* 82085EF8h case    6:*/		return 0x82085EFC;
		  /* 82085EFCh */ case    7:  		/* stw R11, <#[R30 + 56]> */
		/* 82085EFCh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000038) );
		/* 82085EFCh case    7:*/		return 0x82085F00;
		  /* 82085F00h */ case    8:  		/* bc 12, CR0_EQ, -232 */
		/* 82085F00h case    8:*/		if ( regs.CR[0].eq ) { return 0x82085E18;  }
		/* 82085F00h case    8:*/		return 0x82085F04;
		  /* 82085F04h */ case    9:  		/* lwz R31, <#[R30 + 372]> */
		/* 82085F04h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000174) );
		/* 82085F04h case    9:*/		return 0x82085F08;
		  /* 82085F08h */ case   10:  		/* b 408 */
		/* 82085F08h case   10:*/		return 0x820860A0;
		/* 82085F08h case   10:*/		return 0x82085F0C;
	}
	return 0x82085F0C;
} // Block from 82085EE0h-82085F0Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82085F0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085F0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085F0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085F0C);
		  /* 82085F0Ch */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82085F0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82085F0Ch case    0:*/		return 0x82085F10;
		  /* 82085F10h */ case    1:  		/* addi R31, R31, 8 */
		/* 82085F10h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x8);
		/* 82085F10h case    1:*/		return 0x82085F14;
		  /* 82085F14h */ case    2:  		/* lwz R10, <#[R30 + 364]> */
		/* 82085F14h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000016C) );
		/* 82085F14h case    2:*/		return 0x82085F18;
		  /* 82085F18h */ case    3:  		/* and. R11, R10, R11 */
		/* 82085F18h case    3:*/		cpu::op::and<1>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82085F18h case    3:*/		return 0x82085F1C;
		  /* 82085F1Ch */ case    4:  		/* bc 12, CR0_EQ, 388 */
		/* 82085F1Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x820860A0;  }
		/* 82085F1Ch case    4:*/		return 0x82085F20;
		  /* 82085F20h */ case    5:  		/* stw R31, <#[R30 + 80]> */
		/* 82085F20h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000050) );
		/* 82085F20h case    5:*/		return 0x82085F24;
		  /* 82085F24h */ case    6:  		/* addi R31, R30, 92 */
		/* 82085F24h case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R30,0x5C);
		/* 82085F24h case    6:*/		return 0x82085F28;
		  /* 82085F28h */ case    7:  		/* b 376 */
		/* 82085F28h case    7:*/		return 0x820860A0;
		/* 82085F28h case    7:*/		return 0x82085F2C;
	}
	return 0x82085F2C;
} // Block from 82085F0Ch-82085F2Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 82085F2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085F2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085F2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085F2C);
		  /* 82085F2Ch */ case    0:  		/* cmplw CR6, R11, R25 */
		/* 82085F2Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 82085F2Ch case    0:*/		return 0x82085F30;
		  /* 82085F30h */ case    1:  		/* bc 12, CR6_GT, 200 */
		/* 82085F30h case    1:*/		if ( regs.CR[6].gt ) { return 0x82085FF8;  }
		/* 82085F30h case    1:*/		return 0x82085F34;
		  /* 82085F34h */ case    2:  		/* bc 12, CR6_EQ, 376 */
		/* 82085F34h case    2:*/		if ( regs.CR[6].eq ) { return 0x820860AC;  }
		/* 82085F34h case    2:*/		return 0x82085F38;
		  /* 82085F38h */ case    3:  		/* lis R9, -30464 */
		/* 82085F38h case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8900);
		/* 82085F38h case    3:*/		return 0x82085F3C;
		  /* 82085F3Ch */ case    4:  		/* cmplw CR6, R11, R9 */
		/* 82085F3Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82085F3Ch case    4:*/		return 0x82085F40;
		  /* 82085F40h */ case    5:  		/* bc 12, CR6_EQ, 148 */
		/* 82085F40h case    5:*/		if ( regs.CR[6].eq ) { return 0x82085FD4;  }
		/* 82085F40h case    5:*/		return 0x82085F44;
		  /* 82085F44h */ case    6:  		/* lis R9, -30208 */
		/* 82085F44h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8A00);
		/* 82085F44h case    6:*/		return 0x82085F48;
		  /* 82085F48h */ case    7:  		/* cmplw CR6, R11, R9 */
		/* 82085F48h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82085F48h case    7:*/		return 0x82085F4C;
		  /* 82085F4Ch */ case    8:  		/* bc 12, CR6_EQ, 40 */
		/* 82085F4Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x82085F74;  }
		/* 82085F4Ch case    8:*/		return 0x82085F50;
		  /* 82085F50h */ case    9:  		/* lis R9, -29952 */
		/* 82085F50h case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8B00);
		/* 82085F50h case    9:*/		return 0x82085F54;
		  /* 82085F54h */ case   10:  		/* cmplw CR6, R11, R9 */
		/* 82085F54h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82085F54h case   10:*/		return 0x82085F58;
		  /* 82085F58h */ case   11:  		/* bc 12, CR6_EQ, 20 */
		/* 82085F58h case   11:*/		if ( regs.CR[6].eq ) { return 0x82085F6C;  }
		/* 82085F58h case   11:*/		return 0x82085F5C;
		  /* 82085F5Ch */ case   12:  		/* lis R9, -29696 */
		/* 82085F5Ch case   12:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8C00);
		/* 82085F5Ch case   12:*/		return 0x82085F60;
		  /* 82085F60h */ case   13:  		/* cmplw CR6, R11, R9 */
		/* 82085F60h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82085F60h case   13:*/		return 0x82085F64;
		  /* 82085F64h */ case   14:  		/* bc 12, CR6_EQ, 328 */
		/* 82085F64h case   14:*/		if ( regs.CR[6].eq ) { return 0x820860AC;  }
		/* 82085F64h case   14:*/		return 0x82085F68;
		  /* 82085F68h */ case   15:  		/* b 180 */
		/* 82085F68h case   15:*/		return 0x8208601C;
		/* 82085F68h case   15:*/		return 0x82085F6C;
	}
	return 0x82085F6C;
} // Block from 82085F2Ch-82085F6Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 82085F6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085F6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085F6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085F6C);
		  /* 82085F6Ch */ case    0:  		/* addi R31, R31, 4 */
		/* 82085F6Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82085F6Ch case    0:*/		return 0x82085F70;
	}
	return 0x82085F70;
} // Block from 82085F6Ch-82085F70h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82085F70h
// Function '?GetInput@Input@ATG@@SAXPAUGAMEPAD@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085F70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085F70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085F70);
		  /* 82085F70h */ case    0:  		/* b 304 */
		/* 82085F70h case    0:*/		return 0x820860A0;
		/* 82085F70h case    0:*/		return 0x82085F74;
	}
	return 0x82085F74;
} // Block from 82085F70h-82085F74h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82085F74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085F74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085F74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085F74);
		  /* 82085F74h */ case    0:  		/* mr R4, R30 */
		/* 82085F74h case    0:*/		regs.R4 = regs.R30;
		/* 82085F74h case    0:*/		return 0x82085F78;
		  /* 82085F78h */ case    1:  		/* lwz R23, <#[R31 + 4]> */
		/* 82085F78h case    1:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R31 + 0x00000004) );
		/* 82085F78h case    1:*/		return 0x82085F7C;
		  /* 82085F7Ch */ case    2:  		/* mr R3, R27 */
		/* 82085F7Ch case    2:*/		regs.R3 = regs.R27;
		/* 82085F7Ch case    2:*/		return 0x82085F80;
		  /* 82085F80h */ case    3:  		/* lwz R29, <#[R31 + 8]> */
		/* 82085F80h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000008) );
		/* 82085F80h case    3:*/		return 0x82085F84;
		  /* 82085F84h */ case    4:  		/* lwz R28, <#[R31 + 12]> */
		/* 82085F84h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x0000000C) );
		/* 82085F84h case    4:*/		return 0x82085F88;
		  /* 82085F88h */ case    5:  		/* lwz R5, <#[R31 + 16]> */
		/* 82085F88h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000010) );
		/* 82085F88h case    5:*/		return 0x82085F8C;
		  /* 82085F8Ch */ case    6:  		/* bl -1980 */
		/* 82085F8Ch case    6:*/		regs.LR = 0x82085F90; return 0x820857D0;
		/* 82085F8Ch case    6:*/		return 0x82085F90;
		  /* 82085F90h */ case    7:  		/* mr R3, R23 */
		/* 82085F90h case    7:*/		regs.R3 = regs.R23;
		/* 82085F90h case    7:*/		return 0x82085F94;
		  /* 82085F94h */ case    8:  		/* bl -1564 */
		/* 82085F94h case    8:*/		regs.LR = 0x82085F98; return 0x82085978;
		/* 82085F94h case    8:*/		return 0x82085F98;
		  /* 82085F98h */ case    9:  		/* lwz R11, <#[R30 + 364]> */
		/* 82085F98h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000016C) );
		/* 82085F98h case    9:*/		return 0x82085F9C;
		  /* 82085F9Ch */ case   10:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82085F9Ch case   10:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82085F9Ch case   10:*/		return 0x82085FA0;
		  /* 82085FA0h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 82085FA0h case   11:*/		if ( regs.CR[0].eq ) { return 0x82085FB4;  }
		/* 82085FA0h case   11:*/		return 0x82085FA4;
		  /* 82085FA4h */ case   12:  		/* mr R4, R29 */
		/* 82085FA4h case   12:*/		regs.R4 = regs.R29;
		/* 82085FA4h case   12:*/		return 0x82085FA8;
		  /* 82085FA8h */ case   13:  		/* addi R3, R30, 116 */
		/* 82085FA8h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0x74);
		/* 82085FA8h case   13:*/		return 0x82085FAC;
		  /* 82085FACh */ case   14:  		/* bl -1364 */
		/* 82085FACh case   14:*/		regs.LR = 0x82085FB0; return 0x82085A58;
		/* 82085FACh case   14:*/		return 0x82085FB0;
		  /* 82085FB0h */ case   15:  		/* b 28 */
		/* 82085FB0h case   15:*/		return 0x82085FCC;
		/* 82085FB0h case   15:*/		return 0x82085FB4;
	}
	return 0x82085FB4;
} // Block from 82085F74h-82085FB4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82085FB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085FB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085FB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085FB4);
		  /* 82085FB4h */ case    0:  		/* lwz R11, <#[R30 + 60]> */
		/* 82085FB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000003C) );
		/* 82085FB4h case    0:*/		return 0x82085FB8;
		  /* 82085FB8h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 82085FB8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82085FB8h case    1:*/		return 0x82085FBC;
		  /* 82085FBCh */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 82085FBCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x82085FCC;  }
		/* 82085FBCh case    2:*/		return 0x82085FC0;
		  /* 82085FC0h */ case    3:  		/* mr R4, R28 */
		/* 82085FC0h case    3:*/		regs.R4 = regs.R28;
		/* 82085FC0h case    3:*/		return 0x82085FC4;
		  /* 82085FC4h */ case    4:  		/* addi R3, R30, 116 */
		/* 82085FC4h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0x74);
		/* 82085FC4h case    4:*/		return 0x82085FC8;
		  /* 82085FC8h */ case    5:  		/* bl -1072 */
		/* 82085FC8h case    5:*/		regs.LR = 0x82085FCC; return 0x82085B98;
		/* 82085FC8h case    5:*/		return 0x82085FCC;
	}
	return 0x82085FCC;
} // Block from 82085FB4h-82085FCCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 82085FCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085FCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085FCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085FCC);
		  /* 82085FCCh */ case    0:  		/* addi R31, R31, 20 */
		/* 82085FCCh case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x14);
		/* 82085FCCh case    0:*/		return 0x82085FD0;
		  /* 82085FD0h */ case    1:  		/* b 208 */
		/* 82085FD0h case    1:*/		return 0x820860A0;
		/* 82085FD0h case    1:*/		return 0x82085FD4;
	}
	return 0x82085FD4;
} // Block from 82085FCCh-82085FD4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82085FD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085FD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085FD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085FD4);
		  /* 82085FD4h */ case    0:  		/* lwz R11, <#[R30 + 364]> */
		/* 82085FD4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000016C) );
		/* 82085FD4h case    0:*/		return 0x82085FD8;
		  /* 82085FD8h */ case    1:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82085FD8h case    1:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82085FD8h case    1:*/		return 0x82085FDC;
		  /* 82085FDCh */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 82085FDCh case    2:*/		if ( regs.CR[0].eq ) { return 0x82085FF0;  }
		/* 82085FDCh case    2:*/		return 0x82085FE0;
		  /* 82085FE0h */ case    3:  		/* addi R3, R30, 116 */
		/* 82085FE0h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0x74);
		/* 82085FE0h case    3:*/		return 0x82085FE4;
		  /* 82085FE4h */ case    4:  		/* lwz R5, <#[R31 + 8]> */
		/* 82085FE4h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000008) );
		/* 82085FE4h case    4:*/		return 0x82085FE8;
		  /* 82085FE8h */ case    5:  		/* lwz R4, <#[R31 + 4]> */
		/* 82085FE8h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000004) );
		/* 82085FE8h case    5:*/		return 0x82085FEC;
		  /* 82085FECh */ case    6:  		/* bl -860 */
		/* 82085FECh case    6:*/		regs.LR = 0x82085FF0; return 0x82085C90;
		/* 82085FECh case    6:*/		return 0x82085FF0;
	}
	return 0x82085FF0;
} // Block from 82085FD4h-82085FF0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82085FF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085FF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085FF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085FF0);
		  /* 82085FF0h */ case    0:  		/* addi R31, R31, 12 */
		/* 82085FF0h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0xC);
		/* 82085FF0h case    0:*/		return 0x82085FF4;
		  /* 82085FF4h */ case    1:  		/* b 172 */
		/* 82085FF4h case    1:*/		return 0x820860A0;
		/* 82085FF4h case    1:*/		return 0x82085FF8;
	}
	return 0x82085FF8;
} // Block from 82085FF0h-82085FF8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82085FF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82085FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82085FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82085FF8);
		  /* 82085FF8h */ case    0:  		/* lis R9, -29184 */
		/* 82085FF8h case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8E00);
		/* 82085FF8h case    0:*/		return 0x82085FFC;
		  /* 82085FFCh */ case    1:  		/* cmplw CR6, R11, R9 */
		/* 82085FFCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82085FFCh case    1:*/		return 0x82086000;
		  /* 82086000h */ case    2:  		/* bc 12, CR6_EQ, 104 */
		/* 82086000h case    2:*/		if ( regs.CR[6].eq ) { return 0x82086068;  }
		/* 82086000h case    2:*/		return 0x82086004;
		  /* 82086004h */ case    3:  		/* lis R9, -28928 */
		/* 82086004h case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8F00);
		/* 82086004h case    3:*/		return 0x82086008;
		  /* 82086008h */ case    4:  		/* cmplw CR6, R11, R9 */
		/* 82086008h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82086008h case    4:*/		return 0x8208600C;
		  /* 8208600Ch */ case    5:  		/* bc 12, CR6_EQ, 56 */
		/* 8208600Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x82086044;  }
		/* 8208600Ch case    5:*/		return 0x82086010;
		  /* 82086010h */ case    6:  		/* lis R9, -28672 */
		/* 82086010h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF9000);
		/* 82086010h case    6:*/		return 0x82086014;
		  /* 82086014h */ case    7:  		/* cmplw CR6, R11, R9 */
		/* 82086014h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82086014h case    7:*/		return 0x82086018;
		  /* 82086018h */ case    8:  		/* bc 12, CR6_EQ, 24 */
		/* 82086018h case    8:*/		if ( regs.CR[6].eq ) { return 0x82086030;  }
		/* 82086018h case    8:*/		return 0x8208601C;
	}
	return 0x8208601C;
} // Block from 82085FF8h-8208601Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8208601Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208601C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208601C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208601C);
		  /* 8208601Ch */ case    0:  		/* lis R11, -16384 */
		/* 8208601Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC000);
		/* 8208601Ch case    0:*/		return 0x82086020;
		  /* 82086020h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 82086020h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82086020h case    1:*/		return 0x82086024;
		  /* 82086024h */ case    2:  		/* bc 12, CR6_EQ, 136 */
		/* 82086024h case    2:*/		if ( regs.CR[6].eq ) { return 0x820860AC;  }
		/* 82086024h case    2:*/		return 0x82086028;
		  /* 82086028h */ case    3:  		/* addi R31, R10, 4 */
		/* 82086028h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R10,0x4);
		/* 82086028h case    3:*/		return 0x8208602C;
		  /* 8208602Ch */ case    4:  		/* b 116 */
		/* 8208602Ch case    4:*/		return 0x820860A0;
		/* 8208602Ch case    4:*/		return 0x82086030;
	}
	return 0x82086030;
} // Block from 8208601Ch-82086030h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82086030h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086030);
		  /* 82086030h */ case    0:  		/* mr R4, R31 */
		/* 82086030h case    0:*/		regs.R4 = regs.R31;
		/* 82086030h case    0:*/		return 0x82086034;
		  /* 82086034h */ case    1:  		/* mr R3, R30 */
		/* 82086034h case    1:*/		regs.R3 = regs.R30;
		/* 82086034h case    1:*/		return 0x82086038;
		  /* 82086038h */ case    2:  		/* bl -32312 */
		/* 82086038h case    2:*/		regs.LR = 0x8208603C; return 0x8207E200;
		/* 82086038h case    2:*/		return 0x8208603C;
		  /* 8208603Ch */ case    3:  		/* mr R31, R3 */
		/* 8208603Ch case    3:*/		regs.R31 = regs.R3;
		/* 8208603Ch case    3:*/		return 0x82086040;
		  /* 82086040h */ case    4:  		/* b 96 */
		/* 82086040h case    4:*/		return 0x820860A0;
		/* 82086040h case    4:*/		return 0x82086044;
	}
	return 0x82086044;
} // Block from 82086030h-82086044h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82086044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086044);
		  /* 82086044h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82086044h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82086044h case    0:*/		return 0x82086048;
		  /* 82086048h */ case    1:  		/* li R5, 1 */
		/* 82086048h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82086048h case    1:*/		return 0x8208604C;
		  /* 8208604Ch */ case    2:  		/* stw R10, <#[R1 + 80]> */
		/* 8208604Ch case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8208604Ch case    2:*/		return 0x82086050;
		  /* 82086050h */ case    3:  		/* addi R4, R1, 80 */
		/* 82086050h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82086050h case    3:*/		return 0x82086054;
		  /* 82086054h */ case    4:  		/* mr R3, R27 */
		/* 82086054h case    4:*/		regs.R3 = regs.R27;
		/* 82086054h case    4:*/		return 0x82086058;
		  /* 82086058h */ case    5:  		/* stw R11, <#[R1 + 84]> */
		/* 82086058h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82086058h case    5:*/		return 0x8208605C;
		  /* 8208605Ch */ case    6:  		/* bl -77508 */
		/* 8208605Ch case    6:*/		regs.LR = 0x82086060; return 0x82073198;
		/* 8208605Ch case    6:*/		return 0x82086060;
		  /* 82086060h */ case    7:  		/* addi R31, R31, 8 */
		/* 82086060h case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x8);
		/* 82086060h case    7:*/		return 0x82086064;
		  /* 82086064h */ case    8:  		/* b 60 */
		/* 82086064h case    8:*/		return 0x820860A0;
		/* 82086064h case    8:*/		return 0x82086068;
	}
	return 0x82086068;
} // Block from 82086044h-82086068h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82086068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086068);
		  /* 82086068h */ case    0:  		/* lwz R11, <#[R30 + 364]> */
		/* 82086068h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000016C) );
		/* 82086068h case    0:*/		return 0x8208606C;
		  /* 8208606Ch */ case    1:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 8208606Ch case    1:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 8208606Ch case    1:*/		return 0x82086070;
		  /* 82086070h */ case    2:  		/* bc 12, CR0_EQ, 36 */
		/* 82086070h case    2:*/		if ( regs.CR[0].eq ) { return 0x82086094;  }
		/* 82086070h case    2:*/		return 0x82086074;
		  /* 82086074h */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 82086074h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82086074h case    3:*/		return 0x82086078;
		  /* 82086078h */ case    4:  		/* li R5, 1 */
		/* 82086078h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82086078h case    4:*/		return 0x8208607C;
		  /* 8208607Ch */ case    5:  		/* lwz R10, <#[R31 + 12]> */
		/* 8208607Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8208607Ch case    5:*/		return 0x82086080;
		  /* 82086080h */ case    6:  		/* addi R4, R1, 88 */
		/* 82086080h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x58);
		/* 82086080h case    6:*/		return 0x82086084;
		  /* 82086084h */ case    7:  		/* mr R3, R27 */
		/* 82086084h case    7:*/		regs.R3 = regs.R27;
		/* 82086084h case    7:*/		return 0x82086088;
		  /* 82086088h */ case    8:  		/* stw R11, <#[R1 + 88]> */
		/* 82086088h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 82086088h case    8:*/		return 0x8208608C;
		  /* 8208608Ch */ case    9:  		/* stw R10, <#[R1 + 92]> */
		/* 8208608Ch case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 8208608Ch case    9:*/		return 0x82086090;
		  /* 82086090h */ case   10:  		/* bl -77560 */
		/* 82086090h case   10:*/		regs.LR = 0x82086094; return 0x82073198;
		/* 82086090h case   10:*/		return 0x82086094;
	}
	return 0x82086094;
} // Block from 82086068h-82086094h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82086094h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086094( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086094) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086094);
		  /* 82086094h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82086094h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82086094h case    0:*/		return 0x82086098;
		  /* 82086098h */ case    1:  		/* addi R31, R31, 16 */
		/* 82086098h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 82086098h case    1:*/		return 0x8208609C;
		  /* 8208609Ch */ case    2:  		/* stw R11, <#[R30 + 368]> */
		/* 8208609Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000170) );
		/* 8208609Ch case    2:*/		return 0x820860A0;
	}
	return 0x820860A0;
} // Block from 82086094h-820860A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820860A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820860A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820860A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820860A0);
		  /* 820860A0h */ case    0:  		/* lwz R10, <#[R31]> */
		/* 820860A0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820860A0h case    0:*/		return 0x820860A4;
		  /* 820860A4h */ case    1:  		/* rlwinm. R11, R10, 0, 0, 0 */
		/* 820860A4h case    1:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R10);
		/* 820860A4h case    1:*/		return 0x820860A8;
		  /* 820860A8h */ case    2:  		/* bc 4, CR0_EQ, -784 */
		/* 820860A8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82085D98;  }
		/* 820860A8h case    2:*/		return 0x820860AC;
	}
	return 0x820860AC;
} // Block from 820860A0h-820860ACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 820860ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820860AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820860AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820860AC);
		  /* 820860ACh */ case    0:  		/* mr R3, R31 */
		/* 820860ACh case    0:*/		regs.R3 = regs.R31;
		/* 820860ACh case    0:*/		return 0x820860B0;
		  /* 820860B0h */ case    1:  		/* addi R1, R1, 176 */
		/* 820860B0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 820860B0h case    1:*/		return 0x820860B4;
		  /* 820860B4h */ case    2:  		/* b 45536 */
		/* 820860B4h case    2:*/		return 0x82091294;
		/* 820860B4h case    2:*/		return 0x820860B8;
	}
	return 0x820860B8;
} // Block from 820860ACh-820860B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820860B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820860B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820860B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820860B8);
		  /* 820860B8h */ case    0:  		/* mfspr R12, LR */
		/* 820860B8h case    0:*/		regs.R12 = regs.LR;
		/* 820860B8h case    0:*/		return 0x820860BC;
		  /* 820860BCh */ case    1:  		/* bl 45464 */
		/* 820860BCh case    1:*/		regs.LR = 0x820860C0; return 0x82091254;
		/* 820860BCh case    1:*/		return 0x820860C0;
		  /* 820860C0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 820860C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 820860C0h case    2:*/		return 0x820860C4;
		  /* 820860C4h */ case    3:  		/* lwz R31, <#[R3]> */
		/* 820860C4h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 820860C4h case    3:*/		return 0x820860C8;
		  /* 820860C8h */ case    4:  		/* mr R30, R3 */
		/* 820860C8h case    4:*/		regs.R30 = regs.R3;
		/* 820860C8h case    4:*/		return 0x820860CC;
		  /* 820860CCh */ case    5:  		/* lis R9, 256 */
		/* 820860CCh case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0x100);
		/* 820860CCh case    5:*/		return 0x820860D0;
		  /* 820860D0h */ case    6:  		/* b 28 */
		/* 820860D0h case    6:*/		return 0x820860EC;
		/* 820860D0h case    6:*/		return 0x820860D4;
		  /* 820860D4h */ case    7:  		/* lwz R11, <#[R30 + 4]> */
		/* 820860D4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 820860D4h case    7:*/		return 0x820860D8;
		  /* 820860D8h */ case    8:  		/* lwz R10, <#[R31 + 64]> */
		/* 820860D8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000040) );
		/* 820860D8h case    8:*/		return 0x820860DC;
		  /* 820860DCh */ case    9:  		/* slw R11, R9, R11 */
		/* 820860DCh case    9:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 820860DCh case    9:*/		return 0x820860E0;
		  /* 820860E0h */ case   10:  		/* and. R11, R11, R10 */
		/* 820860E0h case   10:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R10);
		/* 820860E0h case   10:*/		return 0x820860E4;
		  /* 820860E4h */ case   11:  		/* bc 4, CR0_EQ, 20 */
		/* 820860E4h case   11:*/		if ( !regs.CR[0].eq ) { return 0x820860F8;  }
		/* 820860E4h case   11:*/		return 0x820860E8;
		  /* 820860E8h */ case   12:  		/* nop */
		/* 820860E8h case   12:*/		cpu::op::nop();
		/* 820860E8h case   12:*/		return 0x820860EC;
	}
	return 0x820860EC;
} // Block from 820860B8h-820860ECh (13 instructions)

//////////////////////////////////////////////////////
// Block at 820860ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820860EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820860EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820860EC);
		  /* 820860ECh */ case    0:  		/* lwz R11, <#[R31 + 68]> */
		/* 820860ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000044) );
		/* 820860ECh case    0:*/		return 0x820860F0;
		  /* 820860F0h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 820860F0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 820860F0h case    1:*/		return 0x820860F4;
		  /* 820860F4h */ case    2:  		/* bc 4, CR6_EQ, -32 */
		/* 820860F4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820860D4;  }
		/* 820860F4h case    2:*/		return 0x820860F8;
	}
	return 0x820860F8;
} // Block from 820860ECh-820860F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820860F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820860F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820860F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820860F8);
		  /* 820860F8h */ case    0:  		/* li R29, 0 */
		/* 820860F8h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 820860F8h case    0:*/		return 0x820860FC;
		  /* 820860FCh */ case    1:  		/* li R28, 1 */
		/* 820860FCh case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 820860FCh case    1:*/		return 0x82086100;
		  /* 82086100h */ case    2:  		/* mfmsr R10, MSR */
		/* 82086100h case    2:*/		regs.R10 = regs.MSR;
		/* 82086100h case    2:*/		return 0x82086104;
		  /* 82086104h */ case    3:  		/* mtmsrd MSR, R13 */
		/* 82086104h case    3:*/		regs.MSR = regs.R13;
		/* 82086104h case    3:*/		return 0x82086108;
		  /* 82086108h */ case    4:  		/* lwarx R11, <#[R31]> */
		/* 82086108h case    4:*/		cpu::mem::lwarx( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82086108h case    4:*/		return 0x8208610C;
		  /* 8208610Ch */ case    5:  		/* cmpw CR6, R11, R29 */
		/* 8208610Ch case    5:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R29);
		/* 8208610Ch case    5:*/		return 0x82086110;
		  /* 82086110h */ case    6:  		/* bc 4, CR6_EQ, 20 */
		/* 82086110h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82086124;  }
		/* 82086110h case    6:*/		return 0x82086114;
		  /* 82086114h */ case    7:  		/* stwcx. R28, <#[R31]> */
		/* 82086114h case    7:*/		cpu::mem::stwcx( regs, regs.R28, (uint32)(regs.R31 + 0x00000000) );
		/* 82086114h case    7:*/		return 0x82086118;
		  /* 82086118h */ case    8:  		/* mtmsrd MSR, R10 */
		/* 82086118h case    8:*/		regs.MSR = regs.R10;
		/* 82086118h case    8:*/		return 0x8208611C;
		  /* 8208611Ch */ case    9:  		/* bc 4, CR0_EQ, -28 */
		/* 8208611Ch case    9:*/		if ( !regs.CR[0].eq ) { return 0x82086100;  }
		/* 8208611Ch case    9:*/		return 0x82086120;
		  /* 82086120h */ case   10:  		/* b 12 */
		/* 82086120h case   10:*/		return 0x8208612C;
		/* 82086120h case   10:*/		return 0x82086124;
	}
	return 0x82086124;
} // Block from 820860F8h-82086124h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82086124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086124);
		  /* 82086124h */ case    0:  		/* stwcx. R11, <#[R31]> */
		/* 82086124h case    0:*/		cpu::mem::stwcx( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82086124h case    0:*/		return 0x82086128;
		  /* 82086128h */ case    1:  		/* mtmsrd MSR, R10 */
		/* 82086128h case    1:*/		regs.MSR = regs.R10;
		/* 82086128h case    1:*/		return 0x8208612C;
	}
	return 0x8208612C;
} // Block from 82086124h-8208612Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8208612Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208612C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208612C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208612C);
		  /* 8208612Ch */ case    0:  		/* nop */
		/* 8208612Ch case    0:*/		cpu::op::nop();
		/* 8208612Ch case    0:*/		return 0x82086130;
		  /* 82086130h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 82086130h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82086130h case    1:*/		return 0x82086134;
		  /* 82086134h */ case    2:  		/* bc 4, CR6_EQ, -52 */
		/* 82086134h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82086100;  }
		/* 82086134h case    2:*/		return 0x82086138;
		  /* 82086138h */ case    3:  		/* lwsync */
		/* 82086138h case    3:*/		cpu::op::lwsync<0>(regs);
		/* 82086138h case    3:*/		return 0x8208613C;
		  /* 8208613Ch */ case    4:  		/* lwz R11, <#[R30 + 84]> */
		/* 8208613Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000054) );
		/* 8208613Ch case    4:*/		return 0x82086140;
		  /* 82086140h */ case    5:  		/* lwz R10, <#[R30 + 88]> */
		/* 82086140h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000058) );
		/* 82086140h case    5:*/		return 0x82086144;
		  /* 82086144h */ case    6:  		/* cmplw CR6, R10, R11 */
		/* 82086144h case    6:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82086144h case    6:*/		return 0x82086148;
		  /* 82086148h */ case    7:  		/* bc 4, CR6_EQ, 20 */
		/* 82086148h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8208615C;  }
		/* 82086148h case    7:*/		return 0x8208614C;
		  /* 8208614Ch */ case    8:  		/* lwsync */
		/* 8208614Ch case    8:*/		cpu::op::lwsync<0>(regs);
		/* 8208614Ch case    8:*/		return 0x82086150;
	}
	return 0x82086150;
} // Block from 8208612Ch-82086150h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82086150h
// Function '?GetMergedInput@Input@ATG@@SAPAUGAMEPAD@2@KPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086150);
		  /* 82086150h */ case    0:  		/* stw R29, <#[R31]> */
		/* 82086150h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 82086150h case    0:*/		return 0x82086154;
		  /* 82086154h */ case    1:  		/* addi R1, R1, 128 */
		/* 82086154h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82086154h case    1:*/		return 0x82086158;
		  /* 82086158h */ case    2:  		/* b 45388 */
		/* 82086158h case    2:*/		return 0x820912A4;
		/* 82086158h case    2:*/		return 0x8208615C;
	}
	return 0x8208615C;
} // Block from 82086150h-8208615Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8208615Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208615C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208615C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208615C);
		  /* 8208615Ch */ case    0:  		/* lwz R11, <#[R31 + 68]> */
		/* 8208615Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000044) );
		/* 8208615Ch case    0:*/		return 0x82086160;
		  /* 82086160h */ case    1:  		/* addi R11, R11, 1 */
		/* 82086160h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82086160h case    1:*/		return 0x82086164;
		  /* 82086164h */ case    2:  		/* stw R11, <#[R31 + 68]> */
		/* 82086164h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000044) );
		/* 82086164h case    2:*/		return 0x82086168;
		  /* 82086168h */ case    3:  		/* lwz R11, <#[R30 + 88]> */
		/* 82086168h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000058) );
		/* 82086168h case    3:*/		return 0x8208616C;
		  /* 8208616Ch */ case    4:  		/* rlwinm R10, R11, 0, 30, 31 */
		/* 8208616Ch case    4:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R11);
		/* 8208616Ch case    4:*/		return 0x82086170;
		  /* 82086170h */ case    5:  		/* addi R10, R10, 23 */
		/* 82086170h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x17);
		/* 82086170h case    5:*/		return 0x82086174;
		  /* 82086174h */ case    6:  		/* addi R8, R11, 1 */
		/* 82086174h case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x1);
		/* 82086174h case    6:*/		return 0x82086178;
		  /* 82086178h */ case    7:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 82086178h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 82086178h case    7:*/		return 0x8208617C;
		  /* 8208617Ch */ case    8:  		/* lwzx R11, <#[R11 + R30]> */
		/* 8208617Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 8208617Ch case    8:*/		return 0x82086180;
		  /* 82086180h */ case    9:  		/* stw R8, <#[R30 + 88]> */
		/* 82086180h case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R30 + 0x00000058) );
		/* 82086180h case    9:*/		return 0x82086184;
		  /* 82086184h */ case   10:  		/* lwz R10, <#[R31 + 68]> */
		/* 82086184h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000044) );
		/* 82086184h case   10:*/		return 0x82086188;
		  /* 82086188h */ case   11:  		/* lwz R8, <#[R31 + 68]> */
		/* 82086188h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000044) );
		/* 82086188h case   11:*/		return 0x8208618C;
		  /* 8208618Ch */ case   12:  		/* cmpwi CR6, R8, 1 */
		/* 8208618Ch case   12:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000001);
		/* 8208618Ch case   12:*/		return 0x82086190;
		  /* 82086190h */ case   13:  		/* bc 4, CR6_GT, 12 */
		/* 82086190h case   13:*/		if ( !regs.CR[6].gt ) { return 0x8208619C;  }
		/* 82086190h case   13:*/		return 0x82086194;
		  /* 82086194h */ case   14:  		/* lwz R3, <#[R31 + 36]> */
		/* 82086194h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000024) );
		/* 82086194h case   14:*/		return 0x82086198;
		  /* 82086198h */ case   15:  		/* b 48 */
		/* 82086198h case   15:*/		return 0x820861C8;
		/* 82086198h case   15:*/		return 0x8208619C;
	}
	return 0x8208619C;
} // Block from 8208615Ch-8208619Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8208619Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208619C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208619C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208619C);
		  /* 8208619Ch */ case    0:  		/* lwz R10, <#[R30 + 4]> */
		/* 8208619Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 8208619Ch case    0:*/		return 0x820861A0;
		  /* 820861A0h */ case    1:  		/* lwz R3, <#[R31 + 80]> */
		/* 820861A0h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000050) );
		/* 820861A0h case    1:*/		return 0x820861A4;
		  /* 820861A4h */ case    2:  		/* slw R10, R9, R10 */
		/* 820861A4h case    2:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 820861A4h case    2:*/		return 0x820861A8;
		  /* 820861A8h */ case    3:  		/* stw R29, <#[R31 + 112]> */
		/* 820861A8h case    3:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000070) );
		/* 820861A8h case    3:*/		return 0x820861AC;
		  /* 820861ACh */ case    4:  		/* stw R10, <#[R31 + 64]> */
		/* 820861ACh case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000040) );
		/* 820861ACh case    4:*/		return 0x820861B0;
		  /* 820861B0h */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 820861B0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 820861B0h case    5:*/		return 0x820861B4;
		  /* 820861B4h */ case    6:  		/* bc 12, CR6_EQ, 12 */
		/* 820861B4h case    6:*/		if ( regs.CR[6].eq ) { return 0x820861C0;  }
		/* 820861B4h case    6:*/		return 0x820861B8;
		  /* 820861B8h */ case    7:  		/* stw R29, <#[R31 + 80]> */
		/* 820861B8h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000050) );
		/* 820861B8h case    7:*/		return 0x820861BC;
		  /* 820861BCh */ case    8:  		/* b 12 */
		/* 820861BCh case    8:*/		return 0x820861C8;
		/* 820861BCh case    8:*/		return 0x820861C0;
	}
	return 0x820861C0;
} // Block from 8208619Ch-820861C0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820861C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820861C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820861C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820861C0);
		  /* 820861C0h */ case    0:  		/* addi R3, R11, 4 */
		/* 820861C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 820861C0h case    0:*/		return 0x820861C4;
		  /* 820861C4h */ case    1:  		/* stw R11, <#[R31 + 84]> */
		/* 820861C4h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 820861C4h case    1:*/		return 0x820861C8;
	}
	return 0x820861C8;
} // Block from 820861C0h-820861C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820861C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820861C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820861C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820861C8);
		  /* 820861C8h */ case    0:  		/* lis R27, -16384 */
		/* 820861C8h case    0:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFFC000);
		/* 820861C8h case    0:*/		return 0x820861CC;
		  /* 820861CCh */ case    1:  		/* lwz R6, <#[R31 + 24]> */
		/* 820861CCh case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000018) );
		/* 820861CCh case    1:*/		return 0x820861D0;
		  /* 820861D0h */ case    2:  		/* lwz R11, <#[R31 + 28]> */
		/* 820861D0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 820861D0h case    2:*/		return 0x820861D4;
		  /* 820861D4h */ case    3:  		/* cmplw CR6, R6, R11 */
		/* 820861D4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R11);
		/* 820861D4h case    3:*/		return 0x820861D8;
		  /* 820861D8h */ case    4:  		/* bc 4, CR6_LT, 28 */
		/* 820861D8h case    4:*/		if ( !regs.CR[6].lt ) { return 0x820861F4;  }
		/* 820861D8h case    4:*/		return 0x820861DC;
		  /* 820861DCh */ case    5:  		/* addi R11, R6, 1 */
		/* 820861DCh case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R6,0x1);
		/* 820861DCh case    5:*/		return 0x820861E0;
		  /* 820861E0h */ case    6:  		/* lwz R4, <#[R31 + 20]> */
		/* 820861E0h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 820861E0h case    6:*/		return 0x820861E4;
		  /* 820861E4h */ case    7:  		/* lwz R5, <#[R31 + 32]> */
		/* 820861E4h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 820861E4h case    7:*/		return 0x820861E8;
		  /* 820861E8h */ case    8:  		/* stw R11, <#[R31 + 24]> */
		/* 820861E8h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820861E8h case    8:*/		return 0x820861EC;
		  /* 820861ECh */ case    9:  		/* lwsync */
		/* 820861ECh case    9:*/		cpu::op::lwsync<0>(regs);
		/* 820861ECh case    9:*/		return 0x820861F0;
		  /* 820861F0h */ case   10:  		/* b 84 */
		/* 820861F0h case   10:*/		return 0x82086244;
		/* 820861F0h case   10:*/		return 0x820861F4;
	}
	return 0x820861F4;
} // Block from 820861C8h-820861F4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820861F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820861F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820861F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820861F4);
		  /* 820861F4h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 820861F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820861F4h case    0:*/		return 0x820861F8;
		  /* 820861F8h */ case    1:  		/* rlwinm. R10, R11, 0, 0, 0 */
		/* 820861F8h case    1:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R10,regs.R11);
		/* 820861F8h case    1:*/		return 0x820861FC;
		  /* 820861FCh */ case    2:  		/* bc 4, CR0_EQ, 100 */
		/* 820861FCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x82086260;  }
		/* 820861FCh case    2:*/		return 0x82086200;
		  /* 82086200h */ case    3:  		/* lwz R9, <#[R31 + 368]> */
		/* 82086200h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000170) );
		/* 82086200h case    3:*/		return 0x82086204;
		  /* 82086204h */ case    4:  		/* addi R5, R3, 4 */
		/* 82086204h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R3,0x4);
		/* 82086204h case    4:*/		return 0x82086208;
		  /* 82086208h */ case    5:  		/* lwz R8, <#[R31 + 364]> */
		/* 82086208h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000016C) );
		/* 82086208h case    5:*/		return 0x8208620C;
		  /* 8208620Ch */ case    6:  		/* rlwinm R10, R11, 16, 17, 31 */
		/* 8208620Ch case    6:*/		cpu::op::rlwinm<0,16,17,31>(regs,&regs.R10,regs.R11);
		/* 8208620Ch case    6:*/		return 0x82086210;
		  /* 82086210h */ case    7:  		/* and. R9, R9, R8 */
		/* 82086210h case    7:*/		cpu::op::and<1>(regs,&regs.R9,regs.R9,regs.R8);
		/* 82086210h case    7:*/		return 0x82086214;
		  /* 82086214h */ case    8:  		/* bc 4, CR0_EQ, 12 */
		/* 82086214h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82086220;  }
		/* 82086214h case    8:*/		return 0x82086218;
		  /* 82086218h */ case    9:  		/* add R3, R10, R5 */
		/* 82086218h case    9:*/		cpu::op::add<0>(regs,&regs.R3,regs.R10,regs.R5);
		/* 82086218h case    9:*/		return 0x8208621C;
		  /* 8208621Ch */ case   10:  		/* b -80 */
		/* 8208621Ch case   10:*/		return 0x820861CC;
		/* 8208621Ch case   10:*/		return 0x82086220;
	}
	return 0x82086220;
} // Block from 820861F4h-82086220h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82086220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086220);
		  /* 82086220h */ case    0:  		/* rlwinm R11, R11, 0, 16, 31 */
		/* 82086220h case    0:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R11);
		/* 82086220h case    0:*/		return 0x82086224;
		  /* 82086224h */ case    1:  		/* lwz R4, <#[R31 + 20]> */
		/* 82086224h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 82086224h case    1:*/		return 0x82086228;
		  /* 82086228h */ case    2:  		/* add R10, R10, R5 */
		/* 82086228h case    2:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R5);
		/* 82086228h case    2:*/		return 0x8208622C;
		  /* 8208622Ch */ case    3:  		/* stw R5, <#[R31 + 32]> */
		/* 8208622Ch case    3:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R31 + 0x00000020) );
		/* 8208622Ch case    3:*/		return 0x82086230;
		  /* 82086230h */ case    4:  		/* stw R28, <#[R31 + 24]> */
		/* 82086230h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000018) );
		/* 82086230h case    4:*/		return 0x82086234;
		  /* 82086234h */ case    5:  		/* stw R11, <#[R31 + 28]> */
		/* 82086234h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 82086234h case    5:*/		return 0x82086238;
		  /* 82086238h */ case    6:  		/* stw R10, <#[R31 + 36]> */
		/* 82086238h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000024) );
		/* 82086238h case    6:*/		return 0x8208623C;
		  /* 8208623Ch */ case    7:  		/* lwsync */
		/* 8208623Ch case    7:*/		cpu::op::lwsync<0>(regs);
		/* 8208623Ch case    7:*/		return 0x82086240;
		  /* 82086240h */ case    8:  		/* li R6, 0 */
		/* 82086240h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82086240h case    8:*/		return 0x82086244;
	}
	return 0x82086244;
} // Block from 82086220h-82086244h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82086244h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086244( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086244) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086244);
		  /* 82086244h */ case    0:  		/* stw R29, <#[R31]> */
		/* 82086244h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 82086244h case    0:*/		return 0x82086248;
		  /* 82086248h */ case    1:  		/* mr R3, R30 */
		/* 82086248h case    1:*/		regs.R3 = regs.R30;
		/* 82086248h case    1:*/		return 0x8208624C;
		  /* 8208624Ch */ case    2:  		/* lwz R11, <#[R31 + 16]> */
		/* 8208624Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8208624Ch case    2:*/		return 0x82086250;
		  /* 82086250h */ case    3:  		/* mtspr CTR, R11 */
		/* 82086250h case    3:*/		regs.CTR = regs.R11;
		/* 82086250h case    3:*/		return 0x82086254;
		  /* 82086254h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 82086254h case    4:*/		if ( 1 ) { regs.LR = 0x82086258; return (uint32)regs.CTR; }
		/* 82086254h case    4:*/		return 0x82086258;
		  /* 82086258h */ case    5:  		/* lwz R3, <#[R31 + 36]> */
		/* 82086258h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000024) );
		/* 82086258h case    5:*/		return 0x8208625C;
		  /* 8208625Ch */ case    6:  		/* b -144 */
		/* 8208625Ch case    6:*/		return 0x820861CC;
		/* 8208625Ch case    6:*/		return 0x82086260;
	}
	return 0x82086260;
} // Block from 82086244h-82086260h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82086260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086260);
		  /* 82086260h */ case    0:  		/* lis R10, -29440 */
		/* 82086260h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8D00);
		/* 82086260h case    0:*/		return 0x82086264;
		  /* 82086264h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 82086264h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82086264h case    1:*/		return 0x82086268;
		  /* 82086268h */ case    2:  		/* bc 4, CR6_EQ, 20 */
		/* 82086268h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8208627C;  }
		/* 82086268h case    2:*/		return 0x8208626C;
		  /* 8208626Ch */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 8208626Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8208626Ch case    3:*/		return 0x82086270;
		  /* 82086270h */ case    4:  		/* addi R3, R3, 8 */
		/* 82086270h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x8);
		/* 82086270h case    4:*/		return 0x82086274;
		  /* 82086274h */ case    5:  		/* stw R11, <#[R31 + 368]> */
		/* 82086274h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000170) );
		/* 82086274h case    5:*/		return 0x82086278;
		  /* 82086278h */ case    6:  		/* b -172 */
		/* 82086278h case    6:*/		return 0x820861CC;
		/* 82086278h case    6:*/		return 0x8208627C;
	}
	return 0x8208627C;
} // Block from 82086260h-8208627Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8208627Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208627C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208627C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208627C);
		  /* 8208627Ch */ case    0:  		/* lis R10, -29696 */
		/* 8208627Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8C00);
		/* 8208627Ch case    0:*/		return 0x82086280;
		  /* 82086280h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 82086280h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82086280h case    1:*/		return 0x82086284;
		  /* 82086284h */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 82086284h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820862A0;  }
		/* 82086284h case    2:*/		return 0x82086288;
		  /* 82086288h */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 82086288h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82086288h case    3:*/		return 0x8208628C;
		  /* 8208628Ch */ case    4:  		/* stw R11, <#[R31 + 16]> */
		/* 8208628Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8208628Ch case    4:*/		return 0x82086290;
		  /* 82086290h */ case    5:  		/* lwz R11, <#[R3 + 8]> */
		/* 82086290h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82086290h case    5:*/		return 0x82086294;
		  /* 82086294h */ case    6:  		/* addi R3, R3, 12 */
		/* 82086294h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0xC);
		/* 82086294h case    6:*/		return 0x82086298;
		  /* 82086298h */ case    7:  		/* stw R11, <#[R31 + 20]> */
		/* 82086298h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82086298h case    7:*/		return 0x8208629C;
		  /* 8208629Ch */ case    8:  		/* b -208 */
		/* 8208629Ch case    8:*/		return 0x820861CC;
		/* 8208629Ch case    8:*/		return 0x820862A0;
	}
	return 0x820862A0;
} // Block from 8208627Ch-820862A0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820862A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820862A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820862A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820862A0);
		  /* 820862A0h */ case    0:  		/* rlwinm R10, R11, 0, 0, 1 */
		/* 820862A0h case    0:*/		cpu::op::rlwinm<0,0,0,1>(regs,&regs.R10,regs.R11);
		/* 820862A0h case    0:*/		return 0x820862A4;
		  /* 820862A4h */ case    1:  		/* cmplw CR6, R10, R27 */
		/* 820862A4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R27);
		/* 820862A4h case    1:*/		return 0x820862A8;
		  /* 820862A8h */ case    2:  		/* bc 4, CR6_EQ, 48 */
		/* 820862A8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820862D8;  }
		/* 820862A8h case    2:*/		return 0x820862AC;
		  /* 820862ACh */ case    3:  		/* cmplw CR6, R11, R27 */
		/* 820862ACh case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 820862ACh case    3:*/		return 0x820862B0;
		  /* 820862B0h */ case    4:  		/* bc 4, CR6_EQ, 32 */
		/* 820862B0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820862D0;  }
		/* 820862B0h case    4:*/		return 0x820862B4;
		  /* 820862B4h */ case    5:  		/* mr R5, R3 */
		/* 820862B4h case    5:*/		regs.R5 = regs.R3;
		/* 820862B4h case    5:*/		return 0x820862B8;
		  /* 820862B8h */ case    6:  		/* mr R4, R30 */
		/* 820862B8h case    6:*/		regs.R4 = regs.R30;
		/* 820862B8h case    6:*/		return 0x820862BC;
		  /* 820862BCh */ case    7:  		/* mr R3, R31 */
		/* 820862BCh case    7:*/		regs.R3 = regs.R31;
		/* 820862BCh case    7:*/		return 0x820862C0;
		  /* 820862C0h */ case    8:  		/* bl -3328 */
		/* 820862C0h case    8:*/		regs.LR = 0x820862C4; return 0x820855C0;
		/* 820862C0h case    8:*/		return 0x820862C4;
		  /* 820862C4h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 820862C4h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820862C4h case    9:*/		return 0x820862C8;
		  /* 820862C8h */ case   10:  		/* bc 4, CR0_EQ, -252 */
		/* 820862C8h case   10:*/		if ( !regs.CR[0].eq ) { return 0x820861CC;  }
		/* 820862C8h case   10:*/		return 0x820862CC;
		  /* 820862CCh */ case   11:  		/* b -376 */
		/* 820862CCh case   11:*/		return 0x82086154;
		/* 820862CCh case   11:*/		return 0x820862D0;
	}
	return 0x820862D0;
} // Block from 820862A0h-820862D0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820862D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820862D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820862D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820862D0);
		  /* 820862D0h */ case    0:  		/* addi R3, R11, 4 */
		/* 820862D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x4);
		/* 820862D0h case    0:*/		return 0x820862D4;
		  /* 820862D4h */ case    1:  		/* b -264 */
		/* 820862D4h case    1:*/		return 0x820861CC;
		/* 820862D4h case    1:*/		return 0x820862D8;
	}
	return 0x820862D8;
} // Block from 820862D0h-820862D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820862D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820862D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820862D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820862D8);
		  /* 820862D8h */ case    0:  		/* lwz R11, <#[R31 + 108]> */
		/* 820862D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 820862D8h case    0:*/		return 0x820862DC;
		  /* 820862DCh */ case    1:  		/* stw R28, <#[R31 + 104]> */
		/* 820862DCh case    1:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000068) );
		/* 820862DCh case    1:*/		return 0x820862E0;
		  /* 820862E0h */ case    2:  		/* lwz R10, <#[R31 + 68]> */
		/* 820862E0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000044) );
		/* 820862E0h case    2:*/		return 0x820862E4;
		  /* 820862E4h */ case    3:  		/* addi R11, R11, 1 */
		/* 820862E4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820862E4h case    3:*/		return 0x820862E8;
		  /* 820862E8h */ case    4:  		/* stw R11, <#[R31 + 108]> */
		/* 820862E8h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 820862E8h case    4:*/		return 0x820862EC;
		  /* 820862ECh */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 820862ECh case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820862ECh case    5:*/		return 0x820862F0;
		  /* 820862F0h */ case    6:  		/* bc 12, CR6_EQ, 104 */
		/* 820862F0h case    6:*/		if ( regs.CR[6].eq ) { return 0x82086358;  }
		/* 820862F0h case    6:*/		return 0x820862F4;
		  /* 820862F4h */ case    7:  		/* stw R3, <#[R31 + 36]> */
		/* 820862F4h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000024) );
		/* 820862F4h case    7:*/		return 0x820862F8;
		  /* 820862F8h */ case    8:  		/* lwsync */
		/* 820862F8h case    8:*/		cpu::op::lwsync<0>(regs);
		/* 820862F8h case    8:*/		return 0x820862FC;
		  /* 820862FCh */ case    9:  		/* stw R29, <#[R31]> */
		/* 820862FCh case    9:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 820862FCh case    9:*/		return 0x82086300;
		  /* 82086300h */ case   10:  		/* b 8 */
		/* 82086300h case   10:*/		return 0x82086308;
		/* 82086300h case   10:*/		return 0x82086304;
		  /* 82086304h */ case   11:  		/* nop */
		/* 82086304h case   11:*/		cpu::op::nop();
		/* 82086304h case   11:*/		return 0x82086308;
	}
	return 0x82086308;
} // Block from 820862D8h-82086308h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82086308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086308);
		  /* 82086308h */ case    0:  		/* lwz R11, <#[R31 + 104]> */
		/* 82086308h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000068) );
		/* 82086308h case    0:*/		return 0x8208630C;
		  /* 8208630Ch */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8208630Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8208630Ch case    1:*/		return 0x82086310;
		  /* 82086310h */ case    2:  		/* bc 4, CR6_EQ, -12 */
		/* 82086310h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82086304;  }
		/* 82086310h case    2:*/		return 0x82086314;
		  /* 82086314h */ case    3:  		/* mfmsr R10, MSR */
		/* 82086314h case    3:*/		regs.R10 = regs.MSR;
		/* 82086314h case    3:*/		return 0x82086318;
		  /* 82086318h */ case    4:  		/* mtmsrd MSR, R13 */
		/* 82086318h case    4:*/		regs.MSR = regs.R13;
		/* 82086318h case    4:*/		return 0x8208631C;
		  /* 8208631Ch */ case    5:  		/* lwarx R11, <#[R31]> */
		/* 8208631Ch case    5:*/		cpu::mem::lwarx( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8208631Ch case    5:*/		return 0x82086320;
		  /* 82086320h */ case    6:  		/* cmpw CR6, R11, R29 */
		/* 82086320h case    6:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R29);
		/* 82086320h case    6:*/		return 0x82086324;
		  /* 82086324h */ case    7:  		/* bc 4, CR6_EQ, 20 */
		/* 82086324h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82086338;  }
		/* 82086324h case    7:*/		return 0x82086328;
		  /* 82086328h */ case    8:  		/* stwcx. R28, <#[R31]> */
		/* 82086328h case    8:*/		cpu::mem::stwcx( regs, regs.R28, (uint32)(regs.R31 + 0x00000000) );
		/* 82086328h case    8:*/		return 0x8208632C;
		  /* 8208632Ch */ case    9:  		/* mtmsrd MSR, R10 */
		/* 8208632Ch case    9:*/		regs.MSR = regs.R10;
		/* 8208632Ch case    9:*/		return 0x82086330;
		  /* 82086330h */ case   10:  		/* bc 4, CR0_EQ, -28 */
		/* 82086330h case   10:*/		if ( !regs.CR[0].eq ) { return 0x82086314;  }
		/* 82086330h case   10:*/		return 0x82086334;
		  /* 82086334h */ case   11:  		/* b 12 */
		/* 82086334h case   11:*/		return 0x82086340;
		/* 82086334h case   11:*/		return 0x82086338;
	}
	return 0x82086338;
} // Block from 82086308h-82086338h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82086338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086338);
		  /* 82086338h */ case    0:  		/* stwcx. R11, <#[R31]> */
		/* 82086338h case    0:*/		cpu::mem::stwcx( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82086338h case    0:*/		return 0x8208633C;
		  /* 8208633Ch */ case    1:  		/* mtmsrd MSR, R10 */
		/* 8208633Ch case    1:*/		regs.MSR = regs.R10;
		/* 8208633Ch case    1:*/		return 0x82086340;
	}
	return 0x82086340;
} // Block from 82086338h-82086340h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82086340h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086340( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086340) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086340);
		  /* 82086340h */ case    0:  		/* nop */
		/* 82086340h case    0:*/		cpu::op::nop();
		/* 82086340h case    0:*/		return 0x82086344;
		  /* 82086344h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 82086344h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82086344h case    1:*/		return 0x82086348;
		  /* 82086348h */ case    2:  		/* bc 4, CR6_EQ, -52 */
		/* 82086348h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82086314;  }
		/* 82086348h case    2:*/		return 0x8208634C;
		  /* 8208634Ch */ case    3:  		/* lwsync */
		/* 8208634Ch case    3:*/		cpu::op::lwsync<0>(regs);
		/* 8208634Ch case    3:*/		return 0x82086350;
		  /* 82086350h */ case    4:  		/* lwz R3, <#[R31 + 36]> */
		/* 82086350h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000024) );
		/* 82086350h case    4:*/		return 0x82086354;
		  /* 82086354h */ case    5:  		/* b 16 */
		/* 82086354h case    5:*/		return 0x82086364;
		/* 82086354h case    5:*/		return 0x82086358;
	}
	return 0x82086358;
} // Block from 82086340h-82086358h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82086358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086358);
		  /* 82086358h */ case    0:  		/* mr R4, R31 */
		/* 82086358h case    0:*/		regs.R4 = regs.R31;
		/* 82086358h case    0:*/		return 0x8208635C;
		  /* 8208635Ch */ case    1:  		/* bl -1556 */
		/* 8208635Ch case    1:*/		regs.LR = 0x82086360; return 0x82085D48;
		/* 8208635Ch case    1:*/		return 0x82086360;
		  /* 82086360h */ case    2:  		/* stw R29, <#[R31 + 104]> */
		/* 82086360h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000068) );
		/* 82086360h case    2:*/		return 0x82086364;
	}
	return 0x82086364;
} // Block from 82086358h-82086364h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82086364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086364);
		  /* 82086364h */ case    0:  		/* lwz R11, <#[R31 + 108]> */
		/* 82086364h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 82086364h case    0:*/		return 0x82086368;
		  /* 82086368h */ case    1:  		/* addi R11, R11, -1 */
		/* 82086368h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82086368h case    1:*/		return 0x8208636C;
		  /* 8208636Ch */ case    2:  		/* stw R11, <#[R31 + 108]> */
		/* 8208636Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8208636Ch case    2:*/		return 0x82086370;
		  /* 82086370h */ case    3:  		/* b -420 */
		/* 82086370h case    3:*/		return 0x820861CC;
		/* 82086370h case    3:*/		return 0x82086374;
		  /* 82086374h */ case    4:  		/* nop */
		/* 82086374h case    4:*/		cpu::op::nop();
		/* 82086374h case    4:*/		return 0x82086378;
	}
	return 0x82086378;
} // Block from 82086364h-82086378h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82086378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086378);
		  /* 82086378h */ case    0:  		/* mfspr R12, LR */
		/* 82086378h case    0:*/		regs.R12 = regs.LR;
		/* 82086378h case    0:*/		return 0x8208637C;
		  /* 8208637Ch */ case    1:  		/* bl 44744 */
		/* 8208637Ch case    1:*/		regs.LR = 0x82086380; return 0x82091244;
		/* 8208637Ch case    1:*/		return 0x82086380;
		  /* 82086380h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82086380h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82086380h case    2:*/		return 0x82086384;
		  /* 82086384h */ case    3:  		/* mr R28, R3 */
		/* 82086384h case    3:*/		regs.R28 = regs.R3;
		/* 82086384h case    3:*/		return 0x82086388;
		  /* 82086388h */ case    4:  		/* li R3, -2 */
		/* 82086388h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFE);
		/* 82086388h case    4:*/		return 0x8208638C;
		  /* 8208638Ch */ case    5:  		/* lwz R4, <#[R28 + 4]> */
		/* 8208638Ch case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000004) );
		/* 8208638Ch case    5:*/		return 0x82086390;
		  /* 82086390h */ case    6:  		/* bl 11120 */
		/* 82086390h case    6:*/		regs.LR = 0x82086394; return 0x82088F00;
		/* 82086390h case    6:*/		return 0x82086394;
		  /* 82086394h */ case    7:  		/* lis R24, -32256 */
		/* 82086394h case    7:*/		cpu::op::lis<0>(regs,&regs.R24,0xFFFF8200);
		/* 82086394h case    7:*/		return 0x82086398;
		  /* 82086398h */ case    8:  		/* lis R23, -32256 */
		/* 82086398h case    8:*/		cpu::op::lis<0>(regs,&regs.R23,0xFFFF8200);
		/* 82086398h case    8:*/		return 0x8208639C;
		  /* 8208639Ch */ case    9:  		/* lis R11, -5 */
		/* 8208639Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFB);
		/* 8208639Ch case    9:*/		return 0x820863A0;
		  /* 820863A0h */ case   10:  		/* lwz R25, <#[R28]> */
		/* 820863A0h case   10:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R28 + 0x00000000) );
		/* 820863A0h case   10:*/		return 0x820863A4;
		  /* 820863A4h */ case   11:  		/* lwz R10, <#[R28 + 4]> */
		/* 820863A4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000004) );
		/* 820863A4h case   11:*/		return 0x820863A8;
		  /* 820863A8h */ case   12:  		/* addi R9, R1, 80 */
		/* 820863A8h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 820863A8h case   12:*/		return 0x820863AC;
		  /* 820863ACh */ case   13:  		/* ori R11, R11, 27680 */
		/* 820863ACh case   13:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x6C20);
		/* 820863ACh case   13:*/		return 0x820863B0;
		  /* 820863B0h */ case   14:  		/* lwz R8, <#[R28 + 88]> */
		/* 820863B0h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000058) );
		/* 820863B0h case   14:*/		return 0x820863B4;
		  /* 820863B4h */ case   15:  		/* lwz R7, <#[R28 + 84]> */
		/* 820863B4h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R28 + 0x00000054) );
		/* 820863B4h case   15:*/		return 0x820863B8;
		  /* 820863B8h */ case   16:  		/* std R11, <#[R1 + 80]> */
		/* 820863B8h case   16:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 820863B8h case   16:*/		return 0x820863BC;
		  /* 820863BCh */ case   17:  		/* lwz R11, <#[R25 + 384]> */
		/* 820863BCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000180) );
		/* 820863BCh case   17:*/		return 0x820863C0;
		  /* 820863C0h */ case   18:  		/* subf R11, R10, R11 */
		/* 820863C0h case   18:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 820863C0h case   18:*/		return 0x820863C4;
		  /* 820863C4h */ case   19:  		/* addic R11, R11, -1 */
		/* 820863C4h case   19:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820863C4h case   19:*/		return 0x820863C8;
		  /* 820863C8h */ case   20:  		/* cmplw CR6, R8, R7 */
		/* 820863C8h case   20:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 820863C8h case   20:*/		return 0x820863CC;
		  /* 820863CCh */ case   21:  		/* subfe R11, R11, R11 */
		/* 820863CCh case   21:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 820863CCh case   21:*/		return 0x820863D0;
		  /* 820863D0h */ case   22:  		/* and R26, R11, R9 */
		/* 820863D0h case   22:*/		cpu::op::and<0>(regs,&regs.R26,regs.R11,regs.R9);
		/* 820863D0h case   22:*/		return 0x820863D4;
		  /* 820863D4h */ case   23:  		/* bc 4, CR6_EQ, 280 */
		/* 820863D4h case   23:*/		if ( !regs.CR[6].eq ) { return 0x820864EC;  }
		/* 820863D4h case   23:*/		return 0x820863D8;
		  /* 820863D8h */ case   24:  		/* addi R30, R25, 44 */
		/* 820863D8h case   24:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R25,0x2C);
		/* 820863D8h case   24:*/		return 0x820863DC;
		  /* 820863DCh */ case   25:  		/* mfmsr R10, MSR */
		/* 820863DCh case   25:*/		regs.R10 = regs.MSR;
		/* 820863DCh case   25:*/		return 0x820863E0;
		  /* 820863E0h */ case   26:  		/* mtmsrd MSR, R13 */
		/* 820863E0h case   26:*/		regs.MSR = regs.R13;
		/* 820863E0h case   26:*/		return 0x820863E4;
		  /* 820863E4h */ case   27:  		/* lwarx R11, <#[R30]> */
		/* 820863E4h case   27:*/		cpu::mem::lwarx( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 820863E4h case   27:*/		return 0x820863E8;
		  /* 820863E8h */ case   28:  		/* addi R11, R11, 1 */
		/* 820863E8h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820863E8h case   28:*/		return 0x820863EC;
		  /* 820863ECh */ case   29:  		/* stwcx. R11, <#[R30]> */
		/* 820863ECh case   29:*/		cpu::mem::stwcx( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 820863ECh case   29:*/		return 0x820863F0;
		  /* 820863F0h */ case   30:  		/* mtmsrd MSR, R10 */
		/* 820863F0h case   30:*/		regs.MSR = regs.R10;
		/* 820863F0h case   30:*/		return 0x820863F4;
		  /* 820863F4h */ case   31:  		/* bc 4, CR0_EQ, -24 */
		/* 820863F4h case   31:*/		if ( !regs.CR[0].eq ) { return 0x820863DC;  }
		/* 820863F4h case   31:*/		return 0x820863F8;
		  /* 820863F8h */ case   32:  		/* addi R27, R28, 60 */
		/* 820863F8h case   32:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R28,0x3C);
		/* 820863F8h case   32:*/		return 0x820863FC;
		  /* 820863FCh */ case   33:  		/* mr R7, R26 */
		/* 820863FCh case   33:*/		regs.R7 = regs.R26;
		/* 820863FCh case   33:*/		return 0x82086400;
		  /* 82086400h */ case   34:  		/* li R6, 0 */
		/* 82086400h case   34:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82086400h case   34:*/		return 0x82086404;
		  /* 82086404h */ case   35:  		/* li R5, 1 */
		/* 82086404h case   35:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82086404h case   35:*/		return 0x82086408;
		  /* 82086408h */ case   36:  		/* li R4, 3 */
		/* 82086408h case   36:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 82086408h case   36:*/		return 0x8208640C;
		  /* 8208640Ch */ case   37:  		/* mr R3, R27 */
		/* 8208640Ch case   37:*/		regs.R3 = regs.R27;
		/* 8208640Ch case   37:*/		return 0x82086410;
		  /* 82086410h */ case   38:  		/* bl 1994008 */
		/* 82086410h case   38:*/		regs.LR = 0x82086414; return 0x8226D128;
		/* 82086410h case   38:*/		return 0x82086414;
		  /* 82086414h */ case   39:  		/* mfmsr R10, MSR */
		/* 82086414h case   39:*/		regs.R10 = regs.MSR;
		/* 82086414h case   39:*/		return 0x82086418;
		  /* 82086418h */ case   40:  		/* mtmsrd MSR, R13 */
		/* 82086418h case   40:*/		regs.MSR = regs.R13;
		/* 82086418h case   40:*/		return 0x8208641C;
		  /* 8208641Ch */ case   41:  		/* lwarx R11, <#[R30]> */
		/* 8208641Ch case   41:*/		cpu::mem::lwarx( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8208641Ch case   41:*/		return 0x82086420;
		  /* 82086420h */ case   42:  		/* addi R11, R11, -1 */
		/* 82086420h case   42:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82086420h case   42:*/		return 0x82086424;
		  /* 82086424h */ case   43:  		/* stwcx. R11, <#[R30]> */
		/* 82086424h case   43:*/		cpu::mem::stwcx( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82086424h case   43:*/		return 0x82086428;
		  /* 82086428h */ case   44:  		/* mtmsrd MSR, R10 */
		/* 82086428h case   44:*/		regs.MSR = regs.R10;
		/* 82086428h case   44:*/		return 0x8208642C;
		  /* 8208642Ch */ case   45:  		/* bc 4, CR0_EQ, -24 */
		/* 8208642Ch case   45:*/		if ( !regs.CR[0].eq ) { return 0x82086414;  }
		/* 8208642Ch case   45:*/		return 0x82086430;
		  /* 82086430h */ case   46:  		/* b 180 */
		/* 82086430h case   46:*/		return 0x820864E4;
		/* 82086430h case   46:*/		return 0x82086434;
		  /* 82086434h */ case   47:  		/* bl 1993412 */
		/* 82086434h case   47:*/		regs.LR = 0x82086438; return 0x8226CEF8;
		/* 82086434h case   47:*/		return 0x82086438;
		  /* 82086438h */ case   48:  		/* cmpwi CR6, R3, 2 */
		/* 82086438h case   48:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 82086438h case   48:*/		return 0x8208643C;
		  /* 8208643Ch */ case   49:  		/* bc 4, CR6_EQ, 12 */
		/* 8208643Ch case   49:*/		if ( !regs.CR[6].eq ) { return 0x82086448;  }
		/* 8208643Ch case   49:*/		return 0x82086440;
		  /* 82086440h */ case   50:  		/* lwz R11, <#[R23 + 1452]> */
		/* 82086440h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x000005AC) );
		/* 82086440h case   50:*/		return 0x82086444;
		  /* 82086444h */ case   51:  		/* b 8 */
		/* 82086444h case   51:*/		return 0x8208644C;
		/* 82086444h case   51:*/		return 0x82086448;
	}
	return 0x82086448;
} // Block from 82086378h-82086448h (52 instructions)

//////////////////////////////////////////////////////
// Block at 82086448h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086448);
		  /* 82086448h */ case    0:  		/* lwz R11, <#[R24 + 1456]> */
		/* 82086448h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x000005B0) );
		/* 82086448h case    0:*/		return 0x8208644C;
	}
	return 0x8208644C;
} // Block from 82086448h-8208644Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8208644Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208644C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208644C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208644C);
		  /* 8208644Ch */ case    0:  		/* lwz R31, <#[R11]> */
		/* 8208644Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 8208644Ch case    0:*/		return 0x82086450;
		  /* 82086450h */ case    1:  		/* addi R29, R31, 15348 */
		/* 82086450h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x3BF4);
		/* 82086450h case    1:*/		return 0x82086454;
		  /* 82086454h */ case    2:  		/* mr R3, R29 */
		/* 82086454h case    2:*/		regs.R3 = regs.R29;
		/* 82086454h case    2:*/		return 0x82086458;
		  /* 82086458h */ case    3:  		/* bl 1993696 */
		/* 82086458h case    3:*/		regs.LR = 0x8208645C; return 0x8226D038;
		/* 82086458h case    3:*/		return 0x8208645C;
		  /* 8208645Ch */ case    4:  		/* lbz R11, <#[R31 + 11070]> */
		/* 8208645Ch case    4:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B3E) );
		/* 8208645Ch case    4:*/		return 0x82086460;
		  /* 82086460h */ case    5:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 82086460h case    5:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 82086460h case    5:*/		return 0x82086464;
		  /* 82086464h */ case    6:  		/* bc 12, CR0_EQ, 40 */
		/* 82086464h case    6:*/		if ( regs.CR[0].eq ) { return 0x8208648C;  }
		/* 82086464h case    6:*/		return 0x82086468;
		  /* 82086468h */ case    7:  		/* lwz R11, <#[R31 + 24584]> */
		/* 82086468h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00006008) );
		/* 82086468h case    7:*/		return 0x8208646C;
		  /* 8208646Ch */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 8208646Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8208646Ch case    8:*/		return 0x82086470;
		  /* 82086470h */ case    9:  		/* bc 4, CR6_EQ, 12 */
		/* 82086470h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8208647C;  }
		/* 82086470h case    9:*/		return 0x82086474;
		  /* 82086474h */ case   10:  		/* mr R3, R31 */
		/* 82086474h case   10:*/		regs.R3 = regs.R31;
		/* 82086474h case   10:*/		return 0x82086478;
		  /* 82086478h */ case   11:  		/* bl -95904 */
		/* 82086478h case   11:*/		regs.LR = 0x8208647C; return 0x8206EDD8;
		/* 82086478h case   11:*/		return 0x8208647C;
	}
	return 0x8208647C;
} // Block from 8208644Ch-8208647Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8208647Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208647C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208647C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208647C);
		  /* 8208647Ch */ case    0:  		/* li R5, 0 */
		/* 8208647Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8208647Ch case    0:*/		return 0x82086480;
		  /* 82086480h */ case    1:  		/* addi R4, R31, 15248 */
		/* 82086480h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x3B90);
		/* 82086480h case    1:*/		return 0x82086484;
		  /* 82086484h */ case    2:  		/* mr R3, R31 */
		/* 82086484h case    2:*/		regs.R3 = regs.R31;
		/* 82086484h case    2:*/		return 0x82086488;
		  /* 82086488h */ case    3:  		/* bl -95912 */
		/* 82086488h case    3:*/		regs.LR = 0x8208648C; return 0x8206EDE0;
		/* 82086488h case    3:*/		return 0x8208648C;
	}
	return 0x8208648C;
} // Block from 8208647Ch-8208648Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8208648Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208648C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208648C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208648C);
		  /* 8208648Ch */ case    0:  		/* mr R3, R29 */
		/* 8208648Ch case    0:*/		regs.R3 = regs.R29;
		/* 8208648Ch case    0:*/		return 0x82086490;
		  /* 82086490h */ case    1:  		/* bl 1993624 */
		/* 82086490h case    1:*/		regs.LR = 0x82086494; return 0x8226D028;
		/* 82086490h case    1:*/		return 0x82086494;
		  /* 82086494h */ case    2:  		/* mfmsr R10, MSR */
		/* 82086494h case    2:*/		regs.R10 = regs.MSR;
		/* 82086494h case    2:*/		return 0x82086498;
		  /* 82086498h */ case    3:  		/* mtmsrd MSR, R13 */
		/* 82086498h case    3:*/		regs.MSR = regs.R13;
		/* 82086498h case    3:*/		return 0x8208649C;
		  /* 8208649Ch */ case    4:  		/* lwarx R11, <#[R30]> */
		/* 8208649Ch case    4:*/		cpu::mem::lwarx( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8208649Ch case    4:*/		return 0x820864A0;
		  /* 820864A0h */ case    5:  		/* addi R11, R11, 1 */
		/* 820864A0h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820864A0h case    5:*/		return 0x820864A4;
		  /* 820864A4h */ case    6:  		/* stwcx. R11, <#[R30]> */
		/* 820864A4h case    6:*/		cpu::mem::stwcx( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 820864A4h case    6:*/		return 0x820864A8;
		  /* 820864A8h */ case    7:  		/* mtmsrd MSR, R10 */
		/* 820864A8h case    7:*/		regs.MSR = regs.R10;
		/* 820864A8h case    7:*/		return 0x820864AC;
		  /* 820864ACh */ case    8:  		/* bc 4, CR0_EQ, -24 */
		/* 820864ACh case    8:*/		if ( !regs.CR[0].eq ) { return 0x82086494;  }
		/* 820864ACh case    8:*/		return 0x820864B0;
		  /* 820864B0h */ case    9:  		/* mr R7, R26 */
		/* 820864B0h case    9:*/		regs.R7 = regs.R26;
		/* 820864B0h case    9:*/		return 0x820864B4;
		  /* 820864B4h */ case   10:  		/* li R6, 0 */
		/* 820864B4h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 820864B4h case   10:*/		return 0x820864B8;
		  /* 820864B8h */ case   11:  		/* li R5, 1 */
		/* 820864B8h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 820864B8h case   11:*/		return 0x820864BC;
		  /* 820864BCh */ case   12:  		/* li R4, 3 */
		/* 820864BCh case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 820864BCh case   12:*/		return 0x820864C0;
		  /* 820864C0h */ case   13:  		/* mr R3, R27 */
		/* 820864C0h case   13:*/		regs.R3 = regs.R27;
		/* 820864C0h case   13:*/		return 0x820864C4;
		  /* 820864C4h */ case   14:  		/* bl 1993828 */
		/* 820864C4h case   14:*/		regs.LR = 0x820864C8; return 0x8226D128;
		/* 820864C4h case   14:*/		return 0x820864C8;
		  /* 820864C8h */ case   15:  		/* mfmsr R10, MSR */
		/* 820864C8h case   15:*/		regs.R10 = regs.MSR;
		/* 820864C8h case   15:*/		return 0x820864CC;
		  /* 820864CCh */ case   16:  		/* mtmsrd MSR, R13 */
		/* 820864CCh case   16:*/		regs.MSR = regs.R13;
		/* 820864CCh case   16:*/		return 0x820864D0;
		  /* 820864D0h */ case   17:  		/* lwarx R11, <#[R30]> */
		/* 820864D0h case   17:*/		cpu::mem::lwarx( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 820864D0h case   17:*/		return 0x820864D4;
		  /* 820864D4h */ case   18:  		/* addi R11, R11, -1 */
		/* 820864D4h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 820864D4h case   18:*/		return 0x820864D8;
		  /* 820864D8h */ case   19:  		/* stwcx. R11, <#[R30]> */
		/* 820864D8h case   19:*/		cpu::mem::stwcx( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 820864D8h case   19:*/		return 0x820864DC;
		  /* 820864DCh */ case   20:  		/* mtmsrd MSR, R10 */
		/* 820864DCh case   20:*/		regs.MSR = regs.R10;
		/* 820864DCh case   20:*/		return 0x820864E0;
		  /* 820864E0h */ case   21:  		/* bc 4, CR0_EQ, -24 */
		/* 820864E0h case   21:*/		if ( !regs.CR[0].eq ) { return 0x820864C8;  }
		/* 820864E0h case   21:*/		return 0x820864E4;
	}
	return 0x820864E4;
} // Block from 8208648Ch-820864E4h (22 instructions)

//////////////////////////////////////////////////////
// Block at 820864E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820864E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820864E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820864E4);
		  /* 820864E4h */ case    0:  		/* cmplwi CR6, R3, 258 */
		/* 820864E4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000102);
		/* 820864E4h case    0:*/		return 0x820864E8;
		  /* 820864E8h */ case    1:  		/* bc 12, CR6_EQ, -180 */
		/* 820864E8h case    1:*/		if ( regs.CR[6].eq ) { return 0x82086434;  }
		/* 820864E8h case    1:*/		return 0x820864EC;
	}
	return 0x820864EC;
} // Block from 820864E4h-820864ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 820864ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820864EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820864EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820864EC);
		  /* 820864ECh */ case    0:  		/* addi R3, R28, 60 */
		/* 820864ECh case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R28,0x3C);
		/* 820864ECh case    0:*/		return 0x820864F0;
		  /* 820864F0h */ case    1:  		/* bl 1993768 */
		/* 820864F0h case    1:*/		regs.LR = 0x820864F4; return 0x8226D118;
		/* 820864F0h case    1:*/		return 0x820864F4;
		  /* 820864F4h */ case    2:  		/* lwz R11, <#[R25 + 4]> */
		/* 820864F4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 820864F4h case    2:*/		return 0x820864F8;
		  /* 820864F8h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 820864F8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820864F8h case    3:*/		return 0x820864FC;
		  /* 820864FCh */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 820864FCh case    4:*/		if ( regs.CR[6].eq ) { return 0x8208650C;  }
		/* 820864FCh case    4:*/		return 0x82086500;
		  /* 82086500h */ case    5:  		/* mr R3, R28 */
		/* 82086500h case    5:*/		regs.R3 = regs.R28;
		/* 82086500h case    5:*/		return 0x82086504;
		  /* 82086504h */ case    6:  		/* bl -1100 */
		/* 82086504h case    6:*/		regs.LR = 0x82086508; return 0x820860B8;
		/* 82086504h case    6:*/		return 0x82086508;
		  /* 82086508h */ case    7:  		/* b -364 */
		/* 82086508h case    7:*/		return 0x8208639C;
		/* 82086508h case    7:*/		return 0x8208650C;
	}
	return 0x8208650C;
} // Block from 820864ECh-8208650Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8208650Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208650C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208650C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208650C);
		  /* 8208650Ch */ case    0:  		/* li R3, 0 */
		/* 8208650Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8208650Ch case    0:*/		return 0x82086510;
		  /* 82086510h */ case    1:  		/* addi R1, R1, 176 */
		/* 82086510h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82086510h case    1:*/		return 0x82086514;
		  /* 82086514h */ case    2:  		/* b 44416 */
		/* 82086514h case    2:*/		return 0x82091294;
		/* 82086514h case    2:*/		return 0x82086518;
	}
	return 0x82086518;
} // Block from 8208650Ch-82086518h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82086518h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086518);
		  /* 82086518h */ case    0:  		/* mfspr R12, LR */
		/* 82086518h case    0:*/		regs.R12 = regs.LR;
		/* 82086518h case    0:*/		return 0x8208651C;
		  /* 8208651Ch */ case    1:  		/* bl 44344 */
		/* 8208651Ch case    1:*/		regs.LR = 0x82086520; return 0x82091254;
		/* 8208651Ch case    1:*/		return 0x82086520;
		  /* 82086520h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82086520h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82086520h case    2:*/		return 0x82086524;
		  /* 82086524h */ case    3:  		/* mr R30, R4 */
		/* 82086524h case    3:*/		regs.R30 = regs.R4;
		/* 82086524h case    3:*/		return 0x82086528;
		  /* 82086528h */ case    4:  		/* mr R27, R3 */
		/* 82086528h case    4:*/		regs.R27 = regs.R3;
		/* 82086528h case    4:*/		return 0x8208652C;
		  /* 8208652Ch */ case    5:  		/* mr R29, R5 */
		/* 8208652Ch case    5:*/		regs.R29 = regs.R5;
		/* 8208652Ch case    5:*/		return 0x82086530;
		  /* 82086530h */ case    6:  		/* mr R4, R3 */
		/* 82086530h case    6:*/		regs.R4 = regs.R3;
		/* 82086530h case    6:*/		return 0x82086534;
		  /* 82086534h */ case    7:  		/* li R5, 128 */
		/* 82086534h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x80);
		/* 82086534h case    7:*/		return 0x82086538;
		  /* 82086538h */ case    8:  		/* mr R3, R6 */
		/* 82086538h case    8:*/		regs.R3 = regs.R6;
		/* 82086538h case    8:*/		return 0x8208653C;
		  /* 8208653Ch */ case    9:  		/* mr R31, R6 */
		/* 8208653Ch case    9:*/		regs.R31 = regs.R6;
		/* 8208653Ch case    9:*/		return 0x82086540;
		  /* 82086540h */ case   10:  		/* mr R28, R7 */
		/* 82086540h case   10:*/		regs.R28 = regs.R7;
		/* 82086540h case   10:*/		return 0x82086544;
		  /* 82086544h */ case   11:  		/* bl -75676 */
		/* 82086544h case   11:*/		regs.LR = 0x82086548; return 0x82073DA8;
		/* 82086544h case   11:*/		return 0x82086548;
		  /* 82086548h */ case   12:  		/* lwz R3, <#[R31 + 12]> */
		/* 82086548h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 82086548h case   12:*/		return 0x8208654C;
		  /* 8208654Ch */ case   13:  		/* lwz R10, <#[R31 + 16]> */
		/* 8208654Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8208654Ch case   13:*/		return 0x82086550;
	}
	return 0x82086550;
} // Block from 82086518h-82086550h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82086550h
// Function '?CreateFontShaders@Font@ATG@@AAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086550);
		  /* 82086550h */ case    0:  		/* addi R11, R3, 8 */
		/* 82086550h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x8);
		/* 82086550h case    0:*/		return 0x82086554;
		  /* 82086554h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 82086554h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82086554h case    1:*/		return 0x82086558;
		  /* 82086558h */ case    2:  		/* bc 4, CR6_GT, 12 */
		/* 82086558h case    2:*/		if ( !regs.CR[6].gt ) { return 0x82086564;  }
		/* 82086558h case    2:*/		return 0x8208655C;
		  /* 8208655Ch */ case    3:  		/* mr R3, R31 */
		/* 8208655Ch case    3:*/		regs.R3 = regs.R31;
		/* 8208655Ch case    3:*/		return 0x82086560;
		  /* 82086560h */ case    4:  		/* bl -76584 */
		/* 82086560h case    4:*/		regs.LR = 0x82086564; return 0x82073A38;
		/* 82086560h case    4:*/		return 0x82086564;
	}
	return 0x82086564;
} // Block from 82086550h-82086564h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82086564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086564);
		  /* 82086564h */ case    0:  		/* or R11, R29, R28 */
		/* 82086564h case    0:*/		cpu::op::or<0>(regs,&regs.R11,regs.R29,regs.R28);
		/* 82086564h case    0:*/		return 0x82086568;
		  /* 82086568h */ case    1:  		/* stw R30, <#[R3 + 4]> */
		/* 82086568h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000004) );
		/* 82086568h case    1:*/		return 0x8208656C;
		  /* 8208656Ch */ case    2:  		/* addi R10, R3, 8 */
		/* 8208656Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0x8);
		/* 8208656Ch case    2:*/		return 0x82086570;
		  /* 82086570h */ case    3:  		/* stw R11, <#[R3]> */
		/* 82086570h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82086570h case    3:*/		return 0x82086574;
		  /* 82086574h */ case    4:  		/* mr R3, R31 */
		/* 82086574h case    4:*/		regs.R3 = regs.R31;
		/* 82086574h case    4:*/		return 0x82086578;
		  /* 82086578h */ case    5:  		/* stw R10, <#[R31 + 12]> */
		/* 82086578h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 82086578h case    5:*/		return 0x8208657C;
		  /* 8208657Ch */ case    6:  		/* bl -79652 */
		/* 8208657Ch case    6:*/		regs.LR = 0x82086580; return 0x82072E58;
		/* 8208657Ch case    6:*/		return 0x82086580;
		  /* 82086580h */ case    7:  		/* lwz R11, <#[R31]> */
		/* 82086580h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82086580h case    7:*/		return 0x82086584;
		  /* 82086584h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 82086584h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82086584h case    8:*/		return 0x82086588;
		  /* 82086588h */ case    9:  		/* bc 4, CR6_EQ, 12 */
		/* 82086588h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82086594;  }
		/* 82086588h case    9:*/		return 0x8208658C;
		  /* 8208658Ch */ case   10:  		/* li R4, 0 */
		/* 8208658Ch case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8208658Ch case   10:*/		return 0x82086590;
		  /* 82086590h */ case   11:  		/* b 28 */
		/* 82086590h case   11:*/		return 0x820865AC;
		/* 82086590h case   11:*/		return 0x82086594;
	}
	return 0x82086594;
} // Block from 82086564h-82086594h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82086594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086594);
		  /* 82086594h */ case    0:  		/* rlwinm R9, R11, 12, 20, 31 */
		/* 82086594h case    0:*/		cpu::op::rlwinm<0,12,20,31>(regs,&regs.R9,regs.R11);
		/* 82086594h case    0:*/		return 0x82086598;
		  /* 82086598h */ case    1:  		/* rlwinm R10, R11, 0, 3, 31 */
		/* 82086598h case    1:*/		cpu::op::rlwinm<0,0,3,31>(regs,&regs.R10,regs.R11);
		/* 82086598h case    1:*/		return 0x8208659C;
		  /* 8208659Ch */ case    2:  		/* addi R11, R9, 512 */
		/* 8208659Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R9,0x200);
		/* 8208659Ch case    2:*/		return 0x820865A0;
		  /* 820865A0h */ case    3:  		/* rlwinm R11, R11, 0, 19, 19 */
		/* 820865A0h case    3:*/		cpu::op::rlwinm<0,0,19,19>(regs,&regs.R11,regs.R11);
		/* 820865A0h case    3:*/		return 0x820865A4;
		  /* 820865A4h */ case    4:  		/* add R11, R11, R10 */
		/* 820865A4h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 820865A4h case    4:*/		return 0x820865A8;
		  /* 820865A8h */ case    5:  		/* addis R4, R11, -16384 */
		/* 820865A8h case    5:*/		cpu::op::addis<0>(regs,&regs.R4,regs.R11,0xFFFFC000);
		/* 820865A8h case    5:*/		return 0x820865AC;
	}
	return 0x820865AC;
} // Block from 82086594h-820865ACh (6 instructions)

//////////////////////////////////////////////////////
// Block at 820865ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820865AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820865AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820865AC);
		  /* 820865ACh */ case    0:  		/* lwz R11, <#[R27 + 11464]> */
		/* 820865ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00002CC8) );
		/* 820865ACh case    0:*/		return 0x820865B0;
		  /* 820865B0h */ case    1:  		/* li R5, 0 */
		/* 820865B0h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820865B0h case    1:*/		return 0x820865B4;
		  /* 820865B4h */ case    2:  		/* mulli R11, R11, 108 */
		/* 820865B4h case    2:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x6C);
		/* 820865B4h case    2:*/		return 0x820865B8;
		  /* 820865B8h */ case    3:  		/* add R11, R11, R27 */
		/* 820865B8h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 820865B8h case    3:*/		return 0x820865BC;
		  /* 820865BCh */ case    4:  		/* addi R3, R11, 11608 */
		/* 820865BCh case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x2D58);
		/* 820865BCh case    4:*/		return 0x820865C0;
		  /* 820865C0h */ case    5:  		/* bl 1993208 */
		/* 820865C0h case    5:*/		regs.LR = 0x820865C4; return 0x8226CFB8;
		/* 820865C0h case    5:*/		return 0x820865C4;
		  /* 820865C4h */ case    6:  		/* addi R1, R1, 128 */
		/* 820865C4h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820865C4h case    6:*/		return 0x820865C8;
		  /* 820865C8h */ case    7:  		/* b 44252 */
		/* 820865C8h case    7:*/		return 0x820912A4;
		/* 820865C8h case    7:*/		return 0x820865CC;
		  /* 820865CCh */ case    8:  		/* nop */
		/* 820865CCh case    8:*/		cpu::op::nop();
		/* 820865CCh case    8:*/		return 0x820865D0;
	}
	return 0x820865D0;
} // Block from 820865ACh-820865D0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820865D0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820865D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820865D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820865D0);
		  /* 820865D0h */ case    0:  		/* mfspr R12, LR */
		/* 820865D0h case    0:*/		regs.R12 = regs.LR;
		/* 820865D0h case    0:*/		return 0x820865D4;
		  /* 820865D4h */ case    1:  		/* bl 44144 */
		/* 820865D4h case    1:*/		regs.LR = 0x820865D8; return 0x82091244;
		/* 820865D4h case    1:*/		return 0x820865D8;
		  /* 820865D8h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 820865D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 820865D8h case    2:*/		return 0x820865DC;
		  /* 820865DCh */ case    3:  		/* lwz R11, <#[R3 + 24392]> */
		/* 820865DCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00005F48) );
		/* 820865DCh case    3:*/		return 0x820865E0;
		  /* 820865E0h */ case    4:  		/* mr R31, R3 */
		/* 820865E0h case    4:*/		regs.R31 = regs.R3;
		/* 820865E0h case    4:*/		return 0x820865E4;
		  /* 820865E4h */ case    5:  		/* rlwinm. R11, R11, 0, 23, 23 */
		/* 820865E4h case    5:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R11);
		/* 820865E4h case    5:*/		return 0x820865E8;
		  /* 820865E8h */ case    6:  		/* bc 4, CR0_EQ, 464 */
		/* 820865E8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x820867B8;  }
		/* 820865E8h case    6:*/		return 0x820865EC;
		  /* 820865ECh */ case    7:  		/* lis R4, -19072 */
		/* 820865ECh case    7:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB580);
		/* 820865ECh case    7:*/		return 0x820865F0;
		  /* 820865F0h */ case    8:  		/* li R3, 200 */
		/* 820865F0h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0xC8);
		/* 820865F0h case    8:*/		return 0x820865F4;
		  /* 820865F4h */ case    9:  		/* bl 7180 */
		/* 820865F4h case    9:*/		regs.LR = 0x820865F8; return 0x82088200;
		/* 820865F4h case    9:*/		return 0x820865F8;
		  /* 820865F8h */ case   10:  		/* stw R3, <#[R31 + 12224]> */
		/* 820865F8h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00002FC0) );
		/* 820865F8h case   10:*/		return 0x820865FC;
		  /* 820865FCh */ case   11:  		/* cmplwi CR0, R3, 0 */
		/* 820865FCh case   11:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 820865FCh case   11:*/		return 0x82086600;
		  /* 82086600h */ case   12:  		/* bc 4, CR0_EQ, 12 */
		/* 82086600h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8208660C;  }
		/* 82086600h case   12:*/		return 0x82086604;
		  /* 82086604h */ case   13:  		/* li R3, 0 */
		/* 82086604h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82086604h case   13:*/		return 0x82086608;
		  /* 82086608h */ case   14:  		/* b 436 */
		/* 82086608h case   14:*/		return 0x820867BC;
		/* 82086608h case   14:*/		return 0x8208660C;
	}
	return 0x8208660C;
} // Block from 820865D0h-8208660Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8208660Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208660C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208660C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208660C);
		  /* 8208660Ch */ case    0:  		/* lis R4, -19072 */
		/* 8208660Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFB580);
		/* 8208660Ch case    0:*/		return 0x82086610;
		  /* 82086610h */ case    1:  		/* li R3, 148 */
		/* 82086610h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x94);
		/* 82086610h case    1:*/		return 0x82086614;
		  /* 82086614h */ case    2:  		/* bl 7148 */
		/* 82086614h case    2:*/		regs.LR = 0x82086618; return 0x82088200;
		/* 82086614h case    2:*/		return 0x82086618;
		  /* 82086618h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 82086618h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82086618h case    3:*/		return 0x8208661C;
		  /* 8208661Ch */ case    4:  		/* stw R3, <#[R31 + 11128]> */
		/* 8208661Ch case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00002B78) );
		/* 8208661Ch case    4:*/		return 0x82086620;
		  /* 82086620h */ case    5:  		/* bc 12, CR0_EQ, -28 */
		/* 82086620h case    5:*/		if ( regs.CR[0].eq ) { return 0x82086604;  }
		/* 82086620h case    5:*/		return 0x82086624;
		  /* 82086624h */ case    6:  		/* lis R11, -32248 */
		/* 82086624h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8208);
		/* 82086624h case    6:*/		return 0x82086628;
		  /* 82086628h */ case    7:  		/* addi R4, R3, -4 */
		/* 82086628h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R3,0xFFFFFFFC);
		/* 82086628h case    7:*/		return 0x8208662C;
		  /* 8208662Ch */ case    8:  		/* mr R7, R31 */
		/* 8208662Ch case    8:*/		regs.R7 = regs.R31;
		/* 8208662Ch case    8:*/		return 0x82086630;
		  /* 82086630h */ case    9:  		/* addi R6, R11, -9336 */
		/* 82086630h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFDB88);
		/* 82086630h case    9:*/		return 0x82086634;
		  /* 82086634h */ case   10:  		/* li R5, 6 */
		/* 82086634h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 82086634h case   10:*/		return 0x82086638;
		  /* 82086638h */ case   11:  		/* mr R3, R31 */
		/* 82086638h case   11:*/		regs.R3 = regs.R31;
		/* 82086638h case   11:*/		return 0x8208663C;
		  /* 8208663Ch */ case   12:  		/* bl -77444 */
		/* 8208663Ch case   12:*/		regs.LR = 0x82086640; return 0x820737B8;
		/* 8208663Ch case   12:*/		return 0x82086640;
		  /* 82086640h */ case   13:  		/* lwz R11, <#[R31 + 11128]> */
		/* 82086640h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B78) );
		/* 82086640h case   13:*/		return 0x82086644;
		  /* 82086644h */ case   14:  		/* lis R7, 32712 */
		/* 82086644h case   14:*/		cpu::op::lis<0>(regs,&regs.R7,0x7FC8);
		/* 82086644h case   14:*/		return 0x82086648;
		  /* 82086648h */ case   15:  		/* lwz R9, <#[R31 + 24392]> */
		/* 82086648h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00005F48) );
		/* 82086648h case   15:*/		return 0x8208664C;
		  /* 8208664Ch */ case   16:  		/* subf R10, R11, R3 */
		/* 8208664Ch case   16:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R3);
		/* 8208664Ch case   16:*/		return 0x82086650;
		  /* 82086650h */ case   17:  		/* li R11, 6 */
		/* 82086650h case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 82086650h case   17:*/		return 0x82086654;
		  /* 82086654h */ case   18:  		/* addi R10, R10, 4 */
		/* 82086654h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82086654h case   18:*/		return 0x82086658;
		  /* 82086658h */ case   19:  		/* li R26, 0 */
		/* 82086658h case   19:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 82086658h case   19:*/		return 0x8208665C;
		  /* 8208665Ch */ case   20:  		/* srawi R10, R10, 2 */
		/* 8208665Ch case   20:*/		cpu::op::srawi<0,2>(regs,&regs.R10,regs.R10);
		/* 8208665Ch case   20:*/		return 0x82086660;
		  /* 82086660h */ case   21:  		/* mr R8, R26 */
		/* 82086660h case   21:*/		regs.R8 = regs.R26;
		/* 82086660h case   21:*/		return 0x82086664;
		  /* 82086664h */ case   22:  		/* stw R10, <#[R31 + 11132]> */
		/* 82086664h case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00002B7C) );
		/* 82086664h case   22:*/		return 0x82086668;
		  /* 82086668h */ case   23:  		/* mr R10, R26 */
		/* 82086668h case   23:*/		regs.R10 = regs.R26;
		/* 82086668h case   23:*/		return 0x8208666C;
		  /* 8208666Ch */ case   24:  		/* lwz R7, <#[R7 + 4396]> */
		/* 8208666Ch case   24:*/		regs.IO->MEM_READ( 0x8208666C, (uint32)(regs.R7 + 0x0000112C), 4, &regs.R7 );
		/* 8208666Ch case   24:*/		return 0x82086670;
		  /* 82086670h */ case   25:  		/* mtspr CTR, R11 */
		/* 82086670h case   25:*/		regs.CTR = regs.R11;
		/* 82086670h case   25:*/		return 0x82086674;
		  /* 82086674h */ case   26:  		/* stw R7, <#[R31 + 11524]> */
		/* 82086674h case   26:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x00002D04) );
		/* 82086674h case   26:*/		return 0x82086678;
		  /* 82086678h */ case   27:  		/* lis R23, 256 */
		/* 82086678h case   27:*/		cpu::op::lis<0>(regs,&regs.R23,0x100);
		/* 82086678h case   27:*/		return 0x8208667C;
		  /* 8208667Ch */ case   28:  		/* stw R26, <#[R31 + 11156]> */
		/* 8208667Ch case   28:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00002B94) );
		/* 8208667Ch case   28:*/		return 0x82086680;
		  /* 82086680h */ case   29:  		/* slw R11, R23, R10 */
		/* 82086680h case   29:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R23,regs.R10);
		/* 82086680h case   29:*/		return 0x82086684;
		  /* 82086684h */ case   30:  		/* and. R11, R11, R9 */
		/* 82086684h case   30:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82086684h case   30:*/		return 0x82086688;
		  /* 82086688h */ case   31:  		/* bc 12, CR0_EQ, 8 */
		/* 82086688h case   31:*/		if ( regs.CR[0].eq ) { return 0x82086690;  }
		/* 82086688h case   31:*/		return 0x8208668C;
		  /* 8208668Ch */ case   32:  		/* addi R8, R8, 1 */
		/* 8208668Ch case   32:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8208668Ch case   32:*/		return 0x82086690;
	}
	return 0x82086690;
} // Block from 8208660Ch-82086690h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82086690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086690);
		  /* 82086690h */ case    0:  		/* addi R10, R10, 1 */
		/* 82086690h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82086690h case    0:*/		return 0x82086694;
		  /* 82086694h */ case    1:  		/* bc 16, CR0_LT, -20 */
		/* 82086694h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82086680;  }
		/* 82086694h case    1:*/		return 0x82086698;
		  /* 82086698h */ case    2:  		/* lwz R11, <#[R31 + 15300]> */
		/* 82086698h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003BC4) );
		/* 82086698h case    2:*/		return 0x8208669C;
		  /* 8208669Ch */ case    3:  		/* lis R10, -16384 */
		/* 8208669Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFC000);
		/* 8208669Ch case    3:*/		return 0x820866A0;
		  /* 820866A0h */ case    4:  		/* lwz R7, <#[R31 + 15304]> */
		/* 820866A0h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00003BC8) );
		/* 820866A0h case    4:*/		return 0x820866A4;
		  /* 820866A4h */ case    5:  		/* rlwinm. R9, R9, 0, 5, 5 */
		/* 820866A4h case    5:*/		cpu::op::rlwinm<1,0,5,5>(regs,&regs.R9,regs.R9);
		/* 820866A4h case    5:*/		return 0x820866A8;
		  /* 820866A8h */ case    6:  		/* stw R10, <#[R31 + 11172]> */
		/* 820866A8h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00002BA4) );
		/* 820866A8h case    6:*/		return 0x820866AC;
		  /* 820866ACh */ case    7:  		/* li R25, -1 */
		/* 820866ACh case    7:*/		cpu::op::li<0>(regs,&regs.R25,0xFFFFFFFF);
		/* 820866ACh case    7:*/		return 0x820866B0;
		  /* 820866B0h */ case    8:  		/* stw R8, <#[R31 + 11120]> */
		/* 820866B0h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00002B70) );
		/* 820866B0h case    8:*/		return 0x820866B4;
		  /* 820866B4h */ case    9:  		/* stw R26, <#[R31 + 11124]> */
		/* 820866B4h case    9:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x00002B74) );
		/* 820866B4h case    9:*/		return 0x820866B8;
		  /* 820866B8h */ case   10:  		/* stw R11, <#[R31 + 11084]> */
		/* 820866B8h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00002B4C) );
		/* 820866B8h case   10:*/		return 0x820866BC;
		  /* 820866BCh */ case   11:  		/* stw R7, <#[R31 + 11092]> */
		/* 820866BCh case   11:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x00002B54) );
		/* 820866BCh case   11:*/		return 0x820866C0;
		  /* 820866C0h */ case   12:  		/* bc 12, CR0_EQ, 12 */
		/* 820866C0h case   12:*/		if ( regs.CR[0].eq ) { return 0x820866CC;  }
		/* 820866C0h case   12:*/		return 0x820866C4;
		  /* 820866C4h */ case   13:  		/* li R25, 2 */
		/* 820866C4h case   13:*/		cpu::op::li<0>(regs,&regs.R25,0x2);
		/* 820866C4h case   13:*/		return 0x820866C8;
		  /* 820866C8h */ case   14:  		/* stw R25, <#[R31 + 11464]> */
		/* 820866C8h case   14:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00002CC8) );
		/* 820866C8h case   14:*/		return 0x820866CC;
	}
	return 0x820866CC;
} // Block from 82086690h-820866CCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 820866CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820866CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820866CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820866CC);
		  /* 820866CCh */ case    0:  		/* mr R29, R26 */
		/* 820866CCh case    0:*/		regs.R29 = regs.R26;
		/* 820866CCh case    0:*/		return 0x820866D0;
		  /* 820866D0h */ case    1:  		/* lis R27, 32512 */
		/* 820866D0h case    1:*/		cpu::op::lis<0>(regs,&regs.R27,0x7F00);
		/* 820866D0h case    1:*/		return 0x820866D4;
		  /* 820866D4h */ case    2:  		/* addi R30, R31, 11644 */
		/* 820866D4h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x2D7C);
		/* 820866D4h case    2:*/		return 0x820866D8;
		  /* 820866D8h */ case    3:  		/* lis R24, -32256 */
		/* 820866D8h case    3:*/		cpu::op::lis<0>(regs,&regs.R24,0xFFFF8200);
		/* 820866D8h case    3:*/		return 0x820866DC;
		  /* 820866DCh */ case    4:  		/* lwz R11, <#[R31 + 24392]> */
		/* 820866DCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00005F48) );
		/* 820866DCh case    4:*/		return 0x820866E0;
		  /* 820866E0h */ case    5:  		/* slw R10, R23, R29 */
		/* 820866E0h case    5:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R23,regs.R29);
		/* 820866E0h case    5:*/		return 0x820866E4;
		  /* 820866E4h */ case    6:  		/* and. R11, R10, R11 */
		/* 820866E4h case    6:*/		cpu::op::and<1>(regs,&regs.R11,regs.R10,regs.R11);
		/* 820866E4h case    6:*/		return 0x820866E8;
		  /* 820866E8h */ case    7:  		/* bc 12, CR0_EQ, 180 */
		/* 820866E8h case    7:*/		if ( regs.CR[0].eq ) { return 0x8208679C;  }
		/* 820866E8h case    7:*/		return 0x820866EC;
		  /* 820866ECh */ case    8:  		/* cmpwi CR6, R25, 0 */
		/* 820866ECh case    8:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 820866ECh case    8:*/		return 0x820866F0;
		  /* 820866F0h */ case    9:  		/* bc 4, CR6_LT, 12 */
		/* 820866F0h case    9:*/		if ( !regs.CR[6].lt ) { return 0x820866FC;  }
		/* 820866F0h case    9:*/		return 0x820866F4;
		  /* 820866F4h */ case   10:  		/* mr R25, R29 */
		/* 820866F4h case   10:*/		regs.R25 = regs.R29;
		/* 820866F4h case   10:*/		return 0x820866F8;
		  /* 820866F8h */ case   11:  		/* stw R29, <#[R31 + 11464]> */
		/* 820866F8h case   11:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00002CC8) );
		/* 820866F8h case   11:*/		return 0x820866FC;
	}
	return 0x820866FC;
} // Block from 820866CCh-820866FCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 820866FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820866FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820866FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820866FC);
		  /* 820866FCh */ case    0:  		/* addis R11, R27, 16640 */
		/* 820866FCh case    0:*/		cpu::op::addis<0>(regs,&regs.R11,regs.R27,0x4100);
		/* 820866FCh case    0:*/		return 0x82086700;
		  /* 82086700h */ case    1:  		/* stw R29, <#[R30 - 64]> */
		/* 82086700h case    1:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0xFFFFFFC0) );
		/* 82086700h case    1:*/		return 0x82086704;
		  /* 82086704h */ case    2:  		/* addi R10, R31, 11080 */
		/* 82086704h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x2B48);
		/* 82086704h case    2:*/		return 0x82086708;
		  /* 82086708h */ case    3:  		/* stw R27, <#[R30 - 40]> */
		/* 82086708h case    3:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R30 + 0xFFFFFFD8) );
		/* 82086708h case    3:*/		return 0x8208670C;
		  /* 8208670Ch */ case    4:  		/* ori R11, R11, 2 */
		/* 8208670Ch case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2);
		/* 8208670Ch case    4:*/		return 0x82086710;
		  /* 82086710h */ case    5:  		/* stw R10, <#[R30 - 68]> */
		/* 82086710h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0xFFFFFFBC) );
		/* 82086710h case    5:*/		return 0x82086714;
		  /* 82086714h */ case    6:  		/* addi R28, R30, -68 */
		/* 82086714h case    6:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R30,0xFFFFFFBC);
		/* 82086714h case    6:*/		return 0x82086718;
		  /* 82086718h */ case    7:  		/* stw R11, <#[R30 - 44]> */
		/* 82086718h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0xFFFFFFD4) );
		/* 82086718h case    7:*/		return 0x8208671C;
		  /* 8208671Ch */ case    8:  		/* lis R11, -32248 */
		/* 8208671Ch case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8208);
		/* 8208671Ch case    8:*/		return 0x82086720;
		  /* 82086720h */ case    9:  		/* stb R26, <#[R30 - 8]> */
		/* 82086720h case    9:*/		cpu::mem::store8( regs, regs.R26, (uint32)(regs.R30 + 0xFFFFFFF8) );
		/* 82086720h case    9:*/		return 0x82086724;
		  /* 82086724h */ case   10:  		/* mr R5, R28 */
		/* 82086724h case   10:*/		regs.R5 = regs.R28;
		/* 82086724h case   10:*/		return 0x82086728;
		  /* 82086728h */ case   11:  		/* stw R26, <#[R30 - 4]> */
		/* 82086728h case   11:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R30 + 0xFFFFFFFC) );
		/* 82086728h case   11:*/		return 0x8208672C;
		  /* 8208672Ch */ case   12:  		/* addi R4, R11, 22264 */
		/* 8208672Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x56F8);
		/* 8208672Ch case   12:*/		return 0x82086730;
		  /* 82086730h */ case   13:  		/* stw R30, <#[R30]> */
		/* 82086730h case   13:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R30 + 0x00000000) );
		/* 82086730h case   13:*/		return 0x82086734;
		  /* 82086734h */ case   14:  		/* addi R3, R30, -36 */
		/* 82086734h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0xFFFFFFDC);
		/* 82086734h case   14:*/		return 0x82086738;
		  /* 82086738h */ case   15:  		/* stw R30, <#[R30 + 4]> */
		/* 82086738h case   15:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R30 + 0x00000004) );
		/* 82086738h case   15:*/		return 0x8208673C;
		  /* 8208673Ch */ case   16:  		/* bl 1993516 */
		/* 8208673Ch case   16:*/		regs.LR = 0x82086740; return 0x8226D268;
		/* 8208673Ch case   16:*/		return 0x82086740;
		  /* 82086740h */ case   17:  		/* addi R11, R29, 1 */
		/* 82086740h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x1);
		/* 82086740h case   17:*/		return 0x82086744;
		  /* 82086744h */ case   18:  		/* lis R10, -32248 */
		/* 82086744h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8208);
		/* 82086744h case   18:*/		return 0x82086748;
		  /* 82086748h */ case   19:  		/* stb R11, <#[R30 - 33]> */
		/* 82086748h case   19:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R30 + 0xFFFFFFDF) );
		/* 82086748h case   19:*/		return 0x8208674C;
		  /* 8208674Ch */ case   20:  		/* addi R8, R30, 12 */
		/* 8208674Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R30,0xC);
		/* 8208674Ch case   20:*/		return 0x82086750;
		  /* 82086750h */ case   21:  		/* li R7, 0 */
		/* 82086750h case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82086750h case   21:*/		return 0x82086754;
		  /* 82086754h */ case   22:  		/* mr R6, R28 */
		/* 82086754h case   22:*/		regs.R6 = regs.R28;
		/* 82086754h case   22:*/		return 0x82086758;
		  /* 82086758h */ case   23:  		/* addi R5, R10, 25464 */
		/* 82086758h case   23:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6378);
		/* 82086758h case   23:*/		return 0x8208675C;
		  /* 8208675Ch */ case   24:  		/* lis R4, 1 */
		/* 8208675Ch case   24:*/		cpu::op::lis<0>(regs,&regs.R4,0x1);
		/* 8208675Ch case   24:*/		return 0x82086760;
		  /* 82086760h */ case   25:  		/* li R3, 0 */
		/* 82086760h case   25:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82086760h case   25:*/		return 0x82086764;
		  /* 82086764h */ case   26:  		/* bl 10460 */
		/* 82086764h case   26:*/		regs.LR = 0x82086768; return 0x82089040;
		/* 82086764h case   26:*/		return 0x82086768;
		  /* 82086768h */ case   27:  		/* stw R3, <#[R30 + 8]> */
		/* 82086768h case   27:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 82086768h case   27:*/		return 0x8208676C;
		  /* 8208676Ch */ case   28:  		/* cmplwi CR0, R3, 0 */
		/* 8208676Ch case   28:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8208676Ch case   28:*/		return 0x82086770;
		  /* 82086770h */ case   29:  		/* bc 12, CR0_EQ, -364 */
		/* 82086770h case   29:*/		if ( regs.CR[0].eq ) { return 0x82086604;  }
		/* 82086770h case   29:*/		return 0x82086774;
		  /* 82086774h */ case   30:  		/* addi R5, R1, 80 */
		/* 82086774h case   30:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82086774h case   30:*/		return 0x82086778;
		  /* 82086778h */ case   31:  		/* lwz R4, <#[R24 + 1284]> */
		/* 82086778h case   31:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R24 + 0x00000504) );
		/* 82086778h case   31:*/		return 0x8208677C;
		  /* 8208677Ch */ case   32:  		/* bl 1993436 */
		/* 8208677Ch case   32:*/		regs.LR = 0x82086780; return 0x8226D258;
		/* 8208677Ch case   32:*/		return 0x82086780;
		  /* 82086780h */ case   33:  		/* cmpwi CR0, R3, 0 */
		/* 82086780h case   33:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82086780h case   33:*/		return 0x82086784;
		  /* 82086784h */ case   34:  		/* bc 12, CR0_LT, 24 */
		/* 82086784h case   34:*/		if ( regs.CR[0].lt ) { return 0x8208679C;  }
		/* 82086784h case   34:*/		return 0x82086788;
		  /* 82086788h */ case   35:  		/* li R4, 17 */
		/* 82086788h case   35:*/		cpu::op::li<0>(regs,&regs.R4,0x11);
		/* 82086788h case   35:*/		return 0x8208678C;
		  /* 8208678Ch */ case   36:  		/* lwz R3, <#[R1 + 80]> */
		/* 8208678Ch case   36:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 8208678Ch case   36:*/		return 0x82086790;
		  /* 82086790h */ case   37:  		/* bl 1993400 */
		/* 82086790h case   37:*/		regs.LR = 0x82086794; return 0x8226D248;
		/* 82086790h case   37:*/		return 0x82086794;
		  /* 82086794h */ case   38:  		/* lwz R3, <#[R1 + 80]> */
		/* 82086794h case   38:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 82086794h case   38:*/		return 0x82086798;
		  /* 82086798h */ case   39:  		/* bl 1993376 */
		/* 82086798h case   39:*/		regs.LR = 0x8208679C; return 0x8226D238;
		/* 82086798h case   39:*/		return 0x8208679C;
	}
	return 0x8208679C;
} // Block from 820866FCh-8208679Ch (40 instructions)

//////////////////////////////////////////////////////
// Block at 8208679Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208679C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208679C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208679C);
		  /* 8208679Ch */ case    0:  		/* lis R11, 32512 */
		/* 8208679Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x7F00);
		/* 8208679Ch case    0:*/		return 0x820867A0;
		  /* 820867A0h */ case    1:  		/* addi R27, R27, 128 */
		/* 820867A0h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x80);
		/* 820867A0h case    1:*/		return 0x820867A4;
		  /* 820867A4h */ case    2:  		/* ori R11, R11, 768 */
		/* 820867A4h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x300);
		/* 820867A4h case    2:*/		return 0x820867A8;
		  /* 820867A8h */ case    3:  		/* addi R29, R29, 1 */
		/* 820867A8h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 820867A8h case    3:*/		return 0x820867AC;
		  /* 820867ACh */ case    4:  		/* addi R30, R30, 108 */
		/* 820867ACh case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x6C);
		/* 820867ACh case    4:*/		return 0x820867B0;
		  /* 820867B0h */ case    5:  		/* cmplw CR6, R27, R11 */
		/* 820867B0h case    5:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 820867B0h case    5:*/		return 0x820867B4;
		  /* 820867B4h */ case    6:  		/* bc 12, CR6_LT, -216 */
		/* 820867B4h case    6:*/		if ( regs.CR[6].lt ) { return 0x820866DC;  }
		/* 820867B4h case    6:*/		return 0x820867B8;
	}
	return 0x820867B8;
} // Block from 8208679Ch-820867B8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820867B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820867B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820867B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820867B8);
		  /* 820867B8h */ case    0:  		/* li R3, 1 */
		/* 820867B8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820867B8h case    0:*/		return 0x820867BC;
	}
	return 0x820867BC;
} // Block from 820867B8h-820867BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820867BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820867BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820867BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820867BC);
		  /* 820867BCh */ case    0:  		/* addi R1, R1, 176 */
		/* 820867BCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 820867BCh case    0:*/		return 0x820867C0;
		  /* 820867C0h */ case    1:  		/* b 43732 */
		/* 820867C0h case    1:*/		return 0x82091294;
		/* 820867C0h case    1:*/		return 0x820867C4;
		  /* 820867C4h */ case    2:  		/* nop */
		/* 820867C4h case    2:*/		cpu::op::nop();
		/* 820867C4h case    2:*/		return 0x820867C8;
	}
	return 0x820867C8;
} // Block from 820867BCh-820867C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820867C8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820867C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820867C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820867C8);
		  /* 820867C8h */ case    0:  		/* mfspr R12, LR */
		/* 820867C8h case    0:*/		regs.R12 = regs.LR;
		/* 820867C8h case    0:*/		return 0x820867CC;
		  /* 820867CCh */ case    1:  		/* bl 43664 */
		/* 820867CCh case    1:*/		regs.LR = 0x820867D0; return 0x8209125C;
		/* 820867CCh case    1:*/		return 0x820867D0;
		  /* 820867D0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820867D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820867D0h case    2:*/		return 0x820867D4;
		  /* 820867D4h */ case    3:  		/* li R10, 26 */
		/* 820867D4h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x1A);
		/* 820867D4h case    3:*/		return 0x820867D8;
		  /* 820867D8h */ case    4:  		/* li R9, -1 */
		/* 820867D8h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0xFFFFFFFF);
		/* 820867D8h case    4:*/		return 0x820867DC;
		  /* 820867DCh */ case    5:  		/* mr R31, R3 */
		/* 820867DCh case    5:*/		regs.R31 = regs.R3;
		/* 820867DCh case    5:*/		return 0x820867E0;
		  /* 820867E0h */ case    6:  		/* rldicl R9, R9, 0, 32 */
		/* 820867E0h case    6:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R9,regs.R9);
		/* 820867E0h case    6:*/		return 0x820867E4;
		  /* 820867E4h */ case    7:  		/* addi R11, R3, 1128 */
		/* 820867E4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x468);
		/* 820867E4h case    7:*/		return 0x820867E8;
		  /* 820867E8h */ case    8:  		/* std R9, <#[R3 + 12248]> */
		/* 820867E8h case    8:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R3 + 0x00002FD8) );
		/* 820867E8h case    8:*/		return 0x820867EC;
		  /* 820867ECh */ case    9:  		/* mtspr CTR, R10 */
		/* 820867ECh case    9:*/		regs.CTR = regs.R10;
		/* 820867ECh case    9:*/		return 0x820867F0;
		  /* 820867F0h */ case   10:  		/* lwz R10, <#[R11 + 24]> */
		/* 820867F0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 820867F0h case   10:*/		return 0x820867F4;
		  /* 820867F4h */ case   11:  		/* rlwinm R10, R10, 0, 0, 29 */
		/* 820867F4h case   11:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R10,regs.R10);
		/* 820867F4h case   11:*/		return 0x820867F8;
		  /* 820867F8h */ case   12:  		/* stwu R10, <#[R11 + 24]> */
		/* 820867F8h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000018) );
		regs.R11 = (uint32)(regs.R11 + 0x00000018);
		/* 820867F8h case   12:*/		return 0x820867FC;
		  /* 820867FCh */ case   13:  		/* bc 16, CR0_LT, -12 */
		/* 820867FCh case   13:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820867F0;  }
		/* 820867FCh case   13:*/		return 0x82086800;
		  /* 82086800h */ case   14:  		/* li R10, 18 */
		/* 82086800h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x12);
		/* 82086800h case   14:*/		return 0x82086804;
		  /* 82086804h */ case   15:  		/* addi R11, R31, 1768 */
		/* 82086804h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x6E8);
		/* 82086804h case   15:*/		return 0x82086808;
		  /* 82086808h */ case   16:  		/* mtspr CTR, R10 */
		/* 82086808h case   16:*/		regs.CTR = regs.R10;
		/* 82086808h case   16:*/		return 0x8208680C;
		  /* 8208680Ch */ case   17:  		/* lwz R10, <#[R11 + 8]> */
		/* 8208680Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8208680Ch case   17:*/		return 0x82086810;
		  /* 82086810h */ case   18:  		/* li R9, 1 */
		/* 82086810h case   18:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 82086810h case   18:*/		return 0x82086814;
		  /* 82086814h */ case   19:  		/* rlwimi R10, R9, 0, 30, 31 */
		/* 82086814h case   19:*/		cpu::op::rlwimi<0,0,30,31>(regs,&regs.R10,regs.R9);
		/* 82086814h case   19:*/		return 0x82086818;
		  /* 82086818h */ case   20:  		/* stwu R10, <#[R11 + 8]> */
		/* 82086818h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		regs.R11 = (uint32)(regs.R11 + 0x00000008);
		/* 82086818h case   20:*/		return 0x8208681C;
		  /* 8208681Ch */ case   21:  		/* bc 16, CR0_LT, -16 */
		/* 8208681Ch case   21:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8208680C;  }
		/* 8208681Ch case   21:*/		return 0x82086820;
		  /* 82086820h */ case   22:  		/* lis R8, 8192 */
		/* 82086820h case   22:*/		cpu::op::lis<0>(regs,&regs.R8,0x2000);
		/* 82086820h case   22:*/		return 0x82086824;
		  /* 82086824h */ case   23:  		/* lwz R11, <#[R31 + 10564]> */
		/* 82086824h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002944) );
		/* 82086824h case   23:*/		return 0x82086828;
		  /* 82086828h */ case   24:  		/* lis R6, 15 */
		/* 82086828h case   24:*/		cpu::op::lis<0>(regs,&regs.R6,0xF);
		/* 82086828h case   24:*/		return 0x8208682C;
		  /* 8208682Ch */ case   25:  		/* lwz R7, <#[R31 + 10568]> */
		/* 8208682Ch case   25:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00002948) );
		/* 8208682Ch case   25:*/		return 0x82086830;
		  /* 82086830h */ case   26:  		/* ori R8, R8, 8192 */
		/* 82086830h case   26:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x2000);
		/* 82086830h case   26:*/		return 0x82086834;
		  /* 82086834h */ case   27:  		/* ori R6, R6, 61440 */
		/* 82086834h case   27:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R6,0xF000);
		/* 82086834h case   27:*/		return 0x82086838;
		  /* 82086838h */ case   28:  		/* stw R8, <#[R31 + 10428]> */
		/* 82086838h case   28:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x000028BC) );
		/* 82086838h case   28:*/		return 0x8208683C;
		  /* 8208683Ch */ case   29:  		/* li R8, 16 */
		/* 8208683Ch case   29:*/		cpu::op::li<0>(regs,&regs.R8,0x10);
		/* 8208683Ch case   29:*/		return 0x82086840;
		  /* 82086840h */ case   30:  		/* oris R11, R11, 8 */
		/* 82086840h case   30:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8);
		/* 82086840h case   30:*/		return 0x82086844;
		  /* 82086844h */ case   31:  		/* stw R6, <#[R31 + 10708]> */
		/* 82086844h case   31:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R31 + 0x000029D4) );
		/* 82086844h case   31:*/		return 0x82086848;
		  /* 82086848h */ case   32:  		/* lis R5, 15 */
		/* 82086848h case   32:*/		cpu::op::lis<0>(regs,&regs.R5,0xF);
		/* 82086848h case   32:*/		return 0x8208684C;
		  /* 8208684Ch */ case   33:  		/* stw R8, <#[R31 + 10772]> */
		/* 8208684Ch case   33:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00002A14) );
		/* 8208684Ch case   33:*/		return 0x82086850;
		  /* 82086850h */ case   34:  		/* lis R4, 255 */
		/* 82086850h case   34:*/		cpu::op::lis<0>(regs,&regs.R4,0xFF);
		/* 82086850h case   34:*/		return 0x82086854;
		  /* 82086854h */ case   35:  		/* stw R11, <#[R31 + 10564]> */
		/* 82086854h case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00002944) );
		/* 82086854h case   35:*/		return 0x82086858;
		  /* 82086858h */ case   36:  		/* li R10, 14 */
		/* 82086858h case   36:*/		cpu::op::li<0>(regs,&regs.R10,0xE);
		/* 82086858h case   36:*/		return 0x8208685C;
		  /* 8208685Ch */ case   37:  		/* li R9, 4 */
		/* 8208685Ch case   37:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 8208685Ch case   37:*/		return 0x82086860;
		  /* 82086860h */ case   38:  		/* li R3, 8 */
		/* 82086860h case   38:*/		cpu::op::li<0>(regs,&regs.R3,0x8);
		/* 82086860h case   38:*/		return 0x82086864;
		  /* 82086864h */ case   39:  		/* stw R10, <#[R31 + 10628]> */
		/* 82086864h case   39:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00002984) );
		/* 82086864h case   39:*/		return 0x82086868;
		  /* 82086868h */ case   40:  		/* ori R5, R5, 61696 */
		/* 82086868h case   40:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0xF100);
		/* 82086868h case   40:*/		return 0x8208686C;
		  /* 8208686Ch */ case   41:  		/* stw R10, <#[R31 + 10768]> */
		/* 8208686Ch case   41:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00002A10) );
		/* 8208686Ch case   41:*/		return 0x82086870;
		  /* 82086870h */ case   42:  		/* oris R7, R7, 1 */
		/* 82086870h case   42:*/		cpu::op::oris<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82086870h case   42:*/		return 0x82086874;
		  /* 82086874h */ case   43:  		/* stw R3, <#[R31 + 10604]> */
		/* 82086874h case   43:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000296C) );
		/* 82086874h case   43:*/		return 0x82086878;
		  /* 82086878h */ case   44:  		/* ori R8, R4, 65535 */
		/* 82086878h case   44:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R4,0xFFFF);
		/* 82086878h case   44:*/		return 0x8208687C;
		  /* 8208687Ch */ case   45:  		/* stw R5, <#[R31 + 10712]> */
		/* 8208687Ch case   45:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R31 + 0x000029D8) );
		/* 8208687Ch case   45:*/		return 0x82086880;
		  /* 82086880h */ case   46:  		/* li R6, 2 */
		/* 82086880h case   46:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 82086880h case   46:*/		return 0x82086884;
		  /* 82086884h */ case   47:  		/* stw R9, <#[R31 + 10580]> */
		/* 82086884h case   47:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00002954) );
		/* 82086884h case   47:*/		return 0x82086888;
		  /* 82086888h */ case   48:  		/* li R11, -1 */
		/* 82086888h case   48:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82086888h case   48:*/		return 0x8208688C;
		  /* 8208688Ch */ case   49:  		/* stw R7, <#[R31 + 10568]> */
		/* 8208688Ch case   49:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x00002948) );
		/* 8208688Ch case   49:*/		return 0x82086890;
		  /* 82086890h */ case   50:  		/* stw R8, <#[R31 + 10444]> */
		/* 82086890h case   50:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x000028CC) );
		/* 82086890h case   50:*/		return 0x82086894;
		  /* 82086894h */ case   51:  		/* stw R9, <#[R31 + 10688]> */
		/* 82086894h case   51:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x000029C0) );
		/* 82086894h case   51:*/		return 0x82086898;
		  /* 82086898h */ case   52:  		/* stw R6, <#[R31 + 10824]> */
		/* 82086898h case   52:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R31 + 0x00002A48) );
		/* 82086898h case   52:*/		return 0x8208689C;
		  /* 8208689Ch */ case   53:  		/* std R11, <#[R31]> */
		/* 8208689Ch case   53:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8208689Ch case   53:*/		return 0x820868A0;
	}
	return 0x820868A0;
} // Block from 820867C8h-820868A0h (54 instructions)

//////////////////////////////////////////////////////
// Block at 820868A0h
// Function '?Create@Font@ATG@@QAAJPAUD3DTexture@@PBX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820868A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820868A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820868A0);
		  /* 820868A0h */ case    0:  		/* std R11, <#[R31 + 8]> */
		/* 820868A0h case    0:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 820868A0h case    0:*/		return 0x820868A4;
		  /* 820868A4h */ case    1:  		/* std R11, <#[R31 + 16]> */
		/* 820868A4h case    1:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 820868A4h case    1:*/		return 0x820868A8;
		  /* 820868A8h */ case    2:  		/* std R11, <#[R31 + 24]> */
		/* 820868A8h case    2:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 820868A8h case    2:*/		return 0x820868AC;
		  /* 820868ACh */ case    3:  		/* std R11, <#[R31 + 32]> */
		/* 820868ACh case    3:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 820868ACh case    3:*/		return 0x820868B0;
		  /* 820868B0h */ case    4:  		/* stw R10, <#[R31 + 11044]> */
		/* 820868B0h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00002B24) );
		/* 820868B0h case    4:*/		return 0x820868B4;
		  /* 820868B4h */ case    5:  		/* lwz R3, <#[R31 + 48]> */
		/* 820868B4h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 820868B4h case    5:*/		return 0x820868B8;
		  /* 820868B8h */ case    6:  		/* lwz R11, <#[R31 + 56]> */
		/* 820868B8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 820868B8h case    6:*/		return 0x820868BC;
		  /* 820868BCh */ case    7:  		/* cmplw CR6, R3, R11 */
		/* 820868BCh case    7:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 820868BCh case    7:*/		return 0x820868C0;
		  /* 820868C0h */ case    8:  		/* bc 4, CR6_GT, 12 */
		/* 820868C0h case    8:*/		if ( !regs.CR[6].gt ) { return 0x820868CC;  }
		/* 820868C0h case    8:*/		return 0x820868C4;
		  /* 820868C4h */ case    9:  		/* mr R3, R31 */
		/* 820868C4h case    9:*/		regs.R3 = regs.R31;
		/* 820868C4h case    9:*/		return 0x820868C8;
		  /* 820868C8h */ case   10:  		/* bl -75712 */
		/* 820868C8h case   10:*/		regs.LR = 0x820868CC; return 0x82074108;
		/* 820868C8h case   10:*/		return 0x820868CC;
	}
	return 0x820868CC;
} // Block from 820868A0h-820868CCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 820868CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820868CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820868CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820868CC);
		  /* 820868CCh */ case    0:  		/* li R11, 3329 */
		/* 820868CCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xD01);
		/* 820868CCh case    0:*/		return 0x820868D0;
		  /* 820868D0h */ case    1:  		/* lis R10, 1024 */
		/* 820868D0h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x400);
		/* 820868D0h case    1:*/		return 0x820868D4;
		  /* 820868D4h */ case    2:  		/* stwu R11, <#[R3 + 4]> */
		/* 820868D4h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820868D4h case    2:*/		return 0x820868D8;
		  /* 820868D8h */ case    3:  		/* lis R11, -16382 */
		/* 820868D8h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC002);
		/* 820868D8h case    3:*/		return 0x820868DC;
		  /* 820868DCh */ case    4:  		/* li R9, 129 */
		/* 820868DCh case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x81);
		/* 820868DCh case    4:*/		return 0x820868E0;
		  /* 820868E0h */ case    5:  		/* ori R8, R11, 8448 */
		/* 820868E0h case    5:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R11,0x2100);
		/* 820868E0h case    5:*/		return 0x820868E4;
		  /* 820868E4h */ case    6:  		/* li R11, -1 */
		/* 820868E4h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 820868E4h case    6:*/		return 0x820868E8;
		  /* 820868E8h */ case    7:  		/* lis R7, -32215 */
		/* 820868E8h case    7:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8229);
		/* 820868E8h case    7:*/		return 0x820868EC;
		  /* 820868ECh */ case    8:  		/* stwu R10, <#[R3 + 4]> */
		/* 820868ECh case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 820868ECh case    8:*/		return 0x820868F0;
		  /* 820868F0h */ case    9:  		/* mr R10, R11 */
		/* 820868F0h case    9:*/		regs.R10 = regs.R11;
		/* 820868F0h case    9:*/		return 0x820868F4;
		  /* 820868F4h */ case   10:  		/* mr R6, R11 */
		/* 820868F4h case   10:*/		regs.R6 = regs.R11;
		/* 820868F4h case   10:*/		return 0x820868F8;
		  /* 820868F8h */ case   11:  		/* lis R11, -16382 */
		/* 820868F8h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC002);
		/* 820868F8h case   11:*/		return 0x820868FC;
		  /* 820868FCh */ case   12:  		/* li R4, 130 */
		/* 820868FCh case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x82);
		/* 820868FCh case   12:*/		return 0x82086900;
		  /* 82086900h */ case   13:  		/* ori R5, R11, 8448 */
		/* 82086900h case   13:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R11,0x2100);
		/* 82086900h case   13:*/		return 0x82086904;
		  /* 82086904h */ case   14:  		/* stwu R8, <#[R3 + 4]> */
		/* 82086904h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82086904h case   14:*/		return 0x82086908;
		  /* 82086908h */ case   15:  		/* lis R30, -32215 */
		/* 82086908h case   15:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8229);
		/* 82086908h case   15:*/		return 0x8208690C;
		  /* 8208690Ch */ case   16:  		/* li R29, 3650 */
		/* 8208690Ch case   16:*/		cpu::op::li<0>(regs,&regs.R29,0xE42);
		/* 8208690Ch case   16:*/		return 0x82086910;
		  /* 82086910h */ case   17:  		/* li R8, 8032 */
		/* 82086910h case   17:*/		cpu::op::li<0>(regs,&regs.R8,0x1F60);
		/* 82086910h case   17:*/		return 0x82086914;
		  /* 82086914h */ case   18:  		/* stwu R9, <#[R3 + 4]> */
		/* 82086914h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82086914h case   18:*/		return 0x82086918;
		  /* 82086918h */ case   19:  		/* li R9, 15 */
		/* 82086918h case   19:*/		cpu::op::li<0>(regs,&regs.R9,0xF);
		/* 82086918h case   19:*/		return 0x8208691C;
		  /* 8208691Ch */ case   20:  		/* stwu R10, <#[R3 + 4]> */
		/* 8208691Ch case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8208691Ch case   20:*/		return 0x82086920;
		  /* 82086920h */ case   21:  		/* lwz R11, <#[R7 - 31288]> */
		/* 82086920h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0xFFFF85C8) );
		/* 82086920h case   21:*/		return 0x82086924;
		  /* 82086924h */ case   22:  		/* oris R11, R11, 32769 */
		/* 82086924h case   22:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8001);
		/* 82086924h case   22:*/		return 0x82086928;
		  /* 82086928h */ case   23:  		/* stwu R11, <#[R3 + 4]> */
		/* 82086928h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82086928h case   23:*/		return 0x8208692C;
		  /* 8208692Ch */ case   24:  		/* stwu R5, <#[R3 + 4]> */
		/* 8208692Ch case   24:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8208692Ch case   24:*/		return 0x82086930;
		  /* 82086930h */ case   25:  		/* stwu R4, <#[R3 + 4]> */
		/* 82086930h case   25:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82086930h case   25:*/		return 0x82086934;
		  /* 82086934h */ case   26:  		/* stwu R10, <#[R3 + 4]> */
		/* 82086934h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82086934h case   26:*/		return 0x82086938;
		  /* 82086938h */ case   27:  		/* lwz R11, <#[R30 - 31284]> */
		/* 82086938h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0xFFFF85CC) );
		/* 82086938h case   27:*/		return 0x8208693C;
		  /* 8208693Ch */ case   28:  		/* stwu R11, <#[R3 + 4]> */
		/* 8208693Ch case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 8208693Ch case   28:*/		return 0x82086940;
		  /* 82086940h */ case   29:  		/* stwu R29, <#[R3 + 4]> */
		/* 82086940h case   29:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R3 + 0x00000004) );
		regs.R3 = (uint32)(regs.R3 + 0x00000004);
		/* 82086940h case   29:*/		return 0x82086944;
		  /* 82086944h */ case   30:  		/* mr R11, R3 */
		/* 82086944h case   30:*/		regs.R11 = regs.R3;
		/* 82086944h case   30:*/		return 0x82086948;
		  /* 82086948h */ case   31:  		/* stwu R8, <#[R11 + 4]> */
		/* 82086948h case   31:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82086948h case   31:*/		return 0x8208694C;
		  /* 8208694Ch */ case   32:  		/* lwz R10, <#[R31 + 24392]> */
		/* 8208694Ch case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00005F48) );
		/* 8208694Ch case   32:*/		return 0x82086950;
		  /* 82086950h */ case   33:  		/* rlwinm. R10, R10, 0, 30, 30 */
		/* 82086950h case   33:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R10);
		/* 82086950h case   33:*/		return 0x82086954;
		  /* 82086954h */ case   34:  		/* li R10, 3205 */
		/* 82086954h case   34:*/		cpu::op::li<0>(regs,&regs.R10,0xC85);
		/* 82086954h case   34:*/		return 0x82086958;
		  /* 82086958h */ case   35:  		/* stwu R10, <#[R11 + 4]> */
		/* 82086958h case   35:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82086958h case   35:*/		return 0x8208695C;
		  /* 8208695Ch */ case   36:  		/* bc 4, CR0_EQ, 8 */
		/* 8208695Ch case   36:*/		if ( !regs.CR[0].eq ) { return 0x82086964;  }
		/* 8208695Ch case   36:*/		return 0x82086960;
		  /* 82086960h */ case   37:  		/* li R9, 3 */
		/* 82086960h case   37:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 82086960h case   37:*/		return 0x82086964;
	}
	return 0x82086964;
} // Block from 820868CCh-82086964h (38 instructions)

//////////////////////////////////////////////////////
// Block at 82086964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086964);
		  /* 82086964h */ case    0:  		/* stwu R9, <#[R11 + 4]> */
		/* 82086964h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82086964h case    0:*/		return 0x82086968;
		  /* 82086968h */ case    1:  		/* lis R10, 7 */
		/* 82086968h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x7);
		/* 82086968h case    1:*/		return 0x8208696C;
		  /* 8208696Ch */ case    2:  		/* li R9, 0 */
		/* 8208696Ch case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8208696Ch case    2:*/		return 0x82086970;
		  /* 82086970h */ case    3:  		/* ori R10, R10, 1400 */
		/* 82086970h case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x578);
		/* 82086970h case    3:*/		return 0x82086974;
		  /* 82086974h */ case    4:  		/* li R8, 0 */
		/* 82086974h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82086974h case    4:*/		return 0x82086978;
		  /* 82086978h */ case    5:  		/* li R7, 0 */
		/* 82086978h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82086978h case    5:*/		return 0x8208697C;
		  /* 8208697Ch */ case    6:  		/* stwu R10, <#[R11 + 4]> */
		/* 8208697Ch case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8208697Ch case    6:*/		return 0x82086980;
		  /* 82086980h */ case    7:  		/* li R10, 0 */
		/* 82086980h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82086980h case    7:*/		return 0x82086984;
		  /* 82086984h */ case    8:  		/* lis R6, 2989 */
		/* 82086984h case    8:*/		cpu::op::lis<0>(regs,&regs.R6,0xBAD);
		/* 82086984h case    8:*/		return 0x82086988;
		  /* 82086988h */ case    9:  		/* li R5, 0 */
		/* 82086988h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82086988h case    9:*/		return 0x8208698C;
		  /* 8208698Ch */ case   10:  		/* ori R6, R6, 61453 */
		/* 8208698Ch case   10:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R6,0xF00D);
		/* 8208698Ch case   10:*/		return 0x82086990;
		  /* 82086990h */ case   11:  		/* li R4, 0 */
		/* 82086990h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82086990h case   11:*/		return 0x82086994;
		  /* 82086994h */ case   12:  		/* stwu R9, <#[R11 + 4]> */
		/* 82086994h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82086994h case   12:*/		return 0x82086998;
		  /* 82086998h */ case   13:  		/* stwu R8, <#[R11 + 4]> */
		/* 82086998h case   13:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82086998h case   13:*/		return 0x8208699C;
		  /* 8208699Ch */ case   14:  		/* stwu R10, <#[R11 + 4]> */
		/* 8208699Ch case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8208699Ch case   14:*/		return 0x820869A0;
		  /* 820869A0h */ case   15:  		/* stwu R7, <#[R11 + 4]> */
		/* 820869A0h case   15:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820869A0h case   15:*/		return 0x820869A4;
		  /* 820869A4h */ case   16:  		/* stwu R6, <#[R11 + 4]> */
		/* 820869A4h case   16:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820869A4h case   16:*/		return 0x820869A8;
		  /* 820869A8h */ case   17:  		/* stwu R5, <#[R11 + 4]> */
		/* 820869A8h case   17:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820869A8h case   17:*/		return 0x820869AC;
		  /* 820869ACh */ case   18:  		/* stwu R4, <#[R11 + 4]> */
		/* 820869ACh case   18:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820869ACh case   18:*/		return 0x820869B0;
		  /* 820869B0h */ case   19:  		/* stwu R9, <#[R11 + 4]> */
		/* 820869B0h case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 820869B0h case   19:*/		return 0x820869B4;
		  /* 820869B4h */ case   20:  		/* stw R11, <#[R31 + 48]> */
		/* 820869B4h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 820869B4h case   20:*/		return 0x820869B8;
	}
	return 0x820869B8;
} // Block from 82086964h-820869B8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 820869B8h
// Function '?GetTextExtent@Font@ATG@@QBAXPB_WPAM1H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820869B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820869B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820869B8);
		  /* 820869B8h */ case    0:  		/* addi R1, R1, 112 */
		/* 820869B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820869B8h case    0:*/		return 0x820869BC;
		  /* 820869BCh */ case    1:  		/* b 43248 */
		/* 820869BCh case    1:*/		return 0x820912AC;
		/* 820869BCh case    1:*/		return 0x820869C0;
	}
	return 0x820869C0;
} // Block from 820869B8h-820869C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820869C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820869C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820869C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820869C0);
		  /* 820869C0h */ case    0:  		/* mfspr R12, LR */
		/* 820869C0h case    0:*/		regs.R12 = regs.LR;
		/* 820869C0h case    0:*/		return 0x820869C4;
		  /* 820869C4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820869C4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820869C4h case    1:*/		return 0x820869C8;
		  /* 820869C8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 820869C8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820869C8h case    2:*/		return 0x820869CC;
		  /* 820869CCh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 820869CCh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820869CCh case    3:*/		return 0x820869D0;
		  /* 820869D0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 820869D0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820869D0h case    4:*/		return 0x820869D4;
		  /* 820869D4h */ case    5:  		/* lis R11, -32256 */
		/* 820869D4h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820869D4h case    5:*/		return 0x820869D8;
		  /* 820869D8h */ case    6:  		/* mr R31, R5 */
		/* 820869D8h case    6:*/		regs.R31 = regs.R5;
		/* 820869D8h case    6:*/		return 0x820869DC;
		  /* 820869DCh */ case    7:  		/* mr R30, R6 */
		/* 820869DCh case    7:*/		regs.R30 = regs.R6;
		/* 820869DCh case    7:*/		return 0x820869E0;
		  /* 820869E0h */ case    8:  		/* lwz R11, <#[R11 + 1452]> */
		/* 820869E0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000005AC) );
		/* 820869E0h case    8:*/		return 0x820869E4;
		  /* 820869E4h */ case    9:  		/* lwz R11, <#[R11]> */
		/* 820869E4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820869E4h case    9:*/		return 0x820869E8;
		  /* 820869E8h */ case   10:  		/* cntlzw R11, R11 */
		/* 820869E8h case   10:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 820869E8h case   10:*/		return 0x820869EC;
		  /* 820869ECh */ case   11:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 820869ECh case   11:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 820869ECh case   11:*/		return 0x820869F0;
		  /* 820869F0h */ case   12:  		/* xori R11, R11, 1 */
		/* 820869F0h case   12:*/		cpu::op::xori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820869F0h case   12:*/		return 0x820869F4;
		  /* 820869F4h */ case   13:  		/* addi R3, R11, 1 */
		/* 820869F4h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x1);
		/* 820869F4h case   13:*/		return 0x820869F8;
		  /* 820869F8h */ case   14:  		/* bl 1992832 */
		/* 820869F8h case   14:*/		regs.LR = 0x820869FC; return 0x8226D278;
		/* 820869F8h case   14:*/		return 0x820869FC;
		  /* 820869FCh */ case   15:  		/* lwz R11, <#[R31 + 848]> */
		/* 820869FCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000350) );
		/* 820869FCh case   15:*/		return 0x82086A00;
		  /* 82086A00h */ case   16:  		/* lwz R3, <#[R31 + 852]> */
		/* 82086A00h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000354) );
		/* 82086A00h case   16:*/		return 0x82086A04;
		  /* 82086A04h */ case   17:  		/* mtspr CTR, R11 */
		/* 82086A04h case   17:*/		regs.CTR = regs.R11;
		/* 82086A04h case   17:*/		return 0x82086A08;
		  /* 82086A08h */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 82086A08h case   18:*/		if ( 1 ) { regs.LR = 0x82086A0C; return (uint32)regs.CTR; }
		/* 82086A08h case   18:*/		return 0x82086A0C;
		  /* 82086A0Ch */ case   19:  		/* li R3, 0 */
		/* 82086A0Ch case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82086A0Ch case   19:*/		return 0x82086A10;
		  /* 82086A10h */ case   20:  		/* bl 1992808 */
		/* 82086A10h case   20:*/		regs.LR = 0x82086A14; return 0x8226D278;
		/* 82086A10h case   20:*/		return 0x82086A14;
		  /* 82086A14h */ case   21:  		/* lis R11, -32215 */
		/* 82086A14h case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82086A14h case   21:*/		return 0x82086A18;
		  /* 82086A18h */ case   22:  		/* nor R8, R30, R30 */
		/* 82086A18h case   22:*/		cpu::op::nor<0>(regs,&regs.R8,regs.R30,regs.R30);
		/* 82086A18h case   22:*/		return 0x82086A1C;
		  /* 82086A1Ch */ case   23:  		/* addi R6, R11, -31276 */
		/* 82086A1Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFF85D4);
		/* 82086A1Ch case   23:*/		return 0x82086A20;
		  /* 82086A20h */ case   24:  		/* mfmsr R7, MSR */
		/* 82086A20h case   24:*/		regs.R7 = regs.MSR;
		/* 82086A20h case   24:*/		return 0x82086A24;
		  /* 82086A24h */ case   25:  		/* mtmsrd MSR, R13 */
		/* 82086A24h case   25:*/		regs.MSR = regs.R13;
		/* 82086A24h case   25:*/		return 0x82086A28;
		  /* 82086A28h */ case   26:  		/* lwarx R10, <#[R6]> */
		/* 82086A28h case   26:*/		cpu::mem::lwarx( regs, &regs.R10, (uint32)(regs.R6 + 0x00000000) );
		/* 82086A28h case   26:*/		return 0x82086A2C;
		  /* 82086A2Ch */ case   27:  		/* and R9, R8, R10 */
		/* 82086A2Ch case   27:*/		cpu::op::and<0>(regs,&regs.R9,regs.R8,regs.R10);
		/* 82086A2Ch case   27:*/		return 0x82086A30;
		  /* 82086A30h */ case   28:  		/* stwcx. R9, <#[R6]> */
		/* 82086A30h case   28:*/		cpu::mem::stwcx( regs, regs.R9, (uint32)(regs.R6 + 0x00000000) );
		/* 82086A30h case   28:*/		return 0x82086A34;
		  /* 82086A34h */ case   29:  		/* mtmsrd MSR, R7 */
		/* 82086A34h case   29:*/		regs.MSR = regs.R7;
		/* 82086A34h case   29:*/		return 0x82086A38;
		  /* 82086A38h */ case   30:  		/* bc 4, CR0_EQ, -24 */
		/* 82086A38h case   30:*/		if ( !regs.CR[0].eq ) { return 0x82086A20;  }
		/* 82086A38h case   30:*/		return 0x82086A3C;
		  /* 82086A3Ch */ case   31:  		/* mr R11, R10 */
		/* 82086A3Ch case   31:*/		regs.R11 = regs.R10;
		/* 82086A3Ch case   31:*/		return 0x82086A40;
		  /* 82086A40h */ case   32:  		/* cmplw CR6, R10, R30 */
		/* 82086A40h case   32:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 82086A40h case   32:*/		return 0x82086A44;
		  /* 82086A44h */ case   33:  		/* bc 4, CR6_EQ, 24 */
		/* 82086A44h case   33:*/		if ( !regs.CR[6].eq ) { return 0x82086A5C;  }
		/* 82086A44h case   33:*/		return 0x82086A48;
		  /* 82086A48h */ case   34:  		/* lis R11, -32217 */
		/* 82086A48h case   34:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82086A48h case   34:*/		return 0x82086A4C;
		  /* 82086A4Ch */ case   35:  		/* li R5, 0 */
		/* 82086A4Ch case   35:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82086A4Ch case   35:*/		return 0x82086A50;
		  /* 82086A50h */ case   36:  		/* addi R3, R11, 6136 */
		/* 82086A50h case   36:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x17F8);
		/* 82086A50h case   36:*/		return 0x82086A54;
		  /* 82086A54h */ case   37:  		/* li R4, 1 */
		/* 82086A54h case   37:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82086A54h case   37:*/		return 0x82086A58;
		  /* 82086A58h */ case   38:  		/* bl 1991872 */
		/* 82086A58h case   38:*/		regs.LR = 0x82086A5C; return 0x8226CF18;
		/* 82086A58h case   38:*/		return 0x82086A5C;
	}
	return 0x82086A5C;
} // Block from 820869C0h-82086A5Ch (39 instructions)

//////////////////////////////////////////////////////
// Block at 82086A5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086A5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086A5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086A5C);
		  /* 82086A5Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 82086A5Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82086A5Ch case    0:*/		return 0x82086A60;
		  /* 82086A60h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82086A60h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82086A60h case    1:*/		return 0x82086A64;
		  /* 82086A64h */ case    2:  		/* mtspr LR, R12 */
		/* 82086A64h case    2:*/		regs.LR = regs.R12;
		/* 82086A64h case    2:*/		return 0x82086A68;
		  /* 82086A68h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82086A68h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82086A68h case    3:*/		return 0x82086A6C;
		  /* 82086A6Ch */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82086A6Ch case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82086A6Ch case    4:*/		return 0x82086A70;
		  /* 82086A70h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82086A70h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82086A70h case    5:*/		return 0x82086A74;
	}
	return 0x82086A74;
} // Block from 82086A5Ch-82086A74h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82086A74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086A74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086A74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086A74);
		  /* 82086A74h */ case    0:  		/* nop */
		/* 82086A74h case    0:*/		cpu::op::nop();
		/* 82086A74h case    0:*/		return 0x82086A78;
		  /* 82086A78h */ case    1:  		/* addis R11, R3, 8178 */
		/* 82086A78h case    1:*/		cpu::op::addis<0>(regs,&regs.R11,regs.R3,0x1FF2);
		/* 82086A78h case    1:*/		return 0x82086A7C;
		  /* 82086A7Ch */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82086A7Ch case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82086A7Ch case    2:*/		return 0x82086A80;
		  /* 82086A80h */ case    3:  		/* lwz R3, <#[R11]> */
		/* 82086A80h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82086A80h case    3:*/		return 0x82086A84;
		  /* 82086A84h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82086A84h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82086A84h case    4:*/		return 0x82086A88;
	}
	return 0x82086A88;
} // Block from 82086A74h-82086A88h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82086A88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086A88);
		  /* 82086A88h */ case    0:  		/* addis R11, R3, 8178 */
		/* 82086A88h case    0:*/		cpu::op::addis<0>(regs,&regs.R11,regs.R3,0x1FF2);
		/* 82086A88h case    0:*/		return 0x82086A8C;
		  /* 82086A8Ch */ case    1:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82086A8Ch case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82086A8Ch case    1:*/		return 0x82086A90;
		  /* 82086A90h */ case    2:  		/* stw R4, <#[R11]> */
		/* 82086A90h case    2:*/		regs.IO->MEM_WRITE( 0x82086A90, (uint32)(regs.R11 + 0x00000000), 4, &regs.R4 );
		/* 82086A90h case    2:*/		return 0x82086A94;
		  /* 82086A94h */ case    3:  		/* eieio */
		/* 82086A94h case    3:*/		cpu::op::eieio<0>(regs);
		/* 82086A94h case    3:*/		return 0x82086A98;
		  /* 82086A98h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82086A98h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82086A98h case    4:*/		return 0x82086A9C;
	}
	return 0x82086A9C;
} // Block from 82086A88h-82086A9Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82086A9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086A9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086A9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086A9C);
		  /* 82086A9Ch */ case    0:  		/* nop */
		/* 82086A9Ch case    0:*/		cpu::op::nop();
		/* 82086A9Ch case    0:*/		return 0x82086AA0;
	}
	return 0x82086AA0;
} // Block from 82086A9Ch-82086AA0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82086AA0h
// Function '?Begin@Font@ATG@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086AA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086AA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086AA0);
		  /* 82086AA0h */ case    0:  		/* mfspr R12, LR */
		/* 82086AA0h case    0:*/		regs.R12 = regs.LR;
		/* 82086AA0h case    0:*/		return 0x82086AA4;
		  /* 82086AA4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82086AA4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82086AA4h case    1:*/		return 0x82086AA8;
		  /* 82086AA8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82086AA8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82086AA8h case    2:*/		return 0x82086AAC;
		  /* 82086AACh */ case    3:  		/* std R5, <#[R1 + 32]> */
		/* 82086AACh case    3:*/		cpu::mem::store64( regs, regs.R5, (uint32)(regs.R1 + 0x00000020) );
		/* 82086AACh case    3:*/		return 0x82086AB0;
		  /* 82086AB0h */ case    4:  		/* std R6, <#[R1 + 40]> */
		/* 82086AB0h case    4:*/		cpu::mem::store64( regs, regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 82086AB0h case    4:*/		return 0x82086AB4;
		  /* 82086AB4h */ case    5:  		/* std R7, <#[R1 + 48]> */
		/* 82086AB4h case    5:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R1 + 0x00000030) );
		/* 82086AB4h case    5:*/		return 0x82086AB8;
		  /* 82086AB8h */ case    6:  		/* std R8, <#[R1 + 56]> */
		/* 82086AB8h case    6:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R1 + 0x00000038) );
		/* 82086AB8h case    6:*/		return 0x82086ABC;
		  /* 82086ABCh */ case    7:  		/* std R9, <#[R1 + 64]> */
		/* 82086ABCh case    7:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000040) );
		/* 82086ABCh case    7:*/		return 0x82086AC0;
		  /* 82086AC0h */ case    8:  		/* std R10, <#[R1 + 72]> */
		/* 82086AC0h case    8:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000048) );
		/* 82086AC0h case    8:*/		return 0x82086AC4;
		  /* 82086AC4h */ case    9:  		/* stwu R1, <#[R1 - 384]> */
		/* 82086AC4h case    9:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE80);
		/* 82086AC4h case    9:*/		return 0x82086AC8;
		  /* 82086AC8h */ case   10:  		/* stw R4, <#[R1 + 412]> */
		/* 82086AC8h case   10:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000019C) );
		/* 82086AC8h case   10:*/		return 0x82086ACC;
		  /* 82086ACCh */ case   11:  		/* addi R11, R1, 80 */
		/* 82086ACCh case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 82086ACCh case   11:*/		return 0x82086AD0;
		  /* 82086AD0h */ case   12:  		/* addi R10, R1, 416 */
		/* 82086AD0h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x1A0);
		/* 82086AD0h case   12:*/		return 0x82086AD4;
		  /* 82086AD4h */ case   13:  		/* mr R31, R3 */
		/* 82086AD4h case   13:*/		regs.R31 = regs.R3;
		/* 82086AD4h case   13:*/		return 0x82086AD8;
		  /* 82086AD8h */ case   14:  		/* mr R5, R4 */
		/* 82086AD8h case   14:*/		regs.R5 = regs.R4;
		/* 82086AD8h case   14:*/		return 0x82086ADC;
		  /* 82086ADCh */ case   15:  		/* li R4, 260 */
		/* 82086ADCh case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x104);
		/* 82086ADCh case   15:*/		return 0x82086AE0;
		  /* 82086AE0h */ case   16:  		/* addi R3, R1, 96 */
		/* 82086AE0h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 82086AE0h case   16:*/		return 0x82086AE4;
		  /* 82086AE4h */ case   17:  		/* stw R10, <#[R11]> */
		/* 82086AE4h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82086AE4h case   17:*/		return 0x82086AE8;
		  /* 82086AE8h */ case   18:  		/* lwz R6, <#[R1 + 80]> */
		/* 82086AE8h case   18:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 82086AE8h case   18:*/		return 0x82086AEC;
		  /* 82086AECh */ case   19:  		/* bl 1992076 */
		/* 82086AECh case   19:*/		regs.LR = 0x82086AF0; return 0x8226D078;
		/* 82086AECh case   19:*/		return 0x82086AF0;
		  /* 82086AF0h */ case   20:  		/* lwz R11, <#[R31]> */
		/* 82086AF0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82086AF0h case   20:*/		return 0x82086AF4;
		  /* 82086AF4h */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 82086AF4h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82086AF4h case   21:*/		return 0x82086AF8;
		  /* 82086AF8h */ case   22:  		/* addi R3, R1, 96 */
		/* 82086AF8h case   22:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 82086AF8h case   22:*/		return 0x82086AFC;
		  /* 82086AFCh */ case   23:  		/* bc 12, CR6_EQ, 16 */
		/* 82086AFCh case   23:*/		if ( regs.CR[6].eq ) { return 0x82086B0C;  }
		/* 82086AFCh case   23:*/		return 0x82086B00;
		  /* 82086B00h */ case   24:  		/* mtspr CTR, R11 */
		/* 82086B00h case   24:*/		regs.CTR = regs.R11;
		/* 82086B00h case   24:*/		return 0x82086B04;
		  /* 82086B04h */ case   25:  		/* bcctrl 20, CR0_LT */
		/* 82086B04h case   25:*/		if ( 1 ) { regs.LR = 0x82086B08; return (uint32)regs.CTR; }
		/* 82086B04h case   25:*/		return 0x82086B08;
		  /* 82086B08h */ case   26:  		/* b 8 */
		/* 82086B08h case   26:*/		return 0x82086B10;
		/* 82086B08h case   26:*/		return 0x82086B0C;
	}
	return 0x82086B0C;
} // Block from 82086AA0h-82086B0Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 82086B0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086B0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086B0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086B0C);
		  /* 82086B0Ch */ case    0:  		/* bl 1992572 */
		/* 82086B0Ch case    0:*/		regs.LR = 0x82086B10; return 0x8226D288;
		/* 82086B0Ch case    0:*/		return 0x82086B10;
	}
	return 0x82086B10;
} // Block from 82086B0Ch-82086B10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82086B10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086B10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086B10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086B10);
		  /* 82086B10h */ case    0:  		/* addi R1, R1, 384 */
		/* 82086B10h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x180);
		/* 82086B10h case    0:*/		return 0x82086B14;
		  /* 82086B14h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82086B14h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82086B14h case    1:*/		return 0x82086B18;
		  /* 82086B18h */ case    2:  		/* mtspr LR, R12 */
		/* 82086B18h case    2:*/		regs.LR = regs.R12;
		/* 82086B18h case    2:*/		return 0x82086B1C;
		  /* 82086B1Ch */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 82086B1Ch case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82086B1Ch case    3:*/		return 0x82086B20;
		  /* 82086B20h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82086B20h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82086B20h case    4:*/		return 0x82086B24;
	}
	return 0x82086B24;
} // Block from 82086B10h-82086B24h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82086B24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086B24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086B24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086B24);
		  /* 82086B24h */ case    0:  		/* nop */
		/* 82086B24h case    0:*/		cpu::op::nop();
		/* 82086B24h case    0:*/		return 0x82086B28;
	}
	return 0x82086B28;
} // Block from 82086B24h-82086B28h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82086B28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086B28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086B28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086B28);
		  /* 82086B28h */ case    0:  		/* mfspr R12, LR */
		/* 82086B28h case    0:*/		regs.R12 = regs.LR;
		/* 82086B28h case    0:*/		return 0x82086B2C;
		  /* 82086B2Ch */ case    1:  		/* bl 42776 */
		/* 82086B2Ch case    1:*/		regs.LR = 0x82086B30; return 0x82091244;
		/* 82086B2Ch case    1:*/		return 0x82086B30;
		  /* 82086B30h */ case    2:  		/* stwu R1, <#[R1 - 400]> */
		/* 82086B30h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE70);
		/* 82086B30h case    2:*/		return 0x82086B34;
		  /* 82086B34h */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 82086B34h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82086B34h case    3:*/		return 0x82086B38;
		  /* 82086B38h */ case    4:  		/* mr R31, R3 */
		/* 82086B38h case    4:*/		regs.R31 = regs.R3;
		/* 82086B38h case    4:*/		return 0x82086B3C;
		  /* 82086B3Ch */ case    5:  		/* li R3, 1488 */
		/* 82086B3Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x5D0);
		/* 82086B3Ch case    5:*/		return 0x82086B40;
		  /* 82086B40h */ case    6:  		/* mtspr CTR, R11 */
		/* 82086B40h case    6:*/		regs.CTR = regs.R11;
		/* 82086B40h case    6:*/		return 0x82086B44;
		  /* 82086B44h */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 82086B44h case    7:*/		if ( 1 ) { regs.LR = 0x82086B48; return (uint32)regs.CTR; }
		/* 82086B44h case    7:*/		return 0x82086B48;
		  /* 82086B48h */ case    8:  		/* lis R11, -32256 */
		/* 82086B48h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82086B48h case    8:*/		return 0x82086B4C;
		  /* 82086B4Ch */ case    9:  		/* lis R10, -32256 */
		/* 82086B4Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82086B4Ch case    9:*/		return 0x82086B50;
		  /* 82086B50h */ case   10:  		/* mr R29, R3 */
		/* 82086B50h case   10:*/		regs.R29 = regs.R3;
		/* 82086B50h case   10:*/		return 0x82086B54;
		  /* 82086B54h */ case   11:  		/* mr R6, R3 */
		/* 82086B54h case   11:*/		regs.R6 = regs.R3;
		/* 82086B54h case   11:*/		return 0x82086B58;
		  /* 82086B58h */ case   12:  		/* addi R5, R11, 17884 */
		/* 82086B58h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x45DC);
		/* 82086B58h case   12:*/		return 0x82086B5C;
		  /* 82086B5Ch */ case   13:  		/* addi R4, R10, 17864 */
		/* 82086B5Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x45C8);
		/* 82086B5Ch case   13:*/		return 0x82086B60;
		  /* 82086B60h */ case   14:  		/* mr R3, R31 */
		/* 82086B60h case   14:*/		regs.R3 = regs.R31;
		/* 82086B60h case   14:*/		return 0x82086B64;
		  /* 82086B64h */ case   15:  		/* li R28, 0 */
		/* 82086B64h case   15:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82086B64h case   15:*/		return 0x82086B68;
		  /* 82086B68h */ case   16:  		/* bl -200 */
		/* 82086B68h case   16:*/		regs.LR = 0x82086B6C; return 0x82086AA0;
		/* 82086B68h case   16:*/		return 0x82086B6C;
		  /* 82086B6Ch */ case   17:  		/* lis R11, -32217 */
		/* 82086B6Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82086B6Ch case   17:*/		return 0x82086B70;
		  /* 82086B70h */ case   18:  		/* li R26, 11 */
		/* 82086B70h case   18:*/		cpu::op::li<0>(regs,&regs.R26,0xB);
		/* 82086B70h case   18:*/		return 0x82086B74;
		  /* 82086B74h */ case   19:  		/* addi R27, R11, 6320 */
		/* 82086B74h case   19:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x18B0);
		/* 82086B74h case   19:*/		return 0x82086B78;
		  /* 82086B78h */ case   20:  		/* lis R11, -32256 */
		/* 82086B78h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82086B78h case   20:*/		return 0x82086B7C;
		  /* 82086B7Ch */ case   21:  		/* addi R30, R27, 4 */
		/* 82086B7Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R27,0x4);
		/* 82086B7Ch case   21:*/		return 0x82086B80;
		  /* 82086B80h */ case   22:  		/* addi R25, R11, 17860 */
		/* 82086B80h case   22:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x45C4);
		/* 82086B80h case   22:*/		return 0x82086B84;
		  /* 82086B84h */ case   23:  		/* lwz R11, <#[R30 - 4]> */
		/* 82086B84h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0xFFFFFFFC) );
		/* 82086B84h case   23:*/		return 0x82086B88;
		  /* 82086B88h */ case   24:  		/* and. R11, R11, R29 */
		/* 82086B88h case   24:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R29);
		/* 82086B88h case   24:*/		return 0x82086B8C;
		  /* 82086B8Ch */ case   25:  		/* bc 12, CR0_EQ, 40 */
		/* 82086B8Ch case   25:*/		if ( regs.CR[0].eq ) { return 0x82086BB4;  }
		/* 82086B8Ch case   25:*/		return 0x82086B90;
		  /* 82086B90h */ case   26:  		/* cmpwi CR6, R28, 0 */
		/* 82086B90h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 82086B90h case   26:*/		return 0x82086B94;
		  /* 82086B94h */ case   27:  		/* bc 12, CR6_EQ, 16 */
		/* 82086B94h case   27:*/		if ( regs.CR[6].eq ) { return 0x82086BA4;  }
		/* 82086B94h case   27:*/		return 0x82086B98;
		  /* 82086B98h */ case   28:  		/* mr R4, R25 */
		/* 82086B98h case   28:*/		regs.R4 = regs.R25;
		/* 82086B98h case   28:*/		return 0x82086B9C;
		  /* 82086B9Ch */ case   29:  		/* mr R3, R31 */
		/* 82086B9Ch case   29:*/		regs.R3 = regs.R31;
		/* 82086B9Ch case   29:*/		return 0x82086BA0;
		  /* 82086BA0h */ case   30:  		/* bl -256 */
		/* 82086BA0h case   30:*/		regs.LR = 0x82086BA4; return 0x82086AA0;
		/* 82086BA0h case   30:*/		return 0x82086BA4;
	}
	return 0x82086BA4;
} // Block from 82086B28h-82086BA4h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82086BA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086BA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086BA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086BA4);
		  /* 82086BA4h */ case    0:  		/* mr R3, R31 */
		/* 82086BA4h case    0:*/		regs.R3 = regs.R31;
		/* 82086BA4h case    0:*/		return 0x82086BA8;
		  /* 82086BA8h */ case    1:  		/* lwz R4, <#[R30]> */
		/* 82086BA8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 82086BA8h case    1:*/		return 0x82086BAC;
		  /* 82086BACh */ case    2:  		/* bl -268 */
		/* 82086BACh case    2:*/		regs.LR = 0x82086BB0; return 0x82086AA0;
		/* 82086BACh case    2:*/		return 0x82086BB0;
		  /* 82086BB0h */ case    3:  		/* li R28, 1 */
		/* 82086BB0h case    3:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 82086BB0h case    3:*/		return 0x82086BB4;
	}
	return 0x82086BB4;
} // Block from 82086BA4h-82086BB4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82086BB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086BB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086BB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086BB4);
		  /* 82086BB4h */ case    0:  		/* addic. R26, R26, -1 */
		/* 82086BB4h case    0:*/		cpu::op::addic<1>(regs,&regs.R26,regs.R26,0xFFFFFFFF);
		/* 82086BB4h case    0:*/		return 0x82086BB8;
		  /* 82086BB8h */ case    1:  		/* addi R30, R30, 8 */
		/* 82086BB8h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x8);
		/* 82086BB8h case    1:*/		return 0x82086BBC;
		  /* 82086BBCh */ case    2:  		/* bc 4, CR0_EQ, -56 */
		/* 82086BBCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x82086B84;  }
		/* 82086BBCh case    2:*/		return 0x82086BC0;
		  /* 82086BC0h */ case    3:  		/* cmpwi CR6, R28, 0 */
		/* 82086BC0h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 82086BC0h case    3:*/		return 0x82086BC4;
		  /* 82086BC4h */ case    4:  		/* bc 4, CR6_EQ, 20 */
		/* 82086BC4h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82086BD8;  }
		/* 82086BC4h case    4:*/		return 0x82086BC8;
		  /* 82086BC8h */ case    5:  		/* lis R11, -32256 */
		/* 82086BC8h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82086BC8h case    5:*/		return 0x82086BCC;
		  /* 82086BCCh */ case    6:  		/* mr R3, R31 */
		/* 82086BCCh case    6:*/		regs.R3 = regs.R31;
		/* 82086BCCh case    6:*/		return 0x82086BD0;
		  /* 82086BD0h */ case    7:  		/* addi R4, R11, 17840 */
		/* 82086BD0h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x45B0);
		/* 82086BD0h case    7:*/		return 0x82086BD4;
		  /* 82086BD4h */ case    8:  		/* bl -308 */
		/* 82086BD4h case    8:*/		regs.LR = 0x82086BD8; return 0x82086AA0;
		/* 82086BD4h case    8:*/		return 0x82086BD8;
	}
	return 0x82086BD8;
} // Block from 82086BB4h-82086BD8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82086BD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086BD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086BD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086BD8);
		  /* 82086BD8h */ case    0:  		/* lis R11, -32256 */
		/* 82086BD8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82086BD8h case    0:*/		return 0x82086BDC;
		  /* 82086BDCh */ case    1:  		/* mr R3, R31 */
		/* 82086BDCh case    1:*/		regs.R3 = regs.R31;
		/* 82086BDCh case    1:*/		return 0x82086BE0;
		  /* 82086BE0h */ case    2:  		/* addi R4, R11, 17836 */
		/* 82086BE0h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x45AC);
		/* 82086BE0h case    2:*/		return 0x82086BE4;
		  /* 82086BE4h */ case    3:  		/* bl -324 */
		/* 82086BE4h case    3:*/		regs.LR = 0x82086BE8; return 0x82086AA0;
		/* 82086BE4h case    3:*/		return 0x82086BE8;
		  /* 82086BE8h */ case    4:  		/* lwz R11, <#[R31 + 8]> */
		/* 82086BE8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82086BE8h case    4:*/		return 0x82086BEC;
		  /* 82086BECh */ case    5:  		/* li R4, 0 */
		/* 82086BECh case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82086BECh case    5:*/		return 0x82086BF0;
		  /* 82086BF0h */ case    6:  		/* li R3, 3857 */
		/* 82086BF0h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0xF11);
		/* 82086BF0h case    6:*/		return 0x82086BF4;
		  /* 82086BF4h */ case    7:  		/* mtspr CTR, R11 */
		/* 82086BF4h case    7:*/		regs.CTR = regs.R11;
		/* 82086BF4h case    7:*/		return 0x82086BF8;
		  /* 82086BF8h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 82086BF8h case    8:*/		if ( 1 ) { regs.LR = 0x82086BFC; return (uint32)regs.CTR; }
		/* 82086BF8h case    8:*/		return 0x82086BFC;
		  /* 82086BFCh */ case    9:  		/* li R3, 1 */
		/* 82086BFCh case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82086BFCh case    9:*/		return 0x82086C00;
		  /* 82086C00h */ case   10:  		/* bl 6200 */
		/* 82086C00h case   10:*/		regs.LR = 0x82086C04; return 0x82088438;
		/* 82086C00h case   10:*/		return 0x82086C04;
		  /* 82086C04h */ case   11:  		/* lwz R11, <#[R31 + 4]> */
		/* 82086C04h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82086C04h case   11:*/		return 0x82086C08;
		  /* 82086C08h */ case   12:  		/* li R3, 3858 */
		/* 82086C08h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0xF12);
		/* 82086C08h case   12:*/		return 0x82086C0C;
		  /* 82086C0Ch */ case   13:  		/* mtspr CTR, R11 */
		/* 82086C0Ch case   13:*/		regs.CTR = regs.R11;
		/* 82086C0Ch case   13:*/		return 0x82086C10;
		  /* 82086C10h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82086C10h case   14:*/		if ( 1 ) { regs.LR = 0x82086C14; return (uint32)regs.CTR; }
		/* 82086C10h case   14:*/		return 0x82086C14;
		  /* 82086C14h */ case   15:  		/* lis R11, -32256 */
		/* 82086C14h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82086C14h case   15:*/		return 0x82086C18;
		  /* 82086C18h */ case   16:  		/* lis R10, -32256 */
		/* 82086C18h case   16:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82086C18h case   16:*/		return 0x82086C1C;
		  /* 82086C1Ch */ case   17:  		/* addi R28, R11, 17816 */
		/* 82086C1Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x4598);
		/* 82086C1Ch case   17:*/		return 0x82086C20;
		  /* 82086C20h */ case   18:  		/* mr R6, R3 */
		/* 82086C20h case   18:*/		regs.R6 = regs.R3;
		/* 82086C20h case   18:*/		return 0x82086C24;
		  /* 82086C24h */ case   19:  		/* addi R5, R10, 17796 */
		/* 82086C24h case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x4584);
		/* 82086C24h case   19:*/		return 0x82086C28;
		  /* 82086C28h */ case   20:  		/* mr R4, R28 */
		/* 82086C28h case   20:*/		regs.R4 = regs.R28;
		/* 82086C28h case   20:*/		return 0x82086C2C;
		  /* 82086C2Ch */ case   21:  		/* mr R3, R31 */
		/* 82086C2Ch case   21:*/		regs.R3 = regs.R31;
		/* 82086C2Ch case   21:*/		return 0x82086C30;
		  /* 82086C30h */ case   22:  		/* bl -400 */
		/* 82086C30h case   22:*/		regs.LR = 0x82086C34; return 0x82086AA0;
		/* 82086C30h case   22:*/		return 0x82086C34;
		  /* 82086C34h */ case   23:  		/* addi R11, R27, 88 */
		/* 82086C34h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x58);
		/* 82086C34h case   23:*/		return 0x82086C38;
		  /* 82086C38h */ case   24:  		/* li R29, 30 */
		/* 82086C38h case   24:*/		cpu::op::li<0>(regs,&regs.R29,0x1E);
		/* 82086C38h case   24:*/		return 0x82086C3C;
		  /* 82086C3Ch */ case   25:  		/* addi R30, R11, -4 */
		/* 82086C3Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFFC);
		/* 82086C3Ch case   25:*/		return 0x82086C40;
		  /* 82086C40h */ case   26:  		/* lwz R11, <#[R31 + 4]> */
		/* 82086C40h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82086C40h case   26:*/		return 0x82086C44;
		  /* 82086C44h */ case   27:  		/* lwz R3, <#[R30 + 4]> */
		/* 82086C44h case   27:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000004) );
		/* 82086C44h case   27:*/		return 0x82086C48;
		  /* 82086C48h */ case   28:  		/* mtspr CTR, R11 */
		/* 82086C48h case   28:*/		regs.CTR = regs.R11;
		/* 82086C48h case   28:*/		return 0x82086C4C;
		  /* 82086C4Ch */ case   29:  		/* bcctrl 20, CR0_LT */
		/* 82086C4Ch case   29:*/		if ( 1 ) { regs.LR = 0x82086C50; return (uint32)regs.CTR; }
		/* 82086C4Ch case   29:*/		return 0x82086C50;
		  /* 82086C50h */ case   30:  		/* mr R6, R3 */
		/* 82086C50h case   30:*/		regs.R6 = regs.R3;
		/* 82086C50h case   30:*/		return 0x82086C54;
		  /* 82086C54h */ case   31:  		/* lwzu R5, <#[R30 + 8]> */
		/* 82086C54h case   31:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000008) );
		regs.R30 = (uint32)(regs.R30 + 0x00000008);
		/* 82086C54h case   31:*/		return 0x82086C58;
		  /* 82086C58h */ case   32:  		/* mr R4, R28 */
		/* 82086C58h case   32:*/		regs.R4 = regs.R28;
		/* 82086C58h case   32:*/		return 0x82086C5C;
		  /* 82086C5Ch */ case   33:  		/* mr R3, R31 */
		/* 82086C5Ch case   33:*/		regs.R3 = regs.R31;
		/* 82086C5Ch case   33:*/		return 0x82086C60;
		  /* 82086C60h */ case   34:  		/* bl -448 */
		/* 82086C60h case   34:*/		regs.LR = 0x82086C64; return 0x82086AA0;
		/* 82086C60h case   34:*/		return 0x82086C64;
		  /* 82086C64h */ case   35:  		/* addic. R29, R29, -1 */
		/* 82086C64h case   35:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 82086C64h case   35:*/		return 0x82086C68;
		  /* 82086C68h */ case   36:  		/* bc 4, CR0_EQ, -40 */
		/* 82086C68h case   36:*/		if ( !regs.CR[0].eq ) { return 0x82086C40;  }
		/* 82086C68h case   36:*/		return 0x82086C6C;
		  /* 82086C6Ch */ case   37:  		/* addi R11, R27, 328 */
		/* 82086C6Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x148);
		/* 82086C6Ch case   37:*/		return 0x82086C70;
		  /* 82086C70h */ case   38:  		/* lis R10, -32256 */
		/* 82086C70h case   38:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82086C70h case   38:*/		return 0x82086C74;
		  /* 82086C74h */ case   39:  		/* addi R30, R11, 16 */
		/* 82086C74h case   39:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x10);
		/* 82086C74h case   39:*/		return 0x82086C78;
		  /* 82086C78h */ case   40:  		/* lis R11, -32256 */
		/* 82086C78h case   40:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82086C78h case   40:*/		return 0x82086C7C;
		  /* 82086C7Ch */ case   41:  		/* lis R9, -32256 */
		/* 82086C7Ch case   41:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 82086C7Ch case   41:*/		return 0x82086C80;
		  /* 82086C80h */ case   42:  		/* lis R8, -32256 */
		/* 82086C80h case   42:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 82086C80h case   42:*/		return 0x82086C84;
		  /* 82086C84h */ case   43:  		/* li R23, 5 */
		/* 82086C84h case   43:*/		cpu::op::li<0>(regs,&regs.R23,0x5);
		/* 82086C84h case   43:*/		return 0x82086C88;
		  /* 82086C88h */ case   44:  		/* addi R26, R11, 17784 */
		/* 82086C88h case   44:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0x4578);
		/* 82086C88h case   44:*/		return 0x82086C8C;
		  /* 82086C8Ch */ case   45:  		/* addi R27, R10, 17788 */
		/* 82086C8Ch case   45:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0x457C);
		/* 82086C8Ch case   45:*/		return 0x82086C90;
		  /* 82086C90h */ case   46:  		/* addi R25, R9, 17772 */
		/* 82086C90h case   46:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R9,0x456C);
		/* 82086C90h case   46:*/		return 0x82086C94;
		  /* 82086C94h */ case   47:  		/* addi R24, R8, 17768 */
		/* 82086C94h case   47:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R8,0x4568);
		/* 82086C94h case   47:*/		return 0x82086C98;
		  /* 82086C98h */ case   48:  		/* mr R4, R24 */
		/* 82086C98h case   48:*/		regs.R4 = regs.R24;
		/* 82086C98h case   48:*/		return 0x82086C9C;
		  /* 82086C9Ch */ case   49:  		/* mr R3, R31 */
		/* 82086C9Ch case   49:*/		regs.R3 = regs.R31;
		/* 82086C9Ch case   49:*/		return 0x82086CA0;
		  /* 82086CA0h */ case   50:  		/* bl -512 */
		/* 82086CA0h case   50:*/		regs.LR = 0x82086CA4; return 0x82086AA0;
		/* 82086CA0h case   50:*/		return 0x82086CA4;
		  /* 82086CA4h */ case   51:  		/* lwz R11, <#[R30]> */
		/* 82086CA4h case   51:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82086CA4h case   51:*/		return 0x82086CA8;
		  /* 82086CA8h */ case   52:  		/* li R29, 0 */
		/* 82086CA8h case   52:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82086CA8h case   52:*/		return 0x82086CAC;
		  /* 82086CACh */ case   53:  		/* cmplwi CR6, R11, 0 */
		/* 82086CACh case   53:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82086CACh case   53:*/		return 0x82086CB0;
		  /* 82086CB0h */ case   54:  		/* bc 4, CR6_GT, 204 */
		/* 82086CB0h case   54:*/		if ( !regs.CR[6].gt ) { return 0x82086D7C;  }
		/* 82086CB0h case   54:*/		return 0x82086CB4;
		  /* 82086CB4h */ case   55:  		/* mr R4, R25 */
		/* 82086CB4h case   55:*/		regs.R4 = regs.R25;
		/* 82086CB4h case   55:*/		return 0x82086CB8;
		  /* 82086CB8h */ case   56:  		/* lwz R5, <#[R30 + 4]> */
		/* 82086CB8h case   56:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000004) );
		/* 82086CB8h case   56:*/		return 0x82086CBC;
		  /* 82086CBCh */ case   57:  		/* mr R6, R29 */
		/* 82086CBCh case   57:*/		regs.R6 = regs.R29;
		/* 82086CBCh case   57:*/		return 0x82086CC0;
		  /* 82086CC0h */ case   58:  		/* addi R3, R1, 112 */
		/* 82086CC0h case   58:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 82086CC0h case   58:*/		return 0x82086CC4;
		  /* 82086CC4h */ case   59:  		/* bl 1991508 */
		/* 82086CC4h case   59:*/		regs.LR = 0x82086CC8; return 0x8226D018;
		/* 82086CC4h case   59:*/		return 0x82086CC8;
		  /* 82086CC8h */ case   60:  		/* mr R28, R29 */
		/* 82086CC8h case   60:*/		regs.R28 = regs.R29;
		/* 82086CC8h case   60:*/		return 0x82086CCC;
		  /* 82086CCCh */ case   61:  		/* addi R29, R29, 8 */
		/* 82086CCCh case   61:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x8);
		/* 82086CCCh case   61:*/		return 0x82086CD0;
		  /* 82086CD0h */ case   62:  		/* lwz R11, <#[R30]> */
		/* 82086CD0h case   62:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82086CD0h case   62:*/		return 0x82086CD4;
		  /* 82086CD4h */ case   63:  		/* cmplw CR6, R29, R11 */
		/* 82086CD4h case   63:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82086CD4h case   63:*/		return 0x82086CD8;
		  /* 82086CD8h */ case   64:  		/* bc 4, CR6_LT, 8 */
		/* 82086CD8h case   64:*/		if ( !regs.CR[6].lt ) { return 0x82086CE0;  }
		/* 82086CD8h case   64:*/		return 0x82086CDC;
		  /* 82086CDCh */ case   65:  		/* mr R11, R29 */
		/* 82086CDCh case   65:*/		regs.R11 = regs.R29;
		/* 82086CDCh case   65:*/		return 0x82086CE0;
	}
	return 0x82086CE0;
} // Block from 82086BD8h-82086CE0h (66 instructions)

//////////////////////////////////////////////////////
// Block at 82086CE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086CE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086CE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086CE0);
		  /* 82086CE0h */ case    0:  		/* cmplw CR6, R28, R11 */
		/* 82086CE0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 82086CE0h case    0:*/		return 0x82086CE4;
		  /* 82086CE4h */ case    1:  		/* bc 4, CR6_LT, 124 */
		/* 82086CE4h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82086D60;  }
		/* 82086CE4h case    1:*/		return 0x82086CE8;
		  /* 82086CE8h */ case    2:  		/* lwz R11, <#[R30 - 4]> */
		/* 82086CE8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0xFFFFFFFC) );
		/* 82086CE8h case    2:*/		return 0x82086CEC;
		  /* 82086CECh */ case    3:  		/* lwz R10, <#[R31 + 8]> */
		/* 82086CECh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82086CECh case    3:*/		return 0x82086CF0;
		  /* 82086CF0h */ case    4:  		/* lwz R9, <#[R30 - 8]> */
		/* 82086CF0h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0xFFFFFFF8) );
		/* 82086CF0h case    4:*/		return 0x82086CF4;
		  /* 82086CF4h */ case    5:  		/* slw R11, R28, R11 */
		/* 82086CF4h case    5:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R28,regs.R11);
		/* 82086CF4h case    5:*/		return 0x82086CF8;
		  /* 82086CF8h */ case    6:  		/* or R4, R11, R9 */
		/* 82086CF8h case    6:*/		cpu::op::or<0>(regs,&regs.R4,regs.R11,regs.R9);
		/* 82086CF8h case    6:*/		return 0x82086CFC;
		  /* 82086CFCh */ case    7:  		/* lwz R3, <#[R30 - 16]> */
		/* 82086CFCh case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0xFFFFFFF0) );
		/* 82086CFCh case    7:*/		return 0x82086D00;
		  /* 82086D00h */ case    8:  		/* mtspr CTR, R10 */
		/* 82086D00h case    8:*/		regs.CTR = regs.R10;
		/* 82086D00h case    8:*/		return 0x82086D04;
		  /* 82086D04h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 82086D04h case    9:*/		if ( 1 ) { regs.LR = 0x82086D08; return (uint32)regs.CTR; }
		/* 82086D04h case    9:*/		return 0x82086D08;
		  /* 82086D08h */ case   10:  		/* li R3, 1 */
		/* 82086D08h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82086D08h case   10:*/		return 0x82086D0C;
		  /* 82086D0Ch */ case   11:  		/* bl 5932 */
		/* 82086D0Ch case   11:*/		regs.LR = 0x82086D10; return 0x82088438;
		/* 82086D0Ch case   11:*/		return 0x82086D10;
		  /* 82086D10h */ case   12:  		/* lwz R11, <#[R31 + 4]> */
		/* 82086D10h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82086D10h case   12:*/		return 0x82086D14;
		  /* 82086D14h */ case   13:  		/* lwz R3, <#[R30 - 12]> */
		/* 82086D14h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0xFFFFFFF4) );
		/* 82086D14h case   13:*/		return 0x82086D18;
		  /* 82086D18h */ case   14:  		/* mtspr CTR, R11 */
		/* 82086D18h case   14:*/		regs.CTR = regs.R11;
		/* 82086D18h case   14:*/		return 0x82086D1C;
		  /* 82086D1Ch */ case   15:  		/* bcctrl 20, CR0_LT */
		/* 82086D1Ch case   15:*/		if ( 1 ) { regs.LR = 0x82086D20; return (uint32)regs.CTR; }
		/* 82086D1Ch case   15:*/		return 0x82086D20;
		  /* 82086D20h */ case   16:  		/* addi R11, R1, 112 */
		/* 82086D20h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 82086D20h case   16:*/		return 0x82086D24;
		  /* 82086D24h */ case   17:  		/* mr R5, R3 */
		/* 82086D24h case   17:*/		regs.R5 = regs.R3;
		/* 82086D24h case   17:*/		return 0x82086D28;
		  /* 82086D28h */ case   18:  		/* mr R10, R11 */
		/* 82086D28h case   18:*/		regs.R10 = regs.R11;
		/* 82086D28h case   18:*/		return 0x82086D2C;
		  /* 82086D2Ch */ case   19:  		/* lbz R9, <#[R11]> */
		/* 82086D2Ch case   19:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82086D2Ch case   19:*/		return 0x82086D30;
		  /* 82086D30h */ case   20:  		/* addi R11, R11, 1 */
		/* 82086D30h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82086D30h case   20:*/		return 0x82086D34;
		  /* 82086D34h */ case   21:  		/* cmplwi CR6, R9, 0 */
		/* 82086D34h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82086D34h case   21:*/		return 0x82086D38;
		  /* 82086D38h */ case   22:  		/* bc 4, CR6_EQ, -12 */
		/* 82086D38h case   22:*/		if ( !regs.CR[6].eq ) { return 0x82086D2C;  }
		/* 82086D38h case   22:*/		return 0x82086D3C;
		  /* 82086D3Ch */ case   23:  		/* subf R11, R10, R11 */
		/* 82086D3Ch case   23:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82086D3Ch case   23:*/		return 0x82086D40;
		  /* 82086D40h */ case   24:  		/* addi R10, R1, 112 */
		/* 82086D40h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 82086D40h case   24:*/		return 0x82086D44;
		  /* 82086D44h */ case   25:  		/* addi R11, R11, -1 */
		/* 82086D44h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82086D44h case   25:*/		return 0x82086D48;
		  /* 82086D48h */ case   26:  		/* mr R4, R27 */
		/* 82086D48h case   26:*/		regs.R4 = regs.R27;
		/* 82086D48h case   26:*/		return 0x82086D4C;
		  /* 82086D4Ch */ case   27:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 82086D4Ch case   27:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 82086D4Ch case   27:*/		return 0x82086D50;
		  /* 82086D50h */ case   28:  		/* add R3, R11, R10 */
		/* 82086D50h case   28:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 82086D50h case   28:*/		return 0x82086D54;
		  /* 82086D54h */ case   29:  		/* bl 1991364 */
		/* 82086D54h case   29:*/		regs.LR = 0x82086D58; return 0x8226D018;
		/* 82086D54h case   29:*/		return 0x82086D58;
		  /* 82086D58h */ case   30:  		/* addi R28, R28, 1 */
		/* 82086D58h case   30:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82086D58h case   30:*/		return 0x82086D5C;
		  /* 82086D5Ch */ case   31:  		/* b -140 */
		/* 82086D5Ch case   31:*/		return 0x82086CD0;
		/* 82086D5Ch case   31:*/		return 0x82086D60;
	}
	return 0x82086D60;
} // Block from 82086CE0h-82086D60h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82086D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086D60);
		  /* 82086D60h */ case    0:  		/* mr R4, R26 */
		/* 82086D60h case    0:*/		regs.R4 = regs.R26;
		/* 82086D60h case    0:*/		return 0x82086D64;
		  /* 82086D64h */ case    1:  		/* addi R5, R1, 112 */
		/* 82086D64h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x70);
		/* 82086D64h case    1:*/		return 0x82086D68;
		  /* 82086D68h */ case    2:  		/* mr R3, R31 */
		/* 82086D68h case    2:*/		regs.R3 = regs.R31;
		/* 82086D68h case    2:*/		return 0x82086D6C;
		  /* 82086D6Ch */ case    3:  		/* bl -716 */
		/* 82086D6Ch case    3:*/		regs.LR = 0x82086D70; return 0x82086AA0;
		/* 82086D6Ch case    3:*/		return 0x82086D70;
		  /* 82086D70h */ case    4:  		/* lwz R11, <#[R30]> */
		/* 82086D70h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82086D70h case    4:*/		return 0x82086D74;
		  /* 82086D74h */ case    5:  		/* cmplw CR6, R29, R11 */
		/* 82086D74h case    5:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82086D74h case    5:*/		return 0x82086D78;
		  /* 82086D78h */ case    6:  		/* bc 12, CR6_LT, -196 */
		/* 82086D78h case    6:*/		if ( regs.CR[6].lt ) { return 0x82086CB4;  }
		/* 82086D78h case    6:*/		return 0x82086D7C;
	}
	return 0x82086D7C;
} // Block from 82086D60h-82086D7Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82086D7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086D7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086D7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086D7C);
		  /* 82086D7Ch */ case    0:  		/* addic. R23, R23, -1 */
		/* 82086D7Ch case    0:*/		cpu::op::addic<1>(regs,&regs.R23,regs.R23,0xFFFFFFFF);
		/* 82086D7Ch case    0:*/		return 0x82086D80;
		  /* 82086D80h */ case    1:  		/* addi R30, R30, 24 */
		/* 82086D80h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x18);
		/* 82086D80h case    1:*/		return 0x82086D84;
		  /* 82086D84h */ case    2:  		/* bc 4, CR0_EQ, -236 */
		/* 82086D84h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82086C98;  }
		/* 82086D84h case    2:*/		return 0x82086D88;
		  /* 82086D88h */ case    3:  		/* addi R1, R1, 400 */
		/* 82086D88h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x190);
		/* 82086D88h case    3:*/		return 0x82086D8C;
		  /* 82086D8Ch */ case    4:  		/* b 42248 */
		/* 82086D8Ch case    4:*/		return 0x82091294;
		/* 82086D8Ch case    4:*/		return 0x82086D90;
	}
	return 0x82086D90;
} // Block from 82086D7Ch-82086D90h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82086D90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086D90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086D90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086D90);
		  /* 82086D90h */ case    0:  		/* mfspr R12, LR */
		/* 82086D90h case    0:*/		regs.R12 = regs.LR;
		/* 82086D90h case    0:*/		return 0x82086D94;
		  /* 82086D94h */ case    1:  		/* bl 42164 */
		/* 82086D94h case    1:*/		regs.LR = 0x82086D98; return 0x82091248;
		/* 82086D94h case    1:*/		return 0x82086D98;
		  /* 82086D98h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82086D98h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82086D98h case    2:*/		return 0x82086D9C;
		  /* 82086D9Ch */ case    3:  		/* mr R27, R3 */
		/* 82086D9Ch case    3:*/		regs.R27 = regs.R3;
		/* 82086D9Ch case    3:*/		return 0x82086DA0;
		  /* 82086DA0h */ case    4:  		/* li R3, 3120 */
		/* 82086DA0h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0xC30);
		/* 82086DA0h case    4:*/		return 0x82086DA4;
		  /* 82086DA4h */ case    5:  		/* mr R25, R4 */
		/* 82086DA4h case    5:*/		regs.R25 = regs.R4;
		/* 82086DA4h case    5:*/		return 0x82086DA8;
		  /* 82086DA8h */ case    6:  		/* mr R29, R5 */
		/* 82086DA8h case    6:*/		regs.R29 = regs.R5;
		/* 82086DA8h case    6:*/		return 0x82086DAC;
		  /* 82086DACh */ case    7:  		/* mr R31, R6 */
		/* 82086DACh case    7:*/		regs.R31 = regs.R6;
		/* 82086DACh case    7:*/		return 0x82086DB0;
		  /* 82086DB0h */ case    8:  		/* mr R30, R7 */
		/* 82086DB0h case    8:*/		regs.R30 = regs.R7;
		/* 82086DB0h case    8:*/		return 0x82086DB4;
		  /* 82086DB4h */ case    9:  		/* mtspr CTR, R27 */
		/* 82086DB4h case    9:*/		regs.CTR = regs.R27;
		/* 82086DB4h case    9:*/		return 0x82086DB8;
		  /* 82086DB8h */ case   10:  		/* mr R26, R8 */
		/* 82086DB8h case   10:*/		regs.R26 = regs.R8;
		/* 82086DB8h case   10:*/		return 0x82086DBC;
		  /* 82086DBCh */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 82086DBCh case   11:*/		if ( 1 ) { regs.LR = 0x82086DC0; return (uint32)regs.CTR; }
		/* 82086DBCh case   11:*/		return 0x82086DC0;
		  /* 82086DC0h */ case   12:  		/* rlwinm R28, R3, 16, 29, 31 */
		/* 82086DC0h case   12:*/		cpu::op::rlwinm<0,16,29,31>(regs,&regs.R28,regs.R3);
		/* 82086DC0h case   12:*/		return 0x82086DC4;
		  /* 82086DC4h */ case   13:  		/* mtspr CTR, R27 */
		/* 82086DC4h case   13:*/		regs.CTR = regs.R27;
		/* 82086DC4h case   13:*/		return 0x82086DC8;
		  /* 82086DC8h */ case   14:  		/* li R3, 3333 */
		/* 82086DC8h case   14:*/		cpu::op::li<0>(regs,&regs.R3,0xD05);
		/* 82086DC8h case   14:*/		return 0x82086DCC;
		  /* 82086DCCh */ case   15:  		/* bcctrl 20, CR0_LT */
		/* 82086DCCh case   15:*/		if ( 1 ) { regs.LR = 0x82086DD0; return (uint32)regs.CTR; }
		/* 82086DCCh case   15:*/		return 0x82086DD0;
		  /* 82086DD0h */ case   16:  		/* mr R4, R3 */
		/* 82086DD0h case   16:*/		regs.R4 = regs.R3;
		/* 82086DD0h case   16:*/		return 0x82086DD4;
		  /* 82086DD4h */ case   17:  		/* subf R11, R29, R28 */
		/* 82086DD4h case   17:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R29,regs.R28);
		/* 82086DD4h case   17:*/		return 0x82086DD8;
	}
	return 0x82086DD8;
} // Block from 82086D90h-82086DD8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82086DD8h
// Function '?DrawText@Font@ATG@@QAAXMMKPB_WKM@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086DD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086DD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086DD8);
		  /* 82086DD8h */ case    0:  		/* mtspr CTR, R25 */
		/* 82086DD8h case    0:*/		regs.CTR = regs.R25;
		/* 82086DD8h case    0:*/		return 0x82086DDC;
		  /* 82086DDCh */ case    1:  		/* mr R24, R3 */
		/* 82086DDCh case    1:*/		regs.R24 = regs.R3;
		/* 82086DDCh case    1:*/		return 0x82086DE0;
		  /* 82086DE0h */ case    2:  		/* li R3, 3333 */
		/* 82086DE0h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0xD05);
		/* 82086DE0h case    2:*/		return 0x82086DE4;
		  /* 82086DE4h */ case    3:  		/* rlwimi R4, R11, 20, 9, 11 */
		/* 82086DE4h case    3:*/		cpu::op::rlwimi<0,20,9,11>(regs,&regs.R4,regs.R11);
		/* 82086DE4h case    3:*/		return 0x82086DE8;
		  /* 82086DE8h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 82086DE8h case    4:*/		if ( 1 ) { regs.LR = 0x82086DEC; return (uint32)regs.CTR; }
		/* 82086DE8h case    4:*/		return 0x82086DEC;
		  /* 82086DECh */ case    5:  		/* cmplw CR6, R31, R30 */
		/* 82086DECh case    5:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 82086DECh case    5:*/		return 0x82086DF0;
		  /* 82086DF0h */ case    6:  		/* bc 12, CR6_GT, 72 */
		/* 82086DF0h case    6:*/		if ( regs.CR[6].gt ) { return 0x82086E38;  }
		/* 82086DF0h case    6:*/		return 0x82086DF4;
		  /* 82086DF4h */ case    7:  		/* addi R10, R31, 3072 */
		/* 82086DF4h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0xC00);
		/* 82086DF4h case    7:*/		return 0x82086DF8;
		  /* 82086DF8h */ case    8:  		/* subf R11, R31, R30 */
		/* 82086DF8h case    8:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R31,regs.R30);
		/* 82086DF8h case    8:*/		return 0x82086DFC;
		  /* 82086DFCh */ case    9:  		/* mulli R29, R10, 6 */
		/* 82086DFCh case    9:*/		cpu::op::mulli<0>(regs,&regs.R29,regs.R10,0x6);
		/* 82086DFCh case    9:*/		return 0x82086E00;
		  /* 82086E00h */ case   10:  		/* addi R28, R11, 1 */
		/* 82086E00h case   10:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x1);
		/* 82086E00h case   10:*/		return 0x82086E04;
		  /* 82086E04h */ case   11:  		/* mr R31, R26 */
		/* 82086E04h case   11:*/		regs.R31 = regs.R26;
		/* 82086E04h case   11:*/		return 0x82086E08;
		  /* 82086E08h */ case   12:  		/* li R30, 6 */
		/* 82086E08h case   12:*/		cpu::op::li<0>(regs,&regs.R30,0x6);
		/* 82086E08h case   12:*/		return 0x82086E0C;
		  /* 82086E0Ch */ case   13:  		/* mr R3, R29 */
		/* 82086E0Ch case   13:*/		regs.R3 = regs.R29;
		/* 82086E0Ch case   13:*/		return 0x82086E10;
		  /* 82086E10h */ case   14:  		/* mtspr CTR, R27 */
		/* 82086E10h case   14:*/		regs.CTR = regs.R27;
		/* 82086E10h case   14:*/		return 0x82086E14;
		  /* 82086E14h */ case   15:  		/* bcctrl 20, CR0_LT */
		/* 82086E14h case   15:*/		if ( 1 ) { regs.LR = 0x82086E18; return (uint32)regs.CTR; }
		/* 82086E14h case   15:*/		return 0x82086E18;
		  /* 82086E18h */ case   16:  		/* stw R3, <#[R31]> */
		/* 82086E18h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 82086E18h case   16:*/		return 0x82086E1C;
		  /* 82086E1Ch */ case   17:  		/* addic. R30, R30, -1 */
		/* 82086E1Ch case   17:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 82086E1Ch case   17:*/		return 0x82086E20;
		  /* 82086E20h */ case   18:  		/* addi R31, R31, 4 */
		/* 82086E20h case   18:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82086E20h case   18:*/		return 0x82086E24;
		  /* 82086E24h */ case   19:  		/* bc 4, CR0_EQ, -24 */
		/* 82086E24h case   19:*/		if ( !regs.CR[0].eq ) { return 0x82086E0C;  }
		/* 82086E24h case   19:*/		return 0x82086E28;
		  /* 82086E28h */ case   20:  		/* addic. R28, R28, -1 */
		/* 82086E28h case   20:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 82086E28h case   20:*/		return 0x82086E2C;
		  /* 82086E2Ch */ case   21:  		/* mr R26, R31 */
		/* 82086E2Ch case   21:*/		regs.R26 = regs.R31;
		/* 82086E2Ch case   21:*/		return 0x82086E30;
		  /* 82086E30h */ case   22:  		/* addi R29, R29, 6 */
		/* 82086E30h case   22:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x6);
		/* 82086E30h case   22:*/		return 0x82086E34;
		  /* 82086E34h */ case   23:  		/* bc 4, CR0_EQ, -48 */
		/* 82086E34h case   23:*/		if ( !regs.CR[0].eq ) { return 0x82086E04;  }
		/* 82086E34h case   23:*/		return 0x82086E38;
	}
	return 0x82086E38;
} // Block from 82086DD8h-82086E38h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82086E38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086E38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086E38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086E38);
		  /* 82086E38h */ case    0:  		/* mr R4, R24 */
		/* 82086E38h case    0:*/		regs.R4 = regs.R24;
		/* 82086E38h case    0:*/		return 0x82086E3C;
		  /* 82086E3Ch */ case    1:  		/* mtspr CTR, R25 */
		/* 82086E3Ch case    1:*/		regs.CTR = regs.R25;
		/* 82086E3Ch case    1:*/		return 0x82086E40;
		  /* 82086E40h */ case    2:  		/* li R3, 3333 */
		/* 82086E40h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0xD05);
		/* 82086E40h case    2:*/		return 0x82086E44;
		  /* 82086E44h */ case    3:  		/* bcctrl 20, CR0_LT */
		/* 82086E44h case    3:*/		if ( 1 ) { regs.LR = 0x82086E48; return (uint32)regs.CTR; }
		/* 82086E44h case    3:*/		return 0x82086E48;
		  /* 82086E48h */ case    4:  		/* addi R1, R1, 160 */
		/* 82086E48h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82086E48h case    4:*/		return 0x82086E4C;
		  /* 82086E4Ch */ case    5:  		/* b 42060 */
		/* 82086E4Ch case    5:*/		return 0x82091298;
		/* 82086E4Ch case    5:*/		return 0x82086E50;
	}
	return 0x82086E50;
} // Block from 82086E38h-82086E50h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82086E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086E50);
		  /* 82086E50h */ case    0:  		/* mfspr R12, LR */
		/* 82086E50h case    0:*/		regs.R12 = regs.LR;
		/* 82086E50h case    0:*/		return 0x82086E54;
		  /* 82086E54h */ case    1:  		/* bl 41976 */
		/* 82086E54h case    1:*/		regs.LR = 0x82086E58; return 0x8209124C;
		/* 82086E54h case    1:*/		return 0x82086E58;
		  /* 82086E58h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82086E58h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82086E58h case    2:*/		return 0x82086E5C;
		  /* 82086E5Ch */ case    3:  		/* mr R28, R3 */
		/* 82086E5Ch case    3:*/		regs.R28 = regs.R3;
		/* 82086E5Ch case    3:*/		return 0x82086E60;
		  /* 82086E60h */ case    4:  		/* mr R11, R4 */
		/* 82086E60h case    4:*/		regs.R11 = regs.R4;
		/* 82086E60h case    4:*/		return 0x82086E64;
		  /* 82086E64h */ case    5:  		/* mr R25, R5 */
		/* 82086E64h case    5:*/		regs.R25 = regs.R5;
		/* 82086E64h case    5:*/		return 0x82086E68;
		  /* 82086E68h */ case    6:  		/* rlwinm. R10, R4, 0, 31, 31 */
		/* 82086E68h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R4);
		/* 82086E68h case    6:*/		return 0x82086E6C;
		  /* 82086E6Ch */ case    7:  		/* li R26, 0 */
		/* 82086E6Ch case    7:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 82086E6Ch case    7:*/		return 0x82086E70;
		  /* 82086E70h */ case    8:  		/* bc 12, CR0_EQ, 64 */
		/* 82086E70h case    8:*/		if ( regs.CR[0].eq ) { return 0x82086EB0;  }
		/* 82086E70h case    8:*/		return 0x82086E74;
		  /* 82086E74h */ case    9:  		/* rlwinm. R9, R4, 0, 30, 30 */
		/* 82086E74h case    9:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R9,regs.R4);
		/* 82086E74h case    9:*/		return 0x82086E78;
		  /* 82086E78h */ case   10:  		/* bc 4, CR0_EQ, 56 */
		/* 82086E78h case   10:*/		if ( !regs.CR[0].eq ) { return 0x82086EB0;  }
		/* 82086E78h case   10:*/		return 0x82086E7C;
		  /* 82086E7Ch */ case   11:  		/* rlwinm. R9, R4, 0, 0, 29 */
		/* 82086E7Ch case   11:*/		cpu::op::rlwinm<1,0,0,29>(regs,&regs.R9,regs.R4);
		/* 82086E7Ch case   11:*/		return 0x82086E80;
		  /* 82086E80h */ case   12:  		/* bc 12, CR0_EQ, 48 */
		/* 82086E80h case   12:*/		if ( regs.CR[0].eq ) { return 0x82086EB0;  }
		/* 82086E80h case   12:*/		return 0x82086E84;
		  /* 82086E84h */ case   13:  		/* lwz R26, <#[R4 - 1]> */
		/* 82086E84h case   13:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R4 + 0xFFFFFFFF) );
		/* 82086E84h case   13:*/		return 0x82086E88;
		  /* 82086E88h */ case   14:  		/* cmplwi CR6, R26, 0 */
		/* 82086E88h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82086E88h case   14:*/		return 0x82086E8C;
		  /* 82086E8Ch */ case   15:  		/* bc 4, CR6_EQ, 20 */
		/* 82086E8Ch case   15:*/		if ( !regs.CR[6].eq ) { return 0x82086EA0;  }
		/* 82086E8Ch case   15:*/		return 0x82086E90;
		  /* 82086E90h */ case   16:  		/* lis R11, -32256 */
		/* 82086E90h case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82086E90h case   16:*/		return 0x82086E94;
		  /* 82086E94h */ case   17:  		/* addi R4, R11, 19064 */
		/* 82086E94h case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4A78);
		/* 82086E94h case   17:*/		return 0x82086E98;
		  /* 82086E98h */ case   18:  		/* bl -1016 */
		/* 82086E98h case   18:*/		regs.LR = 0x82086E9C; return 0x82086AA0;
		/* 82086E98h case   18:*/		return 0x82086E9C;
		  /* 82086E9Ch */ case   19:  		/* b 192 */
		/* 82086E9Ch case   19:*/		return 0x82086F5C;
		/* 82086E9Ch case   19:*/		return 0x82086EA0;
	}
	return 0x82086EA0;
} // Block from 82086E50h-82086EA0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82086EA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086EA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086EA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086EA0);
		  /* 82086EA0h */ case    0:  		/* lis R11, -32256 */
		/* 82086EA0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82086EA0h case    0:*/		return 0x82086EA4;
		  /* 82086EA4h */ case    1:  		/* mr R5, R26 */
		/* 82086EA4h case    1:*/		regs.R5 = regs.R26;
		/* 82086EA4h case    1:*/		return 0x82086EA8;
		  /* 82086EA8h */ case    2:  		/* addi R4, R11, 18920 */
		/* 82086EA8h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x49E8);
		/* 82086EA8h case    2:*/		return 0x82086EAC;
		  /* 82086EACh */ case    3:  		/* b 172 */
		/* 82086EACh case    3:*/		return 0x82086F58;
		/* 82086EACh case    3:*/		return 0x82086EB0;
	}
	return 0x82086EB0;
} // Block from 82086EA0h-82086EB0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82086EB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086EB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086EB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086EB0);
		  /* 82086EB0h */ case    0:  		/* rlwinm. R9, R11, 0, 30, 30 */
		/* 82086EB0h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R9,regs.R11);
		/* 82086EB0h case    0:*/		return 0x82086EB4;
		  /* 82086EB4h */ case    1:  		/* bc 12, CR0_EQ, 144 */
		/* 82086EB4h case    1:*/		if ( regs.CR[0].eq ) { return 0x82086F44;  }
		/* 82086EB4h case    1:*/		return 0x82086EB8;
		  /* 82086EB8h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 82086EB8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82086EB8h case    2:*/		return 0x82086EBC;
		  /* 82086EBCh */ case    3:  		/* bc 4, CR6_EQ, 136 */
		/* 82086EBCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x82086F44;  }
		/* 82086EBCh case    3:*/		return 0x82086EC0;
		  /* 82086EC0h */ case    4:  		/* rlwinm. R10, R11, 0, 0, 29 */
		/* 82086EC0h case    4:*/		cpu::op::rlwinm<1,0,0,29>(regs,&regs.R10,regs.R11);
		/* 82086EC0h case    4:*/		return 0x82086EC4;
		  /* 82086EC4h */ case    5:  		/* bc 12, CR0_EQ, 128 */
		/* 82086EC4h case    5:*/		if ( regs.CR[0].eq ) { return 0x82086F44;  }
		/* 82086EC4h case    5:*/		return 0x82086EC8;
		  /* 82086EC8h */ case    6:  		/* addi R31, R11, -2 */
		/* 82086EC8h case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFFFFFE);
		/* 82086EC8h case    6:*/		return 0x82086ECC;
		  /* 82086ECCh */ case    7:  		/* lis R11, -32256 */
		/* 82086ECCh case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82086ECCh case    7:*/		return 0x82086ED0;
		  /* 82086ED0h */ case    8:  		/* mr R5, R31 */
		/* 82086ED0h case    8:*/		regs.R5 = regs.R31;
		/* 82086ED0h case    8:*/		return 0x82086ED4;
		  /* 82086ED4h */ case    9:  		/* addi R4, R11, 18776 */
		/* 82086ED4h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4958);
		/* 82086ED4h case    9:*/		return 0x82086ED8;
		  /* 82086ED8h */ case   10:  		/* mr R3, R28 */
		/* 82086ED8h case   10:*/		regs.R3 = regs.R28;
		/* 82086ED8h case   10:*/		return 0x82086EDC;
		  /* 82086EDCh */ case   11:  		/* bl -1084 */
		/* 82086EDCh case   11:*/		regs.LR = 0x82086EE0; return 0x82086AA0;
		/* 82086EDCh case   11:*/		return 0x82086EE0;
		  /* 82086EE0h */ case   12:  		/* lis R11, -32256 */
		/* 82086EE0h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82086EE0h case   12:*/		return 0x82086EE4;
		  /* 82086EE4h */ case   13:  		/* mr R3, R28 */
		/* 82086EE4h case   13:*/		regs.R3 = regs.R28;
		/* 82086EE4h case   13:*/		return 0x82086EE8;
		  /* 82086EE8h */ case   14:  		/* lwz R5, <#[R31 + 124]> */
		/* 82086EE8h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000007C) );
		/* 82086EE8h case   14:*/		return 0x82086EEC;
		  /* 82086EECh */ case   15:  		/* addi R4, R11, 18696 */
		/* 82086EECh case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4908);
		/* 82086EECh case   15:*/		return 0x82086EF0;
		  /* 82086EF0h */ case   16:  		/* bl -1104 */
		/* 82086EF0h case   16:*/		regs.LR = 0x82086EF4; return 0x82086AA0;
		/* 82086EF0h case   16:*/		return 0x82086EF4;
		  /* 82086EF4h */ case   17:  		/* lwz R11, <#[R31 + 124]> */
		/* 82086EF4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000007C) );
		/* 82086EF4h case   17:*/		return 0x82086EF8;
		  /* 82086EF8h */ case   18:  		/* li R30, 0 */
		/* 82086EF8h case   18:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82086EF8h case   18:*/		return 0x82086EFC;
		  /* 82086EFCh */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 82086EFCh case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82086EFCh case   19:*/		return 0x82086F00;
		  /* 82086F00h */ case   20:  		/* bc 4, CR6_GT, 92 */
		/* 82086F00h case   20:*/		if ( !regs.CR[6].gt ) { return 0x82086F5C;  }
		/* 82086F00h case   20:*/		return 0x82086F04;
		  /* 82086F04h */ case   21:  		/* lis R11, -32256 */
		/* 82086F04h case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82086F04h case   21:*/		return 0x82086F08;
		  /* 82086F08h */ case   22:  		/* li R29, 0 */
		/* 82086F08h case   22:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82086F08h case   22:*/		return 0x82086F0C;
		  /* 82086F0Ch */ case   23:  		/* addi R27, R11, 18628 */
		/* 82086F0Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x48C4);
		/* 82086F0Ch case   23:*/		return 0x82086F10;
		  /* 82086F10h */ case   24:  		/* lwz R11, <#[R31 + 132]> */
		/* 82086F10h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000084) );
		/* 82086F10h case   24:*/		return 0x82086F14;
		  /* 82086F14h */ case   25:  		/* mr R4, R27 */
		/* 82086F14h case   25:*/		regs.R4 = regs.R27;
		/* 82086F14h case   25:*/		return 0x82086F18;
		  /* 82086F18h */ case   26:  		/* mr R3, R28 */
		/* 82086F18h case   26:*/		regs.R3 = regs.R28;
		/* 82086F18h case   26:*/		return 0x82086F1C;
		  /* 82086F1Ch */ case   27:  		/* add R11, R29, R11 */
		/* 82086F1Ch case   27:*/		cpu::op::add<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 82086F1Ch case   27:*/		return 0x82086F20;
		  /* 82086F20h */ case   28:  		/* lwz R6, <#[R11 + 4]> */
		/* 82086F20h case   28:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 82086F20h case   28:*/		return 0x82086F24;
		  /* 82086F24h */ case   29:  		/* lwz R5, <#[R11]> */
		/* 82086F24h case   29:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82086F24h case   29:*/		return 0x82086F28;
		  /* 82086F28h */ case   30:  		/* bl -1160 */
		/* 82086F28h case   30:*/		regs.LR = 0x82086F2C; return 0x82086AA0;
		/* 82086F28h case   30:*/		return 0x82086F2C;
		  /* 82086F2Ch */ case   31:  		/* lwz R11, <#[R31 + 124]> */
		/* 82086F2Ch case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000007C) );
		/* 82086F2Ch case   31:*/		return 0x82086F30;
		  /* 82086F30h */ case   32:  		/* addi R30, R30, 1 */
		/* 82086F30h case   32:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82086F30h case   32:*/		return 0x82086F34;
		  /* 82086F34h */ case   33:  		/* addi R29, R29, 8 */
		/* 82086F34h case   33:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x8);
		/* 82086F34h case   33:*/		return 0x82086F38;
		  /* 82086F38h */ case   34:  		/* cmplw CR6, R30, R11 */
		/* 82086F38h case   34:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82086F38h case   34:*/		return 0x82086F3C;
		  /* 82086F3Ch */ case   35:  		/* bc 12, CR6_LT, -44 */
		/* 82086F3Ch case   35:*/		if ( regs.CR[6].lt ) { return 0x82086F10;  }
		/* 82086F3Ch case   35:*/		return 0x82086F40;
		  /* 82086F40h */ case   36:  		/* b 28 */
		/* 82086F40h case   36:*/		return 0x82086F5C;
		/* 82086F40h case   36:*/		return 0x82086F44;
	}
	return 0x82086F44;
} // Block from 82086EB0h-82086F44h (37 instructions)

//////////////////////////////////////////////////////
// Block at 82086F44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086F44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086F44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086F44);
		  /* 82086F44h */ case    0:  		/* lis R10, -32256 */
		/* 82086F44h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82086F44h case    0:*/		return 0x82086F48;
		  /* 82086F48h */ case    1:  		/* mr R5, R11 */
		/* 82086F48h case    1:*/		regs.R5 = regs.R11;
		/* 82086F48h case    1:*/		return 0x82086F4C;
		  /* 82086F4Ch */ case    2:  		/* addi R4, R10, 18488 */
		/* 82086F4Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x4838);
		/* 82086F4Ch case    2:*/		return 0x82086F50;
		  /* 82086F50h */ case    3:  		/* mr R3, R28 */
		/* 82086F50h case    3:*/		regs.R3 = regs.R28;
		/* 82086F50h case    3:*/		return 0x82086F54;
		  /* 82086F54h */ case    4:  		/* mr R26, R11 */
		/* 82086F54h case    4:*/		regs.R26 = regs.R11;
		/* 82086F54h case    4:*/		return 0x82086F58;
	}
	return 0x82086F58;
} // Block from 82086F44h-82086F58h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82086F58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086F58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086F58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086F58);
		  /* 82086F58h */ case    0:  		/* bl -1208 */
		/* 82086F58h case    0:*/		regs.LR = 0x82086F5C; return 0x82086AA0;
		/* 82086F58h case    0:*/		return 0x82086F5C;
	}
	return 0x82086F5C;
} // Block from 82086F58h-82086F5Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82086F5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086F5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086F5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086F5C);
		  /* 82086F5Ch */ case    0:  		/* cmpwi CR6, R25, 0 */
		/* 82086F5Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 82086F5Ch case    0:*/		return 0x82086F60;
		  /* 82086F60h */ case    1:  		/* bc 4, CR6_EQ, 200 */
		/* 82086F60h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82087028;  }
		/* 82086F60h case    1:*/		return 0x82086F64;
		  /* 82086F64h */ case    2:  		/* cmplwi CR6, R26, 0 */
		/* 82086F64h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82086F64h case    2:*/		return 0x82086F68;
		  /* 82086F68h */ case    3:  		/* bc 12, CR6_EQ, 192 */
		/* 82086F68h case    3:*/		if ( regs.CR[6].eq ) { return 0x82087028;  }
		/* 82086F68h case    3:*/		return 0x82086F6C;
		  /* 82086F6Ch */ case    4:  		/* lwz R11, <#[R26 + 152]> */
		/* 82086F6Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000098) );
		/* 82086F6Ch case    4:*/		return 0x82086F70;
		  /* 82086F70h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82086F70h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82086F70h case    5:*/		return 0x82086F74;
		  /* 82086F74h */ case    6:  		/* bc 4, CR6_EQ, 28 */
		/* 82086F74h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82086F90;  }
		/* 82086F74h case    6:*/		return 0x82086F78;
		  /* 82086F78h */ case    7:  		/* lis R11, -32256 */
		/* 82086F78h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82086F78h case    7:*/		return 0x82086F7C;
		  /* 82086F7Ch */ case    8:  		/* lwz R6, <#[R26 + 164]> */
		/* 82086F7Ch case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R26 + 0x000000A4) );
		/* 82086F7Ch case    8:*/		return 0x82086F80;
		  /* 82086F80h */ case    9:  		/* mr R3, R28 */
		/* 82086F80h case    9:*/		regs.R3 = regs.R28;
		/* 82086F80h case    9:*/		return 0x82086F84;
		  /* 82086F84h */ case   10:  		/* lwz R5, <#[R26 + 172]> */
		/* 82086F84h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x000000AC) );
		/* 82086F84h case   10:*/		return 0x82086F88;
		  /* 82086F88h */ case   11:  		/* addi R4, R11, 18360 */
		/* 82086F88h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x47B8);
		/* 82086F88h case   11:*/		return 0x82086F8C;
		  /* 82086F8Ch */ case   12:  		/* bl -1260 */
		/* 82086F8Ch case   12:*/		regs.LR = 0x82086F90; return 0x82086AA0;
		/* 82086F8Ch case   12:*/		return 0x82086F90;
	}
	return 0x82086F90;
} // Block from 82086F5Ch-82086F90h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82086F90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086F90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086F90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086F90);
		  /* 82086F90h */ case    0:  		/* lis R11, -32256 */
		/* 82086F90h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82086F90h case    0:*/		return 0x82086F94;
		  /* 82086F94h */ case    1:  		/* mr R3, R28 */
		/* 82086F94h case    1:*/		regs.R3 = regs.R28;
		/* 82086F94h case    1:*/		return 0x82086F98;
		  /* 82086F98h */ case    2:  		/* addi R4, R11, 18224 */
		/* 82086F98h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4730);
		/* 82086F98h case    2:*/		return 0x82086F9C;
		  /* 82086F9Ch */ case    3:  		/* bl -1276 */
		/* 82086F9Ch case    3:*/		regs.LR = 0x82086FA0; return 0x82086AA0;
		/* 82086F9Ch case    3:*/		return 0x82086FA0;
		  /* 82086FA0h */ case    4:  		/* lwz R29, <#[R26 + 116]> */
		/* 82086FA0h case    4:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R26 + 0x00000074) );
		/* 82086FA0h case    4:*/		return 0x82086FA4;
		  /* 82086FA4h */ case    5:  		/* cmplwi CR6, R29, 0 */
		/* 82086FA4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82086FA4h case    5:*/		return 0x82086FA8;
		  /* 82086FA8h */ case    6:  		/* bc 12, CR6_EQ, 84 */
		/* 82086FA8h case    6:*/		if ( regs.CR[6].eq ) { return 0x82086FFC;  }
		/* 82086FA8h case    6:*/		return 0x82086FAC;
		  /* 82086FACh */ case    7:  		/* lis R11, -32256 */
		/* 82086FACh case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82086FACh case    7:*/		return 0x82086FB0;
		  /* 82086FB0h */ case    8:  		/* addi R27, R11, 18200 */
		/* 82086FB0h case    8:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x4718);
		/* 82086FB0h case    8:*/		return 0x82086FB4;
		  /* 82086FB4h */ case    9:  		/* lwz R11, <#[R29 + 4]> */
		/* 82086FB4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 82086FB4h case    9:*/		return 0x82086FB8;
		  /* 82086FB8h */ case   10:  		/* li R30, 0 */
		/* 82086FB8h case   10:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82086FB8h case   10:*/		return 0x82086FBC;
		  /* 82086FBCh */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 82086FBCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82086FBCh case   11:*/		return 0x82086FC0;
		  /* 82086FC0h */ case   12:  		/* bc 4, CR6_GT, 48 */
		/* 82086FC0h case   12:*/		if ( !regs.CR[6].gt ) { return 0x82086FF0;  }
		/* 82086FC0h case   12:*/		return 0x82086FC4;
		  /* 82086FC4h */ case   13:  		/* mr R31, R29 */
		/* 82086FC4h case   13:*/		regs.R31 = regs.R29;
		/* 82086FC4h case   13:*/		return 0x82086FC8;
		  /* 82086FC8h */ case   14:  		/* lwz R5, <#[R31 + 12]> */
		/* 82086FC8h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000000C) );
		/* 82086FC8h case   14:*/		return 0x82086FCC;
		  /* 82086FCCh */ case   15:  		/* mr R4, R27 */
		/* 82086FCCh case   15:*/		regs.R4 = regs.R27;
		/* 82086FCCh case   15:*/		return 0x82086FD0;
		  /* 82086FD0h */ case   16:  		/* lwzu R11, <#[R31 + 8]> */
		/* 82086FD0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		regs.R31 = (uint32)(regs.R31 + 0x00000008);
		/* 82086FD0h case   16:*/		return 0x82086FD4;
		  /* 82086FD4h */ case   17:  		/* mr R3, R28 */
		/* 82086FD4h case   17:*/		regs.R3 = regs.R28;
		/* 82086FD4h case   17:*/		return 0x82086FD8;
		  /* 82086FD8h */ case   18:  		/* rlwinm R6, R11, 0, 8, 31 */
		/* 82086FD8h case   18:*/		cpu::op::rlwinm<0,0,8,31>(regs,&regs.R6,regs.R11);
		/* 82086FD8h case   18:*/		return 0x82086FDC;
		  /* 82086FDCh */ case   19:  		/* bl -1340 */
		/* 82086FDCh case   19:*/		regs.LR = 0x82086FE0; return 0x82086AA0;
		/* 82086FDCh case   19:*/		return 0x82086FE0;
		  /* 82086FE0h */ case   20:  		/* lwz R11, <#[R29 + 4]> */
		/* 82086FE0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 82086FE0h case   20:*/		return 0x82086FE4;
		  /* 82086FE4h */ case   21:  		/* addi R30, R30, 1 */
		/* 82086FE4h case   21:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82086FE4h case   21:*/		return 0x82086FE8;
		  /* 82086FE8h */ case   22:  		/* cmplw CR6, R30, R11 */
		/* 82086FE8h case   22:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82086FE8h case   22:*/		return 0x82086FEC;
		  /* 82086FECh */ case   23:  		/* bc 12, CR6_LT, -36 */
		/* 82086FECh case   23:*/		if ( regs.CR[6].lt ) { return 0x82086FC8;  }
		/* 82086FECh case   23:*/		return 0x82086FF0;
	}
	return 0x82086FF0;
} // Block from 82086F90h-82086FF0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82086FF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086FF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086FF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086FF0);
		  /* 82086FF0h */ case    0:  		/* lwz R29, <#[R29]> */
		/* 82086FF0h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000000) );
		/* 82086FF0h case    0:*/		return 0x82086FF4;
		  /* 82086FF4h */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 82086FF4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82086FF4h case    1:*/		return 0x82086FF8;
		  /* 82086FF8h */ case    2:  		/* bc 4, CR6_EQ, -68 */
		/* 82086FF8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82086FB4;  }
		/* 82086FF8h case    2:*/		return 0x82086FFC;
	}
	return 0x82086FFC;
} // Block from 82086FF0h-82086FFCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82086FFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82086FFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82086FFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82086FFC);
		  /* 82086FFCh */ case    0:  		/* lwz R11, <#[R26 + 152]> */
		/* 82086FFCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000098) );
		/* 82086FFCh case    0:*/		return 0x82087000;
		  /* 82087000h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82087000h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82087000h case    1:*/		return 0x82087004;
		  /* 82087004h */ case    2:  		/* bc 4, CR6_EQ, 36 */
		/* 82087004h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82087028;  }
		/* 82087004h case    2:*/		return 0x82087008;
		  /* 82087008h */ case    3:  		/* lis R11, -32256 */
		/* 82087008h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82087008h case    3:*/		return 0x8208700C;
		  /* 8208700Ch */ case    4:  		/* mr R3, R28 */
		/* 8208700Ch case    4:*/		regs.R3 = regs.R28;
		/* 8208700Ch case    4:*/		return 0x82087010;
		  /* 82087010h */ case    5:  		/* addi R4, R11, 18056 */
		/* 82087010h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4688);
		/* 82087010h case    5:*/		return 0x82087014;
		  /* 82087014h */ case    6:  		/* bl -1396 */
		/* 82087014h case    6:*/		regs.LR = 0x82087018; return 0x82086AA0;
		/* 82087014h case    6:*/		return 0x82087018;
		  /* 82087018h */ case    7:  		/* lis R11, -32256 */
		/* 82087018h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82087018h case    7:*/		return 0x8208701C;
		  /* 8208701Ch */ case    8:  		/* mr R3, R28 */
		/* 8208701Ch case    8:*/		regs.R3 = regs.R28;
		/* 8208701Ch case    8:*/		return 0x82087020;
		  /* 82087020h */ case    9:  		/* addi R4, R11, 17912 */
		/* 82087020h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x45F8);
		/* 82087020h case    9:*/		return 0x82087024;
		  /* 82087024h */ case   10:  		/* bl -1412 */
		/* 82087024h case   10:*/		regs.LR = 0x82087028; return 0x82086AA0;
		/* 82087024h case   10:*/		return 0x82087028;
	}
	return 0x82087028;
} // Block from 82086FFCh-82087028h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82087028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087028);
		  /* 82087028h */ case    0:  		/* addi R1, R1, 176 */
		/* 82087028h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82087028h case    0:*/		return 0x8208702C;
		  /* 8208702Ch */ case    1:  		/* b 41584 */
		/* 8208702Ch case    1:*/		return 0x8209129C;
		/* 8208702Ch case    1:*/		return 0x82087030;
	}
	return 0x82087030;
} // Block from 82087028h-82087030h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82087030h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087030);
		  /* 82087030h */ case    0:  		/* mfspr R12, LR */
		/* 82087030h case    0:*/		regs.R12 = regs.LR;
		/* 82087030h case    0:*/		return 0x82087034;
		  /* 82087034h */ case    1:  		/* bl 41452 */
		/* 82087034h case    1:*/		regs.LR = 0x82087038; return 0x82091220;
		/* 82087034h case    1:*/		return 0x82087038;
		  /* 82087038h */ case    2:  		/* ld R12, <#[R1 - 4096]> */
		/* 82087038h case    2:*/		cpu::mem::load64( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFF000) );
		/* 82087038h case    2:*/		return 0x8208703C;
		  /* 8208703Ch */ case    3:  		/* stwu R1, <#[R1 - 6528]> */
		/* 8208703Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFE680) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFE680);
		/* 8208703Ch case    3:*/		return 0x82087040;
		  /* 82087040h */ case    4:  		/* mr R30, R3 */
		/* 82087040h case    4:*/		regs.R30 = regs.R3;
		/* 82087040h case    4:*/		return 0x82087044;
		  /* 82087044h */ case    5:  		/* mr R29, R4 */
		/* 82087044h case    5:*/		regs.R29 = regs.R4;
		/* 82087044h case    5:*/		return 0x82087048;
		  /* 82087048h */ case    6:  		/* mr R31, R5 */
		/* 82087048h case    6:*/		regs.R31 = regs.R5;
		/* 82087048h case    6:*/		return 0x8208704C;
		  /* 8208704Ch */ case    7:  		/* mr R17, R6 */
		/* 8208704Ch case    7:*/		regs.R17 = regs.R6;
		/* 8208704Ch case    7:*/		return 0x82087050;
		  /* 82087050h */ case    8:  		/* li R14, 1 */
		/* 82087050h case    8:*/		cpu::op::li<0>(regs,&regs.R14,0x1);
		/* 82087050h case    8:*/		return 0x82087054;
		  /* 82087054h */ case    9:  		/* cmplwi CR6, R5, 0 */
		/* 82087054h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82087054h case    9:*/		return 0x82087058;
		  /* 82087058h */ case   10:  		/* bc 12, CR6_EQ, 12 */
		/* 82087058h case   10:*/		if ( regs.CR[6].eq ) { return 0x82087064;  }
		/* 82087058h case   10:*/		return 0x8208705C;
		  /* 8208705Ch */ case   11:  		/* cmplwi CR6, R6, 0 */
		/* 8208705Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 8208705Ch case   11:*/		return 0x82087060;
		  /* 82087060h */ case   12:  		/* bc 4, CR6_EQ, 24 */
		/* 82087060h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82087078;  }
		/* 82087060h case   12:*/		return 0x82087064;
	}
	return 0x82087064;
} // Block from 82087030h-82087064h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82087064h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087064( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087064) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087064);
		  /* 82087064h */ case    0:  		/* lis R11, -32248 */
		/* 82087064h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8208);
		/* 82087064h case    0:*/		return 0x82087068;
		  /* 82087068h */ case    1:  		/* lis R10, -32248 */
		/* 82087068h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8208);
		/* 82087068h case    1:*/		return 0x8208706C;
		  /* 8208706Ch */ case    2:  		/* addi R31, R11, 27256 */
		/* 8208706Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x6A78);
		/* 8208706Ch case    2:*/		return 0x82087070;
		  /* 82087070h */ case    3:  		/* addi R17, R10, 27272 */
		/* 82087070h case    3:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R10,0x6A88);
		/* 82087070h case    3:*/		return 0x82087074;
		  /* 82087074h */ case    4:  		/* li R14, 0 */
		/* 82087074h case    4:*/		cpu::op::li<0>(regs,&regs.R14,0x0);
		/* 82087074h case    4:*/		return 0x82087078;
	}
	return 0x82087078;
} // Block from 82087064h-82087078h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82087078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087078);
		  /* 82087078h */ case    0:  		/* li R3, 1488 */
		/* 82087078h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x5D0);
		/* 82087078h case    0:*/		return 0x8208707C;
		  /* 8208707Ch */ case    1:  		/* mtspr CTR, R31 */
		/* 8208707Ch case    1:*/		regs.CTR = regs.R31;
		/* 8208707Ch case    1:*/		return 0x82087080;
		  /* 82087080h */ case    2:  		/* bcctrl 20, CR0_LT */
		/* 82087080h case    2:*/		if ( 1 ) { regs.LR = 0x82087084; return (uint32)regs.CTR; }
		/* 82087080h case    2:*/		return 0x82087084;
		  /* 82087084h */ case    3:  		/* mr R24, R3 */
		/* 82087084h case    3:*/		regs.R24 = regs.R3;
		/* 82087084h case    3:*/		return 0x82087088;
		  /* 82087088h */ case    4:  		/* li R3, 3878 */
		/* 82087088h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0xF26);
		/* 82087088h case    4:*/		return 0x8208708C;
		  /* 8208708Ch */ case    5:  		/* mtspr CTR, R31 */
		/* 8208708Ch case    5:*/		regs.CTR = regs.R31;
		/* 8208708Ch case    5:*/		return 0x82087090;
		  /* 82087090h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 82087090h case    6:*/		if ( 1 ) { regs.LR = 0x82087094; return (uint32)regs.CTR; }
		/* 82087090h case    6:*/		return 0x82087094;
		  /* 82087094h */ case    7:  		/* li R3, 448 */
		/* 82087094h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x1C0);
		/* 82087094h case    7:*/		return 0x82087098;
		  /* 82087098h */ case    8:  		/* mtspr CTR, R31 */
		/* 82087098h case    8:*/		regs.CTR = regs.R31;
		/* 82087098h case    8:*/		return 0x8208709C;
		  /* 8208709Ch */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 8208709Ch case    9:*/		if ( 1 ) { regs.LR = 0x820870A0; return (uint32)regs.CTR; }
		/* 8208709Ch case    9:*/		return 0x820870A0;
		  /* 820870A0h */ case   10:  		/* mr R26, R3 */
		/* 820870A0h case   10:*/		regs.R26 = regs.R3;
		/* 820870A0h case   10:*/		return 0x820870A4;
		  /* 820870A4h */ case   11:  		/* li R3, 1403 */
		/* 820870A4h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x57B);
		/* 820870A4h case   11:*/		return 0x820870A8;
		  /* 820870A8h */ case   12:  		/* mtspr CTR, R31 */
		/* 820870A8h case   12:*/		regs.CTR = regs.R31;
		/* 820870A8h case   12:*/		return 0x820870AC;
		  /* 820870ACh */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 820870ACh case   13:*/		if ( 1 ) { regs.LR = 0x820870B0; return (uint32)regs.CTR; }
		/* 820870ACh case   13:*/		return 0x820870B0;
		  /* 820870B0h */ case   14:  		/* mr R15, R3 */
		/* 820870B0h case   14:*/		regs.R15 = regs.R3;
		/* 820870B0h case   14:*/		return 0x820870B4;
		  /* 820870B4h */ case   15:  		/* li R3, 1404 */
		/* 820870B4h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x57C);
		/* 820870B4h case   15:*/		return 0x820870B8;
		  /* 820870B8h */ case   16:  		/* mtspr CTR, R31 */
		/* 820870B8h case   16:*/		regs.CTR = regs.R31;
		/* 820870B8h case   16:*/		return 0x820870BC;
		  /* 820870BCh */ case   17:  		/* bcctrl 20, CR0_LT */
		/* 820870BCh case   17:*/		if ( 1 ) { regs.LR = 0x820870C0; return (uint32)regs.CTR; }
		/* 820870BCh case   17:*/		return 0x820870C0;
		  /* 820870C0h */ case   18:  		/* mr R28, R3 */
		/* 820870C0h case   18:*/		regs.R28 = regs.R3;
		/* 820870C0h case   18:*/		return 0x820870C4;
		  /* 820870C4h */ case   19:  		/* li R3, 1405 */
		/* 820870C4h case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x57D);
		/* 820870C4h case   19:*/		return 0x820870C8;
		  /* 820870C8h */ case   20:  		/* mtspr CTR, R31 */
		/* 820870C8h case   20:*/		regs.CTR = regs.R31;
		/* 820870C8h case   20:*/		return 0x820870CC;
		  /* 820870CCh */ case   21:  		/* bcctrl 20, CR0_LT */
		/* 820870CCh case   21:*/		if ( 1 ) { regs.LR = 0x820870D0; return (uint32)regs.CTR; }
		/* 820870CCh case   21:*/		return 0x820870D0;
		  /* 820870D0h */ case   22:  		/* mr R25, R3 */
		/* 820870D0h case   22:*/		regs.R25 = regs.R3;
		/* 820870D0h case   22:*/		return 0x820870D4;
		  /* 820870D4h */ case   23:  		/* li R3, 1402 */
		/* 820870D4h case   23:*/		cpu::op::li<0>(regs,&regs.R3,0x57A);
		/* 820870D4h case   23:*/		return 0x820870D8;
		  /* 820870D8h */ case   24:  		/* mtspr CTR, R31 */
		/* 820870D8h case   24:*/		regs.CTR = regs.R31;
		/* 820870D8h case   24:*/		return 0x820870DC;
		  /* 820870DCh */ case   25:  		/* bcctrl 20, CR0_LT */
		/* 820870DCh case   25:*/		if ( 1 ) { regs.LR = 0x820870E0; return (uint32)regs.CTR; }
		/* 820870DCh case   25:*/		return 0x820870E0;
		  /* 820870E0h */ case   26:  		/* mr R27, R3 */
		/* 820870E0h case   26:*/		regs.R27 = regs.R3;
		/* 820870E0h case   26:*/		return 0x820870E4;
		  /* 820870E4h */ case   27:  		/* li R4, 12 */
		/* 820870E4h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0xC);
		/* 820870E4h case   27:*/		return 0x820870E8;
		  /* 820870E8h */ case   28:  		/* mtspr CTR, R17 */
		/* 820870E8h case   28:*/		regs.CTR = regs.R17;
		/* 820870E8h case   28:*/		return 0x820870EC;
		  /* 820870ECh */ case   29:  		/* li R3, 3200 */
		/* 820870ECh case   29:*/		cpu::op::li<0>(regs,&regs.R3,0xC80);
		/* 820870ECh case   29:*/		return 0x820870F0;
		  /* 820870F0h */ case   30:  		/* bcctrl 20, CR0_LT */
		/* 820870F0h case   30:*/		if ( 1 ) { regs.LR = 0x820870F4; return (uint32)regs.CTR; }
		/* 820870F0h case   30:*/		return 0x820870F4;
		  /* 820870F4h */ case   31:  		/* li R3, 3201 */
		/* 820870F4h case   31:*/		cpu::op::li<0>(regs,&regs.R3,0xC81);
		/* 820870F4h case   31:*/		return 0x820870F8;
		  /* 820870F8h */ case   32:  		/* mtspr CTR, R31 */
		/* 820870F8h case   32:*/		regs.CTR = regs.R31;
		/* 820870F8h case   32:*/		return 0x820870FC;
		  /* 820870FCh */ case   33:  		/* bcctrl 20, CR0_LT */
		/* 820870FCh case   33:*/		if ( 1 ) { regs.LR = 0x82087100; return (uint32)regs.CTR; }
		/* 820870FCh case   33:*/		return 0x82087100;
		  /* 82087100h */ case   34:  		/* mr R22, R3 */
		/* 82087100h case   34:*/		regs.R22 = regs.R3;
		/* 82087100h case   34:*/		return 0x82087104;
		  /* 82087104h */ case   35:  		/* li R3, 3201 */
		/* 82087104h case   35:*/		cpu::op::li<0>(regs,&regs.R3,0xC81);
		/* 82087104h case   35:*/		return 0x82087108;
		  /* 82087108h */ case   36:  		/* mtspr CTR, R31 */
		/* 82087108h case   36:*/		regs.CTR = regs.R31;
		/* 82087108h case   36:*/		return 0x8208710C;
		  /* 8208710Ch */ case   37:  		/* bcctrl 20, CR0_LT */
		/* 8208710Ch case   37:*/		if ( 1 ) { regs.LR = 0x82087110; return (uint32)regs.CTR; }
		/* 8208710Ch case   37:*/		return 0x82087110;
		  /* 82087110h */ case   38:  		/* stw R3, <#[R1 + 208]> */
		/* 82087110h case   38:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000D0) );
		/* 82087110h case   38:*/		return 0x82087114;
		  /* 82087114h */ case   39:  		/* li R3, 3201 */
		/* 82087114h case   39:*/		cpu::op::li<0>(regs,&regs.R3,0xC81);
		/* 82087114h case   39:*/		return 0x82087118;
		  /* 82087118h */ case   40:  		/* mtspr CTR, R31 */
		/* 82087118h case   40:*/		regs.CTR = regs.R31;
		/* 82087118h case   40:*/		return 0x8208711C;
		  /* 8208711Ch */ case   41:  		/* bcctrl 20, CR0_LT */
		/* 8208711Ch case   41:*/		if ( 1 ) { regs.LR = 0x82087120; return (uint32)regs.CTR; }
		/* 8208711Ch case   41:*/		return 0x82087120;
		  /* 82087120h */ case   42:  		/* stw R3, <#[R1 + 212]> */
		/* 82087120h case   42:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000D4) );
		/* 82087120h case   42:*/		return 0x82087124;
		  /* 82087124h */ case   43:  		/* li R3, 3201 */
		/* 82087124h case   43:*/		cpu::op::li<0>(regs,&regs.R3,0xC81);
		/* 82087124h case   43:*/		return 0x82087128;
		  /* 82087128h */ case   44:  		/* mtspr CTR, R31 */
		/* 82087128h case   44:*/		regs.CTR = regs.R31;
		/* 82087128h case   44:*/		return 0x8208712C;
		  /* 8208712Ch */ case   45:  		/* bcctrl 20, CR0_LT */
		/* 8208712Ch case   45:*/		if ( 1 ) { regs.LR = 0x82087130; return (uint32)regs.CTR; }
		/* 8208712Ch case   45:*/		return 0x82087130;
		  /* 82087130h */ case   46:  		/* stw R3, <#[R1 + 216]> */
		/* 82087130h case   46:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000D8) );
		/* 82087130h case   46:*/		return 0x82087134;
		  /* 82087134h */ case   47:  		/* li R3, 3201 */
		/* 82087134h case   47:*/		cpu::op::li<0>(regs,&regs.R3,0xC81);
		/* 82087134h case   47:*/		return 0x82087138;
		  /* 82087138h */ case   48:  		/* mtspr CTR, R31 */
		/* 82087138h case   48:*/		regs.CTR = regs.R31;
		/* 82087138h case   48:*/		return 0x8208713C;
		  /* 8208713Ch */ case   49:  		/* bcctrl 20, CR0_LT */
		/* 8208713Ch case   49:*/		if ( 1 ) { regs.LR = 0x82087140; return (uint32)regs.CTR; }
		/* 8208713Ch case   49:*/		return 0x82087140;
		  /* 82087140h */ case   50:  		/* stw R3, <#[R1 + 220]> */
		/* 82087140h case   50:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000DC) );
		/* 82087140h case   50:*/		return 0x82087144;
		  /* 82087144h */ case   51:  		/* li R23, 0 */
		/* 82087144h case   51:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 82087144h case   51:*/		return 0x82087148;
		  /* 82087148h */ case   52:  		/* stw R29, <#[R1 + 192]> */
		/* 82087148h case   52:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x000000C0) );
		/* 82087148h case   52:*/		return 0x8208714C;
		  /* 8208714Ch */ case   53:  		/* stw R31, <#[R1 + 196]> */
		/* 8208714Ch case   53:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x000000C4) );
		/* 8208714Ch case   53:*/		return 0x82087150;
		  /* 82087150h */ case   54:  		/* cmplwi CR6, R30, 0 */
		/* 82087150h case   54:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82087150h case   54:*/		return 0x82087154;
		  /* 82087154h */ case   55:  		/* stw R17, <#[R1 + 200]> */
		/* 82087154h case   55:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R1 + 0x000000C8) );
		/* 82087154h case   55:*/		return 0x82087158;
		  /* 82087158h */ case   56:  		/* bc 12, CR6_EQ, 124 */
		/* 82087158h case   56:*/		if ( regs.CR[6].eq ) { return 0x820871D4;  }
		/* 82087158h case   56:*/		return 0x8208715C;
		  /* 8208715Ch */ case   57:  		/* lis R11, -32256 */
		/* 8208715Ch case   57:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8208715Ch case   57:*/		return 0x82087160;
		  /* 82087160h */ case   58:  		/* addi R3, R1, 192 */
		/* 82087160h case   58:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 82087160h case   58:*/		return 0x82087164;
		  /* 82087164h */ case   59:  		/* addi R4, R11, 23472 */
		/* 82087164h case   59:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x5BB0);
		/* 82087164h case   59:*/		return 0x82087168;
		  /* 82087168h */ case   60:  		/* bl -1736 */
		/* 82087168h case   60:*/		regs.LR = 0x8208716C; return 0x82086AA0;
		/* 82087168h case   60:*/		return 0x8208716C;
		  /* 8208716Ch */ case   61:  		/* lis R11, -32256 */
		/* 8208716Ch case   61:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8208716Ch case   61:*/		return 0x82087170;
		  /* 82087170h */ case   62:  		/* lis R10, -32256 */
		/* 82087170h case   62:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82087170h case   62:*/		return 0x82087174;
		  /* 82087174h */ case   63:  		/* lwz R9, <#[R30 + 16968]> */
		/* 82087174h case   63:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00004248) );
		/* 82087174h case   63:*/		return 0x82087178;
		  /* 82087178h */ case   64:  		/* lis R8, -32256 */
		/* 82087178h case   64:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 82087178h case   64:*/		return 0x8208717C;
		  /* 8208717Ch */ case   65:  		/* addi R7, R10, 23464 */
		/* 8208717Ch case   65:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x5BA8);
		/* 8208717Ch case   65:*/		return 0x82087180;
		  /* 82087180h */ case   66:  		/* addi R4, R8, 23420 */
		/* 82087180h case   66:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R8,0x5B7C);
		/* 82087180h case   66:*/		return 0x82087184;
		  /* 82087184h */ case   67:  		/* li R6, 0 */
		/* 82087184h case   67:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82087184h case   67:*/		return 0x82087188;
		  /* 82087188h */ case   68:  		/* li R5, 21119 */
		/* 82087188h case   68:*/		cpu::op::li<0>(regs,&regs.R5,0x527F);
		/* 82087188h case   68:*/		return 0x8208718C;
		  /* 8208718Ch */ case   69:  		/* addi R3, R1, 192 */
		/* 8208718Ch case   69:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 8208718Ch case   69:*/		return 0x82087190;
		  /* 82087190h */ case   70:  		/* lwz R11, <#[R11 + 1296]> */
		/* 82087190h case   70:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000510) );
		/* 82087190h case   70:*/		return 0x82087194;
		  /* 82087194h */ case   71:  		/* lhz R8, <#[R11 + 4]> */
		/* 82087194h case   71:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 82087194h case   71:*/		return 0x82087198;
		  /* 82087198h */ case   72:  		/* bl -1784 */
		/* 82087198h case   72:*/		regs.LR = 0x8208719C; return 0x82086AA0;
		/* 82087198h case   72:*/		return 0x8208719C;
		  /* 8208719Ch */ case   73:  		/* lis R11, -32256 */
		/* 8208719Ch case   73:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8208719Ch case   73:*/		return 0x820871A0;
		  /* 820871A0h */ case   74:  		/* lwz R7, <#[R30 + 11028]> */
		/* 820871A0h case   74:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00002B14) );
		/* 820871A0h case   74:*/		return 0x820871A4;
		  /* 820871A4h */ case   75:  		/* mr R5, R30 */
		/* 820871A4h case   75:*/		regs.R5 = regs.R30;
		/* 820871A4h case   75:*/		return 0x820871A8;
		  /* 820871A8h */ case   76:  		/* lwz R6, <#[R30 + 11024]> */
		/* 820871A8h case   76:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00002B10) );
		/* 820871A8h case   76:*/		return 0x820871AC;
		  /* 820871ACh */ case   77:  		/* addi R4, R11, 23372 */
		/* 820871ACh case   77:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x5B4C);
		/* 820871ACh case   77:*/		return 0x820871B0;
		  /* 820871B0h */ case   78:  		/* addi R3, R1, 192 */
		/* 820871B0h case   78:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820871B0h case   78:*/		return 0x820871B4;
		  /* 820871B4h */ case   79:  		/* bl -1812 */
		/* 820871B4h case   79:*/		regs.LR = 0x820871B8; return 0x82086AA0;
		/* 820871B4h case   79:*/		return 0x820871B8;
		  /* 820871B8h */ case   80:  		/* lis R11, -32256 */
		/* 820871B8h case   80:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820871B8h case   80:*/		return 0x820871BC;
		  /* 820871BCh */ case   81:  		/* addi R3, R1, 192 */
		/* 820871BCh case   81:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820871BCh case   81:*/		return 0x820871C0;
		  /* 820871C0h */ case   82:  		/* lwz R5, <#[R30 + 11036]> */
		/* 820871C0h case   82:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00002B1C) );
		/* 820871C0h case   82:*/		return 0x820871C4;
		  /* 820871C4h */ case   83:  		/* addi R4, R11, 23336 */
		/* 820871C4h case   83:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x5B28);
		/* 820871C4h case   83:*/		return 0x820871C8;
		  /* 820871C8h */ case   84:  		/* lwz R11, <#[R30 + 11024]> */
		/* 820871C8h case   84:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00002B10) );
		/* 820871C8h case   84:*/		return 0x820871CC;
		  /* 820871CCh */ case   85:  		/* lwz R6, <#[R11]> */
		/* 820871CCh case   85:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 820871CCh case   85:*/		return 0x820871D0;
		  /* 820871D0h */ case   86:  		/* bl -1840 */
		/* 820871D0h case   86:*/		regs.LR = 0x820871D4; return 0x82086AA0;
		/* 820871D0h case   86:*/		return 0x820871D4;
	}
	return 0x820871D4;
} // Block from 82087078h-820871D4h (87 instructions)

//////////////////////////////////////////////////////
// Block at 820871D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820871D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820871D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820871D4);
		  /* 820871D4h */ case    0:  		/* lis R11, -32763 */
		/* 820871D4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8005);
		/* 820871D4h case    0:*/		return 0x820871D8;
		  /* 820871D8h */ case    1:  		/* ori R11, R11, 272 */
		/* 820871D8h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x110);
		/* 820871D8h case    1:*/		return 0x820871DC;
		  /* 820871DCh */ case    2:  		/* cmplw CR6, R24, R11 */
		/* 820871DCh case    2:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R11);
		/* 820871DCh case    2:*/		return 0x820871E0;
		  /* 820871E0h */ case    3:  		/* bc 4, CR6_EQ, 56 */
		/* 820871E0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82087218;  }
		/* 820871E0h case    3:*/		return 0x820871E4;
		  /* 820871E4h */ case    4:  		/* lis R11, 2989 */
		/* 820871E4h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xBAD);
		/* 820871E4h case    4:*/		return 0x820871E8;
		  /* 820871E8h */ case    5:  		/* ori R11, R11, 61453 */
		/* 820871E8h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xF00D);
		/* 820871E8h case    5:*/		return 0x820871EC;
		  /* 820871ECh */ case    6:  		/* cmplw CR6, R28, R11 */
		/* 820871ECh case    6:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 820871ECh case    6:*/		return 0x820871F0;
		  /* 820871F0h */ case    7:  		/* bc 12, CR6_EQ, 40 */
		/* 820871F0h case    7:*/		if ( regs.CR[6].eq ) { return 0x82087218;  }
		/* 820871F0h case    7:*/		return 0x820871F4;
		  /* 820871F4h */ case    8:  		/* cmplwi CR6, R26, 0 */
		/* 820871F4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 820871F4h case    8:*/		return 0x820871F8;
		  /* 820871F8h */ case    9:  		/* bc 12, CR6_EQ, 32 */
		/* 820871F8h case    9:*/		if ( regs.CR[6].eq ) { return 0x82087218;  }
		/* 820871F8h case    9:*/		return 0x820871FC;
		  /* 820871FCh */ case   10:  		/* lis R11, -32256 */
		/* 820871FCh case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820871FCh case   10:*/		return 0x82087200;
		  /* 82087200h */ case   11:  		/* mr R6, R25 */
		/* 82087200h case   11:*/		regs.R6 = regs.R25;
		/* 82087200h case   11:*/		return 0x82087204;
		  /* 82087204h */ case   12:  		/* addi R4, R11, 23176 */
		/* 82087204h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x5A88);
		/* 82087204h case   12:*/		return 0x82087208;
		  /* 82087208h */ case   13:  		/* mr R5, R28 */
		/* 82087208h case   13:*/		regs.R5 = regs.R28;
		/* 82087208h case   13:*/		return 0x8208720C;
		  /* 8208720Ch */ case   14:  		/* addi R3, R1, 192 */
		/* 8208720Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 8208720Ch case   14:*/		return 0x82087210;
		  /* 82087210h */ case   15:  		/* bl -1904 */
		/* 82087210h case   15:*/		regs.LR = 0x82087214; return 0x82086AA0;
		/* 82087210h case   15:*/		return 0x82087214;
		  /* 82087214h */ case   16:  		/* b 1744 */
		/* 82087214h case   16:*/		return 0x820878E4;
		/* 82087214h case   16:*/		return 0x82087218;
	}
	return 0x82087218;
} // Block from 820871D4h-82087218h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82087218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087218);
		  /* 82087218h */ case    0:  		/* rlwinm R11, R27, 0, 0, 4 */
		/* 82087218h case    0:*/		cpu::op::rlwinm<0,0,0,4>(regs,&regs.R11,regs.R27);
		/* 82087218h case    0:*/		return 0x8208721C;
		  /* 8208721Ch */ case    1:  		/* lis R10, 2048 */
		/* 8208721Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x800);
		/* 8208721Ch case    1:*/		return 0x82087220;
		  /* 82087220h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 82087220h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82087220h case    2:*/		return 0x82087224;
		  /* 82087224h */ case    3:  		/* bc 4, CR6_EQ, 68 */
		/* 82087224h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82087268;  }
		/* 82087224h case    3:*/		return 0x82087228;
		  /* 82087228h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 82087228h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82087228h case    4:*/		return 0x8208722C;
		  /* 8208722Ch */ case    5:  		/* bc 12, CR6_EQ, 48 */
		/* 8208722Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x8208725C;  }
		/* 8208722Ch case    5:*/		return 0x82087230;
		  /* 82087230h */ case    6:  		/* lwz R11, <#[R30 + 24408]> */
		/* 82087230h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00005F58) );
		/* 82087230h case    6:*/		return 0x82087234;
		  /* 82087234h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82087234h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82087234h case    7:*/		return 0x82087238;
		  /* 82087238h */ case    8:  		/* bc 12, CR6_EQ, 36 */
		/* 82087238h case    8:*/		if ( regs.CR[6].eq ) { return 0x8208725C;  }
		/* 82087238h case    8:*/		return 0x8208723C;
		  /* 8208723Ch */ case    9:  		/* rlwinm R10, R27, 4, 22, 27 */
		/* 8208723Ch case    9:*/		cpu::op::rlwinm<0,4,22,27>(regs,&regs.R10,regs.R27);
		/* 8208723Ch case    9:*/		return 0x82087240;
		  /* 82087240h */ case   10:  		/* lis R9, -32256 */
		/* 82087240h case   10:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 82087240h case   10:*/		return 0x82087244;
		  /* 82087244h */ case   11:  		/* add R11, R10, R11 */
		/* 82087244h case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82087244h case   11:*/		return 0x82087248;
		  /* 82087248h */ case   12:  		/* addi R4, R9, 23000 */
		/* 82087248h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x59D8);
		/* 82087248h case   12:*/		return 0x8208724C;
		  /* 8208724Ch */ case   13:  		/* addi R3, R1, 192 */
		/* 8208724Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 8208724Ch case   13:*/		return 0x82087250;
		  /* 82087250h */ case   14:  		/* ld R5, <#[R11 + 8]> */
		/* 82087250h case   14:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R11 + 0x00000008) );
		/* 82087250h case   14:*/		return 0x82087254;
		  /* 82087254h */ case   15:  		/* bl -1972 */
		/* 82087254h case   15:*/		regs.LR = 0x82087258; return 0x82086AA0;
		/* 82087254h case   15:*/		return 0x82087258;
		  /* 82087258h */ case   16:  		/* b 1676 */
		/* 82087258h case   16:*/		return 0x820878E4;
		/* 82087258h case   16:*/		return 0x8208725C;
	}
	return 0x8208725C;
} // Block from 82087218h-8208725Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8208725Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208725C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208725C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208725C);
		  /* 8208725Ch */ case    0:  		/* lis R11, -32256 */
		/* 8208725Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8208725Ch case    0:*/		return 0x82087260;
		  /* 82087260h */ case    1:  		/* addi R4, R11, 22840 */
		/* 82087260h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x5938);
		/* 82087260h case    1:*/		return 0x82087264;
		  /* 82087264h */ case    2:  		/* b 1656 */
		/* 82087264h case    2:*/		return 0x820878DC;
		/* 82087264h case    2:*/		return 0x82087268;
	}
	return 0x82087268;
} // Block from 8208725Ch-82087268h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82087268h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087268);
		  /* 82087268h */ case    0:  		/* lis R10, 4096 */
		/* 82087268h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x1000);
		/* 82087268h case    0:*/		return 0x8208726C;
		  /* 8208726Ch */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 8208726Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8208726Ch case    1:*/		return 0x82087270;
		  /* 82087270h */ case    2:  		/* bc 4, CR6_EQ, 24 */
		/* 82087270h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82087288;  }
		/* 82087270h case    2:*/		return 0x82087274;
		  /* 82087274h */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 82087274h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82087274h case    3:*/		return 0x82087278;
		  /* 82087278h */ case    4:  		/* bc 12, CR6_EQ, 1644 */
		/* 82087278h case    4:*/		if ( regs.CR[6].eq ) { return 0x820878E4;  }
		/* 82087278h case    4:*/		return 0x8208727C;
		  /* 8208727Ch */ case    5:  		/* lis R10, -32256 */
		/* 8208727Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8208727Ch case    5:*/		return 0x82087280;
		  /* 82087280h */ case    6:  		/* addi R4, R10, 22672 */
		/* 82087280h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x5890);
		/* 82087280h case    6:*/		return 0x82087284;
		  /* 82087284h */ case    7:  		/* b 32 */
		/* 82087284h case    7:*/		return 0x820872A4;
		/* 82087284h case    7:*/		return 0x82087288;
	}
	return 0x82087288;
} // Block from 82087268h-82087288h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82087288h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087288);
		  /* 82087288h */ case    0:  		/* lis R10, 6144 */
		/* 82087288h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x1800);
		/* 82087288h case    0:*/		return 0x8208728C;
		  /* 8208728Ch */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 8208728Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8208728Ch case    1:*/		return 0x82087290;
		  /* 82087290h */ case    2:  		/* bc 4, CR6_EQ, 44 */
		/* 82087290h case    2:*/		if ( !regs.CR[6].eq ) { return 0x820872BC;  }
		/* 82087290h case    2:*/		return 0x82087294;
		  /* 82087294h */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 82087294h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82087294h case    3:*/		return 0x82087298;
		  /* 82087298h */ case    4:  		/* bc 12, CR6_EQ, 1612 */
		/* 82087298h case    4:*/		if ( regs.CR[6].eq ) { return 0x820878E4;  }
		/* 82087298h case    4:*/		return 0x8208729C;
		  /* 8208729Ch */ case    5:  		/* lis R10, -32256 */
		/* 8208729Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8208729Ch case    5:*/		return 0x820872A0;
		  /* 820872A0h */ case    6:  		/* addi R4, R10, 22544 */
		/* 820872A0h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x5810);
		/* 820872A0h case    6:*/		return 0x820872A4;
	}
	return 0x820872A4;
} // Block from 82087288h-820872A4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820872A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820872A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820872A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820872A4);
		  /* 820872A4h */ case    0:  		/* lis R11, 0 */
		/* 820872A4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x0);
		/* 820872A4h case    0:*/		return 0x820872A8;
		  /* 820872A8h */ case    1:  		/* mr R5, R27 */
		/* 820872A8h case    1:*/		regs.R5 = regs.R27;
		/* 820872A8h case    1:*/		return 0x820872AC;
		  /* 820872ACh */ case    2:  		/* ori R11, R11, 53539 */
		/* 820872ACh case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xD123);
		/* 820872ACh case    2:*/		return 0x820872B0;
		  /* 820872B0h */ case    3:  		/* addi R3, R1, 192 */
		/* 820872B0h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820872B0h case    3:*/		return 0x820872B4;
		  /* 820872B4h */ case    4:  		/* rlwimi R5, R11, 16, 0, 25 */
		/* 820872B4h case    4:*/		cpu::op::rlwimi<0,16,0,25>(regs,&regs.R5,regs.R11);
		/* 820872B4h case    4:*/		return 0x820872B8;
		  /* 820872B8h */ case    5:  		/* b 76 */
		/* 820872B8h case    5:*/		return 0x82087304;
		/* 820872B8h case    5:*/		return 0x820872BC;
	}
	return 0x820872BC;
} // Block from 820872A4h-820872BCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 820872BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820872BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820872BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820872BC);
		  /* 820872BCh */ case    0:  		/* rlwinm R11, R27, 0, 0, 1 */
		/* 820872BCh case    0:*/		cpu::op::rlwinm<0,0,0,1>(regs,&regs.R11,regs.R27);
		/* 820872BCh case    0:*/		return 0x820872C0;
		  /* 820872C0h */ case    1:  		/* lis R10, -32768 */
		/* 820872C0h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 820872C0h case    1:*/		return 0x820872C4;
		  /* 820872C4h */ case    2:  		/* addi R3, R1, 192 */
		/* 820872C4h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820872C4h case    2:*/		return 0x820872C8;
		  /* 820872C8h */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 820872C8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820872C8h case    3:*/		return 0x820872CC;
		  /* 820872CCh */ case    4:  		/* bc 4, CR6_EQ, 32 */
		/* 820872CCh case    4:*/		if ( !regs.CR[6].eq ) { return 0x820872EC;  }
		/* 820872CCh case    4:*/		return 0x820872D0;
		  /* 820872D0h */ case    5:  		/* lis R11, -32256 */
		/* 820872D0h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820872D0h case    5:*/		return 0x820872D4;
		  /* 820872D4h */ case    6:  		/* rlwinm R5, R27, 2, 0, 29 */
		/* 820872D4h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R27);
		/* 820872D4h case    6:*/		return 0x820872D8;
		  /* 820872D8h */ case    7:  		/* addi R4, R11, 22392 */
		/* 820872D8h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x5778);
		/* 820872D8h case    7:*/		return 0x820872DC;
		  /* 820872DCh */ case    8:  		/* bl -2108 */
		/* 820872DCh case    8:*/		regs.LR = 0x820872E0; return 0x82086AA0;
		/* 820872DCh case    8:*/		return 0x820872E0;
		  /* 820872E0h */ case    9:  		/* lis R11, -32256 */
		/* 820872E0h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820872E0h case    9:*/		return 0x820872E4;
		  /* 820872E4h */ case   10:  		/* addi R4, R11, 22288 */
		/* 820872E4h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x5710);
		/* 820872E4h case   10:*/		return 0x820872E8;
		  /* 820872E8h */ case   11:  		/* b 1524 */
		/* 820872E8h case   11:*/		return 0x820878DC;
		/* 820872E8h case   11:*/		return 0x820872EC;
	}
	return 0x820872EC;
} // Block from 820872BCh-820872ECh (12 instructions)

//////////////////////////////////////////////////////
// Block at 820872ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820872EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820872EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820872EC);
		  /* 820872ECh */ case    0:  		/* lis R10, -16384 */
		/* 820872ECh case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFC000);
		/* 820872ECh case    0:*/		return 0x820872F0;
		  /* 820872F0h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 820872F0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 820872F0h case    1:*/		return 0x820872F4;
		  /* 820872F4h */ case    2:  		/* bc 4, CR6_EQ, 24 */
		/* 820872F4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8208730C;  }
		/* 820872F4h case    2:*/		return 0x820872F8;
		  /* 820872F8h */ case    3:  		/* lis R11, -32256 */
		/* 820872F8h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820872F8h case    3:*/		return 0x820872FC;
		  /* 820872FCh */ case    4:  		/* rlwinm R5, R27, 2, 0, 29 */
		/* 820872FCh case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R27);
		/* 820872FCh case    4:*/		return 0x82087300;
		  /* 82087300h */ case    5:  		/* addi R4, R11, 22152 */
		/* 82087300h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x5688);
		/* 82087300h case    5:*/		return 0x82087304;
	}
	return 0x82087304;
} // Block from 820872ECh-82087304h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82087304h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087304( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087304) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087304);
		  /* 82087304h */ case    0:  		/* bl -2148 */
		/* 82087304h case    0:*/		regs.LR = 0x82087308; return 0x82086AA0;
		/* 82087304h case    0:*/		return 0x82087308;
		  /* 82087308h */ case    1:  		/* b 1500 */
		/* 82087308h case    1:*/		return 0x820878E4;
		/* 82087308h case    1:*/		return 0x8208730C;
	}
	return 0x8208730C;
} // Block from 82087304h-8208730Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8208730Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208730C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208730C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208730C);
		  /* 8208730Ch */ case    0:  		/* bl -2020 */
		/* 8208730Ch case    0:*/		regs.LR = 0x82087310; return 0x82086B28;
		/* 8208730Ch case    0:*/		return 0x82087310;
		  /* 82087310h */ case    1:  		/* lis R12, 32763 */
		/* 82087310h case    1:*/		cpu::op::lis<0>(regs,&regs.R12,0x7FFB);
		/* 82087310h case    1:*/		return 0x82087314;
		  /* 82087314h */ case    2:  		/* lis R11, 1025 */
		/* 82087314h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0x401);
		/* 82087314h case    2:*/		return 0x82087318;
		  /* 82087318h */ case    3:  		/* ori R12, R12, 61664 */
		/* 82087318h case    3:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xF0E0);
		/* 82087318h case    3:*/		return 0x8208731C;
		  /* 8208731Ch */ case    4:  		/* and R30, R24, R12 */
		/* 8208731Ch case    4:*/		cpu::op::and<0>(regs,&regs.R30,regs.R24,regs.R12);
		/* 8208731Ch case    4:*/		return 0x82087320;
		  /* 82087320h */ case    5:  		/* cmplw CR6, R30, R11 */
		/* 82087320h case    5:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82087320h case    5:*/		return 0x82087324;
		  /* 82087324h */ case    6:  		/* bc 4, CR6_EQ, 40 */
		/* 82087324h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8208734C;  }
		/* 82087324h case    6:*/		return 0x82087328;
		  /* 82087328h */ case    7:  		/* lis R11, -32256 */
		/* 82087328h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82087328h case    7:*/		return 0x8208732C;
		  /* 8208732Ch */ case    8:  		/* addi R3, R1, 192 */
		/* 8208732Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 8208732Ch case    8:*/		return 0x82087330;
		  /* 82087330h */ case    9:  		/* addi R4, R11, 22016 */
		/* 82087330h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x5600);
		/* 82087330h case    9:*/		return 0x82087334;
		  /* 82087334h */ case   10:  		/* bl -2196 */
		/* 82087334h case   10:*/		regs.LR = 0x82087338; return 0x82086AA0;
		/* 82087334h case   10:*/		return 0x82087338;
		  /* 82087338h */ case   11:  		/* lis R11, -32256 */
		/* 82087338h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82087338h case   11:*/		return 0x8208733C;
		  /* 8208733Ch */ case   12:  		/* addi R3, R1, 192 */
		/* 8208733Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 8208733Ch case   12:*/		return 0x82087340;
		  /* 82087340h */ case   13:  		/* addi R4, R11, 21864 */
		/* 82087340h case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x5568);
		/* 82087340h case   13:*/		return 0x82087344;
		  /* 82087344h */ case   14:  		/* bl -2212 */
		/* 82087344h case   14:*/		regs.LR = 0x82087348; return 0x82086AA0;
		/* 82087344h case   14:*/		return 0x82087348;
		  /* 82087348h */ case   15:  		/* li R23, 1 */
		/* 82087348h case   15:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 82087348h case   15:*/		return 0x8208734C;
	}
	return 0x8208734C;
} // Block from 8208730Ch-8208734Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 8208734Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208734C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208734C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208734C);
		  /* 8208734Ch */ case    0:  		/* rlwinm. R11, R22, 0, 26, 26 */
		/* 8208734Ch case    0:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R22);
		/* 8208734Ch case    0:*/		return 0x82087350;
		  /* 82087350h */ case    1:  		/* bc 12, CR0_EQ, 76 */
		/* 82087350h case    1:*/		if ( regs.CR[0].eq ) { return 0x8208739C;  }
		/* 82087350h case    1:*/		return 0x82087354;
		  /* 82087354h */ case    2:  		/* rlwinm. R11, R22, 0, 21, 25 */
		/* 82087354h case    2:*/		cpu::op::rlwinm<1,0,21,25>(regs,&regs.R11,regs.R22);
		/* 82087354h case    2:*/		return 0x82087358;
		  /* 82087358h */ case    3:  		/* bc 4, CR0_EQ, 68 */
		/* 82087358h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8208739C;  }
		/* 82087358h case    3:*/		return 0x8208735C;
		  /* 8208735Ch */ case    4:  		/* rlwinm R11, R22, 21, 28, 29 */
		/* 8208735Ch case    4:*/		cpu::op::rlwinm<0,21,28,29>(regs,&regs.R11,regs.R22);
		/* 8208735Ch case    4:*/		return 0x82087360;
		  /* 82087360h */ case    5:  		/* addi R10, R1, 208 */
		/* 82087360h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xD0);
		/* 82087360h case    5:*/		return 0x82087364;
		  /* 82087364h */ case    6:  		/* lis R9, 32 */
		/* 82087364h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0x20);
		/* 82087364h case    6:*/		return 0x82087368;
		  /* 82087368h */ case    7:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82087368h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82087368h case    7:*/		return 0x8208736C;
		  /* 8208736Ch */ case    8:  		/* rlwinm R11, R11, 0, 5, 11 */
		/* 8208736Ch case    8:*/		cpu::op::rlwinm<0,0,5,11>(regs,&regs.R11,regs.R11);
		/* 8208736Ch case    8:*/		return 0x82087370;
		  /* 82087370h */ case    9:  		/* cmplw CR6, R11, R9 */
		/* 82087370h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82087370h case    9:*/		return 0x82087374;
		  /* 82087374h */ case   10:  		/* bc 4, CR6_EQ, 40 */
		/* 82087374h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8208739C;  }
		/* 82087374h case   10:*/		return 0x82087378;
		  /* 82087378h */ case   11:  		/* lis R11, -32256 */
		/* 82087378h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82087378h case   11:*/		return 0x8208737C;
		  /* 8208737Ch */ case   12:  		/* addi R3, R1, 192 */
		/* 8208737Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 8208737Ch case   12:*/		return 0x82087380;
		  /* 82087380h */ case   13:  		/* addi R4, R11, 21728 */
		/* 82087380h case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x54E0);
		/* 82087380h case   13:*/		return 0x82087384;
		  /* 82087384h */ case   14:  		/* bl -2276 */
		/* 82087384h case   14:*/		regs.LR = 0x82087388; return 0x82086AA0;
		/* 82087384h case   14:*/		return 0x82087388;
		  /* 82087388h */ case   15:  		/* lis R11, -32256 */
		/* 82087388h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82087388h case   15:*/		return 0x8208738C;
		  /* 8208738Ch */ case   16:  		/* addi R3, R1, 192 */
		/* 8208738Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 8208738Ch case   16:*/		return 0x82087390;
		  /* 82087390h */ case   17:  		/* addi R4, R11, 21552 */
		/* 82087390h case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x5430);
		/* 82087390h case   17:*/		return 0x82087394;
		  /* 82087394h */ case   18:  		/* bl -2292 */
		/* 82087394h case   18:*/		regs.LR = 0x82087398; return 0x82086AA0;
		/* 82087394h case   18:*/		return 0x82087398;
		  /* 82087398h */ case   19:  		/* li R23, 1 */
		/* 82087398h case   19:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 82087398h case   19:*/		return 0x8208739C;
	}
	return 0x8208739C;
} // Block from 8208734Ch-8208739Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 8208739Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208739C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208739C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208739C);
		  /* 8208739Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8208739Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8208739Ch case    0:*/		return 0x820873A0;
		  /* 820873A0h */ case    1:  		/* bc 4, CR6_EQ, 56 */
		/* 820873A0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820873D8;  }
		/* 820873A0h case    1:*/		return 0x820873A4;
		  /* 820873A4h */ case    2:  		/* lis R11, -32256 */
		/* 820873A4h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820873A4h case    2:*/		return 0x820873A8;
		  /* 820873A8h */ case    3:  		/* addi R3, R1, 192 */
		/* 820873A8h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820873A8h case    3:*/		return 0x820873AC;
		  /* 820873ACh */ case    4:  		/* addi R4, R11, 21408 */
		/* 820873ACh case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x53A0);
		/* 820873ACh case    4:*/		return 0x820873B0;
		  /* 820873B0h */ case    5:  		/* bl -2320 */
		/* 820873B0h case    5:*/		regs.LR = 0x820873B4; return 0x82086AA0;
		/* 820873B0h case    5:*/		return 0x820873B4;
		  /* 820873B4h */ case    6:  		/* lis R11, -32256 */
		/* 820873B4h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820873B4h case    6:*/		return 0x820873B8;
		  /* 820873B8h */ case    7:  		/* addi R3, R1, 192 */
		/* 820873B8h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820873B8h case    7:*/		return 0x820873BC;
		  /* 820873BCh */ case    8:  		/* addi R4, R11, 21256 */
		/* 820873BCh case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x5308);
		/* 820873BCh case    8:*/		return 0x820873C0;
		  /* 820873C0h */ case    9:  		/* bl -2336 */
		/* 820873C0h case    9:*/		regs.LR = 0x820873C4; return 0x82086AA0;
		/* 820873C0h case    9:*/		return 0x820873C4;
		  /* 820873C4h */ case   10:  		/* lis R11, -32256 */
		/* 820873C4h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820873C4h case   10:*/		return 0x820873C8;
		  /* 820873C8h */ case   11:  		/* addi R3, R1, 192 */
		/* 820873C8h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820873C8h case   11:*/		return 0x820873CC;
		  /* 820873CCh */ case   12:  		/* addi R4, R11, 21204 */
		/* 820873CCh case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x52D4);
		/* 820873CCh case   12:*/		return 0x820873D0;
		  /* 820873D0h */ case   13:  		/* bl -2352 */
		/* 820873D0h case   13:*/		regs.LR = 0x820873D4; return 0x82086AA0;
		/* 820873D0h case   13:*/		return 0x820873D4;
		  /* 820873D4h */ case   14:  		/* li R23, 1 */
		/* 820873D4h case   14:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 820873D4h case   14:*/		return 0x820873D8;
	}
	return 0x820873D8;
} // Block from 8208739Ch-820873D8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 820873D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820873D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820873D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820873D8);
		  /* 820873D8h */ case    0:  		/* lis R11, 64 */
		/* 820873D8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x40);
		/* 820873D8h case    0:*/		return 0x820873DC;
		  /* 820873DCh */ case    1:  		/* rlwinm R10, R30, 0, 9, 26 */
		/* 820873DCh case    1:*/		cpu::op::rlwinm<0,0,9,26>(regs,&regs.R10,regs.R30);
		/* 820873DCh case    1:*/		return 0x820873E0;
		  /* 820873E0h */ case    2:  		/* ori R11, R11, 32 */
		/* 820873E0h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x20);
		/* 820873E0h case    2:*/		return 0x820873E4;
		  /* 820873E4h */ case    3:  		/* rlwinm R10, R10, 0, 26, 9 */
		/* 820873E4h case    3:*/		cpu::op::rlwinm<0,0,26,9>(regs,&regs.R10,regs.R10);
		/* 820873E4h case    3:*/		return 0x820873E8;
		  /* 820873E8h */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 820873E8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 820873E8h case    4:*/		return 0x820873EC;
		  /* 820873ECh */ case    5:  		/* bc 4, CR6_EQ, 1212 */
		/* 820873ECh case    5:*/		if ( !regs.CR[6].eq ) { return 0x820878A8;  }
		/* 820873ECh case    5:*/		return 0x820873F0;
		  /* 820873F0h */ case    6:  		/* lis R11, -32256 */
		/* 820873F0h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820873F0h case    6:*/		return 0x820873F4;
		  /* 820873F4h */ case    7:  		/* addi R3, R1, 192 */
		/* 820873F4h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820873F4h case    7:*/		return 0x820873F8;
		  /* 820873F8h */ case    8:  		/* addi R4, R11, 21128 */
		/* 820873F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x5288);
		/* 820873F8h case    8:*/		return 0x820873FC;
		  /* 820873FCh */ case    9:  		/* li R24, 0 */
		/* 820873FCh case    9:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 820873FCh case    9:*/		return 0x82087400;
	}
	return 0x82087400;
} // Block from 820873D8h-82087400h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82087400h
// Function '?End@Font@ATG@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087400);
		  /* 82087400h */ case    0:  		/* bl -2400 */
		/* 82087400h case    0:*/		regs.LR = 0x82087404; return 0x82086AA0;
		/* 82087400h case    0:*/		return 0x82087404;
		  /* 82087404h */ case    1:  		/* lis R11, -32256 */
		/* 82087404h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82087404h case    1:*/		return 0x82087408;
		  /* 82087408h */ case    2:  		/* addi R3, R1, 192 */
		/* 82087408h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 82087408h case    2:*/		return 0x8208740C;
		  /* 8208740Ch */ case    3:  		/* addi R4, R11, 21068 */
		/* 8208740Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x524C);
		/* 8208740Ch case    3:*/		return 0x82087410;
		  /* 82087410h */ case    4:  		/* bl -2416 */
		/* 82087410h case    4:*/		regs.LR = 0x82087414; return 0x82086AA0;
		/* 82087410h case    4:*/		return 0x82087414;
		  /* 82087414h */ case    5:  		/* lis R11, -32256 */
		/* 82087414h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82087414h case    5:*/		return 0x82087418;
		  /* 82087418h */ case    6:  		/* addi R3, R1, 192 */
		/* 82087418h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 82087418h case    6:*/		return 0x8208741C;
		  /* 8208741Ch */ case    7:  		/* addi R4, R11, 21036 */
		/* 8208741Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x522C);
		/* 8208741Ch case    7:*/		return 0x82087420;
		  /* 82087420h */ case    8:  		/* bl -2432 */
		/* 82087420h case    8:*/		regs.LR = 0x82087424; return 0x82086AA0;
		/* 82087420h case    8:*/		return 0x82087424;
		  /* 82087424h */ case    9:  		/* lis R11, -32256 */
		/* 82087424h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82087424h case    9:*/		return 0x82087428;
		  /* 82087428h */ case   10:  		/* lis R10, -32256 */
		/* 82087428h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82087428h case   10:*/		return 0x8208742C;
		  /* 8208742Ch */ case   11:  		/* lis R9, -32256 */
		/* 8208742Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8208742Ch case   11:*/		return 0x82087430;
		  /* 82087430h */ case   12:  		/* lis R8, -32256 */
		/* 82087430h case   12:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 82087430h case   12:*/		return 0x82087434;
		  /* 82087434h */ case   13:  		/* lis R7, -32256 */
		/* 82087434h case   13:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 82087434h case   13:*/		return 0x82087438;
		  /* 82087438h */ case   14:  		/* lis R6, -32256 */
		/* 82087438h case   14:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8200);
		/* 82087438h case   14:*/		return 0x8208743C;
		  /* 8208743Ch */ case   15:  		/* li R29, 0 */
		/* 8208743Ch case   15:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8208743Ch case   15:*/		return 0x82087440;
		  /* 82087440h */ case   16:  		/* addi R16, R1, 224 */
		/* 82087440h case   16:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R1,0xE0);
		/* 82087440h case   16:*/		return 0x82087444;
		  /* 82087444h */ case   17:  		/* addi R23, R11, 20952 */
		/* 82087444h case   17:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0x51D8);
		/* 82087444h case   17:*/		return 0x82087448;
		  /* 82087448h */ case   18:  		/* addi R22, R10, 20888 */
		/* 82087448h case   18:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R10,0x5198);
		/* 82087448h case   18:*/		return 0x8208744C;
		  /* 8208744Ch */ case   19:  		/* addi R21, R9, 20768 */
		/* 8208744Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R9,0x5120);
		/* 8208744Ch case   19:*/		return 0x82087450;
		  /* 82087450h */ case   20:  		/* addi R20, R8, 20680 */
		/* 82087450h case   20:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R8,0x50C8);
		/* 82087450h case   20:*/		return 0x82087454;
		  /* 82087454h */ case   21:  		/* addi R19, R7, 20600 */
		/* 82087454h case   21:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R7,0x5078);
		/* 82087454h case   21:*/		return 0x82087458;
		  /* 82087458h */ case   22:  		/* addi R18, R6, 20592 */
		/* 82087458h case   22:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R6,0x5070);
		/* 82087458h case   22:*/		return 0x8208745C;
		  /* 8208745Ch */ case   23:  		/* cmpwi CR6, R24, 0 */
		/* 8208745Ch case   23:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 8208745Ch case   23:*/		return 0x82087460;
		  /* 82087460h */ case   24:  		/* bc 4, CR6_EQ, 16 */
		/* 82087460h case   24:*/		if ( !regs.CR[6].eq ) { return 0x82087470;  }
		/* 82087460h case   24:*/		return 0x82087464;
		  /* 82087464h */ case   25:  		/* mr R4, R18 */
		/* 82087464h case   25:*/		regs.R4 = regs.R18;
		/* 82087464h case   25:*/		return 0x82087468;
		  /* 82087468h */ case   26:  		/* addi R3, R1, 192 */
		/* 82087468h case   26:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 82087468h case   26:*/		return 0x8208746C;
		  /* 8208746Ch */ case   27:  		/* bl -2508 */
		/* 8208746Ch case   27:*/		regs.LR = 0x82087470; return 0x82086AA0;
		/* 8208746Ch case   27:*/		return 0x82087470;
	}
	return 0x82087470;
} // Block from 82087400h-82087470h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82087470h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087470( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087470) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087470);
		  /* 82087470h */ case    0:  		/* mr R8, R16 */
		/* 82087470h case    0:*/		regs.R8 = regs.R16;
		/* 82087470h case    0:*/		return 0x82087474;
		  /* 82087474h */ case    1:  		/* li R7, 31 */
		/* 82087474h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x1F);
		/* 82087474h case    1:*/		return 0x82087478;
		  /* 82087478h */ case    2:  		/* li R6, 0 */
		/* 82087478h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82087478h case    2:*/		return 0x8208747C;
		  /* 8208747Ch */ case    3:  		/* mr R5, R29 */
		/* 8208747Ch case    3:*/		regs.R5 = regs.R29;
		/* 8208747Ch case    3:*/		return 0x82087480;
		  /* 82087480h */ case    4:  		/* mr R4, R17 */
		/* 82087480h case    4:*/		regs.R4 = regs.R17;
		/* 82087480h case    4:*/		return 0x82087484;
		  /* 82087484h */ case    5:  		/* mr R3, R31 */
		/* 82087484h case    5:*/		regs.R3 = regs.R31;
		/* 82087484h case    5:*/		return 0x82087488;
		  /* 82087488h */ case    6:  		/* bl -1784 */
		/* 82087488h case    6:*/		regs.LR = 0x8208748C; return 0x82086D90;
		/* 82087488h case    6:*/		return 0x8208748C;
		  /* 8208748Ch */ case    7:  		/* li R30, 0 */
		/* 8208748Ch case    7:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8208748Ch case    7:*/		return 0x82087490;
		  /* 82087490h */ case    8:  		/* rlwinm R25, R29, 5, 0, 26 */
		/* 82087490h case    8:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R25,regs.R29);
		/* 82087490h case    8:*/		return 0x82087494;
		  /* 82087494h */ case    9:  		/* cmpwi CR6, R29, 0 */
		/* 82087494h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 82087494h case    9:*/		return 0x82087498;
		  /* 82087498h */ case   10:  		/* bc 4, CR6_GT, 84 */
		/* 82087498h case   10:*/		if ( !regs.CR[6].gt ) { return 0x820874EC;  }
		/* 82087498h case   10:*/		return 0x8208749C;
		  /* 8208749Ch */ case   11:  		/* add R11, R25, R30 */
		/* 8208749Ch case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R25,regs.R30);
		/* 8208749Ch case   11:*/		return 0x820874A0;
		  /* 820874A0h */ case   12:  		/* add R10, R25, R30 */
		/* 820874A0h case   12:*/		cpu::op::add<0>(regs,&regs.R10,regs.R25,regs.R30);
		/* 820874A0h case   12:*/		return 0x820874A4;
		  /* 820874A4h */ case   13:  		/* addi R8, R11, -32 */
		/* 820874A4h case   13:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFE0);
		/* 820874A4h case   13:*/		return 0x820874A8;
		  /* 820874A8h */ case   14:  		/* mulli R10, R10, 24 */
		/* 820874A8h case   14:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x18);
		/* 820874A8h case   14:*/		return 0x820874AC;
		  /* 820874ACh */ case   15:  		/* addi R11, R1, 224 */
		/* 820874ACh case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xE0);
		/* 820874ACh case   15:*/		return 0x820874B0;
		  /* 820874B0h */ case   16:  		/* addi R9, R1, 224 */
		/* 820874B0h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xE0);
		/* 820874B0h case   16:*/		return 0x820874B4;
		  /* 820874B4h */ case   17:  		/* mulli R8, R8, 24 */
		/* 820874B4h case   17:*/		cpu::op::mulli<0>(regs,&regs.R8,regs.R8,0x18);
		/* 820874B4h case   17:*/		return 0x820874B8;
		  /* 820874B8h */ case   18:  		/* add R11, R10, R11 */
		/* 820874B8h case   18:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 820874B8h case   18:*/		return 0x820874BC;
		  /* 820874BCh */ case   19:  		/* add R10, R8, R9 */
		/* 820874BCh case   19:*/		cpu::op::add<0>(regs,&regs.R10,regs.R8,regs.R9);
		/* 820874BCh case   19:*/		return 0x820874C0;
		  /* 820874C0h */ case   20:  		/* addi R9, R11, 24 */
		/* 820874C0h case   20:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x18);
		/* 820874C0h case   20:*/		return 0x820874C4;
		  /* 820874C4h */ case   21:  		/* lbz R8, <#[R11]> */
		/* 820874C4h case   21:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 820874C4h case   21:*/		return 0x820874C8;
		  /* 820874C8h */ case   22:  		/* lbz R7, <#[R10]> */
		/* 820874C8h case   22:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 820874C8h case   22:*/		return 0x820874CC;
		  /* 820874CCh */ case   23:  		/* subf. R8, R7, R8 */
		/* 820874CCh case   23:*/		cpu::op::subf<1>(regs,&regs.R8,regs.R7,regs.R8);
		/* 820874CCh case   23:*/		return 0x820874D0;
		  /* 820874D0h */ case   24:  		/* bc 4, CR0_EQ, 20 */
		/* 820874D0h case   24:*/		if ( !regs.CR[0].eq ) { return 0x820874E4;  }
		/* 820874D0h case   24:*/		return 0x820874D4;
		  /* 820874D4h */ case   25:  		/* addi R11, R11, 1 */
		/* 820874D4h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820874D4h case   25:*/		return 0x820874D8;
		  /* 820874D8h */ case   26:  		/* addi R10, R10, 1 */
		/* 820874D8h case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820874D8h case   26:*/		return 0x820874DC;
		  /* 820874DCh */ case   27:  		/* cmpw CR6, R11, R9 */
		/* 820874DCh case   27:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R9);
		/* 820874DCh case   27:*/		return 0x820874E0;
		  /* 820874E0h */ case   28:  		/* bc 4, CR6_EQ, -28 */
		/* 820874E0h case   28:*/		if ( !regs.CR[6].eq ) { return 0x820874C4;  }
		/* 820874E0h case   28:*/		return 0x820874E4;
	}
	return 0x820874E4;
} // Block from 82087470h-820874E4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 820874E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820874E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820874E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820874E4);
		  /* 820874E4h */ case    0:  		/* cmpwi CR0, R8, 0 */
		/* 820874E4h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 820874E4h case    0:*/		return 0x820874E8;
		  /* 820874E8h */ case    1:  		/* bc 12, CR0_EQ, 308 */
		/* 820874E8h case    1:*/		if ( regs.CR[0].eq ) { return 0x8208761C;  }
		/* 820874E8h case    1:*/		return 0x820874EC;
	}
	return 0x820874EC;
} // Block from 820874E4h-820874ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 820874ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820874EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820874EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820874EC);
		  /* 820874ECh */ case    0:  		/* add R11, R25, R30 */
		/* 820874ECh case    0:*/		cpu::op::add<0>(regs,&regs.R11,regs.R25,regs.R30);
		/* 820874ECh case    0:*/		return 0x820874F0;
		  /* 820874F0h */ case    1:  		/* addi R10, R1, 228 */
		/* 820874F0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xE4);
		/* 820874F0h case    1:*/		return 0x820874F4;
		  /* 820874F4h */ case    2:  		/* mulli R11, R11, 24 */
		/* 820874F4h case    2:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x18);
		/* 820874F4h case    2:*/		return 0x820874F8;
		  /* 820874F8h */ case    3:  		/* lwzx R10, <#[R11 + R10]> */
		/* 820874F8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820874F8h case    3:*/		return 0x820874FC;
		  /* 820874FCh */ case    4:  		/* addi R9, R1, 224 */
		/* 820874FCh case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xE0);
		/* 820874FCh case    4:*/		return 0x82087500;
		  /* 82087500h */ case    5:  		/* addi R8, R1, 244 */
		/* 82087500h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xF4);
		/* 82087500h case    5:*/		return 0x82087504;
		  /* 82087504h */ case    6:  		/* rlwinm. R7, R10, 0, 21, 21 */
		/* 82087504h case    6:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R7,regs.R10);
		/* 82087504h case    6:*/		return 0x82087508;
		  /* 82087508h */ case    7:  		/* rlwinm R28, R10, 0, 26, 31 */
		/* 82087508h case    7:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R28,regs.R10);
		/* 82087508h case    7:*/		return 0x8208750C;
		  /* 8208750Ch */ case    8:  		/* lwzx R10, <#[R11 + R9]> */
		/* 8208750Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8208750Ch case    8:*/		return 0x82087510;
		  /* 82087510h */ case    9:  		/* lwzx R11, <#[R11 + R8]> */
		/* 82087510h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82087510h case    9:*/		return 0x82087514;
		  /* 82087514h */ case   10:  		/* rlwinm R27, R10, 1, 31, 31 */
		/* 82087514h case   10:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R27,regs.R10);
		/* 82087514h case   10:*/		return 0x82087518;
		  /* 82087518h */ case   11:  		/* rlwinm R26, R11, 23, 30, 31 */
		/* 82087518h case   11:*/		cpu::op::rlwinm<0,23,30,31>(regs,&regs.R26,regs.R11);
		/* 82087518h case   11:*/		return 0x8208751C;
		  /* 8208751Ch */ case   12:  		/* bc 12, CR0_EQ, 36 */
		/* 8208751Ch case   12:*/		if ( regs.CR[0].eq ) { return 0x82087540;  }
		/* 8208751Ch case   12:*/		return 0x82087520;
		  /* 82087520h */ case   13:  		/* cmplwi CR6, R26, 1 */
		/* 82087520h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000001);
		/* 82087520h case   13:*/		return 0x82087524;
		  /* 82087524h */ case   14:  		/* bc 12, CR6_EQ, 28 */
		/* 82087524h case   14:*/		if ( regs.CR[6].eq ) { return 0x82087540;  }
		/* 82087524h case   14:*/		return 0x82087528;
		  /* 82087528h */ case   15:  		/* mr R4, R19 */
		/* 82087528h case   15:*/		regs.R4 = regs.R19;
		/* 82087528h case   15:*/		return 0x8208752C;
		  /* 8208752Ch */ case   16:  		/* mr R6, R29 */
		/* 8208752Ch case   16:*/		regs.R6 = regs.R29;
		/* 8208752Ch case   16:*/		return 0x82087530;
		  /* 82087530h */ case   17:  		/* mr R5, R30 */
		/* 82087530h case   17:*/		regs.R5 = regs.R30;
		/* 82087530h case   17:*/		return 0x82087534;
		  /* 82087534h */ case   18:  		/* addi R3, R1, 192 */
		/* 82087534h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 82087534h case   18:*/		return 0x82087538;
		  /* 82087538h */ case   19:  		/* bl -2712 */
		/* 82087538h case   19:*/		regs.LR = 0x8208753C; return 0x82086AA0;
		/* 82087538h case   19:*/		return 0x8208753C;
		  /* 8208753Ch */ case   20:  		/* li R24, 1 */
		/* 8208753Ch case   20:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 8208753Ch case   20:*/		return 0x82087540;
	}
	return 0x82087540;
} // Block from 820874ECh-82087540h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82087540h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087540);
		  /* 82087540h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82087540h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82087540h case    0:*/		return 0x82087544;
		  /* 82087544h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 82087544h case    1:*/		if ( regs.CR[6].eq ) { return 0x82087568;  }
		/* 82087544h case    1:*/		return 0x82087548;
		  /* 82087548h */ case    2:  		/* cmplwi CR6, R26, 0 */
		/* 82087548h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82087548h case    2:*/		return 0x8208754C;
		  /* 8208754Ch */ case    3:  		/* bc 4, CR6_EQ, 28 */
		/* 8208754Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82087568;  }
		/* 8208754Ch case    3:*/		return 0x82087550;
		  /* 82087550h */ case    4:  		/* mr R4, R20 */
		/* 82087550h case    4:*/		regs.R4 = regs.R20;
		/* 82087550h case    4:*/		return 0x82087554;
		  /* 82087554h */ case    5:  		/* mr R6, R29 */
		/* 82087554h case    5:*/		regs.R6 = regs.R29;
		/* 82087554h case    5:*/		return 0x82087558;
		  /* 82087558h */ case    6:  		/* mr R5, R30 */
		/* 82087558h case    6:*/		regs.R5 = regs.R30;
		/* 82087558h case    6:*/		return 0x8208755C;
		  /* 8208755Ch */ case    7:  		/* addi R3, R1, 192 */
		/* 8208755Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 8208755Ch case    7:*/		return 0x82087560;
		  /* 82087560h */ case    8:  		/* bl -2752 */
		/* 82087560h case    8:*/		regs.LR = 0x82087564; return 0x82086AA0;
		/* 82087560h case    8:*/		return 0x82087564;
		  /* 82087564h */ case    9:  		/* li R24, 1 */
		/* 82087564h case    9:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 82087564h case    9:*/		return 0x82087568;
	}
	return 0x82087568;
} // Block from 82087540h-82087568h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82087568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087568);
		  /* 82087568h */ case    0:  		/* cmplwi CR6, R28, 1 */
		/* 82087568h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000001);
		/* 82087568h case    0:*/		return 0x8208756C;
		  /* 8208756Ch */ case    1:  		/* bc 12, CR6_GT, 36 */
		/* 8208756Ch case    1:*/		if ( regs.CR[6].gt ) { return 0x82087590;  }
		/* 8208756Ch case    1:*/		return 0x82087570;
		  /* 82087570h */ case    2:  		/* cmplw CR6, R26, R27 */
		/* 82087570h case    2:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R27);
		/* 82087570h case    2:*/		return 0x82087574;
		  /* 82087574h */ case    3:  		/* bc 12, CR6_EQ, 28 */
		/* 82087574h case    3:*/		if ( regs.CR[6].eq ) { return 0x82087590;  }
		/* 82087574h case    3:*/		return 0x82087578;
		  /* 82087578h */ case    4:  		/* mr R4, R21 */
		/* 82087578h case    4:*/		regs.R4 = regs.R21;
		/* 82087578h case    4:*/		return 0x8208757C;
		  /* 8208757Ch */ case    5:  		/* mr R6, R29 */
		/* 8208757Ch case    5:*/		regs.R6 = regs.R29;
		/* 8208757Ch case    5:*/		return 0x82087580;
		  /* 82087580h */ case    6:  		/* mr R5, R30 */
		/* 82087580h case    6:*/		regs.R5 = regs.R30;
		/* 82087580h case    6:*/		return 0x82087584;
		  /* 82087584h */ case    7:  		/* addi R3, R1, 192 */
		/* 82087584h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 82087584h case    7:*/		return 0x82087588;
		  /* 82087588h */ case    8:  		/* bl -2792 */
		/* 82087588h case    8:*/		regs.LR = 0x8208758C; return 0x82086AA0;
		/* 82087588h case    8:*/		return 0x8208758C;
		  /* 8208758Ch */ case    9:  		/* li R24, 1 */
		/* 8208758Ch case    9:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 8208758Ch case    9:*/		return 0x82087590;
	}
	return 0x82087590;
} // Block from 82087568h-82087590h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82087590h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087590( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087590) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087590);
		  /* 82087590h */ case    0:  		/* cmplwi CR6, R28, 13 */
		/* 82087590h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x0000000D);
		/* 82087590h case    0:*/		return 0x82087594;
		  /* 82087594h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 82087594h case    1:*/		if ( regs.CR[6].eq ) { return 0x820875B0;  }
		/* 82087594h case    1:*/		return 0x82087598;
		  /* 82087598h */ case    2:  		/* cmplwi CR6, R28, 21 */
		/* 82087598h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000015);
		/* 82087598h case    2:*/		return 0x8208759C;
		  /* 8208759Ch */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 8208759Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x820875B0;  }
		/* 8208759Ch case    3:*/		return 0x820875A0;
		  /* 820875A0h */ case    4:  		/* cmplwi CR6, R28, 57 */
		/* 820875A0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000039);
		/* 820875A0h case    4:*/		return 0x820875A4;
		  /* 820875A4h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 820875A4h case    5:*/		if ( regs.CR[6].eq ) { return 0x820875B0;  }
		/* 820875A4h case    5:*/		return 0x820875A8;
		  /* 820875A8h */ case    6:  		/* cmplwi CR6, R28, 62 */
		/* 820875A8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x0000003E);
		/* 820875A8h case    6:*/		return 0x820875AC;
		  /* 820875ACh */ case    7:  		/* bc 12, CR6_LT, 28 */
		/* 820875ACh case    7:*/		if ( regs.CR[6].lt ) { return 0x820875C8;  }
		/* 820875ACh case    7:*/		return 0x820875B0;
	}
	return 0x820875B0;
} // Block from 82087590h-820875B0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 820875B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820875B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820875B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820875B0);
		  /* 820875B0h */ case    0:  		/* mr R4, R22 */
		/* 820875B0h case    0:*/		regs.R4 = regs.R22;
		/* 820875B0h case    0:*/		return 0x820875B4;
		  /* 820875B4h */ case    1:  		/* mr R6, R29 */
		/* 820875B4h case    1:*/		regs.R6 = regs.R29;
		/* 820875B4h case    1:*/		return 0x820875B8;
		  /* 820875B8h */ case    2:  		/* mr R5, R30 */
		/* 820875B8h case    2:*/		regs.R5 = regs.R30;
		/* 820875B8h case    2:*/		return 0x820875BC;
		  /* 820875BCh */ case    3:  		/* addi R3, R1, 192 */
		/* 820875BCh case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820875BCh case    3:*/		return 0x820875C0;
		  /* 820875C0h */ case    4:  		/* bl -2848 */
		/* 820875C0h case    4:*/		regs.LR = 0x820875C4; return 0x82086AA0;
		/* 820875C0h case    4:*/		return 0x820875C4;
		  /* 820875C4h */ case    5:  		/* li R24, 1 */
		/* 820875C4h case    5:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 820875C4h case    5:*/		return 0x820875C8;
	}
	return 0x820875C8;
} // Block from 820875B0h-820875C8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820875C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820875C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820875C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820875C8);
		  /* 820875C8h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 820875C8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 820875C8h case    0:*/		return 0x820875CC;
		  /* 820875CCh */ case    1:  		/* bc 4, CR6_EQ, 80 */
		/* 820875CCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8208761C;  }
		/* 820875CCh case    1:*/		return 0x820875D0;
		  /* 820875D0h */ case    2:  		/* cmplwi CR6, R28, 11 */
		/* 820875D0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x0000000B);
		/* 820875D0h case    2:*/		return 0x820875D4;
		  /* 820875D4h */ case    3:  		/* bc 12, CR6_EQ, 44 */
		/* 820875D4h case    3:*/		if ( regs.CR[6].eq ) { return 0x82087600;  }
		/* 820875D4h case    3:*/		return 0x820875D8;
		  /* 820875D8h */ case    4:  		/* cmplwi CR6, R28, 12 */
		/* 820875D8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x0000000C);
		/* 820875D8h case    4:*/		return 0x820875DC;
		  /* 820875DCh */ case    5:  		/* bc 12, CR6_EQ, 36 */
		/* 820875DCh case    5:*/		if ( regs.CR[6].eq ) { return 0x82087600;  }
		/* 820875DCh case    5:*/		return 0x820875E0;
		  /* 820875E0h */ case    6:  		/* cmplwi CR6, R28, 39 */
		/* 820875E0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000027);
		/* 820875E0h case    6:*/		return 0x820875E4;
		  /* 820875E4h */ case    7:  		/* bc 12, CR6_EQ, 28 */
		/* 820875E4h case    7:*/		if ( regs.CR[6].eq ) { return 0x82087600;  }
		/* 820875E4h case    7:*/		return 0x820875E8;
		  /* 820875E8h */ case    8:  		/* cmplwi CR6, R28, 40 */
		/* 820875E8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000028);
		/* 820875E8h case    8:*/		return 0x820875EC;
		  /* 820875ECh */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 820875ECh case    9:*/		if ( regs.CR[6].eq ) { return 0x82087600;  }
		/* 820875ECh case    9:*/		return 0x820875F0;
		  /* 820875F0h */ case   10:  		/* cmplwi CR6, R28, 43 */
		/* 820875F0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x0000002B);
		/* 820875F0h case   10:*/		return 0x820875F4;
		  /* 820875F4h */ case   11:  		/* bc 12, CR6_LT, 40 */
		/* 820875F4h case   11:*/		if ( regs.CR[6].lt ) { return 0x8208761C;  }
		/* 820875F4h case   11:*/		return 0x820875F8;
		  /* 820875F8h */ case   12:  		/* cmplwi CR6, R28, 48 */
		/* 820875F8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000030);
		/* 820875F8h case   12:*/		return 0x820875FC;
		  /* 820875FCh */ case   13:  		/* bc 12, CR6_GT, 32 */
		/* 820875FCh case   13:*/		if ( regs.CR[6].gt ) { return 0x8208761C;  }
		/* 820875FCh case   13:*/		return 0x82087600;
	}
	return 0x82087600;
} // Block from 820875C8h-82087600h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82087600h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087600);
		  /* 82087600h */ case    0:  		/* mr R4, R23 */
		/* 82087600h case    0:*/		regs.R4 = regs.R23;
		/* 82087600h case    0:*/		return 0x82087604;
		  /* 82087604h */ case    1:  		/* mr R7, R28 */
		/* 82087604h case    1:*/		regs.R7 = regs.R28;
		/* 82087604h case    1:*/		return 0x82087608;
		  /* 82087608h */ case    2:  		/* mr R6, R29 */
		/* 82087608h case    2:*/		regs.R6 = regs.R29;
		/* 82087608h case    2:*/		return 0x8208760C;
		  /* 8208760Ch */ case    3:  		/* mr R5, R30 */
		/* 8208760Ch case    3:*/		regs.R5 = regs.R30;
		/* 8208760Ch case    3:*/		return 0x82087610;
		  /* 82087610h */ case    4:  		/* addi R3, R1, 192 */
		/* 82087610h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 82087610h case    4:*/		return 0x82087614;
		  /* 82087614h */ case    5:  		/* bl -2932 */
		/* 82087614h case    5:*/		regs.LR = 0x82087618; return 0x82086AA0;
		/* 82087614h case    5:*/		return 0x82087618;
		  /* 82087618h */ case    6:  		/* li R24, 1 */
		/* 82087618h case    6:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 82087618h case    6:*/		return 0x8208761C;
	}
	return 0x8208761C;
} // Block from 82087600h-8208761Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8208761Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208761C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208761C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208761C);
		  /* 8208761Ch */ case    0:  		/* addi R30, R30, 1 */
		/* 8208761Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8208761Ch case    0:*/		return 0x82087620;
		  /* 82087620h */ case    1:  		/* cmpwi CR6, R30, 26 */
		/* 82087620h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x0000001A);
		/* 82087620h case    1:*/		return 0x82087624;
		  /* 82087624h */ case    2:  		/* bc 12, CR6_LT, -400 */
		/* 82087624h case    2:*/		if ( regs.CR[6].lt ) { return 0x82087494;  }
		/* 82087624h case    2:*/		return 0x82087628;
	}
	return 0x82087628;
} // Block from 8208761Ch-82087628h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82087628h
// Function '??_EMesh2@ATG@@UAAPAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087628);
		  /* 82087628h */ case    0:  		/* addi R29, R29, 1 */
		/* 82087628h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82087628h case    0:*/		return 0x8208762C;
		  /* 8208762Ch */ case    1:  		/* addi R16, R16, 768 */
		/* 8208762Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R16,0x300);
		/* 8208762Ch case    1:*/		return 0x82087630;
		  /* 82087630h */ case    2:  		/* cmpwi CR6, R29, 8 */
		/* 82087630h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000008);
		/* 82087630h case    2:*/		return 0x82087634;
		  /* 82087634h */ case    3:  		/* bc 12, CR6_LT, -472 */
		/* 82087634h case    3:*/		if ( regs.CR[6].lt ) { return 0x8208745C;  }
		/* 82087634h case    3:*/		return 0x82087638;
		  /* 82087638h */ case    4:  		/* lis R11, -32256 */
		/* 82087638h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82087638h case    4:*/		return 0x8208763C;
		  /* 8208763Ch */ case    5:  		/* addi R3, R1, 192 */
		/* 8208763Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 8208763Ch case    5:*/		return 0x82087640;
		  /* 82087640h */ case    6:  		/* addi R4, R11, 20448 */
		/* 82087640h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4FE0);
		/* 82087640h case    6:*/		return 0x82087644;
		  /* 82087644h */ case    7:  		/* bl -2980 */
		/* 82087644h case    7:*/		regs.LR = 0x82087648; return 0x82086AA0;
		/* 82087644h case    7:*/		return 0x82087648;
		  /* 82087648h */ case    8:  		/* lis R11, -32256 */
		/* 82087648h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82087648h case    8:*/		return 0x8208764C;
		  /* 8208764Ch */ case    9:  		/* li R24, 0 */
		/* 8208764Ch case    9:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 8208764Ch case    9:*/		return 0x82087650;
		  /* 82087650h */ case   10:  		/* li R23, 0 */
		/* 82087650h case   10:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 82087650h case   10:*/		return 0x82087654;
		  /* 82087654h */ case   11:  		/* li R22, 0 */
		/* 82087654h case   11:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 82087654h case   11:*/		return 0x82087658;
		  /* 82087658h */ case   12:  		/* li R26, 0 */
		/* 82087658h case   12:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 82087658h case   12:*/		return 0x8208765C;
		  /* 8208765Ch */ case   13:  		/* li R27, 0 */
		/* 8208765Ch case   13:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8208765Ch case   13:*/		return 0x82087660;
		  /* 82087660h */ case   14:  		/* addi R25, R11, 20272 */
		/* 82087660h case   14:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x4F30);
		/* 82087660h case   14:*/		return 0x82087664;
		  /* 82087664h */ case   15:  		/* li R29, 0 */
		/* 82087664h case   15:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82087664h case   15:*/		return 0x82087668;
		  /* 82087668h */ case   16:  		/* cmpwi CR6, R26, 0 */
		/* 82087668h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 82087668h case   16:*/		return 0x8208766C;
		  /* 8208766Ch */ case   17:  		/* bc 4, CR6_GT, 84 */
		/* 8208766Ch case   17:*/		if ( !regs.CR[6].gt ) { return 0x820876C0;  }
		/* 8208766Ch case   17:*/		return 0x82087670;
		  /* 82087670h */ case   18:  		/* add R11, R29, R27 */
		/* 82087670h case   18:*/		cpu::op::add<0>(regs,&regs.R11,regs.R29,regs.R27);
		/* 82087670h case   18:*/		return 0x82087674;
		  /* 82087674h */ case   19:  		/* add R10, R29, R27 */
		/* 82087674h case   19:*/		cpu::op::add<0>(regs,&regs.R10,regs.R29,regs.R27);
		/* 82087674h case   19:*/		return 0x82087678;
	}
	return 0x82087678;
} // Block from 82087628h-82087678h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82087678h
// Function '??1Mesh2@ATG@@UAA@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087678);
		  /* 82087678h */ case    0:  		/* addi R8, R11, -32 */
		/* 82087678h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFE0);
		/* 82087678h case    0:*/		return 0x8208767C;
		  /* 8208767Ch */ case    1:  		/* mulli R10, R10, 24 */
		/* 8208767Ch case    1:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x18);
		/* 8208767Ch case    1:*/		return 0x82087680;
		  /* 82087680h */ case    2:  		/* addi R11, R1, 224 */
		/* 82087680h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xE0);
		/* 82087680h case    2:*/		return 0x82087684;
		  /* 82087684h */ case    3:  		/* addi R9, R1, 224 */
		/* 82087684h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xE0);
		/* 82087684h case    3:*/		return 0x82087688;
		  /* 82087688h */ case    4:  		/* mulli R8, R8, 24 */
		/* 82087688h case    4:*/		cpu::op::mulli<0>(regs,&regs.R8,regs.R8,0x18);
		/* 82087688h case    4:*/		return 0x8208768C;
		  /* 8208768Ch */ case    5:  		/* add R11, R10, R11 */
		/* 8208768Ch case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8208768Ch case    5:*/		return 0x82087690;
		  /* 82087690h */ case    6:  		/* add R10, R8, R9 */
		/* 82087690h case    6:*/		cpu::op::add<0>(regs,&regs.R10,regs.R8,regs.R9);
		/* 82087690h case    6:*/		return 0x82087694;
		  /* 82087694h */ case    7:  		/* addi R9, R11, 24 */
		/* 82087694h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x18);
		/* 82087694h case    7:*/		return 0x82087698;
		  /* 82087698h */ case    8:  		/* lbz R8, <#[R11]> */
		/* 82087698h case    8:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82087698h case    8:*/		return 0x8208769C;
		  /* 8208769Ch */ case    9:  		/* lbz R7, <#[R10]> */
		/* 8208769Ch case    9:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 8208769Ch case    9:*/		return 0x820876A0;
		  /* 820876A0h */ case   10:  		/* subf. R8, R7, R8 */
		/* 820876A0h case   10:*/		cpu::op::subf<1>(regs,&regs.R8,regs.R7,regs.R8);
		/* 820876A0h case   10:*/		return 0x820876A4;
		  /* 820876A4h */ case   11:  		/* bc 4, CR0_EQ, 20 */
		/* 820876A4h case   11:*/		if ( !regs.CR[0].eq ) { return 0x820876B8;  }
		/* 820876A4h case   11:*/		return 0x820876A8;
		  /* 820876A8h */ case   12:  		/* addi R11, R11, 1 */
		/* 820876A8h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 820876A8h case   12:*/		return 0x820876AC;
		  /* 820876ACh */ case   13:  		/* addi R10, R10, 1 */
		/* 820876ACh case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 820876ACh case   13:*/		return 0x820876B0;
		  /* 820876B0h */ case   14:  		/* cmpw CR6, R11, R9 */
		/* 820876B0h case   14:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R9);
		/* 820876B0h case   14:*/		return 0x820876B4;
		  /* 820876B4h */ case   15:  		/* bc 4, CR6_EQ, -28 */
		/* 820876B4h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82087698;  }
		/* 820876B4h case   15:*/		return 0x820876B8;
	}
	return 0x820876B8;
} // Block from 82087678h-820876B8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 820876B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820876B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820876B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820876B8);
		  /* 820876B8h */ case    0:  		/* cmpwi CR0, R8, 0 */
		/* 820876B8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 820876B8h case    0:*/		return 0x820876BC;
		  /* 820876BCh */ case    1:  		/* bc 12, CR0_EQ, 356 */
		/* 820876BCh case    1:*/		if ( regs.CR[0].eq ) { return 0x82087820;  }
		/* 820876BCh case    1:*/		return 0x820876C0;
	}
	return 0x820876C0;
} // Block from 820876B8h-820876C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820876C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820876C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820876C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820876C0);
		  /* 820876C0h */ case    0:  		/* mr R28, R26 */
		/* 820876C0h case    0:*/		regs.R28 = regs.R26;
		/* 820876C0h case    0:*/		return 0x820876C4;
		  /* 820876C4h */ case    1:  		/* cmpwi CR6, R27, 256 */
		/* 820876C4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000100);
		/* 820876C4h case    1:*/		return 0x820876C8;
	}
	return 0x820876C8;
} // Block from 820876C0h-820876C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820876C8h
// Function '?Create@Mesh2@ATG@@QAAJPBDPBVPackedResource@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820876C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820876C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820876C8);
		  /* 820876C8h */ case    0:  		/* bc 4, CR6_LT, 344 */
		/* 820876C8h case    0:*/		if ( !regs.CR[6].lt ) { return 0x82087820;  }
		/* 820876C8h case    0:*/		return 0x820876CC;
		  /* 820876CCh */ case    1:  		/* cmpw CR6, R28, R26 */
		/* 820876CCh case    1:*/		cpu::op::cmpw<6>(regs,regs.R28,regs.R26);
		/* 820876CCh case    1:*/		return 0x820876D0;
		  /* 820876D0h */ case    2:  		/* addi R31, R29, 1 */
		/* 820876D0h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R29,0x1);
		/* 820876D0h case    2:*/		return 0x820876D4;
		  /* 820876D4h */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 820876D4h case    3:*/		if ( regs.CR[6].eq ) { return 0x820876DC;  }
		/* 820876D4h case    3:*/		return 0x820876D8;
		  /* 820876D8h */ case    4:  		/* li R31, 0 */
		/* 820876D8h case    4:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 820876D8h case    4:*/		return 0x820876DC;
	}
	return 0x820876DC;
} // Block from 820876C8h-820876DCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 820876DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820876DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820876DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820876DC);
		  /* 820876DCh */ case    0:  		/* cmpwi CR6, R31, 26 */
		/* 820876DCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x0000001A);
		/* 820876DCh case    0:*/		return 0x820876E0;
		  /* 820876E0h */ case    1:  		/* bc 4, CR6_LT, 308 */
		/* 820876E0h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82087814;  }
		/* 820876E0h case    1:*/		return 0x820876E4;
		  /* 820876E4h */ case    2:  		/* rlwinm R30, R28, 5, 0, 26 */
		/* 820876E4h case    2:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R30,regs.R28);
		/* 820876E4h case    2:*/		return 0x820876E8;
		  /* 820876E8h */ case    3:  		/* cmpwi CR6, R28, 0 */
		/* 820876E8h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 820876E8h case    3:*/		return 0x820876EC;
		  /* 820876ECh */ case    4:  		/* bc 4, CR6_GT, 84 */
		/* 820876ECh case    4:*/		if ( !regs.CR[6].gt ) { return 0x82087740;  }
		/* 820876ECh case    4:*/		return 0x820876F0;
		  /* 820876F0h */ case    5:  		/* add R11, R30, R31 */
		/* 820876F0h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R31);
		/* 820876F0h case    5:*/		return 0x820876F4;
		  /* 820876F4h */ case    6:  		/* add R10, R30, R31 */
		/* 820876F4h case    6:*/		cpu::op::add<0>(regs,&regs.R10,regs.R30,regs.R31);
		/* 820876F4h case    6:*/		return 0x820876F8;
		  /* 820876F8h */ case    7:  		/* addi R8, R11, -32 */
		/* 820876F8h case    7:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFE0);
		/* 820876F8h case    7:*/		return 0x820876FC;
		  /* 820876FCh */ case    8:  		/* mulli R10, R10, 24 */
		/* 820876FCh case    8:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x18);
		/* 820876FCh case    8:*/		return 0x82087700;
		  /* 82087700h */ case    9:  		/* addi R11, R1, 224 */
		/* 82087700h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xE0);
		/* 82087700h case    9:*/		return 0x82087704;
		  /* 82087704h */ case   10:  		/* addi R9, R1, 224 */
		/* 82087704h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xE0);
		/* 82087704h case   10:*/		return 0x82087708;
		  /* 82087708h */ case   11:  		/* mulli R8, R8, 24 */
		/* 82087708h case   11:*/		cpu::op::mulli<0>(regs,&regs.R8,regs.R8,0x18);
		/* 82087708h case   11:*/		return 0x8208770C;
		  /* 8208770Ch */ case   12:  		/* add R11, R10, R11 */
		/* 8208770Ch case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8208770Ch case   12:*/		return 0x82087710;
		  /* 82087710h */ case   13:  		/* add R10, R8, R9 */
		/* 82087710h case   13:*/		cpu::op::add<0>(regs,&regs.R10,regs.R8,regs.R9);
		/* 82087710h case   13:*/		return 0x82087714;
		  /* 82087714h */ case   14:  		/* addi R9, R11, 24 */
		/* 82087714h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x18);
		/* 82087714h case   14:*/		return 0x82087718;
		  /* 82087718h */ case   15:  		/* lbz R8, <#[R11]> */
		/* 82087718h case   15:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82087718h case   15:*/		return 0x8208771C;
		  /* 8208771Ch */ case   16:  		/* lbz R7, <#[R10]> */
		/* 8208771Ch case   16:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 8208771Ch case   16:*/		return 0x82087720;
		  /* 82087720h */ case   17:  		/* subf. R8, R7, R8 */
		/* 82087720h case   17:*/		cpu::op::subf<1>(regs,&regs.R8,regs.R7,regs.R8);
		/* 82087720h case   17:*/		return 0x82087724;
		  /* 82087724h */ case   18:  		/* bc 4, CR0_EQ, 20 */
		/* 82087724h case   18:*/		if ( !regs.CR[0].eq ) { return 0x82087738;  }
		/* 82087724h case   18:*/		return 0x82087728;
		  /* 82087728h */ case   19:  		/* addi R11, R11, 1 */
		/* 82087728h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82087728h case   19:*/		return 0x8208772C;
		  /* 8208772Ch */ case   20:  		/* addi R10, R10, 1 */
		/* 8208772Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8208772Ch case   20:*/		return 0x82087730;
		  /* 82087730h */ case   21:  		/* cmpw CR6, R11, R9 */
		/* 82087730h case   21:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R9);
		/* 82087730h case   21:*/		return 0x82087734;
		  /* 82087734h */ case   22:  		/* bc 4, CR6_EQ, -28 */
		/* 82087734h case   22:*/		if ( !regs.CR[6].eq ) { return 0x82087718;  }
		/* 82087734h case   22:*/		return 0x82087738;
	}
	return 0x82087738;
} // Block from 820876DCh-82087738h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82087738h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087738( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087738) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087738);
		  /* 82087738h */ case    0:  		/* cmpwi CR0, R8, 0 */
		/* 82087738h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R8,0x00000000);
		/* 82087738h case    0:*/		return 0x8208773C;
		  /* 8208773Ch */ case    1:  		/* bc 12, CR0_EQ, 204 */
		/* 8208773Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82087808;  }
		/* 8208773Ch case    1:*/		return 0x82087740;
	}
	return 0x82087740;
} // Block from 82087738h-82087740h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82087740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087740);
		  /* 82087740h */ case    0:  		/* add R11, R30, R31 */
		/* 82087740h case    0:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R31);
		/* 82087740h case    0:*/		return 0x82087744;
		  /* 82087744h */ case    1:  		/* add R10, R29, R27 */
		/* 82087744h case    1:*/		cpu::op::add<0>(regs,&regs.R10,regs.R29,regs.R27);
		/* 82087744h case    1:*/		return 0x82087748;
		  /* 82087748h */ case    2:  		/* mulli R11, R11, 24 */
		/* 82087748h case    2:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x18);
		/* 82087748h case    2:*/		return 0x8208774C;
		  /* 8208774Ch */ case    3:  		/* addi R9, R1, 228 */
		/* 8208774Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xE4);
		/* 8208774Ch case    3:*/		return 0x82087750;
		  /* 82087750h */ case    4:  		/* mulli R10, R10, 24 */
		/* 82087750h case    4:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x18);
		/* 82087750h case    4:*/		return 0x82087754;
		  /* 82087754h */ case    5:  		/* lwzx R9, <#[R11 + R9]> */
		/* 82087754h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82087754h case    5:*/		return 0x82087758;
		  /* 82087758h */ case    6:  		/* addi R8, R1, 228 */
		/* 82087758h case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xE4);
		/* 82087758h case    6:*/		return 0x8208775C;
		  /* 8208775Ch */ case    7:  		/* rlwinm R9, R9, 20, 12, 31 */
		/* 8208775Ch case    7:*/		cpu::op::rlwinm<0,20,12,31>(regs,&regs.R9,regs.R9);
		/* 8208775Ch case    7:*/		return 0x82087760;
		  /* 82087760h */ case    8:  		/* lwzx R8, <#[R10 + R8]> */
		/* 82087760h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 82087760h case    8:*/		return 0x82087764;
		  /* 82087764h */ case    9:  		/* rlwinm R7, R8, 20, 12, 31 */
		/* 82087764h case    9:*/		cpu::op::rlwinm<0,20,12,31>(regs,&regs.R7,regs.R8);
		/* 82087764h case    9:*/		return 0x82087768;
		  /* 82087768h */ case   10:  		/* cmplw CR6, R7, R9 */
		/* 82087768h case   10:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R9);
		/* 82087768h case   10:*/		return 0x8208776C;
		  /* 8208776Ch */ case   11:  		/* bc 4, CR6_EQ, 156 */
		/* 8208776Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x82087808;  }
		/* 8208776Ch case   11:*/		return 0x82087770;
		  /* 82087770h */ case   12:  		/* addi R8, R1, 244 */
		/* 82087770h case   12:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xF4);
		/* 82087770h case   12:*/		return 0x82087774;
		  /* 82087774h */ case   13:  		/* addi R6, R1, 244 */
		/* 82087774h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xF4);
		/* 82087774h case   13:*/		return 0x82087778;
		  /* 82087778h */ case   14:  		/* lwzx R8, <#[R11 + R8]> */
		/* 82087778h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82087778h case   14:*/		return 0x8208777C;
		  /* 8208777Ch */ case   15:  		/* lwzx R5, <#[R10 + R6]> */
		/* 8208777Ch case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + regs.R6 + 0x00000000) );
		/* 8208777Ch case   15:*/		return 0x82087780;
		  /* 82087780h */ case   16:  		/* rlwinm R6, R8, 20, 12, 31 */
		/* 82087780h case   16:*/		cpu::op::rlwinm<0,20,12,31>(regs,&regs.R6,regs.R8);
		/* 82087780h case   16:*/		return 0x82087784;
		  /* 82087784h */ case   17:  		/* rlwinm R8, R5, 20, 12, 31 */
		/* 82087784h case   17:*/		cpu::op::rlwinm<0,20,12,31>(regs,&regs.R8,regs.R5);
		/* 82087784h case   17:*/		return 0x82087788;
		  /* 82087788h */ case   18:  		/* cmplw CR6, R8, R6 */
		/* 82087788h case   18:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R6);
		/* 82087788h case   18:*/		return 0x8208778C;
		  /* 8208778Ch */ case   19:  		/* bc 12, CR6_EQ, 124 */
		/* 8208778Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x82087808;  }
		/* 8208778Ch case   19:*/		return 0x82087790;
		  /* 82087790h */ case   20:  		/* cmplwi CR6, R7, 0 */
		/* 82087790h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82087790h case   20:*/		return 0x82087794;
		  /* 82087794h */ case   21:  		/* bc 4, CR6_EQ, 12 */
		/* 82087794h case   21:*/		if ( !regs.CR[6].eq ) { return 0x820877A0;  }
		/* 82087794h case   21:*/		return 0x82087798;
		  /* 82087798h */ case   22:  		/* li R24, 1 */
		/* 82087798h case   22:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 82087798h case   22:*/		return 0x8208779C;
		  /* 8208779Ch */ case   23:  		/* b 32 */
		/* 8208779Ch case   23:*/		return 0x820877BC;
		/* 8208779Ch case   23:*/		return 0x820877A0;
	}
	return 0x820877A0;
} // Block from 82087740h-820877A0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 820877A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820877A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820877A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820877A0);
		  /* 820877A0h */ case    0:  		/* cmplwi CR6, R8, 0 */
		/* 820877A0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 820877A0h case    0:*/		return 0x820877A4;
		  /* 820877A4h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 820877A4h case    1:*/		if ( regs.CR[6].eq ) { return 0x820877B8;  }
		/* 820877A4h case    1:*/		return 0x820877A8;
		  /* 820877A8h */ case    2:  		/* cmplwi CR6, R6, 0 */
		/* 820877A8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 820877A8h case    2:*/		return 0x820877AC;
		  /* 820877ACh */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 820877ACh case    3:*/		if ( regs.CR[6].eq ) { return 0x820877B8;  }
		/* 820877ACh case    3:*/		return 0x820877B0;
		  /* 820877B0h */ case    4:  		/* li R22, 1 */
		/* 820877B0h case    4:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 820877B0h case    4:*/		return 0x820877B4;
		  /* 820877B4h */ case    5:  		/* b 8 */
		/* 820877B4h case    5:*/		return 0x820877BC;
		/* 820877B4h case    5:*/		return 0x820877B8;
	}
	return 0x820877B8;
} // Block from 820877A0h-820877B8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820877B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820877B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820877B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820877B8);
		  /* 820877B8h */ case    0:  		/* li R23, 1 */
		/* 820877B8h case    0:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 820877B8h case    0:*/		return 0x820877BC;
	}
	return 0x820877BC;
} // Block from 820877B8h-820877BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820877BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820877BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820877BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820877BC);
		  /* 820877BCh */ case    0:  		/* addi R5, R1, 240 */
		/* 820877BCh case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xF0);
		/* 820877BCh case    0:*/		return 0x820877C0;
		  /* 820877C0h */ case    1:  		/* stw R9, <#[R1 + 100]> */
		/* 820877C0h case    1:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000064) );
		/* 820877C0h case    1:*/		return 0x820877C4;
		  /* 820877C4h */ case    2:  		/* addi R3, R1, 240 */
		/* 820877C4h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xF0);
		/* 820877C4h case    2:*/		return 0x820877C8;
		  /* 820877C8h */ case    3:  		/* stw R6, <#[R1 + 108]> */
		/* 820877C8h case    3:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x0000006C) );
		/* 820877C8h case    3:*/		return 0x820877CC;
		  /* 820877CCh */ case    4:  		/* mr R4, R25 */
		/* 820877CCh case    4:*/		regs.R4 = regs.R25;
		/* 820877CCh case    4:*/		return 0x820877D0;
		  /* 820877D0h */ case    5:  		/* stw R28, <#[R1 + 92]> */
		/* 820877D0h case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x0000005C) );
		/* 820877D0h case    5:*/		return 0x820877D4;
		  /* 820877D4h */ case    6:  		/* mr R6, R26 */
		/* 820877D4h case    6:*/		regs.R6 = regs.R26;
		/* 820877D4h case    6:*/		return 0x820877D8;
		  /* 820877D8h */ case    7:  		/* stw R31, <#[R1 + 84]> */
		/* 820877D8h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 820877D8h case    7:*/		return 0x820877DC;
		  /* 820877DCh */ case    8:  		/* lwzx R11, <#[R11 + R5]> */
		/* 820877DCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R5 + 0x00000000) );
		/* 820877DCh case    8:*/		return 0x820877E0;
		  /* 820877E0h */ case    9:  		/* mr R5, R29 */
		/* 820877E0h case    9:*/		regs.R5 = regs.R29;
		/* 820877E0h case    9:*/		return 0x820877E4;
		  /* 820877E4h */ case   10:  		/* lwzx R9, <#[R10 + R3]> */
		/* 820877E4h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 820877E4h case   10:*/		return 0x820877E8;
		  /* 820877E8h */ case   11:  		/* rlwinm R3, R11, 26, 28, 31 */
		/* 820877E8h case   11:*/		cpu::op::rlwinm<0,26,28,31>(regs,&regs.R3,regs.R11);
		/* 820877E8h case   11:*/		return 0x820877EC;
		  /* 820877ECh */ case   12:  		/* rlwinm R11, R11, 30, 28, 31 */
		/* 820877ECh case   12:*/		cpu::op::rlwinm<0,30,28,31>(regs,&regs.R11,regs.R11);
		/* 820877ECh case   12:*/		return 0x820877F0;
		  /* 820877F0h */ case   13:  		/* rlwinm R10, R9, 26, 28, 31 */
		/* 820877F0h case   13:*/		cpu::op::rlwinm<0,26,28,31>(regs,&regs.R10,regs.R9);
		/* 820877F0h case   13:*/		return 0x820877F4;
		  /* 820877F4h */ case   14:  		/* stw R3, <#[R1 + 124]> */
		/* 820877F4h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x0000007C) );
		/* 820877F4h case   14:*/		return 0x820877F8;
		  /* 820877F8h */ case   15:  		/* rlwinm R9, R9, 30, 28, 31 */
		/* 820877F8h case   15:*/		cpu::op::rlwinm<0,30,28,31>(regs,&regs.R9,regs.R9);
		/* 820877F8h case   15:*/		return 0x820877FC;
		  /* 820877FCh */ case   16:  		/* stw R11, <#[R1 + 116]> */
		/* 820877FCh case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 820877FCh case   16:*/		return 0x82087800;
		  /* 82087800h */ case   17:  		/* addi R3, R1, 192 */
		/* 82087800h case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 82087800h case   17:*/		return 0x82087804;
		  /* 82087804h */ case   18:  		/* bl -3428 */
		/* 82087804h case   18:*/		regs.LR = 0x82087808; return 0x82086AA0;
		/* 82087804h case   18:*/		return 0x82087808;
	}
	return 0x82087808;
} // Block from 820877BCh-82087808h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82087808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087808);
		  /* 82087808h */ case    0:  		/* addi R31, R31, 1 */
		/* 82087808h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82087808h case    0:*/		return 0x8208780C;
		  /* 8208780Ch */ case    1:  		/* cmpwi CR6, R31, 26 */
		/* 8208780Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x0000001A);
		/* 8208780Ch case    1:*/		return 0x82087810;
		  /* 82087810h */ case    2:  		/* bc 12, CR6_LT, -296 */
		/* 82087810h case    2:*/		if ( regs.CR[6].lt ) { return 0x820876E8;  }
		/* 82087810h case    2:*/		return 0x82087814;
	}
	return 0x82087814;
} // Block from 82087808h-82087814h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82087814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087814);
		  /* 82087814h */ case    0:  		/* addi R28, R28, 1 */
		/* 82087814h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82087814h case    0:*/		return 0x82087818;
		  /* 82087818h */ case    1:  		/* cmpwi CR6, R28, 8 */
		/* 82087818h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000008);
		/* 82087818h case    1:*/		return 0x8208781C;
		  /* 8208781Ch */ case    2:  		/* bc 12, CR6_LT, -336 */
		/* 8208781Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x820876CC;  }
		/* 8208781Ch case    2:*/		return 0x82087820;
	}
	return 0x82087820;
} // Block from 82087814h-82087820h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82087820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087820);
		  /* 82087820h */ case    0:  		/* addi R29, R29, 1 */
		/* 82087820h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82087820h case    0:*/		return 0x82087824;
		  /* 82087824h */ case    1:  		/* cmpwi CR6, R29, 26 */
		/* 82087824h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x0000001A);
		/* 82087824h case    1:*/		return 0x82087828;
		  /* 82087828h */ case    2:  		/* bc 12, CR6_LT, -448 */
		/* 82087828h case    2:*/		if ( regs.CR[6].lt ) { return 0x82087668;  }
		/* 82087828h case    2:*/		return 0x8208782C;
		  /* 8208782Ch */ case    3:  		/* addi R27, R27, 32 */
		/* 8208782Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x20);
		/* 8208782Ch case    3:*/		return 0x82087830;
		  /* 82087830h */ case    4:  		/* addi R26, R26, 1 */
		/* 82087830h case    4:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 82087830h case    4:*/		return 0x82087834;
		  /* 82087834h */ case    5:  		/* cmpwi CR6, R27, 256 */
		/* 82087834h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000100);
		/* 82087834h case    5:*/		return 0x82087838;
		  /* 82087838h */ case    6:  		/* bc 12, CR6_LT, -468 */
		/* 82087838h case    6:*/		if ( regs.CR[6].lt ) { return 0x82087664;  }
		/* 82087838h case    6:*/		return 0x8208783C;
		  /* 8208783Ch */ case    7:  		/* cmpwi CR6, R24, 0 */
		/* 8208783Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R24,0x00000000);
		/* 8208783Ch case    7:*/		return 0x82087840;
		  /* 82087840h */ case    8:  		/* bc 12, CR6_EQ, 36 */
		/* 82087840h case    8:*/		if ( regs.CR[6].eq ) { return 0x82087864;  }
		/* 82087840h case    8:*/		return 0x82087844;
		  /* 82087844h */ case    9:  		/* lis R11, -32256 */
		/* 82087844h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82087844h case    9:*/		return 0x82087848;
		  /* 82087848h */ case   10:  		/* addi R3, R1, 192 */
		/* 82087848h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 82087848h case   10:*/		return 0x8208784C;
		  /* 8208784Ch */ case   11:  		/* addi R4, R11, 20104 */
		/* 8208784Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4E88);
		/* 8208784Ch case   11:*/		return 0x82087850;
		  /* 82087850h */ case   12:  		/* bl -3504 */
		/* 82087850h case   12:*/		regs.LR = 0x82087854; return 0x82086AA0;
		/* 82087850h case   12:*/		return 0x82087854;
		  /* 82087854h */ case   13:  		/* lis R11, -32256 */
		/* 82087854h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82087854h case   13:*/		return 0x82087858;
		  /* 82087858h */ case   14:  		/* addi R3, R1, 192 */
		/* 82087858h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 82087858h case   14:*/		return 0x8208785C;
		  /* 8208785Ch */ case   15:  		/* addi R4, R11, 19920 */
		/* 8208785Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4DD0);
		/* 8208785Ch case   15:*/		return 0x82087860;
		  /* 82087860h */ case   16:  		/* bl -3520 */
		/* 82087860h case   16:*/		regs.LR = 0x82087864; return 0x82086AA0;
		/* 82087860h case   16:*/		return 0x82087864;
	}
	return 0x82087864;
} // Block from 82087820h-82087864h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82087864h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087864( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087864) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087864);
		  /* 82087864h */ case    0:  		/* cmpwi CR6, R23, 0 */
		/* 82087864h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R23,0x00000000);
		/* 82087864h case    0:*/		return 0x82087868;
		  /* 82087868h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 82087868h case    1:*/		if ( regs.CR[6].eq ) { return 0x8208788C;  }
		/* 82087868h case    1:*/		return 0x8208786C;
		  /* 8208786Ch */ case    2:  		/* lis R11, -32256 */
		/* 8208786Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8208786Ch case    2:*/		return 0x82087870;
		  /* 82087870h */ case    3:  		/* addi R3, R1, 192 */
		/* 82087870h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 82087870h case    3:*/		return 0x82087874;
		  /* 82087874h */ case    4:  		/* addi R4, R11, 19760 */
		/* 82087874h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4D30);
		/* 82087874h case    4:*/		return 0x82087878;
		  /* 82087878h */ case    5:  		/* bl -3544 */
		/* 82087878h case    5:*/		regs.LR = 0x8208787C; return 0x82086AA0;
		/* 82087878h case    5:*/		return 0x8208787C;
		  /* 8208787Ch */ case    6:  		/* lis R11, -32256 */
		/* 8208787Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8208787Ch case    6:*/		return 0x82087880;
		  /* 82087880h */ case    7:  		/* addi R3, R1, 192 */
		/* 82087880h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 82087880h case    7:*/		return 0x82087884;
		  /* 82087884h */ case    8:  		/* addi R4, R11, 19624 */
		/* 82087884h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4CA8);
		/* 82087884h case    8:*/		return 0x82087888;
		  /* 82087888h */ case    9:  		/* bl -3560 */
		/* 82087888h case    9:*/		regs.LR = 0x8208788C; return 0x82086AA0;
		/* 82087888h case    9:*/		return 0x8208788C;
	}
	return 0x8208788C;
} // Block from 82087864h-8208788Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8208788Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208788C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208788C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208788C);
		  /* 8208788Ch */ case    0:  		/* cmpwi CR6, R22, 0 */
		/* 8208788Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 8208788Ch case    0:*/		return 0x82087890;
		  /* 82087890h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 82087890h case    1:*/		if ( regs.CR[6].eq ) { return 0x820878A4;  }
		/* 82087890h case    1:*/		return 0x82087894;
		  /* 82087894h */ case    2:  		/* lis R11, -32256 */
		/* 82087894h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82087894h case    2:*/		return 0x82087898;
		  /* 82087898h */ case    3:  		/* addi R3, R1, 192 */
		/* 82087898h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 82087898h case    3:*/		return 0x8208789C;
		  /* 8208789Ch */ case    4:  		/* addi R4, R11, 19472 */
		/* 8208789Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4C10);
		/* 8208789Ch case    4:*/		return 0x820878A0;
		  /* 820878A0h */ case    5:  		/* bl -3584 */
		/* 820878A0h case    5:*/		regs.LR = 0x820878A4; return 0x82086AA0;
		/* 820878A0h case    5:*/		return 0x820878A4;
	}
	return 0x820878A4;
} // Block from 8208788Ch-820878A4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820878A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820878A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820878A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820878A4);
		  /* 820878A4h */ case    0:  		/* li R23, 1 */
		/* 820878A4h case    0:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 820878A4h case    0:*/		return 0x820878A8;
	}
	return 0x820878A8;
} // Block from 820878A4h-820878A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820878A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820878A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820878A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820878A8);
		  /* 820878A8h */ case    0:  		/* cmplwi CR6, R15, 0 */
		/* 820878A8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 820878A8h case    0:*/		return 0x820878AC;
		  /* 820878ACh */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 820878ACh case    1:*/		if ( regs.CR[6].eq ) { return 0x820878C0;  }
		/* 820878ACh case    1:*/		return 0x820878B0;
		  /* 820878B0h */ case    2:  		/* mr R5, R14 */
		/* 820878B0h case    2:*/		regs.R5 = regs.R14;
		/* 820878B0h case    2:*/		return 0x820878B4;
		  /* 820878B4h */ case    3:  		/* mr R4, R15 */
		/* 820878B4h case    3:*/		regs.R4 = regs.R15;
		/* 820878B4h case    3:*/		return 0x820878B8;
		  /* 820878B8h */ case    4:  		/* addi R3, R1, 192 */
		/* 820878B8h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820878B8h case    4:*/		return 0x820878BC;
		  /* 820878BCh */ case    5:  		/* bl -2668 */
		/* 820878BCh case    5:*/		regs.LR = 0x820878C0; return 0x82086E50;
		/* 820878BCh case    5:*/		return 0x820878C0;
	}
	return 0x820878C0;
} // Block from 820878A8h-820878C0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820878C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820878C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820878C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820878C0);
		  /* 820878C0h */ case    0:  		/* cmpwi CR6, R23, 0 */
		/* 820878C0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R23,0x00000000);
		/* 820878C0h case    0:*/		return 0x820878C4;
		  /* 820878C4h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 820878C4h case    1:*/		if ( regs.CR[6].eq ) { return 0x820878D4;  }
		/* 820878C4h case    1:*/		return 0x820878C8;
		  /* 820878C8h */ case    2:  		/* lis R11, -32256 */
		/* 820878C8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820878C8h case    2:*/		return 0x820878CC;
		  /* 820878CCh */ case    3:  		/* addi R4, R11, 19328 */
		/* 820878CCh case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4B80);
		/* 820878CCh case    3:*/		return 0x820878D0;
		  /* 820878D0h */ case    4:  		/* b 12 */
		/* 820878D0h case    4:*/		return 0x820878DC;
		/* 820878D0h case    4:*/		return 0x820878D4;
	}
	return 0x820878D4;
} // Block from 820878C0h-820878D4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820878D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820878D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820878D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820878D4);
		  /* 820878D4h */ case    0:  		/* lis R11, -32256 */
		/* 820878D4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820878D4h case    0:*/		return 0x820878D8;
	}
	return 0x820878D8;
} // Block from 820878D4h-820878D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820878D8h
// Function '?what@exception@stdext@@UBAPBDXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820878D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820878D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820878D8);
		  /* 820878D8h */ case    0:  		/* addi R4, R11, 19184 */
		/* 820878D8h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4AF0);
		/* 820878D8h case    0:*/		return 0x820878DC;
	}
	return 0x820878DC;
} // Block from 820878D8h-820878DCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820878DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820878DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820878DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820878DC);
		  /* 820878DCh */ case    0:  		/* addi R3, R1, 192 */
		/* 820878DCh case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC0);
		/* 820878DCh case    0:*/		return 0x820878E0;
		  /* 820878E0h */ case    1:  		/* bl -3648 */
		/* 820878E0h case    1:*/		regs.LR = 0x820878E4; return 0x82086AA0;
		/* 820878E0h case    1:*/		return 0x820878E4;
	}
	return 0x820878E4;
} // Block from 820878DCh-820878E4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820878E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820878E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820878E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820878E4);
		  /* 820878E4h */ case    0:  		/* addi R1, R1, 6528 */
		/* 820878E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1980);
		/* 820878E4h case    0:*/		return 0x820878E8;
		  /* 820878E8h */ case    1:  		/* b 39304 */
		/* 820878E8h case    1:*/		return 0x82091270;
		/* 820878E8h case    1:*/		return 0x820878EC;
		  /* 820878ECh */ case    2:  		/* nop */
		/* 820878ECh case    2:*/		cpu::op::nop();
		/* 820878ECh case    2:*/		return 0x820878F0;
	}
	return 0x820878F0;
} // Block from 820878E4h-820878F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820878F0h
// Function '??_Eexception@stdext@@UAAPAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820878F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820878F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820878F0);
		  /* 820878F0h */ case    0:  		/* mfspr R12, LR */
		/* 820878F0h case    0:*/		regs.R12 = regs.LR;
		/* 820878F0h case    0:*/		return 0x820878F4;
		  /* 820878F4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820878F4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820878F4h case    1:*/		return 0x820878F8;
		  /* 820878F8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820878F8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820878F8h case    2:*/		return 0x820878FC;
		  /* 820878FCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820878FCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820878FCh case    3:*/		return 0x82087900;
		  /* 82087900h */ case    4:  		/* lis R11, -32256 */
		/* 82087900h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82087900h case    4:*/		return 0x82087904;
		  /* 82087904h */ case    5:  		/* mr R31, R3 */
		/* 82087904h case    5:*/		regs.R31 = regs.R3;
		/* 82087904h case    5:*/		return 0x82087908;
		  /* 82087908h */ case    6:  		/* addi R3, R11, 23824 */
		/* 82087908h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x5D10);
		/* 82087908h case    6:*/		return 0x8208790C;
		  /* 8208790Ch */ case    7:  		/* bl 1988988 */
		/* 8208790Ch case    7:*/		regs.LR = 0x82087910; return 0x8226D288;
		/* 8208790Ch case    7:*/		return 0x82087910;
		  /* 82087910h */ case    8:  		/* li R6, 0 */
		/* 82087910h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82087910h case    8:*/		return 0x82087914;
		  /* 82087914h */ case    9:  		/* li R5, 0 */
		/* 82087914h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82087914h case    9:*/		return 0x82087918;
		  /* 82087918h */ case   10:  		/* lwz R4, <#[R31 + 13832]> */
		/* 82087918h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00003608) );
		/* 82087918h case   10:*/		return 0x8208791C;
		  /* 8208791Ch */ case   11:  		/* mr R3, R31 */
		/* 8208791Ch case   11:*/		regs.R3 = regs.R31;
		/* 8208791Ch case   11:*/		return 0x82087920;
		  /* 82087920h */ case   12:  		/* bl -2288 */
		/* 82087920h case   12:*/		regs.LR = 0x82087924; return 0x82087030;
		/* 82087920h case   12:*/		return 0x82087924;
		  /* 82087924h */ case   13:  		/* lwz R11, <#[R31 + 13832]> */
		/* 82087924h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00003608) );
		/* 82087924h case   13:*/		return 0x82087928;
		  /* 82087928h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 82087928h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82087928h case   14:*/		return 0x8208792C;
		  /* 8208792Ch */ case   15:  		/* bc 12, CR6_EQ, 80 */
		/* 8208792Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x8208797C;  }
		/* 8208792Ch case   15:*/		return 0x82087930;
		  /* 82087930h */ case   16:  		/* lis R11, -32215 */
		/* 82087930h case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82087930h case   16:*/		return 0x82087934;
		  /* 82087934h */ case   17:  		/* lwz R11, <#[R11 - 31272]> */
		/* 82087934h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0xFFFF85D8) );
		/* 82087934h case   17:*/		return 0x82087938;
	}
	return 0x82087938;
} // Block from 820878F0h-82087938h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82087938h
// Function '?_Doraise@bad_alloc@stdext@@MBAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087938);
		  /* 82087938h */ case    0:  		/* cmpwi CR6, R11, 0 */
		/* 82087938h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82087938h case    0:*/		return 0x8208793C;
		  /* 8208793Ch */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8208793Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82087948;  }
		/* 8208793Ch case    1:*/		return 0x82087940;
		  /* 82087940h */ case    2:  		/* li R3, 0 */
		/* 82087940h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82087940h case    2:*/		return 0x82087944;
		  /* 82087944h */ case    3:  		/* b 88 */
		/* 82087944h case    3:*/		return 0x8208799C;
		/* 82087944h case    3:*/		return 0x82087948;
	}
	return 0x82087948;
} // Block from 82087938h-82087948h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82087948h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087948);
		  /* 82087948h */ case    0:  		/* lbz R10, <#[R31 + 11069]> */
		/* 82087948h case    0:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R31 + 0x00002B3D) );
		/* 82087948h case    0:*/		return 0x8208794C;
		  /* 8208794Ch */ case    1:  		/* li R9, 0 */
		/* 8208794Ch case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8208794Ch case    1:*/		return 0x82087950;
	}
	return 0x82087950;
} // Block from 82087948h-82087950h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82087950h
// Function '?CreatePooledVertexDeclaration@ATG@@YAJPBU_D3DVERTEXELEMENT9@@PAPAUD3DVertexDeclaration@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087950);
		  /* 82087950h */ case    0:  		/* lwz R11, <#[R31 + 11036]> */
		/* 82087950h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00002B1C) );
		/* 82087950h case    0:*/		return 0x82087954;
		  /* 82087954h */ case    1:  		/* lis R8, -32256 */
		/* 82087954h case    1:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8200);
		/* 82087954h case    1:*/		return 0x82087958;
		  /* 82087958h */ case    2:  		/* lwz R7, <#[R31 + 11024]> */
		/* 82087958h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00002B10) );
		/* 82087958h case    2:*/		return 0x8208795C;
		  /* 8208795Ch */ case    3:  		/* ori R10, R10, 3 */
		/* 8208795Ch case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x3);
		/* 8208795Ch case    3:*/		return 0x82087960;
		  /* 82087960h */ case    4:  		/* addi R11, R11, -2 */
		/* 82087960h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFE);
		/* 82087960h case    4:*/		return 0x82087964;
		  /* 82087964h */ case    5:  		/* stb R10, <#[R31 + 11069]> */
		/* 82087964h case    5:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R31 + 0x00002B3D) );
		/* 82087964h case    5:*/		return 0x82087968;
		  /* 82087968h */ case    6:  		/* addi R3, R8, 17896 */
		/* 82087968h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R8,0x45E8);
		/* 82087968h case    6:*/		return 0x8208796C;
		  /* 8208796Ch */ case    7:  		/* stw R11, <#[R7]> */
		/* 8208796Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 8208796Ch case    7:*/		return 0x82087970;
		  /* 82087970h */ case    8:  		/* stw R9, <#[R31 + 11152]> */
		/* 82087970h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00002B90) );
		/* 82087970h case    8:*/		return 0x82087974;
		  /* 82087974h */ case    9:  		/* bl -64948 */
		/* 82087974h case    9:*/		regs.LR = 0x82087978; return 0x82077BC0;
		/* 82087974h case    9:*/		return 0x82087978;
		  /* 82087978h */ case   10:  		/* b 32 */
		/* 82087978h case   10:*/		return 0x82087998;
		/* 82087978h case   10:*/		return 0x8208797C;
	}
	return 0x8208797C;
} // Block from 82087950h-8208797Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8208797Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208797C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208797C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208797C);
		  /* 8208797Ch */ case    0:  		/* lis R11, -32256 */
		/* 8208797Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8208797Ch case    0:*/		return 0x82087980;
		  /* 82087980h */ case    1:  		/* addi R3, R11, 23600 */
		/* 82087980h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x5C30);
		/* 82087980h case    1:*/		return 0x82087984;
		  /* 82087984h */ case    2:  		/* bl 1988868 */
		/* 82087984h case    2:*/		regs.LR = 0x82087988; return 0x8226D288;
		/* 82087984h case    2:*/		return 0x82087988;
		  /* 82087988h */ case    3:  		/* lis R11, -32256 */
		/* 82087988h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82087988h case    3:*/		return 0x8208798C;
		  /* 8208798Ch */ case    4:  		/* addi R3, R11, 23504 */
		/* 8208798Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x5BD0);
		/* 8208798Ch case    4:*/		return 0x82087990;
		  /* 82087990h */ case    5:  		/* bl 1988856 */
		/* 82087990h case    5:*/		regs.LR = 0x82087994; return 0x8226D288;
		/* 82087990h case    5:*/		return 0x82087994;
		  /* 82087994h */ case    6:  		/* twi 31, R0, 22 */
		/* 82087994h case    6:*/		cpu::op::trap(regs, 0x82087994, regs.R0, 0x00000016);
		/* 82087994h case    6:*/		return 0x82087998;
	}
	return 0x82087998;
} // Block from 8208797Ch-82087998h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82087998h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087998);
		  /* 82087998h */ case    0:  		/* li R3, 1 */
		/* 82087998h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82087998h case    0:*/		return 0x8208799C;
	}
	return 0x8208799C;
} // Block from 82087998h-8208799Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8208799Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208799C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208799C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208799C);
		  /* 8208799Ch */ case    0:  		/* addi R1, R1, 96 */
		/* 8208799Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8208799Ch case    0:*/		return 0x820879A0;
		  /* 820879A0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820879A0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820879A0h case    1:*/		return 0x820879A4;
		  /* 820879A4h */ case    2:  		/* mtspr LR, R12 */
		/* 820879A4h case    2:*/		regs.LR = regs.R12;
		/* 820879A4h case    2:*/		return 0x820879A8;
		  /* 820879A8h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 820879A8h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820879A8h case    3:*/		return 0x820879AC;
		  /* 820879ACh */ case    4:  		/* bclr 20, CR0_LT */
		/* 820879ACh case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820879ACh case    4:*/		return 0x820879B0;
	}
	return 0x820879B0;
} // Block from 8208799Ch-820879B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820879B0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820879B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820879B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820879B0);
		  /* 820879B0h */ case    0:  		/* mftb R11, 12, 8 */
		/* 820879B0h case    0:*/		cpu::op::mftb<0>(regs,&regs.R11,0xC,0x8);
		/* 820879B0h case    0:*/		return 0x820879B4;
		  /* 820879B4h */ case    1:  		/* rlwinm. R10, R11, 0, 0, 31 */
		/* 820879B4h case    1:*/		cpu::op::rlwinm<1,0,0,31>(regs,&regs.R10,regs.R11);
		/* 820879B4h case    1:*/		return 0x820879B8;
		  /* 820879B8h */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 820879B8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x820879C0;  }
		/* 820879B8h case    2:*/		return 0x820879BC;
		  /* 820879BCh */ case    3:  		/* mftb R11, 12, 8 */
		/* 820879BCh case    3:*/		cpu::op::mftb<0>(regs,&regs.R11,0xC,0x8);
		/* 820879BCh case    3:*/		return 0x820879C0;
	}
	return 0x820879C0;
} // Block from 820879B0h-820879C0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820879C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820879C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820879C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820879C0);
		  /* 820879C0h */ case    0:  		/* std R11, <#[R3]> */
		/* 820879C0h case    0:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 820879C0h case    0:*/		return 0x820879C4;
		  /* 820879C4h */ case    1:  		/* li R3, 1 */
		/* 820879C4h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820879C4h case    1:*/		return 0x820879C8;
		  /* 820879C8h */ case    2:  		/* bclr 20, CR0_LT */
		/* 820879C8h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820879C8h case    2:*/		return 0x820879CC;
	}
	return 0x820879CC;
} // Block from 820879C0h-820879CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 820879CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820879CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820879CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820879CC);
		  /* 820879CCh */ case    0:  		/* nop */
		/* 820879CCh case    0:*/		cpu::op::nop();
		/* 820879CCh case    0:*/		return 0x820879D0;
	}
	return 0x820879D0;
} // Block from 820879CCh-820879D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820879D0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820879D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820879D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820879D0);
		  /* 820879D0h */ case    0:  		/* mfspr R12, LR */
		/* 820879D0h case    0:*/		regs.R12 = regs.LR;
		/* 820879D0h case    0:*/		return 0x820879D4;
		  /* 820879D4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820879D4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820879D4h case    1:*/		return 0x820879D8;
		  /* 820879D8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 820879D8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820879D8h case    2:*/		return 0x820879DC;
		  /* 820879DCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 820879DCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820879DCh case    3:*/		return 0x820879E0;
		  /* 820879E0h */ case    4:  		/* mr R31, R3 */
		/* 820879E0h case    4:*/		regs.R31 = regs.R3;
		/* 820879E0h case    4:*/		return 0x820879E4;
		  /* 820879E4h */ case    5:  		/* bl 1987924 */
		/* 820879E4h case    5:*/		regs.LR = 0x820879E8; return 0x8226CF38;
		/* 820879E4h case    5:*/		return 0x820879E8;
		  /* 820879E8h */ case    6:  		/* std R3, <#[R31]> */
		/* 820879E8h case    6:*/		cpu::mem::store64( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 820879E8h case    6:*/		return 0x820879EC;
		  /* 820879ECh */ case    7:  		/* li R3, 1 */
		/* 820879ECh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820879ECh case    7:*/		return 0x820879F0;
		  /* 820879F0h */ case    8:  		/* addi R1, R1, 96 */
		/* 820879F0h case    8:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820879F0h case    8:*/		return 0x820879F4;
		  /* 820879F4h */ case    9:  		/* lwz R12, <#[R1 - 8]> */
		/* 820879F4h case    9:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820879F4h case    9:*/		return 0x820879F8;
		  /* 820879F8h */ case   10:  		/* mtspr LR, R12 */
		/* 820879F8h case   10:*/		regs.LR = regs.R12;
		/* 820879F8h case   10:*/		return 0x820879FC;
		  /* 820879FCh */ case   11:  		/* ld R31, <#[R1 - 16]> */
		/* 820879FCh case   11:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820879FCh case   11:*/		return 0x82087A00;
		  /* 82087A00h */ case   12:  		/* bclr 20, CR0_LT */
		/* 82087A00h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82087A00h case   12:*/		return 0x82087A04;
	}
	return 0x82087A04;
} // Block from 820879D0h-82087A04h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82087A04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087A04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087A04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087A04);
		  /* 82087A04h */ case    0:  		/* nop */
		/* 82087A04h case    0:*/		cpu::op::nop();
		/* 82087A04h case    0:*/		return 0x82087A08;
	}
	return 0x82087A08;
} // Block from 82087A04h-82087A08h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82087A08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087A08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087A08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087A08);
		  /* 82087A08h */ case    0:  		/* mfspr R12, LR */
		/* 82087A08h case    0:*/		regs.R12 = regs.LR;
		/* 82087A08h case    0:*/		return 0x82087A0C;
		  /* 82087A0Ch */ case    1:  		/* bl 38992 */
		/* 82087A0Ch case    1:*/		regs.LR = 0x82087A10; return 0x8209125C;
		/* 82087A0Ch case    1:*/		return 0x82087A10;
		  /* 82087A10h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82087A10h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82087A10h case    2:*/		return 0x82087A14;
		  /* 82087A14h */ case    3:  		/* mr R30, R3 */
		/* 82087A14h case    3:*/		regs.R30 = regs.R3;
		/* 82087A14h case    3:*/		return 0x82087A18;
		  /* 82087A18h */ case    4:  		/* stw R4, <#[R1 + 204]> */
		/* 82087A18h case    4:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x000000CC) );
		/* 82087A18h case    4:*/		return 0x82087A1C;
		  /* 82087A1Ch */ case    5:  		/* mr R29, R5 */
		/* 82087A1Ch case    5:*/		regs.R29 = regs.R5;
		/* 82087A1Ch case    5:*/		return 0x82087A20;
		  /* 82087A20h */ case    6:  		/* li R31, 0 */
		/* 82087A20h case    6:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82087A20h case    6:*/		return 0x82087A24;
		  /* 82087A24h */ case    7:  		/* li R5, 24 */
		/* 82087A24h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x18);
		/* 82087A24h case    7:*/		return 0x82087A28;
		  /* 82087A28h */ case    8:  		/* li R4, 0 */
		/* 82087A28h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82087A28h case    8:*/		return 0x82087A2C;
		  /* 82087A2Ch */ case    9:  		/* stw R31, <#[R1 + 112]> */
		/* 82087A2Ch case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000070) );
		/* 82087A2Ch case    9:*/		return 0x82087A30;
		  /* 82087A30h */ case   10:  		/* addi R3, R1, 116 */
		/* 82087A30h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x74);
		/* 82087A30h case   10:*/		return 0x82087A34;
		  /* 82087A34h */ case   11:  		/* bl 39180 */
		/* 82087A34h case   11:*/		regs.LR = 0x82087A38; return 0x82091340;
		/* 82087A34h case   11:*/		return 0x82087A38;
		  /* 82087A38h */ case   12:  		/* addi R11, R1, 108 */
		/* 82087A38h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x6C);
		/* 82087A38h case   12:*/		return 0x82087A3C;
		  /* 82087A3Ch */ case   13:  		/* stw R31, <#[R1 + 104]> */
		/* 82087A3Ch case   13:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000068) );
		/* 82087A3Ch case   13:*/		return 0x82087A40;
		  /* 82087A40h */ case   14:  		/* li R6, 0 */
		/* 82087A40h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82087A40h case   14:*/		return 0x82087A44;
		  /* 82087A44h */ case   15:  		/* li R5, 1 */
		/* 82087A44h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82087A44h case   15:*/		return 0x82087A48;
		  /* 82087A48h */ case   16:  		/* li R4, 0 */
		/* 82087A48h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82087A48h case   16:*/		return 0x82087A4C;
		  /* 82087A4Ch */ case   17:  		/* addi R3, R1, 124 */
		/* 82087A4Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x7C);
		/* 82087A4Ch case   17:*/		return 0x82087A50;
		  /* 82087A50h */ case   18:  		/* stw R31, <#[R11]> */
		/* 82087A50h case   18:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 82087A50h case   18:*/		return 0x82087A54;
		  /* 82087A54h */ case   19:  		/* bl 1988692 */
		/* 82087A54h case   19:*/		regs.LR = 0x82087A58; return 0x8226D2A8;
		/* 82087A54h case   19:*/		return 0x82087A58;
		  /* 82087A58h */ case   20:  		/* cmpwi CR0, R3, 0 */
		/* 82087A58h case   20:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82087A58h case   20:*/		return 0x82087A5C;
		  /* 82087A5Ch */ case   21:  		/* bc 12, CR0_LT, 92 */
		/* 82087A5Ch case   21:*/		if ( regs.CR[0].lt ) { return 0x82087AB8;  }
		/* 82087A5Ch case   21:*/		return 0x82087A60;
		  /* 82087A60h */ case   22:  		/* addi R8, R1, 104 */
		/* 82087A60h case   22:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x68);
		/* 82087A60h case   22:*/		return 0x82087A64;
		  /* 82087A64h */ case   23:  		/* addi R11, R1, 112 */
		/* 82087A64h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 82087A64h case   23:*/		return 0x82087A68;
		  /* 82087A68h */ case   24:  		/* stw R8, <#[R1 + 84]> */
		/* 82087A68h case   24:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000054) );
		/* 82087A68h case   24:*/		return 0x82087A6C;
		  /* 82087A6Ch */ case   25:  		/* mr R10, R29 */
		/* 82087A6Ch case   25:*/		regs.R10 = regs.R29;
		/* 82087A6Ch case   25:*/		return 0x82087A70;
		  /* 82087A70h */ case   26:  		/* li R9, 1 */
		/* 82087A70h case   26:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 82087A70h case   26:*/		return 0x82087A74;
		  /* 82087A74h */ case   27:  		/* stw R11, <#[R1 + 92]> */
		/* 82087A74h case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 82087A74h case   27:*/		return 0x82087A78;
		  /* 82087A78h */ case   28:  		/* li R8, 0 */
		/* 82087A78h case   28:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82087A78h case   28:*/		return 0x82087A7C;
		  /* 82087A7Ch */ case   29:  		/* addi R7, R1, 204 */
		/* 82087A7Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xCC);
		/* 82087A7Ch case   29:*/		return 0x82087A80;
		  /* 82087A80h */ case   30:  		/* li R6, 1 */
		/* 82087A80h case   30:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82087A80h case   30:*/		return 0x82087A84;
		  /* 82087A84h */ case   31:  		/* mr R5, R30 */
		/* 82087A84h case   31:*/		regs.R5 = regs.R30;
		/* 82087A84h case   31:*/		return 0x82087A88;
		  /* 82087A88h */ case   32:  		/* li R4, 0 */
		/* 82087A88h case   32:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82087A88h case   32:*/		return 0x82087A8C;
		  /* 82087A8Ch */ case   33:  		/* li R3, 255 */
		/* 82087A8Ch case   33:*/		cpu::op::li<0>(regs,&regs.R3,0xFF);
		/* 82087A8Ch case   33:*/		return 0x82087A90;
		  /* 82087A90h */ case   34:  		/* bl 1987624 */
		/* 82087A90h case   34:*/		regs.LR = 0x82087A94; return 0x8226CEB8;
		/* 82087A90h case   34:*/		return 0x82087A94;
		  /* 82087A94h */ case   35:  		/* stw R3, <#[R1 + 96]> */
		/* 82087A94h case   35:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000060) );
		/* 82087A94h case   35:*/		return 0x82087A98;
		  /* 82087A98h */ case   36:  		/* cmplwi CR6, R3, 997 */
		/* 82087A98h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x000003E5);
		/* 82087A98h case   36:*/		return 0x82087A9C;
		  /* 82087A9Ch */ case   37:  		/* bc 4, CR6_EQ, 20 */
		/* 82087A9Ch case   37:*/		if ( !regs.CR[6].eq ) { return 0x82087AB0;  }
		/* 82087A9Ch case   37:*/		return 0x82087AA0;
		  /* 82087AA0h */ case   38:  		/* li R5, 1 */
		/* 82087AA0h case   38:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82087AA0h case   38:*/		return 0x82087AA4;
		  /* 82087AA4h */ case   39:  		/* addi R4, R1, 96 */
		/* 82087AA4h case   39:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 82087AA4h case   39:*/		return 0x82087AA8;
		  /* 82087AA8h */ case   40:  		/* addi R3, R1, 112 */
		/* 82087AA8h case   40:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 82087AA8h case   40:*/		return 0x82087AAC;
		  /* 82087AACh */ case   41:  		/* bl 5540 */
		/* 82087AACh case   41:*/		regs.LR = 0x82087AB0; return 0x82089050;
		/* 82087AACh case   41:*/		return 0x82087AB0;
	}
	return 0x82087AB0;
} // Block from 82087A08h-82087AB0h (42 instructions)

//////////////////////////////////////////////////////
// Block at 82087AB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087AB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087AB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087AB0);
		  /* 82087AB0h */ case    0:  		/* lwz R3, <#[R1 + 124]> */
		/* 82087AB0h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000007C) );
		/* 82087AB0h case    0:*/		return 0x82087AB4;
		  /* 82087AB4h */ case    1:  		/* bl 1988580 */
		/* 82087AB4h case    1:*/		regs.LR = 0x82087AB8; return 0x8226D298;
		/* 82087AB4h case    1:*/		return 0x82087AB8;
	}
	return 0x82087AB8;
} // Block from 82087AB0h-82087AB8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82087AB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087AB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087AB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087AB8);
		  /* 82087AB8h */ case    0:  		/* addi R1, R1, 176 */
		/* 82087AB8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82087AB8h case    0:*/		return 0x82087ABC;
		  /* 82087ABCh */ case    1:  		/* b 38896 */
		/* 82087ABCh case    1:*/		return 0x820912AC;
		/* 82087ABCh case    1:*/		return 0x82087AC0;
	}
	return 0x82087AC0;
} // Block from 82087AB8h-82087AC0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82087AC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087AC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087AC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087AC0);
		  /* 82087AC0h */ case    0:  		/* std R31, <#[R1 - 8]> */
		/* 82087AC0h case    0:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82087AC0h case    0:*/		return 0x82087AC4;
		  /* 82087AC4h */ case    1:  		/* lis R11, -32255 */
		/* 82087AC4h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82087AC4h case    1:*/		return 0x82087AC8;
		  /* 82087AC8h */ case    2:  		/* li R6, 0 */
		/* 82087AC8h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82087AC8h case    2:*/		return 0x82087ACC;
		  /* 82087ACCh */ case    3:  		/* addi R11, R11, -31264 */
		/* 82087ACCh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFF85E0);
		/* 82087ACCh case    3:*/		return 0x82087AD0;
		  /* 82087AD0h */ case    4:  		/* lhz R10, <#[R11]> */
		/* 82087AD0h case    4:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82087AD0h case    4:*/		return 0x82087AD4;
		  /* 82087AD4h */ case    5:  		/* addi R11, R11, 2 */
		/* 82087AD4h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 82087AD4h case    5:*/		return 0x82087AD8;
		  /* 82087AD8h */ case    6:  		/* cmplw CR6, R6, R3 */
		/* 82087AD8h case    6:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R3);
		/* 82087AD8h case    6:*/		return 0x82087ADC;
		  /* 82087ADCh */ case    7:  		/* bc 4, CR6_EQ, 72 */
		/* 82087ADCh case    7:*/		if ( !regs.CR[6].eq ) { return 0x82087B24;  }
		/* 82087ADCh case    7:*/		return 0x82087AE0;
		  /* 82087AE0h */ case    8:  		/* rlwinm. R8, R10, 0, 16, 31 */
		/* 82087AE0h case    8:*/		cpu::op::rlwinm<1,0,16,31>(regs,&regs.R8,regs.R10);
		/* 82087AE0h case    8:*/		return 0x82087AE4;
		  /* 82087AE4h */ case    9:  		/* li R10, 0 */
		/* 82087AE4h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82087AE4h case    9:*/		return 0x82087AE8;
		  /* 82087AE8h */ case   10:  		/* bc 12, CR0_EQ, 44 */
		/* 82087AE8h case   10:*/		if ( regs.CR[0].eq ) { return 0x82087B14;  }
		/* 82087AE8h case   10:*/		return 0x82087AEC;
		  /* 82087AECh */ case   11:  		/* addi R7, R5, -1 */
		/* 82087AECh case   11:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R5,0xFFFFFFFF);
		/* 82087AECh case   11:*/		return 0x82087AF0;
		  /* 82087AF0h */ case   12:  		/* addi R9, R4, -2 */
		/* 82087AF0h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R4,0xFFFFFFFE);
		/* 82087AF0h case   12:*/		return 0x82087AF4;
		  /* 82087AF4h */ case   13:  		/* cmplw CR6, R10, R7 */
		/* 82087AF4h case   13:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 82087AF4h case   13:*/		return 0x82087AF8;
		  /* 82087AF8h */ case   14:  		/* bc 4, CR6_LT, 28 */
		/* 82087AF8h case   14:*/		if ( !regs.CR[6].lt ) { return 0x82087B14;  }
		/* 82087AF8h case   14:*/		return 0x82087AFC;
		  /* 82087AFCh */ case   15:  		/* lhz R31, <#[R11]> */
		/* 82087AFCh case   15:*/		cpu::mem::load16z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 82087AFCh case   15:*/		return 0x82087B00;
		  /* 82087B00h */ case   16:  		/* addi R10, R10, 1 */
		/* 82087B00h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82087B00h case   16:*/		return 0x82087B04;
		  /* 82087B04h */ case   17:  		/* addi R11, R11, 2 */
		/* 82087B04h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 82087B04h case   17:*/		return 0x82087B08;
		  /* 82087B08h */ case   18:  		/* cmplw CR6, R10, R8 */
		/* 82087B08h case   18:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 82087B08h case   18:*/		return 0x82087B0C;
		  /* 82087B0Ch */ case   19:  		/* sthu R31, <#[R9 + 2]> */
		/* 82087B0Ch case   19:*/		cpu::mem::store16( regs, regs.R31, (uint32)(regs.R9 + 0x00000002) );
		regs.R9 = (uint32)(regs.R9 + 0x00000002);
		/* 82087B0Ch case   19:*/		return 0x82087B10;
		  /* 82087B10h */ case   20:  		/* bc 12, CR6_LT, -28 */
		/* 82087B10h case   20:*/		if ( regs.CR[6].lt ) { return 0x82087AF4;  }
		/* 82087B10h case   20:*/		return 0x82087B14;
	}
	return 0x82087B14;
} // Block from 82087AC0h-82087B14h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82087B14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087B14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087B14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087B14);
		  /* 82087B14h */ case    0:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 82087B14h case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 82087B14h case    0:*/		return 0x82087B18;
		  /* 82087B18h */ case    1:  		/* li R9, 0 */
		/* 82087B18h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82087B18h case    1:*/		return 0x82087B1C;
		  /* 82087B1Ch */ case    2:  		/* sthx R9, <#[R10 + R4]> */
		/* 82087B1Ch case    2:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82087B1Ch case    2:*/		return 0x82087B20;
		  /* 82087B20h */ case    3:  		/* b 12 */
		/* 82087B20h case    3:*/		return 0x82087B2C;
		/* 82087B20h case    3:*/		return 0x82087B24;
	}
	return 0x82087B24;
} // Block from 82087B14h-82087B24h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82087B24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087B24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087B24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087B24);
		  /* 82087B24h */ case    0:  		/* rlwinm R10, R10, 1, 15, 30 */
		/* 82087B24h case    0:*/		cpu::op::rlwinm<0,1,15,30>(regs,&regs.R10,regs.R10);
		/* 82087B24h case    0:*/		return 0x82087B28;
		  /* 82087B28h */ case    1:  		/* add R11, R10, R11 */
		/* 82087B28h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82087B28h case    1:*/		return 0x82087B2C;
	}
	return 0x82087B2C;
} // Block from 82087B24h-82087B2Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82087B2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087B2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087B2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087B2C);
		  /* 82087B2Ch */ case    0:  		/* addi R6, R6, 1 */
		/* 82087B2Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 82087B2Ch case    0:*/		return 0x82087B30;
		  /* 82087B30h */ case    1:  		/* cmplw CR6, R6, R3 */
		/* 82087B30h case    1:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R3);
		/* 82087B30h case    1:*/		return 0x82087B34;
		  /* 82087B34h */ case    2:  		/* bc 4, CR6_GT, -100 */
		/* 82087B34h case    2:*/		if ( !regs.CR[6].gt ) { return 0x82087AD0;  }
		/* 82087B34h case    2:*/		return 0x82087B38;
		  /* 82087B38h */ case    3:  		/* ld R31, <#[R1 - 8]> */
		/* 82087B38h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82087B38h case    3:*/		return 0x82087B3C;
		  /* 82087B3Ch */ case    4:  		/* bclr 20, CR0_LT */
		/* 82087B3Ch case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82087B3Ch case    4:*/		return 0x82087B40;
	}
	return 0x82087B40;
} // Block from 82087B2Ch-82087B40h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82087B40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087B40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087B40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087B40);
		  /* 82087B40h */ case    0:  		/* mfspr R12, LR */
		/* 82087B40h case    0:*/		regs.R12 = regs.LR;
		/* 82087B40h case    0:*/		return 0x82087B44;
		  /* 82087B44h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82087B44h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82087B44h case    1:*/		return 0x82087B48;
		  /* 82087B48h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82087B48h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82087B48h case    2:*/		return 0x82087B4C;
		  /* 82087B4Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82087B4Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82087B4Ch case    3:*/		return 0x82087B50;
		  /* 82087B50h */ case    4:  		/* stwu R1, <#[R1 - 800]> */
		/* 82087B50h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFCE0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFCE0);
		/* 82087B50h case    4:*/		return 0x82087B54;
		  /* 82087B54h */ case    5:  		/* li R30, 0 */
		/* 82087B54h case    5:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82087B54h case    5:*/		return 0x82087B58;
		  /* 82087B58h */ case    6:  		/* li R3, 10 */
		/* 82087B58h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0xA);
		/* 82087B58h case    6:*/		return 0x82087B5C;
		  /* 82087B5Ch */ case    7:  		/* mr R31, R30 */
		/* 82087B5Ch case    7:*/		regs.R31 = regs.R30;
		/* 82087B5Ch case    7:*/		return 0x82087B60;
		  /* 82087B60h */ case    8:  		/* bl 1988440 */
		/* 82087B60h case    8:*/		regs.LR = 0x82087B64; return 0x8226D2B8;
		/* 82087B60h case    8:*/		return 0x82087B64;
		  /* 82087B64h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 82087B64h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82087B64h case    9:*/		return 0x82087B68;
		  /* 82087B68h */ case   10:  		/* bc 12, CR0_EQ, 412 */
		/* 82087B68h case   10:*/		if ( regs.CR[0].eq ) { return 0x82087D04;  }
		/* 82087B68h case   10:*/		return 0x82087B6C;
		  /* 82087B6Ch */ case   11:  		/* bl 1987436 */
		/* 82087B6Ch case   11:*/		regs.LR = 0x82087B70; return 0x8226CED8;
		/* 82087B6Ch case   11:*/		return 0x82087B70;
		  /* 82087B70h */ case   12:  		/* cmplwi CR6, R3, 3 */
		/* 82087B70h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000003);
		/* 82087B70h case   12:*/		return 0x82087B74;
		  /* 82087B74h */ case   13:  		/* bc 12, CR6_EQ, 400 */
		/* 82087B74h case   13:*/		if ( regs.CR[6].eq ) { return 0x82087D04;  }
		/* 82087B74h case   13:*/		return 0x82087B78;
		  /* 82087B78h */ case   14:  		/* cmplwi CR6, R3, 6 */
		/* 82087B78h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000006);
		/* 82087B78h case   14:*/		return 0x82087B7C;
		  /* 82087B7Ch */ case   15:  		/* bc 12, CR6_EQ, 392 */
		/* 82087B7Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x82087D04;  }
		/* 82087B7Ch case   15:*/		return 0x82087B80;
		  /* 82087B80h */ case   16:  		/* cmplwi CR6, R3, 8 */
		/* 82087B80h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000008);
		/* 82087B80h case   16:*/		return 0x82087B84;
		  /* 82087B84h */ case   17:  		/* bc 12, CR6_EQ, 384 */
		/* 82087B84h case   17:*/		if ( regs.CR[6].eq ) { return 0x82087D04;  }
		/* 82087B84h case   17:*/		return 0x82087B88;
		  /* 82087B88h */ case   18:  		/* cmplwi CR6, R3, 4 */
		/* 82087B88h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000004);
		/* 82087B88h case   18:*/		return 0x82087B8C;
		  /* 82087B8Ch */ case   19:  		/* bc 12, CR6_EQ, 376 */
		/* 82087B8Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x82087D04;  }
		/* 82087B8Ch case   19:*/		return 0x82087B90;
		  /* 82087B90h */ case   20:  		/* addi R7, R1, 80 */
		/* 82087B90h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82087B90h case   20:*/		return 0x82087B94;
		  /* 82087B94h */ case   21:  		/* li R6, 4 */
		/* 82087B94h case   21:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82087B94h case   21:*/		return 0x82087B98;
		  /* 82087B98h */ case   22:  		/* addi R5, R1, 84 */
		/* 82087B98h case   22:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 82087B98h case   22:*/		return 0x82087B9C;
		  /* 82087B9Ch */ case   23:  		/* li R4, 2 */
		/* 82087B9Ch case   23:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 82087B9Ch case   23:*/		return 0x82087BA0;
		  /* 82087BA0h */ case   24:  		/* li R3, 2 */
		/* 82087BA0h case   24:*/		cpu::op::li<0>(regs,&regs.R3,0x2);
		/* 82087BA0h case   24:*/		return 0x82087BA4;
		  /* 82087BA4h */ case   25:  		/* bl 1988004 */
		/* 82087BA4h case   25:*/		regs.LR = 0x82087BA8; return 0x8226D148;
		/* 82087BA4h case   25:*/		return 0x82087BA8;
	}
	return 0x82087BA8;
} // Block from 82087B40h-82087BA8h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82087BA8h
// Function '?SetVertexDeclaration@D3DDevice@ATG@@QAAJPAUD3DVertexDeclaration@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087BA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087BA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087BA8);
		  /* 82087BA8h */ case    0:  		/* cmpwi CR0, R3, 0 */
		/* 82087BA8h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82087BA8h case    0:*/		return 0x82087BAC;
		  /* 82087BACh */ case    1:  		/* bc 4, CR0_EQ, 344 */
		/* 82087BACh case    1:*/		if ( !regs.CR[0].eq ) { return 0x82087D04;  }
		/* 82087BACh case    1:*/		return 0x82087BB0;
		  /* 82087BB0h */ case    2:  		/* lwz R11, <#[R1 + 84]> */
		/* 82087BB0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82087BB0h case    2:*/		return 0x82087BB4;
		  /* 82087BB4h */ case    3:  		/* rlwinm R11, R11, 0, 16, 23 */
		/* 82087BB4h case    3:*/		cpu::op::rlwinm<0,0,16,23>(regs,&regs.R11,regs.R11);
		/* 82087BB4h case    3:*/		return 0x82087BB8;
		  /* 82087BB8h */ case    4:  		/* cmplwi CR6, R11, 768 */
		/* 82087BB8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000300);
		/* 82087BB8h case    4:*/		return 0x82087BBC;
		  /* 82087BBCh */ case    5:  		/* bc 4, CR6_EQ, 328 */
		/* 82087BBCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x82087D04;  }
		/* 82087BBCh case    5:*/		return 0x82087BC0;
		  /* 82087BC0h */ case    6:  		/* addi R7, R1, 80 */
		/* 82087BC0h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82087BC0h case    6:*/		return 0x82087BC4;
		  /* 82087BC4h */ case    7:  		/* li R6, 4 */
		/* 82087BC4h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82087BC4h case    7:*/		return 0x82087BC8;
		  /* 82087BC8h */ case    8:  		/* addi R5, R1, 88 */
		/* 82087BC8h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x58);
		/* 82087BC8h case    8:*/		return 0x82087BCC;
		  /* 82087BCCh */ case    9:  		/* li R4, 10 */
		/* 82087BCCh case    9:*/		cpu::op::li<0>(regs,&regs.R4,0xA);
		/* 82087BCCh case    9:*/		return 0x82087BD0;
		  /* 82087BD0h */ case   10:  		/* li R3, 3 */
		/* 82087BD0h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 82087BD0h case   10:*/		return 0x82087BD4;
		  /* 82087BD4h */ case   11:  		/* bl 1987956 */
		/* 82087BD4h case   11:*/		regs.LR = 0x82087BD8; return 0x8226D148;
		/* 82087BD4h case   11:*/		return 0x82087BD8;
		  /* 82087BD8h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 82087BD8h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82087BD8h case   12:*/		return 0x82087BDC;
		  /* 82087BDCh */ case   13:  		/* bc 4, CR0_EQ, 296 */
		/* 82087BDCh case   13:*/		if ( !regs.CR[0].eq ) { return 0x82087D04;  }
		/* 82087BDCh case   13:*/		return 0x82087BE0;
		  /* 82087BE0h */ case   14:  		/* lwz R11, <#[R1 + 88]> */
		/* 82087BE0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 82087BE0h case   14:*/		return 0x82087BE4;
		  /* 82087BE4h */ case   15:  		/* rlwinm. R10, R11, 0, 8, 8 */
		/* 82087BE4h case   15:*/		cpu::op::rlwinm<1,0,8,8>(regs,&regs.R10,regs.R11);
		/* 82087BE4h case   15:*/		return 0x82087BE8;
		  /* 82087BE8h */ case   16:  		/* bc 4, CR0_EQ, 12 */
		/* 82087BE8h case   16:*/		if ( !regs.CR[0].eq ) { return 0x82087BF4;  }
		/* 82087BE8h case   16:*/		return 0x82087BEC;
		  /* 82087BECh */ case   17:  		/* rlwinm. R11, R11, 0, 9, 9 */
		/* 82087BECh case   17:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R11);
		/* 82087BECh case   17:*/		return 0x82087BF0;
		  /* 82087BF0h */ case   18:  		/* bc 4, CR0_EQ, 276 */
		/* 82087BF0h case   18:*/		if ( !regs.CR[0].eq ) { return 0x82087D04;  }
		/* 82087BF0h case   18:*/		return 0x82087BF4;
	}
	return 0x82087BF4;
} // Block from 82087BA8h-82087BF4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82087BF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087BF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087BF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087BF4);
		  /* 82087BF4h */ case    0:  		/* bl 1987284 */
		/* 82087BF4h case    0:*/		regs.LR = 0x82087BF8; return 0x8226CEC8;
		/* 82087BF4h case    0:*/		return 0x82087BF8;
		  /* 82087BF8h */ case    1:  		/* mr R31, R3 */
		/* 82087BF8h case    1:*/		regs.R31 = regs.R3;
		/* 82087BF8h case    1:*/		return 0x82087BFC;
		  /* 82087BFCh */ case    2:  		/* li R5, 510 */
		/* 82087BFCh case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x1FE);
		/* 82087BFCh case    2:*/		return 0x82087C00;
		  /* 82087C00h */ case    3:  		/* sth R30, <#[R1 + 256]> */
		/* 82087C00h case    3:*/		cpu::mem::store16( regs, regs.R30, (uint32)(regs.R1 + 0x00000100) );
		/* 82087C00h case    3:*/		return 0x82087C04;
		  /* 82087C04h */ case    4:  		/* li R4, 0 */
		/* 82087C04h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82087C04h case    4:*/		return 0x82087C08;
		  /* 82087C08h */ case    5:  		/* addi R3, R1, 258 */
		/* 82087C08h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x102);
		/* 82087C08h case    5:*/		return 0x82087C0C;
		  /* 82087C0Ch */ case    6:  		/* bl 38708 */
		/* 82087C0Ch case    6:*/		regs.LR = 0x82087C10; return 0x82091340;
		/* 82087C0Ch case    6:*/		return 0x82087C10;
		  /* 82087C10h */ case    7:  		/* li R5, 62 */
		/* 82087C10h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x3E);
		/* 82087C10h case    7:*/		return 0x82087C14;
		  /* 82087C14h */ case    8:  		/* li R4, 0 */
		/* 82087C14h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82087C14h case    8:*/		return 0x82087C18;
	}
	return 0x82087C18;
} // Block from 82087BF4h-82087C18h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82087C18h
// Function '?SetVertexShader@D3DDevice@ATG@@QAAJPAUD3DVertexShader@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087C18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087C18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087C18);
		  /* 82087C18h */ case    0:  		/* sth R30, <#[R1 + 192]> */
		/* 82087C18h case    0:*/		cpu::mem::store16( regs, regs.R30, (uint32)(regs.R1 + 0x000000C0) );
		/* 82087C18h case    0:*/		return 0x82087C1C;
		  /* 82087C1Ch */ case    1:  		/* addi R3, R1, 194 */
		/* 82087C1Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xC2);
		/* 82087C1Ch case    1:*/		return 0x82087C20;
		  /* 82087C20h */ case    2:  		/* bl 38688 */
		/* 82087C20h case    2:*/		regs.LR = 0x82087C24; return 0x82091340;
		/* 82087C20h case    2:*/		return 0x82087C24;
		  /* 82087C24h */ case    3:  		/* li R11, 9 */
		/* 82087C24h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x9);
		/* 82087C24h case    3:*/		return 0x82087C28;
		  /* 82087C28h */ case    4:  		/* li R10, 13 */
		/* 82087C28h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0xD);
		/* 82087C28h case    4:*/		return 0x82087C2C;
		  /* 82087C2Ch */ case    5:  		/* stw R30, <#[R1 + 144]> */
		/* 82087C2Ch case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000090) );
		/* 82087C2Ch case    5:*/		return 0x82087C30;
		  /* 82087C30h */ case    6:  		/* li R9, 11 */
		/* 82087C30h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0xB);
		/* 82087C30h case    6:*/		return 0x82087C34;
		  /* 82087C34h */ case    7:  		/* stw R11, <#[R1 + 96]> */
		/* 82087C34h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 82087C34h case    7:*/		return 0x82087C38;
		  /* 82087C38h */ case    8:  		/* stw R11, <#[R1 + 100]> */
		/* 82087C38h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 82087C38h case    8:*/		return 0x82087C3C;
		  /* 82087C3Ch */ case    9:  		/* li R8, 10 */
		/* 82087C3Ch case    9:*/		cpu::op::li<0>(regs,&regs.R8,0xA);
		/* 82087C3Ch case    9:*/		return 0x82087C40;
		  /* 82087C40h */ case   10:  		/* stw R10, <#[R1 + 104]> */
		/* 82087C40h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000068) );
		/* 82087C40h case   10:*/		return 0x82087C44;
		  /* 82087C44h */ case   11:  		/* li R11, 16 */
		/* 82087C44h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x10);
		/* 82087C44h case   11:*/		return 0x82087C48;
		  /* 82087C48h */ case   12:  		/* stw R9, <#[R1 + 108]> */
		/* 82087C48h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000006C) );
		/* 82087C48h case   12:*/		return 0x82087C4C;
		  /* 82087C4Ch */ case   13:  		/* li R10, 12 */
		/* 82087C4Ch case   13:*/		cpu::op::li<0>(regs,&regs.R10,0xC);
		/* 82087C4Ch case   13:*/		return 0x82087C50;
		  /* 82087C50h */ case   14:  		/* li R9, 14 */
		/* 82087C50h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0xE);
		/* 82087C50h case   14:*/		return 0x82087C54;
		  /* 82087C54h */ case   15:  		/* stw R8, <#[R1 + 112]> */
		/* 82087C54h case   15:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000070) );
		/* 82087C54h case   15:*/		return 0x82087C58;
		  /* 82087C58h */ case   16:  		/* stw R11, <#[R1 + 116]> */
		/* 82087C58h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 82087C58h case   16:*/		return 0x82087C5C;
		  /* 82087C5Ch */ case   17:  		/* li R8, 17 */
		/* 82087C5Ch case   17:*/		cpu::op::li<0>(regs,&regs.R8,0x11);
		/* 82087C5Ch case   17:*/		return 0x82087C60;
		  /* 82087C60h */ case   18:  		/* stw R10, <#[R1 + 120]> */
		/* 82087C60h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000078) );
		/* 82087C60h case   18:*/		return 0x82087C64;
		  /* 82087C64h */ case   19:  		/* li R11, 15 */
		/* 82087C64h case   19:*/		cpu::op::li<0>(regs,&regs.R11,0xF);
		/* 82087C64h case   19:*/		return 0x82087C68;
		  /* 82087C68h */ case   20:  		/* stw R9, <#[R1 + 124]> */
		/* 82087C68h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000007C) );
		/* 82087C68h case   20:*/		return 0x82087C6C;
		  /* 82087C6Ch */ case   21:  		/* li R10, 4 */
		/* 82087C6Ch case   21:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 82087C6Ch case   21:*/		return 0x82087C70;
		  /* 82087C70h */ case   22:  		/* li R9, 2 */
		/* 82087C70h case   22:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 82087C70h case   22:*/		return 0x82087C74;
		  /* 82087C74h */ case   23:  		/* stw R8, <#[R1 + 128]> */
		/* 82087C74h case   23:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000080) );
		/* 82087C74h case   23:*/		return 0x82087C78;
		  /* 82087C78h */ case   24:  		/* li R7, 1 */
		/* 82087C78h case   24:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 82087C78h case   24:*/		return 0x82087C7C;
		  /* 82087C7Ch */ case   25:  		/* stw R11, <#[R1 + 132]> */
		/* 82087C7Ch case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 82087C7Ch case   25:*/		return 0x82087C80;
		  /* 82087C80h */ case   26:  		/* stw R10, <#[R1 + 152]> */
		/* 82087C80h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000098) );
		/* 82087C80h case   26:*/		return 0x82087C84;
		  /* 82087C84h */ case   27:  		/* li R8, 7 */
		/* 82087C84h case   27:*/		cpu::op::li<0>(regs,&regs.R8,0x7);
		/* 82087C84h case   27:*/		return 0x82087C88;
	}
	return 0x82087C88;
} // Block from 82087C18h-82087C88h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82087C88h
// Function '?SetPixelShader@D3DDevice@ATG@@QAAJPAUD3DPixelShader@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087C88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087C88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087C88);
		  /* 82087C88h */ case    0:  		/* stw R9, <#[R1 + 156]> */
		/* 82087C88h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000009C) );
		/* 82087C88h case    0:*/		return 0x82087C8C;
		  /* 82087C8Ch */ case    1:  		/* li R11, 3 */
		/* 82087C8Ch case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 82087C8Ch case    1:*/		return 0x82087C90;
		  /* 82087C90h */ case    2:  		/* stw R7, <#[R1 + 160]> */
		/* 82087C90h case    2:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x000000A0) );
		/* 82087C90h case    2:*/		return 0x82087C94;
		  /* 82087C94h */ case    3:  		/* li R10, 5 */
		/* 82087C94h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x5);
		/* 82087C94h case    3:*/		return 0x82087C98;
		  /* 82087C98h */ case    4:  		/* li R9, 8 */
		/* 82087C98h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x8);
		/* 82087C98h case    4:*/		return 0x82087C9C;
		  /* 82087C9Ch */ case    5:  		/* stw R30, <#[R1 + 148]> */
		/* 82087C9Ch case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000094) );
		/* 82087C9Ch case    5:*/		return 0x82087CA0;
		  /* 82087CA0h */ case    6:  		/* li R7, 6 */
		/* 82087CA0h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x6);
		/* 82087CA0h case    6:*/		return 0x82087CA4;
		  /* 82087CA4h */ case    7:  		/* stw R8, <#[R1 + 164]> */
		/* 82087CA4h case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000000A4) );
		/* 82087CA4h case    7:*/		return 0x82087CA8;
		  /* 82087CA8h */ case    8:  		/* stw R11, <#[R1 + 168]> */
		/* 82087CA8h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A8) );
		/* 82087CA8h case    8:*/		return 0x82087CAC;
		  /* 82087CACh */ case    9:  		/* cmplwi CR6, R31, 10 */
		/* 82087CACh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x0000000A);
		/* 82087CACh case    9:*/		return 0x82087CB0;
		  /* 82087CB0h */ case   10:  		/* stw R10, <#[R1 + 172]> */
		/* 82087CB0h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000AC) );
		/* 82087CB0h case   10:*/		return 0x82087CB4;
		  /* 82087CB4h */ case   11:  		/* stw R9, <#[R1 + 176]> */
		/* 82087CB4h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000000B0) );
		/* 82087CB4h case   11:*/		return 0x82087CB8;
		  /* 82087CB8h */ case   12:  		/* stw R7, <#[R1 + 180]> */
		/* 82087CB8h case   12:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x000000B4) );
		/* 82087CB8h case   12:*/		return 0x82087CBC;
		  /* 82087CBCh */ case   13:  		/* bc 12, CR6_LT, 8 */
		/* 82087CBCh case   13:*/		if ( regs.CR[6].lt ) { return 0x82087CC4;  }
		/* 82087CBCh case   13:*/		return 0x82087CC0;
		  /* 82087CC0h */ case   14:  		/* li R31, 1 */
		/* 82087CC0h case   14:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 82087CC0h case   14:*/		return 0x82087CC4;
	}
	return 0x82087CC4;
} // Block from 82087C88h-82087CC4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82087CC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087CC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087CC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087CC4);
		  /* 82087CC4h */ case    0:  		/* addi R11, R1, 96 */
		/* 82087CC4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 82087CC4h case    0:*/		return 0x82087CC8;
		  /* 82087CC8h */ case    1:  		/* rlwinm R31, R31, 2, 0, 29 */
		/* 82087CC8h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R31);
		/* 82087CC8h case    1:*/		return 0x82087CCC;
		  /* 82087CCCh */ case    2:  		/* li R5, 256 */
		/* 82087CCCh case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x100);
		/* 82087CCCh case    2:*/		return 0x82087CD0;
		  /* 82087CD0h */ case    3:  		/* addi R4, R1, 256 */
		/* 82087CD0h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x100);
		/* 82087CD0h case    3:*/		return 0x82087CD4;
		  /* 82087CD4h */ case    4:  		/* lwzx R3, <#[R31 + R11]> */
		/* 82087CD4h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 82087CD4h case    4:*/		return 0x82087CD8;
		  /* 82087CD8h */ case    5:  		/* bl -536 */
		/* 82087CD8h case    5:*/		regs.LR = 0x82087CDC; return 0x82087AC0;
		/* 82087CD8h case    5:*/		return 0x82087CDC;
		  /* 82087CDCh */ case    6:  		/* addi R11, R1, 144 */
		/* 82087CDCh case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x90);
		/* 82087CDCh case    6:*/		return 0x82087CE0;
		  /* 82087CE0h */ case    7:  		/* li R5, 32 */
		/* 82087CE0h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x20);
		/* 82087CE0h case    7:*/		return 0x82087CE4;
		  /* 82087CE4h */ case    8:  		/* addi R4, R1, 192 */
		/* 82087CE4h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 82087CE4h case    8:*/		return 0x82087CE8;
		  /* 82087CE8h */ case    9:  		/* lwzx R3, <#[R31 + R11]> */
		/* 82087CE8h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 82087CE8h case    9:*/		return 0x82087CEC;
		  /* 82087CECh */ case   10:  		/* bl -556 */
		/* 82087CECh case   10:*/		regs.LR = 0x82087CF0; return 0x82087AC0;
		/* 82087CECh case   10:*/		return 0x82087CF0;
		  /* 82087CF0h */ case   11:  		/* li R5, 1 */
		/* 82087CF0h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82087CF0h case   11:*/		return 0x82087CF4;
		  /* 82087CF4h */ case   12:  		/* addi R4, R1, 192 */
		/* 82087CF4h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xC0);
		/* 82087CF4h case   12:*/		return 0x82087CF8;
	}
	return 0x82087CF8;
} // Block from 82087CC4h-82087CF8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82087CF8h
// Function '?push_back@?$vector@UVTX_DECL@ATG@@V?$allocator@UVTX_DECL@ATG@@@std@@@std@@QAAXABUVTX_DECL@ATG@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087CF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087CF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087CF8);
		  /* 82087CF8h */ case    0:  		/* addi R3, R1, 256 */
		/* 82087CF8h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x100);
		/* 82087CF8h case    0:*/		return 0x82087CFC;
		  /* 82087CFCh */ case    1:  		/* bl -756 */
		/* 82087CFCh case    1:*/		regs.LR = 0x82087D00; return 0x82087A08;
		/* 82087CFCh case    1:*/		return 0x82087D00;
		  /* 82087D00h */ case    2:  		/* li R31, 1 */
		/* 82087D00h case    2:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 82087D00h case    2:*/		return 0x82087D04;
	}
	return 0x82087D04;
} // Block from 82087CF8h-82087D04h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82087D04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087D04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087D04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087D04);
		  /* 82087D04h */ case    0:  		/* mr R3, R31 */
		/* 82087D04h case    0:*/		regs.R3 = regs.R31;
		/* 82087D04h case    0:*/		return 0x82087D08;
		  /* 82087D08h */ case    1:  		/* addi R1, R1, 800 */
		/* 82087D08h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x320);
		/* 82087D08h case    1:*/		return 0x82087D0C;
		  /* 82087D0Ch */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 82087D0Ch case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82087D0Ch case    2:*/		return 0x82087D10;
		  /* 82087D10h */ case    3:  		/* mtspr LR, R12 */
		/* 82087D10h case    3:*/		regs.LR = regs.R12;
		/* 82087D10h case    3:*/		return 0x82087D14;
		  /* 82087D14h */ case    4:  		/* ld R30, <#[R1 - 24]> */
		/* 82087D14h case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82087D14h case    4:*/		return 0x82087D18;
		  /* 82087D18h */ case    5:  		/* ld R31, <#[R1 - 16]> */
		/* 82087D18h case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82087D18h case    5:*/		return 0x82087D1C;
		  /* 82087D1Ch */ case    6:  		/* bclr 20, CR0_LT */
		/* 82087D1Ch case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82087D1Ch case    6:*/		return 0x82087D20;
	}
	return 0x82087D20;
} // Block from 82087D04h-82087D20h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82087D20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087D20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087D20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087D20);
		  /* 82087D20h */ case    0:  		/* lwz R17, <#[R6 - 11576]> */
		/* 82087D20h case    0:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R6 + 0xFFFFD2C8) );
		/* 82087D20h case    0:*/		return 0x82087D24;
		  /* 82087D24h */ case    1:  		/* lwz R16, <#[R4 - 15624]> */
		/* 82087D24h case    1:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R4 + 0xFFFFC2F8) );
		/* 82087D24h case    1:*/		return 0x82087D28;
	}
	return 0x82087D28;
} // Block from 82087D20h-82087D28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82087D28h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087D28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087D28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087D28);
		  /* 82087D28h */ case    0:  		/* mfspr R12, LR */
		/* 82087D28h case    0:*/		regs.R12 = regs.LR;
		/* 82087D28h case    0:*/		return 0x82087D2C;
		  /* 82087D2Ch */ case    1:  		/* bl 38188 */
		/* 82087D2Ch case    1:*/		regs.LR = 0x82087D30; return 0x82091258;
		/* 82087D2Ch case    1:*/		return 0x82087D30;
		  /* 82087D30h */ case    2:  		/* addi R31, R1, -496 */
		/* 82087D30h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0xFFFFFE10);
		/* 82087D30h case    2:*/		return 0x82087D34;
		  /* 82087D34h */ case    3:  		/* stwu R1, <#[R1 - 496]> */
		/* 82087D34h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE10);
		/* 82087D34h case    3:*/		return 0x82087D38;
		  /* 82087D38h */ case    4:  		/* ori R0, R0, 0 */
		/* 82087D38h case    4:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 82087D38h case    4:*/		return 0x82087D3C;
		  /* 82087D3Ch */ case    5:  		/* nop */
		/* 82087D3Ch case    5:*/		cpu::op::nop();
		/* 82087D3Ch case    5:*/		return 0x82087D40;
		  /* 82087D40h */ case    6:  		/* nop */
		/* 82087D40h case    6:*/		cpu::op::nop();
		/* 82087D40h case    6:*/		return 0x82087D44;
	}
	return 0x82087D44;
} // Block from 82087D28h-82087D44h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82087D44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087D44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087D44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087D44);
		  /* 82087D44h */ case    0:  		/* lis R9, -32215 */
		/* 82087D44h case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8229);
		/* 82087D44h case    0:*/		return 0x82087D48;
		  /* 82087D48h */ case    1:  		/* lis R8, -32215 */
		/* 82087D48h case    1:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8229);
		/* 82087D48h case    1:*/		return 0x82087D4C;
		  /* 82087D4Ch */ case    2:  		/* li R11, -1 */
		/* 82087D4Ch case    2:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82087D4Ch case    2:*/		return 0x82087D50;
		  /* 82087D50h */ case    3:  		/* li R10, -1 */
		/* 82087D50h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 82087D50h case    3:*/		return 0x82087D54;
		  /* 82087D54h */ case    4:  		/* stw R11, <#[R9 - 25244]> */
		/* 82087D54h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0xFFFF9D64) );
		/* 82087D54h case    4:*/		return 0x82087D58;
		  /* 82087D58h */ case    5:  		/* stw R10, <#[R8 - 25240]> */
		/* 82087D58h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0xFFFF9D68) );
		/* 82087D58h case    5:*/		return 0x82087D5C;
		  /* 82087D5Ch */ case    6:  		/* bl 5796 */
		/* 82087D5Ch case    6:*/		regs.LR = 0x82087D60; return 0x82089400;
		/* 82087D5Ch case    6:*/		return 0x82087D60;
		  /* 82087D60h */ case    7:  		/* li R3, 1 */
		/* 82087D60h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82087D60h case    7:*/		return 0x82087D64;
		  /* 82087D64h */ case    8:  		/* bl 5356 */
		/* 82087D64h case    8:*/		regs.LR = 0x82087D68; return 0x82089250;
		/* 82087D64h case    8:*/		return 0x82087D68;
		  /* 82087D68h */ case    9:  		/* bl -552 */
		/* 82087D68h case    9:*/		regs.LR = 0x82087D6C; return 0x82087B40;
		/* 82087D68h case    9:*/		return 0x82087D6C;
		  /* 82087D6Ch */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 82087D6Ch case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82087D6Ch case   10:*/		return 0x82087D70;
		  /* 82087D70h */ case   11:  		/* bc 12, CR0_EQ, 12 */
		/* 82087D70h case   11:*/		if ( regs.CR[0].eq ) { return 0x82087D7C;  }
		/* 82087D70h case   11:*/		return 0x82087D74;
		  /* 82087D74h */ case   12:  		/* bl 1986932 */
		/* 82087D74h case   12:*/		regs.LR = 0x82087D78; return 0x8226CEE8;
		/* 82087D74h case   12:*/		return 0x82087D78;
		  /* 82087D78h */ case   13:  		/* nop */
		/* 82087D78h case   13:*/		cpu::op::nop();
		/* 82087D78h case   13:*/		return 0x82087D7C;
	}
	return 0x82087D7C;
} // Block from 82087D44h-82087D7Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 82087D7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087D7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087D7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087D7C);
		  /* 82087D7Ch */ case    0:  		/* bl 46404 */
		/* 82087D7Ch case    0:*/		regs.LR = 0x82087D80; return 0x820932C0;
		/* 82087D7Ch case    0:*/		return 0x82087D80;
		  /* 82087D80h */ case    1:  		/* bl 5208 */
		/* 82087D80h case    1:*/		regs.LR = 0x82087D84; return 0x820891D8;
		/* 82087D80h case    1:*/		return 0x82087D84;
		  /* 82087D84h */ case    2:  		/* li R3, 1 */
		/* 82087D84h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82087D84h case    2:*/		return 0x82087D88;
		  /* 82087D88h */ case    3:  		/* bl 4976 */
		/* 82087D88h case    3:*/		regs.LR = 0x82087D8C; return 0x820890F8;
		/* 82087D88h case    3:*/		return 0x82087D8C;
		  /* 82087D8Ch */ case    4:  		/* lis R11, -32215 */
		/* 82087D8Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82087D8Ch case    4:*/		return 0x82087D90;
		  /* 82087D90h */ case    5:  		/* lwz R11, <#[R11 - 31264]> */
		/* 82087D90h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0xFFFF85E0) );
		/* 82087D90h case    5:*/		return 0x82087D94;
		  /* 82087D94h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 82087D94h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82087D94h case    6:*/		return 0x82087D98;
		  /* 82087D98h */ case    7:  		/* bc 12, CR6_EQ, 272 */
		/* 82087D98h case    7:*/		if ( regs.CR[6].eq ) { return 0x82087EA8;  }
		/* 82087D98h case    7:*/		return 0x82087D9C;
		  /* 82087D9Ch */ case    8:  		/* li R28, 0 */
		/* 82087D9Ch case    8:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82087D9Ch case    8:*/		return 0x82087DA0;
		  /* 82087DA0h */ case    9:  		/* addi R30, R31, 112 */
		/* 82087DA0h case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x70);
		/* 82087DA0h case    9:*/		return 0x82087DA4;
		  /* 82087DA4h */ case   10:  		/* mr R29, R28 */
		/* 82087DA4h case   10:*/		regs.R29 = regs.R28;
		/* 82087DA4h case   10:*/		return 0x82087DA8;
		  /* 82087DA8h */ case   11:  		/* stw R30, <#[R31 + 84]> */
		/* 82087DA8h case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000054) );
		/* 82087DA8h case   11:*/		return 0x82087DAC;
		  /* 82087DACh */ case   12:  		/* stw R28, <#[R31 + 96]> */
		/* 82087DACh case   12:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000060) );
		/* 82087DACh case   12:*/		return 0x82087DB0;
		  /* 82087DB0h */ case   13:  		/* bl 4920 */
		/* 82087DB0h case   13:*/		regs.LR = 0x82087DB4; return 0x820890E8;
		/* 82087DB0h case   13:*/		return 0x82087DB4;
		  /* 82087DB4h */ case   14:  		/* stw R3, <#[R31 + 88]> */
		/* 82087DB4h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000058) );
		/* 82087DB4h case   14:*/		return 0x82087DB8;
		  /* 82087DB8h */ case   15:  		/* cmplwi CR0, R3, 0 */
		/* 82087DB8h case   15:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82087DB8h case   15:*/		return 0x82087DBC;
		  /* 82087DBCh */ case   16:  		/* bc 12, CR0_EQ, 212 */
		/* 82087DBCh case   16:*/		if ( regs.CR[0].eq ) { return 0x82087E90;  }
		/* 82087DBCh case   16:*/		return 0x82087DC0;
		  /* 82087DC0h */ case   17:  		/* addi R10, R31, 192 */
		/* 82087DC0h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0xC0);
		/* 82087DC0h case   17:*/		return 0x82087DC4;
		  /* 82087DC4h */ case   18:  		/* stw R10, <#[R31 + 92]> */
		/* 82087DC4h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000005C) );
		/* 82087DC4h case   18:*/		return 0x82087DC8;
		  /* 82087DC8h */ case   19:  		/* lbz R9, <#[R3]> */
		/* 82087DC8h case   19:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 82087DC8h case   19:*/		return 0x82087DCC;
		  /* 82087DCCh */ case   20:  		/* stb R9, <#[R31 + 80]> */
		/* 82087DCCh case   20:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R31 + 0x00000050) );
		/* 82087DCCh case   20:*/		return 0x82087DD0;
		  /* 82087DD0h */ case   21:  		/* extsb. R11, R9 */
		/* 82087DD0h case   21:*/		cpu::op::extsb<1>(regs,&regs.R11,regs.R9);
		/* 82087DD0h case   21:*/		return 0x82087DD4;
		  /* 82087DD4h */ case   22:  		/* bc 12, CR0_EQ, 52 */
		/* 82087DD4h case   22:*/		if ( regs.CR[0].eq ) { return 0x82087E08;  }
		/* 82087DD4h case   22:*/		return 0x82087DD8;
		  /* 82087DD8h */ case   23:  		/* cmpwi CR6, R11, 32 */
		/* 82087DD8h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000020);
		/* 82087DD8h case   23:*/		return 0x82087DDC;
		  /* 82087DDCh */ case   24:  		/* bc 12, CR6_EQ, 12 */
		/* 82087DDCh case   24:*/		if ( regs.CR[6].eq ) { return 0x82087DE8;  }
		/* 82087DDCh case   24:*/		return 0x82087DE0;
		  /* 82087DE0h */ case   25:  		/* cmpwi CR6, R11, 9 */
		/* 82087DE0h case   25:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 82087DE0h case   25:*/		return 0x82087DE4;
		  /* 82087DE4h */ case   26:  		/* bc 4, CR6_EQ, 36 */
		/* 82087DE4h case   26:*/		if ( !regs.CR[6].eq ) { return 0x82087E08;  }
		/* 82087DE4h case   26:*/		return 0x82087DE8;
	}
	return 0x82087DE8;
} // Block from 82087D7Ch-82087DE8h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82087DE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087DE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087DE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087DE8);
		  /* 82087DE8h */ case    0:  		/* stb R28, <#[R10]> */
		/* 82087DE8h case    0:*/		cpu::mem::store8( regs, regs.R28, (uint32)(regs.R10 + 0x00000000) );
		/* 82087DE8h case    0:*/		return 0x82087DEC;
		  /* 82087DECh */ case    1:  		/* addi R10, R10, 1 */
		/* 82087DECh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82087DECh case    1:*/		return 0x82087DF0;
		  /* 82087DF0h */ case    2:  		/* lbzu R9, <#[R3 + 1]> */
		/* 82087DF0h case    2:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000001) );
		regs.R3 = (uint32)(regs.R3 + 0x00000001);
		/* 82087DF0h case    2:*/		return 0x82087DF4;
		  /* 82087DF4h */ case    3:  		/* stw R10, <#[R31 + 92]> */
		/* 82087DF4h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000005C) );
		/* 82087DF4h case    3:*/		return 0x82087DF8;
		  /* 82087DF8h */ case    4:  		/* stw R3, <#[R31 + 88]> */
		/* 82087DF8h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000058) );
		/* 82087DF8h case    4:*/		return 0x82087DFC;
		  /* 82087DFCh */ case    5:  		/* stb R9, <#[R31 + 80]> */
		/* 82087DFCh case    5:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R31 + 0x00000050) );
		/* 82087DFCh case    5:*/		return 0x82087E00;
		  /* 82087E00h */ case    6:  		/* nop */
		/* 82087E00h case    6:*/		cpu::op::nop();
		/* 82087E00h case    6:*/		return 0x82087E04;
		  /* 82087E04h */ case    7:  		/* b -52 */
		/* 82087E04h case    7:*/		return 0x82087DD0;
		/* 82087E04h case    7:*/		return 0x82087E08;
	}
	return 0x82087E08;
} // Block from 82087DE8h-82087E08h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82087E08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087E08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087E08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087E08);
		  /* 82087E08h */ case    0:  		/* cmpwi CR6, R11, 0 */
		/* 82087E08h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82087E08h case    0:*/		return 0x82087E0C;
		  /* 82087E0Ch */ case    1:  		/* bc 12, CR6_EQ, 128 */
		/* 82087E0Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82087E8C;  }
		/* 82087E0Ch case    1:*/		return 0x82087E10;
		  /* 82087E10h */ case    2:  		/* stw R10, <#[R30]> */
		/* 82087E10h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 82087E10h case    2:*/		return 0x82087E14;
		  /* 82087E14h */ case    3:  		/* addi R29, R29, 1 */
		/* 82087E14h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 82087E14h case    3:*/		return 0x82087E18;
		  /* 82087E18h */ case    4:  		/* addi R30, R30, 4 */
		/* 82087E18h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82087E18h case    4:*/		return 0x82087E1C;
		  /* 82087E1Ch */ case    5:  		/* mr R8, R28 */
		/* 82087E1Ch case    5:*/		regs.R8 = regs.R28;
		/* 82087E1Ch case    5:*/		return 0x82087E20;
		  /* 82087E20h */ case    6:  		/* stw R29, <#[R31 + 96]> */
		/* 82087E20h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000060) );
		/* 82087E20h case    6:*/		return 0x82087E24;
		  /* 82087E24h */ case    7:  		/* stw R30, <#[R31 + 84]> */
		/* 82087E24h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000054) );
		/* 82087E24h case    7:*/		return 0x82087E28;
		  /* 82087E28h */ case    8:  		/* stw R28, <#[R31 + 100]> */
		/* 82087E28h case    8:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000064) );
		/* 82087E28h case    8:*/		return 0x82087E2C;
		  /* 82087E2Ch */ case    9:  		/* cmpwi CR6, R11, 34 */
		/* 82087E2Ch case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000022);
		/* 82087E2Ch case    9:*/		return 0x82087E30;
		  /* 82087E30h */ case   10:  		/* bc 12, CR6_EQ, 20 */
		/* 82087E30h case   10:*/		if ( regs.CR[6].eq ) { return 0x82087E44;  }
		/* 82087E30h case   10:*/		return 0x82087E34;
		  /* 82087E34h */ case   11:  		/* stb R9, <#[R10]> */
		/* 82087E34h case   11:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82087E34h case   11:*/		return 0x82087E38;
		  /* 82087E38h */ case   12:  		/* addi R10, R10, 1 */
		/* 82087E38h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82087E38h case   12:*/		return 0x82087E3C;
		  /* 82087E3Ch */ case   13:  		/* stw R10, <#[R31 + 92]> */
		/* 82087E3Ch case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000005C) );
		/* 82087E3Ch case   13:*/		return 0x82087E40;
		  /* 82087E40h */ case   14:  		/* b 16 */
		/* 82087E40h case   14:*/		return 0x82087E50;
		/* 82087E40h case   14:*/		return 0x82087E44;
	}
	return 0x82087E44;
} // Block from 82087E08h-82087E44h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82087E44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087E44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087E44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087E44);
		  /* 82087E44h */ case    0:  		/* cntlzw R11, R8 */
		/* 82087E44h case    0:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R8);
		/* 82087E44h case    0:*/		return 0x82087E48;
		  /* 82087E48h */ case    1:  		/* rlwinm R8, R11, 27, 31, 31 */
		/* 82087E48h case    1:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R8,regs.R11);
		/* 82087E48h case    1:*/		return 0x82087E4C;
		  /* 82087E4Ch */ case    2:  		/* stw R8, <#[R31 + 100]> */
		/* 82087E4Ch case    2:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000064) );
		/* 82087E4Ch case    2:*/		return 0x82087E50;
	}
	return 0x82087E50;
} // Block from 82087E44h-82087E50h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82087E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087E50);
		  /* 82087E50h */ case    0:  		/* lbzu R9, <#[R3 + 1]> */
		/* 82087E50h case    0:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000001) );
		regs.R3 = (uint32)(regs.R3 + 0x00000001);
		/* 82087E50h case    0:*/		return 0x82087E54;
		  /* 82087E54h */ case    1:  		/* extsb. R11, R9 */
		/* 82087E54h case    1:*/		cpu::op::extsb<1>(regs,&regs.R11,regs.R9);
		/* 82087E54h case    1:*/		return 0x82087E58;
		  /* 82087E58h */ case    2:  		/* stw R3, <#[R31 + 88]> */
		/* 82087E58h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000058) );
		/* 82087E58h case    2:*/		return 0x82087E5C;
		  /* 82087E5Ch */ case    3:  		/* stb R9, <#[R31 + 80]> */
		/* 82087E5Ch case    3:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R31 + 0x00000050) );
		/* 82087E5Ch case    3:*/		return 0x82087E60;
		  /* 82087E60h */ case    4:  		/* bc 12, CR0_EQ, 28 */
		/* 82087E60h case    4:*/		if ( regs.CR[0].eq ) { return 0x82087E7C;  }
		/* 82087E60h case    4:*/		return 0x82087E64;
		  /* 82087E64h */ case    5:  		/* cmpwi CR6, R8, 0 */
		/* 82087E64h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 82087E64h case    5:*/		return 0x82087E68;
		  /* 82087E68h */ case    6:  		/* bc 4, CR6_EQ, -60 */
		/* 82087E68h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82087E2C;  }
		/* 82087E68h case    6:*/		return 0x82087E6C;
		  /* 82087E6Ch */ case    7:  		/* cmpwi CR6, R11, 32 */
		/* 82087E6Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000020);
		/* 82087E6Ch case    7:*/		return 0x82087E70;
		  /* 82087E70h */ case    8:  		/* bc 12, CR6_EQ, 12 */
		/* 82087E70h case    8:*/		if ( regs.CR[6].eq ) { return 0x82087E7C;  }
		/* 82087E70h case    8:*/		return 0x82087E74;
		  /* 82087E74h */ case    9:  		/* cmpwi CR6, R11, 9 */
		/* 82087E74h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 82087E74h case    9:*/		return 0x82087E78;
		  /* 82087E78h */ case   10:  		/* bc 4, CR6_EQ, -76 */
		/* 82087E78h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82087E2C;  }
		/* 82087E78h case   10:*/		return 0x82087E7C;
	}
	return 0x82087E7C;
} // Block from 82087E50h-82087E7Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82087E7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087E7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087E7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087E7C);
		  /* 82087E7Ch */ case    0:  		/* cmpwi CR6, R11, 0 */
		/* 82087E7Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82087E7Ch case    0:*/		return 0x82087E80;
		  /* 82087E80h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82087E80h case    1:*/		if ( regs.CR[6].eq ) { return 0x82087E8C;  }
		/* 82087E80h case    1:*/		return 0x82087E84;
		  /* 82087E84h */ case    2:  		/* cmpwi CR6, R29, 16 */
		/* 82087E84h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000010);
		/* 82087E84h case    2:*/		return 0x82087E88;
		  /* 82087E88h */ case    3:  		/* bc 4, CR6_GT, -192 */
		/* 82087E88h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82087DC8;  }
		/* 82087E88h case    3:*/		return 0x82087E8C;
	}
	return 0x82087E8C;
} // Block from 82087E7Ch-82087E8Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82087E8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087E8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087E8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087E8C);
		  /* 82087E8Ch */ case    0:  		/* stb R28, <#[R10]> */
		/* 82087E8Ch case    0:*/		cpu::mem::store8( regs, regs.R28, (uint32)(regs.R10 + 0x00000000) );
		/* 82087E8Ch case    0:*/		return 0x82087E90;
	}
	return 0x82087E90;
} // Block from 82087E8Ch-82087E90h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82087E90h
// Function '?reserve@?$vector@UVTX_DECL@ATG@@V?$allocator@UVTX_DECL@ATG@@@std@@@std@@QAAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087E90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087E90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087E90);
		  /* 82087E90h */ case    0:  		/* stw R28, <#[R30]> */
		/* 82087E90h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x00000000) );
		/* 82087E90h case    0:*/		return 0x82087E94;
		  /* 82087E94h */ case    1:  		/* stwu R28, <#[R30 + 4]> */
		/* 82087E94h case    1:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82087E94h case    1:*/		return 0x82087E98;
		  /* 82087E98h */ case    2:  		/* addi R4, R31, 112 */
		/* 82087E98h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x70);
		/* 82087E98h case    2:*/		return 0x82087E9C;
		  /* 82087E9Ch */ case    3:  		/* mr R3, R29 */
		/* 82087E9Ch case    3:*/		regs.R3 = regs.R29;
		/* 82087E9Ch case    3:*/		return 0x82087EA0;
		  /* 82087EA0h */ case    4:  		/* stw R30, <#[R31 + 84]> */
		/* 82087EA0h case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000054) );
		/* 82087EA0h case    4:*/		return 0x82087EA4;
		  /* 82087EA4h */ case    5:  		/* b 12 */
		/* 82087EA4h case    5:*/		return 0x82087EB0;
		/* 82087EA4h case    5:*/		return 0x82087EA8;
	}
	return 0x82087EA8;
} // Block from 82087E90h-82087EA8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82087EA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087EA8);
		  /* 82087EA8h */ case    0:  		/* li R4, 0 */
		/* 82087EA8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82087EA8h case    0:*/		return 0x82087EAC;
		  /* 82087EACh */ case    1:  		/* li R3, 0 */
		/* 82087EACh case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82087EACh case    1:*/		return 0x82087EB0;
	}
	return 0x82087EB0;
} // Block from 82087EA8h-82087EB0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82087EB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087EB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087EB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087EB0);
		  /* 82087EB0h */ case    0:  		/* li R5, 0 */
		/* 82087EB0h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82087EB0h case    0:*/		return 0x82087EB4;
		  /* 82087EB4h */ case    1:  		/* bl -155516 */
		/* 82087EB4h case    1:*/		regs.LR = 0x82087EB8; return 0x82061F38;
		/* 82087EB4h case    1:*/		return 0x82087EB8;
		  /* 82087EB8h */ case    2:  		/* mr R30, R3 */
		/* 82087EB8h case    2:*/		regs.R30 = regs.R3;
		/* 82087EB8h case    2:*/		return 0x82087EBC;
		  /* 82087EBCh */ case    3:  		/* bl 45364 */
		/* 82087EBCh case    3:*/		regs.LR = 0x82087EC0; return 0x82092FF0;
		/* 82087EBCh case    3:*/		return 0x82087EC0;
		  /* 82087EC0h */ case    4:  		/* lis R11, -32255 */
		/* 82087EC0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82087EC0h case    4:*/		return 0x82087EC4;
		  /* 82087EC4h */ case    5:  		/* mr R4, R30 */
		/* 82087EC4h case    5:*/		regs.R4 = regs.R30;
		/* 82087EC4h case    5:*/		return 0x82087EC8;
		  /* 82087EC8h */ case    6:  		/* addi R3, R11, -28592 */
		/* 82087EC8h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0xFFFF9050);
		/* 82087EC8h case    6:*/		return 0x82087ECC;
		  /* 82087ECCh */ case    7:  		/* bl 1987516 */
		/* 82087ECCh case    7:*/		regs.LR = 0x82087ED0; return 0x8226D288;
		/* 82087ECCh case    7:*/		return 0x82087ED0;
	}
	return 0x82087ED0;
} // Block from 82087EB0h-82087ED0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82087ED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087ED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087ED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087ED0);
		  /* 82087ED0h */ case    0:  		/* nop */
		/* 82087ED0h case    0:*/		cpu::op::nop();
		/* 82087ED0h case    0:*/		return 0x82087ED4;
		  /* 82087ED4h */ case    1:  		/* nop */
		/* 82087ED4h case    1:*/		cpu::op::nop();
		/* 82087ED4h case    1:*/		return 0x82087ED8;
		  /* 82087ED8h */ case    2:  		/* nop */
		/* 82087ED8h case    2:*/		cpu::op::nop();
		/* 82087ED8h case    2:*/		return 0x82087EDC;
	}
	return 0x82087EDC;
} // Block from 82087ED0h-82087EDCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82087EDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087EDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087EDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087EDC);
		  /* 82087EDCh */ case    0:  		/* bl 1986572 */
		/* 82087EDCh case    0:*/		regs.LR = 0x82087EE0; return 0x8226CEE8;
		/* 82087EDCh case    0:*/		return 0x82087EE0;
	}
	return 0x82087EE0;
} // Block from 82087EDCh-82087EE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82087EE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087EE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087EE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087EE0);
		  /* 82087EE0h */ case    0:  		/* mfspr R12, LR */
		/* 82087EE0h case    0:*/		regs.R12 = regs.LR;
		/* 82087EE0h case    0:*/		return 0x82087EE4;
		  /* 82087EE4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82087EE4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82087EE4h case    1:*/		return 0x82087EE8;
		  /* 82087EE8h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 82087EE8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82087EE8h case    2:*/		return 0x82087EEC;
		  /* 82087EECh */ case    3:  		/* bl 4292 */
		/* 82087EECh case    3:*/		regs.LR = 0x82087EF0; return 0x82088FB0;
		/* 82087EECh case    3:*/		return 0x82087EF0;
		  /* 82087EF0h */ case    4:  		/* nop */
		/* 82087EF0h case    4:*/		cpu::op::nop();
		/* 82087EF0h case    4:*/		return 0x82087EF4;
		  /* 82087EF4h */ case    5:  		/* lwz R1, <#[R1]> */
		/* 82087EF4h case    5:*/		cpu::mem::load32z( regs, &regs.R1, (uint32)(regs.R1 + 0x00000000) );
		/* 82087EF4h case    5:*/		return 0x82087EF8;
		  /* 82087EF8h */ case    6:  		/* lwz R12, <#[R1 - 8]> */
		/* 82087EF8h case    6:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82087EF8h case    6:*/		return 0x82087EFC;
		  /* 82087EFCh */ case    7:  		/* mtspr LR, R12 */
		/* 82087EFCh case    7:*/		regs.LR = regs.R12;
		/* 82087EFCh case    7:*/		return 0x82087F00;
		  /* 82087F00h */ case    8:  		/* bclr 20, CR0_LT */
		/* 82087F00h case    8:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82087F00h case    8:*/		return 0x82087F04;
	}
	return 0x82087F04;
} // Block from 82087EE0h-82087F04h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82087F04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087F04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087F04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087F04);
		  /* 82087F04h */ case    0:  		/* nop */
		/* 82087F04h case    0:*/		cpu::op::nop();
		/* 82087F04h case    0:*/		return 0x82087F08;
	}
	return 0x82087F08;
} // Block from 82087F04h-82087F08h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82087F08h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087F08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087F08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087F08);
		  /* 82087F08h */ case    0:  		/* mfspr R12, LR */
		/* 82087F08h case    0:*/		regs.R12 = regs.LR;
		/* 82087F08h case    0:*/		return 0x82087F0C;
		  /* 82087F0Ch */ case    1:  		/* bl 37700 */
		/* 82087F0Ch case    1:*/		regs.LR = 0x82087F10; return 0x82091250;
		/* 82087F0Ch case    1:*/		return 0x82087F10;
		  /* 82087F10h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82087F10h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82087F10h case    2:*/		return 0x82087F14;
		  /* 82087F14h */ case    3:  		/* mr R26, R3 */
		/* 82087F14h case    3:*/		regs.R26 = regs.R3;
		/* 82087F14h case    3:*/		return 0x82087F18;
		  /* 82087F18h */ case    4:  		/* mr R29, R5 */
		/* 82087F18h case    4:*/		regs.R29 = regs.R5;
		/* 82087F18h case    4:*/		return 0x82087F1C;
		  /* 82087F1Ch */ case    5:  		/* mr R31, R3 */
		/* 82087F1Ch case    5:*/		regs.R31 = regs.R3;
		/* 82087F1Ch case    5:*/		return 0x82087F20;
		  /* 82087F20h */ case    6:  		/* mr R30, R4 */
		/* 82087F20h case    6:*/		regs.R30 = regs.R4;
		/* 82087F20h case    6:*/		return 0x82087F24;
		  /* 82087F24h */ case    7:  		/* cmplwi CR6, R5, 16 */
		/* 82087F24h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000010);
		/* 82087F24h case    7:*/		return 0x82087F28;
		  /* 82087F28h */ case    8:  		/* bc 4, CR6_LT, 160 */
		/* 82087F28h case    8:*/		if ( !regs.CR[6].lt ) { return 0x82087FC8;  }
		/* 82087F28h case    8:*/		return 0x82087F2C;
		  /* 82087F2Ch */ case    9:  		/* cmplwi CR6, R5, 8 */
		/* 82087F2Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000008);
		/* 82087F2Ch case    9:*/		return 0x82087F30;
		  /* 82087F30h */ case   10:  		/* bc 12, CR6_LT, 36 */
		/* 82087F30h case   10:*/		if ( regs.CR[6].lt ) { return 0x82087F54;  }
		/* 82087F30h case   10:*/		return 0x82087F34;
		  /* 82087F34h */ case   11:  		/* rlwinm R11, R4, 0, 29, 31 */
		/* 82087F34h case   11:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R4);
		/* 82087F34h case   11:*/		return 0x82087F38;
		  /* 82087F38h */ case   12:  		/* cmpwi CR6, R11, 0 */
		/* 82087F38h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82087F38h case   12:*/		return 0x82087F3C;
		  /* 82087F3Ch */ case   13:  		/* bc 4, CR6_EQ, 24 */
		/* 82087F3Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x82087F54;  }
		/* 82087F3Ch case   13:*/		return 0x82087F40;
		  /* 82087F40h */ case   14:  		/* ld R11, <#[R4]> */
		/* 82087F40h case   14:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 82087F40h case   14:*/		return 0x82087F44;
		  /* 82087F44h */ case   15:  		/* addi R31, R3, 8 */
		/* 82087F44h case   15:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R3,0x8);
		/* 82087F44h case   15:*/		return 0x82087F48;
		  /* 82087F48h */ case   16:  		/* addi R30, R4, 8 */
		/* 82087F48h case   16:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R4,0x8);
		/* 82087F48h case   16:*/		return 0x82087F4C;
		  /* 82087F4Ch */ case   17:  		/* addi R29, R29, -8 */
		/* 82087F4Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFFF8);
		/* 82087F4Ch case   17:*/		return 0x82087F50;
		  /* 82087F50h */ case   18:  		/* std R11, <#[R3]> */
		/* 82087F50h case   18:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82087F50h case   18:*/		return 0x82087F54;
	}
	return 0x82087F54;
} // Block from 82087F08h-82087F54h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82087F54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087F54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087F54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087F54);
		  /* 82087F54h */ case    0:  		/* rlwinm R11, R30, 0, 30, 31 */
		/* 82087F54h case    0:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R30);
		/* 82087F54h case    0:*/		return 0x82087F58;
		  /* 82087F58h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 82087F58h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82087F58h case    1:*/		return 0x82087F5C;
		  /* 82087F5Ch */ case    2:  		/* bc 4, CR6_EQ, 56 */
		/* 82087F5Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82087F94;  }
		/* 82087F5Ch case    2:*/		return 0x82087F60;
		  /* 82087F60h */ case    3:  		/* cmplwi CR6, R29, 4 */
		/* 82087F60h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 82087F60h case    3:*/		return 0x82087F64;
		  /* 82087F64h */ case    4:  		/* bc 12, CR6_LT, 48 */
		/* 82087F64h case    4:*/		if ( regs.CR[6].lt ) { return 0x82087F94;  }
		/* 82087F64h case    4:*/		return 0x82087F68;
		  /* 82087F68h */ case    5:  		/* mr R4, R30 */
		/* 82087F68h case    5:*/		regs.R4 = regs.R30;
		/* 82087F68h case    5:*/		return 0x82087F6C;
		  /* 82087F6Ch */ case    6:  		/* mr R3, R31 */
		/* 82087F6Ch case    6:*/		regs.R3 = regs.R31;
		/* 82087F6Ch case    6:*/		return 0x82087F70;
	}
	return 0x82087F70;
} // Block from 82087F54h-82087F70h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82087F70h
// Function '?allocate@?$allocator@UVTX_DECL@ATG@@@std@@QAAPAUVTX_DECL@ATG@@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087F70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087F70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087F70);
		  /* 82087F70h */ case    0:  		/* rlwinm R5, R29, 0, 0, 29 */
		/* 82087F70h case    0:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R5,regs.R29);
		/* 82087F70h case    0:*/		return 0x82087F74;
		  /* 82087F74h */ case    1:  		/* rlwinm R28, R29, 30, 2, 31 */
		/* 82087F74h case    1:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R28,regs.R29);
		/* 82087F74h case    1:*/		return 0x82087F78;
		  /* 82087F78h */ case    2:  		/* bl 40640 */
		/* 82087F78h case    2:*/		regs.LR = 0x82087F7C; return 0x82091E38;
		/* 82087F78h case    2:*/		return 0x82087F7C;
		  /* 82087F7Ch */ case    3:  		/* rlwinm R11, R29, 0, 0, 29 */
		/* 82087F7Ch case    3:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R11,regs.R29);
		/* 82087F7Ch case    3:*/		return 0x82087F80;
		  /* 82087F80h */ case    4:  		/* add R31, R11, R31 */
		/* 82087F80h case    4:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 82087F80h case    4:*/		return 0x82087F84;
		  /* 82087F84h */ case    5:  		/* add R30, R11, R30 */
		/* 82087F84h case    5:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 82087F84h case    5:*/		return 0x82087F88;
		  /* 82087F88h */ case    6:  		/* addic. R28, R28, -1 */
		/* 82087F88h case    6:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 82087F88h case    6:*/		return 0x82087F8C;
		  /* 82087F8Ch */ case    7:  		/* addi R29, R29, -4 */
		/* 82087F8Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFFFC);
		/* 82087F8Ch case    7:*/		return 0x82087F90;
		  /* 82087F90h */ case    8:  		/* bc 4, CR0_EQ, -8 */
		/* 82087F90h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82087F88;  }
		/* 82087F90h case    8:*/		return 0x82087F94;
	}
	return 0x82087F94;
} // Block from 82087F70h-82087F94h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82087F94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087F94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087F94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087F94);
		  /* 82087F94h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82087F94h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82087F94h case    0:*/		return 0x82087F98;
		  /* 82087F98h */ case    1:  		/* bc 12, CR6_EQ, 600 */
		/* 82087F98h case    1:*/		if ( regs.CR[6].eq ) { return 0x820881F0;  }
		/* 82087F98h case    1:*/		return 0x82087F9C;
		  /* 82087F9Ch */ case    2:  		/* lis R10, -32217 */
		/* 82087F9Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 82087F9Ch case    2:*/		return 0x82087FA0;
		  /* 82087FA0h */ case    3:  		/* subf R11, R31, R30 */
		/* 82087FA0h case    3:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R31,regs.R30);
		/* 82087FA0h case    3:*/		return 0x82087FA4;
		  /* 82087FA4h */ case    4:  		/* lwz R10, <#[R10 + 6772]> */
		/* 82087FA4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00001A74) );
		/* 82087FA4h case    4:*/		return 0x82087FA8;
		  /* 82087FA8h */ case    5:  		/* lbzx R9, <#[R11 + R31]> */
		/* 82087FA8h case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82087FA8h case    5:*/		return 0x82087FAC;
		  /* 82087FACh */ case    6:  		/* subf. R29, R10, R29 */
		/* 82087FACh case    6:*/		cpu::op::subf<1>(regs,&regs.R29,regs.R10,regs.R29);
		/* 82087FACh case    6:*/		return 0x82087FB0;
		  /* 82087FB0h */ case    7:  		/* stb R9, <#[R31]> */
		/* 82087FB0h case    7:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82087FB0h case    7:*/		return 0x82087FB4;
		  /* 82087FB4h */ case    8:  		/* addi R31, R31, 1 */
		/* 82087FB4h case    8:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 82087FB4h case    8:*/		return 0x82087FB8;
		  /* 82087FB8h */ case    9:  		/* bc 4, CR0_EQ, -16 */
		/* 82087FB8h case    9:*/		if ( !regs.CR[0].eq ) { return 0x82087FA8;  }
		/* 82087FB8h case    9:*/		return 0x82087FBC;
		  /* 82087FBCh */ case   10:  		/* mr R3, R26 */
		/* 82087FBCh case   10:*/		regs.R3 = regs.R26;
		/* 82087FBCh case   10:*/		return 0x82087FC0;
		  /* 82087FC0h */ case   11:  		/* addi R1, R1, 176 */
		/* 82087FC0h case   11:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82087FC0h case   11:*/		return 0x82087FC4;
		  /* 82087FC4h */ case   12:  		/* b 37596 */
		/* 82087FC4h case   12:*/		return 0x820912A0;
		/* 82087FC4h case   12:*/		return 0x82087FC8;
	}
	return 0x82087FC8;
} // Block from 82087F94h-82087FC8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82087FC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087FC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087FC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087FC8);
		  /* 82087FC8h */ case    0:  		/* neg R11, R26 */
		/* 82087FC8h case    0:*/		cpu::op::neg<0>(regs,&regs.R11,regs.R26);
		/* 82087FC8h case    0:*/		return 0x82087FCC;
		  /* 82087FCCh */ case    1:  		/* cmplwi CR6, R29, 1024 */
		/* 82087FCCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000400);
		/* 82087FCCh case    1:*/		return 0x82087FD0;
		  /* 82087FD0h */ case    2:  		/* srawi R10, R11, 4 */
		/* 82087FD0h case    2:*/		cpu::op::srawi<0,4>(regs,&regs.R10,regs.R11);
		/* 82087FD0h case    2:*/		return 0x82087FD4;
		  /* 82087FD4h */ case    3:  		/* rlwinm R11, R11, 0, 28, 31 */
		/* 82087FD4h case    3:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R11,regs.R11);
		/* 82087FD4h case    3:*/		return 0x82087FD8;
		  /* 82087FD8h */ case    4:  		/* rlwinm R8, R10, 0, 29, 31 */
		/* 82087FD8h case    4:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R8,regs.R10);
		/* 82087FD8h case    4:*/		return 0x82087FDC;
		  /* 82087FDCh */ case    5:  		/* mr R9, R29 */
		/* 82087FDCh case    5:*/		regs.R9 = regs.R29;
		/* 82087FDCh case    5:*/		return 0x82087FE0;
		  /* 82087FE0h */ case    6:  		/* bc 12, CR6_LT, 8 */
		/* 82087FE0h case    6:*/		if ( regs.CR[6].lt ) { return 0x82087FE8;  }
		/* 82087FE0h case    6:*/		return 0x82087FE4;
		  /* 82087FE4h */ case    7:  		/* li R9, 1024 */
		/* 82087FE4h case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x400);
		/* 82087FE4h case    7:*/		return 0x82087FE8;
	}
	return 0x82087FE8;
} // Block from 82087FC8h-82087FE8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82087FE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82087FE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82087FE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82087FE8);
		  /* 82087FE8h */ case    0:  		/* li R10, 0 */
		/* 82087FE8h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82087FE8h case    0:*/		return 0x82087FEC;
		  /* 82087FECh */ case    1:  		/* cmplwi CR6, R9, 0 */
		/* 82087FECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82087FECh case    1:*/		return 0x82087FF0;
		  /* 82087FF0h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 82087FF0h case    2:*/		if ( regs.CR[6].eq ) { return 0x82088010;  }
		/* 82087FF0h case    2:*/		return 0x82087FF4;
		  /* 82087FF4h */ case    3:  		/* addi R9, R9, -1 */
		/* 82087FF4h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 82087FF4h case    3:*/		return 0x82087FF8;
		  /* 82087FF8h */ case    4:  		/* rlwinm R9, R9, 25, 7, 31 */
		/* 82087FF8h case    4:*/		cpu::op::rlwinm<0,25,7,31>(regs,&regs.R9,regs.R9);
		/* 82087FF8h case    4:*/		return 0x82087FFC;
		  /* 82087FFCh */ case    5:  		/* addi R9, R9, 1 */
		/* 82087FFCh case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82087FFCh case    5:*/		return 0x82088000;
		  /* 82088000h */ case    6:  		/* mtspr CTR, R9 */
		/* 82088000h case    6:*/		regs.CTR = regs.R9;
		/* 82088000h case    6:*/		return 0x82088004;
		  /* 82088004h */ case    7:  		/* dcbt R10, R4 */
		/* 82088004h case    7:*/		cpu::op::dcbt<0>(regs,&regs.R10,regs.R4);
		/* 82088004h case    7:*/		return 0x82088008;
		  /* 82088008h */ case    8:  		/* addi R10, R10, 128 */
		/* 82088008h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x80);
		/* 82088008h case    8:*/		return 0x8208800C;
		  /* 8208800Ch */ case    9:  		/* bc 16, CR0_LT, -8 */
		/* 8208800Ch case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82088004;  }
		/* 8208800Ch case    9:*/		return 0x82088010;
	}
	return 0x82088010;
} // Block from 82087FE8h-82088010h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82088010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088010);
		  /* 82088010h */ case    0:  		/* li R27, 15 */
		/* 82088010h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0xF);
		/* 82088010h case    0:*/		return 0x82088014;
		  /* 82088014h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82088014h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82088014h case    1:*/		return 0x82088018;
		  /* 82088018h */ case    2:  		/* bc 12, CR6_EQ, 36 */
		/* 82088018h case    2:*/		if ( regs.CR[6].eq ) { return 0x8208803C;  }
		/* 82088018h case    2:*/		return 0x8208801C;
		  /* 8208801Ch */ case    3:  		/* lvx VR63, <#[R4]> */
		/* 8208801Ch case    3:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R4 + 0x00000000) );
		/* 8208801Ch case    3:*/		return 0x82088020;
	}
	return 0x82088020;
} // Block from 82088010h-82088020h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82088020h
// Function '?GetData@PackedResource@ATG@@QBAPAXPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088020);
		  /* 82088020h */ case    0:  		/* add R30, R11, R4 */
		/* 82088020h case    0:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R4);
		/* 82088020h case    0:*/		return 0x82088024;
		  /* 82088024h */ case    1:  		/* lvx VR62, <#[R4 + R27]> */
		/* 82088024h case    1:*/		cpu::mem::lvx( regs, &regs.VR62, (uint32)(regs.R4 + regs.R27 + 0x00000000) );
		/* 82088024h case    1:*/		return 0x82088028;
		  /* 82088028h */ case    2:  		/* subf R29, R11, R29 */
		/* 82088028h case    2:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R11,regs.R29);
		/* 82088028h case    2:*/		return 0x8208802C;
		  /* 8208802Ch */ case    3:  		/* lvsl VR0, R0, R4 */
		/* 8208802Ch case    3:*/		cpu::op::lvsl<0>(regs,&regs.VR0,regs.R0,regs.R4);
		/* 8208802Ch case    3:*/		return 0x82088030;
		  /* 82088030h */ case    4:  		/* add R31, R11, R26 */
		/* 82088030h case    4:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R26);
		/* 82088030h case    4:*/		return 0x82088034;
		  /* 82088034h */ case    5:  		/* vperm VR63, VR63, VR62, VR0 */
		/* 82088034h case    5:*/		cpu::op::vperm<0>(regs,&regs.VR63,regs.VR63,regs.VR62,regs.VR0);
		/* 82088034h case    5:*/		return 0x82088038;
		  /* 82088038h */ case    6:  		/* stvlx VR63, <#[R26]> */
		/* 82088038h case    6:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R26 + 0x00000000) );
		/* 82088038h case    6:*/		return 0x8208803C;
	}
	return 0x8208803C;
} // Block from 82088020h-8208803Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8208803Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208803C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208803C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208803C);
		  /* 8208803Ch */ case    0:  		/* rlwinm R11, R29, 28, 4, 31 */
		/* 8208803Ch case    0:*/		cpu::op::rlwinm<0,28,4,31>(regs,&regs.R11,regs.R29);
		/* 8208803Ch case    0:*/		return 0x82088040;
		  /* 82088040h */ case    1:  		/* cmplw CR6, R11, R8 */
		/* 82088040h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 82088040h case    1:*/		return 0x82088044;
		  /* 82088044h */ case    2:  		/* bc 4, CR6_LT, 8 */
		/* 82088044h case    2:*/		if ( !regs.CR[6].lt ) { return 0x8208804C;  }
		/* 82088044h case    2:*/		return 0x82088048;
		  /* 82088048h */ case    3:  		/* mr R8, R11 */
		/* 82088048h case    3:*/		regs.R8 = regs.R11;
		/* 82088048h case    3:*/		return 0x8208804C;
	}
	return 0x8208804C;
} // Block from 8208803Ch-8208804Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8208804Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208804C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208804C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208804C);
		  /* 8208804Ch */ case    0:  		/* rlwinm R11, R8, 4, 0, 27 */
		/* 8208804Ch case    0:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R8);
		/* 8208804Ch case    0:*/		return 0x82088050;
		  /* 82088050h */ case    1:  		/* subf R10, R11, R29 */
		/* 82088050h case    1:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R29);
		/* 82088050h case    1:*/		return 0x82088054;
		  /* 82088054h */ case    2:  		/* rlwinm R28, R10, 0, 0, 24 */
		/* 82088054h case    2:*/		cpu::op::rlwinm<0,0,0,24>(regs,&regs.R28,regs.R10);
		/* 82088054h case    2:*/		return 0x82088058;
		  /* 82088058h */ case    3:  		/* cmplwi CR6, R28, 128 */
		/* 82088058h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000080);
		/* 82088058h case    3:*/		return 0x8208805C;
		  /* 8208805Ch */ case    4:  		/* mr R10, R28 */
		/* 8208805Ch case    4:*/		regs.R10 = regs.R28;
		/* 8208805Ch case    4:*/		return 0x82088060;
		  /* 82088060h */ case    5:  		/* bc 12, CR6_LT, 8 */
		/* 82088060h case    5:*/		if ( regs.CR[6].lt ) { return 0x82088068;  }
		/* 82088060h case    5:*/		return 0x82088064;
		  /* 82088064h */ case    6:  		/* li R10, 128 */
		/* 82088064h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x80);
		/* 82088064h case    6:*/		return 0x82088068;
	}
	return 0x82088068;
} // Block from 8208804Ch-82088068h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82088068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088068);
		  /* 82088068h */ case    0:  		/* li R11, 0 */
		/* 82088068h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82088068h case    0:*/		return 0x8208806C;
		  /* 8208806Ch */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 8208806Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8208806Ch case    1:*/		return 0x82088070;
		  /* 82088070h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 82088070h case    2:*/		if ( regs.CR[6].eq ) { return 0x82088088;  }
		/* 82088070h case    2:*/		return 0x82088074;
		  /* 82088074h */ case    3:  		/* addi R9, R31, 127 */
		/* 82088074h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x7F);
		/* 82088074h case    3:*/		return 0x82088078;
		  /* 82088078h */ case    4:  		/* dcbz <#[R11 + R9]> */
		/* 82088078h case    4:*/		cpu::op::dcbz<0>(regs, regs.R11 + regs.R9 + 0x00000000);
		/* 82088078h case    4:*/		return 0x8208807C;
		  /* 8208807Ch */ case    5:  		/* addi R11, R11, 128 */
		/* 8208807Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x80);
		/* 8208807Ch case    5:*/		return 0x82088080;
		  /* 82088080h */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 82088080h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82088080h case    6:*/		return 0x82088084;
		  /* 82088084h */ case    7:  		/* bc 12, CR6_LT, -12 */
		/* 82088084h case    7:*/		if ( regs.CR[6].lt ) { return 0x82088078;  }
		/* 82088084h case    7:*/		return 0x82088088;
	}
	return 0x82088088;
} // Block from 82088068h-82088088h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82088088h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088088);
		  /* 82088088h */ case    0:  		/* addi R11, R1, 96 */
		/* 82088088h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 82088088h case    0:*/		return 0x8208808C;
		  /* 8208808Ch */ case    1:  		/* lvsl VR0, R0, R30 */
		/* 8208808Ch case    1:*/		cpu::op::lvsl<0>(regs,&regs.VR0,regs.R0,regs.R30);
		/* 8208808Ch case    1:*/		return 0x82088090;
		  /* 82088090h */ case    2:  		/* cmplwi CR6, R8, 0 */
		/* 82088090h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82088090h case    2:*/		return 0x82088094;
		  /* 82088094h */ case    3:  		/* stvx VR0, <#[R11]> */
		/* 82088094h case    3:*/		cpu::mem::stvx( regs, regs.VR0, (uint32)(regs.R11 + 0x00000000) );
		/* 82088094h case    3:*/		return 0x82088098;
		  /* 82088098h */ case    4:  		/* bc 12, CR6_EQ, 40 */
		/* 82088098h case    4:*/		if ( regs.CR[6].eq ) { return 0x820880C0;  }
		/* 82088098h case    4:*/		return 0x8208809C;
		  /* 8208809Ch */ case    5:  		/* mtspr CTR, R8 */
		/* 8208809Ch case    5:*/		regs.CTR = regs.R8;
		/* 8208809Ch case    5:*/		return 0x820880A0;
		  /* 820880A0h */ case    6:  		/* mr R11, R27 */
		/* 820880A0h case    6:*/		regs.R11 = regs.R27;
		/* 820880A0h case    6:*/		return 0x820880A4;
		  /* 820880A4h */ case    7:  		/* lvx VR63, <#[R30]> */
		/* 820880A4h case    7:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R30 + 0x00000000) );
		/* 820880A4h case    7:*/		return 0x820880A8;
		  /* 820880A8h */ case    8:  		/* lvx VR62, <#[R30 + R11]> */
		/* 820880A8h case    8:*/		cpu::mem::lvx( regs, &regs.VR62, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 820880A8h case    8:*/		return 0x820880AC;
		  /* 820880ACh */ case    9:  		/* addi R30, R30, 16 */
		/* 820880ACh case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x10);
		/* 820880ACh case    9:*/		return 0x820880B0;
		  /* 820880B0h */ case   10:  		/* vperm VR62, VR63, VR62, VR0 */
		/* 820880B0h case   10:*/		cpu::op::vperm<0>(regs,&regs.VR62,regs.VR63,regs.VR62,regs.VR0);
		/* 820880B0h case   10:*/		return 0x820880B4;
		  /* 820880B4h */ case   11:  		/* stvx VR62, <#[R31]> */
		/* 820880B4h case   11:*/		cpu::mem::stvx( regs, regs.VR62, (uint32)(regs.R31 + 0x00000000) );
		/* 820880B4h case   11:*/		return 0x820880B8;
	}
	return 0x820880B8;
} // Block from 82088088h-820880B8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820880B8h
// Function '?Create@PackedResource@ATG@@QAAJPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820880B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820880B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820880B8);
		  /* 820880B8h */ case    0:  		/* addi R31, R31, 16 */
		/* 820880B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 820880B8h case    0:*/		return 0x820880BC;
		  /* 820880BCh */ case    1:  		/* bc 16, CR0_LT, -24 */
		/* 820880BCh case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820880A4;  }
		/* 820880BCh case    1:*/		return 0x820880C0;
	}
	return 0x820880C0;
} // Block from 820880B8h-820880C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820880C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820880C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820880C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820880C0);
		  /* 820880C0h */ case    0:  		/* rlwinm R11, R8, 4, 0, 27 */
		/* 820880C0h case    0:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R8);
		/* 820880C0h case    0:*/		return 0x820880C4;
		  /* 820880C4h */ case    1:  		/* rlwinm R10, R30, 0, 28, 31 */
		/* 820880C4h case    1:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R10,regs.R30);
		/* 820880C4h case    1:*/		return 0x820880C8;
		  /* 820880C8h */ case    2:  		/* subf R29, R11, R29 */
		/* 820880C8h case    2:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R11,regs.R29);
		/* 820880C8h case    2:*/		return 0x820880CC;
		  /* 820880CCh */ case    3:  		/* cmpwi CR6, R10, 0 */
		/* 820880CCh case    3:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 820880CCh case    3:*/		return 0x820880D0;
		  /* 820880D0h */ case    4:  		/* bc 4, CR6_EQ, 164 */
		/* 820880D0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82088174;  }
		/* 820880D0h case    4:*/		return 0x820880D4;
		  /* 820880D4h */ case    5:  		/* cmplwi CR6, R29, 128 */
		/* 820880D4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000080);
		/* 820880D4h case    5:*/		return 0x820880D8;
		  /* 820880D8h */ case    6:  		/* bc 12, CR6_LT, 192 */
		/* 820880D8h case    6:*/		if ( regs.CR[6].lt ) { return 0x82088198;  }
		/* 820880D8h case    6:*/		return 0x820880DC;
		  /* 820880DCh */ case    7:  		/* rlwinm R11, R29, 25, 7, 31 */
		/* 820880DCh case    7:*/		cpu::op::rlwinm<0,25,7,31>(regs,&regs.R11,regs.R29);
		/* 820880DCh case    7:*/		return 0x820880E0;
		  /* 820880E0h */ case    8:  		/* li R5, 16 */
		/* 820880E0h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x10);
		/* 820880E0h case    8:*/		return 0x820880E4;
		  /* 820880E4h */ case    9:  		/* li R6, 32 */
		/* 820880E4h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x20);
		/* 820880E4h case    9:*/		return 0x820880E8;
		  /* 820880E8h */ case   10:  		/* li R7, 48 */
		/* 820880E8h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x30);
		/* 820880E8h case   10:*/		return 0x820880EC;
		  /* 820880ECh */ case   11:  		/* li R8, 64 */
		/* 820880ECh case   11:*/		cpu::op::li<0>(regs,&regs.R8,0x40);
		/* 820880ECh case   11:*/		return 0x820880F0;
		  /* 820880F0h */ case   12:  		/* mtspr CTR, R11 */
		/* 820880F0h case   12:*/		regs.CTR = regs.R11;
		/* 820880F0h case   12:*/		return 0x820880F4;
		  /* 820880F4h */ case   13:  		/* li R9, 80 */
		/* 820880F4h case   13:*/		cpu::op::li<0>(regs,&regs.R9,0x50);
		/* 820880F4h case   13:*/		return 0x820880F8;
		  /* 820880F8h */ case   14:  		/* li R10, 96 */
		/* 820880F8h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x60);
		/* 820880F8h case   14:*/		return 0x820880FC;
		  /* 820880FCh */ case   15:  		/* li R11, 112 */
		/* 820880FCh case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x70);
		/* 820880FCh case   15:*/		return 0x82088100;
		  /* 82088100h */ case   16:  		/* cmplwi CR6, R29, 1024 */
		/* 82088100h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000400);
		/* 82088100h case   16:*/		return 0x82088104;
		  /* 82088104h */ case   17:  		/* bc 4, CR6_GT, 12 */
		/* 82088104h case   17:*/		if ( !regs.CR[6].gt ) { return 0x82088110;  }
		/* 82088104h case   17:*/		return 0x82088108;
		  /* 82088108h */ case   18:  		/* li R4, 1024 */
		/* 82088108h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x400);
		/* 82088108h case   18:*/		return 0x8208810C;
		  /* 8208810Ch */ case   19:  		/* dcbt R4, R30 */
		/* 8208810Ch case   19:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R30);
		/* 8208810Ch case   19:*/		return 0x82088110;
	}
	return 0x82088110;
} // Block from 820880C0h-82088110h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82088110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088110);
		  /* 82088110h */ case    0:  		/* cmplwi CR6, R29, 256 */
		/* 82088110h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000100);
		/* 82088110h case    0:*/		return 0x82088114;
		  /* 82088114h */ case    1:  		/* bc 4, CR6_GT, 12 */
		/* 82088114h case    1:*/		if ( !regs.CR[6].gt ) { return 0x82088120;  }
		/* 82088114h case    1:*/		return 0x82088118;
		  /* 82088118h */ case    2:  		/* li R4, 128 */
		/* 82088118h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x80);
		/* 82088118h case    2:*/		return 0x8208811C;
		  /* 8208811Ch */ case    3:  		/* dcbz <#[R4 + R31]> */
		/* 8208811Ch case    3:*/		cpu::op::dcbz<0>(regs, regs.R4 + regs.R31 + 0x00000000);
		/* 8208811Ch case    3:*/		return 0x82088120;
	}
	return 0x82088120;
} // Block from 82088110h-82088120h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82088120h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088120);
		  /* 82088120h */ case    0:  		/* lvx VR61, <#[R30]> */
		/* 82088120h case    0:*/		cpu::mem::lvx( regs, &regs.VR61, (uint32)(regs.R30 + 0x00000000) );
		/* 82088120h case    0:*/		return 0x82088124;
		  /* 82088124h */ case    1:  		/* addi R29, R29, -128 */
		/* 82088124h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFF80);
		/* 82088124h case    1:*/		return 0x82088128;
		  /* 82088128h */ case    2:  		/* lvx VR60, <#[R30 + R5]> */
		/* 82088128h case    2:*/		cpu::mem::lvx( regs, &regs.VR60, (uint32)(regs.R30 + regs.R5 + 0x00000000) );
		/* 82088128h case    2:*/		return 0x8208812C;
		  /* 8208812Ch */ case    3:  		/* lvx VR59, <#[R30 + R6]> */
		/* 8208812Ch case    3:*/		cpu::mem::lvx( regs, &regs.VR59, (uint32)(regs.R30 + regs.R6 + 0x00000000) );
		/* 8208812Ch case    3:*/		return 0x82088130;
		  /* 82088130h */ case    4:  		/* lvx VR58, <#[R30 + R7]> */
		/* 82088130h case    4:*/		cpu::mem::lvx( regs, &regs.VR58, (uint32)(regs.R30 + regs.R7 + 0x00000000) );
		/* 82088130h case    4:*/		return 0x82088134;
		  /* 82088134h */ case    5:  		/* lvx VR57, <#[R30 + R8]> */
		/* 82088134h case    5:*/		cpu::mem::lvx( regs, &regs.VR57, (uint32)(regs.R30 + regs.R8 + 0x00000000) );
		/* 82088134h case    5:*/		return 0x82088138;
		  /* 82088138h */ case    6:  		/* lvx VR56, <#[R30 + R9]> */
		/* 82088138h case    6:*/		cpu::mem::lvx( regs, &regs.VR56, (uint32)(regs.R30 + regs.R9 + 0x00000000) );
		/* 82088138h case    6:*/		return 0x8208813C;
		  /* 8208813Ch */ case    7:  		/* lvx VR55, <#[R30 + R10]> */
		/* 8208813Ch case    7:*/		cpu::mem::lvx( regs, &regs.VR55, (uint32)(regs.R30 + regs.R10 + 0x00000000) );
		/* 8208813Ch case    7:*/		return 0x82088140;
		  /* 82088140h */ case    8:  		/* lvx VR54, <#[R30 + R11]> */
		/* 82088140h case    8:*/		cpu::mem::lvx( regs, &regs.VR54, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 82088140h case    8:*/		return 0x82088144;
		  /* 82088144h */ case    9:  		/* addi R30, R30, 128 */
		/* 82088144h case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x80);
		/* 82088144h case    9:*/		return 0x82088148;
		  /* 82088148h */ case   10:  		/* stvx VR61, <#[R31]> */
		/* 82088148h case   10:*/		cpu::mem::stvx( regs, regs.VR61, (uint32)(regs.R31 + 0x00000000) );
		/* 82088148h case   10:*/		return 0x8208814C;
		  /* 8208814Ch */ case   11:  		/* stvx VR60, <#[R31 + R5]> */
		/* 8208814Ch case   11:*/		cpu::mem::stvx( regs, regs.VR60, (uint32)(regs.R31 + regs.R5 + 0x00000000) );
		/* 8208814Ch case   11:*/		return 0x82088150;
		  /* 82088150h */ case   12:  		/* stvx VR59, <#[R31 + R6]> */
		/* 82088150h case   12:*/		cpu::mem::stvx( regs, regs.VR59, (uint32)(regs.R31 + regs.R6 + 0x00000000) );
		/* 82088150h case   12:*/		return 0x82088154;
		  /* 82088154h */ case   13:  		/* stvx VR58, <#[R31 + R7]> */
		/* 82088154h case   13:*/		cpu::mem::stvx( regs, regs.VR58, (uint32)(regs.R31 + regs.R7 + 0x00000000) );
		/* 82088154h case   13:*/		return 0x82088158;
		  /* 82088158h */ case   14:  		/* stvx VR57, <#[R31 + R8]> */
		/* 82088158h case   14:*/		cpu::mem::stvx( regs, regs.VR57, (uint32)(regs.R31 + regs.R8 + 0x00000000) );
		/* 82088158h case   14:*/		return 0x8208815C;
		  /* 8208815Ch */ case   15:  		/* stvx VR56, <#[R31 + R9]> */
		/* 8208815Ch case   15:*/		cpu::mem::stvx( regs, regs.VR56, (uint32)(regs.R31 + regs.R9 + 0x00000000) );
		/* 8208815Ch case   15:*/		return 0x82088160;
		  /* 82088160h */ case   16:  		/* stvx VR55, <#[R31 + R10]> */
		/* 82088160h case   16:*/		cpu::mem::stvx( regs, regs.VR55, (uint32)(regs.R31 + regs.R10 + 0x00000000) );
		/* 82088160h case   16:*/		return 0x82088164;
		  /* 82088164h */ case   17:  		/* stvx VR54, <#[R31 + R11]> */
		/* 82088164h case   17:*/		cpu::mem::stvx( regs, regs.VR54, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 82088164h case   17:*/		return 0x82088168;
		  /* 82088168h */ case   18:  		/* addi R31, R31, 128 */
		/* 82088168h case   18:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x80);
		/* 82088168h case   18:*/		return 0x8208816C;
		  /* 8208816Ch */ case   19:  		/* bc 16, CR0_LT, -108 */
		/* 8208816Ch case   19:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82088100;  }
		/* 8208816Ch case   19:*/		return 0x82088170;
		  /* 82088170h */ case   20:  		/* b 40 */
		/* 82088170h case   20:*/		return 0x82088198;
		/* 82088170h case   20:*/		return 0x82088174;
	}
	return 0x82088174;
} // Block from 82088120h-82088174h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82088174h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088174( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088174) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088174);
		  /* 82088174h */ case    0:  		/* mr R5, R28 */
		/* 82088174h case    0:*/		regs.R5 = regs.R28;
		/* 82088174h case    0:*/		return 0x82088178;
		  /* 82088178h */ case    1:  		/* mr R4, R30 */
		/* 82088178h case    1:*/		regs.R4 = regs.R30;
		/* 82088178h case    1:*/		return 0x8208817C;
		  /* 8208817Ch */ case    2:  		/* mr R3, R31 */
		/* 8208817Ch case    2:*/		regs.R3 = regs.R31;
		/* 8208817Ch case    2:*/		return 0x82088180;
		  /* 82088180h */ case    3:  		/* bl 9088 */
		/* 82088180h case    3:*/		regs.LR = 0x82088184; return 0x8208A500;
		/* 82088180h case    3:*/		return 0x82088184;
		  /* 82088184h */ case    4:  		/* addi R11, R1, 96 */
		/* 82088184h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 82088184h case    4:*/		return 0x82088188;
		  /* 82088188h */ case    5:  		/* add R31, R28, R31 */
		/* 82088188h case    5:*/		cpu::op::add<0>(regs,&regs.R31,regs.R28,regs.R31);
		/* 82088188h case    5:*/		return 0x8208818C;
		  /* 8208818Ch */ case    6:  		/* add R30, R28, R30 */
		/* 8208818Ch case    6:*/		cpu::op::add<0>(regs,&regs.R30,regs.R28,regs.R30);
		/* 8208818Ch case    6:*/		return 0x82088190;
		  /* 82088190h */ case    7:  		/* subf R29, R28, R29 */
		/* 82088190h case    7:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R28,regs.R29);
		/* 82088190h case    7:*/		return 0x82088194;
		  /* 82088194h */ case    8:  		/* lvx VR0, <#[R11]> */
		/* 82088194h case    8:*/		cpu::mem::lvx( regs, &regs.VR0, (uint32)(regs.R11 + 0x00000000) );
		/* 82088194h case    8:*/		return 0x82088198;
	}
	return 0x82088198;
} // Block from 82088174h-82088198h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82088198h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088198( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088198) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088198);
		  /* 82088198h */ case    0:  		/* cmplwi CR6, R29, 16 */
		/* 82088198h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000010);
		/* 82088198h case    0:*/		return 0x8208819C;
		  /* 8208819Ch */ case    1:  		/* bc 12, CR6_LT, 48 */
		/* 8208819Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x820881CC;  }
		/* 8208819Ch case    1:*/		return 0x820881A0;
		  /* 820881A0h */ case    2:  		/* rlwinm R10, R29, 28, 4, 31 */
		/* 820881A0h case    2:*/		cpu::op::rlwinm<0,28,4,31>(regs,&regs.R10,regs.R29);
		/* 820881A0h case    2:*/		return 0x820881A4;
		  /* 820881A4h */ case    3:  		/* mr R11, R27 */
		/* 820881A4h case    3:*/		regs.R11 = regs.R27;
		/* 820881A4h case    3:*/		return 0x820881A8;
		  /* 820881A8h */ case    4:  		/* mtspr CTR, R10 */
		/* 820881A8h case    4:*/		regs.CTR = regs.R10;
		/* 820881A8h case    4:*/		return 0x820881AC;
		  /* 820881ACh */ case    5:  		/* lvx VR63, <#[R30]> */
		/* 820881ACh case    5:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R30 + 0x00000000) );
		/* 820881ACh case    5:*/		return 0x820881B0;
		  /* 820881B0h */ case    6:  		/* addi R29, R29, -16 */
		/* 820881B0h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFFF0);
		/* 820881B0h case    6:*/		return 0x820881B4;
		  /* 820881B4h */ case    7:  		/* lvx VR62, <#[R30 + R11]> */
		/* 820881B4h case    7:*/		cpu::mem::lvx( regs, &regs.VR62, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 820881B4h case    7:*/		return 0x820881B8;
		  /* 820881B8h */ case    8:  		/* addi R30, R30, 16 */
		/* 820881B8h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x10);
		/* 820881B8h case    8:*/		return 0x820881BC;
		  /* 820881BCh */ case    9:  		/* vperm VR53, VR63, VR62, VR0 */
		/* 820881BCh case    9:*/		cpu::op::vperm<0>(regs,&regs.VR53,regs.VR63,regs.VR62,regs.VR0);
		/* 820881BCh case    9:*/		return 0x820881C0;
		  /* 820881C0h */ case   10:  		/* stvx VR53, <#[R31]> */
		/* 820881C0h case   10:*/		cpu::mem::stvx( regs, regs.VR53, (uint32)(regs.R31 + 0x00000000) );
		/* 820881C0h case   10:*/		return 0x820881C4;
		  /* 820881C4h */ case   11:  		/* addi R31, R31, 16 */
		/* 820881C4h case   11:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 820881C4h case   11:*/		return 0x820881C8;
		  /* 820881C8h */ case   12:  		/* bc 16, CR0_LT, -28 */
		/* 820881C8h case   12:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x820881AC;  }
		/* 820881C8h case   12:*/		return 0x820881CC;
	}
	return 0x820881CC;
} // Block from 82088198h-820881CCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 820881CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820881CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820881CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820881CC);
		  /* 820881CCh */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 820881CCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820881CCh case    0:*/		return 0x820881D0;
		  /* 820881D0h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 820881D0h case    1:*/		if ( regs.CR[6].eq ) { return 0x820881F0;  }
		/* 820881D0h case    1:*/		return 0x820881D4;
		  /* 820881D4h */ case    2:  		/* add R11, R30, R29 */
		/* 820881D4h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R29);
		/* 820881D4h case    2:*/		return 0x820881D8;
		  /* 820881D8h */ case    3:  		/* lvx VR52, <#[R30]> */
		/* 820881D8h case    3:*/		cpu::mem::lvx( regs, &regs.VR52, (uint32)(regs.R30 + 0x00000000) );
		/* 820881D8h case    3:*/		return 0x820881DC;
		  /* 820881DCh */ case    4:  		/* li R10, -1 */
		/* 820881DCh case    4:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 820881DCh case    4:*/		return 0x820881E0;
		  /* 820881E0h */ case    5:  		/* lvsl VR0, R30, R29 */
		/* 820881E0h case    5:*/		cpu::op::lvsl<0>(regs,&regs.VR0,regs.R30,regs.R29);
		/* 820881E0h case    5:*/		return 0x820881E4;
		  /* 820881E4h */ case    6:  		/* lvx VR51, <#[R11 + R10]> */
		/* 820881E4h case    6:*/		cpu::mem::lvx( regs, &regs.VR51, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 820881E4h case    6:*/		return 0x820881E8;
		  /* 820881E8h */ case    7:  		/* vperm VR50, VR52, VR51, VR0 */
		/* 820881E8h case    7:*/		cpu::op::vperm<0>(regs,&regs.VR50,regs.VR52,regs.VR51,regs.VR0);
		/* 820881E8h case    7:*/		return 0x820881EC;
		  /* 820881ECh */ case    8:  		/* stvrx VR50, <#[R31 + R29]> */
		/* 820881ECh case    8:*/		cpu::mem::stvrx( regs, regs.VR50, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 820881ECh case    8:*/		return 0x820881F0;
	}
	return 0x820881F0;
} // Block from 820881CCh-820881F0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820881F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820881F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820881F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820881F0);
		  /* 820881F0h */ case    0:  		/* mr R3, R26 */
		/* 820881F0h case    0:*/		regs.R3 = regs.R26;
		/* 820881F0h case    0:*/		return 0x820881F4;
		  /* 820881F4h */ case    1:  		/* addi R1, R1, 176 */
		/* 820881F4h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 820881F4h case    1:*/		return 0x820881F8;
		  /* 820881F8h */ case    2:  		/* b 37032 */
		/* 820881F8h case    2:*/		return 0x820912A0;
		/* 820881F8h case    2:*/		return 0x820881FC;
		  /* 820881FCh */ case    3:  		/* nop */
		/* 820881FCh case    3:*/		cpu::op::nop();
		/* 820881FCh case    3:*/		return 0x82088200;
	}
	return 0x82088200;
} // Block from 820881F0h-82088200h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82088200h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088200);
		  /* 82088200h */ case    0:  		/* mfspr R12, LR */
		/* 82088200h case    0:*/		regs.R12 = regs.LR;
		/* 82088200h case    0:*/		return 0x82088204;
		  /* 82088204h */ case    1:  		/* bl 36944 */
		/* 82088204h case    1:*/		regs.LR = 0x82088208; return 0x82091254;
		/* 82088204h case    1:*/		return 0x82088208;
		  /* 82088208h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82088208h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82088208h case    2:*/		return 0x8208820C;
		  /* 8208820Ch */ case    3:  		/* mr R27, R3 */
		/* 8208820Ch case    3:*/		regs.R27 = regs.R3;
		/* 8208820Ch case    3:*/		return 0x82088210;
		  /* 82088210h */ case    4:  		/* stw R4, <#[R1 + 156]> */
		/* 82088210h case    4:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000009C) );
		/* 82088210h case    4:*/		return 0x82088214;
		  /* 82088214h */ case    5:  		/* mr R31, R4 */
		/* 82088214h case    5:*/		regs.R31 = regs.R4;
		/* 82088214h case    5:*/		return 0x82088218;
		  /* 82088218h */ case    6:  		/* rlwinm. R11, R4, 0, 0, 0 */
		/* 82088218h case    6:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R4);
		/* 82088218h case    6:*/		return 0x8208821C;
		  /* 8208821Ch */ case    7:  		/* bc 12, CR0_EQ, 252 */
		/* 8208821Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x82088318;  }
		/* 8208821Ch case    7:*/		return 0x82088220;
		  /* 82088220h */ case    8:  		/* rlwinm. R11, R4, 0, 4, 7 */
		/* 82088220h case    8:*/		cpu::op::rlwinm<1,0,4,7>(regs,&regs.R11,regs.R4);
		/* 82088220h case    8:*/		return 0x82088224;
		  /* 82088224h */ case    9:  		/* bc 4, CR0_EQ, 16 */
		/* 82088224h case    9:*/		if ( !regs.CR[0].eq ) { return 0x82088234;  }
		/* 82088224h case    9:*/		return 0x82088228;
		  /* 82088228h */ case   10:  		/* li R11, 3 */
		/* 82088228h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 82088228h case   10:*/		return 0x8208822C;
		  /* 8208822Ch */ case   11:  		/* rlwimi R31, R11, 26, 4, 7 */
		/* 8208822Ch case   11:*/		cpu::op::rlwimi<0,26,4,7>(regs,&regs.R31,regs.R11);
		/* 8208822Ch case   11:*/		return 0x82088230;
		  /* 82088230h */ case   12:  		/* stw R31, <#[R1 + 156]> */
		/* 82088230h case   12:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000009C) );
		/* 82088230h case   12:*/		return 0x82088234;
	}
	return 0x82088234;
} // Block from 82088200h-82088234h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82088234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088234);
		  /* 82088234h */ case    0:  		/* lbz R11, <#[R1 + 157]> */
		/* 82088234h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000009D) );
		/* 82088234h case    0:*/		return 0x82088238;
		  /* 82088238h */ case    1:  		/* cmplwi CR6, R11, 156 */
		/* 82088238h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000009C);
		/* 82088238h case    1:*/		return 0x8208823C;
		  /* 8208823Ch */ case    2:  		/* bc 12, CR6_EQ, 44 */
		/* 8208823Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82088268;  }
		/* 8208823Ch case    2:*/		return 0x82088240;
		  /* 82088240h */ case    3:  		/* cmplwi CR6, R11, 190 */
		/* 82088240h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000000BE);
		/* 82088240h case    3:*/		return 0x82088244;
		  /* 82088244h */ case    4:  		/* bc 12, CR6_EQ, 36 */
		/* 82088244h case    4:*/		if ( regs.CR[6].eq ) { return 0x82088268;  }
		/* 82088244h case    4:*/		return 0x82088248;
		  /* 82088248h */ case    5:  		/* lis R11, -32217 */
		/* 82088248h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82088248h case    5:*/		return 0x8208824C;
		  /* 8208824Ch */ case    6:  		/* rlwinm R10, R31, 6, 28, 29 */
		/* 8208824Ch case    6:*/		cpu::op::rlwinm<0,6,28,29>(regs,&regs.R10,regs.R31);
		/* 8208824Ch case    6:*/		return 0x82088250;
		  /* 82088250h */ case    7:  		/* addi R11, R11, 6776 */
		/* 82088250h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1A78);
		/* 82088250h case    7:*/		return 0x82088254;
		  /* 82088254h */ case    8:  		/* rlwinm R9, R31, 8, 28, 31 */
		/* 82088254h case    8:*/		cpu::op::rlwinm<0,8,28,31>(regs,&regs.R9,regs.R31);
		/* 82088254h case    8:*/		return 0x82088258;
		  /* 82088258h */ case    9:  		/* li R8, 1 */
		/* 82088258h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82088258h case    9:*/		return 0x8208825C;
		  /* 8208825Ch */ case   10:  		/* slw R5, R8, R9 */
		/* 8208825Ch case   10:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R8,regs.R9);
		/* 8208825Ch case   10:*/		return 0x82088260;
		  /* 82088260h */ case   11:  		/* lwzx R6, <#[R10 + R11]> */
		/* 82088260h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82088260h case   11:*/		return 0x82088264;
		  /* 82088264h */ case   12:  		/* b 128 */
		/* 82088264h case   12:*/		return 0x820882E4;
		/* 82088264h case   12:*/		return 0x82088268;
	}
	return 0x82088268;
} // Block from 82088234h-82088268h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82088268h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088268);
		  /* 82088268h */ case    0:  		/* lis R10, -32217 */
		/* 82088268h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 82088268h case    0:*/		return 0x8208826C;
		  /* 8208826Ch */ case    1:  		/* rlwinm R9, R31, 6, 28, 29 */
		/* 8208826Ch case    1:*/		cpu::op::rlwinm<0,6,28,29>(regs,&regs.R9,regs.R31);
		/* 8208826Ch case    1:*/		return 0x82088270;
		  /* 82088270h */ case    2:  		/* addi R10, R10, 6776 */
		/* 82088270h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1A78);
		/* 82088270h case    2:*/		return 0x82088274;
		  /* 82088274h */ case    3:  		/* cmplwi CR6, R11, 190 */
		/* 82088274h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000000BE);
		/* 82088274h case    3:*/		return 0x82088278;
		  /* 82088278h */ case    4:  		/* lwzx R29, <#[R9 + R10]> */
		/* 82088278h case    4:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82088278h case    4:*/		return 0x8208827C;
		  /* 8208827Ch */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 8208827Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x82088288;  }
		/* 8208827Ch case    5:*/		return 0x82088280;
		  /* 82088280h */ case    6:  		/* lis R29, 8192 */
		/* 82088280h case    6:*/		cpu::op::lis<0>(regs,&regs.R29,0x2000);
		/* 82088280h case    6:*/		return 0x82088284;
		  /* 82088284h */ case    7:  		/* ori R29, R29, 4 */
		/* 82088284h case    7:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82088284h case    7:*/		return 0x82088288;
	}
	return 0x82088288;
} // Block from 82088268h-82088288h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82088288h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088288);
		  /* 82088288h */ case    0:  		/* rlwinm R11, R31, 0, 19, 31 */
		/* 82088288h case    0:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R11,regs.R31);
		/* 82088288h case    0:*/		return 0x8208828C;
		  /* 8208828Ch */ case    1:  		/* li R28, 1 */
		/* 8208828Ch case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 8208828Ch case    1:*/		return 0x82088290;
		  /* 82088290h */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 82088290h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82088290h case    2:*/		return 0x82088294;
		  /* 82088294h */ case    3:  		/* bc 4, CR6_EQ, 16 */
		/* 82088294h case    3:*/		if ( !regs.CR[6].eq ) { return 0x820882A4;  }
		/* 82088294h case    3:*/		return 0x82088298;
		  /* 82088298h */ case    4:  		/* lis R5, 8191 */
		/* 82088298h case    4:*/		cpu::op::lis<0>(regs,&regs.R5,0x1FFF);
		/* 82088298h case    4:*/		return 0x8208829C;
		  /* 8208829Ch */ case    5:  		/* lis R4, 4096 */
		/* 8208829Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R4,0x1000);
		/* 8208829Ch case    5:*/		return 0x820882A0;
		  /* 820882A0h */ case    6:  		/* b 20 */
		/* 820882A0h case    6:*/		return 0x820882B4;
		/* 820882A0h case    6:*/		return 0x820882A4;
	}
	return 0x820882A4;
} // Block from 82088288h-820882A4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820882A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820882A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820882A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820882A4);
		  /* 820882A4h */ case    0:  		/* cmplwi CR6, R11, 2 */
		/* 820882A4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 820882A4h case    0:*/		return 0x820882A8;
		  /* 820882A8h */ case    1:  		/* bc 4, CR6_EQ, 48 */
		/* 820882A8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820882D8;  }
		/* 820882A8h case    1:*/		return 0x820882AC;
		  /* 820882ACh */ case    2:  		/* lis R5, 4095 */
		/* 820882ACh case    2:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFF);
		/* 820882ACh case    2:*/		return 0x820882B0;
		  /* 820882B0h */ case    3:  		/* li R4, 0 */
		/* 820882B0h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820882B0h case    3:*/		return 0x820882B4;
	}
	return 0x820882B4;
} // Block from 820882A4h-820882B4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820882B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820882B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820882B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820882B4);
		  /* 820882B4h */ case    0:  		/* rlwinm R11, R31, 8, 28, 31 */
		/* 820882B4h case    0:*/		cpu::op::rlwinm<0,8,28,31>(regs,&regs.R11,regs.R31);
		/* 820882B4h case    0:*/		return 0x820882B8;
		  /* 820882B8h */ case    1:  		/* mr R7, R29 */
		/* 820882B8h case    1:*/		regs.R7 = regs.R29;
		/* 820882B8h case    1:*/		return 0x820882BC;
		  /* 820882BCh */ case    2:  		/* slw R6, R28, R11 */
		/* 820882BCh case    2:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R28,regs.R11);
		/* 820882BCh case    2:*/		return 0x820882C0;
		  /* 820882C0h */ case    3:  		/* ori R5, R5, 65535 */
		/* 820882C0h case    3:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0xFFFF);
		/* 820882C0h case    3:*/		return 0x820882C4;
		  /* 820882C4h */ case    4:  		/* mr R3, R27 */
		/* 820882C4h case    4:*/		regs.R3 = regs.R27;
		/* 820882C4h case    4:*/		return 0x820882C8;
		  /* 820882C8h */ case    5:  		/* bl 9112 */
		/* 820882C8h case    5:*/		regs.LR = 0x820882CC; return 0x8208A660;
		/* 820882C8h case    5:*/		return 0x820882CC;
		  /* 820882CCh */ case    6:  		/* mr R30, R3 */
		/* 820882CCh case    6:*/		regs.R30 = regs.R3;
		/* 820882CCh case    6:*/		return 0x820882D0;
		  /* 820882D0h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 820882D0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 820882D0h case    7:*/		return 0x820882D4;
		  /* 820882D4h */ case    8:  		/* bc 4, CR6_EQ, 40 */
		/* 820882D4h case    8:*/		if ( !regs.CR[6].eq ) { return 0x820882FC;  }
		/* 820882D4h case    8:*/		return 0x820882D8;
	}
	return 0x820882D8;
} // Block from 820882B4h-820882D8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 820882D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820882D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820882D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820882D8);
		  /* 820882D8h */ case    0:  		/* rlwinm R11, R31, 8, 28, 31 */
		/* 820882D8h case    0:*/		cpu::op::rlwinm<0,8,28,31>(regs,&regs.R11,regs.R31);
		/* 820882D8h case    0:*/		return 0x820882DC;
		  /* 820882DCh */ case    1:  		/* mr R6, R29 */
		/* 820882DCh case    1:*/		regs.R6 = regs.R29;
		/* 820882DCh case    1:*/		return 0x820882E0;
		  /* 820882E0h */ case    2:  		/* slw R5, R28, R11 */
		/* 820882E0h case    2:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R28,regs.R11);
		/* 820882E0h case    2:*/		return 0x820882E4;
	}
	return 0x820882E4;
} // Block from 820882D8h-820882E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820882E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820882E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820882E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820882E4);
		  /* 820882E4h */ case    0:  		/* li R4, -1 */
		/* 820882E4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xFFFFFFFF);
		/* 820882E4h case    0:*/		return 0x820882E8;
		  /* 820882E8h */ case    1:  		/* mr R3, R27 */
		/* 820882E8h case    1:*/		regs.R3 = regs.R27;
		/* 820882E8h case    1:*/		return 0x820882EC;
		  /* 820882ECh */ case    2:  		/* bl 8940 */
		/* 820882ECh case    2:*/		regs.LR = 0x820882F0; return 0x8208A5D8;
		/* 820882ECh case    2:*/		return 0x820882F0;
		  /* 820882F0h */ case    3:  		/* mr R30, R3 */
		/* 820882F0h case    3:*/		regs.R30 = regs.R3;
		/* 820882F0h case    3:*/		return 0x820882F4;
		  /* 820882F4h */ case    4:  		/* cmplwi CR6, R3, 0 */
		/* 820882F4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 820882F4h case    4:*/		return 0x820882F8;
		  /* 820882F8h */ case    5:  		/* bc 12, CR6_EQ, 48 */
		/* 820882F8h case    5:*/		if ( regs.CR[6].eq ) { return 0x82088328;  }
		/* 820882F8h case    5:*/		return 0x820882FC;
	}
	return 0x820882FC;
} // Block from 820882E4h-820882FCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 820882FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820882FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820882FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820882FC);
		  /* 820882FCh */ case    0:  		/* rlwinm. R11, R31, 0, 1, 1 */
		/* 820882FCh case    0:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R31);
		/* 820882FCh case    0:*/		return 0x82088300;
		  /* 82088300h */ case    1:  		/* bc 12, CR0_EQ, 40 */
		/* 82088300h case    1:*/		if ( regs.CR[0].eq ) { return 0x82088328;  }
		/* 82088300h case    1:*/		return 0x82088304;
		  /* 82088304h */ case    2:  		/* mr R5, R27 */
		/* 82088304h case    2:*/		regs.R5 = regs.R27;
		/* 82088304h case    2:*/		return 0x82088308;
		  /* 82088308h */ case    3:  		/* li R4, 0 */
		/* 82088308h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82088308h case    3:*/		return 0x8208830C;
		  /* 8208830Ch */ case    4:  		/* mr R3, R30 */
		/* 8208830Ch case    4:*/		regs.R3 = regs.R30;
		/* 8208830Ch case    4:*/		return 0x82088310;
		  /* 82088310h */ case    5:  		/* bl 36912 */
		/* 82088310h case    5:*/		regs.LR = 0x82088314; return 0x82091340;
		/* 82088310h case    5:*/		return 0x82088314;
		  /* 82088314h */ case    6:  		/* b 20 */
		/* 82088314h case    6:*/		return 0x82088328;
		/* 82088314h case    6:*/		return 0x82088318;
	}
	return 0x82088318;
} // Block from 820882FCh-82088318h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82088318h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088318);
		  /* 82088318h */ case    0:  		/* mr R4, R31 */
		/* 82088318h case    0:*/		regs.R4 = regs.R31;
		/* 82088318h case    0:*/		return 0x8208831C;
		  /* 8208831Ch */ case    1:  		/* mr R3, R27 */
		/* 8208831Ch case    1:*/		regs.R3 = regs.R27;
		/* 8208831Ch case    1:*/		return 0x82088320;
		  /* 82088320h */ case    2:  		/* bl 8864 */
		/* 82088320h case    2:*/		regs.LR = 0x82088324; return 0x8208A5C0;
		/* 82088320h case    2:*/		return 0x82088324;
		  /* 82088324h */ case    3:  		/* mr R30, R3 */
		/* 82088324h case    3:*/		regs.R30 = regs.R3;
		/* 82088324h case    3:*/		return 0x82088328;
	}
	return 0x82088328;
} // Block from 82088318h-82088328h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82088328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088328);
		  /* 82088328h */ case    0:  		/* mr R3, R30 */
		/* 82088328h case    0:*/		regs.R3 = regs.R30;
		/* 82088328h case    0:*/		return 0x8208832C;
		  /* 8208832Ch */ case    1:  		/* addi R1, R1, 128 */
		/* 8208832Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8208832Ch case    1:*/		return 0x82088330;
		  /* 82088330h */ case    2:  		/* b 36724 */
		/* 82088330h case    2:*/		return 0x820912A4;
		/* 82088330h case    2:*/		return 0x82088334;
		  /* 82088334h */ case    3:  		/* nop */
		/* 82088334h case    3:*/		cpu::op::nop();
		/* 82088334h case    3:*/		return 0x82088338;
	}
	return 0x82088338;
} // Block from 82088328h-82088338h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82088338h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088338);
		  /* 82088338h */ case    0:  		/* rlwinm. R11, R4, 0, 0, 0 */
		/* 82088338h case    0:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R4);
		/* 82088338h case    0:*/		return 0x8208833C;
		  /* 8208833Ch */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8208833Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8208834C;  }
		/* 8208833Ch case    1:*/		return 0x82088340;
		  /* 82088340h */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 82088340h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82088340h case    2:*/		return 0x82088344;
		  /* 82088344h */ case    3:  		/* bclr 12, CR6_EQ */
		/* 82088344h case    3:*/		if ( regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 82088344h case    3:*/		return 0x82088348;
	}
	return 0x82088348;
} // Block from 82088338h-82088348h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82088348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088348);
		  /* 82088348h */ case    0:  		/* b 9096 */
		/* 82088348h case    0:*/		return 0x8208A6D0;
		/* 82088348h case    0:*/		return 0x8208834C;
	}
	return 0x8208834C;
} // Block from 82088348h-8208834Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8208834Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208834C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208834C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208834C);
		  /* 8208834Ch */ case    0:  		/* b 8836 */
		/* 8208834Ch case    0:*/		return 0x8208A5D0;
		/* 8208834Ch case    0:*/		return 0x82088350;
		  /* 82088350h */ case    1:  		/* bclr 20, CR0_LT */
		/* 82088350h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82088350h case    1:*/		return 0x82088354;
	}
	return 0x82088354;
} // Block from 8208834Ch-82088354h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82088354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088354);
		  /* 82088354h */ case    0:  		/* nop */
		/* 82088354h case    0:*/		cpu::op::nop();
		/* 82088354h case    0:*/		return 0x82088358;
	}
	return 0x82088358;
} // Block from 82088354h-82088358h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82088358h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088358);
		  /* 82088358h */ case    0:  		/* mfspr R12, LR */
		/* 82088358h case    0:*/		regs.R12 = regs.LR;
		/* 82088358h case    0:*/		return 0x8208835C;
		  /* 8208835Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8208835Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208835Ch case    1:*/		return 0x82088360;
		  /* 82088360h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 82088360h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82088360h case    2:*/		return 0x82088364;
		  /* 82088364h */ case    3:  		/* li R11, 0 */
		/* 82088364h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82088364h case    3:*/		return 0x82088368;
		  /* 82088368h */ case    4:  		/* mr R4, R3 */
		/* 82088368h case    4:*/		regs.R4 = regs.R3;
		/* 82088368h case    4:*/		return 0x8208836C;
		  /* 8208836Ch */ case    5:  		/* sth R11, <#[R1 + 80]> */
		/* 8208836Ch case    5:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8208836Ch case    5:*/		return 0x82088370;
		  /* 82088370h */ case    6:  		/* addi R3, R1, 80 */
		/* 82088370h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82088370h case    6:*/		return 0x82088374;
		  /* 82088374h */ case    7:  		/* sth R11, <#[R1 + 82]> */
		/* 82088374h case    7:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R1 + 0x00000052) );
		/* 82088374h case    7:*/		return 0x82088378;
	}
	return 0x82088378;
} // Block from 82088358h-82088378h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82088378h
// Function '?PrintDestReg@Disassembler@D3D@@AAAXHHHHHH_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088378);
		  /* 82088378h */ case    0:  		/* stw R11, <#[R1 + 84]> */
		/* 82088378h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82088378h case    0:*/		return 0x8208837C;
		  /* 8208837Ch */ case    1:  		/* bl 1986172 */
		/* 8208837Ch case    1:*/		regs.LR = 0x82088380; return 0x8226D1F8;
		/* 8208837Ch case    1:*/		return 0x82088380;
		  /* 82088380h */ case    2:  		/* addi R3, R1, 80 */
		/* 82088380h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82088380h case    2:*/		return 0x82088384;
		  /* 82088384h */ case    3:  		/* bl 9052 */
		/* 82088384h case    3:*/		regs.LR = 0x82088388; return 0x8208A6E0;
		/* 82088384h case    3:*/		return 0x82088388;
		  /* 82088388h */ case    4:  		/* addi R1, R1, 96 */
		/* 82088388h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82088388h case    4:*/		return 0x8208838C;
		  /* 8208838Ch */ case    5:  		/* lwz R12, <#[R1 - 8]> */
		/* 8208838Ch case    5:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208838Ch case    5:*/		return 0x82088390;
		  /* 82088390h */ case    6:  		/* mtspr LR, R12 */
		/* 82088390h case    6:*/		regs.LR = regs.R12;
		/* 82088390h case    6:*/		return 0x82088394;
		  /* 82088394h */ case    7:  		/* bclr 20, CR0_LT */
		/* 82088394h case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82088394h case    7:*/		return 0x82088398;
	}
	return 0x82088398;
} // Block from 82088378h-82088398h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82088398h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088398);
		  /* 82088398h */ case    0:  		/* lwz R11, <#[R13 + 256]> */
		/* 82088398h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R13 + 0x00000100) );
		/* 82088398h case    0:*/		return 0x8208839C;
		  /* 8208839Ch */ case    1:  		/* lwz R3, <#[R11 + 332]> */
		/* 8208839Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000014C) );
		/* 8208839Ch case    1:*/		return 0x820883A0;
		  /* 820883A0h */ case    2:  		/* bclr 20, CR0_LT */
		/* 820883A0h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820883A0h case    2:*/		return 0x820883A4;
	}
	return 0x820883A4;
} // Block from 82088398h-820883A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820883A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820883A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820883A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820883A4);
		  /* 820883A4h */ case    0:  		/* nop */
		/* 820883A4h case    0:*/		cpu::op::nop();
		/* 820883A4h case    0:*/		return 0x820883A8;
	}
	return 0x820883A8;
} // Block from 820883A4h-820883A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820883A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820883A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820883A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820883A8);
		  /* 820883A8h */ case    0:  		/* mfspr R12, LR */
		/* 820883A8h case    0:*/		regs.R12 = regs.LR;
		/* 820883A8h case    0:*/		return 0x820883AC;
		  /* 820883ACh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820883ACh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820883ACh case    1:*/		return 0x820883B0;
		  /* 820883B0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 820883B0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820883B0h case    2:*/		return 0x820883B4;
		  /* 820883B4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 820883B4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820883B4h case    3:*/		return 0x820883B8;
		  /* 820883B8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 820883B8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820883B8h case    4:*/		return 0x820883BC;
		  /* 820883BCh */ case    5:  		/* mr R31, R4 */
		/* 820883BCh case    5:*/		regs.R31 = regs.R4;
		/* 820883BCh case    5:*/		return 0x820883C0;
		  /* 820883C0h */ case    6:  		/* cmpwi CR6, R3, -1 */
		/* 820883C0h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 820883C0h case    6:*/		return 0x820883C4;
		  /* 820883C4h */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 820883C4h case    7:*/		if ( regs.CR[6].eq ) { return 0x820883D8;  }
		/* 820883C4h case    7:*/		return 0x820883C8;
		  /* 820883C8h */ case    8:  		/* rldicl R11, R3, 0, 32 */
		/* 820883C8h case    8:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R3);
		/* 820883C8h case    8:*/		return 0x820883CC;
		  /* 820883CCh */ case    9:  		/* mulli R11, R11, -10000 */
		/* 820883CCh case    9:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xFFFFD8F0);
		/* 820883CCh case    9:*/		return 0x820883D0;
		  /* 820883D0h */ case   10:  		/* std R11, <#[R1 + 80]> */
		/* 820883D0h case   10:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 820883D0h case   10:*/		return 0x820883D4;
		  /* 820883D4h */ case   11:  		/* b 20 */
		/* 820883D4h case   11:*/		return 0x820883E8;
		/* 820883D4h case   11:*/		return 0x820883D8;
	}
	return 0x820883D8;
} // Block from 820883A8h-820883D8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820883D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820883D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820883D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820883D8);
		  /* 820883D8h */ case    0:  		/* li R11, 0 */
		/* 820883D8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 820883D8h case    0:*/		return 0x820883DC;
		  /* 820883DCh */ case    1:  		/* lis R10, -32768 */
		/* 820883DCh case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 820883DCh case    1:*/		return 0x820883E0;
		  /* 820883E0h */ case    2:  		/* stw R11, <#[R1 + 84]> */
		/* 820883E0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 820883E0h case    2:*/		return 0x820883E4;
		  /* 820883E4h */ case    3:  		/* stw R10, <#[R1 + 80]> */
		/* 820883E4h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 820883E4h case    3:*/		return 0x820883E8;
	}
	return 0x820883E8;
} // Block from 820883D8h-820883E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820883E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820883E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820883E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820883E8);
		  /* 820883E8h */ case    0:  		/* rlwinm R30, R31, 0, 24, 31 */
		/* 820883E8h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R30,regs.R31);
		/* 820883E8h case    0:*/		return 0x820883EC;
		  /* 820883ECh */ case    1:  		/* addi R5, R1, 80 */
		/* 820883ECh case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 820883ECh case    1:*/		return 0x820883F0;
		  /* 820883F0h */ case    2:  		/* mr R4, R31 */
		/* 820883F0h case    2:*/		regs.R4 = regs.R31;
		/* 820883F0h case    2:*/		return 0x820883F4;
		  /* 820883F4h */ case    3:  		/* li R3, 1 */
		/* 820883F4h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820883F4h case    3:*/		return 0x820883F8;
		  /* 820883F8h */ case    4:  		/* bl 1986272 */
		/* 820883F8h case    4:*/		regs.LR = 0x820883FC; return 0x8226D2D8;
		/* 820883F8h case    4:*/		return 0x820883FC;
		  /* 820883FCh */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 820883FCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820883FCh case    5:*/		return 0x82088400;
		  /* 82088400h */ case    6:  		/* bc 12, CR6_EQ, 12 */
		/* 82088400h case    6:*/		if ( regs.CR[6].eq ) { return 0x8208840C;  }
		/* 82088400h case    6:*/		return 0x82088404;
		  /* 82088404h */ case    7:  		/* cmpwi CR6, R3, 257 */
		/* 82088404h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000101);
		/* 82088404h case    7:*/		return 0x82088408;
		  /* 82088408h */ case    8:  		/* bc 12, CR6_EQ, -28 */
		/* 82088408h case    8:*/		if ( regs.CR[6].eq ) { return 0x820883EC;  }
		/* 82088408h case    8:*/		return 0x8208840C;
	}
	return 0x8208840C;
} // Block from 820883E8h-8208840Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8208840Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208840C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208840C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208840C);
		  /* 8208840Ch */ case    0:  		/* addi R11, R3, -192 */
		/* 8208840Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0xFFFFFF40);
		/* 8208840Ch case    0:*/		return 0x82088410;
		  /* 82088410h */ case    1:  		/* li R10, 192 */
		/* 82088410h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0xC0);
		/* 82088410h case    1:*/		return 0x82088414;
		  /* 82088414h */ case    2:  		/* addic R11, R11, -1 */
		/* 82088414h case    2:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82088414h case    2:*/		return 0x82088418;
		  /* 82088418h */ case    3:  		/* subfe R11, R11, R11 */
		/* 82088418h case    3:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82088418h case    3:*/		return 0x8208841C;
		  /* 8208841Ch */ case    4:  		/* and R3, R11, R10 */
		/* 8208841Ch case    4:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 8208841Ch case    4:*/		return 0x82088420;
		  /* 82088420h */ case    5:  		/* addi R1, R1, 112 */
		/* 82088420h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82088420h case    5:*/		return 0x82088424;
		  /* 82088424h */ case    6:  		/* lwz R12, <#[R1 - 8]> */
		/* 82088424h case    6:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82088424h case    6:*/		return 0x82088428;
		  /* 82088428h */ case    7:  		/* mtspr LR, R12 */
		/* 82088428h case    7:*/		regs.LR = regs.R12;
		/* 82088428h case    7:*/		return 0x8208842C;
		  /* 8208842Ch */ case    8:  		/* ld R30, <#[R1 - 24]> */
		/* 8208842Ch case    8:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8208842Ch case    8:*/		return 0x82088430;
		  /* 82088430h */ case    9:  		/* ld R31, <#[R1 - 16]> */
		/* 82088430h case    9:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82088430h case    9:*/		return 0x82088434;
		  /* 82088434h */ case   10:  		/* bclr 20, CR0_LT */
		/* 82088434h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82088434h case   10:*/		return 0x82088438;
	}
	return 0x82088438;
} // Block from 8208840Ch-82088438h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82088438h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088438);
		  /* 82088438h */ case    0:  		/* li R4, 0 */
		/* 82088438h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82088438h case    0:*/		return 0x8208843C;
		  /* 8208843Ch */ case    1:  		/* b -148 */
		/* 8208843Ch case    1:*/		return 0x820883A8;
		/* 8208843Ch case    1:*/		return 0x82088440;
	}
	return 0x82088440;
} // Block from 82088438h-82088440h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82088440h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088440);
		  /* 82088440h */ case    0:  		/* mfspr R12, LR */
		/* 82088440h case    0:*/		regs.R12 = regs.LR;
		/* 82088440h case    0:*/		return 0x82088444;
		  /* 82088444h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82088444h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82088444h case    1:*/		return 0x82088448;
		  /* 82088448h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82088448h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82088448h case    2:*/		return 0x8208844C;
		  /* 8208844Ch */ case    3:  		/* oris R11, R3, 544 */
		/* 8208844Ch case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R3,0x220);
		/* 8208844Ch case    3:*/		return 0x82088450;
		  /* 82088450h */ case    4:  		/* stw R11, <#[R1 + 80]> */
		/* 82088450h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82088450h case    4:*/		return 0x82088454;
		  /* 82088454h */ case    5:  		/* stfs FR1, <#[R1 + 140]> */
		/* 82088454h case    5:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R1 + 0x0000008C) );
		/* 82088454h case    5:*/		return 0x82088458;
		  /* 82088458h */ case    6:  		/* lwz R9, <#[R1 + 140]> */
		/* 82088458h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x0000008C) );
		/* 82088458h case    6:*/		return 0x8208845C;
		  /* 8208845Ch */ case    7:  		/* li R11, 2 */
		/* 8208845Ch case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 8208845Ch case    7:*/		return 0x82088460;
		  /* 82088460h */ case    8:  		/* stw R11, <#[R1 + 92]> */
		/* 82088460h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 82088460h case    8:*/		return 0x82088464;
		  /* 82088464h */ case    9:  		/* addi R8, R1, 80 */
		/* 82088464h case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 82088464h case    9:*/		return 0x82088468;
		  /* 82088468h */ case   10:  		/* stw R8, <#[R1 + 88]> */
		/* 82088468h case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000058) );
		/* 82088468h case   10:*/		return 0x8208846C;
		  /* 8208846Ch */ case   11:  		/* stw R9, <#[R1 + 84]> */
		/* 8208846Ch case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8208846Ch case   11:*/		return 0x82088470;
		  /* 82088470h */ case   12:  		/* lis R10, -32256 */
		/* 82088470h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 82088470h case   12:*/		return 0x82088474;
		  /* 82088474h */ case   13:  		/* lwz R11, <#[R10 + 1140]> */
		/* 82088474h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000474) );
		/* 82088474h case   13:*/		return 0x82088478;
		  /* 82088478h */ case   14:  		/* lwz R11, <#[R11]> */
		/* 82088478h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82088478h case   14:*/		return 0x8208847C;
		  /* 8208847Ch */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 8208847Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8208847Ch case   15:*/		return 0x82088480;
		  /* 82088480h */ case   16:  		/* bc 12, CR6_EQ, 24 */
		/* 82088480h case   16:*/		if ( regs.CR[6].eq ) { return 0x82088498;  }
		/* 82088480h case   16:*/		return 0x82088484;
		  /* 82088484h */ case   17:  		/* lwz R11, <#[R11 + 24]> */
		/* 82088484h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82088484h case   17:*/		return 0x82088488;
		  /* 82088488h */ case   18:  		/* addi R4, R1, 88 */
		/* 82088488h case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x58);
		/* 82088488h case   18:*/		return 0x8208848C;
		  /* 8208848Ch */ case   19:  		/* li R3, 67 */
		/* 8208848Ch case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x43);
		/* 8208848Ch case   19:*/		return 0x82088490;
		  /* 82088490h */ case   20:  		/* mtspr CTR, R11 */
		/* 82088490h case   20:*/		regs.CTR = regs.R11;
		/* 82088490h case   20:*/		return 0x82088494;
		  /* 82088494h */ case   21:  		/* bcctrl 20, CR0_LT */
		/* 82088494h case   21:*/		if ( 1 ) { regs.LR = 0x82088498; return (uint32)regs.CTR; }
		/* 82088494h case   21:*/		return 0x82088498;
	}
	return 0x82088498;
} // Block from 82088440h-82088498h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82088498h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088498);
		  /* 82088498h */ case    0:  		/* addi R1, R1, 112 */
		/* 82088498h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82088498h case    0:*/		return 0x8208849C;
		  /* 8208849Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8208849Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208849Ch case    1:*/		return 0x820884A0;
		  /* 820884A0h */ case    2:  		/* mtspr LR, R12 */
		/* 820884A0h case    2:*/		regs.LR = regs.R12;
		/* 820884A0h case    2:*/		return 0x820884A4;
		  /* 820884A4h */ case    3:  		/* bclr 20, CR0_LT */
		/* 820884A4h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820884A4h case    3:*/		return 0x820884A8;
	}
	return 0x820884A8;
} // Block from 82088498h-820884A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820884A8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820884A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820884A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820884A8);
		  /* 820884A8h */ case    0:  		/* mfspr R12, LR */
		/* 820884A8h case    0:*/		regs.R12 = regs.LR;
		/* 820884A8h case    0:*/		return 0x820884AC;
		  /* 820884ACh */ case    1:  		/* bl 36264 */
		/* 820884ACh case    1:*/		regs.LR = 0x820884B0; return 0x82091254;
		/* 820884ACh case    1:*/		return 0x820884B0;
		  /* 820884B0h */ case    2:  		/* addi R31, R1, -176 */
		/* 820884B0h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0xFFFFFF50);
		/* 820884B0h case    2:*/		return 0x820884B4;
		  /* 820884B4h */ case    3:  		/* stwu R1, <#[R1 - 176]> */
		/* 820884B4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 820884B4h case    3:*/		return 0x820884B8;
		  /* 820884B8h */ case    4:  		/* addi R11, R5, 3 */
		/* 820884B8h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R5,0x3);
		/* 820884B8h case    4:*/		return 0x820884BC;
		  /* 820884BCh */ case    5:  		/* stw R4, <#[R31 + 104]> */
		/* 820884BCh case    5:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R31 + 0x00000068) );
		/* 820884BCh case    5:*/		return 0x820884C0;
		  /* 820884C0h */ case    6:  		/* lis R27, -32256 */
		/* 820884C0h case    6:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8200);
		/* 820884C0h case    6:*/		return 0x820884C4;
		  /* 820884C4h */ case    7:  		/* stw R3, <#[R31 + 84]> */
		/* 820884C4h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000054) );
		/* 820884C4h case    7:*/		return 0x820884C8;
		  /* 820884C8h */ case    8:  		/* rlwinm R11, R11, 30, 2, 31 */
		/* 820884C8h case    8:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R11,regs.R11);
		/* 820884C8h case    8:*/		return 0x820884CC;
		  /* 820884CCh */ case    9:  		/* stw R5, <#[R31 + 88]> */
		/* 820884CCh case    9:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R31 + 0x00000058) );
		/* 820884CCh case    9:*/		return 0x820884D0;
		  /* 820884D0h */ case   10:  		/* li R9, 3 */
		/* 820884D0h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 820884D0h case   10:*/		return 0x820884D4;
		  /* 820884D4h */ case   11:  		/* addi R29, R11, 3 */
		/* 820884D4h case   11:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x3);
		/* 820884D4h case   11:*/		return 0x820884D8;
		  /* 820884D8h */ case   12:  		/* stw R11, <#[R31 + 108]> */
		/* 820884D8h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 820884D8h case   12:*/		return 0x820884DC;
		  /* 820884DCh */ case   13:  		/* addi R11, R31, 80 */
		/* 820884DCh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x50);
		/* 820884DCh case   13:*/		return 0x820884E0;
		  /* 820884E0h */ case   14:  		/* stw R9, <#[R31 + 100]> */
		/* 820884E0h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000064) );
		/* 820884E0h case   14:*/		return 0x820884E4;
		  /* 820884E4h */ case   15:  		/* rlwinm R10, R29, 24, 1, 7 */
		/* 820884E4h case   15:*/		cpu::op::rlwinm<0,24,1,7>(regs,&regs.R10,regs.R29);
		/* 820884E4h case   15:*/		return 0x820884E8;
		  /* 820884E8h */ case   16:  		/* stw R11, <#[R31 + 96]> */
		/* 820884E8h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000060) );
		/* 820884E8h case   16:*/		return 0x820884EC;
		  /* 820884ECh */ case   17:  		/* li R8, 0 */
		/* 820884ECh case   17:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 820884ECh case   17:*/		return 0x820884F0;
		  /* 820884F0h */ case   18:  		/* lwz R11, <#[R27 + 1140]> */
		/* 820884F0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000474) );
		/* 820884F0h case   18:*/		return 0x820884F4;
		  /* 820884F4h */ case   19:  		/* ori R10, R10, 98 */
		/* 820884F4h case   19:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x62);
		/* 820884F4h case   19:*/		return 0x820884F8;
		  /* 820884F8h */ case   20:  		/* stw R8, <#[R31 + 112]> */
		/* 820884F8h case   20:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000070) );
		/* 820884F8h case   20:*/		return 0x820884FC;
		  /* 820884FCh */ case   21:  		/* mr R28, R4 */
		/* 820884FCh case   21:*/		regs.R28 = regs.R4;
		/* 820884FCh case   21:*/		return 0x82088500;
		  /* 82088500h */ case   22:  		/* stw R10, <#[R31 + 80]> */
		/* 82088500h case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000050) );
		/* 82088500h case   22:*/		return 0x82088504;
		  /* 82088504h */ case   23:  		/* mr R30, R5 */
		/* 82088504h case   23:*/		regs.R30 = regs.R5;
		/* 82088504h case   23:*/		return 0x82088508;
		  /* 82088508h */ case   24:  		/* lwz R11, <#[R11]> */
		/* 82088508h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82088508h case   24:*/		return 0x8208850C;
		  /* 8208850Ch */ case   25:  		/* cmplwi CR6, R11, 0 */
		/* 8208850Ch case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8208850Ch case   25:*/		return 0x82088510;
		  /* 82088510h */ case   26:  		/* bc 12, CR6_EQ, 28 */
		/* 82088510h case   26:*/		if ( regs.CR[6].eq ) { return 0x8208852C;  }
		/* 82088510h case   26:*/		return 0x82088514;
		  /* 82088514h */ case   27:  		/* lwz R11, <#[R11 + 24]> */
		/* 82088514h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82088514h case   27:*/		return 0x82088518;
		  /* 82088518h */ case   28:  		/* addi R4, R31, 96 */
		/* 82088518h case   28:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x60);
		/* 82088518h case   28:*/		return 0x8208851C;
		  /* 8208851Ch */ case   29:  		/* li R3, 94 */
		/* 8208851Ch case   29:*/		cpu::op::li<0>(regs,&regs.R3,0x5E);
		/* 8208851Ch case   29:*/		return 0x82088520;
		  /* 82088520h */ case   30:  		/* mtspr CTR, R11 */
		/* 82088520h case   30:*/		regs.CTR = regs.R11;
		/* 82088520h case   30:*/		return 0x82088524;
		  /* 82088524h */ case   31:  		/* bcctrl 20, CR0_LT */
		/* 82088524h case   31:*/		if ( 1 ) { regs.LR = 0x82088528; return (uint32)regs.CTR; }
		/* 82088524h case   31:*/		return 0x82088528;
		  /* 82088528h */ case   32:  		/* b 8 */
		/* 82088528h case   32:*/		return 0x82088530;
		/* 82088528h case   32:*/		return 0x8208852C;
	}
	return 0x8208852C;
} // Block from 820884A8h-8208852Ch (33 instructions)

//////////////////////////////////////////////////////
// Block at 8208852Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208852C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208852C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208852C);
		  /* 8208852Ch */ case    0:  		/* li R3, 0 */
		/* 8208852Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8208852Ch case    0:*/		return 0x82088530;
	}
	return 0x82088530;
} // Block from 8208852Ch-82088530h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82088530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088530);
		  /* 82088530h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 82088530h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82088530h case    0:*/		return 0x82088534;
		  /* 82088534h */ case    1:  		/* bc 4, CR6_GT, 12 */
		/* 82088534h case    1:*/		if ( !regs.CR[6].gt ) { return 0x82088540;  }
		/* 82088534h case    1:*/		return 0x82088538;
		  /* 82088538h */ case    2:  		/* li R3, 1 */
		/* 82088538h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82088538h case    2:*/		return 0x8208853C;
		  /* 8208853Ch */ case    3:  		/* b 128 */
		/* 8208853Ch case    3:*/		return 0x820885BC;
		/* 8208853Ch case    3:*/		return 0x82088540;
	}
	return 0x82088540;
} // Block from 82088530h-82088540h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82088540h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088540);
		  /* 82088540h */ case    0:  		/* bc 12, CR6_LT, 120 */
		/* 82088540h case    0:*/		if ( regs.CR[6].lt ) { return 0x820885B8;  }
		/* 82088540h case    0:*/		return 0x82088544;
		  /* 82088544h */ case    1:  		/* rlwinm R11, R29, 2, 0, 29 */
		/* 82088544h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R29);
		/* 82088544h case    1:*/		return 0x82088548;
		  /* 82088548h */ case    2:  		/* neg R11, R11 */
		/* 82088548h case    2:*/		cpu::op::neg<0>(regs,&regs.R11,regs.R11);
		/* 82088548h case    2:*/		return 0x8208854C;
		  /* 8208854Ch */ case    3:  		/* rlwinm R12, R11, 0, 0, 27 */
		/* 8208854Ch case    3:*/		cpu::op::rlwinm<0,0,0,27>(regs,&regs.R12,regs.R11);
		/* 8208854Ch case    3:*/		return 0x82088550;
		  /* 82088550h */ case    4:  		/* bl 44628 */
		/* 82088550h case    4:*/		regs.LR = 0x82088554; return 0x820933A4;
		/* 82088550h case    4:*/		return 0x82088554;
		  /* 82088554h */ case    5:  		/* lwz R11, <#[R1]> */
		/* 82088554h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000000) );
		/* 82088554h case    5:*/		return 0x82088558;
		  /* 82088558h */ case    6:  		/* mr R5, R30 */
		/* 82088558h case    6:*/		regs.R5 = regs.R30;
		/* 82088558h case    6:*/		return 0x8208855C;
		  /* 8208855Ch */ case    7:  		/* lwz R10, <#[R31 + 84]> */
		/* 8208855Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000054) );
		/* 8208855Ch case    7:*/		return 0x82088560;
		  /* 82088560h */ case    8:  		/* lwz R9, <#[R31 + 88]> */
		/* 82088560h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000058) );
		/* 82088560h case    8:*/		return 0x82088564;
		  /* 82088564h */ case    9:  		/* mr R4, R28 */
		/* 82088564h case    9:*/		regs.R4 = regs.R28;
		/* 82088564h case    9:*/		return 0x82088568;
		  /* 82088568h */ case   10:  		/* lwz R8, <#[R31 + 80]> */
		/* 82088568h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000050) );
		/* 82088568h case   10:*/		return 0x8208856C;
		  /* 8208856Ch */ case   11:  		/* stwux R11, <#[R1 + R12]> */
		/* 8208856Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + regs.R12 + 0x00000000) );
		regs.R1 = (uint32)(regs.R1 + regs.R12 + 0x00000000);
		/* 8208856Ch case   11:*/		return 0x82088570;
		  /* 82088570h */ case   12:  		/* addi R30, R1, 80 */
		/* 82088570h case   12:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x50);
		/* 82088570h case   12:*/		return 0x82088574;
		  /* 82088574h */ case   13:  		/* addi R3, R30, 12 */
		/* 82088574h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0xC);
		/* 82088574h case   13:*/		return 0x82088578;
		  /* 82088578h */ case   14:  		/* stw R8, <#[R30]> */
		/* 82088578h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R30 + 0x00000000) );
		/* 82088578h case   14:*/		return 0x8208857C;
		  /* 8208857Ch */ case   15:  		/* stw R10, <#[R30 + 4]> */
		/* 8208857Ch case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 8208857Ch case   15:*/		return 0x82088580;
		  /* 82088580h */ case   16:  		/* stw R9, <#[R30 + 8]> */
		/* 82088580h case   16:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 82088580h case   16:*/		return 0x82088584;
		  /* 82088584h */ case   17:  		/* bl 37932 */
		/* 82088584h case   17:*/		regs.LR = 0x82088588; return 0x820919B0;
		/* 82088584h case   17:*/		return 0x82088588;
		  /* 82088588h */ case   18:  		/* lwz R11, <#[R27 + 1140]> */
		/* 82088588h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000474) );
		/* 82088588h case   18:*/		return 0x8208858C;
		  /* 8208858Ch */ case   19:  		/* stw R30, <#[R31 + 96]> */
		/* 8208858Ch case   19:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000060) );
		/* 8208858Ch case   19:*/		return 0x82088590;
		  /* 82088590h */ case   20:  		/* stw R29, <#[R31 + 100]> */
		/* 82088590h case   20:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000064) );
		/* 82088590h case   20:*/		return 0x82088594;
		  /* 82088594h */ case   21:  		/* lwz R11, <#[R11]> */
		/* 82088594h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82088594h case   21:*/		return 0x82088598;
		  /* 82088598h */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 82088598h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82088598h case   22:*/		return 0x8208859C;
		  /* 8208859Ch */ case   23:  		/* bc 12, CR6_EQ, 28 */
		/* 8208859Ch case   23:*/		if ( regs.CR[6].eq ) { return 0x820885B8;  }
		/* 8208859Ch case   23:*/		return 0x820885A0;
		  /* 820885A0h */ case   24:  		/* lwz R11, <#[R11 + 24]> */
		/* 820885A0h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 820885A0h case   24:*/		return 0x820885A4;
		  /* 820885A4h */ case   25:  		/* addi R4, R31, 96 */
		/* 820885A4h case   25:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x60);
		/* 820885A4h case   25:*/		return 0x820885A8;
		  /* 820885A8h */ case   26:  		/* li R3, 67 */
		/* 820885A8h case   26:*/		cpu::op::li<0>(regs,&regs.R3,0x43);
		/* 820885A8h case   26:*/		return 0x820885AC;
		  /* 820885ACh */ case   27:  		/* mtspr CTR, R11 */
		/* 820885ACh case   27:*/		regs.CTR = regs.R11;
		/* 820885ACh case   27:*/		return 0x820885B0;
		  /* 820885B0h */ case   28:  		/* bcctrl 20, CR0_LT */
		/* 820885B0h case   28:*/		if ( 1 ) { regs.LR = 0x820885B4; return (uint32)regs.CTR; }
		/* 820885B0h case   28:*/		return 0x820885B4;
		  /* 820885B4h */ case   29:  		/* b 8 */
		/* 820885B4h case   29:*/		return 0x820885BC;
		/* 820885B4h case   29:*/		return 0x820885B8;
	}
	return 0x820885B8;
} // Block from 82088540h-820885B8h (30 instructions)

//////////////////////////////////////////////////////
// Block at 820885B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820885B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820885B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820885B8);
		  /* 820885B8h */ case    0:  		/* li R3, 0 */
		/* 820885B8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820885B8h case    0:*/		return 0x820885BC;
	}
	return 0x820885BC;
} // Block from 820885B8h-820885BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820885BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820885BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820885BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820885BC);
		  /* 820885BCh */ case    0:  		/* addi R1, R31, 176 */
		/* 820885BCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R31,0xB0);
		/* 820885BCh case    0:*/		return 0x820885C0;
		  /* 820885C0h */ case    1:  		/* b 36068 */
		/* 820885C0h case    1:*/		return 0x820912A4;
		/* 820885C0h case    1:*/		return 0x820885C4;
		  /* 820885C4h */ case    2:  		/* nop */
		/* 820885C4h case    2:*/		cpu::op::nop();
		/* 820885C4h case    2:*/		return 0x820885C8;
	}
	return 0x820885C8;
} // Block from 820885BCh-820885C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820885C8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820885C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820885C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820885C8);
		  /* 820885C8h */ case    0:  		/* lis R11, -32256 */
		/* 820885C8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820885C8h case    0:*/		return 0x820885CC;
		  /* 820885CCh */ case    1:  		/* lwz R11, <#[R11 + 1140]> */
		/* 820885CCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000474) );
		/* 820885CCh case    1:*/		return 0x820885D0;
		  /* 820885D0h */ case    2:  		/* lwz R11, <#[R11]> */
		/* 820885D0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 820885D0h case    2:*/		return 0x820885D4;
		  /* 820885D4h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 820885D4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820885D4h case    3:*/		return 0x820885D8;
		  /* 820885D8h */ case    4:  		/* bc 12, CR6_EQ, 24 */
		/* 820885D8h case    4:*/		if ( regs.CR[6].eq ) { return 0x820885F0;  }
		/* 820885D8h case    4:*/		return 0x820885DC;
		  /* 820885DCh */ case    5:  		/* lwz R11, <#[R11 + 24]> */
		/* 820885DCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 820885DCh case    5:*/		return 0x820885E0;
		  /* 820885E0h */ case    6:  		/* li R4, 0 */
		/* 820885E0h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820885E0h case    6:*/		return 0x820885E4;
		  /* 820885E4h */ case    7:  		/* li R3, 68 */
		/* 820885E4h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x44);
		/* 820885E4h case    7:*/		return 0x820885E8;
		  /* 820885E8h */ case    8:  		/* mtspr CTR, R11 */
		/* 820885E8h case    8:*/		regs.CTR = regs.R11;
		/* 820885E8h case    8:*/		return 0x820885EC;
		  /* 820885ECh */ case    9:  		/* bcctr 20, CR0_LT */
		/* 820885ECh case    9:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 820885ECh case    9:*/		return 0x820885F0;
	}
	return 0x820885F0;
} // Block from 820885C8h-820885F0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 820885F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820885F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820885F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820885F0);
		  /* 820885F0h */ case    0:  		/* li R3, 0 */
		/* 820885F0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820885F0h case    0:*/		return 0x820885F4;
		  /* 820885F4h */ case    1:  		/* bclr 20, CR0_LT */
		/* 820885F4h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820885F4h case    1:*/		return 0x820885F8;
	}
	return 0x820885F8;
} // Block from 820885F0h-820885F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820885F8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820885F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820885F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820885F8);
		  /* 820885F8h */ case    0:  		/* lis R11, -32256 */
		/* 820885F8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820885F8h case    0:*/		return 0x820885FC;
		  /* 820885FCh */ case    1:  		/* lwz R11, <#[R11 + 1320]> */
		/* 820885FCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000528) );
		/* 820885FCh case    1:*/		return 0x82088600;
		  /* 82088600h */ case    2:  		/* lwz R3, <#[R11 + 16]> */
		/* 82088600h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000010) );
		/* 82088600h case    2:*/		return 0x82088604;
		  /* 82088604h */ case    3:  		/* bclr 20, CR0_LT */
		/* 82088604h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82088604h case    3:*/		return 0x82088608;
	}
	return 0x82088608;
} // Block from 820885F8h-82088608h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82088608h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088608);
		  /* 82088608h */ case    0:  		/* mfspr R12, LR */
		/* 82088608h case    0:*/		regs.R12 = regs.LR;
		/* 82088608h case    0:*/		return 0x8208860C;
		  /* 8208860Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8208860Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208860Ch case    1:*/		return 0x82088610;
		  /* 82088610h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 82088610h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82088610h case    2:*/		return 0x82088614;
		  /* 82088614h */ case    3:  		/* bl 1985764 */
		/* 82088614h case    3:*/		regs.LR = 0x82088618; return 0x8226D2F8;
		/* 82088614h case    3:*/		return 0x82088618;
		  /* 82088618h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 82088618h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82088618h case    4:*/		return 0x8208861C;
		  /* 8208861Ch */ case    5:  		/* bc 4, CR0_LT, 16 */
		/* 8208861Ch case    5:*/		if ( !regs.CR[0].lt ) { return 0x8208862C;  }
		/* 8208861Ch case    5:*/		return 0x82088620;
		  /* 82088620h */ case    6:  		/* bl 8400 */
		/* 82088620h case    6:*/		regs.LR = 0x82088624; return 0x8208A6F0;
		/* 82088620h case    6:*/		return 0x82088624;
		  /* 82088624h */ case    7:  		/* li R3, 0 */
		/* 82088624h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82088624h case    7:*/		return 0x82088628;
		  /* 82088628h */ case    8:  		/* b 8 */
		/* 82088628h case    8:*/		return 0x82088630;
		/* 82088628h case    8:*/		return 0x8208862C;
	}
	return 0x8208862C;
} // Block from 82088608h-8208862Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8208862Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208862C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208862C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208862C);
		  /* 8208862Ch */ case    0:  		/* li R3, 1 */
		/* 8208862Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8208862Ch case    0:*/		return 0x82088630;
	}
	return 0x82088630;
} // Block from 8208862Ch-82088630h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82088630h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088630);
		  /* 82088630h */ case    0:  		/* addi R1, R1, 96 */
		/* 82088630h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82088630h case    0:*/		return 0x82088634;
		  /* 82088634h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82088634h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82088634h case    1:*/		return 0x82088638;
		  /* 82088638h */ case    2:  		/* mtspr LR, R12 */
		/* 82088638h case    2:*/		regs.LR = regs.R12;
		/* 82088638h case    2:*/		return 0x8208863C;
		  /* 8208863Ch */ case    3:  		/* bclr 20, CR0_LT */
		/* 8208863Ch case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8208863Ch case    3:*/		return 0x82088640;
	}
	return 0x82088640;
} // Block from 82088630h-82088640h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82088640h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088640);
		  /* 82088640h */ case    0:  		/* mfspr R12, LR */
		/* 82088640h case    0:*/		regs.R12 = regs.LR;
		/* 82088640h case    0:*/		return 0x82088644;
		  /* 82088644h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82088644h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82088644h case    1:*/		return 0x82088648;
		  /* 82088648h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82088648h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82088648h case    2:*/		return 0x8208864C;
		  /* 8208864Ch */ case    3:  		/* stwu R1, <#[R1 - 112]> */
		/* 8208864Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8208864Ch case    3:*/		return 0x82088650;
		  /* 82088650h */ case    4:  		/* addi R5, R1, 80 */
		/* 82088650h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82088650h case    4:*/		return 0x82088654;
		  /* 82088654h */ case    5:  		/* mr R31, R3 */
		/* 82088654h case    5:*/		regs.R31 = regs.R3;
		/* 82088654h case    5:*/		return 0x82088658;
		  /* 82088658h */ case    6:  		/* bl 1985712 */
		/* 82088658h case    6:*/		regs.LR = 0x8208865C; return 0x8226D308;
		/* 82088658h case    6:*/		return 0x8208865C;
		  /* 8208865Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 8208865Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8208865Ch case    7:*/		return 0x82088660;
		  /* 82088660h */ case    8:  		/* bc 12, CR0_LT, 44 */
		/* 82088660h case    8:*/		if ( regs.CR[0].lt ) { return 0x8208868C;  }
		/* 82088660h case    8:*/		return 0x82088664;
		  /* 82088664h */ case    9:  		/* lwz R10, <#[R31 + 24]> */
		/* 82088664h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 82088664h case    9:*/		return 0x82088668;
		  /* 82088668h */ case   10:  		/* lwz R11, <#[R1 + 80]> */
		/* 82088668h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82088668h case   10:*/		return 0x8208866C;
		  /* 8208866Ch */ case   11:  		/* cmplw CR6, R11, R10 */
		/* 8208866Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8208866Ch case   11:*/		return 0x82088670;
		  /* 82088670h */ case   12:  		/* bc 4, CR6_EQ, 20 */
		/* 82088670h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82088684;  }
		/* 82088670h case   12:*/		return 0x82088674;
		  /* 82088674h */ case   13:  		/* li R11, 0 */
		/* 82088674h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82088674h case   13:*/		return 0x82088678;
		  /* 82088678h */ case   14:  		/* lis R3, -16384 */
		/* 82088678h case   14:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFFC000);
		/* 82088678h case   14:*/		return 0x8208867C;
		  /* 8208867Ch */ case   15:  		/* stw R11, <#[R1 + 80]> */
		/* 8208867Ch case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8208867Ch case   15:*/		return 0x82088680;
		  /* 82088680h */ case   16:  		/* ori R3, R3, 611 */
		/* 82088680h case   16:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x263);
		/* 82088680h case   16:*/		return 0x82088684;
	}
	return 0x82088684;
} // Block from 82088640h-82088684h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82088684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088684);
		  /* 82088684h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 82088684h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82088684h case    0:*/		return 0x82088688;
		  /* 82088688h */ case    1:  		/* bc 4, CR6_LT, 16 */
		/* 82088688h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82088698;  }
		/* 82088688h case    1:*/		return 0x8208868C;
	}
	return 0x8208868C;
} // Block from 82088684h-8208868Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8208868Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208868C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208868C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208868C);
		  /* 8208868Ch */ case    0:  		/* bl 8292 */
		/* 8208868Ch case    0:*/		regs.LR = 0x82088690; return 0x8208A6F0;
		/* 8208868Ch case    0:*/		return 0x82088690;
		  /* 82088690h */ case    1:  		/* li R3, 0 */
		/* 82088690h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82088690h case    1:*/		return 0x82088694;
		  /* 82088694h */ case    2:  		/* b 8 */
		/* 82088694h case    2:*/		return 0x8208869C;
		/* 82088694h case    2:*/		return 0x82088698;
	}
	return 0x82088698;
} // Block from 8208868Ch-82088698h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82088698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088698);
		  /* 82088698h */ case    0:  		/* mr R3, R11 */
		/* 82088698h case    0:*/		regs.R3 = regs.R11;
		/* 82088698h case    0:*/		return 0x8208869C;
	}
	return 0x8208869C;
} // Block from 82088698h-8208869Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8208869Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208869C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208869C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208869C);
		  /* 8208869Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 8208869Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8208869Ch case    0:*/		return 0x820886A0;
		  /* 820886A0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820886A0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820886A0h case    1:*/		return 0x820886A4;
		  /* 820886A4h */ case    2:  		/* mtspr LR, R12 */
		/* 820886A4h case    2:*/		regs.LR = regs.R12;
		/* 820886A4h case    2:*/		return 0x820886A8;
		  /* 820886A8h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 820886A8h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820886A8h case    3:*/		return 0x820886AC;
		  /* 820886ACh */ case    4:  		/* bclr 20, CR0_LT */
		/* 820886ACh case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820886ACh case    4:*/		return 0x820886B0;
	}
	return 0x820886B0;
} // Block from 8208869Ch-820886B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820886B0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820886B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820886B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820886B0);
		  /* 820886B0h */ case    0:  		/* mfspr R12, LR */
		/* 820886B0h case    0:*/		regs.R12 = regs.LR;
		/* 820886B0h case    0:*/		return 0x820886B4;
		  /* 820886B4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820886B4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820886B4h case    1:*/		return 0x820886B8;
		  /* 820886B8h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 820886B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 820886B8h case    2:*/		return 0x820886BC;
		  /* 820886BCh */ case    3:  		/* addi R6, R1, 80 */
		/* 820886BCh case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 820886BCh case    3:*/		return 0x820886C0;
		  /* 820886C0h */ case    4:  		/* li R5, 0 */
		/* 820886C0h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 820886C0h case    4:*/		return 0x820886C4;
		  /* 820886C4h */ case    5:  		/* li R4, 9 */
		/* 820886C4h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x9);
		/* 820886C4h case    5:*/		return 0x820886C8;
		  /* 820886C8h */ case    6:  		/* bl 1985616 */
		/* 820886C8h case    6:*/		regs.LR = 0x820886CC; return 0x8226D318;
		/* 820886C8h case    6:*/		return 0x820886CC;
		  /* 820886CCh */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 820886CCh case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820886CCh case    7:*/		return 0x820886D0;
		  /* 820886D0h */ case    8:  		/* bc 4, CR0_LT, 16 */
		/* 820886D0h case    8:*/		if ( !regs.CR[0].lt ) { return 0x820886E0;  }
		/* 820886D0h case    8:*/		return 0x820886D4;
		  /* 820886D4h */ case    9:  		/* bl 8220 */
		/* 820886D4h case    9:*/		regs.LR = 0x820886D8; return 0x8208A6F0;
		/* 820886D4h case    9:*/		return 0x820886D8;
		  /* 820886D8h */ case   10:  		/* li R3, 0 */
		/* 820886D8h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820886D8h case   10:*/		return 0x820886DC;
		  /* 820886DCh */ case   11:  		/* b 8 */
		/* 820886DCh case   11:*/		return 0x820886E4;
		/* 820886DCh case   11:*/		return 0x820886E0;
	}
	return 0x820886E0;
} // Block from 820886B0h-820886E0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 820886E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820886E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820886E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820886E0);
		  /* 820886E0h */ case    0:  		/* lwz R3, <#[R1 + 80]> */
		/* 820886E0h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 820886E0h case    0:*/		return 0x820886E4;
	}
	return 0x820886E4;
} // Block from 820886E0h-820886E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820886E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820886E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820886E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820886E4);
		  /* 820886E4h */ case    0:  		/* addi R1, R1, 96 */
		/* 820886E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 820886E4h case    0:*/		return 0x820886E8;
		  /* 820886E8h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820886E8h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820886E8h case    1:*/		return 0x820886EC;
		  /* 820886ECh */ case    2:  		/* mtspr LR, R12 */
		/* 820886ECh case    2:*/		regs.LR = regs.R12;
		/* 820886ECh case    2:*/		return 0x820886F0;
	}
	return 0x820886F0;
} // Block from 820886E4h-820886F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820886F0h
// Function '?PrintSourceReg@Disassembler@D3D@@AAAXHHHHHHHH_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820886F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820886F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820886F0);
		  /* 820886F0h */ case    0:  		/* bclr 20, CR0_LT */
		/* 820886F0h case    0:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820886F0h case    0:*/		return 0x820886F4;
	}
	return 0x820886F4;
} // Block from 820886F0h-820886F4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820886F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820886F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820886F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820886F4);
		  /* 820886F4h */ case    0:  		/* nop */
		/* 820886F4h case    0:*/		cpu::op::nop();
		/* 820886F4h case    0:*/		return 0x820886F8;
	}
	return 0x820886F8;
} // Block from 820886F4h-820886F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820886F8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820886F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820886F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820886F8);
		  /* 820886F8h */ case    0:  		/* mfspr R12, LR */
		/* 820886F8h case    0:*/		regs.R12 = regs.LR;
		/* 820886F8h case    0:*/		return 0x820886FC;
		  /* 820886FCh */ case    1:  		/* bl 35676 */
		/* 820886FCh case    1:*/		regs.LR = 0x82088700; return 0x82091258;
		/* 820886FCh case    1:*/		return 0x82088700;
		  /* 82088700h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82088700h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82088700h case    2:*/		return 0x82088704;
		  /* 82088704h */ case    3:  		/* mr R31, R4 */
		/* 82088704h case    3:*/		regs.R31 = regs.R4;
		/* 82088704h case    3:*/		return 0x82088708;
		  /* 82088708h */ case    4:  		/* mr R4, R3 */
		/* 82088708h case    4:*/		regs.R4 = regs.R3;
		/* 82088708h case    4:*/		return 0x8208870C;
		  /* 8208870Ch */ case    5:  		/* addi R3, R1, 88 */
		/* 8208870Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x58);
		/* 8208870Ch case    5:*/		return 0x82088710;
		  /* 82088710h */ case    6:  		/* mr R29, R5 */
		/* 82088710h case    6:*/		regs.R29 = regs.R5;
		/* 82088710h case    6:*/		return 0x82088714;
		  /* 82088714h */ case    7:  		/* mr R28, R6 */
		/* 82088714h case    7:*/		regs.R28 = regs.R6;
		/* 82088714h case    7:*/		return 0x82088718;
		  /* 82088718h */ case    8:  		/* bl 1985248 */
		/* 82088718h case    8:*/		regs.LR = 0x8208871C; return 0x8226D1F8;
		/* 82088718h case    8:*/		return 0x8208871C;
		  /* 8208871Ch */ case    9:  		/* li R11, -3 */
		/* 8208871Ch case    9:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFD);
		/* 8208871Ch case    9:*/		return 0x82088720;
		  /* 82088720h */ case   10:  		/* li R10, 64 */
		/* 82088720h case   10:*/		cpu::op::li<0>(regs,&regs.R10,0x40);
		/* 82088720h case   10:*/		return 0x82088724;
		  /* 82088724h */ case   11:  		/* addi R9, R1, 88 */
		/* 82088724h case   11:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x58);
		/* 82088724h case   11:*/		return 0x82088728;
		  /* 82088728h */ case   12:  		/* stw R11, <#[R1 + 104]> */
		/* 82088728h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 82088728h case   12:*/		return 0x8208872C;
		  /* 8208872Ch */ case   13:  		/* stw R10, <#[R1 + 112]> */
		/* 8208872Ch case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 8208872Ch case   13:*/		return 0x82088730;
		  /* 82088730h */ case   14:  		/* lis R8, 128 */
		/* 82088730h case   14:*/		cpu::op::lis<0>(regs,&regs.R8,0x80);
		/* 82088730h case   14:*/		return 0x82088734;
		  /* 82088734h */ case   15:  		/* stw R9, <#[R1 + 108]> */
		/* 82088734h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000006C) );
		/* 82088734h case   15:*/		return 0x82088738;
		  /* 82088738h */ case   16:  		/* lis R4, 16 */
		/* 82088738h case   16:*/		cpu::op::lis<0>(regs,&regs.R4,0x10);
		/* 82088738h case   16:*/		return 0x8208873C;
		  /* 8208873Ch */ case   17:  		/* ori R8, R8, 33 */
		/* 8208873Ch case   17:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x21);
		/* 8208873Ch case   17:*/		return 0x82088740;
		  /* 82088740h */ case   18:  		/* li R7, 3 */
		/* 82088740h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 82088740h case   18:*/		return 0x82088744;
		  /* 82088744h */ case   19:  		/* addi R6, R1, 96 */
		/* 82088744h case   19:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x60);
		/* 82088744h case   19:*/		return 0x82088748;
		  /* 82088748h */ case   20:  		/* addi R5, R1, 104 */
		/* 82088748h case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x68);
		/* 82088748h case   20:*/		return 0x8208874C;
		  /* 8208874Ch */ case   21:  		/* ori R4, R4, 1 */
		/* 8208874Ch case   21:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x1);
		/* 8208874Ch case   21:*/		return 0x82088750;
		  /* 82088750h */ case   22:  		/* addi R3, R1, 80 */
		/* 82088750h case   22:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82088750h case   22:*/		return 0x82088754;
		  /* 82088754h */ case   23:  		/* bl 1985508 */
		/* 82088754h case   23:*/		regs.LR = 0x82088758; return 0x8226D338;
		/* 82088754h case   23:*/		return 0x82088758;
		  /* 82088758h */ case   24:  		/* cmpwi CR0, R3, 0 */
		/* 82088758h case   24:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82088758h case   24:*/		return 0x8208875C;
		  /* 8208875Ch */ case   25:  		/* bc 4, CR0_LT, 36 */
		/* 8208875Ch case   25:*/		if ( !regs.CR[0].lt ) { return 0x82088780;  }
		/* 8208875Ch case   25:*/		return 0x82088760;
		  /* 82088760h */ case   26:  		/* bl 8128 */
		/* 82088760h case   26:*/		regs.LR = 0x82088764; return 0x8208A720;
		/* 82088760h case   26:*/		return 0x82088764;
		  /* 82088764h */ case   27:  		/* bl 8092 */
		/* 82088764h case   27:*/		regs.LR = 0x82088768; return 0x8208A700;
		/* 82088764h case   27:*/		return 0x82088768;
		  /* 82088768h */ case   28:  		/* cmplwi CR6, R3, 2 */
		/* 82088768h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000002);
		/* 82088768h case   28:*/		return 0x8208876C;
		  /* 8208876Ch */ case   29:  		/* bc 4, CR6_EQ, 12 */
		/* 8208876Ch case   29:*/		if ( !regs.CR[6].eq ) { return 0x82088778;  }
		/* 8208876Ch case   29:*/		return 0x82088770;
		  /* 82088770h */ case   30:  		/* li R3, 3 */
		/* 82088770h case   30:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 82088770h case   30:*/		return 0x82088774;
		  /* 82088774h */ case   31:  		/* bl 8068 */
		/* 82088774h case   31:*/		regs.LR = 0x82088778; return 0x8208A6F8;
		/* 82088774h case   31:*/		return 0x82088778;
	}
	return 0x82088778;
} // Block from 820886F8h-82088778h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82088778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088778);
		  /* 82088778h */ case    0:  		/* li R3, 0 */
		/* 82088778h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82088778h case    0:*/		return 0x8208877C;
		  /* 8208877Ch */ case    1:  		/* b 132 */
		/* 8208877Ch case    1:*/		return 0x82088800;
		/* 8208877Ch case    1:*/		return 0x82088780;
	}
	return 0x82088780;
} // Block from 82088778h-82088780h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82088780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088780);
		  /* 82088780h */ case    0:  		/* li R7, 3 */
		/* 82088780h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 82088780h case    0:*/		return 0x82088784;
		  /* 82088784h */ case    1:  		/* lwz R3, <#[R1 + 80]> */
		/* 82088784h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 82088784h case    1:*/		return 0x82088788;
		  /* 82088788h */ case    2:  		/* li R6, 24 */
		/* 82088788h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x18);
		/* 82088788h case    2:*/		return 0x8208878C;
		  /* 8208878Ch */ case    3:  		/* addi R5, R1, 128 */
		/* 8208878Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 8208878Ch case    3:*/		return 0x82088790;
		  /* 82088790h */ case    4:  		/* addi R4, R1, 96 */
		/* 82088790h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 82088790h case    4:*/		return 0x82088794;
		  /* 82088794h */ case    5:  		/* bl 1985428 */
		/* 82088794h case    5:*/		regs.LR = 0x82088798; return 0x8226D328;
		/* 82088794h case    5:*/		return 0x82088798;
		  /* 82088798h */ case    6:  		/* mr R30, R3 */
		/* 82088798h case    6:*/		regs.R30 = regs.R3;
		/* 82088798h case    6:*/		return 0x8208879C;
		  /* 8208879Ch */ case    7:  		/* lwz R3, <#[R1 + 80]> */
		/* 8208879Ch case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 8208879Ch case    7:*/		return 0x820887A0;
		  /* 820887A0h */ case    8:  		/* bl 1985272 */
		/* 820887A0h case    8:*/		regs.LR = 0x820887A4; return 0x8226D298;
		/* 820887A0h case    8:*/		return 0x820887A4;
		  /* 820887A4h */ case    9:  		/* cmpwi CR6, R30, 0 */
		/* 820887A4h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 820887A4h case    9:*/		return 0x820887A8;
		  /* 820887A8h */ case   10:  		/* bc 4, CR6_LT, 16 */
		/* 820887A8h case   10:*/		if ( !regs.CR[6].lt ) { return 0x820887B8;  }
		/* 820887A8h case   10:*/		return 0x820887AC;
		  /* 820887ACh */ case   11:  		/* mr R3, R30 */
		/* 820887ACh case   11:*/		regs.R3 = regs.R30;
		/* 820887ACh case   11:*/		return 0x820887B0;
		  /* 820887B0h */ case   12:  		/* bl 8048 */
		/* 820887B0h case   12:*/		regs.LR = 0x820887B4; return 0x8208A720;
		/* 820887B0h case   12:*/		return 0x820887B4;
		  /* 820887B4h */ case   13:  		/* b -60 */
		/* 820887B4h case   13:*/		return 0x82088778;
		/* 820887B4h case   13:*/		return 0x820887B8;
	}
	return 0x820887B8;
} // Block from 82088780h-820887B8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820887B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820887B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820887B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820887B8);
		  /* 820887B8h */ case    0:  		/* lwz R10, <#[R1 + 144]> */
		/* 820887B8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000090) );
		/* 820887B8h case    0:*/		return 0x820887BC;
		  /* 820887BCh */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 820887BCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 820887BCh case    1:*/		return 0x820887C0;
		  /* 820887C0h */ case    2:  		/* lwz R11, <#[R1 + 148]> */
		/* 820887C0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 820887C0h case    2:*/		return 0x820887C4;
		  /* 820887C4h */ case    3:  		/* ld R9, <#[R1 + 136]> */
		/* 820887C4h case    3:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R1 + 0x00000088) );
		/* 820887C4h case    3:*/		return 0x820887C8;
		  /* 820887C8h */ case    4:  		/* mullw R11, R10, R11 */
		/* 820887C8h case    4:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 820887C8h case    4:*/		return 0x820887CC;
		  /* 820887CCh */ case    5:  		/* ld R10, <#[R1 + 128]> */
		/* 820887CCh case    5:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R1 + 0x00000080) );
		/* 820887CCh case    5:*/		return 0x820887D0;
		  /* 820887D0h */ case    6:  		/* rldicl R8, R11, 0, 32 */
		/* 820887D0h case    6:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R8,regs.R11);
		/* 820887D0h case    6:*/		return 0x820887D4;
		  /* 820887D4h */ case    7:  		/* mulld R11, R9, R8 */
		/* 820887D4h case    7:*/		cpu::op::mulld<0>(regs,&regs.R11,regs.R9,regs.R8);
		/* 820887D4h case    7:*/		return 0x820887D8;
		  /* 820887D8h */ case    8:  		/* mulld R10, R10, R8 */
		/* 820887D8h case    8:*/		cpu::op::mulld<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 820887D8h case    8:*/		return 0x820887DC;
		  /* 820887DCh */ case    9:  		/* bc 12, CR6_EQ, 8 */
		/* 820887DCh case    9:*/		if ( regs.CR[6].eq ) { return 0x820887E4;  }
		/* 820887DCh case    9:*/		return 0x820887E0;
		  /* 820887E0h */ case   10:  		/* std R11, <#[R31]> */
		/* 820887E0h case   10:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 820887E0h case   10:*/		return 0x820887E4;
	}
	return 0x820887E4;
} // Block from 820887B8h-820887E4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 820887E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820887E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820887E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820887E4);
		  /* 820887E4h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 820887E4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 820887E4h case    0:*/		return 0x820887E8;
		  /* 820887E8h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 820887E8h case    1:*/		if ( regs.CR[6].eq ) { return 0x820887F0;  }
		/* 820887E8h case    1:*/		return 0x820887EC;
		  /* 820887ECh */ case    2:  		/* std R10, <#[R29]> */
		/* 820887ECh case    2:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 820887ECh case    2:*/		return 0x820887F0;
	}
	return 0x820887F0;
} // Block from 820887E4h-820887F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820887F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820887F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820887F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820887F0);
		  /* 820887F0h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 820887F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 820887F0h case    0:*/		return 0x820887F4;
		  /* 820887F4h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 820887F4h case    1:*/		if ( regs.CR[6].eq ) { return 0x820887FC;  }
		/* 820887F4h case    1:*/		return 0x820887F8;
		  /* 820887F8h */ case    2:  		/* std R11, <#[R28]> */
		/* 820887F8h case    2:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 820887F8h case    2:*/		return 0x820887FC;
	}
	return 0x820887FC;
} // Block from 820887F0h-820887FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 820887FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820887FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820887FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820887FC);
		  /* 820887FCh */ case    0:  		/* li R3, 1 */
		/* 820887FCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820887FCh case    0:*/		return 0x82088800;
	}
	return 0x82088800;
} // Block from 820887FCh-82088800h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82088800h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088800);
		  /* 82088800h */ case    0:  		/* addi R1, R1, 192 */
		/* 82088800h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82088800h case    0:*/		return 0x82088804;
		  /* 82088804h */ case    1:  		/* b 35492 */
		/* 82088804h case    1:*/		return 0x820912A8;
		/* 82088804h case    1:*/		return 0x82088808;
	}
	return 0x82088808;
} // Block from 82088800h-82088808h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82088808h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088808);
		  /* 82088808h */ case    0:  		/* mfspr R12, LR */
		/* 82088808h case    0:*/		regs.R12 = regs.LR;
		/* 82088808h case    0:*/		return 0x8208880C;
		  /* 8208880Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8208880Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208880Ch case    1:*/		return 0x82088810;
		  /* 82088810h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 82088810h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82088810h case    2:*/		return 0x82088814;
		  /* 82088814h */ case    3:  		/* lis R11, -32217 */
		/* 82088814h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82088814h case    3:*/		return 0x82088818;
		  /* 82088818h */ case    4:  		/* lwz R11, <#[R11 + 6896]> */
		/* 82088818h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00001AF0) );
		/* 82088818h case    4:*/		return 0x8208881C;
		  /* 8208881Ch */ case    5:  		/* lwz R11, <#[R11 + 4]> */
		/* 8208881Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8208881Ch case    5:*/		return 0x82088820;
		  /* 82088820h */ case    6:  		/* mtspr CTR, R11 */
		/* 82088820h case    6:*/		regs.CTR = regs.R11;
		/* 82088820h case    6:*/		return 0x82088824;
		  /* 82088824h */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 82088824h case    7:*/		if ( 1 ) { regs.LR = 0x82088828; return (uint32)regs.CTR; }
		/* 82088824h case    7:*/		return 0x82088828;
		  /* 82088828h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 82088828h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82088828h case    8:*/		return 0x8208882C;
		  /* 8208882Ch */ case    9:  		/* bc 12, CR0_LT, 12 */
		/* 8208882Ch case    9:*/		if ( regs.CR[0].lt ) { return 0x82088838;  }
		/* 8208882Ch case    9:*/		return 0x82088830;
		  /* 82088830h */ case   10:  		/* li R3, 1 */
		/* 82088830h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82088830h case   10:*/		return 0x82088834;
		  /* 82088834h */ case   11:  		/* b 12 */
		/* 82088834h case   11:*/		return 0x82088840;
		/* 82088834h case   11:*/		return 0x82088838;
	}
	return 0x82088838;
} // Block from 82088808h-82088838h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82088838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088838);
		  /* 82088838h */ case    0:  		/* bl 7912 */
		/* 82088838h case    0:*/		regs.LR = 0x8208883C; return 0x8208A720;
		/* 82088838h case    0:*/		return 0x8208883C;
		  /* 8208883Ch */ case    1:  		/* li R3, 0 */
		/* 8208883Ch case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8208883Ch case    1:*/		return 0x82088840;
	}
	return 0x82088840;
} // Block from 82088838h-82088840h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82088840h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088840);
		  /* 82088840h */ case    0:  		/* addi R1, R1, 96 */
		/* 82088840h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82088840h case    0:*/		return 0x82088844;
		  /* 82088844h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82088844h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82088844h case    1:*/		return 0x82088848;
		  /* 82088848h */ case    2:  		/* mtspr LR, R12 */
		/* 82088848h case    2:*/		regs.LR = regs.R12;
		/* 82088848h case    2:*/		return 0x8208884C;
		  /* 8208884Ch */ case    3:  		/* bclr 20, CR0_LT */
		/* 8208884Ch case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8208884Ch case    3:*/		return 0x82088850;
	}
	return 0x82088850;
} // Block from 82088840h-82088850h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82088850h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088850);
		  /* 82088850h */ case    0:  		/* mfspr R12, LR */
		/* 82088850h case    0:*/		regs.R12 = regs.LR;
		/* 82088850h case    0:*/		return 0x82088854;
		  /* 82088854h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82088854h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82088854h case    1:*/		return 0x82088858;
		  /* 82088858h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82088858h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82088858h case    2:*/		return 0x8208885C;
		  /* 8208885Ch */ case    3:  		/* stwu R1, <#[R1 - 128]> */
		/* 8208885Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8208885Ch case    3:*/		return 0x82088860;
		  /* 82088860h */ case    4:  		/* li R7, 14 */
		/* 82088860h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0xE);
		/* 82088860h case    4:*/		return 0x82088864;
		  /* 82088864h */ case    5:  		/* li R6, 8 */
		/* 82088864h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x8);
		/* 82088864h case    5:*/		return 0x82088868;
		  /* 82088868h */ case    6:  		/* addi R5, R1, 80 */
		/* 82088868h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82088868h case    6:*/		return 0x8208886C;
		  /* 8208886Ch */ case    7:  		/* addi R4, R1, 88 */
		/* 8208886Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x58);
		/* 8208886Ch case    7:*/		return 0x82088870;
		  /* 82088870h */ case    8:  		/* mr R31, R3 */
		/* 82088870h case    8:*/		regs.R31 = regs.R3;
		/* 82088870h case    8:*/		return 0x82088874;
		  /* 82088874h */ case    9:  		/* bl 1985252 */
		/* 82088874h case    9:*/		regs.LR = 0x82088878; return 0x8226D358;
		/* 82088874h case    9:*/		return 0x82088878;
		  /* 82088878h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 82088878h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82088878h case   10:*/		return 0x8208887C;
		  /* 8208887Ch */ case   11:  		/* bc 12, CR0_LT, 92 */
		/* 8208887Ch case   11:*/		if ( regs.CR[0].lt ) { return 0x820888D8;  }
		/* 8208887Ch case   11:*/		return 0x82088880;
		  /* 82088880h */ case   12:  		/* ld R11, <#[R1 + 80]> */
		/* 82088880h case   12:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82088880h case   12:*/		return 0x82088884;
		  /* 82088884h */ case   13:  		/* li R7, 20 */
		/* 82088884h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x14);
		/* 82088884h case   13:*/		return 0x82088888;
		  /* 82088888h */ case   14:  		/* li R6, 8 */
		/* 82088888h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x8);
		/* 82088888h case   14:*/		return 0x8208888C;
		  /* 8208888Ch */ case   15:  		/* addi R5, R1, 96 */
		/* 8208888Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 8208888Ch case   15:*/		return 0x82088890;
		  /* 82088890h */ case   16:  		/* addi R4, R1, 88 */
		/* 82088890h case   16:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x58);
		/* 82088890h case   16:*/		return 0x82088894;
		  /* 82088894h */ case   17:  		/* mr R3, R31 */
		/* 82088894h case   17:*/		regs.R3 = regs.R31;
		/* 82088894h case   17:*/		return 0x82088898;
		  /* 82088898h */ case   18:  		/* std R11, <#[R1 + 96]> */
		/* 82088898h case   18:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 82088898h case   18:*/		return 0x8208889C;
		  /* 8208889Ch */ case   19:  		/* bl 1985196 */
		/* 8208889Ch case   19:*/		regs.LR = 0x820888A0; return 0x8226D348;
		/* 8208889Ch case   19:*/		return 0x820888A0;
		  /* 820888A0h */ case   20:  		/* cmpwi CR0, R3, 0 */
		/* 820888A0h case   20:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820888A0h case   20:*/		return 0x820888A4;
		  /* 820888A4h */ case   21:  		/* bc 12, CR0_LT, 52 */
		/* 820888A4h case   21:*/		if ( regs.CR[0].lt ) { return 0x820888D8;  }
		/* 820888A4h case   21:*/		return 0x820888A8;
		  /* 820888A8h */ case   22:  		/* ld R11, <#[R1 + 80]> */
		/* 820888A8h case   22:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 820888A8h case   22:*/		return 0x820888AC;
		  /* 820888ACh */ case   23:  		/* li R7, 19 */
		/* 820888ACh case   23:*/		cpu::op::li<0>(regs,&regs.R7,0x13);
		/* 820888ACh case   23:*/		return 0x820888B0;
		  /* 820888B0h */ case   24:  		/* li R6, 8 */
		/* 820888B0h case   24:*/		cpu::op::li<0>(regs,&regs.R6,0x8);
		/* 820888B0h case   24:*/		return 0x820888B4;
		  /* 820888B4h */ case   25:  		/* addi R5, R1, 104 */
		/* 820888B4h case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x68);
		/* 820888B4h case   25:*/		return 0x820888B8;
		  /* 820888B8h */ case   26:  		/* addi R4, R1, 88 */
		/* 820888B8h case   26:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x58);
		/* 820888B8h case   26:*/		return 0x820888BC;
		  /* 820888BCh */ case   27:  		/* mr R3, R31 */
		/* 820888BCh case   27:*/		regs.R3 = regs.R31;
		/* 820888BCh case   27:*/		return 0x820888C0;
		  /* 820888C0h */ case   28:  		/* std R11, <#[R1 + 104]> */
		/* 820888C0h case   28:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 820888C0h case   28:*/		return 0x820888C4;
		  /* 820888C4h */ case   29:  		/* bl 1985156 */
		/* 820888C4h case   29:*/		regs.LR = 0x820888C8; return 0x8226D348;
		/* 820888C4h case   29:*/		return 0x820888C8;
		  /* 820888C8h */ case   30:  		/* cmpwi CR0, R3, 0 */
		/* 820888C8h case   30:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820888C8h case   30:*/		return 0x820888CC;
		  /* 820888CCh */ case   31:  		/* bc 12, CR0_LT, 12 */
		/* 820888CCh case   31:*/		if ( regs.CR[0].lt ) { return 0x820888D8;  }
		/* 820888CCh case   31:*/		return 0x820888D0;
		  /* 820888D0h */ case   32:  		/* li R3, 1 */
		/* 820888D0h case   32:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 820888D0h case   32:*/		return 0x820888D4;
		  /* 820888D4h */ case   33:  		/* b 12 */
		/* 820888D4h case   33:*/		return 0x820888E0;
		/* 820888D4h case   33:*/		return 0x820888D8;
	}
	return 0x820888D8;
} // Block from 82088850h-820888D8h (34 instructions)

//////////////////////////////////////////////////////
// Block at 820888D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820888D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820888D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820888D8);
		  /* 820888D8h */ case    0:  		/* bl 7752 */
		/* 820888D8h case    0:*/		regs.LR = 0x820888DC; return 0x8208A720;
		/* 820888D8h case    0:*/		return 0x820888DC;
		  /* 820888DCh */ case    1:  		/* li R3, 0 */
		/* 820888DCh case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820888DCh case    1:*/		return 0x820888E0;
	}
	return 0x820888E0;
} // Block from 820888D8h-820888E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 820888E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820888E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820888E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820888E0);
		  /* 820888E0h */ case    0:  		/* addi R1, R1, 128 */
		/* 820888E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820888E0h case    0:*/		return 0x820888E4;
		  /* 820888E4h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820888E4h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820888E4h case    1:*/		return 0x820888E8;
		  /* 820888E8h */ case    2:  		/* mtspr LR, R12 */
		/* 820888E8h case    2:*/		regs.LR = regs.R12;
		/* 820888E8h case    2:*/		return 0x820888EC;
		  /* 820888ECh */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 820888ECh case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820888ECh case    3:*/		return 0x820888F0;
		  /* 820888F0h */ case    4:  		/* bclr 20, CR0_LT */
		/* 820888F0h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820888F0h case    4:*/		return 0x820888F4;
	}
	return 0x820888F4;
} // Block from 820888E0h-820888F4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820888F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820888F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820888F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820888F4);
		  /* 820888F4h */ case    0:  		/* nop */
		/* 820888F4h case    0:*/		cpu::op::nop();
		/* 820888F4h case    0:*/		return 0x820888F8;
	}
	return 0x820888F8;
} // Block from 820888F4h-820888F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820888F8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820888F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820888F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820888F8);
		  /* 820888F8h */ case    0:  		/* mfspr R12, LR */
		/* 820888F8h case    0:*/		regs.R12 = regs.LR;
		/* 820888F8h case    0:*/		return 0x820888FC;
		  /* 820888FCh */ case    1:  		/* bl 35164 */
		/* 820888FCh case    1:*/		regs.LR = 0x82088900; return 0x82091258;
		/* 820888FCh case    1:*/		return 0x82088900;
		  /* 82088900h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82088900h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82088900h case    2:*/		return 0x82088904;
		  /* 82088904h */ case    3:  		/* mr R29, R3 */
		/* 82088904h case    3:*/		regs.R29 = regs.R3;
		/* 82088904h case    3:*/		return 0x82088908;
		  /* 82088908h */ case    4:  		/* mr R28, R5 */
		/* 82088908h case    4:*/		regs.R28 = regs.R5;
		/* 82088908h case    4:*/		return 0x8208890C;
		  /* 8208890Ch */ case    5:  		/* cmplwi CR6, R5, 0 */
		/* 8208890Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8208890Ch case    5:*/		return 0x82088910;
		  /* 82088910h */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 82088910h case    6:*/		if ( regs.CR[6].eq ) { return 0x82088928;  }
		/* 82088910h case    6:*/		return 0x82088914;
		  /* 82088914h */ case    7:  		/* lwz R11, <#[R5]> */
		/* 82088914h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 82088914h case    7:*/		return 0x82088918;
		  /* 82088918h */ case    8:  		/* stw R4, <#[R1 + 84]> */
		/* 82088918h case    8:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000054) );
		/* 82088918h case    8:*/		return 0x8208891C;
		  /* 8208891Ch */ case    9:  		/* stw R11, <#[R1 + 80]> */
		/* 8208891Ch case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8208891Ch case    9:*/		return 0x82088920;
		  /* 82088920h */ case   10:  		/* ld R30, <#[R1 + 80]> */
		/* 82088920h case   10:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0x00000050) );
		/* 82088920h case   10:*/		return 0x82088924;
		  /* 82088924h */ case   11:  		/* b 8 */
		/* 82088924h case   11:*/		return 0x8208892C;
		/* 82088924h case   11:*/		return 0x82088928;
	}
	return 0x82088928;
} // Block from 820888F8h-82088928h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82088928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088928);
		  /* 82088928h */ case    0:  		/* extsw R30, R4 */
		/* 82088928h case    0:*/		cpu::op::extsw<0>(regs,&regs.R30,regs.R4);
		/* 82088928h case    0:*/		return 0x8208892C;
	}
	return 0x8208892C;
} // Block from 82088928h-8208892Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8208892Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208892C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208892C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208892C);
		  /* 8208892Ch */ case    0:  		/* lis R31, -32217 */
		/* 8208892Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8227);
		/* 8208892Ch case    0:*/		return 0x82088930;
		  /* 82088930h */ case    1:  		/* cmplwi CR6, R6, 1 */
		/* 82088930h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000001);
		/* 82088930h case    1:*/		return 0x82088934;
		  /* 82088934h */ case    2:  		/* bc 12, CR6_LT, 132 */
		/* 82088934h case    2:*/		if ( regs.CR[6].lt ) { return 0x820889B8;  }
		/* 82088934h case    2:*/		return 0x82088938;
		  /* 82088938h */ case    3:  		/* bc 12, CR6_EQ, 76 */
		/* 82088938h case    3:*/		if ( regs.CR[6].eq ) { return 0x82088984;  }
		/* 82088938h case    3:*/		return 0x8208893C;
		  /* 8208893Ch */ case    4:  		/* cmplwi CR6, R6, 3 */
		/* 8208893Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000003);
		/* 8208893Ch case    4:*/		return 0x82088940;
		  /* 82088940h */ case    5:  		/* bc 4, CR6_LT, 68 */
		/* 82088940h case    5:*/		if ( !regs.CR[6].lt ) { return 0x82088984;  }
		/* 82088940h case    5:*/		return 0x82088944;
		  /* 82088944h */ case    6:  		/* lwz R11, <#[R31 + 6896]> */
		/* 82088944h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00001AF0) );
		/* 82088944h case    6:*/		return 0x82088948;
		  /* 82088948h */ case    7:  		/* li R7, 34 */
		/* 82088948h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x22);
		/* 82088948h case    7:*/		return 0x8208894C;
		  /* 8208894Ch */ case    8:  		/* li R6, 56 */
		/* 8208894Ch case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x38);
		/* 8208894Ch case    8:*/		return 0x82088950;
		  /* 82088950h */ case    9:  		/* addi R5, R1, 96 */
		/* 82088950h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 82088950h case    9:*/		return 0x82088954;
		  /* 82088954h */ case   10:  		/* addi R4, R1, 88 */
		/* 82088954h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x58);
		/* 82088954h case   10:*/		return 0x82088958;
		  /* 82088958h */ case   11:  		/* mr R3, R29 */
		/* 82088958h case   11:*/		regs.R3 = regs.R29;
		/* 82088958h case   11:*/		return 0x8208895C;
		  /* 8208895Ch */ case   12:  		/* lwz R11, <#[R11 + 32]> */
		/* 8208895Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 8208895Ch case   12:*/		return 0x82088960;
		  /* 82088960h */ case   13:  		/* mtspr CTR, R11 */
		/* 82088960h case   13:*/		regs.CTR = regs.R11;
		/* 82088960h case   13:*/		return 0x82088964;
		  /* 82088964h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82088964h case   14:*/		if ( 1 ) { regs.LR = 0x82088968; return (uint32)regs.CTR; }
		/* 82088964h case   14:*/		return 0x82088968;
		  /* 82088968h */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 82088968h case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82088968h case   15:*/		return 0x8208896C;
		  /* 8208896Ch */ case   16:  		/* bc 4, CR0_LT, 12 */
		/* 8208896Ch case   16:*/		if ( !regs.CR[0].lt ) { return 0x82088978;  }
		/* 8208896Ch case   16:*/		return 0x82088970;
		  /* 82088970h */ case   17:  		/* bl 7600 */
		/* 82088970h case   17:*/		regs.LR = 0x82088974; return 0x8208A720;
		/* 82088970h case   17:*/		return 0x82088974;
		  /* 82088974h */ case   18:  		/* b 232 */
		/* 82088974h case   18:*/		return 0x82088A5C;
		/* 82088974h case   18:*/		return 0x82088978;
	}
	return 0x82088978;
} // Block from 8208892Ch-82088978h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82088978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088978);
		  /* 82088978h */ case    0:  		/* ld R11, <#[R1 + 136]> */
		/* 82088978h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 82088978h case    0:*/		return 0x8208897C;
		  /* 8208897Ch */ case    1:  		/* add R11, R11, R30 */
		/* 8208897Ch case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8208897Ch case    1:*/		return 0x82088980;
		  /* 82088980h */ case    2:  		/* b 60 */
		/* 82088980h case    2:*/		return 0x820889BC;
		/* 82088980h case    2:*/		return 0x82088984;
	}
	return 0x82088984;
} // Block from 82088978h-82088984h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82088984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088984);
		  /* 82088984h */ case    0:  		/* lwz R11, <#[R31 + 6896]> */
		/* 82088984h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00001AF0) );
		/* 82088984h case    0:*/		return 0x82088988;
		  /* 82088988h */ case    1:  		/* li R7, 14 */
		/* 82088988h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0xE);
		/* 82088988h case    1:*/		return 0x8208898C;
		  /* 8208898Ch */ case    2:  		/* li R6, 8 */
		/* 8208898Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x8);
		/* 8208898Ch case    2:*/		return 0x82088990;
		  /* 82088990h */ case    3:  		/* addi R5, R1, 80 */
		/* 82088990h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82088990h case    3:*/		return 0x82088994;
		  /* 82088994h */ case    4:  		/* addi R4, R1, 88 */
		/* 82088994h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x58);
		/* 82088994h case    4:*/		return 0x82088998;
		  /* 82088998h */ case    5:  		/* mr R3, R29 */
		/* 82088998h case    5:*/		regs.R3 = regs.R29;
		/* 82088998h case    5:*/		return 0x8208899C;
		  /* 8208899Ch */ case    6:  		/* lwz R11, <#[R11 + 32]> */
		/* 8208899Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 8208899Ch case    6:*/		return 0x820889A0;
		  /* 820889A0h */ case    7:  		/* mtspr CTR, R11 */
		/* 820889A0h case    7:*/		regs.CTR = regs.R11;
		/* 820889A0h case    7:*/		return 0x820889A4;
		  /* 820889A4h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 820889A4h case    8:*/		if ( 1 ) { regs.LR = 0x820889A8; return (uint32)regs.CTR; }
		/* 820889A4h case    8:*/		return 0x820889A8;
		  /* 820889A8h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 820889A8h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 820889A8h case    9:*/		return 0x820889AC;
		  /* 820889ACh */ case   10:  		/* bc 12, CR0_LT, -60 */
		/* 820889ACh case   10:*/		if ( regs.CR[0].lt ) { return 0x82088970;  }
		/* 820889ACh case   10:*/		return 0x820889B0;
		  /* 820889B0h */ case   11:  		/* ld R11, <#[R1 + 80]> */
		/* 820889B0h case   11:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 820889B0h case   11:*/		return 0x820889B4;
		  /* 820889B4h */ case   12:  		/* b -56 */
		/* 820889B4h case   12:*/		return 0x8208897C;
		/* 820889B4h case   12:*/		return 0x820889B8;
	}
	return 0x820889B8;
} // Block from 82088984h-820889B8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 820889B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820889B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820889B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820889B8);
		  /* 820889B8h */ case    0:  		/* mr R11, R30 */
		/* 820889B8h case    0:*/		regs.R11 = regs.R30;
		/* 820889B8h case    0:*/		return 0x820889BC;
	}
	return 0x820889BC;
} // Block from 820889B8h-820889BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 820889BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820889BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820889BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820889BC);
		  /* 820889BCh */ case    0:  		/* std R11, <#[R1 + 80]> */
		/* 820889BCh case    0:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 820889BCh case    0:*/		return 0x820889C0;
	}
	return 0x820889C0;
} // Block from 820889BCh-820889C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820889C0h
// Function '?PrintInternalKonstantReg@Disassembler@D3D@@AAAXHHH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820889C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820889C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820889C0);
		  /* 820889C0h */ case    0:  		/* cmpdi CR6, R11, 0 */
		/* 820889C0h case    0:*/		cpu::op::cmpdi<6>(regs,regs.R11,0x00000000);
		/* 820889C0h case    0:*/		return 0x820889C4;
		  /* 820889C4h */ case    1:  		/* bc 4, CR6_LT, 16 */
		/* 820889C4h case    1:*/		if ( !regs.CR[6].lt ) { return 0x820889D4;  }
		/* 820889C4h case    1:*/		return 0x820889C8;
		  /* 820889C8h */ case    2:  		/* li R3, 131 */
		/* 820889C8h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x83);
		/* 820889C8h case    2:*/		return 0x820889CC;
		  /* 820889CCh */ case    3:  		/* bl 7484 */
		/* 820889CCh case    3:*/		regs.LR = 0x820889D0; return 0x8208A708;
		/* 820889CCh case    3:*/		return 0x820889D0;
		  /* 820889D0h */ case    4:  		/* b 140 */
		/* 820889D0h case    4:*/		return 0x82088A5C;
		/* 820889D0h case    4:*/		return 0x820889D4;
	}
	return 0x820889D4;
} // Block from 820889C0h-820889D4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820889D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820889D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820889D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820889D4);
		  /* 820889D4h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 820889D4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 820889D4h case    0:*/		return 0x820889D8;
		  /* 820889D8h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 820889D8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820889F0;  }
		/* 820889D8h case    1:*/		return 0x820889DC;
		  /* 820889DCh */ case    2:  		/* lwz R11, <#[R1 + 80]> */
		/* 820889DCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 820889DCh case    2:*/		return 0x820889E0;
		  /* 820889E0h */ case    3:  		/* rlwinm. R11, R11, 0, 1, 31 */
		/* 820889E0h case    3:*/		cpu::op::rlwinm<1,0,1,31>(regs,&regs.R11,regs.R11);
		/* 820889E0h case    3:*/		return 0x820889E4;
		  /* 820889E4h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 820889E4h case    4:*/		if ( regs.CR[0].eq ) { return 0x820889F0;  }
		/* 820889E4h case    4:*/		return 0x820889E8;
		  /* 820889E8h */ case    5:  		/* li R3, 87 */
		/* 820889E8h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x57);
		/* 820889E8h case    5:*/		return 0x820889EC;
		  /* 820889ECh */ case    6:  		/* b -32 */
		/* 820889ECh case    6:*/		return 0x820889CC;
		/* 820889ECh case    6:*/		return 0x820889F0;
	}
	return 0x820889F0;
} // Block from 820889D4h-820889F0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 820889F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820889F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820889F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820889F0);
		  /* 820889F0h */ case    0:  		/* lwz R11, <#[R31 + 6896]> */
		/* 820889F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00001AF0) );
		/* 820889F0h case    0:*/		return 0x820889F4;
		  /* 820889F4h */ case    1:  		/* li R7, 14 */
		/* 820889F4h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0xE);
		/* 820889F4h case    1:*/		return 0x820889F8;
		  /* 820889F8h */ case    2:  		/* li R6, 8 */
		/* 820889F8h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x8);
		/* 820889F8h case    2:*/		return 0x820889FC;
		  /* 820889FCh */ case    3:  		/* addi R5, R1, 80 */
		/* 820889FCh case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 820889FCh case    3:*/		return 0x82088A00;
		  /* 82088A00h */ case    4:  		/* addi R4, R1, 88 */
		/* 82088A00h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x58);
		/* 82088A00h case    4:*/		return 0x82088A04;
		  /* 82088A04h */ case    5:  		/* mr R3, R29 */
		/* 82088A04h case    5:*/		regs.R3 = regs.R29;
		/* 82088A04h case    5:*/		return 0x82088A08;
		  /* 82088A08h */ case    6:  		/* lwz R11, <#[R11 + 36]> */
		/* 82088A08h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 82088A08h case    6:*/		return 0x82088A0C;
		  /* 82088A0Ch */ case    7:  		/* mtspr CTR, R11 */
		/* 82088A0Ch case    7:*/		regs.CTR = regs.R11;
		/* 82088A0Ch case    7:*/		return 0x82088A10;
		  /* 82088A10h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 82088A10h case    8:*/		if ( 1 ) { regs.LR = 0x82088A14; return (uint32)regs.CTR; }
		/* 82088A10h case    8:*/		return 0x82088A14;
		  /* 82088A14h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 82088A14h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82088A14h case    9:*/		return 0x82088A18;
		  /* 82088A18h */ case   10:  		/* bc 12, CR0_LT, 48 */
		/* 82088A18h case   10:*/		if ( regs.CR[0].lt ) { return 0x82088A48;  }
		/* 82088A18h case   10:*/		return 0x82088A1C;
		  /* 82088A1Ch */ case   11:  		/* cmplwi CR6, R28, 0 */
		/* 82088A1Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82088A1Ch case   11:*/		return 0x82088A20;
		  /* 82088A20h */ case   12:  		/* bc 12, CR6_EQ, 12 */
		/* 82088A20h case   12:*/		if ( regs.CR[6].eq ) { return 0x82088A2C;  }
		/* 82088A20h case   12:*/		return 0x82088A24;
		  /* 82088A24h */ case   13:  		/* lwz R11, <#[R1 + 80]> */
		/* 82088A24h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82088A24h case   13:*/		return 0x82088A28;
		  /* 82088A28h */ case   14:  		/* stw R11, <#[R28]> */
		/* 82088A28h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82088A28h case   14:*/		return 0x82088A2C;
	}
	return 0x82088A2C;
} // Block from 820889F0h-82088A2Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 82088A2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088A2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088A2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088A2C);
		  /* 82088A2Ch */ case    0:  		/* lwz R11, <#[R1 + 84]> */
		/* 82088A2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82088A2Ch case    0:*/		return 0x82088A30;
		  /* 82088A30h */ case    1:  		/* cmpwi CR6, R11, -1 */
		/* 82088A30h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 82088A30h case    1:*/		return 0x82088A34;
		  /* 82088A34h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 82088A34h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82088A40;  }
		/* 82088A34h case    2:*/		return 0x82088A38;
		  /* 82088A38h */ case    3:  		/* li R3, 0 */
		/* 82088A38h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82088A38h case    3:*/		return 0x82088A3C;
		  /* 82088A3Ch */ case    4:  		/* bl 7356 */
		/* 82088A3Ch case    4:*/		regs.LR = 0x82088A40; return 0x8208A6F8;
		/* 82088A3Ch case    4:*/		return 0x82088A40;
	}
	return 0x82088A40;
} // Block from 82088A2Ch-82088A40h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82088A40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088A40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088A40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088A40);
		  /* 82088A40h */ case    0:  		/* lwz R3, <#[R1 + 84]> */
		/* 82088A40h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000054) );
		/* 82088A40h case    0:*/		return 0x82088A44;
		  /* 82088A44h */ case    1:  		/* b 28 */
		/* 82088A44h case    1:*/		return 0x82088A60;
		/* 82088A44h case    1:*/		return 0x82088A48;
	}
	return 0x82088A48;
} // Block from 82088A40h-82088A48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82088A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088A48);
		  /* 82088A48h */ case    0:  		/* bl 7384 */
		/* 82088A48h case    0:*/		regs.LR = 0x82088A4C; return 0x8208A720;
		/* 82088A48h case    0:*/		return 0x82088A4C;
		  /* 82088A4Ch */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 82088A4Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82088A4Ch case    1:*/		return 0x82088A50;
		  /* 82088A50h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 82088A50h case    2:*/		if ( regs.CR[6].eq ) { return 0x82088A5C;  }
		/* 82088A50h case    2:*/		return 0x82088A54;
		  /* 82088A54h */ case    3:  		/* li R11, -1 */
		/* 82088A54h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82088A54h case    3:*/		return 0x82088A58;
		  /* 82088A58h */ case    4:  		/* stw R11, <#[R28]> */
		/* 82088A58h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82088A58h case    4:*/		return 0x82088A5C;
	}
	return 0x82088A5C;
} // Block from 82088A48h-82088A5Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82088A5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088A5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088A5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088A5C);
		  /* 82088A5Ch */ case    0:  		/* li R3, -1 */
		/* 82088A5Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 82088A5Ch case    0:*/		return 0x82088A60;
	}
	return 0x82088A60;
} // Block from 82088A5Ch-82088A60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82088A60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088A60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088A60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088A60);
		  /* 82088A60h */ case    0:  		/* addi R1, R1, 192 */
		/* 82088A60h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82088A60h case    0:*/		return 0x82088A64;
		  /* 82088A64h */ case    1:  		/* b 34884 */
		/* 82088A64h case    1:*/		return 0x820912A8;
		/* 82088A64h case    1:*/		return 0x82088A68;
	}
	return 0x82088A68;
} // Block from 82088A60h-82088A68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82088A68h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088A68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088A68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088A68);
		  /* 82088A68h */ case    0:  		/* mfspr R12, LR */
		/* 82088A68h case    0:*/		regs.R12 = regs.LR;
		/* 82088A68h case    0:*/		return 0x82088A6C;
		  /* 82088A6Ch */ case    1:  		/* bl 34800 */
		/* 82088A6Ch case    1:*/		regs.LR = 0x82088A70; return 0x8209125C;
		/* 82088A6Ch case    1:*/		return 0x82088A70;
		  /* 82088A70h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82088A70h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82088A70h case    2:*/		return 0x82088A74;
		  /* 82088A74h */ case    3:  		/* mr R30, R3 */
		/* 82088A74h case    3:*/		regs.R30 = regs.R3;
		/* 82088A74h case    3:*/		return 0x82088A78;
		  /* 82088A78h */ case    4:  		/* mr R8, R4 */
		/* 82088A78h case    4:*/		regs.R8 = regs.R4;
		/* 82088A78h case    4:*/		return 0x82088A7C;
		  /* 82088A7Ch */ case    5:  		/* mr R9, R5 */
		/* 82088A7Ch case    5:*/		regs.R9 = regs.R5;
		/* 82088A7Ch case    5:*/		return 0x82088A80;
		  /* 82088A80h */ case    6:  		/* mr R29, R6 */
		/* 82088A80h case    6:*/		regs.R29 = regs.R6;
		/* 82088A80h case    6:*/		return 0x82088A84;
		  /* 82088A84h */ case    7:  		/* mr R31, R7 */
		/* 82088A84h case    7:*/		regs.R31 = regs.R7;
		/* 82088A84h case    7:*/		return 0x82088A88;
		  /* 82088A88h */ case    8:  		/* cmplwi CR6, R6, 0 */
		/* 82088A88h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 82088A88h case    8:*/		return 0x82088A8C;
		  /* 82088A8Ch */ case    9:  		/* bc 12, CR6_EQ, 12 */
		/* 82088A8Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x82088A98;  }
		/* 82088A8Ch case    9:*/		return 0x82088A90;
		  /* 82088A90h */ case   10:  		/* li R11, 0 */
		/* 82088A90h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82088A90h case   10:*/		return 0x82088A94;
		  /* 82088A94h */ case   11:  		/* stw R11, <#[R6]> */
		/* 82088A94h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 82088A94h case   11:*/		return 0x82088A98;
	}
	return 0x82088A98;
} // Block from 82088A68h-82088A98h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82088A98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088A98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088A98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088A98);
		  /* 82088A98h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82088A98h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82088A98h case    0:*/		return 0x82088A9C;
		  /* 82088A9Ch */ case    1:  		/* li R5, 0 */
		/* 82088A9Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82088A9Ch case    1:*/		return 0x82088AA0;
		  /* 82088AA0h */ case    2:  		/* mr R3, R30 */
		/* 82088AA0h case    2:*/		regs.R3 = regs.R30;
		/* 82088AA0h case    2:*/		return 0x82088AA4;
		  /* 82088AA4h */ case    3:  		/* bc 12, CR6_EQ, 108 */
		/* 82088AA4h case    3:*/		if ( regs.CR[6].eq ) { return 0x82088B10;  }
		/* 82088AA4h case    3:*/		return 0x82088AA8;
		  /* 82088AA8h */ case    4:  		/* lwz R11, <#[R31 + 8]> */
		/* 82088AA8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82088AA8h case    4:*/		return 0x82088AAC;
		  /* 82088AACh */ case    5:  		/* li R7, 259 */
		/* 82088AACh case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x103);
		/* 82088AACh case    5:*/		return 0x82088AB0;
		  /* 82088AB0h */ case    6:  		/* lwz R6, <#[R31 + 12]> */
		/* 82088AB0h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000000C) );
		/* 82088AB0h case    6:*/		return 0x82088AB4;
		  /* 82088AB4h */ case    7:  		/* addi R10, R1, 88 */
		/* 82088AB4h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x58);
		/* 82088AB4h case    7:*/		return 0x82088AB8;
		  /* 82088AB8h */ case    8:  		/* stw R7, <#[R31]> */
		/* 82088AB8h case    8:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x00000000) );
		/* 82088AB8h case    8:*/		return 0x82088ABC;
		  /* 82088ABCh */ case    9:  		/* mr R7, R31 */
		/* 82088ABCh case    9:*/		regs.R7 = regs.R31;
		/* 82088ABCh case    9:*/		return 0x82088AC0;
		  /* 82088AC0h */ case   10:  		/* lwz R4, <#[R31 + 16]> */
		/* 82088AC0h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 82088AC0h case   10:*/		return 0x82088AC4;
		  /* 82088AC4h */ case   11:  		/* stw R11, <#[R1 + 92]> */
		/* 82088AC4h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 82088AC4h case   11:*/		return 0x82088AC8;
		  /* 82088AC8h */ case   12:  		/* rlwinm R11, R4, 0, 31, 31 */
		/* 82088AC8h case   12:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R4);
		/* 82088AC8h case   12:*/		return 0x82088ACC;
		  /* 82088ACCh */ case   13:  		/* stw R6, <#[R1 + 88]> */
		/* 82088ACCh case   13:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x00000058) );
		/* 82088ACCh case   13:*/		return 0x82088AD0;
		  /* 82088AD0h */ case   14:  		/* addic R11, R11, -1 */
		/* 82088AD0h case   14:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82088AD0h case   14:*/		return 0x82088AD4;
		  /* 82088AD4h */ case   15:  		/* subfe R11, R11, R11 */
		/* 82088AD4h case   15:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82088AD4h case   15:*/		return 0x82088AD8;
		  /* 82088AD8h */ case   16:  		/* and R6, R11, R31 */
		/* 82088AD8h case   16:*/		cpu::op::and<0>(regs,&regs.R6,regs.R11,regs.R31);
		/* 82088AD8h case   16:*/		return 0x82088ADC;
		  /* 82088ADCh */ case   17:  		/* bl 1984668 */
		/* 82088ADCh case   17:*/		regs.LR = 0x82088AE0; return 0x8226D378;
		/* 82088ADCh case   17:*/		return 0x82088AE0;
		  /* 82088AE0h */ case   18:  		/* lis R11, -16384 */
		/* 82088AE0h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC000);
		/* 82088AE0h case   18:*/		return 0x82088AE4;
		  /* 82088AE4h */ case   19:  		/* rlwinm R10, R3, 0, 0, 1 */
		/* 82088AE4h case   19:*/		cpu::op::rlwinm<0,0,0,1>(regs,&regs.R10,regs.R3);
		/* 82088AE4h case   19:*/		return 0x82088AE8;
		  /* 82088AE8h */ case   20:  		/* cmplw CR6, R10, R11 */
		/* 82088AE8h case   20:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82088AE8h case   20:*/		return 0x82088AEC;
		  /* 82088AECh */ case   21:  		/* bc 12, CR6_EQ, 144 */
		/* 82088AECh case   21:*/		if ( regs.CR[6].eq ) { return 0x82088B7C;  }
		/* 82088AECh case   21:*/		return 0x82088AF0;
		  /* 82088AF0h */ case   22:  		/* cmpwi CR6, R3, 259 */
		/* 82088AF0h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000103);
		/* 82088AF0h case   22:*/		return 0x82088AF4;
		  /* 82088AF4h */ case   23:  		/* bc 12, CR6_EQ, 136 */
		/* 82088AF4h case   23:*/		if ( regs.CR[6].eq ) { return 0x82088B7C;  }
		/* 82088AF4h case   23:*/		return 0x82088AF8;
		  /* 82088AF8h */ case   24:  		/* cmplwi CR6, R29, 0 */
		/* 82088AF8h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82088AF8h case   24:*/		return 0x82088AFC;
		  /* 82088AFCh */ case   25:  		/* bc 12, CR6_EQ, 12 */
		/* 82088AFCh case   25:*/		if ( regs.CR[6].eq ) { return 0x82088B08;  }
		/* 82088AFCh case   25:*/		return 0x82088B00;
		  /* 82088B00h */ case   26:  		/* lwz R11, <#[R31 + 4]> */
		/* 82088B00h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82088B00h case   26:*/		return 0x82088B04;
		  /* 82088B04h */ case   27:  		/* stw R11, <#[R29]> */
		/* 82088B04h case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82088B04h case   27:*/		return 0x82088B08;
	}
	return 0x82088B08;
} // Block from 82088A98h-82088B08h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82088B08h
// Function '?WhoContributesToExport@D3D@@YAHPAUaluFormat@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088B08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088B08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088B08);
		  /* 82088B08h */ case    0:  		/* li R3, 1 */
		/* 82088B08h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82088B08h case    0:*/		return 0x82088B0C;
		  /* 82088B0Ch */ case    1:  		/* b 120 */
		/* 82088B0Ch case    1:*/		return 0x82088B84;
		/* 82088B0Ch case    1:*/		return 0x82088B10;
	}
	return 0x82088B10;
} // Block from 82088B08h-82088B10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82088B10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088B10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088B10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088B10);
		  /* 82088B10h */ case    0:  		/* li R10, 0 */
		/* 82088B10h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82088B10h case    0:*/		return 0x82088B14;
		  /* 82088B14h */ case    1:  		/* addi R7, R1, 80 */
		/* 82088B14h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82088B14h case    1:*/		return 0x82088B18;
		  /* 82088B18h */ case    2:  		/* li R6, 0 */
		/* 82088B18h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82088B18h case    2:*/		return 0x82088B1C;
		  /* 82088B1Ch */ case    3:  		/* li R4, 0 */
		/* 82088B1Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82088B1Ch case    3:*/		return 0x82088B20;
		  /* 82088B20h */ case    4:  		/* bl 1984600 */
		/* 82088B20h case    4:*/		regs.LR = 0x82088B24; return 0x8226D378;
		/* 82088B20h case    4:*/		return 0x82088B24;
		  /* 82088B24h */ case    5:  		/* cmpwi CR6, R3, 259 */
		/* 82088B24h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000103);
		/* 82088B24h case    5:*/		return 0x82088B28;
		  /* 82088B28h */ case    6:  		/* bc 4, CR6_EQ, 36 */
		/* 82088B28h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82088B4C;  }
		/* 82088B28h case    6:*/		return 0x82088B2C;
		  /* 82088B2Ch */ case    7:  		/* li R6, 0 */
		/* 82088B2Ch case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82088B2Ch case    7:*/		return 0x82088B30;
		  /* 82088B30h */ case    8:  		/* li R5, 0 */
		/* 82088B30h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82088B30h case    8:*/		return 0x82088B34;
		  /* 82088B34h */ case    9:  		/* li R4, 1 */
		/* 82088B34h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82088B34h case    9:*/		return 0x82088B38;
		  /* 82088B38h */ case   10:  		/* mr R3, R30 */
		/* 82088B38h case   10:*/		regs.R3 = regs.R30;
		/* 82088B38h case   10:*/		return 0x82088B3C;
		  /* 82088B3Ch */ case   11:  		/* bl 1984556 */
		/* 82088B3Ch case   11:*/		regs.LR = 0x82088B40; return 0x8226D368;
		/* 82088B3Ch case   11:*/		return 0x82088B40;
		  /* 82088B40h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 82088B40h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82088B40h case   12:*/		return 0x82088B44;
		  /* 82088B44h */ case   13:  		/* bc 12, CR0_LT, 32 */
		/* 82088B44h case   13:*/		if ( regs.CR[0].lt ) { return 0x82088B64;  }
		/* 82088B44h case   13:*/		return 0x82088B48;
		  /* 82088B48h */ case   14:  		/* lwz R3, <#[R1 + 80]> */
		/* 82088B48h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 82088B48h case   14:*/		return 0x82088B4C;
	}
	return 0x82088B4C;
} // Block from 82088B10h-82088B4Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 82088B4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088B4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088B4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088B4C);
		  /* 82088B4Ch */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 82088B4Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82088B4Ch case    0:*/		return 0x82088B50;
		  /* 82088B50h */ case    1:  		/* bc 12, CR6_LT, 20 */
		/* 82088B50h case    1:*/		if ( regs.CR[6].lt ) { return 0x82088B64;  }
		/* 82088B50h case    1:*/		return 0x82088B54;
		  /* 82088B54h */ case    2:  		/* lwz R11, <#[R1 + 84]> */
		/* 82088B54h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82088B54h case    2:*/		return 0x82088B58;
		  /* 82088B58h */ case    3:  		/* li R3, 1 */
		/* 82088B58h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82088B58h case    3:*/		return 0x82088B5C;
		  /* 82088B5Ch */ case    4:  		/* stw R11, <#[R29]> */
		/* 82088B5Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82088B5Ch case    4:*/		return 0x82088B60;
		  /* 82088B60h */ case    5:  		/* b 36 */
		/* 82088B60h case    5:*/		return 0x82088B84;
		/* 82088B60h case    5:*/		return 0x82088B64;
	}
	return 0x82088B64;
} // Block from 82088B4Ch-82088B64h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82088B64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088B64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088B64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088B64);
		  /* 82088B64h */ case    0:  		/* rlwinm R11, R3, 0, 0, 1 */
		/* 82088B64h case    0:*/		cpu::op::rlwinm<0,0,0,1>(regs,&regs.R11,regs.R3);
		/* 82088B64h case    0:*/		return 0x82088B68;
		  /* 82088B68h */ case    1:  		/* lis R10, -32768 */
		/* 82088B68h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 82088B68h case    1:*/		return 0x82088B6C;
		  /* 82088B6Ch */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 82088B6Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82088B6Ch case    2:*/		return 0x82088B70;
		  /* 82088B70h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 82088B70h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82088B7C;  }
		/* 82088B70h case    3:*/		return 0x82088B74;
		  /* 82088B74h */ case    4:  		/* lwz R11, <#[R1 + 84]> */
		/* 82088B74h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82088B74h case    4:*/		return 0x82088B78;
		  /* 82088B78h */ case    5:  		/* stw R11, <#[R29]> */
		/* 82088B78h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82088B78h case    5:*/		return 0x82088B7C;
	}
	return 0x82088B7C;
} // Block from 82088B64h-82088B7Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82088B7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088B7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088B7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088B7C);
		  /* 82088B7Ch */ case    0:  		/* bl 7076 */
		/* 82088B7Ch case    0:*/		regs.LR = 0x82088B80; return 0x8208A720;
		/* 82088B7Ch case    0:*/		return 0x82088B80;
		  /* 82088B80h */ case    1:  		/* li R3, 0 */
		/* 82088B80h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82088B80h case    1:*/		return 0x82088B84;
	}
	return 0x82088B84;
} // Block from 82088B7Ch-82088B84h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82088B84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088B84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088B84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088B84);
		  /* 82088B84h */ case    0:  		/* addi R1, R1, 128 */
		/* 82088B84h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82088B84h case    0:*/		return 0x82088B88;
		  /* 82088B88h */ case    1:  		/* b 34596 */
		/* 82088B88h case    1:*/		return 0x820912AC;
		/* 82088B88h case    1:*/		return 0x82088B8C;
		  /* 82088B8Ch */ case    2:  		/* nop */
		/* 82088B8Ch case    2:*/		cpu::op::nop();
		/* 82088B8Ch case    2:*/		return 0x82088B90;
	}
	return 0x82088B90;
} // Block from 82088B84h-82088B90h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82088B90h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088B90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088B90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088B90);
		  /* 82088B90h */ case    0:  		/* li R5, 0 */
		/* 82088B90h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82088B90h case    0:*/		return 0x82088B94;
		  /* 82088B94h */ case    1:  		/* b 7140 */
		/* 82088B94h case    1:*/		return 0x8208A778;
		/* 82088B94h case    1:*/		return 0x82088B98;
	}
	return 0x82088B98;
} // Block from 82088B90h-82088B98h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82088B98h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088B98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088B98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088B98);
		  /* 82088B98h */ case    0:  		/* mfspr R12, LR */
		/* 82088B98h case    0:*/		regs.R12 = regs.LR;
		/* 82088B98h case    0:*/		return 0x82088B9C;
		  /* 82088B9Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82088B9Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82088B9Ch case    1:*/		return 0x82088BA0;
	}
	return 0x82088BA0;
} // Block from 82088B98h-82088BA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82088BA0h
// Function '?IsVectorNOP@D3D@@YA_NPAUaluFormat@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088BA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088BA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088BA0);
		  /* 82088BA0h */ case    0:  		/* std R30, <#[R1 - 24]> */
		/* 82088BA0h case    0:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82088BA0h case    0:*/		return 0x82088BA4;
		  /* 82088BA4h */ case    1:  		/* std R31, <#[R1 - 16]> */
		/* 82088BA4h case    1:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82088BA4h case    1:*/		return 0x82088BA8;
		  /* 82088BA8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82088BA8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82088BA8h case    2:*/		return 0x82088BAC;
		  /* 82088BACh */ case    3:  		/* mr R31, R4 */
		/* 82088BACh case    3:*/		regs.R31 = regs.R4;
		/* 82088BACh case    3:*/		return 0x82088BB0;
		  /* 82088BB0h */ case    4:  		/* mr R30, R5 */
		/* 82088BB0h case    4:*/		regs.R30 = regs.R5;
		/* 82088BB0h case    4:*/		return 0x82088BB4;
		  /* 82088BB4h */ case    5:  		/* cmplwi CR6, R6, 0 */
		/* 82088BB4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 82088BB4h case    5:*/		return 0x82088BB8;
		  /* 82088BB8h */ case    6:  		/* bc 12, CR6_EQ, 28 */
		/* 82088BB8h case    6:*/		if ( regs.CR[6].eq ) { return 0x82088BD4;  }
		/* 82088BB8h case    6:*/		return 0x82088BBC;
		  /* 82088BBCh */ case    7:  		/* mr R5, R6 */
		/* 82088BBCh case    7:*/		regs.R5 = regs.R6;
		/* 82088BBCh case    7:*/		return 0x82088BC0;
		  /* 82088BC0h */ case    8:  		/* addi R4, R1, 88 */
		/* 82088BC0h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x58);
		/* 82088BC0h case    8:*/		return 0x82088BC4;
		  /* 82088BC4h */ case    9:  		/* addi R3, R1, 96 */
		/* 82088BC4h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 82088BC4h case    9:*/		return 0x82088BC8;
		  /* 82088BC8h */ case   10:  		/* bl 7192 */
		/* 82088BC8h case   10:*/		regs.LR = 0x82088BCC; return 0x8208A7E0;
		/* 82088BC8h case   10:*/		return 0x82088BCC;
		  /* 82088BCCh */ case   11:  		/* mr R4, R3 */
		/* 82088BCCh case   11:*/		regs.R4 = regs.R3;
		/* 82088BCCh case   11:*/		return 0x82088BD0;
		  /* 82088BD0h */ case   12:  		/* b 8 */
		/* 82088BD0h case   12:*/		return 0x82088BD8;
		/* 82088BD0h case   12:*/		return 0x82088BD4;
	}
	return 0x82088BD4;
} // Block from 82088BA0h-82088BD4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82088BD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088BD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088BD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088BD4);
		  /* 82088BD4h */ case    0:  		/* li R4, 0 */
		/* 82088BD4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82088BD4h case    0:*/		return 0x82088BD8;
	}
	return 0x82088BD8;
} // Block from 82088BD4h-82088BD8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82088BD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088BD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088BD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088BD8);
		  /* 82088BD8h */ case    0:  		/* cntlzw R11, R31 */
		/* 82088BD8h case    0:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R31);
		/* 82088BD8h case    0:*/		return 0x82088BDC;
		  /* 82088BDCh */ case    1:  		/* rlwinm R6, R30, 0, 24, 31 */
		/* 82088BDCh case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R6,regs.R30);
		/* 82088BDCh case    1:*/		return 0x82088BE0;
		  /* 82088BE0h */ case    2:  		/* rlwinm R5, R11, 27, 31, 31 */
		/* 82088BE0h case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R5,regs.R11);
		/* 82088BE0h case    2:*/		return 0x82088BE4;
		  /* 82088BE4h */ case    3:  		/* addi R3, R1, 80 */
		/* 82088BE4h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82088BE4h case    3:*/		return 0x82088BE8;
		  /* 82088BE8h */ case    4:  		/* bl 1984192 */
		/* 82088BE8h case    4:*/		regs.LR = 0x82088BEC; return 0x8226D2A8;
		/* 82088BE8h case    4:*/		return 0x82088BEC;
		  /* 82088BECh */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 82088BECh case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82088BECh case    5:*/		return 0x82088BF0;
		  /* 82088BF0h */ case    6:  		/* bc 12, CR0_LT, 36 */
		/* 82088BF0h case    6:*/		if ( regs.CR[0].lt ) { return 0x82088C14;  }
		/* 82088BF0h case    6:*/		return 0x82088BF4;
		  /* 82088BF4h */ case    7:  		/* lis R11, 16384 */
		/* 82088BF4h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0x4000);
		/* 82088BF4h case    7:*/		return 0x82088BF8;
		  /* 82088BF8h */ case    8:  		/* cmpw CR6, R3, R11 */
		/* 82088BF8h case    8:*/		cpu::op::cmpw<6>(regs,regs.R3,regs.R11);
		/* 82088BF8h case    8:*/		return 0x82088BFC;
		  /* 82088BFCh */ case    9:  		/* li R3, 183 */
		/* 82088BFCh case    9:*/		cpu::op::li<0>(regs,&regs.R3,0xB7);
		/* 82088BFCh case    9:*/		return 0x82088C00;
		  /* 82088C00h */ case   10:  		/* bc 12, CR6_EQ, 8 */
		/* 82088C00h case   10:*/		if ( regs.CR[6].eq ) { return 0x82088C08;  }
		/* 82088C00h case   10:*/		return 0x82088C04;
		  /* 82088C04h */ case   11:  		/* li R3, 0 */
		/* 82088C04h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82088C04h case   11:*/		return 0x82088C08;
	}
	return 0x82088C08;
} // Block from 82088BD8h-82088C08h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82088C08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088C08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088C08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088C08);
		  /* 82088C08h */ case    0:  		/* bl 6912 */
		/* 82088C08h case    0:*/		regs.LR = 0x82088C0C; return 0x8208A708;
		/* 82088C08h case    0:*/		return 0x82088C0C;
		  /* 82088C0Ch */ case    1:  		/* lwz R3, <#[R1 + 80]> */
		/* 82088C0Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 82088C0Ch case    1:*/		return 0x82088C10;
	}
	return 0x82088C10;
} // Block from 82088C08h-82088C10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82088C10h
// Function '?PrintAluVector@Disassembler@D3D@@AAAXPAUaluFormat@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088C10);
		  /* 82088C10h */ case    0:  		/* b 12 */
		/* 82088C10h case    0:*/		return 0x82088C1C;
		/* 82088C10h case    0:*/		return 0x82088C14;
	}
	return 0x82088C14;
} // Block from 82088C10h-82088C14h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82088C14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088C14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088C14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088C14);
		  /* 82088C14h */ case    0:  		/* bl 6924 */
		/* 82088C14h case    0:*/		regs.LR = 0x82088C18; return 0x8208A720;
		/* 82088C14h case    0:*/		return 0x82088C18;
		  /* 82088C18h */ case    1:  		/* li R3, 0 */
		/* 82088C18h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82088C18h case    1:*/		return 0x82088C1C;
	}
	return 0x82088C1C;
} // Block from 82088C14h-82088C1Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82088C1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088C1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088C1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088C1C);
		  /* 82088C1Ch */ case    0:  		/* addi R1, R1, 144 */
		/* 82088C1Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82088C1Ch case    0:*/		return 0x82088C20;
		  /* 82088C20h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82088C20h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82088C20h case    1:*/		return 0x82088C24;
		  /* 82088C24h */ case    2:  		/* mtspr LR, R12 */
		/* 82088C24h case    2:*/		regs.LR = regs.R12;
		/* 82088C24h case    2:*/		return 0x82088C28;
		  /* 82088C28h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82088C28h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82088C28h case    3:*/		return 0x82088C2C;
		  /* 82088C2Ch */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82088C2Ch case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82088C2Ch case    4:*/		return 0x82088C30;
		  /* 82088C30h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82088C30h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82088C30h case    5:*/		return 0x82088C34;
	}
	return 0x82088C34;
} // Block from 82088C1Ch-82088C34h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82088C34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088C34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088C34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088C34);
		  /* 82088C34h */ case    0:  		/* nop */
		/* 82088C34h case    0:*/		cpu::op::nop();
		/* 82088C34h case    0:*/		return 0x82088C38;
	}
	return 0x82088C38;
} // Block from 82088C34h-82088C38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82088C38h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088C38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088C38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088C38);
		  /* 82088C38h */ case    0:  		/* mfspr R12, LR */
		/* 82088C38h case    0:*/		regs.R12 = regs.LR;
		/* 82088C38h case    0:*/		return 0x82088C3C;
		  /* 82088C3Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82088C3Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82088C3Ch case    1:*/		return 0x82088C40;
		  /* 82088C40h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82088C40h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82088C40h case    2:*/		return 0x82088C44;
		  /* 82088C44h */ case    3:  		/* stwu R1, <#[R1 - 144]> */
		/* 82088C44h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82088C44h case    3:*/		return 0x82088C48;
		  /* 82088C48h */ case    4:  		/* mr R4, R3 */
		/* 82088C48h case    4:*/		regs.R4 = regs.R3;
		/* 82088C48h case    4:*/		return 0x82088C4C;
		  /* 82088C4Ch */ case    5:  		/* addi R3, R1, 88 */
		/* 82088C4Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x58);
		/* 82088C4Ch case    5:*/		return 0x82088C50;
		  /* 82088C50h */ case    6:  		/* bl 1983912 */
		/* 82088C50h case    6:*/		regs.LR = 0x82088C54; return 0x8226D1F8;
		/* 82088C50h case    6:*/		return 0x82088C54;
		  /* 82088C54h */ case    7:  		/* li R11, -3 */
		/* 82088C54h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFD);
		/* 82088C54h case    7:*/		return 0x82088C58;
		  /* 82088C58h */ case    8:  		/* li R10, 64 */
		/* 82088C58h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x40);
		/* 82088C58h case    8:*/		return 0x82088C5C;
		  /* 82088C5Ch */ case    9:  		/* addi R9, R1, 88 */
		/* 82088C5Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x58);
		/* 82088C5Ch case    9:*/		return 0x82088C60;
		  /* 82088C60h */ case   10:  		/* stw R11, <#[R1 + 104]> */
		/* 82088C60h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 82088C60h case   10:*/		return 0x82088C64;
		  /* 82088C64h */ case   11:  		/* stw R10, <#[R1 + 112]> */
		/* 82088C64h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 82088C64h case   11:*/		return 0x82088C68;
		  /* 82088C68h */ case   12:  		/* li R8, 16448 */
		/* 82088C68h case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x4040);
		/* 82088C68h case   12:*/		return 0x82088C6C;
		  /* 82088C6Ch */ case   13:  		/* stw R9, <#[R1 + 108]> */
		/* 82088C6Ch case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000006C) );
		/* 82088C6Ch case   13:*/		return 0x82088C70;
		  /* 82088C70h */ case   14:  		/* li R7, 7 */
		/* 82088C70h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x7);
		/* 82088C70h case   14:*/		return 0x82088C74;
		  /* 82088C74h */ case   15:  		/* addi R6, R1, 96 */
		/* 82088C74h case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x60);
		/* 82088C74h case   15:*/		return 0x82088C78;
		  /* 82088C78h */ case   16:  		/* addi R5, R1, 104 */
		/* 82088C78h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x68);
		/* 82088C78h case   16:*/		return 0x82088C7C;
		  /* 82088C7Ch */ case   17:  		/* lis R4, 1 */
		/* 82088C7Ch case   17:*/		cpu::op::lis<0>(regs,&regs.R4,0x1);
		/* 82088C7Ch case   17:*/		return 0x82088C80;
		  /* 82088C80h */ case   18:  		/* addi R3, R1, 84 */
		/* 82088C80h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x54);
		/* 82088C80h case   18:*/		return 0x82088C84;
		  /* 82088C84h */ case   19:  		/* bl 1984180 */
		/* 82088C84h case   19:*/		regs.LR = 0x82088C88; return 0x8226D338;
		/* 82088C84h case   19:*/		return 0x82088C88;
		  /* 82088C88h */ case   20:  		/* cmpwi CR0, R3, 0 */
		/* 82088C88h case   20:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82088C88h case   20:*/		return 0x82088C8C;
		  /* 82088C8Ch */ case   21:  		/* bc 12, CR0_LT, 68 */
		/* 82088C8Ch case   21:*/		if ( regs.CR[0].lt ) { return 0x82088CD0;  }
		/* 82088C8Ch case   21:*/		return 0x82088C90;
		  /* 82088C90h */ case   22:  		/* li R11, 1 */
		/* 82088C90h case   22:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82088C90h case   22:*/		return 0x82088C94;
		  /* 82088C94h */ case   23:  		/* lwz R3, <#[R1 + 84]> */
		/* 82088C94h case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000054) );
		/* 82088C94h case   23:*/		return 0x82088C98;
		  /* 82088C98h */ case   24:  		/* li R7, 13 */
		/* 82088C98h case   24:*/		cpu::op::li<0>(regs,&regs.R7,0xD);
		/* 82088C98h case   24:*/		return 0x82088C9C;
		  /* 82088C9Ch */ case   25:  		/* stb R11, <#[R1 + 80]> */
		/* 82088C9Ch case   25:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82088C9Ch case   25:*/		return 0x82088CA0;
		  /* 82088CA0h */ case   26:  		/* li R6, 1 */
		/* 82088CA0h case   26:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82088CA0h case   26:*/		return 0x82088CA4;
		  /* 82088CA4h */ case   27:  		/* addi R5, R1, 80 */
		/* 82088CA4h case   27:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82088CA4h case   27:*/		return 0x82088CA8;
		  /* 82088CA8h */ case   28:  		/* addi R4, R1, 96 */
		/* 82088CA8h case   28:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 82088CA8h case   28:*/		return 0x82088CAC;
		  /* 82088CACh */ case   29:  		/* bl 1984156 */
		/* 82088CACh case   29:*/		regs.LR = 0x82088CB0; return 0x8226D348;
		/* 82088CACh case   29:*/		return 0x82088CB0;
		  /* 82088CB0h */ case   30:  		/* mr R31, R3 */
		/* 82088CB0h case   30:*/		regs.R31 = regs.R3;
		/* 82088CB0h case   30:*/		return 0x82088CB4;
		  /* 82088CB4h */ case   31:  		/* lwz R3, <#[R1 + 84]> */
		/* 82088CB4h case   31:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000054) );
		/* 82088CB4h case   31:*/		return 0x82088CB8;
		  /* 82088CB8h */ case   32:  		/* bl 1983968 */
		/* 82088CB8h case   32:*/		regs.LR = 0x82088CBC; return 0x8226D298;
		/* 82088CB8h case   32:*/		return 0x82088CBC;
		  /* 82088CBCh */ case   33:  		/* cmpwi CR6, R31, 0 */
		/* 82088CBCh case   33:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 82088CBCh case   33:*/		return 0x82088CC0;
		  /* 82088CC0h */ case   34:  		/* bc 12, CR6_LT, 12 */
		/* 82088CC0h case   34:*/		if ( regs.CR[6].lt ) { return 0x82088CCC;  }
		/* 82088CC0h case   34:*/		return 0x82088CC4;
		  /* 82088CC4h */ case   35:  		/* li R3, 1 */
		/* 82088CC4h case   35:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82088CC4h case   35:*/		return 0x82088CC8;
		  /* 82088CC8h */ case   36:  		/* b 16 */
		/* 82088CC8h case   36:*/		return 0x82088CD8;
		/* 82088CC8h case   36:*/		return 0x82088CCC;
	}
	return 0x82088CCC;
} // Block from 82088C38h-82088CCCh (37 instructions)

//////////////////////////////////////////////////////
// Block at 82088CCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088CCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088CCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088CCC);
		  /* 82088CCCh */ case    0:  		/* mr R3, R31 */
		/* 82088CCCh case    0:*/		regs.R3 = regs.R31;
		/* 82088CCCh case    0:*/		return 0x82088CD0;
	}
	return 0x82088CD0;
} // Block from 82088CCCh-82088CD0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82088CD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088CD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088CD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088CD0);
		  /* 82088CD0h */ case    0:  		/* bl 6736 */
		/* 82088CD0h case    0:*/		regs.LR = 0x82088CD4; return 0x8208A720;
		/* 82088CD0h case    0:*/		return 0x82088CD4;
		  /* 82088CD4h */ case    1:  		/* li R3, 0 */
		/* 82088CD4h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82088CD4h case    1:*/		return 0x82088CD8;
	}
	return 0x82088CD8;
} // Block from 82088CD0h-82088CD8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82088CD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088CD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088CD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088CD8);
		  /* 82088CD8h */ case    0:  		/* addi R1, R1, 144 */
		/* 82088CD8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82088CD8h case    0:*/		return 0x82088CDC;
		  /* 82088CDCh */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82088CDCh case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82088CDCh case    1:*/		return 0x82088CE0;
		  /* 82088CE0h */ case    2:  		/* mtspr LR, R12 */
		/* 82088CE0h case    2:*/		regs.LR = regs.R12;
		/* 82088CE0h case    2:*/		return 0x82088CE4;
		  /* 82088CE4h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 82088CE4h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82088CE4h case    3:*/		return 0x82088CE8;
		  /* 82088CE8h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82088CE8h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82088CE8h case    4:*/		return 0x82088CEC;
	}
	return 0x82088CEC;
} // Block from 82088CD8h-82088CECh (5 instructions)

//////////////////////////////////////////////////////
// Block at 82088CECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088CEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088CEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088CEC);
		  /* 82088CECh */ case    0:  		/* nop */
		/* 82088CECh case    0:*/		cpu::op::nop();
		/* 82088CECh case    0:*/		return 0x82088CF0;
	}
	return 0x82088CF0;
} // Block from 82088CECh-82088CF0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82088CF0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088CF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088CF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088CF0);
		  /* 82088CF0h */ case    0:  		/* mfspr R12, LR */
		/* 82088CF0h case    0:*/		regs.R12 = regs.LR;
		/* 82088CF0h case    0:*/		return 0x82088CF4;
		  /* 82088CF4h */ case    1:  		/* bl 34140 */
		/* 82088CF4h case    1:*/		regs.LR = 0x82088CF8; return 0x82091250;
		/* 82088CF4h case    1:*/		return 0x82088CF8;
		  /* 82088CF8h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82088CF8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82088CF8h case    2:*/		return 0x82088CFC;
		  /* 82088CFCh */ case    3:  		/* mr R29, R3 */
		/* 82088CFCh case    3:*/		regs.R29 = regs.R3;
		/* 82088CFCh case    3:*/		return 0x82088D00;
		  /* 82088D00h */ case    4:  		/* mr R28, R4 */
		/* 82088D00h case    4:*/		regs.R28 = regs.R4;
		/* 82088D00h case    4:*/		return 0x82088D04;
		  /* 82088D04h */ case    5:  		/* mr R26, R5 */
		/* 82088D04h case    5:*/		regs.R26 = regs.R5;
		/* 82088D04h case    5:*/		return 0x82088D08;
		  /* 82088D08h */ case    6:  		/* mr R27, R7 */
		/* 82088D08h case    6:*/		regs.R27 = regs.R7;
		/* 82088D08h case    6:*/		return 0x82088D0C;
		  /* 82088D0Ch */ case    7:  		/* mr R31, R8 */
		/* 82088D0Ch case    7:*/		regs.R31 = regs.R8;
		/* 82088D0Ch case    7:*/		return 0x82088D10;
		  /* 82088D10h */ case    8:  		/* cmplwi CR6, R7, 1 */
		/* 82088D10h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000001);
		/* 82088D10h case    8:*/		return 0x82088D14;
		  /* 82088D14h */ case    9:  		/* bc 12, CR6_EQ, 92 */
		/* 82088D14h case    9:*/		if ( regs.CR[6].eq ) { return 0x82088D70;  }
		/* 82088D14h case    9:*/		return 0x82088D18;
		  /* 82088D18h */ case   10:  		/* cmplwi CR6, R7, 2 */
		/* 82088D18h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000002);
		/* 82088D18h case   10:*/		return 0x82088D1C;
		  /* 82088D1Ch */ case   11:  		/* bc 12, CR6_EQ, 76 */
		/* 82088D1Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x82088D68;  }
		/* 82088D1Ch case   11:*/		return 0x82088D20;
		  /* 82088D20h */ case   12:  		/* cmplwi CR6, R7, 3 */
		/* 82088D20h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000003);
		/* 82088D20h case   12:*/		return 0x82088D24;
		  /* 82088D24h */ case   13:  		/* bc 12, CR6_EQ, 60 */
		/* 82088D24h case   13:*/		if ( regs.CR[6].eq ) { return 0x82088D60;  }
		/* 82088D24h case   13:*/		return 0x82088D28;
		  /* 82088D28h */ case   14:  		/* cmplwi CR6, R7, 4 */
		/* 82088D28h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000004);
		/* 82088D28h case   14:*/		return 0x82088D2C;
		  /* 82088D2Ch */ case   15:  		/* bc 12, CR6_EQ, 44 */
		/* 82088D2Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x82088D58;  }
		/* 82088D2Ch case   15:*/		return 0x82088D30;
		  /* 82088D30h */ case   16:  		/* cmplwi CR6, R7, 5 */
		/* 82088D30h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000005);
		/* 82088D30h case   16:*/		return 0x82088D34;
		  /* 82088D34h */ case   17:  		/* bc 4, CR6_EQ, 16 */
		/* 82088D34h case   17:*/		if ( !regs.CR[6].eq ) { return 0x82088D44;  }
		/* 82088D34h case   17:*/		return 0x82088D38;
		  /* 82088D38h */ case   18:  		/* rlwinm. R11, R4, 0, 1, 1 */
		/* 82088D38h case   18:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R4);
		/* 82088D38h case   18:*/		return 0x82088D3C;
		  /* 82088D3Ch */ case   19:  		/* li R30, 4 */
		/* 82088D3Ch case   19:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 82088D3Ch case   19:*/		return 0x82088D40;
		  /* 82088D40h */ case   20:  		/* bc 4, CR0_EQ, 52 */
		/* 82088D40h case   20:*/		if ( !regs.CR[0].eq ) { return 0x82088D74;  }
		/* 82088D40h case   20:*/		return 0x82088D44;
	}
	return 0x82088D44;
} // Block from 82088CF0h-82088D44h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82088D44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088D44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088D44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088D44);
		  /* 82088D44h */ case    0:  		/* lis R3, -16384 */
		/* 82088D44h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFFC000);
		/* 82088D44h case    0:*/		return 0x82088D48;
		  /* 82088D48h */ case    1:  		/* ori R3, R3, 13 */
		/* 82088D48h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xD);
		/* 82088D48h case    1:*/		return 0x82088D4C;
		  /* 82088D4Ch */ case    2:  		/* bl 6612 */
		/* 82088D4Ch case    2:*/		regs.LR = 0x82088D50; return 0x8208A720;
		/* 82088D4Ch case    2:*/		return 0x82088D50;
		  /* 82088D50h */ case    3:  		/* li R3, -1 */
		/* 82088D50h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 82088D50h case    3:*/		return 0x82088D54;
		  /* 82088D54h */ case    4:  		/* b 392 */
		/* 82088D54h case    4:*/		return 0x82088EDC;
		/* 82088D54h case    4:*/		return 0x82088D58;
	}
	return 0x82088D58;
} // Block from 82088D44h-82088D58h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82088D58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088D58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088D58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088D58);
		  /* 82088D58h */ case    0:  		/* li R30, 3 */
		/* 82088D58h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x3);
		/* 82088D58h case    0:*/		return 0x82088D5C;
		  /* 82088D5Ch */ case    1:  		/* b 24 */
		/* 82088D5Ch case    1:*/		return 0x82088D74;
		/* 82088D5Ch case    1:*/		return 0x82088D60;
	}
	return 0x82088D60;
} // Block from 82088D58h-82088D60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82088D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088D60);
		  /* 82088D60h */ case    0:  		/* li R30, 1 */
		/* 82088D60h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 82088D60h case    0:*/		return 0x82088D64;
		  /* 82088D64h */ case    1:  		/* b 16 */
		/* 82088D64h case    1:*/		return 0x82088D74;
		/* 82088D64h case    1:*/		return 0x82088D68;
	}
	return 0x82088D68;
} // Block from 82088D60h-82088D68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82088D68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088D68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088D68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088D68);
		  /* 82088D68h */ case    0:  		/* li R30, 5 */
		/* 82088D68h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x5);
		/* 82088D68h case    0:*/		return 0x82088D6C;
		  /* 82088D6Ch */ case    1:  		/* b 8 */
		/* 82088D6Ch case    1:*/		return 0x82088D74;
		/* 82088D6Ch case    1:*/		return 0x82088D70;
	}
	return 0x82088D70;
} // Block from 82088D68h-82088D70h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82088D70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088D70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088D70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088D70);
		  /* 82088D70h */ case    0:  		/* li R30, 2 */
		/* 82088D70h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x2);
		/* 82088D70h case    0:*/		return 0x82088D74;
	}
	return 0x82088D74;
} // Block from 82088D70h-82088D74h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82088D74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088D74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088D74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088D74);
		  /* 82088D74h */ case    0:  		/* mr R4, R29 */
		/* 82088D74h case    0:*/		regs.R4 = regs.R29;
		/* 82088D74h case    0:*/		return 0x82088D78;
		  /* 82088D78h */ case    1:  		/* addi R3, R1, 104 */
		/* 82088D78h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x68);
		/* 82088D78h case    1:*/		return 0x82088D7C;
		  /* 82088D7Ch */ case    2:  		/* bl 1983612 */
		/* 82088D7Ch case    2:*/		regs.LR = 0x82088D80; return 0x8226D1F8;
		/* 82088D7Ch case    2:*/		return 0x82088D80;
		  /* 82088D80h */ case    3:  		/* lhz R11, <#[R1 + 104]> */
		/* 82088D80h case    3:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 82088D80h case    3:*/		return 0x82088D84;
		  /* 82088D84h */ case    4:  		/* cmplwi CR6, R11, 1 */
		/* 82088D84h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82088D84h case    4:*/		return 0x82088D88;
		  /* 82088D88h */ case    5:  		/* bc 4, CR6_GT, 24 */
		/* 82088D88h case    5:*/		if ( !regs.CR[6].gt ) { return 0x82088DA0;  }
		/* 82088D88h case    5:*/		return 0x82088D8C;
		  /* 82088D8Ch */ case    6:  		/* add R11, R11, R29 */
		/* 82088D8Ch case    6:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 82088D8Ch case    6:*/		return 0x82088D90;
		  /* 82088D90h */ case    7:  		/* li R29, 1 */
		/* 82088D90h case    7:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 82088D90h case    7:*/		return 0x82088D94;
		  /* 82088D94h */ case    8:  		/* lbz R11, <#[R11 - 1]> */
		/* 82088D94h case    8:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0xFFFFFFFF) );
		/* 82088D94h case    8:*/		return 0x82088D98;
		  /* 82088D98h */ case    9:  		/* cmplwi CR6, R11, 92 */
		/* 82088D98h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005C);
		/* 82088D98h case    9:*/		return 0x82088D9C;
		  /* 82088D9Ch */ case   10:  		/* bc 12, CR6_EQ, 8 */
		/* 82088D9Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x82088DA4;  }
		/* 82088D9Ch case   10:*/		return 0x82088DA0;
	}
	return 0x82088DA0;
} // Block from 82088D74h-82088DA0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82088DA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088DA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088DA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088DA0);
		  /* 82088DA0h */ case    0:  		/* li R29, 0 */
		/* 82088DA0h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82088DA0h case    0:*/		return 0x82088DA4;
	}
	return 0x82088DA4;
} // Block from 82088DA0h-82088DA4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82088DA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088DA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088DA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088DA4);
		  /* 82088DA4h */ case    0:  		/* mr R11, R31 */
		/* 82088DA4h case    0:*/		regs.R11 = regs.R31;
		/* 82088DA4h case    0:*/		return 0x82088DA8;
		  /* 82088DA8h */ case    1:  		/* rlwinm R9, R31, 0, 4, 4 */
		/* 82088DA8h case    1:*/		cpu::op::rlwinm<0,0,4,4>(regs,&regs.R9,regs.R31);
		/* 82088DA8h case    1:*/		return 0x82088DAC;
		  /* 82088DACh */ case    2:  		/* rlwimi R11, R31, 28, 4, 4 */
		/* 82088DACh case    2:*/		cpu::op::rlwimi<0,28,4,4>(regs,&regs.R11,regs.R31);
		/* 82088DACh case    2:*/		return 0x82088DB0;
		  /* 82088DB0h */ case    3:  		/* rlwinm R8, R31, 0, 3, 3 */
		/* 82088DB0h case    3:*/		cpu::op::rlwinm<0,0,3,3>(regs,&regs.R8,regs.R31);
		/* 82088DB0h case    3:*/		return 0x82088DB4;
		  /* 82088DB4h */ case    4:  		/* rlwinm R11, R11, 31, 3, 5 */
		/* 82088DB4h case    4:*/		cpu::op::rlwinm<0,31,3,5>(regs,&regs.R11,regs.R11);
		/* 82088DB4h case    4:*/		return 0x82088DB8;
		  /* 82088DB8h */ case    5:  		/* rlwinm R10, R31, 0, 6, 6 */
		/* 82088DB8h case    5:*/		cpu::op::rlwinm<0,0,6,6>(regs,&regs.R10,regs.R31);
		/* 82088DB8h case    5:*/		return 0x82088DBC;
		  /* 82088DBCh */ case    6:  		/* rlwinm R11, R11, 0, 5, 3 */
		/* 82088DBCh case    6:*/		cpu::op::rlwinm<0,0,5,3>(regs,&regs.R11,regs.R11);
		/* 82088DBCh case    6:*/		return 0x82088DC0;
		  /* 82088DC0h */ case    7:  		/* li R7, -3 */
		/* 82088DC0h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0xFFFFFFFD);
		/* 82088DC0h case    7:*/		return 0x82088DC4;
		  /* 82088DC4h */ case    8:  		/* or R11, R11, R9 */
		/* 82088DC4h case    8:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82088DC4h case    8:*/		return 0x82088DC8;
		  /* 82088DC8h */ case    9:  		/* nor R9, R31, R31 */
		/* 82088DC8h case    9:*/		cpu::op::nor<0>(regs,&regs.R9,regs.R31,regs.R31);
		/* 82088DC8h case    9:*/		return 0x82088DCC;
		  /* 82088DCCh */ case   10:  		/* stw R7, <#[R1 + 120]> */
		/* 82088DCCh case   10:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000078) );
		/* 82088DCCh case   10:*/		return 0x82088DD0;
		  /* 82088DD0h */ case   11:  		/* rlwinm R11, R11, 24, 8, 31 */
		/* 82088DD0h case   11:*/		cpu::op::rlwinm<0,24,8,31>(regs,&regs.R11,regs.R11);
		/* 82088DD0h case   11:*/		return 0x82088DD4;
		  /* 82088DD4h */ case   12:  		/* rlwinm R9, R9, 7, 26, 26 */
		/* 82088DD4h case   12:*/		cpu::op::rlwinm<0,7,26,26>(regs,&regs.R9,regs.R9);
		/* 82088DD4h case   12:*/		return 0x82088DD8;
		  /* 82088DD8h */ case   13:  		/* or R11, R11, R8 */
		/* 82088DD8h case   13:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82088DD8h case   13:*/		return 0x82088DDC;
		  /* 82088DDCh */ case   14:  		/* li R6, 64 */
		/* 82088DDCh case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x40);
		/* 82088DDCh case   14:*/		return 0x82088DE0;
		  /* 82088DE0h */ case   15:  		/* rlwinm R11, R11, 26, 6, 31 */
		/* 82088DE0h case   15:*/		cpu::op::rlwinm<0,26,6,31>(regs,&regs.R11,regs.R11);
		/* 82088DE0h case   15:*/		return 0x82088DE4;
		  /* 82088DE4h */ case   16:  		/* addi R7, R1, 104 */
		/* 82088DE4h case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x68);
		/* 82088DE4h case   16:*/		return 0x82088DE8;
		  /* 82088DE8h */ case   17:  		/* stw R6, <#[R1 + 128]> */
		/* 82088DE8h case   17:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x00000080) );
		/* 82088DE8h case   17:*/		return 0x82088DEC;
		  /* 82088DECh */ case   18:  		/* or R11, R11, R10 */
		/* 82088DECh case   18:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82088DECh case   18:*/		return 0x82088DF0;
		  /* 82088DF0h */ case   19:  		/* rlwinm. R8, R31, 0, 5, 5 */
		/* 82088DF0h case   19:*/		cpu::op::rlwinm<1,0,5,5>(regs,&regs.R8,regs.R31);
		/* 82088DF0h case   19:*/		return 0x82088DF4;
		  /* 82088DF4h */ case   20:  		/* stw R7, <#[R1 + 124]> */
		/* 82088DF4h case   20:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x0000007C) );
		/* 82088DF4h case   20:*/		return 0x82088DF8;
		  /* 82088DF8h */ case   21:  		/* rlwinm R11, R11, 21, 11, 31 */
		/* 82088DF8h case   21:*/		cpu::op::rlwinm<0,21,11,31>(regs,&regs.R11,regs.R11);
		/* 82088DF8h case   21:*/		return 0x82088DFC;
		  /* 82088DFCh */ case   22:  		/* or R11, R11, R9 */
		/* 82088DFCh case   22:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82088DFCh case   22:*/		return 0x82088E00;
		  /* 82088E00h */ case   23:  		/* bc 12, CR0_EQ, 12 */
		/* 82088E00h case   23:*/		if ( regs.CR[0].eq ) { return 0x82088E0C;  }
		/* 82088E00h case   23:*/		return 0x82088E04;
		  /* 82088E04h */ case   24:  		/* ori R11, R11, 4096 */
		/* 82088E04h case   24:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1000);
		/* 82088E04h case   24:*/		return 0x82088E08;
		  /* 82088E08h */ case   25:  		/* oris R28, R28, 1 */
		/* 82088E08h case   25:*/		cpu::op::oris<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82088E08h case   25:*/		return 0x82088E0C;
	}
	return 0x82088E0C;
} // Block from 82088DA4h-82088E0Ch (26 instructions)

//////////////////////////////////////////////////////
// Block at 82088E0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088E0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088E0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088E0C);
		  /* 82088E0Ch */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 82088E0Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82088E0Ch case    0:*/		return 0x82088E10;
		  /* 82088E10h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 82088E10h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82088E18;  }
		/* 82088E10h case    1:*/		return 0x82088E14;
		  /* 82088E14h */ case    2:  		/* ori R11, R11, 64 */
		/* 82088E14h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x40);
		/* 82088E14h case    2:*/		return 0x82088E18;
	}
	return 0x82088E18;
} // Block from 82088E0Ch-82088E18h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82088E18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088E18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088E18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088E18);
		  /* 82088E18h */ case    0:  		/* stw R11, <#[R1 + 84]> */
		/* 82088E18h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82088E18h case    0:*/		return 0x82088E1C;
		  /* 82088E1Ch */ case    1:  		/* lis R6, -32217 */
		/* 82088E1Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8227);
		/* 82088E1Ch case    1:*/		return 0x82088E20;
		  /* 82088E20h */ case    2:  		/* oris R4, R28, 16 */
		/* 82088E20h case    2:*/		cpu::op::oris<0>(regs,&regs.R4,regs.R28,0x10);
		/* 82088E20h case    2:*/		return 0x82088E24;
		  /* 82088E24h */ case    3:  		/* mr R10, R30 */
		/* 82088E24h case    3:*/		regs.R10 = regs.R30;
		/* 82088E24h case    3:*/		return 0x82088E28;
		  /* 82088E28h */ case    4:  		/* mr R9, R26 */
		/* 82088E28h case    4:*/		regs.R9 = regs.R26;
		/* 82088E28h case    4:*/		return 0x82088E2C;
		  /* 82088E2Ch */ case    5:  		/* andi. R8, R31, 32679 */
		/* 82088E2Ch case    5:*/		cpu::op::andi<1>(regs,&regs.R8,regs.R31,0x7FA7);
		/* 82088E2Ch case    5:*/		return 0x82088E30;
		  /* 82088E30h */ case    6:  		/* lwz R11, <#[R6 + 6896]> */
		/* 82088E30h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00001AF0) );
		/* 82088E30h case    6:*/		return 0x82088E34;
		  /* 82088E34h */ case    7:  		/* li R7, 0 */
		/* 82088E34h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82088E34h case    7:*/		return 0x82088E38;
		  /* 82088E38h */ case    8:  		/* addi R6, R1, 112 */
		/* 82088E38h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x70);
		/* 82088E38h case    8:*/		return 0x82088E3C;
		  /* 82088E3Ch */ case    9:  		/* addi R5, R1, 120 */
		/* 82088E3Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x78);
		/* 82088E3Ch case    9:*/		return 0x82088E40;
		  /* 82088E40h */ case   10:  		/* ori R4, R4, 128 */
		/* 82088E40h case   10:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x80);
		/* 82088E40h case   10:*/		return 0x82088E44;
		  /* 82088E44h */ case   11:  		/* addi R3, R1, 96 */
		/* 82088E44h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 82088E44h case   11:*/		return 0x82088E48;
		  /* 82088E48h */ case   12:  		/* lwz R11, <#[R11 + 12]> */
		/* 82088E48h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82088E48h case   12:*/		return 0x82088E4C;
		  /* 82088E4Ch */ case   13:  		/* mtspr CTR, R11 */
		/* 82088E4Ch case   13:*/		regs.CTR = regs.R11;
		/* 82088E4Ch case   13:*/		return 0x82088E50;
		  /* 82088E50h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82088E50h case   14:*/		if ( 1 ) { regs.LR = 0x82088E54; return (uint32)regs.CTR; }
		/* 82088E50h case   14:*/		return 0x82088E54;
		  /* 82088E54h */ case   15:  		/* or. R31, R3, R3 */
		/* 82088E54h case   15:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82088E54h case   15:*/		return 0x82088E58;
		  /* 82088E58h */ case   16:  		/* bc 4, CR0_LT, 76 */
		/* 82088E58h case   16:*/		if ( !regs.CR[0].lt ) { return 0x82088EA4;  }
		/* 82088E58h case   16:*/		return 0x82088E5C;
		  /* 82088E5Ch */ case   17:  		/* mr R3, R31 */
		/* 82088E5Ch case   17:*/		regs.R3 = regs.R31;
		/* 82088E5Ch case   17:*/		return 0x82088E60;
		  /* 82088E60h */ case   18:  		/* bl 6336 */
		/* 82088E60h case   18:*/		regs.LR = 0x82088E64; return 0x8208A720;
		/* 82088E60h case   18:*/		return 0x82088E64;
		  /* 82088E64h */ case   19:  		/* lis R11, -16384 */
		/* 82088E64h case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC000);
		/* 82088E64h case   19:*/		return 0x82088E68;
		  /* 82088E68h */ case   20:  		/* ori R11, R11, 53 */
		/* 82088E68h case   20:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x35);
		/* 82088E68h case   20:*/		return 0x82088E6C;
		  /* 82088E6Ch */ case   21:  		/* cmpw CR6, R31, R11 */
		/* 82088E6Ch case   21:*/		cpu::op::cmpw<6>(regs,regs.R31,regs.R11);
		/* 82088E6Ch case   21:*/		return 0x82088E70;
		  /* 82088E70h */ case   22:  		/* bc 4, CR6_EQ, 12 */
		/* 82088E70h case   22:*/		if ( !regs.CR[6].eq ) { return 0x82088E7C;  }
		/* 82088E70h case   22:*/		return 0x82088E74;
		  /* 82088E74h */ case   23:  		/* li R3, 80 */
		/* 82088E74h case   23:*/		cpu::op::li<0>(regs,&regs.R3,0x50);
		/* 82088E74h case   23:*/		return 0x82088E78;
		  /* 82088E78h */ case   24:  		/* b 36 */
		/* 82088E78h case   24:*/		return 0x82088E9C;
		/* 82088E78h case   24:*/		return 0x82088E7C;
	}
	return 0x82088E7C;
} // Block from 82088E18h-82088E7Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 82088E7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088E7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088E7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088E7C);
		  /* 82088E7Ch */ case    0:  		/* lis R11, -16384 */
		/* 82088E7Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFC000);
		/* 82088E7Ch case    0:*/		return 0x82088E80;
		  /* 82088E80h */ case    1:  		/* ori R11, R11, 186 */
		/* 82088E80h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xBA);
		/* 82088E80h case    1:*/		return 0x82088E84;
		  /* 82088E84h */ case    2:  		/* cmpw CR6, R31, R11 */
		/* 82088E84h case    2:*/		cpu::op::cmpw<6>(regs,regs.R31,regs.R11);
		/* 82088E84h case    2:*/		return 0x82088E88;
		  /* 82088E88h */ case    3:  		/* bc 4, CR6_EQ, -312 */
		/* 82088E88h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82088D50;  }
		/* 82088E88h case    3:*/		return 0x82088E8C;
		  /* 82088E8Ch */ case    4:  		/* cmpwi CR6, R29, 0 */
		/* 82088E8Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 82088E8Ch case    4:*/		return 0x82088E90;
		  /* 82088E90h */ case    5:  		/* li R3, 3 */
		/* 82088E90h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 82088E90h case    5:*/		return 0x82088E94;
		  /* 82088E94h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 82088E94h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82088E9C;  }
		/* 82088E94h case    6:*/		return 0x82088E98;
		  /* 82088E98h */ case    7:  		/* li R3, 5 */
		/* 82088E98h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x5);
		/* 82088E98h case    7:*/		return 0x82088E9C;
	}
	return 0x82088E9C;
} // Block from 82088E7Ch-82088E9Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 82088E9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088E9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088E9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088E9C);
		  /* 82088E9Ch */ case    0:  		/* bl 6236 */
		/* 82088E9Ch case    0:*/		regs.LR = 0x82088EA0; return 0x8208A6F8;
		/* 82088E9Ch case    0:*/		return 0x82088EA0;
		  /* 82088EA0h */ case    1:  		/* b -336 */
		/* 82088EA0h case    1:*/		return 0x82088D50;
		/* 82088EA0h case    1:*/		return 0x82088EA4;
	}
	return 0x82088EA4;
} // Block from 82088E9Ch-82088EA4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82088EA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088EA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088EA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088EA4);
		  /* 82088EA4h */ case    0:  		/* lwz R11, <#[R1 + 116]> */
		/* 82088EA4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 82088EA4h case    0:*/		return 0x82088EA8;
		  /* 82088EA8h */ case    1:  		/* cmplwi CR6, R27, 2 */
		/* 82088EA8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000002);
		/* 82088EA8h case    1:*/		return 0x82088EAC;
		  /* 82088EACh */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 82088EACh case    2:*/		if ( !regs.CR[6].eq ) { return 0x82088EB8;  }
		/* 82088EACh case    2:*/		return 0x82088EB0;
		  /* 82088EB0h */ case    3:  		/* cmplwi CR6, R11, 3 */
		/* 82088EB0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82088EB0h case    3:*/		return 0x82088EB4;
		  /* 82088EB4h */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 82088EB4h case    4:*/		if ( regs.CR[6].eq ) { return 0x82088EC8;  }
		/* 82088EB4h case    4:*/		return 0x82088EB8;
	}
	return 0x82088EB8;
} // Block from 82088EA4h-82088EB8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82088EB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088EB8);
		  /* 82088EB8h */ case    0:  		/* cmplwi CR6, R27, 4 */
		/* 82088EB8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000004);
		/* 82088EB8h case    0:*/		return 0x82088EBC;
		  /* 82088EBCh */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 82088EBCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x82088ED0;  }
		/* 82088EBCh case    1:*/		return 0x82088EC0;
		  /* 82088EC0h */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 82088EC0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82088EC0h case    2:*/		return 0x82088EC4;
		  /* 82088EC4h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 82088EC4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82088ED0;  }
		/* 82088EC4h case    3:*/		return 0x82088EC8;
	}
	return 0x82088EC8;
} // Block from 82088EB8h-82088EC8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82088EC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088EC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088EC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088EC8);
		  /* 82088EC8h */ case    0:  		/* li R3, 183 */
		/* 82088EC8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0xB7);
		/* 82088EC8h case    0:*/		return 0x82088ECC;
		  /* 82088ECCh */ case    1:  		/* b 8 */
		/* 82088ECCh case    1:*/		return 0x82088ED4;
		/* 82088ECCh case    1:*/		return 0x82088ED0;
	}
	return 0x82088ED0;
} // Block from 82088EC8h-82088ED0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82088ED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088ED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088ED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088ED0);
		  /* 82088ED0h */ case    0:  		/* li R3, 0 */
		/* 82088ED0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82088ED0h case    0:*/		return 0x82088ED4;
	}
	return 0x82088ED4;
} // Block from 82088ED0h-82088ED4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82088ED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088ED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088ED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088ED4);
		  /* 82088ED4h */ case    0:  		/* bl 6180 */
		/* 82088ED4h case    0:*/		regs.LR = 0x82088ED8; return 0x8208A6F8;
		/* 82088ED4h case    0:*/		return 0x82088ED8;
		  /* 82088ED8h */ case    1:  		/* lwz R3, <#[R1 + 96]> */
		/* 82088ED8h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000060) );
		/* 82088ED8h case    1:*/		return 0x82088EDC;
	}
	return 0x82088EDC;
} // Block from 82088ED4h-82088EDCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82088EDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088EDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088EDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088EDC);
		  /* 82088EDCh */ case    0:  		/* addi R1, R1, 192 */
		/* 82088EDCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82088EDCh case    0:*/		return 0x82088EE0;
		  /* 82088EE0h */ case    1:  		/* b 33728 */
		/* 82088EE0h case    1:*/		return 0x820912A0;
		/* 82088EE0h case    1:*/		return 0x82088EE4;
		  /* 82088EE4h */ case    2:  		/* nop */
		/* 82088EE4h case    2:*/		cpu::op::nop();
		/* 82088EE4h case    2:*/		return 0x82088EE8;
		  /* 82088EE8h */ case    3:  		/* lis R10, -32215 */
		/* 82088EE8h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8229);
		/* 82088EE8h case    3:*/		return 0x82088EEC;
		  /* 82088EECh */ case    4:  		/* mr R11, R3 */
		/* 82088EECh case    4:*/		regs.R11 = regs.R3;
		/* 82088EECh case    4:*/		return 0x82088EF0;
		  /* 82088EF0h */ case    5:  		/* lwz R3, <#[R10 - 25528]> */
		/* 82088EF0h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0xFFFF9C48) );
		/* 82088EF0h case    5:*/		return 0x82088EF4;
		  /* 82088EF4h */ case    6:  		/* stw R11, <#[R10 - 25528]> */
		/* 82088EF4h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0xFFFF9C48) );
		/* 82088EF4h case    6:*/		return 0x82088EF8;
		  /* 82088EF8h */ case    7:  		/* bclr 20, CR0_LT */
		/* 82088EF8h case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82088EF8h case    7:*/		return 0x82088EFC;
	}
	return 0x82088EFC;
} // Block from 82088EDCh-82088EFCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 82088EFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088EFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088EFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088EFC);
		  /* 82088EFCh */ case    0:  		/* nop */
		/* 82088EFCh case    0:*/		cpu::op::nop();
		/* 82088EFCh case    0:*/		return 0x82088F00;
	}
	return 0x82088F00;
} // Block from 82088EFCh-82088F00h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82088F00h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088F00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088F00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088F00);
		  /* 82088F00h */ case    0:  		/* mfspr R12, LR */
		/* 82088F00h case    0:*/		regs.R12 = regs.LR;
		/* 82088F00h case    0:*/		return 0x82088F04;
		  /* 82088F04h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82088F04h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82088F04h case    1:*/		return 0x82088F08;
		  /* 82088F08h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82088F08h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82088F08h case    2:*/		return 0x82088F0C;
		  /* 82088F0Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82088F0Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82088F0Ch case    3:*/		return 0x82088F10;
		  /* 82088F10h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82088F10h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82088F10h case    4:*/		return 0x82088F14;
		  /* 82088F14h */ case    5:  		/* mr R30, R4 */
		/* 82088F14h case    5:*/		regs.R30 = regs.R4;
		/* 82088F14h case    5:*/		return 0x82088F18;
		  /* 82088F18h */ case    6:  		/* cmplwi CR6, R4, 6 */
		/* 82088F18h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000006);
		/* 82088F18h case    6:*/		return 0x82088F1C;
		  /* 82088F1Ch */ case    7:  		/* bc 4, CR6_LT, 64 */
		/* 82088F1Ch case    7:*/		if ( !regs.CR[6].lt ) { return 0x82088F5C;  }
		/* 82088F1Ch case    7:*/		return 0x82088F20;
		  /* 82088F20h */ case    8:  		/* lis R11, -32256 */
		/* 82088F20h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82088F20h case    8:*/		return 0x82088F24;
		  /* 82088F24h */ case    9:  		/* addi R5, R1, 80 */
		/* 82088F24h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82088F24h case    9:*/		return 0x82088F28;
		  /* 82088F28h */ case   10:  		/* lwz R4, <#[R11 + 1284]> */
		/* 82088F28h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000504) );
		/* 82088F28h case   10:*/		return 0x82088F2C;
		  /* 82088F2Ch */ case   11:  		/* bl 1983276 */
		/* 82088F2Ch case   11:*/		regs.LR = 0x82088F30; return 0x8226D258;
		/* 82088F2Ch case   11:*/		return 0x82088F30;
		  /* 82088F30h */ case   12:  		/* or. R31, R3, R3 */
		/* 82088F30h case   12:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82088F30h case   12:*/		return 0x82088F34;
		  /* 82088F34h */ case   13:  		/* bc 12, CR0_LT, 88 */
		/* 82088F34h case   13:*/		if ( regs.CR[0].lt ) { return 0x82088F8C;  }
		/* 82088F34h case   13:*/		return 0x82088F38;
		  /* 82088F38h */ case   14:  		/* li R11, 1 */
		/* 82088F38h case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82088F38h case   14:*/		return 0x82088F3C;
		  /* 82088F3Ch */ case   15:  		/* lwz R3, <#[R1 + 80]> */
		/* 82088F3Ch case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 82088F3Ch case   15:*/		return 0x82088F40;
		  /* 82088F40h */ case   16:  		/* addi R5, R1, 84 */
		/* 82088F40h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 82088F40h case   16:*/		return 0x82088F44;
		  /* 82088F44h */ case   17:  		/* slw R4, R11, R30 */
		/* 82088F44h case   17:*/		cpu::op::slw<0>(regs,&regs.R4,regs.R11,regs.R30);
		/* 82088F44h case   17:*/		return 0x82088F48;
		  /* 82088F48h */ case   18:  		/* bl 1983552 */
		/* 82088F48h case   18:*/		regs.LR = 0x82088F4C; return 0x8226D388;
		/* 82088F48h case   18:*/		return 0x82088F4C;
		  /* 82088F4Ch */ case   19:  		/* mr R31, R3 */
		/* 82088F4Ch case   19:*/		regs.R31 = regs.R3;
		/* 82088F4Ch case   19:*/		return 0x82088F50;
		  /* 82088F50h */ case   20:  		/* lwz R3, <#[R1 + 80]> */
		/* 82088F50h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 82088F50h case   20:*/		return 0x82088F54;
		  /* 82088F54h */ case   21:  		/* bl 1983204 */
		/* 82088F54h case   21:*/		regs.LR = 0x82088F58; return 0x8226D238;
		/* 82088F54h case   21:*/		return 0x82088F58;
		  /* 82088F58h */ case   22:  		/* b 12 */
		/* 82088F58h case   22:*/		return 0x82088F64;
		/* 82088F58h case   22:*/		return 0x82088F5C;
	}
	return 0x82088F5C;
} // Block from 82088F00h-82088F5Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 82088F5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088F5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088F5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088F5C);
		  /* 82088F5Ch */ case    0:  		/* lis R31, -16384 */
		/* 82088F5Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFFC000);
		/* 82088F5Ch case    0:*/		return 0x82088F60;
		  /* 82088F60h */ case    1:  		/* ori R31, R31, 13 */
		/* 82088F60h case    1:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0xD);
		/* 82088F60h case    1:*/		return 0x82088F64;
	}
	return 0x82088F64;
} // Block from 82088F5Ch-82088F64h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82088F64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088F64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088F64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088F64);
		  /* 82088F64h */ case    0:  		/* cmpwi CR6, R31, 0 */
		/* 82088F64h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 82088F64h case    0:*/		return 0x82088F68;
		  /* 82088F68h */ case    1:  		/* bc 12, CR6_LT, 36 */
		/* 82088F68h case    1:*/		if ( regs.CR[6].lt ) { return 0x82088F8C;  }
		/* 82088F68h case    1:*/		return 0x82088F6C;
		  /* 82088F6Ch */ case    2:  		/* lwz R11, <#[R1 + 84]> */
		/* 82088F6Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82088F6Ch case    2:*/		return 0x82088F70;
		  /* 82088F70h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 82088F70h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82088F70h case    3:*/		return 0x82088F74;
		  /* 82088F74h */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 82088F74h case    4:*/		if ( regs.CR[6].eq ) { return 0x82088F84;  }
		/* 82088F74h case    4:*/		return 0x82088F78;
		  /* 82088F78h */ case    5:  		/* cntlzw R11, R11 */
		/* 82088F78h case    5:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82088F78h case    5:*/		return 0x82088F7C;
		  /* 82088F7Ch */ case    6:  		/* subfic R3, R11, 31 */
		/* 82088F7Ch case    6:*/		cpu::op::subfic<0>(regs,&regs.R3,regs.R11,0x1F);
		/* 82088F7Ch case    6:*/		return 0x82088F80;
		  /* 82088F80h */ case    7:  		/* b 24 */
		/* 82088F80h case    7:*/		return 0x82088F98;
		/* 82088F80h case    7:*/		return 0x82088F84;
	}
	return 0x82088F84;
} // Block from 82088F64h-82088F84h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82088F84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088F84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088F84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088F84);
		  /* 82088F84h */ case    0:  		/* li R3, 0 */
		/* 82088F84h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82088F84h case    0:*/		return 0x82088F88;
		  /* 82088F88h */ case    1:  		/* b 16 */
		/* 82088F88h case    1:*/		return 0x82088F98;
		/* 82088F88h case    1:*/		return 0x82088F8C;
	}
	return 0x82088F8C;
} // Block from 82088F84h-82088F8Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82088F8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088F8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088F8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088F8C);
		  /* 82088F8Ch */ case    0:  		/* mr R3, R31 */
		/* 82088F8Ch case    0:*/		regs.R3 = regs.R31;
		/* 82088F8Ch case    0:*/		return 0x82088F90;
		  /* 82088F90h */ case    1:  		/* bl 5984 */
		/* 82088F90h case    1:*/		regs.LR = 0x82088F94; return 0x8208A6F0;
		/* 82088F90h case    1:*/		return 0x82088F94;
		  /* 82088F94h */ case    2:  		/* li R3, -1 */
		/* 82088F94h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 82088F94h case    2:*/		return 0x82088F98;
	}
	return 0x82088F98;
} // Block from 82088F8Ch-82088F98h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82088F98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088F98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088F98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088F98);
		  /* 82088F98h */ case    0:  		/* addi R1, R1, 112 */
		/* 82088F98h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82088F98h case    0:*/		return 0x82088F9C;
		  /* 82088F9Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82088F9Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82088F9Ch case    1:*/		return 0x82088FA0;
		  /* 82088FA0h */ case    2:  		/* mtspr LR, R12 */
		/* 82088FA0h case    2:*/		regs.LR = regs.R12;
		/* 82088FA0h case    2:*/		return 0x82088FA4;
		  /* 82088FA4h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82088FA4h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82088FA4h case    3:*/		return 0x82088FA8;
		  /* 82088FA8h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82088FA8h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82088FA8h case    4:*/		return 0x82088FAC;
		  /* 82088FACh */ case    5:  		/* bclr 20, CR0_LT */
		/* 82088FACh case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82088FACh case    5:*/		return 0x82088FB0;
	}
	return 0x82088FB0;
} // Block from 82088F98h-82088FB0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82088FB0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088FB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088FB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088FB0);
		  /* 82088FB0h */ case    0:  		/* mfspr R12, LR */
		/* 82088FB0h case    0:*/		regs.R12 = regs.LR;
		/* 82088FB0h case    0:*/		return 0x82088FB4;
		  /* 82088FB4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82088FB4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82088FB4h case    1:*/		return 0x82088FB8;
		  /* 82088FB8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82088FB8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82088FB8h case    2:*/		return 0x82088FBC;
		  /* 82088FBCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82088FBCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82088FBCh case    3:*/		return 0x82088FC0;
		  /* 82088FC0h */ case    4:  		/* lis R11, -32256 */
		/* 82088FC0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82088FC0h case    4:*/		return 0x82088FC4;
		  /* 82088FC4h */ case    5:  		/* mr R31, R3 */
		/* 82088FC4h case    5:*/		regs.R31 = regs.R3;
		/* 82088FC4h case    5:*/		return 0x82088FC8;
		  /* 82088FC8h */ case    6:  		/* lwz R11, <#[R11 + 1140]> */
		/* 82088FC8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000474) );
		/* 82088FC8h case    6:*/		return 0x82088FCC;
		  /* 82088FCCh */ case    7:  		/* lwz R11, <#[R11]> */
		/* 82088FCCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82088FCCh case    7:*/		return 0x82088FD0;
		  /* 82088FD0h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 82088FD0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82088FD0h case    8:*/		return 0x82088FD4;
		  /* 82088FD4h */ case    9:  		/* bc 12, CR6_EQ, 28 */
		/* 82088FD4h case    9:*/		if ( regs.CR[6].eq ) { return 0x82088FF0;  }
		/* 82088FD4h case    9:*/		return 0x82088FD8;
		  /* 82088FD8h */ case   10:  		/* lwz R11, <#[R11 + 24]> */
		/* 82088FD8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 82088FD8h case   10:*/		return 0x82088FDC;
		  /* 82088FDCh */ case   11:  		/* li R4, 0 */
		/* 82088FDCh case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82088FDCh case   11:*/		return 0x82088FE0;
		  /* 82088FE0h */ case   12:  		/* li R3, 10 */
		/* 82088FE0h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0xA);
		/* 82088FE0h case   12:*/		return 0x82088FE4;
		  /* 82088FE4h */ case   13:  		/* mtspr CTR, R11 */
		/* 82088FE4h case   13:*/		regs.CTR = regs.R11;
		/* 82088FE4h case   13:*/		return 0x82088FE8;
		  /* 82088FE8h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82088FE8h case   14:*/		if ( 1 ) { regs.LR = 0x82088FEC; return (uint32)regs.CTR; }
		/* 82088FE8h case   14:*/		return 0x82088FEC;
		  /* 82088FECh */ case   15:  		/* b 8 */
		/* 82088FECh case   15:*/		return 0x82088FF4;
		/* 82088FECh case   15:*/		return 0x82088FF0;
	}
	return 0x82088FF0;
} // Block from 82088FB0h-82088FF0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82088FF0h
// Function '?PrintAluScalar@Disassembler@D3D@@AAAXPAUaluFormat@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088FF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088FF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088FF0);
		  /* 82088FF0h */ case    0:  		/* li R3, 0 */
		/* 82088FF0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82088FF0h case    0:*/		return 0x82088FF4;
	}
	return 0x82088FF4;
} // Block from 82088FF0h-82088FF4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82088FF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82088FF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82088FF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82088FF4);
		  /* 82088FF4h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 82088FF4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82088FF4h case    0:*/		return 0x82088FF8;
		  /* 82088FF8h */ case    1:  		/* bc 4, CR6_EQ, 48 */
		/* 82088FF8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82089028;  }
		/* 82088FF8h case    1:*/		return 0x82088FFC;
		  /* 82088FFCh */ case    2:  		/* lis R11, -32215 */
		/* 82088FFCh case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 82088FFCh case    2:*/		return 0x82089000;
		  /* 82089000h */ case    3:  		/* lwz R10, <#[R11 - 25528]> */
		/* 82089000h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFF9C48) );
		/* 82089000h case    3:*/		return 0x82089004;
		  /* 82089004h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 82089004h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82089004h case    4:*/		return 0x82089008;
		  /* 82089008h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 82089008h case    5:*/		if ( regs.CR[6].eq ) { return 0x82089028;  }
		/* 82089008h case    5:*/		return 0x8208900C;
		  /* 8208900Ch */ case    6:  		/* rlwinm R11, R10, 0, 0, 31 */
		/* 8208900Ch case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R10);
		/* 8208900Ch case    6:*/		return 0x82089010;
		  /* 82089010h */ case    7:  		/* mr R3, R31 */
		/* 82089010h case    7:*/		regs.R3 = regs.R31;
		/* 82089010h case    7:*/		return 0x82089014;
		  /* 82089014h */ case    8:  		/* mtspr CTR, R11 */
		/* 82089014h case    8:*/		regs.CTR = regs.R11;
		/* 82089014h case    8:*/		return 0x82089018;
		  /* 82089018h */ case    9:  		/* bcctrl 20, CR0_LT */
		/* 82089018h case    9:*/		if ( 1 ) { regs.LR = 0x8208901C; return (uint32)regs.CTR; }
		/* 82089018h case    9:*/		return 0x8208901C;
		  /* 8208901Ch */ case   10:  		/* cmpwi CR6, R3, -1 */
		/* 8208901Ch case   10:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 8208901Ch case   10:*/		return 0x82089020;
		  /* 82089020h */ case   11:  		/* li R3, -1 */
		/* 82089020h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 82089020h case   11:*/		return 0x82089024;
		  /* 82089024h */ case   12:  		/* bc 12, CR6_EQ, 8 */
		/* 82089024h case   12:*/		if ( regs.CR[6].eq ) { return 0x8208902C;  }
		/* 82089024h case   12:*/		return 0x82089028;
	}
	return 0x82089028;
} // Block from 82088FF4h-82089028h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82089028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089028);
		  /* 82089028h */ case    0:  		/* li R3, 0 */
		/* 82089028h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82089028h case    0:*/		return 0x8208902C;
	}
	return 0x8208902C;
} // Block from 82089028h-8208902Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8208902Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208902C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208902C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208902C);
		  /* 8208902Ch */ case    0:  		/* addi R1, R1, 96 */
		/* 8208902Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8208902Ch case    0:*/		return 0x82089030;
		  /* 82089030h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82089030h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82089030h case    1:*/		return 0x82089034;
		  /* 82089034h */ case    2:  		/* mtspr LR, R12 */
		/* 82089034h case    2:*/		regs.LR = regs.R12;
		/* 82089034h case    2:*/		return 0x82089038;
		  /* 82089038h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 82089038h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82089038h case    3:*/		return 0x8208903C;
		  /* 8208903Ch */ case    4:  		/* bclr 20, CR0_LT */
		/* 8208903Ch case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8208903Ch case    4:*/		return 0x82089040;
	}
	return 0x82089040;
} // Block from 8208902Ch-82089040h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82089040h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089040);
		  /* 82089040h */ case    0:  		/* mr R9, R8 */
		/* 82089040h case    0:*/		regs.R9 = regs.R8;
		/* 82089040h case    0:*/		return 0x82089044;
		  /* 82089044h */ case    1:  		/* li R8, -1 */
		/* 82089044h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0xFFFFFFFF);
		/* 82089044h case    1:*/		return 0x82089048;
		  /* 82089048h */ case    2:  		/* b 6128 */
		/* 82089048h case    2:*/		return 0x8208A838;
		/* 82089048h case    2:*/		return 0x8208904C;
		  /* 8208904Ch */ case    3:  		/* nop */
		/* 8208904Ch case    3:*/		cpu::op::nop();
		/* 8208904Ch case    3:*/		return 0x82089050;
	}
	return 0x82089050;
} // Block from 82089040h-82089050h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82089050h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089050);
		  /* 82089050h */ case    0:  		/* mfspr R12, LR */
		/* 82089050h case    0:*/		regs.R12 = regs.LR;
		/* 82089050h case    0:*/		return 0x82089054;
		  /* 82089054h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82089054h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82089054h case    1:*/		return 0x82089058;
		  /* 82089058h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82089058h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82089058h case    2:*/		return 0x8208905C;
		  /* 8208905Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8208905Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8208905Ch case    3:*/		return 0x82089060;
		  /* 82089060h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82089060h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82089060h case    4:*/		return 0x82089064;
		  /* 82089064h */ case    5:  		/* lwz R11, <#[R3]> */
		/* 82089064h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82089064h case    5:*/		return 0x82089068;
		  /* 82089068h */ case    6:  		/* mr R31, R3 */
		/* 82089068h case    6:*/		regs.R31 = regs.R3;
		/* 82089068h case    6:*/		return 0x8208906C;
		  /* 8208906Ch */ case    7:  		/* mr R30, R4 */
		/* 8208906Ch case    7:*/		regs.R30 = regs.R4;
		/* 8208906Ch case    7:*/		return 0x82089070;
		  /* 82089070h */ case    8:  		/* cmplwi CR6, R11, 997 */
		/* 82089070h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000003E5);
		/* 82089070h case    8:*/		return 0x82089074;
		  /* 82089074h */ case    9:  		/* bc 4, CR6_EQ, 72 */
		/* 82089074h case    9:*/		if ( !regs.CR[6].eq ) { return 0x820890BC;  }
		/* 82089074h case    9:*/		return 0x82089078;
		  /* 82089078h */ case   10:  		/* cmpwi CR6, R5, 0 */
		/* 82089078h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 82089078h case   10:*/		return 0x8208907C;
		  /* 8208907Ch */ case   11:  		/* bc 12, CR6_EQ, 28 */
		/* 8208907Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x82089098;  }
		/* 8208907Ch case   11:*/		return 0x82089080;
		  /* 82089080h */ case   12:  		/* lwz R3, <#[R3 + 12]> */
		/* 82089080h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000000C) );
		/* 82089080h case   12:*/		return 0x82089084;
		  /* 82089084h */ case   13:  		/* cmplwi CR6, R3, 0 */
		/* 82089084h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82089084h case   13:*/		return 0x82089088;
		  /* 82089088h */ case   14:  		/* bc 12, CR6_EQ, 16 */
		/* 82089088h case   14:*/		if ( regs.CR[6].eq ) { return 0x82089098;  }
		/* 82089088h case   14:*/		return 0x8208908C;
		  /* 8208908Ch */ case   15:  		/* li R4, -1 */
		/* 8208908Ch case   15:*/		cpu::op::li<0>(regs,&regs.R4,0xFFFFFFFF);
		/* 8208908Ch case   15:*/		return 0x82089090;
		  /* 82089090h */ case   16:  		/* bl -1280 */
		/* 82089090h case   16:*/		regs.LR = 0x82089094; return 0x82088B90;
		/* 82089090h case   16:*/		return 0x82089094;
		  /* 82089094h */ case   17:  		/* b 8 */
		/* 82089094h case   17:*/		return 0x8208909C;
		/* 82089094h case   17:*/		return 0x82089098;
	}
	return 0x82089098;
} // Block from 82089050h-82089098h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82089098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089098);
		  /* 82089098h */ case    0:  		/* li R3, 258 */
		/* 82089098h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x102);
		/* 82089098h case    0:*/		return 0x8208909C;
	}
	return 0x8208909C;
} // Block from 82089098h-8208909Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8208909Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208909C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208909C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208909C);
		  /* 8208909Ch */ case    0:  		/* cmplwi CR6, R3, 258 */
		/* 8208909Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000102);
		/* 8208909Ch case    0:*/		return 0x820890A0;
		  /* 820890A0h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 820890A0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x820890AC;  }
		/* 820890A0h case    1:*/		return 0x820890A4;
		  /* 820890A4h */ case    2:  		/* li R3, 996 */
		/* 820890A4h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x3E4);
		/* 820890A4h case    2:*/		return 0x820890A8;
		  /* 820890A8h */ case    3:  		/* b 40 */
		/* 820890A8h case    3:*/		return 0x820890D0;
		/* 820890A8h case    3:*/		return 0x820890AC;
	}
	return 0x820890AC;
} // Block from 8208909Ch-820890ACh (4 instructions)

//////////////////////////////////////////////////////
// Block at 820890ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820890AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820890AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820890AC);
		  /* 820890ACh */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 820890ACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 820890ACh case    0:*/		return 0x820890B0;
		  /* 820890B0h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 820890B0h case    1:*/		if ( regs.CR[6].eq ) { return 0x820890BC;  }
		/* 820890B0h case    1:*/		return 0x820890B4;
		  /* 820890B4h */ case    2:  		/* bl 5708 */
		/* 820890B4h case    2:*/		regs.LR = 0x820890B8; return 0x8208A700;
		/* 820890B4h case    2:*/		return 0x820890B8;
		  /* 820890B8h */ case    3:  		/* b 24 */
		/* 820890B8h case    3:*/		return 0x820890D0;
		/* 820890B8h case    3:*/		return 0x820890BC;
	}
	return 0x820890BC;
} // Block from 820890ACh-820890BCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 820890BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820890BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820890BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820890BC);
		  /* 820890BCh */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 820890BCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 820890BCh case    0:*/		return 0x820890C0;
		  /* 820890C0h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 820890C0h case    1:*/		if ( regs.CR[6].eq ) { return 0x820890CC;  }
		/* 820890C0h case    1:*/		return 0x820890C4;
		  /* 820890C4h */ case    2:  		/* lwz R11, <#[R31 + 4]> */
		/* 820890C4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 820890C4h case    2:*/		return 0x820890C8;
		  /* 820890C8h */ case    3:  		/* stw R11, <#[R30]> */
		/* 820890C8h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 820890C8h case    3:*/		return 0x820890CC;
	}
	return 0x820890CC;
} // Block from 820890BCh-820890CCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 820890CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820890CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820890CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820890CC);
		  /* 820890CCh */ case    0:  		/* lwz R3, <#[R31]> */
		/* 820890CCh case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 820890CCh case    0:*/		return 0x820890D0;
	}
	return 0x820890D0;
} // Block from 820890CCh-820890D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820890D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820890D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820890D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820890D0);
		  /* 820890D0h */ case    0:  		/* addi R1, R1, 112 */
		/* 820890D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820890D0h case    0:*/		return 0x820890D4;
		  /* 820890D4h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820890D4h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820890D4h case    1:*/		return 0x820890D8;
		  /* 820890D8h */ case    2:  		/* mtspr LR, R12 */
		/* 820890D8h case    2:*/		regs.LR = regs.R12;
		/* 820890D8h case    2:*/		return 0x820890DC;
		  /* 820890DCh */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 820890DCh case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820890DCh case    3:*/		return 0x820890E0;
		  /* 820890E0h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 820890E0h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820890E0h case    4:*/		return 0x820890E4;
		  /* 820890E4h */ case    5:  		/* bclr 20, CR0_LT */
		/* 820890E4h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820890E4h case    5:*/		return 0x820890E8;
	}
	return 0x820890E8;
} // Block from 820890D0h-820890E8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820890E8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820890E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820890E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820890E8);
		  /* 820890E8h */ case    0:  		/* lis R11, -32256 */
		/* 820890E8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 820890E8h case    0:*/		return 0x820890EC;
		  /* 820890ECh */ case    1:  		/* lwz R3, <#[R11 + 1368]> */
		/* 820890ECh case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000558) );
		/* 820890ECh case    1:*/		return 0x820890F0;
		  /* 820890F0h */ case    2:  		/* bclr 20, CR0_LT */
		/* 820890F0h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820890F0h case    2:*/		return 0x820890F4;
	}
	return 0x820890F4;
} // Block from 820890E8h-820890F4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 820890F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820890F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820890F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820890F4);
		  /* 820890F4h */ case    0:  		/* nop */
		/* 820890F4h case    0:*/		cpu::op::nop();
		/* 820890F4h case    0:*/		return 0x820890F8;
	}
	return 0x820890F8;
} // Block from 820890F4h-820890F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820890F8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820890F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820890F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820890F8);
		  /* 820890F8h */ case    0:  		/* mfspr R12, LR */
		/* 820890F8h case    0:*/		regs.R12 = regs.LR;
		/* 820890F8h case    0:*/		return 0x820890FC;
		  /* 820890FCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820890FCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820890FCh case    1:*/		return 0x82089100;
		  /* 82089100h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82089100h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82089100h case    2:*/		return 0x82089104;
		  /* 82089104h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82089104h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82089104h case    3:*/		return 0x82089108;
		  /* 82089108h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82089108h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82089108h case    4:*/		return 0x8208910C;
		  /* 8208910Ch */ case    5:  		/* lis R11, -32255 */
		/* 8208910Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8208910Ch case    5:*/		return 0x82089110;
		  /* 82089110h */ case    6:  		/* lwz R10, <#[R11 - 24856]> */
		/* 82089110h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFF9EE8) );
		/* 82089110h case    6:*/		return 0x82089114;
		  /* 82089114h */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 82089114h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82089114h case    7:*/		return 0x82089118;
		  /* 82089118h */ case    8:  		/* bc 12, CR6_EQ, 16 */
		/* 82089118h case    8:*/		if ( regs.CR[6].eq ) { return 0x82089128;  }
		/* 82089118h case    8:*/		return 0x8208911C;
		  /* 8208911Ch */ case    9:  		/* rlwinm R11, R10, 0, 0, 31 */
		/* 8208911Ch case    9:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R10);
		/* 8208911Ch case    9:*/		return 0x82089120;
		  /* 82089120h */ case   10:  		/* mtspr CTR, R11 */
		/* 82089120h case   10:*/		regs.CTR = regs.R11;
		/* 82089120h case   10:*/		return 0x82089124;
		  /* 82089124h */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 82089124h case   11:*/		if ( 1 ) { regs.LR = 0x82089128; return (uint32)regs.CTR; }
		/* 82089124h case   11:*/		return 0x82089128;
	}
	return 0x82089128;
} // Block from 820890F8h-82089128h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82089128h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089128);
		  /* 82089128h */ case    0:  		/* lis R10, -32217 */
		/* 82089128h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 82089128h case    0:*/		return 0x8208912C;
		  /* 8208912Ch */ case    1:  		/* lis R11, -32217 */
		/* 8208912Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8208912Ch case    1:*/		return 0x82089130;
		  /* 82089130h */ case    2:  		/* addi R10, R10, 48 */
		/* 82089130h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x30);
		/* 82089130h case    2:*/		return 0x82089134;
		  /* 82089134h */ case    3:  		/* addi R30, R11, 60 */
		/* 82089134h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x3C);
		/* 82089134h case    3:*/		return 0x82089138;
		  /* 82089138h */ case    4:  		/* mr R31, R10 */
		/* 82089138h case    4:*/		regs.R31 = regs.R10;
		/* 82089138h case    4:*/		return 0x8208913C;
		  /* 8208913Ch */ case    5:  		/* li R3, 0 */
		/* 8208913Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8208913Ch case    5:*/		return 0x82089140;
		  /* 82089140h */ case    6:  		/* cmplw CR6, R10, R30 */
		/* 82089140h case    6:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 82089140h case    6:*/		return 0x82089144;
		  /* 82089144h */ case    7:  		/* bc 4, CR6_LT, 52 */
		/* 82089144h case    7:*/		if ( !regs.CR[6].lt ) { return 0x82089178;  }
		/* 82089144h case    7:*/		return 0x82089148;
		  /* 82089148h */ case    8:  		/* cmpwi CR6, R3, 0 */
		/* 82089148h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82089148h case    8:*/		return 0x8208914C;
		  /* 8208914Ch */ case    9:  		/* bc 4, CR6_EQ, 116 */
		/* 8208914Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x820891C0;  }
		/* 8208914Ch case    9:*/		return 0x82089150;
		  /* 82089150h */ case   10:  		/* lwz R11, <#[R31]> */
		/* 82089150h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82089150h case   10:*/		return 0x82089154;
		  /* 82089154h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 82089154h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82089154h case   11:*/		return 0x82089158;
		  /* 82089158h */ case   12:  		/* bc 12, CR6_EQ, 12 */
		/* 82089158h case   12:*/		if ( regs.CR[6].eq ) { return 0x82089164;  }
		/* 82089158h case   12:*/		return 0x8208915C;
		  /* 8208915Ch */ case   13:  		/* mtspr CTR, R11 */
		/* 8208915Ch case   13:*/		regs.CTR = regs.R11;
		/* 8208915Ch case   13:*/		return 0x82089160;
		  /* 82089160h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82089160h case   14:*/		if ( 1 ) { regs.LR = 0x82089164; return (uint32)regs.CTR; }
		/* 82089160h case   14:*/		return 0x82089164;
	}
	return 0x82089164;
} // Block from 82089128h-82089164h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82089164h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089164( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089164) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089164);
		  /* 82089164h */ case    0:  		/* addi R31, R31, 4 */
		/* 82089164h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82089164h case    0:*/		return 0x82089168;
		  /* 82089168h */ case    1:  		/* cmplw CR6, R31, R30 */
		/* 82089168h case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 82089168h case    1:*/		return 0x8208916C;
		  /* 8208916Ch */ case    2:  		/* bc 12, CR6_LT, -36 */
		/* 8208916Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x82089148;  }
		/* 8208916Ch case    2:*/		return 0x82089170;
		  /* 82089170h */ case    3:  		/* cmpwi CR6, R3, 0 */
		/* 82089170h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82089170h case    3:*/		return 0x82089174;
		  /* 82089174h */ case    4:  		/* bc 4, CR6_EQ, 76 */
		/* 82089174h case    4:*/		if ( !regs.CR[6].eq ) { return 0x820891C0;  }
		/* 82089174h case    4:*/		return 0x82089178;
	}
	return 0x82089178;
} // Block from 82089164h-82089178h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82089178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089178);
		  /* 82089178h */ case    0:  		/* lis R10, -32217 */
		/* 82089178h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 82089178h case    0:*/		return 0x8208917C;
		  /* 8208917Ch */ case    1:  		/* lis R11, -32217 */
		/* 8208917Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8208917Ch case    1:*/		return 0x82089180;
		  /* 82089180h */ case    2:  		/* addi R10, R10, 16 */
		/* 82089180h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x10);
		/* 82089180h case    2:*/		return 0x82089184;
		  /* 82089184h */ case    3:  		/* addi R30, R11, 44 */
		/* 82089184h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x2C);
		/* 82089184h case    3:*/		return 0x82089188;
		  /* 82089188h */ case    4:  		/* mr R31, R10 */
		/* 82089188h case    4:*/		regs.R31 = regs.R10;
		/* 82089188h case    4:*/		return 0x8208918C;
		  /* 8208918Ch */ case    5:  		/* cmplw CR6, R10, R30 */
		/* 8208918Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 8208918Ch case    5:*/		return 0x82089190;
		  /* 82089190h */ case    6:  		/* bc 4, CR6_LT, 44 */
		/* 82089190h case    6:*/		if ( !regs.CR[6].lt ) { return 0x820891BC;  }
		/* 82089190h case    6:*/		return 0x82089194;
		  /* 82089194h */ case    7:  		/* lwz R11, <#[R31]> */
		/* 82089194h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82089194h case    7:*/		return 0x82089198;
		  /* 82089198h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 82089198h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82089198h case    8:*/		return 0x8208919C;
		  /* 8208919Ch */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 8208919Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x820891B0;  }
		/* 8208919Ch case    9:*/		return 0x820891A0;
		  /* 820891A0h */ case   10:  		/* cmpwi CR6, R11, -1 */
		/* 820891A0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0xFFFFFFFF);
		/* 820891A0h case   10:*/		return 0x820891A4;
		  /* 820891A4h */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 820891A4h case   11:*/		if ( regs.CR[6].eq ) { return 0x820891B0;  }
		/* 820891A4h case   11:*/		return 0x820891A8;
		  /* 820891A8h */ case   12:  		/* mtspr CTR, R11 */
		/* 820891A8h case   12:*/		regs.CTR = regs.R11;
		/* 820891A8h case   12:*/		return 0x820891AC;
		  /* 820891ACh */ case   13:  		/* bcctrl 20, CR0_LT */
		/* 820891ACh case   13:*/		if ( 1 ) { regs.LR = 0x820891B0; return (uint32)regs.CTR; }
		/* 820891ACh case   13:*/		return 0x820891B0;
	}
	return 0x820891B0;
} // Block from 82089178h-820891B0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 820891B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820891B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820891B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820891B0);
		  /* 820891B0h */ case    0:  		/* addi R31, R31, 4 */
		/* 820891B0h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 820891B0h case    0:*/		return 0x820891B4;
		  /* 820891B4h */ case    1:  		/* cmplw CR6, R31, R30 */
		/* 820891B4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 820891B4h case    1:*/		return 0x820891B8;
		  /* 820891B8h */ case    2:  		/* bc 12, CR6_LT, -36 */
		/* 820891B8h case    2:*/		if ( regs.CR[6].lt ) { return 0x82089194;  }
		/* 820891B8h case    2:*/		return 0x820891BC;
	}
	return 0x820891BC;
} // Block from 820891B0h-820891BCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 820891BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820891BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820891BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820891BC);
		  /* 820891BCh */ case    0:  		/* li R3, 0 */
		/* 820891BCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 820891BCh case    0:*/		return 0x820891C0;
	}
	return 0x820891C0;
} // Block from 820891BCh-820891C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820891C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820891C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820891C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820891C0);
		  /* 820891C0h */ case    0:  		/* addi R1, R1, 112 */
		/* 820891C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 820891C0h case    0:*/		return 0x820891C4;
		  /* 820891C4h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 820891C4h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820891C4h case    1:*/		return 0x820891C8;
		  /* 820891C8h */ case    2:  		/* mtspr LR, R12 */
		/* 820891C8h case    2:*/		regs.LR = regs.R12;
		/* 820891C8h case    2:*/		return 0x820891CC;
		  /* 820891CCh */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 820891CCh case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820891CCh case    3:*/		return 0x820891D0;
		  /* 820891D0h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 820891D0h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820891D0h case    4:*/		return 0x820891D4;
		  /* 820891D4h */ case    5:  		/* bclr 20, CR0_LT */
		/* 820891D4h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820891D4h case    5:*/		return 0x820891D8;
	}
	return 0x820891D8;
} // Block from 820891C0h-820891D8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 820891D8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820891D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820891D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820891D8);
		  /* 820891D8h */ case    0:  		/* mfspr R12, LR */
		/* 820891D8h case    0:*/		regs.R12 = regs.LR;
		/* 820891D8h case    0:*/		return 0x820891DC;
		  /* 820891DCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 820891DCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820891DCh case    1:*/		return 0x820891E0;
		  /* 820891E0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 820891E0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820891E0h case    2:*/		return 0x820891E4;
		  /* 820891E4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 820891E4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820891E4h case    3:*/		return 0x820891E8;
		  /* 820891E8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 820891E8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820891E8h case    4:*/		return 0x820891EC;
		  /* 820891ECh */ case    5:  		/* lis R10, -32217 */
		/* 820891ECh case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 820891ECh case    5:*/		return 0x820891F0;
		  /* 820891F0h */ case    6:  		/* lis R11, -32217 */
		/* 820891F0h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 820891F0h case    6:*/		return 0x820891F4;
		  /* 820891F4h */ case    7:  		/* addi R10, R10, 0 */
		/* 820891F4h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x0);
		/* 820891F4h case    7:*/		return 0x820891F8;
		  /* 820891F8h */ case    8:  		/* addi R30, R11, 12 */
		/* 820891F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xC);
		/* 820891F8h case    8:*/		return 0x820891FC;
		  /* 820891FCh */ case    9:  		/* mr R31, R10 */
		/* 820891FCh case    9:*/		regs.R31 = regs.R10;
		/* 820891FCh case    9:*/		return 0x82089200;
		  /* 82089200h */ case   10:  		/* li R3, 0 */
		/* 82089200h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82089200h case   10:*/		return 0x82089204;
		  /* 82089204h */ case   11:  		/* cmplw CR6, R10, R30 */
		/* 82089204h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 82089204h case   11:*/		return 0x82089208;
		  /* 82089208h */ case   12:  		/* bc 4, CR6_LT, 44 */
		/* 82089208h case   12:*/		if ( !regs.CR[6].lt ) { return 0x82089234;  }
		/* 82089208h case   12:*/		return 0x8208920C;
		  /* 8208920Ch */ case   13:  		/* cmpwi CR6, R3, 0 */
		/* 8208920Ch case   13:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8208920Ch case   13:*/		return 0x82089210;
		  /* 82089210h */ case   14:  		/* bc 4, CR6_EQ, 36 */
		/* 82089210h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82089234;  }
		/* 82089210h case   14:*/		return 0x82089214;
		  /* 82089214h */ case   15:  		/* lwz R11, <#[R31]> */
		/* 82089214h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82089214h case   15:*/		return 0x82089218;
		  /* 82089218h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 82089218h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82089218h case   16:*/		return 0x8208921C;
		  /* 8208921Ch */ case   17:  		/* bc 12, CR6_EQ, 12 */
		/* 8208921Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x82089228;  }
		/* 8208921Ch case   17:*/		return 0x82089220;
		  /* 82089220h */ case   18:  		/* mtspr CTR, R11 */
		/* 82089220h case   18:*/		regs.CTR = regs.R11;
		/* 82089220h case   18:*/		return 0x82089224;
		  /* 82089224h */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 82089224h case   19:*/		if ( 1 ) { regs.LR = 0x82089228; return (uint32)regs.CTR; }
		/* 82089224h case   19:*/		return 0x82089228;
	}
	return 0x82089228;
} // Block from 820891D8h-82089228h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82089228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089228);
		  /* 82089228h */ case    0:  		/* addi R31, R31, 4 */
		/* 82089228h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82089228h case    0:*/		return 0x8208922C;
		  /* 8208922Ch */ case    1:  		/* cmplw CR6, R31, R30 */
		/* 8208922Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 8208922Ch case    1:*/		return 0x82089230;
		  /* 82089230h */ case    2:  		/* bc 12, CR6_LT, -36 */
		/* 82089230h case    2:*/		if ( regs.CR[6].lt ) { return 0x8208920C;  }
		/* 82089230h case    2:*/		return 0x82089234;
	}
	return 0x82089234;
} // Block from 82089228h-82089234h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82089234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089234);
		  /* 82089234h */ case    0:  		/* addi R1, R1, 112 */
		/* 82089234h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82089234h case    0:*/		return 0x82089238;
		  /* 82089238h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82089238h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82089238h case    1:*/		return 0x8208923C;
		  /* 8208923Ch */ case    2:  		/* mtspr LR, R12 */
		/* 8208923Ch case    2:*/		regs.LR = regs.R12;
		/* 8208923Ch case    2:*/		return 0x82089240;
		  /* 82089240h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82089240h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82089240h case    3:*/		return 0x82089244;
		  /* 82089244h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82089244h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82089244h case    4:*/		return 0x82089248;
		  /* 82089248h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82089248h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82089248h case    5:*/		return 0x8208924C;
	}
	return 0x8208924C;
} // Block from 82089234h-8208924Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8208924Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208924C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208924C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208924C);
		  /* 8208924Ch */ case    0:  		/* nop */
		/* 8208924Ch case    0:*/		cpu::op::nop();
		/* 8208924Ch case    0:*/		return 0x82089250;
	}
	return 0x82089250;
} // Block from 8208924Ch-82089250h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82089250h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089250);
		  /* 82089250h */ case    0:  		/* mfspr R12, LR */
		/* 82089250h case    0:*/		regs.R12 = regs.LR;
		/* 82089250h case    0:*/		return 0x82089254;
		  /* 82089254h */ case    1:  		/* bl 32772 */
		/* 82089254h case    1:*/		regs.LR = 0x82089258; return 0x82091258;
		/* 82089254h case    1:*/		return 0x82089258;
		  /* 82089258h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82089258h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82089258h case    2:*/		return 0x8208925C;
		  /* 8208925Ch */ case    3:  		/* lis R11, -32217 */
		/* 8208925Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8208925Ch case    3:*/		return 0x82089260;
		  /* 82089260h */ case    4:  		/* mr R28, R3 */
		/* 82089260h case    4:*/		regs.R28 = regs.R3;
		/* 82089260h case    4:*/		return 0x82089264;
		  /* 82089264h */ case    5:  		/* addi R29, R11, 6792 */
		/* 82089264h case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x1A88);
		/* 82089264h case    5:*/		return 0x82089268;
		  /* 82089268h */ case    6:  		/* mr R3, R29 */
		/* 82089268h case    6:*/		regs.R3 = regs.R29;
		/* 82089268h case    6:*/		return 0x8208926C;
		  /* 8208926Ch */ case    7:  		/* bl 1981900 */
		/* 8208926Ch case    7:*/		regs.LR = 0x82089270; return 0x8226D038;
		/* 8208926Ch case    7:*/		return 0x82089270;
		  /* 82089270h */ case    8:  		/* lis R11, -32217 */
		/* 82089270h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82089270h case    8:*/		return 0x82089274;
		  /* 82089274h */ case    9:  		/* addi R31, R11, 6820 */
		/* 82089274h case    9:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x1AA4);
		/* 82089274h case    9:*/		return 0x82089278;
		  /* 82089278h */ case   10:  		/* lwz R11, <#[R11 + 6820]> */
		/* 82089278h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00001AA4) );
		/* 82089278h case   10:*/		return 0x8208927C;
		  /* 8208927Ch */ case   11:  		/* cmplw CR6, R11, R31 */
		/* 8208927Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 8208927Ch case   11:*/		return 0x82089280;
		  /* 82089280h */ case   12:  		/* mr R30, R11 */
		/* 82089280h case   12:*/		regs.R30 = regs.R11;
		/* 82089280h case   12:*/		return 0x82089284;
		  /* 82089284h */ case   13:  		/* bc 12, CR6_EQ, 36 */
		/* 82089284h case   13:*/		if ( regs.CR[6].eq ) { return 0x820892A8;  }
		/* 82089284h case   13:*/		return 0x82089288;
		  /* 82089288h */ case   14:  		/* mr R11, R30 */
		/* 82089288h case   14:*/		regs.R11 = regs.R30;
		/* 82089288h case   14:*/		return 0x8208928C;
		  /* 8208928Ch */ case   15:  		/* lwz R30, <#[R30]> */
		/* 8208928Ch case   15:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000000) );
		/* 8208928Ch case   15:*/		return 0x82089290;
		  /* 82089290h */ case   16:  		/* mr R3, R28 */
		/* 82089290h case   16:*/		regs.R3 = regs.R28;
		/* 82089290h case   16:*/		return 0x82089294;
		  /* 82089294h */ case   17:  		/* lwz R11, <#[R11 + 8]> */
		/* 82089294h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82089294h case   17:*/		return 0x82089298;
		  /* 82089298h */ case   18:  		/* mtspr CTR, R11 */
		/* 82089298h case   18:*/		regs.CTR = regs.R11;
		/* 82089298h case   18:*/		return 0x8208929C;
		  /* 8208929Ch */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 8208929Ch case   19:*/		if ( 1 ) { regs.LR = 0x820892A0; return (uint32)regs.CTR; }
		/* 8208929Ch case   19:*/		return 0x820892A0;
		  /* 820892A0h */ case   20:  		/* cmplw CR6, R30, R31 */
		/* 820892A0h case   20:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R31);
		/* 820892A0h case   20:*/		return 0x820892A4;
		  /* 820892A4h */ case   21:  		/* bc 4, CR6_EQ, -28 */
		/* 820892A4h case   21:*/		if ( !regs.CR[6].eq ) { return 0x82089288;  }
		/* 820892A4h case   21:*/		return 0x820892A8;
	}
	return 0x820892A8;
} // Block from 82089250h-820892A8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 820892A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820892A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820892A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820892A8);
		  /* 820892A8h */ case    0:  		/* mr R3, R29 */
		/* 820892A8h case    0:*/		regs.R3 = regs.R29;
		/* 820892A8h case    0:*/		return 0x820892AC;
		  /* 820892ACh */ case    1:  		/* bl 1981820 */
		/* 820892ACh case    1:*/		regs.LR = 0x820892B0; return 0x8226D028;
		/* 820892ACh case    1:*/		return 0x820892B0;
		  /* 820892B0h */ case    2:  		/* addi R1, R1, 128 */
		/* 820892B0h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 820892B0h case    2:*/		return 0x820892B4;
		  /* 820892B4h */ case    3:  		/* b 32756 */
		/* 820892B4h case    3:*/		return 0x820912A8;
		/* 820892B4h case    3:*/		return 0x820892B8;
	}
	return 0x820892B8;
} // Block from 820892A8h-820892B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 820892B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820892B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820892B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820892B8);
		  /* 820892B8h */ case    0:  		/* mfspr R12, LR */
		/* 820892B8h case    0:*/		regs.R12 = regs.LR;
		/* 820892B8h case    0:*/		return 0x820892BC;
		  /* 820892BCh */ case    1:  		/* bl 32672 */
		/* 820892BCh case    1:*/		regs.LR = 0x820892C0; return 0x8209125C;
		/* 820892BCh case    1:*/		return 0x820892C0;
		  /* 820892C0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 820892C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 820892C0h case    2:*/		return 0x820892C4;
		  /* 820892C4h */ case    3:  		/* lis R11, -32217 */
		/* 820892C4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 820892C4h case    3:*/		return 0x820892C8;
		  /* 820892C8h */ case    4:  		/* mr R31, R3 */
		/* 820892C8h case    4:*/		regs.R31 = regs.R3;
		/* 820892C8h case    4:*/		return 0x820892CC;
		  /* 820892CCh */ case    5:  		/* addi R30, R11, 6792 */
		/* 820892CCh case    5:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x1A88);
		/* 820892CCh case    5:*/		return 0x820892D0;
		  /* 820892D0h */ case    6:  		/* mr R29, R4 */
		/* 820892D0h case    6:*/		regs.R29 = regs.R4;
		/* 820892D0h case    6:*/		return 0x820892D4;
		  /* 820892D4h */ case    7:  		/* mr R3, R30 */
		/* 820892D4h case    7:*/		regs.R3 = regs.R30;
		/* 820892D4h case    7:*/		return 0x820892D8;
		  /* 820892D8h */ case    8:  		/* bl 1981792 */
		/* 820892D8h case    8:*/		regs.LR = 0x820892DC; return 0x8226D038;
		/* 820892D8h case    8:*/		return 0x820892DC;
		  /* 820892DCh */ case    9:  		/* cmpwi CR6, R29, 0 */
		/* 820892DCh case    9:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 820892DCh case    9:*/		return 0x820892E0;
		  /* 820892E0h */ case   10:  		/* bc 12, CR6_EQ, 36 */
		/* 820892E0h case   10:*/		if ( regs.CR[6].eq ) { return 0x82089304;  }
		/* 820892E0h case   10:*/		return 0x820892E4;
		  /* 820892E4h */ case   11:  		/* lis R11, -32217 */
		/* 820892E4h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 820892E4h case   11:*/		return 0x820892E8;
		  /* 820892E8h */ case   12:  		/* addi R10, R11, 6820 */
		/* 820892E8h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1AA4);
		/* 820892E8h case   12:*/		return 0x820892EC;
		  /* 820892ECh */ case   13:  		/* lwz R11, <#[R10 + 4]> */
		/* 820892ECh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 820892ECh case   13:*/		return 0x820892F0;
		  /* 820892F0h */ case   14:  		/* stw R10, <#[R31]> */
		/* 820892F0h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 820892F0h case   14:*/		return 0x820892F4;
		  /* 820892F4h */ case   15:  		/* stw R11, <#[R31 + 4]> */
		/* 820892F4h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 820892F4h case   15:*/		return 0x820892F8;
		  /* 820892F8h */ case   16:  		/* stw R31, <#[R11]> */
		/* 820892F8h case   16:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 820892F8h case   16:*/		return 0x820892FC;
		  /* 820892FCh */ case   17:  		/* stw R31, <#[R10 + 4]> */
		/* 820892FCh case   17:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + 0x00000004) );
		/* 820892FCh case   17:*/		return 0x82089300;
		  /* 82089300h */ case   18:  		/* b 20 */
		/* 82089300h case   18:*/		return 0x82089314;
		/* 82089300h case   18:*/		return 0x82089304;
	}
	return 0x82089304;
} // Block from 820892B8h-82089304h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82089304h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089304( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089304) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089304);
		  /* 82089304h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82089304h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82089304h case    0:*/		return 0x82089308;
		  /* 82089308h */ case    1:  		/* lwz R10, <#[R31 + 4]> */
		/* 82089308h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82089308h case    1:*/		return 0x8208930C;
		  /* 8208930Ch */ case    2:  		/* stw R11, <#[R10]> */
		/* 8208930Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8208930Ch case    2:*/		return 0x82089310;
		  /* 82089310h */ case    3:  		/* stw R10, <#[R11 + 4]> */
		/* 82089310h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82089310h case    3:*/		return 0x82089314;
	}
	return 0x82089314;
} // Block from 82089304h-82089314h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82089314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089314);
		  /* 82089314h */ case    0:  		/* mr R3, R30 */
		/* 82089314h case    0:*/		regs.R3 = regs.R30;
		/* 82089314h case    0:*/		return 0x82089318;
		  /* 82089318h */ case    1:  		/* bl 1981712 */
		/* 82089318h case    1:*/		regs.LR = 0x8208931C; return 0x8226D028;
		/* 82089318h case    1:*/		return 0x8208931C;
		  /* 8208931Ch */ case    2:  		/* addi R1, R1, 112 */
		/* 8208931Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8208931Ch case    2:*/		return 0x82089320;
		  /* 82089320h */ case    3:  		/* b 32652 */
		/* 82089320h case    3:*/		return 0x820912AC;
		/* 82089320h case    3:*/		return 0x82089324;
		  /* 82089324h */ case    4:  		/* nop */
		/* 82089324h case    4:*/		cpu::op::nop();
		/* 82089324h case    4:*/		return 0x82089328;
	}
	return 0x82089328;
} // Block from 82089314h-82089328h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82089328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089328);
		  /* 82089328h */ case    0:  		/* mfspr R12, LR */
		/* 82089328h case    0:*/		regs.R12 = regs.LR;
		/* 82089328h case    0:*/		return 0x8208932C;
		  /* 8208932Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8208932Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208932Ch case    1:*/		return 0x82089330;
		  /* 82089330h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82089330h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82089330h case    2:*/		return 0x82089334;
		  /* 82089334h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82089334h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82089334h case    3:*/		return 0x82089338;
		  /* 82089338h */ case    4:  		/* stwu R1, <#[R1 - 160]> */
		/* 82089338h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82089338h case    4:*/		return 0x8208933C;
		  /* 8208933Ch */ case    5:  		/* lis R11, -32256 */
		/* 8208933Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8208933Ch case    5:*/		return 0x82089340;
		  /* 82089340h */ case    6:  		/* lis R30, 16 */
		/* 82089340h case    6:*/		cpu::op::lis<0>(regs,&regs.R30,0x10);
		/* 82089340h case    6:*/		return 0x82089344;
		  /* 82089344h */ case    7:  		/* lwz R11, <#[R11 + 1376]> */
		/* 82089344h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000560) );
		/* 82089344h case    7:*/		return 0x82089348;
		  /* 82089348h */ case    8:  		/* lwz R11, <#[R11]> */
		/* 82089348h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82089348h case    8:*/		return 0x8208934C;
		  /* 8208934Ch */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 8208934Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8208934Ch case    9:*/		return 0x82089350;
		  /* 82089350h */ case   10:  		/* bc 12, CR6_EQ, 48 */
		/* 82089350h case   10:*/		if ( regs.CR[6].eq ) { return 0x82089380;  }
		/* 82089350h case   10:*/		return 0x82089354;
		  /* 82089354h */ case   11:  		/* lis R4, 2 */
		/* 82089354h case   11:*/		cpu::op::lis<0>(regs,&regs.R4,0x2);
		/* 82089354h case   11:*/		return 0x82089358;
		  /* 82089358h */ case   12:  		/* lwz R3, <#[R11 + 88]> */
		/* 82089358h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000058) );
		/* 82089358h case   12:*/		return 0x8208935C;
		  /* 8208935Ch */ case   13:  		/* ori R4, R4, 1025 */
		/* 8208935Ch case   13:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x401);
		/* 8208935Ch case   13:*/		return 0x82089360;
		  /* 82089360h */ case   14:  		/* bl 1982520 */
		/* 82089360h case   14:*/		regs.LR = 0x82089364; return 0x8226D398;
		/* 82089360h case   14:*/		return 0x82089364;
		  /* 82089364h */ case   15:  		/* cmplwi CR0, R3, 0 */
		/* 82089364h case   15:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82089364h case   15:*/		return 0x82089368;
		  /* 82089368h */ case   16:  		/* bc 12, CR0_EQ, 24 */
		/* 82089368h case   16:*/		if ( regs.CR[0].eq ) { return 0x82089380;  }
		/* 82089368h case   16:*/		return 0x8208936C;
		  /* 8208936Ch */ case   17:  		/* lwz R30, <#[R3]> */
		/* 8208936Ch case   17:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 8208936Ch case   17:*/		return 0x82089370;
		  /* 82089370h */ case   18:  		/* cmplwi CR6, R30, 0 */
		/* 82089370h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82089370h case   18:*/		return 0x82089374;
		  /* 82089374h */ case   19:  		/* bc 4, CR6_EQ, 12 */
		/* 82089374h case   19:*/		if ( !regs.CR[6].eq ) { return 0x82089380;  }
		/* 82089374h case   19:*/		return 0x82089378;
		  /* 82089378h */ case   20:  		/* li R3, 1 */
		/* 82089378h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82089378h case   20:*/		return 0x8208937C;
		  /* 8208937Ch */ case   21:  		/* b 104 */
		/* 8208937Ch case   21:*/		return 0x820893E4;
		/* 8208937Ch case   21:*/		return 0x82089380;
	}
	return 0x82089380;
} // Block from 82089328h-82089380h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82089380h
// Function '?PrintFetchArgComma@Disassembler@D3D@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089380( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089380) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089380);
		  /* 82089380h */ case    0:  		/* li R10, 6 */
		/* 82089380h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x6);
		/* 82089380h case    0:*/		return 0x82089384;
		  /* 82089384h */ case    1:  		/* addi R11, R1, 72 */
		/* 82089384h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x48);
		/* 82089384h case    1:*/		return 0x82089388;
		  /* 82089388h */ case    2:  		/* li R9, 0 */
		/* 82089388h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82089388h case    2:*/		return 0x8208938C;
		  /* 8208938Ch */ case    3:  		/* mtspr CTR, R10 */
		/* 8208938Ch case    3:*/		regs.CTR = regs.R10;
		/* 8208938Ch case    3:*/		return 0x82089390;
		  /* 82089390h */ case    4:  		/* stdu R9, <#[R11 + 8]> */
		/* 82089390h case    4:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		regs.R11 = (uint32)(regs.R11 + 0x00000008);
		/* 82089390h case    4:*/		return 0x82089394;
		  /* 82089394h */ case    5:  		/* bc 16, CR0_LT, -4 */
		/* 82089394h case    5:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82089390;  }
		/* 82089394h case    5:*/		return 0x82089398;
		  /* 82089398h */ case    6:  		/* lis R31, -32215 */
		/* 82089398h case    6:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8229);
		/* 82089398h case    6:*/		return 0x8208939C;
		  /* 8208939Ch */ case    7:  		/* li R11, 48 */
		/* 8208939Ch case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x30);
		/* 8208939Ch case    7:*/		return 0x820893A0;
		  /* 820893A0h */ case    8:  		/* stw R11, <#[R1 + 80]> */
		/* 820893A0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 820893A0h case    8:*/		return 0x820893A4;
		  /* 820893A4h */ case    9:  		/* lwz R11, <#[R31 - 25544]> */
		/* 820893A4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0xFFFF9C38) );
		/* 820893A4h case    9:*/		return 0x820893A8;
		  /* 820893A8h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 820893A8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 820893A8h case   10:*/		return 0x820893AC;
		  /* 820893ACh */ case   11:  		/* bc 4, CR6_EQ, 36 */
		/* 820893ACh case   11:*/		if ( !regs.CR[6].eq ) { return 0x820893D0;  }
		/* 820893ACh case   11:*/		return 0x820893B0;
		  /* 820893B0h */ case   12:  		/* addi R8, R1, 80 */
		/* 820893B0h case   12:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 820893B0h case   12:*/		return 0x820893B4;
		  /* 820893B4h */ case   13:  		/* li R7, 0 */
		/* 820893B4h case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 820893B4h case   13:*/		return 0x820893B8;
		  /* 820893B8h */ case   14:  		/* li R6, 4096 */
		/* 820893B8h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x1000);
		/* 820893B8h case   14:*/		return 0x820893BC;
		  /* 820893BCh */ case   15:  		/* mr R5, R30 */
		/* 820893BCh case   15:*/		regs.R5 = regs.R30;
		/* 820893BCh case   15:*/		return 0x820893C0;
		  /* 820893C0h */ case   16:  		/* li R4, 0 */
		/* 820893C0h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 820893C0h case   16:*/		return 0x820893C4;
		  /* 820893C4h */ case   17:  		/* li R3, 2 */
		/* 820893C4h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x2);
		/* 820893C4h case   17:*/		return 0x820893C8;
		  /* 820893C8h */ case   18:  		/* bl 11648 */
		/* 820893C8h case   18:*/		regs.LR = 0x820893CC; return 0x8208C148;
		/* 820893C8h case   18:*/		return 0x820893CC;
		  /* 820893CCh */ case   19:  		/* stw R3, <#[R31 - 25544]> */
		/* 820893CCh case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0xFFFF9C38) );
		/* 820893CCh case   19:*/		return 0x820893D0;
	}
	return 0x820893D0;
} // Block from 82089380h-820893D0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 820893D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820893D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820893D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820893D0);
		  /* 820893D0h */ case    0:  		/* bl 5336 */
		/* 820893D0h case    0:*/		regs.LR = 0x820893D4; return 0x8208A8A8;
		/* 820893D0h case    0:*/		return 0x820893D4;
		  /* 820893D4h */ case    1:  		/* lwz R11, <#[R31 - 25544]> */
		/* 820893D4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0xFFFF9C38) );
		/* 820893D4h case    1:*/		return 0x820893D8;
		  /* 820893D8h */ case    2:  		/* addi R11, R11, 0 */
		/* 820893D8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x0);
		/* 820893D8h case    2:*/		return 0x820893DC;
		  /* 820893DCh */ case    3:  		/* addic R10, R11, -1 */
		/* 820893DCh case    3:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 820893DCh case    3:*/		return 0x820893E0;
		  /* 820893E0h */ case    4:  		/* subfe R3, R10, R11 */
		/* 820893E0h case    4:*/		cpu::op::subfe<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 820893E0h case    4:*/		return 0x820893E4;
	}
	return 0x820893E4;
} // Block from 820893D0h-820893E4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 820893E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820893E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820893E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820893E4);
		  /* 820893E4h */ case    0:  		/* addi R1, R1, 160 */
		/* 820893E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 820893E4h case    0:*/		return 0x820893E8;
	}
	return 0x820893E8;
} // Block from 820893E4h-820893E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 820893E8h
// Function '?PrintBooleanArgument@Disassembler@D3D@@AAAXPBDKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820893E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820893E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820893E8);
		  /* 820893E8h */ case    0:  		/* lwz R12, <#[R1 - 8]> */
		/* 820893E8h case    0:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 820893E8h case    0:*/		return 0x820893EC;
		  /* 820893ECh */ case    1:  		/* mtspr LR, R12 */
		/* 820893ECh case    1:*/		regs.LR = regs.R12;
		/* 820893ECh case    1:*/		return 0x820893F0;
		  /* 820893F0h */ case    2:  		/* ld R30, <#[R1 - 24]> */
		/* 820893F0h case    2:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 820893F0h case    2:*/		return 0x820893F4;
		  /* 820893F4h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 820893F4h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 820893F4h case    3:*/		return 0x820893F8;
		  /* 820893F8h */ case    4:  		/* bclr 20, CR0_LT */
		/* 820893F8h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 820893F8h case    4:*/		return 0x820893FC;
	}
	return 0x820893FC;
} // Block from 820893E8h-820893FCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 820893FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block820893FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x820893FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x820893FC);
		  /* 820893FCh */ case    0:  		/* nop */
		/* 820893FCh case    0:*/		cpu::op::nop();
		/* 820893FCh case    0:*/		return 0x82089400;
	}
	return 0x82089400;
} // Block from 820893FCh-82089400h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82089400h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089400);
		  /* 82089400h */ case    0:  		/* mfspr R12, LR */
		/* 82089400h case    0:*/		regs.R12 = regs.LR;
		/* 82089400h case    0:*/		return 0x82089404;
		  /* 82089404h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82089404h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82089404h case    1:*/		return 0x82089408;
		  /* 82089408h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 82089408h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82089408h case    2:*/		return 0x8208940C;
		  /* 8208940Ch */ case    3:  		/* bl -228 */
		/* 8208940Ch case    3:*/		regs.LR = 0x82089410; return 0x82089328;
		/* 8208940Ch case    3:*/		return 0x82089410;
		  /* 82089410h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 82089410h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82089410h case    4:*/		return 0x82089414;
		  /* 82089414h */ case    5:  		/* bc 4, CR0_EQ, 52 */
		/* 82089414h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82089448;  }
		/* 82089414h case    5:*/		return 0x82089418;
		  /* 82089418h */ case    6:  		/* lis R11, -32256 */
		/* 82089418h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82089418h case    6:*/		return 0x8208941C;
		  /* 8208941Ch */ case    7:  		/* lwz R11, <#[R11 + 1140]> */
		/* 8208941Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000474) );
		/* 8208941Ch case    7:*/		return 0x82089420;
		  /* 82089420h */ case    8:  		/* lwz R11, <#[R11]> */
		/* 82089420h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82089420h case    8:*/		return 0x82089424;
		  /* 82089424h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 82089424h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82089424h case    9:*/		return 0x82089428;
		  /* 82089428h */ case   10:  		/* bc 12, CR6_EQ, 24 */
		/* 82089428h case   10:*/		if ( regs.CR[6].eq ) { return 0x82089440;  }
		/* 82089428h case   10:*/		return 0x8208942C;
		  /* 8208942Ch */ case   11:  		/* lwz R11, <#[R11 + 24]> */
		/* 8208942Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 8208942Ch case   11:*/		return 0x82089430;
		  /* 82089430h */ case   12:  		/* li R4, 0 */
		/* 82089430h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82089430h case   12:*/		return 0x82089434;
		  /* 82089434h */ case   13:  		/* li R3, 2 */
		/* 82089434h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x2);
		/* 82089434h case   13:*/		return 0x82089438;
		  /* 82089438h */ case   14:  		/* mtspr CTR, R11 */
		/* 82089438h case   14:*/		regs.CTR = regs.R11;
		/* 82089438h case   14:*/		return 0x8208943C;
		  /* 8208943Ch */ case   15:  		/* bcctrl 20, CR0_LT */
		/* 8208943Ch case   15:*/		if ( 1 ) { regs.LR = 0x82089440; return (uint32)regs.CTR; }
		/* 8208943Ch case   15:*/		return 0x82089440;
	}
	return 0x82089440;
} // Block from 82089400h-82089440h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82089440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089440);
		  /* 82089440h */ case    0:  		/* li R3, 1 */
		/* 82089440h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82089440h case    0:*/		return 0x82089444;
		  /* 82089444h */ case    1:  		/* bl 1982308 */
		/* 82089444h case    1:*/		regs.LR = 0x82089448; return 0x8226D3A8;
		/* 82089444h case    1:*/		return 0x82089448;
	}
	return 0x82089448;
} // Block from 82089440h-82089448h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82089448h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089448);
		  /* 82089448h */ case    0:  		/* addi R1, R1, 96 */
		/* 82089448h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82089448h case    0:*/		return 0x8208944C;
		  /* 8208944Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8208944Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208944Ch case    1:*/		return 0x82089450;
	}
	return 0x82089450;
} // Block from 82089448h-82089450h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82089450h
// Function '?PrintFetch@Disassembler@D3D@@AAAXPBDHK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089450);
		  /* 82089450h */ case    0:  		/* mtspr LR, R12 */
		/* 82089450h case    0:*/		regs.LR = regs.R12;
		/* 82089450h case    0:*/		return 0x82089454;
		  /* 82089454h */ case    1:  		/* bclr 20, CR0_LT */
		/* 82089454h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82089454h case    1:*/		return 0x82089458;
	}
	return 0x82089458;
} // Block from 82089450h-82089458h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82089458h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089458);
		  /* 82089458h */ case    0:  		/* nop */
		/* 82089458h case    0:*/		cpu::op::nop();
		/* 82089458h case    0:*/		return 0x8208945C;
		  /* 8208945Ch */ case    1:  		/* nop */
		/* 8208945Ch case    1:*/		cpu::op::nop();
		/* 8208945Ch case    1:*/		return 0x82089460;
		  /* 82089460h */ case    2:  		/* li R6, 16 */
		/* 82089460h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x10);
		/* 82089460h case    2:*/		return 0x82089464;
		  /* 82089464h */ case    3:  		/* li R7, 32 */
		/* 82089464h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x20);
		/* 82089464h case    3:*/		return 0x82089468;
		  /* 82089468h */ case    4:  		/* li R8, 48 */
		/* 82089468h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x30);
		/* 82089468h case    4:*/		return 0x8208946C;
		  /* 8208946Ch */ case    5:  		/* li R9, 64 */
		/* 8208946Ch case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x40);
		/* 8208946Ch case    5:*/		return 0x82089470;
		  /* 82089470h */ case    6:  		/* li R10, 80 */
		/* 82089470h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x50);
		/* 82089470h case    6:*/		return 0x82089474;
		  /* 82089474h */ case    7:  		/* li R11, 96 */
		/* 82089474h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x60);
		/* 82089474h case    7:*/		return 0x82089478;
		  /* 82089478h */ case    8:  		/* li R12, 112 */
		/* 82089478h case    8:*/		cpu::op::li<0>(regs,&regs.R12,0x70);
		/* 82089478h case    8:*/		return 0x8208947C;
		  /* 8208947Ch */ case    9:  		/* cmplwi CR6, R5, 1024 */
		/* 8208947Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000400);
		/* 8208947Ch case    9:*/		return 0x82089480;
		  /* 82089480h */ case   10:  		/* bc 12, CR6_LT, 680 */
		/* 82089480h case   10:*/		if ( regs.CR[6].lt ) { return 0x82089728;  }
		/* 82089480h case   10:*/		return 0x82089484;
		  /* 82089484h */ case   11:  		/* addi R0, R5, -1024 */
		/* 82089484h case   11:*/		cpu::op::addi<0>(regs,&regs.R0,regs.R5,0xFFFFFC00);
		/* 82089484h case   11:*/		return 0x82089488;
		  /* 82089488h */ case   12:  		/* cmplwi CR6, R0, 1024 */
		/* 82089488h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R0,0x00000400);
		/* 82089488h case   12:*/		return 0x8208948C;
		  /* 8208948Ch */ case   13:  		/* bc 12, CR6_LT, 8 */
		/* 8208948Ch case   13:*/		if ( regs.CR[6].lt ) { return 0x82089494;  }
		/* 8208948Ch case   13:*/		return 0x82089490;
		  /* 82089490h */ case   14:  		/* li R0, 1024 */
		/* 82089490h case   14:*/		cpu::op::li<0>(regs,&regs.R0,0x400);
		/* 82089490h case   14:*/		return 0x82089494;
	}
	return 0x82089494;
} // Block from 82089458h-82089494h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82089494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089494);
		  /* 82089494h */ case    0:  		/* lvx VR1, <#[R4]> */
		/* 82089494h case    0:*/		cpu::mem::lvx( regs, &regs.VR1, (uint32)(regs.R4 + 0x00000000) );
		/* 82089494h case    0:*/		return 0x82089498;
		  /* 82089498h */ case    1:  		/* lvx VR2, <#[R6 + R4]> */
		/* 82089498h case    1:*/		cpu::mem::lvx( regs, &regs.VR2, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 82089498h case    1:*/		return 0x8208949C;
		  /* 8208949Ch */ case    2:  		/* lvx VR3, <#[R7 + R4]> */
		/* 8208949Ch case    2:*/		cpu::mem::lvx( regs, &regs.VR3, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 8208949Ch case    2:*/		return 0x820894A0;
		  /* 820894A0h */ case    3:  		/* lvx VR4, <#[R8 + R4]> */
		/* 820894A0h case    3:*/		cpu::mem::lvx( regs, &regs.VR4, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 820894A0h case    3:*/		return 0x820894A4;
		  /* 820894A4h */ case    4:  		/* lvx VR5, <#[R9 + R4]> */
		/* 820894A4h case    4:*/		cpu::mem::lvx( regs, &regs.VR5, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 820894A4h case    4:*/		return 0x820894A8;
		  /* 820894A8h */ case    5:  		/* lvx VR6, <#[R10 + R4]> */
		/* 820894A8h case    5:*/		cpu::mem::lvx( regs, &regs.VR6, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 820894A8h case    5:*/		return 0x820894AC;
		  /* 820894ACh */ case    6:  		/* lvx VR7, <#[R11 + R4]> */
		/* 820894ACh case    6:*/		cpu::mem::lvx( regs, &regs.VR7, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 820894ACh case    6:*/		return 0x820894B0;
		  /* 820894B0h */ case    7:  		/* lvx VR8, <#[R12 + R4]> */
		/* 820894B0h case    7:*/		cpu::mem::lvx( regs, &regs.VR8, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 820894B0h case    7:*/		return 0x820894B4;
		  /* 820894B4h */ case    8:  		/* dcbt R4, R0 */
		/* 820894B4h case    8:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 820894B4h case    8:*/		return 0x820894B8;
		  /* 820894B8h */ case    9:  		/* dcbf R0, R4 */
		/* 820894B8h case    9:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 820894B8h case    9:*/		return 0x820894BC;
		  /* 820894BCh */ case   10:  		/* addi R4, R4, 128 */
		/* 820894BCh case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 820894BCh case   10:*/		return 0x820894C0;
		  /* 820894C0h */ case   11:  		/* lvx VR9, <#[R4]> */
		/* 820894C0h case   11:*/		cpu::mem::lvx( regs, &regs.VR9, (uint32)(regs.R4 + 0x00000000) );
		/* 820894C0h case   11:*/		return 0x820894C4;
		  /* 820894C4h */ case   12:  		/* lvx VR10, <#[R6 + R4]> */
		/* 820894C4h case   12:*/		cpu::mem::lvx( regs, &regs.VR10, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 820894C4h case   12:*/		return 0x820894C8;
		  /* 820894C8h */ case   13:  		/* lvx VR11, <#[R7 + R4]> */
		/* 820894C8h case   13:*/		cpu::mem::lvx( regs, &regs.VR11, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 820894C8h case   13:*/		return 0x820894CC;
		  /* 820894CCh */ case   14:  		/* lvx VR12, <#[R8 + R4]> */
		/* 820894CCh case   14:*/		cpu::mem::lvx( regs, &regs.VR12, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 820894CCh case   14:*/		return 0x820894D0;
		  /* 820894D0h */ case   15:  		/* lvx VR13, <#[R9 + R4]> */
		/* 820894D0h case   15:*/		cpu::mem::lvx( regs, &regs.VR13, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 820894D0h case   15:*/		return 0x820894D4;
		  /* 820894D4h */ case   16:  		/* lvx VR14, <#[R10 + R4]> */
		/* 820894D4h case   16:*/		cpu::mem::lvx( regs, &regs.VR14, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 820894D4h case   16:*/		return 0x820894D8;
		  /* 820894D8h */ case   17:  		/* lvx VR15, <#[R11 + R4]> */
		/* 820894D8h case   17:*/		cpu::mem::lvx( regs, &regs.VR15, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 820894D8h case   17:*/		return 0x820894DC;
		  /* 820894DCh */ case   18:  		/* lvx VR16, <#[R12 + R4]> */
		/* 820894DCh case   18:*/		cpu::mem::lvx( regs, &regs.VR16, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 820894DCh case   18:*/		return 0x820894E0;
		  /* 820894E0h */ case   19:  		/* dcbt R4, R0 */
		/* 820894E0h case   19:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 820894E0h case   19:*/		return 0x820894E4;
		  /* 820894E4h */ case   20:  		/* dcbf R0, R4 */
		/* 820894E4h case   20:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 820894E4h case   20:*/		return 0x820894E8;
		  /* 820894E8h */ case   21:  		/* addi R4, R4, 128 */
		/* 820894E8h case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 820894E8h case   21:*/		return 0x820894EC;
		  /* 820894ECh */ case   22:  		/* lvx VR17, <#[R4]> */
		/* 820894ECh case   22:*/		cpu::mem::lvx( regs, &regs.VR17, (uint32)(regs.R4 + 0x00000000) );
		/* 820894ECh case   22:*/		return 0x820894F0;
		  /* 820894F0h */ case   23:  		/* lvx VR18, <#[R6 + R4]> */
		/* 820894F0h case   23:*/		cpu::mem::lvx( regs, &regs.VR18, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 820894F0h case   23:*/		return 0x820894F4;
		  /* 820894F4h */ case   24:  		/* lvx VR19, <#[R7 + R4]> */
		/* 820894F4h case   24:*/		cpu::mem::lvx( regs, &regs.VR19, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 820894F4h case   24:*/		return 0x820894F8;
		  /* 820894F8h */ case   25:  		/* lvx VR20, <#[R8 + R4]> */
		/* 820894F8h case   25:*/		cpu::mem::lvx( regs, &regs.VR20, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 820894F8h case   25:*/		return 0x820894FC;
		  /* 820894FCh */ case   26:  		/* lvx VR21, <#[R9 + R4]> */
		/* 820894FCh case   26:*/		cpu::mem::lvx( regs, &regs.VR21, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 820894FCh case   26:*/		return 0x82089500;
		  /* 82089500h */ case   27:  		/* lvx VR22, <#[R10 + R4]> */
		/* 82089500h case   27:*/		cpu::mem::lvx( regs, &regs.VR22, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82089500h case   27:*/		return 0x82089504;
		  /* 82089504h */ case   28:  		/* lvx VR23, <#[R11 + R4]> */
		/* 82089504h case   28:*/		cpu::mem::lvx( regs, &regs.VR23, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82089504h case   28:*/		return 0x82089508;
		  /* 82089508h */ case   29:  		/* lvx VR24, <#[R12 + R4]> */
		/* 82089508h case   29:*/		cpu::mem::lvx( regs, &regs.VR24, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 82089508h case   29:*/		return 0x8208950C;
		  /* 8208950Ch */ case   30:  		/* dcbt R4, R0 */
		/* 8208950Ch case   30:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 8208950Ch case   30:*/		return 0x82089510;
		  /* 82089510h */ case   31:  		/* dcbf R0, R4 */
		/* 82089510h case   31:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 82089510h case   31:*/		return 0x82089514;
		  /* 82089514h */ case   32:  		/* addi R4, R4, 128 */
		/* 82089514h case   32:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 82089514h case   32:*/		return 0x82089518;
		  /* 82089518h */ case   33:  		/* lvx VR25, <#[R4]> */
		/* 82089518h case   33:*/		cpu::mem::lvx( regs, &regs.VR25, (uint32)(regs.R4 + 0x00000000) );
		/* 82089518h case   33:*/		return 0x8208951C;
		  /* 8208951Ch */ case   34:  		/* lvx VR26, <#[R6 + R4]> */
		/* 8208951Ch case   34:*/		cpu::mem::lvx( regs, &regs.VR26, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 8208951Ch case   34:*/		return 0x82089520;
		  /* 82089520h */ case   35:  		/* lvx VR27, <#[R7 + R4]> */
		/* 82089520h case   35:*/		cpu::mem::lvx( regs, &regs.VR27, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 82089520h case   35:*/		return 0x82089524;
		  /* 82089524h */ case   36:  		/* lvx VR28, <#[R8 + R4]> */
		/* 82089524h case   36:*/		cpu::mem::lvx( regs, &regs.VR28, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 82089524h case   36:*/		return 0x82089528;
		  /* 82089528h */ case   37:  		/* lvx VR29, <#[R9 + R4]> */
		/* 82089528h case   37:*/		cpu::mem::lvx( regs, &regs.VR29, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 82089528h case   37:*/		return 0x8208952C;
		  /* 8208952Ch */ case   38:  		/* lvx VR30, <#[R10 + R4]> */
		/* 8208952Ch case   38:*/		cpu::mem::lvx( regs, &regs.VR30, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8208952Ch case   38:*/		return 0x82089530;
		  /* 82089530h */ case   39:  		/* lvx VR31, <#[R11 + R4]> */
		/* 82089530h case   39:*/		cpu::mem::lvx( regs, &regs.VR31, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82089530h case   39:*/		return 0x82089534;
		  /* 82089534h */ case   40:  		/* lvx VR32, <#[R12 + R4]> */
		/* 82089534h case   40:*/		cpu::mem::lvx( regs, &regs.VR32, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 82089534h case   40:*/		return 0x82089538;
		  /* 82089538h */ case   41:  		/* dcbt R4, R0 */
		/* 82089538h case   41:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 82089538h case   41:*/		return 0x8208953C;
		  /* 8208953Ch */ case   42:  		/* dcbf R0, R4 */
		/* 8208953Ch case   42:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 8208953Ch case   42:*/		return 0x82089540;
		  /* 82089540h */ case   43:  		/* addi R4, R4, 128 */
		/* 82089540h case   43:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 82089540h case   43:*/		return 0x82089544;
		  /* 82089544h */ case   44:  		/* lvx VR33, <#[R4]> */
		/* 82089544h case   44:*/		cpu::mem::lvx( regs, &regs.VR33, (uint32)(regs.R4 + 0x00000000) );
		/* 82089544h case   44:*/		return 0x82089548;
		  /* 82089548h */ case   45:  		/* lvx VR34, <#[R6 + R4]> */
		/* 82089548h case   45:*/		cpu::mem::lvx( regs, &regs.VR34, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 82089548h case   45:*/		return 0x8208954C;
		  /* 8208954Ch */ case   46:  		/* lvx VR35, <#[R7 + R4]> */
		/* 8208954Ch case   46:*/		cpu::mem::lvx( regs, &regs.VR35, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 8208954Ch case   46:*/		return 0x82089550;
		  /* 82089550h */ case   47:  		/* lvx VR36, <#[R8 + R4]> */
		/* 82089550h case   47:*/		cpu::mem::lvx( regs, &regs.VR36, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 82089550h case   47:*/		return 0x82089554;
		  /* 82089554h */ case   48:  		/* lvx VR37, <#[R9 + R4]> */
		/* 82089554h case   48:*/		cpu::mem::lvx( regs, &regs.VR37, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 82089554h case   48:*/		return 0x82089558;
		  /* 82089558h */ case   49:  		/* lvx VR38, <#[R10 + R4]> */
		/* 82089558h case   49:*/		cpu::mem::lvx( regs, &regs.VR38, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82089558h case   49:*/		return 0x8208955C;
		  /* 8208955Ch */ case   50:  		/* lvx VR39, <#[R11 + R4]> */
		/* 8208955Ch case   50:*/		cpu::mem::lvx( regs, &regs.VR39, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 8208955Ch case   50:*/		return 0x82089560;
		  /* 82089560h */ case   51:  		/* lvx VR40, <#[R12 + R4]> */
		/* 82089560h case   51:*/		cpu::mem::lvx( regs, &regs.VR40, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 82089560h case   51:*/		return 0x82089564;
		  /* 82089564h */ case   52:  		/* dcbt R4, R0 */
		/* 82089564h case   52:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 82089564h case   52:*/		return 0x82089568;
		  /* 82089568h */ case   53:  		/* dcbf R0, R4 */
		/* 82089568h case   53:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 82089568h case   53:*/		return 0x8208956C;
		  /* 8208956Ch */ case   54:  		/* addi R4, R4, 128 */
		/* 8208956Ch case   54:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 8208956Ch case   54:*/		return 0x82089570;
		  /* 82089570h */ case   55:  		/* lvx VR41, <#[R4]> */
		/* 82089570h case   55:*/		cpu::mem::lvx( regs, &regs.VR41, (uint32)(regs.R4 + 0x00000000) );
		/* 82089570h case   55:*/		return 0x82089574;
		  /* 82089574h */ case   56:  		/* lvx VR42, <#[R6 + R4]> */
		/* 82089574h case   56:*/		cpu::mem::lvx( regs, &regs.VR42, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 82089574h case   56:*/		return 0x82089578;
		  /* 82089578h */ case   57:  		/* lvx VR43, <#[R7 + R4]> */
		/* 82089578h case   57:*/		cpu::mem::lvx( regs, &regs.VR43, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 82089578h case   57:*/		return 0x8208957C;
		  /* 8208957Ch */ case   58:  		/* lvx VR44, <#[R8 + R4]> */
		/* 8208957Ch case   58:*/		cpu::mem::lvx( regs, &regs.VR44, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 8208957Ch case   58:*/		return 0x82089580;
		  /* 82089580h */ case   59:  		/* lvx VR45, <#[R9 + R4]> */
		/* 82089580h case   59:*/		cpu::mem::lvx( regs, &regs.VR45, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 82089580h case   59:*/		return 0x82089584;
		  /* 82089584h */ case   60:  		/* lvx VR46, <#[R10 + R4]> */
		/* 82089584h case   60:*/		cpu::mem::lvx( regs, &regs.VR46, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82089584h case   60:*/		return 0x82089588;
		  /* 82089588h */ case   61:  		/* lvx VR47, <#[R11 + R4]> */
		/* 82089588h case   61:*/		cpu::mem::lvx( regs, &regs.VR47, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82089588h case   61:*/		return 0x8208958C;
		  /* 8208958Ch */ case   62:  		/* lvx VR48, <#[R12 + R4]> */
		/* 8208958Ch case   62:*/		cpu::mem::lvx( regs, &regs.VR48, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 8208958Ch case   62:*/		return 0x82089590;
		  /* 82089590h */ case   63:  		/* dcbt R4, R0 */
		/* 82089590h case   63:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 82089590h case   63:*/		return 0x82089594;
		  /* 82089594h */ case   64:  		/* dcbf R0, R4 */
		/* 82089594h case   64:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 82089594h case   64:*/		return 0x82089598;
		  /* 82089598h */ case   65:  		/* addi R4, R4, 128 */
		/* 82089598h case   65:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 82089598h case   65:*/		return 0x8208959C;
		  /* 8208959Ch */ case   66:  		/* lvx VR49, <#[R4]> */
		/* 8208959Ch case   66:*/		cpu::mem::lvx( regs, &regs.VR49, (uint32)(regs.R4 + 0x00000000) );
		/* 8208959Ch case   66:*/		return 0x820895A0;
		  /* 820895A0h */ case   67:  		/* lvx VR50, <#[R6 + R4]> */
		/* 820895A0h case   67:*/		cpu::mem::lvx( regs, &regs.VR50, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 820895A0h case   67:*/		return 0x820895A4;
		  /* 820895A4h */ case   68:  		/* lvx VR51, <#[R7 + R4]> */
		/* 820895A4h case   68:*/		cpu::mem::lvx( regs, &regs.VR51, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 820895A4h case   68:*/		return 0x820895A8;
		  /* 820895A8h */ case   69:  		/* lvx VR52, <#[R8 + R4]> */
		/* 820895A8h case   69:*/		cpu::mem::lvx( regs, &regs.VR52, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 820895A8h case   69:*/		return 0x820895AC;
		  /* 820895ACh */ case   70:  		/* lvx VR53, <#[R9 + R4]> */
		/* 820895ACh case   70:*/		cpu::mem::lvx( regs, &regs.VR53, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 820895ACh case   70:*/		return 0x820895B0;
		  /* 820895B0h */ case   71:  		/* lvx VR54, <#[R10 + R4]> */
		/* 820895B0h case   71:*/		cpu::mem::lvx( regs, &regs.VR54, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 820895B0h case   71:*/		return 0x820895B4;
		  /* 820895B4h */ case   72:  		/* lvx VR55, <#[R11 + R4]> */
		/* 820895B4h case   72:*/		cpu::mem::lvx( regs, &regs.VR55, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 820895B4h case   72:*/		return 0x820895B8;
		  /* 820895B8h */ case   73:  		/* lvx VR56, <#[R12 + R4]> */
		/* 820895B8h case   73:*/		cpu::mem::lvx( regs, &regs.VR56, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 820895B8h case   73:*/		return 0x820895BC;
		  /* 820895BCh */ case   74:  		/* dcbt R4, R0 */
		/* 820895BCh case   74:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 820895BCh case   74:*/		return 0x820895C0;
		  /* 820895C0h */ case   75:  		/* dcbf R0, R4 */
		/* 820895C0h case   75:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 820895C0h case   75:*/		return 0x820895C4;
		  /* 820895C4h */ case   76:  		/* addi R4, R4, 128 */
		/* 820895C4h case   76:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 820895C4h case   76:*/		return 0x820895C8;
		  /* 820895C8h */ case   77:  		/* lvx VR57, <#[R4]> */
		/* 820895C8h case   77:*/		cpu::mem::lvx( regs, &regs.VR57, (uint32)(regs.R4 + 0x00000000) );
		/* 820895C8h case   77:*/		return 0x820895CC;
		  /* 820895CCh */ case   78:  		/* lvx VR58, <#[R6 + R4]> */
		/* 820895CCh case   78:*/		cpu::mem::lvx( regs, &regs.VR58, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 820895CCh case   78:*/		return 0x820895D0;
		  /* 820895D0h */ case   79:  		/* lvx VR59, <#[R7 + R4]> */
		/* 820895D0h case   79:*/		cpu::mem::lvx( regs, &regs.VR59, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 820895D0h case   79:*/		return 0x820895D4;
		  /* 820895D4h */ case   80:  		/* lvx VR60, <#[R8 + R4]> */
		/* 820895D4h case   80:*/		cpu::mem::lvx( regs, &regs.VR60, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 820895D4h case   80:*/		return 0x820895D8;
		  /* 820895D8h */ case   81:  		/* lvx VR61, <#[R9 + R4]> */
		/* 820895D8h case   81:*/		cpu::mem::lvx( regs, &regs.VR61, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 820895D8h case   81:*/		return 0x820895DC;
		  /* 820895DCh */ case   82:  		/* lvx VR62, <#[R10 + R4]> */
		/* 820895DCh case   82:*/		cpu::mem::lvx( regs, &regs.VR62, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 820895DCh case   82:*/		return 0x820895E0;
		  /* 820895E0h */ case   83:  		/* lvx VR63, <#[R11 + R4]> */
		/* 820895E0h case   83:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 820895E0h case   83:*/		return 0x820895E4;
		  /* 820895E4h */ case   84:  		/* lvx VR0, <#[R12 + R4]> */
		/* 820895E4h case   84:*/		cpu::mem::lvx( regs, &regs.VR0, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 820895E4h case   84:*/		return 0x820895E8;
		  /* 820895E8h */ case   85:  		/* dcbt R4, R0 */
		/* 820895E8h case   85:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 820895E8h case   85:*/		return 0x820895EC;
		  /* 820895ECh */ case   86:  		/* dcbf R0, R4 */
		/* 820895ECh case   86:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 820895ECh case   86:*/		return 0x820895F0;
		  /* 820895F0h */ case   87:  		/* addi R4, R4, 128 */
		/* 820895F0h case   87:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 820895F0h case   87:*/		return 0x820895F4;
		  /* 820895F4h */ case   88:  		/* stvlx VR1, <#[R3]> */
		/* 820895F4h case   88:*/		cpu::mem::stvlx( regs, regs.VR1, (uint32)(regs.R3 + 0x00000000) );
		/* 820895F4h case   88:*/		return 0x820895F8;
		  /* 820895F8h */ case   89:  		/* stvlx VR2, <#[R6 + R3]> */
		/* 820895F8h case   89:*/		cpu::mem::stvlx( regs, regs.VR2, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 820895F8h case   89:*/		return 0x820895FC;
		  /* 820895FCh */ case   90:  		/* stvlx VR3, <#[R7 + R3]> */
		/* 820895FCh case   90:*/		cpu::mem::stvlx( regs, regs.VR3, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 820895FCh case   90:*/		return 0x82089600;
		  /* 82089600h */ case   91:  		/* stvlx VR4, <#[R8 + R3]> */
		/* 82089600h case   91:*/		cpu::mem::stvlx( regs, regs.VR4, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82089600h case   91:*/		return 0x82089604;
		  /* 82089604h */ case   92:  		/* stvlx VR5, <#[R9 + R3]> */
		/* 82089604h case   92:*/		cpu::mem::stvlx( regs, regs.VR5, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82089604h case   92:*/		return 0x82089608;
		  /* 82089608h */ case   93:  		/* stvlx VR6, <#[R10 + R3]> */
		/* 82089608h case   93:*/		cpu::mem::stvlx( regs, regs.VR6, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82089608h case   93:*/		return 0x8208960C;
		  /* 8208960Ch */ case   94:  		/* stvlx VR7, <#[R11 + R3]> */
		/* 8208960Ch case   94:*/		cpu::mem::stvlx( regs, regs.VR7, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8208960Ch case   94:*/		return 0x82089610;
		  /* 82089610h */ case   95:  		/* stvlx VR8, <#[R12 + R3]> */
		/* 82089610h case   95:*/		cpu::mem::stvlx( regs, regs.VR8, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 82089610h case   95:*/		return 0x82089614;
		  /* 82089614h */ case   96:  		/* addi R3, R3, 128 */
		/* 82089614h case   96:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 82089614h case   96:*/		return 0x82089618;
		  /* 82089618h */ case   97:  		/* stvlx VR9, <#[R3]> */
		/* 82089618h case   97:*/		cpu::mem::stvlx( regs, regs.VR9, (uint32)(regs.R3 + 0x00000000) );
		/* 82089618h case   97:*/		return 0x8208961C;
		  /* 8208961Ch */ case   98:  		/* stvlx VR10, <#[R6 + R3]> */
		/* 8208961Ch case   98:*/		cpu::mem::stvlx( regs, regs.VR10, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 8208961Ch case   98:*/		return 0x82089620;
		  /* 82089620h */ case   99:  		/* stvlx VR11, <#[R7 + R3]> */
		/* 82089620h case   99:*/		cpu::mem::stvlx( regs, regs.VR11, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 82089620h case   99:*/		return 0x82089624;
		  /* 82089624h */ case  100:  		/* stvlx VR12, <#[R8 + R3]> */
		/* 82089624h case  100:*/		cpu::mem::stvlx( regs, regs.VR12, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82089624h case  100:*/		return 0x82089628;
		  /* 82089628h */ case  101:  		/* stvlx VR13, <#[R9 + R3]> */
		/* 82089628h case  101:*/		cpu::mem::stvlx( regs, regs.VR13, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82089628h case  101:*/		return 0x8208962C;
		  /* 8208962Ch */ case  102:  		/* stvlx VR14, <#[R10 + R3]> */
		/* 8208962Ch case  102:*/		cpu::mem::stvlx( regs, regs.VR14, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 8208962Ch case  102:*/		return 0x82089630;
		  /* 82089630h */ case  103:  		/* stvlx VR15, <#[R11 + R3]> */
		/* 82089630h case  103:*/		cpu::mem::stvlx( regs, regs.VR15, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82089630h case  103:*/		return 0x82089634;
		  /* 82089634h */ case  104:  		/* stvlx VR16, <#[R12 + R3]> */
		/* 82089634h case  104:*/		cpu::mem::stvlx( regs, regs.VR16, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 82089634h case  104:*/		return 0x82089638;
		  /* 82089638h */ case  105:  		/* addi R3, R3, 128 */
		/* 82089638h case  105:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 82089638h case  105:*/		return 0x8208963C;
		  /* 8208963Ch */ case  106:  		/* stvlx VR17, <#[R3]> */
		/* 8208963Ch case  106:*/		cpu::mem::stvlx( regs, regs.VR17, (uint32)(regs.R3 + 0x00000000) );
		/* 8208963Ch case  106:*/		return 0x82089640;
		  /* 82089640h */ case  107:  		/* stvlx VR18, <#[R6 + R3]> */
		/* 82089640h case  107:*/		cpu::mem::stvlx( regs, regs.VR18, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 82089640h case  107:*/		return 0x82089644;
		  /* 82089644h */ case  108:  		/* stvlx VR19, <#[R7 + R3]> */
		/* 82089644h case  108:*/		cpu::mem::stvlx( regs, regs.VR19, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 82089644h case  108:*/		return 0x82089648;
		  /* 82089648h */ case  109:  		/* stvlx VR20, <#[R8 + R3]> */
		/* 82089648h case  109:*/		cpu::mem::stvlx( regs, regs.VR20, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82089648h case  109:*/		return 0x8208964C;
		  /* 8208964Ch */ case  110:  		/* stvlx VR21, <#[R9 + R3]> */
		/* 8208964Ch case  110:*/		cpu::mem::stvlx( regs, regs.VR21, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 8208964Ch case  110:*/		return 0x82089650;
		  /* 82089650h */ case  111:  		/* stvlx VR22, <#[R10 + R3]> */
		/* 82089650h case  111:*/		cpu::mem::stvlx( regs, regs.VR22, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82089650h case  111:*/		return 0x82089654;
		  /* 82089654h */ case  112:  		/* stvlx VR23, <#[R11 + R3]> */
		/* 82089654h case  112:*/		cpu::mem::stvlx( regs, regs.VR23, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82089654h case  112:*/		return 0x82089658;
		  /* 82089658h */ case  113:  		/* stvlx VR24, <#[R12 + R3]> */
		/* 82089658h case  113:*/		cpu::mem::stvlx( regs, regs.VR24, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 82089658h case  113:*/		return 0x8208965C;
		  /* 8208965Ch */ case  114:  		/* addi R3, R3, 128 */
		/* 8208965Ch case  114:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 8208965Ch case  114:*/		return 0x82089660;
		  /* 82089660h */ case  115:  		/* stvlx VR25, <#[R3]> */
		/* 82089660h case  115:*/		cpu::mem::stvlx( regs, regs.VR25, (uint32)(regs.R3 + 0x00000000) );
		/* 82089660h case  115:*/		return 0x82089664;
		  /* 82089664h */ case  116:  		/* stvlx VR26, <#[R6 + R3]> */
		/* 82089664h case  116:*/		cpu::mem::stvlx( regs, regs.VR26, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 82089664h case  116:*/		return 0x82089668;
		  /* 82089668h */ case  117:  		/* stvlx VR27, <#[R7 + R3]> */
		/* 82089668h case  117:*/		cpu::mem::stvlx( regs, regs.VR27, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 82089668h case  117:*/		return 0x8208966C;
		  /* 8208966Ch */ case  118:  		/* stvlx VR28, <#[R8 + R3]> */
		/* 8208966Ch case  118:*/		cpu::mem::stvlx( regs, regs.VR28, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 8208966Ch case  118:*/		return 0x82089670;
		  /* 82089670h */ case  119:  		/* stvlx VR29, <#[R9 + R3]> */
		/* 82089670h case  119:*/		cpu::mem::stvlx( regs, regs.VR29, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82089670h case  119:*/		return 0x82089674;
		  /* 82089674h */ case  120:  		/* stvlx VR30, <#[R10 + R3]> */
		/* 82089674h case  120:*/		cpu::mem::stvlx( regs, regs.VR30, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82089674h case  120:*/		return 0x82089678;
		  /* 82089678h */ case  121:  		/* stvlx VR31, <#[R11 + R3]> */
		/* 82089678h case  121:*/		cpu::mem::stvlx( regs, regs.VR31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82089678h case  121:*/		return 0x8208967C;
		  /* 8208967Ch */ case  122:  		/* stvlx VR32, <#[R12 + R3]> */
		/* 8208967Ch case  122:*/		cpu::mem::stvlx( regs, regs.VR32, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 8208967Ch case  122:*/		return 0x82089680;
		  /* 82089680h */ case  123:  		/* addi R3, R3, 128 */
		/* 82089680h case  123:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 82089680h case  123:*/		return 0x82089684;
		  /* 82089684h */ case  124:  		/* stvlx VR33, <#[R3]> */
		/* 82089684h case  124:*/		cpu::mem::stvlx( regs, regs.VR33, (uint32)(regs.R3 + 0x00000000) );
		/* 82089684h case  124:*/		return 0x82089688;
		  /* 82089688h */ case  125:  		/* stvlx VR34, <#[R6 + R3]> */
		/* 82089688h case  125:*/		cpu::mem::stvlx( regs, regs.VR34, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 82089688h case  125:*/		return 0x8208968C;
		  /* 8208968Ch */ case  126:  		/* stvlx VR35, <#[R7 + R3]> */
		/* 8208968Ch case  126:*/		cpu::mem::stvlx( regs, regs.VR35, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 8208968Ch case  126:*/		return 0x82089690;
		  /* 82089690h */ case  127:  		/* stvlx VR36, <#[R8 + R3]> */
		/* 82089690h case  127:*/		cpu::mem::stvlx( regs, regs.VR36, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82089690h case  127:*/		return 0x82089694;
		  /* 82089694h */ case  128:  		/* stvlx VR37, <#[R9 + R3]> */
		/* 82089694h case  128:*/		cpu::mem::stvlx( regs, regs.VR37, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82089694h case  128:*/		return 0x82089698;
		  /* 82089698h */ case  129:  		/* stvlx VR38, <#[R10 + R3]> */
		/* 82089698h case  129:*/		cpu::mem::stvlx( regs, regs.VR38, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82089698h case  129:*/		return 0x8208969C;
		  /* 8208969Ch */ case  130:  		/* stvlx VR39, <#[R11 + R3]> */
		/* 8208969Ch case  130:*/		cpu::mem::stvlx( regs, regs.VR39, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8208969Ch case  130:*/		return 0x820896A0;
		  /* 820896A0h */ case  131:  		/* stvlx VR40, <#[R12 + R3]> */
		/* 820896A0h case  131:*/		cpu::mem::stvlx( regs, regs.VR40, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 820896A0h case  131:*/		return 0x820896A4;
		  /* 820896A4h */ case  132:  		/* addi R3, R3, 128 */
		/* 820896A4h case  132:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 820896A4h case  132:*/		return 0x820896A8;
		  /* 820896A8h */ case  133:  		/* stvlx VR41, <#[R3]> */
		/* 820896A8h case  133:*/		cpu::mem::stvlx( regs, regs.VR41, (uint32)(regs.R3 + 0x00000000) );
		/* 820896A8h case  133:*/		return 0x820896AC;
		  /* 820896ACh */ case  134:  		/* stvlx VR42, <#[R6 + R3]> */
		/* 820896ACh case  134:*/		cpu::mem::stvlx( regs, regs.VR42, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 820896ACh case  134:*/		return 0x820896B0;
		  /* 820896B0h */ case  135:  		/* stvlx VR43, <#[R7 + R3]> */
		/* 820896B0h case  135:*/		cpu::mem::stvlx( regs, regs.VR43, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 820896B0h case  135:*/		return 0x820896B4;
		  /* 820896B4h */ case  136:  		/* stvlx VR44, <#[R8 + R3]> */
		/* 820896B4h case  136:*/		cpu::mem::stvlx( regs, regs.VR44, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 820896B4h case  136:*/		return 0x820896B8;
		  /* 820896B8h */ case  137:  		/* stvlx VR45, <#[R9 + R3]> */
		/* 820896B8h case  137:*/		cpu::mem::stvlx( regs, regs.VR45, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 820896B8h case  137:*/		return 0x820896BC;
		  /* 820896BCh */ case  138:  		/* stvlx VR46, <#[R10 + R3]> */
		/* 820896BCh case  138:*/		cpu::mem::stvlx( regs, regs.VR46, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 820896BCh case  138:*/		return 0x820896C0;
		  /* 820896C0h */ case  139:  		/* stvlx VR47, <#[R11 + R3]> */
		/* 820896C0h case  139:*/		cpu::mem::stvlx( regs, regs.VR47, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 820896C0h case  139:*/		return 0x820896C4;
		  /* 820896C4h */ case  140:  		/* stvlx VR48, <#[R12 + R3]> */
		/* 820896C4h case  140:*/		cpu::mem::stvlx( regs, regs.VR48, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 820896C4h case  140:*/		return 0x820896C8;
		  /* 820896C8h */ case  141:  		/* addi R3, R3, 128 */
		/* 820896C8h case  141:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 820896C8h case  141:*/		return 0x820896CC;
		  /* 820896CCh */ case  142:  		/* stvlx VR49, <#[R3]> */
		/* 820896CCh case  142:*/		cpu::mem::stvlx( regs, regs.VR49, (uint32)(regs.R3 + 0x00000000) );
		/* 820896CCh case  142:*/		return 0x820896D0;
		  /* 820896D0h */ case  143:  		/* stvlx VR50, <#[R6 + R3]> */
		/* 820896D0h case  143:*/		cpu::mem::stvlx( regs, regs.VR50, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 820896D0h case  143:*/		return 0x820896D4;
		  /* 820896D4h */ case  144:  		/* stvlx VR51, <#[R7 + R3]> */
		/* 820896D4h case  144:*/		cpu::mem::stvlx( regs, regs.VR51, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 820896D4h case  144:*/		return 0x820896D8;
		  /* 820896D8h */ case  145:  		/* stvlx VR52, <#[R8 + R3]> */
		/* 820896D8h case  145:*/		cpu::mem::stvlx( regs, regs.VR52, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 820896D8h case  145:*/		return 0x820896DC;
		  /* 820896DCh */ case  146:  		/* stvlx VR53, <#[R9 + R3]> */
		/* 820896DCh case  146:*/		cpu::mem::stvlx( regs, regs.VR53, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 820896DCh case  146:*/		return 0x820896E0;
		  /* 820896E0h */ case  147:  		/* stvlx VR54, <#[R10 + R3]> */
		/* 820896E0h case  147:*/		cpu::mem::stvlx( regs, regs.VR54, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 820896E0h case  147:*/		return 0x820896E4;
		  /* 820896E4h */ case  148:  		/* stvlx VR55, <#[R11 + R3]> */
		/* 820896E4h case  148:*/		cpu::mem::stvlx( regs, regs.VR55, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 820896E4h case  148:*/		return 0x820896E8;
		  /* 820896E8h */ case  149:  		/* stvlx VR56, <#[R12 + R3]> */
		/* 820896E8h case  149:*/		cpu::mem::stvlx( regs, regs.VR56, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 820896E8h case  149:*/		return 0x820896EC;
		  /* 820896ECh */ case  150:  		/* addi R3, R3, 128 */
		/* 820896ECh case  150:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 820896ECh case  150:*/		return 0x820896F0;
		  /* 820896F0h */ case  151:  		/* stvlx VR57, <#[R3]> */
		/* 820896F0h case  151:*/		cpu::mem::stvlx( regs, regs.VR57, (uint32)(regs.R3 + 0x00000000) );
		/* 820896F0h case  151:*/		return 0x820896F4;
		  /* 820896F4h */ case  152:  		/* stvlx VR58, <#[R6 + R3]> */
		/* 820896F4h case  152:*/		cpu::mem::stvlx( regs, regs.VR58, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 820896F4h case  152:*/		return 0x820896F8;
		  /* 820896F8h */ case  153:  		/* stvlx VR59, <#[R7 + R3]> */
		/* 820896F8h case  153:*/		cpu::mem::stvlx( regs, regs.VR59, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 820896F8h case  153:*/		return 0x820896FC;
		  /* 820896FCh */ case  154:  		/* stvlx VR60, <#[R8 + R3]> */
		/* 820896FCh case  154:*/		cpu::mem::stvlx( regs, regs.VR60, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 820896FCh case  154:*/		return 0x82089700;
		  /* 82089700h */ case  155:  		/* stvlx VR61, <#[R9 + R3]> */
		/* 82089700h case  155:*/		cpu::mem::stvlx( regs, regs.VR61, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82089700h case  155:*/		return 0x82089704;
		  /* 82089704h */ case  156:  		/* stvlx VR62, <#[R10 + R3]> */
		/* 82089704h case  156:*/		cpu::mem::stvlx( regs, regs.VR62, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82089704h case  156:*/		return 0x82089708;
		  /* 82089708h */ case  157:  		/* stvlx VR63, <#[R11 + R3]> */
		/* 82089708h case  157:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82089708h case  157:*/		return 0x8208970C;
		  /* 8208970Ch */ case  158:  		/* stvlx VR0, <#[R12 + R3]> */
		/* 8208970Ch case  158:*/		cpu::mem::stvlx( regs, regs.VR0, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 8208970Ch case  158:*/		return 0x82089710;
		  /* 82089710h */ case  159:  		/* addi R3, R3, 128 */
		/* 82089710h case  159:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 82089710h case  159:*/		return 0x82089714;
		  /* 82089714h */ case  160:  		/* addi R5, R5, -1024 */
		/* 82089714h case  160:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0xFFFFFC00);
		/* 82089714h case  160:*/		return 0x82089718;
		  /* 82089718h */ case  161:  		/* cmplwi CR6, R5, 1024 */
		/* 82089718h case  161:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000400);
		/* 82089718h case  161:*/		return 0x8208971C;
		  /* 8208971Ch */ case  162:  		/* bc 4, CR6_LT, -664 */
		/* 8208971Ch case  162:*/		if ( !regs.CR[6].lt ) { return 0x82089484;  }
		/* 8208971Ch case  162:*/		return 0x82089720;
		  /* 82089720h */ case  163:  		/* cmplwi CR6, R5, 0 */
		/* 82089720h case  163:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82089720h case  163:*/		return 0x82089724;
		  /* 82089724h */ case  164:  		/* bclr 12, CR6_EQ */
		/* 82089724h case  164:*/		if ( regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 82089724h case  164:*/		return 0x82089728;
	}
	return 0x82089728;
} // Block from 82089494h-82089728h (165 instructions)

//////////////////////////////////////////////////////
// Block at 82089728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089728);
		  /* 82089728h */ case    0:  		/* lvx VR1, <#[R4]> */
		/* 82089728h case    0:*/		cpu::mem::lvx( regs, &regs.VR1, (uint32)(regs.R4 + 0x00000000) );
		/* 82089728h case    0:*/		return 0x8208972C;
		  /* 8208972Ch */ case    1:  		/* lvx VR2, <#[R6 + R4]> */
		/* 8208972Ch case    1:*/		cpu::mem::lvx( regs, &regs.VR2, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 8208972Ch case    1:*/		return 0x82089730;
		  /* 82089730h */ case    2:  		/* lvx VR3, <#[R7 + R4]> */
		/* 82089730h case    2:*/		cpu::mem::lvx( regs, &regs.VR3, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 82089730h case    2:*/		return 0x82089734;
		  /* 82089734h */ case    3:  		/* lvx VR4, <#[R8 + R4]> */
		/* 82089734h case    3:*/		cpu::mem::lvx( regs, &regs.VR4, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 82089734h case    3:*/		return 0x82089738;
		  /* 82089738h */ case    4:  		/* lvx VR5, <#[R9 + R4]> */
		/* 82089738h case    4:*/		cpu::mem::lvx( regs, &regs.VR5, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 82089738h case    4:*/		return 0x8208973C;
		  /* 8208973Ch */ case    5:  		/* lvx VR6, <#[R10 + R4]> */
		/* 8208973Ch case    5:*/		cpu::mem::lvx( regs, &regs.VR6, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8208973Ch case    5:*/		return 0x82089740;
		  /* 82089740h */ case    6:  		/* lvx VR7, <#[R11 + R4]> */
		/* 82089740h case    6:*/		cpu::mem::lvx( regs, &regs.VR7, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82089740h case    6:*/		return 0x82089744;
		  /* 82089744h */ case    7:  		/* lvx VR8, <#[R12 + R4]> */
		/* 82089744h case    7:*/		cpu::mem::lvx( regs, &regs.VR8, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 82089744h case    7:*/		return 0x82089748;
		  /* 82089748h */ case    8:  		/* dcbf R0, R4 */
		/* 82089748h case    8:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 82089748h case    8:*/		return 0x8208974C;
		  /* 8208974Ch */ case    9:  		/* addi R4, R4, 128 */
		/* 8208974Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 8208974Ch case    9:*/		return 0x82089750;
		  /* 82089750h */ case   10:  		/* stvlx VR1, <#[R3]> */
		/* 82089750h case   10:*/		cpu::mem::stvlx( regs, regs.VR1, (uint32)(regs.R3 + 0x00000000) );
		/* 82089750h case   10:*/		return 0x82089754;
		  /* 82089754h */ case   11:  		/* stvlx VR2, <#[R6 + R3]> */
		/* 82089754h case   11:*/		cpu::mem::stvlx( regs, regs.VR2, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 82089754h case   11:*/		return 0x82089758;
		  /* 82089758h */ case   12:  		/* stvlx VR3, <#[R7 + R3]> */
		/* 82089758h case   12:*/		cpu::mem::stvlx( regs, regs.VR3, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 82089758h case   12:*/		return 0x8208975C;
		  /* 8208975Ch */ case   13:  		/* stvlx VR4, <#[R8 + R3]> */
		/* 8208975Ch case   13:*/		cpu::mem::stvlx( regs, regs.VR4, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 8208975Ch case   13:*/		return 0x82089760;
		  /* 82089760h */ case   14:  		/* stvlx VR5, <#[R9 + R3]> */
		/* 82089760h case   14:*/		cpu::mem::stvlx( regs, regs.VR5, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82089760h case   14:*/		return 0x82089764;
		  /* 82089764h */ case   15:  		/* stvlx VR6, <#[R10 + R3]> */
		/* 82089764h case   15:*/		cpu::mem::stvlx( regs, regs.VR6, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82089764h case   15:*/		return 0x82089768;
		  /* 82089768h */ case   16:  		/* stvlx VR7, <#[R11 + R3]> */
		/* 82089768h case   16:*/		cpu::mem::stvlx( regs, regs.VR7, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82089768h case   16:*/		return 0x8208976C;
		  /* 8208976Ch */ case   17:  		/* stvlx VR8, <#[R12 + R3]> */
		/* 8208976Ch case   17:*/		cpu::mem::stvlx( regs, regs.VR8, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 8208976Ch case   17:*/		return 0x82089770;
		  /* 82089770h */ case   18:  		/* addi R3, R3, 128 */
		/* 82089770h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 82089770h case   18:*/		return 0x82089774;
		  /* 82089774h */ case   19:  		/* addi R5, R5, -128 */
		/* 82089774h case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0xFFFFFF80);
		/* 82089774h case   19:*/		return 0x82089778;
		  /* 82089778h */ case   20:  		/* cmplwi CR6, R5, 0 */
		/* 82089778h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82089778h case   20:*/		return 0x8208977C;
		  /* 8208977Ch */ case   21:  		/* bc 12, CR6_GT, -84 */
		/* 8208977Ch case   21:*/		if ( regs.CR[6].gt ) { return 0x82089728;  }
		/* 8208977Ch case   21:*/		return 0x82089780;
		  /* 82089780h */ case   22:  		/* bclr 20, CR0_LT */
		/* 82089780h case   22:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82089780h case   22:*/		return 0x82089784;
	}
	return 0x82089784;
} // Block from 82089728h-82089784h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82089784h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089784( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089784) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089784);
		  /* 82089784h */ case    0:  		/* std R30, <#[R1 - 16]> */
		/* 82089784h case    0:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82089784h case    0:*/		return 0x82089788;
		  /* 82089788h */ case    1:  		/* std R31, <#[R1 - 8]> */
		/* 82089788h case    1:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82089788h case    1:*/		return 0x8208978C;
		  /* 8208978Ch */ case    2:  		/* li R6, -32 */
		/* 8208978Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0xFFFFFFE0);
		/* 8208978Ch case    2:*/		return 0x82089790;
		  /* 82089790h */ case    3:  		/* li R7, -48 */
		/* 82089790h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0xFFFFFFD0);
		/* 82089790h case    3:*/		return 0x82089794;
		  /* 82089794h */ case    4:  		/* stvlx VR64, <#[R1 + R6]> */
		/* 82089794h case    4:*/		cpu::mem::stvlx( regs, regs.VR64, (uint32)(regs.R1 + regs.R6 + 0x00000000) );
		/* 82089794h case    4:*/		return 0x82089798;
		  /* 82089798h */ case    5:  		/* stvlx VR65, <#[R1 + R7]> */
		/* 82089798h case    5:*/		cpu::mem::stvlx( regs, regs.VR65, (uint32)(regs.R1 + regs.R7 + 0x00000000) );
		/* 82089798h case    5:*/		return 0x8208979C;
		  /* 8208979Ch */ case    6:  		/* li R0, 0 */
		/* 8208979Ch case    6:*/		cpu::op::li<0>(regs,&regs.R0,0x0);
		/* 8208979Ch case    6:*/		return 0x820897A0;
		  /* 820897A0h */ case    7:  		/* li R6, 16 */
		/* 820897A0h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x10);
		/* 820897A0h case    7:*/		return 0x820897A4;
		  /* 820897A4h */ case    8:  		/* li R7, 32 */
		/* 820897A4h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x20);
		/* 820897A4h case    8:*/		return 0x820897A8;
		  /* 820897A8h */ case    9:  		/* li R8, 48 */
		/* 820897A8h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x30);
		/* 820897A8h case    9:*/		return 0x820897AC;
		  /* 820897ACh */ case   10:  		/* li R9, 64 */
		/* 820897ACh case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x40);
		/* 820897ACh case   10:*/		return 0x820897B0;
		  /* 820897B0h */ case   11:  		/* li R10, 80 */
		/* 820897B0h case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x50);
		/* 820897B0h case   11:*/		return 0x820897B4;
		  /* 820897B4h */ case   12:  		/* li R11, 96 */
		/* 820897B4h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x60);
		/* 820897B4h case   12:*/		return 0x820897B8;
		  /* 820897B8h */ case   13:  		/* li R12, 112 */
		/* 820897B8h case   13:*/		cpu::op::li<0>(regs,&regs.R12,0x70);
		/* 820897B8h case   13:*/		return 0x820897BC;
		  /* 820897BCh */ case   14:  		/* dcbt R4, R0 */
		/* 820897BCh case   14:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 820897BCh case   14:*/		return 0x820897C0;
		  /* 820897C0h */ case   15:  		/* lvx VR65, <#[R4]> */
		/* 820897C0h case   15:*/		cpu::mem::lvx( regs, &regs.VR65, (uint32)(regs.R4 + 0x00000000) );
		/* 820897C0h case   15:*/		return 0x820897C4;
		  /* 820897C4h */ case   16:  		/* addi R4, R4, 16 */
		/* 820897C4h case   16:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x10);
		/* 820897C4h case   16:*/		return 0x820897C8;
		  /* 820897C8h */ case   17:  		/* lvsl VR0, R0, R4 */
		/* 820897C8h case   17:*/		cpu::op::lvsl<0>(regs,&regs.VR0,regs.R0,regs.R4);
		/* 820897C8h case   17:*/		return 0x820897CC;
		  /* 820897CCh */ case   18:  		/* cmplwi CR6, R5, 1024 */
		/* 820897CCh case   18:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000400);
		/* 820897CCh case   18:*/		return 0x820897D0;
		  /* 820897D0h */ case   19:  		/* bc 12, CR6_LT, 1000 */
		/* 820897D0h case   19:*/		if ( regs.CR[6].lt ) { return 0x82089BB8;  }
		/* 820897D0h case   19:*/		return 0x820897D4;
		  /* 820897D4h */ case   20:  		/* li R0, 128 */
		/* 820897D4h case   20:*/		cpu::op::li<0>(regs,&regs.R0,0x80);
		/* 820897D4h case   20:*/		return 0x820897D8;
		  /* 820897D8h */ case   21:  		/* dcbt R4, R0 */
		/* 820897D8h case   21:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 820897D8h case   21:*/		return 0x820897DC;
		  /* 820897DCh */ case   22:  		/* li R0, 256 */
		/* 820897DCh case   22:*/		cpu::op::li<0>(regs,&regs.R0,0x100);
		/* 820897DCh case   22:*/		return 0x820897E0;
		  /* 820897E0h */ case   23:  		/* dcbt R4, R0 */
		/* 820897E0h case   23:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 820897E0h case   23:*/		return 0x820897E4;
		  /* 820897E4h */ case   24:  		/* li R0, 384 */
		/* 820897E4h case   24:*/		cpu::op::li<0>(regs,&regs.R0,0x180);
		/* 820897E4h case   24:*/		return 0x820897E8;
		  /* 820897E8h */ case   25:  		/* dcbt R4, R0 */
		/* 820897E8h case   25:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 820897E8h case   25:*/		return 0x820897EC;
		  /* 820897ECh */ case   26:  		/* li R0, 512 */
		/* 820897ECh case   26:*/		cpu::op::li<0>(regs,&regs.R0,0x200);
		/* 820897ECh case   26:*/		return 0x820897F0;
		  /* 820897F0h */ case   27:  		/* dcbt R4, R0 */
		/* 820897F0h case   27:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 820897F0h case   27:*/		return 0x820897F4;
		  /* 820897F4h */ case   28:  		/* li R0, 640 */
		/* 820897F4h case   28:*/		cpu::op::li<0>(regs,&regs.R0,0x280);
		/* 820897F4h case   28:*/		return 0x820897F8;
		  /* 820897F8h */ case   29:  		/* dcbt R4, R0 */
		/* 820897F8h case   29:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 820897F8h case   29:*/		return 0x820897FC;
		  /* 820897FCh */ case   30:  		/* li R0, 768 */
		/* 820897FCh case   30:*/		cpu::op::li<0>(regs,&regs.R0,0x300);
		/* 820897FCh case   30:*/		return 0x82089800;
		  /* 82089800h */ case   31:  		/* dcbt R4, R0 */
		/* 82089800h case   31:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 82089800h case   31:*/		return 0x82089804;
		  /* 82089804h */ case   32:  		/* li R0, 896 */
		/* 82089804h case   32:*/		cpu::op::li<0>(regs,&regs.R0,0x380);
		/* 82089804h case   32:*/		return 0x82089808;
		  /* 82089808h */ case   33:  		/* dcbt R4, R0 */
		/* 82089808h case   33:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 82089808h case   33:*/		return 0x8208980C;
		  /* 8208980Ch */ case   34:  		/* addi R0, R5, -1024 */
		/* 8208980Ch case   34:*/		cpu::op::addi<0>(regs,&regs.R0,regs.R5,0xFFFFFC00);
		/* 8208980Ch case   34:*/		return 0x82089810;
		  /* 82089810h */ case   35:  		/* cmplwi CR6, R0, 1024 */
		/* 82089810h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R0,0x00000400);
		/* 82089810h case   35:*/		return 0x82089814;
		  /* 82089814h */ case   36:  		/* bc 12, CR6_LT, 8 */
		/* 82089814h case   36:*/		if ( regs.CR[6].lt ) { return 0x8208981C;  }
		/* 82089814h case   36:*/		return 0x82089818;
		  /* 82089818h */ case   37:  		/* li R0, 1024 */
		/* 82089818h case   37:*/		cpu::op::li<0>(regs,&regs.R0,0x400);
		/* 82089818h case   37:*/		return 0x8208981C;
	}
	return 0x8208981C;
} // Block from 82089784h-8208981Ch (38 instructions)

//////////////////////////////////////////////////////
// Block at 8208981Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208981C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208981C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208981C);
		  /* 8208981Ch */ case    0:  		/* lvx VR1, <#[R4]> */
		/* 8208981Ch case    0:*/		cpu::mem::lvx( regs, &regs.VR1, (uint32)(regs.R4 + 0x00000000) );
		/* 8208981Ch case    0:*/		return 0x82089820;
		  /* 82089820h */ case    1:  		/* lvx VR2, <#[R6 + R4]> */
		/* 82089820h case    1:*/		cpu::mem::lvx( regs, &regs.VR2, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 82089820h case    1:*/		return 0x82089824;
		  /* 82089824h */ case    2:  		/* lvx VR3, <#[R7 + R4]> */
		/* 82089824h case    2:*/		cpu::mem::lvx( regs, &regs.VR3, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 82089824h case    2:*/		return 0x82089828;
		  /* 82089828h */ case    3:  		/* lvx VR4, <#[R8 + R4]> */
		/* 82089828h case    3:*/		cpu::mem::lvx( regs, &regs.VR4, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 82089828h case    3:*/		return 0x8208982C;
		  /* 8208982Ch */ case    4:  		/* lvx VR5, <#[R9 + R4]> */
		/* 8208982Ch case    4:*/		cpu::mem::lvx( regs, &regs.VR5, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 8208982Ch case    4:*/		return 0x82089830;
		  /* 82089830h */ case    5:  		/* lvx VR6, <#[R10 + R4]> */
		/* 82089830h case    5:*/		cpu::mem::lvx( regs, &regs.VR6, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82089830h case    5:*/		return 0x82089834;
		  /* 82089834h */ case    6:  		/* lvx VR7, <#[R11 + R4]> */
		/* 82089834h case    6:*/		cpu::mem::lvx( regs, &regs.VR7, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82089834h case    6:*/		return 0x82089838;
		  /* 82089838h */ case    7:  		/* lvx VR8, <#[R12 + R4]> */
		/* 82089838h case    7:*/		cpu::mem::lvx( regs, &regs.VR8, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 82089838h case    7:*/		return 0x8208983C;
		  /* 8208983Ch */ case    8:  		/* dcbt R4, R0 */
		/* 8208983Ch case    8:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 8208983Ch case    8:*/		return 0x82089840;
		  /* 82089840h */ case    9:  		/* dcbf R0, R4 */
		/* 82089840h case    9:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 82089840h case    9:*/		return 0x82089844;
		  /* 82089844h */ case   10:  		/* addi R4, R4, 128 */
		/* 82089844h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 82089844h case   10:*/		return 0x82089848;
		  /* 82089848h */ case   11:  		/* lvx VR9, <#[R4]> */
		/* 82089848h case   11:*/		cpu::mem::lvx( regs, &regs.VR9, (uint32)(regs.R4 + 0x00000000) );
		/* 82089848h case   11:*/		return 0x8208984C;
		  /* 8208984Ch */ case   12:  		/* lvx VR10, <#[R6 + R4]> */
		/* 8208984Ch case   12:*/		cpu::mem::lvx( regs, &regs.VR10, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 8208984Ch case   12:*/		return 0x82089850;
		  /* 82089850h */ case   13:  		/* lvx VR11, <#[R7 + R4]> */
		/* 82089850h case   13:*/		cpu::mem::lvx( regs, &regs.VR11, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 82089850h case   13:*/		return 0x82089854;
		  /* 82089854h */ case   14:  		/* lvx VR12, <#[R8 + R4]> */
		/* 82089854h case   14:*/		cpu::mem::lvx( regs, &regs.VR12, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 82089854h case   14:*/		return 0x82089858;
		  /* 82089858h */ case   15:  		/* lvx VR13, <#[R9 + R4]> */
		/* 82089858h case   15:*/		cpu::mem::lvx( regs, &regs.VR13, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 82089858h case   15:*/		return 0x8208985C;
		  /* 8208985Ch */ case   16:  		/* lvx VR14, <#[R10 + R4]> */
		/* 8208985Ch case   16:*/		cpu::mem::lvx( regs, &regs.VR14, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8208985Ch case   16:*/		return 0x82089860;
		  /* 82089860h */ case   17:  		/* lvx VR15, <#[R11 + R4]> */
		/* 82089860h case   17:*/		cpu::mem::lvx( regs, &regs.VR15, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82089860h case   17:*/		return 0x82089864;
		  /* 82089864h */ case   18:  		/* lvx VR16, <#[R12 + R4]> */
		/* 82089864h case   18:*/		cpu::mem::lvx( regs, &regs.VR16, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 82089864h case   18:*/		return 0x82089868;
		  /* 82089868h */ case   19:  		/* dcbt R4, R0 */
		/* 82089868h case   19:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 82089868h case   19:*/		return 0x8208986C;
		  /* 8208986Ch */ case   20:  		/* dcbf R0, R4 */
		/* 8208986Ch case   20:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 8208986Ch case   20:*/		return 0x82089870;
		  /* 82089870h */ case   21:  		/* addi R4, R4, 128 */
		/* 82089870h case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 82089870h case   21:*/		return 0x82089874;
		  /* 82089874h */ case   22:  		/* lvx VR17, <#[R4]> */
		/* 82089874h case   22:*/		cpu::mem::lvx( regs, &regs.VR17, (uint32)(regs.R4 + 0x00000000) );
		/* 82089874h case   22:*/		return 0x82089878;
		  /* 82089878h */ case   23:  		/* lvx VR18, <#[R6 + R4]> */
		/* 82089878h case   23:*/		cpu::mem::lvx( regs, &regs.VR18, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 82089878h case   23:*/		return 0x8208987C;
		  /* 8208987Ch */ case   24:  		/* lvx VR19, <#[R7 + R4]> */
		/* 8208987Ch case   24:*/		cpu::mem::lvx( regs, &regs.VR19, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 8208987Ch case   24:*/		return 0x82089880;
		  /* 82089880h */ case   25:  		/* lvx VR20, <#[R8 + R4]> */
		/* 82089880h case   25:*/		cpu::mem::lvx( regs, &regs.VR20, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 82089880h case   25:*/		return 0x82089884;
		  /* 82089884h */ case   26:  		/* lvx VR21, <#[R9 + R4]> */
		/* 82089884h case   26:*/		cpu::mem::lvx( regs, &regs.VR21, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 82089884h case   26:*/		return 0x82089888;
		  /* 82089888h */ case   27:  		/* lvx VR22, <#[R10 + R4]> */
		/* 82089888h case   27:*/		cpu::mem::lvx( regs, &regs.VR22, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82089888h case   27:*/		return 0x8208988C;
		  /* 8208988Ch */ case   28:  		/* lvx VR23, <#[R11 + R4]> */
		/* 8208988Ch case   28:*/		cpu::mem::lvx( regs, &regs.VR23, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 8208988Ch case   28:*/		return 0x82089890;
		  /* 82089890h */ case   29:  		/* lvx VR24, <#[R12 + R4]> */
		/* 82089890h case   29:*/		cpu::mem::lvx( regs, &regs.VR24, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 82089890h case   29:*/		return 0x82089894;
		  /* 82089894h */ case   30:  		/* dcbt R4, R0 */
		/* 82089894h case   30:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 82089894h case   30:*/		return 0x82089898;
		  /* 82089898h */ case   31:  		/* dcbf R0, R4 */
		/* 82089898h case   31:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 82089898h case   31:*/		return 0x8208989C;
		  /* 8208989Ch */ case   32:  		/* addi R4, R4, 128 */
		/* 8208989Ch case   32:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 8208989Ch case   32:*/		return 0x820898A0;
		  /* 820898A0h */ case   33:  		/* lvx VR25, <#[R4]> */
		/* 820898A0h case   33:*/		cpu::mem::lvx( regs, &regs.VR25, (uint32)(regs.R4 + 0x00000000) );
		/* 820898A0h case   33:*/		return 0x820898A4;
		  /* 820898A4h */ case   34:  		/* lvx VR26, <#[R6 + R4]> */
		/* 820898A4h case   34:*/		cpu::mem::lvx( regs, &regs.VR26, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 820898A4h case   34:*/		return 0x820898A8;
		  /* 820898A8h */ case   35:  		/* lvx VR27, <#[R7 + R4]> */
		/* 820898A8h case   35:*/		cpu::mem::lvx( regs, &regs.VR27, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 820898A8h case   35:*/		return 0x820898AC;
		  /* 820898ACh */ case   36:  		/* lvx VR28, <#[R8 + R4]> */
		/* 820898ACh case   36:*/		cpu::mem::lvx( regs, &regs.VR28, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 820898ACh case   36:*/		return 0x820898B0;
		  /* 820898B0h */ case   37:  		/* lvx VR29, <#[R9 + R4]> */
		/* 820898B0h case   37:*/		cpu::mem::lvx( regs, &regs.VR29, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 820898B0h case   37:*/		return 0x820898B4;
		  /* 820898B4h */ case   38:  		/* lvx VR30, <#[R10 + R4]> */
		/* 820898B4h case   38:*/		cpu::mem::lvx( regs, &regs.VR30, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 820898B4h case   38:*/		return 0x820898B8;
		  /* 820898B8h */ case   39:  		/* lvx VR31, <#[R11 + R4]> */
		/* 820898B8h case   39:*/		cpu::mem::lvx( regs, &regs.VR31, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 820898B8h case   39:*/		return 0x820898BC;
		  /* 820898BCh */ case   40:  		/* lvx VR32, <#[R12 + R4]> */
		/* 820898BCh case   40:*/		cpu::mem::lvx( regs, &regs.VR32, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 820898BCh case   40:*/		return 0x820898C0;
		  /* 820898C0h */ case   41:  		/* dcbt R4, R0 */
		/* 820898C0h case   41:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 820898C0h case   41:*/		return 0x820898C4;
		  /* 820898C4h */ case   42:  		/* dcbf R0, R4 */
		/* 820898C4h case   42:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 820898C4h case   42:*/		return 0x820898C8;
		  /* 820898C8h */ case   43:  		/* addi R4, R4, 128 */
		/* 820898C8h case   43:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 820898C8h case   43:*/		return 0x820898CC;
		  /* 820898CCh */ case   44:  		/* lvx VR33, <#[R4]> */
		/* 820898CCh case   44:*/		cpu::mem::lvx( regs, &regs.VR33, (uint32)(regs.R4 + 0x00000000) );
		/* 820898CCh case   44:*/		return 0x820898D0;
		  /* 820898D0h */ case   45:  		/* lvx VR34, <#[R6 + R4]> */
		/* 820898D0h case   45:*/		cpu::mem::lvx( regs, &regs.VR34, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 820898D0h case   45:*/		return 0x820898D4;
		  /* 820898D4h */ case   46:  		/* lvx VR35, <#[R7 + R4]> */
		/* 820898D4h case   46:*/		cpu::mem::lvx( regs, &regs.VR35, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 820898D4h case   46:*/		return 0x820898D8;
		  /* 820898D8h */ case   47:  		/* lvx VR36, <#[R8 + R4]> */
		/* 820898D8h case   47:*/		cpu::mem::lvx( regs, &regs.VR36, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 820898D8h case   47:*/		return 0x820898DC;
		  /* 820898DCh */ case   48:  		/* lvx VR37, <#[R9 + R4]> */
		/* 820898DCh case   48:*/		cpu::mem::lvx( regs, &regs.VR37, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 820898DCh case   48:*/		return 0x820898E0;
		  /* 820898E0h */ case   49:  		/* lvx VR38, <#[R10 + R4]> */
		/* 820898E0h case   49:*/		cpu::mem::lvx( regs, &regs.VR38, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 820898E0h case   49:*/		return 0x820898E4;
		  /* 820898E4h */ case   50:  		/* lvx VR39, <#[R11 + R4]> */
		/* 820898E4h case   50:*/		cpu::mem::lvx( regs, &regs.VR39, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 820898E4h case   50:*/		return 0x820898E8;
		  /* 820898E8h */ case   51:  		/* lvx VR40, <#[R12 + R4]> */
		/* 820898E8h case   51:*/		cpu::mem::lvx( regs, &regs.VR40, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 820898E8h case   51:*/		return 0x820898EC;
		  /* 820898ECh */ case   52:  		/* dcbt R4, R0 */
		/* 820898ECh case   52:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 820898ECh case   52:*/		return 0x820898F0;
		  /* 820898F0h */ case   53:  		/* dcbf R0, R4 */
		/* 820898F0h case   53:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 820898F0h case   53:*/		return 0x820898F4;
		  /* 820898F4h */ case   54:  		/* addi R4, R4, 128 */
		/* 820898F4h case   54:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 820898F4h case   54:*/		return 0x820898F8;
		  /* 820898F8h */ case   55:  		/* lvx VR41, <#[R4]> */
		/* 820898F8h case   55:*/		cpu::mem::lvx( regs, &regs.VR41, (uint32)(regs.R4 + 0x00000000) );
		/* 820898F8h case   55:*/		return 0x820898FC;
		  /* 820898FCh */ case   56:  		/* lvx VR42, <#[R6 + R4]> */
		/* 820898FCh case   56:*/		cpu::mem::lvx( regs, &regs.VR42, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 820898FCh case   56:*/		return 0x82089900;
		  /* 82089900h */ case   57:  		/* lvx VR43, <#[R7 + R4]> */
		/* 82089900h case   57:*/		cpu::mem::lvx( regs, &regs.VR43, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 82089900h case   57:*/		return 0x82089904;
		  /* 82089904h */ case   58:  		/* lvx VR44, <#[R8 + R4]> */
		/* 82089904h case   58:*/		cpu::mem::lvx( regs, &regs.VR44, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 82089904h case   58:*/		return 0x82089908;
		  /* 82089908h */ case   59:  		/* lvx VR45, <#[R9 + R4]> */
		/* 82089908h case   59:*/		cpu::mem::lvx( regs, &regs.VR45, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 82089908h case   59:*/		return 0x8208990C;
		  /* 8208990Ch */ case   60:  		/* lvx VR46, <#[R10 + R4]> */
		/* 8208990Ch case   60:*/		cpu::mem::lvx( regs, &regs.VR46, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8208990Ch case   60:*/		return 0x82089910;
		  /* 82089910h */ case   61:  		/* lvx VR47, <#[R11 + R4]> */
		/* 82089910h case   61:*/		cpu::mem::lvx( regs, &regs.VR47, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82089910h case   61:*/		return 0x82089914;
		  /* 82089914h */ case   62:  		/* lvx VR48, <#[R12 + R4]> */
		/* 82089914h case   62:*/		cpu::mem::lvx( regs, &regs.VR48, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 82089914h case   62:*/		return 0x82089918;
		  /* 82089918h */ case   63:  		/* dcbt R4, R0 */
		/* 82089918h case   63:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 82089918h case   63:*/		return 0x8208991C;
		  /* 8208991Ch */ case   64:  		/* dcbf R0, R4 */
		/* 8208991Ch case   64:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 8208991Ch case   64:*/		return 0x82089920;
		  /* 82089920h */ case   65:  		/* addi R4, R4, 128 */
		/* 82089920h case   65:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 82089920h case   65:*/		return 0x82089924;
		  /* 82089924h */ case   66:  		/* lvx VR49, <#[R4]> */
		/* 82089924h case   66:*/		cpu::mem::lvx( regs, &regs.VR49, (uint32)(regs.R4 + 0x00000000) );
		/* 82089924h case   66:*/		return 0x82089928;
		  /* 82089928h */ case   67:  		/* lvx VR50, <#[R6 + R4]> */
		/* 82089928h case   67:*/		cpu::mem::lvx( regs, &regs.VR50, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 82089928h case   67:*/		return 0x8208992C;
		  /* 8208992Ch */ case   68:  		/* lvx VR51, <#[R7 + R4]> */
		/* 8208992Ch case   68:*/		cpu::mem::lvx( regs, &regs.VR51, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 8208992Ch case   68:*/		return 0x82089930;
		  /* 82089930h */ case   69:  		/* lvx VR52, <#[R8 + R4]> */
		/* 82089930h case   69:*/		cpu::mem::lvx( regs, &regs.VR52, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 82089930h case   69:*/		return 0x82089934;
		  /* 82089934h */ case   70:  		/* lvx VR53, <#[R9 + R4]> */
		/* 82089934h case   70:*/		cpu::mem::lvx( regs, &regs.VR53, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 82089934h case   70:*/		return 0x82089938;
		  /* 82089938h */ case   71:  		/* lvx VR54, <#[R10 + R4]> */
		/* 82089938h case   71:*/		cpu::mem::lvx( regs, &regs.VR54, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82089938h case   71:*/		return 0x8208993C;
		  /* 8208993Ch */ case   72:  		/* lvx VR55, <#[R11 + R4]> */
		/* 8208993Ch case   72:*/		cpu::mem::lvx( regs, &regs.VR55, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 8208993Ch case   72:*/		return 0x82089940;
		  /* 82089940h */ case   73:  		/* lvx VR56, <#[R12 + R4]> */
		/* 82089940h case   73:*/		cpu::mem::lvx( regs, &regs.VR56, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 82089940h case   73:*/		return 0x82089944;
		  /* 82089944h */ case   74:  		/* dcbt R4, R0 */
		/* 82089944h case   74:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 82089944h case   74:*/		return 0x82089948;
		  /* 82089948h */ case   75:  		/* dcbf R0, R4 */
		/* 82089948h case   75:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 82089948h case   75:*/		return 0x8208994C;
		  /* 8208994Ch */ case   76:  		/* addi R4, R4, 128 */
		/* 8208994Ch case   76:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 8208994Ch case   76:*/		return 0x82089950;
		  /* 82089950h */ case   77:  		/* lvx VR57, <#[R4]> */
		/* 82089950h case   77:*/		cpu::mem::lvx( regs, &regs.VR57, (uint32)(regs.R4 + 0x00000000) );
		/* 82089950h case   77:*/		return 0x82089954;
		  /* 82089954h */ case   78:  		/* lvx VR58, <#[R6 + R4]> */
		/* 82089954h case   78:*/		cpu::mem::lvx( regs, &regs.VR58, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 82089954h case   78:*/		return 0x82089958;
		  /* 82089958h */ case   79:  		/* lvx VR59, <#[R7 + R4]> */
		/* 82089958h case   79:*/		cpu::mem::lvx( regs, &regs.VR59, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 82089958h case   79:*/		return 0x8208995C;
		  /* 8208995Ch */ case   80:  		/* lvx VR60, <#[R8 + R4]> */
		/* 8208995Ch case   80:*/		cpu::mem::lvx( regs, &regs.VR60, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 8208995Ch case   80:*/		return 0x82089960;
		  /* 82089960h */ case   81:  		/* lvx VR61, <#[R9 + R4]> */
		/* 82089960h case   81:*/		cpu::mem::lvx( regs, &regs.VR61, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 82089960h case   81:*/		return 0x82089964;
		  /* 82089964h */ case   82:  		/* lvx VR62, <#[R10 + R4]> */
		/* 82089964h case   82:*/		cpu::mem::lvx( regs, &regs.VR62, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82089964h case   82:*/		return 0x82089968;
		  /* 82089968h */ case   83:  		/* lvx VR63, <#[R11 + R4]> */
		/* 82089968h case   83:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82089968h case   83:*/		return 0x8208996C;
		  /* 8208996Ch */ case   84:  		/* lvx VR64, <#[R12 + R4]> */
		/* 8208996Ch case   84:*/		cpu::mem::lvx( regs, &regs.VR64, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 8208996Ch case   84:*/		return 0x82089970;
		  /* 82089970h */ case   85:  		/* dcbt R4, R0 */
		/* 82089970h case   85:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 82089970h case   85:*/		return 0x82089974;
		  /* 82089974h */ case   86:  		/* dcbf R0, R4 */
		/* 82089974h case   86:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 82089974h case   86:*/		return 0x82089978;
		  /* 82089978h */ case   87:  		/* addi R4, R4, 128 */
		/* 82089978h case   87:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 82089978h case   87:*/		return 0x8208997C;
		  /* 8208997Ch */ case   88:  		/* vperm VR65, VR65, VR1, VR0 */
		/* 8208997Ch case   88:*/		cpu::op::vperm<0>(regs,&regs.VR65,regs.VR65,regs.VR1,regs.VR0);
		/* 8208997Ch case   88:*/		return 0x82089980;
		  /* 82089980h */ case   89:  		/* vperm VR1, VR1, VR2, VR0 */
		/* 82089980h case   89:*/		cpu::op::vperm<0>(regs,&regs.VR1,regs.VR1,regs.VR2,regs.VR0);
		/* 82089980h case   89:*/		return 0x82089984;
		  /* 82089984h */ case   90:  		/* vperm VR2, VR2, VR3, VR0 */
		/* 82089984h case   90:*/		cpu::op::vperm<0>(regs,&regs.VR2,regs.VR2,regs.VR3,regs.VR0);
		/* 82089984h case   90:*/		return 0x82089988;
		  /* 82089988h */ case   91:  		/* vperm VR3, VR3, VR4, VR0 */
		/* 82089988h case   91:*/		cpu::op::vperm<0>(regs,&regs.VR3,regs.VR3,regs.VR4,regs.VR0);
		/* 82089988h case   91:*/		return 0x8208998C;
		  /* 8208998Ch */ case   92:  		/* vperm VR4, VR4, VR5, VR0 */
		/* 8208998Ch case   92:*/		cpu::op::vperm<0>(regs,&regs.VR4,regs.VR4,regs.VR5,regs.VR0);
		/* 8208998Ch case   92:*/		return 0x82089990;
		  /* 82089990h */ case   93:  		/* vperm VR5, VR5, VR6, VR0 */
		/* 82089990h case   93:*/		cpu::op::vperm<0>(regs,&regs.VR5,regs.VR5,regs.VR6,regs.VR0);
		/* 82089990h case   93:*/		return 0x82089994;
		  /* 82089994h */ case   94:  		/* vperm VR6, VR6, VR7, VR0 */
		/* 82089994h case   94:*/		cpu::op::vperm<0>(regs,&regs.VR6,regs.VR6,regs.VR7,regs.VR0);
		/* 82089994h case   94:*/		return 0x82089998;
		  /* 82089998h */ case   95:  		/* vperm VR7, VR7, VR8, VR0 */
		/* 82089998h case   95:*/		cpu::op::vperm<0>(regs,&regs.VR7,regs.VR7,regs.VR8,regs.VR0);
		/* 82089998h case   95:*/		return 0x8208999C;
		  /* 8208999Ch */ case   96:  		/* stvlx VR65, <#[R3]> */
		/* 8208999Ch case   96:*/		cpu::mem::stvlx( regs, regs.VR65, (uint32)(regs.R3 + 0x00000000) );
		/* 8208999Ch case   96:*/		return 0x820899A0;
		  /* 820899A0h */ case   97:  		/* stvlx VR1, <#[R6 + R3]> */
		/* 820899A0h case   97:*/		cpu::mem::stvlx( regs, regs.VR1, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 820899A0h case   97:*/		return 0x820899A4;
		  /* 820899A4h */ case   98:  		/* stvlx VR2, <#[R7 + R3]> */
		/* 820899A4h case   98:*/		cpu::mem::stvlx( regs, regs.VR2, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 820899A4h case   98:*/		return 0x820899A8;
		  /* 820899A8h */ case   99:  		/* stvlx VR3, <#[R8 + R3]> */
		/* 820899A8h case   99:*/		cpu::mem::stvlx( regs, regs.VR3, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 820899A8h case   99:*/		return 0x820899AC;
		  /* 820899ACh */ case  100:  		/* stvlx VR4, <#[R9 + R3]> */
		/* 820899ACh case  100:*/		cpu::mem::stvlx( regs, regs.VR4, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 820899ACh case  100:*/		return 0x820899B0;
		  /* 820899B0h */ case  101:  		/* stvlx VR5, <#[R10 + R3]> */
		/* 820899B0h case  101:*/		cpu::mem::stvlx( regs, regs.VR5, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 820899B0h case  101:*/		return 0x820899B4;
		  /* 820899B4h */ case  102:  		/* stvlx VR6, <#[R11 + R3]> */
		/* 820899B4h case  102:*/		cpu::mem::stvlx( regs, regs.VR6, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 820899B4h case  102:*/		return 0x820899B8;
		  /* 820899B8h */ case  103:  		/* stvlx VR7, <#[R12 + R3]> */
		/* 820899B8h case  103:*/		cpu::mem::stvlx( regs, regs.VR7, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 820899B8h case  103:*/		return 0x820899BC;
		  /* 820899BCh */ case  104:  		/* addi R3, R3, 128 */
		/* 820899BCh case  104:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 820899BCh case  104:*/		return 0x820899C0;
		  /* 820899C0h */ case  105:  		/* vperm VR8, VR8, VR9, VR0 */
		/* 820899C0h case  105:*/		cpu::op::vperm<0>(regs,&regs.VR8,regs.VR8,regs.VR9,regs.VR0);
		/* 820899C0h case  105:*/		return 0x820899C4;
		  /* 820899C4h */ case  106:  		/* vperm VR9, VR9, VR10, VR0 */
		/* 820899C4h case  106:*/		cpu::op::vperm<0>(regs,&regs.VR9,regs.VR9,regs.VR10,regs.VR0);
		/* 820899C4h case  106:*/		return 0x820899C8;
		  /* 820899C8h */ case  107:  		/* vperm VR10, VR10, VR11, VR0 */
		/* 820899C8h case  107:*/		cpu::op::vperm<0>(regs,&regs.VR10,regs.VR10,regs.VR11,regs.VR0);
		/* 820899C8h case  107:*/		return 0x820899CC;
		  /* 820899CCh */ case  108:  		/* vperm VR11, VR11, VR12, VR0 */
		/* 820899CCh case  108:*/		cpu::op::vperm<0>(regs,&regs.VR11,regs.VR11,regs.VR12,regs.VR0);
		/* 820899CCh case  108:*/		return 0x820899D0;
		  /* 820899D0h */ case  109:  		/* vperm VR12, VR12, VR13, VR0 */
		/* 820899D0h case  109:*/		cpu::op::vperm<0>(regs,&regs.VR12,regs.VR12,regs.VR13,regs.VR0);
		/* 820899D0h case  109:*/		return 0x820899D4;
		  /* 820899D4h */ case  110:  		/* vperm VR13, VR13, VR14, VR0 */
		/* 820899D4h case  110:*/		cpu::op::vperm<0>(regs,&regs.VR13,regs.VR13,regs.VR14,regs.VR0);
		/* 820899D4h case  110:*/		return 0x820899D8;
		  /* 820899D8h */ case  111:  		/* vperm VR14, VR14, VR15, VR0 */
		/* 820899D8h case  111:*/		cpu::op::vperm<0>(regs,&regs.VR14,regs.VR14,regs.VR15,regs.VR0);
		/* 820899D8h case  111:*/		return 0x820899DC;
		  /* 820899DCh */ case  112:  		/* vperm VR15, VR15, VR16, VR0 */
		/* 820899DCh case  112:*/		cpu::op::vperm<0>(regs,&regs.VR15,regs.VR15,regs.VR16,regs.VR0);
		/* 820899DCh case  112:*/		return 0x820899E0;
		  /* 820899E0h */ case  113:  		/* stvlx VR8, <#[R3]> */
		/* 820899E0h case  113:*/		cpu::mem::stvlx( regs, regs.VR8, (uint32)(regs.R3 + 0x00000000) );
		/* 820899E0h case  113:*/		return 0x820899E4;
		  /* 820899E4h */ case  114:  		/* stvlx VR9, <#[R6 + R3]> */
		/* 820899E4h case  114:*/		cpu::mem::stvlx( regs, regs.VR9, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 820899E4h case  114:*/		return 0x820899E8;
		  /* 820899E8h */ case  115:  		/* stvlx VR10, <#[R7 + R3]> */
		/* 820899E8h case  115:*/		cpu::mem::stvlx( regs, regs.VR10, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 820899E8h case  115:*/		return 0x820899EC;
		  /* 820899ECh */ case  116:  		/* stvlx VR11, <#[R8 + R3]> */
		/* 820899ECh case  116:*/		cpu::mem::stvlx( regs, regs.VR11, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 820899ECh case  116:*/		return 0x820899F0;
		  /* 820899F0h */ case  117:  		/* stvlx VR12, <#[R9 + R3]> */
		/* 820899F0h case  117:*/		cpu::mem::stvlx( regs, regs.VR12, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 820899F0h case  117:*/		return 0x820899F4;
		  /* 820899F4h */ case  118:  		/* stvlx VR13, <#[R10 + R3]> */
		/* 820899F4h case  118:*/		cpu::mem::stvlx( regs, regs.VR13, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 820899F4h case  118:*/		return 0x820899F8;
		  /* 820899F8h */ case  119:  		/* stvlx VR14, <#[R11 + R3]> */
		/* 820899F8h case  119:*/		cpu::mem::stvlx( regs, regs.VR14, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 820899F8h case  119:*/		return 0x820899FC;
		  /* 820899FCh */ case  120:  		/* stvlx VR15, <#[R12 + R3]> */
		/* 820899FCh case  120:*/		cpu::mem::stvlx( regs, regs.VR15, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 820899FCh case  120:*/		return 0x82089A00;
		  /* 82089A00h */ case  121:  		/* addi R3, R3, 128 */
		/* 82089A00h case  121:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 82089A00h case  121:*/		return 0x82089A04;
		  /* 82089A04h */ case  122:  		/* vperm VR16, VR16, VR17, VR0 */
		/* 82089A04h case  122:*/		cpu::op::vperm<0>(regs,&regs.VR16,regs.VR16,regs.VR17,regs.VR0);
		/* 82089A04h case  122:*/		return 0x82089A08;
		  /* 82089A08h */ case  123:  		/* vperm VR17, VR17, VR18, VR0 */
		/* 82089A08h case  123:*/		cpu::op::vperm<0>(regs,&regs.VR17,regs.VR17,regs.VR18,regs.VR0);
		/* 82089A08h case  123:*/		return 0x82089A0C;
		  /* 82089A0Ch */ case  124:  		/* vperm VR18, VR18, VR19, VR0 */
		/* 82089A0Ch case  124:*/		cpu::op::vperm<0>(regs,&regs.VR18,regs.VR18,regs.VR19,regs.VR0);
		/* 82089A0Ch case  124:*/		return 0x82089A10;
		  /* 82089A10h */ case  125:  		/* vperm VR19, VR19, VR20, VR0 */
		/* 82089A10h case  125:*/		cpu::op::vperm<0>(regs,&regs.VR19,regs.VR19,regs.VR20,regs.VR0);
		/* 82089A10h case  125:*/		return 0x82089A14;
		  /* 82089A14h */ case  126:  		/* vperm VR20, VR20, VR21, VR0 */
		/* 82089A14h case  126:*/		cpu::op::vperm<0>(regs,&regs.VR20,regs.VR20,regs.VR21,regs.VR0);
		/* 82089A14h case  126:*/		return 0x82089A18;
		  /* 82089A18h */ case  127:  		/* vperm VR21, VR21, VR22, VR0 */
		/* 82089A18h case  127:*/		cpu::op::vperm<0>(regs,&regs.VR21,regs.VR21,regs.VR22,regs.VR0);
		/* 82089A18h case  127:*/		return 0x82089A1C;
		  /* 82089A1Ch */ case  128:  		/* vperm VR22, VR22, VR23, VR0 */
		/* 82089A1Ch case  128:*/		cpu::op::vperm<0>(regs,&regs.VR22,regs.VR22,regs.VR23,regs.VR0);
		/* 82089A1Ch case  128:*/		return 0x82089A20;
		  /* 82089A20h */ case  129:  		/* vperm VR23, VR23, VR24, VR0 */
		/* 82089A20h case  129:*/		cpu::op::vperm<0>(regs,&regs.VR23,regs.VR23,regs.VR24,regs.VR0);
		/* 82089A20h case  129:*/		return 0x82089A24;
		  /* 82089A24h */ case  130:  		/* stvlx VR16, <#[R3]> */
		/* 82089A24h case  130:*/		cpu::mem::stvlx( regs, regs.VR16, (uint32)(regs.R3 + 0x00000000) );
		/* 82089A24h case  130:*/		return 0x82089A28;
		  /* 82089A28h */ case  131:  		/* stvlx VR17, <#[R6 + R3]> */
		/* 82089A28h case  131:*/		cpu::mem::stvlx( regs, regs.VR17, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 82089A28h case  131:*/		return 0x82089A2C;
		  /* 82089A2Ch */ case  132:  		/* stvlx VR18, <#[R7 + R3]> */
		/* 82089A2Ch case  132:*/		cpu::mem::stvlx( regs, regs.VR18, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 82089A2Ch case  132:*/		return 0x82089A30;
		  /* 82089A30h */ case  133:  		/* stvlx VR19, <#[R8 + R3]> */
		/* 82089A30h case  133:*/		cpu::mem::stvlx( regs, regs.VR19, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82089A30h case  133:*/		return 0x82089A34;
		  /* 82089A34h */ case  134:  		/* stvlx VR20, <#[R9 + R3]> */
		/* 82089A34h case  134:*/		cpu::mem::stvlx( regs, regs.VR20, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82089A34h case  134:*/		return 0x82089A38;
		  /* 82089A38h */ case  135:  		/* stvlx VR21, <#[R10 + R3]> */
		/* 82089A38h case  135:*/		cpu::mem::stvlx( regs, regs.VR21, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82089A38h case  135:*/		return 0x82089A3C;
		  /* 82089A3Ch */ case  136:  		/* stvlx VR22, <#[R11 + R3]> */
		/* 82089A3Ch case  136:*/		cpu::mem::stvlx( regs, regs.VR22, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82089A3Ch case  136:*/		return 0x82089A40;
		  /* 82089A40h */ case  137:  		/* stvlx VR23, <#[R12 + R3]> */
		/* 82089A40h case  137:*/		cpu::mem::stvlx( regs, regs.VR23, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 82089A40h case  137:*/		return 0x82089A44;
		  /* 82089A44h */ case  138:  		/* addi R3, R3, 128 */
		/* 82089A44h case  138:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 82089A44h case  138:*/		return 0x82089A48;
		  /* 82089A48h */ case  139:  		/* vperm VR24, VR24, VR25, VR0 */
		/* 82089A48h case  139:*/		cpu::op::vperm<0>(regs,&regs.VR24,regs.VR24,regs.VR25,regs.VR0);
		/* 82089A48h case  139:*/		return 0x82089A4C;
		  /* 82089A4Ch */ case  140:  		/* vperm VR25, VR25, VR26, VR0 */
		/* 82089A4Ch case  140:*/		cpu::op::vperm<0>(regs,&regs.VR25,regs.VR25,regs.VR26,regs.VR0);
		/* 82089A4Ch case  140:*/		return 0x82089A50;
		  /* 82089A50h */ case  141:  		/* vperm VR26, VR26, VR27, VR0 */
		/* 82089A50h case  141:*/		cpu::op::vperm<0>(regs,&regs.VR26,regs.VR26,regs.VR27,regs.VR0);
		/* 82089A50h case  141:*/		return 0x82089A54;
		  /* 82089A54h */ case  142:  		/* vperm VR27, VR27, VR28, VR0 */
		/* 82089A54h case  142:*/		cpu::op::vperm<0>(regs,&regs.VR27,regs.VR27,regs.VR28,regs.VR0);
		/* 82089A54h case  142:*/		return 0x82089A58;
		  /* 82089A58h */ case  143:  		/* vperm VR28, VR28, VR29, VR0 */
		/* 82089A58h case  143:*/		cpu::op::vperm<0>(regs,&regs.VR28,regs.VR28,regs.VR29,regs.VR0);
		/* 82089A58h case  143:*/		return 0x82089A5C;
		  /* 82089A5Ch */ case  144:  		/* vperm VR29, VR29, VR30, VR0 */
		/* 82089A5Ch case  144:*/		cpu::op::vperm<0>(regs,&regs.VR29,regs.VR29,regs.VR30,regs.VR0);
		/* 82089A5Ch case  144:*/		return 0x82089A60;
		  /* 82089A60h */ case  145:  		/* vperm VR30, VR30, VR31, VR0 */
		/* 82089A60h case  145:*/		cpu::op::vperm<0>(regs,&regs.VR30,regs.VR30,regs.VR31,regs.VR0);
		/* 82089A60h case  145:*/		return 0x82089A64;
		  /* 82089A64h */ case  146:  		/* vperm VR31, VR31, VR32, VR0 */
		/* 82089A64h case  146:*/		cpu::op::vperm<0>(regs,&regs.VR31,regs.VR31,regs.VR32,regs.VR0);
		/* 82089A64h case  146:*/		return 0x82089A68;
		  /* 82089A68h */ case  147:  		/* stvlx VR24, <#[R3]> */
		/* 82089A68h case  147:*/		cpu::mem::stvlx( regs, regs.VR24, (uint32)(regs.R3 + 0x00000000) );
		/* 82089A68h case  147:*/		return 0x82089A6C;
		  /* 82089A6Ch */ case  148:  		/* stvlx VR25, <#[R6 + R3]> */
		/* 82089A6Ch case  148:*/		cpu::mem::stvlx( regs, regs.VR25, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 82089A6Ch case  148:*/		return 0x82089A70;
		  /* 82089A70h */ case  149:  		/* stvlx VR26, <#[R7 + R3]> */
		/* 82089A70h case  149:*/		cpu::mem::stvlx( regs, regs.VR26, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 82089A70h case  149:*/		return 0x82089A74;
		  /* 82089A74h */ case  150:  		/* stvlx VR27, <#[R8 + R3]> */
		/* 82089A74h case  150:*/		cpu::mem::stvlx( regs, regs.VR27, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82089A74h case  150:*/		return 0x82089A78;
		  /* 82089A78h */ case  151:  		/* stvlx VR28, <#[R9 + R3]> */
		/* 82089A78h case  151:*/		cpu::mem::stvlx( regs, regs.VR28, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82089A78h case  151:*/		return 0x82089A7C;
		  /* 82089A7Ch */ case  152:  		/* stvlx VR29, <#[R10 + R3]> */
		/* 82089A7Ch case  152:*/		cpu::mem::stvlx( regs, regs.VR29, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82089A7Ch case  152:*/		return 0x82089A80;
		  /* 82089A80h */ case  153:  		/* stvlx VR30, <#[R11 + R3]> */
		/* 82089A80h case  153:*/		cpu::mem::stvlx( regs, regs.VR30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82089A80h case  153:*/		return 0x82089A84;
		  /* 82089A84h */ case  154:  		/* stvlx VR31, <#[R12 + R3]> */
		/* 82089A84h case  154:*/		cpu::mem::stvlx( regs, regs.VR31, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 82089A84h case  154:*/		return 0x82089A88;
		  /* 82089A88h */ case  155:  		/* addi R3, R3, 128 */
		/* 82089A88h case  155:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 82089A88h case  155:*/		return 0x82089A8C;
		  /* 82089A8Ch */ case  156:  		/* vperm VR32, VR32, VR33, VR0 */
		/* 82089A8Ch case  156:*/		cpu::op::vperm<0>(regs,&regs.VR32,regs.VR32,regs.VR33,regs.VR0);
		/* 82089A8Ch case  156:*/		return 0x82089A90;
		  /* 82089A90h */ case  157:  		/* vperm VR33, VR33, VR34, VR0 */
		/* 82089A90h case  157:*/		cpu::op::vperm<0>(regs,&regs.VR33,regs.VR33,regs.VR34,regs.VR0);
		/* 82089A90h case  157:*/		return 0x82089A94;
		  /* 82089A94h */ case  158:  		/* vperm VR34, VR34, VR35, VR0 */
		/* 82089A94h case  158:*/		cpu::op::vperm<0>(regs,&regs.VR34,regs.VR34,regs.VR35,regs.VR0);
		/* 82089A94h case  158:*/		return 0x82089A98;
		  /* 82089A98h */ case  159:  		/* vperm VR35, VR35, VR36, VR0 */
		/* 82089A98h case  159:*/		cpu::op::vperm<0>(regs,&regs.VR35,regs.VR35,regs.VR36,regs.VR0);
		/* 82089A98h case  159:*/		return 0x82089A9C;
		  /* 82089A9Ch */ case  160:  		/* vperm VR36, VR36, VR37, VR0 */
		/* 82089A9Ch case  160:*/		cpu::op::vperm<0>(regs,&regs.VR36,regs.VR36,regs.VR37,regs.VR0);
		/* 82089A9Ch case  160:*/		return 0x82089AA0;
		  /* 82089AA0h */ case  161:  		/* vperm VR37, VR37, VR38, VR0 */
		/* 82089AA0h case  161:*/		cpu::op::vperm<0>(regs,&regs.VR37,regs.VR37,regs.VR38,regs.VR0);
		/* 82089AA0h case  161:*/		return 0x82089AA4;
		  /* 82089AA4h */ case  162:  		/* vperm VR38, VR38, VR39, VR0 */
		/* 82089AA4h case  162:*/		cpu::op::vperm<0>(regs,&regs.VR38,regs.VR38,regs.VR39,regs.VR0);
		/* 82089AA4h case  162:*/		return 0x82089AA8;
		  /* 82089AA8h */ case  163:  		/* vperm VR39, VR39, VR40, VR0 */
		/* 82089AA8h case  163:*/		cpu::op::vperm<0>(regs,&regs.VR39,regs.VR39,regs.VR40,regs.VR0);
		/* 82089AA8h case  163:*/		return 0x82089AAC;
		  /* 82089AACh */ case  164:  		/* stvlx VR32, <#[R3]> */
		/* 82089AACh case  164:*/		cpu::mem::stvlx( regs, regs.VR32, (uint32)(regs.R3 + 0x00000000) );
		/* 82089AACh case  164:*/		return 0x82089AB0;
		  /* 82089AB0h */ case  165:  		/* stvlx VR33, <#[R6 + R3]> */
		/* 82089AB0h case  165:*/		cpu::mem::stvlx( regs, regs.VR33, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 82089AB0h case  165:*/		return 0x82089AB4;
		  /* 82089AB4h */ case  166:  		/* stvlx VR34, <#[R7 + R3]> */
		/* 82089AB4h case  166:*/		cpu::mem::stvlx( regs, regs.VR34, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 82089AB4h case  166:*/		return 0x82089AB8;
		  /* 82089AB8h */ case  167:  		/* stvlx VR35, <#[R8 + R3]> */
		/* 82089AB8h case  167:*/		cpu::mem::stvlx( regs, regs.VR35, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82089AB8h case  167:*/		return 0x82089ABC;
		  /* 82089ABCh */ case  168:  		/* stvlx VR36, <#[R9 + R3]> */
		/* 82089ABCh case  168:*/		cpu::mem::stvlx( regs, regs.VR36, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82089ABCh case  168:*/		return 0x82089AC0;
		  /* 82089AC0h */ case  169:  		/* stvlx VR37, <#[R10 + R3]> */
		/* 82089AC0h case  169:*/		cpu::mem::stvlx( regs, regs.VR37, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82089AC0h case  169:*/		return 0x82089AC4;
		  /* 82089AC4h */ case  170:  		/* stvlx VR38, <#[R11 + R3]> */
		/* 82089AC4h case  170:*/		cpu::mem::stvlx( regs, regs.VR38, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82089AC4h case  170:*/		return 0x82089AC8;
		  /* 82089AC8h */ case  171:  		/* stvlx VR39, <#[R12 + R3]> */
		/* 82089AC8h case  171:*/		cpu::mem::stvlx( regs, regs.VR39, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 82089AC8h case  171:*/		return 0x82089ACC;
		  /* 82089ACCh */ case  172:  		/* addi R3, R3, 128 */
		/* 82089ACCh case  172:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 82089ACCh case  172:*/		return 0x82089AD0;
		  /* 82089AD0h */ case  173:  		/* vperm VR40, VR40, VR41, VR0 */
		/* 82089AD0h case  173:*/		cpu::op::vperm<0>(regs,&regs.VR40,regs.VR40,regs.VR41,regs.VR0);
		/* 82089AD0h case  173:*/		return 0x82089AD4;
		  /* 82089AD4h */ case  174:  		/* vperm VR41, VR41, VR42, VR0 */
		/* 82089AD4h case  174:*/		cpu::op::vperm<0>(regs,&regs.VR41,regs.VR41,regs.VR42,regs.VR0);
		/* 82089AD4h case  174:*/		return 0x82089AD8;
		  /* 82089AD8h */ case  175:  		/* vperm VR42, VR42, VR43, VR0 */
		/* 82089AD8h case  175:*/		cpu::op::vperm<0>(regs,&regs.VR42,regs.VR42,regs.VR43,regs.VR0);
		/* 82089AD8h case  175:*/		return 0x82089ADC;
		  /* 82089ADCh */ case  176:  		/* vperm VR43, VR43, VR44, VR0 */
		/* 82089ADCh case  176:*/		cpu::op::vperm<0>(regs,&regs.VR43,regs.VR43,regs.VR44,regs.VR0);
		/* 82089ADCh case  176:*/		return 0x82089AE0;
		  /* 82089AE0h */ case  177:  		/* vperm VR44, VR44, VR45, VR0 */
		/* 82089AE0h case  177:*/		cpu::op::vperm<0>(regs,&regs.VR44,regs.VR44,regs.VR45,regs.VR0);
		/* 82089AE0h case  177:*/		return 0x82089AE4;
		  /* 82089AE4h */ case  178:  		/* vperm VR45, VR45, VR46, VR0 */
		/* 82089AE4h case  178:*/		cpu::op::vperm<0>(regs,&regs.VR45,regs.VR45,regs.VR46,regs.VR0);
		/* 82089AE4h case  178:*/		return 0x82089AE8;
		  /* 82089AE8h */ case  179:  		/* vperm VR46, VR46, VR47, VR0 */
		/* 82089AE8h case  179:*/		cpu::op::vperm<0>(regs,&regs.VR46,regs.VR46,regs.VR47,regs.VR0);
		/* 82089AE8h case  179:*/		return 0x82089AEC;
		  /* 82089AECh */ case  180:  		/* vperm VR47, VR47, VR48, VR0 */
		/* 82089AECh case  180:*/		cpu::op::vperm<0>(regs,&regs.VR47,regs.VR47,regs.VR48,regs.VR0);
		/* 82089AECh case  180:*/		return 0x82089AF0;
		  /* 82089AF0h */ case  181:  		/* stvlx VR40, <#[R3]> */
		/* 82089AF0h case  181:*/		cpu::mem::stvlx( regs, regs.VR40, (uint32)(regs.R3 + 0x00000000) );
		/* 82089AF0h case  181:*/		return 0x82089AF4;
		  /* 82089AF4h */ case  182:  		/* stvlx VR41, <#[R6 + R3]> */
		/* 82089AF4h case  182:*/		cpu::mem::stvlx( regs, regs.VR41, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 82089AF4h case  182:*/		return 0x82089AF8;
		  /* 82089AF8h */ case  183:  		/* stvlx VR42, <#[R7 + R3]> */
		/* 82089AF8h case  183:*/		cpu::mem::stvlx( regs, regs.VR42, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 82089AF8h case  183:*/		return 0x82089AFC;
		  /* 82089AFCh */ case  184:  		/* stvlx VR43, <#[R8 + R3]> */
		/* 82089AFCh case  184:*/		cpu::mem::stvlx( regs, regs.VR43, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82089AFCh case  184:*/		return 0x82089B00;
		  /* 82089B00h */ case  185:  		/* stvlx VR44, <#[R9 + R3]> */
		/* 82089B00h case  185:*/		cpu::mem::stvlx( regs, regs.VR44, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82089B00h case  185:*/		return 0x82089B04;
		  /* 82089B04h */ case  186:  		/* stvlx VR45, <#[R10 + R3]> */
		/* 82089B04h case  186:*/		cpu::mem::stvlx( regs, regs.VR45, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82089B04h case  186:*/		return 0x82089B08;
		  /* 82089B08h */ case  187:  		/* stvlx VR46, <#[R11 + R3]> */
		/* 82089B08h case  187:*/		cpu::mem::stvlx( regs, regs.VR46, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82089B08h case  187:*/		return 0x82089B0C;
		  /* 82089B0Ch */ case  188:  		/* stvlx VR47, <#[R12 + R3]> */
		/* 82089B0Ch case  188:*/		cpu::mem::stvlx( regs, regs.VR47, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 82089B0Ch case  188:*/		return 0x82089B10;
		  /* 82089B10h */ case  189:  		/* addi R3, R3, 128 */
		/* 82089B10h case  189:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 82089B10h case  189:*/		return 0x82089B14;
		  /* 82089B14h */ case  190:  		/* vperm VR48, VR48, VR49, VR0 */
		/* 82089B14h case  190:*/		cpu::op::vperm<0>(regs,&regs.VR48,regs.VR48,regs.VR49,regs.VR0);
		/* 82089B14h case  190:*/		return 0x82089B18;
		  /* 82089B18h */ case  191:  		/* vperm VR49, VR49, VR50, VR0 */
		/* 82089B18h case  191:*/		cpu::op::vperm<0>(regs,&regs.VR49,regs.VR49,regs.VR50,regs.VR0);
		/* 82089B18h case  191:*/		return 0x82089B1C;
		  /* 82089B1Ch */ case  192:  		/* vperm VR50, VR50, VR51, VR0 */
		/* 82089B1Ch case  192:*/		cpu::op::vperm<0>(regs,&regs.VR50,regs.VR50,regs.VR51,regs.VR0);
		/* 82089B1Ch case  192:*/		return 0x82089B20;
		  /* 82089B20h */ case  193:  		/* vperm VR51, VR51, VR52, VR0 */
		/* 82089B20h case  193:*/		cpu::op::vperm<0>(regs,&regs.VR51,regs.VR51,regs.VR52,regs.VR0);
		/* 82089B20h case  193:*/		return 0x82089B24;
		  /* 82089B24h */ case  194:  		/* vperm VR52, VR52, VR53, VR0 */
		/* 82089B24h case  194:*/		cpu::op::vperm<0>(regs,&regs.VR52,regs.VR52,regs.VR53,regs.VR0);
		/* 82089B24h case  194:*/		return 0x82089B28;
		  /* 82089B28h */ case  195:  		/* vperm VR53, VR53, VR54, VR0 */
		/* 82089B28h case  195:*/		cpu::op::vperm<0>(regs,&regs.VR53,regs.VR53,regs.VR54,regs.VR0);
		/* 82089B28h case  195:*/		return 0x82089B2C;
		  /* 82089B2Ch */ case  196:  		/* vperm VR54, VR54, VR55, VR0 */
		/* 82089B2Ch case  196:*/		cpu::op::vperm<0>(regs,&regs.VR54,regs.VR54,regs.VR55,regs.VR0);
		/* 82089B2Ch case  196:*/		return 0x82089B30;
		  /* 82089B30h */ case  197:  		/* vperm VR55, VR55, VR56, VR0 */
		/* 82089B30h case  197:*/		cpu::op::vperm<0>(regs,&regs.VR55,regs.VR55,regs.VR56,regs.VR0);
		/* 82089B30h case  197:*/		return 0x82089B34;
		  /* 82089B34h */ case  198:  		/* stvlx VR48, <#[R3]> */
		/* 82089B34h case  198:*/		cpu::mem::stvlx( regs, regs.VR48, (uint32)(regs.R3 + 0x00000000) );
		/* 82089B34h case  198:*/		return 0x82089B38;
		  /* 82089B38h */ case  199:  		/* stvlx VR49, <#[R6 + R3]> */
		/* 82089B38h case  199:*/		cpu::mem::stvlx( regs, regs.VR49, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 82089B38h case  199:*/		return 0x82089B3C;
		  /* 82089B3Ch */ case  200:  		/* stvlx VR50, <#[R7 + R3]> */
		/* 82089B3Ch case  200:*/		cpu::mem::stvlx( regs, regs.VR50, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 82089B3Ch case  200:*/		return 0x82089B40;
		  /* 82089B40h */ case  201:  		/* stvlx VR51, <#[R8 + R3]> */
		/* 82089B40h case  201:*/		cpu::mem::stvlx( regs, regs.VR51, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82089B40h case  201:*/		return 0x82089B44;
		  /* 82089B44h */ case  202:  		/* stvlx VR52, <#[R9 + R3]> */
		/* 82089B44h case  202:*/		cpu::mem::stvlx( regs, regs.VR52, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82089B44h case  202:*/		return 0x82089B48;
		  /* 82089B48h */ case  203:  		/* stvlx VR53, <#[R10 + R3]> */
		/* 82089B48h case  203:*/		cpu::mem::stvlx( regs, regs.VR53, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82089B48h case  203:*/		return 0x82089B4C;
		  /* 82089B4Ch */ case  204:  		/* stvlx VR54, <#[R11 + R3]> */
		/* 82089B4Ch case  204:*/		cpu::mem::stvlx( regs, regs.VR54, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82089B4Ch case  204:*/		return 0x82089B50;
		  /* 82089B50h */ case  205:  		/* stvlx VR55, <#[R12 + R3]> */
		/* 82089B50h case  205:*/		cpu::mem::stvlx( regs, regs.VR55, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 82089B50h case  205:*/		return 0x82089B54;
		  /* 82089B54h */ case  206:  		/* addi R3, R3, 128 */
		/* 82089B54h case  206:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 82089B54h case  206:*/		return 0x82089B58;
		  /* 82089B58h */ case  207:  		/* vperm VR56, VR56, VR57, VR0 */
		/* 82089B58h case  207:*/		cpu::op::vperm<0>(regs,&regs.VR56,regs.VR56,regs.VR57,regs.VR0);
		/* 82089B58h case  207:*/		return 0x82089B5C;
		  /* 82089B5Ch */ case  208:  		/* vperm VR57, VR57, VR58, VR0 */
		/* 82089B5Ch case  208:*/		cpu::op::vperm<0>(regs,&regs.VR57,regs.VR57,regs.VR58,regs.VR0);
		/* 82089B5Ch case  208:*/		return 0x82089B60;
		  /* 82089B60h */ case  209:  		/* vperm VR58, VR58, VR59, VR0 */
		/* 82089B60h case  209:*/		cpu::op::vperm<0>(regs,&regs.VR58,regs.VR58,regs.VR59,regs.VR0);
		/* 82089B60h case  209:*/		return 0x82089B64;
		  /* 82089B64h */ case  210:  		/* vperm VR59, VR59, VR60, VR0 */
		/* 82089B64h case  210:*/		cpu::op::vperm<0>(regs,&regs.VR59,regs.VR59,regs.VR60,regs.VR0);
		/* 82089B64h case  210:*/		return 0x82089B68;
		  /* 82089B68h */ case  211:  		/* vperm VR60, VR60, VR61, VR0 */
		/* 82089B68h case  211:*/		cpu::op::vperm<0>(regs,&regs.VR60,regs.VR60,regs.VR61,regs.VR0);
		/* 82089B68h case  211:*/		return 0x82089B6C;
		  /* 82089B6Ch */ case  212:  		/* vperm VR61, VR61, VR62, VR0 */
		/* 82089B6Ch case  212:*/		cpu::op::vperm<0>(regs,&regs.VR61,regs.VR61,regs.VR62,regs.VR0);
		/* 82089B6Ch case  212:*/		return 0x82089B70;
		  /* 82089B70h */ case  213:  		/* vperm VR62, VR62, VR63, VR0 */
		/* 82089B70h case  213:*/		cpu::op::vperm<0>(regs,&regs.VR62,regs.VR62,regs.VR63,regs.VR0);
		/* 82089B70h case  213:*/		return 0x82089B74;
		  /* 82089B74h */ case  214:  		/* vperm VR63, VR63, VR64, VR0 */
		/* 82089B74h case  214:*/		cpu::op::vperm<0>(regs,&regs.VR63,regs.VR63,regs.VR64,regs.VR0);
		/* 82089B74h case  214:*/		return 0x82089B78;
		  /* 82089B78h */ case  215:  		/* stvlx VR56, <#[R3]> */
		/* 82089B78h case  215:*/		cpu::mem::stvlx( regs, regs.VR56, (uint32)(regs.R3 + 0x00000000) );
		/* 82089B78h case  215:*/		return 0x82089B7C;
		  /* 82089B7Ch */ case  216:  		/* stvlx VR57, <#[R6 + R3]> */
		/* 82089B7Ch case  216:*/		cpu::mem::stvlx( regs, regs.VR57, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 82089B7Ch case  216:*/		return 0x82089B80;
		  /* 82089B80h */ case  217:  		/* stvlx VR58, <#[R7 + R3]> */
		/* 82089B80h case  217:*/		cpu::mem::stvlx( regs, regs.VR58, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 82089B80h case  217:*/		return 0x82089B84;
		  /* 82089B84h */ case  218:  		/* stvlx VR59, <#[R8 + R3]> */
		/* 82089B84h case  218:*/		cpu::mem::stvlx( regs, regs.VR59, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82089B84h case  218:*/		return 0x82089B88;
		  /* 82089B88h */ case  219:  		/* stvlx VR60, <#[R9 + R3]> */
		/* 82089B88h case  219:*/		cpu::mem::stvlx( regs, regs.VR60, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82089B88h case  219:*/		return 0x82089B8C;
		  /* 82089B8Ch */ case  220:  		/* stvlx VR61, <#[R10 + R3]> */
		/* 82089B8Ch case  220:*/		cpu::mem::stvlx( regs, regs.VR61, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82089B8Ch case  220:*/		return 0x82089B90;
		  /* 82089B90h */ case  221:  		/* stvlx VR62, <#[R11 + R3]> */
		/* 82089B90h case  221:*/		cpu::mem::stvlx( regs, regs.VR62, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82089B90h case  221:*/		return 0x82089B94;
		  /* 82089B94h */ case  222:  		/* stvlx VR63, <#[R12 + R3]> */
		/* 82089B94h case  222:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 82089B94h case  222:*/		return 0x82089B98;
		  /* 82089B98h */ case  223:  		/* mr VR65, VR64 */
		/* 82089B98h case  223:*/		regs.VR65 = regs.VR64;
		/* 82089B98h case  223:*/		return 0x82089B9C;
		  /* 82089B9Ch */ case  224:  		/* addi R3, R3, 128 */
		/* 82089B9Ch case  224:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 82089B9Ch case  224:*/		return 0x82089BA0;
		  /* 82089BA0h */ case  225:  		/* addi R5, R5, -1024 */
		/* 82089BA0h case  225:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0xFFFFFC00);
		/* 82089BA0h case  225:*/		return 0x82089BA4;
		  /* 82089BA4h */ case  226:  		/* cmplwi CR6, R5, 1024 */
		/* 82089BA4h case  226:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000400);
		/* 82089BA4h case  226:*/		return 0x82089BA8;
		  /* 82089BA8h */ case  227:  		/* bc 4, CR6_LT, -924 */
		/* 82089BA8h case  227:*/		if ( !regs.CR[6].lt ) { return 0x8208980C;  }
		/* 82089BA8h case  227:*/		return 0x82089BAC;
		  /* 82089BACh */ case  228:  		/* cmplwi CR6, R5, 0 */
		/* 82089BACh case  228:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82089BACh case  228:*/		return 0x82089BB0;
		  /* 82089BB0h */ case  229:  		/* bc 4, CR6_EQ, 8 */
		/* 82089BB0h case  229:*/		if ( !regs.CR[6].eq ) { return 0x82089BB8;  }
		/* 82089BB0h case  229:*/		return 0x82089BB4;
		  /* 82089BB4h */ case  230:  		/* b 128 */
		/* 82089BB4h case  230:*/		return 0x82089C34;
		/* 82089BB4h case  230:*/		return 0x82089BB8;
	}
	return 0x82089BB8;
} // Block from 8208981Ch-82089BB8h (231 instructions)

//////////////////////////////////////////////////////
// Block at 82089BB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089BB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089BB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089BB8);
		  /* 82089BB8h */ case    0:  		/* lvx VR1, <#[R4]> */
		/* 82089BB8h case    0:*/		cpu::mem::lvx( regs, &regs.VR1, (uint32)(regs.R4 + 0x00000000) );
		/* 82089BB8h case    0:*/		return 0x82089BBC;
		  /* 82089BBCh */ case    1:  		/* lvx VR2, <#[R6 + R4]> */
		/* 82089BBCh case    1:*/		cpu::mem::lvx( regs, &regs.VR2, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 82089BBCh case    1:*/		return 0x82089BC0;
		  /* 82089BC0h */ case    2:  		/* lvx VR3, <#[R7 + R4]> */
		/* 82089BC0h case    2:*/		cpu::mem::lvx( regs, &regs.VR3, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 82089BC0h case    2:*/		return 0x82089BC4;
		  /* 82089BC4h */ case    3:  		/* lvx VR4, <#[R8 + R4]> */
		/* 82089BC4h case    3:*/		cpu::mem::lvx( regs, &regs.VR4, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 82089BC4h case    3:*/		return 0x82089BC8;
		  /* 82089BC8h */ case    4:  		/* lvx VR5, <#[R9 + R4]> */
		/* 82089BC8h case    4:*/		cpu::mem::lvx( regs, &regs.VR5, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 82089BC8h case    4:*/		return 0x82089BCC;
		  /* 82089BCCh */ case    5:  		/* lvx VR6, <#[R10 + R4]> */
		/* 82089BCCh case    5:*/		cpu::mem::lvx( regs, &regs.VR6, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82089BCCh case    5:*/		return 0x82089BD0;
		  /* 82089BD0h */ case    6:  		/* lvx VR7, <#[R11 + R4]> */
		/* 82089BD0h case    6:*/		cpu::mem::lvx( regs, &regs.VR7, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82089BD0h case    6:*/		return 0x82089BD4;
		  /* 82089BD4h */ case    7:  		/* lvx VR8, <#[R12 + R4]> */
		/* 82089BD4h case    7:*/		cpu::mem::lvx( regs, &regs.VR8, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 82089BD4h case    7:*/		return 0x82089BD8;
		  /* 82089BD8h */ case    8:  		/* dcbf R0, R4 */
		/* 82089BD8h case    8:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 82089BD8h case    8:*/		return 0x82089BDC;
		  /* 82089BDCh */ case    9:  		/* addi R4, R4, 128 */
		/* 82089BDCh case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 82089BDCh case    9:*/		return 0x82089BE0;
		  /* 82089BE0h */ case   10:  		/* vperm VR65, VR65, VR1, VR0 */
		/* 82089BE0h case   10:*/		cpu::op::vperm<0>(regs,&regs.VR65,regs.VR65,regs.VR1,regs.VR0);
		/* 82089BE0h case   10:*/		return 0x82089BE4;
		  /* 82089BE4h */ case   11:  		/* vperm VR1, VR1, VR2, VR0 */
		/* 82089BE4h case   11:*/		cpu::op::vperm<0>(regs,&regs.VR1,regs.VR1,regs.VR2,regs.VR0);
		/* 82089BE4h case   11:*/		return 0x82089BE8;
		  /* 82089BE8h */ case   12:  		/* vperm VR2, VR2, VR3, VR0 */
		/* 82089BE8h case   12:*/		cpu::op::vperm<0>(regs,&regs.VR2,regs.VR2,regs.VR3,regs.VR0);
		/* 82089BE8h case   12:*/		return 0x82089BEC;
		  /* 82089BECh */ case   13:  		/* vperm VR3, VR3, VR4, VR0 */
		/* 82089BECh case   13:*/		cpu::op::vperm<0>(regs,&regs.VR3,regs.VR3,regs.VR4,regs.VR0);
		/* 82089BECh case   13:*/		return 0x82089BF0;
		  /* 82089BF0h */ case   14:  		/* vperm VR4, VR4, VR5, VR0 */
		/* 82089BF0h case   14:*/		cpu::op::vperm<0>(regs,&regs.VR4,regs.VR4,regs.VR5,regs.VR0);
		/* 82089BF0h case   14:*/		return 0x82089BF4;
		  /* 82089BF4h */ case   15:  		/* vperm VR5, VR5, VR6, VR0 */
		/* 82089BF4h case   15:*/		cpu::op::vperm<0>(regs,&regs.VR5,regs.VR5,regs.VR6,regs.VR0);
		/* 82089BF4h case   15:*/		return 0x82089BF8;
		  /* 82089BF8h */ case   16:  		/* vperm VR6, VR6, VR7, VR0 */
		/* 82089BF8h case   16:*/		cpu::op::vperm<0>(regs,&regs.VR6,regs.VR6,regs.VR7,regs.VR0);
		/* 82089BF8h case   16:*/		return 0x82089BFC;
		  /* 82089BFCh */ case   17:  		/* vperm VR7, VR7, VR8, VR0 */
		/* 82089BFCh case   17:*/		cpu::op::vperm<0>(regs,&regs.VR7,regs.VR7,regs.VR8,regs.VR0);
		/* 82089BFCh case   17:*/		return 0x82089C00;
		  /* 82089C00h */ case   18:  		/* stvlx VR65, <#[R3]> */
		/* 82089C00h case   18:*/		cpu::mem::stvlx( regs, regs.VR65, (uint32)(regs.R3 + 0x00000000) );
		/* 82089C00h case   18:*/		return 0x82089C04;
		  /* 82089C04h */ case   19:  		/* stvlx VR1, <#[R6 + R3]> */
		/* 82089C04h case   19:*/		cpu::mem::stvlx( regs, regs.VR1, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 82089C04h case   19:*/		return 0x82089C08;
		  /* 82089C08h */ case   20:  		/* stvlx VR2, <#[R7 + R3]> */
		/* 82089C08h case   20:*/		cpu::mem::stvlx( regs, regs.VR2, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 82089C08h case   20:*/		return 0x82089C0C;
		  /* 82089C0Ch */ case   21:  		/* stvlx VR3, <#[R8 + R3]> */
		/* 82089C0Ch case   21:*/		cpu::mem::stvlx( regs, regs.VR3, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82089C0Ch case   21:*/		return 0x82089C10;
		  /* 82089C10h */ case   22:  		/* stvlx VR4, <#[R9 + R3]> */
		/* 82089C10h case   22:*/		cpu::mem::stvlx( regs, regs.VR4, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82089C10h case   22:*/		return 0x82089C14;
		  /* 82089C14h */ case   23:  		/* stvlx VR5, <#[R10 + R3]> */
		/* 82089C14h case   23:*/		cpu::mem::stvlx( regs, regs.VR5, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82089C14h case   23:*/		return 0x82089C18;
		  /* 82089C18h */ case   24:  		/* stvlx VR6, <#[R11 + R3]> */
		/* 82089C18h case   24:*/		cpu::mem::stvlx( regs, regs.VR6, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82089C18h case   24:*/		return 0x82089C1C;
		  /* 82089C1Ch */ case   25:  		/* stvlx VR7, <#[R12 + R3]> */
		/* 82089C1Ch case   25:*/		cpu::mem::stvlx( regs, regs.VR7, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 82089C1Ch case   25:*/		return 0x82089C20;
		  /* 82089C20h */ case   26:  		/* mr VR65, VR8 */
		/* 82089C20h case   26:*/		regs.VR65 = regs.VR8;
		/* 82089C20h case   26:*/		return 0x82089C24;
		  /* 82089C24h */ case   27:  		/* addi R3, R3, 128 */
		/* 82089C24h case   27:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 82089C24h case   27:*/		return 0x82089C28;
		  /* 82089C28h */ case   28:  		/* addi R5, R5, -128 */
		/* 82089C28h case   28:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0xFFFFFF80);
		/* 82089C28h case   28:*/		return 0x82089C2C;
		  /* 82089C2Ch */ case   29:  		/* cmplwi CR6, R5, 0 */
		/* 82089C2Ch case   29:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82089C2Ch case   29:*/		return 0x82089C30;
		  /* 82089C30h */ case   30:  		/* bc 12, CR6_GT, -120 */
		/* 82089C30h case   30:*/		if ( regs.CR[6].gt ) { return 0x82089BB8;  }
		/* 82089C30h case   30:*/		return 0x82089C34;
	}
	return 0x82089C34;
} // Block from 82089BB8h-82089C34h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82089C34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089C34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089C34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089C34);
		  /* 82089C34h */ case    0:  		/* li R6, -32 */
		/* 82089C34h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xFFFFFFE0);
		/* 82089C34h case    0:*/		return 0x82089C38;
		  /* 82089C38h */ case    1:  		/* li R7, -48 */
		/* 82089C38h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0xFFFFFFD0);
		/* 82089C38h case    1:*/		return 0x82089C3C;
		  /* 82089C3Ch */ case    2:  		/* lvx VR64, <#[R1 + R6]> */
		/* 82089C3Ch case    2:*/		cpu::mem::lvx( regs, &regs.VR64, (uint32)(regs.R1 + regs.R6 + 0x00000000) );
		/* 82089C3Ch case    2:*/		return 0x82089C40;
		  /* 82089C40h */ case    3:  		/* lvx VR65, <#[R1 + R7]> */
		/* 82089C40h case    3:*/		cpu::mem::lvx( regs, &regs.VR65, (uint32)(regs.R1 + regs.R7 + 0x00000000) );
		/* 82089C40h case    3:*/		return 0x82089C44;
		  /* 82089C44h */ case    4:  		/* ld R30, <#[R1 - 16]> */
		/* 82089C44h case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82089C44h case    4:*/		return 0x82089C48;
		  /* 82089C48h */ case    5:  		/* ld R31, <#[R1 - 8]> */
		/* 82089C48h case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82089C48h case    5:*/		return 0x82089C4C;
		  /* 82089C4Ch */ case    6:  		/* bclr 20, CR0_LT */
		/* 82089C4Ch case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82089C4Ch case    6:*/		return 0x82089C50;
	}
	return 0x82089C50;
} // Block from 82089C34h-82089C50h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82089C50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089C50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089C50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089C50);
		  /* 82089C50h */ case    0:  		/* std R30, <#[R1 - 16]> */
		/* 82089C50h case    0:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82089C50h case    0:*/		return 0x82089C54;
		  /* 82089C54h */ case    1:  		/* std R31, <#[R1 - 8]> */
		/* 82089C54h case    1:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82089C54h case    1:*/		return 0x82089C58;
		  /* 82089C58h */ case    2:  		/* li R6, 16 */
		/* 82089C58h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x10);
		/* 82089C58h case    2:*/		return 0x82089C5C;
		  /* 82089C5Ch */ case    3:  		/* li R7, 32 */
		/* 82089C5Ch case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x20);
		/* 82089C5Ch case    3:*/		return 0x82089C60;
		  /* 82089C60h */ case    4:  		/* li R8, 48 */
		/* 82089C60h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x30);
		/* 82089C60h case    4:*/		return 0x82089C64;
		  /* 82089C64h */ case    5:  		/* li R9, 64 */
		/* 82089C64h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x40);
		/* 82089C64h case    5:*/		return 0x82089C68;
		  /* 82089C68h */ case    6:  		/* li R10, 80 */
		/* 82089C68h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x50);
		/* 82089C68h case    6:*/		return 0x82089C6C;
		  /* 82089C6Ch */ case    7:  		/* li R11, 96 */
		/* 82089C6Ch case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x60);
		/* 82089C6Ch case    7:*/		return 0x82089C70;
		  /* 82089C70h */ case    8:  		/* li R12, 112 */
		/* 82089C70h case    8:*/		cpu::op::li<0>(regs,&regs.R12,0x70);
		/* 82089C70h case    8:*/		return 0x82089C74;
		  /* 82089C74h */ case    9:  		/* li R31, 512 */
		/* 82089C74h case    9:*/		cpu::op::li<0>(regs,&regs.R31,0x200);
		/* 82089C74h case    9:*/		return 0x82089C78;
		  /* 82089C78h */ case   10:  		/* cmplwi CR6, R5, 1024 */
		/* 82089C78h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000400);
		/* 82089C78h case   10:*/		return 0x82089C7C;
		  /* 82089C7Ch */ case   11:  		/* bc 12, CR6_LT, 764 */
		/* 82089C7Ch case   11:*/		if ( regs.CR[6].lt ) { return 0x82089F78;  }
		/* 82089C7Ch case   11:*/		return 0x82089C80;
		  /* 82089C80h */ case   12:  		/* addi R0, R5, -1024 */
		/* 82089C80h case   12:*/		cpu::op::addi<0>(regs,&regs.R0,regs.R5,0xFFFFFC00);
		/* 82089C80h case   12:*/		return 0x82089C84;
		  /* 82089C84h */ case   13:  		/* cmplwi CR6, R0, 1024 */
		/* 82089C84h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R0,0x00000400);
		/* 82089C84h case   13:*/		return 0x82089C88;
		  /* 82089C88h */ case   14:  		/* bc 12, CR6_LT, 8 */
		/* 82089C88h case   14:*/		if ( regs.CR[6].lt ) { return 0x82089C90;  }
		/* 82089C88h case   14:*/		return 0x82089C8C;
		  /* 82089C8Ch */ case   15:  		/* li R0, 1024 */
		/* 82089C8Ch case   15:*/		cpu::op::li<0>(regs,&regs.R0,0x400);
		/* 82089C8Ch case   15:*/		return 0x82089C90;
	}
	return 0x82089C90;
} // Block from 82089C50h-82089C90h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82089C90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089C90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089C90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089C90);
		  /* 82089C90h */ case    0:  		/* lvx VR1, <#[R4]> */
		/* 82089C90h case    0:*/		cpu::mem::lvx( regs, &regs.VR1, (uint32)(regs.R4 + 0x00000000) );
		/* 82089C90h case    0:*/		return 0x82089C94;
		  /* 82089C94h */ case    1:  		/* lvx VR2, <#[R6 + R4]> */
		/* 82089C94h case    1:*/		cpu::mem::lvx( regs, &regs.VR2, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 82089C94h case    1:*/		return 0x82089C98;
		  /* 82089C98h */ case    2:  		/* lvx VR3, <#[R7 + R4]> */
		/* 82089C98h case    2:*/		cpu::mem::lvx( regs, &regs.VR3, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 82089C98h case    2:*/		return 0x82089C9C;
		  /* 82089C9Ch */ case    3:  		/* lvx VR4, <#[R8 + R4]> */
		/* 82089C9Ch case    3:*/		cpu::mem::lvx( regs, &regs.VR4, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 82089C9Ch case    3:*/		return 0x82089CA0;
		  /* 82089CA0h */ case    4:  		/* lvx VR5, <#[R9 + R4]> */
		/* 82089CA0h case    4:*/		cpu::mem::lvx( regs, &regs.VR5, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 82089CA0h case    4:*/		return 0x82089CA4;
		  /* 82089CA4h */ case    5:  		/* lvx VR6, <#[R10 + R4]> */
		/* 82089CA4h case    5:*/		cpu::mem::lvx( regs, &regs.VR6, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82089CA4h case    5:*/		return 0x82089CA8;
		  /* 82089CA8h */ case    6:  		/* lvx VR7, <#[R11 + R4]> */
		/* 82089CA8h case    6:*/		cpu::mem::lvx( regs, &regs.VR7, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82089CA8h case    6:*/		return 0x82089CAC;
		  /* 82089CACh */ case    7:  		/* lvx VR8, <#[R12 + R4]> */
		/* 82089CACh case    7:*/		cpu::mem::lvx( regs, &regs.VR8, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 82089CACh case    7:*/		return 0x82089CB0;
		  /* 82089CB0h */ case    8:  		/* dcbt R4, R0 */
		/* 82089CB0h case    8:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 82089CB0h case    8:*/		return 0x82089CB4;
		  /* 82089CB4h */ case    9:  		/* dcbf R0, R4 */
		/* 82089CB4h case    9:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 82089CB4h case    9:*/		return 0x82089CB8;
		  /* 82089CB8h */ case   10:  		/* addi R4, R4, 128 */
		/* 82089CB8h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 82089CB8h case   10:*/		return 0x82089CBC;
		  /* 82089CBCh */ case   11:  		/* lvx VR9, <#[R4]> */
		/* 82089CBCh case   11:*/		cpu::mem::lvx( regs, &regs.VR9, (uint32)(regs.R4 + 0x00000000) );
		/* 82089CBCh case   11:*/		return 0x82089CC0;
		  /* 82089CC0h */ case   12:  		/* lvx VR10, <#[R6 + R4]> */
		/* 82089CC0h case   12:*/		cpu::mem::lvx( regs, &regs.VR10, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 82089CC0h case   12:*/		return 0x82089CC4;
		  /* 82089CC4h */ case   13:  		/* lvx VR11, <#[R7 + R4]> */
		/* 82089CC4h case   13:*/		cpu::mem::lvx( regs, &regs.VR11, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 82089CC4h case   13:*/		return 0x82089CC8;
		  /* 82089CC8h */ case   14:  		/* lvx VR12, <#[R8 + R4]> */
		/* 82089CC8h case   14:*/		cpu::mem::lvx( regs, &regs.VR12, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 82089CC8h case   14:*/		return 0x82089CCC;
		  /* 82089CCCh */ case   15:  		/* lvx VR13, <#[R9 + R4]> */
		/* 82089CCCh case   15:*/		cpu::mem::lvx( regs, &regs.VR13, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 82089CCCh case   15:*/		return 0x82089CD0;
		  /* 82089CD0h */ case   16:  		/* lvx VR14, <#[R10 + R4]> */
		/* 82089CD0h case   16:*/		cpu::mem::lvx( regs, &regs.VR14, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82089CD0h case   16:*/		return 0x82089CD4;
		  /* 82089CD4h */ case   17:  		/* lvx VR15, <#[R11 + R4]> */
		/* 82089CD4h case   17:*/		cpu::mem::lvx( regs, &regs.VR15, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82089CD4h case   17:*/		return 0x82089CD8;
		  /* 82089CD8h */ case   18:  		/* lvx VR16, <#[R12 + R4]> */
		/* 82089CD8h case   18:*/		cpu::mem::lvx( regs, &regs.VR16, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 82089CD8h case   18:*/		return 0x82089CDC;
		  /* 82089CDCh */ case   19:  		/* dcbt R4, R0 */
		/* 82089CDCh case   19:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 82089CDCh case   19:*/		return 0x82089CE0;
		  /* 82089CE0h */ case   20:  		/* dcbf R0, R4 */
		/* 82089CE0h case   20:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 82089CE0h case   20:*/		return 0x82089CE4;
		  /* 82089CE4h */ case   21:  		/* addi R4, R4, 128 */
		/* 82089CE4h case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 82089CE4h case   21:*/		return 0x82089CE8;
		  /* 82089CE8h */ case   22:  		/* lvx VR17, <#[R4]> */
		/* 82089CE8h case   22:*/		cpu::mem::lvx( regs, &regs.VR17, (uint32)(regs.R4 + 0x00000000) );
		/* 82089CE8h case   22:*/		return 0x82089CEC;
		  /* 82089CECh */ case   23:  		/* lvx VR18, <#[R6 + R4]> */
		/* 82089CECh case   23:*/		cpu::mem::lvx( regs, &regs.VR18, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 82089CECh case   23:*/		return 0x82089CF0;
		  /* 82089CF0h */ case   24:  		/* lvx VR19, <#[R7 + R4]> */
		/* 82089CF0h case   24:*/		cpu::mem::lvx( regs, &regs.VR19, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 82089CF0h case   24:*/		return 0x82089CF4;
		  /* 82089CF4h */ case   25:  		/* lvx VR20, <#[R8 + R4]> */
		/* 82089CF4h case   25:*/		cpu::mem::lvx( regs, &regs.VR20, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 82089CF4h case   25:*/		return 0x82089CF8;
		  /* 82089CF8h */ case   26:  		/* lvx VR21, <#[R9 + R4]> */
		/* 82089CF8h case   26:*/		cpu::mem::lvx( regs, &regs.VR21, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 82089CF8h case   26:*/		return 0x82089CFC;
		  /* 82089CFCh */ case   27:  		/* lvx VR22, <#[R10 + R4]> */
		/* 82089CFCh case   27:*/		cpu::mem::lvx( regs, &regs.VR22, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82089CFCh case   27:*/		return 0x82089D00;
		  /* 82089D00h */ case   28:  		/* lvx VR23, <#[R11 + R4]> */
		/* 82089D00h case   28:*/		cpu::mem::lvx( regs, &regs.VR23, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82089D00h case   28:*/		return 0x82089D04;
		  /* 82089D04h */ case   29:  		/* lvx VR24, <#[R12 + R4]> */
		/* 82089D04h case   29:*/		cpu::mem::lvx( regs, &regs.VR24, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 82089D04h case   29:*/		return 0x82089D08;
		  /* 82089D08h */ case   30:  		/* dcbt R4, R0 */
		/* 82089D08h case   30:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 82089D08h case   30:*/		return 0x82089D0C;
		  /* 82089D0Ch */ case   31:  		/* dcbf R0, R4 */
		/* 82089D0Ch case   31:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 82089D0Ch case   31:*/		return 0x82089D10;
		  /* 82089D10h */ case   32:  		/* addi R4, R4, 128 */
		/* 82089D10h case   32:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 82089D10h case   32:*/		return 0x82089D14;
		  /* 82089D14h */ case   33:  		/* lvx VR25, <#[R4]> */
		/* 82089D14h case   33:*/		cpu::mem::lvx( regs, &regs.VR25, (uint32)(regs.R4 + 0x00000000) );
		/* 82089D14h case   33:*/		return 0x82089D18;
		  /* 82089D18h */ case   34:  		/* lvx VR26, <#[R6 + R4]> */
		/* 82089D18h case   34:*/		cpu::mem::lvx( regs, &regs.VR26, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 82089D18h case   34:*/		return 0x82089D1C;
		  /* 82089D1Ch */ case   35:  		/* lvx VR27, <#[R7 + R4]> */
		/* 82089D1Ch case   35:*/		cpu::mem::lvx( regs, &regs.VR27, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 82089D1Ch case   35:*/		return 0x82089D20;
		  /* 82089D20h */ case   36:  		/* lvx VR28, <#[R8 + R4]> */
		/* 82089D20h case   36:*/		cpu::mem::lvx( regs, &regs.VR28, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 82089D20h case   36:*/		return 0x82089D24;
		  /* 82089D24h */ case   37:  		/* lvx VR29, <#[R9 + R4]> */
		/* 82089D24h case   37:*/		cpu::mem::lvx( regs, &regs.VR29, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 82089D24h case   37:*/		return 0x82089D28;
		  /* 82089D28h */ case   38:  		/* lvx VR30, <#[R10 + R4]> */
		/* 82089D28h case   38:*/		cpu::mem::lvx( regs, &regs.VR30, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82089D28h case   38:*/		return 0x82089D2C;
		  /* 82089D2Ch */ case   39:  		/* lvx VR31, <#[R11 + R4]> */
		/* 82089D2Ch case   39:*/		cpu::mem::lvx( regs, &regs.VR31, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82089D2Ch case   39:*/		return 0x82089D30;
		  /* 82089D30h */ case   40:  		/* lvx VR32, <#[R12 + R4]> */
		/* 82089D30h case   40:*/		cpu::mem::lvx( regs, &regs.VR32, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 82089D30h case   40:*/		return 0x82089D34;
		  /* 82089D34h */ case   41:  		/* dcbt R4, R0 */
		/* 82089D34h case   41:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 82089D34h case   41:*/		return 0x82089D38;
		  /* 82089D38h */ case   42:  		/* dcbf R0, R4 */
		/* 82089D38h case   42:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 82089D38h case   42:*/		return 0x82089D3C;
		  /* 82089D3Ch */ case   43:  		/* addi R4, R4, 128 */
		/* 82089D3Ch case   43:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 82089D3Ch case   43:*/		return 0x82089D40;
		  /* 82089D40h */ case   44:  		/* xor R30, R30, R30 */
		/* 82089D40h case   44:*/		cpu::op::xor<0>(regs,&regs.R30,regs.R30,regs.R30);
		/* 82089D40h case   44:*/		return 0x82089D44;
		  /* 82089D44h */ case   45:  		/* lvx VR33, <#[R4]> */
		/* 82089D44h case   45:*/		cpu::mem::lvx( regs, &regs.VR33, (uint32)(regs.R4 + 0x00000000) );
		/* 82089D44h case   45:*/		return 0x82089D48;
		  /* 82089D48h */ case   46:  		/* lvx VR34, <#[R6 + R4]> */
		/* 82089D48h case   46:*/		cpu::mem::lvx( regs, &regs.VR34, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 82089D48h case   46:*/		return 0x82089D4C;
		  /* 82089D4Ch */ case   47:  		/* lvx VR35, <#[R7 + R4]> */
		/* 82089D4Ch case   47:*/		cpu::mem::lvx( regs, &regs.VR35, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 82089D4Ch case   47:*/		return 0x82089D50;
		  /* 82089D50h */ case   48:  		/* lvx VR36, <#[R8 + R4]> */
		/* 82089D50h case   48:*/		cpu::mem::lvx( regs, &regs.VR36, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 82089D50h case   48:*/		return 0x82089D54;
		  /* 82089D54h */ case   49:  		/* lvx VR37, <#[R9 + R4]> */
		/* 82089D54h case   49:*/		cpu::mem::lvx( regs, &regs.VR37, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 82089D54h case   49:*/		return 0x82089D58;
		  /* 82089D58h */ case   50:  		/* lvx VR38, <#[R10 + R4]> */
		/* 82089D58h case   50:*/		cpu::mem::lvx( regs, &regs.VR38, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82089D58h case   50:*/		return 0x82089D5C;
		  /* 82089D5Ch */ case   51:  		/* lvx VR39, <#[R11 + R4]> */
		/* 82089D5Ch case   51:*/		cpu::mem::lvx( regs, &regs.VR39, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82089D5Ch case   51:*/		return 0x82089D60;
		  /* 82089D60h */ case   52:  		/* lvx VR40, <#[R12 + R4]> */
		/* 82089D60h case   52:*/		cpu::mem::lvx( regs, &regs.VR40, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 82089D60h case   52:*/		return 0x82089D64;
		  /* 82089D64h */ case   53:  		/* dcbz <#[R3 + R30]> */
		/* 82089D64h case   53:*/		cpu::op::dcbz<0>(regs, regs.R3 + regs.R30 + 0x00000000);
		/* 82089D64h case   53:*/		return 0x82089D68;
		  /* 82089D68h */ case   54:  		/* addi R30, R30, 128 */
		/* 82089D68h case   54:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x80);
		/* 82089D68h case   54:*/		return 0x82089D6C;
		  /* 82089D6Ch */ case   55:  		/* dcbt R4, R0 */
		/* 82089D6Ch case   55:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 82089D6Ch case   55:*/		return 0x82089D70;
		  /* 82089D70h */ case   56:  		/* dcbf R0, R4 */
		/* 82089D70h case   56:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 82089D70h case   56:*/		return 0x82089D74;
		  /* 82089D74h */ case   57:  		/* addi R4, R4, 128 */
		/* 82089D74h case   57:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 82089D74h case   57:*/		return 0x82089D78;
		  /* 82089D78h */ case   58:  		/* lvx VR41, <#[R4]> */
		/* 82089D78h case   58:*/		cpu::mem::lvx( regs, &regs.VR41, (uint32)(regs.R4 + 0x00000000) );
		/* 82089D78h case   58:*/		return 0x82089D7C;
		  /* 82089D7Ch */ case   59:  		/* lvx VR42, <#[R6 + R4]> */
		/* 82089D7Ch case   59:*/		cpu::mem::lvx( regs, &regs.VR42, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 82089D7Ch case   59:*/		return 0x82089D80;
		  /* 82089D80h */ case   60:  		/* lvx VR43, <#[R7 + R4]> */
		/* 82089D80h case   60:*/		cpu::mem::lvx( regs, &regs.VR43, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 82089D80h case   60:*/		return 0x82089D84;
		  /* 82089D84h */ case   61:  		/* lvx VR44, <#[R8 + R4]> */
		/* 82089D84h case   61:*/		cpu::mem::lvx( regs, &regs.VR44, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 82089D84h case   61:*/		return 0x82089D88;
		  /* 82089D88h */ case   62:  		/* lvx VR45, <#[R9 + R4]> */
		/* 82089D88h case   62:*/		cpu::mem::lvx( regs, &regs.VR45, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 82089D88h case   62:*/		return 0x82089D8C;
		  /* 82089D8Ch */ case   63:  		/* lvx VR46, <#[R10 + R4]> */
		/* 82089D8Ch case   63:*/		cpu::mem::lvx( regs, &regs.VR46, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82089D8Ch case   63:*/		return 0x82089D90;
		  /* 82089D90h */ case   64:  		/* lvx VR47, <#[R11 + R4]> */
		/* 82089D90h case   64:*/		cpu::mem::lvx( regs, &regs.VR47, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82089D90h case   64:*/		return 0x82089D94;
		  /* 82089D94h */ case   65:  		/* lvx VR48, <#[R12 + R4]> */
		/* 82089D94h case   65:*/		cpu::mem::lvx( regs, &regs.VR48, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 82089D94h case   65:*/		return 0x82089D98;
		  /* 82089D98h */ case   66:  		/* dcbz <#[R3 + R30]> */
		/* 82089D98h case   66:*/		cpu::op::dcbz<0>(regs, regs.R3 + regs.R30 + 0x00000000);
		/* 82089D98h case   66:*/		return 0x82089D9C;
		  /* 82089D9Ch */ case   67:  		/* addi R30, R30, 128 */
		/* 82089D9Ch case   67:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x80);
		/* 82089D9Ch case   67:*/		return 0x82089DA0;
		  /* 82089DA0h */ case   68:  		/* dcbt R4, R0 */
		/* 82089DA0h case   68:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 82089DA0h case   68:*/		return 0x82089DA4;
		  /* 82089DA4h */ case   69:  		/* dcbf R0, R4 */
		/* 82089DA4h case   69:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 82089DA4h case   69:*/		return 0x82089DA8;
		  /* 82089DA8h */ case   70:  		/* addi R4, R4, 128 */
		/* 82089DA8h case   70:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 82089DA8h case   70:*/		return 0x82089DAC;
		  /* 82089DACh */ case   71:  		/* lvx VR49, <#[R4]> */
		/* 82089DACh case   71:*/		cpu::mem::lvx( regs, &regs.VR49, (uint32)(regs.R4 + 0x00000000) );
		/* 82089DACh case   71:*/		return 0x82089DB0;
		  /* 82089DB0h */ case   72:  		/* lvx VR50, <#[R6 + R4]> */
		/* 82089DB0h case   72:*/		cpu::mem::lvx( regs, &regs.VR50, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 82089DB0h case   72:*/		return 0x82089DB4;
		  /* 82089DB4h */ case   73:  		/* lvx VR51, <#[R7 + R4]> */
		/* 82089DB4h case   73:*/		cpu::mem::lvx( regs, &regs.VR51, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 82089DB4h case   73:*/		return 0x82089DB8;
		  /* 82089DB8h */ case   74:  		/* lvx VR52, <#[R8 + R4]> */
		/* 82089DB8h case   74:*/		cpu::mem::lvx( regs, &regs.VR52, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 82089DB8h case   74:*/		return 0x82089DBC;
		  /* 82089DBCh */ case   75:  		/* lvx VR53, <#[R9 + R4]> */
		/* 82089DBCh case   75:*/		cpu::mem::lvx( regs, &regs.VR53, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 82089DBCh case   75:*/		return 0x82089DC0;
		  /* 82089DC0h */ case   76:  		/* lvx VR54, <#[R10 + R4]> */
		/* 82089DC0h case   76:*/		cpu::mem::lvx( regs, &regs.VR54, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82089DC0h case   76:*/		return 0x82089DC4;
		  /* 82089DC4h */ case   77:  		/* lvx VR55, <#[R11 + R4]> */
		/* 82089DC4h case   77:*/		cpu::mem::lvx( regs, &regs.VR55, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82089DC4h case   77:*/		return 0x82089DC8;
		  /* 82089DC8h */ case   78:  		/* lvx VR56, <#[R12 + R4]> */
		/* 82089DC8h case   78:*/		cpu::mem::lvx( regs, &regs.VR56, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 82089DC8h case   78:*/		return 0x82089DCC;
		  /* 82089DCCh */ case   79:  		/* dcbz <#[R3 + R30]> */
		/* 82089DCCh case   79:*/		cpu::op::dcbz<0>(regs, regs.R3 + regs.R30 + 0x00000000);
		/* 82089DCCh case   79:*/		return 0x82089DD0;
		  /* 82089DD0h */ case   80:  		/* addi R30, R30, 128 */
		/* 82089DD0h case   80:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x80);
		/* 82089DD0h case   80:*/		return 0x82089DD4;
		  /* 82089DD4h */ case   81:  		/* dcbt R4, R0 */
		/* 82089DD4h case   81:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 82089DD4h case   81:*/		return 0x82089DD8;
		  /* 82089DD8h */ case   82:  		/* dcbf R0, R4 */
		/* 82089DD8h case   82:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 82089DD8h case   82:*/		return 0x82089DDC;
		  /* 82089DDCh */ case   83:  		/* addi R4, R4, 128 */
		/* 82089DDCh case   83:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 82089DDCh case   83:*/		return 0x82089DE0;
		  /* 82089DE0h */ case   84:  		/* lvx VR57, <#[R4]> */
		/* 82089DE0h case   84:*/		cpu::mem::lvx( regs, &regs.VR57, (uint32)(regs.R4 + 0x00000000) );
		/* 82089DE0h case   84:*/		return 0x82089DE4;
		  /* 82089DE4h */ case   85:  		/* lvx VR58, <#[R6 + R4]> */
		/* 82089DE4h case   85:*/		cpu::mem::lvx( regs, &regs.VR58, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 82089DE4h case   85:*/		return 0x82089DE8;
		  /* 82089DE8h */ case   86:  		/* lvx VR59, <#[R7 + R4]> */
		/* 82089DE8h case   86:*/		cpu::mem::lvx( regs, &regs.VR59, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 82089DE8h case   86:*/		return 0x82089DEC;
		  /* 82089DECh */ case   87:  		/* lvx VR60, <#[R8 + R4]> */
		/* 82089DECh case   87:*/		cpu::mem::lvx( regs, &regs.VR60, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 82089DECh case   87:*/		return 0x82089DF0;
		  /* 82089DF0h */ case   88:  		/* lvx VR61, <#[R9 + R4]> */
		/* 82089DF0h case   88:*/		cpu::mem::lvx( regs, &regs.VR61, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 82089DF0h case   88:*/		return 0x82089DF4;
		  /* 82089DF4h */ case   89:  		/* lvx VR62, <#[R10 + R4]> */
		/* 82089DF4h case   89:*/		cpu::mem::lvx( regs, &regs.VR62, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82089DF4h case   89:*/		return 0x82089DF8;
		  /* 82089DF8h */ case   90:  		/* lvx VR63, <#[R11 + R4]> */
		/* 82089DF8h case   90:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82089DF8h case   90:*/		return 0x82089DFC;
		  /* 82089DFCh */ case   91:  		/* lvx VR0, <#[R12 + R4]> */
		/* 82089DFCh case   91:*/		cpu::mem::lvx( regs, &regs.VR0, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 82089DFCh case   91:*/		return 0x82089E00;
		  /* 82089E00h */ case   92:  		/* dcbz <#[R3 + R30]> */
		/* 82089E00h case   92:*/		cpu::op::dcbz<0>(regs, regs.R3 + regs.R30 + 0x00000000);
		/* 82089E00h case   92:*/		return 0x82089E04;
		  /* 82089E04h */ case   93:  		/* dcbt R4, R0 */
		/* 82089E04h case   93:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 82089E04h case   93:*/		return 0x82089E08;
		  /* 82089E08h */ case   94:  		/* dcbf R0, R4 */
		/* 82089E08h case   94:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 82089E08h case   94:*/		return 0x82089E0C;
		  /* 82089E0Ch */ case   95:  		/* addi R4, R4, 128 */
		/* 82089E0Ch case   95:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 82089E0Ch case   95:*/		return 0x82089E10;
		  /* 82089E10h */ case   96:  		/* stvlx VR1, <#[R3]> */
		/* 82089E10h case   96:*/		cpu::mem::stvlx( regs, regs.VR1, (uint32)(regs.R3 + 0x00000000) );
		/* 82089E10h case   96:*/		return 0x82089E14;
		  /* 82089E14h */ case   97:  		/* stvlx VR2, <#[R6 + R3]> */
		/* 82089E14h case   97:*/		cpu::mem::stvlx( regs, regs.VR2, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 82089E14h case   97:*/		return 0x82089E18;
		  /* 82089E18h */ case   98:  		/* stvlx VR3, <#[R7 + R3]> */
		/* 82089E18h case   98:*/		cpu::mem::stvlx( regs, regs.VR3, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 82089E18h case   98:*/		return 0x82089E1C;
		  /* 82089E1Ch */ case   99:  		/* stvlx VR4, <#[R8 + R3]> */
		/* 82089E1Ch case   99:*/		cpu::mem::stvlx( regs, regs.VR4, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82089E1Ch case   99:*/		return 0x82089E20;
		  /* 82089E20h */ case  100:  		/* stvlx VR5, <#[R9 + R3]> */
		/* 82089E20h case  100:*/		cpu::mem::stvlx( regs, regs.VR5, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82089E20h case  100:*/		return 0x82089E24;
		  /* 82089E24h */ case  101:  		/* stvlx VR6, <#[R10 + R3]> */
		/* 82089E24h case  101:*/		cpu::mem::stvlx( regs, regs.VR6, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82089E24h case  101:*/		return 0x82089E28;
		  /* 82089E28h */ case  102:  		/* stvlx VR7, <#[R11 + R3]> */
		/* 82089E28h case  102:*/		cpu::mem::stvlx( regs, regs.VR7, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82089E28h case  102:*/		return 0x82089E2C;
		  /* 82089E2Ch */ case  103:  		/* stvlx VR8, <#[R12 + R3]> */
		/* 82089E2Ch case  103:*/		cpu::mem::stvlx( regs, regs.VR8, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 82089E2Ch case  103:*/		return 0x82089E30;
		  /* 82089E30h */ case  104:  		/* dcbf R0, R3 */
		/* 82089E30h case  104:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R3);
		/* 82089E30h case  104:*/		return 0x82089E34;
		  /* 82089E34h */ case  105:  		/* dcbz <#[R3 + R31]> */
		/* 82089E34h case  105:*/		cpu::op::dcbz<0>(regs, regs.R3 + regs.R31 + 0x00000000);
		/* 82089E34h case  105:*/		return 0x82089E38;
		  /* 82089E38h */ case  106:  		/* addi R3, R3, 128 */
		/* 82089E38h case  106:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 82089E38h case  106:*/		return 0x82089E3C;
		  /* 82089E3Ch */ case  107:  		/* stvlx VR9, <#[R3]> */
		/* 82089E3Ch case  107:*/		cpu::mem::stvlx( regs, regs.VR9, (uint32)(regs.R3 + 0x00000000) );
		/* 82089E3Ch case  107:*/		return 0x82089E40;
		  /* 82089E40h */ case  108:  		/* stvlx VR10, <#[R6 + R3]> */
		/* 82089E40h case  108:*/		cpu::mem::stvlx( regs, regs.VR10, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 82089E40h case  108:*/		return 0x82089E44;
		  /* 82089E44h */ case  109:  		/* stvlx VR11, <#[R7 + R3]> */
		/* 82089E44h case  109:*/		cpu::mem::stvlx( regs, regs.VR11, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 82089E44h case  109:*/		return 0x82089E48;
		  /* 82089E48h */ case  110:  		/* stvlx VR12, <#[R8 + R3]> */
		/* 82089E48h case  110:*/		cpu::mem::stvlx( regs, regs.VR12, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82089E48h case  110:*/		return 0x82089E4C;
		  /* 82089E4Ch */ case  111:  		/* stvlx VR13, <#[R9 + R3]> */
		/* 82089E4Ch case  111:*/		cpu::mem::stvlx( regs, regs.VR13, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82089E4Ch case  111:*/		return 0x82089E50;
		  /* 82089E50h */ case  112:  		/* stvlx VR14, <#[R10 + R3]> */
		/* 82089E50h case  112:*/		cpu::mem::stvlx( regs, regs.VR14, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82089E50h case  112:*/		return 0x82089E54;
		  /* 82089E54h */ case  113:  		/* stvlx VR15, <#[R11 + R3]> */
		/* 82089E54h case  113:*/		cpu::mem::stvlx( regs, regs.VR15, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82089E54h case  113:*/		return 0x82089E58;
		  /* 82089E58h */ case  114:  		/* stvlx VR16, <#[R12 + R3]> */
		/* 82089E58h case  114:*/		cpu::mem::stvlx( regs, regs.VR16, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 82089E58h case  114:*/		return 0x82089E5C;
		  /* 82089E5Ch */ case  115:  		/* dcbf R0, R3 */
		/* 82089E5Ch case  115:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R3);
		/* 82089E5Ch case  115:*/		return 0x82089E60;
		  /* 82089E60h */ case  116:  		/* dcbz <#[R3 + R31]> */
		/* 82089E60h case  116:*/		cpu::op::dcbz<0>(regs, regs.R3 + regs.R31 + 0x00000000);
		/* 82089E60h case  116:*/		return 0x82089E64;
		  /* 82089E64h */ case  117:  		/* addi R3, R3, 128 */
		/* 82089E64h case  117:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 82089E64h case  117:*/		return 0x82089E68;
		  /* 82089E68h */ case  118:  		/* stvlx VR17, <#[R3]> */
		/* 82089E68h case  118:*/		cpu::mem::stvlx( regs, regs.VR17, (uint32)(regs.R3 + 0x00000000) );
		/* 82089E68h case  118:*/		return 0x82089E6C;
		  /* 82089E6Ch */ case  119:  		/* stvlx VR18, <#[R6 + R3]> */
		/* 82089E6Ch case  119:*/		cpu::mem::stvlx( regs, regs.VR18, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 82089E6Ch case  119:*/		return 0x82089E70;
		  /* 82089E70h */ case  120:  		/* stvlx VR19, <#[R7 + R3]> */
		/* 82089E70h case  120:*/		cpu::mem::stvlx( regs, regs.VR19, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 82089E70h case  120:*/		return 0x82089E74;
		  /* 82089E74h */ case  121:  		/* stvlx VR20, <#[R8 + R3]> */
		/* 82089E74h case  121:*/		cpu::mem::stvlx( regs, regs.VR20, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82089E74h case  121:*/		return 0x82089E78;
		  /* 82089E78h */ case  122:  		/* stvlx VR21, <#[R9 + R3]> */
		/* 82089E78h case  122:*/		cpu::mem::stvlx( regs, regs.VR21, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82089E78h case  122:*/		return 0x82089E7C;
		  /* 82089E7Ch */ case  123:  		/* stvlx VR22, <#[R10 + R3]> */
		/* 82089E7Ch case  123:*/		cpu::mem::stvlx( regs, regs.VR22, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82089E7Ch case  123:*/		return 0x82089E80;
		  /* 82089E80h */ case  124:  		/* stvlx VR23, <#[R11 + R3]> */
		/* 82089E80h case  124:*/		cpu::mem::stvlx( regs, regs.VR23, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82089E80h case  124:*/		return 0x82089E84;
		  /* 82089E84h */ case  125:  		/* stvlx VR24, <#[R12 + R3]> */
		/* 82089E84h case  125:*/		cpu::mem::stvlx( regs, regs.VR24, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 82089E84h case  125:*/		return 0x82089E88;
		  /* 82089E88h */ case  126:  		/* dcbf R0, R3 */
		/* 82089E88h case  126:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R3);
		/* 82089E88h case  126:*/		return 0x82089E8C;
		  /* 82089E8Ch */ case  127:  		/* dcbz <#[R3 + R31]> */
		/* 82089E8Ch case  127:*/		cpu::op::dcbz<0>(regs, regs.R3 + regs.R31 + 0x00000000);
		/* 82089E8Ch case  127:*/		return 0x82089E90;
		  /* 82089E90h */ case  128:  		/* addi R3, R3, 128 */
		/* 82089E90h case  128:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 82089E90h case  128:*/		return 0x82089E94;
		  /* 82089E94h */ case  129:  		/* stvlx VR25, <#[R3]> */
		/* 82089E94h case  129:*/		cpu::mem::stvlx( regs, regs.VR25, (uint32)(regs.R3 + 0x00000000) );
		/* 82089E94h case  129:*/		return 0x82089E98;
		  /* 82089E98h */ case  130:  		/* stvlx VR26, <#[R6 + R3]> */
		/* 82089E98h case  130:*/		cpu::mem::stvlx( regs, regs.VR26, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 82089E98h case  130:*/		return 0x82089E9C;
		  /* 82089E9Ch */ case  131:  		/* stvlx VR27, <#[R7 + R3]> */
		/* 82089E9Ch case  131:*/		cpu::mem::stvlx( regs, regs.VR27, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 82089E9Ch case  131:*/		return 0x82089EA0;
		  /* 82089EA0h */ case  132:  		/* stvlx VR28, <#[R8 + R3]> */
		/* 82089EA0h case  132:*/		cpu::mem::stvlx( regs, regs.VR28, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82089EA0h case  132:*/		return 0x82089EA4;
		  /* 82089EA4h */ case  133:  		/* stvlx VR29, <#[R9 + R3]> */
		/* 82089EA4h case  133:*/		cpu::mem::stvlx( regs, regs.VR29, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82089EA4h case  133:*/		return 0x82089EA8;
		  /* 82089EA8h */ case  134:  		/* stvlx VR30, <#[R10 + R3]> */
		/* 82089EA8h case  134:*/		cpu::mem::stvlx( regs, regs.VR30, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82089EA8h case  134:*/		return 0x82089EAC;
		  /* 82089EACh */ case  135:  		/* stvlx VR31, <#[R11 + R3]> */
		/* 82089EACh case  135:*/		cpu::mem::stvlx( regs, regs.VR31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82089EACh case  135:*/		return 0x82089EB0;
		  /* 82089EB0h */ case  136:  		/* stvlx VR32, <#[R12 + R3]> */
		/* 82089EB0h case  136:*/		cpu::mem::stvlx( regs, regs.VR32, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 82089EB0h case  136:*/		return 0x82089EB4;
		  /* 82089EB4h */ case  137:  		/* dcbf R0, R3 */
		/* 82089EB4h case  137:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R3);
		/* 82089EB4h case  137:*/		return 0x82089EB8;
		  /* 82089EB8h */ case  138:  		/* dcbz <#[R3 + R31]> */
		/* 82089EB8h case  138:*/		cpu::op::dcbz<0>(regs, regs.R3 + regs.R31 + 0x00000000);
		/* 82089EB8h case  138:*/		return 0x82089EBC;
		  /* 82089EBCh */ case  139:  		/* addi R3, R3, 128 */
		/* 82089EBCh case  139:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 82089EBCh case  139:*/		return 0x82089EC0;
		  /* 82089EC0h */ case  140:  		/* stvlx VR33, <#[R3]> */
		/* 82089EC0h case  140:*/		cpu::mem::stvlx( regs, regs.VR33, (uint32)(regs.R3 + 0x00000000) );
		/* 82089EC0h case  140:*/		return 0x82089EC4;
		  /* 82089EC4h */ case  141:  		/* stvlx VR34, <#[R6 + R3]> */
		/* 82089EC4h case  141:*/		cpu::mem::stvlx( regs, regs.VR34, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 82089EC4h case  141:*/		return 0x82089EC8;
		  /* 82089EC8h */ case  142:  		/* stvlx VR35, <#[R7 + R3]> */
		/* 82089EC8h case  142:*/		cpu::mem::stvlx( regs, regs.VR35, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 82089EC8h case  142:*/		return 0x82089ECC;
		  /* 82089ECCh */ case  143:  		/* stvlx VR36, <#[R8 + R3]> */
		/* 82089ECCh case  143:*/		cpu::mem::stvlx( regs, regs.VR36, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82089ECCh case  143:*/		return 0x82089ED0;
		  /* 82089ED0h */ case  144:  		/* stvlx VR37, <#[R9 + R3]> */
		/* 82089ED0h case  144:*/		cpu::mem::stvlx( regs, regs.VR37, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82089ED0h case  144:*/		return 0x82089ED4;
		  /* 82089ED4h */ case  145:  		/* stvlx VR38, <#[R10 + R3]> */
		/* 82089ED4h case  145:*/		cpu::mem::stvlx( regs, regs.VR38, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82089ED4h case  145:*/		return 0x82089ED8;
		  /* 82089ED8h */ case  146:  		/* stvlx VR39, <#[R11 + R3]> */
		/* 82089ED8h case  146:*/		cpu::mem::stvlx( regs, regs.VR39, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82089ED8h case  146:*/		return 0x82089EDC;
		  /* 82089EDCh */ case  147:  		/* stvlx VR40, <#[R12 + R3]> */
		/* 82089EDCh case  147:*/		cpu::mem::stvlx( regs, regs.VR40, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 82089EDCh case  147:*/		return 0x82089EE0;
		  /* 82089EE0h */ case  148:  		/* dcbf R0, R3 */
		/* 82089EE0h case  148:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R3);
		/* 82089EE0h case  148:*/		return 0x82089EE4;
		  /* 82089EE4h */ case  149:  		/* addi R3, R3, 128 */
		/* 82089EE4h case  149:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 82089EE4h case  149:*/		return 0x82089EE8;
		  /* 82089EE8h */ case  150:  		/* stvlx VR41, <#[R3]> */
		/* 82089EE8h case  150:*/		cpu::mem::stvlx( regs, regs.VR41, (uint32)(regs.R3 + 0x00000000) );
		/* 82089EE8h case  150:*/		return 0x82089EEC;
		  /* 82089EECh */ case  151:  		/* stvlx VR42, <#[R6 + R3]> */
		/* 82089EECh case  151:*/		cpu::mem::stvlx( regs, regs.VR42, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 82089EECh case  151:*/		return 0x82089EF0;
		  /* 82089EF0h */ case  152:  		/* stvlx VR43, <#[R7 + R3]> */
		/* 82089EF0h case  152:*/		cpu::mem::stvlx( regs, regs.VR43, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 82089EF0h case  152:*/		return 0x82089EF4;
		  /* 82089EF4h */ case  153:  		/* stvlx VR44, <#[R8 + R3]> */
		/* 82089EF4h case  153:*/		cpu::mem::stvlx( regs, regs.VR44, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82089EF4h case  153:*/		return 0x82089EF8;
		  /* 82089EF8h */ case  154:  		/* stvlx VR45, <#[R9 + R3]> */
		/* 82089EF8h case  154:*/		cpu::mem::stvlx( regs, regs.VR45, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82089EF8h case  154:*/		return 0x82089EFC;
		  /* 82089EFCh */ case  155:  		/* stvlx VR46, <#[R10 + R3]> */
		/* 82089EFCh case  155:*/		cpu::mem::stvlx( regs, regs.VR46, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82089EFCh case  155:*/		return 0x82089F00;
		  /* 82089F00h */ case  156:  		/* stvlx VR47, <#[R11 + R3]> */
		/* 82089F00h case  156:*/		cpu::mem::stvlx( regs, regs.VR47, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82089F00h case  156:*/		return 0x82089F04;
		  /* 82089F04h */ case  157:  		/* stvlx VR48, <#[R12 + R3]> */
		/* 82089F04h case  157:*/		cpu::mem::stvlx( regs, regs.VR48, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 82089F04h case  157:*/		return 0x82089F08;
		  /* 82089F08h */ case  158:  		/* dcbf R0, R3 */
		/* 82089F08h case  158:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R3);
		/* 82089F08h case  158:*/		return 0x82089F0C;
		  /* 82089F0Ch */ case  159:  		/* addi R3, R3, 128 */
		/* 82089F0Ch case  159:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 82089F0Ch case  159:*/		return 0x82089F10;
		  /* 82089F10h */ case  160:  		/* stvlx VR49, <#[R3]> */
		/* 82089F10h case  160:*/		cpu::mem::stvlx( regs, regs.VR49, (uint32)(regs.R3 + 0x00000000) );
		/* 82089F10h case  160:*/		return 0x82089F14;
		  /* 82089F14h */ case  161:  		/* stvlx VR50, <#[R6 + R3]> */
		/* 82089F14h case  161:*/		cpu::mem::stvlx( regs, regs.VR50, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 82089F14h case  161:*/		return 0x82089F18;
		  /* 82089F18h */ case  162:  		/* stvlx VR51, <#[R7 + R3]> */
		/* 82089F18h case  162:*/		cpu::mem::stvlx( regs, regs.VR51, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 82089F18h case  162:*/		return 0x82089F1C;
		  /* 82089F1Ch */ case  163:  		/* stvlx VR52, <#[R8 + R3]> */
		/* 82089F1Ch case  163:*/		cpu::mem::stvlx( regs, regs.VR52, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82089F1Ch case  163:*/		return 0x82089F20;
		  /* 82089F20h */ case  164:  		/* stvlx VR53, <#[R9 + R3]> */
		/* 82089F20h case  164:*/		cpu::mem::stvlx( regs, regs.VR53, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82089F20h case  164:*/		return 0x82089F24;
		  /* 82089F24h */ case  165:  		/* stvlx VR54, <#[R10 + R3]> */
		/* 82089F24h case  165:*/		cpu::mem::stvlx( regs, regs.VR54, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82089F24h case  165:*/		return 0x82089F28;
		  /* 82089F28h */ case  166:  		/* stvlx VR55, <#[R11 + R3]> */
		/* 82089F28h case  166:*/		cpu::mem::stvlx( regs, regs.VR55, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82089F28h case  166:*/		return 0x82089F2C;
		  /* 82089F2Ch */ case  167:  		/* stvlx VR56, <#[R12 + R3]> */
		/* 82089F2Ch case  167:*/		cpu::mem::stvlx( regs, regs.VR56, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 82089F2Ch case  167:*/		return 0x82089F30;
		  /* 82089F30h */ case  168:  		/* dcbf R0, R3 */
		/* 82089F30h case  168:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R3);
		/* 82089F30h case  168:*/		return 0x82089F34;
		  /* 82089F34h */ case  169:  		/* addi R3, R3, 128 */
		/* 82089F34h case  169:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 82089F34h case  169:*/		return 0x82089F38;
		  /* 82089F38h */ case  170:  		/* stvlx VR57, <#[R3]> */
		/* 82089F38h case  170:*/		cpu::mem::stvlx( regs, regs.VR57, (uint32)(regs.R3 + 0x00000000) );
		/* 82089F38h case  170:*/		return 0x82089F3C;
		  /* 82089F3Ch */ case  171:  		/* stvlx VR58, <#[R6 + R3]> */
		/* 82089F3Ch case  171:*/		cpu::mem::stvlx( regs, regs.VR58, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 82089F3Ch case  171:*/		return 0x82089F40;
		  /* 82089F40h */ case  172:  		/* stvlx VR59, <#[R7 + R3]> */
		/* 82089F40h case  172:*/		cpu::mem::stvlx( regs, regs.VR59, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 82089F40h case  172:*/		return 0x82089F44;
		  /* 82089F44h */ case  173:  		/* stvlx VR60, <#[R8 + R3]> */
		/* 82089F44h case  173:*/		cpu::mem::stvlx( regs, regs.VR60, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82089F44h case  173:*/		return 0x82089F48;
		  /* 82089F48h */ case  174:  		/* stvlx VR61, <#[R9 + R3]> */
		/* 82089F48h case  174:*/		cpu::mem::stvlx( regs, regs.VR61, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82089F48h case  174:*/		return 0x82089F4C;
		  /* 82089F4Ch */ case  175:  		/* stvlx VR62, <#[R10 + R3]> */
		/* 82089F4Ch case  175:*/		cpu::mem::stvlx( regs, regs.VR62, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82089F4Ch case  175:*/		return 0x82089F50;
		  /* 82089F50h */ case  176:  		/* stvlx VR63, <#[R11 + R3]> */
		/* 82089F50h case  176:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82089F50h case  176:*/		return 0x82089F54;
		  /* 82089F54h */ case  177:  		/* stvlx VR0, <#[R12 + R3]> */
		/* 82089F54h case  177:*/		cpu::mem::stvlx( regs, regs.VR0, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 82089F54h case  177:*/		return 0x82089F58;
		  /* 82089F58h */ case  178:  		/* dcbf R0, R3 */
		/* 82089F58h case  178:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R3);
		/* 82089F58h case  178:*/		return 0x82089F5C;
		  /* 82089F5Ch */ case  179:  		/* addi R3, R3, 128 */
		/* 82089F5Ch case  179:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 82089F5Ch case  179:*/		return 0x82089F60;
		  /* 82089F60h */ case  180:  		/* addi R5, R5, -1024 */
		/* 82089F60h case  180:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0xFFFFFC00);
		/* 82089F60h case  180:*/		return 0x82089F64;
		  /* 82089F64h */ case  181:  		/* cmplwi CR6, R5, 1024 */
		/* 82089F64h case  181:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000400);
		/* 82089F64h case  181:*/		return 0x82089F68;
		  /* 82089F68h */ case  182:  		/* bc 4, CR6_LT, -744 */
		/* 82089F68h case  182:*/		if ( !regs.CR[6].lt ) { return 0x82089C80;  }
		/* 82089F68h case  182:*/		return 0x82089F6C;
		  /* 82089F6Ch */ case  183:  		/* cmplwi CR6, R5, 0 */
		/* 82089F6Ch case  183:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82089F6Ch case  183:*/		return 0x82089F70;
		  /* 82089F70h */ case  184:  		/* bc 4, CR6_EQ, 8 */
		/* 82089F70h case  184:*/		if ( !regs.CR[6].eq ) { return 0x82089F78;  }
		/* 82089F70h case  184:*/		return 0x82089F74;
		  /* 82089F74h */ case  185:  		/* b 96 */
		/* 82089F74h case  185:*/		return 0x82089FD4;
		/* 82089F74h case  185:*/		return 0x82089F78;
	}
	return 0x82089F78;
} // Block from 82089C90h-82089F78h (186 instructions)

//////////////////////////////////////////////////////
// Block at 82089F78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089F78);
		  /* 82089F78h */ case    0:  		/* lvx VR1, <#[R4]> */
		/* 82089F78h case    0:*/		cpu::mem::lvx( regs, &regs.VR1, (uint32)(regs.R4 + 0x00000000) );
		/* 82089F78h case    0:*/		return 0x82089F7C;
		  /* 82089F7Ch */ case    1:  		/* lvx VR2, <#[R6 + R4]> */
		/* 82089F7Ch case    1:*/		cpu::mem::lvx( regs, &regs.VR2, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 82089F7Ch case    1:*/		return 0x82089F80;
		  /* 82089F80h */ case    2:  		/* lvx VR3, <#[R7 + R4]> */
		/* 82089F80h case    2:*/		cpu::mem::lvx( regs, &regs.VR3, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 82089F80h case    2:*/		return 0x82089F84;
		  /* 82089F84h */ case    3:  		/* lvx VR4, <#[R8 + R4]> */
		/* 82089F84h case    3:*/		cpu::mem::lvx( regs, &regs.VR4, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 82089F84h case    3:*/		return 0x82089F88;
		  /* 82089F88h */ case    4:  		/* lvx VR5, <#[R9 + R4]> */
		/* 82089F88h case    4:*/		cpu::mem::lvx( regs, &regs.VR5, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 82089F88h case    4:*/		return 0x82089F8C;
		  /* 82089F8Ch */ case    5:  		/* lvx VR6, <#[R10 + R4]> */
		/* 82089F8Ch case    5:*/		cpu::mem::lvx( regs, &regs.VR6, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 82089F8Ch case    5:*/		return 0x82089F90;
		  /* 82089F90h */ case    6:  		/* lvx VR7, <#[R11 + R4]> */
		/* 82089F90h case    6:*/		cpu::mem::lvx( regs, &regs.VR7, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 82089F90h case    6:*/		return 0x82089F94;
		  /* 82089F94h */ case    7:  		/* lvx VR8, <#[R12 + R4]> */
		/* 82089F94h case    7:*/		cpu::mem::lvx( regs, &regs.VR8, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 82089F94h case    7:*/		return 0x82089F98;
		  /* 82089F98h */ case    8:  		/* dcbf R0, R4 */
		/* 82089F98h case    8:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 82089F98h case    8:*/		return 0x82089F9C;
		  /* 82089F9Ch */ case    9:  		/* addi R4, R4, 128 */
		/* 82089F9Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 82089F9Ch case    9:*/		return 0x82089FA0;
		  /* 82089FA0h */ case   10:  		/* stvlx VR1, <#[R3]> */
		/* 82089FA0h case   10:*/		cpu::mem::stvlx( regs, regs.VR1, (uint32)(regs.R3 + 0x00000000) );
		/* 82089FA0h case   10:*/		return 0x82089FA4;
		  /* 82089FA4h */ case   11:  		/* stvlx VR2, <#[R6 + R3]> */
		/* 82089FA4h case   11:*/		cpu::mem::stvlx( regs, regs.VR2, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 82089FA4h case   11:*/		return 0x82089FA8;
		  /* 82089FA8h */ case   12:  		/* stvlx VR3, <#[R7 + R3]> */
		/* 82089FA8h case   12:*/		cpu::mem::stvlx( regs, regs.VR3, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 82089FA8h case   12:*/		return 0x82089FAC;
		  /* 82089FACh */ case   13:  		/* stvlx VR4, <#[R8 + R3]> */
		/* 82089FACh case   13:*/		cpu::mem::stvlx( regs, regs.VR4, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 82089FACh case   13:*/		return 0x82089FB0;
		  /* 82089FB0h */ case   14:  		/* stvlx VR5, <#[R9 + R3]> */
		/* 82089FB0h case   14:*/		cpu::mem::stvlx( regs, regs.VR5, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 82089FB0h case   14:*/		return 0x82089FB4;
		  /* 82089FB4h */ case   15:  		/* stvlx VR6, <#[R10 + R3]> */
		/* 82089FB4h case   15:*/		cpu::mem::stvlx( regs, regs.VR6, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 82089FB4h case   15:*/		return 0x82089FB8;
		  /* 82089FB8h */ case   16:  		/* stvlx VR7, <#[R11 + R3]> */
		/* 82089FB8h case   16:*/		cpu::mem::stvlx( regs, regs.VR7, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 82089FB8h case   16:*/		return 0x82089FBC;
		  /* 82089FBCh */ case   17:  		/* stvlx VR8, <#[R12 + R3]> */
		/* 82089FBCh case   17:*/		cpu::mem::stvlx( regs, regs.VR8, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 82089FBCh case   17:*/		return 0x82089FC0;
		  /* 82089FC0h */ case   18:  		/* dcbf R0, R3 */
		/* 82089FC0h case   18:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R3);
		/* 82089FC0h case   18:*/		return 0x82089FC4;
		  /* 82089FC4h */ case   19:  		/* addi R3, R3, 128 */
		/* 82089FC4h case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 82089FC4h case   19:*/		return 0x82089FC8;
		  /* 82089FC8h */ case   20:  		/* addi R5, R5, -128 */
		/* 82089FC8h case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0xFFFFFF80);
		/* 82089FC8h case   20:*/		return 0x82089FCC;
		  /* 82089FCCh */ case   21:  		/* cmplwi CR6, R5, 0 */
		/* 82089FCCh case   21:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82089FCCh case   21:*/		return 0x82089FD0;
		  /* 82089FD0h */ case   22:  		/* bc 12, CR6_GT, -88 */
		/* 82089FD0h case   22:*/		if ( regs.CR[6].gt ) { return 0x82089F78;  }
		/* 82089FD0h case   22:*/		return 0x82089FD4;
	}
	return 0x82089FD4;
} // Block from 82089F78h-82089FD4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82089FD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089FD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089FD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089FD4);
		  /* 82089FD4h */ case    0:  		/* ld R30, <#[R1 - 16]> */
		/* 82089FD4h case    0:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82089FD4h case    0:*/		return 0x82089FD8;
		  /* 82089FD8h */ case    1:  		/* ld R31, <#[R1 - 8]> */
		/* 82089FD8h case    1:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82089FD8h case    1:*/		return 0x82089FDC;
		  /* 82089FDCh */ case    2:  		/* bclr 20, CR0_LT */
		/* 82089FDCh case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82089FDCh case    2:*/		return 0x82089FE0;
	}
	return 0x82089FE0;
} // Block from 82089FD4h-82089FE0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82089FE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82089FE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82089FE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82089FE0);
		  /* 82089FE0h */ case    0:  		/* std R30, <#[R1 - 16]> */
		/* 82089FE0h case    0:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82089FE0h case    0:*/		return 0x82089FE4;
		  /* 82089FE4h */ case    1:  		/* std R31, <#[R1 - 8]> */
		/* 82089FE4h case    1:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82089FE4h case    1:*/		return 0x82089FE8;
		  /* 82089FE8h */ case    2:  		/* li R6, -32 */
		/* 82089FE8h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0xFFFFFFE0);
		/* 82089FE8h case    2:*/		return 0x82089FEC;
		  /* 82089FECh */ case    3:  		/* li R7, -48 */
		/* 82089FECh case    3:*/		cpu::op::li<0>(regs,&regs.R7,0xFFFFFFD0);
		/* 82089FECh case    3:*/		return 0x82089FF0;
		  /* 82089FF0h */ case    4:  		/* stvlx VR64, <#[R1 + R6]> */
		/* 82089FF0h case    4:*/		cpu::mem::stvlx( regs, regs.VR64, (uint32)(regs.R1 + regs.R6 + 0x00000000) );
		/* 82089FF0h case    4:*/		return 0x82089FF4;
		  /* 82089FF4h */ case    5:  		/* stvlx VR65, <#[R1 + R7]> */
		/* 82089FF4h case    5:*/		cpu::mem::stvlx( regs, regs.VR65, (uint32)(regs.R1 + regs.R7 + 0x00000000) );
		/* 82089FF4h case    5:*/		return 0x82089FF8;
		  /* 82089FF8h */ case    6:  		/* li R0, 0 */
		/* 82089FF8h case    6:*/		cpu::op::li<0>(regs,&regs.R0,0x0);
		/* 82089FF8h case    6:*/		return 0x82089FFC;
		  /* 82089FFCh */ case    7:  		/* li R6, 16 */
		/* 82089FFCh case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x10);
		/* 82089FFCh case    7:*/		return 0x8208A000;
		  /* 8208A000h */ case    8:  		/* li R7, 32 */
		/* 8208A000h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x20);
		/* 8208A000h case    8:*/		return 0x8208A004;
		  /* 8208A004h */ case    9:  		/* li R8, 48 */
		/* 8208A004h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x30);
		/* 8208A004h case    9:*/		return 0x8208A008;
		  /* 8208A008h */ case   10:  		/* li R9, 64 */
		/* 8208A008h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x40);
		/* 8208A008h case   10:*/		return 0x8208A00C;
		  /* 8208A00Ch */ case   11:  		/* li R10, 80 */
		/* 8208A00Ch case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x50);
		/* 8208A00Ch case   11:*/		return 0x8208A010;
		  /* 8208A010h */ case   12:  		/* li R11, 96 */
		/* 8208A010h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x60);
		/* 8208A010h case   12:*/		return 0x8208A014;
		  /* 8208A014h */ case   13:  		/* li R12, 112 */
		/* 8208A014h case   13:*/		cpu::op::li<0>(regs,&regs.R12,0x70);
		/* 8208A014h case   13:*/		return 0x8208A018;
		  /* 8208A018h */ case   14:  		/* li R31, 512 */
		/* 8208A018h case   14:*/		cpu::op::li<0>(regs,&regs.R31,0x200);
		/* 8208A018h case   14:*/		return 0x8208A01C;
		  /* 8208A01Ch */ case   15:  		/* dcbt R4, R0 */
		/* 8208A01Ch case   15:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 8208A01Ch case   15:*/		return 0x8208A020;
		  /* 8208A020h */ case   16:  		/* lvx VR65, <#[R4]> */
		/* 8208A020h case   16:*/		cpu::mem::lvx( regs, &regs.VR65, (uint32)(regs.R4 + 0x00000000) );
		/* 8208A020h case   16:*/		return 0x8208A024;
		  /* 8208A024h */ case   17:  		/* addi R4, R4, 16 */
		/* 8208A024h case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x10);
		/* 8208A024h case   17:*/		return 0x8208A028;
		  /* 8208A028h */ case   18:  		/* lvsl VR0, R0, R4 */
		/* 8208A028h case   18:*/		cpu::op::lvsl<0>(regs,&regs.VR0,regs.R0,regs.R4);
		/* 8208A028h case   18:*/		return 0x8208A02C;
		  /* 8208A02Ch */ case   19:  		/* cmplwi CR6, R5, 1024 */
		/* 8208A02Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000400);
		/* 8208A02Ch case   19:*/		return 0x8208A030;
		  /* 8208A030h */ case   20:  		/* bc 12, CR6_LT, 1076 */
		/* 8208A030h case   20:*/		if ( regs.CR[6].lt ) { return 0x8208A464;  }
		/* 8208A030h case   20:*/		return 0x8208A034;
		  /* 8208A034h */ case   21:  		/* li R0, 128 */
		/* 8208A034h case   21:*/		cpu::op::li<0>(regs,&regs.R0,0x80);
		/* 8208A034h case   21:*/		return 0x8208A038;
		  /* 8208A038h */ case   22:  		/* dcbt R4, R0 */
		/* 8208A038h case   22:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 8208A038h case   22:*/		return 0x8208A03C;
		  /* 8208A03Ch */ case   23:  		/* li R0, 256 */
		/* 8208A03Ch case   23:*/		cpu::op::li<0>(regs,&regs.R0,0x100);
		/* 8208A03Ch case   23:*/		return 0x8208A040;
		  /* 8208A040h */ case   24:  		/* dcbt R4, R0 */
		/* 8208A040h case   24:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 8208A040h case   24:*/		return 0x8208A044;
		  /* 8208A044h */ case   25:  		/* li R0, 384 */
		/* 8208A044h case   25:*/		cpu::op::li<0>(regs,&regs.R0,0x180);
		/* 8208A044h case   25:*/		return 0x8208A048;
		  /* 8208A048h */ case   26:  		/* dcbt R4, R0 */
		/* 8208A048h case   26:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 8208A048h case   26:*/		return 0x8208A04C;
		  /* 8208A04Ch */ case   27:  		/* li R0, 512 */
		/* 8208A04Ch case   27:*/		cpu::op::li<0>(regs,&regs.R0,0x200);
		/* 8208A04Ch case   27:*/		return 0x8208A050;
		  /* 8208A050h */ case   28:  		/* dcbt R4, R0 */
		/* 8208A050h case   28:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 8208A050h case   28:*/		return 0x8208A054;
		  /* 8208A054h */ case   29:  		/* li R0, 640 */
		/* 8208A054h case   29:*/		cpu::op::li<0>(regs,&regs.R0,0x280);
		/* 8208A054h case   29:*/		return 0x8208A058;
		  /* 8208A058h */ case   30:  		/* dcbt R4, R0 */
		/* 8208A058h case   30:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 8208A058h case   30:*/		return 0x8208A05C;
		  /* 8208A05Ch */ case   31:  		/* li R0, 768 */
		/* 8208A05Ch case   31:*/		cpu::op::li<0>(regs,&regs.R0,0x300);
		/* 8208A05Ch case   31:*/		return 0x8208A060;
		  /* 8208A060h */ case   32:  		/* dcbt R4, R0 */
		/* 8208A060h case   32:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 8208A060h case   32:*/		return 0x8208A064;
		  /* 8208A064h */ case   33:  		/* li R0, 896 */
		/* 8208A064h case   33:*/		cpu::op::li<0>(regs,&regs.R0,0x380);
		/* 8208A064h case   33:*/		return 0x8208A068;
		  /* 8208A068h */ case   34:  		/* dcbt R4, R0 */
		/* 8208A068h case   34:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 8208A068h case   34:*/		return 0x8208A06C;
		  /* 8208A06Ch */ case   35:  		/* addi R0, R5, -1024 */
		/* 8208A06Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R0,regs.R5,0xFFFFFC00);
		/* 8208A06Ch case   35:*/		return 0x8208A070;
		  /* 8208A070h */ case   36:  		/* cmplwi CR6, R0, 1024 */
		/* 8208A070h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R0,0x00000400);
		/* 8208A070h case   36:*/		return 0x8208A074;
		  /* 8208A074h */ case   37:  		/* bc 12, CR6_LT, 8 */
		/* 8208A074h case   37:*/		if ( regs.CR[6].lt ) { return 0x8208A07C;  }
		/* 8208A074h case   37:*/		return 0x8208A078;
		  /* 8208A078h */ case   38:  		/* li R0, 1024 */
		/* 8208A078h case   38:*/		cpu::op::li<0>(regs,&regs.R0,0x400);
		/* 8208A078h case   38:*/		return 0x8208A07C;
	}
	return 0x8208A07C;
} // Block from 82089FE0h-8208A07Ch (39 instructions)

//////////////////////////////////////////////////////
// Block at 8208A07Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A07C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A07C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A07C);
		  /* 8208A07Ch */ case    0:  		/* lvx VR1, <#[R4]> */
		/* 8208A07Ch case    0:*/		cpu::mem::lvx( regs, &regs.VR1, (uint32)(regs.R4 + 0x00000000) );
		/* 8208A07Ch case    0:*/		return 0x8208A080;
		  /* 8208A080h */ case    1:  		/* lvx VR2, <#[R6 + R4]> */
		/* 8208A080h case    1:*/		cpu::mem::lvx( regs, &regs.VR2, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 8208A080h case    1:*/		return 0x8208A084;
		  /* 8208A084h */ case    2:  		/* lvx VR3, <#[R7 + R4]> */
		/* 8208A084h case    2:*/		cpu::mem::lvx( regs, &regs.VR3, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 8208A084h case    2:*/		return 0x8208A088;
		  /* 8208A088h */ case    3:  		/* lvx VR4, <#[R8 + R4]> */
		/* 8208A088h case    3:*/		cpu::mem::lvx( regs, &regs.VR4, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 8208A088h case    3:*/		return 0x8208A08C;
		  /* 8208A08Ch */ case    4:  		/* lvx VR5, <#[R9 + R4]> */
		/* 8208A08Ch case    4:*/		cpu::mem::lvx( regs, &regs.VR5, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 8208A08Ch case    4:*/		return 0x8208A090;
		  /* 8208A090h */ case    5:  		/* lvx VR6, <#[R10 + R4]> */
		/* 8208A090h case    5:*/		cpu::mem::lvx( regs, &regs.VR6, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8208A090h case    5:*/		return 0x8208A094;
		  /* 8208A094h */ case    6:  		/* lvx VR7, <#[R11 + R4]> */
		/* 8208A094h case    6:*/		cpu::mem::lvx( regs, &regs.VR7, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 8208A094h case    6:*/		return 0x8208A098;
		  /* 8208A098h */ case    7:  		/* lvx VR8, <#[R12 + R4]> */
		/* 8208A098h case    7:*/		cpu::mem::lvx( regs, &regs.VR8, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 8208A098h case    7:*/		return 0x8208A09C;
		  /* 8208A09Ch */ case    8:  		/* dcbt R4, R0 */
		/* 8208A09Ch case    8:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 8208A09Ch case    8:*/		return 0x8208A0A0;
		  /* 8208A0A0h */ case    9:  		/* dcbf R0, R4 */
		/* 8208A0A0h case    9:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 8208A0A0h case    9:*/		return 0x8208A0A4;
		  /* 8208A0A4h */ case   10:  		/* addi R4, R4, 128 */
		/* 8208A0A4h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 8208A0A4h case   10:*/		return 0x8208A0A8;
		  /* 8208A0A8h */ case   11:  		/* lvx VR9, <#[R4]> */
		/* 8208A0A8h case   11:*/		cpu::mem::lvx( regs, &regs.VR9, (uint32)(regs.R4 + 0x00000000) );
		/* 8208A0A8h case   11:*/		return 0x8208A0AC;
		  /* 8208A0ACh */ case   12:  		/* lvx VR10, <#[R6 + R4]> */
		/* 8208A0ACh case   12:*/		cpu::mem::lvx( regs, &regs.VR10, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 8208A0ACh case   12:*/		return 0x8208A0B0;
		  /* 8208A0B0h */ case   13:  		/* lvx VR11, <#[R7 + R4]> */
		/* 8208A0B0h case   13:*/		cpu::mem::lvx( regs, &regs.VR11, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 8208A0B0h case   13:*/		return 0x8208A0B4;
		  /* 8208A0B4h */ case   14:  		/* lvx VR12, <#[R8 + R4]> */
		/* 8208A0B4h case   14:*/		cpu::mem::lvx( regs, &regs.VR12, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 8208A0B4h case   14:*/		return 0x8208A0B8;
		  /* 8208A0B8h */ case   15:  		/* lvx VR13, <#[R9 + R4]> */
		/* 8208A0B8h case   15:*/		cpu::mem::lvx( regs, &regs.VR13, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 8208A0B8h case   15:*/		return 0x8208A0BC;
		  /* 8208A0BCh */ case   16:  		/* lvx VR14, <#[R10 + R4]> */
		/* 8208A0BCh case   16:*/		cpu::mem::lvx( regs, &regs.VR14, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8208A0BCh case   16:*/		return 0x8208A0C0;
		  /* 8208A0C0h */ case   17:  		/* lvx VR15, <#[R11 + R4]> */
		/* 8208A0C0h case   17:*/		cpu::mem::lvx( regs, &regs.VR15, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 8208A0C0h case   17:*/		return 0x8208A0C4;
		  /* 8208A0C4h */ case   18:  		/* lvx VR16, <#[R12 + R4]> */
		/* 8208A0C4h case   18:*/		cpu::mem::lvx( regs, &regs.VR16, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 8208A0C4h case   18:*/		return 0x8208A0C8;
		  /* 8208A0C8h */ case   19:  		/* dcbt R4, R0 */
		/* 8208A0C8h case   19:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 8208A0C8h case   19:*/		return 0x8208A0CC;
		  /* 8208A0CCh */ case   20:  		/* dcbf R0, R4 */
		/* 8208A0CCh case   20:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 8208A0CCh case   20:*/		return 0x8208A0D0;
		  /* 8208A0D0h */ case   21:  		/* addi R4, R4, 128 */
		/* 8208A0D0h case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 8208A0D0h case   21:*/		return 0x8208A0D4;
		  /* 8208A0D4h */ case   22:  		/* lvx VR17, <#[R4]> */
		/* 8208A0D4h case   22:*/		cpu::mem::lvx( regs, &regs.VR17, (uint32)(regs.R4 + 0x00000000) );
		/* 8208A0D4h case   22:*/		return 0x8208A0D8;
		  /* 8208A0D8h */ case   23:  		/* lvx VR18, <#[R6 + R4]> */
		/* 8208A0D8h case   23:*/		cpu::mem::lvx( regs, &regs.VR18, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 8208A0D8h case   23:*/		return 0x8208A0DC;
		  /* 8208A0DCh */ case   24:  		/* lvx VR19, <#[R7 + R4]> */
		/* 8208A0DCh case   24:*/		cpu::mem::lvx( regs, &regs.VR19, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 8208A0DCh case   24:*/		return 0x8208A0E0;
		  /* 8208A0E0h */ case   25:  		/* lvx VR20, <#[R8 + R4]> */
		/* 8208A0E0h case   25:*/		cpu::mem::lvx( regs, &regs.VR20, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 8208A0E0h case   25:*/		return 0x8208A0E4;
		  /* 8208A0E4h */ case   26:  		/* lvx VR21, <#[R9 + R4]> */
		/* 8208A0E4h case   26:*/		cpu::mem::lvx( regs, &regs.VR21, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 8208A0E4h case   26:*/		return 0x8208A0E8;
		  /* 8208A0E8h */ case   27:  		/* lvx VR22, <#[R10 + R4]> */
		/* 8208A0E8h case   27:*/		cpu::mem::lvx( regs, &regs.VR22, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8208A0E8h case   27:*/		return 0x8208A0EC;
		  /* 8208A0ECh */ case   28:  		/* lvx VR23, <#[R11 + R4]> */
		/* 8208A0ECh case   28:*/		cpu::mem::lvx( regs, &regs.VR23, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 8208A0ECh case   28:*/		return 0x8208A0F0;
		  /* 8208A0F0h */ case   29:  		/* lvx VR24, <#[R12 + R4]> */
		/* 8208A0F0h case   29:*/		cpu::mem::lvx( regs, &regs.VR24, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 8208A0F0h case   29:*/		return 0x8208A0F4;
		  /* 8208A0F4h */ case   30:  		/* dcbt R4, R0 */
		/* 8208A0F4h case   30:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 8208A0F4h case   30:*/		return 0x8208A0F8;
		  /* 8208A0F8h */ case   31:  		/* dcbf R0, R4 */
		/* 8208A0F8h case   31:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 8208A0F8h case   31:*/		return 0x8208A0FC;
		  /* 8208A0FCh */ case   32:  		/* addi R4, R4, 128 */
		/* 8208A0FCh case   32:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 8208A0FCh case   32:*/		return 0x8208A100;
		  /* 8208A100h */ case   33:  		/* lvx VR25, <#[R4]> */
		/* 8208A100h case   33:*/		cpu::mem::lvx( regs, &regs.VR25, (uint32)(regs.R4 + 0x00000000) );
		/* 8208A100h case   33:*/		return 0x8208A104;
		  /* 8208A104h */ case   34:  		/* lvx VR26, <#[R6 + R4]> */
		/* 8208A104h case   34:*/		cpu::mem::lvx( regs, &regs.VR26, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 8208A104h case   34:*/		return 0x8208A108;
		  /* 8208A108h */ case   35:  		/* lvx VR27, <#[R7 + R4]> */
		/* 8208A108h case   35:*/		cpu::mem::lvx( regs, &regs.VR27, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 8208A108h case   35:*/		return 0x8208A10C;
		  /* 8208A10Ch */ case   36:  		/* lvx VR28, <#[R8 + R4]> */
		/* 8208A10Ch case   36:*/		cpu::mem::lvx( regs, &regs.VR28, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 8208A10Ch case   36:*/		return 0x8208A110;
		  /* 8208A110h */ case   37:  		/* lvx VR29, <#[R9 + R4]> */
		/* 8208A110h case   37:*/		cpu::mem::lvx( regs, &regs.VR29, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 8208A110h case   37:*/		return 0x8208A114;
		  /* 8208A114h */ case   38:  		/* lvx VR30, <#[R10 + R4]> */
		/* 8208A114h case   38:*/		cpu::mem::lvx( regs, &regs.VR30, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8208A114h case   38:*/		return 0x8208A118;
		  /* 8208A118h */ case   39:  		/* lvx VR31, <#[R11 + R4]> */
		/* 8208A118h case   39:*/		cpu::mem::lvx( regs, &regs.VR31, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 8208A118h case   39:*/		return 0x8208A11C;
		  /* 8208A11Ch */ case   40:  		/* lvx VR32, <#[R12 + R4]> */
		/* 8208A11Ch case   40:*/		cpu::mem::lvx( regs, &regs.VR32, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 8208A11Ch case   40:*/		return 0x8208A120;
		  /* 8208A120h */ case   41:  		/* dcbt R4, R0 */
		/* 8208A120h case   41:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 8208A120h case   41:*/		return 0x8208A124;
		  /* 8208A124h */ case   42:  		/* dcbf R0, R4 */
		/* 8208A124h case   42:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 8208A124h case   42:*/		return 0x8208A128;
		  /* 8208A128h */ case   43:  		/* addi R4, R4, 128 */
		/* 8208A128h case   43:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 8208A128h case   43:*/		return 0x8208A12C;
		  /* 8208A12Ch */ case   44:  		/* xor R30, R30, R30 */
		/* 8208A12Ch case   44:*/		cpu::op::xor<0>(regs,&regs.R30,regs.R30,regs.R30);
		/* 8208A12Ch case   44:*/		return 0x8208A130;
		  /* 8208A130h */ case   45:  		/* lvx VR33, <#[R4]> */
		/* 8208A130h case   45:*/		cpu::mem::lvx( regs, &regs.VR33, (uint32)(regs.R4 + 0x00000000) );
		/* 8208A130h case   45:*/		return 0x8208A134;
		  /* 8208A134h */ case   46:  		/* lvx VR34, <#[R6 + R4]> */
		/* 8208A134h case   46:*/		cpu::mem::lvx( regs, &regs.VR34, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 8208A134h case   46:*/		return 0x8208A138;
		  /* 8208A138h */ case   47:  		/* lvx VR35, <#[R7 + R4]> */
		/* 8208A138h case   47:*/		cpu::mem::lvx( regs, &regs.VR35, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 8208A138h case   47:*/		return 0x8208A13C;
		  /* 8208A13Ch */ case   48:  		/* lvx VR36, <#[R8 + R4]> */
		/* 8208A13Ch case   48:*/		cpu::mem::lvx( regs, &regs.VR36, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 8208A13Ch case   48:*/		return 0x8208A140;
		  /* 8208A140h */ case   49:  		/* lvx VR37, <#[R9 + R4]> */
		/* 8208A140h case   49:*/		cpu::mem::lvx( regs, &regs.VR37, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 8208A140h case   49:*/		return 0x8208A144;
		  /* 8208A144h */ case   50:  		/* lvx VR38, <#[R10 + R4]> */
		/* 8208A144h case   50:*/		cpu::mem::lvx( regs, &regs.VR38, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8208A144h case   50:*/		return 0x8208A148;
		  /* 8208A148h */ case   51:  		/* lvx VR39, <#[R11 + R4]> */
		/* 8208A148h case   51:*/		cpu::mem::lvx( regs, &regs.VR39, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 8208A148h case   51:*/		return 0x8208A14C;
		  /* 8208A14Ch */ case   52:  		/* lvx VR40, <#[R12 + R4]> */
		/* 8208A14Ch case   52:*/		cpu::mem::lvx( regs, &regs.VR40, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 8208A14Ch case   52:*/		return 0x8208A150;
		  /* 8208A150h */ case   53:  		/* dcbz <#[R3 + R30]> */
		/* 8208A150h case   53:*/		cpu::op::dcbz<0>(regs, regs.R3 + regs.R30 + 0x00000000);
		/* 8208A150h case   53:*/		return 0x8208A154;
		  /* 8208A154h */ case   54:  		/* addi R30, R30, 128 */
		/* 8208A154h case   54:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x80);
		/* 8208A154h case   54:*/		return 0x8208A158;
		  /* 8208A158h */ case   55:  		/* dcbt R4, R0 */
		/* 8208A158h case   55:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 8208A158h case   55:*/		return 0x8208A15C;
		  /* 8208A15Ch */ case   56:  		/* dcbf R0, R4 */
		/* 8208A15Ch case   56:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 8208A15Ch case   56:*/		return 0x8208A160;
		  /* 8208A160h */ case   57:  		/* addi R4, R4, 128 */
		/* 8208A160h case   57:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 8208A160h case   57:*/		return 0x8208A164;
		  /* 8208A164h */ case   58:  		/* lvx VR41, <#[R4]> */
		/* 8208A164h case   58:*/		cpu::mem::lvx( regs, &regs.VR41, (uint32)(regs.R4 + 0x00000000) );
		/* 8208A164h case   58:*/		return 0x8208A168;
		  /* 8208A168h */ case   59:  		/* lvx VR42, <#[R6 + R4]> */
		/* 8208A168h case   59:*/		cpu::mem::lvx( regs, &regs.VR42, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 8208A168h case   59:*/		return 0x8208A16C;
		  /* 8208A16Ch */ case   60:  		/* lvx VR43, <#[R7 + R4]> */
		/* 8208A16Ch case   60:*/		cpu::mem::lvx( regs, &regs.VR43, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 8208A16Ch case   60:*/		return 0x8208A170;
		  /* 8208A170h */ case   61:  		/* lvx VR44, <#[R8 + R4]> */
		/* 8208A170h case   61:*/		cpu::mem::lvx( regs, &regs.VR44, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 8208A170h case   61:*/		return 0x8208A174;
		  /* 8208A174h */ case   62:  		/* lvx VR45, <#[R9 + R4]> */
		/* 8208A174h case   62:*/		cpu::mem::lvx( regs, &regs.VR45, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 8208A174h case   62:*/		return 0x8208A178;
		  /* 8208A178h */ case   63:  		/* lvx VR46, <#[R10 + R4]> */
		/* 8208A178h case   63:*/		cpu::mem::lvx( regs, &regs.VR46, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8208A178h case   63:*/		return 0x8208A17C;
		  /* 8208A17Ch */ case   64:  		/* lvx VR47, <#[R11 + R4]> */
		/* 8208A17Ch case   64:*/		cpu::mem::lvx( regs, &regs.VR47, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 8208A17Ch case   64:*/		return 0x8208A180;
		  /* 8208A180h */ case   65:  		/* lvx VR48, <#[R12 + R4]> */
		/* 8208A180h case   65:*/		cpu::mem::lvx( regs, &regs.VR48, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 8208A180h case   65:*/		return 0x8208A184;
		  /* 8208A184h */ case   66:  		/* dcbz <#[R3 + R30]> */
		/* 8208A184h case   66:*/		cpu::op::dcbz<0>(regs, regs.R3 + regs.R30 + 0x00000000);
		/* 8208A184h case   66:*/		return 0x8208A188;
		  /* 8208A188h */ case   67:  		/* addi R30, R30, 128 */
		/* 8208A188h case   67:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x80);
		/* 8208A188h case   67:*/		return 0x8208A18C;
		  /* 8208A18Ch */ case   68:  		/* dcbt R4, R0 */
		/* 8208A18Ch case   68:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 8208A18Ch case   68:*/		return 0x8208A190;
		  /* 8208A190h */ case   69:  		/* dcbf R0, R4 */
		/* 8208A190h case   69:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 8208A190h case   69:*/		return 0x8208A194;
		  /* 8208A194h */ case   70:  		/* addi R4, R4, 128 */
		/* 8208A194h case   70:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 8208A194h case   70:*/		return 0x8208A198;
		  /* 8208A198h */ case   71:  		/* lvx VR49, <#[R4]> */
		/* 8208A198h case   71:*/		cpu::mem::lvx( regs, &regs.VR49, (uint32)(regs.R4 + 0x00000000) );
		/* 8208A198h case   71:*/		return 0x8208A19C;
		  /* 8208A19Ch */ case   72:  		/* lvx VR50, <#[R6 + R4]> */
		/* 8208A19Ch case   72:*/		cpu::mem::lvx( regs, &regs.VR50, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 8208A19Ch case   72:*/		return 0x8208A1A0;
		  /* 8208A1A0h */ case   73:  		/* lvx VR51, <#[R7 + R4]> */
		/* 8208A1A0h case   73:*/		cpu::mem::lvx( regs, &regs.VR51, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 8208A1A0h case   73:*/		return 0x8208A1A4;
		  /* 8208A1A4h */ case   74:  		/* lvx VR52, <#[R8 + R4]> */
		/* 8208A1A4h case   74:*/		cpu::mem::lvx( regs, &regs.VR52, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 8208A1A4h case   74:*/		return 0x8208A1A8;
		  /* 8208A1A8h */ case   75:  		/* lvx VR53, <#[R9 + R4]> */
		/* 8208A1A8h case   75:*/		cpu::mem::lvx( regs, &regs.VR53, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 8208A1A8h case   75:*/		return 0x8208A1AC;
		  /* 8208A1ACh */ case   76:  		/* lvx VR54, <#[R10 + R4]> */
		/* 8208A1ACh case   76:*/		cpu::mem::lvx( regs, &regs.VR54, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8208A1ACh case   76:*/		return 0x8208A1B0;
		  /* 8208A1B0h */ case   77:  		/* lvx VR55, <#[R11 + R4]> */
		/* 8208A1B0h case   77:*/		cpu::mem::lvx( regs, &regs.VR55, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 8208A1B0h case   77:*/		return 0x8208A1B4;
		  /* 8208A1B4h */ case   78:  		/* lvx VR56, <#[R12 + R4]> */
		/* 8208A1B4h case   78:*/		cpu::mem::lvx( regs, &regs.VR56, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 8208A1B4h case   78:*/		return 0x8208A1B8;
		  /* 8208A1B8h */ case   79:  		/* dcbz <#[R3 + R30]> */
		/* 8208A1B8h case   79:*/		cpu::op::dcbz<0>(regs, regs.R3 + regs.R30 + 0x00000000);
		/* 8208A1B8h case   79:*/		return 0x8208A1BC;
		  /* 8208A1BCh */ case   80:  		/* addi R30, R30, 128 */
		/* 8208A1BCh case   80:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x80);
		/* 8208A1BCh case   80:*/		return 0x8208A1C0;
		  /* 8208A1C0h */ case   81:  		/* dcbt R4, R0 */
		/* 8208A1C0h case   81:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 8208A1C0h case   81:*/		return 0x8208A1C4;
		  /* 8208A1C4h */ case   82:  		/* dcbf R0, R4 */
		/* 8208A1C4h case   82:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 8208A1C4h case   82:*/		return 0x8208A1C8;
		  /* 8208A1C8h */ case   83:  		/* addi R4, R4, 128 */
		/* 8208A1C8h case   83:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 8208A1C8h case   83:*/		return 0x8208A1CC;
		  /* 8208A1CCh */ case   84:  		/* lvx VR57, <#[R4]> */
		/* 8208A1CCh case   84:*/		cpu::mem::lvx( regs, &regs.VR57, (uint32)(regs.R4 + 0x00000000) );
		/* 8208A1CCh case   84:*/		return 0x8208A1D0;
		  /* 8208A1D0h */ case   85:  		/* lvx VR58, <#[R6 + R4]> */
		/* 8208A1D0h case   85:*/		cpu::mem::lvx( regs, &regs.VR58, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 8208A1D0h case   85:*/		return 0x8208A1D4;
		  /* 8208A1D4h */ case   86:  		/* lvx VR59, <#[R7 + R4]> */
		/* 8208A1D4h case   86:*/		cpu::mem::lvx( regs, &regs.VR59, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 8208A1D4h case   86:*/		return 0x8208A1D8;
		  /* 8208A1D8h */ case   87:  		/* lvx VR60, <#[R8 + R4]> */
		/* 8208A1D8h case   87:*/		cpu::mem::lvx( regs, &regs.VR60, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 8208A1D8h case   87:*/		return 0x8208A1DC;
		  /* 8208A1DCh */ case   88:  		/* lvx VR61, <#[R9 + R4]> */
		/* 8208A1DCh case   88:*/		cpu::mem::lvx( regs, &regs.VR61, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 8208A1DCh case   88:*/		return 0x8208A1E0;
		  /* 8208A1E0h */ case   89:  		/* lvx VR62, <#[R10 + R4]> */
		/* 8208A1E0h case   89:*/		cpu::mem::lvx( regs, &regs.VR62, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8208A1E0h case   89:*/		return 0x8208A1E4;
		  /* 8208A1E4h */ case   90:  		/* lvx VR63, <#[R11 + R4]> */
		/* 8208A1E4h case   90:*/		cpu::mem::lvx( regs, &regs.VR63, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 8208A1E4h case   90:*/		return 0x8208A1E8;
		  /* 8208A1E8h */ case   91:  		/* lvx VR64, <#[R12 + R4]> */
		/* 8208A1E8h case   91:*/		cpu::mem::lvx( regs, &regs.VR64, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 8208A1E8h case   91:*/		return 0x8208A1EC;
		  /* 8208A1ECh */ case   92:  		/* dcbz <#[R3 + R30]> */
		/* 8208A1ECh case   92:*/		cpu::op::dcbz<0>(regs, regs.R3 + regs.R30 + 0x00000000);
		/* 8208A1ECh case   92:*/		return 0x8208A1F0;
		  /* 8208A1F0h */ case   93:  		/* dcbt R4, R0 */
		/* 8208A1F0h case   93:*/		cpu::op::dcbt<0>(regs,&regs.R4,regs.R0);
		/* 8208A1F0h case   93:*/		return 0x8208A1F4;
		  /* 8208A1F4h */ case   94:  		/* dcbf R0, R4 */
		/* 8208A1F4h case   94:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 8208A1F4h case   94:*/		return 0x8208A1F8;
		  /* 8208A1F8h */ case   95:  		/* addi R4, R4, 128 */
		/* 8208A1F8h case   95:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 8208A1F8h case   95:*/		return 0x8208A1FC;
		  /* 8208A1FCh */ case   96:  		/* vperm VR65, VR65, VR1, VR0 */
		/* 8208A1FCh case   96:*/		cpu::op::vperm<0>(regs,&regs.VR65,regs.VR65,regs.VR1,regs.VR0);
		/* 8208A1FCh case   96:*/		return 0x8208A200;
		  /* 8208A200h */ case   97:  		/* vperm VR1, VR1, VR2, VR0 */
		/* 8208A200h case   97:*/		cpu::op::vperm<0>(regs,&regs.VR1,regs.VR1,regs.VR2,regs.VR0);
		/* 8208A200h case   97:*/		return 0x8208A204;
		  /* 8208A204h */ case   98:  		/* vperm VR2, VR2, VR3, VR0 */
		/* 8208A204h case   98:*/		cpu::op::vperm<0>(regs,&regs.VR2,regs.VR2,regs.VR3,regs.VR0);
		/* 8208A204h case   98:*/		return 0x8208A208;
		  /* 8208A208h */ case   99:  		/* vperm VR3, VR3, VR4, VR0 */
		/* 8208A208h case   99:*/		cpu::op::vperm<0>(regs,&regs.VR3,regs.VR3,regs.VR4,regs.VR0);
		/* 8208A208h case   99:*/		return 0x8208A20C;
		  /* 8208A20Ch */ case  100:  		/* vperm VR4, VR4, VR5, VR0 */
		/* 8208A20Ch case  100:*/		cpu::op::vperm<0>(regs,&regs.VR4,regs.VR4,regs.VR5,regs.VR0);
		/* 8208A20Ch case  100:*/		return 0x8208A210;
		  /* 8208A210h */ case  101:  		/* vperm VR5, VR5, VR6, VR0 */
		/* 8208A210h case  101:*/		cpu::op::vperm<0>(regs,&regs.VR5,regs.VR5,regs.VR6,regs.VR0);
		/* 8208A210h case  101:*/		return 0x8208A214;
		  /* 8208A214h */ case  102:  		/* vperm VR6, VR6, VR7, VR0 */
		/* 8208A214h case  102:*/		cpu::op::vperm<0>(regs,&regs.VR6,regs.VR6,regs.VR7,regs.VR0);
		/* 8208A214h case  102:*/		return 0x8208A218;
		  /* 8208A218h */ case  103:  		/* vperm VR7, VR7, VR8, VR0 */
		/* 8208A218h case  103:*/		cpu::op::vperm<0>(regs,&regs.VR7,regs.VR7,regs.VR8,regs.VR0);
		/* 8208A218h case  103:*/		return 0x8208A21C;
		  /* 8208A21Ch */ case  104:  		/* stvlx VR65, <#[R3]> */
		/* 8208A21Ch case  104:*/		cpu::mem::stvlx( regs, regs.VR65, (uint32)(regs.R3 + 0x00000000) );
		/* 8208A21Ch case  104:*/		return 0x8208A220;
		  /* 8208A220h */ case  105:  		/* stvlx VR1, <#[R6 + R3]> */
		/* 8208A220h case  105:*/		cpu::mem::stvlx( regs, regs.VR1, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 8208A220h case  105:*/		return 0x8208A224;
		  /* 8208A224h */ case  106:  		/* stvlx VR2, <#[R7 + R3]> */
		/* 8208A224h case  106:*/		cpu::mem::stvlx( regs, regs.VR2, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 8208A224h case  106:*/		return 0x8208A228;
		  /* 8208A228h */ case  107:  		/* stvlx VR3, <#[R8 + R3]> */
		/* 8208A228h case  107:*/		cpu::mem::stvlx( regs, regs.VR3, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 8208A228h case  107:*/		return 0x8208A22C;
		  /* 8208A22Ch */ case  108:  		/* stvlx VR4, <#[R9 + R3]> */
		/* 8208A22Ch case  108:*/		cpu::mem::stvlx( regs, regs.VR4, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 8208A22Ch case  108:*/		return 0x8208A230;
		  /* 8208A230h */ case  109:  		/* stvlx VR5, <#[R10 + R3]> */
		/* 8208A230h case  109:*/		cpu::mem::stvlx( regs, regs.VR5, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 8208A230h case  109:*/		return 0x8208A234;
		  /* 8208A234h */ case  110:  		/* stvlx VR6, <#[R11 + R3]> */
		/* 8208A234h case  110:*/		cpu::mem::stvlx( regs, regs.VR6, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8208A234h case  110:*/		return 0x8208A238;
		  /* 8208A238h */ case  111:  		/* stvlx VR7, <#[R12 + R3]> */
		/* 8208A238h case  111:*/		cpu::mem::stvlx( regs, regs.VR7, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 8208A238h case  111:*/		return 0x8208A23C;
		  /* 8208A23Ch */ case  112:  		/* dcbf R0, R3 */
		/* 8208A23Ch case  112:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R3);
		/* 8208A23Ch case  112:*/		return 0x8208A240;
		  /* 8208A240h */ case  113:  		/* dcbz <#[R3 + R31]> */
		/* 8208A240h case  113:*/		cpu::op::dcbz<0>(regs, regs.R3 + regs.R31 + 0x00000000);
		/* 8208A240h case  113:*/		return 0x8208A244;
		  /* 8208A244h */ case  114:  		/* addi R3, R3, 128 */
		/* 8208A244h case  114:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 8208A244h case  114:*/		return 0x8208A248;
	}
	return 0x8208A248;
} // Block from 8208A07Ch-8208A248h (115 instructions)

//////////////////////////////////////////////////////
// Block at 8208A248h
// Function '?DoDisassembly_StaticInstructionCallback@Disassembler@D3D@@CAJKKPATGPUSHADER_INSTRUCTION@@PAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A248( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A248) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A248);
		  /* 8208A248h */ case    0:  		/* vperm VR8, VR8, VR9, VR0 */
		/* 8208A248h case    0:*/		cpu::op::vperm<0>(regs,&regs.VR8,regs.VR8,regs.VR9,regs.VR0);
		/* 8208A248h case    0:*/		return 0x8208A24C;
		  /* 8208A24Ch */ case    1:  		/* vperm VR9, VR9, VR10, VR0 */
		/* 8208A24Ch case    1:*/		cpu::op::vperm<0>(regs,&regs.VR9,regs.VR9,regs.VR10,regs.VR0);
		/* 8208A24Ch case    1:*/		return 0x8208A250;
		  /* 8208A250h */ case    2:  		/* vperm VR10, VR10, VR11, VR0 */
		/* 8208A250h case    2:*/		cpu::op::vperm<0>(regs,&regs.VR10,regs.VR10,regs.VR11,regs.VR0);
		/* 8208A250h case    2:*/		return 0x8208A254;
		  /* 8208A254h */ case    3:  		/* vperm VR11, VR11, VR12, VR0 */
		/* 8208A254h case    3:*/		cpu::op::vperm<0>(regs,&regs.VR11,regs.VR11,regs.VR12,regs.VR0);
		/* 8208A254h case    3:*/		return 0x8208A258;
		  /* 8208A258h */ case    4:  		/* vperm VR12, VR12, VR13, VR0 */
		/* 8208A258h case    4:*/		cpu::op::vperm<0>(regs,&regs.VR12,regs.VR12,regs.VR13,regs.VR0);
		/* 8208A258h case    4:*/		return 0x8208A25C;
		  /* 8208A25Ch */ case    5:  		/* vperm VR13, VR13, VR14, VR0 */
		/* 8208A25Ch case    5:*/		cpu::op::vperm<0>(regs,&regs.VR13,regs.VR13,regs.VR14,regs.VR0);
		/* 8208A25Ch case    5:*/		return 0x8208A260;
	}
	return 0x8208A260;
} // Block from 8208A248h-8208A260h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8208A260h
// Function '?DoDisassembly_InstructionCallback@Disassembler@D3D@@AAAJKKPATGPUSHADER_INSTRUCTION@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A260);
		  /* 8208A260h */ case    0:  		/* vperm VR14, VR14, VR15, VR0 */
		/* 8208A260h case    0:*/		cpu::op::vperm<0>(regs,&regs.VR14,regs.VR14,regs.VR15,regs.VR0);
		/* 8208A260h case    0:*/		return 0x8208A264;
		  /* 8208A264h */ case    1:  		/* vperm VR15, VR15, VR16, VR0 */
		/* 8208A264h case    1:*/		cpu::op::vperm<0>(regs,&regs.VR15,regs.VR15,regs.VR16,regs.VR0);
		/* 8208A264h case    1:*/		return 0x8208A268;
		  /* 8208A268h */ case    2:  		/* stvlx VR8, <#[R3]> */
		/* 8208A268h case    2:*/		cpu::mem::stvlx( regs, regs.VR8, (uint32)(regs.R3 + 0x00000000) );
		/* 8208A268h case    2:*/		return 0x8208A26C;
		  /* 8208A26Ch */ case    3:  		/* stvlx VR9, <#[R6 + R3]> */
		/* 8208A26Ch case    3:*/		cpu::mem::stvlx( regs, regs.VR9, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 8208A26Ch case    3:*/		return 0x8208A270;
		  /* 8208A270h */ case    4:  		/* stvlx VR10, <#[R7 + R3]> */
		/* 8208A270h case    4:*/		cpu::mem::stvlx( regs, regs.VR10, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 8208A270h case    4:*/		return 0x8208A274;
		  /* 8208A274h */ case    5:  		/* stvlx VR11, <#[R8 + R3]> */
		/* 8208A274h case    5:*/		cpu::mem::stvlx( regs, regs.VR11, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 8208A274h case    5:*/		return 0x8208A278;
		  /* 8208A278h */ case    6:  		/* stvlx VR12, <#[R9 + R3]> */
		/* 8208A278h case    6:*/		cpu::mem::stvlx( regs, regs.VR12, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 8208A278h case    6:*/		return 0x8208A27C;
		  /* 8208A27Ch */ case    7:  		/* stvlx VR13, <#[R10 + R3]> */
		/* 8208A27Ch case    7:*/		cpu::mem::stvlx( regs, regs.VR13, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 8208A27Ch case    7:*/		return 0x8208A280;
		  /* 8208A280h */ case    8:  		/* stvlx VR14, <#[R11 + R3]> */
		/* 8208A280h case    8:*/		cpu::mem::stvlx( regs, regs.VR14, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8208A280h case    8:*/		return 0x8208A284;
		  /* 8208A284h */ case    9:  		/* stvlx VR15, <#[R12 + R3]> */
		/* 8208A284h case    9:*/		cpu::mem::stvlx( regs, regs.VR15, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 8208A284h case    9:*/		return 0x8208A288;
		  /* 8208A288h */ case   10:  		/* dcbf R0, R3 */
		/* 8208A288h case   10:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R3);
		/* 8208A288h case   10:*/		return 0x8208A28C;
		  /* 8208A28Ch */ case   11:  		/* dcbz <#[R3 + R31]> */
		/* 8208A28Ch case   11:*/		cpu::op::dcbz<0>(regs, regs.R3 + regs.R31 + 0x00000000);
		/* 8208A28Ch case   11:*/		return 0x8208A290;
		  /* 8208A290h */ case   12:  		/* addi R3, R3, 128 */
		/* 8208A290h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 8208A290h case   12:*/		return 0x8208A294;
		  /* 8208A294h */ case   13:  		/* vperm VR16, VR16, VR17, VR0 */
		/* 8208A294h case   13:*/		cpu::op::vperm<0>(regs,&regs.VR16,regs.VR16,regs.VR17,regs.VR0);
		/* 8208A294h case   13:*/		return 0x8208A298;
		  /* 8208A298h */ case   14:  		/* vperm VR17, VR17, VR18, VR0 */
		/* 8208A298h case   14:*/		cpu::op::vperm<0>(regs,&regs.VR17,regs.VR17,regs.VR18,regs.VR0);
		/* 8208A298h case   14:*/		return 0x8208A29C;
		  /* 8208A29Ch */ case   15:  		/* vperm VR18, VR18, VR19, VR0 */
		/* 8208A29Ch case   15:*/		cpu::op::vperm<0>(regs,&regs.VR18,regs.VR18,regs.VR19,regs.VR0);
		/* 8208A29Ch case   15:*/		return 0x8208A2A0;
		  /* 8208A2A0h */ case   16:  		/* vperm VR19, VR19, VR20, VR0 */
		/* 8208A2A0h case   16:*/		cpu::op::vperm<0>(regs,&regs.VR19,regs.VR19,regs.VR20,regs.VR0);
		/* 8208A2A0h case   16:*/		return 0x8208A2A4;
		  /* 8208A2A4h */ case   17:  		/* vperm VR20, VR20, VR21, VR0 */
		/* 8208A2A4h case   17:*/		cpu::op::vperm<0>(regs,&regs.VR20,regs.VR20,regs.VR21,regs.VR0);
		/* 8208A2A4h case   17:*/		return 0x8208A2A8;
		  /* 8208A2A8h */ case   18:  		/* vperm VR21, VR21, VR22, VR0 */
		/* 8208A2A8h case   18:*/		cpu::op::vperm<0>(regs,&regs.VR21,regs.VR21,regs.VR22,regs.VR0);
		/* 8208A2A8h case   18:*/		return 0x8208A2AC;
		  /* 8208A2ACh */ case   19:  		/* vperm VR22, VR22, VR23, VR0 */
		/* 8208A2ACh case   19:*/		cpu::op::vperm<0>(regs,&regs.VR22,regs.VR22,regs.VR23,regs.VR0);
		/* 8208A2ACh case   19:*/		return 0x8208A2B0;
		  /* 8208A2B0h */ case   20:  		/* vperm VR23, VR23, VR24, VR0 */
		/* 8208A2B0h case   20:*/		cpu::op::vperm<0>(regs,&regs.VR23,regs.VR23,regs.VR24,regs.VR0);
		/* 8208A2B0h case   20:*/		return 0x8208A2B4;
		  /* 8208A2B4h */ case   21:  		/* stvlx VR16, <#[R3]> */
		/* 8208A2B4h case   21:*/		cpu::mem::stvlx( regs, regs.VR16, (uint32)(regs.R3 + 0x00000000) );
		/* 8208A2B4h case   21:*/		return 0x8208A2B8;
		  /* 8208A2B8h */ case   22:  		/* stvlx VR17, <#[R6 + R3]> */
		/* 8208A2B8h case   22:*/		cpu::mem::stvlx( regs, regs.VR17, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 8208A2B8h case   22:*/		return 0x8208A2BC;
		  /* 8208A2BCh */ case   23:  		/* stvlx VR18, <#[R7 + R3]> */
		/* 8208A2BCh case   23:*/		cpu::mem::stvlx( regs, regs.VR18, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 8208A2BCh case   23:*/		return 0x8208A2C0;
		  /* 8208A2C0h */ case   24:  		/* stvlx VR19, <#[R8 + R3]> */
		/* 8208A2C0h case   24:*/		cpu::mem::stvlx( regs, regs.VR19, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 8208A2C0h case   24:*/		return 0x8208A2C4;
		  /* 8208A2C4h */ case   25:  		/* stvlx VR20, <#[R9 + R3]> */
		/* 8208A2C4h case   25:*/		cpu::mem::stvlx( regs, regs.VR20, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 8208A2C4h case   25:*/		return 0x8208A2C8;
		  /* 8208A2C8h */ case   26:  		/* stvlx VR21, <#[R10 + R3]> */
		/* 8208A2C8h case   26:*/		cpu::mem::stvlx( regs, regs.VR21, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 8208A2C8h case   26:*/		return 0x8208A2CC;
		  /* 8208A2CCh */ case   27:  		/* stvlx VR22, <#[R11 + R3]> */
		/* 8208A2CCh case   27:*/		cpu::mem::stvlx( regs, regs.VR22, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8208A2CCh case   27:*/		return 0x8208A2D0;
		  /* 8208A2D0h */ case   28:  		/* stvlx VR23, <#[R12 + R3]> */
		/* 8208A2D0h case   28:*/		cpu::mem::stvlx( regs, regs.VR23, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 8208A2D0h case   28:*/		return 0x8208A2D4;
		  /* 8208A2D4h */ case   29:  		/* dcbf R0, R3 */
		/* 8208A2D4h case   29:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R3);
		/* 8208A2D4h case   29:*/		return 0x8208A2D8;
		  /* 8208A2D8h */ case   30:  		/* dcbz <#[R3 + R31]> */
		/* 8208A2D8h case   30:*/		cpu::op::dcbz<0>(regs, regs.R3 + regs.R31 + 0x00000000);
		/* 8208A2D8h case   30:*/		return 0x8208A2DC;
		  /* 8208A2DCh */ case   31:  		/* addi R3, R3, 128 */
		/* 8208A2DCh case   31:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 8208A2DCh case   31:*/		return 0x8208A2E0;
		  /* 8208A2E0h */ case   32:  		/* vperm VR24, VR24, VR25, VR0 */
		/* 8208A2E0h case   32:*/		cpu::op::vperm<0>(regs,&regs.VR24,regs.VR24,regs.VR25,regs.VR0);
		/* 8208A2E0h case   32:*/		return 0x8208A2E4;
		  /* 8208A2E4h */ case   33:  		/* vperm VR25, VR25, VR26, VR0 */
		/* 8208A2E4h case   33:*/		cpu::op::vperm<0>(regs,&regs.VR25,regs.VR25,regs.VR26,regs.VR0);
		/* 8208A2E4h case   33:*/		return 0x8208A2E8;
		  /* 8208A2E8h */ case   34:  		/* vperm VR26, VR26, VR27, VR0 */
		/* 8208A2E8h case   34:*/		cpu::op::vperm<0>(regs,&regs.VR26,regs.VR26,regs.VR27,regs.VR0);
		/* 8208A2E8h case   34:*/		return 0x8208A2EC;
		  /* 8208A2ECh */ case   35:  		/* vperm VR27, VR27, VR28, VR0 */
		/* 8208A2ECh case   35:*/		cpu::op::vperm<0>(regs,&regs.VR27,regs.VR27,regs.VR28,regs.VR0);
		/* 8208A2ECh case   35:*/		return 0x8208A2F0;
		  /* 8208A2F0h */ case   36:  		/* vperm VR28, VR28, VR29, VR0 */
		/* 8208A2F0h case   36:*/		cpu::op::vperm<0>(regs,&regs.VR28,regs.VR28,regs.VR29,regs.VR0);
		/* 8208A2F0h case   36:*/		return 0x8208A2F4;
		  /* 8208A2F4h */ case   37:  		/* vperm VR29, VR29, VR30, VR0 */
		/* 8208A2F4h case   37:*/		cpu::op::vperm<0>(regs,&regs.VR29,regs.VR29,regs.VR30,regs.VR0);
		/* 8208A2F4h case   37:*/		return 0x8208A2F8;
		  /* 8208A2F8h */ case   38:  		/* vperm VR30, VR30, VR31, VR0 */
		/* 8208A2F8h case   38:*/		cpu::op::vperm<0>(regs,&regs.VR30,regs.VR30,regs.VR31,regs.VR0);
		/* 8208A2F8h case   38:*/		return 0x8208A2FC;
		  /* 8208A2FCh */ case   39:  		/* vperm VR31, VR31, VR32, VR0 */
		/* 8208A2FCh case   39:*/		cpu::op::vperm<0>(regs,&regs.VR31,regs.VR31,regs.VR32,regs.VR0);
		/* 8208A2FCh case   39:*/		return 0x8208A300;
		  /* 8208A300h */ case   40:  		/* stvlx VR24, <#[R3]> */
		/* 8208A300h case   40:*/		cpu::mem::stvlx( regs, regs.VR24, (uint32)(regs.R3 + 0x00000000) );
		/* 8208A300h case   40:*/		return 0x8208A304;
		  /* 8208A304h */ case   41:  		/* stvlx VR25, <#[R6 + R3]> */
		/* 8208A304h case   41:*/		cpu::mem::stvlx( regs, regs.VR25, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 8208A304h case   41:*/		return 0x8208A308;
		  /* 8208A308h */ case   42:  		/* stvlx VR26, <#[R7 + R3]> */
		/* 8208A308h case   42:*/		cpu::mem::stvlx( regs, regs.VR26, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 8208A308h case   42:*/		return 0x8208A30C;
		  /* 8208A30Ch */ case   43:  		/* stvlx VR27, <#[R8 + R3]> */
		/* 8208A30Ch case   43:*/		cpu::mem::stvlx( regs, regs.VR27, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 8208A30Ch case   43:*/		return 0x8208A310;
		  /* 8208A310h */ case   44:  		/* stvlx VR28, <#[R9 + R3]> */
		/* 8208A310h case   44:*/		cpu::mem::stvlx( regs, regs.VR28, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 8208A310h case   44:*/		return 0x8208A314;
		  /* 8208A314h */ case   45:  		/* stvlx VR29, <#[R10 + R3]> */
		/* 8208A314h case   45:*/		cpu::mem::stvlx( regs, regs.VR29, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 8208A314h case   45:*/		return 0x8208A318;
		  /* 8208A318h */ case   46:  		/* stvlx VR30, <#[R11 + R3]> */
		/* 8208A318h case   46:*/		cpu::mem::stvlx( regs, regs.VR30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8208A318h case   46:*/		return 0x8208A31C;
		  /* 8208A31Ch */ case   47:  		/* stvlx VR31, <#[R12 + R3]> */
		/* 8208A31Ch case   47:*/		cpu::mem::stvlx( regs, regs.VR31, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 8208A31Ch case   47:*/		return 0x8208A320;
		  /* 8208A320h */ case   48:  		/* dcbf R0, R3 */
		/* 8208A320h case   48:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R3);
		/* 8208A320h case   48:*/		return 0x8208A324;
		  /* 8208A324h */ case   49:  		/* dcbz <#[R3 + R31]> */
		/* 8208A324h case   49:*/		cpu::op::dcbz<0>(regs, regs.R3 + regs.R31 + 0x00000000);
		/* 8208A324h case   49:*/		return 0x8208A328;
		  /* 8208A328h */ case   50:  		/* addi R3, R3, 128 */
		/* 8208A328h case   50:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 8208A328h case   50:*/		return 0x8208A32C;
		  /* 8208A32Ch */ case   51:  		/* vperm VR32, VR32, VR33, VR0 */
		/* 8208A32Ch case   51:*/		cpu::op::vperm<0>(regs,&regs.VR32,regs.VR32,regs.VR33,regs.VR0);
		/* 8208A32Ch case   51:*/		return 0x8208A330;
		  /* 8208A330h */ case   52:  		/* vperm VR33, VR33, VR34, VR0 */
		/* 8208A330h case   52:*/		cpu::op::vperm<0>(regs,&regs.VR33,regs.VR33,regs.VR34,regs.VR0);
		/* 8208A330h case   52:*/		return 0x8208A334;
		  /* 8208A334h */ case   53:  		/* vperm VR34, VR34, VR35, VR0 */
		/* 8208A334h case   53:*/		cpu::op::vperm<0>(regs,&regs.VR34,regs.VR34,regs.VR35,regs.VR0);
		/* 8208A334h case   53:*/		return 0x8208A338;
		  /* 8208A338h */ case   54:  		/* vperm VR35, VR35, VR36, VR0 */
		/* 8208A338h case   54:*/		cpu::op::vperm<0>(regs,&regs.VR35,regs.VR35,regs.VR36,regs.VR0);
		/* 8208A338h case   54:*/		return 0x8208A33C;
		  /* 8208A33Ch */ case   55:  		/* vperm VR36, VR36, VR37, VR0 */
		/* 8208A33Ch case   55:*/		cpu::op::vperm<0>(regs,&regs.VR36,regs.VR36,regs.VR37,regs.VR0);
		/* 8208A33Ch case   55:*/		return 0x8208A340;
		  /* 8208A340h */ case   56:  		/* vperm VR37, VR37, VR38, VR0 */
		/* 8208A340h case   56:*/		cpu::op::vperm<0>(regs,&regs.VR37,regs.VR37,regs.VR38,regs.VR0);
		/* 8208A340h case   56:*/		return 0x8208A344;
		  /* 8208A344h */ case   57:  		/* vperm VR38, VR38, VR39, VR0 */
		/* 8208A344h case   57:*/		cpu::op::vperm<0>(regs,&regs.VR38,regs.VR38,regs.VR39,regs.VR0);
		/* 8208A344h case   57:*/		return 0x8208A348;
		  /* 8208A348h */ case   58:  		/* vperm VR39, VR39, VR40, VR0 */
		/* 8208A348h case   58:*/		cpu::op::vperm<0>(regs,&regs.VR39,regs.VR39,regs.VR40,regs.VR0);
		/* 8208A348h case   58:*/		return 0x8208A34C;
		  /* 8208A34Ch */ case   59:  		/* stvlx VR32, <#[R3]> */
		/* 8208A34Ch case   59:*/		cpu::mem::stvlx( regs, regs.VR32, (uint32)(regs.R3 + 0x00000000) );
		/* 8208A34Ch case   59:*/		return 0x8208A350;
		  /* 8208A350h */ case   60:  		/* stvlx VR33, <#[R6 + R3]> */
		/* 8208A350h case   60:*/		cpu::mem::stvlx( regs, regs.VR33, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 8208A350h case   60:*/		return 0x8208A354;
		  /* 8208A354h */ case   61:  		/* stvlx VR34, <#[R7 + R3]> */
		/* 8208A354h case   61:*/		cpu::mem::stvlx( regs, regs.VR34, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 8208A354h case   61:*/		return 0x8208A358;
		  /* 8208A358h */ case   62:  		/* stvlx VR35, <#[R8 + R3]> */
		/* 8208A358h case   62:*/		cpu::mem::stvlx( regs, regs.VR35, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 8208A358h case   62:*/		return 0x8208A35C;
		  /* 8208A35Ch */ case   63:  		/* stvlx VR36, <#[R9 + R3]> */
		/* 8208A35Ch case   63:*/		cpu::mem::stvlx( regs, regs.VR36, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 8208A35Ch case   63:*/		return 0x8208A360;
		  /* 8208A360h */ case   64:  		/* stvlx VR37, <#[R10 + R3]> */
		/* 8208A360h case   64:*/		cpu::mem::stvlx( regs, regs.VR37, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 8208A360h case   64:*/		return 0x8208A364;
		  /* 8208A364h */ case   65:  		/* stvlx VR38, <#[R11 + R3]> */
		/* 8208A364h case   65:*/		cpu::mem::stvlx( regs, regs.VR38, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8208A364h case   65:*/		return 0x8208A368;
		  /* 8208A368h */ case   66:  		/* stvlx VR39, <#[R12 + R3]> */
		/* 8208A368h case   66:*/		cpu::mem::stvlx( regs, regs.VR39, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 8208A368h case   66:*/		return 0x8208A36C;
		  /* 8208A36Ch */ case   67:  		/* dcbf R0, R3 */
		/* 8208A36Ch case   67:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R3);
		/* 8208A36Ch case   67:*/		return 0x8208A370;
		  /* 8208A370h */ case   68:  		/* addi R3, R3, 128 */
		/* 8208A370h case   68:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 8208A370h case   68:*/		return 0x8208A374;
		  /* 8208A374h */ case   69:  		/* vperm VR40, VR40, VR41, VR0 */
		/* 8208A374h case   69:*/		cpu::op::vperm<0>(regs,&regs.VR40,regs.VR40,regs.VR41,regs.VR0);
		/* 8208A374h case   69:*/		return 0x8208A378;
		  /* 8208A378h */ case   70:  		/* vperm VR41, VR41, VR42, VR0 */
		/* 8208A378h case   70:*/		cpu::op::vperm<0>(regs,&regs.VR41,regs.VR41,regs.VR42,regs.VR0);
		/* 8208A378h case   70:*/		return 0x8208A37C;
		  /* 8208A37Ch */ case   71:  		/* vperm VR42, VR42, VR43, VR0 */
		/* 8208A37Ch case   71:*/		cpu::op::vperm<0>(regs,&regs.VR42,regs.VR42,regs.VR43,regs.VR0);
		/* 8208A37Ch case   71:*/		return 0x8208A380;
		  /* 8208A380h */ case   72:  		/* vperm VR43, VR43, VR44, VR0 */
		/* 8208A380h case   72:*/		cpu::op::vperm<0>(regs,&regs.VR43,regs.VR43,regs.VR44,regs.VR0);
		/* 8208A380h case   72:*/		return 0x8208A384;
		  /* 8208A384h */ case   73:  		/* vperm VR44, VR44, VR45, VR0 */
		/* 8208A384h case   73:*/		cpu::op::vperm<0>(regs,&regs.VR44,regs.VR44,regs.VR45,regs.VR0);
		/* 8208A384h case   73:*/		return 0x8208A388;
		  /* 8208A388h */ case   74:  		/* vperm VR45, VR45, VR46, VR0 */
		/* 8208A388h case   74:*/		cpu::op::vperm<0>(regs,&regs.VR45,regs.VR45,regs.VR46,regs.VR0);
		/* 8208A388h case   74:*/		return 0x8208A38C;
		  /* 8208A38Ch */ case   75:  		/* vperm VR46, VR46, VR47, VR0 */
		/* 8208A38Ch case   75:*/		cpu::op::vperm<0>(regs,&regs.VR46,regs.VR46,regs.VR47,regs.VR0);
		/* 8208A38Ch case   75:*/		return 0x8208A390;
		  /* 8208A390h */ case   76:  		/* vperm VR47, VR47, VR48, VR0 */
		/* 8208A390h case   76:*/		cpu::op::vperm<0>(regs,&regs.VR47,regs.VR47,regs.VR48,regs.VR0);
		/* 8208A390h case   76:*/		return 0x8208A394;
		  /* 8208A394h */ case   77:  		/* stvlx VR40, <#[R3]> */
		/* 8208A394h case   77:*/		cpu::mem::stvlx( regs, regs.VR40, (uint32)(regs.R3 + 0x00000000) );
		/* 8208A394h case   77:*/		return 0x8208A398;
		  /* 8208A398h */ case   78:  		/* stvlx VR41, <#[R6 + R3]> */
		/* 8208A398h case   78:*/		cpu::mem::stvlx( regs, regs.VR41, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 8208A398h case   78:*/		return 0x8208A39C;
		  /* 8208A39Ch */ case   79:  		/* stvlx VR42, <#[R7 + R3]> */
		/* 8208A39Ch case   79:*/		cpu::mem::stvlx( regs, regs.VR42, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 8208A39Ch case   79:*/		return 0x8208A3A0;
		  /* 8208A3A0h */ case   80:  		/* stvlx VR43, <#[R8 + R3]> */
		/* 8208A3A0h case   80:*/		cpu::mem::stvlx( regs, regs.VR43, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 8208A3A0h case   80:*/		return 0x8208A3A4;
		  /* 8208A3A4h */ case   81:  		/* stvlx VR44, <#[R9 + R3]> */
		/* 8208A3A4h case   81:*/		cpu::mem::stvlx( regs, regs.VR44, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 8208A3A4h case   81:*/		return 0x8208A3A8;
		  /* 8208A3A8h */ case   82:  		/* stvlx VR45, <#[R10 + R3]> */
		/* 8208A3A8h case   82:*/		cpu::mem::stvlx( regs, regs.VR45, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 8208A3A8h case   82:*/		return 0x8208A3AC;
		  /* 8208A3ACh */ case   83:  		/* stvlx VR46, <#[R11 + R3]> */
		/* 8208A3ACh case   83:*/		cpu::mem::stvlx( regs, regs.VR46, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8208A3ACh case   83:*/		return 0x8208A3B0;
		  /* 8208A3B0h */ case   84:  		/* stvlx VR47, <#[R12 + R3]> */
		/* 8208A3B0h case   84:*/		cpu::mem::stvlx( regs, regs.VR47, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 8208A3B0h case   84:*/		return 0x8208A3B4;
		  /* 8208A3B4h */ case   85:  		/* dcbf R0, R3 */
		/* 8208A3B4h case   85:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R3);
		/* 8208A3B4h case   85:*/		return 0x8208A3B8;
		  /* 8208A3B8h */ case   86:  		/* addi R3, R3, 128 */
		/* 8208A3B8h case   86:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 8208A3B8h case   86:*/		return 0x8208A3BC;
		  /* 8208A3BCh */ case   87:  		/* vperm VR48, VR48, VR49, VR0 */
		/* 8208A3BCh case   87:*/		cpu::op::vperm<0>(regs,&regs.VR48,regs.VR48,regs.VR49,regs.VR0);
		/* 8208A3BCh case   87:*/		return 0x8208A3C0;
		  /* 8208A3C0h */ case   88:  		/* vperm VR49, VR49, VR50, VR0 */
		/* 8208A3C0h case   88:*/		cpu::op::vperm<0>(regs,&regs.VR49,regs.VR49,regs.VR50,regs.VR0);
		/* 8208A3C0h case   88:*/		return 0x8208A3C4;
		  /* 8208A3C4h */ case   89:  		/* vperm VR50, VR50, VR51, VR0 */
		/* 8208A3C4h case   89:*/		cpu::op::vperm<0>(regs,&regs.VR50,regs.VR50,regs.VR51,regs.VR0);
		/* 8208A3C4h case   89:*/		return 0x8208A3C8;
		  /* 8208A3C8h */ case   90:  		/* vperm VR51, VR51, VR52, VR0 */
		/* 8208A3C8h case   90:*/		cpu::op::vperm<0>(regs,&regs.VR51,regs.VR51,regs.VR52,regs.VR0);
		/* 8208A3C8h case   90:*/		return 0x8208A3CC;
		  /* 8208A3CCh */ case   91:  		/* vperm VR52, VR52, VR53, VR0 */
		/* 8208A3CCh case   91:*/		cpu::op::vperm<0>(regs,&regs.VR52,regs.VR52,regs.VR53,regs.VR0);
		/* 8208A3CCh case   91:*/		return 0x8208A3D0;
		  /* 8208A3D0h */ case   92:  		/* vperm VR53, VR53, VR54, VR0 */
		/* 8208A3D0h case   92:*/		cpu::op::vperm<0>(regs,&regs.VR53,regs.VR53,regs.VR54,regs.VR0);
		/* 8208A3D0h case   92:*/		return 0x8208A3D4;
		  /* 8208A3D4h */ case   93:  		/* vperm VR54, VR54, VR55, VR0 */
		/* 8208A3D4h case   93:*/		cpu::op::vperm<0>(regs,&regs.VR54,regs.VR54,regs.VR55,regs.VR0);
		/* 8208A3D4h case   93:*/		return 0x8208A3D8;
		  /* 8208A3D8h */ case   94:  		/* vperm VR55, VR55, VR56, VR0 */
		/* 8208A3D8h case   94:*/		cpu::op::vperm<0>(regs,&regs.VR55,regs.VR55,regs.VR56,regs.VR0);
		/* 8208A3D8h case   94:*/		return 0x8208A3DC;
		  /* 8208A3DCh */ case   95:  		/* stvlx VR48, <#[R3]> */
		/* 8208A3DCh case   95:*/		cpu::mem::stvlx( regs, regs.VR48, (uint32)(regs.R3 + 0x00000000) );
		/* 8208A3DCh case   95:*/		return 0x8208A3E0;
		  /* 8208A3E0h */ case   96:  		/* stvlx VR49, <#[R6 + R3]> */
		/* 8208A3E0h case   96:*/		cpu::mem::stvlx( regs, regs.VR49, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 8208A3E0h case   96:*/		return 0x8208A3E4;
		  /* 8208A3E4h */ case   97:  		/* stvlx VR50, <#[R7 + R3]> */
		/* 8208A3E4h case   97:*/		cpu::mem::stvlx( regs, regs.VR50, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 8208A3E4h case   97:*/		return 0x8208A3E8;
		  /* 8208A3E8h */ case   98:  		/* stvlx VR51, <#[R8 + R3]> */
		/* 8208A3E8h case   98:*/		cpu::mem::stvlx( regs, regs.VR51, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 8208A3E8h case   98:*/		return 0x8208A3EC;
		  /* 8208A3ECh */ case   99:  		/* stvlx VR52, <#[R9 + R3]> */
		/* 8208A3ECh case   99:*/		cpu::mem::stvlx( regs, regs.VR52, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 8208A3ECh case   99:*/		return 0x8208A3F0;
		  /* 8208A3F0h */ case  100:  		/* stvlx VR53, <#[R10 + R3]> */
		/* 8208A3F0h case  100:*/		cpu::mem::stvlx( regs, regs.VR53, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 8208A3F0h case  100:*/		return 0x8208A3F4;
		  /* 8208A3F4h */ case  101:  		/* stvlx VR54, <#[R11 + R3]> */
		/* 8208A3F4h case  101:*/		cpu::mem::stvlx( regs, regs.VR54, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8208A3F4h case  101:*/		return 0x8208A3F8;
		  /* 8208A3F8h */ case  102:  		/* stvlx VR55, <#[R12 + R3]> */
		/* 8208A3F8h case  102:*/		cpu::mem::stvlx( regs, regs.VR55, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 8208A3F8h case  102:*/		return 0x8208A3FC;
		  /* 8208A3FCh */ case  103:  		/* dcbf R0, R3 */
		/* 8208A3FCh case  103:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R3);
		/* 8208A3FCh case  103:*/		return 0x8208A400;
		  /* 8208A400h */ case  104:  		/* addi R3, R3, 128 */
		/* 8208A400h case  104:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 8208A400h case  104:*/		return 0x8208A404;
		  /* 8208A404h */ case  105:  		/* vperm VR56, VR56, VR57, VR0 */
		/* 8208A404h case  105:*/		cpu::op::vperm<0>(regs,&regs.VR56,regs.VR56,regs.VR57,regs.VR0);
		/* 8208A404h case  105:*/		return 0x8208A408;
		  /* 8208A408h */ case  106:  		/* vperm VR57, VR57, VR58, VR0 */
		/* 8208A408h case  106:*/		cpu::op::vperm<0>(regs,&regs.VR57,regs.VR57,regs.VR58,regs.VR0);
		/* 8208A408h case  106:*/		return 0x8208A40C;
		  /* 8208A40Ch */ case  107:  		/* vperm VR58, VR58, VR59, VR0 */
		/* 8208A40Ch case  107:*/		cpu::op::vperm<0>(regs,&regs.VR58,regs.VR58,regs.VR59,regs.VR0);
		/* 8208A40Ch case  107:*/		return 0x8208A410;
		  /* 8208A410h */ case  108:  		/* vperm VR59, VR59, VR60, VR0 */
		/* 8208A410h case  108:*/		cpu::op::vperm<0>(regs,&regs.VR59,regs.VR59,regs.VR60,regs.VR0);
		/* 8208A410h case  108:*/		return 0x8208A414;
		  /* 8208A414h */ case  109:  		/* vperm VR60, VR60, VR61, VR0 */
		/* 8208A414h case  109:*/		cpu::op::vperm<0>(regs,&regs.VR60,regs.VR60,regs.VR61,regs.VR0);
		/* 8208A414h case  109:*/		return 0x8208A418;
		  /* 8208A418h */ case  110:  		/* vperm VR61, VR61, VR62, VR0 */
		/* 8208A418h case  110:*/		cpu::op::vperm<0>(regs,&regs.VR61,regs.VR61,regs.VR62,regs.VR0);
		/* 8208A418h case  110:*/		return 0x8208A41C;
		  /* 8208A41Ch */ case  111:  		/* vperm VR62, VR62, VR63, VR0 */
		/* 8208A41Ch case  111:*/		cpu::op::vperm<0>(regs,&regs.VR62,regs.VR62,regs.VR63,regs.VR0);
		/* 8208A41Ch case  111:*/		return 0x8208A420;
		  /* 8208A420h */ case  112:  		/* vperm VR63, VR63, VR64, VR0 */
		/* 8208A420h case  112:*/		cpu::op::vperm<0>(regs,&regs.VR63,regs.VR63,regs.VR64,regs.VR0);
		/* 8208A420h case  112:*/		return 0x8208A424;
		  /* 8208A424h */ case  113:  		/* stvlx VR56, <#[R3]> */
		/* 8208A424h case  113:*/		cpu::mem::stvlx( regs, regs.VR56, (uint32)(regs.R3 + 0x00000000) );
		/* 8208A424h case  113:*/		return 0x8208A428;
		  /* 8208A428h */ case  114:  		/* stvlx VR57, <#[R6 + R3]> */
		/* 8208A428h case  114:*/		cpu::mem::stvlx( regs, regs.VR57, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 8208A428h case  114:*/		return 0x8208A42C;
		  /* 8208A42Ch */ case  115:  		/* stvlx VR58, <#[R7 + R3]> */
		/* 8208A42Ch case  115:*/		cpu::mem::stvlx( regs, regs.VR58, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 8208A42Ch case  115:*/		return 0x8208A430;
		  /* 8208A430h */ case  116:  		/* stvlx VR59, <#[R8 + R3]> */
		/* 8208A430h case  116:*/		cpu::mem::stvlx( regs, regs.VR59, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 8208A430h case  116:*/		return 0x8208A434;
		  /* 8208A434h */ case  117:  		/* stvlx VR60, <#[R9 + R3]> */
		/* 8208A434h case  117:*/		cpu::mem::stvlx( regs, regs.VR60, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 8208A434h case  117:*/		return 0x8208A438;
		  /* 8208A438h */ case  118:  		/* stvlx VR61, <#[R10 + R3]> */
		/* 8208A438h case  118:*/		cpu::mem::stvlx( regs, regs.VR61, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 8208A438h case  118:*/		return 0x8208A43C;
		  /* 8208A43Ch */ case  119:  		/* stvlx VR62, <#[R11 + R3]> */
		/* 8208A43Ch case  119:*/		cpu::mem::stvlx( regs, regs.VR62, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8208A43Ch case  119:*/		return 0x8208A440;
		  /* 8208A440h */ case  120:  		/* stvlx VR63, <#[R12 + R3]> */
		/* 8208A440h case  120:*/		cpu::mem::stvlx( regs, regs.VR63, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 8208A440h case  120:*/		return 0x8208A444;
		  /* 8208A444h */ case  121:  		/* mr VR65, VR64 */
		/* 8208A444h case  121:*/		regs.VR65 = regs.VR64;
		/* 8208A444h case  121:*/		return 0x8208A448;
		  /* 8208A448h */ case  122:  		/* addi R3, R3, 128 */
		/* 8208A448h case  122:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 8208A448h case  122:*/		return 0x8208A44C;
		  /* 8208A44Ch */ case  123:  		/* addi R5, R5, -1024 */
		/* 8208A44Ch case  123:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0xFFFFFC00);
		/* 8208A44Ch case  123:*/		return 0x8208A450;
		  /* 8208A450h */ case  124:  		/* cmplwi CR6, R5, 1024 */
		/* 8208A450h case  124:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000400);
		/* 8208A450h case  124:*/		return 0x8208A454;
		  /* 8208A454h */ case  125:  		/* bc 4, CR6_LT, -1000 */
		/* 8208A454h case  125:*/		if ( !regs.CR[6].lt ) { return 0x8208A06C;  }
		/* 8208A454h case  125:*/		return 0x8208A458;
		  /* 8208A458h */ case  126:  		/* cmplwi CR6, R5, 0 */
		/* 8208A458h case  126:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8208A458h case  126:*/		return 0x8208A45C;
		  /* 8208A45Ch */ case  127:  		/* bc 4, CR6_EQ, 8 */
		/* 8208A45Ch case  127:*/		if ( !regs.CR[6].eq ) { return 0x8208A464;  }
		/* 8208A45Ch case  127:*/		return 0x8208A460;
		  /* 8208A460h */ case  128:  		/* b 132 */
		/* 8208A460h case  128:*/		return 0x8208A4E4;
		/* 8208A460h case  128:*/		return 0x8208A464;
	}
	return 0x8208A464;
} // Block from 8208A260h-8208A464h (129 instructions)

//////////////////////////////////////////////////////
// Block at 8208A464h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A464( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A464) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A464);
		  /* 8208A464h */ case    0:  		/* lvx VR1, <#[R4]> */
		/* 8208A464h case    0:*/		cpu::mem::lvx( regs, &regs.VR1, (uint32)(regs.R4 + 0x00000000) );
		/* 8208A464h case    0:*/		return 0x8208A468;
		  /* 8208A468h */ case    1:  		/* lvx VR2, <#[R6 + R4]> */
		/* 8208A468h case    1:*/		cpu::mem::lvx( regs, &regs.VR2, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 8208A468h case    1:*/		return 0x8208A46C;
		  /* 8208A46Ch */ case    2:  		/* lvx VR3, <#[R7 + R4]> */
		/* 8208A46Ch case    2:*/		cpu::mem::lvx( regs, &regs.VR3, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 8208A46Ch case    2:*/		return 0x8208A470;
		  /* 8208A470h */ case    3:  		/* lvx VR4, <#[R8 + R4]> */
		/* 8208A470h case    3:*/		cpu::mem::lvx( regs, &regs.VR4, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 8208A470h case    3:*/		return 0x8208A474;
		  /* 8208A474h */ case    4:  		/* lvx VR5, <#[R9 + R4]> */
		/* 8208A474h case    4:*/		cpu::mem::lvx( regs, &regs.VR5, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 8208A474h case    4:*/		return 0x8208A478;
		  /* 8208A478h */ case    5:  		/* lvx VR6, <#[R10 + R4]> */
		/* 8208A478h case    5:*/		cpu::mem::lvx( regs, &regs.VR6, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8208A478h case    5:*/		return 0x8208A47C;
		  /* 8208A47Ch */ case    6:  		/* lvx VR7, <#[R11 + R4]> */
		/* 8208A47Ch case    6:*/		cpu::mem::lvx( regs, &regs.VR7, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 8208A47Ch case    6:*/		return 0x8208A480;
		  /* 8208A480h */ case    7:  		/* lvx VR8, <#[R12 + R4]> */
		/* 8208A480h case    7:*/		cpu::mem::lvx( regs, &regs.VR8, (uint32)(regs.R12 + regs.R4 + 0x00000000) );
		/* 8208A480h case    7:*/		return 0x8208A484;
		  /* 8208A484h */ case    8:  		/* dcbf R0, R4 */
		/* 8208A484h case    8:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R4);
		/* 8208A484h case    8:*/		return 0x8208A488;
		  /* 8208A488h */ case    9:  		/* addi R4, R4, 128 */
		/* 8208A488h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 8208A488h case    9:*/		return 0x8208A48C;
		  /* 8208A48Ch */ case   10:  		/* vperm VR65, VR65, VR1, VR0 */
		/* 8208A48Ch case   10:*/		cpu::op::vperm<0>(regs,&regs.VR65,regs.VR65,regs.VR1,regs.VR0);
		/* 8208A48Ch case   10:*/		return 0x8208A490;
		  /* 8208A490h */ case   11:  		/* vperm VR1, VR1, VR2, VR0 */
		/* 8208A490h case   11:*/		cpu::op::vperm<0>(regs,&regs.VR1,regs.VR1,regs.VR2,regs.VR0);
		/* 8208A490h case   11:*/		return 0x8208A494;
		  /* 8208A494h */ case   12:  		/* vperm VR2, VR2, VR3, VR0 */
		/* 8208A494h case   12:*/		cpu::op::vperm<0>(regs,&regs.VR2,regs.VR2,regs.VR3,regs.VR0);
		/* 8208A494h case   12:*/		return 0x8208A498;
		  /* 8208A498h */ case   13:  		/* vperm VR3, VR3, VR4, VR0 */
		/* 8208A498h case   13:*/		cpu::op::vperm<0>(regs,&regs.VR3,regs.VR3,regs.VR4,regs.VR0);
		/* 8208A498h case   13:*/		return 0x8208A49C;
		  /* 8208A49Ch */ case   14:  		/* vperm VR4, VR4, VR5, VR0 */
		/* 8208A49Ch case   14:*/		cpu::op::vperm<0>(regs,&regs.VR4,regs.VR4,regs.VR5,regs.VR0);
		/* 8208A49Ch case   14:*/		return 0x8208A4A0;
		  /* 8208A4A0h */ case   15:  		/* vperm VR5, VR5, VR6, VR0 */
		/* 8208A4A0h case   15:*/		cpu::op::vperm<0>(regs,&regs.VR5,regs.VR5,regs.VR6,regs.VR0);
		/* 8208A4A0h case   15:*/		return 0x8208A4A4;
		  /* 8208A4A4h */ case   16:  		/* vperm VR6, VR6, VR7, VR0 */
		/* 8208A4A4h case   16:*/		cpu::op::vperm<0>(regs,&regs.VR6,regs.VR6,regs.VR7,regs.VR0);
		/* 8208A4A4h case   16:*/		return 0x8208A4A8;
		  /* 8208A4A8h */ case   17:  		/* vperm VR7, VR7, VR8, VR0 */
		/* 8208A4A8h case   17:*/		cpu::op::vperm<0>(regs,&regs.VR7,regs.VR7,regs.VR8,regs.VR0);
		/* 8208A4A8h case   17:*/		return 0x8208A4AC;
		  /* 8208A4ACh */ case   18:  		/* stvlx VR65, <#[R3]> */
		/* 8208A4ACh case   18:*/		cpu::mem::stvlx( regs, regs.VR65, (uint32)(regs.R3 + 0x00000000) );
		/* 8208A4ACh case   18:*/		return 0x8208A4B0;
		  /* 8208A4B0h */ case   19:  		/* stvlx VR1, <#[R6 + R3]> */
		/* 8208A4B0h case   19:*/		cpu::mem::stvlx( regs, regs.VR1, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 8208A4B0h case   19:*/		return 0x8208A4B4;
		  /* 8208A4B4h */ case   20:  		/* stvlx VR2, <#[R7 + R3]> */
		/* 8208A4B4h case   20:*/		cpu::mem::stvlx( regs, regs.VR2, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 8208A4B4h case   20:*/		return 0x8208A4B8;
		  /* 8208A4B8h */ case   21:  		/* stvlx VR3, <#[R8 + R3]> */
		/* 8208A4B8h case   21:*/		cpu::mem::stvlx( regs, regs.VR3, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 8208A4B8h case   21:*/		return 0x8208A4BC;
		  /* 8208A4BCh */ case   22:  		/* stvlx VR4, <#[R9 + R3]> */
		/* 8208A4BCh case   22:*/		cpu::mem::stvlx( regs, regs.VR4, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 8208A4BCh case   22:*/		return 0x8208A4C0;
		  /* 8208A4C0h */ case   23:  		/* stvlx VR5, <#[R10 + R3]> */
		/* 8208A4C0h case   23:*/		cpu::mem::stvlx( regs, regs.VR5, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 8208A4C0h case   23:*/		return 0x8208A4C4;
		  /* 8208A4C4h */ case   24:  		/* stvlx VR6, <#[R11 + R3]> */
		/* 8208A4C4h case   24:*/		cpu::mem::stvlx( regs, regs.VR6, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8208A4C4h case   24:*/		return 0x8208A4C8;
		  /* 8208A4C8h */ case   25:  		/* stvlx VR7, <#[R12 + R3]> */
		/* 8208A4C8h case   25:*/		cpu::mem::stvlx( regs, regs.VR7, (uint32)(regs.R12 + regs.R3 + 0x00000000) );
		/* 8208A4C8h case   25:*/		return 0x8208A4CC;
		  /* 8208A4CCh */ case   26:  		/* mr VR65, VR8 */
		/* 8208A4CCh case   26:*/		regs.VR65 = regs.VR8;
		/* 8208A4CCh case   26:*/		return 0x8208A4D0;
		  /* 8208A4D0h */ case   27:  		/* dcbf R0, R3 */
		/* 8208A4D0h case   27:*/		cpu::op::dcbf<0>(regs,&regs.R0,regs.R3);
		/* 8208A4D0h case   27:*/		return 0x8208A4D4;
		  /* 8208A4D4h */ case   28:  		/* addi R3, R3, 128 */
		/* 8208A4D4h case   28:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 8208A4D4h case   28:*/		return 0x8208A4D8;
		  /* 8208A4D8h */ case   29:  		/* addi R5, R5, -128 */
		/* 8208A4D8h case   29:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0xFFFFFF80);
		/* 8208A4D8h case   29:*/		return 0x8208A4DC;
		  /* 8208A4DCh */ case   30:  		/* cmplwi CR6, R5, 0 */
		/* 8208A4DCh case   30:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8208A4DCh case   30:*/		return 0x8208A4E0;
		  /* 8208A4E0h */ case   31:  		/* bc 12, CR6_GT, -124 */
		/* 8208A4E0h case   31:*/		if ( regs.CR[6].gt ) { return 0x8208A464;  }
		/* 8208A4E0h case   31:*/		return 0x8208A4E4;
	}
	return 0x8208A4E4;
} // Block from 8208A464h-8208A4E4h (32 instructions)

//////////////////////////////////////////////////////
// Block at 8208A4E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A4E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A4E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A4E4);
		  /* 8208A4E4h */ case    0:  		/* li R6, -32 */
		/* 8208A4E4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0xFFFFFFE0);
		/* 8208A4E4h case    0:*/		return 0x8208A4E8;
		  /* 8208A4E8h */ case    1:  		/* li R7, -48 */
		/* 8208A4E8h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0xFFFFFFD0);
		/* 8208A4E8h case    1:*/		return 0x8208A4EC;
		  /* 8208A4ECh */ case    2:  		/* lvx VR64, <#[R1 + R6]> */
		/* 8208A4ECh case    2:*/		cpu::mem::lvx( regs, &regs.VR64, (uint32)(regs.R1 + regs.R6 + 0x00000000) );
		/* 8208A4ECh case    2:*/		return 0x8208A4F0;
		  /* 8208A4F0h */ case    3:  		/* lvx VR65, <#[R1 + R7]> */
		/* 8208A4F0h case    3:*/		cpu::mem::lvx( regs, &regs.VR65, (uint32)(regs.R1 + regs.R7 + 0x00000000) );
		/* 8208A4F0h case    3:*/		return 0x8208A4F4;
		  /* 8208A4F4h */ case    4:  		/* ld R30, <#[R1 - 16]> */
		/* 8208A4F4h case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8208A4F4h case    4:*/		return 0x8208A4F8;
		  /* 8208A4F8h */ case    5:  		/* ld R31, <#[R1 - 8]> */
		/* 8208A4F8h case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208A4F8h case    5:*/		return 0x8208A4FC;
		  /* 8208A4FCh */ case    6:  		/* bclr 20, CR0_LT */
		/* 8208A4FCh case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8208A4FCh case    6:*/		return 0x8208A500;
	}
	return 0x8208A500;
} // Block from 8208A4E4h-8208A500h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8208A500h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A500);
		  /* 8208A500h */ case    0:  		/* li R6, 16 */
		/* 8208A500h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x10);
		/* 8208A500h case    0:*/		return 0x8208A504;
		  /* 8208A504h */ case    1:  		/* li R7, 32 */
		/* 8208A504h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x20);
		/* 8208A504h case    1:*/		return 0x8208A508;
		  /* 8208A508h */ case    2:  		/* li R8, 48 */
		/* 8208A508h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x30);
		/* 8208A508h case    2:*/		return 0x8208A50C;
		  /* 8208A50Ch */ case    3:  		/* li R9, 63 */
		/* 8208A50Ch case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x3F);
		/* 8208A50Ch case    3:*/		return 0x8208A510;
		  /* 8208A510h */ case    4:  		/* li R10, 1024 */
		/* 8208A510h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x400);
		/* 8208A510h case    4:*/		return 0x8208A514;
		  /* 8208A514h */ case    5:  		/* li R12, 128 */
		/* 8208A514h case    5:*/		cpu::op::li<0>(regs,&regs.R12,0x80);
		/* 8208A514h case    5:*/		return 0x8208A518;
		  /* 8208A518h */ case    6:  		/* cmplwi CR0, R5, 128 */
		/* 8208A518h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R5,0x00000080);
		/* 8208A518h case    6:*/		return 0x8208A51C;
		  /* 8208A51Ch */ case    7:  		/* lvsl VR0, R0, R4 */
		/* 8208A51Ch case    7:*/		cpu::op::lvsl<0>(regs,&regs.VR0,regs.R0,regs.R4);
		/* 8208A51Ch case    7:*/		return 0x8208A520;
		  /* 8208A520h */ case    8:  		/* bclr 12, CR0_LT */
		/* 8208A520h case    8:*/		if ( regs.CR[0].lt ) { return (uint32)regs.LR; }
		/* 8208A520h case    8:*/		return 0x8208A524;
	}
	return 0x8208A524;
} // Block from 8208A500h-8208A524h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8208A524h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A524( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A524) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A524);
		  /* 8208A524h */ case    0:  		/* cmplwi CR7, R5, 256 */
		/* 8208A524h case    0:*/		cpu::op::cmplwi<7>(regs,regs.R5,0x00000100);
		/* 8208A524h case    0:*/		return 0x8208A528;
		  /* 8208A528h */ case    1:  		/* cmplwi CR0, R5, 1024 */
		/* 8208A528h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R5,0x00000400);
		/* 8208A528h case    1:*/		return 0x8208A52C;
		  /* 8208A52Ch */ case    2:  		/* bc 12, CR7_LT, 16 */
		/* 8208A52Ch case    2:*/		if ( regs.CR[7].lt ) { return 0x8208A53C;  }
		/* 8208A52Ch case    2:*/		return 0x8208A530;
		  /* 8208A530h */ case    3:  		/* bc 4, CR0_GT, 8 */
		/* 8208A530h case    3:*/		if ( !regs.CR[0].gt ) { return 0x8208A538;  }
		/* 8208A530h case    3:*/		return 0x8208A534;
		  /* 8208A534h */ case    4:  		/* dcbt R10, R4 */
		/* 8208A534h case    4:*/		cpu::op::dcbt<0>(regs,&regs.R10,regs.R4);
		/* 8208A534h case    4:*/		return 0x8208A538;
	}
	return 0x8208A538;
} // Block from 8208A524h-8208A538h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8208A538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A538);
		  /* 8208A538h */ case    0:  		/* dcbz <#[R12 + R3]> */
		/* 8208A538h case    0:*/		cpu::op::dcbz<0>(regs, regs.R12 + regs.R3 + 0x00000000);
		/* 8208A538h case    0:*/		return 0x8208A53C;
	}
	return 0x8208A53C;
} // Block from 8208A538h-8208A53Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8208A53Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A53C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A53C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A53C);
		  /* 8208A53Ch */ case    0:  		/* lvx VR1, <#[R4]> */
		/* 8208A53Ch case    0:*/		cpu::mem::lvx( regs, &regs.VR1, (uint32)(regs.R4 + 0x00000000) );
		/* 8208A53Ch case    0:*/		return 0x8208A540;
		  /* 8208A540h */ case    1:  		/* addi R11, R4, 64 */
		/* 8208A540h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0x40);
		/* 8208A540h case    1:*/		return 0x8208A544;
		  /* 8208A544h */ case    2:  		/* lvx VR2, <#[R6 + R4]> */
		/* 8208A544h case    2:*/		cpu::mem::lvx( regs, &regs.VR2, (uint32)(regs.R6 + regs.R4 + 0x00000000) );
		/* 8208A544h case    2:*/		return 0x8208A548;
		  /* 8208A548h */ case    3:  		/* lvx VR3, <#[R7 + R4]> */
		/* 8208A548h case    3:*/		cpu::mem::lvx( regs, &regs.VR3, (uint32)(regs.R7 + regs.R4 + 0x00000000) );
		/* 8208A548h case    3:*/		return 0x8208A54C;
		  /* 8208A54Ch */ case    4:  		/* vperm VR1, VR1, VR2, VR0 */
		/* 8208A54Ch case    4:*/		cpu::op::vperm<0>(regs,&regs.VR1,regs.VR1,regs.VR2,regs.VR0);
		/* 8208A54Ch case    4:*/		return 0x8208A550;
		  /* 8208A550h */ case    5:  		/* lvx VR4, <#[R8 + R4]> */
		/* 8208A550h case    5:*/		cpu::mem::lvx( regs, &regs.VR4, (uint32)(regs.R8 + regs.R4 + 0x00000000) );
		/* 8208A550h case    5:*/		return 0x8208A554;
		  /* 8208A554h */ case    6:  		/* vperm VR2, VR2, VR3, VR0 */
		/* 8208A554h case    6:*/		cpu::op::vperm<0>(regs,&regs.VR2,regs.VR2,regs.VR3,regs.VR0);
		/* 8208A554h case    6:*/		return 0x8208A558;
		  /* 8208A558h */ case    7:  		/* lvx VR5, <#[R11]> */
		/* 8208A558h case    7:*/		cpu::mem::lvx( regs, &regs.VR5, (uint32)(regs.R11 + 0x00000000) );
		/* 8208A558h case    7:*/		return 0x8208A55C;
		  /* 8208A55Ch */ case    8:  		/* vperm VR3, VR3, VR4, VR0 */
		/* 8208A55Ch case    8:*/		cpu::op::vperm<0>(regs,&regs.VR3,regs.VR3,regs.VR4,regs.VR0);
		/* 8208A55Ch case    8:*/		return 0x8208A560;
		  /* 8208A560h */ case    9:  		/* lvx VR6, <#[R6 + R11]> */
		/* 8208A560h case    9:*/		cpu::mem::lvx( regs, &regs.VR6, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 8208A560h case    9:*/		return 0x8208A564;
		  /* 8208A564h */ case   10:  		/* vperm VR4, VR4, VR5, VR0 */
		/* 8208A564h case   10:*/		cpu::op::vperm<0>(regs,&regs.VR4,regs.VR4,regs.VR5,regs.VR0);
		/* 8208A564h case   10:*/		return 0x8208A568;
		  /* 8208A568h */ case   11:  		/* lvx VR7, <#[R7 + R11]> */
		/* 8208A568h case   11:*/		cpu::mem::lvx( regs, &regs.VR7, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 8208A568h case   11:*/		return 0x8208A56C;
		  /* 8208A56Ch */ case   12:  		/* vperm VR5, VR5, VR6, VR0 */
		/* 8208A56Ch case   12:*/		cpu::op::vperm<0>(regs,&regs.VR5,regs.VR5,regs.VR6,regs.VR0);
		/* 8208A56Ch case   12:*/		return 0x8208A570;
		  /* 8208A570h */ case   13:  		/* lvx VR8, <#[R8 + R11]> */
		/* 8208A570h case   13:*/		cpu::mem::lvx( regs, &regs.VR8, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 8208A570h case   13:*/		return 0x8208A574;
		  /* 8208A574h */ case   14:  		/* vperm VR6, VR6, VR7, VR0 */
		/* 8208A574h case   14:*/		cpu::op::vperm<0>(regs,&regs.VR6,regs.VR6,regs.VR7,regs.VR0);
		/* 8208A574h case   14:*/		return 0x8208A578;
		  /* 8208A578h */ case   15:  		/* lvx VR9, <#[R9 + R11]> */
		/* 8208A578h case   15:*/		cpu::mem::lvx( regs, &regs.VR9, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 8208A578h case   15:*/		return 0x8208A57C;
		  /* 8208A57Ch */ case   16:  		/* vperm VR7, VR7, VR8, VR0 */
		/* 8208A57Ch case   16:*/		cpu::op::vperm<0>(regs,&regs.VR7,regs.VR7,regs.VR8,regs.VR0);
		/* 8208A57Ch case   16:*/		return 0x8208A580;
		  /* 8208A580h */ case   17:  		/* stvx VR1, <#[R3]> */
		/* 8208A580h case   17:*/		cpu::mem::stvx( regs, regs.VR1, (uint32)(regs.R3 + 0x00000000) );
		/* 8208A580h case   17:*/		return 0x8208A584;
		  /* 8208A584h */ case   18:  		/* vperm VR8, VR8, VR9, VR0 */
		/* 8208A584h case   18:*/		cpu::op::vperm<0>(regs,&regs.VR8,regs.VR8,regs.VR9,regs.VR0);
		/* 8208A584h case   18:*/		return 0x8208A588;
		  /* 8208A588h */ case   19:  		/* stvx VR2, <#[R6 + R3]> */
		/* 8208A588h case   19:*/		cpu::mem::stvx( regs, regs.VR2, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 8208A588h case   19:*/		return 0x8208A58C;
		  /* 8208A58Ch */ case   20:  		/* addi R11, R3, 64 */
		/* 8208A58Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x40);
		/* 8208A58Ch case   20:*/		return 0x8208A590;
		  /* 8208A590h */ case   21:  		/* stvx VR3, <#[R7 + R3]> */
		/* 8208A590h case   21:*/		cpu::mem::stvx( regs, regs.VR3, (uint32)(regs.R7 + regs.R3 + 0x00000000) );
		/* 8208A590h case   21:*/		return 0x8208A594;
		  /* 8208A594h */ case   22:  		/* addi R4, R4, 128 */
		/* 8208A594h case   22:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x80);
		/* 8208A594h case   22:*/		return 0x8208A598;
		  /* 8208A598h */ case   23:  		/* stvx VR4, <#[R8 + R3]> */
		/* 8208A598h case   23:*/		cpu::mem::stvx( regs, regs.VR4, (uint32)(regs.R8 + regs.R3 + 0x00000000) );
		/* 8208A598h case   23:*/		return 0x8208A59C;
		  /* 8208A59Ch */ case   24:  		/* addi R3, R3, 128 */
		/* 8208A59Ch case   24:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x80);
		/* 8208A59Ch case   24:*/		return 0x8208A5A0;
		  /* 8208A5A0h */ case   25:  		/* stvx VR5, <#[R11]> */
		/* 8208A5A0h case   25:*/		cpu::mem::stvx( regs, regs.VR5, (uint32)(regs.R11 + 0x00000000) );
		/* 8208A5A0h case   25:*/		return 0x8208A5A4;
		  /* 8208A5A4h */ case   26:  		/* addi R5, R5, -128 */
		/* 8208A5A4h case   26:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0xFFFFFF80);
		/* 8208A5A4h case   26:*/		return 0x8208A5A8;
		  /* 8208A5A8h */ case   27:  		/* stvx VR6, <#[R6 + R11]> */
		/* 8208A5A8h case   27:*/		cpu::mem::stvx( regs, regs.VR6, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 8208A5A8h case   27:*/		return 0x8208A5AC;
		  /* 8208A5ACh */ case   28:  		/* cmplwi CR0, R5, 128 */
		/* 8208A5ACh case   28:*/		cpu::op::cmplwi<0>(regs,regs.R5,0x00000080);
		/* 8208A5ACh case   28:*/		return 0x8208A5B0;
		  /* 8208A5B0h */ case   29:  		/* stvx VR7, <#[R7 + R11]> */
		/* 8208A5B0h case   29:*/		cpu::mem::stvx( regs, regs.VR7, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 8208A5B0h case   29:*/		return 0x8208A5B4;
		  /* 8208A5B4h */ case   30:  		/* stvx VR8, <#[R8 + R11]> */
		/* 8208A5B4h case   30:*/		cpu::mem::stvx( regs, regs.VR8, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 8208A5B4h case   30:*/		return 0x8208A5B8;
		  /* 8208A5B8h */ case   31:  		/* bc 4, CR0_LT, -148 */
		/* 8208A5B8h case   31:*/		if ( !regs.CR[0].lt ) { return 0x8208A524;  }
		/* 8208A5B8h case   31:*/		return 0x8208A5BC;
		  /* 8208A5BCh */ case   32:  		/* bclr 20, CR0_LT */
		/* 8208A5BCh case   32:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8208A5BCh case   32:*/		return 0x8208A5C0;
	}
	return 0x8208A5C0;
} // Block from 8208A53Ch-8208A5C0h (33 instructions)

//////////////////////////////////////////////////////
// Block at 8208A5C0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A5C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A5C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A5C0);
		  /* 8208A5C0h */ case    0:  		/* mr R11, R4 */
		/* 8208A5C0h case    0:*/		regs.R11 = regs.R4;
		/* 8208A5C0h case    0:*/		return 0x8208A5C4;
		  /* 8208A5C4h */ case    1:  		/* mr R4, R3 */
		/* 8208A5C4h case    1:*/		regs.R4 = regs.R3;
		/* 8208A5C4h case    1:*/		return 0x8208A5C8;
		  /* 8208A5C8h */ case    2:  		/* rlwinm R3, R11, 8, 25, 25 */
		/* 8208A5C8h case    2:*/		cpu::op::rlwinm<0,8,25,25>(regs,&regs.R3,regs.R11);
		/* 8208A5C8h case    2:*/		return 0x8208A5CC;
		  /* 8208A5CCh */ case    3:  		/* b 13852 */
		/* 8208A5CCh case    3:*/		return 0x8208DBE8;
		/* 8208A5CCh case    3:*/		return 0x8208A5D0;
	}
	return 0x8208A5D0;
} // Block from 8208A5C0h-8208A5D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8208A5D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A5D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A5D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A5D0);
		  /* 8208A5D0h */ case    0:  		/* b 13920 */
		/* 8208A5D0h case    0:*/		return 0x8208DC30;
		/* 8208A5D0h case    0:*/		return 0x8208A5D4;
		  /* 8208A5D4h */ case    1:  		/* nop */
		/* 8208A5D4h case    1:*/		cpu::op::nop();
		/* 8208A5D4h case    1:*/		return 0x8208A5D8;
	}
	return 0x8208A5D8;
} // Block from 8208A5D0h-8208A5D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8208A5D8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A5D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A5D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A5D8);
		  /* 8208A5D8h */ case    0:  		/* mfspr R12, LR */
		/* 8208A5D8h case    0:*/		regs.R12 = regs.LR;
		/* 8208A5D8h case    0:*/		return 0x8208A5DC;
		  /* 8208A5DCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8208A5DCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208A5DCh case    1:*/		return 0x8208A5E0;
		  /* 8208A5E0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8208A5E0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8208A5E0h case    2:*/		return 0x8208A5E4;
		  /* 8208A5E4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8208A5E4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8208A5E4h case    3:*/		return 0x8208A5E8;
		  /* 8208A5E8h */ case    4:  		/* lis R11, -32215 */
		/* 8208A5E8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 8208A5E8h case    4:*/		return 0x8208A5EC;
		  /* 8208A5ECh */ case    5:  		/* mr R8, R5 */
		/* 8208A5ECh case    5:*/		regs.R8 = regs.R5;
		/* 8208A5ECh case    5:*/		return 0x8208A5F0;
		  /* 8208A5F0h */ case    6:  		/* mr R5, R6 */
		/* 8208A5F0h case    6:*/		regs.R5 = regs.R6;
		/* 8208A5F0h case    6:*/		return 0x8208A5F4;
		  /* 8208A5F4h */ case    7:  		/* lwz R11, <#[R11 - 31260]> */
		/* 8208A5F4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0xFFFF85E4) );
		/* 8208A5F4h case    7:*/		return 0x8208A5F8;
		  /* 8208A5F8h */ case    8:  		/* cmpwi CR6, R11, 0 */
		/* 8208A5F8h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8208A5F8h case    8:*/		return 0x8208A5FC;
		  /* 8208A5FCh */ case    9:  		/* bc 12, CR6_EQ, 8 */
		/* 8208A5FCh case    9:*/		if ( regs.CR[6].eq ) { return 0x8208A604;  }
		/* 8208A5FCh case    9:*/		return 0x8208A600;
		  /* 8208A600h */ case   10:  		/* rlwinm R5, R5, 0, 3, 1 */
		/* 8208A600h case   10:*/		cpu::op::rlwinm<0,0,3,1>(regs,&regs.R5,regs.R5);
		/* 8208A600h case   10:*/		return 0x8208A604;
	}
	return 0x8208A604;
} // Block from 8208A5D8h-8208A604h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8208A604h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A604( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A604) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A604);
		  /* 8208A604h */ case    0:  		/* cmpwi CR6, R4, -1 */
		/* 8208A604h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R4,0xFFFFFFFF);
		/* 8208A604h case    0:*/		return 0x8208A608;
		  /* 8208A608h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 8208A608h case    1:*/		if ( regs.CR[6].eq ) { return 0x8208A620;  }
		/* 8208A608h case    1:*/		return 0x8208A60C;
		  /* 8208A60Ch */ case    2:  		/* add R11, R3, R4 */
		/* 8208A60Ch case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R4);
		/* 8208A60Ch case    2:*/		return 0x8208A610;
		  /* 8208A610h */ case    3:  		/* mr R6, R4 */
		/* 8208A610h case    3:*/		regs.R6 = regs.R4;
		/* 8208A610h case    3:*/		return 0x8208A614;
		  /* 8208A614h */ case    4:  		/* addi R7, R11, -1 */
		/* 8208A614h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFFF);
		/* 8208A614h case    4:*/		return 0x8208A618;
		  /* 8208A618h */ case    5:  		/* li R8, 0 */
		/* 8208A618h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8208A618h case    5:*/		return 0x8208A61C;
		  /* 8208A61Ch */ case    6:  		/* b 12 */
		/* 8208A61Ch case    6:*/		return 0x8208A628;
		/* 8208A61Ch case    6:*/		return 0x8208A620;
	}
	return 0x8208A620;
} // Block from 8208A604h-8208A620h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8208A620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A620);
		  /* 8208A620h */ case    0:  		/* li R6, 0 */
		/* 8208A620h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8208A620h case    0:*/		return 0x8208A624;
		  /* 8208A624h */ case    1:  		/* li R7, -1 */
		/* 8208A624h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0xFFFFFFFF);
		/* 8208A624h case    1:*/		return 0x8208A628;
	}
	return 0x8208A628;
} // Block from 8208A620h-8208A628h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8208A628h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A628);
		  /* 8208A628h */ case    0:  		/* mr R4, R3 */
		/* 8208A628h case    0:*/		regs.R4 = regs.R3;
		/* 8208A628h case    0:*/		return 0x8208A62C;
		  /* 8208A62Ch */ case    1:  		/* li R3, 0 */
		/* 8208A62Ch case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8208A62Ch case    1:*/		return 0x8208A630;
		  /* 8208A630h */ case    2:  		/* bl 1977240 */
		/* 8208A630h case    2:*/		regs.LR = 0x8208A634; return 0x8226D1C8;
		/* 8208A630h case    2:*/		return 0x8208A634;
		  /* 8208A634h */ case    3:  		/* or. R31, R3, R3 */
		/* 8208A634h case    3:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8208A634h case    3:*/		return 0x8208A638;
		  /* 8208A638h */ case    4:  		/* bc 4, CR0_EQ, 12 */
		/* 8208A638h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8208A644;  }
		/* 8208A638h case    4:*/		return 0x8208A63C;
		  /* 8208A63Ch */ case    5:  		/* li R3, 8 */
		/* 8208A63Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x8);
		/* 8208A63Ch case    5:*/		return 0x8208A640;
		  /* 8208A640h */ case    6:  		/* bl 184 */
		/* 8208A640h case    6:*/		regs.LR = 0x8208A644; return 0x8208A6F8;
		/* 8208A640h case    6:*/		return 0x8208A644;
	}
	return 0x8208A644;
} // Block from 8208A628h-8208A644h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8208A644h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A644( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A644) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A644);
		  /* 8208A644h */ case    0:  		/* mr R3, R31 */
		/* 8208A644h case    0:*/		regs.R3 = regs.R31;
		/* 8208A644h case    0:*/		return 0x8208A648;
		  /* 8208A648h */ case    1:  		/* addi R1, R1, 96 */
		/* 8208A648h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8208A648h case    1:*/		return 0x8208A64C;
		  /* 8208A64Ch */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8208A64Ch case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208A64Ch case    2:*/		return 0x8208A650;
		  /* 8208A650h */ case    3:  		/* mtspr LR, R12 */
		/* 8208A650h case    3:*/		regs.LR = regs.R12;
		/* 8208A650h case    3:*/		return 0x8208A654;
		  /* 8208A654h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8208A654h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8208A654h case    4:*/		return 0x8208A658;
		  /* 8208A658h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8208A658h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8208A658h case    5:*/		return 0x8208A65C;
	}
	return 0x8208A65C;
} // Block from 8208A644h-8208A65Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8208A65Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A65C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A65C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A65C);
		  /* 8208A65Ch */ case    0:  		/* nop */
		/* 8208A65Ch case    0:*/		cpu::op::nop();
		/* 8208A65Ch case    0:*/		return 0x8208A660;
	}
	return 0x8208A660;
} // Block from 8208A65Ch-8208A660h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8208A660h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A660);
		  /* 8208A660h */ case    0:  		/* mfspr R12, LR */
		/* 8208A660h case    0:*/		regs.R12 = regs.LR;
		/* 8208A660h case    0:*/		return 0x8208A664;
		  /* 8208A664h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8208A664h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208A664h case    1:*/		return 0x8208A668;
		  /* 8208A668h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8208A668h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8208A668h case    2:*/		return 0x8208A66C;
		  /* 8208A66Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8208A66Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8208A66Ch case    3:*/		return 0x8208A670;
		  /* 8208A670h */ case    4:  		/* lis R10, -32215 */
		/* 8208A670h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8229);
		/* 8208A670h case    4:*/		return 0x8208A674;
		  /* 8208A674h */ case    5:  		/* mr R8, R6 */
		/* 8208A674h case    5:*/		regs.R8 = regs.R6;
		/* 8208A674h case    5:*/		return 0x8208A678;
		  /* 8208A678h */ case    6:  		/* mr R11, R7 */
		/* 8208A678h case    6:*/		regs.R11 = regs.R7;
		/* 8208A678h case    6:*/		return 0x8208A67C;
		  /* 8208A67Ch */ case    7:  		/* lwz R10, <#[R10 - 31260]> */
		/* 8208A67Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0xFFFF85E4) );
		/* 8208A67Ch case    7:*/		return 0x8208A680;
		  /* 8208A680h */ case    8:  		/* cmpwi CR6, R10, 0 */
		/* 8208A680h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 8208A680h case    8:*/		return 0x8208A684;
		  /* 8208A684h */ case    9:  		/* bc 12, CR6_EQ, 8 */
		/* 8208A684h case    9:*/		if ( regs.CR[6].eq ) { return 0x8208A68C;  }
		/* 8208A684h case    9:*/		return 0x8208A688;
		  /* 8208A688h */ case   10:  		/* rlwinm R11, R11, 0, 3, 1 */
		/* 8208A688h case   10:*/		cpu::op::rlwinm<0,0,3,1>(regs,&regs.R11,regs.R11);
		/* 8208A688h case   10:*/		return 0x8208A68C;
	}
	return 0x8208A68C;
} // Block from 8208A660h-8208A68Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8208A68Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A68C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A68C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A68C);
		  /* 8208A68Ch */ case    0:  		/* mr R6, R4 */
		/* 8208A68Ch case    0:*/		regs.R6 = regs.R4;
		/* 8208A68Ch case    0:*/		return 0x8208A690;
		  /* 8208A690h */ case    1:  		/* mr R7, R5 */
		/* 8208A690h case    1:*/		regs.R7 = regs.R5;
		/* 8208A690h case    1:*/		return 0x8208A694;
		  /* 8208A694h */ case    2:  		/* mr R4, R3 */
		/* 8208A694h case    2:*/		regs.R4 = regs.R3;
		/* 8208A694h case    2:*/		return 0x8208A698;
		  /* 8208A698h */ case    3:  		/* mr R5, R11 */
		/* 8208A698h case    3:*/		regs.R5 = regs.R11;
		/* 8208A698h case    3:*/		return 0x8208A69C;
		  /* 8208A69Ch */ case    4:  		/* li R3, 0 */
		/* 8208A69Ch case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8208A69Ch case    4:*/		return 0x8208A6A0;
		  /* 8208A6A0h */ case    5:  		/* bl 1977128 */
		/* 8208A6A0h case    5:*/		regs.LR = 0x8208A6A4; return 0x8226D1C8;
		/* 8208A6A0h case    5:*/		return 0x8208A6A4;
		  /* 8208A6A4h */ case    6:  		/* or. R31, R3, R3 */
		/* 8208A6A4h case    6:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8208A6A4h case    6:*/		return 0x8208A6A8;
		  /* 8208A6A8h */ case    7:  		/* bc 4, CR0_EQ, 12 */
		/* 8208A6A8h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8208A6B4;  }
		/* 8208A6A8h case    7:*/		return 0x8208A6AC;
		  /* 8208A6ACh */ case    8:  		/* li R3, 8 */
		/* 8208A6ACh case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x8);
		/* 8208A6ACh case    8:*/		return 0x8208A6B0;
		  /* 8208A6B0h */ case    9:  		/* bl 72 */
		/* 8208A6B0h case    9:*/		regs.LR = 0x8208A6B4; return 0x8208A6F8;
		/* 8208A6B0h case    9:*/		return 0x8208A6B4;
	}
	return 0x8208A6B4;
} // Block from 8208A68Ch-8208A6B4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8208A6B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A6B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A6B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A6B4);
		  /* 8208A6B4h */ case    0:  		/* mr R3, R31 */
		/* 8208A6B4h case    0:*/		regs.R3 = regs.R31;
		/* 8208A6B4h case    0:*/		return 0x8208A6B8;
		  /* 8208A6B8h */ case    1:  		/* addi R1, R1, 96 */
		/* 8208A6B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8208A6B8h case    1:*/		return 0x8208A6BC;
		  /* 8208A6BCh */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 8208A6BCh case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208A6BCh case    2:*/		return 0x8208A6C0;
		  /* 8208A6C0h */ case    3:  		/* mtspr LR, R12 */
		/* 8208A6C0h case    3:*/		regs.LR = regs.R12;
		/* 8208A6C0h case    3:*/		return 0x8208A6C4;
		  /* 8208A6C4h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8208A6C4h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8208A6C4h case    4:*/		return 0x8208A6C8;
		  /* 8208A6C8h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8208A6C8h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8208A6C8h case    5:*/		return 0x8208A6CC;
	}
	return 0x8208A6CC;
} // Block from 8208A6B4h-8208A6CCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8208A6CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A6CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A6CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A6CC);
		  /* 8208A6CCh */ case    0:  		/* nop */
		/* 8208A6CCh case    0:*/		cpu::op::nop();
		/* 8208A6CCh case    0:*/		return 0x8208A6D0;
	}
	return 0x8208A6D0;
} // Block from 8208A6CCh-8208A6D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8208A6D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A6D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A6D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A6D0);
		  /* 8208A6D0h */ case    0:  		/* mr R4, R3 */
		/* 8208A6D0h case    0:*/		regs.R4 = regs.R3;
		/* 8208A6D0h case    0:*/		return 0x8208A6D4;
		  /* 8208A6D4h */ case    1:  		/* li R3, 0 */
		/* 8208A6D4h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8208A6D4h case    1:*/		return 0x8208A6D8;
		  /* 8208A6D8h */ case    2:  		/* b 1976448 */
		/* 8208A6D8h case    2:*/		return 0x8226CF58;
		/* 8208A6D8h case    2:*/		return 0x8208A6DC;
		  /* 8208A6DCh */ case    3:  		/* nop */
		/* 8208A6DCh case    3:*/		cpu::op::nop();
		/* 8208A6DCh case    3:*/		return 0x8208A6E0;
	}
	return 0x8208A6E0;
} // Block from 8208A6D0h-8208A6E0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8208A6E0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A6E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A6E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A6E0);
		  /* 8208A6E0h */ case    0:  		/* lhz R4, <#[R3]> */
		/* 8208A6E0h case    0:*/		cpu::mem::load16z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000000) );
		/* 8208A6E0h case    0:*/		return 0x8208A6E4;
		  /* 8208A6E4h */ case    1:  		/* lwz R3, <#[R3 + 4]> */
		/* 8208A6E4h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 8208A6E4h case    1:*/		return 0x8208A6E8;
		  /* 8208A6E8h */ case    2:  		/* b 13720 */
		/* 8208A6E8h case    2:*/		return 0x8208DC80;
		/* 8208A6E8h case    2:*/		return 0x8208A6EC;
		  /* 8208A6ECh */ case    3:  		/* nop */
		/* 8208A6ECh case    3:*/		cpu::op::nop();
		/* 8208A6ECh case    3:*/		return 0x8208A6F0;
	}
	return 0x8208A6F0;
} // Block from 8208A6E0h-8208A6F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8208A6F0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A6F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A6F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A6F0);
		  /* 8208A6F0h */ case    0:  		/* b 48 */
		/* 8208A6F0h case    0:*/		return 0x8208A720;
		/* 8208A6F0h case    0:*/		return 0x8208A6F4;
		  /* 8208A6F4h */ case    1:  		/* nop */
		/* 8208A6F4h case    1:*/		cpu::op::nop();
		/* 8208A6F4h case    1:*/		return 0x8208A6F8;
	}
	return 0x8208A6F8;
} // Block from 8208A6F0h-8208A6F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8208A6F8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A6F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A6F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A6F8);
		  /* 8208A6F8h */ case    0:  		/* b 16 */
		/* 8208A6F8h case    0:*/		return 0x8208A708;
		/* 8208A6F8h case    0:*/		return 0x8208A6FC;
		  /* 8208A6FCh */ case    1:  		/* nop */
		/* 8208A6FCh case    1:*/		cpu::op::nop();
		/* 8208A6FCh case    1:*/		return 0x8208A700;
	}
	return 0x8208A700;
} // Block from 8208A6F8h-8208A700h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8208A700h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A700);
		  /* 8208A700h */ case    0:  		/* b 88 */
		/* 8208A700h case    0:*/		return 0x8208A758;
		/* 8208A700h case    0:*/		return 0x8208A704;
		  /* 8208A704h */ case    1:  		/* nop */
		/* 8208A704h case    1:*/		cpu::op::nop();
		/* 8208A704h case    1:*/		return 0x8208A708;
	}
	return 0x8208A708;
} // Block from 8208A700h-8208A708h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8208A708h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A708);
		  /* 8208A708h */ case    0:  		/* lwz R11, <#[R13 + 336]> */
		/* 8208A708h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R13 + 0x00000150) );
		/* 8208A708h case    0:*/		return 0x8208A70C;
		  /* 8208A70Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8208A70Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8208A70Ch case    1:*/		return 0x8208A710;
		  /* 8208A710h */ case    2:  		/* bclr 4, CR6_EQ */
		/* 8208A710h case    2:*/		if ( !regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 8208A710h case    2:*/		return 0x8208A714;
	}
	return 0x8208A714;
} // Block from 8208A708h-8208A714h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8208A714h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A714( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A714) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A714);
		  /* 8208A714h */ case    0:  		/* lwz R11, <#[R13 + 256]> */
		/* 8208A714h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R13 + 0x00000100) );
		/* 8208A714h case    0:*/		return 0x8208A718;
		  /* 8208A718h */ case    1:  		/* stw R3, <#[R11 + 352]> */
		/* 8208A718h case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000160) );
		/* 8208A718h case    1:*/		return 0x8208A71C;
		  /* 8208A71Ch */ case    2:  		/* bclr 20, CR0_LT */
		/* 8208A71Ch case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8208A71Ch case    2:*/		return 0x8208A720;
	}
	return 0x8208A720;
} // Block from 8208A714h-8208A720h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8208A720h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A720);
		  /* 8208A720h */ case    0:  		/* mfspr R12, LR */
		/* 8208A720h case    0:*/		regs.R12 = regs.LR;
		/* 8208A720h case    0:*/		return 0x8208A724;
		  /* 8208A724h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8208A724h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208A724h case    1:*/		return 0x8208A728;
		  /* 8208A728h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8208A728h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8208A728h case    2:*/		return 0x8208A72C;
		  /* 8208A72Ch */ case    3:  		/* bl 1977484 */
		/* 8208A72Ch case    3:*/		regs.LR = 0x8208A730; return 0x8226D3B8;
		/* 8208A72Ch case    3:*/		return 0x8208A730;
		  /* 8208A730h */ case    4:  		/* lwz R11, <#[R13 + 336]> */
		/* 8208A730h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R13 + 0x00000150) );
		/* 8208A730h case    4:*/		return 0x8208A734;
		  /* 8208A734h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8208A734h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8208A734h case    5:*/		return 0x8208A738;
		  /* 8208A738h */ case    6:  		/* bc 4, CR6_EQ, 12 */
		/* 8208A738h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8208A744;  }
		/* 8208A738h case    6:*/		return 0x8208A73C;
		  /* 8208A73Ch */ case    7:  		/* lwz R11, <#[R13 + 256]> */
		/* 8208A73Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R13 + 0x00000100) );
		/* 8208A73Ch case    7:*/		return 0x8208A740;
		  /* 8208A740h */ case    8:  		/* stw R3, <#[R11 + 352]> */
		/* 8208A740h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000160) );
		/* 8208A740h case    8:*/		return 0x8208A744;
	}
	return 0x8208A744;
} // Block from 8208A720h-8208A744h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8208A744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A744);
		  /* 8208A744h */ case    0:  		/* addi R1, R1, 96 */
		/* 8208A744h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8208A744h case    0:*/		return 0x8208A748;
		  /* 8208A748h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8208A748h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208A748h case    1:*/		return 0x8208A74C;
		  /* 8208A74Ch */ case    2:  		/* mtspr LR, R12 */
		/* 8208A74Ch case    2:*/		regs.LR = regs.R12;
		/* 8208A74Ch case    2:*/		return 0x8208A750;
		  /* 8208A750h */ case    3:  		/* bclr 20, CR0_LT */
		/* 8208A750h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8208A750h case    3:*/		return 0x8208A754;
	}
	return 0x8208A754;
} // Block from 8208A744h-8208A754h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8208A754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A754);
		  /* 8208A754h */ case    0:  		/* nop */
		/* 8208A754h case    0:*/		cpu::op::nop();
		/* 8208A754h case    0:*/		return 0x8208A758;
	}
	return 0x8208A758;
} // Block from 8208A754h-8208A758h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8208A758h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A758);
		  /* 8208A758h */ case    0:  		/* lwz R11, <#[R13 + 336]> */
		/* 8208A758h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R13 + 0x00000150) );
		/* 8208A758h case    0:*/		return 0x8208A75C;
		  /* 8208A75Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8208A75Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8208A75Ch case    1:*/		return 0x8208A760;
		  /* 8208A760h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 8208A760h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8208A770;  }
		/* 8208A760h case    2:*/		return 0x8208A764;
		  /* 8208A764h */ case    3:  		/* lwz R11, <#[R13 + 256]> */
		/* 8208A764h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R13 + 0x00000100) );
		/* 8208A764h case    3:*/		return 0x8208A768;
		  /* 8208A768h */ case    4:  		/* lwz R3, <#[R11 + 352]> */
		/* 8208A768h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000160) );
		/* 8208A768h case    4:*/		return 0x8208A76C;
		  /* 8208A76Ch */ case    5:  		/* bclr 20, CR0_LT */
		/* 8208A76Ch case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8208A76Ch case    5:*/		return 0x8208A770;
	}
	return 0x8208A770;
} // Block from 8208A758h-8208A770h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8208A770h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A770);
		  /* 8208A770h */ case    0:  		/* li R3, 0 */
		/* 8208A770h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8208A770h case    0:*/		return 0x8208A774;
		  /* 8208A774h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8208A774h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8208A774h case    1:*/		return 0x8208A778;
	}
	return 0x8208A778;
} // Block from 8208A770h-8208A778h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8208A778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A778);
		  /* 8208A778h */ case    0:  		/* mfspr R12, LR */
		/* 8208A778h case    0:*/		regs.R12 = regs.LR;
		/* 8208A778h case    0:*/		return 0x8208A77C;
		  /* 8208A77Ch */ case    1:  		/* bl 27356 */
		/* 8208A77Ch case    1:*/		regs.LR = 0x8208A780; return 0x82091258;
		/* 8208A77Ch case    1:*/		return 0x8208A780;
		  /* 8208A780h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8208A780h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8208A780h case    2:*/		return 0x8208A784;
		  /* 8208A784h */ case    3:  		/* mr R31, R3 */
		/* 8208A784h case    3:*/		regs.R31 = regs.R3;
		/* 8208A784h case    3:*/		return 0x8208A788;
		  /* 8208A788h */ case    4:  		/* addi R3, R1, 80 */
		/* 8208A788h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8208A788h case    4:*/		return 0x8208A78C;
		  /* 8208A78Ch */ case    5:  		/* mr R28, R5 */
		/* 8208A78Ch case    5:*/		regs.R28 = regs.R5;
		/* 8208A78Ch case    5:*/		return 0x8208A790;
		  /* 8208A790h */ case    6:  		/* bl 13560 */
		/* 8208A790h case    6:*/		regs.LR = 0x8208A794; return 0x8208DC88;
		/* 8208A790h case    6:*/		return 0x8208A794;
		  /* 8208A794h */ case    7:  		/* mr R30, R3 */
		/* 8208A794h case    7:*/		regs.R30 = regs.R3;
		/* 8208A794h case    7:*/		return 0x8208A798;
		  /* 8208A798h */ case    8:  		/* rlwinm R29, R28, 0, 24, 31 */
		/* 8208A798h case    8:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R29,regs.R28);
		/* 8208A798h case    8:*/		return 0x8208A79C;
		  /* 8208A79Ch */ case    9:  		/* mr R6, R30 */
		/* 8208A79Ch case    9:*/		regs.R6 = regs.R30;
		/* 8208A79Ch case    9:*/		return 0x8208A7A0;
		  /* 8208A7A0h */ case   10:  		/* mr R5, R29 */
		/* 8208A7A0h case   10:*/		regs.R5 = regs.R29;
		/* 8208A7A0h case   10:*/		return 0x8208A7A4;
		  /* 8208A7A4h */ case   11:  		/* li R4, 1 */
		/* 8208A7A4h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8208A7A4h case   11:*/		return 0x8208A7A8;
		  /* 8208A7A8h */ case   12:  		/* mr R3, R31 */
		/* 8208A7A8h case   12:*/		regs.R3 = regs.R31;
		/* 8208A7A8h case   12:*/		return 0x8208A7AC;
		  /* 8208A7ACh */ case   13:  		/* bl 1977276 */
		/* 8208A7ACh case   13:*/		regs.LR = 0x8208A7B0; return 0x8226D368;
		/* 8208A7ACh case   13:*/		return 0x8208A7B0;
		  /* 8208A7B0h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 8208A7B0h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8208A7B0h case   14:*/		return 0x8208A7B4;
		  /* 8208A7B4h */ case   15:  		/* bc 12, CR0_LT, 24 */
		/* 8208A7B4h case   15:*/		if ( regs.CR[0].lt ) { return 0x8208A7CC;  }
		/* 8208A7B4h case   15:*/		return 0x8208A7B8;
		  /* 8208A7B8h */ case   16:  		/* cmpwi CR6, R28, 0 */
		/* 8208A7B8h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 8208A7B8h case   16:*/		return 0x8208A7BC;
		  /* 8208A7BCh */ case   17:  		/* bc 12, CR6_EQ, 24 */
		/* 8208A7BCh case   17:*/		if ( regs.CR[6].eq ) { return 0x8208A7D4;  }
		/* 8208A7BCh case   17:*/		return 0x8208A7C0;
		  /* 8208A7C0h */ case   18:  		/* cmpwi CR6, R3, 257 */
		/* 8208A7C0h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000101);
		/* 8208A7C0h case   18:*/		return 0x8208A7C4;
		  /* 8208A7C4h */ case   19:  		/* bc 12, CR6_EQ, -40 */
		/* 8208A7C4h case   19:*/		if ( regs.CR[6].eq ) { return 0x8208A79C;  }
		/* 8208A7C4h case   19:*/		return 0x8208A7C8;
		  /* 8208A7C8h */ case   20:  		/* b 12 */
		/* 8208A7C8h case   20:*/		return 0x8208A7D4;
		/* 8208A7C8h case   20:*/		return 0x8208A7CC;
	}
	return 0x8208A7CC;
} // Block from 8208A778h-8208A7CCh (21 instructions)

//////////////////////////////////////////////////////
// Block at 8208A7CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A7CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A7CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A7CC);
		  /* 8208A7CCh */ case    0:  		/* bl -172 */
		/* 8208A7CCh case    0:*/		regs.LR = 0x8208A7D0; return 0x8208A720;
		/* 8208A7CCh case    0:*/		return 0x8208A7D0;
		  /* 8208A7D0h */ case    1:  		/* li R3, -1 */
		/* 8208A7D0h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 8208A7D0h case    1:*/		return 0x8208A7D4;
	}
	return 0x8208A7D4;
} // Block from 8208A7CCh-8208A7D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8208A7D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A7D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A7D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A7D4);
		  /* 8208A7D4h */ case    0:  		/* addi R1, R1, 128 */
		/* 8208A7D4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8208A7D4h case    0:*/		return 0x8208A7D8;
		  /* 8208A7D8h */ case    1:  		/* b 27344 */
		/* 8208A7D8h case    1:*/		return 0x820912A8;
		/* 8208A7D8h case    1:*/		return 0x8208A7DC;
		  /* 8208A7DCh */ case    2:  		/* nop */
		/* 8208A7DCh case    2:*/		cpu::op::nop();
		/* 8208A7DCh case    2:*/		return 0x8208A7E0;
	}
	return 0x8208A7E0;
} // Block from 8208A7D4h-8208A7E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8208A7E0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A7E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A7E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A7E0);
		  /* 8208A7E0h */ case    0:  		/* mfspr R12, LR */
		/* 8208A7E0h case    0:*/		regs.R12 = regs.LR;
		/* 8208A7E0h case    0:*/		return 0x8208A7E4;
		  /* 8208A7E4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8208A7E4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208A7E4h case    1:*/		return 0x8208A7E8;
		  /* 8208A7E8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8208A7E8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8208A7E8h case    2:*/		return 0x8208A7EC;
		  /* 8208A7ECh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8208A7ECh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8208A7ECh case    3:*/		return 0x8208A7F0;
		  /* 8208A7F0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8208A7F0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8208A7F0h case    4:*/		return 0x8208A7F4;
		  /* 8208A7F4h */ case    5:  		/* mr R30, R4 */
		/* 8208A7F4h case    5:*/		regs.R30 = regs.R4;
		/* 8208A7F4h case    5:*/		return 0x8208A7F8;
		  /* 8208A7F8h */ case    6:  		/* mr R31, R3 */
		/* 8208A7F8h case    6:*/		regs.R31 = regs.R3;
		/* 8208A7F8h case    6:*/		return 0x8208A7FC;
		  /* 8208A7FCh */ case    7:  		/* mr R4, R5 */
		/* 8208A7FCh case    7:*/		regs.R4 = regs.R5;
		/* 8208A7FCh case    7:*/		return 0x8208A800;
		  /* 8208A800h */ case    8:  		/* mr R3, R30 */
		/* 8208A800h case    8:*/		regs.R3 = regs.R30;
		/* 8208A800h case    8:*/		return 0x8208A804;
		  /* 8208A804h */ case    9:  		/* bl 1976820 */
		/* 8208A804h case    9:*/		regs.LR = 0x8208A808; return 0x8226D1F8;
		/* 8208A804h case    9:*/		return 0x8208A808;
		  /* 8208A808h */ case   10:  		/* li R11, -4 */
		/* 8208A808h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFC);
		/* 8208A808h case   10:*/		return 0x8208A80C;
		  /* 8208A80Ch */ case   11:  		/* li R10, 128 */
		/* 8208A80Ch case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x80);
		/* 8208A80Ch case   11:*/		return 0x8208A810;
		  /* 8208A810h */ case   12:  		/* stw R30, <#[R31 + 4]> */
		/* 8208A810h case   12:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 8208A810h case   12:*/		return 0x8208A814;
		  /* 8208A814h */ case   13:  		/* stw R11, <#[R31]> */
		/* 8208A814h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8208A814h case   13:*/		return 0x8208A818;
		  /* 8208A818h */ case   14:  		/* mr R3, R31 */
		/* 8208A818h case   14:*/		regs.R3 = regs.R31;
		/* 8208A818h case   14:*/		return 0x8208A81C;
		  /* 8208A81Ch */ case   15:  		/* stw R10, <#[R31 + 8]> */
		/* 8208A81Ch case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8208A81Ch case   15:*/		return 0x8208A820;
		  /* 8208A820h */ case   16:  		/* addi R1, R1, 112 */
		/* 8208A820h case   16:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8208A820h case   16:*/		return 0x8208A824;
		  /* 8208A824h */ case   17:  		/* lwz R12, <#[R1 - 8]> */
		/* 8208A824h case   17:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208A824h case   17:*/		return 0x8208A828;
		  /* 8208A828h */ case   18:  		/* mtspr LR, R12 */
		/* 8208A828h case   18:*/		regs.LR = regs.R12;
		/* 8208A828h case   18:*/		return 0x8208A82C;
		  /* 8208A82Ch */ case   19:  		/* ld R30, <#[R1 - 24]> */
		/* 8208A82Ch case   19:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8208A82Ch case   19:*/		return 0x8208A830;
		  /* 8208A830h */ case   20:  		/* ld R31, <#[R1 - 16]> */
		/* 8208A830h case   20:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8208A830h case   20:*/		return 0x8208A834;
		  /* 8208A834h */ case   21:  		/* bclr 20, CR0_LT */
		/* 8208A834h case   21:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8208A834h case   21:*/		return 0x8208A838;
	}
	return 0x8208A838;
} // Block from 8208A7E0h-8208A838h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8208A838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A838);
		  /* 8208A838h */ case    0:  		/* mfspr R12, LR */
		/* 8208A838h case    0:*/		regs.R12 = regs.LR;
		/* 8208A838h case    0:*/		return 0x8208A83C;
		  /* 8208A83Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8208A83Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208A83Ch case    1:*/		return 0x8208A840;
		  /* 8208A840h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8208A840h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8208A840h case    2:*/		return 0x8208A844;
		  /* 8208A844h */ case    3:  		/* mr R11, R5 */
		/* 8208A844h case    3:*/		regs.R11 = regs.R5;
		/* 8208A844h case    3:*/		return 0x8208A848;
		  /* 8208A848h */ case    4:  		/* mr R5, R9 */
		/* 8208A848h case    4:*/		regs.R5 = regs.R9;
		/* 8208A848h case    4:*/		return 0x8208A84C;
		  /* 8208A84Ch */ case    5:  		/* rlwinm R9, R7, 30, 31, 31 */
		/* 8208A84Ch case    5:*/		cpu::op::rlwinm<0,30,31,31>(regs,&regs.R9,regs.R7);
		/* 8208A84Ch case    5:*/		return 0x8208A850;
		  /* 8208A850h */ case    6:  		/* cmpwi CR6, R8, -1 */
		/* 8208A850h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R8,0xFFFFFFFF);
		/* 8208A850h case    6:*/		return 0x8208A854;
		  /* 8208A854h */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 8208A854h case    7:*/		if ( regs.CR[6].eq ) { return 0x8208A868;  }
		/* 8208A854h case    7:*/		return 0x8208A858;
		  /* 8208A858h */ case    8:  		/* li R10, 1 */
		/* 8208A858h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8208A858h case    8:*/		return 0x8208A85C;
		  /* 8208A85Ch */ case    9:  		/* slw R10, R10, R8 */
		/* 8208A85Ch case    9:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 8208A85Ch case    9:*/		return 0x8208A860;
		  /* 8208A860h */ case   10:  		/* rlwinm R10, R10, 24, 0, 7 */
		/* 8208A860h case   10:*/		cpu::op::rlwinm<0,24,0,7>(regs,&regs.R10,regs.R10);
		/* 8208A860h case   10:*/		return 0x8208A864;
		  /* 8208A864h */ case   11:  		/* or R9, R10, R9 */
		/* 8208A864h case   11:*/		cpu::op::or<0>(regs,&regs.R9,regs.R10,regs.R9);
		/* 8208A864h case   11:*/		return 0x8208A868;
	}
	return 0x8208A868;
} // Block from 8208A838h-8208A868h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8208A868h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A868);
		  /* 8208A868h */ case    0:  		/* lis R10, -32247 */
		/* 8208A868h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8209);
		/* 8208A868h case    0:*/		return 0x8208A86C;
		  /* 8208A86Ch */ case    1:  		/* mr R8, R6 */
		/* 8208A86Ch case    1:*/		regs.R8 = regs.R6;
		/* 8208A86Ch case    1:*/		return 0x8208A870;
		  /* 8208A870h */ case    2:  		/* mr R7, R11 */
		/* 8208A870h case    2:*/		regs.R7 = regs.R11;
		/* 8208A870h case    2:*/		return 0x8208A874;
		  /* 8208A874h */ case    3:  		/* addi R6, R10, -9040 */
		/* 8208A874h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFDCB0);
		/* 8208A874h case    3:*/		return 0x8208A878;
		  /* 8208A878h */ case    4:  		/* addi R3, R1, 80 */
		/* 8208A878h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8208A878h case    4:*/		return 0x8208A87C;
		  /* 8208A87Ch */ case    5:  		/* bl 1977260 */
		/* 8208A87Ch case    5:*/		regs.LR = 0x8208A880; return 0x8226D428;
		/* 8208A87Ch case    5:*/		return 0x8208A880;
		  /* 8208A880h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 8208A880h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8208A880h case    6:*/		return 0x8208A884;
		  /* 8208A884h */ case    7:  		/* bc 4, CR0_LT, 16 */
		/* 8208A884h case    7:*/		if ( !regs.CR[0].lt ) { return 0x8208A894;  }
		/* 8208A884h case    7:*/		return 0x8208A888;
		  /* 8208A888h */ case    8:  		/* bl -360 */
		/* 8208A888h case    8:*/		regs.LR = 0x8208A88C; return 0x8208A720;
		/* 8208A888h case    8:*/		return 0x8208A88C;
		  /* 8208A88Ch */ case    9:  		/* li R3, 0 */
		/* 8208A88Ch case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8208A88Ch case    9:*/		return 0x8208A890;
		  /* 8208A890h */ case   10:  		/* b 8 */
		/* 8208A890h case   10:*/		return 0x8208A898;
		/* 8208A890h case   10:*/		return 0x8208A894;
	}
	return 0x8208A894;
} // Block from 8208A868h-8208A894h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8208A894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A894);
		  /* 8208A894h */ case    0:  		/* lwz R3, <#[R1 + 80]> */
		/* 8208A894h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 8208A894h case    0:*/		return 0x8208A898;
	}
	return 0x8208A898;
} // Block from 8208A894h-8208A898h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8208A898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A898);
		  /* 8208A898h */ case    0:  		/* addi R1, R1, 96 */
		/* 8208A898h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8208A898h case    0:*/		return 0x8208A89C;
		  /* 8208A89Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8208A89Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208A89Ch case    1:*/		return 0x8208A8A0;
		  /* 8208A8A0h */ case    2:  		/* mtspr LR, R12 */
		/* 8208A8A0h case    2:*/		regs.LR = regs.R12;
		/* 8208A8A0h case    2:*/		return 0x8208A8A4;
		  /* 8208A8A4h */ case    3:  		/* bclr 20, CR0_LT */
		/* 8208A8A4h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8208A8A4h case    3:*/		return 0x8208A8A8;
	}
	return 0x8208A8A8;
} // Block from 8208A898h-8208A8A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8208A8A8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A8A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A8A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A8A8);
		  /* 8208A8A8h */ case    0:  		/* mfspr R12, LR */
		/* 8208A8A8h case    0:*/		regs.R12 = regs.LR;
		/* 8208A8A8h case    0:*/		return 0x8208A8AC;
		  /* 8208A8ACh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8208A8ACh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208A8ACh case    1:*/		return 0x8208A8B0;
		  /* 8208A8B0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8208A8B0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8208A8B0h case    2:*/		return 0x8208A8B4;
		  /* 8208A8B4h */ case    3:  		/* stwu R1, <#[R1 - 144]> */
		/* 8208A8B4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8208A8B4h case    3:*/		return 0x8208A8B8;
		  /* 8208A8B8h */ case    4:  		/* lis R11, -32256 */
		/* 8208A8B8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8208A8B8h case    4:*/		return 0x8208A8BC;
		  /* 8208A8BCh */ case    5:  		/* lis R31, -32215 */
		/* 8208A8BCh case    5:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8229);
		/* 8208A8BCh case    5:*/		return 0x8208A8C0;
		  /* 8208A8C0h */ case    6:  		/* lwz R11, <#[R11 + 1416]> */
		/* 8208A8C0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000588) );
		/* 8208A8C0h case    6:*/		return 0x8208A8C4;
		  /* 8208A8C4h */ case    7:  		/* lwz R11, <#[R11]> */
		/* 8208A8C4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8208A8C4h case    7:*/		return 0x8208A8C8;
		  /* 8208A8C8h */ case    8:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 8208A8C8h case    8:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 8208A8C8h case    8:*/		return 0x8208A8CC;
		  /* 8208A8CCh */ case    9:  		/* bc 12, CR0_EQ, 88 */
		/* 8208A8CCh case    9:*/		if ( regs.CR[0].eq ) { return 0x8208A924;  }
		/* 8208A8CCh case    9:*/		return 0x8208A8D0;
		  /* 8208A8D0h */ case   10:  		/* li R10, 6 */
		/* 8208A8D0h case   10:*/		cpu::op::li<0>(regs,&regs.R10,0x6);
		/* 8208A8D0h case   10:*/		return 0x8208A8D4;
		  /* 8208A8D4h */ case   11:  		/* addi R11, R1, 72 */
		/* 8208A8D4h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x48);
		/* 8208A8D4h case   11:*/		return 0x8208A8D8;
		  /* 8208A8D8h */ case   12:  		/* li R9, 0 */
		/* 8208A8D8h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8208A8D8h case   12:*/		return 0x8208A8DC;
		  /* 8208A8DCh */ case   13:  		/* mtspr CTR, R10 */
		/* 8208A8DCh case   13:*/		regs.CTR = regs.R10;
		/* 8208A8DCh case   13:*/		return 0x8208A8E0;
		  /* 8208A8E0h */ case   14:  		/* stdu R9, <#[R11 + 8]> */
		/* 8208A8E0h case   14:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		regs.R11 = (uint32)(regs.R11 + 0x00000008);
		/* 8208A8E0h case   14:*/		return 0x8208A8E4;
		  /* 8208A8E4h */ case   15:  		/* bc 16, CR0_LT, -4 */
		/* 8208A8E4h case   15:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8208A8E0;  }
		/* 8208A8E4h case   15:*/		return 0x8208A8E8;
		  /* 8208A8E8h */ case   16:  		/* lwz R3, <#[R31 - 25548]> */
		/* 8208A8E8h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0xFFFF9C34) );
		/* 8208A8E8h case   16:*/		return 0x8208A8EC;
		  /* 8208A8ECh */ case   17:  		/* li R11, 48 */
		/* 8208A8ECh case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x30);
		/* 8208A8ECh case   17:*/		return 0x8208A8F0;
		  /* 8208A8F0h */ case   18:  		/* stw R11, <#[R1 + 80]> */
		/* 8208A8F0h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8208A8F0h case   18:*/		return 0x8208A8F4;
		  /* 8208A8F4h */ case   19:  		/* cmplwi CR6, R3, 0 */
		/* 8208A8F4h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8208A8F4h case   19:*/		return 0x8208A8F8;
		  /* 8208A8F8h */ case   20:  		/* bc 4, CR6_EQ, 48 */
		/* 8208A8F8h case   20:*/		if ( !regs.CR[6].eq ) { return 0x8208A928;  }
		/* 8208A8F8h case   20:*/		return 0x8208A8FC;
		  /* 8208A8FCh */ case   21:  		/* lis R3, 12 */
		/* 8208A8FCh case   21:*/		cpu::op::lis<0>(regs,&regs.R3,0xC);
		/* 8208A8FCh case   21:*/		return 0x8208A900;
		  /* 8208A900h */ case   22:  		/* addi R8, R1, 80 */
		/* 8208A900h case   22:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 8208A900h case   22:*/		return 0x8208A904;
		  /* 8208A904h */ case   23:  		/* li R7, 0 */
		/* 8208A904h case   23:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8208A904h case   23:*/		return 0x8208A908;
		  /* 8208A908h */ case   24:  		/* li R6, 4096 */
		/* 8208A908h case   24:*/		cpu::op::li<0>(regs,&regs.R6,0x1000);
		/* 8208A908h case   24:*/		return 0x8208A90C;
		  /* 8208A90Ch */ case   25:  		/* lis R5, 16 */
		/* 8208A90Ch case   25:*/		cpu::op::lis<0>(regs,&regs.R5,0x10);
		/* 8208A90Ch case   25:*/		return 0x8208A910;
		  /* 8208A910h */ case   26:  		/* li R4, 0 */
		/* 8208A910h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8208A910h case   26:*/		return 0x8208A914;
		  /* 8208A914h */ case   27:  		/* ori R3, R3, 4098 */
		/* 8208A914h case   27:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x1002);
		/* 8208A914h case   27:*/		return 0x8208A918;
		  /* 8208A918h */ case   28:  		/* bl 6192 */
		/* 8208A918h case   28:*/		regs.LR = 0x8208A91C; return 0x8208C148;
		/* 8208A918h case   28:*/		return 0x8208A91C;
		  /* 8208A91Ch */ case   29:  		/* stw R3, <#[R31 - 25548]> */
		/* 8208A91Ch case   29:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0xFFFF9C34) );
		/* 8208A91Ch case   29:*/		return 0x8208A920;
		  /* 8208A920h */ case   30:  		/* b 8 */
		/* 8208A920h case   30:*/		return 0x8208A928;
		/* 8208A920h case   30:*/		return 0x8208A924;
	}
	return 0x8208A924;
} // Block from 8208A8A8h-8208A924h (31 instructions)

//////////////////////////////////////////////////////
// Block at 8208A924h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A924( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A924) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A924);
		  /* 8208A924h */ case    0:  		/* lwz R3, <#[R31 - 25548]> */
		/* 8208A924h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0xFFFF9C34) );
		/* 8208A924h case    0:*/		return 0x8208A928;
	}
	return 0x8208A928;
} // Block from 8208A924h-8208A928h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8208A928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A928);
		  /* 8208A928h */ case    0:  		/* addi R11, R3, 0 */
		/* 8208A928h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x0);
		/* 8208A928h case    0:*/		return 0x8208A92C;
		  /* 8208A92Ch */ case    1:  		/* addic R10, R11, -1 */
		/* 8208A92Ch case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 8208A92Ch case    1:*/		return 0x8208A930;
		  /* 8208A930h */ case    2:  		/* subfe R3, R10, R11 */
		/* 8208A930h case    2:*/		cpu::op::subfe<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 8208A930h case    2:*/		return 0x8208A934;
		  /* 8208A934h */ case    3:  		/* addi R1, R1, 144 */
		/* 8208A934h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8208A934h case    3:*/		return 0x8208A938;
		  /* 8208A938h */ case    4:  		/* lwz R12, <#[R1 - 8]> */
		/* 8208A938h case    4:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208A938h case    4:*/		return 0x8208A93C;
		  /* 8208A93Ch */ case    5:  		/* mtspr LR, R12 */
		/* 8208A93Ch case    5:*/		regs.LR = regs.R12;
		/* 8208A93Ch case    5:*/		return 0x8208A940;
		  /* 8208A940h */ case    6:  		/* ld R31, <#[R1 - 16]> */
		/* 8208A940h case    6:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8208A940h case    6:*/		return 0x8208A944;
		  /* 8208A944h */ case    7:  		/* bclr 20, CR0_LT */
		/* 8208A944h case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8208A944h case    7:*/		return 0x8208A948;
	}
	return 0x8208A948;
} // Block from 8208A928h-8208A948h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8208A948h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A948);
		  /* 8208A948h */ case    0:  		/* mfspr R12, LR */
		/* 8208A948h case    0:*/		regs.R12 = regs.LR;
		/* 8208A948h case    0:*/		return 0x8208A94C;
		  /* 8208A94Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8208A94Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208A94Ch case    1:*/		return 0x8208A950;
		  /* 8208A950h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8208A950h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8208A950h case    2:*/		return 0x8208A954;
		  /* 8208A954h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8208A954h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8208A954h case    3:*/		return 0x8208A958;
		  /* 8208A958h */ case    4:  		/* stwu R1, <#[R1 - 128]> */
		/* 8208A958h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8208A958h case    4:*/		return 0x8208A95C;
		  /* 8208A95Ch */ case    5:  		/* lwz R10, <#[R3 + 24]> */
		/* 8208A95Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000018) );
		/* 8208A95Ch case    5:*/		return 0x8208A960;
		  /* 8208A960h */ case    6:  		/* mr R31, R3 */
		/* 8208A960h case    6:*/		regs.R31 = regs.R3;
		/* 8208A960h case    6:*/		return 0x8208A964;
		  /* 8208A964h */ case    7:  		/* addi R11, R10, 76 */
		/* 8208A964h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x4C);
		/* 8208A964h case    7:*/		return 0x8208A968;
		  /* 8208A968h */ case    8:  		/* lwz R9, <#[R10 + 76]> */
		/* 8208A968h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000004C) );
		/* 8208A968h case    8:*/		return 0x8208A96C;
		  /* 8208A96Ch */ case    9:  		/* cmplwi CR6, R9, 0 */
		/* 8208A96Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8208A96Ch case    9:*/		return 0x8208A970;
		  /* 8208A970h */ case   10:  		/* bc 4, CR6_EQ, 396 */
		/* 8208A970h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8208AAFC;  }
		/* 8208A970h case   10:*/		return 0x8208A974;
		  /* 8208A974h */ case   11:  		/* lwz R11, <#[R10 + 72]> */
		/* 8208A974h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000048) );
		/* 8208A974h case   11:*/		return 0x8208A978;
		  /* 8208A978h */ case   12:  		/* li R30, 0 */
		/* 8208A978h case   12:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8208A978h case   12:*/		return 0x8208A97C;
		  /* 8208A97Ch */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 8208A97Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8208A97Ch case   13:*/		return 0x8208A980;
		  /* 8208A980h */ case   14:  		/* stw R11, <#[R1 + 80]> */
		/* 8208A980h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8208A980h case   14:*/		return 0x8208A984;
		  /* 8208A984h */ case   15:  		/* bc 12, CR6_EQ, 108 */
		/* 8208A984h case   15:*/		if ( regs.CR[6].eq ) { return 0x8208A9F0;  }
		/* 8208A984h case   15:*/		return 0x8208A988;
		  /* 8208A988h */ case   16:  		/* lwz R9, <#[R11 + 4]> */
		/* 8208A988h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 8208A988h case   16:*/		return 0x8208A98C;
		  /* 8208A98Ch */ case   17:  		/* lwz R8, <#[R11 + 8]> */
		/* 8208A98Ch case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 8208A98Ch case   17:*/		return 0x8208A990;
		  /* 8208A990h */ case   18:  		/* cmplw CR6, R8, R9 */
		/* 8208A990h case   18:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 8208A990h case   18:*/		return 0x8208A994;
		  /* 8208A994h */ case   19:  		/* bc 12, CR6_EQ, 92 */
		/* 8208A994h case   19:*/		if ( regs.CR[6].eq ) { return 0x8208A9F0;  }
		/* 8208A994h case   19:*/		return 0x8208A998;
		  /* 8208A998h */ case   20:  		/* lis R9, 1 */
		/* 8208A998h case   20:*/		cpu::op::lis<0>(regs,&regs.R9,0x1);
		/* 8208A998h case   20:*/		return 0x8208A99C;
		  /* 8208A99Ch */ case   21:  		/* lis R5, 24576 */
		/* 8208A99Ch case   21:*/		cpu::op::lis<0>(regs,&regs.R5,0x6000);
		/* 8208A99Ch case   21:*/		return 0x8208A9A0;
		  /* 8208A9A0h */ case   22:  		/* stw R9, <#[R1 + 84]> */
		/* 8208A9A0h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8208A9A0h case   22:*/		return 0x8208A9A4;
		  /* 8208A9A4h */ case   23:  		/* li R6, 4 */
		/* 8208A9A4h case   23:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8208A9A4h case   23:*/		return 0x8208A9A8;
		  /* 8208A9A8h */ case   24:  		/* lwz R9, <#[R11 + 8]> */
		/* 8208A9A8h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 8208A9A8h case   24:*/		return 0x8208A9AC;
		  /* 8208A9ACh */ case   25:  		/* add R11, R9, R11 */
		/* 8208A9ACh case   25:*/		cpu::op::add<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8208A9ACh case   25:*/		return 0x8208A9B0;
		  /* 8208A9B0h */ case   26:  		/* stw R11, <#[R1 + 92]> */
		/* 8208A9B0h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8208A9B0h case   26:*/		return 0x8208A9B4;
		  /* 8208A9B4h */ case   27:  		/* ori R5, R5, 4096 */
		/* 8208A9B4h case   27:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1000);
		/* 8208A9B4h case   27:*/		return 0x8208A9B8;
		  /* 8208A9B8h */ case   28:  		/* addi R4, R1, 84 */
		/* 8208A9B8h case   28:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x54);
		/* 8208A9B8h case   28:*/		return 0x8208A9BC;
		  /* 8208A9BCh */ case   29:  		/* lwz R7, <#[R10 + 1424]> */
		/* 8208A9BCh case   29:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000590) );
		/* 8208A9BCh case   29:*/		return 0x8208A9C0;
		  /* 8208A9C0h */ case   30:  		/* addi R3, R1, 92 */
		/* 8208A9C0h case   30:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x5C);
		/* 8208A9C0h case   30:*/		return 0x8208A9C4;
		  /* 8208A9C4h */ case   31:  		/* bl 1976948 */
		/* 8208A9C4h case   31:*/		regs.LR = 0x8208A9C8; return 0x8226D438;
		/* 8208A9C4h case   31:*/		return 0x8208A9C8;
		  /* 8208A9C8h */ case   32:  		/* cmpwi CR0, R3, 0 */
		/* 8208A9C8h case   32:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8208A9C8h case   32:*/		return 0x8208A9CC;
		  /* 8208A9CCh */ case   33:  		/* bc 12, CR0_LT, 84 */
		/* 8208A9CCh case   33:*/		if ( regs.CR[0].lt ) { return 0x8208AA20;  }
		/* 8208A9CCh case   33:*/		return 0x8208A9D0;
		  /* 8208A9D0h */ case   34:  		/* lwz R11, <#[R1 + 80]> */
		/* 8208A9D0h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8208A9D0h case   34:*/		return 0x8208A9D4;
		  /* 8208A9D4h */ case   35:  		/* lwz R10, <#[R1 + 84]> */
		/* 8208A9D4h case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8208A9D4h case   35:*/		return 0x8208A9D8;
		  /* 8208A9D8h */ case   36:  		/* lwz R9, <#[R11 + 8]> */
		/* 8208A9D8h case   36:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 8208A9D8h case   36:*/		return 0x8208A9DC;
		  /* 8208A9DCh */ case   37:  		/* add R10, R9, R10 */
		/* 8208A9DCh case   37:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8208A9DCh case   37:*/		return 0x8208A9E0;
		  /* 8208A9E0h */ case   38:  		/* stw R10, <#[R11 + 8]> */
		/* 8208A9E0h case   38:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8208A9E0h case   38:*/		return 0x8208A9E4;
		  /* 8208A9E4h */ case   39:  		/* lwz R10, <#[R1 + 80]> */
		/* 8208A9E4h case   39:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8208A9E4h case   39:*/		return 0x8208A9E8;
		  /* 8208A9E8h */ case   40:  		/* lwz R11, <#[R1 + 92]> */
		/* 8208A9E8h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8208A9E8h case   40:*/		return 0x8208A9EC;
		  /* 8208A9ECh */ case   41:  		/* b 200 */
		/* 8208A9ECh case   41:*/		return 0x8208AAB4;
		/* 8208A9ECh case   41:*/		return 0x8208A9F0;
	}
	return 0x8208A9F0;
} // Block from 8208A948h-8208A9F0h (42 instructions)

//////////////////////////////////////////////////////
// Block at 8208A9F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208A9F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208A9F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208A9F0);
		  /* 8208A9F0h */ case    0:  		/* lis R11, 16 */
		/* 8208A9F0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x10);
		/* 8208A9F0h case    0:*/		return 0x8208A9F4;
		  /* 8208A9F4h */ case    1:  		/* stw R30, <#[R1 + 80]> */
		/* 8208A9F4h case    1:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000050) );
		/* 8208A9F4h case    1:*/		return 0x8208A9F8;
		  /* 8208A9F8h */ case    2:  		/* lis R5, 24576 */
		/* 8208A9F8h case    2:*/		cpu::op::lis<0>(regs,&regs.R5,0x6000);
		/* 8208A9F8h case    2:*/		return 0x8208A9FC;
		  /* 8208A9FCh */ case    3:  		/* stw R11, <#[R1 + 88]> */
		/* 8208A9FCh case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 8208A9FCh case    3:*/		return 0x8208AA00;
		  /* 8208AA00h */ case    4:  		/* li R6, 4 */
		/* 8208AA00h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8208AA00h case    4:*/		return 0x8208AA04;
		  /* 8208AA04h */ case    5:  		/* ori R5, R5, 8192 */
		/* 8208AA04h case    5:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x2000);
		/* 8208AA04h case    5:*/		return 0x8208AA08;
		  /* 8208AA08h */ case    6:  		/* addi R4, R1, 88 */
		/* 8208AA08h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x58);
		/* 8208AA08h case    6:*/		return 0x8208AA0C;
		  /* 8208AA0Ch */ case    7:  		/* addi R3, R1, 80 */
		/* 8208AA0Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8208AA0Ch case    7:*/		return 0x8208AA10;
		  /* 8208AA10h */ case    8:  		/* lwz R7, <#[R10 + 1424]> */
		/* 8208AA10h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000590) );
		/* 8208AA10h case    8:*/		return 0x8208AA14;
		  /* 8208AA14h */ case    9:  		/* bl 1976868 */
		/* 8208AA14h case    9:*/		regs.LR = 0x8208AA18; return 0x8226D438;
		/* 8208AA14h case    9:*/		return 0x8208AA18;
		  /* 8208AA18h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 8208AA18h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8208AA18h case   10:*/		return 0x8208AA1C;
		  /* 8208AA1Ch */ case   11:  		/* bc 4, CR0_LT, 12 */
		/* 8208AA1Ch case   11:*/		if ( !regs.CR[0].lt ) { return 0x8208AA28;  }
		/* 8208AA1Ch case   11:*/		return 0x8208AA20;
	}
	return 0x8208AA20;
} // Block from 8208A9F0h-8208AA20h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8208AA20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208AA20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208AA20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208AA20);
		  /* 8208AA20h */ case    0:  		/* li R3, 0 */
		/* 8208AA20h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8208AA20h case    0:*/		return 0x8208AA24;
		  /* 8208AA24h */ case    1:  		/* b 228 */
		/* 8208AA24h case    1:*/		return 0x8208AB08;
		/* 8208AA24h case    1:*/		return 0x8208AA28;
	}
	return 0x8208AA28;
} // Block from 8208AA20h-8208AA28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8208AA28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208AA28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208AA28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208AA28);
		  /* 8208AA28h */ case    0:  		/* lis R11, 1 */
		/* 8208AA28h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x1);
		/* 8208AA28h case    0:*/		return 0x8208AA2C;
		  /* 8208AA2Ch */ case    1:  		/* lwz R10, <#[R31 + 24]> */
		/* 8208AA2Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 8208AA2Ch case    1:*/		return 0x8208AA30;
		  /* 8208AA30h */ case    2:  		/* lis R5, 24576 */
		/* 8208AA30h case    2:*/		cpu::op::lis<0>(regs,&regs.R5,0x6000);
		/* 8208AA30h case    2:*/		return 0x8208AA34;
		  /* 8208AA34h */ case    3:  		/* stw R11, <#[R1 + 84]> */
		/* 8208AA34h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8208AA34h case    3:*/		return 0x8208AA38;
		  /* 8208AA38h */ case    4:  		/* li R6, 4 */
		/* 8208AA38h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 8208AA38h case    4:*/		return 0x8208AA3C;
		  /* 8208AA3Ch */ case    5:  		/* ori R5, R5, 4096 */
		/* 8208AA3Ch case    5:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1000);
		/* 8208AA3Ch case    5:*/		return 0x8208AA40;
		  /* 8208AA40h */ case    6:  		/* addi R4, R1, 84 */
		/* 8208AA40h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x54);
		/* 8208AA40h case    6:*/		return 0x8208AA44;
		  /* 8208AA44h */ case    7:  		/* addi R3, R1, 80 */
		/* 8208AA44h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8208AA44h case    7:*/		return 0x8208AA48;
		  /* 8208AA48h */ case    8:  		/* lwz R7, <#[R10 + 1424]> */
		/* 8208AA48h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000590) );
		/* 8208AA48h case    8:*/		return 0x8208AA4C;
		  /* 8208AA4Ch */ case    9:  		/* bl 1976812 */
		/* 8208AA4Ch case    9:*/		regs.LR = 0x8208AA50; return 0x8226D438;
		/* 8208AA4Ch case    9:*/		return 0x8208AA50;
		  /* 8208AA50h */ case   10:  		/* lwz R11, <#[R31 + 24]> */
		/* 8208AA50h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8208AA50h case   10:*/		return 0x8208AA54;
		  /* 8208AA54h */ case   11:  		/* cmpwi CR0, R3, 0 */
		/* 8208AA54h case   11:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8208AA54h case   11:*/		return 0x8208AA58;
		  /* 8208AA58h */ case   12:  		/* bc 4, CR0_LT, 32 */
		/* 8208AA58h case   12:*/		if ( !regs.CR[0].lt ) { return 0x8208AA78;  }
		/* 8208AA58h case   12:*/		return 0x8208AA5C;
		  /* 8208AA5Ch */ case   13:  		/* lis R5, 0 */
		/* 8208AA5Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R5,0x0);
		/* 8208AA5Ch case   13:*/		return 0x8208AA60;
		  /* 8208AA60h */ case   14:  		/* lwz R6, <#[R11 + 1424]> */
		/* 8208AA60h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000590) );
		/* 8208AA60h case   14:*/		return 0x8208AA64;
		  /* 8208AA64h */ case   15:  		/* addi R4, R1, 88 */
		/* 8208AA64h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x58);
		/* 8208AA64h case   15:*/		return 0x8208AA68;
		  /* 8208AA68h */ case   16:  		/* ori R5, R5, 32768 */
		/* 8208AA68h case   16:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x8000);
		/* 8208AA68h case   16:*/		return 0x8208AA6C;
		  /* 8208AA6Ch */ case   17:  		/* addi R3, R1, 80 */
		/* 8208AA6Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8208AA6Ch case   17:*/		return 0x8208AA70;
		  /* 8208AA70h */ case   18:  		/* bl 1976808 */
		/* 8208AA70h case   18:*/		regs.LR = 0x8208AA74; return 0x8226D458;
		/* 8208AA70h case   18:*/		return 0x8208AA74;
		  /* 8208AA74h */ case   19:  		/* b -84 */
		/* 8208AA74h case   19:*/		return 0x8208AA20;
		/* 8208AA74h case   19:*/		return 0x8208AA78;
	}
	return 0x8208AA78;
} // Block from 8208AA28h-8208AA78h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8208AA78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208AA78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208AA78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208AA78);
		  /* 8208AA78h */ case    0:  		/* lwz R11, <#[R11 + 72]> */
		/* 8208AA78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000048) );
		/* 8208AA78h case    0:*/		return 0x8208AA7C;
		  /* 8208AA7Ch */ case    1:  		/* lwz R10, <#[R1 + 80]> */
		/* 8208AA7Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8208AA7Ch case    1:*/		return 0x8208AA80;
		  /* 8208AA80h */ case    2:  		/* stw R11, <#[R10]> */
		/* 8208AA80h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8208AA80h case    2:*/		return 0x8208AA84;
		  /* 8208AA84h */ case    3:  		/* lwz R11, <#[R31 + 24]> */
		/* 8208AA84h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8208AA84h case    3:*/		return 0x8208AA88;
		  /* 8208AA88h */ case    4:  		/* lwz R10, <#[R1 + 80]> */
		/* 8208AA88h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8208AA88h case    4:*/		return 0x8208AA8C;
		  /* 8208AA8Ch */ case    5:  		/* stw R10, <#[R11 + 72]> */
		/* 8208AA8Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000048) );
		/* 8208AA8Ch case    5:*/		return 0x8208AA90;
		  /* 8208AA90h */ case    6:  		/* lwz R11, <#[R1 + 80]> */
		/* 8208AA90h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8208AA90h case    6:*/		return 0x8208AA94;
		  /* 8208AA94h */ case    7:  		/* lwz R10, <#[R1 + 88]> */
		/* 8208AA94h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 8208AA94h case    7:*/		return 0x8208AA98;
		  /* 8208AA98h */ case    8:  		/* stw R10, <#[R11 + 4]> */
		/* 8208AA98h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8208AA98h case    8:*/		return 0x8208AA9C;
		  /* 8208AA9Ch */ case    9:  		/* lwz R11, <#[R1 + 80]> */
		/* 8208AA9Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8208AA9Ch case    9:*/		return 0x8208AAA0;
		  /* 8208AAA0h */ case   10:  		/* lwz R10, <#[R1 + 84]> */
		/* 8208AAA0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8208AAA0h case   10:*/		return 0x8208AAA4;
		  /* 8208AAA4h */ case   11:  		/* stw R10, <#[R11 + 8]> */
		/* 8208AAA4h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8208AAA4h case   11:*/		return 0x8208AAA8;
		  /* 8208AAA8h */ case   12:  		/* lwz R10, <#[R1 + 80]> */
		/* 8208AAA8h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8208AAA8h case   12:*/		return 0x8208AAAC;
		  /* 8208AAACh */ case   13:  		/* addi R11, R10, 16 */
		/* 8208AAACh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x10);
		/* 8208AAACh case   13:*/		return 0x8208AAB0;
		  /* 8208AAB0h */ case   14:  		/* stw R11, <#[R1 + 92]> */
		/* 8208AAB0h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8208AAB0h case   14:*/		return 0x8208AAB4;
	}
	return 0x8208AAB4;
} // Block from 8208AA78h-8208AAB4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8208AAB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208AAB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208AAB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208AAB4);
		  /* 8208AAB4h */ case    0:  		/* lwz R9, <#[R10 + 8]> */
		/* 8208AAB4h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 8208AAB4h case    0:*/		return 0x8208AAB8;
		  /* 8208AAB8h */ case    1:  		/* lwz R8, <#[R31 + 24]> */
		/* 8208AAB8h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000018) );
		/* 8208AAB8h case    1:*/		return 0x8208AABC;
		  /* 8208AABCh */ case    2:  		/* add R10, R9, R10 */
		/* 8208AABCh case    2:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8208AABCh case    2:*/		return 0x8208AAC0;
		  /* 8208AAC0h */ case    3:  		/* addi R9, R8, 76 */
		/* 8208AAC0h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x4C);
		/* 8208AAC0h case    3:*/		return 0x8208AAC4;
		  /* 8208AAC4h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 8208AAC4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8208AAC4h case    4:*/		return 0x8208AAC8;
		  /* 8208AAC8h */ case    5:  		/* bc 4, CR6_LT, 40 */
		/* 8208AAC8h case    5:*/		if ( !regs.CR[6].lt ) { return 0x8208AAF0;  }
		/* 8208AAC8h case    5:*/		return 0x8208AACC;
		  /* 8208AACCh */ case    6:  		/* subf R10, R11, R10 */
		/* 8208AACCh case    6:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 8208AACCh case    6:*/		return 0x8208AAD0;
		  /* 8208AAD0h */ case    7:  		/* addi R10, R10, -1 */
		/* 8208AAD0h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8208AAD0h case    7:*/		return 0x8208AAD4;
		  /* 8208AAD4h */ case    8:  		/* rlwinm R10, R10, 28, 4, 31 */
		/* 8208AAD4h case    8:*/		cpu::op::rlwinm<0,28,4,31>(regs,&regs.R10,regs.R10);
		/* 8208AAD4h case    8:*/		return 0x8208AAD8;
		  /* 8208AAD8h */ case    9:  		/* addi R10, R10, 1 */
		/* 8208AAD8h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8208AAD8h case    9:*/		return 0x8208AADC;
		  /* 8208AADCh */ case   10:  		/* mtspr CTR, R10 */
		/* 8208AADCh case   10:*/		regs.CTR = regs.R10;
		/* 8208AADCh case   10:*/		return 0x8208AAE0;
		  /* 8208AAE0h */ case   11:  		/* stw R11, <#[R9]> */
		/* 8208AAE0h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 8208AAE0h case   11:*/		return 0x8208AAE4;
		  /* 8208AAE4h */ case   12:  		/* mr R9, R11 */
		/* 8208AAE4h case   12:*/		regs.R9 = regs.R11;
		/* 8208AAE4h case   12:*/		return 0x8208AAE8;
		  /* 8208AAE8h */ case   13:  		/* addi R11, R11, 16 */
		/* 8208AAE8h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 8208AAE8h case   13:*/		return 0x8208AAEC;
		  /* 8208AAECh */ case   14:  		/* bc 16, CR0_LT, -12 */
		/* 8208AAECh case   14:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8208AAE0;  }
		/* 8208AAECh case   14:*/		return 0x8208AAF0;
	}
	return 0x8208AAF0;
} // Block from 8208AAB4h-8208AAF0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8208AAF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208AAF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208AAF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208AAF0);
		  /* 8208AAF0h */ case    0:  		/* stw R30, <#[R9]> */
		/* 8208AAF0h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R9 + 0x00000000) );
		/* 8208AAF0h case    0:*/		return 0x8208AAF4;
		  /* 8208AAF4h */ case    1:  		/* lwz R11, <#[R31 + 24]> */
		/* 8208AAF4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000018) );
		/* 8208AAF4h case    1:*/		return 0x8208AAF8;
		  /* 8208AAF8h */ case    2:  		/* addi R11, R11, 76 */
		/* 8208AAF8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4C);
		/* 8208AAF8h case    2:*/		return 0x8208AAFC;
	}
	return 0x8208AAFC;
} // Block from 8208AAF0h-8208AAFCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8208AAFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208AAFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208AAFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208AAFC);
		  /* 8208AAFCh */ case    0:  		/* lwz R3, <#[R11]> */
		/* 8208AAFCh case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 8208AAFCh case    0:*/		return 0x8208AB00;
		  /* 8208AB00h */ case    1:  		/* lwz R10, <#[R3]> */
		/* 8208AB00h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8208AB00h case    1:*/		return 0x8208AB04;
		  /* 8208AB04h */ case    2:  		/* stw R10, <#[R11]> */
		/* 8208AB04h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8208AB04h case    2:*/		return 0x8208AB08;
	}
	return 0x8208AB08;
} // Block from 8208AAFCh-8208AB08h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8208AB08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208AB08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208AB08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208AB08);
		  /* 8208AB08h */ case    0:  		/* addi R1, R1, 128 */
		/* 8208AB08h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8208AB08h case    0:*/		return 0x8208AB0C;
		  /* 8208AB0Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8208AB0Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8208AB0Ch case    1:*/		return 0x8208AB10;
		  /* 8208AB10h */ case    2:  		/* mtspr LR, R12 */
		/* 8208AB10h case    2:*/		regs.LR = regs.R12;
		/* 8208AB10h case    2:*/		return 0x8208AB14;
		  /* 8208AB14h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8208AB14h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8208AB14h case    3:*/		return 0x8208AB18;
		  /* 8208AB18h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8208AB18h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8208AB18h case    4:*/		return 0x8208AB1C;
		  /* 8208AB1Ch */ case    5:  		/* bclr 20, CR0_LT */
		/* 8208AB1Ch case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8208AB1Ch case    5:*/		return 0x8208AB20;
	}
	return 0x8208AB20;
} // Block from 8208AB08h-8208AB20h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8208AB20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8208AB20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8208AB20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8208AB20);
		  /* 8208AB20h */ case    0:  		/* mfspr R12, LR */
		/* 8208AB20h case    0:*/		regs.R12 = regs.LR;
		/* 8208AB20h case    0:*/		return 0x8208AB24;
		  /* 8208AB24h */ case    1:  		/* bl 26420 */
		/* 8208AB24h case    1:*/		regs.LR = 0x8208AB28; return 0x82091258;
		/* 8208AB24h case    1:*/		return 0x8208AB28;
		  /* 8208AB28h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8208AB28h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8208AB28h case    2:*/		return 0x8208AB2C;
		  /* 8208AB2Ch */ case    3:  		/* lwz R11, <#[R3 + 56]> */
		/* 8208AB2Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000038) );
		/* 8208AB2Ch case    3:*/		return 0x8208AB30;
		  /* 8208AB30h */ case    4:  		/* mr R31, R3 */
		/* 8208AB30h case    4:*/		regs.R31 = regs.R3;
		/* 8208AB30h case    4:*/		return 0x8208AB34;
		  /* 8208AB34h */ case    5:  		/* mr R29, R4 */
		/* 8208AB34h case    5:*/		regs.R29 = regs.R4;
		/* 8208AB34h case    5:*/		return 0x8208AB38;
		  /* 8208AB38h */ case    6:  		/* mr R30, R5 */
		/* 8208AB38h case    6:*/		regs.R30 = regs.R5;
		/* 8208AB38h case    6:*/		return 0x8208AB3C;
		  /* 8208AB3Ch */ case    7:  		/* addi R28, R3, 56 */
		/* 8208AB3Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R3,0x38);
		/* 8208AB3Ch case    7:*/		return 0x8208AB40;
		  /* 8208AB40h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 8208AB40h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8208AB40h case    8:*/		return 0x8208AB44;
		  /* 8208AB44h */ case    9:  		/* bc 12, CR6_EQ, 128 */
		/* 8208AB44h case    9:*/		if ( regs.CR[6].eq ) { return 0x8208ABC4;  }
		/* 8208AB44h case    9:*/		return 0x8208AB48;
		  /* 8208AB48h */ case   10:  		/* li R8, 0 */
		/* 8208AB48h case   10:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8208AB48h case   10:*/		return 0x8208AB4C;
		  /* 8208AB4Ch */ case   11:  		/* lwz R10, <#[R11 + 4]> */
		/* 8208AB4Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8208AB4Ch case   11:*/		return 0x8208AB50;
		  /* 8208AB50h */ case   12:  		/* cmplw CR6, R10, R29 */
		/* 8208AB50h case   12:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 8208AB50h case   12:*/		return 0x8208AB54;
		  /* 8208AB54h */ case   13:  		/* bc 12, CR6_GT, 184 */
		/* 8208AB54h case   13:*/		if ( regs.CR[6].gt ) { return 0x8208AC0C;  }
		/* 8208AB54h case   13:*/		return 0x8208AB58;
		  /* 8208AB58h */ case   14:  		/* lwz R9, <#[R11 + 8]> */
		/* 8208AB58h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 8208AB58h case   14:*/		return 0x8208AB5C;
		  /* 8208AB5Ch */ case   15:  		/* add R7, R9, R10 */
		/* 8208AB5Ch case   15:*/		cpu::op::add<0>(regs,&regs.R7,regs.R9,regs.R10);
		/* 8208AB5Ch case   15:*/		return 0x8208AB60;
		  /* 8208AB60h */ case   16:  		/* cmplw CR6, R7, R29 */
		/* 8208AB60h case   16:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R29);
		/* 8208AB60h case   16:*/		return 0x8208AB64;
		  /* 8208AB64h */ case   17:  		/* bc 4, CR6_EQ, 80 */
		/* 8208AB64h case   17:*/		if ( !regs.CR[6].eq ) { return 0x8208ABB4;  }
		/* 8208AB64h case   17:*/		return 0x8208AB68;
		  /* 8208AB68h */ case   18:  		/* lwz R7, <#[R11]> */
		/* 8208AB68h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8208AB68h case   18:*/		return 0x8208AB6C;
		  /* 8208AB6Ch */ case   19:  		/* mr R29, R10 */
		/* 8208AB6Ch case   19:*/		regs.R29 = regs.R10;
		/* 8208AB6Ch case   19:*/		return 0x8208AB70;
		  /* 8208AB70h */ case   20:  		/* add R30, R9, R30 */
		/* 8208AB70h case   20:*/		cpu::op::add<0>(regs,&regs.R30,regs.R9,regs.R30);
		/* 8208AB70h case   20:*/		return 0x8208AB74;
		  /* 8208AB74h */ case   21:  		/* stw R7, <#[R28]> */
		/* 8208AB74h case   21:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R28 + 0x00000000) );
		/* 8208AB74h case   21:*/		return 0x8208AB78;
		  /* 8208AB78h */ case   22:  		/* lwz R10, <#[R31 + 24]> */
		/* 8208AB78h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 8208AB78h case   22:*/		return 0x8208AB7C;
		  /* 8208AB7Ch */ case   23:  		/* lwz R10, <#[R10 + 76]> */
		/* 8208AB7Ch case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000004C) );
		/* 8208AB7Ch case   23:*/		return 0x8208AB80;
		  /* 8208AB80h */ case   24:  		/* stw R10, <#[R11]> */
		/* 8208AB80h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8208AB80h case   24:*/		return 0x8208AB84;
		  /* 8208AB84h */ case   25:  		/* lwz R10, <#[R31 + 24]> */
		/* 8208AB84h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 8208AB84h case   25:*/		return 0x8208AB88;
		  /* 8208AB88h */ case   26:  		/* stw R11, <#[R10 + 76]> */
		/* 8208AB88h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x0000004C) );
		/* 8208AB88h case   26:*/		return 0x8208AB8C;
		  /* 8208AB8Ch */ case   27:  		/* stw R8, <#[R11 + 4]> */
		/* 8208AB8Ch case   27:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 8208AB8Ch case   27:*/		return 0x8208AB90;
		  /* 8208AB90h */ case   28:  		/* stw R8, <#[R11 + 8]> */
		/* 8208AB90h case   28:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 8208AB90h case   28:*/		return 0x8208AB94;
		  /* 8208AB94h */ case   29:  		/* lwz R10, <#[R31 + 28]> */
		/* 8208AB94h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 8208AB94h case   29:*/		return 0x8208AB98;
		  /* 8208AB98h */ case   30:  		/* lwz R11, <#[R31 + 52]> */
		/* 8208AB98h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000034) );
		/* 8208AB98h case   30:*/		return 0x8208AB9C;
		  /* 8208AB9Ch */ case   31:  		/* addi R11, R11, -1 */
		/* 8208AB9Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8208AB9Ch case   31:*/		return 0x8208ABA0;
		  /* 8208ABA0h */ case   32:  		/* cmplw CR6, R30, R10 */
		/* 8208ABA0h case   32:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R10);
		/* 8208ABA0h case   32:*/		return 0x8208ABA4;
		  /* 8208ABA4h */ case   33:  		/* stw R11, <#[R31 + 52]> */
		/* 8208ABA4h case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000034) );
		/* 8208ABA4h case   33:*/		return 0x8208ABA8;
		  /* 8208ABA8h */ case   34:  		/* bc 4, CR6_GT, 16 */
		/* 8208ABA8h case   34:*/		if ( !regs.CR[6].gt ) { return 0x8208ABB8;  }
		/* 8208ABA8h case   34:*/		return 0x8208ABAC;
		  /* 8208ABACh */ case   35:  		/* stw R30, <#[R31 + 28]> */
		/* 8208ABACh case   35:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000001C) );
		/* 8208ABACh case   35:*/		return 0x8208ABB0;
		  /* 8208ABB0h */ case   36:  		/* b 8 */
		/* 8208ABB0h case   36:*/		return 0x8208ABB8;
		/* 8208ABB0h case   36:*/		return 0x8208ABB4;
	}
	return 0x8208ABB4;
} // Block from 8208AB20h-8208ABB4h (37 instructions)

