#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 8214B4E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B4E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B4E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B4E8);
		  /* 8214B4E8h */ case    0:  		/* lwz R11, <#[R30 + 20]> */
		/* 8214B4E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 8214B4E8h case    0:*/		return 0x8214B4EC;
		  /* 8214B4ECh */ case    1:  		/* lwz R10, <#[R30 + 16]> */
		/* 8214B4ECh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 8214B4ECh case    1:*/		return 0x8214B4F0;
		  /* 8214B4F0h */ case    2:  		/* mulli R11, R11, 476 */
		/* 8214B4F0h case    2:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x1DC);
		/* 8214B4F0h case    2:*/		return 0x8214B4F4;
		  /* 8214B4F4h */ case    3:  		/* add R11, R11, R10 */
		/* 8214B4F4h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8214B4F4h case    3:*/		return 0x8214B4F8;
		  /* 8214B4F8h */ case    4:  		/* stw R29, <#[R11 - 4]> */
		/* 8214B4F8h case    4:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 8214B4F8h case    4:*/		return 0x8214B4FC;
		  /* 8214B4FCh */ case    5:  		/* lhz R11, <#[R30 + 158]> */
		/* 8214B4FCh case    5:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000009E) );
		/* 8214B4FCh case    5:*/		return 0x8214B500;
		  /* 8214B500h */ case    6:  		/* addi R11, R11, 1 */
		/* 8214B500h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214B500h case    6:*/		return 0x8214B504;
		  /* 8214B504h */ case    7:  		/* sth R11, <#[R30 + 158]> */
		/* 8214B504h case    7:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0x0000009E) );
		/* 8214B504h case    7:*/		return 0x8214B508;
		  /* 8214B508h */ case    8:  		/* addi R1, R1, 112 */
		/* 8214B508h case    8:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214B508h case    8:*/		return 0x8214B50C;
		  /* 8214B50Ch */ case    9:  		/* b -762464 */
		/* 8214B50Ch case    9:*/		return 0x820912AC;
		/* 8214B50Ch case    9:*/		return 0x8214B510;
	}
	return 0x8214B510;
} // Block from 8214B4E8h-8214B510h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8214B510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B510);
		  /* 8214B510h */ case    0:  		/* mfspr R12, LR */
		/* 8214B510h case    0:*/		regs.R12 = regs.LR;
		/* 8214B510h case    0:*/		return 0x8214B514;
		  /* 8214B514h */ case    1:  		/* bl -762552 */
		/* 8214B514h case    1:*/		regs.LR = 0x8214B518; return 0x8209125C;
		/* 8214B514h case    1:*/		return 0x8214B518;
		  /* 8214B518h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8214B518h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8214B518h case    2:*/		return 0x8214B51C;
		  /* 8214B51Ch */ case    3:  		/* lwz R11, <#[R3 + 148]> */
		/* 8214B51Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000094) );
		/* 8214B51Ch case    3:*/		return 0x8214B520;
		  /* 8214B520h */ case    4:  		/* mr R31, R3 */
		/* 8214B520h case    4:*/		regs.R31 = regs.R3;
		/* 8214B520h case    4:*/		return 0x8214B524;
		  /* 8214B524h */ case    5:  		/* mr R30, R4 */
		/* 8214B524h case    5:*/		regs.R30 = regs.R4;
		/* 8214B524h case    5:*/		return 0x8214B528;
		  /* 8214B528h */ case    6:  		/* mr R29, R5 */
		/* 8214B528h case    6:*/		regs.R29 = regs.R5;
		/* 8214B528h case    6:*/		return 0x8214B52C;
		  /* 8214B52Ch */ case    7:  		/* cmpwi CR6, R11, 2 */
		/* 8214B52Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8214B52Ch case    7:*/		return 0x8214B530;
	}
	return 0x8214B530;
} // Block from 8214B510h-8214B530h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214B530h
// Function '?Lookup@ShaderPDBBuilder@XGRAPHICS@@AAAJPBDPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B530);
		  /* 8214B530h */ case    0:  		/* bc 4, CR6_EQ, 72 */
		/* 8214B530h case    0:*/		if ( !regs.CR[6].eq ) { return 0x8214B578;  }
		/* 8214B530h case    0:*/		return 0x8214B534;
		  /* 8214B534h */ case    1:  		/* lwz R8, <#[R3 + 128]> */
		/* 8214B534h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000080) );
		/* 8214B534h case    1:*/		return 0x8214B538;
		  /* 8214B538h */ case    2:  		/* mr R11, R4 */
		/* 8214B538h case    2:*/		regs.R11 = regs.R4;
		/* 8214B538h case    2:*/		return 0x8214B53C;
		  /* 8214B53Ch */ case    3:  		/* mr R10, R8 */
		/* 8214B53Ch case    3:*/		regs.R10 = regs.R8;
		/* 8214B53Ch case    3:*/		return 0x8214B540;
		  /* 8214B540h */ case    4:  		/* lbz R9, <#[R11]> */
		/* 8214B540h case    4:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8214B540h case    4:*/		return 0x8214B544;
		  /* 8214B544h */ case    5:  		/* lbz R7, <#[R10]> */
		/* 8214B544h case    5:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 8214B544h case    5:*/		return 0x8214B548;
		  /* 8214B548h */ case    6:  		/* cmpwi CR0, R9, 0 */
		/* 8214B548h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8214B548h case    6:*/		return 0x8214B54C;
		  /* 8214B54Ch */ case    7:  		/* subf R9, R7, R9 */
		/* 8214B54Ch case    7:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 8214B54Ch case    7:*/		return 0x8214B550;
		  /* 8214B550h */ case    8:  		/* bc 12, CR0_EQ, 20 */
		/* 8214B550h case    8:*/		if ( regs.CR[0].eq ) { return 0x8214B564;  }
		/* 8214B550h case    8:*/		return 0x8214B554;
		  /* 8214B554h */ case    9:  		/* addi R11, R11, 1 */
		/* 8214B554h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214B554h case    9:*/		return 0x8214B558;
		  /* 8214B558h */ case   10:  		/* addi R10, R10, 1 */
		/* 8214B558h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8214B558h case   10:*/		return 0x8214B55C;
		  /* 8214B55Ch */ case   11:  		/* cmpwi CR6, R9, 0 */
		/* 8214B55Ch case   11:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8214B55Ch case   11:*/		return 0x8214B560;
		  /* 8214B560h */ case   12:  		/* bc 12, CR6_EQ, -32 */
		/* 8214B560h case   12:*/		if ( regs.CR[6].eq ) { return 0x8214B540;  }
		/* 8214B560h case   12:*/		return 0x8214B564;
	}
	return 0x8214B564;
} // Block from 8214B530h-8214B564h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214B564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B564);
		  /* 8214B564h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 8214B564h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8214B564h case    0:*/		return 0x8214B568;
		  /* 8214B568h */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 8214B568h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8214B578;  }
		/* 8214B568h case    1:*/		return 0x8214B56C;
		  /* 8214B56Ch */ case    2:  		/* lwz R11, <#[R8 + 256]> */
		/* 8214B56Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000100) );
		/* 8214B56Ch case    2:*/		return 0x8214B570;
		  /* 8214B570h */ case    3:  		/* cmplw CR6, R11, R29 */
		/* 8214B570h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 8214B570h case    3:*/		return 0x8214B574;
		  /* 8214B574h */ case    4:  		/* bc 12, CR6_EQ, 196 */
		/* 8214B574h case    4:*/		if ( regs.CR[6].eq ) { return 0x8214B638;  }
		/* 8214B574h case    4:*/		return 0x8214B578;
	}
	return 0x8214B578;
} // Block from 8214B564h-8214B578h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214B578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B578);
		  /* 8214B578h */ case    0:  		/* lwz R11, <#[R31 + 160]> */
		/* 8214B578h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000A0) );
		/* 8214B578h case    0:*/		return 0x8214B57C;
		  /* 8214B57Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8214B57Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214B57Ch case    1:*/		return 0x8214B580;
		  /* 8214B580h */ case    2:  		/* bc 4, CR6_EQ, 56 */
		/* 8214B580h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8214B5B8;  }
		/* 8214B580h case    2:*/		return 0x8214B584;
		  /* 8214B584h */ case    3:  		/* lis R11, -32253 */
		/* 8214B584h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214B584h case    3:*/		return 0x8214B588;
		  /* 8214B588h */ case    4:  		/* lwz R3, <#[R31 + 132]> */
		/* 8214B588h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000084) );
		/* 8214B588h case    4:*/		return 0x8214B58C;
		  /* 8214B58Ch */ case    5:  		/* addi R4, R11, 26576 */
		/* 8214B58Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x67D0);
		/* 8214B58Ch case    5:*/		return 0x8214B590;
		  /* 8214B590h */ case    6:  		/* bl -754016 */
		/* 8214B590h case    6:*/		regs.LR = 0x8214B594; return 0x82093430;
		/* 8214B590h case    6:*/		return 0x8214B594;
		  /* 8214B594h */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 8214B594h case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8214B594h case    7:*/		return 0x8214B598;
		  /* 8214B598h */ case    8:  		/* mr R3, R31 */
		/* 8214B598h case    8:*/		regs.R3 = regs.R31;
		/* 8214B598h case    8:*/		return 0x8214B59C;
		  /* 8214B59Ch */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 8214B59Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x8214B5AC;  }
		/* 8214B59Ch case    9:*/		return 0x8214B5A0;
		  /* 8214B5A0h */ case   10:  		/* mr R5, R29 */
		/* 8214B5A0h case   10:*/		regs.R5 = regs.R29;
		/* 8214B5A0h case   10:*/		return 0x8214B5A4;
		  /* 8214B5A4h */ case   11:  		/* mr R4, R30 */
		/* 8214B5A4h case   11:*/		regs.R4 = regs.R30;
		/* 8214B5A4h case   11:*/		return 0x8214B5A8;
		  /* 8214B5A8h */ case   12:  		/* b 12 */
		/* 8214B5A8h case   12:*/		return 0x8214B5B4;
		/* 8214B5A8h case   12:*/		return 0x8214B5AC;
	}
	return 0x8214B5AC;
} // Block from 8214B578h-8214B5ACh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214B5ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B5AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B5AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B5AC);
		  /* 8214B5ACh */ case    0:  		/* li R5, 0 */
		/* 8214B5ACh case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8214B5ACh case    0:*/		return 0x8214B5B0;
		  /* 8214B5B0h */ case    1:  		/* li R4, 0 */
		/* 8214B5B0h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214B5B0h case    1:*/		return 0x8214B5B4;
	}
	return 0x8214B5B4;
} // Block from 8214B5ACh-8214B5B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214B5B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B5B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B5B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B5B4);
		  /* 8214B5B4h */ case    0:  		/* bl -12340 */
		/* 8214B5B4h case    0:*/		regs.LR = 0x8214B5B8; return 0x82148580;
		/* 8214B5B4h case    0:*/		return 0x8214B5B8;
	}
	return 0x8214B5B8;
} // Block from 8214B5B4h-8214B5B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214B5B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B5B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B5B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B5B8);
		  /* 8214B5B8h */ case    0:  		/* lwz R11, <#[R31 + 148]> */
		/* 8214B5B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000094) );
		/* 8214B5B8h case    0:*/		return 0x8214B5BC;
		  /* 8214B5BCh */ case    1:  		/* li R9, 0 */
		/* 8214B5BCh case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8214B5BCh case    1:*/		return 0x8214B5C0;
		  /* 8214B5C0h */ case    2:  		/* cmpwi CR6, R11, 1 */
		/* 8214B5C0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8214B5C0h case    2:*/		return 0x8214B5C4;
		  /* 8214B5C4h */ case    3:  		/* bc 12, CR6_EQ, 80 */
		/* 8214B5C4h case    3:*/		if ( regs.CR[6].eq ) { return 0x8214B614;  }
		/* 8214B5C4h case    3:*/		return 0x8214B5C8;
		  /* 8214B5C8h */ case    4:  		/* lwz R11, <#[R31 + 160]> */
		/* 8214B5C8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000A0) );
		/* 8214B5C8h case    4:*/		return 0x8214B5CC;
		  /* 8214B5CCh */ case    5:  		/* rlwinm R11, R11, 0, 16, 31 */
		/* 8214B5CCh case    5:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R11);
		/* 8214B5CCh case    5:*/		return 0x8214B5D0;
		  /* 8214B5D0h */ case    6:  		/* mr R10, R11 */
		/* 8214B5D0h case    6:*/		regs.R10 = regs.R11;
		/* 8214B5D0h case    6:*/		return 0x8214B5D4;
		  /* 8214B5D4h */ case    7:  		/* cmplwi CR6, R11, 65534 */
		/* 8214B5D4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000FFFE);
		/* 8214B5D4h case    7:*/		return 0x8214B5D8;
		  /* 8214B5D8h */ case    8:  		/* bc 12, CR6_LT, 16 */
		/* 8214B5D8h case    8:*/		if ( regs.CR[6].lt ) { return 0x8214B5E8;  }
		/* 8214B5D8h case    8:*/		return 0x8214B5DC;
		  /* 8214B5DCh */ case    9:  		/* lis R11, -32768 */
		/* 8214B5DCh case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 8214B5DCh case    9:*/		return 0x8214B5E0;
		  /* 8214B5E0h */ case   10:  		/* ori R11, R11, 16389 */
		/* 8214B5E0h case   10:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4005);
		/* 8214B5E0h case   10:*/		return 0x8214B5E4;
		  /* 8214B5E4h */ case   11:  		/* stw R11, <#[R31 + 144]> */
		/* 8214B5E4h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000090) );
		/* 8214B5E4h case   11:*/		return 0x8214B5E8;
	}
	return 0x8214B5E8;
} // Block from 8214B5B8h-8214B5E8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8214B5E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B5E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B5E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B5E8);
		  /* 8214B5E8h */ case    0:  		/* lhz R11, <#[R31 + 156]> */
		/* 8214B5E8h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000009C) );
		/* 8214B5E8h case    0:*/		return 0x8214B5EC;
		  /* 8214B5ECh */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 8214B5ECh case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8214B5ECh case    1:*/		return 0x8214B5F0;
		  /* 8214B5F0h */ case    2:  		/* add R11, R11, R10 */
		/* 8214B5F0h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8214B5F0h case    2:*/		return 0x8214B5F4;
		  /* 8214B5F4h */ case    3:  		/* bc 4, CR0_EQ, 8 */
		/* 8214B5F4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8214B5FC;  }
		/* 8214B5F4h case    3:*/		return 0x8214B5F8;
		  /* 8214B5F8h */ case    4:  		/* addi R11, R10, 1 */
		/* 8214B5F8h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x1);
		/* 8214B5F8h case    4:*/		return 0x8214B5FC;
	}
	return 0x8214B5FC;
} // Block from 8214B5E8h-8214B5FCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214B5FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B5FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B5FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B5FC);
		  /* 8214B5FCh */ case    0:  		/* rlwinm R11, R11, 0, 16, 31 */
		/* 8214B5FCh case    0:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R11);
		/* 8214B5FCh case    0:*/		return 0x8214B600;
		  /* 8214B600h */ case    1:  		/* sth R9, <#[R31 + 162]> */
		/* 8214B600h case    1:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R31 + 0x000000A2) );
		/* 8214B600h case    1:*/		return 0x8214B604;
		  /* 8214B604h */ case    2:  		/* lwz R10, <#[R31 + 160]> */
		/* 8214B604h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000000A0) );
		/* 8214B604h case    2:*/		return 0x8214B608;
		  /* 8214B608h */ case    3:  		/* rlwinm R11, R11, 0, 16, 31 */
		/* 8214B608h case    3:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R11);
		/* 8214B608h case    3:*/		return 0x8214B60C;
		  /* 8214B60Ch */ case    4:  		/* or R11, R11, R10 */
		/* 8214B60Ch case    4:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8214B60Ch case    4:*/		return 0x8214B610;
		  /* 8214B610h */ case    5:  		/* stw R11, <#[R31 + 160]> */
		/* 8214B610h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000000A0) );
		/* 8214B610h case    5:*/		return 0x8214B614;
	}
	return 0x8214B614;
} // Block from 8214B5FCh-8214B614h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214B614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B614);
		  /* 8214B614h */ case    0:  		/* sth R9, <#[R31 + 156]> */
		/* 8214B614h case    0:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R31 + 0x0000009C) );
		/* 8214B614h case    0:*/		return 0x8214B618;
		  /* 8214B618h */ case    1:  		/* mr R5, R29 */
		/* 8214B618h case    1:*/		regs.R5 = regs.R29;
		/* 8214B618h case    1:*/		return 0x8214B61C;
		  /* 8214B61Ch */ case    2:  		/* sth R9, <#[R31 + 158]> */
		/* 8214B61Ch case    2:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R31 + 0x0000009E) );
		/* 8214B61Ch case    2:*/		return 0x8214B620;
		  /* 8214B620h */ case    3:  		/* mr R4, R30 */
		/* 8214B620h case    3:*/		regs.R4 = regs.R30;
		/* 8214B620h case    3:*/		return 0x8214B624;
		  /* 8214B624h */ case    4:  		/* stw R9, <#[R31 + 152]> */
		/* 8214B624h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000098) );
		/* 8214B624h case    4:*/		return 0x8214B628;
		  /* 8214B628h */ case    5:  		/* mr R3, R31 */
		/* 8214B628h case    5:*/		regs.R3 = regs.R31;
		/* 8214B628h case    5:*/		return 0x8214B62C;
		  /* 8214B62Ch */ case    6:  		/* bl -1124 */
		/* 8214B62Ch case    6:*/		regs.LR = 0x8214B630; return 0x8214B1C8;
		/* 8214B62Ch case    6:*/		return 0x8214B630;
		  /* 8214B630h */ case    7:  		/* li R11, 2 */
		/* 8214B630h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 8214B630h case    7:*/		return 0x8214B634;
		  /* 8214B634h */ case    8:  		/* stw R11, <#[R31 + 148]> */
		/* 8214B634h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000094) );
		/* 8214B634h case    8:*/		return 0x8214B638;
	}
	return 0x8214B638;
} // Block from 8214B614h-8214B638h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214B638h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B638);
		  /* 8214B638h */ case    0:  		/* addi R1, R1, 112 */
		/* 8214B638h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214B638h case    0:*/		return 0x8214B63C;
		  /* 8214B63Ch */ case    1:  		/* b -762768 */
		/* 8214B63Ch case    1:*/		return 0x820912AC;
		/* 8214B63Ch case    1:*/		return 0x8214B640;
	}
	return 0x8214B640;
} // Block from 8214B638h-8214B640h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214B640h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B640);
		  /* 8214B640h */ case    0:  		/* mfspr R12, LR */
		/* 8214B640h case    0:*/		regs.R12 = regs.LR;
		/* 8214B640h case    0:*/		return 0x8214B644;
		  /* 8214B644h */ case    1:  		/* bl -762872 */
		/* 8214B644h case    1:*/		regs.LR = 0x8214B648; return 0x8209124C;
		/* 8214B644h case    1:*/		return 0x8214B648;
		  /* 8214B648h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 8214B648h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 8214B648h case    2:*/		return 0x8214B64C;
		  /* 8214B64Ch */ case    3:  		/* lwz R11, <#[R3 + 144]> */
		/* 8214B64Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000090) );
		/* 8214B64Ch case    3:*/		return 0x8214B650;
		  /* 8214B650h */ case    4:  		/* mr R31, R3 */
		/* 8214B650h case    4:*/		regs.R31 = regs.R3;
		/* 8214B650h case    4:*/		return 0x8214B654;
		  /* 8214B654h */ case    5:  		/* mr R29, R4 */
		/* 8214B654h case    5:*/		regs.R29 = regs.R4;
		/* 8214B654h case    5:*/		return 0x8214B658;
		  /* 8214B658h */ case    6:  		/* mr R28, R5 */
		/* 8214B658h case    6:*/		regs.R28 = regs.R5;
		/* 8214B658h case    6:*/		return 0x8214B65C;
		  /* 8214B65Ch */ case    7:  		/* mr R27, R7 */
		/* 8214B65Ch case    7:*/		regs.R27 = regs.R7;
		/* 8214B65Ch case    7:*/		return 0x8214B660;
		  /* 8214B660h */ case    8:  		/* mr R26, R8 */
		/* 8214B660h case    8:*/		regs.R26 = regs.R8;
		/* 8214B660h case    8:*/		return 0x8214B664;
		  /* 8214B664h */ case    9:  		/* mr R25, R9 */
		/* 8214B664h case    9:*/		regs.R25 = regs.R9;
		/* 8214B664h case    9:*/		return 0x8214B668;
		  /* 8214B668h */ case   10:  		/* addi R30, R3, 144 */
		/* 8214B668h case   10:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R3,0x90);
		/* 8214B668h case   10:*/		return 0x8214B66C;
		  /* 8214B66Ch */ case   11:  		/* cmpwi CR6, R11, 0 */
		/* 8214B66Ch case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214B66Ch case   11:*/		return 0x8214B670;
		  /* 8214B670h */ case   12:  		/* bc 12, CR6_LT, 72 */
		/* 8214B670h case   12:*/		if ( regs.CR[6].lt ) { return 0x8214B6B8;  }
		/* 8214B670h case   12:*/		return 0x8214B674;
		  /* 8214B674h */ case   13:  		/* addi R5, R1, 80 */
		/* 8214B674h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8214B674h case   13:*/		return 0x8214B678;
		  /* 8214B678h */ case   14:  		/* mr R4, R6 */
		/* 8214B678h case   14:*/		regs.R4 = regs.R6;
		/* 8214B678h case   14:*/		return 0x8214B67C;
		  /* 8214B67Ch */ case   15:  		/* bl -2860 */
		/* 8214B67Ch case   15:*/		regs.LR = 0x8214B680; return 0x8214AB50;
		/* 8214B67Ch case   15:*/		return 0x8214B680;
		  /* 8214B680h */ case   16:  		/* stw R3, <#[R30]> */
		/* 8214B680h case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8214B680h case   16:*/		return 0x8214B684;
		  /* 8214B684h */ case   17:  		/* cmpwi CR0, R3, 0 */
		/* 8214B684h case   17:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8214B684h case   17:*/		return 0x8214B688;
		  /* 8214B688h */ case   18:  		/* bc 12, CR0_LT, 48 */
		/* 8214B688h case   18:*/		if ( regs.CR[0].lt ) { return 0x8214B6B8;  }
		/* 8214B688h case   18:*/		return 0x8214B68C;
		  /* 8214B68Ch */ case   19:  		/* lwz R11, <#[R1 + 80]> */
		/* 8214B68Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8214B68Ch case   19:*/		return 0x8214B690;
		  /* 8214B690h */ case   20:  		/* mr R5, R30 */
		/* 8214B690h case   20:*/		regs.R5 = regs.R30;
		/* 8214B690h case   20:*/		return 0x8214B694;
		  /* 8214B694h */ case   21:  		/* stw R29, <#[R1 + 96]> */
		/* 8214B694h case   21:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000060) );
		/* 8214B694h case   21:*/		return 0x8214B698;
		  /* 8214B698h */ case   22:  		/* addi R4, R1, 96 */
		/* 8214B698h case   22:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8214B698h case   22:*/		return 0x8214B69C;
		  /* 8214B69Ch */ case   23:  		/* stw R28, <#[R1 + 100]> */
		/* 8214B69Ch case   23:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000064) );
		/* 8214B69Ch case   23:*/		return 0x8214B6A0;
		  /* 8214B6A0h */ case   24:  		/* stw R27, <#[R1 + 108]> */
		/* 8214B6A0h case   24:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x0000006C) );
		/* 8214B6A0h case   24:*/		return 0x8214B6A4;
		  /* 8214B6A4h */ case   25:  		/* stw R26, <#[R1 + 112]> */
		/* 8214B6A4h case   25:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000070) );
		/* 8214B6A4h case   25:*/		return 0x8214B6A8;
		  /* 8214B6A8h */ case   26:  		/* stw R11, <#[R1 + 104]> */
		/* 8214B6A8h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 8214B6A8h case   26:*/		return 0x8214B6AC;
		  /* 8214B6ACh */ case   27:  		/* stw R25, <#[R1 + 116]> */
		/* 8214B6ACh case   27:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000074) );
		/* 8214B6ACh case   27:*/		return 0x8214B6B0;
		  /* 8214B6B0h */ case   28:  		/* lwz R3, <#[R31 + 28]> */
		/* 8214B6B0h case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000001C) );
		/* 8214B6B0h case   28:*/		return 0x8214B6B4;
		  /* 8214B6B4h */ case   29:  		/* bl -10348 */
		/* 8214B6B4h case   29:*/		regs.LR = 0x8214B6B8; return 0x82148E48;
		/* 8214B6B4h case   29:*/		return 0x8214B6B8;
	}
	return 0x8214B6B8;
} // Block from 8214B640h-8214B6B8h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8214B6B8h
// Function '?WriteShaders@ShaderPDBBuilder@XGRAPHICS@@AAAXPAVStream@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B6B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B6B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B6B8);
		  /* 8214B6B8h */ case    0:  		/* addi R1, R1, 192 */
		/* 8214B6B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8214B6B8h case    0:*/		return 0x8214B6BC;
		  /* 8214B6BCh */ case    1:  		/* b -762912 */
		/* 8214B6BCh case    1:*/		return 0x8209129C;
		/* 8214B6BCh case    1:*/		return 0x8214B6C0;
	}
	return 0x8214B6C0;
} // Block from 8214B6B8h-8214B6C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214B6C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B6C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B6C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B6C0);
		  /* 8214B6C0h */ case    0:  		/* mfspr R12, LR */
		/* 8214B6C0h case    0:*/		regs.R12 = regs.LR;
		/* 8214B6C0h case    0:*/		return 0x8214B6C4;
		  /* 8214B6C4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214B6C4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214B6C4h case    1:*/		return 0x8214B6C8;
		  /* 8214B6C8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8214B6C8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8214B6C8h case    2:*/		return 0x8214B6CC;
		  /* 8214B6CCh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8214B6CCh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214B6CCh case    3:*/		return 0x8214B6D0;
		  /* 8214B6D0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8214B6D0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8214B6D0h case    4:*/		return 0x8214B6D4;
		  /* 8214B6D4h */ case    5:  		/* mr R31, R3 */
		/* 8214B6D4h case    5:*/		regs.R31 = regs.R3;
		/* 8214B6D4h case    5:*/		return 0x8214B6D8;
		  /* 8214B6D8h */ case    6:  		/* mr R30, R5 */
		/* 8214B6D8h case    6:*/		regs.R30 = regs.R5;
		/* 8214B6D8h case    6:*/		return 0x8214B6DC;
		  /* 8214B6DCh */ case    7:  		/* bl -1708 */
		/* 8214B6DCh case    7:*/		regs.LR = 0x8214B6E0; return 0x8214B030;
		/* 8214B6DCh case    7:*/		return 0x8214B6E0;
		  /* 8214B6E0h */ case    8:  		/* stw R3, <#[R1 + 80]> */
		/* 8214B6E0h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 8214B6E0h case    8:*/		return 0x8214B6E4;
		  /* 8214B6E4h */ case    9:  		/* cmplwi CR6, R30, 0 */
		/* 8214B6E4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8214B6E4h case    9:*/		return 0x8214B6E8;
		  /* 8214B6E8h */ case   10:  		/* bc 12, CR6_EQ, 12 */
		/* 8214B6E8h case   10:*/		if ( regs.CR[6].eq ) { return 0x8214B6F4;  }
		/* 8214B6E8h case   10:*/		return 0x8214B6EC;
		  /* 8214B6ECh */ case   11:  		/* mr R4, R30 */
		/* 8214B6ECh case   11:*/		regs.R4 = regs.R30;
		/* 8214B6ECh case   11:*/		return 0x8214B6F0;
		  /* 8214B6F0h */ case   12:  		/* b 12 */
		/* 8214B6F0h case   12:*/		return 0x8214B6FC;
		/* 8214B6F0h case   12:*/		return 0x8214B6F4;
	}
	return 0x8214B6F4;
} // Block from 8214B6C0h-8214B6F4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214B6F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B6F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B6F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B6F4);
		  /* 8214B6F4h */ case    0:  		/* lis R11, -32256 */
		/* 8214B6F4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8214B6F4h case    0:*/		return 0x8214B6F8;
		  /* 8214B6F8h */ case    1:  		/* addi R4, R11, 4485 */
		/* 8214B6F8h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x1185);
		/* 8214B6F8h case    1:*/		return 0x8214B6FC;
	}
	return 0x8214B6FC;
} // Block from 8214B6F4h-8214B6FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214B6FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B6FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B6FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B6FC);
		  /* 8214B6FCh */ case    0:  		/* mr R3, R31 */
		/* 8214B6FCh case    0:*/		regs.R3 = regs.R31;
		/* 8214B6FCh case    0:*/		return 0x8214B700;
		  /* 8214B700h */ case    1:  		/* bl -1744 */
		/* 8214B700h case    1:*/		regs.LR = 0x8214B704; return 0x8214B030;
		/* 8214B700h case    1:*/		return 0x8214B704;
		  /* 8214B704h */ case    2:  		/* stw R3, <#[R1 + 84]> */
		/* 8214B704h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000054) );
		/* 8214B704h case    2:*/		return 0x8214B708;
		  /* 8214B708h */ case    3:  		/* addi R5, R31, 144 */
		/* 8214B708h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x90);
		/* 8214B708h case    3:*/		return 0x8214B70C;
		  /* 8214B70Ch */ case    4:  		/* addi R4, R1, 80 */
		/* 8214B70Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8214B70Ch case    4:*/		return 0x8214B710;
		  /* 8214B710h */ case    5:  		/* addi R3, R31, 32 */
		/* 8214B710h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x20);
		/* 8214B710h case    5:*/		return 0x8214B714;
		  /* 8214B714h */ case    6:  		/* bl -9676 */
		/* 8214B714h case    6:*/		regs.LR = 0x8214B718; return 0x82149148;
		/* 8214B714h case    6:*/		return 0x8214B718;
		  /* 8214B718h */ case    7:  		/* addi R1, R1, 112 */
		/* 8214B718h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214B718h case    7:*/		return 0x8214B71C;
		  /* 8214B71Ch */ case    8:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214B71Ch case    8:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214B71Ch case    8:*/		return 0x8214B720;
		  /* 8214B720h */ case    9:  		/* mtspr LR, R12 */
		/* 8214B720h case    9:*/		regs.LR = regs.R12;
		/* 8214B720h case    9:*/		return 0x8214B724;
		  /* 8214B724h */ case   10:  		/* ld R30, <#[R1 - 24]> */
		/* 8214B724h case   10:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8214B724h case   10:*/		return 0x8214B728;
		  /* 8214B728h */ case   11:  		/* ld R31, <#[R1 - 16]> */
		/* 8214B728h case   11:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214B728h case   11:*/		return 0x8214B72C;
		  /* 8214B72Ch */ case   12:  		/* bclr 20, CR0_LT */
		/* 8214B72Ch case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214B72Ch case   12:*/		return 0x8214B730;
	}
	return 0x8214B730;
} // Block from 8214B6FCh-8214B730h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214B730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B730);
		  /* 8214B730h */ case    0:  		/* mfspr R12, LR */
		/* 8214B730h case    0:*/		regs.R12 = regs.LR;
		/* 8214B730h case    0:*/		return 0x8214B734;
		  /* 8214B734h */ case    1:  		/* bl -763104 */
		/* 8214B734h case    1:*/		regs.LR = 0x8214B738; return 0x82091254;
		/* 8214B734h case    1:*/		return 0x8214B738;
		  /* 8214B738h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8214B738h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8214B738h case    2:*/		return 0x8214B73C;
		  /* 8214B73Ch */ case    3:  		/* mr R27, R5 */
		/* 8214B73Ch case    3:*/		regs.R27 = regs.R5;
		/* 8214B73Ch case    3:*/		return 0x8214B740;
		  /* 8214B740h */ case    4:  		/* addi R5, R1, 80 */
		/* 8214B740h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8214B740h case    4:*/		return 0x8214B744;
		  /* 8214B744h */ case    5:  		/* mr R30, R3 */
		/* 8214B744h case    5:*/		regs.R30 = regs.R3;
		/* 8214B744h case    5:*/		return 0x8214B748;
		  /* 8214B748h */ case    6:  		/* mr R29, R6 */
		/* 8214B748h case    6:*/		regs.R29 = regs.R6;
		/* 8214B748h case    6:*/		return 0x8214B74C;
		  /* 8214B74Ch */ case    7:  		/* bl -3068 */
		/* 8214B74Ch case    7:*/		regs.LR = 0x8214B750; return 0x8214AB50;
		/* 8214B74Ch case    7:*/		return 0x8214B750;
		  /* 8214B750h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 8214B750h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8214B750h case    8:*/		return 0x8214B754;
		  /* 8214B754h */ case    9:  		/* stw R3, <#[R30 + 144]> */
		/* 8214B754h case    9:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000090) );
		/* 8214B754h case    9:*/		return 0x8214B758;
		  /* 8214B758h */ case   10:  		/* bc 12, CR0_LT, 104 */
		/* 8214B758h case   10:*/		if ( regs.CR[0].lt ) { return 0x8214B7C0;  }
		/* 8214B758h case   10:*/		return 0x8214B75C;
		  /* 8214B75Ch */ case   11:  		/* lwz R10, <#[R1 + 80]> */
		/* 8214B75Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8214B75Ch case   11:*/		return 0x8214B760;
		  /* 8214B760h */ case   12:  		/* lwz R11, <#[R30 + 4]> */
		/* 8214B760h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8214B760h case   12:*/		return 0x8214B764;
		  /* 8214B764h */ case   13:  		/* mulli R28, R10, 276 */
		/* 8214B764h case   13:*/		cpu::op::mulli<0>(regs,&regs.R28,regs.R10,0x114);
		/* 8214B764h case   13:*/		return 0x8214B768;
		  /* 8214B768h */ case   14:  		/* add R11, R28, R11 */
		/* 8214B768h case   14:*/		cpu::op::add<0>(regs,&regs.R11,regs.R28,regs.R11);
		/* 8214B768h case   14:*/		return 0x8214B76C;
		  /* 8214B76Ch */ case   15:  		/* lwz R11, <#[R11 + 272]> */
		/* 8214B76Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000110) );
		/* 8214B76Ch case   15:*/		return 0x8214B770;
		  /* 8214B770h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 8214B770h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214B770h case   16:*/		return 0x8214B774;
		  /* 8214B774h */ case   17:  		/* bc 4, CR6_EQ, 76 */
		/* 8214B774h case   17:*/		if ( !regs.CR[6].eq ) { return 0x8214B7C0;  }
		/* 8214B774h case   17:*/		return 0x8214B778;
		  /* 8214B778h */ case   18:  		/* lis R4, 9351 */
		/* 8214B778h case   18:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 8214B778h case   18:*/		return 0x8214B77C;
		  /* 8214B77Ch */ case   19:  		/* addi R3, R29, 1 */
		/* 8214B77Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R29,0x1);
		/* 8214B77Ch case   19:*/		return 0x8214B780;
		  /* 8214B780h */ case   20:  		/* bl -800128 */
		/* 8214B780h case   20:*/		regs.LR = 0x8214B784; return 0x82088200;
		/* 8214B780h case   20:*/		return 0x8214B784;
		  /* 8214B784h */ case   21:  		/* or. R31, R3, R3 */
		/* 8214B784h case   21:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8214B784h case   21:*/		return 0x8214B788;
		  /* 8214B788h */ case   22:  		/* bc 4, CR0_EQ, 20 */
		/* 8214B788h case   22:*/		if ( !regs.CR[0].eq ) { return 0x8214B79C;  }
		/* 8214B788h case   22:*/		return 0x8214B78C;
		  /* 8214B78Ch */ case   23:  		/* lis R11, -32768 */
		/* 8214B78Ch case   23:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 8214B78Ch case   23:*/		return 0x8214B790;
		  /* 8214B790h */ case   24:  		/* ori R11, R11, 16389 */
		/* 8214B790h case   24:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4005);
		/* 8214B790h case   24:*/		return 0x8214B794;
		  /* 8214B794h */ case   25:  		/* stw R11, <#[R30 + 144]> */
		/* 8214B794h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000090) );
		/* 8214B794h case   25:*/		return 0x8214B798;
		  /* 8214B798h */ case   26:  		/* b 40 */
		/* 8214B798h case   26:*/		return 0x8214B7C0;
		/* 8214B798h case   26:*/		return 0x8214B79C;
	}
	return 0x8214B79C;
} // Block from 8214B730h-8214B79Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 8214B79Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B79C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B79C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B79C);
		  /* 8214B79Ch */ case    0:  		/* mr R5, R29 */
		/* 8214B79Ch case    0:*/		regs.R5 = regs.R29;
		/* 8214B79Ch case    0:*/		return 0x8214B7A0;
		  /* 8214B7A0h */ case    1:  		/* mr R4, R27 */
		/* 8214B7A0h case    1:*/		regs.R4 = regs.R27;
		/* 8214B7A0h case    1:*/		return 0x8214B7A4;
		  /* 8214B7A4h */ case    2:  		/* mr R3, R31 */
		/* 8214B7A4h case    2:*/		regs.R3 = regs.R31;
		/* 8214B7A4h case    2:*/		return 0x8214B7A8;
		  /* 8214B7A8h */ case    3:  		/* bl -761336 */
		/* 8214B7A8h case    3:*/		regs.LR = 0x8214B7AC; return 0x820919B0;
		/* 8214B7A8h case    3:*/		return 0x8214B7AC;
		  /* 8214B7ACh */ case    4:  		/* li R11, 0 */
		/* 8214B7ACh case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8214B7ACh case    4:*/		return 0x8214B7B0;
		  /* 8214B7B0h */ case    5:  		/* stbx R11, <#[R31 + R29]> */
		/* 8214B7B0h case    5:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + regs.R29 + 0x00000000) );
		/* 8214B7B0h case    5:*/		return 0x8214B7B4;
		  /* 8214B7B4h */ case    6:  		/* lwz R11, <#[R30 + 4]> */
		/* 8214B7B4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8214B7B4h case    6:*/		return 0x8214B7B8;
		  /* 8214B7B8h */ case    7:  		/* add R11, R28, R11 */
		/* 8214B7B8h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R28,regs.R11);
		/* 8214B7B8h case    7:*/		return 0x8214B7BC;
		  /* 8214B7BCh */ case    8:  		/* stw R31, <#[R11 + 272]> */
		/* 8214B7BCh case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000110) );
		/* 8214B7BCh case    8:*/		return 0x8214B7C0;
	}
	return 0x8214B7C0;
} // Block from 8214B79Ch-8214B7C0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214B7C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B7C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B7C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B7C0);
		  /* 8214B7C0h */ case    0:  		/* lwz R3, <#[R30 + 144]> */
		/* 8214B7C0h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000090) );
		/* 8214B7C0h case    0:*/		return 0x8214B7C4;
		  /* 8214B7C4h */ case    1:  		/* addi R1, R1, 144 */
		/* 8214B7C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8214B7C4h case    1:*/		return 0x8214B7C8;
		  /* 8214B7C8h */ case    2:  		/* b -763172 */
		/* 8214B7C8h case    2:*/		return 0x820912A4;
		/* 8214B7C8h case    2:*/		return 0x8214B7CC;
		  /* 8214B7CCh */ case    3:  		/* nop */
		/* 8214B7CCh case    3:*/		cpu::op::nop();
		/* 8214B7CCh case    3:*/		return 0x8214B7D0;
	}
	return 0x8214B7D0;
} // Block from 8214B7C0h-8214B7D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214B7D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B7D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B7D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B7D0);
		  /* 8214B7D0h */ case    0:  		/* mfspr R12, LR */
		/* 8214B7D0h case    0:*/		regs.R12 = regs.LR;
		/* 8214B7D0h case    0:*/		return 0x8214B7D4;
		  /* 8214B7D4h */ case    1:  		/* bl -763280 */
		/* 8214B7D4h case    1:*/		regs.LR = 0x8214B7D8; return 0x82091244;
		/* 8214B7D4h case    1:*/		return 0x8214B7D8;
		  /* 8214B7D8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8214B7D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8214B7D8h case    2:*/		return 0x8214B7DC;
		  /* 8214B7DCh */ case    3:  		/* lwz R11, <#[R3 + 144]> */
		/* 8214B7DCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000090) );
		/* 8214B7DCh case    3:*/		return 0x8214B7E0;
		  /* 8214B7E0h */ case    4:  		/* mr R30, R3 */
		/* 8214B7E0h case    4:*/		regs.R30 = regs.R3;
		/* 8214B7E0h case    4:*/		return 0x8214B7E4;
		  /* 8214B7E4h */ case    5:  		/* mr R31, R4 */
		/* 8214B7E4h case    5:*/		regs.R31 = regs.R4;
		/* 8214B7E4h case    5:*/		return 0x8214B7E8;
		  /* 8214B7E8h */ case    6:  		/* mr R26, R5 */
		/* 8214B7E8h case    6:*/		regs.R26 = regs.R5;
		/* 8214B7E8h case    6:*/		return 0x8214B7EC;
		  /* 8214B7ECh */ case    7:  		/* mr R25, R6 */
		/* 8214B7ECh case    7:*/		regs.R25 = regs.R6;
		/* 8214B7ECh case    7:*/		return 0x8214B7F0;
		  /* 8214B7F0h */ case    8:  		/* mr R24, R8 */
		/* 8214B7F0h case    8:*/		regs.R24 = regs.R8;
		/* 8214B7F0h case    8:*/		return 0x8214B7F4;
		  /* 8214B7F4h */ case    9:  		/* mr R23, R9 */
		/* 8214B7F4h case    9:*/		regs.R23 = regs.R9;
		/* 8214B7F4h case    9:*/		return 0x8214B7F8;
		  /* 8214B7F8h */ case   10:  		/* addi R29, R3, 144 */
		/* 8214B7F8h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0x90);
		/* 8214B7F8h case   10:*/		return 0x8214B7FC;
		  /* 8214B7FCh */ case   11:  		/* cmpwi CR6, R11, 0 */
		/* 8214B7FCh case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214B7FCh case   11:*/		return 0x8214B800;
		  /* 8214B800h */ case   12:  		/* bc 12, CR6_LT, 156 */
		/* 8214B800h case   12:*/		if ( regs.CR[6].lt ) { return 0x8214B89C;  }
		/* 8214B800h case   12:*/		return 0x8214B804;
		  /* 8214B804h */ case   13:  		/* lwz R28, <#[R3 + 72]> */
		/* 8214B804h case   13:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + 0x00000048) );
		/* 8214B804h case   13:*/		return 0x8214B808;
		  /* 8214B808h */ case   14:  		/* lwz R11, <#[R28 + 4]> */
		/* 8214B808h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 8214B808h case   14:*/		return 0x8214B80C;
		  /* 8214B80Ch */ case   15:  		/* cmplw CR6, R11, R4 */
		/* 8214B80Ch case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 8214B80Ch case   15:*/		return 0x8214B810;
		  /* 8214B810h */ case   16:  		/* bc 12, CR6_GT, 52 */
		/* 8214B810h case   16:*/		if ( regs.CR[6].gt ) { return 0x8214B844;  }
		/* 8214B810h case   16:*/		return 0x8214B814;
		  /* 8214B814h */ case   17:  		/* lwz R11, <#[R28 + 8]> */
		/* 8214B814h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8214B814h case   17:*/		return 0x8214B818;
		  /* 8214B818h */ case   18:  		/* addi R27, R4, 1 */
		/* 8214B818h case   18:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R4,0x1);
		/* 8214B818h case   18:*/		return 0x8214B81C;
		  /* 8214B81Ch */ case   19:  		/* cmplw CR6, R27, R11 */
		/* 8214B81Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 8214B81Ch case   19:*/		return 0x8214B820;
		  /* 8214B820h */ case   20:  		/* bc 4, CR6_GT, 20 */
		/* 8214B820h case   20:*/		if ( !regs.CR[6].gt ) { return 0x8214B834;  }
		/* 8214B820h case   20:*/		return 0x8214B824;
		  /* 8214B824h */ case   21:  		/* mr R5, R29 */
		/* 8214B824h case   21:*/		regs.R5 = regs.R29;
		/* 8214B824h case   21:*/		return 0x8214B828;
		  /* 8214B828h */ case   22:  		/* mr R4, R27 */
		/* 8214B828h case   22:*/		regs.R4 = regs.R27;
		/* 8214B828h case   22:*/		return 0x8214B82C;
		  /* 8214B82Ch */ case   23:  		/* mr R3, R28 */
		/* 8214B82Ch case   23:*/		regs.R3 = regs.R28;
		/* 8214B82Ch case   23:*/		return 0x8214B830;
		  /* 8214B830h */ case   24:  		/* bl -21080 */
		/* 8214B830h case   24:*/		regs.LR = 0x8214B834; return 0x821465D8;
		/* 8214B830h case   24:*/		return 0x8214B834;
	}
	return 0x8214B834;
} // Block from 8214B7D0h-8214B834h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8214B834h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B834( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B834) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B834);
		  /* 8214B834h */ case    0:  		/* stw R27, <#[R28 + 4]> */
		/* 8214B834h case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R28 + 0x00000004) );
		/* 8214B834h case    0:*/		return 0x8214B838;
		  /* 8214B838h */ case    1:  		/* lwz R11, <#[R29]> */
		/* 8214B838h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8214B838h case    1:*/		return 0x8214B83C;
		  /* 8214B83Ch */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 8214B83Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214B83Ch case    2:*/		return 0x8214B840;
		  /* 8214B840h */ case    3:  		/* bc 12, CR6_LT, 92 */
		/* 8214B840h case    3:*/		if ( regs.CR[6].lt ) { return 0x8214B89C;  }
		/* 8214B840h case    3:*/		return 0x8214B844;
	}
	return 0x8214B844;
} // Block from 8214B834h-8214B844h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214B844h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B844( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B844) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B844);
		  /* 8214B844h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8214B844h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8214B844h case    0:*/		return 0x8214B848;
		  /* 8214B848h */ case    1:  		/* bc 12, CR6_EQ, 84 */
		/* 8214B848h case    1:*/		if ( regs.CR[6].eq ) { return 0x8214B89C;  }
		/* 8214B848h case    1:*/		return 0x8214B84C;
		  /* 8214B84Ch */ case    2:  		/* lwz R10, <#[R30 + 72]> */
		/* 8214B84Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000048) );
		/* 8214B84Ch case    2:*/		return 0x8214B850;
		  /* 8214B850h */ case    3:  		/* rlwinm R11, R31, 4, 0, 27 */
		/* 8214B850h case    3:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R31);
		/* 8214B850h case    3:*/		return 0x8214B854;
		  /* 8214B854h */ case    4:  		/* mr R3, R30 */
		/* 8214B854h case    4:*/		regs.R3 = regs.R30;
		/* 8214B854h case    4:*/		return 0x8214B858;
		  /* 8214B858h */ case    5:  		/* lwz R10, <#[R10]> */
		/* 8214B858h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8214B858h case    5:*/		return 0x8214B85C;
		  /* 8214B85Ch */ case    6:  		/* add R31, R11, R10 */
		/* 8214B85Ch case    6:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R10);
		/* 8214B85Ch case    6:*/		return 0x8214B860;
		  /* 8214B860h */ case    7:  		/* stw R24, <#[R31 + 8]> */
		/* 8214B860h case    7:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000008) );
		/* 8214B860h case    7:*/		return 0x8214B864;
		  /* 8214B864h */ case    8:  		/* stw R23, <#[R31 + 12]> */
		/* 8214B864h case    8:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x0000000C) );
		/* 8214B864h case    8:*/		return 0x8214B868;
		  /* 8214B868h */ case    9:  		/* lwz R11, <#[R26 + 20]> */
		/* 8214B868h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000014) );
		/* 8214B868h case    9:*/		return 0x8214B86C;
		  /* 8214B86Ch */ case   10:  		/* lwz R4, <#[R11 + 24]> */
		/* 8214B86Ch case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000018) );
		/* 8214B86Ch case   10:*/		return 0x8214B870;
		  /* 8214B870h */ case   11:  		/* bl -2112 */
		/* 8214B870h case   11:*/		regs.LR = 0x8214B874; return 0x8214B030;
		/* 8214B870h case   11:*/		return 0x8214B874;
		  /* 8214B874h */ case   12:  		/* lwz R11, <#[R31]> */
		/* 8214B874h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214B874h case   12:*/		return 0x8214B878;
		  /* 8214B878h */ case   13:  		/* rlwimi R3, R11, 0, 0, 0 */
		/* 8214B878h case   13:*/		cpu::op::rlwimi<0,0,0,0>(regs,&regs.R3,regs.R11);
		/* 8214B878h case   13:*/		return 0x8214B87C;
		  /* 8214B87Ch */ case   14:  		/* addi R7, R31, 4 */
		/* 8214B87Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R31,0x4);
		/* 8214B87Ch case   14:*/		return 0x8214B880;
		  /* 8214B880h */ case   15:  		/* stw R3, <#[R31]> */
		/* 8214B880h case   15:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8214B880h case   15:*/		return 0x8214B884;
		  /* 8214B884h */ case   16:  		/* li R6, 0 */
		/* 8214B884h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8214B884h case   16:*/		return 0x8214B888;
		  /* 8214B888h */ case   17:  		/* li R5, 1 */
		/* 8214B888h case   17:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8214B888h case   17:*/		return 0x8214B88C;
		  /* 8214B88Ch */ case   18:  		/* lwz R3, <#[R30 + 96]> */
		/* 8214B88Ch case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000060) );
		/* 8214B88Ch case   18:*/		return 0x8214B890;
		  /* 8214B890h */ case   19:  		/* mr R4, R25 */
		/* 8214B890h case   19:*/		regs.R4 = regs.R25;
		/* 8214B890h case   19:*/		return 0x8214B894;
		  /* 8214B894h */ case   20:  		/* bl -369180 */
		/* 8214B894h case   20:*/		regs.LR = 0x8214B898; return 0x820F1678;
		/* 8214B894h case   20:*/		return 0x8214B898;
		  /* 8214B898h */ case   21:  		/* stw R3, <#[R29]> */
		/* 8214B898h case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 8214B898h case   21:*/		return 0x8214B89C;
	}
	return 0x8214B89C;
} // Block from 8214B844h-8214B89Ch (22 instructions)

//////////////////////////////////////////////////////
// Block at 8214B89Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B89C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B89C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B89C);
		  /* 8214B89Ch */ case    0:  		/* addi R1, R1, 160 */
		/* 8214B89Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8214B89Ch case    0:*/		return 0x8214B8A0;
		  /* 8214B8A0h */ case    1:  		/* b -763404 */
		/* 8214B8A0h case    1:*/		return 0x82091294;
		/* 8214B8A0h case    1:*/		return 0x8214B8A4;
		  /* 8214B8A4h */ case    2:  		/* nop */
		/* 8214B8A4h case    2:*/		cpu::op::nop();
		/* 8214B8A4h case    2:*/		return 0x8214B8A8;
	}
	return 0x8214B8A8;
} // Block from 8214B89Ch-8214B8A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214B8A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B8A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B8A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B8A8);
		  /* 8214B8A8h */ case    0:  		/* mfspr R12, LR */
		/* 8214B8A8h case    0:*/		regs.R12 = regs.LR;
		/* 8214B8A8h case    0:*/		return 0x8214B8AC;
		  /* 8214B8ACh */ case    1:  		/* bl -763484 */
		/* 8214B8ACh case    1:*/		regs.LR = 0x8214B8B0; return 0x82091250;
		/* 8214B8ACh case    1:*/		return 0x8214B8B0;
		  /* 8214B8B0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8214B8B0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8214B8B0h case    2:*/		return 0x8214B8B4;
		  /* 8214B8B4h */ case    3:  		/* mr R31, R3 */
		/* 8214B8B4h case    3:*/		regs.R31 = regs.R3;
		/* 8214B8B4h case    3:*/		return 0x8214B8B8;
		  /* 8214B8B8h */ case    4:  		/* addi R26, R3, 144 */
		/* 8214B8B8h case    4:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R3,0x90);
		/* 8214B8B8h case    4:*/		return 0x8214B8BC;
		  /* 8214B8BCh */ case    5:  		/* lwz R3, <#[R3 + 144]> */
		/* 8214B8BCh case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000090) );
		/* 8214B8BCh case    5:*/		return 0x8214B8C0;
		  /* 8214B8C0h */ case    6:  		/* mr R27, R4 */
		/* 8214B8C0h case    6:*/		regs.R27 = regs.R4;
		/* 8214B8C0h case    6:*/		return 0x8214B8C4;
		  /* 8214B8C4h */ case    7:  		/* mr R28, R5 */
		/* 8214B8C4h case    7:*/		regs.R28 = regs.R5;
		/* 8214B8C4h case    7:*/		return 0x8214B8C8;
		  /* 8214B8C8h */ case    8:  		/* cmpwi CR6, R3, 0 */
		/* 8214B8C8h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8214B8C8h case    8:*/		return 0x8214B8CC;
		  /* 8214B8CCh */ case    9:  		/* bc 12, CR6_LT, 188 */
		/* 8214B8CCh case    9:*/		if ( regs.CR[6].lt ) { return 0x8214B988;  }
		/* 8214B8CCh case    9:*/		return 0x8214B8D0;
		  /* 8214B8D0h */ case   10:  		/* lwz R30, <#[R31 + 108]> */
		/* 8214B8D0h case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000006C) );
		/* 8214B8D0h case   10:*/		return 0x8214B8D4;
		  /* 8214B8D4h */ case   11:  		/* lwz R11, <#[R30 + 4]> */
		/* 8214B8D4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8214B8D4h case   11:*/		return 0x8214B8D8;
		  /* 8214B8D8h */ case   12:  		/* cmplw CR6, R11, R4 */
		/* 8214B8D8h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 8214B8D8h case   12:*/		return 0x8214B8DC;
		  /* 8214B8DCh */ case   13:  		/* bc 12, CR6_GT, 52 */
		/* 8214B8DCh case   13:*/		if ( regs.CR[6].gt ) { return 0x8214B910;  }
		/* 8214B8DCh case   13:*/		return 0x8214B8E0;
		  /* 8214B8E0h */ case   14:  		/* lwz R11, <#[R30 + 8]> */
		/* 8214B8E0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8214B8E0h case   14:*/		return 0x8214B8E4;
		  /* 8214B8E4h */ case   15:  		/* addi R29, R4, 1 */
		/* 8214B8E4h case   15:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R4,0x1);
		/* 8214B8E4h case   15:*/		return 0x8214B8E8;
		  /* 8214B8E8h */ case   16:  		/* cmplw CR6, R29, R11 */
		/* 8214B8E8h case   16:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8214B8E8h case   16:*/		return 0x8214B8EC;
		  /* 8214B8ECh */ case   17:  		/* bc 4, CR6_GT, 20 */
		/* 8214B8ECh case   17:*/		if ( !regs.CR[6].gt ) { return 0x8214B900;  }
		/* 8214B8ECh case   17:*/		return 0x8214B8F0;
		  /* 8214B8F0h */ case   18:  		/* mr R5, R26 */
		/* 8214B8F0h case   18:*/		regs.R5 = regs.R26;
		/* 8214B8F0h case   18:*/		return 0x8214B8F4;
		  /* 8214B8F4h */ case   19:  		/* mr R4, R29 */
		/* 8214B8F4h case   19:*/		regs.R4 = regs.R29;
		/* 8214B8F4h case   19:*/		return 0x8214B8F8;
		  /* 8214B8F8h */ case   20:  		/* mr R3, R30 */
		/* 8214B8F8h case   20:*/		regs.R3 = regs.R30;
		/* 8214B8F8h case   20:*/		return 0x8214B8FC;
		  /* 8214B8FCh */ case   21:  		/* bl -20852 */
		/* 8214B8FCh case   21:*/		regs.LR = 0x8214B900; return 0x82146788;
		/* 8214B8FCh case   21:*/		return 0x8214B900;
	}
	return 0x8214B900;
} // Block from 8214B8A8h-8214B900h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8214B900h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B900( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B900) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B900);
		  /* 8214B900h */ case    0:  		/* stw R29, <#[R30 + 4]> */
		/* 8214B900h case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x00000004) );
		/* 8214B900h case    0:*/		return 0x8214B904;
		  /* 8214B904h */ case    1:  		/* lwz R3, <#[R26]> */
		/* 8214B904h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R26 + 0x00000000) );
		/* 8214B904h case    1:*/		return 0x8214B908;
		  /* 8214B908h */ case    2:  		/* cmpwi CR6, R3, 0 */
		/* 8214B908h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8214B908h case    2:*/		return 0x8214B90C;
		  /* 8214B90Ch */ case    3:  		/* bc 12, CR6_LT, 124 */
		/* 8214B90Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x8214B988;  }
		/* 8214B90Ch case    3:*/		return 0x8214B910;
	}
	return 0x8214B910;
} // Block from 8214B900h-8214B910h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214B910h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B910( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B910) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B910);
		  /* 8214B910h */ case    0:  		/* lwz R10, <#[R31 + 108]> */
		/* 8214B910h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000006C) );
		/* 8214B910h case    0:*/		return 0x8214B914;
		  /* 8214B914h */ case    1:  		/* mulli R11, R27, 20 */
		/* 8214B914h case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R27,0x14);
		/* 8214B914h case    1:*/		return 0x8214B918;
		  /* 8214B918h */ case    2:  		/* lwz R9, <#[R28 + 20]> */
		/* 8214B918h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000014) );
		/* 8214B918h case    2:*/		return 0x8214B91C;
		  /* 8214B91Ch */ case    3:  		/* lwz R10, <#[R10]> */
		/* 8214B91Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8214B91Ch case    3:*/		return 0x8214B920;
		  /* 8214B920h */ case    4:  		/* lwz R4, <#[R9 + 24]> */
		/* 8214B920h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + 0x00000018) );
		/* 8214B920h case    4:*/		return 0x8214B924;
		  /* 8214B924h */ case    5:  		/* mr R3, R31 */
		/* 8214B924h case    5:*/		regs.R3 = regs.R31;
		/* 8214B924h case    5:*/		return 0x8214B928;
		  /* 8214B928h */ case    6:  		/* add R31, R11, R10 */
		/* 8214B928h case    6:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R10);
		/* 8214B928h case    6:*/		return 0x8214B92C;
		  /* 8214B92Ch */ case    7:  		/* bl -2300 */
		/* 8214B92Ch case    7:*/		regs.LR = 0x8214B930; return 0x8214B030;
		/* 8214B92Ch case    7:*/		return 0x8214B930;
		  /* 8214B930h */ case    8:  		/* stw R3, <#[R31]> */
		/* 8214B930h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8214B930h case    8:*/		return 0x8214B934;
		  /* 8214B934h */ case    9:  		/* lwz R11, <#[R28 + 40]> */
		/* 8214B934h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000028) );
		/* 8214B934h case    9:*/		return 0x8214B938;
		  /* 8214B938h */ case   10:  		/* stw R11, <#[R31 + 4]> */
		/* 8214B938h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214B938h case   10:*/		return 0x8214B93C;
		  /* 8214B93Ch */ case   11:  		/* lwz R11, <#[R28 + 24]> */
		/* 8214B93Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000018) );
		/* 8214B93Ch case   11:*/		return 0x8214B940;
		  /* 8214B940h */ case   12:  		/* lwz R30, <#[R11 + 44]> */
		/* 8214B940h case   12:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x0000002C) );
		/* 8214B940h case   12:*/		return 0x8214B944;
		  /* 8214B944h */ case   13:  		/* cmplwi CR6, R30, 0 */
		/* 8214B944h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8214B944h case   13:*/		return 0x8214B948;
		  /* 8214B948h */ case   14:  		/* bc 12, CR6_EQ, 60 */
		/* 8214B948h case   14:*/		if ( regs.CR[6].eq ) { return 0x8214B984;  }
		/* 8214B948h case   14:*/		return 0x8214B94C;
		  /* 8214B94Ch */ case   15:  		/* addi R31, R31, 8 */
		/* 8214B94Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x8);
		/* 8214B94Ch case   15:*/		return 0x8214B950;
		  /* 8214B950h */ case   16:  		/* lwz R11, <#[R30 + 8]> */
		/* 8214B950h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8214B950h case   16:*/		return 0x8214B954;
		  /* 8214B954h */ case   17:  		/* mr R5, R26 */
		/* 8214B954h case   17:*/		regs.R5 = regs.R26;
		/* 8214B954h case   17:*/		return 0x8214B958;
		  /* 8214B958h */ case   18:  		/* addi R4, R1, 80 */
		/* 8214B958h case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8214B958h case   18:*/		return 0x8214B95C;
		  /* 8214B95Ch */ case   19:  		/* mr R3, R31 */
		/* 8214B95Ch case   19:*/		regs.R3 = regs.R31;
		/* 8214B95Ch case   19:*/		return 0x8214B960;
		  /* 8214B960h */ case   20:  		/* lwz R11, <#[R11 + 40]> */
		/* 8214B960h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8214B960h case   20:*/		return 0x8214B964;
		  /* 8214B964h */ case   21:  		/* stw R11, <#[R1 + 80]> */
		/* 8214B964h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8214B964h case   21:*/		return 0x8214B968;
		  /* 8214B968h */ case   22:  		/* bl -8728 */
		/* 8214B968h case   22:*/		regs.LR = 0x8214B96C; return 0x82149750;
		/* 8214B968h case   22:*/		return 0x8214B96C;
		  /* 8214B96Ch */ case   23:  		/* lwz R3, <#[R26]> */
		/* 8214B96Ch case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R26 + 0x00000000) );
		/* 8214B96Ch case   23:*/		return 0x8214B970;
		  /* 8214B970h */ case   24:  		/* cmpwi CR6, R3, 0 */
		/* 8214B970h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8214B970h case   24:*/		return 0x8214B974;
		  /* 8214B974h */ case   25:  		/* bc 12, CR6_LT, 20 */
		/* 8214B974h case   25:*/		if ( regs.CR[6].lt ) { return 0x8214B988;  }
		/* 8214B974h case   25:*/		return 0x8214B978;
		  /* 8214B978h */ case   26:  		/* lwz R30, <#[R30 + 12]> */
		/* 8214B978h case   26:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 8214B978h case   26:*/		return 0x8214B97C;
		  /* 8214B97Ch */ case   27:  		/* cmplwi CR6, R30, 0 */
		/* 8214B97Ch case   27:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8214B97Ch case   27:*/		return 0x8214B980;
		  /* 8214B980h */ case   28:  		/* bc 4, CR6_EQ, -48 */
		/* 8214B980h case   28:*/		if ( !regs.CR[6].eq ) { return 0x8214B950;  }
		/* 8214B980h case   28:*/		return 0x8214B984;
	}
	return 0x8214B984;
} // Block from 8214B910h-8214B984h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8214B984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B984);
		  /* 8214B984h */ case    0:  		/* lwz R3, <#[R26]> */
		/* 8214B984h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R26 + 0x00000000) );
		/* 8214B984h case    0:*/		return 0x8214B988;
	}
	return 0x8214B988;
} // Block from 8214B984h-8214B988h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214B988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B988);
		  /* 8214B988h */ case    0:  		/* addi R1, R1, 144 */
		/* 8214B988h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8214B988h case    0:*/		return 0x8214B98C;
		  /* 8214B98Ch */ case    1:  		/* b -763628 */
		/* 8214B98Ch case    1:*/		return 0x820912A0;
		/* 8214B98Ch case    1:*/		return 0x8214B990;
	}
	return 0x8214B990;
} // Block from 8214B988h-8214B990h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214B990h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B990);
		  /* 8214B990h */ case    0:  		/* mfspr R12, LR */
		/* 8214B990h case    0:*/		regs.R12 = regs.LR;
		/* 8214B990h case    0:*/		return 0x8214B994;
		  /* 8214B994h */ case    1:  		/* bl -763736 */
		/* 8214B994h case    1:*/		regs.LR = 0x8214B998; return 0x8209123C;
		/* 8214B994h case    1:*/		return 0x8214B998;
		  /* 8214B998h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 8214B998h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 8214B998h case    2:*/		return 0x8214B99C;
		  /* 8214B99Ch */ case    3:  		/* lwz R11, <#[R3 + 144]> */
		/* 8214B99Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000090) );
		/* 8214B99Ch case    3:*/		return 0x8214B9A0;
		  /* 8214B9A0h */ case    4:  		/* mr R30, R3 */
		/* 8214B9A0h case    4:*/		regs.R30 = regs.R3;
		/* 8214B9A0h case    4:*/		return 0x8214B9A4;
		  /* 8214B9A4h */ case    5:  		/* mr R31, R4 */
		/* 8214B9A4h case    5:*/		regs.R31 = regs.R4;
		/* 8214B9A4h case    5:*/		return 0x8214B9A8;
		  /* 8214B9A8h */ case    6:  		/* mr R26, R5 */
		/* 8214B9A8h case    6:*/		regs.R26 = regs.R5;
		/* 8214B9A8h case    6:*/		return 0x8214B9AC;
		  /* 8214B9ACh */ case    7:  		/* mr R25, R6 */
		/* 8214B9ACh case    7:*/		regs.R25 = regs.R6;
		/* 8214B9ACh case    7:*/		return 0x8214B9B0;
		  /* 8214B9B0h */ case    8:  		/* mr R24, R7 */
		/* 8214B9B0h case    8:*/		regs.R24 = regs.R7;
		/* 8214B9B0h case    8:*/		return 0x8214B9B4;
		  /* 8214B9B4h */ case    9:  		/* mr R23, R8 */
		/* 8214B9B4h case    9:*/		regs.R23 = regs.R8;
		/* 8214B9B4h case    9:*/		return 0x8214B9B8;
		  /* 8214B9B8h */ case   10:  		/* mr R22, R9 */
		/* 8214B9B8h case   10:*/		regs.R22 = regs.R9;
		/* 8214B9B8h case   10:*/		return 0x8214B9BC;
		  /* 8214B9BCh */ case   11:  		/* mr R21, R10 */
		/* 8214B9BCh case   11:*/		regs.R21 = regs.R10;
		/* 8214B9BCh case   11:*/		return 0x8214B9C0;
		  /* 8214B9C0h */ case   12:  		/* addi R29, R3, 144 */
		/* 8214B9C0h case   12:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0x90);
		/* 8214B9C0h case   12:*/		return 0x8214B9C4;
		  /* 8214B9C4h */ case   13:  		/* cmpwi CR6, R11, 0 */
		/* 8214B9C4h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214B9C4h case   13:*/		return 0x8214B9C8;
		  /* 8214B9C8h */ case   14:  		/* bc 12, CR6_LT, 160 */
		/* 8214B9C8h case   14:*/		if ( regs.CR[6].lt ) { return 0x8214BA68;  }
		/* 8214B9C8h case   14:*/		return 0x8214B9CC;
		  /* 8214B9CCh */ case   15:  		/* lwz R28, <#[R3 + 112]> */
		/* 8214B9CCh case   15:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + 0x00000070) );
		/* 8214B9CCh case   15:*/		return 0x8214B9D0;
		  /* 8214B9D0h */ case   16:  		/* lwz R11, <#[R28 + 4]> */
		/* 8214B9D0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 8214B9D0h case   16:*/		return 0x8214B9D4;
		  /* 8214B9D4h */ case   17:  		/* cmplw CR6, R11, R4 */
		/* 8214B9D4h case   17:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 8214B9D4h case   17:*/		return 0x8214B9D8;
		  /* 8214B9D8h */ case   18:  		/* bc 12, CR6_GT, 52 */
		/* 8214B9D8h case   18:*/		if ( regs.CR[6].gt ) { return 0x8214BA0C;  }
		/* 8214B9D8h case   18:*/		return 0x8214B9DC;
		  /* 8214B9DCh */ case   19:  		/* lwz R11, <#[R28 + 8]> */
		/* 8214B9DCh case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8214B9DCh case   19:*/		return 0x8214B9E0;
		  /* 8214B9E0h */ case   20:  		/* addi R27, R4, 1 */
		/* 8214B9E0h case   20:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R4,0x1);
		/* 8214B9E0h case   20:*/		return 0x8214B9E4;
		  /* 8214B9E4h */ case   21:  		/* cmplw CR6, R27, R11 */
		/* 8214B9E4h case   21:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 8214B9E4h case   21:*/		return 0x8214B9E8;
		  /* 8214B9E8h */ case   22:  		/* bc 4, CR6_GT, 20 */
		/* 8214B9E8h case   22:*/		if ( !regs.CR[6].gt ) { return 0x8214B9FC;  }
		/* 8214B9E8h case   22:*/		return 0x8214B9EC;
		  /* 8214B9ECh */ case   23:  		/* mr R5, R29 */
		/* 8214B9ECh case   23:*/		regs.R5 = regs.R29;
		/* 8214B9ECh case   23:*/		return 0x8214B9F0;
		  /* 8214B9F0h */ case   24:  		/* mr R4, R27 */
		/* 8214B9F0h case   24:*/		regs.R4 = regs.R27;
		/* 8214B9F0h case   24:*/		return 0x8214B9F4;
		  /* 8214B9F4h */ case   25:  		/* mr R3, R28 */
		/* 8214B9F4h case   25:*/		regs.R3 = regs.R28;
		/* 8214B9F4h case   25:*/		return 0x8214B9F8;
		  /* 8214B9F8h */ case   26:  		/* bl -20960 */
		/* 8214B9F8h case   26:*/		regs.LR = 0x8214B9FC; return 0x82146818;
		/* 8214B9F8h case   26:*/		return 0x8214B9FC;
	}
	return 0x8214B9FC;
} // Block from 8214B990h-8214B9FCh (27 instructions)

//////////////////////////////////////////////////////
// Block at 8214B9FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214B9FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214B9FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214B9FC);
		  /* 8214B9FCh */ case    0:  		/* stw R27, <#[R28 + 4]> */
		/* 8214B9FCh case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R28 + 0x00000004) );
		/* 8214B9FCh case    0:*/		return 0x8214BA00;
		  /* 8214BA00h */ case    1:  		/* lwz R11, <#[R29]> */
		/* 8214BA00h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8214BA00h case    1:*/		return 0x8214BA04;
		  /* 8214BA04h */ case    2:  		/* cmpwi CR6, R11, 0 */
		/* 8214BA04h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214BA04h case    2:*/		return 0x8214BA08;
		  /* 8214BA08h */ case    3:  		/* bc 12, CR6_LT, 96 */
		/* 8214BA08h case    3:*/		if ( regs.CR[6].lt ) { return 0x8214BA68;  }
		/* 8214BA08h case    3:*/		return 0x8214BA0C;
	}
	return 0x8214BA0C;
} // Block from 8214B9FCh-8214BA0Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214BA0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BA0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BA0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BA0C);
		  /* 8214BA0Ch */ case    0:  		/* li R11, -1 */
		/* 8214BA0Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8214BA0Ch case    0:*/		return 0x8214BA10;
	}
	return 0x8214BA10;
} // Block from 8214BA0Ch-8214BA10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214BA10h
// Function '?Intern@ShaderPDBBuilder@XGRAPHICS@@AAAIPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BA10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BA10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BA10);
		  /* 8214BA10h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 8214BA10h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8214BA10h case    0:*/		return 0x8214BA14;
		  /* 8214BA14h */ case    1:  		/* stw R11, <#[R1 + 80]> */
		/* 8214BA14h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8214BA14h case    1:*/		return 0x8214BA18;
		  /* 8214BA18h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8214BA18h case    2:*/		if ( regs.CR[6].eq ) { return 0x8214BA38;  }
		/* 8214BA18h case    2:*/		return 0x8214BA1C;
		  /* 8214BA1Ch */ case    3:  		/* addi R5, R1, 80 */
		/* 8214BA1Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8214BA1Ch case    3:*/		return 0x8214BA20;
		  /* 8214BA20h */ case    4:  		/* mr R4, R24 */
		/* 8214BA20h case    4:*/		regs.R4 = regs.R24;
		/* 8214BA20h case    4:*/		return 0x8214BA24;
		  /* 8214BA24h */ case    5:  		/* mr R3, R30 */
		/* 8214BA24h case    5:*/		regs.R3 = regs.R30;
		/* 8214BA24h case    5:*/		return 0x8214BA28;
		  /* 8214BA28h */ case    6:  		/* bl -3800 */
		/* 8214BA28h case    6:*/		regs.LR = 0x8214BA2C; return 0x8214AB50;
		/* 8214BA28h case    6:*/		return 0x8214BA2C;
		  /* 8214BA2Ch */ case    7:  		/* stw R3, <#[R29]> */
		/* 8214BA2Ch case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 8214BA2Ch case    7:*/		return 0x8214BA30;
		  /* 8214BA30h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 8214BA30h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8214BA30h case    8:*/		return 0x8214BA34;
		  /* 8214BA34h */ case    9:  		/* bc 12, CR0_LT, 52 */
		/* 8214BA34h case    9:*/		if ( regs.CR[0].lt ) { return 0x8214BA68;  }
		/* 8214BA34h case    9:*/		return 0x8214BA38;
	}
	return 0x8214BA38;
} // Block from 8214BA10h-8214BA38h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8214BA38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BA38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BA38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BA38);
		  /* 8214BA38h */ case    0:  		/* lwz R10, <#[R30 + 112]> */
		/* 8214BA38h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000070) );
		/* 8214BA38h case    0:*/		return 0x8214BA3C;
		  /* 8214BA3Ch */ case    1:  		/* mulli R11, R31, 28 */
		/* 8214BA3Ch case    1:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R31,0x1C);
		/* 8214BA3Ch case    1:*/		return 0x8214BA40;
		  /* 8214BA40h */ case    2:  		/* lwz R9, <#[R1 + 80]> */
		/* 8214BA40h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8214BA40h case    2:*/		return 0x8214BA44;
		  /* 8214BA44h */ case    3:  		/* lwz R10, <#[R10]> */
		/* 8214BA44h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8214BA44h case    3:*/		return 0x8214BA48;
		  /* 8214BA48h */ case    4:  		/* add R11, R11, R10 */
		/* 8214BA48h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8214BA48h case    4:*/		return 0x8214BA4C;
		  /* 8214BA4Ch */ case    5:  		/* stw R31, <#[R11]> */
		/* 8214BA4Ch case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 8214BA4Ch case    5:*/		return 0x8214BA50;
		  /* 8214BA50h */ case    6:  		/* stw R26, <#[R11 + 4]> */
		/* 8214BA50h case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + 0x00000004) );
		/* 8214BA50h case    6:*/		return 0x8214BA54;
		  /* 8214BA54h */ case    7:  		/* stw R25, <#[R11 + 8]> */
		/* 8214BA54h case    7:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + 0x00000008) );
		/* 8214BA54h case    7:*/		return 0x8214BA58;
		  /* 8214BA58h */ case    8:  		/* stw R9, <#[R11 + 12]> */
		/* 8214BA58h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 8214BA58h case    8:*/		return 0x8214BA5C;
		  /* 8214BA5Ch */ case    9:  		/* stw R23, <#[R11 + 16]> */
		/* 8214BA5Ch case    9:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R11 + 0x00000010) );
		/* 8214BA5Ch case    9:*/		return 0x8214BA60;
		  /* 8214BA60h */ case   10:  		/* stw R22, <#[R11 + 20]> */
		/* 8214BA60h case   10:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R11 + 0x00000014) );
		/* 8214BA60h case   10:*/		return 0x8214BA64;
		  /* 8214BA64h */ case   11:  		/* stw R21, <#[R11 + 24]> */
		/* 8214BA64h case   11:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x00000018) );
		/* 8214BA64h case   11:*/		return 0x8214BA68;
	}
	return 0x8214BA68;
} // Block from 8214BA38h-8214BA68h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8214BA68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BA68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BA68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BA68);
		  /* 8214BA68h */ case    0:  		/* addi R1, R1, 192 */
		/* 8214BA68h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8214BA68h case    0:*/		return 0x8214BA6C;
		  /* 8214BA6Ch */ case    1:  		/* b -763872 */
		/* 8214BA6Ch case    1:*/		return 0x8209128C;
		/* 8214BA6Ch case    1:*/		return 0x8214BA70;
	}
	return 0x8214BA70;
} // Block from 8214BA68h-8214BA70h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BA70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BA70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BA70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BA70);
		  /* 8214BA70h */ case    0:  		/* mfspr R12, LR */
		/* 8214BA70h case    0:*/		regs.R12 = regs.LR;
		/* 8214BA70h case    0:*/		return 0x8214BA74;
		  /* 8214BA74h */ case    1:  		/* bl -763928 */
		/* 8214BA74h case    1:*/		regs.LR = 0x8214BA78; return 0x8209125C;
		/* 8214BA74h case    1:*/		return 0x8214BA78;
		  /* 8214BA78h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8214BA78h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8214BA78h case    2:*/		return 0x8214BA7C;
		  /* 8214BA7Ch */ case    3:  		/* lwz R11, <#[R3 + 160]> */
		/* 8214BA7Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x000000A0) );
		/* 8214BA7Ch case    3:*/		return 0x8214BA80;
		  /* 8214BA80h */ case    4:  		/* mr R30, R3 */
		/* 8214BA80h case    4:*/		regs.R30 = regs.R3;
		/* 8214BA80h case    4:*/		return 0x8214BA84;
		  /* 8214BA84h */ case    5:  		/* mr R31, R4 */
		/* 8214BA84h case    5:*/		regs.R31 = regs.R4;
		/* 8214BA84h case    5:*/		return 0x8214BA88;
		  /* 8214BA88h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 8214BA88h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214BA88h case    6:*/		return 0x8214BA8C;
		  /* 8214BA8Ch */ case    7:  		/* bc 4, CR6_EQ, 8 */
		/* 8214BA8Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x8214BA94;  }
		/* 8214BA8Ch case    7:*/		return 0x8214BA90;
		  /* 8214BA90h */ case    8:  		/* bl -8912 */
		/* 8214BA90h case    8:*/		regs.LR = 0x8214BA94; return 0x821497C0;
		/* 8214BA90h case    8:*/		return 0x8214BA94;
	}
	return 0x8214BA94;
} // Block from 8214BA70h-8214BA94h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214BA94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BA94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BA94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BA94);
		  /* 8214BA94h */ case    0:  		/* lis R11, -32253 */
		/* 8214BA94h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214BA94h case    0:*/		return 0x8214BA98;
		  /* 8214BA98h */ case    1:  		/* mr R3, R31 */
		/* 8214BA98h case    1:*/		regs.R3 = regs.R31;
		/* 8214BA98h case    1:*/		return 0x8214BA9C;
		  /* 8214BA9Ch */ case    2:  		/* addi R4, R11, 27228 */
		/* 8214BA9Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6A5C);
		/* 8214BA9Ch case    2:*/		return 0x8214BAA0;
		  /* 8214BAA0h */ case    3:  		/* bl -23536 */
		/* 8214BAA0h case    3:*/		regs.LR = 0x8214BAA4; return 0x82145EB0;
		/* 8214BAA0h case    3:*/		return 0x8214BAA4;
		  /* 8214BAA4h */ case    4:  		/* lis R11, -32254 */
		/* 8214BAA4h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8202);
		/* 8214BAA4h case    4:*/		return 0x8214BAA8;
		  /* 8214BAA8h */ case    5:  		/* mr R3, R31 */
		/* 8214BAA8h case    5:*/		regs.R3 = regs.R31;
		/* 8214BAA8h case    5:*/		return 0x8214BAAC;
		  /* 8214BAACh */ case    6:  		/* addi R4, R11, -30604 */
		/* 8214BAACh case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFF8874);
		/* 8214BAACh case    6:*/		return 0x8214BAB0;
		  /* 8214BAB0h */ case    7:  		/* bl -23552 */
		/* 8214BAB0h case    7:*/		regs.LR = 0x8214BAB4; return 0x82145EB0;
		/* 8214BAB0h case    7:*/		return 0x8214BAB4;
		  /* 8214BAB4h */ case    8:  		/* li R11, 1 */
		/* 8214BAB4h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8214BAB4h case    8:*/		return 0x8214BAB8;
	}
	return 0x8214BAB8;
} // Block from 8214BA94h-8214BAB8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214BAB8h
// Function 'XCreatePDBBuilder'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BAB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BAB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BAB8);
		  /* 8214BAB8h */ case    0:  		/* mr R3, R31 */
		/* 8214BAB8h case    0:*/		regs.R3 = regs.R31;
		/* 8214BAB8h case    0:*/		return 0x8214BABC;
		  /* 8214BABCh */ case    1:  		/* stw R11, <#[R31 + 8]> */
		/* 8214BABCh case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8214BABCh case    1:*/		return 0x8214BAC0;
		  /* 8214BAC0h */ case    2:  		/* bl -23480 */
		/* 8214BAC0h case    2:*/		regs.LR = 0x8214BAC4; return 0x82145F08;
		/* 8214BAC0h case    2:*/		return 0x8214BAC4;
		  /* 8214BAC4h */ case    3:  		/* lis R11, -32253 */
		/* 8214BAC4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214BAC4h case    3:*/		return 0x8214BAC8;
		  /* 8214BAC8h */ case    4:  		/* lis R10, -32253 */
		/* 8214BAC8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8214BAC8h case    4:*/		return 0x8214BACC;
		  /* 8214BACCh */ case    5:  		/* addi R29, R11, 27216 */
		/* 8214BACCh case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6A50);
		/* 8214BACCh case    5:*/		return 0x8214BAD0;
		  /* 8214BAD0h */ case    6:  		/* addi R4, R10, 25840 */
		/* 8214BAD0h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x64F0);
		/* 8214BAD0h case    6:*/		return 0x8214BAD4;
		  /* 8214BAD4h */ case    7:  		/* mr R5, R29 */
		/* 8214BAD4h case    7:*/		regs.R5 = regs.R29;
		/* 8214BAD4h case    7:*/		return 0x8214BAD8;
		  /* 8214BAD8h */ case    8:  		/* mr R3, R31 */
		/* 8214BAD8h case    8:*/		regs.R3 = regs.R31;
		/* 8214BAD8h case    8:*/		return 0x8214BADC;
		  /* 8214BADCh */ case    9:  		/* bl -23596 */
		/* 8214BADCh case    9:*/		regs.LR = 0x8214BAE0; return 0x82145EB0;
		/* 8214BADCh case    9:*/		return 0x8214BAE0;
		  /* 8214BAE0h */ case   10:  		/* lis R11, -32253 */
		/* 8214BAE0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214BAE0h case   10:*/		return 0x8214BAE4;
		  /* 8214BAE4h */ case   11:  		/* mr R3, R31 */
		/* 8214BAE4h case   11:*/		regs.R3 = regs.R31;
		/* 8214BAE4h case   11:*/		return 0x8214BAE8;
		  /* 8214BAE8h */ case   12:  		/* lwz R7, <#[R30 + 168]> */
		/* 8214BAE8h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x000000A8) );
		/* 8214BAE8h case   12:*/		return 0x8214BAEC;
		  /* 8214BAECh */ case   13:  		/* addi R4, R11, 27148 */
		/* 8214BAECh case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6A0C);
		/* 8214BAECh case   13:*/		return 0x8214BAF0;
		  /* 8214BAF0h */ case   14:  		/* lwz R6, <#[R30 + 164]> */
		/* 8214BAF0h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x000000A4) );
		/* 8214BAF0h case   14:*/		return 0x8214BAF4;
		  /* 8214BAF4h */ case   15:  		/* lwz R5, <#[R30 + 160]> */
		/* 8214BAF4h case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x000000A0) );
		/* 8214BAF4h case   15:*/		return 0x8214BAF8;
	}
	return 0x8214BAF8;
} // Block from 8214BAB8h-8214BAF8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8214BAF8h
// Function 'XShaderPDBBuilder_GetPDBHint'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BAF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BAF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BAF8);
		  /* 8214BAF8h */ case    0:  		/* bl -23624 */
		/* 8214BAF8h case    0:*/		regs.LR = 0x8214BAFC; return 0x82145EB0;
		/* 8214BAF8h case    0:*/		return 0x8214BAFC;
		  /* 8214BAFCh */ case    1:  		/* lis R11, -32253 */
		/* 8214BAFCh case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214BAFCh case    1:*/		return 0x8214BB00;
	}
	return 0x8214BB00;
} // Block from 8214BAF8h-8214BB00h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BB00h
// Function 'XShaderPDBBuilder_AddHLSLArgumentsA'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BB00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BB00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BB00);
		  /* 8214BB00h */ case    0:  		/* li R5, 21119 */
		/* 8214BB00h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x527F);
		/* 8214BB00h case    0:*/		return 0x8214BB04;
		  /* 8214BB04h */ case    1:  		/* addi R4, R11, 27200 */
		/* 8214BB04h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6A40);
		/* 8214BB04h case    1:*/		return 0x8214BB08;
	}
	return 0x8214BB08;
} // Block from 8214BB00h-8214BB08h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BB08h
// Function 'XShaderPDBBuilder_SetVariableCount'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BB08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BB08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BB08);
		  /* 8214BB08h */ case    0:  		/* mr R3, R31 */
		/* 8214BB08h case    0:*/		regs.R3 = regs.R31;
		/* 8214BB08h case    0:*/		return 0x8214BB0C;
		  /* 8214BB0Ch */ case    1:  		/* bl -23644 */
		/* 8214BB0Ch case    1:*/		regs.LR = 0x8214BB10; return 0x82145EB0;
		/* 8214BB0Ch case    1:*/		return 0x8214BB10;
	}
	return 0x8214BB10;
} // Block from 8214BB08h-8214BB10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BB10h
// Function 'XShaderPDBBuilder_AddVariableDebugInfo'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BB10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BB10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BB10);
		  /* 8214BB10h */ case    0:  		/* mr R3, R31 */
		/* 8214BB10h case    0:*/		regs.R3 = regs.R31;
		/* 8214BB10h case    0:*/		return 0x8214BB14;
		  /* 8214BB14h */ case    1:  		/* bl -20164 */
		/* 8214BB14h case    1:*/		regs.LR = 0x8214BB18; return 0x82146C50;
		/* 8214BB14h case    1:*/		return 0x8214BB18;
		  /* 8214BB18h */ case    2:  		/* mr R4, R31 */
		/* 8214BB18h case    2:*/		regs.R4 = regs.R31;
		/* 8214BB18h case    2:*/		return 0x8214BB1C;
		  /* 8214BB1Ch */ case    3:  		/* mr R3, R30 */
		/* 8214BB1Ch case    3:*/		regs.R3 = regs.R30;
		/* 8214BB1Ch case    3:*/		return 0x8214BB20;
		  /* 8214BB20h */ case    4:  		/* bl -19784 */
		/* 8214BB20h case    4:*/		regs.LR = 0x8214BB24; return 0x82146DD8;
		/* 8214BB20h case    4:*/		return 0x8214BB24;
		  /* 8214BB24h */ case    5:  		/* mr R4, R31 */
		/* 8214BB24h case    5:*/		regs.R4 = regs.R31;
		/* 8214BB24h case    5:*/		return 0x8214BB28;
		  /* 8214BB28h */ case    6:  		/* mr R3, R30 */
		/* 8214BB28h case    6:*/		regs.R3 = regs.R30;
		/* 8214BB28h case    6:*/		return 0x8214BB2C;
		  /* 8214BB2Ch */ case    7:  		/* bl -12964 */
		/* 8214BB2Ch case    7:*/		regs.LR = 0x8214BB30; return 0x82148888;
		/* 8214BB2Ch case    7:*/		return 0x8214BB30;
		  /* 8214BB30h */ case    8:  		/* mr R4, R31 */
		/* 8214BB30h case    8:*/		regs.R4 = regs.R31;
		/* 8214BB30h case    8:*/		return 0x8214BB34;
		  /* 8214BB34h */ case    9:  		/* mr R3, R30 */
		/* 8214BB34h case    9:*/		regs.R3 = regs.R30;
		/* 8214BB34h case    9:*/		return 0x8214BB38;
	}
	return 0x8214BB38;
} // Block from 8214BB10h-8214BB38h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8214BB38h
// Function 'XShaderPDBBuilder_SetFunctionCount'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BB38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BB38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BB38);
		  /* 8214BB38h */ case    0:  		/* bl -3680 */
		/* 8214BB38h case    0:*/		regs.LR = 0x8214BB3C; return 0x8214ACD8;
		/* 8214BB38h case    0:*/		return 0x8214BB3C;
		  /* 8214BB3Ch */ case    1:  		/* mr R4, R29 */
		/* 8214BB3Ch case    1:*/		regs.R4 = regs.R29;
		/* 8214BB3Ch case    1:*/		return 0x8214BB40;
	}
	return 0x8214BB40;
} // Block from 8214BB38h-8214BB40h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BB40h
// Function 'XShaderPDBBuilder_SetFunctionEntryExitCount'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BB40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BB40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BB40);
		  /* 8214BB40h */ case    0:  		/* mr R3, R31 */
		/* 8214BB40h case    0:*/		regs.R3 = regs.R31;
		/* 8214BB40h case    0:*/		return 0x8214BB44;
		  /* 8214BB44h */ case    1:  		/* bl -23516 */
		/* 8214BB44h case    1:*/		regs.LR = 0x8214BB48; return 0x82145F68;
		/* 8214BB44h case    1:*/		return 0x8214BB48;
	}
	return 0x8214BB48;
} // Block from 8214BB40h-8214BB48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BB48h
// Function 'XShaderPDBBuilder_AddFunctionEntry'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BB48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BB48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BB48);
		  /* 8214BB48h */ case    0:  		/* addi R1, R1, 112 */
		/* 8214BB48h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214BB48h case    0:*/		return 0x8214BB4C;
		  /* 8214BB4Ch */ case    1:  		/* b -764064 */
		/* 8214BB4Ch case    1:*/		return 0x820912AC;
		/* 8214BB4Ch case    1:*/		return 0x8214BB50;
	}
	return 0x8214BB50;
} // Block from 8214BB48h-8214BB50h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BB50h
// Function 'XShaderPDBBuilder_AddFunctionExit'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BB50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BB50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BB50);
		  /* 8214BB50h */ case    0:  		/* b -1600 */
		/* 8214BB50h case    0:*/		return 0x8214B510;
		/* 8214BB50h case    0:*/		return 0x8214BB54;
		  /* 8214BB54h */ case    1:  		/* nop */
		/* 8214BB54h case    1:*/		cpu::op::nop();
		/* 8214BB54h case    1:*/		return 0x8214BB58;
	}
	return 0x8214BB58;
} // Block from 8214BB50h-8214BB58h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BB58h
// Function 'XShaderPDBBuilder_SetLexicalScopeCount'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BB58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BB58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BB58);
		  /* 8214BB58h */ case    0:  		/* b -1304 */
		/* 8214BB58h case    0:*/		return 0x8214B640;
		/* 8214BB58h case    0:*/		return 0x8214BB5C;
		  /* 8214BB5Ch */ case    1:  		/* nop */
		/* 8214BB5Ch case    1:*/		cpu::op::nop();
		/* 8214BB5Ch case    1:*/		return 0x8214BB60;
	}
	return 0x8214BB60;
} // Block from 8214BB58h-8214BB60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BB60h
// Function 'XShaderPDBBuilder_AddLexicalScope'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BB60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BB60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BB60);
		  /* 8214BB60h */ case    0:  		/* b -1072 */
		/* 8214BB60h case    0:*/		return 0x8214B730;
		/* 8214BB60h case    0:*/		return 0x8214BB64;
		  /* 8214BB64h */ case    1:  		/* nop */
		/* 8214BB64h case    1:*/		cpu::op::nop();
		/* 8214BB64h case    1:*/		return 0x8214BB68;
	}
	return 0x8214BB68;
} // Block from 8214BB60h-8214BB68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BB68h
// Function 'XShaderPDBBuilder_EnumerateLiteralsCallback'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BB68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BB68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BB68);
		  /* 8214BB68h */ case    0:  		/* b -1192 */
		/* 8214BB68h case    0:*/		return 0x8214B6C0;
		/* 8214BB68h case    0:*/		return 0x8214BB6C;
		  /* 8214BB6Ch */ case    1:  		/* nop */
		/* 8214BB6Ch case    1:*/		cpu::op::nop();
		/* 8214BB6Ch case    1:*/		return 0x8214BB70;
	}
	return 0x8214BB70;
} // Block from 8214BB68h-8214BB70h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BB70h
// Function 'XShaderPDBBuilder_SetAssertCount'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BB70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BB70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BB70);
		  /* 8214BB70h */ case    0:  		/* b -928 */
		/* 8214BB70h case    0:*/		return 0x8214B7D0;
		/* 8214BB70h case    0:*/		return 0x8214BB74;
		  /* 8214BB74h */ case    1:  		/* nop */
		/* 8214BB74h case    1:*/		cpu::op::nop();
		/* 8214BB74h case    1:*/		return 0x8214BB78;
	}
	return 0x8214BB78;
} // Block from 8214BB70h-8214BB78h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BB78h
// Function 'XShaderPDBBuilder_SetDebugPrintCount'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BB78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BB78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BB78);
		  /* 8214BB78h */ case    0:  		/* b -720 */
		/* 8214BB78h case    0:*/		return 0x8214B8A8;
		/* 8214BB78h case    0:*/		return 0x8214BB7C;
		  /* 8214BB7Ch */ case    1:  		/* nop */
		/* 8214BB7Ch case    1:*/		cpu::op::nop();
		/* 8214BB7Ch case    1:*/		return 0x8214BB80;
	}
	return 0x8214BB80;
} // Block from 8214BB78h-8214BB80h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BB80h
// Function 'XShaderPDBBuilder_SetDebugPrintInfo'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BB80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BB80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BB80);
		  /* 8214BB80h */ case    0:  		/* b -496 */
		/* 8214BB80h case    0:*/		return 0x8214B990;
		/* 8214BB80h case    0:*/		return 0x8214BB84;
		  /* 8214BB84h */ case    1:  		/* nop */
		/* 8214BB84h case    1:*/		cpu::op::nop();
		/* 8214BB84h case    1:*/		return 0x8214BB88;
	}
	return 0x8214BB88;
} // Block from 8214BB80h-8214BB88h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BB88h
// Function 'XShaderPDBBuilder_SetDebugPrintArgumentCount'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BB88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BB88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BB88);
		  /* 8214BB88h */ case    0:  		/* mfspr R12, LR */
		/* 8214BB88h case    0:*/		regs.R12 = regs.LR;
		/* 8214BB88h case    0:*/		return 0x8214BB8C;
		  /* 8214BB8Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214BB8Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214BB8Ch case    1:*/		return 0x8214BB90;
	}
	return 0x8214BB90;
} // Block from 8214BB88h-8214BB90h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BB90h
// Function 'XShaderPDBBuilder_SetDebugPrintArgumentType'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BB90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BB90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BB90);
		  /* 8214BB90h */ case    0:  		/* std R30, <#[R1 - 24]> */
		/* 8214BB90h case    0:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8214BB90h case    0:*/		return 0x8214BB94;
		  /* 8214BB94h */ case    1:  		/* std R31, <#[R1 - 16]> */
		/* 8214BB94h case    1:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214BB94h case    1:*/		return 0x8214BB98;
	}
	return 0x8214BB98;
} // Block from 8214BB90h-8214BB98h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BB98h
// Function 'XShaderPDBBuilder_SetDebugPrintArgumentRegisterCount'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BB98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BB98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BB98);
		  /* 8214BB98h */ case    0:  		/* stwu R1, <#[R1 - 128]> */
		/* 8214BB98h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8214BB98h case    0:*/		return 0x8214BB9C;
		  /* 8214BB9Ch */ case    1:  		/* lwz R10, <#[R3 + 144]> */
		/* 8214BB9Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000090) );
		/* 8214BB9Ch case    1:*/		return 0x8214BBA0;
	}
	return 0x8214BBA0;
} // Block from 8214BB98h-8214BBA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BBA0h
// Function 'XShaderPDBBuilder_SetDebugPrintArgumentRegister'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BBA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BBA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BBA0);
		  /* 8214BBA0h */ case    0:  		/* li R11, 0 */
		/* 8214BBA0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8214BBA0h case    0:*/		return 0x8214BBA4;
		  /* 8214BBA4h */ case    1:  		/* mr R31, R3 */
		/* 8214BBA4h case    1:*/		regs.R31 = regs.R3;
		/* 8214BBA4h case    1:*/		return 0x8214BBA8;
	}
	return 0x8214BBA8;
} // Block from 8214BBA0h-8214BBA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BBA8h
// Function '?InitializeNewShader@ShaderPDBBuilder@XGRAPHICS@@QAAPAUPDBShader@2@PBDK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BBA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BBA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BBA8);
		  /* 8214BBA8h */ case    0:  		/* mr R30, R11 */
		/* 8214BBA8h case    0:*/		regs.R30 = regs.R11;
		/* 8214BBA8h case    0:*/		return 0x8214BBAC;
		  /* 8214BBACh */ case    1:  		/* cmpwi CR6, R10, 0 */
		/* 8214BBACh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 8214BBACh case    1:*/		return 0x8214BBB0;
		  /* 8214BBB0h */ case    2:  		/* bc 12, CR6_LT, 84 */
		/* 8214BBB0h case    2:*/		if ( regs.CR[6].lt ) { return 0x8214BC04;  }
		/* 8214BBB0h case    2:*/		return 0x8214BBB4;
		  /* 8214BBB4h */ case    3:  		/* lwz R10, <#[R3 + 148]> */
		/* 8214BBB4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000094) );
		/* 8214BBB4h case    3:*/		return 0x8214BBB8;
		  /* 8214BBB8h */ case    4:  		/* cmpwi CR6, R10, 1 */
		/* 8214BBB8h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 8214BBB8h case    4:*/		return 0x8214BBBC;
		  /* 8214BBBCh */ case    5:  		/* bc 12, CR6_EQ, 80 */
		/* 8214BBBCh case    5:*/		if ( regs.CR[6].eq ) { return 0x8214BC0C;  }
		/* 8214BBBCh case    5:*/		return 0x8214BBC0;
		  /* 8214BBC0h */ case    6:  		/* cmpwi CR6, R10, 3 */
		/* 8214BBC0h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 8214BBC0h case    6:*/		return 0x8214BBC4;
		  /* 8214BBC4h */ case    7:  		/* bc 4, CR6_EQ, 72 */
		/* 8214BBC4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8214BC0C;  }
		/* 8214BBC4h case    7:*/		return 0x8214BBC8;
		  /* 8214BBC8h */ case    8:  		/* lis R10, -32253 */
		/* 8214BBC8h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8214BBC8h case    8:*/		return 0x8214BBCC;
		  /* 8214BBCCh */ case    9:  		/* stw R11, <#[R1 + 84]> */
		/* 8214BBCCh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8214BBCCh case    9:*/		return 0x8214BBD0;
		  /* 8214BBD0h */ case   10:  		/* li R9, 1 */
		/* 8214BBD0h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8214BBD0h case   10:*/		return 0x8214BBD4;
		  /* 8214BBD4h */ case   11:  		/* stw R11, <#[R1 + 96]> */
		/* 8214BBD4h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 8214BBD4h case   11:*/		return 0x8214BBD8;
		  /* 8214BBD8h */ case   12:  		/* addi R10, R10, 25808 */
		/* 8214BBD8h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x64D0);
		/* 8214BBD8h case   12:*/		return 0x8214BBDC;
		  /* 8214BBDCh */ case   13:  		/* stw R11, <#[R1 + 92]> */
		/* 8214BBDCh case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214BBDCh case   13:*/		return 0x8214BBE0;
		  /* 8214BBE0h */ case   14:  		/* stw R9, <#[R1 + 88]> */
		/* 8214BBE0h case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8214BBE0h case   14:*/		return 0x8214BBE4;
		  /* 8214BBE4h */ case   15:  		/* addi R4, R1, 80 */
		/* 8214BBE4h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8214BBE4h case   15:*/		return 0x8214BBE8;
		  /* 8214BBE8h */ case   16:  		/* stw R10, <#[R1 + 80]> */
		/* 8214BBE8h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8214BBE8h case   16:*/		return 0x8214BBEC;
		  /* 8214BBECh */ case   17:  		/* bl -380 */
		/* 8214BBECh case   17:*/		regs.LR = 0x8214BBF0; return 0x8214BA70;
		/* 8214BBECh case   17:*/		return 0x8214BBF0;
		  /* 8214BBF0h */ case   18:  		/* lwz R11, <#[R1 + 92]> */
		/* 8214BBF0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214BBF0h case   18:*/		return 0x8214BBF4;
		  /* 8214BBF4h */ case   19:  		/* cmpwi CR6, R11, 0 */
		/* 8214BBF4h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214BBF4h case   19:*/		return 0x8214BBF8;
		  /* 8214BBF8h */ case   20:  		/* bc 12, CR6_LT, 8 */
		/* 8214BBF8h case   20:*/		if ( regs.CR[6].lt ) { return 0x8214BC00;  }
		/* 8214BBF8h case   20:*/		return 0x8214BBFC;
		  /* 8214BBFCh */ case   21:  		/* lwz R30, <#[R1 + 96]> */
		/* 8214BBFCh case   21:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000060) );
		/* 8214BBFCh case   21:*/		return 0x8214BC00;
	}
	return 0x8214BC00;
} // Block from 8214BBA8h-8214BC00h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8214BC00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BC00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BC00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BC00);
		  /* 8214BC00h */ case    0:  		/* stw R11, <#[R31 + 144]> */
		/* 8214BC00h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000090) );
		/* 8214BC00h case    0:*/		return 0x8214BC04;
	}
	return 0x8214BC04;
} // Block from 8214BC00h-8214BC04h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214BC04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BC04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BC04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BC04);
		  /* 8214BC04h */ case    0:  		/* mr R3, R30 */
		/* 8214BC04h case    0:*/		regs.R3 = regs.R30;
		/* 8214BC04h case    0:*/		return 0x8214BC08;
		  /* 8214BC08h */ case    1:  		/* b 8 */
		/* 8214BC08h case    1:*/		return 0x8214BC10;
		/* 8214BC08h case    1:*/		return 0x8214BC0C;
	}
	return 0x8214BC0C;
} // Block from 8214BC04h-8214BC0Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BC0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BC0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BC0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BC0C);
		  /* 8214BC0Ch */ case    0:  		/* li R3, 0 */
		/* 8214BC0Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214BC0Ch case    0:*/		return 0x8214BC10;
	}
	return 0x8214BC10;
} // Block from 8214BC0Ch-8214BC10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214BC10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BC10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BC10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BC10);
		  /* 8214BC10h */ case    0:  		/* addi R1, R1, 128 */
		/* 8214BC10h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8214BC10h case    0:*/		return 0x8214BC14;
		  /* 8214BC14h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214BC14h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214BC14h case    1:*/		return 0x8214BC18;
		  /* 8214BC18h */ case    2:  		/* mtspr LR, R12 */
		/* 8214BC18h case    2:*/		regs.LR = regs.R12;
		/* 8214BC18h case    2:*/		return 0x8214BC1C;
		  /* 8214BC1Ch */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8214BC1Ch case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8214BC1Ch case    3:*/		return 0x8214BC20;
		  /* 8214BC20h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8214BC20h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214BC20h case    4:*/		return 0x8214BC24;
		  /* 8214BC24h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8214BC24h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214BC24h case    5:*/		return 0x8214BC28;
	}
	return 0x8214BC28;
} // Block from 8214BC10h-8214BC28h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214BC28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BC28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BC28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BC28);
		  /* 8214BC28h */ case    0:  		/* mfspr R12, LR */
		/* 8214BC28h case    0:*/		regs.R12 = regs.LR;
		/* 8214BC28h case    0:*/		return 0x8214BC2C;
		  /* 8214BC2Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214BC2Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214BC2Ch case    1:*/		return 0x8214BC30;
		  /* 8214BC30h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8214BC30h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8214BC30h case    2:*/		return 0x8214BC34;
		  /* 8214BC34h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8214BC34h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214BC34h case    3:*/		return 0x8214BC38;
		  /* 8214BC38h */ case    4:  		/* stwu R1, <#[R1 - 144]> */
		/* 8214BC38h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8214BC38h case    4:*/		return 0x8214BC3C;
		  /* 8214BC3Ch */ case    5:  		/* lwz R11, <#[R3 + 144]> */
		/* 8214BC3Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000090) );
		/* 8214BC3Ch case    5:*/		return 0x8214BC40;
		  /* 8214BC40h */ case    6:  		/* mr R31, R3 */
		/* 8214BC40h case    6:*/		regs.R31 = regs.R3;
		/* 8214BC40h case    6:*/		return 0x8214BC44;
		  /* 8214BC44h */ case    7:  		/* mr R30, R6 */
		/* 8214BC44h case    7:*/		regs.R30 = regs.R6;
		/* 8214BC44h case    7:*/		return 0x8214BC48;
		  /* 8214BC48h */ case    8:  		/* cmpwi CR6, R11, 0 */
		/* 8214BC48h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214BC48h case    8:*/		return 0x8214BC4C;
		  /* 8214BC4Ch */ case    9:  		/* bc 12, CR6_LT, 116 */
		/* 8214BC4Ch case    9:*/		if ( regs.CR[6].lt ) { return 0x8214BCC0;  }
		/* 8214BC4Ch case    9:*/		return 0x8214BC50;
		  /* 8214BC50h */ case   10:  		/* lwz R11, <#[R3 + 148]> */
		/* 8214BC50h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000094) );
		/* 8214BC50h case   10:*/		return 0x8214BC54;
		  /* 8214BC54h */ case   11:  		/* cmpwi CR6, R11, 1 */
		/* 8214BC54h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8214BC54h case   11:*/		return 0x8214BC58;
		  /* 8214BC58h */ case   12:  		/* bc 12, CR6_EQ, 112 */
		/* 8214BC58h case   12:*/		if ( regs.CR[6].eq ) { return 0x8214BCC8;  }
		/* 8214BC58h case   12:*/		return 0x8214BC5C;
		  /* 8214BC5Ch */ case   13:  		/* cmpwi CR6, R11, 3 */
		/* 8214BC5Ch case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 8214BC5Ch case   13:*/		return 0x8214BC60;
		  /* 8214BC60h */ case   14:  		/* bc 12, CR6_EQ, 16 */
		/* 8214BC60h case   14:*/		if ( regs.CR[6].eq ) { return 0x8214BC70;  }
		/* 8214BC60h case   14:*/		return 0x8214BC64;
		  /* 8214BC64h */ case   15:  		/* lis R11, -32768 */
		/* 8214BC64h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 8214BC64h case   15:*/		return 0x8214BC68;
		  /* 8214BC68h */ case   16:  		/* ori R11, R11, 16389 */
		/* 8214BC68h case   16:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4005);
		/* 8214BC68h case   16:*/		return 0x8214BC6C;
		  /* 8214BC6Ch */ case   17:  		/* b 80 */
		/* 8214BC6Ch case   17:*/		return 0x8214BCBC;
		/* 8214BC6Ch case   17:*/		return 0x8214BC70;
	}
	return 0x8214BC70;
} // Block from 8214BC28h-8214BC70h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8214BC70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BC70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BC70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BC70);
		  /* 8214BC70h */ case    0:  		/* lis R10, -32253 */
		/* 8214BC70h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8214BC70h case    0:*/		return 0x8214BC74;
		  /* 8214BC74h */ case    1:  		/* stw R4, <#[R1 + 96]> */
		/* 8214BC74h case    1:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000060) );
		/* 8214BC74h case    1:*/		return 0x8214BC78;
		  /* 8214BC78h */ case    2:  		/* li R11, 0 */
		/* 8214BC78h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8214BC78h case    2:*/		return 0x8214BC7C;
		  /* 8214BC7Ch */ case    3:  		/* stw R5, <#[R1 + 100]> */
		/* 8214BC7Ch case    3:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000064) );
		/* 8214BC7Ch case    3:*/		return 0x8214BC80;
		  /* 8214BC80h */ case    4:  		/* addi R10, R10, 25824 */
		/* 8214BC80h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x64E0);
		/* 8214BC80h case    4:*/		return 0x8214BC84;
		  /* 8214BC84h */ case    5:  		/* li R9, 1 */
		/* 8214BC84h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8214BC84h case    5:*/		return 0x8214BC88;
		  /* 8214BC88h */ case    6:  		/* stw R11, <#[R1 + 84]> */
		/* 8214BC88h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8214BC88h case    6:*/		return 0x8214BC8C;
		  /* 8214BC8Ch */ case    7:  		/* stw R10, <#[R1 + 80]> */
		/* 8214BC8Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8214BC8Ch case    7:*/		return 0x8214BC90;
		  /* 8214BC90h */ case    8:  		/* addi R4, R1, 80 */
		/* 8214BC90h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8214BC90h case    8:*/		return 0x8214BC94;
		  /* 8214BC94h */ case    9:  		/* stw R9, <#[R1 + 88]> */
		/* 8214BC94h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8214BC94h case    9:*/		return 0x8214BC98;
		  /* 8214BC98h */ case   10:  		/* mr R3, R31 */
		/* 8214BC98h case   10:*/		regs.R3 = regs.R31;
		/* 8214BC98h case   10:*/		return 0x8214BC9C;
		  /* 8214BC9Ch */ case   11:  		/* stw R11, <#[R1 + 104]> */
		/* 8214BC9Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 8214BC9Ch case   11:*/		return 0x8214BCA0;
		  /* 8214BCA0h */ case   12:  		/* stw R11, <#[R1 + 92]> */
		/* 8214BCA0h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214BCA0h case   12:*/		return 0x8214BCA4;
		  /* 8214BCA4h */ case   13:  		/* bl -564 */
		/* 8214BCA4h case   13:*/		regs.LR = 0x8214BCA8; return 0x8214BA70;
		/* 8214BCA4h case   13:*/		return 0x8214BCA8;
		  /* 8214BCA8h */ case   14:  		/* lwz R11, <#[R1 + 92]> */
		/* 8214BCA8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214BCA8h case   14:*/		return 0x8214BCAC;
		  /* 8214BCACh */ case   15:  		/* cmpwi CR6, R11, 0 */
		/* 8214BCACh case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214BCACh case   15:*/		return 0x8214BCB0;
		  /* 8214BCB0h */ case   16:  		/* bc 12, CR6_LT, 12 */
		/* 8214BCB0h case   16:*/		if ( regs.CR[6].lt ) { return 0x8214BCBC;  }
		/* 8214BCB0h case   16:*/		return 0x8214BCB4;
		  /* 8214BCB4h */ case   17:  		/* lwz R10, <#[R1 + 104]> */
		/* 8214BCB4h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000068) );
		/* 8214BCB4h case   17:*/		return 0x8214BCB8;
		  /* 8214BCB8h */ case   18:  		/* stw R10, <#[R30]> */
		/* 8214BCB8h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 8214BCB8h case   18:*/		return 0x8214BCBC;
	}
	return 0x8214BCBC;
} // Block from 8214BC70h-8214BCBCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 8214BCBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BCBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BCBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BCBC);
		  /* 8214BCBCh */ case    0:  		/* stw R11, <#[R31 + 144]> */
		/* 8214BCBCh case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000090) );
		/* 8214BCBCh case    0:*/		return 0x8214BCC0;
	}
	return 0x8214BCC0;
} // Block from 8214BCBCh-8214BCC0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214BCC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BCC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BCC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BCC0);
		  /* 8214BCC0h */ case    0:  		/* lwz R3, <#[R31 + 144]> */
		/* 8214BCC0h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000090) );
		/* 8214BCC0h case    0:*/		return 0x8214BCC4;
		  /* 8214BCC4h */ case    1:  		/* b 8 */
		/* 8214BCC4h case    1:*/		return 0x8214BCCC;
		/* 8214BCC4h case    1:*/		return 0x8214BCC8;
	}
	return 0x8214BCC8;
} // Block from 8214BCC0h-8214BCC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BCC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BCC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BCC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BCC8);
		  /* 8214BCC8h */ case    0:  		/* li R3, 0 */
		/* 8214BCC8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214BCC8h case    0:*/		return 0x8214BCCC;
	}
	return 0x8214BCCC;
} // Block from 8214BCC8h-8214BCCCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214BCCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BCCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BCCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BCCC);
		  /* 8214BCCCh */ case    0:  		/* addi R1, R1, 144 */
		/* 8214BCCCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8214BCCCh case    0:*/		return 0x8214BCD0;
		  /* 8214BCD0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214BCD0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214BCD0h case    1:*/		return 0x8214BCD4;
		  /* 8214BCD4h */ case    2:  		/* mtspr LR, R12 */
		/* 8214BCD4h case    2:*/		regs.LR = regs.R12;
		/* 8214BCD4h case    2:*/		return 0x8214BCD8;
		  /* 8214BCD8h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8214BCD8h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8214BCD8h case    3:*/		return 0x8214BCDC;
		  /* 8214BCDCh */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8214BCDCh case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214BCDCh case    4:*/		return 0x8214BCE0;
		  /* 8214BCE0h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8214BCE0h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214BCE0h case    5:*/		return 0x8214BCE4;
	}
	return 0x8214BCE4;
} // Block from 8214BCCCh-8214BCE4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214BCE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BCE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BCE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BCE4);
		  /* 8214BCE4h */ case    0:  		/* nop */
		/* 8214BCE4h case    0:*/		cpu::op::nop();
		/* 8214BCE4h case    0:*/		return 0x8214BCE8;
	}
	return 0x8214BCE8;
} // Block from 8214BCE4h-8214BCE8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214BCE8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BCE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BCE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BCE8);
		  /* 8214BCE8h */ case    0:  		/* b -352 */
		/* 8214BCE8h case    0:*/		return 0x8214BB88;
		/* 8214BCE8h case    0:*/		return 0x8214BCEC;
		  /* 8214BCECh */ case    1:  		/* nop */
		/* 8214BCECh case    1:*/		cpu::op::nop();
		/* 8214BCECh case    1:*/		return 0x8214BCF0;
	}
	return 0x8214BCF0;
} // Block from 8214BCE8h-8214BCF0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BCF0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BCF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BCF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BCF0);
		  /* 8214BCF0h */ case    0:  		/* b -200 */
		/* 8214BCF0h case    0:*/		return 0x8214BC28;
		/* 8214BCF0h case    0:*/		return 0x8214BCF4;
		  /* 8214BCF4h */ case    1:  		/* nop */
		/* 8214BCF4h case    1:*/		cpu::op::nop();
		/* 8214BCF4h case    1:*/		return 0x8214BCF8;
	}
	return 0x8214BCF8;
} // Block from 8214BCF0h-8214BCF8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BCF8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BCF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BCF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BCF8);
		  /* 8214BCF8h */ case    0:  		/* li R3, 1 */
		/* 8214BCF8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8214BCF8h case    0:*/		return 0x8214BCFC;
		  /* 8214BCFCh */ case    1:  		/* bclr 20, CR0_LT */
		/* 8214BCFCh case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214BCFCh case    1:*/		return 0x8214BD00;
	}
	return 0x8214BD00;
} // Block from 8214BCF8h-8214BD00h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BD00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BD00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BD00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BD00);
		  /* 8214BD00h */ case    0:  		/* li R3, 1 */
		/* 8214BD00h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8214BD00h case    0:*/		return 0x8214BD04;
		  /* 8214BD04h */ case    1:  		/* b -731516 */
		/* 8214BD04h case    1:*/		return 0x82099388;
		/* 8214BD04h case    1:*/		return 0x8214BD08;
	}
	return 0x8214BD08;
} // Block from 8214BD00h-8214BD08h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BD08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BD08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BD08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BD08);
		  /* 8214BD08h */ case    0:  		/* mfspr R12, LR */
		/* 8214BD08h case    0:*/		regs.R12 = regs.LR;
		/* 8214BD08h case    0:*/		return 0x8214BD0C;
		  /* 8214BD0Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214BD0Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214BD0Ch case    1:*/		return 0x8214BD10;
		  /* 8214BD10h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8214BD10h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8214BD10h case    2:*/		return 0x8214BD14;
		  /* 8214BD14h */ case    3:  		/* mr R3, R4 */
		/* 8214BD14h case    3:*/		regs.R3 = regs.R4;
		/* 8214BD14h case    3:*/		return 0x8214BD18;
		  /* 8214BD18h */ case    4:  		/* bl -754928 */
		/* 8214BD18h case    4:*/		regs.LR = 0x8214BD1C; return 0x82093828;
		/* 8214BD18h case    4:*/		return 0x8214BD1C;
		  /* 8214BD1Ch */ case    5:  		/* li R3, 0 */
		/* 8214BD1Ch case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214BD1Ch case    5:*/		return 0x8214BD20;
		  /* 8214BD20h */ case    6:  		/* addi R1, R1, 96 */
		/* 8214BD20h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8214BD20h case    6:*/		return 0x8214BD24;
		  /* 8214BD24h */ case    7:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214BD24h case    7:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214BD24h case    7:*/		return 0x8214BD28;
		  /* 8214BD28h */ case    8:  		/* mtspr LR, R12 */
		/* 8214BD28h case    8:*/		regs.LR = regs.R12;
		/* 8214BD28h case    8:*/		return 0x8214BD2C;
		  /* 8214BD2Ch */ case    9:  		/* bclr 20, CR0_LT */
		/* 8214BD2Ch case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214BD2Ch case    9:*/		return 0x8214BD30;
	}
	return 0x8214BD30;
} // Block from 8214BD08h-8214BD30h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8214BD30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BD30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BD30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BD30);
		  /* 8214BD30h */ case    0:  		/* li R11, 0 */
		/* 8214BD30h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8214BD30h case    0:*/		return 0x8214BD34;
		  /* 8214BD34h */ case    1:  		/* li R10, 100 */
		/* 8214BD34h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x64);
		/* 8214BD34h case    1:*/		return 0x8214BD38;
		  /* 8214BD38h */ case    2:  		/* stw R11, <#[R6 + 16]> */
		/* 8214BD38h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000010) );
		/* 8214BD38h case    2:*/		return 0x8214BD3C;
		  /* 8214BD3Ch */ case    3:  		/* li R3, 0 */
		/* 8214BD3Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214BD3Ch case    3:*/		return 0x8214BD40;
		  /* 8214BD40h */ case    4:  		/* stw R11, <#[R6 + 8]> */
		/* 8214BD40h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000008) );
		/* 8214BD40h case    4:*/		return 0x8214BD44;
		  /* 8214BD44h */ case    5:  		/* stw R11, <#[R6 + 12]> */
		/* 8214BD44h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x0000000C) );
		/* 8214BD44h case    5:*/		return 0x8214BD48;
		  /* 8214BD48h */ case    6:  		/* stw R11, <#[R6 + 4]> */
		/* 8214BD48h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000004) );
		/* 8214BD48h case    6:*/		return 0x8214BD4C;
		  /* 8214BD4Ch */ case    7:  		/* stw R10, <#[R6]> */
		/* 8214BD4Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R6 + 0x00000000) );
		/* 8214BD4Ch case    7:*/		return 0x8214BD50;
		  /* 8214BD50h */ case    8:  		/* bclr 20, CR0_LT */
		/* 8214BD50h case    8:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214BD50h case    8:*/		return 0x8214BD54;
	}
	return 0x8214BD54;
} // Block from 8214BD30h-8214BD54h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214BD54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BD54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BD54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BD54);
		  /* 8214BD54h */ case    0:  		/* nop */
		/* 8214BD54h case    0:*/		cpu::op::nop();
		/* 8214BD54h case    0:*/		return 0x8214BD58;
		  /* 8214BD58h */ case    1:  		/* mr R11, R4 */
		/* 8214BD58h case    1:*/		regs.R11 = regs.R4;
		/* 8214BD58h case    1:*/		return 0x8214BD5C;
		  /* 8214BD5Ch */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 8214BD5Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8214BD5Ch case    2:*/		return 0x8214BD60;
		  /* 8214BD60h */ case    3:  		/* bc 12, CR6_EQ, 72 */
		/* 8214BD60h case    3:*/		if ( regs.CR[6].eq ) { return 0x8214BDA8;  }
		/* 8214BD60h case    3:*/		return 0x8214BD64;
		  /* 8214BD64h */ case    4:  		/* lis R10, -32253 */
		/* 8214BD64h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8214BD64h case    4:*/		return 0x8214BD68;
		  /* 8214BD68h */ case    5:  		/* addi R10, R10, 27440 */
		/* 8214BD68h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x6B30);
		/* 8214BD68h case    5:*/		return 0x8214BD6C;
		  /* 8214BD6Ch */ case    6:  		/* lbz R9, <#[R11]> */
		/* 8214BD6Ch case    6:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8214BD6Ch case    6:*/		return 0x8214BD70;
		  /* 8214BD70h */ case    7:  		/* lbz R8, <#[R10]> */
		/* 8214BD70h case    7:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 8214BD70h case    7:*/		return 0x8214BD74;
		  /* 8214BD74h */ case    8:  		/* cmpwi CR0, R9, 0 */
		/* 8214BD74h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8214BD74h case    8:*/		return 0x8214BD78;
		  /* 8214BD78h */ case    9:  		/* subf R9, R8, R9 */
		/* 8214BD78h case    9:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8214BD78h case    9:*/		return 0x8214BD7C;
		  /* 8214BD7Ch */ case   10:  		/* bc 12, CR0_EQ, 20 */
		/* 8214BD7Ch case   10:*/		if ( regs.CR[0].eq ) { return 0x8214BD90;  }
		/* 8214BD7Ch case   10:*/		return 0x8214BD80;
		  /* 8214BD80h */ case   11:  		/* addi R11, R11, 1 */
		/* 8214BD80h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214BD80h case   11:*/		return 0x8214BD84;
		  /* 8214BD84h */ case   12:  		/* addi R10, R10, 1 */
		/* 8214BD84h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8214BD84h case   12:*/		return 0x8214BD88;
		  /* 8214BD88h */ case   13:  		/* cmpwi CR6, R9, 0 */
		/* 8214BD88h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 8214BD88h case   13:*/		return 0x8214BD8C;
		  /* 8214BD8Ch */ case   14:  		/* bc 12, CR6_EQ, -32 */
		/* 8214BD8Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x8214BD6C;  }
		/* 8214BD8Ch case   14:*/		return 0x8214BD90;
	}
	return 0x8214BD90;
} // Block from 8214BD54h-8214BD90h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8214BD90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BD90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BD90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BD90);
		  /* 8214BD90h */ case    0:  		/* cmpwi CR0, R9, 0 */
		/* 8214BD90h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R9,0x00000000);
		/* 8214BD90h case    0:*/		return 0x8214BD94;
		  /* 8214BD94h */ case    1:  		/* bc 4, CR0_EQ, 20 */
		/* 8214BD94h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8214BDA8;  }
		/* 8214BD94h case    1:*/		return 0x8214BD98;
		  /* 8214BD98h */ case    2:  		/* lwz R11, <#[R3 + 8]> */
		/* 8214BD98h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8214BD98h case    2:*/		return 0x8214BD9C;
		  /* 8214BD9Ch */ case    3:  		/* li R3, 1 */
		/* 8214BD9Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8214BD9Ch case    3:*/		return 0x8214BDA0;
		  /* 8214BDA0h */ case    4:  		/* stw R11, <#[R5]> */
		/* 8214BDA0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 8214BDA0h case    4:*/		return 0x8214BDA4;
		  /* 8214BDA4h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8214BDA4h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214BDA4h case    5:*/		return 0x8214BDA8;
	}
	return 0x8214BDA8;
} // Block from 8214BD90h-8214BDA8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214BDA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BDA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BDA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BDA8);
		  /* 8214BDA8h */ case    0:  		/* li R3, 0 */
		/* 8214BDA8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214BDA8h case    0:*/		return 0x8214BDAC;
		  /* 8214BDACh */ case    1:  		/* bclr 20, CR0_LT */
		/* 8214BDACh case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214BDACh case    1:*/		return 0x8214BDB0;
	}
	return 0x8214BDB0;
} // Block from 8214BDA8h-8214BDB0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BDB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BDB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BDB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BDB0);
		  /* 8214BDB0h */ case    0:  		/* twi 31, R0, 22 */
		/* 8214BDB0h case    0:*/		cpu::op::trap(regs, 0x8214BDB0, regs.R0, 0x00000016);
		/* 8214BDB0h case    0:*/		return 0x8214BDB4;
		  /* 8214BDB4h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8214BDB4h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214BDB4h case    1:*/		return 0x8214BDB8;
	}
	return 0x8214BDB8;
} // Block from 8214BDB0h-8214BDB8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BDB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BDB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BDB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BDB8);
		  /* 8214BDB8h */ case    0:  		/* lwz R11, <#[R3 + 4]> */
		/* 8214BDB8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8214BDB8h case    0:*/		return 0x8214BDBC;
		  /* 8214BDBCh */ case    1:  		/* lwz R3, <#[R3]> */
		/* 8214BDBCh case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000000) );
		/* 8214BDBCh case    1:*/		return 0x8214BDC0;
		  /* 8214BDC0h */ case    2:  		/* mtspr CTR, R11 */
		/* 8214BDC0h case    2:*/		regs.CTR = regs.R11;
		/* 8214BDC0h case    2:*/		return 0x8214BDC4;
		  /* 8214BDC4h */ case    3:  		/* bcctr 20, CR0_LT */
		/* 8214BDC4h case    3:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 8214BDC4h case    3:*/		return 0x8214BDC8;
	}
	return 0x8214BDC8;
} // Block from 8214BDB8h-8214BDC8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214BDC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BDC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BDC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BDC8);
		  /* 8214BDC8h */ case    0:  		/* mfspr R12, LR */
		/* 8214BDC8h case    0:*/		regs.R12 = regs.LR;
		/* 8214BDC8h case    0:*/		return 0x8214BDCC;
		  /* 8214BDCCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214BDCCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214BDCCh case    1:*/		return 0x8214BDD0;
		  /* 8214BDD0h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8214BDD0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8214BDD0h case    2:*/		return 0x8214BDD4;
		  /* 8214BDD4h */ case    3:  		/* li R11, 0 */
		/* 8214BDD4h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8214BDD4h case    3:*/		return 0x8214BDD8;
		  /* 8214BDD8h */ case    4:  		/* stw R11, <#[R3 + 8]> */
		/* 8214BDD8h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8214BDD8h case    4:*/		return 0x8214BDDC;
		  /* 8214BDDCh */ case    5:  		/* stw R11, <#[R3]> */
		/* 8214BDDCh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8214BDDCh case    5:*/		return 0x8214BDE0;
		  /* 8214BDE0h */ case    6:  		/* stw R11, <#[R3 + 4]> */
		/* 8214BDE0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8214BDE0h case    6:*/		return 0x8214BDE4;
		  /* 8214BDE4h */ case    7:  		/* bl 46820 */
		/* 8214BDE4h case    7:*/		regs.LR = 0x8214BDE8; return 0x821574C8;
		/* 8214BDE4h case    7:*/		return 0x8214BDE8;
		  /* 8214BDE8h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 8214BDE8h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8214BDE8h case    8:*/		return 0x8214BDEC;
		  /* 8214BDECh */ case    9:  		/* bc 4, CR0_EQ, 16 */
		/* 8214BDECh case    9:*/		if ( !regs.CR[0].eq ) { return 0x8214BDFC;  }
		/* 8214BDECh case    9:*/		return 0x8214BDF0;
		  /* 8214BDF0h */ case   10:  		/* bl 41912 */
		/* 8214BDF0h case   10:*/		regs.LR = 0x8214BDF4; return 0x821561A8;
		/* 8214BDF0h case   10:*/		return 0x8214BDF4;
		  /* 8214BDF4h */ case   11:  		/* li R3, 0 */
		/* 8214BDF4h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214BDF4h case   11:*/		return 0x8214BDF8;
		  /* 8214BDF8h */ case   12:  		/* b 12 */
		/* 8214BDF8h case   12:*/		return 0x8214BE04;
		/* 8214BDF8h case   12:*/		return 0x8214BDFC;
	}
	return 0x8214BDFC;
} // Block from 8214BDC8h-8214BDFCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214BDFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BDFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BDFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BDFC);
		  /* 8214BDFCh */ case    0:  		/* lis R3, -32761 */
		/* 8214BDFCh case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8214BDFCh case    0:*/		return 0x8214BE00;
		  /* 8214BE00h */ case    1:  		/* ori R3, R3, 14 */
		/* 8214BE00h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8214BE00h case    1:*/		return 0x8214BE04;
	}
	return 0x8214BE04;
} // Block from 8214BDFCh-8214BE04h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BE04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BE04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BE04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BE04);
		  /* 8214BE04h */ case    0:  		/* addi R1, R1, 96 */
		/* 8214BE04h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8214BE04h case    0:*/		return 0x8214BE08;
		  /* 8214BE08h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214BE08h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214BE08h case    1:*/		return 0x8214BE0C;
		  /* 8214BE0Ch */ case    2:  		/* mtspr LR, R12 */
		/* 8214BE0Ch case    2:*/		regs.LR = regs.R12;
		/* 8214BE0Ch case    2:*/		return 0x8214BE10;
		  /* 8214BE10h */ case    3:  		/* bclr 20, CR0_LT */
		/* 8214BE10h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214BE10h case    3:*/		return 0x8214BE14;
	}
	return 0x8214BE14;
} // Block from 8214BE04h-8214BE14h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214BE14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BE14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BE14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BE14);
		  /* 8214BE14h */ case    0:  		/* nop */
		/* 8214BE14h case    0:*/		cpu::op::nop();
		/* 8214BE14h case    0:*/		return 0x8214BE18;
	}
	return 0x8214BE18;
} // Block from 8214BE14h-8214BE18h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214BE18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BE18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BE18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BE18);
		  /* 8214BE18h */ case    0:  		/* mfspr R12, LR */
		/* 8214BE18h case    0:*/		regs.R12 = regs.LR;
		/* 8214BE18h case    0:*/		return 0x8214BE1C;
		  /* 8214BE1Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214BE1Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214BE1Ch case    1:*/		return 0x8214BE20;
		  /* 8214BE20h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8214BE20h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8214BE20h case    2:*/		return 0x8214BE24;
		  /* 8214BE24h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8214BE24h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214BE24h case    3:*/		return 0x8214BE28;
		  /* 8214BE28h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8214BE28h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8214BE28h case    4:*/		return 0x8214BE2C;
		  /* 8214BE2Ch */ case    5:  		/* mr R31, R7 */
		/* 8214BE2Ch case    5:*/		regs.R31 = regs.R7;
		/* 8214BE2Ch case    5:*/		return 0x8214BE30;
		  /* 8214BE30h */ case    6:  		/* stw R6, <#[R8]> */
		/* 8214BE30h case    6:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R8 + 0x00000000) );
		/* 8214BE30h case    6:*/		return 0x8214BE34;
		  /* 8214BE34h */ case    7:  		/* mr R30, R8 */
		/* 8214BE34h case    7:*/		regs.R30 = regs.R8;
		/* 8214BE34h case    7:*/		return 0x8214BE38;
		  /* 8214BE38h */ case    8:  		/* cmplwi CR6, R5, 19 */
		/* 8214BE38h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000013);
		/* 8214BE38h case    8:*/		return 0x8214BE3C;
		  /* 8214BE3Ch */ case    9:  		/* bc 12, CR6_EQ, 96 */
		/* 8214BE3Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x8214BE9C;  }
		/* 8214BE3Ch case    9:*/		return 0x8214BE40;
		  /* 8214BE40h */ case   10:  		/* cmplwi CR6, R5, 20 */
		/* 8214BE40h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000014);
		/* 8214BE40h case   10:*/		return 0x8214BE44;
		  /* 8214BE44h */ case   11:  		/* bc 12, CR6_EQ, 80 */
		/* 8214BE44h case   11:*/		if ( regs.CR[6].eq ) { return 0x8214BE94;  }
		/* 8214BE44h case   11:*/		return 0x8214BE48;
		  /* 8214BE48h */ case   12:  		/* cmplwi CR6, R5, 21 */
		/* 8214BE48h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000015);
		/* 8214BE48h case   12:*/		return 0x8214BE4C;
		  /* 8214BE4Ch */ case   13:  		/* bc 12, CR6_EQ, 64 */
		/* 8214BE4Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x8214BE8C;  }
		/* 8214BE4Ch case   13:*/		return 0x8214BE50;
	}
	return 0x8214BE50;
} // Block from 8214BE18h-8214BE50h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8214BE50h
// Function '?BeginPass@ShaderPDBBuilder@XGRAPHICS@@UAAXH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BE50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BE50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BE50);
		  /* 8214BE50h */ case    0:  		/* cmplwi CR6, R5, 22 */
		/* 8214BE50h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000016);
		/* 8214BE50h case    0:*/		return 0x8214BE54;
		  /* 8214BE54h */ case    1:  		/* bc 12, CR6_EQ, 44 */
		/* 8214BE54h case    1:*/		if ( regs.CR[6].eq ) { return 0x8214BE80;  }
		/* 8214BE54h case    1:*/		return 0x8214BE58;
		  /* 8214BE58h */ case    2:  		/* cmplwi CR6, R5, 23 */
		/* 8214BE58h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000017);
		/* 8214BE58h case    2:*/		return 0x8214BE5C;
		  /* 8214BE5Ch */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 8214BE5Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8214BE74;  }
		/* 8214BE5Ch case    3:*/		return 0x8214BE60;
		  /* 8214BE60h */ case    4:  		/* bl 1160192 */
		/* 8214BE60h case    4:*/		regs.LR = 0x8214BE64; return 0x82267260;
		/* 8214BE60h case    4:*/		return 0x8214BE64;
		  /* 8214BE64h */ case    5:  		/* li R11, 15 */
		/* 8214BE64h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0xF);
		/* 8214BE64h case    5:*/		return 0x8214BE68;
		  /* 8214BE68h */ case    6:  		/* stw R11, <#[R31]> */
		/* 8214BE68h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214BE68h case    6:*/		return 0x8214BE6C;
		  /* 8214BE6Ch */ case    7:  		/* stw R11, <#[R30]> */
		/* 8214BE6Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8214BE6Ch case    7:*/		return 0x8214BE70;
		  /* 8214BE70h */ case    8:  		/* b 144 */
		/* 8214BE70h case    8:*/		return 0x8214BF00;
		/* 8214BE70h case    8:*/		return 0x8214BE74;
	}
	return 0x8214BE74;
} // Block from 8214BE50h-8214BE74h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214BE74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BE74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BE74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BE74);
		  /* 8214BE74h */ case    0:  		/* li R11, 11 */
		/* 8214BE74h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xB);
		/* 8214BE74h case    0:*/		return 0x8214BE78;
		  /* 8214BE78h */ case    1:  		/* stw R11, <#[R31]> */
		/* 8214BE78h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214BE78h case    1:*/		return 0x8214BE7C;
		  /* 8214BE7Ch */ case    2:  		/* b 148 */
		/* 8214BE7Ch case    2:*/		return 0x8214BF10;
		/* 8214BE7Ch case    2:*/		return 0x8214BE80;
	}
	return 0x8214BE80;
} // Block from 8214BE74h-8214BE80h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214BE80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BE80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BE80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BE80);
		  /* 8214BE80h */ case    0:  		/* li R11, 10 */
		/* 8214BE80h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xA);
		/* 8214BE80h case    0:*/		return 0x8214BE84;
		  /* 8214BE84h */ case    1:  		/* li R10, 1 */
		/* 8214BE84h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8214BE84h case    1:*/		return 0x8214BE88;
		  /* 8214BE88h */ case    2:  		/* b 112 */
		/* 8214BE88h case    2:*/		return 0x8214BEF8;
		/* 8214BE88h case    2:*/		return 0x8214BE8C;
	}
	return 0x8214BE8C;
} // Block from 8214BE80h-8214BE8Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214BE8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BE8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BE8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BE8C);
		  /* 8214BE8Ch */ case    0:  		/* li R11, 10 */
		/* 8214BE8Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xA);
		/* 8214BE8Ch case    0:*/		return 0x8214BE90;
		  /* 8214BE90h */ case    1:  		/* b -24 */
		/* 8214BE90h case    1:*/		return 0x8214BE78;
		/* 8214BE90h case    1:*/		return 0x8214BE94;
	}
	return 0x8214BE94;
} // Block from 8214BE8Ch-8214BE94h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BE94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BE94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BE94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BE94);
		  /* 8214BE94h */ case    0:  		/* li R11, 5 */
		/* 8214BE94h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 8214BE94h case    0:*/		return 0x8214BE98;
		  /* 8214BE98h */ case    1:  		/* b -32 */
		/* 8214BE98h case    1:*/		return 0x8214BE78;
		/* 8214BE98h case    1:*/		return 0x8214BE9C;
	}
	return 0x8214BE9C;
} // Block from 8214BE94h-8214BE9Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BE9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BE9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BE9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BE9C);
		  /* 8214BE9Ch */ case    0:  		/* cmplwi CR6, R6, 10 */
		/* 8214BE9Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x0000000A);
		/* 8214BE9Ch case    0:*/		return 0x8214BEA0;
		  /* 8214BEA0h */ case    1:  		/* bc 4, CR6_LT, 76 */
		/* 8214BEA0h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8214BEEC;  }
		/* 8214BEA0h case    1:*/		return 0x8214BEA4;
		  /* 8214BEA4h */ case    2:  		/* cmplwi CR6, R3, 20 */
		/* 8214BEA4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000014);
		/* 8214BEA4h case    2:*/		return 0x8214BEA8;
		  /* 8214BEA8h */ case    3:  		/* bc 12, CR6_EQ, 52 */
		/* 8214BEA8h case    3:*/		if ( regs.CR[6].eq ) { return 0x8214BEDC;  }
		/* 8214BEA8h case    3:*/		return 0x8214BEAC;
		  /* 8214BEACh */ case    4:  		/* cmplwi CR6, R3, 21 */
		/* 8214BEACh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000015);
		/* 8214BEACh case    4:*/		return 0x8214BEB0;
		  /* 8214BEB0h */ case    5:  		/* bc 12, CR6_EQ, -36 */
		/* 8214BEB0h case    5:*/		if ( regs.CR[6].eq ) { return 0x8214BE8C;  }
		/* 8214BEB0h case    5:*/		return 0x8214BEB4;
		  /* 8214BEB4h */ case    6:  		/* cmplwi CR6, R3, 22 */
		/* 8214BEB4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000016);
		/* 8214BEB4h case    6:*/		return 0x8214BEB8;
		  /* 8214BEB8h */ case    7:  		/* bc 12, CR6_EQ, -56 */
		/* 8214BEB8h case    7:*/		if ( regs.CR[6].eq ) { return 0x8214BE80;  }
		/* 8214BEB8h case    7:*/		return 0x8214BEBC;
		  /* 8214BEBCh */ case    8:  		/* cmplwi CR6, R3, 23 */
		/* 8214BEBCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000017);
		/* 8214BEBCh case    8:*/		return 0x8214BEC0;
		  /* 8214BEC0h */ case    9:  		/* bc 12, CR6_EQ, -76 */
		/* 8214BEC0h case    9:*/		if ( regs.CR[6].eq ) { return 0x8214BE74;  }
		/* 8214BEC0h case    9:*/		return 0x8214BEC4;
		  /* 8214BEC4h */ case   10:  		/* cmplwi CR6, R3, 33 */
		/* 8214BEC4h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000021);
		/* 8214BEC4h case   10:*/		return 0x8214BEC8;
		  /* 8214BEC8h */ case   11:  		/* bc 12, CR6_EQ, -52 */
		/* 8214BEC8h case   11:*/		if ( regs.CR[6].eq ) { return 0x8214BE94;  }
		/* 8214BEC8h case   11:*/		return 0x8214BECC;
		  /* 8214BECCh */ case   12:  		/* bl 1160084 */
		/* 8214BECCh case   12:*/		regs.LR = 0x8214BED0; return 0x82267260;
		/* 8214BECCh case   12:*/		return 0x8214BED0;
		  /* 8214BED0h */ case   13:  		/* li R11, 15 */
		/* 8214BED0h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0xF);
		/* 8214BED0h case   13:*/		return 0x8214BED4;
		  /* 8214BED4h */ case   14:  		/* stw R11, <#[R31]> */
		/* 8214BED4h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214BED4h case   14:*/		return 0x8214BED8;
		  /* 8214BED8h */ case   15:  		/* b 52 */
		/* 8214BED8h case   15:*/		return 0x8214BF0C;
		/* 8214BED8h case   15:*/		return 0x8214BEDC;
	}
	return 0x8214BEDC;
} // Block from 8214BE9Ch-8214BEDCh (16 instructions)

//////////////////////////////////////////////////////
// Block at 8214BEDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BEDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BEDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BEDC);
		  /* 8214BEDCh */ case    0:  		/* li R11, 5 */
		/* 8214BEDCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 8214BEDCh case    0:*/		return 0x8214BEE0;
		  /* 8214BEE0h */ case    1:  		/* stw R11, <#[R31]> */
		/* 8214BEE0h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214BEE0h case    1:*/		return 0x8214BEE4;
		  /* 8214BEE4h */ case    2:  		/* stw R4, <#[R30]> */
		/* 8214BEE4h case    2:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 8214BEE4h case    2:*/		return 0x8214BEE8;
		  /* 8214BEE8h */ case    3:  		/* b 24 */
		/* 8214BEE8h case    3:*/		return 0x8214BF00;
		/* 8214BEE8h case    3:*/		return 0x8214BEEC;
	}
	return 0x8214BEEC;
} // Block from 8214BEDCh-8214BEECh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214BEECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BEEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BEEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BEEC);
		  /* 8214BEECh */ case    0:  		/* rlwinm R11, R6, 28, 4, 31 */
		/* 8214BEECh case    0:*/		cpu::op::rlwinm<0,28,4,31>(regs,&regs.R11,regs.R6);
		/* 8214BEECh case    0:*/		return 0x8214BEF0;
	}
	return 0x8214BEF0;
} // Block from 8214BEECh-8214BEF0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214BEF0h
// Function '?BeginShader@ShaderPDBBuilder@XGRAPHICS@@QAAXPBDK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BEF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BEF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BEF0);
		  /* 8214BEF0h */ case    0:  		/* rlwinm R10, R6, 0, 28, 31 */
		/* 8214BEF0h case    0:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R10,regs.R6);
		/* 8214BEF0h case    0:*/		return 0x8214BEF4;
		  /* 8214BEF4h */ case    1:  		/* addi R11, R11, -1 */
		/* 8214BEF4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8214BEF4h case    1:*/		return 0x8214BEF8;
	}
	return 0x8214BEF8;
} // Block from 8214BEF0h-8214BEF8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BEF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BEF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BEF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BEF8);
		  /* 8214BEF8h */ case    0:  		/* stw R11, <#[R31]> */
		/* 8214BEF8h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214BEF8h case    0:*/		return 0x8214BEFC;
		  /* 8214BEFCh */ case    1:  		/* stw R10, <#[R30]> */
		/* 8214BEFCh case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 8214BEFCh case    1:*/		return 0x8214BF00;
	}
	return 0x8214BF00;
} // Block from 8214BEF8h-8214BF00h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214BF00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BF00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BF00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BF00);
		  /* 8214BF00h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8214BF00h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214BF00h case    0:*/		return 0x8214BF04;
		  /* 8214BF04h */ case    1:  		/* cmplwi CR6, R11, 13 */
		/* 8214BF04h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000D);
		/* 8214BF04h case    1:*/		return 0x8214BF08;
		  /* 8214BF08h */ case    2:  		/* bc 4, CR6_GT, 8 */
		/* 8214BF08h case    2:*/		if ( !regs.CR[6].gt ) { return 0x8214BF10;  }
		/* 8214BF08h case    2:*/		return 0x8214BF0C;
	}
	return 0x8214BF0C;
} // Block from 8214BF00h-8214BF0Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214BF0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BF0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BF0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BF0C);
		  /* 8214BF0Ch */ case    0:  		/* bl 1160020 */
		/* 8214BF0Ch case    0:*/		regs.LR = 0x8214BF10; return 0x82267260;
		/* 8214BF0Ch case    0:*/		return 0x8214BF10;
	}
	return 0x8214BF10;
} // Block from 8214BF0Ch-8214BF10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214BF10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BF10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BF10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BF10);
		  /* 8214BF10h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 8214BF10h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8214BF10h case    0:*/		return 0x8214BF14;
		  /* 8214BF14h */ case    1:  		/* cmplwi CR6, R11, 16 */
		/* 8214BF14h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000010);
		/* 8214BF14h case    1:*/		return 0x8214BF18;
		  /* 8214BF18h */ case    2:  		/* bc 12, CR6_LT, 8 */
		/* 8214BF18h case    2:*/		if ( regs.CR[6].lt ) { return 0x8214BF20;  }
		/* 8214BF18h case    2:*/		return 0x8214BF1C;
		  /* 8214BF1Ch */ case    3:  		/* bl 1160004 */
		/* 8214BF1Ch case    3:*/		regs.LR = 0x8214BF20; return 0x82267260;
		/* 8214BF1Ch case    3:*/		return 0x8214BF20;
	}
	return 0x8214BF20;
} // Block from 8214BF10h-8214BF20h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214BF20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BF20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BF20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BF20);
		  /* 8214BF20h */ case    0:  		/* addi R1, R1, 112 */
		/* 8214BF20h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214BF20h case    0:*/		return 0x8214BF24;
		  /* 8214BF24h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214BF24h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214BF24h case    1:*/		return 0x8214BF28;
		  /* 8214BF28h */ case    2:  		/* mtspr LR, R12 */
		/* 8214BF28h case    2:*/		regs.LR = regs.R12;
		/* 8214BF28h case    2:*/		return 0x8214BF2C;
		  /* 8214BF2Ch */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8214BF2Ch case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8214BF2Ch case    3:*/		return 0x8214BF30;
		  /* 8214BF30h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8214BF30h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214BF30h case    4:*/		return 0x8214BF34;
		  /* 8214BF34h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8214BF34h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214BF34h case    5:*/		return 0x8214BF38;
	}
	return 0x8214BF38;
} // Block from 8214BF20h-8214BF38h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214BF38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BF38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BF38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BF38);
		  /* 8214BF38h */ case    0:  		/* mfspr R12, LR */
		/* 8214BF38h case    0:*/		regs.R12 = regs.LR;
		/* 8214BF38h case    0:*/		return 0x8214BF3C;
		  /* 8214BF3Ch */ case    1:  		/* bl -765152 */
		/* 8214BF3Ch case    1:*/		regs.LR = 0x8214BF40; return 0x8209125C;
		/* 8214BF3Ch case    1:*/		return 0x8214BF40;
		  /* 8214BF40h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8214BF40h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8214BF40h case    2:*/		return 0x8214BF44;
		  /* 8214BF44h */ case    3:  		/* rlwinm R29, R4, 27, 5, 31 */
		/* 8214BF44h case    3:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R29,regs.R4);
		/* 8214BF44h case    3:*/		return 0x8214BF48;
		  /* 8214BF48h */ case    4:  		/* mr R31, R3 */
		/* 8214BF48h case    4:*/		regs.R31 = regs.R3;
		/* 8214BF48h case    4:*/		return 0x8214BF4C;
		  /* 8214BF4Ch */ case    5:  		/* mr R30, R4 */
		/* 8214BF4Ch case    5:*/		regs.R30 = regs.R4;
		/* 8214BF4Ch case    5:*/		return 0x8214BF50;
		  /* 8214BF50h */ case    6:  		/* cmplwi CR6, R29, 8 */
		/* 8214BF50h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000008);
		/* 8214BF50h case    6:*/		return 0x8214BF54;
		  /* 8214BF54h */ case    7:  		/* bc 12, CR6_LT, 40 */
		/* 8214BF54h case    7:*/		if ( regs.CR[6].lt ) { return 0x8214BF7C;  }
		/* 8214BF54h case    7:*/		return 0x8214BF58;
		  /* 8214BF58h */ case    8:  		/* lis R11, -32253 */
		/* 8214BF58h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214BF58h case    8:*/		return 0x8214BF5C;
		  /* 8214BF5Ch */ case    9:  		/* lis R10, -32253 */
		/* 8214BF5Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8214BF5Ch case    9:*/		return 0x8214BF60;
		  /* 8214BF60h */ case   10:  		/* lis R9, -32253 */
		/* 8214BF60h case   10:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8214BF60h case   10:*/		return 0x8214BF64;
		  /* 8214BF64h */ case   11:  		/* addi R6, R11, 27552 */
		/* 8214BF64h case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x6BA0);
		/* 8214BF64h case   11:*/		return 0x8214BF68;
		  /* 8214BF68h */ case   12:  		/* addi R5, R10, 27492 */
		/* 8214BF68h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6B64);
		/* 8214BF68h case   12:*/		return 0x8214BF6C;
		  /* 8214BF6Ch */ case   13:  		/* addi R4, R9, 27460 */
		/* 8214BF6Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8214BF6Ch case   13:*/		return 0x8214BF70;
		  /* 8214BF70h */ case   14:  		/* li R7, 808 */
		/* 8214BF70h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x328);
		/* 8214BF70h case   14:*/		return 0x8214BF74;
		  /* 8214BF74h */ case   15:  		/* li R3, 0 */
		/* 8214BF74h case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214BF74h case   15:*/		return 0x8214BF78;
		  /* 8214BF78h */ case   16:  		/* bl 48272 */
		/* 8214BF78h case   16:*/		regs.LR = 0x8214BF7C; return 0x82157C08;
		/* 8214BF78h case   16:*/		return 0x8214BF7C;
	}
	return 0x8214BF7C;
} // Block from 8214BF38h-8214BF7Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8214BF7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BF7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BF7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BF7C);
		  /* 8214BF7Ch */ case    0:  		/* rlwinm R11, R29, 2, 0, 29 */
		/* 8214BF7Ch case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R29);
		/* 8214BF7Ch case    0:*/		return 0x8214BF80;
		  /* 8214BF80h */ case    1:  		/* li R9, 1 */
		/* 8214BF80h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8214BF80h case    1:*/		return 0x8214BF84;
		  /* 8214BF84h */ case    2:  		/* rlwinm R10, R30, 0, 27, 31 */
		/* 8214BF84h case    2:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R30);
		/* 8214BF84h case    2:*/		return 0x8214BF88;
		  /* 8214BF88h */ case    3:  		/* slw R10, R9, R10 */
		/* 8214BF88h case    3:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8214BF88h case    3:*/		return 0x8214BF8C;
		  /* 8214BF8Ch */ case    4:  		/* lwzx R9, <#[R11 + R31]> */
		/* 8214BF8Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8214BF8Ch case    4:*/		return 0x8214BF90;
		  /* 8214BF90h */ case    5:  		/* or R10, R10, R9 */
		/* 8214BF90h case    5:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8214BF90h case    5:*/		return 0x8214BF94;
		  /* 8214BF94h */ case    6:  		/* stwx R10, <#[R11 + R31]> */
		/* 8214BF94h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8214BF94h case    6:*/		return 0x8214BF98;
		  /* 8214BF98h */ case    7:  		/* addi R1, R1, 112 */
		/* 8214BF98h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214BF98h case    7:*/		return 0x8214BF9C;
		  /* 8214BF9Ch */ case    8:  		/* b -765168 */
		/* 8214BF9Ch case    8:*/		return 0x820912AC;
		/* 8214BF9Ch case    8:*/		return 0x8214BFA0;
	}
	return 0x8214BFA0;
} // Block from 8214BF7Ch-8214BFA0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214BFA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BFA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BFA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BFA0);
		  /* 8214BFA0h */ case    0:  		/* mfspr R12, LR */
		/* 8214BFA0h case    0:*/		regs.R12 = regs.LR;
		/* 8214BFA0h case    0:*/		return 0x8214BFA4;
		  /* 8214BFA4h */ case    1:  		/* bl -765256 */
		/* 8214BFA4h case    1:*/		regs.LR = 0x8214BFA8; return 0x8209125C;
		/* 8214BFA4h case    1:*/		return 0x8214BFA8;
		  /* 8214BFA8h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8214BFA8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8214BFA8h case    2:*/		return 0x8214BFAC;
		  /* 8214BFACh */ case    3:  		/* rlwinm R30, R4, 27, 5, 31 */
		/* 8214BFACh case    3:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R30,regs.R4);
		/* 8214BFACh case    3:*/		return 0x8214BFB0;
		  /* 8214BFB0h */ case    4:  		/* mr R29, R3 */
		/* 8214BFB0h case    4:*/		regs.R29 = regs.R3;
		/* 8214BFB0h case    4:*/		return 0x8214BFB4;
		  /* 8214BFB4h */ case    5:  		/* mr R31, R4 */
		/* 8214BFB4h case    5:*/		regs.R31 = regs.R4;
		/* 8214BFB4h case    5:*/		return 0x8214BFB8;
		  /* 8214BFB8h */ case    6:  		/* cmplwi CR6, R30, 8 */
		/* 8214BFB8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000008);
		/* 8214BFB8h case    6:*/		return 0x8214BFBC;
		  /* 8214BFBCh */ case    7:  		/* bc 12, CR6_LT, 40 */
		/* 8214BFBCh case    7:*/		if ( regs.CR[6].lt ) { return 0x8214BFE4;  }
		/* 8214BFBCh case    7:*/		return 0x8214BFC0;
		  /* 8214BFC0h */ case    8:  		/* lis R11, -32253 */
		/* 8214BFC0h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214BFC0h case    8:*/		return 0x8214BFC4;
		  /* 8214BFC4h */ case    9:  		/* lis R10, -32253 */
		/* 8214BFC4h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8214BFC4h case    9:*/		return 0x8214BFC8;
		  /* 8214BFC8h */ case   10:  		/* lis R9, -32253 */
		/* 8214BFC8h case   10:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8214BFC8h case   10:*/		return 0x8214BFCC;
		  /* 8214BFCCh */ case   11:  		/* addi R6, R11, 27552 */
		/* 8214BFCCh case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x6BA0);
		/* 8214BFCCh case   11:*/		return 0x8214BFD0;
		  /* 8214BFD0h */ case   12:  		/* addi R5, R10, 27492 */
		/* 8214BFD0h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x6B64);
		/* 8214BFD0h case   12:*/		return 0x8214BFD4;
		  /* 8214BFD4h */ case   13:  		/* addi R4, R9, 27460 */
		/* 8214BFD4h case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6B44);
		/* 8214BFD4h case   13:*/		return 0x8214BFD8;
		  /* 8214BFD8h */ case   14:  		/* li R7, 814 */
		/* 8214BFD8h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x32E);
		/* 8214BFD8h case   14:*/		return 0x8214BFDC;
		  /* 8214BFDCh */ case   15:  		/* li R3, 0 */
		/* 8214BFDCh case   15:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214BFDCh case   15:*/		return 0x8214BFE0;
		  /* 8214BFE0h */ case   16:  		/* bl 48168 */
		/* 8214BFE0h case   16:*/		regs.LR = 0x8214BFE4; return 0x82157C08;
		/* 8214BFE0h case   16:*/		return 0x8214BFE4;
	}
	return 0x8214BFE4;
} // Block from 8214BFA0h-8214BFE4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8214BFE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214BFE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214BFE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214BFE4);
		  /* 8214BFE4h */ case    0:  		/* rlwinm R11, R30, 2, 0, 29 */
		/* 8214BFE4h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R30);
		/* 8214BFE4h case    0:*/		return 0x8214BFE8;
		  /* 8214BFE8h */ case    1:  		/* rlwinm R10, R31, 0, 27, 31 */
		/* 8214BFE8h case    1:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R31);
		/* 8214BFE8h case    1:*/		return 0x8214BFEC;
		  /* 8214BFECh */ case    2:  		/* li R9, 1 */
		/* 8214BFECh case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8214BFECh case    2:*/		return 0x8214BFF0;
		  /* 8214BFF0h */ case    3:  		/* slw R10, R9, R10 */
		/* 8214BFF0h case    3:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8214BFF0h case    3:*/		return 0x8214BFF4;
		  /* 8214BFF4h */ case    4:  		/* lwzx R11, <#[R11 + R29]> */
		/* 8214BFF4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8214BFF4h case    4:*/		return 0x8214BFF8;
		  /* 8214BFF8h */ case    5:  		/* and R11, R10, R11 */
		/* 8214BFF8h case    5:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8214BFF8h case    5:*/		return 0x8214BFFC;
		  /* 8214BFFCh */ case    6:  		/* addic R10, R11, -1 */
		/* 8214BFFCh case    6:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 8214BFFCh case    6:*/		return 0x8214C000;
		  /* 8214C000h */ case    7:  		/* subfe R3, R10, R11 */
		/* 8214C000h case    7:*/		cpu::op::subfe<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 8214C000h case    7:*/		return 0x8214C004;
		  /* 8214C004h */ case    8:  		/* addi R1, R1, 112 */
		/* 8214C004h case    8:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214C004h case    8:*/		return 0x8214C008;
		  /* 8214C008h */ case    9:  		/* b -765276 */
		/* 8214C008h case    9:*/		return 0x820912AC;
		/* 8214C008h case    9:*/		return 0x8214C00C;
		  /* 8214C00Ch */ case   10:  		/* nop */
		/* 8214C00Ch case   10:*/		cpu::op::nop();
		/* 8214C00Ch case   10:*/		return 0x8214C010;
		  /* 8214C010h */ case   11:  		/* srawi R11, R4, 5 */
		/* 8214C010h case   11:*/		cpu::op::srawi<0,5>(regs,&regs.R11,regs.R4);
		/* 8214C010h case   11:*/		return 0x8214C014;
		  /* 8214C014h */ case   12:  		/* addze. R11, R11 */
		/* 8214C014h case   12:*/		cpu::op::addze<1>(regs,&regs.R11,regs.R11);
		/* 8214C014h case   12:*/		return 0x8214C018;
		  /* 8214C018h */ case   13:  		/* bc 12, CR0_LT, 64 */
		/* 8214C018h case   13:*/		if ( regs.CR[0].lt ) { return 0x8214C058;  }
		/* 8214C018h case   13:*/		return 0x8214C01C;
		  /* 8214C01Ch */ case   14:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 8214C01Ch case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 8214C01Ch case   14:*/		return 0x8214C020;
	}
	return 0x8214C020;
} // Block from 8214BFE4h-8214C020h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8214C020h
// Function '?AddSourceMapping@ShaderPDBBuilder@XGRAPHICS@@QAAXHKPBDKKH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C020);
		  /* 8214C020h */ case    0:  		/* add R9, R10, R3 */
		/* 8214C020h case    0:*/		cpu::op::add<0>(regs,&regs.R9,regs.R10,regs.R3);
		/* 8214C020h case    0:*/		return 0x8214C024;
		  /* 8214C024h */ case    1:  		/* lwz R8, <#[R9]> */
		/* 8214C024h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 8214C024h case    1:*/		return 0x8214C028;
		  /* 8214C028h */ case    2:  		/* cmpwi CR6, R8, -1 */
		/* 8214C028h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R8,0xFFFFFFFF);
		/* 8214C028h case    2:*/		return 0x8214C02C;
		  /* 8214C02Ch */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 8214C02Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8214C04C;  }
		/* 8214C02Ch case    3:*/		return 0x8214C030;
		  /* 8214C030h */ case    4:  		/* li R10, 31 */
		/* 8214C030h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x1F);
		/* 8214C030h case    4:*/		return 0x8214C034;
		  /* 8214C034h */ case    5:  		/* li R7, 1 */
		/* 8214C034h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8214C034h case    5:*/		return 0x8214C038;
		  /* 8214C038h */ case    6:  		/* slw R7, R7, R10 */
		/* 8214C038h case    6:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R7,regs.R10);
		/* 8214C038h case    6:*/		return 0x8214C03C;
		  /* 8214C03Ch */ case    7:  		/* and. R7, R7, R8 */
		/* 8214C03Ch case    7:*/		cpu::op::and<1>(regs,&regs.R7,regs.R7,regs.R8);
		/* 8214C03Ch case    7:*/		return 0x8214C040;
		  /* 8214C040h */ case    8:  		/* bc 12, CR0_EQ, 32 */
		/* 8214C040h case    8:*/		if ( regs.CR[0].eq ) { return 0x8214C060;  }
		/* 8214C040h case    8:*/		return 0x8214C044;
		  /* 8214C044h */ case    9:  		/* addic. R10, R10, -1 */
		/* 8214C044h case    9:*/		cpu::op::addic<1>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8214C044h case    9:*/		return 0x8214C048;
		  /* 8214C048h */ case   10:  		/* bc 4, CR0_LT, -20 */
		/* 8214C048h case   10:*/		if ( !regs.CR[0].lt ) { return 0x8214C034;  }
		/* 8214C048h case   10:*/		return 0x8214C04C;
	}
	return 0x8214C04C;
} // Block from 8214C020h-8214C04Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8214C04Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C04C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C04C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C04C);
		  /* 8214C04Ch */ case    0:  		/* addic. R11, R11, -1 */
		/* 8214C04Ch case    0:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8214C04Ch case    0:*/		return 0x8214C050;
		  /* 8214C050h */ case    1:  		/* addi R9, R9, -4 */
		/* 8214C050h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFC);
		/* 8214C050h case    1:*/		return 0x8214C054;
		  /* 8214C054h */ case    2:  		/* bc 4, CR0_LT, -48 */
		/* 8214C054h case    2:*/		if ( !regs.CR[0].lt ) { return 0x8214C024;  }
		/* 8214C054h case    2:*/		return 0x8214C058;
	}
	return 0x8214C058;
} // Block from 8214C04Ch-8214C058h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214C058h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C058( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C058) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C058);
		  /* 8214C058h */ case    0:  		/* li R3, -1 */
		/* 8214C058h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 8214C058h case    0:*/		return 0x8214C05C;
		  /* 8214C05Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 8214C05Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214C05Ch case    1:*/		return 0x8214C060;
	}
	return 0x8214C060;
} // Block from 8214C058h-8214C060h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214C060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C060);
		  /* 8214C060h */ case    0:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 8214C060h case    0:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 8214C060h case    0:*/		return 0x8214C064;
		  /* 8214C064h */ case    1:  		/* add R3, R11, R10 */
		/* 8214C064h case    1:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 8214C064h case    1:*/		return 0x8214C068;
		  /* 8214C068h */ case    2:  		/* bclr 20, CR0_LT */
		/* 8214C068h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214C068h case    2:*/		return 0x8214C06C;
	}
	return 0x8214C06C;
} // Block from 8214C060h-8214C06Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214C06Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C06C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C06C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C06C);
		  /* 8214C06Ch */ case    0:  		/* nop */
		/* 8214C06Ch case    0:*/		cpu::op::nop();
		/* 8214C06Ch case    0:*/		return 0x8214C070;
	}
	return 0x8214C070;
} // Block from 8214C06Ch-8214C070h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214C070h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C070( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C070) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C070);
		  /* 8214C070h */ case    0:  		/* mfspr R12, LR */
		/* 8214C070h case    0:*/		regs.R12 = regs.LR;
		/* 8214C070h case    0:*/		return 0x8214C074;
		  /* 8214C074h */ case    1:  		/* bl -765468 */
		/* 8214C074h case    1:*/		regs.LR = 0x8214C078; return 0x82091258;
		/* 8214C074h case    1:*/		return 0x8214C078;
		  /* 8214C078h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8214C078h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8214C078h case    2:*/		return 0x8214C07C;
		  /* 8214C07Ch */ case    3:  		/* lwz R30, <#[R4 + 12]> */
		/* 8214C07Ch case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R4 + 0x0000000C) );
		/* 8214C07Ch case    3:*/		return 0x8214C080;
		  /* 8214C080h */ case    4:  		/* lwz R28, <#[R4 + 8]> */
		/* 8214C080h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R4 + 0x00000008) );
		/* 8214C080h case    4:*/		return 0x8214C084;
		  /* 8214C084h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 8214C084h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8214C084h case    5:*/		return 0x8214C088;
		  /* 8214C088h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 8214C088h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8214C090;  }
		/* 8214C088h case    6:*/		return 0x8214C08C;
		  /* 8214C08Ch */ case    7:  		/* li R30, 1 */
		/* 8214C08Ch case    7:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 8214C08Ch case    7:*/		return 0x8214C090;
	}
	return 0x8214C090;
} // Block from 8214C070h-8214C090h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214C090h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C090( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C090) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C090);
		  /* 8214C090h */ case    0:  		/* li R31, 0 */
		/* 8214C090h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8214C090h case    0:*/		return 0x8214C094;
		  /* 8214C094h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8214C094h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8214C094h case    1:*/		return 0x8214C098;
		  /* 8214C098h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8214C098h case    2:*/		if ( regs.CR[6].eq ) { return 0x8214C0B8;  }
		/* 8214C098h case    2:*/		return 0x8214C09C;
		  /* 8214C09Ch */ case    3:  		/* addi R29, R3, 40 */
		/* 8214C09Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0x28);
		/* 8214C09Ch case    3:*/		return 0x8214C0A0;
	}
	return 0x8214C0A0;
} // Block from 8214C090h-8214C0A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214C0A0h
// Function '?AddDefine@ShaderPDBBuilder@XGRAPHICS@@QAAXPBD0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C0A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C0A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C0A0);
		  /* 8214C0A0h */ case    0:  		/* add R4, R31, R28 */
		/* 8214C0A0h case    0:*/		cpu::op::add<0>(regs,&regs.R4,regs.R31,regs.R28);
		/* 8214C0A0h case    0:*/		return 0x8214C0A4;
		  /* 8214C0A4h */ case    1:  		/* mr R3, R29 */
		/* 8214C0A4h case    1:*/		regs.R3 = regs.R29;
		/* 8214C0A4h case    1:*/		return 0x8214C0A8;
		  /* 8214C0A8h */ case    2:  		/* bl -368 */
		/* 8214C0A8h case    2:*/		regs.LR = 0x8214C0AC; return 0x8214BF38;
		/* 8214C0A8h case    2:*/		return 0x8214C0AC;
		  /* 8214C0ACh */ case    3:  		/* addi R31, R31, 1 */
		/* 8214C0ACh case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8214C0ACh case    3:*/		return 0x8214C0B0;
		  /* 8214C0B0h */ case    4:  		/* cmplw CR6, R31, R30 */
		/* 8214C0B0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 8214C0B0h case    4:*/		return 0x8214C0B4;
		  /* 8214C0B4h */ case    5:  		/* bc 12, CR6_LT, -20 */
		/* 8214C0B4h case    5:*/		if ( regs.CR[6].lt ) { return 0x8214C0A0;  }
		/* 8214C0B4h case    5:*/		return 0x8214C0B8;
	}
	return 0x8214C0B8;
} // Block from 8214C0A0h-8214C0B8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214C0B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C0B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C0B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C0B8);
		  /* 8214C0B8h */ case    0:  		/* addi R1, R1, 128 */
		/* 8214C0B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8214C0B8h case    0:*/		return 0x8214C0BC;
		  /* 8214C0BCh */ case    1:  		/* b -765460 */
		/* 8214C0BCh case    1:*/		return 0x820912A8;
		/* 8214C0BCh case    1:*/		return 0x8214C0C0;
	}
	return 0x8214C0C0;
} // Block from 8214C0B8h-8214C0C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214C0C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C0C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C0C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C0C0);
		  /* 8214C0C0h */ case    0:  		/* mfspr R12, LR */
		/* 8214C0C0h case    0:*/		regs.R12 = regs.LR;
		/* 8214C0C0h case    0:*/		return 0x8214C0C4;
		  /* 8214C0C4h */ case    1:  		/* bl -765556 */
		/* 8214C0C4h case    1:*/		regs.LR = 0x8214C0C8; return 0x82091250;
		/* 8214C0C4h case    1:*/		return 0x8214C0C8;
		  /* 8214C0C8h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 8214C0C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 8214C0C8h case    2:*/		return 0x8214C0CC;
		  /* 8214C0CCh */ case    3:  		/* mr R27, R3 */
		/* 8214C0CCh case    3:*/		regs.R27 = regs.R3;
		/* 8214C0CCh case    3:*/		return 0x8214C0D0;
		  /* 8214C0D0h */ case    4:  		/* mr R28, R5 */
		/* 8214C0D0h case    4:*/		regs.R28 = regs.R5;
		/* 8214C0D0h case    4:*/		return 0x8214C0D4;
		  /* 8214C0D4h */ case    5:  		/* addi R3, R1, 80 */
		/* 8214C0D4h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8214C0D4h case    5:*/		return 0x8214C0D8;
		  /* 8214C0D8h */ case    6:  		/* li R5, 48 */
		/* 8214C0D8h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x30);
		/* 8214C0D8h case    6:*/		return 0x8214C0DC;
		  /* 8214C0DCh */ case    7:  		/* mr R26, R6 */
		/* 8214C0DCh case    7:*/		regs.R26 = regs.R6;
		/* 8214C0DCh case    7:*/		return 0x8214C0E0;
		  /* 8214C0E0h */ case    8:  		/* mr R30, R7 */
		/* 8214C0E0h case    8:*/		regs.R30 = regs.R7;
		/* 8214C0E0h case    8:*/		return 0x8214C0E4;
		  /* 8214C0E4h */ case    9:  		/* bl -763700 */
		/* 8214C0E4h case    9:*/		regs.LR = 0x8214C0E8; return 0x820919B0;
		/* 8214C0E4h case    9:*/		return 0x8214C0E8;
		  /* 8214C0E8h */ case   10:  		/* lwz R10, <#[R1 + 112]> */
		/* 8214C0E8h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 8214C0E8h case   10:*/		return 0x8214C0EC;
		  /* 8214C0ECh */ case   11:  		/* cmplwi CR6, R10, 1 */
		/* 8214C0ECh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8214C0ECh case   11:*/		return 0x8214C0F0;
		  /* 8214C0F0h */ case   12:  		/* bc 4, CR6_EQ, 40 */
		/* 8214C0F0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8214C118;  }
		/* 8214C0F0h case   12:*/		return 0x8214C0F4;
		  /* 8214C0F4h */ case   13:  		/* lwz R11, <#[R1 + 116]> */
		/* 8214C0F4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 8214C0F4h case   13:*/		return 0x8214C0F8;
		  /* 8214C0F8h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 8214C0F8h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214C0F8h case   14:*/		return 0x8214C0FC;
		  /* 8214C0FCh */ case   15:  		/* bc 4, CR6_EQ, 236 */
		/* 8214C0FCh case   15:*/		if ( !regs.CR[6].eq ) { return 0x8214C1E8;  }
		/* 8214C0FCh case   15:*/		return 0x8214C100;
		  /* 8214C100h */ case   16:  		/* addi R4, R1, 80 */
		/* 8214C100h case   16:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8214C100h case   16:*/		return 0x8214C104;
		  /* 8214C104h */ case   17:  		/* mr R3, R27 */
		/* 8214C104h case   17:*/		regs.R3 = regs.R27;
		/* 8214C104h case   17:*/		return 0x8214C108;
		  /* 8214C108h */ case   18:  		/* bl -152 */
		/* 8214C108h case   18:*/		regs.LR = 0x8214C10C; return 0x8214C070;
		/* 8214C108h case   18:*/		return 0x8214C10C;
		  /* 8214C10Ch */ case   19:  		/* lwz R10, <#[R1 + 112]> */
		/* 8214C10Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 8214C10Ch case   19:*/		return 0x8214C110;
	}
	return 0x8214C110;
} // Block from 8214C0C0h-8214C110h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8214C110h
// Function '?AddSourceFile@ShaderPDBBuilder@XGRAPHICS@@QAAJPBD0K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C110);
		  /* 8214C110h */ case    0:  		/* cmplwi CR6, R10, 1 */
		/* 8214C110h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 8214C110h case    0:*/		return 0x8214C114;
		  /* 8214C114h */ case    1:  		/* bc 12, CR6_EQ, 200 */
		/* 8214C114h case    1:*/		if ( regs.CR[6].eq ) { return 0x8214C1DC;  }
		/* 8214C114h case    1:*/		return 0x8214C118;
	}
	return 0x8214C118;
} // Block from 8214C110h-8214C118h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214C118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C118);
		  /* 8214C118h */ case    0:  		/* lhz R11, <#[R30 + 6]> */
		/* 8214C118h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000006) );
		/* 8214C118h case    0:*/		return 0x8214C11C;
		  /* 8214C11Ch */ case    1:  		/* lwz R9, <#[R1 + 84]> */
		/* 8214C11Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8214C11Ch case    1:*/		return 0x8214C120;
		  /* 8214C120h */ case    2:  		/* lhz R8, <#[R30 + 4]> */
		/* 8214C120h case    2:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000004) );
		/* 8214C120h case    2:*/		return 0x8214C124;
		  /* 8214C124h */ case    3:  		/* lwz R31, <#[R1 + 92]> */
		/* 8214C124h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214C124h case    3:*/		return 0x8214C128;
		  /* 8214C128h */ case    4:  		/* cmpwi CR6, R9, 2 */
		/* 8214C128h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000002);
		/* 8214C128h case    4:*/		return 0x8214C12C;
		  /* 8214C12Ch */ case    5:  		/* mullw R11, R11, R8 */
		/* 8214C12Ch case    5:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8214C12Ch case    5:*/		return 0x8214C130;
		  /* 8214C130h */ case    6:  		/* bc 12, CR6_EQ, 12 */
		/* 8214C130h case    6:*/		if ( regs.CR[6].eq ) { return 0x8214C13C;  }
		/* 8214C130h case    6:*/		return 0x8214C134;
		  /* 8214C134h */ case    7:  		/* cmpwi CR6, R9, 1 */
		/* 8214C134h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000001);
		/* 8214C134h case    7:*/		return 0x8214C138;
		  /* 8214C138h */ case    8:  		/* bc 4, CR6_EQ, 20 */
		/* 8214C138h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8214C14C;  }
		/* 8214C138h case    8:*/		return 0x8214C13C;
	}
	return 0x8214C13C;
} // Block from 8214C118h-8214C13Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214C13Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C13C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C13C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C13C);
		  /* 8214C13Ch */ case    0:  		/* rlwinm. R9, R11, 0, 30, 31 */
		/* 8214C13Ch case    0:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R9,regs.R11);
		/* 8214C13Ch case    0:*/		return 0x8214C140;
		  /* 8214C140h */ case    1:  		/* rlwinm R11, R11, 30, 2, 31 */
		/* 8214C140h case    1:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R11,regs.R11);
		/* 8214C140h case    1:*/		return 0x8214C144;
		  /* 8214C144h */ case    2:  		/* bc 12, CR0_EQ, 8 */
		/* 8214C144h case    2:*/		if ( regs.CR[0].eq ) { return 0x8214C14C;  }
		/* 8214C144h case    2:*/		return 0x8214C148;
		  /* 8214C148h */ case    3:  		/* addi R11, R11, 1 */
		/* 8214C148h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214C148h case    3:*/		return 0x8214C14C;
	}
	return 0x8214C14C;
} // Block from 8214C13Ch-8214C14Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214C14Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C14C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C14C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C14C);
		  /* 8214C14Ch */ case    0:  		/* li R9, 1 */
		/* 8214C14Ch case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8214C14Ch case    0:*/		return 0x8214C150;
		  /* 8214C150h */ case    1:  		/* stw R11, <#[R1 + 92]> */
		/* 8214C150h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214C150h case    1:*/		return 0x8214C154;
		  /* 8214C154h */ case    2:  		/* cmplwi CR0, R10, 0 */
		/* 8214C154h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8214C154h case    2:*/		return 0x8214C158;
		  /* 8214C158h */ case    3:  		/* stw R9, <#[R1 + 112]> */
		/* 8214C158h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000070) );
		/* 8214C158h case    3:*/		return 0x8214C15C;
		  /* 8214C15Ch */ case    4:  		/* bc 12, CR0_EQ, 404 */
		/* 8214C15Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x8214C2F0;  }
		/* 8214C15Ch case    4:*/		return 0x8214C160;
		  /* 8214C160h */ case    5:  		/* mr R29, R10 */
		/* 8214C160h case    5:*/		regs.R29 = regs.R10;
		/* 8214C160h case    5:*/		return 0x8214C164;
		  /* 8214C164h */ case    6:  		/* cmplw CR6, R31, R11 */
		/* 8214C164h case    6:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8214C164h case    6:*/		return 0x8214C168;
		  /* 8214C168h */ case    7:  		/* bc 4, CR6_LT, 12 */
		/* 8214C168h case    7:*/		if ( !regs.CR[6].lt ) { return 0x8214C174;  }
		/* 8214C168h case    7:*/		return 0x8214C16C;
		  /* 8214C16Ch */ case    8:  		/* mr R11, R31 */
		/* 8214C16Ch case    8:*/		regs.R11 = regs.R31;
		/* 8214C16Ch case    8:*/		return 0x8214C170;
		  /* 8214C170h */ case    9:  		/* stw R31, <#[R1 + 92]> */
		/* 8214C170h case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214C170h case    9:*/		return 0x8214C174;
	}
	return 0x8214C174;
} // Block from 8214C14Ch-8214C174h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8214C174h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C174( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C174) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C174);
		  /* 8214C174h */ case    0:  		/* mr R7, R30 */
		/* 8214C174h case    0:*/		regs.R7 = regs.R30;
		/* 8214C174h case    0:*/		return 0x8214C178;
		  /* 8214C178h */ case    1:  		/* mr R6, R26 */
		/* 8214C178h case    1:*/		regs.R6 = regs.R26;
		/* 8214C178h case    1:*/		return 0x8214C17C;
		  /* 8214C17Ch */ case    2:  		/* mr R5, R28 */
		/* 8214C17Ch case    2:*/		regs.R5 = regs.R28;
		/* 8214C17Ch case    2:*/		return 0x8214C180;
		  /* 8214C180h */ case    3:  		/* addi R4, R1, 80 */
		/* 8214C180h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8214C180h case    3:*/		return 0x8214C184;
		  /* 8214C184h */ case    4:  		/* mr R3, R27 */
		/* 8214C184h case    4:*/		regs.R3 = regs.R27;
		/* 8214C184h case    4:*/		return 0x8214C188;
		  /* 8214C188h */ case    5:  		/* subf R31, R11, R31 */
		/* 8214C188h case    5:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 8214C188h case    5:*/		return 0x8214C18C;
		  /* 8214C18Ch */ case    6:  		/* bl -204 */
		/* 8214C18Ch case    6:*/		regs.LR = 0x8214C190; return 0x8214C0C0;
		/* 8214C18Ch case    6:*/		return 0x8214C190;
		  /* 8214C190h */ case    7:  		/* lwz R9, <#[R1 + 88]> */
		/* 8214C190h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8214C190h case    7:*/		return 0x8214C194;
		  /* 8214C194h */ case    8:  		/* lwz R11, <#[R1 + 92]> */
		/* 8214C194h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214C194h case    8:*/		return 0x8214C198;
		  /* 8214C198h */ case    9:  		/* lwz R10, <#[R1 + 124]> */
		/* 8214C198h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000007C) );
		/* 8214C198h case    9:*/		return 0x8214C19C;
		  /* 8214C19Ch */ case   10:  		/* add R9, R9, R11 */
		/* 8214C19Ch case   10:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 8214C19Ch case   10:*/		return 0x8214C1A0;
		  /* 8214C1A0h */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 8214C1A0h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8214C1A0h case   11:*/		return 0x8214C1A4;
		  /* 8214C1A4h */ case   12:  		/* stw R9, <#[R1 + 88]> */
		/* 8214C1A4h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8214C1A4h case   12:*/		return 0x8214C1A8;
		  /* 8214C1A8h */ case   13:  		/* bc 12, CR6_EQ, 40 */
		/* 8214C1A8h case   13:*/		if ( regs.CR[6].eq ) { return 0x8214C1D0;  }
		/* 8214C1A8h case   13:*/		return 0x8214C1AC;
		  /* 8214C1ACh */ case   14:  		/* lwz R9, <#[R1 + 84]> */
		/* 8214C1ACh case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8214C1ACh case   14:*/		return 0x8214C1B0;
	}
	return 0x8214C1B0;
} // Block from 8214C174h-8214C1B0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8214C1B0h
// Function '?AddVariableInfo@ShaderPDBBuilder@XGRAPHICS@@QAAXKPAVCNodeDecl@D3DXShader@@PAVCNode@4@PAVCNodeVariable@4@KK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C1B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C1B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C1B0);
		  /* 8214C1B0h */ case    0:  		/* subfic R9, R9, 0 */
		/* 8214C1B0h case    0:*/		cpu::op::subfic<0>(regs,&regs.R9,regs.R9,0x0);
		/* 8214C1B0h case    0:*/		return 0x8214C1B4;
		  /* 8214C1B4h */ case    1:  		/* subfe R9, R9, R9 */
		/* 8214C1B4h case    1:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 8214C1B4h case    1:*/		return 0x8214C1B8;
		  /* 8214C1B8h */ case    2:  		/* rlwinm R9, R9, 0, 30, 31 */
		/* 8214C1B8h case    2:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R9);
		/* 8214C1B8h case    2:*/		return 0x8214C1BC;
		  /* 8214C1BCh */ case    3:  		/* addi R9, R9, 1 */
		/* 8214C1BCh case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8214C1BCh case    3:*/		return 0x8214C1C0;
		  /* 8214C1C0h */ case    4:  		/* mullw R9, R9, R11 */
		/* 8214C1C0h case    4:*/		cpu::op::mullw<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 8214C1C0h case    4:*/		return 0x8214C1C4;
		  /* 8214C1C4h */ case    5:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8214C1C4h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8214C1C4h case    5:*/		return 0x8214C1C8;
		  /* 8214C1C8h */ case    6:  		/* add R10, R9, R10 */
		/* 8214C1C8h case    6:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8214C1C8h case    6:*/		return 0x8214C1CC;
		  /* 8214C1CCh */ case    7:  		/* stw R10, <#[R1 + 124]> */
		/* 8214C1CCh case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000007C) );
		/* 8214C1CCh case    7:*/		return 0x8214C1D0;
	}
	return 0x8214C1D0;
} // Block from 8214C1B0h-8214C1D0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214C1D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C1D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C1D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C1D0);
		  /* 8214C1D0h */ case    0:  		/* addic. R29, R29, -1 */
		/* 8214C1D0h case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 8214C1D0h case    0:*/		return 0x8214C1D4;
		  /* 8214C1D4h */ case    1:  		/* bc 4, CR0_EQ, -112 */
		/* 8214C1D4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8214C164;  }
		/* 8214C1D4h case    1:*/		return 0x8214C1D8;
		  /* 8214C1D8h */ case    2:  		/* b 280 */
		/* 8214C1D8h case    2:*/		return 0x8214C2F0;
		/* 8214C1D8h case    2:*/		return 0x8214C1DC;
	}
	return 0x8214C1DC;
} // Block from 8214C1D0h-8214C1DCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214C1DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C1DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C1DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C1DC);
		  /* 8214C1DCh */ case    0:  		/* lwz R11, <#[R1 + 116]> */
		/* 8214C1DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 8214C1DCh case    0:*/		return 0x8214C1E0;
		  /* 8214C1E0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8214C1E0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214C1E0h case    1:*/		return 0x8214C1E4;
		  /* 8214C1E4h */ case    2:  		/* bc 12, CR6_EQ, 268 */
		/* 8214C1E4h case    2:*/		if ( regs.CR[6].eq ) { return 0x8214C2F0;  }
		/* 8214C1E4h case    2:*/		return 0x8214C1E8;
	}
	return 0x8214C1E8;
} // Block from 8214C1DCh-8214C1E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214C1E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C1E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C1E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C1E8);
		  /* 8214C1E8h */ case    0:  		/* lwz R10, <#[R30 + 12]> */
		/* 8214C1E8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 8214C1E8h case    0:*/		return 0x8214C1EC;
		  /* 8214C1ECh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8214C1ECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214C1ECh case    1:*/		return 0x8214C1F0;
		  /* 8214C1F0h */ case    2:  		/* lwz R31, <#[R1 + 92]> */
		/* 8214C1F0h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214C1F0h case    2:*/		return 0x8214C1F4;
		  /* 8214C1F4h */ case    3:  		/* add R10, R10, R28 */
		/* 8214C1F4h case    3:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R28);
		/* 8214C1F4h case    3:*/		return 0x8214C1F8;
		  /* 8214C1F8h */ case    4:  		/* bc 12, CR6_EQ, 248 */
		/* 8214C1F8h case    4:*/		if ( regs.CR[6].eq ) { return 0x8214C2F0;  }
		/* 8214C1F8h case    4:*/		return 0x8214C1FC;
		  /* 8214C1FCh */ case    5:  		/* lwz R9, <#[R1 + 84]> */
		/* 8214C1FCh case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8214C1FCh case    5:*/		return 0x8214C200;
		  /* 8214C200h */ case    6:  		/* addi R30, R10, 4 */
		/* 8214C200h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R10,0x4);
		/* 8214C200h case    6:*/		return 0x8214C204;
		  /* 8214C204h */ case    7:  		/* mr R29, R11 */
		/* 8214C204h case    7:*/		regs.R29 = regs.R11;
		/* 8214C204h case    7:*/		return 0x8214C208;
		  /* 8214C208h */ case    8:  		/* lwz R11, <#[R30]> */
		/* 8214C208h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8214C208h case    8:*/		return 0x8214C20C;
		  /* 8214C20Ch */ case    9:  		/* cmpwi CR6, R9, 2 */
		/* 8214C20Ch case    9:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000002);
		/* 8214C20Ch case    9:*/		return 0x8214C210;
		  /* 8214C210h */ case   10:  		/* add R7, R11, R28 */
		/* 8214C210h case   10:*/		cpu::op::add<0>(regs,&regs.R7,regs.R11,regs.R28);
		/* 8214C210h case   10:*/		return 0x8214C214;
		  /* 8214C214h */ case   11:  		/* lhz R11, <#[R7 + 6]> */
		/* 8214C214h case   11:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000006) );
		/* 8214C214h case   11:*/		return 0x8214C218;
		  /* 8214C218h */ case   12:  		/* lhz R10, <#[R7 + 4]> */
		/* 8214C218h case   12:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000004) );
		/* 8214C218h case   12:*/		return 0x8214C21C;
		  /* 8214C21Ch */ case   13:  		/* mullw R11, R11, R10 */
		/* 8214C21Ch case   13:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8214C21Ch case   13:*/		return 0x8214C220;
		  /* 8214C220h */ case   14:  		/* bc 12, CR6_EQ, 12 */
		/* 8214C220h case   14:*/		if ( regs.CR[6].eq ) { return 0x8214C22C;  }
		/* 8214C220h case   14:*/		return 0x8214C224;
		  /* 8214C224h */ case   15:  		/* cmpwi CR6, R9, 1 */
		/* 8214C224h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000001);
		/* 8214C224h case   15:*/		return 0x8214C228;
		  /* 8214C228h */ case   16:  		/* bc 4, CR6_EQ, 20 */
		/* 8214C228h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8214C23C;  }
		/* 8214C228h case   16:*/		return 0x8214C22C;
	}
	return 0x8214C22C;
} // Block from 8214C1E8h-8214C22Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8214C22Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C22C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C22C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C22C);
		  /* 8214C22Ch */ case    0:  		/* rlwinm. R10, R11, 0, 30, 31 */
		/* 8214C22Ch case    0:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R10,regs.R11);
		/* 8214C22Ch case    0:*/		return 0x8214C230;
		  /* 8214C230h */ case    1:  		/* rlwinm R11, R11, 30, 2, 31 */
		/* 8214C230h case    1:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R11,regs.R11);
		/* 8214C230h case    1:*/		return 0x8214C234;
		  /* 8214C234h */ case    2:  		/* bc 12, CR0_EQ, 8 */
		/* 8214C234h case    2:*/		if ( regs.CR[0].eq ) { return 0x8214C23C;  }
		/* 8214C234h case    2:*/		return 0x8214C238;
		  /* 8214C238h */ case    3:  		/* addi R11, R11, 1 */
		/* 8214C238h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214C238h case    3:*/		return 0x8214C23C;
	}
	return 0x8214C23C;
} // Block from 8214C22Ch-8214C23Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214C23Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C23C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C23C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C23C);
		  /* 8214C23Ch */ case    0:  		/* stw R11, <#[R1 + 92]> */
		/* 8214C23Ch case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214C23Ch case    0:*/		return 0x8214C240;
		  /* 8214C240h */ case    1:  		/* lhz R10, <#[R7 + 8]> */
		/* 8214C240h case    1:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000008) );
		/* 8214C240h case    1:*/		return 0x8214C244;
		  /* 8214C244h */ case    2:  		/* mullw R11, R10, R11 */
		/* 8214C244h case    2:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8214C244h case    2:*/		return 0x8214C248;
		  /* 8214C248h */ case    3:  		/* stw R11, <#[R1 + 92]> */
		/* 8214C248h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214C248h case    3:*/		return 0x8214C24C;
		  /* 8214C24Ch */ case    4:  		/* cmplw CR6, R31, R11 */
		/* 8214C24Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8214C24Ch case    4:*/		return 0x8214C250;
		  /* 8214C250h */ case    5:  		/* bc 4, CR6_LT, 12 */
		/* 8214C250h case    5:*/		if ( !regs.CR[6].lt ) { return 0x8214C25C;  }
		/* 8214C250h case    5:*/		return 0x8214C254;
		  /* 8214C254h */ case    6:  		/* mr R11, R31 */
		/* 8214C254h case    6:*/		regs.R11 = regs.R31;
		/* 8214C254h case    6:*/		return 0x8214C258;
		  /* 8214C258h */ case    7:  		/* stw R31, <#[R1 + 92]> */
		/* 8214C258h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214C258h case    7:*/		return 0x8214C25C;
	}
	return 0x8214C25C;
} // Block from 8214C23Ch-8214C25Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214C25Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C25C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C25C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C25C);
		  /* 8214C25Ch */ case    0:  		/* lhz R10, <#[R7 + 6]> */
		/* 8214C25Ch case    0:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000006) );
		/* 8214C25Ch case    0:*/		return 0x8214C260;
		  /* 8214C260h */ case    1:  		/* subf R31, R11, R31 */
		/* 8214C260h case    1:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 8214C260h case    1:*/		return 0x8214C264;
		  /* 8214C264h */ case    2:  		/* mr R6, R26 */
		/* 8214C264h case    2:*/		regs.R6 = regs.R26;
		/* 8214C264h case    2:*/		return 0x8214C268;
		  /* 8214C268h */ case    3:  		/* mr R5, R28 */
		/* 8214C268h case    3:*/		regs.R5 = regs.R28;
		/* 8214C268h case    3:*/		return 0x8214C26C;
		  /* 8214C26Ch */ case    4:  		/* addi R4, R1, 80 */
		/* 8214C26Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8214C26Ch case    4:*/		return 0x8214C270;
		  /* 8214C270h */ case    5:  		/* mr R3, R27 */
		/* 8214C270h case    5:*/		regs.R3 = regs.R27;
		/* 8214C270h case    5:*/		return 0x8214C274;
		  /* 8214C274h */ case    6:  		/* stw R10, <#[R1 + 108]> */
		/* 8214C274h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000006C) );
		/* 8214C274h case    6:*/		return 0x8214C278;
		  /* 8214C278h */ case    7:  		/* lhz R11, <#[R7 + 4]> */
		/* 8214C278h case    7:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000004) );
		/* 8214C278h case    7:*/		return 0x8214C27C;
		  /* 8214C27Ch */ case    8:  		/* stw R11, <#[R1 + 104]> */
		/* 8214C27Ch case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 8214C27Ch case    8:*/		return 0x8214C280;
		  /* 8214C280h */ case    9:  		/* lhz R11, <#[R7]> */
		/* 8214C280h case    9:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 8214C280h case    9:*/		return 0x8214C284;
		  /* 8214C284h */ case   10:  		/* stw R11, <#[R1 + 96]> */
		/* 8214C284h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 8214C284h case   10:*/		return 0x8214C288;
	}
	return 0x8214C288;
} // Block from 8214C25Ch-8214C288h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8214C288h
// Function '?AddFunctionInfo@ShaderPDBBuilder@XGRAPHICS@@QAAJKPAVCNodeDecl@D3DXShader@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C288);
		  /* 8214C288h */ case    0:  		/* lhz R11, <#[R7 + 2]> */
		/* 8214C288h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000002) );
		/* 8214C288h case    0:*/		return 0x8214C28C;
		  /* 8214C28Ch */ case    1:  		/* stw R11, <#[R1 + 100]> */
		/* 8214C28Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 8214C28Ch case    1:*/		return 0x8214C290;
		  /* 8214C290h */ case    2:  		/* lhz R11, <#[R7 + 8]> */
		/* 8214C290h case    2:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000008) );
		/* 8214C290h case    2:*/		return 0x8214C294;
		  /* 8214C294h */ case    3:  		/* stw R11, <#[R1 + 112]> */
		/* 8214C294h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 8214C294h case    3:*/		return 0x8214C298;
		  /* 8214C298h */ case    4:  		/* lhz R11, <#[R7 + 10]> */
		/* 8214C298h case    4:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R7 + 0x0000000A) );
		/* 8214C298h case    4:*/		return 0x8214C29C;
		  /* 8214C29Ch */ case    5:  		/* stw R11, <#[R1 + 116]> */
		/* 8214C29Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 8214C29Ch case    5:*/		return 0x8214C2A0;
		  /* 8214C2A0h */ case    6:  		/* bl -480 */
		/* 8214C2A0h case    6:*/		regs.LR = 0x8214C2A4; return 0x8214C0C0;
		/* 8214C2A0h case    6:*/		return 0x8214C2A4;
		  /* 8214C2A4h */ case    7:  		/* lwz R8, <#[R1 + 88]> */
		/* 8214C2A4h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000058) );
		/* 8214C2A4h case    7:*/		return 0x8214C2A8;
		  /* 8214C2A8h */ case    8:  		/* lwz R10, <#[R1 + 92]> */
		/* 8214C2A8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214C2A8h case    8:*/		return 0x8214C2AC;
		  /* 8214C2ACh */ case    9:  		/* lwz R11, <#[R1 + 124]> */
		/* 8214C2ACh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 8214C2ACh case    9:*/		return 0x8214C2B0;
		  /* 8214C2B0h */ case   10:  		/* add R8, R8, R10 */
		/* 8214C2B0h case   10:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R10);
		/* 8214C2B0h case   10:*/		return 0x8214C2B4;
		  /* 8214C2B4h */ case   11:  		/* lwz R9, <#[R1 + 84]> */
		/* 8214C2B4h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8214C2B4h case   11:*/		return 0x8214C2B8;
		  /* 8214C2B8h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 8214C2B8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214C2B8h case   12:*/		return 0x8214C2BC;
		  /* 8214C2BCh */ case   13:  		/* stw R8, <#[R1 + 88]> */
		/* 8214C2BCh case   13:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000058) );
		/* 8214C2BCh case   13:*/		return 0x8214C2C0;
		  /* 8214C2C0h */ case   14:  		/* bc 12, CR6_EQ, 36 */
		/* 8214C2C0h case   14:*/		if ( regs.CR[6].eq ) { return 0x8214C2E4;  }
		/* 8214C2C0h case   14:*/		return 0x8214C2C4;
		  /* 8214C2C4h */ case   15:  		/* subfic R8, R9, 0 */
		/* 8214C2C4h case   15:*/		cpu::op::subfic<0>(regs,&regs.R8,regs.R9,0x0);
		/* 8214C2C4h case   15:*/		return 0x8214C2C8;
		  /* 8214C2C8h */ case   16:  		/* subfe R8, R8, R8 */
		/* 8214C2C8h case   16:*/		cpu::op::subfe<0>(regs,&regs.R8,regs.R8,regs.R8);
		/* 8214C2C8h case   16:*/		return 0x8214C2CC;
		  /* 8214C2CCh */ case   17:  		/* rlwinm R8, R8, 0, 30, 31 */
		/* 8214C2CCh case   17:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R8,regs.R8);
		/* 8214C2CCh case   17:*/		return 0x8214C2D0;
		  /* 8214C2D0h */ case   18:  		/* addi R8, R8, 1 */
		/* 8214C2D0h case   18:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8214C2D0h case   18:*/		return 0x8214C2D4;
		  /* 8214C2D4h */ case   19:  		/* mullw R10, R8, R10 */
		/* 8214C2D4h case   19:*/		cpu::op::mullw<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 8214C2D4h case   19:*/		return 0x8214C2D8;
		  /* 8214C2D8h */ case   20:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8214C2D8h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8214C2D8h case   20:*/		return 0x8214C2DC;
		  /* 8214C2DCh */ case   21:  		/* add R11, R10, R11 */
		/* 8214C2DCh case   21:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8214C2DCh case   21:*/		return 0x8214C2E0;
		  /* 8214C2E0h */ case   22:  		/* stw R11, <#[R1 + 124]> */
		/* 8214C2E0h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 8214C2E0h case   22:*/		return 0x8214C2E4;
	}
	return 0x8214C2E4;
} // Block from 8214C288h-8214C2E4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8214C2E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C2E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C2E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C2E4);
		  /* 8214C2E4h */ case    0:  		/* addic. R29, R29, -1 */
		/* 8214C2E4h case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 8214C2E4h case    0:*/		return 0x8214C2E8;
		  /* 8214C2E8h */ case    1:  		/* addi R30, R30, 8 */
		/* 8214C2E8h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x8);
		/* 8214C2E8h case    1:*/		return 0x8214C2EC;
		  /* 8214C2ECh */ case    2:  		/* bc 4, CR0_EQ, -228 */
		/* 8214C2ECh case    2:*/		if ( !regs.CR[0].eq ) { return 0x8214C208;  }
		/* 8214C2ECh case    2:*/		return 0x8214C2F0;
	}
	return 0x8214C2F0;
} // Block from 8214C2E4h-8214C2F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214C2F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C2F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C2F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C2F0);
		  /* 8214C2F0h */ case    0:  		/* addi R1, R1, 192 */
		/* 8214C2F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8214C2F0h case    0:*/		return 0x8214C2F4;
		  /* 8214C2F4h */ case    1:  		/* b -766036 */
		/* 8214C2F4h case    1:*/		return 0x820912A0;
		/* 8214C2F4h case    1:*/		return 0x8214C2F8;
		  /* 8214C2F8h */ case    2:  		/* lwz R11, <#[R6]> */
		/* 8214C2F8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 8214C2F8h case    2:*/		return 0x8214C2FC;
		  /* 8214C2FCh */ case    3:  		/* add R11, R11, R5 */
		/* 8214C2FCh case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R5);
		/* 8214C2FCh case    3:*/		return 0x8214C300;
		  /* 8214C300h */ case    4:  		/* stw R11, <#[R4]> */
		/* 8214C300h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 8214C300h case    4:*/		return 0x8214C304;
		  /* 8214C304h */ case    5:  		/* lhz R11, <#[R6 + 4]> */
		/* 8214C304h case    5:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000004) );
		/* 8214C304h case    5:*/		return 0x8214C308;
		  /* 8214C308h */ case    6:  		/* stw R11, <#[R4 + 4]> */
		/* 8214C308h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 8214C308h case    6:*/		return 0x8214C30C;
		  /* 8214C30Ch */ case    7:  		/* lhz R11, <#[R6 + 6]> */
		/* 8214C30Ch case    7:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000006) );
		/* 8214C30Ch case    7:*/		return 0x8214C310;
		  /* 8214C310h */ case    8:  		/* stw R11, <#[R4 + 8]> */
		/* 8214C310h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8214C310h case    8:*/		return 0x8214C314;
		  /* 8214C314h */ case    9:  		/* lhz R11, <#[R6 + 8]> */
		/* 8214C314h case    9:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000008) );
		/* 8214C314h case    9:*/		return 0x8214C318;
		  /* 8214C318h */ case   10:  		/* stw R11, <#[R4 + 12]> */
		/* 8214C318h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 8214C318h case   10:*/		return 0x8214C31C;
		  /* 8214C31Ch */ case   11:  		/* lwz R11, <#[R6 + 16]> */
		/* 8214C31Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000010) );
		/* 8214C31Ch case   11:*/		return 0x8214C320;
		  /* 8214C320h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 8214C320h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214C320h case   12:*/		return 0x8214C324;
		  /* 8214C324h */ case   13:  		/* add R11, R11, R5 */
		/* 8214C324h case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R5);
		/* 8214C324h case   13:*/		return 0x8214C328;
		  /* 8214C328h */ case   14:  		/* bc 4, CR6_EQ, 8 */
		/* 8214C328h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8214C330;  }
		/* 8214C328h case   14:*/		return 0x8214C32C;
		  /* 8214C32Ch */ case   15:  		/* li R11, 0 */
		/* 8214C32Ch case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8214C32Ch case   15:*/		return 0x8214C330;
	}
	return 0x8214C330;
} // Block from 8214C2F0h-8214C330h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8214C330h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C330( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C330) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C330);
		  /* 8214C330h */ case    0:  		/* stw R11, <#[R4 + 44]> */
		/* 8214C330h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x0000002C) );
		/* 8214C330h case    0:*/		return 0x8214C334;
		  /* 8214C334h */ case    1:  		/* lhz R11, <#[R7 + 6]> */
		/* 8214C334h case    1:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000006) );
		/* 8214C334h case    1:*/		return 0x8214C338;
		  /* 8214C338h */ case    2:  		/* stw R11, <#[R4 + 28]> */
		/* 8214C338h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x0000001C) );
		/* 8214C338h case    2:*/		return 0x8214C33C;
		  /* 8214C33Ch */ case    3:  		/* lhz R11, <#[R7 + 4]> */
		/* 8214C33Ch case    3:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000004) );
		/* 8214C33Ch case    3:*/		return 0x8214C340;
		  /* 8214C340h */ case    4:  		/* stw R11, <#[R4 + 24]> */
		/* 8214C340h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000018) );
		/* 8214C340h case    4:*/		return 0x8214C344;
		  /* 8214C344h */ case    5:  		/* lhz R11, <#[R7]> */
		/* 8214C344h case    5:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 8214C344h case    5:*/		return 0x8214C348;
		  /* 8214C348h */ case    6:  		/* stw R11, <#[R4 + 16]> */
		/* 8214C348h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 8214C348h case    6:*/		return 0x8214C34C;
		  /* 8214C34Ch */ case    7:  		/* lhz R11, <#[R7 + 2]> */
		/* 8214C34Ch case    7:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000002) );
		/* 8214C34Ch case    7:*/		return 0x8214C350;
		  /* 8214C350h */ case    8:  		/* stw R11, <#[R4 + 20]> */
		/* 8214C350h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000014) );
		/* 8214C350h case    8:*/		return 0x8214C354;
		  /* 8214C354h */ case    9:  		/* lhz R11, <#[R7 + 8]> */
		/* 8214C354h case    9:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000008) );
		/* 8214C354h case    9:*/		return 0x8214C358;
		  /* 8214C358h */ case   10:  		/* stw R11, <#[R4 + 32]> */
		/* 8214C358h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000020) );
		/* 8214C358h case   10:*/		return 0x8214C35C;
		  /* 8214C35Ch */ case   11:  		/* lhz R11, <#[R7 + 10]> */
		/* 8214C35Ch case   11:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R7 + 0x0000000A) );
		/* 8214C35Ch case   11:*/		return 0x8214C360;
		  /* 8214C360h */ case   12:  		/* stw R11, <#[R4 + 36]> */
		/* 8214C360h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000024) );
		/* 8214C360h case   12:*/		return 0x8214C364;
		  /* 8214C364h */ case   13:  		/* bclr 20, CR0_LT */
		/* 8214C364h case   13:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214C364h case   13:*/		return 0x8214C368;
	}
	return 0x8214C368;
} // Block from 8214C330h-8214C368h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8214C368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C368);
		  /* 8214C368h */ case    0:  		/* mfspr R12, LR */
		/* 8214C368h case    0:*/		regs.R12 = regs.LR;
		/* 8214C368h case    0:*/		return 0x8214C36C;
		  /* 8214C36Ch */ case    1:  		/* bl -766232 */
		/* 8214C36Ch case    1:*/		regs.LR = 0x8214C370; return 0x82091254;
		/* 8214C36Ch case    1:*/		return 0x8214C370;
	}
	return 0x8214C370;
} // Block from 8214C368h-8214C370h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214C370h
// Function '?SetAssertInfo@ShaderPDBBuilder@XGRAPHICS@@QAAXKKKPBDK0K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C370);
		  /* 8214C370h */ case    0:  		/* stwu R1, <#[R1 - 176]> */
		/* 8214C370h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8214C370h case    0:*/		return 0x8214C374;
		  /* 8214C374h */ case    1:  		/* mr R27, R3 */
		/* 8214C374h case    1:*/		regs.R27 = regs.R3;
		/* 8214C374h case    1:*/		return 0x8214C378;
		  /* 8214C378h */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 8214C378h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8214C378h case    2:*/		return 0x8214C37C;
		  /* 8214C37Ch */ case    3:  		/* bc 12, CR6_EQ, 144 */
		/* 8214C37Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8214C40C;  }
		/* 8214C37Ch case    3:*/		return 0x8214C380;
		  /* 8214C380h */ case    4:  		/* lwz R11, <#[R4]> */
		/* 8214C380h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 8214C380h case    4:*/		return 0x8214C384;
		  /* 8214C384h */ case    5:  		/* mr R3, R4 */
		/* 8214C384h case    5:*/		regs.R3 = regs.R4;
		/* 8214C384h case    5:*/		return 0x8214C388;
		  /* 8214C388h */ case    6:  		/* lwz R11, <#[R11 + 12]> */
		/* 8214C388h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8214C388h case    6:*/		return 0x8214C38C;
		  /* 8214C38Ch */ case    7:  		/* mtspr CTR, R11 */
		/* 8214C38Ch case    7:*/		regs.CTR = regs.R11;
		/* 8214C38Ch case    7:*/		return 0x8214C390;
		  /* 8214C390h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 8214C390h case    8:*/		if ( 1 ) { regs.LR = 0x8214C394; return (uint32)regs.CTR; }
		/* 8214C390h case    8:*/		return 0x8214C394;
		  /* 8214C394h */ case    9:  		/* or. R31, R3, R3 */
		/* 8214C394h case    9:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8214C394h case    9:*/		return 0x8214C398;
		  /* 8214C398h */ case   10:  		/* bc 12, CR0_EQ, 116 */
		/* 8214C398h case   10:*/		if ( regs.CR[0].eq ) { return 0x8214C40C;  }
		/* 8214C398h case   10:*/		return 0x8214C39C;
		  /* 8214C39Ch */ case   11:  		/* lwz R11, <#[R31 + 12]> */
		/* 8214C39Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8214C39Ch case   11:*/		return 0x8214C3A0;
		  /* 8214C3A0h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 8214C3A0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214C3A0h case   12:*/		return 0x8214C3A4;
		  /* 8214C3A4h */ case   13:  		/* bc 12, CR6_EQ, 104 */
		/* 8214C3A4h case   13:*/		if ( regs.CR[6].eq ) { return 0x8214C40C;  }
		/* 8214C3A4h case   13:*/		return 0x8214C3A8;
		  /* 8214C3A8h */ case   14:  		/* lwz R10, <#[R31 + 16]> */
		/* 8214C3A8h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8214C3A8h case   14:*/		return 0x8214C3AC;
		  /* 8214C3ACh */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 8214C3ACh case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214C3ACh case   15:*/		return 0x8214C3B0;
		  /* 8214C3B0h */ case   16:  		/* add R30, R10, R31 */
		/* 8214C3B0h case   16:*/		cpu::op::add<0>(regs,&regs.R30,regs.R10,regs.R31);
		/* 8214C3B0h case   16:*/		return 0x8214C3B4;
		  /* 8214C3B4h */ case   17:  		/* bc 12, CR6_EQ, 88 */
		/* 8214C3B4h case   17:*/		if ( regs.CR[6].eq ) { return 0x8214C40C;  }
		/* 8214C3B4h case   17:*/		return 0x8214C3B8;
		  /* 8214C3B8h */ case   18:  		/* mr R28, R11 */
		/* 8214C3B8h case   18:*/		regs.R28 = regs.R11;
		/* 8214C3B8h case   18:*/		return 0x8214C3BC;
		  /* 8214C3BCh */ case   19:  		/* lwz R11, <#[R30 + 12]> */
		/* 8214C3BCh case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8214C3BCh case   19:*/		return 0x8214C3C0;
		  /* 8214C3C0h */ case   20:  		/* add R29, R11, R31 */
		/* 8214C3C0h case   20:*/		cpu::op::add<0>(regs,&regs.R29,regs.R11,regs.R31);
		/* 8214C3C0h case   20:*/		return 0x8214C3C4;
		  /* 8214C3C4h */ case   21:  		/* lhz R11, <#[R29 + 2]> */
		/* 8214C3C4h case   21:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000002) );
		/* 8214C3C4h case   21:*/		return 0x8214C3C8;
		  /* 8214C3C8h */ case   22:  		/* cmplwi CR6, R11, 3 */
		/* 8214C3C8h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8214C3C8h case   22:*/		return 0x8214C3CC;
		  /* 8214C3CCh */ case   23:  		/* bc 4, CR6_EQ, 52 */
		/* 8214C3CCh case   23:*/		if ( !regs.CR[6].eq ) { return 0x8214C400;  }
		/* 8214C3CCh case   23:*/		return 0x8214C3D0;
		  /* 8214C3D0h */ case   24:  		/* mr R7, R29 */
		/* 8214C3D0h case   24:*/		regs.R7 = regs.R29;
		/* 8214C3D0h case   24:*/		return 0x8214C3D4;
		  /* 8214C3D4h */ case   25:  		/* mr R6, R30 */
		/* 8214C3D4h case   25:*/		regs.R6 = regs.R30;
		/* 8214C3D4h case   25:*/		return 0x8214C3D8;
		  /* 8214C3D8h */ case   26:  		/* mr R5, R31 */
		/* 8214C3D8h case   26:*/		regs.R5 = regs.R31;
		/* 8214C3D8h case   26:*/		return 0x8214C3DC;
		  /* 8214C3DCh */ case   27:  		/* addi R4, R1, 80 */
		/* 8214C3DCh case   27:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8214C3DCh case   27:*/		return 0x8214C3E0;
		  /* 8214C3E0h */ case   28:  		/* mr R3, R27 */
		/* 8214C3E0h case   28:*/		regs.R3 = regs.R27;
		/* 8214C3E0h case   28:*/		return 0x8214C3E4;
		  /* 8214C3E4h */ case   29:  		/* bl -236 */
		/* 8214C3E4h case   29:*/		regs.LR = 0x8214C3E8; return 0x8214C2F8;
		/* 8214C3E4h case   29:*/		return 0x8214C3E8;
		  /* 8214C3E8h */ case   30:  		/* mr R7, R29 */
		/* 8214C3E8h case   30:*/		regs.R7 = regs.R29;
		/* 8214C3E8h case   30:*/		return 0x8214C3EC;
		  /* 8214C3ECh */ case   31:  		/* mr R6, R30 */
		/* 8214C3ECh case   31:*/		regs.R6 = regs.R30;
		/* 8214C3ECh case   31:*/		return 0x8214C3F0;
		  /* 8214C3F0h */ case   32:  		/* mr R5, R31 */
		/* 8214C3F0h case   32:*/		regs.R5 = regs.R31;
		/* 8214C3F0h case   32:*/		return 0x8214C3F4;
		  /* 8214C3F4h */ case   33:  		/* addi R4, R1, 80 */
		/* 8214C3F4h case   33:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8214C3F4h case   33:*/		return 0x8214C3F8;
		  /* 8214C3F8h */ case   34:  		/* mr R3, R27 */
		/* 8214C3F8h case   34:*/		regs.R3 = regs.R27;
		/* 8214C3F8h case   34:*/		return 0x8214C3FC;
		  /* 8214C3FCh */ case   35:  		/* bl -828 */
		/* 8214C3FCh case   35:*/		regs.LR = 0x8214C400; return 0x8214C0C0;
		/* 8214C3FCh case   35:*/		return 0x8214C400;
	}
	return 0x8214C400;
} // Block from 8214C370h-8214C400h (36 instructions)

//////////////////////////////////////////////////////
// Block at 8214C400h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C400);
		  /* 8214C400h */ case    0:  		/* addic. R28, R28, -1 */
		/* 8214C400h case    0:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 8214C400h case    0:*/		return 0x8214C404;
		  /* 8214C404h */ case    1:  		/* addi R30, R30, 20 */
		/* 8214C404h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x14);
		/* 8214C404h case    1:*/		return 0x8214C408;
		  /* 8214C408h */ case    2:  		/* bc 4, CR0_EQ, -76 */
		/* 8214C408h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8214C3BC;  }
		/* 8214C408h case    2:*/		return 0x8214C40C;
	}
	return 0x8214C40C;
} // Block from 8214C400h-8214C40Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214C40Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C40C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C40C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C40C);
		  /* 8214C40Ch */ case    0:  		/* addi R1, R1, 176 */
		/* 8214C40Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8214C40Ch case    0:*/		return 0x8214C410;
		  /* 8214C410h */ case    1:  		/* b -766316 */
		/* 8214C410h case    1:*/		return 0x820912A4;
		/* 8214C410h case    1:*/		return 0x8214C414;
		  /* 8214C414h */ case    2:  		/* nop */
		/* 8214C414h case    2:*/		cpu::op::nop();
		/* 8214C414h case    2:*/		return 0x8214C418;
	}
	return 0x8214C418;
} // Block from 8214C40Ch-8214C418h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214C418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C418);
		  /* 8214C418h */ case    0:  		/* mfspr R12, LR */
		/* 8214C418h case    0:*/		regs.R12 = regs.LR;
		/* 8214C418h case    0:*/		return 0x8214C41C;
		  /* 8214C41Ch */ case    1:  		/* bl -766408 */
		/* 8214C41Ch case    1:*/		regs.LR = 0x8214C420; return 0x82091254;
		/* 8214C41Ch case    1:*/		return 0x8214C420;
		  /* 8214C420h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8214C420h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8214C420h case    2:*/		return 0x8214C424;
		  /* 8214C424h */ case    3:  		/* addi R27, R3, 8 */
		/* 8214C424h case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R3,0x8);
		/* 8214C424h case    3:*/		return 0x8214C428;
		  /* 8214C428h */ case    4:  		/* mr R31, R3 */
		/* 8214C428h case    4:*/		regs.R31 = regs.R3;
		/* 8214C428h case    4:*/		return 0x8214C42C;
		  /* 8214C42Ch */ case    5:  		/* mr R3, R27 */
		/* 8214C42Ch case    5:*/		regs.R3 = regs.R27;
		/* 8214C42Ch case    5:*/		return 0x8214C430;
		  /* 8214C430h */ case    6:  		/* mr R29, R4 */
		/* 8214C430h case    6:*/		regs.R29 = regs.R4;
		/* 8214C430h case    6:*/		return 0x8214C434;
		  /* 8214C434h */ case    7:  		/* bl -1172 */
		/* 8214C434h case    7:*/		regs.LR = 0x8214C438; return 0x8214BFA0;
		/* 8214C434h case    7:*/		return 0x8214C438;
		  /* 8214C438h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8214C438h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8214C438h case    8:*/		return 0x8214C43C;
		  /* 8214C43Ch */ case    9:  		/* bc 4, CR0_EQ, 108 */
		/* 8214C43Ch case    9:*/		if ( !regs.CR[0].eq ) { return 0x8214C4A8;  }
		/* 8214C43Ch case    9:*/		return 0x8214C440;
		  /* 8214C440h */ case   10:  		/* addi R28, R31, 40 */
		/* 8214C440h case   10:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R31,0x28);
		/* 8214C440h case   10:*/		return 0x8214C444;
		  /* 8214C444h */ case   11:  		/* lwz R4, <#[R31 + 4680]> */
		/* 8214C444h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00001248) );
		/* 8214C444h case   11:*/		return 0x8214C448;
		  /* 8214C448h */ case   12:  		/* mr R3, R28 */
		/* 8214C448h case   12:*/		regs.R3 = regs.R28;
		/* 8214C448h case   12:*/		return 0x8214C44C;
		  /* 8214C44Ch */ case   13:  		/* bl -1084 */
		/* 8214C44Ch case   13:*/		regs.LR = 0x8214C450; return 0x8214C010;
		/* 8214C44Ch case   13:*/		return 0x8214C450;
	}
	return 0x8214C450;
} // Block from 8214C418h-8214C450h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8214C450h
// Function '?WritePDB@ShaderPDBBuilder@XGRAPHICS@@AAAXPAVStream@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C450);
		  /* 8214C450h */ case    0:  		/* or. R30, R3, R3 */
		/* 8214C450h case    0:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8214C450h case    0:*/		return 0x8214C454;
		  /* 8214C454h */ case    1:  		/* bc 4, CR0_LT, 20 */
		/* 8214C454h case    1:*/		if ( !regs.CR[0].lt ) { return 0x8214C468;  }
		/* 8214C454h case    1:*/		return 0x8214C458;
		  /* 8214C458h */ case    2:  		/* li R11, 1 */
		/* 8214C458h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8214C458h case    2:*/		return 0x8214C45C;
		  /* 8214C45Ch */ case    3:  		/* li R3, 0 */
		/* 8214C45Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214C45Ch case    3:*/		return 0x8214C460;
		  /* 8214C460h */ case    4:  		/* stb R11, <#[R31]> */
		/* 8214C460h case    4:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214C460h case    4:*/		return 0x8214C464;
		  /* 8214C464h */ case    5:  		/* b 76 */
		/* 8214C464h case    5:*/		return 0x8214C4B0;
		/* 8214C464h case    5:*/		return 0x8214C468;
	}
	return 0x8214C468;
} // Block from 8214C450h-8214C468h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214C468h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C468( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C468) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C468);
		  /* 8214C468h */ case    0:  		/* addi R11, R30, -1 */
		/* 8214C468h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFFF);
		/* 8214C468h case    0:*/		return 0x8214C46C;
		  /* 8214C46Ch */ case    1:  		/* mr R4, R29 */
		/* 8214C46Ch case    1:*/		regs.R4 = regs.R29;
		/* 8214C46Ch case    1:*/		return 0x8214C470;
		  /* 8214C470h */ case    2:  		/* stw R11, <#[R31 + 4680]> */
		/* 8214C470h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00001248) );
		/* 8214C470h case    2:*/		return 0x8214C474;
		  /* 8214C474h */ case    3:  		/* mr R3, R27 */
		/* 8214C474h case    3:*/		regs.R3 = regs.R27;
		/* 8214C474h case    3:*/		return 0x8214C478;
		  /* 8214C478h */ case    4:  		/* bl -1344 */
		/* 8214C478h case    4:*/		regs.LR = 0x8214C47C; return 0x8214BF38;
		/* 8214C478h case    4:*/		return 0x8214C47C;
		  /* 8214C47Ch */ case    5:  		/* lwz R11, <#[R31 + 4]> */
		/* 8214C47Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214C47Ch case    5:*/		return 0x8214C480;
		  /* 8214C480h */ case    6:  		/* mr R4, R30 */
		/* 8214C480h case    6:*/		regs.R4 = regs.R30;
		/* 8214C480h case    6:*/		return 0x8214C484;
		  /* 8214C484h */ case    7:  		/* add R11, R11, R31 */
		/* 8214C484h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 8214C484h case    7:*/		return 0x8214C488;
		  /* 8214C488h */ case    8:  		/* mr R3, R28 */
		/* 8214C488h case    8:*/		regs.R3 = regs.R28;
		/* 8214C488h case    8:*/		return 0x8214C48C;
		  /* 8214C48Ch */ case    9:  		/* stb R29, <#[R11 + 328]> */
		/* 8214C48Ch case    9:*/		cpu::mem::store8( regs, regs.R29, (uint32)(regs.R11 + 0x00000148) );
		/* 8214C48Ch case    9:*/		return 0x8214C490;
		  /* 8214C490h */ case   10:  		/* bl -1368 */
		/* 8214C490h case   10:*/		regs.LR = 0x8214C494; return 0x8214BF38;
		/* 8214C490h case   10:*/		return 0x8214C494;
		  /* 8214C494h */ case   11:  		/* add R11, R29, R31 */
		/* 8214C494h case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R29,regs.R31);
		/* 8214C494h case   11:*/		return 0x8214C498;
		  /* 8214C498h */ case   12:  		/* stb R30, <#[R11 + 72]> */
		/* 8214C498h case   12:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R11 + 0x00000048) );
		/* 8214C498h case   12:*/		return 0x8214C49C;
		  /* 8214C49Ch */ case   13:  		/* lwz R11, <#[R31 + 4]> */
		/* 8214C49Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214C49Ch case   13:*/		return 0x8214C4A0;
		  /* 8214C4A0h */ case   14:  		/* addi R11, R11, 1 */
		/* 8214C4A0h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214C4A0h case   14:*/		return 0x8214C4A4;
		  /* 8214C4A4h */ case   15:  		/* stw R11, <#[R31 + 4]> */
		/* 8214C4A4h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214C4A4h case   15:*/		return 0x8214C4A8;
	}
	return 0x8214C4A8;
} // Block from 8214C468h-8214C4A8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8214C4A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C4A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C4A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C4A8);
		  /* 8214C4A8h */ case    0:  		/* add R11, R29, R31 */
		/* 8214C4A8h case    0:*/		cpu::op::add<0>(regs,&regs.R11,regs.R29,regs.R31);
		/* 8214C4A8h case    0:*/		return 0x8214C4AC;
		  /* 8214C4ACh */ case    1:  		/* lbz R3, <#[R11 + 72]> */
		/* 8214C4ACh case    1:*/		cpu::mem::load8z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000048) );
		/* 8214C4ACh case    1:*/		return 0x8214C4B0;
	}
	return 0x8214C4B0;
} // Block from 8214C4A8h-8214C4B0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214C4B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C4B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C4B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C4B0);
		  /* 8214C4B0h */ case    0:  		/* addi R1, R1, 128 */
		/* 8214C4B0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8214C4B0h case    0:*/		return 0x8214C4B4;
		  /* 8214C4B4h */ case    1:  		/* b -766480 */
		/* 8214C4B4h case    1:*/		return 0x820912A4;
		/* 8214C4B4h case    1:*/		return 0x8214C4B8;
	}
	return 0x8214C4B8;
} // Block from 8214C4B0h-8214C4B8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214C4B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C4B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C4B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C4B8);
		  /* 8214C4B8h */ case    0:  		/* mfspr R12, LR */
		/* 8214C4B8h case    0:*/		regs.R12 = regs.LR;
		/* 8214C4B8h case    0:*/		return 0x8214C4BC;
		  /* 8214C4BCh */ case    1:  		/* bl -766564 */
		/* 8214C4BCh case    1:*/		regs.LR = 0x8214C4C0; return 0x82091258;
		/* 8214C4BCh case    1:*/		return 0x8214C4C0;
		  /* 8214C4C0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8214C4C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8214C4C0h case    2:*/		return 0x8214C4C4;
		  /* 8214C4C4h */ case    3:  		/* mr R31, R3 */
		/* 8214C4C4h case    3:*/		regs.R31 = regs.R3;
		/* 8214C4C4h case    3:*/		return 0x8214C4C8;
		  /* 8214C4C8h */ case    4:  		/* mr R28, R8 */
		/* 8214C4C8h case    4:*/		regs.R28 = regs.R8;
		/* 8214C4C8h case    4:*/		return 0x8214C4CC;
		  /* 8214C4CCh */ case    5:  		/* rlwinm. R11, R4, 0, 24, 31 */
		/* 8214C4CCh case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R4);
		/* 8214C4CCh case    5:*/		return 0x8214C4D0;
		  /* 8214C4D0h */ case    6:  		/* bc 12, CR0_EQ, 264 */
		/* 8214C4D0h case    6:*/		if ( regs.CR[0].eq ) { return 0x8214C5D8;  }
		/* 8214C4D0h case    6:*/		return 0x8214C4D4;
		  /* 8214C4D4h */ case    7:  		/* rlwinm. R11, R5, 0, 24, 31 */
		/* 8214C4D4h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R5);
		/* 8214C4D4h case    7:*/		return 0x8214C4D8;
		  /* 8214C4D8h */ case    8:  		/* bc 4, CR0_EQ, 256 */
		/* 8214C4D8h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8214C5D8;  }
		/* 8214C4D8h case    8:*/		return 0x8214C4DC;
		  /* 8214C4DCh */ case    9:  		/* lwz R11, <#[R3 + 4]> */
		/* 8214C4DCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8214C4DCh case    9:*/		return 0x8214C4E0;
		  /* 8214C4E0h */ case   10:  		/* rlwinm. R10, R11, 0, 0, 0 */
		/* 8214C4E0h case   10:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R10,regs.R11);
		/* 8214C4E0h case   10:*/		return 0x8214C4E4;
		  /* 8214C4E4h */ case   11:  		/* bc 4, CR0_EQ, 24 */
		/* 8214C4E4h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8214C4FC;  }
		/* 8214C4E4h case   11:*/		return 0x8214C4E8;
		  /* 8214C4E8h */ case   12:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 8214C4E8h case   12:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 8214C4E8h case   12:*/		return 0x8214C4EC;
		  /* 8214C4ECh */ case   13:  		/* bc 4, CR0_EQ, 16 */
		/* 8214C4ECh case   13:*/		if ( !regs.CR[0].eq ) { return 0x8214C4FC;  }
		/* 8214C4ECh case   13:*/		return 0x8214C4F0;
		  /* 8214C4F0h */ case   14:  		/* rlwinm. R11, R11, 0, 2, 2 */
		/* 8214C4F0h case   14:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R11,regs.R11);
		/* 8214C4F0h case   14:*/		return 0x8214C4F4;
		  /* 8214C4F4h */ case   15:  		/* li R11, 1 */
		/* 8214C4F4h case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8214C4F4h case   15:*/		return 0x8214C4F8;
		  /* 8214C4F8h */ case   16:  		/* bc 4, CR0_EQ, 8 */
		/* 8214C4F8h case   16:*/		if ( !regs.CR[0].eq ) { return 0x8214C500;  }
		/* 8214C4F8h case   16:*/		return 0x8214C4FC;
	}
	return 0x8214C4FC;
} // Block from 8214C4B8h-8214C4FCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 8214C4FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C4FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C4FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C4FC);
		  /* 8214C4FCh */ case    0:  		/* li R11, 0 */
		/* 8214C4FCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8214C4FCh case    0:*/		return 0x8214C500;
	}
	return 0x8214C500;
} // Block from 8214C4FCh-8214C500h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214C500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C500);
		  /* 8214C500h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8214C500h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8214C500h case    0:*/		return 0x8214C504;
		  /* 8214C504h */ case    1:  		/* bc 12, CR0_EQ, 212 */
		/* 8214C504h case    1:*/		if ( regs.CR[0].eq ) { return 0x8214C5D8;  }
		/* 8214C504h case    1:*/		return 0x8214C508;
		  /* 8214C508h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 8214C508h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8214C508h case    2:*/		return 0x8214C50C;
		  /* 8214C50Ch */ case    3:  		/* lis R10, -32217 */
		/* 8214C50Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 8214C50Ch case    3:*/		return 0x8214C510;
		  /* 8214C510h */ case    4:  		/* addi R30, R10, 20184 */
		/* 8214C510h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R10,0x4ED8);
		/* 8214C510h case    4:*/		return 0x8214C514;
		  /* 8214C514h */ case    5:  		/* rlwinm R29, R11, 10, 25, 29 */
		/* 8214C514h case    5:*/		cpu::op::rlwinm<0,10,25,29>(regs,&regs.R29,regs.R11);
		/* 8214C514h case    5:*/		return 0x8214C518;
		  /* 8214C518h */ case    6:  		/* lwzx R10, <#[R29 + R30]> */
		/* 8214C518h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + regs.R30 + 0x00000000) );
		/* 8214C518h case    6:*/		return 0x8214C51C;
		  /* 8214C51Ch */ case    7:  		/* cmpwi CR6, R10, 1 */
		/* 8214C51Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000001);
		/* 8214C51Ch case    7:*/		return 0x8214C520;
		  /* 8214C520h */ case    8:  		/* bc 12, CR6_LT, 28 */
		/* 8214C520h case    8:*/		if ( regs.CR[6].lt ) { return 0x8214C53C;  }
		/* 8214C520h case    8:*/		return 0x8214C524;
		  /* 8214C524h */ case    9:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 8214C524h case    9:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 8214C524h case    9:*/		return 0x8214C528;
		  /* 8214C528h */ case   10:  		/* bc 4, CR0_EQ, 20 */
		/* 8214C528h case   10:*/		if ( !regs.CR[0].eq ) { return 0x8214C53C;  }
		/* 8214C528h case   10:*/		return 0x8214C52C;
		  /* 8214C52Ch */ case   11:  		/* mr R3, R28 */
		/* 8214C52Ch case   11:*/		regs.R3 = regs.R28;
		/* 8214C52Ch case   11:*/		return 0x8214C530;
	}
	return 0x8214C530;
} // Block from 8214C500h-8214C530h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8214C530h
// Function 'XShaderPDBBuilder_BeginShader'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C530);
		  /* 8214C530h */ case    0:  		/* lbz R4, <#[R31 + 9]> */
		/* 8214C530h case    0:*/		cpu::mem::load8z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000009) );
		/* 8214C530h case    0:*/		return 0x8214C534;
		  /* 8214C534h */ case    1:  		/* bl -284 */
		/* 8214C534h case    1:*/		regs.LR = 0x8214C538; return 0x8214C418;
		/* 8214C534h case    1:*/		return 0x8214C538;
	}
	return 0x8214C538;
} // Block from 8214C530h-8214C538h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214C538h
// Function 'XShaderPDBBuilder_AddSourceMapping'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C538);
		  /* 8214C538h */ case    0:  		/* stb R3, <#[R31 + 9]> */
		/* 8214C538h case    0:*/		cpu::mem::store8( regs, regs.R3, (uint32)(regs.R31 + 0x00000009) );
		/* 8214C538h case    0:*/		return 0x8214C53C;
	}
	return 0x8214C53C;
} // Block from 8214C538h-8214C53Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214C53Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C53C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C53C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C53C);
		  /* 8214C53Ch */ case    0:  		/* lwzx R11, <#[R29 + R30]> */
		/* 8214C53Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + regs.R30 + 0x00000000) );
		/* 8214C53Ch case    0:*/		return 0x8214C540;
	}
	return 0x8214C540;
} // Block from 8214C53Ch-8214C540h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214C540h
// Function 'XShaderPDBBuilder_AddSourceFile'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C540);
		  /* 8214C540h */ case    0:  		/* cmpwi CR6, R11, 2 */
		/* 8214C540h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8214C540h case    0:*/		return 0x8214C544;
		  /* 8214C544h */ case    1:  		/* bc 12, CR6_LT, 32 */
		/* 8214C544h case    1:*/		if ( regs.CR[6].lt ) { return 0x8214C564;  }
		/* 8214C544h case    1:*/		return 0x8214C548;
	}
	return 0x8214C548;
} // Block from 8214C540h-8214C548h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214C548h
// Function 'XShaderPDBBuilder_AddDefine'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C548);
		  /* 8214C548h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8214C548h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8214C548h case    0:*/		return 0x8214C54C;
		  /* 8214C54Ch */ case    1:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 8214C54Ch case    1:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 8214C54Ch case    1:*/		return 0x8214C550;
	}
	return 0x8214C550;
} // Block from 8214C548h-8214C550h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214C550h
// Function 'XShaderPDBBuilder_AddVariableInfo'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C550);
		  /* 8214C550h */ case    0:  		/* bc 4, CR0_EQ, 20 */
		/* 8214C550h case    0:*/		if ( !regs.CR[0].eq ) { return 0x8214C564;  }
		/* 8214C550h case    0:*/		return 0x8214C554;
		  /* 8214C554h */ case    1:  		/* mr R3, R28 */
		/* 8214C554h case    1:*/		regs.R3 = regs.R28;
		/* 8214C554h case    1:*/		return 0x8214C558;
	}
	return 0x8214C558;
} // Block from 8214C550h-8214C558h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214C558h
// Function 'XShaderPDBBuilder_AddFunctionInfo'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C558);
		  /* 8214C558h */ case    0:  		/* lbz R4, <#[R31 + 10]> */
		/* 8214C558h case    0:*/		cpu::mem::load8z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000A) );
		/* 8214C558h case    0:*/		return 0x8214C55C;
		  /* 8214C55Ch */ case    1:  		/* bl -324 */
		/* 8214C55Ch case    1:*/		regs.LR = 0x8214C560; return 0x8214C418;
		/* 8214C55Ch case    1:*/		return 0x8214C560;
	}
	return 0x8214C560;
} // Block from 8214C558h-8214C560h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214C560h
// Function 'XShaderPDBBuilder_SetAssertInfo'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C560);
		  /* 8214C560h */ case    0:  		/* stb R3, <#[R31 + 10]> */
		/* 8214C560h case    0:*/		cpu::mem::store8( regs, regs.R3, (uint32)(regs.R31 + 0x0000000A) );
		/* 8214C560h case    0:*/		return 0x8214C564;
	}
	return 0x8214C564;
} // Block from 8214C560h-8214C564h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214C564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C564);
		  /* 8214C564h */ case    0:  		/* lwzx R10, <#[R29 + R30]> */
		/* 8214C564h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + regs.R30 + 0x00000000) );
		/* 8214C564h case    0:*/		return 0x8214C568;
	}
	return 0x8214C568;
} // Block from 8214C564h-8214C568h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214C568h
// Function '?GetPDBSize@ShaderPDBBuilder@XGRAPHICS@@QAAKXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C568);
		  /* 8214C568h */ case    0:  		/* lis R11, -32217 */
		/* 8214C568h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8214C568h case    0:*/		return 0x8214C56C;
		  /* 8214C56Ch */ case    1:  		/* cmpwi CR6, R10, 3 */
		/* 8214C56Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000003);
		/* 8214C56Ch case    1:*/		return 0x8214C570;
		  /* 8214C570h */ case    2:  		/* addi R30, R11, 20624 */
		/* 8214C570h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x5090);
		/* 8214C570h case    2:*/		return 0x8214C574;
		  /* 8214C574h */ case    3:  		/* bc 4, CR6_LT, 24 */
		/* 8214C574h case    3:*/		if ( !regs.CR[6].lt ) { return 0x8214C58C;  }
		/* 8214C574h case    3:*/		return 0x8214C578;
		  /* 8214C578h */ case    4:  		/* lwz R11, <#[R31]> */
		/* 8214C578h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214C578h case    4:*/		return 0x8214C57C;
		  /* 8214C57Ch */ case    5:  		/* rlwinm R11, R11, 8, 24, 29 */
		/* 8214C57Ch case    5:*/		cpu::op::rlwinm<0,8,24,29>(regs,&regs.R11,regs.R11);
		/* 8214C57Ch case    5:*/		return 0x8214C580;
		  /* 8214C580h */ case    6:  		/* lwzx R11, <#[R11 + R30]> */
		/* 8214C580h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 8214C580h case    6:*/		return 0x8214C584;
		  /* 8214C584h */ case    7:  		/* cmpwi CR6, R11, 1 */
		/* 8214C584h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8214C584h case    7:*/		return 0x8214C588;
		  /* 8214C588h */ case    8:  		/* bc 4, CR6_EQ, 32 */
		/* 8214C588h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8214C5A8;  }
		/* 8214C588h case    8:*/		return 0x8214C58C;
	}
	return 0x8214C58C;
} // Block from 8214C568h-8214C58Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214C58Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C58C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C58C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C58C);
		  /* 8214C58Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8214C58Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8214C58Ch case    0:*/		return 0x8214C590;
		  /* 8214C590h */ case    1:  		/* rlwinm. R10, R11, 0, 2, 2 */
		/* 8214C590h case    1:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R10,regs.R11);
		/* 8214C590h case    1:*/		return 0x8214C594;
		  /* 8214C594h */ case    2:  		/* bc 4, CR0_EQ, 20 */
		/* 8214C594h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8214C5A8;  }
		/* 8214C594h case    2:*/		return 0x8214C598;
		  /* 8214C598h */ case    3:  		/* rlwinm R4, R11, 0, 24, 31 */
		/* 8214C598h case    3:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R4,regs.R11);
		/* 8214C598h case    3:*/		return 0x8214C59C;
		  /* 8214C59Ch */ case    4:  		/* mr R3, R28 */
		/* 8214C59Ch case    4:*/		regs.R3 = regs.R28;
		/* 8214C59Ch case    4:*/		return 0x8214C5A0;
		  /* 8214C5A0h */ case    5:  		/* bl -392 */
		/* 8214C5A0h case    5:*/		regs.LR = 0x8214C5A4; return 0x8214C418;
		/* 8214C5A0h case    5:*/		return 0x8214C5A4;
		  /* 8214C5A4h */ case    6:  		/* stb R3, <#[R31 + 11]> */
		/* 8214C5A4h case    6:*/		cpu::mem::store8( regs, regs.R3, (uint32)(regs.R31 + 0x0000000B) );
		/* 8214C5A4h case    6:*/		return 0x8214C5A8;
	}
	return 0x8214C5A8;
} // Block from 8214C58Ch-8214C5A8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8214C5A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C5A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C5A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C5A8);
		  /* 8214C5A8h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8214C5A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214C5A8h case    0:*/		return 0x8214C5AC;
		  /* 8214C5ACh */ case    1:  		/* rlwinm R11, R11, 8, 24, 29 */
		/* 8214C5ACh case    1:*/		cpu::op::rlwinm<0,8,24,29>(regs,&regs.R11,regs.R11);
		/* 8214C5ACh case    1:*/		return 0x8214C5B0;
		  /* 8214C5B0h */ case    2:  		/* lwzx R11, <#[R11 + R30]> */
		/* 8214C5B0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 8214C5B0h case    2:*/		return 0x8214C5B4;
		  /* 8214C5B4h */ case    3:  		/* cmpwi CR6, R11, 2 */
		/* 8214C5B4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8214C5B4h case    3:*/		return 0x8214C5B8;
		  /* 8214C5B8h */ case    4:  		/* bc 4, CR6_EQ, 20 */
		/* 8214C5B8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8214C5CC;  }
		/* 8214C5B8h case    4:*/		return 0x8214C5BC;
		  /* 8214C5BCh */ case    5:  		/* mr R3, R28 */
		/* 8214C5BCh case    5:*/		regs.R3 = regs.R28;
		/* 8214C5BCh case    5:*/		return 0x8214C5C0;
		  /* 8214C5C0h */ case    6:  		/* lbz R4, <#[R31 + 11]> */
		/* 8214C5C0h case    6:*/		cpu::mem::load8z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000B) );
		/* 8214C5C0h case    6:*/		return 0x8214C5C4;
		  /* 8214C5C4h */ case    7:  		/* bl -428 */
		/* 8214C5C4h case    7:*/		regs.LR = 0x8214C5C8; return 0x8214C418;
		/* 8214C5C4h case    7:*/		return 0x8214C5C8;
		  /* 8214C5C8h */ case    8:  		/* stb R3, <#[R31 + 11]> */
		/* 8214C5C8h case    8:*/		cpu::mem::store8( regs, regs.R3, (uint32)(regs.R31 + 0x0000000B) );
		/* 8214C5C8h case    8:*/		return 0x8214C5CC;
	}
	return 0x8214C5CC;
} // Block from 8214C5A8h-8214C5CCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214C5CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C5CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C5CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C5CC);
		  /* 8214C5CCh */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8214C5CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214C5CCh case    0:*/		return 0x8214C5D0;
		  /* 8214C5D0h */ case    1:  		/* rlwinm R11, R11, 0, 3, 1 */
		/* 8214C5D0h case    1:*/		cpu::op::rlwinm<0,0,3,1>(regs,&regs.R11,regs.R11);
		/* 8214C5D0h case    1:*/		return 0x8214C5D4;
		  /* 8214C5D4h */ case    2:  		/* stw R11, <#[R31 + 4]> */
		/* 8214C5D4h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214C5D4h case    2:*/		return 0x8214C5D8;
	}
	return 0x8214C5D8;
} // Block from 8214C5CCh-8214C5D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214C5D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C5D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C5D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C5D8);
		  /* 8214C5D8h */ case    0:  		/* addi R1, R1, 128 */
		/* 8214C5D8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8214C5D8h case    0:*/		return 0x8214C5DC;
		  /* 8214C5DCh */ case    1:  		/* b -766772 */
		/* 8214C5DCh case    1:*/		return 0x820912A8;
		/* 8214C5DCh case    1:*/		return 0x8214C5E0;
	}
	return 0x8214C5E0;
} // Block from 8214C5D8h-8214C5E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214C5E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C5E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C5E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C5E0);
		  /* 8214C5E0h */ case    0:  		/* std R30, <#[R1 - 16]> */
		/* 8214C5E0h case    0:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214C5E0h case    0:*/		return 0x8214C5E4;
		  /* 8214C5E4h */ case    1:  		/* std R31, <#[R1 - 8]> */
		/* 8214C5E4h case    1:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214C5E4h case    1:*/		return 0x8214C5E8;
		  /* 8214C5E8h */ case    2:  		/* mr R31, R3 */
		/* 8214C5E8h case    2:*/		regs.R31 = regs.R3;
		/* 8214C5E8h case    2:*/		return 0x8214C5EC;
		  /* 8214C5ECh */ case    3:  		/* rlwinm. R11, R5, 0, 24, 31 */
		/* 8214C5ECh case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R5);
		/* 8214C5ECh case    3:*/		return 0x8214C5F0;
		  /* 8214C5F0h */ case    4:  		/* li R30, 0 */
		/* 8214C5F0h case    4:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8214C5F0h case    4:*/		return 0x8214C5F4;
		  /* 8214C5F4h */ case    5:  		/* bc 12, CR0_EQ, 8 */
		/* 8214C5F4h case    5:*/		if ( regs.CR[0].eq ) { return 0x8214C5FC;  }
		/* 8214C5F4h case    5:*/		return 0x8214C5F8;
		  /* 8214C5F8h */ case    6:  		/* std R30, <#[R3]> */
		/* 8214C5F8h case    6:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 8214C5F8h case    6:*/		return 0x8214C5FC;
	}
	return 0x8214C5FC;
} // Block from 8214C5E0h-8214C5FCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8214C5FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C5FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C5FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C5FC);
		  /* 8214C5FCh */ case    0:  		/* rlwinm. R11, R4, 0, 24, 31 */
		/* 8214C5FCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R4);
		/* 8214C5FCh case    0:*/		return 0x8214C600;
		  /* 8214C600h */ case    1:  		/* li R4, 1 */
		/* 8214C600h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8214C600h case    1:*/		return 0x8214C604;
		  /* 8214C604h */ case    2:  		/* mr R9, R30 */
		/* 8214C604h case    2:*/		regs.R9 = regs.R30;
		/* 8214C604h case    2:*/		return 0x8214C608;
	}
	return 0x8214C608;
} // Block from 8214C5FCh-8214C608h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214C608h
// Function '?GetPDB@ShaderPDBBuilder@XGRAPHICS@@QAAJPAXKPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C608);
		  /* 8214C608h */ case    0:  		/* bc 12, CR0_EQ, 100 */
		/* 8214C608h case    0:*/		if ( regs.CR[0].eq ) { return 0x8214C66C;  }
		/* 8214C608h case    0:*/		return 0x8214C60C;
		  /* 8214C60Ch */ case    1:  		/* lwz R11, <#[R7]> */
		/* 8214C60Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 8214C60Ch case    1:*/		return 0x8214C610;
		  /* 8214C610h */ case    2:  		/* mr R10, R30 */
		/* 8214C610h case    2:*/		regs.R10 = regs.R30;
		/* 8214C610h case    2:*/		return 0x8214C614;
		  /* 8214C614h */ case    3:  		/* rlwinm R9, R11, 0, 27, 31 */
		/* 8214C614h case    3:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R11);
		/* 8214C614h case    3:*/		return 0x8214C618;
		  /* 8214C618h */ case    4:  		/* cmplwi CR6, R9, 19 */
		/* 8214C618h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000013);
		/* 8214C618h case    4:*/		return 0x8214C61C;
		  /* 8214C61Ch */ case    5:  		/* bc 12, CR6_GT, 12 */
		/* 8214C61Ch case    5:*/		if ( regs.CR[6].gt ) { return 0x8214C628;  }
		/* 8214C61Ch case    5:*/		return 0x8214C620;
		  /* 8214C620h */ case    6:  		/* rlwinm R10, R11, 20, 26, 31 */
		/* 8214C620h case    6:*/		cpu::op::rlwinm<0,20,26,31>(regs,&regs.R10,regs.R11);
		/* 8214C620h case    6:*/		return 0x8214C624;
		  /* 8214C624h */ case    7:  		/* slw R10, R4, R10 */
		/* 8214C624h case    7:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R4,regs.R10);
		/* 8214C624h case    7:*/		return 0x8214C628;
	}
	return 0x8214C628;
} // Block from 8214C608h-8214C628h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214C628h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C628);
		  /* 8214C628h */ case    0:  		/* rlwinm. R9, R6, 0, 24, 31 */
		/* 8214C628h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R9,regs.R6);
		/* 8214C628h case    0:*/		return 0x8214C62C;
		  /* 8214C62Ch */ case    1:  		/* mr R8, R30 */
		/* 8214C62Ch case    1:*/		regs.R8 = regs.R30;
		/* 8214C62Ch case    1:*/		return 0x8214C630;
		  /* 8214C630h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 8214C630h case    2:*/		if ( regs.CR[0].eq ) { return 0x8214C640;  }
		/* 8214C630h case    2:*/		return 0x8214C634;
		  /* 8214C634h */ case    3:  		/* lwz R9, <#[R7 + 4]> */
		/* 8214C634h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000004) );
		/* 8214C634h case    3:*/		return 0x8214C638;
		  /* 8214C638h */ case    4:  		/* rlwinm. R9, R9, 0, 1, 1 */
		/* 8214C638h case    4:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R9,regs.R9);
		/* 8214C638h case    4:*/		return 0x8214C63C;
		  /* 8214C63Ch */ case    5:  		/* bc 4, CR0_EQ, 12 */
		/* 8214C63Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x8214C648;  }
		/* 8214C63Ch case    5:*/		return 0x8214C640;
	}
	return 0x8214C640;
} // Block from 8214C628h-8214C640h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214C640h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C640);
		  /* 8214C640h */ case    0:  		/* rlwinm R9, R11, 27, 26, 31 */
		/* 8214C640h case    0:*/		cpu::op::rlwinm<0,27,26,31>(regs,&regs.R9,regs.R11);
		/* 8214C640h case    0:*/		return 0x8214C644;
		  /* 8214C644h */ case    1:  		/* slw R8, R4, R9 */
		/* 8214C644h case    1:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R4,regs.R9);
		/* 8214C644h case    1:*/		return 0x8214C648;
	}
	return 0x8214C648;
} // Block from 8214C640h-8214C648h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214C648h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C648);
		  /* 8214C648h */ case    0:  		/* rlwinm. R9, R11, 0, 13, 13 */
		/* 8214C648h case    0:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R9,regs.R11);
		/* 8214C648h case    0:*/		return 0x8214C64C;
		  /* 8214C64Ch */ case    1:  		/* li R9, -1 */
		/* 8214C64Ch case    1:*/		cpu::op::li<0>(regs,&regs.R9,0xFFFFFFFF);
		/* 8214C64Ch case    1:*/		return 0x8214C650;
		  /* 8214C650h */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 8214C650h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8214C658;  }
		/* 8214C650h case    2:*/		return 0x8214C654;
		  /* 8214C654h */ case    3:  		/* rldicl R9, R10, 0, 32 */
		/* 8214C654h case    3:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R9,regs.R10);
		/* 8214C654h case    3:*/		return 0x8214C658;
	}
	return 0x8214C658;
} // Block from 8214C648h-8214C658h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214C658h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C658);
		  /* 8214C658h */ case    0:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 8214C658h case    0:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 8214C658h case    0:*/		return 0x8214C65C;
		  /* 8214C65Ch */ case    1:  		/* mr R10, R9 */
		/* 8214C65Ch case    1:*/		regs.R10 = regs.R9;
		/* 8214C65Ch case    1:*/		return 0x8214C660;
		  /* 8214C660h */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 8214C660h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8214C670;  }
		/* 8214C660h case    2:*/		return 0x8214C664;
		  /* 8214C664h */ case    3:  		/* rldicl R11, R8, 0, 32 */
		/* 8214C664h case    3:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R8);
		/* 8214C664h case    3:*/		return 0x8214C668;
		  /* 8214C668h */ case    4:  		/* b 12 */
		/* 8214C668h case    4:*/		return 0x8214C674;
		/* 8214C668h case    4:*/		return 0x8214C66C;
	}
	return 0x8214C66C;
} // Block from 8214C658h-8214C66Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214C66Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C66C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C66C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C66C);
		  /* 8214C66Ch */ case    0:  		/* li R10, -1 */
		/* 8214C66Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 8214C66Ch case    0:*/		return 0x8214C670;
	}
	return 0x8214C670;
} // Block from 8214C66Ch-8214C670h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214C670h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C670);
		  /* 8214C670h */ case    0:  		/* li R11, -1 */
		/* 8214C670h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8214C670h case    0:*/		return 0x8214C674;
	}
	return 0x8214C674;
} // Block from 8214C670h-8214C674h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214C674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C674);
		  /* 8214C674h */ case    0:  		/* ld R8, <#[R31]> */
		/* 8214C674h case    0:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 8214C674h case    0:*/		return 0x8214C678;
		  /* 8214C678h */ case    1:  		/* or R11, R10, R11 */
		/* 8214C678h case    1:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8214C678h case    1:*/		return 0x8214C67C;
		  /* 8214C67Ch */ case    2:  		/* and R11, R11, R8 */
		/* 8214C67Ch case    2:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8214C67Ch case    2:*/		return 0x8214C680;
		  /* 8214C680h */ case    3:  		/* cmpdi CR6, R11, 0 */
		/* 8214C680h case    3:*/		cpu::op::cmpdi<6>(regs,regs.R11,0x00000000);
		/* 8214C680h case    3:*/		return 0x8214C684;
		  /* 8214C684h */ case    4:  		/* bc 12, CR6_EQ, 8 */
		/* 8214C684h case    4:*/		if ( regs.CR[6].eq ) { return 0x8214C68C;  }
		/* 8214C684h case    4:*/		return 0x8214C688;
		  /* 8214C688h */ case    5:  		/* mr R5, R4 */
		/* 8214C688h case    5:*/		regs.R5 = regs.R4;
		/* 8214C688h case    5:*/		return 0x8214C68C;
	}
	return 0x8214C68C;
} // Block from 8214C674h-8214C68Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214C68Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C68C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C68C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C68C);
		  /* 8214C68Ch */ case    0:  		/* rlwinm. R11, R5, 0, 24, 31 */
		/* 8214C68Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R5);
		/* 8214C68Ch case    0:*/		return 0x8214C690;
		  /* 8214C690h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 8214C690h case    1:*/		if ( regs.CR[0].eq ) { return 0x8214C698;  }
		/* 8214C690h case    1:*/		return 0x8214C694;
		  /* 8214C694h */ case    2:  		/* std R30, <#[R31]> */
		/* 8214C694h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R31 + 0x00000000) );
		/* 8214C694h case    2:*/		return 0x8214C698;
	}
	return 0x8214C698;
} // Block from 8214C68Ch-8214C698h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214C698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C698);
		  /* 8214C698h */ case    0:  		/* ld R11, <#[R31]> */
		/* 8214C698h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214C698h case    0:*/		return 0x8214C69C;
		  /* 8214C69Ch */ case    1:  		/* mr R3, R5 */
		/* 8214C69Ch case    1:*/		regs.R3 = regs.R5;
		/* 8214C69Ch case    1:*/		return 0x8214C6A0;
		  /* 8214C6A0h */ case    2:  		/* or R11, R11, R9 */
		/* 8214C6A0h case    2:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8214C6A0h case    2:*/		return 0x8214C6A4;
		  /* 8214C6A4h */ case    3:  		/* std R11, <#[R31]> */
		/* 8214C6A4h case    3:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214C6A4h case    3:*/		return 0x8214C6A8;
		  /* 8214C6A8h */ case    4:  		/* ld R30, <#[R1 - 16]> */
		/* 8214C6A8h case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214C6A8h case    4:*/		return 0x8214C6AC;
		  /* 8214C6ACh */ case    5:  		/* ld R31, <#[R1 - 8]> */
		/* 8214C6ACh case    5:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214C6ACh case    5:*/		return 0x8214C6B0;
		  /* 8214C6B0h */ case    6:  		/* bclr 20, CR0_LT */
		/* 8214C6B0h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214C6B0h case    6:*/		return 0x8214C6B4;
	}
	return 0x8214C6B4;
} // Block from 8214C698h-8214C6B4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8214C6B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C6B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C6B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C6B4);
		  /* 8214C6B4h */ case    0:  		/* nop */
		/* 8214C6B4h case    0:*/		cpu::op::nop();
		/* 8214C6B4h case    0:*/		return 0x8214C6B8;
	}
	return 0x8214C6B8;
} // Block from 8214C6B4h-8214C6B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214C6B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C6B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C6B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C6B8);
		  /* 8214C6B8h */ case    0:  		/* mfspr R12, LR */
		/* 8214C6B8h case    0:*/		regs.R12 = regs.LR;
		/* 8214C6B8h case    0:*/		return 0x8214C6BC;
		  /* 8214C6BCh */ case    1:  		/* bl -767084 */
		/* 8214C6BCh case    1:*/		regs.LR = 0x8214C6C0; return 0x82091250;
		/* 8214C6BCh case    1:*/		return 0x8214C6C0;
		  /* 8214C6C0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8214C6C0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8214C6C0h case    2:*/		return 0x8214C6C4;
		  /* 8214C6C4h */ case    3:  		/* lis R11, -32215 */
		/* 8214C6C4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 8214C6C4h case    3:*/		return 0x8214C6C8;
	}
	return 0x8214C6C8;
} // Block from 8214C6B8h-8214C6C8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214C6C8h
// Function 'XShaderPDBBuilder_GetPDBSize'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C6C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C6C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C6C8);
		  /* 8214C6C8h */ case    0:  		/* mr R27, R3 */
		/* 8214C6C8h case    0:*/		regs.R27 = regs.R3;
		/* 8214C6C8h case    0:*/		return 0x8214C6CC;
		  /* 8214C6CCh */ case    1:  		/* addi R31, R11, -28036 */
		/* 8214C6CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFF927C);
		/* 8214C6CCh case    1:*/		return 0x8214C6D0;
	}
	return 0x8214C6D0;
} // Block from 8214C6C8h-8214C6D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214C6D0h
// Function 'XShaderPDBBuilder_GetPDB'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C6D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C6D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C6D0);
		  /* 8214C6D0h */ case    0:  		/* mr R26, R4 */
		/* 8214C6D0h case    0:*/		regs.R26 = regs.R4;
		/* 8214C6D0h case    0:*/		return 0x8214C6D4;
		  /* 8214C6D4h */ case    1:  		/* li R30, 0 */
		/* 8214C6D4h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8214C6D4h case    1:*/		return 0x8214C6D8;
	}
	return 0x8214C6D8;
} // Block from 8214C6D0h-8214C6D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214C6D8h
// Function '?MyClientAllocSysMem@XGRAPHICS@@YAPAXPAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C6D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C6D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C6D8);
		  /* 8214C6D8h */ case    0:  		/* li R28, 1 */
		/* 8214C6D8h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 8214C6D8h case    0:*/		return 0x8214C6DC;
		  /* 8214C6DCh */ case    1:  		/* addi R8, R31, 40 */
		/* 8214C6DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0x28);
		/* 8214C6DCh case    1:*/		return 0x8214C6E0;
	}
	return 0x8214C6E0;
} // Block from 8214C6D8h-8214C6E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214C6E0h
// Function '?MyClientFreeSysMem@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAX0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C6E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C6E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C6E0);
		  /* 8214C6E0h */ case    0:  		/* mfmsr R9, MSR */
		/* 8214C6E0h case    0:*/		regs.R9 = regs.MSR;
		/* 8214C6E0h case    0:*/		return 0x8214C6E4;
		  /* 8214C6E4h */ case    1:  		/* mtmsrd MSR, R13 */
		/* 8214C6E4h case    1:*/		regs.MSR = regs.R13;
		/* 8214C6E4h case    1:*/		return 0x8214C6E8;
		  /* 8214C6E8h */ case    2:  		/* lwarx R10, <#[R8]> */
		/* 8214C6E8h case    2:*/		cpu::mem::lwarx( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 8214C6E8h case    2:*/		return 0x8214C6EC;
		  /* 8214C6ECh */ case    3:  		/* cmpw CR6, R10, R30 */
		/* 8214C6ECh case    3:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R30);
		/* 8214C6ECh case    3:*/		return 0x8214C6F0;
		  /* 8214C6F0h */ case    4:  		/* bc 4, CR6_EQ, 20 */
		/* 8214C6F0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8214C704;  }
		/* 8214C6F0h case    4:*/		return 0x8214C6F4;
		  /* 8214C6F4h */ case    5:  		/* stwcx. R28, <#[R8]> */
		/* 8214C6F4h case    5:*/		cpu::mem::stwcx( regs, regs.R28, (uint32)(regs.R8 + 0x00000000) );
		/* 8214C6F4h case    5:*/		return 0x8214C6F8;
		  /* 8214C6F8h */ case    6:  		/* mtmsrd MSR, R9 */
		/* 8214C6F8h case    6:*/		regs.MSR = regs.R9;
		/* 8214C6F8h case    6:*/		return 0x8214C6FC;
		  /* 8214C6FCh */ case    7:  		/* bc 4, CR0_EQ, -28 */
		/* 8214C6FCh case    7:*/		if ( !regs.CR[0].eq ) { return 0x8214C6E0;  }
		/* 8214C6FCh case    7:*/		return 0x8214C700;
		  /* 8214C700h */ case    8:  		/* b 12 */
		/* 8214C700h case    8:*/		return 0x8214C70C;
		/* 8214C700h case    8:*/		return 0x8214C704;
	}
	return 0x8214C704;
} // Block from 8214C6E0h-8214C704h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214C704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C704);
		  /* 8214C704h */ case    0:  		/* stwcx. R10, <#[R8]> */
		/* 8214C704h case    0:*/		cpu::mem::stwcx( regs, regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 8214C704h case    0:*/		return 0x8214C708;
	}
	return 0x8214C708;
} // Block from 8214C704h-8214C708h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214C708h
// Function '?MyClientAllocVidMem@XGRAPHICS@@YA?AW4_E_SSM_RETURNCODE@1@PAXIW4_E_SSM_VIDMEMHEAP@1@PAU_SSM_VIDMEM@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C708);
		  /* 8214C708h */ case    0:  		/* mtmsrd MSR, R9 */
		/* 8214C708h case    0:*/		regs.MSR = regs.R9;
		/* 8214C708h case    0:*/		return 0x8214C70C;
	}
	return 0x8214C70C;
} // Block from 8214C708h-8214C70Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214C70Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C70C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C70C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C70C);
		  /* 8214C70Ch */ case    0:  		/* mr R11, R10 */
		/* 8214C70Ch case    0:*/		regs.R11 = regs.R10;
		/* 8214C70Ch case    0:*/		return 0x8214C710;
		  /* 8214C710h */ case    1:  		/* b 64 */
		/* 8214C710h case    1:*/		return 0x8214C750;
		/* 8214C710h case    1:*/		return 0x8214C714;
		  /* 8214C714h */ case    2:  		/* li R3, 1 */
		/* 8214C714h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8214C714h case    2:*/		return 0x8214C718;
		  /* 8214C718h */ case    3:  		/* bl -803552 */
		/* 8214C718h case    3:*/		regs.LR = 0x8214C71C; return 0x82088438;
		/* 8214C718h case    3:*/		return 0x8214C71C;
		  /* 8214C71Ch */ case    4:  		/* addi R10, R31, 40 */
		/* 8214C71Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x28);
		/* 8214C71Ch case    4:*/		return 0x8214C720;
		  /* 8214C720h */ case    5:  		/* mfmsr R9, MSR */
		/* 8214C720h case    5:*/		regs.R9 = regs.MSR;
		/* 8214C720h case    5:*/		return 0x8214C724;
		  /* 8214C724h */ case    6:  		/* mtmsrd MSR, R13 */
		/* 8214C724h case    6:*/		regs.MSR = regs.R13;
		/* 8214C724h case    6:*/		return 0x8214C728;
		  /* 8214C728h */ case    7:  		/* lwarx R11, <#[R10]> */
		/* 8214C728h case    7:*/		cpu::mem::lwarx( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8214C728h case    7:*/		return 0x8214C72C;
		  /* 8214C72Ch */ case    8:  		/* cmpw CR6, R11, R30 */
		/* 8214C72Ch case    8:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R30);
		/* 8214C72Ch case    8:*/		return 0x8214C730;
	}
	return 0x8214C730;
} // Block from 8214C70Ch-8214C730h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214C730h
// Function '?MyClientQueryRegistry@XGRAPHICS@@YAIPAXPADPAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C730);
		  /* 8214C730h */ case    0:  		/* bc 4, CR6_EQ, 20 */
		/* 8214C730h case    0:*/		if ( !regs.CR[6].eq ) { return 0x8214C744;  }
		/* 8214C730h case    0:*/		return 0x8214C734;
		  /* 8214C734h */ case    1:  		/* stwcx. R28, <#[R10]> */
		/* 8214C734h case    1:*/		cpu::mem::stwcx( regs, regs.R28, (uint32)(regs.R10 + 0x00000000) );
		/* 8214C734h case    1:*/		return 0x8214C738;
		  /* 8214C738h */ case    2:  		/* mtmsrd MSR, R9 */
		/* 8214C738h case    2:*/		regs.MSR = regs.R9;
		/* 8214C738h case    2:*/		return 0x8214C73C;
		  /* 8214C73Ch */ case    3:  		/* bc 4, CR0_EQ, -28 */
		/* 8214C73Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8214C720;  }
		/* 8214C73Ch case    3:*/		return 0x8214C740;
		  /* 8214C740h */ case    4:  		/* b 12 */
		/* 8214C740h case    4:*/		return 0x8214C74C;
		/* 8214C740h case    4:*/		return 0x8214C744;
	}
	return 0x8214C744;
} // Block from 8214C730h-8214C744h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214C744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C744);
		  /* 8214C744h */ case    0:  		/* stwcx. R11, <#[R10]> */
		/* 8214C744h case    0:*/		cpu::mem::stwcx( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8214C744h case    0:*/		return 0x8214C748;
		  /* 8214C748h */ case    1:  		/* mtmsrd MSR, R9 */
		/* 8214C748h case    1:*/		regs.MSR = regs.R9;
		/* 8214C748h case    1:*/		return 0x8214C74C;
	}
	return 0x8214C74C;
} // Block from 8214C744h-8214C74Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214C74Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C74C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C74C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C74C);
		  /* 8214C74Ch */ case    0:  		/* nop */
		/* 8214C74Ch case    0:*/		cpu::op::nop();
		/* 8214C74Ch case    0:*/		return 0x8214C750;
	}
	return 0x8214C750;
} // Block from 8214C74Ch-8214C750h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214C750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C750);
		  /* 8214C750h */ case    0:  		/* cmpwi CR6, R11, 1 */
		/* 8214C750h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8214C750h case    0:*/		return 0x8214C754;
		  /* 8214C754h */ case    1:  		/* bc 12, CR6_EQ, -64 */
		/* 8214C754h case    1:*/		if ( regs.CR[6].eq ) { return 0x8214C714;  }
		/* 8214C754h case    1:*/		return 0x8214C758;
		  /* 8214C758h */ case    2:  		/* lis R29, -32215 */
		/* 8214C758h case    2:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8229);
		/* 8214C758h case    2:*/		return 0x8214C75C;
		  /* 8214C75Ch */ case    3:  		/* lwz R11, <#[R29 - 28000]> */
		/* 8214C75Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0xFFFF92A0) );
		/* 8214C75Ch case    3:*/		return 0x8214C760;
		  /* 8214C760h */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 8214C760h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214C760h case    4:*/		return 0x8214C764;
		  /* 8214C764h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 8214C764h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8214C770;  }
		/* 8214C764h case    5:*/		return 0x8214C768;
		  /* 8214C768h */ case    6:  		/* mr R3, R31 */
		/* 8214C768h case    6:*/		regs.R3 = regs.R31;
		/* 8214C768h case    6:*/		return 0x8214C76C;
		  /* 8214C76Ch */ case    7:  		/* bl 1181948 */
		/* 8214C76Ch case    7:*/		regs.LR = 0x8214C770; return 0x8226D068;
		/* 8214C76Ch case    7:*/		return 0x8214C770;
	}
	return 0x8214C770;
} // Block from 8214C750h-8214C770h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214C770h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C770);
		  /* 8214C770h */ case    0:  		/* lwz R11, <#[R29 - 28000]> */
		/* 8214C770h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0xFFFF92A0) );
		/* 8214C770h case    0:*/		return 0x8214C774;
		  /* 8214C774h */ case    1:  		/* addi R8, R31, 40 */
		/* 8214C774h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0x28);
		/* 8214C774h case    1:*/		return 0x8214C778;
		  /* 8214C778h */ case    2:  		/* addi R11, R11, 1 */
		/* 8214C778h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214C778h case    2:*/		return 0x8214C77C;
		  /* 8214C77Ch */ case    3:  		/* stw R11, <#[R29 - 28000]> */
		/* 8214C77Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0xFFFF92A0) );
		/* 8214C77Ch case    3:*/		return 0x8214C780;
		  /* 8214C780h */ case    4:  		/* mfmsr R9, MSR */
		/* 8214C780h case    4:*/		regs.R9 = regs.MSR;
		/* 8214C780h case    4:*/		return 0x8214C784;
		  /* 8214C784h */ case    5:  		/* mtmsrd MSR, R13 */
		/* 8214C784h case    5:*/		regs.MSR = regs.R13;
		/* 8214C784h case    5:*/		return 0x8214C788;
	}
	return 0x8214C788;
} // Block from 8214C770h-8214C788h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214C788h
// Function '?MyClientAssert@XGRAPHICS@@YAXPAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C788);
		  /* 8214C788h */ case    0:  		/* lwarx R10, <#[R8]> */
		/* 8214C788h case    0:*/		cpu::mem::lwarx( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 8214C788h case    0:*/		return 0x8214C78C;
		  /* 8214C78Ch */ case    1:  		/* stwcx. R30, <#[R8]> */
		/* 8214C78Ch case    1:*/		cpu::mem::stwcx( regs, regs.R30, (uint32)(regs.R8 + 0x00000000) );
		/* 8214C78Ch case    1:*/		return 0x8214C790;
	}
	return 0x8214C790;
} // Block from 8214C788h-8214C790h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214C790h
// Function '?MyClientErrorMessage@XGRAPHICS@@YAXPAXIIPAD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C790);
		  /* 8214C790h */ case    0:  		/* mtmsrd MSR, R9 */
		/* 8214C790h case    0:*/		regs.MSR = regs.R9;
		/* 8214C790h case    0:*/		return 0x8214C794;
		  /* 8214C794h */ case    1:  		/* bc 4, CR0_EQ, -20 */
		/* 8214C794h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8214C780;  }
		/* 8214C794h case    1:*/		return 0x8214C798;
		  /* 8214C798h */ case    2:  		/* mr R3, R31 */
		/* 8214C798h case    2:*/		regs.R3 = regs.R31;
		/* 8214C798h case    2:*/		return 0x8214C79C;
		  /* 8214C79Ch */ case    3:  		/* bl 1181852 */
		/* 8214C79Ch case    3:*/		regs.LR = 0x8214C7A0; return 0x8226D038;
		/* 8214C79Ch case    3:*/		return 0x8214C7A0;
	}
	return 0x8214C7A0;
} // Block from 8214C790h-8214C7A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214C7A0h
// Function '?CreateILMgmt@XGRAPHICS@@YAJPAU_R400ILSTORE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C7A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C7A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C7A0);
		  /* 8214C7A0h */ case    0:  		/* mr R4, R26 */
		/* 8214C7A0h case    0:*/		regs.R4 = regs.R26;
		/* 8214C7A0h case    0:*/		return 0x8214C7A4;
		  /* 8214C7A4h */ case    1:  		/* mr R3, R27 */
		/* 8214C7A4h case    1:*/		regs.R3 = regs.R27;
		/* 8214C7A4h case    1:*/		return 0x8214C7A8;
		  /* 8214C7A8h */ case    2:  		/* bl 58696 */
		/* 8214C7A8h case    2:*/		regs.LR = 0x8214C7AC; return 0x8215ACF0;
		/* 8214C7A8h case    2:*/		return 0x8214C7AC;
		  /* 8214C7ACh */ case    3:  		/* mr R27, R3 */
		/* 8214C7ACh case    3:*/		regs.R27 = regs.R3;
		/* 8214C7ACh case    3:*/		return 0x8214C7B0;
		  /* 8214C7B0h */ case    4:  		/* mr R3, R31 */
		/* 8214C7B0h case    4:*/		regs.R3 = regs.R31;
		/* 8214C7B0h case    4:*/		return 0x8214C7B4;
		  /* 8214C7B4h */ case    5:  		/* bl 1181812 */
		/* 8214C7B4h case    5:*/		regs.LR = 0x8214C7B8; return 0x8226D028;
		/* 8214C7B4h case    5:*/		return 0x8214C7B8;
		  /* 8214C7B8h */ case    6:  		/* addi R10, R31, 40 */
		/* 8214C7B8h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x28);
		/* 8214C7B8h case    6:*/		return 0x8214C7BC;
		  /* 8214C7BCh */ case    7:  		/* mfmsr R9, MSR */
		/* 8214C7BCh case    7:*/		regs.R9 = regs.MSR;
		/* 8214C7BCh case    7:*/		return 0x8214C7C0;
		  /* 8214C7C0h */ case    8:  		/* mtmsrd MSR, R13 */
		/* 8214C7C0h case    8:*/		regs.MSR = regs.R13;
		/* 8214C7C0h case    8:*/		return 0x8214C7C4;
		  /* 8214C7C4h */ case    9:  		/* lwarx R11, <#[R10]> */
		/* 8214C7C4h case    9:*/		cpu::mem::lwarx( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8214C7C4h case    9:*/		return 0x8214C7C8;
		  /* 8214C7C8h */ case   10:  		/* cmpw CR6, R11, R30 */
		/* 8214C7C8h case   10:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R30);
		/* 8214C7C8h case   10:*/		return 0x8214C7CC;
		  /* 8214C7CCh */ case   11:  		/* bc 4, CR6_EQ, 20 */
		/* 8214C7CCh case   11:*/		if ( !regs.CR[6].eq ) { return 0x8214C7E0;  }
		/* 8214C7CCh case   11:*/		return 0x8214C7D0;
		  /* 8214C7D0h */ case   12:  		/* stwcx. R28, <#[R10]> */
		/* 8214C7D0h case   12:*/		cpu::mem::stwcx( regs, regs.R28, (uint32)(regs.R10 + 0x00000000) );
		/* 8214C7D0h case   12:*/		return 0x8214C7D4;
		  /* 8214C7D4h */ case   13:  		/* mtmsrd MSR, R9 */
		/* 8214C7D4h case   13:*/		regs.MSR = regs.R9;
		/* 8214C7D4h case   13:*/		return 0x8214C7D8;
		  /* 8214C7D8h */ case   14:  		/* bc 4, CR0_EQ, -28 */
		/* 8214C7D8h case   14:*/		if ( !regs.CR[0].eq ) { return 0x8214C7BC;  }
		/* 8214C7D8h case   14:*/		return 0x8214C7DC;
		  /* 8214C7DCh */ case   15:  		/* b 72 */
		/* 8214C7DCh case   15:*/		return 0x8214C824;
		/* 8214C7DCh case   15:*/		return 0x8214C7E0;
	}
	return 0x8214C7E0;
} // Block from 8214C7A0h-8214C7E0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8214C7E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C7E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C7E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C7E0);
		  /* 8214C7E0h */ case    0:  		/* stwcx. R11, <#[R10]> */
		/* 8214C7E0h case    0:*/		cpu::mem::stwcx( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8214C7E0h case    0:*/		return 0x8214C7E4;
		  /* 8214C7E4h */ case    1:  		/* mtmsrd MSR, R9 */
		/* 8214C7E4h case    1:*/		regs.MSR = regs.R9;
		/* 8214C7E4h case    1:*/		return 0x8214C7E8;
		  /* 8214C7E8h */ case    2:  		/* b 60 */
		/* 8214C7E8h case    2:*/		return 0x8214C824;
		/* 8214C7E8h case    2:*/		return 0x8214C7EC;
		  /* 8214C7ECh */ case    3:  		/* li R3, 1 */
		/* 8214C7ECh case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8214C7ECh case    3:*/		return 0x8214C7F0;
	}
	return 0x8214C7F0;
} // Block from 8214C7E0h-8214C7F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214C7F0h
// Function '?ConvertR500TypeAndIndexToD3DTypeAndIndex@XGRAPHICS@@YAXKKKKAAK0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C7F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C7F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C7F0);
		  /* 8214C7F0h */ case    0:  		/* bl -803768 */
		/* 8214C7F0h case    0:*/		regs.LR = 0x8214C7F4; return 0x82088438;
		/* 8214C7F0h case    0:*/		return 0x8214C7F4;
		  /* 8214C7F4h */ case    1:  		/* addi R10, R31, 40 */
		/* 8214C7F4h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x28);
		/* 8214C7F4h case    1:*/		return 0x8214C7F8;
		  /* 8214C7F8h */ case    2:  		/* mfmsr R9, MSR */
		/* 8214C7F8h case    2:*/		regs.R9 = regs.MSR;
		/* 8214C7F8h case    2:*/		return 0x8214C7FC;
		  /* 8214C7FCh */ case    3:  		/* mtmsrd MSR, R13 */
		/* 8214C7FCh case    3:*/		regs.MSR = regs.R13;
		/* 8214C7FCh case    3:*/		return 0x8214C800;
		  /* 8214C800h */ case    4:  		/* lwarx R11, <#[R10]> */
		/* 8214C800h case    4:*/		cpu::mem::lwarx( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8214C800h case    4:*/		return 0x8214C804;
		  /* 8214C804h */ case    5:  		/* cmpw CR6, R11, R30 */
		/* 8214C804h case    5:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R30);
		/* 8214C804h case    5:*/		return 0x8214C808;
		  /* 8214C808h */ case    6:  		/* bc 4, CR6_EQ, 20 */
		/* 8214C808h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8214C81C;  }
		/* 8214C808h case    6:*/		return 0x8214C80C;
		  /* 8214C80Ch */ case    7:  		/* stwcx. R28, <#[R10]> */
		/* 8214C80Ch case    7:*/		cpu::mem::stwcx( regs, regs.R28, (uint32)(regs.R10 + 0x00000000) );
		/* 8214C80Ch case    7:*/		return 0x8214C810;
		  /* 8214C810h */ case    8:  		/* mtmsrd MSR, R9 */
		/* 8214C810h case    8:*/		regs.MSR = regs.R9;
		/* 8214C810h case    8:*/		return 0x8214C814;
		  /* 8214C814h */ case    9:  		/* bc 4, CR0_EQ, -28 */
		/* 8214C814h case    9:*/		if ( !regs.CR[0].eq ) { return 0x8214C7F8;  }
		/* 8214C814h case    9:*/		return 0x8214C818;
		  /* 8214C818h */ case   10:  		/* b 12 */
		/* 8214C818h case   10:*/		return 0x8214C824;
		/* 8214C818h case   10:*/		return 0x8214C81C;
	}
	return 0x8214C81C;
} // Block from 8214C7F0h-8214C81Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8214C81Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C81C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C81C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C81C);
		  /* 8214C81Ch */ case    0:  		/* stwcx. R11, <#[R10]> */
		/* 8214C81Ch case    0:*/		cpu::mem::stwcx( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8214C81Ch case    0:*/		return 0x8214C820;
		  /* 8214C820h */ case    1:  		/* mtmsrd MSR, R9 */
		/* 8214C820h case    1:*/		regs.MSR = regs.R9;
		/* 8214C820h case    1:*/		return 0x8214C824;
	}
	return 0x8214C824;
} // Block from 8214C81Ch-8214C824h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214C824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C824);
		  /* 8214C824h */ case    0:  		/* nop */
		/* 8214C824h case    0:*/		cpu::op::nop();
		/* 8214C824h case    0:*/		return 0x8214C828;
		  /* 8214C828h */ case    1:  		/* cmpwi CR6, R11, 1 */
		/* 8214C828h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8214C828h case    1:*/		return 0x8214C82C;
		  /* 8214C82Ch */ case    2:  		/* bc 12, CR6_EQ, -64 */
		/* 8214C82Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8214C7EC;  }
		/* 8214C82Ch case    2:*/		return 0x8214C830;
		  /* 8214C830h */ case    3:  		/* lwz R11, <#[R29 - 28000]> */
		/* 8214C830h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0xFFFF92A0) );
		/* 8214C830h case    3:*/		return 0x8214C834;
		  /* 8214C834h */ case    4:  		/* addi R8, R31, 40 */
		/* 8214C834h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0x28);
		/* 8214C834h case    4:*/		return 0x8214C838;
		  /* 8214C838h */ case    5:  		/* addi R11, R11, -1 */
		/* 8214C838h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8214C838h case    5:*/		return 0x8214C83C;
		  /* 8214C83Ch */ case    6:  		/* stw R11, <#[R29 - 28000]> */
		/* 8214C83Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0xFFFF92A0) );
		/* 8214C83Ch case    6:*/		return 0x8214C840;
		  /* 8214C840h */ case    7:  		/* lwz R11, <#[R29 - 28000]> */
		/* 8214C840h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0xFFFF92A0) );
		/* 8214C840h case    7:*/		return 0x8214C844;
		  /* 8214C844h */ case    8:  		/* mfmsr R9, MSR */
		/* 8214C844h case    8:*/		regs.R9 = regs.MSR;
		/* 8214C844h case    8:*/		return 0x8214C848;
		  /* 8214C848h */ case    9:  		/* mtmsrd MSR, R13 */
		/* 8214C848h case    9:*/		regs.MSR = regs.R13;
		/* 8214C848h case    9:*/		return 0x8214C84C;
		  /* 8214C84Ch */ case   10:  		/* lwarx R10, <#[R8]> */
		/* 8214C84Ch case   10:*/		cpu::mem::lwarx( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 8214C84Ch case   10:*/		return 0x8214C850;
		  /* 8214C850h */ case   11:  		/* stwcx. R30, <#[R8]> */
		/* 8214C850h case   11:*/		cpu::mem::stwcx( regs, regs.R30, (uint32)(regs.R8 + 0x00000000) );
		/* 8214C850h case   11:*/		return 0x8214C854;
		  /* 8214C854h */ case   12:  		/* mtmsrd MSR, R9 */
		/* 8214C854h case   12:*/		regs.MSR = regs.R9;
		/* 8214C854h case   12:*/		return 0x8214C858;
		  /* 8214C858h */ case   13:  		/* bc 4, CR0_EQ, -20 */
		/* 8214C858h case   13:*/		if ( !regs.CR[0].eq ) { return 0x8214C844;  }
		/* 8214C858h case   13:*/		return 0x8214C85C;
		  /* 8214C85Ch */ case   14:  		/* mr R3, R27 */
		/* 8214C85Ch case   14:*/		regs.R3 = regs.R27;
		/* 8214C85Ch case   14:*/		return 0x8214C860;
		  /* 8214C860h */ case   15:  		/* addi R1, R1, 144 */
		/* 8214C860h case   15:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8214C860h case   15:*/		return 0x8214C864;
		  /* 8214C864h */ case   16:  		/* b -767428 */
		/* 8214C864h case   16:*/		return 0x820912A0;
		/* 8214C864h case   16:*/		return 0x8214C868;
		  /* 8214C868h */ case   17:  		/* cmplwi CR6, R4, 3 */
		/* 8214C868h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000003);
		/* 8214C868h case   17:*/		return 0x8214C86C;
		  /* 8214C86Ch */ case   18:  		/* bc 4, CR6_EQ, 76 */
		/* 8214C86Ch case   18:*/		if ( !regs.CR[6].eq ) { return 0x8214C8B8;  }
		/* 8214C86Ch case   18:*/		return 0x8214C870;
		  /* 8214C870h */ case   19:  		/* cmplwi CR6, R7, 1 */
		/* 8214C870h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000001);
		/* 8214C870h case   19:*/		return 0x8214C874;
		  /* 8214C874h */ case   20:  		/* bc 4, CR6_LT, 16 */
		/* 8214C874h case   20:*/		if ( !regs.CR[6].lt ) { return 0x8214C884;  }
		/* 8214C874h case   20:*/		return 0x8214C878;
		  /* 8214C878h */ case   21:  		/* lis R3, -32768 */
		/* 8214C878h case   21:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8214C878h case   21:*/		return 0x8214C87C;
		  /* 8214C87Ch */ case   22:  		/* ori R3, R3, 16389 */
		/* 8214C87Ch case   22:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8214C87Ch case   22:*/		return 0x8214C880;
		  /* 8214C880h */ case   23:  		/* bclr 20, CR0_LT */
		/* 8214C880h case   23:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214C880h case   23:*/		return 0x8214C884;
	}
	return 0x8214C884;
} // Block from 8214C824h-8214C884h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8214C884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C884);
		  /* 8214C884h */ case    0:  		/* lwz R8, <#[R3]> */
		/* 8214C884h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000000) );
		/* 8214C884h case    0:*/		return 0x8214C888;
		  /* 8214C888h */ case    1:  		/* li R10, 0 */
		/* 8214C888h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8214C888h case    1:*/		return 0x8214C88C;
		  /* 8214C88Ch */ case    2:  		/* lwz R11, <#[R3 + 4]> */
		/* 8214C88Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8214C88Ch case    2:*/		return 0x8214C890;
		  /* 8214C890h */ case    3:  		/* cmplwi CR6, R8, 0 */
		/* 8214C890h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 8214C890h case    3:*/		return 0x8214C894;
		  /* 8214C894h */ case    4:  		/* bc 12, CR6_EQ, 36 */
		/* 8214C894h case    4:*/		if ( regs.CR[6].eq ) { return 0x8214C8B8;  }
		/* 8214C894h case    4:*/		return 0x8214C898;
		  /* 8214C898h */ case    5:  		/* lwz R9, <#[R11]> */
		/* 8214C898h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8214C898h case    5:*/		return 0x8214C89C;
		  /* 8214C89Ch */ case    6:  		/* rlwinm R7, R9, 0, 20, 31 */
		/* 8214C89Ch case    6:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R7,regs.R9);
		/* 8214C89Ch case    6:*/		return 0x8214C8A0;
		  /* 8214C8A0h */ case    7:  		/* cmplw CR6, R7, R5 */
		/* 8214C8A0h case    7:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R5);
		/* 8214C8A0h case    7:*/		return 0x8214C8A4;
		  /* 8214C8A4h */ case    8:  		/* bc 12, CR6_EQ, 28 */
		/* 8214C8A4h case    8:*/		if ( regs.CR[6].eq ) { return 0x8214C8C0;  }
		/* 8214C8A4h case    8:*/		return 0x8214C8A8;
		  /* 8214C8A8h */ case    9:  		/* addi R10, R10, 1 */
		/* 8214C8A8h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8214C8A8h case    9:*/		return 0x8214C8AC;
		  /* 8214C8ACh */ case   10:  		/* addi R11, R11, 4 */
		/* 8214C8ACh case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8214C8ACh case   10:*/		return 0x8214C8B0;
		  /* 8214C8B0h */ case   11:  		/* cmplw CR6, R10, R8 */
		/* 8214C8B0h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 8214C8B0h case   11:*/		return 0x8214C8B4;
		  /* 8214C8B4h */ case   12:  		/* bc 12, CR6_LT, -28 */
		/* 8214C8B4h case   12:*/		if ( regs.CR[6].lt ) { return 0x8214C898;  }
		/* 8214C8B4h case   12:*/		return 0x8214C8B8;
	}
	return 0x8214C8B8;
} // Block from 8214C884h-8214C8B8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214C8B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C8B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C8B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C8B8);
		  /* 8214C8B8h */ case    0:  		/* li R3, 1 */
		/* 8214C8B8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8214C8B8h case    0:*/		return 0x8214C8BC;
		  /* 8214C8BCh */ case    1:  		/* bclr 20, CR0_LT */
		/* 8214C8BCh case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214C8BCh case    1:*/		return 0x8214C8C0;
	}
	return 0x8214C8C0;
} // Block from 8214C8B8h-8214C8C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214C8C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C8C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C8C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C8C0);
		  /* 8214C8C0h */ case    0:  		/* rlwinm R11, R9, 24, 24, 27 */
		/* 8214C8C0h case    0:*/		cpu::op::rlwinm<0,24,24,27>(regs,&regs.R11,regs.R9);
		/* 8214C8C0h case    0:*/		return 0x8214C8C4;
		  /* 8214C8C4h */ case    1:  		/* rlwinm R10, R9, 16, 28, 31 */
		/* 8214C8C4h case    1:*/		cpu::op::rlwinm<0,16,28,31>(regs,&regs.R10,regs.R9);
		/* 8214C8C4h case    1:*/		return 0x8214C8C8;
		  /* 8214C8C8h */ case    2:  		/* li R3, 0 */
		/* 8214C8C8h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214C8C8h case    2:*/		return 0x8214C8CC;
		  /* 8214C8CCh */ case    3:  		/* or R11, R11, R10 */
		/* 8214C8CCh case    3:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8214C8CCh case    3:*/		return 0x8214C8D0;
		  /* 8214C8D0h */ case    4:  		/* stb R11, <#[R6]> */
		/* 8214C8D0h case    4:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 8214C8D0h case    4:*/		return 0x8214C8D4;
		  /* 8214C8D4h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8214C8D4h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214C8D4h case    5:*/		return 0x8214C8D8;
	}
	return 0x8214C8D8;
} // Block from 8214C8C0h-8214C8D8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214C8D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C8D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C8D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C8D8);
		  /* 8214C8D8h */ case    0:  		/* cmplwi CR6, R5, 0 */
		/* 8214C8D8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8214C8D8h case    0:*/		return 0x8214C8DC;
		  /* 8214C8DCh */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8214C8DCh case    1:*/		if ( regs.CR[6].eq ) { return 0x8214C8E8;  }
		/* 8214C8DCh case    1:*/		return 0x8214C8E0;
		  /* 8214C8E0h */ case    2:  		/* li R11, 1 */
		/* 8214C8E0h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8214C8E0h case    2:*/		return 0x8214C8E4;
		  /* 8214C8E4h */ case    3:  		/* stw R11, <#[R3]> */
		/* 8214C8E4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8214C8E4h case    3:*/		return 0x8214C8E8;
	}
	return 0x8214C8E8;
} // Block from 8214C8D8h-8214C8E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214C8E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C8E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C8E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C8E8);
		  /* 8214C8E8h */ case    0:  		/* li R3, 0 */
		/* 8214C8E8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214C8E8h case    0:*/		return 0x8214C8EC;
		  /* 8214C8ECh */ case    1:  		/* bclr 20, CR0_LT */
		/* 8214C8ECh case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214C8ECh case    1:*/		return 0x8214C8F0;
	}
	return 0x8214C8F0;
} // Block from 8214C8E8h-8214C8F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214C8F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C8F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C8F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C8F0);
		  /* 8214C8F0h */ case    0:  		/* lwz R11, <#[R5]> */
		/* 8214C8F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 8214C8F0h case    0:*/		return 0x8214C8F4;
		  /* 8214C8F4h */ case    1:  		/* add R11, R11, R4 */
		/* 8214C8F4h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 8214C8F4h case    1:*/		return 0x8214C8F8;
		  /* 8214C8F8h */ case    2:  		/* stw R11, <#[R3]> */
		/* 8214C8F8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8214C8F8h case    2:*/		return 0x8214C8FC;
		  /* 8214C8FCh */ case    3:  		/* lhz R11, <#[R5 + 4]> */
		/* 8214C8FCh case    3:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 8214C8FCh case    3:*/		return 0x8214C900;
		  /* 8214C900h */ case    4:  		/* stw R11, <#[R3 + 4]> */
		/* 8214C900h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8214C900h case    4:*/		return 0x8214C904;
		  /* 8214C904h */ case    5:  		/* lhz R11, <#[R5 + 6]> */
		/* 8214C904h case    5:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000006) );
		/* 8214C904h case    5:*/		return 0x8214C908;
		  /* 8214C908h */ case    6:  		/* stw R11, <#[R3 + 8]> */
		/* 8214C908h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8214C908h case    6:*/		return 0x8214C90C;
		  /* 8214C90Ch */ case    7:  		/* lhz R11, <#[R5 + 8]> */
		/* 8214C90Ch case    7:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 8214C90Ch case    7:*/		return 0x8214C910;
	}
	return 0x8214C910;
} // Block from 8214C8F0h-8214C910h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214C910h
// Function '?SetUsed@ConstantTableBitVector@XGRAPHICS@@QAAXK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C910( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C910) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C910);
		  /* 8214C910h */ case    0:  		/* stw R11, <#[R3 + 12]> */
		/* 8214C910h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 8214C910h case    0:*/		return 0x8214C914;
		  /* 8214C914h */ case    1:  		/* lwz R11, <#[R5 + 16]> */
		/* 8214C914h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000010) );
		/* 8214C914h case    1:*/		return 0x8214C918;
		  /* 8214C918h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8214C918h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214C918h case    2:*/		return 0x8214C91C;
		  /* 8214C91Ch */ case    3:  		/* add R11, R11, R4 */
		/* 8214C91Ch case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 8214C91Ch case    3:*/		return 0x8214C920;
		  /* 8214C920h */ case    4:  		/* bc 4, CR6_EQ, 8 */
		/* 8214C920h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8214C928;  }
		/* 8214C920h case    4:*/		return 0x8214C924;
		  /* 8214C924h */ case    5:  		/* li R11, 0 */
		/* 8214C924h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8214C924h case    5:*/		return 0x8214C928;
	}
	return 0x8214C928;
} // Block from 8214C910h-8214C928h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214C928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C928);
		  /* 8214C928h */ case    0:  		/* stw R11, <#[R3 + 44]> */
		/* 8214C928h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000002C) );
		/* 8214C928h case    0:*/		return 0x8214C92C;
		  /* 8214C92Ch */ case    1:  		/* lhz R11, <#[R6 + 6]> */
		/* 8214C92Ch case    1:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000006) );
		/* 8214C92Ch case    1:*/		return 0x8214C930;
		  /* 8214C930h */ case    2:  		/* stw R11, <#[R3 + 28]> */
		/* 8214C930h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000001C) );
		/* 8214C930h case    2:*/		return 0x8214C934;
		  /* 8214C934h */ case    3:  		/* lhz R11, <#[R6 + 4]> */
		/* 8214C934h case    3:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000004) );
		/* 8214C934h case    3:*/		return 0x8214C938;
		  /* 8214C938h */ case    4:  		/* stw R11, <#[R3 + 24]> */
		/* 8214C938h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000018) );
		/* 8214C938h case    4:*/		return 0x8214C93C;
		  /* 8214C93Ch */ case    5:  		/* lhz R11, <#[R6]> */
		/* 8214C93Ch case    5:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 8214C93Ch case    5:*/		return 0x8214C940;
		  /* 8214C940h */ case    6:  		/* stw R11, <#[R3 + 16]> */
		/* 8214C940h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8214C940h case    6:*/		return 0x8214C944;
		  /* 8214C944h */ case    7:  		/* lhz R11, <#[R6 + 2]> */
		/* 8214C944h case    7:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000002) );
		/* 8214C944h case    7:*/		return 0x8214C948;
		  /* 8214C948h */ case    8:  		/* stw R11, <#[R3 + 20]> */
		/* 8214C948h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 8214C948h case    8:*/		return 0x8214C94C;
		  /* 8214C94Ch */ case    9:  		/* lhz R11, <#[R6 + 8]> */
		/* 8214C94Ch case    9:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000008) );
		/* 8214C94Ch case    9:*/		return 0x8214C950;
		  /* 8214C950h */ case   10:  		/* stw R11, <#[R3 + 32]> */
		/* 8214C950h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000020) );
		/* 8214C950h case   10:*/		return 0x8214C954;
		  /* 8214C954h */ case   11:  		/* lhz R11, <#[R6 + 10]> */
		/* 8214C954h case   11:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R6 + 0x0000000A) );
		/* 8214C954h case   11:*/		return 0x8214C958;
		  /* 8214C958h */ case   12:  		/* stw R11, <#[R3 + 36]> */
		/* 8214C958h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000024) );
		/* 8214C958h case   12:*/		return 0x8214C95C;
		  /* 8214C95Ch */ case   13:  		/* bclr 20, CR0_LT */
		/* 8214C95Ch case   13:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214C95Ch case   13:*/		return 0x8214C960;
	}
	return 0x8214C960;
} // Block from 8214C928h-8214C960h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8214C960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C960);
		  /* 8214C960h */ case    0:  		/* mfspr R12, LR */
		/* 8214C960h case    0:*/		regs.R12 = regs.LR;
		/* 8214C960h case    0:*/		return 0x8214C964;
		  /* 8214C964h */ case    1:  		/* bl -767756 */
		/* 8214C964h case    1:*/		regs.LR = 0x8214C968; return 0x82091258;
		/* 8214C964h case    1:*/		return 0x8214C968;
		  /* 8214C968h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8214C968h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8214C968h case    2:*/		return 0x8214C96C;
		  /* 8214C96Ch */ case    3:  		/* mr R11, R3 */
		/* 8214C96Ch case    3:*/		regs.R11 = regs.R3;
		/* 8214C96Ch case    3:*/		return 0x8214C970;
		  /* 8214C970h */ case    4:  		/* mr R30, R4 */
		/* 8214C970h case    4:*/		regs.R30 = regs.R4;
		/* 8214C970h case    4:*/		return 0x8214C974;
		  /* 8214C974h */ case    5:  		/* mr R28, R5 */
		/* 8214C974h case    5:*/		regs.R28 = regs.R5;
		/* 8214C974h case    5:*/		return 0x8214C978;
	}
	return 0x8214C978;
} // Block from 8214C960h-8214C978h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214C978h
// Function '?IsUsed@ConstantTableBitVector@XGRAPHICS@@QAA_NK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C978);
		  /* 8214C978h */ case    0:  		/* addi R3, R1, 80 */
		/* 8214C978h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8214C978h case    0:*/		return 0x8214C97C;
		  /* 8214C97Ch */ case    1:  		/* li R5, 48 */
		/* 8214C97Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x30);
		/* 8214C97Ch case    1:*/		return 0x8214C980;
		  /* 8214C980h */ case    2:  		/* mr R4, R11 */
		/* 8214C980h case    2:*/		regs.R4 = regs.R11;
		/* 8214C980h case    2:*/		return 0x8214C984;
		  /* 8214C984h */ case    3:  		/* bl -765908 */
		/* 8214C984h case    3:*/		regs.LR = 0x8214C988; return 0x820919B0;
		/* 8214C984h case    3:*/		return 0x8214C988;
		  /* 8214C988h */ case    4:  		/* lwz R11, <#[R1 + 112]> */
		/* 8214C988h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 8214C988h case    4:*/		return 0x8214C98C;
		  /* 8214C98Ch */ case    5:  		/* li R29, 0 */
		/* 8214C98Ch case    5:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8214C98Ch case    5:*/		return 0x8214C990;
		  /* 8214C990h */ case    6:  		/* cmplwi CR6, R11, 1 */
		/* 8214C990h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8214C990h case    6:*/		return 0x8214C994;
		  /* 8214C994h */ case    7:  		/* bc 12, CR6_EQ, 40 */
		/* 8214C994h case    7:*/		if ( regs.CR[6].eq ) { return 0x8214C9BC;  }
		/* 8214C994h case    7:*/		return 0x8214C998;
		  /* 8214C998h */ case    8:  		/* li R10, 1 */
		/* 8214C998h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8214C998h case    8:*/		return 0x8214C99C;
		  /* 8214C99Ch */ case    9:  		/* mr R5, R28 */
		/* 8214C99Ch case    9:*/		regs.R5 = regs.R28;
		/* 8214C99Ch case    9:*/		return 0x8214C9A0;
		  /* 8214C9A0h */ case   10:  		/* stw R10, <#[R1 + 112]> */
		/* 8214C9A0h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 8214C9A0h case   10:*/		return 0x8214C9A4;
		  /* 8214C9A4h */ case   11:  		/* mr R4, R30 */
		/* 8214C9A4h case   11:*/		regs.R4 = regs.R30;
		/* 8214C9A4h case   11:*/		return 0x8214C9A8;
		  /* 8214C9A8h */ case   12:  		/* addi R3, R1, 80 */
		/* 8214C9A8h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8214C9A8h case   12:*/		return 0x8214C9AC;
		  /* 8214C9ACh */ case   13:  		/* mr R31, R11 */
		/* 8214C9ACh case   13:*/		regs.R31 = regs.R11;
		/* 8214C9ACh case   13:*/		return 0x8214C9B0;
		  /* 8214C9B0h */ case   14:  		/* bl -80 */
		/* 8214C9B0h case   14:*/		regs.LR = 0x8214C9B4; return 0x8214C960;
		/* 8214C9B0h case   14:*/		return 0x8214C9B4;
		  /* 8214C9B4h */ case   15:  		/* mullw R29, R3, R31 */
		/* 8214C9B4h case   15:*/		cpu::op::mullw<0>(regs,&regs.R29,regs.R3,regs.R31);
		/* 8214C9B4h case   15:*/		return 0x8214C9B8;
		  /* 8214C9B8h */ case   16:  		/* b 176 */
		/* 8214C9B8h case   16:*/		return 0x8214CA68;
		/* 8214C9B8h case   16:*/		return 0x8214C9BC;
	}
	return 0x8214C9BC;
} // Block from 8214C978h-8214C9BCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 8214C9BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C9BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C9BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C9BC);
		  /* 8214C9BCh */ case    0:  		/* lwz R31, <#[R1 + 116]> */
		/* 8214C9BCh case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000074) );
		/* 8214C9BCh case    0:*/		return 0x8214C9C0;
		  /* 8214C9C0h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 8214C9C0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8214C9C0h case    1:*/		return 0x8214C9C4;
		  /* 8214C9C4h */ case    2:  		/* bc 12, CR6_EQ, 108 */
		/* 8214C9C4h case    2:*/		if ( regs.CR[6].eq ) { return 0x8214CA30;  }
		/* 8214C9C4h case    2:*/		return 0x8214C9C8;
		  /* 8214C9C8h */ case    3:  		/* lwz R11, <#[R28 + 12]> */
		/* 8214C9C8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 8214C9C8h case    3:*/		return 0x8214C9CC;
		  /* 8214C9CCh */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 8214C9CCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8214C9CCh case    4:*/		return 0x8214C9D0;
		  /* 8214C9D0h */ case    5:  		/* add R11, R11, R30 */
		/* 8214C9D0h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8214C9D0h case    5:*/		return 0x8214C9D4;
		  /* 8214C9D4h */ case    6:  		/* bc 12, CR6_EQ, 148 */
		/* 8214C9D4h case    6:*/		if ( regs.CR[6].eq ) { return 0x8214CA68;  }
		/* 8214C9D4h case    6:*/		return 0x8214C9D8;
		  /* 8214C9D8h */ case    7:  		/* addi R28, R11, -4 */
		/* 8214C9D8h case    7:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFFFFC);
		/* 8214C9D8h case    7:*/		return 0x8214C9DC;
		  /* 8214C9DCh */ case    8:  		/* lwzu R11, <#[R28 + 8]> */
		/* 8214C9DCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		regs.R28 = (uint32)(regs.R28 + 0x00000008);
		/* 8214C9DCh case    8:*/		return 0x8214C9E0;
		  /* 8214C9E0h */ case    9:  		/* mr R4, R30 */
		/* 8214C9E0h case    9:*/		regs.R4 = regs.R30;
		/* 8214C9E0h case    9:*/		return 0x8214C9E4;
		  /* 8214C9E4h */ case   10:  		/* addi R3, R1, 80 */
		/* 8214C9E4h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8214C9E4h case   10:*/		return 0x8214C9E8;
	}
	return 0x8214C9E8;
} // Block from 8214C9BCh-8214C9E8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8214C9E8h
// Function '?FindHighestUnused@ConstantTableBitVector@XGRAPHICS@@QAAHH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214C9E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214C9E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214C9E8);
		  /* 8214C9E8h */ case    0:  		/* add R5, R11, R30 */
		/* 8214C9E8h case    0:*/		cpu::op::add<0>(regs,&regs.R5,regs.R11,regs.R30);
		/* 8214C9E8h case    0:*/		return 0x8214C9EC;
		  /* 8214C9ECh */ case    1:  		/* lhz R10, <#[R5 + 6]> */
		/* 8214C9ECh case    1:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000006) );
		/* 8214C9ECh case    1:*/		return 0x8214C9F0;
		  /* 8214C9F0h */ case    2:  		/* stw R10, <#[R1 + 108]> */
		/* 8214C9F0h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000006C) );
		/* 8214C9F0h case    2:*/		return 0x8214C9F4;
		  /* 8214C9F4h */ case    3:  		/* lhz R10, <#[R5 + 4]> */
		/* 8214C9F4h case    3:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000004) );
		/* 8214C9F4h case    3:*/		return 0x8214C9F8;
		  /* 8214C9F8h */ case    4:  		/* stw R10, <#[R1 + 104]> */
		/* 8214C9F8h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000068) );
		/* 8214C9F8h case    4:*/		return 0x8214C9FC;
		  /* 8214C9FCh */ case    5:  		/* lhzx R11, <#[R11 + R30]> */
		/* 8214C9FCh case    5:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 8214C9FCh case    5:*/		return 0x8214CA00;
		  /* 8214CA00h */ case    6:  		/* stw R11, <#[R1 + 96]> */
		/* 8214CA00h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 8214CA00h case    6:*/		return 0x8214CA04;
		  /* 8214CA04h */ case    7:  		/* lhz R11, <#[R5 + 2]> */
		/* 8214CA04h case    7:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000002) );
		/* 8214CA04h case    7:*/		return 0x8214CA08;
		  /* 8214CA08h */ case    8:  		/* stw R11, <#[R1 + 100]> */
		/* 8214CA08h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 8214CA08h case    8:*/		return 0x8214CA0C;
		  /* 8214CA0Ch */ case    9:  		/* lhz R11, <#[R5 + 8]> */
		/* 8214CA0Ch case    9:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 8214CA0Ch case    9:*/		return 0x8214CA10;
		  /* 8214CA10h */ case   10:  		/* stw R11, <#[R1 + 112]> */
		/* 8214CA10h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 8214CA10h case   10:*/		return 0x8214CA14;
		  /* 8214CA14h */ case   11:  		/* lhz R11, <#[R5 + 10]> */
		/* 8214CA14h case   11:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R5 + 0x0000000A) );
		/* 8214CA14h case   11:*/		return 0x8214CA18;
		  /* 8214CA18h */ case   12:  		/* stw R11, <#[R1 + 116]> */
		/* 8214CA18h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 8214CA18h case   12:*/		return 0x8214CA1C;
		  /* 8214CA1Ch */ case   13:  		/* bl -188 */
		/* 8214CA1Ch case   13:*/		regs.LR = 0x8214CA20; return 0x8214C960;
		/* 8214CA1Ch case   13:*/		return 0x8214CA20;
		  /* 8214CA20h */ case   14:  		/* addic. R31, R31, -1 */
		/* 8214CA20h case   14:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 8214CA20h case   14:*/		return 0x8214CA24;
		  /* 8214CA24h */ case   15:  		/* add R29, R3, R29 */
		/* 8214CA24h case   15:*/		cpu::op::add<0>(regs,&regs.R29,regs.R3,regs.R29);
		/* 8214CA24h case   15:*/		return 0x8214CA28;
		  /* 8214CA28h */ case   16:  		/* bc 4, CR0_EQ, -76 */
		/* 8214CA28h case   16:*/		if ( !regs.CR[0].eq ) { return 0x8214C9DC;  }
		/* 8214CA28h case   16:*/		return 0x8214CA2C;
		  /* 8214CA2Ch */ case   17:  		/* b 60 */
		/* 8214CA2Ch case   17:*/		return 0x8214CA68;
		/* 8214CA2Ch case   17:*/		return 0x8214CA30;
	}
	return 0x8214CA30;
} // Block from 8214C9E8h-8214CA30h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8214CA30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CA30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CA30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CA30);
		  /* 8214CA30h */ case    0:  		/* lhz R10, <#[R28 + 6]> */
		/* 8214CA30h case    0:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000006) );
		/* 8214CA30h case    0:*/		return 0x8214CA34;
		  /* 8214CA34h */ case    1:  		/* lwz R11, <#[R1 + 84]> */
		/* 8214CA34h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8214CA34h case    1:*/		return 0x8214CA38;
		  /* 8214CA38h */ case    2:  		/* lhz R9, <#[R28 + 4]> */
		/* 8214CA38h case    2:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000004) );
		/* 8214CA38h case    2:*/		return 0x8214CA3C;
		  /* 8214CA3Ch */ case    3:  		/* cmpwi CR6, R11, 2 */
		/* 8214CA3Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 8214CA3Ch case    3:*/		return 0x8214CA40;
		  /* 8214CA40h */ case    4:  		/* mullw R29, R10, R9 */
		/* 8214CA40h case    4:*/		cpu::op::mullw<0>(regs,&regs.R29,regs.R10,regs.R9);
		/* 8214CA40h case    4:*/		return 0x8214CA44;
		  /* 8214CA44h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 8214CA44h case    5:*/		if ( regs.CR[6].eq ) { return 0x8214CA50;  }
		/* 8214CA44h case    5:*/		return 0x8214CA48;
	}
	return 0x8214CA48;
} // Block from 8214CA30h-8214CA48h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214CA48h
// Function '?RecordConstantDescription@ConstantRenumberingTable@XGRAPHICS@@QAAXPAU_D3DXCONSTANT_DESC@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CA48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CA48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CA48);
		  /* 8214CA48h */ case    0:  		/* cmpwi CR6, R11, 1 */
		/* 8214CA48h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8214CA48h case    0:*/		return 0x8214CA4C;
		  /* 8214CA4Ch */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 8214CA4Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8214CA68;  }
		/* 8214CA4Ch case    1:*/		return 0x8214CA50;
	}
	return 0x8214CA50;
} // Block from 8214CA48h-8214CA50h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214CA50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CA50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CA50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CA50);
		  /* 8214CA50h */ case    0:  		/* rlwinm. R11, R29, 0, 30, 31 */
		/* 8214CA50h case    0:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R11,regs.R29);
		/* 8214CA50h case    0:*/		return 0x8214CA54;
		  /* 8214CA54h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 8214CA54h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8214CA60;  }
		/* 8214CA54h case    1:*/		return 0x8214CA58;
		  /* 8214CA58h */ case    2:  		/* rlwinm R29, R29, 30, 2, 31 */
		/* 8214CA58h case    2:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R29,regs.R29);
		/* 8214CA58h case    2:*/		return 0x8214CA5C;
		  /* 8214CA5Ch */ case    3:  		/* b 12 */
		/* 8214CA5Ch case    3:*/		return 0x8214CA68;
		/* 8214CA5Ch case    3:*/		return 0x8214CA60;
	}
	return 0x8214CA60;
} // Block from 8214CA50h-8214CA60h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214CA60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CA60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CA60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CA60);
		  /* 8214CA60h */ case    0:  		/* rlwinm R11, R29, 30, 2, 31 */
		/* 8214CA60h case    0:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R11,regs.R29);
		/* 8214CA60h case    0:*/		return 0x8214CA64;
		  /* 8214CA64h */ case    1:  		/* addi R29, R11, 1 */
		/* 8214CA64h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x1);
		/* 8214CA64h case    1:*/		return 0x8214CA68;
	}
	return 0x8214CA68;
} // Block from 8214CA60h-8214CA68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214CA68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CA68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CA68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CA68);
		  /* 8214CA68h */ case    0:  		/* mr R3, R29 */
		/* 8214CA68h case    0:*/		regs.R3 = regs.R29;
		/* 8214CA68h case    0:*/		return 0x8214CA6C;
		  /* 8214CA6Ch */ case    1:  		/* addi R1, R1, 176 */
		/* 8214CA6Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8214CA6Ch case    1:*/		return 0x8214CA70;
		  /* 8214CA70h */ case    2:  		/* b -767944 */
		/* 8214CA70h case    2:*/		return 0x820912A8;
		/* 8214CA70h case    2:*/		return 0x8214CA74;
		  /* 8214CA74h */ case    3:  		/* nop */
		/* 8214CA74h case    3:*/		cpu::op::nop();
		/* 8214CA74h case    3:*/		return 0x8214CA78;
	}
	return 0x8214CA78;
} // Block from 8214CA68h-8214CA78h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214CA78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CA78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CA78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CA78);
		  /* 8214CA78h */ case    0:  		/* mfspr R12, LR */
		/* 8214CA78h case    0:*/		regs.R12 = regs.LR;
		/* 8214CA78h case    0:*/		return 0x8214CA7C;
		  /* 8214CA7Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214CA7Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214CA7Ch case    1:*/		return 0x8214CA80;
		  /* 8214CA80h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8214CA80h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214CA80h case    2:*/		return 0x8214CA84;
		  /* 8214CA84h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8214CA84h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8214CA84h case    3:*/		return 0x8214CA88;
		  /* 8214CA88h */ case    4:  		/* mr R31, R3 */
		/* 8214CA88h case    4:*/		regs.R31 = regs.R3;
		/* 8214CA88h case    4:*/		return 0x8214CA8C;
		  /* 8214CA8Ch */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 8214CA8Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8214CA8Ch case    5:*/		return 0x8214CA90;
		  /* 8214CA90h */ case    6:  		/* bc 4, CR6_EQ, 12 */
		/* 8214CA90h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8214CA9C;  }
		/* 8214CA90h case    6:*/		return 0x8214CA94;
		  /* 8214CA94h */ case    7:  		/* bl 1157068 */
		/* 8214CA94h case    7:*/		regs.LR = 0x8214CA98; return 0x82267260;
		/* 8214CA94h case    7:*/		return 0x8214CA98;
	}
	return 0x8214CA98;
} // Block from 8214CA78h-8214CA98h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214CA98h
// Function '?RecordConstant@ConstantRenumberingTable@XGRAPHICS@@QAAXPBU_D3DXCONSTANT_DESC@@PBU_D3DXSHADER_CONSTANTTABLE@@PBU_D3DXSHADER_CONSTANTINFO@@PBU_D3DXSHADER_TYPEINFO@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CA98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CA98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CA98);
		  /* 8214CA98h */ case    0:  		/* b 44 */
		/* 8214CA98h case    0:*/		return 0x8214CAC4;
		/* 8214CA98h case    0:*/		return 0x8214CA9C;
	}
	return 0x8214CA9C;
} // Block from 8214CA98h-8214CA9Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214CA9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CA9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CA9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CA9C);
		  /* 8214CA9Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8214CA9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8214CA9Ch case    0:*/		return 0x8214CAA0;
		  /* 8214CAA0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8214CAA0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214CAA0h case    1:*/		return 0x8214CAA4;
		  /* 8214CAA4h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8214CAA4h case    2:*/		if ( regs.CR[6].eq ) { return 0x8214CAC4;  }
		/* 8214CAA4h case    2:*/		return 0x8214CAA8;
		  /* 8214CAA8h */ case    3:  		/* lis R4, 9351 */
		/* 8214CAA8h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 8214CAA8h case    3:*/		return 0x8214CAAC;
		  /* 8214CAACh */ case    4:  		/* lwz R3, <#[R31]> */
		/* 8214CAACh case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 8214CAACh case    4:*/		return 0x8214CAB0;
		  /* 8214CAB0h */ case    5:  		/* bl -804728 */
		/* 8214CAB0h case    5:*/		regs.LR = 0x8214CAB4; return 0x82088338;
		/* 8214CAB0h case    5:*/		return 0x8214CAB4;
		  /* 8214CAB4h */ case    6:  		/* li R11, 0 */
		/* 8214CAB4h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8214CAB4h case    6:*/		return 0x8214CAB8;
		  /* 8214CAB8h */ case    7:  		/* stw R11, <#[R31]> */
		/* 8214CAB8h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214CAB8h case    7:*/		return 0x8214CABC;
		  /* 8214CABCh */ case    8:  		/* stw R11, <#[R31 + 4]> */
		/* 8214CABCh case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214CABCh case    8:*/		return 0x8214CAC0;
		  /* 8214CAC0h */ case    9:  		/* stw R11, <#[R31 + 8]> */
		/* 8214CAC0h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8214CAC0h case    9:*/		return 0x8214CAC4;
	}
	return 0x8214CAC4;
} // Block from 8214CA9Ch-8214CAC4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8214CAC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CAC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CAC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CAC4);
		  /* 8214CAC4h */ case    0:  		/* addi R1, R1, 96 */
		/* 8214CAC4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8214CAC4h case    0:*/		return 0x8214CAC8;
		  /* 8214CAC8h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214CAC8h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214CAC8h case    1:*/		return 0x8214CACC;
		  /* 8214CACCh */ case    2:  		/* mtspr LR, R12 */
		/* 8214CACCh case    2:*/		regs.LR = regs.R12;
		/* 8214CACCh case    2:*/		return 0x8214CAD0;
		  /* 8214CAD0h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 8214CAD0h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214CAD0h case    3:*/		return 0x8214CAD4;
		  /* 8214CAD4h */ case    4:  		/* bclr 20, CR0_LT */
		/* 8214CAD4h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214CAD4h case    4:*/		return 0x8214CAD8;
	}
	return 0x8214CAD8;
} // Block from 8214CAC4h-8214CAD8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214CAD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CAD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CAD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CAD8);
		  /* 8214CAD8h */ case    0:  		/* mfspr R12, LR */
		/* 8214CAD8h case    0:*/		regs.R12 = regs.LR;
		/* 8214CAD8h case    0:*/		return 0x8214CADC;
		  /* 8214CADCh */ case    1:  		/* bl -768140 */
		/* 8214CADCh case    1:*/		regs.LR = 0x8214CAE0; return 0x82091250;
		/* 8214CADCh case    1:*/		return 0x8214CAE0;
		  /* 8214CAE0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8214CAE0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8214CAE0h case    2:*/		return 0x8214CAE4;
		  /* 8214CAE4h */ case    3:  		/* lis R11, -32253 */
		/* 8214CAE4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214CAE4h case    3:*/		return 0x8214CAE8;
		  /* 8214CAE8h */ case    4:  		/* lis R10, -32253 */
		/* 8214CAE8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8214CAE8h case    4:*/		return 0x8214CAEC;
		  /* 8214CAECh */ case    5:  		/* mr R31, R3 */
		/* 8214CAECh case    5:*/		regs.R31 = regs.R3;
		/* 8214CAECh case    5:*/		return 0x8214CAF0;
		  /* 8214CAF0h */ case    6:  		/* mr R30, R4 */
		/* 8214CAF0h case    6:*/		regs.R30 = regs.R4;
		/* 8214CAF0h case    6:*/		return 0x8214CAF4;
		  /* 8214CAF4h */ case    7:  		/* mr R26, R5 */
		/* 8214CAF4h case    7:*/		regs.R26 = regs.R5;
		/* 8214CAF4h case    7:*/		return 0x8214CAF8;
		  /* 8214CAF8h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8214CAF8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8214CAF8h case    8:*/		return 0x8214CAFC;
		  /* 8214CAFCh */ case    9:  		/* addi R28, R11, 27460 */
		/* 8214CAFCh case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x6B44);
		/* 8214CAFCh case    9:*/		return 0x8214CB00;
		  /* 8214CB00h */ case   10:  		/* addi R27, R10, 27808 */
		/* 8214CB00h case   10:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0x6CA0);
		/* 8214CB00h case   10:*/		return 0x8214CB04;
		  /* 8214CB04h */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 8214CB04h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8214CB24;  }
		/* 8214CB04h case   11:*/		return 0x8214CB08;
		  /* 8214CB08h */ case   12:  		/* lis R11, -32253 */
		/* 8214CB08h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214CB08h case   12:*/		return 0x8214CB0C;
		  /* 8214CB0Ch */ case   13:  		/* mr R6, R27 */
		/* 8214CB0Ch case   13:*/		regs.R6 = regs.R27;
		/* 8214CB0Ch case   13:*/		return 0x8214CB10;
		  /* 8214CB10h */ case   14:  		/* addi R5, R11, 27792 */
		/* 8214CB10h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6C90);
		/* 8214CB10h case   14:*/		return 0x8214CB14;
		  /* 8214CB14h */ case   15:  		/* mr R4, R28 */
		/* 8214CB14h case   15:*/		regs.R4 = regs.R28;
		/* 8214CB14h case   15:*/		return 0x8214CB18;
		  /* 8214CB18h */ case   16:  		/* li R7, 411 */
		/* 8214CB18h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x19B);
		/* 8214CB18h case   16:*/		return 0x8214CB1C;
		  /* 8214CB1Ch */ case   17:  		/* li R3, 0 */
		/* 8214CB1Ch case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214CB1Ch case   17:*/		return 0x8214CB20;
		  /* 8214CB20h */ case   18:  		/* bl 45288 */
		/* 8214CB20h case   18:*/		regs.LR = 0x8214CB24; return 0x82157C08;
		/* 8214CB20h case   18:*/		return 0x8214CB24;
	}
	return 0x8214CB24;
} // Block from 8214CAD8h-8214CB24h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8214CB24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CB24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CB24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CB24);
		  /* 8214CB24h */ case    0:  		/* lwz R11, <#[R31 + 68]> */
		/* 8214CB24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000044) );
		/* 8214CB24h case    0:*/		return 0x8214CB28;
		  /* 8214CB28h */ case    1:  		/* cmplw CR6, R30, R11 */
		/* 8214CB28h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8214CB28h case    1:*/		return 0x8214CB2C;
		  /* 8214CB2Ch */ case    2:  		/* bc 12, CR6_LT, 32 */
		/* 8214CB2Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x8214CB4C;  }
		/* 8214CB2Ch case    2:*/		return 0x8214CB30;
		  /* 8214CB30h */ case    3:  		/* lis R11, -32253 */
		/* 8214CB30h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214CB30h case    3:*/		return 0x8214CB34;
		  /* 8214CB34h */ case    4:  		/* mr R6, R27 */
		/* 8214CB34h case    4:*/		regs.R6 = regs.R27;
		/* 8214CB34h case    4:*/		return 0x8214CB38;
		  /* 8214CB38h */ case    5:  		/* addi R5, R11, 27736 */
		/* 8214CB38h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6C58);
		/* 8214CB38h case    5:*/		return 0x8214CB3C;
		  /* 8214CB3Ch */ case    6:  		/* mr R4, R28 */
		/* 8214CB3Ch case    6:*/		regs.R4 = regs.R28;
		/* 8214CB3Ch case    6:*/		return 0x8214CB40;
		  /* 8214CB40h */ case    7:  		/* li R7, 411 */
		/* 8214CB40h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x19B);
		/* 8214CB40h case    7:*/		return 0x8214CB44;
		  /* 8214CB44h */ case    8:  		/* li R3, 0 */
		/* 8214CB44h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214CB44h case    8:*/		return 0x8214CB48;
		  /* 8214CB48h */ case    9:  		/* bl 45248 */
		/* 8214CB48h case    9:*/		regs.LR = 0x8214CB4C; return 0x82157C08;
		/* 8214CB48h case    9:*/		return 0x8214CB4C;
	}
	return 0x8214CB4C;
} // Block from 8214CB24h-8214CB4Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8214CB4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CB4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CB4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CB4C);
		  /* 8214CB4Ch */ case    0:  		/* lwz R11, <#[R31 + 80]> */
		/* 8214CB4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 8214CB4Ch case    0:*/		return 0x8214CB50;
		  /* 8214CB50h */ case    1:  		/* rlwinm R29, R30, 3, 0, 28 */
		/* 8214CB50h case    1:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R29,regs.R30);
		/* 8214CB50h case    1:*/		return 0x8214CB54;
		  /* 8214CB54h */ case    2:  		/* lwz R10, <#[R31 + 76]> */
		/* 8214CB54h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000004C) );
		/* 8214CB54h case    2:*/		return 0x8214CB58;
		  /* 8214CB58h */ case    3:  		/* lwzx R11, <#[R11 + R29]> */
		/* 8214CB58h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 8214CB58h case    3:*/		return 0x8214CB5C;
		  /* 8214CB5Ch */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 8214CB5Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8214CB5Ch case    4:*/		return 0x8214CB60;
		  /* 8214CB60h */ case    5:  		/* bc 12, CR6_LT, 32 */
		/* 8214CB60h case    5:*/		if ( regs.CR[6].lt ) { return 0x8214CB80;  }
		/* 8214CB60h case    5:*/		return 0x8214CB64;
		  /* 8214CB64h */ case    6:  		/* lis R11, -32253 */
		/* 8214CB64h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214CB64h case    6:*/		return 0x8214CB68;
		  /* 8214CB68h */ case    7:  		/* mr R6, R27 */
		/* 8214CB68h case    7:*/		regs.R6 = regs.R27;
		/* 8214CB68h case    7:*/		return 0x8214CB6C;
		  /* 8214CB6Ch */ case    8:  		/* addi R5, R11, 27648 */
		/* 8214CB6Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6C00);
		/* 8214CB6Ch case    8:*/		return 0x8214CB70;
		  /* 8214CB70h */ case    9:  		/* mr R4, R28 */
		/* 8214CB70h case    9:*/		regs.R4 = regs.R28;
		/* 8214CB70h case    9:*/		return 0x8214CB74;
		  /* 8214CB74h */ case   10:  		/* li R7, 411 */
		/* 8214CB74h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x19B);
		/* 8214CB74h case   10:*/		return 0x8214CB78;
		  /* 8214CB78h */ case   11:  		/* li R3, 0 */
		/* 8214CB78h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214CB78h case   11:*/		return 0x8214CB7C;
		  /* 8214CB7Ch */ case   12:  		/* bl 45196 */
		/* 8214CB7Ch case   12:*/		regs.LR = 0x8214CB80; return 0x82157C08;
		/* 8214CB7Ch case   12:*/		return 0x8214CB80;
	}
	return 0x8214CB80;
} // Block from 8214CB4Ch-8214CB80h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214CB80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CB80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CB80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CB80);
		  /* 8214CB80h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8214CB80h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8214CB80h case    0:*/		return 0x8214CB84;
		  /* 8214CB84h */ case    1:  		/* rlwinm R10, R30, 2, 0, 29 */
		/* 8214CB84h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R30);
		/* 8214CB84h case    1:*/		return 0x8214CB88;
		  /* 8214CB88h */ case    2:  		/* lwz R9, <#[R31 + 8]> */
		/* 8214CB88h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 8214CB88h case    2:*/		return 0x8214CB8C;
		  /* 8214CB8Ch */ case    3:  		/* li R8, 1 */
		/* 8214CB8Ch case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8214CB8Ch case    3:*/		return 0x8214CB90;
		  /* 8214CB90h */ case    4:  		/* ori R11, R11, 1 */
		/* 8214CB90h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214CB90h case    4:*/		return 0x8214CB94;
		  /* 8214CB94h */ case    5:  		/* stw R11, <#[R31 + 16]> */
		/* 8214CB94h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8214CB94h case    5:*/		return 0x8214CB98;
		  /* 8214CB98h */ case    6:  		/* stwx R26, <#[R9 + R10]> */
		/* 8214CB98h case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 8214CB98h case    6:*/		return 0x8214CB9C;
		  /* 8214CB9Ch */ case    7:  		/* lwz R11, <#[R31 + 12]> */
		/* 8214CB9Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8214CB9Ch case    7:*/		return 0x8214CBA0;
		  /* 8214CBA0h */ case    8:  		/* lwz R10, <#[R31 + 80]> */
		/* 8214CBA0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000050) );
		/* 8214CBA0h case    8:*/		return 0x8214CBA4;
		  /* 8214CBA4h */ case    9:  		/* lwzx R9, <#[R10 + R29]> */
		/* 8214CBA4h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R29 + 0x00000000) );
		/* 8214CBA4h case    9:*/		return 0x8214CBA8;
		  /* 8214CBA8h */ case   10:  		/* rlwinm R10, R9, 29, 3, 29 */
		/* 8214CBA8h case   10:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R9);
		/* 8214CBA8h case   10:*/		return 0x8214CBAC;
		  /* 8214CBACh */ case   11:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 8214CBACh case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 8214CBACh case   11:*/		return 0x8214CBB0;
		  /* 8214CBB0h */ case   12:  		/* lwzx R7, <#[R10 + R11]> */
		/* 8214CBB0h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8214CBB0h case   12:*/		return 0x8214CBB4;
		  /* 8214CBB4h */ case   13:  		/* slw R9, R8, R9 */
		/* 8214CBB4h case   13:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8214CBB4h case   13:*/		return 0x8214CBB8;
		  /* 8214CBB8h */ case   14:  		/* or R9, R9, R7 */
		/* 8214CBB8h case   14:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 8214CBB8h case   14:*/		return 0x8214CBBC;
		  /* 8214CBBCh */ case   15:  		/* stwx R9, <#[R10 + R11]> */
		/* 8214CBBCh case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8214CBBCh case   15:*/		return 0x8214CBC0;
		  /* 8214CBC0h */ case   16:  		/* addi R1, R1, 144 */
		/* 8214CBC0h case   16:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8214CBC0h case   16:*/		return 0x8214CBC4;
		  /* 8214CBC4h */ case   17:  		/* b -768292 */
		/* 8214CBC4h case   17:*/		return 0x820912A0;
		/* 8214CBC4h case   17:*/		return 0x8214CBC8;
	}
	return 0x8214CBC8;
} // Block from 8214CB80h-8214CBC8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8214CBC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CBC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CBC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CBC8);
		  /* 8214CBC8h */ case    0:  		/* mfspr R12, LR */
		/* 8214CBC8h case    0:*/		regs.R12 = regs.LR;
		/* 8214CBC8h case    0:*/		return 0x8214CBCC;
		  /* 8214CBCCh */ case    1:  		/* bl -768380 */
		/* 8214CBCCh case    1:*/		regs.LR = 0x8214CBD0; return 0x82091250;
		/* 8214CBCCh case    1:*/		return 0x8214CBD0;
		  /* 8214CBD0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8214CBD0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8214CBD0h case    2:*/		return 0x8214CBD4;
		  /* 8214CBD4h */ case    3:  		/* lwz R9, <#[R3 + 72]> */
		/* 8214CBD4h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000048) );
		/* 8214CBD4h case    3:*/		return 0x8214CBD8;
		  /* 8214CBD8h */ case    4:  		/* lis R11, -32253 */
		/* 8214CBD8h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214CBD8h case    4:*/		return 0x8214CBDC;
		  /* 8214CBDCh */ case    5:  		/* lis R10, -32253 */
		/* 8214CBDCh case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8214CBDCh case    5:*/		return 0x8214CBE0;
		  /* 8214CBE0h */ case    6:  		/* mr R31, R3 */
		/* 8214CBE0h case    6:*/		regs.R31 = regs.R3;
		/* 8214CBE0h case    6:*/		return 0x8214CBE4;
		  /* 8214CBE4h */ case    7:  		/* mr R30, R4 */
		/* 8214CBE4h case    7:*/		regs.R30 = regs.R4;
		/* 8214CBE4h case    7:*/		return 0x8214CBE8;
		  /* 8214CBE8h */ case    8:  		/* mr R29, R5 */
		/* 8214CBE8h case    8:*/		regs.R29 = regs.R5;
		/* 8214CBE8h case    8:*/		return 0x8214CBEC;
		  /* 8214CBECh */ case    9:  		/* mr R28, R6 */
		/* 8214CBECh case    9:*/		regs.R28 = regs.R6;
		/* 8214CBECh case    9:*/		return 0x8214CBF0;
		  /* 8214CBF0h */ case   10:  		/* cmplw CR6, R4, R9 */
		/* 8214CBF0h case   10:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R9);
		/* 8214CBF0h case   10:*/		return 0x8214CBF4;
		  /* 8214CBF4h */ case   11:  		/* addi R27, R11, 27460 */
		/* 8214CBF4h case   11:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x6B44);
		/* 8214CBF4h case   11:*/		return 0x8214CBF8;
		  /* 8214CBF8h */ case   12:  		/* addi R26, R10, 27808 */
		/* 8214CBF8h case   12:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R10,0x6CA0);
		/* 8214CBF8h case   12:*/		return 0x8214CBFC;
		  /* 8214CBFCh */ case   13:  		/* bc 12, CR6_LT, 32 */
		/* 8214CBFCh case   13:*/		if ( regs.CR[6].lt ) { return 0x8214CC1C;  }
		/* 8214CBFCh case   13:*/		return 0x8214CC00;
		  /* 8214CC00h */ case   14:  		/* lis R11, -32253 */
		/* 8214CC00h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214CC00h case   14:*/		return 0x8214CC04;
		  /* 8214CC04h */ case   15:  		/* mr R6, R26 */
		/* 8214CC04h case   15:*/		regs.R6 = regs.R26;
		/* 8214CC04h case   15:*/		return 0x8214CC08;
		  /* 8214CC08h */ case   16:  		/* addi R5, R11, 27976 */
		/* 8214CC08h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6D48);
		/* 8214CC08h case   16:*/		return 0x8214CC0C;
		  /* 8214CC0Ch */ case   17:  		/* mr R4, R27 */
		/* 8214CC0Ch case   17:*/		regs.R4 = regs.R27;
		/* 8214CC0Ch case   17:*/		return 0x8214CC10;
		  /* 8214CC10h */ case   18:  		/* li R7, 557 */
		/* 8214CC10h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x22D);
		/* 8214CC10h case   18:*/		return 0x8214CC14;
		  /* 8214CC14h */ case   19:  		/* li R3, 0 */
		/* 8214CC14h case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214CC14h case   19:*/		return 0x8214CC18;
		  /* 8214CC18h */ case   20:  		/* bl 45040 */
		/* 8214CC18h case   20:*/		regs.LR = 0x8214CC1C; return 0x82157C08;
		/* 8214CC18h case   20:*/		return 0x8214CC1C;
	}
	return 0x8214CC1C;
} // Block from 8214CBC8h-8214CC1Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 8214CC1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CC1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CC1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CC1C);
		  /* 8214CC1Ch */ case    0:  		/* lwz R11, <#[R31 + 84]> */
		/* 8214CC1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 8214CC1Ch case    0:*/		return 0x8214CC20;
		  /* 8214CC20h */ case    1:  		/* mulli R30, R30, 12 */
		/* 8214CC20h case    1:*/		cpu::op::mulli<0>(regs,&regs.R30,regs.R30,0xC);
		/* 8214CC20h case    1:*/		return 0x8214CC24;
		  /* 8214CC24h */ case    2:  		/* add R11, R30, R11 */
		/* 8214CC24h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 8214CC24h case    2:*/		return 0x8214CC28;
		  /* 8214CC28h */ case    3:  		/* lwz R11, <#[R11 + 8]> */
		/* 8214CC28h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8214CC28h case    3:*/		return 0x8214CC2C;
		  /* 8214CC2Ch */ case    4:  		/* cmplw CR6, R29, R11 */
		/* 8214CC2Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8214CC2Ch case    4:*/		return 0x8214CC30;
		  /* 8214CC30h */ case    5:  		/* bc 12, CR6_LT, 32 */
		/* 8214CC30h case    5:*/		if ( regs.CR[6].lt ) { return 0x8214CC50;  }
		/* 8214CC30h case    5:*/		return 0x8214CC34;
		  /* 8214CC34h */ case    6:  		/* lis R11, -32253 */
		/* 8214CC34h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214CC34h case    6:*/		return 0x8214CC38;
		  /* 8214CC38h */ case    7:  		/* mr R6, R26 */
		/* 8214CC38h case    7:*/		regs.R6 = regs.R26;
		/* 8214CC38h case    7:*/		return 0x8214CC3C;
		  /* 8214CC3Ch */ case    8:  		/* addi R5, R11, 27904 */
		/* 8214CC3Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6D00);
		/* 8214CC3Ch case    8:*/		return 0x8214CC40;
		  /* 8214CC40h */ case    9:  		/* mr R4, R27 */
		/* 8214CC40h case    9:*/		regs.R4 = regs.R27;
		/* 8214CC40h case    9:*/		return 0x8214CC44;
		  /* 8214CC44h */ case   10:  		/* li R7, 557 */
		/* 8214CC44h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x22D);
		/* 8214CC44h case   10:*/		return 0x8214CC48;
		  /* 8214CC48h */ case   11:  		/* li R3, 0 */
		/* 8214CC48h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214CC48h case   11:*/		return 0x8214CC4C;
		  /* 8214CC4Ch */ case   12:  		/* bl 44988 */
		/* 8214CC4Ch case   12:*/		regs.LR = 0x8214CC50; return 0x82157C08;
		/* 8214CC4Ch case   12:*/		return 0x8214CC50;
	}
	return 0x8214CC50;
} // Block from 8214CC1Ch-8214CC50h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214CC50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CC50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CC50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CC50);
		  /* 8214CC50h */ case    0:  		/* lwz R11, <#[R31 + 84]> */
		/* 8214CC50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 8214CC50h case    0:*/		return 0x8214CC54;
		  /* 8214CC54h */ case    1:  		/* mr R5, R28 */
		/* 8214CC54h case    1:*/		regs.R5 = regs.R28;
		/* 8214CC54h case    1:*/		return 0x8214CC58;
		  /* 8214CC58h */ case    2:  		/* lwz R10, <#[R31 + 16]> */
		/* 8214CC58h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8214CC58h case    2:*/		return 0x8214CC5C;
		  /* 8214CC5Ch */ case    3:  		/* mr R3, R31 */
		/* 8214CC5Ch case    3:*/		regs.R3 = regs.R31;
		/* 8214CC5Ch case    3:*/		return 0x8214CC60;
		  /* 8214CC60h */ case    4:  		/* add R11, R30, R11 */
		/* 8214CC60h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 8214CC60h case    4:*/		return 0x8214CC64;
		  /* 8214CC64h */ case    5:  		/* ori R9, R10, 1 */
		/* 8214CC64h case    5:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R10,0x1);
		/* 8214CC64h case    5:*/		return 0x8214CC68;
		  /* 8214CC68h */ case    6:  		/* lwz R10, <#[R11]> */
		/* 8214CC68h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8214CC68h case    6:*/		return 0x8214CC6C;
		  /* 8214CC6Ch */ case    7:  		/* lwz R11, <#[R11 + 4]> */
		/* 8214CC6Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8214CC6Ch case    7:*/		return 0x8214CC70;
		  /* 8214CC70h */ case    8:  		/* stw R9, <#[R31 + 16]> */
		/* 8214CC70h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 8214CC70h case    8:*/		return 0x8214CC74;
		  /* 8214CC74h */ case    9:  		/* mullw R11, R11, R29 */
		/* 8214CC74h case    9:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 8214CC74h case    9:*/		return 0x8214CC78;
		  /* 8214CC78h */ case   10:  		/* add R4, R11, R10 */
		/* 8214CC78h case   10:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R10);
		/* 8214CC78h case   10:*/		return 0x8214CC7C;
		  /* 8214CC7Ch */ case   11:  		/* bl -420 */
		/* 8214CC7Ch case   11:*/		regs.LR = 0x8214CC80; return 0x8214CAD8;
		/* 8214CC7Ch case   11:*/		return 0x8214CC80;
		  /* 8214CC80h */ case   12:  		/* addi R1, R1, 144 */
		/* 8214CC80h case   12:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8214CC80h case   12:*/		return 0x8214CC84;
		  /* 8214CC84h */ case   13:  		/* b -768484 */
		/* 8214CC84h case   13:*/		return 0x820912A0;
		/* 8214CC84h case   13:*/		return 0x8214CC88;
	}
	return 0x8214CC88;
} // Block from 8214CC50h-8214CC88h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8214CC88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CC88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CC88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CC88);
		  /* 8214CC88h */ case    0:  		/* mfspr R12, LR */
		/* 8214CC88h case    0:*/		regs.R12 = regs.LR;
		/* 8214CC88h case    0:*/		return 0x8214CC8C;
		  /* 8214CC8Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214CC8Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214CC8Ch case    1:*/		return 0x8214CC90;
		  /* 8214CC90h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8214CC90h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8214CC90h case    2:*/		return 0x8214CC94;
		  /* 8214CC94h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8214CC94h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214CC94h case    3:*/		return 0x8214CC98;
		  /* 8214CC98h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8214CC98h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8214CC98h case    4:*/		return 0x8214CC9C;
		  /* 8214CC9Ch */ case    5:  		/* mr R31, R3 */
		/* 8214CC9Ch case    5:*/		regs.R31 = regs.R3;
		/* 8214CC9Ch case    5:*/		return 0x8214CCA0;
		  /* 8214CCA0h */ case    6:  		/* lwz R3, <#[R3]> */
		/* 8214CCA0h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000000) );
		/* 8214CCA0h case    6:*/		return 0x8214CCA4;
		  /* 8214CCA4h */ case    7:  		/* li R30, 0 */
		/* 8214CCA4h case    7:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8214CCA4h case    7:*/		return 0x8214CCA8;
		  /* 8214CCA8h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8214CCA8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8214CCA8h case    8:*/		return 0x8214CCAC;
		  /* 8214CCACh */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 8214CCACh case    9:*/		if ( regs.CR[6].eq ) { return 0x8214CCBC;  }
		/* 8214CCACh case    9:*/		return 0x8214CCB0;
		  /* 8214CCB0h */ case   10:  		/* lis R4, 9351 */
		/* 8214CCB0h case   10:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 8214CCB0h case   10:*/		return 0x8214CCB4;
		  /* 8214CCB4h */ case   11:  		/* bl -805244 */
		/* 8214CCB4h case   11:*/		regs.LR = 0x8214CCB8; return 0x82088338;
		/* 8214CCB4h case   11:*/		return 0x8214CCB8;
		  /* 8214CCB8h */ case   12:  		/* stw R30, <#[R31]> */
		/* 8214CCB8h case   12:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000000) );
		/* 8214CCB8h case   12:*/		return 0x8214CCBC;
	}
	return 0x8214CCBC;
} // Block from 8214CC88h-8214CCBCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214CCBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CCBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CCBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CCBC);
		  /* 8214CCBCh */ case    0:  		/* stw R30, <#[R31 + 4]> */
		/* 8214CCBCh case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 8214CCBCh case    0:*/		return 0x8214CCC0;
		  /* 8214CCC0h */ case    1:  		/* li R3, 0 */
		/* 8214CCC0h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214CCC0h case    1:*/		return 0x8214CCC4;
		  /* 8214CCC4h */ case    2:  		/* stw R30, <#[R31 + 8]> */
		/* 8214CCC4h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 8214CCC4h case    2:*/		return 0x8214CCC8;
		  /* 8214CCC8h */ case    3:  		/* addi R1, R1, 112 */
		/* 8214CCC8h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214CCC8h case    3:*/		return 0x8214CCCC;
		  /* 8214CCCCh */ case    4:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214CCCCh case    4:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214CCCCh case    4:*/		return 0x8214CCD0;
	}
	return 0x8214CCD0;
} // Block from 8214CCBCh-8214CCD0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214CCD0h
// Function '?BuildConstantDescription@ConstantRenumberingTable@XGRAPHICS@@QAAXPAU_D3DXCONSTANT_DESC@@PBU_D3DXSHADER_CONSTANTTABLE@@PBU_D3DXSHADER_CONSTANTINFO@@PBU_D3DXSHADER_TYPEINFO@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CCD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CCD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CCD0);
		  /* 8214CCD0h */ case    0:  		/* mtspr LR, R12 */
		/* 8214CCD0h case    0:*/		regs.LR = regs.R12;
		/* 8214CCD0h case    0:*/		return 0x8214CCD4;
		  /* 8214CCD4h */ case    1:  		/* ld R30, <#[R1 - 24]> */
		/* 8214CCD4h case    1:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8214CCD4h case    1:*/		return 0x8214CCD8;
		  /* 8214CCD8h */ case    2:  		/* ld R31, <#[R1 - 16]> */
		/* 8214CCD8h case    2:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214CCD8h case    2:*/		return 0x8214CCDC;
		  /* 8214CCDCh */ case    3:  		/* bclr 20, CR0_LT */
		/* 8214CCDCh case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214CCDCh case    3:*/		return 0x8214CCE0;
	}
	return 0x8214CCE0;
} // Block from 8214CCD0h-8214CCE0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214CCE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CCE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CCE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CCE0);
		  /* 8214CCE0h */ case    0:  		/* mfspr R12, LR */
		/* 8214CCE0h case    0:*/		regs.R12 = regs.LR;
		/* 8214CCE0h case    0:*/		return 0x8214CCE4;
		  /* 8214CCE4h */ case    1:  		/* bl -768696 */
		/* 8214CCE4h case    1:*/		regs.LR = 0x8214CCE8; return 0x8209122C;
		/* 8214CCE4h case    1:*/		return 0x8214CCE8;
		  /* 8214CCE8h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 8214CCE8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 8214CCE8h case    2:*/		return 0x8214CCEC;
		  /* 8214CCECh */ case    3:  		/* mr R26, R3 */
		/* 8214CCECh case    3:*/		regs.R26 = regs.R3;
		/* 8214CCECh case    3:*/		return 0x8214CCF0;
		  /* 8214CCF0h */ case    4:  		/* mr R29, R4 */
		/* 8214CCF0h case    4:*/		regs.R29 = regs.R4;
		/* 8214CCF0h case    4:*/		return 0x8214CCF4;
		  /* 8214CCF4h */ case    5:  		/* mr R19, R5 */
		/* 8214CCF4h case    5:*/		regs.R19 = regs.R5;
		/* 8214CCF4h case    5:*/		return 0x8214CCF8;
		  /* 8214CCF8h */ case    6:  		/* mr R18, R6 */
		/* 8214CCF8h case    6:*/		regs.R18 = regs.R6;
		/* 8214CCF8h case    6:*/		return 0x8214CCFC;
		  /* 8214CCFCh */ case    7:  		/* mr R25, R8 */
		/* 8214CCFCh case    7:*/		regs.R25 = regs.R8;
		/* 8214CCFCh case    7:*/		return 0x8214CD00;
		  /* 8214CD00h */ case    8:  		/* rlwinm. R11, R7, 0, 24, 31 */
		/* 8214CD00h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R7);
		/* 8214CD00h case    8:*/		return 0x8214CD04;
		  /* 8214CD04h */ case    9:  		/* li R17, 1 */
		/* 8214CD04h case    9:*/		cpu::op::li<0>(regs,&regs.R17,0x1);
		/* 8214CD04h case    9:*/		return 0x8214CD08;
		  /* 8214CD08h */ case   10:  		/* li R27, -1 */
		/* 8214CD08h case   10:*/		cpu::op::li<0>(regs,&regs.R27,0xFFFFFFFF);
		/* 8214CD08h case   10:*/		return 0x8214CD0C;
		  /* 8214CD0Ch */ case   11:  		/* bc 12, CR0_EQ, 232 */
		/* 8214CD0Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x8214CDF4;  }
		/* 8214CD0Ch case   11:*/		return 0x8214CD10;
		  /* 8214CD10h */ case   12:  		/* mr R28, R27 */
		/* 8214CD10h case   12:*/		regs.R28 = regs.R27;
		/* 8214CD10h case   12:*/		return 0x8214CD14;
		  /* 8214CD14h */ case   13:  		/* li R30, 0 */
		/* 8214CD14h case   13:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8214CD14h case   13:*/		return 0x8214CD18;
		  /* 8214CD18h */ case   14:  		/* cmplwi CR6, R4, 0 */
		/* 8214CD18h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8214CD18h case   14:*/		return 0x8214CD1C;
		  /* 8214CD1Ch */ case   15:  		/* bc 12, CR6_EQ, 216 */
		/* 8214CD1Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x8214CDF4;  }
		/* 8214CD1Ch case   15:*/		return 0x8214CD20;
		  /* 8214CD20h */ case   16:  		/* cmplw CR6, R30, R28 */
		/* 8214CD20h case   16:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R28);
		/* 8214CD20h case   16:*/		return 0x8214CD24;
		  /* 8214CD24h */ case   17:  		/* bc 4, CR6_LT, 208 */
		/* 8214CD24h case   17:*/		if ( !regs.CR[6].lt ) { return 0x8214CDF4;  }
		/* 8214CD24h case   17:*/		return 0x8214CD28;
		  /* 8214CD28h */ case   18:  		/* li R11, 6 */
		/* 8214CD28h case   18:*/		cpu::op::li<0>(regs,&regs.R11,0x6);
		/* 8214CD28h case   18:*/		return 0x8214CD2C;
		  /* 8214CD2Ch */ case   19:  		/* addi R10, R1, 96 */
		/* 8214CD2Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 8214CD2Ch case   19:*/		return 0x8214CD30;
		  /* 8214CD30h */ case   20:  		/* divwu R7, R30, R11 */
		/* 8214CD30h case   20:*/		cpu::op::divwu<0>(regs,&regs.R7,regs.R30,regs.R11);
		/* 8214CD30h case   20:*/		return 0x8214CD34;
		  /* 8214CD34h */ case   21:  		/* rlwinm R11, R7, 31, 1, 31 */
		/* 8214CD34h case   21:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R11,regs.R7);
		/* 8214CD34h case   21:*/		return 0x8214CD38;
		  /* 8214CD38h */ case   22:  		/* rlwinm R9, R7, 3, 28, 28 */
		/* 8214CD38h case   22:*/		cpu::op::rlwinm<0,3,28,28>(regs,&regs.R9,regs.R7);
		/* 8214CD38h case   22:*/		return 0x8214CD3C;
		  /* 8214CD3Ch */ case   23:  		/* mulli R11, R11, 12 */
		/* 8214CD3Ch case   23:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 8214CD3Ch case   23:*/		return 0x8214CD40;
	}
	return 0x8214CD40;
} // Block from 8214CCE0h-8214CD40h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8214CD40h
// Function '?RecordConstantTableEntries@ConstantRenumberingTable@XGRAPHICS@@QAAXPAUID3DXConstantTable@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CD40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CD40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CD40);
		  /* 8214CD40h */ case    0:  		/* lwzx R8, <#[R11 + R26]> */
		/* 8214CD40h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 8214CD40h case    0:*/		return 0x8214CD44;
		  /* 8214CD44h */ case    1:  		/* add R31, R11, R26 */
		/* 8214CD44h case    1:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R26);
		/* 8214CD44h case    1:*/		return 0x8214CD48;
		  /* 8214CD48h */ case    2:  		/* add R3, R9, R10 */
		/* 8214CD48h case    2:*/		cpu::op::add<0>(regs,&regs.R3,regs.R9,regs.R10);
		/* 8214CD48h case    2:*/		return 0x8214CD4C;
		  /* 8214CD4Ch */ case    3:  		/* stw R8, <#[R1 + 96]> */
		/* 8214CD4Ch case    3:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000060) );
		/* 8214CD4Ch case    3:*/		return 0x8214CD50;
		  /* 8214CD50h */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 8214CD50h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214CD50h case    4:*/		return 0x8214CD54;
		  /* 8214CD54h */ case    5:  		/* lwz R10, <#[R31 + 8]> */
		/* 8214CD54h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8214CD54h case    5:*/		return 0x8214CD58;
		  /* 8214CD58h */ case    6:  		/* rlwinm R9, R11, 16, 16, 31 */
		/* 8214CD58h case    6:*/		cpu::op::rlwinm<0,16,16,31>(regs,&regs.R9,regs.R11);
		/* 8214CD58h case    6:*/		return 0x8214CD5C;
		  /* 8214CD5Ch */ case    7:  		/* rlwinm R8, R10, 16, 0, 15 */
		/* 8214CD5Ch case    7:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R8,regs.R10);
		/* 8214CD5Ch case    7:*/		return 0x8214CD60;
		  /* 8214CD60h */ case    8:  		/* rlwinm R11, R11, 0, 16, 31 */
		/* 8214CD60h case    8:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R11);
		/* 8214CD60h case    8:*/		return 0x8214CD64;
		  /* 8214CD64h */ case    9:  		/* or R9, R8, R9 */
		/* 8214CD64h case    9:*/		cpu::op::or<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 8214CD64h case    9:*/		return 0x8214CD68;
		  /* 8214CD68h */ case   10:  		/* rlwinm R10, R10, 16, 16, 31 */
		/* 8214CD68h case   10:*/		cpu::op::rlwinm<0,16,16,31>(regs,&regs.R10,regs.R10);
		/* 8214CD68h case   10:*/		return 0x8214CD6C;
		  /* 8214CD6Ch */ case   11:  		/* stw R11, <#[R1 + 100]> */
		/* 8214CD6Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 8214CD6Ch case   11:*/		return 0x8214CD70;
		  /* 8214CD70h */ case   12:  		/* stw R9, <#[R1 + 104]> */
		/* 8214CD70h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000068) );
		/* 8214CD70h case   12:*/		return 0x8214CD74;
		  /* 8214CD74h */ case   13:  		/* stw R10, <#[R1 + 108]> */
		/* 8214CD74h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000006C) );
		/* 8214CD74h case   13:*/		return 0x8214CD78;
		  /* 8214CD78h */ case   14:  		/* lwz R11, <#[R3 + 4]> */
		/* 8214CD78h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8214CD78h case   14:*/		return 0x8214CD7C;
		  /* 8214CD7Ch */ case   15:  		/* rlwinm R11, R11, 20, 28, 31 */
		/* 8214CD7Ch case   15:*/		cpu::op::rlwinm<0,20,28,31>(regs,&regs.R11,regs.R11);
		/* 8214CD7Ch case   15:*/		return 0x8214CD80;
		  /* 8214CD80h */ case   16:  		/* slw R11, R17, R11 */
		/* 8214CD80h case   16:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R17,regs.R11);
		/* 8214CD80h case   16:*/		return 0x8214CD84;
		  /* 8214CD84h */ case   17:  		/* andi. R11, R11, 24702 */
		/* 8214CD84h case   17:*/		cpu::op::andi<1>(regs,&regs.R11,regs.R11,0x607E);
		/* 8214CD84h case   17:*/		return 0x8214CD88;
		  /* 8214CD88h */ case   18:  		/* cmplwi CR0, R11, 0 */
		/* 8214CD88h case   18:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8214CD88h case   18:*/		return 0x8214CD8C;
		  /* 8214CD8Ch */ case   19:  		/* bc 12, CR0_EQ, 24 */
		/* 8214CD8Ch case   19:*/		if ( regs.CR[0].eq ) { return 0x8214CDA4;  }
		/* 8214CD8Ch case   19:*/		return 0x8214CD90;
		  /* 8214CD90h */ case   20:  		/* cmpwi CR6, R28, -1 */
		/* 8214CD90h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R28,0xFFFFFFFF);
		/* 8214CD90h case   20:*/		return 0x8214CD94;
		  /* 8214CD94h */ case   21:  		/* bc 4, CR6_EQ, 16 */
		/* 8214CD94h case   21:*/		if ( !regs.CR[6].eq ) { return 0x8214CDA4;  }
		/* 8214CD94h case   21:*/		return 0x8214CD98;
		  /* 8214CD98h */ case   22:  		/* lwz R11, <#[R3]> */
		/* 8214CD98h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8214CD98h case   22:*/		return 0x8214CD9C;
		  /* 8214CD9Ch */ case   23:  		/* rlwinm R11, R11, 0, 20, 31 */
		/* 8214CD9Ch case   23:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R11,regs.R11);
		/* 8214CD9Ch case   23:*/		return 0x8214CDA0;
		  /* 8214CDA0h */ case   24:  		/* mulli R28, R11, 12 */
		/* 8214CDA0h case   24:*/		cpu::op::mulli<0>(regs,&regs.R28,regs.R11,0xC);
		/* 8214CDA0h case   24:*/		return 0x8214CDA4;
	}
	return 0x8214CDA4;
} // Block from 8214CD40h-8214CDA4h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8214CDA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CDA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CDA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CDA4);
		  /* 8214CDA4h */ case    0:  		/* mr R8, R18 */
		/* 8214CDA4h case    0:*/		regs.R8 = regs.R18;
		/* 8214CDA4h case    0:*/		return 0x8214CDA8;
		  /* 8214CDA8h */ case    1:  		/* mtspr CTR, R19 */
		/* 8214CDA8h case    1:*/		regs.CTR = regs.R19;
		/* 8214CDA8h case    1:*/		return 0x8214CDAC;
		  /* 8214CDACh */ case    2:  		/* li R6, 0 */
		/* 8214CDACh case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8214CDACh case    2:*/		return 0x8214CDB0;
		  /* 8214CDB0h */ case    3:  		/* li R5, 0 */
		/* 8214CDB0h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8214CDB0h case    3:*/		return 0x8214CDB4;
		  /* 8214CDB4h */ case    4:  		/* li R4, 0 */
		/* 8214CDB4h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214CDB4h case    4:*/		return 0x8214CDB8;
		  /* 8214CDB8h */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 8214CDB8h case    5:*/		if ( 1 ) { regs.LR = 0x8214CDBC; return (uint32)regs.CTR; }
		/* 8214CDB8h case    5:*/		return 0x8214CDBC;
		  /* 8214CDBCh */ case    6:  		/* lwz R11, <#[R1 + 104]> */
		/* 8214CDBCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 8214CDBCh case    6:*/		return 0x8214CDC0;
		  /* 8214CDC0h */ case    7:  		/* lwz R9, <#[R1 + 108]> */
		/* 8214CDC0h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x0000006C) );
		/* 8214CDC0h case    7:*/		return 0x8214CDC4;
		  /* 8214CDC4h */ case    8:  		/* addi R30, R30, 6 */
		/* 8214CDC4h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x6);
		/* 8214CDC4h case    8:*/		return 0x8214CDC8;
		  /* 8214CDC8h */ case    9:  		/* lwz R8, <#[R1 + 100]> */
		/* 8214CDC8h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000064) );
		/* 8214CDC8h case    9:*/		return 0x8214CDCC;
		  /* 8214CDCCh */ case   10:  		/* rlwinm R10, R11, 16, 16, 31 */
		/* 8214CDCCh case   10:*/		cpu::op::rlwinm<0,16,16,31>(regs,&regs.R10,regs.R11);
		/* 8214CDCCh case   10:*/		return 0x8214CDD0;
		  /* 8214CDD0h */ case   11:  		/* lwz R7, <#[R1 + 96]> */
		/* 8214CDD0h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000060) );
		/* 8214CDD0h case   11:*/		return 0x8214CDD4;
		  /* 8214CDD4h */ case   12:  		/* rlwinm R9, R9, 16, 0, 15 */
		/* 8214CDD4h case   12:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R9,regs.R9);
		/* 8214CDD4h case   12:*/		return 0x8214CDD8;
		  /* 8214CDD8h */ case   13:  		/* rlwimi R8, R11, 16, 0, 15 */
		/* 8214CDD8h case   13:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R8,regs.R11);
		/* 8214CDD8h case   13:*/		return 0x8214CDDC;
		  /* 8214CDDCh */ case   14:  		/* or R11, R9, R10 */
		/* 8214CDDCh case   14:*/		cpu::op::or<0>(regs,&regs.R11,regs.R9,regs.R10);
		/* 8214CDDCh case   14:*/		return 0x8214CDE0;
		  /* 8214CDE0h */ case   15:  		/* cmplw CR6, R30, R29 */
		/* 8214CDE0h case   15:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 8214CDE0h case   15:*/		return 0x8214CDE4;
		  /* 8214CDE4h */ case   16:  		/* stw R8, <#[R31 + 4]> */
		/* 8214CDE4h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000004) );
		/* 8214CDE4h case   16:*/		return 0x8214CDE8;
		  /* 8214CDE8h */ case   17:  		/* stw R11, <#[R31 + 8]> */
		/* 8214CDE8h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8214CDE8h case   17:*/		return 0x8214CDEC;
		  /* 8214CDECh */ case   18:  		/* stw R7, <#[R31]> */
		/* 8214CDECh case   18:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x00000000) );
		/* 8214CDECh case   18:*/		return 0x8214CDF0;
	}
	return 0x8214CDF0;
} // Block from 8214CDA4h-8214CDF0h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8214CDF0h
// Function '?Renumber@ConstantRenumberingTable@XGRAPHICS@@QAAKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CDF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CDF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CDF0);
		  /* 8214CDF0h */ case    0:  		/* bc 12, CR6_LT, -208 */
		/* 8214CDF0h case    0:*/		if ( regs.CR[6].lt ) { return 0x8214CD20;  }
		/* 8214CDF0h case    0:*/		return 0x8214CDF4;
	}
	return 0x8214CDF4;
} // Block from 8214CDF0h-8214CDF4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214CDF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CDF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CDF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CDF4);
		  /* 8214CDF4h */ case    0:  		/* rlwinm. R11, R25, 0, 24, 31 */
		/* 8214CDF4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R25);
		/* 8214CDF4h case    0:*/		return 0x8214CDF8;
		  /* 8214CDF8h */ case    1:  		/* bc 12, CR0_EQ, 316 */
		/* 8214CDF8h case    1:*/		if ( regs.CR[0].eq ) { return 0x8214CF34;  }
		/* 8214CDF8h case    1:*/		return 0x8214CDFC;
		  /* 8214CDFCh */ case    2:  		/* lwz R24, <#[R1 + 80]> */
		/* 8214CDFCh case    2:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000050) );
		/* 8214CDFCh case    2:*/		return 0x8214CE00;
		  /* 8214CE00h */ case    3:  		/* mr R23, R27 */
		/* 8214CE00h case    3:*/		regs.R23 = regs.R27;
		/* 8214CE00h case    3:*/		return 0x8214CE04;
		  /* 8214CE04h */ case    4:  		/* add R21, R26, R29 */
		/* 8214CE04h case    4:*/		cpu::op::add<0>(regs,&regs.R21,regs.R26,regs.R29);
		/* 8214CE04h case    4:*/		return 0x8214CE08;
		  /* 8214CE08h */ case    5:  		/* li R25, -1 */
		/* 8214CE08h case    5:*/		cpu::op::li<0>(regs,&regs.R25,0xFFFFFFFF);
		/* 8214CE08h case    5:*/		return 0x8214CE0C;
		  /* 8214CE0Ch */ case    6:  		/* li R20, 0 */
		/* 8214CE0Ch case    6:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 8214CE0Ch case    6:*/		return 0x8214CE10;
		  /* 8214CE10h */ case    7:  		/* mr R22, R26 */
		/* 8214CE10h case    7:*/		regs.R22 = regs.R26;
		/* 8214CE10h case    7:*/		return 0x8214CE14;
		  /* 8214CE14h */ case    8:  		/* cmplw CR6, R26, R21 */
		/* 8214CE14h case    8:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R21);
		/* 8214CE14h case    8:*/		return 0x8214CE18;
		  /* 8214CE18h */ case    9:  		/* bc 4, CR6_LT, 284 */
		/* 8214CE18h case    9:*/		if ( !regs.CR[6].lt ) { return 0x8214CF34;  }
		/* 8214CE18h case    9:*/		return 0x8214CE1C;
		  /* 8214CE1Ch */ case   10:  		/* addi R25, R25, 1 */
		/* 8214CE1Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 8214CE1Ch case   10:*/		return 0x8214CE20;
		  /* 8214CE20h */ case   11:  		/* srawi R11, R25, 1 */
		/* 8214CE20h case   11:*/		cpu::op::srawi<0,1>(regs,&regs.R11,regs.R25);
		/* 8214CE20h case   11:*/		return 0x8214CE24;
		  /* 8214CE24h */ case   12:  		/* addze R11, R11 */
		/* 8214CE24h case   12:*/		cpu::op::addze<0>(regs,&regs.R11,regs.R11);
		/* 8214CE24h case   12:*/		return 0x8214CE28;
		  /* 8214CE28h */ case   13:  		/* cmplw CR6, R11, R23 */
		/* 8214CE28h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 8214CE28h case   13:*/		return 0x8214CE2C;
		  /* 8214CE2Ch */ case   14:  		/* bc 12, CR6_EQ, 256 */
		/* 8214CE2Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x8214CF2C;  }
		/* 8214CE2Ch case   14:*/		return 0x8214CE30;
		  /* 8214CE30h */ case   15:  		/* mulli R11, R11, 12 */
		/* 8214CE30h case   15:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 8214CE30h case   15:*/		return 0x8214CE34;
		  /* 8214CE34h */ case   16:  		/* add R11, R11, R26 */
		/* 8214CE34h case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 8214CE34h case   16:*/		return 0x8214CE38;
		  /* 8214CE38h */ case   17:  		/* rlwinm R10, R25, 3, 28, 28 */
		/* 8214CE38h case   17:*/		cpu::op::rlwinm<0,3,28,28>(regs,&regs.R10,regs.R25);
		/* 8214CE38h case   17:*/		return 0x8214CE3C;
		  /* 8214CE3Ch */ case   18:  		/* addi R9, R1, 112 */
		/* 8214CE3Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 8214CE3Ch case   18:*/		return 0x8214CE40;
		  /* 8214CE40h */ case   19:  		/* add R31, R10, R9 */
		/* 8214CE40h case   19:*/		cpu::op::add<0>(regs,&regs.R31,regs.R10,regs.R9);
		/* 8214CE40h case   19:*/		return 0x8214CE44;
		  /* 8214CE44h */ case   20:  		/* lwz R10, <#[R11 + 4]> */
		/* 8214CE44h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8214CE44h case   20:*/		return 0x8214CE48;
		  /* 8214CE48h */ case   21:  		/* lwz R9, <#[R11 + 8]> */
		/* 8214CE48h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 8214CE48h case   21:*/		return 0x8214CE4C;
		  /* 8214CE4Ch */ case   22:  		/* lwz R11, <#[R11]> */
		/* 8214CE4Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8214CE4Ch case   22:*/		return 0x8214CE50;
		  /* 8214CE50h */ case   23:  		/* rlwinm R8, R10, 16, 16, 31 */
		/* 8214CE50h case   23:*/		cpu::op::rlwinm<0,16,16,31>(regs,&regs.R8,regs.R10);
		/* 8214CE50h case   23:*/		return 0x8214CE54;
		  /* 8214CE54h */ case   24:  		/* rlwinm R7, R9, 16, 0, 15 */
		/* 8214CE54h case   24:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R7,regs.R9);
		/* 8214CE54h case   24:*/		return 0x8214CE58;
		  /* 8214CE58h */ case   25:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 8214CE58h case   25:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 8214CE58h case   25:*/		return 0x8214CE5C;
		  /* 8214CE5Ch */ case   26:  		/* or R8, R7, R8 */
		/* 8214CE5Ch case   26:*/		cpu::op::or<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 8214CE5Ch case   26:*/		return 0x8214CE60;
		  /* 8214CE60h */ case   27:  		/* rlwinm R9, R9, 16, 16, 31 */
		/* 8214CE60h case   27:*/		cpu::op::rlwinm<0,16,16,31>(regs,&regs.R9,regs.R9);
		/* 8214CE60h case   27:*/		return 0x8214CE64;
		  /* 8214CE64h */ case   28:  		/* stw R10, <#[R1 + 116]> */
		/* 8214CE64h case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000074) );
		/* 8214CE64h case   28:*/		return 0x8214CE68;
		  /* 8214CE68h */ case   29:  		/* stw R11, <#[R1 + 112]> */
		/* 8214CE68h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 8214CE68h case   29:*/		return 0x8214CE6C;
		  /* 8214CE6Ch */ case   30:  		/* stw R8, <#[R1 + 120]> */
		/* 8214CE6Ch case   30:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000078) );
		/* 8214CE6Ch case   30:*/		return 0x8214CE70;
		  /* 8214CE70h */ case   31:  		/* stw R9, <#[R1 + 124]> */
		/* 8214CE70h case   31:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000007C) );
		/* 8214CE70h case   31:*/		return 0x8214CE74;
		  /* 8214CE74h */ case   32:  		/* lwz R30, <#[R31 + 4]> */
		/* 8214CE74h case   32:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000004) );
		/* 8214CE74h case   32:*/		return 0x8214CE78;
		  /* 8214CE78h */ case   33:  		/* rlwinm. R11, R30, 0, 20, 20 */
		/* 8214CE78h case   33:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R30);
		/* 8214CE78h case   33:*/		return 0x8214CE7C;
		  /* 8214CE7Ch */ case   34:  		/* bc 12, CR0_EQ, 8 */
		/* 8214CE7Ch case   34:*/		if ( regs.CR[0].eq ) { return 0x8214CE84;  }
		/* 8214CE7Ch case   34:*/		return 0x8214CE80;
		  /* 8214CE80h */ case   35:  		/* bl 1156064 */
		/* 8214CE80h case   35:*/		regs.LR = 0x8214CE84; return 0x82267260;
		/* 8214CE80h case   35:*/		return 0x8214CE84;
	}
	return 0x8214CE84;
} // Block from 8214CDF4h-8214CE84h (36 instructions)

//////////////////////////////////////////////////////
// Block at 8214CE84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CE84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CE84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CE84);
		  /* 8214CE84h */ case    0:  		/* rlwinm R11, R30, 20, 28, 31 */
		/* 8214CE84h case    0:*/		cpu::op::rlwinm<0,20,28,31>(regs,&regs.R11,regs.R30);
		/* 8214CE84h case    0:*/		return 0x8214CE88;
		  /* 8214CE88h */ case    1:  		/* slw R11, R17, R11 */
		/* 8214CE88h case    1:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R17,regs.R11);
		/* 8214CE88h case    1:*/		return 0x8214CE8C;
		  /* 8214CE8Ch */ case    2:  		/* andi. R11, R11, 24702 */
		/* 8214CE8Ch case    2:*/		cpu::op::andi<1>(regs,&regs.R11,regs.R11,0x607E);
		/* 8214CE8Ch case    2:*/		return 0x8214CE90;
	}
	return 0x8214CE90;
} // Block from 8214CE84h-8214CE90h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214CE90h
// Function '?RenumberCompilerLiteralsVisitor@XGRAPHICS@@YAXPAX_N11K0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CE90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CE90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CE90);
		  /* 8214CE90h */ case    0:  		/* cmplwi CR0, R11, 0 */
		/* 8214CE90h case    0:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8214CE90h case    0:*/		return 0x8214CE94;
		  /* 8214CE94h */ case    1:  		/* bc 12, CR0_EQ, 140 */
		/* 8214CE94h case    1:*/		if ( regs.CR[0].eq ) { return 0x8214CF20;  }
		/* 8214CE94h case    1:*/		return 0x8214CE98;
		  /* 8214CE98h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 8214CE98h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214CE98h case    2:*/		return 0x8214CE9C;
		  /* 8214CE9Ch */ case    3:  		/* cmpwi CR6, R23, -1 */
		/* 8214CE9Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R23,0xFFFFFFFF);
		/* 8214CE9Ch case    3:*/		return 0x8214CEA0;
		  /* 8214CEA0h */ case    4:  		/* rlwinm R31, R11, 0, 20, 31 */
		/* 8214CEA0h case    4:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R31,regs.R11);
		/* 8214CEA0h case    4:*/		return 0x8214CEA4;
		  /* 8214CEA4h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 8214CEA4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8214CEB0;  }
		/* 8214CEA4h case    5:*/		return 0x8214CEA8;
		  /* 8214CEA8h */ case    6:  		/* mr R23, R31 */
		/* 8214CEA8h case    6:*/		regs.R23 = regs.R31;
		/* 8214CEA8h case    6:*/		return 0x8214CEAC;
		  /* 8214CEACh */ case    7:  		/* mr R24, R31 */
		/* 8214CEACh case    7:*/		regs.R24 = regs.R31;
		/* 8214CEACh case    7:*/		return 0x8214CEB0;
	}
	return 0x8214CEB0;
} // Block from 8214CE90h-8214CEB0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214CEB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CEB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CEB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CEB0);
		  /* 8214CEB0h */ case    0:  		/* rlwinm R9, R30, 4, 26, 27 */
		/* 8214CEB0h case    0:*/		cpu::op::rlwinm<0,4,26,27>(regs,&regs.R9,regs.R30);
		/* 8214CEB0h case    0:*/		return 0x8214CEB4;
		  /* 8214CEB4h */ case    1:  		/* rlwinm R8, R11, 4, 28, 31 */
		/* 8214CEB4h case    1:*/		cpu::op::rlwinm<0,4,28,31>(regs,&regs.R8,regs.R11);
		/* 8214CEB4h case    1:*/		return 0x8214CEB8;
		  /* 8214CEB8h */ case    2:  		/* mulli R10, R31, 12 */
		/* 8214CEB8h case    2:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R31,0xC);
		/* 8214CEB8h case    2:*/		return 0x8214CEBC;
		  /* 8214CEBCh */ case    3:  		/* rlwinm. R27, R11, 20, 29, 31 */
		/* 8214CEBCh case    3:*/		cpu::op::rlwinm<1,20,29,31>(regs,&regs.R27,regs.R11);
		/* 8214CEBCh case    3:*/		return 0x8214CEC0;
		  /* 8214CEC0h */ case    4:  		/* rlwinm R29, R11, 16, 20, 31 */
		/* 8214CEC0h case    4:*/		cpu::op::rlwinm<0,16,20,31>(regs,&regs.R29,regs.R11);
		/* 8214CEC0h case    4:*/		return 0x8214CEC4;
		  /* 8214CEC4h */ case    5:  		/* or R30, R9, R8 */
		/* 8214CEC4h case    5:*/		cpu::op::or<0>(regs,&regs.R30,regs.R9,regs.R8);
		/* 8214CEC4h case    5:*/		return 0x8214CEC8;
		  /* 8214CEC8h */ case    6:  		/* add R28, R10, R26 */
		/* 8214CEC8h case    6:*/		cpu::op::add<0>(regs,&regs.R28,regs.R10,regs.R26);
		/* 8214CEC8h case    6:*/		return 0x8214CECC;
		  /* 8214CECCh */ case    7:  		/* bc 12, CR0_EQ, 84 */
		/* 8214CECCh case    7:*/		if ( regs.CR[0].eq ) { return 0x8214CF20;  }
		/* 8214CECCh case    7:*/		return 0x8214CED0;
		  /* 8214CED0h */ case    8:  		/* rlwinm R5, R29, 0, 31, 31 */
		/* 8214CED0h case    8:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R5,regs.R29);
		/* 8214CED0h case    8:*/		return 0x8214CED4;
		  /* 8214CED4h */ case    9:  		/* rlwinm R6, R30, 0, 31, 31 */
		/* 8214CED4h case    9:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R6,regs.R30);
		/* 8214CED4h case    9:*/		return 0x8214CED8;
		  /* 8214CED8h */ case   10:  		/* rlwinm R30, R30, 31, 1, 31 */
		/* 8214CED8h case   10:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R30,regs.R30);
		/* 8214CED8h case   10:*/		return 0x8214CEDC;
		  /* 8214CEDCh */ case   11:  		/* rlwinm R29, R29, 30, 2, 31 */
		/* 8214CEDCh case   11:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R29,regs.R29);
		/* 8214CEDCh case   11:*/		return 0x8214CEE0;
		  /* 8214CEE0h */ case   12:  		/* cmplw CR6, R31, R24 */
		/* 8214CEE0h case   12:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R24);
		/* 8214CEE0h case   12:*/		return 0x8214CEE4;
		  /* 8214CEE4h */ case   13:  		/* bc 4, CR6_EQ, 36 */
		/* 8214CEE4h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8214CF08;  }
		/* 8214CEE4h case   13:*/		return 0x8214CEE8;
		  /* 8214CEE8h */ case   14:  		/* mr R8, R18 */
		/* 8214CEE8h case   14:*/		regs.R8 = regs.R18;
		/* 8214CEE8h case   14:*/		return 0x8214CEEC;
		  /* 8214CEECh */ case   15:  		/* mtspr CTR, R19 */
		/* 8214CEECh case   15:*/		regs.CTR = regs.R19;
		/* 8214CEECh case   15:*/		return 0x8214CEF0;
		  /* 8214CEF0h */ case   16:  		/* mr R7, R31 */
		/* 8214CEF0h case   16:*/		regs.R7 = regs.R31;
		/* 8214CEF0h case   16:*/		return 0x8214CEF4;
		  /* 8214CEF4h */ case   17:  		/* li R4, 1 */
		/* 8214CEF4h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8214CEF4h case   17:*/		return 0x8214CEF8;
		  /* 8214CEF8h */ case   18:  		/* mr R3, R28 */
		/* 8214CEF8h case   18:*/		regs.R3 = regs.R28;
		/* 8214CEF8h case   18:*/		return 0x8214CEFC;
		  /* 8214CEFCh */ case   19:  		/* bcctrl 20, CR0_LT */
		/* 8214CEFCh case   19:*/		if ( 1 ) { regs.LR = 0x8214CF00; return (uint32)regs.CTR; }
		/* 8214CEFCh case   19:*/		return 0x8214CF00;
		  /* 8214CF00h */ case   20:  		/* addi R24, R31, 1 */
		/* 8214CF00h case   20:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R31,0x1);
		/* 8214CF00h case   20:*/		return 0x8214CF04;
		  /* 8214CF04h */ case   21:  		/* b 12 */
		/* 8214CF04h case   21:*/		return 0x8214CF10;
		/* 8214CF04h case   21:*/		return 0x8214CF08;
	}
	return 0x8214CF08;
} // Block from 8214CEB0h-8214CF08h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8214CF08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CF08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CF08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CF08);
		  /* 8214CF08h */ case    0:  		/* bc 4, CR6_GT, 8 */
		/* 8214CF08h case    0:*/		if ( !regs.CR[6].gt ) { return 0x8214CF10;  }
		/* 8214CF08h case    0:*/		return 0x8214CF0C;
		  /* 8214CF0Ch */ case    1:  		/* mr R20, R17 */
		/* 8214CF0Ch case    1:*/		regs.R20 = regs.R17;
		/* 8214CF0Ch case    1:*/		return 0x8214CF10;
	}
	return 0x8214CF10;
} // Block from 8214CF08h-8214CF10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214CF10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CF10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CF10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CF10);
		  /* 8214CF10h */ case    0:  		/* addic. R27, R27, -1 */
		/* 8214CF10h case    0:*/		cpu::op::addic<1>(regs,&regs.R27,regs.R27,0xFFFFFFFF);
		/* 8214CF10h case    0:*/		return 0x8214CF14;
		  /* 8214CF14h */ case    1:  		/* addi R28, R28, 12 */
		/* 8214CF14h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0xC);
		/* 8214CF14h case    1:*/		return 0x8214CF18;
		  /* 8214CF18h */ case    2:  		/* addi R31, R31, 1 */
		/* 8214CF18h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8214CF18h case    2:*/		return 0x8214CF1C;
		  /* 8214CF1Ch */ case    3:  		/* bc 4, CR0_EQ, -76 */
		/* 8214CF1Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8214CED0;  }
		/* 8214CF1Ch case    3:*/		return 0x8214CF20;
	}
	return 0x8214CF20;
} // Block from 8214CF10h-8214CF20h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214CF20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CF20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CF20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CF20);
		  /* 8214CF20h */ case    0:  		/* addi R22, R22, 6 */
		/* 8214CF20h case    0:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x6);
		/* 8214CF20h case    0:*/		return 0x8214CF24;
		  /* 8214CF24h */ case    1:  		/* cmplw CR6, R22, R21 */
		/* 8214CF24h case    1:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R21);
		/* 8214CF24h case    1:*/		return 0x8214CF28;
		  /* 8214CF28h */ case    2:  		/* bc 12, CR6_LT, -268 */
		/* 8214CF28h case    2:*/		if ( regs.CR[6].lt ) { return 0x8214CE1C;  }
		/* 8214CF28h case    2:*/		return 0x8214CF2C;
	}
	return 0x8214CF2C;
} // Block from 8214CF20h-8214CF2Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214CF2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CF2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CF2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CF2C);
		  /* 8214CF2Ch */ case    0:  		/* cmpwi CR6, R20, 0 */
		/* 8214CF2Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R20,0x00000000);
		/* 8214CF2Ch case    0:*/		return 0x8214CF30;
		  /* 8214CF30h */ case    1:  		/* bc 4, CR6_EQ, -296 */
		/* 8214CF30h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8214CE08;  }
		/* 8214CF30h case    1:*/		return 0x8214CF34;
	}
	return 0x8214CF34;
} // Block from 8214CF2Ch-8214CF34h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214CF34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CF34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CF34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CF34);
		  /* 8214CF34h */ case    0:  		/* addi R1, R1, 256 */
		/* 8214CF34h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 8214CF34h case    0:*/		return 0x8214CF38;
		  /* 8214CF38h */ case    1:  		/* b -769212 */
		/* 8214CF38h case    1:*/		return 0x8209127C;
		/* 8214CF38h case    1:*/		return 0x8214CF3C;
		  /* 8214CF3Ch */ case    2:  		/* nop */
		/* 8214CF3Ch case    2:*/		cpu::op::nop();
		/* 8214CF3Ch case    2:*/		return 0x8214CF40;
	}
	return 0x8214CF40;
} // Block from 8214CF34h-8214CF40h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214CF40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CF40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CF40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CF40);
		  /* 8214CF40h */ case    0:  		/* mfspr R12, LR */
		/* 8214CF40h case    0:*/		regs.R12 = regs.LR;
		/* 8214CF40h case    0:*/		return 0x8214CF44;
		  /* 8214CF44h */ case    1:  		/* bl -769280 */
		/* 8214CF44h case    1:*/		regs.LR = 0x8214CF48; return 0x82091244;
		/* 8214CF44h case    1:*/		return 0x8214CF48;
		  /* 8214CF48h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8214CF48h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8214CF48h case    2:*/		return 0x8214CF4C;
		  /* 8214CF4Ch */ case    3:  		/* mr R24, R4 */
		/* 8214CF4Ch case    3:*/		regs.R24 = regs.R4;
		/* 8214CF4Ch case    3:*/		return 0x8214CF50;
		  /* 8214CF50h */ case    4:  		/* mr R25, R5 */
		/* 8214CF50h case    4:*/		regs.R25 = regs.R5;
		/* 8214CF50h case    4:*/		return 0x8214CF54;
		  /* 8214CF54h */ case    5:  		/* mr R23, R6 */
		/* 8214CF54h case    5:*/		regs.R23 = regs.R6;
		/* 8214CF54h case    5:*/		return 0x8214CF58;
		  /* 8214CF58h */ case    6:  		/* mr R28, R7 */
		/* 8214CF58h case    6:*/		regs.R28 = regs.R7;
		/* 8214CF58h case    6:*/		return 0x8214CF5C;
		  /* 8214CF5Ch */ case    7:  		/* li R31, 0 */
		/* 8214CF5Ch case    7:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8214CF5Ch case    7:*/		return 0x8214CF60;
		  /* 8214CF60h */ case    8:  		/* li R27, 0 */
		/* 8214CF60h case    8:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8214CF60h case    8:*/		return 0x8214CF64;
		  /* 8214CF64h */ case    9:  		/* bl 68580 */
		/* 8214CF64h case    9:*/		regs.LR = 0x8214CF68; return 0x8215DB48;
		/* 8214CF64h case    9:*/		return 0x8214CF68;
		  /* 8214CF68h */ case   10:  		/* mr R26, R3 */
		/* 8214CF68h case   10:*/		regs.R26 = regs.R3;
		/* 8214CF68h case   10:*/		return 0x8214CF6C;
		  /* 8214CF6Ch */ case   11:  		/* bl 64212 */
		/* 8214CF6Ch case   11:*/		regs.LR = 0x8214CF70; return 0x8215CA40;
		/* 8214CF6Ch case   11:*/		return 0x8214CF70;
		  /* 8214CF70h */ case   12:  		/* b 124 */
		/* 8214CF70h case   12:*/		return 0x8214CFEC;
		/* 8214CF70h case   12:*/		return 0x8214CF74;
		  /* 8214CF74h */ case   13:  		/* mr R3, R29 */
		/* 8214CF74h case   13:*/		regs.R3 = regs.R29;
		/* 8214CF74h case   13:*/		return 0x8214CF78;
		  /* 8214CF78h */ case   14:  		/* bl 65144 */
		/* 8214CF78h case   14:*/		regs.LR = 0x8214CF7C; return 0x8215CDF0;
		/* 8214CF78h case   14:*/		return 0x8214CF7C;
		  /* 8214CF7Ch */ case   15:  		/* lwz R11, <#[R3]> */
		/* 8214CF7Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8214CF7Ch case   15:*/		return 0x8214CF80;
		  /* 8214CF80h */ case   16:  		/* mr R30, R3 */
		/* 8214CF80h case   16:*/		regs.R30 = regs.R3;
		/* 8214CF80h case   16:*/		return 0x8214CF84;
		  /* 8214CF84h */ case   17:  		/* addi R11, R11, -1978 */
		/* 8214CF84h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFF846);
		/* 8214CF84h case   17:*/		return 0x8214CF88;
		  /* 8214CF88h */ case   18:  		/* cmplwi CR6, R11, 13 */
		/* 8214CF88h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000D);
		/* 8214CF88h case   18:*/		return 0x8214CF8C;
		  /* 8214CF8Ch */ case   19:  		/* bc 12, CR6_GT, 80 */
		/* 8214CF8Ch case   19:*/		if ( regs.CR[6].gt ) { return 0x8214CFDC;  }
		/* 8214CF8Ch case   19:*/		return 0x8214CF90;
		  /* 8214CF90h */ case   20:  		/* lis R12, -32253 */
		/* 8214CF90h case   20:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8203);
		/* 8214CF90h case   20:*/		return 0x8214CF94;
		  /* 8214CF94h */ case   21:  		/* addi R12, R12, 28040 */
		/* 8214CF94h case   21:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x6D88);
		/* 8214CF94h case   21:*/		return 0x8214CF98;
		  /* 8214CF98h */ case   22:  		/* lbzx R0, <#[R12 + R11]> */
		/* 8214CF98h case   22:*/		cpu::mem::load8z( regs, &regs.R0, (uint32)(regs.R12 + regs.R11 + 0x00000000) );
		/* 8214CF98h case   22:*/		return 0x8214CF9C;
		  /* 8214CF9Ch */ case   23:  		/* rlwinm R0, R0, 2, 0, 29 */
		/* 8214CF9Ch case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R0,regs.R0);
		/* 8214CF9Ch case   23:*/		return 0x8214CFA0;
		  /* 8214CFA0h */ case   24:  		/* lis R12, -32235 */
		/* 8214CFA0h case   24:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8215);
		/* 8214CFA0h case   24:*/		return 0x8214CFA4;
		  /* 8214CFA4h */ case   25:  		/* ori R0, R0, 0 */
		/* 8214CFA4h case   25:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 8214CFA4h case   25:*/		return 0x8214CFA8;
		  /* 8214CFA8h */ case   26:  		/* addi R12, R12, -12360 */
		/* 8214CFA8h case   26:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFFCFB8);
		/* 8214CFA8h case   26:*/		return 0x8214CFAC;
		  /* 8214CFACh */ case   27:  		/* add R12, R12, R0 */
		/* 8214CFACh case   27:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 8214CFACh case   27:*/		return 0x8214CFB0;
		  /* 8214CFB0h */ case   28:  		/* mtspr CTR, R12 */
		/* 8214CFB0h case   28:*/		regs.CTR = regs.R12;
		/* 8214CFB0h case   28:*/		return 0x8214CFB4;
		  /* 8214CFB4h */ case   29:  		/* bcctr 20, CR0_LT */
		/* 8214CFB4h case   29:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 8214CFB4h case   29:*/		return 0x8214CFB8;
	}
	return 0x8214CFB8;
} // Block from 8214CF40h-8214CFB8h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8214CFB8h
// Function '?ShouldSerialize@FixSerializationContext@XGRAPHICS@@QAA_N_N00PATGPUSHADER_INSTRUCTION@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CFB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CFB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CFB8);
		  /* 8214CFB8h */ case    0:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 8214CFB8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 8214CFB8h case    0:*/		return 0x8214CFBC;
		  /* 8214CFBCh */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 8214CFBCh case    1:*/		if ( regs.CR[0].eq ) { return 0x8214CFC4;  }
		/* 8214CFBCh case    1:*/		return 0x8214CFC0;
		  /* 8214CFC0h */ case    2:  		/* bl 1155744 */
		/* 8214CFC0h case    2:*/		regs.LR = 0x8214CFC4; return 0x82267260;
		/* 8214CFC0h case    2:*/		return 0x8214CFC4;
	}
	return 0x8214CFC4;
} // Block from 8214CFB8h-8214CFC4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214CFC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CFC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CFC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CFC4);
		  /* 8214CFC4h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 8214CFC4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8214CFC4h case    0:*/		return 0x8214CFC8;
		  /* 8214CFC8h */ case    1:  		/* rlwimi R11, R31, 0, 0, 25 */
		/* 8214CFC8h case    1:*/		cpu::op::rlwimi<0,0,0,25>(regs,&regs.R11,regs.R31);
		/* 8214CFC8h case    1:*/		return 0x8214CFCC;
		  /* 8214CFCCh */ case    2:  		/* mr R31, R11 */
		/* 8214CFCCh case    2:*/		regs.R31 = regs.R11;
		/* 8214CFCCh case    2:*/		return 0x8214CFD0;
		  /* 8214CFD0h */ case    3:  		/* b 16 */
		/* 8214CFD0h case    3:*/		return 0x8214CFE0;
		/* 8214CFD0h case    3:*/		return 0x8214CFD4;
		  /* 8214CFD4h */ case    4:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 8214CFD4h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 8214CFD4h case    4:*/		return 0x8214CFD8;
		  /* 8214CFD8h */ case    5:  		/* bc 12, CR0_EQ, 8 */
		/* 8214CFD8h case    5:*/		if ( regs.CR[0].eq ) { return 0x8214CFE0;  }
		/* 8214CFD8h case    5:*/		return 0x8214CFDC;
	}
	return 0x8214CFDC;
} // Block from 8214CFC4h-8214CFDCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214CFDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CFDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CFDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CFDC);
		  /* 8214CFDCh */ case    0:  		/* bl 1155716 */
		/* 8214CFDCh case    0:*/		regs.LR = 0x8214CFE0; return 0x82267260;
		/* 8214CFDCh case    0:*/		return 0x8214CFE0;
	}
	return 0x8214CFE0;
} // Block from 8214CFDCh-8214CFE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214CFE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CFE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CFE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CFE0);
		  /* 8214CFE0h */ case    0:  		/* mr R4, R29 */
		/* 8214CFE0h case    0:*/		regs.R4 = regs.R29;
		/* 8214CFE0h case    0:*/		return 0x8214CFE4;
		  /* 8214CFE4h */ case    1:  		/* mr R3, R26 */
		/* 8214CFE4h case    1:*/		regs.R3 = regs.R26;
		/* 8214CFE4h case    1:*/		return 0x8214CFE8;
		  /* 8214CFE8h */ case    2:  		/* bl 64856 */
		/* 8214CFE8h case    2:*/		regs.LR = 0x8214CFEC; return 0x8215CD40;
		/* 8214CFE8h case    2:*/		return 0x8214CFEC;
	}
	return 0x8214CFEC;
} // Block from 8214CFE0h-8214CFECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214CFECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214CFEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214CFEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214CFEC);
		  /* 8214CFECh */ case    0:  		/* or. R29, R3, R3 */
		/* 8214CFECh case    0:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 8214CFECh case    0:*/		return 0x8214CFF0;
		  /* 8214CFF0h */ case    1:  		/* bc 4, CR0_EQ, -124 */
		/* 8214CFF0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8214CF74;  }
		/* 8214CFF0h case    1:*/		return 0x8214CFF4;
		  /* 8214CFF4h */ case    2:  		/* mr R5, R27 */
		/* 8214CFF4h case    2:*/		regs.R5 = regs.R27;
		/* 8214CFF4h case    2:*/		return 0x8214CFF8;
		  /* 8214CFF8h */ case    3:  		/* mr R4, R31 */
		/* 8214CFF8h case    3:*/		regs.R4 = regs.R31;
		/* 8214CFF8h case    3:*/		return 0x8214CFFC;
		  /* 8214CFFCh */ case    4:  		/* mr R3, R24 */
		/* 8214CFFCh case    4:*/		regs.R3 = regs.R24;
		/* 8214CFFCh case    4:*/		return 0x8214D000;
		  /* 8214D000h */ case    5:  		/* bl -938144 */
		/* 8214D000h case    5:*/		regs.LR = 0x8214D004; return 0x82067F60;
		/* 8214D000h case    5:*/		return 0x8214D004;
		  /* 8214D004h */ case    6:  		/* cmplwi CR6, R25, 0 */
		/* 8214D004h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8214D004h case    6:*/		return 0x8214D008;
		  /* 8214D008h */ case    7:  		/* bc 12, CR6_EQ, 8 */
		/* 8214D008h case    7:*/		if ( regs.CR[6].eq ) { return 0x8214D010;  }
		/* 8214D008h case    7:*/		return 0x8214D00C;
		  /* 8214D00Ch */ case    8:  		/* stw R31, <#[R25]> */
		/* 8214D00Ch case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R25 + 0x00000000) );
		/* 8214D00Ch case    8:*/		return 0x8214D010;
	}
	return 0x8214D010;
} // Block from 8214CFECh-8214D010h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214D010h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D010( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D010) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D010);
		  /* 8214D010h */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 8214D010h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8214D010h case    0:*/		return 0x8214D014;
		  /* 8214D014h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 8214D014h case    1:*/		if ( regs.CR[6].eq ) { return 0x8214D01C;  }
		/* 8214D014h case    1:*/		return 0x8214D018;
		  /* 8214D018h */ case    2:  		/* stw R27, <#[R23]> */
		/* 8214D018h case    2:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R23 + 0x00000000) );
		/* 8214D018h case    2:*/		return 0x8214D01C;
	}
	return 0x8214D01C;
} // Block from 8214D010h-8214D01Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214D01Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D01C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D01C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D01C);
		  /* 8214D01Ch */ case    0:  		/* li R3, 0 */
		/* 8214D01Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214D01Ch case    0:*/		return 0x8214D020;
		  /* 8214D020h */ case    1:  		/* addi R1, R1, 160 */
		/* 8214D020h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8214D020h case    1:*/		return 0x8214D024;
		  /* 8214D024h */ case    2:  		/* b -769424 */
		/* 8214D024h case    2:*/		return 0x82091294;
		/* 8214D024h case    2:*/		return 0x8214D028;
		  /* 8214D028h */ case    3:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 8214D028h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 8214D028h case    3:*/		return 0x8214D02C;
		  /* 8214D02Ch */ case    4:  		/* bc 12, CR0_EQ, 8 */
		/* 8214D02Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x8214D034;  }
		/* 8214D02Ch case    4:*/		return 0x8214D030;
		  /* 8214D030h */ case    5:  		/* bl 1155632 */
		/* 8214D030h case    5:*/		regs.LR = 0x8214D034; return 0x82267260;
		/* 8214D030h case    5:*/		return 0x8214D034;
	}
	return 0x8214D034;
} // Block from 8214D01Ch-8214D034h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214D034h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D034( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D034) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D034);
		  /* 8214D034h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 8214D034h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8214D034h case    0:*/		return 0x8214D038;
		  /* 8214D038h */ case    1:  		/* rlwimi R31, R11, 20, 8, 11 */
		/* 8214D038h case    1:*/		cpu::op::rlwimi<0,20,8,11>(regs,&regs.R31,regs.R11);
		/* 8214D038h case    1:*/		return 0x8214D03C;
		  /* 8214D03Ch */ case    2:  		/* b -92 */
		/* 8214D03Ch case    2:*/		return 0x8214CFE0;
		/* 8214D03Ch case    2:*/		return 0x8214D040;
		  /* 8214D040h */ case    3:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 8214D040h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 8214D040h case    3:*/		return 0x8214D044;
		  /* 8214D044h */ case    4:  		/* bc 12, CR0_EQ, 8 */
		/* 8214D044h case    4:*/		if ( regs.CR[0].eq ) { return 0x8214D04C;  }
		/* 8214D044h case    4:*/		return 0x8214D048;
		  /* 8214D048h */ case    5:  		/* bl 1155608 */
		/* 8214D048h case    5:*/		regs.LR = 0x8214D04C; return 0x82267260;
		/* 8214D048h case    5:*/		return 0x8214D04C;
	}
	return 0x8214D04C;
} // Block from 8214D034h-8214D04Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214D04Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D04C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D04C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D04C);
		  /* 8214D04Ch */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 8214D04Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8214D04Ch case    0:*/		return 0x8214D050;
		  /* 8214D050h */ case    1:  		/* rlwimi R31, R11, 24, 5, 7 */
		/* 8214D050h case    1:*/		cpu::op::rlwimi<0,24,5,7>(regs,&regs.R31,regs.R11);
		/* 8214D050h case    1:*/		return 0x8214D054;
		  /* 8214D054h */ case    2:  		/* b -116 */
		/* 8214D054h case    2:*/		return 0x8214CFE0;
		/* 8214D054h case    2:*/		return 0x8214D058;
		  /* 8214D058h */ case    3:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 8214D058h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 8214D058h case    3:*/		return 0x8214D05C;
		  /* 8214D05Ch */ case    4:  		/* bc 12, CR0_EQ, 8 */
		/* 8214D05Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x8214D064;  }
		/* 8214D05Ch case    4:*/		return 0x8214D060;
		  /* 8214D060h */ case    5:  		/* bl 1155584 */
		/* 8214D060h case    5:*/		regs.LR = 0x8214D064; return 0x82267260;
		/* 8214D060h case    5:*/		return 0x8214D064;
	}
	return 0x8214D064;
} // Block from 8214D04Ch-8214D064h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214D064h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D064( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D064) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D064);
		  /* 8214D064h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 8214D064h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8214D064h case    0:*/		return 0x8214D068;
		  /* 8214D068h */ case    1:  		/* rlwimi R31, R11, 31, 0, 0 */
		/* 8214D068h case    1:*/		cpu::op::rlwimi<0,31,0,0>(regs,&regs.R31,regs.R11);
		/* 8214D068h case    1:*/		return 0x8214D06C;
		  /* 8214D06Ch */ case    2:  		/* b -140 */
		/* 8214D06Ch case    2:*/		return 0x8214CFE0;
		/* 8214D06Ch case    2:*/		return 0x8214D070;
		  /* 8214D070h */ case    3:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 8214D070h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 8214D070h case    3:*/		return 0x8214D074;
		  /* 8214D074h */ case    4:  		/* bc 4, CR0_EQ, 8 */
		/* 8214D074h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8214D07C;  }
		/* 8214D074h case    4:*/		return 0x8214D078;
		  /* 8214D078h */ case    5:  		/* bl 1155560 */
		/* 8214D078h case    5:*/		regs.LR = 0x8214D07C; return 0x82267260;
		/* 8214D078h case    5:*/		return 0x8214D07C;
	}
	return 0x8214D07C;
} // Block from 8214D064h-8214D07Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214D07Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D07C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D07C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D07C);
		  /* 8214D07Ch */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 8214D07Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8214D07Ch case    0:*/		return 0x8214D080;
		  /* 8214D080h */ case    1:  		/* rlwimi R31, R11, 8, 18, 23 */
		/* 8214D080h case    1:*/		cpu::op::rlwimi<0,8,18,23>(regs,&regs.R31,regs.R11);
		/* 8214D080h case    1:*/		return 0x8214D084;
		  /* 8214D084h */ case    2:  		/* b -164 */
		/* 8214D084h case    2:*/		return 0x8214CFE0;
		/* 8214D084h case    2:*/		return 0x8214D088;
		  /* 8214D088h */ case    3:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 8214D088h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 8214D088h case    3:*/		return 0x8214D08C;
		  /* 8214D08Ch */ case    4:  		/* bc 4, CR0_EQ, -172 */
		/* 8214D08Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x8214CFE0;  }
		/* 8214D08Ch case    4:*/		return 0x8214D090;
	}
	return 0x8214D090;
} // Block from 8214D07Ch-8214D090h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214D090h
// Function '?ThreadSafeSSMPrecompileShader@XGRAPHICS@@YI?AW4_E_SSM_RETURNCODE@1@IPAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D090( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D090) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D090);
		  /* 8214D090h */ case    0:  		/* b -180 */
		/* 8214D090h case    0:*/		return 0x8214CFDC;
		/* 8214D090h case    0:*/		return 0x8214D094;
		  /* 8214D094h */ case    1:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 8214D094h case    1:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 8214D094h case    1:*/		return 0x8214D098;
		  /* 8214D098h */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 8214D098h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8214D0A0;  }
		/* 8214D098h case    2:*/		return 0x8214D09C;
		  /* 8214D09Ch */ case    3:  		/* bl 1155524 */
		/* 8214D09Ch case    3:*/		regs.LR = 0x8214D0A0; return 0x82267260;
		/* 8214D09Ch case    3:*/		return 0x8214D0A0;
	}
	return 0x8214D0A0;
} // Block from 8214D090h-8214D0A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214D0A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D0A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D0A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D0A0);
		  /* 8214D0A0h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 8214D0A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8214D0A0h case    0:*/		return 0x8214D0A4;
		  /* 8214D0A4h */ case    1:  		/* rlwimi R31, R11, 18, 13, 13 */
		/* 8214D0A4h case    1:*/		cpu::op::rlwimi<0,18,13,13>(regs,&regs.R31,regs.R11);
		/* 8214D0A4h case    1:*/		return 0x8214D0A8;
		  /* 8214D0A8h */ case    2:  		/* b -200 */
		/* 8214D0A8h case    2:*/		return 0x8214CFE0;
		/* 8214D0A8h case    2:*/		return 0x8214D0AC;
		  /* 8214D0ACh */ case    3:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 8214D0ACh case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 8214D0ACh case    3:*/		return 0x8214D0B0;
		  /* 8214D0B0h */ case    4:  		/* bc 4, CR0_EQ, 8 */
		/* 8214D0B0h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8214D0B8;  }
		/* 8214D0B0h case    4:*/		return 0x8214D0B4;
		  /* 8214D0B4h */ case    5:  		/* bl 1155500 */
		/* 8214D0B4h case    5:*/		regs.LR = 0x8214D0B8; return 0x82267260;
		/* 8214D0B4h case    5:*/		return 0x8214D0B8;
	}
	return 0x8214D0B8;
} // Block from 8214D0A0h-8214D0B8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214D0B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D0B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D0B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D0B8);
		  /* 8214D0B8h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 8214D0B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8214D0B8h case    0:*/		return 0x8214D0BC;
		  /* 8214D0BCh */ case    1:  		/* rlwimi R31, R11, 19, 12, 12 */
		/* 8214D0BCh case    1:*/		cpu::op::rlwimi<0,19,12,12>(regs,&regs.R31,regs.R11);
		/* 8214D0BCh case    1:*/		return 0x8214D0C0;
		  /* 8214D0C0h */ case    2:  		/* b -224 */
		/* 8214D0C0h case    2:*/		return 0x8214CFE0;
		/* 8214D0C0h case    2:*/		return 0x8214D0C4;
		  /* 8214D0C4h */ case    3:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 8214D0C4h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 8214D0C4h case    3:*/		return 0x8214D0C8;
		  /* 8214D0C8h */ case    4:  		/* bc 4, CR0_EQ, 8 */
		/* 8214D0C8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8214D0D0;  }
		/* 8214D0C8h case    4:*/		return 0x8214D0CC;
		  /* 8214D0CCh */ case    5:  		/* bl 1155476 */
		/* 8214D0CCh case    5:*/		regs.LR = 0x8214D0D0; return 0x82267260;
		/* 8214D0CCh case    5:*/		return 0x8214D0D0;
	}
	return 0x8214D0D0;
} // Block from 8214D0B8h-8214D0D0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214D0D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D0D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D0D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D0D0);
		  /* 8214D0D0h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 8214D0D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8214D0D0h case    0:*/		return 0x8214D0D4;
		  /* 8214D0D4h */ case    1:  		/* rlwimi R31, R11, 27, 1, 4 */
		/* 8214D0D4h case    1:*/		cpu::op::rlwimi<0,27,1,4>(regs,&regs.R31,regs.R11);
		/* 8214D0D4h case    1:*/		return 0x8214D0D8;
		  /* 8214D0D8h */ case    2:  		/* b -248 */
		/* 8214D0D8h case    2:*/		return 0x8214CFE0;
		/* 8214D0D8h case    2:*/		return 0x8214D0DC;
		  /* 8214D0DCh */ case    3:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 8214D0DCh case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 8214D0DCh case    3:*/		return 0x8214D0E0;
		  /* 8214D0E0h */ case    4:  		/* bc 4, CR0_EQ, 8 */
		/* 8214D0E0h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8214D0E8;  }
		/* 8214D0E0h case    4:*/		return 0x8214D0E4;
		  /* 8214D0E4h */ case    5:  		/* bl 1155452 */
		/* 8214D0E4h case    5:*/		regs.LR = 0x8214D0E8; return 0x82267260;
		/* 8214D0E4h case    5:*/		return 0x8214D0E8;
	}
	return 0x8214D0E8;
} // Block from 8214D0D0h-8214D0E8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214D0E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D0E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D0E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D0E8);
		  /* 8214D0E8h */ case    0:  		/* lbz R11, <#[R30 + 7]> */
		/* 8214D0E8h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000007) );
		/* 8214D0E8h case    0:*/		return 0x8214D0EC;
		  /* 8214D0ECh */ case    1:  		/* rlwinm R10, R27, 0, 24, 15 */
		/* 8214D0ECh case    1:*/		cpu::op::rlwinm<0,0,24,15>(regs,&regs.R10,regs.R27);
		/* 8214D0ECh case    1:*/		return 0x8214D0F0;
		  /* 8214D0F0h */ case    2:  		/* rlwinm R11, R11, 8, 0, 31 */
		/* 8214D0F0h case    2:*/		cpu::op::rlwinm<0,8,0,31>(regs,&regs.R11,regs.R11);
		/* 8214D0F0h case    2:*/		return 0x8214D0F4;
		  /* 8214D0F4h */ case    3:  		/* or R27, R11, R10 */
		/* 8214D0F4h case    3:*/		cpu::op::or<0>(regs,&regs.R27,regs.R11,regs.R10);
		/* 8214D0F4h case    3:*/		return 0x8214D0F8;
		  /* 8214D0F8h */ case    4:  		/* b -280 */
		/* 8214D0F8h case    4:*/		return 0x8214CFE0;
		/* 8214D0F8h case    4:*/		return 0x8214D0FC;
		  /* 8214D0FCh */ case    5:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 8214D0FCh case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 8214D0FCh case    5:*/		return 0x8214D100;
		  /* 8214D100h */ case    6:  		/* bc 4, CR0_EQ, 8 */
		/* 8214D100h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8214D108;  }
		/* 8214D100h case    6:*/		return 0x8214D104;
		  /* 8214D104h */ case    7:  		/* bl 1155420 */
		/* 8214D104h case    7:*/		regs.LR = 0x8214D108; return 0x82267260;
		/* 8214D104h case    7:*/		return 0x8214D108;
	}
	return 0x8214D108;
} // Block from 8214D0E8h-8214D108h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214D108h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D108);
		  /* 8214D108h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 8214D108h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8214D108h case    0:*/		return 0x8214D10C;
		  /* 8214D10Ch */ case    1:  		/* rlwimi R27, R11, 1, 30, 30 */
		/* 8214D10Ch case    1:*/		cpu::op::rlwimi<0,1,30,30>(regs,&regs.R27,regs.R11);
		/* 8214D10Ch case    1:*/		return 0x8214D110;
		  /* 8214D110h */ case    2:  		/* b -304 */
		/* 8214D110h case    2:*/		return 0x8214CFE0;
		/* 8214D110h case    2:*/		return 0x8214D114;
		  /* 8214D114h */ case    3:  		/* nop */
		/* 8214D114h case    3:*/		cpu::op::nop();
		/* 8214D114h case    3:*/		return 0x8214D118;
	}
	return 0x8214D118;
} // Block from 8214D108h-8214D118h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214D118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D118);
		  /* 8214D118h */ case    0:  		/* mfspr R12, LR */
		/* 8214D118h case    0:*/		regs.R12 = regs.LR;
		/* 8214D118h case    0:*/		return 0x8214D11C;
		  /* 8214D11Ch */ case    1:  		/* bl -769764 */
		/* 8214D11Ch case    1:*/		regs.LR = 0x8214D120; return 0x82091238;
		/* 8214D11Ch case    1:*/		return 0x8214D120;
		  /* 8214D120h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 8214D120h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 8214D120h case    2:*/		return 0x8214D124;
		  /* 8214D124h */ case    3:  		/* li R20, 0 */
		/* 8214D124h case    3:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 8214D124h case    3:*/		return 0x8214D128;
		  /* 8214D128h */ case    4:  		/* mr R31, R3 */
		/* 8214D128h case    4:*/		regs.R31 = regs.R3;
		/* 8214D128h case    4:*/		return 0x8214D12C;
		  /* 8214D12Ch */ case    5:  		/* mr R30, R4 */
		/* 8214D12Ch case    5:*/		regs.R30 = regs.R4;
		/* 8214D12Ch case    5:*/		return 0x8214D130;
		  /* 8214D130h */ case    6:  		/* stw R20, <#[R3 + 4]> */
		/* 8214D130h case    6:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R3 + 0x00000004) );
		/* 8214D130h case    6:*/		return 0x8214D134;
		  /* 8214D134h */ case    7:  		/* mr R29, R5 */
		/* 8214D134h case    7:*/		regs.R29 = regs.R5;
		/* 8214D134h case    7:*/		return 0x8214D138;
		  /* 8214D138h */ case    8:  		/* li R5, 32 */
		/* 8214D138h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x20);
		/* 8214D138h case    8:*/		return 0x8214D13C;
		  /* 8214D13Ch */ case    9:  		/* li R4, 0 */
		/* 8214D13Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214D13Ch case    9:*/		return 0x8214D140;
		  /* 8214D140h */ case   10:  		/* addi R3, R3, 8 */
		/* 8214D140h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x8);
		/* 8214D140h case   10:*/		return 0x8214D144;
		  /* 8214D144h */ case   11:  		/* mr R27, R6 */
		/* 8214D144h case   11:*/		regs.R27 = regs.R6;
		/* 8214D144h case   11:*/		return 0x8214D148;
		  /* 8214D148h */ case   12:  		/* mr R26, R7 */
		/* 8214D148h case   12:*/		regs.R26 = regs.R7;
		/* 8214D148h case   12:*/		return 0x8214D14C;
		  /* 8214D14Ch */ case   13:  		/* bl -769548 */
		/* 8214D14Ch case   13:*/		regs.LR = 0x8214D150; return 0x82091340;
		/* 8214D14Ch case   13:*/		return 0x8214D150;
		  /* 8214D150h */ case   14:  		/* addi R28, R31, 40 */
		/* 8214D150h case   14:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R31,0x28);
		/* 8214D150h case   14:*/		return 0x8214D154;
		  /* 8214D154h */ case   15:  		/* li R5, 32 */
		/* 8214D154h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x20);
		/* 8214D154h case   15:*/		return 0x8214D158;
		  /* 8214D158h */ case   16:  		/* li R4, 0 */
		/* 8214D158h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214D158h case   16:*/		return 0x8214D15C;
		  /* 8214D15Ch */ case   17:  		/* mr R3, R28 */
		/* 8214D15Ch case   17:*/		regs.R3 = regs.R28;
		/* 8214D15Ch case   17:*/		return 0x8214D160;
		  /* 8214D160h */ case   18:  		/* bl -769568 */
		/* 8214D160h case   18:*/		regs.LR = 0x8214D164; return 0x82091340;
		/* 8214D160h case   18:*/		return 0x8214D164;
		  /* 8214D164h */ case   19:  		/* li R5, 256 */
		/* 8214D164h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x100);
		/* 8214D164h case   19:*/		return 0x8214D168;
		  /* 8214D168h */ case   20:  		/* li R4, 0 */
		/* 8214D168h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214D168h case   20:*/		return 0x8214D16C;
		  /* 8214D16Ch */ case   21:  		/* addi R3, R31, 72 */
		/* 8214D16Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x48);
		/* 8214D16Ch case   21:*/		return 0x8214D170;
		  /* 8214D170h */ case   22:  		/* bl -769584 */
		/* 8214D170h case   22:*/		regs.LR = 0x8214D174; return 0x82091340;
		/* 8214D170h case   22:*/		return 0x8214D174;
		  /* 8214D174h */ case   23:  		/* li R5, 256 */
		/* 8214D174h case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x100);
		/* 8214D174h case   23:*/		return 0x8214D178;
		  /* 8214D178h */ case   24:  		/* li R4, 0 */
		/* 8214D178h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214D178h case   24:*/		return 0x8214D17C;
		  /* 8214D17Ch */ case   25:  		/* addi R3, R31, 328 */
		/* 8214D17Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x148);
		/* 8214D17Ch case   25:*/		return 0x8214D180;
		  /* 8214D180h */ case   26:  		/* bl -769600 */
		/* 8214D180h case   26:*/		regs.LR = 0x8214D184; return 0x82091340;
		/* 8214D180h case   26:*/		return 0x8214D184;
		  /* 8214D184h */ case   27:  		/* li R5, 4096 */
		/* 8214D184h case   27:*/		cpu::op::li<0>(regs,&regs.R5,0x1000);
		/* 8214D184h case   27:*/		return 0x8214D188;
		  /* 8214D188h */ case   28:  		/* li R4, 0 */
		/* 8214D188h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214D188h case   28:*/		return 0x8214D18C;
		  /* 8214D18Ch */ case   29:  		/* addi R3, R31, 584 */
		/* 8214D18Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x248);
		/* 8214D18Ch case   29:*/		return 0x8214D190;
		  /* 8214D190h */ case   30:  		/* bl -769616 */
		/* 8214D190h case   30:*/		regs.LR = 0x8214D194; return 0x82091340;
		/* 8214D190h case   30:*/		return 0x8214D194;
		  /* 8214D194h */ case   31:  		/* li R10, 255 */
		/* 8214D194h case   31:*/		cpu::op::li<0>(regs,&regs.R10,0xFF);
		/* 8214D194h case   31:*/		return 0x8214D198;
		  /* 8214D198h */ case   32:  		/* addi R11, R30, 4 */
		/* 8214D198h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 8214D198h case   32:*/		return 0x8214D19C;
		  /* 8214D19Ch */ case   33:  		/* stb R20, <#[R31]> */
		/* 8214D19Ch case   33:*/		cpu::mem::store8( regs, regs.R20, (uint32)(regs.R31 + 0x00000000) );
		/* 8214D19Ch case   33:*/		return 0x8214D1A0;
		  /* 8214D1A0h */ case   34:  		/* add R29, R30, R29 */
		/* 8214D1A0h case   34:*/		cpu::op::add<0>(regs,&regs.R29,regs.R30,regs.R29);
		/* 8214D1A0h case   34:*/		return 0x8214D1A4;
		  /* 8214D1A4h */ case   35:  		/* stw R10, <#[R31 + 4680]> */
		/* 8214D1A4h case   35:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00001248) );
		/* 8214D1A4h case   35:*/		return 0x8214D1A8;
		  /* 8214D1A8h */ case   36:  		/* b 104 */
		/* 8214D1A8h case   36:*/		return 0x8214D210;
		/* 8214D1A8h case   36:*/		return 0x8214D1AC;
		  /* 8214D1ACh */ case   37:  		/* lwz R9, <#[R11]> */
		/* 8214D1ACh case   37:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8214D1ACh case   37:*/		return 0x8214D1B0;
		  /* 8214D1B0h */ case   38:  		/* cmplwi CR6, R9, 65535 */
		/* 8214D1B0h case   38:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x0000FFFF);
		/* 8214D1B0h case   38:*/		return 0x8214D1B4;
		  /* 8214D1B4h */ case   39:  		/* bc 12, CR6_EQ, 100 */
		/* 8214D1B4h case   39:*/		if ( regs.CR[6].eq ) { return 0x8214D218;  }
		/* 8214D1B4h case   39:*/		return 0x8214D1B8;
		  /* 8214D1B8h */ case   40:  		/* rlwinm R10, R9, 0, 16, 31 */
		/* 8214D1B8h case   40:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R9);
		/* 8214D1B8h case   40:*/		return 0x8214D1BC;
		  /* 8214D1BCh */ case   41:  		/* addi R30, R11, 4 */
		/* 8214D1BCh case   41:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x4);
		/* 8214D1BCh case   41:*/		return 0x8214D1C0;
		  /* 8214D1C0h */ case   42:  		/* cmplwi CR6, R10, 65534 */
		/* 8214D1C0h case   42:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000FFFE);
		/* 8214D1C0h case   42:*/		return 0x8214D1C4;
		  /* 8214D1C4h */ case   43:  		/* bc 4, CR6_EQ, 16 */
		/* 8214D1C4h case   43:*/		if ( !regs.CR[6].eq ) { return 0x8214D1D4;  }
		/* 8214D1C4h case   43:*/		return 0x8214D1C8;
		  /* 8214D1C8h */ case   44:  		/* rlwinm R11, R9, 18, 15, 29 */
		/* 8214D1C8h case   44:*/		cpu::op::rlwinm<0,18,15,29>(regs,&regs.R11,regs.R9);
		/* 8214D1C8h case   44:*/		return 0x8214D1CC;
		  /* 8214D1CCh */ case   45:  		/* add R11, R11, R30 */
		/* 8214D1CCh case   45:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8214D1CCh case   45:*/		return 0x8214D1D0;
		  /* 8214D1D0h */ case   46:  		/* b 64 */
		/* 8214D1D0h case   46:*/		return 0x8214D210;
		/* 8214D1D0h case   46:*/		return 0x8214D1D4;
	}
	return 0x8214D1D4;
} // Block from 8214D118h-8214D1D4h (47 instructions)

//////////////////////////////////////////////////////
// Block at 8214D1D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D1D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D1D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D1D4);
		  /* 8214D1D4h */ case    0:  		/* cmplwi CR6, R10, 81 */
		/* 8214D1D4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000051);
		/* 8214D1D4h case    0:*/		return 0x8214D1D8;
		  /* 8214D1D8h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 8214D1D8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8214D1EC;  }
		/* 8214D1D8h case    1:*/		return 0x8214D1DC;
		  /* 8214D1DCh */ case    2:  		/* mr R3, R28 */
		/* 8214D1DCh case    2:*/		regs.R3 = regs.R28;
		/* 8214D1DCh case    2:*/		return 0x8214D1E0;
		  /* 8214D1E0h */ case    3:  		/* lbz R4, <#[R30 + 3]> */
		/* 8214D1E0h case    3:*/		cpu::mem::load8z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000003) );
		/* 8214D1E0h case    3:*/		return 0x8214D1E4;
		  /* 8214D1E4h */ case    4:  		/* bl -4780 */
		/* 8214D1E4h case    4:*/		regs.LR = 0x8214D1E8; return 0x8214BF38;
		/* 8214D1E4h case    4:*/		return 0x8214D1E8;
		  /* 8214D1E8h */ case    5:  		/* b 12 */
		/* 8214D1E8h case    5:*/		return 0x8214D1F4;
		/* 8214D1E8h case    5:*/		return 0x8214D1EC;
	}
	return 0x8214D1EC;
} // Block from 8214D1D4h-8214D1ECh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214D1ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D1EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D1EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D1EC);
		  /* 8214D1ECh */ case    0:  		/* cmplwi CR6, R10, 48 */
		/* 8214D1ECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000030);
		/* 8214D1ECh case    0:*/		return 0x8214D1F0;
		  /* 8214D1F0h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 8214D1F0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8214D1FC;  }
		/* 8214D1F0h case    1:*/		return 0x8214D1F4;
	}
	return 0x8214D1F4;
} // Block from 8214D1ECh-8214D1F4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214D1F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D1F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D1F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D1F4);
		  /* 8214D1F4h */ case    0:  		/* addi R11, R30, 20 */
		/* 8214D1F4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x14);
		/* 8214D1F4h case    0:*/		return 0x8214D1F8;
		  /* 8214D1F8h */ case    1:  		/* b 24 */
		/* 8214D1F8h case    1:*/		return 0x8214D210;
		/* 8214D1F8h case    1:*/		return 0x8214D1FC;
	}
	return 0x8214D1FC;
} // Block from 8214D1F4h-8214D1FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214D1FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D1FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D1FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D1FC);
		  /* 8214D1FCh */ case    0:  		/* cmplwi CR6, R10, 47 */
		/* 8214D1FCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000002F);
		/* 8214D1FCh case    0:*/		return 0x8214D200;
		  /* 8214D200h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8214D200h case    1:*/		if ( regs.CR[6].eq ) { return 0x8214D20C;  }
		/* 8214D200h case    1:*/		return 0x8214D204;
		  /* 8214D204h */ case    2:  		/* cmplwi CR6, R10, 31 */
		/* 8214D204h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000001F);
		/* 8214D204h case    2:*/		return 0x8214D208;
		  /* 8214D208h */ case    3:  		/* bc 4, CR6_EQ, 16 */
		/* 8214D208h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8214D218;  }
		/* 8214D208h case    3:*/		return 0x8214D20C;
	}
	return 0x8214D20C;
} // Block from 8214D1FCh-8214D20Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214D20Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D20C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D20C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D20C);
		  /* 8214D20Ch */ case    0:  		/* addi R11, R30, 8 */
		/* 8214D20Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x8);
		/* 8214D20Ch case    0:*/		return 0x8214D210;
	}
	return 0x8214D210;
} // Block from 8214D20Ch-8214D210h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214D210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D210);
		  /* 8214D210h */ case    0:  		/* cmplw CR6, R11, R29 */
		/* 8214D210h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 8214D210h case    0:*/		return 0x8214D214;
		  /* 8214D214h */ case    1:  		/* bc 12, CR6_LT, -104 */
		/* 8214D214h case    1:*/		if ( regs.CR[6].lt ) { return 0x8214D1AC;  }
		/* 8214D214h case    1:*/		return 0x8214D218;
	}
	return 0x8214D218;
} // Block from 8214D210h-8214D218h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214D218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D218);
		  /* 8214D218h */ case    0:  		/* mr R4, R27 */
		/* 8214D218h case    0:*/		regs.R4 = regs.R27;
		/* 8214D218h case    0:*/		return 0x8214D21C;
		  /* 8214D21Ch */ case    1:  		/* mr R3, R31 */
		/* 8214D21Ch case    1:*/		regs.R3 = regs.R31;
		/* 8214D21Ch case    1:*/		return 0x8214D220;
		  /* 8214D220h */ case    2:  		/* bl -3768 */
		/* 8214D220h case    2:*/		regs.LR = 0x8214D224; return 0x8214C368;
		/* 8214D220h case    2:*/		return 0x8214D224;
		  /* 8214D224h */ case    3:  		/* mr R3, R26 */
		/* 8214D224h case    3:*/		regs.R3 = regs.R26;
		/* 8214D224h case    3:*/		return 0x8214D228;
		  /* 8214D228h */ case    4:  		/* bl 69632 */
		/* 8214D228h case    4:*/		regs.LR = 0x8214D22C; return 0x8215E228;
		/* 8214D228h case    4:*/		return 0x8214D22C;
		  /* 8214D22Ch */ case    5:  		/* addi R4, R1, 80 */
		/* 8214D22Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8214D22Ch case    5:*/		return 0x8214D230;
		  /* 8214D230h */ case    6:  		/* bl 72064 */
		/* 8214D230h case    6:*/		regs.LR = 0x8214D234; return 0x8215EBB0;
		/* 8214D230h case    6:*/		return 0x8214D234;
		  /* 8214D234h */ case    7:  		/* or. R21, R3, R3 */
		/* 8214D234h case    7:*/		cpu::op::or<1>(regs,&regs.R21,regs.R3,regs.R3);
		/* 8214D234h case    7:*/		return 0x8214D238;
		  /* 8214D238h */ case    8:  		/* bc 12, CR0_EQ, 256 */
		/* 8214D238h case    8:*/		if ( regs.CR[0].eq ) { return 0x8214D338;  }
		/* 8214D238h case    8:*/		return 0x8214D23C;
		  /* 8214D23Ch */ case    9:  		/* lis R8, -32253 */
		/* 8214D23Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 8214D23Ch case    9:*/		return 0x8214D240;
	}
	return 0x8214D240;
} // Block from 8214D218h-8214D240h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8214D240h
// Function '?R500ShaderConstantValueCallback@XGRAPHICS@@YAJPAXKI0I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D240);
		  /* 8214D240h */ case    0:  		/* lwz R7, <#[R1 + 80]> */
		/* 8214D240h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 8214D240h case    0:*/		return 0x8214D244;
		  /* 8214D244h */ case    1:  		/* lis R9, -32253 */
		/* 8214D244h case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8214D244h case    1:*/		return 0x8214D248;
		  /* 8214D248h */ case    2:  		/* lis R10, -32253 */
		/* 8214D248h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8214D248h case    2:*/		return 0x8214D24C;
		  /* 8214D24Ch */ case    3:  		/* lis R11, -32253 */
		/* 8214D24Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214D24Ch case    3:*/		return 0x8214D250;
		  /* 8214D250h */ case    4:  		/* addi R23, R8, 28120 */
		/* 8214D250h case    4:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R8,0x6DD8);
		/* 8214D250h case    4:*/		return 0x8214D254;
		  /* 8214D254h */ case    5:  		/* addi R26, R9, 27460 */
		/* 8214D254h case    5:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R9,0x6B44);
		/* 8214D254h case    5:*/		return 0x8214D258;
		  /* 8214D258h */ case    6:  		/* addi R22, R10, 28076 */
		/* 8214D258h case    6:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R10,0x6DAC);
		/* 8214D258h case    6:*/		return 0x8214D25C;
		  /* 8214D25Ch */ case    7:  		/* addi R25, R11, 27552 */
		/* 8214D25Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x6BA0);
		/* 8214D25Ch case    7:*/		return 0x8214D260;
		  /* 8214D260h */ case    8:  		/* lwz R11, <#[R7]> */
		/* 8214D260h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 8214D260h case    8:*/		return 0x8214D264;
		  /* 8214D264h */ case    9:  		/* lbz R24, <#[R7]> */
		/* 8214D264h case    9:*/		cpu::mem::load8z( regs, &regs.R24, (uint32)(regs.R7 + 0x00000000) );
		/* 8214D264h case    9:*/		return 0x8214D268;
		  /* 8214D268h */ case   10:  		/* rlwinm R28, R11, 12, 28, 31 */
		/* 8214D268h case   10:*/		cpu::op::rlwinm<0,12,28,31>(regs,&regs.R28,regs.R11);
		/* 8214D268h case   10:*/		return 0x8214D26C;
		  /* 8214D26Ch */ case   11:  		/* cmplwi CR6, R28, 16 */
		/* 8214D26Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000010);
		/* 8214D26Ch case   11:*/		return 0x8214D270;
		  /* 8214D270h */ case   12:  		/* bc 12, CR6_LT, 32 */
		/* 8214D270h case   12:*/		if ( regs.CR[6].lt ) { return 0x8214D290;  }
		/* 8214D270h case   12:*/		return 0x8214D274;
		  /* 8214D274h */ case   13:  		/* mr R6, R25 */
		/* 8214D274h case   13:*/		regs.R6 = regs.R25;
		/* 8214D274h case   13:*/		return 0x8214D278;
		  /* 8214D278h */ case   14:  		/* mr R5, R22 */
		/* 8214D278h case   14:*/		regs.R5 = regs.R22;
		/* 8214D278h case   14:*/		return 0x8214D27C;
		  /* 8214D27Ch */ case   15:  		/* mr R4, R26 */
		/* 8214D27Ch case   15:*/		regs.R4 = regs.R26;
		/* 8214D27Ch case   15:*/		return 0x8214D280;
		  /* 8214D280h */ case   16:  		/* li R7, 910 */
		/* 8214D280h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x38E);
		/* 8214D280h case   16:*/		return 0x8214D284;
		  /* 8214D284h */ case   17:  		/* li R3, 0 */
		/* 8214D284h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214D284h case   17:*/		return 0x8214D288;
		  /* 8214D288h */ case   18:  		/* bl 43392 */
		/* 8214D288h case   18:*/		regs.LR = 0x8214D28C; return 0x82157C08;
		/* 8214D288h case   18:*/		return 0x8214D28C;
		  /* 8214D28Ch */ case   19:  		/* lwz R7, <#[R1 + 80]> */
		/* 8214D28Ch case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 8214D28Ch case   19:*/		return 0x8214D290;
	}
	return 0x8214D290;
} // Block from 8214D240h-8214D290h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8214D290h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D290);
		  /* 8214D290h */ case    0:  		/* mr R29, R20 */
		/* 8214D290h case    0:*/		regs.R29 = regs.R20;
		/* 8214D290h case    0:*/		return 0x8214D294;
		  /* 8214D294h */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 8214D294h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8214D294h case    1:*/		return 0x8214D298;
		  /* 8214D298h */ case    2:  		/* bc 12, CR6_EQ, 144 */
		/* 8214D298h case    2:*/		if ( regs.CR[6].eq ) { return 0x8214D328;  }
		/* 8214D298h case    2:*/		return 0x8214D29C;
		  /* 8214D29Ch */ case    3:  		/* mr R30, R20 */
		/* 8214D29Ch case    3:*/		regs.R30 = regs.R20;
		/* 8214D29Ch case    3:*/		return 0x8214D2A0;
		  /* 8214D2A0h */ case    4:  		/* mr R27, R20 */
		/* 8214D2A0h case    4:*/		regs.R27 = regs.R20;
		/* 8214D2A0h case    4:*/		return 0x8214D2A4;
		  /* 8214D2A4h */ case    5:  		/* rlwinm. R11, R28, 0, 31, 31 */
		/* 8214D2A4h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R28);
		/* 8214D2A4h case    5:*/		return 0x8214D2A8;
		  /* 8214D2A8h */ case    6:  		/* bc 12, CR0_EQ, 108 */
		/* 8214D2A8h case    6:*/		if ( regs.CR[0].eq ) { return 0x8214D314;  }
		/* 8214D2A8h case    6:*/		return 0x8214D2AC;
		  /* 8214D2ACh */ case    7:  		/* lwz R11, <#[R7]> */
		/* 8214D2ACh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 8214D2ACh case    7:*/		return 0x8214D2B0;
	}
	return 0x8214D2B0;
} // Block from 8214D290h-8214D2B0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214D2B0h
// Function '?BuildConstantDescription@XGRAPHICS@@YAXPAU_D3DXCONSTANT_DESC@@PBU_D3DXSHADER_CONSTANTTABLE@@PBU_D3DXSHADER_CONSTANTINFO@@PBU_D3DXSHADER_TYPEINFO@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D2B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D2B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D2B0);
		  /* 8214D2B0h */ case    0:  		/* rlwinm R11, R11, 20, 24, 31 */
		/* 8214D2B0h case    0:*/		cpu::op::rlwinm<0,20,24,31>(regs,&regs.R11,regs.R11);
		/* 8214D2B0h case    0:*/		return 0x8214D2B4;
		  /* 8214D2B4h */ case    1:  		/* srw R11, R11, R27 */
		/* 8214D2B4h case    1:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 8214D2B4h case    1:*/		return 0x8214D2B8;
		  /* 8214D2B8h */ case    2:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 8214D2B8h case    2:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 8214D2B8h case    2:*/		return 0x8214D2BC;
		  /* 8214D2BCh */ case    3:  		/* cmplwi CR6, R11, 1 */
		/* 8214D2BCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8214D2BCh case    3:*/		return 0x8214D2C0;
		  /* 8214D2C0h */ case    4:  		/* bc 12, CR6_LT, 56 */
		/* 8214D2C0h case    4:*/		if ( regs.CR[6].lt ) { return 0x8214D2F8;  }
		/* 8214D2C0h case    4:*/		return 0x8214D2C4;
		  /* 8214D2C4h */ case    5:  		/* bc 12, CR6_EQ, 80 */
		/* 8214D2C4h case    5:*/		if ( regs.CR[6].eq ) { return 0x8214D314;  }
		/* 8214D2C4h case    5:*/		return 0x8214D2C8;
		  /* 8214D2C8h */ case    6:  		/* cmplwi CR6, R11, 3 */
		/* 8214D2C8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8214D2C8h case    6:*/		return 0x8214D2CC;
		  /* 8214D2CCh */ case    7:  		/* bc 12, CR6_LT, 36 */
		/* 8214D2CCh case    7:*/		if ( regs.CR[6].lt ) { return 0x8214D2F0;  }
		/* 8214D2CCh case    7:*/		return 0x8214D2D0;
		  /* 8214D2D0h */ case    8:  		/* mr R6, R25 */
		/* 8214D2D0h case    8:*/		regs.R6 = regs.R25;
		/* 8214D2D0h case    8:*/		return 0x8214D2D4;
		  /* 8214D2D4h */ case    9:  		/* mr R5, R23 */
		/* 8214D2D4h case    9:*/		regs.R5 = regs.R23;
		/* 8214D2D4h case    9:*/		return 0x8214D2D8;
		  /* 8214D2D8h */ case   10:  		/* mr R4, R26 */
		/* 8214D2D8h case   10:*/		regs.R4 = regs.R26;
		/* 8214D2D8h case   10:*/		return 0x8214D2DC;
		  /* 8214D2DCh */ case   11:  		/* li R7, 1006 */
		/* 8214D2DCh case   11:*/		cpu::op::li<0>(regs,&regs.R7,0x3EE);
		/* 8214D2DCh case   11:*/		return 0x8214D2E0;
		  /* 8214D2E0h */ case   12:  		/* li R3, 0 */
		/* 8214D2E0h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214D2E0h case   12:*/		return 0x8214D2E4;
		  /* 8214D2E4h */ case   13:  		/* bl 43300 */
		/* 8214D2E4h case   13:*/		regs.LR = 0x8214D2E8; return 0x82157C08;
		/* 8214D2E4h case   13:*/		return 0x8214D2E8;
		  /* 8214D2E8h */ case   14:  		/* lwz R7, <#[R1 + 80]> */
		/* 8214D2E8h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 8214D2E8h case   14:*/		return 0x8214D2EC;
		  /* 8214D2ECh */ case   15:  		/* b 40 */
		/* 8214D2ECh case   15:*/		return 0x8214D314;
		/* 8214D2ECh case   15:*/		return 0x8214D2F0;
	}
	return 0x8214D2F0;
} // Block from 8214D2B0h-8214D2F0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8214D2F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D2F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D2F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D2F0);
		  /* 8214D2F0h */ case    0:  		/* mr R28, R20 */
		/* 8214D2F0h case    0:*/		regs.R28 = regs.R20;
		/* 8214D2F0h case    0:*/		return 0x8214D2F4;
		  /* 8214D2F4h */ case    1:  		/* b 32 */
		/* 8214D2F4h case    1:*/		return 0x8214D314;
		/* 8214D2F4h case    1:*/		return 0x8214D2F8;
	}
	return 0x8214D2F8;
} // Block from 8214D2F0h-8214D2F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214D2F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D2F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D2F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D2F8);
		  /* 8214D2F8h */ case    0:  		/* rlwinm R11, R24, 2, 0, 29 */
		/* 8214D2F8h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R24);
		/* 8214D2F8h case    0:*/		return 0x8214D2FC;
		  /* 8214D2FCh */ case    1:  		/* add R10, R30, R7 */
		/* 8214D2FCh case    1:*/		cpu::op::add<0>(regs,&regs.R10,regs.R30,regs.R7);
		/* 8214D2FCh case    1:*/		return 0x8214D300;
		  /* 8214D300h */ case    2:  		/* add R11, R11, R29 */
		/* 8214D300h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 8214D300h case    2:*/		return 0x8214D304;
		  /* 8214D304h */ case    3:  		/* addi R11, R11, 146 */
		/* 8214D304h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x92);
		/* 8214D304h case    3:*/		return 0x8214D308;
		  /* 8214D308h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8214D308h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8214D308h case    4:*/		return 0x8214D30C;
		  /* 8214D30Ch */ case    5:  		/* lfs FR0, <#[R10 + 4]> */
		/* 8214D30Ch case    5:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000004) );
		/* 8214D30Ch case    5:*/		return 0x8214D310;
		  /* 8214D310h */ case    6:  		/* stfsx FR0, <#[R11 + R31]> */
		/* 8214D310h case    6:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8214D310h case    6:*/		return 0x8214D314;
	}
	return 0x8214D314;
} // Block from 8214D2F8h-8214D314h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8214D314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D314);
		  /* 8214D314h */ case    0:  		/* rlwinm. R28, R28, 31, 1, 31 */
		/* 8214D314h case    0:*/		cpu::op::rlwinm<1,31,1,31>(regs,&regs.R28,regs.R28);
		/* 8214D314h case    0:*/		return 0x8214D318;
		  /* 8214D318h */ case    1:  		/* addi R29, R29, 1 */
		/* 8214D318h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8214D318h case    1:*/		return 0x8214D31C;
		  /* 8214D31Ch */ case    2:  		/* addi R27, R27, 2 */
		/* 8214D31Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x2);
		/* 8214D31Ch case    2:*/		return 0x8214D320;
	}
	return 0x8214D320;
} // Block from 8214D314h-8214D320h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214D320h
// Function '?CountConstantRegisters@XGRAPHICS@@YAIPBU_D3DXCONSTANT_DESC@@PBU_D3DXSHADER_CONSTANTTABLE@@PBU_D3DXSHADER_TYPEINFO@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D320( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D320) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D320);
		  /* 8214D320h */ case    0:  		/* addi R30, R30, 8 */
		/* 8214D320h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x8);
		/* 8214D320h case    0:*/		return 0x8214D324;
		  /* 8214D324h */ case    1:  		/* bc 4, CR0_EQ, -128 */
		/* 8214D324h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8214D2A4;  }
		/* 8214D324h case    1:*/		return 0x8214D328;
	}
	return 0x8214D328;
} // Block from 8214D320h-8214D328h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214D328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D328);
		  /* 8214D328h */ case    0:  		/* addi R7, R7, 36 */
		/* 8214D328h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x24);
		/* 8214D328h case    0:*/		return 0x8214D32C;
		  /* 8214D32Ch */ case    1:  		/* addic. R21, R21, -1 */
		/* 8214D32Ch case    1:*/		cpu::op::addic<1>(regs,&regs.R21,regs.R21,0xFFFFFFFF);
		/* 8214D32Ch case    1:*/		return 0x8214D330;
		  /* 8214D330h */ case    2:  		/* stw R7, <#[R1 + 80]> */
		/* 8214D330h case    2:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 8214D330h case    2:*/		return 0x8214D334;
		  /* 8214D334h */ case    3:  		/* bc 4, CR0_EQ, -212 */
		/* 8214D334h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8214D260;  }
		/* 8214D334h case    3:*/		return 0x8214D338;
	}
	return 0x8214D338;
} // Block from 8214D328h-8214D338h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214D338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D338);
		  /* 8214D338h */ case    0:  		/* li R3, 0 */
		/* 8214D338h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214D338h case    0:*/		return 0x8214D33C;
		  /* 8214D33Ch */ case    1:  		/* addi R1, R1, 192 */
		/* 8214D33Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8214D33Ch case    1:*/		return 0x8214D340;
		  /* 8214D340h */ case    2:  		/* b -770232 */
		/* 8214D340h case    2:*/		return 0x82091288;
		/* 8214D340h case    2:*/		return 0x8214D344;
		  /* 8214D344h */ case    3:  		/* nop */
		/* 8214D344h case    3:*/		cpu::op::nop();
		/* 8214D344h case    3:*/		return 0x8214D348;
	}
	return 0x8214D348;
} // Block from 8214D338h-8214D348h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214D348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D348);
		  /* 8214D348h */ case    0:  		/* mfspr R12, LR */
		/* 8214D348h case    0:*/		regs.R12 = regs.LR;
		/* 8214D348h case    0:*/		return 0x8214D34C;
		  /* 8214D34Ch */ case    1:  		/* bl -770296 */
		/* 8214D34Ch case    1:*/		regs.LR = 0x8214D350; return 0x82091254;
		/* 8214D34Ch case    1:*/		return 0x8214D350;
		  /* 8214D350h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8214D350h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8214D350h case    2:*/		return 0x8214D354;
		  /* 8214D354h */ case    3:  		/* lbz R11, <#[R3]> */
		/* 8214D354h case    3:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8214D354h case    3:*/		return 0x8214D358;
		  /* 8214D358h */ case    4:  		/* mr R31, R3 */
		/* 8214D358h case    4:*/		regs.R31 = regs.R3;
		/* 8214D358h case    4:*/		return 0x8214D35C;
		  /* 8214D35Ch */ case    5:  		/* mr R29, R4 */
		/* 8214D35Ch case    5:*/		regs.R29 = regs.R4;
		/* 8214D35Ch case    5:*/		return 0x8214D360;
		  /* 8214D360h */ case    6:  		/* mr R28, R5 */
		/* 8214D360h case    6:*/		regs.R28 = regs.R5;
		/* 8214D360h case    6:*/		return 0x8214D364;
		  /* 8214D364h */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 8214D364h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8214D364h case    7:*/		return 0x8214D368;
		  /* 8214D368h */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 8214D368h case    8:*/		if ( regs.CR[0].eq ) { return 0x8214D378;  }
		/* 8214D368h case    8:*/		return 0x8214D36C;
		  /* 8214D36Ch */ case    9:  		/* lis R3, -30602 */
		/* 8214D36Ch case    9:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8876);
		/* 8214D36Ch case    9:*/		return 0x8214D370;
		  /* 8214D370h */ case   10:  		/* ori R3, R3, 2932 */
		/* 8214D370h case   10:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xB74);
		/* 8214D370h case   10:*/		return 0x8214D374;
		  /* 8214D374h */ case   11:  		/* b 168 */
		/* 8214D374h case   11:*/		return 0x8214D41C;
		/* 8214D374h case   11:*/		return 0x8214D378;
	}
	return 0x8214D378;
} // Block from 8214D348h-8214D378h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8214D378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D378);
		  /* 8214D378h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8214D378h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214D378h case    0:*/		return 0x8214D37C;
		  /* 8214D37Ch */ case    1:  		/* lis R4, 9351 */
		/* 8214D37Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 8214D37Ch case    1:*/		return 0x8214D380;
		  /* 8214D380h */ case    2:  		/* mulli R30, R11, 20 */
		/* 8214D380h case    2:*/		cpu::op::mulli<0>(regs,&regs.R30,regs.R11,0x14);
		/* 8214D380h case    2:*/		return 0x8214D384;
		  /* 8214D384h */ case    3:  		/* mr R3, R30 */
		/* 8214D384h case    3:*/		regs.R3 = regs.R30;
		/* 8214D384h case    3:*/		return 0x8214D388;
		  /* 8214D388h */ case    4:  		/* bl -807304 */
		/* 8214D388h case    4:*/		regs.LR = 0x8214D38C; return 0x82088200;
		/* 8214D388h case    4:*/		return 0x8214D38C;
		  /* 8214D38Ch */ case    5:  		/* or. R4, R3, R3 */
		/* 8214D38Ch case    5:*/		cpu::op::or<1>(regs,&regs.R4,regs.R3,regs.R3);
		/* 8214D38Ch case    5:*/		return 0x8214D390;
		  /* 8214D390h */ case    6:  		/* bc 4, CR0_EQ, 16 */
		/* 8214D390h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8214D3A0;  }
		/* 8214D390h case    6:*/		return 0x8214D394;
		  /* 8214D394h */ case    7:  		/* lis R3, -32761 */
		/* 8214D394h case    7:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8214D394h case    7:*/		return 0x8214D398;
		  /* 8214D398h */ case    8:  		/* ori R3, R3, 14 */
		/* 8214D398h case    8:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8214D398h case    8:*/		return 0x8214D39C;
		  /* 8214D39Ch */ case    9:  		/* b 128 */
		/* 8214D39Ch case    9:*/		return 0x8214D41C;
		/* 8214D39Ch case    9:*/		return 0x8214D3A0;
	}
	return 0x8214D3A0;
} // Block from 8214D378h-8214D3A0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8214D3A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D3A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D3A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D3A0);
		  /* 8214D3A0h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8214D3A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214D3A0h case    0:*/		return 0x8214D3A4;
		  /* 8214D3A4h */ case    1:  		/* li R7, 0 */
		/* 8214D3A4h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8214D3A4h case    1:*/		return 0x8214D3A8;
		  /* 8214D3A8h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8214D3A8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214D3A8h case    2:*/		return 0x8214D3AC;
		  /* 8214D3ACh */ case    3:  		/* bc 4, CR6_GT, 100 */
		/* 8214D3ACh case    3:*/		if ( !regs.CR[6].gt ) { return 0x8214D410;  }
		/* 8214D3ACh case    3:*/		return 0x8214D3B0;
		  /* 8214D3B0h */ case    4:  		/* addi R6, R31, 72 */
		/* 8214D3B0h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x48);
		/* 8214D3B0h case    4:*/		return 0x8214D3B4;
		  /* 8214D3B4h */ case    5:  		/* addi R5, R31, 328 */
		/* 8214D3B4h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x148);
		/* 8214D3B4h case    5:*/		return 0x8214D3B8;
		  /* 8214D3B8h */ case    6:  		/* addi R11, R4, -4 */
		/* 8214D3B8h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0xFFFFFFFC);
		/* 8214D3B8h case    6:*/		return 0x8214D3BC;
		  /* 8214D3BCh */ case    7:  		/* lbzx R3, <#[R5 + R7]> */
		/* 8214D3BCh case    7:*/		cpu::mem::load8z( regs, &regs.R3, (uint32)(regs.R5 + regs.R7 + 0x00000000) );
		/* 8214D3BCh case    7:*/		return 0x8214D3C0;
		  /* 8214D3C0h */ case    8:  		/* li R9, 4 */
		/* 8214D3C0h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 8214D3C0h case    8:*/		return 0x8214D3C4;
		  /* 8214D3C4h */ case    9:  		/* li R27, 0 */
		/* 8214D3C4h case    9:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8214D3C4h case    9:*/		return 0x8214D3C8;
		  /* 8214D3C8h */ case   10:  		/* rlwinm R8, R3, 2, 0, 31 */
		/* 8214D3C8h case   10:*/		cpu::op::rlwinm<0,2,0,31>(regs,&regs.R8,regs.R3);
		/* 8214D3C8h case   10:*/		return 0x8214D3CC;
		  /* 8214D3CCh */ case   11:  		/* li R10, 0 */
		/* 8214D3CCh case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8214D3CCh case   11:*/		return 0x8214D3D0;
		  /* 8214D3D0h */ case   12:  		/* addi R8, R8, 146 */
		/* 8214D3D0h case   12:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x92);
		/* 8214D3D0h case   12:*/		return 0x8214D3D4;
		  /* 8214D3D4h */ case   13:  		/* lbzx R3, <#[R6 + R3]> */
		/* 8214D3D4h case   13:*/		cpu::mem::load8z( regs, &regs.R3, (uint32)(regs.R6 + regs.R3 + 0x00000000) );
		/* 8214D3D4h case   13:*/		return 0x8214D3D8;
		  /* 8214D3D8h */ case   14:  		/* mtspr CTR, R9 */
		/* 8214D3D8h case   14:*/		regs.CTR = regs.R9;
		/* 8214D3D8h case   14:*/		return 0x8214D3DC;
		  /* 8214D3DCh */ case   15:  		/* sth R27, <#[R11 + 4]> */
		/* 8214D3DCh case   15:*/		cpu::mem::store16( regs, regs.R27, (uint32)(regs.R11 + 0x00000004) );
		/* 8214D3DCh case   15:*/		return 0x8214D3E0;
		  /* 8214D3E0h */ case   16:  		/* sth R3, <#[R11 + 6]> */
		/* 8214D3E0h case   16:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R11 + 0x00000006) );
		/* 8214D3E0h case   16:*/		return 0x8214D3E4;
		  /* 8214D3E4h */ case   17:  		/* addi R11, R11, 4 */
		/* 8214D3E4h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8214D3E4h case   17:*/		return 0x8214D3E8;
		  /* 8214D3E8h */ case   18:  		/* add R9, R8, R10 */
		/* 8214D3E8h case   18:*/		cpu::op::add<0>(regs,&regs.R9,regs.R8,regs.R10);
		/* 8214D3E8h case   18:*/		return 0x8214D3EC;
		  /* 8214D3ECh */ case   19:  		/* addi R10, R10, 1 */
		/* 8214D3ECh case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8214D3ECh case   19:*/		return 0x8214D3F0;
		  /* 8214D3F0h */ case   20:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8214D3F0h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8214D3F0h case   20:*/		return 0x8214D3F4;
		  /* 8214D3F4h */ case   21:  		/* lfsx FR0, <#[R9 + R31]> */
		/* 8214D3F4h case   21:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R9 + regs.R31 + 0x00000000) );
		/* 8214D3F4h case   21:*/		return 0x8214D3F8;
		  /* 8214D3F8h */ case   22:  		/* stfsu FR0, <#[R11 + 4]> */
		/* 8214D3F8h case   22:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8214D3F8h case   22:*/		return 0x8214D3FC;
		  /* 8214D3FCh */ case   23:  		/* bc 16, CR0_LT, -20 */
		/* 8214D3FCh case   23:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8214D3E8;  }
		/* 8214D3FCh case   23:*/		return 0x8214D400;
		  /* 8214D400h */ case   24:  		/* lwz R10, <#[R31 + 4]> */
		/* 8214D400h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8214D400h case   24:*/		return 0x8214D404;
		  /* 8214D404h */ case   25:  		/* addi R7, R7, 1 */
		/* 8214D404h case   25:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 8214D404h case   25:*/		return 0x8214D408;
		  /* 8214D408h */ case   26:  		/* cmplw CR6, R7, R10 */
		/* 8214D408h case   26:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R10);
		/* 8214D408h case   26:*/		return 0x8214D40C;
		  /* 8214D40Ch */ case   27:  		/* bc 12, CR6_LT, -80 */
		/* 8214D40Ch case   27:*/		if ( regs.CR[6].lt ) { return 0x8214D3BC;  }
		/* 8214D40Ch case   27:*/		return 0x8214D410;
	}
	return 0x8214D410;
} // Block from 8214D3A0h-8214D410h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8214D410h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D410);
		  /* 8214D410h */ case    0:  		/* stw R30, <#[R28]> */
		/* 8214D410h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R28 + 0x00000000) );
		/* 8214D410h case    0:*/		return 0x8214D414;
		  /* 8214D414h */ case    1:  		/* li R3, 0 */
		/* 8214D414h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214D414h case    1:*/		return 0x8214D418;
		  /* 8214D418h */ case    2:  		/* stw R4, <#[R29]> */
		/* 8214D418h case    2:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R29 + 0x00000000) );
		/* 8214D418h case    2:*/		return 0x8214D41C;
	}
	return 0x8214D41C;
} // Block from 8214D410h-8214D41Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214D41Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D41C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D41C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D41C);
		  /* 8214D41Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 8214D41Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8214D41Ch case    0:*/		return 0x8214D420;
		  /* 8214D420h */ case    1:  		/* b -770428 */
		/* 8214D420h case    1:*/		return 0x820912A4;
		/* 8214D420h case    1:*/		return 0x8214D424;
		  /* 8214D424h */ case    2:  		/* nop */
		/* 8214D424h case    2:*/		cpu::op::nop();
		/* 8214D424h case    2:*/		return 0x8214D428;
	}
	return 0x8214D428;
} // Block from 8214D41Ch-8214D428h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214D428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D428);
		  /* 8214D428h */ case    0:  		/* mfspr R12, LR */
		/* 8214D428h case    0:*/		regs.R12 = regs.LR;
		/* 8214D428h case    0:*/		return 0x8214D42C;
		  /* 8214D42Ch */ case    1:  		/* bl -770556 */
		/* 8214D42Ch case    1:*/		regs.LR = 0x8214D430; return 0x82091230;
		/* 8214D42Ch case    1:*/		return 0x8214D430;
		  /* 8214D430h */ case    2:  		/* stwu R1, <#[R1 - 368]> */
		/* 8214D430h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE90);
		/* 8214D430h case    2:*/		return 0x8214D434;
		  /* 8214D434h */ case    3:  		/* mr R18, R3 */
		/* 8214D434h case    3:*/		regs.R18 = regs.R3;
		/* 8214D434h case    3:*/		return 0x8214D438;
	}
	return 0x8214D438;
} // Block from 8214D428h-8214D438h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214D438h
// Function '?AL_Destroy@@YAXPAU_ATILIST@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D438);
		  /* 8214D438h */ case    0:  		/* mr R20, R4 */
		/* 8214D438h case    0:*/		regs.R20 = regs.R4;
		/* 8214D438h case    0:*/		return 0x8214D43C;
		  /* 8214D43Ch */ case    1:  		/* mr R19, R5 */
		/* 8214D43Ch case    1:*/		regs.R19 = regs.R5;
		/* 8214D43Ch case    1:*/		return 0x8214D440;
		  /* 8214D440h */ case    2:  		/* cmpwi CR6, R5, 0 */
		/* 8214D440h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 8214D440h case    2:*/		return 0x8214D444;
		  /* 8214D444h */ case    3:  		/* bc 4, CR6_EQ, 24 */
		/* 8214D444h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8214D45C;  }
		/* 8214D444h case    3:*/		return 0x8214D448;
		  /* 8214D448h */ case    4:  		/* li R6, 144 */
		/* 8214D448h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x90);
		/* 8214D448h case    4:*/		return 0x8214D44C;
		  /* 8214D44Ch */ case    5:  		/* li R5, 1 */
		/* 8214D44Ch case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8214D44Ch case    5:*/		return 0x8214D450;
		  /* 8214D450h */ case    6:  		/* li R4, 0 */
		/* 8214D450h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214D450h case    6:*/		return 0x8214D454;
		  /* 8214D454h */ case    7:  		/* mr R3, R20 */
		/* 8214D454h case    7:*/		regs.R3 = regs.R20;
		/* 8214D454h case    7:*/		return 0x8214D458;
		  /* 8214D458h */ case    8:  		/* bl -917224 */
		/* 8214D458h case    8:*/		regs.LR = 0x8214D45C; return 0x8206D570;
		/* 8214D458h case    8:*/		return 0x8214D45C;
	}
	return 0x8214D45C;
} // Block from 8214D438h-8214D45Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214D45Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D45C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D45C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D45C);
		  /* 8214D45Ch */ case    0:  		/* li R22, 0 */
		/* 8214D45Ch case    0:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 8214D45Ch case    0:*/		return 0x8214D460;
		  /* 8214D460h */ case    1:  		/* li R23, 0 */
		/* 8214D460h case    1:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 8214D460h case    1:*/		return 0x8214D464;
		  /* 8214D464h */ case    2:  		/* li R21, -1 */
		/* 8214D464h case    2:*/		cpu::op::li<0>(regs,&regs.R21,0xFFFFFFFF);
		/* 8214D464h case    2:*/		return 0x8214D468;
		  /* 8214D468h */ case    3:  		/* addi R5, R1, 96 */
		/* 8214D468h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 8214D468h case    3:*/		return 0x8214D46C;
		  /* 8214D46Ch */ case    4:  		/* mr R4, R23 */
		/* 8214D46Ch case    4:*/		regs.R4 = regs.R23;
		/* 8214D46Ch case    4:*/		return 0x8214D470;
		  /* 8214D470h */ case    5:  		/* mr R3, R18 */
		/* 8214D470h case    5:*/		regs.R3 = regs.R18;
		/* 8214D470h case    5:*/		return 0x8214D474;
		  /* 8214D474h */ case    6:  		/* bl 66684 */
		/* 8214D474h case    6:*/		regs.LR = 0x8214D478; return 0x8215D8F0;
		/* 8214D474h case    6:*/		return 0x8214D478;
		  /* 8214D478h */ case    7:  		/* lwz R11, <#[R1 + 96]> */
		/* 8214D478h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 8214D478h case    7:*/		return 0x8214D47C;
		  /* 8214D47Ch */ case    8:  		/* cmplwi CR6, R11, 1 */
		/* 8214D47Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8214D47Ch case    8:*/		return 0x8214D480;
		  /* 8214D480h */ case    9:  		/* bc 4, CR6_EQ, 260 */
		/* 8214D480h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8214D584;  }
		/* 8214D480h case    9:*/		return 0x8214D484;
		  /* 8214D484h */ case   10:  		/* cmplw CR6, R22, R23 */
		/* 8214D484h case   10:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R23);
		/* 8214D484h case   10:*/		return 0x8214D488;
		  /* 8214D488h */ case   11:  		/* bc 12, CR6_EQ, 8 */
		/* 8214D488h case   11:*/		if ( regs.CR[6].eq ) { return 0x8214D490;  }
		/* 8214D488h case   11:*/		return 0x8214D48C;
		  /* 8214D48Ch */ case   12:  		/* bl 1154516 */
		/* 8214D48Ch case   12:*/		regs.LR = 0x8214D490; return 0x82267260;
		/* 8214D48Ch case   12:*/		return 0x8214D490;
	}
	return 0x8214D490;
} // Block from 8214D45Ch-8214D490h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214D490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D490);
		  /* 8214D490h */ case    0:  		/* addi R22, R22, 1 */
		/* 8214D490h case    0:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 8214D490h case    0:*/		return 0x8214D494;
		  /* 8214D494h */ case    1:  		/* mr R27, R21 */
		/* 8214D494h case    1:*/		regs.R27 = regs.R21;
		/* 8214D494h case    1:*/		return 0x8214D498;
	}
	return 0x8214D498;
} // Block from 8214D490h-8214D498h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214D498h
// Function '?AS_SetStateI@XGRAPHICS@@YAXPAU_ABSTRACT_STATE@1@W4_E_AS_STATE@1@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D498);
		  /* 8214D498h */ case    0:  		/* mr R26, R21 */
		/* 8214D498h case    0:*/		regs.R26 = regs.R21;
		/* 8214D498h case    0:*/		return 0x8214D49C;
		  /* 8214D49Ch */ case    1:  		/* li R6, 0 */
		/* 8214D49Ch case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8214D49Ch case    1:*/		return 0x8214D4A0;
		  /* 8214D4A0h */ case    2:  		/* li R28, 0 */
		/* 8214D4A0h case    2:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8214D4A0h case    2:*/		return 0x8214D4A4;
		  /* 8214D4A4h */ case    3:  		/* cmpwi CR6, R19, 0 */
		/* 8214D4A4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R19,0x00000000);
		/* 8214D4A4h case    3:*/		return 0x8214D4A8;
		  /* 8214D4A8h */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 8214D4A8h case    4:*/		if ( regs.CR[6].eq ) { return 0x8214D4BC;  }
		/* 8214D4A8h case    4:*/		return 0x8214D4AC;
		  /* 8214D4ACh */ case    5:  		/* lwz R11, <#[R1 + 228]> */
		/* 8214D4ACh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000E4) );
		/* 8214D4ACh case    5:*/		return 0x8214D4B0;
		  /* 8214D4B0h */ case    6:  		/* cmpwi CR6, R11, 1 */
		/* 8214D4B0h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 8214D4B0h case    6:*/		return 0x8214D4B4;
		  /* 8214D4B4h */ case    7:  		/* li R11, 1 */
		/* 8214D4B4h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8214D4B4h case    7:*/		return 0x8214D4B8;
		  /* 8214D4B8h */ case    8:  		/* bc 12, CR6_EQ, 8 */
		/* 8214D4B8h case    8:*/		if ( regs.CR[6].eq ) { return 0x8214D4C0;  }
		/* 8214D4B8h case    8:*/		return 0x8214D4BC;
	}
	return 0x8214D4BC;
} // Block from 8214D498h-8214D4BCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214D4BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D4BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D4BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D4BC);
		  /* 8214D4BCh */ case    0:  		/* li R11, 0 */
		/* 8214D4BCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8214D4BCh case    0:*/		return 0x8214D4C0;
	}
	return 0x8214D4C0;
} // Block from 8214D4BCh-8214D4C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214D4C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D4C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D4C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D4C0);
		  /* 8214D4C0h */ case    0:  		/* rlwinm R24, R11, 0, 24, 31 */
		/* 8214D4C0h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R24,regs.R11);
		/* 8214D4C0h case    0:*/		return 0x8214D4C4;
		  /* 8214D4C4h */ case    1:  		/* li R25, 0 */
		/* 8214D4C4h case    1:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 8214D4C4h case    1:*/		return 0x8214D4C8;
		  /* 8214D4C8h */ case    2:  		/* addi R31, R1, 164 */
		/* 8214D4C8h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0xA4);
		/* 8214D4C8h case    2:*/		return 0x8214D4CC;
		  /* 8214D4CCh */ case    3:  		/* lwz R11, <#[R31 + 16]> */
		/* 8214D4CCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8214D4CCh case    3:*/		return 0x8214D4D0;
		  /* 8214D4D0h */ case    4:  		/* lwz R30, <#[R31 - 16]> */
		/* 8214D4D0h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0xFFFFFFF0) );
		/* 8214D4D0h case    4:*/		return 0x8214D4D4;
		  /* 8214D4D4h */ case    5:  		/* lwz R29, <#[R31]> */
		/* 8214D4D4h case    5:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 8214D4D4h case    5:*/		return 0x8214D4D8;
		  /* 8214D4D8h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 8214D4D8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214D4D8h case    6:*/		return 0x8214D4DC;
		  /* 8214D4DCh */ case    7:  		/* bc 12, CR6_EQ, 128 */
		/* 8214D4DCh case    7:*/		if ( regs.CR[6].eq ) { return 0x8214D55C;  }
		/* 8214D4DCh case    7:*/		return 0x8214D4E0;
		  /* 8214D4E0h */ case    8:  		/* cmplw CR6, R30, R27 */
		/* 8214D4E0h case    8:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R27);
		/* 8214D4E0h case    8:*/		return 0x8214D4E4;
		  /* 8214D4E4h */ case    9:  		/* bc 4, CR6_EQ, 12 */
		/* 8214D4E4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8214D4F0;  }
		/* 8214D4E4h case    9:*/		return 0x8214D4E8;
		  /* 8214D4E8h */ case   10:  		/* cmplw CR6, R29, R26 */
		/* 8214D4E8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R26);
		/* 8214D4E8h case   10:*/		return 0x8214D4EC;
		  /* 8214D4ECh */ case   11:  		/* bc 12, CR6_EQ, 100 */
		/* 8214D4ECh case   11:*/		if ( regs.CR[6].eq ) { return 0x8214D550;  }
		/* 8214D4ECh case   11:*/		return 0x8214D4F0;
	}
	return 0x8214D4F0;
} // Block from 8214D4C0h-8214D4F0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8214D4F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D4F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D4F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D4F0);
		  /* 8214D4F0h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8214D4F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8214D4F0h case    0:*/		return 0x8214D4F4;
		  /* 8214D4F4h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 8214D4F4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8214D50C;  }
		/* 8214D4F4h case    1:*/		return 0x8214D4F8;
		  /* 8214D4F8h */ case    2:  		/* mr R5, R28 */
		/* 8214D4F8h case    2:*/		regs.R5 = regs.R28;
		/* 8214D4F8h case    2:*/		return 0x8214D4FC;
		  /* 8214D4FCh */ case    3:  		/* mr R4, R23 */
		/* 8214D4FCh case    3:*/		regs.R4 = regs.R23;
		/* 8214D4FCh case    3:*/		return 0x8214D500;
		  /* 8214D500h */ case    4:  		/* mr R3, R20 */
		/* 8214D500h case    4:*/		regs.R3 = regs.R20;
		/* 8214D500h case    4:*/		return 0x8214D504;
		  /* 8214D504h */ case    5:  		/* bl -917420 */
		/* 8214D504h case    5:*/		regs.LR = 0x8214D508; return 0x8206D558;
		/* 8214D504h case    5:*/		return 0x8214D508;
		  /* 8214D508h */ case    6:  		/* li R28, 0 */
		/* 8214D508h case    6:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8214D508h case    6:*/		return 0x8214D50C;
	}
	return 0x8214D50C;
} // Block from 8214D4F0h-8214D50Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8214D50Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D50C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D50C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D50C);
		  /* 8214D50Ch */ case    0:  		/* addi R8, R1, 84 */
		/* 8214D50Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x54);
		/* 8214D50Ch case    0:*/		return 0x8214D510;
		  /* 8214D510h */ case    1:  		/* lwz R3, <#[R31 - 32]> */
		/* 8214D510h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0xFFFFFFE0) );
		/* 8214D510h case    1:*/		return 0x8214D514;
		  /* 8214D514h */ case    2:  		/* addi R7, R1, 80 */
		/* 8214D514h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8214D514h case    2:*/		return 0x8214D518;
		  /* 8214D518h */ case    3:  		/* lwz R4, <#[R31 - 48]> */
		/* 8214D518h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0xFFFFFFD0) );
		/* 8214D518h case    3:*/		return 0x8214D51C;
		  /* 8214D51Ch */ case    4:  		/* mr R6, R29 */
		/* 8214D51Ch case    4:*/		regs.R6 = regs.R29;
		/* 8214D51Ch case    4:*/		return 0x8214D520;
		  /* 8214D520h */ case    5:  		/* mr R5, R30 */
		/* 8214D520h case    5:*/		regs.R5 = regs.R30;
		/* 8214D520h case    5:*/		return 0x8214D524;
		  /* 8214D524h */ case    6:  		/* mr R27, R30 */
		/* 8214D524h case    6:*/		regs.R27 = regs.R30;
		/* 8214D524h case    6:*/		return 0x8214D528;
		  /* 8214D528h */ case    7:  		/* mr R26, R29 */
		/* 8214D528h case    7:*/		regs.R26 = regs.R29;
		/* 8214D528h case    7:*/		return 0x8214D52C;
		  /* 8214D52Ch */ case    8:  		/* bl -5908 */
		/* 8214D52Ch case    8:*/		regs.LR = 0x8214D530; return 0x8214BE18;
		/* 8214D52Ch case    8:*/		return 0x8214D530;
		  /* 8214D530h */ case    9:  		/* rlwinm R11, R24, 0, 24, 31 */
		/* 8214D530h case    9:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R24);
		/* 8214D530h case    9:*/		return 0x8214D534;
		  /* 8214D534h */ case   10:  		/* lwz R6, <#[R1 + 84]> */
		/* 8214D534h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 8214D534h case   10:*/		return 0x8214D538;
		  /* 8214D538h */ case   11:  		/* addic R10, R11, -1 */
		/* 8214D538h case   11:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 8214D538h case   11:*/		return 0x8214D53C;
		  /* 8214D53Ch */ case   12:  		/* subfe R11, R10, R11 */
		/* 8214D53Ch case   12:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8214D53Ch case   12:*/		return 0x8214D540;
		  /* 8214D540h */ case   13:  		/* lwz R10, <#[R1 + 80]> */
		/* 8214D540h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8214D540h case   13:*/		return 0x8214D544;
		  /* 8214D544h */ case   14:  		/* rlwimi R10, R11, 4, 27, 27 */
		/* 8214D544h case   14:*/		cpu::op::rlwimi<0,4,27,27>(regs,&regs.R10,regs.R11);
		/* 8214D544h case   14:*/		return 0x8214D548;
		  /* 8214D548h */ case   15:  		/* rlwinm R11, R10, 0, 27, 31 */
		/* 8214D548h case   15:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R10);
		/* 8214D548h case   15:*/		return 0x8214D54C;
		  /* 8214D54Ch */ case   16:  		/* rlwimi R6, R11, 4, 0, 27 */
		/* 8214D54Ch case   16:*/		cpu::op::rlwimi<0,4,0,27>(regs,&regs.R6,regs.R11);
		/* 8214D54Ch case   16:*/		return 0x8214D550;
	}
	return 0x8214D550;
} // Block from 8214D50Ch-8214D550h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8214D550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D550);
		  /* 8214D550h */ case    0:  		/* li R11, 1 */
		/* 8214D550h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8214D550h case    0:*/		return 0x8214D554;
		  /* 8214D554h */ case    1:  		/* slw R11, R11, R25 */
		/* 8214D554h case    1:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R25);
		/* 8214D554h case    1:*/		return 0x8214D558;
		  /* 8214D558h */ case    2:  		/* or R28, R11, R28 */
		/* 8214D558h case    2:*/		cpu::op::or<0>(regs,&regs.R28,regs.R11,regs.R28);
		/* 8214D558h case    2:*/		return 0x8214D55C;
	}
	return 0x8214D55C;
} // Block from 8214D550h-8214D55Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214D55Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D55C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D55C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D55C);
		  /* 8214D55Ch */ case    0:  		/* addi R25, R25, 1 */
		/* 8214D55Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 8214D55Ch case    0:*/		return 0x8214D560;
		  /* 8214D560h */ case    1:  		/* addi R31, R31, 4 */
		/* 8214D560h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8214D560h case    1:*/		return 0x8214D564;
		  /* 8214D564h */ case    2:  		/* cmplwi CR6, R25, 4 */
		/* 8214D564h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000004);
		/* 8214D564h case    2:*/		return 0x8214D568;
		  /* 8214D568h */ case    3:  		/* bc 12, CR6_LT, -156 */
		/* 8214D568h case    3:*/		if ( regs.CR[6].lt ) { return 0x8214D4CC;  }
		/* 8214D568h case    3:*/		return 0x8214D56C;
		  /* 8214D56Ch */ case    4:  		/* cmplwi CR6, R28, 0 */
		/* 8214D56Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8214D56Ch case    4:*/		return 0x8214D570;
		  /* 8214D570h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 8214D570h case    5:*/		if ( regs.CR[6].eq ) { return 0x8214D584;  }
		/* 8214D570h case    5:*/		return 0x8214D574;
		  /* 8214D574h */ case    6:  		/* mr R5, R28 */
		/* 8214D574h case    6:*/		regs.R5 = regs.R28;
		/* 8214D574h case    6:*/		return 0x8214D578;
		  /* 8214D578h */ case    7:  		/* mr R4, R23 */
		/* 8214D578h case    7:*/		regs.R4 = regs.R23;
		/* 8214D578h case    7:*/		return 0x8214D57C;
		  /* 8214D57Ch */ case    8:  		/* mr R3, R20 */
		/* 8214D57Ch case    8:*/		regs.R3 = regs.R20;
		/* 8214D57Ch case    8:*/		return 0x8214D580;
		  /* 8214D580h */ case    9:  		/* bl -917544 */
		/* 8214D580h case    9:*/		regs.LR = 0x8214D584; return 0x8206D558;
		/* 8214D580h case    9:*/		return 0x8214D584;
	}
	return 0x8214D584;
} // Block from 8214D55Ch-8214D584h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8214D584h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D584( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D584) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D584);
		  /* 8214D584h */ case    0:  		/* addi R23, R23, 1 */
		/* 8214D584h case    0:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 8214D584h case    0:*/		return 0x8214D588;
	}
	return 0x8214D588;
} // Block from 8214D584h-8214D588h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214D588h
// Function '?AS_SetArrayStateI@XGRAPHICS@@YAXPAU_ABSTRACT_STATE@1@W4_E_AS_ARRAY_STATE@1@II@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D588);
		  /* 8214D588h */ case    0:  		/* cmplwi CR6, R23, 16 */
		/* 8214D588h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000010);
		/* 8214D588h case    0:*/		return 0x8214D58C;
		  /* 8214D58Ch */ case    1:  		/* bc 12, CR6_LT, -292 */
		/* 8214D58Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x8214D468;  }
		/* 8214D58Ch case    1:*/		return 0x8214D590;
		  /* 8214D590h */ case    2:  		/* addi R1, R1, 368 */
		/* 8214D590h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x170);
		/* 8214D590h case    2:*/		return 0x8214D594;
		  /* 8214D594h */ case    3:  		/* b -770836 */
		/* 8214D594h case    3:*/		return 0x82091280;
		/* 8214D594h case    3:*/		return 0x8214D598;
	}
	return 0x8214D598;
} // Block from 8214D588h-8214D598h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214D598h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D598);
		  /* 8214D598h */ case    0:  		/* mfspr R12, LR */
		/* 8214D598h case    0:*/		regs.R12 = regs.LR;
		/* 8214D598h case    0:*/		return 0x8214D59C;
		  /* 8214D59Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214D59Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214D59Ch case    1:*/		return 0x8214D5A0;
		  /* 8214D5A0h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8214D5A0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8214D5A0h case    2:*/		return 0x8214D5A4;
		  /* 8214D5A4h */ case    3:  		/* mr R11, R3 */
		/* 8214D5A4h case    3:*/		regs.R11 = regs.R3;
		/* 8214D5A4h case    3:*/		return 0x8214D5A8;
		  /* 8214D5A8h */ case    4:  		/* lwz R3, <#[R8 + 20]> */
		/* 8214D5A8h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R8 + 0x00000014) );
		/* 8214D5A8h case    4:*/		return 0x8214D5AC;
		  /* 8214D5ACh */ case    5:  		/* rlwinm. R10, R4, 0, 24, 31 */
		/* 8214D5ACh case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R4);
		/* 8214D5ACh case    5:*/		return 0x8214D5B0;
		  /* 8214D5B0h */ case    6:  		/* bc 12, CR0_EQ, 288 */
		/* 8214D5B0h case    6:*/		if ( regs.CR[0].eq ) { return 0x8214D6D0;  }
		/* 8214D5B0h case    6:*/		return 0x8214D5B4;
		  /* 8214D5B4h */ case    7:  		/* stw R7, <#[R8 + 4]> */
		/* 8214D5B4h case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R8 + 0x00000004) );
		/* 8214D5B4h case    7:*/		return 0x8214D5B8;
		  /* 8214D5B8h */ case    8:  		/* rlwinm. R10, R5, 0, 24, 31 */
		/* 8214D5B8h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R5);
		/* 8214D5B8h case    8:*/		return 0x8214D5BC;
		  /* 8214D5BCh */ case    9:  		/* lwz R10, <#[R11]> */
		/* 8214D5BCh case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8214D5BCh case    9:*/		return 0x8214D5C0;
		  /* 8214D5C0h */ case   10:  		/* bc 12, CR0_EQ, 184 */
		/* 8214D5C0h case   10:*/		if ( regs.CR[0].eq ) { return 0x8214D678;  }
		/* 8214D5C0h case   10:*/		return 0x8214D5C4;
		  /* 8214D5C4h */ case   11:  		/* rlwinm. R9, R10, 0, 27, 31 */
		/* 8214D5C4h case   11:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R9,regs.R10);
		/* 8214D5C4h case   11:*/		return 0x8214D5C8;
		  /* 8214D5C8h */ case   12:  		/* bc 12, CR0_EQ, 48 */
		/* 8214D5C8h case   12:*/		if ( regs.CR[0].eq ) { return 0x8214D5F8;  }
		/* 8214D5C8h case   12:*/		return 0x8214D5CC;
		  /* 8214D5CCh */ case   13:  		/* cmplwi CR6, R9, 1 */
		/* 8214D5CCh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000001);
		/* 8214D5CCh case   13:*/		return 0x8214D5D0;
		  /* 8214D5D0h */ case   14:  		/* bc 4, CR6_EQ, 28 */
		/* 8214D5D0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8214D5EC;  }
		/* 8214D5D0h case   14:*/		return 0x8214D5D4;
		  /* 8214D5D4h */ case   15:  		/* lwz R9, <#[R8 + 24]> */
		/* 8214D5D4h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000018) );
		/* 8214D5D4h case   15:*/		return 0x8214D5D8;
		  /* 8214D5D8h */ case   16:  		/* rlwinm R10, R10, 12, 27, 31 */
		/* 8214D5D8h case   16:*/		cpu::op::rlwinm<0,12,27,31>(regs,&regs.R10,regs.R10);
		/* 8214D5D8h case   16:*/		return 0x8214D5DC;
		  /* 8214D5DCh */ case   17:  		/* lwz R8, <#[R11 + 8]> */
		/* 8214D5DCh case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 8214D5DCh case   17:*/		return 0x8214D5E0;
		  /* 8214D5E0h */ case   18:  		/* lbzx R10, <#[R10 + R9]> */
		/* 8214D5E0h case   18:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8214D5E0h case   18:*/		return 0x8214D5E4;
		  /* 8214D5E4h */ case   19:  		/* rlwimi R8, R10, 14, 16, 17 */
		/* 8214D5E4h case   19:*/		cpu::op::rlwimi<0,14,16,17>(regs,&regs.R8,regs.R10);
		/* 8214D5E4h case   19:*/		return 0x8214D5E8;
		  /* 8214D5E8h */ case   20:  		/* stw R8, <#[R11 + 8]> */
		/* 8214D5E8h case   20:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 8214D5E8h case   20:*/		return 0x8214D5EC;
	}
	return 0x8214D5EC;
} // Block from 8214D598h-8214D5ECh (21 instructions)

//////////////////////////////////////////////////////
// Block at 8214D5ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D5EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D5EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D5EC);
		  /* 8214D5ECh */ case    0:  		/* mr R4, R11 */
		/* 8214D5ECh case    0:*/		regs.R4 = regs.R11;
		/* 8214D5ECh case    0:*/		return 0x8214D5F0;
		  /* 8214D5F0h */ case    1:  		/* bl -915928 */
		/* 8214D5F0h case    1:*/		regs.LR = 0x8214D5F4; return 0x8206DC18;
		/* 8214D5F0h case    1:*/		return 0x8214D5F4;
		  /* 8214D5F4h */ case    2:  		/* b 284 */
		/* 8214D5F4h case    2:*/		return 0x8214D710;
		/* 8214D5F4h case    2:*/		return 0x8214D5F8;
	}
	return 0x8214D5F8;
} // Block from 8214D5ECh-8214D5F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214D5F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D5F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D5F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D5F8);
		  /* 8214D5F8h */ case    0:  		/* lwz R9, <#[R8 + 8]> */
		/* 8214D5F8h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000008) );
		/* 8214D5F8h case    0:*/		return 0x8214D5FC;
		  /* 8214D5FCh */ case    1:  		/* lwz R10, <#[R9]> */
		/* 8214D5FCh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 8214D5FCh case    1:*/		return 0x8214D600;
		  /* 8214D600h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 8214D600h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8214D600h case    2:*/		return 0x8214D604;
		  /* 8214D604h */ case    3:  		/* bc 12, CR6_EQ, 100 */
		/* 8214D604h case    3:*/		if ( regs.CR[6].eq ) { return 0x8214D668;  }
		/* 8214D604h case    3:*/		return 0x8214D608;
		  /* 8214D608h */ case    4:  		/* rlwinm R8, R10, 0, 20, 31 */
		/* 8214D608h case    4:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R8,regs.R10);
		/* 8214D608h case    4:*/		return 0x8214D60C;
		  /* 8214D60Ch */ case    5:  		/* cmplw CR6, R8, R7 */
		/* 8214D60Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 8214D60Ch case    5:*/		return 0x8214D610;
		  /* 8214D610h */ case    6:  		/* bc 12, CR6_EQ, 16 */
		/* 8214D610h case    6:*/		if ( regs.CR[6].eq ) { return 0x8214D620;  }
		/* 8214D610h case    6:*/		return 0x8214D614;
		  /* 8214D614h */ case    7:  		/* lwzu R10, <#[R9 + 4]> */
		/* 8214D614h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 8214D614h case    7:*/		return 0x8214D618;
		  /* 8214D618h */ case    8:  		/* cmplwi CR6, R10, 0 */
		/* 8214D618h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8214D618h case    8:*/		return 0x8214D61C;
		  /* 8214D61Ch */ case    9:  		/* bc 4, CR6_EQ, -20 */
		/* 8214D61Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8214D608;  }
		/* 8214D61Ch case    9:*/		return 0x8214D620;
	}
	return 0x8214D620;
} // Block from 8214D5F8h-8214D620h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8214D620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D620);
		  /* 8214D620h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 8214D620h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8214D620h case    0:*/		return 0x8214D624;
		  /* 8214D624h */ case    1:  		/* bc 12, CR6_EQ, 68 */
		/* 8214D624h case    1:*/		if ( regs.CR[6].eq ) { return 0x8214D668;  }
		/* 8214D624h case    1:*/		return 0x8214D628;
		  /* 8214D628h */ case    2:  		/* lwz R10, <#[R11 + 4]> */
		/* 8214D628h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8214D628h case    2:*/		return 0x8214D62C;
		  /* 8214D62Ch */ case    3:  		/* li R8, 209 */
		/* 8214D62Ch case    3:*/		cpu::op::li<0>(regs,&regs.R8,0xD1);
		/* 8214D62Ch case    3:*/		return 0x8214D630;
		  /* 8214D630h */ case    4:  		/* lwz R7, <#[R11]> */
		/* 8214D630h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8214D630h case    4:*/		return 0x8214D634;
		  /* 8214D634h */ case    5:  		/* li R6, 0 */
		/* 8214D634h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8214D634h case    5:*/		return 0x8214D638;
		  /* 8214D638h */ case    6:  		/* lwz R11, <#[R11 + 8]> */
		/* 8214D638h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8214D638h case    6:*/		return 0x8214D63C;
		  /* 8214D63Ch */ case    7:  		/* rlwimi R10, R8, 3, 20, 31 */
		/* 8214D63Ch case    7:*/		cpu::op::rlwimi<0,3,20,31>(regs,&regs.R10,regs.R8);
		/* 8214D63Ch case    7:*/		return 0x8214D640;
		  /* 8214D640h */ case    8:  		/* addi R4, R1, 88 */
		/* 8214D640h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x58);
		/* 8214D640h case    8:*/		return 0x8214D644;
		  /* 8214D644h */ case    9:  		/* stw R10, <#[R1 + 92]> */
		/* 8214D644h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214D644h case    9:*/		return 0x8214D648;
	}
	return 0x8214D648;
} // Block from 8214D620h-8214D648h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8214D648h
// Function '?DeleteILMgmt@XGRAPHICS@@YAJPAU_R400ILSTORE@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D648);
		  /* 8214D648h */ case    0:  		/* stw R7, <#[R1 + 88]> */
		/* 8214D648h case    0:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000058) );
		/* 8214D648h case    0:*/		return 0x8214D64C;
		  /* 8214D64Ch */ case    1:  		/* stw R11, <#[R1 + 96]> */
		/* 8214D64Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 8214D64Ch case    1:*/		return 0x8214D650;
		  /* 8214D650h */ case    2:  		/* lwz R11, <#[R9]> */
		/* 8214D650h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 8214D650h case    2:*/		return 0x8214D654;
		  /* 8214D654h */ case    3:  		/* mr R10, R11 */
		/* 8214D654h case    3:*/		regs.R10 = regs.R11;
		/* 8214D654h case    3:*/		return 0x8214D658;
		  /* 8214D658h */ case    4:  		/* rlwimi R10, R11, 24, 20, 23 */
		/* 8214D658h case    4:*/		cpu::op::rlwimi<0,24,20,23>(regs,&regs.R10,regs.R11);
		/* 8214D658h case    4:*/		return 0x8214D65C;
		  /* 8214D65Ch */ case    5:  		/* rlwinm R5, R10, 24, 24, 31 */
		/* 8214D65Ch case    5:*/		cpu::op::rlwinm<0,24,24,31>(regs,&regs.R5,regs.R10);
		/* 8214D65Ch case    5:*/		return 0x8214D660;
		  /* 8214D660h */ case    6:  		/* bl -915992 */
		/* 8214D660h case    6:*/		regs.LR = 0x8214D664; return 0x8206DC48;
		/* 8214D660h case    6:*/		return 0x8214D664;
		  /* 8214D664h */ case    7:  		/* b 172 */
		/* 8214D664h case    7:*/		return 0x8214D710;
		/* 8214D664h case    7:*/		return 0x8214D668;
	}
	return 0x8214D668;
} // Block from 8214D648h-8214D668h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214D668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D668);
		  /* 8214D668h */ case    0:  		/* li R5, 0 */
		/* 8214D668h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8214D668h case    0:*/		return 0x8214D66C;
		  /* 8214D66Ch */ case    1:  		/* mr R4, R11 */
		/* 8214D66Ch case    1:*/		regs.R4 = regs.R11;
		/* 8214D66Ch case    1:*/		return 0x8214D670;
		  /* 8214D670h */ case    2:  		/* bl -916032 */
		/* 8214D670h case    2:*/		regs.LR = 0x8214D674; return 0x8206DC30;
		/* 8214D670h case    2:*/		return 0x8214D674;
		  /* 8214D674h */ case    3:  		/* b 156 */
		/* 8214D674h case    3:*/		return 0x8214D710;
		/* 8214D674h case    3:*/		return 0x8214D678;
	}
	return 0x8214D678;
} // Block from 8214D668h-8214D678h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214D678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D678);
		  /* 8214D678h */ case    0:  		/* rlwinm. R9, R10, 0, 16, 16 */
		/* 8214D678h case    0:*/		cpu::op::rlwinm<1,0,16,16>(regs,&regs.R9,regs.R10);
		/* 8214D678h case    0:*/		return 0x8214D67C;
		  /* 8214D67Ch */ case    1:  		/* bc 12, CR0_EQ, 72 */
		/* 8214D67Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8214D6C4;  }
		/* 8214D67Ch case    1:*/		return 0x8214D680;
		  /* 8214D680h */ case    2:  		/* rlwinm R9, R10, 0, 26, 31 */
		/* 8214D680h case    2:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R9,regs.R10);
		/* 8214D680h case    2:*/		return 0x8214D684;
		  /* 8214D684h */ case    3:  		/* cmplwi CR6, R9, 63 */
		/* 8214D684h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x0000003F);
		/* 8214D684h case    3:*/		return 0x8214D688;
		  /* 8214D688h */ case    4:  		/* bc 4, CR6_EQ, 60 */
		/* 8214D688h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8214D6C4;  }
		/* 8214D688h case    4:*/		return 0x8214D68C;
		  /* 8214D68Ch */ case    5:  		/* lbz R9, <#[R8 + 12]> */
		/* 8214D68Ch case    5:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R8 + 0x0000000C) );
		/* 8214D68Ch case    5:*/		return 0x8214D690;
		  /* 8214D690h */ case    6:  		/* lis R8, -32253 */
		/* 8214D690h case    6:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 8214D690h case    6:*/		return 0x8214D694;
		  /* 8214D694h */ case    7:  		/* lis R7, -241 */
		/* 8214D694h case    7:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFFFF0F);
		/* 8214D694h case    7:*/		return 0x8214D698;
		  /* 8214D698h */ case    8:  		/* rlwinm R9, R9, 0, 29, 31 */
		/* 8214D698h case    8:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R9,regs.R9);
		/* 8214D698h case    8:*/		return 0x8214D69C;
		  /* 8214D69Ch */ case    9:  		/* addi R8, R8, 28148 */
		/* 8214D69Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x6DF4);
		/* 8214D69Ch case    9:*/		return 0x8214D6A0;
	}
	return 0x8214D6A0;
} // Block from 8214D678h-8214D6A0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8214D6A0h
// Function '?ForEachInstruction@XGRAPHICS@@YAXPAXKP6AX0_N11K0@Z011@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D6A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D6A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D6A0);
		  /* 8214D6A0h */ case    0:  		/* lis R6, -16 */
		/* 8214D6A0h case    0:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFFFFF0);
		/* 8214D6A0h case    0:*/		return 0x8214D6A4;
		  /* 8214D6A4h */ case    1:  		/* ori R7, R7, 65535 */
		/* 8214D6A4h case    1:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R7,0xFFFF);
		/* 8214D6A4h case    1:*/		return 0x8214D6A8;
		  /* 8214D6A8h */ case    2:  		/* ori R6, R6, 65535 */
		/* 8214D6A8h case    2:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R6,0xFFFF);
		/* 8214D6A8h case    2:*/		return 0x8214D6AC;
		  /* 8214D6ACh */ case    3:  		/* lbzx R9, <#[R9 + R8]> */
		/* 8214D6ACh case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 8214D6ACh case    3:*/		return 0x8214D6B0;
		  /* 8214D6B0h */ case    4:  		/* rlwimi R7, R9, 20, 8, 11 */
		/* 8214D6B0h case    4:*/		cpu::op::rlwimi<0,20,8,11>(regs,&regs.R7,regs.R9);
		/* 8214D6B0h case    4:*/		return 0x8214D6B4;
		  /* 8214D6B4h */ case    5:  		/* rlwimi R6, R9, 16, 12, 15 */
		/* 8214D6B4h case    5:*/		cpu::op::rlwimi<0,16,12,15>(regs,&regs.R6,regs.R9);
		/* 8214D6B4h case    5:*/		return 0x8214D6B8;
		  /* 8214D6B8h */ case    6:  		/* and R9, R7, R6 */
		/* 8214D6B8h case    6:*/		cpu::op::and<0>(regs,&regs.R9,regs.R7,regs.R6);
		/* 8214D6B8h case    6:*/		return 0x8214D6BC;
		  /* 8214D6BCh */ case    7:  		/* and R10, R9, R10 */
		/* 8214D6BCh case    7:*/		cpu::op::and<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8214D6BCh case    7:*/		return 0x8214D6C0;
		  /* 8214D6C0h */ case    8:  		/* stw R10, <#[R11]> */
		/* 8214D6C0h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8214D6C0h case    8:*/		return 0x8214D6C4;
	}
	return 0x8214D6C4;
} // Block from 8214D6A0h-8214D6C4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214D6C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D6C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D6C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D6C4);
		  /* 8214D6C4h */ case    0:  		/* mr R4, R11 */
		/* 8214D6C4h case    0:*/		regs.R4 = regs.R11;
		/* 8214D6C4h case    0:*/		return 0x8214D6C8;
		  /* 8214D6C8h */ case    1:  		/* bl -916072 */
		/* 8214D6C8h case    1:*/		regs.LR = 0x8214D6CC; return 0x8206DC60;
		/* 8214D6C8h case    1:*/		return 0x8214D6CC;
		  /* 8214D6CCh */ case    2:  		/* b 68 */
		/* 8214D6CCh case    2:*/		return 0x8214D710;
		/* 8214D6CCh case    2:*/		return 0x8214D6D0;
	}
	return 0x8214D6D0;
} // Block from 8214D6C4h-8214D6D0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214D6D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D6D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D6D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D6D0);
		  /* 8214D6D0h */ case    0:  		/* ld R11, <#[R11]> */
		/* 8214D6D0h case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8214D6D0h case    0:*/		return 0x8214D6D4;
		  /* 8214D6D4h */ case    1:  		/* li R10, 1 */
		/* 8214D6D4h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8214D6D4h case    1:*/		return 0x8214D6D8;
		  /* 8214D6D8h */ case    2:  		/* std R11, <#[R1 + 80]> */
		/* 8214D6D8h case    2:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8214D6D8h case    2:*/		return 0x8214D6DC;
		  /* 8214D6DCh */ case    3:  		/* lwz R11, <#[R1 + 84]> */
		/* 8214D6DCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8214D6DCh case    3:*/		return 0x8214D6E0;
		  /* 8214D6E0h */ case    4:  		/* rlwinm R11, R11, 20, 28, 31 */
		/* 8214D6E0h case    4:*/		cpu::op::rlwinm<0,20,28,31>(regs,&regs.R11,regs.R11);
		/* 8214D6E0h case    4:*/		return 0x8214D6E4;
		  /* 8214D6E4h */ case    5:  		/* slw R11, R10, R11 */
		/* 8214D6E4h case    5:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8214D6E4h case    5:*/		return 0x8214D6E8;
		  /* 8214D6E8h */ case    6:  		/* andi. R11, R11, 24702 */
		/* 8214D6E8h case    6:*/		cpu::op::andi<1>(regs,&regs.R11,regs.R11,0x607E);
		/* 8214D6E8h case    6:*/		return 0x8214D6EC;
		  /* 8214D6ECh */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 8214D6ECh case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8214D6ECh case    7:*/		return 0x8214D6F0;
		  /* 8214D6F0h */ case    8:  		/* bc 12, CR0_EQ, 24 */
		/* 8214D6F0h case    8:*/		if ( regs.CR[0].eq ) { return 0x8214D708;  }
		/* 8214D6F0h case    8:*/		return 0x8214D6F4;
		  /* 8214D6F4h */ case    9:  		/* lwz R11, <#[R1 + 80]> */
		/* 8214D6F4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8214D6F4h case    9:*/		return 0x8214D6F8;
		  /* 8214D6F8h */ case   10:  		/* lwz R10, <#[R8]> */
		/* 8214D6F8h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 8214D6F8h case   10:*/		return 0x8214D6FC;
		  /* 8214D6FCh */ case   11:  		/* subf R10, R10, R11 */
		/* 8214D6FCh case   11:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8214D6FCh case   11:*/		return 0x8214D700;
		  /* 8214D700h */ case   12:  		/* rlwimi R10, R11, 0, 0, 19 */
		/* 8214D700h case   12:*/		cpu::op::rlwimi<0,0,0,19>(regs,&regs.R10,regs.R11);
		/* 8214D700h case   12:*/		return 0x8214D704;
		  /* 8214D704h */ case   13:  		/* stw R10, <#[R1 + 80]> */
		/* 8214D704h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8214D704h case   13:*/		return 0x8214D708;
	}
	return 0x8214D708;
} // Block from 8214D6D0h-8214D708h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8214D708h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D708);
		  /* 8214D708h */ case    0:  		/* addi R4, R1, 80 */
		/* 8214D708h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8214D708h case    0:*/		return 0x8214D70C;
		  /* 8214D70Ch */ case    1:  		/* bl -915748 */
		/* 8214D70Ch case    1:*/		regs.LR = 0x8214D710; return 0x8206DDE8;
		/* 8214D70Ch case    1:*/		return 0x8214D710;
	}
	return 0x8214D710;
} // Block from 8214D708h-8214D710h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214D710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D710);
		  /* 8214D710h */ case    0:  		/* addi R1, R1, 112 */
		/* 8214D710h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214D710h case    0:*/		return 0x8214D714;
		  /* 8214D714h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214D714h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214D714h case    1:*/		return 0x8214D718;
		  /* 8214D718h */ case    2:  		/* mtspr LR, R12 */
		/* 8214D718h case    2:*/		regs.LR = regs.R12;
		/* 8214D718h case    2:*/		return 0x8214D71C;
		  /* 8214D71Ch */ case    3:  		/* bclr 20, CR0_LT */
		/* 8214D71Ch case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214D71Ch case    3:*/		return 0x8214D720;
	}
	return 0x8214D720;
} // Block from 8214D710h-8214D720h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214D720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D720);
		  /* 8214D720h */ case    0:  		/* mfspr R12, LR */
		/* 8214D720h case    0:*/		regs.R12 = regs.LR;
		/* 8214D720h case    0:*/		return 0x8214D724;
		  /* 8214D724h */ case    1:  		/* bl -771304 */
		/* 8214D724h case    1:*/		regs.LR = 0x8214D728; return 0x8209123C;
		/* 8214D724h case    1:*/		return 0x8214D728;
		  /* 8214D728h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 8214D728h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 8214D728h case    2:*/		return 0x8214D72C;
		  /* 8214D72Ch */ case    3:  		/* add R28, R3, R4 */
		/* 8214D72Ch case    3:*/		cpu::op::add<0>(regs,&regs.R28,regs.R3,regs.R4);
		/* 8214D72Ch case    3:*/		return 0x8214D730;
		  /* 8214D730h */ case    4:  		/* mr R31, R3 */
		/* 8214D730h case    4:*/		regs.R31 = regs.R3;
		/* 8214D730h case    4:*/		return 0x8214D734;
		  /* 8214D734h */ case    5:  		/* mr R30, R4 */
		/* 8214D734h case    5:*/		regs.R30 = regs.R4;
		/* 8214D734h case    5:*/		return 0x8214D738;
		  /* 8214D738h */ case    6:  		/* mr R27, R5 */
		/* 8214D738h case    6:*/		regs.R27 = regs.R5;
		/* 8214D738h case    6:*/		return 0x8214D73C;
		  /* 8214D73Ch */ case    7:  		/* mr R26, R6 */
		/* 8214D73Ch case    7:*/		regs.R26 = regs.R6;
		/* 8214D73Ch case    7:*/		return 0x8214D740;
		  /* 8214D740h */ case    8:  		/* mr R25, R7 */
		/* 8214D740h case    8:*/		regs.R25 = regs.R7;
		/* 8214D740h case    8:*/		return 0x8214D744;
		  /* 8214D744h */ case    9:  		/* mr R24, R8 */
		/* 8214D744h case    9:*/		regs.R24 = regs.R8;
		/* 8214D744h case    9:*/		return 0x8214D748;
		  /* 8214D748h */ case   10:  		/* mr R23, R9 */
		/* 8214D748h case   10:*/		regs.R23 = regs.R9;
		/* 8214D748h case   10:*/		return 0x8214D74C;
		  /* 8214D74Ch */ case   11:  		/* mr R29, R3 */
		/* 8214D74Ch case   11:*/		regs.R29 = regs.R3;
		/* 8214D74Ch case   11:*/		return 0x8214D750;
		  /* 8214D750h */ case   12:  		/* cmplw CR6, R3, R28 */
		/* 8214D750h case   12:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R28);
		/* 8214D750h case   12:*/		return 0x8214D754;
		  /* 8214D754h */ case   13:  		/* bc 4, CR6_LT, 188 */
		/* 8214D754h case   13:*/		if ( !regs.CR[6].lt ) { return 0x8214D810;  }
		/* 8214D754h case   13:*/		return 0x8214D758;
		  /* 8214D758h */ case   14:  		/* lwz R11, <#[R29]> */
		/* 8214D758h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8214D758h case   14:*/		return 0x8214D75C;
		  /* 8214D75Ch */ case   15:  		/* li R5, 4 */
		/* 8214D75Ch case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8214D75Ch case   15:*/		return 0x8214D760;
		  /* 8214D760h */ case   16:  		/* lwz R10, <#[R29 + 4]> */
		/* 8214D760h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000004) );
		/* 8214D760h case   16:*/		return 0x8214D764;
		  /* 8214D764h */ case   17:  		/* li R4, 45 */
		/* 8214D764h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0x2D);
		/* 8214D764h case   17:*/		return 0x8214D768;
		  /* 8214D768h */ case   18:  		/* lwz R9, <#[R29 + 8]> */
		/* 8214D768h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000008) );
		/* 8214D768h case   18:*/		return 0x8214D76C;
		  /* 8214D76Ch */ case   19:  		/* mr R8, R11 */
		/* 8214D76Ch case   19:*/		regs.R8 = regs.R11;
		/* 8214D76Ch case   19:*/		return 0x8214D770;
		  /* 8214D770h */ case   20:  		/* mr R7, R11 */
		/* 8214D770h case   20:*/		regs.R7 = regs.R11;
		/* 8214D770h case   20:*/		return 0x8214D774;
		  /* 8214D774h */ case   21:  		/* mr R6, R10 */
		/* 8214D774h case   21:*/		regs.R6 = regs.R10;
		/* 8214D774h case   21:*/		return 0x8214D778;
		  /* 8214D778h */ case   22:  		/* mr R3, R10 */
		/* 8214D778h case   22:*/		regs.R3 = regs.R10;
		/* 8214D778h case   22:*/		return 0x8214D77C;
		  /* 8214D77Ch */ case   23:  		/* mr R22, R9 */
		/* 8214D77Ch case   23:*/		regs.R22 = regs.R9;
		/* 8214D77Ch case   23:*/		return 0x8214D780;
		  /* 8214D780h */ case   24:  		/* mr R21, R9 */
		/* 8214D780h case   24:*/		regs.R21 = regs.R9;
		/* 8214D780h case   24:*/		return 0x8214D784;
		  /* 8214D784h */ case   25:  		/* rlwimi R7, R11, 16, 0, 15 */
		/* 8214D784h case   25:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R7,regs.R11);
		/* 8214D784h case   25:*/		return 0x8214D788;
		  /* 8214D788h */ case   26:  		/* rlwimi R8, R11, 16, 16, 31 */
		/* 8214D788h case   26:*/		cpu::op::rlwimi<0,16,16,31>(regs,&regs.R8,regs.R11);
		/* 8214D788h case   26:*/		return 0x8214D78C;
		  /* 8214D78Ch */ case   27:  		/* rlwimi R6, R10, 16, 16, 31 */
		/* 8214D78Ch case   27:*/		cpu::op::rlwimi<0,16,16,31>(regs,&regs.R6,regs.R10);
		/* 8214D78Ch case   27:*/		return 0x8214D790;
		  /* 8214D790h */ case   28:  		/* rlwimi R3, R10, 16, 0, 15 */
		/* 8214D790h case   28:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R3,regs.R10);
		/* 8214D790h case   28:*/		return 0x8214D794;
		  /* 8214D794h */ case   29:  		/* rlwimi R22, R9, 16, 16, 31 */
		/* 8214D794h case   29:*/		cpu::op::rlwimi<0,16,16,31>(regs,&regs.R22,regs.R9);
		/* 8214D794h case   29:*/		return 0x8214D798;
		  /* 8214D798h */ case   30:  		/* rlwimi R21, R9, 16, 0, 15 */
		/* 8214D798h case   30:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R21,regs.R9);
		/* 8214D798h case   30:*/		return 0x8214D79C;
		  /* 8214D79Ch */ case   31:  		/* rlwinm R10, R7, 8, 0, 15 */
		/* 8214D79Ch case   31:*/		cpu::op::rlwinm<0,8,0,15>(regs,&regs.R10,regs.R7);
		/* 8214D79Ch case   31:*/		return 0x8214D7A0;
		  /* 8214D7A0h */ case   32:  		/* rlwinm R11, R8, 24, 16, 31 */
		/* 8214D7A0h case   32:*/		cpu::op::rlwinm<0,24,16,31>(regs,&regs.R11,regs.R8);
		/* 8214D7A0h case   32:*/		return 0x8214D7A4;
		  /* 8214D7A4h */ case   33:  		/* rlwinm R9, R6, 24, 16, 31 */
		/* 8214D7A4h case   33:*/		cpu::op::rlwinm<0,24,16,31>(regs,&regs.R9,regs.R6);
		/* 8214D7A4h case   33:*/		return 0x8214D7A8;
		  /* 8214D7A8h */ case   34:  		/* rlwinm R8, R3, 8, 0, 15 */
		/* 8214D7A8h case   34:*/		cpu::op::rlwinm<0,8,0,15>(regs,&regs.R8,regs.R3);
		/* 8214D7A8h case   34:*/		return 0x8214D7AC;
		  /* 8214D7ACh */ case   35:  		/* rlwinm R7, R22, 24, 16, 31 */
		/* 8214D7ACh case   35:*/		cpu::op::rlwinm<0,24,16,31>(regs,&regs.R7,regs.R22);
		/* 8214D7ACh case   35:*/		return 0x8214D7B0;
		  /* 8214D7B0h */ case   36:  		/* rlwinm R6, R21, 8, 0, 15 */
		/* 8214D7B0h case   36:*/		cpu::op::rlwinm<0,8,0,15>(regs,&regs.R6,regs.R21);
		/* 8214D7B0h case   36:*/		return 0x8214D7B4;
		  /* 8214D7B4h */ case   37:  		/* or R11, R11, R10 */
		/* 8214D7B4h case   37:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8214D7B4h case   37:*/		return 0x8214D7B8;
		  /* 8214D7B8h */ case   38:  		/* or R10, R9, R8 */
		/* 8214D7B8h case   38:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R8);
		/* 8214D7B8h case   38:*/		return 0x8214D7BC;
		  /* 8214D7BCh */ case   39:  		/* or R9, R7, R6 */
		/* 8214D7BCh case   39:*/		cpu::op::or<0>(regs,&regs.R9,regs.R7,regs.R6);
		/* 8214D7BCh case   39:*/		return 0x8214D7C0;
		  /* 8214D7C0h */ case   40:  		/* stw R11, <#[R1 + 80]> */
		/* 8214D7C0h case   40:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8214D7C0h case   40:*/		return 0x8214D7C4;
		  /* 8214D7C4h */ case   41:  		/* stw R10, <#[R1 + 84]> */
		/* 8214D7C4h case   41:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8214D7C4h case   41:*/		return 0x8214D7C8;
		  /* 8214D7C8h */ case   42:  		/* addi R3, R1, 80 */
		/* 8214D7C8h case   42:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8214D7C8h case   42:*/		return 0x8214D7CC;
		  /* 8214D7CCh */ case   43:  		/* stw R9, <#[R1 + 88]> */
		/* 8214D7CCh case   43:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8214D7CCh case   43:*/		return 0x8214D7D0;
		  /* 8214D7D0h */ case   44:  		/* bl 41792 */
		/* 8214D7D0h case   44:*/		regs.LR = 0x8214D7D4; return 0x82157B10;
		/* 8214D7D0h case   44:*/		return 0x8214D7D4;
		  /* 8214D7D4h */ case   45:  		/* cmpwi CR0, R3, 0 */
		/* 8214D7D4h case   45:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8214D7D4h case   45:*/		return 0x8214D7D8;
		  /* 8214D7D8h */ case   46:  		/* bc 4, CR0_GT, 12 */
		/* 8214D7D8h case   46:*/		if ( !regs.CR[0].gt ) { return 0x8214D7E4;  }
		/* 8214D7D8h case   46:*/		return 0x8214D7DC;
		  /* 8214D7DCh */ case   47:  		/* cmpwi CR6, R3, 2 */
		/* 8214D7DCh case   47:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 8214D7DCh case   47:*/		return 0x8214D7E0;
		  /* 8214D7E0h */ case   48:  		/* bc 4, CR6_GT, 128 */
		/* 8214D7E0h case   48:*/		if ( !regs.CR[6].gt ) { return 0x8214D860;  }
		/* 8214D7E0h case   48:*/		return 0x8214D7E4;
	}
	return 0x8214D7E4;
} // Block from 8214D720h-8214D7E4h (49 instructions)

//////////////////////////////////////////////////////
// Block at 8214D7E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D7E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D7E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D7E4);
		  /* 8214D7E4h */ case    0:  		/* li R5, 4 */
		/* 8214D7E4h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8214D7E4h case    0:*/		return 0x8214D7E8;
		  /* 8214D7E8h */ case    1:  		/* li R4, 45 */
		/* 8214D7E8h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x2D);
		/* 8214D7E8h case    1:*/		return 0x8214D7EC;
		  /* 8214D7ECh */ case    2:  		/* addi R3, R1, 86 */
		/* 8214D7ECh case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x56);
		/* 8214D7ECh case    2:*/		return 0x8214D7F0;
		  /* 8214D7F0h */ case    3:  		/* bl 41760 */
		/* 8214D7F0h case    3:*/		regs.LR = 0x8214D7F4; return 0x82157B10;
		/* 8214D7F0h case    3:*/		return 0x8214D7F4;
		  /* 8214D7F4h */ case    4:  		/* cmpwi CR0, R3, 0 */
		/* 8214D7F4h case    4:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8214D7F4h case    4:*/		return 0x8214D7F8;
		  /* 8214D7F8h */ case    5:  		/* bc 4, CR0_GT, 12 */
		/* 8214D7F8h case    5:*/		if ( !regs.CR[0].gt ) { return 0x8214D804;  }
		/* 8214D7F8h case    5:*/		return 0x8214D7FC;
		  /* 8214D7FCh */ case    6:  		/* cmpwi CR6, R3, 2 */
		/* 8214D7FCh case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 8214D7FCh case    6:*/		return 0x8214D800;
		  /* 8214D800h */ case    7:  		/* bc 4, CR6_GT, 116 */
		/* 8214D800h case    7:*/		if ( !regs.CR[6].gt ) { return 0x8214D874;  }
		/* 8214D800h case    7:*/		return 0x8214D804;
	}
	return 0x8214D804;
} // Block from 8214D7E4h-8214D804h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214D804h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D804( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D804) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D804);
		  /* 8214D804h */ case    0:  		/* addi R29, R29, 12 */
		/* 8214D804h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xC);
		/* 8214D804h case    0:*/		return 0x8214D808;
		  /* 8214D808h */ case    1:  		/* cmplw CR6, R29, R28 */
		/* 8214D808h case    1:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R28);
		/* 8214D808h case    1:*/		return 0x8214D80C;
		  /* 8214D80Ch */ case    2:  		/* bc 12, CR6_LT, -180 */
		/* 8214D80Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x8214D758;  }
		/* 8214D80Ch case    2:*/		return 0x8214D810;
	}
	return 0x8214D810;
} // Block from 8214D804h-8214D810h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214D810h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D810);
		  /* 8214D810h */ case    0:  		/* li R11, 12 */
		/* 8214D810h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xC);
		/* 8214D810h case    0:*/		return 0x8214D814;
		  /* 8214D814h */ case    1:  		/* divwu R3, R30, R11 */
		/* 8214D814h case    1:*/		cpu::op::divwu<0>(regs,&regs.R3,regs.R30,regs.R11);
		/* 8214D814h case    1:*/		return 0x8214D818;
		  /* 8214D818h */ case    2:  		/* li R11, 0 */
		/* 8214D818h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8214D818h case    2:*/		return 0x8214D81C;
		  /* 8214D81Ch */ case    3:  		/* stw R3, <#[R1 + 96]> */
		/* 8214D81Ch case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000060) );
		/* 8214D81Ch case    3:*/		return 0x8214D820;
		  /* 8214D820h */ case    4:  		/* stw R26, <#[R1 + 108]> */
		/* 8214D820h case    4:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x0000006C) );
		/* 8214D820h case    4:*/		return 0x8214D824;
		  /* 8214D824h */ case    5:  		/* lis R10, -32235 */
		/* 8214D824h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8215);
		/* 8214D824h case    5:*/		return 0x8214D828;
		  /* 8214D828h */ case    6:  		/* stw R11, <#[R1 + 100]> */
		/* 8214D828h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 8214D828h case    6:*/		return 0x8214D82C;
		  /* 8214D82Ch */ case    7:  		/* li R8, 1 */
		/* 8214D82Ch case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8214D82Ch case    7:*/		return 0x8214D830;
		  /* 8214D830h */ case    8:  		/* stw R25, <#[R1 + 112]> */
		/* 8214D830h case    8:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000070) );
		/* 8214D830h case    8:*/		return 0x8214D834;
		  /* 8214D834h */ case    9:  		/* li R7, 1 */
		/* 8214D834h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8214D834h case    9:*/		return 0x8214D838;
		  /* 8214D838h */ case   10:  		/* stw R24, <#[R1 + 116]> */
		/* 8214D838h case   10:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000074) );
		/* 8214D838h case   10:*/		return 0x8214D83C;
		  /* 8214D83Ch */ case   11:  		/* addi R6, R1, 96 */
		/* 8214D83Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x60);
		/* 8214D83Ch case   11:*/		return 0x8214D840;
		  /* 8214D840h */ case   12:  		/* stw R27, <#[R1 + 104]> */
		/* 8214D840h case   12:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000068) );
		/* 8214D840h case   12:*/		return 0x8214D844;
		  /* 8214D844h */ case   13:  		/* addi R5, R10, -10856 */
		/* 8214D844h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFD598);
		/* 8214D844h case   13:*/		return 0x8214D848;
		  /* 8214D848h */ case   14:  		/* stw R23, <#[R1 + 120]> */
		/* 8214D848h case   14:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R1 + 0x00000078) );
		/* 8214D848h case   14:*/		return 0x8214D84C;
		  /* 8214D84Ch */ case   15:  		/* mr R4, R30 */
		/* 8214D84Ch case   15:*/		regs.R4 = regs.R30;
		/* 8214D84Ch case   15:*/		return 0x8214D850;
		  /* 8214D850h */ case   16:  		/* mr R3, R31 */
		/* 8214D850h case   16:*/		regs.R3 = regs.R31;
		/* 8214D850h case   16:*/		return 0x8214D854;
		  /* 8214D854h */ case   17:  		/* bl -2932 */
		/* 8214D854h case   17:*/		regs.LR = 0x8214D858; return 0x8214CCE0;
		/* 8214D854h case   17:*/		return 0x8214D858;
		  /* 8214D858h */ case   18:  		/* addi R1, R1, 224 */
		/* 8214D858h case   18:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 8214D858h case   18:*/		return 0x8214D85C;
		  /* 8214D85Ch */ case   19:  		/* b -771536 */
		/* 8214D85Ch case   19:*/		return 0x8209128C;
		/* 8214D85Ch case   19:*/		return 0x8214D860;
	}
	return 0x8214D860;
} // Block from 8214D810h-8214D860h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8214D860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D860);
		  /* 8214D860h */ case    0:  		/* addi R3, R1, 80 */
		/* 8214D860h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8214D860h case    0:*/		return 0x8214D864;
		  /* 8214D864h */ case    1:  		/* li R4, 1 */
		/* 8214D864h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8214D864h case    1:*/		return 0x8214D868;
		  /* 8214D868h */ case    2:  		/* li R5, 12 */
		/* 8214D868h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 8214D868h case    2:*/		return 0x8214D86C;
		  /* 8214D86Ch */ case    3:  		/* bl 41636 */
		/* 8214D86Ch case    3:*/		regs.LR = 0x8214D870; return 0x82157B10;
		/* 8214D86Ch case    3:*/		return 0x8214D870;
		  /* 8214D870h */ case    4:  		/* b -88 */
		/* 8214D870h case    4:*/		return 0x8214D818;
		/* 8214D870h case    4:*/		return 0x8214D874;
	}
	return 0x8214D874;
} // Block from 8214D860h-8214D874h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214D874h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D874( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D874) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D874);
		  /* 8214D874h */ case    0:  		/* addi R3, R1, 86 */
		/* 8214D874h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x56);
		/* 8214D874h case    0:*/		return 0x8214D878;
		  /* 8214D878h */ case    1:  		/* b -20 */
		/* 8214D878h case    1:*/		return 0x8214D864;
		/* 8214D878h case    1:*/		return 0x8214D87C;
		  /* 8214D87Ch */ case    2:  		/* nop */
		/* 8214D87Ch case    2:*/		cpu::op::nop();
		/* 8214D87Ch case    2:*/		return 0x8214D880;
	}
	return 0x8214D880;
} // Block from 8214D874h-8214D880h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214D880h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D880( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D880) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D880);
		  /* 8214D880h */ case    0:  		/* mfspr R12, LR */
		/* 8214D880h case    0:*/		regs.R12 = regs.LR;
		/* 8214D880h case    0:*/		return 0x8214D884;
		  /* 8214D884h */ case    1:  		/* bl -771648 */
		/* 8214D884h case    1:*/		regs.LR = 0x8214D888; return 0x82091244;
		/* 8214D884h case    1:*/		return 0x8214D888;
		  /* 8214D888h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8214D888h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8214D888h case    2:*/		return 0x8214D88C;
		  /* 8214D88Ch */ case    3:  		/* li R11, 0 */
		/* 8214D88Ch case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8214D88Ch case    3:*/		return 0x8214D890;
		  /* 8214D890h */ case    4:  		/* mr R29, R3 */
		/* 8214D890h case    4:*/		regs.R29 = regs.R3;
		/* 8214D890h case    4:*/		return 0x8214D894;
		  /* 8214D894h */ case    5:  		/* mr R28, R4 */
		/* 8214D894h case    5:*/		regs.R28 = regs.R4;
		/* 8214D894h case    5:*/		return 0x8214D898;
		  /* 8214D898h */ case    6:  		/* stw R11, <#[R1 + 80]> */
		/* 8214D898h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8214D898h case    6:*/		return 0x8214D89C;
		  /* 8214D89Ch */ case    7:  		/* lis R4, 9351 */
		/* 8214D89Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 8214D89Ch case    7:*/		return 0x8214D8A0;
		  /* 8214D8A0h */ case    8:  		/* stw R11, <#[R1 + 84]> */
		/* 8214D8A0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8214D8A0h case    8:*/		return 0x8214D8A4;
		  /* 8214D8A4h */ case    9:  		/* li R3, 4684 */
		/* 8214D8A4h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x124C);
		/* 8214D8A4h case    9:*/		return 0x8214D8A8;
		  /* 8214D8A8h */ case   10:  		/* mr R27, R5 */
		/* 8214D8A8h case   10:*/		regs.R27 = regs.R5;
		/* 8214D8A8h case   10:*/		return 0x8214D8AC;
		  /* 8214D8ACh */ case   11:  		/* mr R26, R6 */
		/* 8214D8ACh case   11:*/		regs.R26 = regs.R6;
		/* 8214D8ACh case   11:*/		return 0x8214D8B0;
		  /* 8214D8B0h */ case   12:  		/* mr R25, R7 */
		/* 8214D8B0h case   12:*/		regs.R25 = regs.R7;
		/* 8214D8B0h case   12:*/		return 0x8214D8B4;
		  /* 8214D8B4h */ case   13:  		/* mr R23, R8 */
		/* 8214D8B4h case   13:*/		regs.R23 = regs.R8;
		/* 8214D8B4h case   13:*/		return 0x8214D8B8;
		  /* 8214D8B8h */ case   14:  		/* mr R24, R9 */
		/* 8214D8B8h case   14:*/		regs.R24 = regs.R9;
		/* 8214D8B8h case   14:*/		return 0x8214D8BC;
		  /* 8214D8BCh */ case   15:  		/* mr R30, R10 */
		/* 8214D8BCh case   15:*/		regs.R30 = regs.R10;
		/* 8214D8BCh case   15:*/		return 0x8214D8C0;
		  /* 8214D8C0h */ case   16:  		/* bl -808640 */
		/* 8214D8C0h case   16:*/		regs.LR = 0x8214D8C4; return 0x82088200;
		/* 8214D8C0h case   16:*/		return 0x8214D8C4;
		  /* 8214D8C4h */ case   17:  		/* or. R31, R3, R3 */
		/* 8214D8C4h case   17:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8214D8C4h case   17:*/		return 0x8214D8C8;
		  /* 8214D8C8h */ case   18:  		/* bc 4, CR0_EQ, 16 */
		/* 8214D8C8h case   18:*/		if ( !regs.CR[0].eq ) { return 0x8214D8D8;  }
		/* 8214D8C8h case   18:*/		return 0x8214D8CC;
		  /* 8214D8CCh */ case   19:  		/* lis R28, -32761 */
		/* 8214D8CCh case   19:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8007);
		/* 8214D8CCh case   19:*/		return 0x8214D8D0;
		  /* 8214D8D0h */ case   20:  		/* ori R28, R28, 14 */
		/* 8214D8D0h case   20:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R28,0xE);
		/* 8214D8D0h case   20:*/		return 0x8214D8D4;
		  /* 8214D8D4h */ case   21:  		/* b 176 */
		/* 8214D8D4h case   21:*/		return 0x8214D984;
		/* 8214D8D4h case   21:*/		return 0x8214D8D8;
	}
	return 0x8214D8D8;
} // Block from 8214D880h-8214D8D8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8214D8D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D8D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D8D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D8D8);
		  /* 8214D8D8h */ case    0:  		/* addic R11, R30, -1 */
		/* 8214D8D8h case    0:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R30,0xFFFFFFFF);
		/* 8214D8D8h case    0:*/		return 0x8214D8DC;
		  /* 8214D8DCh */ case    1:  		/* mr R7, R24 */
		/* 8214D8DCh case    1:*/		regs.R7 = regs.R24;
		/* 8214D8DCh case    1:*/		return 0x8214D8E0;
		  /* 8214D8E0h */ case    2:  		/* subfe R8, R11, R30 */
		/* 8214D8E0h case    2:*/		cpu::op::subfe<0>(regs,&regs.R8,regs.R11,regs.R30);
		/* 8214D8E0h case    2:*/		return 0x8214D8E4;
		  /* 8214D8E4h */ case    3:  		/* mr R6, R25 */
		/* 8214D8E4h case    3:*/		regs.R6 = regs.R25;
		/* 8214D8E4h case    3:*/		return 0x8214D8E8;
		  /* 8214D8E8h */ case    4:  		/* mr R5, R28 */
		/* 8214D8E8h case    4:*/		regs.R5 = regs.R28;
		/* 8214D8E8h case    4:*/		return 0x8214D8EC;
		  /* 8214D8ECh */ case    5:  		/* mr R4, R29 */
		/* 8214D8ECh case    5:*/		regs.R4 = regs.R29;
		/* 8214D8ECh case    5:*/		return 0x8214D8F0;
		  /* 8214D8F0h */ case    6:  		/* mr R3, R31 */
		/* 8214D8F0h case    6:*/		regs.R3 = regs.R31;
		/* 8214D8F0h case    6:*/		return 0x8214D8F4;
		  /* 8214D8F4h */ case    7:  		/* bl -2012 */
		/* 8214D8F4h case    7:*/		regs.LR = 0x8214D8F8; return 0x8214D118;
		/* 8214D8F4h case    7:*/		return 0x8214D8F8;
		  /* 8214D8F8h */ case    8:  		/* lis R11, -32235 */
		/* 8214D8F8h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8215);
		/* 8214D8F8h case    8:*/		return 0x8214D8FC;
		  /* 8214D8FCh */ case    9:  		/* li R8, 1 */
		/* 8214D8FCh case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8214D8FCh case    9:*/		return 0x8214D900;
	}
	return 0x8214D900;
} // Block from 8214D8D8h-8214D900h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8214D900h
// Function '?ProcessStateList@XGRAPHICS@@YAJPAU_CS_COMPILED_SHADER@1@PAUXMicrocodeBuilder@@PATGPU_PROGRAMCONTROL@@PATGPU_CONTEXTMISC@@_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D900( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D900) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D900);
		  /* 8214D900h */ case    0:  		/* li R7, 0 */
		/* 8214D900h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8214D900h case    0:*/		return 0x8214D904;
		  /* 8214D904h */ case    1:  		/* mr R6, R31 */
		/* 8214D904h case    1:*/		regs.R6 = regs.R31;
		/* 8214D904h case    1:*/		return 0x8214D908;
		  /* 8214D908h */ case    2:  		/* addi R5, R11, -15176 */
		/* 8214D908h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFC4B8);
		/* 8214D908h case    2:*/		return 0x8214D90C;
		  /* 8214D90Ch */ case    3:  		/* mr R4, R26 */
		/* 8214D90Ch case    3:*/		regs.R4 = regs.R26;
		/* 8214D90Ch case    3:*/		return 0x8214D910;
		  /* 8214D910h */ case    4:  		/* mr R3, R27 */
		/* 8214D910h case    4:*/		regs.R3 = regs.R27;
		/* 8214D910h case    4:*/		return 0x8214D914;
		  /* 8214D914h */ case    5:  		/* bl -3124 */
		/* 8214D914h case    5:*/		regs.LR = 0x8214D918; return 0x8214CCE0;
		/* 8214D914h case    5:*/		return 0x8214D918;
		  /* 8214D918h */ case    6:  		/* addi R5, R1, 84 */
		/* 8214D918h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 8214D918h case    6:*/		return 0x8214D91C;
		  /* 8214D91Ch */ case    7:  		/* addi R4, R1, 80 */
		/* 8214D91Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8214D91Ch case    7:*/		return 0x8214D920;
		  /* 8214D920h */ case    8:  		/* mr R3, R31 */
		/* 8214D920h case    8:*/		regs.R3 = regs.R31;
		/* 8214D920h case    8:*/		return 0x8214D924;
		  /* 8214D924h */ case    9:  		/* bl -1500 */
		/* 8214D924h case    9:*/		regs.LR = 0x8214D928; return 0x8214D348;
		/* 8214D924h case    9:*/		return 0x8214D928;
		  /* 8214D928h */ case   10:  		/* lwz R27, <#[R1 + 80]> */
		/* 8214D928h case   10:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000050) );
		/* 8214D928h case   10:*/		return 0x8214D92C;
		  /* 8214D92Ch */ case   11:  		/* or. R28, R3, R3 */
		/* 8214D92Ch case   11:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 8214D92Ch case   11:*/		return 0x8214D930;
		  /* 8214D930h */ case   12:  		/* bc 12, CR0_LT, 52 */
		/* 8214D930h case   12:*/		if ( regs.CR[0].lt ) { return 0x8214D964;  }
		/* 8214D930h case   12:*/		return 0x8214D934;
		  /* 8214D934h */ case   13:  		/* lwz R11, <#[R1 + 84]> */
		/* 8214D934h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8214D934h case   13:*/		return 0x8214D938;
		  /* 8214D938h */ case   14:  		/* li R10, 20 */
		/* 8214D938h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x14);
		/* 8214D938h case   14:*/		return 0x8214D93C;
		  /* 8214D93Ch */ case   15:  		/* divwu. R29, R11, R10 */
		/* 8214D93Ch case   15:*/		cpu::op::divwu<1>(regs,&regs.R29,regs.R11,regs.R10);
		/* 8214D93Ch case   15:*/		return 0x8214D940;
		  /* 8214D940h */ case   16:  		/* bc 12, CR0_EQ, 36 */
		/* 8214D940h case   16:*/		if ( regs.CR[0].eq ) { return 0x8214D964;  }
		/* 8214D940h case   16:*/		return 0x8214D944;
		  /* 8214D944h */ case   17:  		/* addi R30, R27, 2 */
		/* 8214D944h case   17:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R27,0x2);
		/* 8214D944h case   17:*/		return 0x8214D948;
		  /* 8214D948h */ case   18:  		/* addi R5, R30, 2 */
		/* 8214D948h case   18:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R30,0x2);
		/* 8214D948h case   18:*/		return 0x8214D94C;
		  /* 8214D94Ch */ case   19:  		/* lhz R4, <#[R30]> */
		/* 8214D94Ch case   19:*/		cpu::mem::load16z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 8214D94Ch case   19:*/		return 0x8214D950;
		  /* 8214D950h */ case   20:  		/* mr R3, R23 */
		/* 8214D950h case   20:*/		regs.R3 = regs.R23;
		/* 8214D950h case   20:*/		return 0x8214D954;
		  /* 8214D954h */ case   21:  		/* bl -931604 */
		/* 8214D954h case   21:*/		regs.LR = 0x8214D958; return 0x8206A240;
		/* 8214D954h case   21:*/		return 0x8214D958;
		  /* 8214D958h */ case   22:  		/* addic. R29, R29, -1 */
		/* 8214D958h case   22:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 8214D958h case   22:*/		return 0x8214D95C;
		  /* 8214D95Ch */ case   23:  		/* addi R30, R30, 20 */
		/* 8214D95Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x14);
		/* 8214D95Ch case   23:*/		return 0x8214D960;
		  /* 8214D960h */ case   24:  		/* bc 4, CR0_EQ, -24 */
		/* 8214D960h case   24:*/		if ( !regs.CR[0].eq ) { return 0x8214D948;  }
		/* 8214D960h case   24:*/		return 0x8214D964;
	}
	return 0x8214D964;
} // Block from 8214D900h-8214D964h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8214D964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D964);
		  /* 8214D964h */ case    0:  		/* lis R4, 9351 */
		/* 8214D964h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 8214D964h case    0:*/		return 0x8214D968;
		  /* 8214D968h */ case    1:  		/* mr R3, R31 */
		/* 8214D968h case    1:*/		regs.R3 = regs.R31;
		/* 8214D968h case    1:*/		return 0x8214D96C;
		  /* 8214D96Ch */ case    2:  		/* bl -808500 */
		/* 8214D96Ch case    2:*/		regs.LR = 0x8214D970; return 0x82088338;
		/* 8214D96Ch case    2:*/		return 0x8214D970;
		  /* 8214D970h */ case    3:  		/* cmplwi CR6, R27, 0 */
		/* 8214D970h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8214D970h case    3:*/		return 0x8214D974;
		  /* 8214D974h */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 8214D974h case    4:*/		if ( regs.CR[6].eq ) { return 0x8214D984;  }
		/* 8214D974h case    4:*/		return 0x8214D978;
		  /* 8214D978h */ case    5:  		/* lis R4, 9351 */
		/* 8214D978h case    5:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 8214D978h case    5:*/		return 0x8214D97C;
		  /* 8214D97Ch */ case    6:  		/* mr R3, R27 */
		/* 8214D97Ch case    6:*/		regs.R3 = regs.R27;
		/* 8214D97Ch case    6:*/		return 0x8214D980;
		  /* 8214D980h */ case    7:  		/* bl -808520 */
		/* 8214D980h case    7:*/		regs.LR = 0x8214D984; return 0x82088338;
		/* 8214D980h case    7:*/		return 0x8214D984;
	}
	return 0x8214D984;
} // Block from 8214D964h-8214D984h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214D984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D984);
		  /* 8214D984h */ case    0:  		/* mr R3, R28 */
		/* 8214D984h case    0:*/		regs.R3 = regs.R28;
		/* 8214D984h case    0:*/		return 0x8214D988;
		  /* 8214D988h */ case    1:  		/* addi R1, R1, 176 */
		/* 8214D988h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8214D988h case    1:*/		return 0x8214D98C;
		  /* 8214D98Ch */ case    2:  		/* b -771832 */
		/* 8214D98Ch case    2:*/		return 0x82091294;
		/* 8214D98Ch case    2:*/		return 0x8214D990;
	}
	return 0x8214D990;
} // Block from 8214D984h-8214D990h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214D990h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214D990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214D990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214D990);
		  /* 8214D990h */ case    0:  		/* mfspr R12, LR */
		/* 8214D990h case    0:*/		regs.R12 = regs.LR;
		/* 8214D990h case    0:*/		return 0x8214D994;
		  /* 8214D994h */ case    1:  		/* bl -771916 */
		/* 8214D994h case    1:*/		regs.LR = 0x8214D998; return 0x82091248;
		/* 8214D994h case    1:*/		return 0x8214D998;
		  /* 8214D998h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 8214D998h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 8214D998h case    2:*/		return 0x8214D99C;
		  /* 8214D99Ch */ case    3:  		/* mr R11, R3 */
		/* 8214D99Ch case    3:*/		regs.R11 = regs.R3;
		/* 8214D99Ch case    3:*/		return 0x8214D9A0;
		  /* 8214D9A0h */ case    4:  		/* mr R10, R4 */
		/* 8214D9A0h case    4:*/		regs.R10 = regs.R4;
		/* 8214D9A0h case    4:*/		return 0x8214D9A4;
		  /* 8214D9A4h */ case    5:  		/* mr R29, R5 */
		/* 8214D9A4h case    5:*/		regs.R29 = regs.R5;
		/* 8214D9A4h case    5:*/		return 0x8214D9A8;
		  /* 8214D9A8h */ case    6:  		/* li R5, 32 */
		/* 8214D9A8h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x20);
		/* 8214D9A8h case    6:*/		return 0x8214D9AC;
		  /* 8214D9ACh */ case    7:  		/* li R4, 2 */
		/* 8214D9ACh case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 8214D9ACh case    7:*/		return 0x8214D9B0;
		  /* 8214D9B0h */ case    8:  		/* mr R3, R7 */
		/* 8214D9B0h case    8:*/		regs.R3 = regs.R7;
		/* 8214D9B0h case    8:*/		return 0x8214D9B4;
		  /* 8214D9B4h */ case    9:  		/* mr R28, R6 */
		/* 8214D9B4h case    9:*/		regs.R28 = regs.R6;
		/* 8214D9B4h case    9:*/		return 0x8214D9B8;
		  /* 8214D9B8h */ case   10:  		/* mr R26, R7 */
		/* 8214D9B8h case   10:*/		regs.R26 = regs.R7;
		/* 8214D9B8h case   10:*/		return 0x8214D9BC;
		  /* 8214D9BCh */ case   11:  		/* add R25, R11, R10 */
		/* 8214D9BCh case   11:*/		cpu::op::add<0>(regs,&regs.R25,regs.R11,regs.R10);
		/* 8214D9BCh case   11:*/		return 0x8214D9C0;
		  /* 8214D9C0h */ case   12:  		/* addi R31, R11, 4 */
		/* 8214D9C0h case   12:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 8214D9C0h case   12:*/		return 0x8214D9C4;
		  /* 8214D9C4h */ case   13:  		/* bl -771716 */
		/* 8214D9C4h case   13:*/		regs.LR = 0x8214D9C8; return 0x82091340;
		/* 8214D9C4h case   13:*/		return 0x8214D9C8;
		  /* 8214D9C8h */ case   14:  		/* addi R11, R1, 128 */
		/* 8214D9C8h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 8214D9C8h case   14:*/		return 0x8214D9CC;
		  /* 8214D9CCh */ case   15:  		/* addi R10, R1, 96 */
		/* 8214D9CCh case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 8214D9CCh case   15:*/		return 0x8214D9D0;
		  /* 8214D9D0h */ case   16:  		/* li R30, 0 */
		/* 8214D9D0h case   16:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8214D9D0h case   16:*/		return 0x8214D9D4;
		  /* 8214D9D4h */ case   17:  		/* addi R9, R1, 80 */
		/* 8214D9D4h case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8214D9D4h case   17:*/		return 0x8214D9D8;
		  /* 8214D9D8h */ case   18:  		/* cmplw CR6, R31, R25 */
		/* 8214D9D8h case   18:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R25);
		/* 8214D9D8h case   18:*/		return 0x8214D9DC;
		  /* 8214D9DCh */ case   19:  		/* std R30, <#[R11]> */
		/* 8214D9DCh case   19:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 8214D9DCh case   19:*/		return 0x8214D9E0;
		  /* 8214D9E0h */ case   20:  		/* std R30, <#[R10]> */
		/* 8214D9E0h case   20:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R10 + 0x00000000) );
		/* 8214D9E0h case   20:*/		return 0x8214D9E4;
		  /* 8214D9E4h */ case   21:  		/* std R30, <#[R11 + 8]> */
		/* 8214D9E4h case   21:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 8214D9E4h case   21:*/		return 0x8214D9E8;
		  /* 8214D9E8h */ case   22:  		/* std R30, <#[R10 + 8]> */
		/* 8214D9E8h case   22:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R10 + 0x00000008) );
		/* 8214D9E8h case   22:*/		return 0x8214D9EC;
		  /* 8214D9ECh */ case   23:  		/* std R30, <#[R11 + 16]> */
		/* 8214D9ECh case   23:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R11 + 0x00000010) );
		/* 8214D9ECh case   23:*/		return 0x8214D9F0;
		  /* 8214D9F0h */ case   24:  		/* std R30, <#[R10 + 16]> */
		/* 8214D9F0h case   24:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R10 + 0x00000010) );
		/* 8214D9F0h case   24:*/		return 0x8214D9F4;
		  /* 8214D9F4h */ case   25:  		/* std R30, <#[R11 + 24]> */
		/* 8214D9F4h case   25:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R11 + 0x00000018) );
		/* 8214D9F4h case   25:*/		return 0x8214D9F8;
		  /* 8214D9F8h */ case   26:  		/* stw R30, <#[R9]> */
		/* 8214D9F8h case   26:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R9 + 0x00000000) );
		/* 8214D9F8h case   26:*/		return 0x8214D9FC;
		  /* 8214D9FCh */ case   27:  		/* std R30, <#[R10 + 24]> */
		/* 8214D9FCh case   27:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R10 + 0x00000018) );
		/* 8214D9FCh case   27:*/		return 0x8214DA00;
		  /* 8214DA00h */ case   28:  		/* bc 4, CR6_LT, 504 */
		/* 8214DA00h case   28:*/		if ( !regs.CR[6].lt ) { return 0x8214DBF8;  }
		/* 8214DA00h case   28:*/		return 0x8214DA04;
		  /* 8214DA04h */ case   29:  		/* lis R11, -32253 */
		/* 8214DA04h case   29:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214DA04h case   29:*/		return 0x8214DA08;
		  /* 8214DA08h */ case   30:  		/* li R27, 1 */
		/* 8214DA08h case   30:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 8214DA08h case   30:*/		return 0x8214DA0C;
		  /* 8214DA0Ch */ case   31:  		/* addi R24, R11, 28156 */
		/* 8214DA0Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0x6DFC);
		/* 8214DA0Ch case   31:*/		return 0x8214DA10;
		  /* 8214DA10h */ case   32:  		/* lwz R9, <#[R31]> */
		/* 8214DA10h case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 8214DA10h case   32:*/		return 0x8214DA14;
		  /* 8214DA14h */ case   33:  		/* cmplwi CR6, R9, 65535 */
		/* 8214DA14h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x0000FFFF);
		/* 8214DA14h case   33:*/		return 0x8214DA18;
		  /* 8214DA18h */ case   34:  		/* bc 12, CR6_EQ, 480 */
		/* 8214DA18h case   34:*/		if ( regs.CR[6].eq ) { return 0x8214DBF8;  }
		/* 8214DA18h case   34:*/		return 0x8214DA1C;
		  /* 8214DA1Ch */ case   35:  		/* rlwinm R10, R9, 0, 16, 31 */
		/* 8214DA1Ch case   35:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R9);
		/* 8214DA1Ch case   35:*/		return 0x8214DA20;
		  /* 8214DA20h */ case   36:  		/* addi R11, R31, 4 */
		/* 8214DA20h case   36:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 8214DA20h case   36:*/		return 0x8214DA24;
		  /* 8214DA24h */ case   37:  		/* cmplwi CR6, R10, 31 */
		/* 8214DA24h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000001F);
		/* 8214DA24h case   37:*/		return 0x8214DA28;
		  /* 8214DA28h */ case   38:  		/* bc 12, CR6_EQ, 368 */
		/* 8214DA28h case   38:*/		if ( regs.CR[6].eq ) { return 0x8214DB98;  }
		/* 8214DA28h case   38:*/		return 0x8214DA2C;
		  /* 8214DA2Ch */ case   39:  		/* cmplwi CR6, R10, 47 */
		/* 8214DA2Ch case   39:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000002F);
		/* 8214DA2Ch case   39:*/		return 0x8214DA30;
		  /* 8214DA30h */ case   40:  		/* bc 12, CR6_EQ, 236 */
		/* 8214DA30h case   40:*/		if ( regs.CR[6].eq ) { return 0x8214DB1C;  }
		/* 8214DA30h case   40:*/		return 0x8214DA34;
		  /* 8214DA34h */ case   41:  		/* cmplwi CR6, R10, 48 */
		/* 8214DA34h case   41:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000030);
		/* 8214DA34h case   41:*/		return 0x8214DA38;
		  /* 8214DA38h */ case   42:  		/* bc 12, CR6_EQ, 124 */
		/* 8214DA38h case   42:*/		if ( regs.CR[6].eq ) { return 0x8214DAB4;  }
		/* 8214DA38h case   42:*/		return 0x8214DA3C;
		  /* 8214DA3Ch */ case   43:  		/* cmplwi CR6, R10, 81 */
		/* 8214DA3Ch case   43:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000051);
		/* 8214DA3Ch case   43:*/		return 0x8214DA40;
		  /* 8214DA40h */ case   44:  		/* bc 12, CR6_EQ, 24 */
		/* 8214DA40h case   44:*/		if ( regs.CR[6].eq ) { return 0x8214DA58;  }
		/* 8214DA40h case   44:*/		return 0x8214DA44;
		  /* 8214DA44h */ case   45:  		/* cmplwi CR6, R10, 65534 */
		/* 8214DA44h case   45:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000FFFE);
		/* 8214DA44h case   45:*/		return 0x8214DA48;
		  /* 8214DA48h */ case   46:  		/* bc 4, CR6_EQ, 432 */
		/* 8214DA48h case   46:*/		if ( !regs.CR[6].eq ) { return 0x8214DBF8;  }
		/* 8214DA48h case   46:*/		return 0x8214DA4C;
		  /* 8214DA4Ch */ case   47:  		/* rlwinm R10, R9, 18, 15, 29 */
		/* 8214DA4Ch case   47:*/		cpu::op::rlwinm<0,18,15,29>(regs,&regs.R10,regs.R9);
		/* 8214DA4Ch case   47:*/		return 0x8214DA50;
		  /* 8214DA50h */ case   48:  		/* add R31, R10, R11 */
		/* 8214DA50h case   48:*/		cpu::op::add<0>(regs,&regs.R31,regs.R10,regs.R11);
		/* 8214DA50h case   48:*/		return 0x8214DA54;
		  /* 8214DA54h */ case   49:  		/* b 412 */
		/* 8214DA54h case   49:*/		return 0x8214DBF0;
		/* 8214DA54h case   49:*/		return 0x8214DA58;
	}
	return 0x8214DA58;
} // Block from 8214D990h-8214DA58h (50 instructions)

//////////////////////////////////////////////////////
// Block at 8214DA58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DA58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DA58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DA58);
		  /* 8214DA58h */ case    0:  		/* lwz R10, <#[R11]> */
		/* 8214DA58h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8214DA58h case    0:*/		return 0x8214DA5C;
		  /* 8214DA5Ch */ case    1:  		/* addi R31, R11, 4 */
		/* 8214DA5Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 8214DA5Ch case    1:*/		return 0x8214DA60;
		  /* 8214DA60h */ case    2:  		/* rlwinm R4, R10, 0, 21, 31 */
		/* 8214DA60h case    2:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R4,regs.R10);
		/* 8214DA60h case    2:*/		return 0x8214DA64;
		  /* 8214DA64h */ case    3:  		/* cmplwi CR6, R4, 256 */
		/* 8214DA64h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000100);
		/* 8214DA64h case    3:*/		return 0x8214DA68;
		  /* 8214DA68h */ case    4:  		/* bc 4, CR6_LT, 412 */
		/* 8214DA68h case    4:*/		if ( !regs.CR[6].lt ) { return 0x8214DC04;  }
		/* 8214DA68h case    4:*/		return 0x8214DA6C;
		  /* 8214DA6Ch */ case    5:  		/* rlwinm R10, R4, 29, 3, 29 */
		/* 8214DA6Ch case    5:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R4);
		/* 8214DA6Ch case    5:*/		return 0x8214DA70;
		  /* 8214DA70h */ case    6:  		/* addi R8, R1, 96 */
		/* 8214DA70h case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x60);
		/* 8214DA70h case    6:*/		return 0x8214DA74;
		  /* 8214DA74h */ case    7:  		/* rlwinm R9, R4, 0, 27, 31 */
		/* 8214DA74h case    7:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R4);
		/* 8214DA74h case    7:*/		return 0x8214DA78;
		  /* 8214DA78h */ case    8:  		/* rlwinm R11, R4, 27, 5, 31 */
		/* 8214DA78h case    8:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R4);
		/* 8214DA78h case    8:*/		return 0x8214DA7C;
		  /* 8214DA7Ch */ case    9:  		/* slw R9, R27, R9 */
		/* 8214DA7Ch case    9:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R27,regs.R9);
		/* 8214DA7Ch case    9:*/		return 0x8214DA80;
		  /* 8214DA80h */ case   10:  		/* lwzx R10, <#[R10 + R8]> */
		/* 8214DA80h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 8214DA80h case   10:*/		return 0x8214DA84;
		  /* 8214DA84h */ case   11:  		/* and. R10, R10, R9 */
		/* 8214DA84h case   11:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8214DA84h case   11:*/		return 0x8214DA88;
		  /* 8214DA88h */ case   12:  		/* bc 4, CR0_EQ, 392 */
		/* 8214DA88h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8214DC10;  }
		/* 8214DA88h case   12:*/		return 0x8214DA8C;
		  /* 8214DA8Ch */ case   13:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8214DA8Ch case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8214DA8Ch case   13:*/		return 0x8214DA90;
		  /* 8214DA90h */ case   14:  		/* addi R10, R1, 96 */
		/* 8214DA90h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 8214DA90h case   14:*/		return 0x8214DA94;
		  /* 8214DA94h */ case   15:  		/* mr R5, R31 */
		/* 8214DA94h case   15:*/		regs.R5 = regs.R31;
		/* 8214DA94h case   15:*/		return 0x8214DA98;
		  /* 8214DA98h */ case   16:  		/* mr R3, R28 */
		/* 8214DA98h case   16:*/		regs.R3 = regs.R28;
		/* 8214DA98h case   16:*/		return 0x8214DA9C;
		  /* 8214DA9Ch */ case   17:  		/* lwzx R8, <#[R11 + R10]> */
		/* 8214DA9Ch case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8214DA9Ch case   17:*/		return 0x8214DAA0;
		  /* 8214DAA0h */ case   18:  		/* or R9, R9, R8 */
		/* 8214DAA0h case   18:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8214DAA0h case   18:*/		return 0x8214DAA4;
		  /* 8214DAA4h */ case   19:  		/* stwx R9, <#[R11 + R10]> */
		/* 8214DAA4h case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8214DAA4h case   19:*/		return 0x8214DAA8;
		  /* 8214DAA8h */ case   20:  		/* bl -931944 */
		/* 8214DAA8h case   20:*/		regs.LR = 0x8214DAAC; return 0x8206A240;
		/* 8214DAA8h case   20:*/		return 0x8214DAAC;
		  /* 8214DAACh */ case   21:  		/* addi R31, R31, 16 */
		/* 8214DAACh case   21:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8214DAACh case   21:*/		return 0x8214DAB0;
		  /* 8214DAB0h */ case   22:  		/* b 320 */
		/* 8214DAB0h case   22:*/		return 0x8214DBF0;
		/* 8214DAB0h case   22:*/		return 0x8214DAB4;
	}
	return 0x8214DAB4;
} // Block from 8214DA58h-8214DAB4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8214DAB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DAB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DAB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DAB4);
		  /* 8214DAB4h */ case    0:  		/* lwz R10, <#[R11]> */
		/* 8214DAB4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8214DAB4h case    0:*/		return 0x8214DAB8;
		  /* 8214DAB8h */ case    1:  		/* addi R31, R11, 4 */
		/* 8214DAB8h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 8214DAB8h case    1:*/		return 0x8214DABC;
		  /* 8214DABCh */ case    2:  		/* rlwinm R11, R10, 0, 21, 31 */
		/* 8214DABCh case    2:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R11,regs.R10);
		/* 8214DABCh case    2:*/		return 0x8214DAC0;
		  /* 8214DAC0h */ case    3:  		/* cmplwi CR6, R11, 16 */
		/* 8214DAC0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000010);
		/* 8214DAC0h case    3:*/		return 0x8214DAC4;
		  /* 8214DAC4h */ case    4:  		/* bc 4, CR6_LT, 344 */
		/* 8214DAC4h case    4:*/		if ( !regs.CR[6].lt ) { return 0x8214DC1C;  }
		/* 8214DAC4h case    4:*/		return 0x8214DAC8;
		  /* 8214DAC8h */ case    5:  		/* rlwinm R9, R11, 29, 3, 29 */
		/* 8214DAC8h case    5:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R9,regs.R11);
		/* 8214DAC8h case    5:*/		return 0x8214DACC;
		  /* 8214DACCh */ case    6:  		/* addi R7, R1, 80 */
		/* 8214DACCh case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8214DACCh case    6:*/		return 0x8214DAD0;
		  /* 8214DAD0h */ case    7:  		/* rlwinm R8, R11, 0, 27, 31 */
		/* 8214DAD0h case    7:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R11);
		/* 8214DAD0h case    7:*/		return 0x8214DAD4;
		  /* 8214DAD4h */ case    8:  		/* rlwinm R10, R11, 27, 5, 31 */
		/* 8214DAD4h case    8:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R11);
		/* 8214DAD4h case    8:*/		return 0x8214DAD8;
	}
	return 0x8214DAD8;
} // Block from 8214DAB4h-8214DAD8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214DAD8h
// Function '?Initialize@ConstantRenumberingTable@XGRAPHICS@@QAAJPBKKPAUID3DXConstantTable@@PAU_CS_COMPILED_SHADER@2@_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DAD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DAD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DAD8);
		  /* 8214DAD8h */ case    0:  		/* slw R8, R27, R8 */
		/* 8214DAD8h case    0:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R27,regs.R8);
		/* 8214DAD8h case    0:*/		return 0x8214DADC;
		  /* 8214DADCh */ case    1:  		/* lwzx R9, <#[R9 + R7]> */
		/* 8214DADCh case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R7 + 0x00000000) );
		/* 8214DADCh case    1:*/		return 0x8214DAE0;
		  /* 8214DAE0h */ case    2:  		/* and. R9, R9, R8 */
		/* 8214DAE0h case    2:*/		cpu::op::and<1>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8214DAE0h case    2:*/		return 0x8214DAE4;
		  /* 8214DAE4h */ case    3:  		/* bc 4, CR0_EQ, 324 */
		/* 8214DAE4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8214DC28;  }
		/* 8214DAE4h case    3:*/		return 0x8214DAE8;
		  /* 8214DAE8h */ case    4:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8214DAE8h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8214DAE8h case    4:*/		return 0x8214DAEC;
		  /* 8214DAECh */ case    5:  		/* addi R9, R1, 80 */
		/* 8214DAECh case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8214DAECh case    5:*/		return 0x8214DAF0;
		  /* 8214DAF0h */ case    6:  		/* mr R4, R11 */
		/* 8214DAF0h case    6:*/		regs.R4 = regs.R11;
		/* 8214DAF0h case    6:*/		return 0x8214DAF4;
		  /* 8214DAF4h */ case    7:  		/* cmpwi CR6, R29, 0 */
		/* 8214DAF4h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 8214DAF4h case    7:*/		return 0x8214DAF8;
		  /* 8214DAF8h */ case    8:  		/* lwzx R7, <#[R10 + R9]> */
		/* 8214DAF8h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8214DAF8h case    8:*/		return 0x8214DAFC;
		  /* 8214DAFCh */ case    9:  		/* or R8, R8, R7 */
		/* 8214DAFCh case    9:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R7);
		/* 8214DAFCh case    9:*/		return 0x8214DB00;
		  /* 8214DB00h */ case   10:  		/* stwx R8, <#[R10 + R9]> */
		/* 8214DB00h case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8214DB00h case   10:*/		return 0x8214DB04;
		  /* 8214DB04h */ case   11:  		/* bc 12, CR6_EQ, 8 */
		/* 8214DB04h case   11:*/		if ( regs.CR[6].eq ) { return 0x8214DB0C;  }
		/* 8214DB04h case   11:*/		return 0x8214DB08;
		  /* 8214DB08h */ case   12:  		/* addi R4, R11, 16 */
		/* 8214DB08h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x10);
		/* 8214DB08h case   12:*/		return 0x8214DB0C;
	}
	return 0x8214DB0C;
} // Block from 8214DAD8h-8214DB0Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214DB0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DB0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DB0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DB0C);
		  /* 8214DB0Ch */ case    0:  		/* mr R5, R31 */
		/* 8214DB0Ch case    0:*/		regs.R5 = regs.R31;
		/* 8214DB0Ch case    0:*/		return 0x8214DB10;
		  /* 8214DB10h */ case    1:  		/* mr R3, R28 */
		/* 8214DB10h case    1:*/		regs.R3 = regs.R28;
		/* 8214DB10h case    1:*/		return 0x8214DB14;
		  /* 8214DB14h */ case    2:  		/* bl -925356 */
		/* 8214DB14h case    2:*/		regs.LR = 0x8214DB18; return 0x8206BC68;
		/* 8214DB14h case    2:*/		return 0x8214DB18;
		  /* 8214DB18h */ case    3:  		/* b -108 */
		/* 8214DB18h case    3:*/		return 0x8214DAAC;
		/* 8214DB18h case    3:*/		return 0x8214DB1C;
	}
	return 0x8214DB1C;
} // Block from 8214DB0Ch-8214DB1Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214DB1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DB1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DB1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DB1C);
		  /* 8214DB1Ch */ case    0:  		/* lwz R10, <#[R11]> */
		/* 8214DB1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8214DB1Ch case    0:*/		return 0x8214DB20;
		  /* 8214DB20h */ case    1:  		/* addi R7, R11, 4 */
		/* 8214DB20h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x4);
		/* 8214DB20h case    1:*/		return 0x8214DB24;
		  /* 8214DB24h */ case    2:  		/* rlwinm R11, R10, 0, 21, 31 */
		/* 8214DB24h case    2:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R11,regs.R10);
		/* 8214DB24h case    2:*/		return 0x8214DB28;
		  /* 8214DB28h */ case    3:  		/* cmplwi CR6, R11, 128 */
		/* 8214DB28h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 8214DB28h case    3:*/		return 0x8214DB2C;
		  /* 8214DB2Ch */ case    4:  		/* bc 4, CR6_LT, 264 */
		/* 8214DB2Ch case    4:*/		if ( !regs.CR[6].lt ) { return 0x8214DC34;  }
		/* 8214DB2Ch case    4:*/		return 0x8214DB30;
		  /* 8214DB30h */ case    5:  		/* rlwinm R9, R11, 29, 3, 29 */
		/* 8214DB30h case    5:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R9,regs.R11);
		/* 8214DB30h case    5:*/		return 0x8214DB34;
		  /* 8214DB34h */ case    6:  		/* addi R6, R1, 128 */
		/* 8214DB34h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 8214DB34h case    6:*/		return 0x8214DB38;
		  /* 8214DB38h */ case    7:  		/* rlwinm R8, R11, 0, 27, 31 */
		/* 8214DB38h case    7:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R11);
		/* 8214DB38h case    7:*/		return 0x8214DB3C;
		  /* 8214DB3Ch */ case    8:  		/* rlwinm R10, R11, 27, 5, 31 */
		/* 8214DB3Ch case    8:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R11);
		/* 8214DB3Ch case    8:*/		return 0x8214DB40;
		  /* 8214DB40h */ case    9:  		/* slw R8, R27, R8 */
		/* 8214DB40h case    9:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R27,regs.R8);
		/* 8214DB40h case    9:*/		return 0x8214DB44;
		  /* 8214DB44h */ case   10:  		/* lwzx R9, <#[R9 + R6]> */
		/* 8214DB44h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R6 + 0x00000000) );
		/* 8214DB44h case   10:*/		return 0x8214DB48;
		  /* 8214DB48h */ case   11:  		/* and. R9, R9, R8 */
		/* 8214DB48h case   11:*/		cpu::op::and<1>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8214DB48h case   11:*/		return 0x8214DB4C;
		  /* 8214DB4Ch */ case   12:  		/* bc 4, CR0_EQ, 244 */
		/* 8214DB4Ch case   12:*/		if ( !regs.CR[0].eq ) { return 0x8214DC40;  }
		/* 8214DB4Ch case   12:*/		return 0x8214DB50;
		  /* 8214DB50h */ case   13:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8214DB50h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8214DB50h case   13:*/		return 0x8214DB54;
		  /* 8214DB54h */ case   14:  		/* addi R9, R1, 128 */
		/* 8214DB54h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 8214DB54h case   14:*/		return 0x8214DB58;
		  /* 8214DB58h */ case   15:  		/* mr R4, R11 */
		/* 8214DB58h case   15:*/		regs.R4 = regs.R11;
		/* 8214DB58h case   15:*/		return 0x8214DB5C;
		  /* 8214DB5Ch */ case   16:  		/* cmpwi CR6, R29, 0 */
		/* 8214DB5Ch case   16:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 8214DB5Ch case   16:*/		return 0x8214DB60;
		  /* 8214DB60h */ case   17:  		/* lwzx R6, <#[R10 + R9]> */
		/* 8214DB60h case   17:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8214DB60h case   17:*/		return 0x8214DB64;
		  /* 8214DB64h */ case   18:  		/* or R8, R6, R8 */
		/* 8214DB64h case   18:*/		cpu::op::or<0>(regs,&regs.R8,regs.R6,regs.R8);
		/* 8214DB64h case   18:*/		return 0x8214DB68;
		  /* 8214DB68h */ case   19:  		/* stwx R8, <#[R10 + R9]> */
		/* 8214DB68h case   19:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8214DB68h case   19:*/		return 0x8214DB6C;
		  /* 8214DB6Ch */ case   20:  		/* bc 12, CR6_EQ, 8 */
		/* 8214DB6Ch case   20:*/		if ( regs.CR[6].eq ) { return 0x8214DB74;  }
		/* 8214DB6Ch case   20:*/		return 0x8214DB70;
		  /* 8214DB70h */ case   21:  		/* addi R4, R11, 128 */
		/* 8214DB70h case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x80);
		/* 8214DB70h case   21:*/		return 0x8214DB74;
	}
	return 0x8214DB74;
} // Block from 8214DB1Ch-8214DB74h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8214DB74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DB74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DB74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DB74);
		  /* 8214DB74h */ case    0:  		/* lwz R11, <#[R7]> */
		/* 8214DB74h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 8214DB74h case    0:*/		return 0x8214DB78;
		  /* 8214DB78h */ case    1:  		/* addi R31, R7, 4 */
		/* 8214DB78h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R7,0x4);
		/* 8214DB78h case    1:*/		return 0x8214DB7C;
		  /* 8214DB7Ch */ case    2:  		/* mr R5, R27 */
		/* 8214DB7Ch case    2:*/		regs.R5 = regs.R27;
		/* 8214DB7Ch case    2:*/		return 0x8214DB80;
		  /* 8214DB80h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8214DB80h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214DB80h case    3:*/		return 0x8214DB84;
		  /* 8214DB84h */ case    4:  		/* bc 4, CR6_EQ, 8 */
		/* 8214DB84h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8214DB8C;  }
		/* 8214DB84h case    4:*/		return 0x8214DB88;
		  /* 8214DB88h */ case    5:  		/* mr R5, R30 */
		/* 8214DB88h case    5:*/		regs.R5 = regs.R30;
		/* 8214DB88h case    5:*/		return 0x8214DB8C;
	}
	return 0x8214DB8C;
} // Block from 8214DB74h-8214DB8Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214DB8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DB8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DB8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DB8C);
		  /* 8214DB8Ch */ case    0:  		/* mr R3, R28 */
		/* 8214DB8Ch case    0:*/		regs.R3 = regs.R28;
		/* 8214DB8Ch case    0:*/		return 0x8214DB90;
		  /* 8214DB90h */ case    1:  		/* bl -932200 */
		/* 8214DB90h case    1:*/		regs.LR = 0x8214DB94; return 0x8206A228;
		/* 8214DB90h case    1:*/		return 0x8214DB94;
		  /* 8214DB94h */ case    2:  		/* b 92 */
		/* 8214DB94h case    2:*/		return 0x8214DBF0;
		/* 8214DB94h case    2:*/		return 0x8214DB98;
	}
	return 0x8214DB98;
} // Block from 8214DB8Ch-8214DB98h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214DB98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DB98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DB98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DB98);
		  /* 8214DB98h */ case    0:  		/* lwz R9, <#[R11]> */
		/* 8214DB98h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8214DB98h case    0:*/		return 0x8214DB9C;
		  /* 8214DB9Ch */ case    1:  		/* lwzu R10, <#[R11 + 4]> */
		/* 8214DB9Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8214DB9Ch case    1:*/		return 0x8214DBA0;
		  /* 8214DBA0h */ case    2:  		/* mr R8, R10 */
		/* 8214DBA0h case    2:*/		regs.R8 = regs.R10;
		/* 8214DBA0h case    2:*/		return 0x8214DBA4;
		  /* 8214DBA4h */ case    3:  		/* addi R31, R11, 4 */
		/* 8214DBA4h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 8214DBA4h case    3:*/		return 0x8214DBA8;
		  /* 8214DBA8h */ case    4:  		/* rlwimi R8, R10, 12, 21, 23 */
		/* 8214DBA8h case    4:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R8,regs.R10);
		/* 8214DBA8h case    4:*/		return 0x8214DBAC;
		  /* 8214DBACh */ case    5:  		/* rlwinm R11, R8, 0, 19, 23 */
		/* 8214DBACh case    5:*/		cpu::op::rlwinm<0,0,19,23>(regs,&regs.R11,regs.R8);
		/* 8214DBACh case    5:*/		return 0x8214DBB0;
		  /* 8214DBB0h */ case    6:  		/* cmplwi CR6, R11, 2560 */
		/* 8214DBB0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000A00);
		/* 8214DBB0h case    6:*/		return 0x8214DBB4;
		  /* 8214DBB4h */ case    7:  		/* bc 4, CR6_EQ, 60 */
		/* 8214DBB4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8214DBF0;  }
		/* 8214DBB4h case    7:*/		return 0x8214DBB8;
		  /* 8214DBB8h */ case    8:  		/* rlwinm R11, R10, 0, 21, 31 */
		/* 8214DBB8h case    8:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R11,regs.R10);
		/* 8214DBB8h case    8:*/		return 0x8214DBBC;
		  /* 8214DBBCh */ case    9:  		/* cmplwi CR6, R11, 32 */
		/* 8214DBBCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000020);
		/* 8214DBBCh case    9:*/		return 0x8214DBC0;
		  /* 8214DBC0h */ case   10:  		/* bc 4, CR6_LT, 48 */
		/* 8214DBC0h case   10:*/		if ( !regs.CR[6].lt ) { return 0x8214DBF0;  }
		/* 8214DBC0h case   10:*/		return 0x8214DBC4;
		  /* 8214DBC4h */ case   11:  		/* rlwinm R10, R9, 5, 29, 31 */
		/* 8214DBC4h case   11:*/		cpu::op::rlwinm<0,5,29,31>(regs,&regs.R10,regs.R9);
		/* 8214DBC4h case   11:*/		return 0x8214DBC8;
		  /* 8214DBC8h */ case   12:  		/* cmplwi CR6, R10, 2 */
		/* 8214DBC8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000002);
		/* 8214DBC8h case   12:*/		return 0x8214DBCC;
		  /* 8214DBCCh */ case   13:  		/* bc 12, CR6_LT, 36 */
		/* 8214DBCCh case   13:*/		if ( regs.CR[6].lt ) { return 0x8214DBF0;  }
		/* 8214DBCCh case   13:*/		return 0x8214DBD0;
		  /* 8214DBD0h */ case   14:  		/* cmplwi CR6, R10, 4 */
		/* 8214DBD0h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 8214DBD0h case   14:*/		return 0x8214DBD4;
		  /* 8214DBD4h */ case   15:  		/* bc 12, CR6_GT, 28 */
		/* 8214DBD4h case   15:*/		if ( regs.CR[6].gt ) { return 0x8214DBF0;  }
		/* 8214DBD4h case   15:*/		return 0x8214DBD8;
		  /* 8214DBD8h */ case   16:  		/* cmpwi CR6, R29, 0 */
		/* 8214DBD8h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 8214DBD8h case   16:*/		return 0x8214DBDC;
		  /* 8214DBDCh */ case   17:  		/* bc 4, CR6_EQ, 8 */
		/* 8214DBDCh case   17:*/		if ( !regs.CR[6].eq ) { return 0x8214DBE4;  }
		/* 8214DBDCh case   17:*/		return 0x8214DBE0;
		  /* 8214DBE0h */ case   18:  		/* addi R11, R11, 16 */
		/* 8214DBE0h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 8214DBE0h case   18:*/		return 0x8214DBE4;
	}
	return 0x8214DBE4;
} // Block from 8214DB98h-8214DBE4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8214DBE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DBE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DBE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DBE4);
		  /* 8214DBE4h */ case    0:  		/* add R10, R10, R24 */
		/* 8214DBE4h case    0:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R24);
		/* 8214DBE4h case    0:*/		return 0x8214DBE8;
		  /* 8214DBE8h */ case    1:  		/* lbz R10, <#[R10 - 2]> */
		/* 8214DBE8h case    1:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R10 + 0xFFFFFFFE) );
		/* 8214DBE8h case    1:*/		return 0x8214DBEC;
		  /* 8214DBECh */ case    2:  		/* stbx R10, <#[R11 + R26]> */
		/* 8214DBECh case    2:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 8214DBECh case    2:*/		return 0x8214DBF0;
	}
	return 0x8214DBF0;
} // Block from 8214DBE4h-8214DBF0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214DBF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DBF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DBF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DBF0);
		  /* 8214DBF0h */ case    0:  		/* cmplw CR6, R31, R25 */
		/* 8214DBF0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R25);
		/* 8214DBF0h case    0:*/		return 0x8214DBF4;
		  /* 8214DBF4h */ case    1:  		/* bc 12, CR6_LT, -484 */
		/* 8214DBF4h case    1:*/		if ( regs.CR[6].lt ) { return 0x8214DA10;  }
		/* 8214DBF4h case    1:*/		return 0x8214DBF8;
	}
	return 0x8214DBF8;
} // Block from 8214DBF0h-8214DBF8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214DBF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DBF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DBF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DBF8);
		  /* 8214DBF8h */ case    0:  		/* li R3, 0 */
		/* 8214DBF8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214DBF8h case    0:*/		return 0x8214DBFC;
		  /* 8214DBFCh */ case    1:  		/* addi R1, R1, 240 */
		/* 8214DBFCh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 8214DBFCh case    1:*/		return 0x8214DC00;
		  /* 8214DC00h */ case    2:  		/* b -772456 */
		/* 8214DC00h case    2:*/		return 0x82091298;
		/* 8214DC00h case    2:*/		return 0x8214DC04;
	}
	return 0x8214DC04;
} // Block from 8214DBF8h-8214DC04h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214DC04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DC04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DC04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DC04);
		  /* 8214DC04h */ case    0:  		/* lis R3, -30602 */
		/* 8214DC04h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8876);
		/* 8214DC04h case    0:*/		return 0x8214DC08;
		  /* 8214DC08h */ case    1:  		/* ori R3, R3, 2935 */
		/* 8214DC08h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xB77);
		/* 8214DC08h case    1:*/		return 0x8214DC0C;
		  /* 8214DC0Ch */ case    2:  		/* b -16 */
		/* 8214DC0Ch case    2:*/		return 0x8214DBFC;
		/* 8214DC0Ch case    2:*/		return 0x8214DC10;
	}
	return 0x8214DC10;
} // Block from 8214DC04h-8214DC10h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214DC10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DC10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DC10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DC10);
		  /* 8214DC10h */ case    0:  		/* lis R3, -30602 */
		/* 8214DC10h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8876);
		/* 8214DC10h case    0:*/		return 0x8214DC14;
		  /* 8214DC14h */ case    1:  		/* ori R3, R3, 2944 */
		/* 8214DC14h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xB80);
		/* 8214DC14h case    1:*/		return 0x8214DC18;
		  /* 8214DC18h */ case    2:  		/* b -28 */
		/* 8214DC18h case    2:*/		return 0x8214DBFC;
		/* 8214DC18h case    2:*/		return 0x8214DC1C;
	}
	return 0x8214DC1C;
} // Block from 8214DC10h-8214DC1Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214DC1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DC1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DC1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DC1C);
		  /* 8214DC1Ch */ case    0:  		/* lis R3, -30602 */
		/* 8214DC1Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8876);
		/* 8214DC1Ch case    0:*/		return 0x8214DC20;
		  /* 8214DC20h */ case    1:  		/* ori R3, R3, 2934 */
		/* 8214DC20h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xB76);
		/* 8214DC20h case    1:*/		return 0x8214DC24;
		  /* 8214DC24h */ case    2:  		/* b -40 */
		/* 8214DC24h case    2:*/		return 0x8214DBFC;
		/* 8214DC24h case    2:*/		return 0x8214DC28;
	}
	return 0x8214DC28;
} // Block from 8214DC1Ch-8214DC28h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214DC28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DC28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DC28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DC28);
		  /* 8214DC28h */ case    0:  		/* lis R3, -30602 */
		/* 8214DC28h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8876);
		/* 8214DC28h case    0:*/		return 0x8214DC2C;
		  /* 8214DC2Ch */ case    1:  		/* ori R3, R3, 2943 */
		/* 8214DC2Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xB7F);
		/* 8214DC2Ch case    1:*/		return 0x8214DC30;
		  /* 8214DC30h */ case    2:  		/* b -52 */
		/* 8214DC30h case    2:*/		return 0x8214DBFC;
		/* 8214DC30h case    2:*/		return 0x8214DC34;
	}
	return 0x8214DC34;
} // Block from 8214DC28h-8214DC34h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214DC34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DC34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DC34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DC34);
		  /* 8214DC34h */ case    0:  		/* lis R3, -30602 */
		/* 8214DC34h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8876);
		/* 8214DC34h case    0:*/		return 0x8214DC38;
		  /* 8214DC38h */ case    1:  		/* ori R3, R3, 2933 */
		/* 8214DC38h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xB75);
		/* 8214DC38h case    1:*/		return 0x8214DC3C;
		  /* 8214DC3Ch */ case    2:  		/* b -64 */
		/* 8214DC3Ch case    2:*/		return 0x8214DBFC;
		/* 8214DC3Ch case    2:*/		return 0x8214DC40;
	}
	return 0x8214DC40;
} // Block from 8214DC34h-8214DC40h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214DC40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DC40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DC40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DC40);
		  /* 8214DC40h */ case    0:  		/* lis R3, -30602 */
		/* 8214DC40h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8876);
		/* 8214DC40h case    0:*/		return 0x8214DC44;
		  /* 8214DC44h */ case    1:  		/* ori R3, R3, 2942 */
		/* 8214DC44h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xB7E);
		/* 8214DC44h case    1:*/		return 0x8214DC48;
		  /* 8214DC48h */ case    2:  		/* b -76 */
		/* 8214DC48h case    2:*/		return 0x8214DBFC;
		/* 8214DC48h case    2:*/		return 0x8214DC4C;
		  /* 8214DC4Ch */ case    3:  		/* nop */
		/* 8214DC4Ch case    3:*/		cpu::op::nop();
		/* 8214DC4Ch case    3:*/		return 0x8214DC50;
	}
	return 0x8214DC50;
} // Block from 8214DC40h-8214DC50h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214DC50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DC50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DC50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DC50);
		  /* 8214DC50h */ case    0:  		/* mfspr R12, LR */
		/* 8214DC50h case    0:*/		regs.R12 = regs.LR;
		/* 8214DC50h case    0:*/		return 0x8214DC54;
		  /* 8214DC54h */ case    1:  		/* bl -772640 */
		/* 8214DC54h case    1:*/		regs.LR = 0x8214DC58; return 0x82091234;
		/* 8214DC54h case    1:*/		return 0x8214DC58;
		  /* 8214DC58h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 8214DC58h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 8214DC58h case    2:*/		return 0x8214DC5C;
		  /* 8214DC5Ch */ case    3:  		/* mr R23, R3 */
		/* 8214DC5Ch case    3:*/		regs.R23 = regs.R3;
		/* 8214DC5Ch case    3:*/		return 0x8214DC60;
		  /* 8214DC60h */ case    4:  		/* mr R3, R6 */
		/* 8214DC60h case    4:*/		regs.R3 = regs.R6;
		/* 8214DC60h case    4:*/		return 0x8214DC64;
		  /* 8214DC64h */ case    5:  		/* mr R22, R4 */
		/* 8214DC64h case    5:*/		regs.R22 = regs.R4;
		/* 8214DC64h case    5:*/		return 0x8214DC68;
		  /* 8214DC68h */ case    6:  		/* mr R24, R5 */
		/* 8214DC68h case    6:*/		regs.R24 = regs.R5;
		/* 8214DC68h case    6:*/		return 0x8214DC6C;
		  /* 8214DC6Ch */ case    7:  		/* mr R25, R6 */
		/* 8214DC6Ch case    7:*/		regs.R25 = regs.R6;
		/* 8214DC6Ch case    7:*/		return 0x8214DC70;
		  /* 8214DC70h */ case    8:  		/* mr R21, R7 */
		/* 8214DC70h case    8:*/		regs.R21 = regs.R7;
		/* 8214DC70h case    8:*/		return 0x8214DC74;
		  /* 8214DC74h */ case    9:  		/* mr R28, R8 */
		/* 8214DC74h case    9:*/		regs.R28 = regs.R8;
		/* 8214DC74h case    9:*/		return 0x8214DC78;
		  /* 8214DC78h */ case   10:  		/* mr R19, R9 */
		/* 8214DC78h case   10:*/		regs.R19 = regs.R9;
		/* 8214DC78h case   10:*/		return 0x8214DC7C;
		  /* 8214DC7Ch */ case   11:  		/* mr R20, R10 */
		/* 8214DC7Ch case   11:*/		regs.R20 = regs.R10;
		/* 8214DC7Ch case   11:*/		return 0x8214DC80;
		  /* 8214DC80h */ case   12:  		/* bl 64360 */
		/* 8214DC80h case   12:*/		regs.LR = 0x8214DC84; return 0x8215D7E8;
		/* 8214DC80h case   12:*/		return 0x8214DC84;
		  /* 8214DC84h */ case   13:  		/* lwz R11, <#[R3]> */
		/* 8214DC84h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8214DC84h case   13:*/		return 0x8214DC88;
		  /* 8214DC88h */ case   14:  		/* addi R30, R3, 8 */
		/* 8214DC88h case   14:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R3,0x8);
		/* 8214DC88h case   14:*/		return 0x8214DC8C;
		  /* 8214DC8Ch */ case   15:  		/* mr R29, R3 */
		/* 8214DC8Ch case   15:*/		regs.R29 = regs.R3;
		/* 8214DC8Ch case   15:*/		return 0x8214DC90;
		  /* 8214DC90h */ case   16:  		/* rlwinm R27, R11, 2, 0, 29 */
		/* 8214DC90h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R27,regs.R11);
		/* 8214DC90h case   16:*/		return 0x8214DC94;
		  /* 8214DC94h */ case   17:  		/* mr R26, R30 */
		/* 8214DC94h case   17:*/		regs.R26 = regs.R30;
		/* 8214DC94h case   17:*/		return 0x8214DC98;
		  /* 8214DC98h */ case   18:  		/* add R31, R30, R27 */
		/* 8214DC98h case   18:*/		cpu::op::add<0>(regs,&regs.R31,regs.R30,regs.R27);
		/* 8214DC98h case   18:*/		return 0x8214DC9C;
		  /* 8214DC9Ch */ case   19:  		/* cmplw CR6, R30, R31 */
		/* 8214DC9Ch case   19:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R31);
		/* 8214DC9Ch case   19:*/		return 0x8214DCA0;
		  /* 8214DCA0h */ case   20:  		/* bc 4, CR6_LT, 48 */
		/* 8214DCA0h case   20:*/		if ( !regs.CR[6].lt ) { return 0x8214DCD0;  }
		/* 8214DCA0h case   20:*/		return 0x8214DCA4;
		  /* 8214DCA4h */ case   21:  		/* li R5, 4 */
		/* 8214DCA4h case   21:*/		cpu::op::li<0>(regs,&regs.R5,0x4);
		/* 8214DCA4h case   21:*/		return 0x8214DCA8;
		  /* 8214DCA8h */ case   22:  		/* li R4, 45 */
		/* 8214DCA8h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x2D);
		/* 8214DCA8h case   22:*/		return 0x8214DCAC;
		  /* 8214DCACh */ case   23:  		/* mr R3, R26 */
		/* 8214DCACh case   23:*/		regs.R3 = regs.R26;
		/* 8214DCACh case   23:*/		return 0x8214DCB0;
		  /* 8214DCB0h */ case   24:  		/* bl 40544 */
		/* 8214DCB0h case   24:*/		regs.LR = 0x8214DCB4; return 0x82157B10;
		/* 8214DCB0h case   24:*/		return 0x8214DCB4;
		  /* 8214DCB4h */ case   25:  		/* cmpwi CR0, R3, 0 */
		/* 8214DCB4h case   25:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8214DCB4h case   25:*/		return 0x8214DCB8;
		  /* 8214DCB8h */ case   26:  		/* bc 4, CR0_GT, 12 */
		/* 8214DCB8h case   26:*/		if ( !regs.CR[0].gt ) { return 0x8214DCC4;  }
		/* 8214DCB8h case   26:*/		return 0x8214DCBC;
		  /* 8214DCBCh */ case   27:  		/* cmpwi CR6, R3, 2 */
		/* 8214DCBCh case   27:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 8214DCBCh case   27:*/		return 0x8214DCC0;
		  /* 8214DCC0h */ case   28:  		/* bc 4, CR6_GT, 96 */
		/* 8214DCC0h case   28:*/		if ( !regs.CR[6].gt ) { return 0x8214DD20;  }
		/* 8214DCC0h case   28:*/		return 0x8214DCC4;
	}
	return 0x8214DCC4;
} // Block from 8214DC50h-8214DCC4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8214DCC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DCC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DCC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DCC4);
		  /* 8214DCC4h */ case    0:  		/* addi R26, R26, 6 */
		/* 8214DCC4h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x6);
		/* 8214DCC4h case    0:*/		return 0x8214DCC8;
		  /* 8214DCC8h */ case    1:  		/* cmplw CR6, R26, R31 */
		/* 8214DCC8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R31);
		/* 8214DCC8h case    1:*/		return 0x8214DCCC;
		  /* 8214DCCCh */ case    2:  		/* bc 12, CR6_LT, -40 */
		/* 8214DCCCh case    2:*/		if ( regs.CR[6].lt ) { return 0x8214DCA4;  }
		/* 8214DCCCh case    2:*/		return 0x8214DCD0;
	}
	return 0x8214DCD0;
} // Block from 8214DCC4h-8214DCD0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214DCD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DCD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DCD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DCD0);
		  /* 8214DCD0h */ case    0:  		/* li R11, 12 */
		/* 8214DCD0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0xC);
		/* 8214DCD0h case    0:*/		return 0x8214DCD4;
		  /* 8214DCD4h */ case    1:  		/* divwu R3, R27, R11 */
		/* 8214DCD4h case    1:*/		cpu::op::divwu<0>(regs,&regs.R3,regs.R27,regs.R11);
		/* 8214DCD4h case    1:*/		return 0x8214DCD8;
		  /* 8214DCD8h */ case    2:  		/* mulli R11, R3, 12 */
		/* 8214DCD8h case    2:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R3,0xC);
		/* 8214DCD8h case    2:*/		return 0x8214DCDC;
		  /* 8214DCDCh */ case    3:  		/* rlwinm. R11, R11, 30, 2, 31 */
		/* 8214DCDCh case    3:*/		cpu::op::rlwinm<1,30,2,31>(regs,&regs.R11,regs.R11);
		/* 8214DCDCh case    3:*/		return 0x8214DCE0;
		  /* 8214DCE0h */ case    4:  		/* bc 12, CR0_EQ, 40 */
		/* 8214DCE0h case    4:*/		if ( regs.CR[0].eq ) { return 0x8214DD08;  }
		/* 8214DCE0h case    4:*/		return 0x8214DCE4;
		  /* 8214DCE4h */ case    5:  		/* mtspr CTR, R11 */
		/* 8214DCE4h case    5:*/		regs.CTR = regs.R11;
		/* 8214DCE4h case    5:*/		return 0x8214DCE8;
		  /* 8214DCE8h */ case    6:  		/* addi R11, R30, -4 */
		/* 8214DCE8h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFFC);
		/* 8214DCE8h case    6:*/		return 0x8214DCEC;
		  /* 8214DCECh */ case    7:  		/* lwz R10, <#[R11 + 4]> */
		/* 8214DCECh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8214DCECh case    7:*/		return 0x8214DCF0;
		  /* 8214DCF0h */ case    8:  		/* rlwinm R9, R10, 8, 24, 31 */
		/* 8214DCF0h case    8:*/		cpu::op::rlwinm<0,8,24,31>(regs,&regs.R9,regs.R10);
		/* 8214DCF0h case    8:*/		return 0x8214DCF4;
		  /* 8214DCF4h */ case    9:  		/* rlwimi R9, R10, 24, 16, 23 */
		/* 8214DCF4h case    9:*/		cpu::op::rlwimi<0,24,16,23>(regs,&regs.R9,regs.R10);
		/* 8214DCF4h case    9:*/		return 0x8214DCF8;
		  /* 8214DCF8h */ case   10:  		/* rlwimi R9, R10, 8, 8, 15 */
		/* 8214DCF8h case   10:*/		cpu::op::rlwimi<0,8,8,15>(regs,&regs.R9,regs.R10);
		/* 8214DCF8h case   10:*/		return 0x8214DCFC;
		  /* 8214DCFCh */ case   11:  		/* rlwimi R9, R10, 24, 0, 7 */
		/* 8214DCFCh case   11:*/		cpu::op::rlwimi<0,24,0,7>(regs,&regs.R9,regs.R10);
		/* 8214DCFCh case   11:*/		return 0x8214DD00;
		  /* 8214DD00h */ case   12:  		/* stwu R9, <#[R11 + 4]> */
		/* 8214DD00h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8214DD00h case   12:*/		return 0x8214DD04;
		  /* 8214DD04h */ case   13:  		/* bc 16, CR0_LT, -24 */
		/* 8214DD04h case   13:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8214DCEC;  }
		/* 8214DD04h case   13:*/		return 0x8214DD08;
	}
	return 0x8214DD08;
} // Block from 8214DCD0h-8214DD08h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8214DD08h
// Function '?CreateCompilerConstantDeclarations@ConstantRenumberingTable@XGRAPHICS@@QAAJPAPAKPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DD08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DD08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DD08);
		  /* 8214DD08h */ case    0:  		/* bl -922568 */
		/* 8214DD08h case    0:*/		regs.LR = 0x8214DD0C; return 0x8206C940;
		/* 8214DD08h case    0:*/		return 0x8214DD0C;
		  /* 8214DD0Ch */ case    1:  		/* or. R31, R3, R3 */
		/* 8214DD0Ch case    1:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8214DD0Ch case    1:*/		return 0x8214DD10;
		  /* 8214DD10h */ case    2:  		/* bc 4, CR0_EQ, 36 */
		/* 8214DD10h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8214DD34;  }
		/* 8214DD10h case    2:*/		return 0x8214DD14;
		  /* 8214DD14h */ case    3:  		/* lis R27, -32761 */
		/* 8214DD14h case    3:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8007);
		/* 8214DD14h case    3:*/		return 0x8214DD18;
		  /* 8214DD18h */ case    4:  		/* ori R27, R27, 14 */
		/* 8214DD18h case    4:*/		cpu::op::ori<0>(regs,&regs.R27,regs.R27,0xE);
		/* 8214DD18h case    4:*/		return 0x8214DD1C;
		  /* 8214DD1Ch */ case    5:  		/* b 308 */
		/* 8214DD1Ch case    5:*/		return 0x8214DE50;
		/* 8214DD1Ch case    5:*/		return 0x8214DD20;
	}
	return 0x8214DD20;
} // Block from 8214DD08h-8214DD20h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214DD20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DD20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DD20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DD20);
		  /* 8214DD20h */ case    0:  		/* li R5, 12 */
		/* 8214DD20h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0xC);
		/* 8214DD20h case    0:*/		return 0x8214DD24;
		  /* 8214DD24h */ case    1:  		/* li R4, 1 */
		/* 8214DD24h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8214DD24h case    1:*/		return 0x8214DD28;
		  /* 8214DD28h */ case    2:  		/* mr R3, R26 */
		/* 8214DD28h case    2:*/		regs.R3 = regs.R26;
		/* 8214DD28h case    2:*/		return 0x8214DD2C;
		  /* 8214DD2Ch */ case    3:  		/* bl 40420 */
		/* 8214DD2Ch case    3:*/		regs.LR = 0x8214DD30; return 0x82157B10;
		/* 8214DD2Ch case    3:*/		return 0x8214DD30;
		  /* 8214DD30h */ case    4:  		/* b -88 */
		/* 8214DD30h case    4:*/		return 0x8214DCD8;
		/* 8214DD30h case    4:*/		return 0x8214DD34;
	}
	return 0x8214DD34;
} // Block from 8214DD20h-8214DD34h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214DD34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DD34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DD34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DD34);
		  /* 8214DD34h */ case    0:  		/* stw R31, <#[R21]> */
		/* 8214DD34h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R21 + 0x00000000) );
		/* 8214DD34h case    0:*/		return 0x8214DD38;
		  /* 8214DD38h */ case    1:  		/* li R4, 50 */
		/* 8214DD38h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x32);
		/* 8214DD38h case    1:*/		return 0x8214DD3C;
		  /* 8214DD3Ch */ case    2:  		/* cmpwi CR6, R28, 0 */
		/* 8214DD3Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 8214DD3Ch case    2:*/		return 0x8214DD40;
		  /* 8214DD40h */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 8214DD40h case    3:*/		if ( regs.CR[6].eq ) { return 0x8214DD48;  }
		/* 8214DD40h case    3:*/		return 0x8214DD44;
		  /* 8214DD44h */ case    4:  		/* li R4, 54 */
		/* 8214DD44h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x36);
		/* 8214DD44h case    4:*/		return 0x8214DD48;
	}
	return 0x8214DD48;
} // Block from 8214DD34h-8214DD48h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214DD48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DD48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DD48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DD48);
		  /* 8214DD48h */ case    0:  		/* mr R3, R31 */
		/* 8214DD48h case    0:*/		regs.R3 = regs.R31;
		/* 8214DD48h case    0:*/		return 0x8214DD4C;
		  /* 8214DD4Ch */ case    1:  		/* bl -917828 */
		/* 8214DD4Ch case    1:*/		regs.LR = 0x8214DD50; return 0x8206DC08;
		/* 8214DD4Ch case    1:*/		return 0x8214DD50;
		  /* 8214DD50h */ case    2:  		/* mr R5, R28 */
		/* 8214DD50h case    2:*/		regs.R5 = regs.R28;
		/* 8214DD50h case    2:*/		return 0x8214DD54;
		  /* 8214DD54h */ case    3:  		/* mr R4, R31 */
		/* 8214DD54h case    3:*/		regs.R4 = regs.R31;
		/* 8214DD54h case    3:*/		return 0x8214DD58;
		  /* 8214DD58h */ case    4:  		/* mr R3, R25 */
		/* 8214DD58h case    4:*/		regs.R3 = regs.R25;
		/* 8214DD58h case    4:*/		return 0x8214DD5C;
		  /* 8214DD5Ch */ case    5:  		/* bl -2356 */
		/* 8214DD5Ch case    5:*/		regs.LR = 0x8214DD60; return 0x8214D428;
		/* 8214DD5Ch case    5:*/		return 0x8214DD60;
		  /* 8214DD60h */ case    6:  		/* lwz R11, <#[R29]> */
		/* 8214DD60h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8214DD60h case    6:*/		return 0x8214DD64;
		  /* 8214DD64h */ case    7:  		/* li R10, 1 */
		/* 8214DD64h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8214DD64h case    7:*/		return 0x8214DD68;
		  /* 8214DD68h */ case    8:  		/* mr R9, R25 */
		/* 8214DD68h case    8:*/		regs.R9 = regs.R25;
		/* 8214DD68h case    8:*/		return 0x8214DD6C;
		  /* 8214DD6Ch */ case    9:  		/* mr R8, R31 */
		/* 8214DD6Ch case    9:*/		regs.R8 = regs.R31;
		/* 8214DD6Ch case    9:*/		return 0x8214DD70;
		  /* 8214DD70h */ case   10:  		/* mr R7, R24 */
		/* 8214DD70h case   10:*/		regs.R7 = regs.R24;
		/* 8214DD70h case   10:*/		return 0x8214DD74;
		  /* 8214DD74h */ case   11:  		/* mr R5, R30 */
		/* 8214DD74h case   11:*/		regs.R5 = regs.R30;
		/* 8214DD74h case   11:*/		return 0x8214DD78;
		  /* 8214DD78h */ case   12:  		/* mr R4, R22 */
		/* 8214DD78h case   12:*/		regs.R4 = regs.R22;
		/* 8214DD78h case   12:*/		return 0x8214DD7C;
		  /* 8214DD7Ch */ case   13:  		/* mr R3, R23 */
		/* 8214DD7Ch case   13:*/		regs.R3 = regs.R23;
		/* 8214DD7Ch case   13:*/		return 0x8214DD80;
		  /* 8214DD80h */ case   14:  		/* rlwinm R6, R11, 2, 0, 29 */
		/* 8214DD80h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R11);
		/* 8214DD80h case   14:*/		return 0x8214DD84;
		  /* 8214DD84h */ case   15:  		/* bl -1284 */
		/* 8214DD84h case   15:*/		regs.LR = 0x8214DD88; return 0x8214D880;
		/* 8214DD84h case   15:*/		return 0x8214DD88;
		  /* 8214DD88h */ case   16:  		/* or. R27, R3, R3 */
		/* 8214DD88h case   16:*/		cpu::op::or<1>(regs,&regs.R27,regs.R3,regs.R3);
		/* 8214DD88h case   16:*/		return 0x8214DD8C;
		  /* 8214DD8Ch */ case   17:  		/* bc 12, CR0_LT, 196 */
		/* 8214DD8Ch case   17:*/		if ( regs.CR[0].lt ) { return 0x8214DE50;  }
		/* 8214DD8Ch case   17:*/		return 0x8214DD90;
		  /* 8214DD90h */ case   18:  		/* addi R7, R1, 96 */
		/* 8214DD90h case   18:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 8214DD90h case   18:*/		return 0x8214DD94;
		  /* 8214DD94h */ case   19:  		/* mr R6, R31 */
		/* 8214DD94h case   19:*/		regs.R6 = regs.R31;
		/* 8214DD94h case   19:*/		return 0x8214DD98;
		  /* 8214DD98h */ case   20:  		/* mr R5, R28 */
		/* 8214DD98h case   20:*/		regs.R5 = regs.R28;
		/* 8214DD98h case   20:*/		return 0x8214DD9C;
		  /* 8214DD9Ch */ case   21:  		/* mr R4, R22 */
		/* 8214DD9Ch case   21:*/		regs.R4 = regs.R22;
		/* 8214DD9Ch case   21:*/		return 0x8214DDA0;
		  /* 8214DDA0h */ case   22:  		/* mr R3, R23 */
		/* 8214DDA0h case   22:*/		regs.R3 = regs.R23;
		/* 8214DDA0h case   22:*/		return 0x8214DDA4;
		  /* 8214DDA4h */ case   23:  		/* bl -1044 */
		/* 8214DDA4h case   23:*/		regs.LR = 0x8214DDA8; return 0x8214D990;
		/* 8214DDA4h case   23:*/		return 0x8214DDA8;
		  /* 8214DDA8h */ case   24:  		/* or. R27, R3, R3 */
		/* 8214DDA8h case   24:*/		cpu::op::or<1>(regs,&regs.R27,regs.R3,regs.R3);
		/* 8214DDA8h case   24:*/		return 0x8214DDAC;
		  /* 8214DDACh */ case   25:  		/* bc 12, CR0_LT, 164 */
		/* 8214DDACh case   25:*/		if ( regs.CR[0].lt ) { return 0x8214DE50;  }
		/* 8214DDACh case   25:*/		return 0x8214DDB0;
		  /* 8214DDB0h */ case   26:  		/* cmplwi CR6, R24, 0 */
		/* 8214DDB0h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8214DDB0h case   26:*/		return 0x8214DDB4;
		  /* 8214DDB4h */ case   27:  		/* bc 12, CR6_EQ, 68 */
		/* 8214DDB4h case   27:*/		if ( regs.CR[6].eq ) { return 0x8214DDF8;  }
		/* 8214DDB4h case   27:*/		return 0x8214DDB8;
		  /* 8214DDB8h */ case   28:  		/* lwz R11, <#[R24]> */
		/* 8214DDB8h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 8214DDB8h case   28:*/		return 0x8214DDBC;
		  /* 8214DDBCh */ case   29:  		/* mr R3, R24 */
		/* 8214DDBCh case   29:*/		regs.R3 = regs.R24;
		/* 8214DDBCh case   29:*/		return 0x8214DDC0;
		  /* 8214DDC0h */ case   30:  		/* lwz R11, <#[R11 + 16]> */
		/* 8214DDC0h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8214DDC0h case   30:*/		return 0x8214DDC4;
		  /* 8214DDC4h */ case   31:  		/* mtspr CTR, R11 */
		/* 8214DDC4h case   31:*/		regs.CTR = regs.R11;
		/* 8214DDC4h case   31:*/		return 0x8214DDC8;
		  /* 8214DDC8h */ case   32:  		/* bcctrl 20, CR0_LT */
		/* 8214DDC8h case   32:*/		if ( 1 ) { regs.LR = 0x8214DDCC; return (uint32)regs.CTR; }
		/* 8214DDC8h case   32:*/		return 0x8214DDCC;
		  /* 8214DDCCh */ case   33:  		/* or. R26, R3, R3 */
		/* 8214DDCCh case   33:*/		cpu::op::or<1>(regs,&regs.R26,regs.R3,regs.R3);
		/* 8214DDCCh case   33:*/		return 0x8214DDD0;
		  /* 8214DDD0h */ case   34:  		/* bc 12, CR0_EQ, 40 */
		/* 8214DDD0h case   34:*/		if ( regs.CR[0].eq ) { return 0x8214DDF8;  }
		/* 8214DDD0h case   34:*/		return 0x8214DDD4;
		  /* 8214DDD4h */ case   35:  		/* lwz R11, <#[R24]> */
		/* 8214DDD4h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 8214DDD4h case   35:*/		return 0x8214DDD8;
		  /* 8214DDD8h */ case   36:  		/* mr R3, R24 */
		/* 8214DDD8h case   36:*/		regs.R3 = regs.R24;
		/* 8214DDD8h case   36:*/		return 0x8214DDDC;
		  /* 8214DDDCh */ case   37:  		/* lwz R11, <#[R11 + 12]> */
		/* 8214DDDCh case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8214DDDCh case   37:*/		return 0x8214DDE0;
		  /* 8214DDE0h */ case   38:  		/* mtspr CTR, R11 */
		/* 8214DDE0h case   38:*/		regs.CTR = regs.R11;
		/* 8214DDE0h case   38:*/		return 0x8214DDE4;
		  /* 8214DDE4h */ case   39:  		/* bcctrl 20, CR0_LT */
		/* 8214DDE4h case   39:*/		if ( 1 ) { regs.LR = 0x8214DDE8; return (uint32)regs.CTR; }
		/* 8214DDE4h case   39:*/		return 0x8214DDE8;
	}
	return 0x8214DDE8;
} // Block from 8214DD48h-8214DDE8h (40 instructions)

//////////////////////////////////////////////////////
// Block at 8214DDE8h
// Function '?SetInterpolatorInfo@XGRAPHICS@@YAXPAU_CS_COMPILED_SHADER@1@PAUXMicrocodeBuilder@@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DDE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DDE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DDE8);
		  /* 8214DDE8h */ case    0:  		/* mr R4, R3 */
		/* 8214DDE8h case    0:*/		regs.R4 = regs.R3;
		/* 8214DDE8h case    0:*/		return 0x8214DDEC;
		  /* 8214DDECh */ case    1:  		/* mr R5, R26 */
		/* 8214DDECh case    1:*/		regs.R5 = regs.R26;
		/* 8214DDECh case    1:*/		return 0x8214DDF0;
		  /* 8214DDF0h */ case    2:  		/* mr R3, R31 */
		/* 8214DDF0h case    2:*/		regs.R3 = regs.R31;
		/* 8214DDF0h case    2:*/		return 0x8214DDF4;
		  /* 8214DDF4h */ case    3:  		/* bl -917988 */
		/* 8214DDF4h case    3:*/		regs.LR = 0x8214DDF8; return 0x8206DC10;
		/* 8214DDF4h case    3:*/		return 0x8214DDF8;
	}
	return 0x8214DDF8;
} // Block from 8214DDE8h-8214DDF8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214DDF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DDF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DDF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DDF8);
		  /* 8214DDF8h */ case    0:  		/* addic R11, R28, -1 */
		/* 8214DDF8h case    0:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R28,0xFFFFFFFF);
		/* 8214DDF8h case    0:*/		return 0x8214DDFC;
		  /* 8214DDFCh */ case    1:  		/* addi R6, R1, 80 */
		/* 8214DDFCh case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8214DDFCh case    1:*/		return 0x8214DE00;
		  /* 8214DE00h */ case    2:  		/* subfe R7, R11, R28 */
		/* 8214DE00h case    2:*/		cpu::op::subfe<0>(regs,&regs.R7,regs.R11,regs.R28);
		/* 8214DE00h case    2:*/		return 0x8214DE04;
		  /* 8214DE04h */ case    3:  		/* addi R5, R1, 84 */
		/* 8214DE04h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 8214DE04h case    3:*/		return 0x8214DE08;
		  /* 8214DE08h */ case    4:  		/* mr R4, R31 */
		/* 8214DE08h case    4:*/		regs.R4 = regs.R31;
		/* 8214DE08h case    4:*/		return 0x8214DE0C;
		  /* 8214DE0Ch */ case    5:  		/* mr R3, R25 */
		/* 8214DE0Ch case    5:*/		regs.R3 = regs.R25;
		/* 8214DE0Ch case    5:*/		return 0x8214DE10;
		  /* 8214DE10h */ case    6:  		/* bl -3792 */
		/* 8214DE10h case    6:*/		regs.LR = 0x8214DE14; return 0x8214CF40;
		/* 8214DE10h case    6:*/		return 0x8214DE14;
		  /* 8214DE14h */ case    7:  		/* lwz R11, <#[R29]> */
		/* 8214DE14h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8214DE14h case    7:*/		return 0x8214DE18;
		  /* 8214DE18h */ case    8:  		/* addi R9, R1, 96 */
		/* 8214DE18h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 8214DE18h case    8:*/		return 0x8214DE1C;
		  /* 8214DE1Ch */ case    9:  		/* lwz R7, <#[R1 + 80]> */
		/* 8214DE1Ch case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 8214DE1Ch case    9:*/		return 0x8214DE20;
		  /* 8214DE20h */ case   10:  		/* mr R8, R31 */
		/* 8214DE20h case   10:*/		regs.R8 = regs.R31;
		/* 8214DE20h case   10:*/		return 0x8214DE24;
		  /* 8214DE24h */ case   11:  		/* lwz R6, <#[R1 + 84]> */
		/* 8214DE24h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 8214DE24h case   11:*/		return 0x8214DE28;
		  /* 8214DE28h */ case   12:  		/* mr R5, R19 */
		/* 8214DE28h case   12:*/		regs.R5 = regs.R19;
		/* 8214DE28h case   12:*/		return 0x8214DE2C;
		  /* 8214DE2Ch */ case   13:  		/* mr R3, R30 */
		/* 8214DE2Ch case   13:*/		regs.R3 = regs.R30;
		/* 8214DE2Ch case   13:*/		return 0x8214DE30;
		  /* 8214DE30h */ case   14:  		/* rlwinm R4, R11, 2, 0, 29 */
		/* 8214DE30h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R11);
		/* 8214DE30h case   14:*/		return 0x8214DE34;
		  /* 8214DE34h */ case   15:  		/* bl -1812 */
		/* 8214DE34h case   15:*/		regs.LR = 0x8214DE38; return 0x8214D720;
		/* 8214DE34h case   15:*/		return 0x8214DE38;
		  /* 8214DE38h */ case   16:  		/* cmplwi CR6, R20, 0 */
		/* 8214DE38h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 8214DE38h case   16:*/		return 0x8214DE3C;
		  /* 8214DE3Ch */ case   17:  		/* bc 12, CR6_EQ, 20 */
		/* 8214DE3Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x8214DE50;  }
		/* 8214DE3Ch case   17:*/		return 0x8214DE40;
		  /* 8214DE40h */ case   18:  		/* mr R3, R31 */
		/* 8214DE40h case   18:*/		regs.R3 = regs.R31;
		/* 8214DE40h case   18:*/		return 0x8214DE44;
		  /* 8214DE44h */ case   19:  		/* lwz R5, <#[R20 + 4]> */
		/* 8214DE44h case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R20 + 0x00000004) );
		/* 8214DE44h case   19:*/		return 0x8214DE48;
		  /* 8214DE48h */ case   20:  		/* lwz R4, <#[R20]> */
		/* 8214DE48h case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R20 + 0x00000000) );
		/* 8214DE48h case   20:*/		return 0x8214DE4C;
		  /* 8214DE4Ch */ case   21:  		/* bl -917972 */
		/* 8214DE4Ch case   21:*/		regs.LR = 0x8214DE50; return 0x8206DC78;
		/* 8214DE4Ch case   21:*/		return 0x8214DE50;
	}
	return 0x8214DE50;
} // Block from 8214DDF8h-8214DE50h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8214DE50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DE50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DE50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DE50);
		  /* 8214DE50h */ case    0:  		/* mr R3, R27 */
		/* 8214DE50h case    0:*/		regs.R3 = regs.R27;
		/* 8214DE50h case    0:*/		return 0x8214DE54;
		  /* 8214DE54h */ case    1:  		/* addi R1, R1, 240 */
		/* 8214DE54h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 8214DE54h case    1:*/		return 0x8214DE58;
		  /* 8214DE58h */ case    2:  		/* b -773076 */
		/* 8214DE58h case    2:*/		return 0x82091284;
		/* 8214DE58h case    2:*/		return 0x8214DE5C;
		  /* 8214DE5Ch */ case    3:  		/* nop */
		/* 8214DE5Ch case    3:*/		cpu::op::nop();
		/* 8214DE5Ch case    3:*/		return 0x8214DE60;
	}
	return 0x8214DE60;
} // Block from 8214DE50h-8214DE60h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214DE60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DE60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DE60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DE60);
		  /* 8214DE60h */ case    0:  		/* mfspr R12, LR */
		/* 8214DE60h case    0:*/		regs.R12 = regs.LR;
		/* 8214DE60h case    0:*/		return 0x8214DE64;
		  /* 8214DE64h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214DE64h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214DE64h case    1:*/		return 0x8214DE68;
		  /* 8214DE68h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8214DE68h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8214DE68h case    2:*/		return 0x8214DE6C;
		  /* 8214DE6Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8214DE6Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214DE6Ch case    3:*/		return 0x8214DE70;
		  /* 8214DE70h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8214DE70h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8214DE70h case    4:*/		return 0x8214DE74;
		  /* 8214DE74h */ case    5:  		/* mr R30, R3 */
		/* 8214DE74h case    5:*/		regs.R30 = regs.R3;
		/* 8214DE74h case    5:*/		return 0x8214DE78;
		  /* 8214DE78h */ case    6:  		/* mr R31, R4 */
		/* 8214DE78h case    6:*/		regs.R31 = regs.R4;
		/* 8214DE78h case    6:*/		return 0x8214DE7C;
		  /* 8214DE7Ch */ case    7:  		/* b 124 */
		/* 8214DE7Ch case    7:*/		return 0x8214DEF8;
		/* 8214DE7Ch case    7:*/		return 0x8214DE80;
		  /* 8214DE80h */ case    8:  		/* mr R4, R31 */
		/* 8214DE80h case    8:*/		regs.R4 = regs.R31;
		/* 8214DE80h case    8:*/		return 0x8214DE84;
		  /* 8214DE84h */ case    9:  		/* lwz R3, <#[R30 + 8]> */
		/* 8214DE84h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 8214DE84h case    9:*/		return 0x8214DE88;
		  /* 8214DE88h */ case   10:  		/* bl -932840 */
		/* 8214DE88h case   10:*/		regs.LR = 0x8214DE8C; return 0x8206A2A0;
		/* 8214DE88h case   10:*/		return 0x8214DE8C;
		  /* 8214DE8Ch */ case   11:  		/* lwz R10, <#[R3 + 4]> */
		/* 8214DE8Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 8214DE8Ch case   11:*/		return 0x8214DE90;
		  /* 8214DE90h */ case   12:  		/* rlwinm. R11, R10, 20, 28, 31 */
		/* 8214DE90h case   12:*/		cpu::op::rlwinm<1,20,28,31>(regs,&regs.R11,regs.R10);
		/* 8214DE90h case   12:*/		return 0x8214DE94;
		  /* 8214DE94h */ case   13:  		/* bc 12, CR0_EQ, 96 */
		/* 8214DE94h case   13:*/		if ( regs.CR[0].eq ) { return 0x8214DEF4;  }
		/* 8214DE94h case   13:*/		return 0x8214DE98;
		  /* 8214DE98h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 8214DE98h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214DE98h case   14:*/		return 0x8214DE9C;
		  /* 8214DE9Ch */ case   15:  		/* bc 12, CR6_EQ, 120 */
		/* 8214DE9Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x8214DF14;  }
		/* 8214DE9Ch case   15:*/		return 0x8214DEA0;
		  /* 8214DEA0h */ case   16:  		/* cmplwi CR6, R11, 6 */
		/* 8214DEA0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 8214DEA0h case   16:*/		return 0x8214DEA4;
		  /* 8214DEA4h */ case   17:  		/* bc 4, CR6_GT, 48 */
		/* 8214DEA4h case   17:*/		if ( !regs.CR[6].gt ) { return 0x8214DED4;  }
		/* 8214DEA4h case   17:*/		return 0x8214DEA8;
		  /* 8214DEA8h */ case   18:  		/* cmplwi CR6, R11, 12 */
		/* 8214DEA8h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000C);
		/* 8214DEA8h case   18:*/		return 0x8214DEAC;
		  /* 8214DEACh */ case   19:  		/* bc 12, CR6_EQ, 28 */
		/* 8214DEACh case   19:*/		if ( regs.CR[6].eq ) { return 0x8214DEC8;  }
		/* 8214DEACh case   19:*/		return 0x8214DEB0;
		  /* 8214DEB0h */ case   20:  		/* bc 4, CR6_GT, 100 */
		/* 8214DEB0h case   20:*/		if ( !regs.CR[6].gt ) { return 0x8214DF14;  }
		/* 8214DEB0h case   20:*/		return 0x8214DEB4;
		  /* 8214DEB4h */ case   21:  		/* cmplwi CR6, R11, 14 */
		/* 8214DEB4h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000E);
		/* 8214DEB4h case   21:*/		return 0x8214DEB8;
		  /* 8214DEB8h */ case   22:  		/* bc 4, CR6_GT, 28 */
		/* 8214DEB8h case   22:*/		if ( !regs.CR[6].gt ) { return 0x8214DED4;  }
		/* 8214DEB8h case   22:*/		return 0x8214DEBC;
		  /* 8214DEBCh */ case   23:  		/* cmplwi CR6, R11, 15 */
		/* 8214DEBCh case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000F);
		/* 8214DEBCh case   23:*/		return 0x8214DEC0;
		  /* 8214DEC0h */ case   24:  		/* bc 4, CR6_EQ, 84 */
		/* 8214DEC0h case   24:*/		if ( !regs.CR[6].eq ) { return 0x8214DF14;  }
		/* 8214DEC0h case   24:*/		return 0x8214DEC4;
		  /* 8214DEC4h */ case   25:  		/* b 48 */
		/* 8214DEC4h case   25:*/		return 0x8214DEF4;
		/* 8214DEC4h case   25:*/		return 0x8214DEC8;
	}
	return 0x8214DEC8;
} // Block from 8214DE60h-8214DEC8h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8214DEC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DEC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DEC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DEC8);
		  /* 8214DEC8h */ case    0:  		/* rlwinm. R11, R10, 0, 23, 23 */
		/* 8214DEC8h case    0:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R10);
		/* 8214DEC8h case    0:*/		return 0x8214DECC;
		  /* 8214DECCh */ case    1:  		/* bc 12, CR0_EQ, 72 */
		/* 8214DECCh case    1:*/		if ( regs.CR[0].eq ) { return 0x8214DF14;  }
		/* 8214DECCh case    1:*/		return 0x8214DED0;
		  /* 8214DED0h */ case    2:  		/* b 36 */
		/* 8214DED0h case    2:*/		return 0x8214DEF4;
		/* 8214DED0h case    2:*/		return 0x8214DED4;
	}
	return 0x8214DED4;
} // Block from 8214DEC8h-8214DED4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214DED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DED4);
		  /* 8214DED4h */ case    0:  		/* lwz R10, <#[R3]> */
		/* 8214DED4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8214DED4h case    0:*/		return 0x8214DED8;
		  /* 8214DED8h */ case    1:  		/* rlwinm. R9, R10, 0, 17, 19 */
		/* 8214DED8h case    1:*/		cpu::op::rlwinm<1,0,17,19>(regs,&regs.R9,regs.R10);
		/* 8214DED8h case    1:*/		return 0x8214DEDC;
		  /* 8214DEDCh */ case    2:  		/* bc 4, CR0_EQ, 48 */
		/* 8214DEDCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x8214DF0C;  }
		/* 8214DEDCh case    2:*/		return 0x8214DEE0;
		  /* 8214DEE0h */ case    3:  		/* li R10, 1 */
		/* 8214DEE0h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8214DEE0h case    3:*/		return 0x8214DEE4;
		  /* 8214DEE4h */ case    4:  		/* slw R11, R10, R11 */
		/* 8214DEE4h case    4:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8214DEE4h case    4:*/		return 0x8214DEE8;
		  /* 8214DEE8h */ case    5:  		/* andi. R11, R11, 16468 */
		/* 8214DEE8h case    5:*/		cpu::op::andi<1>(regs,&regs.R11,regs.R11,0x4054);
		/* 8214DEE8h case    5:*/		return 0x8214DEEC;
		  /* 8214DEECh */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 8214DEECh case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8214DEECh case    6:*/		return 0x8214DEF0;
		  /* 8214DEF0h */ case    7:  		/* bc 4, CR0_EQ, 36 */
		/* 8214DEF0h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8214DF14;  }
		/* 8214DEF0h case    7:*/		return 0x8214DEF4;
	}
	return 0x8214DEF4;
} // Block from 8214DED4h-8214DEF4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214DEF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DEF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DEF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DEF4);
		  /* 8214DEF4h */ case    0:  		/* addi R31, R31, 1 */
		/* 8214DEF4h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8214DEF4h case    0:*/		return 0x8214DEF8;
	}
	return 0x8214DEF8;
} // Block from 8214DEF4h-8214DEF8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214DEF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DEF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DEF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DEF8);
		  /* 8214DEF8h */ case    0:  		/* lwz R3, <#[R30 + 8]> */
		/* 8214DEF8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 8214DEF8h case    0:*/		return 0x8214DEFC;
		  /* 8214DEFCh */ case    1:  		/* bl -917756 */
		/* 8214DEFCh case    1:*/		regs.LR = 0x8214DF00; return 0x8206DE00;
		/* 8214DEFCh case    1:*/		return 0x8214DF00;
		  /* 8214DF00h */ case    2:  		/* cmplw CR6, R3, R31 */
		/* 8214DF00h case    2:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R31);
		/* 8214DF00h case    2:*/		return 0x8214DF04;
		  /* 8214DF04h */ case    3:  		/* bc 12, CR6_GT, -132 */
		/* 8214DF04h case    3:*/		if ( regs.CR[6].gt ) { return 0x8214DE80;  }
		/* 8214DF04h case    3:*/		return 0x8214DF08;
		  /* 8214DF08h */ case    4:  		/* b 12 */
		/* 8214DF08h case    4:*/		return 0x8214DF14;
		/* 8214DF08h case    4:*/		return 0x8214DF0C;
	}
	return 0x8214DF0C;
} // Block from 8214DEF8h-8214DF0Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214DF0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DF0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DF0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DF0C);
		  /* 8214DF0Ch */ case    0:  		/* oris R11, R10, 2 */
		/* 8214DF0Ch case    0:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R10,0x2);
		/* 8214DF0Ch case    0:*/		return 0x8214DF10;
		  /* 8214DF10h */ case    1:  		/* stw R11, <#[R3]> */
		/* 8214DF10h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8214DF10h case    1:*/		return 0x8214DF14;
	}
	return 0x8214DF14;
} // Block from 8214DF0Ch-8214DF14h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214DF14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DF14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DF14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DF14);
		  /* 8214DF14h */ case    0:  		/* addi R1, R1, 112 */
		/* 8214DF14h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214DF14h case    0:*/		return 0x8214DF18;
		  /* 8214DF18h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214DF18h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214DF18h case    1:*/		return 0x8214DF1C;
		  /* 8214DF1Ch */ case    2:  		/* mtspr LR, R12 */
		/* 8214DF1Ch case    2:*/		regs.LR = regs.R12;
		/* 8214DF1Ch case    2:*/		return 0x8214DF20;
		  /* 8214DF20h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8214DF20h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8214DF20h case    3:*/		return 0x8214DF24;
		  /* 8214DF24h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8214DF24h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214DF24h case    4:*/		return 0x8214DF28;
		  /* 8214DF28h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8214DF28h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214DF28h case    5:*/		return 0x8214DF2C;
	}
	return 0x8214DF2C;
} // Block from 8214DF14h-8214DF2Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214DF2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DF2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DF2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DF2C);
		  /* 8214DF2Ch */ case    0:  		/* nop */
		/* 8214DF2Ch case    0:*/		cpu::op::nop();
		/* 8214DF2Ch case    0:*/		return 0x8214DF30;
	}
	return 0x8214DF30;
} // Block from 8214DF2Ch-8214DF30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214DF30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DF30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DF30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DF30);
		  /* 8214DF30h */ case    0:  		/* mfspr R12, LR */
		/* 8214DF30h case    0:*/		regs.R12 = regs.LR;
		/* 8214DF30h case    0:*/		return 0x8214DF34;
		  /* 8214DF34h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214DF34h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214DF34h case    1:*/		return 0x8214DF38;
		  /* 8214DF38h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8214DF38h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8214DF38h case    2:*/		return 0x8214DF3C;
		  /* 8214DF3Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8214DF3Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214DF3Ch case    3:*/		return 0x8214DF40;
		  /* 8214DF40h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8214DF40h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8214DF40h case    4:*/		return 0x8214DF44;
		  /* 8214DF44h */ case    5:  		/* lhz R11, <#[R3 + 8]> */
		/* 8214DF44h case    5:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8214DF44h case    5:*/		return 0x8214DF48;
		  /* 8214DF48h */ case    6:  		/* li R30, 0 */
		/* 8214DF48h case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8214DF48h case    6:*/		return 0x8214DF4C;
		  /* 8214DF4Ch */ case    7:  		/* mr R31, R3 */
		/* 8214DF4Ch case    7:*/		regs.R31 = regs.R3;
		/* 8214DF4Ch case    7:*/		return 0x8214DF50;
		  /* 8214DF50h */ case    8:  		/* add R11, R11, R3 */
		/* 8214DF50h case    8:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 8214DF50h case    8:*/		return 0x8214DF54;
		  /* 8214DF54h */ case    9:  		/* addi R6, R3, 16 */
		/* 8214DF54h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R3,0x10);
		/* 8214DF54h case    9:*/		return 0x8214DF58;
	}
	return 0x8214DF58;
} // Block from 8214DF30h-8214DF58h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8214DF58h
// Function '?CopyMicrocodeVisitor@XGRAPHICS@@YAXPAX_N11K0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DF58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DF58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DF58);
		  /* 8214DF58h */ case    0:  		/* stb R30, <#[R11 + 16]> */
		/* 8214DF58h case    0:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R11 + 0x00000010) );
		/* 8214DF58h case    0:*/		return 0x8214DF5C;
		  /* 8214DF5Ch */ case    1:  		/* lwz R10, <#[R3 + 4]> */
		/* 8214DF5Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 8214DF5Ch case    1:*/		return 0x8214DF60;
		  /* 8214DF60h */ case    2:  		/* lwz R3, <#[R3]> */
		/* 8214DF60h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000000) );
		/* 8214DF60h case    2:*/		return 0x8214DF64;
		  /* 8214DF64h */ case    3:  		/* lwz R4, <#[R31 + 12]> */
		/* 8214DF64h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8214DF64h case    3:*/		return 0x8214DF68;
		  /* 8214DF68h */ case    4:  		/* cntlzw R11, R4 */
		/* 8214DF68h case    4:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R4);
		/* 8214DF68h case    4:*/		return 0x8214DF6C;
		  /* 8214DF6Ch */ case    5:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 8214DF6Ch case    5:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 8214DF6Ch case    5:*/		return 0x8214DF70;
		  /* 8214DF70h */ case    6:  		/* mtspr CTR, R10 */
		/* 8214DF70h case    6:*/		regs.CTR = regs.R10;
		/* 8214DF70h case    6:*/		return 0x8214DF74;
		  /* 8214DF74h */ case    7:  		/* addi R5, R11, 7101 */
		/* 8214DF74h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1BBD);
		/* 8214DF74h case    7:*/		return 0x8214DF78;
		  /* 8214DF78h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 8214DF78h case    8:*/		if ( 1 ) { regs.LR = 0x8214DF7C; return (uint32)regs.CTR; }
		/* 8214DF78h case    8:*/		return 0x8214DF7C;
		  /* 8214DF7Ch */ case    9:  		/* li R3, 0 */
		/* 8214DF7Ch case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214DF7Ch case    9:*/		return 0x8214DF80;
		  /* 8214DF80h */ case   10:  		/* sth R30, <#[R31 + 8]> */
		/* 8214DF80h case   10:*/		cpu::mem::store16( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 8214DF80h case   10:*/		return 0x8214DF84;
		  /* 8214DF84h */ case   11:  		/* addi R1, R1, 112 */
		/* 8214DF84h case   11:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214DF84h case   11:*/		return 0x8214DF88;
		  /* 8214DF88h */ case   12:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214DF88h case   12:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214DF88h case   12:*/		return 0x8214DF8C;
		  /* 8214DF8Ch */ case   13:  		/* mtspr LR, R12 */
		/* 8214DF8Ch case   13:*/		regs.LR = regs.R12;
		/* 8214DF8Ch case   13:*/		return 0x8214DF90;
		  /* 8214DF90h */ case   14:  		/* ld R30, <#[R1 - 24]> */
		/* 8214DF90h case   14:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8214DF90h case   14:*/		return 0x8214DF94;
		  /* 8214DF94h */ case   15:  		/* ld R31, <#[R1 - 16]> */
		/* 8214DF94h case   15:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214DF94h case   15:*/		return 0x8214DF98;
		  /* 8214DF98h */ case   16:  		/* bclr 20, CR0_LT */
		/* 8214DF98h case   16:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214DF98h case   16:*/		return 0x8214DF9C;
	}
	return 0x8214DF9C;
} // Block from 8214DF58h-8214DF9Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 8214DF9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DF9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DF9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DF9C);
		  /* 8214DF9Ch */ case    0:  		/* nop */
		/* 8214DF9Ch case    0:*/		cpu::op::nop();
		/* 8214DF9Ch case    0:*/		return 0x8214DFA0;
	}
	return 0x8214DFA0;
} // Block from 8214DF9Ch-8214DFA0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214DFA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DFA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DFA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DFA0);
		  /* 8214DFA0h */ case    0:  		/* mfspr R12, LR */
		/* 8214DFA0h case    0:*/		regs.R12 = regs.LR;
		/* 8214DFA0h case    0:*/		return 0x8214DFA4;
		  /* 8214DFA4h */ case    1:  		/* bl -773448 */
		/* 8214DFA4h case    1:*/		regs.LR = 0x8214DFA8; return 0x8209125C;
		/* 8214DFA4h case    1:*/		return 0x8214DFA8;
		  /* 8214DFA8h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8214DFA8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8214DFA8h case    2:*/		return 0x8214DFAC;
		  /* 8214DFACh */ case    3:  		/* mr R31, R3 */
		/* 8214DFACh case    3:*/		regs.R31 = regs.R3;
		/* 8214DFACh case    3:*/		return 0x8214DFB0;
		  /* 8214DFB0h */ case    4:  		/* mr R30, R5 */
		/* 8214DFB0h case    4:*/		regs.R30 = regs.R5;
		/* 8214DFB0h case    4:*/		return 0x8214DFB4;
		  /* 8214DFB4h */ case    5:  		/* li R3, 0 */
		/* 8214DFB4h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214DFB4h case    5:*/		return 0x8214DFB8;
		  /* 8214DFB8h */ case    6:  		/* addi R29, R4, -1 */
		/* 8214DFB8h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R4,0xFFFFFFFF);
		/* 8214DFB8h case    6:*/		return 0x8214DFBC;
		  /* 8214DFBCh */ case    7:  		/* cmplwi CR6, R30, 0 */
		/* 8214DFBCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8214DFBCh case    7:*/		return 0x8214DFC0;
		  /* 8214DFC0h */ case    8:  		/* bc 12, CR6_EQ, 72 */
		/* 8214DFC0h case    8:*/		if ( regs.CR[6].eq ) { return 0x8214E008;  }
		/* 8214DFC0h case    8:*/		return 0x8214DFC4;
		  /* 8214DFC4h */ case    9:  		/* lbzu R11, <#[R29 + 1]> */
		/* 8214DFC4h case    9:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000001) );
		regs.R29 = (uint32)(regs.R29 + 0x00000001);
		/* 8214DFC4h case    9:*/		return 0x8214DFC8;
		  /* 8214DFC8h */ case   10:  		/* addi R30, R30, -1 */
		/* 8214DFC8h case   10:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8214DFC8h case   10:*/		return 0x8214DFCC;
		  /* 8214DFCCh */ case   11:  		/* cmplwi CR6, R11, 10 */
		/* 8214DFCCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000A);
		/* 8214DFCCh case   11:*/		return 0x8214DFD0;
		  /* 8214DFD0h */ case   12:  		/* bc 12, CR6_EQ, 40 */
		/* 8214DFD0h case   12:*/		if ( regs.CR[6].eq ) { return 0x8214DFF8;  }
		/* 8214DFD0h case   12:*/		return 0x8214DFD4;
		  /* 8214DFD4h */ case   13:  		/* lhz R10, <#[R31 + 8]> */
		/* 8214DFD4h case   13:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8214DFD4h case   13:*/		return 0x8214DFD8;
		  /* 8214DFD8h */ case   14:  		/* add R10, R10, R31 */
		/* 8214DFD8h case   14:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R31);
		/* 8214DFD8h case   14:*/		return 0x8214DFDC;
		  /* 8214DFDCh */ case   15:  		/* stb R11, <#[R10 + 16]> */
		/* 8214DFDCh case   15:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 8214DFDCh case   15:*/		return 0x8214DFE0;
		  /* 8214DFE0h */ case   16:  		/* lhz R11, <#[R31 + 8]> */
		/* 8214DFE0h case   16:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8214DFE0h case   16:*/		return 0x8214DFE4;
		  /* 8214DFE4h */ case   17:  		/* addi R11, R11, 1 */
		/* 8214DFE4h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214DFE4h case   17:*/		return 0x8214DFE8;
		  /* 8214DFE8h */ case   18:  		/* rlwinm R11, R11, 0, 16, 31 */
		/* 8214DFE8h case   18:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R11);
		/* 8214DFE8h case   18:*/		return 0x8214DFEC;
		  /* 8214DFECh */ case   19:  		/* sth R11, <#[R31 + 8]> */
		/* 8214DFECh case   19:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8214DFECh case   19:*/		return 0x8214DFF0;
		  /* 8214DFF0h */ case   20:  		/* cmplwi CR6, R11, 511 */
		/* 8214DFF0h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000001FF);
		/* 8214DFF0h case   20:*/		return 0x8214DFF4;
		  /* 8214DFF4h */ case   21:  		/* bc 12, CR6_LT, 12 */
		/* 8214DFF4h case   21:*/		if ( regs.CR[6].lt ) { return 0x8214E000;  }
		/* 8214DFF4h case   21:*/		return 0x8214DFF8;
	}
	return 0x8214DFF8;
} // Block from 8214DFA0h-8214DFF8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8214DFF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214DFF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214DFF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214DFF8);
		  /* 8214DFF8h */ case    0:  		/* mr R3, R31 */
		/* 8214DFF8h case    0:*/		regs.R3 = regs.R31;
		/* 8214DFF8h case    0:*/		return 0x8214DFFC;
		  /* 8214DFFCh */ case    1:  		/* bl -204 */
		/* 8214DFFCh case    1:*/		regs.LR = 0x8214E000; return 0x8214DF30;
		/* 8214DFFCh case    1:*/		return 0x8214E000;
	}
	return 0x8214E000;
} // Block from 8214DFF8h-8214E000h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214E000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E000);
		  /* 8214E000h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 8214E000h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8214E000h case    0:*/		return 0x8214E004;
		  /* 8214E004h */ case    1:  		/* bc 4, CR6_LT, -72 */
		/* 8214E004h case    1:*/		if ( !regs.CR[6].lt ) { return 0x8214DFBC;  }
		/* 8214E004h case    1:*/		return 0x8214E008;
	}
	return 0x8214E008;
} // Block from 8214E000h-8214E008h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214E008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E008);
		  /* 8214E008h */ case    0:  		/* addi R1, R1, 112 */
		/* 8214E008h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214E008h case    0:*/		return 0x8214E00C;
		  /* 8214E00Ch */ case    1:  		/* b -773472 */
		/* 8214E00Ch case    1:*/		return 0x820912AC;
		/* 8214E00Ch case    1:*/		return 0x8214E010;
		  /* 8214E010h */ case    2:  		/* b -112 */
		/* 8214E010h case    2:*/		return 0x8214DFA0;
		/* 8214E010h case    2:*/		return 0x8214E014;
		  /* 8214E014h */ case    3:  		/* nop */
		/* 8214E014h case    3:*/		cpu::op::nop();
		/* 8214E014h case    3:*/		return 0x8214E018;
	}
	return 0x8214E018;
} // Block from 8214E008h-8214E018h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214E018h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E018);
		  /* 8214E018h */ case    0:  		/* mfspr R12, LR */
		/* 8214E018h case    0:*/		regs.R12 = regs.LR;
		/* 8214E018h case    0:*/		return 0x8214E01C;
		  /* 8214E01Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214E01Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214E01Ch case    1:*/		return 0x8214E020;
		  /* 8214E020h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8214E020h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8214E020h case    2:*/		return 0x8214E024;
		  /* 8214E024h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8214E024h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214E024h case    3:*/		return 0x8214E028;
		  /* 8214E028h */ case    4:  		/* std R5, <#[R1 + 32]> */
		/* 8214E028h case    4:*/		cpu::mem::store64( regs, regs.R5, (uint32)(regs.R1 + 0x00000020) );
		/* 8214E028h case    4:*/		return 0x8214E02C;
		  /* 8214E02Ch */ case    5:  		/* std R6, <#[R1 + 40]> */
		/* 8214E02Ch case    5:*/		cpu::mem::store64( regs, regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 8214E02Ch case    5:*/		return 0x8214E030;
		  /* 8214E030h */ case    6:  		/* std R7, <#[R1 + 48]> */
		/* 8214E030h case    6:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R1 + 0x00000030) );
		/* 8214E030h case    6:*/		return 0x8214E034;
		  /* 8214E034h */ case    7:  		/* std R8, <#[R1 + 56]> */
		/* 8214E034h case    7:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R1 + 0x00000038) );
		/* 8214E034h case    7:*/		return 0x8214E038;
		  /* 8214E038h */ case    8:  		/* std R9, <#[R1 + 64]> */
		/* 8214E038h case    8:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000040) );
		/* 8214E038h case    8:*/		return 0x8214E03C;
		  /* 8214E03Ch */ case    9:  		/* std R10, <#[R1 + 72]> */
		/* 8214E03Ch case    9:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000048) );
		/* 8214E03Ch case    9:*/		return 0x8214E040;
		  /* 8214E040h */ case   10:  		/* stwu R1, <#[R1 - 2176]> */
		/* 8214E040h case   10:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFF780) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFF780);
		/* 8214E040h case   10:*/		return 0x8214E044;
		  /* 8214E044h */ case   11:  		/* stw R4, <#[R1 + 2204]> */
		/* 8214E044h case   11:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000089C) );
		/* 8214E044h case   11:*/		return 0x8214E048;
		  /* 8214E048h */ case   12:  		/* addi R11, R1, 80 */
		/* 8214E048h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 8214E048h case   12:*/		return 0x8214E04C;
		  /* 8214E04Ch */ case   13:  		/* addi R10, R1, 2208 */
		/* 8214E04Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x8A0);
		/* 8214E04Ch case   13:*/		return 0x8214E050;
		  /* 8214E050h */ case   14:  		/* mr R31, R3 */
		/* 8214E050h case   14:*/		regs.R31 = regs.R3;
		/* 8214E050h case   14:*/		return 0x8214E054;
		  /* 8214E054h */ case   15:  		/* mr R5, R4 */
		/* 8214E054h case   15:*/		regs.R5 = regs.R4;
		/* 8214E054h case   15:*/		return 0x8214E058;
		  /* 8214E058h */ case   16:  		/* li R4, 2047 */
		/* 8214E058h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x7FF);
		/* 8214E058h case   16:*/		return 0x8214E05C;
		  /* 8214E05Ch */ case   17:  		/* addi R3, R1, 96 */
		/* 8214E05Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 8214E05Ch case   17:*/		return 0x8214E060;
		  /* 8214E060h */ case   18:  		/* stw R10, <#[R11]> */
		/* 8214E060h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8214E060h case   18:*/		return 0x8214E064;
		  /* 8214E064h */ case   19:  		/* lwz R6, <#[R1 + 80]> */
		/* 8214E064h case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 8214E064h case   19:*/		return 0x8214E068;
		  /* 8214E068h */ case   20:  		/* bl -733344 */
		/* 8214E068h case   20:*/		regs.LR = 0x8214E06C; return 0x8209AFC8;
		/* 8214E068h case   20:*/		return 0x8214E06C;
		  /* 8214E06Ch */ case   21:  		/* li R10, 0 */
		/* 8214E06Ch case   21:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8214E06Ch case   21:*/		return 0x8214E070;
		  /* 8214E070h */ case   22:  		/* or. R30, R3, R3 */
		/* 8214E070h case   22:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8214E070h case   22:*/		return 0x8214E074;
		  /* 8214E074h */ case   23:  		/* stb R10, <#[R1 + 2143]> */
		/* 8214E074h case   23:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R1 + 0x0000085F) );
		/* 8214E074h case   23:*/		return 0x8214E078;
		  /* 8214E078h */ case   24:  		/* bc 4, CR0_LT, 16 */
		/* 8214E078h case   24:*/		if ( !regs.CR[0].lt ) { return 0x8214E088;  }
		/* 8214E078h case   24:*/		return 0x8214E07C;
		  /* 8214E07Ch */ case   25:  		/* lis R3, -32768 */
		/* 8214E07Ch case   25:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8000);
		/* 8214E07Ch case   25:*/		return 0x8214E080;
		  /* 8214E080h */ case   26:  		/* ori R3, R3, 16389 */
		/* 8214E080h case   26:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x4005);
		/* 8214E080h case   26:*/		return 0x8214E084;
		  /* 8214E084h */ case   27:  		/* b 176 */
		/* 8214E084h case   27:*/		return 0x8214E134;
		/* 8214E084h case   27:*/		return 0x8214E088;
	}
	return 0x8214E088;
} // Block from 8214E018h-8214E088h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8214E088h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E088);
		  /* 8214E088h */ case    0:  		/* mr R3, R10 */
		/* 8214E088h case    0:*/		regs.R3 = regs.R10;
		/* 8214E088h case    0:*/		return 0x8214E08C;
		  /* 8214E08Ch */ case    1:  		/* cmpwi CR6, R30, 0 */
		/* 8214E08Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 8214E08Ch case    1:*/		return 0x8214E090;
		  /* 8214E090h */ case    2:  		/* bc 4, CR6_GT, 164 */
		/* 8214E090h case    2:*/		if ( !regs.CR[6].gt ) { return 0x8214E134;  }
		/* 8214E090h case    2:*/		return 0x8214E094;
		  /* 8214E094h */ case    3:  		/* lwz R11, <#[R31 + 16]> */
		/* 8214E094h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8214E094h case    3:*/		return 0x8214E098;
		  /* 8214E098h */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 8214E098h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214E098h case    4:*/		return 0x8214E09C;
		  /* 8214E09Ch */ case    5:  		/* bc 12, CR6_EQ, 104 */
		/* 8214E09Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x8214E104;  }
		/* 8214E09Ch case    5:*/		return 0x8214E0A0;
		  /* 8214E0A0h */ case    6:  		/* lbz R11, <#[R1 + 96]> */
		/* 8214E0A0h case    6:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 8214E0A0h case    6:*/		return 0x8214E0A4;
		  /* 8214E0A4h */ case    7:  		/* stw R10, <#[R31 + 16]> */
		/* 8214E0A4h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 8214E0A4h case    7:*/		return 0x8214E0A8;
		  /* 8214E0A8h */ case    8:  		/* extsb R11, R11 */
		/* 8214E0A8h case    8:*/		cpu::op::extsb<0>(regs,&regs.R11,regs.R11);
		/* 8214E0A8h case    8:*/		return 0x8214E0AC;
		  /* 8214E0ACh */ case    9:  		/* cmpwi CR6, R11, 32 */
		/* 8214E0ACh case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000020);
		/* 8214E0ACh case    9:*/		return 0x8214E0B0;
		  /* 8214E0B0h */ case   10:  		/* bc 12, CR6_EQ, 36 */
		/* 8214E0B0h case   10:*/		if ( regs.CR[6].eq ) { return 0x8214E0D4;  }
		/* 8214E0B0h case   10:*/		return 0x8214E0B4;
		  /* 8214E0B4h */ case   11:  		/* cmpwi CR6, R11, 45 */
		/* 8214E0B4h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000002D);
		/* 8214E0B4h case   11:*/		return 0x8214E0B8;
		  /* 8214E0B8h */ case   12:  		/* bc 12, CR6_EQ, 28 */
		/* 8214E0B8h case   12:*/		if ( regs.CR[6].eq ) { return 0x8214E0D4;  }
		/* 8214E0B8h case   12:*/		return 0x8214E0BC;
		  /* 8214E0BCh */ case   13:  		/* cmpwi CR6, R11, 48 */
		/* 8214E0BCh case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000030);
		/* 8214E0BCh case   13:*/		return 0x8214E0C0;
		  /* 8214E0C0h */ case   14:  		/* bc 12, CR6_LT, 12 */
		/* 8214E0C0h case   14:*/		if ( regs.CR[6].lt ) { return 0x8214E0CC;  }
		/* 8214E0C0h case   14:*/		return 0x8214E0C4;
		  /* 8214E0C4h */ case   15:  		/* cmpwi CR6, R11, 57 */
		/* 8214E0C4h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000039);
		/* 8214E0C4h case   15:*/		return 0x8214E0C8;
		  /* 8214E0C8h */ case   16:  		/* bc 4, CR6_GT, 12 */
		/* 8214E0C8h case   16:*/		if ( !regs.CR[6].gt ) { return 0x8214E0D4;  }
		/* 8214E0C8h case   16:*/		return 0x8214E0CC;
	}
	return 0x8214E0CC;
} // Block from 8214E088h-8214E0CCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 8214E0CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E0CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E0CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E0CC);
		  /* 8214E0CCh */ case    0:  		/* li R11, 1 */
		/* 8214E0CCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8214E0CCh case    0:*/		return 0x8214E0D0;
		  /* 8214E0D0h */ case    1:  		/* b 8 */
		/* 8214E0D0h case    1:*/		return 0x8214E0D8;
		/* 8214E0D0h case    1:*/		return 0x8214E0D4;
	}
	return 0x8214E0D4;
} // Block from 8214E0CCh-8214E0D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214E0D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E0D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E0D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E0D4);
		  /* 8214E0D4h */ case    0:  		/* mr R11, R10 */
		/* 8214E0D4h case    0:*/		regs.R11 = regs.R10;
		/* 8214E0D4h case    0:*/		return 0x8214E0D8;
	}
	return 0x8214E0D8;
} // Block from 8214E0D4h-8214E0D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214E0D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E0D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E0D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E0D8);
		  /* 8214E0D8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8214E0D8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8214E0D8h case    0:*/		return 0x8214E0DC;
		  /* 8214E0DCh */ case    1:  		/* bc 4, CR0_EQ, 40 */
		/* 8214E0DCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x8214E104;  }
		/* 8214E0DCh case    1:*/		return 0x8214E0E0;
	}
	return 0x8214E0E0;
} // Block from 8214E0D8h-8214E0E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214E0E0h
// Function '?CopyMicrocodeIntoBuilder@XGRAPHICS@@YAXPAKKPAT_UCODE_VSINPUTDECLARATION@@TGPU_PROGRAMCONTROL@@TGPU_CONTEXTMISC@@PAUXMicrocodeBuilder@@PAUSamplerDimensionTable@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E0E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E0E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E0E0);
		  /* 8214E0E0h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8214E0E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214E0E0h case    0:*/		return 0x8214E0E4;
		  /* 8214E0E4h */ case    1:  		/* lis R10, -32255 */
		/* 8214E0E4h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8214E0E4h case    1:*/		return 0x8214E0E8;
		  /* 8214E0E8h */ case    2:  		/* li R5, 1 */
		/* 8214E0E8h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8214E0E8h case    2:*/		return 0x8214E0EC;
		  /* 8214E0ECh */ case    3:  		/* lwz R3, <#[R31 + 4]> */
		/* 8214E0ECh case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8214E0ECh case    3:*/		return 0x8214E0F0;
		  /* 8214E0F0h */ case    4:  		/* addi R4, R10, -15864 */
		/* 8214E0F0h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFFC208);
		/* 8214E0F0h case    4:*/		return 0x8214E0F4;
		  /* 8214E0F4h */ case    5:  		/* mtspr CTR, R11 */
		/* 8214E0F4h case    5:*/		regs.CTR = regs.R11;
		/* 8214E0F4h case    5:*/		return 0x8214E0F8;
		  /* 8214E0F8h */ case    6:  		/* bcctrl 20, CR0_LT */
		/* 8214E0F8h case    6:*/		if ( 1 ) { regs.LR = 0x8214E0FC; return (uint32)regs.CTR; }
		/* 8214E0F8h case    6:*/		return 0x8214E0FC;
		  /* 8214E0FCh */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 8214E0FCh case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8214E0FCh case    7:*/		return 0x8214E100;
		  /* 8214E100h */ case    8:  		/* bc 12, CR0_LT, 36 */
		/* 8214E100h case    8:*/		if ( regs.CR[0].lt ) { return 0x8214E124;  }
		/* 8214E100h case    8:*/		return 0x8214E104;
	}
	return 0x8214E104;
} // Block from 8214E0E0h-8214E104h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214E104h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E104( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E104) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E104);
		  /* 8214E104h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 8214E104h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214E104h case    0:*/		return 0x8214E108;
		  /* 8214E108h */ case    1:  		/* mr R5, R30 */
		/* 8214E108h case    1:*/		regs.R5 = regs.R30;
		/* 8214E108h case    1:*/		return 0x8214E10C;
		  /* 8214E10Ch */ case    2:  		/* addi R4, R1, 96 */
		/* 8214E10Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 8214E10Ch case    2:*/		return 0x8214E110;
		  /* 8214E110h */ case    3:  		/* lwz R3, <#[R31 + 4]> */
		/* 8214E110h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8214E110h case    3:*/		return 0x8214E114;
		  /* 8214E114h */ case    4:  		/* mtspr CTR, R11 */
		/* 8214E114h case    4:*/		regs.CTR = regs.R11;
		/* 8214E114h case    4:*/		return 0x8214E118;
		  /* 8214E118h */ case    5:  		/* bcctrl 20, CR0_LT */
		/* 8214E118h case    5:*/		if ( 1 ) { regs.LR = 0x8214E11C; return (uint32)regs.CTR; }
		/* 8214E118h case    5:*/		return 0x8214E11C;
		  /* 8214E11Ch */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 8214E11Ch case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8214E11Ch case    6:*/		return 0x8214E120;
		  /* 8214E120h */ case    7:  		/* bc 4, CR0_LT, 20 */
		/* 8214E120h case    7:*/		if ( !regs.CR[0].lt ) { return 0x8214E134;  }
		/* 8214E120h case    7:*/		return 0x8214E124;
	}
	return 0x8214E124;
} // Block from 8214E104h-8214E124h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214E124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E124);
		  /* 8214E124h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8214E124h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8214E124h case    0:*/		return 0x8214E128;
		  /* 8214E128h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8214E128h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214E128h case    1:*/		return 0x8214E12C;
		  /* 8214E12Ch */ case    2:  		/* bc 12, CR6_LT, 8 */
		/* 8214E12Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x8214E134;  }
		/* 8214E12Ch case    2:*/		return 0x8214E130;
		  /* 8214E130h */ case    3:  		/* stw R3, <#[R31 + 8]> */
		/* 8214E130h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 8214E130h case    3:*/		return 0x8214E134;
	}
	return 0x8214E134;
} // Block from 8214E124h-8214E134h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214E134h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E134( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E134) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E134);
		  /* 8214E134h */ case    0:  		/* addi R1, R1, 2176 */
		/* 8214E134h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x880);
		/* 8214E134h case    0:*/		return 0x8214E138;
		  /* 8214E138h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214E138h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214E138h case    1:*/		return 0x8214E13C;
		  /* 8214E13Ch */ case    2:  		/* mtspr LR, R12 */
		/* 8214E13Ch case    2:*/		regs.LR = regs.R12;
		/* 8214E13Ch case    2:*/		return 0x8214E140;
		  /* 8214E140h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8214E140h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8214E140h case    3:*/		return 0x8214E144;
		  /* 8214E144h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8214E144h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214E144h case    4:*/		return 0x8214E148;
		  /* 8214E148h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8214E148h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214E148h case    5:*/		return 0x8214E14C;
	}
	return 0x8214E14C;
} // Block from 8214E134h-8214E14Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214E14Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E14C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E14C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E14C);
		  /* 8214E14Ch */ case    0:  		/* nop */
		/* 8214E14Ch case    0:*/		cpu::op::nop();
		/* 8214E14Ch case    0:*/		return 0x8214E150;
	}
	return 0x8214E150;
} // Block from 8214E14Ch-8214E150h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214E150h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E150);
		  /* 8214E150h */ case    0:  		/* mfspr R12, LR */
		/* 8214E150h case    0:*/		regs.R12 = regs.LR;
		/* 8214E150h case    0:*/		return 0x8214E154;
		  /* 8214E154h */ case    1:  		/* bl -773900 */
		/* 8214E154h case    1:*/		regs.LR = 0x8214E158; return 0x82091248;
		/* 8214E154h case    1:*/		return 0x8214E158;
		  /* 8214E158h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8214E158h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8214E158h case    2:*/		return 0x8214E15C;
		  /* 8214E15Ch */ case    3:  		/* mr R28, R3 */
		/* 8214E15Ch case    3:*/		regs.R28 = regs.R3;
		/* 8214E15Ch case    3:*/		return 0x8214E160;
		  /* 8214E160h */ case    4:  		/* mr R25, R4 */
		/* 8214E160h case    4:*/		regs.R25 = regs.R4;
		/* 8214E160h case    4:*/		return 0x8214E164;
		  /* 8214E164h */ case    5:  		/* mr R24, R8 */
		/* 8214E164h case    5:*/		regs.R24 = regs.R8;
		/* 8214E164h case    5:*/		return 0x8214E168;
		  /* 8214E168h */ case    6:  		/* rlwinm. R11, R5, 0, 24, 31 */
		/* 8214E168h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R5);
		/* 8214E168h case    6:*/		return 0x8214E16C;
		  /* 8214E16Ch */ case    7:  		/* bc 4, CR0_EQ, 200 */
		/* 8214E16Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x8214E234;  }
		/* 8214E16Ch case    7:*/		return 0x8214E170;
		  /* 8214E170h */ case    8:  		/* lwz R11, <#[R4 + 4]> */
		/* 8214E170h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 8214E170h case    8:*/		return 0x8214E174;
		  /* 8214E174h */ case    9:  		/* li R10, 1 */
		/* 8214E174h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8214E174h case    9:*/		return 0x8214E178;
		  /* 8214E178h */ case   10:  		/* rlwinm R9, R11, 20, 28, 31 */
		/* 8214E178h case   10:*/		cpu::op::rlwinm<0,20,28,31>(regs,&regs.R9,regs.R11);
		/* 8214E178h case   10:*/		return 0x8214E17C;
		  /* 8214E17Ch */ case   11:  		/* slw R10, R10, R9 */
		/* 8214E17Ch case   11:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8214E17Ch case   11:*/		return 0x8214E180;
		  /* 8214E180h */ case   12:  		/* andi. R10, R10, 24702 */
		/* 8214E180h case   12:*/		cpu::op::andi<1>(regs,&regs.R10,regs.R10,0x607E);
		/* 8214E180h case   12:*/		return 0x8214E184;
		  /* 8214E184h */ case   13:  		/* cmplwi CR0, R10, 0 */
		/* 8214E184h case   13:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 8214E184h case   13:*/		return 0x8214E188;
		  /* 8214E188h */ case   14:  		/* bc 12, CR0_EQ, 172 */
		/* 8214E188h case   14:*/		if ( regs.CR[0].eq ) { return 0x8214E234;  }
		/* 8214E188h case   14:*/		return 0x8214E18C;
		  /* 8214E18Ch */ case   15:  		/* lwz R10, <#[R4]> */
		/* 8214E18Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 8214E18Ch case   15:*/		return 0x8214E190;
		  /* 8214E190h */ case   16:  		/* rlwinm R9, R11, 4, 26, 27 */
		/* 8214E190h case   16:*/		cpu::op::rlwinm<0,4,26,27>(regs,&regs.R9,regs.R11);
		/* 8214E190h case   16:*/		return 0x8214E194;
		  /* 8214E194h */ case   17:  		/* li R27, 0 */
		/* 8214E194h case   17:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8214E194h case   17:*/		return 0x8214E198;
		  /* 8214E198h */ case   18:  		/* rlwinm R8, R10, 4, 28, 31 */
		/* 8214E198h case   18:*/		cpu::op::rlwinm<0,4,28,31>(regs,&regs.R8,regs.R10);
		/* 8214E198h case   18:*/		return 0x8214E19C;
		  /* 8214E19Ch */ case   19:  		/* rlwinm. R11, R10, 20, 29, 31 */
		/* 8214E19Ch case   19:*/		cpu::op::rlwinm<1,20,29,31>(regs,&regs.R11,regs.R10);
		/* 8214E19Ch case   19:*/		return 0x8214E1A0;
		  /* 8214E1A0h */ case   20:  		/* std R27, <#[R3]> */
		/* 8214E1A0h case   20:*/		cpu::mem::store64( regs, regs.R27, (uint32)(regs.R3 + 0x00000000) );
		/* 8214E1A0h case   20:*/		return 0x8214E1A4;
		  /* 8214E1A4h */ case   21:  		/* rlwinm R30, R10, 0, 20, 31 */
		/* 8214E1A4h case   21:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R30,regs.R10);
		/* 8214E1A4h case   21:*/		return 0x8214E1A8;
		  /* 8214E1A8h */ case   22:  		/* rlwinm R31, R10, 16, 20, 31 */
		/* 8214E1A8h case   22:*/		cpu::op::rlwinm<0,16,20,31>(regs,&regs.R31,regs.R10);
		/* 8214E1A8h case   22:*/		return 0x8214E1AC;
		  /* 8214E1ACh */ case   23:  		/* or R29, R9, R8 */
		/* 8214E1ACh case   23:*/		cpu::op::or<0>(regs,&regs.R29,regs.R9,regs.R8);
		/* 8214E1ACh case   23:*/		return 0x8214E1B0;
		  /* 8214E1B0h */ case   24:  		/* bc 12, CR0_EQ, 132 */
		/* 8214E1B0h case   24:*/		if ( regs.CR[0].eq ) { return 0x8214E234;  }
		/* 8214E1B0h case   24:*/		return 0x8214E1B4;
		  /* 8214E1B4h */ case   25:  		/* mr R26, R11 */
		/* 8214E1B4h case   25:*/		regs.R26 = regs.R11;
		/* 8214E1B4h case   25:*/		return 0x8214E1B8;
		  /* 8214E1B8h */ case   26:  		/* addi R5, R1, 80 */
		/* 8214E1B8h case   26:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8214E1B8h case   26:*/		return 0x8214E1BC;
		  /* 8214E1BCh */ case   27:  		/* lwz R3, <#[R28 + 8]> */
		/* 8214E1BCh case   27:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000008) );
		/* 8214E1BCh case   27:*/		return 0x8214E1C0;
		  /* 8214E1C0h */ case   28:  		/* mr R4, R30 */
		/* 8214E1C0h case   28:*/		regs.R4 = regs.R30;
		/* 8214E1C0h case   28:*/		return 0x8214E1C4;
		  /* 8214E1C4h */ case   29:  		/* bl -933620 */
		/* 8214E1C4h case   29:*/		regs.LR = 0x8214E1C8; return 0x8206A2D0;
		/* 8214E1C4h case   29:*/		return 0x8214E1C8;
		  /* 8214E1C8h */ case   30:  		/* mr R7, R3 */
		/* 8214E1C8h case   30:*/		regs.R7 = regs.R3;
		/* 8214E1C8h case   30:*/		return 0x8214E1CC;
		  /* 8214E1CCh */ case   31:  		/* rlwinm R4, R31, 0, 31, 31 */
		/* 8214E1CCh case   31:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R4,regs.R31);
		/* 8214E1CCh case   31:*/		return 0x8214E1D0;
		  /* 8214E1D0h */ case   32:  		/* rlwinm R5, R31, 31, 31, 31 */
		/* 8214E1D0h case   32:*/		cpu::op::rlwinm<0,31,31,31>(regs,&regs.R5,regs.R31);
		/* 8214E1D0h case   32:*/		return 0x8214E1D4;
		  /* 8214E1D4h */ case   33:  		/* rlwinm R6, R29, 0, 31, 31 */
		/* 8214E1D4h case   33:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R6,regs.R29);
		/* 8214E1D4h case   33:*/		return 0x8214E1D8;
		  /* 8214E1D8h */ case   34:  		/* mr R3, R28 */
		/* 8214E1D8h case   34:*/		regs.R3 = regs.R28;
		/* 8214E1D8h case   34:*/		return 0x8214E1DC;
		  /* 8214E1DCh */ case   35:  		/* rlwinm R29, R29, 31, 1, 31 */
		/* 8214E1DCh case   35:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R29,regs.R29);
		/* 8214E1DCh case   35:*/		return 0x8214E1E0;
		  /* 8214E1E0h */ case   36:  		/* rlwinm R31, R31, 30, 2, 31 */
		/* 8214E1E0h case   36:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R31,regs.R31);
		/* 8214E1E0h case   36:*/		return 0x8214E1E4;
		  /* 8214E1E4h */ case   37:  		/* bl -7172 */
		/* 8214E1E4h case   37:*/		regs.LR = 0x8214E1E8; return 0x8214C5E0;
		/* 8214E1E4h case   37:*/		return 0x8214E1E8;
		  /* 8214E1E8h */ case   38:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8214E1E8h case   38:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8214E1E8h case   38:*/		return 0x8214E1EC;
		  /* 8214E1ECh */ case   39:  		/* bc 12, CR0_EQ, 32 */
		/* 8214E1ECh case   39:*/		if ( regs.CR[0].eq ) { return 0x8214E20C;  }
		/* 8214E1ECh case   39:*/		return 0x8214E1F0;
		  /* 8214E1F0h */ case   40:  		/* li R11, 2 */
		/* 8214E1F0h case   40:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 8214E1F0h case   40:*/		return 0x8214E1F4;
		  /* 8214E1F4h */ case   41:  		/* lwz R10, <#[R25]> */
		/* 8214E1F4h case   41:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000000) );
		/* 8214E1F4h case   41:*/		return 0x8214E1F8;
		  /* 8214E1F8h */ case   42:  		/* slw R11, R11, R27 */
		/* 8214E1F8h case   42:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 8214E1F8h case   42:*/		return 0x8214E1FC;
		  /* 8214E1FCh */ case   43:  		/* rlwinm R11, R11, 16, 0, 15 */
		/* 8214E1FCh case   43:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R11,regs.R11);
		/* 8214E1FCh case   43:*/		return 0x8214E200;
		  /* 8214E200h */ case   44:  		/* or R11, R11, R10 */
		/* 8214E200h case   44:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8214E200h case   44:*/		return 0x8214E204;
		  /* 8214E204h */ case   45:  		/* rlwimi R11, R10, 0, 16, 3 */
		/* 8214E204h case   45:*/		cpu::op::rlwimi<0,0,16,3>(regs,&regs.R11,regs.R10);
		/* 8214E204h case   45:*/		return 0x8214E208;
		  /* 8214E208h */ case   46:  		/* stw R11, <#[R25]> */
		/* 8214E208h case   46:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 8214E208h case   46:*/		return 0x8214E20C;
	}
	return 0x8214E20C;
} // Block from 8214E150h-8214E20Ch (47 instructions)

//////////////////////////////////////////////////////
// Block at 8214E20Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E20C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E20C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E20C);
		  /* 8214E20Ch */ case    0:  		/* addic. R26, R26, -1 */
		/* 8214E20Ch case    0:*/		cpu::op::addic<1>(regs,&regs.R26,regs.R26,0xFFFFFFFF);
		/* 8214E20Ch case    0:*/		return 0x8214E210;
		  /* 8214E210h */ case    1:  		/* addi R27, R27, 2 */
		/* 8214E210h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x2);
		/* 8214E210h case    1:*/		return 0x8214E214;
		  /* 8214E214h */ case    2:  		/* addi R30, R30, 1 */
		/* 8214E214h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8214E214h case    2:*/		return 0x8214E218;
		  /* 8214E218h */ case    3:  		/* bc 4, CR0_EQ, -96 */
		/* 8214E218h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8214E1B8;  }
		/* 8214E218h case    3:*/		return 0x8214E21C;
		  /* 8214E21Ch */ case    4:  		/* ld R11, <#[R28]> */
		/* 8214E21Ch case    4:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8214E21Ch case    4:*/		return 0x8214E220;
		  /* 8214E220h */ case    5:  		/* cmpdi CR6, R11, 0 */
		/* 8214E220h case    5:*/		cpu::op::cmpdi<6>(regs,regs.R11,0x00000000);
		/* 8214E220h case    5:*/		return 0x8214E224;
		  /* 8214E224h */ case    6:  		/* bc 12, CR6_EQ, 16 */
		/* 8214E224h case    6:*/		if ( regs.CR[6].eq ) { return 0x8214E234;  }
		/* 8214E224h case    6:*/		return 0x8214E228;
		  /* 8214E228h */ case    7:  		/* addi R4, R24, 1 */
		/* 8214E228h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R24,0x1);
		/* 8214E228h case    7:*/		return 0x8214E22C;
		  /* 8214E22Ch */ case    8:  		/* mr R3, R28 */
		/* 8214E22Ch case    8:*/		regs.R3 = regs.R28;
		/* 8214E22Ch case    8:*/		return 0x8214E230;
		  /* 8214E230h */ case    9:  		/* bl -976 */
		/* 8214E230h case    9:*/		regs.LR = 0x8214E234; return 0x8214DE60;
		/* 8214E230h case    9:*/		return 0x8214E234;
	}
	return 0x8214E234;
} // Block from 8214E20Ch-8214E234h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8214E234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E234);
		  /* 8214E234h */ case    0:  		/* addi R1, R1, 160 */
		/* 8214E234h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8214E234h case    0:*/		return 0x8214E238;
		  /* 8214E238h */ case    1:  		/* b -774048 */
		/* 8214E238h case    1:*/		return 0x82091298;
		/* 8214E238h case    1:*/		return 0x8214E23C;
		  /* 8214E23Ch */ case    2:  		/* nop */
		/* 8214E23Ch case    2:*/		cpu::op::nop();
		/* 8214E23Ch case    2:*/		return 0x8214E240;
	}
	return 0x8214E240;
} // Block from 8214E234h-8214E240h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214E240h
// Function '?RenumberCompilerLiterals@XGRAPHICS@@YAJPBKKPAKKPAUID3DXConstantTable@@PAUXMicrocodeBuilder@@PAU_CS_COMPILED_SHADER@1@H@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E240);
		  /* 8214E240h */ case    0:  		/* mfspr R12, LR */
		/* 8214E240h case    0:*/		regs.R12 = regs.LR;
		/* 8214E240h case    0:*/		return 0x8214E244;
		  /* 8214E244h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214E244h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214E244h case    1:*/		return 0x8214E248;
		  /* 8214E248h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8214E248h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214E248h case    2:*/		return 0x8214E24C;
		  /* 8214E24Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8214E24Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8214E24Ch case    3:*/		return 0x8214E250;
		  /* 8214E250h */ case    4:  		/* lwz R11, <#[R3]> */
		/* 8214E250h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8214E250h case    4:*/		return 0x8214E254;
		  /* 8214E254h */ case    5:  		/* mr R31, R3 */
		/* 8214E254h case    5:*/		regs.R31 = regs.R3;
		/* 8214E254h case    5:*/		return 0x8214E258;
		  /* 8214E258h */ case    6:  		/* lwz R3, <#[R3 + 4]> */
		/* 8214E258h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 8214E258h case    6:*/		return 0x8214E25C;
		  /* 8214E25Ch */ case    7:  		/* mtspr CTR, R11 */
		/* 8214E25Ch case    7:*/		regs.CTR = regs.R11;
		/* 8214E25Ch case    7:*/		return 0x8214E260;
		  /* 8214E260h */ case    8:  		/* bcctrl 20, CR0_LT */
		/* 8214E260h case    8:*/		if ( 1 ) { regs.LR = 0x8214E264; return (uint32)regs.CTR; }
		/* 8214E260h case    8:*/		return 0x8214E264;
		  /* 8214E264h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 8214E264h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8214E264h case    9:*/		return 0x8214E268;
		  /* 8214E268h */ case   10:  		/* bc 4, CR0_LT, 20 */
		/* 8214E268h case   10:*/		if ( !regs.CR[0].lt ) { return 0x8214E27C;  }
		/* 8214E268h case   10:*/		return 0x8214E26C;
		  /* 8214E26Ch */ case   11:  		/* lwz R11, <#[R31 + 8]> */
		/* 8214E26Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8214E26Ch case   11:*/		return 0x8214E270;
		  /* 8214E270h */ case   12:  		/* cmpwi CR6, R11, 0 */
		/* 8214E270h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214E270h case   12:*/		return 0x8214E274;
		  /* 8214E274h */ case   13:  		/* bc 12, CR6_LT, 8 */
		/* 8214E274h case   13:*/		if ( regs.CR[6].lt ) { return 0x8214E27C;  }
		/* 8214E274h case   13:*/		return 0x8214E278;
		  /* 8214E278h */ case   14:  		/* stw R3, <#[R31 + 8]> */
		/* 8214E278h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 8214E278h case   14:*/		return 0x8214E27C;
	}
	return 0x8214E27C;
} // Block from 8214E240h-8214E27Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8214E27Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E27C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E27C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E27C);
		  /* 8214E27Ch */ case    0:  		/* addi R1, R1, 96 */
		/* 8214E27Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8214E27Ch case    0:*/		return 0x8214E280;
		  /* 8214E280h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214E280h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214E280h case    1:*/		return 0x8214E284;
		  /* 8214E284h */ case    2:  		/* mtspr LR, R12 */
		/* 8214E284h case    2:*/		regs.LR = regs.R12;
		/* 8214E284h case    2:*/		return 0x8214E288;
		  /* 8214E288h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 8214E288h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214E288h case    3:*/		return 0x8214E28C;
		  /* 8214E28Ch */ case    4:  		/* bclr 20, CR0_LT */
		/* 8214E28Ch case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214E28Ch case    4:*/		return 0x8214E290;
	}
	return 0x8214E290;
} // Block from 8214E27Ch-8214E290h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214E290h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E290);
		  /* 8214E290h */ case    0:  		/* mfspr R12, LR */
		/* 8214E290h case    0:*/		regs.R12 = regs.LR;
		/* 8214E290h case    0:*/		return 0x8214E294;
		  /* 8214E294h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214E294h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214E294h case    1:*/		return 0x8214E298;
		  /* 8214E298h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 8214E298h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8214E298h case    2:*/		return 0x8214E29C;
		  /* 8214E29Ch */ case    3:  		/* lis R10, -32768 */
		/* 8214E29Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 8214E29Ch case    3:*/		return 0x8214E2A0;
		  /* 8214E2A0h */ case    4:  		/* stfs FR1, <#[R1 + 124]> */
		/* 8214E2A0h case    4:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R1 + 0x0000007C) );
		/* 8214E2A0h case    4:*/		return 0x8214E2A4;
		  /* 8214E2A4h */ case    5:  		/* lwz R11, <#[R1 + 124]> */
		/* 8214E2A4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 8214E2A4h case    5:*/		return 0x8214E2A8;
		  /* 8214E2A8h */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 8214E2A8h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8214E2A8h case    6:*/		return 0x8214E2AC;
		  /* 8214E2ACh */ case    7:  		/* bc 4, CR6_EQ, 16 */
		/* 8214E2ACh case    7:*/		if ( !regs.CR[6].eq ) { return 0x8214E2BC;  }
		/* 8214E2ACh case    7:*/		return 0x8214E2B0;
		  /* 8214E2B0h */ case    8:  		/* lis R11, -32253 */
		/* 8214E2B0h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214E2B0h case    8:*/		return 0x8214E2B4;
		  /* 8214E2B4h */ case    9:  		/* addi R4, R11, 28176 */
		/* 8214E2B4h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6E10);
		/* 8214E2B4h case    9:*/		return 0x8214E2B8;
		  /* 8214E2B8h */ case   10:  		/* b 116 */
		/* 8214E2B8h case   10:*/		return 0x8214E32C;
		/* 8214E2B8h case   10:*/		return 0x8214E2BC;
	}
	return 0x8214E2BC;
} // Block from 8214E290h-8214E2BCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 8214E2BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E2BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E2BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E2BC);
		  /* 8214E2BCh */ case    0:  		/* lis R10, 32640 */
		/* 8214E2BCh case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x7F80);
		/* 8214E2BCh case    0:*/		return 0x8214E2C0;
		  /* 8214E2C0h */ case    1:  		/* rlwinm R9, R11, 0, 1, 8 */
		/* 8214E2C0h case    1:*/		cpu::op::rlwinm<0,0,1,8>(regs,&regs.R9,regs.R11);
		/* 8214E2C0h case    1:*/		return 0x8214E2C4;
		  /* 8214E2C4h */ case    2:  		/* cmplw CR6, R9, R10 */
		/* 8214E2C4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 8214E2C4h case    2:*/		return 0x8214E2C8;
		  /* 8214E2C8h */ case    3:  		/* bc 4, CR6_EQ, 108 */
		/* 8214E2C8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8214E334;  }
		/* 8214E2C8h case    3:*/		return 0x8214E2CC;
		  /* 8214E2CCh */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 8214E2CCh case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8214E2CCh case    4:*/		return 0x8214E2D0;
		  /* 8214E2D0h */ case    5:  		/* bc 4, CR6_EQ, 16 */
		/* 8214E2D0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8214E2E0;  }
		/* 8214E2D0h case    5:*/		return 0x8214E2D4;
		  /* 8214E2D4h */ case    6:  		/* lis R11, -32255 */
		/* 8214E2D4h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8214E2D4h case    6:*/		return 0x8214E2D8;
		  /* 8214E2D8h */ case    7:  		/* addi R4, R11, -9632 */
		/* 8214E2D8h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFDA60);
		/* 8214E2D8h case    7:*/		return 0x8214E2DC;
		  /* 8214E2DCh */ case    8:  		/* b 80 */
		/* 8214E2DCh case    8:*/		return 0x8214E32C;
		/* 8214E2DCh case    8:*/		return 0x8214E2E0;
	}
	return 0x8214E2E0;
} // Block from 8214E2BCh-8214E2E0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214E2E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E2E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E2E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E2E0);
		  /* 8214E2E0h */ case    0:  		/* lis R10, -128 */
		/* 8214E2E0h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFF80);
		/* 8214E2E0h case    0:*/		return 0x8214E2E4;
		  /* 8214E2E4h */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 8214E2E4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8214E2E4h case    1:*/		return 0x8214E2E8;
		  /* 8214E2E8h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 8214E2E8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8214E2F8;  }
		/* 8214E2E8h case    2:*/		return 0x8214E2EC;
		  /* 8214E2ECh */ case    3:  		/* lis R11, -32253 */
		/* 8214E2ECh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214E2ECh case    3:*/		return 0x8214E2F0;
		  /* 8214E2F0h */ case    4:  		/* addi R4, R11, 28168 */
		/* 8214E2F0h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6E08);
		/* 8214E2F0h case    4:*/		return 0x8214E2F4;
		  /* 8214E2F4h */ case    5:  		/* b 56 */
		/* 8214E2F4h case    5:*/		return 0x8214E32C;
		/* 8214E2F4h case    5:*/		return 0x8214E2F8;
	}
	return 0x8214E2F8;
} // Block from 8214E2E0h-8214E2F8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214E2F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E2F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E2F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E2F8);
		  /* 8214E2F8h */ case    0:  		/* lis R10, -64 */
		/* 8214E2F8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFC0);
		/* 8214E2F8h case    0:*/		return 0x8214E2FC;
		  /* 8214E2FCh */ case    1:  		/* cmplw CR6, R11, R10 */
		/* 8214E2FCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8214E2FCh case    1:*/		return 0x8214E300;
		  /* 8214E300h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 8214E300h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8214E310;  }
		/* 8214E300h case    2:*/		return 0x8214E304;
		  /* 8214E304h */ case    3:  		/* lis R11, -32255 */
		/* 8214E304h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8214E304h case    3:*/		return 0x8214E308;
		  /* 8214E308h */ case    4:  		/* addi R4, R11, -9624 */
		/* 8214E308h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFDA68);
		/* 8214E308h case    4:*/		return 0x8214E30C;
		  /* 8214E30Ch */ case    5:  		/* b 32 */
		/* 8214E30Ch case    5:*/		return 0x8214E32C;
		/* 8214E30Ch case    5:*/		return 0x8214E310;
	}
	return 0x8214E310;
} // Block from 8214E2F8h-8214E310h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214E310h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E310);
		  /* 8214E310h */ case    0:  		/* rlwinm. R11, R11, 0, 9, 9 */
		/* 8214E310h case    0:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R11);
		/* 8214E310h case    0:*/		return 0x8214E314;
		  /* 8214E314h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8214E314h case    1:*/		if ( regs.CR[0].eq ) { return 0x8214E324;  }
		/* 8214E314h case    1:*/		return 0x8214E318;
		  /* 8214E318h */ case    2:  		/* lis R11, -32255 */
		/* 8214E318h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8214E318h case    2:*/		return 0x8214E31C;
		  /* 8214E31Ch */ case    3:  		/* addi R4, R11, -9640 */
		/* 8214E31Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFDA58);
		/* 8214E31Ch case    3:*/		return 0x8214E320;
		  /* 8214E320h */ case    4:  		/* b 12 */
		/* 8214E320h case    4:*/		return 0x8214E32C;
		/* 8214E320h case    4:*/		return 0x8214E324;
	}
	return 0x8214E324;
} // Block from 8214E310h-8214E324h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214E324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E324);
		  /* 8214E324h */ case    0:  		/* lis R11, -32255 */
		/* 8214E324h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8214E324h case    0:*/		return 0x8214E328;
		  /* 8214E328h */ case    1:  		/* addi R4, R11, -9648 */
		/* 8214E328h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFDA50);
		/* 8214E328h case    1:*/		return 0x8214E32C;
	}
	return 0x8214E32C;
} // Block from 8214E324h-8214E32Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214E32Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E32C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E32C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E32C);
		  /* 8214E32Ch */ case    0:  		/* bl -788 */
		/* 8214E32Ch case    0:*/		regs.LR = 0x8214E330; return 0x8214E018;
		/* 8214E32Ch case    0:*/		return 0x8214E330;
		  /* 8214E330h */ case    1:  		/* b 24 */
		/* 8214E330h case    1:*/		return 0x8214E348;
		/* 8214E330h case    1:*/		return 0x8214E334;
	}
	return 0x8214E334;
} // Block from 8214E32Ch-8214E334h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214E334h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E334( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E334) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E334);
		  /* 8214E334h */ case    0:  		/* stfd FR1, <#[R1 + 32]> */
		/* 8214E334h case    0:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R1 + 0x00000020) );
		/* 8214E334h case    0:*/		return 0x8214E338;
		  /* 8214E338h */ case    1:  		/* lis R11, -32253 */
		/* 8214E338h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214E338h case    1:*/		return 0x8214E33C;
		  /* 8214E33Ch */ case    2:  		/* addi R4, R11, 28160 */
		/* 8214E33Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6E00);
		/* 8214E33Ch case    2:*/		return 0x8214E340;
		  /* 8214E340h */ case    3:  		/* ld R5, <#[R1 + 32]> */
		/* 8214E340h case    3:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x00000020) );
		/* 8214E340h case    3:*/		return 0x8214E344;
		  /* 8214E344h */ case    4:  		/* bl -812 */
		/* 8214E344h case    4:*/		regs.LR = 0x8214E348; return 0x8214E018;
		/* 8214E344h case    4:*/		return 0x8214E348;
	}
	return 0x8214E348;
} // Block from 8214E334h-8214E348h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214E348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E348);
		  /* 8214E348h */ case    0:  		/* addi R1, R1, 96 */
		/* 8214E348h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8214E348h case    0:*/		return 0x8214E34C;
		  /* 8214E34Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214E34Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214E34Ch case    1:*/		return 0x8214E350;
	}
	return 0x8214E350;
} // Block from 8214E348h-8214E350h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214E350h
// Function '?ParseDefsAndDecls@XGRAPHICS@@YAJPBKKHPAUXMicrocodeBuilder@@PAUSamplerDimensionTable@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E350);
		  /* 8214E350h */ case    0:  		/* mtspr LR, R12 */
		/* 8214E350h case    0:*/		regs.LR = regs.R12;
		/* 8214E350h case    0:*/		return 0x8214E354;
		  /* 8214E354h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8214E354h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214E354h case    1:*/		return 0x8214E358;
	}
	return 0x8214E358;
} // Block from 8214E350h-8214E358h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214E358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E358);
		  /* 8214E358h */ case    0:  		/* mfspr R12, LR */
		/* 8214E358h case    0:*/		regs.R12 = regs.LR;
		/* 8214E358h case    0:*/		return 0x8214E35C;
		  /* 8214E35Ch */ case    1:  		/* bl -774440 */
		/* 8214E35Ch case    1:*/		regs.LR = 0x8214E360; return 0x82091234;
		/* 8214E35Ch case    1:*/		return 0x8214E360;
		  /* 8214E360h */ case    2:  		/* stwu R1, <#[R1 - 608]> */
		/* 8214E360h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFDA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFDA0);
		/* 8214E360h case    2:*/		return 0x8214E364;
		  /* 8214E364h */ case    3:  		/* lwz R11, <#[R5 + 4]> */
		/* 8214E364h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 8214E364h case    3:*/		return 0x8214E368;
		  /* 8214E368h */ case    4:  		/* mr R20, R3 */
		/* 8214E368h case    4:*/		regs.R20 = regs.R3;
		/* 8214E368h case    4:*/		return 0x8214E36C;
		  /* 8214E36Ch */ case    5:  		/* mr R19, R4 */
		/* 8214E36Ch case    5:*/		regs.R19 = regs.R4;
		/* 8214E36Ch case    5:*/		return 0x8214E370;
		  /* 8214E370h */ case    6:  		/* mr R23, R5 */
		/* 8214E370h case    6:*/		regs.R23 = regs.R5;
		/* 8214E370h case    6:*/		return 0x8214E374;
		  /* 8214E374h */ case    7:  		/* cmplwi CR6, R11, 1 */
		/* 8214E374h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8214E374h case    7:*/		return 0x8214E378;
		  /* 8214E378h */ case    8:  		/* bc 12, CR6_LT, 44 */
		/* 8214E378h case    8:*/		if ( regs.CR[6].lt ) { return 0x8214E3A4;  }
		/* 8214E378h case    8:*/		return 0x8214E37C;
		  /* 8214E37Ch */ case    9:  		/* bc 12, CR6_EQ, 32 */
		/* 8214E37Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x8214E39C;  }
		/* 8214E37Ch case    9:*/		return 0x8214E380;
		  /* 8214E380h */ case   10:  		/* cmplwi CR6, R11, 3 */
		/* 8214E380h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8214E380h case   10:*/		return 0x8214E384;
		  /* 8214E384h */ case   11:  		/* bc 12, CR6_LT, 16 */
		/* 8214E384h case   11:*/		if ( regs.CR[6].lt ) { return 0x8214E394;  }
		/* 8214E384h case   11:*/		return 0x8214E388;
		  /* 8214E388h */ case   12:  		/* bc 4, CR6_EQ, 36 */
		/* 8214E388h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8214E3AC;  }
		/* 8214E388h case   12:*/		return 0x8214E38C;
		  /* 8214E38Ch */ case   13:  		/* li R10, 115 */
		/* 8214E38Ch case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x73);
		/* 8214E38Ch case   13:*/		return 0x8214E390;
		  /* 8214E390h */ case   14:  		/* b 32 */
		/* 8214E390h case   14:*/		return 0x8214E3B0;
		/* 8214E390h case   14:*/		return 0x8214E394;
	}
	return 0x8214E394;
} // Block from 8214E358h-8214E394h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8214E394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E394);
		  /* 8214E394h */ case    0:  		/* li R10, 99 */
		/* 8214E394h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x63);
		/* 8214E394h case    0:*/		return 0x8214E398;
		  /* 8214E398h */ case    1:  		/* b 24 */
		/* 8214E398h case    1:*/		return 0x8214E3B0;
		/* 8214E398h case    1:*/		return 0x8214E39C;
	}
	return 0x8214E39C;
} // Block from 8214E394h-8214E39Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214E39Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E39C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E39C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E39C);
		  /* 8214E39Ch */ case    0:  		/* li R10, 105 */
		/* 8214E39Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x69);
		/* 8214E39Ch case    0:*/		return 0x8214E3A0;
		  /* 8214E3A0h */ case    1:  		/* b 16 */
		/* 8214E3A0h case    1:*/		return 0x8214E3B0;
		/* 8214E3A0h case    1:*/		return 0x8214E3A4;
	}
	return 0x8214E3A4;
} // Block from 8214E39Ch-8214E3A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214E3A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E3A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E3A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E3A4);
		  /* 8214E3A4h */ case    0:  		/* li R10, 98 */
		/* 8214E3A4h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x62);
		/* 8214E3A4h case    0:*/		return 0x8214E3A8;
		  /* 8214E3A8h */ case    1:  		/* b 8 */
		/* 8214E3A8h case    1:*/		return 0x8214E3B0;
		/* 8214E3A8h case    1:*/		return 0x8214E3AC;
	}
	return 0x8214E3AC;
} // Block from 8214E3A4h-8214E3ACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214E3ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E3AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E3AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E3AC);
		  /* 8214E3ACh */ case    0:  		/* lbz R10, <#[R1 + 100]> */
		/* 8214E3ACh case    0:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 8214E3ACh case    0:*/		return 0x8214E3B0;
	}
	return 0x8214E3B0;
} // Block from 8214E3ACh-8214E3B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214E3B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E3B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E3B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E3B0);
		  /* 8214E3B0h */ case    0:  		/* lwz R11, <#[R23 + 12]> */
		/* 8214E3B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000000C) );
		/* 8214E3B0h case    0:*/		return 0x8214E3B4;
		  /* 8214E3B4h */ case    1:  		/* extsb R5, R10 */
		/* 8214E3B4h case    1:*/		cpu::op::extsb<0>(regs,&regs.R5,regs.R10);
		/* 8214E3B4h case    1:*/		return 0x8214E3B8;
		  /* 8214E3B8h */ case    2:  		/* addi R3, R1, 368 */
		/* 8214E3B8h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x170);
		/* 8214E3B8h case    2:*/		return 0x8214E3BC;
		  /* 8214E3BCh */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8214E3BCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214E3BCh case    3:*/		return 0x8214E3C0;
		  /* 8214E3C0h */ case    4:  		/* bc 4, CR6_EQ, 20 */
		/* 8214E3C0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8214E3D4;  }
		/* 8214E3C0h case    4:*/		return 0x8214E3C4;
		  /* 8214E3C4h */ case    5:  		/* lis R11, -32253 */
		/* 8214E3C4h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214E3C4h case    5:*/		return 0x8214E3C8;
		  /* 8214E3C8h */ case    6:  		/* addi R4, R11, 28288 */
		/* 8214E3C8h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6E80);
		/* 8214E3C8h case    6:*/		return 0x8214E3CC;
		  /* 8214E3CCh */ case    7:  		/* bl 1157364 */
		/* 8214E3CCh case    7:*/		regs.LR = 0x8214E3D0; return 0x82268CC0;
		/* 8214E3CCh case    7:*/		return 0x8214E3D0;
		  /* 8214E3D0h */ case    8:  		/* b 52 */
		/* 8214E3D0h case    8:*/		return 0x8214E404;
		/* 8214E3D0h case    8:*/		return 0x8214E3D4;
	}
	return 0x8214E3D4;
} // Block from 8214E3B0h-8214E3D4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214E3D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E3D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E3D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E3D4);
		  /* 8214E3D4h */ case    0:  		/* lwz R6, <#[R23 + 8]> */
		/* 8214E3D4h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R23 + 0x00000008) );
		/* 8214E3D4h case    0:*/		return 0x8214E3D8;
		  /* 8214E3D8h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 8214E3D8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8214E3D8h case    1:*/		return 0x8214E3DC;
		  /* 8214E3DCh */ case    2:  		/* bc 4, CR6_EQ, 20 */
		/* 8214E3DCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x8214E3F0;  }
		/* 8214E3DCh case    2:*/		return 0x8214E3E0;
		  /* 8214E3E0h */ case    3:  		/* lis R11, -32253 */
		/* 8214E3E0h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214E3E0h case    3:*/		return 0x8214E3E4;
		  /* 8214E3E4h */ case    4:  		/* addi R4, R11, 28280 */
		/* 8214E3E4h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6E78);
		/* 8214E3E4h case    4:*/		return 0x8214E3E8;
		  /* 8214E3E8h */ case    5:  		/* bl 1157336 */
		/* 8214E3E8h case    5:*/		regs.LR = 0x8214E3EC; return 0x82268CC0;
		/* 8214E3E8h case    5:*/		return 0x8214E3EC;
		  /* 8214E3ECh */ case    6:  		/* b 24 */
		/* 8214E3ECh case    6:*/		return 0x8214E404;
		/* 8214E3ECh case    6:*/		return 0x8214E3F0;
	}
	return 0x8214E3F0;
} // Block from 8214E3D4h-8214E3F0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8214E3F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E3F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E3F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E3F0);
		  /* 8214E3F0h */ case    0:  		/* lis R9, -32253 */
		/* 8214E3F0h case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8214E3F0h case    0:*/		return 0x8214E3F4;
		  /* 8214E3F4h */ case    1:  		/* add R11, R6, R11 */
		/* 8214E3F4h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R6,regs.R11);
		/* 8214E3F4h case    1:*/		return 0x8214E3F8;
		  /* 8214E3F8h */ case    2:  		/* addi R4, R9, 28272 */
		/* 8214E3F8h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x6E70);
		/* 8214E3F8h case    2:*/		return 0x8214E3FC;
		  /* 8214E3FCh */ case    3:  		/* addi R7, R11, -1 */
		/* 8214E3FCh case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFFF);
		/* 8214E3FCh case    3:*/		return 0x8214E400;
		  /* 8214E400h */ case    4:  		/* bl 1157312 */
		/* 8214E400h case    4:*/		regs.LR = 0x8214E404; return 0x82268CC0;
		/* 8214E400h case    4:*/		return 0x8214E404;
	}
	return 0x8214E404;
} // Block from 8214E3F0h-8214E404h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214E404h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E404( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E404) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E404);
		  /* 8214E404h */ case    0:  		/* li R21, 0 */
		/* 8214E404h case    0:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 8214E404h case    0:*/		return 0x8214E408;
		  /* 8214E408h */ case    1:  		/* li R5, 127 */
		/* 8214E408h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x7F);
		/* 8214E408h case    1:*/		return 0x8214E40C;
		  /* 8214E40Ch */ case    2:  		/* li R4, 0 */
		/* 8214E40Ch case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214E40Ch case    2:*/		return 0x8214E410;
		  /* 8214E410h */ case    3:  		/* stb R21, <#[R1 + 240]> */
		/* 8214E410h case    3:*/		cpu::mem::store8( regs, regs.R21, (uint32)(regs.R1 + 0x000000F0) );
		/* 8214E410h case    3:*/		return 0x8214E414;
		  /* 8214E414h */ case    4:  		/* addi R3, R1, 241 */
		/* 8214E414h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xF1);
		/* 8214E414h case    4:*/		return 0x8214E418;
		  /* 8214E418h */ case    5:  		/* bl -774360 */
		/* 8214E418h case    5:*/		regs.LR = 0x8214E41C; return 0x82091340;
		/* 8214E418h case    5:*/		return 0x8214E41C;
		  /* 8214E41Ch */ case    6:  		/* lwz R31, <#[R23 + 44]> */
		/* 8214E41Ch case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R23 + 0x0000002C) );
		/* 8214E41Ch case    6:*/		return 0x8214E420;
		  /* 8214E420h */ case    7:  		/* cmplwi CR6, R31, 0 */
		/* 8214E420h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8214E420h case    7:*/		return 0x8214E424;
		  /* 8214E424h */ case    8:  		/* bc 12, CR6_EQ, 548 */
		/* 8214E424h case    8:*/		if ( regs.CR[6].eq ) { return 0x8214E648;  }
		/* 8214E424h case    8:*/		return 0x8214E428;
		  /* 8214E428h */ case    9:  		/* lwz R11, <#[R23 + 12]> */
		/* 8214E428h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000000C) );
		/* 8214E428h case    9:*/		return 0x8214E42C;
		  /* 8214E42Ch */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 8214E42Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214E42Ch case   10:*/		return 0x8214E430;
		  /* 8214E430h */ case   11:  		/* bc 12, CR6_EQ, 536 */
		/* 8214E430h case   11:*/		if ( regs.CR[6].eq ) { return 0x8214E648;  }
		/* 8214E430h case   11:*/		return 0x8214E434;
		  /* 8214E434h */ case   12:  		/* lwz R11, <#[R23 + 32]> */
		/* 8214E434h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000020) );
		/* 8214E434h case   12:*/		return 0x8214E438;
		  /* 8214E438h */ case   13:  		/* cmplwi CR6, R11, 1 */
		/* 8214E438h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8214E438h case   13:*/		return 0x8214E43C;
		  /* 8214E43Ch */ case   14:  		/* bc 4, CR6_EQ, 524 */
		/* 8214E43Ch case   14:*/		if ( !regs.CR[6].eq ) { return 0x8214E648;  }
		/* 8214E43Ch case   14:*/		return 0x8214E440;
		  /* 8214E440h */ case   15:  		/* lwz R11, <#[R23 + 36]> */
		/* 8214E440h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000024) );
		/* 8214E440h case   15:*/		return 0x8214E444;
		  /* 8214E444h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 8214E444h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214E444h case   16:*/		return 0x8214E448;
		  /* 8214E448h */ case   17:  		/* bc 4, CR6_EQ, 512 */
		/* 8214E448h case   17:*/		if ( !regs.CR[6].eq ) { return 0x8214E648;  }
		/* 8214E448h case   17:*/		return 0x8214E44C;
		  /* 8214E44Ch */ case   18:  		/* lis R11, -32253 */
		/* 8214E44Ch case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214E44Ch case   18:*/		return 0x8214E450;
		  /* 8214E450h */ case   19:  		/* addi R3, R1, 240 */
		/* 8214E450h case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xF0);
		/* 8214E450h case   19:*/		return 0x8214E454;
		  /* 8214E454h */ case   20:  		/* addi R4, R11, 28264 */
		/* 8214E454h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6E68);
		/* 8214E454h case   20:*/		return 0x8214E458;
		  /* 8214E458h */ case   21:  		/* bl 1157224 */
		/* 8214E458h case   21:*/		regs.LR = 0x8214E45C; return 0x82268CC0;
		/* 8214E458h case   21:*/		return 0x8214E45C;
		  /* 8214E45Ch */ case   22:  		/* lwz R11, <#[R23 + 12]> */
		/* 8214E45Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000000C) );
		/* 8214E45Ch case   22:*/		return 0x8214E460;
		  /* 8214E460h */ case   23:  		/* mr R22, R21 */
		/* 8214E460h case   23:*/		regs.R22 = regs.R21;
		/* 8214E460h case   23:*/		return 0x8214E464;
		  /* 8214E464h */ case   24:  		/* cmplwi CR6, R11, 0 */
		/* 8214E464h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214E464h case   24:*/		return 0x8214E468;
		  /* 8214E468h */ case   25:  		/* bc 4, CR6_GT, 424 */
		/* 8214E468h case   25:*/		if ( !regs.CR[6].gt ) { return 0x8214E610;  }
		/* 8214E468h case   25:*/		return 0x8214E46C;
		  /* 8214E46Ch */ case   26:  		/* lis R11, -32253 */
		/* 8214E46Ch case   26:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214E46Ch case   26:*/		return 0x8214E470;
		  /* 8214E470h */ case   27:  		/* lis R10, -32253 */
		/* 8214E470h case   27:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8214E470h case   27:*/		return 0x8214E474;
		  /* 8214E474h */ case   28:  		/* lis R9, -32253 */
		/* 8214E474h case   28:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8214E474h case   28:*/		return 0x8214E478;
		  /* 8214E478h */ case   29:  		/* lis R8, -32255 */
		/* 8214E478h case   29:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8201);
		/* 8214E478h case   29:*/		return 0x8214E47C;
		  /* 8214E47Ch */ case   30:  		/* lis R7, -32255 */
		/* 8214E47Ch case   30:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8201);
		/* 8214E47Ch case   30:*/		return 0x8214E480;
		  /* 8214E480h */ case   31:  		/* lis R6, -32255 */
		/* 8214E480h case   31:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8201);
		/* 8214E480h case   31:*/		return 0x8214E484;
		  /* 8214E484h */ case   32:  		/* lis R5, -32256 */
		/* 8214E484h case   32:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8200);
		/* 8214E484h case   32:*/		return 0x8214E488;
		  /* 8214E488h */ case   33:  		/* addi R31, R31, -4 */
		/* 8214E488h case   33:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0xFFFFFFFC);
		/* 8214E488h case   33:*/		return 0x8214E48C;
		  /* 8214E48Ch */ case   34:  		/* addi R24, R11, 8792 */
		/* 8214E48Ch case   34:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0x2258);
		/* 8214E48Ch case   34:*/		return 0x8214E490;
		  /* 8214E490h */ case   35:  		/* addi R27, R10, 28240 */
		/* 8214E490h case   35:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0x6E50);
		/* 8214E490h case   35:*/		return 0x8214E494;
		  /* 8214E494h */ case   36:  		/* addi R30, R9, 28224 */
		/* 8214E494h case   36:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R9,0x6E40);
		/* 8214E494h case   36:*/		return 0x8214E498;
		  /* 8214E498h */ case   37:  		/* addi R29, R8, -10432 */
		/* 8214E498h case   37:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R8,0xFFFFD740);
		/* 8214E498h case   37:*/		return 0x8214E49C;
		  /* 8214E49Ch */ case   38:  		/* addi R26, R7, 5216 */
		/* 8214E49Ch case   38:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R7,0x1460);
		/* 8214E49Ch case   38:*/		return 0x8214E4A0;
		  /* 8214E4A0h */ case   39:  		/* addi R25, R6, 5224 */
		/* 8214E4A0h case   39:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R6,0x1468);
		/* 8214E4A0h case   39:*/		return 0x8214E4A4;
		  /* 8214E4A4h */ case   40:  		/* addi R28, R5, 17860 */
		/* 8214E4A4h case   40:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R5,0x45C4);
		/* 8214E4A4h case   40:*/		return 0x8214E4A8;
		  /* 8214E4A8h */ case   41:  		/* cmplwi CR6, R22, 0 */
		/* 8214E4A8h case   41:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 8214E4A8h case   41:*/		return 0x8214E4AC;
		  /* 8214E4ACh */ case   42:  		/* bc 12, CR6_EQ, 56 */
		/* 8214E4ACh case   42:*/		if ( regs.CR[6].eq ) { return 0x8214E4E4;  }
		/* 8214E4ACh case   42:*/		return 0x8214E4B0;
		  /* 8214E4B0h */ case   43:  		/* mr R10, R28 */
		/* 8214E4B0h case   43:*/		regs.R10 = regs.R28;
		/* 8214E4B0h case   43:*/		return 0x8214E4B4;
		  /* 8214E4B4h */ case   44:  		/* addi R11, R1, 240 */
		/* 8214E4B4h case   44:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xF0);
		/* 8214E4B4h case   44:*/		return 0x8214E4B8;
		  /* 8214E4B8h */ case   45:  		/* lbz R9, <#[R11]> */
		/* 8214E4B8h case   45:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8214E4B8h case   45:*/		return 0x8214E4BC;
		  /* 8214E4BCh */ case   46:  		/* addi R11, R11, 1 */
		/* 8214E4BCh case   46:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214E4BCh case   46:*/		return 0x8214E4C0;
		  /* 8214E4C0h */ case   47:  		/* cmplwi CR6, R9, 0 */
		/* 8214E4C0h case   47:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8214E4C0h case   47:*/		return 0x8214E4C4;
		  /* 8214E4C4h */ case   48:  		/* bc 4, CR6_EQ, -12 */
		/* 8214E4C4h case   48:*/		if ( !regs.CR[6].eq ) { return 0x8214E4B8;  }
		/* 8214E4C4h case   48:*/		return 0x8214E4C8;
		  /* 8214E4C8h */ case   49:  		/* addi R11, R11, -1 */
		/* 8214E4C8h case   49:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8214E4C8h case   49:*/		return 0x8214E4CC;
		  /* 8214E4CCh */ case   50:  		/* lbz R9, <#[R10]> */
		/* 8214E4CCh case   50:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8214E4CCh case   50:*/		return 0x8214E4D0;
		  /* 8214E4D0h */ case   51:  		/* addi R10, R10, 1 */
		/* 8214E4D0h case   51:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8214E4D0h case   51:*/		return 0x8214E4D4;
		  /* 8214E4D4h */ case   52:  		/* cmplwi CR6, R9, 0 */
		/* 8214E4D4h case   52:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8214E4D4h case   52:*/		return 0x8214E4D8;
		  /* 8214E4D8h */ case   53:  		/* stb R9, <#[R11]> */
		/* 8214E4D8h case   53:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8214E4D8h case   53:*/		return 0x8214E4DC;
		  /* 8214E4DCh */ case   54:  		/* addi R11, R11, 1 */
		/* 8214E4DCh case   54:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214E4DCh case   54:*/		return 0x8214E4E0;
		  /* 8214E4E0h */ case   55:  		/* bc 4, CR6_EQ, -20 */
		/* 8214E4E0h case   55:*/		if ( !regs.CR[6].eq ) { return 0x8214E4CC;  }
		/* 8214E4E0h case   55:*/		return 0x8214E4E4;
	}
	return 0x8214E4E4;
} // Block from 8214E404h-8214E4E4h (56 instructions)

//////////////////////////////////////////////////////
// Block at 8214E4E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E4E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E4E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E4E4);
		  /* 8214E4E4h */ case    0:  		/* li R5, 127 */
		/* 8214E4E4h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x7F);
		/* 8214E4E4h case    0:*/		return 0x8214E4E8;
		  /* 8214E4E8h */ case    1:  		/* stb R21, <#[R1 + 112]> */
		/* 8214E4E8h case    1:*/		cpu::mem::store8( regs, regs.R21, (uint32)(regs.R1 + 0x00000070) );
		/* 8214E4E8h case    1:*/		return 0x8214E4EC;
		  /* 8214E4ECh */ case    2:  		/* li R4, 0 */
		/* 8214E4ECh case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214E4ECh case    2:*/		return 0x8214E4F0;
		  /* 8214E4F0h */ case    3:  		/* addi R3, R1, 113 */
		/* 8214E4F0h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x71);
		/* 8214E4F0h case    3:*/		return 0x8214E4F4;
		  /* 8214E4F4h */ case    4:  		/* bl -774580 */
		/* 8214E4F4h case    4:*/		regs.LR = 0x8214E4F8; return 0x82091340;
		/* 8214E4F4h case    4:*/		return 0x8214E4F8;
		  /* 8214E4F8h */ case    5:  		/* lwz R11, <#[R23 + 4]> */
		/* 8214E4F8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 8214E4F8h case    5:*/		return 0x8214E4FC;
		  /* 8214E4FCh */ case    6:  		/* cmplwi CR6, R11, 1 */
		/* 8214E4FCh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8214E4FCh case    6:*/		return 0x8214E500;
		  /* 8214E500h */ case    7:  		/* bc 12, CR6_LT, 168 */
		/* 8214E500h case    7:*/		if ( regs.CR[6].lt ) { return 0x8214E5A8;  }
		/* 8214E500h case    7:*/		return 0x8214E504;
		  /* 8214E504h */ case    8:  		/* bc 12, CR6_EQ, 132 */
		/* 8214E504h case    8:*/		if ( regs.CR[6].eq ) { return 0x8214E588;  }
		/* 8214E504h case    8:*/		return 0x8214E508;
		  /* 8214E508h */ case    9:  		/* cmplwi CR6, R11, 3 */
		/* 8214E508h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8214E508h case    9:*/		return 0x8214E50C;
		  /* 8214E50Ch */ case   10:  		/* bc 12, CR6_LT, 24 */
		/* 8214E50Ch case   10:*/		if ( regs.CR[6].lt ) { return 0x8214E524;  }
		/* 8214E50Ch case   10:*/		return 0x8214E510;
		  /* 8214E510h */ case   11:  		/* bc 4, CR6_EQ, 188 */
		/* 8214E510h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8214E5CC;  }
		/* 8214E510h case   11:*/		return 0x8214E514;
		  /* 8214E514h */ case   12:  		/* mr R4, R24 */
		/* 8214E514h case   12:*/		regs.R4 = regs.R24;
		/* 8214E514h case   12:*/		return 0x8214E518;
		  /* 8214E518h */ case   13:  		/* addi R3, R1, 112 */
		/* 8214E518h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 8214E518h case   13:*/		return 0x8214E51C;
		  /* 8214E51Ch */ case   14:  		/* bl 1157028 */
		/* 8214E51Ch case   14:*/		regs.LR = 0x8214E520; return 0x82268CC0;
		/* 8214E51Ch case   14:*/		return 0x8214E520;
		  /* 8214E520h */ case   15:  		/* b 172 */
		/* 8214E520h case   15:*/		return 0x8214E5CC;
		/* 8214E520h case   15:*/		return 0x8214E524;
	}
	return 0x8214E524;
} // Block from 8214E4E4h-8214E524h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8214E524h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E524( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E524) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E524);
		  /* 8214E524h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8214E524h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8214E524h case    0:*/		return 0x8214E528;
		  /* 8214E528h */ case    1:  		/* mr R4, R27 */
		/* 8214E528h case    1:*/		regs.R4 = regs.R27;
		/* 8214E528h case    1:*/		return 0x8214E52C;
		  /* 8214E52Ch */ case    2:  		/* lwz R10, <#[R31 + 4]> */
		/* 8214E52Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8214E52Ch case    2:*/		return 0x8214E530;
		  /* 8214E530h */ case    3:  		/* addi R3, R1, 112 */
		/* 8214E530h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 8214E530h case    3:*/		return 0x8214E534;
		  /* 8214E534h */ case    4:  		/* lwz R9, <#[R31 + 16]> */
		/* 8214E534h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 8214E534h case    4:*/		return 0x8214E538;
		  /* 8214E538h */ case    5:  		/* lwz R8, <#[R31 + 12]> */
		/* 8214E538h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000000C) );
		/* 8214E538h case    5:*/		return 0x8214E53C;
		  /* 8214E53Ch */ case    6:  		/* stw R11, <#[R1 + 96]> */
		/* 8214E53Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 8214E53Ch case    6:*/		return 0x8214E540;
		  /* 8214E540h */ case    7:  		/* lfs FR2, <#[R1 + 96]> */
		/* 8214E540h case    7:*/		cpu::mem::load32f( regs, &regs.FR2, (uint32)(regs.R1 + 0x00000060) );
		/* 8214E540h case    7:*/		return 0x8214E544;
		  /* 8214E544h */ case    8:  		/* stw R10, <#[R1 + 96]> */
		/* 8214E544h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 8214E544h case    8:*/		return 0x8214E548;
		  /* 8214E548h */ case    9:  		/* lfs FR1, <#[R1 + 96]> */
		/* 8214E548h case    9:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000060) );
		/* 8214E548h case    9:*/		return 0x8214E54C;
		  /* 8214E54Ch */ case   10:  		/* stw R9, <#[R1 + 96]> */
		/* 8214E54Ch case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000060) );
		/* 8214E54Ch case   10:*/		return 0x8214E550;
		  /* 8214E550h */ case   11:  		/* lfs FR4, <#[R1 + 96]> */
		/* 8214E550h case   11:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R1 + 0x00000060) );
		/* 8214E550h case   11:*/		return 0x8214E554;
		  /* 8214E554h */ case   12:  		/* stw R8, <#[R1 + 96]> */
		/* 8214E554h case   12:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000060) );
		/* 8214E554h case   12:*/		return 0x8214E558;
		  /* 8214E558h */ case   13:  		/* lfs FR3, <#[R1 + 96]> */
		/* 8214E558h case   13:*/		cpu::mem::load32f( regs, &regs.FR3, (uint32)(regs.R1 + 0x00000060) );
		/* 8214E558h case   13:*/		return 0x8214E55C;
		  /* 8214E55Ch */ case   14:  		/* stfd FR3, <#[R1 + 48]> */
		/* 8214E55Ch case   14:*/		cpu::mem::store64f( regs, regs.FR3, (uint32)(regs.R1 + 0x00000030) );
		/* 8214E55Ch case   14:*/		return 0x8214E560;
		  /* 8214E560h */ case   15:  		/* ld R7, <#[R1 + 48]> */
		/* 8214E560h case   15:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R1 + 0x00000030) );
		/* 8214E560h case   15:*/		return 0x8214E564;
		  /* 8214E564h */ case   16:  		/* stfd FR4, <#[R1 + 56]> */
		/* 8214E564h case   16:*/		cpu::mem::store64f( regs, regs.FR4, (uint32)(regs.R1 + 0x00000038) );
		/* 8214E564h case   16:*/		return 0x8214E568;
		  /* 8214E568h */ case   17:  		/* ld R8, <#[R1 + 56]> */
		/* 8214E568h case   17:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R1 + 0x00000038) );
		/* 8214E568h case   17:*/		return 0x8214E56C;
		  /* 8214E56Ch */ case   18:  		/* stfd FR2, <#[R1 + 40]> */
		/* 8214E56Ch case   18:*/		cpu::mem::store64f( regs, regs.FR2, (uint32)(regs.R1 + 0x00000028) );
		/* 8214E56Ch case   18:*/		return 0x8214E570;
		  /* 8214E570h */ case   19:  		/* ld R6, <#[R1 + 40]> */
		/* 8214E570h case   19:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 8214E570h case   19:*/		return 0x8214E574;
		  /* 8214E574h */ case   20:  		/* stfd FR1, <#[R1 + 32]> */
		/* 8214E574h case   20:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R1 + 0x00000020) );
		/* 8214E574h case   20:*/		return 0x8214E578;
		  /* 8214E578h */ case   21:  		/* ld R5, <#[R1 + 32]> */
		/* 8214E578h case   21:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x00000020) );
		/* 8214E578h case   21:*/		return 0x8214E57C;
		  /* 8214E57Ch */ case   22:  		/* bl 1156932 */
		/* 8214E57Ch case   22:*/		regs.LR = 0x8214E580; return 0x82268CC0;
		/* 8214E57Ch case   22:*/		return 0x8214E580;
		  /* 8214E580h */ case   23:  		/* addi R31, R31, 16 */
		/* 8214E580h case   23:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x10);
		/* 8214E580h case   23:*/		return 0x8214E584;
		  /* 8214E584h */ case   24:  		/* b 72 */
		/* 8214E584h case   24:*/		return 0x8214E5CC;
		/* 8214E584h case   24:*/		return 0x8214E588;
	}
	return 0x8214E588;
} // Block from 8214E524h-8214E588h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8214E588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E588);
		  /* 8214E588h */ case    0:  		/* mr R4, R30 */
		/* 8214E588h case    0:*/		regs.R4 = regs.R30;
		/* 8214E588h case    0:*/		return 0x8214E58C;
		  /* 8214E58Ch */ case    1:  		/* lwz R5, <#[R31 + 4]> */
		/* 8214E58Ch case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000004) );
		/* 8214E58Ch case    1:*/		return 0x8214E590;
		  /* 8214E590h */ case    2:  		/* addi R3, R1, 112 */
		/* 8214E590h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 8214E590h case    2:*/		return 0x8214E594;
		  /* 8214E594h */ case    3:  		/* lwz R6, <#[R31 + 8]> */
		/* 8214E594h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000008) );
		/* 8214E594h case    3:*/		return 0x8214E598;
		  /* 8214E598h */ case    4:  		/* lwz R7, <#[R31 + 12]> */
		/* 8214E598h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000000C) );
		/* 8214E598h case    4:*/		return 0x8214E59C;
		  /* 8214E59Ch */ case    5:  		/* lwzu R8, <#[R31 + 16]> */
		/* 8214E59Ch case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000010) );
		regs.R31 = (uint32)(regs.R31 + 0x00000010);
		/* 8214E59Ch case    5:*/		return 0x8214E5A0;
		  /* 8214E5A0h */ case    6:  		/* bl 1156896 */
		/* 8214E5A0h case    6:*/		regs.LR = 0x8214E5A4; return 0x82268CC0;
		/* 8214E5A0h case    6:*/		return 0x8214E5A4;
		  /* 8214E5A4h */ case    7:  		/* b 40 */
		/* 8214E5A4h case    7:*/		return 0x8214E5CC;
		/* 8214E5A4h case    7:*/		return 0x8214E5A8;
	}
	return 0x8214E5A8;
} // Block from 8214E588h-8214E5A8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214E5A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E5A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E5A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E5A8);
		  /* 8214E5A8h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8214E5A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214E5A8h case    0:*/		return 0x8214E5AC;
		  /* 8214E5ACh */ case    1:  		/* mr R5, R25 */
		/* 8214E5ACh case    1:*/		regs.R5 = regs.R25;
		/* 8214E5ACh case    1:*/		return 0x8214E5B0;
		  /* 8214E5B0h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8214E5B0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214E5B0h case    2:*/		return 0x8214E5B4;
		  /* 8214E5B4h */ case    3:  		/* bc 4, CR6_EQ, 8 */
		/* 8214E5B4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8214E5BC;  }
		/* 8214E5B4h case    3:*/		return 0x8214E5B8;
		  /* 8214E5B8h */ case    4:  		/* mr R5, R26 */
		/* 8214E5B8h case    4:*/		regs.R5 = regs.R26;
		/* 8214E5B8h case    4:*/		return 0x8214E5BC;
	}
	return 0x8214E5BC;
} // Block from 8214E5A8h-8214E5BCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214E5BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E5BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E5BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E5BC);
		  /* 8214E5BCh */ case    0:  		/* mr R4, R29 */
		/* 8214E5BCh case    0:*/		regs.R4 = regs.R29;
		/* 8214E5BCh case    0:*/		return 0x8214E5C0;
		  /* 8214E5C0h */ case    1:  		/* addi R3, R1, 112 */
		/* 8214E5C0h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 8214E5C0h case    1:*/		return 0x8214E5C4;
		  /* 8214E5C4h */ case    2:  		/* bl 1156860 */
		/* 8214E5C4h case    2:*/		regs.LR = 0x8214E5C8; return 0x82268CC0;
		/* 8214E5C4h case    2:*/		return 0x8214E5C8;
		  /* 8214E5C8h */ case    3:  		/* addi R31, R31, 4 */
		/* 8214E5C8h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 8214E5C8h case    3:*/		return 0x8214E5CC;
	}
	return 0x8214E5CC;
} // Block from 8214E5BCh-8214E5CCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214E5CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E5CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E5CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E5CC);
		  /* 8214E5CCh */ case    0:  		/* addi R10, R1, 112 */
		/* 8214E5CCh case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 8214E5CCh case    0:*/		return 0x8214E5D0;
		  /* 8214E5D0h */ case    1:  		/* addi R11, R1, 240 */
		/* 8214E5D0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xF0);
		/* 8214E5D0h case    1:*/		return 0x8214E5D4;
		  /* 8214E5D4h */ case    2:  		/* lbz R9, <#[R11]> */
		/* 8214E5D4h case    2:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8214E5D4h case    2:*/		return 0x8214E5D8;
		  /* 8214E5D8h */ case    3:  		/* addi R11, R11, 1 */
		/* 8214E5D8h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214E5D8h case    3:*/		return 0x8214E5DC;
		  /* 8214E5DCh */ case    4:  		/* cmplwi CR6, R9, 0 */
		/* 8214E5DCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8214E5DCh case    4:*/		return 0x8214E5E0;
		  /* 8214E5E0h */ case    5:  		/* bc 4, CR6_EQ, -12 */
		/* 8214E5E0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8214E5D4;  }
		/* 8214E5E0h case    5:*/		return 0x8214E5E4;
		  /* 8214E5E4h */ case    6:  		/* addi R11, R11, -1 */
		/* 8214E5E4h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8214E5E4h case    6:*/		return 0x8214E5E8;
		  /* 8214E5E8h */ case    7:  		/* lbz R9, <#[R10]> */
		/* 8214E5E8h case    7:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8214E5E8h case    7:*/		return 0x8214E5EC;
		  /* 8214E5ECh */ case    8:  		/* addi R10, R10, 1 */
		/* 8214E5ECh case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8214E5ECh case    8:*/		return 0x8214E5F0;
		  /* 8214E5F0h */ case    9:  		/* cmplwi CR6, R9, 0 */
		/* 8214E5F0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8214E5F0h case    9:*/		return 0x8214E5F4;
		  /* 8214E5F4h */ case   10:  		/* stb R9, <#[R11]> */
		/* 8214E5F4h case   10:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8214E5F4h case   10:*/		return 0x8214E5F8;
		  /* 8214E5F8h */ case   11:  		/* addi R11, R11, 1 */
		/* 8214E5F8h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214E5F8h case   11:*/		return 0x8214E5FC;
		  /* 8214E5FCh */ case   12:  		/* bc 4, CR6_EQ, -20 */
		/* 8214E5FCh case   12:*/		if ( !regs.CR[6].eq ) { return 0x8214E5E8;  }
		/* 8214E5FCh case   12:*/		return 0x8214E600;
		  /* 8214E600h */ case   13:  		/* lwz R11, <#[R23 + 12]> */
		/* 8214E600h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000000C) );
		/* 8214E600h case   13:*/		return 0x8214E604;
		  /* 8214E604h */ case   14:  		/* addi R22, R22, 1 */
		/* 8214E604h case   14:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 8214E604h case   14:*/		return 0x8214E608;
		  /* 8214E608h */ case   15:  		/* cmplw CR6, R22, R11 */
		/* 8214E608h case   15:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R11);
		/* 8214E608h case   15:*/		return 0x8214E60C;
		  /* 8214E60Ch */ case   16:  		/* bc 12, CR6_LT, -356 */
		/* 8214E60Ch case   16:*/		if ( regs.CR[6].lt ) { return 0x8214E4A8;  }
		/* 8214E60Ch case   16:*/		return 0x8214E610;
	}
	return 0x8214E610;
} // Block from 8214E5CCh-8214E610h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8214E610h
// Function '?MyBuildMicrocodeCommon@XGRAPHICS@@YAJPBKKPAUID3DXConstantTable@@PAU_CS_COMPILED_SHADER@1@PAPAUXMicrocodeBuilder@@HPAT_UCODE_VSINPUTDECLARATION@@PAU_UCODE_DEBUGGER_PARAMETERS@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E610( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E610) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E610);
		  /* 8214E610h */ case    0:  		/* lis R10, -32253 */
		/* 8214E610h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8214E610h case    0:*/		return 0x8214E614;
		  /* 8214E614h */ case    1:  		/* addi R11, R1, 240 */
		/* 8214E614h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xF0);
		/* 8214E614h case    1:*/		return 0x8214E618;
		  /* 8214E618h */ case    2:  		/* addi R10, R10, 28220 */
		/* 8214E618h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x6E3C);
		/* 8214E618h case    2:*/		return 0x8214E61C;
		  /* 8214E61Ch */ case    3:  		/* lbz R9, <#[R11]> */
		/* 8214E61Ch case    3:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8214E61Ch case    3:*/		return 0x8214E620;
		  /* 8214E620h */ case    4:  		/* addi R11, R11, 1 */
		/* 8214E620h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214E620h case    4:*/		return 0x8214E624;
		  /* 8214E624h */ case    5:  		/* cmplwi CR6, R9, 0 */
		/* 8214E624h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8214E624h case    5:*/		return 0x8214E628;
		  /* 8214E628h */ case    6:  		/* bc 4, CR6_EQ, -12 */
		/* 8214E628h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8214E61C;  }
		/* 8214E628h case    6:*/		return 0x8214E62C;
		  /* 8214E62Ch */ case    7:  		/* addi R11, R11, -1 */
		/* 8214E62Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8214E62Ch case    7:*/		return 0x8214E630;
		  /* 8214E630h */ case    8:  		/* lbz R9, <#[R10]> */
		/* 8214E630h case    8:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8214E630h case    8:*/		return 0x8214E634;
		  /* 8214E634h */ case    9:  		/* addi R10, R10, 1 */
		/* 8214E634h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8214E634h case    9:*/		return 0x8214E638;
		  /* 8214E638h */ case   10:  		/* cmplwi CR6, R9, 0 */
		/* 8214E638h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8214E638h case   10:*/		return 0x8214E63C;
		  /* 8214E63Ch */ case   11:  		/* stb R9, <#[R11]> */
		/* 8214E63Ch case   11:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8214E63Ch case   11:*/		return 0x8214E640;
		  /* 8214E640h */ case   12:  		/* addi R11, R11, 1 */
		/* 8214E640h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8214E640h case   12:*/		return 0x8214E644;
		  /* 8214E644h */ case   13:  		/* bc 4, CR6_EQ, -20 */
		/* 8214E644h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8214E630;  }
		/* 8214E644h case   13:*/		return 0x8214E648;
	}
	return 0x8214E648;
} // Block from 8214E610h-8214E648h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8214E648h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E648);
		  /* 8214E648h */ case    0:  		/* lis R10, -32217 */
		/* 8214E648h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 8214E648h case    0:*/		return 0x8214E64C;
		  /* 8214E64Ch */ case    1:  		/* lwz R9, <#[R23 + 20]> */
		/* 8214E64Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x00000014) );
		/* 8214E64Ch case    1:*/		return 0x8214E650;
		  /* 8214E650h */ case    2:  		/* lis R11, -32256 */
		/* 8214E650h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8214E650h case    2:*/		return 0x8214E654;
		  /* 8214E654h */ case    3:  		/* addi R10, R10, 18144 */
		/* 8214E654h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x46E0);
		/* 8214E654h case    3:*/		return 0x8214E658;
		  /* 8214E658h */ case    4:  		/* addi R7, R11, 4485 */
		/* 8214E658h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x1185);
		/* 8214E658h case    4:*/		return 0x8214E65C;
		  /* 8214E65Ch */ case    5:  		/* mr R11, R10 */
		/* 8214E65Ch case    5:*/		regs.R11 = regs.R10;
		/* 8214E65Ch case    5:*/		return 0x8214E660;
		  /* 8214E660h */ case    6:  		/* lwz R10, <#[R10 + 4]> */
		/* 8214E660h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 8214E660h case    6:*/		return 0x8214E664;
		  /* 8214E664h */ case    7:  		/* b 24 */
		/* 8214E664h case    7:*/		return 0x8214E67C;
		/* 8214E664h case    7:*/		return 0x8214E668;
		  /* 8214E668h */ case    8:  		/* lwz R10, <#[R11]> */
		/* 8214E668h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8214E668h case    8:*/		return 0x8214E66C;
		  /* 8214E66Ch */ case    9:  		/* cmplw CR6, R10, R9 */
		/* 8214E66Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8214E66Ch case    9:*/		return 0x8214E670;
		  /* 8214E670h */ case   10:  		/* bc 12, CR6_EQ, 48 */
		/* 8214E670h case   10:*/		if ( regs.CR[6].eq ) { return 0x8214E6A0;  }
		/* 8214E670h case   10:*/		return 0x8214E674;
		  /* 8214E674h */ case   11:  		/* addi R11, R11, 8 */
		/* 8214E674h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 8214E674h case   11:*/		return 0x8214E678;
		  /* 8214E678h */ case   12:  		/* lwz R10, <#[R11 + 4]> */
		/* 8214E678h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8214E678h case   12:*/		return 0x8214E67C;
	}
	return 0x8214E67C;
} // Block from 8214E648h-8214E67Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214E67Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E67C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E67C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E67C);
		  /* 8214E67Ch */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 8214E67Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8214E67Ch case    0:*/		return 0x8214E680;
		  /* 8214E680h */ case    1:  		/* bc 4, CR6_EQ, -24 */
		/* 8214E680h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8214E668;  }
		/* 8214E680h case    1:*/		return 0x8214E684;
		  /* 8214E684h */ case    2:  		/* mr R6, R7 */
		/* 8214E684h case    2:*/		regs.R6 = regs.R7;
		/* 8214E684h case    2:*/		return 0x8214E688;
		  /* 8214E688h */ case    3:  		/* lis R11, -32217 */
		/* 8214E688h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8214E688h case    3:*/		return 0x8214E68C;
		  /* 8214E68Ch */ case    4:  		/* lwz R9, <#[R23 + 16]> */
		/* 8214E68Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x00000010) );
		/* 8214E68Ch case    4:*/		return 0x8214E690;
		  /* 8214E690h */ case    5:  		/* addi R10, R11, 18088 */
		/* 8214E690h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x46A8);
		/* 8214E690h case    5:*/		return 0x8214E694;
		  /* 8214E694h */ case    6:  		/* mr R11, R10 */
		/* 8214E694h case    6:*/		regs.R11 = regs.R10;
		/* 8214E694h case    6:*/		return 0x8214E698;
		  /* 8214E698h */ case    7:  		/* lwz R10, <#[R10 + 4]> */
		/* 8214E698h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 8214E698h case    7:*/		return 0x8214E69C;
		  /* 8214E69Ch */ case    8:  		/* b 32 */
		/* 8214E69Ch case    8:*/		return 0x8214E6BC;
		/* 8214E69Ch case    8:*/		return 0x8214E6A0;
	}
	return 0x8214E6A0;
} // Block from 8214E67Ch-8214E6A0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214E6A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E6A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E6A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E6A0);
		  /* 8214E6A0h */ case    0:  		/* lwz R6, <#[R11 + 4]> */
		/* 8214E6A0h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 8214E6A0h case    0:*/		return 0x8214E6A4;
		  /* 8214E6A4h */ case    1:  		/* b -28 */
		/* 8214E6A4h case    1:*/		return 0x8214E688;
		/* 8214E6A4h case    1:*/		return 0x8214E6A8;
		  /* 8214E6A8h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 8214E6A8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8214E6A8h case    2:*/		return 0x8214E6AC;
		  /* 8214E6ACh */ case    3:  		/* cmplw CR6, R10, R9 */
		/* 8214E6ACh case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8214E6ACh case    3:*/		return 0x8214E6B0;
		  /* 8214E6B0h */ case    4:  		/* bc 12, CR6_EQ, 24 */
		/* 8214E6B0h case    4:*/		if ( regs.CR[6].eq ) { return 0x8214E6C8;  }
		/* 8214E6B0h case    4:*/		return 0x8214E6B4;
		  /* 8214E6B4h */ case    5:  		/* addi R11, R11, 8 */
		/* 8214E6B4h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 8214E6B4h case    5:*/		return 0x8214E6B8;
		  /* 8214E6B8h */ case    6:  		/* lwz R10, <#[R11 + 4]> */
		/* 8214E6B8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8214E6B8h case    6:*/		return 0x8214E6BC;
	}
	return 0x8214E6BC;
} // Block from 8214E6A0h-8214E6BCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8214E6BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E6BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E6BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E6BC);
		  /* 8214E6BCh */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 8214E6BCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8214E6BCh case    0:*/		return 0x8214E6C0;
		  /* 8214E6C0h */ case    1:  		/* bc 4, CR6_EQ, -24 */
		/* 8214E6C0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8214E6A8;  }
		/* 8214E6C0h case    1:*/		return 0x8214E6C4;
		  /* 8214E6C4h */ case    2:  		/* b 8 */
		/* 8214E6C4h case    2:*/		return 0x8214E6CC;
		/* 8214E6C4h case    2:*/		return 0x8214E6C8;
	}
	return 0x8214E6C8;
} // Block from 8214E6BCh-8214E6C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214E6C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E6C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E6C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E6C8);
		  /* 8214E6C8h */ case    0:  		/* lwz R7, <#[R11 + 4]> */
		/* 8214E6C8h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 8214E6C8h case    0:*/		return 0x8214E6CC;
	}
	return 0x8214E6CC;
} // Block from 8214E6C8h-8214E6CCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214E6CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E6CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E6CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E6CC);
		  /* 8214E6CCh */ case    0:  		/* addi R11, R1, 240 */
		/* 8214E6CCh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xF0);
		/* 8214E6CCh case    0:*/		return 0x8214E6D0;
		  /* 8214E6D0h */ case    1:  		/* lwz R9, <#[R23 + 28]> */
		/* 8214E6D0h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x0000001C) );
		/* 8214E6D0h case    1:*/		return 0x8214E6D4;
		  /* 8214E6D4h */ case    2:  		/* lis R5, -32253 */
		/* 8214E6D4h case    2:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8203);
		/* 8214E6D4h case    2:*/		return 0x8214E6D8;
		  /* 8214E6D8h */ case    3:  		/* lwz R8, <#[R23 + 24]> */
		/* 8214E6D8h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R23 + 0x00000018) );
		/* 8214E6D8h case    3:*/		return 0x8214E6DC;
		  /* 8214E6DCh */ case    4:  		/* stw R11, <#[R1 + 84]> */
		/* 8214E6DCh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8214E6DCh case    4:*/		return 0x8214E6E0;
		  /* 8214E6E0h */ case    5:  		/* addi R10, R1, 368 */
		/* 8214E6E0h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x170);
		/* 8214E6E0h case    5:*/		return 0x8214E6E4;
		  /* 8214E6E4h */ case    6:  		/* addi R4, R5, 28180 */
		/* 8214E6E4h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R5,0x6E14);
		/* 8214E6E4h case    6:*/		return 0x8214E6E8;
		  /* 8214E6E8h */ case    7:  		/* mr R5, R19 */
		/* 8214E6E8h case    7:*/		regs.R5 = regs.R19;
		/* 8214E6E8h case    7:*/		return 0x8214E6EC;
		  /* 8214E6ECh */ case    8:  		/* mr R3, R20 */
		/* 8214E6ECh case    8:*/		regs.R3 = regs.R20;
		/* 8214E6ECh case    8:*/		return 0x8214E6F0;
		  /* 8214E6F0h */ case    9:  		/* bl -1752 */
		/* 8214E6F0h case    9:*/		regs.LR = 0x8214E6F4; return 0x8214E018;
		/* 8214E6F0h case    9:*/		return 0x8214E6F4;
		  /* 8214E6F4h */ case   10:  		/* addi R1, R1, 608 */
		/* 8214E6F4h case   10:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x260);
		/* 8214E6F4h case   10:*/		return 0x8214E6F8;
		  /* 8214E6F8h */ case   11:  		/* b -775284 */
		/* 8214E6F8h case   11:*/		return 0x82091284;
		/* 8214E6F8h case   11:*/		return 0x8214E6FC;
		  /* 8214E6FCh */ case   12:  		/* nop */
		/* 8214E6FCh case   12:*/		cpu::op::nop();
		/* 8214E6FCh case   12:*/		return 0x8214E700;
	}
	return 0x8214E700;
} // Block from 8214E6CCh-8214E700h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214E700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E700);
		  /* 8214E700h */ case    0:  		/* mfspr R12, LR */
		/* 8214E700h case    0:*/		regs.R12 = regs.LR;
		/* 8214E700h case    0:*/		return 0x8214E704;
		  /* 8214E704h */ case    1:  		/* bl -775360 */
		/* 8214E704h case    1:*/		regs.LR = 0x8214E708; return 0x82091244;
		/* 8214E704h case    1:*/		return 0x8214E708;
		  /* 8214E708h */ case    2:  		/* stwu R1, <#[R1 - 592]> */
		/* 8214E708h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFDB0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFDB0);
		/* 8214E708h case    2:*/		return 0x8214E70C;
		  /* 8214E70Ch */ case    3:  		/* mr R24, R3 */
		/* 8214E70Ch case    3:*/		regs.R24 = regs.R3;
		/* 8214E70Ch case    3:*/		return 0x8214E710;
		  /* 8214E710h */ case    4:  		/* mr R31, R4 */
		/* 8214E710h case    4:*/		regs.R31 = regs.R4;
		/* 8214E710h case    4:*/		return 0x8214E714;
		  /* 8214E714h */ case    5:  		/* mr R30, R5 */
		/* 8214E714h case    5:*/		regs.R30 = regs.R5;
		/* 8214E714h case    5:*/		return 0x8214E718;
		  /* 8214E718h */ case    6:  		/* addi R3, R1, 80 */
		/* 8214E718h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8214E718h case    6:*/		return 0x8214E71C;
		  /* 8214E71Ch */ case    7:  		/* li R5, 48 */
		/* 8214E71Ch case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x30);
		/* 8214E71Ch case    7:*/		return 0x8214E720;
		  /* 8214E720h */ case    8:  		/* mr R4, R7 */
		/* 8214E720h case    8:*/		regs.R4 = regs.R7;
		/* 8214E720h case    8:*/		return 0x8214E724;
		  /* 8214E724h */ case    9:  		/* mr R29, R6 */
		/* 8214E724h case    9:*/		regs.R29 = regs.R6;
		/* 8214E724h case    9:*/		return 0x8214E728;
		  /* 8214E728h */ case   10:  		/* mr R28, R8 */
		/* 8214E728h case   10:*/		regs.R28 = regs.R8;
		/* 8214E728h case   10:*/		return 0x8214E72C;
		  /* 8214E72Ch */ case   11:  		/* mr R23, R9 */
		/* 8214E72Ch case   11:*/		regs.R23 = regs.R9;
		/* 8214E72Ch case   11:*/		return 0x8214E730;
		  /* 8214E730h */ case   12:  		/* mr R26, R10 */
		/* 8214E730h case   12:*/		regs.R26 = regs.R10;
		/* 8214E730h case   12:*/		return 0x8214E734;
		  /* 8214E734h */ case   13:  		/* bl -773508 */
		/* 8214E734h case   13:*/		regs.LR = 0x8214E738; return 0x820919B0;
		/* 8214E734h case   13:*/		return 0x8214E738;
		  /* 8214E738h */ case   14:  		/* lis R11, -32253 */
		/* 8214E738h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214E738h case   14:*/		return 0x8214E73C;
		  /* 8214E73Ch */ case   15:  		/* addi R27, R11, 26168 */
		/* 8214E73Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x6638);
		/* 8214E73Ch case   15:*/		return 0x8214E740;
		  /* 8214E740h */ case   16:  		/* lwz R11, <#[R1 + 112]> */
		/* 8214E740h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 8214E740h case   16:*/		return 0x8214E744;
		  /* 8214E744h */ case   17:  		/* cmplwi CR6, R11, 1 */
		/* 8214E744h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8214E744h case   17:*/		return 0x8214E748;
		  /* 8214E748h */ case   18:  		/* bc 12, CR6_EQ, 16 */
		/* 8214E748h case   18:*/		if ( regs.CR[6].eq ) { return 0x8214E758;  }
		/* 8214E748h case   18:*/		return 0x8214E74C;
		  /* 8214E74Ch */ case   19:  		/* lis R11, -32253 */
		/* 8214E74Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214E74Ch case   19:*/		return 0x8214E750;
		  /* 8214E750h */ case   20:  		/* addi R4, R11, 28320 */
		/* 8214E750h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6EA0);
		/* 8214E750h case   20:*/		return 0x8214E754;
		  /* 8214E754h */ case   21:  		/* b 32 */
		/* 8214E754h case   21:*/		return 0x8214E774;
		/* 8214E754h case   21:*/		return 0x8214E758;
	}
	return 0x8214E758;
} // Block from 8214E700h-8214E758h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8214E758h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E758);
		  /* 8214E758h */ case    0:  		/* lwz R11, <#[R1 + 116]> */
		/* 8214E758h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 8214E758h case    0:*/		return 0x8214E75C;
		  /* 8214E75Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8214E75Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214E75Ch case    1:*/		return 0x8214E760;
		  /* 8214E760h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 8214E760h case    2:*/		if ( regs.CR[6].eq ) { return 0x8214E770;  }
		/* 8214E760h case    2:*/		return 0x8214E764;
		  /* 8214E764h */ case    3:  		/* lis R11, -32253 */
		/* 8214E764h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214E764h case    3:*/		return 0x8214E768;
		  /* 8214E768h */ case    4:  		/* addi R4, R11, 28308 */
		/* 8214E768h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6E94);
		/* 8214E768h case    4:*/		return 0x8214E76C;
		  /* 8214E76Ch */ case    5:  		/* b 8 */
		/* 8214E76Ch case    5:*/		return 0x8214E774;
		/* 8214E76Ch case    5:*/		return 0x8214E770;
	}
	return 0x8214E770;
} // Block from 8214E758h-8214E770h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214E770h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E770);
		  /* 8214E770h */ case    0:  		/* mr R4, R27 */
		/* 8214E770h case    0:*/		regs.R4 = regs.R27;
		/* 8214E770h case    0:*/		return 0x8214E774;
	}
	return 0x8214E774;
} // Block from 8214E770h-8214E774h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214E774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E774);
		  /* 8214E774h */ case    0:  		/* mr R8, R29 */
		/* 8214E774h case    0:*/		regs.R8 = regs.R29;
		/* 8214E774h case    0:*/		return 0x8214E778;
		  /* 8214E778h */ case    1:  		/* lwz R7, <#[R1 + 80]> */
		/* 8214E778h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 8214E778h case    1:*/		return 0x8214E77C;
		  /* 8214E77Ch */ case    2:  		/* mr R6, R31 */
		/* 8214E77Ch case    2:*/		regs.R6 = regs.R31;
		/* 8214E77Ch case    2:*/		return 0x8214E780;
		  /* 8214E780h */ case    3:  		/* mr R5, R30 */
		/* 8214E780h case    3:*/		regs.R5 = regs.R30;
		/* 8214E780h case    3:*/		return 0x8214E784;
		  /* 8214E784h */ case    4:  		/* addi R3, R1, 128 */
		/* 8214E784h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 8214E784h case    4:*/		return 0x8214E788;
		  /* 8214E788h */ case    5:  		/* bl 1156408 */
		/* 8214E788h case    5:*/		regs.LR = 0x8214E78C; return 0x82268CC0;
		/* 8214E788h case    5:*/		return 0x8214E78C;
		  /* 8214E78Ch */ case    6:  		/* lwz R11, <#[R1 + 112]> */
		/* 8214E78Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 8214E78Ch case    6:*/		return 0x8214E790;
		  /* 8214E790h */ case    7:  		/* cmplwi CR6, R11, 1 */
		/* 8214E790h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8214E790h case    7:*/		return 0x8214E794;
		  /* 8214E794h */ case    8:  		/* bc 4, CR6_EQ, 44 */
		/* 8214E794h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8214E7C0;  }
		/* 8214E794h case    8:*/		return 0x8214E798;
		  /* 8214E798h */ case    9:  		/* lwz R11, <#[R1 + 116]> */
		/* 8214E798h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 8214E798h case    9:*/		return 0x8214E79C;
		  /* 8214E79Ch */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 8214E79Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214E79Ch case   10:*/		return 0x8214E7A0;
		  /* 8214E7A0h */ case   11:  		/* bc 4, CR6_EQ, 292 */
		/* 8214E7A0h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8214E8C4;  }
		/* 8214E7A0h case   11:*/		return 0x8214E7A4;
		  /* 8214E7A4h */ case   12:  		/* addi R5, R1, 80 */
		/* 8214E7A4h case   12:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8214E7A4h case   12:*/		return 0x8214E7A8;
		  /* 8214E7A8h */ case   13:  		/* addi R4, R1, 128 */
		/* 8214E7A8h case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 8214E7A8h case   13:*/		return 0x8214E7AC;
		  /* 8214E7ACh */ case   14:  		/* mr R3, R24 */
		/* 8214E7ACh case   14:*/		regs.R3 = regs.R24;
		/* 8214E7ACh case   14:*/		return 0x8214E7B0;
		  /* 8214E7B0h */ case   15:  		/* bl -1112 */
		/* 8214E7B0h case   15:*/		regs.LR = 0x8214E7B4; return 0x8214E358;
		/* 8214E7B0h case   15:*/		return 0x8214E7B4;
		  /* 8214E7B4h */ case   16:  		/* lwz R11, <#[R1 + 112]> */
		/* 8214E7B4h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 8214E7B4h case   16:*/		return 0x8214E7B8;
		  /* 8214E7B8h */ case   17:  		/* cmplwi CR6, R11, 1 */
		/* 8214E7B8h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8214E7B8h case   17:*/		return 0x8214E7BC;
		  /* 8214E7BCh */ case   18:  		/* bc 12, CR6_EQ, 252 */
		/* 8214E7BCh case   18:*/		if ( regs.CR[6].eq ) { return 0x8214E8B8;  }
		/* 8214E7BCh case   18:*/		return 0x8214E7C0;
	}
	return 0x8214E7C0;
} // Block from 8214E774h-8214E7C0h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8214E7C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E7C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E7C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E7C0);
		  /* 8214E7C0h */ case    0:  		/* lis R11, -32253 */
		/* 8214E7C0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214E7C0h case    0:*/		return 0x8214E7C4;
		  /* 8214E7C4h */ case    1:  		/* mr R7, R29 */
		/* 8214E7C4h case    1:*/		regs.R7 = regs.R29;
		/* 8214E7C4h case    1:*/		return 0x8214E7C8;
		  /* 8214E7C8h */ case    2:  		/* addi R4, R11, 28300 */
		/* 8214E7C8h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6E8C);
		/* 8214E7C8h case    2:*/		return 0x8214E7CC;
		  /* 8214E7CCh */ case    3:  		/* mr R6, R31 */
		/* 8214E7CCh case    3:*/		regs.R6 = regs.R31;
		/* 8214E7CCh case    3:*/		return 0x8214E7D0;
		  /* 8214E7D0h */ case    4:  		/* mr R5, R30 */
		/* 8214E7D0h case    4:*/		regs.R5 = regs.R30;
		/* 8214E7D0h case    4:*/		return 0x8214E7D4;
		  /* 8214E7D4h */ case    5:  		/* addi R3, R1, 256 */
		/* 8214E7D4h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x100);
		/* 8214E7D4h case    5:*/		return 0x8214E7D8;
		  /* 8214E7D8h */ case    6:  		/* bl 1156328 */
		/* 8214E7D8h case    6:*/		regs.LR = 0x8214E7DC; return 0x82268CC0;
		/* 8214E7D8h case    6:*/		return 0x8214E7DC;
		  /* 8214E7DCh */ case    7:  		/* li R11, 1 */
		/* 8214E7DCh case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8214E7DCh case    7:*/		return 0x8214E7E0;
		  /* 8214E7E0h */ case    8:  		/* mr R5, R26 */
		/* 8214E7E0h case    8:*/		regs.R5 = regs.R26;
		/* 8214E7E0h case    8:*/		return 0x8214E7E4;
		  /* 8214E7E4h */ case    9:  		/* mr R4, R28 */
		/* 8214E7E4h case    9:*/		regs.R4 = regs.R28;
		/* 8214E7E4h case    9:*/		return 0x8214E7E8;
		  /* 8214E7E8h */ case   10:  		/* addi R3, R1, 80 */
		/* 8214E7E8h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8214E7E8h case   10:*/		return 0x8214E7EC;
		  /* 8214E7ECh */ case   11:  		/* lwz R27, <#[R1 + 112]> */
		/* 8214E7ECh case   11:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000070) );
		/* 8214E7ECh case   11:*/		return 0x8214E7F0;
		  /* 8214E7F0h */ case   12:  		/* stw R11, <#[R1 + 112]> */
		/* 8214E7F0h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 8214E7F0h case   12:*/		return 0x8214E7F4;
		  /* 8214E7F4h */ case   13:  		/* lwz R31, <#[R1 + 92]> */
		/* 8214E7F4h case   13:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214E7F4h case   13:*/		return 0x8214E7F8;
		  /* 8214E7F8h */ case   14:  		/* bl -7832 */
		/* 8214E7F8h case   14:*/		regs.LR = 0x8214E7FC; return 0x8214C960;
		/* 8214E7F8h case   14:*/		return 0x8214E7FC;
		  /* 8214E7FCh */ case   15:  		/* stw R3, <#[R1 + 92]> */
		/* 8214E7FCh case   15:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214E7FCh case   15:*/		return 0x8214E800;
		  /* 8214E800h */ case   16:  		/* li R29, 0 */
		/* 8214E800h case   16:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8214E800h case   16:*/		return 0x8214E804;
		  /* 8214E804h */ case   17:  		/* cmplwi CR6, R27, 0 */
		/* 8214E804h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8214E804h case   17:*/		return 0x8214E808;
		  /* 8214E808h */ case   18:  		/* bc 12, CR6_EQ, 484 */
		/* 8214E808h case   18:*/		if ( regs.CR[6].eq ) { return 0x8214E9EC;  }
		/* 8214E808h case   18:*/		return 0x8214E80C;
		  /* 8214E80Ch */ case   19:  		/* lis R11, -32256 */
		/* 8214E80Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8214E80Ch case   19:*/		return 0x8214E810;
		  /* 8214E810h */ case   20:  		/* lis R10, -32253 */
		/* 8214E810h case   20:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8214E810h case   20:*/		return 0x8214E814;
		  /* 8214E814h */ case   21:  		/* addi R30, R11, 4485 */
		/* 8214E814h case   21:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x1185);
		/* 8214E814h case   21:*/		return 0x8214E818;
		  /* 8214E818h */ case   22:  		/* addi R25, R10, 28292 */
		/* 8214E818h case   22:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R10,0x6E84);
		/* 8214E818h case   22:*/		return 0x8214E81C;
		  /* 8214E81Ch */ case   23:  		/* mr R4, R25 */
		/* 8214E81Ch case   23:*/		regs.R4 = regs.R25;
		/* 8214E81Ch case   23:*/		return 0x8214E820;
	}
	return 0x8214E820;
} // Block from 8214E7C0h-8214E820h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8214E820h
// Function '?Mark@FixSerializationContext@XGRAPHICS@@QAAXK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E820);
		  /* 8214E820h */ case    0:  		/* mr R5, R29 */
		/* 8214E820h case    0:*/		regs.R5 = regs.R29;
		/* 8214E820h case    0:*/		return 0x8214E824;
		  /* 8214E824h */ case    1:  		/* addi R3, R1, 384 */
		/* 8214E824h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x180);
		/* 8214E824h case    1:*/		return 0x8214E828;
		  /* 8214E828h */ case    2:  		/* bl 1156248 */
		/* 8214E828h case    2:*/		regs.LR = 0x8214E82C; return 0x82268CC0;
		/* 8214E828h case    2:*/		return 0x8214E82C;
		  /* 8214E82Ch */ case    3:  		/* lwz R11, <#[R1 + 92]> */
		/* 8214E82Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214E82Ch case    3:*/		return 0x8214E830;
		  /* 8214E830h */ case    4:  		/* cmplw CR6, R31, R11 */
		/* 8214E830h case    4:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8214E830h case    4:*/		return 0x8214E834;
		  /* 8214E834h */ case    5:  		/* bc 4, CR6_LT, 12 */
		/* 8214E834h case    5:*/		if ( !regs.CR[6].lt ) { return 0x8214E840;  }
		/* 8214E834h case    5:*/		return 0x8214E838;
		  /* 8214E838h */ case    6:  		/* mr R11, R31 */
		/* 8214E838h case    6:*/		regs.R11 = regs.R31;
		/* 8214E838h case    6:*/		return 0x8214E83C;
		  /* 8214E83Ch */ case    7:  		/* stw R31, <#[R1 + 92]> */
		/* 8214E83Ch case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214E83Ch case    7:*/		return 0x8214E840;
	}
	return 0x8214E840;
} // Block from 8214E820h-8214E840h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214E840h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E840);
		  /* 8214E840h */ case    0:  		/* mr R4, R30 */
		/* 8214E840h case    0:*/		regs.R4 = regs.R30;
		/* 8214E840h case    0:*/		return 0x8214E844;
		  /* 8214E844h */ case    1:  		/* mr R10, R26 */
		/* 8214E844h case    1:*/		regs.R10 = regs.R26;
		/* 8214E844h case    1:*/		return 0x8214E848;
		  /* 8214E848h */ case    2:  		/* mr R9, R23 */
		/* 8214E848h case    2:*/		regs.R9 = regs.R23;
		/* 8214E848h case    2:*/		return 0x8214E84C;
		  /* 8214E84Ch */ case    3:  		/* mr R8, R28 */
		/* 8214E84Ch case    3:*/		regs.R8 = regs.R28;
		/* 8214E84Ch case    3:*/		return 0x8214E850;
		  /* 8214E850h */ case    4:  		/* addi R7, R1, 80 */
		/* 8214E850h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8214E850h case    4:*/		return 0x8214E854;
		  /* 8214E854h */ case    5:  		/* addi R6, R1, 384 */
		/* 8214E854h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x180);
		/* 8214E854h case    5:*/		return 0x8214E858;
		  /* 8214E858h */ case    6:  		/* addi R5, R1, 256 */
		/* 8214E858h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x100);
		/* 8214E858h case    6:*/		return 0x8214E85C;
		  /* 8214E85Ch */ case    7:  		/* mr R3, R24 */
		/* 8214E85Ch case    7:*/		regs.R3 = regs.R24;
		/* 8214E85Ch case    7:*/		return 0x8214E860;
		  /* 8214E860h */ case    8:  		/* subf R31, R11, R31 */
		/* 8214E860h case    8:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 8214E860h case    8:*/		return 0x8214E864;
		  /* 8214E864h */ case    9:  		/* bl -356 */
		/* 8214E864h case    9:*/		regs.LR = 0x8214E868; return 0x8214E700;
		/* 8214E864h case    9:*/		return 0x8214E868;
		  /* 8214E868h */ case   10:  		/* lwz R9, <#[R1 + 88]> */
		/* 8214E868h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8214E868h case   10:*/		return 0x8214E86C;
		  /* 8214E86Ch */ case   11:  		/* lwz R10, <#[R1 + 92]> */
		/* 8214E86Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214E86Ch case   11:*/		return 0x8214E870;
		  /* 8214E870h */ case   12:  		/* lwz R11, <#[R1 + 124]> */
		/* 8214E870h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 8214E870h case   12:*/		return 0x8214E874;
		  /* 8214E874h */ case   13:  		/* add R9, R9, R10 */
		/* 8214E874h case   13:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 8214E874h case   13:*/		return 0x8214E878;
		  /* 8214E878h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 8214E878h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214E878h case   14:*/		return 0x8214E87C;
		  /* 8214E87Ch */ case   15:  		/* stw R9, <#[R1 + 88]> */
		/* 8214E87Ch case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8214E87Ch case   15:*/		return 0x8214E880;
		  /* 8214E880h */ case   16:  		/* bc 12, CR6_EQ, 40 */
		/* 8214E880h case   16:*/		if ( regs.CR[6].eq ) { return 0x8214E8A8;  }
		/* 8214E880h case   16:*/		return 0x8214E884;
		  /* 8214E884h */ case   17:  		/* lwz R9, <#[R1 + 84]> */
		/* 8214E884h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8214E884h case   17:*/		return 0x8214E888;
		  /* 8214E888h */ case   18:  		/* subfic R9, R9, 0 */
		/* 8214E888h case   18:*/		cpu::op::subfic<0>(regs,&regs.R9,regs.R9,0x0);
		/* 8214E888h case   18:*/		return 0x8214E88C;
		  /* 8214E88Ch */ case   19:  		/* subfe R9, R9, R9 */
		/* 8214E88Ch case   19:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 8214E88Ch case   19:*/		return 0x8214E890;
		  /* 8214E890h */ case   20:  		/* rlwinm R9, R9, 0, 30, 31 */
		/* 8214E890h case   20:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R9);
		/* 8214E890h case   20:*/		return 0x8214E894;
		  /* 8214E894h */ case   21:  		/* addi R9, R9, 1 */
		/* 8214E894h case   21:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8214E894h case   21:*/		return 0x8214E898;
		  /* 8214E898h */ case   22:  		/* mullw R10, R9, R10 */
		/* 8214E898h case   22:*/		cpu::op::mullw<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8214E898h case   22:*/		return 0x8214E89C;
		  /* 8214E89Ch */ case   23:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8214E89Ch case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8214E89Ch case   23:*/		return 0x8214E8A0;
		  /* 8214E8A0h */ case   24:  		/* add R11, R10, R11 */
		/* 8214E8A0h case   24:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8214E8A0h case   24:*/		return 0x8214E8A4;
		  /* 8214E8A4h */ case   25:  		/* stw R11, <#[R1 + 124]> */
		/* 8214E8A4h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 8214E8A4h case   25:*/		return 0x8214E8A8;
	}
	return 0x8214E8A8;
} // Block from 8214E840h-8214E8A8h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8214E8A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E8A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E8A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E8A8);
		  /* 8214E8A8h */ case    0:  		/* addi R29, R29, 1 */
		/* 8214E8A8h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8214E8A8h case    0:*/		return 0x8214E8AC;
		  /* 8214E8ACh */ case    1:  		/* cmplw CR6, R29, R27 */
		/* 8214E8ACh case    1:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R27);
		/* 8214E8ACh case    1:*/		return 0x8214E8B0;
		  /* 8214E8B0h */ case    2:  		/* bc 12, CR6_LT, -148 */
		/* 8214E8B0h case    2:*/		if ( regs.CR[6].lt ) { return 0x8214E81C;  }
		/* 8214E8B0h case    2:*/		return 0x8214E8B4;
		  /* 8214E8B4h */ case    3:  		/* b 312 */
		/* 8214E8B4h case    3:*/		return 0x8214E9EC;
		/* 8214E8B4h case    3:*/		return 0x8214E8B8;
	}
	return 0x8214E8B8;
} // Block from 8214E8A8h-8214E8B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214E8B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E8B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E8B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E8B8);
		  /* 8214E8B8h */ case    0:  		/* lwz R11, <#[R1 + 116]> */
		/* 8214E8B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 8214E8B8h case    0:*/		return 0x8214E8BC;
		  /* 8214E8BCh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8214E8BCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214E8BCh case    1:*/		return 0x8214E8C0;
		  /* 8214E8C0h */ case    2:  		/* bc 12, CR6_EQ, 300 */
		/* 8214E8C0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8214E9EC;  }
		/* 8214E8C0h case    2:*/		return 0x8214E8C4;
	}
	return 0x8214E8C4;
} // Block from 8214E8B8h-8214E8C4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214E8C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E8C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E8C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E8C4);
		  /* 8214E8C4h */ case    0:  		/* mr R4, R27 */
		/* 8214E8C4h case    0:*/		regs.R4 = regs.R27;
		/* 8214E8C4h case    0:*/		return 0x8214E8C8;
		  /* 8214E8C8h */ case    1:  		/* lwz R7, <#[R1 + 80]> */
		/* 8214E8C8h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 8214E8C8h case    1:*/		return 0x8214E8CC;
		  /* 8214E8CCh */ case    2:  		/* mr R8, R29 */
		/* 8214E8CCh case    2:*/		regs.R8 = regs.R29;
		/* 8214E8CCh case    2:*/		return 0x8214E8D0;
		  /* 8214E8D0h */ case    3:  		/* mr R6, R31 */
		/* 8214E8D0h case    3:*/		regs.R6 = regs.R31;
		/* 8214E8D0h case    3:*/		return 0x8214E8D4;
		  /* 8214E8D4h */ case    4:  		/* mr R5, R30 */
		/* 8214E8D4h case    4:*/		regs.R5 = regs.R30;
		/* 8214E8D4h case    4:*/		return 0x8214E8D8;
		  /* 8214E8D8h */ case    5:  		/* addi R3, R1, 256 */
		/* 8214E8D8h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x100);
		/* 8214E8D8h case    5:*/		return 0x8214E8DC;
		  /* 8214E8DCh */ case    6:  		/* bl 1156068 */
		/* 8214E8DCh case    6:*/		regs.LR = 0x8214E8E0; return 0x82268CC0;
		/* 8214E8DCh case    6:*/		return 0x8214E8E0;
		  /* 8214E8E0h */ case    7:  		/* lwz R11, <#[R26 + 12]> */
		/* 8214E8E0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000000C) );
		/* 8214E8E0h case    7:*/		return 0x8214E8E4;
		  /* 8214E8E4h */ case    8:  		/* lwz R10, <#[R1 + 116]> */
		/* 8214E8E4h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000074) );
		/* 8214E8E4h case    8:*/		return 0x8214E8E8;
		  /* 8214E8E8h */ case    9:  		/* add R29, R11, R28 */
		/* 8214E8E8h case    9:*/		cpu::op::add<0>(regs,&regs.R29,regs.R11,regs.R28);
		/* 8214E8E8h case    9:*/		return 0x8214E8EC;
		  /* 8214E8ECh */ case   10:  		/* cmplwi CR6, R10, 0 */
		/* 8214E8ECh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8214E8ECh case   10:*/		return 0x8214E8F0;
	}
	return 0x8214E8F0;
} // Block from 8214E8C4h-8214E8F0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8214E8F0h
// Function '?OutputLine@R500ValidatorOutputCallbackContext@XGRAPHICS@@QAAJXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E8F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E8F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E8F0);
		  /* 8214E8F0h */ case    0:  		/* lwz R30, <#[R1 + 92]> */
		/* 8214E8F0h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214E8F0h case    0:*/		return 0x8214E8F4;
		  /* 8214E8F4h */ case    1:  		/* bc 12, CR6_EQ, 248 */
		/* 8214E8F4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8214E9EC;  }
		/* 8214E8F4h case    1:*/		return 0x8214E8F8;
		  /* 8214E8F8h */ case    2:  		/* mr R25, R10 */
		/* 8214E8F8h case    2:*/		regs.R25 = regs.R10;
		/* 8214E8F8h case    2:*/		return 0x8214E8FC;
		  /* 8214E8FCh */ case    3:  		/* lis R10, -32256 */
		/* 8214E8FCh case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8214E8FCh case    3:*/		return 0x8214E900;
		  /* 8214E900h */ case    4:  		/* lis R11, -32256 */
		/* 8214E900h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8214E900h case    4:*/		return 0x8214E904;
		  /* 8214E904h */ case    5:  		/* addi R27, R10, 20592 */
		/* 8214E904h case    5:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0x5070);
		/* 8214E904h case    5:*/		return 0x8214E908;
		  /* 8214E908h */ case    6:  		/* addi R26, R11, 4485 */
		/* 8214E908h case    6:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0x1185);
		/* 8214E908h case    6:*/		return 0x8214E90C;
		  /* 8214E90Ch */ case    7:  		/* lwz R11, <#[R29 + 4]> */
		/* 8214E90Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 8214E90Ch case    7:*/		return 0x8214E910;
		  /* 8214E910h */ case    8:  		/* mr R4, R28 */
		/* 8214E910h case    8:*/		regs.R4 = regs.R28;
		/* 8214E910h case    8:*/		return 0x8214E914;
		  /* 8214E914h */ case    9:  		/* lwz R10, <#[R29]> */
		/* 8214E914h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 8214E914h case    9:*/		return 0x8214E918;
		  /* 8214E918h */ case   10:  		/* addi R3, R1, 80 */
		/* 8214E918h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8214E918h case   10:*/		return 0x8214E91C;
		  /* 8214E91Ch */ case   11:  		/* add R31, R11, R28 */
		/* 8214E91Ch case   11:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R28);
		/* 8214E91Ch case   11:*/		return 0x8214E920;
		  /* 8214E920h */ case   12:  		/* add R10, R10, R28 */
		/* 8214E920h case   12:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R28);
		/* 8214E920h case   12:*/		return 0x8214E924;
		  /* 8214E924h */ case   13:  		/* mr R5, R31 */
		/* 8214E924h case   13:*/		regs.R5 = regs.R31;
		/* 8214E924h case   13:*/		return 0x8214E928;
		  /* 8214E928h */ case   14:  		/* stw R10, <#[R1 + 80]> */
		/* 8214E928h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8214E928h case   14:*/		return 0x8214E92C;
		  /* 8214E92Ch */ case   15:  		/* lhz R10, <#[R31 + 6]> */
		/* 8214E92Ch case   15:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000006) );
		/* 8214E92Ch case   15:*/		return 0x8214E930;
		  /* 8214E930h */ case   16:  		/* stw R10, <#[R1 + 108]> */
		/* 8214E930h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000006C) );
		/* 8214E930h case   16:*/		return 0x8214E934;
		  /* 8214E934h */ case   17:  		/* lhz R10, <#[R31 + 4]> */
		/* 8214E934h case   17:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8214E934h case   17:*/		return 0x8214E938;
		  /* 8214E938h */ case   18:  		/* stw R10, <#[R1 + 104]> */
		/* 8214E938h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000068) );
		/* 8214E938h case   18:*/		return 0x8214E93C;
		  /* 8214E93Ch */ case   19:  		/* lhzx R11, <#[R11 + R28]> */
		/* 8214E93Ch case   19:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 8214E93Ch case   19:*/		return 0x8214E940;
		  /* 8214E940h */ case   20:  		/* stw R11, <#[R1 + 96]> */
		/* 8214E940h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 8214E940h case   20:*/		return 0x8214E944;
		  /* 8214E944h */ case   21:  		/* lhz R11, <#[R31 + 2]> */
		/* 8214E944h case   21:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000002) );
		/* 8214E944h case   21:*/		return 0x8214E948;
		  /* 8214E948h */ case   22:  		/* stw R11, <#[R1 + 100]> */
		/* 8214E948h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 8214E948h case   22:*/		return 0x8214E94C;
		  /* 8214E94Ch */ case   23:  		/* lhz R11, <#[R31 + 8]> */
		/* 8214E94Ch case   23:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8214E94Ch case   23:*/		return 0x8214E950;
		  /* 8214E950h */ case   24:  		/* stw R11, <#[R1 + 112]> */
		/* 8214E950h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 8214E950h case   24:*/		return 0x8214E954;
		  /* 8214E954h */ case   25:  		/* lhz R11, <#[R31 + 10]> */
		/* 8214E954h case   25:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000A) );
		/* 8214E954h case   25:*/		return 0x8214E958;
		  /* 8214E958h */ case   26:  		/* stw R11, <#[R1 + 116]> */
		/* 8214E958h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 8214E958h case   26:*/		return 0x8214E95C;
		  /* 8214E95Ch */ case   27:  		/* bl -8188 */
		/* 8214E95Ch case   27:*/		regs.LR = 0x8214E960; return 0x8214C960;
		/* 8214E95Ch case   27:*/		return 0x8214E960;
	}
	return 0x8214E960;
} // Block from 8214E8F0h-8214E960h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8214E960h
// Function '?ValidatorOutput@R500ValidatorOutputCallbackContext@XGRAPHICS@@QAAJPBDK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E960);
		  /* 8214E960h */ case    0:  		/* mr R11, R3 */
		/* 8214E960h case    0:*/		regs.R11 = regs.R3;
		/* 8214E960h case    0:*/		return 0x8214E964;
		  /* 8214E964h */ case    1:  		/* stw R3, <#[R1 + 92]> */
		/* 8214E964h case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214E964h case    1:*/		return 0x8214E968;
		  /* 8214E968h */ case    2:  		/* cmplw CR6, R30, R3 */
		/* 8214E968h case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R3);
		/* 8214E968h case    2:*/		return 0x8214E96C;
		  /* 8214E96Ch */ case    3:  		/* bc 4, CR6_LT, 12 */
		/* 8214E96Ch case    3:*/		if ( !regs.CR[6].lt ) { return 0x8214E978;  }
		/* 8214E96Ch case    3:*/		return 0x8214E970;
		  /* 8214E970h */ case    4:  		/* mr R11, R30 */
		/* 8214E970h case    4:*/		regs.R11 = regs.R30;
		/* 8214E970h case    4:*/		return 0x8214E974;
		  /* 8214E974h */ case    5:  		/* stw R30, <#[R1 + 92]> */
		/* 8214E974h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214E974h case    5:*/		return 0x8214E978;
	}
	return 0x8214E978;
} // Block from 8214E960h-8214E978h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214E978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E978);
		  /* 8214E978h */ case    0:  		/* mr R6, R26 */
		/* 8214E978h case    0:*/		regs.R6 = regs.R26;
		/* 8214E978h case    0:*/		return 0x8214E97C;
		  /* 8214E97Ch */ case    1:  		/* mr R4, R27 */
		/* 8214E97Ch case    1:*/		regs.R4 = regs.R27;
		/* 8214E97Ch case    1:*/		return 0x8214E980;
		  /* 8214E980h */ case    2:  		/* mr R10, R31 */
		/* 8214E980h case    2:*/		regs.R10 = regs.R31;
		/* 8214E980h case    2:*/		return 0x8214E984;
		  /* 8214E984h */ case    3:  		/* mr R9, R23 */
		/* 8214E984h case    3:*/		regs.R9 = regs.R23;
		/* 8214E984h case    3:*/		return 0x8214E988;
		  /* 8214E988h */ case    4:  		/* mr R8, R28 */
		/* 8214E988h case    4:*/		regs.R8 = regs.R28;
		/* 8214E988h case    4:*/		return 0x8214E98C;
		  /* 8214E98Ch */ case    5:  		/* addi R7, R1, 80 */
		/* 8214E98Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8214E98Ch case    5:*/		return 0x8214E990;
		  /* 8214E990h */ case    6:  		/* addi R5, R1, 256 */
		/* 8214E990h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x100);
		/* 8214E990h case    6:*/		return 0x8214E994;
		  /* 8214E994h */ case    7:  		/* mr R3, R24 */
		/* 8214E994h case    7:*/		regs.R3 = regs.R24;
		/* 8214E994h case    7:*/		return 0x8214E998;
		  /* 8214E998h */ case    8:  		/* subf R30, R11, R30 */
		/* 8214E998h case    8:*/		cpu::op::subf<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 8214E998h case    8:*/		return 0x8214E99C;
		  /* 8214E99Ch */ case    9:  		/* bl -668 */
		/* 8214E99Ch case    9:*/		regs.LR = 0x8214E9A0; return 0x8214E700;
		/* 8214E99Ch case    9:*/		return 0x8214E9A0;
		  /* 8214E9A0h */ case   10:  		/* lwz R9, <#[R1 + 88]> */
		/* 8214E9A0h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8214E9A0h case   10:*/		return 0x8214E9A4;
		  /* 8214E9A4h */ case   11:  		/* lwz R10, <#[R1 + 92]> */
		/* 8214E9A4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214E9A4h case   11:*/		return 0x8214E9A8;
		  /* 8214E9A8h */ case   12:  		/* lwz R11, <#[R1 + 124]> */
		/* 8214E9A8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 8214E9A8h case   12:*/		return 0x8214E9AC;
		  /* 8214E9ACh */ case   13:  		/* add R9, R9, R10 */
		/* 8214E9ACh case   13:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 8214E9ACh case   13:*/		return 0x8214E9B0;
		  /* 8214E9B0h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 8214E9B0h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214E9B0h case   14:*/		return 0x8214E9B4;
		  /* 8214E9B4h */ case   15:  		/* stw R9, <#[R1 + 88]> */
		/* 8214E9B4h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8214E9B4h case   15:*/		return 0x8214E9B8;
		  /* 8214E9B8h */ case   16:  		/* bc 12, CR6_EQ, 40 */
		/* 8214E9B8h case   16:*/		if ( regs.CR[6].eq ) { return 0x8214E9E0;  }
		/* 8214E9B8h case   16:*/		return 0x8214E9BC;
		  /* 8214E9BCh */ case   17:  		/* lwz R9, <#[R1 + 84]> */
		/* 8214E9BCh case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 8214E9BCh case   17:*/		return 0x8214E9C0;
		  /* 8214E9C0h */ case   18:  		/* subfic R9, R9, 0 */
		/* 8214E9C0h case   18:*/		cpu::op::subfic<0>(regs,&regs.R9,regs.R9,0x0);
		/* 8214E9C0h case   18:*/		return 0x8214E9C4;
		  /* 8214E9C4h */ case   19:  		/* subfe R9, R9, R9 */
		/* 8214E9C4h case   19:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 8214E9C4h case   19:*/		return 0x8214E9C8;
		  /* 8214E9C8h */ case   20:  		/* rlwinm R9, R9, 0, 30, 31 */
		/* 8214E9C8h case   20:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R9);
		/* 8214E9C8h case   20:*/		return 0x8214E9CC;
		  /* 8214E9CCh */ case   21:  		/* addi R9, R9, 1 */
		/* 8214E9CCh case   21:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8214E9CCh case   21:*/		return 0x8214E9D0;
	}
	return 0x8214E9D0;
} // Block from 8214E978h-8214E9D0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8214E9D0h
// Function '?ValidatorOutputCallback@XGRAPHICS@@YAJPAXPBDK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E9D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E9D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E9D0);
		  /* 8214E9D0h */ case    0:  		/* mullw R10, R9, R10 */
		/* 8214E9D0h case    0:*/		cpu::op::mullw<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8214E9D0h case    0:*/		return 0x8214E9D4;
		  /* 8214E9D4h */ case    1:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8214E9D4h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8214E9D4h case    1:*/		return 0x8214E9D8;
	}
	return 0x8214E9D8;
} // Block from 8214E9D0h-8214E9D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214E9D8h
// Function '?Printf@OutStream@XGRAPHICS@@QAAJPBDZZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E9D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E9D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E9D8);
		  /* 8214E9D8h */ case    0:  		/* add R11, R10, R11 */
		/* 8214E9D8h case    0:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8214E9D8h case    0:*/		return 0x8214E9DC;
		  /* 8214E9DCh */ case    1:  		/* stw R11, <#[R1 + 124]> */
		/* 8214E9DCh case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 8214E9DCh case    1:*/		return 0x8214E9E0;
	}
	return 0x8214E9E0;
} // Block from 8214E9D8h-8214E9E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214E9E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E9E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E9E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E9E0);
		  /* 8214E9E0h */ case    0:  		/* addic. R25, R25, -1 */
		/* 8214E9E0h case    0:*/		cpu::op::addic<1>(regs,&regs.R25,regs.R25,0xFFFFFFFF);
		/* 8214E9E0h case    0:*/		return 0x8214E9E4;
		  /* 8214E9E4h */ case    1:  		/* addi R29, R29, 8 */
		/* 8214E9E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x8);
		/* 8214E9E4h case    1:*/		return 0x8214E9E8;
		  /* 8214E9E8h */ case    2:  		/* bc 4, CR0_EQ, -220 */
		/* 8214E9E8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8214E90C;  }
		/* 8214E9E8h case    2:*/		return 0x8214E9EC;
	}
	return 0x8214E9EC;
} // Block from 8214E9E0h-8214E9ECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214E9ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E9EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E9EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E9EC);
		  /* 8214E9ECh */ case    0:  		/* addi R1, R1, 592 */
		/* 8214E9ECh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x250);
		/* 8214E9ECh case    0:*/		return 0x8214E9F0;
		  /* 8214E9F0h */ case    1:  		/* b -776028 */
		/* 8214E9F0h case    1:*/		return 0x82091294;
		/* 8214E9F0h case    1:*/		return 0x8214E9F4;
		  /* 8214E9F4h */ case    2:  		/* nop */
		/* 8214E9F4h case    2:*/		cpu::op::nop();
		/* 8214E9F4h case    2:*/		return 0x8214E9F8;
	}
	return 0x8214E9F8;
} // Block from 8214E9ECh-8214E9F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214E9F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214E9F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214E9F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214E9F8);
		  /* 8214E9F8h */ case    0:  		/* mfspr R12, LR */
		/* 8214E9F8h case    0:*/		regs.R12 = regs.LR;
		/* 8214E9F8h case    0:*/		return 0x8214E9FC;
		  /* 8214E9FCh */ case    1:  		/* bl -776104 */
		/* 8214E9FCh case    1:*/		regs.LR = 0x8214EA00; return 0x82091254;
		/* 8214E9FCh case    1:*/		return 0x8214EA00;
		  /* 8214EA00h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 8214EA00h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 8214EA00h case    2:*/		return 0x8214EA04;
		  /* 8214EA04h */ case    3:  		/* lwz R11, <#[R5 + 16]> */
		/* 8214EA04h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000010) );
		/* 8214EA04h case    3:*/		return 0x8214EA08;
		  /* 8214EA08h */ case    4:  		/* mr R27, R3 */
		/* 8214EA08h case    4:*/		regs.R27 = regs.R3;
		/* 8214EA08h case    4:*/		return 0x8214EA0C;
		  /* 8214EA0Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8214EA0Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214EA0Ch case    5:*/		return 0x8214EA10;
		  /* 8214EA10h */ case    6:  		/* bc 12, CR6_EQ, 144 */
		/* 8214EA10h case    6:*/		if ( regs.CR[6].eq ) { return 0x8214EAA0;  }
		/* 8214EA10h case    6:*/		return 0x8214EA14;
		  /* 8214EA14h */ case    7:  		/* addi R10, R11, 28 */
		/* 8214EA14h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x1C);
		/* 8214EA14h case    7:*/		return 0x8214EA18;
		  /* 8214EA18h */ case    8:  		/* cmplw CR6, R10, R6 */
		/* 8214EA18h case    8:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 8214EA18h case    8:*/		return 0x8214EA1C;
		  /* 8214EA1Ch */ case    9:  		/* bc 4, CR6_GT, 16 */
		/* 8214EA1Ch case    9:*/		if ( !regs.CR[6].gt ) { return 0x8214EA2C;  }
		/* 8214EA1Ch case    9:*/		return 0x8214EA20;
		  /* 8214EA20h */ case   10:  		/* lis R3, -32761 */
		/* 8214EA20h case   10:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8214EA20h case   10:*/		return 0x8214EA24;
		  /* 8214EA24h */ case   11:  		/* ori R3, R3, 87 */
		/* 8214EA24h case   11:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x57);
		/* 8214EA24h case   11:*/		return 0x8214EA28;
		  /* 8214EA28h */ case   12:  		/* b 124 */
		/* 8214EA28h case   12:*/		return 0x8214EAA4;
		/* 8214EA28h case   12:*/		return 0x8214EA2C;
	}
	return 0x8214EA2C;
} // Block from 8214E9F8h-8214EA2Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214EA2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EA2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EA2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EA2C);
		  /* 8214EA2Ch */ case    0:  		/* add R11, R11, R5 */
		/* 8214EA2Ch case    0:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R5);
		/* 8214EA2Ch case    0:*/		return 0x8214EA30;
		  /* 8214EA30h */ case    1:  		/* addi R30, R11, 4 */
		/* 8214EA30h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x4);
		/* 8214EA30h case    1:*/		return 0x8214EA34;
		  /* 8214EA34h */ case    2:  		/* lwz R28, <#[R11 + 16]> */
		/* 8214EA34h case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000010) );
		/* 8214EA34h case    2:*/		return 0x8214EA38;
		  /* 8214EA38h */ case    3:  		/* cmplwi CR6, R28, 0 */
		/* 8214EA38h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8214EA38h case    3:*/		return 0x8214EA3C;
		  /* 8214EA3Ch */ case    4:  		/* bc 12, CR6_EQ, 100 */
		/* 8214EA3Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x8214EAA0;  }
		/* 8214EA3Ch case    4:*/		return 0x8214EA40;
		  /* 8214EA40h */ case    5:  		/* lwz R11, <#[R30 + 16]> */
		/* 8214EA40h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8214EA40h case    5:*/		return 0x8214EA44;
		  /* 8214EA44h */ case    6:  		/* cmplwi CR6, R28, 0 */
		/* 8214EA44h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8214EA44h case    6:*/		return 0x8214EA48;
		  /* 8214EA48h */ case    7:  		/* add R31, R11, R30 */
		/* 8214EA48h case    7:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R30);
		/* 8214EA48h case    7:*/		return 0x8214EA4C;
		  /* 8214EA4Ch */ case    8:  		/* bc 12, CR6_EQ, 84 */
		/* 8214EA4Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x8214EAA0;  }
		/* 8214EA4Ch case    8:*/		return 0x8214EA50;
		  /* 8214EA50h */ case    9:  		/* lis R11, -32256 */
		/* 8214EA50h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8214EA50h case    9:*/		return 0x8214EA54;
		  /* 8214EA54h */ case   10:  		/* addi R29, R11, 4485 */
		/* 8214EA54h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x1185);
		/* 8214EA54h case   10:*/		return 0x8214EA58;
		  /* 8214EA58h */ case   11:  		/* lwz R11, <#[R31 + 12]> */
		/* 8214EA58h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8214EA58h case   11:*/		return 0x8214EA5C;
		  /* 8214EA5Ch */ case   12:  		/* mr R5, R31 */
		/* 8214EA5Ch case   12:*/		regs.R5 = regs.R31;
		/* 8214EA5Ch case   12:*/		return 0x8214EA60;
		  /* 8214EA60h */ case   13:  		/* mr R4, R30 */
		/* 8214EA60h case   13:*/		regs.R4 = regs.R30;
		/* 8214EA60h case   13:*/		return 0x8214EA64;
		  /* 8214EA64h */ case   14:  		/* add R10, R11, R30 */
		/* 8214EA64h case   14:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R30);
		/* 8214EA64h case   14:*/		return 0x8214EA68;
		  /* 8214EA68h */ case   15:  		/* addi R3, R1, 80 */
		/* 8214EA68h case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8214EA68h case   15:*/		return 0x8214EA6C;
		  /* 8214EA6Ch */ case   16:  		/* mr R6, R10 */
		/* 8214EA6Ch case   16:*/		regs.R6 = regs.R10;
		/* 8214EA6Ch case   16:*/		return 0x8214EA70;
		  /* 8214EA70h */ case   17:  		/* bl -8576 */
		/* 8214EA70h case   17:*/		regs.LR = 0x8214EA74; return 0x8214C8F0;
		/* 8214EA70h case   17:*/		return 0x8214EA74;
		  /* 8214EA74h */ case   18:  		/* mr R6, R29 */
		/* 8214EA74h case   18:*/		regs.R6 = regs.R29;
		/* 8214EA74h case   18:*/		return 0x8214EA78;
		  /* 8214EA78h */ case   19:  		/* mr R5, R29 */
		/* 8214EA78h case   19:*/		regs.R5 = regs.R29;
		/* 8214EA78h case   19:*/		return 0x8214EA7C;
		  /* 8214EA7Ch */ case   20:  		/* mr R4, R29 */
		/* 8214EA7Ch case   20:*/		regs.R4 = regs.R29;
		/* 8214EA7Ch case   20:*/		return 0x8214EA80;
		  /* 8214EA80h */ case   21:  		/* mr R9, R31 */
		/* 8214EA80h case   21:*/		regs.R9 = regs.R31;
		/* 8214EA80h case   21:*/		return 0x8214EA84;
		  /* 8214EA84h */ case   22:  		/* mr R8, R30 */
		/* 8214EA84h case   22:*/		regs.R8 = regs.R30;
		/* 8214EA84h case   22:*/		return 0x8214EA88;
		  /* 8214EA88h */ case   23:  		/* addi R7, R1, 80 */
		/* 8214EA88h case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8214EA88h case   23:*/		return 0x8214EA8C;
		  /* 8214EA8Ch */ case   24:  		/* mr R3, R27 */
		/* 8214EA8Ch case   24:*/		regs.R3 = regs.R27;
		/* 8214EA8Ch case   24:*/		return 0x8214EA90;
		  /* 8214EA90h */ case   25:  		/* bl -912 */
		/* 8214EA90h case   25:*/		regs.LR = 0x8214EA94; return 0x8214E700;
		/* 8214EA90h case   25:*/		return 0x8214EA94;
		  /* 8214EA94h */ case   26:  		/* addic. R28, R28, -1 */
		/* 8214EA94h case   26:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 8214EA94h case   26:*/		return 0x8214EA98;
		  /* 8214EA98h */ case   27:  		/* addi R31, R31, 20 */
		/* 8214EA98h case   27:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x14);
		/* 8214EA98h case   27:*/		return 0x8214EA9C;
		  /* 8214EA9Ch */ case   28:  		/* bc 4, CR0_EQ, -68 */
		/* 8214EA9Ch case   28:*/		if ( !regs.CR[0].eq ) { return 0x8214EA58;  }
		/* 8214EA9Ch case   28:*/		return 0x8214EAA0;
	}
	return 0x8214EAA0;
} // Block from 8214EA2Ch-8214EAA0h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8214EAA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EAA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EAA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EAA0);
		  /* 8214EAA0h */ case    0:  		/* li R3, 0 */
		/* 8214EAA0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214EAA0h case    0:*/		return 0x8214EAA4;
	}
	return 0x8214EAA4;
} // Block from 8214EAA0h-8214EAA4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214EAA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EAA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EAA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EAA4);
		  /* 8214EAA4h */ case    0:  		/* addi R1, R1, 176 */
		/* 8214EAA4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 8214EAA4h case    0:*/		return 0x8214EAA8;
		  /* 8214EAA8h */ case    1:  		/* b -776196 */
		/* 8214EAA8h case    1:*/		return 0x820912A4;
		/* 8214EAA8h case    1:*/		return 0x8214EAAC;
		  /* 8214EAACh */ case    2:  		/* nop */
		/* 8214EAACh case    2:*/		cpu::op::nop();
		/* 8214EAACh case    2:*/		return 0x8214EAB0;
	}
	return 0x8214EAB0;
} // Block from 8214EAA4h-8214EAB0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214EAB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EAB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EAB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EAB0);
		  /* 8214EAB0h */ case    0:  		/* mfspr R12, LR */
		/* 8214EAB0h case    0:*/		regs.R12 = regs.LR;
		/* 8214EAB0h case    0:*/		return 0x8214EAB4;
		  /* 8214EAB4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214EAB4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214EAB4h case    1:*/		return 0x8214EAB8;
		  /* 8214EAB8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8214EAB8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214EAB8h case    2:*/		return 0x8214EABC;
		  /* 8214EABCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8214EABCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8214EABCh case    3:*/		return 0x8214EAC0;
		  /* 8214EAC0h */ case    4:  		/* lwz R11, <#[R3 + 12]> */
		/* 8214EAC0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 8214EAC0h case    4:*/		return 0x8214EAC4;
		  /* 8214EAC4h */ case    5:  		/* mr R31, R3 */
		/* 8214EAC4h case    5:*/		regs.R31 = regs.R3;
		/* 8214EAC4h case    5:*/		return 0x8214EAC8;
		  /* 8214EAC8h */ case    6:  		/* mr R5, R4 */
		/* 8214EAC8h case    6:*/		regs.R5 = regs.R4;
		/* 8214EAC8h case    6:*/		return 0x8214EACC;
		  /* 8214EACCh */ case    7:  		/* cmpwi CR6, R11, 0 */
		/* 8214EACCh case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214EACCh case    7:*/		return 0x8214EAD0;
		  /* 8214EAD0h */ case    8:  		/* bc 12, CR6_EQ, 32 */
		/* 8214EAD0h case    8:*/		if ( regs.CR[6].eq ) { return 0x8214EAF0;  }
		/* 8214EAD0h case    8:*/		return 0x8214EAD4;
		  /* 8214EAD4h */ case    9:  		/* li R11, 0 */
		/* 8214EAD4h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8214EAD4h case    9:*/		return 0x8214EAD8;
		  /* 8214EAD8h */ case   10:  		/* lis R10, -32255 */
		/* 8214EAD8h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8214EAD8h case   10:*/		return 0x8214EADC;
		  /* 8214EADCh */ case   11:  		/* stw R11, <#[R3 + 16]> */
		/* 8214EADCh case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000010) );
		/* 8214EADCh case   11:*/		return 0x8214EAE0;
		  /* 8214EAE0h */ case   12:  		/* addi R4, R10, -10432 */
		/* 8214EAE0h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0xFFFFD740);
		/* 8214EAE0h case   12:*/		return 0x8214EAE4;
		  /* 8214EAE4h */ case   13:  		/* bl -2764 */
		/* 8214EAE4h case   13:*/		regs.LR = 0x8214EAE8; return 0x8214E018;
		/* 8214EAE4h case   13:*/		return 0x8214EAE8;
		  /* 8214EAE8h */ case   14:  		/* li R11, 1 */
		/* 8214EAE8h case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8214EAE8h case   14:*/		return 0x8214EAEC;
		  /* 8214EAECh */ case   15:  		/* stw R11, <#[R31 + 16]> */
		/* 8214EAECh case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8214EAECh case   15:*/		return 0x8214EAF0;
	}
	return 0x8214EAF0;
} // Block from 8214EAB0h-8214EAF0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8214EAF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EAF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EAF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EAF0);
		  /* 8214EAF0h */ case    0:  		/* addi R1, R1, 96 */
		/* 8214EAF0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8214EAF0h case    0:*/		return 0x8214EAF4;
		  /* 8214EAF4h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214EAF4h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214EAF4h case    1:*/		return 0x8214EAF8;
		  /* 8214EAF8h */ case    2:  		/* mtspr LR, R12 */
		/* 8214EAF8h case    2:*/		regs.LR = regs.R12;
		/* 8214EAF8h case    2:*/		return 0x8214EAFC;
		  /* 8214EAFCh */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 8214EAFCh case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214EAFCh case    3:*/		return 0x8214EB00;
		  /* 8214EB00h */ case    4:  		/* bclr 20, CR0_LT */
		/* 8214EB00h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214EB00h case    4:*/		return 0x8214EB04;
	}
	return 0x8214EB04;
} // Block from 8214EAF0h-8214EB04h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214EB04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EB04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EB04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EB04);
		  /* 8214EB04h */ case    0:  		/* nop */
		/* 8214EB04h case    0:*/		cpu::op::nop();
		/* 8214EB04h case    0:*/		return 0x8214EB08;
	}
	return 0x8214EB08;
} // Block from 8214EB04h-8214EB08h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214EB08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EB08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EB08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EB08);
		  /* 8214EB08h */ case    0:  		/* mfspr R12, LR */
		/* 8214EB08h case    0:*/		regs.R12 = regs.LR;
		/* 8214EB08h case    0:*/		return 0x8214EB0C;
		  /* 8214EB0Ch */ case    1:  		/* bl -776368 */
		/* 8214EB0Ch case    1:*/		regs.LR = 0x8214EB10; return 0x8209125C;
		/* 8214EB0Ch case    1:*/		return 0x8214EB10;
	}
	return 0x8214EB10;
} // Block from 8214EB08h-8214EB10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214EB10h
// Function '?Callback@FixSerializationContext@XGRAPHICS@@QAAXPAX_N11K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EB10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EB10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EB10);
		  /* 8214EB10h */ case    0:  		/* stwu R1, <#[R1 - 112]> */
		/* 8214EB10h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8214EB10h case    0:*/		return 0x8214EB14;
		  /* 8214EB14h */ case    1:  		/* mr R30, R3 */
		/* 8214EB14h case    1:*/		regs.R30 = regs.R3;
		/* 8214EB14h case    1:*/		return 0x8214EB18;
		  /* 8214EB18h */ case    2:  		/* lwz R3, <#[R3 + 8]> */
		/* 8214EB18h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000008) );
		/* 8214EB18h case    2:*/		return 0x8214EB1C;
		  /* 8214EB1Ch */ case    3:  		/* bl -920860 */
		/* 8214EB1Ch case    3:*/		regs.LR = 0x8214EB20; return 0x8206DE00;
		/* 8214EB1Ch case    3:*/		return 0x8214EB20;
		  /* 8214EB20h */ case    4:  		/* or. R29, R3, R3 */
		/* 8214EB20h case    4:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 8214EB20h case    4:*/		return 0x8214EB24;
		  /* 8214EB24h */ case    5:  		/* li R31, 0 */
		/* 8214EB24h case    5:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8214EB24h case    5:*/		return 0x8214EB28;
		  /* 8214EB28h */ case    6:  		/* bc 12, CR0_EQ, 56 */
		/* 8214EB28h case    6:*/		if ( regs.CR[0].eq ) { return 0x8214EB60;  }
		/* 8214EB28h case    6:*/		return 0x8214EB2C;
		  /* 8214EB2Ch */ case    7:  		/* mr R4, R31 */
		/* 8214EB2Ch case    7:*/		regs.R4 = regs.R31;
		/* 8214EB2Ch case    7:*/		return 0x8214EB30;
		  /* 8214EB30h */ case    8:  		/* lwz R3, <#[R30 + 8]> */
		/* 8214EB30h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000008) );
		/* 8214EB30h case    8:*/		return 0x8214EB34;
		  /* 8214EB34h */ case    9:  		/* bl -936084 */
		/* 8214EB34h case    9:*/		regs.LR = 0x8214EB38; return 0x8206A2A0;
		/* 8214EB34h case    9:*/		return 0x8214EB38;
		  /* 8214EB38h */ case   10:  		/* mr R4, R3 */
		/* 8214EB38h case   10:*/		regs.R4 = regs.R3;
		/* 8214EB38h case   10:*/		return 0x8214EB3C;
		  /* 8214EB3Ch */ case   11:  		/* mr R8, R31 */
		/* 8214EB3Ch case   11:*/		regs.R8 = regs.R31;
		/* 8214EB3Ch case   11:*/		return 0x8214EB40;
		  /* 8214EB40h */ case   12:  		/* li R7, 0 */
		/* 8214EB40h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8214EB40h case   12:*/		return 0x8214EB44;
		  /* 8214EB44h */ case   13:  		/* li R6, 0 */
		/* 8214EB44h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8214EB44h case   13:*/		return 0x8214EB48;
		  /* 8214EB48h */ case   14:  		/* li R5, 0 */
		/* 8214EB48h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8214EB48h case   14:*/		return 0x8214EB4C;
		  /* 8214EB4Ch */ case   15:  		/* mr R3, R30 */
		/* 8214EB4Ch case   15:*/		regs.R3 = regs.R30;
		/* 8214EB4Ch case   15:*/		return 0x8214EB50;
		  /* 8214EB50h */ case   16:  		/* bl -2560 */
		/* 8214EB50h case   16:*/		regs.LR = 0x8214EB54; return 0x8214E150;
		/* 8214EB50h case   16:*/		return 0x8214EB54;
		  /* 8214EB54h */ case   17:  		/* addi R31, R31, 1 */
		/* 8214EB54h case   17:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8214EB54h case   17:*/		return 0x8214EB58;
		  /* 8214EB58h */ case   18:  		/* cmplw CR6, R31, R29 */
		/* 8214EB58h case   18:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R29);
		/* 8214EB58h case   18:*/		return 0x8214EB5C;
		  /* 8214EB5Ch */ case   19:  		/* bc 12, CR6_LT, -48 */
		/* 8214EB5Ch case   19:*/		if ( regs.CR[6].lt ) { return 0x8214EB2C;  }
		/* 8214EB5Ch case   19:*/		return 0x8214EB60;
	}
	return 0x8214EB60;
} // Block from 8214EB10h-8214EB60h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8214EB60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EB60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EB60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EB60);
		  /* 8214EB60h */ case    0:  		/* addi R1, R1, 112 */
		/* 8214EB60h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214EB60h case    0:*/		return 0x8214EB64;
		  /* 8214EB64h */ case    1:  		/* b -776376 */
		/* 8214EB64h case    1:*/		return 0x820912AC;
		/* 8214EB64h case    1:*/		return 0x8214EB68;
	}
	return 0x8214EB68;
} // Block from 8214EB60h-8214EB68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214EB68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EB68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EB68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EB68);
		  /* 8214EB68h */ case    0:  		/* mfspr R12, LR */
		/* 8214EB68h case    0:*/		regs.R12 = regs.LR;
		/* 8214EB68h case    0:*/		return 0x8214EB6C;
		  /* 8214EB6Ch */ case    1:  		/* bl -776500 */
		/* 8214EB6Ch case    1:*/		regs.LR = 0x8214EB70; return 0x82091238;
		/* 8214EB6Ch case    1:*/		return 0x8214EB70;
		  /* 8214EB70h */ case    2:  		/* stwu R1, <#[R1 - 832]> */
		/* 8214EB70h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFCC0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFCC0);
		/* 8214EB70h case    2:*/		return 0x8214EB74;
		  /* 8214EB74h */ case    3:  		/* lis R11, -32215 */
		/* 8214EB74h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 8214EB74h case    3:*/		return 0x8214EB78;
		  /* 8214EB78h */ case    4:  		/* stw R9, <#[R1 + 88]> */
		/* 8214EB78h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8214EB78h case    4:*/		return 0x8214EB7C;
		  /* 8214EB7Ch */ case    5:  		/* mr R24, R3 */
		/* 8214EB7Ch case    5:*/		regs.R24 = regs.R3;
		/* 8214EB7Ch case    5:*/		return 0x8214EB80;
		  /* 8214EB80h */ case    6:  		/* stw R10, <#[R1 + 92]> */
		/* 8214EB80h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214EB80h case    6:*/		return 0x8214EB84;
		  /* 8214EB84h */ case    7:  		/* mr R23, R4 */
		/* 8214EB84h case    7:*/		regs.R23 = regs.R4;
		/* 8214EB84h case    7:*/		return 0x8214EB88;
		  /* 8214EB88h */ case    8:  		/* mr R22, R5 */
		/* 8214EB88h case    8:*/		regs.R22 = regs.R5;
		/* 8214EB88h case    8:*/		return 0x8214EB8C;
		  /* 8214EB8Ch */ case    9:  		/* mr R21, R6 */
		/* 8214EB8Ch case    9:*/		regs.R21 = regs.R6;
		/* 8214EB8Ch case    9:*/		return 0x8214EB90;
		  /* 8214EB90h */ case   10:  		/* lwz R11, <#[R11 - 28008]> */
		/* 8214EB90h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0xFFFF9298) );
		/* 8214EB90h case   10:*/		return 0x8214EB94;
		  /* 8214EB94h */ case   11:  		/* mr R20, R7 */
		/* 8214EB94h case   11:*/		regs.R20 = regs.R7;
		/* 8214EB94h case   11:*/		return 0x8214EB98;
		  /* 8214EB98h */ case   12:  		/* mr R30, R9 */
		/* 8214EB98h case   12:*/		regs.R30 = regs.R9;
		/* 8214EB98h case   12:*/		return 0x8214EB9C;
		  /* 8214EB9Ch */ case   13:  		/* mr R29, R10 */
		/* 8214EB9Ch case   13:*/		regs.R29 = regs.R10;
		/* 8214EB9Ch case   13:*/		return 0x8214EBA0;
		  /* 8214EBA0h */ case   14:  		/* li R31, 0 */
		/* 8214EBA0h case   14:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8214EBA0h case   14:*/		return 0x8214EBA4;
		  /* 8214EBA4h */ case   15:  		/* li R27, 1 */
		/* 8214EBA4h case   15:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 8214EBA4h case   15:*/		return 0x8214EBA8;
		  /* 8214EBA8h */ case   16:  		/* cmpwi CR6, R11, 0 */
		/* 8214EBA8h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214EBA8h case   16:*/		return 0x8214EBAC;
		  /* 8214EBACh */ case   17:  		/* bc 12, CR6_EQ, 16 */
		/* 8214EBACh case   17:*/		if ( regs.CR[6].eq ) { return 0x8214EBBC;  }
		/* 8214EBACh case   17:*/		return 0x8214EBB0;
		  /* 8214EBB0h */ case   18:  		/* rlwinm. R11, R8, 0, 28, 28 */
		/* 8214EBB0h case   18:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R8);
		/* 8214EBB0h case   18:*/		return 0x8214EBB4;
		  /* 8214EBB4h */ case   19:  		/* stw R27, <#[R1 + 96]> */
		/* 8214EBB4h case   19:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000060) );
		/* 8214EBB4h case   19:*/		return 0x8214EBB8;
		  /* 8214EBB8h */ case   20:  		/* bc 4, CR0_EQ, 8 */
		/* 8214EBB8h case   20:*/		if ( !regs.CR[0].eq ) { return 0x8214EBC0;  }
		/* 8214EBB8h case   20:*/		return 0x8214EBBC;
	}
	return 0x8214EBBC;
} // Block from 8214EB68h-8214EBBCh (21 instructions)

//////////////////////////////////////////////////////
// Block at 8214EBBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EBBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EBBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EBBC);
		  /* 8214EBBCh */ case    0:  		/* stw R31, <#[R1 + 96]> */
		/* 8214EBBCh case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000060) );
		/* 8214EBBCh case    0:*/		return 0x8214EBC0;
	}
	return 0x8214EBC0;
} // Block from 8214EBBCh-8214EBC0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214EBC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EBC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EBC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EBC0);
		  /* 8214EBC0h */ case    0:  		/* li R5, 448 */
		/* 8214EBC0h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1C0);
		/* 8214EBC0h case    0:*/		return 0x8214EBC4;
		  /* 8214EBC4h */ case    1:  		/* li R4, 0 */
		/* 8214EBC4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214EBC4h case    1:*/		return 0x8214EBC8;
		  /* 8214EBC8h */ case    2:  		/* addi R3, R1, 272 */
		/* 8214EBC8h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x110);
		/* 8214EBC8h case    2:*/		return 0x8214EBCC;
		  /* 8214EBCCh */ case    3:  		/* bl -776332 */
		/* 8214EBCCh case    3:*/		regs.LR = 0x8214EBD0; return 0x82091340;
		/* 8214EBCCh case    3:*/		return 0x8214EBD0;
		  /* 8214EBD0h */ case    4:  		/* addi R11, R1, 240 */
		/* 8214EBD0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xF0);
		/* 8214EBD0h case    4:*/		return 0x8214EBD4;
		  /* 8214EBD4h */ case    5:  		/* addi R3, R1, 272 */
		/* 8214EBD4h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x110);
		/* 8214EBD4h case    5:*/		return 0x8214EBD8;
		  /* 8214EBD8h */ case    6:  		/* std R31, <#[R11]> */
		/* 8214EBD8h case    6:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 8214EBD8h case    6:*/		return 0x8214EBDC;
		  /* 8214EBDCh */ case    7:  		/* std R31, <#[R11 + 8]> */
		/* 8214EBDCh case    7:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R11 + 0x00000008) );
		/* 8214EBDCh case    7:*/		return 0x8214EBE0;
		  /* 8214EBE0h */ case    8:  		/* stw R31, <#[R11 + 16]> */
		/* 8214EBE0h case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 8214EBE0h case    8:*/		return 0x8214EBE4;
		  /* 8214EBE4h */ case    9:  		/* bl -11804 */
		/* 8214EBE4h case    9:*/		regs.LR = 0x8214EBE8; return 0x8214BDC8;
		/* 8214EBE4h case    9:*/		return 0x8214EBE8;
		  /* 8214EBE8h */ case   10:  		/* or. R28, R3, R3 */
		/* 8214EBE8h case   10:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 8214EBE8h case   10:*/		return 0x8214EBEC;
		  /* 8214EBECh */ case   11:  		/* bc 12, CR0_LT, 708 */
		/* 8214EBECh case   11:*/		if ( regs.CR[0].lt ) { return 0x8214EEB0;  }
		/* 8214EBECh case   11:*/		return 0x8214EBF0;
		  /* 8214EBF0h */ case   12:  		/* li R11, 8 */
		/* 8214EBF0h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x8);
		/* 8214EBF0h case   12:*/		return 0x8214EBF4;
		  /* 8214EBF4h */ case   13:  		/* stw R31, <#[R1 + 296]> */
		/* 8214EBF4h case   13:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000128) );
		/* 8214EBF4h case   13:*/		return 0x8214EBF8;
		  /* 8214EBF8h */ case   14:  		/* stw R31, <#[R1 + 304]> */
		/* 8214EBF8h case   14:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000130) );
		/* 8214EBF8h case   14:*/		return 0x8214EBFC;
		  /* 8214EBFCh */ case   15:  		/* mr R9, R29 */
		/* 8214EBFCh case   15:*/		regs.R9 = regs.R29;
		/* 8214EBFCh case   15:*/		return 0x8214EC00;
	}
	return 0x8214EC00;
} // Block from 8214EBC0h-8214EC00h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8214EC00h
// Function '?OutStreamCallback@XGRAPHICS@@YAJPAXPBDK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EC00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EC00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EC00);
		  /* 8214EC00h */ case    0:  		/* stw R11, <#[R1 + 300]> */
		/* 8214EC00h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000012C) );
		/* 8214EC00h case    0:*/		return 0x8214EC04;
		  /* 8214EC04h */ case    1:  		/* mr R8, R30 */
		/* 8214EC04h case    1:*/		regs.R8 = regs.R30;
		/* 8214EC04h case    1:*/		return 0x8214EC08;
		  /* 8214EC08h */ case    2:  		/* li R7, 0 */
		/* 8214EC08h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8214EC08h case    2:*/		return 0x8214EC0C;
		  /* 8214EC0Ch */ case    3:  		/* addi R6, R1, 272 */
		/* 8214EC0Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x110);
		/* 8214EC0Ch case    3:*/		return 0x8214EC10;
		  /* 8214EC10h */ case    4:  		/* addi R5, R1, 240 */
		/* 8214EC10h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xF0);
		/* 8214EC10h case    4:*/		return 0x8214EC14;
		  /* 8214EC14h */ case    5:  		/* mr R4, R23 */
		/* 8214EC14h case    5:*/		regs.R4 = regs.R23;
		/* 8214EC14h case    5:*/		return 0x8214EC18;
		  /* 8214EC18h */ case    6:  		/* mr R3, R24 */
		/* 8214EC18h case    6:*/		regs.R3 = regs.R24;
		/* 8214EC18h case    6:*/		return 0x8214EC1C;
		  /* 8214EC1Ch */ case    7:  		/* bl 35580 */
		/* 8214EC1Ch case    7:*/		regs.LR = 0x8214EC20; return 0x82157718;
		/* 8214EC1Ch case    7:*/		return 0x8214EC20;
		  /* 8214EC20h */ case    8:  		/* mr R30, R3 */
		/* 8214EC20h case    8:*/		regs.R30 = regs.R3;
		/* 8214EC20h case    8:*/		return 0x8214EC24;
		  /* 8214EC24h */ case    9:  		/* addi R3, R1, 296 */
		/* 8214EC24h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x128);
		/* 8214EC24h case    9:*/		return 0x8214EC28;
		  /* 8214EC28h */ case   10:  		/* bl -8624 */
		/* 8214EC28h case   10:*/		regs.LR = 0x8214EC2C; return 0x8214CA78;
		/* 8214EC28h case   10:*/		return 0x8214EC2C;
		  /* 8214EC2Ch */ case   11:  		/* cmplwi CR6, R30, 0 */
		/* 8214EC2Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8214EC2Ch case   11:*/		return 0x8214EC30;
		  /* 8214EC30h */ case   12:  		/* bc 12, CR6_EQ, 16 */
		/* 8214EC30h case   12:*/		if ( regs.CR[6].eq ) { return 0x8214EC40;  }
		/* 8214EC30h case   12:*/		return 0x8214EC34;
		  /* 8214EC34h */ case   13:  		/* lis R28, -30602 */
		/* 8214EC34h case   13:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8876);
		/* 8214EC34h case   13:*/		return 0x8214EC38;
		  /* 8214EC38h */ case   14:  		/* ori R28, R28, 2156 */
		/* 8214EC38h case   14:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R28,0x86C);
		/* 8214EC38h case   14:*/		return 0x8214EC3C;
		  /* 8214EC3Ch */ case   15:  		/* b 620 */
		/* 8214EC3Ch case   15:*/		return 0x8214EEA8;
		/* 8214EC3Ch case   15:*/		return 0x8214EC40;
	}
	return 0x8214EC40;
} // Block from 8214EC00h-8214EC40h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8214EC40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EC40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EC40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EC40);
		  /* 8214EC40h */ case    0:  		/* li R11, 9 */
		/* 8214EC40h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x9);
		/* 8214EC40h case    0:*/		return 0x8214EC44;
		  /* 8214EC44h */ case    1:  		/* addi R10, R1, 136 */
		/* 8214EC44h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x88);
		/* 8214EC44h case    1:*/		return 0x8214EC48;
		  /* 8214EC48h */ case    2:  		/* mr R9, R31 */
		/* 8214EC48h case    2:*/		regs.R9 = regs.R31;
		/* 8214EC48h case    2:*/		return 0x8214EC4C;
		  /* 8214EC4Ch */ case    3:  		/* mtspr CTR, R11 */
		/* 8214EC4Ch case    3:*/		regs.CTR = regs.R11;
		/* 8214EC4Ch case    3:*/		return 0x8214EC50;
	}
	return 0x8214EC50;
} // Block from 8214EC40h-8214EC50h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214EC50h
// Function '?PrintFloat@XGRAPHICS@@YAXPAVOutStream@1@M@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EC50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EC50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EC50);
		  /* 8214EC50h */ case    0:  		/* stdu R9, <#[R10 + 8]> */
		/* 8214EC50h case    0:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + 0x00000008) );
		regs.R10 = (uint32)(regs.R10 + 0x00000008);
		/* 8214EC50h case    0:*/		return 0x8214EC54;
		  /* 8214EC54h */ case    1:  		/* bc 16, CR0_LT, -4 */
		/* 8214EC54h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8214EC50;  }
		/* 8214EC54h case    1:*/		return 0x8214EC58;
		  /* 8214EC58h */ case    2:  		/* lis R10, -32235 */
		/* 8214EC58h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8215);
		/* 8214EC58h case    2:*/		return 0x8214EC5C;
		  /* 8214EC5Ch */ case    3:  		/* stw R27, <#[R1 + 156]> */
		/* 8214EC5Ch case    3:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x0000009C) );
		/* 8214EC5Ch case    3:*/		return 0x8214EC60;
		  /* 8214EC60h */ case    4:  		/* addi R11, R1, 112 */
		/* 8214EC60h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 8214EC60h case    4:*/		return 0x8214EC64;
		  /* 8214EC64h */ case    5:  		/* addi R10, R10, -17152 */
		/* 8214EC64h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFBD00);
		/* 8214EC64h case    5:*/		return 0x8214EC68;
		  /* 8214EC68h */ case    6:  		/* lis R7, -32235 */
		/* 8214EC68h case    6:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8215);
		/* 8214EC68h case    6:*/		return 0x8214EC6C;
		  /* 8214EC6Ch */ case    7:  		/* lis R9, -32235 */
		/* 8214EC6Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8215);
		/* 8214EC6Ch case    7:*/		return 0x8214EC70;
		  /* 8214EC70h */ case    8:  		/* stw R10, <#[R1 + 164]> */
		/* 8214EC70h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000A4) );
		/* 8214EC70h case    8:*/		return 0x8214EC74;
		  /* 8214EC74h */ case    9:  		/* addi R10, R7, -17064 */
		/* 8214EC74h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R7,0xFFFFBD58);
		/* 8214EC74h case    9:*/		return 0x8214EC78;
		  /* 8214EC78h */ case   10:  		/* addi R9, R9, -16976 */
		/* 8214EC78h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFBDB0);
		/* 8214EC78h case   10:*/		return 0x8214EC7C;
		  /* 8214EC7Ch */ case   11:  		/* std R31, <#[R11]> */
		/* 8214EC7Ch case   11:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 8214EC7Ch case   11:*/		return 0x8214EC80;
		  /* 8214EC80h */ case   12:  		/* lis R6, -32222 */
		/* 8214EC80h case   12:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8222);
		/* 8214EC80h case   12:*/		return 0x8214EC84;
		  /* 8214EC84h */ case   13:  		/* std R31, <#[R11 + 8]> */
		/* 8214EC84h case   13:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R11 + 0x00000008) );
		/* 8214EC84h case   13:*/		return 0x8214EC88;
		  /* 8214EC88h */ case   14:  		/* lis R4, -32218 */
		/* 8214EC88h case   14:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8226);
		/* 8214EC88h case   14:*/		return 0x8214EC8C;
		  /* 8214EC8Ch */ case   15:  		/* std R31, <#[R11 + 16]> */
		/* 8214EC8Ch case   15:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 8214EC8Ch case   15:*/		return 0x8214EC90;
		  /* 8214EC90h */ case   16:  		/* lis R8, -32235 */
		/* 8214EC90h case   16:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8215);
		/* 8214EC90h case   16:*/		return 0x8214EC94;
		  /* 8214EC94h */ case   17:  		/* stw R9, <#[R1 + 208]> */
		/* 8214EC94h case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000000D0) );
		/* 8214EC94h case   17:*/		return 0x8214EC98;
		  /* 8214EC98h */ case   18:  		/* stw R10, <#[R1 + 180]> */
		/* 8214EC98h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000B4) );
		/* 8214EC98h case   18:*/		return 0x8214EC9C;
		  /* 8214EC9Ch */ case   19:  		/* addi R10, R4, -25344 */
		/* 8214EC9Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R4,0xFFFF9D00);
		/* 8214EC9Ch case   19:*/		return 0x8214ECA0;
		  /* 8214ECA0h */ case   20:  		/* std R31, <#[R11 + 24]> */
		/* 8214ECA0h case   20:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R11 + 0x00000018) );
		/* 8214ECA0h case   20:*/		return 0x8214ECA4;
		  /* 8214ECA4h */ case   21:  		/* addi R8, R8, -17144 */
		/* 8214ECA4h case   21:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFBD08);
		/* 8214ECA4h case   21:*/		return 0x8214ECA8;
		  /* 8214ECA8h */ case   22:  		/* addi R9, R6, -11328 */
		/* 8214ECA8h case   22:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R6,0xFFFFD3C0);
		/* 8214ECA8h case   22:*/		return 0x8214ECAC;
		  /* 8214ECACh */ case   23:  		/* stw R10, <#[R1 + 176]> */
		/* 8214ECACh case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000B0) );
		/* 8214ECACh case   23:*/		return 0x8214ECB0;
		  /* 8214ECB0h */ case   24:  		/* lis R5, -32235 */
		/* 8214ECB0h case   24:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8215);
		/* 8214ECB0h case   24:*/		return 0x8214ECB4;
		  /* 8214ECB4h */ case   25:  		/* stw R8, <#[R1 + 168]> */
		/* 8214ECB4h case   25:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000000A8) );
		/* 8214ECB4h case   25:*/		return 0x8214ECB8;
		  /* 8214ECB8h */ case   26:  		/* lis R3, -32235 */
		/* 8214ECB8h case   26:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8215);
		/* 8214ECB8h case   26:*/		return 0x8214ECBC;
		  /* 8214ECBCh */ case   27:  		/* stw R9, <#[R1 + 184]> */
		/* 8214ECBCh case   27:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000000B8) );
		/* 8214ECBCh case   27:*/		return 0x8214ECC0;
		  /* 8214ECC0h */ case   28:  		/* lis R11, -32218 */
		/* 8214ECC0h case   28:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8226);
		/* 8214ECC0h case   28:*/		return 0x8214ECC4;
		  /* 8214ECC4h */ case   29:  		/* addi R9, R3, -16968 */
		/* 8214ECC4h case   29:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R3,0xFFFFBDB8);
		/* 8214ECC4h case   29:*/		return 0x8214ECC8;
		  /* 8214ECC8h */ case   30:  		/* addi R8, R5, -17104 */
		/* 8214ECC8h case   30:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R5,0xFFFFBD30);
		/* 8214ECC8h case   30:*/		return 0x8214ECCC;
		  /* 8214ECCCh */ case   31:  		/* addi R11, R11, -25344 */
		/* 8214ECCCh case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFF9D00);
		/* 8214ECCCh case   31:*/		return 0x8214ECD0;
		  /* 8214ECD0h */ case   32:  		/* stw R9, <#[R1 + 212]> */
		/* 8214ECD0h case   32:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000000D4) );
		/* 8214ECD0h case   32:*/		return 0x8214ECD4;
		  /* 8214ECD4h */ case   33:  		/* addi R10, R1, 88 */
		/* 8214ECD4h case   33:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x58);
		/* 8214ECD4h case   33:*/		return 0x8214ECD8;
		  /* 8214ECD8h */ case   34:  		/* stw R8, <#[R1 + 172]> */
		/* 8214ECD8h case   34:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000000AC) );
		/* 8214ECD8h case   34:*/		return 0x8214ECDC;
		  /* 8214ECDCh */ case   35:  		/* lis R30, -32235 */
		/* 8214ECDCh case   35:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8215);
		/* 8214ECDCh case   35:*/		return 0x8214ECE0;
		  /* 8214ECE0h */ case   36:  		/* stw R11, <#[R1 + 120]> */
		/* 8214ECE0h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 8214ECE0h case   36:*/		return 0x8214ECE4;
		  /* 8214ECE4h */ case   37:  		/* lis R29, -32235 */
		/* 8214ECE4h case   37:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8215);
		/* 8214ECE4h case   37:*/		return 0x8214ECE8;
		  /* 8214ECE8h */ case   38:  		/* stw R10, <#[R1 + 116]> */
		/* 8214ECE8h case   38:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000074) );
		/* 8214ECE8h case   38:*/		return 0x8214ECEC;
		  /* 8214ECECh */ case   39:  		/* lis R28, -32222 */
		/* 8214ECECh case   39:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8222);
		/* 8214ECECh case   39:*/		return 0x8214ECF0;
		  /* 8214ECF0h */ case   40:  		/* addi R8, R1, 88 */
		/* 8214ECF0h case   40:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x58);
		/* 8214ECF0h case   40:*/		return 0x8214ECF4;
		  /* 8214ECF4h */ case   41:  		/* addi R9, R30, -17160 */
		/* 8214ECF4h case   41:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R30,0xFFFFBCF8);
		/* 8214ECF4h case   41:*/		return 0x8214ECF8;
		  /* 8214ECF8h */ case   42:  		/* addi R10, R29, -17160 */
		/* 8214ECF8h case   42:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0xFFFFBCF8);
		/* 8214ECF8h case   42:*/		return 0x8214ECFC;
		  /* 8214ECFCh */ case   43:  		/* stw R8, <#[R1 + 160]> */
		/* 8214ECFCh case   43:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000000A0) );
		/* 8214ECFCh case   43:*/		return 0x8214ED00;
		  /* 8214ED00h */ case   44:  		/* addi R11, R28, -11328 */
		/* 8214ED00h case   44:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFD3C0);
		/* 8214ED00h case   44:*/		return 0x8214ED04;
		  /* 8214ED04h */ case   45:  		/* stw R9, <#[R1 + 132]> */
		/* 8214ED04h case   45:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000084) );
		/* 8214ED04h case   45:*/		return 0x8214ED08;
		  /* 8214ED08h */ case   46:  		/* li R27, 50 */
		/* 8214ED08h case   46:*/		cpu::op::li<0>(regs,&regs.R27,0x32);
		/* 8214ED08h case   46:*/		return 0x8214ED0C;
		  /* 8214ED0Ch */ case   47:  		/* stw R10, <#[R1 + 136]> */
		/* 8214ED0Ch case   47:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000088) );
		/* 8214ED0Ch case   47:*/		return 0x8214ED10;
		  /* 8214ED10h */ case   48:  		/* stw R11, <#[R1 + 140]> */
		/* 8214ED10h case   48:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 8214ED10h case   48:*/		return 0x8214ED14;
		  /* 8214ED14h */ case   49:  		/* li R4, 13 */
		/* 8214ED14h case   49:*/		cpu::op::li<0>(regs,&regs.R4,0xD);
		/* 8214ED14h case   49:*/		return 0x8214ED18;
	}
	return 0x8214ED18;
} // Block from 8214EC50h-8214ED18h (50 instructions)

//////////////////////////////////////////////////////
// Block at 8214ED18h
// Function '?PrintConstantDescription@XGRAPHICS@@YAXPAVOutStream@1@PBDPAU_D3DXCONSTANT_DESC@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214ED18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214ED18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214ED18);
		  /* 8214ED18h */ case    0:  		/* stw R27, <#[R1 + 144]> */
		/* 8214ED18h case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000090) );
		/* 8214ED18h case    0:*/		return 0x8214ED1C;
		  /* 8214ED1Ch */ case    1:  		/* addi R3, R1, 144 */
		/* 8214ED1Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 8214ED1Ch case    1:*/		return 0x8214ED20;
		  /* 8214ED20h */ case    2:  		/* bl 65840 */
		/* 8214ED20h case    2:*/		regs.LR = 0x8214ED24; return 0x8215EE50;
		/* 8214ED20h case    2:*/		return 0x8214ED24;
		  /* 8214ED24h */ case    3:  		/* lwz R11, <#[R1 + 280]> */
		/* 8214ED24h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000118) );
		/* 8214ED24h case    3:*/		return 0x8214ED28;
		  /* 8214ED28h */ case    4:  		/* li R7, 0 */
		/* 8214ED28h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8214ED28h case    4:*/		return 0x8214ED2C;
		  /* 8214ED2Ch */ case    5:  		/* lwz R4, <#[R1 + 272]> */
		/* 8214ED2Ch case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000110) );
		/* 8214ED2Ch case    5:*/		return 0x8214ED30;
		  /* 8214ED30h */ case    6:  		/* li R6, 1 */
		/* 8214ED30h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8214ED30h case    6:*/		return 0x8214ED34;
		  /* 8214ED34h */ case    7:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8214ED34h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8214ED34h case    7:*/		return 0x8214ED38;
		  /* 8214ED38h */ case    8:  		/* mr R27, R3 */
		/* 8214ED38h case    8:*/		regs.R27 = regs.R3;
		/* 8214ED38h case    8:*/		return 0x8214ED3C;
		  /* 8214ED3Ch */ case    9:  		/* bl 48652 */
		/* 8214ED3Ch case    9:*/		regs.LR = 0x8214ED40; return 0x8215AB48;
		/* 8214ED3Ch case    9:*/		return 0x8214ED40;
		  /* 8214ED40h */ case   10:  		/* or. R29, R3, R3 */
		/* 8214ED40h case   10:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 8214ED40h case   10:*/		return 0x8214ED44;
		  /* 8214ED44h */ case   11:  		/* bc 12, CR0_EQ, 316 */
		/* 8214ED44h case   11:*/		if ( regs.CR[0].eq ) { return 0x8214EE80;  }
		/* 8214ED44h case   11:*/		return 0x8214ED48;
		  /* 8214ED48h */ case   12:  		/* addi R4, R1, 112 */
		/* 8214ED48h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 8214ED48h case   12:*/		return 0x8214ED4C;
		  /* 8214ED4Ch */ case   13:  		/* mr R3, R27 */
		/* 8214ED4Ch case   13:*/		regs.R3 = regs.R27;
		/* 8214ED4Ch case   13:*/		return 0x8214ED50;
		  /* 8214ED50h */ case   14:  		/* bl 67776 */
		/* 8214ED50h case   14:*/		regs.LR = 0x8214ED54; return 0x8215F610;
		/* 8214ED50h case   14:*/		return 0x8214ED54;
		  /* 8214ED54h */ case   15:  		/* li R4, 0 */
		/* 8214ED54h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214ED54h case   15:*/		return 0x8214ED58;
		  /* 8214ED58h */ case   16:  		/* mr R25, R3 */
		/* 8214ED58h case   16:*/		regs.R25 = regs.R3;
		/* 8214ED58h case   16:*/		return 0x8214ED5C;
		  /* 8214ED5Ch */ case   17:  		/* bl 49596 */
		/* 8214ED5Ch case   17:*/		regs.LR = 0x8214ED60; return 0x8215AF18;
		/* 8214ED5Ch case   17:*/		return 0x8214ED60;
		  /* 8214ED60h */ case   18:  		/* lwz R11, <#[R1 + 96]> */
		/* 8214ED60h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 8214ED60h case   18:*/		return 0x8214ED64;
		  /* 8214ED64h */ case   19:  		/* mr R26, R3 */
		/* 8214ED64h case   19:*/		regs.R26 = regs.R3;
		/* 8214ED64h case   19:*/		return 0x8214ED68;
		  /* 8214ED68h */ case   20:  		/* stw R31, <#[R1 + 80]> */
		/* 8214ED68h case   20:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 8214ED68h case   20:*/		return 0x8214ED6C;
		  /* 8214ED6Ch */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 8214ED6Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214ED6Ch case   21:*/		return 0x8214ED70;
		  /* 8214ED70h */ case   22:  		/* bc 12, CR6_EQ, 68 */
		/* 8214ED70h case   22:*/		if ( regs.CR[6].eq ) { return 0x8214EDB4;  }
		/* 8214ED70h case   22:*/		return 0x8214ED74;
		  /* 8214ED74h */ case   23:  		/* mr R3, R27 */
		/* 8214ED74h case   23:*/		regs.R3 = regs.R27;
		/* 8214ED74h case   23:*/		return 0x8214ED78;
		  /* 8214ED78h */ case   24:  		/* bl 65160 */
		/* 8214ED78h case   24:*/		regs.LR = 0x8214ED7C; return 0x8215EC00;
		/* 8214ED78h case   24:*/		return 0x8214ED7C;
		  /* 8214ED7Ch */ case   25:  		/* mr R30, R3 */
		/* 8214ED7Ch case   25:*/		regs.R30 = regs.R3;
		/* 8214ED7Ch case   25:*/		return 0x8214ED80;
		  /* 8214ED80h */ case   26:  		/* mr R3, R27 */
		/* 8214ED80h case   26:*/		regs.R3 = regs.R27;
		/* 8214ED80h case   26:*/		return 0x8214ED84;
		  /* 8214ED84h */ case   27:  		/* bl 65124 */
		/* 8214ED84h case   27:*/		regs.LR = 0x8214ED88; return 0x8215EBE8;
		/* 8214ED84h case   27:*/		return 0x8214ED88;
		  /* 8214ED88h */ case   28:  		/* mr R4, R29 */
		/* 8214ED88h case   28:*/		regs.R4 = regs.R29;
		/* 8214ED88h case   28:*/		return 0x8214ED8C;
		  /* 8214ED8Ch */ case   29:  		/* bl 69708 */
		/* 8214ED8Ch case   29:*/		regs.LR = 0x8214ED90; return 0x8215FDD8;
		/* 8214ED8Ch case   29:*/		return 0x8214ED90;
		  /* 8214ED90h */ case   30:  		/* mr R8, R3 */
		/* 8214ED90h case   30:*/		regs.R8 = regs.R3;
		/* 8214ED90h case   30:*/		return 0x8214ED94;
		  /* 8214ED94h */ case   31:  		/* addi R7, R1, 80 */
		/* 8214ED94h case   31:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8214ED94h case   31:*/		return 0x8214ED98;
		  /* 8214ED98h */ case   32:  		/* li R6, 1 */
		/* 8214ED98h case   32:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8214ED98h case   32:*/		return 0x8214ED9C;
		  /* 8214ED9Ch */ case   33:  		/* mr R5, R29 */
		/* 8214ED9Ch case   33:*/		regs.R5 = regs.R29;
		/* 8214ED9Ch case   33:*/		return 0x8214EDA0;
		  /* 8214EDA0h */ case   34:  		/* mr R4, R26 */
		/* 8214EDA0h case   34:*/		regs.R4 = regs.R26;
		/* 8214EDA0h case   34:*/		return 0x8214EDA4;
		  /* 8214EDA4h */ case   35:  		/* mr R3, R30 */
		/* 8214EDA4h case   35:*/		regs.R3 = regs.R30;
		/* 8214EDA4h case   35:*/		return 0x8214EDA8;
		  /* 8214EDA8h */ case   36:  		/* bl 72176 */
		/* 8214EDA8h case   36:*/		regs.LR = 0x8214EDAC; return 0x82160798;
		/* 8214EDA8h case   36:*/		return 0x8214EDAC;
		  /* 8214EDACh */ case   37:  		/* mr R30, R3 */
		/* 8214EDACh case   37:*/		regs.R30 = regs.R3;
		/* 8214EDACh case   37:*/		return 0x8214EDB0;
		  /* 8214EDB0h */ case   38:  		/* b 56 */
		/* 8214EDB0h case   38:*/		return 0x8214EDE8;
		/* 8214EDB0h case   38:*/		return 0x8214EDB4;
	}
	return 0x8214EDB4;
} // Block from 8214ED18h-8214EDB4h (39 instructions)

//////////////////////////////////////////////////////
// Block at 8214EDB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EDB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EDB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EDB4);
		  /* 8214EDB4h */ case    0:  		/* mr R4, R26 */
		/* 8214EDB4h case    0:*/		regs.R4 = regs.R26;
		/* 8214EDB4h case    0:*/		return 0x8214EDB8;
		  /* 8214EDB8h */ case    1:  		/* mr R3, R29 */
		/* 8214EDB8h case    1:*/		regs.R3 = regs.R29;
		/* 8214EDB8h case    1:*/		return 0x8214EDBC;
		  /* 8214EDBCh */ case    2:  		/* bl -9988 */
		/* 8214EDBCh case    2:*/		regs.LR = 0x8214EDC0; return 0x8214C6B8;
		/* 8214EDBCh case    2:*/		return 0x8214EDC0;
		  /* 8214EDC0h */ case    3:  		/* or. R30, R3, R3 */
		/* 8214EDC0h case    3:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8214EDC0h case    3:*/		return 0x8214EDC4;
		  /* 8214EDC4h */ case    4:  		/* bc 4, CR0_EQ, 44 */
		/* 8214EDC4h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8214EDF0;  }
		/* 8214EDC4h case    4:*/		return 0x8214EDC8;
		  /* 8214EDC8h */ case    5:  		/* mr R3, R25 */
		/* 8214EDC8h case    5:*/		regs.R3 = regs.R25;
		/* 8214EDC8h case    5:*/		return 0x8214EDCC;
		  /* 8214EDCCh */ case    6:  		/* bl 67644 */
		/* 8214EDCCh case    6:*/		regs.LR = 0x8214EDD0; return 0x8215F608;
		/* 8214EDCCh case    6:*/		return 0x8214EDD0;
		  /* 8214EDD0h */ case    7:  		/* bl 65048 */
		/* 8214EDD0h case    7:*/		regs.LR = 0x8214EDD4; return 0x8215EBE8;
		/* 8214EDD0h case    7:*/		return 0x8214EDD4;
		  /* 8214EDD4h */ case    8:  		/* mr R4, R29 */
		/* 8214EDD4h case    8:*/		regs.R4 = regs.R29;
		/* 8214EDD4h case    8:*/		return 0x8214EDD8;
		  /* 8214EDD8h */ case    9:  		/* bl 69984 */
		/* 8214EDD8h case    9:*/		regs.LR = 0x8214EDDC; return 0x8215FF38;
		/* 8214EDD8h case    9:*/		return 0x8214EDDC;
		  /* 8214EDDCh */ case   10:  		/* bl 56420 */
		/* 8214EDDCh case   10:*/		regs.LR = 0x8214EDE0; return 0x8215CA40;
		/* 8214EDDCh case   10:*/		return 0x8214EDE0;
		  /* 8214EDE0h */ case   11:  		/* bl 57360 */
		/* 8214EDE0h case   11:*/		regs.LR = 0x8214EDE4; return 0x8215CDF0;
		/* 8214EDE0h case   11:*/		return 0x8214EDE4;
		  /* 8214EDE4h */ case   12:  		/* stw R3, <#[R1 + 80]> */
		/* 8214EDE4h case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 8214EDE4h case   12:*/		return 0x8214EDE8;
	}
	return 0x8214EDE8;
} // Block from 8214EDB4h-8214EDE8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214EDE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EDE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EDE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EDE8);
		  /* 8214EDE8h */ case    0:  		/* cmpwi CR6, R30, 0 */
		/* 8214EDE8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 8214EDE8h case    0:*/		return 0x8214EDEC;
		  /* 8214EDECh */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 8214EDECh case    1:*/		if ( regs.CR[6].eq ) { return 0x8214EDFC;  }
		/* 8214EDECh case    1:*/		return 0x8214EDF0;
	}
	return 0x8214EDF0;
} // Block from 8214EDE8h-8214EDF0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214EDF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EDF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EDF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EDF0);
		  /* 8214EDF0h */ case    0:  		/* lis R28, -32768 */
		/* 8214EDF0h case    0:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8000);
		/* 8214EDF0h case    0:*/		return 0x8214EDF4;
		  /* 8214EDF4h */ case    1:  		/* ori R28, R28, 16389 */
		/* 8214EDF4h case    1:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R28,0x4005);
		/* 8214EDF4h case    1:*/		return 0x8214EDF8;
		  /* 8214EDF8h */ case    2:  		/* b 116 */
		/* 8214EDF8h case    2:*/		return 0x8214EE6C;
		/* 8214EDF8h case    2:*/		return 0x8214EDFC;
	}
	return 0x8214EDFC;
} // Block from 8214EDF0h-8214EDFCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214EDFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EDFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EDFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EDFC);
		  /* 8214EDFCh */ case    0:  		/* li R9, 0 */
		/* 8214EDFCh case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8214EDFCh case    0:*/		return 0x8214EE00;
		  /* 8214EE00h */ case    1:  		/* lwz R10, <#[R1 + 924]> */
		/* 8214EE00h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000039C) );
		/* 8214EE00h case    1:*/		return 0x8214EE04;
		  /* 8214EE04h */ case    2:  		/* li R8, 1 */
		/* 8214EE04h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8214EE04h case    2:*/		return 0x8214EE08;
		  /* 8214EE08h */ case    3:  		/* lwz R5, <#[R1 + 916]> */
		/* 8214EE08h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000394) );
		/* 8214EE08h case    3:*/		return 0x8214EE0C;
		  /* 8214EE0Ch */ case    4:  		/* addi R7, R1, 84 */
		/* 8214EE0Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x54);
		/* 8214EE0Ch case    4:*/		return 0x8214EE10;
		  /* 8214EE10h */ case    5:  		/* lwz R6, <#[R1 + 80]> */
		/* 8214EE10h case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 8214EE10h case    5:*/		return 0x8214EE14;
		  /* 8214EE14h */ case    6:  		/* mr R4, R23 */
		/* 8214EE14h case    6:*/		regs.R4 = regs.R23;
		/* 8214EE14h case    6:*/		return 0x8214EE18;
		  /* 8214EE18h */ case    7:  		/* stw R31, <#[R1 + 84]> */
		/* 8214EE18h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 8214EE18h case    7:*/		return 0x8214EE1C;
		  /* 8214EE1Ch */ case    8:  		/* mr R3, R24 */
		/* 8214EE1Ch case    8:*/		regs.R3 = regs.R24;
		/* 8214EE1Ch case    8:*/		return 0x8214EE20;
		  /* 8214EE20h */ case    9:  		/* bl -4560 */
		/* 8214EE20h case    9:*/		regs.LR = 0x8214EE24; return 0x8214DC50;
		/* 8214EE20h case    9:*/		return 0x8214EE24;
		  /* 8214EE24h */ case   10:  		/* lwz R31, <#[R1 + 84]> */
		/* 8214EE24h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 8214EE24h case   10:*/		return 0x8214EE28;
		  /* 8214EE28h */ case   11:  		/* or. R28, R3, R3 */
		/* 8214EE28h case   11:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 8214EE28h case   11:*/		return 0x8214EE2C;
		  /* 8214EE2Ch */ case   12:  		/* bc 12, CR0_LT, 48 */
		/* 8214EE2Ch case   12:*/		if ( regs.CR[0].lt ) { return 0x8214EE5C;  }
		/* 8214EE2Ch case   12:*/		return 0x8214EE30;
		  /* 8214EE30h */ case   13:  		/* stw R31, <#[R1 + 232]> */
		/* 8214EE30h case   13:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x000000E8) );
		/* 8214EE30h case   13:*/		return 0x8214EE34;
		  /* 8214EE34h */ case   14:  		/* addi R3, R1, 224 */
		/* 8214EE34h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 8214EE34h case   14:*/		return 0x8214EE38;
		  /* 8214EE38h */ case   15:  		/* bl -816 */
		/* 8214EE38h case   15:*/		regs.LR = 0x8214EE3C; return 0x8214EB08;
		/* 8214EE38h case   15:*/		return 0x8214EE3C;
		  /* 8214EE3Ch */ case   16:  		/* mr R3, R31 */
		/* 8214EE3Ch case   16:*/		regs.R3 = regs.R31;
		/* 8214EE3Ch case   16:*/		return 0x8214EE40;
		  /* 8214EE40h */ case   17:  		/* bl -922048 */
		/* 8214EE40h case   17:*/		regs.LR = 0x8214EE44; return 0x8206DC80;
		/* 8214EE40h case   17:*/		return 0x8214EE44;
		  /* 8214EE44h */ case   18:  		/* mr R6, R20 */
		/* 8214EE44h case   18:*/		regs.R6 = regs.R20;
		/* 8214EE44h case   18:*/		return 0x8214EE48;
		  /* 8214EE48h */ case   19:  		/* mr R5, R21 */
		/* 8214EE48h case   19:*/		regs.R5 = regs.R21;
		/* 8214EE48h case   19:*/		return 0x8214EE4C;
		  /* 8214EE4Ch */ case   20:  		/* mr R4, R22 */
		/* 8214EE4Ch case   20:*/		regs.R4 = regs.R22;
		/* 8214EE4Ch case   20:*/		return 0x8214EE50;
		  /* 8214EE50h */ case   21:  		/* mr R3, R31 */
		/* 8214EE50h case   21:*/		regs.R3 = regs.R31;
		/* 8214EE50h case   21:*/		return 0x8214EE54;
		  /* 8214EE54h */ case   22:  		/* bl -922060 */
		/* 8214EE54h case   22:*/		regs.LR = 0x8214EE58; return 0x8206DC88;
		/* 8214EE54h case   22:*/		return 0x8214EE58;
		  /* 8214EE58h */ case   23:  		/* mr R28, R3 */
		/* 8214EE58h case   23:*/		regs.R28 = regs.R3;
		/* 8214EE58h case   23:*/		return 0x8214EE5C;
	}
	return 0x8214EE5C;
} // Block from 8214EDFCh-8214EE5Ch (24 instructions)

//////////////////////////////////////////////////////
// Block at 8214EE5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EE5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EE5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EE5C);
		  /* 8214EE5Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8214EE5Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8214EE5Ch case    0:*/		return 0x8214EE60;
		  /* 8214EE60h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8214EE60h case    1:*/		if ( regs.CR[6].eq ) { return 0x8214EE6C;  }
		/* 8214EE60h case    1:*/		return 0x8214EE64;
		  /* 8214EE64h */ case    2:  		/* mr R3, R31 */
		/* 8214EE64h case    2:*/		regs.R3 = regs.R31;
		/* 8214EE64h case    2:*/		return 0x8214EE68;
		  /* 8214EE68h */ case    3:  		/* bl -922216 */
		/* 8214EE68h case    3:*/		regs.LR = 0x8214EE6C; return 0x8206DC00;
		/* 8214EE68h case    3:*/		return 0x8214EE6C;
	}
	return 0x8214EE6C;
} // Block from 8214EE5Ch-8214EE6Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214EE6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EE6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EE6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EE6C);
		  /* 8214EE6Ch */ case    0:  		/* mr R3, R26 */
		/* 8214EE6Ch case    0:*/		regs.R3 = regs.R26;
		/* 8214EE6Ch case    0:*/		return 0x8214EE70;
		  /* 8214EE70h */ case    1:  		/* bl 49472 */
		/* 8214EE70h case    1:*/		regs.LR = 0x8214EE74; return 0x8215AFB0;
		/* 8214EE70h case    1:*/		return 0x8214EE74;
		  /* 8214EE74h */ case    2:  		/* mr R3, R25 */
		/* 8214EE74h case    2:*/		regs.R3 = regs.R25;
		/* 8214EE74h case    2:*/		return 0x8214EE78;
		  /* 8214EE78h */ case    3:  		/* bl 68320 */
		/* 8214EE78h case    3:*/		regs.LR = 0x8214EE7C; return 0x8215F958;
		/* 8214EE78h case    3:*/		return 0x8214EE7C;
		  /* 8214EE7Ch */ case    4:  		/* b 16 */
		/* 8214EE7Ch case    4:*/		return 0x8214EE8C;
		/* 8214EE7Ch case    4:*/		return 0x8214EE80;
	}
	return 0x8214EE80;
} // Block from 8214EE6Ch-8214EE80h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214EE80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EE80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EE80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EE80);
		  /* 8214EE80h */ case    0:  		/* lis R28, -30602 */
		/* 8214EE80h case    0:*/		cpu::op::lis<0>(regs,&regs.R28,0xFFFF8876);
		/* 8214EE80h case    0:*/		return 0x8214EE84;
		  /* 8214EE84h */ case    1:  		/* ori R28, R28, 2156 */
		/* 8214EE84h case    1:*/		cpu::op::ori<0>(regs,&regs.R28,regs.R28,0x86C);
		/* 8214EE84h case    1:*/		return 0x8214EE88;
		  /* 8214EE88h */ case    2:  		/* bl 1147864 */
		/* 8214EE88h case    2:*/		regs.LR = 0x8214EE8C; return 0x82267260;
		/* 8214EE88h case    2:*/		return 0x8214EE8C;
	}
	return 0x8214EE8C;
} // Block from 8214EE80h-8214EE8Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214EE8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EE8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EE8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EE8C);
		  /* 8214EE8Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8214EE8Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8214EE8Ch case    0:*/		return 0x8214EE90;
		  /* 8214EE90h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 8214EE90h case    1:*/		if ( regs.CR[6].eq ) { return 0x8214EEA0;  }
		/* 8214EE90h case    1:*/		return 0x8214EE94;
		  /* 8214EE94h */ case    2:  		/* mr R4, R29 */
		/* 8214EE94h case    2:*/		regs.R4 = regs.R29;
		/* 8214EE94h case    2:*/		return 0x8214EE98;
		  /* 8214EE98h */ case    3:  		/* mr R3, R27 */
		/* 8214EE98h case    3:*/		regs.R3 = regs.R27;
		/* 8214EE98h case    3:*/		return 0x8214EE9C;
		  /* 8214EE9Ch */ case    4:  		/* bl 48532 */
		/* 8214EE9Ch case    4:*/		regs.LR = 0x8214EEA0; return 0x8215AC30;
		/* 8214EE9Ch case    4:*/		return 0x8214EEA0;
	}
	return 0x8214EEA0;
} // Block from 8214EE8Ch-8214EEA0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214EEA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EEA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EEA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EEA0);
		  /* 8214EEA0h */ case    0:  		/* mr R3, R27 */
		/* 8214EEA0h case    0:*/		regs.R3 = regs.R27;
		/* 8214EEA0h case    0:*/		return 0x8214EEA4;
		  /* 8214EEA4h */ case    1:  		/* bl 66948 */
		/* 8214EEA4h case    1:*/		regs.LR = 0x8214EEA8; return 0x8215F428;
		/* 8214EEA4h case    1:*/		return 0x8214EEA8;
	}
	return 0x8214EEA8;
} // Block from 8214EEA0h-8214EEA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214EEA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EEA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EEA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EEA8);
		  /* 8214EEA8h */ case    0:  		/* addi R3, R1, 272 */
		/* 8214EEA8h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x110);
		/* 8214EEA8h case    0:*/		return 0x8214EEAC;
		  /* 8214EEACh */ case    1:  		/* bl -8740 */
		/* 8214EEACh case    1:*/		regs.LR = 0x8214EEB0; return 0x8214CC88;
		/* 8214EEACh case    1:*/		return 0x8214EEB0;
	}
	return 0x8214EEB0;
} // Block from 8214EEA8h-8214EEB0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214EEB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EEB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EEB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EEB0);
		  /* 8214EEB0h */ case    0:  		/* mr R3, R28 */
		/* 8214EEB0h case    0:*/		regs.R3 = regs.R28;
		/* 8214EEB0h case    0:*/		return 0x8214EEB4;
		  /* 8214EEB4h */ case    1:  		/* addi R1, R1, 832 */
		/* 8214EEB4h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x340);
		/* 8214EEB4h case    1:*/		return 0x8214EEB8;
		  /* 8214EEB8h */ case    2:  		/* b -777264 */
		/* 8214EEB8h case    2:*/		return 0x82091288;
		/* 8214EEB8h case    2:*/		return 0x8214EEBC;
		  /* 8214EEBCh */ case    3:  		/* nop */
		/* 8214EEBCh case    3:*/		cpu::op::nop();
		/* 8214EEBCh case    3:*/		return 0x8214EEC0;
	}
	return 0x8214EEC0;
} // Block from 8214EEB0h-8214EEC0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214EEC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EEC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EEC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EEC0);
		  /* 8214EEC0h */ case    0:  		/* mfspr R12, LR */
		/* 8214EEC0h case    0:*/		regs.R12 = regs.LR;
		/* 8214EEC0h case    0:*/		return 0x8214EEC4;
		  /* 8214EEC4h */ case    1:  		/* bl -777372 */
		/* 8214EEC4h case    1:*/		regs.LR = 0x8214EEC8; return 0x82091228;
		/* 8214EEC4h case    1:*/		return 0x8214EEC8;
		  /* 8214EEC8h */ case    2:  		/* stwu R1, <#[R1 - 2576]> */
		/* 8214EEC8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFF5F0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFF5F0);
		/* 8214EEC8h case    2:*/		return 0x8214EECC;
		  /* 8214EECCh */ case    3:  		/* lis R11, -32215 */
		/* 8214EECCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8229);
		/* 8214EECCh case    3:*/		return 0x8214EED0;
		  /* 8214EED0h */ case    4:  		/* stw R9, <#[R1 + 88]> */
		/* 8214EED0h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8214EED0h case    4:*/		return 0x8214EED4;
		  /* 8214EED4h */ case    5:  		/* mr R21, R3 */
		/* 8214EED4h case    5:*/		regs.R21 = regs.R3;
		/* 8214EED4h case    5:*/		return 0x8214EED8;
		  /* 8214EED8h */ case    6:  		/* stw R10, <#[R1 + 92]> */
		/* 8214EED8h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214EED8h case    6:*/		return 0x8214EEDC;
		  /* 8214EEDCh */ case    7:  		/* mr R20, R4 */
		/* 8214EEDCh case    7:*/		regs.R20 = regs.R4;
		/* 8214EEDCh case    7:*/		return 0x8214EEE0;
		  /* 8214EEE0h */ case    8:  		/* mr R19, R5 */
		/* 8214EEE0h case    8:*/		regs.R19 = regs.R5;
		/* 8214EEE0h case    8:*/		return 0x8214EEE4;
		  /* 8214EEE4h */ case    9:  		/* mr R18, R6 */
		/* 8214EEE4h case    9:*/		regs.R18 = regs.R6;
		/* 8214EEE4h case    9:*/		return 0x8214EEE8;
		  /* 8214EEE8h */ case   10:  		/* lwz R11, <#[R11 - 28008]> */
		/* 8214EEE8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0xFFFF9298) );
		/* 8214EEE8h case   10:*/		return 0x8214EEEC;
		  /* 8214EEECh */ case   11:  		/* mr R17, R7 */
		/* 8214EEECh case   11:*/		regs.R17 = regs.R7;
		/* 8214EEECh case   11:*/		return 0x8214EEF0;
		  /* 8214EEF0h */ case   12:  		/* li R22, 0 */
		/* 8214EEF0h case   12:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 8214EEF0h case   12:*/		return 0x8214EEF4;
		  /* 8214EEF4h */ case   13:  		/* li R29, 1 */
		/* 8214EEF4h case   13:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 8214EEF4h case   13:*/		return 0x8214EEF8;
		  /* 8214EEF8h */ case   14:  		/* cmpwi CR6, R11, 0 */
		/* 8214EEF8h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214EEF8h case   14:*/		return 0x8214EEFC;
		  /* 8214EEFCh */ case   15:  		/* bc 12, CR6_EQ, 16 */
		/* 8214EEFCh case   15:*/		if ( regs.CR[6].eq ) { return 0x8214EF0C;  }
		/* 8214EEFCh case   15:*/		return 0x8214EF00;
		  /* 8214EF00h */ case   16:  		/* rlwinm. R11, R8, 0, 28, 28 */
		/* 8214EF00h case   16:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R8);
		/* 8214EF00h case   16:*/		return 0x8214EF04;
		  /* 8214EF04h */ case   17:  		/* stw R29, <#[R1 + 96]> */
		/* 8214EF04h case   17:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000060) );
		/* 8214EF04h case   17:*/		return 0x8214EF08;
		  /* 8214EF08h */ case   18:  		/* bc 4, CR0_EQ, 8 */
		/* 8214EF08h case   18:*/		if ( !regs.CR[0].eq ) { return 0x8214EF10;  }
		/* 8214EF08h case   18:*/		return 0x8214EF0C;
	}
	return 0x8214EF0C;
} // Block from 8214EEC0h-8214EF0Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8214EF0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EF0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EF0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EF0C);
		  /* 8214EF0Ch */ case    0:  		/* stw R22, <#[R1 + 96]> */
		/* 8214EF0Ch case    0:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000060) );
		/* 8214EF0Ch case    0:*/		return 0x8214EF10;
	}
	return 0x8214EF10;
} // Block from 8214EF0Ch-8214EF10h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214EF10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EF10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EF10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EF10);
		  /* 8214EF10h */ case    0:  		/* li R5, 1860 */
		/* 8214EF10h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x744);
		/* 8214EF10h case    0:*/		return 0x8214EF14;
		  /* 8214EF14h */ case    1:  		/* li R4, 0 */
		/* 8214EF14h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214EF14h case    1:*/		return 0x8214EF18;
		  /* 8214EF18h */ case    2:  		/* addi R3, R1, 304 */
		/* 8214EF18h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x130);
		/* 8214EF18h case    2:*/		return 0x8214EF1C;
		  /* 8214EF1Ch */ case    3:  		/* bl -777180 */
		/* 8214EF1Ch case    3:*/		regs.LR = 0x8214EF20; return 0x82091340;
		/* 8214EF1Ch case    3:*/		return 0x8214EF20;
		  /* 8214EF20h */ case    4:  		/* lis R3, 0 */
		/* 8214EF20h case    4:*/		cpu::op::lis<0>(regs,&regs.R3,0x0);
		/* 8214EF20h case    4:*/		return 0x8214EF24;
		  /* 8214EF24h */ case    5:  		/* lis R4, 9351 */
		/* 8214EF24h case    5:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 8214EF24h case    5:*/		return 0x8214EF28;
		  /* 8214EF28h */ case    6:  		/* ori R3, R3, 33024 */
		/* 8214EF28h case    6:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x8100);
		/* 8214EF28h case    6:*/		return 0x8214EF2C;
		  /* 8214EF2Ch */ case    7:  		/* bl -814380 */
		/* 8214EF2Ch case    7:*/		regs.LR = 0x8214EF30; return 0x82088200;
		/* 8214EF2Ch case    7:*/		return 0x8214EF30;
		  /* 8214EF30h */ case    8:  		/* li R11, 8 */
		/* 8214EF30h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x8);
		/* 8214EF30h case    8:*/		return 0x8214EF34;
		  /* 8214EF34h */ case    9:  		/* addi R10, R1, 232 */
		/* 8214EF34h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xE8);
		/* 8214EF34h case    9:*/		return 0x8214EF38;
		  /* 8214EF38h */ case   10:  		/* stw R3, <#[R1 + 332]> */
		/* 8214EF38h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x0000014C) );
		/* 8214EF38h case   10:*/		return 0x8214EF3C;
		  /* 8214EF3Ch */ case   11:  		/* mr R16, R3 */
		/* 8214EF3Ch case   11:*/		regs.R16 = regs.R3;
		/* 8214EF3Ch case   11:*/		return 0x8214EF40;
		  /* 8214EF40h */ case   12:  		/* mr R9, R22 */
		/* 8214EF40h case   12:*/		regs.R9 = regs.R22;
		/* 8214EF40h case   12:*/		return 0x8214EF44;
		  /* 8214EF44h */ case   13:  		/* mtspr CTR, R11 */
		/* 8214EF44h case   13:*/		regs.CTR = regs.R11;
		/* 8214EF44h case   13:*/		return 0x8214EF48;
		  /* 8214EF48h */ case   14:  		/* stdu R9, <#[R10 + 8]> */
		/* 8214EF48h case   14:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + 0x00000008) );
		regs.R10 = (uint32)(regs.R10 + 0x00000008);
		/* 8214EF48h case   14:*/		return 0x8214EF4C;
		  /* 8214EF4Ch */ case   15:  		/* bc 16, CR0_LT, -4 */
		/* 8214EF4Ch case   15:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8214EF48;  }
		/* 8214EF4Ch case   15:*/		return 0x8214EF50;
		  /* 8214EF50h */ case   16:  		/* li R5, 260 */
		/* 8214EF50h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x104);
		/* 8214EF50h case   16:*/		return 0x8214EF54;
		  /* 8214EF54h */ case   17:  		/* stw R21, <#[R1 + 328]> */
		/* 8214EF54h case   17:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000148) );
		/* 8214EF54h case   17:*/		return 0x8214EF58;
		  /* 8214EF58h */ case   18:  		/* li R4, 0 */
		/* 8214EF58h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214EF58h case   18:*/		return 0x8214EF5C;
		  /* 8214EF5Ch */ case   19:  		/* addi R3, R1, 2176 */
		/* 8214EF5Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x880);
		/* 8214EF5Ch case   19:*/		return 0x8214EF60;
		  /* 8214EF60h */ case   20:  		/* bl -777248 */
		/* 8214EF60h case   20:*/		regs.LR = 0x8214EF64; return 0x82091340;
		/* 8214EF60h case   20:*/		return 0x8214EF64;
		  /* 8214EF64h */ case   21:  		/* lhz R11, <#[R21 + 2]> */
		/* 8214EF64h case   21:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000002) );
		/* 8214EF64h case   21:*/		return 0x8214EF68;
		  /* 8214EF68h */ case   22:  		/* addi R10, R1, 2176 */
		/* 8214EF68h case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x880);
		/* 8214EF68h case   22:*/		return 0x8214EF6C;
		  /* 8214EF6Ch */ case   23:  		/* lis R9, 16392 */
		/* 8214EF6Ch case   23:*/		cpu::op::lis<0>(regs,&regs.R9,0x4008);
		/* 8214EF6Ch case   23:*/		return 0x8214EF70;
		  /* 8214EF70h */ case   24:  		/* stw R10, <#[R1 + 1884]> */
		/* 8214EF70h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000075C) );
		/* 8214EF70h case   24:*/		return 0x8214EF74;
		  /* 8214EF74h */ case   25:  		/* cmplwi CR6, R11, 1024 */
		/* 8214EF74h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000400);
		/* 8214EF74h case   25:*/		return 0x8214EF78;
		  /* 8214EF78h */ case   26:  		/* stw R9, <#[R1 + 308]> */
		/* 8214EF78h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000134) );
		/* 8214EF78h case   26:*/		return 0x8214EF7C;
		  /* 8214EF7Ch */ case   27:  		/* stw R11, <#[R1 + 320]> */
		/* 8214EF7Ch case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000140) );
		/* 8214EF7Ch case   27:*/		return 0x8214EF80;
		  /* 8214EF80h */ case   28:  		/* bc 12, CR6_LT, 8 */
		/* 8214EF80h case   28:*/		if ( regs.CR[6].lt ) { return 0x8214EF88;  }
		/* 8214EF80h case   28:*/		return 0x8214EF84;
		  /* 8214EF84h */ case   29:  		/* bl 1147612 */
		/* 8214EF84h case   29:*/		regs.LR = 0x8214EF88; return 0x82267260;
		/* 8214EF84h case   29:*/		return 0x8214EF88;
	}
	return 0x8214EF88;
} // Block from 8214EF10h-8214EF88h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8214EF88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EF88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EF88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EF88);
		  /* 8214EF88h */ case    0:  		/* stw R22, <#[R1 + 612]> */
		/* 8214EF88h case    0:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000264) );
		/* 8214EF88h case    0:*/		return 0x8214EF8C;
		  /* 8214EF8Ch */ case    1:  		/* mr R30, R22 */
		/* 8214EF8Ch case    1:*/		regs.R30 = regs.R22;
		/* 8214EF8Ch case    1:*/		return 0x8214EF90;
		  /* 8214EF90h */ case    2:  		/* lwz R10, <#[R21 + 4]> */
		/* 8214EF90h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000004) );
		/* 8214EF90h case    2:*/		return 0x8214EF94;
		  /* 8214EF94h */ case    3:  		/* addi R11, R21, 4 */
		/* 8214EF94h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R21,0x4);
		/* 8214EF94h case    3:*/		return 0x8214EF98;
		  /* 8214EF98h */ case    4:  		/* b 204 */
		/* 8214EF98h case    4:*/		return 0x8214F064;
		/* 8214EF98h case    4:*/		return 0x8214EF9C;
		  /* 8214EF9Ch */ case    5:  		/* rlwinm R9, R10, 0, 16, 31 */
		/* 8214EF9Ch case    5:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R10);
		/* 8214EF9Ch case    5:*/		return 0x8214EFA0;
		  /* 8214EFA0h */ case    6:  		/* addi R31, R11, 4 */
		/* 8214EFA0h case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 8214EFA0h case    6:*/		return 0x8214EFA4;
		  /* 8214EFA4h */ case    7:  		/* cmplwi CR6, R9, 31 */
		/* 8214EFA4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x0000001F);
		/* 8214EFA4h case    7:*/		return 0x8214EFA8;
		  /* 8214EFA8h */ case    8:  		/* bc 12, CR6_EQ, 56 */
		/* 8214EFA8h case    8:*/		if ( regs.CR[6].eq ) { return 0x8214EFE0;  }
		/* 8214EFA8h case    8:*/		return 0x8214EFAC;
		  /* 8214EFACh */ case    9:  		/* cmplwi CR6, R9, 47 */
		/* 8214EFACh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x0000002F);
		/* 8214EFACh case    9:*/		return 0x8214EFB0;
		  /* 8214EFB0h */ case   10:  		/* bc 12, CR6_EQ, 172 */
		/* 8214EFB0h case   10:*/		if ( regs.CR[6].eq ) { return 0x8214F05C;  }
		/* 8214EFB0h case   10:*/		return 0x8214EFB4;
		  /* 8214EFB4h */ case   11:  		/* cmplwi CR6, R9, 48 */
		/* 8214EFB4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000030);
		/* 8214EFB4h case   11:*/		return 0x8214EFB8;
		  /* 8214EFB8h */ case   12:  		/* bc 12, CR6_EQ, 32 */
		/* 8214EFB8h case   12:*/		if ( regs.CR[6].eq ) { return 0x8214EFD8;  }
		/* 8214EFB8h case   12:*/		return 0x8214EFBC;
		  /* 8214EFBCh */ case   13:  		/* cmplwi CR6, R9, 81 */
		/* 8214EFBCh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000051);
		/* 8214EFBCh case   13:*/		return 0x8214EFC0;
		  /* 8214EFC0h */ case   14:  		/* bc 12, CR6_EQ, 24 */
		/* 8214EFC0h case   14:*/		if ( regs.CR[6].eq ) { return 0x8214EFD8;  }
		/* 8214EFC0h case   14:*/		return 0x8214EFC4;
		  /* 8214EFC4h */ case   15:  		/* cmplwi CR6, R9, 65534 */
		/* 8214EFC4h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x0000FFFE);
		/* 8214EFC4h case   15:*/		return 0x8214EFC8;
		  /* 8214EFC8h */ case   16:  		/* bc 4, CR6_EQ, 164 */
		/* 8214EFC8h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8214F06C;  }
		/* 8214EFC8h case   16:*/		return 0x8214EFCC;
		  /* 8214EFCCh */ case   17:  		/* rlwinm R11, R10, 18, 15, 29 */
		/* 8214EFCCh case   17:*/		cpu::op::rlwinm<0,18,15,29>(regs,&regs.R11,regs.R10);
		/* 8214EFCCh case   17:*/		return 0x8214EFD0;
		  /* 8214EFD0h */ case   18:  		/* add R11, R11, R31 */
		/* 8214EFD0h case   18:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 8214EFD0h case   18:*/		return 0x8214EFD4;
		  /* 8214EFD4h */ case   19:  		/* b 140 */
		/* 8214EFD4h case   19:*/		return 0x8214F060;
		/* 8214EFD4h case   19:*/		return 0x8214EFD8;
	}
	return 0x8214EFD8;
} // Block from 8214EF88h-8214EFD8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8214EFD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EFD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EFD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EFD8);
		  /* 8214EFD8h */ case    0:  		/* addi R11, R31, 20 */
		/* 8214EFD8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x14);
		/* 8214EFD8h case    0:*/		return 0x8214EFDC;
		  /* 8214EFDCh */ case    1:  		/* b 132 */
		/* 8214EFDCh case    1:*/		return 0x8214F060;
		/* 8214EFDCh case    1:*/		return 0x8214EFE0;
	}
	return 0x8214EFE0;
} // Block from 8214EFD8h-8214EFE0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214EFE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214EFE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214EFE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214EFE0);
		  /* 8214EFE0h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8214EFE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8214EFE0h case    0:*/		return 0x8214EFE4;
		  /* 8214EFE4h */ case    1:  		/* mr R10, R11 */
		/* 8214EFE4h case    1:*/		regs.R10 = regs.R11;
		/* 8214EFE4h case    1:*/		return 0x8214EFE8;
		  /* 8214EFE8h */ case    2:  		/* rlwimi R10, R11, 12, 21, 23 */
		/* 8214EFE8h case    2:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R10,regs.R11);
		/* 8214EFE8h case    2:*/		return 0x8214EFEC;
		  /* 8214EFECh */ case    3:  		/* rlwinm R11, R10, 0, 19, 23 */
		/* 8214EFECh case    3:*/		cpu::op::rlwinm<0,0,19,23>(regs,&regs.R11,regs.R10);
		/* 8214EFECh case    3:*/		return 0x8214EFF0;
		  /* 8214EFF0h */ case    4:  		/* cmplwi CR6, R11, 256 */
		/* 8214EFF0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000100);
		/* 8214EFF0h case    4:*/		return 0x8214EFF4;
		  /* 8214EFF4h */ case    5:  		/* bc 4, CR6_EQ, 104 */
		/* 8214EFF4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8214F05C;  }
		/* 8214EFF4h case    5:*/		return 0x8214EFF8;
		  /* 8214EFF8h */ case    6:  		/* addi R11, R30, 1 */
		/* 8214EFF8h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x1);
		/* 8214EFF8h case    6:*/		return 0x8214EFFC;
		  /* 8214EFFCh */ case    7:  		/* cmplwi CR6, R30, 64 */
		/* 8214EFFCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000040);
		/* 8214EFFCh case    7:*/		return 0x8214F000;
		  /* 8214F000h */ case    8:  		/* stw R11, <#[R1 + 612]> */
		/* 8214F000h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000264) );
		/* 8214F000h case    8:*/		return 0x8214F004;
		  /* 8214F004h */ case    9:  		/* bc 12, CR6_LT, 8 */
		/* 8214F004h case    9:*/		if ( regs.CR[6].lt ) { return 0x8214F00C;  }
		/* 8214F004h case    9:*/		return 0x8214F008;
		  /* 8214F008h */ case   10:  		/* bl 1147480 */
		/* 8214F008h case   10:*/		regs.LR = 0x8214F00C; return 0x82267260;
		/* 8214F008h case   10:*/		return 0x8214F00C;
	}
	return 0x8214F00C;
} // Block from 8214EFE0h-8214F00Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8214F00Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F00C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F00C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F00C);
		  /* 8214F00Ch */ case    0:  		/* rlwinm R10, R30, 2, 0, 29 */
		/* 8214F00Ch case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R30);
		/* 8214F00Ch case    0:*/		return 0x8214F010;
		  /* 8214F010h */ case    1:  		/* lwz R9, <#[R31]> */
		/* 8214F010h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 8214F010h case    1:*/		return 0x8214F014;
		  /* 8214F014h */ case    2:  		/* addi R11, R1, 356 */
		/* 8214F014h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x164);
		/* 8214F014h case    2:*/		return 0x8214F018;
		  /* 8214F018h */ case    3:  		/* rlwinm R9, R9, 0, 28, 31 */
		/* 8214F018h case    3:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R9);
		/* 8214F018h case    3:*/		return 0x8214F01C;
		  /* 8214F01Ch */ case    4:  		/* add R11, R10, R11 */
		/* 8214F01Ch case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8214F01Ch case    4:*/		return 0x8214F020;
		  /* 8214F020h */ case    5:  		/* stb R9, <#[R11]> */
		/* 8214F020h case    5:*/		cpu::mem::store8( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8214F020h case    5:*/		return 0x8214F024;
		  /* 8214F024h */ case    6:  		/* lhz R10, <#[R31]> */
		/* 8214F024h case    6:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8214F024h case    6:*/		return 0x8214F028;
		  /* 8214F028h */ case    7:  		/* rlwinm R10, R10, 0, 28, 31 */
		/* 8214F028h case    7:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R10,regs.R10);
		/* 8214F028h case    7:*/		return 0x8214F02C;
		  /* 8214F02Ch */ case    8:  		/* stb R10, <#[R11 + 1]> */
		/* 8214F02Ch case    8:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000001) );
		/* 8214F02Ch case    8:*/		return 0x8214F030;
		  /* 8214F030h */ case    9:  		/* lbz R9, <#[R31 + 7]> */
		/* 8214F030h case    9:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000007) );
		/* 8214F030h case    9:*/		return 0x8214F034;
		  /* 8214F034h */ case   10:  		/* lwz R10, <#[R11]> */
		/* 8214F034h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8214F034h case   10:*/		return 0x8214F038;
		  /* 8214F038h */ case   11:  		/* rlwinm R10, R10, 0, 24, 15 */
		/* 8214F038h case   11:*/		cpu::op::rlwinm<0,0,24,15>(regs,&regs.R10,regs.R10);
		/* 8214F038h case   11:*/		return 0x8214F03C;
		  /* 8214F03Ch */ case   12:  		/* rlwinm R9, R9, 8, 0, 31 */
		/* 8214F03Ch case   12:*/		cpu::op::rlwinm<0,8,0,31>(regs,&regs.R9,regs.R9);
		/* 8214F03Ch case   12:*/		return 0x8214F040;
		  /* 8214F040h */ case   13:  		/* or R10, R9, R10 */
		/* 8214F040h case   13:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8214F040h case   13:*/		return 0x8214F044;
		  /* 8214F044h */ case   14:  		/* mr R9, R10 */
		/* 8214F044h case   14:*/		regs.R9 = regs.R10;
		/* 8214F044h case   14:*/		return 0x8214F048;
		  /* 8214F048h */ case   15:  		/* stw R10, <#[R11]> */
		/* 8214F048h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8214F048h case   15:*/		return 0x8214F04C;
		  /* 8214F04Ch */ case   16:  		/* lwz R10, <#[R31 + 4]> */
		/* 8214F04Ch case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8214F04Ch case   16:*/		return 0x8214F050;
		  /* 8214F050h */ case   17:  		/* rlwimi R9, R10, 20, 24, 27 */
		/* 8214F050h case   17:*/		cpu::op::rlwimi<0,20,24,27>(regs,&regs.R9,regs.R10);
		/* 8214F050h case   17:*/		return 0x8214F054;
		  /* 8214F054h */ case   18:  		/* stw R9, <#[R11]> */
		/* 8214F054h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8214F054h case   18:*/		return 0x8214F058;
		  /* 8214F058h */ case   19:  		/* lwz R30, <#[R1 + 612]> */
		/* 8214F058h case   19:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000264) );
		/* 8214F058h case   19:*/		return 0x8214F05C;
	}
	return 0x8214F05C;
} // Block from 8214F00Ch-8214F05Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 8214F05Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F05C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F05C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F05C);
		  /* 8214F05Ch */ case    0:  		/* addi R11, R31, 8 */
		/* 8214F05Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x8);
		/* 8214F05Ch case    0:*/		return 0x8214F060;
	}
	return 0x8214F060;
} // Block from 8214F05Ch-8214F060h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214F060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F060);
		  /* 8214F060h */ case    0:  		/* lwz R10, <#[R11]> */
		/* 8214F060h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8214F060h case    0:*/		return 0x8214F064;
	}
	return 0x8214F064;
} // Block from 8214F060h-8214F064h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214F064h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F064( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F064) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F064);
		  /* 8214F064h */ case    0:  		/* cmplwi CR6, R10, 65535 */
		/* 8214F064h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000FFFF);
		/* 8214F064h case    0:*/		return 0x8214F068;
		  /* 8214F068h */ case    1:  		/* bc 4, CR6_EQ, -204 */
		/* 8214F068h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8214EF9C;  }
		/* 8214F068h case    1:*/		return 0x8214F06C;
	}
	return 0x8214F06C;
} // Block from 8214F064h-8214F06Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214F06Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F06C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F06C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F06C);
		  /* 8214F06Ch */ case    0:  		/* addi R4, R1, 304 */
		/* 8214F06Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x130);
		/* 8214F06Ch case    0:*/		return 0x8214F070;
		  /* 8214F070h */ case    1:  		/* addi R3, R1, 240 */
		/* 8214F070h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xF0);
		/* 8214F070h case    1:*/		return 0x8214F074;
		  /* 8214F074h */ case    2:  		/* bl 73852 */
		/* 8214F074h case    2:*/		regs.LR = 0x8214F078; return 0x821610F0;
		/* 8214F074h case    2:*/		return 0x8214F078;
		  /* 8214F078h */ case    3:  		/* stw R3, <#[R1 + 336]> */
		/* 8214F078h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000150) );
		/* 8214F078h case    3:*/		return 0x8214F07C;
		  /* 8214F07Ch */ case    4:  		/* li R10, 8192 */
		/* 8214F07Ch case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x2000);
		/* 8214F07Ch case    4:*/		return 0x8214F080;
		  /* 8214F080h */ case    5:  		/* addi R9, R1, 1136 */
		/* 8214F080h case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x470);
		/* 8214F080h case    5:*/		return 0x8214F084;
		  /* 8214F084h */ case    6:  		/* addi R8, R1, 336 */
		/* 8214F084h case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x150);
		/* 8214F084h case    6:*/		return 0x8214F088;
		  /* 8214F088h */ case    7:  		/* addi R7, R1, 304 */
		/* 8214F088h case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x130);
		/* 8214F088h case    7:*/		return 0x8214F08C;
		  /* 8214F08Ch */ case    8:  		/* li R6, 256 */
		/* 8214F08Ch case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x100);
		/* 8214F08Ch case    8:*/		return 0x8214F090;
		  /* 8214F090h */ case    9:  		/* mr R5, R20 */
		/* 8214F090h case    9:*/		regs.R5 = regs.R20;
		/* 8214F090h case    9:*/		return 0x8214F094;
		  /* 8214F094h */ case   10:  		/* mr R4, R21 */
		/* 8214F094h case   10:*/		regs.R4 = regs.R21;
		/* 8214F094h case   10:*/		return 0x8214F098;
		  /* 8214F098h */ case   11:  		/* addi R3, R1, 240 */
		/* 8214F098h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xF0);
		/* 8214F098h case   11:*/		return 0x8214F09C;
		  /* 8214F09Ch */ case   12:  		/* bl 79628 */
		/* 8214F09Ch case   12:*/		regs.LR = 0x8214F0A0; return 0x821627A8;
		/* 8214F09Ch case   12:*/		return 0x8214F0A0;
		  /* 8214F0A0h */ case   13:  		/* or. R27, R3, R3 */
		/* 8214F0A0h case   13:*/		cpu::op::or<1>(regs,&regs.R27,regs.R3,regs.R3);
		/* 8214F0A0h case   13:*/		return 0x8214F0A4;
		  /* 8214F0A4h */ case   14:  		/* bc 12, CR0_LT, 1060 */
		/* 8214F0A4h case   14:*/		if ( regs.CR[0].lt ) { return 0x8214F4C8;  }
		/* 8214F0A4h case   14:*/		return 0x8214F0A8;
		  /* 8214F0A8h */ case   15:  		/* lwz R11, <#[R1 + 336]> */
		/* 8214F0A8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000150) );
		/* 8214F0A8h case   15:*/		return 0x8214F0AC;
		  /* 8214F0ACh */ case   16:  		/* cmplwi CR6, R11, 8192 */
		/* 8214F0ACh case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002000);
		/* 8214F0ACh case   16:*/		return 0x8214F0B0;
		  /* 8214F0B0h */ case   17:  		/* bc 4, CR6_GT, 8 */
		/* 8214F0B0h case   17:*/		if ( !regs.CR[6].gt ) { return 0x8214F0B8;  }
		/* 8214F0B0h case   17:*/		return 0x8214F0B4;
		  /* 8214F0B4h */ case   18:  		/* bl 1147308 */
		/* 8214F0B4h case   18:*/		regs.LR = 0x8214F0B8; return 0x82267260;
		/* 8214F0B4h case   18:*/		return 0x8214F0B8;
	}
	return 0x8214F0B8;
} // Block from 8214F06Ch-8214F0B8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8214F0B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F0B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F0B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F0B8);
		  /* 8214F0B8h */ case    0:  		/* li R11, 9 */
		/* 8214F0B8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x9);
		/* 8214F0B8h case    0:*/		return 0x8214F0BC;
		  /* 8214F0BCh */ case    1:  		/* addi R10, R1, 136 */
		/* 8214F0BCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x88);
		/* 8214F0BCh case    1:*/		return 0x8214F0C0;
	}
	return 0x8214F0C0;
} // Block from 8214F0B8h-8214F0C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214F0C0h
// Function '?PrintConstant@XGRAPHICS@@YAXPAVOutStream@1@PBD11PBU_D3DXCONSTANT_DESC@@PBU_D3DXSHADER_CONSTANTTABLE@@PBU_D3DXSHADER_CONSTANTINFO@@PBU_D3DXSHADER_TYPEINFO@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F0C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F0C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F0C0);
		  /* 8214F0C0h */ case    0:  		/* mr R9, R22 */
		/* 8214F0C0h case    0:*/		regs.R9 = regs.R22;
		/* 8214F0C0h case    0:*/		return 0x8214F0C4;
		  /* 8214F0C4h */ case    1:  		/* mtspr CTR, R11 */
		/* 8214F0C4h case    1:*/		regs.CTR = regs.R11;
		/* 8214F0C4h case    1:*/		return 0x8214F0C8;
		  /* 8214F0C8h */ case    2:  		/* stdu R9, <#[R10 + 8]> */
		/* 8214F0C8h case    2:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + 0x00000008) );
		regs.R10 = (uint32)(regs.R10 + 0x00000008);
		/* 8214F0C8h case    2:*/		return 0x8214F0CC;
		  /* 8214F0CCh */ case    3:  		/* bc 16, CR0_LT, -4 */
		/* 8214F0CCh case    3:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8214F0C8;  }
		/* 8214F0CCh case    3:*/		return 0x8214F0D0;
		  /* 8214F0D0h */ case    4:  		/* lis R10, -32235 */
		/* 8214F0D0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8215);
		/* 8214F0D0h case    4:*/		return 0x8214F0D4;
		  /* 8214F0D4h */ case    5:  		/* stw R29, <#[R1 + 156]> */
		/* 8214F0D4h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x0000009C) );
		/* 8214F0D4h case    5:*/		return 0x8214F0D8;
		  /* 8214F0D8h */ case    6:  		/* addi R11, R1, 112 */
		/* 8214F0D8h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 8214F0D8h case    6:*/		return 0x8214F0DC;
		  /* 8214F0DCh */ case    7:  		/* addi R10, R10, -17152 */
		/* 8214F0DCh case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFBD00);
		/* 8214F0DCh case    7:*/		return 0x8214F0E0;
		  /* 8214F0E0h */ case    8:  		/* lis R7, -32235 */
		/* 8214F0E0h case    8:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8215);
		/* 8214F0E0h case    8:*/		return 0x8214F0E4;
		  /* 8214F0E4h */ case    9:  		/* lis R9, -32235 */
		/* 8214F0E4h case    9:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8215);
		/* 8214F0E4h case    9:*/		return 0x8214F0E8;
		  /* 8214F0E8h */ case   10:  		/* stw R10, <#[R1 + 164]> */
		/* 8214F0E8h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000A4) );
		/* 8214F0E8h case   10:*/		return 0x8214F0EC;
		  /* 8214F0ECh */ case   11:  		/* addi R10, R7, -17064 */
		/* 8214F0ECh case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R7,0xFFFFBD58);
		/* 8214F0ECh case   11:*/		return 0x8214F0F0;
		  /* 8214F0F0h */ case   12:  		/* addi R9, R9, -16976 */
		/* 8214F0F0h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFBDB0);
		/* 8214F0F0h case   12:*/		return 0x8214F0F4;
		  /* 8214F0F4h */ case   13:  		/* std R22, <#[R11]> */
		/* 8214F0F4h case   13:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R11 + 0x00000000) );
		/* 8214F0F4h case   13:*/		return 0x8214F0F8;
		  /* 8214F0F8h */ case   14:  		/* lis R6, -32222 */
		/* 8214F0F8h case   14:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8222);
		/* 8214F0F8h case   14:*/		return 0x8214F0FC;
		  /* 8214F0FCh */ case   15:  		/* std R22, <#[R11 + 8]> */
		/* 8214F0FCh case   15:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R11 + 0x00000008) );
		/* 8214F0FCh case   15:*/		return 0x8214F100;
		  /* 8214F100h */ case   16:  		/* lis R4, -32218 */
		/* 8214F100h case   16:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8226);
		/* 8214F100h case   16:*/		return 0x8214F104;
		  /* 8214F104h */ case   17:  		/* std R22, <#[R11 + 16]> */
		/* 8214F104h case   17:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R11 + 0x00000010) );
		/* 8214F104h case   17:*/		return 0x8214F108;
		  /* 8214F108h */ case   18:  		/* lis R8, -32235 */
		/* 8214F108h case   18:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8215);
		/* 8214F108h case   18:*/		return 0x8214F10C;
		  /* 8214F10Ch */ case   19:  		/* stw R9, <#[R1 + 208]> */
		/* 8214F10Ch case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000000D0) );
		/* 8214F10Ch case   19:*/		return 0x8214F110;
		  /* 8214F110h */ case   20:  		/* stw R10, <#[R1 + 180]> */
		/* 8214F110h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000B4) );
		/* 8214F110h case   20:*/		return 0x8214F114;
		  /* 8214F114h */ case   21:  		/* addi R10, R4, -25344 */
		/* 8214F114h case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R4,0xFFFF9D00);
		/* 8214F114h case   21:*/		return 0x8214F118;
		  /* 8214F118h */ case   22:  		/* std R22, <#[R11 + 24]> */
		/* 8214F118h case   22:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R11 + 0x00000018) );
		/* 8214F118h case   22:*/		return 0x8214F11C;
		  /* 8214F11Ch */ case   23:  		/* addi R8, R8, -17144 */
		/* 8214F11Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFBD08);
		/* 8214F11Ch case   23:*/		return 0x8214F120;
		  /* 8214F120h */ case   24:  		/* addi R9, R6, -11328 */
		/* 8214F120h case   24:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R6,0xFFFFD3C0);
		/* 8214F120h case   24:*/		return 0x8214F124;
		  /* 8214F124h */ case   25:  		/* stw R10, <#[R1 + 176]> */
		/* 8214F124h case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x000000B0) );
		/* 8214F124h case   25:*/		return 0x8214F128;
		  /* 8214F128h */ case   26:  		/* lis R5, -32235 */
		/* 8214F128h case   26:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8215);
		/* 8214F128h case   26:*/		return 0x8214F12C;
		  /* 8214F12Ch */ case   27:  		/* stw R8, <#[R1 + 168]> */
		/* 8214F12Ch case   27:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000000A8) );
		/* 8214F12Ch case   27:*/		return 0x8214F130;
		  /* 8214F130h */ case   28:  		/* lis R3, -32235 */
		/* 8214F130h case   28:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8215);
		/* 8214F130h case   28:*/		return 0x8214F134;
		  /* 8214F134h */ case   29:  		/* stw R9, <#[R1 + 184]> */
		/* 8214F134h case   29:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000000B8) );
		/* 8214F134h case   29:*/		return 0x8214F138;
		  /* 8214F138h */ case   30:  		/* lis R11, -32218 */
		/* 8214F138h case   30:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8226);
		/* 8214F138h case   30:*/		return 0x8214F13C;
		  /* 8214F13Ch */ case   31:  		/* addi R9, R3, -16968 */
		/* 8214F13Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R3,0xFFFFBDB8);
		/* 8214F13Ch case   31:*/		return 0x8214F140;
		  /* 8214F140h */ case   32:  		/* addi R8, R5, -17104 */
		/* 8214F140h case   32:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R5,0xFFFFBD30);
		/* 8214F140h case   32:*/		return 0x8214F144;
		  /* 8214F144h */ case   33:  		/* addi R11, R11, -25344 */
		/* 8214F144h case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFF9D00);
		/* 8214F144h case   33:*/		return 0x8214F148;
		  /* 8214F148h */ case   34:  		/* stw R9, <#[R1 + 212]> */
		/* 8214F148h case   34:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x000000D4) );
		/* 8214F148h case   34:*/		return 0x8214F14C;
		  /* 8214F14Ch */ case   35:  		/* addi R10, R1, 88 */
		/* 8214F14Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x58);
		/* 8214F14Ch case   35:*/		return 0x8214F150;
		  /* 8214F150h */ case   36:  		/* stw R8, <#[R1 + 172]> */
		/* 8214F150h case   36:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000000AC) );
		/* 8214F150h case   36:*/		return 0x8214F154;
		  /* 8214F154h */ case   37:  		/* lis R31, -32235 */
		/* 8214F154h case   37:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8215);
		/* 8214F154h case   37:*/		return 0x8214F158;
		  /* 8214F158h */ case   38:  		/* stw R11, <#[R1 + 120]> */
		/* 8214F158h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 8214F158h case   38:*/		return 0x8214F15C;
		  /* 8214F15Ch */ case   39:  		/* lis R30, -32235 */
		/* 8214F15Ch case   39:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8215);
		/* 8214F15Ch case   39:*/		return 0x8214F160;
		  /* 8214F160h */ case   40:  		/* stw R10, <#[R1 + 116]> */
		/* 8214F160h case   40:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000074) );
		/* 8214F160h case   40:*/		return 0x8214F164;
		  /* 8214F164h */ case   41:  		/* lis R29, -32222 */
		/* 8214F164h case   41:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8222);
		/* 8214F164h case   41:*/		return 0x8214F168;
		  /* 8214F168h */ case   42:  		/* addi R8, R1, 88 */
		/* 8214F168h case   42:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x58);
		/* 8214F168h case   42:*/		return 0x8214F16C;
		  /* 8214F16Ch */ case   43:  		/* addi R9, R31, -17160 */
		/* 8214F16Ch case   43:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0xFFFFBCF8);
		/* 8214F16Ch case   43:*/		return 0x8214F170;
		  /* 8214F170h */ case   44:  		/* addi R10, R30, -17160 */
		/* 8214F170h case   44:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0xFFFFBCF8);
		/* 8214F170h case   44:*/		return 0x8214F174;
		  /* 8214F174h */ case   45:  		/* stw R8, <#[R1 + 160]> */
		/* 8214F174h case   45:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x000000A0) );
		/* 8214F174h case   45:*/		return 0x8214F178;
		  /* 8214F178h */ case   46:  		/* addi R11, R29, -11328 */
		/* 8214F178h case   46:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0xFFFFD3C0);
		/* 8214F178h case   46:*/		return 0x8214F17C;
		  /* 8214F17Ch */ case   47:  		/* stw R9, <#[R1 + 132]> */
		/* 8214F17Ch case   47:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000084) );
		/* 8214F17Ch case   47:*/		return 0x8214F180;
		  /* 8214F180h */ case   48:  		/* li R28, 50 */
		/* 8214F180h case   48:*/		cpu::op::li<0>(regs,&regs.R28,0x32);
		/* 8214F180h case   48:*/		return 0x8214F184;
		  /* 8214F184h */ case   49:  		/* stw R10, <#[R1 + 136]> */
		/* 8214F184h case   49:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000088) );
		/* 8214F184h case   49:*/		return 0x8214F188;
		  /* 8214F188h */ case   50:  		/* stw R11, <#[R1 + 140]> */
		/* 8214F188h case   50:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 8214F188h case   50:*/		return 0x8214F18C;
		  /* 8214F18Ch */ case   51:  		/* li R4, 13 */
		/* 8214F18Ch case   51:*/		cpu::op::li<0>(regs,&regs.R4,0xD);
		/* 8214F18Ch case   51:*/		return 0x8214F190;
		  /* 8214F190h */ case   52:  		/* stw R28, <#[R1 + 144]> */
		/* 8214F190h case   52:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000090) );
		/* 8214F190h case   52:*/		return 0x8214F194;
		  /* 8214F194h */ case   53:  		/* addi R3, R1, 144 */
		/* 8214F194h case   53:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 8214F194h case   53:*/		return 0x8214F198;
		  /* 8214F198h */ case   54:  		/* bl 64696 */
		/* 8214F198h case   54:*/		regs.LR = 0x8214F19C; return 0x8215EE50;
		/* 8214F198h case   54:*/		return 0x8214F19C;
		  /* 8214F19Ch */ case   55:  		/* lwz R11, <#[R1 + 336]> */
		/* 8214F19Ch case   55:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000150) );
		/* 8214F19Ch case   55:*/		return 0x8214F1A0;
		  /* 8214F1A0h */ case   56:  		/* li R7, 0 */
		/* 8214F1A0h case   56:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8214F1A0h case   56:*/		return 0x8214F1A4;
		  /* 8214F1A4h */ case   57:  		/* lwz R4, <#[R1 + 332]> */
		/* 8214F1A4h case   57:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000014C) );
		/* 8214F1A4h case   57:*/		return 0x8214F1A8;
		  /* 8214F1A8h */ case   58:  		/* li R6, 1 */
		/* 8214F1A8h case   58:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8214F1A8h case   58:*/		return 0x8214F1AC;
		  /* 8214F1ACh */ case   59:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8214F1ACh case   59:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8214F1ACh case   59:*/		return 0x8214F1B0;
		  /* 8214F1B0h */ case   60:  		/* mr R25, R3 */
		/* 8214F1B0h case   60:*/		regs.R25 = regs.R3;
		/* 8214F1B0h case   60:*/		return 0x8214F1B4;
		  /* 8214F1B4h */ case   61:  		/* bl 47508 */
		/* 8214F1B4h case   61:*/		regs.LR = 0x8214F1B8; return 0x8215AB48;
		/* 8214F1B4h case   61:*/		return 0x8214F1B8;
		  /* 8214F1B8h */ case   62:  		/* or. R26, R3, R3 */
		/* 8214F1B8h case   62:*/		cpu::op::or<1>(regs,&regs.R26,regs.R3,regs.R3);
		/* 8214F1B8h case   62:*/		return 0x8214F1BC;
		  /* 8214F1BCh */ case   63:  		/* bc 12, CR0_EQ, 728 */
		/* 8214F1BCh case   63:*/		if ( regs.CR[0].eq ) { return 0x8214F494;  }
		/* 8214F1BCh case   63:*/		return 0x8214F1C0;
		  /* 8214F1C0h */ case   64:  		/* addi R4, R1, 112 */
		/* 8214F1C0h case   64:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 8214F1C0h case   64:*/		return 0x8214F1C4;
		  /* 8214F1C4h */ case   65:  		/* mr R3, R25 */
		/* 8214F1C4h case   65:*/		regs.R3 = regs.R25;
		/* 8214F1C4h case   65:*/		return 0x8214F1C8;
		  /* 8214F1C8h */ case   66:  		/* bl 66632 */
		/* 8214F1C8h case   66:*/		regs.LR = 0x8214F1CC; return 0x8215F610;
		/* 8214F1C8h case   66:*/		return 0x8214F1CC;
		  /* 8214F1CCh */ case   67:  		/* li R4, 0 */
		/* 8214F1CCh case   67:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214F1CCh case   67:*/		return 0x8214F1D0;
		  /* 8214F1D0h */ case   68:  		/* mr R23, R3 */
		/* 8214F1D0h case   68:*/		regs.R23 = regs.R3;
		/* 8214F1D0h case   68:*/		return 0x8214F1D4;
		  /* 8214F1D4h */ case   69:  		/* bl 48452 */
		/* 8214F1D4h case   69:*/		regs.LR = 0x8214F1D8; return 0x8215AF18;
		/* 8214F1D4h case   69:*/		return 0x8214F1D8;
		  /* 8214F1D8h */ case   70:  		/* lwz R11, <#[R1 + 612]> */
		/* 8214F1D8h case   70:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000264) );
		/* 8214F1D8h case   70:*/		return 0x8214F1DC;
		  /* 8214F1DCh */ case   71:  		/* mr R24, R3 */
		/* 8214F1DCh case   71:*/		regs.R24 = regs.R3;
		/* 8214F1DCh case   71:*/		return 0x8214F1E0;
		  /* 8214F1E0h */ case   72:  		/* mr R31, R22 */
		/* 8214F1E0h case   72:*/		regs.R31 = regs.R22;
		/* 8214F1E0h case   72:*/		return 0x8214F1E4;
		  /* 8214F1E4h */ case   73:  		/* cmplwi CR6, R11, 0 */
		/* 8214F1E4h case   73:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214F1E4h case   73:*/		return 0x8214F1E8;
		  /* 8214F1E8h */ case   74:  		/* bc 12, CR6_EQ, 40 */
		/* 8214F1E8h case   74:*/		if ( regs.CR[6].eq ) { return 0x8214F210;  }
		/* 8214F1E8h case   74:*/		return 0x8214F1EC;
		  /* 8214F1ECh */ case   75:  		/* mr R6, R31 */
		/* 8214F1ECh case   75:*/		regs.R6 = regs.R31;
		/* 8214F1ECh case   75:*/		return 0x8214F1F0;
		  /* 8214F1F0h */ case   76:  		/* mr R5, R31 */
		/* 8214F1F0h case   76:*/		regs.R5 = regs.R31;
		/* 8214F1F0h case   76:*/		return 0x8214F1F4;
		  /* 8214F1F4h */ case   77:  		/* li R4, 40 */
		/* 8214F1F4h case   77:*/		cpu::op::li<0>(regs,&regs.R4,0x28);
		/* 8214F1F4h case   77:*/		return 0x8214F1F8;
		  /* 8214F1F8h */ case   78:  		/* mr R3, R24 */
		/* 8214F1F8h case   78:*/		regs.R3 = regs.R24;
		/* 8214F1F8h case   78:*/		return 0x8214F1FC;
		  /* 8214F1FCh */ case   79:  		/* bl -9780 */
		/* 8214F1FCh case   79:*/		regs.LR = 0x8214F200; return 0x8214CBC8;
		/* 8214F1FCh case   79:*/		return 0x8214F200;
		  /* 8214F200h */ case   80:  		/* lwz R11, <#[R1 + 612]> */
		/* 8214F200h case   80:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000264) );
		/* 8214F200h case   80:*/		return 0x8214F204;
		  /* 8214F204h */ case   81:  		/* addi R31, R31, 1 */
		/* 8214F204h case   81:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8214F204h case   81:*/		return 0x8214F208;
		  /* 8214F208h */ case   82:  		/* cmplw CR6, R31, R11 */
		/* 8214F208h case   82:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8214F208h case   82:*/		return 0x8214F20C;
		  /* 8214F20Ch */ case   83:  		/* bc 12, CR6_LT, -32 */
		/* 8214F20Ch case   83:*/		if ( regs.CR[6].lt ) { return 0x8214F1EC;  }
		/* 8214F20Ch case   83:*/		return 0x8214F210;
	}
	return 0x8214F210;
} // Block from 8214F0C0h-8214F210h (84 instructions)

//////////////////////////////////////////////////////
// Block at 8214F210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F210);
		  /* 8214F210h */ case    0:  		/* lwz R11, <#[R1 + 96]> */
		/* 8214F210h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 8214F210h case    0:*/		return 0x8214F214;
		  /* 8214F214h */ case    1:  		/* stw R22, <#[R1 + 80]> */
		/* 8214F214h case    1:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000050) );
		/* 8214F214h case    1:*/		return 0x8214F218;
		  /* 8214F218h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8214F218h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214F218h case    2:*/		return 0x8214F21C;
		  /* 8214F21Ch */ case    3:  		/* bc 12, CR6_EQ, 68 */
		/* 8214F21Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8214F260;  }
		/* 8214F21Ch case    3:*/		return 0x8214F220;
		  /* 8214F220h */ case    4:  		/* mr R3, R25 */
		/* 8214F220h case    4:*/		regs.R3 = regs.R25;
		/* 8214F220h case    4:*/		return 0x8214F224;
		  /* 8214F224h */ case    5:  		/* bl 63964 */
		/* 8214F224h case    5:*/		regs.LR = 0x8214F228; return 0x8215EC00;
		/* 8214F224h case    5:*/		return 0x8214F228;
		  /* 8214F228h */ case    6:  		/* mr R31, R3 */
		/* 8214F228h case    6:*/		regs.R31 = regs.R3;
		/* 8214F228h case    6:*/		return 0x8214F22C;
		  /* 8214F22Ch */ case    7:  		/* mr R3, R25 */
		/* 8214F22Ch case    7:*/		regs.R3 = regs.R25;
		/* 8214F22Ch case    7:*/		return 0x8214F230;
		  /* 8214F230h */ case    8:  		/* bl 63928 */
		/* 8214F230h case    8:*/		regs.LR = 0x8214F234; return 0x8215EBE8;
		/* 8214F230h case    8:*/		return 0x8214F234;
		  /* 8214F234h */ case    9:  		/* mr R4, R26 */
		/* 8214F234h case    9:*/		regs.R4 = regs.R26;
		/* 8214F234h case    9:*/		return 0x8214F238;
		  /* 8214F238h */ case   10:  		/* bl 68512 */
		/* 8214F238h case   10:*/		regs.LR = 0x8214F23C; return 0x8215FDD8;
		/* 8214F238h case   10:*/		return 0x8214F23C;
		  /* 8214F23Ch */ case   11:  		/* mr R8, R3 */
		/* 8214F23Ch case   11:*/		regs.R8 = regs.R3;
		/* 8214F23Ch case   11:*/		return 0x8214F240;
		  /* 8214F240h */ case   12:  		/* addi R7, R1, 80 */
		/* 8214F240h case   12:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8214F240h case   12:*/		return 0x8214F244;
		  /* 8214F244h */ case   13:  		/* li R6, 0 */
		/* 8214F244h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8214F244h case   13:*/		return 0x8214F248;
		  /* 8214F248h */ case   14:  		/* mr R5, R26 */
		/* 8214F248h case   14:*/		regs.R5 = regs.R26;
		/* 8214F248h case   14:*/		return 0x8214F24C;
		  /* 8214F24Ch */ case   15:  		/* mr R4, R24 */
		/* 8214F24Ch case   15:*/		regs.R4 = regs.R24;
		/* 8214F24Ch case   15:*/		return 0x8214F250;
		  /* 8214F250h */ case   16:  		/* mr R3, R31 */
		/* 8214F250h case   16:*/		regs.R3 = regs.R31;
		/* 8214F250h case   16:*/		return 0x8214F254;
		  /* 8214F254h */ case   17:  		/* bl 70980 */
		/* 8214F254h case   17:*/		regs.LR = 0x8214F258; return 0x82160798;
		/* 8214F254h case   17:*/		return 0x8214F258;
		  /* 8214F258h */ case   18:  		/* mr R31, R3 */
		/* 8214F258h case   18:*/		regs.R31 = regs.R3;
		/* 8214F258h case   18:*/		return 0x8214F25C;
		  /* 8214F25Ch */ case   19:  		/* b 56 */
		/* 8214F25Ch case   19:*/		return 0x8214F294;
		/* 8214F25Ch case   19:*/		return 0x8214F260;
	}
	return 0x8214F260;
} // Block from 8214F210h-8214F260h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8214F260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F260);
		  /* 8214F260h */ case    0:  		/* mr R4, R24 */
		/* 8214F260h case    0:*/		regs.R4 = regs.R24;
		/* 8214F260h case    0:*/		return 0x8214F264;
		  /* 8214F264h */ case    1:  		/* mr R3, R26 */
		/* 8214F264h case    1:*/		regs.R3 = regs.R26;
		/* 8214F264h case    1:*/		return 0x8214F268;
		  /* 8214F268h */ case    2:  		/* bl -11184 */
		/* 8214F268h case    2:*/		regs.LR = 0x8214F26C; return 0x8214C6B8;
		/* 8214F268h case    2:*/		return 0x8214F26C;
		  /* 8214F26Ch */ case    3:  		/* or. R31, R3, R3 */
		/* 8214F26Ch case    3:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8214F26Ch case    3:*/		return 0x8214F270;
		  /* 8214F270h */ case    4:  		/* bc 4, CR0_EQ, 44 */
		/* 8214F270h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8214F29C;  }
		/* 8214F270h case    4:*/		return 0x8214F274;
		  /* 8214F274h */ case    5:  		/* mr R3, R23 */
		/* 8214F274h case    5:*/		regs.R3 = regs.R23;
		/* 8214F274h case    5:*/		return 0x8214F278;
		  /* 8214F278h */ case    6:  		/* bl 66448 */
		/* 8214F278h case    6:*/		regs.LR = 0x8214F27C; return 0x8215F608;
		/* 8214F278h case    6:*/		return 0x8214F27C;
		  /* 8214F27Ch */ case    7:  		/* bl 63852 */
		/* 8214F27Ch case    7:*/		regs.LR = 0x8214F280; return 0x8215EBE8;
		/* 8214F27Ch case    7:*/		return 0x8214F280;
		  /* 8214F280h */ case    8:  		/* mr R4, R26 */
		/* 8214F280h case    8:*/		regs.R4 = regs.R26;
		/* 8214F280h case    8:*/		return 0x8214F284;
		  /* 8214F284h */ case    9:  		/* bl 68788 */
		/* 8214F284h case    9:*/		regs.LR = 0x8214F288; return 0x8215FF38;
		/* 8214F284h case    9:*/		return 0x8214F288;
		  /* 8214F288h */ case   10:  		/* bl 55224 */
		/* 8214F288h case   10:*/		regs.LR = 0x8214F28C; return 0x8215CA40;
		/* 8214F288h case   10:*/		return 0x8214F28C;
		  /* 8214F28Ch */ case   11:  		/* bl 56164 */
		/* 8214F28Ch case   11:*/		regs.LR = 0x8214F290; return 0x8215CDF0;
		/* 8214F28Ch case   11:*/		return 0x8214F290;
		  /* 8214F290h */ case   12:  		/* stw R3, <#[R1 + 80]> */
		/* 8214F290h case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 8214F290h case   12:*/		return 0x8214F294;
	}
	return 0x8214F294;
} // Block from 8214F260h-8214F294h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214F294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F294);
		  /* 8214F294h */ case    0:  		/* cmpwi CR6, R31, 0 */
		/* 8214F294h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 8214F294h case    0:*/		return 0x8214F298;
		  /* 8214F298h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8214F298h case    1:*/		if ( regs.CR[6].eq ) { return 0x8214F2A4;  }
		/* 8214F298h case    1:*/		return 0x8214F29C;
	}
	return 0x8214F29C;
} // Block from 8214F294h-8214F29Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214F29Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F29C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F29C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F29C);
		  /* 8214F29Ch */ case    0:  		/* lis R27, -32768 */
		/* 8214F29Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8000);
		/* 8214F29Ch case    0:*/		return 0x8214F2A0;
		  /* 8214F2A0h */ case    1:  		/* ori R27, R27, 16389 */
		/* 8214F2A0h case    1:*/		cpu::op::ori<0>(regs,&regs.R27,regs.R27,0x4005);
		/* 8214F2A0h case    1:*/		return 0x8214F2A4;
	}
	return 0x8214F2A4;
} // Block from 8214F29Ch-8214F2A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214F2A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F2A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F2A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F2A4);
		  /* 8214F2A4h */ case    0:  		/* cmpwi CR6, R27, 0 */
		/* 8214F2A4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 8214F2A4h case    0:*/		return 0x8214F2A8;
		  /* 8214F2A8h */ case    1:  		/* bc 12, CR6_LT, 472 */
		/* 8214F2A8h case    1:*/		if ( regs.CR[6].lt ) { return 0x8214F480;  }
		/* 8214F2A8h case    1:*/		return 0x8214F2AC;
		  /* 8214F2ACh */ case    2:  		/* lwz R11, <#[R1 + 96]> */
		/* 8214F2ACh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 8214F2ACh case    2:*/		return 0x8214F2B0;
		  /* 8214F2B0h */ case    3:  		/* mr R29, R22 */
		/* 8214F2B0h case    3:*/		regs.R29 = regs.R22;
		/* 8214F2B0h case    3:*/		return 0x8214F2B4;
		  /* 8214F2B4h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8214F2B4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214F2B4h case    4:*/		return 0x8214F2B8;
		  /* 8214F2B8h */ case    5:  		/* bc 4, CR6_EQ, 68 */
		/* 8214F2B8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8214F2FC;  }
		/* 8214F2B8h case    5:*/		return 0x8214F2BC;
		  /* 8214F2BCh */ case    6:  		/* lwz R3, <#[R1 + 80]> */
		/* 8214F2BCh case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 8214F2BCh case    6:*/		return 0x8214F2C0;
		  /* 8214F2C0h */ case    7:  		/* bl 59112 */
		/* 8214F2C0h case    7:*/		regs.LR = 0x8214F2C4; return 0x8215D9A8;
		/* 8214F2C0h case    7:*/		return 0x8214F2C4;
		  /* 8214F2C4h */ case    8:  		/* mr R30, R3 */
		/* 8214F2C4h case    8:*/		regs.R30 = regs.R3;
		/* 8214F2C4h case    8:*/		return 0x8214F2C8;
		  /* 8214F2C8h */ case    9:  		/* bl 55160 */
		/* 8214F2C8h case    9:*/		regs.LR = 0x8214F2CC; return 0x8215CA40;
		/* 8214F2C8h case    9:*/		return 0x8214F2CC;
		  /* 8214F2CCh */ case   10:  		/* b 40 */
		/* 8214F2CCh case   10:*/		return 0x8214F2F4;
		/* 8214F2CCh case   10:*/		return 0x8214F2D0;
		  /* 8214F2D0h */ case   11:  		/* mr R3, R31 */
		/* 8214F2D0h case   11:*/		regs.R3 = regs.R31;
		/* 8214F2D0h case   11:*/		return 0x8214F2D4;
		  /* 8214F2D4h */ case   12:  		/* bl 56092 */
		/* 8214F2D4h case   12:*/		regs.LR = 0x8214F2D8; return 0x8215CDF0;
		/* 8214F2D4h case   12:*/		return 0x8214F2D8;
		  /* 8214F2D8h */ case   13:  		/* lwz R11, <#[R3]> */
		/* 8214F2D8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8214F2D8h case   13:*/		return 0x8214F2DC;
		  /* 8214F2DCh */ case   14:  		/* cmpwi CR6, R11, 0 */
		/* 8214F2DCh case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214F2DCh case   14:*/		return 0x8214F2E0;
		  /* 8214F2E0h */ case   15:  		/* bc 4, CR6_EQ, 8 */
		/* 8214F2E0h case   15:*/		if ( !regs.CR[6].eq ) { return 0x8214F2E8;  }
		/* 8214F2E0h case   15:*/		return 0x8214F2E4;
		  /* 8214F2E4h */ case   16:  		/* addi R29, R29, 1 */
		/* 8214F2E4h case   16:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8214F2E4h case   16:*/		return 0x8214F2E8;
	}
	return 0x8214F2E8;
} // Block from 8214F2A4h-8214F2E8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8214F2E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F2E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F2E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F2E8);
		  /* 8214F2E8h */ case    0:  		/* mr R4, R31 */
		/* 8214F2E8h case    0:*/		regs.R4 = regs.R31;
		/* 8214F2E8h case    0:*/		return 0x8214F2EC;
		  /* 8214F2ECh */ case    1:  		/* mr R3, R30 */
		/* 8214F2ECh case    1:*/		regs.R3 = regs.R30;
		/* 8214F2ECh case    1:*/		return 0x8214F2F0;
		  /* 8214F2F0h */ case    2:  		/* bl 55888 */
		/* 8214F2F0h case    2:*/		regs.LR = 0x8214F2F4; return 0x8215CD40;
		/* 8214F2F0h case    2:*/		return 0x8214F2F4;
	}
	return 0x8214F2F4;
} // Block from 8214F2E8h-8214F2F4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214F2F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F2F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F2F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F2F4);
		  /* 8214F2F4h */ case    0:  		/* or. R31, R3, R3 */
		/* 8214F2F4h case    0:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8214F2F4h case    0:*/		return 0x8214F2F8;
		  /* 8214F2F8h */ case    1:  		/* bc 4, CR0_EQ, -40 */
		/* 8214F2F8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8214F2D0;  }
		/* 8214F2F8h case    1:*/		return 0x8214F2FC;
	}
	return 0x8214F2FC;
} // Block from 8214F2F4h-8214F2FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214F2FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F2FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F2FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F2FC);
		  /* 8214F2FCh */ case    0:  		/* addi R11, R29, 1 */
		/* 8214F2FCh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x1);
		/* 8214F2FCh case    0:*/		return 0x8214F300;
		  /* 8214F300h */ case    1:  		/* lis R4, 9351 */
		/* 8214F300h case    1:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 8214F300h case    1:*/		return 0x8214F304;
		  /* 8214F304h */ case    2:  		/* rlwinm R3, R11, 2, 0, 29 */
		/* 8214F304h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R3,regs.R11);
		/* 8214F304h case    2:*/		return 0x8214F308;
		  /* 8214F308h */ case    3:  		/* bl -815368 */
		/* 8214F308h case    3:*/		regs.LR = 0x8214F30C; return 0x82088200;
		/* 8214F308h case    3:*/		return 0x8214F30C;
		  /* 8214F30Ch */ case    4:  		/* or. R28, R3, R3 */
		/* 8214F30Ch case    4:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 8214F30Ch case    4:*/		return 0x8214F310;
		  /* 8214F310h */ case    5:  		/* bc 4, CR0_EQ, 12 */
		/* 8214F310h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8214F31C;  }
		/* 8214F310h case    5:*/		return 0x8214F314;
		  /* 8214F314h */ case    6:  		/* lis R27, -32761 */
		/* 8214F314h case    6:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8007);
		/* 8214F314h case    6:*/		return 0x8214F318;
		  /* 8214F318h */ case    7:  		/* ori R27, R27, 14 */
		/* 8214F318h case    7:*/		cpu::op::ori<0>(regs,&regs.R27,regs.R27,0xE);
		/* 8214F318h case    7:*/		return 0x8214F31C;
	}
	return 0x8214F31C;
} // Block from 8214F2FCh-8214F31Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214F31Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F31C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F31C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F31C);
		  /* 8214F31Ch */ case    0:  		/* cmpwi CR6, R27, 0 */
		/* 8214F31Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 8214F31Ch case    0:*/		return 0x8214F320;
		  /* 8214F320h */ case    1:  		/* bc 12, CR6_LT, 132 */
		/* 8214F320h case    1:*/		if ( regs.CR[6].lt ) { return 0x8214F3A4;  }
		/* 8214F320h case    1:*/		return 0x8214F324;
		  /* 8214F324h */ case    2:  		/* lwz R11, <#[R1 + 96]> */
		/* 8214F324h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 8214F324h case    2:*/		return 0x8214F328;
		  /* 8214F328h */ case    3:  		/* mr R30, R28 */
		/* 8214F328h case    3:*/		regs.R30 = regs.R28;
		/* 8214F328h case    3:*/		return 0x8214F32C;
		  /* 8214F32Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8214F32Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8214F32Ch case    4:*/		return 0x8214F330;
		  /* 8214F330h */ case    5:  		/* bc 4, CR6_EQ, 112 */
		/* 8214F330h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8214F3A0;  }
		/* 8214F330h case    5:*/		return 0x8214F334;
		  /* 8214F334h */ case    6:  		/* lwz R3, <#[R1 + 80]> */
		/* 8214F334h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 8214F334h case    6:*/		return 0x8214F338;
		  /* 8214F338h */ case    7:  		/* bl 58992 */
		/* 8214F338h case    7:*/		regs.LR = 0x8214F33C; return 0x8215D9A8;
		/* 8214F338h case    7:*/		return 0x8214F33C;
		  /* 8214F33Ch */ case    8:  		/* mr R29, R3 */
		/* 8214F33Ch case    8:*/		regs.R29 = regs.R3;
		/* 8214F33Ch case    8:*/		return 0x8214F340;
		  /* 8214F340h */ case    9:  		/* bl 55040 */
		/* 8214F340h case    9:*/		regs.LR = 0x8214F344; return 0x8215CA40;
		/* 8214F340h case    9:*/		return 0x8214F344;
		  /* 8214F344h */ case   10:  		/* b 84 */
		/* 8214F344h case   10:*/		return 0x8214F398;
		/* 8214F344h case   10:*/		return 0x8214F348;
		  /* 8214F348h */ case   11:  		/* mr R3, R31 */
		/* 8214F348h case   11:*/		regs.R3 = regs.R31;
		/* 8214F348h case   11:*/		return 0x8214F34C;
		  /* 8214F34Ch */ case   12:  		/* bl 55972 */
		/* 8214F34Ch case   12:*/		regs.LR = 0x8214F350; return 0x8215CDF0;
		/* 8214F34Ch case   12:*/		return 0x8214F350;
		  /* 8214F350h */ case   13:  		/* lwz R11, <#[R3]> */
		/* 8214F350h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8214F350h case   13:*/		return 0x8214F354;
		  /* 8214F354h */ case   14:  		/* cmpwi CR6, R11, 0 */
		/* 8214F354h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214F354h case   14:*/		return 0x8214F358;
		  /* 8214F358h */ case   15:  		/* bc 4, CR6_EQ, 52 */
		/* 8214F358h case   15:*/		if ( !regs.CR[6].eq ) { return 0x8214F38C;  }
		/* 8214F358h case   15:*/		return 0x8214F35C;
		  /* 8214F35Ch */ case   16:  		/* lwz R11, <#[R3 + 4]> */
		/* 8214F35Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8214F35Ch case   16:*/		return 0x8214F360;
		  /* 8214F360h */ case   17:  		/* addi R10, R1, 356 */
		/* 8214F360h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x164);
		/* 8214F360h case   17:*/		return 0x8214F364;
		  /* 8214F364h */ case   18:  		/* lwz R9, <#[R3 + 8]> */
		/* 8214F364h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8214F364h case   18:*/		return 0x8214F368;
		  /* 8214F368h */ case   19:  		/* li R8, 12 */
		/* 8214F368h case   19:*/		cpu::op::li<0>(regs,&regs.R8,0xC);
		/* 8214F368h case   19:*/		return 0x8214F36C;
		  /* 8214F36Ch */ case   20:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8214F36Ch case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8214F36Ch case   20:*/		return 0x8214F370;
		  /* 8214F370h */ case   21:  		/* divwu R9, R9, R8 */
		/* 8214F370h case   21:*/		cpu::op::divwu<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8214F370h case   21:*/		return 0x8214F374;
		  /* 8214F374h */ case   22:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8214F374h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8214F374h case   22:*/		return 0x8214F378;
		  /* 8214F378h */ case   23:  		/* rlwimi R9, R11, 20, 16, 19 */
		/* 8214F378h case   23:*/		cpu::op::rlwimi<0,20,16,19>(regs,&regs.R9,regs.R11);
		/* 8214F378h case   23:*/		return 0x8214F37C;
		  /* 8214F37Ch */ case   24:  		/* rlwimi R9, R11, 0, 12, 15 */
		/* 8214F37Ch case   24:*/		cpu::op::rlwimi<0,0,12,15>(regs,&regs.R9,regs.R11);
		/* 8214F37Ch case   24:*/		return 0x8214F380;
		  /* 8214F380h */ case   25:  		/* rlwinm R11, R9, 0, 12, 31 */
		/* 8214F380h case   25:*/		cpu::op::rlwinm<0,0,12,31>(regs,&regs.R11,regs.R9);
		/* 8214F380h case   25:*/		return 0x8214F384;
		  /* 8214F384h */ case   26:  		/* stw R11, <#[R30]> */
		/* 8214F384h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8214F384h case   26:*/		return 0x8214F388;
		  /* 8214F388h */ case   27:  		/* addi R30, R30, 4 */
		/* 8214F388h case   27:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8214F388h case   27:*/		return 0x8214F38C;
	}
	return 0x8214F38C;
} // Block from 8214F31Ch-8214F38Ch (28 instructions)

//////////////////////////////////////////////////////
// Block at 8214F38Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F38C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F38C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F38C);
		  /* 8214F38Ch */ case    0:  		/* mr R4, R31 */
		/* 8214F38Ch case    0:*/		regs.R4 = regs.R31;
		/* 8214F38Ch case    0:*/		return 0x8214F390;
		  /* 8214F390h */ case    1:  		/* mr R3, R29 */
		/* 8214F390h case    1:*/		regs.R3 = regs.R29;
		/* 8214F390h case    1:*/		return 0x8214F394;
		  /* 8214F394h */ case    2:  		/* bl 55724 */
		/* 8214F394h case    2:*/		regs.LR = 0x8214F398; return 0x8215CD40;
		/* 8214F394h case    2:*/		return 0x8214F398;
	}
	return 0x8214F398;
} // Block from 8214F38Ch-8214F398h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214F398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F398);
		  /* 8214F398h */ case    0:  		/* or. R31, R3, R3 */
		/* 8214F398h case    0:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8214F398h case    0:*/		return 0x8214F39C;
		  /* 8214F39Ch */ case    1:  		/* bc 4, CR0_EQ, -84 */
		/* 8214F39Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x8214F348;  }
		/* 8214F39Ch case    1:*/		return 0x8214F3A0;
	}
	return 0x8214F3A0;
} // Block from 8214F398h-8214F3A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214F3A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F3A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F3A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F3A0);
		  /* 8214F3A0h */ case    0:  		/* stw R22, <#[R30]> */
		/* 8214F3A0h case    0:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R30 + 0x00000000) );
		/* 8214F3A0h case    0:*/		return 0x8214F3A4;
	}
	return 0x8214F3A4;
} // Block from 8214F3A0h-8214F3A4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214F3A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F3A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F3A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F3A4);
		  /* 8214F3A4h */ case    0:  		/* cmpwi CR6, R27, 0 */
		/* 8214F3A4h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 8214F3A4h case    0:*/		return 0x8214F3A8;
		  /* 8214F3A8h */ case    1:  		/* stw R22, <#[R1 + 84]> */
		/* 8214F3A8h case    1:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000054) );
		/* 8214F3A8h case    1:*/		return 0x8214F3AC;
		  /* 8214F3ACh */ case    2:  		/* bc 12, CR6_LT, 192 */
		/* 8214F3ACh case    2:*/		if ( regs.CR[6].lt ) { return 0x8214F46C;  }
		/* 8214F3ACh case    2:*/		return 0x8214F3B0;
		  /* 8214F3B0h */ case    3:  		/* mr R9, R28 */
		/* 8214F3B0h case    3:*/		regs.R9 = regs.R28;
		/* 8214F3B0h case    3:*/		return 0x8214F3B4;
		  /* 8214F3B4h */ case    4:  		/* lwz R10, <#[R1 + 2668]> */
		/* 8214F3B4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000A6C) );
		/* 8214F3B4h case    4:*/		return 0x8214F3B8;
	}
	return 0x8214F3B8;
} // Block from 8214F3A4h-8214F3B8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214F3B8h
// Function '?DumpConstantTable@XGRAPHICS@@YAJPAVOutStream@1@W4UCODESHADERTYPE@@PBU_UCODE_HEADER@@K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F3B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F3B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F3B8);
		  /* 8214F3B8h */ case    0:  		/* li R8, 0 */
		/* 8214F3B8h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8214F3B8h case    0:*/		return 0x8214F3BC;
		  /* 8214F3BCh */ case    1:  		/* lwz R6, <#[R1 + 80]> */
		/* 8214F3BCh case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 8214F3BCh case    1:*/		return 0x8214F3C0;
		  /* 8214F3C0h */ case    2:  		/* addi R7, R1, 84 */
		/* 8214F3C0h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x54);
		/* 8214F3C0h case    2:*/		return 0x8214F3C4;
		  /* 8214F3C4h */ case    3:  		/* lwz R5, <#[R1 + 2660]> */
		/* 8214F3C4h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000A64) );
		/* 8214F3C4h case    3:*/		return 0x8214F3C8;
		  /* 8214F3C8h */ case    4:  		/* mr R4, R20 */
		/* 8214F3C8h case    4:*/		regs.R4 = regs.R20;
		/* 8214F3C8h case    4:*/		return 0x8214F3CC;
		  /* 8214F3CCh */ case    5:  		/* mr R3, R21 */
		/* 8214F3CCh case    5:*/		regs.R3 = regs.R21;
		/* 8214F3CCh case    5:*/		return 0x8214F3D0;
		  /* 8214F3D0h */ case    6:  		/* bl -6016 */
		/* 8214F3D0h case    6:*/		regs.LR = 0x8214F3D4; return 0x8214DC50;
		/* 8214F3D0h case    6:*/		return 0x8214F3D4;
		  /* 8214F3D4h */ case    7:  		/* lwz R31, <#[R1 + 84]> */
		/* 8214F3D4h case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 8214F3D4h case    7:*/		return 0x8214F3D8;
		  /* 8214F3D8h */ case    8:  		/* or. R27, R3, R3 */
		/* 8214F3D8h case    8:*/		cpu::op::or<1>(regs,&regs.R27,regs.R3,regs.R3);
		/* 8214F3D8h case    8:*/		return 0x8214F3DC;
		  /* 8214F3DCh */ case    9:  		/* bc 12, CR0_LT, 128 */
		/* 8214F3DCh case    9:*/		if ( regs.CR[0].lt ) { return 0x8214F45C;  }
		/* 8214F3DCh case    9:*/		return 0x8214F3E0;
		  /* 8214F3E0h */ case   10:  		/* stw R31, <#[R1 + 232]> */
		/* 8214F3E0h case   10:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x000000E8) );
		/* 8214F3E0h case   10:*/		return 0x8214F3E4;
		  /* 8214F3E4h */ case   11:  		/* addi R3, R1, 224 */
		/* 8214F3E4h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 8214F3E4h case   11:*/		return 0x8214F3E8;
		  /* 8214F3E8h */ case   12:  		/* bl -2272 */
		/* 8214F3E8h case   12:*/		regs.LR = 0x8214F3EC; return 0x8214EB08;
		/* 8214F3E8h case   12:*/		return 0x8214F3EC;
		  /* 8214F3ECh */ case   13:  		/* mr R3, R31 */
		/* 8214F3ECh case   13:*/		regs.R3 = regs.R31;
		/* 8214F3ECh case   13:*/		return 0x8214F3F0;
		  /* 8214F3F0h */ case   14:  		/* bl -938368 */
		/* 8214F3F0h case   14:*/		regs.LR = 0x8214F3F4; return 0x8206A270;
		/* 8214F3F0h case   14:*/		return 0x8214F3F4;
		  /* 8214F3F4h */ case   15:  		/* or. R29, R3, R3 */
		/* 8214F3F4h case   15:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 8214F3F4h case   15:*/		return 0x8214F3F8;
		  /* 8214F3F8h */ case   16:  		/* mr R30, R22 */
		/* 8214F3F8h case   16:*/		regs.R30 = regs.R22;
		/* 8214F3F8h case   16:*/		return 0x8214F3FC;
		  /* 8214F3FCh */ case   17:  		/* bc 12, CR0_EQ, 64 */
		/* 8214F3FCh case   17:*/		if ( regs.CR[0].eq ) { return 0x8214F43C;  }
		/* 8214F3FCh case   17:*/		return 0x8214F400;
		  /* 8214F400h */ case   18:  		/* addi R5, R1, 100 */
		/* 8214F400h case   18:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x64);
		/* 8214F400h case   18:*/		return 0x8214F404;
		  /* 8214F404h */ case   19:  		/* mr R4, R30 */
		/* 8214F404h case   19:*/		regs.R4 = regs.R30;
		/* 8214F404h case   19:*/		return 0x8214F408;
		  /* 8214F408h */ case   20:  		/* mr R3, R31 */
		/* 8214F408h case   20:*/		regs.R3 = regs.R31;
		/* 8214F408h case   20:*/		return 0x8214F40C;
		  /* 8214F40Ch */ case   21:  		/* bl -938300 */
		/* 8214F40Ch case   21:*/		regs.LR = 0x8214F410; return 0x8206A2D0;
		/* 8214F40Ch case   21:*/		return 0x8214F410;
		  /* 8214F410h */ case   22:  		/* lwz R11, <#[R1 + 100]> */
		/* 8214F410h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 8214F410h case   22:*/		return 0x8214F414;
		  /* 8214F414h */ case   23:  		/* cmpwi CR6, R11, 0 */
		/* 8214F414h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214F414h case   23:*/		return 0x8214F418;
		  /* 8214F418h */ case   24:  		/* bc 12, CR6_EQ, 24 */
		/* 8214F418h case   24:*/		if ( regs.CR[6].eq ) { return 0x8214F430;  }
		/* 8214F418h case   24:*/		return 0x8214F41C;
		  /* 8214F41Ch */ case   25:  		/* lwz R11, <#[R3]> */
		/* 8214F41Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8214F41Ch case   25:*/		return 0x8214F420;
		  /* 8214F420h */ case   26:  		/* rlwinm. R10, R11, 0, 27, 31 */
		/* 8214F420h case   26:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R10,regs.R11);
		/* 8214F420h case   26:*/		return 0x8214F424;
		  /* 8214F424h */ case   27:  		/* bc 12, CR0_EQ, 12 */
		/* 8214F424h case   27:*/		if ( regs.CR[0].eq ) { return 0x8214F430;  }
		/* 8214F424h case   27:*/		return 0x8214F428;
		  /* 8214F428h */ case   28:  		/* oris R11, R11, 8 */
		/* 8214F428h case   28:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8);
		/* 8214F428h case   28:*/		return 0x8214F42C;
		  /* 8214F42Ch */ case   29:  		/* stw R11, <#[R3]> */
		/* 8214F42Ch case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8214F42Ch case   29:*/		return 0x8214F430;
	}
	return 0x8214F430;
} // Block from 8214F3B8h-8214F430h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8214F430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F430);
		  /* 8214F430h */ case    0:  		/* addi R30, R30, 1 */
		/* 8214F430h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8214F430h case    0:*/		return 0x8214F434;
		  /* 8214F434h */ case    1:  		/* cmplw CR6, R30, R29 */
		/* 8214F434h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 8214F434h case    1:*/		return 0x8214F438;
		  /* 8214F438h */ case    2:  		/* bc 12, CR6_LT, -56 */
		/* 8214F438h case    2:*/		if ( regs.CR[6].lt ) { return 0x8214F400;  }
		/* 8214F438h case    2:*/		return 0x8214F43C;
	}
	return 0x8214F43C;
} // Block from 8214F430h-8214F43Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214F43Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F43C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F43C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F43C);
		  /* 8214F43Ch */ case    0:  		/* mr R3, R31 */
		/* 8214F43Ch case    0:*/		regs.R3 = regs.R31;
		/* 8214F43Ch case    0:*/		return 0x8214F440;
		  /* 8214F440h */ case    1:  		/* bl -923584 */
		/* 8214F440h case    1:*/		regs.LR = 0x8214F444; return 0x8206DC80;
		/* 8214F440h case    1:*/		return 0x8214F444;
		  /* 8214F444h */ case    2:  		/* mr R6, R17 */
		/* 8214F444h case    2:*/		regs.R6 = regs.R17;
		/* 8214F444h case    2:*/		return 0x8214F448;
		  /* 8214F448h */ case    3:  		/* mr R5, R18 */
		/* 8214F448h case    3:*/		regs.R5 = regs.R18;
		/* 8214F448h case    3:*/		return 0x8214F44C;
		  /* 8214F44Ch */ case    4:  		/* mr R4, R19 */
		/* 8214F44Ch case    4:*/		regs.R4 = regs.R19;
		/* 8214F44Ch case    4:*/		return 0x8214F450;
		  /* 8214F450h */ case    5:  		/* mr R3, R31 */
		/* 8214F450h case    5:*/		regs.R3 = regs.R31;
		/* 8214F450h case    5:*/		return 0x8214F454;
		  /* 8214F454h */ case    6:  		/* bl -923596 */
		/* 8214F454h case    6:*/		regs.LR = 0x8214F458; return 0x8206DC88;
		/* 8214F454h case    6:*/		return 0x8214F458;
		  /* 8214F458h */ case    7:  		/* mr R27, R3 */
		/* 8214F458h case    7:*/		regs.R27 = regs.R3;
		/* 8214F458h case    7:*/		return 0x8214F45C;
	}
	return 0x8214F45C;
} // Block from 8214F43Ch-8214F45Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8214F45Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F45C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F45C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F45C);
		  /* 8214F45Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8214F45Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8214F45Ch case    0:*/		return 0x8214F460;
		  /* 8214F460h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8214F460h case    1:*/		if ( regs.CR[6].eq ) { return 0x8214F46C;  }
		/* 8214F460h case    1:*/		return 0x8214F464;
		  /* 8214F464h */ case    2:  		/* mr R3, R31 */
		/* 8214F464h case    2:*/		regs.R3 = regs.R31;
		/* 8214F464h case    2:*/		return 0x8214F468;
		  /* 8214F468h */ case    3:  		/* bl -923752 */
		/* 8214F468h case    3:*/		regs.LR = 0x8214F46C; return 0x8206DC00;
		/* 8214F468h case    3:*/		return 0x8214F46C;
	}
	return 0x8214F46C;
} // Block from 8214F45Ch-8214F46Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214F46Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F46C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F46C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F46C);
		  /* 8214F46Ch */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8214F46Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8214F46Ch case    0:*/		return 0x8214F470;
	}
	return 0x8214F470;
} // Block from 8214F46Ch-8214F470h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214F470h
// Function '?PrintRTF@OutStream@XGRAPHICS@@QAAXPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F470( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F470) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F470);
		  /* 8214F470h */ case    0:  		/* bc 12, CR6_EQ, 16 */
		/* 8214F470h case    0:*/		if ( regs.CR[6].eq ) { return 0x8214F480;  }
		/* 8214F470h case    0:*/		return 0x8214F474;
		  /* 8214F474h */ case    1:  		/* lis R4, 9351 */
		/* 8214F474h case    1:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 8214F474h case    1:*/		return 0x8214F478;
		  /* 8214F478h */ case    2:  		/* mr R3, R28 */
		/* 8214F478h case    2:*/		regs.R3 = regs.R28;
		/* 8214F478h case    2:*/		return 0x8214F47C;
		  /* 8214F47Ch */ case    3:  		/* bl -815428 */
		/* 8214F47Ch case    3:*/		regs.LR = 0x8214F480; return 0x82088338;
		/* 8214F47Ch case    3:*/		return 0x8214F480;
	}
	return 0x8214F480;
} // Block from 8214F470h-8214F480h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214F480h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F480( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F480) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F480);
		  /* 8214F480h */ case    0:  		/* mr R3, R24 */
		/* 8214F480h case    0:*/		regs.R3 = regs.R24;
		/* 8214F480h case    0:*/		return 0x8214F484;
		  /* 8214F484h */ case    1:  		/* bl 47916 */
		/* 8214F484h case    1:*/		regs.LR = 0x8214F488; return 0x8215AFB0;
		/* 8214F484h case    1:*/		return 0x8214F488;
		  /* 8214F488h */ case    2:  		/* mr R3, R23 */
		/* 8214F488h case    2:*/		regs.R3 = regs.R23;
		/* 8214F488h case    2:*/		return 0x8214F48C;
		  /* 8214F48Ch */ case    3:  		/* bl 66764 */
		/* 8214F48Ch case    3:*/		regs.LR = 0x8214F490; return 0x8215F958;
		/* 8214F48Ch case    3:*/		return 0x8214F490;
		  /* 8214F490h */ case    4:  		/* b 16 */
		/* 8214F490h case    4:*/		return 0x8214F4A0;
		/* 8214F490h case    4:*/		return 0x8214F494;
	}
	return 0x8214F494;
} // Block from 8214F480h-8214F494h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214F494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F494);
		  /* 8214F494h */ case    0:  		/* lis R27, -32768 */
		/* 8214F494h case    0:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8000);
		/* 8214F494h case    0:*/		return 0x8214F498;
		  /* 8214F498h */ case    1:  		/* stw R22, <#[R1 + 332]> */
		/* 8214F498h case    1:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x0000014C) );
		/* 8214F498h case    1:*/		return 0x8214F49C;
		  /* 8214F49Ch */ case    2:  		/* ori R27, R27, 16389 */
		/* 8214F49Ch case    2:*/		cpu::op::ori<0>(regs,&regs.R27,regs.R27,0x4005);
		/* 8214F49Ch case    2:*/		return 0x8214F4A0;
	}
	return 0x8214F4A0;
} // Block from 8214F494h-8214F4A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214F4A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F4A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F4A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F4A0);
		  /* 8214F4A0h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8214F4A0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8214F4A0h case    0:*/		return 0x8214F4A4;
		  /* 8214F4A4h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 8214F4A4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8214F4B4;  }
		/* 8214F4A4h case    1:*/		return 0x8214F4A8;
		  /* 8214F4A8h */ case    2:  		/* mr R4, R26 */
		/* 8214F4A8h case    2:*/		regs.R4 = regs.R26;
		/* 8214F4A8h case    2:*/		return 0x8214F4AC;
		  /* 8214F4ACh */ case    3:  		/* mr R3, R25 */
		/* 8214F4ACh case    3:*/		regs.R3 = regs.R25;
		/* 8214F4ACh case    3:*/		return 0x8214F4B0;
		  /* 8214F4B0h */ case    4:  		/* bl 46976 */
		/* 8214F4B0h case    4:*/		regs.LR = 0x8214F4B4; return 0x8215AC30;
		/* 8214F4B0h case    4:*/		return 0x8214F4B4;
	}
	return 0x8214F4B4;
} // Block from 8214F4A0h-8214F4B4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214F4B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F4B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F4B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F4B4);
		  /* 8214F4B4h */ case    0:  		/* mr R3, R25 */
		/* 8214F4B4h case    0:*/		regs.R3 = regs.R25;
		/* 8214F4B4h case    0:*/		return 0x8214F4B8;
		  /* 8214F4B8h */ case    1:  		/* bl 65392 */
		/* 8214F4B8h case    1:*/		regs.LR = 0x8214F4BC; return 0x8215F428;
		/* 8214F4B8h case    1:*/		return 0x8214F4BC;
		  /* 8214F4BCh */ case    2:  		/* lis R4, 9351 */
		/* 8214F4BCh case    2:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 8214F4BCh case    2:*/		return 0x8214F4C0;
		  /* 8214F4C0h */ case    3:  		/* mr R3, R16 */
		/* 8214F4C0h case    3:*/		regs.R3 = regs.R16;
		/* 8214F4C0h case    3:*/		return 0x8214F4C4;
		  /* 8214F4C4h */ case    4:  		/* bl -815500 */
		/* 8214F4C4h case    4:*/		regs.LR = 0x8214F4C8; return 0x82088338;
		/* 8214F4C4h case    4:*/		return 0x8214F4C8;
	}
	return 0x8214F4C8;
} // Block from 8214F4B4h-8214F4C8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214F4C8h
// Function '?Fix@FixSerializationContext@XGRAPHICS@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F4C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F4C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F4C8);
		  /* 8214F4C8h */ case    0:  		/* mr R3, R27 */
		/* 8214F4C8h case    0:*/		regs.R3 = regs.R27;
		/* 8214F4C8h case    0:*/		return 0x8214F4CC;
		  /* 8214F4CCh */ case    1:  		/* addi R1, R1, 2576 */
		/* 8214F4CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA10);
		/* 8214F4CCh case    1:*/		return 0x8214F4D0;
		  /* 8214F4D0h */ case    2:  		/* b -778840 */
		/* 8214F4D0h case    2:*/		return 0x82091278;
		/* 8214F4D0h case    2:*/		return 0x8214F4D4;
		  /* 8214F4D4h */ case    3:  		/* nop */
		/* 8214F4D4h case    3:*/		cpu::op::nop();
		/* 8214F4D4h case    3:*/		return 0x8214F4D8;
	}
	return 0x8214F4D8;
} // Block from 8214F4C8h-8214F4D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214F4D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F4D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F4D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F4D8);
		  /* 8214F4D8h */ case    0:  		/* mfspr R12, LR */
		/* 8214F4D8h case    0:*/		regs.R12 = regs.LR;
		/* 8214F4D8h case    0:*/		return 0x8214F4DC;
		  /* 8214F4DCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214F4DCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214F4DCh case    1:*/		return 0x8214F4E0;
		  /* 8214F4E0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8214F4E0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214F4E0h case    2:*/		return 0x8214F4E4;
		  /* 8214F4E4h */ case    3:  		/* stwu R1, <#[R1 - 112]> */
		/* 8214F4E4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8214F4E4h case    3:*/		return 0x8214F4E8;
		  /* 8214F4E8h */ case    4:  		/* cmplwi CR6, R3, 0 */
		/* 8214F4E8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8214F4E8h case    4:*/		return 0x8214F4EC;
		  /* 8214F4ECh */ case    5:  		/* bc 12, CR6_EQ, 108 */
		/* 8214F4ECh case    5:*/		if ( regs.CR[6].eq ) { return 0x8214F558;  }
		/* 8214F4ECh case    5:*/		return 0x8214F4F0;
		  /* 8214F4F0h */ case    6:  		/* cmplwi CR6, R4, 4 */
		/* 8214F4F0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000004);
		/* 8214F4F0h case    6:*/		return 0x8214F4F4;
		  /* 8214F4F4h */ case    7:  		/* bc 12, CR6_LT, 100 */
		/* 8214F4F4h case    7:*/		if ( regs.CR[6].lt ) { return 0x8214F558;  }
		/* 8214F4F4h case    7:*/		return 0x8214F4F8;
		  /* 8214F4F8h */ case    8:  		/* cmplwi CR6, R5, 0 */
		/* 8214F4F8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8214F4F8h case    8:*/		return 0x8214F4FC;
		  /* 8214F4FCh */ case    9:  		/* bc 12, CR6_EQ, 92 */
		/* 8214F4FCh case    9:*/		if ( regs.CR[6].eq ) { return 0x8214F558;  }
		/* 8214F4FCh case    9:*/		return 0x8214F500;
		  /* 8214F500h */ case   10:  		/* cmplwi CR6, R7, 0 */
		/* 8214F500h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 8214F500h case   10:*/		return 0x8214F504;
		  /* 8214F504h */ case   11:  		/* bc 12, CR6_EQ, 84 */
		/* 8214F504h case   11:*/		if ( regs.CR[6].eq ) { return 0x8214F558;  }
		/* 8214F504h case   11:*/		return 0x8214F508;
		  /* 8214F508h */ case   12:  		/* lwz R11, <#[R3]> */
		/* 8214F508h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8214F508h case   12:*/		return 0x8214F50C;
		  /* 8214F50Ch */ case   13:  		/* lis R31, -2 */
		/* 8214F50Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFFFFFE);
		/* 8214F50Ch case   13:*/		return 0x8214F510;
		  /* 8214F510h */ case   14:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 8214F510h case   14:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 8214F510h case   14:*/		return 0x8214F514;
		  /* 8214F514h */ case   15:  		/* cmplw CR6, R11, R31 */
		/* 8214F514h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 8214F514h case   15:*/		return 0x8214F518;
		  /* 8214F518h */ case   16:  		/* bc 4, CR6_EQ, 28 */
		/* 8214F518h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8214F534;  }
		/* 8214F518h case   16:*/		return 0x8214F51C;
		  /* 8214F51Ch */ case   17:  		/* lwz R11, <#[R1 + 204]> */
		/* 8214F51Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000CC) );
		/* 8214F51Ch case   17:*/		return 0x8214F520;
		  /* 8214F520h */ case   18:  		/* lwz R31, <#[R1 + 196]> */
		/* 8214F520h case   18:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000C4) );
		/* 8214F520h case   18:*/		return 0x8214F524;
		  /* 8214F524h */ case   19:  		/* stw R11, <#[R1 + 92]> */
		/* 8214F524h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214F524h case   19:*/		return 0x8214F528;
	}
	return 0x8214F528;
} // Block from 8214F4D8h-8214F528h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8214F528h
// Function '?R500DoPixelShader@XGRAPHICS@@YAJPBKKPAKK1KPAXP6AX2HKPBD@ZPAUID3DXConstantTable@@PAU_UCODE_DEBUGGER_PARAMETERS@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F528);
		  /* 8214F528h */ case    0:  		/* stw R31, <#[R1 + 84]> */
		/* 8214F528h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 8214F528h case    0:*/		return 0x8214F52C;
		  /* 8214F52Ch */ case    1:  		/* bl -1644 */
		/* 8214F52Ch case    1:*/		regs.LR = 0x8214F530; return 0x8214EEC0;
		/* 8214F52Ch case    1:*/		return 0x8214F530;
		  /* 8214F530h */ case    2:  		/* b 48 */
		/* 8214F530h case    2:*/		return 0x8214F560;
		/* 8214F530h case    2:*/		return 0x8214F534;
	}
	return 0x8214F534;
} // Block from 8214F528h-8214F534h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214F534h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F534( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F534) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F534);
		  /* 8214F534h */ case    0:  		/* lis R31, -1 */
		/* 8214F534h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFFFFFF);
		/* 8214F534h case    0:*/		return 0x8214F538;
		  /* 8214F538h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 8214F538h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 8214F538h case    1:*/		return 0x8214F53C;
		  /* 8214F53Ch */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 8214F53Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8214F558;  }
		/* 8214F53Ch case    2:*/		return 0x8214F540;
		  /* 8214F540h */ case    3:  		/* lwz R11, <#[R1 + 204]> */
		/* 8214F540h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000CC) );
		/* 8214F540h case    3:*/		return 0x8214F544;
		  /* 8214F544h */ case    4:  		/* lwz R31, <#[R1 + 196]> */
		/* 8214F544h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000C4) );
		/* 8214F544h case    4:*/		return 0x8214F548;
		  /* 8214F548h */ case    5:  		/* stw R11, <#[R1 + 92]> */
		/* 8214F548h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214F548h case    5:*/		return 0x8214F54C;
		  /* 8214F54Ch */ case    6:  		/* stw R31, <#[R1 + 84]> */
		/* 8214F54Ch case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 8214F54Ch case    6:*/		return 0x8214F550;
		  /* 8214F550h */ case    7:  		/* bl -2536 */
		/* 8214F550h case    7:*/		regs.LR = 0x8214F554; return 0x8214EB68;
		/* 8214F550h case    7:*/		return 0x8214F554;
		  /* 8214F554h */ case    8:  		/* b 12 */
		/* 8214F554h case    8:*/		return 0x8214F560;
		/* 8214F554h case    8:*/		return 0x8214F558;
	}
	return 0x8214F558;
} // Block from 8214F534h-8214F558h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214F558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F558);
		  /* 8214F558h */ case    0:  		/* lis R3, -32761 */
		/* 8214F558h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8214F558h case    0:*/		return 0x8214F55C;
		  /* 8214F55Ch */ case    1:  		/* ori R3, R3, 87 */
		/* 8214F55Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x57);
		/* 8214F55Ch case    1:*/		return 0x8214F560;
	}
	return 0x8214F560;
} // Block from 8214F558h-8214F560h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214F560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F560);
		  /* 8214F560h */ case    0:  		/* addi R1, R1, 112 */
		/* 8214F560h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8214F560h case    0:*/		return 0x8214F564;
		  /* 8214F564h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214F564h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214F564h case    1:*/		return 0x8214F568;
		  /* 8214F568h */ case    2:  		/* mtspr LR, R12 */
		/* 8214F568h case    2:*/		regs.LR = regs.R12;
		/* 8214F568h case    2:*/		return 0x8214F56C;
		  /* 8214F56Ch */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 8214F56Ch case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214F56Ch case    3:*/		return 0x8214F570;
		  /* 8214F570h */ case    4:  		/* bclr 20, CR0_LT */
		/* 8214F570h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214F570h case    4:*/		return 0x8214F574;
	}
	return 0x8214F574;
} // Block from 8214F560h-8214F574h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214F574h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F574( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F574) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F574);
		  /* 8214F574h */ case    0:  		/* nop */
		/* 8214F574h case    0:*/		cpu::op::nop();
		/* 8214F574h case    0:*/		return 0x8214F578;
	}
	return 0x8214F578;
} // Block from 8214F574h-8214F578h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214F578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F578);
		  /* 8214F578h */ case    0:  		/* mfspr R12, LR */
		/* 8214F578h case    0:*/		regs.R12 = regs.LR;
		/* 8214F578h case    0:*/		return 0x8214F57C;
		  /* 8214F57Ch */ case    1:  		/* bl -779064 */
		/* 8214F57Ch case    1:*/		regs.LR = 0x8214F580; return 0x82091244;
		/* 8214F57Ch case    1:*/		return 0x8214F580;
		  /* 8214F580h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 8214F580h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 8214F580h case    2:*/		return 0x8214F584;
		  /* 8214F584h */ case    3:  		/* lwz R11, <#[R6]> */
		/* 8214F584h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 8214F584h case    3:*/		return 0x8214F588;
		  /* 8214F588h */ case    4:  		/* mr R27, R4 */
		/* 8214F588h case    4:*/		regs.R27 = regs.R4;
		/* 8214F588h case    4:*/		return 0x8214F58C;
		  /* 8214F58Ch */ case    5:  		/* lwz R26, <#[R6 + 4]> */
		/* 8214F58Ch case    5:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R6 + 0x00000004) );
		/* 8214F58Ch case    5:*/		return 0x8214F590;
		  /* 8214F590h */ case    6:  		/* mr R31, R6 */
		/* 8214F590h case    6:*/		regs.R31 = regs.R6;
		/* 8214F590h case    6:*/		return 0x8214F594;
		  /* 8214F594h */ case    7:  		/* mr R30, R7 */
		/* 8214F594h case    7:*/		regs.R30 = regs.R7;
		/* 8214F594h case    7:*/		return 0x8214F598;
		  /* 8214F598h */ case    8:  		/* mr R25, R10 */
		/* 8214F598h case    8:*/		regs.R25 = regs.R10;
		/* 8214F598h case    8:*/		return 0x8214F59C;
		  /* 8214F59Ch */ case    9:  		/* add R23, R11, R8 */
		/* 8214F59Ch case    9:*/		cpu::op::add<0>(regs,&regs.R23,regs.R11,regs.R8);
		/* 8214F59Ch case    9:*/		return 0x8214F5A0;
		  /* 8214F5A0h */ case   10:  		/* cmplwi CR6, R26, 0 */
		/* 8214F5A0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8214F5A0h case   10:*/		return 0x8214F5A4;
		  /* 8214F5A4h */ case   11:  		/* bc 12, CR6_EQ, 236 */
		/* 8214F5A4h case   11:*/		if ( regs.CR[6].eq ) { return 0x8214F690;  }
		/* 8214F5A4h case   11:*/		return 0x8214F5A8;
		  /* 8214F5A8h */ case   12:  		/* cmpwi CR6, R4, 0 */
		/* 8214F5A8h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000000);
		/* 8214F5A8h case   12:*/		return 0x8214F5AC;
		  /* 8214F5ACh */ case   13:  		/* ori R24, R3, 2 */
		/* 8214F5ACh case   13:*/		cpu::op::ori<0>(regs,&regs.R24,regs.R3,0x2);
		/* 8214F5ACh case   13:*/		return 0x8214F5B0;
		  /* 8214F5B0h */ case   14:  		/* bc 4, CR6_EQ, 8 */
		/* 8214F5B0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8214F5B8;  }
		/* 8214F5B0h case   14:*/		return 0x8214F5B4;
		  /* 8214F5B4h */ case   15:  		/* ori R24, R3, 1 */
		/* 8214F5B4h case   15:*/		cpu::op::ori<0>(regs,&regs.R24,regs.R3,0x1);
		/* 8214F5B4h case   15:*/		return 0x8214F5B8;
	}
	return 0x8214F5B8;
} // Block from 8214F578h-8214F5B8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8214F5B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F5B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F5B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F5B8);
		  /* 8214F5B8h */ case    0:  		/* lis R11, -32253 */
		/* 8214F5B8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214F5B8h case    0:*/		return 0x8214F5BC;
		  /* 8214F5BCh */ case    1:  		/* mr R3, R30 */
		/* 8214F5BCh case    1:*/		regs.R3 = regs.R30;
		/* 8214F5BCh case    1:*/		return 0x8214F5C0;
		  /* 8214F5C0h */ case    2:  		/* addi R29, R11, 28332 */
		/* 8214F5C0h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6EAC);
		/* 8214F5C0h case    2:*/		return 0x8214F5C4;
		  /* 8214F5C4h */ case    3:  		/* mr R4, R29 */
		/* 8214F5C4h case    3:*/		regs.R4 = regs.R29;
		/* 8214F5C4h case    3:*/		return 0x8214F5C8;
		  /* 8214F5C8h */ case    4:  		/* bl -2840 */
		/* 8214F5C8h case    4:*/		regs.LR = 0x8214F5CC; return 0x8214EAB0;
		/* 8214F5C8h case    4:*/		return 0x8214F5CC;
		  /* 8214F5CCh */ case    5:  		/* lis R11, -32256 */
		/* 8214F5CCh case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8214F5CCh case    5:*/		return 0x8214F5D0;
		  /* 8214F5D0h */ case    6:  		/* mr R3, R30 */
		/* 8214F5D0h case    6:*/		regs.R3 = regs.R30;
		/* 8214F5D0h case    6:*/		return 0x8214F5D4;
		  /* 8214F5D4h */ case    7:  		/* addi R28, R11, 17768 */
		/* 8214F5D4h case    7:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x4568);
		/* 8214F5D4h case    7:*/		return 0x8214F5D8;
		  /* 8214F5D8h */ case    8:  		/* mr R4, R28 */
		/* 8214F5D8h case    8:*/		regs.R4 = regs.R28;
		/* 8214F5D8h case    8:*/		return 0x8214F5DC;
		  /* 8214F5DCh */ case    9:  		/* bl -5572 */
		/* 8214F5DCh case    9:*/		regs.LR = 0x8214F5E0; return 0x8214E018;
		/* 8214F5DCh case    9:*/		return 0x8214F5E0;
		  /* 8214F5E0h */ case   10:  		/* addi R10, R1, 128 */
		/* 8214F5E0h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 8214F5E0h case   10:*/		return 0x8214F5E4;
		  /* 8214F5E4h */ case   11:  		/* li R11, 0 */
		/* 8214F5E4h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8214F5E4h case   11:*/		return 0x8214F5E8;
		  /* 8214F5E8h */ case   12:  		/* cmpwi CR6, R27, 0 */
		/* 8214F5E8h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 8214F5E8h case   12:*/		return 0x8214F5EC;
		  /* 8214F5ECh */ case   13:  		/* std R11, <#[R10]> */
		/* 8214F5ECh case   13:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8214F5ECh case   13:*/		return 0x8214F5F0;
		  /* 8214F5F0h */ case   14:  		/* bc 4, CR6_EQ, 44 */
		/* 8214F5F0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8214F61C;  }
		/* 8214F5F0h case   14:*/		return 0x8214F5F4;
		  /* 8214F5F4h */ case   15:  		/* lwz R10, <#[R31 + 24]> */
		/* 8214F5F4h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 8214F5F4h case   15:*/		return 0x8214F5F8;
		  /* 8214F5F8h */ case   16:  		/* addi R9, R31, 36 */
		/* 8214F5F8h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x24);
		/* 8214F5F8h case   16:*/		return 0x8214F5FC;
		  /* 8214F5FCh */ case   17:  		/* lwz R8, <#[R31 + 28]> */
		/* 8214F5FCh case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 8214F5FCh case   17:*/		return 0x8214F600;
		  /* 8214F600h */ case   18:  		/* addi R10, R10, 9 */
		/* 8214F600h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x9);
		/* 8214F600h case   18:*/		return 0x8214F604;
		  /* 8214F604h */ case   19:  		/* stw R9, <#[R25]> */
		/* 8214F604h case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R25 + 0x00000000) );
		/* 8214F604h case   19:*/		return 0x8214F608;
		  /* 8214F608h */ case   20:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8214F608h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8214F608h case   20:*/		return 0x8214F60C;
		  /* 8214F60Ch */ case   21:  		/* add R10, R10, R31 */
		/* 8214F60Ch case   21:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R31);
		/* 8214F60Ch case   21:*/		return 0x8214F610;
		  /* 8214F610h */ case   22:  		/* stw R8, <#[R1 + 128]> */
		/* 8214F610h case   22:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000080) );
		/* 8214F610h case   22:*/		return 0x8214F614;
		  /* 8214F614h */ case   23:  		/* stw R10, <#[R1 + 132]> */
		/* 8214F614h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000084) );
		/* 8214F614h case   23:*/		return 0x8214F618;
		  /* 8214F618h */ case   24:  		/* b 12 */
		/* 8214F618h case   24:*/		return 0x8214F624;
		/* 8214F618h case   24:*/		return 0x8214F61C;
	}
	return 0x8214F61C;
} // Block from 8214F5B8h-8214F61Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 8214F61Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F61C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F61C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F61C);
		  /* 8214F61Ch */ case    0:  		/* addi R10, R31, 32 */
		/* 8214F61Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x20);
		/* 8214F61Ch case    0:*/		return 0x8214F620;
		  /* 8214F620h */ case    1:  		/* stw R10, <#[R25]> */
		/* 8214F620h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R25 + 0x00000000) );
		/* 8214F620h case    1:*/		return 0x8214F624;
	}
	return 0x8214F624;
} // Block from 8214F61Ch-8214F624h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214F624h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F624( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F624) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F624);
		  /* 8214F624h */ case    0:  		/* lis R10, -32235 */
		/* 8214F624h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8215);
		/* 8214F624h case    0:*/		return 0x8214F628;
		  /* 8214F628h */ case    1:  		/* lwz R4, <#[R31 + 12]> */
		/* 8214F628h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000000C) );
		/* 8214F628h case    1:*/		return 0x8214F62C;
		  /* 8214F62Ch */ case    2:  		/* lis R9, -32235 */
		/* 8214F62Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8215);
		/* 8214F62Ch case    2:*/		return 0x8214F630;
		  /* 8214F630h */ case    3:  		/* lwz R3, <#[R31 + 8]> */
		/* 8214F630h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 8214F630h case    3:*/		return 0x8214F634;
		  /* 8214F634h */ case    4:  		/* addi R6, R10, -7616 */
		/* 8214F634h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFE240);
		/* 8214F634h case    4:*/		return 0x8214F638;
		  /* 8214F638h */ case    5:  		/* stw R30, <#[R1 + 100]> */
		/* 8214F638h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000064) );
		/* 8214F638h case    5:*/		return 0x8214F63C;
		  /* 8214F63Ch */ case    6:  		/* addi R10, R1, 128 */
		/* 8214F63Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 8214F63Ch case    6:*/		return 0x8214F640;
		  /* 8214F640h */ case    7:  		/* stw R24, <#[R1 + 84]> */
		/* 8214F640h case    7:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000054) );
		/* 8214F640h case    7:*/		return 0x8214F644;
		  /* 8214F644h */ case    8:  		/* stw R6, <#[R1 + 92]> */
		/* 8214F644h case    8:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214F644h case    8:*/		return 0x8214F648;
		  /* 8214F648h */ case    9:  		/* addi R9, R9, -14232 */
		/* 8214F648h case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFC868);
		/* 8214F648h case    9:*/		return 0x8214F64C;
		  /* 8214F64Ch */ case   10:  		/* li R8, 0 */
		/* 8214F64Ch case   10:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8214F64Ch case   10:*/		return 0x8214F650;
		  /* 8214F650h */ case   11:  		/* stw R11, <#[R1 + 116]> */
		/* 8214F650h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 8214F650h case   11:*/		return 0x8214F654;
		  /* 8214F654h */ case   12:  		/* li R7, 0 */
		/* 8214F654h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8214F654h case   12:*/		return 0x8214F658;
		  /* 8214F658h */ case   13:  		/* stw R11, <#[R1 + 108]> */
		/* 8214F658h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 8214F658h case   13:*/		return 0x8214F65C;
		  /* 8214F65Ch */ case   14:  		/* mr R6, R26 */
		/* 8214F65Ch case   14:*/		regs.R6 = regs.R26;
		/* 8214F65Ch case   14:*/		return 0x8214F660;
		  /* 8214F660h */ case   15:  		/* mr R5, R23 */
		/* 8214F660h case   15:*/		regs.R5 = regs.R23;
		/* 8214F660h case   15:*/		return 0x8214F664;
		  /* 8214F664h */ case   16:  		/* bl 1168524 */
		/* 8214F664h case   16:*/		regs.LR = 0x8214F668; return 0x8226CAF0;
		/* 8214F664h case   16:*/		return 0x8214F668;
		  /* 8214F668h */ case   17:  		/* mr R31, R3 */
		/* 8214F668h case   17:*/		regs.R31 = regs.R3;
		/* 8214F668h case   17:*/		return 0x8214F66C;
		  /* 8214F66Ch */ case   18:  		/* mr R4, R29 */
		/* 8214F66Ch case   18:*/		regs.R4 = regs.R29;
		/* 8214F66Ch case   18:*/		return 0x8214F670;
		  /* 8214F670h */ case   19:  		/* mr R3, R30 */
		/* 8214F670h case   19:*/		regs.R3 = regs.R30;
		/* 8214F670h case   19:*/		return 0x8214F674;
		  /* 8214F674h */ case   20:  		/* bl -3012 */
		/* 8214F674h case   20:*/		regs.LR = 0x8214F678; return 0x8214EAB0;
		/* 8214F674h case   20:*/		return 0x8214F678;
		  /* 8214F678h */ case   21:  		/* mr R4, R28 */
		/* 8214F678h case   21:*/		regs.R4 = regs.R28;
		/* 8214F678h case   21:*/		return 0x8214F67C;
		  /* 8214F67Ch */ case   22:  		/* mr R3, R30 */
		/* 8214F67Ch case   22:*/		regs.R3 = regs.R30;
		/* 8214F67Ch case   22:*/		return 0x8214F680;
		  /* 8214F680h */ case   23:  		/* bl -5736 */
		/* 8214F680h case   23:*/		regs.LR = 0x8214F684; return 0x8214E018;
		/* 8214F680h case   23:*/		return 0x8214F684;
		  /* 8214F684h */ case   24:  		/* cmpwi CR6, R31, 0 */
		/* 8214F684h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000000);
		/* 8214F684h case   24:*/		return 0x8214F688;
		  /* 8214F688h */ case   25:  		/* mr R3, R31 */
		/* 8214F688h case   25:*/		regs.R3 = regs.R31;
		/* 8214F688h case   25:*/		return 0x8214F68C;
		  /* 8214F68Ch */ case   26:  		/* bc 12, CR6_LT, 8 */
		/* 8214F68Ch case   26:*/		if ( regs.CR[6].lt ) { return 0x8214F694;  }
		/* 8214F68Ch case   26:*/		return 0x8214F690;
	}
	return 0x8214F690;
} // Block from 8214F624h-8214F690h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8214F690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F690);
		  /* 8214F690h */ case    0:  		/* li R3, 0 */
		/* 8214F690h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214F690h case    0:*/		return 0x8214F694;
	}
	return 0x8214F694;
} // Block from 8214F690h-8214F694h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214F694h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F694( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F694) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F694);
		  /* 8214F694h */ case    0:  		/* addi R1, R1, 224 */
		/* 8214F694h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 8214F694h case    0:*/		return 0x8214F698;
		  /* 8214F698h */ case    1:  		/* b -779268 */
		/* 8214F698h case    1:*/		return 0x82091294;
		/* 8214F698h case    1:*/		return 0x8214F69C;
		  /* 8214F69Ch */ case    2:  		/* nop */
		/* 8214F69Ch case    2:*/		cpu::op::nop();
		/* 8214F69Ch case    2:*/		return 0x8214F6A0;
	}
	return 0x8214F6A0;
} // Block from 8214F694h-8214F6A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214F6A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F6A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F6A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F6A0);
		  /* 8214F6A0h */ case    0:  		/* mfspr R12, LR */
		/* 8214F6A0h case    0:*/		regs.R12 = regs.LR;
		/* 8214F6A0h case    0:*/		return 0x8214F6A4;
		  /* 8214F6A4h */ case    1:  		/* bl -779340 */
		/* 8214F6A4h case    1:*/		regs.LR = 0x8214F6A8; return 0x82091258;
		/* 8214F6A4h case    1:*/		return 0x8214F6A8;
		  /* 8214F6A8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8214F6A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8214F6A8h case    2:*/		return 0x8214F6AC;
		  /* 8214F6ACh */ case    3:  		/* lis R11, -32253 */
		/* 8214F6ACh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214F6ACh case    3:*/		return 0x8214F6B0;
		  /* 8214F6B0h */ case    4:  		/* mr R30, R3 */
		/* 8214F6B0h case    4:*/		regs.R30 = regs.R3;
		/* 8214F6B0h case    4:*/		return 0x8214F6B4;
		  /* 8214F6B4h */ case    5:  		/* mr R31, R4 */
		/* 8214F6B4h case    5:*/		regs.R31 = regs.R4;
		/* 8214F6B4h case    5:*/		return 0x8214F6B8;
		  /* 8214F6B8h */ case    6:  		/* mr R3, R4 */
		/* 8214F6B8h case    6:*/		regs.R3 = regs.R4;
		/* 8214F6B8h case    6:*/		return 0x8214F6BC;
		  /* 8214F6BCh */ case    7:  		/* addi R4, R11, 28396 */
		/* 8214F6BCh case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6EEC);
		/* 8214F6BCh case    7:*/		return 0x8214F6C0;
		  /* 8214F6C0h */ case    8:  		/* bl -5800 */
		/* 8214F6C0h case    8:*/		regs.LR = 0x8214F6C4; return 0x8214E018;
		/* 8214F6C0h case    8:*/		return 0x8214F6C4;
		  /* 8214F6C4h */ case    9:  		/* lis R11, -32253 */
		/* 8214F6C4h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214F6C4h case    9:*/		return 0x8214F6C8;
		  /* 8214F6C8h */ case   10:  		/* mr R3, R31 */
		/* 8214F6C8h case   10:*/		regs.R3 = regs.R31;
		/* 8214F6C8h case   10:*/		return 0x8214F6CC;
		  /* 8214F6CCh */ case   11:  		/* addi R29, R11, 28332 */
		/* 8214F6CCh case   11:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6EAC);
		/* 8214F6CCh case   11:*/		return 0x8214F6D0;
		  /* 8214F6D0h */ case   12:  		/* mr R4, R29 */
		/* 8214F6D0h case   12:*/		regs.R4 = regs.R29;
		/* 8214F6D0h case   12:*/		return 0x8214F6D4;
		  /* 8214F6D4h */ case   13:  		/* bl -3108 */
		/* 8214F6D4h case   13:*/		regs.LR = 0x8214F6D8; return 0x8214EAB0;
		/* 8214F6D4h case   13:*/		return 0x8214F6D8;
		  /* 8214F6D8h */ case   14:  		/* lis R11, -32256 */
		/* 8214F6D8h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8214F6D8h case   14:*/		return 0x8214F6DC;
		  /* 8214F6DCh */ case   15:  		/* mr R3, R31 */
		/* 8214F6DCh case   15:*/		regs.R3 = regs.R31;
		/* 8214F6DCh case   15:*/		return 0x8214F6E0;
		  /* 8214F6E0h */ case   16:  		/* addi R28, R11, 17768 */
		/* 8214F6E0h case   16:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x4568);
		/* 8214F6E0h case   16:*/		return 0x8214F6E4;
		  /* 8214F6E4h */ case   17:  		/* mr R4, R28 */
		/* 8214F6E4h case   17:*/		regs.R4 = regs.R28;
		/* 8214F6E4h case   17:*/		return 0x8214F6E8;
		  /* 8214F6E8h */ case   18:  		/* bl -5840 */
		/* 8214F6E8h case   18:*/		regs.LR = 0x8214F6EC; return 0x8214E018;
		/* 8214F6E8h case   18:*/		return 0x8214F6EC;
		  /* 8214F6ECh */ case   19:  		/* lis R11, -32253 */
		/* 8214F6ECh case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214F6ECh case   19:*/		return 0x8214F6F0;
		  /* 8214F6F0h */ case   20:  		/* mr R3, R31 */
		/* 8214F6F0h case   20:*/		regs.R3 = regs.R31;
		/* 8214F6F0h case   20:*/		return 0x8214F6F4;
		  /* 8214F6F4h */ case   21:  		/* lwz R5, <#[R30]> */
		/* 8214F6F4h case   21:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000000) );
		/* 8214F6F4h case   21:*/		return 0x8214F6F8;
		  /* 8214F6F8h */ case   22:  		/* addi R4, R11, 28376 */
		/* 8214F6F8h case   22:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6ED8);
		/* 8214F6F8h case   22:*/		return 0x8214F6FC;
		  /* 8214F6FCh */ case   23:  		/* bl -5860 */
		/* 8214F6FCh case   23:*/		regs.LR = 0x8214F700; return 0x8214E018;
		/* 8214F6FCh case   23:*/		return 0x8214F700;
		  /* 8214F700h */ case   24:  		/* mr R4, R29 */
		/* 8214F700h case   24:*/		regs.R4 = regs.R29;
		/* 8214F700h case   24:*/		return 0x8214F704;
		  /* 8214F704h */ case   25:  		/* mr R3, R31 */
		/* 8214F704h case   25:*/		regs.R3 = regs.R31;
		/* 8214F704h case   25:*/		return 0x8214F708;
		  /* 8214F708h */ case   26:  		/* bl -3160 */
		/* 8214F708h case   26:*/		regs.LR = 0x8214F70C; return 0x8214EAB0;
		/* 8214F708h case   26:*/		return 0x8214F70C;
		  /* 8214F70Ch */ case   27:  		/* mr R4, R28 */
		/* 8214F70Ch case   27:*/		regs.R4 = regs.R28;
		/* 8214F70Ch case   27:*/		return 0x8214F710;
		  /* 8214F710h */ case   28:  		/* mr R3, R31 */
		/* 8214F710h case   28:*/		regs.R3 = regs.R31;
		/* 8214F710h case   28:*/		return 0x8214F714;
		  /* 8214F714h */ case   29:  		/* bl -5884 */
		/* 8214F714h case   29:*/		regs.LR = 0x8214F718; return 0x8214E018;
		/* 8214F714h case   29:*/		return 0x8214F718;
		  /* 8214F718h */ case   30:  		/* lis R11, -32253 */
		/* 8214F718h case   30:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214F718h case   30:*/		return 0x8214F71C;
		  /* 8214F71Ch */ case   31:  		/* mr R3, R31 */
		/* 8214F71Ch case   31:*/		regs.R3 = regs.R31;
		/* 8214F71Ch case   31:*/		return 0x8214F720;
		  /* 8214F720h */ case   32:  		/* addi R4, R11, 28364 */
		/* 8214F720h case   32:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6ECC);
		/* 8214F720h case   32:*/		return 0x8214F724;
		  /* 8214F724h */ case   33:  		/* bl -5900 */
		/* 8214F724h case   33:*/		regs.LR = 0x8214F728; return 0x8214E018;
		/* 8214F724h case   33:*/		return 0x8214F728;
		  /* 8214F728h */ case   34:  		/* lwz R11, <#[R31]> */
		/* 8214F728h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8214F728h case   34:*/		return 0x8214F72C;
		  /* 8214F72Ch */ case   35:  		/* addi R4, R30, 8 */
		/* 8214F72Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R30,0x8);
		/* 8214F72Ch case   35:*/		return 0x8214F730;
		  /* 8214F730h */ case   36:  		/* lwz R3, <#[R31 + 4]> */
		/* 8214F730h case   36:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8214F730h case   36:*/		return 0x8214F734;
		  /* 8214F734h */ case   37:  		/* lwz R5, <#[R30 + 4]> */
		/* 8214F734h case   37:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000004) );
		/* 8214F734h case   37:*/		return 0x8214F738;
		  /* 8214F738h */ case   38:  		/* mtspr CTR, R11 */
		/* 8214F738h case   38:*/		regs.CTR = regs.R11;
		/* 8214F738h case   38:*/		return 0x8214F73C;
		  /* 8214F73Ch */ case   39:  		/* bcctrl 20, CR0_LT */
		/* 8214F73Ch case   39:*/		if ( 1 ) { regs.LR = 0x8214F740; return (uint32)regs.CTR; }
		/* 8214F73Ch case   39:*/		return 0x8214F740;
		  /* 8214F740h */ case   40:  		/* cmpwi CR0, R3, 0 */
		/* 8214F740h case   40:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8214F740h case   40:*/		return 0x8214F744;
		  /* 8214F744h */ case   41:  		/* bc 4, CR0_LT, 20 */
		/* 8214F744h case   41:*/		if ( !regs.CR[0].lt ) { return 0x8214F758;  }
		/* 8214F744h case   41:*/		return 0x8214F748;
		  /* 8214F748h */ case   42:  		/* lwz R11, <#[R31 + 8]> */
		/* 8214F748h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8214F748h case   42:*/		return 0x8214F74C;
		  /* 8214F74Ch */ case   43:  		/* cmpwi CR6, R11, 0 */
		/* 8214F74Ch case   43:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8214F74Ch case   43:*/		return 0x8214F750;
		  /* 8214F750h */ case   44:  		/* bc 12, CR6_LT, 8 */
		/* 8214F750h case   44:*/		if ( regs.CR[6].lt ) { return 0x8214F758;  }
		/* 8214F750h case   44:*/		return 0x8214F754;
		  /* 8214F754h */ case   45:  		/* stw R3, <#[R31 + 8]> */
		/* 8214F754h case   45:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000008) );
		/* 8214F754h case   45:*/		return 0x8214F758;
	}
	return 0x8214F758;
} // Block from 8214F6A0h-8214F758h (46 instructions)

//////////////////////////////////////////////////////
// Block at 8214F758h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F758);
		  /* 8214F758h */ case    0:  		/* lis R11, -32253 */
		/* 8214F758h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214F758h case    0:*/		return 0x8214F75C;
		  /* 8214F75Ch */ case    1:  		/* mr R3, R31 */
		/* 8214F75Ch case    1:*/		regs.R3 = regs.R31;
		/* 8214F75Ch case    1:*/		return 0x8214F760;
		  /* 8214F760h */ case    2:  		/* addi R4, R11, 25752 */
		/* 8214F760h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6498);
		/* 8214F760h case    2:*/		return 0x8214F764;
		  /* 8214F764h */ case    3:  		/* bl -5964 */
		/* 8214F764h case    3:*/		regs.LR = 0x8214F768; return 0x8214E018;
		/* 8214F764h case    3:*/		return 0x8214F768;
		  /* 8214F768h */ case    4:  		/* mr R4, R29 */
		/* 8214F768h case    4:*/		regs.R4 = regs.R29;
		/* 8214F768h case    4:*/		return 0x8214F76C;
		  /* 8214F76Ch */ case    5:  		/* mr R3, R31 */
		/* 8214F76Ch case    5:*/		regs.R3 = regs.R31;
		/* 8214F76Ch case    5:*/		return 0x8214F770;
		  /* 8214F770h */ case    6:  		/* bl -3264 */
		/* 8214F770h case    6:*/		regs.LR = 0x8214F774; return 0x8214EAB0;
		/* 8214F770h case    6:*/		return 0x8214F774;
		  /* 8214F774h */ case    7:  		/* mr R4, R28 */
		/* 8214F774h case    7:*/		regs.R4 = regs.R28;
		/* 8214F774h case    7:*/		return 0x8214F778;
		  /* 8214F778h */ case    8:  		/* mr R3, R31 */
		/* 8214F778h case    8:*/		regs.R3 = regs.R31;
		/* 8214F778h case    8:*/		return 0x8214F77C;
		  /* 8214F77Ch */ case    9:  		/* bl -5988 */
		/* 8214F77Ch case    9:*/		regs.LR = 0x8214F780; return 0x8214E018;
		/* 8214F77Ch case    9:*/		return 0x8214F780;
		  /* 8214F780h */ case   10:  		/* li R3, 0 */
		/* 8214F780h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214F780h case   10:*/		return 0x8214F784;
		  /* 8214F784h */ case   11:  		/* addi R1, R1, 128 */
		/* 8214F784h case   11:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8214F784h case   11:*/		return 0x8214F788;
		  /* 8214F788h */ case   12:  		/* b -779488 */
		/* 8214F788h case   12:*/		return 0x820912A8;
		/* 8214F788h case   12:*/		return 0x8214F78C;
		  /* 8214F78Ch */ case   13:  		/* nop */
		/* 8214F78Ch case   13:*/		cpu::op::nop();
		/* 8214F78Ch case   13:*/		return 0x8214F790;
	}
	return 0x8214F790;
} // Block from 8214F758h-8214F790h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8214F790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F790);
		  /* 8214F790h */ case    0:  		/* mfspr R12, LR */
		/* 8214F790h case    0:*/		regs.R12 = regs.LR;
		/* 8214F790h case    0:*/		return 0x8214F794;
		  /* 8214F794h */ case    1:  		/* bl -779632 */
		/* 8214F794h case    1:*/		regs.LR = 0x8214F798; return 0x82091224;
		/* 8214F794h case    1:*/		return 0x8214F798;
		  /* 8214F798h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 8214F798h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 8214F798h case    2:*/		return 0x8214F79C;
		  /* 8214F79Ch */ case    3:  		/* mr R29, R7 */
		/* 8214F79Ch case    3:*/		regs.R29 = regs.R7;
		/* 8214F79Ch case    3:*/		return 0x8214F7A0;
		  /* 8214F7A0h */ case    4:  		/* mr R9, R6 */
		/* 8214F7A0h case    4:*/		regs.R9 = regs.R6;
		/* 8214F7A0h case    4:*/		return 0x8214F7A4;
		  /* 8214F7A4h */ case    5:  		/* mr R30, R3 */
		/* 8214F7A4h case    5:*/		regs.R30 = regs.R3;
		/* 8214F7A4h case    5:*/		return 0x8214F7A8;
		  /* 8214F7A8h */ case    6:  		/* mr R31, R4 */
		/* 8214F7A8h case    6:*/		regs.R31 = regs.R4;
		/* 8214F7A8h case    6:*/		return 0x8214F7AC;
		  /* 8214F7ACh */ case    7:  		/* mr R8, R5 */
		/* 8214F7ACh case    7:*/		regs.R8 = regs.R5;
		/* 8214F7ACh case    7:*/		return 0x8214F7B0;
		  /* 8214F7B0h */ case    8:  		/* mr R7, R4 */
		/* 8214F7B0h case    8:*/		regs.R7 = regs.R4;
		/* 8214F7B0h case    8:*/		return 0x8214F7B4;
		  /* 8214F7B4h */ case    9:  		/* mr R6, R3 */
		/* 8214F7B4h case    9:*/		regs.R6 = regs.R3;
		/* 8214F7B4h case    9:*/		return 0x8214F7B8;
		  /* 8214F7B8h */ case   10:  		/* addi R10, R1, 96 */
		/* 8214F7B8h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 8214F7B8h case   10:*/		return 0x8214F7BC;
		  /* 8214F7BCh */ case   11:  		/* li R5, 32 */
		/* 8214F7BCh case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x20);
		/* 8214F7BCh case   11:*/		return 0x8214F7C0;
		  /* 8214F7C0h */ case   12:  		/* li R4, 1 */
		/* 8214F7C0h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8214F7C0h case   12:*/		return 0x8214F7C4;
		  /* 8214F7C4h */ case   13:  		/* mr R3, R29 */
		/* 8214F7C4h case   13:*/		regs.R3 = regs.R29;
		/* 8214F7C4h case   13:*/		return 0x8214F7C8;
		  /* 8214F7C8h */ case   14:  		/* bl -592 */
		/* 8214F7C8h case   14:*/		regs.LR = 0x8214F7CC; return 0x8214F578;
		/* 8214F7C8h case   14:*/		return 0x8214F7CC;
		  /* 8214F7CCh */ case   15:  		/* or. R15, R3, R3 */
		/* 8214F7CCh case   15:*/		cpu::op::or<1>(regs,&regs.R15,regs.R3,regs.R3);
		/* 8214F7CCh case   15:*/		return 0x8214F7D0;
		  /* 8214F7D0h */ case   16:  		/* bc 12, CR0_LT, 564 */
		/* 8214F7D0h case   16:*/		if ( regs.CR[0].lt ) { return 0x8214FA04;  }
		/* 8214F7D0h case   16:*/		return 0x8214F7D4;
		  /* 8214F7D4h */ case   17:  		/* rlwinm. R11, R29, 0, 23, 23 */
		/* 8214F7D4h case   17:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R29);
		/* 8214F7D4h case   17:*/		return 0x8214F7D8;
		  /* 8214F7D8h */ case   18:  		/* bc 12, CR0_EQ, 556 */
		/* 8214F7D8h case   18:*/		if ( regs.CR[0].eq ) { return 0x8214FA04;  }
		/* 8214F7D8h case   18:*/		return 0x8214F7DC;
		  /* 8214F7DCh */ case   19:  		/* lis R11, -32253 */
		/* 8214F7DCh case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214F7DCh case   19:*/		return 0x8214F7E0;
		  /* 8214F7E0h */ case   20:  		/* mr R3, R31 */
		/* 8214F7E0h case   20:*/		regs.R3 = regs.R31;
		/* 8214F7E0h case   20:*/		return 0x8214F7E4;
		  /* 8214F7E4h */ case   21:  		/* addi R29, R11, 28332 */
		/* 8214F7E4h case   21:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x6EAC);
		/* 8214F7E4h case   21:*/		return 0x8214F7E8;
		  /* 8214F7E8h */ case   22:  		/* mr R4, R29 */
		/* 8214F7E8h case   22:*/		regs.R4 = regs.R29;
		/* 8214F7E8h case   22:*/		return 0x8214F7EC;
		  /* 8214F7ECh */ case   23:  		/* bl -3388 */
		/* 8214F7ECh case   23:*/		regs.LR = 0x8214F7F0; return 0x8214EAB0;
		/* 8214F7ECh case   23:*/		return 0x8214F7F0;
		  /* 8214F7F0h */ case   24:  		/* lis R11, -32256 */
		/* 8214F7F0h case   24:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8214F7F0h case   24:*/		return 0x8214F7F4;
		  /* 8214F7F4h */ case   25:  		/* mr R3, R31 */
		/* 8214F7F4h case   25:*/		regs.R3 = regs.R31;
		/* 8214F7F4h case   25:*/		return 0x8214F7F8;
		  /* 8214F7F8h */ case   26:  		/* addi R28, R11, 17768 */
		/* 8214F7F8h case   26:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x4568);
		/* 8214F7F8h case   26:*/		return 0x8214F7FC;
		  /* 8214F7FCh */ case   27:  		/* mr R4, R28 */
		/* 8214F7FCh case   27:*/		regs.R4 = regs.R28;
		/* 8214F7FCh case   27:*/		return 0x8214F800;
		  /* 8214F800h */ case   28:  		/* bl -6120 */
		/* 8214F800h case   28:*/		regs.LR = 0x8214F804; return 0x8214E018;
		/* 8214F800h case   28:*/		return 0x8214F804;
		  /* 8214F804h */ case   29:  		/* lis R11, -32253 */
		/* 8214F804h case   29:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214F804h case   29:*/		return 0x8214F808;
		  /* 8214F808h */ case   30:  		/* mr R3, R31 */
		/* 8214F808h case   30:*/		regs.R3 = regs.R31;
		/* 8214F808h case   30:*/		return 0x8214F80C;
		  /* 8214F80Ch */ case   31:  		/* addi R4, R11, 28356 */
		/* 8214F80Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6EC4);
		/* 8214F80Ch case   31:*/		return 0x8214F810;
		  /* 8214F810h */ case   32:  		/* bl -3424 */
		/* 8214F810h case   32:*/		regs.LR = 0x8214F814; return 0x8214EAB0;
		/* 8214F810h case   32:*/		return 0x8214F814;
		  /* 8214F814h */ case   33:  		/* lis R11, -32253 */
		/* 8214F814h case   33:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214F814h case   33:*/		return 0x8214F818;
		  /* 8214F818h */ case   34:  		/* mr R3, R31 */
		/* 8214F818h case   34:*/		regs.R3 = regs.R31;
		/* 8214F818h case   34:*/		return 0x8214F81C;
		  /* 8214F81Ch */ case   35:  		/* lhz R6, <#[R30 + 24]> */
		/* 8214F81Ch case   35:*/		cpu::mem::load16z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000018) );
		/* 8214F81Ch case   35:*/		return 0x8214F820;
		  /* 8214F820h */ case   36:  		/* addi R4, R11, 28576 */
		/* 8214F820h case   36:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6FA0);
		/* 8214F820h case   36:*/		return 0x8214F824;
		  /* 8214F824h */ case   37:  		/* lhz R5, <#[R30 + 26]> */
		/* 8214F824h case   37:*/		cpu::mem::load16z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000001A) );
		/* 8214F824h case   37:*/		return 0x8214F828;
		  /* 8214F828h */ case   38:  		/* bl -6160 */
		/* 8214F828h case   38:*/		regs.LR = 0x8214F82C; return 0x8214E018;
		/* 8214F828h case   38:*/		return 0x8214F82C;
		  /* 8214F82Ch */ case   39:  		/* mr R4, R29 */
		/* 8214F82Ch case   39:*/		regs.R4 = regs.R29;
		/* 8214F82Ch case   39:*/		return 0x8214F830;
		  /* 8214F830h */ case   40:  		/* mr R3, R31 */
		/* 8214F830h case   40:*/		regs.R3 = regs.R31;
		/* 8214F830h case   40:*/		return 0x8214F834;
		  /* 8214F834h */ case   41:  		/* bl -3460 */
		/* 8214F834h case   41:*/		regs.LR = 0x8214F838; return 0x8214EAB0;
		/* 8214F834h case   41:*/		return 0x8214F838;
		  /* 8214F838h */ case   42:  		/* mr R4, R28 */
		/* 8214F838h case   42:*/		regs.R4 = regs.R28;
		/* 8214F838h case   42:*/		return 0x8214F83C;
		  /* 8214F83Ch */ case   43:  		/* mr R3, R31 */
		/* 8214F83Ch case   43:*/		regs.R3 = regs.R31;
		/* 8214F83Ch case   43:*/		return 0x8214F840;
		  /* 8214F840h */ case   44:  		/* bl -6184 */
		/* 8214F840h case   44:*/		regs.LR = 0x8214F844; return 0x8214E018;
		/* 8214F840h case   44:*/		return 0x8214F844;
		  /* 8214F844h */ case   45:  		/* lis R11, -32253 */
		/* 8214F844h case   45:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214F844h case   45:*/		return 0x8214F848;
		  /* 8214F848h */ case   46:  		/* mr R3, R31 */
		/* 8214F848h case   46:*/		regs.R3 = regs.R31;
		/* 8214F848h case   46:*/		return 0x8214F84C;
		  /* 8214F84Ch */ case   47:  		/* addi R4, R11, 28524 */
		/* 8214F84Ch case   47:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6F6C);
		/* 8214F84Ch case   47:*/		return 0x8214F850;
		  /* 8214F850h */ case   48:  		/* lwz R11, <#[R30 + 28]> */
		/* 8214F850h case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 8214F850h case   48:*/		return 0x8214F854;
		  /* 8214F854h */ case   49:  		/* rlwinm R7, R11, 27, 31, 31 */
		/* 8214F854h case   49:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R7,regs.R11);
		/* 8214F854h case   49:*/		return 0x8214F858;
		  /* 8214F858h */ case   50:  		/* rlwinm R6, R11, 28, 31, 31 */
		/* 8214F858h case   50:*/		cpu::op::rlwinm<0,28,31,31>(regs,&regs.R6,regs.R11);
		/* 8214F858h case   50:*/		return 0x8214F85C;
		  /* 8214F85Ch */ case   51:  		/* rlwinm R5, R11, 0, 28, 31 */
		/* 8214F85Ch case   51:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R5,regs.R11);
		/* 8214F85Ch case   51:*/		return 0x8214F860;
		  /* 8214F860h */ case   52:  		/* bl -6216 */
		/* 8214F860h case   52:*/		regs.LR = 0x8214F864; return 0x8214E018;
		/* 8214F860h case   52:*/		return 0x8214F864;
		  /* 8214F864h */ case   53:  		/* mr R4, R29 */
		/* 8214F864h case   53:*/		regs.R4 = regs.R29;
		/* 8214F864h case   53:*/		return 0x8214F868;
		  /* 8214F868h */ case   54:  		/* mr R3, R31 */
		/* 8214F868h case   54:*/		regs.R3 = regs.R31;
		/* 8214F868h case   54:*/		return 0x8214F86C;
		  /* 8214F86Ch */ case   55:  		/* bl -3516 */
		/* 8214F86Ch case   55:*/		regs.LR = 0x8214F870; return 0x8214EAB0;
		/* 8214F86Ch case   55:*/		return 0x8214F870;
		  /* 8214F870h */ case   56:  		/* mr R4, R28 */
		/* 8214F870h case   56:*/		regs.R4 = regs.R28;
		/* 8214F870h case   56:*/		return 0x8214F874;
		  /* 8214F874h */ case   57:  		/* mr R3, R31 */
		/* 8214F874h case   57:*/		regs.R3 = regs.R31;
		/* 8214F874h case   57:*/		return 0x8214F878;
		  /* 8214F878h */ case   58:  		/* bl -6240 */
		/* 8214F878h case   58:*/		regs.LR = 0x8214F87C; return 0x8214E018;
		/* 8214F878h case   58:*/		return 0x8214F87C;
		  /* 8214F87Ch */ case   59:  		/* lwz R11, <#[R30 + 20]> */
		/* 8214F87Ch case   59:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 8214F87Ch case   59:*/		return 0x8214F880;
	}
	return 0x8214F880;
} // Block from 8214F790h-8214F880h (60 instructions)

//////////////////////////////////////////////////////
// Block at 8214F880h
// Function '?R500DoVertexShader@XGRAPHICS@@YAJPBKKPAKK1KPAXP6AX2HKPBD@ZPAUID3DXConstantTable@@PAU_UCODE_DEBUGGER_PARAMETERS@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F880( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F880) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F880);
		  /* 8214F880h */ case    0:  		/* rlwinm. R17, R11, 27, 27, 31 */
		/* 8214F880h case    0:*/		cpu::op::rlwinm<1,27,27,31>(regs,&regs.R17,regs.R11);
		/* 8214F880h case    0:*/		return 0x8214F884;
		  /* 8214F884h */ case    1:  		/* bc 12, CR0_EQ, 368 */
		/* 8214F884h case    1:*/		if ( regs.CR[0].eq ) { return 0x8214F9F4;  }
		/* 8214F884h case    1:*/		return 0x8214F888;
		  /* 8214F888h */ case    2:  		/* lis R11, -32253 */
		/* 8214F888h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214F888h case    2:*/		return 0x8214F88C;
		  /* 8214F88Ch */ case    3:  		/* lwz R18, <#[R1 + 96]> */
		/* 8214F88Ch case    3:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x00000060) );
		/* 8214F88Ch case    3:*/		return 0x8214F890;
		  /* 8214F890h */ case    4:  		/* mr R3, R31 */
		/* 8214F890h case    4:*/		regs.R3 = regs.R31;
		/* 8214F890h case    4:*/		return 0x8214F894;
		  /* 8214F894h */ case    5:  		/* addi R4, R11, 28496 */
		/* 8214F894h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6F50);
		/* 8214F894h case    5:*/		return 0x8214F898;
		  /* 8214F898h */ case    6:  		/* bl -6272 */
		/* 8214F898h case    6:*/		regs.LR = 0x8214F89C; return 0x8214E018;
		/* 8214F898h case    6:*/		return 0x8214F89C;
		  /* 8214F89Ch */ case    7:  		/* mr R4, R29 */
		/* 8214F89Ch case    7:*/		regs.R4 = regs.R29;
		/* 8214F89Ch case    7:*/		return 0x8214F8A0;
		  /* 8214F8A0h */ case    8:  		/* mr R3, R31 */
		/* 8214F8A0h case    8:*/		regs.R3 = regs.R31;
		/* 8214F8A0h case    8:*/		return 0x8214F8A4;
		  /* 8214F8A4h */ case    9:  		/* bl -3572 */
		/* 8214F8A4h case    9:*/		regs.LR = 0x8214F8A8; return 0x8214EAB0;
		/* 8214F8A4h case    9:*/		return 0x8214F8A8;
		  /* 8214F8A8h */ case   10:  		/* mr R4, R28 */
		/* 8214F8A8h case   10:*/		regs.R4 = regs.R28;
		/* 8214F8A8h case   10:*/		return 0x8214F8AC;
		  /* 8214F8ACh */ case   11:  		/* mr R3, R31 */
		/* 8214F8ACh case   11:*/		regs.R3 = regs.R31;
		/* 8214F8ACh case   11:*/		return 0x8214F8B0;
		  /* 8214F8B0h */ case   12:  		/* bl -6296 */
		/* 8214F8B0h case   12:*/		regs.LR = 0x8214F8B4; return 0x8214E018;
		/* 8214F8B0h case   12:*/		return 0x8214F8B4;
		  /* 8214F8B4h */ case   13:  		/* li R16, 0 */
		/* 8214F8B4h case   13:*/		cpu::op::li<0>(regs,&regs.R16,0x0);
		/* 8214F8B4h case   13:*/		return 0x8214F8B8;
		  /* 8214F8B8h */ case   14:  		/* li R27, 0 */
		/* 8214F8B8h case   14:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8214F8B8h case   14:*/		return 0x8214F8BC;
		  /* 8214F8BCh */ case   15:  		/* cmplwi CR6, R17, 0 */
		/* 8214F8BCh case   15:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 8214F8BCh case   15:*/		return 0x8214F8C0;
		  /* 8214F8C0h */ case   16:  		/* bc 12, CR6_EQ, 284 */
		/* 8214F8C0h case   16:*/		if ( regs.CR[6].eq ) { return 0x8214F9DC;  }
		/* 8214F8C0h case   16:*/		return 0x8214F8C4;
		  /* 8214F8C4h */ case   17:  		/* lis R9, -32253 */
		/* 8214F8C4h case   17:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8214F8C4h case   17:*/		return 0x8214F8C8;
		  /* 8214F8C8h */ case   18:  		/* lis R8, -32253 */
		/* 8214F8C8h case   18:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 8214F8C8h case   18:*/		return 0x8214F8CC;
		  /* 8214F8CCh */ case   19:  		/* lis R7, -32217 */
		/* 8214F8CCh case   19:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8227);
		/* 8214F8CCh case   19:*/		return 0x8214F8D0;
		  /* 8214F8D0h */ case   20:  		/* lis R6, -32255 */
		/* 8214F8D0h case   20:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8201);
		/* 8214F8D0h case   20:*/		return 0x8214F8D4;
		  /* 8214F8D4h */ case   21:  		/* lis R5, -32255 */
		/* 8214F8D4h case   21:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8201);
		/* 8214F8D4h case   21:*/		return 0x8214F8D8;
		  /* 8214F8D8h */ case   22:  		/* lis R4, -32255 */
		/* 8214F8D8h case   22:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8201);
		/* 8214F8D8h case   22:*/		return 0x8214F8DC;
		  /* 8214F8DCh */ case   23:  		/* lis R10, -32256 */
		/* 8214F8DCh case   23:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8214F8DCh case   23:*/		return 0x8214F8E0;
		  /* 8214F8E0h */ case   24:  		/* lis R11, -32255 */
		/* 8214F8E0h case   24:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8214F8E0h case   24:*/		return 0x8214F8E4;
		  /* 8214F8E4h */ case   25:  		/* addi R23, R9, 28444 */
		/* 8214F8E4h case   25:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R9,0x6F1C);
		/* 8214F8E4h case   25:*/		return 0x8214F8E8;
		  /* 8214F8E8h */ case   26:  		/* addi R26, R8, 28416 */
		/* 8214F8E8h case   26:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R8,0x6F00);
		/* 8214F8E8h case   26:*/		return 0x8214F8EC;
		  /* 8214F8ECh */ case   27:  		/* addi R25, R7, 17440 */
		/* 8214F8ECh case   27:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R7,0x4420);
		/* 8214F8ECh case   27:*/		return 0x8214F8F0;
		  /* 8214F8F0h */ case   28:  		/* addi R22, R6, 12560 */
		/* 8214F8F0h case   28:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R6,0x3110);
		/* 8214F8F0h case   28:*/		return 0x8214F8F4;
		  /* 8214F8F4h */ case   29:  		/* addi R21, R5, 12556 */
		/* 8214F8F4h case   29:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R5,0x310C);
		/* 8214F8F4h case   29:*/		return 0x8214F8F8;
		  /* 8214F8F8h */ case   30:  		/* addi R20, R4, 12548 */
		/* 8214F8F8h case   30:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R4,0x3104);
		/* 8214F8F8h case   30:*/		return 0x8214F8FC;
		  /* 8214F8FCh */ case   31:  		/* addi R24, R10, 4485 */
		/* 8214F8FCh case   31:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R10,0x1185);
		/* 8214F8FCh case   31:*/		return 0x8214F900;
		  /* 8214F900h */ case   32:  		/* addi R19, R11, 12532 */
		/* 8214F900h case   32:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R11,0x30F4);
		/* 8214F900h case   32:*/		return 0x8214F904;
		  /* 8214F904h */ case   33:  		/* lwz R30, <#[R18]> */
		/* 8214F904h case   33:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R18 + 0x00000000) );
		/* 8214F904h case   33:*/		return 0x8214F908;
		  /* 8214F908h */ case   34:  		/* mr R8, R19 */
		/* 8214F908h case   34:*/		regs.R8 = regs.R19;
		/* 8214F908h case   34:*/		return 0x8214F90C;
		  /* 8214F90Ch */ case   35:  		/* rlwinm. R11, R30, 20, 28, 28 */
		/* 8214F90Ch case   35:*/		cpu::op::rlwinm<1,20,28,28>(regs,&regs.R11,regs.R30);
		/* 8214F90Ch case   35:*/		return 0x8214F910;
		  /* 8214F910h */ case   36:  		/* rlwinm R6, R30, 28, 28, 31 */
		/* 8214F910h case   36:*/		cpu::op::rlwinm<0,28,28,31>(regs,&regs.R6,regs.R30);
		/* 8214F910h case   36:*/		return 0x8214F914;
		  /* 8214F914h */ case   37:  		/* rlwinm R7, R30, 0, 28, 31 */
		/* 8214F914h case   37:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R30);
		/* 8214F914h case   37:*/		return 0x8214F918;
		  /* 8214F918h */ case   38:  		/* rlwinm R9, R30, 20, 28, 31 */
		/* 8214F918h case   38:*/		cpu::op::rlwinm<0,20,28,31>(regs,&regs.R9,regs.R30);
		/* 8214F918h case   38:*/		return 0x8214F91C;
		  /* 8214F91Ch */ case   39:  		/* bc 4, CR0_EQ, 8 */
		/* 8214F91Ch case   39:*/		if ( !regs.CR[0].eq ) { return 0x8214F924;  }
		/* 8214F91Ch case   39:*/		return 0x8214F920;
		  /* 8214F920h */ case   40:  		/* mr R8, R24 */
		/* 8214F920h case   40:*/		regs.R8 = regs.R24;
		/* 8214F920h case   40:*/		return 0x8214F924;
	}
	return 0x8214F924;
} // Block from 8214F880h-8214F924h (41 instructions)

//////////////////////////////////////////////////////
// Block at 8214F924h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F924( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F924) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F924);
		  /* 8214F924h */ case    0:  		/* rlwinm. R11, R9, 0, 29, 29 */
		/* 8214F924h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R9);
		/* 8214F924h case    0:*/		return 0x8214F928;
		  /* 8214F928h */ case    1:  		/* mr R11, R20 */
		/* 8214F928h case    1:*/		regs.R11 = regs.R20;
		/* 8214F928h case    1:*/		return 0x8214F92C;
		  /* 8214F92Ch */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 8214F92Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x8214F934;  }
		/* 8214F92Ch case    2:*/		return 0x8214F930;
		  /* 8214F930h */ case    3:  		/* mr R11, R24 */
		/* 8214F930h case    3:*/		regs.R11 = regs.R24;
		/* 8214F930h case    3:*/		return 0x8214F934;
	}
	return 0x8214F934;
} // Block from 8214F924h-8214F934h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214F934h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F934( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F934) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F934);
		  /* 8214F934h */ case    0:  		/* rlwinm. R10, R9, 0, 30, 30 */
		/* 8214F934h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R9);
		/* 8214F934h case    0:*/		return 0x8214F938;
		  /* 8214F938h */ case    1:  		/* mr R10, R21 */
		/* 8214F938h case    1:*/		regs.R10 = regs.R21;
		/* 8214F938h case    1:*/		return 0x8214F93C;
		  /* 8214F93Ch */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 8214F93Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x8214F944;  }
		/* 8214F93Ch case    2:*/		return 0x8214F940;
		  /* 8214F940h */ case    3:  		/* mr R10, R24 */
		/* 8214F940h case    3:*/		regs.R10 = regs.R24;
		/* 8214F940h case    3:*/		return 0x8214F944;
	}
	return 0x8214F944;
} // Block from 8214F934h-8214F944h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214F944h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F944( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F944) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F944);
		  /* 8214F944h */ case    0:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 8214F944h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 8214F944h case    0:*/		return 0x8214F948;
		  /* 8214F948h */ case    1:  		/* mr R9, R22 */
		/* 8214F948h case    1:*/		regs.R9 = regs.R22;
		/* 8214F948h case    1:*/		return 0x8214F94C;
		  /* 8214F94Ch */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 8214F94Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x8214F954;  }
		/* 8214F94Ch case    2:*/		return 0x8214F950;
		  /* 8214F950h */ case    3:  		/* mr R9, R24 */
		/* 8214F950h case    3:*/		regs.R9 = regs.R24;
		/* 8214F950h case    3:*/		return 0x8214F954;
	}
	return 0x8214F954;
} // Block from 8214F944h-8214F954h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214F954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F954);
		  /* 8214F954h */ case    0:  		/* rlwinm R6, R6, 2, 0, 29 */
		/* 8214F954h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R6);
		/* 8214F954h case    0:*/		return 0x8214F958;
		  /* 8214F958h */ case    1:  		/* stw R8, <#[R1 + 92]> */
		/* 8214F958h case    1:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214F958h case    1:*/		return 0x8214F95C;
		  /* 8214F95Ch */ case    2:  		/* mr R4, R26 */
		/* 8214F95Ch case    2:*/		regs.R4 = regs.R26;
		/* 8214F95Ch case    2:*/		return 0x8214F960;
		  /* 8214F960h */ case    3:  		/* stw R11, <#[R1 + 84]> */
		/* 8214F960h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8214F960h case    3:*/		return 0x8214F964;
		  /* 8214F964h */ case    4:  		/* rlwinm R8, R30, 24, 28, 31 */
		/* 8214F964h case    4:*/		cpu::op::rlwinm<0,24,28,31>(regs,&regs.R8,regs.R30);
		/* 8214F964h case    4:*/		return 0x8214F968;
		  /* 8214F968h */ case    5:  		/* mr R5, R27 */
		/* 8214F968h case    5:*/		regs.R5 = regs.R27;
		/* 8214F968h case    5:*/		return 0x8214F96C;
		  /* 8214F96Ch */ case    6:  		/* mr R3, R31 */
		/* 8214F96Ch case    6:*/		regs.R3 = regs.R31;
		/* 8214F96Ch case    6:*/		return 0x8214F970;
		  /* 8214F970h */ case    7:  		/* lwzx R6, <#[R6 + R25]> */
		/* 8214F970h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R25 + 0x00000000) );
		/* 8214F970h case    7:*/		return 0x8214F974;
		  /* 8214F974h */ case    8:  		/* bl -6492 */
		/* 8214F974h case    8:*/		regs.LR = 0x8214F978; return 0x8214E018;
		/* 8214F974h case    8:*/		return 0x8214F978;
		  /* 8214F978h */ case    9:  		/* mr R4, R29 */
		/* 8214F978h case    9:*/		regs.R4 = regs.R29;
		/* 8214F978h case    9:*/		return 0x8214F97C;
		  /* 8214F97Ch */ case   10:  		/* mr R3, R31 */
		/* 8214F97Ch case   10:*/		regs.R3 = regs.R31;
		/* 8214F97Ch case   10:*/		return 0x8214F980;
		  /* 8214F980h */ case   11:  		/* bl -3792 */
		/* 8214F980h case   11:*/		regs.LR = 0x8214F984; return 0x8214EAB0;
		/* 8214F980h case   11:*/		return 0x8214F984;
		  /* 8214F984h */ case   12:  		/* mr R4, R28 */
		/* 8214F984h case   12:*/		regs.R4 = regs.R28;
		/* 8214F984h case   12:*/		return 0x8214F988;
		  /* 8214F988h */ case   13:  		/* mr R3, R31 */
		/* 8214F988h case   13:*/		regs.R3 = regs.R31;
		/* 8214F988h case   13:*/		return 0x8214F98C;
		  /* 8214F98Ch */ case   14:  		/* bl -6516 */
		/* 8214F98Ch case   14:*/		regs.LR = 0x8214F990; return 0x8214E018;
		/* 8214F98Ch case   14:*/		return 0x8214F990;
		  /* 8214F990h */ case   15:  		/* cmplwi CR6, R27, 0 */
		/* 8214F990h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8214F990h case   15:*/		return 0x8214F994;
		  /* 8214F994h */ case   16:  		/* bc 12, CR6_EQ, 52 */
		/* 8214F994h case   16:*/		if ( regs.CR[6].eq ) { return 0x8214F9C8;  }
		/* 8214F994h case   16:*/		return 0x8214F998;
		  /* 8214F998h */ case   17:  		/* rlwinm R11, R30, 0, 24, 31 */
		/* 8214F998h case   17:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R30);
		/* 8214F998h case   17:*/		return 0x8214F99C;
		  /* 8214F99Ch */ case   18:  		/* cmplw CR6, R16, R11 */
		/* 8214F99Ch case   18:*/		cpu::op::cmplw<6>(regs,regs.R16,regs.R11);
		/* 8214F99Ch case   18:*/		return 0x8214F9A0;
		  /* 8214F9A0h */ case   19:  		/* bc 12, CR6_LT, 40 */
		/* 8214F9A0h case   19:*/		if ( regs.CR[6].lt ) { return 0x8214F9C8;  }
		/* 8214F9A0h case   19:*/		return 0x8214F9A4;
		  /* 8214F9A4h */ case   20:  		/* mr R4, R23 */
		/* 8214F9A4h case   20:*/		regs.R4 = regs.R23;
		/* 8214F9A4h case   20:*/		return 0x8214F9A8;
		  /* 8214F9A8h */ case   21:  		/* mr R3, R31 */
		/* 8214F9A8h case   21:*/		regs.R3 = regs.R31;
		/* 8214F9A8h case   21:*/		return 0x8214F9AC;
		  /* 8214F9ACh */ case   22:  		/* bl -6548 */
		/* 8214F9ACh case   22:*/		regs.LR = 0x8214F9B0; return 0x8214E018;
		/* 8214F9ACh case   22:*/		return 0x8214F9B0;
		  /* 8214F9B0h */ case   23:  		/* mr R4, R29 */
		/* 8214F9B0h case   23:*/		regs.R4 = regs.R29;
		/* 8214F9B0h case   23:*/		return 0x8214F9B4;
		  /* 8214F9B4h */ case   24:  		/* mr R3, R31 */
		/* 8214F9B4h case   24:*/		regs.R3 = regs.R31;
		/* 8214F9B4h case   24:*/		return 0x8214F9B8;
		  /* 8214F9B8h */ case   25:  		/* bl -3848 */
		/* 8214F9B8h case   25:*/		regs.LR = 0x8214F9BC; return 0x8214EAB0;
		/* 8214F9B8h case   25:*/		return 0x8214F9BC;
		  /* 8214F9BCh */ case   26:  		/* mr R4, R28 */
		/* 8214F9BCh case   26:*/		regs.R4 = regs.R28;
		/* 8214F9BCh case   26:*/		return 0x8214F9C0;
		  /* 8214F9C0h */ case   27:  		/* mr R3, R31 */
		/* 8214F9C0h case   27:*/		regs.R3 = regs.R31;
		/* 8214F9C0h case   27:*/		return 0x8214F9C4;
		  /* 8214F9C4h */ case   28:  		/* bl -6572 */
		/* 8214F9C4h case   28:*/		regs.LR = 0x8214F9C8; return 0x8214E018;
		/* 8214F9C4h case   28:*/		return 0x8214F9C8;
	}
	return 0x8214F9C8;
} // Block from 8214F954h-8214F9C8h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8214F9C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F9C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F9C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F9C8);
		  /* 8214F9C8h */ case    0:  		/* addi R27, R27, 1 */
		/* 8214F9C8h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 8214F9C8h case    0:*/		return 0x8214F9CC;
		  /* 8214F9CCh */ case    1:  		/* rlwinm R16, R30, 0, 24, 31 */
		/* 8214F9CCh case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R16,regs.R30);
		/* 8214F9CCh case    1:*/		return 0x8214F9D0;
		  /* 8214F9D0h */ case    2:  		/* addi R18, R18, 4 */
		/* 8214F9D0h case    2:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0x4);
		/* 8214F9D0h case    2:*/		return 0x8214F9D4;
		  /* 8214F9D4h */ case    3:  		/* cmplw CR6, R27, R17 */
		/* 8214F9D4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R17);
		/* 8214F9D4h case    3:*/		return 0x8214F9D8;
		  /* 8214F9D8h */ case    4:  		/* bc 12, CR6_LT, -212 */
		/* 8214F9D8h case    4:*/		if ( regs.CR[6].lt ) { return 0x8214F904;  }
		/* 8214F9D8h case    4:*/		return 0x8214F9DC;
	}
	return 0x8214F9DC;
} // Block from 8214F9C8h-8214F9DCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214F9DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F9DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F9DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F9DC);
		  /* 8214F9DCh */ case    0:  		/* mr R4, R29 */
		/* 8214F9DCh case    0:*/		regs.R4 = regs.R29;
		/* 8214F9DCh case    0:*/		return 0x8214F9E0;
		  /* 8214F9E0h */ case    1:  		/* mr R3, R31 */
		/* 8214F9E0h case    1:*/		regs.R3 = regs.R31;
		/* 8214F9E0h case    1:*/		return 0x8214F9E4;
		  /* 8214F9E4h */ case    2:  		/* bl -3892 */
		/* 8214F9E4h case    2:*/		regs.LR = 0x8214F9E8; return 0x8214EAB0;
		/* 8214F9E4h case    2:*/		return 0x8214F9E8;
		  /* 8214F9E8h */ case    3:  		/* mr R4, R28 */
		/* 8214F9E8h case    3:*/		regs.R4 = regs.R28;
		/* 8214F9E8h case    3:*/		return 0x8214F9EC;
		  /* 8214F9ECh */ case    4:  		/* mr R3, R31 */
		/* 8214F9ECh case    4:*/		regs.R3 = regs.R31;
		/* 8214F9ECh case    4:*/		return 0x8214F9F0;
		  /* 8214F9F0h */ case    5:  		/* bl -6616 */
		/* 8214F9F0h case    5:*/		regs.LR = 0x8214F9F4; return 0x8214E018;
		/* 8214F9F0h case    5:*/		return 0x8214F9F4;
	}
	return 0x8214F9F4;
} // Block from 8214F9DCh-8214F9F4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214F9F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214F9F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214F9F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214F9F4);
		  /* 8214F9F4h */ case    0:  		/* lis R11, -32253 */
		/* 8214F9F4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214F9F4h case    0:*/		return 0x8214F9F8;
		  /* 8214F9F8h */ case    1:  		/* mr R3, R31 */
		/* 8214F9F8h case    1:*/		regs.R3 = regs.R31;
		/* 8214F9F8h case    1:*/		return 0x8214F9FC;
		  /* 8214F9FCh */ case    2:  		/* addi R4, R11, 28348 */
		/* 8214F9FCh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6EBC);
		/* 8214F9FCh case    2:*/		return 0x8214FA00;
		  /* 8214FA00h */ case    3:  		/* bl -3920 */
		/* 8214FA00h case    3:*/		regs.LR = 0x8214FA04; return 0x8214EAB0;
		/* 8214FA00h case    3:*/		return 0x8214FA04;
	}
	return 0x8214FA04;
} // Block from 8214F9F4h-8214FA04h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214FA04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FA04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FA04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FA04);
		  /* 8214FA04h */ case    0:  		/* mr R3, R15 */
		/* 8214FA04h case    0:*/		regs.R3 = regs.R15;
		/* 8214FA04h case    0:*/		return 0x8214FA08;
		  /* 8214FA08h */ case    1:  		/* addi R1, R1, 256 */
		/* 8214FA08h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 8214FA08h case    1:*/		return 0x8214FA0C;
		  /* 8214FA0Ch */ case    2:  		/* b -780184 */
		/* 8214FA0Ch case    2:*/		return 0x82091274;
		/* 8214FA0Ch case    2:*/		return 0x8214FA10;
	}
	return 0x8214FA10;
} // Block from 8214FA04h-8214FA10h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214FA10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FA10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FA10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FA10);
		  /* 8214FA10h */ case    0:  		/* mfspr R12, LR */
		/* 8214FA10h case    0:*/		regs.R12 = regs.LR;
		/* 8214FA10h case    0:*/		return 0x8214FA14;
		  /* 8214FA14h */ case    1:  		/* bl -780276 */
		/* 8214FA14h case    1:*/		regs.LR = 0x8214FA18; return 0x82091220;
		/* 8214FA14h case    1:*/		return 0x8214FA18;
		  /* 8214FA18h */ case    2:  		/* stwu R1, <#[R1 - 272]> */
		/* 8214FA18h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEF0);
		/* 8214FA18h case    2:*/		return 0x8214FA1C;
		  /* 8214FA1Ch */ case    3:  		/* mr R30, R7 */
		/* 8214FA1Ch case    3:*/		regs.R30 = regs.R7;
		/* 8214FA1Ch case    3:*/		return 0x8214FA20;
		  /* 8214FA20h */ case    4:  		/* mr R9, R6 */
		/* 8214FA20h case    4:*/		regs.R9 = regs.R6;
		/* 8214FA20h case    4:*/		return 0x8214FA24;
		  /* 8214FA24h */ case    5:  		/* mr R24, R3 */
		/* 8214FA24h case    5:*/		regs.R24 = regs.R3;
		/* 8214FA24h case    5:*/		return 0x8214FA28;
		  /* 8214FA28h */ case    6:  		/* mr R31, R4 */
		/* 8214FA28h case    6:*/		regs.R31 = regs.R4;
		/* 8214FA28h case    6:*/		return 0x8214FA2C;
		  /* 8214FA2Ch */ case    7:  		/* mr R8, R5 */
		/* 8214FA2Ch case    7:*/		regs.R8 = regs.R5;
		/* 8214FA2Ch case    7:*/		return 0x8214FA30;
		  /* 8214FA30h */ case    8:  		/* mr R7, R4 */
		/* 8214FA30h case    8:*/		regs.R7 = regs.R4;
		/* 8214FA30h case    8:*/		return 0x8214FA34;
		  /* 8214FA34h */ case    9:  		/* mr R6, R3 */
		/* 8214FA34h case    9:*/		regs.R6 = regs.R3;
		/* 8214FA34h case    9:*/		return 0x8214FA38;
		  /* 8214FA38h */ case   10:  		/* addi R10, R1, 96 */
		/* 8214FA38h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 8214FA38h case   10:*/		return 0x8214FA3C;
		  /* 8214FA3Ch */ case   11:  		/* li R5, 36 */
		/* 8214FA3Ch case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x24);
		/* 8214FA3Ch case   11:*/		return 0x8214FA40;
		  /* 8214FA40h */ case   12:  		/* li R4, 0 */
		/* 8214FA40h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8214FA40h case   12:*/		return 0x8214FA44;
		  /* 8214FA44h */ case   13:  		/* mr R3, R30 */
		/* 8214FA44h case   13:*/		regs.R3 = regs.R30;
		/* 8214FA44h case   13:*/		return 0x8214FA48;
		  /* 8214FA48h */ case   14:  		/* bl -1232 */
		/* 8214FA48h case   14:*/		regs.LR = 0x8214FA4C; return 0x8214F578;
		/* 8214FA48h case   14:*/		return 0x8214FA4C;
		  /* 8214FA4Ch */ case   15:  		/* stw R3, <#[R1 + 116]> */
		/* 8214FA4Ch case   15:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000074) );
		/* 8214FA4Ch case   15:*/		return 0x8214FA50;
		  /* 8214FA50h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 8214FA50h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8214FA50h case   16:*/		return 0x8214FA54;
		  /* 8214FA54h */ case   17:  		/* bc 12, CR0_LT, 984 */
		/* 8214FA54h case   17:*/		if ( regs.CR[0].lt ) { return 0x8214FE2C;  }
		/* 8214FA54h case   17:*/		return 0x8214FA58;
		  /* 8214FA58h */ case   18:  		/* rlwinm. R11, R30, 0, 23, 23 */
		/* 8214FA58h case   18:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R30);
		/* 8214FA58h case   18:*/		return 0x8214FA5C;
		  /* 8214FA5Ch */ case   19:  		/* bc 12, CR0_EQ, 976 */
		/* 8214FA5Ch case   19:*/		if ( regs.CR[0].eq ) { return 0x8214FE2C;  }
		/* 8214FA5Ch case   19:*/		return 0x8214FA60;
		  /* 8214FA60h */ case   20:  		/* lis R11, -32253 */
		/* 8214FA60h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214FA60h case   20:*/		return 0x8214FA64;
		  /* 8214FA64h */ case   21:  		/* lwz R30, <#[R24 + 28]> */
		/* 8214FA64h case   21:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R24 + 0x0000001C) );
		/* 8214FA64h case   21:*/		return 0x8214FA68;
		  /* 8214FA68h */ case   22:  		/* lis R7, -32217 */
		/* 8214FA68h case   22:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8227);
		/* 8214FA68h case   22:*/		return 0x8214FA6C;
		  /* 8214FA6Ch */ case   23:  		/* lwz R23, <#[R1 + 96]> */
		/* 8214FA6Ch case   23:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000060) );
		/* 8214FA6Ch case   23:*/		return 0x8214FA70;
		  /* 8214FA70h */ case   24:  		/* lis R10, -32253 */
		/* 8214FA70h case   24:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8214FA70h case   24:*/		return 0x8214FA74;
		  /* 8214FA74h */ case   25:  		/* lwz R28, <#[R24 + 24]> */
		/* 8214FA74h case   25:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R24 + 0x00000018) );
		/* 8214FA74h case   25:*/		return 0x8214FA78;
		  /* 8214FA78h */ case   26:  		/* lis R9, -32256 */
		/* 8214FA78h case   26:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 8214FA78h case   26:*/		return 0x8214FA7C;
		  /* 8214FA7Ch */ case   27:  		/* lis R8, -32253 */
		/* 8214FA7Ch case   27:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 8214FA7Ch case   27:*/		return 0x8214FA80;
		  /* 8214FA80h */ case   28:  		/* addi R15, R11, 28348 */
		/* 8214FA80h case   28:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R11,0x6EBC);
		/* 8214FA80h case   28:*/		return 0x8214FA84;
		  /* 8214FA84h */ case   29:  		/* addi R16, R7, 17440 */
		/* 8214FA84h case   29:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R7,0x4420);
		/* 8214FA84h case   29:*/		return 0x8214FA88;
		  /* 8214FA88h */ case   30:  		/* cmplwi CR6, R30, 0 */
		/* 8214FA88h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8214FA88h case   30:*/		return 0x8214FA8C;
		  /* 8214FA8Ch */ case   31:  		/* stw R15, <#[R1 + 112]> */
		/* 8214FA8Ch case   31:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R1 + 0x00000070) );
		/* 8214FA8Ch case   31:*/		return 0x8214FA90;
		  /* 8214FA90h */ case   32:  		/* addi R22, R10, 28356 */
		/* 8214FA90h case   32:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R10,0x6EC4);
		/* 8214FA90h case   32:*/		return 0x8214FA94;
		  /* 8214FA94h */ case   33:  		/* stw R16, <#[R1 + 100]> */
		/* 8214FA94h case   33:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R1 + 0x00000064) );
		/* 8214FA94h case   33:*/		return 0x8214FA98;
		  /* 8214FA98h */ case   34:  		/* addi R27, R9, 17768 */
		/* 8214FA98h case   34:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R9,0x4568);
		/* 8214FA98h case   34:*/		return 0x8214FA9C;
		  /* 8214FA9Ch */ case   35:  		/* addi R26, R8, 28332 */
		/* 8214FA9Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R8,0x6EAC);
		/* 8214FA9Ch case   35:*/		return 0x8214FAA0;
		  /* 8214FAA0h */ case   36:  		/* bc 12, CR6_EQ, 276 */
		/* 8214FAA0h case   36:*/		if ( regs.CR[6].eq ) { return 0x8214FBB4;  }
		/* 8214FAA0h case   36:*/		return 0x8214FAA4;
		  /* 8214FAA4h */ case   37:  		/* mr R4, R26 */
		/* 8214FAA4h case   37:*/		regs.R4 = regs.R26;
		/* 8214FAA4h case   37:*/		return 0x8214FAA8;
		  /* 8214FAA8h */ case   38:  		/* mr R3, R31 */
		/* 8214FAA8h case   38:*/		regs.R3 = regs.R31;
		/* 8214FAA8h case   38:*/		return 0x8214FAAC;
		  /* 8214FAACh */ case   39:  		/* bl -4092 */
		/* 8214FAACh case   39:*/		regs.LR = 0x8214FAB0; return 0x8214EAB0;
		/* 8214FAACh case   39:*/		return 0x8214FAB0;
		  /* 8214FAB0h */ case   40:  		/* mr R4, R27 */
		/* 8214FAB0h case   40:*/		regs.R4 = regs.R27;
		/* 8214FAB0h case   40:*/		return 0x8214FAB4;
		  /* 8214FAB4h */ case   41:  		/* mr R3, R31 */
		/* 8214FAB4h case   41:*/		regs.R3 = regs.R31;
		/* 8214FAB4h case   41:*/		return 0x8214FAB8;
		  /* 8214FAB8h */ case   42:  		/* bl -6816 */
		/* 8214FAB8h case   42:*/		regs.LR = 0x8214FABC; return 0x8214E018;
		/* 8214FAB8h case   42:*/		return 0x8214FABC;
		  /* 8214FABCh */ case   43:  		/* mr R4, R22 */
		/* 8214FABCh case   43:*/		regs.R4 = regs.R22;
		/* 8214FABCh case   43:*/		return 0x8214FAC0;
		  /* 8214FAC0h */ case   44:  		/* mr R3, R31 */
		/* 8214FAC0h case   44:*/		regs.R3 = regs.R31;
		/* 8214FAC0h case   44:*/		return 0x8214FAC4;
		  /* 8214FAC4h */ case   45:  		/* bl -4116 */
		/* 8214FAC4h case   45:*/		regs.LR = 0x8214FAC8; return 0x8214EAB0;
		/* 8214FAC4h case   45:*/		return 0x8214FAC8;
		  /* 8214FAC8h */ case   46:  		/* lis R10, -32253 */
		/* 8214FAC8h case   46:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8214FAC8h case   46:*/		return 0x8214FACC;
		  /* 8214FACCh */ case   47:  		/* rlwinm R11, R28, 2, 0, 29 */
		/* 8214FACCh case   47:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R28);
		/* 8214FACCh case   47:*/		return 0x8214FAD0;
		  /* 8214FAD0h */ case   48:  		/* addi R4, R10, 28836 */
		/* 8214FAD0h case   48:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x70A4);
		/* 8214FAD0h case   48:*/		return 0x8214FAD4;
		  /* 8214FAD4h */ case   49:  		/* mr R3, R31 */
		/* 8214FAD4h case   49:*/		regs.R3 = regs.R31;
		/* 8214FAD4h case   49:*/		return 0x8214FAD8;
		  /* 8214FAD8h */ case   50:  		/* add R29, R11, R23 */
		/* 8214FAD8h case   50:*/		cpu::op::add<0>(regs,&regs.R29,regs.R11,regs.R23);
		/* 8214FAD8h case   50:*/		return 0x8214FADC;
		  /* 8214FADCh */ case   51:  		/* bl -6852 */
		/* 8214FADCh case   51:*/		regs.LR = 0x8214FAE0; return 0x8214E018;
		/* 8214FADCh case   51:*/		return 0x8214FAE0;
		  /* 8214FAE0h */ case   52:  		/* mr R4, R26 */
		/* 8214FAE0h case   52:*/		regs.R4 = regs.R26;
		/* 8214FAE0h case   52:*/		return 0x8214FAE4;
		  /* 8214FAE4h */ case   53:  		/* mr R3, R31 */
		/* 8214FAE4h case   53:*/		regs.R3 = regs.R31;
		/* 8214FAE4h case   53:*/		return 0x8214FAE8;
		  /* 8214FAE8h */ case   54:  		/* bl -4152 */
		/* 8214FAE8h case   54:*/		regs.LR = 0x8214FAEC; return 0x8214EAB0;
		/* 8214FAE8h case   54:*/		return 0x8214FAEC;
		  /* 8214FAECh */ case   55:  		/* mr R4, R27 */
		/* 8214FAECh case   55:*/		regs.R4 = regs.R27;
		/* 8214FAECh case   55:*/		return 0x8214FAF0;
		  /* 8214FAF0h */ case   56:  		/* mr R3, R31 */
		/* 8214FAF0h case   56:*/		regs.R3 = regs.R31;
		/* 8214FAF0h case   56:*/		return 0x8214FAF4;
		  /* 8214FAF4h */ case   57:  		/* bl -6876 */
		/* 8214FAF4h case   57:*/		regs.LR = 0x8214FAF8; return 0x8214E018;
		/* 8214FAF4h case   57:*/		return 0x8214FAF8;
		  /* 8214FAF8h */ case   58:  		/* li R25, 0 */
		/* 8214FAF8h case   58:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 8214FAF8h case   58:*/		return 0x8214FAFC;
		  /* 8214FAFCh */ case   59:  		/* cmplwi CR6, R30, 0 */
		/* 8214FAFCh case   59:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8214FAFCh case   59:*/		return 0x8214FB00;
		  /* 8214FB00h */ case   60:  		/* bc 12, CR6_EQ, 168 */
		/* 8214FB00h case   60:*/		if ( regs.CR[6].eq ) { return 0x8214FBA8;  }
		/* 8214FB00h case   60:*/		return 0x8214FB04;
		  /* 8214FB04h */ case   61:  		/* lis R8, -32253 */
		/* 8214FB04h case   61:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 8214FB04h case   61:*/		return 0x8214FB08;
		  /* 8214FB08h */ case   62:  		/* lis R9, -32217 */
		/* 8214FB08h case   62:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8227);
		/* 8214FB08h case   62:*/		return 0x8214FB0C;
		  /* 8214FB0Ch */ case   63:  		/* lis R10, -32253 */
		/* 8214FB0Ch case   63:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8214FB0Ch case   63:*/		return 0x8214FB10;
		  /* 8214FB10h */ case   64:  		/* lis R11, -32253 */
		/* 8214FB10h case   64:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214FB10h case   64:*/		return 0x8214FB14;
		  /* 8214FB14h */ case   65:  		/* mr R21, R29 */
		/* 8214FB14h case   65:*/		regs.R21 = regs.R29;
		/* 8214FB14h case   65:*/		return 0x8214FB18;
		  /* 8214FB18h */ case   66:  		/* addi R19, R8, 28832 */
		/* 8214FB18h case   66:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R8,0x70A0);
		/* 8214FB18h case   66:*/		return 0x8214FB1C;
		  /* 8214FB1Ch */ case   67:  		/* addi R18, R9, 18304 */
		/* 8214FB1Ch case   67:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R9,0x4780);
		/* 8214FB1Ch case   67:*/		return 0x8214FB20;
		  /* 8214FB20h */ case   68:  		/* addi R17, R10, 28808 */
		/* 8214FB20h case   68:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R10,0x7088);
		/* 8214FB20h case   68:*/		return 0x8214FB24;
		  /* 8214FB24h */ case   69:  		/* addi R20, R11, 28780 */
		/* 8214FB24h case   69:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R11,0x706C);
		/* 8214FB24h case   69:*/		return 0x8214FB28;
		  /* 8214FB28h */ case   70:  		/* lwz R29, <#[R21]> */
		/* 8214FB28h case   70:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R21 + 0x00000000) );
		/* 8214FB28h case   70:*/		return 0x8214FB2C;
		  /* 8214FB2Ch */ case   71:  		/* mr R4, R20 */
		/* 8214FB2Ch case   71:*/		regs.R4 = regs.R20;
		/* 8214FB2Ch case   71:*/		return 0x8214FB30;
		  /* 8214FB30h */ case   72:  		/* mr R5, R25 */
		/* 8214FB30h case   72:*/		regs.R5 = regs.R25;
		/* 8214FB30h case   72:*/		return 0x8214FB34;
		  /* 8214FB34h */ case   73:  		/* rlwinm R11, R29, 22, 26, 29 */
		/* 8214FB34h case   73:*/		cpu::op::rlwinm<0,22,26,29>(regs,&regs.R11,regs.R29);
		/* 8214FB34h case   73:*/		return 0x8214FB38;
		  /* 8214FB38h */ case   74:  		/* rlwinm R8, R29, 0, 20, 31 */
		/* 8214FB38h case   74:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R8,regs.R29);
		/* 8214FB38h case   74:*/		return 0x8214FB3C;
		  /* 8214FB3Ch */ case   75:  		/* rlwinm R7, R29, 16, 28, 31 */
		/* 8214FB3Ch case   75:*/		cpu::op::rlwinm<0,16,28,31>(regs,&regs.R7,regs.R29);
		/* 8214FB3Ch case   75:*/		return 0x8214FB40;
		  /* 8214FB40h */ case   76:  		/* mr R9, R8 */
		/* 8214FB40h case   76:*/		regs.R9 = regs.R8;
		/* 8214FB40h case   76:*/		return 0x8214FB44;
		  /* 8214FB44h */ case   77:  		/* mr R3, R31 */
		/* 8214FB44h case   77:*/		regs.R3 = regs.R31;
		/* 8214FB44h case   77:*/		return 0x8214FB48;
		  /* 8214FB48h */ case   78:  		/* lwzx R6, <#[R11 + R16]> */
		/* 8214FB48h case   78:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + regs.R16 + 0x00000000) );
		/* 8214FB48h case   78:*/		return 0x8214FB4C;
		  /* 8214FB4Ch */ case   79:  		/* bl -6964 */
		/* 8214FB4Ch case   79:*/		regs.LR = 0x8214FB50; return 0x8214E018;
		/* 8214FB4Ch case   79:*/		return 0x8214FB50;
		  /* 8214FB50h */ case   80:  		/* rlwinm. R11, R29, 0, 9, 9 */
		/* 8214FB50h case   80:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R29);
		/* 8214FB50h case   80:*/		return 0x8214FB54;
		  /* 8214FB54h */ case   81:  		/* bc 12, CR0_EQ, 16 */
		/* 8214FB54h case   81:*/		if ( regs.CR[0].eq ) { return 0x8214FB64;  }
		/* 8214FB54h case   81:*/		return 0x8214FB58;
		  /* 8214FB58h */ case   82:  		/* mr R4, R17 */
		/* 8214FB58h case   82:*/		regs.R4 = regs.R17;
		/* 8214FB58h case   82:*/		return 0x8214FB5C;
		  /* 8214FB5Ch */ case   83:  		/* mr R3, R31 */
		/* 8214FB5Ch case   83:*/		regs.R3 = regs.R31;
		/* 8214FB5Ch case   83:*/		return 0x8214FB60;
		  /* 8214FB60h */ case   84:  		/* bl -6984 */
		/* 8214FB60h case   84:*/		regs.LR = 0x8214FB64; return 0x8214E018;
		/* 8214FB60h case   84:*/		return 0x8214FB64;
	}
	return 0x8214FB64;
} // Block from 8214FA10h-8214FB64h (85 instructions)

//////////////////////////////////////////////////////
// Block at 8214FB64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FB64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FB64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FB64);
		  /* 8214FB64h */ case    0:  		/* rlwinm. R11, R29, 12, 30, 31 */
		/* 8214FB64h case    0:*/		cpu::op::rlwinm<1,12,30,31>(regs,&regs.R11,regs.R29);
		/* 8214FB64h case    0:*/		return 0x8214FB68;
		  /* 8214FB68h */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 8214FB68h case    1:*/		if ( regs.CR[0].eq ) { return 0x8214FB80;  }
		/* 8214FB68h case    1:*/		return 0x8214FB6C;
		  /* 8214FB6Ch */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8214FB6Ch case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8214FB6Ch case    2:*/		return 0x8214FB70;
		  /* 8214FB70h */ case    3:  		/* mr R4, R19 */
		/* 8214FB70h case    3:*/		regs.R4 = regs.R19;
		/* 8214FB70h case    3:*/		return 0x8214FB74;
		  /* 8214FB74h */ case    4:  		/* mr R3, R31 */
		/* 8214FB74h case    4:*/		regs.R3 = regs.R31;
		/* 8214FB74h case    4:*/		return 0x8214FB78;
		  /* 8214FB78h */ case    5:  		/* lwzx R5, <#[R11 + R18]> */
		/* 8214FB78h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R18 + 0x00000000) );
		/* 8214FB78h case    5:*/		return 0x8214FB7C;
		  /* 8214FB7Ch */ case    6:  		/* bl -7012 */
		/* 8214FB7Ch case    6:*/		regs.LR = 0x8214FB80; return 0x8214E018;
		/* 8214FB7Ch case    6:*/		return 0x8214FB80;
	}
	return 0x8214FB80;
} // Block from 8214FB64h-8214FB80h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8214FB80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FB80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FB80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FB80);
		  /* 8214FB80h */ case    0:  		/* mr R4, R26 */
		/* 8214FB80h case    0:*/		regs.R4 = regs.R26;
		/* 8214FB80h case    0:*/		return 0x8214FB84;
		  /* 8214FB84h */ case    1:  		/* mr R3, R31 */
		/* 8214FB84h case    1:*/		regs.R3 = regs.R31;
		/* 8214FB84h case    1:*/		return 0x8214FB88;
		  /* 8214FB88h */ case    2:  		/* bl -4312 */
		/* 8214FB88h case    2:*/		regs.LR = 0x8214FB8C; return 0x8214EAB0;
		/* 8214FB88h case    2:*/		return 0x8214FB8C;
		  /* 8214FB8Ch */ case    3:  		/* mr R4, R27 */
		/* 8214FB8Ch case    3:*/		regs.R4 = regs.R27;
		/* 8214FB8Ch case    3:*/		return 0x8214FB90;
		  /* 8214FB90h */ case    4:  		/* mr R3, R31 */
		/* 8214FB90h case    4:*/		regs.R3 = regs.R31;
		/* 8214FB90h case    4:*/		return 0x8214FB94;
		  /* 8214FB94h */ case    5:  		/* bl -7036 */
		/* 8214FB94h case    5:*/		regs.LR = 0x8214FB98; return 0x8214E018;
		/* 8214FB94h case    5:*/		return 0x8214FB98;
		  /* 8214FB98h */ case    6:  		/* addi R25, R25, 1 */
		/* 8214FB98h case    6:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 8214FB98h case    6:*/		return 0x8214FB9C;
		  /* 8214FB9Ch */ case    7:  		/* addi R21, R21, 4 */
		/* 8214FB9Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x4);
		/* 8214FB9Ch case    7:*/		return 0x8214FBA0;
		  /* 8214FBA0h */ case    8:  		/* cmplw CR6, R25, R30 */
		/* 8214FBA0h case    8:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R30);
		/* 8214FBA0h case    8:*/		return 0x8214FBA4;
		  /* 8214FBA4h */ case    9:  		/* bc 12, CR6_LT, -124 */
		/* 8214FBA4h case    9:*/		if ( regs.CR[6].lt ) { return 0x8214FB28;  }
		/* 8214FBA4h case    9:*/		return 0x8214FBA8;
	}
	return 0x8214FBA8;
} // Block from 8214FB80h-8214FBA8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8214FBA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FBA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FBA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FBA8);
		  /* 8214FBA8h */ case    0:  		/* mr R4, R15 */
		/* 8214FBA8h case    0:*/		regs.R4 = regs.R15;
		/* 8214FBA8h case    0:*/		return 0x8214FBAC;
		  /* 8214FBACh */ case    1:  		/* mr R3, R31 */
		/* 8214FBACh case    1:*/		regs.R3 = regs.R31;
		/* 8214FBACh case    1:*/		return 0x8214FBB0;
		  /* 8214FBB0h */ case    2:  		/* bl -4352 */
		/* 8214FBB0h case    2:*/		regs.LR = 0x8214FBB4; return 0x8214EAB0;
		/* 8214FBB0h case    2:*/		return 0x8214FBB4;
	}
	return 0x8214FBB4;
} // Block from 8214FBA8h-8214FBB4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214FBB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FBB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FBB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FBB4);
		  /* 8214FBB4h */ case    0:  		/* lwz R11, <#[R24 + 20]> */
		/* 8214FBB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000014) );
		/* 8214FBB4h case    0:*/		return 0x8214FBB8;
		  /* 8214FBB8h */ case    1:  		/* rlwinm. R21, R11, 27, 27, 31 */
		/* 8214FBB8h case    1:*/		cpu::op::rlwinm<1,27,27,31>(regs,&regs.R21,regs.R11);
		/* 8214FBB8h case    1:*/		return 0x8214FBBC;
		  /* 8214FBBCh */ case    2:  		/* bc 12, CR0_EQ, 624 */
		/* 8214FBBCh case    2:*/		if ( regs.CR[0].eq ) { return 0x8214FE2C;  }
		/* 8214FBBCh case    2:*/		return 0x8214FBC0;
		  /* 8214FBC0h */ case    3:  		/* mr R4, R26 */
		/* 8214FBC0h case    3:*/		regs.R4 = regs.R26;
		/* 8214FBC0h case    3:*/		return 0x8214FBC4;
		  /* 8214FBC4h */ case    4:  		/* mr R3, R31 */
		/* 8214FBC4h case    4:*/		regs.R3 = regs.R31;
		/* 8214FBC4h case    4:*/		return 0x8214FBC8;
		  /* 8214FBC8h */ case    5:  		/* bl -4376 */
		/* 8214FBC8h case    5:*/		regs.LR = 0x8214FBCC; return 0x8214EAB0;
		/* 8214FBC8h case    5:*/		return 0x8214FBCC;
		  /* 8214FBCCh */ case    6:  		/* mr R4, R27 */
		/* 8214FBCCh case    6:*/		regs.R4 = regs.R27;
		/* 8214FBCCh case    6:*/		return 0x8214FBD0;
		  /* 8214FBD0h */ case    7:  		/* mr R3, R31 */
		/* 8214FBD0h case    7:*/		regs.R3 = regs.R31;
		/* 8214FBD0h case    7:*/		return 0x8214FBD4;
		  /* 8214FBD4h */ case    8:  		/* bl -7100 */
		/* 8214FBD4h case    8:*/		regs.LR = 0x8214FBD8; return 0x8214E018;
		/* 8214FBD4h case    8:*/		return 0x8214FBD8;
		  /* 8214FBD8h */ case    9:  		/* mr R4, R22 */
		/* 8214FBD8h case    9:*/		regs.R4 = regs.R22;
		/* 8214FBD8h case    9:*/		return 0x8214FBDC;
		  /* 8214FBDCh */ case   10:  		/* mr R3, R31 */
		/* 8214FBDCh case   10:*/		regs.R3 = regs.R31;
		/* 8214FBDCh case   10:*/		return 0x8214FBE0;
		  /* 8214FBE0h */ case   11:  		/* bl -4400 */
		/* 8214FBE0h case   11:*/		regs.LR = 0x8214FBE4; return 0x8214EAB0;
		/* 8214FBE0h case   11:*/		return 0x8214FBE4;
		  /* 8214FBE4h */ case   12:  		/* add R11, R21, R30 */
		/* 8214FBE4h case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R21,regs.R30);
		/* 8214FBE4h case   12:*/		return 0x8214FBE8;
		  /* 8214FBE8h */ case   13:  		/* add R10, R30, R28 */
		/* 8214FBE8h case   13:*/		cpu::op::add<0>(regs,&regs.R10,regs.R30,regs.R28);
		/* 8214FBE8h case   13:*/		return 0x8214FBEC;
		  /* 8214FBECh */ case   14:  		/* add R11, R11, R28 */
		/* 8214FBECh case   14:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 8214FBECh case   14:*/		return 0x8214FBF0;
		  /* 8214FBF0h */ case   15:  		/* lis R9, -32253 */
		/* 8214FBF0h case   15:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8214FBF0h case   15:*/		return 0x8214FBF4;
		  /* 8214FBF4h */ case   16:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8214FBF4h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8214FBF4h case   16:*/		return 0x8214FBF8;
		  /* 8214FBF8h */ case   17:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8214FBF8h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8214FBF8h case   17:*/		return 0x8214FBFC;
		  /* 8214FBFCh */ case   18:  		/* add R11, R11, R23 */
		/* 8214FBFCh case   18:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R23);
		/* 8214FBFCh case   18:*/		return 0x8214FC00;
		  /* 8214FC00h */ case   19:  		/* addi R4, R9, 28748 */
		/* 8214FC00h case   19:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x704C);
		/* 8214FC00h case   19:*/		return 0x8214FC04;
		  /* 8214FC04h */ case   20:  		/* mr R3, R31 */
		/* 8214FC04h case   20:*/		regs.R3 = regs.R31;
		/* 8214FC04h case   20:*/		return 0x8214FC08;
		  /* 8214FC08h */ case   21:  		/* stw R11, <#[R1 + 108]> */
		/* 8214FC08h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 8214FC08h case   21:*/		return 0x8214FC0C;
		  /* 8214FC0Ch */ case   22:  		/* add R22, R10, R23 */
		/* 8214FC0Ch case   22:*/		cpu::op::add<0>(regs,&regs.R22,regs.R10,regs.R23);
		/* 8214FC0Ch case   22:*/		return 0x8214FC10;
		  /* 8214FC10h */ case   23:  		/* lwz R14, <#[R24 + 32]> */
		/* 8214FC10h case   23:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R24 + 0x00000020) );
		/* 8214FC10h case   23:*/		return 0x8214FC14;
		  /* 8214FC14h */ case   24:  		/* stw R14, <#[R1 + 96]> */
		/* 8214FC14h case   24:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x00000060) );
		/* 8214FC14h case   24:*/		return 0x8214FC18;
		  /* 8214FC18h */ case   25:  		/* bl -7168 */
		/* 8214FC18h case   25:*/		regs.LR = 0x8214FC1C; return 0x8214E018;
		/* 8214FC18h case   25:*/		return 0x8214FC1C;
		  /* 8214FC1Ch */ case   26:  		/* mr R4, R26 */
		/* 8214FC1Ch case   26:*/		regs.R4 = regs.R26;
		/* 8214FC1Ch case   26:*/		return 0x8214FC20;
		  /* 8214FC20h */ case   27:  		/* mr R3, R31 */
		/* 8214FC20h case   27:*/		regs.R3 = regs.R31;
		/* 8214FC20h case   27:*/		return 0x8214FC24;
		  /* 8214FC24h */ case   28:  		/* bl -4468 */
		/* 8214FC24h case   28:*/		regs.LR = 0x8214FC28; return 0x8214EAB0;
		/* 8214FC24h case   28:*/		return 0x8214FC28;
		  /* 8214FC28h */ case   29:  		/* mr R4, R27 */
		/* 8214FC28h case   29:*/		regs.R4 = regs.R27;
		/* 8214FC28h case   29:*/		return 0x8214FC2C;
		  /* 8214FC2Ch */ case   30:  		/* mr R3, R31 */
		/* 8214FC2Ch case   30:*/		regs.R3 = regs.R31;
		/* 8214FC2Ch case   30:*/		return 0x8214FC30;
		  /* 8214FC30h */ case   31:  		/* bl -7192 */
		/* 8214FC30h case   31:*/		regs.LR = 0x8214FC34; return 0x8214E018;
		/* 8214FC30h case   31:*/		return 0x8214FC34;
		  /* 8214FC34h */ case   32:  		/* li R30, 0 */
		/* 8214FC34h case   32:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8214FC34h case   32:*/		return 0x8214FC38;
		  /* 8214FC38h */ case   33:  		/* li R28, 0 */
		/* 8214FC38h case   33:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8214FC38h case   33:*/		return 0x8214FC3C;
		  /* 8214FC3Ch */ case   34:  		/* cmplwi CR6, R21, 0 */
		/* 8214FC3Ch case   34:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 8214FC3Ch case   34:*/		return 0x8214FC40;
		  /* 8214FC40h */ case   35:  		/* bc 12, CR6_EQ, 480 */
		/* 8214FC40h case   35:*/		if ( regs.CR[6].eq ) { return 0x8214FE20;  }
		/* 8214FC40h case   35:*/		return 0x8214FC44;
		  /* 8214FC44h */ case   36:  		/* lis R3, -32253 */
		/* 8214FC44h case   36:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8203);
		/* 8214FC44h case   36:*/		return 0x8214FC48;
		  /* 8214FC48h */ case   37:  		/* lis R4, -32253 */
		/* 8214FC48h case   37:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8203);
		/* 8214FC48h case   37:*/		return 0x8214FC4C;
		  /* 8214FC4Ch */ case   38:  		/* lis R5, -32253 */
		/* 8214FC4Ch case   38:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8203);
		/* 8214FC4Ch case   38:*/		return 0x8214FC50;
		  /* 8214FC50h */ case   39:  		/* lis R6, -32253 */
		/* 8214FC50h case   39:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8203);
		/* 8214FC50h case   39:*/		return 0x8214FC54;
		  /* 8214FC54h */ case   40:  		/* lis R7, -32255 */
		/* 8214FC54h case   40:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8201);
		/* 8214FC54h case   40:*/		return 0x8214FC58;
		  /* 8214FC58h */ case   41:  		/* lis R8, -32255 */
		/* 8214FC58h case   41:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8201);
		/* 8214FC58h case   41:*/		return 0x8214FC5C;
		  /* 8214FC5Ch */ case   42:  		/* lis R9, -32255 */
		/* 8214FC5Ch case   42:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8201);
		/* 8214FC5Ch case   42:*/		return 0x8214FC60;
		  /* 8214FC60h */ case   43:  		/* lis R10, -32256 */
		/* 8214FC60h case   43:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8214FC60h case   43:*/		return 0x8214FC64;
		  /* 8214FC64h */ case   44:  		/* lis R11, -32255 */
		/* 8214FC64h case   44:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8214FC64h case   44:*/		return 0x8214FC68;
		  /* 8214FC68h */ case   45:  		/* addi R20, R3, 28688 */
		/* 8214FC68h case   45:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R3,0x7010);
		/* 8214FC68h case   45:*/		return 0x8214FC6C;
		  /* 8214FC6Ch */ case   46:  		/* addi R23, R4, 28672 */
		/* 8214FC6Ch case   46:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R4,0x7000);
		/* 8214FC6Ch case   46:*/		return 0x8214FC70;
		  /* 8214FC70h */ case   47:  		/* addi R19, R5, 28444 */
		/* 8214FC70h case   47:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R5,0x6F1C);
		/* 8214FC70h case   47:*/		return 0x8214FC74;
		  /* 8214FC74h */ case   48:  		/* addi R25, R6, 28644 */
		/* 8214FC74h case   48:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R6,0x6FE4);
		/* 8214FC74h case   48:*/		return 0x8214FC78;
		  /* 8214FC78h */ case   49:  		/* addi R18, R7, 12560 */
		/* 8214FC78h case   49:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R7,0x3110);
		/* 8214FC78h case   49:*/		return 0x8214FC7C;
		  /* 8214FC7Ch */ case   50:  		/* addi R17, R8, 12556 */
		/* 8214FC7Ch case   50:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R8,0x310C);
		/* 8214FC7Ch case   50:*/		return 0x8214FC80;
		  /* 8214FC80h */ case   51:  		/* addi R16, R9, 12548 */
		/* 8214FC80h case   51:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R9,0x3104);
		/* 8214FC80h case   51:*/		return 0x8214FC84;
		  /* 8214FC84h */ case   52:  		/* addi R24, R10, 4485 */
		/* 8214FC84h case   52:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R10,0x1185);
		/* 8214FC84h case   52:*/		return 0x8214FC88;
		  /* 8214FC88h */ case   53:  		/* addi R15, R11, 12532 */
		/* 8214FC88h case   53:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R11,0x30F4);
		/* 8214FC88h case   53:*/		return 0x8214FC8C;
		  /* 8214FC8Ch */ case   54:  		/* b 8 */
		/* 8214FC8Ch case   54:*/		return 0x8214FC94;
		/* 8214FC8Ch case   54:*/		return 0x8214FC90;
		  /* 8214FC90h */ case   55:  		/* lwz R30, <#[R1 + 104]> */
		/* 8214FC90h case   55:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000068) );
		/* 8214FC90h case   55:*/		return 0x8214FC94;
	}
	return 0x8214FC94;
} // Block from 8214FBB4h-8214FC94h (56 instructions)

//////////////////////////////////////////////////////
// Block at 8214FC94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FC94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FC94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FC94);
		  /* 8214FC94h */ case    0:  		/* lwz R29, <#[R22]> */
		/* 8214FC94h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R22 + 0x00000000) );
		/* 8214FC94h case    0:*/		return 0x8214FC98;
		  /* 8214FC98h */ case    1:  		/* mr R6, R15 */
		/* 8214FC98h case    1:*/		regs.R6 = regs.R15;
		/* 8214FC98h case    1:*/		return 0x8214FC9C;
		  /* 8214FC9Ch */ case    2:  		/* rlwinm. R11, R29, 20, 28, 28 */
		/* 8214FC9Ch case    2:*/		cpu::op::rlwinm<1,20,28,28>(regs,&regs.R11,regs.R29);
		/* 8214FC9Ch case    2:*/		return 0x8214FCA0;
		  /* 8214FCA0h */ case    3:  		/* rlwinm R5, R29, 28, 28, 31 */
		/* 8214FCA0h case    3:*/		cpu::op::rlwinm<0,28,28,31>(regs,&regs.R5,regs.R29);
		/* 8214FCA0h case    3:*/		return 0x8214FCA4;
		  /* 8214FCA4h */ case    4:  		/* rlwinm R7, R29, 0, 28, 31 */
		/* 8214FCA4h case    4:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R29);
		/* 8214FCA4h case    4:*/		return 0x8214FCA8;
		  /* 8214FCA8h */ case    5:  		/* rlwinm R9, R29, 20, 28, 31 */
		/* 8214FCA8h case    5:*/		cpu::op::rlwinm<0,20,28,31>(regs,&regs.R9,regs.R29);
		/* 8214FCA8h case    5:*/		return 0x8214FCAC;
		  /* 8214FCACh */ case    6:  		/* rlwinm R8, R29, 24, 28, 31 */
		/* 8214FCACh case    6:*/		cpu::op::rlwinm<0,24,28,31>(regs,&regs.R8,regs.R29);
		/* 8214FCACh case    6:*/		return 0x8214FCB0;
		  /* 8214FCB0h */ case    7:  		/* bc 4, CR0_EQ, 8 */
		/* 8214FCB0h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8214FCB8;  }
		/* 8214FCB0h case    7:*/		return 0x8214FCB4;
		  /* 8214FCB4h */ case    8:  		/* mr R6, R24 */
		/* 8214FCB4h case    8:*/		regs.R6 = regs.R24;
		/* 8214FCB4h case    8:*/		return 0x8214FCB8;
	}
	return 0x8214FCB8;
} // Block from 8214FC94h-8214FCB8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214FCB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FCB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FCB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FCB8);
		  /* 8214FCB8h */ case    0:  		/* rlwinm. R11, R9, 0, 29, 29 */
		/* 8214FCB8h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R9);
		/* 8214FCB8h case    0:*/		return 0x8214FCBC;
		  /* 8214FCBCh */ case    1:  		/* mr R11, R16 */
		/* 8214FCBCh case    1:*/		regs.R11 = regs.R16;
		/* 8214FCBCh case    1:*/		return 0x8214FCC0;
		  /* 8214FCC0h */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 8214FCC0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8214FCC8;  }
		/* 8214FCC0h case    2:*/		return 0x8214FCC4;
		  /* 8214FCC4h */ case    3:  		/* mr R11, R24 */
		/* 8214FCC4h case    3:*/		regs.R11 = regs.R24;
		/* 8214FCC4h case    3:*/		return 0x8214FCC8;
	}
	return 0x8214FCC8;
} // Block from 8214FCB8h-8214FCC8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214FCC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FCC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FCC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FCC8);
		  /* 8214FCC8h */ case    0:  		/* rlwinm. R10, R9, 0, 30, 30 */
		/* 8214FCC8h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R9);
		/* 8214FCC8h case    0:*/		return 0x8214FCCC;
		  /* 8214FCCCh */ case    1:  		/* mr R10, R17 */
		/* 8214FCCCh case    1:*/		regs.R10 = regs.R17;
		/* 8214FCCCh case    1:*/		return 0x8214FCD0;
		  /* 8214FCD0h */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 8214FCD0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8214FCD8;  }
		/* 8214FCD0h case    2:*/		return 0x8214FCD4;
		  /* 8214FCD4h */ case    3:  		/* mr R10, R24 */
		/* 8214FCD4h case    3:*/		regs.R10 = regs.R24;
		/* 8214FCD4h case    3:*/		return 0x8214FCD8;
	}
	return 0x8214FCD8;
} // Block from 8214FCC8h-8214FCD8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214FCD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FCD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FCD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FCD8);
		  /* 8214FCD8h */ case    0:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 8214FCD8h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 8214FCD8h case    0:*/		return 0x8214FCDC;
		  /* 8214FCDCh */ case    1:  		/* mr R9, R18 */
		/* 8214FCDCh case    1:*/		regs.R9 = regs.R18;
		/* 8214FCDCh case    1:*/		return 0x8214FCE0;
		  /* 8214FCE0h */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 8214FCE0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8214FCE8;  }
		/* 8214FCE0h case    2:*/		return 0x8214FCE4;
		  /* 8214FCE4h */ case    3:  		/* mr R9, R24 */
		/* 8214FCE4h case    3:*/		regs.R9 = regs.R24;
		/* 8214FCE4h case    3:*/		return 0x8214FCE8;
	}
	return 0x8214FCE8;
} // Block from 8214FCD8h-8214FCE8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214FCE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FCE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FCE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FCE8);
		  /* 8214FCE8h */ case    0:  		/* lwz R3, <#[R1 + 100]> */
		/* 8214FCE8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000064) );
		/* 8214FCE8h case    0:*/		return 0x8214FCEC;
		  /* 8214FCECh */ case    1:  		/* rlwinm R5, R5, 2, 0, 29 */
		/* 8214FCECh case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R5);
		/* 8214FCECh case    1:*/		return 0x8214FCF0;
		  /* 8214FCF0h */ case    2:  		/* stw R6, <#[R1 + 92]> */
		/* 8214FCF0h case    2:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214FCF0h case    2:*/		return 0x8214FCF4;
		  /* 8214FCF4h */ case    3:  		/* mr R4, R25 */
		/* 8214FCF4h case    3:*/		regs.R4 = regs.R25;
		/* 8214FCF4h case    3:*/		return 0x8214FCF8;
		  /* 8214FCF8h */ case    4:  		/* stw R11, <#[R1 + 84]> */
		/* 8214FCF8h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8214FCF8h case    4:*/		return 0x8214FCFC;
		  /* 8214FCFCh */ case    5:  		/* lwzx R6, <#[R5 + R3]> */
		/* 8214FCFCh case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R5 + regs.R3 + 0x00000000) );
		/* 8214FCFCh case    5:*/		return 0x8214FD00;
		  /* 8214FD00h */ case    6:  		/* mr R5, R28 */
		/* 8214FD00h case    6:*/		regs.R5 = regs.R28;
		/* 8214FD00h case    6:*/		return 0x8214FD04;
		  /* 8214FD04h */ case    7:  		/* mr R3, R31 */
		/* 8214FD04h case    7:*/		regs.R3 = regs.R31;
		/* 8214FD04h case    7:*/		return 0x8214FD08;
		  /* 8214FD08h */ case    8:  		/* bl -7408 */
		/* 8214FD08h case    8:*/		regs.LR = 0x8214FD0C; return 0x8214E018;
		/* 8214FD08h case    8:*/		return 0x8214FD0C;
		  /* 8214FD0Ch */ case    9:  		/* mr R4, R26 */
		/* 8214FD0Ch case    9:*/		regs.R4 = regs.R26;
		/* 8214FD0Ch case    9:*/		return 0x8214FD10;
		  /* 8214FD10h */ case   10:  		/* mr R3, R31 */
		/* 8214FD10h case   10:*/		regs.R3 = regs.R31;
		/* 8214FD10h case   10:*/		return 0x8214FD14;
		  /* 8214FD14h */ case   11:  		/* bl -4708 */
		/* 8214FD14h case   11:*/		regs.LR = 0x8214FD18; return 0x8214EAB0;
		/* 8214FD14h case   11:*/		return 0x8214FD18;
		  /* 8214FD18h */ case   12:  		/* mr R4, R27 */
		/* 8214FD18h case   12:*/		regs.R4 = regs.R27;
		/* 8214FD18h case   12:*/		return 0x8214FD1C;
		  /* 8214FD1Ch */ case   13:  		/* mr R3, R31 */
		/* 8214FD1Ch case   13:*/		regs.R3 = regs.R31;
		/* 8214FD1Ch case   13:*/		return 0x8214FD20;
		  /* 8214FD20h */ case   14:  		/* bl -7432 */
		/* 8214FD20h case   14:*/		regs.LR = 0x8214FD24; return 0x8214E018;
		/* 8214FD20h case   14:*/		return 0x8214FD24;
		  /* 8214FD24h */ case   15:  		/* cmplwi CR6, R28, 0 */
		/* 8214FD24h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8214FD24h case   15:*/		return 0x8214FD28;
		  /* 8214FD28h */ case   16:  		/* bc 12, CR6_EQ, 52 */
		/* 8214FD28h case   16:*/		if ( regs.CR[6].eq ) { return 0x8214FD5C;  }
		/* 8214FD28h case   16:*/		return 0x8214FD2C;
		  /* 8214FD2Ch */ case   17:  		/* rlwinm R11, R29, 0, 24, 31 */
		/* 8214FD2Ch case   17:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R29);
		/* 8214FD2Ch case   17:*/		return 0x8214FD30;
		  /* 8214FD30h */ case   18:  		/* cmplw CR6, R30, R11 */
		/* 8214FD30h case   18:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8214FD30h case   18:*/		return 0x8214FD34;
		  /* 8214FD34h */ case   19:  		/* bc 12, CR6_LT, 40 */
		/* 8214FD34h case   19:*/		if ( regs.CR[6].lt ) { return 0x8214FD5C;  }
		/* 8214FD34h case   19:*/		return 0x8214FD38;
		  /* 8214FD38h */ case   20:  		/* mr R4, R19 */
		/* 8214FD38h case   20:*/		regs.R4 = regs.R19;
		/* 8214FD38h case   20:*/		return 0x8214FD3C;
		  /* 8214FD3Ch */ case   21:  		/* mr R3, R31 */
		/* 8214FD3Ch case   21:*/		regs.R3 = regs.R31;
		/* 8214FD3Ch case   21:*/		return 0x8214FD40;
		  /* 8214FD40h */ case   22:  		/* bl -7464 */
		/* 8214FD40h case   22:*/		regs.LR = 0x8214FD44; return 0x8214E018;
		/* 8214FD40h case   22:*/		return 0x8214FD44;
		  /* 8214FD44h */ case   23:  		/* mr R4, R26 */
		/* 8214FD44h case   23:*/		regs.R4 = regs.R26;
		/* 8214FD44h case   23:*/		return 0x8214FD48;
		  /* 8214FD48h */ case   24:  		/* mr R3, R31 */
		/* 8214FD48h case   24:*/		regs.R3 = regs.R31;
		/* 8214FD48h case   24:*/		return 0x8214FD4C;
		  /* 8214FD4Ch */ case   25:  		/* bl -4764 */
		/* 8214FD4Ch case   25:*/		regs.LR = 0x8214FD50; return 0x8214EAB0;
		/* 8214FD4Ch case   25:*/		return 0x8214FD50;
		  /* 8214FD50h */ case   26:  		/* mr R4, R27 */
		/* 8214FD50h case   26:*/		regs.R4 = regs.R27;
		/* 8214FD50h case   26:*/		return 0x8214FD54;
		  /* 8214FD54h */ case   27:  		/* mr R3, R31 */
		/* 8214FD54h case   27:*/		regs.R3 = regs.R31;
		/* 8214FD54h case   27:*/		return 0x8214FD58;
		  /* 8214FD58h */ case   28:  		/* bl -7488 */
		/* 8214FD58h case   28:*/		regs.LR = 0x8214FD5C; return 0x8214E018;
		/* 8214FD58h case   28:*/		return 0x8214FD5C;
	}
	return 0x8214FD5C;
} // Block from 8214FCE8h-8214FD5Ch (29 instructions)

//////////////////////////////////////////////////////
// Block at 8214FD5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FD5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FD5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FD5C);
		  /* 8214FD5Ch */ case    0:  		/* rlwinm R30, R29, 16, 20, 31 */
		/* 8214FD5Ch case    0:*/		cpu::op::rlwinm<0,16,20,31>(regs,&regs.R30,regs.R29);
		/* 8214FD5Ch case    0:*/		return 0x8214FD60;
		  /* 8214FD60h */ case    1:  		/* rlwinm R11, R29, 0, 24, 31 */
		/* 8214FD60h case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R29);
		/* 8214FD60h case    1:*/		return 0x8214FD64;
		  /* 8214FD64h */ case    2:  		/* cmplw CR6, R30, R14 */
		/* 8214FD64h case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R14);
		/* 8214FD64h case    2:*/		return 0x8214FD68;
		  /* 8214FD68h */ case    3:  		/* stw R11, <#[R1 + 104]> */
		/* 8214FD68h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000068) );
		/* 8214FD68h case    3:*/		return 0x8214FD6C;
		  /* 8214FD6Ch */ case    4:  		/* bc 4, CR6_LT, 100 */
		/* 8214FD6Ch case    4:*/		if ( !regs.CR[6].lt ) { return 0x8214FDD0;  }
		/* 8214FD6Ch case    4:*/		return 0x8214FD70;
		  /* 8214FD70h */ case    5:  		/* lwz R10, <#[R1 + 108]> */
		/* 8214FD70h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000006C) );
		/* 8214FD70h case    5:*/		return 0x8214FD74;
		  /* 8214FD74h */ case    6:  		/* rlwinm R11, R30, 2, 0, 29 */
		/* 8214FD74h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R30);
		/* 8214FD74h case    6:*/		return 0x8214FD78;
		  /* 8214FD78h */ case    7:  		/* add R29, R11, R10 */
		/* 8214FD78h case    7:*/		cpu::op::add<0>(regs,&regs.R29,regs.R11,regs.R10);
		/* 8214FD78h case    7:*/		return 0x8214FD7C;
		  /* 8214FD7Ch */ case    8:  		/* lwz R14, <#[R29]> */
		/* 8214FD7Ch case    8:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R29 + 0x00000000) );
		/* 8214FD7Ch case    8:*/		return 0x8214FD80;
		  /* 8214FD80h */ case    9:  		/* mr R4, R23 */
		/* 8214FD80h case    9:*/		regs.R4 = regs.R23;
		/* 8214FD80h case    9:*/		return 0x8214FD84;
		  /* 8214FD84h */ case   10:  		/* mr R5, R30 */
		/* 8214FD84h case   10:*/		regs.R5 = regs.R30;
		/* 8214FD84h case   10:*/		return 0x8214FD88;
		  /* 8214FD88h */ case   11:  		/* rlwinm R6, R14, 0, 20, 31 */
		/* 8214FD88h case   11:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R6,regs.R14);
		/* 8214FD88h case   11:*/		return 0x8214FD8C;
		  /* 8214FD8Ch */ case   12:  		/* mr R3, R31 */
		/* 8214FD8Ch case   12:*/		regs.R3 = regs.R31;
		/* 8214FD8Ch case   12:*/		return 0x8214FD90;
		  /* 8214FD90h */ case   13:  		/* bl -7544 */
		/* 8214FD90h case   13:*/		regs.LR = 0x8214FD94; return 0x8214E018;
		/* 8214FD90h case   13:*/		return 0x8214FD94;
		  /* 8214FD94h */ case   14:  		/* mr R4, R26 */
		/* 8214FD94h case   14:*/		regs.R4 = regs.R26;
		/* 8214FD94h case   14:*/		return 0x8214FD98;
		  /* 8214FD98h */ case   15:  		/* mr R3, R31 */
		/* 8214FD98h case   15:*/		regs.R3 = regs.R31;
		/* 8214FD98h case   15:*/		return 0x8214FD9C;
		  /* 8214FD9Ch */ case   16:  		/* bl -4844 */
		/* 8214FD9Ch case   16:*/		regs.LR = 0x8214FDA0; return 0x8214EAB0;
		/* 8214FD9Ch case   16:*/		return 0x8214FDA0;
		  /* 8214FDA0h */ case   17:  		/* mr R4, R27 */
		/* 8214FDA0h case   17:*/		regs.R4 = regs.R27;
		/* 8214FDA0h case   17:*/		return 0x8214FDA4;
		  /* 8214FDA4h */ case   18:  		/* mr R3, R31 */
		/* 8214FDA4h case   18:*/		regs.R3 = regs.R31;
		/* 8214FDA4h case   18:*/		return 0x8214FDA8;
		  /* 8214FDA8h */ case   19:  		/* bl -7568 */
		/* 8214FDA8h case   19:*/		regs.LR = 0x8214FDAC; return 0x8214E018;
		/* 8214FDA8h case   19:*/		return 0x8214FDAC;
		  /* 8214FDACh */ case   20:  		/* rlwinm. R11, R14, 0, 19, 19 */
		/* 8214FDACh case   20:*/		cpu::op::rlwinm<1,0,19,19>(regs,&regs.R11,regs.R14);
		/* 8214FDACh case   20:*/		return 0x8214FDB0;
		  /* 8214FDB0h */ case   21:  		/* lwz R14, <#[R1 + 96]> */
		/* 8214FDB0h case   21:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R1 + 0x00000060) );
		/* 8214FDB0h case   21:*/		return 0x8214FDB4;
		  /* 8214FDB4h */ case   22:  		/* bc 4, CR0_EQ, 20 */
		/* 8214FDB4h case   22:*/		if ( !regs.CR[0].eq ) { return 0x8214FDC8;  }
		/* 8214FDB4h case   22:*/		return 0x8214FDB8;
		  /* 8214FDB8h */ case   23:  		/* addi R30, R30, 1 */
		/* 8214FDB8h case   23:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8214FDB8h case   23:*/		return 0x8214FDBC;
		  /* 8214FDBCh */ case   24:  		/* addi R29, R29, 4 */
		/* 8214FDBCh case   24:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8214FDBCh case   24:*/		return 0x8214FDC0;
		  /* 8214FDC0h */ case   25:  		/* cmplw CR6, R30, R14 */
		/* 8214FDC0h case   25:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R14);
		/* 8214FDC0h case   25:*/		return 0x8214FDC4;
		  /* 8214FDC4h */ case   26:  		/* bc 12, CR6_LT, -72 */
		/* 8214FDC4h case   26:*/		if ( regs.CR[6].lt ) { return 0x8214FD7C;  }
		/* 8214FDC4h case   26:*/		return 0x8214FDC8;
	}
	return 0x8214FDC8;
} // Block from 8214FD5Ch-8214FDC8h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8214FDC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FDC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FDC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FDC8);
		  /* 8214FDC8h */ case    0:  		/* cmplw CR6, R30, R14 */
		/* 8214FDC8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R14);
		/* 8214FDC8h case    0:*/		return 0x8214FDCC;
		  /* 8214FDCCh */ case    1:  		/* bc 12, CR6_LT, 40 */
		/* 8214FDCCh case    1:*/		if ( regs.CR[6].lt ) { return 0x8214FDF4;  }
		/* 8214FDCCh case    1:*/		return 0x8214FDD0;
	}
	return 0x8214FDD0;
} // Block from 8214FDC8h-8214FDD0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214FDD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FDD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FDD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FDD0);
		  /* 8214FDD0h */ case    0:  		/* mr R4, R20 */
		/* 8214FDD0h case    0:*/		regs.R4 = regs.R20;
		/* 8214FDD0h case    0:*/		return 0x8214FDD4;
		  /* 8214FDD4h */ case    1:  		/* mr R3, R31 */
		/* 8214FDD4h case    1:*/		regs.R3 = regs.R31;
		/* 8214FDD4h case    1:*/		return 0x8214FDD8;
		  /* 8214FDD8h */ case    2:  		/* bl -7616 */
		/* 8214FDD8h case    2:*/		regs.LR = 0x8214FDDC; return 0x8214E018;
		/* 8214FDD8h case    2:*/		return 0x8214FDDC;
		  /* 8214FDDCh */ case    3:  		/* mr R4, R26 */
		/* 8214FDDCh case    3:*/		regs.R4 = regs.R26;
		/* 8214FDDCh case    3:*/		return 0x8214FDE0;
		  /* 8214FDE0h */ case    4:  		/* mr R3, R31 */
		/* 8214FDE0h case    4:*/		regs.R3 = regs.R31;
		/* 8214FDE0h case    4:*/		return 0x8214FDE4;
		  /* 8214FDE4h */ case    5:  		/* bl -4916 */
		/* 8214FDE4h case    5:*/		regs.LR = 0x8214FDE8; return 0x8214EAB0;
		/* 8214FDE4h case    5:*/		return 0x8214FDE8;
		  /* 8214FDE8h */ case    6:  		/* mr R4, R27 */
		/* 8214FDE8h case    6:*/		regs.R4 = regs.R27;
		/* 8214FDE8h case    6:*/		return 0x8214FDEC;
		  /* 8214FDECh */ case    7:  		/* mr R3, R31 */
		/* 8214FDECh case    7:*/		regs.R3 = regs.R31;
		/* 8214FDECh case    7:*/		return 0x8214FDF0;
		  /* 8214FDF0h */ case    8:  		/* bl -7640 */
		/* 8214FDF0h case    8:*/		regs.LR = 0x8214FDF4; return 0x8214E018;
		/* 8214FDF0h case    8:*/		return 0x8214FDF4;
	}
	return 0x8214FDF4;
} // Block from 8214FDD0h-8214FDF4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8214FDF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FDF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FDF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FDF4);
		  /* 8214FDF4h */ case    0:  		/* mr R4, R26 */
		/* 8214FDF4h case    0:*/		regs.R4 = regs.R26;
		/* 8214FDF4h case    0:*/		return 0x8214FDF8;
		  /* 8214FDF8h */ case    1:  		/* mr R3, R31 */
		/* 8214FDF8h case    1:*/		regs.R3 = regs.R31;
		/* 8214FDF8h case    1:*/		return 0x8214FDFC;
		  /* 8214FDFCh */ case    2:  		/* bl -4940 */
		/* 8214FDFCh case    2:*/		regs.LR = 0x8214FE00; return 0x8214EAB0;
		/* 8214FDFCh case    2:*/		return 0x8214FE00;
		  /* 8214FE00h */ case    3:  		/* mr R4, R27 */
		/* 8214FE00h case    3:*/		regs.R4 = regs.R27;
		/* 8214FE00h case    3:*/		return 0x8214FE04;
		  /* 8214FE04h */ case    4:  		/* mr R3, R31 */
		/* 8214FE04h case    4:*/		regs.R3 = regs.R31;
		/* 8214FE04h case    4:*/		return 0x8214FE08;
		  /* 8214FE08h */ case    5:  		/* bl -7664 */
		/* 8214FE08h case    5:*/		regs.LR = 0x8214FE0C; return 0x8214E018;
		/* 8214FE08h case    5:*/		return 0x8214FE0C;
		  /* 8214FE0Ch */ case    6:  		/* addi R28, R28, 1 */
		/* 8214FE0Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 8214FE0Ch case    6:*/		return 0x8214FE10;
		  /* 8214FE10h */ case    7:  		/* addi R22, R22, 4 */
		/* 8214FE10h case    7:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x4);
		/* 8214FE10h case    7:*/		return 0x8214FE14;
		  /* 8214FE14h */ case    8:  		/* cmplw CR6, R28, R21 */
		/* 8214FE14h case    8:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R21);
		/* 8214FE14h case    8:*/		return 0x8214FE18;
		  /* 8214FE18h */ case    9:  		/* bc 12, CR6_LT, -392 */
		/* 8214FE18h case    9:*/		if ( regs.CR[6].lt ) { return 0x8214FC90;  }
		/* 8214FE18h case    9:*/		return 0x8214FE1C;
		  /* 8214FE1Ch */ case   10:  		/* lwz R15, <#[R1 + 112]> */
		/* 8214FE1Ch case   10:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R1 + 0x00000070) );
		/* 8214FE1Ch case   10:*/		return 0x8214FE20;
	}
	return 0x8214FE20;
} // Block from 8214FDF4h-8214FE20h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8214FE20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FE20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FE20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FE20);
		  /* 8214FE20h */ case    0:  		/* mr R4, R15 */
		/* 8214FE20h case    0:*/		regs.R4 = regs.R15;
		/* 8214FE20h case    0:*/		return 0x8214FE24;
		  /* 8214FE24h */ case    1:  		/* mr R3, R31 */
		/* 8214FE24h case    1:*/		regs.R3 = regs.R31;
		/* 8214FE24h case    1:*/		return 0x8214FE28;
		  /* 8214FE28h */ case    2:  		/* bl -4984 */
		/* 8214FE28h case    2:*/		regs.LR = 0x8214FE2C; return 0x8214EAB0;
		/* 8214FE28h case    2:*/		return 0x8214FE2C;
	}
	return 0x8214FE2C;
} // Block from 8214FE20h-8214FE2Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214FE2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FE2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FE2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FE2C);
		  /* 8214FE2Ch */ case    0:  		/* lwz R3, <#[R1 + 116]> */
		/* 8214FE2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000074) );
		/* 8214FE2Ch case    0:*/		return 0x8214FE30;
		  /* 8214FE30h */ case    1:  		/* addi R1, R1, 272 */
		/* 8214FE30h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x110);
		/* 8214FE30h case    1:*/		return 0x8214FE34;
		  /* 8214FE34h */ case    2:  		/* b -781252 */
		/* 8214FE34h case    2:*/		return 0x82091270;
		/* 8214FE34h case    2:*/		return 0x8214FE38;
	}
	return 0x8214FE38;
} // Block from 8214FE2Ch-8214FE38h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214FE38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FE38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FE38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FE38);
		  /* 8214FE38h */ case    0:  		/* mfspr R12, LR */
		/* 8214FE38h case    0:*/		regs.R12 = regs.LR;
		/* 8214FE38h case    0:*/		return 0x8214FE3C;
		  /* 8214FE3Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8214FE3Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214FE3Ch case    1:*/		return 0x8214FE40;
		  /* 8214FE40h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 8214FE40h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214FE40h case    2:*/		return 0x8214FE44;
		  /* 8214FE44h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8214FE44h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8214FE44h case    3:*/		return 0x8214FE48;
		  /* 8214FE48h */ case    4:  		/* mr R31, R3 */
		/* 8214FE48h case    4:*/		regs.R31 = regs.R3;
		/* 8214FE48h case    4:*/		return 0x8214FE4C;
		  /* 8214FE4Ch */ case    5:  		/* mr R11, R5 */
		/* 8214FE4Ch case    5:*/		regs.R11 = regs.R5;
		/* 8214FE4Ch case    5:*/		return 0x8214FE50;
		  /* 8214FE50h */ case    6:  		/* mr R5, R7 */
		/* 8214FE50h case    6:*/		regs.R5 = regs.R7;
		/* 8214FE50h case    6:*/		return 0x8214FE54;
		  /* 8214FE54h */ case    7:  		/* li R3, 0 */
		/* 8214FE54h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8214FE54h case    7:*/		return 0x8214FE58;
		  /* 8214FE58h */ case    8:  		/* cmplwi CR6, R6, 36 */
		/* 8214FE58h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000024);
		/* 8214FE58h case    8:*/		return 0x8214FE5C;
		  /* 8214FE5Ch */ case    9:  		/* bc 4, CR6_LT, 12 */
		/* 8214FE5Ch case    9:*/		if ( !regs.CR[6].lt ) { return 0x8214FE68;  }
		/* 8214FE5Ch case    9:*/		return 0x8214FE60;
		  /* 8214FE60h */ case   10:  		/* lis R3, -32761 */
		/* 8214FE60h case   10:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8214FE60h case   10:*/		return 0x8214FE64;
		  /* 8214FE64h */ case   11:  		/* ori R3, R3, 87 */
		/* 8214FE64h case   11:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x57);
		/* 8214FE64h case   11:*/		return 0x8214FE68;
	}
	return 0x8214FE68;
} // Block from 8214FE38h-8214FE68h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8214FE68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FE68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FE68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FE68);
		  /* 8214FE68h */ case    0:  		/* addi R10, R10, 3 */
		/* 8214FE68h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x3);
		/* 8214FE68h case    0:*/		return 0x8214FE6C;
		  /* 8214FE6Ch */ case    1:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 8214FE6Ch case    1:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 8214FE6Ch case    1:*/		return 0x8214FE70;
		  /* 8214FE70h */ case    2:  		/* lwzx R10, <#[R10 + R11]> */
		/* 8214FE70h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8214FE70h case    2:*/		return 0x8214FE74;
		  /* 8214FE74h */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 8214FE74h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8214FE74h case    3:*/		return 0x8214FE78;
		  /* 8214FE78h */ case    4:  		/* bc 12, CR6_EQ, 84 */
		/* 8214FE78h case    4:*/		if ( regs.CR[6].eq ) { return 0x8214FECC;  }
		/* 8214FE78h case    4:*/		return 0x8214FE7C;
		  /* 8214FE7Ch */ case    5:  		/* add R11, R10, R11 */
		/* 8214FE7Ch case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8214FE7Ch case    5:*/		return 0x8214FE80;
		  /* 8214FE80h */ case    6:  		/* cmpwi CR6, R3, 0 */
		/* 8214FE80h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 8214FE80h case    6:*/		return 0x8214FE84;
		  /* 8214FE84h */ case    7:  		/* bc 12, CR6_LT, 72 */
		/* 8214FE84h case    7:*/		if ( regs.CR[6].lt ) { return 0x8214FECC;  }
		/* 8214FE84h case    7:*/		return 0x8214FE88;
		  /* 8214FE88h */ case    8:  		/* cmplwi CR6, R4, 1 */
		/* 8214FE88h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000001);
		/* 8214FE88h case    8:*/		return 0x8214FE8C;
		  /* 8214FE8Ch */ case    9:  		/* bc 12, CR6_LT, 44 */
		/* 8214FE8Ch case    9:*/		if ( regs.CR[6].lt ) { return 0x8214FEB8;  }
		/* 8214FE8Ch case    9:*/		return 0x8214FE90;
		  /* 8214FE90h */ case   10:  		/* bc 12, CR6_EQ, 16 */
		/* 8214FE90h case   10:*/		if ( regs.CR[6].eq ) { return 0x8214FEA0;  }
		/* 8214FE90h case   10:*/		return 0x8214FE94;
		  /* 8214FE94h */ case   11:  		/* lis R3, -32761 */
		/* 8214FE94h case   11:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8214FE94h case   11:*/		return 0x8214FE98;
	}
	return 0x8214FE98;
} // Block from 8214FE68h-8214FE98h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8214FE98h
// Function '?R500D3DShaderTokensToMicrocode@XGRAPHICS@@YAJPBKKPAKK1KPAXP6AX2HKPBD@ZPAUID3DXConstantTable@@PAU_UCODE_DEBUGGER_PARAMETERS@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FE98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FE98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FE98);
		  /* 8214FE98h */ case    0:  		/* ori R3, R3, 87 */
		/* 8214FE98h case    0:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x57);
		/* 8214FE98h case    0:*/		return 0x8214FE9C;
		  /* 8214FE9Ch */ case    1:  		/* b 48 */
		/* 8214FE9Ch case    1:*/		return 0x8214FECC;
		/* 8214FE9Ch case    1:*/		return 0x8214FEA0;
	}
	return 0x8214FEA0;
} // Block from 8214FE98h-8214FEA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214FEA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FEA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FEA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FEA0);
		  /* 8214FEA0h */ case    0:  		/* mr R7, R31 */
		/* 8214FEA0h case    0:*/		regs.R7 = regs.R31;
		/* 8214FEA0h case    0:*/		return 0x8214FEA4;
		  /* 8214FEA4h */ case    1:  		/* mr R6, R8 */
		/* 8214FEA4h case    1:*/		regs.R6 = regs.R8;
		/* 8214FEA4h case    1:*/		return 0x8214FEA8;
		  /* 8214FEA8h */ case    2:  		/* mr R4, R9 */
		/* 8214FEA8h case    2:*/		regs.R4 = regs.R9;
		/* 8214FEA8h case    2:*/		return 0x8214FEAC;
		  /* 8214FEACh */ case    3:  		/* mr R3, R11 */
		/* 8214FEACh case    3:*/		regs.R3 = regs.R11;
		/* 8214FEACh case    3:*/		return 0x8214FEB0;
		  /* 8214FEB0h */ case    4:  		/* bl -1184 */
		/* 8214FEB0h case    4:*/		regs.LR = 0x8214FEB4; return 0x8214FA10;
		/* 8214FEB0h case    4:*/		return 0x8214FEB4;
		  /* 8214FEB4h */ case    5:  		/* b 24 */
		/* 8214FEB4h case    5:*/		return 0x8214FECC;
		/* 8214FEB4h case    5:*/		return 0x8214FEB8;
	}
	return 0x8214FEB8;
} // Block from 8214FEA0h-8214FEB8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8214FEB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FEB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FEB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FEB8);
		  /* 8214FEB8h */ case    0:  		/* mr R7, R31 */
		/* 8214FEB8h case    0:*/		regs.R7 = regs.R31;
		/* 8214FEB8h case    0:*/		return 0x8214FEBC;
		  /* 8214FEBCh */ case    1:  		/* mr R6, R8 */
		/* 8214FEBCh case    1:*/		regs.R6 = regs.R8;
		/* 8214FEBCh case    1:*/		return 0x8214FEC0;
		  /* 8214FEC0h */ case    2:  		/* mr R4, R9 */
		/* 8214FEC0h case    2:*/		regs.R4 = regs.R9;
		/* 8214FEC0h case    2:*/		return 0x8214FEC4;
		  /* 8214FEC4h */ case    3:  		/* mr R3, R11 */
		/* 8214FEC4h case    3:*/		regs.R3 = regs.R11;
		/* 8214FEC4h case    3:*/		return 0x8214FEC8;
		  /* 8214FEC8h */ case    4:  		/* bl -1848 */
		/* 8214FEC8h case    4:*/		regs.LR = 0x8214FECC; return 0x8214F790;
		/* 8214FEC8h case    4:*/		return 0x8214FECC;
	}
	return 0x8214FECC;
} // Block from 8214FEB8h-8214FECCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214FECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FECC);
		  /* 8214FECCh */ case    0:  		/* addi R1, R1, 96 */
		/* 8214FECCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8214FECCh case    0:*/		return 0x8214FED0;
		  /* 8214FED0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8214FED0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8214FED0h case    1:*/		return 0x8214FED4;
		  /* 8214FED4h */ case    2:  		/* mtspr LR, R12 */
		/* 8214FED4h case    2:*/		regs.LR = regs.R12;
		/* 8214FED4h case    2:*/		return 0x8214FED8;
		  /* 8214FED8h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 8214FED8h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8214FED8h case    3:*/		return 0x8214FEDC;
		  /* 8214FEDCh */ case    4:  		/* bclr 20, CR0_LT */
		/* 8214FEDCh case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214FEDCh case    4:*/		return 0x8214FEE0;
	}
	return 0x8214FEE0;
} // Block from 8214FECCh-8214FEE0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8214FEE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FEE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FEE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FEE0);
		  /* 8214FEE0h */ case    0:  		/* lwz R17, <#[R6 - 11576]> */
		/* 8214FEE0h case    0:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R6 + 0xFFFFD2C8) );
		/* 8214FEE0h case    0:*/		return 0x8214FEE4;
		  /* 8214FEE4h */ case    1:  		/* lwz R16, <#[R4 - 15024]> */
		/* 8214FEE4h case    1:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R4 + 0xFFFFC550) );
		/* 8214FEE4h case    1:*/		return 0x8214FEE8;
	}
	return 0x8214FEE8;
} // Block from 8214FEE0h-8214FEE8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214FEE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FEE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FEE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FEE8);
		  /* 8214FEE8h */ case    0:  		/* mfspr R12, LR */
		/* 8214FEE8h case    0:*/		regs.R12 = regs.LR;
		/* 8214FEE8h case    0:*/		return 0x8214FEEC;
		  /* 8214FEECh */ case    1:  		/* bl -781460 */
		/* 8214FEECh case    1:*/		regs.LR = 0x8214FEF0; return 0x82091258;
		/* 8214FEECh case    1:*/		return 0x8214FEF0;
		  /* 8214FEF0h */ case    2:  		/* addi R31, R1, -144 */
		/* 8214FEF0h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0xFFFFFF70);
		/* 8214FEF0h case    2:*/		return 0x8214FEF4;
		  /* 8214FEF4h */ case    3:  		/* stwu R1, <#[R1 - 144]> */
		/* 8214FEF4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8214FEF4h case    3:*/		return 0x8214FEF8;
		  /* 8214FEF8h */ case    4:  		/* mr R29, R9 */
		/* 8214FEF8h case    4:*/		regs.R29 = regs.R9;
		/* 8214FEF8h case    4:*/		return 0x8214FEFC;
		  /* 8214FEFCh */ case    5:  		/* stw R9, <#[R31 + 212]> */
		/* 8214FEFCh case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x000000D4) );
		/* 8214FEFCh case    5:*/		return 0x8214FF00;
		  /* 8214FF00h */ case    6:  		/* mr R28, R10 */
		/* 8214FF00h case    6:*/		regs.R28 = regs.R10;
		/* 8214FF00h case    6:*/		return 0x8214FF04;
		  /* 8214FF04h */ case    7:  		/* stw R10, <#[R31 + 220]> */
		/* 8214FF04h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x000000DC) );
		/* 8214FF04h case    7:*/		return 0x8214FF08;
		  /* 8214FF08h */ case    8:  		/* cmplwi CR6, R3, 0 */
		/* 8214FF08h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8214FF08h case    8:*/		return 0x8214FF0C;
		  /* 8214FF0Ch */ case    9:  		/* bc 4, CR6_EQ, 16 */
		/* 8214FF0Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8214FF1C;  }
		/* 8214FF0Ch case    9:*/		return 0x8214FF10;
		  /* 8214FF10h */ case   10:  		/* lis R3, -32761 */
		/* 8214FF10h case   10:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 8214FF10h case   10:*/		return 0x8214FF14;
		  /* 8214FF14h */ case   11:  		/* ori R3, R3, 87 */
		/* 8214FF14h case   11:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x57);
		/* 8214FF14h case   11:*/		return 0x8214FF18;
		  /* 8214FF18h */ case   12:  		/* b 184 */
		/* 8214FF18h case   12:*/		return 0x8214FFD0;
		/* 8214FF18h case   12:*/		return 0x8214FF1C;
	}
	return 0x8214FF1C;
} // Block from 8214FEE8h-8214FF1Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8214FF1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FF1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FF1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FF1C);
		  /* 8214FF1Ch */ case    0:  		/* cmplwi CR6, R4, 4 */
		/* 8214FF1Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000004);
		/* 8214FF1Ch case    0:*/		return 0x8214FF20;
		  /* 8214FF20h */ case    1:  		/* bc 12, CR6_LT, -16 */
		/* 8214FF20h case    1:*/		if ( regs.CR[6].lt ) { return 0x8214FF10;  }
		/* 8214FF20h case    1:*/		return 0x8214FF24;
		  /* 8214FF24h */ case    2:  		/* cmplwi CR6, R5, 0 */
		/* 8214FF24h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8214FF24h case    2:*/		return 0x8214FF28;
		  /* 8214FF28h */ case    3:  		/* bc 12, CR6_EQ, -24 */
		/* 8214FF28h case    3:*/		if ( regs.CR[6].eq ) { return 0x8214FF10;  }
		/* 8214FF28h case    3:*/		return 0x8214FF2C;
		  /* 8214FF2Ch */ case    4:  		/* cmplwi CR6, R7, 0 */
		/* 8214FF2Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 8214FF2Ch case    4:*/		return 0x8214FF30;
		  /* 8214FF30h */ case    5:  		/* bc 12, CR6_EQ, -32 */
		/* 8214FF30h case    5:*/		if ( regs.CR[6].eq ) { return 0x8214FF10;  }
		/* 8214FF30h case    5:*/		return 0x8214FF34;
		  /* 8214FF34h */ case    6:  		/* nop */
		/* 8214FF34h case    6:*/		cpu::op::nop();
		/* 8214FF34h case    6:*/		return 0x8214FF38;
	}
	return 0x8214FF38;
} // Block from 8214FF1Ch-8214FF38h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8214FF38h
// Function '?DisassembleR500MicrocodeCommon@XGRAPHICS@@YAJKHKPBU_UCODE_R500UCODE_COMMON@@PAVOutStream@1@PBXKPAPBX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FF38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FF38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FF38);
		  /* 8214FF38h */ case    0:  		/* nop */
		/* 8214FF38h case    0:*/		cpu::op::nop();
		/* 8214FF38h case    0:*/		return 0x8214FF3C;
	}
	return 0x8214FF3C;
} // Block from 8214FF38h-8214FF3Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214FF3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FF3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FF3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FF3C);
		  /* 8214FF3Ch */ case    0:  		/* lwz R11, <#[R31 + 236]> */
		/* 8214FF3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000EC) );
		/* 8214FF3Ch case    0:*/		return 0x8214FF40;
		  /* 8214FF40h */ case    1:  		/* mr R10, R28 */
		/* 8214FF40h case    1:*/		regs.R10 = regs.R28;
		/* 8214FF40h case    1:*/		return 0x8214FF44;
		  /* 8214FF44h */ case    2:  		/* lwz R30, <#[R31 + 228]> */
		/* 8214FF44h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x000000E4) );
		/* 8214FF44h case    2:*/		return 0x8214FF48;
		  /* 8214FF48h */ case    3:  		/* mr R9, R29 */
		/* 8214FF48h case    3:*/		regs.R9 = regs.R29;
		/* 8214FF48h case    3:*/		return 0x8214FF4C;
		  /* 8214FF4Ch */ case    4:  		/* stw R11, <#[R1 + 92]> */
		/* 8214FF4Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8214FF4Ch case    4:*/		return 0x8214FF50;
		  /* 8214FF50h */ case    5:  		/* stw R30, <#[R1 + 84]> */
		/* 8214FF50h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 8214FF50h case    5:*/		return 0x8214FF54;
		  /* 8214FF54h */ case    6:  		/* bl -2684 */
		/* 8214FF54h case    6:*/		regs.LR = 0x8214FF58; return 0x8214F4D8;
		/* 8214FF54h case    6:*/		return 0x8214FF58;
		  /* 8214FF58h */ case    7:  		/* or. R30, R3, R3 */
		/* 8214FF58h case    7:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8214FF58h case    7:*/		return 0x8214FF5C;
		  /* 8214FF5Ch */ case    8:  		/* stw R30, <#[R31 + 96]> */
		/* 8214FF5Ch case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000060) );
		/* 8214FF5Ch case    8:*/		return 0x8214FF60;
		  /* 8214FF60h */ case    9:  		/* bc 4, CR0_LT, 48 */
		/* 8214FF60h case    9:*/		if ( !regs.CR[0].lt ) { return 0x8214FF90;  }
		/* 8214FF60h case    9:*/		return 0x8214FF64;
		  /* 8214FF64h */ case   10:  		/* lis R11, -30602 */
		/* 8214FF64h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8876);
		/* 8214FF64h case   10:*/		return 0x8214FF68;
		  /* 8214FF68h */ case   11:  		/* ori R11, R11, 2921 */
		/* 8214FF68h case   11:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xB69);
		/* 8214FF68h case   11:*/		return 0x8214FF6C;
		  /* 8214FF6Ch */ case   12:  		/* cmpw CR6, R30, R11 */
		/* 8214FF6Ch case   12:*/		cpu::op::cmpw<6>(regs,regs.R30,regs.R11);
		/* 8214FF6Ch case   12:*/		return 0x8214FF70;
		  /* 8214FF70h */ case   13:  		/* bc 4, CR6_EQ, 32 */
		/* 8214FF70h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8214FF90;  }
		/* 8214FF70h case   13:*/		return 0x8214FF74;
		  /* 8214FF74h */ case   14:  		/* lis R11, -32253 */
		/* 8214FF74h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8214FF74h case   14:*/		return 0x8214FF78;
		  /* 8214FF78h */ case   15:  		/* mtspr CTR, R28 */
		/* 8214FF78h case   15:*/		regs.CTR = regs.R28;
		/* 8214FF78h case   15:*/		return 0x8214FF7C;
		  /* 8214FF7Ch */ case   16:  		/* li R5, 48 */
		/* 8214FF7Ch case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x30);
		/* 8214FF7Ch case   16:*/		return 0x8214FF80;
		  /* 8214FF80h */ case   17:  		/* addi R6, R11, 29008 */
		/* 8214FF80h case   17:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x7150);
		/* 8214FF80h case   17:*/		return 0x8214FF84;
		  /* 8214FF84h */ case   18:  		/* li R4, 1 */
		/* 8214FF84h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8214FF84h case   18:*/		return 0x8214FF88;
		  /* 8214FF88h */ case   19:  		/* mr R3, R29 */
		/* 8214FF88h case   19:*/		regs.R3 = regs.R29;
		/* 8214FF88h case   19:*/		return 0x8214FF8C;
		  /* 8214FF8Ch */ case   20:  		/* bcctrl 20, CR0_LT */
		/* 8214FF8Ch case   20:*/		if ( 1 ) { regs.LR = 0x8214FF90; return (uint32)regs.CTR; }
		/* 8214FF8Ch case   20:*/		return 0x8214FF90;
	}
	return 0x8214FF90;
} // Block from 8214FF3Ch-8214FF90h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8214FF90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FF90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FF90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FF90);
		  /* 8214FF90h */ case    0:  		/* nop */
		/* 8214FF90h case    0:*/		cpu::op::nop();
		/* 8214FF90h case    0:*/		return 0x8214FF94;
		  /* 8214FF94h */ case    1:  		/* nop */
		/* 8214FF94h case    1:*/		cpu::op::nop();
		/* 8214FF94h case    1:*/		return 0x8214FF98;
		  /* 8214FF98h */ case    2:  		/* nop */
		/* 8214FF98h case    2:*/		cpu::op::nop();
		/* 8214FF98h case    2:*/		return 0x8214FF9C;
		  /* 8214FF9Ch */ case    3:  		/* b 48 */
		/* 8214FF9Ch case    3:*/		return 0x8214FFCC;
		/* 8214FF9Ch case    3:*/		return 0x8214FFA0;
	}
	return 0x8214FFA0;
} // Block from 8214FF90h-8214FFA0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8214FFA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FFA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FFA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FFA0);
		  /* 8214FFA0h */ case    0:  		/* lwz R11, <#[R31 + 220]> */
		/* 8214FFA0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000DC) );
		/* 8214FFA0h case    0:*/		return 0x8214FFA4;
		  /* 8214FFA4h */ case    1:  		/* lis R10, -32253 */
		/* 8214FFA4h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8214FFA4h case    1:*/		return 0x8214FFA8;
		  /* 8214FFA8h */ case    2:  		/* li R5, 47 */
		/* 8214FFA8h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x2F);
		/* 8214FFA8h case    2:*/		return 0x8214FFAC;
		  /* 8214FFACh */ case    3:  		/* lwz R3, <#[R31 + 212]> */
		/* 8214FFACh case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000D4) );
		/* 8214FFACh case    3:*/		return 0x8214FFB0;
		  /* 8214FFB0h */ case    4:  		/* addi R6, R10, 28952 */
		/* 8214FFB0h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x7118);
		/* 8214FFB0h case    4:*/		return 0x8214FFB4;
		  /* 8214FFB4h */ case    5:  		/* li R4, 1 */
		/* 8214FFB4h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8214FFB4h case    5:*/		return 0x8214FFB8;
		  /* 8214FFB8h */ case    6:  		/* mtspr CTR, R11 */
		/* 8214FFB8h case    6:*/		regs.CTR = regs.R11;
		/* 8214FFB8h case    6:*/		return 0x8214FFBC;
		  /* 8214FFBCh */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 8214FFBCh case    7:*/		if ( 1 ) { regs.LR = 0x8214FFC0; return (uint32)regs.CTR; }
		/* 8214FFBCh case    7:*/		return 0x8214FFC0;
		  /* 8214FFC0h */ case    8:  		/* lis R30, -32768 */
		/* 8214FFC0h case    8:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8000);
		/* 8214FFC0h case    8:*/		return 0x8214FFC4;
		  /* 8214FFC4h */ case    9:  		/* ori R30, R30, 16389 */
		/* 8214FFC4h case    9:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0x4005);
		/* 8214FFC4h case    9:*/		return 0x8214FFC8;
		  /* 8214FFC8h */ case   10:  		/* stw R30, <#[R31 + 96]> */
		/* 8214FFC8h case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000060) );
		/* 8214FFC8h case   10:*/		return 0x8214FFCC;
	}
	return 0x8214FFCC;
} // Block from 8214FFA0h-8214FFCCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 8214FFCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FFCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FFCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FFCC);
		  /* 8214FFCCh */ case    0:  		/* mr R3, R30 */
		/* 8214FFCCh case    0:*/		regs.R3 = regs.R30;
		/* 8214FFCCh case    0:*/		return 0x8214FFD0;
	}
	return 0x8214FFD0;
} // Block from 8214FFCCh-8214FFD0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214FFD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FFD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FFD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FFD0);
		  /* 8214FFD0h */ case    0:  		/* addi R1, R31, 144 */
		/* 8214FFD0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R31,0x90);
		/* 8214FFD0h case    0:*/		return 0x8214FFD4;
		  /* 8214FFD4h */ case    1:  		/* b -781612 */
		/* 8214FFD4h case    1:*/		return 0x820912A8;
		/* 8214FFD4h case    1:*/		return 0x8214FFD8;
	}
	return 0x8214FFD8;
} // Block from 8214FFD0h-8214FFD8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8214FFD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FFD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FFD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FFD8);
		  /* 8214FFD8h */ case    0:  		/* li R3, 1 */
		/* 8214FFD8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8214FFD8h case    0:*/		return 0x8214FFDC;
		  /* 8214FFDCh */ case    1:  		/* nop */
		/* 8214FFDCh case    1:*/		cpu::op::nop();
		/* 8214FFDCh case    1:*/		return 0x8214FFE0;
		  /* 8214FFE0h */ case    2:  		/* bclr 20, CR0_LT */
		/* 8214FFE0h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8214FFE0h case    2:*/		return 0x8214FFE4;
	}
	return 0x8214FFE4;
} // Block from 8214FFD8h-8214FFE4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8214FFE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FFE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FFE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FFE4);
		  /* 8214FFE4h */ case    0:  		/* nop */
		/* 8214FFE4h case    0:*/		cpu::op::nop();
		/* 8214FFE4h case    0:*/		return 0x8214FFE8;
	}
	return 0x8214FFE8;
} // Block from 8214FFE4h-8214FFE8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8214FFE8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8214FFE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8214FFE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8214FFE8);
		  /* 8214FFE8h */ case    0:  		/* mfspr R12, LR */
		/* 8214FFE8h case    0:*/		regs.R12 = regs.LR;
		/* 8214FFE8h case    0:*/		return 0x8214FFEC;
		  /* 8214FFECh */ case    1:  		/* bl -781736 */
		/* 8214FFECh case    1:*/		regs.LR = 0x8214FFF0; return 0x82091244;
		/* 8214FFECh case    1:*/		return 0x8214FFF0;
		  /* 8214FFF0h */ case    2:  		/* stwu R1, <#[R1 - 720]> */
		/* 8214FFF0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFD30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFD30);
		/* 8214FFF0h case    2:*/		return 0x8214FFF4;
		  /* 8214FFF4h */ case    3:  		/* mr R27, R3 */
		/* 8214FFF4h case    3:*/		regs.R27 = regs.R3;
		/* 8214FFF4h case    3:*/		return 0x8214FFF8;
		  /* 8214FFF8h */ case    4:  		/* mr R26, R4 */
		/* 8214FFF8h case    4:*/		regs.R26 = regs.R4;
		/* 8214FFF8h case    4:*/		return 0x8214FFFC;
		  /* 8214FFFCh */ case    5:  		/* lis R4, 9351 */
		/* 8214FFFCh case    5:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 8214FFFCh case    5:*/		return 0x82150000;
		  /* 82150000h */ case    6:  		/* mr R3, R6 */
		/* 82150000h case    6:*/		regs.R3 = regs.R6;
		/* 82150000h case    6:*/		return 0x82150004;
		  /* 82150004h */ case    7:  		/* mr R23, R5 */
		/* 82150004h case    7:*/		regs.R23 = regs.R5;
		/* 82150004h case    7:*/		return 0x82150008;
		  /* 82150008h */ case    8:  		/* mr R30, R6 */
		/* 82150008h case    8:*/		regs.R30 = regs.R6;
		/* 82150008h case    8:*/		return 0x8215000C;
		  /* 8215000Ch */ case    9:  		/* mr R25, R7 */
		/* 8215000Ch case    9:*/		regs.R25 = regs.R7;
		/* 8215000Ch case    9:*/		return 0x82150010;
		  /* 82150010h */ case   10:  		/* mr R24, R8 */
		/* 82150010h case   10:*/		regs.R24 = regs.R8;
		/* 82150010h case   10:*/		return 0x82150014;
		  /* 82150014h */ case   11:  		/* mr R29, R9 */
		/* 82150014h case   11:*/		regs.R29 = regs.R9;
		/* 82150014h case   11:*/		return 0x82150018;
		  /* 82150018h */ case   12:  		/* mr R28, R10 */
		/* 82150018h case   12:*/		regs.R28 = regs.R10;
		/* 82150018h case   12:*/		return 0x8215001C;
		  /* 8215001Ch */ case   13:  		/* bl -818716 */
		/* 8215001Ch case   13:*/		regs.LR = 0x82150020; return 0x82088200;
		/* 8215001Ch case   13:*/		return 0x82150020;
		  /* 82150020h */ case   14:  		/* or. R31, R3, R3 */
		/* 82150020h case   14:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 82150020h case   14:*/		return 0x82150024;
		  /* 82150024h */ case   15:  		/* bc 4, CR0_EQ, 16 */
		/* 82150024h case   15:*/		if ( !regs.CR[0].eq ) { return 0x82150034;  }
		/* 82150024h case   15:*/		return 0x82150028;
		  /* 82150028h */ case   16:  		/* lis R3, -32761 */
		/* 82150028h case   16:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 82150028h case   16:*/		return 0x8215002C;
		  /* 8215002Ch */ case   17:  		/* ori R3, R3, 14 */
		/* 8215002Ch case   17:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0xE);
		/* 8215002Ch case   17:*/		return 0x82150030;
		  /* 82150030h */ case   18:  		/* b 360 */
		/* 82150030h case   18:*/		return 0x82150198;
		/* 82150030h case   18:*/		return 0x82150034;
	}
	return 0x82150034;
} // Block from 8214FFE8h-82150034h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82150034h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150034( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150034) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150034);
		  /* 82150034h */ case    0:  		/* lwz R3, <#[R1 + 804]> */
		/* 82150034h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000324) );
		/* 82150034h case    0:*/		return 0x82150038;
		  /* 82150038h */ case    1:  		/* mr R10, R28 */
		/* 82150038h case    1:*/		regs.R10 = regs.R28;
		/* 82150038h case    1:*/		return 0x8215003C;
		  /* 8215003Ch */ case    2:  		/* lwz R11, <#[R1 + 812]> */
		/* 8215003Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000032C) );
		/* 8215003Ch case    2:*/		return 0x82150040;
		  /* 82150040h */ case    3:  		/* mr R9, R29 */
		/* 82150040h case    3:*/		regs.R9 = regs.R29;
		/* 82150040h case    3:*/		return 0x82150044;
		  /* 82150044h */ case    4:  		/* mr R8, R24 */
		/* 82150044h case    4:*/		regs.R8 = regs.R24;
		/* 82150044h case    4:*/		return 0x82150048;
		  /* 82150048h */ case    5:  		/* mr R7, R25 */
		/* 82150048h case    5:*/		regs.R7 = regs.R25;
		/* 82150048h case    5:*/		return 0x8215004C;
		  /* 8215004Ch */ case    6:  		/* mr R6, R30 */
		/* 8215004Ch case    6:*/		regs.R6 = regs.R30;
		/* 8215004Ch case    6:*/		return 0x82150050;
		  /* 82150050h */ case    7:  		/* stw R3, <#[R1 + 84]> */
		/* 82150050h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000054) );
		/* 82150050h case    7:*/		return 0x82150054;
		  /* 82150054h */ case    8:  		/* mr R5, R31 */
		/* 82150054h case    8:*/		regs.R5 = regs.R31;
		/* 82150054h case    8:*/		return 0x82150058;
		  /* 82150058h */ case    9:  		/* mr R4, R26 */
		/* 82150058h case    9:*/		regs.R4 = regs.R26;
		/* 82150058h case    9:*/		return 0x8215005C;
		  /* 8215005Ch */ case   10:  		/* stw R11, <#[R1 + 92]> */
		/* 8215005Ch case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 8215005Ch case   10:*/		return 0x82150060;
	}
	return 0x82150060;
} // Block from 82150034h-82150060h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82150060h
// Function '?DisassembleDebuggerHint@XGRAPHICS@@YAJPBU_UCODE_R500_DEBUGGER_HINT_HEADER@@PAVOutStream@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150060);
		  /* 82150060h */ case    0:  		/* mr R3, R27 */
		/* 82150060h case    0:*/		regs.R3 = regs.R27;
		/* 82150060h case    0:*/		return 0x82150064;
		  /* 82150064h */ case    1:  		/* bl -380 */
		/* 82150064h case    1:*/		regs.LR = 0x82150068; return 0x8214FEE8;
		/* 82150064h case    1:*/		return 0x82150068;
		  /* 82150068h */ case    2:  		/* or. R30, R3, R3 */
		/* 82150068h case    2:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 82150068h case    2:*/		return 0x8215006C;
		  /* 8215006Ch */ case    3:  		/* bc 12, CR0_LT, 20 */
		/* 8215006Ch case    3:*/		if ( regs.CR[0].lt ) { return 0x82150080;  }
		/* 8215006Ch case    3:*/		return 0x82150070;
		  /* 82150070h */ case    4:  		/* mr R4, R31 */
		/* 82150070h case    4:*/		regs.R4 = regs.R31;
		/* 82150070h case    4:*/		return 0x82150074;
		  /* 82150074h */ case    5:  		/* lwz R5, <#[R25]> */
		/* 82150074h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + 0x00000000) );
		/* 82150074h case    5:*/		return 0x82150078;
		  /* 82150078h */ case    6:  		/* mr R3, R23 */
		/* 82150078h case    6:*/		regs.R3 = regs.R23;
		/* 82150078h case    6:*/		return 0x8215007C;
		  /* 8215007Ch */ case    7:  		/* bl -945052 */
		/* 8215007Ch case    7:*/		regs.LR = 0x82150080; return 0x820694E0;
		/* 8215007Ch case    7:*/		return 0x82150080;
	}
	return 0x82150080;
} // Block from 82150060h-82150080h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82150080h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150080);
		  /* 82150080h */ case    0:  		/* lis R4, 9351 */
		/* 82150080h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 82150080h case    0:*/		return 0x82150084;
		  /* 82150084h */ case    1:  		/* mr R3, R31 */
		/* 82150084h case    1:*/		regs.R3 = regs.R31;
		/* 82150084h case    1:*/		return 0x82150088;
		  /* 82150088h */ case    2:  		/* bl -818512 */
		/* 82150088h case    2:*/		regs.LR = 0x8215008C; return 0x82088338;
		/* 82150088h case    2:*/		return 0x8215008C;
		  /* 8215008Ch */ case    3:  		/* cmpwi CR6, R30, 0 */
		/* 8215008Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 8215008Ch case    3:*/		return 0x82150090;
		  /* 82150090h */ case    4:  		/* bc 12, CR6_LT, 260 */
		/* 82150090h case    4:*/		if ( regs.CR[6].lt ) { return 0x82150194;  }
		/* 82150090h case    4:*/		return 0x82150094;
		  /* 82150094h */ case    5:  		/* rlwinm. R11, R24, 0, 27, 27 */
		/* 82150094h case    5:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R24);
		/* 82150094h case    5:*/		return 0x82150098;
		  /* 82150098h */ case    6:  		/* bc 4, CR0_EQ, 252 */
		/* 82150098h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82150194;  }
		/* 82150098h case    6:*/		return 0x8215009C;
		  /* 8215009Ch */ case    7:  		/* li R31, 0 */
		/* 8215009Ch case    7:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8215009Ch case    7:*/		return 0x821500A0;
		  /* 821500A0h */ case    8:  		/* lwz R11, <#[R1 + 820]> */
		/* 821500A0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000334) );
		/* 821500A0h case    8:*/		return 0x821500A4;
		  /* 821500A4h */ case    9:  		/* lis R10, -32235 */
		/* 821500A4h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8215);
		/* 821500A4h case    9:*/		return 0x821500A8;
		  /* 821500A8h */ case   10:  		/* lwz R4, <#[R25]> */
		/* 821500A8h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x00000000) );
		/* 821500A8h case   10:*/		return 0x821500AC;
		  /* 821500ACh */ case   11:  		/* stw R31, <#[R1 + 96]> */
		/* 821500ACh case   11:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000060) );
		/* 821500ACh case   11:*/		return 0x821500B0;
		  /* 821500B0h */ case   12:  		/* rlwinm R27, R11, 10, 15, 21 */
		/* 821500B0h case   12:*/		cpu::op::rlwinm<0,10,15,21>(regs,&regs.R27,regs.R11);
		/* 821500B0h case   12:*/		return 0x821500B4;
		  /* 821500B4h */ case   13:  		/* addi R8, R1, 96 */
		/* 821500B4h case   13:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x60);
		/* 821500B4h case   13:*/		return 0x821500B8;
		  /* 821500B8h */ case   14:  		/* addi R7, R10, -14120 */
		/* 821500B8h case   14:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFC8D8);
		/* 821500B8h case   14:*/		return 0x821500BC;
		  /* 821500BCh */ case   15:  		/* li R6, 0 */
		/* 821500BCh case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821500BCh case   15:*/		return 0x821500C0;
		  /* 821500C0h */ case   16:  		/* mr R5, R27 */
		/* 821500C0h case   16:*/		regs.R5 = regs.R27;
		/* 821500C0h case   16:*/		return 0x821500C4;
		  /* 821500C4h */ case   17:  		/* mr R3, R23 */
		/* 821500C4h case   17:*/		regs.R3 = regs.R23;
		/* 821500C4h case   17:*/		return 0x821500C8;
		  /* 821500C8h */ case   18:  		/* bl 1088568 */
		/* 821500C8h case   18:*/		regs.LR = 0x821500CC; return 0x82259D00;
		/* 821500C8h case   18:*/		return 0x821500CC;
		  /* 821500CCh */ case   19:  		/* or. R30, R3, R3 */
		/* 821500CCh case   19:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 821500CCh case   19:*/		return 0x821500D0;
		  /* 821500D0h */ case   20:  		/* bc 12, CR0_LT, 16 */
		/* 821500D0h case   20:*/		if ( regs.CR[0].lt ) { return 0x821500E0;  }
		/* 821500D0h case   20:*/		return 0x821500D4;
		  /* 821500D4h */ case   21:  		/* lwz R11, <#[R1 + 96]> */
		/* 821500D4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 821500D4h case   21:*/		return 0x821500D8;
		  /* 821500D8h */ case   22:  		/* cmpwi CR6, R11, 0 */
		/* 821500D8h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821500D8h case   22:*/		return 0x821500DC;
		  /* 821500DCh */ case   23:  		/* bc 12, CR6_EQ, 184 */
		/* 821500DCh case   23:*/		if ( regs.CR[6].eq ) { return 0x82150194;  }
		/* 821500DCh case   23:*/		return 0x821500E0;
	}
	return 0x821500E0;
} // Block from 82150080h-821500E0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821500E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821500E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821500E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821500E0);
		  /* 821500E0h */ case    0:  		/* rlwinm R4, R30, 1, 31, 31 */
		/* 821500E0h case    0:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R4,regs.R30);
		/* 821500E0h case    0:*/		return 0x821500E4;
		  /* 821500E4h */ case    1:  		/* stw R29, <#[R1 + 112]> */
		/* 821500E4h case    1:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x00000070) );
		/* 821500E4h case    1:*/		return 0x821500E8;
		  /* 821500E8h */ case    2:  		/* stw R28, <#[R1 + 116]> */
		/* 821500E8h case    2:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000074) );
		/* 821500E8h case    2:*/		return 0x821500EC;
		  /* 821500ECh */ case    3:  		/* cmpwi CR6, R30, 0 */
		/* 821500ECh case    3:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 821500ECh case    3:*/		return 0x821500F0;
		  /* 821500F0h */ case    4:  		/* cntlzw R11, R4 */
		/* 821500F0h case    4:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R4);
		/* 821500F0h case    4:*/		return 0x821500F4;
		  /* 821500F4h */ case    5:  		/* stw R4, <#[R1 + 124]> */
		/* 821500F4h case    5:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000007C) );
		/* 821500F4h case    5:*/		return 0x821500F8;
		  /* 821500F8h */ case    6:  		/* sth R31, <#[R1 + 120]> */
		/* 821500F8h case    6:*/		cpu::mem::store16( regs, regs.R31, (uint32)(regs.R1 + 0x00000078) );
		/* 821500F8h case    6:*/		return 0x821500FC;
		  /* 821500FCh */ case    7:  		/* mtspr CTR, R28 */
		/* 821500FCh case    7:*/		regs.CTR = regs.R28;
		/* 821500FCh case    7:*/		return 0x82150100;
		  /* 82150100h */ case    8:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 82150100h case    8:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 82150100h case    8:*/		return 0x82150104;
		  /* 82150104h */ case    9:  		/* mr R3, R29 */
		/* 82150104h case    9:*/		regs.R3 = regs.R29;
		/* 82150104h case    9:*/		return 0x82150108;
		  /* 82150108h */ case   10:  		/* addi R5, R11, 7101 */
		/* 82150108h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1BBD);
		/* 82150108h case   10:*/		return 0x8215010C;
		  /* 8215010Ch */ case   11:  		/* bc 4, CR6_LT, 16 */
		/* 8215010Ch case   11:*/		if ( !regs.CR[6].lt ) { return 0x8215011C;  }
		/* 8215010Ch case   11:*/		return 0x82150110;
		  /* 82150110h */ case   12:  		/* lis R10, -32255 */
		/* 82150110h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82150110h case   12:*/		return 0x82150114;
		  /* 82150114h */ case   13:  		/* addi R6, R10, 32512 */
		/* 82150114h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x7F00);
		/* 82150114h case   13:*/		return 0x82150118;
		  /* 82150118h */ case   14:  		/* b 12 */
		/* 82150118h case   14:*/		return 0x82150124;
		/* 82150118h case   14:*/		return 0x8215011C;
	}
	return 0x8215011C;
} // Block from 821500E0h-8215011Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215011Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215011C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215011C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215011C);
		  /* 8215011Ch */ case    0:  		/* lis R10, -32255 */
		/* 8215011Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8215011Ch case    0:*/		return 0x82150120;
		  /* 82150120h */ case    1:  		/* addi R6, R10, 32460 */
		/* 82150120h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x7ECC);
		/* 82150120h case    1:*/		return 0x82150124;
	}
	return 0x82150124;
} // Block from 8215011Ch-82150124h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82150124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150124);
		  /* 82150124h */ case    0:  		/* bcctrl 20, CR0_LT */
		/* 82150124h case    0:*/		if ( 1 ) { regs.LR = 0x82150128; return (uint32)regs.CTR; }
		/* 82150124h case    0:*/		return 0x82150128;
		  /* 82150128h */ case    1:  		/* lis R11, -32235 */
		/* 82150128h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8215);
		/* 82150128h case    1:*/		return 0x8215012C;
		  /* 8215012Ch */ case    2:  		/* addi R8, R1, 112 */
		/* 8215012Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x70);
		/* 8215012Ch case    2:*/		return 0x82150130;
		  /* 82150130h */ case    3:  		/* lwz R4, <#[R25]> */
		/* 82150130h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x00000000) );
		/* 82150130h case    3:*/		return 0x82150134;
		  /* 82150134h */ case    4:  		/* addi R7, R11, -8176 */
		/* 82150134h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFE010);
		/* 82150134h case    4:*/		return 0x82150138;
		  /* 82150138h */ case    5:  		/* li R6, 0 */
		/* 82150138h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82150138h case    5:*/		return 0x8215013C;
		  /* 8215013Ch */ case    6:  		/* mr R5, R27 */
		/* 8215013Ch case    6:*/		regs.R5 = regs.R27;
		/* 8215013Ch case    6:*/		return 0x82150140;
		  /* 82150140h */ case    7:  		/* mr R3, R23 */
		/* 82150140h case    7:*/		regs.R3 = regs.R23;
		/* 82150140h case    7:*/		return 0x82150144;
		  /* 82150144h */ case    8:  		/* bl 1088444 */
		/* 82150144h case    8:*/		regs.LR = 0x82150148; return 0x82259D00;
		/* 82150144h case    8:*/		return 0x82150148;
		  /* 82150148h */ case    9:  		/* lhz R11, <#[R1 + 120]> */
		/* 82150148h case    9:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 82150148h case    9:*/		return 0x8215014C;
		  /* 8215014Ch */ case   10:  		/* cmplwi CR0, R11, 0 */
		/* 8215014Ch case   10:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8215014Ch case   10:*/		return 0x82150150;
	}
	return 0x82150150;
} // Block from 82150124h-82150150h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82150150h
// Function '?DisassembleR500PSMicrocode@XGRAPHICS@@YAJPBU_UCODE_R500PSUCODE@@PAVOutStream@1@PBXKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150150);
		  /* 82150150h */ case    0:  		/* bc 12, CR0_EQ, 12 */
		/* 82150150h case    0:*/		if ( regs.CR[0].eq ) { return 0x8215015C;  }
		/* 82150150h case    0:*/		return 0x82150154;
		  /* 82150154h */ case    1:  		/* addi R3, R1, 112 */
		/* 82150154h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 82150154h case    1:*/		return 0x82150158;
		  /* 82150158h */ case    2:  		/* bl -8744 */
		/* 82150158h case    2:*/		regs.LR = 0x8215015C; return 0x8214DF30;
		/* 82150158h case    2:*/		return 0x8215015C;
	}
	return 0x8215015C;
} // Block from 82150150h-8215015Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215015Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215015C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215015C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215015C);
		  /* 8215015Ch */ case    0:  		/* lis R11, -32235 */
		/* 8215015Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8215);
		/* 8215015Ch case    0:*/		return 0x82150160;
		  /* 82150160h */ case    1:  		/* lwz R4, <#[R25]> */
		/* 82150160h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x00000000) );
		/* 82150160h case    1:*/		return 0x82150164;
		  /* 82150164h */ case    2:  		/* li R9, 0 */
		/* 82150164h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82150164h case    2:*/		return 0x82150168;
		  /* 82150168h */ case    3:  		/* li R8, 0 */
		/* 82150168h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82150168h case    3:*/		return 0x8215016C;
		  /* 8215016Ch */ case    4:  		/* addi R7, R1, 112 */
		/* 8215016Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x70);
		/* 8215016Ch case    4:*/		return 0x82150170;
		  /* 82150170h */ case    5:  		/* addi R6, R11, -8176 */
		/* 82150170h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFE010);
		/* 82150170h case    5:*/		return 0x82150174;
		  /* 82150174h */ case    6:  		/* li R5, 68 */
		/* 82150174h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x44);
		/* 82150174h case    6:*/		return 0x82150178;
		  /* 82150178h */ case    7:  		/* mr R3, R23 */
		/* 82150178h case    7:*/		regs.R3 = regs.R23;
		/* 82150178h case    7:*/		return 0x8215017C;
		  /* 8215017Ch */ case    8:  		/* bl 5972 */
		/* 8215017Ch case    8:*/		regs.LR = 0x82150180; return 0x821518D0;
		/* 8215017Ch case    8:*/		return 0x82150180;
		  /* 82150180h */ case    9:  		/* lhz R11, <#[R1 + 120]> */
		/* 82150180h case    9:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 82150180h case    9:*/		return 0x82150184;
		  /* 82150184h */ case   10:  		/* cmplwi CR0, R11, 0 */
		/* 82150184h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82150184h case   10:*/		return 0x82150188;
		  /* 82150188h */ case   11:  		/* bc 12, CR0_EQ, 12 */
		/* 82150188h case   11:*/		if ( regs.CR[0].eq ) { return 0x82150194;  }
		/* 82150188h case   11:*/		return 0x8215018C;
		  /* 8215018Ch */ case   12:  		/* addi R3, R1, 112 */
		/* 8215018Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 8215018Ch case   12:*/		return 0x82150190;
		  /* 82150190h */ case   13:  		/* bl -8800 */
		/* 82150190h case   13:*/		regs.LR = 0x82150194; return 0x8214DF30;
		/* 82150190h case   13:*/		return 0x82150194;
	}
	return 0x82150194;
} // Block from 8215015Ch-82150194h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82150194h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150194( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150194) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150194);
		  /* 82150194h */ case    0:  		/* mr R3, R30 */
		/* 82150194h case    0:*/		regs.R3 = regs.R30;
		/* 82150194h case    0:*/		return 0x82150198;
	}
	return 0x82150198;
} // Block from 82150194h-82150198h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82150198h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150198( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150198) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150198);
		  /* 82150198h */ case    0:  		/* addi R1, R1, 720 */
		/* 82150198h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x2D0);
		/* 82150198h case    0:*/		return 0x8215019C;
		  /* 8215019Ch */ case    1:  		/* b -782088 */
		/* 8215019Ch case    1:*/		return 0x82091294;
		/* 8215019Ch case    1:*/		return 0x821501A0;
	}
	return 0x821501A0;
} // Block from 82150198h-821501A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821501A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821501A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821501A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821501A0);
		  /* 821501A0h */ case    0:  		/* mfspr R12, LR */
		/* 821501A0h case    0:*/		regs.R12 = regs.LR;
		/* 821501A0h case    0:*/		return 0x821501A4;
		  /* 821501A4h */ case    1:  		/* bl -782168 */
		/* 821501A4h case    1:*/		regs.LR = 0x821501A8; return 0x8209124C;
		/* 821501A4h case    1:*/		return 0x821501A8;
		  /* 821501A8h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 821501A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 821501A8h case    2:*/		return 0x821501AC;
		  /* 821501ACh */ case    3:  		/* lis R11, -32256 */
		/* 821501ACh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821501ACh case    3:*/		return 0x821501B0;
		  /* 821501B0h */ case    4:  		/* mr R29, R3 */
		/* 821501B0h case    4:*/		regs.R29 = regs.R3;
		/* 821501B0h case    4:*/		return 0x821501B4;
		  /* 821501B4h */ case    5:  		/* mr R30, R4 */
		/* 821501B4h case    5:*/		regs.R30 = regs.R4;
		/* 821501B4h case    5:*/		return 0x821501B8;
		  /* 821501B8h */ case    6:  		/* mr R28, R5 */
		/* 821501B8h case    6:*/		regs.R28 = regs.R5;
		/* 821501B8h case    6:*/		return 0x821501BC;
		  /* 821501BCh */ case    7:  		/* li R5, 80 */
		/* 821501BCh case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x50);
		/* 821501BCh case    7:*/		return 0x821501C0;
		  /* 821501C0h */ case    8:  		/* li R4, 0 */
		/* 821501C0h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821501C0h case    8:*/		return 0x821501C4;
		  /* 821501C4h */ case    9:  		/* lfs FR0, <#[R11 + 1816]> */
		/* 821501C4h case    9:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000718) );
		/* 821501C4h case    9:*/		return 0x821501C8;
		  /* 821501C8h */ case   10:  		/* addi R3, R1, 100 */
		/* 821501C8h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x64);
		/* 821501C8h case   10:*/		return 0x821501CC;
		  /* 821501CCh */ case   11:  		/* stfs FR0, <#[R1 + 96]> */
		/* 821501CCh case   11:*/		cpu::mem::store32f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000060) );
		/* 821501CCh case   11:*/		return 0x821501D0;
		  /* 821501D0h */ case   12:  		/* mr R31, R6 */
		/* 821501D0h case   12:*/		regs.R31 = regs.R6;
		/* 821501D0h case   12:*/		return 0x821501D4;
		  /* 821501D4h */ case   13:  		/* bl -781972 */
		/* 821501D4h case   13:*/		regs.LR = 0x821501D8; return 0x82091340;
		/* 821501D4h case   13:*/		return 0x821501D8;
		  /* 821501D8h */ case   14:  		/* addi R5, R1, 96 */
		/* 821501D8h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 821501D8h case   14:*/		return 0x821501DC;
		  /* 821501DCh */ case   15:  		/* mr R4, R28 */
		/* 821501DCh case   15:*/		regs.R4 = regs.R28;
		/* 821501DCh case   15:*/		return 0x821501E0;
		  /* 821501E0h */ case   16:  		/* mr R3, R29 */
		/* 821501E0h case   16:*/		regs.R3 = regs.R29;
		/* 821501E0h case   16:*/		return 0x821501E4;
		  /* 821501E4h */ case   17:  		/* bl 81300 */
		/* 821501E4h case   17:*/		regs.LR = 0x821501E8; return 0x82163F78;
		/* 821501E4h case   17:*/		return 0x821501E8;
		  /* 821501E8h */ case   18:  		/* addi R11, R30, -1 */
		/* 821501E8h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFFF);
		/* 821501E8h case   18:*/		return 0x821501EC;
		  /* 821501ECh */ case   19:  		/* lfs FR0, <#[R1 + 96]> */
		/* 821501ECh case   19:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000060) );
		/* 821501ECh case   19:*/		return 0x821501F0;
		  /* 821501F0h */ case   20:  		/* cntlzw R11, R11 */
		/* 821501F0h case   20:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821501F0h case   20:*/		return 0x821501F4;
		  /* 821501F4h */ case   21:  		/* fcmpu CR6, FR0, FR0 */
		/* 821501F4h case   21:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR0);
		/* 821501F4h case   21:*/		return 0x821501F8;
		  /* 821501F8h */ case   22:  		/* rlwinm R25, R11, 27, 31, 31 */
		/* 821501F8h case   22:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R25,regs.R11);
		/* 821501F8h case   22:*/		return 0x821501FC;
		  /* 821501FCh */ case   23:  		/* bc 4, CR6_EQ, 1568 */
		/* 821501FCh case   23:*/		if ( !regs.CR[6].eq ) { return 0x8215081C;  }
		/* 821501FCh case   23:*/		return 0x82150200;
		  /* 82150200h */ case   24:  		/* cmpwi CR6, R25, 0 */
		/* 82150200h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 82150200h case   24:*/		return 0x82150204;
		  /* 82150204h */ case   25:  		/* bc 12, CR6_EQ, 16 */
		/* 82150204h case   25:*/		if ( regs.CR[6].eq ) { return 0x82150214;  }
		/* 82150204h case   25:*/		return 0x82150208;
		  /* 82150208h */ case   26:  		/* lis R11, -32255 */
		/* 82150208h case   26:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82150208h case   26:*/		return 0x8215020C;
		  /* 8215020Ch */ case   27:  		/* addi R5, R11, 26496 */
		/* 8215020Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6780);
		/* 8215020Ch case   27:*/		return 0x82150210;
		  /* 82150210h */ case   28:  		/* b 12 */
		/* 82150210h case   28:*/		return 0x8215021C;
		/* 82150210h case   28:*/		return 0x82150214;
	}
	return 0x82150214;
} // Block from 821501A0h-82150214h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82150214h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150214( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150214) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150214);
		  /* 82150214h */ case    0:  		/* lis R11, -32255 */
		/* 82150214h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82150214h case    0:*/		return 0x82150218;
		  /* 82150218h */ case    1:  		/* addi R5, R11, 26488 */
		/* 82150218h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x6778);
		/* 82150218h case    1:*/		return 0x8215021C;
	}
	return 0x8215021C;
} // Block from 82150214h-8215021Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215021Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215021C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215021C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215021C);
		  /* 8215021Ch */ case    0:  		/* lis R11, -32253 */
		/* 8215021Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215021Ch case    0:*/		return 0x82150220;
		  /* 82150220h */ case    1:  		/* mr R3, R31 */
		/* 82150220h case    1:*/		regs.R3 = regs.R31;
		/* 82150220h case    1:*/		return 0x82150224;
		  /* 82150224h */ case    2:  		/* addi R4, R11, 30484 */
		/* 82150224h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7714);
		/* 82150224h case    2:*/		return 0x82150228;
		  /* 82150228h */ case    3:  		/* bl -8720 */
		/* 82150228h case    3:*/		regs.LR = 0x8215022C; return 0x8214E018;
		/* 82150228h case    3:*/		return 0x8215022C;
		  /* 8215022Ch */ case    4:  		/* lis R11, -32253 */
		/* 8215022Ch case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215022Ch case    4:*/		return 0x82150230;
		  /* 82150230h */ case    5:  		/* mr R3, R31 */
		/* 82150230h case    5:*/		regs.R3 = regs.R31;
		/* 82150230h case    5:*/		return 0x82150234;
		  /* 82150234h */ case    6:  		/* addi R30, R11, 28332 */
		/* 82150234h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6EAC);
		/* 82150234h case    6:*/		return 0x82150238;
		  /* 82150238h */ case    7:  		/* mr R4, R30 */
		/* 82150238h case    7:*/		regs.R4 = regs.R30;
		/* 82150238h case    7:*/		return 0x8215023C;
		  /* 8215023Ch */ case    8:  		/* bl -6028 */
		/* 8215023Ch case    8:*/		regs.LR = 0x82150240; return 0x8214EAB0;
		/* 8215023Ch case    8:*/		return 0x82150240;
		  /* 82150240h */ case    9:  		/* lis R11, -32256 */
		/* 82150240h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82150240h case    9:*/		return 0x82150244;
		  /* 82150244h */ case   10:  		/* mr R3, R31 */
		/* 82150244h case   10:*/		regs.R3 = regs.R31;
		/* 82150244h case   10:*/		return 0x82150248;
		  /* 82150248h */ case   11:  		/* addi R29, R11, 17768 */
		/* 82150248h case   11:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x4568);
		/* 82150248h case   11:*/		return 0x8215024C;
		  /* 8215024Ch */ case   12:  		/* mr R4, R29 */
		/* 8215024Ch case   12:*/		regs.R4 = regs.R29;
		/* 8215024Ch case   12:*/		return 0x82150250;
		  /* 82150250h */ case   13:  		/* bl -8760 */
		/* 82150250h case   13:*/		regs.LR = 0x82150254; return 0x8214E018;
		/* 82150250h case   13:*/		return 0x82150254;
		  /* 82150254h */ case   14:  		/* lis R11, -32256 */
		/* 82150254h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82150254h case   14:*/		return 0x82150258;
		  /* 82150258h */ case   15:  		/* lfs FR0, <#[R1 + 96]> */
		/* 82150258h case   15:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000060) );
		/* 82150258h case   15:*/		return 0x8215025C;
		  /* 8215025Ch */ case   16:  		/* mr R3, R31 */
		/* 8215025Ch case   16:*/		regs.R3 = regs.R31;
		/* 8215025Ch case   16:*/		return 0x82150260;
		  /* 82150260h */ case   17:  		/* lfs FR12, <#[R1 + 100]> */
		/* 82150260h case   17:*/		cpu::mem::load32f( regs, &regs.FR12, (uint32)(regs.R1 + 0x00000064) );
		/* 82150260h case   17:*/		return 0x82150264;
		  /* 82150264h */ case   18:  		/* fmr FR1, FR0 */
		/* 82150264h case   18:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR0);
		/* 82150264h case   18:*/		return 0x82150268;
		  /* 82150268h */ case   19:  		/* fcmpu CR6, FR12, FR0 */
		/* 82150268h case   19:*/		cpu::op::fcmpu<6>(regs,regs.FR12,regs.FR0);
		/* 82150268h case   19:*/		return 0x8215026C;
		  /* 8215026Ch */ case   20:  		/* lfs FR13, <#[R11 + 8776]> */
		/* 8215026Ch case   20:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R11 + 0x00002248) );
		/* 8215026Ch case   20:*/		return 0x82150270;
		  /* 82150270h */ case   21:  		/* bc 4, CR6_EQ, 40 */
		/* 82150270h case   21:*/		if ( !regs.CR[6].eq ) { return 0x82150298;  }
		/* 82150270h case   21:*/		return 0x82150274;
		  /* 82150274h */ case   22:  		/* fmuls FR2, FR0, FR13 */
		/* 82150274h case   22:*/		cpu::op::fmuls<0>(regs,&regs.FR2,regs.FR0,regs.FR13);
		/* 82150274h case   22:*/		return 0x82150278;
		  /* 82150278h */ case   23:  		/* stfd FR0, <#[R1 + 32]> */
		/* 82150278h case   23:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000020) );
		/* 82150278h case   23:*/		return 0x8215027C;
		  /* 8215027Ch */ case   24:  		/* stfd FR2, <#[R1 + 40]> */
		/* 8215027Ch case   24:*/		cpu::mem::store64f( regs, regs.FR2, (uint32)(regs.R1 + 0x00000028) );
		/* 8215027Ch case   24:*/		return 0x82150280;
		  /* 82150280h */ case   25:  		/* ld R5, <#[R1 + 32]> */
		/* 82150280h case   25:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x00000020) );
		/* 82150280h case   25:*/		return 0x82150284;
		  /* 82150284h */ case   26:  		/* ld R6, <#[R1 + 40]> */
		/* 82150284h case   26:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 82150284h case   26:*/		return 0x82150288;
		  /* 82150288h */ case   27:  		/* lis R10, -32253 */
		/* 82150288h case   27:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82150288h case   27:*/		return 0x8215028C;
		  /* 8215028Ch */ case   28:  		/* addi R4, R10, 30448 */
		/* 8215028Ch case   28:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x76F0);
		/* 8215028Ch case   28:*/		return 0x82150290;
		  /* 82150290h */ case   29:  		/* bl -8824 */
		/* 82150290h case   29:*/		regs.LR = 0x82150294; return 0x8214E018;
		/* 82150290h case   29:*/		return 0x82150294;
		  /* 82150294h */ case   30:  		/* b 60 */
		/* 82150294h case   30:*/		return 0x821502D0;
		/* 82150294h case   30:*/		return 0x82150298;
	}
	return 0x82150298;
} // Block from 8215021Ch-82150298h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82150298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150298);
		  /* 82150298h */ case    0:  		/* fmuls FR4, FR12, FR13 */
		/* 82150298h case    0:*/		cpu::op::fmuls<0>(regs,&regs.FR4,regs.FR12,regs.FR13);
		/* 82150298h case    0:*/		return 0x8215029C;
		  /* 8215029Ch */ case    1:  		/* stfd FR12, <#[R1 + 40]> */
		/* 8215029Ch case    1:*/		cpu::mem::store64f( regs, regs.FR12, (uint32)(regs.R1 + 0x00000028) );
		/* 8215029Ch case    1:*/		return 0x821502A0;
		  /* 821502A0h */ case    2:  		/* stfd FR4, <#[R1 + 56]> */
		/* 821502A0h case    2:*/		cpu::mem::store64f( regs, regs.FR4, (uint32)(regs.R1 + 0x00000038) );
		/* 821502A0h case    2:*/		return 0x821502A4;
		  /* 821502A4h */ case    3:  		/* ld R8, <#[R1 + 56]> */
		/* 821502A4h case    3:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R1 + 0x00000038) );
		/* 821502A4h case    3:*/		return 0x821502A8;
		  /* 821502A8h */ case    4:  		/* ld R6, <#[R1 + 40]> */
		/* 821502A8h case    4:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 821502A8h case    4:*/		return 0x821502AC;
		  /* 821502ACh */ case    5:  		/* fmuls FR3, FR0, FR13 */
		/* 821502ACh case    5:*/		cpu::op::fmuls<0>(regs,&regs.FR3,regs.FR0,regs.FR13);
		/* 821502ACh case    5:*/		return 0x821502B0;
		  /* 821502B0h */ case    6:  		/* stfd FR1, <#[R1 + 32]> */
		/* 821502B0h case    6:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R1 + 0x00000020) );
		/* 821502B0h case    6:*/		return 0x821502B4;
		  /* 821502B4h */ case    7:  		/* lis R10, -32253 */
		/* 821502B4h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821502B4h case    7:*/		return 0x821502B8;
		  /* 821502B8h */ case    8:  		/* stfd FR3, <#[R1 + 48]> */
		/* 821502B8h case    8:*/		cpu::mem::store64f( regs, regs.FR3, (uint32)(regs.R1 + 0x00000030) );
		/* 821502B8h case    8:*/		return 0x821502BC;
		  /* 821502BCh */ case    9:  		/* fmr FR2, FR12 */
		/* 821502BCh case    9:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR12);
		/* 821502BCh case    9:*/		return 0x821502C0;
		  /* 821502C0h */ case   10:  		/* addi R4, R10, 30400 */
		/* 821502C0h case   10:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x76C0);
		/* 821502C0h case   10:*/		return 0x821502C4;
		  /* 821502C4h */ case   11:  		/* ld R5, <#[R1 + 32]> */
		/* 821502C4h case   11:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R1 + 0x00000020) );
		/* 821502C4h case   11:*/		return 0x821502C8;
		  /* 821502C8h */ case   12:  		/* ld R7, <#[R1 + 48]> */
		/* 821502C8h case   12:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R1 + 0x00000030) );
		/* 821502C8h case   12:*/		return 0x821502CC;
		  /* 821502CCh */ case   13:  		/* bl -8884 */
		/* 821502CCh case   13:*/		regs.LR = 0x821502D0; return 0x8214E018;
		/* 821502CCh case   13:*/		return 0x821502D0;
	}
	return 0x821502D0;
} // Block from 82150298h-821502D0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821502D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821502D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821502D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821502D0);
		  /* 821502D0h */ case    0:  		/* lfs FR0, <#[R1 + 116]> */
		/* 821502D0h case    0:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000074) );
		/* 821502D0h case    0:*/		return 0x821502D4;
		  /* 821502D4h */ case    1:  		/* mr R3, R31 */
		/* 821502D4h case    1:*/		regs.R3 = regs.R31;
		/* 821502D4h case    1:*/		return 0x821502D8;
		  /* 821502D8h */ case    2:  		/* lfs FR13, <#[R1 + 120]> */
		/* 821502D8h case    2:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000078) );
		/* 821502D8h case    2:*/		return 0x821502DC;
		  /* 821502DCh */ case    3:  		/* fcmpu CR6, FR13, FR0 */
		/* 821502DCh case    3:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 821502DCh case    3:*/		return 0x821502E0;
		  /* 821502E0h */ case    4:  		/* fctiwz FR0, FR0 */
		/* 821502E0h case    4:*/		cpu::op::fctiwz<0>(regs,&regs.FR0,regs.FR0);
		/* 821502E0h case    4:*/		return 0x821502E4;
		  /* 821502E4h */ case    5:  		/* bc 4, CR6_EQ, 28 */
		/* 821502E4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82150300;  }
		/* 821502E4h case    5:*/		return 0x821502E8;
		  /* 821502E8h */ case    6:  		/* lis R11, -32253 */
		/* 821502E8h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821502E8h case    6:*/		return 0x821502EC;
		  /* 821502ECh */ case    7:  		/* stfd FR0, <#[R1 + 80]> */
		/* 821502ECh case    7:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 821502ECh case    7:*/		return 0x821502F0;
		  /* 821502F0h */ case    8:  		/* lwz R5, <#[R1 + 84]> */
		/* 821502F0h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 821502F0h case    8:*/		return 0x821502F4;
		  /* 821502F4h */ case    9:  		/* addi R4, R11, 30384 */
		/* 821502F4h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x76B0);
		/* 821502F4h case    9:*/		return 0x821502F8;
		  /* 821502F8h */ case   10:  		/* bl -8928 */
		/* 821502F8h case   10:*/		regs.LR = 0x821502FC; return 0x8214E018;
		/* 821502F8h case   10:*/		return 0x821502FC;
		  /* 821502FCh */ case   11:  		/* b 36 */
		/* 821502FCh case   11:*/		return 0x82150320;
		/* 821502FCh case   11:*/		return 0x82150300;
	}
	return 0x82150300;
} // Block from 821502D0h-82150300h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82150300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150300);
		  /* 82150300h */ case    0:  		/* stfd FR0, <#[R1 + 80]> */
		/* 82150300h case    0:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 82150300h case    0:*/		return 0x82150304;
		  /* 82150304h */ case    1:  		/* lis R11, -32253 */
		/* 82150304h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150304h case    1:*/		return 0x82150308;
		  /* 82150308h */ case    2:  		/* fctiwz FR13, FR13 */
		/* 82150308h case    2:*/		cpu::op::fctiwz<0>(regs,&regs.FR13,regs.FR13);
		/* 82150308h case    2:*/		return 0x8215030C;
		  /* 8215030Ch */ case    3:  		/* stfd FR13, <#[R1 + 88]> */
		/* 8215030Ch case    3:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R1 + 0x00000058) );
		/* 8215030Ch case    3:*/		return 0x82150310;
		  /* 82150310h */ case    4:  		/* addi R4, R11, 30368 */
		/* 82150310h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x76A0);
		/* 82150310h case    4:*/		return 0x82150314;
		  /* 82150314h */ case    5:  		/* lwz R6, <#[R1 + 92]> */
		/* 82150314h case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000005C) );
		/* 82150314h case    5:*/		return 0x82150318;
		  /* 82150318h */ case    6:  		/* lwz R5, <#[R1 + 84]> */
		/* 82150318h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 82150318h case    6:*/		return 0x8215031C;
		  /* 8215031Ch */ case    7:  		/* bl -8964 */
		/* 8215031Ch case    7:*/		regs.LR = 0x82150320; return 0x8214E018;
		/* 8215031Ch case    7:*/		return 0x82150320;
	}
	return 0x82150320;
} // Block from 82150300h-82150320h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82150320h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150320( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150320) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150320);
		  /* 82150320h */ case    0:  		/* lfs FR0, <#[R1 + 108]> */
		/* 82150320h case    0:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R1 + 0x0000006C) );
		/* 82150320h case    0:*/		return 0x82150324;
		  /* 82150324h */ case    1:  		/* mr R3, R31 */
		/* 82150324h case    1:*/		regs.R3 = regs.R31;
		/* 82150324h case    1:*/		return 0x82150328;
		  /* 82150328h */ case    2:  		/* lfs FR13, <#[R1 + 112]> */
		/* 82150328h case    2:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000070) );
		/* 82150328h case    2:*/		return 0x8215032C;
		  /* 8215032Ch */ case    3:  		/* fcmpu CR6, FR13, FR0 */
		/* 8215032Ch case    3:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 8215032Ch case    3:*/		return 0x82150330;
		  /* 82150330h */ case    4:  		/* fctiwz FR0, FR0 */
		/* 82150330h case    4:*/		cpu::op::fctiwz<0>(regs,&regs.FR0,regs.FR0);
		/* 82150330h case    4:*/		return 0x82150334;
		  /* 82150334h */ case    5:  		/* bc 4, CR6_EQ, 28 */
		/* 82150334h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82150350;  }
		/* 82150334h case    5:*/		return 0x82150338;
		  /* 82150338h */ case    6:  		/* lis R11, -32253 */
		/* 82150338h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150338h case    6:*/		return 0x8215033C;
		  /* 8215033Ch */ case    7:  		/* stfd FR0, <#[R1 + 88]> */
		/* 8215033Ch case    7:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 8215033Ch case    7:*/		return 0x82150340;
		  /* 82150340h */ case    8:  		/* lwz R5, <#[R1 + 92]> */
		/* 82150340h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000005C) );
		/* 82150340h case    8:*/		return 0x82150344;
		  /* 82150344h */ case    9:  		/* addi R4, R11, 30352 */
		/* 82150344h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7690);
		/* 82150344h case    9:*/		return 0x82150348;
		  /* 82150348h */ case   10:  		/* bl -9008 */
		/* 82150348h case   10:*/		regs.LR = 0x8215034C; return 0x8214E018;
		/* 82150348h case   10:*/		return 0x8215034C;
		  /* 8215034Ch */ case   11:  		/* b 36 */
		/* 8215034Ch case   11:*/		return 0x82150370;
		/* 8215034Ch case   11:*/		return 0x82150350;
	}
	return 0x82150350;
} // Block from 82150320h-82150350h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82150350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150350);
		  /* 82150350h */ case    0:  		/* fctiwz FR13, FR13 */
		/* 82150350h case    0:*/		cpu::op::fctiwz<0>(regs,&regs.FR13,regs.FR13);
		/* 82150350h case    0:*/		return 0x82150354;
		  /* 82150354h */ case    1:  		/* stfd FR13, <#[R1 + 88]> */
		/* 82150354h case    1:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R1 + 0x00000058) );
		/* 82150354h case    1:*/		return 0x82150358;
		  /* 82150358h */ case    2:  		/* stfd FR0, <#[R1 + 80]> */
		/* 82150358h case    2:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000050) );
		/* 82150358h case    2:*/		return 0x8215035C;
		  /* 8215035Ch */ case    3:  		/* lis R11, -32253 */
		/* 8215035Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215035Ch case    3:*/		return 0x82150360;
		  /* 82150360h */ case    4:  		/* addi R4, R11, 30332 */
		/* 82150360h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x767C);
		/* 82150360h case    4:*/		return 0x82150364;
		  /* 82150364h */ case    5:  		/* lwz R6, <#[R1 + 92]> */
		/* 82150364h case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000005C) );
		/* 82150364h case    5:*/		return 0x82150368;
		  /* 82150368h */ case    6:  		/* lwz R5, <#[R1 + 84]> */
		/* 82150368h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 82150368h case    6:*/		return 0x8215036C;
		  /* 8215036Ch */ case    7:  		/* bl -9044 */
		/* 8215036Ch case    7:*/		regs.LR = 0x82150370; return 0x8214E018;
		/* 8215036Ch case    7:*/		return 0x82150370;
	}
	return 0x82150370;
} // Block from 82150350h-82150370h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82150370h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150370);
		  /* 82150370h */ case    0:  		/* mr R4, R30 */
		/* 82150370h case    0:*/		regs.R4 = regs.R30;
		/* 82150370h case    0:*/		return 0x82150374;
		  /* 82150374h */ case    1:  		/* mr R3, R31 */
		/* 82150374h case    1:*/		regs.R3 = regs.R31;
		/* 82150374h case    1:*/		return 0x82150378;
		  /* 82150378h */ case    2:  		/* bl -6344 */
		/* 82150378h case    2:*/		regs.LR = 0x8215037C; return 0x8214EAB0;
		/* 82150378h case    2:*/		return 0x8215037C;
		  /* 8215037Ch */ case    3:  		/* mr R4, R29 */
		/* 8215037Ch case    3:*/		regs.R4 = regs.R29;
		/* 8215037Ch case    3:*/		return 0x82150380;
		  /* 82150380h */ case    4:  		/* mr R3, R31 */
		/* 82150380h case    4:*/		regs.R3 = regs.R31;
		/* 82150380h case    4:*/		return 0x82150384;
		  /* 82150384h */ case    5:  		/* bl -9068 */
		/* 82150384h case    5:*/		regs.LR = 0x82150388; return 0x8214E018;
		/* 82150384h case    5:*/		return 0x82150388;
		  /* 82150388h */ case    6:  		/* lis R11, -32253 */
		/* 82150388h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150388h case    6:*/		return 0x8215038C;
		  /* 8215038Ch */ case    7:  		/* mr R3, R31 */
		/* 8215038Ch case    7:*/		regs.R3 = regs.R31;
		/* 8215038Ch case    7:*/		return 0x82150390;
		  /* 82150390h */ case    8:  		/* addi R4, R11, 30328 */
		/* 82150390h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7678);
		/* 82150390h case    8:*/		return 0x82150394;
		  /* 82150394h */ case    9:  		/* bl -9084 */
		/* 82150394h case    9:*/		regs.LR = 0x82150398; return 0x8214E018;
		/* 82150394h case    9:*/		return 0x82150398;
		  /* 82150398h */ case   10:  		/* lis R11, -32253 */
		/* 82150398h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150398h case   10:*/		return 0x8215039C;
		  /* 8215039Ch */ case   11:  		/* lfs FR0, <#[R1 + 124]> */
		/* 8215039Ch case   11:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R1 + 0x0000007C) );
		/* 8215039Ch case   11:*/		return 0x821503A0;
		  /* 821503A0h */ case   12:  		/* mr R3, R31 */
		/* 821503A0h case   12:*/		regs.R3 = regs.R31;
		/* 821503A0h case   12:*/		return 0x821503A4;
		  /* 821503A4h */ case   13:  		/* fctiwz FR0, FR0 */
		/* 821503A4h case   13:*/		cpu::op::fctiwz<0>(regs,&regs.FR0,regs.FR0);
		/* 821503A4h case   13:*/		return 0x821503A8;
		  /* 821503A8h */ case   14:  		/* addi R4, R11, 30308 */
		/* 821503A8h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7664);
		/* 821503A8h case   14:*/		return 0x821503AC;
		  /* 821503ACh */ case   15:  		/* stfd FR0, <#[R1 + 88]> */
		/* 821503ACh case   15:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 821503ACh case   15:*/		return 0x821503B0;
		  /* 821503B0h */ case   16:  		/* lwz R5, <#[R1 + 92]> */
		/* 821503B0h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000005C) );
		/* 821503B0h case   16:*/		return 0x821503B4;
		  /* 821503B4h */ case   17:  		/* bl -9116 */
		/* 821503B4h case   17:*/		regs.LR = 0x821503B8; return 0x8214E018;
		/* 821503B4h case   17:*/		return 0x821503B8;
		  /* 821503B8h */ case   18:  		/* lis R11, -32256 */
		/* 821503B8h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821503B8h case   18:*/		return 0x821503BC;
		  /* 821503BCh */ case   19:  		/* lis R10, -32255 */
		/* 821503BCh case   19:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821503BCh case   19:*/		return 0x821503C0;
		  /* 821503C0h */ case   20:  		/* cmpwi CR6, R25, 0 */
		/* 821503C0h case   20:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 821503C0h case   20:*/		return 0x821503C4;
		  /* 821503C4h */ case   21:  		/* addi R28, R11, 4485 */
		/* 821503C4h case   21:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x1185);
		/* 821503C4h case   21:*/		return 0x821503C8;
		  /* 821503C8h */ case   22:  		/* addi R27, R10, -8796 */
		/* 821503C8h case   22:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0xFFFFDDA4);
		/* 821503C8h case   22:*/		return 0x821503CC;
		  /* 821503CCh */ case   23:  		/* mr R3, R31 */
		/* 821503CCh case   23:*/		regs.R3 = regs.R31;
		/* 821503CCh case   23:*/		return 0x821503D0;
	}
	return 0x821503D0;
} // Block from 82150370h-821503D0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821503D0h
// Function '?DisassembleR500VSMicrocode@XGRAPHICS@@YAJPBU_UCODE_R500VSUCODE@@PAVOutStream@1@PBXKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821503D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821503D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821503D0);
		  /* 821503D0h */ case    0:  		/* bc 4, CR6_EQ, 72 */
		/* 821503D0h case    0:*/		if ( !regs.CR[6].eq ) { return 0x82150418;  }
		/* 821503D0h case    0:*/		return 0x821503D4;
		  /* 821503D4h */ case    1:  		/* lfs FR0, <#[R1 + 104]> */
		/* 821503D4h case    1:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000068) );
		/* 821503D4h case    1:*/		return 0x821503D8;
		  /* 821503D8h */ case    2:  		/* lis R11, -32253 */
		/* 821503D8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821503D8h case    2:*/		return 0x821503DC;
		  /* 821503DCh */ case    3:  		/* fctiwz FR0, FR0 */
		/* 821503DCh case    3:*/		cpu::op::fctiwz<0>(regs,&regs.FR0,regs.FR0);
		/* 821503DCh case    3:*/		return 0x821503E0;
		  /* 821503E0h */ case    4:  		/* stfd FR0, <#[R1 + 88]> */
		/* 821503E0h case    4:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 821503E0h case    4:*/		return 0x821503E4;
		  /* 821503E4h */ case    5:  		/* addi R4, R11, 30284 */
		/* 821503E4h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x764C);
		/* 821503E4h case    5:*/		return 0x821503E8;
		  /* 821503E8h */ case    6:  		/* lwz R5, <#[R1 + 92]> */
		/* 821503E8h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000005C) );
		/* 821503E8h case    6:*/		return 0x821503EC;
		  /* 821503ECh */ case    7:  		/* bl -9172 */
		/* 821503ECh case    7:*/		regs.LR = 0x821503F0; return 0x8214E018;
		/* 821503ECh case    7:*/		return 0x821503F0;
		  /* 821503F0h */ case    8:  		/* lwz R10, <#[R1 + 160]> */
		/* 821503F0h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000A0) );
		/* 821503F0h case    8:*/		return 0x821503F4;
		  /* 821503F4h */ case    9:  		/* li R11, 64 */
		/* 821503F4h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x40);
		/* 821503F4h case    9:*/		return 0x821503F8;
		  /* 821503F8h */ case   10:  		/* addi R5, R10, 1 */
		/* 821503F8h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x1);
		/* 821503F8h case   10:*/		return 0x821503FC;
		  /* 821503FCh */ case   11:  		/* divw R11, R11, R5 */
		/* 821503FCh case   11:*/		cpu::op::divw<0>(regs,&regs.R11,regs.R11,regs.R5);
		/* 821503FCh case   11:*/		return 0x82150400;
		  /* 82150400h */ case   12:  		/* twi 6, R5, 0 */
		/* 82150400h case   12:*/		cpu::op::tw<6>(regs, 0x82150400, regs.R5, 0x00000000);
		/* 82150400h case   12:*/		return 0x82150404;
		  /* 82150404h */ case   13:  		/* mulli R11, R11, 3 */
		/* 82150404h case   13:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x3);
		/* 82150404h case   13:*/		return 0x82150408;
		  /* 82150408h */ case   14:  		/* cmpwi CR6, R11, 63 */
		/* 82150408h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003F);
		/* 82150408h case   14:*/		return 0x8215040C;
		  /* 8215040Ch */ case   15:  		/* bc 4, CR6_GT, 64 */
		/* 8215040Ch case   15:*/		if ( !regs.CR[6].gt ) { return 0x8215044C;  }
		/* 8215040Ch case   15:*/		return 0x82150410;
		  /* 82150410h */ case   16:  		/* li R26, 63 */
		/* 82150410h case   16:*/		cpu::op::li<0>(regs,&regs.R26,0x3F);
		/* 82150410h case   16:*/		return 0x82150414;
		  /* 82150414h */ case   17:  		/* b 72 */
		/* 82150414h case   17:*/		return 0x8215045C;
		/* 82150414h case   17:*/		return 0x82150418;
	}
	return 0x82150418;
} // Block from 821503D0h-82150418h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82150418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150418);
		  /* 82150418h */ case    0:  		/* lis R11, -32255 */
		/* 82150418h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82150418h case    0:*/		return 0x8215041C;
		  /* 8215041Ch */ case    1:  		/* addi R4, R11, -15864 */
		/* 8215041Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFC208);
		/* 8215041Ch case    1:*/		return 0x82150420;
		  /* 82150420h */ case    2:  		/* bl -9224 */
		/* 82150420h case    2:*/		regs.LR = 0x82150424; return 0x8214E018;
		/* 82150420h case    2:*/		return 0x82150424;
		  /* 82150424h */ case    3:  		/* lwz R10, <#[R1 + 160]> */
		/* 82150424h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000A0) );
		/* 82150424h case    3:*/		return 0x82150428;
		  /* 82150428h */ case    4:  		/* li R11, 64 */
		/* 82150428h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x40);
		/* 82150428h case    4:*/		return 0x8215042C;
		  /* 8215042Ch */ case    5:  		/* addi R5, R10, 1 */
		/* 8215042Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0x1);
		/* 8215042Ch case    5:*/		return 0x82150430;
		  /* 82150430h */ case    6:  		/* divw R11, R11, R5 */
		/* 82150430h case    6:*/		cpu::op::divw<0>(regs,&regs.R11,regs.R11,regs.R5);
		/* 82150430h case    6:*/		return 0x82150434;
		  /* 82150434h */ case    7:  		/* twi 6, R5, 0 */
		/* 82150434h case    7:*/		cpu::op::tw<6>(regs, 0x82150434, regs.R5, 0x00000000);
		/* 82150434h case    7:*/		return 0x82150438;
		  /* 82150438h */ case    8:  		/* mulli R11, R11, 3 */
		/* 82150438h case    8:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x3);
		/* 82150438h case    8:*/		return 0x8215043C;
		  /* 8215043Ch */ case    9:  		/* cmpwi CR6, R11, 31 */
		/* 8215043Ch case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000001F);
		/* 8215043Ch case    9:*/		return 0x82150440;
		  /* 82150440h */ case   10:  		/* bc 4, CR6_GT, 12 */
		/* 82150440h case   10:*/		if ( !regs.CR[6].gt ) { return 0x8215044C;  }
		/* 82150440h case   10:*/		return 0x82150444;
		  /* 82150444h */ case   11:  		/* li R26, 31 */
		/* 82150444h case   11:*/		cpu::op::li<0>(regs,&regs.R26,0x1F);
		/* 82150444h case   11:*/		return 0x82150448;
		  /* 82150448h */ case   12:  		/* b 20 */
		/* 82150448h case   12:*/		return 0x8215045C;
		/* 82150448h case   12:*/		return 0x8215044C;
	}
	return 0x8215044C;
} // Block from 82150418h-8215044Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8215044Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215044C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215044C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215044C);
		  /* 8215044Ch */ case    0:  		/* mr R26, R11 */
		/* 8215044Ch case    0:*/		regs.R26 = regs.R11;
		/* 8215044Ch case    0:*/		return 0x82150450;
		  /* 82150450h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 82150450h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82150450h case    1:*/		return 0x82150454;
		  /* 82150454h */ case    2:  		/* mr R8, R28 */
		/* 82150454h case    2:*/		regs.R8 = regs.R28;
		/* 82150454h case    2:*/		return 0x82150458;
		  /* 82150458h */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 82150458h case    3:*/		if ( regs.CR[6].eq ) { return 0x82150460;  }
		/* 82150458h case    3:*/		return 0x8215045C;
	}
	return 0x8215045C;
} // Block from 8215044Ch-8215045Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215045Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215045C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215045C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215045C);
		  /* 8215045Ch */ case    0:  		/* mr R8, R27 */
		/* 8215045Ch case    0:*/		regs.R8 = regs.R27;
		/* 8215045Ch case    0:*/		return 0x82150460;
	}
	return 0x82150460;
} // Block from 8215045Ch-82150460h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82150460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150460);
		  /* 82150460h */ case    0:  		/* cmpwi CR6, R10, 0 */
		/* 82150460h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 82150460h case    0:*/		return 0x82150464;
		  /* 82150464h */ case    1:  		/* mr R6, R27 */
		/* 82150464h case    1:*/		regs.R6 = regs.R27;
		/* 82150464h case    1:*/		return 0x82150468;
		  /* 82150468h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 82150468h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82150470;  }
		/* 82150468h case    2:*/		return 0x8215046C;
		  /* 8215046Ch */ case    3:  		/* mr R6, R28 */
		/* 8215046Ch case    3:*/		regs.R6 = regs.R28;
		/* 8215046Ch case    3:*/		return 0x82150470;
	}
	return 0x82150470;
} // Block from 82150460h-82150470h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82150470h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150470( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150470) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150470);
		  /* 82150470h */ case    0:  		/* lis R11, -32253 */
		/* 82150470h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150470h case    0:*/		return 0x82150474;
		  /* 82150474h */ case    1:  		/* mr R7, R26 */
		/* 82150474h case    1:*/		regs.R7 = regs.R26;
		/* 82150474h case    1:*/		return 0x82150478;
		  /* 82150478h */ case    2:  		/* addi R4, R11, 30260 */
		/* 82150478h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7634);
		/* 82150478h case    2:*/		return 0x8215047C;
		  /* 8215047Ch */ case    3:  		/* mr R3, R31 */
		/* 8215047Ch case    3:*/		regs.R3 = regs.R31;
		/* 8215047Ch case    3:*/		return 0x82150480;
		  /* 82150480h */ case    4:  		/* bl -9320 */
		/* 82150480h case    4:*/		regs.LR = 0x82150484; return 0x8214E018;
		/* 82150480h case    4:*/		return 0x82150484;
		  /* 82150484h */ case    5:  		/* mr R4, R30 */
		/* 82150484h case    5:*/		regs.R4 = regs.R30;
		/* 82150484h case    5:*/		return 0x82150488;
		  /* 82150488h */ case    6:  		/* mr R3, R31 */
		/* 82150488h case    6:*/		regs.R3 = regs.R31;
		/* 82150488h case    6:*/		return 0x8215048C;
		  /* 8215048Ch */ case    7:  		/* bl -6620 */
		/* 8215048Ch case    7:*/		regs.LR = 0x82150490; return 0x8214EAB0;
		/* 8215048Ch case    7:*/		return 0x82150490;
		  /* 82150490h */ case    8:  		/* mr R4, R29 */
		/* 82150490h case    8:*/		regs.R4 = regs.R29;
		/* 82150490h case    8:*/		return 0x82150494;
		  /* 82150494h */ case    9:  		/* mr R3, R31 */
		/* 82150494h case    9:*/		regs.R3 = regs.R31;
		/* 82150494h case    9:*/		return 0x82150498;
		  /* 82150498h */ case   10:  		/* bl -9344 */
		/* 82150498h case   10:*/		regs.LR = 0x8215049C; return 0x8214E018;
		/* 82150498h case   10:*/		return 0x8215049C;
		  /* 8215049Ch */ case   11:  		/* lfs FR0, <#[R1 + 128]> */
		/* 8215049Ch case   11:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000080) );
		/* 8215049Ch case   11:*/		return 0x821504A0;
		  /* 821504A0h */ case   12:  		/* lfs FR13, <#[R1 + 132]> */
		/* 821504A0h case   12:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000084) );
		/* 821504A0h case   12:*/		return 0x821504A4;
		  /* 821504A4h */ case   13:  		/* mr R3, R31 */
		/* 821504A4h case   13:*/		regs.R3 = regs.R31;
		/* 821504A4h case   13:*/		return 0x821504A8;
		  /* 821504A8h */ case   14:  		/* fcmpu CR6, FR0, FR13 */
		/* 821504A8h case   14:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 821504A8h case   14:*/		return 0x821504AC;
		  /* 821504ACh */ case   15:  		/* fctiwz FR0, FR0 */
		/* 821504ACh case   15:*/		cpu::op::fctiwz<0>(regs,&regs.FR0,regs.FR0);
		/* 821504ACh case   15:*/		return 0x821504B0;
		  /* 821504B0h */ case   16:  		/* bc 4, CR6_EQ, 28 */
		/* 821504B0h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821504CC;  }
		/* 821504B0h case   16:*/		return 0x821504B4;
		  /* 821504B4h */ case   17:  		/* stfd FR0, <#[R1 + 88]> */
		/* 821504B4h case   17:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 821504B4h case   17:*/		return 0x821504B8;
		  /* 821504B8h */ case   18:  		/* lis R11, -32253 */
		/* 821504B8h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821504B8h case   18:*/		return 0x821504BC;
		  /* 821504BCh */ case   19:  		/* addi R4, R11, 30200 */
		/* 821504BCh case   19:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x75F8);
		/* 821504BCh case   19:*/		return 0x821504C0;
		  /* 821504C0h */ case   20:  		/* lwz R5, <#[R1 + 92]> */
		/* 821504C0h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000005C) );
		/* 821504C0h case   20:*/		return 0x821504C4;
		  /* 821504C4h */ case   21:  		/* bl -9388 */
		/* 821504C4h case   21:*/		regs.LR = 0x821504C8; return 0x8214E018;
		/* 821504C4h case   21:*/		return 0x821504C8;
		  /* 821504C8h */ case   22:  		/* b 36 */
		/* 821504C8h case   22:*/		return 0x821504EC;
		/* 821504C8h case   22:*/		return 0x821504CC;
	}
	return 0x821504CC;
} // Block from 82150470h-821504CCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 821504CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821504CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821504CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821504CC);
		  /* 821504CCh */ case    0:  		/* fctiwz FR13, FR13 */
		/* 821504CCh case    0:*/		cpu::op::fctiwz<0>(regs,&regs.FR13,regs.FR13);
		/* 821504CCh case    0:*/		return 0x821504D0;
		  /* 821504D0h */ case    1:  		/* stfd FR13, <#[R1 + 80]> */
		/* 821504D0h case    1:*/		cpu::mem::store64f( regs, regs.FR13, (uint32)(regs.R1 + 0x00000050) );
		/* 821504D0h case    1:*/		return 0x821504D4;
		  /* 821504D4h */ case    2:  		/* stfd FR0, <#[R1 + 88]> */
		/* 821504D4h case    2:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 821504D4h case    2:*/		return 0x821504D8;
		  /* 821504D8h */ case    3:  		/* lis R11, -32253 */
		/* 821504D8h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821504D8h case    3:*/		return 0x821504DC;
		  /* 821504DCh */ case    4:  		/* addi R4, R11, 30136 */
		/* 821504DCh case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x75B8);
		/* 821504DCh case    4:*/		return 0x821504E0;
		  /* 821504E0h */ case    5:  		/* lwz R6, <#[R1 + 84]> */
		/* 821504E0h case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000054) );
		/* 821504E0h case    5:*/		return 0x821504E4;
		  /* 821504E4h */ case    6:  		/* lwz R5, <#[R1 + 92]> */
		/* 821504E4h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000005C) );
		/* 821504E4h case    6:*/		return 0x821504E8;
		  /* 821504E8h */ case    7:  		/* bl -9424 */
		/* 821504E8h case    7:*/		regs.LR = 0x821504EC; return 0x8214E018;
		/* 821504E8h case    7:*/		return 0x821504EC;
	}
	return 0x821504EC;
} // Block from 821504CCh-821504ECh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821504ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821504EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821504EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821504EC);
		  /* 821504ECh */ case    0:  		/* mr R4, R30 */
		/* 821504ECh case    0:*/		regs.R4 = regs.R30;
		/* 821504ECh case    0:*/		return 0x821504F0;
		  /* 821504F0h */ case    1:  		/* mr R3, R31 */
		/* 821504F0h case    1:*/		regs.R3 = regs.R31;
		/* 821504F0h case    1:*/		return 0x821504F4;
		  /* 821504F4h */ case    2:  		/* bl -6724 */
		/* 821504F4h case    2:*/		regs.LR = 0x821504F8; return 0x8214EAB0;
		/* 821504F4h case    2:*/		return 0x821504F8;
		  /* 821504F8h */ case    3:  		/* mr R4, R29 */
		/* 821504F8h case    3:*/		regs.R4 = regs.R29;
		/* 821504F8h case    3:*/		return 0x821504FC;
		  /* 821504FCh */ case    4:  		/* mr R3, R31 */
		/* 821504FCh case    4:*/		regs.R3 = regs.R31;
		/* 821504FCh case    4:*/		return 0x82150500;
		  /* 82150500h */ case    5:  		/* bl -9448 */
		/* 82150500h case    5:*/		regs.LR = 0x82150504; return 0x8214E018;
		/* 82150500h case    5:*/		return 0x82150504;
		  /* 82150504h */ case    6:  		/* lwz R11, <#[R1 + 136]> */
		/* 82150504h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 82150504h case    6:*/		return 0x82150508;
		  /* 82150508h */ case    7:  		/* cmpwi CR6, R11, 0 */
		/* 82150508h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82150508h case    7:*/		return 0x8215050C;
		  /* 8215050Ch */ case    8:  		/* bc 12, CR6_EQ, 84 */
		/* 8215050Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x82150560;  }
		/* 8215050Ch case    8:*/		return 0x82150510;
		  /* 82150510h */ case    9:  		/* lis R11, -32253 */
		/* 82150510h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150510h case    9:*/		return 0x82150514;
		  /* 82150514h */ case   10:  		/* mr R3, R31 */
		/* 82150514h case   10:*/		regs.R3 = regs.R31;
		/* 82150514h case   10:*/		return 0x82150518;
		  /* 82150518h */ case   11:  		/* addi R4, R11, 30056 */
		/* 82150518h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7568);
		/* 82150518h case   11:*/		return 0x8215051C;
		  /* 8215051Ch */ case   12:  		/* bl -9476 */
		/* 8215051Ch case   12:*/		regs.LR = 0x82150520; return 0x8214E018;
		/* 8215051Ch case   12:*/		return 0x82150520;
		  /* 82150520h */ case   13:  		/* mr R4, R30 */
		/* 82150520h case   13:*/		regs.R4 = regs.R30;
		/* 82150520h case   13:*/		return 0x82150524;
		  /* 82150524h */ case   14:  		/* mr R3, R31 */
		/* 82150524h case   14:*/		regs.R3 = regs.R31;
		/* 82150524h case   14:*/		return 0x82150528;
		  /* 82150528h */ case   15:  		/* bl -6776 */
		/* 82150528h case   15:*/		regs.LR = 0x8215052C; return 0x8214EAB0;
		/* 82150528h case   15:*/		return 0x8215052C;
		  /* 8215052Ch */ case   16:  		/* mr R4, R29 */
		/* 8215052Ch case   16:*/		regs.R4 = regs.R29;
		/* 8215052Ch case   16:*/		return 0x82150530;
		  /* 82150530h */ case   17:  		/* mr R3, R31 */
		/* 82150530h case   17:*/		regs.R3 = regs.R31;
		/* 82150530h case   17:*/		return 0x82150534;
		  /* 82150534h */ case   18:  		/* bl -9500 */
		/* 82150534h case   18:*/		regs.LR = 0x82150538; return 0x8214E018;
		/* 82150534h case   18:*/		return 0x82150538;
		  /* 82150538h */ case   19:  		/* lis R11, -32253 */
		/* 82150538h case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150538h case   19:*/		return 0x8215053C;
		  /* 8215053Ch */ case   20:  		/* mr R3, R31 */
		/* 8215053Ch case   20:*/		regs.R3 = regs.R31;
		/* 8215053Ch case   20:*/		return 0x82150540;
		  /* 82150540h */ case   21:  		/* addi R4, R11, 30032 */
		/* 82150540h case   21:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7550);
		/* 82150540h case   21:*/		return 0x82150544;
		  /* 82150544h */ case   22:  		/* bl -9516 */
		/* 82150544h case   22:*/		regs.LR = 0x82150548; return 0x8214E018;
		/* 82150544h case   22:*/		return 0x82150548;
		  /* 82150548h */ case   23:  		/* mr R4, R30 */
		/* 82150548h case   23:*/		regs.R4 = regs.R30;
		/* 82150548h case   23:*/		return 0x8215054C;
		  /* 8215054Ch */ case   24:  		/* mr R3, R31 */
		/* 8215054Ch case   24:*/		regs.R3 = regs.R31;
		/* 8215054Ch case   24:*/		return 0x82150550;
		  /* 82150550h */ case   25:  		/* bl -6816 */
		/* 82150550h case   25:*/		regs.LR = 0x82150554; return 0x8214EAB0;
		/* 82150550h case   25:*/		return 0x82150554;
		  /* 82150554h */ case   26:  		/* mr R4, R29 */
		/* 82150554h case   26:*/		regs.R4 = regs.R29;
		/* 82150554h case   26:*/		return 0x82150558;
		  /* 82150558h */ case   27:  		/* mr R3, R31 */
		/* 82150558h case   27:*/		regs.R3 = regs.R31;
		/* 82150558h case   27:*/		return 0x8215055C;
		  /* 8215055Ch */ case   28:  		/* bl -9540 */
		/* 8215055Ch case   28:*/		regs.LR = 0x82150560; return 0x8214E018;
		/* 8215055Ch case   28:*/		return 0x82150560;
	}
	return 0x82150560;
} // Block from 821504ECh-82150560h (29 instructions)

//////////////////////////////////////////////////////
// Block at 82150560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150560);
		  /* 82150560h */ case    0:  		/* lwz R11, <#[R1 + 140]> */
		/* 82150560h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000008C) );
		/* 82150560h case    0:*/		return 0x82150564;
		  /* 82150564h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 82150564h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82150564h case    1:*/		return 0x82150568;
		  /* 82150568h */ case    2:  		/* bc 12, CR6_EQ, 84 */
		/* 82150568h case    2:*/		if ( regs.CR[6].eq ) { return 0x821505BC;  }
		/* 82150568h case    2:*/		return 0x8215056C;
		  /* 8215056Ch */ case    3:  		/* lis R11, -32253 */
		/* 8215056Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215056Ch case    3:*/		return 0x82150570;
		  /* 82150570h */ case    4:  		/* mr R3, R31 */
		/* 82150570h case    4:*/		regs.R3 = regs.R31;
		/* 82150570h case    4:*/		return 0x82150574;
		  /* 82150574h */ case    5:  		/* addi R4, R11, 29952 */
		/* 82150574h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7500);
		/* 82150574h case    5:*/		return 0x82150578;
		  /* 82150578h */ case    6:  		/* bl -9568 */
		/* 82150578h case    6:*/		regs.LR = 0x8215057C; return 0x8214E018;
		/* 82150578h case    6:*/		return 0x8215057C;
		  /* 8215057Ch */ case    7:  		/* mr R4, R30 */
		/* 8215057Ch case    7:*/		regs.R4 = regs.R30;
		/* 8215057Ch case    7:*/		return 0x82150580;
		  /* 82150580h */ case    8:  		/* mr R3, R31 */
		/* 82150580h case    8:*/		regs.R3 = regs.R31;
		/* 82150580h case    8:*/		return 0x82150584;
		  /* 82150584h */ case    9:  		/* bl -6868 */
		/* 82150584h case    9:*/		regs.LR = 0x82150588; return 0x8214EAB0;
		/* 82150584h case    9:*/		return 0x82150588;
		  /* 82150588h */ case   10:  		/* mr R4, R29 */
		/* 82150588h case   10:*/		regs.R4 = regs.R29;
		/* 82150588h case   10:*/		return 0x8215058C;
		  /* 8215058Ch */ case   11:  		/* mr R3, R31 */
		/* 8215058Ch case   11:*/		regs.R3 = regs.R31;
		/* 8215058Ch case   11:*/		return 0x82150590;
		  /* 82150590h */ case   12:  		/* bl -9592 */
		/* 82150590h case   12:*/		regs.LR = 0x82150594; return 0x8214E018;
		/* 82150590h case   12:*/		return 0x82150594;
		  /* 82150594h */ case   13:  		/* lis R11, -32253 */
		/* 82150594h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150594h case   13:*/		return 0x82150598;
		  /* 82150598h */ case   14:  		/* mr R3, R31 */
		/* 82150598h case   14:*/		regs.R3 = regs.R31;
		/* 82150598h case   14:*/		return 0x8215059C;
		  /* 8215059Ch */ case   15:  		/* addi R4, R11, 29880 */
		/* 8215059Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x74B8);
		/* 8215059Ch case   15:*/		return 0x821505A0;
		  /* 821505A0h */ case   16:  		/* bl -9608 */
		/* 821505A0h case   16:*/		regs.LR = 0x821505A4; return 0x8214E018;
		/* 821505A0h case   16:*/		return 0x821505A4;
		  /* 821505A4h */ case   17:  		/* mr R4, R30 */
		/* 821505A4h case   17:*/		regs.R4 = regs.R30;
		/* 821505A4h case   17:*/		return 0x821505A8;
		  /* 821505A8h */ case   18:  		/* mr R3, R31 */
		/* 821505A8h case   18:*/		regs.R3 = regs.R31;
		/* 821505A8h case   18:*/		return 0x821505AC;
		  /* 821505ACh */ case   19:  		/* bl -6908 */
		/* 821505ACh case   19:*/		regs.LR = 0x821505B0; return 0x8214EAB0;
		/* 821505ACh case   19:*/		return 0x821505B0;
		  /* 821505B0h */ case   20:  		/* mr R4, R29 */
		/* 821505B0h case   20:*/		regs.R4 = regs.R29;
		/* 821505B0h case   20:*/		return 0x821505B4;
		  /* 821505B4h */ case   21:  		/* mr R3, R31 */
		/* 821505B4h case   21:*/		regs.R3 = regs.R31;
		/* 821505B4h case   21:*/		return 0x821505B8;
		  /* 821505B8h */ case   22:  		/* bl -9632 */
		/* 821505B8h case   22:*/		regs.LR = 0x821505BC; return 0x8214E018;
		/* 821505B8h case   22:*/		return 0x821505BC;
	}
	return 0x821505BC;
} // Block from 82150560h-821505BCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 821505BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821505BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821505BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821505BC);
		  /* 821505BCh */ case    0:  		/* lwz R11, <#[R1 + 144]> */
		/* 821505BCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000090) );
		/* 821505BCh case    0:*/		return 0x821505C0;
		  /* 821505C0h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 821505C0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821505C0h case    1:*/		return 0x821505C4;
		  /* 821505C4h */ case    2:  		/* bc 12, CR6_EQ, 44 */
		/* 821505C4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821505F0;  }
		/* 821505C4h case    2:*/		return 0x821505C8;
		  /* 821505C8h */ case    3:  		/* lis R11, -32253 */
		/* 821505C8h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821505C8h case    3:*/		return 0x821505CC;
		  /* 821505CCh */ case    4:  		/* mr R3, R31 */
		/* 821505CCh case    4:*/		regs.R3 = regs.R31;
		/* 821505CCh case    4:*/		return 0x821505D0;
		  /* 821505D0h */ case    5:  		/* addi R4, R11, 29792 */
		/* 821505D0h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7460);
		/* 821505D0h case    5:*/		return 0x821505D4;
		  /* 821505D4h */ case    6:  		/* bl -9660 */
		/* 821505D4h case    6:*/		regs.LR = 0x821505D8; return 0x8214E018;
		/* 821505D4h case    6:*/		return 0x821505D8;
		  /* 821505D8h */ case    7:  		/* mr R4, R30 */
		/* 821505D8h case    7:*/		regs.R4 = regs.R30;
		/* 821505D8h case    7:*/		return 0x821505DC;
		  /* 821505DCh */ case    8:  		/* mr R3, R31 */
		/* 821505DCh case    8:*/		regs.R3 = regs.R31;
		/* 821505DCh case    8:*/		return 0x821505E0;
		  /* 821505E0h */ case    9:  		/* bl -6960 */
		/* 821505E0h case    9:*/		regs.LR = 0x821505E4; return 0x8214EAB0;
		/* 821505E0h case    9:*/		return 0x821505E4;
		  /* 821505E4h */ case   10:  		/* mr R4, R29 */
		/* 821505E4h case   10:*/		regs.R4 = regs.R29;
		/* 821505E4h case   10:*/		return 0x821505E8;
		  /* 821505E8h */ case   11:  		/* mr R3, R31 */
		/* 821505E8h case   11:*/		regs.R3 = regs.R31;
		/* 821505E8h case   11:*/		return 0x821505EC;
		  /* 821505ECh */ case   12:  		/* bl -9684 */
		/* 821505ECh case   12:*/		regs.LR = 0x821505F0; return 0x8214E018;
		/* 821505ECh case   12:*/		return 0x821505F0;
	}
	return 0x821505F0;
} // Block from 821505BCh-821505F0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821505F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821505F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821505F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821505F0);
		  /* 821505F0h */ case    0:  		/* lwz R11, <#[R1 + 148]> */
		/* 821505F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000094) );
		/* 821505F0h case    0:*/		return 0x821505F4;
		  /* 821505F4h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 821505F4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821505F4h case    1:*/		return 0x821505F8;
		  /* 821505F8h */ case    2:  		/* bc 12, CR6_EQ, 44 */
		/* 821505F8h case    2:*/		if ( regs.CR[6].eq ) { return 0x82150624;  }
		/* 821505F8h case    2:*/		return 0x821505FC;
		  /* 821505FCh */ case    3:  		/* lis R11, -32253 */
		/* 821505FCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821505FCh case    3:*/		return 0x82150600;
		  /* 82150600h */ case    4:  		/* mr R3, R31 */
		/* 82150600h case    4:*/		regs.R3 = regs.R31;
		/* 82150600h case    4:*/		return 0x82150604;
		  /* 82150604h */ case    5:  		/* addi R4, R11, 29720 */
		/* 82150604h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7418);
		/* 82150604h case    5:*/		return 0x82150608;
		  /* 82150608h */ case    6:  		/* bl -9712 */
		/* 82150608h case    6:*/		regs.LR = 0x8215060C; return 0x8214E018;
		/* 82150608h case    6:*/		return 0x8215060C;
		  /* 8215060Ch */ case    7:  		/* mr R4, R30 */
		/* 8215060Ch case    7:*/		regs.R4 = regs.R30;
		/* 8215060Ch case    7:*/		return 0x82150610;
		  /* 82150610h */ case    8:  		/* mr R3, R31 */
		/* 82150610h case    8:*/		regs.R3 = regs.R31;
		/* 82150610h case    8:*/		return 0x82150614;
		  /* 82150614h */ case    9:  		/* bl -7012 */
		/* 82150614h case    9:*/		regs.LR = 0x82150618; return 0x8214EAB0;
		/* 82150614h case    9:*/		return 0x82150618;
		  /* 82150618h */ case   10:  		/* mr R4, R29 */
		/* 82150618h case   10:*/		regs.R4 = regs.R29;
		/* 82150618h case   10:*/		return 0x8215061C;
		  /* 8215061Ch */ case   11:  		/* mr R3, R31 */
		/* 8215061Ch case   11:*/		regs.R3 = regs.R31;
		/* 8215061Ch case   11:*/		return 0x82150620;
		  /* 82150620h */ case   12:  		/* bl -9736 */
		/* 82150620h case   12:*/		regs.LR = 0x82150624; return 0x8214E018;
		/* 82150620h case   12:*/		return 0x82150624;
	}
	return 0x82150624;
} // Block from 821505F0h-82150624h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82150624h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150624( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150624) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150624);
		  /* 82150624h */ case    0:  		/* lwz R11, <#[R1 + 152]> */
		/* 82150624h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000098) );
		/* 82150624h case    0:*/		return 0x82150628;
		  /* 82150628h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 82150628h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82150628h case    1:*/		return 0x8215062C;
		  /* 8215062Ch */ case    2:  		/* bc 12, CR6_EQ, 84 */
		/* 8215062Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82150680;  }
		/* 8215062Ch case    2:*/		return 0x82150630;
		  /* 82150630h */ case    3:  		/* lis R11, -32253 */
		/* 82150630h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150630h case    3:*/		return 0x82150634;
		  /* 82150634h */ case    4:  		/* mr R3, R31 */
		/* 82150634h case    4:*/		regs.R3 = regs.R31;
		/* 82150634h case    4:*/		return 0x82150638;
		  /* 82150638h */ case    5:  		/* addi R4, R11, 29640 */
		/* 82150638h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x73C8);
		/* 82150638h case    5:*/		return 0x8215063C;
		  /* 8215063Ch */ case    6:  		/* bl -9764 */
		/* 8215063Ch case    6:*/		regs.LR = 0x82150640; return 0x8214E018;
		/* 8215063Ch case    6:*/		return 0x82150640;
		  /* 82150640h */ case    7:  		/* mr R4, R30 */
		/* 82150640h case    7:*/		regs.R4 = regs.R30;
		/* 82150640h case    7:*/		return 0x82150644;
		  /* 82150644h */ case    8:  		/* mr R3, R31 */
		/* 82150644h case    8:*/		regs.R3 = regs.R31;
		/* 82150644h case    8:*/		return 0x82150648;
		  /* 82150648h */ case    9:  		/* bl -7064 */
		/* 82150648h case    9:*/		regs.LR = 0x8215064C; return 0x8214EAB0;
		/* 82150648h case    9:*/		return 0x8215064C;
		  /* 8215064Ch */ case   10:  		/* mr R4, R29 */
		/* 8215064Ch case   10:*/		regs.R4 = regs.R29;
		/* 8215064Ch case   10:*/		return 0x82150650;
		  /* 82150650h */ case   11:  		/* mr R3, R31 */
		/* 82150650h case   11:*/		regs.R3 = regs.R31;
		/* 82150650h case   11:*/		return 0x82150654;
		  /* 82150654h */ case   12:  		/* bl -9788 */
		/* 82150654h case   12:*/		regs.LR = 0x82150658; return 0x8214E018;
		/* 82150654h case   12:*/		return 0x82150658;
		  /* 82150658h */ case   13:  		/* lis R11, -32253 */
		/* 82150658h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150658h case   13:*/		return 0x8215065C;
		  /* 8215065Ch */ case   14:  		/* mr R3, R31 */
		/* 8215065Ch case   14:*/		regs.R3 = regs.R31;
		/* 8215065Ch case   14:*/		return 0x82150660;
		  /* 82150660h */ case   15:  		/* addi R4, R11, 29600 */
		/* 82150660h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x73A0);
		/* 82150660h case   15:*/		return 0x82150664;
		  /* 82150664h */ case   16:  		/* bl -9804 */
		/* 82150664h case   16:*/		regs.LR = 0x82150668; return 0x8214E018;
		/* 82150664h case   16:*/		return 0x82150668;
		  /* 82150668h */ case   17:  		/* mr R4, R30 */
		/* 82150668h case   17:*/		regs.R4 = regs.R30;
		/* 82150668h case   17:*/		return 0x8215066C;
		  /* 8215066Ch */ case   18:  		/* mr R3, R31 */
		/* 8215066Ch case   18:*/		regs.R3 = regs.R31;
		/* 8215066Ch case   18:*/		return 0x82150670;
		  /* 82150670h */ case   19:  		/* bl -7104 */
		/* 82150670h case   19:*/		regs.LR = 0x82150674; return 0x8214EAB0;
		/* 82150670h case   19:*/		return 0x82150674;
		  /* 82150674h */ case   20:  		/* mr R4, R29 */
		/* 82150674h case   20:*/		regs.R4 = regs.R29;
		/* 82150674h case   20:*/		return 0x82150678;
		  /* 82150678h */ case   21:  		/* mr R3, R31 */
		/* 82150678h case   21:*/		regs.R3 = regs.R31;
		/* 82150678h case   21:*/		return 0x8215067C;
		  /* 8215067Ch */ case   22:  		/* bl -9828 */
		/* 8215067Ch case   22:*/		regs.LR = 0x82150680; return 0x8214E018;
		/* 8215067Ch case   22:*/		return 0x82150680;
	}
	return 0x82150680;
} // Block from 82150624h-82150680h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82150680h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150680);
		  /* 82150680h */ case    0:  		/* lwz R11, <#[R1 + 156]> */
		/* 82150680h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000009C) );
		/* 82150680h case    0:*/		return 0x82150684;
		  /* 82150684h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 82150684h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82150684h case    1:*/		return 0x82150688;
		  /* 82150688h */ case    2:  		/* bc 12, CR6_EQ, 84 */
		/* 82150688h case    2:*/		if ( regs.CR[6].eq ) { return 0x821506DC;  }
		/* 82150688h case    2:*/		return 0x8215068C;
		  /* 8215068Ch */ case    3:  		/* lis R11, -32253 */
		/* 8215068Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215068Ch case    3:*/		return 0x82150690;
		  /* 82150690h */ case    4:  		/* mr R3, R31 */
		/* 82150690h case    4:*/		regs.R3 = regs.R31;
		/* 82150690h case    4:*/		return 0x82150694;
		  /* 82150694h */ case    5:  		/* addi R4, R11, 29520 */
		/* 82150694h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7350);
		/* 82150694h case    5:*/		return 0x82150698;
		  /* 82150698h */ case    6:  		/* bl -9856 */
		/* 82150698h case    6:*/		regs.LR = 0x8215069C; return 0x8214E018;
		/* 82150698h case    6:*/		return 0x8215069C;
		  /* 8215069Ch */ case    7:  		/* mr R4, R30 */
		/* 8215069Ch case    7:*/		regs.R4 = regs.R30;
		/* 8215069Ch case    7:*/		return 0x821506A0;
		  /* 821506A0h */ case    8:  		/* mr R3, R31 */
		/* 821506A0h case    8:*/		regs.R3 = regs.R31;
		/* 821506A0h case    8:*/		return 0x821506A4;
		  /* 821506A4h */ case    9:  		/* bl -7156 */
		/* 821506A4h case    9:*/		regs.LR = 0x821506A8; return 0x8214EAB0;
		/* 821506A4h case    9:*/		return 0x821506A8;
		  /* 821506A8h */ case   10:  		/* mr R4, R29 */
		/* 821506A8h case   10:*/		regs.R4 = regs.R29;
		/* 821506A8h case   10:*/		return 0x821506AC;
		  /* 821506ACh */ case   11:  		/* mr R3, R31 */
		/* 821506ACh case   11:*/		regs.R3 = regs.R31;
		/* 821506ACh case   11:*/		return 0x821506B0;
		  /* 821506B0h */ case   12:  		/* bl -9880 */
		/* 821506B0h case   12:*/		regs.LR = 0x821506B4; return 0x8214E018;
		/* 821506B0h case   12:*/		return 0x821506B4;
		  /* 821506B4h */ case   13:  		/* lis R11, -32253 */
		/* 821506B4h case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821506B4h case   13:*/		return 0x821506B8;
		  /* 821506B8h */ case   14:  		/* mr R3, R31 */
		/* 821506B8h case   14:*/		regs.R3 = regs.R31;
		/* 821506B8h case   14:*/		return 0x821506BC;
		  /* 821506BCh */ case   15:  		/* addi R4, R11, 29472 */
		/* 821506BCh case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7320);
		/* 821506BCh case   15:*/		return 0x821506C0;
		  /* 821506C0h */ case   16:  		/* bl -9896 */
		/* 821506C0h case   16:*/		regs.LR = 0x821506C4; return 0x8214E018;
		/* 821506C0h case   16:*/		return 0x821506C4;
		  /* 821506C4h */ case   17:  		/* mr R4, R30 */
		/* 821506C4h case   17:*/		regs.R4 = regs.R30;
		/* 821506C4h case   17:*/		return 0x821506C8;
		  /* 821506C8h */ case   18:  		/* mr R3, R31 */
		/* 821506C8h case   18:*/		regs.R3 = regs.R31;
		/* 821506C8h case   18:*/		return 0x821506CC;
		  /* 821506CCh */ case   19:  		/* bl -7196 */
		/* 821506CCh case   19:*/		regs.LR = 0x821506D0; return 0x8214EAB0;
		/* 821506CCh case   19:*/		return 0x821506D0;
		  /* 821506D0h */ case   20:  		/* mr R4, R29 */
		/* 821506D0h case   20:*/		regs.R4 = regs.R29;
		/* 821506D0h case   20:*/		return 0x821506D4;
		  /* 821506D4h */ case   21:  		/* mr R3, R31 */
		/* 821506D4h case   21:*/		regs.R3 = regs.R31;
		/* 821506D4h case   21:*/		return 0x821506D8;
		  /* 821506D8h */ case   22:  		/* bl -9920 */
		/* 821506D8h case   22:*/		regs.LR = 0x821506DC; return 0x8214E018;
		/* 821506D8h case   22:*/		return 0x821506DC;
	}
	return 0x821506DC;
} // Block from 82150680h-821506DCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 821506DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821506DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821506DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821506DC);
		  /* 821506DCh */ case    0:  		/* cmplwi CR6, R26, 9 */
		/* 821506DCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000009);
		/* 821506DCh case    0:*/		return 0x821506E0;
		  /* 821506E0h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821506E0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821506EC;  }
		/* 821506E0h case    1:*/		return 0x821506E4;
		  /* 821506E4h */ case    2:  		/* cmplwi CR6, R26, 6 */
		/* 821506E4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000006);
		/* 821506E4h case    2:*/		return 0x821506E8;
		  /* 821506E8h */ case    3:  		/* bc 4, CR6_EQ, 44 */
		/* 821506E8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82150714;  }
		/* 821506E8h case    3:*/		return 0x821506EC;
	}
	return 0x821506EC;
} // Block from 821506DCh-821506ECh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821506ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821506EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821506EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821506EC);
		  /* 821506ECh */ case    0:  		/* lis R11, -32253 */
		/* 821506ECh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821506ECh case    0:*/		return 0x821506F0;
		  /* 821506F0h */ case    1:  		/* mr R3, R31 */
		/* 821506F0h case    1:*/		regs.R3 = regs.R31;
		/* 821506F0h case    1:*/		return 0x821506F4;
		  /* 821506F4h */ case    2:  		/* addi R4, R11, 29392 */
		/* 821506F4h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x72D0);
		/* 821506F4h case    2:*/		return 0x821506F8;
		  /* 821506F8h */ case    3:  		/* bl -9952 */
		/* 821506F8h case    3:*/		regs.LR = 0x821506FC; return 0x8214E018;
		/* 821506F8h case    3:*/		return 0x821506FC;
		  /* 821506FCh */ case    4:  		/* mr R4, R30 */
		/* 821506FCh case    4:*/		regs.R4 = regs.R30;
		/* 821506FCh case    4:*/		return 0x82150700;
		  /* 82150700h */ case    5:  		/* mr R3, R31 */
		/* 82150700h case    5:*/		regs.R3 = regs.R31;
		/* 82150700h case    5:*/		return 0x82150704;
		  /* 82150704h */ case    6:  		/* bl -7252 */
		/* 82150704h case    6:*/		regs.LR = 0x82150708; return 0x8214EAB0;
		/* 82150704h case    6:*/		return 0x82150708;
		  /* 82150708h */ case    7:  		/* mr R4, R29 */
		/* 82150708h case    7:*/		regs.R4 = regs.R29;
		/* 82150708h case    7:*/		return 0x8215070C;
		  /* 8215070Ch */ case    8:  		/* mr R3, R31 */
		/* 8215070Ch case    8:*/		regs.R3 = regs.R31;
		/* 8215070Ch case    8:*/		return 0x82150710;
		  /* 82150710h */ case    9:  		/* bl -9976 */
		/* 82150710h case    9:*/		regs.LR = 0x82150714; return 0x8214E018;
		/* 82150710h case    9:*/		return 0x82150714;
	}
	return 0x82150714;
} // Block from 821506ECh-82150714h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82150714h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150714( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150714) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150714);
		  /* 82150714h */ case    0:  		/* cmplwi CR6, R26, 3 */
		/* 82150714h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000003);
		/* 82150714h case    0:*/		return 0x82150718;
		  /* 82150718h */ case    1:  		/* bc 4, CR6_EQ, 236 */
		/* 82150718h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82150804;  }
		/* 82150718h case    1:*/		return 0x8215071C;
		  /* 8215071Ch */ case    2:  		/* lis R11, -32253 */
		/* 8215071Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215071Ch case    2:*/		return 0x82150720;
		  /* 82150720h */ case    3:  		/* mr R3, R31 */
		/* 82150720h case    3:*/		regs.R3 = regs.R31;
		/* 82150720h case    3:*/		return 0x82150724;
		  /* 82150724h */ case    4:  		/* addi R4, R11, 29312 */
		/* 82150724h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7280);
		/* 82150724h case    4:*/		return 0x82150728;
		  /* 82150728h */ case    5:  		/* bl -10000 */
		/* 82150728h case    5:*/		regs.LR = 0x8215072C; return 0x8214E018;
		/* 82150728h case    5:*/		return 0x8215072C;
		  /* 8215072Ch */ case    6:  		/* mr R4, R30 */
		/* 8215072Ch case    6:*/		regs.R4 = regs.R30;
		/* 8215072Ch case    6:*/		return 0x82150730;
		  /* 82150730h */ case    7:  		/* mr R3, R31 */
		/* 82150730h case    7:*/		regs.R3 = regs.R31;
		/* 82150730h case    7:*/		return 0x82150734;
		  /* 82150734h */ case    8:  		/* bl -7300 */
		/* 82150734h case    8:*/		regs.LR = 0x82150738; return 0x8214EAB0;
		/* 82150734h case    8:*/		return 0x82150738;
		  /* 82150738h */ case    9:  		/* mr R4, R29 */
		/* 82150738h case    9:*/		regs.R4 = regs.R29;
		/* 82150738h case    9:*/		return 0x8215073C;
		  /* 8215073Ch */ case   10:  		/* mr R3, R31 */
		/* 8215073Ch case   10:*/		regs.R3 = regs.R31;
		/* 8215073Ch case   10:*/		return 0x82150740;
		  /* 82150740h */ case   11:  		/* bl -10024 */
		/* 82150740h case   11:*/		regs.LR = 0x82150744; return 0x8214E018;
		/* 82150740h case   11:*/		return 0x82150744;
		  /* 82150744h */ case   12:  		/* lwz R11, <#[R1 + 160]> */
		/* 82150744h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A0) );
		/* 82150744h case   12:*/		return 0x82150748;
		  /* 82150748h */ case   13:  		/* mr R3, R31 */
		/* 82150748h case   13:*/		regs.R3 = regs.R31;
		/* 82150748h case   13:*/		return 0x8215074C;
		  /* 8215074Ch */ case   14:  		/* addi R11, R11, 1 */
		/* 8215074Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8215074Ch case   14:*/		return 0x82150750;
		  /* 82150750h */ case   15:  		/* cmpwi CR6, R11, 56 */
		/* 82150750h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000038);
		/* 82150750h case   15:*/		return 0x82150754;
		  /* 82150754h */ case   16:  		/* bc 4, CR6_GT, 16 */
		/* 82150754h case   16:*/		if ( !regs.CR[6].gt ) { return 0x82150764;  }
		/* 82150754h case   16:*/		return 0x82150758;
		  /* 82150758h */ case   17:  		/* lis R11, -32253 */
		/* 82150758h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150758h case   17:*/		return 0x8215075C;
		  /* 8215075Ch */ case   18:  		/* addi R4, R11, 29248 */
		/* 8215075Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7240);
		/* 8215075Ch case   18:*/		return 0x82150760;
		  /* 82150760h */ case   19:  		/* b 12 */
		/* 82150760h case   19:*/		return 0x8215076C;
		/* 82150760h case   19:*/		return 0x82150764;
	}
	return 0x82150764;
} // Block from 82150714h-82150764h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82150764h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150764( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150764) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150764);
		  /* 82150764h */ case    0:  		/* lis R11, -32253 */
		/* 82150764h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150764h case    0:*/		return 0x82150768;
		  /* 82150768h */ case    1:  		/* addi R4, R11, 29192 */
		/* 82150768h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7208);
		/* 82150768h case    1:*/		return 0x8215076C;
	}
	return 0x8215076C;
} // Block from 82150764h-8215076Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215076Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215076C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215076C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215076C);
		  /* 8215076Ch */ case    0:  		/* bl -10068 */
		/* 8215076Ch case    0:*/		regs.LR = 0x82150770; return 0x8214E018;
		/* 8215076Ch case    0:*/		return 0x82150770;
		  /* 82150770h */ case    1:  		/* mr R4, R30 */
		/* 82150770h case    1:*/		regs.R4 = regs.R30;
		/* 82150770h case    1:*/		return 0x82150774;
		  /* 82150774h */ case    2:  		/* mr R3, R31 */
		/* 82150774h case    2:*/		regs.R3 = regs.R31;
		/* 82150774h case    2:*/		return 0x82150778;
		  /* 82150778h */ case    3:  		/* bl -7368 */
		/* 82150778h case    3:*/		regs.LR = 0x8215077C; return 0x8214EAB0;
		/* 82150778h case    3:*/		return 0x8215077C;
		  /* 8215077Ch */ case    4:  		/* mr R4, R29 */
		/* 8215077Ch case    4:*/		regs.R4 = regs.R29;
		/* 8215077Ch case    4:*/		return 0x82150780;
		  /* 82150780h */ case    5:  		/* mr R3, R31 */
		/* 82150780h case    5:*/		regs.R3 = regs.R31;
		/* 82150780h case    5:*/		return 0x82150784;
		  /* 82150784h */ case    6:  		/* bl -10092 */
		/* 82150784h case    6:*/		regs.LR = 0x82150788; return 0x8214E018;
		/* 82150784h case    6:*/		return 0x82150788;
		  /* 82150788h */ case    7:  		/* cmpwi CR6, R25, 0 */
		/* 82150788h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 82150788h case    7:*/		return 0x8215078C;
		  /* 8215078Ch */ case    8:  		/* bc 12, CR6_EQ, 16 */
		/* 8215078Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x8215079C;  }
		/* 8215078Ch case    8:*/		return 0x82150790;
		  /* 82150790h */ case    9:  		/* lis R11, -32253 */
		/* 82150790h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150790h case    9:*/		return 0x82150794;
		  /* 82150794h */ case   10:  		/* addi R5, R11, 29172 */
		/* 82150794h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x71F4);
		/* 82150794h case   10:*/		return 0x82150798;
		  /* 82150798h */ case   11:  		/* b 12 */
		/* 82150798h case   11:*/		return 0x821507A4;
		/* 82150798h case   11:*/		return 0x8215079C;
	}
	return 0x8215079C;
} // Block from 8215076Ch-8215079Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8215079Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215079C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215079C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215079C);
		  /* 8215079Ch */ case    0:  		/* lis R11, -32253 */
		/* 8215079Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215079Ch case    0:*/		return 0x821507A0;
		  /* 821507A0h */ case    1:  		/* addi R5, R11, 29152 */
		/* 821507A0h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x71E0);
		/* 821507A0h case    1:*/		return 0x821507A4;
	}
	return 0x821507A4;
} // Block from 8215079Ch-821507A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821507A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821507A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821507A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821507A4);
		  /* 821507A4h */ case    0:  		/* lis R11, -32253 */
		/* 821507A4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821507A4h case    0:*/		return 0x821507A8;
		  /* 821507A8h */ case    1:  		/* mr R3, R31 */
		/* 821507A8h case    1:*/		regs.R3 = regs.R31;
		/* 821507A8h case    1:*/		return 0x821507AC;
		  /* 821507ACh */ case    2:  		/* addi R4, R11, 29104 */
		/* 821507ACh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x71B0);
		/* 821507ACh case    2:*/		return 0x821507B0;
		  /* 821507B0h */ case    3:  		/* bl -10136 */
		/* 821507B0h case    3:*/		regs.LR = 0x821507B4; return 0x8214E018;
		/* 821507B0h case    3:*/		return 0x821507B4;
		  /* 821507B4h */ case    4:  		/* mr R4, R30 */
		/* 821507B4h case    4:*/		regs.R4 = regs.R30;
		/* 821507B4h case    4:*/		return 0x821507B8;
		  /* 821507B8h */ case    5:  		/* mr R3, R31 */
		/* 821507B8h case    5:*/		regs.R3 = regs.R31;
		/* 821507B8h case    5:*/		return 0x821507BC;
		  /* 821507BCh */ case    6:  		/* bl -7436 */
		/* 821507BCh case    6:*/		regs.LR = 0x821507C0; return 0x8214EAB0;
		/* 821507BCh case    6:*/		return 0x821507C0;
		  /* 821507C0h */ case    7:  		/* mr R4, R29 */
		/* 821507C0h case    7:*/		regs.R4 = regs.R29;
		/* 821507C0h case    7:*/		return 0x821507C4;
		  /* 821507C4h */ case    8:  		/* mr R3, R31 */
		/* 821507C4h case    8:*/		regs.R3 = regs.R31;
		/* 821507C4h case    8:*/		return 0x821507C8;
		  /* 821507C8h */ case    9:  		/* bl -10160 */
		/* 821507C8h case    9:*/		regs.LR = 0x821507CC; return 0x8214E018;
		/* 821507C8h case    9:*/		return 0x821507CC;
		  /* 821507CCh */ case   10:  		/* subfic R11, R25, 0 */
		/* 821507CCh case   10:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R25,0x0);
		/* 821507CCh case   10:*/		return 0x821507D0;
		  /* 821507D0h */ case   11:  		/* lis R10, -32253 */
		/* 821507D0h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821507D0h case   11:*/		return 0x821507D4;
		  /* 821507D4h */ case   12:  		/* subfe R11, R11, R11 */
		/* 821507D4h case   12:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821507D4h case   12:*/		return 0x821507D8;
		  /* 821507D8h */ case   13:  		/* addi R4, R10, 29068 */
		/* 821507D8h case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x718C);
		/* 821507D8h case   13:*/		return 0x821507DC;
		  /* 821507DCh */ case   14:  		/* rlwinm R11, R11, 0, 29, 30 */
		/* 821507DCh case   14:*/		cpu::op::rlwinm<0,0,29,30>(regs,&regs.R11,regs.R11);
		/* 821507DCh case   14:*/		return 0x821507E0;
		  /* 821507E0h */ case   15:  		/* mr R3, R31 */
		/* 821507E0h case   15:*/		regs.R3 = regs.R31;
		/* 821507E0h case   15:*/		return 0x821507E4;
		  /* 821507E4h */ case   16:  		/* addi R5, R11, 80 */
		/* 821507E4h case   16:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x50);
		/* 821507E4h case   16:*/		return 0x821507E8;
		  /* 821507E8h */ case   17:  		/* bl -10192 */
		/* 821507E8h case   17:*/		regs.LR = 0x821507EC; return 0x8214E018;
		/* 821507E8h case   17:*/		return 0x821507EC;
		  /* 821507ECh */ case   18:  		/* mr R4, R30 */
		/* 821507ECh case   18:*/		regs.R4 = regs.R30;
		/* 821507ECh case   18:*/		return 0x821507F0;
		  /* 821507F0h */ case   19:  		/* mr R3, R31 */
		/* 821507F0h case   19:*/		regs.R3 = regs.R31;
		/* 821507F0h case   19:*/		return 0x821507F4;
		  /* 821507F4h */ case   20:  		/* bl -7492 */
		/* 821507F4h case   20:*/		regs.LR = 0x821507F8; return 0x8214EAB0;
		/* 821507F4h case   20:*/		return 0x821507F8;
	}
	return 0x821507F8;
} // Block from 821507A4h-821507F8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821507F8h
// Function '?DisassembleR500Microcode@XGRAPHICS@@YAJKW4UCODESHADERTYPE@@PBU_UCODE_HEADER@@KPBXKPAVOutStream@1@K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821507F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821507F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821507F8);
		  /* 821507F8h */ case    0:  		/* mr R4, R29 */
		/* 821507F8h case    0:*/		regs.R4 = regs.R29;
		/* 821507F8h case    0:*/		return 0x821507FC;
		  /* 821507FCh */ case    1:  		/* mr R3, R31 */
		/* 821507FCh case    1:*/		regs.R3 = regs.R31;
		/* 821507FCh case    1:*/		return 0x82150800;
		  /* 82150800h */ case    2:  		/* bl -10216 */
		/* 82150800h case    2:*/		regs.LR = 0x82150804; return 0x8214E018;
		/* 82150800h case    2:*/		return 0x82150804;
	}
	return 0x82150804;
} // Block from 821507F8h-82150804h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82150804h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150804( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150804) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150804);
		  /* 82150804h */ case    0:  		/* mr R4, R30 */
		/* 82150804h case    0:*/		regs.R4 = regs.R30;
		/* 82150804h case    0:*/		return 0x82150808;
		  /* 82150808h */ case    1:  		/* mr R3, R31 */
		/* 82150808h case    1:*/		regs.R3 = regs.R31;
		/* 82150808h case    1:*/		return 0x8215080C;
		  /* 8215080Ch */ case    2:  		/* bl -7516 */
		/* 8215080Ch case    2:*/		regs.LR = 0x82150810; return 0x8214EAB0;
		/* 8215080Ch case    2:*/		return 0x82150810;
		  /* 82150810h */ case    3:  		/* mr R4, R29 */
		/* 82150810h case    3:*/		regs.R4 = regs.R29;
		/* 82150810h case    3:*/		return 0x82150814;
		  /* 82150814h */ case    4:  		/* mr R3, R31 */
		/* 82150814h case    4:*/		regs.R3 = regs.R31;
		/* 82150814h case    4:*/		return 0x82150818;
		  /* 82150818h */ case    5:  		/* bl -10240 */
		/* 82150818h case    5:*/		regs.LR = 0x8215081C; return 0x8214E018;
		/* 82150818h case    5:*/		return 0x8215081C;
	}
	return 0x8215081C;
} // Block from 82150804h-8215081Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215081Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215081C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215081C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215081C);
		  /* 8215081Ch */ case    0:  		/* li R3, 0 */
		/* 8215081Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215081Ch case    0:*/		return 0x82150820;
		  /* 82150820h */ case    1:  		/* addi R1, R1, 256 */
		/* 82150820h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 82150820h case    1:*/		return 0x82150824;
		  /* 82150824h */ case    2:  		/* b -783752 */
		/* 82150824h case    2:*/		return 0x8209129C;
		/* 82150824h case    2:*/		return 0x82150828;
	}
	return 0x82150828;
} // Block from 8215081Ch-82150828h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82150828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150828);
		  /* 82150828h */ case    0:  		/* mfspr R12, LR */
		/* 82150828h case    0:*/		regs.R12 = regs.LR;
		/* 82150828h case    0:*/		return 0x8215082C;
		  /* 8215082Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215082Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215082Ch case    1:*/		return 0x82150830;
		  /* 82150830h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82150830h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82150830h case    2:*/		return 0x82150834;
		  /* 82150834h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82150834h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82150834h case    3:*/		return 0x82150838;
		  /* 82150838h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82150838h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82150838h case    4:*/		return 0x8215083C;
		  /* 8215083Ch */ case    5:  		/* lis R11, -32253 */
		/* 8215083Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215083Ch case    5:*/		return 0x82150840;
		  /* 82150840h */ case    6:  		/* mr R30, R4 */
		/* 82150840h case    6:*/		regs.R30 = regs.R4;
		/* 82150840h case    6:*/		return 0x82150844;
		  /* 82150844h */ case    7:  		/* addi R4, R11, 28340 */
		/* 82150844h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6EB4);
		/* 82150844h case    7:*/		return 0x82150848;
		  /* 82150848h */ case    8:  		/* mr R31, R3 */
		/* 82150848h case    8:*/		regs.R31 = regs.R3;
		/* 82150848h case    8:*/		return 0x8215084C;
		  /* 8215084Ch */ case    9:  		/* bl -7580 */
		/* 8215084Ch case    9:*/		regs.LR = 0x82150850; return 0x8214EAB0;
		/* 8215084Ch case    9:*/		return 0x82150850;
		  /* 82150850h */ case   10:  		/* lis R11, -32255 */
		/* 82150850h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82150850h case   10:*/		return 0x82150854;
		  /* 82150854h */ case   11:  		/* mr R3, R31 */
		/* 82150854h case   11:*/		regs.R3 = regs.R31;
		/* 82150854h case   11:*/		return 0x82150858;
		  /* 82150858h */ case   12:  		/* addi R4, R11, -10432 */
		/* 82150858h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFD740);
		/* 82150858h case   12:*/		return 0x8215085C;
		  /* 8215085Ch */ case   13:  		/* mr R5, R30 */
		/* 8215085Ch case   13:*/		regs.R5 = regs.R30;
		/* 8215085Ch case   13:*/		return 0x82150860;
		  /* 82150860h */ case   14:  		/* bl -10312 */
		/* 82150860h case   14:*/		regs.LR = 0x82150864; return 0x8214E018;
		/* 82150860h case   14:*/		return 0x82150864;
		  /* 82150864h */ case   15:  		/* lis R11, -32253 */
		/* 82150864h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150864h case   15:*/		return 0x82150868;
		  /* 82150868h */ case   16:  		/* mr R3, R31 */
		/* 82150868h case   16:*/		regs.R3 = regs.R31;
		/* 82150868h case   16:*/		return 0x8215086C;
		  /* 8215086Ch */ case   17:  		/* addi R4, R11, 28348 */
		/* 8215086Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6EBC);
		/* 8215086Ch case   17:*/		return 0x82150870;
		  /* 82150870h */ case   18:  		/* bl -7616 */
		/* 82150870h case   18:*/		regs.LR = 0x82150874; return 0x8214EAB0;
		/* 82150870h case   18:*/		return 0x82150874;
		  /* 82150874h */ case   19:  		/* addi R1, R1, 112 */
		/* 82150874h case   19:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82150874h case   19:*/		return 0x82150878;
		  /* 82150878h */ case   20:  		/* lwz R12, <#[R1 - 8]> */
		/* 82150878h case   20:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82150878h case   20:*/		return 0x8215087C;
		  /* 8215087Ch */ case   21:  		/* mtspr LR, R12 */
		/* 8215087Ch case   21:*/		regs.LR = regs.R12;
		/* 8215087Ch case   21:*/		return 0x82150880;
		  /* 82150880h */ case   22:  		/* ld R30, <#[R1 - 24]> */
		/* 82150880h case   22:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82150880h case   22:*/		return 0x82150884;
		  /* 82150884h */ case   23:  		/* ld R31, <#[R1 - 16]> */
		/* 82150884h case   23:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82150884h case   23:*/		return 0x82150888;
		  /* 82150888h */ case   24:  		/* bclr 20, CR0_LT */
		/* 82150888h case   24:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82150888h case   24:*/		return 0x8215088C;
	}
	return 0x8215088C;
} // Block from 82150828h-8215088Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 8215088Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215088C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215088C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215088C);
		  /* 8215088Ch */ case    0:  		/* nop */
		/* 8215088Ch case    0:*/		cpu::op::nop();
		/* 8215088Ch case    0:*/		return 0x82150890;
	}
	return 0x82150890;
} // Block from 8215088Ch-82150890h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82150890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150890);
		  /* 82150890h */ case    0:  		/* mfspr R12, LR */
		/* 82150890h case    0:*/		regs.R12 = regs.LR;
		/* 82150890h case    0:*/		return 0x82150894;
		  /* 82150894h */ case    1:  		/* bl -783988 */
		/* 82150894h case    1:*/		regs.LR = 0x82150898; return 0x82091220;
		/* 82150894h case    1:*/		return 0x82150898;
		  /* 82150898h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 82150898h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 82150898h case    2:*/		return 0x8215089C;
		  /* 8215089Ch */ case    3:  		/* lis R11, -32217 */
		/* 8215089Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8215089Ch case    3:*/		return 0x821508A0;
		  /* 821508A0h */ case    4:  		/* lbz R10, <#[R9]> */
		/* 821508A0h case    4:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 821508A0h case    4:*/		return 0x821508A4;
		  /* 821508A4h */ case    5:  		/* stw R8, <#[R1 + 316]> */
		/* 821508A4h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x0000013C) );
		/* 821508A4h case    5:*/		return 0x821508A8;
	}
	return 0x821508A8;
} // Block from 82150890h-821508A8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821508A8h
// Function '?ConvertShaderToMicrocodeImp@XGRAPHICS@@YAJPBKKPAKK1KPAXP6AX2HKPBD@ZPAUID3DXConstantTable@@PAU_UCODE_DEBUGGER_PARAMETERS@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821508A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821508A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821508A8);
		  /* 821508A8h */ case    0:  		/* mr R26, R7 */
		/* 821508A8h case    0:*/		regs.R26 = regs.R7;
		/* 821508A8h case    0:*/		return 0x821508AC;
		  /* 821508ACh */ case    1:  		/* stw R9, <#[R1 + 324]> */
		/* 821508ACh case    1:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000144) );
		/* 821508ACh case    1:*/		return 0x821508B0;
		  /* 821508B0h */ case    2:  		/* addi R8, R11, 18320 */
		/* 821508B0h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4790);
		/* 821508B0h case    2:*/		return 0x821508B4;
		  /* 821508B4h */ case    3:  		/* rlwinm R9, R4, 2, 0, 29 */
		/* 821508B4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R4);
		/* 821508B4h case    3:*/		return 0x821508B8;
		  /* 821508B8h */ case    4:  		/* stw R4, <#[R1 + 284]> */
		/* 821508B8h case    4:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000011C) );
		/* 821508B8h case    4:*/		return 0x821508BC;
		  /* 821508BCh */ case    5:  		/* lis R11, -32217 */
		/* 821508BCh case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 821508BCh case    5:*/		return 0x821508C0;
		  /* 821508C0h */ case    6:  		/* stw R5, <#[R1 + 292]> */
		/* 821508C0h case    6:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000124) );
		/* 821508C0h case    6:*/		return 0x821508C4;
		  /* 821508C4h */ case    7:  		/* stb R10, <#[R1 + 80]> */
		/* 821508C4h case    7:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 821508C4h case    7:*/		return 0x821508C8;
		  /* 821508C8h */ case    8:  		/* li R7, 18 */
		/* 821508C8h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x12);
		/* 821508C8h case    8:*/		return 0x821508CC;
		  /* 821508CCh */ case    9:  		/* addi R11, R11, 17568 */
		/* 821508CCh case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x44A0);
		/* 821508CCh case    9:*/		return 0x821508D0;
		  /* 821508D0h */ case   10:  		/* stw R6, <#[R1 + 300]> */
		/* 821508D0h case   10:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x0000012C) );
		/* 821508D0h case   10:*/		return 0x821508D4;
		  /* 821508D4h */ case   11:  		/* mr R28, R3 */
		/* 821508D4h case   11:*/		regs.R28 = regs.R3;
		/* 821508D4h case   11:*/		return 0x821508D8;
		  /* 821508D8h */ case   12:  		/* stw R7, <#[R1 + 84]> */
		/* 821508D8h case   12:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000054) );
		/* 821508D8h case   12:*/		return 0x821508DC;
		  /* 821508DCh */ case   13:  		/* lwzx R10, <#[R9 + R8]> */
		/* 821508DCh case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 821508DCh case   13:*/		return 0x821508E0;
		  /* 821508E0h */ case   14:  		/* addi R14, R11, 20 */
		/* 821508E0h case   14:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R11,0x14);
		/* 821508E0h case   14:*/		return 0x821508E4;
		  /* 821508E4h */ case   15:  		/* lis R30, -32217 */
		/* 821508E4h case   15:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8227);
		/* 821508E4h case   15:*/		return 0x821508E8;
		  /* 821508E8h */ case   16:  		/* lis R29, -32256 */
		/* 821508E8h case   16:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFF8200);
		/* 821508E8h case   16:*/		return 0x821508EC;
		  /* 821508ECh */ case   17:  		/* lis R31, -32253 */
		/* 821508ECh case   17:*/		cpu::op::lis<0>(regs,&regs.R31,0xFFFF8203);
		/* 821508ECh case   17:*/		return 0x821508F0;
		  /* 821508F0h */ case   18:  		/* lis R3, -32253 */
		/* 821508F0h case   18:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8203);
		/* 821508F0h case   18:*/		return 0x821508F4;
		  /* 821508F4h */ case   19:  		/* stw R10, <#[R1 + 88]> */
		/* 821508F4h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 821508F4h case   19:*/		return 0x821508F8;
		  /* 821508F8h */ case   20:  		/* lis R4, -32253 */
		/* 821508F8h case   20:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8203);
		/* 821508F8h case   20:*/		return 0x821508FC;
		  /* 821508FCh */ case   21:  		/* lis R5, -32253 */
		/* 821508FCh case   21:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8203);
		/* 821508FCh case   21:*/		return 0x82150900;
		  /* 82150900h */ case   22:  		/* lis R6, -32255 */
		/* 82150900h case   22:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8201);
		/* 82150900h case   22:*/		return 0x82150904;
		  /* 82150904h */ case   23:  		/* lis R7, -32255 */
		/* 82150904h case   23:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8201);
		/* 82150904h case   23:*/		return 0x82150908;
		  /* 82150908h */ case   24:  		/* lis R8, -32255 */
		/* 82150908h case   24:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8201);
		/* 82150908h case   24:*/		return 0x8215090C;
		  /* 8215090Ch */ case   25:  		/* lis R9, -32253 */
		/* 8215090Ch case   25:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215090Ch case   25:*/		return 0x82150910;
		  /* 82150910h */ case   26:  		/* lis R10, -32253 */
		/* 82150910h case   26:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82150910h case   26:*/		return 0x82150914;
		  /* 82150914h */ case   27:  		/* lis R11, -32255 */
		/* 82150914h case   27:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82150914h case   27:*/		return 0x82150918;
		  /* 82150918h */ case   28:  		/* addi R25, R30, 18032 */
		/* 82150918h case   28:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R30,0x4670);
		/* 82150918h case   28:*/		return 0x8215091C;
		  /* 8215091Ch */ case   29:  		/* addi R23, R29, 17768 */
		/* 8215091Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R29,0x4568);
		/* 8215091Ch case   29:*/		return 0x82150920;
		  /* 82150920h */ case   30:  		/* addi R22, R31, 28332 */
		/* 82150920h case   30:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R31,0x6EAC);
		/* 82150920h case   30:*/		return 0x82150924;
		  /* 82150924h */ case   31:  		/* addi R18, R3, 28348 */
		/* 82150924h case   31:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R3,0x6EBC);
		/* 82150924h case   31:*/		return 0x82150928;
		  /* 82150928h */ case   32:  		/* addi R21, R4, 28356 */
		/* 82150928h case   32:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R4,0x6EC4);
		/* 82150928h case   32:*/		return 0x8215092C;
		  /* 8215092Ch */ case   33:  		/* addi R20, R5, 26668 */
		/* 8215092Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R5,0x682C);
		/* 8215092Ch case   33:*/		return 0x82150930;
		  /* 82150930h */ case   34:  		/* addi R17, R6, 5216 */
		/* 82150930h case   34:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R6,0x1460);
		/* 82150930h case   34:*/		return 0x82150934;
		  /* 82150934h */ case   35:  		/* addi R16, R7, 5224 */
		/* 82150934h case   35:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R7,0x1468);
		/* 82150934h case   35:*/		return 0x82150938;
		  /* 82150938h */ case   36:  		/* addi R27, R8, -10432 */
		/* 82150938h case   36:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R8,0xFFFFD740);
		/* 82150938h case   36:*/		return 0x8215093C;
		  /* 8215093Ch */ case   37:  		/* addi R24, R9, 30536 */
		/* 8215093Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R9,0x7748);
		/* 8215093Ch case   37:*/		return 0x82150940;
		  /* 82150940h */ case   38:  		/* addi R19, R10, 30328 */
		/* 82150940h case   38:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R10,0x7678);
		/* 82150940h case   38:*/		return 0x82150944;
		  /* 82150944h */ case   39:  		/* addi R15, R11, 12868 */
		/* 82150944h case   39:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R11,0x3244);
		/* 82150944h case   39:*/		return 0x82150948;
		  /* 82150948h */ case   40:  		/* lwz R7, <#[R1 + 284]> */
		/* 82150948h case   40:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x0000011C) );
		/* 82150948h case   40:*/		return 0x8215094C;
		  /* 8215094Ch */ case   41:  		/* cmpwi CR6, R7, 0 */
		/* 8215094Ch case   41:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 8215094Ch case   41:*/		return 0x82150950;
		  /* 82150950h */ case   42:  		/* bc 12, CR6_EQ, 16 */
		/* 82150950h case   42:*/		if ( regs.CR[6].eq ) { return 0x82150960;  }
		/* 82150950h case   42:*/		return 0x82150954;
		  /* 82150954h */ case   43:  		/* lwz R11, <#[R14 - 4]> */
		/* 82150954h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0xFFFFFFFC) );
		/* 82150954h case   43:*/		return 0x82150958;
		  /* 82150958h */ case   44:  		/* cmpwi CR6, R11, 0 */
		/* 82150958h case   44:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82150958h case   44:*/		return 0x8215095C;
		  /* 8215095Ch */ case   45:  		/* bc 12, CR6_EQ, 620 */
		/* 8215095Ch case   45:*/		if ( regs.CR[6].eq ) { return 0x82150BC8;  }
		/* 8215095Ch case   45:*/		return 0x82150960;
	}
	return 0x82150960;
} // Block from 821508A8h-82150960h (46 instructions)

//////////////////////////////////////////////////////
// Block at 82150960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150960);
		  /* 82150960h */ case    0:  		/* lbz R9, <#[R14]> */
		/* 82150960h case    0:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R14 + 0x00000000) );
		/* 82150960h case    0:*/		return 0x82150964;
		  /* 82150964h */ case    1:  		/* li R31, 0 */
		/* 82150964h case    1:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82150964h case    1:*/		return 0x82150968;
		  /* 82150968h */ case    2:  		/* li R29, 0 */
		/* 82150968h case    2:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82150968h case    2:*/		return 0x8215096C;
		  /* 8215096Ch */ case    3:  		/* cmplwi CR6, R9, 17 */
		/* 8215096Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000011);
		/* 8215096Ch case    3:*/		return 0x82150970;
		  /* 82150970h */ case    4:  		/* bc 12, CR6_GT, 220 */
		/* 82150970h case    4:*/		if ( regs.CR[6].gt ) { return 0x82150A4C;  }
		/* 82150970h case    4:*/		return 0x82150974;
		  /* 82150974h */ case    5:  		/* lis R12, -32253 */
		/* 82150974h case    5:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8203);
		/* 82150974h case    5:*/		return 0x82150978;
		  /* 82150978h */ case    6:  		/* addi R12, R12, 28056 */
		/* 82150978h case    6:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x6D98);
		/* 82150978h case    6:*/		return 0x8215097C;
		  /* 8215097Ch */ case    7:  		/* lbzx R0, <#[R12 + R9]> */
		/* 8215097Ch case    7:*/		cpu::mem::load8z( regs, &regs.R0, (uint32)(regs.R12 + regs.R9 + 0x00000000) );
		/* 8215097Ch case    7:*/		return 0x82150980;
		  /* 82150980h */ case    8:  		/* lis R12, -32235 */
		/* 82150980h case    8:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8215);
		/* 82150980h case    8:*/		return 0x82150984;
		  /* 82150984h */ case    9:  		/* ori R0, R0, 0 */
		/* 82150984h case    9:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 82150984h case    9:*/		return 0x82150988;
		  /* 82150988h */ case   10:  		/* addi R12, R12, 2460 */
		/* 82150988h case   10:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x99C);
		/* 82150988h case   10:*/		return 0x8215098C;
		  /* 8215098Ch */ case   11:  		/* ori R0, R0, 0 */
		/* 8215098Ch case   11:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 8215098Ch case   11:*/		return 0x82150990;
		  /* 82150990h */ case   12:  		/* add R12, R12, R0 */
		/* 82150990h case   12:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 82150990h case   12:*/		return 0x82150994;
		  /* 82150994h */ case   13:  		/* mtspr CTR, R12 */
		/* 82150994h case   13:*/		regs.CTR = regs.R12;
		/* 82150994h case   13:*/		return 0x82150998;
		  /* 82150998h */ case   14:  		/* bcctr 20, CR0_LT */
		/* 82150998h case   14:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 82150998h case   14:*/		return 0x8215099C;
		  /* 8215099Ch */ case   15:  		/* rlwinm R31, R26, 0, 26, 31 */
		/* 8215099Ch case   15:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R31,regs.R26);
		/* 8215099Ch case   15:*/		return 0x821509A0;
		  /* 821509A0h */ case   16:  		/* b 172 */
		/* 821509A0h case   16:*/		return 0x82150A4C;
		/* 821509A0h case   16:*/		return 0x821509A4;
		  /* 821509A4h */ case   17:  		/* rlwinm R31, R26, 24, 26, 31 */
		/* 821509A4h case   17:*/		cpu::op::rlwinm<0,24,26,31>(regs,&regs.R31,regs.R26);
		/* 821509A4h case   17:*/		return 0x821509A8;
	}
	return 0x821509A8;
} // Block from 82150960h-821509A8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821509A8h
// Function 'XConvertShaderToMicrocode'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821509A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821509A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821509A8);
		  /* 821509A8h */ case    0:  		/* b 164 */
		/* 821509A8h case    0:*/		return 0x82150A4C;
		/* 821509A8h case    0:*/		return 0x821509AC;
		  /* 821509ACh */ case    1:  		/* rlwinm R31, R26, 16, 31, 31 */
		/* 821509ACh case    1:*/		cpu::op::rlwinm<0,16,31,31>(regs,&regs.R31,regs.R26);
		/* 821509ACh case    1:*/		return 0x821509B0;
		  /* 821509B0h */ case    2:  		/* b 156 */
		/* 821509B0h case    2:*/		return 0x82150A4C;
		/* 821509B0h case    2:*/		return 0x821509B4;
		  /* 821509B4h */ case    3:  		/* rlwinm R31, R26, 15, 31, 31 */
		/* 821509B4h case    3:*/		cpu::op::rlwinm<0,15,31,31>(regs,&regs.R31,regs.R26);
		/* 821509B4h case    3:*/		return 0x821509B8;
		  /* 821509B8h */ case    4:  		/* b 148 */
		/* 821509B8h case    4:*/		return 0x82150A4C;
		/* 821509B8h case    4:*/		return 0x821509BC;
		  /* 821509BCh */ case    5:  		/* rlwinm R31, R26, 14, 31, 31 */
		/* 821509BCh case    5:*/		cpu::op::rlwinm<0,14,31,31>(regs,&regs.R31,regs.R26);
		/* 821509BCh case    5:*/		return 0x821509C0;
		  /* 821509C0h */ case    6:  		/* b 140 */
		/* 821509C0h case    6:*/		return 0x82150A4C;
		/* 821509C0h case    6:*/		return 0x821509C4;
		  /* 821509C4h */ case    7:  		/* rlwinm R31, R26, 13, 31, 31 */
		/* 821509C4h case    7:*/		cpu::op::rlwinm<0,13,31,31>(regs,&regs.R31,regs.R26);
		/* 821509C4h case    7:*/		return 0x821509C8;
		  /* 821509C8h */ case    8:  		/* li R29, 1 */
		/* 821509C8h case    8:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 821509C8h case    8:*/		return 0x821509CC;
		  /* 821509CCh */ case    9:  		/* b 128 */
		/* 821509CCh case    9:*/		return 0x82150A4C;
		/* 821509CCh case    9:*/		return 0x821509D0;
		  /* 821509D0h */ case   10:  		/* rlwinm R31, R26, 12, 28, 31 */
		/* 821509D0h case   10:*/		cpu::op::rlwinm<0,12,28,31>(regs,&regs.R31,regs.R26);
		/* 821509D0h case   10:*/		return 0x821509D4;
		  /* 821509D4h */ case   11:  		/* b 120 */
		/* 821509D4h case   11:*/		return 0x82150A4C;
		/* 821509D4h case   11:*/		return 0x821509D8;
		  /* 821509D8h */ case   12:  		/* rlwinm R31, R26, 8, 29, 31 */
		/* 821509D8h case   12:*/		cpu::op::rlwinm<0,8,29,31>(regs,&regs.R31,regs.R26);
		/* 821509D8h case   12:*/		return 0x821509DC;
		  /* 821509DCh */ case   13:  		/* b 112 */
		/* 821509DCh case   13:*/		return 0x82150A4C;
		/* 821509DCh case   13:*/		return 0x821509E0;
		  /* 821509E0h */ case   14:  		/* rlwinm R31, R26, 5, 31, 31 */
		/* 821509E0h case   14:*/		cpu::op::rlwinm<0,5,31,31>(regs,&regs.R31,regs.R26);
		/* 821509E0h case   14:*/		return 0x821509E4;
		  /* 821509E4h */ case   15:  		/* b -28 */
		/* 821509E4h case   15:*/		return 0x821509C8;
		/* 821509E4h case   15:*/		return 0x821509E8;
		  /* 821509E8h */ case   16:  		/* rlwinm R31, R26, 4, 29, 31 */
		/* 821509E8h case   16:*/		cpu::op::rlwinm<0,4,29,31>(regs,&regs.R31,regs.R26);
		/* 821509E8h case   16:*/		return 0x821509EC;
		  /* 821509ECh */ case   17:  		/* b 96 */
		/* 821509ECh case   17:*/		return 0x82150A4C;
		/* 821509ECh case   17:*/		return 0x821509F0;
		  /* 821509F0h */ case   18:  		/* rlwinm R31, R26, 1, 31, 31 */
		/* 821509F0h case   18:*/		cpu::op::rlwinm<0,1,31,31>(regs,&regs.R31,regs.R26);
		/* 821509F0h case   18:*/		return 0x821509F4;
		  /* 821509F4h */ case   19:  		/* b -44 */
		/* 821509F4h case   19:*/		return 0x821509C8;
		/* 821509F4h case   19:*/		return 0x821509F8;
		  /* 821509F8h */ case   20:  		/* lwz R11, <#[R1 + 316]> */
		/* 821509F8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000013C) );
		/* 821509F8h case   20:*/		return 0x821509FC;
		  /* 821509FCh */ case   21:  		/* rlwinm R31, R11, 0, 31, 31 */
		/* 821509FCh case   21:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R31,regs.R11);
		/* 821509FCh case   21:*/		return 0x82150A00;
		  /* 82150A00h */ case   22:  		/* b 76 */
		/* 82150A00h case   22:*/		return 0x82150A4C;
		/* 82150A00h case   22:*/		return 0x82150A04;
		  /* 82150A04h */ case   23:  		/* lwz R11, <#[R1 + 316]> */
		/* 82150A04h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000013C) );
		/* 82150A04h case   23:*/		return 0x82150A08;
		  /* 82150A08h */ case   24:  		/* li R29, 1 */
		/* 82150A08h case   24:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 82150A08h case   24:*/		return 0x82150A0C;
		  /* 82150A0Ch */ case   25:  		/* rlwinm R31, R11, 31, 31, 31 */
		/* 82150A0Ch case   25:*/		cpu::op::rlwinm<0,31,31,31>(regs,&regs.R31,regs.R11);
		/* 82150A0Ch case   25:*/		return 0x82150A10;
		  /* 82150A10h */ case   26:  		/* b 60 */
		/* 82150A10h case   26:*/		return 0x82150A4C;
		/* 82150A10h case   26:*/		return 0x82150A14;
		  /* 82150A14h */ case   27:  		/* lwz R11, <#[R1 + 316]> */
		/* 82150A14h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000013C) );
		/* 82150A14h case   27:*/		return 0x82150A18;
		  /* 82150A18h */ case   28:  		/* rlwinm R31, R11, 30, 30, 31 */
		/* 82150A18h case   28:*/		cpu::op::rlwinm<0,30,30,31>(regs,&regs.R31,regs.R11);
		/* 82150A18h case   28:*/		return 0x82150A1C;
		  /* 82150A1Ch */ case   29:  		/* b 48 */
		/* 82150A1Ch case   29:*/		return 0x82150A4C;
		/* 82150A1Ch case   29:*/		return 0x82150A20;
		  /* 82150A20h */ case   30:  		/* lwz R11, <#[R1 + 316]> */
		/* 82150A20h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000013C) );
		/* 82150A20h case   30:*/		return 0x82150A24;
		  /* 82150A24h */ case   31:  		/* rlwinm R31, R11, 24, 24, 31 */
		/* 82150A24h case   31:*/		cpu::op::rlwinm<0,24,24,31>(regs,&regs.R31,regs.R11);
		/* 82150A24h case   31:*/		return 0x82150A28;
		  /* 82150A28h */ case   32:  		/* b 36 */
		/* 82150A28h case   32:*/		return 0x82150A4C;
		/* 82150A28h case   32:*/		return 0x82150A2C;
		  /* 82150A2Ch */ case   33:  		/* lwz R11, <#[R1 + 316]> */
		/* 82150A2Ch case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000013C) );
		/* 82150A2Ch case   33:*/		return 0x82150A30;
		  /* 82150A30h */ case   34:  		/* rlwinm R31, R11, 16, 31, 31 */
		/* 82150A30h case   34:*/		cpu::op::rlwinm<0,16,31,31>(regs,&regs.R31,regs.R11);
		/* 82150A30h case   34:*/		return 0x82150A34;
		  /* 82150A34h */ case   35:  		/* b 24 */
		/* 82150A34h case   35:*/		return 0x82150A4C;
		/* 82150A34h case   35:*/		return 0x82150A38;
		  /* 82150A38h */ case   36:  		/* lwz R11, <#[R1 + 316]> */
		/* 82150A38h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000013C) );
		/* 82150A38h case   36:*/		return 0x82150A3C;
		  /* 82150A3Ch */ case   37:  		/* rlwinm R31, R11, 15, 31, 31 */
		/* 82150A3Ch case   37:*/		cpu::op::rlwinm<0,15,31,31>(regs,&regs.R31,regs.R11);
		/* 82150A3Ch case   37:*/		return 0x82150A40;
		  /* 82150A40h */ case   38:  		/* b 12 */
		/* 82150A40h case   38:*/		return 0x82150A4C;
		/* 82150A40h case   38:*/		return 0x82150A44;
		  /* 82150A44h */ case   39:  		/* lwz R11, <#[R1 + 316]> */
		/* 82150A44h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000013C) );
		/* 82150A44h case   39:*/		return 0x82150A48;
		  /* 82150A48h */ case   40:  		/* rlwinm R31, R11, 14, 31, 31 */
		/* 82150A48h case   40:*/		cpu::op::rlwinm<0,14,31,31>(regs,&regs.R31,regs.R11);
		/* 82150A48h case   40:*/		return 0x82150A4C;
	}
	return 0x82150A4C;
} // Block from 821509A8h-82150A4Ch (41 instructions)

//////////////////////////////////////////////////////
// Block at 82150A4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150A4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150A4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150A4C);
		  /* 82150A4Ch */ case    0:  		/* lwz R11, <#[R1 + 292]> */
		/* 82150A4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000124) );
		/* 82150A4Ch case    0:*/		return 0x82150A50;
		  /* 82150A50h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 82150A50h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82150A50h case    1:*/		return 0x82150A54;
		  /* 82150A54h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 82150A54h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82150A60;  }
		/* 82150A54h case    2:*/		return 0x82150A58;
		  /* 82150A58h */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 82150A58h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82150A58h case    3:*/		return 0x82150A5C;
		  /* 82150A5Ch */ case    4:  		/* bc 12, CR6_EQ, 8 */
		/* 82150A5Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x82150A64;  }
		/* 82150A5Ch case    4:*/		return 0x82150A60;
	}
	return 0x82150A60;
} // Block from 82150A4Ch-82150A60h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82150A60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150A60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150A60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150A60);
		  /* 82150A60h */ case    0:  		/* li R11, 1 */
		/* 82150A60h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82150A60h case    0:*/		return 0x82150A64;
	}
	return 0x82150A64;
} // Block from 82150A60h-82150A64h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82150A64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150A64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150A64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150A64);
		  /* 82150A64h */ case    0:  		/* lwz R8, <#[R1 + 300]> */
		/* 82150A64h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x0000012C) );
		/* 82150A64h case    0:*/		return 0x82150A68;
		  /* 82150A68h */ case    1:  		/* rlwinm R10, R11, 0, 24, 31 */
		/* 82150A68h case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R11);
		/* 82150A68h case    1:*/		return 0x82150A6C;
		  /* 82150A6Ch */ case    2:  		/* cmpwi CR6, R8, 0 */
		/* 82150A6Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 82150A6Ch case    2:*/		return 0x82150A70;
		  /* 82150A70h */ case    3:  		/* bc 12, CR6_EQ, 96 */
		/* 82150A70h case    3:*/		if ( regs.CR[6].eq ) { return 0x82150AD0;  }
		/* 82150A70h case    3:*/		return 0x82150A74;
		  /* 82150A74h */ case    4:  		/* lwz R11, <#[R14 - 12]> */
		/* 82150A74h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0xFFFFFFF4) );
		/* 82150A74h case    4:*/		return 0x82150A78;
		  /* 82150A78h */ case    5:  		/* cmpwi CR6, R11, 0 */
		/* 82150A78h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82150A78h case    5:*/		return 0x82150A7C;
		  /* 82150A7Ch */ case    6:  		/* bc 4, CR6_EQ, 92 */
		/* 82150A7Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x82150AD8;  }
		/* 82150A7Ch case    6:*/		return 0x82150A80;
		  /* 82150A80h */ case    7:  		/* lwz R6, <#[R14 - 8]> */
		/* 82150A80h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R14 + 0xFFFFFFF8) );
		/* 82150A80h case    7:*/		return 0x82150A84;
		  /* 82150A84h */ case    8:  		/* cmpwi CR6, R6, 0 */
		/* 82150A84h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000000);
		/* 82150A84h case    8:*/		return 0x82150A88;
		  /* 82150A88h */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 82150A88h case    9:*/		if ( regs.CR[6].eq ) { return 0x82150A98;  }
		/* 82150A88h case    9:*/		return 0x82150A8C;
		  /* 82150A8Ch */ case   10:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82150A8Ch case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82150A8Ch case   10:*/		return 0x82150A90;
		  /* 82150A90h */ case   11:  		/* li R11, 1 */
		/* 82150A90h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82150A90h case   11:*/		return 0x82150A94;
		  /* 82150A94h */ case   12:  		/* bc 4, CR0_EQ, 8 */
		/* 82150A94h case   12:*/		if ( !regs.CR[0].eq ) { return 0x82150A9C;  }
		/* 82150A94h case   12:*/		return 0x82150A98;
	}
	return 0x82150A98;
} // Block from 82150A64h-82150A98h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82150A98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150A98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150A98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150A98);
		  /* 82150A98h */ case    0:  		/* li R11, 0 */
		/* 82150A98h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82150A98h case    0:*/		return 0x82150A9C;
	}
	return 0x82150A9C;
} // Block from 82150A98h-82150A9Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82150A9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150A9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150A9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150A9C);
		  /* 82150A9Ch */ case    0:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 82150A9Ch case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82150A9Ch case    0:*/		return 0x82150AA0;
		  /* 82150AA0h */ case    1:  		/* cmpwi CR6, R7, 0 */
		/* 82150AA0h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R7,0x00000000);
		/* 82150AA0h case    1:*/		return 0x82150AA4;
		  /* 82150AA4h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 82150AA4h case    2:*/		if ( regs.CR[6].eq ) { return 0x82150AAC;  }
		/* 82150AA4h case    2:*/		return 0x82150AA8;
		  /* 82150AA8h */ case    3:  		/* li R11, 1 */
		/* 82150AA8h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82150AA8h case    3:*/		return 0x82150AAC;
	}
	return 0x82150AAC;
} // Block from 82150A9Ch-82150AACh (4 instructions)

//////////////////////////////////////////////////////
// Block at 82150AACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150AAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150AAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150AAC);
		  /* 82150AACh */ case    0:  		/* cmpwi CR6, R8, 0 */
		/* 82150AACh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000000);
		/* 82150AACh case    0:*/		return 0x82150AB0;
		  /* 82150AB0h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 82150AB0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82150AE4;  }
		/* 82150AB0h case    1:*/		return 0x82150AB4;
		  /* 82150AB4h */ case    2:  		/* cmplwi CR6, R9, 14 */
		/* 82150AB4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x0000000E);
		/* 82150AB4h case    2:*/		return 0x82150AB8;
		  /* 82150AB8h */ case    3:  		/* bc 4, CR6_EQ, 44 */
		/* 82150AB8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82150AE4;  }
		/* 82150AB8h case    3:*/		return 0x82150ABC;
		  /* 82150ABCh */ case    4:  		/* rlwinm. R11, R26, 0, 13, 13 */
		/* 82150ABCh case    4:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R26);
		/* 82150ABCh case    4:*/		return 0x82150AC0;
		  /* 82150AC0h */ case    5:  		/* bc 12, CR0_EQ, 32 */
		/* 82150AC0h case    5:*/		if ( regs.CR[0].eq ) { return 0x82150AE0;  }
		/* 82150AC0h case    5:*/		return 0x82150AC4;
		  /* 82150AC4h */ case    6:  		/* li R10, 1 */
		/* 82150AC4h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82150AC4h case    6:*/		return 0x82150AC8;
		  /* 82150AC8h */ case    7:  		/* li R11, 1 */
		/* 82150AC8h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82150AC8h case    7:*/		return 0x82150ACC;
		  /* 82150ACCh */ case    8:  		/* b 24 */
		/* 82150ACCh case    8:*/		return 0x82150AE4;
		/* 82150ACCh case    8:*/		return 0x82150AD0;
	}
	return 0x82150AD0;
} // Block from 82150AACh-82150AD0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82150AD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150AD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150AD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150AD0);
		  /* 82150AD0h */ case    0:  		/* lwz R11, <#[R14 - 16]> */
		/* 82150AD0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0xFFFFFFF0) );
		/* 82150AD0h case    0:*/		return 0x82150AD4;
		  /* 82150AD4h */ case    1:  		/* b -92 */
		/* 82150AD4h case    1:*/		return 0x82150A78;
		/* 82150AD4h case    1:*/		return 0x82150AD8;
	}
	return 0x82150AD8;
} // Block from 82150AD0h-82150AD8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82150AD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150AD8);
		  /* 82150AD8h */ case    0:  		/* li R11, 1 */
		/* 82150AD8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82150AD8h case    0:*/		return 0x82150ADC;
		  /* 82150ADCh */ case    1:  		/* b -92 */
		/* 82150ADCh case    1:*/		return 0x82150A80;
		/* 82150ADCh case    1:*/		return 0x82150AE0;
	}
	return 0x82150AE0;
} // Block from 82150AD8h-82150AE0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82150AE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150AE0);
		  /* 82150AE0h */ case    0:  		/* li R11, 0 */
		/* 82150AE0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82150AE0h case    0:*/		return 0x82150AE4;
	}
	return 0x82150AE4;
} // Block from 82150AE0h-82150AE4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82150AE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150AE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150AE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150AE4);
		  /* 82150AE4h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 82150AE4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 82150AE4h case    0:*/		return 0x82150AE8;
		  /* 82150AE8h */ case    1:  		/* bc 12, CR0_EQ, 224 */
		/* 82150AE8h case    1:*/		if ( regs.CR[0].eq ) { return 0x82150BC8;  }
		/* 82150AE8h case    1:*/		return 0x82150AEC;
		  /* 82150AECh */ case    2:  		/* rlwinm. R30, R11, 0, 24, 31 */
		/* 82150AECh case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R30,regs.R11);
		/* 82150AECh case    2:*/		return 0x82150AF0;
		  /* 82150AF0h */ case    3:  		/* li R11, 1 */
		/* 82150AF0h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82150AF0h case    3:*/		return 0x82150AF4;
		  /* 82150AF4h */ case    4:  		/* mr R3, R28 */
		/* 82150AF4h case    4:*/		regs.R3 = regs.R28;
		/* 82150AF4h case    4:*/		return 0x82150AF8;
		  /* 82150AF8h */ case    5:  		/* stb R11, <#[R1 + 80]> */
		/* 82150AF8h case    5:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82150AF8h case    5:*/		return 0x82150AFC;
		  /* 82150AFCh */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 82150AFCh case    6:*/		if ( regs.CR[0].eq ) { return 0x82150B0C;  }
		/* 82150AFCh case    6:*/		return 0x82150B00;
		  /* 82150B00h */ case    7:  		/* mr R4, R15 */
		/* 82150B00h case    7:*/		regs.R4 = regs.R15;
		/* 82150B00h case    7:*/		return 0x82150B04;
		  /* 82150B04h */ case    8:  		/* bl -732 */
		/* 82150B04h case    8:*/		regs.LR = 0x82150B08; return 0x82150828;
		/* 82150B04h case    8:*/		return 0x82150B08;
		  /* 82150B08h */ case    9:  		/* b 24 */
		/* 82150B08h case    9:*/		return 0x82150B20;
		/* 82150B08h case    9:*/		return 0x82150B0C;
	}
	return 0x82150B0C;
} // Block from 82150AE4h-82150B0Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 82150B0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150B0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150B0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150B0C);
		  /* 82150B0Ch */ case    0:  		/* mr R4, R21 */
		/* 82150B0Ch case    0:*/		regs.R4 = regs.R21;
		/* 82150B0Ch case    0:*/		return 0x82150B10;
		  /* 82150B10h */ case    1:  		/* bl -8288 */
		/* 82150B10h case    1:*/		regs.LR = 0x82150B14; return 0x8214EAB0;
		/* 82150B10h case    1:*/		return 0x82150B14;
		  /* 82150B14h */ case    2:  		/* mr R4, R19 */
		/* 82150B14h case    2:*/		regs.R4 = regs.R19;
		/* 82150B14h case    2:*/		return 0x82150B18;
		  /* 82150B18h */ case    3:  		/* mr R3, R28 */
		/* 82150B18h case    3:*/		regs.R3 = regs.R28;
		/* 82150B18h case    3:*/		return 0x82150B1C;
		  /* 82150B1Ch */ case    4:  		/* bl -11012 */
		/* 82150B1Ch case    4:*/		regs.LR = 0x82150B20; return 0x8214E018;
		/* 82150B1Ch case    4:*/		return 0x82150B20;
	}
	return 0x82150B20;
} // Block from 82150B0Ch-82150B20h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82150B20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150B20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150B20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150B20);
		  /* 82150B20h */ case    0:  		/* mr R4, R24 */
		/* 82150B20h case    0:*/		regs.R4 = regs.R24;
		/* 82150B20h case    0:*/		return 0x82150B24;
		  /* 82150B24h */ case    1:  		/* lwz R6, <#[R14 - 20]> */
		/* 82150B24h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R14 + 0xFFFFFFEC) );
		/* 82150B24h case    1:*/		return 0x82150B28;
		  /* 82150B28h */ case    2:  		/* mr R3, R28 */
		/* 82150B28h case    2:*/		regs.R3 = regs.R28;
		/* 82150B28h case    2:*/		return 0x82150B2C;
		  /* 82150B2Ch */ case    3:  		/* lwz R5, <#[R1 + 88]> */
		/* 82150B2Ch case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000058) );
		/* 82150B2Ch case    3:*/		return 0x82150B30;
		  /* 82150B30h */ case    4:  		/* bl -11032 */
		/* 82150B30h case    4:*/		regs.LR = 0x82150B34; return 0x8214E018;
		/* 82150B30h case    4:*/		return 0x82150B34;
		  /* 82150B34h */ case    5:  		/* lbz R11, <#[R14]> */
		/* 82150B34h case    5:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 82150B34h case    5:*/		return 0x82150B38;
		  /* 82150B38h */ case    6:  		/* cmplwi CR6, R11, 7 */
		/* 82150B38h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000007);
		/* 82150B38h case    6:*/		return 0x82150B3C;
		  /* 82150B3Ch */ case    7:  		/* bc 4, CR6_EQ, 24 */
		/* 82150B3Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x82150B54;  }
		/* 82150B3Ch case    7:*/		return 0x82150B40;
		  /* 82150B40h */ case    8:  		/* addi R11, R25, -32 */
		/* 82150B40h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFE0);
		/* 82150B40h case    8:*/		return 0x82150B44;
		  /* 82150B44h */ case    9:  		/* rlwinm R10, R31, 2, 0, 29 */
		/* 82150B44h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R31);
		/* 82150B44h case    9:*/		return 0x82150B48;
		  /* 82150B48h */ case   10:  		/* mr R4, R27 */
		/* 82150B48h case   10:*/		regs.R4 = regs.R27;
		/* 82150B48h case   10:*/		return 0x82150B4C;
		  /* 82150B4Ch */ case   11:  		/* lwzx R5, <#[R10 + R11]> */
		/* 82150B4Ch case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82150B4Ch case   11:*/		return 0x82150B50;
		  /* 82150B50h */ case   12:  		/* b 68 */
		/* 82150B50h case   12:*/		return 0x82150B94;
		/* 82150B50h case   12:*/		return 0x82150B54;
	}
	return 0x82150B54;
} // Block from 82150B20h-82150B54h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82150B54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150B54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150B54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150B54);
		  /* 82150B54h */ case    0:  		/* cmplwi CR6, R11, 13 */
		/* 82150B54h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000D);
		/* 82150B54h case    0:*/		return 0x82150B58;
		  /* 82150B58h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 82150B58h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82150B6C;  }
		/* 82150B58h case    1:*/		return 0x82150B5C;
		  /* 82150B5Ch */ case    2:  		/* rlwinm R11, R31, 2, 0, 29 */
		/* 82150B5Ch case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R31);
		/* 82150B5Ch case    2:*/		return 0x82150B60;
	}
	return 0x82150B60;
} // Block from 82150B54h-82150B60h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82150B60h
// Function '?DumpTimingEstimate@XGRAPHICS@@YAJPAXW4UCODESHADERTYPE@@KPAVOutStream@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150B60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150B60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150B60);
		  /* 82150B60h */ case    0:  		/* mr R4, R27 */
		/* 82150B60h case    0:*/		regs.R4 = regs.R27;
		/* 82150B60h case    0:*/		return 0x82150B64;
		  /* 82150B64h */ case    1:  		/* lwzx R5, <#[R11 + R25]> */
		/* 82150B64h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R25 + 0x00000000) );
		/* 82150B64h case    1:*/		return 0x82150B68;
		  /* 82150B68h */ case    2:  		/* b 44 */
		/* 82150B68h case    2:*/		return 0x82150B94;
		/* 82150B68h case    2:*/		return 0x82150B6C;
	}
	return 0x82150B6C;
} // Block from 82150B60h-82150B6Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82150B6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150B6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150B6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150B6C);
		  /* 82150B6Ch */ case    0:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 82150B6Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 82150B6Ch case    0:*/		return 0x82150B70;
		  /* 82150B70h */ case    1:  		/* bc 12, CR0_EQ, 28 */
		/* 82150B70h case    1:*/		if ( regs.CR[0].eq ) { return 0x82150B8C;  }
		/* 82150B70h case    1:*/		return 0x82150B74;
		  /* 82150B74h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 82150B74h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82150B74h case    2:*/		return 0x82150B78;
		  /* 82150B78h */ case    3:  		/* mr R5, R16 */
		/* 82150B78h case    3:*/		regs.R5 = regs.R16;
		/* 82150B78h case    3:*/		return 0x82150B7C;
		  /* 82150B7Ch */ case    4:  		/* bc 4, CR6_EQ, 8 */
		/* 82150B7Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x82150B84;  }
		/* 82150B7Ch case    4:*/		return 0x82150B80;
		  /* 82150B80h */ case    5:  		/* mr R5, R17 */
		/* 82150B80h case    5:*/		regs.R5 = regs.R17;
		/* 82150B80h case    5:*/		return 0x82150B84;
	}
	return 0x82150B84;
} // Block from 82150B6Ch-82150B84h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82150B84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150B84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150B84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150B84);
		  /* 82150B84h */ case    0:  		/* mr R4, R27 */
		/* 82150B84h case    0:*/		regs.R4 = regs.R27;
		/* 82150B84h case    0:*/		return 0x82150B88;
		  /* 82150B88h */ case    1:  		/* b 12 */
		/* 82150B88h case    1:*/		return 0x82150B94;
		/* 82150B88h case    1:*/		return 0x82150B8C;
	}
	return 0x82150B8C;
} // Block from 82150B84h-82150B8Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82150B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150B8C);
		  /* 82150B8Ch */ case    0:  		/* mr R4, R20 */
		/* 82150B8Ch case    0:*/		regs.R4 = regs.R20;
		/* 82150B8Ch case    0:*/		return 0x82150B90;
		  /* 82150B90h */ case    1:  		/* mr R5, R31 */
		/* 82150B90h case    1:*/		regs.R5 = regs.R31;
		/* 82150B90h case    1:*/		return 0x82150B94;
	}
	return 0x82150B94;
} // Block from 82150B8Ch-82150B94h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82150B94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150B94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150B94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150B94);
		  /* 82150B94h */ case    0:  		/* mr R3, R28 */
		/* 82150B94h case    0:*/		regs.R3 = regs.R28;
		/* 82150B94h case    0:*/		return 0x82150B98;
		  /* 82150B98h */ case    1:  		/* bl -11136 */
		/* 82150B98h case    1:*/		regs.LR = 0x82150B9C; return 0x8214E018;
		/* 82150B98h case    1:*/		return 0x82150B9C;
		  /* 82150B9Ch */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 82150B9Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82150B9Ch case    2:*/		return 0x82150BA0;
		  /* 82150BA0h */ case    3:  		/* bc 4, CR6_EQ, 16 */
		/* 82150BA0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82150BB0;  }
		/* 82150BA0h case    3:*/		return 0x82150BA4;
		  /* 82150BA4h */ case    4:  		/* mr R4, R18 */
		/* 82150BA4h case    4:*/		regs.R4 = regs.R18;
		/* 82150BA4h case    4:*/		return 0x82150BA8;
		  /* 82150BA8h */ case    5:  		/* mr R3, R28 */
		/* 82150BA8h case    5:*/		regs.R3 = regs.R28;
		/* 82150BA8h case    5:*/		return 0x82150BAC;
		  /* 82150BACh */ case    6:  		/* bl -8444 */
		/* 82150BACh case    6:*/		regs.LR = 0x82150BB0; return 0x8214EAB0;
		/* 82150BACh case    6:*/		return 0x82150BB0;
	}
	return 0x82150BB0;
} // Block from 82150B94h-82150BB0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82150BB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150BB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150BB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150BB0);
		  /* 82150BB0h */ case    0:  		/* mr R4, R22 */
		/* 82150BB0h case    0:*/		regs.R4 = regs.R22;
		/* 82150BB0h case    0:*/		return 0x82150BB4;
		  /* 82150BB4h */ case    1:  		/* mr R3, R28 */
		/* 82150BB4h case    1:*/		regs.R3 = regs.R28;
		/* 82150BB4h case    1:*/		return 0x82150BB8;
		  /* 82150BB8h */ case    2:  		/* bl -8456 */
		/* 82150BB8h case    2:*/		regs.LR = 0x82150BBC; return 0x8214EAB0;
		/* 82150BB8h case    2:*/		return 0x82150BBC;
		  /* 82150BBCh */ case    3:  		/* mr R4, R23 */
		/* 82150BBCh case    3:*/		regs.R4 = regs.R23;
		/* 82150BBCh case    3:*/		return 0x82150BC0;
		  /* 82150BC0h */ case    4:  		/* mr R3, R28 */
		/* 82150BC0h case    4:*/		regs.R3 = regs.R28;
		/* 82150BC0h case    4:*/		return 0x82150BC4;
		  /* 82150BC4h */ case    5:  		/* bl -11180 */
		/* 82150BC4h case    5:*/		regs.LR = 0x82150BC8; return 0x8214E018;
		/* 82150BC4h case    5:*/		return 0x82150BC8;
	}
	return 0x82150BC8;
} // Block from 82150BB0h-82150BC8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82150BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150BC8);
		  /* 82150BC8h */ case    0:  		/* lwz R11, <#[R1 + 84]> */
		/* 82150BC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82150BC8h case    0:*/		return 0x82150BCC;
		  /* 82150BCCh */ case    1:  		/* addi R14, R14, 24 */
		/* 82150BCCh case    1:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R14,0x18);
		/* 82150BCCh case    1:*/		return 0x82150BD0;
		  /* 82150BD0h */ case    2:  		/* addic. R11, R11, -1 */
		/* 82150BD0h case    2:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82150BD0h case    2:*/		return 0x82150BD4;
		  /* 82150BD4h */ case    3:  		/* stw R11, <#[R1 + 84]> */
		/* 82150BD4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82150BD4h case    3:*/		return 0x82150BD8;
		  /* 82150BD8h */ case    4:  		/* bc 4, CR0_EQ, -656 */
		/* 82150BD8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82150948;  }
		/* 82150BD8h case    4:*/		return 0x82150BDC;
		  /* 82150BDCh */ case    5:  		/* lbz R11, <#[R1 + 80]> */
		/* 82150BDCh case    5:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82150BDCh case    5:*/		return 0x82150BE0;
		  /* 82150BE0h */ case    6:  		/* lwz R10, <#[R1 + 324]> */
		/* 82150BE0h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000144) );
		/* 82150BE0h case    6:*/		return 0x82150BE4;
		  /* 82150BE4h */ case    7:  		/* stb R11, <#[R10]> */
		/* 82150BE4h case    7:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82150BE4h case    7:*/		return 0x82150BE8;
		  /* 82150BE8h */ case    8:  		/* addi R1, R1, 256 */
		/* 82150BE8h case    8:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 82150BE8h case    8:*/		return 0x82150BEC;
		  /* 82150BECh */ case    9:  		/* b -784764 */
		/* 82150BECh case    9:*/		return 0x82091270;
		/* 82150BECh case    9:*/		return 0x82150BF0;
	}
	return 0x82150BF0;
} // Block from 82150BC8h-82150BF0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82150BF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150BF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150BF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150BF0);
		  /* 82150BF0h */ case    0:  		/* mfspr R12, LR */
		/* 82150BF0h case    0:*/		regs.R12 = regs.LR;
		/* 82150BF0h case    0:*/		return 0x82150BF4;
		  /* 82150BF4h */ case    1:  		/* bl -784800 */
		/* 82150BF4h case    1:*/		regs.LR = 0x82150BF8; return 0x82091254;
		/* 82150BF4h case    1:*/		return 0x82150BF8;
		  /* 82150BF8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82150BF8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82150BF8h case    2:*/		return 0x82150BFC;
		  /* 82150BFCh */ case    3:  		/* mr R28, R3 */
		/* 82150BFCh case    3:*/		regs.R28 = regs.R3;
		/* 82150BFCh case    3:*/		return 0x82150C00;
		  /* 82150C00h */ case    4:  		/* mr R27, R5 */
		/* 82150C00h case    4:*/		regs.R27 = regs.R5;
		/* 82150C00h case    4:*/		return 0x82150C04;
		  /* 82150C04h */ case    5:  		/* mr R31, R7 */
		/* 82150C04h case    5:*/		regs.R31 = regs.R7;
		/* 82150C04h case    5:*/		return 0x82150C08;
		  /* 82150C08h */ case    6:  		/* cmplwi CR6, R6, 36 */
		/* 82150C08h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000024);
		/* 82150C08h case    6:*/		return 0x82150C0C;
		  /* 82150C0Ch */ case    7:  		/* bc 4, CR6_LT, 16 */
		/* 82150C0Ch case    7:*/		if ( !regs.CR[6].lt ) { return 0x82150C1C;  }
		/* 82150C0Ch case    7:*/		return 0x82150C10;
		  /* 82150C10h */ case    8:  		/* lis R3, -32761 */
		/* 82150C10h case    8:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 82150C10h case    8:*/		return 0x82150C14;
		  /* 82150C14h */ case    9:  		/* ori R3, R3, 87 */
		/* 82150C14h case    9:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x57);
		/* 82150C14h case    9:*/		return 0x82150C18;
		  /* 82150C18h */ case   10:  		/* b 180 */
		/* 82150C18h case   10:*/		return 0x82150CCC;
		/* 82150C18h case   10:*/		return 0x82150C1C;
	}
	return 0x82150C1C;
} // Block from 82150BF0h-82150C1Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82150C1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150C1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150C1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150C1C);
		  /* 82150C1Ch */ case    0:  		/* lis R11, -32217 */
		/* 82150C1Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82150C1Ch case    0:*/		return 0x82150C20;
		  /* 82150C20h */ case    1:  		/* rlwinm R10, R4, 2, 0, 29 */
		/* 82150C20h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R4);
		/* 82150C20h case    1:*/		return 0x82150C24;
		  /* 82150C24h */ case    2:  		/* addi R11, R11, 18328 */
		/* 82150C24h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4798);
		/* 82150C24h case    2:*/		return 0x82150C28;
		  /* 82150C28h */ case    3:  		/* mr R3, R31 */
		/* 82150C28h case    3:*/		regs.R3 = regs.R31;
		/* 82150C28h case    3:*/		return 0x82150C2C;
		  /* 82150C2Ch */ case    4:  		/* lwzx R4, <#[R10 + R11]> */
		/* 82150C2Ch case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82150C2Ch case    4:*/		return 0x82150C30;
		  /* 82150C30h */ case    5:  		/* bl -1032 */
		/* 82150C30h case    5:*/		regs.LR = 0x82150C34; return 0x82150828;
		/* 82150C30h case    5:*/		return 0x82150C34;
		  /* 82150C34h */ case    6:  		/* lis R11, -32253 */
		/* 82150C34h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150C34h case    6:*/		return 0x82150C38;
		  /* 82150C38h */ case    7:  		/* mr R3, R31 */
		/* 82150C38h case    7:*/		regs.R3 = regs.R31;
		/* 82150C38h case    7:*/		return 0x82150C3C;
		  /* 82150C3Ch */ case    8:  		/* addi R30, R11, 28332 */
		/* 82150C3Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x6EAC);
		/* 82150C3Ch case    8:*/		return 0x82150C40;
		  /* 82150C40h */ case    9:  		/* mr R4, R30 */
		/* 82150C40h case    9:*/		regs.R4 = regs.R30;
		/* 82150C40h case    9:*/		return 0x82150C44;
		  /* 82150C44h */ case   10:  		/* bl -8596 */
		/* 82150C44h case   10:*/		regs.LR = 0x82150C48; return 0x8214EAB0;
		/* 82150C44h case   10:*/		return 0x82150C48;
		  /* 82150C48h */ case   11:  		/* lis R11, -32256 */
		/* 82150C48h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82150C48h case   11:*/		return 0x82150C4C;
		  /* 82150C4Ch */ case   12:  		/* mr R3, R31 */
		/* 82150C4Ch case   12:*/		regs.R3 = regs.R31;
		/* 82150C4Ch case   12:*/		return 0x82150C50;
		  /* 82150C50h */ case   13:  		/* addi R29, R11, 17768 */
		/* 82150C50h case   13:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x4568);
		/* 82150C50h case   13:*/		return 0x82150C54;
		  /* 82150C54h */ case   14:  		/* mr R4, R29 */
		/* 82150C54h case   14:*/		regs.R4 = regs.R29;
		/* 82150C54h case   14:*/		return 0x82150C58;
		  /* 82150C58h */ case   15:  		/* bl -11328 */
		/* 82150C58h case   15:*/		regs.LR = 0x82150C5C; return 0x8214E018;
		/* 82150C58h case   15:*/		return 0x82150C5C;
		  /* 82150C5Ch */ case   16:  		/* rlwinm. R11, R28, 25, 31, 31 */
		/* 82150C5Ch case   16:*/		cpu::op::rlwinm<1,25,31,31>(regs,&regs.R11,regs.R28);
		/* 82150C5Ch case   16:*/		return 0x82150C60;
		  /* 82150C60h */ case   17:  		/* lwz R11, <#[R27]> */
		/* 82150C60h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 82150C60h case   17:*/		return 0x82150C64;
		  /* 82150C64h */ case   18:  		/* rlwinm R28, R11, 27, 31, 31 */
		/* 82150C64h case   18:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R28,regs.R11);
		/* 82150C64h case   18:*/		return 0x82150C68;
		  /* 82150C68h */ case   19:  		/* bc 4, CR0_EQ, 12 */
		/* 82150C68h case   19:*/		if ( !regs.CR[0].eq ) { return 0x82150C74;  }
		/* 82150C68h case   19:*/		return 0x82150C6C;
		  /* 82150C6Ch */ case   20:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 82150C6Ch case   20:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 82150C6Ch case   20:*/		return 0x82150C70;
		  /* 82150C70h */ case   21:  		/* bc 12, CR0_EQ, 88 */
		/* 82150C70h case   21:*/		if ( regs.CR[0].eq ) { return 0x82150CC8;  }
		/* 82150C70h case   21:*/		return 0x82150C74;
	}
	return 0x82150C74;
} // Block from 82150C1Ch-82150C74h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82150C74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150C74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150C74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150C74);
		  /* 82150C74h */ case    0:  		/* lis R11, -32255 */
		/* 82150C74h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82150C74h case    0:*/		return 0x82150C78;
		  /* 82150C78h */ case    1:  		/* mr R3, R31 */
		/* 82150C78h case    1:*/		regs.R3 = regs.R31;
		/* 82150C78h case    1:*/		return 0x82150C7C;
		  /* 82150C7Ch */ case    2:  		/* addi R4, R11, 12868 */
		/* 82150C7Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x3244);
		/* 82150C7Ch case    2:*/		return 0x82150C80;
		  /* 82150C80h */ case    3:  		/* bl -1112 */
		/* 82150C80h case    3:*/		regs.LR = 0x82150C84; return 0x82150828;
		/* 82150C80h case    3:*/		return 0x82150C84;
		  /* 82150C84h */ case    4:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 82150C84h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 82150C84h case    4:*/		return 0x82150C88;
		  /* 82150C88h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 82150C88h case    5:*/		if ( regs.CR[0].eq ) { return 0x82150C98;  }
		/* 82150C88h case    5:*/		return 0x82150C8C;
		  /* 82150C8Ch */ case    6:  		/* lis R11, -32255 */
		/* 82150C8Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82150C8Ch case    6:*/		return 0x82150C90;
		  /* 82150C90h */ case    7:  		/* addi R5, R11, 5224 */
		/* 82150C90h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1468);
		/* 82150C90h case    7:*/		return 0x82150C94;
		  /* 82150C94h */ case    8:  		/* b 12 */
		/* 82150C94h case    8:*/		return 0x82150CA0;
		/* 82150C94h case    8:*/		return 0x82150C98;
	}
	return 0x82150C98;
} // Block from 82150C74h-82150C98h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82150C98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150C98);
		  /* 82150C98h */ case    0:  		/* lis R11, -32255 */
		/* 82150C98h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82150C98h case    0:*/		return 0x82150C9C;
		  /* 82150C9Ch */ case    1:  		/* addi R5, R11, 5216 */
		/* 82150C9Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x1460);
		/* 82150C9Ch case    1:*/		return 0x82150CA0;
	}
	return 0x82150CA0;
} // Block from 82150C98h-82150CA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82150CA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150CA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150CA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150CA0);
		  /* 82150CA0h */ case    0:  		/* lis R11, -32253 */
		/* 82150CA0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150CA0h case    0:*/		return 0x82150CA4;
		  /* 82150CA4h */ case    1:  		/* mr R3, R31 */
		/* 82150CA4h case    1:*/		regs.R3 = regs.R31;
		/* 82150CA4h case    1:*/		return 0x82150CA8;
		  /* 82150CA8h */ case    2:  		/* addi R4, R11, 30544 */
		/* 82150CA8h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7750);
		/* 82150CA8h case    2:*/		return 0x82150CAC;
		  /* 82150CACh */ case    3:  		/* bl -11412 */
		/* 82150CACh case    3:*/		regs.LR = 0x82150CB0; return 0x8214E018;
		/* 82150CACh case    3:*/		return 0x82150CB0;
		  /* 82150CB0h */ case    4:  		/* mr R4, R30 */
		/* 82150CB0h case    4:*/		regs.R4 = regs.R30;
		/* 82150CB0h case    4:*/		return 0x82150CB4;
		  /* 82150CB4h */ case    5:  		/* mr R3, R31 */
		/* 82150CB4h case    5:*/		regs.R3 = regs.R31;
		/* 82150CB4h case    5:*/		return 0x82150CB8;
		  /* 82150CB8h */ case    6:  		/* bl -8712 */
		/* 82150CB8h case    6:*/		regs.LR = 0x82150CBC; return 0x8214EAB0;
		/* 82150CB8h case    6:*/		return 0x82150CBC;
		  /* 82150CBCh */ case    7:  		/* mr R4, R29 */
		/* 82150CBCh case    7:*/		regs.R4 = regs.R29;
		/* 82150CBCh case    7:*/		return 0x82150CC0;
		  /* 82150CC0h */ case    8:  		/* mr R3, R31 */
		/* 82150CC0h case    8:*/		regs.R3 = regs.R31;
		/* 82150CC0h case    8:*/		return 0x82150CC4;
		  /* 82150CC4h */ case    9:  		/* bl -11436 */
		/* 82150CC4h case    9:*/		regs.LR = 0x82150CC8; return 0x8214E018;
		/* 82150CC4h case    9:*/		return 0x82150CC8;
	}
	return 0x82150CC8;
} // Block from 82150CA0h-82150CC8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82150CC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150CC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150CC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150CC8);
		  /* 82150CC8h */ case    0:  		/* li R3, 0 */
		/* 82150CC8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82150CC8h case    0:*/		return 0x82150CCC;
	}
	return 0x82150CCC;
} // Block from 82150CC8h-82150CCCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82150CCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150CCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150CCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150CCC);
		  /* 82150CCCh */ case    0:  		/* addi R1, R1, 128 */
		/* 82150CCCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82150CCCh case    0:*/		return 0x82150CD0;
		  /* 82150CD0h */ case    1:  		/* b -784940 */
		/* 82150CD0h case    1:*/		return 0x820912A4;
		/* 82150CD0h case    1:*/		return 0x82150CD4;
		  /* 82150CD4h */ case    2:  		/* nop */
		/* 82150CD4h case    2:*/		cpu::op::nop();
		/* 82150CD4h case    2:*/		return 0x82150CD8;
	}
	return 0x82150CD8;
} // Block from 82150CCCh-82150CD8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82150CD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150CD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150CD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150CD8);
		  /* 82150CD8h */ case    0:  		/* mfspr R12, LR */
		/* 82150CD8h case    0:*/		regs.R12 = regs.LR;
		/* 82150CD8h case    0:*/		return 0x82150CDC;
		  /* 82150CDCh */ case    1:  		/* bl -785084 */
		/* 82150CDCh case    1:*/		regs.LR = 0x82150CE0; return 0x82091220;
		/* 82150CDCh case    1:*/		return 0x82150CE0;
		  /* 82150CE0h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 82150CE0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 82150CE0h case    2:*/		return 0x82150CE4;
		  /* 82150CE4h */ case    3:  		/* mr R27, R3 */
		/* 82150CE4h case    3:*/		regs.R27 = regs.R3;
		/* 82150CE4h case    3:*/		return 0x82150CE8;
		  /* 82150CE8h */ case    4:  		/* mr R19, R5 */
		/* 82150CE8h case    4:*/		regs.R19 = regs.R5;
		/* 82150CE8h case    4:*/		return 0x82150CEC;
		  /* 82150CECh */ case    5:  		/* mr R31, R7 */
		/* 82150CECh case    5:*/		regs.R31 = regs.R7;
		/* 82150CECh case    5:*/		return 0x82150CF0;
		  /* 82150CF0h */ case    6:  		/* cmplwi CR6, R6, 36 */
		/* 82150CF0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000024);
		/* 82150CF0h case    6:*/		return 0x82150CF4;
		  /* 82150CF4h */ case    7:  		/* bc 4, CR6_LT, 16 */
		/* 82150CF4h case    7:*/		if ( !regs.CR[6].lt ) { return 0x82150D04;  }
		/* 82150CF4h case    7:*/		return 0x82150CF8;
		  /* 82150CF8h */ case    8:  		/* lis R3, -32761 */
		/* 82150CF8h case    8:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 82150CF8h case    8:*/		return 0x82150CFC;
		  /* 82150CFCh */ case    9:  		/* ori R3, R3, 87 */
		/* 82150CFCh case    9:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x57);
		/* 82150CFCh case    9:*/		return 0x82150D00;
		  /* 82150D00h */ case   10:  		/* b 1700 */
		/* 82150D00h case   10:*/		return 0x821513A4;
		/* 82150D00h case   10:*/		return 0x82150D04;
	}
	return 0x82150D04;
} // Block from 82150CD8h-82150D04h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82150D04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150D04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150D04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150D04);
		  /* 82150D04h */ case    0:  		/* addi R11, R8, 3 */
		/* 82150D04h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0x3);
		/* 82150D04h case    0:*/		return 0x82150D08;
		  /* 82150D08h */ case    1:  		/* cntlzw R10, R4 */
		/* 82150D08h case    1:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R4);
		/* 82150D08h case    1:*/		return 0x82150D0C;
		  /* 82150D0Ch */ case    2:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 82150D0Ch case    2:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 82150D0Ch case    2:*/		return 0x82150D10;
		  /* 82150D10h */ case    3:  		/* rlwinm R10, R10, 27, 31, 31 */
		/* 82150D10h case    3:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R10,regs.R10);
		/* 82150D10h case    3:*/		return 0x82150D14;
		  /* 82150D14h */ case    4:  		/* lwzx R11, <#[R11 + R19]> */
		/* 82150D14h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R19 + 0x00000000) );
		/* 82150D14h case    4:*/		return 0x82150D18;
		  /* 82150D18h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82150D18h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82150D18h case    5:*/		return 0x82150D1C;
		  /* 82150D1Ch */ case    6:  		/* bc 12, CR6_EQ, 1668 */
		/* 82150D1Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821513A0;  }
		/* 82150D1Ch case    6:*/		return 0x82150D20;
		  /* 82150D20h */ case    7:  		/* lis R9, -32253 */
		/* 82150D20h case    7:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82150D20h case    7:*/		return 0x82150D24;
		  /* 82150D24h */ case    8:  		/* add R25, R11, R19 */
		/* 82150D24h case    8:*/		cpu::op::add<0>(regs,&regs.R25,regs.R11,regs.R19);
		/* 82150D24h case    8:*/		return 0x82150D28;
		  /* 82150D28h */ case    9:  		/* rlwinm R8, R4, 2, 0, 29 */
		/* 82150D28h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R4);
		/* 82150D28h case    9:*/		return 0x82150D2C;
		  /* 82150D2Ch */ case   10:  		/* addi R9, R9, 30952 */
		/* 82150D2Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x78E8);
		/* 82150D2Ch case   10:*/		return 0x82150D30;
		  /* 82150D30h */ case   11:  		/* rlwinm. R20, R10, 0, 24, 31 */
		/* 82150D30h case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R20,regs.R10);
		/* 82150D30h case   11:*/		return 0x82150D34;
		  /* 82150D34h */ case   12:  		/* lwzx R11, <#[R8 + R9]> */
		/* 82150D34h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 82150D34h case   12:*/		return 0x82150D38;
		  /* 82150D38h */ case   13:  		/* lwz R17, <#[R25 + 20]> */
		/* 82150D38h case   13:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R25 + 0x00000014) );
		/* 82150D38h case   13:*/		return 0x82150D3C;
		  /* 82150D3Ch */ case   14:  		/* lwz R26, <#[R25 + 8]> */
		/* 82150D3Ch case   14:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R25 + 0x00000008) );
		/* 82150D3Ch case   14:*/		return 0x82150D40;
		  /* 82150D40h */ case   15:  		/* add R16, R11, R25 */
		/* 82150D40h case   15:*/		cpu::op::add<0>(regs,&regs.R16,regs.R11,regs.R25);
		/* 82150D40h case   15:*/		return 0x82150D44;
		  /* 82150D44h */ case   16:  		/* lwz R24, <#[R25 + 12]> */
		/* 82150D44h case   16:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R25 + 0x0000000C) );
		/* 82150D44h case   16:*/		return 0x82150D48;
		  /* 82150D48h */ case   17:  		/* rlwinm R10, R17, 15, 31, 31 */
		/* 82150D48h case   17:*/		cpu::op::rlwinm<0,15,31,31>(regs,&regs.R10,regs.R17);
		/* 82150D48h case   17:*/		return 0x82150D4C;
		  /* 82150D4Ch */ case   18:  		/* bc 4, CR0_EQ, 8 */
		/* 82150D4Ch case   18:*/		if ( !regs.CR[0].eq ) { return 0x82150D54;  }
		/* 82150D4Ch case   18:*/		return 0x82150D50;
		  /* 82150D50h */ case   19:  		/* rlwinm R10, R17, 14, 31, 31 */
		/* 82150D50h case   19:*/		cpu::op::rlwinm<0,14,31,31>(regs,&regs.R10,regs.R17);
		/* 82150D50h case   19:*/		return 0x82150D54;
	}
	return 0x82150D54;
} // Block from 82150D04h-82150D54h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82150D54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150D54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150D54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150D54);
		  /* 82150D54h */ case    0:  		/* lis R11, -32255 */
		/* 82150D54h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82150D54h case    0:*/		return 0x82150D58;
		  /* 82150D58h */ case    1:  		/* mr R3, R31 */
		/* 82150D58h case    1:*/		regs.R3 = regs.R31;
		/* 82150D58h case    1:*/		return 0x82150D5C;
		  /* 82150D5Ch */ case    2:  		/* addi R30, R11, 12868 */
		/* 82150D5Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x3244);
		/* 82150D5Ch case    2:*/		return 0x82150D60;
		  /* 82150D60h */ case    3:  		/* rlwinm R28, R10, 0, 24, 31 */
		/* 82150D60h case    3:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R28,regs.R10);
		/* 82150D60h case    3:*/		return 0x82150D64;
		  /* 82150D64h */ case    4:  		/* mr R4, R30 */
		/* 82150D64h case    4:*/		regs.R4 = regs.R30;
		/* 82150D64h case    4:*/		return 0x82150D68;
		  /* 82150D68h */ case    5:  		/* rlwinm R29, R27, 25, 31, 31 */
		/* 82150D68h case    5:*/		cpu::op::rlwinm<0,25,31,31>(regs,&regs.R29,regs.R27);
		/* 82150D68h case    5:*/		return 0x82150D6C;
		  /* 82150D6Ch */ case    6:  		/* bl -1348 */
		/* 82150D6Ch case    6:*/		regs.LR = 0x82150D70; return 0x82150828;
		/* 82150D6Ch case    6:*/		return 0x82150D70;
		  /* 82150D70h */ case    7:  		/* lis R11, -32253 */
		/* 82150D70h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150D70h case    7:*/		return 0x82150D74;
		  /* 82150D74h */ case    8:  		/* mr R3, R31 */
		/* 82150D74h case    8:*/		regs.R3 = regs.R31;
		/* 82150D74h case    8:*/		return 0x82150D78;
		  /* 82150D78h */ case    9:  		/* addi R4, R11, 30928 */
		/* 82150D78h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x78D0);
		/* 82150D78h case    9:*/		return 0x82150D7C;
		  /* 82150D7Ch */ case   10:  		/* bl -11620 */
		/* 82150D7Ch case   10:*/		regs.LR = 0x82150D80; return 0x8214E018;
		/* 82150D7Ch case   10:*/		return 0x82150D80;
		  /* 82150D80h */ case   11:  		/* lis R11, -32253 */
		/* 82150D80h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150D80h case   11:*/		return 0x82150D84;
		  /* 82150D84h */ case   12:  		/* mr R3, R31 */
		/* 82150D84h case   12:*/		regs.R3 = regs.R31;
		/* 82150D84h case   12:*/		return 0x82150D88;
		  /* 82150D88h */ case   13:  		/* addi R14, R11, 28332 */
		/* 82150D88h case   13:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R11,0x6EAC);
		/* 82150D88h case   13:*/		return 0x82150D8C;
		  /* 82150D8Ch */ case   14:  		/* mr R4, R14 */
		/* 82150D8Ch case   14:*/		regs.R4 = regs.R14;
		/* 82150D8Ch case   14:*/		return 0x82150D90;
		  /* 82150D90h */ case   15:  		/* stw R14, <#[R1 + 92]> */
		/* 82150D90h case   15:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x0000005C) );
		/* 82150D90h case   15:*/		return 0x82150D94;
		  /* 82150D94h */ case   16:  		/* bl -8932 */
		/* 82150D94h case   16:*/		regs.LR = 0x82150D98; return 0x8214EAB0;
		/* 82150D94h case   16:*/		return 0x82150D98;
		  /* 82150D98h */ case   17:  		/* lis R11, -32256 */
		/* 82150D98h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82150D98h case   17:*/		return 0x82150D9C;
		  /* 82150D9Ch */ case   18:  		/* mr R3, R31 */
		/* 82150D9Ch case   18:*/		regs.R3 = regs.R31;
		/* 82150D9Ch case   18:*/		return 0x82150DA0;
		  /* 82150DA0h */ case   19:  		/* addi R22, R11, 17768 */
		/* 82150DA0h case   19:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R11,0x4568);
		/* 82150DA0h case   19:*/		return 0x82150DA4;
		  /* 82150DA4h */ case   20:  		/* mr R4, R22 */
		/* 82150DA4h case   20:*/		regs.R4 = regs.R22;
		/* 82150DA4h case   20:*/		return 0x82150DA8;
		  /* 82150DA8h */ case   21:  		/* stw R22, <#[R1 + 84]> */
		/* 82150DA8h case   21:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000054) );
		/* 82150DA8h case   21:*/		return 0x82150DAC;
		  /* 82150DACh */ case   22:  		/* bl -11668 */
		/* 82150DACh case   22:*/		regs.LR = 0x82150DB0; return 0x8214E018;
		/* 82150DACh case   22:*/		return 0x82150DB0;
		  /* 82150DB0h */ case   23:  		/* mr R4, R30 */
		/* 82150DB0h case   23:*/		regs.R4 = regs.R30;
		/* 82150DB0h case   23:*/		return 0x82150DB4;
		  /* 82150DB4h */ case   24:  		/* mr R3, R31 */
		/* 82150DB4h case   24:*/		regs.R3 = regs.R31;
		/* 82150DB4h case   24:*/		return 0x82150DB8;
		  /* 82150DB8h */ case   25:  		/* bl -1424 */
		/* 82150DB8h case   25:*/		regs.LR = 0x82150DBC; return 0x82150828;
		/* 82150DB8h case   25:*/		return 0x82150DBC;
		  /* 82150DBCh */ case   26:  		/* lis R11, -32253 */
		/* 82150DBCh case   26:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150DBCh case   26:*/		return 0x82150DC0;
		  /* 82150DC0h */ case   27:  		/* mr R3, R31 */
		/* 82150DC0h case   27:*/		regs.R3 = regs.R31;
		/* 82150DC0h case   27:*/		return 0x82150DC4;
		  /* 82150DC4h */ case   28:  		/* addi R4, R11, 30908 */
		/* 82150DC4h case   28:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x78BC);
		/* 82150DC4h case   28:*/		return 0x82150DC8;
		  /* 82150DC8h */ case   29:  		/* bl -11696 */
		/* 82150DC8h case   29:*/		regs.LR = 0x82150DCC; return 0x8214E018;
		/* 82150DC8h case   29:*/		return 0x82150DCC;
		  /* 82150DCCh */ case   30:  		/* mr R4, R14 */
		/* 82150DCCh case   30:*/		regs.R4 = regs.R14;
		/* 82150DCCh case   30:*/		return 0x82150DD0;
		  /* 82150DD0h */ case   31:  		/* mr R3, R31 */
		/* 82150DD0h case   31:*/		regs.R3 = regs.R31;
		/* 82150DD0h case   31:*/		return 0x82150DD4;
		  /* 82150DD4h */ case   32:  		/* bl -8996 */
		/* 82150DD4h case   32:*/		regs.LR = 0x82150DD8; return 0x8214EAB0;
		/* 82150DD4h case   32:*/		return 0x82150DD8;
		  /* 82150DD8h */ case   33:  		/* mr R4, R22 */
		/* 82150DD8h case   33:*/		regs.R4 = regs.R22;
		/* 82150DD8h case   33:*/		return 0x82150DDC;
		  /* 82150DDCh */ case   34:  		/* mr R3, R31 */
		/* 82150DDCh case   34:*/		regs.R3 = regs.R31;
		/* 82150DDCh case   34:*/		return 0x82150DE0;
		  /* 82150DE0h */ case   35:  		/* bl -11720 */
		/* 82150DE0h case   35:*/		regs.LR = 0x82150DE4; return 0x8214E018;
		/* 82150DE0h case   35:*/		return 0x82150DE4;
		  /* 82150DE4h */ case   36:  		/* lis R11, -32255 */
		/* 82150DE4h case   36:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82150DE4h case   36:*/		return 0x82150DE8;
		  /* 82150DE8h */ case   37:  		/* lis R10, -32255 */
		/* 82150DE8h case   37:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 82150DE8h case   37:*/		return 0x82150DEC;
		  /* 82150DECh */ case   38:  		/* li R15, 1 */
		/* 82150DECh case   38:*/		cpu::op::li<0>(regs,&regs.R15,0x1);
		/* 82150DECh case   38:*/		return 0x82150DF0;
		  /* 82150DF0h */ case   39:  		/* addi R23, R11, 5216 */
		/* 82150DF0h case   39:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R11,0x1460);
		/* 82150DF0h case   39:*/		return 0x82150DF4;
		  /* 82150DF4h */ case   40:  		/* stb R15, <#[R1 + 80]> */
		/* 82150DF4h case   40:*/		cpu::mem::store8( regs, regs.R15, (uint32)(regs.R1 + 0x00000050) );
		/* 82150DF4h case   40:*/		return 0x82150DF8;
		  /* 82150DF8h */ case   41:  		/* cmplwi CR0, R29, 0 */
		/* 82150DF8h case   41:*/		cpu::op::cmplwi<0>(regs,regs.R29,0x00000000);
		/* 82150DF8h case   41:*/		return 0x82150DFC;
		  /* 82150DFCh */ case   42:  		/* addi R21, R10, 5224 */
		/* 82150DFCh case   42:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R10,0x1468);
		/* 82150DFCh case   42:*/		return 0x82150E00;
		  /* 82150E00h */ case   43:  		/* bc 4, CR0_EQ, 12 */
		/* 82150E00h case   43:*/		if ( !regs.CR[0].eq ) { return 0x82150E0C;  }
		/* 82150E00h case   43:*/		return 0x82150E04;
		  /* 82150E04h */ case   44:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 82150E04h case   44:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 82150E04h case   44:*/		return 0x82150E08;
		  /* 82150E08h */ case   45:  		/* bc 12, CR0_EQ, 76 */
		/* 82150E08h case   45:*/		if ( regs.CR[0].eq ) { return 0x82150E54;  }
		/* 82150E08h case   45:*/		return 0x82150E0C;
	}
	return 0x82150E0C;
} // Block from 82150D54h-82150E0Ch (46 instructions)

//////////////////////////////////////////////////////
// Block at 82150E0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150E0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150E0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150E0C);
		  /* 82150E0Ch */ case    0:  		/* mr R4, R30 */
		/* 82150E0Ch case    0:*/		regs.R4 = regs.R30;
		/* 82150E0Ch case    0:*/		return 0x82150E10;
		  /* 82150E10h */ case    1:  		/* mr R3, R31 */
		/* 82150E10h case    1:*/		regs.R3 = regs.R31;
		/* 82150E10h case    1:*/		return 0x82150E14;
		  /* 82150E14h */ case    2:  		/* bl -1516 */
		/* 82150E14h case    2:*/		regs.LR = 0x82150E18; return 0x82150828;
		/* 82150E14h case    2:*/		return 0x82150E18;
		  /* 82150E18h */ case    3:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 82150E18h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 82150E18h case    3:*/		return 0x82150E1C;
		  /* 82150E1Ch */ case    4:  		/* mr R5, R21 */
		/* 82150E1Ch case    4:*/		regs.R5 = regs.R21;
		/* 82150E1Ch case    4:*/		return 0x82150E20;
		  /* 82150E20h */ case    5:  		/* bc 4, CR0_EQ, 8 */
		/* 82150E20h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82150E28;  }
		/* 82150E20h case    5:*/		return 0x82150E24;
		  /* 82150E24h */ case    6:  		/* mr R5, R23 */
		/* 82150E24h case    6:*/		regs.R5 = regs.R23;
		/* 82150E24h case    6:*/		return 0x82150E28;
	}
	return 0x82150E28;
} // Block from 82150E0Ch-82150E28h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82150E28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150E28);
		  /* 82150E28h */ case    0:  		/* lis R11, -32253 */
		/* 82150E28h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150E28h case    0:*/		return 0x82150E2C;
		  /* 82150E2Ch */ case    1:  		/* mr R3, R31 */
		/* 82150E2Ch case    1:*/		regs.R3 = regs.R31;
		/* 82150E2Ch case    1:*/		return 0x82150E30;
		  /* 82150E30h */ case    2:  		/* addi R4, R11, 30880 */
		/* 82150E30h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x78A0);
		/* 82150E30h case    2:*/		return 0x82150E34;
		  /* 82150E34h */ case    3:  		/* bl -11804 */
		/* 82150E34h case    3:*/		regs.LR = 0x82150E38; return 0x8214E018;
		/* 82150E34h case    3:*/		return 0x82150E38;
		  /* 82150E38h */ case    4:  		/* mr R4, R14 */
		/* 82150E38h case    4:*/		regs.R4 = regs.R14;
		/* 82150E38h case    4:*/		return 0x82150E3C;
		  /* 82150E3Ch */ case    5:  		/* mr R3, R31 */
		/* 82150E3Ch case    5:*/		regs.R3 = regs.R31;
		/* 82150E3Ch case    5:*/		return 0x82150E40;
		  /* 82150E40h */ case    6:  		/* bl -9104 */
		/* 82150E40h case    6:*/		regs.LR = 0x82150E44; return 0x8214EAB0;
		/* 82150E40h case    6:*/		return 0x82150E44;
		  /* 82150E44h */ case    7:  		/* mr R4, R22 */
		/* 82150E44h case    7:*/		regs.R4 = regs.R22;
		/* 82150E44h case    7:*/		return 0x82150E48;
		  /* 82150E48h */ case    8:  		/* mr R3, R31 */
		/* 82150E48h case    8:*/		regs.R3 = regs.R31;
		/* 82150E48h case    8:*/		return 0x82150E4C;
		  /* 82150E4Ch */ case    9:  		/* bl -11828 */
		/* 82150E4Ch case    9:*/		regs.LR = 0x82150E50; return 0x8214E018;
		/* 82150E4Ch case    9:*/		return 0x82150E50;
		  /* 82150E50h */ case   10:  		/* stb R15, <#[R1 + 80]> */
		/* 82150E50h case   10:*/		cpu::mem::store8( regs, regs.R15, (uint32)(regs.R1 + 0x00000050) );
		/* 82150E50h case   10:*/		return 0x82150E54;
	}
	return 0x82150E54;
} // Block from 82150E28h-82150E54h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82150E54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150E54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150E54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150E54);
		  /* 82150E54h */ case    0:  		/* addi R9, R1, 80 */
		/* 82150E54h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 82150E54h case    0:*/		return 0x82150E58;
		  /* 82150E58h */ case    1:  		/* mr R8, R24 */
		/* 82150E58h case    1:*/		regs.R8 = regs.R24;
		/* 82150E58h case    1:*/		return 0x82150E5C;
		  /* 82150E5Ch */ case    2:  		/* mr R7, R26 */
		/* 82150E5Ch case    2:*/		regs.R7 = regs.R26;
		/* 82150E5Ch case    2:*/		return 0x82150E60;
		  /* 82150E60h */ case    3:  		/* mr R6, R20 */
		/* 82150E60h case    3:*/		regs.R6 = regs.R20;
		/* 82150E60h case    3:*/		return 0x82150E64;
		  /* 82150E64h */ case    4:  		/* mr R5, R29 */
		/* 82150E64h case    4:*/		regs.R5 = regs.R29;
		/* 82150E64h case    4:*/		return 0x82150E68;
		  /* 82150E68h */ case    5:  		/* li R4, 0 */
		/* 82150E68h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82150E68h case    5:*/		return 0x82150E6C;
		  /* 82150E6Ch */ case    6:  		/* mr R3, R31 */
		/* 82150E6Ch case    6:*/		regs.R3 = regs.R31;
		/* 82150E6Ch case    6:*/		return 0x82150E70;
		  /* 82150E70h */ case    7:  		/* bl -1504 */
		/* 82150E70h case    7:*/		regs.LR = 0x82150E74; return 0x82150890;
		/* 82150E70h case    7:*/		return 0x82150E74;
		  /* 82150E74h */ case    8:  		/* lbz R11, <#[R1 + 80]> */
		/* 82150E74h case    8:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82150E74h case    8:*/		return 0x82150E78;
		  /* 82150E78h */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 82150E78h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82150E78h case    9:*/		return 0x82150E7C;
		  /* 82150E7Ch */ case   10:  		/* bc 12, CR0_EQ, 28 */
		/* 82150E7Ch case   10:*/		if ( regs.CR[0].eq ) { return 0x82150E98;  }
		/* 82150E7Ch case   10:*/		return 0x82150E80;
		  /* 82150E80h */ case   11:  		/* mr R4, R14 */
		/* 82150E80h case   11:*/		regs.R4 = regs.R14;
		/* 82150E80h case   11:*/		return 0x82150E84;
		  /* 82150E84h */ case   12:  		/* mr R3, R31 */
		/* 82150E84h case   12:*/		regs.R3 = regs.R31;
		/* 82150E84h case   12:*/		return 0x82150E88;
		  /* 82150E88h */ case   13:  		/* bl -9176 */
		/* 82150E88h case   13:*/		regs.LR = 0x82150E8C; return 0x8214EAB0;
		/* 82150E88h case   13:*/		return 0x82150E8C;
		  /* 82150E8Ch */ case   14:  		/* mr R4, R22 */
		/* 82150E8Ch case   14:*/		regs.R4 = regs.R22;
		/* 82150E8Ch case   14:*/		return 0x82150E90;
		  /* 82150E90h */ case   15:  		/* mr R3, R31 */
		/* 82150E90h case   15:*/		regs.R3 = regs.R31;
		/* 82150E90h case   15:*/		return 0x82150E94;
		  /* 82150E94h */ case   16:  		/* bl -11900 */
		/* 82150E94h case   16:*/		regs.LR = 0x82150E98; return 0x8214E018;
		/* 82150E94h case   16:*/		return 0x82150E98;
	}
	return 0x82150E98;
} // Block from 82150E54h-82150E98h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82150E98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150E98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150E98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150E98);
		  /* 82150E98h */ case    0:  		/* lis R11, -32253 */
		/* 82150E98h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150E98h case    0:*/		return 0x82150E9C;
		  /* 82150E9Ch */ case    1:  		/* lis R10, -32253 */
		/* 82150E9Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82150E9Ch case    1:*/		return 0x82150EA0;
		  /* 82150EA0h */ case    2:  		/* addi R18, R11, 28348 */
		/* 82150EA0h case    2:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R11,0x6EBC);
		/* 82150EA0h case    2:*/		return 0x82150EA4;
		  /* 82150EA4h */ case    3:  		/* rlwinm. R9, R27, 0, 23, 23 */
		/* 82150EA4h case    3:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R9,regs.R27);
		/* 82150EA4h case    3:*/		return 0x82150EA8;
		  /* 82150EA8h */ case    4:  		/* stw R18, <#[R1 + 88]> */
		/* 82150EA8h case    4:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x00000058) );
		/* 82150EA8h case    4:*/		return 0x82150EAC;
		  /* 82150EACh */ case    5:  		/* addi R27, R10, 28356 */
		/* 82150EACh case    5:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R10,0x6EC4);
		/* 82150EACh case    5:*/		return 0x82150EB0;
		  /* 82150EB0h */ case    6:  		/* bc 12, CR0_EQ, 384 */
		/* 82150EB0h case    6:*/		if ( regs.CR[0].eq ) { return 0x82151030;  }
		/* 82150EB0h case    6:*/		return 0x82150EB4;
		  /* 82150EB4h */ case    7:  		/* mr R4, R27 */
		/* 82150EB4h case    7:*/		regs.R4 = regs.R27;
		/* 82150EB4h case    7:*/		return 0x82150EB8;
		  /* 82150EB8h */ case    8:  		/* mr R3, R31 */
		/* 82150EB8h case    8:*/		regs.R3 = regs.R31;
		/* 82150EB8h case    8:*/		return 0x82150EBC;
		  /* 82150EBCh */ case    9:  		/* bl -9228 */
		/* 82150EBCh case    9:*/		regs.LR = 0x82150EC0; return 0x8214EAB0;
		/* 82150EBCh case    9:*/		return 0x82150EC0;
		  /* 82150EC0h */ case   10:  		/* lwz R11, <#[R25 + 16]> */
		/* 82150EC0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000010) );
		/* 82150EC0h case   10:*/		return 0x82150EC4;
		  /* 82150EC4h */ case   11:  		/* cmplwi CR6, R29, 0 */
		/* 82150EC4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82150EC4h case   11:*/		return 0x82150EC8;
		  /* 82150EC8h */ case   12:  		/* bc 4, CR6_EQ, 12 */
		/* 82150EC8h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82150ED4;  }
		/* 82150EC8h case   12:*/		return 0x82150ECC;
		  /* 82150ECCh */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 82150ECCh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82150ECCh case   13:*/		return 0x82150ED0;
		  /* 82150ED0h */ case   14:  		/* bc 12, CR6_EQ, 52 */
		/* 82150ED0h case   14:*/		if ( regs.CR[6].eq ) { return 0x82150F04;  }
		/* 82150ED0h case   14:*/		return 0x82150ED4;
	}
	return 0x82150ED4;
} // Block from 82150E98h-82150ED4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82150ED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150ED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150ED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150ED4);
		  /* 82150ED4h */ case    0:  		/* lis R10, -32253 */
		/* 82150ED4h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 82150ED4h case    0:*/		return 0x82150ED8;
		  /* 82150ED8h */ case    1:  		/* rlwinm R6, R11, 16, 28, 31 */
		/* 82150ED8h case    1:*/		cpu::op::rlwinm<0,16,28,31>(regs,&regs.R6,regs.R11);
		/* 82150ED8h case    1:*/		return 0x82150EDC;
		  /* 82150EDCh */ case    2:  		/* addi R4, R10, 30820 */
		/* 82150EDCh case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x7864);
		/* 82150EDCh case    2:*/		return 0x82150EE0;
		  /* 82150EE0h */ case    3:  		/* rlwinm R5, R11, 0, 16, 31 */
		/* 82150EE0h case    3:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R5,regs.R11);
		/* 82150EE0h case    3:*/		return 0x82150EE4;
		  /* 82150EE4h */ case    4:  		/* mr R3, R31 */
		/* 82150EE4h case    4:*/		regs.R3 = regs.R31;
		/* 82150EE4h case    4:*/		return 0x82150EE8;
		  /* 82150EE8h */ case    5:  		/* bl -11984 */
		/* 82150EE8h case    5:*/		regs.LR = 0x82150EEC; return 0x8214E018;
		/* 82150EE8h case    5:*/		return 0x82150EEC;
		  /* 82150EECh */ case    6:  		/* mr R4, R14 */
		/* 82150EECh case    6:*/		regs.R4 = regs.R14;
		/* 82150EECh case    6:*/		return 0x82150EF0;
		  /* 82150EF0h */ case    7:  		/* mr R3, R31 */
		/* 82150EF0h case    7:*/		regs.R3 = regs.R31;
		/* 82150EF0h case    7:*/		return 0x82150EF4;
		  /* 82150EF4h */ case    8:  		/* bl -9284 */
		/* 82150EF4h case    8:*/		regs.LR = 0x82150EF8; return 0x8214EAB0;
		/* 82150EF4h case    8:*/		return 0x82150EF8;
		  /* 82150EF8h */ case    9:  		/* mr R4, R22 */
		/* 82150EF8h case    9:*/		regs.R4 = regs.R22;
		/* 82150EF8h case    9:*/		return 0x82150EFC;
		  /* 82150EFCh */ case   10:  		/* mr R3, R31 */
		/* 82150EFCh case   10:*/		regs.R3 = regs.R31;
		/* 82150EFCh case   10:*/		return 0x82150F00;
		  /* 82150F00h */ case   11:  		/* bl -12008 */
		/* 82150F00h case   11:*/		regs.LR = 0x82150F04; return 0x8214E018;
		/* 82150F00h case   11:*/		return 0x82150F04;
	}
	return 0x82150F04;
} // Block from 82150ED4h-82150F04h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82150F04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150F04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150F04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150F04);
		  /* 82150F04h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 82150F04h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82150F04h case    0:*/		return 0x82150F08;
		  /* 82150F08h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82150F08h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82150F14;  }
		/* 82150F08h case    1:*/		return 0x82150F0C;
		  /* 82150F0Ch */ case    2:  		/* rlwinm. R30, R17, 0, 27, 31 */
		/* 82150F0Ch case    2:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R30,regs.R17);
		/* 82150F0Ch case    2:*/		return 0x82150F10;
		  /* 82150F10h */ case    3:  		/* bc 12, CR0_EQ, 60 */
		/* 82150F10h case    3:*/		if ( regs.CR[0].eq ) { return 0x82150F4C;  }
		/* 82150F10h case    3:*/		return 0x82150F14;
	}
	return 0x82150F14;
} // Block from 82150F04h-82150F14h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82150F14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150F14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150F14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150F14);
		  /* 82150F14h */ case    0:  		/* lis R11, -32253 */
		/* 82150F14h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150F14h case    0:*/		return 0x82150F18;
		  /* 82150F18h */ case    1:  		/* rlwinm R30, R17, 0, 27, 31 */
		/* 82150F18h case    1:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R30,regs.R17);
		/* 82150F18h case    1:*/		return 0x82150F1C;
		  /* 82150F1Ch */ case    2:  		/* rlwinm R7, R17, 22, 25, 31 */
		/* 82150F1Ch case    2:*/		cpu::op::rlwinm<0,22,25,31>(regs,&regs.R7,regs.R17);
		/* 82150F1Ch case    2:*/		return 0x82150F20;
		  /* 82150F20h */ case    3:  		/* addi R4, R11, 30764 */
		/* 82150F20h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x782C);
		/* 82150F20h case    3:*/		return 0x82150F24;
		  /* 82150F24h */ case    4:  		/* rlwinm R6, R17, 27, 27, 31 */
		/* 82150F24h case    4:*/		cpu::op::rlwinm<0,27,27,31>(regs,&regs.R6,regs.R17);
		/* 82150F24h case    4:*/		return 0x82150F28;
		  /* 82150F28h */ case    5:  		/* mr R5, R30 */
		/* 82150F28h case    5:*/		regs.R5 = regs.R30;
		/* 82150F28h case    5:*/		return 0x82150F2C;
		  /* 82150F2Ch */ case    6:  		/* mr R3, R31 */
		/* 82150F2Ch case    6:*/		regs.R3 = regs.R31;
		/* 82150F2Ch case    6:*/		return 0x82150F30;
		  /* 82150F30h */ case    7:  		/* bl -12056 */
		/* 82150F30h case    7:*/		regs.LR = 0x82150F34; return 0x8214E018;
		/* 82150F30h case    7:*/		return 0x82150F34;
		  /* 82150F34h */ case    8:  		/* mr R4, R14 */
		/* 82150F34h case    8:*/		regs.R4 = regs.R14;
		/* 82150F34h case    8:*/		return 0x82150F38;
		  /* 82150F38h */ case    9:  		/* mr R3, R31 */
		/* 82150F38h case    9:*/		regs.R3 = regs.R31;
		/* 82150F38h case    9:*/		return 0x82150F3C;
		  /* 82150F3Ch */ case   10:  		/* bl -9356 */
		/* 82150F3Ch case   10:*/		regs.LR = 0x82150F40; return 0x8214EAB0;
		/* 82150F3Ch case   10:*/		return 0x82150F40;
		  /* 82150F40h */ case   11:  		/* mr R4, R22 */
		/* 82150F40h case   11:*/		regs.R4 = regs.R22;
		/* 82150F40h case   11:*/		return 0x82150F44;
		  /* 82150F44h */ case   12:  		/* mr R3, R31 */
		/* 82150F44h case   12:*/		regs.R3 = regs.R31;
		/* 82150F44h case   12:*/		return 0x82150F48;
		  /* 82150F48h */ case   13:  		/* bl -12080 */
		/* 82150F48h case   13:*/		regs.LR = 0x82150F4C; return 0x8214E018;
		/* 82150F48h case   13:*/		return 0x82150F4C;
	}
	return 0x82150F4C;
} // Block from 82150F14h-82150F4Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 82150F4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150F4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150F4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150F4C);
		  /* 82150F4Ch */ case    0:  		/* rlwinm R29, R17, 27, 27, 31 */
		/* 82150F4Ch case    0:*/		cpu::op::rlwinm<0,27,27,31>(regs,&regs.R29,regs.R17);
		/* 82150F4Ch case    0:*/		return 0x82150F50;
		  /* 82150F50h */ case    1:  		/* cmplw CR6, R30, R29 */
		/* 82150F50h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 82150F50h case    1:*/		return 0x82150F54;
		  /* 82150F54h */ case    2:  		/* bc 4, CR6_GT, 44 */
		/* 82150F54h case    2:*/		if ( !regs.CR[6].gt ) { return 0x82150F80;  }
		/* 82150F54h case    2:*/		return 0x82150F58;
		  /* 82150F58h */ case    3:  		/* lis R11, -32253 */
		/* 82150F58h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150F58h case    3:*/		return 0x82150F5C;
		  /* 82150F5Ch */ case    4:  		/* mr R3, R31 */
		/* 82150F5Ch case    4:*/		regs.R3 = regs.R31;
		/* 82150F5Ch case    4:*/		return 0x82150F60;
		  /* 82150F60h */ case    5:  		/* addi R4, R11, 30724 */
		/* 82150F60h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7804);
		/* 82150F60h case    5:*/		return 0x82150F64;
		  /* 82150F64h */ case    6:  		/* bl -12108 */
		/* 82150F64h case    6:*/		regs.LR = 0x82150F68; return 0x8214E018;
		/* 82150F64h case    6:*/		return 0x82150F68;
		  /* 82150F68h */ case    7:  		/* mr R4, R14 */
		/* 82150F68h case    7:*/		regs.R4 = regs.R14;
		/* 82150F68h case    7:*/		return 0x82150F6C;
		  /* 82150F6Ch */ case    8:  		/* mr R3, R31 */
		/* 82150F6Ch case    8:*/		regs.R3 = regs.R31;
		/* 82150F6Ch case    8:*/		return 0x82150F70;
		  /* 82150F70h */ case    9:  		/* bl -9408 */
		/* 82150F70h case    9:*/		regs.LR = 0x82150F74; return 0x8214EAB0;
		/* 82150F70h case    9:*/		return 0x82150F74;
		  /* 82150F74h */ case   10:  		/* mr R4, R22 */
		/* 82150F74h case   10:*/		regs.R4 = regs.R22;
		/* 82150F74h case   10:*/		return 0x82150F78;
		  /* 82150F78h */ case   11:  		/* mr R3, R31 */
		/* 82150F78h case   11:*/		regs.R3 = regs.R31;
		/* 82150F78h case   11:*/		return 0x82150F7C;
		  /* 82150F7Ch */ case   12:  		/* bl -12132 */
		/* 82150F7Ch case   12:*/		regs.LR = 0x82150F80; return 0x8214E018;
		/* 82150F7Ch case   12:*/		return 0x82150F80;
	}
	return 0x82150F80;
} // Block from 82150F4Ch-82150F80h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82150F80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150F80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150F80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150F80);
		  /* 82150F80h */ case    0:  		/* rlwinm R28, R17, 22, 25, 31 */
		/* 82150F80h case    0:*/		cpu::op::rlwinm<0,22,25,31>(regs,&regs.R28,regs.R17);
		/* 82150F80h case    0:*/		return 0x82150F84;
		  /* 82150F84h */ case    1:  		/* cmplw CR6, R28, R29 */
		/* 82150F84h case    1:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R29);
		/* 82150F84h case    1:*/		return 0x82150F88;
		  /* 82150F88h */ case    2:  		/* bc 4, CR6_LT, 44 */
		/* 82150F88h case    2:*/		if ( !regs.CR[6].lt ) { return 0x82150FB4;  }
		/* 82150F88h case    2:*/		return 0x82150F8C;
		  /* 82150F8Ch */ case    3:  		/* lis R11, -32253 */
		/* 82150F8Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150F8Ch case    3:*/		return 0x82150F90;
		  /* 82150F90h */ case    4:  		/* mr R3, R31 */
		/* 82150F90h case    4:*/		regs.R3 = regs.R31;
		/* 82150F90h case    4:*/		return 0x82150F94;
		  /* 82150F94h */ case    5:  		/* addi R4, R11, 30684 */
		/* 82150F94h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x77DC);
		/* 82150F94h case    5:*/		return 0x82150F98;
		  /* 82150F98h */ case    6:  		/* bl -12160 */
		/* 82150F98h case    6:*/		regs.LR = 0x82150F9C; return 0x8214E018;
		/* 82150F98h case    6:*/		return 0x82150F9C;
		  /* 82150F9Ch */ case    7:  		/* mr R4, R14 */
		/* 82150F9Ch case    7:*/		regs.R4 = regs.R14;
		/* 82150F9Ch case    7:*/		return 0x82150FA0;
		  /* 82150FA0h */ case    8:  		/* mr R3, R31 */
		/* 82150FA0h case    8:*/		regs.R3 = regs.R31;
		/* 82150FA0h case    8:*/		return 0x82150FA4;
		  /* 82150FA4h */ case    9:  		/* bl -9460 */
		/* 82150FA4h case    9:*/		regs.LR = 0x82150FA8; return 0x8214EAB0;
		/* 82150FA4h case    9:*/		return 0x82150FA8;
		  /* 82150FA8h */ case   10:  		/* mr R4, R22 */
		/* 82150FA8h case   10:*/		regs.R4 = regs.R22;
		/* 82150FA8h case   10:*/		return 0x82150FAC;
		  /* 82150FACh */ case   11:  		/* mr R3, R31 */
		/* 82150FACh case   11:*/		regs.R3 = regs.R31;
		/* 82150FACh case   11:*/		return 0x82150FB0;
		  /* 82150FB0h */ case   12:  		/* bl -12184 */
		/* 82150FB0h case   12:*/		regs.LR = 0x82150FB4; return 0x8214E018;
		/* 82150FB0h case   12:*/		return 0x82150FB4;
	}
	return 0x82150FB4;
} // Block from 82150F80h-82150FB4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82150FB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150FB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150FB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150FB4);
		  /* 82150FB4h */ case    0:  		/* rlwinm R11, R30, 2, 0, 29 */
		/* 82150FB4h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R30);
		/* 82150FB4h case    0:*/		return 0x82150FB8;
		  /* 82150FB8h */ case    1:  		/* cmplw CR6, R28, R11 */
		/* 82150FB8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 82150FB8h case    1:*/		return 0x82150FBC;
		  /* 82150FBCh */ case    2:  		/* bc 4, CR6_GT, 44 */
		/* 82150FBCh case    2:*/		if ( !regs.CR[6].gt ) { return 0x82150FE8;  }
		/* 82150FBCh case    2:*/		return 0x82150FC0;
		  /* 82150FC0h */ case    3:  		/* lis R11, -32253 */
		/* 82150FC0h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150FC0h case    3:*/		return 0x82150FC4;
		  /* 82150FC4h */ case    4:  		/* mr R3, R31 */
		/* 82150FC4h case    4:*/		regs.R3 = regs.R31;
		/* 82150FC4h case    4:*/		return 0x82150FC8;
		  /* 82150FC8h */ case    5:  		/* addi R4, R11, 30640 */
		/* 82150FC8h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x77B0);
		/* 82150FC8h case    5:*/		return 0x82150FCC;
		  /* 82150FCCh */ case    6:  		/* bl -12212 */
		/* 82150FCCh case    6:*/		regs.LR = 0x82150FD0; return 0x8214E018;
		/* 82150FCCh case    6:*/		return 0x82150FD0;
		  /* 82150FD0h */ case    7:  		/* mr R4, R14 */
		/* 82150FD0h case    7:*/		regs.R4 = regs.R14;
		/* 82150FD0h case    7:*/		return 0x82150FD4;
		  /* 82150FD4h */ case    8:  		/* mr R3, R31 */
		/* 82150FD4h case    8:*/		regs.R3 = regs.R31;
		/* 82150FD4h case    8:*/		return 0x82150FD8;
		  /* 82150FD8h */ case    9:  		/* bl -9512 */
		/* 82150FD8h case    9:*/		regs.LR = 0x82150FDC; return 0x8214EAB0;
		/* 82150FD8h case    9:*/		return 0x82150FDC;
		  /* 82150FDCh */ case   10:  		/* mr R4, R22 */
		/* 82150FDCh case   10:*/		regs.R4 = regs.R22;
		/* 82150FDCh case   10:*/		return 0x82150FE0;
		  /* 82150FE0h */ case   11:  		/* mr R3, R31 */
		/* 82150FE0h case   11:*/		regs.R3 = regs.R31;
		/* 82150FE0h case   11:*/		return 0x82150FE4;
		  /* 82150FE4h */ case   12:  		/* bl -12236 */
		/* 82150FE4h case   12:*/		regs.LR = 0x82150FE8; return 0x8214E018;
		/* 82150FE4h case   12:*/		return 0x82150FE8;
	}
	return 0x82150FE8;
} // Block from 82150FB4h-82150FE8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82150FE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150FE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150FE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150FE8);
		  /* 82150FE8h */ case    0:  		/* lwz R11, <#[R19]> */
		/* 82150FE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 82150FE8h case    0:*/		return 0x82150FEC;
		  /* 82150FECh */ case    1:  		/* mr R5, R21 */
		/* 82150FECh case    1:*/		regs.R5 = regs.R21;
		/* 82150FECh case    1:*/		return 0x82150FF0;
		  /* 82150FF0h */ case    2:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 82150FF0h case    2:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 82150FF0h case    2:*/		return 0x82150FF4;
		  /* 82150FF4h */ case    3:  		/* bc 4, CR0_EQ, 8 */
		/* 82150FF4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82150FFC;  }
		/* 82150FF4h case    3:*/		return 0x82150FF8;
		  /* 82150FF8h */ case    4:  		/* mr R5, R23 */
		/* 82150FF8h case    4:*/		regs.R5 = regs.R23;
		/* 82150FF8h case    4:*/		return 0x82150FFC;
	}
	return 0x82150FFC;
} // Block from 82150FE8h-82150FFCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 82150FFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82150FFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82150FFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82150FFC);
		  /* 82150FFCh */ case    0:  		/* lis R11, -32253 */
		/* 82150FFCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82150FFCh case    0:*/		return 0x82151000;
		  /* 82151000h */ case    1:  		/* mr R3, R31 */
		/* 82151000h case    1:*/		regs.R3 = regs.R31;
		/* 82151000h case    1:*/		return 0x82151004;
		  /* 82151004h */ case    2:  		/* addi R4, R11, 30616 */
		/* 82151004h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7798);
		/* 82151004h case    2:*/		return 0x82151008;
		  /* 82151008h */ case    3:  		/* bl -12272 */
		/* 82151008h case    3:*/		regs.LR = 0x8215100C; return 0x8214E018;
		/* 82151008h case    3:*/		return 0x8215100C;
		  /* 8215100Ch */ case    4:  		/* mr R4, R14 */
		/* 8215100Ch case    4:*/		regs.R4 = regs.R14;
		/* 8215100Ch case    4:*/		return 0x82151010;
		  /* 82151010h */ case    5:  		/* mr R3, R31 */
		/* 82151010h case    5:*/		regs.R3 = regs.R31;
		/* 82151010h case    5:*/		return 0x82151014;
		  /* 82151014h */ case    6:  		/* bl -9572 */
		/* 82151014h case    6:*/		regs.LR = 0x82151018; return 0x8214EAB0;
		/* 82151014h case    6:*/		return 0x82151018;
		  /* 82151018h */ case    7:  		/* mr R4, R22 */
		/* 82151018h case    7:*/		regs.R4 = regs.R22;
		/* 82151018h case    7:*/		return 0x8215101C;
		  /* 8215101Ch */ case    8:  		/* mr R3, R31 */
		/* 8215101Ch case    8:*/		regs.R3 = regs.R31;
		/* 8215101Ch case    8:*/		return 0x82151020;
		  /* 82151020h */ case    9:  		/* bl -12296 */
		/* 82151020h case    9:*/		regs.LR = 0x82151024; return 0x8214E018;
		/* 82151020h case    9:*/		return 0x82151024;
		  /* 82151024h */ case   10:  		/* mr R4, R18 */
		/* 82151024h case   10:*/		regs.R4 = regs.R18;
		/* 82151024h case   10:*/		return 0x82151028;
		  /* 82151028h */ case   11:  		/* mr R3, R31 */
		/* 82151028h case   11:*/		regs.R3 = regs.R31;
		/* 82151028h case   11:*/		return 0x8215102C;
		  /* 8215102Ch */ case   12:  		/* bl -9596 */
		/* 8215102Ch case   12:*/		regs.LR = 0x82151030; return 0x8214EAB0;
		/* 8215102Ch case   12:*/		return 0x82151030;
	}
	return 0x82151030;
} // Block from 82150FFCh-82151030h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82151030h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151030);
		  /* 82151030h */ case    0:  		/* mr R4, R27 */
		/* 82151030h case    0:*/		regs.R4 = regs.R27;
		/* 82151030h case    0:*/		return 0x82151034;
		  /* 82151034h */ case    1:  		/* mr R3, R31 */
		/* 82151034h case    1:*/		regs.R3 = regs.R31;
		/* 82151034h case    1:*/		return 0x82151038;
		  /* 82151038h */ case    2:  		/* bl -9608 */
		/* 82151038h case    2:*/		regs.LR = 0x8215103C; return 0x8214EAB0;
		/* 82151038h case    2:*/		return 0x8215103C;
		  /* 8215103Ch */ case    3:  		/* li R19, 0 */
		/* 8215103Ch case    3:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 8215103Ch case    3:*/		return 0x82151040;
		  /* 82151040h */ case    4:  		/* cmplwi CR6, R20, 0 */
		/* 82151040h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 82151040h case    4:*/		return 0x82151044;
		  /* 82151044h */ case    5:  		/* bc 12, CR6_EQ, 356 */
		/* 82151044h case    5:*/		if ( regs.CR[6].eq ) { return 0x821511A8;  }
		/* 82151044h case    5:*/		return 0x82151048;
		  /* 82151048h */ case    6:  		/* lhz R11, <#[R25 + 24]> */
		/* 82151048h case    6:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000018) );
		/* 82151048h case    6:*/		return 0x8215104C;
		  /* 8215104Ch */ case    7:  		/* rlwinm. R15, R17, 27, 27, 31 */
		/* 8215104Ch case    7:*/		cpu::op::rlwinm<1,27,27,31>(regs,&regs.R15,regs.R17);
		/* 8215104Ch case    7:*/		return 0x82151050;
		  /* 82151050h */ case    8:  		/* lhz R10, <#[R25 + 26]> */
		/* 82151050h case    8:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R25 + 0x0000001A) );
		/* 82151050h case    8:*/		return 0x82151054;
		  /* 82151054h */ case    9:  		/* mr R29, R16 */
		/* 82151054h case    9:*/		regs.R29 = regs.R16;
		/* 82151054h case    9:*/		return 0x82151058;
		  /* 82151058h */ case   10:  		/* nor R17, R11, R11 */
		/* 82151058h case   10:*/		cpu::op::nor<0>(regs,&regs.R17,regs.R11,regs.R11);
		/* 82151058h case   10:*/		return 0x8215105C;
		  /* 8215105Ch */ case   11:  		/* nor R16, R10, R10 */
		/* 8215105Ch case   11:*/		cpu::op::nor<0>(regs,&regs.R16,regs.R10,regs.R10);
		/* 8215105Ch case   11:*/		return 0x82151060;
		  /* 82151060h */ case   12:  		/* li R23, 0 */
		/* 82151060h case   12:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 82151060h case   12:*/		return 0x82151064;
		  /* 82151064h */ case   13:  		/* bc 12, CR0_EQ, 784 */
		/* 82151064h case   13:*/		if ( regs.CR[0].eq ) { return 0x82151374;  }
		/* 82151064h case   13:*/		return 0x82151068;
		  /* 82151068h */ case   14:  		/* li R11, 1 */
		/* 82151068h case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82151068h case   14:*/		return 0x8215106C;
		  /* 8215106Ch */ case   15:  		/* lis R10, -32253 */
		/* 8215106Ch case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 8215106Ch case   15:*/		return 0x82151070;
		  /* 82151070h */ case   16:  		/* stb R11, <#[R1 + 80]> */
		/* 82151070h case   16:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82151070h case   16:*/		return 0x82151074;
		  /* 82151074h */ case   17:  		/* lis R11, -32253 */
		/* 82151074h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82151074h case   17:*/		return 0x82151078;
		  /* 82151078h */ case   18:  		/* lis R9, -32253 */
		/* 82151078h case   18:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 82151078h case   18:*/		return 0x8215107C;
		  /* 8215107Ch */ case   19:  		/* lis R8, -32253 */
		/* 8215107Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 8215107Ch case   19:*/		return 0x82151080;
		  /* 82151080h */ case   20:  		/* lis R7, -32253 */
		/* 82151080h case   20:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8203);
		/* 82151080h case   20:*/		return 0x82151084;
		  /* 82151084h */ case   21:  		/* lis R6, -32253 */
		/* 82151084h case   21:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8203);
		/* 82151084h case   21:*/		return 0x82151088;
		  /* 82151088h */ case   22:  		/* lis R5, -32253 */
		/* 82151088h case   22:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF8203);
		/* 82151088h case   22:*/		return 0x8215108C;
		  /* 8215108Ch */ case   23:  		/* lis R4, -32217 */
		/* 8215108Ch case   23:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFF8227);
		/* 8215108Ch case   23:*/		return 0x82151090;
		  /* 82151090h */ case   24:  		/* addi R25, R11, 28340 */
		/* 82151090h case   24:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x6EB4);
		/* 82151090h case   24:*/		return 0x82151094;
		  /* 82151094h */ case   25:  		/* addi R21, R10, 30612 */
		/* 82151094h case   25:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R10,0x7794);
		/* 82151094h case   25:*/		return 0x82151098;
		  /* 82151098h */ case   26:  		/* addi R22, R9, 30604 */
		/* 82151098h case   26:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R9,0x778C);
		/* 82151098h case   26:*/		return 0x8215109C;
		  /* 8215109Ch */ case   27:  		/* addi R19, R8, 30584 */
		/* 8215109Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R8,0x7778);
		/* 8215109Ch case   27:*/		return 0x821510A0;
		  /* 821510A0h */ case   28:  		/* addi R18, R7, 30572 */
		/* 821510A0h case   28:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R7,0x776C);
		/* 821510A0h case   28:*/		return 0x821510A4;
		  /* 821510A4h */ case   29:  		/* addi R20, R6, 26668 */
		/* 821510A4h case   29:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R6,0x682C);
		/* 821510A4h case   29:*/		return 0x821510A8;
		  /* 821510A8h */ case   30:  		/* addi R24, R5, 30564 */
		/* 821510A8h case   30:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R5,0x7764);
		/* 821510A8h case   30:*/		return 0x821510AC;
		  /* 821510ACh */ case   31:  		/* addi R28, R4, 17440 */
		/* 821510ACh case   31:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R4,0x4420);
		/* 821510ACh case   31:*/		return 0x821510B0;
		  /* 821510B0h */ case   32:  		/* li R11, 1 */
		/* 821510B0h case   32:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821510B0h case   32:*/		return 0x821510B4;
		  /* 821510B4h */ case   33:  		/* lbz R14, <#[R29 + 3]> */
		/* 821510B4h case   33:*/		cpu::mem::load8z( regs, &regs.R14, (uint32)(regs.R29 + 0x00000003) );
		/* 821510B4h case   33:*/		return 0x821510B8;
		  /* 821510B8h */ case   34:  		/* mr R4, R25 */
		/* 821510B8h case   34:*/		regs.R4 = regs.R25;
		/* 821510B8h case   34:*/		return 0x821510BC;
		  /* 821510BCh */ case   35:  		/* slw R11, R11, R23 */
		/* 821510BCh case   35:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R23);
		/* 821510BCh case   35:*/		return 0x821510C0;
		  /* 821510C0h */ case   36:  		/* mr R3, R31 */
		/* 821510C0h case   36:*/		regs.R3 = regs.R31;
		/* 821510C0h case   36:*/		return 0x821510C4;
		  /* 821510C4h */ case   37:  		/* rlwinm R30, R14, 0, 28, 31 */
		/* 821510C4h case   37:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R30,regs.R14);
		/* 821510C4h case   37:*/		return 0x821510C8;
		  /* 821510C8h */ case   38:  		/* and R27, R11, R17 */
		/* 821510C8h case   38:*/		cpu::op::and<0>(regs,&regs.R27,regs.R11,regs.R17);
		/* 821510C8h case   38:*/		return 0x821510CC;
		  /* 821510CCh */ case   39:  		/* and R26, R11, R16 */
		/* 821510CCh case   39:*/		cpu::op::and<0>(regs,&regs.R26,regs.R11,regs.R16);
		/* 821510CCh case   39:*/		return 0x821510D0;
		  /* 821510D0h */ case   40:  		/* bl -9760 */
		/* 821510D0h case   40:*/		regs.LR = 0x821510D4; return 0x8214EAB0;
		/* 821510D0h case   40:*/		return 0x821510D4;
		  /* 821510D4h */ case   41:  		/* rlwinm R11, R14, 30, 2, 29 */
		/* 821510D4h case   41:*/		cpu::op::rlwinm<0,30,2,29>(regs,&regs.R11,regs.R14);
		/* 821510D4h case   41:*/		return 0x821510D8;
		  /* 821510D8h */ case   42:  		/* mr R4, R24 */
		/* 821510D8h case   42:*/		regs.R4 = regs.R24;
		/* 821510D8h case   42:*/		return 0x821510DC;
		  /* 821510DCh */ case   43:  		/* mr R3, R31 */
		/* 821510DCh case   43:*/		regs.R3 = regs.R31;
		/* 821510DCh case   43:*/		return 0x821510E0;
		  /* 821510E0h */ case   44:  		/* lwzx R5, <#[R11 + R28]> */
		/* 821510E0h case   44:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R28 + 0x00000000) );
		/* 821510E0h case   44:*/		return 0x821510E4;
		  /* 821510E4h */ case   45:  		/* bl -12492 */
		/* 821510E4h case   45:*/		regs.LR = 0x821510E8; return 0x8214E018;
		/* 821510E4h case   45:*/		return 0x821510E8;
		  /* 821510E8h */ case   46:  		/* cmplwi CR6, R30, 0 */
		/* 821510E8h case   46:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821510E8h case   46:*/		return 0x821510EC;
		  /* 821510ECh */ case   47:  		/* bc 12, CR6_EQ, 20 */
		/* 821510ECh case   47:*/		if ( regs.CR[6].eq ) { return 0x82151100;  }
		/* 821510ECh case   47:*/		return 0x821510F0;
		  /* 821510F0h */ case   48:  		/* mr R4, R20 */
		/* 821510F0h case   48:*/		regs.R4 = regs.R20;
		/* 821510F0h case   48:*/		return 0x821510F4;
		  /* 821510F4h */ case   49:  		/* mr R5, R30 */
		/* 821510F4h case   49:*/		regs.R5 = regs.R30;
		/* 821510F4h case   49:*/		return 0x821510F8;
		  /* 821510F8h */ case   50:  		/* mr R3, R31 */
		/* 821510F8h case   50:*/		regs.R3 = regs.R31;
		/* 821510F8h case   50:*/		return 0x821510FC;
		  /* 821510FCh */ case   51:  		/* bl -12516 */
		/* 821510FCh case   51:*/		regs.LR = 0x82151100; return 0x8214E018;
		/* 821510FCh case   51:*/		return 0x82151100;
	}
	return 0x82151100;
} // Block from 82151030h-82151100h (52 instructions)

//////////////////////////////////////////////////////
// Block at 82151100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151100);
		  /* 82151100h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82151100h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82151100h case    0:*/		return 0x82151104;
		  /* 82151104h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82151104h case    1:*/		if ( regs.CR[6].eq ) { return 0x82151110;  }
		/* 82151104h case    1:*/		return 0x82151108;
		  /* 82151108h */ case    2:  		/* mr R4, R18 */
		/* 82151108h case    2:*/		regs.R4 = regs.R18;
		/* 82151108h case    2:*/		return 0x8215110C;
		  /* 8215110Ch */ case    3:  		/* b 16 */
		/* 8215110Ch case    3:*/		return 0x8215111C;
		/* 8215110Ch case    3:*/		return 0x82151110;
	}
	return 0x82151110;
} // Block from 82151100h-82151110h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82151110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151110);
		  /* 82151110h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 82151110h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82151110h case    0:*/		return 0x82151114;
		  /* 82151114h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 82151114h case    1:*/		if ( regs.CR[6].eq ) { return 0x82151124;  }
		/* 82151114h case    1:*/		return 0x82151118;
		  /* 82151118h */ case    2:  		/* mr R4, R19 */
		/* 82151118h case    2:*/		regs.R4 = regs.R19;
		/* 82151118h case    2:*/		return 0x8215111C;
	}
	return 0x8215111C;
} // Block from 82151110h-8215111Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215111Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215111C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215111C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215111C);
		  /* 8215111Ch */ case    0:  		/* mr R3, R31 */
		/* 8215111Ch case    0:*/		regs.R3 = regs.R31;
		/* 8215111Ch case    0:*/		return 0x82151120;
		  /* 82151120h */ case    1:  		/* bl -12552 */
		/* 82151120h case    1:*/		regs.LR = 0x82151124; return 0x8214E018;
		/* 82151120h case    1:*/		return 0x82151124;
	}
	return 0x82151124;
} // Block from 8215111Ch-82151124h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82151124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151124);
		  /* 82151124h */ case    0:  		/* mr R3, R31 */
		/* 82151124h case    0:*/		regs.R3 = regs.R31;
		/* 82151124h case    0:*/		return 0x82151128;
		  /* 82151128h */ case    1:  		/* lwz R4, <#[R1 + 88]> */
		/* 82151128h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 82151128h case    1:*/		return 0x8215112C;
		  /* 8215112Ch */ case    2:  		/* bl -9852 */
		/* 8215112Ch case    2:*/		regs.LR = 0x82151130; return 0x8214EAB0;
		/* 8215112Ch case    2:*/		return 0x82151130;
		  /* 82151130h */ case    3:  		/* lwz R11, <#[R29]> */
		/* 82151130h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82151130h case    3:*/		return 0x82151134;
		  /* 82151134h */ case    4:  		/* mr R4, R22 */
		/* 82151134h case    4:*/		regs.R4 = regs.R22;
		/* 82151134h case    4:*/		return 0x82151138;
		  /* 82151138h */ case    5:  		/* mr R3, R31 */
		/* 82151138h case    5:*/		regs.R3 = regs.R31;
		/* 82151138h case    5:*/		return 0x8215113C;
		  /* 8215113Ch */ case    6:  		/* rlwinm R5, R11, 24, 28, 31 */
		/* 8215113Ch case    6:*/		cpu::op::rlwinm<0,24,28,31>(regs,&regs.R5,regs.R11);
		/* 8215113Ch case    6:*/		return 0x82151140;
		  /* 82151140h */ case    7:  		/* bl -12584 */
		/* 82151140h case    7:*/		regs.LR = 0x82151144; return 0x8214E018;
		/* 82151140h case    7:*/		return 0x82151144;
		  /* 82151144h */ case    8:  		/* lwz R11, <#[R29]> */
		/* 82151144h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82151144h case    8:*/		return 0x82151148;
		  /* 82151148h */ case    9:  		/* rlwinm R11, R11, 20, 28, 31 */
		/* 82151148h case    9:*/		cpu::op::rlwinm<0,20,28,31>(regs,&regs.R11,regs.R11);
		/* 82151148h case    9:*/		return 0x8215114C;
		  /* 8215114Ch */ case   10:  		/* cmplwi CR6, R11, 15 */
		/* 8215114Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000F);
		/* 8215114Ch case   10:*/		return 0x82151150;
		  /* 82151150h */ case   11:  		/* bc 12, CR6_EQ, 28 */
		/* 82151150h case   11:*/		if ( regs.CR[6].eq ) { return 0x8215116C;  }
		/* 82151150h case   11:*/		return 0x82151154;
		  /* 82151154h */ case   12:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82151154h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82151154h case   12:*/		return 0x82151158;
		  /* 82151158h */ case   13:  		/* addi R10, R28, 64 */
		/* 82151158h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R28,0x40);
		/* 82151158h case   13:*/		return 0x8215115C;
		  /* 8215115Ch */ case   14:  		/* mr R4, R21 */
		/* 8215115Ch case   14:*/		regs.R4 = regs.R21;
		/* 8215115Ch case   14:*/		return 0x82151160;
		  /* 82151160h */ case   15:  		/* mr R3, R31 */
		/* 82151160h case   15:*/		regs.R3 = regs.R31;
		/* 82151160h case   15:*/		return 0x82151164;
		  /* 82151164h */ case   16:  		/* lwzx R5, <#[R11 + R10]> */
		/* 82151164h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82151164h case   16:*/		return 0x82151168;
		  /* 82151168h */ case   17:  		/* bl -12624 */
		/* 82151168h case   17:*/		regs.LR = 0x8215116C; return 0x8214E018;
		/* 82151168h case   17:*/		return 0x8215116C;
	}
	return 0x8215116C;
} // Block from 82151124h-8215116Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 8215116Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215116C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215116C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215116C);
		  /* 8215116Ch */ case    0:  		/* lwz R14, <#[R1 + 92]> */
		/* 8215116Ch case    0:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R1 + 0x0000005C) );
		/* 8215116Ch case    0:*/		return 0x82151170;
		  /* 82151170h */ case    1:  		/* mr R3, R31 */
		/* 82151170h case    1:*/		regs.R3 = regs.R31;
		/* 82151170h case    1:*/		return 0x82151174;
		  /* 82151174h */ case    2:  		/* mr R4, R14 */
		/* 82151174h case    2:*/		regs.R4 = regs.R14;
		/* 82151174h case    2:*/		return 0x82151178;
		  /* 82151178h */ case    3:  		/* bl -9928 */
		/* 82151178h case    3:*/		regs.LR = 0x8215117C; return 0x8214EAB0;
		/* 82151178h case    3:*/		return 0x8215117C;
		  /* 8215117Ch */ case    4:  		/* mr R3, R31 */
		/* 8215117Ch case    4:*/		regs.R3 = regs.R31;
		/* 8215117Ch case    4:*/		return 0x82151180;
		  /* 82151180h */ case    5:  		/* lwz R4, <#[R1 + 84]> */
		/* 82151180h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000054) );
		/* 82151180h case    5:*/		return 0x82151184;
		  /* 82151184h */ case    6:  		/* bl -12652 */
		/* 82151184h case    6:*/		regs.LR = 0x82151188; return 0x8214E018;
		/* 82151184h case    6:*/		return 0x82151188;
		  /* 82151188h */ case    7:  		/* addi R23, R23, 1 */
		/* 82151188h case    7:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 82151188h case    7:*/		return 0x8215118C;
		  /* 8215118Ch */ case    8:  		/* addi R29, R29, 4 */
		/* 8215118Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8215118Ch case    8:*/		return 0x82151190;
		  /* 82151190h */ case    9:  		/* cmplw CR6, R23, R15 */
		/* 82151190h case    9:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R15);
		/* 82151190h case    9:*/		return 0x82151194;
		  /* 82151194h */ case   10:  		/* bc 12, CR6_LT, -228 */
		/* 82151194h case   10:*/		if ( regs.CR[6].lt ) { return 0x821510B0;  }
		/* 82151194h case   10:*/		return 0x82151198;
		  /* 82151198h */ case   11:  		/* lbz R19, <#[R1 + 80]> */
		/* 82151198h case   11:*/		cpu::mem::load8z( regs, &regs.R19, (uint32)(regs.R1 + 0x00000050) );
		/* 82151198h case   11:*/		return 0x8215119C;
		  /* 8215119Ch */ case   12:  		/* lwz R22, <#[R1 + 84]> */
		/* 8215119Ch case   12:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x00000054) );
		/* 8215119Ch case   12:*/		return 0x821511A0;
		  /* 821511A0h */ case   13:  		/* lwz R18, <#[R1 + 88]> */
		/* 821511A0h case   13:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x00000058) );
		/* 821511A0h case   13:*/		return 0x821511A4;
		  /* 821511A4h */ case   14:  		/* b 464 */
		/* 821511A4h case   14:*/		return 0x82151374;
		/* 821511A4h case   14:*/		return 0x821511A8;
	}
	return 0x821511A8;
} // Block from 8215116Ch-821511A8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821511A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821511A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821511A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821511A8);
		  /* 821511A8h */ case    0:  		/* lwz R11, <#[R25 + 24]> */
		/* 821511A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000018) );
		/* 821511A8h case    0:*/		return 0x821511AC;
		  /* 821511ACh */ case    1:  		/* lis R10, -32253 */
		/* 821511ACh case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821511ACh case    1:*/		return 0x821511B0;
		  /* 821511B0h */ case    2:  		/* lis R9, -32253 */
		/* 821511B0h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 821511B0h case    2:*/		return 0x821511B4;
		  /* 821511B4h */ case    3:  		/* lis R8, -32253 */
		/* 821511B4h case    3:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8203);
		/* 821511B4h case    3:*/		return 0x821511B8;
		  /* 821511B8h */ case    4:  		/* lis R7, -32253 */
		/* 821511B8h case    4:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8203);
		/* 821511B8h case    4:*/		return 0x821511BC;
		  /* 821511BCh */ case    5:  		/* lis R6, -32217 */
		/* 821511BCh case    5:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8227);
		/* 821511BCh case    5:*/		return 0x821511C0;
		  /* 821511C0h */ case    6:  		/* mr R30, R16 */
		/* 821511C0h case    6:*/		regs.R30 = regs.R16;
		/* 821511C0h case    6:*/		return 0x821511C4;
		  /* 821511C4h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821511C4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821511C4h case    7:*/		return 0x821511C8;
		  /* 821511C8h */ case    8:  		/* addi R24, R10, 28340 */
		/* 821511C8h case    8:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R10,0x6EB4);
		/* 821511C8h case    8:*/		return 0x821511CC;
		  /* 821511CCh */ case    9:  		/* addi R21, R9, 30612 */
		/* 821511CCh case    9:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R9,0x7794);
		/* 821511CCh case    9:*/		return 0x821511D0;
		  /* 821511D0h */ case   10:  		/* addi R20, R8, 26668 */
		/* 821511D0h case   10:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R8,0x682C);
		/* 821511D0h case   10:*/		return 0x821511D4;
		  /* 821511D4h */ case   11:  		/* addi R23, R7, 30564 */
		/* 821511D4h case   11:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R7,0x7764);
		/* 821511D4h case   11:*/		return 0x821511D8;
		  /* 821511D8h */ case   12:  		/* addi R26, R6, 17440 */
		/* 821511D8h case   12:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R6,0x4420);
		/* 821511D8h case   12:*/		return 0x821511DC;
		  /* 821511DCh */ case   13:  		/* bc 12, CR6_EQ, 192 */
		/* 821511DCh case   13:*/		if ( regs.CR[6].eq ) { return 0x8215129C;  }
		/* 821511DCh case   13:*/		return 0x821511E0;
		  /* 821511E0h */ case   14:  		/* mr R28, R11 */
		/* 821511E0h case   14:*/		regs.R28 = regs.R11;
		/* 821511E0h case   14:*/		return 0x821511E4;
		  /* 821511E4h */ case   15:  		/* lis R11, -32253 */
		/* 821511E4h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821511E4h case   15:*/		return 0x821511E8;
	}
	return 0x821511E8;
} // Block from 821511A8h-821511E8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821511E8h
// Function '?PrintOpcode@OutStream@XGRAPHICS@@QAAXPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821511E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821511E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821511E8);
		  /* 821511E8h */ case    0:  		/* mr R19, R15 */
		/* 821511E8h case    0:*/		regs.R19 = regs.R15;
		/* 821511E8h case    0:*/		return 0x821511EC;
		  /* 821511ECh */ case    1:  		/* addi R27, R11, 30604 */
		/* 821511ECh case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x778C);
		/* 821511ECh case    1:*/		return 0x821511F0;
		  /* 821511F0h */ case    2:  		/* lbz R15, <#[R30 + 3]> */
		/* 821511F0h case    2:*/		cpu::mem::load8z( regs, &regs.R15, (uint32)(regs.R30 + 0x00000003) );
		/* 821511F0h case    2:*/		return 0x821511F4;
		  /* 821511F4h */ case    3:  		/* mr R4, R24 */
		/* 821511F4h case    3:*/		regs.R4 = regs.R24;
		/* 821511F4h case    3:*/		return 0x821511F8;
		  /* 821511F8h */ case    4:  		/* mr R3, R31 */
		/* 821511F8h case    4:*/		regs.R3 = regs.R31;
		/* 821511F8h case    4:*/		return 0x821511FC;
		  /* 821511FCh */ case    5:  		/* rlwinm R29, R15, 0, 28, 31 */
		/* 821511FCh case    5:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R29,regs.R15);
		/* 821511FCh case    5:*/		return 0x82151200;
		  /* 82151200h */ case    6:  		/* bl -10064 */
		/* 82151200h case    6:*/		regs.LR = 0x82151204; return 0x8214EAB0;
		/* 82151200h case    6:*/		return 0x82151204;
		  /* 82151204h */ case    7:  		/* rlwinm R11, R15, 30, 2, 29 */
		/* 82151204h case    7:*/		cpu::op::rlwinm<0,30,2,29>(regs,&regs.R11,regs.R15);
		/* 82151204h case    7:*/		return 0x82151208;
		  /* 82151208h */ case    8:  		/* mr R4, R23 */
		/* 82151208h case    8:*/		regs.R4 = regs.R23;
		/* 82151208h case    8:*/		return 0x8215120C;
		  /* 8215120Ch */ case    9:  		/* mr R3, R31 */
		/* 8215120Ch case    9:*/		regs.R3 = regs.R31;
		/* 8215120Ch case    9:*/		return 0x82151210;
		  /* 82151210h */ case   10:  		/* lwzx R5, <#[R11 + R26]> */
		/* 82151210h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 82151210h case   10:*/		return 0x82151214;
		  /* 82151214h */ case   11:  		/* bl -12796 */
		/* 82151214h case   11:*/		regs.LR = 0x82151218; return 0x8214E018;
		/* 82151214h case   11:*/		return 0x82151218;
		  /* 82151218h */ case   12:  		/* cmplwi CR6, R29, 0 */
		/* 82151218h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82151218h case   12:*/		return 0x8215121C;
		  /* 8215121Ch */ case   13:  		/* bc 12, CR6_EQ, 20 */
		/* 8215121Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x82151230;  }
		/* 8215121Ch case   13:*/		return 0x82151220;
		  /* 82151220h */ case   14:  		/* mr R4, R20 */
		/* 82151220h case   14:*/		regs.R4 = regs.R20;
		/* 82151220h case   14:*/		return 0x82151224;
		  /* 82151224h */ case   15:  		/* mr R5, R29 */
		/* 82151224h case   15:*/		regs.R5 = regs.R29;
		/* 82151224h case   15:*/		return 0x82151228;
		  /* 82151228h */ case   16:  		/* mr R3, R31 */
		/* 82151228h case   16:*/		regs.R3 = regs.R31;
		/* 82151228h case   16:*/		return 0x8215122C;
		  /* 8215122Ch */ case   17:  		/* bl -12820 */
		/* 8215122Ch case   17:*/		regs.LR = 0x82151230; return 0x8214E018;
		/* 8215122Ch case   17:*/		return 0x82151230;
	}
	return 0x82151230;
} // Block from 821511E8h-82151230h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82151230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151230);
		  /* 82151230h */ case    0:  		/* mr R4, R18 */
		/* 82151230h case    0:*/		regs.R4 = regs.R18;
		/* 82151230h case    0:*/		return 0x82151234;
		  /* 82151234h */ case    1:  		/* mr R3, R31 */
		/* 82151234h case    1:*/		regs.R3 = regs.R31;
		/* 82151234h case    1:*/		return 0x82151238;
		  /* 82151238h */ case    2:  		/* bl -10120 */
		/* 82151238h case    2:*/		regs.LR = 0x8215123C; return 0x8214EAB0;
		/* 82151238h case    2:*/		return 0x8215123C;
		  /* 8215123Ch */ case    3:  		/* lwz R11, <#[R30]> */
		/* 8215123Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8215123Ch case    3:*/		return 0x82151240;
		  /* 82151240h */ case    4:  		/* mr R4, R27 */
		/* 82151240h case    4:*/		regs.R4 = regs.R27;
		/* 82151240h case    4:*/		return 0x82151244;
		  /* 82151244h */ case    5:  		/* mr R3, R31 */
		/* 82151244h case    5:*/		regs.R3 = regs.R31;
		/* 82151244h case    5:*/		return 0x82151248;
		  /* 82151248h */ case    6:  		/* rlwinm R5, R11, 24, 31, 31 */
		/* 82151248h case    6:*/		cpu::op::rlwinm<0,24,31,31>(regs,&regs.R5,regs.R11);
		/* 82151248h case    6:*/		return 0x8215124C;
		  /* 8215124Ch */ case    7:  		/* bl -12852 */
		/* 8215124Ch case    7:*/		regs.LR = 0x82151250; return 0x8214E018;
		/* 8215124Ch case    7:*/		return 0x82151250;
	}
	return 0x82151250;
} // Block from 82151230h-82151250h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82151250h
// Function '?DisassembleProgramControl@XGRAPHICS@@YAXPAVOutStream@1@HHHTGPU_PROGRAMCONTROL@@TGPU_CONTEXTMISC@@PA_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151250);
		  /* 82151250h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 82151250h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82151250h case    0:*/		return 0x82151254;
		  /* 82151254h */ case    1:  		/* rlwinm R11, R11, 23, 28, 31 */
		/* 82151254h case    1:*/		cpu::op::rlwinm<0,23,28,31>(regs,&regs.R11,regs.R11);
		/* 82151254h case    1:*/		return 0x82151258;
		  /* 82151258h */ case    2:  		/* cmplwi CR6, R11, 15 */
		/* 82151258h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000F);
		/* 82151258h case    2:*/		return 0x8215125C;
		  /* 8215125Ch */ case    3:  		/* bc 12, CR6_EQ, 28 */
		/* 8215125Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82151278;  }
		/* 8215125Ch case    3:*/		return 0x82151260;
		  /* 82151260h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82151260h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82151260h case    4:*/		return 0x82151264;
		  /* 82151264h */ case    5:  		/* addi R10, R26, 64 */
		/* 82151264h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R26,0x40);
		/* 82151264h case    5:*/		return 0x82151268;
		  /* 82151268h */ case    6:  		/* mr R4, R21 */
		/* 82151268h case    6:*/		regs.R4 = regs.R21;
		/* 82151268h case    6:*/		return 0x8215126C;
		  /* 8215126Ch */ case    7:  		/* mr R3, R31 */
		/* 8215126Ch case    7:*/		regs.R3 = regs.R31;
		/* 8215126Ch case    7:*/		return 0x82151270;
		  /* 82151270h */ case    8:  		/* lwzx R5, <#[R11 + R10]> */
		/* 82151270h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82151270h case    8:*/		return 0x82151274;
		  /* 82151274h */ case    9:  		/* bl -12892 */
		/* 82151274h case    9:*/		regs.LR = 0x82151278; return 0x8214E018;
		/* 82151274h case    9:*/		return 0x82151278;
	}
	return 0x82151278;
} // Block from 82151250h-82151278h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82151278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151278);
		  /* 82151278h */ case    0:  		/* mr R4, R14 */
		/* 82151278h case    0:*/		regs.R4 = regs.R14;
		/* 82151278h case    0:*/		return 0x8215127C;
		  /* 8215127Ch */ case    1:  		/* mr R3, R31 */
		/* 8215127Ch case    1:*/		regs.R3 = regs.R31;
		/* 8215127Ch case    1:*/		return 0x82151280;
		  /* 82151280h */ case    2:  		/* bl -10192 */
		/* 82151280h case    2:*/		regs.LR = 0x82151284; return 0x8214EAB0;
		/* 82151280h case    2:*/		return 0x82151284;
		  /* 82151284h */ case    3:  		/* mr R4, R22 */
		/* 82151284h case    3:*/		regs.R4 = regs.R22;
		/* 82151284h case    3:*/		return 0x82151288;
		  /* 82151288h */ case    4:  		/* mr R3, R31 */
		/* 82151288h case    4:*/		regs.R3 = regs.R31;
		/* 82151288h case    4:*/		return 0x8215128C;
		  /* 8215128Ch */ case    5:  		/* bl -12916 */
		/* 8215128Ch case    5:*/		regs.LR = 0x82151290; return 0x8214E018;
		/* 8215128Ch case    5:*/		return 0x82151290;
		  /* 82151290h */ case    6:  		/* addic. R28, R28, -1 */
		/* 82151290h case    6:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 82151290h case    6:*/		return 0x82151294;
		  /* 82151294h */ case    7:  		/* addi R30, R30, 4 */
		/* 82151294h case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 82151294h case    7:*/		return 0x82151298;
		  /* 82151298h */ case    8:  		/* bc 4, CR0_EQ, -168 */
		/* 82151298h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821511F0;  }
		/* 82151298h case    8:*/		return 0x8215129C;
	}
	return 0x8215129C;
} // Block from 82151278h-8215129Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215129Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215129C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215129C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215129C);
		  /* 8215129Ch */ case    0:  		/* lwz R10, <#[R25 + 28]> */
		/* 8215129Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x0000001C) );
		/* 8215129Ch case    0:*/		return 0x821512A0;
		  /* 821512A0h */ case    1:  		/* rlwinm. R11, R17, 27, 27, 31 */
		/* 821512A0h case    1:*/		cpu::op::rlwinm<1,27,27,31>(regs,&regs.R11,regs.R17);
		/* 821512A0h case    1:*/		return 0x821512A4;
		  /* 821512A4h */ case    2:  		/* lwz R9, <#[R25 + 24]> */
		/* 821512A4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000018) );
		/* 821512A4h case    2:*/		return 0x821512A8;
		  /* 821512A8h */ case    3:  		/* add R10, R10, R9 */
		/* 821512A8h case    3:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821512A8h case    3:*/		return 0x821512AC;
		  /* 821512ACh */ case    4:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821512ACh case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821512ACh case    4:*/		return 0x821512B0;
		  /* 821512B0h */ case    5:  		/* add R30, R10, R16 */
		/* 821512B0h case    5:*/		cpu::op::add<0>(regs,&regs.R30,regs.R10,regs.R16);
		/* 821512B0h case    5:*/		return 0x821512B4;
		  /* 821512B4h */ case    6:  		/* bc 12, CR0_EQ, 192 */
		/* 821512B4h case    6:*/		if ( regs.CR[0].eq ) { return 0x82151374;  }
		/* 821512B4h case    6:*/		return 0x821512B8;
		  /* 821512B8h */ case    7:  		/* mr R28, R11 */
		/* 821512B8h case    7:*/		regs.R28 = regs.R11;
		/* 821512B8h case    7:*/		return 0x821512BC;
		  /* 821512BCh */ case    8:  		/* lis R11, -32253 */
		/* 821512BCh case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821512BCh case    8:*/		return 0x821512C0;
		  /* 821512C0h */ case    9:  		/* li R19, 1 */
		/* 821512C0h case    9:*/		cpu::op::li<0>(regs,&regs.R19,0x1);
		/* 821512C0h case    9:*/		return 0x821512C4;
		  /* 821512C4h */ case   10:  		/* addi R27, R11, 30556 */
		/* 821512C4h case   10:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x775C);
		/* 821512C4h case   10:*/		return 0x821512C8;
		  /* 821512C8h */ case   11:  		/* lbz R25, <#[R30 + 3]> */
		/* 821512C8h case   11:*/		cpu::mem::load8z( regs, &regs.R25, (uint32)(regs.R30 + 0x00000003) );
		/* 821512C8h case   11:*/		return 0x821512CC;
		  /* 821512CCh */ case   12:  		/* mr R4, R24 */
		/* 821512CCh case   12:*/		regs.R4 = regs.R24;
		/* 821512CCh case   12:*/		return 0x821512D0;
		  /* 821512D0h */ case   13:  		/* mr R3, R31 */
		/* 821512D0h case   13:*/		regs.R3 = regs.R31;
		/* 821512D0h case   13:*/		return 0x821512D4;
		  /* 821512D4h */ case   14:  		/* rlwinm R29, R25, 0, 28, 31 */
		/* 821512D4h case   14:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R29,regs.R25);
		/* 821512D4h case   14:*/		return 0x821512D8;
		  /* 821512D8h */ case   15:  		/* bl -10280 */
		/* 821512D8h case   15:*/		regs.LR = 0x821512DC; return 0x8214EAB0;
		/* 821512D8h case   15:*/		return 0x821512DC;
		  /* 821512DCh */ case   16:  		/* rlwinm R11, R25, 30, 2, 29 */
		/* 821512DCh case   16:*/		cpu::op::rlwinm<0,30,2,29>(regs,&regs.R11,regs.R25);
		/* 821512DCh case   16:*/		return 0x821512E0;
		  /* 821512E0h */ case   17:  		/* mr R4, R23 */
		/* 821512E0h case   17:*/		regs.R4 = regs.R23;
		/* 821512E0h case   17:*/		return 0x821512E4;
		  /* 821512E4h */ case   18:  		/* mr R3, R31 */
		/* 821512E4h case   18:*/		regs.R3 = regs.R31;
		/* 821512E4h case   18:*/		return 0x821512E8;
		  /* 821512E8h */ case   19:  		/* lwzx R5, <#[R11 + R26]> */
		/* 821512E8h case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 821512E8h case   19:*/		return 0x821512EC;
		  /* 821512ECh */ case   20:  		/* bl -13012 */
		/* 821512ECh case   20:*/		regs.LR = 0x821512F0; return 0x8214E018;
		/* 821512ECh case   20:*/		return 0x821512F0;
		  /* 821512F0h */ case   21:  		/* cmplwi CR6, R29, 0 */
		/* 821512F0h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821512F0h case   21:*/		return 0x821512F4;
		  /* 821512F4h */ case   22:  		/* bc 12, CR6_EQ, 20 */
		/* 821512F4h case   22:*/		if ( regs.CR[6].eq ) { return 0x82151308;  }
		/* 821512F4h case   22:*/		return 0x821512F8;
		  /* 821512F8h */ case   23:  		/* mr R4, R20 */
		/* 821512F8h case   23:*/		regs.R4 = regs.R20;
		/* 821512F8h case   23:*/		return 0x821512FC;
		  /* 821512FCh */ case   24:  		/* mr R5, R29 */
		/* 821512FCh case   24:*/		regs.R5 = regs.R29;
		/* 821512FCh case   24:*/		return 0x82151300;
		  /* 82151300h */ case   25:  		/* mr R3, R31 */
		/* 82151300h case   25:*/		regs.R3 = regs.R31;
		/* 82151300h case   25:*/		return 0x82151304;
		  /* 82151304h */ case   26:  		/* bl -13036 */
		/* 82151304h case   26:*/		regs.LR = 0x82151308; return 0x8214E018;
		/* 82151304h case   26:*/		return 0x82151308;
	}
	return 0x82151308;
} // Block from 8215129Ch-82151308h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82151308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151308);
		  /* 82151308h */ case    0:  		/* mr R4, R18 */
		/* 82151308h case    0:*/		regs.R4 = regs.R18;
		/* 82151308h case    0:*/		return 0x8215130C;
		  /* 8215130Ch */ case    1:  		/* mr R3, R31 */
		/* 8215130Ch case    1:*/		regs.R3 = regs.R31;
		/* 8215130Ch case    1:*/		return 0x82151310;
		  /* 82151310h */ case    2:  		/* bl -10336 */
		/* 82151310h case    2:*/		regs.LR = 0x82151314; return 0x8214EAB0;
		/* 82151310h case    2:*/		return 0x82151314;
		  /* 82151314h */ case    3:  		/* lwz R11, <#[R30]> */
		/* 82151314h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82151314h case    3:*/		return 0x82151318;
		  /* 82151318h */ case    4:  		/* mr R4, R27 */
		/* 82151318h case    4:*/		regs.R4 = regs.R27;
		/* 82151318h case    4:*/		return 0x8215131C;
		  /* 8215131Ch */ case    5:  		/* mr R3, R31 */
		/* 8215131Ch case    5:*/		regs.R3 = regs.R31;
		/* 8215131Ch case    5:*/		return 0x82151320;
		  /* 82151320h */ case    6:  		/* rlwinm R5, R11, 24, 28, 31 */
		/* 82151320h case    6:*/		cpu::op::rlwinm<0,24,28,31>(regs,&regs.R5,regs.R11);
		/* 82151320h case    6:*/		return 0x82151324;
		  /* 82151324h */ case    7:  		/* bl -13068 */
		/* 82151324h case    7:*/		regs.LR = 0x82151328; return 0x8214E018;
		/* 82151324h case    7:*/		return 0x82151328;
		  /* 82151328h */ case    8:  		/* lwz R11, <#[R30]> */
		/* 82151328h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82151328h case    8:*/		return 0x8215132C;
		  /* 8215132Ch */ case    9:  		/* rlwinm R11, R11, 20, 28, 31 */
		/* 8215132Ch case    9:*/		cpu::op::rlwinm<0,20,28,31>(regs,&regs.R11,regs.R11);
		/* 8215132Ch case    9:*/		return 0x82151330;
		  /* 82151330h */ case   10:  		/* cmplwi CR6, R11, 15 */
		/* 82151330h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000F);
		/* 82151330h case   10:*/		return 0x82151334;
		  /* 82151334h */ case   11:  		/* bc 12, CR6_EQ, 28 */
		/* 82151334h case   11:*/		if ( regs.CR[6].eq ) { return 0x82151350;  }
		/* 82151334h case   11:*/		return 0x82151338;
		  /* 82151338h */ case   12:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82151338h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82151338h case   12:*/		return 0x8215133C;
		  /* 8215133Ch */ case   13:  		/* addi R10, R26, 64 */
		/* 8215133Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R26,0x40);
		/* 8215133Ch case   13:*/		return 0x82151340;
		  /* 82151340h */ case   14:  		/* mr R4, R21 */
		/* 82151340h case   14:*/		regs.R4 = regs.R21;
		/* 82151340h case   14:*/		return 0x82151344;
		  /* 82151344h */ case   15:  		/* mr R3, R31 */
		/* 82151344h case   15:*/		regs.R3 = regs.R31;
		/* 82151344h case   15:*/		return 0x82151348;
		  /* 82151348h */ case   16:  		/* lwzx R5, <#[R11 + R10]> */
		/* 82151348h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82151348h case   16:*/		return 0x8215134C;
		  /* 8215134Ch */ case   17:  		/* bl -13108 */
		/* 8215134Ch case   17:*/		regs.LR = 0x82151350; return 0x8214E018;
		/* 8215134Ch case   17:*/		return 0x82151350;
	}
	return 0x82151350;
} // Block from 82151308h-82151350h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82151350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151350);
		  /* 82151350h */ case    0:  		/* mr R4, R14 */
		/* 82151350h case    0:*/		regs.R4 = regs.R14;
		/* 82151350h case    0:*/		return 0x82151354;
		  /* 82151354h */ case    1:  		/* mr R3, R31 */
		/* 82151354h case    1:*/		regs.R3 = regs.R31;
		/* 82151354h case    1:*/		return 0x82151358;
		  /* 82151358h */ case    2:  		/* bl -10408 */
		/* 82151358h case    2:*/		regs.LR = 0x8215135C; return 0x8214EAB0;
		/* 82151358h case    2:*/		return 0x8215135C;
		  /* 8215135Ch */ case    3:  		/* mr R4, R22 */
		/* 8215135Ch case    3:*/		regs.R4 = regs.R22;
		/* 8215135Ch case    3:*/		return 0x82151360;
		  /* 82151360h */ case    4:  		/* mr R3, R31 */
		/* 82151360h case    4:*/		regs.R3 = regs.R31;
		/* 82151360h case    4:*/		return 0x82151364;
		  /* 82151364h */ case    5:  		/* bl -13132 */
		/* 82151364h case    5:*/		regs.LR = 0x82151368; return 0x8214E018;
		/* 82151364h case    5:*/		return 0x82151368;
		  /* 82151368h */ case    6:  		/* addic. R28, R28, -1 */
		/* 82151368h case    6:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 82151368h case    6:*/		return 0x8215136C;
		  /* 8215136Ch */ case    7:  		/* addi R30, R30, 4 */
		/* 8215136Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8215136Ch case    7:*/		return 0x82151370;
		  /* 82151370h */ case    8:  		/* bc 4, CR0_EQ, -168 */
		/* 82151370h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821512C8;  }
		/* 82151370h case    8:*/		return 0x82151374;
	}
	return 0x82151374;
} // Block from 82151350h-82151374h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82151374h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151374( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151374) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151374);
		  /* 82151374h */ case    0:  		/* mr R4, R18 */
		/* 82151374h case    0:*/		regs.R4 = regs.R18;
		/* 82151374h case    0:*/		return 0x82151378;
		  /* 82151378h */ case    1:  		/* mr R3, R31 */
		/* 82151378h case    1:*/		regs.R3 = regs.R31;
		/* 82151378h case    1:*/		return 0x8215137C;
		  /* 8215137Ch */ case    2:  		/* bl -10444 */
		/* 8215137Ch case    2:*/		regs.LR = 0x82151380; return 0x8214EAB0;
		/* 8215137Ch case    2:*/		return 0x82151380;
		  /* 82151380h */ case    3:  		/* rlwinm. R11, R19, 0, 24, 31 */
		/* 82151380h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R19);
		/* 82151380h case    3:*/		return 0x82151384;
		  /* 82151384h */ case    4:  		/* bc 12, CR0_EQ, 28 */
		/* 82151384h case    4:*/		if ( regs.CR[0].eq ) { return 0x821513A0;  }
		/* 82151384h case    4:*/		return 0x82151388;
		  /* 82151388h */ case    5:  		/* mr R4, R14 */
		/* 82151388h case    5:*/		regs.R4 = regs.R14;
		/* 82151388h case    5:*/		return 0x8215138C;
		  /* 8215138Ch */ case    6:  		/* mr R3, R31 */
		/* 8215138Ch case    6:*/		regs.R3 = regs.R31;
		/* 8215138Ch case    6:*/		return 0x82151390;
		  /* 82151390h */ case    7:  		/* bl -10464 */
		/* 82151390h case    7:*/		regs.LR = 0x82151394; return 0x8214EAB0;
		/* 82151390h case    7:*/		return 0x82151394;
		  /* 82151394h */ case    8:  		/* mr R4, R22 */
		/* 82151394h case    8:*/		regs.R4 = regs.R22;
		/* 82151394h case    8:*/		return 0x82151398;
		  /* 82151398h */ case    9:  		/* mr R3, R31 */
		/* 82151398h case    9:*/		regs.R3 = regs.R31;
		/* 82151398h case    9:*/		return 0x8215139C;
		  /* 8215139Ch */ case   10:  		/* bl -13188 */
		/* 8215139Ch case   10:*/		regs.LR = 0x821513A0; return 0x8214E018;
		/* 8215139Ch case   10:*/		return 0x821513A0;
	}
	return 0x821513A0;
} // Block from 82151374h-821513A0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821513A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821513A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821513A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821513A0);
		  /* 821513A0h */ case    0:  		/* li R3, 0 */
		/* 821513A0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821513A0h case    0:*/		return 0x821513A4;
	}
	return 0x821513A4;
} // Block from 821513A0h-821513A4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821513A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821513A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821513A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821513A4);
		  /* 821513A4h */ case    0:  		/* addi R1, R1, 256 */
		/* 821513A4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 821513A4h case    0:*/		return 0x821513A8;
		  /* 821513A8h */ case    1:  		/* b -786744 */
		/* 821513A8h case    1:*/		return 0x82091270;
		/* 821513A8h case    1:*/		return 0x821513AC;
		  /* 821513ACh */ case    2:  		/* nop */
		/* 821513ACh case    2:*/		cpu::op::nop();
		/* 821513ACh case    2:*/		return 0x821513B0;
	}
	return 0x821513B0;
} // Block from 821513A4h-821513B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821513B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821513B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821513B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821513B0);
		  /* 821513B0h */ case    0:  		/* mfspr R12, LR */
		/* 821513B0h case    0:*/		regs.R12 = regs.LR;
		/* 821513B0h case    0:*/		return 0x821513B4;
		  /* 821513B4h */ case    1:  		/* bl -786784 */
		/* 821513B4h case    1:*/		regs.LR = 0x821513B8; return 0x82091254;
		/* 821513B4h case    1:*/		return 0x821513B8;
		  /* 821513B8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821513B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821513B8h case    2:*/		return 0x821513BC;
		  /* 821513BCh */ case    3:  		/* lwz R11, <#[R3 + 8]> */
		/* 821513BCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821513BCh case    3:*/		return 0x821513C0;
		  /* 821513C0h */ case    4:  		/* mr R29, R6 */
		/* 821513C0h case    4:*/		regs.R29 = regs.R6;
		/* 821513C0h case    4:*/		return 0x821513C4;
		  /* 821513C4h */ case    5:  		/* mr R30, R7 */
		/* 821513C4h case    5:*/		regs.R30 = regs.R7;
		/* 821513C4h case    5:*/		return 0x821513C8;
		  /* 821513C8h */ case    6:  		/* li R27, 0 */
		/* 821513C8h case    6:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821513C8h case    6:*/		return 0x821513CC;
		  /* 821513CCh */ case    7:  		/* cmplw CR6, R4, R11 */
		/* 821513CCh case    7:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 821513CCh case    7:*/		return 0x821513D0;
		  /* 821513D0h */ case    8:  		/* bc 4, CR6_EQ, 268 */
		/* 821513D0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821514DC;  }
		/* 821513D0h case    8:*/		return 0x821513D4;
		  /* 821513D4h */ case    9:  		/* lwz R31, <#[R3]> */
		/* 821513D4h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 821513D4h case    9:*/		return 0x821513D8;
		  /* 821513D8h */ case   10:  		/* cmplwi CR6, R5, 1 */
		/* 821513D8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000001);
		/* 821513D8h case   10:*/		return 0x821513DC;
		  /* 821513DCh */ case   11:  		/* bc 12, CR6_LT, 172 */
		/* 821513DCh case   11:*/		if ( regs.CR[6].lt ) { return 0x82151488;  }
		/* 821513DCh case   11:*/		return 0x821513E0;
		  /* 821513E0h */ case   12:  		/* bc 12, CR6_EQ, 80 */
		/* 821513E0h case   12:*/		if ( regs.CR[6].eq ) { return 0x82151430;  }
		/* 821513E0h case   12:*/		return 0x821513E4;
		  /* 821513E4h */ case   13:  		/* cmplwi CR6, R5, 3 */
		/* 821513E4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000003);
		/* 821513E4h case   13:*/		return 0x821513E8;
		  /* 821513E8h */ case   14:  		/* bc 12, CR6_LT, 16 */
		/* 821513E8h case   14:*/		if ( regs.CR[6].lt ) { return 0x821513F8;  }
		/* 821513E8h case   14:*/		return 0x821513EC;
		  /* 821513ECh */ case   15:  		/* lis R27, -32768 */
		/* 821513ECh case   15:*/		cpu::op::lis<0>(regs,&regs.R27,0xFFFF8000);
		/* 821513ECh case   15:*/		return 0x821513F0;
		  /* 821513F0h */ case   16:  		/* ori R27, R27, 16389 */
		/* 821513F0h case   16:*/		cpu::op::ori<0>(regs,&regs.R27,regs.R27,0x4005);
		/* 821513F0h case   16:*/		return 0x821513F4;
		  /* 821513F4h */ case   17:  		/* b 216 */
		/* 821513F4h case   17:*/		return 0x821514CC;
		/* 821513F4h case   17:*/		return 0x821513F8;
	}
	return 0x821513F8;
} // Block from 821513B0h-821513F8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821513F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821513F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821513F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821513F8);
		  /* 821513F8h */ case    0:  		/* lis R11, -32255 */
		/* 821513F8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821513F8h case    0:*/		return 0x821513FC;
		  /* 821513FCh */ case    1:  		/* mr R3, R31 */
		/* 821513FCh case    1:*/		regs.R3 = regs.R31;
		/* 821513FCh case    1:*/		return 0x82151400;
		  /* 82151400h */ case    2:  		/* addi R4, R11, -8576 */
		/* 82151400h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFDE80);
		/* 82151400h case    2:*/		return 0x82151404;
		  /* 82151404h */ case    3:  		/* bl -3036 */
		/* 82151404h case    3:*/		regs.LR = 0x82151408; return 0x82150828;
		/* 82151404h case    3:*/		return 0x82151408;
		  /* 82151408h */ case    4:  		/* lis R11, -32253 */
		/* 82151408h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82151408h case    4:*/		return 0x8215140C;
		  /* 8215140Ch */ case    5:  		/* mr R5, R29 */
		/* 8215140Ch case    5:*/		regs.R5 = regs.R29;
		/* 8215140Ch case    5:*/		return 0x82151410;
		  /* 82151410h */ case    6:  		/* lwz R9, <#[R30 + 12]> */
		/* 82151410h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x0000000C) );
		/* 82151410h case    6:*/		return 0x82151414;
		  /* 82151414h */ case    7:  		/* addi R4, R11, 30980 */
		/* 82151414h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7904);
		/* 82151414h case    7:*/		return 0x82151418;
		  /* 82151418h */ case    8:  		/* lwz R8, <#[R30 + 8]> */
		/* 82151418h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000008) );
		/* 82151418h case    8:*/		return 0x8215141C;
		  /* 8215141Ch */ case    9:  		/* mr R3, R31 */
		/* 8215141Ch case    9:*/		regs.R3 = regs.R31;
		/* 8215141Ch case    9:*/		return 0x82151420;
		  /* 82151420h */ case   10:  		/* lwz R7, <#[R30 + 4]> */
		/* 82151420h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000004) );
		/* 82151420h case   10:*/		return 0x82151424;
		  /* 82151424h */ case   11:  		/* lwz R6, <#[R30]> */
		/* 82151424h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000000) );
		/* 82151424h case   11:*/		return 0x82151428;
		  /* 82151428h */ case   12:  		/* bl -13328 */
		/* 82151428h case   12:*/		regs.LR = 0x8215142C; return 0x8214E018;
		/* 82151428h case   12:*/		return 0x8215142C;
		  /* 8215142Ch */ case   13:  		/* b 160 */
		/* 8215142Ch case   13:*/		return 0x821514CC;
		/* 8215142Ch case   13:*/		return 0x82151430;
	}
	return 0x82151430;
} // Block from 821513F8h-82151430h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82151430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151430);
		  /* 82151430h */ case    0:  		/* lis R11, -32255 */
		/* 82151430h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82151430h case    0:*/		return 0x82151434;
		  /* 82151434h */ case    1:  		/* mr R3, R31 */
		/* 82151434h case    1:*/		regs.R3 = regs.R31;
		/* 82151434h case    1:*/		return 0x82151438;
		  /* 82151438h */ case    2:  		/* addi R4, R11, -10292 */
		/* 82151438h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFD7CC);
		/* 82151438h case    2:*/		return 0x8215143C;
		  /* 8215143Ch */ case    3:  		/* bl -3092 */
		/* 8215143Ch case    3:*/		regs.LR = 0x82151440; return 0x82150828;
		/* 8215143Ch case    3:*/		return 0x82151440;
		  /* 82151440h */ case    4:  		/* lis R11, -32253 */
		/* 82151440h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82151440h case    4:*/		return 0x82151444;
		  /* 82151444h */ case    5:  		/* mr R5, R29 */
		/* 82151444h case    5:*/		regs.R5 = regs.R29;
		/* 82151444h case    5:*/		return 0x82151448;
		  /* 82151448h */ case    6:  		/* addi R4, R11, 30972 */
		/* 82151448h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x78FC);
		/* 82151448h case    6:*/		return 0x8215144C;
		  /* 8215144Ch */ case    7:  		/* mr R3, R31 */
		/* 8215144Ch case    7:*/		regs.R3 = regs.R31;
		/* 8215144Ch case    7:*/		return 0x82151450;
		  /* 82151450h */ case    8:  		/* bl -13368 */
		/* 82151450h case    8:*/		regs.LR = 0x82151454; return 0x8214E018;
		/* 82151450h case    8:*/		return 0x82151454;
		  /* 82151454h */ case    9:  		/* lis R11, -32256 */
		/* 82151454h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82151454h case    9:*/		return 0x82151458;
		  /* 82151458h */ case   10:  		/* addi R29, R30, -4 */
		/* 82151458h case   10:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0xFFFFFFFC);
		/* 82151458h case   10:*/		return 0x8215145C;
		  /* 8215145Ch */ case   11:  		/* li R30, 4 */
		/* 8215145Ch case   11:*/		cpu::op::li<0>(regs,&regs.R30,0x4);
		/* 8215145Ch case   11:*/		return 0x82151460;
		  /* 82151460h */ case   12:  		/* addi R28, R11, 17860 */
		/* 82151460h case   12:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0x45C4);
		/* 82151460h case   12:*/		return 0x82151464;
		  /* 82151464h */ case   13:  		/* mr R4, R28 */
		/* 82151464h case   13:*/		regs.R4 = regs.R28;
		/* 82151464h case   13:*/		return 0x82151468;
		  /* 82151468h */ case   14:  		/* mr R3, R31 */
		/* 82151468h case   14:*/		regs.R3 = regs.R31;
		/* 82151468h case   14:*/		return 0x8215146C;
		  /* 8215146Ch */ case   15:  		/* bl -13396 */
		/* 8215146Ch case   15:*/		regs.LR = 0x82151470; return 0x8214E018;
		/* 8215146Ch case   15:*/		return 0x82151470;
		  /* 82151470h */ case   16:  		/* mr R3, R31 */
		/* 82151470h case   16:*/		regs.R3 = regs.R31;
		/* 82151470h case   16:*/		return 0x82151474;
		  /* 82151474h */ case   17:  		/* lfsu FR1, <#[R29 + 4]> */
		/* 82151474h case   17:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 82151474h case   17:*/		return 0x82151478;
		  /* 82151478h */ case   18:  		/* bl -12776 */
		/* 82151478h case   18:*/		regs.LR = 0x8215147C; return 0x8214E290;
		/* 82151478h case   18:*/		return 0x8215147C;
		  /* 8215147Ch */ case   19:  		/* addic. R30, R30, -1 */
		/* 8215147Ch case   19:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 8215147Ch case   19:*/		return 0x82151480;
		  /* 82151480h */ case   20:  		/* bc 4, CR0_EQ, -28 */
		/* 82151480h case   20:*/		if ( !regs.CR[0].eq ) { return 0x82151464;  }
		/* 82151480h case   20:*/		return 0x82151484;
		  /* 82151484h */ case   21:  		/* b 72 */
		/* 82151484h case   21:*/		return 0x821514CC;
		/* 82151484h case   21:*/		return 0x82151488;
	}
	return 0x82151488;
} // Block from 82151430h-82151488h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82151488h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151488);
		  /* 82151488h */ case    0:  		/* lis R11, -32255 */
		/* 82151488h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 82151488h case    0:*/		return 0x8215148C;
		  /* 8215148Ch */ case    1:  		/* mr R3, R31 */
		/* 8215148Ch case    1:*/		regs.R3 = regs.R31;
		/* 8215148Ch case    1:*/		return 0x82151490;
		  /* 82151490h */ case    2:  		/* addi R4, R11, -8584 */
		/* 82151490h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFDE78);
		/* 82151490h case    2:*/		return 0x82151494;
		  /* 82151494h */ case    3:  		/* bl -3180 */
		/* 82151494h case    3:*/		regs.LR = 0x82151498; return 0x82150828;
		/* 82151494h case    3:*/		return 0x82151498;
		  /* 82151498h */ case    4:  		/* lwz R11, <#[R30]> */
		/* 82151498h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82151498h case    4:*/		return 0x8215149C;
		  /* 8215149Ch */ case    5:  		/* cmpwi CR6, R11, 0 */
		/* 8215149Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8215149Ch case    5:*/		return 0x821514A0;
		  /* 821514A0h */ case    6:  		/* bc 12, CR6_EQ, 16 */
		/* 821514A0h case    6:*/		if ( regs.CR[6].eq ) { return 0x821514B0;  }
		/* 821514A0h case    6:*/		return 0x821514A4;
		  /* 821514A4h */ case    7:  		/* lis R11, -32255 */
		/* 821514A4h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821514A4h case    7:*/		return 0x821514A8;
		  /* 821514A8h */ case    8:  		/* addi R6, R11, 5224 */
		/* 821514A8h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x1468);
		/* 821514A8h case    8:*/		return 0x821514AC;
		  /* 821514ACh */ case    9:  		/* b 12 */
		/* 821514ACh case    9:*/		return 0x821514B8;
		/* 821514ACh case    9:*/		return 0x821514B0;
	}
	return 0x821514B0;
} // Block from 82151488h-821514B0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821514B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821514B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821514B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821514B0);
		  /* 821514B0h */ case    0:  		/* lis R11, -32255 */
		/* 821514B0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821514B0h case    0:*/		return 0x821514B4;
		  /* 821514B4h */ case    1:  		/* addi R6, R11, 5216 */
		/* 821514B4h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x1460);
		/* 821514B4h case    1:*/		return 0x821514B8;
	}
	return 0x821514B8;
} // Block from 821514B0h-821514B8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821514B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821514B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821514B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821514B8);
		  /* 821514B8h */ case    0:  		/* lis R11, -32253 */
		/* 821514B8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821514B8h case    0:*/		return 0x821514BC;
		  /* 821514BCh */ case    1:  		/* mr R5, R29 */
		/* 821514BCh case    1:*/		regs.R5 = regs.R29;
		/* 821514BCh case    1:*/		return 0x821514C0;
		  /* 821514C0h */ case    2:  		/* addi R4, R11, 30960 */
		/* 821514C0h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x78F0);
		/* 821514C0h case    2:*/		return 0x821514C4;
		  /* 821514C4h */ case    3:  		/* mr R3, R31 */
		/* 821514C4h case    3:*/		regs.R3 = regs.R31;
		/* 821514C4h case    3:*/		return 0x821514C8;
		  /* 821514C8h */ case    4:  		/* bl -13488 */
		/* 821514C8h case    4:*/		regs.LR = 0x821514CC; return 0x8214E018;
		/* 821514C8h case    4:*/		return 0x821514CC;
	}
	return 0x821514CC;
} // Block from 821514B8h-821514CCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821514CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821514CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821514CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821514CC);
		  /* 821514CCh */ case    0:  		/* lis R11, -32256 */
		/* 821514CCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821514CCh case    0:*/		return 0x821514D0;
		  /* 821514D0h */ case    1:  		/* mr R3, R31 */
		/* 821514D0h case    1:*/		regs.R3 = regs.R31;
		/* 821514D0h case    1:*/		return 0x821514D4;
		  /* 821514D4h */ case    2:  		/* addi R4, R11, 17768 */
		/* 821514D4h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4568);
		/* 821514D4h case    2:*/		return 0x821514D8;
		  /* 821514D8h */ case    3:  		/* bl -13504 */
		/* 821514D8h case    3:*/		regs.LR = 0x821514DC; return 0x8214E018;
		/* 821514D8h case    3:*/		return 0x821514DC;
	}
	return 0x821514DC;
} // Block from 821514CCh-821514DCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821514DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821514DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821514DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821514DC);
		  /* 821514DCh */ case    0:  		/* mr R3, R27 */
		/* 821514DCh case    0:*/		regs.R3 = regs.R27;
		/* 821514DCh case    0:*/		return 0x821514E0;
		  /* 821514E0h */ case    1:  		/* addi R1, R1, 128 */
		/* 821514E0h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821514E0h case    1:*/		return 0x821514E4;
		  /* 821514E4h */ case    2:  		/* b -787008 */
		/* 821514E4h case    2:*/		return 0x820912A4;
		/* 821514E4h case    2:*/		return 0x821514E8;
	}
	return 0x821514E8;
} // Block from 821514DCh-821514E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821514E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821514E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821514E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821514E8);
		  /* 821514E8h */ case    0:  		/* mfspr R12, LR */
		/* 821514E8h case    0:*/		regs.R12 = regs.LR;
		/* 821514E8h case    0:*/		return 0x821514EC;
		  /* 821514ECh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821514ECh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821514ECh case    1:*/		return 0x821514F0;
		  /* 821514F0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 821514F0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821514F0h case    2:*/		return 0x821514F4;
		  /* 821514F4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 821514F4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821514F4h case    3:*/		return 0x821514F8;
		  /* 821514F8h */ case    4:  		/* stwu R1, <#[R1 - 128]> */
		/* 821514F8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821514F8h case    4:*/		return 0x821514FC;
		  /* 821514FCh */ case    5:  		/* rlwinm R10, R8, 3, 0, 28 */
		/* 821514FCh case    5:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R8);
		/* 821514FCh case    5:*/		return 0x82151500;
		  /* 82151500h */ case    6:  		/* mr R31, R3 */
		/* 82151500h case    6:*/		regs.R31 = regs.R3;
		/* 82151500h case    6:*/		return 0x82151504;
		  /* 82151504h */ case    7:  		/* add R10, R10, R5 */
		/* 82151504h case    7:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R5);
		/* 82151504h case    7:*/		return 0x82151508;
		  /* 82151508h */ case    8:  		/* mr R11, R4 */
		/* 82151508h case    8:*/		regs.R11 = regs.R4;
		/* 82151508h case    8:*/		return 0x8215150C;
		  /* 8215150Ch */ case    9:  		/* lwz R10, <#[R10 + 20]> */
		/* 8215150Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000014) );
		/* 8215150Ch case    9:*/		return 0x82151510;
		  /* 82151510h */ case   10:  		/* cmplwi CR6, R10, 0 */
		/* 82151510h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82151510h case   10:*/		return 0x82151514;
		  /* 82151514h */ case   11:  		/* bc 4, CR6_EQ, 12 */
		/* 82151514h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82151520;  }
		/* 82151514h case   11:*/		return 0x82151518;
		  /* 82151518h */ case   12:  		/* li R3, 0 */
		/* 82151518h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82151518h case   12:*/		return 0x8215151C;
		  /* 8215151Ch */ case   13:  		/* b 96 */
		/* 8215151Ch case   13:*/		return 0x8215157C;
		/* 8215151Ch case   13:*/		return 0x82151520;
	}
	return 0x82151520;
} // Block from 821514E8h-82151520h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82151520h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151520);
		  /* 82151520h */ case    0:  		/* addi R10, R1, 80 */
		/* 82151520h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 82151520h case    0:*/		return 0x82151524;
		  /* 82151524h */ case    1:  		/* li R30, 0 */
		/* 82151524h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 82151524h case    1:*/		return 0x82151528;
		  /* 82151528h */ case    2:  		/* lis R9, -32235 */
		/* 82151528h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8215);
		/* 82151528h case    2:*/		return 0x8215152C;
		  /* 8215152Ch */ case    3:  		/* addi R4, R1, 80 */
		/* 8215152Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 8215152Ch case    3:*/		return 0x82151530;
		  /* 82151530h */ case    4:  		/* addi R5, R9, 5040 */
		/* 82151530h case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R9,0x13B0);
		/* 82151530h case    4:*/		return 0x82151534;
		  /* 82151534h */ case    5:  		/* std R30, <#[R10]> */
		/* 82151534h case    5:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R10 + 0x00000000) );
		/* 82151534h case    5:*/		return 0x82151538;
		  /* 82151538h */ case    6:  		/* stw R30, <#[R10 + 8]> */
		/* 82151538h case    6:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R10 + 0x00000008) );
		/* 82151538h case    6:*/		return 0x8215153C;
		  /* 8215153Ch */ case    7:  		/* mr R3, R7 */
		/* 8215153Ch case    7:*/		regs.R3 = regs.R7;
		/* 8215153Ch case    7:*/		return 0x82151540;
		  /* 82151540h */ case    8:  		/* stw R31, <#[R1 + 80]> */
		/* 82151540h case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 82151540h case    8:*/		return 0x82151544;
		  /* 82151544h */ case    9:  		/* stw R11, <#[R1 + 84]> */
		/* 82151544h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82151544h case    9:*/		return 0x82151548;
		  /* 82151548h */ case   10:  		/* stw R8, <#[R1 + 88]> */
		/* 82151548h case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000058) );
		/* 82151548h case   10:*/		return 0x8215154C;
		  /* 8215154Ch */ case   11:  		/* bl -946004 */
		/* 8215154Ch case   11:*/		regs.LR = 0x82151550; return 0x8206A5F8;
		/* 8215154Ch case   11:*/		return 0x82151550;
		  /* 82151550h */ case   12:  		/* cmpwi CR0, R3, 0 */
		/* 82151550h case   12:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82151550h case   12:*/		return 0x82151554;
		  /* 82151554h */ case   13:  		/* bc 12, CR0_LT, 40 */
		/* 82151554h case   13:*/		if ( regs.CR[0].lt ) { return 0x8215157C;  }
		/* 82151554h case   13:*/		return 0x82151558;
		  /* 82151558h */ case   14:  		/* lis R11, -32253 */
		/* 82151558h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82151558h case   14:*/		return 0x8215155C;
		  /* 8215155Ch */ case   15:  		/* mr R3, R31 */
		/* 8215155Ch case   15:*/		regs.R3 = regs.R31;
		/* 8215155Ch case   15:*/		return 0x82151560;
		  /* 82151560h */ case   16:  		/* addi R4, R11, 28332 */
		/* 82151560h case   16:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6EAC);
		/* 82151560h case   16:*/		return 0x82151564;
		  /* 82151564h */ case   17:  		/* bl -10932 */
		/* 82151564h case   17:*/		regs.LR = 0x82151568; return 0x8214EAB0;
		/* 82151564h case   17:*/		return 0x82151568;
		  /* 82151568h */ case   18:  		/* lis R11, -32256 */
		/* 82151568h case   18:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82151568h case   18:*/		return 0x8215156C;
		  /* 8215156Ch */ case   19:  		/* mr R3, R31 */
		/* 8215156Ch case   19:*/		regs.R3 = regs.R31;
		/* 8215156Ch case   19:*/		return 0x82151570;
		  /* 82151570h */ case   20:  		/* addi R4, R11, 17768 */
		/* 82151570h case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4568);
		/* 82151570h case   20:*/		return 0x82151574;
		  /* 82151574h */ case   21:  		/* bl -13660 */
		/* 82151574h case   21:*/		regs.LR = 0x82151578; return 0x8214E018;
		/* 82151574h case   21:*/		return 0x82151578;
		  /* 82151578h */ case   22:  		/* mr R3, R30 */
		/* 82151578h case   22:*/		regs.R3 = regs.R30;
		/* 82151578h case   22:*/		return 0x8215157C;
	}
	return 0x8215157C;
} // Block from 82151520h-8215157Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 8215157Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215157C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215157C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215157C);
		  /* 8215157Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 8215157Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8215157Ch case    0:*/		return 0x82151580;
		  /* 82151580h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82151580h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82151580h case    1:*/		return 0x82151584;
		  /* 82151584h */ case    2:  		/* mtspr LR, R12 */
		/* 82151584h case    2:*/		regs.LR = regs.R12;
		/* 82151584h case    2:*/		return 0x82151588;
		  /* 82151588h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82151588h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82151588h case    3:*/		return 0x8215158C;
		  /* 8215158Ch */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8215158Ch case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215158Ch case    4:*/		return 0x82151590;
		  /* 82151590h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82151590h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82151590h case    5:*/		return 0x82151594;
	}
	return 0x82151594;
} // Block from 8215157Ch-82151594h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82151594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151594);
		  /* 82151594h */ case    0:  		/* nop */
		/* 82151594h case    0:*/		cpu::op::nop();
		/* 82151594h case    0:*/		return 0x82151598;
	}
	return 0x82151598;
} // Block from 82151594h-82151598h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82151598h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151598);
		  /* 82151598h */ case    0:  		/* mfspr R12, LR */
		/* 82151598h case    0:*/		regs.R12 = regs.LR;
		/* 82151598h case    0:*/		return 0x8215159C;
		  /* 8215159Ch */ case    1:  		/* bl -787276 */
		/* 8215159Ch case    1:*/		regs.LR = 0x821515A0; return 0x82091250;
		/* 8215159Ch case    1:*/		return 0x821515A0;
		  /* 821515A0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821515A0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821515A0h case    2:*/		return 0x821515A4;
		  /* 821515A4h */ case    3:  		/* mr R31, R3 */
		/* 821515A4h case    3:*/		regs.R31 = regs.R3;
		/* 821515A4h case    3:*/		return 0x821515A8;
		  /* 821515A8h */ case    4:  		/* mr R28, R5 */
		/* 821515A8h case    4:*/		regs.R28 = regs.R5;
		/* 821515A8h case    4:*/		return 0x821515AC;
		  /* 821515ACh */ case    5:  		/* mr R26, R8 */
		/* 821515ACh case    5:*/		regs.R26 = regs.R8;
		/* 821515ACh case    5:*/		return 0x821515B0;
	}
	return 0x821515B0;
} // Block from 82151598h-821515B0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821515B0h
// Function '?DisassembleR500MicrocodePreamble@XGRAPHICS@@YAJKW4UCODESHADERTYPE@@PBU_UCODE_HEADER@@KPAVOutStream@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821515B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821515B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821515B0);
		  /* 821515B0h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 821515B0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821515B0h case    0:*/		return 0x821515B4;
		  /* 821515B4h */ case    1:  		/* bc 12, CR6_EQ, 780 */
		/* 821515B4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821518C0;  }
		/* 821515B4h case    1:*/		return 0x821515B8;
		  /* 821515B8h */ case    2:  		/* cmplwi CR6, R4, 4 */
		/* 821515B8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000004);
		/* 821515B8h case    2:*/		return 0x821515BC;
		  /* 821515BCh */ case    3:  		/* bc 12, CR6_LT, 772 */
		/* 821515BCh case    3:*/		if ( regs.CR[6].lt ) { return 0x821518C0;  }
		/* 821515BCh case    3:*/		return 0x821515C0;
		  /* 821515C0h */ case    4:  		/* cmplwi CR6, R6, 0 */
		/* 821515C0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 821515C0h case    4:*/		return 0x821515C4;
		  /* 821515C4h */ case    5:  		/* bc 12, CR6_EQ, 764 */
		/* 821515C4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821518C0;  }
		/* 821515C4h case    5:*/		return 0x821515C8;
		  /* 821515C8h */ case    6:  		/* li R11, 0 */
		/* 821515C8h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821515C8h case    6:*/		return 0x821515CC;
		  /* 821515CCh */ case    7:  		/* stw R6, <#[R1 + 80]> */
		/* 821515CCh case    7:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 821515CCh case    7:*/		return 0x821515D0;
		  /* 821515D0h */ case    8:  		/* rlwinm. R10, R5, 0, 30, 31 */
		/* 821515D0h case    8:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R10,regs.R5);
		/* 821515D0h case    8:*/		return 0x821515D4;
		  /* 821515D4h */ case    9:  		/* stw R7, <#[R1 + 84]> */
		/* 821515D4h case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000054) );
		/* 821515D4h case    9:*/		return 0x821515D8;
		  /* 821515D8h */ case   10:  		/* stw R11, <#[R1 + 88]> */
		/* 821515D8h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821515D8h case   10:*/		return 0x821515DC;
		  /* 821515DCh */ case   11:  		/* stw R11, <#[R1 + 92]> */
		/* 821515DCh case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821515DCh case   11:*/		return 0x821515E0;
		  /* 821515E0h */ case   12:  		/* stw R11, <#[R1 + 96]> */
		/* 821515E0h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 821515E0h case   12:*/		return 0x821515E4;
		  /* 821515E4h */ case   13:  		/* bc 4, CR0_EQ, 732 */
		/* 821515E4h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821518C0;  }
		/* 821515E4h case   13:*/		return 0x821515E8;
		  /* 821515E8h */ case   14:  		/* rlwinm R11, R5, 28, 31, 31 */
		/* 821515E8h case   14:*/		cpu::op::rlwinm<0,28,31,31>(regs,&regs.R11,regs.R5);
		/* 821515E8h case   14:*/		return 0x821515EC;
		  /* 821515ECh */ case   15:  		/* lis R10, -32253 */
		/* 821515ECh case   15:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8203);
		/* 821515ECh case   15:*/		return 0x821515F0;
		  /* 821515F0h */ case   16:  		/* stw R11, <#[R1 + 92]> */
		/* 821515F0h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821515F0h case   16:*/		return 0x821515F4;
		  /* 821515F4h */ case   17:  		/* addi R3, R1, 80 */
		/* 821515F4h case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821515F4h case   17:*/		return 0x821515F8;
		  /* 821515F8h */ case   18:  		/* addi R4, R10, 31240 */
		/* 821515F8h case   18:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x7A08);
		/* 821515F8h case   18:*/		return 0x821515FC;
		  /* 821515FCh */ case   19:  		/* bl -11084 */
		/* 821515FCh case   19:*/		regs.LR = 0x82151600; return 0x8214EAB0;
		/* 821515FCh case   19:*/		return 0x82151600;
		  /* 82151600h */ case   20:  		/* lis R11, -32253 */
		/* 82151600h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82151600h case   20:*/		return 0x82151604;
		  /* 82151604h */ case   21:  		/* addi R3, R1, 80 */
		/* 82151604h case   21:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82151604h case   21:*/		return 0x82151608;
		  /* 82151608h */ case   22:  		/* addi R4, R11, 31112 */
		/* 82151608h case   22:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7988);
		/* 82151608h case   22:*/		return 0x8215160C;
		  /* 8215160Ch */ case   23:  		/* bl -11100 */
		/* 8215160Ch case   23:*/		regs.LR = 0x82151610; return 0x8214EAB0;
		/* 8215160Ch case   23:*/		return 0x82151610;
		  /* 82151610h */ case   24:  		/* lis R11, -32253 */
		/* 82151610h case   24:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82151610h case   24:*/		return 0x82151614;
		  /* 82151614h */ case   25:  		/* addi R3, R1, 80 */
		/* 82151614h case   25:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82151614h case   25:*/		return 0x82151618;
		  /* 82151618h */ case   26:  		/* addi R4, R11, 31052 */
		/* 82151618h case   26:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x794C);
		/* 82151618h case   26:*/		return 0x8215161C;
		  /* 8215161Ch */ case   27:  		/* bl -11116 */
		/* 8215161Ch case   27:*/		regs.LR = 0x82151620; return 0x8214EAB0;
		/* 8215161Ch case   27:*/		return 0x82151620;
		  /* 82151620h */ case   28:  		/* lwz R11, <#[R31 + 8]> */
		/* 82151620h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82151620h case   28:*/		return 0x82151624;
		  /* 82151624h */ case   29:  		/* lwz R10, <#[R31 + 4]> */
		/* 82151624h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82151624h case   29:*/		return 0x82151628;
		  /* 82151628h */ case   30:  		/* lis R9, -32217 */
		/* 82151628h case   30:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8227);
		/* 82151628h case   30:*/		return 0x8215162C;
		  /* 8215162Ch */ case   31:  		/* addi R3, R1, 80 */
		/* 8215162Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8215162Ch case   31:*/		return 0x82151630;
		  /* 82151630h */ case   32:  		/* add R29, R10, R11 */
		/* 82151630h case   32:*/		cpu::op::add<0>(regs,&regs.R29,regs.R10,regs.R11);
		/* 82151630h case   32:*/		return 0x82151634;
		  /* 82151634h */ case   33:  		/* lwz R4, <#[R9 + 18352]> */
		/* 82151634h case   33:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + 0x000047B0) );
		/* 82151634h case   33:*/		return 0x82151638;
		  /* 82151638h */ case   34:  		/* lwz R11, <#[R31]> */
		/* 82151638h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82151638h case   34:*/		return 0x8215163C;
		  /* 8215163Ch */ case   35:  		/* rlwinm R30, R11, 0, 31, 31 */
		/* 8215163Ch case   35:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R30,regs.R11);
		/* 8215163Ch case   35:*/		return 0x82151640;
		  /* 82151640h */ case   36:  		/* bl -11152 */
		/* 82151640h case   36:*/		regs.LR = 0x82151644; return 0x8214EAB0;
		/* 82151640h case   36:*/		return 0x82151644;
		  /* 82151644h */ case   37:  		/* lis R11, -32253 */
		/* 82151644h case   37:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82151644h case   37:*/		return 0x82151648;
		  /* 82151648h */ case   38:  		/* addi R3, R1, 80 */
		/* 82151648h case   38:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82151648h case   38:*/		return 0x8215164C;
		  /* 8215164Ch */ case   39:  		/* addi R4, R11, 31032 */
		/* 8215164Ch case   39:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7938);
		/* 8215164Ch case   39:*/		return 0x82151650;
		  /* 82151650h */ case   40:  		/* bl -13880 */
		/* 82151650h case   40:*/		regs.LR = 0x82151654; return 0x8214E018;
		/* 82151650h case   40:*/		return 0x82151654;
		  /* 82151654h */ case   41:  		/* cmpwi CR6, R30, 1 */
		/* 82151654h case   41:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000001);
		/* 82151654h case   41:*/		return 0x82151658;
		  /* 82151658h */ case   42:  		/* addi R3, R1, 80 */
		/* 82151658h case   42:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82151658h case   42:*/		return 0x8215165C;
		  /* 8215165Ch */ case   43:  		/* bc 12, CR6_GT, 32 */
		/* 8215165Ch case   43:*/		if ( regs.CR[6].gt ) { return 0x8215167C;  }
		/* 8215165Ch case   43:*/		return 0x82151660;
		  /* 82151660h */ case   44:  		/* lis R11, -32217 */
		/* 82151660h case   44:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82151660h case   44:*/		return 0x82151664;
		  /* 82151664h */ case   45:  		/* rlwinm R10, R30, 2, 0, 29 */
		/* 82151664h case   45:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R30);
		/* 82151664h case   45:*/		return 0x82151668;
		  /* 82151668h */ case   46:  		/* addi R11, R11, 18344 */
		/* 82151668h case   46:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x47A8);
		/* 82151668h case   46:*/		return 0x8215166C;
		  /* 8215166Ch */ case   47:  		/* lis R9, -32253 */
		/* 8215166Ch case   47:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8203);
		/* 8215166Ch case   47:*/		return 0x82151670;
		  /* 82151670h */ case   48:  		/* addi R4, R9, 31028 */
		/* 82151670h case   48:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R9,0x7934);
		/* 82151670h case   48:*/		return 0x82151674;
		  /* 82151674h */ case   49:  		/* lwzx R5, <#[R10 + R11]> */
		/* 82151674h case   49:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82151674h case   49:*/		return 0x82151678;
		  /* 82151678h */ case   50:  		/* b 16 */
		/* 82151678h case   50:*/		return 0x82151688;
		/* 82151678h case   50:*/		return 0x8215167C;
	}
	return 0x8215167C;
} // Block from 821515B0h-8215167Ch (51 instructions)

//////////////////////////////////////////////////////
// Block at 8215167Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215167C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215167C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215167C);
		  /* 8215167Ch */ case    0:  		/* lis R11, -32253 */
		/* 8215167Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215167Ch case    0:*/		return 0x82151680;
		  /* 82151680h */ case    1:  		/* mr R5, R30 */
		/* 82151680h case    1:*/		regs.R5 = regs.R30;
		/* 82151680h case    1:*/		return 0x82151684;
		  /* 82151684h */ case    2:  		/* addi R4, R11, 31012 */
		/* 82151684h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7924);
		/* 82151684h case    2:*/		return 0x82151688;
	}
	return 0x82151688;
} // Block from 8215167Ch-82151688h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82151688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151688);
		  /* 82151688h */ case    0:  		/* bl -13936 */
		/* 82151688h case    0:*/		regs.LR = 0x8215168C; return 0x8214E018;
		/* 82151688h case    0:*/		return 0x8215168C;
		  /* 8215168Ch */ case    1:  		/* lis R11, -32253 */
		/* 8215168Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 8215168Ch case    1:*/		return 0x82151690;
		  /* 82151690h */ case    2:  		/* addi R3, R1, 80 */
		/* 82151690h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82151690h case    2:*/		return 0x82151694;
		  /* 82151694h */ case    3:  		/* addi R4, R11, 31008 */
		/* 82151694h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7920);
		/* 82151694h case    3:*/		return 0x82151698;
	}
	return 0x82151698;
} // Block from 82151688h-82151698h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82151698h
// Function '?DisassembleR500MicrocodePassPreamble@XGRAPHICS@@YAJKW4UCODESHADERTYPE@@PBU_UCODE_HEADER@@KPAVOutStream@1@K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151698);
		  /* 82151698h */ case    0:  		/* bl -13952 */
		/* 82151698h case    0:*/		regs.LR = 0x8215169C; return 0x8214E018;
		/* 82151698h case    0:*/		return 0x8215169C;
		  /* 8215169Ch */ case    1:  		/* lis R11, -32217 */
		/* 8215169Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 8215169Ch case    1:*/		return 0x821516A0;
		  /* 821516A0h */ case    2:  		/* addi R3, R1, 80 */
		/* 821516A0h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821516A0h case    2:*/		return 0x821516A4;
		  /* 821516A4h */ case    3:  		/* lwz R4, <#[R11 + 18340]> */
		/* 821516A4h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x000047A4) );
		/* 821516A4h case    3:*/		return 0x821516A8;
		  /* 821516A8h */ case    4:  		/* bl -11256 */
		/* 821516A8h case    4:*/		regs.LR = 0x821516AC; return 0x8214EAB0;
		/* 821516A8h case    4:*/		return 0x821516AC;
		  /* 821516ACh */ case    5:  		/* lis R11, -32217 */
		/* 821516ACh case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 821516ACh case    5:*/		return 0x821516B0;
		  /* 821516B0h */ case    6:  		/* addi R3, R1, 80 */
		/* 821516B0h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821516B0h case    6:*/		return 0x821516B4;
		  /* 821516B4h */ case    7:  		/* lwz R4, <#[R11 + 18336]> */
		/* 821516B4h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x000047A0) );
		/* 821516B4h case    7:*/		return 0x821516B8;
		  /* 821516B8h */ case    8:  		/* bl -11272 */
		/* 821516B8h case    8:*/		regs.LR = 0x821516BC; return 0x8214EAB0;
		/* 821516B8h case    8:*/		return 0x821516BC;
		  /* 821516BCh */ case    9:  		/* addi R7, R1, 80 */
		/* 821516BCh case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 821516BCh case    9:*/		return 0x821516C0;
		  /* 821516C0h */ case   10:  		/* mr R6, R29 */
		/* 821516C0h case   10:*/		regs.R6 = regs.R29;
		/* 821516C0h case   10:*/		return 0x821516C4;
		  /* 821516C4h */ case   11:  		/* mr R5, R31 */
		/* 821516C4h case   11:*/		regs.R5 = regs.R31;
		/* 821516C4h case   11:*/		return 0x821516C8;
		  /* 821516C8h */ case   12:  		/* mr R4, R30 */
		/* 821516C8h case   12:*/		regs.R4 = regs.R30;
		/* 821516C8h case   12:*/		return 0x821516CC;
		  /* 821516CCh */ case   13:  		/* mr R3, R28 */
		/* 821516CCh case   13:*/		regs.R3 = regs.R28;
		/* 821516CCh case   13:*/		return 0x821516D0;
		  /* 821516D0h */ case   14:  		/* bl -2784 */
		/* 821516D0h case   14:*/		regs.LR = 0x821516D4; return 0x82150BF0;
		/* 821516D0h case   14:*/		return 0x821516D4;
		  /* 821516D4h */ case   15:  		/* mr R6, R29 */
		/* 821516D4h case   15:*/		regs.R6 = regs.R29;
		/* 821516D4h case   15:*/		return 0x821516D8;
		  /* 821516D8h */ case   16:  		/* mr R5, R31 */
		/* 821516D8h case   16:*/		regs.R5 = regs.R31;
		/* 821516D8h case   16:*/		return 0x821516DC;
		  /* 821516DCh */ case   17:  		/* mr R4, R30 */
		/* 821516DCh case   17:*/		regs.R4 = regs.R30;
		/* 821516DCh case   17:*/		return 0x821516E0;
		  /* 821516E0h */ case   18:  		/* addi R3, R1, 80 */
		/* 821516E0h case   18:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821516E0h case   18:*/		return 0x821516E4;
		  /* 821516E4h */ case   19:  		/* bl -11500 */
		/* 821516E4h case   19:*/		regs.LR = 0x821516E8; return 0x8214E9F8;
		/* 821516E4h case   19:*/		return 0x821516E8;
		  /* 821516E8h */ case   20:  		/* cmpwi CR0, R3, 0 */
		/* 821516E8h case   20:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821516E8h case   20:*/		return 0x821516EC;
		  /* 821516ECh */ case   21:  		/* bc 12, CR0_LT, 476 */
		/* 821516ECh case   21:*/		if ( regs.CR[0].lt ) { return 0x821518C8;  }
		/* 821516ECh case   21:*/		return 0x821516F0;
		  /* 821516F0h */ case   22:  		/* li R8, 0 */
		/* 821516F0h case   22:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821516F0h case   22:*/		return 0x821516F4;
		  /* 821516F4h */ case   23:  		/* addi R7, R1, 80 */
		/* 821516F4h case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 821516F4h case   23:*/		return 0x821516F8;
		  /* 821516F8h */ case   24:  		/* mr R6, R29 */
		/* 821516F8h case   24:*/		regs.R6 = regs.R29;
		/* 821516F8h case   24:*/		return 0x821516FC;
		  /* 821516FCh */ case   25:  		/* mr R5, R31 */
		/* 821516FCh case   25:*/		regs.R5 = regs.R31;
		/* 821516FCh case   25:*/		return 0x82151700;
		  /* 82151700h */ case   26:  		/* mr R4, R30 */
		/* 82151700h case   26:*/		regs.R4 = regs.R30;
		/* 82151700h case   26:*/		return 0x82151704;
		  /* 82151704h */ case   27:  		/* mr R3, R28 */
		/* 82151704h case   27:*/		regs.R3 = regs.R28;
		/* 82151704h case   27:*/		return 0x82151708;
		  /* 82151708h */ case   28:  		/* bl -2608 */
		/* 82151708h case   28:*/		regs.LR = 0x8215170C; return 0x82150CD8;
		/* 82151708h case   28:*/		return 0x8215170C;
		  /* 8215170Ch */ case   29:  		/* cmpwi CR0, R3, 0 */
		/* 8215170Ch case   29:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215170Ch case   29:*/		return 0x82151710;
		  /* 82151710h */ case   30:  		/* bc 12, CR0_LT, 80 */
		/* 82151710h case   30:*/		if ( regs.CR[0].lt ) { return 0x82151760;  }
		/* 82151710h case   30:*/		return 0x82151714;
		  /* 82151714h */ case   31:  		/* li R8, 0 */
		/* 82151714h case   31:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82151714h case   31:*/		return 0x82151718;
		  /* 82151718h */ case   32:  		/* mr R7, R26 */
		/* 82151718h case   32:*/		regs.R7 = regs.R26;
		/* 82151718h case   32:*/		return 0x8215171C;
		  /* 8215171Ch */ case   33:  		/* mr R6, R29 */
		/* 8215171Ch case   33:*/		regs.R6 = regs.R29;
		/* 8215171Ch case   33:*/		return 0x82151720;
		  /* 82151720h */ case   34:  		/* mr R5, R31 */
		/* 82151720h case   34:*/		regs.R5 = regs.R31;
		/* 82151720h case   34:*/		return 0x82151724;
		  /* 82151724h */ case   35:  		/* mr R4, R30 */
		/* 82151724h case   35:*/		regs.R4 = regs.R30;
		/* 82151724h case   35:*/		return 0x82151728;
		  /* 82151728h */ case   36:  		/* addi R3, R1, 80 */
		/* 82151728h case   36:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82151728h case   36:*/		return 0x8215172C;
		  /* 8215172Ch */ case   37:  		/* bl -580 */
		/* 8215172Ch case   37:*/		regs.LR = 0x82151730; return 0x821514E8;
		/* 8215172Ch case   37:*/		return 0x82151730;
		  /* 82151730h */ case   38:  		/* cmpwi CR0, R3, 0 */
		/* 82151730h case   38:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82151730h case   38:*/		return 0x82151734;
		  /* 82151734h */ case   39:  		/* bc 12, CR0_LT, 44 */
		/* 82151734h case   39:*/		if ( regs.CR[0].lt ) { return 0x82151760;  }
		/* 82151734h case   39:*/		return 0x82151738;
		  /* 82151738h */ case   40:  		/* lwz R11, <#[R31 + 4]> */
		/* 82151738h case   40:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82151738h case   40:*/		return 0x8215173C;
		  /* 8215173Ch */ case   41:  		/* li R10, 0 */
		/* 8215173Ch case   41:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8215173Ch case   41:*/		return 0x82151740;
		  /* 82151740h */ case   42:  		/* addi R9, R1, 80 */
		/* 82151740h case   42:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 82151740h case   42:*/		return 0x82151744;
		  /* 82151744h */ case   43:  		/* lwz R8, <#[R31 + 8]> */
		/* 82151744h case   43:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 82151744h case   43:*/		return 0x82151748;
		  /* 82151748h */ case   44:  		/* add R7, R11, R31 */
		/* 82151748h case   44:*/		cpu::op::add<0>(regs,&regs.R7,regs.R11,regs.R31);
		/* 82151748h case   44:*/		return 0x8215174C;
		  /* 8215174Ch */ case   45:  		/* mr R6, R29 */
		/* 8215174Ch case   45:*/		regs.R6 = regs.R29;
		/* 8215174Ch case   45:*/		return 0x82151750;
		  /* 82151750h */ case   46:  		/* mr R5, R31 */
		/* 82151750h case   46:*/		regs.R5 = regs.R31;
		/* 82151750h case   46:*/		return 0x82151754;
		  /* 82151754h */ case   47:  		/* mr R4, R30 */
		/* 82151754h case   47:*/		regs.R4 = regs.R30;
		/* 82151754h case   47:*/		return 0x82151758;
		  /* 82151758h */ case   48:  		/* mr R3, R28 */
		/* 82151758h case   48:*/		regs.R3 = regs.R28;
		/* 82151758h case   48:*/		return 0x8215175C;
		  /* 8215175Ch */ case   49:  		/* bl -6436 */
		/* 8215175Ch case   49:*/		regs.LR = 0x82151760; return 0x8214FE38;
		/* 8215175Ch case   49:*/		return 0x82151760;
	}
	return 0x82151760;
} // Block from 82151698h-82151760h (50 instructions)

//////////////////////////////////////////////////////
// Block at 82151760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151760);
		  /* 82151760h */ case    0:  		/* rlwinm. R27, R28, 0, 20, 20 */
		/* 82151760h case    0:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R27,regs.R28);
		/* 82151760h case    0:*/		return 0x82151764;
		  /* 82151764h */ case    1:  		/* bc 12, CR0_EQ, 36 */
		/* 82151764h case    1:*/		if ( regs.CR[0].eq ) { return 0x82151788;  }
		/* 82151764h case    1:*/		return 0x82151768;
		  /* 82151768h */ case    2:  		/* addi R6, R1, 80 */
		/* 82151768h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82151768h case    2:*/		return 0x8215176C;
		  /* 8215176Ch */ case    3:  		/* li R5, 0 */
		/* 8215176Ch case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8215176Ch case    3:*/		return 0x82151770;
		  /* 82151770h */ case    4:  		/* mr R4, R30 */
		/* 82151770h case    4:*/		regs.R4 = regs.R30;
		/* 82151770h case    4:*/		return 0x82151774;
		  /* 82151774h */ case    5:  		/* mr R3, R26 */
		/* 82151774h case    5:*/		regs.R3 = regs.R26;
		/* 82151774h case    5:*/		return 0x82151778;
		  /* 82151778h */ case    6:  		/* bl -5592 */
		/* 82151778h case    6:*/		regs.LR = 0x8215177C; return 0x821501A0;
		/* 82151778h case    6:*/		return 0x8215177C;
		  /* 8215177Ch */ case    7:  		/* cmpwi CR0, R3, 0 */
		/* 8215177Ch case    7:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215177Ch case    7:*/		return 0x82151780;
		  /* 82151780h */ case    8:  		/* bc 4, CR0_LT, 16 */
		/* 82151780h case    8:*/		if ( !regs.CR[0].lt ) { return 0x82151790;  }
		/* 82151780h case    8:*/		return 0x82151784;
		  /* 82151784h */ case    9:  		/* b 324 */
		/* 82151784h case    9:*/		return 0x821518C8;
		/* 82151784h case    9:*/		return 0x82151788;
	}
	return 0x82151788;
} // Block from 82151760h-82151788h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82151788h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151788);
		  /* 82151788h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 82151788h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82151788h case    0:*/		return 0x8215178C;
		  /* 8215178Ch */ case    1:  		/* bc 12, CR6_LT, 316 */
		/* 8215178Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x821518C8;  }
		/* 8215178Ch case    1:*/		return 0x82151790;
	}
	return 0x82151790;
} // Block from 82151788h-82151790h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82151790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151790);
		  /* 82151790h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82151790h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82151790h case    0:*/		return 0x82151794;
		  /* 82151794h */ case    1:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 82151794h case    1:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 82151794h case    1:*/		return 0x82151798;
		  /* 82151798h */ case    2:  		/* bc 12, CR0_EQ, 208 */
		/* 82151798h case    2:*/		if ( regs.CR[0].eq ) { return 0x82151868;  }
		/* 82151798h case    2:*/		return 0x8215179C;
		  /* 8215179Ch */ case    3:  		/* lis R11, -32255 */
		/* 8215179Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 8215179Ch case    3:*/		return 0x821517A0;
		  /* 821517A0h */ case    4:  		/* addi R3, R1, 80 */
		/* 821517A0h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821517A0h case    4:*/		return 0x821517A4;
		  /* 821517A4h */ case    5:  		/* addi R4, R11, 12860 */
		/* 821517A4h case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x323C);
		/* 821517A4h case    5:*/		return 0x821517A8;
		  /* 821517A8h */ case    6:  		/* bl -3968 */
		/* 821517A8h case    6:*/		regs.LR = 0x821517AC; return 0x82150828;
		/* 821517A8h case    6:*/		return 0x821517AC;
		  /* 821517ACh */ case    7:  		/* lis R11, -32253 */
		/* 821517ACh case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821517ACh case    7:*/		return 0x821517B0;
		  /* 821517B0h */ case    8:  		/* addi R3, R1, 80 */
		/* 821517B0h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821517B0h case    8:*/		return 0x821517B4;
		  /* 821517B4h */ case    9:  		/* addi R4, R11, 28332 */
		/* 821517B4h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6EAC);
		/* 821517B4h case    9:*/		return 0x821517B8;
		  /* 821517B8h */ case   10:  		/* bl -11528 */
		/* 821517B8h case   10:*/		regs.LR = 0x821517BC; return 0x8214EAB0;
		/* 821517B8h case   10:*/		return 0x821517BC;
		  /* 821517BCh */ case   11:  		/* lis R11, -32256 */
		/* 821517BCh case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821517BCh case   11:*/		return 0x821517C0;
		  /* 821517C0h */ case   12:  		/* addi R3, R1, 80 */
		/* 821517C0h case   12:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821517C0h case   12:*/		return 0x821517C4;
		  /* 821517C4h */ case   13:  		/* addi R4, R11, 17768 */
		/* 821517C4h case   13:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x4568);
		/* 821517C4h case   13:*/		return 0x821517C8;
		  /* 821517C8h */ case   14:  		/* bl -14256 */
		/* 821517C8h case   14:*/		regs.LR = 0x821517CC; return 0x8214E018;
		/* 821517C8h case   14:*/		return 0x821517CC;
		  /* 821517CCh */ case   15:  		/* li R8, 1 */
		/* 821517CCh case   15:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821517CCh case   15:*/		return 0x821517D0;
		  /* 821517D0h */ case   16:  		/* addi R7, R1, 80 */
		/* 821517D0h case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 821517D0h case   16:*/		return 0x821517D4;
		  /* 821517D4h */ case   17:  		/* mr R6, R29 */
		/* 821517D4h case   17:*/		regs.R6 = regs.R29;
		/* 821517D4h case   17:*/		return 0x821517D8;
		  /* 821517D8h */ case   18:  		/* mr R5, R31 */
		/* 821517D8h case   18:*/		regs.R5 = regs.R31;
		/* 821517D8h case   18:*/		return 0x821517DC;
		  /* 821517DCh */ case   19:  		/* mr R4, R30 */
		/* 821517DCh case   19:*/		regs.R4 = regs.R30;
		/* 821517DCh case   19:*/		return 0x821517E0;
		  /* 821517E0h */ case   20:  		/* mr R3, R28 */
		/* 821517E0h case   20:*/		regs.R3 = regs.R28;
		/* 821517E0h case   20:*/		return 0x821517E4;
		  /* 821517E4h */ case   21:  		/* bl -2828 */
		/* 821517E4h case   21:*/		regs.LR = 0x821517E8; return 0x82150CD8;
		/* 821517E4h case   21:*/		return 0x821517E8;
		  /* 821517E8h */ case   22:  		/* cmpwi CR0, R3, 0 */
		/* 821517E8h case   22:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821517E8h case   22:*/		return 0x821517EC;
		  /* 821517ECh */ case   23:  		/* bc 12, CR0_LT, 220 */
		/* 821517ECh case   23:*/		if ( regs.CR[0].lt ) { return 0x821518C8;  }
		/* 821517ECh case   23:*/		return 0x821517F0;
		  /* 821517F0h */ case   24:  		/* li R8, 1 */
		/* 821517F0h case   24:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821517F0h case   24:*/		return 0x821517F4;
		  /* 821517F4h */ case   25:  		/* mr R7, R26 */
		/* 821517F4h case   25:*/		regs.R7 = regs.R26;
		/* 821517F4h case   25:*/		return 0x821517F8;
		  /* 821517F8h */ case   26:  		/* mr R6, R29 */
		/* 821517F8h case   26:*/		regs.R6 = regs.R29;
		/* 821517F8h case   26:*/		return 0x821517FC;
		  /* 821517FCh */ case   27:  		/* mr R5, R31 */
		/* 821517FCh case   27:*/		regs.R5 = regs.R31;
		/* 821517FCh case   27:*/		return 0x82151800;
		  /* 82151800h */ case   28:  		/* mr R4, R30 */
		/* 82151800h case   28:*/		regs.R4 = regs.R30;
		/* 82151800h case   28:*/		return 0x82151804;
		  /* 82151804h */ case   29:  		/* addi R3, R1, 80 */
		/* 82151804h case   29:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82151804h case   29:*/		return 0x82151808;
		  /* 82151808h */ case   30:  		/* bl -800 */
		/* 82151808h case   30:*/		regs.LR = 0x8215180C; return 0x821514E8;
		/* 82151808h case   30:*/		return 0x8215180C;
		  /* 8215180Ch */ case   31:  		/* cmpwi CR0, R3, 0 */
		/* 8215180Ch case   31:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215180Ch case   31:*/		return 0x82151810;
		  /* 82151810h */ case   32:  		/* bc 12, CR0_LT, 184 */
		/* 82151810h case   32:*/		if ( regs.CR[0].lt ) { return 0x821518C8;  }
		/* 82151810h case   32:*/		return 0x82151814;
		  /* 82151814h */ case   33:  		/* lwz R11, <#[R31 + 4]> */
		/* 82151814h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82151814h case   33:*/		return 0x82151818;
		  /* 82151818h */ case   34:  		/* li R10, 1 */
		/* 82151818h case   34:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82151818h case   34:*/		return 0x8215181C;
		  /* 8215181Ch */ case   35:  		/* addi R9, R1, 80 */
		/* 8215181Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 8215181Ch case   35:*/		return 0x82151820;
		  /* 82151820h */ case   36:  		/* lwz R8, <#[R31 + 8]> */
		/* 82151820h case   36:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000008) );
		/* 82151820h case   36:*/		return 0x82151824;
		  /* 82151824h */ case   37:  		/* add R7, R11, R31 */
		/* 82151824h case   37:*/		cpu::op::add<0>(regs,&regs.R7,regs.R11,regs.R31);
		/* 82151824h case   37:*/		return 0x82151828;
		  /* 82151828h */ case   38:  		/* mr R6, R29 */
		/* 82151828h case   38:*/		regs.R6 = regs.R29;
		/* 82151828h case   38:*/		return 0x8215182C;
		  /* 8215182Ch */ case   39:  		/* mr R5, R31 */
		/* 8215182Ch case   39:*/		regs.R5 = regs.R31;
		/* 8215182Ch case   39:*/		return 0x82151830;
		  /* 82151830h */ case   40:  		/* mr R4, R30 */
		/* 82151830h case   40:*/		regs.R4 = regs.R30;
		/* 82151830h case   40:*/		return 0x82151834;
		  /* 82151834h */ case   41:  		/* mr R3, R28 */
		/* 82151834h case   41:*/		regs.R3 = regs.R28;
		/* 82151834h case   41:*/		return 0x82151838;
		  /* 82151838h */ case   42:  		/* bl -6656 */
		/* 82151838h case   42:*/		regs.LR = 0x8215183C; return 0x8214FE38;
		/* 82151838h case   42:*/		return 0x8215183C;
		  /* 8215183Ch */ case   43:  		/* cmpwi CR0, R3, 0 */
		/* 8215183Ch case   43:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215183Ch case   43:*/		return 0x82151840;
		  /* 82151840h */ case   44:  		/* bc 12, CR0_LT, 136 */
		/* 82151840h case   44:*/		if ( regs.CR[0].lt ) { return 0x821518C8;  }
		/* 82151840h case   44:*/		return 0x82151844;
		  /* 82151844h */ case   45:  		/* cmplwi CR6, R27, 0 */
		/* 82151844h case   45:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82151844h case   45:*/		return 0x82151848;
		  /* 82151848h */ case   46:  		/* bc 12, CR6_EQ, 32 */
		/* 82151848h case   46:*/		if ( regs.CR[6].eq ) { return 0x82151868;  }
		/* 82151848h case   46:*/		return 0x8215184C;
		  /* 8215184Ch */ case   47:  		/* addi R6, R1, 80 */
		/* 8215184Ch case   47:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8215184Ch case   47:*/		return 0x82151850;
		  /* 82151850h */ case   48:  		/* li R5, 1 */
		/* 82151850h case   48:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 82151850h case   48:*/		return 0x82151854;
		  /* 82151854h */ case   49:  		/* mr R4, R30 */
		/* 82151854h case   49:*/		regs.R4 = regs.R30;
		/* 82151854h case   49:*/		return 0x82151858;
		  /* 82151858h */ case   50:  		/* mr R3, R26 */
		/* 82151858h case   50:*/		regs.R3 = regs.R26;
		/* 82151858h case   50:*/		return 0x8215185C;
		  /* 8215185Ch */ case   51:  		/* bl -5820 */
		/* 8215185Ch case   51:*/		regs.LR = 0x82151860; return 0x821501A0;
		/* 8215185Ch case   51:*/		return 0x82151860;
		  /* 82151860h */ case   52:  		/* cmpwi CR0, R3, 0 */
		/* 82151860h case   52:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82151860h case   52:*/		return 0x82151864;
		  /* 82151864h */ case   53:  		/* bc 12, CR0_LT, 100 */
		/* 82151864h case   53:*/		if ( regs.CR[0].lt ) { return 0x821518C8;  }
		/* 82151864h case   53:*/		return 0x82151868;
	}
	return 0x82151868;
} // Block from 82151790h-82151868h (54 instructions)

//////////////////////////////////////////////////////
// Block at 82151868h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151868);
		  /* 82151868h */ case    0:  		/* lwz R30, <#[R31 + 12]> */
		/* 82151868h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 82151868h case    0:*/		return 0x8215186C;
		  /* 8215186Ch */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8215186Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8215186Ch case    1:*/		return 0x82151870;
		  /* 82151870h */ case    2:  		/* bc 12, CR6_EQ, 56 */
		/* 82151870h case    2:*/		if ( regs.CR[6].eq ) { return 0x821518A8;  }
		/* 82151870h case    2:*/		return 0x82151874;
		  /* 82151874h */ case    3:  		/* lis R11, -32253 */
		/* 82151874h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82151874h case    3:*/		return 0x82151878;
		  /* 82151878h */ case    4:  		/* addi R3, R1, 80 */
		/* 82151878h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82151878h case    4:*/		return 0x8215187C;
		  /* 8215187Ch */ case    5:  		/* addi R4, R11, 28356 */
		/* 8215187Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6EC4);
		/* 8215187Ch case    5:*/		return 0x82151880;
		  /* 82151880h */ case    6:  		/* bl -11728 */
		/* 82151880h case    6:*/		regs.LR = 0x82151884; return 0x8214EAB0;
		/* 82151880h case    6:*/		return 0x82151884;
		  /* 82151884h */ case    7:  		/* addi R4, R1, 80 */
		/* 82151884h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82151884h case    7:*/		return 0x82151888;
		  /* 82151888h */ case    8:  		/* add R3, R30, R31 */
		/* 82151888h case    8:*/		cpu::op::add<0>(regs,&regs.R3,regs.R30,regs.R31);
		/* 82151888h case    8:*/		return 0x8215188C;
		  /* 8215188Ch */ case    9:  		/* bl -8684 */
		/* 8215188Ch case    9:*/		regs.LR = 0x82151890; return 0x8214F6A0;
		/* 8215188Ch case    9:*/		return 0x82151890;
		  /* 82151890h */ case   10:  		/* cmpwi CR0, R3, 0 */
		/* 82151890h case   10:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 82151890h case   10:*/		return 0x82151894;
		  /* 82151894h */ case   11:  		/* bc 12, CR0_LT, 52 */
		/* 82151894h case   11:*/		if ( regs.CR[0].lt ) { return 0x821518C8;  }
		/* 82151894h case   11:*/		return 0x82151898;
		  /* 82151898h */ case   12:  		/* lis R11, -32253 */
		/* 82151898h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82151898h case   12:*/		return 0x8215189C;
		  /* 8215189Ch */ case   13:  		/* addi R3, R1, 80 */
		/* 8215189Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8215189Ch case   13:*/		return 0x821518A0;
		  /* 821518A0h */ case   14:  		/* addi R4, R11, 28348 */
		/* 821518A0h case   14:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x6EBC);
		/* 821518A0h case   14:*/		return 0x821518A4;
		  /* 821518A4h */ case   15:  		/* bl -11764 */
		/* 821518A4h case   15:*/		regs.LR = 0x821518A8; return 0x8214EAB0;
		/* 821518A4h case   15:*/		return 0x821518A8;
	}
	return 0x821518A8;
} // Block from 82151868h-821518A8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821518A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821518A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821518A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821518A8);
		  /* 821518A8h */ case    0:  		/* lis R11, -32253 */
		/* 821518A8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 821518A8h case    0:*/		return 0x821518AC;
		  /* 821518ACh */ case    1:  		/* addi R3, R1, 80 */
		/* 821518ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821518ACh case    1:*/		return 0x821518B0;
		  /* 821518B0h */ case    2:  		/* addi R4, R11, 31004 */
		/* 821518B0h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x791C);
		/* 821518B0h case    2:*/		return 0x821518B4;
		  /* 821518B4h */ case    3:  		/* bl -11780 */
		/* 821518B4h case    3:*/		regs.LR = 0x821518B8; return 0x8214EAB0;
		/* 821518B4h case    3:*/		return 0x821518B8;
		  /* 821518B8h */ case    4:  		/* lwz R3, <#[R1 + 88]> */
		/* 821518B8h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000058) );
		/* 821518B8h case    4:*/		return 0x821518BC;
		  /* 821518BCh */ case    5:  		/* b 12 */
		/* 821518BCh case    5:*/		return 0x821518C8;
		/* 821518BCh case    5:*/		return 0x821518C0;
	}
	return 0x821518C0;
} // Block from 821518A8h-821518C0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821518C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821518C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821518C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821518C0);
		  /* 821518C0h */ case    0:  		/* lis R3, -32761 */
		/* 821518C0h case    0:*/		cpu::op::lis<0>(regs,&regs.R3,0xFFFF8007);
		/* 821518C0h case    0:*/		return 0x821518C4;
		  /* 821518C4h */ case    1:  		/* ori R3, R3, 87 */
		/* 821518C4h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x57);
		/* 821518C4h case    1:*/		return 0x821518C8;
	}
	return 0x821518C8;
} // Block from 821518C0h-821518C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821518C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821518C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821518C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821518C8);
		  /* 821518C8h */ case    0:  		/* addi R1, R1, 160 */
		/* 821518C8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821518C8h case    0:*/		return 0x821518CC;
		  /* 821518CCh */ case    1:  		/* b -788012 */
		/* 821518CCh case    1:*/		return 0x820912A0;
		/* 821518CCh case    1:*/		return 0x821518D0;
	}
	return 0x821518D0;
} // Block from 821518C8h-821518D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821518D0h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821518D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821518D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821518D0);
		  /* 821518D0h */ case    0:  		/* mr R8, R3 */
		/* 821518D0h case    0:*/		regs.R8 = regs.R3;
		/* 821518D0h case    0:*/		return 0x821518D4;
		  /* 821518D4h */ case    1:  		/* b -828 */
		/* 821518D4h case    1:*/		return 0x82151598;
		/* 821518D4h case    1:*/		return 0x821518D8;
		  /* 821518D8h */ case    2:  		/* stw R3, <#[R1 + 20]> */
		/* 821518D8h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000014) );
		/* 821518D8h case    2:*/		return 0x821518DC;
		  /* 821518DCh */ case    3:  		/* stw R4, <#[R1 + 28]> */
		/* 821518DCh case    3:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000001C) );
		/* 821518DCh case    3:*/		return 0x821518E0;
		  /* 821518E0h */ case    4:  		/* lwz R11, <#[R1 + 20]> */
		/* 821518E0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000014) );
		/* 821518E0h case    4:*/		return 0x821518E4;
		  /* 821518E4h */ case    5:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821518E4h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821518E4h case    5:*/		return 0x821518E8;
		  /* 821518E8h */ case    6:  		/* rlwinm R11, R11, 0, 26, 22 */
		/* 821518E8h case    6:*/		cpu::op::rlwinm<0,0,26,22>(regs,&regs.R11,regs.R11);
		/* 821518E8h case    6:*/		return 0x821518EC;
		  /* 821518ECh */ case    7:  		/* stw R11, <#[R1 + 20]> */
		/* 821518ECh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000014) );
		/* 821518ECh case    7:*/		return 0x821518F0;
		  /* 821518F0h */ case    8:  		/* lwz R11, <#[R1 + 20]> */
		/* 821518F0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000014) );
		/* 821518F0h case    8:*/		return 0x821518F4;
		  /* 821518F4h */ case    9:  		/* lwz R10, <#[R1 + 28]> */
		/* 821518F4h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000001C) );
		/* 821518F4h case    9:*/		return 0x821518F8;
		  /* 821518F8h */ case   10:  		/* stw R11, <#[R10]> */
		/* 821518F8h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821518F8h case   10:*/		return 0x821518FC;
		  /* 821518FCh */ case   11:  		/* lwz R11, <#[R1 + 28]> */
		/* 821518FCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000001C) );
		/* 821518FCh case   11:*/		return 0x82151900;
		  /* 82151900h */ case   12:  		/* li R10, 0 */
		/* 82151900h case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82151900h case   12:*/		return 0x82151904;
		  /* 82151904h */ case   13:  		/* stw R10, <#[R11 + 4]> */
		/* 82151904h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82151904h case   13:*/		return 0x82151908;
		  /* 82151908h */ case   14:  		/* lwz R11, <#[R1 + 28]> */
		/* 82151908h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000001C) );
		/* 82151908h case   14:*/		return 0x8215190C;
		  /* 8215190Ch */ case   15:  		/* li R10, 0 */
		/* 8215190Ch case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8215190Ch case   15:*/		return 0x82151910;
		  /* 82151910h */ case   16:  		/* stb R10, <#[R11 + 8]> */
		/* 82151910h case   16:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82151910h case   16:*/		return 0x82151914;
		  /* 82151914h */ case   17:  		/* bclr 20, CR0_LT */
		/* 82151914h case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82151914h case   17:*/		return 0x82151918;
	}
	return 0x82151918;
} // Block from 821518D0h-82151918h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82151918h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151918( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151918) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151918);
		  /* 82151918h */ case    0:  		/* mfspr R12, LR */
		/* 82151918h case    0:*/		regs.R12 = regs.LR;
		/* 82151918h case    0:*/		return 0x8215191C;
		  /* 8215191Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215191Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215191Ch case    1:*/		return 0x82151920;
		  /* 82151920h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 82151920h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82151920h case    2:*/		return 0x82151924;
		  /* 82151924h */ case    3:  		/* stw R3, <#[R1 + 116]> */
		/* 82151924h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000074) );
		/* 82151924h case    3:*/		return 0x82151928;
		  /* 82151928h */ case    4:  		/* stw R4, <#[R1 + 124]> */
		/* 82151928h case    4:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000007C) );
		/* 82151928h case    4:*/		return 0x8215192C;
		  /* 8215192Ch */ case    5:  		/* stw R5, <#[R1 + 132]> */
		/* 8215192Ch case    5:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000084) );
		/* 8215192Ch case    5:*/		return 0x82151930;
		  /* 82151930h */ case    6:  		/* li R3, 2496 */
		/* 82151930h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x9C0);
		/* 82151930h case    6:*/		return 0x82151934;
		  /* 82151934h */ case    7:  		/* bl -731612 */
		/* 82151934h case    7:*/		regs.LR = 0x82151938; return 0x8209EF58;
		/* 82151934h case    7:*/		return 0x82151938;
		  /* 82151938h */ case    8:  		/* stw R3, <#[R1 + 80]> */
		/* 82151938h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 82151938h case    8:*/		return 0x8215193C;
		  /* 8215193Ch */ case    9:  		/* lwz R11, <#[R1 + 80]> */
		/* 8215193Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8215193Ch case    9:*/		return 0x82151940;
		  /* 82151940h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 82151940h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82151940h case   10:*/		return 0x82151944;
		  /* 82151944h */ case   11:  		/* bc 4, CR6_EQ, 16 */
		/* 82151944h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82151954;  }
		/* 82151944h case   11:*/		return 0x82151948;
		  /* 82151948h */ case   12:  		/* lis R11, -32761 */
		/* 82151948h case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8007);
		/* 82151948h case   12:*/		return 0x8215194C;
		  /* 8215194Ch */ case   13:  		/* ori R3, R11, 14 */
		/* 8215194Ch case   13:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R11,0xE);
		/* 8215194Ch case   13:*/		return 0x82151950;
		  /* 82151950h */ case   14:  		/* b 60 */
		/* 82151950h case   14:*/		return 0x8215198C;
		/* 82151950h case   14:*/		return 0x82151954;
	}
	return 0x82151954;
} // Block from 82151918h-82151954h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82151954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151954);
		  /* 82151954h */ case    0:  		/* lwz R11, <#[R1 + 116]> */
		/* 82151954h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 82151954h case    0:*/		return 0x82151958;
		  /* 82151958h */ case    1:  		/* lwz R10, <#[R1 + 80]> */
		/* 82151958h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82151958h case    1:*/		return 0x8215195C;
		  /* 8215195Ch */ case    2:  		/* stw R10, <#[R11 + 4]> */
		/* 8215195Ch case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8215195Ch case    2:*/		return 0x82151960;
		  /* 82151960h */ case    3:  		/* li R5, 2496 */
		/* 82151960h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x9C0);
		/* 82151960h case    3:*/		return 0x82151964;
		  /* 82151964h */ case    4:  		/* li R4, 0 */
		/* 82151964h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82151964h case    4:*/		return 0x82151968;
		  /* 82151968h */ case    5:  		/* lwz R3, <#[R1 + 80]> */
		/* 82151968h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 82151968h case    5:*/		return 0x8215196C;
		  /* 8215196Ch */ case    6:  		/* bl -788012 */
		/* 8215196Ch case    6:*/		regs.LR = 0x82151970; return 0x82091340;
		/* 8215196Ch case    6:*/		return 0x82151970;
		  /* 82151970h */ case    7:  		/* lwz R11, <#[R1 + 80]> */
		/* 82151970h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82151970h case    7:*/		return 0x82151974;
		  /* 82151974h */ case    8:  		/* lwz R10, <#[R1 + 124]> */
		/* 82151974h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000007C) );
		/* 82151974h case    8:*/		return 0x82151978;
		  /* 82151978h */ case    9:  		/* stw R10, <#[R11 + 2488]> */
		/* 82151978h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x000009B8) );
		/* 82151978h case    9:*/		return 0x8215197C;
		  /* 8215197Ch */ case   10:  		/* lwz R11, <#[R1 + 80]> */
		/* 8215197Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8215197Ch case   10:*/		return 0x82151980;
		  /* 82151980h */ case   11:  		/* lwz R10, <#[R1 + 132]> */
		/* 82151980h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000084) );
		/* 82151980h case   11:*/		return 0x82151984;
		  /* 82151984h */ case   12:  		/* stw R10, <#[R11 + 2492]> */
		/* 82151984h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x000009BC) );
		/* 82151984h case   12:*/		return 0x82151988;
		  /* 82151988h */ case   13:  		/* li R3, 0 */
		/* 82151988h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82151988h case   13:*/		return 0x8215198C;
	}
	return 0x8215198C;
} // Block from 82151954h-8215198Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8215198Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215198C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215198C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215198C);
		  /* 8215198Ch */ case    0:  		/* addi R1, R1, 96 */
		/* 8215198Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 8215198Ch case    0:*/		return 0x82151990;
		  /* 82151990h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82151990h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82151990h case    1:*/		return 0x82151994;
		  /* 82151994h */ case    2:  		/* mtspr LR, R12 */
		/* 82151994h case    2:*/		regs.LR = regs.R12;
		/* 82151994h case    2:*/		return 0x82151998;
		  /* 82151998h */ case    3:  		/* bclr 20, CR0_LT */
		/* 82151998h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82151998h case    3:*/		return 0x8215199C;
	}
	return 0x8215199C;
} // Block from 8215198Ch-8215199Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215199Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215199C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215199C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215199C);
		  /* 8215199Ch */ case    0:  		/* nop */
		/* 8215199Ch case    0:*/		cpu::op::nop();
		/* 8215199Ch case    0:*/		return 0x821519A0;
		  /* 821519A0h */ case    1:  		/* stw R3, <#[R1 + 20]> */
		/* 821519A0h case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000014) );
		/* 821519A0h case    1:*/		return 0x821519A4;
		  /* 821519A4h */ case    2:  		/* stw R4, <#[R1 + 28]> */
		/* 821519A4h case    2:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000001C) );
		/* 821519A4h case    2:*/		return 0x821519A8;
		  /* 821519A8h */ case    3:  		/* lwz R11, <#[R1 + 20]> */
		/* 821519A8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000014) );
		/* 821519A8h case    3:*/		return 0x821519AC;
		  /* 821519ACh */ case    4:  		/* li R10, 0 */
		/* 821519ACh case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821519ACh case    4:*/		return 0x821519B0;
		  /* 821519B0h */ case    5:  		/* stw R10, <#[R11]> */
		/* 821519B0h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821519B0h case    5:*/		return 0x821519B4;
		  /* 821519B4h */ case    6:  		/* lwz R11, <#[R1 + 28]> */
		/* 821519B4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000001C) );
		/* 821519B4h case    6:*/		return 0x821519B8;
		  /* 821519B8h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821519B8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821519B8h case    7:*/		return 0x821519BC;
		  /* 821519BCh */ case    8:  		/* bc 12, CR6_EQ, 16 */
		/* 821519BCh case    8:*/		if ( regs.CR[6].eq ) { return 0x821519CC;  }
		/* 821519BCh case    8:*/		return 0x821519C0;
		  /* 821519C0h */ case    9:  		/* lwz R11, <#[R1 + 28]> */
		/* 821519C0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000001C) );
		/* 821519C0h case    9:*/		return 0x821519C4;
		  /* 821519C4h */ case   10:  		/* li R10, 0 */
		/* 821519C4h case   10:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821519C4h case   10:*/		return 0x821519C8;
		  /* 821519C8h */ case   11:  		/* stw R10, <#[R11]> */
		/* 821519C8h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821519C8h case   11:*/		return 0x821519CC;
	}
	return 0x821519CC;
} // Block from 8215199Ch-821519CCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 821519CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821519CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821519CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821519CC);
		  /* 821519CCh */ case    0:  		/* lis R11, -32768 */
		/* 821519CCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 821519CCh case    0:*/		return 0x821519D0;
		  /* 821519D0h */ case    1:  		/* ori R3, R11, 16387 */
		/* 821519D0h case    1:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R11,0x4003);
		/* 821519D0h case    1:*/		return 0x821519D4;
		  /* 821519D4h */ case    2:  		/* bclr 20, CR0_LT */
		/* 821519D4h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821519D4h case    2:*/		return 0x821519D8;
	}
	return 0x821519D8;
} // Block from 821519CCh-821519D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821519D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821519D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821519D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821519D8);
		  /* 821519D8h */ case    0:  		/* mfspr R12, LR */
		/* 821519D8h case    0:*/		regs.R12 = regs.LR;
		/* 821519D8h case    0:*/		return 0x821519DC;
		  /* 821519DCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821519DCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821519DCh case    1:*/		return 0x821519E0;
		  /* 821519E0h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 821519E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 821519E0h case    2:*/		return 0x821519E4;
		  /* 821519E4h */ case    3:  		/* stw R3, <#[R1 + 116]> */
		/* 821519E4h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000074) );
		/* 821519E4h case    3:*/		return 0x821519E8;
		  /* 821519E8h */ case    4:  		/* stw R4, <#[R1 + 124]> */
		/* 821519E8h case    4:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000007C) );
		/* 821519E8h case    4:*/		return 0x821519EC;
		  /* 821519ECh */ case    5:  		/* stw R5, <#[R1 + 132]> */
		/* 821519ECh case    5:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000084) );
		/* 821519ECh case    5:*/		return 0x821519F0;
		  /* 821519F0h */ case    6:  		/* stw R6, <#[R1 + 140]> */
		/* 821519F0h case    6:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x0000008C) );
		/* 821519F0h case    6:*/		return 0x821519F4;
		  /* 821519F4h */ case    7:  		/* stw R7, <#[R1 + 148]> */
		/* 821519F4h case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000094) );
		/* 821519F4h case    7:*/		return 0x821519F8;
		  /* 821519F8h */ case    8:  		/* lwz R11, <#[R1 + 116]> */
		/* 821519F8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 821519F8h case    8:*/		return 0x821519FC;
		  /* 821519FCh */ case    9:  		/* stw R11, <#[R1 + 80]> */
		/* 821519FCh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821519FCh case    9:*/		return 0x82151A00;
		  /* 82151A00h */ case   10:  		/* lwz R6, <#[R1 + 148]> */
		/* 82151A00h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000094) );
		/* 82151A00h case   10:*/		return 0x82151A04;
		  /* 82151A04h */ case   11:  		/* lwz R5, <#[R1 + 140]> */
		/* 82151A04h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000008C) );
		/* 82151A04h case   11:*/		return 0x82151A08;
		  /* 82151A08h */ case   12:  		/* lwz R4, <#[R1 + 124]> */
		/* 82151A08h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000007C) );
		/* 82151A08h case   12:*/		return 0x82151A0C;
		  /* 82151A0Ch */ case   13:  		/* lwz R11, <#[R1 + 80]> */
		/* 82151A0Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82151A0Ch case   13:*/		return 0x82151A10;
		  /* 82151A10h */ case   14:  		/* lwz R3, <#[R11]> */
		/* 82151A10h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 82151A10h case   14:*/		return 0x82151A14;
		  /* 82151A14h */ case   15:  		/* lwz R11, <#[R1 + 80]> */
		/* 82151A14h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82151A14h case   15:*/		return 0x82151A18;
		  /* 82151A18h */ case   16:  		/* lwz R11, <#[R11 + 4]> */
		/* 82151A18h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82151A18h case   16:*/		return 0x82151A1C;
		  /* 82151A1Ch */ case   17:  		/* mtspr CTR, R11 */
		/* 82151A1Ch case   17:*/		regs.CTR = regs.R11;
		/* 82151A1Ch case   17:*/		return 0x82151A20;
		  /* 82151A20h */ case   18:  		/* bcctrl 20, CR0_LT */
		/* 82151A20h case   18:*/		if ( 1 ) { regs.LR = 0x82151A24; return (uint32)regs.CTR; }
		/* 82151A20h case   18:*/		return 0x82151A24;
		  /* 82151A24h */ case   19:  		/* addi R1, R1, 96 */
		/* 82151A24h case   19:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82151A24h case   19:*/		return 0x82151A28;
		  /* 82151A28h */ case   20:  		/* lwz R12, <#[R1 - 8]> */
		/* 82151A28h case   20:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82151A28h case   20:*/		return 0x82151A2C;
		  /* 82151A2Ch */ case   21:  		/* mtspr LR, R12 */
		/* 82151A2Ch case   21:*/		regs.LR = regs.R12;
		/* 82151A2Ch case   21:*/		return 0x82151A30;
		  /* 82151A30h */ case   22:  		/* bclr 20, CR0_LT */
		/* 82151A30h case   22:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82151A30h case   22:*/		return 0x82151A34;
	}
	return 0x82151A34;
} // Block from 821519D8h-82151A34h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82151A34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151A34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151A34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151A34);
		  /* 82151A34h */ case    0:  		/* nop */
		/* 82151A34h case    0:*/		cpu::op::nop();
		/* 82151A34h case    0:*/		return 0x82151A38;
		  /* 82151A38h */ case    1:  		/* lis R10, -32217 */
		/* 82151A38h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 82151A38h case    1:*/		return 0x82151A3C;
		  /* 82151A3Ch */ case    2:  		/* li R11, 0 */
		/* 82151A3Ch case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82151A3Ch case    2:*/		return 0x82151A40;
		  /* 82151A40h */ case    3:  		/* addi R9, R10, 18360 */
		/* 82151A40h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x47B8);
		/* 82151A40h case    3:*/		return 0x82151A44;
		  /* 82151A44h */ case    4:  		/* mr R10, R9 */
		/* 82151A44h case    4:*/		regs.R10 = regs.R9;
		/* 82151A44h case    4:*/		return 0x82151A48;
		  /* 82151A48h */ case    5:  		/* lhz R8, <#[R10]> */
		/* 82151A48h case    5:*/		cpu::mem::load16z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82151A48h case    5:*/		return 0x82151A4C;
		  /* 82151A4Ch */ case    6:  		/* cmpw CR6, R8, R3 */
		/* 82151A4Ch case    6:*/		cpu::op::cmpw<6>(regs,regs.R8,regs.R3);
		/* 82151A4Ch case    6:*/		return 0x82151A50;
		  /* 82151A50h */ case    7:  		/* bc 12, CR6_EQ, 28 */
		/* 82151A50h case    7:*/		if ( regs.CR[6].eq ) { return 0x82151A6C;  }
		/* 82151A50h case    7:*/		return 0x82151A54;
		  /* 82151A54h */ case    8:  		/* addi R11, R11, 1 */
		/* 82151A54h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82151A54h case    8:*/		return 0x82151A58;
		  /* 82151A58h */ case    9:  		/* addi R10, R10, 8 */
		/* 82151A58h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x8);
		/* 82151A58h case    9:*/		return 0x82151A5C;
		  /* 82151A5Ch */ case   10:  		/* cmplwi CR6, R11, 171 */
		/* 82151A5Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000000AB);
		/* 82151A5Ch case   10:*/		return 0x82151A60;
		  /* 82151A60h */ case   11:  		/* bc 12, CR6_LT, -24 */
		/* 82151A60h case   11:*/		if ( regs.CR[6].lt ) { return 0x82151A48;  }
		/* 82151A60h case   11:*/		return 0x82151A64;
		  /* 82151A64h */ case   12:  		/* li R3, 0 */
		/* 82151A64h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82151A64h case   12:*/		return 0x82151A68;
		  /* 82151A68h */ case   13:  		/* bclr 20, CR0_LT */
		/* 82151A68h case   13:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82151A68h case   13:*/		return 0x82151A6C;
	}
	return 0x82151A6C;
} // Block from 82151A34h-82151A6Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 82151A6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151A6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151A6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151A6C);
		  /* 82151A6Ch */ case    0:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 82151A6Ch case    0:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 82151A6Ch case    0:*/		return 0x82151A70;
		  /* 82151A70h */ case    1:  		/* addi R10, R9, 4 */
		/* 82151A70h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x4);
		/* 82151A70h case    1:*/		return 0x82151A74;
		  /* 82151A74h */ case    2:  		/* lwzx R3, <#[R11 + R10]> */
		/* 82151A74h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82151A74h case    2:*/		return 0x82151A78;
		  /* 82151A78h */ case    3:  		/* bclr 20, CR0_LT */
		/* 82151A78h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82151A78h case    3:*/		return 0x82151A7C;
	}
	return 0x82151A7C;
} // Block from 82151A6Ch-82151A7Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82151A7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151A7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151A7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151A7C);
		  /* 82151A7Ch */ case    0:  		/* nop */
		/* 82151A7Ch case    0:*/		cpu::op::nop();
		/* 82151A7Ch case    0:*/		return 0x82151A80;
	}
	return 0x82151A80;
} // Block from 82151A7Ch-82151A80h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82151A80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151A80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151A80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151A80);
		  /* 82151A80h */ case    0:  		/* mfspr R12, LR */
		/* 82151A80h case    0:*/		regs.R12 = regs.LR;
		/* 82151A80h case    0:*/		return 0x82151A84;
		  /* 82151A84h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82151A84h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82151A84h case    1:*/		return 0x82151A88;
		  /* 82151A88h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82151A88h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82151A88h case    2:*/		return 0x82151A8C;
		  /* 82151A8Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82151A8Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82151A8Ch case    3:*/		return 0x82151A90;
		  /* 82151A90h */ case    4:  		/* mr R3, R6 */
		/* 82151A90h case    4:*/		regs.R3 = regs.R6;
		/* 82151A90h case    4:*/		return 0x82151A94;
		  /* 82151A94h */ case    5:  		/* mr R31, R4 */
		/* 82151A94h case    5:*/		regs.R31 = regs.R4;
		/* 82151A94h case    5:*/		return 0x82151A98;
		  /* 82151A98h */ case    6:  		/* mr R4, R5 */
		/* 82151A98h case    6:*/		regs.R4 = regs.R5;
		/* 82151A98h case    6:*/		return 0x82151A9C;
		  /* 82151A9Ch */ case    7:  		/* bl -100 */
		/* 82151A9Ch case    7:*/		regs.LR = 0x82151AA0; return 0x82151A38;
		/* 82151A9Ch case    7:*/		return 0x82151AA0;
		  /* 82151AA0h */ case    8:  		/* or. R5, R3, R3 */
		/* 82151AA0h case    8:*/		cpu::op::or<1>(regs,&regs.R5,regs.R3,regs.R3);
		/* 82151AA0h case    8:*/		return 0x82151AA4;
		  /* 82151AA4h */ case    9:  		/* mr R3, R31 */
		/* 82151AA4h case    9:*/		regs.R3 = regs.R31;
		/* 82151AA4h case    9:*/		return 0x82151AA8;
		  /* 82151AA8h */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 82151AA8h case   10:*/		if ( regs.CR[0].eq ) { return 0x82151AB8;  }
		/* 82151AA8h case   10:*/		return 0x82151AAC;
		  /* 82151AACh */ case   11:  		/* mr R6, R7 */
		/* 82151AACh case   11:*/		regs.R6 = regs.R7;
		/* 82151AACh case   11:*/		return 0x82151AB0;
		  /* 82151AB0h */ case   12:  		/* bl -748264 */
		/* 82151AB0h case   12:*/		regs.LR = 0x82151AB4; return 0x8209AFC8;
		/* 82151AB0h case   12:*/		return 0x82151AB4;
		  /* 82151AB4h */ case   13:  		/* b 20 */
		/* 82151AB4h case   13:*/		return 0x82151AC8;
		/* 82151AB4h case   13:*/		return 0x82151AB8;
	}
	return 0x82151AB8;
} // Block from 82151A80h-82151AB8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82151AB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151AB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151AB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151AB8);
		  /* 82151AB8h */ case    0:  		/* lis R11, -32253 */
		/* 82151AB8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8203);
		/* 82151AB8h case    0:*/		return 0x82151ABC;
		  /* 82151ABCh */ case    1:  		/* li R5, 15 */
		/* 82151ABCh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0xF);
		/* 82151ABCh case    1:*/		return 0x82151AC0;
		  /* 82151AC0h */ case    2:  		/* addi R4, R11, 31452 */
		/* 82151AC0h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x7ADC);
		/* 82151AC0h case    2:*/		return 0x82151AC4;
		  /* 82151AC4h */ case    3:  		/* bl -786708 */
		/* 82151AC4h case    3:*/		regs.LR = 0x82151AC8; return 0x820919B0;
		/* 82151AC4h case    3:*/		return 0x82151AC8;
	}
	return 0x82151AC8;
} // Block from 82151AB8h-82151AC8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82151AC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151AC8);
		  /* 82151AC8h */ case    0:  		/* addi R1, R1, 96 */
		/* 82151AC8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82151AC8h case    0:*/		return 0x82151ACC;
		  /* 82151ACCh */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82151ACCh case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82151ACCh case    1:*/		return 0x82151AD0;
		  /* 82151AD0h */ case    2:  		/* mtspr LR, R12 */
		/* 82151AD0h case    2:*/		regs.LR = regs.R12;
		/* 82151AD0h case    2:*/		return 0x82151AD4;
		  /* 82151AD4h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 82151AD4h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82151AD4h case    3:*/		return 0x82151AD8;
		  /* 82151AD8h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82151AD8h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82151AD8h case    4:*/		return 0x82151ADC;
	}
	return 0x82151ADC;
} // Block from 82151AC8h-82151ADCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 82151ADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151ADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151ADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151ADC);
		  /* 82151ADCh */ case    0:  		/* nop */
		/* 82151ADCh case    0:*/		cpu::op::nop();
		/* 82151ADCh case    0:*/		return 0x82151AE0;
		  /* 82151AE0h */ case    1:  		/* mr R11, R3 */
		/* 82151AE0h case    1:*/		regs.R11 = regs.R3;
		/* 82151AE0h case    1:*/		return 0x82151AE4;
		  /* 82151AE4h */ case    2:  		/* lwz R3, <#[R3 + 552]> */
		/* 82151AE4h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000228) );
		/* 82151AE4h case    2:*/		return 0x82151AE8;
		  /* 82151AE8h */ case    3:  		/* lis R4, 24973 */
		/* 82151AE8h case    3:*/		cpu::op::lis<0>(regs,&regs.R4,0x618D);
		/* 82151AE8h case    3:*/		return 0x82151AEC;
		  /* 82151AECh */ case    4:  		/* lwz R10, <#[R3 + 8]> */
		/* 82151AECh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 82151AECh case    4:*/		return 0x82151AF0;
		  /* 82151AF0h */ case    5:  		/* stw R10, <#[R11 + 552]> */
		/* 82151AF0h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000228) );
		/* 82151AF0h case    5:*/		return 0x82151AF4;
		  /* 82151AF4h */ case    6:  		/* b -825276 */
		/* 82151AF4h case    6:*/		return 0x82088338;
		/* 82151AF4h case    6:*/		return 0x82151AF8;
		  /* 82151AF8h */ case    7:  		/* lwz R10, <#[R3 + 40]> */
		/* 82151AF8h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000028) );
		/* 82151AF8h case    7:*/		return 0x82151AFC;
		  /* 82151AFCh */ case    8:  		/* mr R11, R3 */
		/* 82151AFCh case    8:*/		regs.R11 = regs.R3;
		/* 82151AFCh case    8:*/		return 0x82151B00;
		  /* 82151B00h */ case    9:  		/* li R4, 1 */
		/* 82151B00h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82151B00h case    9:*/		return 0x82151B04;
		  /* 82151B04h */ case   10:  		/* oris R10, R10, 4096 */
		/* 82151B04h case   10:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x1000);
		/* 82151B04h case   10:*/		return 0x82151B08;
		  /* 82151B08h */ case   11:  		/* addi R3, R3, 1136 */
		/* 82151B08h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x470);
		/* 82151B08h case   11:*/		return 0x82151B0C;
		  /* 82151B0Ch */ case   12:  		/* stw R10, <#[R11 + 40]> */
		/* 82151B0Ch case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000028) );
		/* 82151B0Ch case   12:*/		return 0x82151B10;
		  /* 82151B10h */ case   13:  		/* b 1143712 */
		/* 82151B10h case   13:*/		return 0x82268EB0;
		/* 82151B10h case   13:*/		return 0x82151B14;
		  /* 82151B14h */ case   14:  		/* nop */
		/* 82151B14h case   14:*/		cpu::op::nop();
		/* 82151B14h case   14:*/		return 0x82151B18;
	}
	return 0x82151B18;
} // Block from 82151ADCh-82151B18h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82151B18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151B18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151B18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151B18);
		  /* 82151B18h */ case    0:  		/* mfspr R12, LR */
		/* 82151B18h case    0:*/		regs.R12 = regs.LR;
		/* 82151B18h case    0:*/		return 0x82151B1C;
		  /* 82151B1Ch */ case    1:  		/* bl -788688 */
		/* 82151B1Ch case    1:*/		regs.LR = 0x82151B20; return 0x8209124C;
		/* 82151B1Ch case    1:*/		return 0x82151B20;
		  /* 82151B20h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82151B20h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82151B20h case    2:*/		return 0x82151B24;
		  /* 82151B24h */ case    3:  		/* lwz R29, <#[R4]> */
		/* 82151B24h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R4 + 0x00000000) );
		/* 82151B24h case    3:*/		return 0x82151B28;
		  /* 82151B28h */ case    4:  		/* mr R31, R3 */
		/* 82151B28h case    4:*/		regs.R31 = regs.R3;
		/* 82151B28h case    4:*/		return 0x82151B2C;
		  /* 82151B2Ch */ case    5:  		/* mr R25, R5 */
		/* 82151B2Ch case    5:*/		regs.R25 = regs.R5;
		/* 82151B2Ch case    5:*/		return 0x82151B30;
		  /* 82151B30h */ case    6:  		/* mr R3, R29 */
		/* 82151B30h case    6:*/		regs.R3 = regs.R29;
		/* 82151B30h case    6:*/		return 0x82151B34;
		  /* 82151B34h */ case    7:  		/* mr R28, R6 */
		/* 82151B34h case    7:*/		regs.R28 = regs.R6;
		/* 82151B34h case    7:*/		return 0x82151B38;
		  /* 82151B38h */ case    8:  		/* mr R27, R7 */
		/* 82151B38h case    8:*/		regs.R27 = regs.R7;
		/* 82151B38h case    8:*/		return 0x82151B3C;
		  /* 82151B3Ch */ case    9:  		/* lwz R11, <#[R29]> */
		/* 82151B3Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82151B3Ch case    9:*/		return 0x82151B40;
		  /* 82151B40h */ case   10:  		/* lwz R11, <#[R11 + 12]> */
		/* 82151B40h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82151B40h case   10:*/		return 0x82151B44;
		  /* 82151B44h */ case   11:  		/* mtspr CTR, R11 */
		/* 82151B44h case   11:*/		regs.CTR = regs.R11;
		/* 82151B44h case   11:*/		return 0x82151B48;
		  /* 82151B48h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 82151B48h case   12:*/		if ( 1 ) { regs.LR = 0x82151B4C; return (uint32)regs.CTR; }
		/* 82151B48h case   12:*/		return 0x82151B4C;
		  /* 82151B4Ch */ case   13:  		/* lwz R26, <#[R3]> */
		/* 82151B4Ch case   13:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R3 + 0x00000000) );
		/* 82151B4Ch case   13:*/		return 0x82151B50;
		  /* 82151B50h */ case   14:  		/* mr R30, R3 */
		/* 82151B50h case   14:*/		regs.R30 = regs.R3;
		/* 82151B50h case   14:*/		return 0x82151B54;
		  /* 82151B54h */ case   15:  		/* rlwinm. R11, R26, 0, 26, 26 */
		/* 82151B54h case   15:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R26);
		/* 82151B54h case   15:*/		return 0x82151B58;
		  /* 82151B58h */ case   16:  		/* bc 12, CR0_EQ, 340 */
		/* 82151B58h case   16:*/		if ( regs.CR[0].eq ) { return 0x82151CAC;  }
		/* 82151B58h case   16:*/		return 0x82151B5C;
		  /* 82151B5Ch */ case   17:  		/* rlwinm. R11, R25, 0, 13, 13 */
		/* 82151B5Ch case   17:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R25);
		/* 82151B5Ch case   17:*/		return 0x82151B60;
		  /* 82151B60h */ case   18:  		/* bc 4, CR0_EQ, 332 */
		/* 82151B60h case   18:*/		if ( !regs.CR[0].eq ) { return 0x82151CAC;  }
		/* 82151B60h case   18:*/		return 0x82151B64;
		  /* 82151B64h */ case   19:  		/* cmplwi CR6, R28, 0 */
		/* 82151B64h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82151B64h case   19:*/		return 0x82151B68;
		  /* 82151B68h */ case   20:  		/* bc 12, CR6_EQ, 56 */
		/* 82151B68h case   20:*/		if ( regs.CR[6].eq ) { return 0x82151BA0;  }
		/* 82151B68h case   20:*/		return 0x82151B6C;
		  /* 82151B6Ch */ case   21:  		/* lis R11, -32217 */
		/* 82151B6Ch case   21:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82151B6Ch case   21:*/		return 0x82151B70;
		  /* 82151B70h */ case   22:  		/* lwz R4, <#[R11 + 19736]> */
		/* 82151B70h case   22:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00004D18) );
		/* 82151B70h case   22:*/		return 0x82151B74;
		  /* 82151B74h */ case   23:  		/* mr R11, R4 */
		/* 82151B74h case   23:*/		regs.R11 = regs.R4;
		/* 82151B74h case   23:*/		return 0x82151B78;
		  /* 82151B78h */ case   24:  		/* lbz R10, <#[R11]> */
		/* 82151B78h case   24:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82151B78h case   24:*/		return 0x82151B7C;
		  /* 82151B7Ch */ case   25:  		/* addi R11, R11, 1 */
		/* 82151B7Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82151B7Ch case   25:*/		return 0x82151B80;
		  /* 82151B80h */ case   26:  		/* cmplwi CR6, R10, 0 */
		/* 82151B80h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82151B80h case   26:*/		return 0x82151B84;
		  /* 82151B84h */ case   27:  		/* bc 4, CR6_EQ, -12 */
		/* 82151B84h case   27:*/		if ( !regs.CR[6].eq ) { return 0x82151B78;  }
		/* 82151B84h case   27:*/		return 0x82151B88;
		  /* 82151B88h */ case   28:  		/* subf R11, R4, R11 */
		/* 82151B88h case   28:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R4,regs.R11);
		/* 82151B88h case   28:*/		return 0x82151B8C;
		  /* 82151B8Ch */ case   29:  		/* mtspr CTR, R28 */
		/* 82151B8Ch case   29:*/		regs.CTR = regs.R28;
		/* 82151B8Ch case   29:*/		return 0x82151B90;
		  /* 82151B90h */ case   30:  		/* mr R3, R27 */
		/* 82151B90h case   30:*/		regs.R3 = regs.R27;
		/* 82151B90h case   30:*/		return 0x82151B94;
		  /* 82151B94h */ case   31:  		/* addi R11, R11, -1 */
		/* 82151B94h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82151B94h case   31:*/		return 0x82151B98;
		  /* 82151B98h */ case   32:  		/* rlwinm R5, R11, 0, 0, 31 */
		/* 82151B98h case   32:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R11);
		/* 82151B98h case   32:*/		return 0x82151B9C;
		  /* 82151B9Ch */ case   33:  		/* bcctrl 20, CR0_LT */
		/* 82151B9Ch case   33:*/		if ( 1 ) { regs.LR = 0x82151BA0; return (uint32)regs.CTR; }
		/* 82151B9Ch case   33:*/		return 0x82151BA0;
	}
	return 0x82151BA0;
} // Block from 82151B18h-82151BA0h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82151BA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151BA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151BA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151BA0);
		  /* 82151BA0h */ case    0:  		/* li R11, 0 */
		/* 82151BA0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82151BA0h case    0:*/		return 0x82151BA4;
		  /* 82151BA4h */ case    1:  		/* rlwinm R10, R26, 0, 27, 25 */
		/* 82151BA4h case    1:*/		cpu::op::rlwinm<0,0,27,25>(regs,&regs.R10,regs.R26);
		/* 82151BA4h case    1:*/		return 0x82151BA8;
		  /* 82151BA8h */ case    2:  		/* stw R11, <#[R30 + 28]> */
		/* 82151BA8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 82151BA8h case    2:*/		return 0x82151BAC;
		  /* 82151BACh */ case    3:  		/* mr R3, R29 */
		/* 82151BACh case    3:*/		regs.R3 = regs.R29;
		/* 82151BACh case    3:*/		return 0x82151BB0;
		  /* 82151BB0h */ case    4:  		/* stw R11, <#[R30 + 32]> */
		/* 82151BB0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 82151BB0h case    4:*/		return 0x82151BB4;
		  /* 82151BB4h */ case    5:  		/* stw R10, <#[R30]> */
		/* 82151BB4h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 82151BB4h case    5:*/		return 0x82151BB8;
		  /* 82151BB8h */ case    6:  		/* stw R11, <#[R31 + 776]> */
		/* 82151BB8h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000308) );
		/* 82151BB8h case    6:*/		return 0x82151BBC;
		  /* 82151BBCh */ case    7:  		/* stw R11, <#[R31 + 780]> */
		/* 82151BBCh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000030C) );
		/* 82151BBCh case    7:*/		return 0x82151BC0;
		  /* 82151BC0h */ case    8:  		/* lwz R11, <#[R29]> */
		/* 82151BC0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82151BC0h case    8:*/		return 0x82151BC4;
		  /* 82151BC4h */ case    9:  		/* lwz R11, <#[R11 + 16]> */
		/* 82151BC4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 82151BC4h case    9:*/		return 0x82151BC8;
		  /* 82151BC8h */ case   10:  		/* mtspr CTR, R11 */
		/* 82151BC8h case   10:*/		regs.CTR = regs.R11;
		/* 82151BC8h case   10:*/		return 0x82151BCC;
		  /* 82151BCCh */ case   11:  		/* bcctrl 20, CR0_LT */
		/* 82151BCCh case   11:*/		if ( 1 ) { regs.LR = 0x82151BD0; return (uint32)regs.CTR; }
		/* 82151BCCh case   11:*/		return 0x82151BD0;
		  /* 82151BD0h */ case   12:  		/* mr R4, R3 */
		/* 82151BD0h case   12:*/		regs.R4 = regs.R3;
		/* 82151BD0h case   12:*/		return 0x82151BD4;
		  /* 82151BD4h */ case   13:  		/* mr R3, R30 */
		/* 82151BD4h case   13:*/		regs.R3 = regs.R30;
		/* 82151BD4h case   13:*/		return 0x82151BD8;
		  /* 82151BD8h */ case   14:  		/* mr R5, R25 */
		/* 82151BD8h case   14:*/		regs.R5 = regs.R25;
		/* 82151BD8h case   14:*/		return 0x82151BDC;
		  /* 82151BDCh */ case   15:  		/* li R6, 0 */
		/* 82151BDCh case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82151BDCh case   15:*/		return 0x82151BE0;
		  /* 82151BE0h */ case   16:  		/* mr R7, R28 */
		/* 82151BE0h case   16:*/		regs.R7 = regs.R28;
		/* 82151BE0h case   16:*/		return 0x82151BE4;
		  /* 82151BE4h */ case   17:  		/* mr R8, R27 */
		/* 82151BE4h case   17:*/		regs.R8 = regs.R27;
		/* 82151BE4h case   17:*/		return 0x82151BE8;
		  /* 82151BE8h */ case   18:  		/* bl 1081624 */
		/* 82151BE8h case   18:*/		regs.LR = 0x82151BEC; return 0x82259D00;
		/* 82151BE8h case   18:*/		return 0x82151BEC;
		  /* 82151BECh */ case   19:  		/* mr R30, R3 */
		/* 82151BECh case   19:*/		regs.R30 = regs.R3;
		/* 82151BECh case   19:*/		return 0x82151BF0;
		  /* 82151BF0h */ case   20:  		/* cmplwi CR6, R28, 0 */
		/* 82151BF0h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82151BF0h case   20:*/		return 0x82151BF4;
		  /* 82151BF4h */ case   21:  		/* bc 12, CR6_EQ, 192 */
		/* 82151BF4h case   21:*/		if ( regs.CR[6].eq ) { return 0x82151CB4;  }
		/* 82151BF4h case   21:*/		return 0x82151BF8;
		  /* 82151BF8h */ case   22:  		/* cmpwi CR6, R3, 0 */
		/* 82151BF8h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82151BF8h case   22:*/		return 0x82151BFC;
		  /* 82151BFCh */ case   23:  		/* bc 4, CR6_LT, 44 */
		/* 82151BFCh case   23:*/		if ( !regs.CR[6].lt ) { return 0x82151C28;  }
		/* 82151BFCh case   23:*/		return 0x82151C00;
		  /* 82151C00h */ case   24:  		/* lwz R11, <#[R31 + 780]> */
		/* 82151C00h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000030C) );
		/* 82151C00h case   24:*/		return 0x82151C04;
		  /* 82151C04h */ case   25:  		/* cmplwi CR6, R11, 0 */
		/* 82151C04h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82151C04h case   25:*/		return 0x82151C08;
		  /* 82151C08h */ case   26:  		/* bc 12, CR6_EQ, 24 */
		/* 82151C08h case   26:*/		if ( regs.CR[6].eq ) { return 0x82151C20;  }
		/* 82151C08h case   26:*/		return 0x82151C0C;
		  /* 82151C0Ch */ case   27:  		/* lwz R10, <#[R31 + 776]> */
		/* 82151C0Ch case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000308) );
		/* 82151C0Ch case   27:*/		return 0x82151C10;
		  /* 82151C10h */ case   28:  		/* subf R11, R11, R10 */
		/* 82151C10h case   28:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82151C10h case   28:*/		return 0x82151C14;
		  /* 82151C14h */ case   29:  		/* subfic R11, R11, 0 */
		/* 82151C14h case   29:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 82151C14h case   29:*/		return 0x82151C18;
		  /* 82151C18h */ case   30:  		/* subfe R11, R11, R11 */
		/* 82151C18h case   30:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82151C18h case   30:*/		return 0x82151C1C;
		  /* 82151C1Ch */ case   31:  		/* and R30, R11, R30 */
		/* 82151C1Ch case   31:*/		cpu::op::and<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 82151C1Ch case   31:*/		return 0x82151C20;
	}
	return 0x82151C20;
} // Block from 82151BA0h-82151C20h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82151C20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151C20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151C20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151C20);
		  /* 82151C20h */ case    0:  		/* cmpwi CR6, R30, 0 */
		/* 82151C20h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 82151C20h case    0:*/		return 0x82151C24;
		  /* 82151C24h */ case    1:  		/* bc 12, CR6_LT, 68 */
		/* 82151C24h case    1:*/		if ( regs.CR[6].lt ) { return 0x82151C68;  }
		/* 82151C24h case    1:*/		return 0x82151C28;
	}
	return 0x82151C28;
} // Block from 82151C20h-82151C28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82151C28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151C28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151C28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151C28);
		  /* 82151C28h */ case    0:  		/* lis R11, -32217 */
		/* 82151C28h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82151C28h case    0:*/		return 0x82151C2C;
		  /* 82151C2Ch */ case    1:  		/* lwz R4, <#[R11 + 19732]> */
		/* 82151C2Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00004D14) );
		/* 82151C2Ch case    1:*/		return 0x82151C30;
		  /* 82151C30h */ case    2:  		/* mr R11, R4 */
		/* 82151C30h case    2:*/		regs.R11 = regs.R4;
		/* 82151C30h case    2:*/		return 0x82151C34;
		  /* 82151C34h */ case    3:  		/* lbz R10, <#[R11]> */
		/* 82151C34h case    3:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82151C34h case    3:*/		return 0x82151C38;
		  /* 82151C38h */ case    4:  		/* addi R11, R11, 1 */
		/* 82151C38h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82151C38h case    4:*/		return 0x82151C3C;
		  /* 82151C3Ch */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 82151C3Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82151C3Ch case    5:*/		return 0x82151C40;
		  /* 82151C40h */ case    6:  		/* bc 4, CR6_EQ, -12 */
		/* 82151C40h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82151C34;  }
		/* 82151C40h case    6:*/		return 0x82151C44;
		  /* 82151C44h */ case    7:  		/* subf R11, R4, R11 */
		/* 82151C44h case    7:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R4,regs.R11);
		/* 82151C44h case    7:*/		return 0x82151C48;
		  /* 82151C48h */ case    8:  		/* mtspr CTR, R28 */
		/* 82151C48h case    8:*/		regs.CTR = regs.R28;
		/* 82151C48h case    8:*/		return 0x82151C4C;
		  /* 82151C4Ch */ case    9:  		/* mr R3, R27 */
		/* 82151C4Ch case    9:*/		regs.R3 = regs.R27;
		/* 82151C4Ch case    9:*/		return 0x82151C50;
		  /* 82151C50h */ case   10:  		/* addi R11, R11, -1 */
		/* 82151C50h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82151C50h case   10:*/		return 0x82151C54;
		  /* 82151C54h */ case   11:  		/* rlwinm R5, R11, 0, 0, 31 */
		/* 82151C54h case   11:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R11);
		/* 82151C54h case   11:*/		return 0x82151C58;
		  /* 82151C58h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 82151C58h case   12:*/		if ( 1 ) { regs.LR = 0x82151C5C; return (uint32)regs.CTR; }
		/* 82151C58h case   12:*/		return 0x82151C5C;
		  /* 82151C5Ch */ case   13:  		/* lwz R11, <#[R31 + 780]> */
		/* 82151C5Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000030C) );
		/* 82151C5Ch case   13:*/		return 0x82151C60;
		  /* 82151C60h */ case   14:  		/* addi R11, R11, 2 */
		/* 82151C60h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 82151C60h case   14:*/		return 0x82151C64;
		  /* 82151C64h */ case   15:  		/* b 64 */
		/* 82151C64h case   15:*/		return 0x82151CA4;
		/* 82151C64h case   15:*/		return 0x82151C68;
	}
	return 0x82151C68;
} // Block from 82151C28h-82151C68h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82151C68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151C68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151C68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151C68);
		  /* 82151C68h */ case    0:  		/* lis R11, -32217 */
		/* 82151C68h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 82151C68h case    0:*/		return 0x82151C6C;
		  /* 82151C6Ch */ case    1:  		/* lwz R4, <#[R11 + 19728]> */
		/* 82151C6Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00004D10) );
		/* 82151C6Ch case    1:*/		return 0x82151C70;
		  /* 82151C70h */ case    2:  		/* mr R11, R4 */
		/* 82151C70h case    2:*/		regs.R11 = regs.R4;
		/* 82151C70h case    2:*/		return 0x82151C74;
		  /* 82151C74h */ case    3:  		/* lbz R10, <#[R11]> */
		/* 82151C74h case    3:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82151C74h case    3:*/		return 0x82151C78;
		  /* 82151C78h */ case    4:  		/* addi R11, R11, 1 */
		/* 82151C78h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82151C78h case    4:*/		return 0x82151C7C;
		  /* 82151C7Ch */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 82151C7Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82151C7Ch case    5:*/		return 0x82151C80;
		  /* 82151C80h */ case    6:  		/* bc 4, CR6_EQ, -12 */
		/* 82151C80h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82151C74;  }
		/* 82151C80h case    6:*/		return 0x82151C84;
		  /* 82151C84h */ case    7:  		/* subf R11, R4, R11 */
		/* 82151C84h case    7:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R4,regs.R11);
		/* 82151C84h case    7:*/		return 0x82151C88;
		  /* 82151C88h */ case    8:  		/* mtspr CTR, R28 */
		/* 82151C88h case    8:*/		regs.CTR = regs.R28;
		/* 82151C88h case    8:*/		return 0x82151C8C;
		  /* 82151C8Ch */ case    9:  		/* mr R3, R27 */
		/* 82151C8Ch case    9:*/		regs.R3 = regs.R27;
		/* 82151C8Ch case    9:*/		return 0x82151C90;
		  /* 82151C90h */ case   10:  		/* addi R11, R11, -1 */
		/* 82151C90h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82151C90h case   10:*/		return 0x82151C94;
		  /* 82151C94h */ case   11:  		/* rlwinm R5, R11, 0, 0, 31 */
		/* 82151C94h case   11:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R11);
		/* 82151C94h case   11:*/		return 0x82151C98;
		  /* 82151C98h */ case   12:  		/* bcctrl 20, CR0_LT */
		/* 82151C98h case   12:*/		if ( 1 ) { regs.LR = 0x82151C9C; return (uint32)regs.CTR; }
		/* 82151C98h case   12:*/		return 0x82151C9C;
		  /* 82151C9Ch */ case   13:  		/* lwz R11, <#[R31 + 780]> */
		/* 82151C9Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000030C) );
		/* 82151C9Ch case   13:*/		return 0x82151CA0;
		  /* 82151CA0h */ case   14:  		/* addi R11, R11, 1 */
		/* 82151CA0h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82151CA0h case   14:*/		return 0x82151CA4;
	}
	return 0x82151CA4;
} // Block from 82151C68h-82151CA4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82151CA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151CA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151CA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151CA4);
		  /* 82151CA4h */ case    0:  		/* stw R11, <#[R31 + 780]> */
		/* 82151CA4h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000030C) );
		/* 82151CA4h case    0:*/		return 0x82151CA8;
		  /* 82151CA8h */ case    1:  		/* b 12 */
		/* 82151CA8h case    1:*/		return 0x82151CB4;
		/* 82151CA8h case    1:*/		return 0x82151CAC;
	}
	return 0x82151CAC;
} // Block from 82151CA4h-82151CACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82151CACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151CAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151CAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151CAC);
		  /* 82151CACh */ case    0:  		/* lis R30, -32768 */
		/* 82151CACh case    0:*/		cpu::op::lis<0>(regs,&regs.R30,0xFFFF8000);
		/* 82151CACh case    0:*/		return 0x82151CB0;
		  /* 82151CB0h */ case    1:  		/* ori R30, R30, 16389 */
		/* 82151CB0h case    1:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R30,0x4005);
		/* 82151CB0h case    1:*/		return 0x82151CB4;
	}
	return 0x82151CB4;
} // Block from 82151CACh-82151CB4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82151CB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151CB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151CB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151CB4);
		  /* 82151CB4h */ case    0:  		/* mr R3, R30 */
		/* 82151CB4h case    0:*/		regs.R3 = regs.R30;
		/* 82151CB4h case    0:*/		return 0x82151CB8;
		  /* 82151CB8h */ case    1:  		/* addi R1, R1, 144 */
		/* 82151CB8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82151CB8h case    1:*/		return 0x82151CBC;
		  /* 82151CBCh */ case    2:  		/* b -789024 */
		/* 82151CBCh case    2:*/		return 0x8209129C;
		/* 82151CBCh case    2:*/		return 0x82151CC0;
	}
	return 0x82151CC0;
} // Block from 82151CB4h-82151CC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82151CC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151CC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151CC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151CC0);
		  /* 82151CC0h */ case    0:  		/* mfspr R12, LR */
		/* 82151CC0h case    0:*/		regs.R12 = regs.LR;
		/* 82151CC0h case    0:*/		return 0x82151CC4;
		  /* 82151CC4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82151CC4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82151CC4h case    1:*/		return 0x82151CC8;
		  /* 82151CC8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82151CC8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82151CC8h case    2:*/		return 0x82151CCC;
		  /* 82151CCCh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82151CCCh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82151CCCh case    3:*/		return 0x82151CD0;
		  /* 82151CD0h */ case    4:  		/* stwu R1, <#[R1 - 368]> */
		/* 82151CD0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE90);
		/* 82151CD0h case    4:*/		return 0x82151CD4;
		  /* 82151CD4h */ case    5:  		/* mr R30, R4 */
		/* 82151CD4h case    5:*/		regs.R30 = regs.R4;
		/* 82151CD4h case    5:*/		return 0x82151CD8;
		  /* 82151CD8h */ case    6:  		/* mr R7, R5 */
		/* 82151CD8h case    6:*/		regs.R7 = regs.R5;
		/* 82151CD8h case    6:*/		return 0x82151CDC;
		  /* 82151CDCh */ case    7:  		/* mr R6, R4 */
		/* 82151CDCh case    7:*/		regs.R6 = regs.R4;
		/* 82151CDCh case    7:*/		return 0x82151CE0;
		  /* 82151CE0h */ case    8:  		/* li R5, 256 */
		/* 82151CE0h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x100);
		/* 82151CE0h case    8:*/		return 0x82151CE4;
		  /* 82151CE4h */ case    9:  		/* addi R4, R1, 80 */
		/* 82151CE4h case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 82151CE4h case    9:*/		return 0x82151CE8;
		  /* 82151CE8h */ case   10:  		/* mr R31, R3 */
		/* 82151CE8h case   10:*/		regs.R31 = regs.R3;
		/* 82151CE8h case   10:*/		return 0x82151CEC;
		  /* 82151CECh */ case   11:  		/* bl -620 */
		/* 82151CECh case   11:*/		regs.LR = 0x82151CF0; return 0x82151A80;
		/* 82151CECh case   11:*/		return 0x82151CF0;
		  /* 82151CF0h */ case   12:  		/* lwz R11, <#[R31 + 2492]> */
		/* 82151CF0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000009BC) );
		/* 82151CF0h case   12:*/		return 0x82151CF4;
		  /* 82151CF4h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 82151CF4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82151CF4h case   13:*/		return 0x82151CF8;
		  /* 82151CF8h */ case   14:  		/* bc 12, CR6_EQ, 40 */
		/* 82151CF8h case   14:*/		if ( regs.CR[6].eq ) { return 0x82151D20;  }
		/* 82151CF8h case   14:*/		return 0x82151CFC;
		  /* 82151CFCh */ case   15:  		/* cmpwi CR6, R30, 3537 */
		/* 82151CFCh case   15:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000DD1);
		/* 82151CFCh case   15:*/		return 0x82151D00;
		  /* 82151D00h */ case   16:  		/* bc 12, CR6_EQ, 32 */
		/* 82151D00h case   16:*/		if ( regs.CR[6].eq ) { return 0x82151D20;  }
		/* 82151D00h case   16:*/		return 0x82151D04;
		  /* 82151D04h */ case   17:  		/* addi R7, R1, 80 */
		/* 82151D04h case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82151D04h case   17:*/		return 0x82151D08;
		  /* 82151D08h */ case   18:  		/* lwz R3, <#[R31 + 2488]> */
		/* 82151D08h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000009B8) );
		/* 82151D08h case   18:*/		return 0x82151D0C;
		  /* 82151D0Ch */ case   19:  		/* addi R6, R30, -1100 */
		/* 82151D0Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R30,0xFFFFFBB4);
		/* 82151D0Ch case   19:*/		return 0x82151D10;
		  /* 82151D10h */ case   20:  		/* mtspr CTR, R11 */
		/* 82151D10h case   20:*/		regs.CTR = regs.R11;
		/* 82151D10h case   20:*/		return 0x82151D14;
		  /* 82151D14h */ case   21:  		/* li R5, 0 */
		/* 82151D14h case   21:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82151D14h case   21:*/		return 0x82151D18;
		  /* 82151D18h */ case   22:  		/* li R4, 1 */
		/* 82151D18h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82151D18h case   22:*/		return 0x82151D1C;
		  /* 82151D1Ch */ case   23:  		/* bcctrl 20, CR0_LT */
		/* 82151D1Ch case   23:*/		if ( 1 ) { regs.LR = 0x82151D20; return (uint32)regs.CTR; }
		/* 82151D1Ch case   23:*/		return 0x82151D20;
	}
	return 0x82151D20;
} // Block from 82151CC0h-82151D20h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82151D20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151D20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151D20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151D20);
		  /* 82151D20h */ case    0:  		/* cmpwi CR6, R30, 3517 */
		/* 82151D20h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000DBD);
		/* 82151D20h case    0:*/		return 0x82151D24;
		  /* 82151D24h */ case    1:  		/* bc 12, CR6_EQ, 56 */
		/* 82151D24h case    1:*/		if ( regs.CR[6].eq ) { return 0x82151D5C;  }
		/* 82151D24h case    1:*/		return 0x82151D28;
		  /* 82151D28h */ case    2:  		/* cmpwi CR6, R30, 3525 */
		/* 82151D28h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000DC5);
		/* 82151D28h case    2:*/		return 0x82151D2C;
		  /* 82151D2Ch */ case    3:  		/* bc 12, CR6_EQ, 60 */
		/* 82151D2Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82151D68;  }
		/* 82151D2Ch case    3:*/		return 0x82151D30;
		  /* 82151D30h */ case    4:  		/* cmpwi CR6, R30, 3527 */
		/* 82151D30h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000DC7);
		/* 82151D30h case    4:*/		return 0x82151D34;
		  /* 82151D34h */ case    5:  		/* lis R11, -32768 */
		/* 82151D34h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 82151D34h case    5:*/		return 0x82151D38;
		  /* 82151D38h */ case    6:  		/* bc 12, CR6_EQ, 28 */
		/* 82151D38h case    6:*/		if ( regs.CR[6].eq ) { return 0x82151D54;  }
		/* 82151D38h case    6:*/		return 0x82151D3C;
		  /* 82151D3Ch */ case    7:  		/* cmpwi CR6, R30, 3537 */
		/* 82151D3Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000DD1);
		/* 82151D3Ch case    7:*/		return 0x82151D40;
		  /* 82151D40h */ case    8:  		/* bc 12, CR6_EQ, 12 */
		/* 82151D40h case    8:*/		if ( regs.CR[6].eq ) { return 0x82151D4C;  }
		/* 82151D40h case    8:*/		return 0x82151D44;
		  /* 82151D44h */ case    9:  		/* ori R11, R11, 16389 */
		/* 82151D44h case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4005);
		/* 82151D44h case    9:*/		return 0x82151D48;
		  /* 82151D48h */ case   10:  		/* b 28 */
		/* 82151D48h case   10:*/		return 0x82151D64;
		/* 82151D48h case   10:*/		return 0x82151D4C;
	}
	return 0x82151D4C;
} // Block from 82151D20h-82151D4Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82151D4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151D4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151D4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151D4C);
		  /* 82151D4Ch */ case    0:  		/* ori R11, R11, 16385 */
		/* 82151D4Ch case    0:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4001);
		/* 82151D4Ch case    0:*/		return 0x82151D50;
		  /* 82151D50h */ case    1:  		/* b 20 */
		/* 82151D50h case    1:*/		return 0x82151D64;
		/* 82151D50h case    1:*/		return 0x82151D54;
	}
	return 0x82151D54;
} // Block from 82151D4Ch-82151D54h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82151D54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151D54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151D54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151D54);
		  /* 82151D54h */ case    0:  		/* ori R11, R11, 16388 */
		/* 82151D54h case    0:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4004);
		/* 82151D54h case    0:*/		return 0x82151D58;
		  /* 82151D58h */ case    1:  		/* b 12 */
		/* 82151D58h case    1:*/		return 0x82151D64;
		/* 82151D58h case    1:*/		return 0x82151D5C;
	}
	return 0x82151D5C;
} // Block from 82151D54h-82151D5Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82151D5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151D5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151D5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151D5C);
		  /* 82151D5Ch */ case    0:  		/* lis R11, -32761 */
		/* 82151D5Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8007);
		/* 82151D5Ch case    0:*/		return 0x82151D60;
		  /* 82151D60h */ case    1:  		/* ori R11, R11, 14 */
		/* 82151D60h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xE);
		/* 82151D60h case    1:*/		return 0x82151D64;
	}
	return 0x82151D64;
} // Block from 82151D5Ch-82151D64h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82151D64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151D64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151D64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151D64);
		  /* 82151D64h */ case    0:  		/* stw R11, <#[R31 + 2480]> */
		/* 82151D64h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000009B0) );
		/* 82151D64h case    0:*/		return 0x82151D68;
	}
	return 0x82151D68;
} // Block from 82151D64h-82151D68h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82151D68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151D68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151D68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151D68);
		  /* 82151D68h */ case    0:  		/* mr R4, R30 */
		/* 82151D68h case    0:*/		regs.R4 = regs.R30;
		/* 82151D68h case    0:*/		return 0x82151D6C;
		  /* 82151D6Ch */ case    1:  		/* addi R3, R31, 1136 */
		/* 82151D6Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x470);
		/* 82151D6Ch case    1:*/		return 0x82151D70;
	}
	return 0x82151D70;
} // Block from 82151D68h-82151D70h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82151D70h
// Function '?DumpDefinitionTable_EnumerateLiteralsCallback@XGRAPHICS@@YAJPAXKKKPBX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151D70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151D70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151D70);
		  /* 82151D70h */ case    0:  		/* bl 1143104 */
		/* 82151D70h case    0:*/		regs.LR = 0x82151D74; return 0x82268EB0;
		/* 82151D70h case    0:*/		return 0x82151D74;
		  /* 82151D74h */ case    1:  		/* nop */
		/* 82151D74h case    1:*/		cpu::op::nop();
		/* 82151D74h case    1:*/		return 0x82151D78;
	}
	return 0x82151D78;
} // Block from 82151D70h-82151D78h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82151D78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151D78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151D78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151D78);
		  /* 82151D78h */ case    0:  		/* mfspr R12, LR */
		/* 82151D78h case    0:*/		regs.R12 = regs.LR;
		/* 82151D78h case    0:*/		return 0x82151D7C;
		  /* 82151D7Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82151D7Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82151D7Ch case    1:*/		return 0x82151D80;
		  /* 82151D80h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82151D80h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82151D80h case    2:*/		return 0x82151D84;
		  /* 82151D84h */ case    3:  		/* std R5, <#[R1 + 32]> */
		/* 82151D84h case    3:*/		cpu::mem::store64( regs, regs.R5, (uint32)(regs.R1 + 0x00000020) );
		/* 82151D84h case    3:*/		return 0x82151D88;
		  /* 82151D88h */ case    4:  		/* std R6, <#[R1 + 40]> */
		/* 82151D88h case    4:*/		cpu::mem::store64( regs, regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 82151D88h case    4:*/		return 0x82151D8C;
		  /* 82151D8Ch */ case    5:  		/* std R7, <#[R1 + 48]> */
		/* 82151D8Ch case    5:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R1 + 0x00000030) );
		/* 82151D8Ch case    5:*/		return 0x82151D90;
		  /* 82151D90h */ case    6:  		/* std R8, <#[R1 + 56]> */
		/* 82151D90h case    6:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R1 + 0x00000038) );
		/* 82151D90h case    6:*/		return 0x82151D94;
		  /* 82151D94h */ case    7:  		/* std R9, <#[R1 + 64]> */
		/* 82151D94h case    7:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000040) );
		/* 82151D94h case    7:*/		return 0x82151D98;
		  /* 82151D98h */ case    8:  		/* std R10, <#[R1 + 72]> */
		/* 82151D98h case    8:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000048) );
		/* 82151D98h case    8:*/		return 0x82151D9C;
		  /* 82151D9Ch */ case    9:  		/* stwu R1, <#[R1 - 368]> */
		/* 82151D9Ch case    9:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE90);
		/* 82151D9Ch case    9:*/		return 0x82151DA0;
		  /* 82151DA0h */ case   10:  		/* stw R4, <#[R1 + 396]> */
		/* 82151DA0h case   10:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000018C) );
		/* 82151DA0h case   10:*/		return 0x82151DA4;
		  /* 82151DA4h */ case   11:  		/* addi R11, R1, 80 */
		/* 82151DA4h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 82151DA4h case   11:*/		return 0x82151DA8;
		  /* 82151DA8h */ case   12:  		/* addi R10, R1, 400 */
		/* 82151DA8h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x190);
		/* 82151DA8h case   12:*/		return 0x82151DAC;
		  /* 82151DACh */ case   13:  		/* mr R6, R4 */
		/* 82151DACh case   13:*/		regs.R6 = regs.R4;
		/* 82151DACh case   13:*/		return 0x82151DB0;
		  /* 82151DB0h */ case   14:  		/* li R5, 256 */
		/* 82151DB0h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x100);
		/* 82151DB0h case   14:*/		return 0x82151DB4;
		  /* 82151DB4h */ case   15:  		/* addi R4, R1, 96 */
		/* 82151DB4h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 82151DB4h case   15:*/		return 0x82151DB8;
		  /* 82151DB8h */ case   16:  		/* stw R10, <#[R11]> */
		/* 82151DB8h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82151DB8h case   16:*/		return 0x82151DBC;
		  /* 82151DBCh */ case   17:  		/* mr R31, R3 */
		/* 82151DBCh case   17:*/		regs.R31 = regs.R3;
		/* 82151DBCh case   17:*/		return 0x82151DC0;
		  /* 82151DC0h */ case   18:  		/* lwz R7, <#[R1 + 80]> */
		/* 82151DC0h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 82151DC0h case   18:*/		return 0x82151DC4;
		  /* 82151DC4h */ case   19:  		/* bl -836 */
		/* 82151DC4h case   19:*/		regs.LR = 0x82151DC8; return 0x82151A80;
		/* 82151DC4h case   19:*/		return 0x82151DC8;
		  /* 82151DC8h */ case   20:  		/* lwz R11, <#[R31 + 2492]> */
		/* 82151DC8h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000009BC) );
		/* 82151DC8h case   20:*/		return 0x82151DCC;
		  /* 82151DCCh */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 82151DCCh case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82151DCCh case   21:*/		return 0x82151DD0;
		  /* 82151DD0h */ case   22:  		/* bc 12, CR6_EQ, 36 */
		/* 82151DD0h case   22:*/		if ( regs.CR[6].eq ) { return 0x82151DF4;  }
		/* 82151DD0h case   22:*/		return 0x82151DD4;
		  /* 82151DD4h */ case   23:  		/* lwz R10, <#[R1 + 396]> */
		/* 82151DD4h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000018C) );
		/* 82151DD4h case   23:*/		return 0x82151DD8;
		  /* 82151DD8h */ case   24:  		/* addi R7, R1, 96 */
		/* 82151DD8h case   24:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 82151DD8h case   24:*/		return 0x82151DDC;
		  /* 82151DDCh */ case   25:  		/* li R5, 0 */
		/* 82151DDCh case   25:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82151DDCh case   25:*/		return 0x82151DE0;
		  /* 82151DE0h */ case   26:  		/* lwz R3, <#[R31 + 2488]> */
		/* 82151DE0h case   26:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000009B8) );
		/* 82151DE0h case   26:*/		return 0x82151DE4;
		  /* 82151DE4h */ case   27:  		/* addi R6, R10, -1100 */
		/* 82151DE4h case   27:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFBB4);
		/* 82151DE4h case   27:*/		return 0x82151DE8;
		  /* 82151DE8h */ case   28:  		/* mtspr CTR, R11 */
		/* 82151DE8h case   28:*/		regs.CTR = regs.R11;
		/* 82151DE8h case   28:*/		return 0x82151DEC;
		  /* 82151DECh */ case   29:  		/* li R4, 0 */
		/* 82151DECh case   29:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82151DECh case   29:*/		return 0x82151DF0;
		  /* 82151DF0h */ case   30:  		/* bcctrl 20, CR0_LT */
		/* 82151DF0h case   30:*/		if ( 1 ) { regs.LR = 0x82151DF4; return (uint32)regs.CTR; }
		/* 82151DF0h case   30:*/		return 0x82151DF4;
	}
	return 0x82151DF4;
} // Block from 82151D78h-82151DF4h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82151DF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151DF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151DF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151DF4);
		  /* 82151DF4h */ case    0:  		/* addi R1, R1, 368 */
		/* 82151DF4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x170);
		/* 82151DF4h case    0:*/		return 0x82151DF8;
		  /* 82151DF8h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82151DF8h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82151DF8h case    1:*/		return 0x82151DFC;
		  /* 82151DFCh */ case    2:  		/* mtspr LR, R12 */
		/* 82151DFCh case    2:*/		regs.LR = regs.R12;
		/* 82151DFCh case    2:*/		return 0x82151E00;
		  /* 82151E00h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 82151E00h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82151E00h case    3:*/		return 0x82151E04;
		  /* 82151E04h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82151E04h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82151E04h case    4:*/		return 0x82151E08;
	}
	return 0x82151E08;
} // Block from 82151DF4h-82151E08h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82151E08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151E08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151E08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151E08);
		  /* 82151E08h */ case    0:  		/* rlwinm R11, R3, 0, 0, 19 */
		/* 82151E08h case    0:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R11,regs.R3);
		/* 82151E08h case    0:*/		return 0x82151E0C;
		  /* 82151E0Ch */ case    1:  		/* cmplwi CR6, R5, 132 */
		/* 82151E0Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000084);
		/* 82151E0Ch case    1:*/		return 0x82151E10;
		  /* 82151E10h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 82151E10h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82151E10h case    2:*/		return 0x82151E14;
		  /* 82151E14h */ case    3:  		/* bc 4, CR6_GT, 52 */
		/* 82151E14h case    3:*/		if ( !regs.CR[6].gt ) { return 0x82151E48;  }
		/* 82151E14h case    3:*/		return 0x82151E18;
		  /* 82151E18h */ case    4:  		/* addi R3, R4, -12 */
		/* 82151E18h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R4,0xFFFFFFF4);
		/* 82151E18h case    4:*/		return 0x82151E1C;
		  /* 82151E1Ch */ case    5:  		/* lis R4, 24973 */
		/* 82151E1Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R4,0x618D);
		/* 82151E1Ch case    5:*/		return 0x82151E20;
		  /* 82151E20h */ case    6:  		/* rlwinm R11, R3, 0, 0, 30 */
		/* 82151E20h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R3);
		/* 82151E20h case    6:*/		return 0x82151E24;
		  /* 82151E24h */ case    7:  		/* lwz R10, <#[R11 + 4]> */
		/* 82151E24h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82151E24h case    7:*/		return 0x82151E28;
		  /* 82151E28h */ case    8:  		/* lwz R9, <#[R11]> */
		/* 82151E28h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82151E28h case    8:*/		return 0x82151E2C;
		  /* 82151E2Ch */ case    9:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 82151E2Ch case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 82151E2Ch case    9:*/		return 0x82151E30;
		  /* 82151E30h */ case   10:  		/* stw R9, <#[R10]> */
		/* 82151E30h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82151E30h case   10:*/		return 0x82151E34;
		  /* 82151E34h */ case   11:  		/* lwz R10, <#[R11 + 4]> */
		/* 82151E34h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82151E34h case   11:*/		return 0x82151E38;
		  /* 82151E38h */ case   12:  		/* lwz R11, <#[R11]> */
		/* 82151E38h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82151E38h case   12:*/		return 0x82151E3C;
		  /* 82151E3Ch */ case   13:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82151E3Ch case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82151E3Ch case   13:*/		return 0x82151E40;
		  /* 82151E40h */ case   14:  		/* stw R10, <#[R11]> */
		/* 82151E40h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82151E40h case   14:*/		return 0x82151E44;
		  /* 82151E44h */ case   15:  		/* b -826124 */
		/* 82151E44h case   15:*/		return 0x82088338;
		/* 82151E44h case   15:*/		return 0x82151E48;
	}
	return 0x82151E48;
} // Block from 82151E08h-82151E48h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82151E48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151E48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151E48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151E48);
		  /* 82151E48h */ case    0:  		/* rlwinm R11, R5, 30, 2, 31 */
		/* 82151E48h case    0:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R11,regs.R5);
		/* 82151E48h case    0:*/		return 0x82151E4C;
		  /* 82151E4Ch */ case    1:  		/* addi R11, R11, -1 */
		/* 82151E4Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82151E4Ch case    1:*/		return 0x82151E50;
		  /* 82151E50h */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82151E50h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82151E50h case    2:*/		return 0x82151E54;
		  /* 82151E54h */ case    3:  		/* lwzx R9, <#[R11 + R10]> */
		/* 82151E54h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82151E54h case    3:*/		return 0x82151E58;
		  /* 82151E58h */ case    4:  		/* stw R9, <#[R4]> */
		/* 82151E58h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R4 + 0x00000000) );
		/* 82151E58h case    4:*/		return 0x82151E5C;
		  /* 82151E5Ch */ case    5:  		/* stwx R4, <#[R11 + R10]> */
		/* 82151E5Ch case    5:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82151E5Ch case    5:*/		return 0x82151E60;
		  /* 82151E60h */ case    6:  		/* bclr 20, CR0_LT */
		/* 82151E60h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82151E60h case    6:*/		return 0x82151E64;
	}
	return 0x82151E64;
} // Block from 82151E48h-82151E64h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82151E64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151E64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151E64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151E64);
		  /* 82151E64h */ case    0:  		/* nop */
		/* 82151E64h case    0:*/		cpu::op::nop();
		/* 82151E64h case    0:*/		return 0x82151E68;
	}
	return 0x82151E68;
} // Block from 82151E64h-82151E68h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82151E68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151E68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151E68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151E68);
		  /* 82151E68h */ case    0:  		/* mfspr R12, LR */
		/* 82151E68h case    0:*/		regs.R12 = regs.LR;
		/* 82151E68h case    0:*/		return 0x82151E6C;
		  /* 82151E6Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82151E6Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82151E6Ch case    1:*/		return 0x82151E70;
		  /* 82151E70h */ case    2:  		/* std R5, <#[R1 + 32]> */
		/* 82151E70h case    2:*/		cpu::mem::store64( regs, regs.R5, (uint32)(regs.R1 + 0x00000020) );
		/* 82151E70h case    2:*/		return 0x82151E74;
		  /* 82151E74h */ case    3:  		/* std R6, <#[R1 + 40]> */
		/* 82151E74h case    3:*/		cpu::mem::store64( regs, regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 82151E74h case    3:*/		return 0x82151E78;
		  /* 82151E78h */ case    4:  		/* std R7, <#[R1 + 48]> */
		/* 82151E78h case    4:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R1 + 0x00000030) );
		/* 82151E78h case    4:*/		return 0x82151E7C;
		  /* 82151E7Ch */ case    5:  		/* std R8, <#[R1 + 56]> */
		/* 82151E7Ch case    5:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R1 + 0x00000038) );
		/* 82151E7Ch case    5:*/		return 0x82151E80;
		  /* 82151E80h */ case    6:  		/* std R9, <#[R1 + 64]> */
		/* 82151E80h case    6:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000040) );
		/* 82151E80h case    6:*/		return 0x82151E84;
		  /* 82151E84h */ case    7:  		/* std R10, <#[R1 + 72]> */
		/* 82151E84h case    7:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000048) );
		/* 82151E84h case    7:*/		return 0x82151E88;
		  /* 82151E88h */ case    8:  		/* stwu R1, <#[R1 - 96]> */
		/* 82151E88h case    8:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82151E88h case    8:*/		return 0x82151E8C;
		  /* 82151E8Ch */ case    9:  		/* stw R4, <#[R1 + 124]> */
		/* 82151E8Ch case    9:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000007C) );
		/* 82151E8Ch case    9:*/		return 0x82151E90;
		  /* 82151E90h */ case   10:  		/* addi R11, R1, 80 */
		/* 82151E90h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 82151E90h case   10:*/		return 0x82151E94;
		  /* 82151E94h */ case   11:  		/* addi R10, R1, 128 */
		/* 82151E94h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x80);
		/* 82151E94h case   11:*/		return 0x82151E98;
		  /* 82151E98h */ case   12:  		/* stw R10, <#[R11]> */
		/* 82151E98h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82151E98h case   12:*/		return 0x82151E9C;
		  /* 82151E9Ch */ case   13:  		/* lwz R5, <#[R1 + 80]> */
		/* 82151E9Ch case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000050) );
		/* 82151E9Ch case   13:*/		return 0x82151EA0;
		  /* 82151EA0h */ case   14:  		/* bl -480 */
		/* 82151EA0h case   14:*/		regs.LR = 0x82151EA4; return 0x82151CC0;
		/* 82151EA0h case   14:*/		return 0x82151EA4;
		  /* 82151EA4h */ case   15:  		/* nop */
		/* 82151EA4h case   15:*/		cpu::op::nop();
		/* 82151EA4h case   15:*/		return 0x82151EA8;
	}
	return 0x82151EA8;
} // Block from 82151E68h-82151EA8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82151EA8h
// Function '?DumpCommonPassTables@XGRAPHICS@@YAJPAVOutStream@1@W4UCODESHADERTYPE@@PBU_UCODE_HEADER@@KPBXK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151EA8);
		  /* 82151EA8h */ case    0:  		/* mfspr R12, LR */
		/* 82151EA8h case    0:*/		regs.R12 = regs.LR;
		/* 82151EA8h case    0:*/		return 0x82151EAC;
		  /* 82151EACh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82151EACh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82151EACh case    1:*/		return 0x82151EB0;
		  /* 82151EB0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82151EB0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82151EB0h case    2:*/		return 0x82151EB4;
		  /* 82151EB4h */ case    3:  		/* std R5, <#[R1 + 32]> */
		/* 82151EB4h case    3:*/		cpu::mem::store64( regs, regs.R5, (uint32)(regs.R1 + 0x00000020) );
		/* 82151EB4h case    3:*/		return 0x82151EB8;
		  /* 82151EB8h */ case    4:  		/* std R6, <#[R1 + 40]> */
		/* 82151EB8h case    4:*/		cpu::mem::store64( regs, regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 82151EB8h case    4:*/		return 0x82151EBC;
		  /* 82151EBCh */ case    5:  		/* std R7, <#[R1 + 48]> */
		/* 82151EBCh case    5:*/		cpu::mem::store64( regs, regs.R7, (uint32)(regs.R1 + 0x00000030) );
		/* 82151EBCh case    5:*/		return 0x82151EC0;
		  /* 82151EC0h */ case    6:  		/* std R8, <#[R1 + 56]> */
		/* 82151EC0h case    6:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R1 + 0x00000038) );
		/* 82151EC0h case    6:*/		return 0x82151EC4;
		  /* 82151EC4h */ case    7:  		/* std R9, <#[R1 + 64]> */
		/* 82151EC4h case    7:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R1 + 0x00000040) );
		/* 82151EC4h case    7:*/		return 0x82151EC8;
		  /* 82151EC8h */ case    8:  		/* std R10, <#[R1 + 72]> */
		/* 82151EC8h case    8:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R1 + 0x00000048) );
		/* 82151EC8h case    8:*/		return 0x82151ECC;
		  /* 82151ECCh */ case    9:  		/* stwu R1, <#[R1 - 400]> */
		/* 82151ECCh case    9:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE70);
		/* 82151ECCh case    9:*/		return 0x82151ED0;
		  /* 82151ED0h */ case   10:  		/* stw R4, <#[R1 + 428]> */
		/* 82151ED0h case   10:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x000001AC) );
		/* 82151ED0h case   10:*/		return 0x82151ED4;
		  /* 82151ED4h */ case   11:  		/* addi R11, R1, 112 */
		/* 82151ED4h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 82151ED4h case   11:*/		return 0x82151ED8;
		  /* 82151ED8h */ case   12:  		/* addi R10, R1, 432 */
		/* 82151ED8h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x1B0);
		/* 82151ED8h case   12:*/		return 0x82151EDC;
		  /* 82151EDCh */ case   13:  		/* mr R31, R3 */
		/* 82151EDCh case   13:*/		regs.R31 = regs.R3;
		/* 82151EDCh case   13:*/		return 0x82151EE0;
		  /* 82151EE0h */ case   14:  		/* mr R5, R4 */
		/* 82151EE0h case   14:*/		regs.R5 = regs.R4;
		/* 82151EE0h case   14:*/		return 0x82151EE4;
		  /* 82151EE4h */ case   15:  		/* li R4, 256 */
		/* 82151EE4h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x100);
		/* 82151EE4h case   15:*/		return 0x82151EE8;
		  /* 82151EE8h */ case   16:  		/* addi R3, R1, 128 */
		/* 82151EE8h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 82151EE8h case   16:*/		return 0x82151EEC;
		  /* 82151EECh */ case   17:  		/* stw R10, <#[R11]> */
		/* 82151EECh case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82151EECh case   17:*/		return 0x82151EF0;
		  /* 82151EF0h */ case   18:  		/* lwz R6, <#[R1 + 112]> */
		/* 82151EF0h case   18:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000070) );
		/* 82151EF0h case   18:*/		return 0x82151EF4;
		  /* 82151EF4h */ case   19:  		/* bl -749356 */
		/* 82151EF4h case   19:*/		regs.LR = 0x82151EF8; return 0x8209AFC8;
		/* 82151EF4h case   19:*/		return 0x82151EF8;
		  /* 82151EF8h */ case   20:  		/* addi R5, R1, 128 */
		/* 82151EF8h case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 82151EF8h case   20:*/		return 0x82151EFC;
		  /* 82151EFCh */ case   21:  		/* li R4, 3542 */
		/* 82151EFCh case   21:*/		cpu::op::li<0>(regs,&regs.R4,0xDD6);
		/* 82151EFCh case   21:*/		return 0x82151F00;
		  /* 82151F00h */ case   22:  		/* mr R3, R31 */
		/* 82151F00h case   22:*/		regs.R3 = regs.R31;
		/* 82151F00h case   22:*/		return 0x82151F04;
		  /* 82151F04h */ case   23:  		/* bl -156 */
		/* 82151F04h case   23:*/		regs.LR = 0x82151F08; return 0x82151E68;
		/* 82151F04h case   23:*/		return 0x82151F08;
	}
	return 0x82151F08;
} // Block from 82151EA8h-82151F08h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82151F08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151F08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151F08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151F08);
		  /* 82151F08h */ case    0:  		/* mfspr R12, LR */
		/* 82151F08h case    0:*/		regs.R12 = regs.LR;
		/* 82151F08h case    0:*/		return 0x82151F0C;
		  /* 82151F0Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82151F0Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82151F0Ch case    1:*/		return 0x82151F10;
		  /* 82151F10h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82151F10h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82151F10h case    2:*/		return 0x82151F14;
		  /* 82151F14h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82151F14h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82151F14h case    3:*/		return 0x82151F18;
		  /* 82151F18h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82151F18h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82151F18h case    4:*/		return 0x82151F1C;
		  /* 82151F1Ch */ case    5:  		/* mr R31, R3 */
		/* 82151F1Ch case    5:*/		regs.R31 = regs.R3;
		/* 82151F1Ch case    5:*/		return 0x82151F20;
		  /* 82151F20h */ case    6:  		/* mr R30, R4 */
		/* 82151F20h case    6:*/		regs.R30 = regs.R4;
		/* 82151F20h case    6:*/		return 0x82151F24;
		  /* 82151F24h */ case    7:  		/* bl -539948 */
		/* 82151F24h case    7:*/		regs.LR = 0x82151F28; return 0x820CE1F8;
		/* 82151F24h case    7:*/		return 0x82151F28;
		  /* 82151F28h */ case    8:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 82151F28h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 82151F28h case    8:*/		return 0x82151F2C;
		  /* 82151F2Ch */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 82151F2Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x82151F44;  }
		/* 82151F2Ch case    9:*/		return 0x82151F30;
		  /* 82151F30h */ case   10:  		/* rlwinm R11, R31, 0, 0, 19 */
		/* 82151F30h case   10:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R11,regs.R31);
		/* 82151F30h case   10:*/		return 0x82151F34;
		  /* 82151F34h */ case   11:  		/* lwz R11, <#[R11]> */
		/* 82151F34h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82151F34h case   11:*/		return 0x82151F38;
		  /* 82151F38h */ case   12:  		/* lwz R10, <#[R11 + 12]> */
		/* 82151F38h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82151F38h case   12:*/		return 0x82151F3C;
		  /* 82151F3Ch */ case   13:  		/* stw R10, <#[R31]> */
		/* 82151F3Ch case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82151F3Ch case   13:*/		return 0x82151F40;
		  /* 82151F40h */ case   14:  		/* stw R31, <#[R11 + 12]> */
		/* 82151F40h case   14:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 82151F40h case   14:*/		return 0x82151F44;
	}
	return 0x82151F44;
} // Block from 82151F08h-82151F44h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82151F44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151F44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151F44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151F44);
		  /* 82151F44h */ case    0:  		/* mr R3, R31 */
		/* 82151F44h case    0:*/		regs.R3 = regs.R31;
		/* 82151F44h case    0:*/		return 0x82151F48;
		  /* 82151F48h */ case    1:  		/* addi R1, R1, 112 */
		/* 82151F48h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82151F48h case    1:*/		return 0x82151F4C;
		  /* 82151F4Ch */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 82151F4Ch case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82151F4Ch case    2:*/		return 0x82151F50;
		  /* 82151F50h */ case    3:  		/* mtspr LR, R12 */
		/* 82151F50h case    3:*/		regs.LR = regs.R12;
		/* 82151F50h case    3:*/		return 0x82151F54;
		  /* 82151F54h */ case    4:  		/* ld R30, <#[R1 - 24]> */
		/* 82151F54h case    4:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82151F54h case    4:*/		return 0x82151F58;
	}
	return 0x82151F58;
} // Block from 82151F44h-82151F58h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82151F58h
// Function '?DisassembleMicrocode@XGRAPHICS@@YAJPBKKKP6AJPAXPBDK@Z1PBX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151F58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151F58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151F58);
		  /* 82151F58h */ case    0:  		/* ld R31, <#[R1 - 16]> */
		/* 82151F58h case    0:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82151F58h case    0:*/		return 0x82151F5C;
		  /* 82151F5Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 82151F5Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82151F5Ch case    1:*/		return 0x82151F60;
	}
	return 0x82151F60;
} // Block from 82151F58h-82151F60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82151F60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151F60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151F60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151F60);
		  /* 82151F60h */ case    0:  		/* mfspr R12, LR */
		/* 82151F60h case    0:*/		regs.R12 = regs.LR;
		/* 82151F60h case    0:*/		return 0x82151F64;
		  /* 82151F64h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82151F64h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82151F64h case    1:*/		return 0x82151F68;
		  /* 82151F68h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82151F68h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82151F68h case    2:*/		return 0x82151F6C;
		  /* 82151F6Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82151F6Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82151F6Ch case    3:*/		return 0x82151F70;
		  /* 82151F70h */ case    4:  		/* addi R31, R3, 152 */
		/* 82151F70h case    4:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R3,0x98);
		/* 82151F70h case    4:*/		return 0x82151F74;
		  /* 82151F74h */ case    5:  		/* lwz R3, <#[R31 + 4]> */
		/* 82151F74h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 82151F74h case    5:*/		return 0x82151F78;
		  /* 82151F78h */ case    6:  		/* rlwinm. R11, R3, 0, 31, 31 */
		/* 82151F78h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R3);
		/* 82151F78h case    6:*/		return 0x82151F7C;
		  /* 82151F7Ch */ case    7:  		/* bc 4, CR0_EQ, 60 */
		/* 82151F7Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x82151FB8;  }
		/* 82151F7Ch case    7:*/		return 0x82151F80;
		  /* 82151F80h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 82151F80h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82151F80h case    8:*/		return 0x82151F84;
		  /* 82151F84h */ case    9:  		/* bc 12, CR0_EQ, 52 */
		/* 82151F84h case    9:*/		if ( regs.CR[0].eq ) { return 0x82151FB8;  }
		/* 82151F84h case    9:*/		return 0x82151F88;
		  /* 82151F88h */ case   10:  		/* rlwinm R11, R3, 0, 0, 30 */
		/* 82151F88h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R3);
		/* 82151F88h case   10:*/		return 0x82151F8C;
		  /* 82151F8Ch */ case   11:  		/* lis R4, 24973 */
		/* 82151F8Ch case   11:*/		cpu::op::lis<0>(regs,&regs.R4,0x618D);
		/* 82151F8Ch case   11:*/		return 0x82151F90;
		  /* 82151F90h */ case   12:  		/* lwz R10, <#[R11 + 4]> */
		/* 82151F90h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82151F90h case   12:*/		return 0x82151F94;
		  /* 82151F94h */ case   13:  		/* lwz R9, <#[R11]> */
		/* 82151F94h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82151F94h case   13:*/		return 0x82151F98;
		  /* 82151F98h */ case   14:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 82151F98h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 82151F98h case   14:*/		return 0x82151F9C;
		  /* 82151F9Ch */ case   15:  		/* stw R9, <#[R10]> */
		/* 82151F9Ch case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82151F9Ch case   15:*/		return 0x82151FA0;
		  /* 82151FA0h */ case   16:  		/* lwz R10, <#[R11 + 4]> */
		/* 82151FA0h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82151FA0h case   16:*/		return 0x82151FA4;
		  /* 82151FA4h */ case   17:  		/* lwz R11, <#[R11]> */
		/* 82151FA4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82151FA4h case   17:*/		return 0x82151FA8;
		  /* 82151FA8h */ case   18:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82151FA8h case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82151FA8h case   18:*/		return 0x82151FAC;
		  /* 82151FACh */ case   19:  		/* stw R10, <#[R11]> */
		/* 82151FACh case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82151FACh case   19:*/		return 0x82151FB0;
		  /* 82151FB0h */ case   20:  		/* bl -826488 */
		/* 82151FB0h case   20:*/		regs.LR = 0x82151FB4; return 0x82088338;
		/* 82151FB0h case   20:*/		return 0x82151FB4;
		  /* 82151FB4h */ case   21:  		/* b -64 */
		/* 82151FB4h case   21:*/		return 0x82151F74;
		/* 82151FB4h case   21:*/		return 0x82151FB8;
	}
	return 0x82151FB8;
} // Block from 82151F60h-82151FB8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82151FB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151FB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151FB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151FB8);
		  /* 82151FB8h */ case    0:  		/* addi R1, R1, 96 */
		/* 82151FB8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82151FB8h case    0:*/		return 0x82151FBC;
		  /* 82151FBCh */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82151FBCh case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82151FBCh case    1:*/		return 0x82151FC0;
		  /* 82151FC0h */ case    2:  		/* mtspr LR, R12 */
		/* 82151FC0h case    2:*/		regs.LR = regs.R12;
		/* 82151FC0h case    2:*/		return 0x82151FC4;
		  /* 82151FC4h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 82151FC4h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82151FC4h case    3:*/		return 0x82151FC8;
		  /* 82151FC8h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82151FC8h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82151FC8h case    4:*/		return 0x82151FCC;
	}
	return 0x82151FCC;
} // Block from 82151FB8h-82151FCCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 82151FCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151FCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151FCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151FCC);
		  /* 82151FCCh */ case    0:  		/* nop */
		/* 82151FCCh case    0:*/		cpu::op::nop();
		/* 82151FCCh case    0:*/		return 0x82151FD0;
	}
	return 0x82151FD0;
} // Block from 82151FCCh-82151FD0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82151FD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82151FD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82151FD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82151FD0);
		  /* 82151FD0h */ case    0:  		/* mfspr R12, LR */
		/* 82151FD0h case    0:*/		regs.R12 = regs.LR;
		/* 82151FD0h case    0:*/		return 0x82151FD4;
		  /* 82151FD4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82151FD4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82151FD4h case    1:*/		return 0x82151FD8;
		  /* 82151FD8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82151FD8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82151FD8h case    2:*/		return 0x82151FDC;
		  /* 82151FDCh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82151FDCh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82151FDCh case    3:*/		return 0x82151FE0;
		  /* 82151FE0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82151FE0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82151FE0h case    4:*/		return 0x82151FE4;
		  /* 82151FE4h */ case    5:  		/* mr R30, R3 */
		/* 82151FE4h case    5:*/		regs.R30 = regs.R3;
		/* 82151FE4h case    5:*/		return 0x82151FE8;
		  /* 82151FE8h */ case    6:  		/* lwz R3, <#[R3 + 132]> */
		/* 82151FE8h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000084) );
		/* 82151FE8h case    6:*/		return 0x82151FEC;
		  /* 82151FECh */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 82151FECh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82151FECh case    7:*/		return 0x82151FF0;
		  /* 82151FF0h */ case    8:  		/* bc 12, CR6_EQ, 28 */
		/* 82151FF0h case    8:*/		if ( regs.CR[6].eq ) { return 0x8215200C;  }
		/* 82151FF0h case    8:*/		return 0x82151FF4;
		  /* 82151FF4h */ case    9:  		/* lis R4, -24435 */
		/* 82151FF4h case    9:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFA08D);
		/* 82151FF4h case    9:*/		return 0x82151FF8;
		  /* 82151FF8h */ case   10:  		/* lwz R31, <#[R3 + 4]> */
		/* 82151FF8h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000004) );
		/* 82151FF8h case   10:*/		return 0x82151FFC;
		  /* 82151FFCh */ case   11:  		/* bl -826564 */
		/* 82151FFCh case   11:*/		regs.LR = 0x82152000; return 0x82088338;
		/* 82151FFCh case   11:*/		return 0x82152000;
		  /* 82152000h */ case   12:  		/* mr R3, R31 */
		/* 82152000h case   12:*/		regs.R3 = regs.R31;
		/* 82152000h case   12:*/		return 0x82152004;
		  /* 82152004h */ case   13:  		/* cmplwi CR6, R31, 0 */
		/* 82152004h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82152004h case   13:*/		return 0x82152008;
		  /* 82152008h */ case   14:  		/* bc 4, CR6_EQ, -20 */
		/* 82152008h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82151FF4;  }
		/* 82152008h case   14:*/		return 0x8215200C;
	}
	return 0x8215200C;
} // Block from 82151FD0h-8215200Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215200Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215200C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215200C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215200C);
		  /* 8215200Ch */ case    0:  		/* mr R3, R30 */
		/* 8215200Ch case    0:*/		regs.R3 = regs.R30;
		/* 8215200Ch case    0:*/		return 0x82152010;
		  /* 82152010h */ case    1:  		/* bl -176 */
		/* 82152010h case    1:*/		regs.LR = 0x82152014; return 0x82151F60;
		/* 82152010h case    1:*/		return 0x82152014;
		  /* 82152014h */ case    2:  		/* addi R1, R1, 112 */
		/* 82152014h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82152014h case    2:*/		return 0x82152018;
		  /* 82152018h */ case    3:  		/* lwz R12, <#[R1 - 8]> */
		/* 82152018h case    3:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82152018h case    3:*/		return 0x8215201C;
		  /* 8215201Ch */ case    4:  		/* mtspr LR, R12 */
		/* 8215201Ch case    4:*/		regs.LR = regs.R12;
		/* 8215201Ch case    4:*/		return 0x82152020;
		  /* 82152020h */ case    5:  		/* ld R30, <#[R1 - 24]> */
		/* 82152020h case    5:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82152020h case    5:*/		return 0x82152024;
		  /* 82152024h */ case    6:  		/* ld R31, <#[R1 - 16]> */
		/* 82152024h case    6:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82152024h case    6:*/		return 0x82152028;
		  /* 82152028h */ case    7:  		/* bclr 20, CR0_LT */
		/* 82152028h case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82152028h case    7:*/		return 0x8215202C;
	}
	return 0x8215202C;
} // Block from 8215200Ch-8215202Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215202Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215202C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215202C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215202C);
		  /* 8215202Ch */ case    0:  		/* nop */
		/* 8215202Ch case    0:*/		cpu::op::nop();
		/* 8215202Ch case    0:*/		return 0x82152030;
	}
	return 0x82152030;
} // Block from 8215202Ch-82152030h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82152030h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152030);
		  /* 82152030h */ case    0:  		/* mfspr R12, LR */
		/* 82152030h case    0:*/		regs.R12 = regs.LR;
		/* 82152030h case    0:*/		return 0x82152034;
		  /* 82152034h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82152034h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82152034h case    1:*/		return 0x82152038;
		  /* 82152038h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82152038h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82152038h case    2:*/		return 0x8215203C;
		  /* 8215203Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8215203Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215203Ch case    3:*/		return 0x82152040;
		  /* 82152040h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82152040h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82152040h case    4:*/		return 0x82152044;
		  /* 82152044h */ case    5:  		/* lwz R30, <#[R3 + 132]> */
		/* 82152044h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x00000084) );
		/* 82152044h case    5:*/		return 0x82152048;
		  /* 82152048h */ case    6:  		/* mr R31, R3 */
		/* 82152048h case    6:*/		regs.R31 = regs.R3;
		/* 82152048h case    6:*/		return 0x8215204C;
		  /* 8215204Ch */ case    7:  		/* b 20 */
		/* 8215204Ch case    7:*/		return 0x82152060;
		/* 8215204Ch case    7:*/		return 0x82152050;
		  /* 82152050h */ case    8:  		/* li R5, 4088 */
		/* 82152050h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0xFF8);
		/* 82152050h case    8:*/		return 0x82152054;
		  /* 82152054h */ case    9:  		/* addi R3, R30, 8 */
		/* 82152054h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0x8);
		/* 82152054h case    9:*/		return 0x82152058;
		  /* 82152058h */ case   10:  		/* bl -789784 */
		/* 82152058h case   10:*/		regs.LR = 0x8215205C; return 0x82091340;
		/* 82152058h case   10:*/		return 0x8215205C;
		  /* 8215205Ch */ case   11:  		/* lwz R30, <#[R30 + 4]> */
		/* 8215205Ch case   11:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000004) );
		/* 8215205Ch case   11:*/		return 0x82152060;
	}
	return 0x82152060;
} // Block from 82152030h-82152060h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82152060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152060);
		  /* 82152060h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82152060h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82152060h case    0:*/		return 0x82152064;
		  /* 82152064h */ case    1:  		/* li R4, 0 */
		/* 82152064h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82152064h case    1:*/		return 0x82152068;
		  /* 82152068h */ case    2:  		/* bc 4, CR6_EQ, -24 */
		/* 82152068h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82152050;  }
		/* 82152068h case    2:*/		return 0x8215206C;
		  /* 8215206Ch */ case    3:  		/* lwz R11, <#[R31 + 132]> */
		/* 8215206Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000084) );
		/* 8215206Ch case    3:*/		return 0x82152070;
		  /* 82152070h */ case    4:  		/* li R5, 132 */
		/* 82152070h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x84);
		/* 82152070h case    4:*/		return 0x82152074;
		  /* 82152074h */ case    5:  		/* mr R3, R31 */
		/* 82152074h case    5:*/		regs.R3 = regs.R31;
		/* 82152074h case    5:*/		return 0x82152078;
		  /* 82152078h */ case    6:  		/* addi R10, R11, 8 */
		/* 82152078h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 82152078h case    6:*/		return 0x8215207C;
		  /* 8215207Ch */ case    7:  		/* stw R10, <#[R31 + 144]> */
		/* 8215207Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000090) );
		/* 8215207Ch case    7:*/		return 0x82152080;
		  /* 82152080h */ case    8:  		/* stw R11, <#[R31 + 140]> */
		/* 82152080h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000008C) );
		/* 82152080h case    8:*/		return 0x82152084;
		  /* 82152084h */ case    9:  		/* bl -789828 */
		/* 82152084h case    9:*/		regs.LR = 0x82152088; return 0x82091340;
		/* 82152084h case    9:*/		return 0x82152088;
		  /* 82152088h */ case   10:  		/* mr R3, R31 */
		/* 82152088h case   10:*/		regs.R3 = regs.R31;
		/* 82152088h case   10:*/		return 0x8215208C;
		  /* 8215208Ch */ case   11:  		/* bl -300 */
		/* 8215208Ch case   11:*/		regs.LR = 0x82152090; return 0x82151F60;
		/* 8215208Ch case   11:*/		return 0x82152090;
		  /* 82152090h */ case   12:  		/* addi R1, R1, 112 */
		/* 82152090h case   12:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82152090h case   12:*/		return 0x82152094;
		  /* 82152094h */ case   13:  		/* lwz R12, <#[R1 - 8]> */
		/* 82152094h case   13:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82152094h case   13:*/		return 0x82152098;
		  /* 82152098h */ case   14:  		/* mtspr LR, R12 */
		/* 82152098h case   14:*/		regs.LR = regs.R12;
		/* 82152098h case   14:*/		return 0x8215209C;
		  /* 8215209Ch */ case   15:  		/* ld R30, <#[R1 - 24]> */
		/* 8215209Ch case   15:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8215209Ch case   15:*/		return 0x821520A0;
		  /* 821520A0h */ case   16:  		/* ld R31, <#[R1 - 16]> */
		/* 821520A0h case   16:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821520A0h case   16:*/		return 0x821520A4;
		  /* 821520A4h */ case   17:  		/* bclr 20, CR0_LT */
		/* 821520A4h case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821520A4h case   17:*/		return 0x821520A8;
	}
	return 0x821520A8;
} // Block from 82152060h-821520A8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821520A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821520A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821520A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821520A8);
		  /* 821520A8h */ case    0:  		/* mfspr R12, LR */
		/* 821520A8h case    0:*/		regs.R12 = regs.LR;
		/* 821520A8h case    0:*/		return 0x821520AC;
		  /* 821520ACh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821520ACh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821520ACh case    1:*/		return 0x821520B0;
		  /* 821520B0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 821520B0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821520B0h case    2:*/		return 0x821520B4;
		  /* 821520B4h */ case    3:  		/* stwu R1, <#[R1 - 112]> */
		/* 821520B4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821520B4h case    3:*/		return 0x821520B8;
		  /* 821520B8h */ case    4:  		/* mr R31, R3 */
		/* 821520B8h case    4:*/		regs.R31 = regs.R3;
		/* 821520B8h case    4:*/		return 0x821520BC;
		  /* 821520BCh */ case    5:  		/* lis R4, -8051 */
		/* 821520BCh case    5:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFE08D);
		/* 821520BCh case    5:*/		return 0x821520C0;
		  /* 821520C0h */ case    6:  		/* li R3, 4096 */
		/* 821520C0h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x1000);
		/* 821520C0h case    6:*/		return 0x821520C4;
		  /* 821520C4h */ case    7:  		/* bl -827076 */
		/* 821520C4h case    7:*/		regs.LR = 0x821520C8; return 0x82088200;
		/* 821520C4h case    7:*/		return 0x821520C8;
		  /* 821520C8h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 821520C8h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821520C8h case    8:*/		return 0x821520CC;
		  /* 821520CCh */ case    9:  		/* bc 4, CR0_EQ, 16 */
		/* 821520CCh case    9:*/		if ( !regs.CR[0].eq ) { return 0x821520DC;  }
		/* 821520CCh case    9:*/		return 0x821520D0;
		  /* 821520D0h */ case   10:  		/* li R4, 3517 */
		/* 821520D0h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0xDBD);
		/* 821520D0h case   10:*/		return 0x821520D4;
		  /* 821520D4h */ case   11:  		/* lwz R3, <#[R31 + 148]> */
		/* 821520D4h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000094) );
		/* 821520D4h case   11:*/		return 0x821520D8;
		  /* 821520D8h */ case   12:  		/* bl -624 */
		/* 821520D8h case   12:*/		regs.LR = 0x821520DC; return 0x82151E68;
		/* 821520D8h case   12:*/		return 0x821520DC;
	}
	return 0x821520DC;
} // Block from 821520A8h-821520DCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821520DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821520DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821520DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821520DC);
		  /* 821520DCh */ case    0:  		/* li R11, 0 */
		/* 821520DCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821520DCh case    0:*/		return 0x821520E0;
		  /* 821520E0h */ case    1:  		/* stw R31, <#[R3]> */
		/* 821520E0h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 821520E0h case    1:*/		return 0x821520E4;
		  /* 821520E4h */ case    2:  		/* stw R11, <#[R3 + 4]> */
		/* 821520E4h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821520E4h case    2:*/		return 0x821520E8;
		  /* 821520E8h */ case    3:  		/* addi R1, R1, 112 */
		/* 821520E8h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821520E8h case    3:*/		return 0x821520EC;
		  /* 821520ECh */ case    4:  		/* lwz R12, <#[R1 - 8]> */
		/* 821520ECh case    4:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821520ECh case    4:*/		return 0x821520F0;
		  /* 821520F0h */ case    5:  		/* mtspr LR, R12 */
		/* 821520F0h case    5:*/		regs.LR = regs.R12;
		/* 821520F0h case    5:*/		return 0x821520F4;
		  /* 821520F4h */ case    6:  		/* ld R31, <#[R1 - 16]> */
		/* 821520F4h case    6:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821520F4h case    6:*/		return 0x821520F8;
		  /* 821520F8h */ case    7:  		/* bclr 20, CR0_LT */
		/* 821520F8h case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821520F8h case    7:*/		return 0x821520FC;
	}
	return 0x821520FC;
} // Block from 821520DCh-821520FCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821520FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821520FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821520FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821520FC);
		  /* 821520FCh */ case    0:  		/* nop */
		/* 821520FCh case    0:*/		cpu::op::nop();
		/* 821520FCh case    0:*/		return 0x82152100;
		  /* 82152100h */ case    1:  		/* lwz R17, <#[R6 - 11576]> */
		/* 82152100h case    1:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R6 + 0xFFFFD2C8) );
		/* 82152100h case    1:*/		return 0x82152104;
		  /* 82152104h */ case    2:  		/* lwz R16, <#[R4 - 15000]> */
		/* 82152104h case    2:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R4 + 0xFFFFC568) );
		/* 82152104h case    2:*/		return 0x82152108;
	}
	return 0x82152108;
} // Block from 821520FCh-82152108h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82152108h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152108);
		  /* 82152108h */ case    0:  		/* mfspr R12, LR */
		/* 82152108h case    0:*/		regs.R12 = regs.LR;
		/* 82152108h case    0:*/		return 0x8215210C;
		  /* 8215210Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215210Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215210Ch case    1:*/		return 0x82152110;
		  /* 82152110h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82152110h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82152110h case    2:*/		return 0x82152114;
		  /* 82152114h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82152114h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82152114h case    3:*/		return 0x82152118;
		  /* 82152118h */ case    4:  		/* addi R31, R1, -112 */
		/* 82152118h case    4:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0xFFFFFF90);
		/* 82152118h case    4:*/		return 0x8215211C;
		  /* 8215211Ch */ case    5:  		/* stwu R1, <#[R1 - 112]> */
		/* 8215211Ch case    5:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8215211Ch case    5:*/		return 0x82152120;
		  /* 82152120h */ case    6:  		/* mr R30, R3 */
		/* 82152120h case    6:*/		regs.R30 = regs.R3;
		/* 82152120h case    6:*/		return 0x82152124;
		  /* 82152124h */ case    7:  		/* stw R3, <#[R31 + 132]> */
		/* 82152124h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000084) );
		/* 82152124h case    7:*/		return 0x82152128;
		  /* 82152128h */ case    8:  		/* nop */
		/* 82152128h case    8:*/		cpu::op::nop();
		/* 82152128h case    8:*/		return 0x8215212C;
		  /* 8215212Ch */ case    9:  		/* nop */
		/* 8215212Ch case    9:*/		cpu::op::nop();
		/* 8215212Ch case    9:*/		return 0x82152130;
	}
	return 0x82152130;
} // Block from 82152108h-82152130h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82152130h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152130);
		  /* 82152130h */ case    0:  		/* lwz R3, <#[R30 + 772]> */
		/* 82152130h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000304) );
		/* 82152130h case    0:*/		return 0x82152134;
		  /* 82152134h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82152134h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82152134h case    1:*/		return 0x82152138;
		  /* 82152138h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 82152138h case    2:*/		if ( regs.CR[6].eq ) { return 0x82152150;  }
		/* 82152138h case    2:*/		return 0x8215213C;
		  /* 8215213Ch */ case    3:  		/* stw R3, <#[R31 + 80]> */
		/* 8215213Ch case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000050) );
		/* 8215213Ch case    3:*/		return 0x82152140;
		  /* 82152140h */ case    4:  		/* li R4, 1 */
		/* 82152140h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82152140h case    4:*/		return 0x82152144;
		  /* 82152144h */ case    5:  		/* bl -572 */
		/* 82152144h case    5:*/		regs.LR = 0x82152148; return 0x82151F08;
		/* 82152144h case    5:*/		return 0x82152148;
		  /* 82152148h */ case    6:  		/* li R11, 0 */
		/* 82152148h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82152148h case    6:*/		return 0x8215214C;
		  /* 8215214Ch */ case    7:  		/* stw R11, <#[R30 + 772]> */
		/* 8215214Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000304) );
		/* 8215214Ch case    7:*/		return 0x82152150;
	}
	return 0x82152150;
} // Block from 82152130h-82152150h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82152150h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152150);
		  /* 82152150h */ case    0:  		/* nop */
		/* 82152150h case    0:*/		cpu::op::nop();
		/* 82152150h case    0:*/		return 0x82152154;
		  /* 82152154h */ case    1:  		/* nop */
		/* 82152154h case    1:*/		cpu::op::nop();
		/* 82152154h case    1:*/		return 0x82152158;
		  /* 82152158h */ case    2:  		/* nop */
		/* 82152158h case    2:*/		cpu::op::nop();
		/* 82152158h case    2:*/		return 0x8215215C;
		  /* 8215215Ch */ case    3:  		/* b 8 */
		/* 8215215Ch case    3:*/		return 0x82152164;
		/* 8215215Ch case    3:*/		return 0x82152160;
	}
	return 0x82152160;
} // Block from 82152150h-82152160h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82152160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152160);
		  /* 82152160h */ case    0:  		/* lwz R30, <#[R31 + 132]> */
		/* 82152160h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000084) );
		/* 82152160h case    0:*/		return 0x82152164;
	}
	return 0x82152164;
} // Block from 82152160h-82152164h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82152164h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152164( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152164) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152164);
		  /* 82152164h */ case    0:  		/* ori R0, R0, 0 */
		/* 82152164h case    0:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 82152164h case    0:*/		return 0x82152168;
		  /* 82152168h */ case    1:  		/* nop */
		/* 82152168h case    1:*/		cpu::op::nop();
		/* 82152168h case    1:*/		return 0x8215216C;
		  /* 8215216Ch */ case    2:  		/* nop */
		/* 8215216Ch case    2:*/		cpu::op::nop();
		/* 8215216Ch case    2:*/		return 0x82152170;
	}
	return 0x82152170;
} // Block from 82152164h-82152170h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82152170h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152170);
		  /* 82152170h */ case    0:  		/* lwz R3, <#[R30 + 768]> */
		/* 82152170h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000300) );
		/* 82152170h case    0:*/		return 0x82152174;
		  /* 82152174h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82152174h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82152174h case    1:*/		return 0x82152178;
		  /* 82152178h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 82152178h case    2:*/		if ( regs.CR[6].eq ) { return 0x8215218C;  }
		/* 82152178h case    2:*/		return 0x8215217C;
		  /* 8215217Ch */ case    3:  		/* stw R3, <#[R31 + 80]> */
		/* 8215217Ch case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000050) );
		/* 8215217Ch case    3:*/		return 0x82152180;
		  /* 82152180h */ case    4:  		/* bl -935296 */
		/* 82152180h case    4:*/		regs.LR = 0x82152184; return 0x8206DC00;
		/* 82152180h case    4:*/		return 0x82152184;
		  /* 82152184h */ case    5:  		/* li R11, 0 */
		/* 82152184h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82152184h case    5:*/		return 0x82152188;
		  /* 82152188h */ case    6:  		/* stw R11, <#[R30 + 768]> */
		/* 82152188h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000300) );
		/* 82152188h case    6:*/		return 0x8215218C;
	}
	return 0x8215218C;
} // Block from 82152170h-8215218Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215218Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215218C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215218C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215218C);
		  /* 8215218Ch */ case    0:  		/* nop */
		/* 8215218Ch case    0:*/		cpu::op::nop();
		/* 8215218Ch case    0:*/		return 0x82152190;
		  /* 82152190h */ case    1:  		/* nop */
		/* 82152190h case    1:*/		cpu::op::nop();
		/* 82152190h case    1:*/		return 0x82152194;
		  /* 82152194h */ case    2:  		/* nop */
		/* 82152194h case    2:*/		cpu::op::nop();
		/* 82152194h case    2:*/		return 0x82152198;
		  /* 82152198h */ case    3:  		/* b 8 */
		/* 82152198h case    3:*/		return 0x821521A0;
		/* 82152198h case    3:*/		return 0x8215219C;
	}
	return 0x8215219C;
} // Block from 8215218Ch-8215219Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215219Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215219C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215219C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215219C);
		  /* 8215219Ch */ case    0:  		/* lwz R30, <#[R31 + 132]> */
		/* 8215219Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000084) );
		/* 8215219Ch case    0:*/		return 0x821521A0;
	}
	return 0x821521A0;
} // Block from 8215219Ch-821521A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821521A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821521A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821521A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821521A0);
		  /* 821521A0h */ case    0:  		/* addi R3, R30, 812 */
		/* 821521A0h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0x32C);
		/* 821521A0h case    0:*/		return 0x821521A4;
		  /* 821521A4h */ case    1:  		/* bl -468 */
		/* 821521A4h case    1:*/		regs.LR = 0x821521A8; return 0x82151FD0;
		/* 821521A4h case    1:*/		return 0x821521A8;
		  /* 821521A8h */ case    2:  		/* addi R3, R30, 972 */
		/* 821521A8h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0x3CC);
		/* 821521A8h case    2:*/		return 0x821521AC;
		  /* 821521ACh */ case    3:  		/* bl -476 */
		/* 821521ACh case    3:*/		regs.LR = 0x821521B0; return 0x82151FD0;
		/* 821521ACh case    3:*/		return 0x821521B0;
		  /* 821521B0h */ case    4:  		/* lis R4, 9345 */
		/* 821521B0h case    4:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 821521B0h case    4:*/		return 0x821521B4;
		  /* 821521B4h */ case    5:  		/* lwz R3, <#[R30 + 784]> */
		/* 821521B4h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000310) );
		/* 821521B4h case    5:*/		return 0x821521B8;
		  /* 821521B8h */ case    6:  		/* bl -827008 */
		/* 821521B8h case    6:*/		regs.LR = 0x821521BC; return 0x82088338;
		/* 821521B8h case    6:*/		return 0x821521BC;
		  /* 821521BCh */ case    7:  		/* li R11, 0 */
		/* 821521BCh case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821521BCh case    7:*/		return 0x821521C0;
		  /* 821521C0h */ case    8:  		/* stw R11, <#[R30 + 784]> */
		/* 821521C0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000310) );
		/* 821521C0h case    8:*/		return 0x821521C4;
		  /* 821521C4h */ case    9:  		/* addi R1, R31, 112 */
		/* 821521C4h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R31,0x70);
		/* 821521C4h case    9:*/		return 0x821521C8;
		  /* 821521C8h */ case   10:  		/* lwz R12, <#[R1 - 8]> */
		/* 821521C8h case   10:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821521C8h case   10:*/		return 0x821521CC;
		  /* 821521CCh */ case   11:  		/* mtspr LR, R12 */
		/* 821521CCh case   11:*/		regs.LR = regs.R12;
		/* 821521CCh case   11:*/		return 0x821521D0;
		  /* 821521D0h */ case   12:  		/* ld R30, <#[R1 - 24]> */
		/* 821521D0h case   12:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821521D0h case   12:*/		return 0x821521D4;
		  /* 821521D4h */ case   13:  		/* ld R31, <#[R1 - 16]> */
		/* 821521D4h case   13:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821521D4h case   13:*/		return 0x821521D8;
		  /* 821521D8h */ case   14:  		/* bclr 20, CR0_LT */
		/* 821521D8h case   14:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821521D8h case   14:*/		return 0x821521DC;
	}
	return 0x821521DC;
} // Block from 821521A0h-821521DCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 821521DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821521DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821521DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821521DC);
		  /* 821521DCh */ case    0:  		/* li R3, 1 */
		/* 821521DCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821521DCh case    0:*/		return 0x821521E0;
		  /* 821521E0h */ case    1:  		/* nop */
		/* 821521E0h case    1:*/		cpu::op::nop();
		/* 821521E0h case    1:*/		return 0x821521E4;
		  /* 821521E4h */ case    2:  		/* bclr 20, CR0_LT */
		/* 821521E4h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821521E4h case    2:*/		return 0x821521E8;
	}
	return 0x821521E8;
} // Block from 821521DCh-821521E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821521E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821521E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821521E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821521E8);
		  /* 821521E8h */ case    0:  		/* li R3, 1 */
		/* 821521E8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821521E8h case    0:*/		return 0x821521EC;
		  /* 821521ECh */ case    1:  		/* nop */
		/* 821521ECh case    1:*/		cpu::op::nop();
		/* 821521ECh case    1:*/		return 0x821521F0;
		  /* 821521F0h */ case    2:  		/* bclr 20, CR0_LT */
		/* 821521F0h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821521F0h case    2:*/		return 0x821521F4;
	}
	return 0x821521F4;
} // Block from 821521E8h-821521F4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821521F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821521F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821521F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821521F4);
		  /* 821521F4h */ case    0:  		/* nop */
		/* 821521F4h case    0:*/		cpu::op::nop();
		/* 821521F4h case    0:*/		return 0x821521F8;
	}
	return 0x821521F8;
} // Block from 821521F4h-821521F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821521F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821521F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821521F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821521F8);
		  /* 821521F8h */ case    0:  		/* mfspr R12, LR */
		/* 821521F8h case    0:*/		regs.R12 = regs.LR;
		/* 821521F8h case    0:*/		return 0x821521FC;
		  /* 821521FCh */ case    1:  		/* bl -790448 */
		/* 821521FCh case    1:*/		regs.LR = 0x82152200; return 0x8209124C;
		/* 821521FCh case    1:*/		return 0x82152200;
		  /* 82152200h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82152200h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82152200h case    2:*/		return 0x82152204;
		  /* 82152204h */ case    3:  		/* lwz R11, <#[R3 + 40]> */
		/* 82152204h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000028) );
		/* 82152204h case    3:*/		return 0x82152208;
		  /* 82152208h */ case    4:  		/* mr R31, R3 */
		/* 82152208h case    4:*/		regs.R31 = regs.R3;
		/* 82152208h case    4:*/		return 0x8215220C;
		  /* 8215220Ch */ case    5:  		/* mr R29, R4 */
		/* 8215220Ch case    5:*/		regs.R29 = regs.R4;
		/* 8215220Ch case    5:*/		return 0x82152210;
		  /* 82152210h */ case    6:  		/* andis. R11, R11, 5 */
		/* 82152210h case    6:*/		cpu::op::andis<1>(regs,&regs.R11,regs.R11,0x5);
		/* 82152210h case    6:*/		return 0x82152214;
		  /* 82152214h */ case    7:  		/* mr R28, R5 */
		/* 82152214h case    7:*/		regs.R28 = regs.R5;
		/* 82152214h case    7:*/		return 0x82152218;
		  /* 82152218h */ case    8:  		/* mr R26, R6 */
		/* 82152218h case    8:*/		regs.R26 = regs.R6;
		/* 82152218h case    8:*/		return 0x8215221C;
		  /* 8215221Ch */ case    9:  		/* mr R25, R7 */
		/* 8215221Ch case    9:*/		regs.R25 = regs.R7;
		/* 8215221Ch case    9:*/		return 0x82152220;
		  /* 82152220h */ case   10:  		/* cmplwi CR0, R11, 0 */
		/* 82152220h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82152220h case   10:*/		return 0x82152224;
		  /* 82152224h */ case   11:  		/* bc 12, CR0_EQ, 8 */
		/* 82152224h case   11:*/		if ( regs.CR[0].eq ) { return 0x8215222C;  }
		/* 82152224h case   11:*/		return 0x82152228;
		  /* 82152228h */ case   12:  		/* bl 461384 */
		/* 82152228h case   12:*/		regs.LR = 0x8215222C; return 0x821C2C70;
		/* 82152228h case   12:*/		return 0x8215222C;
	}
	return 0x8215222C;
} // Block from 821521F8h-8215222Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8215222Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215222C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215222C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215222C);
		  /* 8215222Ch */ case    0:  		/* lwz R11, <#[R31 + 44]> */
		/* 8215222Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 8215222Ch case    0:*/		return 0x82152230;
		  /* 82152230h */ case    1:  		/* rlwinm. R11, R11, 0, 7, 8 */
		/* 82152230h case    1:*/		cpu::op::rlwinm<1,0,7,8>(regs,&regs.R11,regs.R11);
		/* 82152230h case    1:*/		return 0x82152234;
		  /* 82152234h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 82152234h case    2:*/		if ( regs.CR[0].eq ) { return 0x82152240;  }
		/* 82152234h case    2:*/		return 0x82152238;
		  /* 82152238h */ case    3:  		/* mr R3, R31 */
		/* 82152238h case    3:*/		regs.R3 = regs.R31;
		/* 82152238h case    3:*/		return 0x8215223C;
		  /* 8215223Ch */ case    4:  		/* bl 479756 */
		/* 8215223Ch case    4:*/		regs.LR = 0x82152240; return 0x821C7448;
		/* 8215223Ch case    4:*/		return 0x82152240;
	}
	return 0x82152240;
} // Block from 8215222Ch-82152240h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82152240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152240);
		  /* 82152240h */ case    0:  		/* mr R3, R31 */
		/* 82152240h case    0:*/		regs.R3 = regs.R31;
		/* 82152240h case    0:*/		return 0x82152244;
		  /* 82152244h */ case    1:  		/* bl 608756 */
		/* 82152244h case    1:*/		regs.LR = 0x82152248; return 0x821E6C38;
		/* 82152244h case    1:*/		return 0x82152248;
		  /* 82152248h */ case    2:  		/* addi R30, R31, 972 */
		/* 82152248h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x3CC);
		/* 82152248h case    2:*/		return 0x8215224C;
		  /* 8215224Ch */ case    3:  		/* mr R3, R30 */
		/* 8215224Ch case    3:*/		regs.R3 = regs.R30;
		/* 8215224Ch case    3:*/		return 0x82152250;
		  /* 82152250h */ case    4:  		/* bl -544 */
		/* 82152250h case    4:*/		regs.LR = 0x82152254; return 0x82152030;
		/* 82152250h case    4:*/		return 0x82152254;
		  /* 82152254h */ case    5:  		/* mr R3, R31 */
		/* 82152254h case    5:*/		regs.R3 = regs.R31;
		/* 82152254h case    5:*/		return 0x82152258;
		  /* 82152258h */ case    6:  		/* bl 431360 */
		/* 82152258h case    6:*/		regs.LR = 0x8215225C; return 0x821BB758;
		/* 82152258h case    6:*/		return 0x8215225C;
		  /* 8215225Ch */ case    7:  		/* mr R3, R30 */
		/* 8215225Ch case    7:*/		regs.R3 = regs.R30;
		/* 8215225Ch case    7:*/		return 0x82152260;
		  /* 82152260h */ case    8:  		/* bl -560 */
		/* 82152260h case    8:*/		regs.LR = 0x82152264; return 0x82152030;
		/* 82152260h case    8:*/		return 0x82152264;
		  /* 82152264h */ case    9:  		/* mr R3, R31 */
		/* 82152264h case    9:*/		regs.R3 = regs.R31;
		/* 82152264h case    9:*/		return 0x82152268;
		  /* 82152268h */ case   10:  		/* bl 390640 */
		/* 82152268h case   10:*/		regs.LR = 0x8215226C; return 0x821B1858;
		/* 82152268h case   10:*/		return 0x8215226C;
		  /* 8215226Ch */ case   11:  		/* mr R3, R30 */
		/* 8215226Ch case   11:*/		regs.R3 = regs.R30;
		/* 8215226Ch case   11:*/		return 0x82152270;
		  /* 82152270h */ case   12:  		/* bl -576 */
		/* 82152270h case   12:*/		regs.LR = 0x82152274; return 0x82152030;
		/* 82152270h case   12:*/		return 0x82152274;
		  /* 82152274h */ case   13:  		/* lwz R11, <#[R31 + 116]> */
		/* 82152274h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000074) );
		/* 82152274h case   13:*/		return 0x82152278;
		  /* 82152278h */ case   14:  		/* li R27, 0 */
		/* 82152278h case   14:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 82152278h case   14:*/		return 0x8215227C;
		  /* 8215227Ch */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 8215227Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8215227Ch case   15:*/		return 0x82152280;
		  /* 82152280h */ case   16:  		/* bc 12, CR6_EQ, 28 */
		/* 82152280h case   16:*/		if ( regs.CR[6].eq ) { return 0x8215229C;  }
		/* 82152280h case   16:*/		return 0x82152284;
		  /* 82152284h */ case   17:  		/* stw R27, <#[R31 + 680]> */
		/* 82152284h case   17:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x000002A8) );
		/* 82152284h case   17:*/		return 0x82152288;
		  /* 82152288h */ case   18:  		/* stw R27, <#[R31 + 684]> */
		/* 82152288h case   18:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x000002AC) );
		/* 82152288h case   18:*/		return 0x8215228C;
		  /* 8215228Ch */ case   19:  		/* stw R27, <#[R31 + 696]> */
		/* 8215228Ch case   19:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x000002B8) );
		/* 8215228Ch case   19:*/		return 0x82152290;
	}
	return 0x82152290;
} // Block from 82152240h-82152290h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82152290h
// Function 'XDisassembleMicrocodeShader'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152290);
		  /* 82152290h */ case    0:  		/* stw R27, <#[R31 + 700]> */
		/* 82152290h case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x000002BC) );
		/* 82152290h case    0:*/		return 0x82152294;
		  /* 82152294h */ case    1:  		/* stw R27, <#[R31 + 704]> */
		/* 82152294h case    1:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x000002C0) );
		/* 82152294h case    1:*/		return 0x82152298;
	}
	return 0x82152298;
} // Block from 82152290h-82152298h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82152298h
// Function '?InitCompilerEntryPoint@D3DXShader@@YAXKPAUCompilerEntryPointState@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152298);
		  /* 82152298h */ case    0:  		/* stw R27, <#[R31 + 708]> */
		/* 82152298h case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x000002C4) );
		/* 82152298h case    0:*/		return 0x8215229C;
	}
	return 0x8215229C;
} // Block from 82152298h-8215229Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215229Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215229C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215229C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215229C);
		  /* 8215229Ch */ case    0:  		/* mr R3, R31 */
		/* 8215229Ch case    0:*/		regs.R3 = regs.R31;
		/* 8215229Ch case    0:*/		return 0x821522A0;
		  /* 821522A0h */ case    1:  		/* bl 281640 */
		/* 821522A0h case    1:*/		regs.LR = 0x821522A4; return 0x82196EC8;
		/* 821522A0h case    1:*/		return 0x821522A4;
		  /* 821522A4h */ case    2:  		/* mr R3, R30 */
		/* 821522A4h case    2:*/		regs.R3 = regs.R30;
		/* 821522A4h case    2:*/		return 0x821522A8;
		  /* 821522A8h */ case    3:  		/* bl -632 */
		/* 821522A8h case    3:*/		regs.LR = 0x821522AC; return 0x82152030;
		/* 821522A8h case    3:*/		return 0x821522AC;
		  /* 821522ACh */ case    4:  		/* mr R3, R31 */
		/* 821522ACh case    4:*/		regs.R3 = regs.R31;
		/* 821522ACh case    4:*/		return 0x821522B0;
		  /* 821522B0h */ case    5:  		/* bl 274064 */
		/* 821522B0h case    5:*/		regs.LR = 0x821522B4; return 0x82195140;
		/* 821522B0h case    5:*/		return 0x821522B4;
		  /* 821522B4h */ case    6:  		/* mr R3, R30 */
		/* 821522B4h case    6:*/		regs.R3 = regs.R30;
		/* 821522B4h case    6:*/		return 0x821522B8;
		  /* 821522B8h */ case    7:  		/* bl -648 */
		/* 821522B8h case    7:*/		regs.LR = 0x821522BC; return 0x82152030;
		/* 821522B8h case    7:*/		return 0x821522BC;
		  /* 821522BCh */ case    8:  		/* mr R3, R31 */
		/* 821522BCh case    8:*/		regs.R3 = regs.R31;
		/* 821522BCh case    8:*/		return 0x821522C0;
		  /* 821522C0h */ case    9:  		/* bl 244888 */
		/* 821522C0h case    9:*/		regs.LR = 0x821522C4; return 0x8218DF58;
		/* 821522C0h case    9:*/		return 0x821522C4;
		  /* 821522C4h */ case   10:  		/* mr R3, R30 */
		/* 821522C4h case   10:*/		regs.R3 = regs.R30;
		/* 821522C4h case   10:*/		return 0x821522C8;
		  /* 821522C8h */ case   11:  		/* bl -664 */
		/* 821522C8h case   11:*/		regs.LR = 0x821522CC; return 0x82152030;
		/* 821522C8h case   11:*/		return 0x821522CC;
		  /* 821522CCh */ case   12:  		/* lwz R11, <#[R31 + 116]> */
		/* 821522CCh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000074) );
		/* 821522CCh case   12:*/		return 0x821522D0;
		  /* 821522D0h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821522D0h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821522D0h case   13:*/		return 0x821522D4;
		  /* 821522D4h */ case   14:  		/* bc 12, CR6_EQ, 12 */
		/* 821522D4h case   14:*/		if ( regs.CR[6].eq ) { return 0x821522E0;  }
		/* 821522D4h case   14:*/		return 0x821522D8;
	}
	return 0x821522D8;
} // Block from 8215229Ch-821522D8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821522D8h
// Function '?BeginCompilerEntryPoint@Compiler@D3DXShader@@SAJPAUCompilerEntryPointState@2@PAXP6AX1HPAVCNode@2@KPBD@Z@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821522D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821522D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821522D8);
		  /* 821522D8h */ case    0:  		/* mr R3, R31 */
		/* 821522D8h case    0:*/		regs.R3 = regs.R31;
		/* 821522D8h case    0:*/		return 0x821522DC;
		  /* 821522DCh */ case    1:  		/* bl 232124 */
		/* 821522DCh case    1:*/		regs.LR = 0x821522E0; return 0x8218AD98;
		/* 821522DCh case    1:*/		return 0x821522E0;
	}
	return 0x821522E0;
} // Block from 821522D8h-821522E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821522E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821522E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821522E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821522E0);
		  /* 821522E0h */ case    0:  		/* lwz R11, <#[R31 + 44]> */
		/* 821522E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821522E0h case    0:*/		return 0x821522E4;
		  /* 821522E4h */ case    1:  		/* rlwinm. R11, R11, 0, 16, 16 */
		/* 821522E4h case    1:*/		cpu::op::rlwinm<1,0,16,16>(regs,&regs.R11,regs.R11);
		/* 821522E4h case    1:*/		return 0x821522E8;
		  /* 821522E8h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821522E8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821522F4;  }
		/* 821522E8h case    2:*/		return 0x821522EC;
		  /* 821522ECh */ case    3:  		/* mr R3, R31 */
		/* 821522ECh case    3:*/		regs.R3 = regs.R31;
		/* 821522ECh case    3:*/		return 0x821522F0;
		  /* 821522F0h */ case    4:  		/* bl 172984 */
		/* 821522F0h case    4:*/		regs.LR = 0x821522F4; return 0x8217C6A8;
		/* 821522F0h case    4:*/		return 0x821522F4;
	}
	return 0x821522F4;
} // Block from 821522E0h-821522F4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821522F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821522F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821522F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821522F4);
		  /* 821522F4h */ case    0:  		/* mr R3, R31 */
		/* 821522F4h case    0:*/		regs.R3 = regs.R31;
		/* 821522F4h case    0:*/		return 0x821522F8;
		  /* 821522F8h */ case    1:  		/* bl 151344 */
		/* 821522F8h case    1:*/		regs.LR = 0x821522FC; return 0x82177228;
		/* 821522F8h case    1:*/		return 0x821522FC;
		  /* 821522FCh */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821522FCh case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821522FCh case    2:*/		return 0x82152300;
		  /* 82152300h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82152300h case    3:*/		if ( regs.CR[0].eq ) { return 0x8215230C;  }
		/* 82152300h case    3:*/		return 0x82152304;
		  /* 82152304h */ case    4:  		/* mr R3, R31 */
		/* 82152304h case    4:*/		regs.R3 = regs.R31;
		/* 82152304h case    4:*/		return 0x82152308;
		  /* 82152308h */ case    5:  		/* bl 147008 */
		/* 82152308h case    5:*/		regs.LR = 0x8215230C; return 0x82176148;
		/* 82152308h case    5:*/		return 0x8215230C;
	}
	return 0x8215230C;
} // Block from 821522F4h-8215230Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215230Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215230C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215230C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215230C);
		  /* 8215230Ch */ case    0:  		/* lwz R11, <#[R31 + 44]> */
		/* 8215230Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 8215230Ch case    0:*/		return 0x82152310;
		  /* 82152310h */ case    1:  		/* ori R11, R11, 128 */
		/* 82152310h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x80);
		/* 82152310h case    1:*/		return 0x82152314;
		  /* 82152314h */ case    2:  		/* rlwinm. R10, R11, 0, 29, 29 */
		/* 82152314h case    2:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R10,regs.R11);
		/* 82152314h case    2:*/		return 0x82152318;
		  /* 82152318h */ case    3:  		/* stw R11, <#[R31 + 44]> */
		/* 82152318h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 82152318h case    3:*/		return 0x8215231C;
		  /* 8215231Ch */ case    4:  		/* bc 12, CR0_EQ, 36 */
		/* 8215231Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x82152340;  }
		/* 8215231Ch case    4:*/		return 0x82152320;
		  /* 82152320h */ case    5:  		/* lwz R11, <#[R31 + 116]> */
		/* 82152320h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000074) );
		/* 82152320h case    5:*/		return 0x82152324;
		  /* 82152324h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82152324h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82152324h case    6:*/		return 0x82152328;
		  /* 82152328h */ case    7:  		/* bc 12, CR6_EQ, 16 */
		/* 82152328h case    7:*/		if ( regs.CR[6].eq ) { return 0x82152338;  }
		/* 82152328h case    7:*/		return 0x8215232C;
		  /* 8215232Ch */ case    8:  		/* lwz R11, <#[R31 + 40]> */
		/* 8215232Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 8215232Ch case    8:*/		return 0x82152330;
		  /* 82152330h */ case    9:  		/* ori R11, R11, 4096 */
		/* 82152330h case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1000);
		/* 82152330h case    9:*/		return 0x82152334;
		  /* 82152334h */ case   10:  		/* stw R11, <#[R31 + 40]> */
		/* 82152334h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82152334h case   10:*/		return 0x82152338;
	}
	return 0x82152338;
} // Block from 8215230Ch-82152338h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82152338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152338);
		  /* 82152338h */ case    0:  		/* mr R3, R31 */
		/* 82152338h case    0:*/		regs.R3 = regs.R31;
		/* 82152338h case    0:*/		return 0x8215233C;
		  /* 8215233Ch */ case    1:  		/* bl 77396 */
		/* 8215233Ch case    1:*/		regs.LR = 0x82152340; return 0x82165190;
		/* 8215233Ch case    1:*/		return 0x82152340;
	}
	return 0x82152340;
} // Block from 82152338h-82152340h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82152340h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152340( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152340) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152340);
		  /* 82152340h */ case    0:  		/* lwz R11, <#[R31 + 44]> */
		/* 82152340h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 82152340h case    0:*/		return 0x82152344;
		  /* 82152344h */ case    1:  		/* rlwinm. R10, R11, 0, 27, 27 */
		/* 82152344h case    1:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R11);
		/* 82152344h case    1:*/		return 0x82152348;
		  /* 82152348h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82152348h case    2:*/		if ( regs.CR[0].eq ) { return 0x82152358;  }
		/* 82152348h case    2:*/		return 0x8215234C;
		  /* 8215234Ch */ case    3:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 8215234Ch case    3:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 8215234Ch case    3:*/		return 0x82152350;
		  /* 82152350h */ case    4:  		/* li R11, 1 */
		/* 82152350h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82152350h case    4:*/		return 0x82152354;
		  /* 82152354h */ case    5:  		/* bc 12, CR0_EQ, 8 */
		/* 82152354h case    5:*/		if ( regs.CR[0].eq ) { return 0x8215235C;  }
		/* 82152354h case    5:*/		return 0x82152358;
	}
	return 0x82152358;
} // Block from 82152340h-82152358h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82152358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152358);
		  /* 82152358h */ case    0:  		/* mr R11, R27 */
		/* 82152358h case    0:*/		regs.R11 = regs.R27;
		/* 82152358h case    0:*/		return 0x8215235C;
	}
	return 0x8215235C;
} // Block from 82152358h-8215235Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215235Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215235C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215235C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215235C);
		  /* 8215235Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8215235Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8215235Ch case    0:*/		return 0x82152360;
	}
	return 0x82152360;
} // Block from 8215235Ch-82152360h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82152360h
// Function '?HandleShaderEntryPointException@D3DXShader@@YAJPAPAUID3DXBuffer@@PAPAUID3DXConstantTable@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152360);
		  /* 82152360h */ case    0:  		/* bc 12, CR0_EQ, 12 */
		/* 82152360h case    0:*/		if ( regs.CR[0].eq ) { return 0x8215236C;  }
		/* 82152360h case    0:*/		return 0x82152364;
		  /* 82152364h */ case    1:  		/* mr R3, R31 */
		/* 82152364h case    1:*/		regs.R3 = regs.R31;
		/* 82152364h case    1:*/		return 0x82152368;
		  /* 82152368h */ case    2:  		/* bl 124632 */
		/* 82152368h case    2:*/		regs.LR = 0x8215236C; return 0x82170A40;
		/* 82152368h case    2:*/		return 0x8215236C;
	}
	return 0x8215236C;
} // Block from 82152360h-8215236Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215236Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215236C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215236C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215236C);
		  /* 8215236Ch */ case    0:  		/* mr R3, R31 */
		/* 8215236Ch case    0:*/		regs.R3 = regs.R31;
		/* 8215236Ch case    0:*/		return 0x82152370;
		  /* 82152370h */ case    1:  		/* bl 123320 */
		/* 82152370h case    1:*/		regs.LR = 0x82152374; return 0x82170528;
		/* 82152370h case    1:*/		return 0x82152374;
		  /* 82152374h */ case    2:  		/* mr R3, R31 */
		/* 82152374h case    2:*/		regs.R3 = regs.R31;
		/* 82152374h case    2:*/		return 0x82152378;
		  /* 82152378h */ case    3:  		/* bl 111520 */
		/* 82152378h case    3:*/		regs.LR = 0x8215237C; return 0x8216D718;
		/* 82152378h case    3:*/		return 0x8215237C;
		  /* 8215237Ch */ case    4:  		/* mr R3, R30 */
		/* 8215237Ch case    4:*/		regs.R3 = regs.R30;
		/* 8215237Ch case    4:*/		return 0x82152380;
		  /* 82152380h */ case    5:  		/* bl -848 */
		/* 82152380h case    5:*/		regs.LR = 0x82152384; return 0x82152030;
		/* 82152380h case    5:*/		return 0x82152384;
		  /* 82152384h */ case    6:  		/* lwz R11, <#[R31 + 116]> */
		/* 82152384h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000074) );
		/* 82152384h case    6:*/		return 0x82152388;
		  /* 82152388h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 82152388h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82152388h case    7:*/		return 0x8215238C;
		  /* 8215238Ch */ case    8:  		/* bc 12, CR6_EQ, 28 */
		/* 8215238Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x821523A8;  }
		/* 8215238Ch case    8:*/		return 0x82152390;
		  /* 82152390h */ case    9:  		/* stw R27, <#[R31 + 680]> */
		/* 82152390h case    9:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x000002A8) );
		/* 82152390h case    9:*/		return 0x82152394;
		  /* 82152394h */ case   10:  		/* stw R27, <#[R31 + 684]> */
		/* 82152394h case   10:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x000002AC) );
		/* 82152394h case   10:*/		return 0x82152398;
	}
	return 0x82152398;
} // Block from 8215236Ch-82152398h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82152398h
// Function '?CompileToMicrocodeErrorCallbackAdapter@D3DXShader@@YAXPAXHPAVCNode@1@KPBD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152398);
		  /* 82152398h */ case    0:  		/* stw R27, <#[R31 + 696]> */
		/* 82152398h case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x000002B8) );
		/* 82152398h case    0:*/		return 0x8215239C;
		  /* 8215239Ch */ case    1:  		/* stw R27, <#[R31 + 700]> */
		/* 8215239Ch case    1:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x000002BC) );
		/* 8215239Ch case    1:*/		return 0x821523A0;
		  /* 821523A0h */ case    2:  		/* stw R27, <#[R31 + 704]> */
		/* 821523A0h case    2:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x000002C0) );
		/* 821523A0h case    2:*/		return 0x821523A4;
		  /* 821523A4h */ case    3:  		/* stw R27, <#[R31 + 708]> */
		/* 821523A4h case    3:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x000002C4) );
		/* 821523A4h case    3:*/		return 0x821523A8;
	}
	return 0x821523A8;
} // Block from 82152398h-821523A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821523A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821523A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821523A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821523A8);
		  /* 821523A8h */ case    0:  		/* mr R7, R25 */
		/* 821523A8h case    0:*/		regs.R7 = regs.R25;
		/* 821523A8h case    0:*/		return 0x821523AC;
		  /* 821523ACh */ case    1:  		/* mr R6, R26 */
		/* 821523ACh case    1:*/		regs.R6 = regs.R26;
		/* 821523ACh case    1:*/		return 0x821523B0;
		  /* 821523B0h */ case    2:  		/* mr R5, R28 */
		/* 821523B0h case    2:*/		regs.R5 = regs.R28;
		/* 821523B0h case    2:*/		return 0x821523B4;
		  /* 821523B4h */ case    3:  		/* mr R4, R29 */
		/* 821523B4h case    3:*/		regs.R4 = regs.R29;
		/* 821523B4h case    3:*/		return 0x821523B8;
		  /* 821523B8h */ case    4:  		/* mr R3, R31 */
		/* 821523B8h case    4:*/		regs.R3 = regs.R31;
		/* 821523B8h case    4:*/		return 0x821523BC;
		  /* 821523BCh */ case    5:  		/* bl 91764 */
		/* 821523BCh case    5:*/		regs.LR = 0x821523C0; return 0x82168A30;
		/* 821523BCh case    5:*/		return 0x821523C0;
		  /* 821523C0h */ case    6:  		/* lwz R11, <#[R31 + 52]> */
		/* 821523C0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000034) );
		/* 821523C0h case    6:*/		return 0x821523C4;
		  /* 821523C4h */ case    7:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 821523C4h case    7:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 821523C4h case    7:*/		return 0x821523C8;
		  /* 821523C8h */ case    8:  		/* bc 4, CR0_EQ, 360 */
		/* 821523C8h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82152530;  }
		/* 821523C8h case    8:*/		return 0x821523CC;
		  /* 821523CCh */ case    9:  		/* lwz R11, <#[R31 + 44]> */
		/* 821523CCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821523CCh case    9:*/		return 0x821523D0;
		  /* 821523D0h */ case   10:  		/* rlwinm. R11, R11, 0, 18, 18 */
		/* 821523D0h case   10:*/		cpu::op::rlwinm<1,0,18,18>(regs,&regs.R11,regs.R11);
		/* 821523D0h case   10:*/		return 0x821523D4;
		  /* 821523D4h */ case   11:  		/* bc 12, CR0_EQ, 68 */
		/* 821523D4h case   11:*/		if ( regs.CR[0].eq ) { return 0x82152418;  }
		/* 821523D4h case   11:*/		return 0x821523D8;
		  /* 821523D8h */ case   12:  		/* lwz R11, <#[R31 + 48]> */
		/* 821523D8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821523D8h case   12:*/		return 0x821523DC;
		  /* 821523DCh */ case   13:  		/* lis R10, -1 */
		/* 821523DCh case   13:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 821523DCh case   13:*/		return 0x821523E0;
		  /* 821523E0h */ case   14:  		/* lwz R3, <#[R26]> */
		/* 821523E0h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R26 + 0x00000000) );
		/* 821523E0h case   14:*/		return 0x821523E4;
		  /* 821523E4h */ case   15:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 821523E4h case   15:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 821523E4h case   15:*/		return 0x821523E8;
		  /* 821523E8h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 821523E8h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821523E8h case   16:*/		return 0x821523EC;
		  /* 821523ECh */ case   17:  		/* lwz R11, <#[R3]> */
		/* 821523ECh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821523ECh case   17:*/		return 0x821523F0;
		  /* 821523F0h */ case   18:  		/* lwz R11, <#[R11 + 12]> */
		/* 821523F0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821523F0h case   18:*/		return 0x821523F4;
		  /* 821523F4h */ case   19:  		/* mtspr CTR, R11 */
		/* 821523F4h case   19:*/		regs.CTR = regs.R11;
		/* 821523F4h case   19:*/		return 0x821523F8;
	}
	return 0x821523F8;
} // Block from 821523A8h-821523F8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821523F8h
// Function '?GetMessageFormatString@D3DXShader@@YAPBDW4ErrorCode@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821523F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821523F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821523F8);
		  /* 821523F8h */ case    0:  		/* bc 12, CR6_EQ, 16 */
		/* 821523F8h case    0:*/		if ( regs.CR[6].eq ) { return 0x82152408;  }
		/* 821523F8h case    0:*/		return 0x821523FC;
		  /* 821523FCh */ case    1:  		/* bcctrl 20, CR0_LT */
		/* 821523FCh case    1:*/		if ( 1 ) { regs.LR = 0x82152400; return (uint32)regs.CTR; }
		/* 821523FCh case    1:*/		return 0x82152400;
		  /* 82152400h */ case    2:  		/* bl 107968 */
		/* 82152400h case    2:*/		regs.LR = 0x82152404; return 0x8216C9C0;
		/* 82152400h case    2:*/		return 0x82152404;
		  /* 82152404h */ case    3:  		/* b 12 */
		/* 82152404h case    3:*/		return 0x82152410;
		/* 82152404h case    3:*/		return 0x82152408;
	}
	return 0x82152408;
} // Block from 821523F8h-82152408h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82152408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152408);
		  /* 82152408h */ case    0:  		/* bcctrl 20, CR0_LT */
		/* 82152408h case    0:*/		if ( 1 ) { regs.LR = 0x8215240C; return (uint32)regs.CTR; }
		/* 82152408h case    0:*/		return 0x8215240C;
		  /* 8215240Ch */ case    1:  		/* bl 107964 */
		/* 8215240Ch case    1:*/		regs.LR = 0x82152410; return 0x8216C9C8;
		/* 8215240Ch case    1:*/		return 0x82152410;
	}
	return 0x82152410;
} // Block from 82152408h-82152410h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82152410h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152410);
		  /* 82152410h */ case    0:  		/* cmpwi CR6, R3, 0 */
		/* 82152410h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000000);
		/* 82152410h case    0:*/		return 0x82152414;
		  /* 82152414h */ case    1:  		/* bc 4, CR6_EQ, 284 */
		/* 82152414h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82152530;  }
		/* 82152414h case    1:*/		return 0x82152418;
	}
	return 0x82152418;
} // Block from 82152410h-82152418h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82152418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152418);
		  /* 82152418h */ case    0:  		/* lwz R11, <#[R31 + 52]> */
		/* 82152418h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000034) );
		/* 82152418h case    0:*/		return 0x8215241C;
		  /* 8215241Ch */ case    1:  		/* lwz R10, <#[R31 + 792]> */
		/* 8215241Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000318) );
		/* 8215241Ch case    1:*/		return 0x82152420;
		  /* 82152420h */ case    2:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 82152420h case    2:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 82152420h case    2:*/		return 0x82152424;
		  /* 82152424h */ case    3:  		/* rlwinm R29, R10, 10, 15, 21 */
		/* 82152424h case    3:*/		cpu::op::rlwinm<0,10,15,21>(regs,&regs.R29,regs.R10);
		/* 82152424h case    3:*/		return 0x82152428;
		  /* 82152428h */ case    4:  		/* bc 12, CR0_EQ, 8 */
		/* 82152428h case    4:*/		if ( regs.CR[0].eq ) { return 0x82152430;  }
		/* 82152428h case    4:*/		return 0x8215242C;
		  /* 8215242Ch */ case    5:  		/* oris R29, R29, 4 */
		/* 8215242Ch case    5:*/		cpu::op::oris<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8215242Ch case    5:*/		return 0x82152430;
	}
	return 0x82152430;
} // Block from 82152418h-82152430h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82152430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152430);
		  /* 82152430h */ case    0:  		/* lwz R30, <#[R26]> */
		/* 82152430h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R26 + 0x00000000) );
		/* 82152430h case    0:*/		return 0x82152434;
		  /* 82152434h */ case    1:  		/* mr R3, R30 */
		/* 82152434h case    1:*/		regs.R3 = regs.R30;
		/* 82152434h case    1:*/		return 0x82152438;
		  /* 82152438h */ case    2:  		/* lwz R11, <#[R30]> */
		/* 82152438h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82152438h case    2:*/		return 0x8215243C;
		  /* 8215243Ch */ case    3:  		/* lwz R11, <#[R11 + 16]> */
		/* 8215243Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8215243Ch case    3:*/		return 0x82152440;
	}
	return 0x82152440;
} // Block from 82152430h-82152440h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82152440h
// Function '?FormatErrorMessage@Compiler@D3DXShader@@QAAXPADKW4ErrorCode@2@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152440);
		  /* 82152440h */ case    0:  		/* mtspr CTR, R11 */
		/* 82152440h case    0:*/		regs.CTR = regs.R11;
		/* 82152440h case    0:*/		return 0x82152444;
		  /* 82152444h */ case    1:  		/* bcctrl 20, CR0_LT */
		/* 82152444h case    1:*/		if ( 1 ) { regs.LR = 0x82152448; return (uint32)regs.CTR; }
		/* 82152444h case    1:*/		return 0x82152448;
		  /* 82152448h */ case    2:  		/* lwz R11, <#[R30]> */
		/* 82152448h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82152448h case    2:*/		return 0x8215244C;
		  /* 8215244Ch */ case    3:  		/* mr R28, R3 */
		/* 8215244Ch case    3:*/		regs.R28 = regs.R3;
		/* 8215244Ch case    3:*/		return 0x82152450;
		  /* 82152450h */ case    4:  		/* mr R3, R30 */
		/* 82152450h case    4:*/		regs.R3 = regs.R30;
		/* 82152450h case    4:*/		return 0x82152454;
		  /* 82152454h */ case    5:  		/* lwz R11, <#[R11 + 12]> */
		/* 82152454h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 82152454h case    5:*/		return 0x82152458;
		  /* 82152458h */ case    6:  		/* mtspr CTR, R11 */
		/* 82152458h case    6:*/		regs.CTR = regs.R11;
		/* 82152458h case    6:*/		return 0x8215245C;
		  /* 8215245Ch */ case    7:  		/* bcctrl 20, CR0_LT */
		/* 8215245Ch case    7:*/		if ( 1 ) { regs.LR = 0x82152460; return (uint32)regs.CTR; }
		/* 8215245Ch case    7:*/		return 0x82152460;
		  /* 82152460h */ case    8:  		/* lis R11, -32234 */
		/* 82152460h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8216);
		/* 82152460h case    8:*/		return 0x82152464;
		  /* 82152464h */ case    9:  		/* mr R4, R28 */
		/* 82152464h case    9:*/		regs.R4 = regs.R28;
		/* 82152464h case    9:*/		return 0x82152468;
		  /* 82152468h */ case   10:  		/* mr R5, R29 */
		/* 82152468h case   10:*/		regs.R5 = regs.R29;
		/* 82152468h case   10:*/		return 0x8215246C;
		  /* 8215246Ch */ case   11:  		/* li R6, 0 */
		/* 8215246Ch case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8215246Ch case   11:*/		return 0x82152470;
		  /* 82152470h */ case   12:  		/* addi R7, R11, 23976 */
		/* 82152470h case   12:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x5DA8);
		/* 82152470h case   12:*/		return 0x82152474;
		  /* 82152474h */ case   13:  		/* mr R8, R31 */
		/* 82152474h case   13:*/		regs.R8 = regs.R31;
		/* 82152474h case   13:*/		return 0x82152478;
		  /* 82152478h */ case   14:  		/* bl 1079432 */
		/* 82152478h case   14:*/		regs.LR = 0x8215247C; return 0x82259D00;
		/* 82152478h case   14:*/		return 0x8215247C;
		  /* 8215247Ch */ case   15:  		/* cmpwi CR0, R3, 0 */
		/* 8215247Ch case   15:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 8215247Ch case   15:*/		return 0x82152480;
		  /* 82152480h */ case   16:  		/* bc 4, CR0_LT, 176 */
		/* 82152480h case   16:*/		if ( !regs.CR[0].lt ) { return 0x82152530;  }
		/* 82152480h case   16:*/		return 0x82152484;
		  /* 82152484h */ case   17:  		/* lwz R11, <#[R31 + 780]> */
		/* 82152484h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000030C) );
		/* 82152484h case   17:*/		return 0x82152488;
		  /* 82152488h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 82152488h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82152488h case   18:*/		return 0x8215248C;
		  /* 8215248Ch */ case   19:  		/* bc 12, CR6_EQ, 16 */
		/* 8215248Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x8215249C;  }
		/* 8215248Ch case   19:*/		return 0x82152490;
		  /* 82152490h */ case   20:  		/* lwz R10, <#[R31 + 776]> */
		/* 82152490h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000308) );
		/* 82152490h case   20:*/		return 0x82152494;
		  /* 82152494h */ case   21:  		/* cmplw CR6, R10, R11 */
		/* 82152494h case   21:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82152494h case   21:*/		return 0x82152498;
		  /* 82152498h */ case   22:  		/* bc 4, CR6_GT, 152 */
		/* 82152498h case   22:*/		if ( !regs.CR[6].gt ) { return 0x82152530;  }
		/* 82152498h case   22:*/		return 0x8215249C;
	}
	return 0x8215249C;
} // Block from 82152440h-8215249Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 8215249Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215249C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215249C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215249C);
		  /* 8215249Ch */ case    0:  		/* lwz R4, <#[R31 + 784]> */
		/* 8215249Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000310) );
		/* 8215249Ch case    0:*/		return 0x821524A0;
	}
	return 0x821524A0;
} // Block from 8215249Ch-821524A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821524A0h
// Function '?PopDisabledTransformation@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821524A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821524A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821524A0);
		  /* 821524A0h */ case    0:  		/* lis R11, -32256 */
		/* 821524A0h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821524A0h case    0:*/		return 0x821524A4;
		  /* 821524A4h */ case    1:  		/* addi R30, R11, 17784 */
		/* 821524A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x4578);
		/* 821524A4h case    1:*/		return 0x821524A8;
		  /* 821524A8h */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 821524A8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821524A8h case    2:*/		return 0x821524AC;
		  /* 821524ACh */ case    3:  		/* bc 12, CR6_EQ, 40 */
		/* 821524ACh case    3:*/		if ( regs.CR[6].eq ) { return 0x821524D4;  }
		/* 821524ACh case    3:*/		return 0x821524B0;
		  /* 821524B0h */ case    4:  		/* mr R3, R30 */
		/* 821524B0h case    4:*/		regs.R3 = regs.R30;
		/* 821524B0h case    4:*/		return 0x821524B4;
		  /* 821524B4h */ case    5:  		/* bl -751452 */
		/* 821524B4h case    5:*/		regs.LR = 0x821524B8; return 0x8209AD58;
		/* 821524B4h case    5:*/		return 0x821524B8;
	}
	return 0x821524B8;
} // Block from 821524A0h-821524B8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821524B8h
// Function '?RestartCompiler@Compiler@D3DXShader@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821524B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821524B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821524B8);
		  /* 821524B8h */ case    0:  		/* lis R4, 9345 */
		/* 821524B8h case    0:*/		cpu::op::lis<0>(regs,&regs.R4,0x2481);
		/* 821524B8h case    0:*/		return 0x821524BC;
		  /* 821524BCh */ case    1:  		/* lwz R3, <#[R31 + 784]> */
		/* 821524BCh case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000310) );
		/* 821524BCh case    1:*/		return 0x821524C0;
		  /* 821524C0h */ case    2:  		/* bl -827784 */
		/* 821524C0h case    2:*/		regs.LR = 0x821524C4; return 0x82088338;
		/* 821524C0h case    2:*/		return 0x821524C4;
		  /* 821524C4h */ case    3:  		/* lwz R11, <#[R31 + 776]> */
		/* 821524C4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000308) );
		/* 821524C4h case    3:*/		return 0x821524C8;
		  /* 821524C8h */ case    4:  		/* stw R27, <#[R31 + 784]> */
		/* 821524C8h case    4:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000310) );
		/* 821524C8h case    4:*/		return 0x821524CC;
		  /* 821524CCh */ case    5:  		/* addi R11, R11, 1 */
		/* 821524CCh case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821524CCh case    5:*/		return 0x821524D0;
		  /* 821524D0h */ case    6:  		/* stw R11, <#[R31 + 776]> */
		/* 821524D0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000308) );
		/* 821524D0h case    6:*/		return 0x821524D4;
	}
	return 0x821524D4;
} // Block from 821524B8h-821524D4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821524D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821524D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821524D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821524D4);
		  /* 821524D4h */ case    0:  		/* lis R11, -32234 */
		/* 821524D4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8216);
		/* 821524D4h case    0:*/		return 0x821524D8;
	}
	return 0x821524D8;
} // Block from 821524D4h-821524D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821524D8h
// Function '?RemoveAutoZ@Compiler@D3DXShader@@AAAJPAPAUID3DXBuffer@@KP6AJPAXPBDK@Z1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821524D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821524D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821524D8);
		  /* 821524D8h */ case    0:  		/* mr R7, R31 */
		/* 821524D8h case    0:*/		regs.R7 = regs.R31;
		/* 821524D8h case    0:*/		return 0x821524DC;
		  /* 821524DCh */ case    1:  		/* addi R6, R11, 23976 */
		/* 821524DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x5DA8);
		/* 821524DCh case    1:*/		return 0x821524E0;
		  /* 821524E0h */ case    2:  		/* mr R5, R29 */
		/* 821524E0h case    2:*/		regs.R5 = regs.R29;
		/* 821524E0h case    2:*/		return 0x821524E4;
		  /* 821524E4h */ case    3:  		/* mr R4, R26 */
		/* 821524E4h case    3:*/		regs.R4 = regs.R26;
		/* 821524E4h case    3:*/		return 0x821524E8;
		  /* 821524E8h */ case    4:  		/* mr R3, R31 */
		/* 821524E8h case    4:*/		regs.R3 = regs.R31;
		/* 821524E8h case    4:*/		return 0x821524EC;
		  /* 821524ECh */ case    5:  		/* bl -2516 */
		/* 821524ECh case    5:*/		regs.LR = 0x821524F0; return 0x82151B18;
		/* 821524ECh case    5:*/		return 0x821524F0;
		  /* 821524F0h */ case    6:  		/* cmpwi CR0, R3, 0 */
		/* 821524F0h case    6:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821524F0h case    6:*/		return 0x821524F4;
		  /* 821524F4h */ case    7:  		/* bc 4, CR0_LT, 60 */
		/* 821524F4h case    7:*/		if ( !regs.CR[0].lt ) { return 0x82152530;  }
		/* 821524F4h case    7:*/		return 0x821524F8;
		  /* 821524F8h */ case    8:  		/* lwz R4, <#[R31 + 784]> */
		/* 821524F8h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000310) );
		/* 821524F8h case    8:*/		return 0x821524FC;
		  /* 821524FCh */ case    9:  		/* cmplwi CR6, R4, 0 */
		/* 821524FCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821524FCh case    9:*/		return 0x82152500;
		  /* 82152500h */ case   10:  		/* bc 12, CR6_EQ, 24 */
		/* 82152500h case   10:*/		if ( regs.CR[6].eq ) { return 0x82152518;  }
		/* 82152500h case   10:*/		return 0x82152504;
		  /* 82152504h */ case   11:  		/* mr R3, R30 */
		/* 82152504h case   11:*/		regs.R3 = regs.R30;
		/* 82152504h case   11:*/		return 0x82152508;
		  /* 82152508h */ case   12:  		/* bl -751536 */
		/* 82152508h case   12:*/		regs.LR = 0x8215250C; return 0x8209AD58;
		/* 82152508h case   12:*/		return 0x8215250C;
		  /* 8215250Ch */ case   13:  		/* lwz R11, <#[R31 + 776]> */
		/* 8215250Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000308) );
		/* 8215250Ch case   13:*/		return 0x82152510;
		  /* 82152510h */ case   14:  		/* addi R11, R11, 1 */
		/* 82152510h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82152510h case   14:*/		return 0x82152514;
		  /* 82152514h */ case   15:  		/* stw R11, <#[R31 + 776]> */
		/* 82152514h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000308) );
		/* 82152514h case   15:*/		return 0x82152518;
	}
	return 0x82152518;
} // Block from 821524D8h-82152518h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82152518h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152518);
		  /* 82152518h */ case    0:  		/* lwz R11, <#[R31 + 44]> */
		/* 82152518h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 82152518h case    0:*/		return 0x8215251C;
		  /* 8215251Ch */ case    1:  		/* rlwinm. R11, R11, 0, 15, 15 */
		/* 8215251Ch case    1:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R11,regs.R11);
		/* 8215251Ch case    1:*/		return 0x82152520;
		  /* 82152520h */ case    2:  		/* bc 12, CR0_EQ, 24 */
		/* 82152520h case    2:*/		if ( regs.CR[0].eq ) { return 0x82152538;  }
		/* 82152520h case    2:*/		return 0x82152524;
		  /* 82152524h */ case    3:  		/* li R4, 3551 */
		/* 82152524h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0xDDF);
		/* 82152524h case    3:*/		return 0x82152528;
		  /* 82152528h */ case    4:  		/* mr R3, R31 */
		/* 82152528h case    4:*/		regs.R3 = regs.R31;
		/* 82152528h case    4:*/		return 0x8215252C;
		  /* 8215252Ch */ case    5:  		/* bl -1972 */
		/* 8215252Ch case    5:*/		regs.LR = 0x82152530; return 0x82151D78;
		/* 8215252Ch case    5:*/		return 0x82152530;
	}
	return 0x82152530;
} // Block from 82152518h-82152530h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82152530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152530);
		  /* 82152530h */ case    0:  		/* addi R1, R1, 192 */
		/* 82152530h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82152530h case    0:*/		return 0x82152534;
		  /* 82152534h */ case    1:  		/* b -791192 */
		/* 82152534h case    1:*/		return 0x8209129C;
		/* 82152534h case    1:*/		return 0x82152538;
	}
	return 0x82152538;
} // Block from 82152530h-82152538h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82152538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152538);
		  /* 82152538h */ case    0:  		/* lwz R3, <#[R26]> */
		/* 82152538h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R26 + 0x00000000) );
		/* 82152538h case    0:*/		return 0x8215253C;
		  /* 8215253Ch */ case    1:  		/* lwz R11, <#[R3]> */
		/* 8215253Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8215253Ch case    1:*/		return 0x82152540;
		  /* 82152540h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 82152540h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82152540h case    2:*/		return 0x82152544;
		  /* 82152544h */ case    3:  		/* mtspr CTR, R11 */
		/* 82152544h case    3:*/		regs.CTR = regs.R11;
		/* 82152544h case    3:*/		return 0x82152548;
		  /* 82152548h */ case    4:  		/* bcctrl 20, CR0_LT */
		/* 82152548h case    4:*/		if ( 1 ) { regs.LR = 0x8215254C; return (uint32)regs.CTR; }
		/* 82152548h case    4:*/		return 0x8215254C;
		  /* 8215254Ch */ case    5:  		/* cmplwi CR6, R25, 0 */
		/* 8215254Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8215254Ch case    5:*/		return 0x82152550;
		  /* 82152550h */ case    6:  		/* stw R27, <#[R26]> */
		/* 82152550h case    6:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R26 + 0x00000000) );
		/* 82152550h case    6:*/		return 0x82152554;
		  /* 82152554h */ case    7:  		/* bc 12, CR6_EQ, 36 */
		/* 82152554h case    7:*/		if ( regs.CR[6].eq ) { return 0x82152578;  }
		/* 82152554h case    7:*/		return 0x82152558;
		  /* 82152558h */ case    8:  		/* lwz R3, <#[R25]> */
		/* 82152558h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000000) );
		/* 82152558h case    8:*/		return 0x8215255C;
		  /* 8215255Ch */ case    9:  		/* cmplwi CR6, R3, 0 */
		/* 8215255Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215255Ch case    9:*/		return 0x82152560;
		  /* 82152560h */ case   10:  		/* bc 12, CR6_EQ, 24 */
		/* 82152560h case   10:*/		if ( regs.CR[6].eq ) { return 0x82152578;  }
		/* 82152560h case   10:*/		return 0x82152564;
		  /* 82152564h */ case   11:  		/* lwz R11, <#[R3]> */
		/* 82152564h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82152564h case   11:*/		return 0x82152568;
		  /* 82152568h */ case   12:  		/* lwz R11, <#[R11 + 8]> */
		/* 82152568h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82152568h case   12:*/		return 0x8215256C;
		  /* 8215256Ch */ case   13:  		/* mtspr CTR, R11 */
		/* 8215256Ch case   13:*/		regs.CTR = regs.R11;
		/* 8215256Ch case   13:*/		return 0x82152570;
		  /* 82152570h */ case   14:  		/* bcctrl 20, CR0_LT */
		/* 82152570h case   14:*/		if ( 1 ) { regs.LR = 0x82152574; return (uint32)regs.CTR; }
		/* 82152570h case   14:*/		return 0x82152574;
		  /* 82152574h */ case   15:  		/* stw R27, <#[R25]> */
		/* 82152574h case   15:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R25 + 0x00000000) );
		/* 82152574h case   15:*/		return 0x82152578;
	}
	return 0x82152578;
} // Block from 82152538h-82152578h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82152578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152578);
		  /* 82152578h */ case    0:  		/* li R4, 3551 */
		/* 82152578h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDDF);
		/* 82152578h case    0:*/		return 0x8215257C;
		  /* 8215257Ch */ case    1:  		/* mr R3, R31 */
		/* 8215257Ch case    1:*/		regs.R3 = regs.R31;
		/* 8215257Ch case    1:*/		return 0x82152580;
		  /* 82152580h */ case    2:  		/* bl -1816 */
		/* 82152580h case    2:*/		regs.LR = 0x82152584; return 0x82151E68;
		/* 82152580h case    2:*/		return 0x82152584;
		  /* 82152584h */ case    3:  		/* nop */
		/* 82152584h case    3:*/		cpu::op::nop();
		/* 82152584h case    3:*/		return 0x82152588;
	}
	return 0x82152588;
} // Block from 82152578h-82152588h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82152588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152588);
		  /* 82152588h */ case    0:  		/* mfspr R12, LR */
		/* 82152588h case    0:*/		regs.R12 = regs.LR;
		/* 82152588h case    0:*/		return 0x8215258C;
		  /* 8215258Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215258Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215258Ch case    1:*/		return 0x82152590;
		  /* 82152590h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82152590h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82152590h case    2:*/		return 0x82152594;
		  /* 82152594h */ case    3:  		/* stw R3, <#[R1 + 132]> */
		/* 82152594h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000084) );
		/* 82152594h case    3:*/		return 0x82152598;
		  /* 82152598h */ case    4:  		/* lwz R11, <#[R1 + 132]> */
		/* 82152598h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 82152598h case    4:*/		return 0x8215259C;
		  /* 8215259Ch */ case    5:  		/* lwz R11, <#[R11 + 4]> */
		/* 8215259Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8215259Ch case    5:*/		return 0x821525A0;
		  /* 821525A0h */ case    6:  		/* stw R11, <#[R1 + 80]> */
		/* 821525A0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821525A0h case    6:*/		return 0x821525A4;
		  /* 821525A4h */ case    7:  		/* lwz R11, <#[R1 + 80]> */
		/* 821525A4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821525A4h case    7:*/		return 0x821525A8;
		  /* 821525A8h */ case    8:  		/* lwz R11, <#[R11 + 40]> */
		/* 821525A8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821525A8h case    8:*/		return 0x821525AC;
		  /* 821525ACh */ case    9:  		/* rlwinm. R11, R11, 0, 3, 3 */
		/* 821525ACh case    9:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R11);
		/* 821525ACh case    9:*/		return 0x821525B0;
		  /* 821525B0h */ case   10:  		/* bc 12, CR0_EQ, 120 */
		/* 821525B0h case   10:*/		if ( regs.CR[0].eq ) { return 0x82152628;  }
		/* 821525B0h case   10:*/		return 0x821525B4;
		  /* 821525B4h */ case   11:  		/* lwz R11, <#[R1 + 80]> */
		/* 821525B4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821525B4h case   11:*/		return 0x821525B8;
		  /* 821525B8h */ case   12:  		/* lwz R10, <#[R1 + 132]> */
		/* 821525B8h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000084) );
		/* 821525B8h case   12:*/		return 0x821525BC;
		  /* 821525BCh */ case   13:  		/* lwz R10, <#[R10]> */
		/* 821525BCh case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 821525BCh case   13:*/		return 0x821525C0;
		  /* 821525C0h */ case   14:  		/* lwz R11, <#[R11 + 52]> */
		/* 821525C0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000034) );
		/* 821525C0h case   14:*/		return 0x821525C4;
		  /* 821525C4h */ case   15:  		/* cmplw CR6, R10, R11 */
		/* 821525C4h case   15:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821525C4h case   15:*/		return 0x821525C8;
		  /* 821525C8h */ case   16:  		/* bc 4, CR6_EQ, 24 */
		/* 821525C8h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821525E0;  }
		/* 821525C8h case   16:*/		return 0x821525CC;
		  /* 821525CCh */ case   17:  		/* lwz R11, <#[R1 + 80]> */
		/* 821525CCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821525CCh case   17:*/		return 0x821525D0;
		  /* 821525D0h */ case   18:  		/* lis R10, -32768 */
		/* 821525D0h case   18:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8000);
		/* 821525D0h case   18:*/		return 0x821525D4;
		  /* 821525D4h */ case   19:  		/* ori R10, R10, 65535 */
		/* 821525D4h case   19:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0xFFFF);
		/* 821525D4h case   19:*/		return 0x821525D8;
		  /* 821525D8h */ case   20:  		/* stw R10, <#[R11 + 2480]> */
		/* 821525D8h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x000009B0) );
		/* 821525D8h case   20:*/		return 0x821525DC;
		  /* 821525DCh */ case   21:  		/* b 76 */
		/* 821525DCh case   21:*/		return 0x82152628;
		/* 821525DCh case   21:*/		return 0x821525E0;
	}
	return 0x821525E0;
} // Block from 82152588h-821525E0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821525E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821525E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821525E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821525E0);
		  /* 821525E0h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 821525E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821525E0h case    0:*/		return 0x821525E4;
		  /* 821525E4h */ case    1:  		/* lwz R11, <#[R11 + 52]> */
		/* 821525E4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000034) );
		/* 821525E4h case    1:*/		return 0x821525E8;
		  /* 821525E8h */ case    2:  		/* lwz R10, <#[R1 + 132]> */
		/* 821525E8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000084) );
		/* 821525E8h case    2:*/		return 0x821525EC;
		  /* 821525ECh */ case    3:  		/* stw R11, <#[R10]> */
		/* 821525ECh case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821525ECh case    3:*/		return 0x821525F0;
		  /* 821525F0h */ case    4:  		/* lis R11, -32768 */
		/* 821525F0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 821525F0h case    4:*/		return 0x821525F4;
		  /* 821525F4h */ case    5:  		/* ori R4, R11, 16389 */
		/* 821525F4h case    5:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R11,0x4005);
		/* 821525F4h case    5:*/		return 0x821525F8;
		  /* 821525F8h */ case    6:  		/* lwz R3, <#[R1 + 80]> */
		/* 821525F8h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 821525F8h case    6:*/		return 0x821525FC;
		  /* 821525FCh */ case    7:  		/* bl -1268 */
		/* 821525FCh case    7:*/		regs.LR = 0x82152600; return 0x82152108;
		/* 821525FCh case    7:*/		return 0x82152600;
		  /* 82152600h */ case    8:  		/* lwz R3, <#[R1 + 80]> */
		/* 82152600h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 82152600h case    8:*/		return 0x82152604;
		  /* 82152604h */ case    9:  		/* bl -734884 */
		/* 82152604h case    9:*/		regs.LR = 0x82152608; return 0x8209EF60;
		/* 82152604h case    9:*/		return 0x82152608;
		  /* 82152608h */ case   10:  		/* lwz R11, <#[R1 + 132]> */
		/* 82152608h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 82152608h case   10:*/		return 0x8215260C;
		  /* 8215260Ch */ case   11:  		/* li R10, 0 */
		/* 8215260Ch case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8215260Ch case   11:*/		return 0x82152610;
		  /* 82152610h */ case   12:  		/* stw R10, <#[R11 + 4]> */
		/* 82152610h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82152610h case   12:*/		return 0x82152614;
		  /* 82152614h */ case   13:  		/* lwz R11, <#[R1 + 132]> */
		/* 82152614h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 82152614h case   13:*/		return 0x82152618;
		  /* 82152618h */ case   14:  		/* li R10, 0 */
		/* 82152618h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82152618h case   14:*/		return 0x8215261C;
		  /* 8215261Ch */ case   15:  		/* stb R10, <#[R11 + 8]> */
		/* 8215261Ch case   15:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8215261Ch case   15:*/		return 0x82152620;
		  /* 82152620h */ case   16:  		/* li R3, 0 */
		/* 82152620h case   16:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82152620h case   16:*/		return 0x82152624;
		  /* 82152624h */ case   17:  		/* b 44 */
		/* 82152624h case   17:*/		return 0x82152650;
		/* 82152624h case   17:*/		return 0x82152628;
	}
	return 0x82152628;
} // Block from 821525E0h-82152628h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82152628h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152628( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152628) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152628);
		  /* 82152628h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 82152628h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82152628h case    0:*/		return 0x8215262C;
		  /* 8215262Ch */ case    1:  		/* lwz R11, <#[R11 + 2480]> */
		/* 8215262Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000009B0) );
		/* 8215262Ch case    1:*/		return 0x82152630;
		  /* 82152630h */ case    2:  		/* stw R11, <#[R1 + 84]> */
		/* 82152630h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82152630h case    2:*/		return 0x82152634;
		  /* 82152634h */ case    3:  		/* lwz R11, <#[R1 + 84]> */
		/* 82152634h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82152634h case    3:*/		return 0x82152638;
		  /* 82152638h */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 82152638h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82152638h case    4:*/		return 0x8215263C;
		  /* 8215263Ch */ case    5:  		/* bc 12, CR6_LT, 16 */
		/* 8215263Ch case    5:*/		if ( regs.CR[6].lt ) { return 0x8215264C;  }
		/* 8215263Ch case    5:*/		return 0x82152640;
		  /* 82152640h */ case    6:  		/* lis R11, -32768 */
		/* 82152640h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8000);
		/* 82152640h case    6:*/		return 0x82152644;
		  /* 82152644h */ case    7:  		/* ori R11, R11, 65535 */
		/* 82152644h case    7:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xFFFF);
		/* 82152644h case    7:*/		return 0x82152648;
		  /* 82152648h */ case    8:  		/* stw R11, <#[R1 + 84]> */
		/* 82152648h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82152648h case    8:*/		return 0x8215264C;
	}
	return 0x8215264C;
} // Block from 82152628h-8215264Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215264Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215264C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215264C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215264C);
		  /* 8215264Ch */ case    0:  		/* lwz R3, <#[R1 + 84]> */
		/* 8215264Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000054) );
		/* 8215264Ch case    0:*/		return 0x82152650;
	}
	return 0x82152650;
} // Block from 8215264Ch-82152650h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82152650h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152650( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152650) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152650);
		  /* 82152650h */ case    0:  		/* addi R1, R1, 112 */
		/* 82152650h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82152650h case    0:*/		return 0x82152654;
		  /* 82152654h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82152654h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82152654h case    1:*/		return 0x82152658;
		  /* 82152658h */ case    2:  		/* mtspr LR, R12 */
		/* 82152658h case    2:*/		regs.LR = regs.R12;
		/* 82152658h case    2:*/		return 0x8215265C;
		  /* 8215265Ch */ case    3:  		/* bclr 20, CR0_LT */
		/* 8215265Ch case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215265Ch case    3:*/		return 0x82152660;
	}
	return 0x82152660;
} // Block from 82152650h-82152660h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82152660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152660);
		  /* 82152660h */ case    0:  		/* lwz R17, <#[R6 - 11576]> */
		/* 82152660h case    0:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R6 + 0xFFFFD2C8) );
		/* 82152660h case    0:*/		return 0x82152664;
		  /* 82152664h */ case    1:  		/* lwz R16, <#[R4 - 14960]> */
		/* 82152664h case    1:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R4 + 0xFFFFC590) );
		/* 82152664h case    1:*/		return 0x82152668;
	}
	return 0x82152668;
} // Block from 82152660h-82152668h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82152668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152668);
		  /* 82152668h */ case    0:  		/* mfspr R12, LR */
		/* 82152668h case    0:*/		regs.R12 = regs.LR;
		/* 82152668h case    0:*/		return 0x8215266C;
		  /* 8215266Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215266Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215266Ch case    1:*/		return 0x82152670;
		  /* 82152670h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82152670h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82152670h case    2:*/		return 0x82152674;
		  /* 82152674h */ case    3:  		/* addi R31, R1, -112 */
		/* 82152674h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0xFFFFFF90);
		/* 82152674h case    3:*/		return 0x82152678;
		  /* 82152678h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82152678h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82152678h case    4:*/		return 0x8215267C;
		  /* 8215267Ch */ case    5:  		/* stw R3, <#[R31 + 132]> */
		/* 8215267Ch case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000084) );
		/* 8215267Ch case    5:*/		return 0x82152680;
	}
	return 0x82152680;
} // Block from 82152668h-82152680h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82152680h
// Function '?FatalErrorWorker@Compiler@D3DXShader@@AAAXW4ErrorCode@2@PAD@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152680);
		  /* 82152680h */ case    0:  		/* stw R4, <#[R31 + 140]> */
		/* 82152680h case    0:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R31 + 0x0000008C) );
		/* 82152680h case    0:*/		return 0x82152684;
		  /* 82152684h */ case    1:  		/* lwz R11, <#[R31 + 132]> */
		/* 82152684h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000084) );
		/* 82152684h case    1:*/		return 0x82152688;
		  /* 82152688h */ case    2:  		/* lbz R11, <#[R11 + 8]> */
		/* 82152688h case    2:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82152688h case    2:*/		return 0x8215268C;
		  /* 8215268Ch */ case    3:  		/* cmpwi CR0, R11, 0 */
		/* 8215268Ch case    3:*/		cpu::op::cmpwi<0>(regs,regs.R11,0x00000000);
		/* 8215268Ch case    3:*/		return 0x82152690;
		  /* 82152690h */ case    4:  		/* bc 12, CR0_EQ, 40 */
		/* 82152690h case    4:*/		if ( regs.CR[0].eq ) { return 0x821526B8;  }
		/* 82152690h case    4:*/		return 0x82152694;
		  /* 82152694h */ case    5:  		/* nop */
		/* 82152694h case    5:*/		cpu::op::nop();
		/* 82152694h case    5:*/		return 0x82152698;
		  /* 82152698h */ case    6:  		/* nop */
		/* 82152698h case    6:*/		cpu::op::nop();
		/* 82152698h case    6:*/		return 0x8215269C;
	}
	return 0x8215269C;
} // Block from 82152680h-8215269Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215269Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215269C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215269C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215269C);
		  /* 8215269Ch */ case    0:  		/* lwz R4, <#[R31 + 140]> */
		/* 8215269Ch case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000008C) );
		/* 8215269Ch case    0:*/		return 0x821526A0;
		  /* 821526A0h */ case    1:  		/* lwz R11, <#[R31 + 132]> */
		/* 821526A0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000084) );
		/* 821526A0h case    1:*/		return 0x821526A4;
		  /* 821526A4h */ case    2:  		/* lwz R3, <#[R11 + 4]> */
		/* 821526A4h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		/* 821526A4h case    2:*/		return 0x821526A8;
		  /* 821526A8h */ case    3:  		/* bl -1440 */
		/* 821526A8h case    3:*/		regs.LR = 0x821526AC; return 0x82152108;
		/* 821526A8h case    3:*/		return 0x821526AC;
	}
	return 0x821526AC;
} // Block from 8215269Ch-821526ACh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821526ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821526AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821526AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821526AC);
		  /* 821526ACh */ case    0:  		/* nop */
		/* 821526ACh case    0:*/		cpu::op::nop();
		/* 821526ACh case    0:*/		return 0x821526B0;
		  /* 821526B0h */ case    1:  		/* nop */
		/* 821526B0h case    1:*/		cpu::op::nop();
		/* 821526B0h case    1:*/		return 0x821526B4;
		  /* 821526B4h */ case    2:  		/* nop */
		/* 821526B4h case    2:*/		cpu::op::nop();
		/* 821526B4h case    2:*/		return 0x821526B8;
	}
	return 0x821526B8;
} // Block from 821526ACh-821526B8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821526B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821526B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821526B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821526B8);
		  /* 821526B8h */ case    0:  		/* lwz R11, <#[R31 + 132]> */
		/* 821526B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000084) );
		/* 821526B8h case    0:*/		return 0x821526BC;
		  /* 821526BCh */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821526BCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821526BCh case    1:*/		return 0x821526C0;
		  /* 821526C0h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821526C0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821526C0h case    2:*/		return 0x821526C4;
		  /* 821526C4h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 821526C4h case    3:*/		if ( regs.CR[6].eq ) { return 0x821526D4;  }
		/* 821526C4h case    3:*/		return 0x821526C8;
		  /* 821526C8h */ case    4:  		/* lwz R11, <#[R31 + 132]> */
		/* 821526C8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000084) );
		/* 821526C8h case    4:*/		return 0x821526CC;
		  /* 821526CCh */ case    5:  		/* lwz R3, <#[R11 + 4]> */
		/* 821526CCh case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		/* 821526CCh case    5:*/		return 0x821526D0;
		  /* 821526D0h */ case    6:  		/* bl -735088 */
		/* 821526D0h case    6:*/		regs.LR = 0x821526D4; return 0x8209EF60;
		/* 821526D0h case    6:*/		return 0x821526D4;
	}
	return 0x821526D4;
} // Block from 821526B8h-821526D4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821526D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821526D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821526D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821526D4);
		  /* 821526D4h */ case    0:  		/* lwz R3, <#[R31 + 140]> */
		/* 821526D4h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000008C) );
		/* 821526D4h case    0:*/		return 0x821526D8;
		  /* 821526D8h */ case    1:  		/* addi R1, R31, 112 */
		/* 821526D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R31,0x70);
		/* 821526D8h case    1:*/		return 0x821526DC;
		  /* 821526DCh */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 821526DCh case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821526DCh case    2:*/		return 0x821526E0;
		  /* 821526E0h */ case    3:  		/* mtspr LR, R12 */
		/* 821526E0h case    3:*/		regs.LR = regs.R12;
		/* 821526E0h case    3:*/		return 0x821526E4;
		  /* 821526E4h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 821526E4h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821526E4h case    4:*/		return 0x821526E8;
		  /* 821526E8h */ case    5:  		/* bclr 20, CR0_LT */
		/* 821526E8h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821526E8h case    5:*/		return 0x821526EC;
	}
	return 0x821526EC;
} // Block from 821526D4h-821526ECh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821526ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821526EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821526EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821526EC);
		  /* 821526ECh */ case    0:  		/* li R3, 1 */
		/* 821526ECh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821526ECh case    0:*/		return 0x821526F0;
		  /* 821526F0h */ case    1:  		/* nop */
		/* 821526F0h case    1:*/		cpu::op::nop();
		/* 821526F0h case    1:*/		return 0x821526F4;
		  /* 821526F4h */ case    2:  		/* bclr 20, CR0_LT */
		/* 821526F4h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821526F4h case    2:*/		return 0x821526F8;
	}
	return 0x821526F8;
} // Block from 821526ECh-821526F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821526F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821526F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821526F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821526F8);
		  /* 821526F8h */ case    0:  		/* mfspr R12, LR */
		/* 821526F8h case    0:*/		regs.R12 = regs.LR;
		/* 821526F8h case    0:*/		return 0x821526FC;
		  /* 821526FCh */ case    1:  		/* bl -791712 */
		/* 821526FCh case    1:*/		regs.LR = 0x82152700; return 0x8209125C;
		/* 821526FCh case    1:*/		return 0x82152700;
		  /* 82152700h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82152700h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82152700h case    2:*/		return 0x82152704;
		  /* 82152704h */ case    3:  		/* mr R31, R3 */
		/* 82152704h case    3:*/		regs.R31 = regs.R3;
		/* 82152704h case    3:*/		return 0x82152708;
		  /* 82152708h */ case    4:  		/* bl 830648 */
		/* 82152708h case    4:*/		regs.LR = 0x8215270C; return 0x8221D3C0;
		/* 82152708h case    4:*/		return 0x8215270C;
		  /* 8215270Ch */ case    5:  		/* addi R11, R31, 4 */
		/* 8215270Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 8215270Ch case    5:*/		return 0x82152710;
		  /* 82152710h */ case    6:  		/* addi R30, R31, 812 */
		/* 82152710h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x32C);
		/* 82152710h case    6:*/		return 0x82152714;
		  /* 82152714h */ case    7:  		/* ori R11, R11, 1 */
		/* 82152714h case    7:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82152714h case    7:*/		return 0x82152718;
		  /* 82152718h */ case    8:  		/* ori R10, R31, 1 */
		/* 82152718h case    8:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R31,0x1);
		/* 82152718h case    8:*/		return 0x8215271C;
		  /* 8215271Ch */ case    9:  		/* mr R3, R30 */
		/* 8215271Ch case    9:*/		regs.R3 = regs.R30;
		/* 8215271Ch case    9:*/		return 0x82152720;
		  /* 82152720h */ case   10:  		/* stw R11, <#[R31]> */
		/* 82152720h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82152720h case   10:*/		return 0x82152724;
		  /* 82152724h */ case   11:  		/* li R5, 132 */
		/* 82152724h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x84);
		/* 82152724h case   11:*/		return 0x82152728;
		  /* 82152728h */ case   12:  		/* stw R10, <#[R31 + 4]> */
		/* 82152728h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82152728h case   12:*/		return 0x8215272C;
		  /* 8215272Ch */ case   13:  		/* li R4, 0 */
		/* 8215272Ch case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8215272Ch case   13:*/		return 0x82152730;
		  /* 82152730h */ case   14:  		/* bl -791536 */
		/* 82152730h case   14:*/		regs.LR = 0x82152734; return 0x82091340;
		/* 82152730h case   14:*/		return 0x82152734;
		  /* 82152734h */ case   15:  		/* addi R11, R30, 152 */
		/* 82152734h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x98);
		/* 82152734h case   15:*/		return 0x82152738;
	}
	return 0x82152738;
} // Block from 821526F8h-82152738h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82152738h
// Function '?Warning@Compiler@D3DXShader@@QAAXW4ErrorCode@2@ZZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152738( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152738) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152738);
		  /* 82152738h */ case    0:  		/* addi R29, R31, 972 */
		/* 82152738h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x3CC);
		/* 82152738h case    0:*/		return 0x8215273C;
		  /* 8215273Ch */ case    1:  		/* stw R31, <#[R31 + 960]> */
		/* 8215273Ch case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R31 + 0x000003C0) );
		/* 8215273Ch case    1:*/		return 0x82152740;
		  /* 82152740h */ case    2:  		/* addi R10, R11, 4 */
		/* 82152740h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82152740h case    2:*/		return 0x82152744;
		  /* 82152744h */ case    3:  		/* ori R11, R11, 1 */
		/* 82152744h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82152744h case    3:*/		return 0x82152748;
		  /* 82152748h */ case    4:  		/* ori R10, R10, 1 */
		/* 82152748h case    4:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82152748h case    4:*/		return 0x8215274C;
		  /* 8215274Ch */ case    5:  		/* mr R3, R29 */
		/* 8215274Ch case    5:*/		regs.R3 = regs.R29;
		/* 8215274Ch case    5:*/		return 0x82152750;
		  /* 82152750h */ case    6:  		/* stw R11, <#[R31 + 968]> */
		/* 82152750h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000003C8) );
		/* 82152750h case    6:*/		return 0x82152754;
		  /* 82152754h */ case    7:  		/* li R5, 132 */
		/* 82152754h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x84);
		/* 82152754h case    7:*/		return 0x82152758;
		  /* 82152758h */ case    8:  		/* stw R10, <#[R31 + 964]> */
		/* 82152758h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x000003C4) );
		/* 82152758h case    8:*/		return 0x8215275C;
		  /* 8215275Ch */ case    9:  		/* li R4, 0 */
		/* 8215275Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8215275Ch case    9:*/		return 0x82152760;
		  /* 82152760h */ case   10:  		/* bl -791584 */
		/* 82152760h case   10:*/		regs.LR = 0x82152764; return 0x82091340;
		/* 82152760h case   10:*/		return 0x82152764;
		  /* 82152764h */ case   11:  		/* addi R11, R29, 152 */
		/* 82152764h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x98);
		/* 82152764h case   11:*/		return 0x82152768;
		  /* 82152768h */ case   12:  		/* stw R31, <#[R31 + 1120]> */
		/* 82152768h case   12:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R31 + 0x00000460) );
		/* 82152768h case   12:*/		return 0x8215276C;
		  /* 8215276Ch */ case   13:  		/* mr R3, R30 */
		/* 8215276Ch case   13:*/		regs.R3 = regs.R30;
		/* 8215276Ch case   13:*/		return 0x82152770;
		  /* 82152770h */ case   14:  		/* addi R10, R11, 4 */
		/* 82152770h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82152770h case   14:*/		return 0x82152774;
		  /* 82152774h */ case   15:  		/* ori R11, R11, 1 */
		/* 82152774h case   15:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82152774h case   15:*/		return 0x82152778;
		  /* 82152778h */ case   16:  		/* ori R10, R10, 1 */
		/* 82152778h case   16:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82152778h case   16:*/		return 0x8215277C;
		  /* 8215277Ch */ case   17:  		/* stw R11, <#[R31 + 1128]> */
		/* 8215277Ch case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000468) );
		/* 8215277Ch case   17:*/		return 0x82152780;
		  /* 82152780h */ case   18:  		/* stw R10, <#[R31 + 1124]> */
		/* 82152780h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000464) );
		/* 82152780h case   18:*/		return 0x82152784;
		  /* 82152784h */ case   19:  		/* bl -1756 */
		/* 82152784h case   19:*/		regs.LR = 0x82152788; return 0x821520A8;
		/* 82152784h case   19:*/		return 0x82152788;
		  /* 82152788h */ case   20:  		/* mr R11, R3 */
		/* 82152788h case   20:*/		regs.R11 = regs.R3;
		/* 82152788h case   20:*/		return 0x8215278C;
		  /* 8215278Ch */ case   21:  		/* mr R3, R29 */
		/* 8215278Ch case   21:*/		regs.R3 = regs.R29;
		/* 8215278Ch case   21:*/		return 0x82152790;
		  /* 82152790h */ case   22:  		/* addi R10, R11, 8 */
		/* 82152790h case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 82152790h case   22:*/		return 0x82152794;
		  /* 82152794h */ case   23:  		/* stw R11, <#[R31 + 944]> */
		/* 82152794h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000003B0) );
		/* 82152794h case   23:*/		return 0x82152798;
		  /* 82152798h */ case   24:  		/* stw R11, <#[R31 + 948]> */
		/* 82152798h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000003B4) );
		/* 82152798h case   24:*/		return 0x8215279C;
		  /* 8215279Ch */ case   25:  		/* stw R11, <#[R31 + 952]> */
		/* 8215279Ch case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000003B8) );
		/* 8215279Ch case   25:*/		return 0x821527A0;
		  /* 821527A0h */ case   26:  		/* stw R10, <#[R31 + 956]> */
		/* 821527A0h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x000003BC) );
		/* 821527A0h case   26:*/		return 0x821527A4;
		  /* 821527A4h */ case   27:  		/* bl -1788 */
		/* 821527A4h case   27:*/		regs.LR = 0x821527A8; return 0x821520A8;
		/* 821527A4h case   27:*/		return 0x821527A8;
		  /* 821527A8h */ case   28:  		/* addi R10, R3, 8 */
		/* 821527A8h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R3,0x8);
		/* 821527A8h case   28:*/		return 0x821527AC;
		  /* 821527ACh */ case   29:  		/* li R11, 0 */
		/* 821527ACh case   29:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821527ACh case   29:*/		return 0x821527B0;
		  /* 821527B0h */ case   30:  		/* stw R3, <#[R31 + 1104]> */
		/* 821527B0h case   30:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000450) );
		/* 821527B0h case   30:*/		return 0x821527B4;
		  /* 821527B4h */ case   31:  		/* li R9, -1 */
		/* 821527B4h case   31:*/		cpu::op::li<0>(regs,&regs.R9,0xFFFFFFFF);
		/* 821527B4h case   31:*/		return 0x821527B8;
		  /* 821527B8h */ case   32:  		/* stw R3, <#[R31 + 1108]> */
		/* 821527B8h case   32:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000454) );
		/* 821527B8h case   32:*/		return 0x821527BC;
		  /* 821527BCh */ case   33:  		/* stw R3, <#[R31 + 1112]> */
		/* 821527BCh case   33:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000458) );
		/* 821527BCh case   33:*/		return 0x821527C0;
		  /* 821527C0h */ case   34:  		/* stw R10, <#[R31 + 1116]> */
		/* 821527C0h case   34:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000045C) );
		/* 821527C0h case   34:*/		return 0x821527C4;
		  /* 821527C4h */ case   35:  		/* stw R11, <#[R31 + 40]> */
		/* 821527C4h case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821527C4h case   35:*/		return 0x821527C8;
	}
	return 0x821527C8;
} // Block from 82152738h-821527C8h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821527C8h
// Function '?FreeInContext@CompilerHeap@D3DXShader@@SAXPAX0K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821527C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821527C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821527C8);
		  /* 821527C8h */ case    0:  		/* stw R9, <#[R31 + 788]> */
		/* 821527C8h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000314) );
		/* 821527C8h case    0:*/		return 0x821527CC;
		  /* 821527CCh */ case    1:  		/* bl 611484 */
		/* 821527CCh case    1:*/		regs.LR = 0x821527D0; return 0x821E7C68;
		/* 821527CCh case    1:*/		return 0x821527D0;
		  /* 821527D0h */ case    2:  		/* addi R1, R1, 112 */
		/* 821527D0h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821527D0h case    2:*/		return 0x821527D4;
		  /* 821527D4h */ case    3:  		/* b -791848 */
		/* 821527D4h case    3:*/		return 0x820912AC;
		/* 821527D4h case    3:*/		return 0x821527D8;
	}
	return 0x821527D8;
} // Block from 821527C8h-821527D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821527D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821527D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821527D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821527D8);
		  /* 821527D8h */ case    0:  		/* mfspr R12, LR */
		/* 821527D8h case    0:*/		regs.R12 = regs.LR;
		/* 821527D8h case    0:*/		return 0x821527DC;
		  /* 821527DCh */ case    1:  		/* bl -791960 */
		/* 821527DCh case    1:*/		regs.LR = 0x821527E0; return 0x82091244;
		/* 821527DCh case    1:*/		return 0x821527E0;
		  /* 821527E0h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 821527E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 821527E0h case    2:*/		return 0x821527E4;
		  /* 821527E4h */ case    3:  		/* mr R31, R3 */
		/* 821527E4h case    3:*/		regs.R31 = regs.R3;
		/* 821527E4h case    3:*/		return 0x821527E8;
		  /* 821527E8h */ case    4:  		/* mr R28, R4 */
		/* 821527E8h case    4:*/		regs.R28 = regs.R4;
		/* 821527E8h case    4:*/		return 0x821527EC;
		  /* 821527ECh */ case    5:  		/* mr R27, R5 */
		/* 821527ECh case    5:*/		regs.R27 = regs.R5;
		/* 821527ECh case    5:*/		return 0x821527F0;
		  /* 821527F0h */ case    6:  		/* mr R26, R7 */
		/* 821527F0h case    6:*/		regs.R26 = regs.R7;
		/* 821527F0h case    6:*/		return 0x821527F4;
		  /* 821527F4h */ case    7:  		/* mr R25, R8 */
		/* 821527F4h case    7:*/		regs.R25 = regs.R8;
		/* 821527F4h case    7:*/		return 0x821527F8;
		  /* 821527F8h */ case    8:  		/* mr R24, R9 */
		/* 821527F8h case    8:*/		regs.R24 = regs.R9;
		/* 821527F8h case    8:*/		return 0x821527FC;
		  /* 821527FCh */ case    9:  		/* mr R23, R10 */
		/* 821527FCh case    9:*/		regs.R23 = regs.R10;
		/* 821527FCh case    9:*/		return 0x82152800;
		  /* 82152800h */ case   10:  		/* cmpwi CR6, R6, 0 */
		/* 82152800h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R6,0x00000000);
		/* 82152800h case   10:*/		return 0x82152804;
		  /* 82152804h */ case   11:  		/* bc 12, CR6_EQ, 16 */
		/* 82152804h case   11:*/		if ( regs.CR[6].eq ) { return 0x82152814;  }
		/* 82152804h case   11:*/		return 0x82152808;
		  /* 82152808h */ case   12:  		/* lwz R11, <#[R3 + 40]> */
		/* 82152808h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000028) );
		/* 82152808h case   12:*/		return 0x8215280C;
		  /* 8215280Ch */ case   13:  		/* ori R11, R11, 2048 */
		/* 8215280Ch case   13:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x800);
		/* 8215280Ch case   13:*/		return 0x82152810;
		  /* 82152810h */ case   14:  		/* stw R11, <#[R3 + 40]> */
		/* 82152810h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000028) );
		/* 82152810h case   14:*/		return 0x82152814;
	}
	return 0x82152814;
} // Block from 821527D8h-82152814h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82152814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152814);
		  /* 82152814h */ case    0:  		/* lwz R30, <#[R1 + 356]> */
		/* 82152814h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000164) );
		/* 82152814h case    0:*/		return 0x82152818;
		  /* 82152818h */ case    1:  		/* lis R29, -1 */
		/* 82152818h case    1:*/		cpu::op::lis<0>(regs,&regs.R29,0xFFFFFFFF);
		/* 82152818h case    1:*/		return 0x8215281C;
		  /* 8215281Ch */ case    2:  		/* stw R27, <#[R31 + 52]> */
		/* 8215281Ch case    2:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000034) );
		/* 8215281Ch case    2:*/		return 0x82152820;
		  /* 82152820h */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 82152820h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82152820h case    3:*/		return 0x82152824;
		  /* 82152824h */ case    4:  		/* stw R28, <#[R31 + 48]> */
		/* 82152824h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000030) );
		/* 82152824h case    4:*/		return 0x82152828;
	}
	return 0x82152828;
} // Block from 82152814h-82152828h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82152828h
// Function '?FatalError@Compiler@D3DXShader@@QAAXW4ErrorCode@2@ZZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152828);
		  /* 82152828h */ case    0:  		/* stw R30, <#[R31 + 56]> */
		/* 82152828h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000038) );
		/* 82152828h case    0:*/		return 0x8215282C;
		  /* 8215282Ch */ case    1:  		/* bc 12, CR6_EQ, 156 */
		/* 8215282Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821528C8;  }
		/* 8215282Ch case    1:*/		return 0x82152830;
		  /* 82152830h */ case    2:  		/* lwz R6, <#[R30 + 16]> */
		/* 82152830h case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R30 + 0x00000010) );
		/* 82152830h case    2:*/		return 0x82152834;
		  /* 82152834h */ case    3:  		/* cmplwi CR6, R6, 64 */
		/* 82152834h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000040);
		/* 82152834h case    3:*/		return 0x82152838;
		  /* 82152838h */ case    4:  		/* stw R6, <#[R31 + 792]> */
		/* 82152838h case    4:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R31 + 0x00000318) );
		/* 82152838h case    4:*/		return 0x8215283C;
		  /* 8215283Ch */ case    5:  		/* bc 4, CR6_GT, 20 */
		/* 8215283Ch case    5:*/		if ( !regs.CR[6].gt ) { return 0x82152850;  }
		/* 8215283Ch case    5:*/		return 0x82152840;
		  /* 82152840h */ case    6:  		/* li R5, 64 */
		/* 82152840h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x40);
		/* 82152840h case    6:*/		return 0x82152844;
		  /* 82152844h */ case    7:  		/* li R4, 3589 */
		/* 82152844h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0xE05);
		/* 82152844h case    7:*/		return 0x82152848;
		  /* 82152848h */ case    8:  		/* mr R3, R31 */
		/* 82152848h case    8:*/		regs.R3 = regs.R31;
		/* 82152848h case    8:*/		return 0x8215284C;
		  /* 8215284Ch */ case    9:  		/* bl -2532 */
		/* 8215284Ch case    9:*/		regs.LR = 0x82152850; return 0x82151E68;
		/* 8215284Ch case    9:*/		return 0x82152850;
	}
	return 0x82152850;
} // Block from 82152828h-82152850h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82152850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152850);
		  /* 82152850h */ case    0:  		/* rlwinm R11, R28, 0, 0, 15 */
		/* 82152850h case    0:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R28);
		/* 82152850h case    0:*/		return 0x82152854;
		  /* 82152854h */ case    1:  		/* cmplw CR6, R11, R29 */
		/* 82152854h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 82152854h case    1:*/		return 0x82152858;
		  /* 82152858h */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 82152858h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82152874;  }
		/* 82152858h case    2:*/		return 0x8215285C;
		  /* 8215285Ch */ case    3:  		/* lwz R11, <#[R30 + 32]> */
		/* 8215285Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8215285Ch case    3:*/		return 0x82152860;
		  /* 82152860h */ case    4:  		/* stw R11, <#[R31 + 800]> */
		/* 82152860h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000320) );
		/* 82152860h case    4:*/		return 0x82152864;
		  /* 82152864h */ case    5:  		/* lwz R11, <#[R30 + 36]> */
		/* 82152864h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 82152864h case    5:*/		return 0x82152868;
	}
	return 0x82152868;
} // Block from 82152850h-82152868h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82152868h
// Function '?HandleFetchOptionsErrorCallback@Compiler@D3DXShader@@CAXPAXPBDZZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152868);
		  /* 82152868h */ case    0:  		/* stw R11, <#[R31 + 804]> */
		/* 82152868h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000324) );
		/* 82152868h case    0:*/		return 0x8215286C;
		  /* 8215286Ch */ case    1:  		/* lwz R11, <#[R30 + 48]> */
		/* 8215286Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 8215286Ch case    1:*/		return 0x82152870;
		  /* 82152870h */ case    2:  		/* b 24 */
		/* 82152870h case    2:*/		return 0x82152888;
		/* 82152870h case    2:*/		return 0x82152874;
	}
	return 0x82152874;
} // Block from 82152868h-82152874h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82152874h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152874( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152874) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152874);
		  /* 82152874h */ case    0:  		/* lwz R11, <#[R30 + 40]> */
		/* 82152874h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 82152874h case    0:*/		return 0x82152878;
		  /* 82152878h */ case    1:  		/* stw R11, <#[R31 + 800]> */
		/* 82152878h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000320) );
		/* 82152878h case    1:*/		return 0x8215287C;
		  /* 8215287Ch */ case    2:  		/* lwz R11, <#[R30 + 44]> */
		/* 8215287Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 8215287Ch case    2:*/		return 0x82152880;
		  /* 82152880h */ case    3:  		/* stw R11, <#[R31 + 804]> */
		/* 82152880h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000324) );
		/* 82152880h case    3:*/		return 0x82152884;
		  /* 82152884h */ case    4:  		/* lwz R11, <#[R30 + 52]> */
		/* 82152884h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000034) );
		/* 82152884h case    4:*/		return 0x82152888;
	}
	return 0x82152888;
} // Block from 82152874h-82152888h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82152888h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152888);
		  /* 82152888h */ case    0:  		/* stw R11, <#[R31 + 808]> */
		/* 82152888h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000328) );
		/* 82152888h case    0:*/		return 0x8215288C;
		  /* 8215288Ch */ case    1:  		/* lwz R11, <#[R30]> */
		/* 8215288Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8215288Ch case    1:*/		return 0x82152890;
		  /* 82152890h */ case    2:  		/* rlwinm. R11, R11, 0, 24, 24 */
		/* 82152890h case    2:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R11,regs.R11);
		/* 82152890h case    2:*/		return 0x82152894;
		  /* 82152894h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 82152894h case    3:*/		if ( regs.CR[0].eq ) { return 0x821528A4;  }
		/* 82152894h case    3:*/		return 0x82152898;
		  /* 82152898h */ case    4:  		/* lwz R11, <#[R31 + 44]> */
		/* 82152898h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 82152898h case    4:*/		return 0x8215289C;
		  /* 8215289Ch */ case    5:  		/* ori R11, R11, 4096 */
		/* 8215289Ch case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1000);
		/* 8215289Ch case    5:*/		return 0x821528A0;
		  /* 821528A0h */ case    6:  		/* stw R11, <#[R31 + 44]> */
		/* 821528A0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821528A0h case    6:*/		return 0x821528A4;
	}
	return 0x821528A4;
} // Block from 82152888h-821528A4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821528A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821528A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821528A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821528A4);
		  /* 821528A4h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821528A4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821528A4h case    0:*/		return 0x821528A8;
		  /* 821528A8h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 821528A8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821528C8;  }
		/* 821528A8h case    1:*/		return 0x821528AC;
		  /* 821528ACh */ case    2:  		/* lwz R11, <#[R30]> */
		/* 821528ACh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821528ACh case    2:*/		return 0x821528B0;
		  /* 821528B0h */ case    3:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 821528B0h case    3:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 821528B0h case    3:*/		return 0x821528B4;
		  /* 821528B4h */ case    4:  		/* bc 12, CR0_EQ, 20 */
		/* 821528B4h case    4:*/		if ( regs.CR[0].eq ) { return 0x821528C8;  }
		/* 821528B4h case    4:*/		return 0x821528B8;
		  /* 821528B8h */ case    5:  		/* mr R5, R28 */
		/* 821528B8h case    5:*/		regs.R5 = regs.R28;
		/* 821528B8h case    5:*/		return 0x821528BC;
		  /* 821528BCh */ case    6:  		/* lwz R3, <#[R30 + 20]> */
		/* 821528BCh case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000014) );
		/* 821528BCh case    6:*/		return 0x821528C0;
		  /* 821528C0h */ case    7:  		/* mr R4, R25 */
		/* 821528C0h case    7:*/		regs.R4 = regs.R25;
		/* 821528C0h case    7:*/		return 0x821528C4;
		  /* 821528C4h */ case    8:  		/* bl -28020 */
		/* 821528C4h case    8:*/		regs.LR = 0x821528C8; return 0x8214BB50;
		/* 821528C4h case    8:*/		return 0x821528C8;
	}
	return 0x821528C8;
} // Block from 821528A4h-821528C8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821528C8h
// Function '??_GCCompilerHeapCommentBlock@D3DXShader@@QAAPAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821528C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821528C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821528C8);
		  /* 821528C8h */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 821528C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821528C8h case    0:*/		return 0x821528CC;
		  /* 821528CCh */ case    1:  		/* rlwinm R10, R11, 0, 0, 15 */
		/* 821528CCh case    1:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R10,regs.R11);
		/* 821528CCh case    1:*/		return 0x821528D0;
		  /* 821528D0h */ case    2:  		/* cmplw CR6, R10, R29 */
		/* 821528D0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 821528D0h case    2:*/		return 0x821528D4;
		  /* 821528D4h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 821528D4h case    3:*/		if ( regs.CR[6].eq ) { return 0x82152904;  }
		/* 821528D4h case    3:*/		return 0x821528D8;
		  /* 821528D8h */ case    4:  		/* lwz R11, <#[R31 + 56]> */
		/* 821528D8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821528D8h case    4:*/		return 0x821528DC;
		  /* 821528DCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821528DCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821528DCh case    5:*/		return 0x821528E0;
		  /* 821528E0h */ case    6:  		/* bc 12, CR6_EQ, 16 */
		/* 821528E0h case    6:*/		if ( regs.CR[6].eq ) { return 0x821528F0;  }
		/* 821528E0h case    6:*/		return 0x821528E4;
		  /* 821528E4h */ case    7:  		/* lwz R11, <#[R11]> */
		/* 821528E4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821528E4h case    7:*/		return 0x821528E8;
		  /* 821528E8h */ case    8:  		/* rlwinm. R11, R11, 0, 26, 26 */
		/* 821528E8h case    8:*/		cpu::op::rlwinm<1,0,26,26>(regs,&regs.R11,regs.R11);
		/* 821528E8h case    8:*/		return 0x821528EC;
		  /* 821528ECh */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 821528ECh case    9:*/		if ( regs.CR[0].eq ) { return 0x821528FC;  }
		/* 821528ECh case    9:*/		return 0x821528F0;
	}
	return 0x821528F0;
} // Block from 821528C8h-821528F0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821528F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821528F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821528F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821528F0);
		  /* 821528F0h */ case    0:  		/* lwz R11, <#[R31 + 44]> */
		/* 821528F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821528F0h case    0:*/		return 0x821528F4;
		  /* 821528F4h */ case    1:  		/* ori R11, R11, 16 */
		/* 821528F4h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x10);
		/* 821528F4h case    1:*/		return 0x821528F8;
		  /* 821528F8h */ case    2:  		/* stw R11, <#[R31 + 44]> */
		/* 821528F8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821528F8h case    2:*/		return 0x821528FC;
	}
	return 0x821528FC;
} // Block from 821528F0h-821528FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821528FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821528FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821528FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821528FC);
		  /* 821528FCh */ case    0:  		/* cmplw CR6, R10, R29 */
		/* 821528FCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 821528FCh case    0:*/		return 0x82152900;
		  /* 82152900h */ case    1:  		/* bc 4, CR6_EQ, 40 */
		/* 82152900h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82152928;  }
		/* 82152900h case    1:*/		return 0x82152904;
	}
	return 0x82152904;
} // Block from 821528FCh-82152904h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82152904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152904);
		  /* 82152904h */ case    0:  		/* lwz R11, <#[R31 + 56]> */
		/* 82152904h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 82152904h case    0:*/		return 0x82152908;
		  /* 82152908h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82152908h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82152908h case    1:*/		return 0x8215290C;
		  /* 8215290Ch */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 8215290Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82152928;  }
		/* 8215290Ch case    2:*/		return 0x82152910;
		  /* 82152910h */ case    3:  		/* lwz R11, <#[R11]> */
		/* 82152910h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82152910h case    3:*/		return 0x82152914;
		  /* 82152914h */ case    4:  		/* rlwinm. R11, R11, 0, 25, 25 */
		/* 82152914h case    4:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R11,regs.R11);
		/* 82152914h case    4:*/		return 0x82152918;
		  /* 82152918h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 82152918h case    5:*/		if ( regs.CR[0].eq ) { return 0x82152928;  }
		/* 82152918h case    5:*/		return 0x8215291C;
		  /* 8215291Ch */ case    6:  		/* lwz R11, <#[R31 + 44]> */
		/* 8215291Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 8215291Ch case    6:*/		return 0x82152920;
	}
	return 0x82152920;
} // Block from 82152904h-82152920h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82152920h
// Function '?FreeHeapAllocations@CompilerHeap@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152920);
		  /* 82152920h */ case    0:  		/* ori R11, R11, 64 */
		/* 82152920h case    0:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x40);
		/* 82152920h case    0:*/		return 0x82152924;
		  /* 82152924h */ case    1:  		/* stw R11, <#[R31 + 44]> */
		/* 82152924h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 82152924h case    1:*/		return 0x82152928;
	}
	return 0x82152928;
} // Block from 82152920h-82152928h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82152928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152928);
		  /* 82152928h */ case    0:  		/* mr R5, R24 */
		/* 82152928h case    0:*/		regs.R5 = regs.R24;
		/* 82152928h case    0:*/		return 0x8215292C;
		  /* 8215292Ch */ case    1:  		/* mr R4, R26 */
		/* 8215292Ch case    1:*/		regs.R4 = regs.R26;
		/* 8215292Ch case    1:*/		return 0x82152930;
		  /* 82152930h */ case    2:  		/* mr R3, R31 */
		/* 82152930h case    2:*/		regs.R3 = regs.R31;
		/* 82152930h case    2:*/		return 0x82152934;
		  /* 82152934h */ case    3:  		/* bl 744820 */
		/* 82152934h case    3:*/		regs.LR = 0x82152938; return 0x822086A8;
		/* 82152934h case    3:*/		return 0x82152938;
		  /* 82152938h */ case    4:  		/* or. R4, R3, R3 */
		/* 82152938h case    4:*/		cpu::op::or<1>(regs,&regs.R4,regs.R3,regs.R3);
		/* 82152938h case    4:*/		return 0x8215293C;
		  /* 8215293Ch */ case    5:  		/* mr R3, R31 */
		/* 8215293Ch case    5:*/		regs.R3 = regs.R31;
		/* 8215293Ch case    5:*/		return 0x82152940;
		  /* 82152940h */ case    6:  		/* bc 4, CR0_EQ, 16 */
		/* 82152940h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82152950;  }
		/* 82152940h case    6:*/		return 0x82152944;
		  /* 82152944h */ case    7:  		/* mr R5, R25 */
		/* 82152944h case    7:*/		regs.R5 = regs.R25;
		/* 82152944h case    7:*/		return 0x82152948;
		  /* 82152948h */ case    8:  		/* li R4, 3501 */
		/* 82152948h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0xDAD);
		/* 82152948h case    8:*/		return 0x8215294C;
		  /* 8215294Ch */ case    9:  		/* bl -2788 */
		/* 8215294Ch case    9:*/		regs.LR = 0x82152950; return 0x82151E68;
		/* 8215294Ch case    9:*/		return 0x82152950;
	}
	return 0x82152950;
} // Block from 82152928h-82152950h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82152950h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152950);
		  /* 82152950h */ case    0:  		/* mr R5, R23 */
		/* 82152950h case    0:*/		regs.R5 = regs.R23;
		/* 82152950h case    0:*/		return 0x82152954;
		  /* 82152954h */ case    1:  		/* bl 731676 */
		/* 82152954h case    1:*/		regs.LR = 0x82152958; return 0x82205370;
		/* 82152954h case    1:*/		return 0x82152958;
		  /* 82152958h */ case    2:  		/* mr R3, R31 */
		/* 82152958h case    2:*/		regs.R3 = regs.R31;
		/* 82152958h case    2:*/		return 0x8215295C;
		  /* 8215295Ch */ case    3:  		/* bl 625900 */
		/* 8215295Ch case    3:*/		regs.LR = 0x82152960; return 0x821EB648;
		/* 8215295Ch case    3:*/		return 0x82152960;
		  /* 82152960h */ case    4:  		/* lwz R11, <#[R31 + 4]> */
		/* 82152960h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82152960h case    4:*/		return 0x82152964;
		  /* 82152964h */ case    5:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 82152964h case    5:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82152964h case    5:*/		return 0x82152968;
		  /* 82152968h */ case    6:  		/* addic R10, R10, -1 */
		/* 82152968h case    6:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82152968h case    6:*/		return 0x8215296C;
		  /* 8215296Ch */ case    7:  		/* subfe R10, R10, R10 */
		/* 8215296Ch case    7:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8215296Ch case    7:*/		return 0x82152970;
		  /* 82152970h */ case    8:  		/* and R11, R10, R11 */
		/* 82152970h case    8:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82152970h case    8:*/		return 0x82152974;
		  /* 82152974h */ case    9:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82152974h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82152974h case    9:*/		return 0x82152978;
		  /* 82152978h */ case   10:  		/* lwz R11, <#[R11 + 4]> */
		/* 82152978h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82152978h case   10:*/		return 0x8215297C;
		  /* 8215297Ch */ case   11:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8215297Ch case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8215297Ch case   11:*/		return 0x82152980;
		  /* 82152980h */ case   12:  		/* bc 4, CR0_EQ, 20 */
		/* 82152980h case   12:*/		if ( !regs.CR[0].eq ) { return 0x82152994;  }
		/* 82152980h case   12:*/		return 0x82152984;
		  /* 82152984h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 82152984h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82152984h case   13:*/		return 0x82152988;
		  /* 82152988h */ case   14:  		/* bc 12, CR6_EQ, 12 */
		/* 82152988h case   14:*/		if ( regs.CR[6].eq ) { return 0x82152994;  }
		/* 82152988h case   14:*/		return 0x8215298C;
		  /* 8215298Ch */ case   15:  		/* mr R3, R31 */
		/* 8215298Ch case   15:*/		regs.R3 = regs.R31;
		/* 8215298Ch case   15:*/		return 0x82152990;
	}
	return 0x82152990;
} // Block from 82152950h-82152990h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82152990h
// Function '?Destruct@CompilerHeap@D3DXShader@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152990);
		  /* 82152990h */ case    0:  		/* bl 618888 */
		/* 82152990h case    0:*/		regs.LR = 0x82152994; return 0x821E9B18;
		/* 82152990h case    0:*/		return 0x82152994;
	}
	return 0x82152994;
} // Block from 82152990h-82152994h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82152994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152994);
		  /* 82152994h */ case    0:  		/* addi R3, R31, 972 */
		/* 82152994h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x3CC);
		/* 82152994h case    0:*/		return 0x82152998;
		  /* 82152998h */ case    1:  		/* bl -2408 */
		/* 82152998h case    1:*/		regs.LR = 0x8215299C; return 0x82152030;
		/* 82152998h case    1:*/		return 0x8215299C;
		  /* 8215299Ch */ case    2:  		/* mr R8, R30 */
		/* 8215299Ch case    2:*/		regs.R8 = regs.R30;
		/* 8215299Ch case    2:*/		return 0x821529A0;
		  /* 821529A0h */ case    3:  		/* mr R5, R27 */
		/* 821529A0h case    3:*/		regs.R5 = regs.R27;
		/* 821529A0h case    3:*/		return 0x821529A4;
		  /* 821529A4h */ case    4:  		/* lwz R7, <#[R1 + 348]> */
		/* 821529A4h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x0000015C) );
		/* 821529A4h case    4:*/		return 0x821529A8;
		  /* 821529A8h */ case    5:  		/* mr R4, R28 */
		/* 821529A8h case    5:*/		regs.R4 = regs.R28;
		/* 821529A8h case    5:*/		return 0x821529AC;
		  /* 821529ACh */ case    6:  		/* lwz R6, <#[R1 + 340]> */
		/* 821529ACh case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000154) );
		/* 821529ACh case    6:*/		return 0x821529B0;
		  /* 821529B0h */ case    7:  		/* mr R3, R31 */
		/* 821529B0h case    7:*/		regs.R3 = regs.R31;
		/* 821529B0h case    7:*/		return 0x821529B4;
		  /* 821529B4h */ case    8:  		/* bl -1980 */
		/* 821529B4h case    8:*/		regs.LR = 0x821529B8; return 0x821521F8;
		/* 821529B4h case    8:*/		return 0x821529B8;
		  /* 821529B8h */ case    9:  		/* addi R1, R1, 256 */
		/* 821529B8h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 821529B8h case    9:*/		return 0x821529BC;
		  /* 821529BCh */ case   10:  		/* b -792360 */
		/* 821529BCh case   10:*/		return 0x82091294;
		/* 821529BCh case   10:*/		return 0x821529C0;
	}
	return 0x821529C0;
} // Block from 82152994h-821529C0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821529C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821529C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821529C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821529C0);
		  /* 821529C0h */ case    0:  		/* mfspr R12, LR */
		/* 821529C0h case    0:*/		regs.R12 = regs.LR;
		/* 821529C0h case    0:*/		return 0x821529C4;
		  /* 821529C4h */ case    1:  		/* bl -792428 */
		/* 821529C4h case    1:*/		regs.LR = 0x821529C8; return 0x82091258;
		/* 821529C4h case    1:*/		return 0x821529C8;
		  /* 821529C8h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 821529C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 821529C8h case    2:*/		return 0x821529CC;
		  /* 821529CCh */ case    3:  		/* lwz R11, <#[R3 + 40]> */
		/* 821529CCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000028) );
		/* 821529CCh case    3:*/		return 0x821529D0;
		  /* 821529D0h */ case    4:  		/* mr R31, R3 */
		/* 821529D0h case    4:*/		regs.R31 = regs.R3;
		/* 821529D0h case    4:*/		return 0x821529D4;
		  /* 821529D4h */ case    5:  		/* stw R6, <#[R3 + 52]> */
		/* 821529D4h case    5:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000034) );
		/* 821529D4h case    5:*/		return 0x821529D8;
		  /* 821529D8h */ case    6:  		/* mr R29, R6 */
		/* 821529D8h case    6:*/		regs.R29 = regs.R6;
		/* 821529D8h case    6:*/		return 0x821529DC;
		  /* 821529DCh */ case    7:  		/* oris R11, R11, 1 */
		/* 821529DCh case    7:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821529DCh case    7:*/		return 0x821529E0;
		  /* 821529E0h */ case    8:  		/* mr R28, R7 */
		/* 821529E0h case    8:*/		regs.R28 = regs.R7;
		/* 821529E0h case    8:*/		return 0x821529E4;
		  /* 821529E4h */ case    9:  		/* stw R11, <#[R3 + 40]> */
		/* 821529E4h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000028) );
		/* 821529E4h case    9:*/		return 0x821529E8;
		  /* 821529E8h */ case   10:  		/* mr R30, R8 */
		/* 821529E8h case   10:*/		regs.R30 = regs.R8;
		/* 821529E8h case   10:*/		return 0x821529EC;
		  /* 821529ECh */ case   11:  		/* bl 747772 */
		/* 821529ECh case   11:*/		regs.LR = 0x821529F0; return 0x822092E8;
		/* 821529ECh case   11:*/		return 0x821529F0;
	}
	return 0x821529F0;
} // Block from 821529C0h-821529F0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821529F0h
// Function '?FreeEverything@CompilerHeap@D3DXShader@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821529F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821529F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821529F0);
		  /* 821529F0h */ case    0:  		/* mr R3, R31 */
		/* 821529F0h case    0:*/		regs.R3 = regs.R31;
		/* 821529F0h case    0:*/		return 0x821529F4;
		  /* 821529F4h */ case    1:  		/* bl 625748 */
		/* 821529F4h case    1:*/		regs.LR = 0x821529F8; return 0x821EB648;
		/* 821529F4h case    1:*/		return 0x821529F8;
		  /* 821529F8h */ case    2:  		/* lwz R11, <#[R31 + 4]> */
		/* 821529F8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821529F8h case    2:*/		return 0x821529FC;
		  /* 821529FCh */ case    3:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821529FCh case    3:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821529FCh case    3:*/		return 0x82152A00;
		  /* 82152A00h */ case    4:  		/* addic R10, R10, -1 */
		/* 82152A00h case    4:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82152A00h case    4:*/		return 0x82152A04;
		  /* 82152A04h */ case    5:  		/* subfe R10, R10, R10 */
		/* 82152A04h case    5:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 82152A04h case    5:*/		return 0x82152A08;
		  /* 82152A08h */ case    6:  		/* and R11, R10, R11 */
		/* 82152A08h case    6:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82152A08h case    6:*/		return 0x82152A0C;
		  /* 82152A0Ch */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82152A0Ch case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82152A0Ch case    7:*/		return 0x82152A10;
		  /* 82152A10h */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 82152A10h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82152A10h case    8:*/		return 0x82152A14;
		  /* 82152A14h */ case    9:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82152A14h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82152A14h case    9:*/		return 0x82152A18;
		  /* 82152A18h */ case   10:  		/* bc 4, CR0_EQ, 20 */
		/* 82152A18h case   10:*/		if ( !regs.CR[0].eq ) { return 0x82152A2C;  }
		/* 82152A18h case   10:*/		return 0x82152A1C;
		  /* 82152A1Ch */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 82152A1Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82152A1Ch case   11:*/		return 0x82152A20;
		  /* 82152A20h */ case   12:  		/* bc 12, CR6_EQ, 12 */
		/* 82152A20h case   12:*/		if ( regs.CR[6].eq ) { return 0x82152A2C;  }
		/* 82152A20h case   12:*/		return 0x82152A24;
		  /* 82152A24h */ case   13:  		/* mr R3, R31 */
		/* 82152A24h case   13:*/		regs.R3 = regs.R31;
		/* 82152A24h case   13:*/		return 0x82152A28;
		  /* 82152A28h */ case   14:  		/* bl 618736 */
		/* 82152A28h case   14:*/		regs.LR = 0x82152A2C; return 0x821E9B18;
		/* 82152A28h case   14:*/		return 0x82152A2C;
	}
	return 0x82152A2C;
} // Block from 821529F0h-82152A2Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 82152A2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152A2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152A2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152A2C);
		  /* 82152A2Ch */ case    0:  		/* addi R3, R31, 972 */
		/* 82152A2Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x3CC);
		/* 82152A2Ch case    0:*/		return 0x82152A30;
		  /* 82152A30h */ case    1:  		/* bl -2560 */
		/* 82152A30h case    1:*/		regs.LR = 0x82152A34; return 0x82152030;
		/* 82152A30h case    1:*/		return 0x82152A34;
		  /* 82152A34h */ case    2:  		/* li R10, 8 */
		/* 82152A34h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x8);
		/* 82152A34h case    2:*/		return 0x82152A38;
		  /* 82152A38h */ case    3:  		/* addi R11, R1, 72 */
		/* 82152A38h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x48);
		/* 82152A38h case    3:*/		return 0x82152A3C;
		  /* 82152A3Ch */ case    4:  		/* li R9, 0 */
		/* 82152A3Ch case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82152A3Ch case    4:*/		return 0x82152A40;
		  /* 82152A40h */ case    5:  		/* mtspr CTR, R10 */
		/* 82152A40h case    5:*/		regs.CTR = regs.R10;
		/* 82152A40h case    5:*/		return 0x82152A44;
		  /* 82152A44h */ case    6:  		/* stdu R9, <#[R11 + 8]> */
		/* 82152A44h case    6:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		regs.R11 = (uint32)(regs.R11 + 0x00000008);
		/* 82152A44h case    6:*/		return 0x82152A48;
		  /* 82152A48h */ case    7:  		/* bc 16, CR0_LT, -4 */
		/* 82152A48h case    7:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82152A44;  }
		/* 82152A48h case    7:*/		return 0x82152A4C;
		  /* 82152A4Ch */ case    8:  		/* stw R9, <#[R11 + 8]> */
		/* 82152A4Ch case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 82152A4Ch case    8:*/		return 0x82152A50;
		  /* 82152A50h */ case    9:  		/* cmplwi CR6, R30, 0 */
		/* 82152A50h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82152A50h case    9:*/		return 0x82152A54;
		  /* 82152A54h */ case   10:  		/* bc 12, CR6_EQ, 36 */
		/* 82152A54h case   10:*/		if ( regs.CR[6].eq ) { return 0x82152A78;  }
		/* 82152A54h case   10:*/		return 0x82152A58;
		  /* 82152A58h */ case   11:  		/* lwz R11, <#[R30]> */
		/* 82152A58h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82152A58h case   11:*/		return 0x82152A5C;
		  /* 82152A5Ch */ case   12:  		/* lwz R10, <#[R30 + 4]> */
		/* 82152A5Ch case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82152A5Ch case   12:*/		return 0x82152A60;
		  /* 82152A60h */ case   13:  		/* lwz R9, <#[R30 + 8]> */
		/* 82152A60h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 82152A60h case   13:*/		return 0x82152A64;
		  /* 82152A64h */ case   14:  		/* lwz R8, <#[R30 + 20]> */
		/* 82152A64h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000014) );
		/* 82152A64h case   14:*/		return 0x82152A68;
	}
	return 0x82152A68;
} // Block from 82152A2Ch-82152A68h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82152A68h
// Function '?GetPhysicalMemory@CompilerHeap@D3DXShader@@AAAPAUPhysicalMemoryChunk@12@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152A68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152A68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152A68);
		  /* 82152A68h */ case    0:  		/* stw R11, <#[R1 + 80]> */
		/* 82152A68h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82152A68h case    0:*/		return 0x82152A6C;
		  /* 82152A6Ch */ case    1:  		/* stw R10, <#[R1 + 84]> */
		/* 82152A6Ch case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 82152A6Ch case    1:*/		return 0x82152A70;
		  /* 82152A70h */ case    2:  		/* stw R9, <#[R1 + 88]> */
		/* 82152A70h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 82152A70h case    2:*/		return 0x82152A74;
		  /* 82152A74h */ case    3:  		/* stw R8, <#[R1 + 100]> */
		/* 82152A74h case    3:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000064) );
		/* 82152A74h case    3:*/		return 0x82152A78;
	}
	return 0x82152A78;
} // Block from 82152A68h-82152A78h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82152A78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152A78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152A78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152A78);
		  /* 82152A78h */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 82152A78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82152A78h case    0:*/		return 0x82152A7C;
		  /* 82152A7Ch */ case    1:  		/* lis R4, -1 */
		/* 82152A7Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFFFFF);
		/* 82152A7Ch case    1:*/		return 0x82152A80;
		  /* 82152A80h */ case    2:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 82152A80h case    2:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 82152A80h case    2:*/		return 0x82152A84;
		  /* 82152A84h */ case    3:  		/* cmplw CR6, R11, R4 */
		/* 82152A84h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 82152A84h case    3:*/		return 0x82152A88;
		  /* 82152A88h */ case    4:  		/* bc 12, CR6_EQ, 8 */
		/* 82152A88h case    4:*/		if ( regs.CR[6].eq ) { return 0x82152A90;  }
		/* 82152A88h case    4:*/		return 0x82152A8C;
		  /* 82152A8Ch */ case    5:  		/* lis R4, -2 */
		/* 82152A8Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R4,0xFFFFFFFE);
		/* 82152A8Ch case    5:*/		return 0x82152A90;
	}
	return 0x82152A90;
} // Block from 82152A78h-82152A90h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82152A90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152A90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152A90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152A90);
		  /* 82152A90h */ case    0:  		/* addi R8, R1, 80 */
		/* 82152A90h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 82152A90h case    0:*/		return 0x82152A94;
		  /* 82152A94h */ case    1:  		/* li R7, 0 */
		/* 82152A94h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82152A94h case    1:*/		return 0x82152A98;
		  /* 82152A98h */ case    2:  		/* mr R6, R28 */
		/* 82152A98h case    2:*/		regs.R6 = regs.R28;
		/* 82152A98h case    2:*/		return 0x82152A9C;
		  /* 82152A9Ch */ case    3:  		/* mr R5, R29 */
		/* 82152A9Ch case    3:*/		regs.R5 = regs.R29;
		/* 82152A9Ch case    3:*/		return 0x82152AA0;
		  /* 82152AA0h */ case    4:  		/* mr R3, R31 */
		/* 82152AA0h case    4:*/		regs.R3 = regs.R31;
		/* 82152AA0h case    4:*/		return 0x82152AA4;
		  /* 82152AA4h */ case    5:  		/* bl -2220 */
		/* 82152AA4h case    5:*/		regs.LR = 0x82152AA8; return 0x821521F8;
		/* 82152AA4h case    5:*/		return 0x82152AA8;
		  /* 82152AA8h */ case    6:  		/* cmplwi CR6, R30, 0 */
		/* 82152AA8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82152AA8h case    6:*/		return 0x82152AAC;
		  /* 82152AACh */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 82152AACh case    7:*/		if ( regs.CR[6].eq ) { return 0x82152AB8;  }
		/* 82152AACh case    7:*/		return 0x82152AB0;
		  /* 82152AB0h */ case    8:  		/* lwz R11, <#[R1 + 92]> */
		/* 82152AB0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 82152AB0h case    8:*/		return 0x82152AB4;
		  /* 82152AB4h */ case    9:  		/* stw R11, <#[R30 + 12]> */
		/* 82152AB4h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82152AB4h case    9:*/		return 0x82152AB8;
	}
	return 0x82152AB8;
} // Block from 82152A90h-82152AB8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82152AB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152AB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152AB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152AB8);
		  /* 82152AB8h */ case    0:  		/* addi R1, R1, 192 */
		/* 82152AB8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82152AB8h case    0:*/		return 0x82152ABC;
		  /* 82152ABCh */ case    1:  		/* b -792596 */
		/* 82152ABCh case    1:*/		return 0x820912A8;
		/* 82152ABCh case    1:*/		return 0x82152AC0;
		  /* 82152AC0h */ case    2:  		/* lwz R17, <#[R6 - 11576]> */
		/* 82152AC0h case    2:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R6 + 0xFFFFD2C8) );
		/* 82152AC0h case    2:*/		return 0x82152AC4;
		  /* 82152AC4h */ case    3:  		/* lwz R16, <#[R4 - 14936]> */
		/* 82152AC4h case    3:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R4 + 0xFFFFC5A8) );
		/* 82152AC4h case    3:*/		return 0x82152AC8;
	}
	return 0x82152AC8;
} // Block from 82152AB8h-82152AC8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82152AC8h
// Function '?Destruct@Compiler@D3DXShader@@QAAXJ@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152AC8);
		  /* 82152AC8h */ case    0:  		/* mfspr R12, LR */
		/* 82152AC8h case    0:*/		regs.R12 = regs.LR;
		/* 82152AC8h case    0:*/		return 0x82152ACC;
		  /* 82152ACCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82152ACCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82152ACCh case    1:*/		return 0x82152AD0;
		  /* 82152AD0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82152AD0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82152AD0h case    2:*/		return 0x82152AD4;
		  /* 82152AD4h */ case    3:  		/* addi R31, R1, -160 */
		/* 82152AD4h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0xFFFFFF60);
		/* 82152AD4h case    3:*/		return 0x82152AD8;
		  /* 82152AD8h */ case    4:  		/* stwu R1, <#[R1 - 160]> */
		/* 82152AD8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82152AD8h case    4:*/		return 0x82152ADC;
		  /* 82152ADCh */ case    5:  		/* stw R3, <#[R31 + 180]> */
		/* 82152ADCh case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000000B4) );
		/* 82152ADCh case    5:*/		return 0x82152AE0;
		  /* 82152AE0h */ case    6:  		/* stw R4, <#[R31 + 188]> */
		/* 82152AE0h case    6:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R31 + 0x000000BC) );
		/* 82152AE0h case    6:*/		return 0x82152AE4;
		  /* 82152AE4h */ case    7:  		/* stw R5, <#[R31 + 196]> */
		/* 82152AE4h case    7:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R31 + 0x000000C4) );
		/* 82152AE4h case    7:*/		return 0x82152AE8;
		  /* 82152AE8h */ case    8:  		/* stw R6, <#[R31 + 204]> */
		/* 82152AE8h case    8:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R31 + 0x000000CC) );
		/* 82152AE8h case    8:*/		return 0x82152AEC;
		  /* 82152AECh */ case    9:  		/* stw R7, <#[R31 + 212]> */
		/* 82152AECh case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x000000D4) );
		/* 82152AECh case    9:*/		return 0x82152AF0;
		  /* 82152AF0h */ case   10:  		/* stw R8, <#[R31 + 220]> */
		/* 82152AF0h case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x000000DC) );
		/* 82152AF0h case   10:*/		return 0x82152AF4;
		  /* 82152AF4h */ case   11:  		/* stw R9, <#[R31 + 228]> */
		/* 82152AF4h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x000000E4) );
		/* 82152AF4h case   11:*/		return 0x82152AF8;
		  /* 82152AF8h */ case   12:  		/* stw R10, <#[R31 + 236]> */
		/* 82152AF8h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x000000EC) );
		/* 82152AF8h case   12:*/		return 0x82152AFC;
		  /* 82152AFCh */ case   13:  		/* li R11, 0 */
		/* 82152AFCh case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82152AFCh case   13:*/		return 0x82152B00;
		  /* 82152B00h */ case   14:  		/* stw R11, <#[R31 + 112]> */
		/* 82152B00h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 82152B00h case   14:*/		return 0x82152B04;
		  /* 82152B04h */ case   15:  		/* addi R4, R31, 120 */
		/* 82152B04h case   15:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x78);
		/* 82152B04h case   15:*/		return 0x82152B08;
		  /* 82152B08h */ case   16:  		/* lwz R3, <#[R31 + 188]> */
		/* 82152B08h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000BC) );
		/* 82152B08h case   16:*/		return 0x82152B0C;
		  /* 82152B0Ch */ case   17:  		/* bl -4660 */
		/* 82152B0Ch case   17:*/		regs.LR = 0x82152B10; return 0x821518D8;
		/* 82152B0Ch case   17:*/		return 0x82152B10;
		  /* 82152B10h */ case   18:  		/* nop */
		/* 82152B10h case   18:*/		cpu::op::nop();
		/* 82152B10h case   18:*/		return 0x82152B14;
		  /* 82152B14h */ case   19:  		/* nop */
		/* 82152B14h case   19:*/		cpu::op::nop();
		/* 82152B14h case   19:*/		return 0x82152B18;
	}
	return 0x82152B18;
} // Block from 82152AC8h-82152B18h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82152B18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152B18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152B18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152B18);
		  /* 82152B18h */ case    0:  		/* lwz R5, <#[R31 + 260]> */
		/* 82152B18h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000104) );
		/* 82152B18h case    0:*/		return 0x82152B1C;
		  /* 82152B1Ch */ case    1:  		/* lwz R4, <#[R31 + 252]> */
		/* 82152B1Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x000000FC) );
		/* 82152B1Ch case    1:*/		return 0x82152B20;
		  /* 82152B20h */ case    2:  		/* addi R3, R31, 120 */
		/* 82152B20h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x78);
		/* 82152B20h case    2:*/		return 0x82152B24;
		  /* 82152B24h */ case    3:  		/* bl -4620 */
		/* 82152B24h case    3:*/		regs.LR = 0x82152B28; return 0x82151918;
		/* 82152B24h case    3:*/		return 0x82152B28;
		  /* 82152B28h */ case    4:  		/* stw R3, <#[R31 + 112]> */
		/* 82152B28h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000070) );
		/* 82152B28h case    4:*/		return 0x82152B2C;
		  /* 82152B2Ch */ case    5:  		/* lwz R11, <#[R31 + 112]> */
		/* 82152B2Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 82152B2Ch case    5:*/		return 0x82152B30;
		  /* 82152B30h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 82152B30h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82152B30h case    6:*/		return 0x82152B34;
		  /* 82152B34h */ case    7:  		/* bc 4, CR6_EQ, 144 */
		/* 82152B34h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82152BC4;  }
		/* 82152B34h case    7:*/		return 0x82152B38;
		  /* 82152B38h */ case    8:  		/* lwz R11, <#[R31 + 124]> */
		/* 82152B38h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000007C) );
		/* 82152B38h case    8:*/		return 0x82152B3C;
		  /* 82152B3Ch */ case    9:  		/* addi R3, R11, 1136 */
		/* 82152B3Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x470);
		/* 82152B3Ch case    9:*/		return 0x82152B40;
		  /* 82152B40h */ case   10:  		/* bl 1140368 */
		/* 82152B40h case   10:*/		regs.LR = 0x82152B44; return 0x822691D0;
		/* 82152B40h case   10:*/		return 0x82152B44;
		  /* 82152B44h */ case   11:  		/* stw R3, <#[R31 + 136]> */
		/* 82152B44h case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000088) );
		/* 82152B44h case   11:*/		return 0x82152B48;
		  /* 82152B48h */ case   12:  		/* lwz R11, <#[R31 + 136]> */
		/* 82152B48h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000088) );
		/* 82152B48h case   12:*/		return 0x82152B4C;
		  /* 82152B4Ch */ case   13:  		/* stw R11, <#[R31 + 132]> */
		/* 82152B4Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000084) );
		/* 82152B4Ch case   13:*/		return 0x82152B50;
		  /* 82152B50h */ case   14:  		/* lwz R11, <#[R31 + 132]> */
		/* 82152B50h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000084) );
		/* 82152B50h case   14:*/		return 0x82152B54;
		  /* 82152B54h */ case   15:  		/* cmpwi CR6, R11, 0 */
		/* 82152B54h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82152B54h case   15:*/		return 0x82152B58;
		  /* 82152B58h */ case   16:  		/* bc 12, CR6_EQ, 20 */
		/* 82152B58h case   16:*/		if ( regs.CR[6].eq ) { return 0x82152B6C;  }
		/* 82152B58h case   16:*/		return 0x82152B5C;
		  /* 82152B5Ch */ case   17:  		/* addi R3, R31, 120 */
		/* 82152B5Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x78);
		/* 82152B5Ch case   17:*/		return 0x82152B60;
		  /* 82152B60h */ case   18:  		/* bl -1496 */
		/* 82152B60h case   18:*/		regs.LR = 0x82152B64; return 0x82152588;
		/* 82152B60h case   18:*/		return 0x82152B64;
		  /* 82152B64h */ case   19:  		/* stw R3, <#[R31 + 112]> */
		/* 82152B64h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000070) );
		/* 82152B64h case   19:*/		return 0x82152B68;
		  /* 82152B68h */ case   20:  		/* b 92 */
		/* 82152B68h case   20:*/		return 0x82152BC4;
		/* 82152B68h case   20:*/		return 0x82152B6C;
	}
	return 0x82152B6C;
} // Block from 82152B18h-82152B6Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 82152B6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152B6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152B6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152B6C);
		  /* 82152B6Ch */ case    0:  		/* li R11, 1 */
		/* 82152B6Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82152B6Ch case    0:*/		return 0x82152B70;
		  /* 82152B70h */ case    1:  		/* stb R11, <#[R31 + 128]> */
		/* 82152B70h case    1:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00000080) );
		/* 82152B70h case    1:*/		return 0x82152B74;
		  /* 82152B74h */ case    2:  		/* lwz R5, <#[R31 + 260]> */
		/* 82152B74h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000104) );
		/* 82152B74h case    2:*/		return 0x82152B78;
		  /* 82152B78h */ case    3:  		/* lwz R4, <#[R31 + 252]> */
		/* 82152B78h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x000000FC) );
		/* 82152B78h case    3:*/		return 0x82152B7C;
		  /* 82152B7Ch */ case    4:  		/* lwz R3, <#[R31 + 124]> */
		/* 82152B7Ch case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000007C) );
		/* 82152B7Ch case    4:*/		return 0x82152B80;
		  /* 82152B80h */ case    5:  		/* bl -1160 */
		/* 82152B80h case    5:*/		regs.LR = 0x82152B84; return 0x821526F8;
		/* 82152B80h case    5:*/		return 0x82152B84;
		  /* 82152B84h */ case    6:  		/* lwz R11, <#[R31 + 268]> */
		/* 82152B84h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000010C) );
		/* 82152B84h case    6:*/		return 0x82152B88;
		  /* 82152B88h */ case    7:  		/* stw R11, <#[R1 + 100]> */
		/* 82152B88h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 82152B88h case    7:*/		return 0x82152B8C;
		  /* 82152B8Ch */ case    8:  		/* lwz R11, <#[R31 + 244]> */
		/* 82152B8Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000F4) );
		/* 82152B8Ch case    8:*/		return 0x82152B90;
		  /* 82152B90h */ case    9:  		/* stw R11, <#[R1 + 92]> */
		/* 82152B90h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 82152B90h case    9:*/		return 0x82152B94;
		  /* 82152B94h */ case   10:  		/* lwz R11, <#[R31 + 236]> */
		/* 82152B94h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000EC) );
		/* 82152B94h case   10:*/		return 0x82152B98;
		  /* 82152B98h */ case   11:  		/* stw R11, <#[R1 + 84]> */
		/* 82152B98h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82152B98h case   11:*/		return 0x82152B9C;
		  /* 82152B9Ch */ case   12:  		/* lwz R10, <#[R31 + 228]> */
		/* 82152B9Ch case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x000000E4) );
		/* 82152B9Ch case   12:*/		return 0x82152BA0;
		  /* 82152BA0h */ case   13:  		/* lwz R9, <#[R31 + 220]> */
		/* 82152BA0h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x000000DC) );
		/* 82152BA0h case   13:*/		return 0x82152BA4;
		  /* 82152BA4h */ case   14:  		/* lwz R8, <#[R31 + 212]> */
		/* 82152BA4h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x000000D4) );
		/* 82152BA4h case   14:*/		return 0x82152BA8;
		  /* 82152BA8h */ case   15:  		/* lwz R7, <#[R31 + 204]> */
		/* 82152BA8h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x000000CC) );
		/* 82152BA8h case   15:*/		return 0x82152BAC;
		  /* 82152BACh */ case   16:  		/* lwz R6, <#[R31 + 196]> */
		/* 82152BACh case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x000000C4) );
		/* 82152BACh case   16:*/		return 0x82152BB0;
		  /* 82152BB0h */ case   17:  		/* lwz R5, <#[R31 + 120]> */
		/* 82152BB0h case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000078) );
		/* 82152BB0h case   17:*/		return 0x82152BB4;
		  /* 82152BB4h */ case   18:  		/* lwz R4, <#[R31 + 180]> */
		/* 82152BB4h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x000000B4) );
		/* 82152BB4h case   18:*/		return 0x82152BB8;
	}
	return 0x82152BB8;
} // Block from 82152B6Ch-82152BB8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82152BB8h
// Function '?CompileCommon@Compiler@D3DXShader@@QAAXKKPAPAUID3DXBuffer@@PAPAUID3DXConstantTable@@PAU_D3DXSHADER_COMPILE_PARAMETERSA@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152BB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152BB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152BB8);
		  /* 82152BB8h */ case    0:  		/* lwz R3, <#[R31 + 124]> */
		/* 82152BB8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000007C) );
		/* 82152BB8h case    0:*/		return 0x82152BBC;
		  /* 82152BBCh */ case    1:  		/* bl -996 */
		/* 82152BBCh case    1:*/		regs.LR = 0x82152BC0; return 0x821527D8;
		/* 82152BBCh case    1:*/		return 0x82152BC0;
		  /* 82152BC0h */ case    2:  		/* b 16 */
		/* 82152BC0h case    2:*/		return 0x82152BD0;
		/* 82152BC0h case    2:*/		return 0x82152BC4;
	}
	return 0x82152BC4;
} // Block from 82152BB8h-82152BC4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82152BC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152BC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152BC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152BC4);
		  /* 82152BC4h */ case    0:  		/* lwz R11, <#[R31 + 112]> */
		/* 82152BC4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 82152BC4h case    0:*/		return 0x82152BC8;
		  /* 82152BC8h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 82152BC8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82152BC8h case    1:*/		return 0x82152BCC;
		  /* 82152BCCh */ case    2:  		/* bc 12, CR6_EQ, -180 */
		/* 82152BCCh case    2:*/		if ( regs.CR[6].eq ) { return 0x82152B18;  }
		/* 82152BCCh case    2:*/		return 0x82152BD0;
	}
	return 0x82152BD0;
} // Block from 82152BC4h-82152BD0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82152BD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152BD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152BD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152BD0);
		  /* 82152BD0h */ case    0:  		/* nop */
		/* 82152BD0h case    0:*/		cpu::op::nop();
		/* 82152BD0h case    0:*/		return 0x82152BD4;
		  /* 82152BD4h */ case    1:  		/* nop */
		/* 82152BD4h case    1:*/		cpu::op::nop();
		/* 82152BD4h case    1:*/		return 0x82152BD8;
		  /* 82152BD8h */ case    2:  		/* nop */
		/* 82152BD8h case    2:*/		cpu::op::nop();
		/* 82152BD8h case    2:*/		return 0x82152BDC;
		  /* 82152BDCh */ case    3:  		/* b 20 */
		/* 82152BDCh case    3:*/		return 0x82152BF0;
		/* 82152BDCh case    3:*/		return 0x82152BE0;
	}
	return 0x82152BE0;
} // Block from 82152BD0h-82152BE0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82152BE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152BE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152BE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152BE0);
		  /* 82152BE0h */ case    0:  		/* lwz R4, <#[R31 + 244]> */
		/* 82152BE0h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x000000F4) );
		/* 82152BE0h case    0:*/		return 0x82152BE4;
		  /* 82152BE4h */ case    1:  		/* lwz R3, <#[R31 + 236]> */
		/* 82152BE4h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000EC) );
		/* 82152BE4h case    1:*/		return 0x82152BE8;
		  /* 82152BE8h */ case    2:  		/* bl -4680 */
		/* 82152BE8h case    2:*/		regs.LR = 0x82152BEC; return 0x821519A0;
		/* 82152BE8h case    2:*/		return 0x82152BEC;
		  /* 82152BECh */ case    3:  		/* stw R3, <#[R31 + 112]> */
		/* 82152BECh case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000070) );
		/* 82152BECh case    3:*/		return 0x82152BF0;
	}
	return 0x82152BF0;
} // Block from 82152BE0h-82152BF0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82152BF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152BF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152BF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152BF0);
		  /* 82152BF0h */ case    0:  		/* lwz R4, <#[R31 + 112]> */
		/* 82152BF0h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000070) );
		/* 82152BF0h case    0:*/		return 0x82152BF4;
		  /* 82152BF4h */ case    1:  		/* addi R3, R31, 120 */
		/* 82152BF4h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x78);
		/* 82152BF4h case    1:*/		return 0x82152BF8;
		  /* 82152BF8h */ case    2:  		/* bl -1424 */
		/* 82152BF8h case    2:*/		regs.LR = 0x82152BFC; return 0x82152668;
		/* 82152BF8h case    2:*/		return 0x82152BFC;
		  /* 82152BFCh */ case    3:  		/* addi R1, R31, 160 */
		/* 82152BFCh case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R31,0xA0);
		/* 82152BFCh case    3:*/		return 0x82152C00;
		  /* 82152C00h */ case    4:  		/* lwz R12, <#[R1 - 8]> */
		/* 82152C00h case    4:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82152C00h case    4:*/		return 0x82152C04;
		  /* 82152C04h */ case    5:  		/* mtspr LR, R12 */
		/* 82152C04h case    5:*/		regs.LR = regs.R12;
		/* 82152C04h case    5:*/		return 0x82152C08;
		  /* 82152C08h */ case    6:  		/* ld R31, <#[R1 - 16]> */
		/* 82152C08h case    6:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82152C08h case    6:*/		return 0x82152C0C;
		  /* 82152C0Ch */ case    7:  		/* bclr 20, CR0_LT */
		/* 82152C0Ch case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82152C0Ch case    7:*/		return 0x82152C10;
	}
	return 0x82152C10;
} // Block from 82152BF0h-82152C10h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82152C10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152C10);
		  /* 82152C10h */ case    0:  		/* li R3, 1 */
		/* 82152C10h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82152C10h case    0:*/		return 0x82152C14;
		  /* 82152C14h */ case    1:  		/* nop */
		/* 82152C14h case    1:*/		cpu::op::nop();
		/* 82152C14h case    1:*/		return 0x82152C18;
		  /* 82152C18h */ case    2:  		/* bclr 20, CR0_LT */
		/* 82152C18h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82152C18h case    2:*/		return 0x82152C1C;
	}
	return 0x82152C1C;
} // Block from 82152C10h-82152C1Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82152C1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152C1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152C1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152C1C);
		  /* 82152C1Ch */ case    0:  		/* nop */
		/* 82152C1Ch case    0:*/		cpu::op::nop();
		/* 82152C1Ch case    0:*/		return 0x82152C20;
		  /* 82152C20h */ case    1:  		/* lwz R17, <#[R6 - 11576]> */
		/* 82152C20h case    1:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R6 + 0xFFFFD2C8) );
		/* 82152C20h case    1:*/		return 0x82152C24;
		  /* 82152C24h */ case    2:  		/* lwz R16, <#[R4 - 14912]> */
		/* 82152C24h case    2:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R4 + 0xFFFFC5C0) );
		/* 82152C24h case    2:*/		return 0x82152C28;
	}
	return 0x82152C28;
} // Block from 82152C1Ch-82152C28h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82152C28h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152C28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152C28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152C28);
		  /* 82152C28h */ case    0:  		/* mfspr R12, LR */
		/* 82152C28h case    0:*/		regs.R12 = regs.LR;
		/* 82152C28h case    0:*/		return 0x82152C2C;
		  /* 82152C2Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82152C2Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82152C2Ch case    1:*/		return 0x82152C30;
		  /* 82152C30h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82152C30h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82152C30h case    2:*/		return 0x82152C34;
		  /* 82152C34h */ case    3:  		/* addi R31, R1, -144 */
		/* 82152C34h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R1,0xFFFFFF70);
		/* 82152C34h case    3:*/		return 0x82152C38;
		  /* 82152C38h */ case    4:  		/* stwu R1, <#[R1 - 144]> */
		/* 82152C38h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82152C38h case    4:*/		return 0x82152C3C;
		  /* 82152C3Ch */ case    5:  		/* stw R3, <#[R31 + 164]> */
		/* 82152C3Ch case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x000000A4) );
		/* 82152C3Ch case    5:*/		return 0x82152C40;
		  /* 82152C40h */ case    6:  		/* stw R4, <#[R31 + 172]> */
		/* 82152C40h case    6:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R31 + 0x000000AC) );
		/* 82152C40h case    6:*/		return 0x82152C44;
		  /* 82152C44h */ case    7:  		/* stw R5, <#[R31 + 180]> */
		/* 82152C44h case    7:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R31 + 0x000000B4) );
		/* 82152C44h case    7:*/		return 0x82152C48;
		  /* 82152C48h */ case    8:  		/* stw R6, <#[R31 + 188]> */
		/* 82152C48h case    8:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R31 + 0x000000BC) );
		/* 82152C48h case    8:*/		return 0x82152C4C;
		  /* 82152C4Ch */ case    9:  		/* stw R7, <#[R31 + 196]> */
		/* 82152C4Ch case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x000000C4) );
		/* 82152C4Ch case    9:*/		return 0x82152C50;
		  /* 82152C50h */ case   10:  		/* stw R8, <#[R31 + 204]> */
		/* 82152C50h case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x000000CC) );
		/* 82152C50h case   10:*/		return 0x82152C54;
		  /* 82152C54h */ case   11:  		/* stw R9, <#[R31 + 212]> */
		/* 82152C54h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x000000D4) );
		/* 82152C54h case   11:*/		return 0x82152C58;
		  /* 82152C58h */ case   12:  		/* lwz R11, <#[R31 + 196]> */
		/* 82152C58h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000C4) );
		/* 82152C58h case   12:*/		return 0x82152C5C;
		  /* 82152C5Ch */ case   13:  		/* stw R11, <#[R31 + 80]> */
		/* 82152C5Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000050) );
		/* 82152C5Ch case   13:*/		return 0x82152C60;
		  /* 82152C60h */ case   14:  		/* lwz R11, <#[R31 + 204]> */
		/* 82152C60h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000CC) );
		/* 82152C60h case   14:*/		return 0x82152C64;
		  /* 82152C64h */ case   15:  		/* stw R11, <#[R31 + 84]> */
		/* 82152C64h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 82152C64h case   15:*/		return 0x82152C68;
		  /* 82152C68h */ case   16:  		/* lis R11, -32235 */
		/* 82152C68h case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8215);
		/* 82152C68h case   16:*/		return 0x82152C6C;
		  /* 82152C6Ch */ case   17:  		/* addi R11, R11, 6616 */
		/* 82152C6Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x19D8);
		/* 82152C6Ch case   17:*/		return 0x82152C70;
		  /* 82152C70h */ case   18:  		/* stw R11, <#[R31 + 88]> */
		/* 82152C70h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000058) );
		/* 82152C70h case   18:*/		return 0x82152C74;
		  /* 82152C74h */ case   19:  		/* addi R11, R31, 80 */
		/* 82152C74h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x50);
		/* 82152C74h case   19:*/		return 0x82152C78;
		  /* 82152C78h */ case   20:  		/* stw R11, <#[R31 + 196]> */
		/* 82152C78h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x000000C4) );
		/* 82152C78h case   20:*/		return 0x82152C7C;
		  /* 82152C7Ch */ case   21:  		/* li R11, 0 */
		/* 82152C7Ch case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82152C7Ch case   21:*/		return 0x82152C80;
		  /* 82152C80h */ case   22:  		/* stw R11, <#[R31 + 92]> */
		/* 82152C80h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 82152C80h case   22:*/		return 0x82152C84;
		  /* 82152C84h */ case   23:  		/* addi R4, R31, 96 */
		/* 82152C84h case   23:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x60);
		/* 82152C84h case   23:*/		return 0x82152C88;
		  /* 82152C88h */ case   24:  		/* lwz R3, <#[R31 + 180]> */
		/* 82152C88h case   24:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000B4) );
		/* 82152C88h case   24:*/		return 0x82152C8C;
		  /* 82152C8Ch */ case   25:  		/* bl -5044 */
		/* 82152C8Ch case   25:*/		regs.LR = 0x82152C90; return 0x821518D8;
		/* 82152C8Ch case   25:*/		return 0x82152C90;
		  /* 82152C90h */ case   26:  		/* nop */
		/* 82152C90h case   26:*/		cpu::op::nop();
		/* 82152C90h case   26:*/		return 0x82152C94;
		  /* 82152C94h */ case   27:  		/* nop */
		/* 82152C94h case   27:*/		cpu::op::nop();
		/* 82152C94h case   27:*/		return 0x82152C98;
	}
	return 0x82152C98;
} // Block from 82152C28h-82152C98h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82152C98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152C98);
		  /* 82152C98h */ case    0:  		/* lwz R5, <#[R31 + 88]> */
		/* 82152C98h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000058) );
		/* 82152C98h case    0:*/		return 0x82152C9C;
		  /* 82152C9Ch */ case    1:  		/* lwz R4, <#[R31 + 196]> */
		/* 82152C9Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x000000C4) );
		/* 82152C9Ch case    1:*/		return 0x82152CA0;
		  /* 82152CA0h */ case    2:  		/* addi R3, R31, 96 */
		/* 82152CA0h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x60);
		/* 82152CA0h case    2:*/		return 0x82152CA4;
		  /* 82152CA4h */ case    3:  		/* bl -5004 */
		/* 82152CA4h case    3:*/		regs.LR = 0x82152CA8; return 0x82151918;
		/* 82152CA4h case    3:*/		return 0x82152CA8;
		  /* 82152CA8h */ case    4:  		/* stw R3, <#[R31 + 92]> */
		/* 82152CA8h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000005C) );
		/* 82152CA8h case    4:*/		return 0x82152CAC;
		  /* 82152CACh */ case    5:  		/* lwz R11, <#[R31 + 92]> */
		/* 82152CACh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 82152CACh case    5:*/		return 0x82152CB0;
		  /* 82152CB0h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 82152CB0h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82152CB0h case    6:*/		return 0x82152CB4;
		  /* 82152CB4h */ case    7:  		/* bc 4, CR6_EQ, 112 */
		/* 82152CB4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82152D24;  }
		/* 82152CB4h case    7:*/		return 0x82152CB8;
		  /* 82152CB8h */ case    8:  		/* lwz R11, <#[R31 + 100]> */
		/* 82152CB8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000064) );
		/* 82152CB8h case    8:*/		return 0x82152CBC;
		  /* 82152CBCh */ case    9:  		/* addi R3, R11, 1136 */
		/* 82152CBCh case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0x470);
		/* 82152CBCh case    9:*/		return 0x82152CC0;
		  /* 82152CC0h */ case   10:  		/* bl 1139984 */
		/* 82152CC0h case   10:*/		regs.LR = 0x82152CC4; return 0x822691D0;
		/* 82152CC0h case   10:*/		return 0x82152CC4;
		  /* 82152CC4h */ case   11:  		/* stw R3, <#[R31 + 112]> */
		/* 82152CC4h case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000070) );
		/* 82152CC4h case   11:*/		return 0x82152CC8;
		  /* 82152CC8h */ case   12:  		/* lwz R11, <#[R31 + 112]> */
		/* 82152CC8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 82152CC8h case   12:*/		return 0x82152CCC;
		  /* 82152CCCh */ case   13:  		/* stw R11, <#[R31 + 108]> */
		/* 82152CCCh case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 82152CCCh case   13:*/		return 0x82152CD0;
		  /* 82152CD0h */ case   14:  		/* lwz R11, <#[R31 + 108]> */
		/* 82152CD0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 82152CD0h case   14:*/		return 0x82152CD4;
		  /* 82152CD4h */ case   15:  		/* cmpwi CR6, R11, 0 */
		/* 82152CD4h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82152CD4h case   15:*/		return 0x82152CD8;
		  /* 82152CD8h */ case   16:  		/* bc 12, CR6_EQ, 20 */
		/* 82152CD8h case   16:*/		if ( regs.CR[6].eq ) { return 0x82152CEC;  }
		/* 82152CD8h case   16:*/		return 0x82152CDC;
		  /* 82152CDCh */ case   17:  		/* addi R3, R31, 96 */
		/* 82152CDCh case   17:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x60);
		/* 82152CDCh case   17:*/		return 0x82152CE0;
		  /* 82152CE0h */ case   18:  		/* bl -1880 */
		/* 82152CE0h case   18:*/		regs.LR = 0x82152CE4; return 0x82152588;
		/* 82152CE0h case   18:*/		return 0x82152CE4;
		  /* 82152CE4h */ case   19:  		/* stw R3, <#[R31 + 92]> */
		/* 82152CE4h case   19:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000005C) );
		/* 82152CE4h case   19:*/		return 0x82152CE8;
		  /* 82152CE8h */ case   20:  		/* b 60 */
		/* 82152CE8h case   20:*/		return 0x82152D24;
		/* 82152CE8h case   20:*/		return 0x82152CEC;
	}
	return 0x82152CEC;
} // Block from 82152C98h-82152CECh (21 instructions)

//////////////////////////////////////////////////////
// Block at 82152CECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152CEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152CEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152CEC);
		  /* 82152CECh */ case    0:  		/* li R11, 1 */
		/* 82152CECh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82152CECh case    0:*/		return 0x82152CF0;
		  /* 82152CF0h */ case    1:  		/* stb R11, <#[R31 + 104]> */
		/* 82152CF0h case    1:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R31 + 0x00000068) );
		/* 82152CF0h case    1:*/		return 0x82152CF4;
		  /* 82152CF4h */ case    2:  		/* lwz R5, <#[R31 + 88]> */
		/* 82152CF4h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000058) );
		/* 82152CF4h case    2:*/		return 0x82152CF8;
		  /* 82152CF8h */ case    3:  		/* lwz R4, <#[R31 + 196]> */
		/* 82152CF8h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x000000C4) );
		/* 82152CF8h case    3:*/		return 0x82152CFC;
		  /* 82152CFCh */ case    4:  		/* lwz R3, <#[R31 + 100]> */
		/* 82152CFCh case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000064) );
		/* 82152CFCh case    4:*/		return 0x82152D00;
		  /* 82152D00h */ case    5:  		/* bl -1544 */
		/* 82152D00h case    5:*/		regs.LR = 0x82152D04; return 0x821526F8;
		/* 82152D00h case    5:*/		return 0x82152D04;
		  /* 82152D04h */ case    6:  		/* lwz R8, <#[R31 + 212]> */
		/* 82152D04h case    6:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x000000D4) );
		/* 82152D04h case    6:*/		return 0x82152D08;
		  /* 82152D08h */ case    7:  		/* lwz R7, <#[R31 + 188]> */
		/* 82152D08h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x000000BC) );
		/* 82152D08h case    7:*/		return 0x82152D0C;
		  /* 82152D0Ch */ case    8:  		/* lwz R6, <#[R31 + 96]> */
		/* 82152D0Ch case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000060) );
		/* 82152D0Ch case    8:*/		return 0x82152D10;
		  /* 82152D10h */ case    9:  		/* lwz R5, <#[R31 + 172]> */
		/* 82152D10h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x000000AC) );
		/* 82152D10h case    9:*/		return 0x82152D14;
		  /* 82152D14h */ case   10:  		/* lwz R4, <#[R31 + 164]> */
		/* 82152D14h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x000000A4) );
		/* 82152D14h case   10:*/		return 0x82152D18;
		  /* 82152D18h */ case   11:  		/* lwz R3, <#[R31 + 100]> */
		/* 82152D18h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000064) );
		/* 82152D18h case   11:*/		return 0x82152D1C;
		  /* 82152D1Ch */ case   12:  		/* bl -860 */
		/* 82152D1Ch case   12:*/		regs.LR = 0x82152D20; return 0x821529C0;
		/* 82152D1Ch case   12:*/		return 0x82152D20;
		  /* 82152D20h */ case   13:  		/* b 16 */
		/* 82152D20h case   13:*/		return 0x82152D30;
		/* 82152D20h case   13:*/		return 0x82152D24;
	}
	return 0x82152D24;
} // Block from 82152CECh-82152D24h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82152D24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152D24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152D24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152D24);
		  /* 82152D24h */ case    0:  		/* lwz R11, <#[R31 + 92]> */
		/* 82152D24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000005C) );
		/* 82152D24h case    0:*/		return 0x82152D28;
		  /* 82152D28h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 82152D28h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82152D28h case    1:*/		return 0x82152D2C;
		  /* 82152D2Ch */ case    2:  		/* bc 12, CR6_EQ, -148 */
		/* 82152D2Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82152C98;  }
		/* 82152D2Ch case    2:*/		return 0x82152D30;
	}
	return 0x82152D30;
} // Block from 82152D24h-82152D30h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82152D30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152D30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152D30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152D30);
		  /* 82152D30h */ case    0:  		/* nop */
		/* 82152D30h case    0:*/		cpu::op::nop();
		/* 82152D30h case    0:*/		return 0x82152D34;
		  /* 82152D34h */ case    1:  		/* nop */
		/* 82152D34h case    1:*/		cpu::op::nop();
		/* 82152D34h case    1:*/		return 0x82152D38;
		  /* 82152D38h */ case    2:  		/* nop */
		/* 82152D38h case    2:*/		cpu::op::nop();
		/* 82152D38h case    2:*/		return 0x82152D3C;
		  /* 82152D3Ch */ case    3:  		/* b 20 */
		/* 82152D3Ch case    3:*/		return 0x82152D50;
		/* 82152D3Ch case    3:*/		return 0x82152D40;
	}
	return 0x82152D40;
} // Block from 82152D30h-82152D40h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82152D40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152D40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152D40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152D40);
		  /* 82152D40h */ case    0:  		/* li R4, 0 */
		/* 82152D40h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82152D40h case    0:*/		return 0x82152D44;
		  /* 82152D44h */ case    1:  		/* lwz R3, <#[R31 + 188]> */
		/* 82152D44h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x000000BC) );
		/* 82152D44h case    1:*/		return 0x82152D48;
		  /* 82152D48h */ case    2:  		/* bl -5032 */
		/* 82152D48h case    2:*/		regs.LR = 0x82152D4C; return 0x821519A0;
		/* 82152D48h case    2:*/		return 0x82152D4C;
		  /* 82152D4Ch */ case    3:  		/* stw R3, <#[R31 + 92]> */
		/* 82152D4Ch case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000005C) );
		/* 82152D4Ch case    3:*/		return 0x82152D50;
	}
	return 0x82152D50;
} // Block from 82152D40h-82152D50h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82152D50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152D50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152D50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152D50);
		  /* 82152D50h */ case    0:  		/* lwz R4, <#[R31 + 92]> */
		/* 82152D50h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000005C) );
		/* 82152D50h case    0:*/		return 0x82152D54;
		  /* 82152D54h */ case    1:  		/* addi R3, R31, 96 */
		/* 82152D54h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x60);
		/* 82152D54h case    1:*/		return 0x82152D58;
		  /* 82152D58h */ case    2:  		/* bl -1776 */
		/* 82152D58h case    2:*/		regs.LR = 0x82152D5C; return 0x82152668;
		/* 82152D58h case    2:*/		return 0x82152D5C;
		  /* 82152D5Ch */ case    3:  		/* addi R1, R31, 144 */
		/* 82152D5Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R31,0x90);
		/* 82152D5Ch case    3:*/		return 0x82152D60;
		  /* 82152D60h */ case    4:  		/* lwz R12, <#[R1 - 8]> */
		/* 82152D60h case    4:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82152D60h case    4:*/		return 0x82152D64;
		  /* 82152D64h */ case    5:  		/* mtspr LR, R12 */
		/* 82152D64h case    5:*/		regs.LR = regs.R12;
		/* 82152D64h case    5:*/		return 0x82152D68;
		  /* 82152D68h */ case    6:  		/* ld R31, <#[R1 - 16]> */
		/* 82152D68h case    6:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82152D68h case    6:*/		return 0x82152D6C;
		  /* 82152D6Ch */ case    7:  		/* bclr 20, CR0_LT */
		/* 82152D6Ch case    7:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82152D6Ch case    7:*/		return 0x82152D70;
	}
	return 0x82152D70;
} // Block from 82152D50h-82152D70h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82152D70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152D70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152D70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152D70);
		  /* 82152D70h */ case    0:  		/* li R3, 1 */
		/* 82152D70h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82152D70h case    0:*/		return 0x82152D74;
		  /* 82152D74h */ case    1:  		/* nop */
		/* 82152D74h case    1:*/		cpu::op::nop();
		/* 82152D74h case    1:*/		return 0x82152D78;
		  /* 82152D78h */ case    2:  		/* bclr 20, CR0_LT */
		/* 82152D78h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82152D78h case    2:*/		return 0x82152D7C;
	}
	return 0x82152D7C;
} // Block from 82152D70h-82152D7Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82152D7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152D7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152D7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152D7C);
		  /* 82152D7Ch */ case    0:  		/* nop */
		/* 82152D7Ch case    0:*/		cpu::op::nop();
		/* 82152D7Ch case    0:*/		return 0x82152D80;
	}
	return 0x82152D80;
} // Block from 82152D7Ch-82152D80h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82152D80h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152D80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152D80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152D80);
		  /* 82152D80h */ case    0:  		/* mr R3, R4 */
		/* 82152D80h case    0:*/		regs.R3 = regs.R4;
		/* 82152D80h case    0:*/		return 0x82152D84;
		  /* 82152D84h */ case    1:  		/* lis R4, 25735 */
		/* 82152D84h case    1:*/		cpu::op::lis<0>(regs,&regs.R4,0x6487);
		/* 82152D84h case    1:*/		return 0x82152D88;
		  /* 82152D88h */ case    2:  		/* b -830344 */
		/* 82152D88h case    2:*/		return 0x82088200;
		/* 82152D88h case    2:*/		return 0x82152D8C;
		  /* 82152D8Ch */ case    3:  		/* nop */
		/* 82152D8Ch case    3:*/		cpu::op::nop();
		/* 82152D8Ch case    3:*/		return 0x82152D90;
	}
	return 0x82152D90;
} // Block from 82152D80h-82152D90h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82152D90h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152D90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152D90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152D90);
		  /* 82152D90h */ case    0:  		/* mr R3, R4 */
		/* 82152D90h case    0:*/		regs.R3 = regs.R4;
		/* 82152D90h case    0:*/		return 0x82152D94;
		  /* 82152D94h */ case    1:  		/* lis R4, 9351 */
		/* 82152D94h case    1:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 82152D94h case    1:*/		return 0x82152D98;
		  /* 82152D98h */ case    2:  		/* b -830048 */
		/* 82152D98h case    2:*/		return 0x82088338;
		/* 82152D98h case    2:*/		return 0x82152D9C;
		  /* 82152D9Ch */ case    3:  		/* nop */
		/* 82152D9Ch case    3:*/		cpu::op::nop();
		/* 82152D9Ch case    3:*/		return 0x82152DA0;
	}
	return 0x82152DA0;
} // Block from 82152D90h-82152DA0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82152DA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152DA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152DA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152DA0);
		  /* 82152DA0h */ case    0:  		/* mfspr R12, LR */
		/* 82152DA0h case    0:*/		regs.R12 = regs.LR;
		/* 82152DA0h case    0:*/		return 0x82152DA4;
		  /* 82152DA4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82152DA4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82152DA4h case    1:*/		return 0x82152DA8;
		  /* 82152DA8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82152DA8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82152DA8h case    2:*/		return 0x82152DAC;
		  /* 82152DACh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82152DACh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82152DACh case    3:*/		return 0x82152DB0;
		  /* 82152DB0h */ case    4:  		/* lis R11, 1536 */
		/* 82152DB0h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0x600);
		/* 82152DB0h case    4:*/		return 0x82152DB4;
		  /* 82152DB4h */ case    5:  		/* li R31, 0 */
		/* 82152DB4h case    5:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82152DB4h case    5:*/		return 0x82152DB8;
		  /* 82152DB8h */ case    6:  		/* cmplw CR6, R3, R11 */
		/* 82152DB8h case    6:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82152DB8h case    6:*/		return 0x82152DBC;
		  /* 82152DBCh */ case    7:  		/* bc 12, CR6_GT, 128 */
		/* 82152DBCh case    7:*/		if ( regs.CR[6].gt ) { return 0x82152E3C;  }
		/* 82152DBCh case    7:*/		return 0x82152DC0;
		  /* 82152DC0h */ case    8:  		/* bc 12, CR6_EQ, 116 */
		/* 82152DC0h case    8:*/		if ( regs.CR[6].eq ) { return 0x82152E34;  }
		/* 82152DC0h case    8:*/		return 0x82152DC4;
		  /* 82152DC4h */ case    9:  		/* cmplwi CR6, R3, 0 */
		/* 82152DC4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82152DC4h case    9:*/		return 0x82152DC8;
		  /* 82152DC8h */ case   10:  		/* bc 12, CR6_EQ, 240 */
		/* 82152DC8h case   10:*/		if ( regs.CR[6].eq ) { return 0x82152EB8;  }
		/* 82152DC8h case   10:*/		return 0x82152DCC;
		  /* 82152DCCh */ case   11:  		/* lis R11, 256 */
		/* 82152DCCh case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0x100);
		/* 82152DCCh case   11:*/		return 0x82152DD0;
		  /* 82152DD0h */ case   12:  		/* cmplw CR6, R3, R11 */
		/* 82152DD0h case   12:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82152DD0h case   12:*/		return 0x82152DD4;
		  /* 82152DD4h */ case   13:  		/* bc 12, CR6_EQ, 84 */
		/* 82152DD4h case   13:*/		if ( regs.CR[6].eq ) { return 0x82152E28;  }
		/* 82152DD4h case   13:*/		return 0x82152DD8;
		  /* 82152DD8h */ case   14:  		/* lis R11, 512 */
		/* 82152DD8h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0x200);
		/* 82152DD8h case   14:*/		return 0x82152DDC;
		  /* 82152DDCh */ case   15:  		/* cmplw CR6, R3, R11 */
		/* 82152DDCh case   15:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82152DDCh case   15:*/		return 0x82152DE0;
		  /* 82152DE0h */ case   16:  		/* bc 12, CR6_EQ, 64 */
		/* 82152DE0h case   16:*/		if ( regs.CR[6].eq ) { return 0x82152E20;  }
		/* 82152DE0h case   16:*/		return 0x82152DE4;
		  /* 82152DE4h */ case   17:  		/* lis R11, 768 */
		/* 82152DE4h case   17:*/		cpu::op::lis<0>(regs,&regs.R11,0x300);
		/* 82152DE4h case   17:*/		return 0x82152DE8;
		  /* 82152DE8h */ case   18:  		/* cmplw CR6, R3, R11 */
		/* 82152DE8h case   18:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82152DE8h case   18:*/		return 0x82152DEC;
		  /* 82152DECh */ case   19:  		/* bc 12, CR6_EQ, 44 */
		/* 82152DECh case   19:*/		if ( regs.CR[6].eq ) { return 0x82152E18;  }
		/* 82152DECh case   19:*/		return 0x82152DF0;
		  /* 82152DF0h */ case   20:  		/* lis R11, 1024 */
		/* 82152DF0h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0x400);
		/* 82152DF0h case   20:*/		return 0x82152DF4;
		  /* 82152DF4h */ case   21:  		/* cmplw CR6, R3, R11 */
		/* 82152DF4h case   21:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82152DF4h case   21:*/		return 0x82152DF8;
		  /* 82152DF8h */ case   22:  		/* bc 12, CR6_EQ, 24 */
		/* 82152DF8h case   22:*/		if ( regs.CR[6].eq ) { return 0x82152E10;  }
		/* 82152DF8h case   22:*/		return 0x82152DFC;
		  /* 82152DFCh */ case   23:  		/* lis R11, 1280 */
		/* 82152DFCh case   23:*/		cpu::op::lis<0>(regs,&regs.R11,0x500);
		/* 82152DFCh case   23:*/		return 0x82152E00;
		  /* 82152E00h */ case   24:  		/* cmplw CR6, R3, R11 */
		/* 82152E00h case   24:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82152E00h case   24:*/		return 0x82152E04;
		  /* 82152E04h */ case   25:  		/* bc 4, CR6_EQ, 128 */
		/* 82152E04h case   25:*/		if ( !regs.CR[6].eq ) { return 0x82152E84;  }
		/* 82152E04h case   25:*/		return 0x82152E08;
		  /* 82152E08h */ case   26:  		/* lis R31, 6 */
		/* 82152E08h case   26:*/		cpu::op::lis<0>(regs,&regs.R31,0x6);
		/* 82152E08h case   26:*/		return 0x82152E0C;
		  /* 82152E0Ch */ case   27:  		/* b 32 */
		/* 82152E0Ch case   27:*/		return 0x82152E2C;
		/* 82152E0Ch case   27:*/		return 0x82152E10;
	}
	return 0x82152E10;
} // Block from 82152DA0h-82152E10h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82152E10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152E10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152E10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152E10);
		  /* 82152E10h */ case    0:  		/* lis R31, 6 */
		/* 82152E10h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x6);
		/* 82152E10h case    0:*/		return 0x82152E14;
		  /* 82152E14h */ case    1:  		/* b 164 */
		/* 82152E14h case    1:*/		return 0x82152EB8;
		/* 82152E14h case    1:*/		return 0x82152E18;
	}
	return 0x82152E18;
} // Block from 82152E10h-82152E18h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82152E18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152E18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152E18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152E18);
		  /* 82152E18h */ case    0:  		/* lis R31, 2 */
		/* 82152E18h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x2);
		/* 82152E18h case    0:*/		return 0x82152E1C;
		  /* 82152E1Ch */ case    1:  		/* b 16 */
		/* 82152E1Ch case    1:*/		return 0x82152E2C;
		/* 82152E1Ch case    1:*/		return 0x82152E20;
	}
	return 0x82152E20;
} // Block from 82152E18h-82152E20h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82152E20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152E20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152E20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152E20);
		  /* 82152E20h */ case    0:  		/* lis R31, 2 */
		/* 82152E20h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x2);
		/* 82152E20h case    0:*/		return 0x82152E24;
		  /* 82152E24h */ case    1:  		/* b 148 */
		/* 82152E24h case    1:*/		return 0x82152EB8;
		/* 82152E24h case    1:*/		return 0x82152E28;
	}
	return 0x82152E28;
} // Block from 82152E20h-82152E28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82152E28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152E28);
		  /* 82152E28h */ case    0:  		/* lis R31, 0 */
		/* 82152E28h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x0);
		/* 82152E28h case    0:*/		return 0x82152E2C;
	}
	return 0x82152E2C;
} // Block from 82152E28h-82152E2Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82152E2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152E2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152E2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152E2C);
		  /* 82152E2Ch */ case    0:  		/* ori R31, R31, 34952 */
		/* 82152E2Ch case    0:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0x8888);
		/* 82152E2Ch case    0:*/		return 0x82152E30;
		  /* 82152E30h */ case    1:  		/* b 136 */
		/* 82152E30h case    1:*/		return 0x82152EB8;
		/* 82152E30h case    1:*/		return 0x82152E34;
	}
	return 0x82152E34;
} // Block from 82152E2Ch-82152E34h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82152E34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152E34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152E34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152E34);
		  /* 82152E34h */ case    0:  		/* lis R31, 1 */
		/* 82152E34h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x1);
		/* 82152E34h case    0:*/		return 0x82152E38;
		  /* 82152E38h */ case    1:  		/* b 128 */
		/* 82152E38h case    1:*/		return 0x82152EB8;
		/* 82152E38h case    1:*/		return 0x82152E3C;
	}
	return 0x82152E3C;
} // Block from 82152E34h-82152E3Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82152E3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152E3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152E3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152E3C);
		  /* 82152E3Ch */ case    0:  		/* lis R11, 1792 */
		/* 82152E3Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x700);
		/* 82152E3Ch case    0:*/		return 0x82152E40;
		  /* 82152E40h */ case    1:  		/* cmplw CR6, R3, R11 */
		/* 82152E40h case    1:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82152E40h case    1:*/		return 0x82152E44;
		  /* 82152E44h */ case    2:  		/* bc 12, CR6_EQ, 112 */
		/* 82152E44h case    2:*/		if ( regs.CR[6].eq ) { return 0x82152EB4;  }
		/* 82152E44h case    2:*/		return 0x82152E48;
		  /* 82152E48h */ case    3:  		/* lis R11, 2048 */
		/* 82152E48h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0x800);
		/* 82152E48h case    3:*/		return 0x82152E4C;
		  /* 82152E4Ch */ case    4:  		/* cmplw CR6, R3, R11 */
		/* 82152E4Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82152E4Ch case    4:*/		return 0x82152E50;
		  /* 82152E50h */ case    5:  		/* bc 12, CR6_EQ, 92 */
		/* 82152E50h case    5:*/		if ( regs.CR[6].eq ) { return 0x82152EAC;  }
		/* 82152E50h case    5:*/		return 0x82152E54;
		  /* 82152E54h */ case    6:  		/* lis R11, 2304 */
		/* 82152E54h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0x900);
		/* 82152E54h case    6:*/		return 0x82152E58;
		  /* 82152E58h */ case    7:  		/* cmplw CR6, R3, R11 */
		/* 82152E58h case    7:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82152E58h case    7:*/		return 0x82152E5C;
		  /* 82152E5Ch */ case    8:  		/* bc 12, CR6_EQ, 72 */
		/* 82152E5Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x82152EA4;  }
		/* 82152E5Ch case    8:*/		return 0x82152E60;
		  /* 82152E60h */ case    9:  		/* lis R11, 2560 */
		/* 82152E60h case    9:*/		cpu::op::lis<0>(regs,&regs.R11,0xA00);
		/* 82152E60h case    9:*/		return 0x82152E64;
		  /* 82152E64h */ case   10:  		/* cmplw CR6, R3, R11 */
		/* 82152E64h case   10:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82152E64h case   10:*/		return 0x82152E68;
		  /* 82152E68h */ case   11:  		/* bc 12, CR6_EQ, 52 */
		/* 82152E68h case   11:*/		if ( regs.CR[6].eq ) { return 0x82152E9C;  }
		/* 82152E68h case   11:*/		return 0x82152E6C;
		  /* 82152E6Ch */ case   12:  		/* lis R11, 2816 */
		/* 82152E6Ch case   12:*/		cpu::op::lis<0>(regs,&regs.R11,0xB00);
		/* 82152E6Ch case   12:*/		return 0x82152E70;
		  /* 82152E70h */ case   13:  		/* cmplw CR6, R3, R11 */
		/* 82152E70h case   13:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82152E70h case   13:*/		return 0x82152E74;
		  /* 82152E74h */ case   14:  		/* bc 12, CR6_EQ, 32 */
		/* 82152E74h case   14:*/		if ( regs.CR[6].eq ) { return 0x82152E94;  }
		/* 82152E74h case   14:*/		return 0x82152E78;
		  /* 82152E78h */ case   15:  		/* lis R11, 3072 */
		/* 82152E78h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xC00);
		/* 82152E78h case   15:*/		return 0x82152E7C;
		  /* 82152E7Ch */ case   16:  		/* cmplw CR6, R3, R11 */
		/* 82152E7Ch case   16:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 82152E7Ch case   16:*/		return 0x82152E80;
		  /* 82152E80h */ case   17:  		/* bc 12, CR6_EQ, 12 */
		/* 82152E80h case   17:*/		if ( regs.CR[6].eq ) { return 0x82152E8C;  }
		/* 82152E80h case   17:*/		return 0x82152E84;
	}
	return 0x82152E84;
} // Block from 82152E3Ch-82152E84h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82152E84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152E84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152E84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152E84);
		  /* 82152E84h */ case    0:  		/* bl 1131484 */
		/* 82152E84h case    0:*/		regs.LR = 0x82152E88; return 0x82267260;
		/* 82152E84h case    0:*/		return 0x82152E88;
		  /* 82152E88h */ case    1:  		/* b 48 */
		/* 82152E88h case    1:*/		return 0x82152EB8;
		/* 82152E88h case    1:*/		return 0x82152E8C;
	}
	return 0x82152E8C;
} // Block from 82152E84h-82152E8Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82152E8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152E8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152E8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152E8C);
		  /* 82152E8Ch */ case    0:  		/* lis R31, 16 */
		/* 82152E8Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x10);
		/* 82152E8Ch case    0:*/		return 0x82152E90;
		  /* 82152E90h */ case    1:  		/* b -100 */
		/* 82152E90h case    1:*/		return 0x82152E2C;
		/* 82152E90h case    1:*/		return 0x82152E94;
	}
	return 0x82152E94;
} // Block from 82152E8Ch-82152E94h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82152E94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152E94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152E94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152E94);
		  /* 82152E94h */ case    0:  		/* lis R31, 16 */
		/* 82152E94h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x10);
		/* 82152E94h case    0:*/		return 0x82152E98;
		  /* 82152E98h */ case    1:  		/* b 32 */
		/* 82152E98h case    1:*/		return 0x82152EB8;
		/* 82152E98h case    1:*/		return 0x82152E9C;
	}
	return 0x82152E9C;
} // Block from 82152E94h-82152E9Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82152E9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152E9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152E9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152E9C);
		  /* 82152E9Ch */ case    0:  		/* lis R31, 96 */
		/* 82152E9Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x60);
		/* 82152E9Ch case    0:*/		return 0x82152EA0;
		  /* 82152EA0h */ case    1:  		/* b 24 */
		/* 82152EA0h case    1:*/		return 0x82152EB8;
		/* 82152EA0h case    1:*/		return 0x82152EA4;
	}
	return 0x82152EA4;
} // Block from 82152E9Ch-82152EA4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82152EA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152EA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152EA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152EA4);
		  /* 82152EA4h */ case    0:  		/* lis R31, 64 */
		/* 82152EA4h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x40);
		/* 82152EA4h case    0:*/		return 0x82152EA8;
		  /* 82152EA8h */ case    1:  		/* b 16 */
		/* 82152EA8h case    1:*/		return 0x82152EB8;
		/* 82152EA8h case    1:*/		return 0x82152EAC;
	}
	return 0x82152EAC;
} // Block from 82152EA4h-82152EACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82152EACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152EAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152EAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152EAC);
		  /* 82152EACh */ case    0:  		/* lis R31, 4 */
		/* 82152EACh case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x4);
		/* 82152EACh case    0:*/		return 0x82152EB0;
		  /* 82152EB0h */ case    1:  		/* b -132 */
		/* 82152EB0h case    1:*/		return 0x82152E2C;
		/* 82152EB0h case    1:*/		return 0x82152EB4;
	}
	return 0x82152EB4;
} // Block from 82152EACh-82152EB4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82152EB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152EB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152EB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152EB4);
		  /* 82152EB4h */ case    0:  		/* lis R31, 4 */
		/* 82152EB4h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x4);
		/* 82152EB4h case    0:*/		return 0x82152EB8;
	}
	return 0x82152EB8;
} // Block from 82152EB4h-82152EB8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82152EB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152EB8);
		  /* 82152EB8h */ case    0:  		/* rlwinm. R11, R31, 0, 15, 15 */
		/* 82152EB8h case    0:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R11,regs.R31);
		/* 82152EB8h case    0:*/		return 0x82152EBC;
		  /* 82152EBCh */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 82152EBCh case    1:*/		if ( regs.CR[0].eq ) { return 0x82152ED4;  }
		/* 82152EBCh case    1:*/		return 0x82152EC0;
		  /* 82152EC0h */ case    2:  		/* lis R12, 6 */
		/* 82152EC0h case    2:*/		cpu::op::lis<0>(regs,&regs.R12,0x6);
		/* 82152EC0h case    2:*/		return 0x82152EC4;
		  /* 82152EC4h */ case    3:  		/* ori R12, R12, 34952 */
		/* 82152EC4h case    3:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0x8888);
		/* 82152EC4h case    3:*/		return 0x82152EC8;
		  /* 82152EC8h */ case    4:  		/* and. R11, R31, R12 */
		/* 82152EC8h case    4:*/		cpu::op::and<1>(regs,&regs.R11,regs.R31,regs.R12);
		/* 82152EC8h case    4:*/		return 0x82152ECC;
		  /* 82152ECCh */ case    5:  		/* bc 12, CR0_EQ, 8 */
		/* 82152ECCh case    5:*/		if ( regs.CR[0].eq ) { return 0x82152ED4;  }
		/* 82152ECCh case    5:*/		return 0x82152ED0;
		  /* 82152ED0h */ case    6:  		/* bl 1131408 */
		/* 82152ED0h case    6:*/		regs.LR = 0x82152ED4; return 0x82267260;
		/* 82152ED0h case    6:*/		return 0x82152ED4;
	}
	return 0x82152ED4;
} // Block from 82152EB8h-82152ED4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82152ED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152ED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152ED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152ED4);
		  /* 82152ED4h */ case    0:  		/* mr R3, R31 */
		/* 82152ED4h case    0:*/		regs.R3 = regs.R31;
		/* 82152ED4h case    0:*/		return 0x82152ED8;
		  /* 82152ED8h */ case    1:  		/* addi R1, R1, 96 */
		/* 82152ED8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82152ED8h case    1:*/		return 0x82152EDC;
		  /* 82152EDCh */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 82152EDCh case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82152EDCh case    2:*/		return 0x82152EE0;
		  /* 82152EE0h */ case    3:  		/* mtspr LR, R12 */
		/* 82152EE0h case    3:*/		regs.LR = regs.R12;
		/* 82152EE0h case    3:*/		return 0x82152EE4;
		  /* 82152EE4h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82152EE4h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82152EE4h case    4:*/		return 0x82152EE8;
		  /* 82152EE8h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82152EE8h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82152EE8h case    5:*/		return 0x82152EEC;
	}
	return 0x82152EEC;
} // Block from 82152ED4h-82152EECh (6 instructions)

//////////////////////////////////////////////////////
// Block at 82152EECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152EEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152EEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152EEC);
		  /* 82152EECh */ case    0:  		/* nop */
		/* 82152EECh case    0:*/		cpu::op::nop();
		/* 82152EECh case    0:*/		return 0x82152EF0;
	}
	return 0x82152EF0;
} // Block from 82152EECh-82152EF0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82152EF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152EF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152EF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152EF0);
		  /* 82152EF0h */ case    0:  		/* mfspr R12, LR */
		/* 82152EF0h case    0:*/		regs.R12 = regs.LR;
		/* 82152EF0h case    0:*/		return 0x82152EF4;
		  /* 82152EF4h */ case    1:  		/* bl -793756 */
		/* 82152EF4h case    1:*/		regs.LR = 0x82152EF8; return 0x82091258;
		/* 82152EF4h case    1:*/		return 0x82152EF8;
		  /* 82152EF8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82152EF8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82152EF8h case    2:*/		return 0x82152EFC;
		  /* 82152EFCh */ case    3:  		/* mr R31, R4 */
		/* 82152EFCh case    3:*/		regs.R31 = regs.R4;
		/* 82152EFCh case    3:*/		return 0x82152F00;
		  /* 82152F00h */ case    4:  		/* mr R30, R5 */
		/* 82152F00h case    4:*/		regs.R30 = regs.R5;
		/* 82152F00h case    4:*/		return 0x82152F04;
		  /* 82152F04h */ case    5:  		/* mr R28, R6 */
		/* 82152F04h case    5:*/		regs.R28 = regs.R6;
		/* 82152F04h case    5:*/		return 0x82152F08;
		  /* 82152F08h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 82152F08h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82152F08h case    6:*/		return 0x82152F0C;
		  /* 82152F0Ch */ case    7:  		/* bc 12, CR6_EQ, 204 */
		/* 82152F0Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82152FD8;  }
		/* 82152F0Ch case    7:*/		return 0x82152F10;
		  /* 82152F10h */ case    8:  		/* cmplwi CR6, R3, 3 */
		/* 82152F10h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000003);
		/* 82152F10h case    8:*/		return 0x82152F14;
		  /* 82152F14h */ case    9:  		/* bc 12, CR6_EQ, 136 */
		/* 82152F14h case    9:*/		if ( regs.CR[6].eq ) { return 0x82152F9C;  }
		/* 82152F14h case    9:*/		return 0x82152F18;
		  /* 82152F18h */ case   10:  		/* cmplwi CR6, R3, 8 */
		/* 82152F18h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000008);
		/* 82152F18h case   10:*/		return 0x82152F1C;
		  /* 82152F1Ch */ case   11:  		/* bc 12, CR6_EQ, 36 */
		/* 82152F1Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x82152F40;  }
		/* 82152F1Ch case   11:*/		return 0x82152F20;
		  /* 82152F20h */ case   12:  		/* cmplwi CR6, R3, 9 */
		/* 82152F20h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000009);
		/* 82152F20h case   12:*/		return 0x82152F24;
		  /* 82152F24h */ case   13:  		/* bc 4, CR6_EQ, 172 */
		/* 82152F24h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82152FD0;  }
		/* 82152F24h case   13:*/		return 0x82152F28;
		  /* 82152F28h */ case   14:  		/* li R11, 4 */
		/* 82152F28h case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 82152F28h case   14:*/		return 0x82152F2C;
		  /* 82152F2Ch */ case   15:  		/* li R10, 1 */
		/* 82152F2Ch case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82152F2Ch case   15:*/		return 0x82152F30;
		  /* 82152F30h */ case   16:  		/* stw R11, <#[R6]> */
		/* 82152F30h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 82152F30h case   16:*/		return 0x82152F34;
		  /* 82152F34h */ case   17:  		/* li R31, 34 */
		/* 82152F34h case   17:*/		cpu::op::li<0>(regs,&regs.R31,0x22);
		/* 82152F34h case   17:*/		return 0x82152F38;
		  /* 82152F38h */ case   18:  		/* stw R10, <#[R5 + 156]> */
		/* 82152F38h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R5 + 0x0000009C) );
		/* 82152F38h case   18:*/		return 0x82152F3C;
		  /* 82152F3Ch */ case   19:  		/* b 164 */
		/* 82152F3Ch case   19:*/		return 0x82152FE0;
		/* 82152F3Ch case   19:*/		return 0x82152F40;
	}
	return 0x82152F40;
} // Block from 82152EF0h-82152F40h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82152F40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152F40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152F40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152F40);
		  /* 82152F40h */ case    0:  		/* lis R11, -1 */
		/* 82152F40h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82152F40h case    0:*/		return 0x82152F44;
		  /* 82152F44h */ case    1:  		/* lwz R10, <#[R30]> */
		/* 82152F44h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 82152F44h case    1:*/		return 0x82152F48;
	}
	return 0x82152F48;
} // Block from 82152F40h-82152F48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82152F48h
// Function '?RestartCompilerEntryPoint@Compiler@D3DXShader@@SAJPAUCompilerEntryPointState@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152F48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152F48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152F48);
		  /* 82152F48h */ case    0:  		/* ori R29, R11, 512 */
		/* 82152F48h case    0:*/		cpu::op::ori<0>(regs,&regs.R29,regs.R11,0x200);
		/* 82152F48h case    0:*/		return 0x82152F4C;
		  /* 82152F4Ch */ case    1:  		/* cmplw CR6, R10, R29 */
		/* 82152F4Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 82152F4Ch case    1:*/		return 0x82152F50;
		  /* 82152F50h */ case    2:  		/* bc 4, CR6_LT, 8 */
		/* 82152F50h case    2:*/		if ( !regs.CR[6].lt ) { return 0x82152F58;  }
		/* 82152F50h case    2:*/		return 0x82152F54;
		  /* 82152F54h */ case    3:  		/* bl 1131276 */
		/* 82152F54h case    3:*/		regs.LR = 0x82152F58; return 0x82267260;
		/* 82152F54h case    3:*/		return 0x82152F58;
	}
	return 0x82152F58;
} // Block from 82152F48h-82152F58h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82152F58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152F58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152F58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152F58);
		  /* 82152F58h */ case    0:  		/* cmplwi CR6, R31, 4 */
		/* 82152F58h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000004);
		/* 82152F58h case    0:*/		return 0x82152F5C;
		  /* 82152F5Ch */ case    1:  		/* bc 12, CR6_LT, 8 */
		/* 82152F5Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x82152F64;  }
		/* 82152F5Ch case    1:*/		return 0x82152F60;
		  /* 82152F60h */ case    2:  		/* bl 1131264 */
		/* 82152F60h case    2:*/		regs.LR = 0x82152F64; return 0x82267260;
		/* 82152F60h case    2:*/		return 0x82152F64;
	}
	return 0x82152F64;
} // Block from 82152F58h-82152F64h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82152F64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152F64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152F64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152F64);
		  /* 82152F64h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 82152F64h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82152F64h case    0:*/		return 0x82152F68;
		  /* 82152F68h */ case    1:  		/* cmplw CR6, R11, R29 */
		/* 82152F68h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 82152F68h case    1:*/		return 0x82152F6C;
		  /* 82152F6Ch */ case    2:  		/* bc 4, CR6_EQ, 40 */
		/* 82152F6Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82152F94;  }
		/* 82152F6Ch case    2:*/		return 0x82152F70;
		  /* 82152F70h */ case    3:  		/* li R11, 1 */
		/* 82152F70h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82152F70h case    3:*/		return 0x82152F74;
		  /* 82152F74h */ case    4:  		/* lwz R10, <#[R30 + 160]> */
		/* 82152F74h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x000000A0) );
		/* 82152F74h case    4:*/		return 0x82152F78;
		  /* 82152F78h */ case    5:  		/* li R9, 4 */
		/* 82152F78h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 82152F78h case    5:*/		return 0x82152F7C;
		  /* 82152F7Ch */ case    6:  		/* slw R11, R11, R31 */
		/* 82152F7Ch case    6:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 82152F7Ch case    6:*/		return 0x82152F80;
		  /* 82152F80h */ case    7:  		/* or R11, R11, R10 */
		/* 82152F80h case    7:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82152F80h case    7:*/		return 0x82152F84;
		  /* 82152F84h */ case    8:  		/* addi R31, R31, 35 */
		/* 82152F84h case    8:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x23);
		/* 82152F84h case    8:*/		return 0x82152F88;
		  /* 82152F88h */ case    9:  		/* stw R11, <#[R30 + 160]> */
		/* 82152F88h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x000000A0) );
		/* 82152F88h case    9:*/		return 0x82152F8C;
		  /* 82152F8Ch */ case   10:  		/* stw R9, <#[R28]> */
		/* 82152F8Ch case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R28 + 0x00000000) );
		/* 82152F8Ch case   10:*/		return 0x82152F90;
		  /* 82152F90h */ case   11:  		/* b 80 */
		/* 82152F90h case   11:*/		return 0x82152FE0;
		/* 82152F90h case   11:*/		return 0x82152F94;
	}
	return 0x82152F94;
} // Block from 82152F64h-82152F94h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82152F94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152F94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152F94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152F94);
		  /* 82152F94h */ case    0:  		/* li R11, 23 */
		/* 82152F94h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x17);
		/* 82152F94h case    0:*/		return 0x82152F98;
		  /* 82152F98h */ case    1:  		/* b 68 */
		/* 82152F98h case    1:*/		return 0x82152FDC;
		/* 82152F98h case    1:*/		return 0x82152F9C;
	}
	return 0x82152F9C;
} // Block from 82152F94h-82152F9Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82152F9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152F9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152F9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152F9C);
		  /* 82152F9Ch */ case    0:  		/* lis R11, -1 */
		/* 82152F9Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82152F9Ch case    0:*/		return 0x82152FA0;
		  /* 82152FA0h */ case    1:  		/* lwz R10, <#[R30]> */
		/* 82152FA0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 82152FA0h case    1:*/		return 0x82152FA4;
		  /* 82152FA4h */ case    2:  		/* ori R11, R11, 260 */
		/* 82152FA4h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x104);
		/* 82152FA4h case    2:*/		return 0x82152FA8;
		  /* 82152FA8h */ case    3:  		/* cmplw CR6, R10, R11 */
		/* 82152FA8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82152FA8h case    3:*/		return 0x82152FAC;
		  /* 82152FACh */ case    4:  		/* bc 12, CR6_LT, 8 */
		/* 82152FACh case    4:*/		if ( regs.CR[6].lt ) { return 0x82152FB4;  }
		/* 82152FACh case    4:*/		return 0x82152FB0;
		  /* 82152FB0h */ case    5:  		/* bl 1131184 */
		/* 82152FB0h case    5:*/		regs.LR = 0x82152FB4; return 0x82267260;
		/* 82152FB0h case    5:*/		return 0x82152FB4;
	}
	return 0x82152FB4;
} // Block from 82152F9Ch-82152FB4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82152FB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152FB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152FB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152FB4);
		  /* 82152FB4h */ case    0:  		/* addi R11, R31, 41 */
		/* 82152FB4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x29);
		/* 82152FB4h case    0:*/		return 0x82152FB8;
		  /* 82152FB8h */ case    1:  		/* li R10, 4 */
		/* 82152FB8h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 82152FB8h case    1:*/		return 0x82152FBC;
		  /* 82152FBCh */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82152FBCh case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82152FBCh case    2:*/		return 0x82152FC0;
		  /* 82152FC0h */ case    3:  		/* lwzx R31, <#[R11 + R30]> */
		/* 82152FC0h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82152FC0h case    3:*/		return 0x82152FC4;
		  /* 82152FC4h */ case    4:  		/* stw R10, <#[R28]> */
		/* 82152FC4h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 82152FC4h case    4:*/		return 0x82152FC8;
		  /* 82152FC8h */ case    5:  		/* cmplwi CR6, R31, 0 */
		/* 82152FC8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82152FC8h case    5:*/		return 0x82152FCC;
		  /* 82152FCCh */ case    6:  		/* bc 4, CR6_EQ, 20 */
		/* 82152FCCh case    6:*/		if ( !regs.CR[6].eq ) { return 0x82152FE0;  }
		/* 82152FCCh case    6:*/		return 0x82152FD0;
	}
	return 0x82152FD0;
} // Block from 82152FB4h-82152FD0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82152FD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152FD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152FD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152FD0);
		  /* 82152FD0h */ case    0:  		/* bl 1131152 */
		/* 82152FD0h case    0:*/		regs.LR = 0x82152FD4; return 0x82267260;
		/* 82152FD0h case    0:*/		return 0x82152FD4;
		  /* 82152FD4h */ case    1:  		/* b 12 */
		/* 82152FD4h case    1:*/		return 0x82152FE0;
		/* 82152FD4h case    1:*/		return 0x82152FD8;
	}
	return 0x82152FD8;
} // Block from 82152FD0h-82152FD8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82152FD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152FD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152FD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152FD8);
		  /* 82152FD8h */ case    0:  		/* li R11, 4 */
		/* 82152FD8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 82152FD8h case    0:*/		return 0x82152FDC;
	}
	return 0x82152FDC;
} // Block from 82152FD8h-82152FDCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82152FDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152FDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152FDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152FDC);
		  /* 82152FDCh */ case    0:  		/* stw R11, <#[R28]> */
		/* 82152FDCh case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82152FDCh case    0:*/		return 0x82152FE0;
	}
	return 0x82152FE0;
} // Block from 82152FDCh-82152FE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82152FE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152FE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152FE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152FE0);
		  /* 82152FE0h */ case    0:  		/* mr R3, R31 */
		/* 82152FE0h case    0:*/		regs.R3 = regs.R31;
		/* 82152FE0h case    0:*/		return 0x82152FE4;
		  /* 82152FE4h */ case    1:  		/* addi R1, R1, 128 */
		/* 82152FE4h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82152FE4h case    1:*/		return 0x82152FE8;
		  /* 82152FE8h */ case    2:  		/* b -793920 */
		/* 82152FE8h case    2:*/		return 0x820912A8;
		/* 82152FE8h case    2:*/		return 0x82152FEC;
		  /* 82152FECh */ case    3:  		/* nop */
		/* 82152FECh case    3:*/		cpu::op::nop();
		/* 82152FECh case    3:*/		return 0x82152FF0;
	}
	return 0x82152FF0;
} // Block from 82152FE0h-82152FF0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82152FF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82152FF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82152FF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82152FF0);
		  /* 82152FF0h */ case    0:  		/* mfspr R12, LR */
		/* 82152FF0h case    0:*/		regs.R12 = regs.LR;
		/* 82152FF0h case    0:*/		return 0x82152FF4;
		  /* 82152FF4h */ case    1:  		/* bl -794012 */
		/* 82152FF4h case    1:*/		regs.LR = 0x82152FF8; return 0x82091258;
		/* 82152FF4h case    1:*/		return 0x82152FF8;
		  /* 82152FF8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82152FF8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82152FF8h case    2:*/		return 0x82152FFC;
		  /* 82152FFCh */ case    3:  		/* lwz R29, <#[R5]> */
		/* 82152FFCh case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R5 + 0x00000000) );
		/* 82152FFCh case    3:*/		return 0x82153000;
		  /* 82153000h */ case    4:  		/* mr R30, R3 */
		/* 82153000h case    4:*/		regs.R30 = regs.R3;
		/* 82153000h case    4:*/		return 0x82153004;
		  /* 82153004h */ case    5:  		/* mr R31, R4 */
		/* 82153004h case    5:*/		regs.R31 = regs.R4;
		/* 82153004h case    5:*/		return 0x82153008;
		  /* 82153008h */ case    6:  		/* mr R28, R5 */
		/* 82153008h case    6:*/		regs.R28 = regs.R5;
		/* 82153008h case    6:*/		return 0x8215300C;
		  /* 8215300Ch */ case    7:  		/* cmpwi CR6, R4, 52 */
		/* 8215300Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000034);
		/* 8215300Ch case    7:*/		return 0x82153010;
		  /* 82153010h */ case    8:  		/* bc 12, CR6_EQ, 16 */
		/* 82153010h case    8:*/		if ( regs.CR[6].eq ) { return 0x82153020;  }
		/* 82153010h case    8:*/		return 0x82153014;
		  /* 82153014h */ case    9:  		/* cmpwi CR6, R4, 7 */
		/* 82153014h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000007);
		/* 82153014h case    9:*/		return 0x82153018;
		  /* 82153018h */ case   10:  		/* bc 12, CR6_EQ, 8 */
		/* 82153018h case   10:*/		if ( regs.CR[6].eq ) { return 0x82153020;  }
		/* 82153018h case   10:*/		return 0x8215301C;
		  /* 8215301Ch */ case   11:  		/* bl 1131076 */
		/* 8215301Ch case   11:*/		regs.LR = 0x82153020; return 0x82267260;
		/* 8215301Ch case   11:*/		return 0x82153020;
	}
	return 0x82153020;
} // Block from 82152FF0h-82153020h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82153020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153020);
		  /* 82153020h */ case    0:  		/* rlwinm R10, R30, 0, 4, 7 */
		/* 82153020h case    0:*/		cpu::op::rlwinm<0,0,4,7>(regs,&regs.R10,regs.R30);
		/* 82153020h case    0:*/		return 0x82153024;
		  /* 82153024h */ case    1:  		/* lis R9, 3328 */
		/* 82153024h case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0xD00);
		/* 82153024h case    1:*/		return 0x82153028;
	}
	return 0x82153028;
} // Block from 82153020h-82153028h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82153028h
// Function '?EndCompilerEntryPoint@Compiler@D3DXShader@@SAJPAUCompilerEntryPointState@2@J@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153028);
		  /* 82153028h */ case    0:  		/* rlwinm R11, R31, 0, 16, 31 */
		/* 82153028h case    0:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R31);
		/* 82153028h case    0:*/		return 0x8215302C;
		  /* 8215302Ch */ case    1:  		/* cmplw CR6, R10, R9 */
		/* 8215302Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 8215302Ch case    1:*/		return 0x82153030;
		  /* 82153030h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 82153030h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82153040;  }
		/* 82153030h case    2:*/		return 0x82153034;
		  /* 82153034h */ case    3:  		/* li R10, 1 */
		/* 82153034h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82153034h case    3:*/		return 0x82153038;
		  /* 82153038h */ case    4:  		/* rlwimi R11, R10, 16, 13, 15 */
		/* 82153038h case    4:*/		cpu::op::rlwimi<0,16,13,15>(regs,&regs.R11,regs.R10);
		/* 82153038h case    4:*/		return 0x8215303C;
		  /* 8215303Ch */ case    5:  		/* b 8 */
		/* 8215303Ch case    5:*/		return 0x82153044;
		/* 8215303Ch case    5:*/		return 0x82153040;
	}
	return 0x82153040;
} // Block from 82153028h-82153040h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82153040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153040);
		  /* 82153040h */ case    0:  		/* rlwinm R11, R11, 0, 16, 12 */
		/* 82153040h case    0:*/		cpu::op::rlwinm<0,0,16,12>(regs,&regs.R11,regs.R11);
		/* 82153040h case    0:*/		return 0x82153044;
	}
	return 0x82153044;
} // Block from 82153040h-82153044h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82153044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153044);
		  /* 82153044h */ case    0:  		/* rlwinm R10, R30, 0, 8, 15 */
		/* 82153044h case    0:*/		cpu::op::rlwinm<0,0,8,15>(regs,&regs.R10,regs.R30);
		/* 82153044h case    0:*/		return 0x82153048;
		  /* 82153048h */ case    1:  		/* stw R11, <#[R29]> */
		/* 82153048h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82153048h case    1:*/		return 0x8215304C;
		  /* 8215304Ch */ case    2:  		/* lis R9, 228 */
		/* 8215304Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0xE4);
		/* 8215304Ch case    2:*/		return 0x82153050;
		  /* 82153050h */ case    3:  		/* addi R11, R29, 4 */
		/* 82153050h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x4);
		/* 82153050h case    3:*/		return 0x82153054;
		  /* 82153054h */ case    4:  		/* cmplw CR6, R10, R9 */
		/* 82153054h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82153054h case    4:*/		return 0x82153058;
		  /* 82153058h */ case    5:  		/* bc 12, CR6_EQ, 96 */
		/* 82153058h case    5:*/		if ( regs.CR[6].eq ) { return 0x821530B8;  }
		/* 82153058h case    5:*/		return 0x8215305C;
		  /* 8215305Ch */ case    6:  		/* rlwinm R9, R10, 14, 18, 31 */
		/* 8215305Ch case    6:*/		cpu::op::rlwinm<0,14,18,31>(regs,&regs.R9,regs.R10);
		/* 8215305Ch case    6:*/		return 0x82153060;
		  /* 82153060h */ case    7:  		/* lis R8, -32217 */
		/* 82153060h case    7:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8227);
		/* 82153060h case    7:*/		return 0x82153064;
		  /* 82153064h */ case    8:  		/* rlwinm R7, R9, 30, 2, 31 */
		/* 82153064h case    8:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R7,regs.R9);
		/* 82153064h case    8:*/		return 0x82153068;
		  /* 82153068h */ case    9:  		/* addi R8, R8, 19772 */
		/* 82153068h case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4D3C);
		/* 82153068h case    9:*/		return 0x8215306C;
		  /* 8215306Ch */ case   10:  		/* rlwinm R9, R9, 2, 28, 29 */
		/* 8215306Ch case   10:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R9,regs.R9);
		/* 8215306Ch case   10:*/		return 0x82153070;
		  /* 82153070h */ case   11:  		/* rlwinm R10, R10, 18, 28, 29 */
		/* 82153070h case   11:*/		cpu::op::rlwinm<0,18,28,29>(regs,&regs.R10,regs.R10);
		/* 82153070h case   11:*/		return 0x82153074;
		  /* 82153074h */ case   12:  		/* rlwinm R6, R7, 2, 28, 29 */
		/* 82153074h case   12:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R6,regs.R7);
		/* 82153074h case   12:*/		return 0x82153078;
		  /* 82153078h */ case   13:  		/* rlwinm R7, R7, 0, 28, 29 */
		/* 82153078h case   13:*/		cpu::op::rlwinm<0,0,28,29>(regs,&regs.R7,regs.R7);
		/* 82153078h case   13:*/		return 0x8215307C;
		  /* 8215307Ch */ case   14:  		/* lis R5, 68 */
		/* 8215307Ch case   14:*/		cpu::op::lis<0>(regs,&regs.R5,0x44);
		/* 8215307Ch case   14:*/		return 0x82153080;
		  /* 82153080h */ case   15:  		/* lwzx R9, <#[R9 + R8]> */
		/* 82153080h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 82153080h case   15:*/		return 0x82153084;
		  /* 82153084h */ case   16:  		/* lwzx R10, <#[R10 + R8]> */
		/* 82153084h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 82153084h case   16:*/		return 0x82153088;
		  /* 82153088h */ case   17:  		/* ori R5, R5, 32 */
		/* 82153088h case   17:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x20);
		/* 82153088h case   17:*/		return 0x8215308C;
		  /* 8215308Ch */ case   18:  		/* rlwinm R9, R9, 4, 0, 27 */
		/* 8215308Ch case   18:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R9,regs.R9);
		/* 8215308Ch case   18:*/		return 0x82153090;
		  /* 82153090h */ case   19:  		/* lwzx R6, <#[R6 + R8]> */
		/* 82153090h case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R8 + 0x00000000) );
		/* 82153090h case   19:*/		return 0x82153094;
		  /* 82153094h */ case   20:  		/* lwzx R8, <#[R7 + R8]> */
		/* 82153094h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R7 + regs.R8 + 0x00000000) );
		/* 82153094h case   20:*/		return 0x82153098;
		  /* 82153098h */ case   21:  		/* or R10, R9, R10 */
		/* 82153098h case   21:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82153098h case   21:*/		return 0x8215309C;
		  /* 8215309Ch */ case   22:  		/* stw R5, <#[R11]> */
		/* 8215309Ch case   22:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8215309Ch case   22:*/		return 0x821530A0;
		  /* 821530A0h */ case   23:  		/* rlwinm R9, R6, 8, 0, 23 */
		/* 821530A0h case   23:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R9,regs.R6);
		/* 821530A0h case   23:*/		return 0x821530A4;
		  /* 821530A4h */ case   24:  		/* rlwinm R8, R8, 12, 0, 19 */
		/* 821530A4h case   24:*/		cpu::op::rlwinm<0,12,0,19>(regs,&regs.R8,regs.R8);
		/* 821530A4h case   24:*/		return 0x821530A8;
		  /* 821530A8h */ case   25:  		/* or R10, R9, R10 */
		/* 821530A8h case   25:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821530A8h case   25:*/		return 0x821530AC;
		  /* 821530ACh */ case   26:  		/* or R10, R8, R10 */
		/* 821530ACh case   26:*/		cpu::op::or<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821530ACh case   26:*/		return 0x821530B0;
		  /* 821530B0h */ case   27:  		/* stwu R10, <#[R11 + 4]> */
		/* 821530B0h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821530B0h case   27:*/		return 0x821530B4;
		  /* 821530B4h */ case   28:  		/* b 16 */
		/* 821530B4h case   28:*/		return 0x821530C4;
		/* 821530B4h case   28:*/		return 0x821530B8;
	}
	return 0x821530B8;
} // Block from 82153044h-821530B8h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821530B8h
// Function '?Init@Compiler@D3DXShader@@QAAXPAXP6AX0HPAVCNode@2@KPBD@Z@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821530B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821530B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821530B8);
		  /* 821530B8h */ case    0:  		/* lis R10, 4 */
		/* 821530B8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x4);
		/* 821530B8h case    0:*/		return 0x821530BC;
		  /* 821530BCh */ case    1:  		/* ori R10, R10, 32 */
		/* 821530BCh case    1:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x20);
		/* 821530BCh case    1:*/		return 0x821530C0;
		  /* 821530C0h */ case    2:  		/* stw R10, <#[R11]> */
		/* 821530C0h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821530C0h case    2:*/		return 0x821530C4;
	}
	return 0x821530C4;
} // Block from 821530B8h-821530C4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821530C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821530C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821530C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821530C4);
		  /* 821530C4h */ case    0:  		/* addi R11, R11, 4 */
		/* 821530C4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821530C4h case    0:*/		return 0x821530C8;
		  /* 821530C8h */ case    1:  		/* lis R10, 65 */
		/* 821530C8h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x41);
		/* 821530C8h case    1:*/		return 0x821530CC;
		  /* 821530CCh */ case    2:  		/* li R9, 17476 */
		/* 821530CCh case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x4444);
		/* 821530CCh case    2:*/		return 0x821530D0;
		  /* 821530D0h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821530D0h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821530D0h case    3:*/		return 0x821530D4;
		  /* 821530D4h */ case    4:  		/* stwu R9, <#[R11 + 4]> */
		/* 821530D4h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821530D4h case    4:*/		return 0x821530D8;
		  /* 821530D8h */ case    5:  		/* addi R11, R11, 4 */
		/* 821530D8h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821530D8h case    5:*/		return 0x821530DC;
		  /* 821530DCh */ case    6:  		/* stw R11, <#[R28]> */
		/* 821530DCh case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821530DCh case    6:*/		return 0x821530E0;
		  /* 821530E0h */ case    7:  		/* addi R1, R1, 128 */
		/* 821530E0h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821530E0h case    7:*/		return 0x821530E4;
		  /* 821530E4h */ case    8:  		/* b -794172 */
		/* 821530E4h case    8:*/		return 0x820912A8;
		/* 821530E4h case    8:*/		return 0x821530E8;
	}
	return 0x821530E8;
} // Block from 821530C4h-821530E8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821530E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821530E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821530E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821530E8);
		  /* 821530E8h */ case    0:  		/* mfspr R12, LR */
		/* 821530E8h case    0:*/		regs.R12 = regs.LR;
		/* 821530E8h case    0:*/		return 0x821530EC;
		  /* 821530ECh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821530ECh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821530ECh case    1:*/		return 0x821530F0;
		  /* 821530F0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 821530F0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821530F0h case    2:*/		return 0x821530F4;
		  /* 821530F4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 821530F4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821530F4h case    3:*/		return 0x821530F8;
		  /* 821530F8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 821530F8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821530F8h case    4:*/		return 0x821530FC;
		  /* 821530FCh */ case    5:  		/* lwz R11, <#[R3]> */
		/* 821530FCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821530FCh case    5:*/		return 0x82153100;
		  /* 82153100h */ case    6:  		/* mr R30, R3 */
		/* 82153100h case    6:*/		regs.R30 = regs.R3;
		/* 82153100h case    6:*/		return 0x82153104;
		  /* 82153104h */ case    7:  		/* addi R31, R11, 4 */
		/* 82153104h case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 82153104h case    7:*/		return 0x82153108;
		  /* 82153108h */ case    8:  		/* bl 1130840 */
		/* 82153108h case    8:*/		regs.LR = 0x8215310C; return 0x82267260;
		/* 82153108h case    8:*/		return 0x8215310C;
		  /* 8215310Ch */ case    9:  		/* lwz R11, <#[R31]> */
		/* 8215310Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8215310Ch case    9:*/		return 0x82153110;
		  /* 82153110h */ case   10:  		/* b 8 */
		/* 82153110h case   10:*/		return 0x82153118;
		/* 82153110h case   10:*/		return 0x82153114;
		  /* 82153114h */ case   11:  		/* lwzu R11, <#[R31 + 4]> */
		/* 82153114h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82153114h case   11:*/		return 0x82153118;
	}
	return 0x82153118;
} // Block from 821530E8h-82153118h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82153118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153118);
		  /* 82153118h */ case    0:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82153118h case    0:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82153118h case    0:*/		return 0x8215311C;
		  /* 8215311Ch */ case    1:  		/* bc 4, CR0_EQ, -8 */
		/* 8215311Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x82153114;  }
		/* 8215311Ch case    1:*/		return 0x82153120;
		  /* 82153120h */ case    2:  		/* stw R31, <#[R30]> */
		/* 82153120h case    2:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 82153120h case    2:*/		return 0x82153124;
		  /* 82153124h */ case    3:  		/* addi R1, R1, 112 */
		/* 82153124h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82153124h case    3:*/		return 0x82153128;
		  /* 82153128h */ case    4:  		/* lwz R12, <#[R1 - 8]> */
		/* 82153128h case    4:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82153128h case    4:*/		return 0x8215312C;
		  /* 8215312Ch */ case    5:  		/* mtspr LR, R12 */
		/* 8215312Ch case    5:*/		regs.LR = regs.R12;
		/* 8215312Ch case    5:*/		return 0x82153130;
		  /* 82153130h */ case    6:  		/* ld R30, <#[R1 - 24]> */
		/* 82153130h case    6:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82153130h case    6:*/		return 0x82153134;
		  /* 82153134h */ case    7:  		/* ld R31, <#[R1 - 16]> */
		/* 82153134h case    7:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82153134h case    7:*/		return 0x82153138;
		  /* 82153138h */ case    8:  		/* bclr 20, CR0_LT */
		/* 82153138h case    8:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82153138h case    8:*/		return 0x8215313C;
	}
	return 0x8215313C;
} // Block from 82153118h-8215313Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215313Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215313C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215313C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215313C);
		  /* 8215313Ch */ case    0:  		/* nop */
		/* 8215313Ch case    0:*/		cpu::op::nop();
		/* 8215313Ch case    0:*/		return 0x82153140;
	}
	return 0x82153140;
} // Block from 8215313Ch-82153140h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82153140h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153140);
		  /* 82153140h */ case    0:  		/* mfspr R12, LR */
		/* 82153140h case    0:*/		regs.R12 = regs.LR;
		/* 82153140h case    0:*/		return 0x82153144;
		  /* 82153144h */ case    1:  		/* bl -794356 */
		/* 82153144h case    1:*/		regs.LR = 0x82153148; return 0x82091250;
		/* 82153144h case    1:*/		return 0x82153148;
		  /* 82153148h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82153148h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82153148h case    2:*/		return 0x8215314C;
		  /* 8215314Ch */ case    3:  		/* lis R11, -1 */
		/* 8215314Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8215314Ch case    3:*/		return 0x82153150;
		  /* 82153150h */ case    4:  		/* mr R29, R3 */
		/* 82153150h case    4:*/		regs.R29 = regs.R3;
		/* 82153150h case    4:*/		return 0x82153154;
		  /* 82153154h */ case    5:  		/* ori R11, R11, 260 */
		/* 82153154h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x104);
		/* 82153154h case    5:*/		return 0x82153158;
		  /* 82153158h */ case    6:  		/* mr R26, R6 */
		/* 82153158h case    6:*/		regs.R26 = regs.R6;
		/* 82153158h case    6:*/		return 0x8215315C;
		  /* 8215315Ch */ case    7:  		/* mr R28, R7 */
		/* 8215315Ch case    7:*/		regs.R28 = regs.R7;
		/* 8215315Ch case    7:*/		return 0x82153160;
		  /* 82153160h */ case    8:  		/* cmplw CR6, R4, R11 */
		/* 82153160h case    8:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82153160h case    8:*/		return 0x82153164;
		  /* 82153164h */ case    9:  		/* bc 12, CR6_EQ, 8 */
		/* 82153164h case    9:*/		if ( regs.CR[6].eq ) { return 0x8215316C;  }
		/* 82153164h case    9:*/		return 0x82153168;
		  /* 82153168h */ case   10:  		/* bl 1130744 */
		/* 82153168h case   10:*/		regs.LR = 0x8215316C; return 0x82267260;
		/* 82153168h case   10:*/		return 0x8215316C;
	}
	return 0x8215316C;
} // Block from 82153140h-8215316Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8215316Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215316C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215316C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215316C);
		  /* 8215316Ch */ case    0:  		/* lwz R11, <#[R29]> */
		/* 8215316Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8215316Ch case    0:*/		return 0x82153170;
		  /* 82153170h */ case    1:  		/* li R9, 71 */
		/* 82153170h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x47);
		/* 82153170h case    1:*/		return 0x82153174;
		  /* 82153174h */ case    2:  		/* lwz R10, <#[R28]> */
		/* 82153174h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 82153174h case    2:*/		return 0x82153178;
		  /* 82153178h */ case    3:  		/* li R8, 1 */
		/* 82153178h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82153178h case    3:*/		return 0x8215317C;
		  /* 8215317Ch */ case    4:  		/* addi R11, R11, 4 */
		/* 8215317Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8215317Ch case    4:*/		return 0x82153180;
		  /* 82153180h */ case    5:  		/* addi R31, R10, 4 */
		/* 82153180h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R10,0x4);
		/* 82153180h case    5:*/		return 0x82153184;
		  /* 82153184h */ case    6:  		/* addi R27, R11, 4 */
		/* 82153184h case    6:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R11,0x4);
		/* 82153184h case    6:*/		return 0x82153188;
		  /* 82153188h */ case    7:  		/* lwz R30, <#[R11]> */
		/* 82153188h case    7:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 82153188h case    7:*/		return 0x8215318C;
		  /* 8215318Ch */ case    8:  		/* stw R9, <#[R10]> */
		/* 8215318Ch case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8215318Ch case    8:*/		return 0x82153190;
		  /* 82153190h */ case    9:  		/* mr R11, R30 */
		/* 82153190h case    9:*/		regs.R11 = regs.R30;
		/* 82153190h case    9:*/		return 0x82153194;
		  /* 82153194h */ case   10:  		/* stw R8, <#[R26 + 156]> */
		/* 82153194h case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R26 + 0x0000009C) );
		/* 82153194h case   10:*/		return 0x82153198;
	}
	return 0x82153198;
} // Block from 8215316Ch-82153198h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82153198h
// Function '?CompileHLSL@Compiler@D3DXShader@@QAAXKKHPAVCNode@2@PBD00PAPAUID3DXBuffer@@PAPAUID3DXConstantTable@@PAU_D3DXSHADER_COMPILE_PARAMETERSA@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153198( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153198) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153198);
		  /* 82153198h */ case    0:  		/* rlwimi R11, R30, 12, 21, 23 */
		/* 82153198h case    0:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R11,regs.R30);
		/* 82153198h case    0:*/		return 0x8215319C;
		  /* 8215319Ch */ case    1:  		/* rlwinm. R11, R11, 0, 19, 23 */
		/* 8215319Ch case    1:*/		cpu::op::rlwinm<1,0,19,23>(regs,&regs.R11,regs.R11);
		/* 8215319Ch case    1:*/		return 0x821531A0;
		  /* 821531A0h */ case    2:  		/* bc 12, CR0_EQ, 8 */
		/* 821531A0h case    2:*/		if ( regs.CR[0].eq ) { return 0x821531A8;  }
		/* 821531A0h case    2:*/		return 0x821531A4;
		  /* 821531A4h */ case    3:  		/* bl 1130684 */
		/* 821531A4h case    3:*/		regs.LR = 0x821531A8; return 0x82267260;
		/* 821531A4h case    3:*/		return 0x821531A8;
	}
	return 0x821531A8;
} // Block from 82153198h-821531A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821531A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821531A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821531A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821531A8);
		  /* 821531A8h */ case    0:  		/* lis R11, 88 */
		/* 821531A8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x58);
		/* 821531A8h case    0:*/		return 0x821531AC;
		  /* 821531ACh */ case    1:  		/* li R10, 257 */
		/* 821531ACh case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x101);
		/* 821531ACh case    1:*/		return 0x821531B0;
		  /* 821531B0h */ case    2:  		/* stw R11, <#[R31]> */
		/* 821531B0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821531B0h case    2:*/		return 0x821531B4;
		  /* 821531B4h */ case    3:  		/* li R11, 17 */
		/* 821531B4h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x11);
		/* 821531B4h case    3:*/		return 0x821531B8;
		  /* 821531B8h */ case    4:  		/* stwu R10, <#[R31 + 4]> */
		/* 821531B8h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821531B8h case    4:*/		return 0x821531BC;
		  /* 821531BCh */ case    5:  		/* lis R10, 32 */
		/* 821531BCh case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0x20);
		/* 821531BCh case    5:*/		return 0x821531C0;
		  /* 821531C0h */ case    6:  		/* rlwimi R30, R11, 18, 0, 20 */
		/* 821531C0h case    6:*/		cpu::op::rlwimi<0,18,0,20>(regs,&regs.R30,regs.R11);
		/* 821531C0h case    6:*/		return 0x821531C4;
		  /* 821531C4h */ case    7:  		/* ori R11, R10, 12816 */
		/* 821531C4h case    7:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R10,0x3210);
		/* 821531C4h case    7:*/		return 0x821531C8;
		  /* 821531C8h */ case    8:  		/* stwu R30, <#[R31 + 4]> */
		/* 821531C8h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821531C8h case    8:*/		return 0x821531CC;
		  /* 821531CCh */ case    9:  		/* stwu R11, <#[R31 + 4]> */
		/* 821531CCh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821531CCh case    9:*/		return 0x821531D0;
		  /* 821531D0h */ case   10:  		/* addi R11, R31, 4 */
		/* 821531D0h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 821531D0h case   10:*/		return 0x821531D4;
		  /* 821531D4h */ case   11:  		/* stw R11, <#[R28]> */
		/* 821531D4h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821531D4h case   11:*/		return 0x821531D8;
		  /* 821531D8h */ case   12:  		/* stw R27, <#[R29]> */
		/* 821531D8h case   12:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R29 + 0x00000000) );
		/* 821531D8h case   12:*/		return 0x821531DC;
		  /* 821531DCh */ case   13:  		/* addi R1, R1, 144 */
		/* 821531DCh case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821531DCh case   13:*/		return 0x821531E0;
		  /* 821531E0h */ case   14:  		/* b -794432 */
		/* 821531E0h case   14:*/		return 0x820912A0;
		/* 821531E0h case   14:*/		return 0x821531E4;
		  /* 821531E4h */ case   15:  		/* nop */
		/* 821531E4h case   15:*/		cpu::op::nop();
		/* 821531E4h case   15:*/		return 0x821531E8;
	}
	return 0x821531E8;
} // Block from 821531A8h-821531E8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821531E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821531E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821531E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821531E8);
		  /* 821531E8h */ case    0:  		/* mfspr R12, LR */
		/* 821531E8h case    0:*/		regs.R12 = regs.LR;
		/* 821531E8h case    0:*/		return 0x821531EC;
		  /* 821531ECh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821531ECh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821531ECh case    1:*/		return 0x821531F0;
		  /* 821531F0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 821531F0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821531F0h case    2:*/		return 0x821531F4;
		  /* 821531F4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 821531F4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821531F4h case    3:*/		return 0x821531F8;
		  /* 821531F8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 821531F8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821531F8h case    4:*/		return 0x821531FC;
		  /* 821531FCh */ case    5:  		/* mr R31, R3 */
		/* 821531FCh case    5:*/		regs.R31 = regs.R3;
		/* 821531FCh case    5:*/		return 0x82153200;
		  /* 82153200h */ case    6:  		/* mr R30, R4 */
		/* 82153200h case    6:*/		regs.R30 = regs.R4;
		/* 82153200h case    6:*/		return 0x82153204;
		  /* 82153204h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 82153204h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82153204h case    7:*/		return 0x82153208;
		  /* 82153208h */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 82153208h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82153210;  }
		/* 82153208h case    8:*/		return 0x8215320C;
		  /* 8215320Ch */ case    9:  		/* bl 1130580 */
		/* 8215320Ch case    9:*/		regs.LR = 0x82153210; return 0x82267260;
		/* 8215320Ch case    9:*/		return 0x82153210;
	}
	return 0x82153210;
} // Block from 821531E8h-82153210h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82153210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153210);
		  /* 82153210h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82153210h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82153210h case    0:*/		return 0x82153214;
		  /* 82153214h */ case    1:  		/* cmplw CR6, R30, R11 */
		/* 82153214h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82153214h case    1:*/		return 0x82153218;
		  /* 82153218h */ case    2:  		/* bc 12, CR6_LT, 12 */
		/* 82153218h case    2:*/		if ( regs.CR[6].lt ) { return 0x82153224;  }
		/* 82153218h case    2:*/		return 0x8215321C;
		  /* 8215321Ch */ case    3:  		/* li R3, 0 */
		/* 8215321Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8215321Ch case    3:*/		return 0x82153220;
		  /* 82153220h */ case    4:  		/* b 20 */
		/* 82153220h case    4:*/		return 0x82153234;
		/* 82153220h case    4:*/		return 0x82153224;
	}
	return 0x82153224;
} // Block from 82153210h-82153224h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82153224h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153224( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153224) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153224);
		  /* 82153224h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82153224h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82153224h case    0:*/		return 0x82153228;
		  /* 82153228h */ case    1:  		/* lwz R10, <#[R31]> */
		/* 82153228h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82153228h case    1:*/		return 0x8215322C;
		  /* 8215322Ch */ case    2:  		/* mullw R11, R11, R30 */
		/* 8215322Ch case    2:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8215322Ch case    2:*/		return 0x82153230;
		  /* 82153230h */ case    3:  		/* add R3, R11, R10 */
		/* 82153230h case    3:*/		cpu::op::add<0>(regs,&regs.R3,regs.R11,regs.R10);
		/* 82153230h case    3:*/		return 0x82153234;
	}
	return 0x82153234;
} // Block from 82153224h-82153234h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82153234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153234);
		  /* 82153234h */ case    0:  		/* addi R1, R1, 112 */
		/* 82153234h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82153234h case    0:*/		return 0x82153238;
		  /* 82153238h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82153238h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82153238h case    1:*/		return 0x8215323C;
		  /* 8215323Ch */ case    2:  		/* mtspr LR, R12 */
		/* 8215323Ch case    2:*/		regs.LR = regs.R12;
		/* 8215323Ch case    2:*/		return 0x82153240;
		  /* 82153240h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82153240h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82153240h case    3:*/		return 0x82153244;
		  /* 82153244h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82153244h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82153244h case    4:*/		return 0x82153248;
		  /* 82153248h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82153248h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82153248h case    5:*/		return 0x8215324C;
	}
	return 0x8215324C;
} // Block from 82153234h-8215324Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215324Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215324C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215324C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215324C);
		  /* 8215324Ch */ case    0:  		/* nop */
		/* 8215324Ch case    0:*/		cpu::op::nop();
		/* 8215324Ch case    0:*/		return 0x82153250;
	}
	return 0x82153250;
} // Block from 8215324Ch-82153250h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82153250h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153250);
		  /* 82153250h */ case    0:  		/* mfspr R12, LR */
		/* 82153250h case    0:*/		regs.R12 = regs.LR;
		/* 82153250h case    0:*/		return 0x82153254;
		  /* 82153254h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82153254h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82153254h case    1:*/		return 0x82153258;
		  /* 82153258h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82153258h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82153258h case    2:*/		return 0x8215325C;
		  /* 8215325Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8215325Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8215325Ch case    3:*/		return 0x82153260;
		  /* 82153260h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82153260h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82153260h case    4:*/		return 0x82153264;
		  /* 82153264h */ case    5:  		/* mr R31, R3 */
		/* 82153264h case    5:*/		regs.R31 = regs.R3;
		/* 82153264h case    5:*/		return 0x82153268;
		  /* 82153268h */ case    6:  		/* mr R30, R4 */
		/* 82153268h case    6:*/		regs.R30 = regs.R4;
		/* 82153268h case    6:*/		return 0x8215326C;
		  /* 8215326Ch */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 8215326Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8215326Ch case    7:*/		return 0x82153270;
		  /* 82153270h */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 82153270h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82153278;  }
		/* 82153270h case    8:*/		return 0x82153274;
		  /* 82153274h */ case    9:  		/* bl 1130476 */
		/* 82153274h case    9:*/		regs.LR = 0x82153278; return 0x82267260;
		/* 82153274h case    9:*/		return 0x82153278;
	}
	return 0x82153278;
} // Block from 82153250h-82153278h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82153278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153278);
		  /* 82153278h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82153278h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82153278h case    0:*/		return 0x8215327C;
		  /* 8215327Ch */ case    1:  		/* subfc R11, R11, R30 */
		/* 8215327Ch case    1:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 8215327Ch case    1:*/		return 0x82153280;
		  /* 82153280h */ case    2:  		/* subfe R11, R11, R11 */
		/* 82153280h case    2:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82153280h case    2:*/		return 0x82153284;
		  /* 82153284h */ case    3:  		/* rlwinm R3, R11, 0, 31, 31 */
		/* 82153284h case    3:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R3,regs.R11);
		/* 82153284h case    3:*/		return 0x82153288;
		  /* 82153288h */ case    4:  		/* addi R1, R1, 112 */
		/* 82153288h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82153288h case    4:*/		return 0x8215328C;
		  /* 8215328Ch */ case    5:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215328Ch case    5:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215328Ch case    5:*/		return 0x82153290;
		  /* 82153290h */ case    6:  		/* mtspr LR, R12 */
		/* 82153290h case    6:*/		regs.LR = regs.R12;
		/* 82153290h case    6:*/		return 0x82153294;
		  /* 82153294h */ case    7:  		/* ld R30, <#[R1 - 24]> */
		/* 82153294h case    7:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82153294h case    7:*/		return 0x82153298;
		  /* 82153298h */ case    8:  		/* ld R31, <#[R1 - 16]> */
		/* 82153298h case    8:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82153298h case    8:*/		return 0x8215329C;
		  /* 8215329Ch */ case    9:  		/* bclr 20, CR0_LT */
		/* 8215329Ch case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215329Ch case    9:*/		return 0x821532A0;
	}
	return 0x821532A0;
} // Block from 82153278h-821532A0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821532A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821532A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821532A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821532A0);
		  /* 821532A0h */ case    0:  		/* mfspr R12, LR */
		/* 821532A0h case    0:*/		regs.R12 = regs.LR;
		/* 821532A0h case    0:*/		return 0x821532A4;
		  /* 821532A4h */ case    1:  		/* bl -794696 */
		/* 821532A4h case    1:*/		regs.LR = 0x821532A8; return 0x8209125C;
		/* 821532A4h case    1:*/		return 0x821532A8;
		  /* 821532A8h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 821532A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821532A8h case    2:*/		return 0x821532AC;
		  /* 821532ACh */ case    3:  		/* mr R31, R3 */
		/* 821532ACh case    3:*/		regs.R31 = regs.R3;
		/* 821532ACh case    3:*/		return 0x821532B0;
		  /* 821532B0h */ case    4:  		/* mr R30, R4 */
		/* 821532B0h case    4:*/		regs.R30 = regs.R4;
		/* 821532B0h case    4:*/		return 0x821532B4;
		  /* 821532B4h */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 821532B4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821532B4h case    5:*/		return 0x821532B8;
		  /* 821532B8h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821532B8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821532C0;  }
		/* 821532B8h case    6:*/		return 0x821532BC;
		  /* 821532BCh */ case    7:  		/* bl 1130404 */
		/* 821532BCh case    7:*/		regs.LR = 0x821532C0; return 0x82267260;
		/* 821532BCh case    7:*/		return 0x821532C0;
	}
	return 0x821532C0;
} // Block from 821532A0h-821532C0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821532C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821532C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821532C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821532C0);
		  /* 821532C0h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 821532C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821532C0h case    0:*/		return 0x821532C4;
		  /* 821532C4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821532C4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821532C4h case    1:*/		return 0x821532C8;
		  /* 821532C8h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 821532C8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821532D0;  }
		/* 821532C8h case    2:*/		return 0x821532CC;
		  /* 821532CCh */ case    3:  		/* bl 1130388 */
		/* 821532CCh case    3:*/		regs.LR = 0x821532D0; return 0x82267260;
		/* 821532CCh case    3:*/		return 0x821532D0;
	}
	return 0x821532D0;
} // Block from 821532C0h-821532D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821532D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821532D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821532D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821532D0);
		  /* 821532D0h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821532D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821532D0h case    0:*/		return 0x821532D4;
		  /* 821532D4h */ case    1:  		/* cmplw CR6, R30, R11 */
		/* 821532D4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821532D4h case    1:*/		return 0x821532D8;
		  /* 821532D8h */ case    2:  		/* bc 12, CR6_LT, 156 */
		/* 821532D8h case    2:*/		if ( regs.CR[6].lt ) { return 0x82153374;  }
		/* 821532D8h case    2:*/		return 0x821532DC;
		  /* 821532DCh */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821532DCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821532DCh case    3:*/		return 0x821532E0;
		  /* 821532E0h */ case    4:  		/* bc 12, CR6_EQ, 24 */
		/* 821532E0h case    4:*/		if ( regs.CR[6].eq ) { return 0x821532F8;  }
		/* 821532E0h case    4:*/		return 0x821532E4;
		  /* 821532E4h */ case    5:  		/* lwz R10, <#[R31 + 4]> */
		/* 821532E4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821532E4h case    5:*/		return 0x821532E8;
		  /* 821532E8h */ case    6:  		/* mullw R11, R10, R11 */
		/* 821532E8h case    6:*/		cpu::op::mullw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821532E8h case    6:*/		return 0x821532EC;
		  /* 821532ECh */ case    7:  		/* addi R11, R11, 4095 */
		/* 821532ECh case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFF);
		/* 821532ECh case    7:*/		return 0x821532F0;
		  /* 821532F0h */ case    8:  		/* rlwinm R11, R11, 0, 0, 19 */
		/* 821532F0h case    8:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R11,regs.R11);
		/* 821532F0h case    8:*/		return 0x821532F4;
		  /* 821532F4h */ case    9:  		/* b 8 */
		/* 821532F4h case    9:*/		return 0x821532FC;
		/* 821532F4h case    9:*/		return 0x821532F8;
	}
	return 0x821532F8;
} // Block from 821532D0h-821532F8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821532F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821532F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821532F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821532F8);
		  /* 821532F8h */ case    0:  		/* li R11, 4096 */
		/* 821532F8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1000);
		/* 821532F8h case    0:*/		return 0x821532FC;
	}
	return 0x821532FC;
} // Block from 821532F8h-821532FCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821532FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821532FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821532FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821532FC);
		  /* 821532FCh */ case    0:  		/* addi R10, R30, 1 */
		/* 821532FCh case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x1);
		/* 821532FCh case    0:*/		return 0x82153300;
		  /* 82153300h */ case    1:  		/* b 12 */
		/* 82153300h case    1:*/		return 0x8215330C;
		/* 82153300h case    1:*/		return 0x82153304;
		  /* 82153304h */ case    2:  		/* rlwinm. R11, R11, 1, 0, 30 */
		/* 82153304h case    2:*/		cpu::op::rlwinm<1,1,0,30>(regs,&regs.R11,regs.R11);
		/* 82153304h case    2:*/		return 0x82153308;
		  /* 82153308h */ case    3:  		/* bc 12, CR0_EQ, 120 */
		/* 82153308h case    3:*/		if ( regs.CR[0].eq ) { return 0x82153380;  }
		/* 82153308h case    3:*/		return 0x8215330C;
	}
	return 0x8215330C;
} // Block from 821532FCh-8215330Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215330Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215330C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215330C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215330C);
		  /* 8215330Ch */ case    0:  		/* lwz R9, <#[R31 + 4]> */
		/* 8215330Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000004) );
		/* 8215330Ch case    0:*/		return 0x82153310;
		  /* 82153310h */ case    1:  		/* addi R30, R11, -32 */
		/* 82153310h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFE0);
		/* 82153310h case    1:*/		return 0x82153314;
		  /* 82153314h */ case    2:  		/* mullw R9, R9, R10 */
		/* 82153314h case    2:*/		cpu::op::mullw<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 82153314h case    2:*/		return 0x82153318;
		  /* 82153318h */ case    3:  		/* cmplw CR6, R30, R9 */
		/* 82153318h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R9);
		/* 82153318h case    3:*/		return 0x8215331C;
		  /* 8215331Ch */ case    4:  		/* bc 12, CR6_LT, -24 */
		/* 8215331Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x82153304;  }
		/* 8215331Ch case    4:*/		return 0x82153320;
		  /* 82153320h */ case    5:  		/* lis R4, 9351 */
		/* 82153320h case    5:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 82153320h case    5:*/		return 0x82153324;
		  /* 82153324h */ case    6:  		/* mr R3, R30 */
		/* 82153324h case    6:*/		regs.R3 = regs.R30;
		/* 82153324h case    6:*/		return 0x82153328;
		  /* 82153328h */ case    7:  		/* bl -831784 */
		/* 82153328h case    7:*/		regs.LR = 0x8215332C; return 0x82088200;
		/* 82153328h case    7:*/		return 0x8215332C;
		  /* 8215332Ch */ case    8:  		/* or. R29, R3, R3 */
		/* 8215332Ch case    8:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 8215332Ch case    8:*/		return 0x82153330;
		  /* 82153330h */ case    9:  		/* bc 12, CR0_EQ, 80 */
		/* 82153330h case    9:*/		if ( regs.CR[0].eq ) { return 0x82153380;  }
		/* 82153330h case    9:*/		return 0x82153334;
		  /* 82153334h */ case   10:  		/* lwz R11, <#[R31 + 8]> */
		/* 82153334h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82153334h case   10:*/		return 0x82153338;
		  /* 82153338h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 82153338h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82153338h case   11:*/		return 0x8215333C;
		  /* 8215333Ch */ case   12:  		/* bc 12, CR6_EQ, 36 */
		/* 8215333Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x82153360;  }
		/* 8215333Ch case   12:*/		return 0x82153340;
		  /* 82153340h */ case   13:  		/* lwz R10, <#[R31 + 4]> */
		/* 82153340h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 82153340h case   13:*/		return 0x82153344;
		  /* 82153344h */ case   14:  		/* mr R3, R29 */
		/* 82153344h case   14:*/		regs.R3 = regs.R29;
		/* 82153344h case   14:*/		return 0x82153348;
		  /* 82153348h */ case   15:  		/* lwz R4, <#[R31]> */
		/* 82153348h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82153348h case   15:*/		return 0x8215334C;
		  /* 8215334Ch */ case   16:  		/* mullw R5, R10, R11 */
		/* 8215334Ch case   16:*/		cpu::op::mullw<0>(regs,&regs.R5,regs.R10,regs.R11);
		/* 8215334Ch case   16:*/		return 0x82153350;
		  /* 82153350h */ case   17:  		/* bl -792992 */
		/* 82153350h case   17:*/		regs.LR = 0x82153354; return 0x820919B0;
		/* 82153350h case   17:*/		return 0x82153354;
		  /* 82153354h */ case   18:  		/* lwz R3, <#[R31]> */
		/* 82153354h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 82153354h case   18:*/		return 0x82153358;
		  /* 82153358h */ case   19:  		/* lis R4, 9351 */
		/* 82153358h case   19:*/		cpu::op::lis<0>(regs,&regs.R4,0x2487);
		/* 82153358h case   19:*/		return 0x8215335C;
		  /* 8215335Ch */ case   20:  		/* bl -831524 */
		/* 8215335Ch case   20:*/		regs.LR = 0x82153360; return 0x82088338;
		/* 8215335Ch case   20:*/		return 0x82153360;
	}
	return 0x82153360;
} // Block from 8215330Ch-82153360h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82153360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153360);
		  /* 82153360h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 82153360h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 82153360h case    0:*/		return 0x82153364;
		  /* 82153364h */ case    1:  		/* stw R29, <#[R31]> */
		/* 82153364h case    1:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 82153364h case    1:*/		return 0x82153368;
		  /* 82153368h */ case    2:  		/* twi 6, R11, 0 */
		/* 82153368h case    2:*/		cpu::op::tw<6>(regs, 0x82153368, regs.R11, 0x00000000);
		/* 82153368h case    2:*/		return 0x8215336C;
		  /* 8215336Ch */ case    3:  		/* divwu R11, R30, R11 */
		/* 8215336Ch case    3:*/		cpu::op::divwu<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 8215336Ch case    3:*/		return 0x82153370;
		  /* 82153370h */ case    4:  		/* stw R11, <#[R31 + 8]> */
		/* 82153370h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82153370h case    4:*/		return 0x82153374;
	}
	return 0x82153374;
} // Block from 82153360h-82153374h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82153374h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153374( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153374) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153374);
		  /* 82153374h */ case    0:  		/* li R3, 1 */
		/* 82153374h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82153374h case    0:*/		return 0x82153378;
		  /* 82153378h */ case    1:  		/* addi R1, R1, 112 */
		/* 82153378h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82153378h case    1:*/		return 0x8215337C;
		  /* 8215337Ch */ case    2:  		/* b -794832 */
		/* 8215337Ch case    2:*/		return 0x820912AC;
		/* 8215337Ch case    2:*/		return 0x82153380;
	}
	return 0x82153380;
} // Block from 82153374h-82153380h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82153380h
// Function '?CompileASM@Compiler@D3DXShader@@QAAXPAVCNode@2@PAUID3DXBuffer@@KPAPAU4@PAU_D3DXSHADER_COMPILE_PARAMETERSA@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153380( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153380) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153380);
		  /* 82153380h */ case    0:  		/* li R3, 0 */
		/* 82153380h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82153380h case    0:*/		return 0x82153384;
		  /* 82153384h */ case    1:  		/* b -12 */
		/* 82153384h case    1:*/		return 0x82153378;
		/* 82153384h case    1:*/		return 0x82153388;
	}
	return 0x82153388;
} // Block from 82153380h-82153388h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82153388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153388);
		  /* 82153388h */ case    0:  		/* mfspr R12, LR */
		/* 82153388h case    0:*/		regs.R12 = regs.LR;
		/* 82153388h case    0:*/		return 0x8215338C;
		  /* 8215338Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8215338Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215338Ch case    1:*/		return 0x82153390;
		  /* 82153390h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82153390h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82153390h case    2:*/		return 0x82153394;
		  /* 82153394h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82153394h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82153394h case    3:*/		return 0x82153398;
		  /* 82153398h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82153398h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82153398h case    4:*/		return 0x8215339C;
		  /* 8215339Ch */ case    5:  		/* mr R31, R3 */
		/* 8215339Ch case    5:*/		regs.R31 = regs.R3;
		/* 8215339Ch case    5:*/		return 0x821533A0;
		  /* 821533A0h */ case    6:  		/* mr R30, R4 */
		/* 821533A0h case    6:*/		regs.R30 = regs.R4;
		/* 821533A0h case    6:*/		return 0x821533A4;
		  /* 821533A4h */ case    7:  		/* cmplwi CR6, R3, 0 */
		/* 821533A4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821533A4h case    7:*/		return 0x821533A8;
		  /* 821533A8h */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 821533A8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821533B0;  }
		/* 821533A8h case    8:*/		return 0x821533AC;
		  /* 821533ACh */ case    9:  		/* bl 1130164 */
		/* 821533ACh case    9:*/		regs.LR = 0x821533B0; return 0x82267260;
		/* 821533ACh case    9:*/		return 0x821533B0;
	}
	return 0x821533B0;
} // Block from 82153388h-821533B0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821533B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821533B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821533B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821533B0);
		  /* 821533B0h */ case    0:  		/* mr R4, R30 */
		/* 821533B0h case    0:*/		regs.R4 = regs.R30;
		/* 821533B0h case    0:*/		return 0x821533B4;
		  /* 821533B4h */ case    1:  		/* mr R3, R31 */
		/* 821533B4h case    1:*/		regs.R3 = regs.R31;
		/* 821533B4h case    1:*/		return 0x821533B8;
		  /* 821533B8h */ case    2:  		/* bl -360 */
		/* 821533B8h case    2:*/		regs.LR = 0x821533BC; return 0x82153250;
		/* 821533B8h case    2:*/		return 0x821533BC;
		  /* 821533BCh */ case    3:  		/* cmpwi CR0, R3, 0 */
		/* 821533BCh case    3:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821533BCh case    3:*/		return 0x821533C0;
		  /* 821533C0h */ case    4:  		/* mr R4, R30 */
		/* 821533C0h case    4:*/		regs.R4 = regs.R30;
		/* 821533C0h case    4:*/		return 0x821533C4;
		  /* 821533C4h */ case    5:  		/* mr R3, R31 */
		/* 821533C4h case    5:*/		regs.R3 = regs.R31;
		/* 821533C4h case    5:*/		return 0x821533C8;
		  /* 821533C8h */ case    6:  		/* bc 4, CR0_EQ, 40 */
		/* 821533C8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821533F0;  }
		/* 821533C8h case    6:*/		return 0x821533CC;
		  /* 821533CCh */ case    7:  		/* bl -300 */
		/* 821533CCh case    7:*/		regs.LR = 0x821533D0; return 0x821532A0;
		/* 821533CCh case    7:*/		return 0x821533D0;
		  /* 821533D0h */ case    8:  		/* cmpwi CR0, R3, 0 */
		/* 821533D0h case    8:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821533D0h case    8:*/		return 0x821533D4;
		  /* 821533D4h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 821533D4h case    9:*/		if ( regs.CR[0].eq ) { return 0x821533E8;  }
		/* 821533D4h case    9:*/		return 0x821533D8;
		  /* 821533D8h */ case   10:  		/* mr R4, R30 */
		/* 821533D8h case   10:*/		regs.R4 = regs.R30;
		/* 821533D8h case   10:*/		return 0x821533DC;
		  /* 821533DCh */ case   11:  		/* mr R3, R31 */
		/* 821533DCh case   11:*/		regs.R3 = regs.R31;
		/* 821533DCh case   11:*/		return 0x821533E0;
		  /* 821533E0h */ case   12:  		/* bl -504 */
		/* 821533E0h case   12:*/		regs.LR = 0x821533E4; return 0x821531E8;
		/* 821533E0h case   12:*/		return 0x821533E4;
		  /* 821533E4h */ case   13:  		/* b 36 */
		/* 821533E4h case   13:*/		return 0x82153408;
		/* 821533E4h case   13:*/		return 0x821533E8;
	}
	return 0x821533E8;
} // Block from 821533B0h-821533E8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821533E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821533E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821533E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821533E8);
		  /* 821533E8h */ case    0:  		/* li R3, 0 */
		/* 821533E8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821533E8h case    0:*/		return 0x821533EC;
		  /* 821533ECh */ case    1:  		/* b 28 */
		/* 821533ECh case    1:*/		return 0x82153408;
		/* 821533ECh case    1:*/		return 0x821533F0;
	}
	return 0x821533F0;
} // Block from 821533E8h-821533F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821533F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821533F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821533F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821533F0);
		  /* 821533F0h */ case    0:  		/* bl -520 */
		/* 821533F0h case    0:*/		regs.LR = 0x821533F4; return 0x821531E8;
		/* 821533F0h case    0:*/		return 0x821533F4;
		  /* 821533F4h */ case    1:  		/* li R4, 0 */
		/* 821533F4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821533F4h case    1:*/		return 0x821533F8;
		  /* 821533F8h */ case    2:  		/* lwz R5, <#[R31 + 4]> */
		/* 821533F8h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000004) );
		/* 821533F8h case    2:*/		return 0x821533FC;
		  /* 821533FCh */ case    3:  		/* mr R30, R3 */
		/* 821533FCh case    3:*/		regs.R30 = regs.R3;
		/* 821533FCh case    3:*/		return 0x82153400;
		  /* 82153400h */ case    4:  		/* bl -794816 */
		/* 82153400h case    4:*/		regs.LR = 0x82153404; return 0x82091340;
		/* 82153400h case    4:*/		return 0x82153404;
		  /* 82153404h */ case    5:  		/* mr R3, R30 */
		/* 82153404h case    5:*/		regs.R3 = regs.R30;
		/* 82153404h case    5:*/		return 0x82153408;
	}
	return 0x82153408;
} // Block from 821533F0h-82153408h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82153408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153408);
		  /* 82153408h */ case    0:  		/* addi R1, R1, 112 */
		/* 82153408h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82153408h case    0:*/		return 0x8215340C;
		  /* 8215340Ch */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8215340Ch case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8215340Ch case    1:*/		return 0x82153410;
		  /* 82153410h */ case    2:  		/* mtspr LR, R12 */
		/* 82153410h case    2:*/		regs.LR = regs.R12;
		/* 82153410h case    2:*/		return 0x82153414;
		  /* 82153414h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 82153414h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82153414h case    3:*/		return 0x82153418;
		  /* 82153418h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82153418h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82153418h case    4:*/		return 0x8215341C;
		  /* 8215341Ch */ case    5:  		/* bclr 20, CR0_LT */
		/* 8215341Ch case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8215341Ch case    5:*/		return 0x82153420;
	}
	return 0x82153420;
} // Block from 82153408h-82153420h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82153420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153420);
		  /* 82153420h */ case    0:  		/* mfspr R12, LR */
		/* 82153420h case    0:*/		regs.R12 = regs.LR;
		/* 82153420h case    0:*/		return 0x82153424;
		  /* 82153424h */ case    1:  		/* bl -795084 */
		/* 82153424h case    1:*/		regs.LR = 0x82153428; return 0x82091258;
		/* 82153424h case    1:*/		return 0x82153428;
		  /* 82153428h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82153428h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82153428h case    2:*/		return 0x8215342C;
		  /* 8215342Ch */ case    3:  		/* mr R11, R3 */
		/* 8215342Ch case    3:*/		regs.R11 = regs.R3;
		/* 8215342Ch case    3:*/		return 0x82153430;
		  /* 82153430h */ case    4:  		/* mr R29, R4 */
		/* 82153430h case    4:*/		regs.R29 = regs.R4;
		/* 82153430h case    4:*/		return 0x82153434;
		  /* 82153434h */ case    5:  		/* rlwimi R11, R3, 12, 21, 23 */
		/* 82153434h case    5:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R11,regs.R3);
		/* 82153434h case    5:*/		return 0x82153438;
		  /* 82153438h */ case    6:  		/* mr R28, R5 */
		/* 82153438h case    6:*/		regs.R28 = regs.R5;
		/* 82153438h case    6:*/		return 0x8215343C;
		  /* 8215343Ch */ case    7:  		/* rlwinm R11, R11, 24, 27, 31 */
		/* 8215343Ch case    7:*/		cpu::op::rlwinm<0,24,27,31>(regs,&regs.R11,regs.R11);
		/* 8215343Ch case    7:*/		return 0x82153440;
		  /* 82153440h */ case    8:  		/* rlwinm R31, R3, 0, 21, 31 */
		/* 82153440h case    8:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R31,regs.R3);
		/* 82153440h case    8:*/		return 0x82153444;
		  /* 82153444h */ case    9:  		/* cmplwi CR6, R11, 11 */
		/* 82153444h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000B);
		/* 82153444h case    9:*/		return 0x82153448;
		  /* 82153448h */ case   10:  		/* bc 12, CR6_EQ, 36 */
		/* 82153448h case   10:*/		if ( regs.CR[6].eq ) { return 0x8215346C;  }
		/* 82153448h case   10:*/		return 0x8215344C;
		  /* 8215344Ch */ case   11:  		/* cmplwi CR6, R11, 12 */
		/* 8215344Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000C);
		/* 8215344Ch case   11:*/		return 0x82153450;
		  /* 82153450h */ case   12:  		/* bc 12, CR6_EQ, 20 */
		/* 82153450h case   12:*/		if ( regs.CR[6].eq ) { return 0x82153464;  }
		/* 82153450h case   12:*/		return 0x82153454;
		  /* 82153454h */ case   13:  		/* cmplwi CR6, R11, 13 */
		/* 82153454h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000D);
		/* 82153454h case   13:*/		return 0x82153458;
		  /* 82153458h */ case   14:  		/* bc 4, CR6_EQ, 24 */
		/* 82153458h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82153470;  }
		/* 82153458h case   14:*/		return 0x8215345C;
		  /* 8215345Ch */ case   15:  		/* addi R31, R31, 6144 */
		/* 8215345Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1800);
		/* 8215345Ch case   15:*/		return 0x82153460;
		  /* 82153460h */ case   16:  		/* b 16 */
		/* 82153460h case   16:*/		return 0x82153470;
		/* 82153460h case   16:*/		return 0x82153464;
	}
	return 0x82153464;
} // Block from 82153420h-82153464h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82153464h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153464( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153464) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153464);
		  /* 82153464h */ case    0:  		/* addi R31, R31, 4096 */
		/* 82153464h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1000);
		/* 82153464h case    0:*/		return 0x82153468;
		  /* 82153468h */ case    1:  		/* b 8 */
		/* 82153468h case    1:*/		return 0x82153470;
		/* 82153468h case    1:*/		return 0x8215346C;
	}
	return 0x8215346C;
} // Block from 82153464h-8215346Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215346Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215346C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215346C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215346C);
		  /* 8215346Ch */ case    0:  		/* addi R31, R31, 2048 */
		/* 8215346Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x800);
		/* 8215346Ch case    0:*/		return 0x82153470;
	}
	return 0x82153470;
} // Block from 8215346Ch-82153470h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82153470h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153470( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153470) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153470);
		  /* 82153470h */ case    0:  		/* cmplwi CR6, R11, 11 */
		/* 82153470h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000B);
		/* 82153470h case    0:*/		return 0x82153474;
		  /* 82153474h */ case    1:  		/* bc 12, CR6_LT, 16 */
		/* 82153474h case    1:*/		if ( regs.CR[6].lt ) { return 0x82153484;  }
		/* 82153474h case    1:*/		return 0x82153478;
		  /* 82153478h */ case    2:  		/* cmplwi CR6, R11, 13 */
		/* 82153478h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000D);
		/* 82153478h case    2:*/		return 0x8215347C;
		  /* 8215347Ch */ case    3:  		/* bc 12, CR6_GT, 8 */
		/* 8215347Ch case    3:*/		if ( regs.CR[6].gt ) { return 0x82153484;  }
		/* 8215347Ch case    3:*/		return 0x82153480;
		  /* 82153480h */ case    4:  		/* li R11, 2 */
		/* 82153480h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 82153480h case    4:*/		return 0x82153484;
	}
	return 0x82153484;
} // Block from 82153470h-82153484h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82153484h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153484( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153484) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153484);
		  /* 82153484h */ case    0:  		/* cmplwi CR6, R11, 1 */
		/* 82153484h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 82153484h case    0:*/		return 0x82153488;
	}
	return 0x82153488;
} // Block from 82153484h-82153488h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82153488h
// Function '?CompileToMicrocode@D3DXShader@@YAJKKHPAVCNode@1@PBD00PAPAUID3DXBuffer@@PAPAUID3DXConstantTable@@PAXP6AX4H0K1@ZPAU_D3DXSHADER_COMPILE_PARAMETERSA@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153488);
		  /* 82153488h */ case    0:  		/* bc 12, CR6_LT, 256 */
		/* 82153488h case    0:*/		if ( regs.CR[6].lt ) { return 0x82153588;  }
		/* 82153488h case    0:*/		return 0x8215348C;
		  /* 8215348Ch */ case    1:  		/* bc 12, CR6_EQ, 168 */
		/* 8215348Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82153534;  }
		/* 8215348Ch case    1:*/		return 0x82153490;
		  /* 82153490h */ case    2:  		/* cmplwi CR6, R11, 3 */
		/* 82153490h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 82153490h case    2:*/		return 0x82153494;
		  /* 82153494h */ case    3:  		/* bc 12, CR6_LT, 152 */
		/* 82153494h case    3:*/		if ( regs.CR[6].lt ) { return 0x8215352C;  }
		/* 82153494h case    3:*/		return 0x82153498;
		  /* 82153498h */ case    4:  		/* bc 12, CR6_EQ, 80 */
		/* 82153498h case    4:*/		if ( regs.CR[6].eq ) { return 0x821534E8;  }
		/* 82153498h case    4:*/		return 0x8215349C;
		  /* 8215349Ch */ case    5:  		/* cmplwi CR6, R11, 7 */
		/* 8215349Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000007);
		/* 8215349Ch case    5:*/		return 0x821534A0;
		  /* 821534A0h */ case    6:  		/* bc 12, CR6_EQ, 64 */
		/* 821534A0h case    6:*/		if ( regs.CR[6].eq ) { return 0x821534E0;  }
		/* 821534A0h case    6:*/		return 0x821534A4;
		  /* 821534A4h */ case    7:  		/* cmplwi CR6, R11, 14 */
		/* 821534A4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000000E);
		/* 821534A4h case    7:*/		return 0x821534A8;
		  /* 821534A8h */ case    8:  		/* bc 12, CR6_EQ, 48 */
		/* 821534A8h case    8:*/		if ( regs.CR[6].eq ) { return 0x821534D8;  }
		/* 821534A8h case    8:*/		return 0x821534AC;
		  /* 821534ACh */ case    9:  		/* cmplwi CR6, R11, 17 */
		/* 821534ACh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000011);
		/* 821534ACh case    9:*/		return 0x821534B0;
		  /* 821534B0h */ case   10:  		/* bc 4, CR6_EQ, 208 */
		/* 821534B0h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82153580;  }
		/* 821534B0h case   10:*/		return 0x821534B4;
		  /* 821534B4h */ case   11:  		/* cmplwi CR6, R31, 1 */
		/* 821534B4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000001);
		/* 821534B4h case   11:*/		return 0x821534B8;
		  /* 821534B8h */ case   12:  		/* bc 12, CR6_LT, 16 */
		/* 821534B8h case   12:*/		if ( regs.CR[6].lt ) { return 0x821534C8;  }
		/* 821534B8h case   12:*/		return 0x821534BC;
		  /* 821534BCh */ case   13:  		/* bc 4, CR6_EQ, 20 */
		/* 821534BCh case   13:*/		if ( !regs.CR[6].eq ) { return 0x821534D0;  }
		/* 821534BCh case   13:*/		return 0x821534C0;
		  /* 821534C0h */ case   14:  		/* li R11, 21 */
		/* 821534C0h case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x15);
		/* 821534C0h case   14:*/		return 0x821534C4;
		  /* 821534C4h */ case   15:  		/* b 8 */
		/* 821534C4h case   15:*/		return 0x821534CC;
		/* 821534C4h case   15:*/		return 0x821534C8;
	}
	return 0x821534C8;
} // Block from 82153488h-821534C8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821534C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821534C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821534C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821534C8);
		  /* 821534C8h */ case    0:  		/* li R11, 22 */
		/* 821534C8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x16);
		/* 821534C8h case    0:*/		return 0x821534CC;
	}
	return 0x821534CC;
} // Block from 821534C8h-821534CCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821534CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821534CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821534CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821534CC);
		  /* 821534CCh */ case    0:  		/* stw R11, <#[R28]> */
		/* 821534CCh case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821534CCh case    0:*/		return 0x821534D0;
	}
	return 0x821534D0;
} // Block from 821534CCh-821534D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821534D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821534D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821534D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821534D0);
		  /* 821534D0h */ case    0:  		/* li R31, 0 */
		/* 821534D0h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821534D0h case    0:*/		return 0x821534D4;
		  /* 821534D4h */ case    1:  		/* b 188 */
		/* 821534D4h case    1:*/		return 0x82153590;
		/* 821534D4h case    1:*/		return 0x821534D8;
	}
	return 0x821534D8;
} // Block from 821534D0h-821534D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821534D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821534D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821534D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821534D8);
		  /* 821534D8h */ case    0:  		/* li R11, 0 */
		/* 821534D8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821534D8h case    0:*/		return 0x821534DC;
		  /* 821534DCh */ case    1:  		/* b 176 */
		/* 821534DCh case    1:*/		return 0x8215358C;
		/* 821534DCh case    1:*/		return 0x821534E0;
	}
	return 0x821534E0;
} // Block from 821534D8h-821534E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821534E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821534E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821534E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821534E0);
		  /* 821534E0h */ case    0:  		/* li R11, 2 */
		/* 821534E0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x2);
		/* 821534E0h case    0:*/		return 0x821534E4;
		  /* 821534E4h */ case    1:  		/* b 168 */
		/* 821534E4h case    1:*/		return 0x8215358C;
		/* 821534E4h case    1:*/		return 0x821534E8;
	}
	return 0x821534E8;
} // Block from 821534E0h-821534E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821534E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821534E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821534E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821534E8);
		  /* 821534E8h */ case    0:  		/* addi R11, R31, 41 */
		/* 821534E8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x29);
		/* 821534E8h case    0:*/		return 0x821534EC;
		  /* 821534ECh */ case    1:  		/* rlwinm R30, R11, 2, 0, 29 */
		/* 821534ECh case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R11);
		/* 821534ECh case    1:*/		return 0x821534F0;
		  /* 821534F0h */ case    2:  		/* lwzx R11, <#[R30 + R29]> */
		/* 821534F0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R29 + 0x00000000) );
		/* 821534F0h case    2:*/		return 0x821534F4;
		  /* 821534F4h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821534F4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821534F4h case    3:*/		return 0x821534F8;
		  /* 821534F8h */ case    4:  		/* bc 12, CR6_EQ, 44 */
		/* 821534F8h case    4:*/		if ( regs.CR[6].eq ) { return 0x82153524;  }
		/* 821534F8h case    4:*/		return 0x821534FC;
		  /* 821534FCh */ case    5:  		/* lis R11, -1 */
		/* 821534FCh case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 821534FCh case    5:*/		return 0x82153500;
		  /* 82153500h */ case    6:  		/* lwz R10, <#[R29]> */
		/* 82153500h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 82153500h case    6:*/		return 0x82153504;
		  /* 82153504h */ case    7:  		/* ori R11, R11, 260 */
		/* 82153504h case    7:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x104);
		/* 82153504h case    7:*/		return 0x82153508;
		  /* 82153508h */ case    8:  		/* cmplw CR6, R10, R11 */
		/* 82153508h case    8:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82153508h case    8:*/		return 0x8215350C;
		  /* 8215350Ch */ case    9:  		/* bc 12, CR6_LT, 8 */
		/* 8215350Ch case    9:*/		if ( regs.CR[6].lt ) { return 0x82153514;  }
		/* 8215350Ch case    9:*/		return 0x82153510;
		  /* 82153510h */ case   10:  		/* bl 1129808 */
		/* 82153510h case   10:*/		regs.LR = 0x82153514; return 0x82267260;
		/* 82153510h case   10:*/		return 0x82153514;
	}
	return 0x82153514;
} // Block from 821534E8h-82153514h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82153514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153514);
		  /* 82153514h */ case    0:  		/* li R11, 4 */
		/* 82153514h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 82153514h case    0:*/		return 0x82153518;
		  /* 82153518h */ case    1:  		/* stw R11, <#[R28]> */
		/* 82153518h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82153518h case    1:*/		return 0x8215351C;
		  /* 8215351Ch */ case    2:  		/* lwzx R31, <#[R30 + R29]> */
		/* 8215351Ch case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + regs.R29 + 0x00000000) );
		/* 8215351Ch case    2:*/		return 0x82153520;
		  /* 82153520h */ case    3:  		/* b 112 */
		/* 82153520h case    3:*/		return 0x82153590;
		/* 82153520h case    3:*/		return 0x82153524;
	}
	return 0x82153524;
} // Block from 82153514h-82153524h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82153524h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153524( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153524) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153524);
		  /* 82153524h */ case    0:  		/* li R11, 17 */
		/* 82153524h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x11);
		/* 82153524h case    0:*/		return 0x82153528;
		  /* 82153528h */ case    1:  		/* b 100 */
		/* 82153528h case    1:*/		return 0x8215358C;
		/* 82153528h case    1:*/		return 0x8215352C;
	}
	return 0x8215352C;
} // Block from 82153524h-8215352Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215352Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215352C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215352C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215352C);
		  /* 8215352Ch */ case    0:  		/* li R11, 1 */
		/* 8215352Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8215352Ch case    0:*/		return 0x82153530;
		  /* 82153530h */ case    1:  		/* b 92 */
		/* 82153530h case    1:*/		return 0x8215358C;
		/* 82153530h case    1:*/		return 0x82153534;
	}
	return 0x82153534;
} // Block from 8215352Ch-82153534h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82153534h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153534( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153534) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153534);
		  /* 82153534h */ case    0:  		/* addi R10, R31, 4 */
		/* 82153534h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x4);
		/* 82153534h case    0:*/		return 0x82153538;
		  /* 82153538h */ case    1:  		/* rlwinm R11, R31, 3, 0, 28 */
		/* 82153538h case    1:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R31);
		/* 82153538h case    1:*/		return 0x8215353C;
		  /* 8215353Ch */ case    2:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 8215353Ch case    2:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 8215353Ch case    2:*/		return 0x82153540;
		  /* 82153540h */ case    3:  		/* add R11, R11, R29 */
		/* 82153540h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 82153540h case    3:*/		return 0x82153544;
		  /* 82153544h */ case    4:  		/* lwzx R10, <#[R10 + R29]> */
		/* 82153544h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R29 + 0x00000000) );
		/* 82153544h case    4:*/		return 0x82153548;
		  /* 82153548h */ case    5:  		/* stw R10, <#[R28]> */
		/* 82153548h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 82153548h case    5:*/		return 0x8215354C;
		  /* 8215354Ch */ case    6:  		/* lwz R31, <#[R11 + 28]> */
		/* 8215354Ch case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x0000001C) );
		/* 8215354Ch case    6:*/		return 0x82153550;
		  /* 82153550h */ case    7:  		/* cmplwi CR6, R31, 16 */
		/* 82153550h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000010);
		/* 82153550h case    7:*/		return 0x82153554;
		  /* 82153554h */ case    8:  		/* bc 12, CR6_LT, 8 */
		/* 82153554h case    8:*/		if ( regs.CR[6].lt ) { return 0x8215355C;  }
		/* 82153554h case    8:*/		return 0x82153558;
		  /* 82153558h */ case    9:  		/* bl 1129736 */
		/* 82153558h case    9:*/		regs.LR = 0x8215355C; return 0x82267260;
		/* 82153558h case    9:*/		return 0x8215355C;
	}
	return 0x8215355C;
} // Block from 82153534h-8215355Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215355Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215355C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215355C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215355C);
		  /* 8215355Ch */ case    0:  		/* lwz R11, <#[R28]> */
		/* 8215355Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8215355Ch case    0:*/		return 0x82153560;
		  /* 82153560h */ case    1:  		/* cmpwi CR6, R11, 18 */
		/* 82153560h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000012);
		/* 82153560h case    1:*/		return 0x82153564;
		  /* 82153564h */ case    2:  		/* bc 12, CR6_EQ, 44 */
		/* 82153564h case    2:*/		if ( regs.CR[6].eq ) { return 0x82153590;  }
		/* 82153564h case    2:*/		return 0x82153568;
		  /* 82153568h */ case    3:  		/* cmpwi CR6, R11, 19 */
		/* 82153568h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000013);
		/* 82153568h case    3:*/		return 0x8215356C;
		  /* 8215356Ch */ case    4:  		/* bc 12, CR6_EQ, 36 */
		/* 8215356Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x82153590;  }
		/* 8215356Ch case    4:*/		return 0x82153570;
		  /* 82153570h */ case    5:  		/* cmpwi CR6, R11, 17 */
		/* 82153570h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000011);
		/* 82153570h case    5:*/		return 0x82153574;
		  /* 82153574h */ case    6:  		/* bc 12, CR6_EQ, 28 */
		/* 82153574h case    6:*/		if ( regs.CR[6].eq ) { return 0x82153590;  }
		/* 82153574h case    6:*/		return 0x82153578;
		  /* 82153578h */ case    7:  		/* cmpwi CR6, R11, 12 */
		/* 82153578h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000C);
		/* 82153578h case    7:*/		return 0x8215357C;
		  /* 8215357Ch */ case    8:  		/* bc 12, CR6_EQ, 20 */
		/* 8215357Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x82153590;  }
		/* 8215357Ch case    8:*/		return 0x82153580;
	}
	return 0x82153580;
} // Block from 8215355Ch-82153580h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82153580h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153580);
		  /* 82153580h */ case    0:  		/* bl 1129696 */
		/* 82153580h case    0:*/		regs.LR = 0x82153584; return 0x82267260;
		/* 82153580h case    0:*/		return 0x82153584;
		  /* 82153584h */ case    1:  		/* b 12 */
		/* 82153584h case    1:*/		return 0x82153590;
		/* 82153584h case    1:*/		return 0x82153588;
	}
	return 0x82153588;
} // Block from 82153580h-82153588h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82153588h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153588( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153588) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153588);
		  /* 82153588h */ case    0:  		/* li R11, 4 */
		/* 82153588h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 82153588h case    0:*/		return 0x8215358C;
	}
	return 0x8215358C;
} // Block from 82153588h-8215358Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215358Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215358C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215358C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215358C);
		  /* 8215358Ch */ case    0:  		/* stw R11, <#[R28]> */
		/* 8215358Ch case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8215358Ch case    0:*/		return 0x82153590;
	}
	return 0x82153590;
} // Block from 8215358Ch-82153590h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82153590h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153590( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153590) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153590);
		  /* 82153590h */ case    0:  		/* mr R3, R31 */
		/* 82153590h case    0:*/		regs.R3 = regs.R31;
		/* 82153590h case    0:*/		return 0x82153594;
		  /* 82153594h */ case    1:  		/* addi R1, R1, 128 */
		/* 82153594h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82153594h case    1:*/		return 0x82153598;
		  /* 82153598h */ case    2:  		/* b -795376 */
		/* 82153598h case    2:*/		return 0x820912A8;
		/* 82153598h case    2:*/		return 0x8215359C;
		  /* 8215359Ch */ case    3:  		/* nop */
		/* 8215359Ch case    3:*/		cpu::op::nop();
		/* 8215359Ch case    3:*/		return 0x821535A0;
	}
	return 0x821535A0;
} // Block from 82153590h-821535A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821535A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821535A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821535A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821535A0);
		  /* 821535A0h */ case    0:  		/* mfspr R12, LR */
		/* 821535A0h case    0:*/		regs.R12 = regs.LR;
		/* 821535A0h case    0:*/		return 0x821535A4;
		  /* 821535A4h */ case    1:  		/* bl -795468 */
		/* 821535A4h case    1:*/		regs.LR = 0x821535A8; return 0x82091258;
		/* 821535A4h case    1:*/		return 0x821535A8;
		  /* 821535A8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821535A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821535A8h case    2:*/		return 0x821535AC;
		  /* 821535ACh */ case    3:  		/* mr R9, R3 */
		/* 821535ACh case    3:*/		regs.R9 = regs.R3;
		/* 821535ACh case    3:*/		return 0x821535B0;
		  /* 821535B0h */ case    4:  		/* lwz R30, <#[R5]> */
		/* 821535B0h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R5 + 0x00000000) );
		/* 821535B0h case    4:*/		return 0x821535B4;
		  /* 821535B4h */ case    5:  		/* mr R10, R3 */
		/* 821535B4h case    5:*/		regs.R10 = regs.R3;
		/* 821535B4h case    5:*/		return 0x821535B8;
		  /* 821535B8h */ case    6:  		/* rlwimi R9, R3, 12, 21, 23 */
		/* 821535B8h case    6:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R9,regs.R3);
		/* 821535B8h case    6:*/		return 0x821535BC;
		  /* 821535BCh */ case    7:  		/* rlwinm. R7, R3, 0, 11, 11 */
		/* 821535BCh case    7:*/		cpu::op::rlwinm<1,0,11,11>(regs,&regs.R7,regs.R3);
		/* 821535BCh case    7:*/		return 0x821535C0;
		  /* 821535C0h */ case    8:  		/* rlwinm R11, R3, 8, 28, 31 */
		/* 821535C0h case    8:*/		cpu::op::rlwinm<0,8,28,31>(regs,&regs.R11,regs.R3);
		/* 821535C0h case    8:*/		return 0x821535C4;
		  /* 821535C4h */ case    9:  		/* rlwinm R29, R3, 0, 12, 15 */
		/* 821535C4h case    9:*/		cpu::op::rlwinm<0,0,12,15>(regs,&regs.R29,regs.R3);
		/* 821535C4h case    9:*/		return 0x821535C8;
		  /* 821535C8h */ case   10:  		/* mr R8, R4 */
		/* 821535C8h case   10:*/		regs.R8 = regs.R4;
		/* 821535C8h case   10:*/		return 0x821535CC;
		  /* 821535CCh */ case   11:  		/* rlwinm R3, R9, 24, 27, 31 */
		/* 821535CCh case   11:*/		cpu::op::rlwinm<0,24,27,31>(regs,&regs.R3,regs.R9);
		/* 821535CCh case   11:*/		return 0x821535D0;
		  /* 821535D0h */ case   12:  		/* mr R28, R5 */
		/* 821535D0h case   12:*/		regs.R28 = regs.R5;
		/* 821535D0h case   12:*/		return 0x821535D4;
		  /* 821535D4h */ case   13:  		/* rlwinm R4, R10, 0, 21, 31 */
		/* 821535D4h case   13:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R4,regs.R10);
		/* 821535D4h case   13:*/		return 0x821535D8;
		  /* 821535D8h */ case   14:  		/* li R9, 0 */
		/* 821535D8h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821535D8h case   14:*/		return 0x821535DC;
		  /* 821535DCh */ case   15:  		/* bc 12, CR0_EQ, 8 */
		/* 821535DCh case   15:*/		if ( regs.CR[0].eq ) { return 0x821535E4;  }
		/* 821535DCh case   15:*/		return 0x821535E0;
		  /* 821535E0h */ case   16:  		/* li R9, 256 */
		/* 821535E0h case   16:*/		cpu::op::li<0>(regs,&regs.R9,0x100);
		/* 821535E0h case   16:*/		return 0x821535E4;
	}
	return 0x821535E4;
} // Block from 821535A0h-821535E4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821535E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821535E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821535E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821535E4);
		  /* 821535E4h */ case    0:  		/* li R10, 0 */
		/* 821535E4h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821535E4h case    0:*/		return 0x821535E8;
	}
	return 0x821535E8;
} // Block from 821535E4h-821535E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821535E8h
// Function '?OptimizeMicrocode@D3DXShader@@YAJPAVCNode@1@PAUID3DXBuffer@@KPAPAU3@PAXP6AX3HKPBD@ZPAU_D3DXSHADER_COMPILE_PARAMETERSA@@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821535E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821535E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821535E8);
		  /* 821535E8h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821535E8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821535E8h case    0:*/		return 0x821535EC;
		  /* 821535ECh */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 821535ECh case    1:*/		if ( regs.CR[6].eq ) { return 0x82153620;  }
		/* 821535ECh case    1:*/		return 0x821535F0;
		  /* 821535F0h */ case    2:  		/* rlwinm. R10, R11, 0, 28, 28 */
		/* 821535F0h case    2:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R10,regs.R11);
		/* 821535F0h case    2:*/		return 0x821535F4;
		  /* 821535F4h */ case    3:  		/* bc 12, CR0_EQ, 24 */
		/* 821535F4h case    3:*/		if ( regs.CR[0].eq ) { return 0x8215360C;  }
		/* 821535F4h case    3:*/		return 0x821535F8;
		  /* 821535F8h */ case    4:  		/* nor R11, R11, R11 */
		/* 821535F8h case    4:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821535F8h case    4:*/		return 0x821535FC;
		  /* 821535FCh */ case    5:  		/* lis R10, -32217 */
		/* 821535FCh case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 821535FCh case    5:*/		return 0x82153600;
		  /* 82153600h */ case    6:  		/* addi R11, R11, 1 */
		/* 82153600h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82153600h case    6:*/		return 0x82153604;
		  /* 82153604h */ case    7:  		/* addi R10, R10, 19756 */
		/* 82153604h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4D2C);
		/* 82153604h case    7:*/		return 0x82153608;
		  /* 82153608h */ case    8:  		/* b 12 */
		/* 82153608h case    8:*/		return 0x82153614;
		/* 82153608h case    8:*/		return 0x8215360C;
	}
	return 0x8215360C;
} // Block from 821535E8h-8215360Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215360Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215360C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215360C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215360C);
		  /* 8215360Ch */ case    0:  		/* lis R10, -32217 */
		/* 8215360Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 8215360Ch case    0:*/		return 0x82153610;
		  /* 82153610h */ case    1:  		/* addi R10, R10, 19740 */
		/* 82153610h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4D1C);
		/* 82153610h case    1:*/		return 0x82153614;
	}
	return 0x82153614;
} // Block from 8215360Ch-82153614h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82153614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153614);
		  /* 82153614h */ case    0:  		/* rlwinm R11, R11, 2, 28, 29 */
		/* 82153614h case    0:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R11,regs.R11);
		/* 82153614h case    0:*/		return 0x82153618;
		  /* 82153618h */ case    1:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82153618h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82153618h case    1:*/		return 0x8215361C;
		  /* 8215361Ch */ case    2:  		/* rlwinm R10, R11, 9, 0, 22 */
		/* 8215361Ch case    2:*/		cpu::op::rlwinm<0,9,0,22>(regs,&regs.R10,regs.R11);
		/* 8215361Ch case    2:*/		return 0x82153620;
	}
	return 0x82153620;
} // Block from 82153614h-82153620h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82153620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153620);
		  /* 82153620h */ case    0:  		/* addi R6, R1, 80 */
		/* 82153620h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82153620h case    0:*/		return 0x82153624;
		  /* 82153624h */ case    1:  		/* mr R5, R8 */
		/* 82153624h case    1:*/		regs.R5 = regs.R8;
		/* 82153624h case    1:*/		return 0x82153628;
		  /* 82153628h */ case    2:  		/* or R31, R10, R9 */
		/* 82153628h case    2:*/		cpu::op::or<0>(regs,&regs.R31,regs.R10,regs.R9);
		/* 82153628h case    2:*/		return 0x8215362C;
		  /* 8215362Ch */ case    3:  		/* bl -1852 */
		/* 8215362Ch case    3:*/		regs.LR = 0x82153630; return 0x82152EF0;
		/* 8215362Ch case    3:*/		return 0x82153630;
		  /* 82153630h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 82153630h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82153630h case    4:*/		return 0x82153634;
		  /* 82153634h */ case    5:  		/* bc 4, CR6_EQ, 36 */
		/* 82153634h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82153658;  }
		/* 82153634h case    5:*/		return 0x82153638;
		  /* 82153638h */ case    6:  		/* lis R11, 15 */
		/* 82153638h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xF);
		/* 82153638h case    6:*/		return 0x8215363C;
		  /* 8215363Ch */ case    7:  		/* cmplw CR6, R29, R11 */
		/* 8215363Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8215363Ch case    7:*/		return 0x82153640;
		  /* 82153640h */ case    8:  		/* bc 4, CR6_EQ, 24 */
		/* 82153640h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82153658;  }
		/* 82153640h case    8:*/		return 0x82153644;
		  /* 82153644h */ case    9:  		/* lwz R10, <#[R1 + 80]> */
		/* 82153644h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82153644h case    9:*/		return 0x82153648;
		  /* 82153648h */ case   10:  		/* rlwimi R3, R10, 16, 10, 15 */
		/* 82153648h case   10:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R3,regs.R10);
		/* 82153648h case   10:*/		return 0x8215364C;
		  /* 8215364Ch */ case   11:  		/* rlwinm R10, R3, 0, 10, 31 */
		/* 8215364Ch case   11:*/		cpu::op::rlwinm<0,0,10,31>(regs,&regs.R10,regs.R3);
		/* 8215364Ch case   11:*/		return 0x82153650;
		  /* 82153650h */ case   12:  		/* stw R10, <#[R30]> */
		/* 82153650h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 82153650h case   12:*/		return 0x82153654;
		  /* 82153654h */ case   13:  		/* b 88 */
		/* 82153654h case   13:*/		return 0x821536AC;
		/* 82153654h case   13:*/		return 0x82153658;
	}
	return 0x82153658;
} // Block from 82153620h-82153658h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82153658h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153658);
		  /* 82153658h */ case    0:  		/* rlwinm. R10, R29, 0, 15, 15 */
		/* 82153658h case    0:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R10,regs.R29);
		/* 82153658h case    0:*/		return 0x8215365C;
		  /* 8215365Ch */ case    1:  		/* li R11, 0 */
		/* 8215365Ch case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8215365Ch case    1:*/		return 0x82153660;
		  /* 82153660h */ case    2:  		/* bc 12, CR0_EQ, 8 */
		/* 82153660h case    2:*/		if ( regs.CR[0].eq ) { return 0x82153668;  }
		/* 82153660h case    2:*/		return 0x82153664;
		  /* 82153664h */ case    3:  		/* li R11, 1 */
		/* 82153664h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82153664h case    3:*/		return 0x82153668;
	}
	return 0x82153668;
} // Block from 82153658h-82153668h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82153668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153668);
		  /* 82153668h */ case    0:  		/* rlwinm. R10, R29, 0, 14, 14 */
		/* 82153668h case    0:*/		cpu::op::rlwinm<1,0,14,14>(regs,&regs.R10,regs.R29);
		/* 82153668h case    0:*/		return 0x8215366C;
		  /* 8215366Ch */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 8215366Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82153674;  }
		/* 8215366Ch case    1:*/		return 0x82153670;
		  /* 82153670h */ case    2:  		/* ori R11, R11, 4 */
		/* 82153670h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82153670h case    2:*/		return 0x82153674;
	}
	return 0x82153674;
} // Block from 82153668h-82153674h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82153674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153674);
		  /* 82153674h */ case    0:  		/* rlwinm. R10, R29, 0, 13, 13 */
		/* 82153674h case    0:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R10,regs.R29);
		/* 82153674h case    0:*/		return 0x82153678;
		  /* 82153678h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 82153678h case    1:*/		if ( regs.CR[0].eq ) { return 0x82153680;  }
		/* 82153678h case    1:*/		return 0x8215367C;
		  /* 8215367Ch */ case    2:  		/* ori R11, R11, 16 */
		/* 8215367Ch case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x10);
		/* 8215367Ch case    2:*/		return 0x82153680;
	}
	return 0x82153680;
} // Block from 82153674h-82153680h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82153680h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153680);
		  /* 82153680h */ case    0:  		/* rlwinm. R10, R29, 0, 12, 12 */
		/* 82153680h case    0:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R10,regs.R29);
		/* 82153680h case    0:*/		return 0x82153684;
		  /* 82153684h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 82153684h case    1:*/		if ( regs.CR[0].eq ) { return 0x8215368C;  }
		/* 82153684h case    1:*/		return 0x82153688;
		  /* 82153688h */ case    2:  		/* ori R11, R11, 64 */
		/* 82153688h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x40);
		/* 82153688h case    2:*/		return 0x8215368C;
	}
	return 0x8215368C;
} // Block from 82153680h-8215368Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215368Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215368C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215368C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215368C);
		  /* 8215368Ch */ case    0:  		/* lwz R10, <#[R1 + 80]> */
		/* 8215368Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8215368Ch case    0:*/		return 0x82153690;
		  /* 82153690h */ case    1:  		/* lis R9, 64 */
		/* 82153690h case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0x40);
		/* 82153690h case    1:*/		return 0x82153694;
		  /* 82153694h */ case    2:  		/* rlwinm R8, R3, 0, 16, 31 */
		/* 82153694h case    2:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R8,regs.R3);
		/* 82153694h case    2:*/		return 0x82153698;
		  /* 82153698h */ case    3:  		/* rlwimi R9, R10, 16, 10, 15 */
		/* 82153698h case    3:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R9,regs.R10);
		/* 82153698h case    3:*/		return 0x8215369C;
		  /* 8215369Ch */ case    4:  		/* or R11, R11, R31 */
		/* 8215369Ch case    4:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 8215369Ch case    4:*/		return 0x821536A0;
		  /* 821536A0h */ case    5:  		/* or R10, R9, R8 */
		/* 821536A0h case    5:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R8);
		/* 821536A0h case    5:*/		return 0x821536A4;
		  /* 821536A4h */ case    6:  		/* stw R10, <#[R30]> */
		/* 821536A4h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821536A4h case    6:*/		return 0x821536A8;
		  /* 821536A8h */ case    7:  		/* stwu R11, <#[R30 + 4]> */
		/* 821536A8h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 821536A8h case    7:*/		return 0x821536AC;
	}
	return 0x821536AC;
} // Block from 8215368Ch-821536ACh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821536ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821536AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821536AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821536AC);
		  /* 821536ACh */ case    0:  		/* addi R11, R30, 4 */
		/* 821536ACh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 821536ACh case    0:*/		return 0x821536B0;
		  /* 821536B0h */ case    1:  		/* stw R11, <#[R28]> */
		/* 821536B0h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821536B0h case    1:*/		return 0x821536B4;
		  /* 821536B4h */ case    2:  		/* addi R1, R1, 128 */
		/* 821536B4h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821536B4h case    2:*/		return 0x821536B8;
		  /* 821536B8h */ case    3:  		/* b -795664 */
		/* 821536B8h case    3:*/		return 0x820912A8;
		/* 821536B8h case    3:*/		return 0x821536BC;
		  /* 821536BCh */ case    4:  		/* nop */
		/* 821536BCh case    4:*/		cpu::op::nop();
		/* 821536BCh case    4:*/		return 0x821536C0;
	}
	return 0x821536C0;
} // Block from 821536ACh-821536C0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821536C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821536C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821536C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821536C0);
		  /* 821536C0h */ case    0:  		/* mfspr R12, LR */
		/* 821536C0h case    0:*/		regs.R12 = regs.LR;
		/* 821536C0h case    0:*/		return 0x821536C4;
		  /* 821536C4h */ case    1:  		/* bl -795772 */
		/* 821536C4h case    1:*/		regs.LR = 0x821536C8; return 0x82091248;
		/* 821536C4h case    1:*/		return 0x821536C8;
		  /* 821536C8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821536C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821536C8h case    2:*/		return 0x821536CC;
		  /* 821536CCh */ case    3:  		/* rlwinm R11, R3, 0, 8, 15 */
		/* 821536CCh case    3:*/		cpu::op::rlwinm<0,0,8,15>(regs,&regs.R11,regs.R3);
		/* 821536CCh case    3:*/		return 0x821536D0;
		  /* 821536D0h */ case    4:  		/* lwz R30, <#[R7]> */
		/* 821536D0h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R7 + 0x00000000) );
		/* 821536D0h case    4:*/		return 0x821536D4;
		  /* 821536D4h */ case    5:  		/* lis R10, 228 */
		/* 821536D4h case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xE4);
		/* 821536D4h case    5:*/		return 0x821536D8;
		  /* 821536D8h */ case    6:  		/* mr R31, R3 */
		/* 821536D8h case    6:*/		regs.R31 = regs.R3;
		/* 821536D8h case    6:*/		return 0x821536DC;
		  /* 821536DCh */ case    7:  		/* mr R26, R4 */
		/* 821536DCh case    7:*/		regs.R26 = regs.R4;
		/* 821536DCh case    7:*/		return 0x821536E0;
		  /* 821536E0h */ case    8:  		/* mr R29, R5 */
		/* 821536E0h case    8:*/		regs.R29 = regs.R5;
		/* 821536E0h case    8:*/		return 0x821536E4;
		  /* 821536E4h */ case    9:  		/* mr R28, R6 */
		/* 821536E4h case    9:*/		regs.R28 = regs.R6;
		/* 821536E4h case    9:*/		return 0x821536E8;
		  /* 821536E8h */ case   10:  		/* mr R24, R7 */
		/* 821536E8h case   10:*/		regs.R24 = regs.R7;
		/* 821536E8h case   10:*/		return 0x821536EC;
		  /* 821536ECh */ case   11:  		/* cmplw CR6, R11, R10 */
		/* 821536ECh case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821536ECh case   11:*/		return 0x821536F0;
		  /* 821536F0h */ case   12:  		/* bc 12, CR6_EQ, 80 */
		/* 821536F0h case   12:*/		if ( regs.CR[6].eq ) { return 0x82153740;  }
		/* 821536F0h case   12:*/		return 0x821536F4;
		  /* 821536F4h */ case   13:  		/* rlwinm R10, R11, 14, 18, 31 */
		/* 821536F4h case   13:*/		cpu::op::rlwinm<0,14,18,31>(regs,&regs.R10,regs.R11);
		/* 821536F4h case   13:*/		return 0x821536F8;
		  /* 821536F8h */ case   14:  		/* lis R9, -32217 */
		/* 821536F8h case   14:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8227);
		/* 821536F8h case   14:*/		return 0x821536FC;
		  /* 821536FCh */ case   15:  		/* rlwinm R8, R10, 30, 2, 31 */
		/* 821536FCh case   15:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R8,regs.R10);
		/* 821536FCh case   15:*/		return 0x82153700;
		  /* 82153700h */ case   16:  		/* addi R9, R9, 19772 */
		/* 82153700h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4D3C);
		/* 82153700h case   16:*/		return 0x82153704;
		  /* 82153704h */ case   17:  		/* rlwinm R10, R10, 2, 28, 29 */
		/* 82153704h case   17:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R10,regs.R10);
		/* 82153704h case   17:*/		return 0x82153708;
		  /* 82153708h */ case   18:  		/* rlwinm R11, R11, 18, 28, 29 */
		/* 82153708h case   18:*/		cpu::op::rlwinm<0,18,28,29>(regs,&regs.R11,regs.R11);
		/* 82153708h case   18:*/		return 0x8215370C;
		  /* 8215370Ch */ case   19:  		/* rlwinm R7, R8, 2, 28, 29 */
		/* 8215370Ch case   19:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R7,regs.R8);
		/* 8215370Ch case   19:*/		return 0x82153710;
		  /* 82153710h */ case   20:  		/* rlwinm R8, R8, 0, 28, 29 */
		/* 82153710h case   20:*/		cpu::op::rlwinm<0,0,28,29>(regs,&regs.R8,regs.R8);
		/* 82153710h case   20:*/		return 0x82153714;
		  /* 82153714h */ case   21:  		/* lwzx R10, <#[R10 + R9]> */
		/* 82153714h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82153714h case   21:*/		return 0x82153718;
		  /* 82153718h */ case   22:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82153718h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82153718h case   22:*/		return 0x8215371C;
		  /* 8215371Ch */ case   23:  		/* rlwinm R10, R10, 4, 0, 27 */
		/* 8215371Ch case   23:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R10,regs.R10);
		/* 8215371Ch case   23:*/		return 0x82153720;
		  /* 82153720h */ case   24:  		/* lwzx R7, <#[R7 + R9]> */
		/* 82153720h case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 82153720h case   24:*/		return 0x82153724;
		  /* 82153724h */ case   25:  		/* lwzx R9, <#[R8 + R9]> */
		/* 82153724h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 82153724h case   25:*/		return 0x82153728;
		  /* 82153728h */ case   26:  		/* or R11, R10, R11 */
		/* 82153728h case   26:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82153728h case   26:*/		return 0x8215372C;
		  /* 8215372Ch */ case   27:  		/* rlwinm R10, R7, 8, 0, 23 */
		/* 8215372Ch case   27:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R10,regs.R7);
		/* 8215372Ch case   27:*/		return 0x82153730;
		  /* 82153730h */ case   28:  		/* rlwinm R9, R9, 12, 0, 19 */
		/* 82153730h case   28:*/		cpu::op::rlwinm<0,12,0,19>(regs,&regs.R9,regs.R9);
		/* 82153730h case   28:*/		return 0x82153734;
		  /* 82153734h */ case   29:  		/* or R11, R10, R11 */
		/* 82153734h case   29:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82153734h case   29:*/		return 0x82153738;
		  /* 82153738h */ case   30:  		/* or R25, R9, R11 */
		/* 82153738h case   30:*/		cpu::op::or<0>(regs,&regs.R25,regs.R9,regs.R11);
		/* 82153738h case   30:*/		return 0x8215373C;
		  /* 8215373Ch */ case   31:  		/* b 8 */
		/* 8215373Ch case   31:*/		return 0x82153744;
		/* 8215373Ch case   31:*/		return 0x82153740;
	}
	return 0x82153740;
} // Block from 821536C0h-82153740h (32 instructions)

//////////////////////////////////////////////////////
// Block at 82153740h
// Function '?AllocZeroMemory@FastVectorBase@XGRAPHICS@@IAAPAXK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153740);
		  /* 82153740h */ case    0:  		/* li R25, 12816 */
		/* 82153740h case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x3210);
		/* 82153740h case    0:*/		return 0x82153744;
	}
	return 0x82153744;
} // Block from 82153740h-82153744h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82153744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153744);
		  /* 82153744h */ case    0:  		/* rlwinm R3, R31, 0, 4, 7 */
		/* 82153744h case    0:*/		cpu::op::rlwinm<0,0,4,7>(regs,&regs.R3,regs.R31);
		/* 82153744h case    0:*/		return 0x82153748;
		  /* 82153748h */ case    1:  		/* bl -2472 */
		/* 82153748h case    1:*/		regs.LR = 0x8215374C; return 0x82152DA0;
		/* 82153748h case    1:*/		return 0x8215374C;
		  /* 8215374Ch */ case    2:  		/* or R27, R3, R29 */
		/* 8215374Ch case    2:*/		cpu::op::or<0>(regs,&regs.R27,regs.R3,regs.R29);
		/* 8215374Ch case    2:*/		return 0x82153750;
	}
	return 0x82153750;
} // Block from 82153744h-82153750h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82153750h
// Function '?Free@FastVectorBase@XGRAPHICS@@IAAXPAX@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153750);
		  /* 82153750h */ case    0:  		/* addi R5, R1, 80 */
		/* 82153750h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82153750h case    0:*/		return 0x82153754;
		  /* 82153754h */ case    1:  		/* mr R4, R28 */
		/* 82153754h case    1:*/		regs.R4 = regs.R28;
		/* 82153754h case    1:*/		return 0x82153758;
		  /* 82153758h */ case    2:  		/* mr R3, R31 */
		/* 82153758h case    2:*/		regs.R3 = regs.R31;
		/* 82153758h case    2:*/		return 0x8215375C;
		  /* 8215375Ch */ case    3:  		/* bl -828 */
		/* 8215375Ch case    3:*/		regs.LR = 0x82153760; return 0x82153420;
		/* 8215375Ch case    3:*/		return 0x82153760;
	}
	return 0x82153760;
} // Block from 82153750h-82153760h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82153760h
// Function '?CalculateSrcMod@XGRAPHICS@@YAKK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153760);
		  /* 82153760h */ case    0:  		/* rlwinm R11, R31, 0, 18, 18 */
		/* 82153760h case    0:*/		cpu::op::rlwinm<0,0,18,18>(regs,&regs.R11,regs.R31);
		/* 82153760h case    0:*/		return 0x82153764;
		  /* 82153764h */ case    1:  		/* mr R29, R3 */
		/* 82153764h case    1:*/		regs.R29 = regs.R3;
		/* 82153764h case    1:*/		return 0x82153768;
		  /* 82153768h */ case    2:  		/* li R28, 0 */
		/* 82153768h case    2:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82153768h case    2:*/		return 0x8215376C;
		  /* 8215376Ch */ case    3:  		/* cmplwi CR6, R11, 8192 */
		/* 8215376Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002000);
		/* 8215376Ch case    3:*/		return 0x82153770;
		  /* 82153770h */ case    4:  		/* bc 4, CR6_EQ, 84 */
		/* 82153770h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821537C4;  }
		/* 82153770h case    4:*/		return 0x82153774;
		  /* 82153774h */ case    5:  		/* rlwimi R31, R31, 12, 21, 23 */
		/* 82153774h case    5:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R31,regs.R31);
		/* 82153774h case    5:*/		return 0x82153778;
		  /* 82153778h */ case    6:  		/* rlwinm R11, R31, 0, 19, 23 */
		/* 82153778h case    6:*/		cpu::op::rlwinm<0,0,19,23>(regs,&regs.R11,regs.R31);
		/* 82153778h case    6:*/		return 0x8215377C;
		  /* 8215377Ch */ case    7:  		/* cmplwi CR6, R11, 256 */
		/* 8215377Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000100);
		/* 8215377Ch case    7:*/		return 0x82153780;
		  /* 82153780h */ case    8:  		/* bc 4, CR6_EQ, 68 */
		/* 82153780h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821537C4;  }
		/* 82153780h case    8:*/		return 0x82153784;
		  /* 82153784h */ case    9:  		/* mr R11, R26 */
		/* 82153784h case    9:*/		regs.R11 = regs.R26;
		/* 82153784h case    9:*/		return 0x82153788;
		  /* 82153788h */ case   10:  		/* rlwimi R11, R26, 12, 21, 23 */
		/* 82153788h case   10:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R11,regs.R26);
		/* 82153788h case   10:*/		return 0x8215378C;
		  /* 8215378Ch */ case   11:  		/* rlwinm R11, R11, 0, 19, 23 */
		/* 8215378Ch case   11:*/		cpu::op::rlwinm<0,0,19,23>(regs,&regs.R11,regs.R11);
		/* 8215378Ch case   11:*/		return 0x82153790;
		  /* 82153790h */ case   12:  		/* cmplwi CR6, R11, 3840 */
		/* 82153790h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000F00);
		/* 82153790h case   12:*/		return 0x82153794;
		  /* 82153794h */ case   13:  		/* bc 12, CR6_EQ, 12 */
		/* 82153794h case   13:*/		if ( regs.CR[6].eq ) { return 0x821537A0;  }
		/* 82153794h case   13:*/		return 0x82153798;
		  /* 82153798h */ case   14:  		/* bl 1129160 */
		/* 82153798h case   14:*/		regs.LR = 0x8215379C; return 0x82267260;
		/* 82153798h case   14:*/		return 0x8215379C;
		  /* 8215379Ch */ case   15:  		/* b 40 */
		/* 8215379Ch case   15:*/		return 0x821537C4;
		/* 8215379Ch case   15:*/		return 0x821537A0;
	}
	return 0x821537A0;
} // Block from 82153760h-821537A0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821537A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821537A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821537A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821537A0);
		  /* 821537A0h */ case    0:  		/* lwz R11, <#[R1 + 84]> */
		/* 821537A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821537A0h case    0:*/		return 0x821537A4;
		  /* 821537A4h */ case    1:  		/* rlwinm R10, R26, 0, 21, 31 */
		/* 821537A4h case    1:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R10,regs.R26);
		/* 821537A4h case    1:*/		return 0x821537A8;
		  /* 821537A8h */ case    2:  		/* andis. R11, R11, 65521 */
		/* 821537A8h case    2:*/		cpu::op::andis<1>(regs,&regs.R11,regs.R11,0xFFF1);
		/* 821537A8h case    2:*/		return 0x821537AC;
		  /* 821537ACh */ case    3:  		/* oris R11, R11, 1 */
		/* 821537ACh case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821537ACh case    3:*/		return 0x821537B0;
		  /* 821537B0h */ case    4:  		/* cmplwi CR0, R10, 0 */
		/* 821537B0h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 821537B0h case    4:*/		return 0x821537B4;
		  /* 821537B4h */ case    5:  		/* stw R11, <#[R1 + 84]> */
		/* 821537B4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821537B4h case    5:*/		return 0x821537B8;
		  /* 821537B8h */ case    6:  		/* bc 12, CR0_EQ, 8 */
		/* 821537B8h case    6:*/		if ( regs.CR[0].eq ) { return 0x821537C0;  }
		/* 821537B8h case    6:*/		return 0x821537BC;
		  /* 821537BCh */ case    7:  		/* bl 1129124 */
		/* 821537BCh case    7:*/		regs.LR = 0x821537C0; return 0x82267260;
		/* 821537BCh case    7:*/		return 0x821537C0;
	}
	return 0x821537C0;
} // Block from 821537A0h-821537C0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821537C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821537C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821537C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821537C0);
		  /* 821537C0h */ case    0:  		/* li R28, 1 */
		/* 821537C0h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 821537C0h case    0:*/		return 0x821537C4;
	}
	return 0x821537C4;
} // Block from 821537C0h-821537C4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821537C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821537C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821537C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821537C4);
		  /* 821537C4h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 821537C4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821537C4h case    0:*/		return 0x821537C8;
		  /* 821537C8h */ case    1:  		/* bc 4, CR6_EQ, 36 */
		/* 821537C8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821537EC;  }
		/* 821537C8h case    1:*/		return 0x821537CC;
		  /* 821537CCh */ case    2:  		/* cmplwi CR6, R25, 12816 */
		/* 821537CCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00003210);
		/* 821537CCh case    2:*/		return 0x821537D0;
		  /* 821537D0h */ case    3:  		/* bc 4, CR6_EQ, 28 */
		/* 821537D0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821537EC;  }
		/* 821537D0h case    3:*/		return 0x821537D4;
		  /* 821537D4h */ case    4:  		/* lwz R10, <#[R1 + 80]> */
		/* 821537D4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 821537D4h case    4:*/		return 0x821537D8;
		  /* 821537D8h */ case    5:  		/* rlwimi R10, R28, 7, 24, 24 */
		/* 821537D8h case    5:*/		cpu::op::rlwimi<0,7,24,24>(regs,&regs.R10,regs.R28);
		/* 821537D8h case    5:*/		return 0x821537DC;
		  /* 821537DCh */ case    6:  		/* andi. R10, R10, 191 */
		/* 821537DCh case    6:*/		cpu::op::andi<1>(regs,&regs.R10,regs.R10,0xBF);
		/* 821537DCh case    6:*/		return 0x821537E0;
		  /* 821537E0h */ case    7:  		/* rlwimi R29, R10, 16, 0, 15 */
		/* 821537E0h case    7:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R29,regs.R10);
		/* 821537E0h case    7:*/		return 0x821537E4;
		  /* 821537E4h */ case    8:  		/* stw R29, <#[R30]> */
		/* 821537E4h case    8:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x00000000) );
		/* 821537E4h case    8:*/		return 0x821537E8;
		  /* 821537E8h */ case    9:  		/* b 44 */
		/* 821537E8h case    9:*/		return 0x82153814;
		/* 821537E8h case    9:*/		return 0x821537EC;
	}
	return 0x821537EC;
} // Block from 821537C4h-821537ECh (10 instructions)

//////////////////////////////////////////////////////
// Block at 821537ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821537EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821537EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821537EC);
		  /* 821537ECh */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 821537ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821537ECh case    0:*/		return 0x821537F0;
		  /* 821537F0h */ case    1:  		/* rlwinm R10, R29, 0, 16, 31 */
		/* 821537F0h case    1:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R29);
		/* 821537F0h case    1:*/		return 0x821537F4;
		  /* 821537F4h */ case    2:  		/* or R9, R27, R25 */
		/* 821537F4h case    2:*/		cpu::op::or<0>(regs,&regs.R9,regs.R27,regs.R25);
		/* 821537F4h case    2:*/		return 0x821537F8;
		  /* 821537F8h */ case    3:  		/* rlwimi R11, R28, 7, 24, 24 */
		/* 821537F8h case    3:*/		cpu::op::rlwimi<0,7,24,24>(regs,&regs.R11,regs.R28);
		/* 821537F8h case    3:*/		return 0x821537FC;
		  /* 821537FCh */ case    4:  		/* rlwinm R11, R11, 16, 8, 15 */
		/* 821537FCh case    4:*/		cpu::op::rlwinm<0,16,8,15>(regs,&regs.R11,regs.R11);
		/* 821537FCh case    4:*/		return 0x82153800;
		  /* 82153800h */ case    5:  		/* rlwinm R11, R11, 0, 10, 8 */
		/* 82153800h case    5:*/		cpu::op::rlwinm<0,0,10,8>(regs,&regs.R11,regs.R11);
		/* 82153800h case    5:*/		return 0x82153804;
		  /* 82153804h */ case    6:  		/* oris R11, R11, 64 */
		/* 82153804h case    6:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x40);
		/* 82153804h case    6:*/		return 0x82153808;
		  /* 82153808h */ case    7:  		/* or R11, R11, R10 */
		/* 82153808h case    7:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82153808h case    7:*/		return 0x8215380C;
		  /* 8215380Ch */ case    8:  		/* stw R11, <#[R30]> */
		/* 8215380Ch case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8215380Ch case    8:*/		return 0x82153810;
		  /* 82153810h */ case    9:  		/* stwu R9, <#[R30 + 4]> */
		/* 82153810h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82153810h case    9:*/		return 0x82153814;
	}
	return 0x82153814;
} // Block from 821537ECh-82153814h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82153814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153814);
		  /* 82153814h */ case    0:  		/* addi R11, R30, 4 */
		/* 82153814h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 82153814h case    0:*/		return 0x82153818;
		  /* 82153818h */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 82153818h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82153818h case    1:*/		return 0x8215381C;
		  /* 8215381Ch */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 8215381Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8215382C;  }
		/* 8215381Ch case    2:*/		return 0x82153820;
		  /* 82153820h */ case    3:  		/* lwz R10, <#[R1 + 84]> */
		/* 82153820h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 82153820h case    3:*/		return 0x82153824;
		  /* 82153824h */ case    4:  		/* stw R10, <#[R11]> */
		/* 82153824h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82153824h case    4:*/		return 0x82153828;
		  /* 82153828h */ case    5:  		/* addi R11, R11, 4 */
		/* 82153828h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82153828h case    5:*/		return 0x8215382C;
	}
	return 0x8215382C;
} // Block from 82153814h-8215382Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8215382Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215382C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215382C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215382C);
		  /* 8215382Ch */ case    0:  		/* stw R11, <#[R24]> */
		/* 8215382Ch case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 8215382Ch case    0:*/		return 0x82153830;
		  /* 82153830h */ case    1:  		/* addi R1, R1, 160 */
		/* 82153830h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82153830h case    1:*/		return 0x82153834;
		  /* 82153834h */ case    2:  		/* b -796060 */
		/* 82153834h case    2:*/		return 0x82091298;
		/* 82153834h case    2:*/		return 0x82153838;
	}
	return 0x82153838;
} // Block from 8215382Ch-82153838h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82153838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153838);
		  /* 82153838h */ case    0:  		/* mfspr R12, LR */
		/* 82153838h case    0:*/		regs.R12 = regs.LR;
		/* 82153838h case    0:*/		return 0x8215383C;
		  /* 8215383Ch */ case    1:  		/* bl -796132 */
		/* 8215383Ch case    1:*/		regs.LR = 0x82153840; return 0x82091258;
		/* 8215383Ch case    1:*/		return 0x82153840;
		  /* 82153840h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82153840h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82153840h case    2:*/		return 0x82153844;
		  /* 82153844h */ case    3:  		/* mr R11, R3 */
		/* 82153844h case    3:*/		regs.R11 = regs.R3;
		/* 82153844h case    3:*/		return 0x82153848;
		  /* 82153848h */ case    4:  		/* lwz R31, <#[R6]> */
		/* 82153848h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R6 + 0x00000000) );
		/* 82153848h case    4:*/		return 0x8215384C;
		  /* 8215384Ch */ case    5:  		/* mr R30, R4 */
		/* 8215384Ch case    5:*/		regs.R30 = regs.R4;
		/* 8215384Ch case    5:*/		return 0x82153850;
		  /* 82153850h */ case    6:  		/* rlwimi R11, R3, 12, 21, 23 */
		/* 82153850h case    6:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R11,regs.R3);
		/* 82153850h case    6:*/		return 0x82153854;
		  /* 82153854h */ case    7:  		/* mr R28, R3 */
		/* 82153854h case    7:*/		regs.R28 = regs.R3;
		/* 82153854h case    7:*/		return 0x82153858;
		  /* 82153858h */ case    8:  		/* mr R29, R6 */
		/* 82153858h case    8:*/		regs.R29 = regs.R6;
		/* 82153858h case    8:*/		return 0x8215385C;
		  /* 8215385Ch */ case    9:  		/* rlwinm R4, R3, 0, 21, 31 */
		/* 8215385Ch case    9:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R4,regs.R3);
		/* 8215385Ch case    9:*/		return 0x82153860;
		  /* 82153860h */ case   10:  		/* addi R6, R1, 80 */
		/* 82153860h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82153860h case   10:*/		return 0x82153864;
		  /* 82153864h */ case   11:  		/* rlwinm R3, R11, 24, 27, 31 */
		/* 82153864h case   11:*/		cpu::op::rlwinm<0,24,27,31>(regs,&regs.R3,regs.R11);
		/* 82153864h case   11:*/		return 0x82153868;
		  /* 82153868h */ case   12:  		/* bl -2424 */
		/* 82153868h case   12:*/		regs.LR = 0x8215386C; return 0x82152EF0;
		/* 82153868h case   12:*/		return 0x8215386C;
		  /* 8215386Ch */ case   13:  		/* li R11, 71 */
		/* 8215386Ch case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x47);
		/* 8215386Ch case   13:*/		return 0x82153870;
		  /* 82153870h */ case   14:  		/* rlwinm R10, R28, 0, 12, 15 */
		/* 82153870h case   14:*/		cpu::op::rlwinm<0,0,12,15>(regs,&regs.R10,regs.R28);
		/* 82153870h case   14:*/		return 0x82153874;
		  /* 82153874h */ case   15:  		/* lis R9, 15 */
		/* 82153874h case   15:*/		cpu::op::lis<0>(regs,&regs.R9,0xF);
		/* 82153874h case   15:*/		return 0x82153878;
		  /* 82153878h */ case   16:  		/* stw R11, <#[R31]> */
		/* 82153878h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82153878h case   16:*/		return 0x8215387C;
		  /* 8215387Ch */ case   17:  		/* addi R11, R31, 4 */
		/* 8215387Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 8215387Ch case   17:*/		return 0x82153880;
		  /* 82153880h */ case   18:  		/* cmplw CR6, R10, R9 */
		/* 82153880h case   18:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82153880h case   18:*/		return 0x82153884;
		  /* 82153884h */ case   19:  		/* bc 12, CR6_EQ, 92 */
		/* 82153884h case   19:*/		if ( regs.CR[6].eq ) { return 0x821538E0;  }
		/* 82153884h case   19:*/		return 0x82153888;
		  /* 82153888h */ case   20:  		/* lwz R9, <#[R1 + 80]> */
		/* 82153888h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 82153888h case   20:*/		return 0x8215388C;
		  /* 8215388Ch */ case   21:  		/* lis R8, 64 */
		/* 8215388Ch case   21:*/		cpu::op::lis<0>(regs,&regs.R8,0x40);
		/* 8215388Ch case   21:*/		return 0x82153890;
		  /* 82153890h */ case   22:  		/* rlwinm R7, R3, 0, 16, 31 */
		/* 82153890h case   22:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R7,regs.R3);
		/* 82153890h case   22:*/		return 0x82153894;
		  /* 82153894h */ case   23:  		/* rlwimi R8, R9, 16, 10, 15 */
		/* 82153894h case   23:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R8,regs.R9);
		/* 82153894h case   23:*/		return 0x82153898;
		  /* 82153898h */ case   24:  		/* rlwinm. R6, R10, 0, 15, 15 */
		/* 82153898h case   24:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R6,regs.R10);
		/* 82153898h case   24:*/		return 0x8215389C;
		  /* 8215389Ch */ case   25:  		/* or R8, R8, R7 */
		/* 8215389Ch case   25:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R7);
		/* 8215389Ch case   25:*/		return 0x821538A0;
		  /* 821538A0h */ case   26:  		/* li R9, 0 */
		/* 821538A0h case   26:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821538A0h case   26:*/		return 0x821538A4;
		  /* 821538A4h */ case   27:  		/* stw R8, <#[R11]> */
		/* 821538A4h case   27:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821538A4h case   27:*/		return 0x821538A8;
		  /* 821538A8h */ case   28:  		/* addi R11, R11, 4 */
		/* 821538A8h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821538A8h case   28:*/		return 0x821538AC;
		  /* 821538ACh */ case   29:  		/* bc 12, CR0_EQ, 8 */
		/* 821538ACh case   29:*/		if ( regs.CR[0].eq ) { return 0x821538B4;  }
		/* 821538ACh case   29:*/		return 0x821538B0;
	}
	return 0x821538B0;
} // Block from 82153838h-821538B0h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821538B0h
// Function '?ConvertPSDstRegToILReg@XGRAPHICS@@YAKKKPAU_R400IL_RECORDED_INFO@1@PAW4ILRegType@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821538B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821538B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821538B0);
		  /* 821538B0h */ case    0:  		/* li R9, 1 */
		/* 821538B0h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821538B0h case    0:*/		return 0x821538B4;
	}
	return 0x821538B4;
} // Block from 821538B0h-821538B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821538B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821538B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821538B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821538B4);
		  /* 821538B4h */ case    0:  		/* rlwinm. R8, R10, 0, 14, 14 */
		/* 821538B4h case    0:*/		cpu::op::rlwinm<1,0,14,14>(regs,&regs.R8,regs.R10);
		/* 821538B4h case    0:*/		return 0x821538B8;
		  /* 821538B8h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 821538B8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821538C0;  }
		/* 821538B8h case    1:*/		return 0x821538BC;
		  /* 821538BCh */ case    2:  		/* ori R9, R9, 4 */
		/* 821538BCh case    2:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x4);
		/* 821538BCh case    2:*/		return 0x821538C0;
	}
	return 0x821538C0;
} // Block from 821538B4h-821538C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821538C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821538C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821538C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821538C0);
		  /* 821538C0h */ case    0:  		/* rlwinm. R8, R10, 0, 13, 13 */
		/* 821538C0h case    0:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R8,regs.R10);
		/* 821538C0h case    0:*/		return 0x821538C4;
		  /* 821538C4h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 821538C4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821538CC;  }
		/* 821538C4h case    1:*/		return 0x821538C8;
		  /* 821538C8h */ case    2:  		/* ori R9, R9, 16 */
		/* 821538C8h case    2:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x10);
		/* 821538C8h case    2:*/		return 0x821538CC;
	}
	return 0x821538CC;
} // Block from 821538C0h-821538CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821538CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821538CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821538CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821538CC);
		  /* 821538CCh */ case    0:  		/* rlwinm. R10, R10, 0, 12, 12 */
		/* 821538CCh case    0:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R10,regs.R10);
		/* 821538CCh case    0:*/		return 0x821538D0;
		  /* 821538D0h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 821538D0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821538D8;  }
		/* 821538D0h case    1:*/		return 0x821538D4;
		  /* 821538D4h */ case    2:  		/* ori R9, R9, 64 */
		/* 821538D4h case    2:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x40);
		/* 821538D4h case    2:*/		return 0x821538D8;
	}
	return 0x821538D8;
} // Block from 821538CCh-821538D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821538D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821538D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821538D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821538D8);
		  /* 821538D8h */ case    0:  		/* stw R9, <#[R11]> */
		/* 821538D8h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821538D8h case    0:*/		return 0x821538DC;
		  /* 821538DCh */ case    1:  		/* b 20 */
		/* 821538DCh case    1:*/		return 0x821538F0;
		/* 821538DCh case    1:*/		return 0x821538E0;
	}
	return 0x821538E0;
} // Block from 821538D8h-821538E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821538E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821538E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821538E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821538E0);
		  /* 821538E0h */ case    0:  		/* lwz R10, <#[R1 + 80]> */
		/* 821538E0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 821538E0h case    0:*/		return 0x821538E4;
		  /* 821538E4h */ case    1:  		/* rlwimi R3, R10, 16, 10, 15 */
		/* 821538E4h case    1:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R3,regs.R10);
		/* 821538E4h case    1:*/		return 0x821538E8;
		  /* 821538E8h */ case    2:  		/* rlwinm R10, R3, 0, 10, 31 */
		/* 821538E8h case    2:*/		cpu::op::rlwinm<0,0,10,31>(regs,&regs.R10,regs.R3);
		/* 821538E8h case    2:*/		return 0x821538EC;
		  /* 821538ECh */ case    3:  		/* stw R10, <#[R11]> */
		/* 821538ECh case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821538ECh case    3:*/		return 0x821538F0;
	}
	return 0x821538F0;
} // Block from 821538E0h-821538F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821538F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821538F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821538F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821538F0);
		  /* 821538F0h */ case    0:  		/* addi R11, R11, 4 */
		/* 821538F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821538F0h case    0:*/		return 0x821538F4;
		  /* 821538F4h */ case    1:  		/* li R10, 1 */
		/* 821538F4h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821538F4h case    1:*/		return 0x821538F8;
		  /* 821538F8h */ case    2:  		/* addi R9, R11, 4 */
		/* 821538F8h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821538F8h case    2:*/		return 0x821538FC;
		  /* 821538FCh */ case    3:  		/* rlwimi R30, R10, 18, 0, 15 */
		/* 821538FCh case    3:*/		cpu::op::rlwimi<0,18,0,15>(regs,&regs.R30,regs.R10);
		/* 821538FCh case    3:*/		return 0x82153900;
		  /* 82153900h */ case    4:  		/* stw R30, <#[R11]> */
		/* 82153900h case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 82153900h case    4:*/		return 0x82153904;
		  /* 82153904h */ case    5:  		/* stw R9, <#[R29]> */
		/* 82153904h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 82153904h case    5:*/		return 0x82153908;
		  /* 82153908h */ case    6:  		/* addi R1, R1, 128 */
		/* 82153908h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82153908h case    6:*/		return 0x8215390C;
		  /* 8215390Ch */ case    7:  		/* b -796260 */
		/* 8215390Ch case    7:*/		return 0x820912A8;
		/* 8215390Ch case    7:*/		return 0x82153910;
	}
	return 0x82153910;
} // Block from 821538F0h-82153910h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82153910h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153910( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153910) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153910);
		  /* 82153910h */ case    0:  		/* mfspr R12, LR */
		/* 82153910h case    0:*/		regs.R12 = regs.LR;
		/* 82153910h case    0:*/		return 0x82153914;
		  /* 82153914h */ case    1:  		/* bl -796352 */
		/* 82153914h case    1:*/		regs.LR = 0x82153918; return 0x82091254;
		/* 82153914h case    1:*/		return 0x82153918;
		  /* 82153918h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82153918h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82153918h case    2:*/		return 0x8215391C;
		  /* 8215391Ch */ case    3:  		/* lwz R11, <#[R7]> */
		/* 8215391Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 8215391Ch case    3:*/		return 0x82153920;
		  /* 82153920h */ case    4:  		/* li R10, 12 */
		/* 82153920h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0xC);
		/* 82153920h case    4:*/		return 0x82153924;
		  /* 82153924h */ case    5:  		/* mr R9, R3 */
		/* 82153924h case    5:*/		regs.R9 = regs.R3;
		/* 82153924h case    5:*/		return 0x82153928;
		  /* 82153928h */ case    6:  		/* mr R30, R4 */
		/* 82153928h case    6:*/		regs.R30 = regs.R4;
		/* 82153928h case    6:*/		return 0x8215392C;
		  /* 8215392Ch */ case    7:  		/* rlwimi R9, R3, 12, 21, 23 */
		/* 8215392Ch case    7:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R9,regs.R3);
		/* 8215392Ch case    7:*/		return 0x82153930;
		  /* 82153930h */ case    8:  		/* mr R29, R5 */
		/* 82153930h case    8:*/		regs.R29 = regs.R5;
		/* 82153930h case    8:*/		return 0x82153934;
		  /* 82153934h */ case    9:  		/* stw R10, <#[R11]> */
		/* 82153934h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82153934h case    9:*/		return 0x82153938;
		  /* 82153938h */ case   10:  		/* mr R27, R3 */
		/* 82153938h case   10:*/		regs.R27 = regs.R3;
		/* 82153938h case   10:*/		return 0x8215393C;
		  /* 8215393Ch */ case   11:  		/* mr R5, R6 */
		/* 8215393Ch case   11:*/		regs.R5 = regs.R6;
		/* 8215393Ch case   11:*/		return 0x82153940;
		  /* 82153940h */ case   12:  		/* rlwinm R4, R3, 0, 21, 31 */
		/* 82153940h case   12:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R4,regs.R3);
		/* 82153940h case   12:*/		return 0x82153944;
		  /* 82153944h */ case   13:  		/* addi R6, R1, 80 */
		/* 82153944h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82153944h case   13:*/		return 0x82153948;
		  /* 82153948h */ case   14:  		/* rlwinm R3, R9, 24, 27, 31 */
		/* 82153948h case   14:*/		cpu::op::rlwinm<0,24,27,31>(regs,&regs.R3,regs.R9);
		/* 82153948h case   14:*/		return 0x8215394C;
		  /* 8215394Ch */ case   15:  		/* mr R28, R7 */
		/* 8215394Ch case   15:*/		regs.R28 = regs.R7;
		/* 8215394Ch case   15:*/		return 0x82153950;
		  /* 82153950h */ case   16:  		/* addi R31, R11, 4 */
		/* 82153950h case   16:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 82153950h case   16:*/		return 0x82153954;
		  /* 82153954h */ case   17:  		/* bl -2660 */
		/* 82153954h case   17:*/		regs.LR = 0x82153958; return 0x82152EF0;
		/* 82153954h case   17:*/		return 0x82153958;
		  /* 82153958h */ case   18:  		/* rlwinm R11, R27, 0, 12, 15 */
		/* 82153958h case   18:*/		cpu::op::rlwinm<0,0,12,15>(regs,&regs.R11,regs.R27);
		/* 82153958h case   18:*/		return 0x8215395C;
		  /* 8215395Ch */ case   19:  		/* lis R10, 15 */
		/* 8215395Ch case   19:*/		cpu::op::lis<0>(regs,&regs.R10,0xF);
		/* 8215395Ch case   19:*/		return 0x82153960;
		  /* 82153960h */ case   20:  		/* cmplw CR6, R11, R10 */
		/* 82153960h case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82153960h case   20:*/		return 0x82153964;
		  /* 82153964h */ case   21:  		/* bc 12, CR6_EQ, 96 */
		/* 82153964h case   21:*/		if ( regs.CR[6].eq ) { return 0x821539C4;  }
		/* 82153964h case   21:*/		return 0x82153968;
		  /* 82153968h */ case   22:  		/* lwz R10, <#[R1 + 80]> */
		/* 82153968h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82153968h case   22:*/		return 0x8215396C;
		  /* 8215396Ch */ case   23:  		/* lis R9, 64 */
		/* 8215396Ch case   23:*/		cpu::op::lis<0>(regs,&regs.R9,0x40);
		/* 8215396Ch case   23:*/		return 0x82153970;
		  /* 82153970h */ case   24:  		/* rlwinm R8, R3, 0, 16, 31 */
		/* 82153970h case   24:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R8,regs.R3);
		/* 82153970h case   24:*/		return 0x82153974;
		  /* 82153974h */ case   25:  		/* rlwimi R9, R10, 16, 10, 15 */
		/* 82153974h case   25:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R9,regs.R10);
		/* 82153974h case   25:*/		return 0x82153978;
		  /* 82153978h */ case   26:  		/* rlwinm. R7, R11, 0, 15, 15 */
		/* 82153978h case   26:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R7,regs.R11);
		/* 82153978h case   26:*/		return 0x8215397C;
		  /* 8215397Ch */ case   27:  		/* or R9, R9, R8 */
		/* 8215397Ch case   27:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8215397Ch case   27:*/		return 0x82153980;
		  /* 82153980h */ case   28:  		/* li R10, 0 */
		/* 82153980h case   28:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82153980h case   28:*/		return 0x82153984;
		  /* 82153984h */ case   29:  		/* stw R9, <#[R31]> */
		/* 82153984h case   29:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 82153984h case   29:*/		return 0x82153988;
		  /* 82153988h */ case   30:  		/* addi R9, R31, 4 */
		/* 82153988h case   30:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x4);
		/* 82153988h case   30:*/		return 0x8215398C;
		  /* 8215398Ch */ case   31:  		/* bc 12, CR0_EQ, 8 */
		/* 8215398Ch case   31:*/		if ( regs.CR[0].eq ) { return 0x82153994;  }
		/* 8215398Ch case   31:*/		return 0x82153990;
		  /* 82153990h */ case   32:  		/* li R10, 1 */
		/* 82153990h case   32:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82153990h case   32:*/		return 0x82153994;
	}
	return 0x82153994;
} // Block from 82153910h-82153994h (33 instructions)

//////////////////////////////////////////////////////
// Block at 82153994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153994);
		  /* 82153994h */ case    0:  		/* rlwinm. R8, R11, 0, 14, 14 */
		/* 82153994h case    0:*/		cpu::op::rlwinm<1,0,14,14>(regs,&regs.R8,regs.R11);
		/* 82153994h case    0:*/		return 0x82153998;
		  /* 82153998h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 82153998h case    1:*/		if ( regs.CR[0].eq ) { return 0x821539A0;  }
		/* 82153998h case    1:*/		return 0x8215399C;
		  /* 8215399Ch */ case    2:  		/* ori R10, R10, 4 */
		/* 8215399Ch case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8215399Ch case    2:*/		return 0x821539A0;
	}
	return 0x821539A0;
} // Block from 82153994h-821539A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821539A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821539A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821539A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821539A0);
		  /* 821539A0h */ case    0:  		/* rlwinm. R8, R11, 0, 13, 13 */
		/* 821539A0h case    0:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R8,regs.R11);
		/* 821539A0h case    0:*/		return 0x821539A4;
		  /* 821539A4h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 821539A4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821539AC;  }
		/* 821539A4h case    1:*/		return 0x821539A8;
		  /* 821539A8h */ case    2:  		/* ori R10, R10, 16 */
		/* 821539A8h case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x10);
		/* 821539A8h case    2:*/		return 0x821539AC;
	}
	return 0x821539AC;
} // Block from 821539A0h-821539ACh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821539ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821539AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821539AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821539AC);
		  /* 821539ACh */ case    0:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 821539ACh case    0:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 821539ACh case    0:*/		return 0x821539B0;
	}
	return 0x821539B0;
} // Block from 821539ACh-821539B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821539B0h
// Function '?FCUsingPedicateReg@XGRAPHICS@@YAXKW4ILOpCode@1@PAPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821539B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821539B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821539B0);
		  /* 821539B0h */ case    0:  		/* bc 12, CR0_EQ, 8 */
		/* 821539B0h case    0:*/		if ( regs.CR[0].eq ) { return 0x821539B8;  }
		/* 821539B0h case    0:*/		return 0x821539B4;
		  /* 821539B4h */ case    1:  		/* ori R10, R10, 64 */
		/* 821539B4h case    1:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x40);
		/* 821539B4h case    1:*/		return 0x821539B8;
	}
	return 0x821539B8;
} // Block from 821539B0h-821539B8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821539B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821539B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821539B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821539B8);
		  /* 821539B8h */ case    0:  		/* stw R10, <#[R9]> */
		/* 821539B8h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 821539B8h case    0:*/		return 0x821539BC;
		  /* 821539BCh */ case    1:  		/* addi R9, R9, 4 */
		/* 821539BCh case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 821539BCh case    1:*/		return 0x821539C0;
		  /* 821539C0h */ case    2:  		/* b 24 */
		/* 821539C0h case    2:*/		return 0x821539D8;
		/* 821539C0h case    2:*/		return 0x821539C4;
	}
	return 0x821539C4;
} // Block from 821539B8h-821539C4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821539C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821539C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821539C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821539C4);
		  /* 821539C4h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 821539C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821539C4h case    0:*/		return 0x821539C8;
		  /* 821539C8h */ case    1:  		/* addi R9, R31, 4 */
		/* 821539C8h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x4);
		/* 821539C8h case    1:*/		return 0x821539CC;
		  /* 821539CCh */ case    2:  		/* rlwimi R3, R11, 16, 10, 15 */
		/* 821539CCh case    2:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R3,regs.R11);
		/* 821539CCh case    2:*/		return 0x821539D0;
		  /* 821539D0h */ case    3:  		/* rlwinm R11, R3, 0, 10, 31 */
		/* 821539D0h case    3:*/		cpu::op::rlwinm<0,0,10,31>(regs,&regs.R11,regs.R3);
		/* 821539D0h case    3:*/		return 0x821539D4;
		  /* 821539D4h */ case    4:  		/* stw R11, <#[R31]> */
		/* 821539D4h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821539D4h case    4:*/		return 0x821539D8;
	}
	return 0x821539D8;
} // Block from 821539C4h-821539D8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821539D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821539D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821539D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821539D8);
		  /* 821539D8h */ case    0:  		/* rlwinm R11, R30, 0, 4, 7 */
		/* 821539D8h case    0:*/		cpu::op::rlwinm<0,0,4,7>(regs,&regs.R11,regs.R30);
		/* 821539D8h case    0:*/		return 0x821539DC;
		  /* 821539DCh */ case    1:  		/* lis R7, 228 */
		/* 821539DCh case    1:*/		cpu::op::lis<0>(regs,&regs.R7,0xE4);
		/* 821539DCh case    1:*/		return 0x821539E0;
		  /* 821539E0h */ case    2:  		/* addis R11, R11, -3328 */
		/* 821539E0h case    2:*/		cpu::op::addis<0>(regs,&regs.R11,regs.R11,0xFFFFF300);
		/* 821539E0h case    2:*/		return 0x821539E4;
		  /* 821539E4h */ case    3:  		/* rlwinm R10, R30, 0, 8, 15 */
		/* 821539E4h case    3:*/		cpu::op::rlwinm<0,0,8,15>(regs,&regs.R10,regs.R30);
		/* 821539E4h case    3:*/		return 0x821539E8;
		  /* 821539E8h */ case    4:  		/* addic R11, R11, -1 */
		/* 821539E8h case    4:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821539E8h case    4:*/		return 0x821539EC;
		  /* 821539ECh */ case    5:  		/* lis R8, 1 */
		/* 821539ECh case    5:*/		cpu::op::lis<0>(regs,&regs.R8,0x1);
		/* 821539ECh case    5:*/		return 0x821539F0;
		  /* 821539F0h */ case    6:  		/* subfe R6, R11, R11 */
		/* 821539F0h case    6:*/		cpu::op::subfe<0>(regs,&regs.R6,regs.R11,regs.R11);
		/* 821539F0h case    6:*/		return 0x821539F4;
		  /* 821539F4h */ case    7:  		/* lis R11, -32217 */
		/* 821539F4h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8227);
		/* 821539F4h case    7:*/		return 0x821539F8;
		  /* 821539F8h */ case    8:  		/* cmplw CR6, R10, R7 */
		/* 821539F8h case    8:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 821539F8h case    8:*/		return 0x821539FC;
		  /* 821539FCh */ case    9:  		/* and R8, R6, R8 */
		/* 821539FCh case    9:*/		cpu::op::and<0>(regs,&regs.R8,regs.R6,regs.R8);
		/* 821539FCh case    9:*/		return 0x82153A00;
		  /* 82153A00h */ case   10:  		/* addi R11, R11, 19772 */
		/* 82153A00h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4D3C);
		/* 82153A00h case   10:*/		return 0x82153A04;
		  /* 82153A04h */ case   11:  		/* bc 4, CR6_EQ, 28 */
		/* 82153A04h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82153A20;  }
		/* 82153A04h case   11:*/		return 0x82153A08;
		  /* 82153A08h */ case   12:  		/* cmplwi CR6, R8, 0 */
		/* 82153A08h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82153A08h case   12:*/		return 0x82153A0C;
		  /* 82153A0Ch */ case   13:  		/* bc 4, CR6_EQ, 20 */
		/* 82153A0Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x82153A20;  }
		/* 82153A0Ch case   13:*/		return 0x82153A10;
		  /* 82153A10h */ case   14:  		/* lis R8, 4 */
		/* 82153A10h case   14:*/		cpu::op::lis<0>(regs,&regs.R8,0x4);
		/* 82153A10h case   14:*/		return 0x82153A14;
		  /* 82153A14h */ case   15:  		/* ori R8, R8, 32 */
		/* 82153A14h case   15:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x20);
		/* 82153A14h case   15:*/		return 0x82153A18;
		  /* 82153A18h */ case   16:  		/* stw R8, <#[R9]> */
		/* 82153A18h case   16:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 82153A18h case   16:*/		return 0x82153A1C;
		  /* 82153A1Ch */ case   17:  		/* b 88 */
		/* 82153A1Ch case   17:*/		return 0x82153A74;
		/* 82153A1Ch case   17:*/		return 0x82153A20;
	}
	return 0x82153A20;
} // Block from 821539D8h-82153A20h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82153A20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153A20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153A20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153A20);
		  /* 82153A20h */ case    0:  		/* rlwinm R6, R10, 14, 18, 31 */
		/* 82153A20h case    0:*/		cpu::op::rlwinm<0,14,18,31>(regs,&regs.R6,regs.R10);
		/* 82153A20h case    0:*/		return 0x82153A24;
		  /* 82153A24h */ case    1:  		/* rlwinm R10, R10, 18, 28, 29 */
		/* 82153A24h case    1:*/		cpu::op::rlwinm<0,18,28,29>(regs,&regs.R10,regs.R10);
		/* 82153A24h case    1:*/		return 0x82153A28;
		  /* 82153A28h */ case    2:  		/* rlwinm R5, R6, 30, 2, 31 */
		/* 82153A28h case    2:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R5,regs.R6);
		/* 82153A28h case    2:*/		return 0x82153A2C;
		  /* 82153A2Ch */ case    3:  		/* rlwinm R6, R6, 2, 28, 29 */
		/* 82153A2Ch case    3:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R6,regs.R6);
		/* 82153A2Ch case    3:*/		return 0x82153A30;
		  /* 82153A30h */ case    4:  		/* rlwinm R4, R5, 2, 28, 29 */
		/* 82153A30h case    4:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R4,regs.R5);
		/* 82153A30h case    4:*/		return 0x82153A34;
		  /* 82153A34h */ case    5:  		/* rlwinm R5, R5, 0, 28, 29 */
		/* 82153A34h case    5:*/		cpu::op::rlwinm<0,0,28,29>(regs,&regs.R5,regs.R5);
		/* 82153A34h case    5:*/		return 0x82153A38;
		  /* 82153A38h */ case    6:  		/* lwzx R10, <#[R10 + R11]> */
		/* 82153A38h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82153A38h case    6:*/		return 0x82153A3C;
		  /* 82153A3Ch */ case    7:  		/* lis R3, 68 */
		/* 82153A3Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R3,0x44);
		/* 82153A3Ch case    7:*/		return 0x82153A40;
		  /* 82153A40h */ case    8:  		/* lwzx R6, <#[R6 + R11]> */
		/* 82153A40h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 82153A40h case    8:*/		return 0x82153A44;
		  /* 82153A44h */ case    9:  		/* ori R3, R3, 32 */
		/* 82153A44h case    9:*/		cpu::op::ori<0>(regs,&regs.R3,regs.R3,0x20);
		/* 82153A44h case    9:*/		return 0x82153A48;
		  /* 82153A48h */ case   10:  		/* lwzx R4, <#[R4 + R11]> */
		/* 82153A48h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + regs.R11 + 0x00000000) );
		/* 82153A48h case   10:*/		return 0x82153A4C;
		  /* 82153A4Ch */ case   11:  		/* rlwinm R6, R6, 4, 0, 27 */
		/* 82153A4Ch case   11:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R6,regs.R6);
		/* 82153A4Ch case   11:*/		return 0x82153A50;
		  /* 82153A50h */ case   12:  		/* lwzx R5, <#[R5 + R11]> */
		/* 82153A50h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 82153A50h case   12:*/		return 0x82153A54;
		  /* 82153A54h */ case   13:  		/* rlwinm R4, R4, 8, 0, 23 */
		/* 82153A54h case   13:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R4,regs.R4);
		/* 82153A54h case   13:*/		return 0x82153A58;
		  /* 82153A58h */ case   14:  		/* stw R3, <#[R9]> */
		/* 82153A58h case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R9 + 0x00000000) );
		/* 82153A58h case   14:*/		return 0x82153A5C;
		  /* 82153A5Ch */ case   15:  		/* or R10, R6, R10 */
		/* 82153A5Ch case   15:*/		cpu::op::or<0>(regs,&regs.R10,regs.R6,regs.R10);
		/* 82153A5Ch case   15:*/		return 0x82153A60;
		  /* 82153A60h */ case   16:  		/* rlwinm R6, R5, 12, 0, 19 */
		/* 82153A60h case   16:*/		cpu::op::rlwinm<0,12,0,19>(regs,&regs.R6,regs.R5);
		/* 82153A60h case   16:*/		return 0x82153A64;
		  /* 82153A64h */ case   17:  		/* or R10, R4, R10 */
		/* 82153A64h case   17:*/		cpu::op::or<0>(regs,&regs.R10,regs.R4,regs.R10);
		/* 82153A64h case   17:*/		return 0x82153A68;
		  /* 82153A68h */ case   18:  		/* or R10, R6, R10 */
		/* 82153A68h case   18:*/		cpu::op::or<0>(regs,&regs.R10,regs.R6,regs.R10);
		/* 82153A68h case   18:*/		return 0x82153A6C;
		  /* 82153A6Ch */ case   19:  		/* or R10, R10, R8 */
		/* 82153A6Ch case   19:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 82153A6Ch case   19:*/		return 0x82153A70;
		  /* 82153A70h */ case   20:  		/* stwu R10, <#[R9 + 4]> */
		/* 82153A70h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000004) );
		regs.R9 = (uint32)(regs.R9 + 0x00000004);
		/* 82153A70h case   20:*/		return 0x82153A74;
	}
	return 0x82153A74;
} // Block from 82153A20h-82153A74h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82153A74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153A74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153A74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153A74);
		  /* 82153A74h */ case    0:  		/* addi R10, R9, 4 */
		/* 82153A74h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x4);
		/* 82153A74h case    0:*/		return 0x82153A78;
		  /* 82153A78h */ case    1:  		/* cmplw CR6, R29, R7 */
		/* 82153A78h case    1:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R7);
		/* 82153A78h case    1:*/		return 0x82153A7C;
		  /* 82153A7Ch */ case    2:  		/* bc 12, CR6_EQ, 88 */
		/* 82153A7Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82153AD4;  }
		/* 82153A7Ch case    2:*/		return 0x82153A80;
		  /* 82153A80h */ case    3:  		/* rlwinm R9, R29, 14, 18, 31 */
		/* 82153A80h case    3:*/		cpu::op::rlwinm<0,14,18,31>(regs,&regs.R9,regs.R29);
		/* 82153A80h case    3:*/		return 0x82153A84;
		  /* 82153A84h */ case    4:  		/* lis R8, 68 */
		/* 82153A84h case    4:*/		cpu::op::lis<0>(regs,&regs.R8,0x44);
		/* 82153A84h case    4:*/		return 0x82153A88;
		  /* 82153A88h */ case    5:  		/* rlwinm R7, R9, 30, 2, 31 */
		/* 82153A88h case    5:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R7,regs.R9);
		/* 82153A88h case    5:*/		return 0x82153A8C;
		  /* 82153A8Ch */ case    6:  		/* rlwinm R6, R29, 18, 28, 29 */
		/* 82153A8Ch case    6:*/		cpu::op::rlwinm<0,18,28,29>(regs,&regs.R6,regs.R29);
		/* 82153A8Ch case    6:*/		return 0x82153A90;
		  /* 82153A90h */ case    7:  		/* rlwinm R5, R7, 2, 28, 29 */
		/* 82153A90h case    7:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R5,regs.R7);
		/* 82153A90h case    7:*/		return 0x82153A94;
		  /* 82153A94h */ case    8:  		/* rlwinm R7, R7, 0, 28, 29 */
		/* 82153A94h case    8:*/		cpu::op::rlwinm<0,0,28,29>(regs,&regs.R7,regs.R7);
		/* 82153A94h case    8:*/		return 0x82153A98;
		  /* 82153A98h */ case    9:  		/* ori R8, R8, 33 */
		/* 82153A98h case    9:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x21);
		/* 82153A98h case    9:*/		return 0x82153A9C;
		  /* 82153A9Ch */ case   10:  		/* rlwinm R9, R9, 2, 28, 29 */
		/* 82153A9Ch case   10:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R9,regs.R9);
		/* 82153A9Ch case   10:*/		return 0x82153AA0;
		  /* 82153AA0h */ case   11:  		/* stw R8, <#[R10]> */
		/* 82153AA0h case   11:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82153AA0h case   11:*/		return 0x82153AA4;
		  /* 82153AA4h */ case   12:  		/* lwzx R8, <#[R6 + R11]> */
		/* 82153AA4h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R6 + regs.R11 + 0x00000000) );
		/* 82153AA4h case   12:*/		return 0x82153AA8;
	}
	return 0x82153AA8;
} // Block from 82153A74h-82153AA8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82153AA8h
// Function '?XXSkipConvertToILFunc@XGRAPHICS@@YAXPAPAKKW4ILOpCode@1@PAU_R400IL_RECORDED_INFO@1@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153AA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153AA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153AA8);
		  /* 82153AA8h */ case    0:  		/* lwzx R6, <#[R5 + R11]> */
		/* 82153AA8h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R5 + regs.R11 + 0x00000000) );
		/* 82153AA8h case    0:*/		return 0x82153AAC;
		  /* 82153AACh */ case    1:  		/* lwzx R7, <#[R7 + R11]> */
		/* 82153AACh case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 82153AACh case    1:*/		return 0x82153AB0;
		  /* 82153AB0h */ case    2:  		/* lwzx R11, <#[R9 + R11]> */
		/* 82153AB0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82153AB0h case    2:*/		return 0x82153AB4;
		  /* 82153AB4h */ case    3:  		/* rlwinm R11, R11, 4, 0, 27 */
		/* 82153AB4h case    3:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R11);
		/* 82153AB4h case    3:*/		return 0x82153AB8;
		  /* 82153AB8h */ case    4:  		/* or R11, R11, R8 */
		/* 82153AB8h case    4:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82153AB8h case    4:*/		return 0x82153ABC;
		  /* 82153ABCh */ case    5:  		/* rlwinm R9, R6, 8, 0, 23 */
		/* 82153ABCh case    5:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R9,regs.R6);
		/* 82153ABCh case    5:*/		return 0x82153AC0;
		  /* 82153AC0h */ case    6:  		/* rlwinm R8, R7, 12, 0, 19 */
		/* 82153AC0h case    6:*/		cpu::op::rlwinm<0,12,0,19>(regs,&regs.R8,regs.R7);
		/* 82153AC0h case    6:*/		return 0x82153AC4;
		  /* 82153AC4h */ case    7:  		/* or R11, R9, R11 */
		/* 82153AC4h case    7:*/		cpu::op::or<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82153AC4h case    7:*/		return 0x82153AC8;
		  /* 82153AC8h */ case    8:  		/* or R11, R8, R11 */
		/* 82153AC8h case    8:*/		cpu::op::or<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 82153AC8h case    8:*/		return 0x82153ACC;
		  /* 82153ACCh */ case    9:  		/* stwu R11, <#[R10 + 4]> */
		/* 82153ACCh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 82153ACCh case    9:*/		return 0x82153AD0;
		  /* 82153AD0h */ case   10:  		/* b 16 */
		/* 82153AD0h case   10:*/		return 0x82153AE0;
		/* 82153AD0h case   10:*/		return 0x82153AD4;
	}
	return 0x82153AD4;
} // Block from 82153AA8h-82153AD4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82153AD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153AD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153AD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153AD4);
		  /* 82153AD4h */ case    0:  		/* lis R9, 4 */
		/* 82153AD4h case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0x4);
		/* 82153AD4h case    0:*/		return 0x82153AD8;
		  /* 82153AD8h */ case    1:  		/* ori R9, R9, 33 */
		/* 82153AD8h case    1:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x21);
		/* 82153AD8h case    1:*/		return 0x82153ADC;
		  /* 82153ADCh */ case    2:  		/* stw R9, <#[R10]> */
		/* 82153ADCh case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82153ADCh case    2:*/		return 0x82153AE0;
	}
	return 0x82153AE0;
} // Block from 82153AD4h-82153AE0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82153AE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153AE0);
		  /* 82153AE0h */ case    0:  		/* addi R11, R10, 4 */
		/* 82153AE0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x4);
		/* 82153AE0h case    0:*/		return 0x82153AE4;
		  /* 82153AE4h */ case    1:  		/* stw R11, <#[R28]> */
		/* 82153AE4h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82153AE4h case    1:*/		return 0x82153AE8;
		  /* 82153AE8h */ case    2:  		/* addi R1, R1, 144 */
		/* 82153AE8h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82153AE8h case    2:*/		return 0x82153AEC;
		  /* 82153AECh */ case    3:  		/* b -796744 */
		/* 82153AECh case    3:*/		return 0x820912A4;
		/* 82153AECh case    3:*/		return 0x82153AF0;
	}
	return 0x82153AF0;
} // Block from 82153AE0h-82153AF0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82153AF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153AF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153AF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153AF0);
		  /* 82153AF0h */ case    0:  		/* mfspr R12, LR */
		/* 82153AF0h case    0:*/		regs.R12 = regs.LR;
		/* 82153AF0h case    0:*/		return 0x82153AF4;
		  /* 82153AF4h */ case    1:  		/* bl -796836 */
		/* 82153AF4h case    1:*/		regs.LR = 0x82153AF8; return 0x82091250;
		/* 82153AF4h case    1:*/		return 0x82153AF8;
		  /* 82153AF8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82153AF8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82153AF8h case    2:*/		return 0x82153AFC;
		  /* 82153AFCh */ case    3:  		/* lwz R11, <#[R7]> */
		/* 82153AFCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 82153AFCh case    3:*/		return 0x82153B00;
	}
	return 0x82153B00;
} // Block from 82153AF0h-82153B00h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82153B00h
// Function '?TEXDEPTHConvertToILFunc@XGRAPHICS@@YAXPAPAKKW4ILOpCode@1@PAU_R400IL_RECORDED_INFO@1@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153B00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153B00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153B00);
		  /* 82153B00h */ case    0:  		/* li R9, 71 */
		/* 82153B00h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x47);
		/* 82153B00h case    0:*/		return 0x82153B04;
		  /* 82153B04h */ case    1:  		/* mr R8, R3 */
		/* 82153B04h case    1:*/		regs.R8 = regs.R3;
		/* 82153B04h case    1:*/		return 0x82153B08;
		  /* 82153B08h */ case    2:  		/* mr R27, R4 */
		/* 82153B08h case    2:*/		regs.R27 = regs.R4;
		/* 82153B08h case    2:*/		return 0x82153B0C;
		  /* 82153B0Ch */ case    3:  		/* rlwimi R8, R3, 12, 21, 23 */
		/* 82153B0Ch case    3:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R8,regs.R3);
		/* 82153B0Ch case    3:*/		return 0x82153B10;
		  /* 82153B10h */ case    4:  		/* mr R28, R5 */
		/* 82153B10h case    4:*/		regs.R28 = regs.R5;
		/* 82153B10h case    4:*/		return 0x82153B14;
		  /* 82153B14h */ case    5:  		/* stw R9, <#[R11]> */
		/* 82153B14h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82153B14h case    5:*/		return 0x82153B18;
		  /* 82153B18h */ case    6:  		/* mr R10, R3 */
		/* 82153B18h case    6:*/		regs.R10 = regs.R3;
		/* 82153B18h case    6:*/		return 0x82153B1C;
		  /* 82153B1Ch */ case    7:  		/* mr R5, R6 */
		/* 82153B1Ch case    7:*/		regs.R5 = regs.R6;
		/* 82153B1Ch case    7:*/		return 0x82153B20;
		  /* 82153B20h */ case    8:  		/* rlwinm R4, R3, 0, 21, 31 */
		/* 82153B20h case    8:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R4,regs.R3);
		/* 82153B20h case    8:*/		return 0x82153B24;
		  /* 82153B24h */ case    9:  		/* addi R6, R1, 80 */
		/* 82153B24h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82153B24h case    9:*/		return 0x82153B28;
		  /* 82153B28h */ case   10:  		/* rlwinm R3, R8, 24, 27, 31 */
		/* 82153B28h case   10:*/		cpu::op::rlwinm<0,24,27,31>(regs,&regs.R3,regs.R8);
		/* 82153B28h case   10:*/		return 0x82153B2C;
		  /* 82153B2Ch */ case   11:  		/* mr R26, R7 */
		/* 82153B2Ch case   11:*/		regs.R26 = regs.R7;
		/* 82153B2Ch case   11:*/		return 0x82153B30;
		  /* 82153B30h */ case   12:  		/* addi R31, R11, 4 */
		/* 82153B30h case   12:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 82153B30h case   12:*/		return 0x82153B34;
		  /* 82153B34h */ case   13:  		/* rlwinm R29, R10, 0, 12, 15 */
		/* 82153B34h case   13:*/		cpu::op::rlwinm<0,0,12,15>(regs,&regs.R29,regs.R10);
		/* 82153B34h case   13:*/		return 0x82153B38;
		  /* 82153B38h */ case   14:  		/* bl -3144 */
		/* 82153B38h case   14:*/		regs.LR = 0x82153B3C; return 0x82152EF0;
		/* 82153B38h case   14:*/		return 0x82153B3C;
		  /* 82153B3Ch */ case   15:  		/* mr R11, R27 */
		/* 82153B3Ch case   15:*/		regs.R11 = regs.R27;
		/* 82153B3Ch case   15:*/		return 0x82153B40;
		  /* 82153B40h */ case   16:  		/* mr R30, R3 */
		/* 82153B40h case   16:*/		regs.R30 = regs.R3;
		/* 82153B40h case   16:*/		return 0x82153B44;
		  /* 82153B44h */ case   17:  		/* rlwimi R11, R27, 12, 21, 23 */
		/* 82153B44h case   17:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R11,regs.R27);
		/* 82153B44h case   17:*/		return 0x82153B48;
		  /* 82153B48h */ case   18:  		/* rlwinm R27, R27, 0, 21, 31 */
		/* 82153B48h case   18:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R27,regs.R27);
		/* 82153B48h case   18:*/		return 0x82153B4C;
		  /* 82153B4Ch */ case   19:  		/* rlwinm. R11, R11, 0, 19, 23 */
		/* 82153B4Ch case   19:*/		cpu::op::rlwinm<1,0,19,23>(regs,&regs.R11,regs.R11);
		/* 82153B4Ch case   19:*/		return 0x82153B50;
		  /* 82153B50h */ case   20:  		/* bc 12, CR0_EQ, 8 */
		/* 82153B50h case   20:*/		if ( regs.CR[0].eq ) { return 0x82153B58;  }
		/* 82153B50h case   20:*/		return 0x82153B54;
		  /* 82153B54h */ case   21:  		/* bl 1128204 */
		/* 82153B54h case   21:*/		regs.LR = 0x82153B58; return 0x82267260;
		/* 82153B54h case   21:*/		return 0x82153B58;
	}
	return 0x82153B58;
} // Block from 82153B00h-82153B58h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82153B58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153B58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153B58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153B58);
		  /* 82153B58h */ case    0:  		/* lis R11, 15 */
		/* 82153B58h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xF);
		/* 82153B58h case    0:*/		return 0x82153B5C;
		  /* 82153B5Ch */ case    1:  		/* cmplw CR6, R29, R11 */
		/* 82153B5Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 82153B5Ch case    1:*/		return 0x82153B60;
		  /* 82153B60h */ case    2:  		/* bc 12, CR6_EQ, 96 */
		/* 82153B60h case    2:*/		if ( regs.CR[6].eq ) { return 0x82153BC0;  }
		/* 82153B60h case    2:*/		return 0x82153B64;
		  /* 82153B64h */ case    3:  		/* lwz R11, <#[R1 + 80]> */
		/* 82153B64h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82153B64h case    3:*/		return 0x82153B68;
		  /* 82153B68h */ case    4:  		/* lis R10, 64 */
		/* 82153B68h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0x40);
		/* 82153B68h case    4:*/		return 0x82153B6C;
		  /* 82153B6Ch */ case    5:  		/* rlwinm R9, R30, 0, 16, 31 */
		/* 82153B6Ch case    5:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R30);
		/* 82153B6Ch case    5:*/		return 0x82153B70;
		  /* 82153B70h */ case    6:  		/* rlwimi R10, R11, 16, 10, 15 */
		/* 82153B70h case    6:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R10,regs.R11);
		/* 82153B70h case    6:*/		return 0x82153B74;
		  /* 82153B74h */ case    7:  		/* rlwinm. R8, R29, 0, 15, 15 */
		/* 82153B74h case    7:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R8,regs.R29);
		/* 82153B74h case    7:*/		return 0x82153B78;
		  /* 82153B78h */ case    8:  		/* or R10, R10, R9 */
		/* 82153B78h case    8:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82153B78h case    8:*/		return 0x82153B7C;
		  /* 82153B7Ch */ case    9:  		/* li R11, 0 */
		/* 82153B7Ch case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82153B7Ch case    9:*/		return 0x82153B80;
		  /* 82153B80h */ case   10:  		/* stw R10, <#[R31]> */
		/* 82153B80h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82153B80h case   10:*/		return 0x82153B84;
		  /* 82153B84h */ case   11:  		/* addi R10, R31, 4 */
		/* 82153B84h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x4);
		/* 82153B84h case   11:*/		return 0x82153B88;
		  /* 82153B88h */ case   12:  		/* bc 12, CR0_EQ, 8 */
		/* 82153B88h case   12:*/		if ( regs.CR[0].eq ) { return 0x82153B90;  }
		/* 82153B88h case   12:*/		return 0x82153B8C;
		  /* 82153B8Ch */ case   13:  		/* li R11, 1 */
		/* 82153B8Ch case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82153B8Ch case   13:*/		return 0x82153B90;
	}
	return 0x82153B90;
} // Block from 82153B58h-82153B90h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82153B90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153B90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153B90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153B90);
		  /* 82153B90h */ case    0:  		/* rlwinm. R9, R29, 0, 14, 14 */
		/* 82153B90h case    0:*/		cpu::op::rlwinm<1,0,14,14>(regs,&regs.R9,regs.R29);
		/* 82153B90h case    0:*/		return 0x82153B94;
		  /* 82153B94h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 82153B94h case    1:*/		if ( regs.CR[0].eq ) { return 0x82153B9C;  }
		/* 82153B94h case    1:*/		return 0x82153B98;
		  /* 82153B98h */ case    2:  		/* ori R11, R11, 4 */
		/* 82153B98h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82153B98h case    2:*/		return 0x82153B9C;
	}
	return 0x82153B9C;
} // Block from 82153B90h-82153B9Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82153B9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153B9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153B9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153B9C);
		  /* 82153B9Ch */ case    0:  		/* rlwinm. R9, R29, 0, 13, 13 */
		/* 82153B9Ch case    0:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R9,regs.R29);
		/* 82153B9Ch case    0:*/		return 0x82153BA0;
		  /* 82153BA0h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 82153BA0h case    1:*/		if ( regs.CR[0].eq ) { return 0x82153BA8;  }
		/* 82153BA0h case    1:*/		return 0x82153BA4;
		  /* 82153BA4h */ case    2:  		/* ori R11, R11, 16 */
		/* 82153BA4h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x10);
		/* 82153BA4h case    2:*/		return 0x82153BA8;
	}
	return 0x82153BA8;
} // Block from 82153B9Ch-82153BA8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82153BA8h
// Function '?AL_GetEntry@@YAPAXPAU_ATILIST@@K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153BA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153BA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153BA8);
		  /* 82153BA8h */ case    0:  		/* rlwinm. R9, R29, 0, 12, 12 */
		/* 82153BA8h case    0:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R9,regs.R29);
		/* 82153BA8h case    0:*/		return 0x82153BAC;
		  /* 82153BACh */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 82153BACh case    1:*/		if ( regs.CR[0].eq ) { return 0x82153BB4;  }
		/* 82153BACh case    1:*/		return 0x82153BB0;
		  /* 82153BB0h */ case    2:  		/* ori R11, R11, 64 */
		/* 82153BB0h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x40);
		/* 82153BB0h case    2:*/		return 0x82153BB4;
	}
	return 0x82153BB4;
} // Block from 82153BA8h-82153BB4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82153BB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153BB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153BB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153BB4);
		  /* 82153BB4h */ case    0:  		/* stw R11, <#[R10]> */
		/* 82153BB4h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82153BB4h case    0:*/		return 0x82153BB8;
		  /* 82153BB8h */ case    1:  		/* addi R11, R10, 4 */
		/* 82153BB8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x4);
		/* 82153BB8h case    1:*/		return 0x82153BBC;
		  /* 82153BBCh */ case    2:  		/* b 24 */
		/* 82153BBCh case    2:*/		return 0x82153BD4;
		/* 82153BBCh case    2:*/		return 0x82153BC0;
	}
	return 0x82153BC0;
} // Block from 82153BB4h-82153BC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82153BC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153BC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153BC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153BC0);
		  /* 82153BC0h */ case    0:  		/* lwz R10, <#[R1 + 80]> */
		/* 82153BC0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82153BC0h case    0:*/		return 0x82153BC4;
		  /* 82153BC4h */ case    1:  		/* addi R11, R31, 4 */
		/* 82153BC4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 82153BC4h case    1:*/		return 0x82153BC8;
		  /* 82153BC8h */ case    2:  		/* rlwimi R30, R10, 16, 10, 15 */
		/* 82153BC8h case    2:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R30,regs.R10);
		/* 82153BC8h case    2:*/		return 0x82153BCC;
		  /* 82153BCCh */ case    3:  		/* rlwinm R10, R30, 0, 10, 31 */
		/* 82153BCCh case    3:*/		cpu::op::rlwinm<0,0,10,31>(regs,&regs.R10,regs.R30);
		/* 82153BCCh case    3:*/		return 0x82153BD0;
		  /* 82153BD0h */ case    4:  		/* stw R10, <#[R31]> */
		/* 82153BD0h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82153BD0h case    4:*/		return 0x82153BD4;
	}
	return 0x82153BD4;
} // Block from 82153BC0h-82153BD4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82153BD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153BD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153BD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153BD4);
		  /* 82153BD4h */ case    0:  		/* rlwinm R10, R28, 14, 18, 31 */
		/* 82153BD4h case    0:*/		cpu::op::rlwinm<0,14,18,31>(regs,&regs.R10,regs.R28);
		/* 82153BD4h case    0:*/		return 0x82153BD8;
		  /* 82153BD8h */ case    1:  		/* lis R9, -32217 */
		/* 82153BD8h case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8227);
		/* 82153BD8h case    1:*/		return 0x82153BDC;
		  /* 82153BDCh */ case    2:  		/* rlwinm R8, R10, 30, 2, 31 */
		/* 82153BDCh case    2:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R8,regs.R10);
		/* 82153BDCh case    2:*/		return 0x82153BE0;
		  /* 82153BE0h */ case    3:  		/* li R7, 17 */
		/* 82153BE0h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x11);
		/* 82153BE0h case    3:*/		return 0x82153BE4;
		  /* 82153BE4h */ case    4:  		/* addi R9, R9, 19772 */
		/* 82153BE4h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4D3C);
		/* 82153BE4h case    4:*/		return 0x82153BE8;
		  /* 82153BE8h */ case    5:  		/* rlwinm R6, R8, 2, 28, 29 */
		/* 82153BE8h case    5:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R6,regs.R8);
		/* 82153BE8h case    5:*/		return 0x82153BEC;
		  /* 82153BECh */ case    6:  		/* rlwinm R5, R28, 18, 28, 29 */
		/* 82153BECh case    6:*/		cpu::op::rlwinm<0,18,28,29>(regs,&regs.R5,regs.R28);
		/* 82153BECh case    6:*/		return 0x82153BF0;
		  /* 82153BF0h */ case    7:  		/* rlwimi R27, R7, 18, 0, 15 */
		/* 82153BF0h case    7:*/		cpu::op::rlwimi<0,18,0,15>(regs,&regs.R27,regs.R7);
		/* 82153BF0h case    7:*/		return 0x82153BF4;
		  /* 82153BF4h */ case    8:  		/* rlwinm R8, R8, 0, 28, 29 */
		/* 82153BF4h case    8:*/		cpu::op::rlwinm<0,0,28,29>(regs,&regs.R8,regs.R8);
		/* 82153BF4h case    8:*/		return 0x82153BF8;
		  /* 82153BF8h */ case    9:  		/* stw R27, <#[R11]> */
		/* 82153BF8h case    9:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 82153BF8h case    9:*/		return 0x82153BFC;
		  /* 82153BFCh */ case   10:  		/* rlwinm R10, R10, 2, 28, 29 */
		/* 82153BFCh case   10:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R10,regs.R10);
		/* 82153BFCh case   10:*/		return 0x82153C00;
		  /* 82153C00h */ case   11:  		/* lwzx R7, <#[R6 + R9]> */
		/* 82153C00h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R6 + regs.R9 + 0x00000000) );
		/* 82153C00h case   11:*/		return 0x82153C04;
		  /* 82153C04h */ case   12:  		/* lwzx R6, <#[R5 + R9]> */
		/* 82153C04h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R5 + regs.R9 + 0x00000000) );
		/* 82153C04h case   12:*/		return 0x82153C08;
		  /* 82153C08h */ case   13:  		/* lwzx R8, <#[R8 + R9]> */
		/* 82153C08h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 82153C08h case   13:*/		return 0x82153C0C;
		  /* 82153C0Ch */ case   14:  		/* lwzx R10, <#[R10 + R9]> */
		/* 82153C0Ch case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82153C0Ch case   14:*/		return 0x82153C10;
	}
	return 0x82153C10;
} // Block from 82153BD4h-82153C10h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82153C10h
// Function '?AL_IsEntryValid@@YAHPAU_ATILIST@@K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153C10);
		  /* 82153C10h */ case    0:  		/* rlwinm R10, R10, 4, 0, 27 */
		/* 82153C10h case    0:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R10,regs.R10);
		/* 82153C10h case    0:*/		return 0x82153C14;
		  /* 82153C14h */ case    1:  		/* or R10, R10, R6 */
		/* 82153C14h case    1:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R6);
		/* 82153C14h case    1:*/		return 0x82153C18;
		  /* 82153C18h */ case    2:  		/* rlwinm R9, R7, 8, 0, 23 */
		/* 82153C18h case    2:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R9,regs.R7);
		/* 82153C18h case    2:*/		return 0x82153C1C;
		  /* 82153C1Ch */ case    3:  		/* rlwinm R8, R8, 12, 0, 19 */
		/* 82153C1Ch case    3:*/		cpu::op::rlwinm<0,12,0,19>(regs,&regs.R8,regs.R8);
		/* 82153C1Ch case    3:*/		return 0x82153C20;
		  /* 82153C20h */ case    4:  		/* or R10, R9, R10 */
		/* 82153C20h case    4:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82153C20h case    4:*/		return 0x82153C24;
		  /* 82153C24h */ case    5:  		/* or R10, R8, R10 */
		/* 82153C24h case    5:*/		cpu::op::or<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 82153C24h case    5:*/		return 0x82153C28;
		  /* 82153C28h */ case    6:  		/* stwu R10, <#[R11 + 4]> */
		/* 82153C28h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82153C28h case    6:*/		return 0x82153C2C;
		  /* 82153C2Ch */ case    7:  		/* addi R11, R11, 4 */
		/* 82153C2Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82153C2Ch case    7:*/		return 0x82153C30;
		  /* 82153C30h */ case    8:  		/* stw R11, <#[R26]> */
		/* 82153C30h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82153C30h case    8:*/		return 0x82153C34;
		  /* 82153C34h */ case    9:  		/* addi R1, R1, 144 */
		/* 82153C34h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82153C34h case    9:*/		return 0x82153C38;
		  /* 82153C38h */ case   10:  		/* b -797080 */
		/* 82153C38h case   10:*/		return 0x820912A0;
		/* 82153C38h case   10:*/		return 0x82153C3C;
		  /* 82153C3Ch */ case   11:  		/* nop */
		/* 82153C3Ch case   11:*/		cpu::op::nop();
		/* 82153C3Ch case   11:*/		return 0x82153C40;
	}
	return 0x82153C40;
} // Block from 82153C10h-82153C40h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82153C40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153C40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153C40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153C40);
		  /* 82153C40h */ case    0:  		/* mfspr R12, LR */
		/* 82153C40h case    0:*/		regs.R12 = regs.LR;
		/* 82153C40h case    0:*/		return 0x82153C44;
		  /* 82153C44h */ case    1:  		/* bl -797212 */
		/* 82153C44h case    1:*/		regs.LR = 0x82153C48; return 0x82091228;
		/* 82153C44h case    1:*/		return 0x82153C48;
		  /* 82153C48h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 82153C48h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 82153C48h case    2:*/		return 0x82153C4C;
		  /* 82153C4Ch */ case    3:  		/* lwz R31, <#[R3]> */
		/* 82153C4Ch case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 82153C4Ch case    3:*/		return 0x82153C50;
		  /* 82153C50h */ case    4:  		/* mr R19, R3 */
		/* 82153C50h case    4:*/		regs.R19 = regs.R3;
		/* 82153C50h case    4:*/		return 0x82153C54;
		  /* 82153C54h */ case    5:  		/* lwz R29, <#[R7]> */
		/* 82153C54h case    5:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R7 + 0x00000000) );
		/* 82153C54h case    5:*/		return 0x82153C58;
		  /* 82153C58h */ case    6:  		/* mr R22, R4 */
		/* 82153C58h case    6:*/		regs.R22 = regs.R4;
		/* 82153C58h case    6:*/		return 0x82153C5C;
		  /* 82153C5Ch */ case    7:  		/* mr R30, R5 */
		/* 82153C5Ch case    7:*/		regs.R30 = regs.R5;
		/* 82153C5Ch case    7:*/		return 0x82153C60;
	}
	return 0x82153C60;
} // Block from 82153C40h-82153C60h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82153C60h
// Function '?AL_GrowArray@@YAHPAU_ATILIST@@K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153C60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153C60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153C60);
		  /* 82153C60h */ case    0:  		/* mr R26, R6 */
		/* 82153C60h case    0:*/		regs.R26 = regs.R6;
		/* 82153C60h case    0:*/		return 0x82153C64;
		  /* 82153C64h */ case    1:  		/* mr R17, R7 */
		/* 82153C64h case    1:*/		regs.R17 = regs.R7;
		/* 82153C64h case    1:*/		return 0x82153C68;
		  /* 82153C68h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 82153C68h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82153C68h case    2:*/		return 0x82153C6C;
		  /* 82153C6Ch */ case    3:  		/* lwzu R10, <#[R31 + 4]> */
		/* 82153C6Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82153C6Ch case    3:*/		return 0x82153C70;
		  /* 82153C70h */ case    4:  		/* rlwinm R18, R11, 0, 3, 3 */
		/* 82153C70h case    4:*/		cpu::op::rlwinm<0,0,3,3>(regs,&regs.R18,regs.R11);
		/* 82153C70h case    4:*/		return 0x82153C74;
		  /* 82153C74h */ case    5:  		/* rlwinm. R10, R10, 0, 0, 0 */
		/* 82153C74h case    5:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R10,regs.R10);
		/* 82153C74h case    5:*/		return 0x82153C78;
		  /* 82153C78h */ case    6:  		/* rlwinm R16, R11, 0, 1, 1 */
		/* 82153C78h case    6:*/		cpu::op::rlwinm<0,0,1,1>(regs,&regs.R16,regs.R11);
		/* 82153C78h case    6:*/		return 0x82153C7C;
		  /* 82153C7Ch */ case    7:  		/* rlwinm R24, R11, 0, 16, 31 */
		/* 82153C7Ch case    7:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R24,regs.R11);
		/* 82153C7Ch case    7:*/		return 0x82153C80;
		  /* 82153C80h */ case    8:  		/* bc 4, CR0_EQ, 8 */
		/* 82153C80h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82153C88;  }
		/* 82153C80h case    8:*/		return 0x82153C84;
		  /* 82153C84h */ case    9:  		/* bl 1127900 */
		/* 82153C84h case    9:*/		regs.LR = 0x82153C88; return 0x82267260;
		/* 82153C84h case    9:*/		return 0x82153C88;
	}
	return 0x82153C88;
} // Block from 82153C60h-82153C88h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82153C88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153C88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153C88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153C88);
		  /* 82153C88h */ case    0:  		/* lis R11, -1 */
		/* 82153C88h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82153C88h case    0:*/		return 0x82153C8C;
		  /* 82153C8Ch */ case    1:  		/* lwz R27, <#[R31]> */
		/* 82153C8Ch case    1:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R31 + 0x00000000) );
		/* 82153C8Ch case    1:*/		return 0x82153C90;
		  /* 82153C90h */ case    2:  		/* addi R28, R31, 4 */
		/* 82153C90h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R31,0x4);
		/* 82153C90h case    2:*/		return 0x82153C94;
		  /* 82153C94h */ case    3:  		/* ori R23, R11, 512 */
		/* 82153C94h case    3:*/		cpu::op::ori<0>(regs,&regs.R23,regs.R11,0x200);
		/* 82153C94h case    3:*/		return 0x82153C98;
		  /* 82153C98h */ case    4:  		/* mr R20, R27 */
		/* 82153C98h case    4:*/		regs.R20 = regs.R27;
		/* 82153C98h case    4:*/		return 0x82153C9C;
		  /* 82153C9Ch */ case    5:  		/* cmplw CR6, R22, R23 */
		/* 82153C9Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R23);
		/* 82153C9Ch case    5:*/		return 0x82153CA0;
		  /* 82153CA0h */ case    6:  		/* bc 4, CR6_LT, 88 */
		/* 82153CA0h case    6:*/		if ( !regs.CR[6].lt ) { return 0x82153CF8;  }
		/* 82153CA0h case    6:*/		return 0x82153CA4;
		  /* 82153CA4h */ case    7:  		/* lwz R11, <#[R26 + 428]> */
		/* 82153CA4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x000001AC) );
		/* 82153CA4h case    7:*/		return 0x82153CA8;
		  /* 82153CA8h */ case    8:  		/* lwz R10, <#[R19]> */
		/* 82153CA8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x00000000) );
		/* 82153CA8h case    8:*/		return 0x82153CAC;
		  /* 82153CACh */ case    9:  		/* addi R9, R11, 25 */
		/* 82153CACh case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x19);
		/* 82153CACh case    9:*/		return 0x82153CB0;
		  /* 82153CB0h */ case   10:  		/* rlwinm R9, R9, 3, 0, 28 */
		/* 82153CB0h case   10:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R9,regs.R9);
		/* 82153CB0h case   10:*/		return 0x82153CB4;
		  /* 82153CB4h */ case   11:  		/* lwzx R9, <#[R9 + R26]> */
		/* 82153CB4h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R26 + 0x00000000) );
		/* 82153CB4h case   11:*/		return 0x82153CB8;
		  /* 82153CB8h */ case   12:  		/* cmplw CR6, R10, R9 */
		/* 82153CB8h case   12:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82153CB8h case   12:*/		return 0x82153CBC;
		  /* 82153CBCh */ case   13:  		/* bc 4, CR6_EQ, 60 */
		/* 82153CBCh case   13:*/		if ( !regs.CR[6].eq ) { return 0x82153CF8;  }
		/* 82153CBCh case   13:*/		return 0x82153CC0;
		  /* 82153CC0h */ case   14:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 82153CC0h case   14:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 82153CC0h case   14:*/		return 0x82153CC4;
		  /* 82153CC4h */ case   15:  		/* add R11, R11, R26 */
		/* 82153CC4h case   15:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 82153CC4h case   15:*/		return 0x82153CC8;
		  /* 82153CC8h */ case   16:  		/* lwz R11, <#[R11 + 204]> */
		/* 82153CC8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x000000CC) );
		/* 82153CC8h case   16:*/		return 0x82153CCC;
		  /* 82153CCCh */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 82153CCCh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82153CCCh case   17:*/		return 0x82153CD0;
		  /* 82153CD0h */ case   18:  		/* bc 4, CR6_EQ, 8 */
		/* 82153CD0h case   18:*/		if ( !regs.CR[6].eq ) { return 0x82153CD8;  }
		/* 82153CD0h case   18:*/		return 0x82153CD4;
		  /* 82153CD4h */ case   19:  		/* bl 1127820 */
		/* 82153CD4h case   19:*/		regs.LR = 0x82153CD8; return 0x82267260;
		/* 82153CD4h case   19:*/		return 0x82153CD8;
	}
	return 0x82153CD8;
} // Block from 82153C88h-82153CD8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82153CD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153CD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153CD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153CD8);
		  /* 82153CD8h */ case    0:  		/* cmpwi CR6, R16, 0 */
		/* 82153CD8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R16,0x00000000);
		/* 82153CD8h case    0:*/		return 0x82153CDC;
		  /* 82153CDCh */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 82153CDCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82153CE4;  }
		/* 82153CDCh case    1:*/		return 0x82153CE0;
		  /* 82153CE0h */ case    2:  		/* bl 1127808 */
		/* 82153CE0h case    2:*/		regs.LR = 0x82153CE4; return 0x82267260;
		/* 82153CE0h case    2:*/		return 0x82153CE4;
	}
	return 0x82153CE4;
} // Block from 82153CD8h-82153CE4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82153CE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153CE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153CE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153CE4);
		  /* 82153CE4h */ case    0:  		/* lis R12, -28673 */
		/* 82153CE4h case    0:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8FFF);
		/* 82153CE4h case    0:*/		return 0x82153CE8;
		  /* 82153CE8h */ case    1:  		/* ori R12, R12, 57360 */
		/* 82153CE8h case    1:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xE010);
		/* 82153CE8h case    1:*/		return 0x82153CEC;
		  /* 82153CECh */ case    2:  		/* and R11, R27, R12 */
		/* 82153CECh case    2:*/		cpu::op::and<0>(regs,&regs.R11,regs.R27,regs.R12);
		/* 82153CECh case    2:*/		return 0x82153CF0;
		  /* 82153CF0h */ case    3:  		/* oris R27, R11, 15 */
		/* 82153CF0h case    3:*/		cpu::op::oris<0>(regs,&regs.R27,regs.R11,0xF);
		/* 82153CF0h case    3:*/		return 0x82153CF4;
		  /* 82153CF4h */ case    4:  		/* ori R27, R27, 16 */
		/* 82153CF4h case    4:*/		cpu::op::ori<0>(regs,&regs.R27,regs.R27,0x10);
		/* 82153CF4h case    4:*/		return 0x82153CF8;
	}
	return 0x82153CF8;
} // Block from 82153CE4h-82153CF8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82153CF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153CF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153CF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153CF8);
		  /* 82153CF8h */ case    0:  		/* cmpwi CR6, R18, 0 */
		/* 82153CF8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R18,0x00000000);
		/* 82153CF8h case    0:*/		return 0x82153CFC;
		  /* 82153CFCh */ case    1:  		/* bc 12, CR6_EQ, 48 */
		/* 82153CFCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82153D2C;  }
		/* 82153CFCh case    1:*/		return 0x82153D00;
		  /* 82153D00h */ case    2:  		/* lis R12, -28673 */
		/* 82153D00h case    2:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8FFF);
		/* 82153D00h case    2:*/		return 0x82153D04;
		  /* 82153D04h */ case    3:  		/* lwz R21, <#[R28]> */
		/* 82153D04h case    3:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R28 + 0x00000000) );
		/* 82153D04h case    3:*/		return 0x82153D08;
		  /* 82153D08h */ case    4:  		/* addi R28, R28, 4 */
		/* 82153D08h case    4:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 82153D08h case    4:*/		return 0x82153D0C;
		  /* 82153D0Ch */ case    5:  		/* ori R12, R12, 57377 */
		/* 82153D0Ch case    5:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xE021);
		/* 82153D0Ch case    5:*/		return 0x82153D10;
		  /* 82153D10h */ case    6:  		/* cmplw CR6, R22, R23 */
		/* 82153D10h case    6:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R23);
		/* 82153D10h case    6:*/		return 0x82153D14;
		  /* 82153D14h */ case    7:  		/* and R11, R27, R12 */
		/* 82153D14h case    7:*/		cpu::op::and<0>(regs,&regs.R11,regs.R27,regs.R12);
		/* 82153D14h case    7:*/		return 0x82153D18;
		  /* 82153D18h */ case    8:  		/* oris R27, R11, 15 */
		/* 82153D18h case    8:*/		cpu::op::oris<0>(regs,&regs.R27,regs.R11,0xF);
		/* 82153D18h case    8:*/		return 0x82153D1C;
		  /* 82153D1Ch */ case    9:  		/* ori R27, R27, 33 */
		/* 82153D1Ch case    9:*/		cpu::op::ori<0>(regs,&regs.R27,regs.R27,0x21);
		/* 82153D1Ch case    9:*/		return 0x82153D20;
		  /* 82153D20h */ case   10:  		/* bc 4, CR6_LT, 16 */
		/* 82153D20h case   10:*/		if ( !regs.CR[6].lt ) { return 0x82153D30;  }
		/* 82153D20h case   10:*/		return 0x82153D24;
		  /* 82153D24h */ case   11:  		/* bl 1127740 */
		/* 82153D24h case   11:*/		regs.LR = 0x82153D28; return 0x82267260;
		/* 82153D24h case   11:*/		return 0x82153D28;
		  /* 82153D28h */ case   12:  		/* b 8 */
		/* 82153D28h case   12:*/		return 0x82153D30;
		/* 82153D28h case   12:*/		return 0x82153D2C;
	}
	return 0x82153D2C;
} // Block from 82153CF8h-82153D2Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 82153D2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153D2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153D2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153D2C);
		  /* 82153D2Ch */ case    0:  		/* lwz R21, <#[R1 + 80]> */
		/* 82153D2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x00000050) );
		/* 82153D2Ch case    0:*/		return 0x82153D30;
	}
	return 0x82153D30;
} // Block from 82153D2Ch-82153D30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82153D30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153D30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153D30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153D30);
		  /* 82153D30h */ case    0:  		/* li R25, 1 */
		/* 82153D30h case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 82153D30h case    0:*/		return 0x82153D34;
		  /* 82153D34h */ case    1:  		/* cmpwi CR6, R30, 13 */
		/* 82153D34h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x0000000D);
		/* 82153D34h case    1:*/		return 0x82153D38;
		  /* 82153D38h */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 82153D38h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82153D54;  }
		/* 82153D38h case    2:*/		return 0x82153D3C;
		  /* 82153D3Ch */ case    3:  		/* cmplwi CR6, R24, 80 */
		/* 82153D3Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000050);
		/* 82153D3Ch case    3:*/		return 0x82153D40;
		  /* 82153D40h */ case    4:  		/* lis R11, 67 */
		/* 82153D40h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0x43);
		/* 82153D40h case    4:*/		return 0x82153D44;
		  /* 82153D44h */ case    5:  		/* bc 12, CR6_EQ, 8 */
		/* 82153D44h case    5:*/		if ( regs.CR[6].eq ) { return 0x82153D4C;  }
		/* 82153D44h case    5:*/		return 0x82153D48;
	}
	return 0x82153D48;
} // Block from 82153D30h-82153D48h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82153D48h
// Function '?AL_GetNewEntry@@YAPAXPAU_ATILIST@@K@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153D48);
		  /* 82153D48h */ case    0:  		/* lis R11, 2 */
		/* 82153D48h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x2);
		/* 82153D48h case    0:*/		return 0x82153D4C;
	}
	return 0x82153D4C;
} // Block from 82153D48h-82153D4Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82153D4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153D4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153D4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153D4C);
		  /* 82153D4Ch */ case    0:  		/* ori R11, R11, 13 */
		/* 82153D4Ch case    0:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xD);
		/* 82153D4Ch case    0:*/		return 0x82153D50;
		  /* 82153D50h */ case    1:  		/* b 260 */
		/* 82153D50h case    1:*/		return 0x82153E54;
		/* 82153D50h case    1:*/		return 0x82153D54;
	}
	return 0x82153D54;
} // Block from 82153D4Ch-82153D54h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82153D54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153D54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153D54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153D54);
		  /* 82153D54h */ case    0:  		/* cmpwi CR6, R30, 69 */
		/* 82153D54h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000045);
		/* 82153D54h case    0:*/		return 0x82153D58;
		  /* 82153D58h */ case    1:  		/* bc 4, CR6_EQ, 112 */
		/* 82153D58h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82153DC8;  }
		/* 82153D58h case    1:*/		return 0x82153D5C;
		  /* 82153D5Ch */ case    2:  		/* li R31, 69 */
		/* 82153D5Ch case    2:*/		cpu::op::li<0>(regs,&regs.R31,0x45);
		/* 82153D5Ch case    2:*/		return 0x82153D60;
		  /* 82153D60h */ case    3:  		/* cmplwi CR6, R24, 20 */
		/* 82153D60h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000014);
		/* 82153D60h case    3:*/		return 0x82153D64;
		  /* 82153D64h */ case    4:  		/* bc 12, CR6_EQ, 80 */
		/* 82153D64h case    4:*/		if ( regs.CR[6].eq ) { return 0x82153DB4;  }
		/* 82153D64h case    4:*/		return 0x82153D68;
		  /* 82153D68h */ case    5:  		/* cmplwi CR6, R24, 21 */
		/* 82153D68h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000015);
		/* 82153D68h case    5:*/		return 0x82153D6C;
		  /* 82153D6Ch */ case    6:  		/* bc 12, CR6_EQ, 60 */
		/* 82153D6Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x82153DA8;  }
		/* 82153D6Ch case    6:*/		return 0x82153D70;
		  /* 82153D70h */ case    7:  		/* cmplwi CR6, R24, 22 */
		/* 82153D70h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000016);
		/* 82153D70h case    7:*/		return 0x82153D74;
		  /* 82153D74h */ case    8:  		/* bc 12, CR6_EQ, 44 */
		/* 82153D74h case    8:*/		if ( regs.CR[6].eq ) { return 0x82153DA0;  }
		/* 82153D74h case    8:*/		return 0x82153D78;
		  /* 82153D78h */ case    9:  		/* cmplwi CR6, R24, 23 */
		/* 82153D78h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000017);
		/* 82153D78h case    9:*/		return 0x82153D7C;
		  /* 82153D7Ch */ case   10:  		/* bc 12, CR6_EQ, 28 */
		/* 82153D7Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x82153D98;  }
		/* 82153D7Ch case   10:*/		return 0x82153D80;
		  /* 82153D80h */ case   11:  		/* cmplwi CR6, R24, 24 */
		/* 82153D80h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000018);
		/* 82153D80h case   11:*/		return 0x82153D84;
		  /* 82153D84h */ case   12:  		/* bc 12, CR6_EQ, 12 */
		/* 82153D84h case   12:*/		if ( regs.CR[6].eq ) { return 0x82153D90;  }
		/* 82153D84h case   12:*/		return 0x82153D88;
		  /* 82153D88h */ case   13:  		/* bl 1127640 */
		/* 82153D88h case   13:*/		regs.LR = 0x82153D8C; return 0x82267260;
		/* 82153D88h case   13:*/		return 0x82153D8C;
		  /* 82153D8Ch */ case   14:  		/* b 44 */
		/* 82153D8Ch case   14:*/		return 0x82153DB8;
		/* 82153D8Ch case   14:*/		return 0x82153D90;
	}
	return 0x82153D90;
} // Block from 82153D54h-82153D90h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82153D90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153D90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153D90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153D90);
		  /* 82153D90h */ case    0:  		/* lis R31, 4 */
		/* 82153D90h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x4);
		/* 82153D90h case    0:*/		return 0x82153D94;
		  /* 82153D94h */ case    1:  		/* b 24 */
		/* 82153D94h case    1:*/		return 0x82153DAC;
		/* 82153D94h case    1:*/		return 0x82153D98;
	}
	return 0x82153D98;
} // Block from 82153D90h-82153D98h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82153D98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153D98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153D98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153D98);
		  /* 82153D98h */ case    0:  		/* lis R31, 3 */
		/* 82153D98h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x3);
		/* 82153D98h case    0:*/		return 0x82153D9C;
		  /* 82153D9Ch */ case    1:  		/* b 16 */
		/* 82153D9Ch case    1:*/		return 0x82153DAC;
		/* 82153D9Ch case    1:*/		return 0x82153DA0;
	}
	return 0x82153DA0;
} // Block from 82153D98h-82153DA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82153DA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153DA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153DA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153DA0);
		  /* 82153DA0h */ case    0:  		/* lis R31, 2 */
		/* 82153DA0h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x2);
		/* 82153DA0h case    0:*/		return 0x82153DA4;
		  /* 82153DA4h */ case    1:  		/* b 8 */
		/* 82153DA4h case    1:*/		return 0x82153DAC;
		/* 82153DA4h case    1:*/		return 0x82153DA8;
	}
	return 0x82153DA8;
} // Block from 82153DA0h-82153DA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82153DA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153DA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153DA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153DA8);
		  /* 82153DA8h */ case    0:  		/* lis R31, 1 */
		/* 82153DA8h case    0:*/		cpu::op::lis<0>(regs,&regs.R31,0x1);
		/* 82153DA8h case    0:*/		return 0x82153DAC;
	}
	return 0x82153DAC;
} // Block from 82153DA8h-82153DACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82153DACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153DAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153DAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153DAC);
		  /* 82153DACh */ case    0:  		/* ori R31, R31, 69 */
		/* 82153DACh case    0:*/		cpu::op::ori<0>(regs,&regs.R31,regs.R31,0x45);
		/* 82153DACh case    0:*/		return 0x82153DB0;
		  /* 82153DB0h */ case    1:  		/* b 8 */
		/* 82153DB0h case    1:*/		return 0x82153DB8;
		/* 82153DB0h case    1:*/		return 0x82153DB4;
	}
	return 0x82153DB4;
} // Block from 82153DACh-82153DB4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82153DB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153DB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153DB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153DB4);
		  /* 82153DB4h */ case    0:  		/* li R31, 69 */
		/* 82153DB4h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x45);
		/* 82153DB4h case    0:*/		return 0x82153DB8;
	}
	return 0x82153DB8;
} // Block from 82153DB4h-82153DB8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82153DB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153DB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153DB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153DB8);
		  /* 82153DB8h */ case    0:  		/* addi R11, R29, 4 */
		/* 82153DB8h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x4);
		/* 82153DB8h case    0:*/		return 0x82153DBC;
		  /* 82153DBCh */ case    1:  		/* stw R31, <#[R29]> */
		/* 82153DBCh case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 82153DBCh case    1:*/		return 0x82153DC0;
		  /* 82153DC0h */ case    2:  		/* stw R11, <#[R1 + 80]> */
		/* 82153DC0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82153DC0h case    2:*/		return 0x82153DC4;
		  /* 82153DC4h */ case    3:  		/* b 156 */
		/* 82153DC4h case    3:*/		return 0x82153E60;
		/* 82153DC4h case    3:*/		return 0x82153DC8;
	}
	return 0x82153DC8;
} // Block from 82153DB8h-82153DC8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82153DC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153DC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153DC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153DC8);
		  /* 82153DC8h */ case    0:  		/* cmpwi CR6, R30, 61 */
		/* 82153DC8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x0000003D);
		/* 82153DC8h case    0:*/		return 0x82153DCC;
		  /* 82153DCCh */ case    1:  		/* bc 12, CR6_EQ, 132 */
		/* 82153DCCh case    1:*/		if ( regs.CR[6].eq ) { return 0x82153E50;  }
		/* 82153DCCh case    1:*/		return 0x82153DD0;
		  /* 82153DD0h */ case    2:  		/* cmpwi CR6, R30, 60 */
		/* 82153DD0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x0000003C);
		/* 82153DD0h case    2:*/		return 0x82153DD4;
		  /* 82153DD4h */ case    3:  		/* bc 12, CR6_EQ, 124 */
		/* 82153DD4h case    3:*/		if ( regs.CR[6].eq ) { return 0x82153E50;  }
		/* 82153DD4h case    3:*/		return 0x82153DD8;
		  /* 82153DD8h */ case    4:  		/* cmpwi CR6, R30, 76 */
		/* 82153DD8h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x0000004C);
		/* 82153DD8h case    4:*/		return 0x82153DDC;
		  /* 82153DDCh */ case    5:  		/* bc 12, CR6_EQ, 116 */
		/* 82153DDCh case    5:*/		if ( regs.CR[6].eq ) { return 0x82153E50;  }
		/* 82153DDCh case    5:*/		return 0x82153DE0;
	}
	return 0x82153DE0;
} // Block from 82153DC8h-82153DE0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82153DE0h
// Function '?ConvertPSSrcRegToILReg@XGRAPHICS@@YAKKPAU_R400IL_RECORDED_INFO@1@PAW4ILRegType@1@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153DE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153DE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153DE0);
		  /* 82153DE0h */ case    0:  		/* cmpwi CR6, R30, 81 */
		/* 82153DE0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000051);
		/* 82153DE0h case    0:*/		return 0x82153DE4;
		  /* 82153DE4h */ case    1:  		/* bc 12, CR6_EQ, 88 */
		/* 82153DE4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82153E3C;  }
		/* 82153DE4h case    1:*/		return 0x82153DE8;
		  /* 82153DE8h */ case    2:  		/* cmpwi CR6, R30, 85 */
		/* 82153DE8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000055);
		/* 82153DE8h case    2:*/		return 0x82153DEC;
		  /* 82153DECh */ case    3:  		/* bc 12, CR6_EQ, 80 */
		/* 82153DECh case    3:*/		if ( regs.CR[6].eq ) { return 0x82153E3C;  }
		/* 82153DECh case    3:*/		return 0x82153DF0;
		  /* 82153DF0h */ case    4:  		/* cmpwi CR6, R30, 37 */
		/* 82153DF0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000025);
		/* 82153DF0h case    4:*/		return 0x82153DF4;
		  /* 82153DF4h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 82153DF4h case    5:*/		if ( regs.CR[6].eq ) { return 0x82153E00;  }
		/* 82153DF4h case    5:*/		return 0x82153DF8;
		  /* 82153DF8h */ case    6:  		/* cmpwi CR6, R30, 38 */
		/* 82153DF8h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000026);
		/* 82153DF8h case    6:*/		return 0x82153DFC;
		  /* 82153DFCh */ case    7:  		/* bc 4, CR6_EQ, 84 */
		/* 82153DFCh case    7:*/		if ( !regs.CR[6].eq ) { return 0x82153E50;  }
		/* 82153DFCh case    7:*/		return 0x82153E00;
	}
	return 0x82153E00;
} // Block from 82153DE0h-82153E00h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82153E00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153E00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153E00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153E00);
		  /* 82153E00h */ case    0:  		/* lwz R11, <#[R26 + 4]> */
		/* 82153E00h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 82153E00h case    0:*/		return 0x82153E04;
		  /* 82153E04h */ case    1:  		/* rlwinm R10, R30, 0, 16, 31 */
		/* 82153E04h case    1:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R30);
		/* 82153E04h case    1:*/		return 0x82153E08;
		  /* 82153E08h */ case    2:  		/* cmpwi CR6, R11, 1 */
		/* 82153E08h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82153E08h case    2:*/		return 0x82153E0C;
		  /* 82153E0Ch */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 82153E0Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82153E18;  }
		/* 82153E0Ch case    3:*/		return 0x82153E10;
		  /* 82153E10h */ case    4:  		/* li R11, 0 */
		/* 82153E10h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82153E10h case    4:*/		return 0x82153E14;
		  /* 82153E14h */ case    5:  		/* b 20 */
		/* 82153E14h case    5:*/		return 0x82153E28;
		/* 82153E14h case    5:*/		return 0x82153E18;
	}
	return 0x82153E18;
} // Block from 82153E00h-82153E18h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82153E18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153E18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153E18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153E18);
		  /* 82153E18h */ case    0:  		/* cmpwi CR6, R11, 2 */
		/* 82153E18h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 82153E18h case    0:*/		return 0x82153E1C;
		  /* 82153E1Ch */ case    1:  		/* mr R11, R25 */
		/* 82153E1Ch case    1:*/		regs.R11 = regs.R25;
		/* 82153E1Ch case    1:*/		return 0x82153E20;
		  /* 82153E20h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 82153E20h case    2:*/		if ( regs.CR[6].eq ) { return 0x82153E28;  }
		/* 82153E20h case    2:*/		return 0x82153E24;
		  /* 82153E24h */ case    3:  		/* rlwinm R11, R20, 10, 31, 31 */
		/* 82153E24h case    3:*/		cpu::op::rlwinm<0,10,31,31>(regs,&regs.R11,regs.R20);
		/* 82153E24h case    3:*/		return 0x82153E28;
	}
	return 0x82153E28;
} // Block from 82153E18h-82153E28h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82153E28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153E28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153E28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153E28);
		  /* 82153E28h */ case    0:  		/* addi R9, R29, 4 */
		/* 82153E28h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R29,0x4);
		/* 82153E28h case    0:*/		return 0x82153E2C;
		  /* 82153E2Ch */ case    1:  		/* rlwimi R10, R11, 24, 7, 7 */
		/* 82153E2Ch case    1:*/		cpu::op::rlwimi<0,24,7,7>(regs,&regs.R10,regs.R11);
		/* 82153E2Ch case    1:*/		return 0x82153E30;
		  /* 82153E30h */ case    2:  		/* stw R9, <#[R1 + 80]> */
		/* 82153E30h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 82153E30h case    2:*/		return 0x82153E34;
		  /* 82153E34h */ case    3:  		/* stw R10, <#[R29]> */
		/* 82153E34h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 82153E34h case    3:*/		return 0x82153E38;
		  /* 82153E38h */ case    4:  		/* b 40 */
		/* 82153E38h case    4:*/		return 0x82153E60;
		/* 82153E38h case    4:*/		return 0x82153E3C;
	}
	return 0x82153E3C;
} // Block from 82153E28h-82153E3Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82153E3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153E3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153E3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153E3C);
		  /* 82153E3Ch */ case    0:  		/* addi R11, R29, 4 */
		/* 82153E3Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x4);
		/* 82153E3Ch case    0:*/		return 0x82153E40;
		  /* 82153E40h */ case    1:  		/* rlwimi R30, R25, 17, 0, 15 */
		/* 82153E40h case    1:*/		cpu::op::rlwimi<0,17,0,15>(regs,&regs.R30,regs.R25);
		/* 82153E40h case    1:*/		return 0x82153E44;
		  /* 82153E44h */ case    2:  		/* stw R11, <#[R1 + 80]> */
		/* 82153E44h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82153E44h case    2:*/		return 0x82153E48;
		  /* 82153E48h */ case    3:  		/* stw R30, <#[R29]> */
		/* 82153E48h case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 82153E48h case    3:*/		return 0x82153E4C;
		  /* 82153E4Ch */ case    4:  		/* b 20 */
		/* 82153E4Ch case    4:*/		return 0x82153E60;
		/* 82153E4Ch case    4:*/		return 0x82153E50;
	}
	return 0x82153E50;
} // Block from 82153E3Ch-82153E50h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82153E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153E50);
		  /* 82153E50h */ case    0:  		/* rlwinm R11, R30, 0, 16, 31 */
		/* 82153E50h case    0:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R30);
		/* 82153E50h case    0:*/		return 0x82153E54;
	}
	return 0x82153E54;
} // Block from 82153E50h-82153E54h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82153E54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153E54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153E54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153E54);
		  /* 82153E54h */ case    0:  		/* addi R10, R29, 4 */
		/* 82153E54h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x4);
		/* 82153E54h case    0:*/		return 0x82153E58;
		  /* 82153E58h */ case    1:  		/* stw R11, <#[R29]> */
		/* 82153E58h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82153E58h case    1:*/		return 0x82153E5C;
		  /* 82153E5Ch */ case    2:  		/* stw R10, <#[R1 + 80]> */
		/* 82153E5Ch case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82153E5Ch case    2:*/		return 0x82153E60;
	}
	return 0x82153E60;
} // Block from 82153E54h-82153E60h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82153E60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153E60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153E60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153E60);
		  /* 82153E60h */ case    0:  		/* addi R5, R1, 80 */
		/* 82153E60h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82153E60h case    0:*/		return 0x82153E64;
		  /* 82153E64h */ case    1:  		/* mr R4, R26 */
		/* 82153E64h case    1:*/		regs.R4 = regs.R26;
		/* 82153E64h case    1:*/		return 0x82153E68;
		  /* 82153E68h */ case    2:  		/* mr R3, R27 */
		/* 82153E68h case    2:*/		regs.R3 = regs.R27;
		/* 82153E68h case    2:*/		return 0x82153E6C;
		  /* 82153E6Ch */ case    3:  		/* bl -2252 */
		/* 82153E6Ch case    3:*/		regs.LR = 0x82153E70; return 0x821535A0;
		/* 82153E6Ch case    3:*/		return 0x82153E70;
		  /* 82153E70h */ case    4:  		/* lwz R11, <#[R28]> */
		/* 82153E70h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82153E70h case    4:*/		return 0x82153E74;
		  /* 82153E74h */ case    5:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82153E74h case    5:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82153E74h case    5:*/		return 0x82153E78;
		  /* 82153E78h */ case    6:  		/* bc 4, CR0_EQ, 8 */
		/* 82153E78h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82153E80;  }
		/* 82153E78h case    6:*/		return 0x82153E7C;
		  /* 82153E7Ch */ case    7:  		/* bl 1127396 */
		/* 82153E7Ch case    7:*/		regs.LR = 0x82153E80; return 0x82267260;
		/* 82153E7Ch case    7:*/		return 0x82153E80;
	}
	return 0x82153E80;
} // Block from 82153E60h-82153E80h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82153E80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153E80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153E80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153E80);
		  /* 82153E80h */ case    0:  		/* lwz R30, <#[R28]> */
		/* 82153E80h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000000) );
		/* 82153E80h case    0:*/		return 0x82153E84;
		  /* 82153E84h */ case    1:  		/* addi R31, R28, 4 */
		/* 82153E84h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R28,0x4);
		/* 82153E84h case    1:*/		return 0x82153E88;
		  /* 82153E88h */ case    2:  		/* li R4, 0 */
		/* 82153E88h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82153E88h case    2:*/		return 0x82153E8C;
		  /* 82153E8Ch */ case    3:  		/* rlwinm R11, R30, 0, 18, 18 */
		/* 82153E8Ch case    3:*/		cpu::op::rlwinm<0,0,18,18>(regs,&regs.R11,regs.R30);
		/* 82153E8Ch case    3:*/		return 0x82153E90;
		  /* 82153E90h */ case    4:  		/* cmplwi CR6, R11, 8192 */
		/* 82153E90h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002000);
		/* 82153E90h case    4:*/		return 0x82153E94;
		  /* 82153E94h */ case    5:  		/* bc 4, CR6_EQ, 28 */
		/* 82153E94h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82153EB0;  }
		/* 82153E94h case    5:*/		return 0x82153E98;
		  /* 82153E98h */ case    6:  		/* lwz R11, <#[R31]> */
		/* 82153E98h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82153E98h case    6:*/		return 0x82153E9C;
		  /* 82153E9Ch */ case    7:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82153E9Ch case    7:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82153E9Ch case    7:*/		return 0x82153EA0;
		  /* 82153EA0h */ case    8:  		/* bc 4, CR0_EQ, 8 */
		/* 82153EA0h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82153EA8;  }
		/* 82153EA0h case    8:*/		return 0x82153EA4;
		  /* 82153EA4h */ case    9:  		/* bl 1127356 */
		/* 82153EA4h case    9:*/		regs.LR = 0x82153EA8; return 0x82267260;
		/* 82153EA4h case    9:*/		return 0x82153EA8;
	}
	return 0x82153EA8;
} // Block from 82153E80h-82153EA8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82153EA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153EA8);
		  /* 82153EA8h */ case    0:  		/* lwz R4, <#[R31]> */
		/* 82153EA8h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82153EA8h case    0:*/		return 0x82153EAC;
		  /* 82153EACh */ case    1:  		/* addi R31, R31, 4 */
		/* 82153EACh case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82153EACh case    1:*/		return 0x82153EB0;
	}
	return 0x82153EB0;
} // Block from 82153EA8h-82153EB0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82153EB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153EB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153EB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153EB0);
		  /* 82153EB0h */ case    0:  		/* cmplwi CR6, R24, 7 */
		/* 82153EB0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000007);
		/* 82153EB0h case    0:*/		return 0x82153EB4;
		  /* 82153EB4h */ case    1:  		/* bc 12, CR6_EQ, 36 */
		/* 82153EB4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82153ED8;  }
		/* 82153EB4h case    1:*/		return 0x82153EB8;
		  /* 82153EB8h */ case    2:  		/* cmplwi CR6, R24, 15 */
		/* 82153EB8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x0000000F);
		/* 82153EB8h case    2:*/		return 0x82153EBC;
		  /* 82153EBCh */ case    3:  		/* bc 12, CR6_EQ, 28 */
		/* 82153EBCh case    3:*/		if ( regs.CR[6].eq ) { return 0x82153ED8;  }
		/* 82153EBCh case    3:*/		return 0x82153EC0;
		  /* 82153EC0h */ case    4:  		/* cmplwi CR6, R24, 32 */
		/* 82153EC0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000020);
		/* 82153EC0h case    4:*/		return 0x82153EC4;
		  /* 82153EC4h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 82153EC4h case    5:*/		if ( regs.CR[6].eq ) { return 0x82153ED8;  }
		/* 82153EC4h case    5:*/		return 0x82153EC8;
		  /* 82153EC8h */ case    6:  		/* cmplwi CR6, R24, 37 */
		/* 82153EC8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000025);
		/* 82153EC8h case    6:*/		return 0x82153ECC;
		  /* 82153ECCh */ case    7:  		/* bc 12, CR6_EQ, 164 */
		/* 82153ECCh case    7:*/		if ( regs.CR[6].eq ) { return 0x82153F70;  }
		/* 82153ECCh case    7:*/		return 0x82153ED0;
		  /* 82153ED0h */ case    8:  		/* cmplwi CR6, R24, 79 */
		/* 82153ED0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x0000004F);
		/* 82153ED0h case    8:*/		return 0x82153ED4;
		  /* 82153ED4h */ case    9:  		/* bc 4, CR6_EQ, 120 */
		/* 82153ED4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82153F4C;  }
		/* 82153ED4h case    9:*/		return 0x82153ED8;
	}
	return 0x82153ED8;
} // Block from 82153EB0h-82153ED8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82153ED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153ED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153ED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153ED8);
		  /* 82153ED8h */ case    0:  		/* rlwinm R11, R30, 0, 4, 7 */
		/* 82153ED8h case    0:*/		cpu::op::rlwinm<0,0,4,7>(regs,&regs.R11,regs.R30);
		/* 82153ED8h case    0:*/		return 0x82153EDC;
		  /* 82153EDCh */ case    1:  		/* lis R10, 256 */
		/* 82153EDCh case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x100);
		/* 82153EDCh case    1:*/		return 0x82153EE0;
		  /* 82153EE0h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 82153EE0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82153EE0h case    2:*/		return 0x82153EE4;
		  /* 82153EE4h */ case    3:  		/* bc 12, CR6_EQ, 216 */
		/* 82153EE4h case    3:*/		if ( regs.CR[6].eq ) { return 0x82153FBC;  }
		/* 82153EE4h case    3:*/		return 0x82153EE8;
		  /* 82153EE8h */ case    4:  		/* lis R10, 768 */
		/* 82153EE8h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0x300);
		/* 82153EE8h case    4:*/		return 0x82153EEC;
		  /* 82153EECh */ case    5:  		/* cmplw CR6, R11, R10 */
		/* 82153EECh case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82153EECh case    5:*/		return 0x82153EF0;
		  /* 82153EF0h */ case    6:  		/* bc 12, CR6_EQ, 196 */
		/* 82153EF0h case    6:*/		if ( regs.CR[6].eq ) { return 0x82153FB4;  }
		/* 82153EF0h case    6:*/		return 0x82153EF4;
		  /* 82153EF4h */ case    7:  		/* lis R10, 1280 */
		/* 82153EF4h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0x500);
		/* 82153EF4h case    7:*/		return 0x82153EF8;
		  /* 82153EF8h */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 82153EF8h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82153EF8h case    8:*/		return 0x82153EFC;
		  /* 82153EFCh */ case    9:  		/* bc 12, CR6_EQ, 172 */
		/* 82153EFCh case    9:*/		if ( regs.CR[6].eq ) { return 0x82153FA8;  }
		/* 82153EFCh case    9:*/		return 0x82153F00;
		  /* 82153F00h */ case   10:  		/* lis R10, 2048 */
		/* 82153F00h case   10:*/		cpu::op::lis<0>(regs,&regs.R10,0x800);
		/* 82153F00h case   10:*/		return 0x82153F04;
		  /* 82153F04h */ case   11:  		/* cmplw CR6, R11, R10 */
		/* 82153F04h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82153F04h case   11:*/		return 0x82153F08;
		  /* 82153F08h */ case   12:  		/* bc 12, CR6_EQ, 148 */
		/* 82153F08h case   12:*/		if ( regs.CR[6].eq ) { return 0x82153F9C;  }
		/* 82153F08h case   12:*/		return 0x82153F0C;
		  /* 82153F0Ch */ case   13:  		/* lis R10, 3072 */
		/* 82153F0Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R10,0xC00);
		/* 82153F0Ch case   13:*/		return 0x82153F10;
		  /* 82153F10h */ case   14:  		/* cmplw CR6, R11, R10 */
		/* 82153F10h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82153F10h case   14:*/		return 0x82153F14;
		  /* 82153F14h */ case   15:  		/* bc 4, CR6_EQ, 172 */
		/* 82153F14h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82153FC0;  }
		/* 82153F14h case   15:*/		return 0x82153F18;
		  /* 82153F18h */ case   16:  		/* li R11, 11 */
		/* 82153F18h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0xB);
		/* 82153F18h case   16:*/		return 0x82153F1C;
		  /* 82153F1Ch */ case   17:  		/* b 132 */
		/* 82153F1Ch case   17:*/		return 0x82153FA0;
		/* 82153F1Ch case   17:*/		return 0x82153F20;
		  /* 82153F20h */ case   18:  		/* rlwinm R11, R30, 0, 18, 18 */
		/* 82153F20h case   18:*/		cpu::op::rlwinm<0,0,18,18>(regs,&regs.R11,regs.R30);
		/* 82153F20h case   18:*/		return 0x82153F24;
		  /* 82153F24h */ case   19:  		/* addi R31, R31, 4 */
		/* 82153F24h case   19:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82153F24h case   19:*/		return 0x82153F28;
		  /* 82153F28h */ case   20:  		/* li R4, 0 */
		/* 82153F28h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82153F28h case   20:*/		return 0x82153F2C;
		  /* 82153F2Ch */ case   21:  		/* cmplwi CR6, R11, 8192 */
		/* 82153F2Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002000);
		/* 82153F2Ch case   21:*/		return 0x82153F30;
		  /* 82153F30h */ case   22:  		/* bc 4, CR6_EQ, 28 */
		/* 82153F30h case   22:*/		if ( !regs.CR[6].eq ) { return 0x82153F4C;  }
		/* 82153F30h case   22:*/		return 0x82153F34;
		  /* 82153F34h */ case   23:  		/* lwz R11, <#[R31]> */
		/* 82153F34h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82153F34h case   23:*/		return 0x82153F38;
		  /* 82153F38h */ case   24:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82153F38h case   24:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82153F38h case   24:*/		return 0x82153F3C;
		  /* 82153F3Ch */ case   25:  		/* bc 4, CR0_EQ, 8 */
		/* 82153F3Ch case   25:*/		if ( !regs.CR[0].eq ) { return 0x82153F44;  }
		/* 82153F3Ch case   25:*/		return 0x82153F40;
		  /* 82153F40h */ case   26:  		/* bl 1127200 */
		/* 82153F40h case   26:*/		regs.LR = 0x82153F44; return 0x82267260;
		/* 82153F40h case   26:*/		return 0x82153F44;
	}
	return 0x82153F44;
} // Block from 82153ED8h-82153F44h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82153F44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153F44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153F44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153F44);
		  /* 82153F44h */ case    0:  		/* lwz R4, <#[R31]> */
		/* 82153F44h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82153F44h case    0:*/		return 0x82153F48;
		  /* 82153F48h */ case    1:  		/* addi R31, R31, 4 */
		/* 82153F48h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82153F48h case    1:*/		return 0x82153F4C;
	}
	return 0x82153F4C;
} // Block from 82153F44h-82153F4Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82153F4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153F4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153F4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153F4C);
		  /* 82153F4Ch */ case    0:  		/* addi R7, R1, 80 */
		/* 82153F4Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82153F4Ch case    0:*/		return 0x82153F50;
		  /* 82153F50h */ case    1:  		/* mr R6, R26 */
		/* 82153F50h case    1:*/		regs.R6 = regs.R26;
		/* 82153F50h case    1:*/		return 0x82153F54;
		  /* 82153F54h */ case    2:  		/* li R5, 0 */
		/* 82153F54h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82153F54h case    2:*/		return 0x82153F58;
		  /* 82153F58h */ case    3:  		/* mr R3, R30 */
		/* 82153F58h case    3:*/		regs.R3 = regs.R30;
		/* 82153F58h case    3:*/		return 0x82153F5C;
		  /* 82153F5Ch */ case    4:  		/* bl -2204 */
		/* 82153F5Ch case    4:*/		regs.LR = 0x82153F60; return 0x821536C0;
		/* 82153F5Ch case    4:*/		return 0x82153F60;
	}
	return 0x82153F60;
} // Block from 82153F4Ch-82153F60h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82153F60h
// Function '?ProcessDSTToIL@XGRAPHICS@@YAXKPAU_R400IL_RECORDED_INFO@1@PAPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153F60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153F60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153F60);
		  /* 82153F60h */ case    0:  		/* lwz R30, <#[R31]> */
		/* 82153F60h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000000) );
		/* 82153F60h case    0:*/		return 0x82153F64;
		  /* 82153F64h */ case    1:  		/* rlwinm. R11, R30, 0, 0, 0 */
		/* 82153F64h case    1:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R30);
		/* 82153F64h case    1:*/		return 0x82153F68;
		  /* 82153F68h */ case    2:  		/* bc 4, CR0_EQ, -72 */
		/* 82153F68h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82153F20;  }
		/* 82153F68h case    2:*/		return 0x82153F6C;
		  /* 82153F6Ch */ case    3:  		/* b 212 */
		/* 82153F6Ch case    3:*/		return 0x82154040;
		/* 82153F6Ch case    3:*/		return 0x82153F70;
	}
	return 0x82153F70;
} // Block from 82153F60h-82153F70h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82153F70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153F70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153F70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153F70);
		  /* 82153F70h */ case    0:  		/* addi R7, R1, 80 */
		/* 82153F70h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82153F70h case    0:*/		return 0x82153F74;
		  /* 82153F74h */ case    1:  		/* mr R6, R26 */
		/* 82153F74h case    1:*/		regs.R6 = regs.R26;
		/* 82153F74h case    1:*/		return 0x82153F78;
		  /* 82153F78h */ case    2:  		/* li R5, 0 */
		/* 82153F78h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82153F78h case    2:*/		return 0x82153F7C;
		  /* 82153F7Ch */ case    3:  		/* mr R3, R30 */
		/* 82153F7Ch case    3:*/		regs.R3 = regs.R30;
		/* 82153F7Ch case    3:*/		return 0x82153F80;
		  /* 82153F80h */ case    4:  		/* bl -2240 */
		/* 82153F80h case    4:*/		regs.LR = 0x82153F84; return 0x821536C0;
		/* 82153F80h case    4:*/		return 0x82153F84;
		  /* 82153F84h */ case    5:  		/* lwz R11, <#[R31]> */
		/* 82153F84h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82153F84h case    5:*/		return 0x82153F88;
		  /* 82153F88h */ case    6:  		/* b 8 */
		/* 82153F88h case    6:*/		return 0x82153F90;
		/* 82153F88h case    6:*/		return 0x82153F8C;
		  /* 82153F8Ch */ case    7:  		/* lwzu R11, <#[R31 + 4]> */
		/* 82153F8Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82153F8Ch case    7:*/		return 0x82153F90;
	}
	return 0x82153F90;
} // Block from 82153F70h-82153F90h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82153F90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153F90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153F90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153F90);
		  /* 82153F90h */ case    0:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82153F90h case    0:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82153F90h case    0:*/		return 0x82153F94;
		  /* 82153F94h */ case    1:  		/* bc 4, CR0_EQ, -8 */
		/* 82153F94h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82153F8C;  }
		/* 82153F94h case    1:*/		return 0x82153F98;
		  /* 82153F98h */ case    2:  		/* b 168 */
		/* 82153F98h case    2:*/		return 0x82154040;
		/* 82153F98h case    2:*/		return 0x82153F9C;
	}
	return 0x82153F9C;
} // Block from 82153F90h-82153F9Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82153F9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153F9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153F9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153F9C);
		  /* 82153F9Ch */ case    0:  		/* li R11, 7 */
		/* 82153F9Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x7);
		/* 82153F9Ch case    0:*/		return 0x82153FA0;
	}
	return 0x82153FA0;
} // Block from 82153F9Ch-82153FA0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82153FA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153FA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153FA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153FA0);
		  /* 82153FA0h */ case    0:  		/* rlwimi R30, R11, 24, 4, 7 */
		/* 82153FA0h case    0:*/		cpu::op::rlwimi<0,24,4,7>(regs,&regs.R30,regs.R11);
		/* 82153FA0h case    0:*/		return 0x82153FA4;
		  /* 82153FA4h */ case    1:  		/* b 28 */
		/* 82153FA4h case    1:*/		return 0x82153FC0;
		/* 82153FA4h case    1:*/		return 0x82153FA8;
	}
	return 0x82153FA8;
} // Block from 82153FA0h-82153FA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82153FA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153FA8);
		  /* 82153FA8h */ case    0:  		/* rlwinm R11, R30, 0, 8, 6 */
		/* 82153FA8h case    0:*/		cpu::op::rlwinm<0,0,8,6>(regs,&regs.R11,regs.R30);
		/* 82153FA8h case    0:*/		return 0x82153FAC;
		  /* 82153FACh */ case    1:  		/* oris R30, R11, 1024 */
		/* 82153FACh case    1:*/		cpu::op::oris<0>(regs,&regs.R30,regs.R11,0x400);
		/* 82153FACh case    1:*/		return 0x82153FB0;
		  /* 82153FB0h */ case    2:  		/* b 16 */
		/* 82153FB0h case    2:*/		return 0x82153FC0;
		/* 82153FB0h case    2:*/		return 0x82153FB4;
	}
	return 0x82153FB4;
} // Block from 82153FA8h-82153FB4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82153FB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153FB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153FB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153FB4);
		  /* 82153FB4h */ case    0:  		/* rlwimi R30, R25, 25, 6, 7 */
		/* 82153FB4h case    0:*/		cpu::op::rlwimi<0,25,6,7>(regs,&regs.R30,regs.R25);
		/* 82153FB4h case    0:*/		return 0x82153FB8;
		  /* 82153FB8h */ case    1:  		/* b 8 */
		/* 82153FB8h case    1:*/		return 0x82153FC0;
		/* 82153FB8h case    1:*/		return 0x82153FBC;
	}
	return 0x82153FBC;
} // Block from 82153FB4h-82153FBCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82153FBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153FBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153FBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153FBC);
		  /* 82153FBCh */ case    0:  		/* rlwinm R30, R30, 0, 8, 6 */
		/* 82153FBCh case    0:*/		cpu::op::rlwinm<0,0,8,6>(regs,&regs.R30,regs.R30);
		/* 82153FBCh case    0:*/		return 0x82153FC0;
	}
	return 0x82153FC0;
} // Block from 82153FBCh-82153FC0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82153FC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153FC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153FC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153FC0);
		  /* 82153FC0h */ case    0:  		/* addi R7, R1, 80 */
		/* 82153FC0h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82153FC0h case    0:*/		return 0x82153FC4;
		  /* 82153FC4h */ case    1:  		/* mr R6, R26 */
		/* 82153FC4h case    1:*/		regs.R6 = regs.R26;
		/* 82153FC4h case    1:*/		return 0x82153FC8;
		  /* 82153FC8h */ case    2:  		/* lis R5, 16 */
		/* 82153FC8h case    2:*/		cpu::op::lis<0>(regs,&regs.R5,0x10);
		/* 82153FC8h case    2:*/		return 0x82153FCC;
		  /* 82153FCCh */ case    3:  		/* mr R3, R30 */
		/* 82153FCCh case    3:*/		regs.R3 = regs.R30;
		/* 82153FCCh case    3:*/		return 0x82153FD0;
		  /* 82153FD0h */ case    4:  		/* bl -2320 */
		/* 82153FD0h case    4:*/		regs.LR = 0x82153FD4; return 0x821536C0;
		/* 82153FD0h case    4:*/		return 0x82153FD4;
		  /* 82153FD4h */ case    5:  		/* cmplwi CR6, R24, 32 */
		/* 82153FD4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000020);
		/* 82153FD4h case    5:*/		return 0x82153FD8;
		  /* 82153FD8h */ case    6:  		/* bc 4, CR6_EQ, 88 */
		/* 82153FD8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82154030;  }
		/* 82153FD8h case    6:*/		return 0x82153FDC;
		  /* 82153FDCh */ case    7:  		/* lwz R11, <#[R31]> */
		/* 82153FDCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82153FDCh case    7:*/		return 0x82153FE0;
		  /* 82153FE0h */ case    8:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82153FE0h case    8:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82153FE0h case    8:*/		return 0x82153FE4;
		  /* 82153FE4h */ case    9:  		/* bc 4, CR0_EQ, 8 */
		/* 82153FE4h case    9:*/		if ( !regs.CR[0].eq ) { return 0x82153FEC;  }
		/* 82153FE4h case    9:*/		return 0x82153FE8;
		  /* 82153FE8h */ case   10:  		/* bl 1127032 */
		/* 82153FE8h case   10:*/		regs.LR = 0x82153FEC; return 0x82267260;
		/* 82153FE8h case   10:*/		return 0x82153FEC;
	}
	return 0x82153FEC;
} // Block from 82153FC0h-82153FECh (11 instructions)

//////////////////////////////////////////////////////
// Block at 82153FECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82153FEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82153FEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82153FEC);
		  /* 82153FECh */ case    0:  		/* lwz R30, <#[R31]> */
		/* 82153FECh case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000000) );
		/* 82153FECh case    0:*/		return 0x82153FF0;
		  /* 82153FF0h */ case    1:  		/* addi R31, R31, 4 */
		/* 82153FF0h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82153FF0h case    1:*/		return 0x82153FF4;
		  /* 82153FF4h */ case    2:  		/* li R4, 0 */
		/* 82153FF4h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82153FF4h case    2:*/		return 0x82153FF8;
		  /* 82153FF8h */ case    3:  		/* rlwinm R11, R30, 0, 18, 18 */
		/* 82153FF8h case    3:*/		cpu::op::rlwinm<0,0,18,18>(regs,&regs.R11,regs.R30);
		/* 82153FF8h case    3:*/		return 0x82153FFC;
		  /* 82153FFCh */ case    4:  		/* cmplwi CR6, R11, 8192 */
		/* 82153FFCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002000);
		/* 82153FFCh case    4:*/		return 0x82154000;
		  /* 82154000h */ case    5:  		/* bc 4, CR6_EQ, 28 */
		/* 82154000h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8215401C;  }
		/* 82154000h case    5:*/		return 0x82154004;
		  /* 82154004h */ case    6:  		/* lwz R11, <#[R31]> */
		/* 82154004h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82154004h case    6:*/		return 0x82154008;
		  /* 82154008h */ case    7:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82154008h case    7:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82154008h case    7:*/		return 0x8215400C;
		  /* 8215400Ch */ case    8:  		/* bc 4, CR0_EQ, 8 */
		/* 8215400Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x82154014;  }
		/* 8215400Ch case    8:*/		return 0x82154010;
		  /* 82154010h */ case    9:  		/* bl 1126992 */
		/* 82154010h case    9:*/		regs.LR = 0x82154014; return 0x82267260;
		/* 82154010h case    9:*/		return 0x82154014;
	}
	return 0x82154014;
} // Block from 82153FECh-82154014h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82154014h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154014( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154014) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154014);
		  /* 82154014h */ case    0:  		/* lwz R4, <#[R31]> */
		/* 82154014h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82154014h case    0:*/		return 0x82154018;
		  /* 82154018h */ case    1:  		/* addi R31, R31, 4 */
		/* 82154018h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82154018h case    1:*/		return 0x8215401C;
	}
	return 0x8215401C;
} // Block from 82154014h-8215401Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215401Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215401C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215401C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215401C);
		  /* 8215401Ch */ case    0:  		/* addi R7, R1, 80 */
		/* 8215401Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8215401Ch case    0:*/		return 0x82154020;
		  /* 82154020h */ case    1:  		/* mr R6, R26 */
		/* 82154020h case    1:*/		regs.R6 = regs.R26;
		/* 82154020h case    1:*/		return 0x82154024;
		  /* 82154024h */ case    2:  		/* li R5, 0 */
		/* 82154024h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82154024h case    2:*/		return 0x82154028;
		  /* 82154028h */ case    3:  		/* mr R3, R30 */
		/* 82154028h case    3:*/		regs.R3 = regs.R30;
		/* 82154028h case    3:*/		return 0x8215402C;
		  /* 8215402Ch */ case    4:  		/* bl -2412 */
		/* 8215402Ch case    4:*/		regs.LR = 0x82154030; return 0x821536C0;
		/* 8215402Ch case    4:*/		return 0x82154030;
	}
	return 0x82154030;
} // Block from 8215401Ch-82154030h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82154030h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154030);
		  /* 82154030h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 82154030h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82154030h case    0:*/		return 0x82154034;
		  /* 82154034h */ case    1:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82154034h case    1:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82154034h case    1:*/		return 0x82154038;
		  /* 82154038h */ case    2:  		/* bc 12, CR0_EQ, 8 */
		/* 82154038h case    2:*/		if ( regs.CR[0].eq ) { return 0x82154040;  }
		/* 82154038h case    2:*/		return 0x8215403C;
		  /* 8215403Ch */ case    3:  		/* bl 1126948 */
		/* 8215403Ch case    3:*/		regs.LR = 0x82154040; return 0x82267260;
		/* 8215403Ch case    3:*/		return 0x82154040;
	}
	return 0x82154040;
} // Block from 82154030h-82154040h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82154040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154040);
		  /* 82154040h */ case    0:  		/* cmpwi CR6, R18, 0 */
		/* 82154040h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R18,0x00000000);
		/* 82154040h case    0:*/		return 0x82154044;
		  /* 82154044h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 82154044h case    1:*/		if ( regs.CR[6].eq ) { return 0x82154060;  }
		/* 82154044h case    1:*/		return 0x82154048;
		  /* 82154048h */ case    2:  		/* addi R7, R1, 80 */
		/* 82154048h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82154048h case    2:*/		return 0x8215404C;
		  /* 8215404Ch */ case    3:  		/* mr R6, R26 */
		/* 8215404Ch case    3:*/		regs.R6 = regs.R26;
		/* 8215404Ch case    3:*/		return 0x82154050;
		  /* 82154050h */ case    4:  		/* lis R5, 228 */
		/* 82154050h case    4:*/		cpu::op::lis<0>(regs,&regs.R5,0xE4);
		/* 82154050h case    4:*/		return 0x82154054;
		  /* 82154054h */ case    5:  		/* mr R4, R21 */
		/* 82154054h case    5:*/		regs.R4 = regs.R21;
		/* 82154054h case    5:*/		return 0x82154058;
		  /* 82154058h */ case    6:  		/* mr R3, R20 */
		/* 82154058h case    6:*/		regs.R3 = regs.R20;
		/* 82154058h case    6:*/		return 0x8215405C;
		  /* 8215405Ch */ case    7:  		/* bl -1868 */
		/* 8215405Ch case    7:*/		regs.LR = 0x82154060; return 0x82153910;
		/* 8215405Ch case    7:*/		return 0x82154060;
	}
	return 0x82154060;
} // Block from 82154040h-82154060h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82154060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154060);
		  /* 82154060h */ case    0:  		/* cmpwi CR6, R16, 0 */
		/* 82154060h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R16,0x00000000);
		/* 82154060h case    0:*/		return 0x82154064;
		  /* 82154064h */ case    1:  		/* bc 12, CR6_EQ, 80 */
		/* 82154064h case    1:*/		if ( regs.CR[6].eq ) { return 0x821540B4;  }
		/* 82154064h case    1:*/		return 0x82154068;
		  /* 82154068h */ case    2:  		/* cmplw CR6, R22, R23 */
		/* 82154068h case    2:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R23);
		/* 82154068h case    2:*/		return 0x8215406C;
		  /* 8215406Ch */ case    3:  		/* bc 12, CR6_LT, 8 */
		/* 8215406Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x82154074;  }
		/* 8215406Ch case    3:*/		return 0x82154070;
		  /* 82154070h */ case    4:  		/* bl 1126896 */
		/* 82154070h case    4:*/		regs.LR = 0x82154074; return 0x82267260;
		/* 82154070h case    4:*/		return 0x82154074;
	}
	return 0x82154074;
} // Block from 82154060h-82154074h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82154074h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154074( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154074) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154074);
		  /* 82154074h */ case    0:  		/* lwz R11, <#[R26 + 428]> */
		/* 82154074h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x000001AC) );
		/* 82154074h case    0:*/		return 0x82154078;
		  /* 82154078h */ case    1:  		/* addi R6, R1, 80 */
		/* 82154078h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82154078h case    1:*/		return 0x8215407C;
		  /* 8215407Ch */ case    2:  		/* mr R5, R26 */
		/* 8215407Ch case    2:*/		regs.R5 = regs.R26;
		/* 8215407Ch case    2:*/		return 0x82154080;
	}
	return 0x82154080;
} // Block from 82154074h-82154080h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82154080h
// Function '?ProcessSRCToIL@XGRAPHICS@@YAXKKKPAU_R400IL_RECORDED_INFO@1@PAPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154080);
		  /* 82154080h */ case    0:  		/* addi R11, R11, 25 */
		/* 82154080h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x19);
		/* 82154080h case    0:*/		return 0x82154084;
		  /* 82154084h */ case    1:  		/* li R4, 16 */
		/* 82154084h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x10);
		/* 82154084h case    1:*/		return 0x82154088;
		  /* 82154088h */ case    2:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 82154088h case    2:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 82154088h case    2:*/		return 0x8215408C;
		  /* 8215408Ch */ case    3:  		/* lwzx R11, <#[R11 + R26]> */
		/* 8215408Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 8215408Ch case    3:*/		return 0x82154090;
		  /* 82154090h */ case    4:  		/* lwz R3, <#[R11 + 4]> */
		/* 82154090h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000004) );
		/* 82154090h case    4:*/		return 0x82154094;
		  /* 82154094h */ case    5:  		/* bl -2140 */
		/* 82154094h case    5:*/		regs.LR = 0x82154098; return 0x82153838;
		/* 82154094h case    5:*/		return 0x82154098;
		  /* 82154098h */ case    6:  		/* lwz R11, <#[R26 + 428]> */
		/* 82154098h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x000001AC) );
		/* 82154098h case    6:*/		return 0x8215409C;
		  /* 8215409Ch */ case    7:  		/* lwz R10, <#[R26 + 424]> */
		/* 8215409Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x000001A8) );
		/* 8215409Ch case    7:*/		return 0x821540A0;
		  /* 821540A0h */ case    8:  		/* addi R11, R11, 1 */
		/* 821540A0h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821540A0h case    8:*/		return 0x821540A4;
		  /* 821540A4h */ case    9:  		/* stw R11, <#[R26 + 428]> */
		/* 821540A4h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x000001AC) );
		/* 821540A4h case    9:*/		return 0x821540A8;
		  /* 821540A8h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 821540A8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821540A8h case   10:*/		return 0x821540AC;
		  /* 821540ACh */ case   11:  		/* bc 4, CR6_GT, 8 */
		/* 821540ACh case   11:*/		if ( !regs.CR[6].gt ) { return 0x821540B4;  }
		/* 821540ACh case   11:*/		return 0x821540B0;
		  /* 821540B0h */ case   12:  		/* bl 1126832 */
		/* 821540B0h case   12:*/		regs.LR = 0x821540B4; return 0x82267260;
		/* 821540B0h case   12:*/		return 0x821540B4;
	}
	return 0x821540B4;
} // Block from 82154080h-821540B4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821540B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821540B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821540B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821540B4);
		  /* 821540B4h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 821540B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821540B4h case    0:*/		return 0x821540B8;
		  /* 821540B8h */ case    1:  		/* stw R11, <#[R17]> */
		/* 821540B8h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x00000000) );
		/* 821540B8h case    1:*/		return 0x821540BC;
		  /* 821540BCh */ case    2:  		/* stw R31, <#[R19]> */
		/* 821540BCh case    2:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R19 + 0x00000000) );
		/* 821540BCh case    2:*/		return 0x821540C0;
		  /* 821540C0h */ case    3:  		/* addi R1, R1, 224 */
		/* 821540C0h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 821540C0h case    3:*/		return 0x821540C4;
		  /* 821540C4h */ case    4:  		/* b -798284 */
		/* 821540C4h case    4:*/		return 0x82091278;
		/* 821540C4h case    4:*/		return 0x821540C8;
	}
	return 0x821540C8;
} // Block from 821540B4h-821540C8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821540C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821540C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821540C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821540C8);
		  /* 821540C8h */ case    0:  		/* mfspr R12, LR */
		/* 821540C8h case    0:*/		regs.R12 = regs.LR;
		/* 821540C8h case    0:*/		return 0x821540CC;
		  /* 821540CCh */ case    1:  		/* bl -798344 */
		/* 821540CCh case    1:*/		regs.LR = 0x821540D0; return 0x82091244;
		/* 821540CCh case    1:*/		return 0x821540D0;
		  /* 821540D0h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821540D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821540D0h case    2:*/		return 0x821540D4;
		  /* 821540D4h */ case    3:  		/* lis R11, -1 */
		/* 821540D4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 821540D4h case    3:*/		return 0x821540D8;
		  /* 821540D8h */ case    4:  		/* mr R24, R3 */
		/* 821540D8h case    4:*/		regs.R24 = regs.R3;
		/* 821540D8h case    4:*/		return 0x821540DC;
		  /* 821540DCh */ case    5:  		/* ori R11, R11, 512 */
		/* 821540DCh case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821540DCh case    5:*/		return 0x821540E0;
		  /* 821540E0h */ case    6:  		/* mr R25, R4 */
		/* 821540E0h case    6:*/		regs.R25 = regs.R4;
		/* 821540E0h case    6:*/		return 0x821540E4;
		  /* 821540E4h */ case    7:  		/* mr R28, R5 */
		/* 821540E4h case    7:*/		regs.R28 = regs.R5;
		/* 821540E4h case    7:*/		return 0x821540E8;
		  /* 821540E8h */ case    8:  		/* mr R29, R6 */
		/* 821540E8h case    8:*/		regs.R29 = regs.R6;
		/* 821540E8h case    8:*/		return 0x821540EC;
		  /* 821540ECh */ case    9:  		/* mr R23, R7 */
		/* 821540ECh case    9:*/		regs.R23 = regs.R7;
		/* 821540ECh case    9:*/		return 0x821540F0;
		  /* 821540F0h */ case   10:  		/* cmplw CR6, R4, R11 */
		/* 821540F0h case   10:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 821540F0h case   10:*/		return 0x821540F4;
		  /* 821540F4h */ case   11:  		/* bc 4, CR6_LT, 8 */
		/* 821540F4h case   11:*/		if ( !regs.CR[6].lt ) { return 0x821540FC;  }
		/* 821540F4h case   11:*/		return 0x821540F8;
		  /* 821540F8h */ case   12:  		/* bl 1126760 */
		/* 821540F8h case   12:*/		regs.LR = 0x821540FC; return 0x82267260;
		/* 821540F8h case   12:*/		return 0x821540FC;
	}
	return 0x821540FC;
} // Block from 821540C8h-821540FCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821540FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821540FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821540FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821540FC);
		  /* 821540FCh */ case    0:  		/* lwz R11, <#[R24]> */
		/* 821540FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821540FCh case    0:*/		return 0x82154100;
		  /* 82154100h */ case    1:  		/* li R27, 1 */
		/* 82154100h case    1:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 82154100h case    1:*/		return 0x82154104;
		  /* 82154104h */ case    2:  		/* lwz R31, <#[R23]> */
		/* 82154104h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R23 + 0x00000000) );
		/* 82154104h case    2:*/		return 0x82154108;
		  /* 82154108h */ case    3:  		/* addi R26, R11, 4 */
		/* 82154108h case    3:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0x4);
		/* 82154108h case    3:*/		return 0x8215410C;
		  /* 8215410Ch */ case    4:  		/* lhz R11, <#[R11 + 2]> */
		/* 8215410Ch case    4:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000002) );
		/* 8215410Ch case    4:*/		return 0x82154110;
		  /* 82154110h */ case    5:  		/* stw R31, <#[R1 + 80]> */
		/* 82154110h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 82154110h case    5:*/		return 0x82154114;
		  /* 82154114h */ case    6:  		/* cmplwi CR6, R11, 28 */
		/* 82154114h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001C);
		/* 82154114h case    6:*/		return 0x82154118;
		  /* 82154118h */ case    7:  		/* bc 4, CR6_EQ, 32 */
		/* 82154118h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82154138;  }
		/* 82154118h case    7:*/		return 0x8215411C;
		  /* 8215411Ch */ case    8:  		/* lwz R10, <#[R29 + 8]> */
		/* 8215411Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 8215411Ch case    8:*/		return 0x82154120;
		  /* 82154120h */ case    9:  		/* cmpwi CR6, R10, 0 */
		/* 82154120h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 82154120h case    9:*/		return 0x82154124;
		  /* 82154124h */ case   10:  		/* bc 4, CR6_EQ, 16 */
		/* 82154124h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82154134;  }
		/* 82154124h case   10:*/		return 0x82154128;
		  /* 82154128h */ case   11:  		/* li R28, 43 */
		/* 82154128h case   11:*/		cpu::op::li<0>(regs,&regs.R28,0x2B);
		/* 82154128h case   11:*/		return 0x8215412C;
		  /* 8215412Ch */ case   12:  		/* stw R27, <#[R29 + 8]> */
		/* 8215412Ch case   12:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R29 + 0x00000008) );
		/* 8215412Ch case   12:*/		return 0x82154130;
		  /* 82154130h */ case   13:  		/* b 20 */
		/* 82154130h case   13:*/		return 0x82154144;
		/* 82154130h case   13:*/		return 0x82154134;
	}
	return 0x82154134;
} // Block from 821540FCh-82154134h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82154134h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154134( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154134) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154134);
		  /* 82154134h */ case    0:  		/* li R28, 83 */
		/* 82154134h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x53);
		/* 82154134h case    0:*/		return 0x82154138;
	}
	return 0x82154138;
} // Block from 82154134h-82154138h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82154138h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154138( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154138) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154138);
		  /* 82154138h */ case    0:  		/* cmplwi CR6, R11, 96 */
		/* 82154138h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000060);
		/* 82154138h case    0:*/		return 0x8215413C;
		  /* 8215413Ch */ case    1:  		/* bc 12, CR6_GT, 1068 */
		/* 8215413Ch case    1:*/		if ( regs.CR[6].gt ) { return 0x82154568;  }
		/* 8215413Ch case    1:*/		return 0x82154140;
		  /* 82154140h */ case    2:  		/* bc 12, CR6_EQ, 1000 */
		/* 82154140h case    2:*/		if ( regs.CR[6].eq ) { return 0x82154528;  }
		/* 82154140h case    2:*/		return 0x82154144;
	}
	return 0x82154144;
} // Block from 82154138h-82154144h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82154144h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154144( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154144) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154144);
		  /* 82154144h */ case    0:  		/* addi R11, R11, -25 */
		/* 82154144h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFE7);
		/* 82154144h case    0:*/		return 0x82154148;
		  /* 82154148h */ case    1:  		/* cmplwi CR6, R11, 19 */
		/* 82154148h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000013);
		/* 82154148h case    1:*/		return 0x8215414C;
		  /* 8215414Ch */ case    2:  		/* bc 12, CR6_GT, 1052 */
		/* 8215414Ch case    2:*/		if ( regs.CR[6].gt ) { return 0x82154568;  }
		/* 8215414Ch case    2:*/		return 0x82154150;
		  /* 82154150h */ case    3:  		/* lis R12, -32252 */
		/* 82154150h case    3:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8204);
		/* 82154150h case    3:*/		return 0x82154154;
		  /* 82154154h */ case    4:  		/* addi R12, R12, -25864 */
		/* 82154154h case    4:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0xFFFF9AF8);
		/* 82154154h case    4:*/		return 0x82154158;
		  /* 82154158h */ case    5:  		/* lbzx R0, <#[R12 + R11]> */
		/* 82154158h case    5:*/		cpu::mem::load8z( regs, &regs.R0, (uint32)(regs.R12 + regs.R11 + 0x00000000) );
		/* 82154158h case    5:*/		return 0x8215415C;
		  /* 8215415Ch */ case    6:  		/* rlwinm R0, R0, 2, 0, 29 */
		/* 8215415Ch case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R0,regs.R0);
		/* 8215415Ch case    6:*/		return 0x82154160;
		  /* 82154160h */ case    7:  		/* lis R12, -32235 */
		/* 82154160h case    7:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8215);
		/* 82154160h case    7:*/		return 0x82154164;
		  /* 82154164h */ case    8:  		/* ori R0, R0, 0 */
		/* 82154164h case    8:*/		cpu::op::ori<0>(regs,&regs.R0,regs.R0,0x0);
		/* 82154164h case    8:*/		return 0x82154168;
		  /* 82154168h */ case    9:  		/* addi R12, R12, 16760 */
		/* 82154168h case    9:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R12,0x4178);
		/* 82154168h case    9:*/		return 0x8215416C;
		  /* 8215416Ch */ case   10:  		/* add R12, R12, R0 */
		/* 8215416Ch case   10:*/		cpu::op::add<0>(regs,&regs.R12,regs.R12,regs.R0);
		/* 8215416Ch case   10:*/		return 0x82154170;
		  /* 82154170h */ case   11:  		/* mtspr CTR, R12 */
		/* 82154170h case   11:*/		regs.CTR = regs.R12;
		/* 82154170h case   11:*/		return 0x82154174;
		  /* 82154174h */ case   12:  		/* bcctr 20, CR0_LT */
		/* 82154174h case   12:*/		if ( 1 ) { return (uint32)regs.CTR; }
		/* 82154174h case   12:*/		return 0x82154178;
		  /* 82154178h */ case   13:  		/* rlwinm R11, R28, 0, 16, 31 */
		/* 82154178h case   13:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R28);
		/* 82154178h case   13:*/		return 0x8215417C;
		  /* 8215417Ch */ case   14:  		/* addi R30, R31, 4 */
		/* 8215417Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x4);
		/* 8215417Ch case   14:*/		return 0x82154180;
		  /* 82154180h */ case   15:  		/* stw R11, <#[R31]> */
		/* 82154180h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82154180h case   15:*/		return 0x82154184;
		  /* 82154184h */ case   16:  		/* lwz R11, <#[R26]> */
		/* 82154184h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 82154184h case   16:*/		return 0x82154188;
		  /* 82154188h */ case   17:  		/* mr R10, R11 */
		/* 82154188h case   17:*/		regs.R10 = regs.R11;
		/* 82154188h case   17:*/		return 0x8215418C;
		  /* 8215418Ch */ case   18:  		/* rlwimi R10, R11, 12, 21, 23 */
		/* 8215418Ch case   18:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R10,regs.R11);
		/* 8215418Ch case   18:*/		return 0x82154190;
		  /* 82154190h */ case   19:  		/* addi R26, R26, 4 */
		/* 82154190h case   19:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 82154190h case   19:*/		return 0x82154194;
		  /* 82154194h */ case   20:  		/* rlwinm R10, R10, 0, 19, 23 */
		/* 82154194h case   20:*/		cpu::op::rlwinm<0,0,19,23>(regs,&regs.R10,regs.R10);
		/* 82154194h case   20:*/		return 0x82154198;
		  /* 82154198h */ case   21:  		/* rlwinm R31, R11, 0, 21, 31 */
		/* 82154198h case   21:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R31,regs.R11);
		/* 82154198h case   21:*/		return 0x8215419C;
		  /* 8215419Ch */ case   22:  		/* cmplwi CR6, R10, 4608 */
		/* 8215419Ch case   22:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00001200);
		/* 8215419Ch case   22:*/		return 0x821541A0;
		  /* 821541A0h */ case   23:  		/* bc 12, CR6_EQ, 8 */
		/* 821541A0h case   23:*/		if ( regs.CR[6].eq ) { return 0x821541A8;  }
		/* 821541A0h case   23:*/		return 0x821541A4;
		  /* 821541A4h */ case   24:  		/* bl 1126588 */
		/* 821541A4h case   24:*/		regs.LR = 0x821541A8; return 0x82267260;
		/* 821541A4h case   24:*/		return 0x821541A8;
	}
	return 0x821541A8;
} // Block from 82154144h-821541A8h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821541A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821541A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821541A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821541A8);
		  /* 821541A8h */ case    0:  		/* cmplwi CR6, R31, 2048 */
		/* 821541A8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000800);
		/* 821541A8h case    0:*/		return 0x821541AC;
		  /* 821541ACh */ case    1:  		/* bc 12, CR6_LT, 8 */
		/* 821541ACh case    1:*/		if ( regs.CR[6].lt ) { return 0x821541B4;  }
		/* 821541ACh case    1:*/		return 0x821541B0;
		  /* 821541B0h */ case    2:  		/* bl 1126576 */
		/* 821541B0h case    2:*/		regs.LR = 0x821541B4; return 0x82267260;
		/* 821541B0h case    2:*/		return 0x821541B4;
	}
	return 0x821541B4;
} // Block from 821541A8h-821541B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821541B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821541B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821541B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821541B4);
		  /* 821541B4h */ case    0:  		/* cmplwi CR6, R31, 16 */
		/* 821541B4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000010);
		/* 821541B4h case    0:*/		return 0x821541B8;
		  /* 821541B8h */ case    1:  		/* bc 12, CR6_LT, 24 */
		/* 821541B8h case    1:*/		if ( regs.CR[6].lt ) { return 0x821541D0;  }
		/* 821541B8h case    1:*/		return 0x821541BC;
		  /* 821541BCh */ case    2:  		/* lis R11, -1 */
		/* 821541BCh case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 821541BCh case    2:*/		return 0x821541C0;
		  /* 821541C0h */ case    3:  		/* ori R11, R11, 768 */
		/* 821541C0h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x300);
		/* 821541C0h case    3:*/		return 0x821541C4;
		  /* 821541C4h */ case    4:  		/* cmplw CR6, R25, R11 */
		/* 821541C4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R11);
		/* 821541C4h case    4:*/		return 0x821541C8;
		  /* 821541C8h */ case    5:  		/* bc 4, CR6_LT, 8 */
		/* 821541C8h case    5:*/		if ( !regs.CR[6].lt ) { return 0x821541D0;  }
		/* 821541C8h case    5:*/		return 0x821541CC;
		  /* 821541CCh */ case    6:  		/* bl 1126548 */
		/* 821541CCh case    6:*/		regs.LR = 0x821541D0; return 0x82267260;
		/* 821541CCh case    6:*/		return 0x821541D0;
	}
	return 0x821541D0;
} // Block from 821541B4h-821541D0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821541D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821541D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821541D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821541D0);
		  /* 821541D0h */ case    0:  		/* rlwinm R11, R31, 0, 16, 31 */
		/* 821541D0h case    0:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R31);
		/* 821541D0h case    0:*/		return 0x821541D4;
		  /* 821541D4h */ case    1:  		/* addi R31, R30, 4 */
		/* 821541D4h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R30,0x4);
		/* 821541D4h case    1:*/		return 0x821541D8;
		  /* 821541D8h */ case    2:  		/* stw R11, <#[R30]> */
		/* 821541D8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821541D8h case    2:*/		return 0x821541DC;
		  /* 821541DCh */ case    3:  		/* b 912 */
		/* 821541DCh case    3:*/		return 0x8215456C;
		/* 821541DCh case    3:*/		return 0x821541E0;
		  /* 821541E0h */ case    4:  		/* lwz R28, <#[R26]> */
		/* 821541E0h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R26 + 0x00000000) );
		/* 821541E0h case    4:*/		return 0x821541E4;
		  /* 821541E4h */ case    5:  		/* lwzu R30, <#[R26 + 4]> */
		/* 821541E4h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R26 + 0x00000004) );
		regs.R26 = (uint32)(regs.R26 + 0x00000004);
		/* 821541E4h case    5:*/		return 0x821541E8;
		  /* 821541E8h */ case    6:  		/* mr R11, R30 */
		/* 821541E8h case    6:*/		regs.R11 = regs.R30;
		/* 821541E8h case    6:*/		return 0x821541EC;
		  /* 821541ECh */ case    7:  		/* addi R26, R26, 4 */
		/* 821541ECh case    7:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 821541ECh case    7:*/		return 0x821541F0;
		  /* 821541F0h */ case    8:  		/* rlwimi R11, R30, 12, 21, 23 */
		/* 821541F0h case    8:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R11,regs.R30);
		/* 821541F0h case    8:*/		return 0x821541F4;
		  /* 821541F4h */ case    9:  		/* rlwinm R27, R11, 24, 27, 31 */
		/* 821541F4h case    9:*/		cpu::op::rlwinm<0,24,27,31>(regs,&regs.R27,regs.R11);
		/* 821541F4h case    9:*/		return 0x821541F8;
	}
	return 0x821541F8;
} // Block from 821541D0h-821541F8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821541F8h
// Function '?InsertMovWithMask@XGRAPHICS@@YAXKKPAU_R400IL_RECORDED_INFO@1@PAPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821541F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821541F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821541F8);
		  /* 821541F8h */ case    0:  		/* cmplwi CR6, R27, 14 */
		/* 821541F8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x0000000E);
		/* 821541F8h case    0:*/		return 0x821541FC;
		  /* 821541FCh */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 821541FCh case    1:*/		if ( regs.CR[6].eq ) { return 0x8215420C;  }
		/* 821541FCh case    1:*/		return 0x82154200;
		  /* 82154200h */ case    2:  		/* cmplwi CR6, R27, 19 */
		/* 82154200h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000013);
		/* 82154200h case    2:*/		return 0x82154204;
		  /* 82154204h */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 82154204h case    3:*/		if ( regs.CR[6].eq ) { return 0x8215420C;  }
		/* 82154204h case    3:*/		return 0x82154208;
		  /* 82154208h */ case    4:  		/* bl 1126488 */
		/* 82154208h case    4:*/		regs.LR = 0x8215420C; return 0x82267260;
		/* 82154208h case    4:*/		return 0x8215420C;
	}
	return 0x8215420C;
} // Block from 821541F8h-8215420Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8215420Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215420C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215420C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215420C);
		  /* 8215420Ch */ case    0:  		/* rlwinm R11, R30, 0, 18, 18 */
		/* 8215420Ch case    0:*/		cpu::op::rlwinm<0,0,18,18>(regs,&regs.R11,regs.R30);
		/* 8215420Ch case    0:*/		return 0x82154210;
		  /* 82154210h */ case    1:  		/* cmplwi CR6, R11, 8192 */
		/* 82154210h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002000);
		/* 82154210h case    1:*/		return 0x82154214;
		  /* 82154214h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 82154214h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8215421C;  }
		/* 82154214h case    2:*/		return 0x82154218;
		  /* 82154218h */ case    3:  		/* bl 1126472 */
		/* 82154218h case    3:*/		regs.LR = 0x8215421C; return 0x82267260;
		/* 82154218h case    3:*/		return 0x8215421C;
	}
	return 0x8215421C;
} // Block from 8215420Ch-8215421Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8215421Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215421C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215421C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215421C);
		  /* 8215421Ch */ case    0:  		/* mr R11, R28 */
		/* 8215421Ch case    0:*/		regs.R11 = regs.R28;
		/* 8215421Ch case    0:*/		return 0x82154220;
		  /* 82154220h */ case    1:  		/* rlwinm R29, R28, 0, 21, 31 */
		/* 82154220h case    1:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R29,regs.R28);
		/* 82154220h case    1:*/		return 0x82154224;
		  /* 82154224h */ case    2:  		/* rlwimi R11, R28, 12, 21, 23 */
		/* 82154224h case    2:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R11,regs.R28);
		/* 82154224h case    2:*/		return 0x82154228;
		  /* 82154228h */ case    3:  		/* rlwinm R11, R11, 0, 19, 23 */
		/* 82154228h case    3:*/		cpu::op::rlwinm<0,0,19,23>(regs,&regs.R11,regs.R11);
		/* 82154228h case    3:*/		return 0x8215422C;
		  /* 8215422Ch */ case    4:  		/* cmplwi CR6, R11, 4608 */
		/* 8215422Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00001200);
		/* 8215422Ch case    4:*/		return 0x82154230;
		  /* 82154230h */ case    5:  		/* bc 12, CR6_EQ, 8 */
		/* 82154230h case    5:*/		if ( regs.CR[6].eq ) { return 0x82154238;  }
		/* 82154230h case    5:*/		return 0x82154234;
		  /* 82154234h */ case    6:  		/* bl 1126444 */
		/* 82154234h case    6:*/		regs.LR = 0x82154238; return 0x82267260;
		/* 82154234h case    6:*/		return 0x82154238;
	}
	return 0x82154238;
} // Block from 8215421Ch-82154238h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82154238h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154238);
		  /* 82154238h */ case    0:  		/* cmplwi CR6, R29, 2048 */
		/* 82154238h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000800);
		/* 82154238h case    0:*/		return 0x8215423C;
		  /* 8215423Ch */ case    1:  		/* bc 12, CR6_LT, 8 */
		/* 8215423Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x82154244;  }
		/* 8215423Ch case    1:*/		return 0x82154240;
		  /* 82154240h */ case    2:  		/* bl 1126432 */
		/* 82154240h case    2:*/		regs.LR = 0x82154244; return 0x82267260;
		/* 82154240h case    2:*/		return 0x82154244;
	}
	return 0x82154244;
} // Block from 82154238h-82154244h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82154244h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154244( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154244) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154244);
		  /* 82154244h */ case    0:  		/* cmplwi CR6, R29, 16 */
		/* 82154244h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000010);
		/* 82154244h case    0:*/		return 0x82154248;
		  /* 82154248h */ case    1:  		/* bc 12, CR6_LT, 24 */
		/* 82154248h case    1:*/		if ( regs.CR[6].lt ) { return 0x82154260;  }
		/* 82154248h case    1:*/		return 0x8215424C;
		  /* 8215424Ch */ case    2:  		/* lis R11, -1 */
		/* 8215424Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8215424Ch case    2:*/		return 0x82154250;
		  /* 82154250h */ case    3:  		/* ori R11, R11, 768 */
		/* 82154250h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x300);
		/* 82154250h case    3:*/		return 0x82154254;
		  /* 82154254h */ case    4:  		/* cmplw CR6, R25, R11 */
		/* 82154254h case    4:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R11);
		/* 82154254h case    4:*/		return 0x82154258;
		  /* 82154258h */ case    5:  		/* bc 4, CR6_LT, 8 */
		/* 82154258h case    5:*/		if ( !regs.CR[6].lt ) { return 0x82154260;  }
		/* 82154258h case    5:*/		return 0x8215425C;
		  /* 8215425Ch */ case    6:  		/* bl 1126404 */
		/* 8215425Ch case    6:*/		regs.LR = 0x82154260; return 0x82267260;
		/* 8215425Ch case    6:*/		return 0x82154260;
	}
	return 0x82154260;
} // Block from 82154244h-82154260h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82154260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154260);
		  /* 82154260h */ case    0:  		/* cmplwi CR6, R27, 19 */
		/* 82154260h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000013);
		/* 82154260h case    0:*/		return 0x82154264;
		  /* 82154264h */ case    1:  		/* bc 4, CR6_EQ, 56 */
		/* 82154264h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8215429C;  }
		/* 82154264h case    1:*/		return 0x82154268;
		  /* 82154268h */ case    2:  		/* addi R5, R1, 80 */
		/* 82154268h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82154268h case    2:*/		return 0x8215426C;
		  /* 8215426Ch */ case    3:  		/* li R4, 52 */
		/* 8215426Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x34);
		/* 8215426Ch case    3:*/		return 0x82154270;
		  /* 82154270h */ case    4:  		/* mr R3, R30 */
		/* 82154270h case    4:*/		regs.R3 = regs.R30;
		/* 82154270h case    4:*/		return 0x82154274;
		  /* 82154274h */ case    5:  		/* bl -4740 */
		/* 82154274h case    5:*/		regs.LR = 0x82154278; return 0x82152FF0;
		/* 82154274h case    5:*/		return 0x82154278;
		  /* 82154278h */ case    6:  		/* lwz R11, <#[R1 + 80]> */
		/* 82154278h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82154278h case    6:*/		return 0x8215427C;
		  /* 8215427Ch */ case    7:  		/* li R10, 8 */
		/* 8215427Ch case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x8);
		/* 8215427Ch case    7:*/		return 0x82154280;
		  /* 82154280h */ case    8:  		/* rlwinm R9, R29, 0, 16, 31 */
		/* 82154280h case    8:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R29);
		/* 82154280h case    8:*/		return 0x82154284;
		  /* 82154284h */ case    9:  		/* li R8, 41 */
		/* 82154284h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x29);
		/* 82154284h case    9:*/		return 0x82154288;
		  /* 82154288h */ case   10:  		/* stw R10, <#[R11]> */
		/* 82154288h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82154288h case   10:*/		return 0x8215428C;
		  /* 8215428Ch */ case   11:  		/* stwu R9, <#[R11 + 4]> */
		/* 8215428Ch case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8215428Ch case   11:*/		return 0x82154290;
		  /* 82154290h */ case   12:  		/* stwu R8, <#[R11 + 4]> */
		/* 82154290h case   12:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82154290h case   12:*/		return 0x82154294;
		  /* 82154294h */ case   13:  		/* addi R31, R11, 4 */
		/* 82154294h case   13:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 82154294h case   13:*/		return 0x82154298;
		  /* 82154298h */ case   14:  		/* b 724 */
		/* 82154298h case   14:*/		return 0x8215456C;
		/* 82154298h case   14:*/		return 0x8215429C;
	}
	return 0x8215429C;
} // Block from 82154260h-8215429Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215429Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215429C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215429C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215429C);
		  /* 8215429Ch */ case    0:  		/* rlwinm R10, R30, 0, 4, 7 */
		/* 8215429Ch case    0:*/		cpu::op::rlwinm<0,0,4,7>(regs,&regs.R10,regs.R30);
		/* 8215429Ch case    0:*/		return 0x821542A0;
		  /* 821542A0h */ case    1:  		/* lis R9, 3328 */
		/* 821542A0h case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0xD00);
		/* 821542A0h case    1:*/		return 0x821542A4;
		  /* 821542A4h */ case    2:  		/* rlwinm R11, R30, 0, 21, 31 */
		/* 821542A4h case    2:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R11,regs.R30);
		/* 821542A4h case    2:*/		return 0x821542A8;
		  /* 821542A8h */ case    3:  		/* cmplw CR6, R10, R9 */
		/* 821542A8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821542A8h case    3:*/		return 0x821542AC;
		  /* 821542ACh */ case    4:  		/* rlwinm R11, R11, 0, 16, 31 */
		/* 821542ACh case    4:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R11);
		/* 821542ACh case    4:*/		return 0x821542B0;
		  /* 821542B0h */ case    5:  		/* bc 4, CR6_EQ, 52 */
		/* 821542B0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821542E4;  }
		/* 821542B0h case    5:*/		return 0x821542B4;
		  /* 821542B4h */ case    6:  		/* li R10, 53 */
		/* 821542B4h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x35);
		/* 821542B4h case    6:*/		return 0x821542B8;
		  /* 821542B8h */ case    7:  		/* rlwinm R9, R29, 0, 16, 31 */
		/* 821542B8h case    7:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R29);
		/* 821542B8h case    7:*/		return 0x821542BC;
		  /* 821542BCh */ case    8:  		/* stw R10, <#[R31]> */
		/* 821542BCh case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821542BCh case    8:*/		return 0x821542C0;
		  /* 821542C0h */ case    9:  		/* li R10, 39 */
		/* 821542C0h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x27);
		/* 821542C0h case    9:*/		return 0x821542C4;
		  /* 821542C4h */ case   10:  		/* stwu R11, <#[R31 + 4]> */
		/* 821542C4h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821542C4h case   10:*/		return 0x821542C8;
		  /* 821542C8h */ case   11:  		/* li R11, 8 */
		/* 821542C8h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x8);
		/* 821542C8h case   11:*/		return 0x821542CC;
		  /* 821542CCh */ case   12:  		/* li R8, 41 */
		/* 821542CCh case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x29);
		/* 821542CCh case   12:*/		return 0x821542D0;
	}
	return 0x821542D0;
} // Block from 8215429Ch-821542D0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821542D0h
// Function '?AddCmpInstForPredicatedInst@XGRAPHICS@@YAXKKKPAU_R400IL_RECORDED_INFO@1@PAPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821542D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821542D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821542D0);
		  /* 821542D0h */ case    0:  		/* stwu R10, <#[R31 + 4]> */
		/* 821542D0h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821542D0h case    0:*/		return 0x821542D4;
		  /* 821542D4h */ case    1:  		/* stwu R11, <#[R31 + 4]> */
		/* 821542D4h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821542D4h case    1:*/		return 0x821542D8;
		  /* 821542D8h */ case    2:  		/* stwu R9, <#[R31 + 4]> */
		/* 821542D8h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821542D8h case    2:*/		return 0x821542DC;
		  /* 821542DCh */ case    3:  		/* stwu R8, <#[R31 + 4]> */
		/* 821542DCh case    3:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821542DCh case    3:*/		return 0x821542E0;
		  /* 821542E0h */ case    4:  		/* b 24 */
		/* 821542E0h case    4:*/		return 0x821542F8;
		/* 821542E0h case    4:*/		return 0x821542E4;
	}
	return 0x821542E4;
} // Block from 821542D0h-821542E4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821542E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821542E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821542E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821542E4);
		  /* 821542E4h */ case    0:  		/* li R10, 9 */
		/* 821542E4h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x9);
		/* 821542E4h case    0:*/		return 0x821542E8;
		  /* 821542E8h */ case    1:  		/* stw R10, <#[R31]> */
		/* 821542E8h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821542E8h case    1:*/		return 0x821542EC;
		  /* 821542ECh */ case    2:  		/* rlwinm R10, R29, 0, 16, 31 */
		/* 821542ECh case    2:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R29);
		/* 821542ECh case    2:*/		return 0x821542F0;
		  /* 821542F0h */ case    3:  		/* stwu R11, <#[R31 + 4]> */
		/* 821542F0h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821542F0h case    3:*/		return 0x821542F4;
		  /* 821542F4h */ case    4:  		/* stwu R10, <#[R31 + 4]> */
		/* 821542F4h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821542F4h case    4:*/		return 0x821542F8;
	}
	return 0x821542F8;
} // Block from 821542E4h-821542F8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821542F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821542F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821542F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821542F8);
		  /* 821542F8h */ case    0:  		/* addi R31, R31, 4 */
		/* 821542F8h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821542F8h case    0:*/		return 0x821542FC;
		  /* 821542FCh */ case    1:  		/* b 624 */
		/* 821542FCh case    1:*/		return 0x8215456C;
		/* 821542FCh case    1:*/		return 0x82154300;
		  /* 82154300h */ case    2:  		/* lwz R11, <#[R29 + 24]> */
		/* 82154300h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000018) );
		/* 82154300h case    2:*/		return 0x82154304;
		  /* 82154304h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 82154304h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82154304h case    3:*/		return 0x82154308;
		  /* 82154308h */ case    4:  		/* bc 4, CR6_EQ, 8 */
		/* 82154308h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82154310;  }
		/* 82154308h case    4:*/		return 0x8215430C;
		  /* 8215430Ch */ case    5:  		/* bl 1126228 */
		/* 8215430Ch case    5:*/		regs.LR = 0x82154310; return 0x82267260;
		/* 8215430Ch case    5:*/		return 0x82154310;
	}
	return 0x82154310;
} // Block from 821542F8h-82154310h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82154310h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154310);
		  /* 82154310h */ case    0:  		/* addi R3, R29, 12 */
		/* 82154310h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R29,0xC);
		/* 82154310h case    0:*/		return 0x82154314;
		  /* 82154314h */ case    1:  		/* lwz R4, <#[R29 + 24]> */
		/* 82154314h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000018) );
		/* 82154314h case    1:*/		return 0x82154318;
		  /* 82154318h */ case    2:  		/* bl -4400 */
		/* 82154318h case    2:*/		regs.LR = 0x8215431C; return 0x821531E8;
		/* 82154318h case    2:*/		return 0x8215431C;
		  /* 8215431Ch */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 8215431Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8215431Ch case    3:*/		return 0x82154320;
		  /* 82154320h */ case    4:  		/* bc 12, CR0_EQ, 116 */
		/* 82154320h case    4:*/		if ( regs.CR[0].eq ) { return 0x82154394;  }
		/* 82154320h case    4:*/		return 0x82154324;
		  /* 82154324h */ case    5:  		/* lwz R11, <#[R3]> */
		/* 82154324h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82154324h case    5:*/		return 0x82154328;
		  /* 82154328h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 82154328h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82154328h case    6:*/		return 0x8215432C;
		  /* 8215432Ch */ case    7:  		/* bc 12, CR6_EQ, 104 */
		/* 8215432Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82154394;  }
		/* 8215432Ch case    7:*/		return 0x82154330;
		  /* 82154330h */ case    8:  		/* li R11, 41 */
		/* 82154330h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x29);
		/* 82154330h case    8:*/		return 0x82154334;
		  /* 82154334h */ case    9:  		/* li R10, 53 */
		/* 82154334h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x35);
		/* 82154334h case    9:*/		return 0x82154338;
		  /* 82154338h */ case   10:  		/* stw R11, <#[R31]> */
		/* 82154338h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82154338h case   10:*/		return 0x8215433C;
		  /* 8215433Ch */ case   11:  		/* stwu R10, <#[R31 + 4]> */
		/* 8215433Ch case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 8215433Ch case   11:*/		return 0x82154340;
		  /* 82154340h */ case   12:  		/* lhz R11, <#[R3 + 6]> */
		/* 82154340h case   12:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000006) );
		/* 82154340h case   12:*/		return 0x82154344;
		  /* 82154344h */ case   13:  		/* stwu R11, <#[R31 + 4]> */
		/* 82154344h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82154344h case   13:*/		return 0x82154348;
		  /* 82154348h */ case   14:  		/* b -80 */
		/* 82154348h case   14:*/		return 0x821542F8;
		/* 82154348h case   14:*/		return 0x8215434C;
		  /* 8215434Ch */ case   15:  		/* lwz R11, <#[R29 + 24]> */
		/* 8215434Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000018) );
		/* 8215434Ch case   15:*/		return 0x82154350;
		  /* 82154350h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 82154350h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82154350h case   16:*/		return 0x82154354;
		  /* 82154354h */ case   17:  		/* bc 4, CR6_EQ, 8 */
		/* 82154354h case   17:*/		if ( !regs.CR[6].eq ) { return 0x8215435C;  }
		/* 82154354h case   17:*/		return 0x82154358;
		  /* 82154358h */ case   18:  		/* bl 1126152 */
		/* 82154358h case   18:*/		regs.LR = 0x8215435C; return 0x82267260;
		/* 82154358h case   18:*/		return 0x8215435C;
	}
	return 0x8215435C;
} // Block from 82154310h-8215435Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8215435Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215435C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215435C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215435C);
		  /* 8215435Ch */ case    0:  		/* addi R3, R29, 12 */
		/* 8215435Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R29,0xC);
		/* 8215435Ch case    0:*/		return 0x82154360;
		  /* 82154360h */ case    1:  		/* lwz R4, <#[R29 + 24]> */
		/* 82154360h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000018) );
		/* 82154360h case    1:*/		return 0x82154364;
		  /* 82154364h */ case    2:  		/* bl -4476 */
		/* 82154364h case    2:*/		regs.LR = 0x82154368; return 0x821531E8;
		/* 82154364h case    2:*/		return 0x82154368;
		  /* 82154368h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 82154368h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82154368h case    3:*/		return 0x8215436C;
		  /* 8215436Ch */ case    4:  		/* bc 12, CR0_EQ, 28 */
		/* 8215436Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x82154388;  }
		/* 8215436Ch case    4:*/		return 0x82154370;
		  /* 82154370h */ case    5:  		/* lwz R11, <#[R3]> */
		/* 82154370h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82154370h case    5:*/		return 0x82154374;
		  /* 82154374h */ case    6:  		/* cmpwi CR6, R11, 0 */
		/* 82154374h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 82154374h case    6:*/		return 0x82154378;
		  /* 82154378h */ case    7:  		/* bc 12, CR6_EQ, 16 */
		/* 82154378h case    7:*/		if ( regs.CR[6].eq ) { return 0x82154388;  }
		/* 82154378h case    7:*/		return 0x8215437C;
		  /* 8215437Ch */ case    8:  		/* li R11, 0 */
		/* 8215437Ch case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8215437Ch case    8:*/		return 0x82154380;
		  /* 82154380h */ case    9:  		/* stw R11, <#[R3]> */
		/* 82154380h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82154380h case    9:*/		return 0x82154384;
		  /* 82154384h */ case   10:  		/* stw R11, <#[R3 + 4]> */
		/* 82154384h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82154384h case   10:*/		return 0x82154388;
	}
	return 0x82154388;
} // Block from 8215435Ch-82154388h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82154388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154388);
		  /* 82154388h */ case    0:  		/* lwz R11, <#[R29 + 24]> */
		/* 82154388h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000018) );
		/* 82154388h case    0:*/		return 0x8215438C;
		  /* 8215438Ch */ case    1:  		/* addi R11, R11, -1 */
		/* 8215438Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8215438Ch case    1:*/		return 0x82154390;
		  /* 82154390h */ case    2:  		/* stw R11, <#[R29 + 24]> */
		/* 82154390h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000018) );
		/* 82154390h case    2:*/		return 0x82154394;
	}
	return 0x82154394;
} // Block from 82154388h-82154394h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82154394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154394);
		  /* 82154394h */ case    0:  		/* rlwinm R11, R28, 0, 16, 31 */
		/* 82154394h case    0:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R28);
		/* 82154394h case    0:*/		return 0x82154398;
		  /* 82154398h */ case    1:  		/* stw R11, <#[R31]> */
		/* 82154398h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82154398h case    1:*/		return 0x8215439C;
		  /* 8215439Ch */ case    2:  		/* b -164 */
		/* 8215439Ch case    2:*/		return 0x821542F8;
		/* 8215439Ch case    2:*/		return 0x821543A0;
		  /* 821543A0h */ case    3:  		/* lwz R30, <#[R26]> */
		/* 821543A0h case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R26 + 0x00000000) );
		/* 821543A0h case    3:*/		return 0x821543A4;
		  /* 821543A4h */ case    4:  		/* addi R26, R26, 4 */
		/* 821543A4h case    4:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 821543A4h case    4:*/		return 0x821543A8;
		  /* 821543A8h */ case    5:  		/* mr R11, R30 */
		/* 821543A8h case    5:*/		regs.R11 = regs.R30;
		/* 821543A8h case    5:*/		return 0x821543AC;
		  /* 821543ACh */ case    6:  		/* rlwimi R11, R30, 12, 21, 23 */
		/* 821543ACh case    6:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R11,regs.R30);
		/* 821543ACh case    6:*/		return 0x821543B0;
		  /* 821543B0h */ case    7:  		/* rlwinm R11, R11, 0, 19, 23 */
		/* 821543B0h case    7:*/		cpu::op::rlwinm<0,0,19,23>(regs,&regs.R11,regs.R11);
		/* 821543B0h case    7:*/		return 0x821543B4;
		  /* 821543B4h */ case    8:  		/* cmplwi CR6, R11, 3840 */
		/* 821543B4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000F00);
		/* 821543B4h case    8:*/		return 0x821543B8;
		  /* 821543B8h */ case    9:  		/* bc 12, CR6_EQ, 8 */
		/* 821543B8h case    9:*/		if ( regs.CR[6].eq ) { return 0x821543C0;  }
		/* 821543B8h case    9:*/		return 0x821543BC;
		  /* 821543BCh */ case   10:  		/* bl 1126052 */
		/* 821543BCh case   10:*/		regs.LR = 0x821543C0; return 0x82267260;
		/* 821543BCh case   10:*/		return 0x821543C0;
	}
	return 0x821543C0;
} // Block from 82154394h-821543C0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821543C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821543C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821543C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821543C0);
		  /* 821543C0h */ case    0:  		/* rlwinm. R11, R30, 0, 21, 31 */
		/* 821543C0h case    0:*/		cpu::op::rlwinm<1,0,21,31>(regs,&regs.R11,regs.R30);
		/* 821543C0h case    0:*/		return 0x821543C4;
		  /* 821543C4h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 821543C4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821543CC;  }
		/* 821543C4h case    1:*/		return 0x821543C8;
		  /* 821543C8h */ case    2:  		/* bl 1126040 */
		/* 821543C8h case    2:*/		regs.LR = 0x821543CC; return 0x82267260;
		/* 821543C8h case    2:*/		return 0x821543CC;
	}
	return 0x821543CC;
} // Block from 821543C0h-821543CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821543CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821543CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821543CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821543CC);
		  /* 821543CCh */ case    0:  		/* lwz R30, <#[R26]> */
		/* 821543CCh case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R26 + 0x00000000) );
		/* 821543CCh case    0:*/		return 0x821543D0;
		  /* 821543D0h */ case    1:  		/* addi R26, R26, 4 */
		/* 821543D0h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 821543D0h case    1:*/		return 0x821543D4;
		  /* 821543D4h */ case    2:  		/* mr R11, R30 */
		/* 821543D4h case    2:*/		regs.R11 = regs.R30;
		/* 821543D4h case    2:*/		return 0x821543D8;
		  /* 821543D8h */ case    3:  		/* rlwimi R11, R30, 12, 21, 23 */
		/* 821543D8h case    3:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R11,regs.R30);
		/* 821543D8h case    3:*/		return 0x821543DC;
		  /* 821543DCh */ case    4:  		/* rlwinm R11, R11, 0, 19, 23 */
		/* 821543DCh case    4:*/		cpu::op::rlwinm<0,0,19,23>(regs,&regs.R11,regs.R11);
		/* 821543DCh case    4:*/		return 0x821543E0;
		  /* 821543E0h */ case    5:  		/* cmplwi CR6, R11, 1792 */
		/* 821543E0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000700);
		/* 821543E0h case    5:*/		return 0x821543E4;
		  /* 821543E4h */ case    6:  		/* bc 12, CR6_EQ, 8 */
		/* 821543E4h case    6:*/		if ( regs.CR[6].eq ) { return 0x821543EC;  }
		/* 821543E4h case    6:*/		return 0x821543E8;
		  /* 821543E8h */ case    7:  		/* bl 1126008 */
		/* 821543E8h case    7:*/		regs.LR = 0x821543EC; return 0x82267260;
		/* 821543E8h case    7:*/		return 0x821543EC;
	}
	return 0x821543EC;
} // Block from 821543CCh-821543ECh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821543ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821543EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821543EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821543EC);
		  /* 821543ECh */ case    0:  		/* rlwinm R11, R30, 0, 21, 31 */
		/* 821543ECh case    0:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R11,regs.R30);
		/* 821543ECh case    0:*/		return 0x821543F0;
		  /* 821543F0h */ case    1:  		/* cmplwi CR6, R11, 16 */
		/* 821543F0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000010);
		/* 821543F0h case    1:*/		return 0x821543F4;
		  /* 821543F4h */ case    2:  		/* bc 12, CR6_LT, 8 */
		/* 821543F4h case    2:*/		if ( regs.CR[6].lt ) { return 0x821543FC;  }
		/* 821543F4h case    2:*/		return 0x821543F8;
		  /* 821543F8h */ case    3:  		/* bl 1125992 */
		/* 821543F8h case    3:*/		regs.LR = 0x821543FC; return 0x82267260;
		/* 821543F8h case    3:*/		return 0x821543FC;
	}
	return 0x821543FC;
} // Block from 821543ECh-821543FCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821543FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821543FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821543FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821543FC);
		  /* 821543FCh */ case    0:  		/* rlwinm R11, R28, 0, 16, 31 */
		/* 821543FCh case    0:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R28);
		/* 821543FCh case    0:*/		return 0x82154400;
		  /* 82154400h */ case    1:  		/* addi R10, R31, 4 */
		/* 82154400h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x4);
		/* 82154400h case    1:*/		return 0x82154404;
		  /* 82154404h */ case    2:  		/* stw R11, <#[R31]> */
		/* 82154404h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82154404h case    2:*/		return 0x82154408;
		  /* 82154408h */ case    3:  		/* addi R7, R1, 80 */
		/* 82154408h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82154408h case    3:*/		return 0x8215440C;
		  /* 8215440Ch */ case    4:  		/* stw R10, <#[R1 + 80]> */
		/* 8215440Ch case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8215440Ch case    4:*/		return 0x82154410;
		  /* 82154410h */ case    5:  		/* mr R6, R29 */
		/* 82154410h case    5:*/		regs.R6 = regs.R29;
		/* 82154410h case    5:*/		return 0x82154414;
		  /* 82154414h */ case    6:  		/* li R5, 0 */
		/* 82154414h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82154414h case    6:*/		return 0x82154418;
		  /* 82154418h */ case    7:  		/* li R4, 0 */
		/* 82154418h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82154418h case    7:*/		return 0x8215441C;
		  /* 8215441Ch */ case    8:  		/* mr R3, R30 */
		/* 8215441Ch case    8:*/		regs.R3 = regs.R30;
		/* 8215441Ch case    8:*/		return 0x82154420;
		  /* 82154420h */ case    9:  		/* bl -3424 */
		/* 82154420h case    9:*/		regs.LR = 0x82154424; return 0x821536C0;
		/* 82154420h case    9:*/		return 0x82154424;
		  /* 82154424h */ case   10:  		/* lwz R31, <#[R1 + 80]> */
		/* 82154424h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 82154424h case   10:*/		return 0x82154428;
		  /* 82154428h */ case   11:  		/* b 324 */
		/* 82154428h case   11:*/		return 0x8215456C;
		/* 82154428h case   11:*/		return 0x8215442C;
		  /* 8215442Ch */ case   12:  		/* lwz R11, <#[R26]> */
		/* 8215442Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8215442Ch case   12:*/		return 0x82154430;
		  /* 82154430h */ case   13:  		/* addi R26, R26, 4 */
		/* 82154430h case   13:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 82154430h case   13:*/		return 0x82154434;
		  /* 82154434h */ case   14:  		/* mr R10, R11 */
		/* 82154434h case   14:*/		regs.R10 = regs.R11;
		/* 82154434h case   14:*/		return 0x82154438;
		  /* 82154438h */ case   15:  		/* rlwinm R30, R11, 0, 21, 31 */
		/* 82154438h case   15:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R30,regs.R11);
		/* 82154438h case   15:*/		return 0x8215443C;
		  /* 8215443Ch */ case   16:  		/* rlwimi R10, R11, 12, 21, 23 */
		/* 8215443Ch case   16:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R10,regs.R11);
		/* 8215443Ch case   16:*/		return 0x82154440;
		  /* 82154440h */ case   17:  		/* rlwinm R11, R10, 0, 19, 23 */
		/* 82154440h case   17:*/		cpu::op::rlwinm<0,0,19,23>(regs,&regs.R11,regs.R10);
		/* 82154440h case   17:*/		return 0x82154444;
		  /* 82154444h */ case   18:  		/* cmplwi CR6, R11, 4608 */
		/* 82154444h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00001200);
		/* 82154444h case   18:*/		return 0x82154448;
		  /* 82154448h */ case   19:  		/* bc 12, CR6_EQ, 8 */
		/* 82154448h case   19:*/		if ( regs.CR[6].eq ) { return 0x82154450;  }
		/* 82154448h case   19:*/		return 0x8215444C;
		  /* 8215444Ch */ case   20:  		/* bl 1125908 */
		/* 8215444Ch case   20:*/		regs.LR = 0x82154450; return 0x82267260;
		/* 8215444Ch case   20:*/		return 0x82154450;
	}
	return 0x82154450;
} // Block from 821543FCh-82154450h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82154450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154450);
		  /* 82154450h */ case    0:  		/* cmplwi CR6, R30, 2048 */
		/* 82154450h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000800);
		/* 82154450h case    0:*/		return 0x82154454;
		  /* 82154454h */ case    1:  		/* bc 12, CR6_LT, 8 */
		/* 82154454h case    1:*/		if ( regs.CR[6].lt ) { return 0x8215445C;  }
		/* 82154454h case    1:*/		return 0x82154458;
		  /* 82154458h */ case    2:  		/* bl 1125896 */
		/* 82154458h case    2:*/		regs.LR = 0x8215445C; return 0x82267260;
		/* 82154458h case    2:*/		return 0x8215445C;
	}
	return 0x8215445C;
} // Block from 82154450h-8215445Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215445Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215445C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215445C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215445C);
		  /* 8215445Ch */ case    0:  		/* cmplwi CR6, R30, 16 */
		/* 8215445Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000010);
		/* 8215445Ch case    0:*/		return 0x82154460;
		  /* 82154460h */ case    1:  		/* bc 12, CR6_LT, 24 */
		/* 82154460h case    1:*/		if ( regs.CR[6].lt ) { return 0x82154478;  }
		/* 82154460h case    1:*/		return 0x82154464;
		  /* 82154464h */ case    2:  		/* lis R11, -1 */
		/* 82154464h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82154464h case    2:*/		return 0x82154468;
		  /* 82154468h */ case    3:  		/* ori R11, R11, 768 */
		/* 82154468h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x300);
		/* 82154468h case    3:*/		return 0x8215446C;
		  /* 8215446Ch */ case    4:  		/* cmplw CR6, R25, R11 */
		/* 8215446Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R11);
		/* 8215446Ch case    4:*/		return 0x82154470;
		  /* 82154470h */ case    5:  		/* bc 4, CR6_LT, 8 */
		/* 82154470h case    5:*/		if ( !regs.CR[6].lt ) { return 0x82154478;  }
		/* 82154470h case    5:*/		return 0x82154474;
		  /* 82154474h */ case    6:  		/* bl 1125868 */
		/* 82154474h case    6:*/		regs.LR = 0x82154478; return 0x82267260;
		/* 82154474h case    6:*/		return 0x82154478;
	}
	return 0x82154478;
} // Block from 8215445Ch-82154478h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82154478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154478);
		  /* 82154478h */ case    0:  		/* rlwinm R11, R28, 0, 16, 31 */
		/* 82154478h case    0:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R28);
		/* 82154478h case    0:*/		return 0x8215447C;
		  /* 8215447Ch */ case    1:  		/* rlwinm R10, R30, 0, 16, 31 */
		/* 8215447Ch case    1:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R30);
		/* 8215447Ch case    1:*/		return 0x82154480;
		  /* 82154480h */ case    2:  		/* stw R11, <#[R31]> */
		/* 82154480h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82154480h case    2:*/		return 0x82154484;
		  /* 82154484h */ case    3:  		/* b -400 */
		/* 82154484h case    3:*/		return 0x821542F4;
		/* 82154484h case    3:*/		return 0x82154488;
		  /* 82154488h */ case    4:  		/* lwz R11, <#[R29 + 24]> */
		/* 82154488h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000018) );
		/* 82154488h case    4:*/		return 0x8215448C;
		  /* 8215448Ch */ case    5:  		/* addi R11, R11, 1 */
		/* 8215448Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8215448Ch case    5:*/		return 0x82154490;
		  /* 82154490h */ case    6:  		/* stw R11, <#[R29 + 24]> */
		/* 82154490h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000018) );
		/* 82154490h case    6:*/		return 0x82154494;
		  /* 82154494h */ case    7:  		/* lwz R30, <#[R26]> */
		/* 82154494h case    7:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R26 + 0x00000000) );
		/* 82154494h case    7:*/		return 0x82154498;
		  /* 82154498h */ case    8:  		/* rlwinm R11, R30, 0, 18, 18 */
		/* 82154498h case    8:*/		cpu::op::rlwinm<0,0,18,18>(regs,&regs.R11,regs.R30);
		/* 82154498h case    8:*/		return 0x8215449C;
		  /* 8215449Ch */ case    9:  		/* addi R26, R26, 4 */
		/* 8215449Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 8215449Ch case    9:*/		return 0x821544A0;
		  /* 821544A0h */ case   10:  		/* cmplwi CR6, R11, 8192 */
		/* 821544A0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002000);
		/* 821544A0h case   10:*/		return 0x821544A4;
		  /* 821544A4h */ case   11:  		/* bc 4, CR6_EQ, 8 */
		/* 821544A4h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821544AC;  }
		/* 821544A4h case   11:*/		return 0x821544A8;
		  /* 821544A8h */ case   12:  		/* bl 1125816 */
		/* 821544A8h case   12:*/		regs.LR = 0x821544AC; return 0x82267260;
		/* 821544A8h case   12:*/		return 0x821544AC;
	}
	return 0x821544AC;
} // Block from 82154478h-821544ACh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821544ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821544AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821544AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821544AC);
		  /* 821544ACh */ case    0:  		/* mr R11, R30 */
		/* 821544ACh case    0:*/		regs.R11 = regs.R30;
		/* 821544ACh case    0:*/		return 0x821544B0;
	}
	return 0x821544B0;
} // Block from 821544ACh-821544B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821544B0h
// Function '?SwizzleResult@XGRAPHICS@@YAXKKKPAU_R400IL_RECORDED_INFO@1@PAPAK@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821544B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821544B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821544B0);
		  /* 821544B0h */ case    0:  		/* rlwimi R11, R30, 12, 21, 23 */
		/* 821544B0h case    0:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R11,regs.R30);
		/* 821544B0h case    0:*/		return 0x821544B4;
		  /* 821544B4h */ case    1:  		/* rlwinm R28, R11, 24, 27, 31 */
		/* 821544B4h case    1:*/		cpu::op::rlwinm<0,24,27,31>(regs,&regs.R28,regs.R11);
		/* 821544B4h case    1:*/		return 0x821544B8;
		  /* 821544B8h */ case    2:  		/* cmplwi CR6, R28, 14 */
		/* 821544B8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x0000000E);
		/* 821544B8h case    2:*/		return 0x821544BC;
		  /* 821544BCh */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 821544BCh case    3:*/		if ( regs.CR[6].eq ) { return 0x821544CC;  }
		/* 821544BCh case    3:*/		return 0x821544C0;
		  /* 821544C0h */ case    4:  		/* cmplwi CR6, R28, 19 */
		/* 821544C0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000013);
		/* 821544C0h case    4:*/		return 0x821544C4;
		  /* 821544C4h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821544C4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821544D4;  }
		/* 821544C4h case    5:*/		return 0x821544C8;
		  /* 821544C8h */ case    6:  		/* bl 1125784 */
		/* 821544C8h case    6:*/		regs.LR = 0x821544CC; return 0x82267260;
		/* 821544C8h case    6:*/		return 0x821544CC;
	}
	return 0x821544CC;
} // Block from 821544B0h-821544CCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821544CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821544CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821544CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821544CC);
		  /* 821544CCh */ case    0:  		/* cmplwi CR6, R28, 19 */
		/* 821544CCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000013);
		/* 821544CCh case    0:*/		return 0x821544D0;
		  /* 821544D0h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 821544D0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821544E0;  }
		/* 821544D0h case    1:*/		return 0x821544D4;
	}
	return 0x821544D4;
} // Block from 821544CCh-821544D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821544D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821544D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821544D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821544D4);
		  /* 821544D4h */ case    0:  		/* li R4, 52 */
		/* 821544D4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x34);
		/* 821544D4h case    0:*/		return 0x821544D8;
		  /* 821544D8h */ case    1:  		/* mr R3, R30 */
		/* 821544D8h case    1:*/		regs.R3 = regs.R30;
		/* 821544D8h case    1:*/		return 0x821544DC;
		  /* 821544DCh */ case    2:  		/* b 128 */
		/* 821544DCh case    2:*/		return 0x8215455C;
		/* 821544DCh case    2:*/		return 0x821544E0;
	}
	return 0x821544E0;
} // Block from 821544D4h-821544E0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821544E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821544E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821544E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821544E0);
		  /* 821544E0h */ case    0:  		/* li R11, 53 */
		/* 821544E0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x35);
		/* 821544E0h case    0:*/		return 0x821544E4;
		  /* 821544E4h */ case    1:  		/* rlwinm R28, R30, 0, 21, 31 */
		/* 821544E4h case    1:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R28,regs.R30);
		/* 821544E4h case    1:*/		return 0x821544E8;
		  /* 821544E8h */ case    2:  		/* stw R11, <#[R31]> */
		/* 821544E8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821544E8h case    2:*/		return 0x821544EC;
		  /* 821544ECh */ case    3:  		/* rlwinm R11, R30, 0, 4, 7 */
		/* 821544ECh case    3:*/		cpu::op::rlwinm<0,0,4,7>(regs,&regs.R11,regs.R30);
		/* 821544ECh case    3:*/		return 0x821544F0;
		  /* 821544F0h */ case    4:  		/* lis R10, 3328 */
		/* 821544F0h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xD00);
		/* 821544F0h case    4:*/		return 0x821544F4;
		  /* 821544F4h */ case    5:  		/* stwu R28, <#[R31 + 4]> */
		/* 821544F4h case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821544F4h case    5:*/		return 0x821544F8;
		  /* 821544F8h */ case    6:  		/* addi R31, R31, 4 */
		/* 821544F8h case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821544F8h case    6:*/		return 0x821544FC;
		  /* 821544FCh */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 821544FCh case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821544FCh case    7:*/		return 0x82154500;
		  /* 82154500h */ case    8:  		/* bc 4, CR6_EQ, 108 */
		/* 82154500h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8215456C;  }
		/* 82154500h case    8:*/		return 0x82154504;
		  /* 82154504h */ case    9:  		/* li R11, 39 */
		/* 82154504h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x27);
		/* 82154504h case    9:*/		return 0x82154508;
		  /* 82154508h */ case   10:  		/* addi R3, R29, 12 */
		/* 82154508h case   10:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R29,0xC);
		/* 82154508h case   10:*/		return 0x8215450C;
		  /* 8215450Ch */ case   11:  		/* stw R11, <#[R31]> */
		/* 8215450Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8215450Ch case   11:*/		return 0x82154510;
		  /* 82154510h */ case   12:  		/* addi R31, R31, 4 */
		/* 82154510h case   12:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82154510h case   12:*/		return 0x82154514;
		  /* 82154514h */ case   13:  		/* lwz R4, <#[R29 + 24]> */
		/* 82154514h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000018) );
		/* 82154514h case   13:*/		return 0x82154518;
		  /* 82154518h */ case   14:  		/* bl -4496 */
		/* 82154518h case   14:*/		regs.LR = 0x8215451C; return 0x82153388;
		/* 82154518h case   14:*/		return 0x8215451C;
		  /* 8215451Ch */ case   15:  		/* stw R27, <#[R3]> */
		/* 8215451Ch case   15:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R3 + 0x00000000) );
		/* 8215451Ch case   15:*/		return 0x82154520;
		  /* 82154520h */ case   16:  		/* stw R28, <#[R3 + 4]> */
		/* 82154520h case   16:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000004) );
		/* 82154520h case   16:*/		return 0x82154524;
		  /* 82154524h */ case   17:  		/* b 72 */
		/* 82154524h case   17:*/		return 0x8215456C;
		/* 82154524h case   17:*/		return 0x82154528;
	}
	return 0x82154528;
} // Block from 821544E0h-82154528h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82154528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154528);
		  /* 82154528h */ case    0:  		/* lwz R31, <#[R26]> */
		/* 82154528h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R26 + 0x00000000) );
		/* 82154528h case    0:*/		return 0x8215452C;
		  /* 8215452Ch */ case    1:  		/* addi R26, R26, 4 */
		/* 8215452Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 8215452Ch case    1:*/		return 0x82154530;
		  /* 82154530h */ case    2:  		/* mr R11, R31 */
		/* 82154530h case    2:*/		regs.R11 = regs.R31;
		/* 82154530h case    2:*/		return 0x82154534;
		  /* 82154534h */ case    3:  		/* rlwimi R11, R31, 12, 21, 23 */
		/* 82154534h case    3:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R11,regs.R31);
		/* 82154534h case    3:*/		return 0x82154538;
		  /* 82154538h */ case    4:  		/* rlwinm R11, R11, 0, 19, 23 */
		/* 82154538h case    4:*/		cpu::op::rlwinm<0,0,19,23>(regs,&regs.R11,regs.R11);
		/* 82154538h case    4:*/		return 0x8215453C;
		  /* 8215453Ch */ case    5:  		/* cmplwi CR6, R11, 4864 */
		/* 8215453Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00001300);
		/* 8215453Ch case    5:*/		return 0x82154540;
		  /* 82154540h */ case    6:  		/* bc 12, CR6_EQ, 8 */
		/* 82154540h case    6:*/		if ( regs.CR[6].eq ) { return 0x82154548;  }
		/* 82154540h case    6:*/		return 0x82154544;
		  /* 82154544h */ case    7:  		/* bl 1125660 */
		/* 82154544h case    7:*/		regs.LR = 0x82154548; return 0x82267260;
		/* 82154544h case    7:*/		return 0x82154548;
	}
	return 0x82154548;
} // Block from 82154528h-82154548h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82154548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154548);
		  /* 82154548h */ case    0:  		/* rlwinm. R11, R31, 0, 21, 31 */
		/* 82154548h case    0:*/		cpu::op::rlwinm<1,0,21,31>(regs,&regs.R11,regs.R31);
		/* 82154548h case    0:*/		return 0x8215454C;
		  /* 8215454Ch */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 8215454Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82154554;  }
		/* 8215454Ch case    1:*/		return 0x82154550;
		  /* 82154550h */ case    2:  		/* bl 1125648 */
		/* 82154550h case    2:*/		regs.LR = 0x82154554; return 0x82267260;
		/* 82154550h case    2:*/		return 0x82154554;
	}
	return 0x82154554;
} // Block from 82154548h-82154554h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82154554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154554);
		  /* 82154554h */ case    0:  		/* mr R4, R28 */
		/* 82154554h case    0:*/		regs.R4 = regs.R28;
		/* 82154554h case    0:*/		return 0x82154558;
		  /* 82154558h */ case    1:  		/* mr R3, R31 */
		/* 82154558h case    1:*/		regs.R3 = regs.R31;
		/* 82154558h case    1:*/		return 0x8215455C;
	}
	return 0x8215455C;
} // Block from 82154554h-8215455Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215455Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215455C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215455C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215455C);
		  /* 8215455Ch */ case    0:  		/* addi R5, R1, 80 */
		/* 8215455Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8215455Ch case    0:*/		return 0x82154560;
		  /* 82154560h */ case    1:  		/* bl -5488 */
		/* 82154560h case    1:*/		regs.LR = 0x82154564; return 0x82152FF0;
		/* 82154560h case    1:*/		return 0x82154564;
		  /* 82154564h */ case    2:  		/* b -320 */
		/* 82154564h case    2:*/		return 0x82154424;
		/* 82154564h case    2:*/		return 0x82154568;
	}
	return 0x82154568;
} // Block from 8215455Ch-82154568h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82154568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154568);
		  /* 82154568h */ case    0:  		/* bl 1125624 */
		/* 82154568h case    0:*/		regs.LR = 0x8215456C; return 0x82267260;
		/* 82154568h case    0:*/		return 0x8215456C;
	}
	return 0x8215456C;
} // Block from 82154568h-8215456Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215456Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215456C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215456C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215456C);
		  /* 8215456Ch */ case    0:  		/* stw R26, <#[R24]> */
		/* 8215456Ch case    0:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R24 + 0x00000000) );
		/* 8215456Ch case    0:*/		return 0x82154570;
		  /* 82154570h */ case    1:  		/* stw R31, <#[R23]> */
		/* 82154570h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R23 + 0x00000000) );
		/* 82154570h case    1:*/		return 0x82154574;
		  /* 82154574h */ case    2:  		/* addi R1, R1, 176 */
		/* 82154574h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82154574h case    2:*/		return 0x82154578;
		  /* 82154578h */ case    3:  		/* b -799460 */
		/* 82154578h case    3:*/		return 0x82091294;
		/* 82154578h case    3:*/		return 0x8215457C;
		  /* 8215457Ch */ case    4:  		/* nop */
		/* 8215457Ch case    4:*/		cpu::op::nop();
		/* 8215457Ch case    4:*/		return 0x82154580;
	}
	return 0x82154580;
} // Block from 8215456Ch-82154580h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82154580h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154580);
		  /* 82154580h */ case    0:  		/* mfspr R12, LR */
		/* 82154580h case    0:*/		regs.R12 = regs.LR;
		/* 82154580h case    0:*/		return 0x82154584;
		  /* 82154584h */ case    1:  		/* bl -799548 */
		/* 82154584h case    1:*/		regs.LR = 0x82154588; return 0x82091248;
		/* 82154584h case    1:*/		return 0x82154588;
		  /* 82154588h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82154588h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82154588h case    2:*/		return 0x8215458C;
		  /* 8215458Ch */ case    3:  		/* lwz R29, <#[R3]> */
		/* 8215458Ch case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x00000000) );
		/* 8215458Ch case    3:*/		return 0x82154590;
		  /* 82154590h */ case    4:  		/* mr R25, R3 */
		/* 82154590h case    4:*/		regs.R25 = regs.R3;
		/* 82154590h case    4:*/		return 0x82154594;
		  /* 82154594h */ case    5:  		/* lwz R28, <#[R7]> */
		/* 82154594h case    5:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R7 + 0x00000000) );
		/* 82154594h case    5:*/		return 0x82154598;
		  /* 82154598h */ case    6:  		/* mr R30, R5 */
		/* 82154598h case    6:*/		regs.R30 = regs.R5;
		/* 82154598h case    6:*/		return 0x8215459C;
		  /* 8215459Ch */ case    7:  		/* mr R26, R6 */
		/* 8215459Ch case    7:*/		regs.R26 = regs.R6;
		/* 8215459Ch case    7:*/		return 0x821545A0;
		  /* 821545A0h */ case    8:  		/* mr R24, R7 */
		/* 821545A0h case    8:*/		regs.R24 = regs.R7;
		/* 821545A0h case    8:*/		return 0x821545A4;
		  /* 821545A4h */ case    9:  		/* rlwinm R31, R5, 0, 16, 31 */
		/* 821545A4h case    9:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R31,regs.R5);
		/* 821545A4h case    9:*/		return 0x821545A8;
		  /* 821545A8h */ case   10:  		/* lhz R11, <#[R29]> */
		/* 821545A8h case   10:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821545A8h case   10:*/		return 0x821545AC;
		  /* 821545ACh */ case   11:  		/* li R27, 1 */
		/* 821545ACh case   11:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 821545ACh case   11:*/		return 0x821545B0;
		  /* 821545B0h */ case   12:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 821545B0h case   12:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821545B0h case   12:*/		return 0x821545B4;
		  /* 821545B4h */ case   13:  		/* cmpwi CR6, R11, 1 */
		/* 821545B4h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821545B4h case   13:*/		return 0x821545B8;
		  /* 821545B8h */ case   14:  		/* bc 12, CR6_EQ, 92 */
		/* 821545B8h case   14:*/		if ( regs.CR[6].eq ) { return 0x82154614;  }
		/* 821545B8h case   14:*/		return 0x821545BC;
		  /* 821545BCh */ case   15:  		/* cmpwi CR6, R11, 2 */
		/* 821545BCh case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 821545BCh case   15:*/		return 0x821545C0;
		  /* 821545C0h */ case   16:  		/* bc 12, CR6_EQ, 76 */
		/* 821545C0h case   16:*/		if ( regs.CR[6].eq ) { return 0x8215460C;  }
		/* 821545C0h case   16:*/		return 0x821545C4;
		  /* 821545C4h */ case   17:  		/* cmpwi CR6, R11, 3 */
		/* 821545C4h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 821545C4h case   17:*/		return 0x821545C8;
		  /* 821545C8h */ case   18:  		/* bc 12, CR6_EQ, 60 */
		/* 821545C8h case   18:*/		if ( regs.CR[6].eq ) { return 0x82154604;  }
		/* 821545C8h case   18:*/		return 0x821545CC;
		  /* 821545CCh */ case   19:  		/* cmpwi CR6, R11, 4 */
		/* 821545CCh case   19:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000004);
		/* 821545CCh case   19:*/		return 0x821545D0;
		  /* 821545D0h */ case   20:  		/* bc 12, CR6_EQ, 44 */
		/* 821545D0h case   20:*/		if ( regs.CR[6].eq ) { return 0x821545FC;  }
		/* 821545D0h case   20:*/		return 0x821545D4;
		  /* 821545D4h */ case   21:  		/* cmpwi CR6, R11, 5 */
		/* 821545D4h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000005);
		/* 821545D4h case   21:*/		return 0x821545D8;
		  /* 821545D8h */ case   22:  		/* bc 12, CR6_EQ, 28 */
		/* 821545D8h case   22:*/		if ( regs.CR[6].eq ) { return 0x821545F4;  }
		/* 821545D8h case   22:*/		return 0x821545DC;
		  /* 821545DCh */ case   23:  		/* cmpwi CR6, R11, 6 */
		/* 821545DCh case   23:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 821545DCh case   23:*/		return 0x821545E0;
		  /* 821545E0h */ case   24:  		/* bc 12, CR6_EQ, 12 */
		/* 821545E0h case   24:*/		if ( regs.CR[6].eq ) { return 0x821545EC;  }
		/* 821545E0h case   24:*/		return 0x821545E4;
		  /* 821545E4h */ case   25:  		/* bl 1125500 */
		/* 821545E4h case   25:*/		regs.LR = 0x821545E8; return 0x82267260;
		/* 821545E4h case   25:*/		return 0x821545E8;
		  /* 821545E8h */ case   26:  		/* b 52 */
		/* 821545E8h case   26:*/		return 0x8215461C;
		/* 821545E8h case   26:*/		return 0x821545EC;
	}
	return 0x821545EC;
} // Block from 82154580h-821545ECh (27 instructions)

//////////////////////////////////////////////////////
// Block at 821545ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821545EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821545EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821545EC);
		  /* 821545ECh */ case    0:  		/* rlwimi R31, R27, 18, 13, 15 */
		/* 821545ECh case    0:*/		cpu::op::rlwimi<0,18,13,15>(regs,&regs.R31,regs.R27);
		/* 821545ECh case    0:*/		return 0x821545F0;
		  /* 821545F0h */ case    1:  		/* b 44 */
		/* 821545F0h case    1:*/		return 0x8215461C;
		/* 821545F0h case    1:*/		return 0x821545F4;
	}
	return 0x821545F4;
} // Block from 821545ECh-821545F4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821545F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821545F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821545F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821545F4);
		  /* 821545F4h */ case    0:  		/* rlwinm R31, R31, 0, 16, 12 */
		/* 821545F4h case    0:*/		cpu::op::rlwinm<0,0,16,12>(regs,&regs.R31,regs.R31);
		/* 821545F4h case    0:*/		return 0x821545F8;
		  /* 821545F8h */ case    1:  		/* b 36 */
		/* 821545F8h case    1:*/		return 0x8215461C;
		/* 821545F8h case    1:*/		return 0x821545FC;
	}
	return 0x821545FC;
} // Block from 821545F4h-821545FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821545FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821545FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821545FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821545FC);
		  /* 821545FCh */ case    0:  		/* li R11, 5 */
		/* 821545FCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 821545FCh case    0:*/		return 0x82154600;
	}
	return 0x82154600;
} // Block from 821545FCh-82154600h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82154600h
// Function '?ALUConvertToILFunc@XGRAPHICS@@YAXPAPAKKW4ILOpCode@1@PAU_R400IL_RECORDED_INFO@1@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154600);
		  /* 82154600h */ case    0:  		/* b 24 */
		/* 82154600h case    0:*/		return 0x82154618;
		/* 82154600h case    0:*/		return 0x82154604;
	}
	return 0x82154604;
} // Block from 82154600h-82154604h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82154604h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154604( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154604) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154604);
		  /* 82154604h */ case    0:  		/* rlwimi R31, R27, 17, 13, 15 */
		/* 82154604h case    0:*/		cpu::op::rlwimi<0,17,13,15>(regs,&regs.R31,regs.R27);
		/* 82154604h case    0:*/		return 0x82154608;
		  /* 82154608h */ case    1:  		/* b 20 */
		/* 82154608h case    1:*/		return 0x8215461C;
		/* 82154608h case    1:*/		return 0x8215460C;
	}
	return 0x8215460C;
} // Block from 82154604h-8215460Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8215460Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215460C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215460C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215460C);
		  /* 8215460Ch */ case    0:  		/* rlwimi R31, R27, 16, 13, 15 */
		/* 8215460Ch case    0:*/		cpu::op::rlwimi<0,16,13,15>(regs,&regs.R31,regs.R27);
		/* 8215460Ch case    0:*/		return 0x82154610;
		  /* 82154610h */ case    1:  		/* b 12 */
		/* 82154610h case    1:*/		return 0x8215461C;
		/* 82154610h case    1:*/		return 0x82154614;
	}
	return 0x82154614;
} // Block from 8215460Ch-82154614h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82154614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154614);
		  /* 82154614h */ case    0:  		/* li R11, 3 */
		/* 82154614h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 82154614h case    0:*/		return 0x82154618;
	}
	return 0x82154618;
} // Block from 82154614h-82154618h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82154618h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154618);
		  /* 82154618h */ case    0:  		/* rlwimi R31, R11, 16, 13, 15 */
		/* 82154618h case    0:*/		cpu::op::rlwimi<0,16,13,15>(regs,&regs.R31,regs.R11);
		/* 82154618h case    0:*/		return 0x8215461C;
	}
	return 0x8215461C;
} // Block from 82154618h-8215461Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215461Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215461C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215461C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215461C);
		  /* 8215461Ch */ case    0:  		/* stw R31, <#[R28]> */
		/* 8215461Ch case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R28 + 0x00000000) );
		/* 8215461Ch case    0:*/		return 0x82154620;
		  /* 82154620h */ case    1:  		/* addi R31, R28, 4 */
		/* 82154620h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R28,0x4);
		/* 82154620h case    1:*/		return 0x82154624;
		  /* 82154624h */ case    2:  		/* addi R29, R29, 4 */
		/* 82154624h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82154624h case    2:*/		return 0x82154628;
		  /* 82154628h */ case    3:  		/* stw R31, <#[R1 + 80]> */
		/* 82154628h case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 82154628h case    3:*/		return 0x8215462C;
		  /* 8215462Ch */ case    4:  		/* cmpwi CR6, R30, 86 */
		/* 8215462Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000056);
		/* 8215462Ch case    4:*/		return 0x82154630;
		  /* 82154630h */ case    5:  		/* bc 4, CR6_EQ, 156 */
		/* 82154630h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821546CC;  }
		/* 82154630h case    5:*/		return 0x82154634;
		  /* 82154634h */ case    6:  		/* lwz R30, <#[R29]> */
		/* 82154634h case    6:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 82154634h case    6:*/		return 0x82154638;
		  /* 82154638h */ case    7:  		/* addi R29, R29, 4 */
		/* 82154638h case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82154638h case    7:*/		return 0x8215463C;
		  /* 8215463Ch */ case    8:  		/* mr R11, R30 */
		/* 8215463Ch case    8:*/		regs.R11 = regs.R30;
		/* 8215463Ch case    8:*/		return 0x82154640;
		  /* 82154640h */ case    9:  		/* rlwimi R11, R30, 12, 21, 23 */
		/* 82154640h case    9:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R11,regs.R30);
		/* 82154640h case    9:*/		return 0x82154644;
		  /* 82154644h */ case   10:  		/* rlwinm R11, R11, 0, 19, 23 */
		/* 82154644h case   10:*/		cpu::op::rlwinm<0,0,19,23>(regs,&regs.R11,regs.R11);
		/* 82154644h case   10:*/		return 0x82154648;
		  /* 82154648h */ case   11:  		/* cmplwi CR6, R11, 4864 */
		/* 82154648h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00001300);
		/* 82154648h case   11:*/		return 0x8215464C;
		  /* 8215464Ch */ case   12:  		/* bc 12, CR6_EQ, 8 */
		/* 8215464Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x82154654;  }
		/* 8215464Ch case   12:*/		return 0x82154650;
		  /* 82154650h */ case   13:  		/* bl 1125392 */
		/* 82154650h case   13:*/		regs.LR = 0x82154654; return 0x82267260;
		/* 82154650h case   13:*/		return 0x82154654;
	}
	return 0x82154654;
} // Block from 8215461Ch-82154654h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82154654h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154654( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154654) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154654);
		  /* 82154654h */ case    0:  		/* rlwinm R10, R30, 0, 12, 15 */
		/* 82154654h case    0:*/		cpu::op::rlwinm<0,0,12,15>(regs,&regs.R10,regs.R30);
		/* 82154654h case    0:*/		return 0x82154658;
		  /* 82154658h */ case    1:  		/* lis R11, 15 */
		/* 82154658h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xF);
		/* 82154658h case    1:*/		return 0x8215465C;
		  /* 8215465Ch */ case    2:  		/* cmplw CR6, R10, R11 */
		/* 8215465Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8215465Ch case    2:*/		return 0x82154660;
		  /* 82154660h */ case    3:  		/* bc 4, CR6_EQ, 24 */
		/* 82154660h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82154678;  }
		/* 82154660h case    3:*/		return 0x82154664;
		  /* 82154664h */ case    4:  		/* lis R11, 4 */
		/* 82154664h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0x4);
		/* 82154664h case    4:*/		return 0x82154668;
		  /* 82154668h */ case    5:  		/* ori R11, R11, 32 */
		/* 82154668h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x20);
		/* 82154668h case    5:*/		return 0x8215466C;
		  /* 8215466Ch */ case    6:  		/* stw R11, <#[R31]> */
		/* 8215466Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8215466Ch case    6:*/		return 0x82154670;
		  /* 82154670h */ case    7:  		/* addi R31, R31, 4 */
		/* 82154670h case    7:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82154670h case    7:*/		return 0x82154674;
		  /* 82154674h */ case    8:  		/* b 80 */
		/* 82154674h case    8:*/		return 0x821546C4;
		/* 82154674h case    8:*/		return 0x82154678;
	}
	return 0x82154678;
} // Block from 82154654h-82154678h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82154678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154678);
		  /* 82154678h */ case    0:  		/* lis R11, 68 */
		/* 82154678h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x44);
		/* 82154678h case    0:*/		return 0x8215467C;
		  /* 8215467Ch */ case    1:  		/* rlwinm. R8, R10, 0, 15, 15 */
		/* 8215467Ch case    1:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R8,regs.R10);
		/* 8215467Ch case    1:*/		return 0x82154680;
		  /* 82154680h */ case    2:  		/* ori R11, R11, 32 */
		/* 82154680h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x20);
		/* 82154680h case    2:*/		return 0x82154684;
		  /* 82154684h */ case    3:  		/* addi R9, R31, 4 */
		/* 82154684h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0x4);
		/* 82154684h case    3:*/		return 0x82154688;
		  /* 82154688h */ case    4:  		/* stw R11, <#[R31]> */
		/* 82154688h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82154688h case    4:*/		return 0x8215468C;
		  /* 8215468Ch */ case    5:  		/* li R11, 0 */
		/* 8215468Ch case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8215468Ch case    5:*/		return 0x82154690;
		  /* 82154690h */ case    6:  		/* bc 12, CR0_EQ, 8 */
		/* 82154690h case    6:*/		if ( regs.CR[0].eq ) { return 0x82154698;  }
		/* 82154690h case    6:*/		return 0x82154694;
		  /* 82154694h */ case    7:  		/* mr R11, R27 */
		/* 82154694h case    7:*/		regs.R11 = regs.R27;
		/* 82154694h case    7:*/		return 0x82154698;
	}
	return 0x82154698;
} // Block from 82154678h-82154698h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82154698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154698);
		  /* 82154698h */ case    0:  		/* rlwinm. R8, R10, 0, 14, 14 */
		/* 82154698h case    0:*/		cpu::op::rlwinm<1,0,14,14>(regs,&regs.R8,regs.R10);
		/* 82154698h case    0:*/		return 0x8215469C;
		  /* 8215469Ch */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 8215469Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821546A4;  }
		/* 8215469Ch case    1:*/		return 0x821546A0;
		  /* 821546A0h */ case    2:  		/* ori R11, R11, 4 */
		/* 821546A0h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821546A0h case    2:*/		return 0x821546A4;
	}
	return 0x821546A4;
} // Block from 82154698h-821546A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821546A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821546A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821546A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821546A4);
		  /* 821546A4h */ case    0:  		/* rlwinm. R8, R10, 0, 13, 13 */
		/* 821546A4h case    0:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R8,regs.R10);
		/* 821546A4h case    0:*/		return 0x821546A8;
		  /* 821546A8h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 821546A8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821546B0;  }
		/* 821546A8h case    1:*/		return 0x821546AC;
		  /* 821546ACh */ case    2:  		/* ori R11, R11, 16 */
		/* 821546ACh case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x10);
		/* 821546ACh case    2:*/		return 0x821546B0;
	}
	return 0x821546B0;
} // Block from 821546A4h-821546B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821546B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821546B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821546B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821546B0);
		  /* 821546B0h */ case    0:  		/* rlwinm. R10, R10, 0, 12, 12 */
		/* 821546B0h case    0:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R10,regs.R10);
		/* 821546B0h case    0:*/		return 0x821546B4;
		  /* 821546B4h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 821546B4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821546BC;  }
		/* 821546B4h case    1:*/		return 0x821546B8;
		  /* 821546B8h */ case    2:  		/* ori R11, R11, 64 */
		/* 821546B8h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x40);
		/* 821546B8h case    2:*/		return 0x821546BC;
	}
	return 0x821546BC;
} // Block from 821546B0h-821546BCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821546BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821546BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821546BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821546BC);
		  /* 821546BCh */ case    0:  		/* addi R31, R9, 4 */
		/* 821546BCh case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R9,0x4);
		/* 821546BCh case    0:*/		return 0x821546C0;
		  /* 821546C0h */ case    1:  		/* stw R11, <#[R9]> */
		/* 821546C0h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 821546C0h case    1:*/		return 0x821546C4;
	}
	return 0x821546C4;
} // Block from 821546BCh-821546C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821546C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821546C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821546C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821546C4);
		  /* 821546C4h */ case    0:  		/* stw R31, <#[R1 + 80]> */
		/* 821546C4h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 821546C4h case    0:*/		return 0x821546C8;
		  /* 821546C8h */ case    1:  		/* b 24 */
		/* 821546C8h case    1:*/		return 0x821546E0;
		/* 821546C8h case    1:*/		return 0x821546CC;
	}
	return 0x821546CC;
} // Block from 821546C4h-821546CCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821546CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821546CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821546CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821546CC);
		  /* 821546CCh */ case    0:  		/* cmpwi CR6, R30, 52 */
		/* 821546CCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000034);
		/* 821546CCh case    0:*/		return 0x821546D0;
		  /* 821546D0h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 821546D0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821546E0;  }
		/* 821546D0h case    1:*/		return 0x821546D4;
		  /* 821546D4h */ case    2:  		/* lwz R11, <#[R26 + 24]> */
		/* 821546D4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000018) );
		/* 821546D4h case    2:*/		return 0x821546D8;
		  /* 821546D8h */ case    3:  		/* addi R11, R11, 1 */
		/* 821546D8h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821546D8h case    3:*/		return 0x821546DC;
		  /* 821546DCh */ case    4:  		/* stw R11, <#[R26 + 24]> */
		/* 821546DCh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000018) );
		/* 821546DCh case    4:*/		return 0x821546E0;
	}
	return 0x821546E0;
} // Block from 821546CCh-821546E0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821546E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821546E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821546E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821546E0);
		  /* 821546E0h */ case    0:  		/* lwz R30, <#[R29]> */
		/* 821546E0h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821546E0h case    0:*/		return 0x821546E4;
		  /* 821546E4h */ case    1:  		/* rlwinm. R11, R30, 0, 0, 0 */
		/* 821546E4h case    1:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R30);
		/* 821546E4h case    1:*/		return 0x821546E8;
		  /* 821546E8h */ case    2:  		/* bc 12, CR0_EQ, 84 */
		/* 821546E8h case    2:*/		if ( regs.CR[0].eq ) { return 0x8215473C;  }
		/* 821546E8h case    2:*/		return 0x821546EC;
		  /* 821546ECh */ case    3:  		/* rlwinm R11, R30, 0, 18, 18 */
		/* 821546ECh case    3:*/		cpu::op::rlwinm<0,0,18,18>(regs,&regs.R11,regs.R30);
		/* 821546ECh case    3:*/		return 0x821546F0;
		  /* 821546F0h */ case    4:  		/* addi R29, R29, 4 */
		/* 821546F0h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 821546F0h case    4:*/		return 0x821546F4;
		  /* 821546F4h */ case    5:  		/* li R4, 0 */
		/* 821546F4h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821546F4h case    5:*/		return 0x821546F8;
		  /* 821546F8h */ case    6:  		/* cmplwi CR6, R11, 8192 */
		/* 821546F8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002000);
		/* 821546F8h case    6:*/		return 0x821546FC;
		  /* 821546FCh */ case    7:  		/* bc 4, CR6_EQ, 28 */
		/* 821546FCh case    7:*/		if ( !regs.CR[6].eq ) { return 0x82154718;  }
		/* 821546FCh case    7:*/		return 0x82154700;
		  /* 82154700h */ case    8:  		/* lwz R11, <#[R29]> */
		/* 82154700h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82154700h case    8:*/		return 0x82154704;
		  /* 82154704h */ case    9:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82154704h case    9:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82154704h case    9:*/		return 0x82154708;
		  /* 82154708h */ case   10:  		/* bc 4, CR0_EQ, 8 */
		/* 82154708h case   10:*/		if ( !regs.CR[0].eq ) { return 0x82154710;  }
		/* 82154708h case   10:*/		return 0x8215470C;
		  /* 8215470Ch */ case   11:  		/* bl 1125204 */
		/* 8215470Ch case   11:*/		regs.LR = 0x82154710; return 0x82267260;
		/* 8215470Ch case   11:*/		return 0x82154710;
	}
	return 0x82154710;
} // Block from 821546E0h-82154710h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82154710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154710);
		  /* 82154710h */ case    0:  		/* lwz R4, <#[R29]> */
		/* 82154710h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000000) );
		/* 82154710h case    0:*/		return 0x82154714;
		  /* 82154714h */ case    1:  		/* addi R29, R29, 4 */
		/* 82154714h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82154714h case    1:*/		return 0x82154718;
	}
	return 0x82154718;
} // Block from 82154710h-82154718h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82154718h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154718( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154718) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154718);
		  /* 82154718h */ case    0:  		/* addi R7, R1, 80 */
		/* 82154718h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82154718h case    0:*/		return 0x8215471C;
		  /* 8215471Ch */ case    1:  		/* mr R6, R26 */
		/* 8215471Ch case    1:*/		regs.R6 = regs.R26;
		/* 8215471Ch case    1:*/		return 0x82154720;
		  /* 82154720h */ case    2:  		/* li R5, 0 */
		/* 82154720h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82154720h case    2:*/		return 0x82154724;
		  /* 82154724h */ case    3:  		/* mr R3, R30 */
		/* 82154724h case    3:*/		regs.R3 = regs.R30;
		/* 82154724h case    3:*/		return 0x82154728;
		  /* 82154728h */ case    4:  		/* bl -4200 */
		/* 82154728h case    4:*/		regs.LR = 0x8215472C; return 0x821536C0;
		/* 82154728h case    4:*/		return 0x8215472C;
		  /* 8215472Ch */ case    5:  		/* lwz R30, <#[R29]> */
		/* 8215472Ch case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 8215472Ch case    5:*/		return 0x82154730;
		  /* 82154730h */ case    6:  		/* rlwinm. R11, R30, 0, 0, 0 */
		/* 82154730h case    6:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R30);
		/* 82154730h case    6:*/		return 0x82154734;
		  /* 82154734h */ case    7:  		/* bc 4, CR0_EQ, -72 */
		/* 82154734h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821546EC;  }
		/* 82154734h case    7:*/		return 0x82154738;
		  /* 82154738h */ case    8:  		/* lwz R31, <#[R1 + 80]> */
		/* 82154738h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 82154738h case    8:*/		return 0x8215473C;
	}
	return 0x8215473C;
} // Block from 82154718h-8215473Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8215473Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215473C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215473C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215473C);
		  /* 8215473Ch */ case    0:  		/* stw R29, <#[R25]> */
		/* 8215473Ch case    0:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R25 + 0x00000000) );
		/* 8215473Ch case    0:*/		return 0x82154740;
		  /* 82154740h */ case    1:  		/* stw R31, <#[R24]> */
		/* 82154740h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R24 + 0x00000000) );
		/* 82154740h case    1:*/		return 0x82154744;
		  /* 82154744h */ case    2:  		/* addi R1, R1, 160 */
		/* 82154744h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82154744h case    2:*/		return 0x82154748;
		  /* 82154748h */ case    3:  		/* b -799920 */
		/* 82154748h case    3:*/		return 0x82091298;
		/* 82154748h case    3:*/		return 0x8215474C;
		  /* 8215474Ch */ case    4:  		/* nop */
		/* 8215474Ch case    4:*/		cpu::op::nop();
		/* 8215474Ch case    4:*/		return 0x82154750;
	}
	return 0x82154750;
} // Block from 8215473Ch-82154750h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82154750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154750);
		  /* 82154750h */ case    0:  		/* mfspr R12, LR */
		/* 82154750h case    0:*/		regs.R12 = regs.LR;
		/* 82154750h case    0:*/		return 0x82154754;
		  /* 82154754h */ case    1:  		/* bl -800012 */
		/* 82154754h case    1:*/		regs.LR = 0x82154758; return 0x82091248;
		/* 82154754h case    1:*/		return 0x82154758;
		  /* 82154758h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82154758h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82154758h case    2:*/		return 0x8215475C;
		  /* 8215475Ch */ case    3:  		/* lis R11, -1 */
		/* 8215475Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8215475Ch case    3:*/		return 0x82154760;
		  /* 82154760h */ case    4:  		/* mr R25, R3 */
		/* 82154760h case    4:*/		regs.R25 = regs.R3;
		/* 82154760h case    4:*/		return 0x82154764;
		  /* 82154764h */ case    5:  		/* ori R11, R11, 512 */
		/* 82154764h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x200);
		/* 82154764h case    5:*/		return 0x82154768;
		  /* 82154768h */ case    6:  		/* mr R29, R4 */
		/* 82154768h case    6:*/		regs.R29 = regs.R4;
		/* 82154768h case    6:*/		return 0x8215476C;
		  /* 8215476Ch */ case    7:  		/* mr R27, R6 */
		/* 8215476Ch case    7:*/		regs.R27 = regs.R6;
		/* 8215476Ch case    7:*/		return 0x82154770;
		  /* 82154770h */ case    8:  		/* mr R24, R7 */
		/* 82154770h case    8:*/		regs.R24 = regs.R7;
		/* 82154770h case    8:*/		return 0x82154774;
		  /* 82154774h */ case    9:  		/* cmplw CR6, R4, R11 */
		/* 82154774h case    9:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82154774h case    9:*/		return 0x82154778;
		  /* 82154778h */ case   10:  		/* bc 12, CR6_LT, 8 */
		/* 82154778h case   10:*/		if ( regs.CR[6].lt ) { return 0x82154780;  }
		/* 82154778h case   10:*/		return 0x8215477C;
		  /* 8215477Ch */ case   11:  		/* bl 1125092 */
		/* 8215477Ch case   11:*/		regs.LR = 0x82154780; return 0x82267260;
		/* 8215477Ch case   11:*/		return 0x82154780;
	}
	return 0x82154780;
} // Block from 82154750h-82154780h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82154780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154780);
		  /* 82154780h */ case    0:  		/* lwz R11, <#[R25]> */
		/* 82154780h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 82154780h case    0:*/		return 0x82154784;
		  /* 82154784h */ case    1:  		/* lis R10, -1 */
		/* 82154784h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 82154784h case    1:*/		return 0x82154788;
		  /* 82154788h */ case    2:  		/* lwz R30, <#[R24]> */
		/* 82154788h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R24 + 0x00000000) );
		/* 82154788h case    2:*/		return 0x8215478C;
		  /* 8215478Ch */ case    3:  		/* addi R11, R11, 4 */
		/* 8215478Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8215478Ch case    3:*/		return 0x82154790;
		  /* 82154790h */ case    4:  		/* ori R10, R10, 259 */
		/* 82154790h case    4:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x103);
		/* 82154790h case    4:*/		return 0x82154794;
		  /* 82154794h */ case    5:  		/* addi R26, R11, 4 */
		/* 82154794h case    5:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0x4);
		/* 82154794h case    5:*/		return 0x82154798;
		  /* 82154798h */ case    6:  		/* cmplw CR6, R29, R10 */
		/* 82154798h case    6:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R10);
		/* 82154798h case    6:*/		return 0x8215479C;
		  /* 8215479Ch */ case    7:  		/* lwz R31, <#[R11]> */
		/* 8215479Ch case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 8215479Ch case    7:*/		return 0x821547A0;
		  /* 821547A0h */ case    8:  		/* rlwinm R28, R31, 0, 21, 31 */
		/* 821547A0h case    8:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R28,regs.R31);
		/* 821547A0h case    8:*/		return 0x821547A4;
		  /* 821547A4h */ case    9:  		/* bc 12, CR6_GT, 184 */
		/* 821547A4h case    9:*/		if ( regs.CR[6].gt ) { return 0x8215485C;  }
		/* 821547A4h case    9:*/		return 0x821547A8;
		  /* 821547A8h */ case   10:  		/* rlwinm. R9, R31, 0, 15, 15 */
		/* 821547A8h case   10:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R9,regs.R31);
		/* 821547A8h case   10:*/		return 0x821547AC;
		  /* 821547ACh */ case   11:  		/* rlwinm R11, R31, 0, 12, 15 */
		/* 821547ACh case   11:*/		cpu::op::rlwinm<0,0,12,15>(regs,&regs.R11,regs.R31);
		/* 821547ACh case   11:*/		return 0x821547B0;
		  /* 821547B0h */ case   12:  		/* li R10, 256 */
		/* 821547B0h case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x100);
		/* 821547B0h case   12:*/		return 0x821547B4;
		  /* 821547B4h */ case   13:  		/* bc 12, CR0_EQ, 8 */
		/* 821547B4h case   13:*/		if ( regs.CR[0].eq ) { return 0x821547BC;  }
		/* 821547B4h case   13:*/		return 0x821547B8;
		  /* 821547B8h */ case   14:  		/* li R10, 257 */
		/* 821547B8h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x101);
		/* 821547B8h case   14:*/		return 0x821547BC;
	}
	return 0x821547BC;
} // Block from 82154780h-821547BCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 821547BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821547BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821547BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821547BC);
		  /* 821547BCh */ case    0:  		/* rlwinm. R9, R11, 0, 14, 14 */
		/* 821547BCh case    0:*/		cpu::op::rlwinm<1,0,14,14>(regs,&regs.R9,regs.R11);
		/* 821547BCh case    0:*/		return 0x821547C0;
		  /* 821547C0h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 821547C0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821547C8;  }
		/* 821547C0h case    1:*/		return 0x821547C4;
		  /* 821547C4h */ case    2:  		/* ori R10, R10, 4 */
		/* 821547C4h case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821547C4h case    2:*/		return 0x821547C8;
	}
	return 0x821547C8;
} // Block from 821547BCh-821547C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821547C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821547C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821547C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821547C8);
		  /* 821547C8h */ case    0:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 821547C8h case    0:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 821547C8h case    0:*/		return 0x821547CC;
		  /* 821547CCh */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 821547CCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821547D4;  }
		/* 821547CCh case    1:*/		return 0x821547D0;
		  /* 821547D0h */ case    2:  		/* ori R10, R10, 16 */
		/* 821547D0h case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x10);
		/* 821547D0h case    2:*/		return 0x821547D4;
	}
	return 0x821547D4;
} // Block from 821547C8h-821547D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821547D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821547D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821547D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821547D4);
		  /* 821547D4h */ case    0:  		/* ori R9, R10, 192 */
		/* 821547D4h case    0:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R10,0xC0);
		/* 821547D4h case    0:*/		return 0x821547D8;
		  /* 821547D8h */ case    1:  		/* rlwinm. R11, R31, 8, 28, 31 */
		/* 821547D8h case    1:*/		cpu::op::rlwinm<1,8,28,31>(regs,&regs.R11,regs.R31);
		/* 821547D8h case    1:*/		return 0x821547DC;
		  /* 821547DCh */ case    2:  		/* li R10, 0 */
		/* 821547DCh case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821547DCh case    2:*/		return 0x821547E0;
		  /* 821547E0h */ case    3:  		/* bc 12, CR0_EQ, 52 */
		/* 821547E0h case    3:*/		if ( regs.CR[0].eq ) { return 0x82154814;  }
		/* 821547E0h case    3:*/		return 0x821547E4;
		  /* 821547E4h */ case    4:  		/* rlwinm. R10, R11, 0, 28, 28 */
		/* 821547E4h case    4:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R10,regs.R11);
		/* 821547E4h case    4:*/		return 0x821547E8;
		  /* 821547E8h */ case    5:  		/* bc 12, CR0_EQ, 24 */
		/* 821547E8h case    5:*/		if ( regs.CR[0].eq ) { return 0x82154800;  }
		/* 821547E8h case    5:*/		return 0x821547EC;
		  /* 821547ECh */ case    6:  		/* nor R11, R11, R11 */
		/* 821547ECh case    6:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821547ECh case    6:*/		return 0x821547F0;
		  /* 821547F0h */ case    7:  		/* lis R10, -32217 */
		/* 821547F0h case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 821547F0h case    7:*/		return 0x821547F4;
		  /* 821547F4h */ case    8:  		/* addi R11, R11, 1 */
		/* 821547F4h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821547F4h case    8:*/		return 0x821547F8;
		  /* 821547F8h */ case    9:  		/* addi R10, R10, 19756 */
		/* 821547F8h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4D2C);
		/* 821547F8h case    9:*/		return 0x821547FC;
		  /* 821547FCh */ case   10:  		/* b 12 */
		/* 821547FCh case   10:*/		return 0x82154808;
		/* 821547FCh case   10:*/		return 0x82154800;
	}
	return 0x82154800;
} // Block from 821547D4h-82154800h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82154800h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154800( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154800) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154800);
		  /* 82154800h */ case    0:  		/* lis R10, -32217 */
		/* 82154800h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 82154800h case    0:*/		return 0x82154804;
		  /* 82154804h */ case    1:  		/* addi R10, R10, 19740 */
		/* 82154804h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4D1C);
		/* 82154804h case    1:*/		return 0x82154808;
	}
	return 0x82154808;
} // Block from 82154800h-82154808h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82154808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154808);
		  /* 82154808h */ case    0:  		/* rlwinm R11, R11, 2, 28, 29 */
		/* 82154808h case    0:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R11,regs.R11);
		/* 82154808h case    0:*/		return 0x8215480C;
		  /* 8215480Ch */ case    1:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8215480Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8215480Ch case    1:*/		return 0x82154810;
		  /* 82154810h */ case    2:  		/* rlwinm R10, R11, 9, 0, 22 */
		/* 82154810h case    2:*/		cpu::op::rlwinm<0,9,0,22>(regs,&regs.R10,regs.R11);
		/* 82154810h case    2:*/		return 0x82154814;
	}
	return 0x82154814;
} // Block from 82154808h-82154814h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82154814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154814);
		  /* 82154814h */ case    0:  		/* mr R11, R31 */
		/* 82154814h case    0:*/		regs.R11 = regs.R31;
		/* 82154814h case    0:*/		return 0x82154818;
		  /* 82154818h */ case    1:  		/* or R29, R10, R9 */
		/* 82154818h case    1:*/		cpu::op::or<0>(regs,&regs.R29,regs.R10,regs.R9);
		/* 82154818h case    1:*/		return 0x8215481C;
		  /* 8215481Ch */ case    2:  		/* rlwimi R11, R31, 12, 21, 23 */
		/* 8215481Ch case    2:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R11,regs.R31);
		/* 8215481Ch case    2:*/		return 0x82154820;
		  /* 82154820h */ case    3:  		/* rlwinm R11, R11, 0, 19, 23 */
		/* 82154820h case    3:*/		cpu::op::rlwinm<0,0,19,23>(regs,&regs.R11,regs.R11);
		/* 82154820h case    3:*/		return 0x82154824;
		  /* 82154824h */ case    4:  		/* cmplwi CR6, R11, 768 */
		/* 82154824h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000300);
		/* 82154824h case    4:*/		return 0x82154828;
		  /* 82154828h */ case    5:  		/* bc 12, CR6_EQ, 8 */
		/* 82154828h case    5:*/		if ( regs.CR[6].eq ) { return 0x82154830;  }
		/* 82154828h case    5:*/		return 0x8215482C;
		  /* 8215482Ch */ case    6:  		/* bl 1124916 */
		/* 8215482Ch case    6:*/		regs.LR = 0x82154830; return 0x82267260;
		/* 8215482Ch case    6:*/		return 0x82154830;
	}
	return 0x82154830;
} // Block from 82154814h-82154830h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82154830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154830);
		  /* 82154830h */ case    0:  		/* rlwinm R11, R28, 0, 16, 31 */
		/* 82154830h case    0:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R28);
		/* 82154830h case    0:*/		return 0x82154834;
		  /* 82154834h */ case    1:  		/* li R10, 71 */
		/* 82154834h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x47);
		/* 82154834h case    1:*/		return 0x82154838;
		  /* 82154838h */ case    2:  		/* oris R9, R11, 81 */
		/* 82154838h case    2:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R11,0x51);
		/* 82154838h case    2:*/		return 0x8215483C;
		  /* 8215483Ch */ case    3:  		/* stw R10, <#[R30]> */
		/* 8215483Ch case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 8215483Ch case    3:*/		return 0x82154840;
		  /* 82154840h */ case    4:  		/* oris R11, R11, 17 */
		/* 82154840h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x11);
		/* 82154840h case    4:*/		return 0x82154844;
		  /* 82154844h */ case    5:  		/* stwu R9, <#[R30 + 4]> */
		/* 82154844h case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82154844h case    5:*/		return 0x82154848;
		  /* 82154848h */ case    6:  		/* stwu R29, <#[R30 + 4]> */
		/* 82154848h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82154848h case    6:*/		return 0x8215484C;
		  /* 8215484Ch */ case    7:  		/* stwu R11, <#[R30 + 4]> */
		/* 8215484Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 8215484Ch case    7:*/		return 0x82154850;
		  /* 82154850h */ case    8:  		/* addi R11, R30, 4 */
		/* 82154850h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 82154850h case    8:*/		return 0x82154854;
		  /* 82154854h */ case    9:  		/* stw R11, <#[R1 + 80]> */
		/* 82154854h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82154854h case    9:*/		return 0x82154858;
		  /* 82154858h */ case   10:  		/* b 112 */
		/* 82154858h case   10:*/		return 0x821548C8;
		/* 82154858h case   10:*/		return 0x8215485C;
	}
	return 0x8215485C;
} // Block from 82154830h-8215485Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8215485Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215485C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215485C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215485C);
		  /* 8215485Ch */ case    0:  		/* lwz R28, <#[R26]> */
		/* 8215485Ch case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R26 + 0x00000000) );
		/* 8215485Ch case    0:*/		return 0x82154860;
		  /* 82154860h */ case    1:  		/* addi R26, R26, 4 */
		/* 82154860h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 82154860h case    1:*/		return 0x82154864;
		  /* 82154864h */ case    2:  		/* mr R11, R28 */
		/* 82154864h case    2:*/		regs.R11 = regs.R28;
		/* 82154864h case    2:*/		return 0x82154868;
		  /* 82154868h */ case    3:  		/* rlwimi R11, R28, 12, 21, 23 */
		/* 82154868h case    3:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R11,regs.R28);
		/* 82154868h case    3:*/		return 0x8215486C;
		  /* 8215486Ch */ case    4:  		/* rlwinm R11, R11, 0, 19, 23 */
		/* 8215486Ch case    4:*/		cpu::op::rlwinm<0,0,19,23>(regs,&regs.R11,regs.R11);
		/* 8215486Ch case    4:*/		return 0x82154870;
		  /* 82154870h */ case    5:  		/* cmplwi CR6, R11, 768 */
		/* 82154870h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000300);
		/* 82154870h case    5:*/		return 0x82154874;
		  /* 82154874h */ case    6:  		/* bc 12, CR6_EQ, 8 */
		/* 82154874h case    6:*/		if ( regs.CR[6].eq ) { return 0x8215487C;  }
		/* 82154874h case    6:*/		return 0x82154878;
		  /* 82154878h */ case    7:  		/* bl 1124840 */
		/* 82154878h case    7:*/		regs.LR = 0x8215487C; return 0x82267260;
		/* 82154878h case    7:*/		return 0x8215487C;
	}
	return 0x8215487C;
} // Block from 8215485Ch-8215487Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8215487Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215487C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215487C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215487C);
		  /* 8215487Ch */ case    0:  		/* li R11, 71 */
		/* 8215487Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x47);
		/* 8215487Ch case    0:*/		return 0x82154880;
		  /* 82154880h */ case    1:  		/* addi R10, R30, 4 */
		/* 82154880h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x4);
		/* 82154880h case    1:*/		return 0x82154884;
		  /* 82154884h */ case    2:  		/* stw R11, <#[R30]> */
		/* 82154884h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82154884h case    2:*/		return 0x82154888;
		  /* 82154888h */ case    3:  		/* addi R5, R1, 80 */
		/* 82154888h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82154888h case    3:*/		return 0x8215488C;
		  /* 8215488Ch */ case    4:  		/* stw R10, <#[R1 + 80]> */
		/* 8215488Ch case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8215488Ch case    4:*/		return 0x82154890;
		  /* 82154890h */ case    5:  		/* mr R4, R27 */
		/* 82154890h case    5:*/		regs.R4 = regs.R27;
		/* 82154890h case    5:*/		return 0x82154894;
		  /* 82154894h */ case    6:  		/* mr R3, R31 */
		/* 82154894h case    6:*/		regs.R3 = regs.R31;
		/* 82154894h case    6:*/		return 0x82154898;
		  /* 82154898h */ case    7:  		/* bl -4856 */
		/* 82154898h case    7:*/		regs.LR = 0x8215489C; return 0x821535A0;
		/* 82154898h case    7:*/		return 0x8215489C;
		  /* 8215489Ch */ case    8:  		/* addi R7, R1, 80 */
		/* 8215489Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8215489Ch case    8:*/		return 0x821548A0;
		  /* 821548A0h */ case    9:  		/* mr R6, R27 */
		/* 821548A0h case    9:*/		regs.R6 = regs.R27;
		/* 821548A0h case    9:*/		return 0x821548A4;
		  /* 821548A4h */ case   10:  		/* li R5, 0 */
		/* 821548A4h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821548A4h case   10:*/		return 0x821548A8;
		  /* 821548A8h */ case   11:  		/* li R4, 0 */
		/* 821548A8h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821548A8h case   11:*/		return 0x821548AC;
		  /* 821548ACh */ case   12:  		/* mr R3, R28 */
		/* 821548ACh case   12:*/		regs.R3 = regs.R28;
		/* 821548ACh case   12:*/		return 0x821548B0;
		  /* 821548B0h */ case   13:  		/* bl -4592 */
		/* 821548B0h case   13:*/		regs.LR = 0x821548B4; return 0x821536C0;
		/* 821548B0h case   13:*/		return 0x821548B4;
		  /* 821548B4h */ case   14:  		/* lis R11, -1 */
		/* 821548B4h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 821548B4h case   14:*/		return 0x821548B8;
		  /* 821548B8h */ case   15:  		/* ori R11, R11, 260 */
		/* 821548B8h case   15:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x104);
		/* 821548B8h case   15:*/		return 0x821548BC;
		  /* 821548BCh */ case   16:  		/* cmplw CR6, R29, R11 */
		/* 821548BCh case   16:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821548BCh case   16:*/		return 0x821548C0;
		  /* 821548C0h */ case   17:  		/* bc 12, CR6_EQ, 8 */
		/* 821548C0h case   17:*/		if ( regs.CR[6].eq ) { return 0x821548C8;  }
		/* 821548C0h case   17:*/		return 0x821548C4;
		  /* 821548C4h */ case   18:  		/* bl 1124764 */
		/* 821548C4h case   18:*/		regs.LR = 0x821548C8; return 0x82267260;
		/* 821548C4h case   18:*/		return 0x821548C8;
	}
	return 0x821548C8;
} // Block from 8215487Ch-821548C8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821548C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821548C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821548C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821548C8);
		  /* 821548C8h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 821548C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821548C8h case    0:*/		return 0x821548CC;
		  /* 821548CCh */ case    1:  		/* stw R11, <#[R24]> */
		/* 821548CCh case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821548CCh case    1:*/		return 0x821548D0;
		  /* 821548D0h */ case    2:  		/* stw R26, <#[R25]> */
		/* 821548D0h case    2:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R25 + 0x00000000) );
		/* 821548D0h case    2:*/		return 0x821548D4;
		  /* 821548D4h */ case    3:  		/* addi R1, R1, 160 */
		/* 821548D4h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821548D4h case    3:*/		return 0x821548D8;
		  /* 821548D8h */ case    4:  		/* b -800320 */
		/* 821548D8h case    4:*/		return 0x82091298;
		/* 821548D8h case    4:*/		return 0x821548DC;
		  /* 821548DCh */ case    5:  		/* nop */
		/* 821548DCh case    5:*/		cpu::op::nop();
		/* 821548DCh case    5:*/		return 0x821548E0;
	}
	return 0x821548E0;
} // Block from 821548C8h-821548E0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821548E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821548E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821548E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821548E0);
		  /* 821548E0h */ case    0:  		/* mfspr R12, LR */
		/* 821548E0h case    0:*/		regs.R12 = regs.LR;
		/* 821548E0h case    0:*/		return 0x821548E4;
		  /* 821548E4h */ case    1:  		/* bl -800420 */
		/* 821548E4h case    1:*/		regs.LR = 0x821548E8; return 0x82091240;
		/* 821548E4h case    1:*/		return 0x821548E8;
		  /* 821548E8h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821548E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821548E8h case    2:*/		return 0x821548EC;
		  /* 821548ECh */ case    3:  		/* lwz R30, <#[R3]> */
		/* 821548ECh case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 821548ECh case    3:*/		return 0x821548F0;
		  /* 821548F0h */ case    4:  		/* mr R23, R3 */
		/* 821548F0h case    4:*/		regs.R23 = regs.R3;
		/* 821548F0h case    4:*/		return 0x821548F4;
		  /* 821548F4h */ case    5:  		/* lwz R31, <#[R7]> */
		/* 821548F4h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R7 + 0x00000000) );
		/* 821548F4h case    5:*/		return 0x821548F8;
		  /* 821548F8h */ case    6:  		/* mr R26, R4 */
		/* 821548F8h case    6:*/		regs.R26 = regs.R4;
		/* 821548F8h case    6:*/		return 0x821548FC;
		  /* 821548FCh */ case    7:  		/* mr R28, R6 */
		/* 821548FCh case    7:*/		regs.R28 = regs.R6;
		/* 821548FCh case    7:*/		return 0x82154900;
		  /* 82154900h */ case    8:  		/* mr R22, R7 */
		/* 82154900h case    8:*/		regs.R22 = regs.R7;
		/* 82154900h case    8:*/		return 0x82154904;
		  /* 82154904h */ case    9:  		/* lwz R11, <#[R30]> */
		/* 82154904h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82154904h case    9:*/		return 0x82154908;
		  /* 82154908h */ case   10:  		/* lwzu R10, <#[R30 + 4]> */
		/* 82154908h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82154908h case   10:*/		return 0x8215490C;
		  /* 8215490Ch */ case   11:  		/* rlwinm R27, R11, 0, 3, 3 */
		/* 8215490Ch case   11:*/		cpu::op::rlwinm<0,0,3,3>(regs,&regs.R27,regs.R11);
		/* 8215490Ch case   11:*/		return 0x82154910;
		  /* 82154910h */ case   12:  		/* rlwinm. R11, R10, 0, 0, 0 */
		/* 82154910h case   12:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R10);
		/* 82154910h case   12:*/		return 0x82154914;
		  /* 82154914h */ case   13:  		/* bc 4, CR0_EQ, 8 */
		/* 82154914h case   13:*/		if ( !regs.CR[0].eq ) { return 0x8215491C;  }
		/* 82154914h case   13:*/		return 0x82154918;
		  /* 82154918h */ case   14:  		/* bl 1124680 */
		/* 82154918h case   14:*/		regs.LR = 0x8215491C; return 0x82267260;
		/* 82154918h case   14:*/		return 0x8215491C;
	}
	return 0x8215491C;
} // Block from 821548E0h-8215491Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8215491Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215491C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215491C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215491C);
		  /* 8215491Ch */ case    0:  		/* lis R11, -1 */
		/* 8215491Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 8215491Ch case    0:*/		return 0x82154920;
		  /* 82154920h */ case    1:  		/* lwz R29, <#[R30]> */
		/* 82154920h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x00000000) );
		/* 82154920h case    1:*/		return 0x82154924;
		  /* 82154924h */ case    2:  		/* addi R24, R30, 4 */
		/* 82154924h case    2:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R30,0x4);
		/* 82154924h case    2:*/		return 0x82154928;
		  /* 82154928h */ case    3:  		/* ori R30, R11, 512 */
		/* 82154928h case    3:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R11,0x200);
		/* 82154928h case    3:*/		return 0x8215492C;
		  /* 8215492Ch */ case    4:  		/* cmpwi CR6, R27, 0 */
		/* 8215492Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 8215492Ch case    4:*/		return 0x82154930;
		  /* 82154930h */ case    5:  		/* bc 12, CR6_EQ, 44 */
		/* 82154930h case    5:*/		if ( regs.CR[6].eq ) { return 0x8215495C;  }
		/* 82154930h case    5:*/		return 0x82154934;
		  /* 82154934h */ case    6:  		/* lwz R11, <#[R24]> */
		/* 82154934h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 82154934h case    6:*/		return 0x82154938;
		  /* 82154938h */ case    7:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82154938h case    7:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82154938h case    7:*/		return 0x8215493C;
		  /* 8215493Ch */ case    8:  		/* bc 4, CR0_EQ, 8 */
		/* 8215493Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x82154944;  }
		/* 8215493Ch case    8:*/		return 0x82154940;
		  /* 82154940h */ case    9:  		/* bl 1124640 */
		/* 82154940h case    9:*/		regs.LR = 0x82154944; return 0x82267260;
		/* 82154940h case    9:*/		return 0x82154944;
	}
	return 0x82154944;
} // Block from 8215491Ch-82154944h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82154944h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154944( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154944) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154944);
		  /* 82154944h */ case    0:  		/* cmplw CR6, R26, R30 */
		/* 82154944h case    0:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R30);
		/* 82154944h case    0:*/		return 0x82154948;
		  /* 82154948h */ case    1:  		/* bc 4, CR6_LT, 8 */
		/* 82154948h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82154950;  }
		/* 82154948h case    1:*/		return 0x8215494C;
		  /* 8215494Ch */ case    2:  		/* bl 1124628 */
		/* 8215494Ch case    2:*/		regs.LR = 0x82154950; return 0x82267260;
		/* 8215494Ch case    2:*/		return 0x82154950;
	}
	return 0x82154950;
} // Block from 82154944h-82154950h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82154950h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154950);
		  /* 82154950h */ case    0:  		/* lwz R25, <#[R24]> */
		/* 82154950h case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R24 + 0x00000000) );
		/* 82154950h case    0:*/		return 0x82154954;
		  /* 82154954h */ case    1:  		/* addi R24, R24, 4 */
		/* 82154954h case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x4);
		/* 82154954h case    1:*/		return 0x82154958;
		  /* 82154958h */ case    2:  		/* b 8 */
		/* 82154958h case    2:*/		return 0x82154960;
		/* 82154958h case    2:*/		return 0x8215495C;
	}
	return 0x8215495C;
} // Block from 82154950h-8215495Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215495Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215495C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215495C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215495C);
		  /* 8215495Ch */ case    0:  		/* lwz R25, <#[R1 + 80]> */
		/* 8215495Ch case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000050) );
		/* 8215495Ch case    0:*/		return 0x82154960;
	}
	return 0x82154960;
} // Block from 8215495Ch-82154960h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82154960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154960);
		  /* 82154960h */ case    0:  		/* lis R11, -1 */
		/* 82154960h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82154960h case    0:*/		return 0x82154964;
		  /* 82154964h */ case    1:  		/* ori R11, R11, 259 */
		/* 82154964h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x103);
		/* 82154964h case    1:*/		return 0x82154968;
		  /* 82154968h */ case    2:  		/* cmplw CR6, R26, R11 */
		/* 82154968h case    2:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 82154968h case    2:*/		return 0x8215496C;
		  /* 8215496Ch */ case    3:  		/* bc 12, CR6_GT, 16 */
		/* 8215496Ch case    3:*/		if ( regs.CR[6].gt ) { return 0x8215497C;  }
		/* 8215496Ch case    3:*/		return 0x82154970;
		  /* 82154970h */ case    4:  		/* rlwinm R3, R29, 0, 21, 31 */
		/* 82154970h case    4:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R3,regs.R29);
		/* 82154970h case    4:*/		return 0x82154974;
		  /* 82154974h */ case    5:  		/* li R9, 17 */
		/* 82154974h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x11);
		/* 82154974h case    5:*/		return 0x82154978;
		  /* 82154978h */ case    6:  		/* b 24 */
		/* 82154978h case    6:*/		return 0x82154990;
		/* 82154978h case    6:*/		return 0x8215497C;
	}
	return 0x8215497C;
} // Block from 82154960h-8215497Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8215497Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215497C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215497C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215497C);
		  /* 8215497Ch */ case    0:  		/* addi R5, R1, 80 */
		/* 8215497Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8215497Ch case    0:*/		return 0x82154980;
		  /* 82154980h */ case    1:  		/* mr R4, R28 */
		/* 82154980h case    1:*/		regs.R4 = regs.R28;
		/* 82154980h case    1:*/		return 0x82154984;
		  /* 82154984h */ case    2:  		/* mr R3, R29 */
		/* 82154984h case    2:*/		regs.R3 = regs.R29;
		/* 82154984h case    2:*/		return 0x82154988;
		  /* 82154988h */ case    3:  		/* bl -5480 */
		/* 82154988h case    3:*/		regs.LR = 0x8215498C; return 0x82153420;
		/* 82154988h case    3:*/		return 0x8215498C;
		  /* 8215498Ch */ case    4:  		/* lwz R9, <#[R1 + 80]> */
		/* 8215498Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 8215498Ch case    4:*/		return 0x82154990;
	}
	return 0x82154990;
} // Block from 8215497Ch-82154990h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82154990h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154990);
		  /* 82154990h */ case    0:  		/* cmplw CR6, R26, R30 */
		/* 82154990h case    0:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R30);
		/* 82154990h case    0:*/		return 0x82154994;
		  /* 82154994h */ case    1:  		/* bc 4, CR6_LT, 40 */
		/* 82154994h case    1:*/		if ( !regs.CR[6].lt ) { return 0x821549BC;  }
		/* 82154994h case    1:*/		return 0x82154998;
		  /* 82154998h */ case    2:  		/* lis R11, 64 */
		/* 82154998h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0x40);
		/* 82154998h case    2:*/		return 0x8215499C;
		  /* 8215499Ch */ case    3:  		/* rlwinm R10, R3, 0, 16, 31 */
		/* 8215499Ch case    3:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R3);
		/* 8215499Ch case    3:*/		return 0x821549A0;
		  /* 821549A0h */ case    4:  		/* rlwimi R11, R9, 16, 10, 15 */
		/* 821549A0h case    4:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R11,regs.R9);
		/* 821549A0h case    4:*/		return 0x821549A4;
		  /* 821549A4h */ case    5:  		/* li R9, 55 */
		/* 821549A4h case    5:*/		cpu::op::li<0>(regs,&regs.R9,0x37);
		/* 821549A4h case    5:*/		return 0x821549A8;
		  /* 821549A8h */ case    6:  		/* or R11, R11, R10 */
		/* 821549A8h case    6:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821549A8h case    6:*/		return 0x821549AC;
		  /* 821549ACh */ case    7:  		/* stw R9, <#[R31]> */
		/* 821549ACh case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 821549ACh case    7:*/		return 0x821549B0;
		  /* 821549B0h */ case    8:  		/* li R10, 21008 */
		/* 821549B0h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x5210);
		/* 821549B0h case    8:*/		return 0x821549B4;
		  /* 821549B4h */ case    9:  		/* stwu R11, <#[R31 + 4]> */
		/* 821549B4h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821549B4h case    9:*/		return 0x821549B8;
		  /* 821549B8h */ case   10:  		/* b 256 */
		/* 821549B8h case   10:*/		return 0x82154AB8;
		/* 821549B8h case   10:*/		return 0x821549BC;
	}
	return 0x821549BC;
} // Block from 82154990h-821549BCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 821549BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821549BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821549BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821549BC);
		  /* 821549BCh */ case    0:  		/* cmpwi CR6, R27, 0 */
		/* 821549BCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000000);
		/* 821549BCh case    0:*/		return 0x821549C0;
		  /* 821549C0h */ case    1:  		/* bc 12, CR6_EQ, 232 */
		/* 821549C0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82154AA8;  }
		/* 821549C0h case    1:*/		return 0x821549C4;
		  /* 821549C4h */ case    2:  		/* lis R11, 1 */
		/* 821549C4h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0x1);
		/* 821549C4h case    2:*/		return 0x821549C8;
		  /* 821549C8h */ case    3:  		/* lis R10, 4 */
		/* 821549C8h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x4);
		/* 821549C8h case    3:*/		return 0x821549CC;
		  /* 821549CCh */ case    4:  		/* ori R11, R11, 13 */
		/* 821549CCh case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xD);
		/* 821549CCh case    4:*/		return 0x821549D0;
		  /* 821549D0h */ case    5:  		/* ori R8, R10, 33 */
		/* 821549D0h case    5:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x21);
		/* 821549D0h case    5:*/		return 0x821549D4;
		  /* 821549D4h */ case    6:  		/* stw R11, <#[R31]> */
		/* 821549D4h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821549D4h case    6:*/		return 0x821549D8;
		  /* 821549D8h */ case    7:  		/* rlwinm R10, R25, 0, 8, 15 */
		/* 821549D8h case    7:*/		cpu::op::rlwinm<0,0,8,15>(regs,&regs.R10,regs.R25);
		/* 821549D8h case    7:*/		return 0x821549DC;
		  /* 821549DCh */ case    8:  		/* lis R7, 228 */
		/* 821549DCh case    8:*/		cpu::op::lis<0>(regs,&regs.R7,0xE4);
		/* 821549DCh case    8:*/		return 0x821549E0;
		  /* 821549E0h */ case    9:  		/* stwu R8, <#[R31 + 4]> */
		/* 821549E0h case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821549E0h case    9:*/		return 0x821549E4;
		  /* 821549E4h */ case   10:  		/* addi R11, R31, 4 */
		/* 821549E4h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 821549E4h case   10:*/		return 0x821549E8;
		  /* 821549E8h */ case   11:  		/* cmplw CR6, R10, R7 */
		/* 821549E8h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 821549E8h case   11:*/		return 0x821549EC;
		  /* 821549ECh */ case   12:  		/* bc 12, CR6_EQ, 96 */
		/* 821549ECh case   12:*/		if ( regs.CR[6].eq ) { return 0x82154A4C;  }
		/* 821549ECh case   12:*/		return 0x821549F0;
		  /* 821549F0h */ case   13:  		/* rlwinm R8, R10, 14, 18, 31 */
		/* 821549F0h case   13:*/		cpu::op::rlwinm<0,14,18,31>(regs,&regs.R8,regs.R10);
		/* 821549F0h case   13:*/		return 0x821549F4;
		  /* 821549F4h */ case   14:  		/* lis R7, -32217 */
		/* 821549F4h case   14:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8227);
		/* 821549F4h case   14:*/		return 0x821549F8;
		  /* 821549F8h */ case   15:  		/* rlwinm R6, R8, 30, 2, 31 */
		/* 821549F8h case   15:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R6,regs.R8);
		/* 821549F8h case   15:*/		return 0x821549FC;
		  /* 821549FCh */ case   16:  		/* lis R5, 68 */
		/* 821549FCh case   16:*/		cpu::op::lis<0>(regs,&regs.R5,0x44);
		/* 821549FCh case   16:*/		return 0x82154A00;
		  /* 82154A00h */ case   17:  		/* addi R7, R7, 19772 */
		/* 82154A00h case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4D3C);
		/* 82154A00h case   17:*/		return 0x82154A04;
		  /* 82154A04h */ case   18:  		/* rlwinm R10, R10, 18, 28, 29 */
		/* 82154A04h case   18:*/		cpu::op::rlwinm<0,18,28,29>(regs,&regs.R10,regs.R10);
		/* 82154A04h case   18:*/		return 0x82154A08;
		  /* 82154A08h */ case   19:  		/* rlwinm R4, R6, 2, 28, 29 */
		/* 82154A08h case   19:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R4,regs.R6);
		/* 82154A08h case   19:*/		return 0x82154A0C;
		  /* 82154A0Ch */ case   20:  		/* ori R5, R5, 32 */
		/* 82154A0Ch case   20:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x20);
		/* 82154A0Ch case   20:*/		return 0x82154A10;
		  /* 82154A10h */ case   21:  		/* rlwinm R6, R6, 0, 28, 29 */
		/* 82154A10h case   21:*/		cpu::op::rlwinm<0,0,28,29>(regs,&regs.R6,regs.R6);
		/* 82154A10h case   21:*/		return 0x82154A14;
		  /* 82154A14h */ case   22:  		/* stw R5, <#[R11]> */
		/* 82154A14h case   22:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82154A14h case   22:*/		return 0x82154A18;
		  /* 82154A18h */ case   23:  		/* rlwinm R8, R8, 2, 28, 29 */
		/* 82154A18h case   23:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R8,regs.R8);
		/* 82154A18h case   23:*/		return 0x82154A1C;
		  /* 82154A1Ch */ case   24:  		/* lwzx R10, <#[R10 + R7]> */
		/* 82154A1Ch case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 82154A1Ch case   24:*/		return 0x82154A20;
		  /* 82154A20h */ case   25:  		/* lwzx R5, <#[R4 + R7]> */
		/* 82154A20h case   25:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + regs.R7 + 0x00000000) );
		/* 82154A20h case   25:*/		return 0x82154A24;
		  /* 82154A24h */ case   26:  		/* lwzx R6, <#[R6 + R7]> */
		/* 82154A24h case   26:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + regs.R7 + 0x00000000) );
		/* 82154A24h case   26:*/		return 0x82154A28;
		  /* 82154A28h */ case   27:  		/* lwzx R8, <#[R8 + R7]> */
		/* 82154A28h case   27:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 82154A28h case   27:*/		return 0x82154A2C;
		  /* 82154A2Ch */ case   28:  		/* rlwinm R8, R8, 4, 0, 27 */
		/* 82154A2Ch case   28:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R8,regs.R8);
		/* 82154A2Ch case   28:*/		return 0x82154A30;
		  /* 82154A30h */ case   29:  		/* or R10, R8, R10 */
		/* 82154A30h case   29:*/		cpu::op::or<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 82154A30h case   29:*/		return 0x82154A34;
		  /* 82154A34h */ case   30:  		/* rlwinm R7, R5, 8, 0, 23 */
		/* 82154A34h case   30:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R7,regs.R5);
		/* 82154A34h case   30:*/		return 0x82154A38;
		  /* 82154A38h */ case   31:  		/* rlwinm R8, R6, 12, 0, 19 */
		/* 82154A38h case   31:*/		cpu::op::rlwinm<0,12,0,19>(regs,&regs.R8,regs.R6);
		/* 82154A38h case   31:*/		return 0x82154A3C;
		  /* 82154A3Ch */ case   32:  		/* or R10, R7, R10 */
		/* 82154A3Ch case   32:*/		cpu::op::or<0>(regs,&regs.R10,regs.R7,regs.R10);
		/* 82154A3Ch case   32:*/		return 0x82154A40;
		  /* 82154A40h */ case   33:  		/* or R10, R8, R10 */
		/* 82154A40h case   33:*/		cpu::op::or<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 82154A40h case   33:*/		return 0x82154A44;
		  /* 82154A44h */ case   34:  		/* stwu R10, <#[R11 + 4]> */
		/* 82154A44h case   34:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82154A44h case   34:*/		return 0x82154A48;
		  /* 82154A48h */ case   35:  		/* b 16 */
		/* 82154A48h case   35:*/		return 0x82154A58;
		/* 82154A48h case   35:*/		return 0x82154A4C;
	}
	return 0x82154A4C;
} // Block from 821549BCh-82154A4Ch (36 instructions)

//////////////////////////////////////////////////////
// Block at 82154A4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154A4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154A4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154A4C);
		  /* 82154A4Ch */ case    0:  		/* lis R10, 4 */
		/* 82154A4Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x4);
		/* 82154A4Ch case    0:*/		return 0x82154A50;
		  /* 82154A50h */ case    1:  		/* ori R10, R10, 32 */
		/* 82154A50h case    1:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x20);
		/* 82154A50h case    1:*/		return 0x82154A54;
		  /* 82154A54h */ case    2:  		/* stw R10, <#[R11]> */
		/* 82154A54h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82154A54h case    2:*/		return 0x82154A58;
	}
	return 0x82154A58;
} // Block from 82154A4Ch-82154A58h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82154A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154A58);
		  /* 82154A58h */ case    0:  		/* rlwinm R10, R25, 0, 4, 7 */
		/* 82154A58h case    0:*/		cpu::op::rlwinm<0,0,4,7>(regs,&regs.R10,regs.R25);
		/* 82154A58h case    0:*/		return 0x82154A5C;
		  /* 82154A5Ch */ case    1:  		/* lis R8, 3328 */
		/* 82154A5Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R8,0xD00);
		/* 82154A5Ch case    1:*/		return 0x82154A60;
		  /* 82154A60h */ case    2:  		/* addi R11, R11, 4 */
		/* 82154A60h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82154A60h case    2:*/		return 0x82154A64;
		  /* 82154A64h */ case    3:  		/* cmplw CR6, R10, R8 */
		/* 82154A64h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 82154A64h case    3:*/		return 0x82154A68;
		  /* 82154A68h */ case    4:  		/* rlwimi R3, R9, 16, 10, 15 */
		/* 82154A68h case    4:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R3,regs.R9);
		/* 82154A68h case    4:*/		return 0x82154A6C;
		  /* 82154A6Ch */ case    5:  		/* lis R10, 65 */
		/* 82154A6Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0x41);
		/* 82154A6Ch case    5:*/		return 0x82154A70;
		  /* 82154A70h */ case    6:  		/* li R8, 21845 */
		/* 82154A70h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x5555);
		/* 82154A70h case    6:*/		return 0x82154A74;
		  /* 82154A74h */ case    7:  		/* bc 4, CR6_EQ, 24 */
		/* 82154A74h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82154A8C;  }
		/* 82154A74h case    7:*/		return 0x82154A78;
		  /* 82154A78h */ case    8:  		/* rlwinm R9, R3, 0, 10, 31 */
		/* 82154A78h case    8:*/		cpu::op::rlwinm<0,0,10,31>(regs,&regs.R9,regs.R3);
		/* 82154A78h case    8:*/		return 0x82154A7C;
		  /* 82154A7Ch */ case    9:  		/* stw R9, <#[R11]> */
		/* 82154A7Ch case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82154A7Ch case    9:*/		return 0x82154A80;
		  /* 82154A80h */ case   10:  		/* stwu R10, <#[R11 + 4]> */
		/* 82154A80h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82154A80h case   10:*/		return 0x82154A84;
		  /* 82154A84h */ case   11:  		/* stwu R8, <#[R11 + 4]> */
		/* 82154A84h case   11:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82154A84h case   11:*/		return 0x82154A88;
	}
	return 0x82154A88;
} // Block from 82154A58h-82154A88h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82154A88h
// Function '?FCConvertToILFunc@XGRAPHICS@@YAXPAPAKKW4ILOpCode@1@PAU_R400IL_RECORDED_INFO@1@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154A88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154A88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154A88);
		  /* 82154A88h */ case    0:  		/* b 20 */
		/* 82154A88h case    0:*/		return 0x82154A9C;
		/* 82154A88h case    0:*/		return 0x82154A8C;
	}
	return 0x82154A8C;
} // Block from 82154A88h-82154A8Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82154A8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154A8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154A8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154A8C);
		  /* 82154A8Ch */ case    0:  		/* stw R10, <#[R11]> */
		/* 82154A8Ch case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82154A8Ch case    0:*/		return 0x82154A90;
		  /* 82154A90h */ case    1:  		/* rlwinm R10, R3, 0, 10, 31 */
		/* 82154A90h case    1:*/		cpu::op::rlwinm<0,0,10,31>(regs,&regs.R10,regs.R3);
		/* 82154A90h case    1:*/		return 0x82154A94;
		  /* 82154A94h */ case    2:  		/* stwu R8, <#[R11 + 4]> */
		/* 82154A94h case    2:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82154A94h case    2:*/		return 0x82154A98;
		  /* 82154A98h */ case    3:  		/* stwu R10, <#[R11 + 4]> */
		/* 82154A98h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82154A98h case    3:*/		return 0x82154A9C;
	}
	return 0x82154A9C;
} // Block from 82154A8Ch-82154A9Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82154A9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154A9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154A9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154A9C);
		  /* 82154A9Ch */ case    0:  		/* addi R31, R11, 4 */
		/* 82154A9Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 82154A9Ch case    0:*/		return 0x82154AA0;
		  /* 82154AA0h */ case    1:  		/* li R3, 33 */
		/* 82154AA0h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x21);
		/* 82154AA0h case    1:*/		return 0x82154AA4;
		  /* 82154AA4h */ case    2:  		/* li R9, 4 */
		/* 82154AA4h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 82154AA4h case    2:*/		return 0x82154AA8;
	}
	return 0x82154AA8;
} // Block from 82154A9Ch-82154AA8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82154AA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154AA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154AA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154AA8);
		  /* 82154AA8h */ case    0:  		/* rlwimi R3, R9, 16, 10, 15 */
		/* 82154AA8h case    0:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R3,regs.R9);
		/* 82154AA8h case    0:*/		return 0x82154AAC;
		  /* 82154AACh */ case    1:  		/* li R11, 55 */
		/* 82154AACh case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x37);
		/* 82154AACh case    1:*/		return 0x82154AB0;
		  /* 82154AB0h */ case    2:  		/* rlwinm R10, R3, 0, 10, 31 */
		/* 82154AB0h case    2:*/		cpu::op::rlwinm<0,0,10,31>(regs,&regs.R10,regs.R3);
		/* 82154AB0h case    2:*/		return 0x82154AB4;
		  /* 82154AB4h */ case    3:  		/* stw R11, <#[R31]> */
		/* 82154AB4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82154AB4h case    3:*/		return 0x82154AB8;
	}
	return 0x82154AB8;
} // Block from 82154AA8h-82154AB8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82154AB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154AB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154AB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154AB8);
		  /* 82154AB8h */ case    0:  		/* stwu R10, <#[R31 + 4]> */
		/* 82154AB8h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82154AB8h case    0:*/		return 0x82154ABC;
		  /* 82154ABCh */ case    1:  		/* addi R11, R31, 4 */
		/* 82154ABCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 82154ABCh case    1:*/		return 0x82154AC0;
		  /* 82154AC0h */ case    2:  		/* stw R11, <#[R22]> */
		/* 82154AC0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82154AC0h case    2:*/		return 0x82154AC4;
		  /* 82154AC4h */ case    3:  		/* stw R24, <#[R23]> */
		/* 82154AC4h case    3:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R23 + 0x00000000) );
		/* 82154AC4h case    3:*/		return 0x82154AC8;
		  /* 82154AC8h */ case    4:  		/* addi R1, R1, 176 */
		/* 82154AC8h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82154AC8h case    4:*/		return 0x82154ACC;
		  /* 82154ACCh */ case    5:  		/* b -800828 */
		/* 82154ACCh case    5:*/		return 0x82091290;
		/* 82154ACCh case    5:*/		return 0x82154AD0;
	}
	return 0x82154AD0;
} // Block from 82154AB8h-82154AD0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82154AD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154AD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154AD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154AD0);
		  /* 82154AD0h */ case    0:  		/* mfspr R12, LR */
		/* 82154AD0h case    0:*/		regs.R12 = regs.LR;
		/* 82154AD0h case    0:*/		return 0x82154AD4;
		  /* 82154AD4h */ case    1:  		/* bl -800948 */
		/* 82154AD4h case    1:*/		regs.LR = 0x82154AD8; return 0x82091220;
		/* 82154AD4h case    1:*/		return 0x82154AD8;
		  /* 82154AD8h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 82154AD8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 82154AD8h case    2:*/		return 0x82154ADC;
		  /* 82154ADCh */ case    3:  		/* lwz R31, <#[R3]> */
		/* 82154ADCh case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 82154ADCh case    3:*/		return 0x82154AE0;
		  /* 82154AE0h */ case    4:  		/* mr R27, R3 */
		/* 82154AE0h case    4:*/		regs.R27 = regs.R3;
		/* 82154AE0h case    4:*/		return 0x82154AE4;
		  /* 82154AE4h */ case    5:  		/* lwz R19, <#[R7]> */
		/* 82154AE4h case    5:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R7 + 0x00000000) );
		/* 82154AE4h case    5:*/		return 0x82154AE8;
		  /* 82154AE8h */ case    6:  		/* mr R17, R4 */
		/* 82154AE8h case    6:*/		regs.R17 = regs.R4;
		/* 82154AE8h case    6:*/		return 0x82154AEC;
		  /* 82154AECh */ case    7:  		/* stw R3, <#[R1 + 276]> */
		/* 82154AECh case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000114) );
		/* 82154AECh case    7:*/		return 0x82154AF0;
		  /* 82154AF0h */ case    8:  		/* mr R23, R6 */
		/* 82154AF0h case    8:*/		regs.R23 = regs.R6;
		/* 82154AF0h case    8:*/		return 0x82154AF4;
		  /* 82154AF4h */ case    9:  		/* stw R7, <#[R1 + 308]> */
		/* 82154AF4h case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000134) );
		/* 82154AF4h case    9:*/		return 0x82154AF8;
		  /* 82154AF8h */ case   10:  		/* lwz R11, <#[R31]> */
		/* 82154AF8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82154AF8h case   10:*/		return 0x82154AFC;
		  /* 82154AFCh */ case   11:  		/* lwzu R10, <#[R31 + 4]> */
		/* 82154AFCh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82154AFCh case   11:*/		return 0x82154B00;
		  /* 82154B00h */ case   12:  		/* rlwinm R14, R11, 0, 3, 3 */
		/* 82154B00h case   12:*/		cpu::op::rlwinm<0,0,3,3>(regs,&regs.R14,regs.R11);
		/* 82154B00h case   12:*/		return 0x82154B04;
		  /* 82154B04h */ case   13:  		/* rlwinm. R11, R10, 0, 0, 0 */
		/* 82154B04h case   13:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R10);
		/* 82154B04h case   13:*/		return 0x82154B08;
		  /* 82154B08h */ case   14:  		/* bc 4, CR0_EQ, 8 */
		/* 82154B08h case   14:*/		if ( !regs.CR[0].eq ) { return 0x82154B10;  }
		/* 82154B08h case   14:*/		return 0x82154B0C;
		  /* 82154B0Ch */ case   15:  		/* bl 1124180 */
		/* 82154B0Ch case   15:*/		regs.LR = 0x82154B10; return 0x82267260;
		/* 82154B0Ch case   15:*/		return 0x82154B10;
	}
	return 0x82154B10;
} // Block from 82154AD0h-82154B10h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82154B10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154B10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154B10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154B10);
		  /* 82154B10h */ case    0:  		/* lwz R24, <#[R31]> */
		/* 82154B10h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R31 + 0x00000000) );
		/* 82154B10h case    0:*/		return 0x82154B14;
		  /* 82154B14h */ case    1:  		/* addi R20, R31, 4 */
		/* 82154B14h case    1:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R31,0x4);
		/* 82154B14h case    1:*/		return 0x82154B18;
		  /* 82154B18h */ case    2:  		/* lwz R11, <#[R23 + 4]> */
		/* 82154B18h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 82154B18h case    2:*/		return 0x82154B1C;
		  /* 82154B1Ch */ case    3:  		/* li R21, 0 */
		/* 82154B1Ch case    3:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 82154B1Ch case    3:*/		return 0x82154B20;
		  /* 82154B20h */ case    4:  		/* mr R15, R24 */
		/* 82154B20h case    4:*/		regs.R15 = regs.R24;
		/* 82154B20h case    4:*/		return 0x82154B24;
		  /* 82154B24h */ case    5:  		/* cmpwi CR6, R11, 1 */
		/* 82154B24h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82154B24h case    5:*/		return 0x82154B28;
		  /* 82154B28h */ case    6:  		/* bc 4, CR6_EQ, 12 */
		/* 82154B28h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82154B34;  }
		/* 82154B28h case    6:*/		return 0x82154B2C;
		  /* 82154B2Ch */ case    7:  		/* mr R29, R21 */
		/* 82154B2Ch case    7:*/		regs.R29 = regs.R21;
		/* 82154B2Ch case    7:*/		return 0x82154B30;
		  /* 82154B30h */ case    8:  		/* b 20 */
		/* 82154B30h case    8:*/		return 0x82154B44;
		/* 82154B30h case    8:*/		return 0x82154B34;
	}
	return 0x82154B34;
} // Block from 82154B10h-82154B34h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82154B34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154B34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154B34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154B34);
		  /* 82154B34h */ case    0:  		/* cmpwi CR6, R11, 2 */
		/* 82154B34h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 82154B34h case    0:*/		return 0x82154B38;
		  /* 82154B38h */ case    1:  		/* li R29, 1 */
		/* 82154B38h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 82154B38h case    1:*/		return 0x82154B3C;
		  /* 82154B3Ch */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 82154B3Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82154B44;  }
		/* 82154B3Ch case    2:*/		return 0x82154B40;
		  /* 82154B40h */ case    3:  		/* rlwinm R29, R24, 10, 31, 31 */
		/* 82154B40h case    3:*/		cpu::op::rlwinm<0,10,31,31>(regs,&regs.R29,regs.R24);
		/* 82154B40h case    3:*/		return 0x82154B44;
	}
	return 0x82154B44;
} // Block from 82154B34h-82154B44h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82154B44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154B44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154B44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154B44);
		  /* 82154B44h */ case    0:  		/* lis R11, -1 */
		/* 82154B44h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82154B44h case    0:*/		return 0x82154B48;
		  /* 82154B48h */ case    1:  		/* lis R10, 15 */
		/* 82154B48h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xF);
		/* 82154B48h case    1:*/		return 0x82154B4C;
		  /* 82154B4Ch */ case    2:  		/* ori R22, R11, 512 */
		/* 82154B4Ch case    2:*/		cpu::op::ori<0>(regs,&regs.R22,regs.R11,0x200);
		/* 82154B4Ch case    2:*/		return 0x82154B50;
		  /* 82154B50h */ case    3:  		/* ori R18, R10, 33 */
		/* 82154B50h case    3:*/		cpu::op::ori<0>(regs,&regs.R18,regs.R10,0x21);
		/* 82154B50h case    3:*/		return 0x82154B54;
		  /* 82154B54h */ case    4:  		/* cmpwi CR6, R14, 0 */
		/* 82154B54h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R14,0x00000000);
		/* 82154B54h case    4:*/		return 0x82154B58;
		  /* 82154B58h */ case    5:  		/* bc 12, CR6_EQ, 60 */
		/* 82154B58h case    5:*/		if ( regs.CR[6].eq ) { return 0x82154B94;  }
		/* 82154B58h case    5:*/		return 0x82154B5C;
		  /* 82154B5Ch */ case    6:  		/* lwz R11, <#[R20]> */
		/* 82154B5Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82154B5Ch case    6:*/		return 0x82154B60;
		  /* 82154B60h */ case    7:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82154B60h case    7:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82154B60h case    7:*/		return 0x82154B64;
		  /* 82154B64h */ case    8:  		/* bc 4, CR0_EQ, 8 */
		/* 82154B64h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82154B6C;  }
		/* 82154B64h case    8:*/		return 0x82154B68;
		  /* 82154B68h */ case    9:  		/* bl 1124088 */
		/* 82154B68h case    9:*/		regs.LR = 0x82154B6C; return 0x82267260;
		/* 82154B68h case    9:*/		return 0x82154B6C;
	}
	return 0x82154B6C;
} // Block from 82154B44h-82154B6Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 82154B6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154B6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154B6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154B6C);
		  /* 82154B6Ch */ case    0:  		/* cmplw CR6, R17, R22 */
		/* 82154B6Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R22);
		/* 82154B6Ch case    0:*/		return 0x82154B70;
		  /* 82154B70h */ case    1:  		/* bc 4, CR6_LT, 8 */
		/* 82154B70h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82154B78;  }
		/* 82154B70h case    1:*/		return 0x82154B74;
		  /* 82154B74h */ case    2:  		/* bl 1124076 */
		/* 82154B74h case    2:*/		regs.LR = 0x82154B78; return 0x82267260;
		/* 82154B74h case    2:*/		return 0x82154B78;
	}
	return 0x82154B78;
} // Block from 82154B6Ch-82154B78h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82154B78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154B78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154B78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154B78);
		  /* 82154B78h */ case    0:  		/* lis R12, -28673 */
		/* 82154B78h case    0:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8FFF);
		/* 82154B78h case    0:*/		return 0x82154B7C;
		  /* 82154B7Ch */ case    1:  		/* lwz R16, <#[R20]> */
		/* 82154B7Ch case    1:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R20 + 0x00000000) );
		/* 82154B7Ch case    1:*/		return 0x82154B80;
		  /* 82154B80h */ case    2:  		/* addi R20, R20, 4 */
		/* 82154B80h case    2:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x4);
		/* 82154B80h case    2:*/		return 0x82154B84;
		  /* 82154B84h */ case    3:  		/* ori R12, R12, 57377 */
		/* 82154B84h case    3:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xE021);
		/* 82154B84h case    3:*/		return 0x82154B88;
		  /* 82154B88h */ case    4:  		/* and R11, R24, R12 */
		/* 82154B88h case    4:*/		cpu::op::and<0>(regs,&regs.R11,regs.R24,regs.R12);
		/* 82154B88h case    4:*/		return 0x82154B8C;
		  /* 82154B8Ch */ case    5:  		/* or R24, R11, R18 */
		/* 82154B8Ch case    5:*/		cpu::op::or<0>(regs,&regs.R24,regs.R11,regs.R18);
		/* 82154B8Ch case    5:*/		return 0x82154B90;
		  /* 82154B90h */ case    6:  		/* b 8 */
		/* 82154B90h case    6:*/		return 0x82154B98;
		/* 82154B90h case    6:*/		return 0x82154B94;
	}
	return 0x82154B94;
} // Block from 82154B78h-82154B94h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82154B94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154B94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154B94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154B94);
		  /* 82154B94h */ case    0:  		/* lwz R16, <#[R1 + 80]> */
		/* 82154B94h case    0:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R1 + 0x00000050) );
		/* 82154B94h case    0:*/		return 0x82154B98;
	}
	return 0x82154B98;
} // Block from 82154B94h-82154B98h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82154B98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154B98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154B98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154B98);
		  /* 82154B98h */ case    0:  		/* lwz R11, <#[R20]> */
		/* 82154B98h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82154B98h case    0:*/		return 0x82154B9C;
		  /* 82154B9Ch */ case    1:  		/* mr R25, R21 */
		/* 82154B9Ch case    1:*/		regs.R25 = regs.R21;
		/* 82154B9Ch case    1:*/		return 0x82154BA0;
		  /* 82154BA0h */ case    2:  		/* stw R21, <#[R1 + 84]> */
		/* 82154BA0h case    2:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000054) );
		/* 82154BA0h case    2:*/		return 0x82154BA4;
		  /* 82154BA4h */ case    3:  		/* mr R28, R21 */
		/* 82154BA4h case    3:*/		regs.R28 = regs.R21;
		/* 82154BA4h case    3:*/		return 0x82154BA8;
		  /* 82154BA8h */ case    4:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82154BA8h case    4:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82154BA8h case    4:*/		return 0x82154BAC;
		  /* 82154BACh */ case    5:  		/* stw R21, <#[R1 + 80]> */
		/* 82154BACh case    5:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000050) );
		/* 82154BACh case    5:*/		return 0x82154BB0;
		  /* 82154BB0h */ case    6:  		/* bc 12, CR0_EQ, 124 */
		/* 82154BB0h case    6:*/		if ( regs.CR[0].eq ) { return 0x82154C2C;  }
		/* 82154BB0h case    6:*/		return 0x82154BB4;
		  /* 82154BB4h */ case    7:  		/* mr R31, R21 */
		/* 82154BB4h case    7:*/		regs.R31 = regs.R21;
		/* 82154BB4h case    7:*/		return 0x82154BB8;
		  /* 82154BB8h */ case    8:  		/* cmplwi CR6, R28, 2 */
		/* 82154BB8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000002);
		/* 82154BB8h case    8:*/		return 0x82154BBC;
		  /* 82154BBCh */ case    9:  		/* bc 12, CR6_LT, 8 */
		/* 82154BBCh case    9:*/		if ( regs.CR[6].lt ) { return 0x82154BC4;  }
		/* 82154BBCh case    9:*/		return 0x82154BC0;
		  /* 82154BC0h */ case   10:  		/* bl 1124000 */
		/* 82154BC0h case   10:*/		regs.LR = 0x82154BC4; return 0x82267260;
		/* 82154BC0h case   10:*/		return 0x82154BC4;
	}
	return 0x82154BC4;
} // Block from 82154B98h-82154BC4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82154BC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154BC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154BC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154BC4);
		  /* 82154BC4h */ case    0:  		/* lwz R10, <#[R20]> */
		/* 82154BC4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000000) );
		/* 82154BC4h case    0:*/		return 0x82154BC8;
		  /* 82154BC8h */ case    1:  		/* addi R11, R1, 88 */
		/* 82154BC8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x58);
		/* 82154BC8h case    1:*/		return 0x82154BCC;
		  /* 82154BCCh */ case    2:  		/* addi R30, R1, 80 */
		/* 82154BCCh case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x50);
		/* 82154BCCh case    2:*/		return 0x82154BD0;
		  /* 82154BD0h */ case    3:  		/* addi R20, R20, 4 */
		/* 82154BD0h case    3:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x4);
		/* 82154BD0h case    3:*/		return 0x82154BD4;
		  /* 82154BD4h */ case    4:  		/* stwx R10, <#[R31 + R11]> */
		/* 82154BD4h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + regs.R11 + 0x00000000) );
		/* 82154BD4h case    4:*/		return 0x82154BD8;
		  /* 82154BD8h */ case    5:  		/* rlwinm R11, R10, 0, 0, 31 */
		/* 82154BD8h case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R10);
		/* 82154BD8h case    5:*/		return 0x82154BDC;
		  /* 82154BDCh */ case    6:  		/* stwx R21, <#[R31 + R30]> */
		/* 82154BDCh case    6:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + regs.R30 + 0x00000000) );
		/* 82154BDCh case    6:*/		return 0x82154BE0;
		  /* 82154BE0h */ case    7:  		/* rlwinm R11, R11, 0, 18, 18 */
		/* 82154BE0h case    7:*/		cpu::op::rlwinm<0,0,18,18>(regs,&regs.R11,regs.R11);
		/* 82154BE0h case    7:*/		return 0x82154BE4;
		  /* 82154BE4h */ case    8:  		/* cmplwi CR6, R11, 8192 */
		/* 82154BE4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002000);
		/* 82154BE4h case    8:*/		return 0x82154BE8;
		  /* 82154BE8h */ case    9:  		/* bc 4, CR6_EQ, 44 */
		/* 82154BE8h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82154C14;  }
		/* 82154BE8h case    9:*/		return 0x82154BEC;
		  /* 82154BECh */ case   10:  		/* cmplw CR6, R17, R22 */
		/* 82154BECh case   10:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R22);
		/* 82154BECh case   10:*/		return 0x82154BF0;
		  /* 82154BF0h */ case   11:  		/* bc 12, CR6_GT, 8 */
		/* 82154BF0h case   11:*/		if ( regs.CR[6].gt ) { return 0x82154BF8;  }
		/* 82154BF0h case   11:*/		return 0x82154BF4;
		  /* 82154BF4h */ case   12:  		/* bl 1123948 */
		/* 82154BF4h case   12:*/		regs.LR = 0x82154BF8; return 0x82267260;
		/* 82154BF4h case   12:*/		return 0x82154BF8;
	}
	return 0x82154BF8;
} // Block from 82154BC4h-82154BF8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82154BF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154BF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154BF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154BF8);
		  /* 82154BF8h */ case    0:  		/* lwz R11, <#[R20]> */
		/* 82154BF8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82154BF8h case    0:*/		return 0x82154BFC;
		  /* 82154BFCh */ case    1:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82154BFCh case    1:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82154BFCh case    1:*/		return 0x82154C00;
		  /* 82154C00h */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 82154C00h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82154C08;  }
		/* 82154C00h case    2:*/		return 0x82154C04;
		  /* 82154C04h */ case    3:  		/* bl 1123932 */
		/* 82154C04h case    3:*/		regs.LR = 0x82154C08; return 0x82267260;
		/* 82154C04h case    3:*/		return 0x82154C08;
	}
	return 0x82154C08;
} // Block from 82154BF8h-82154C08h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82154C08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154C08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154C08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154C08);
		  /* 82154C08h */ case    0:  		/* lwz R11, <#[R20]> */
		/* 82154C08h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82154C08h case    0:*/		return 0x82154C0C;
		  /* 82154C0Ch */ case    1:  		/* addi R20, R20, 4 */
		/* 82154C0Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x4);
		/* 82154C0Ch case    1:*/		return 0x82154C10;
		  /* 82154C10h */ case    2:  		/* stwx R11, <#[R31 + R30]> */
		/* 82154C10h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + regs.R30 + 0x00000000) );
		/* 82154C10h case    2:*/		return 0x82154C14;
	}
	return 0x82154C14;
} // Block from 82154C08h-82154C14h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82154C14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154C14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154C14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154C14);
		  /* 82154C14h */ case    0:  		/* lwz R11, <#[R20]> */
		/* 82154C14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 82154C14h case    0:*/		return 0x82154C18;
		  /* 82154C18h */ case    1:  		/* addi R28, R28, 1 */
		/* 82154C18h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 82154C18h case    1:*/		return 0x82154C1C;
		  /* 82154C1Ch */ case    2:  		/* addi R31, R31, 4 */
		/* 82154C1Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82154C1Ch case    2:*/		return 0x82154C20;
		  /* 82154C20h */ case    3:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82154C20h case    3:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82154C20h case    3:*/		return 0x82154C24;
		  /* 82154C24h */ case    4:  		/* bc 4, CR0_EQ, -108 */
		/* 82154C24h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82154BB8;  }
		/* 82154C24h case    4:*/		return 0x82154C28;
		  /* 82154C28h */ case    5:  		/* lwz R25, <#[R1 + 80]> */
		/* 82154C28h case    5:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000050) );
		/* 82154C28h case    5:*/		return 0x82154C2C;
	}
	return 0x82154C2C;
} // Block from 82154C14h-82154C2Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82154C2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154C2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154C2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154C2C);
		  /* 82154C2Ch */ case    0:  		/* lwz R30, <#[R1 + 92]> */
		/* 82154C2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x0000005C) );
		/* 82154C2Ch case    0:*/		return 0x82154C30;
		  /* 82154C30h */ case    1:  		/* mr R26, R21 */
		/* 82154C30h case    1:*/		regs.R26 = regs.R21;
		/* 82154C30h case    1:*/		return 0x82154C34;
		  /* 82154C34h */ case    2:  		/* cmplwi CR6, R28, 2 */
		/* 82154C34h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000002);
		/* 82154C34h case    2:*/		return 0x82154C38;
		  /* 82154C38h */ case    3:  		/* bc 12, CR6_LT, 36 */
		/* 82154C38h case    3:*/		if ( regs.CR[6].lt ) { return 0x82154C5C;  }
		/* 82154C38h case    3:*/		return 0x82154C3C;
		  /* 82154C3Ch */ case    4:  		/* cmplw CR6, R17, R22 */
		/* 82154C3Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R22);
		/* 82154C3Ch case    4:*/		return 0x82154C40;
		  /* 82154C40h */ case    5:  		/* bc 4, CR6_LT, 8 */
		/* 82154C40h case    5:*/		if ( !regs.CR[6].lt ) { return 0x82154C48;  }
		/* 82154C40h case    5:*/		return 0x82154C44;
		  /* 82154C44h */ case    6:  		/* bl 1123868 */
		/* 82154C44h case    6:*/		regs.LR = 0x82154C48; return 0x82267260;
		/* 82154C44h case    6:*/		return 0x82154C48;
	}
	return 0x82154C48;
} // Block from 82154C2Ch-82154C48h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82154C48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154C48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154C48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154C48);
		  /* 82154C48h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 82154C48h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 82154C48h case    0:*/		return 0x82154C4C;
		  /* 82154C4Ch */ case    1:  		/* rlwinm R31, R30, 0, 21, 31 */
		/* 82154C4Ch case    1:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R31,regs.R30);
		/* 82154C4Ch case    1:*/		return 0x82154C50;
		  /* 82154C50h */ case    2:  		/* lwz R11, <#[R11]> */
		/* 82154C50h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82154C50h case    2:*/		return 0x82154C54;
		  /* 82154C54h */ case    3:  		/* rlwinm R26, R11, 0, 8, 15 */
		/* 82154C54h case    3:*/		cpu::op::rlwinm<0,0,8,15>(regs,&regs.R26,regs.R11);
		/* 82154C54h case    3:*/		return 0x82154C58;
		  /* 82154C58h */ case    4:  		/* b 8 */
		/* 82154C58h case    4:*/		return 0x82154C60;
		/* 82154C58h case    4:*/		return 0x82154C5C;
	}
	return 0x82154C5C;
} // Block from 82154C48h-82154C5Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82154C5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154C5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154C5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154C5C);
		  /* 82154C5Ch */ case    0:  		/* rlwinm R31, R15, 0, 21, 31 */
		/* 82154C5Ch case    0:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R31,regs.R15);
		/* 82154C5Ch case    0:*/		return 0x82154C60;
	}
	return 0x82154C60;
} // Block from 82154C5Ch-82154C60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82154C60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154C60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154C60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154C60);
		  /* 82154C60h */ case    0:  		/* mr R11, R31 */
		/* 82154C60h case    0:*/		regs.R11 = regs.R31;
		/* 82154C60h case    0:*/		return 0x82154C64;
		  /* 82154C64h */ case    1:  		/* addi R9, R19, 4 */
		/* 82154C64h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R19,0x4);
		/* 82154C64h case    1:*/		return 0x82154C68;
		  /* 82154C68h */ case    2:  		/* rlwinm. R27, R26, 0, 14, 14 */
		/* 82154C68h case    2:*/		cpu::op::rlwinm<1,0,14,14>(regs,&regs.R27,regs.R26);
		/* 82154C68h case    2:*/		return 0x82154C6C;
		  /* 82154C6Ch */ case    3:  		/* lis R10, 2048 */
		/* 82154C6Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x800);
		/* 82154C6Ch case    3:*/		return 0x82154C70;
		  /* 82154C70h */ case    4:  		/* stw R9, <#[R1 + 80]> */
		/* 82154C70h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 82154C70h case    4:*/		return 0x82154C74;
		  /* 82154C74h */ case    5:  		/* rlwimi R11, R29, 8, 23, 23 */
		/* 82154C74h case    5:*/		cpu::op::rlwimi<0,8,23,23>(regs,&regs.R11,regs.R29);
		/* 82154C74h case    5:*/		return 0x82154C78;
		  /* 82154C78h */ case    6:  		/* bc 12, CR0_EQ, 12 */
		/* 82154C78h case    6:*/		if ( regs.CR[0].eq ) { return 0x82154C84;  }
		/* 82154C78h case    6:*/		return 0x82154C7C;
		  /* 82154C7Ch */ case    7:  		/* ori R10, R10, 94 */
		/* 82154C7Ch case    7:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x5E);
		/* 82154C7Ch case    7:*/		return 0x82154C80;
		  /* 82154C80h */ case    8:  		/* b 8 */
		/* 82154C80h case    8:*/		return 0x82154C88;
		/* 82154C80h case    8:*/		return 0x82154C84;
	}
	return 0x82154C84;
} // Block from 82154C60h-82154C84h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82154C84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154C84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154C84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154C84);
		  /* 82154C84h */ case    0:  		/* ori R10, R10, 93 */
		/* 82154C84h case    0:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x5D);
		/* 82154C84h case    0:*/		return 0x82154C88;
	}
	return 0x82154C88;
} // Block from 82154C84h-82154C88h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82154C88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154C88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154C88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154C88);
		  /* 82154C88h */ case    0:  		/* rlwimi R10, R11, 16, 7, 15 */
		/* 82154C88h case    0:*/		cpu::op::rlwimi<0,16,7,15>(regs,&regs.R10,regs.R11);
		/* 82154C88h case    0:*/		return 0x82154C8C;
		  /* 82154C8Ch */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 82154C8Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82154C8Ch case    1:*/		return 0x82154C90;
		  /* 82154C90h */ case    2:  		/* stw R10, <#[R19]> */
		/* 82154C90h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R19 + 0x00000000) );
		/* 82154C90h case    2:*/		return 0x82154C94;
		  /* 82154C94h */ case    3:  		/* bc 4, CR6_EQ, 92 */
		/* 82154C94h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82154CF0;  }
		/* 82154C94h case    3:*/		return 0x82154C98;
		  /* 82154C98h */ case    4:  		/* cmplwi CR6, R27, 0 */
		/* 82154C98h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82154C98h case    4:*/		return 0x82154C9C;
		  /* 82154C9Ch */ case    5:  		/* bc 12, CR6_EQ, 8 */
		/* 82154C9Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x82154CA4;  }
		/* 82154C9Ch case    5:*/		return 0x82154CA0;
		  /* 82154CA0h */ case    6:  		/* bl 1123776 */
		/* 82154CA0h case    6:*/		regs.LR = 0x82154CA4; return 0x82267260;
		/* 82154CA0h case    6:*/		return 0x82154CA4;
	}
	return 0x82154CA4;
} // Block from 82154C88h-82154CA4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82154CA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154CA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154CA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154CA4);
		  /* 82154CA4h */ case    0:  		/* lis R11, -1 */
		/* 82154CA4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82154CA4h case    0:*/		return 0x82154CA8;
		  /* 82154CA8h */ case    1:  		/* ori R11, R11, 260 */
		/* 82154CA8h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x104);
		/* 82154CA8h case    1:*/		return 0x82154CAC;
		  /* 82154CACh */ case    2:  		/* cmplw CR6, R17, R11 */
		/* 82154CACh case    2:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R11);
		/* 82154CACh case    2:*/		return 0x82154CB0;
		  /* 82154CB0h */ case    3:  		/* bc 12, CR6_LT, 8 */
		/* 82154CB0h case    3:*/		if ( regs.CR[6].lt ) { return 0x82154CB8;  }
		/* 82154CB0h case    3:*/		return 0x82154CB4;
		  /* 82154CB4h */ case    4:  		/* bl 1123756 */
		/* 82154CB4h case    4:*/		regs.LR = 0x82154CB8; return 0x82267260;
		/* 82154CB4h case    4:*/		return 0x82154CB8;
	}
	return 0x82154CB8;
} // Block from 82154CA4h-82154CB8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82154CB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154CB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154CB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154CB8);
		  /* 82154CB8h */ case    0:  		/* addi R5, R1, 80 */
		/* 82154CB8h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82154CB8h case    0:*/		return 0x82154CBC;
		  /* 82154CBCh */ case    1:  		/* mr R4, R23 */
		/* 82154CBCh case    1:*/		regs.R4 = regs.R23;
		/* 82154CBCh case    1:*/		return 0x82154CC0;
		  /* 82154CC0h */ case    2:  		/* mr R3, R15 */
		/* 82154CC0h case    2:*/		regs.R3 = regs.R15;
		/* 82154CC0h case    2:*/		return 0x82154CC4;
		  /* 82154CC4h */ case    3:  		/* bl -5924 */
		/* 82154CC4h case    3:*/		regs.LR = 0x82154CC8; return 0x821535A0;
		/* 82154CC4h case    3:*/		return 0x82154CC8;
		  /* 82154CC8h */ case    4:  		/* lwz R11, <#[R1 + 80]> */
		/* 82154CC8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82154CC8h case    4:*/		return 0x82154CCC;
		  /* 82154CCCh */ case    5:  		/* li R10, 81 */
		/* 82154CCCh case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x51);
		/* 82154CCCh case    5:*/		return 0x82154CD0;
		  /* 82154CD0h */ case    6:  		/* lis R9, 128 */
		/* 82154CD0h case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0x80);
		/* 82154CD0h case    6:*/		return 0x82154CD4;
		  /* 82154CD4h */ case    7:  		/* rlwimi R31, R10, 16, 0, 15 */
		/* 82154CD4h case    7:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R31,regs.R10);
		/* 82154CD4h case    7:*/		return 0x82154CD8;
		  /* 82154CD8h */ case    8:  		/* ori R10, R9, 12816 */
		/* 82154CD8h case    8:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R9,0x3210);
		/* 82154CD8h case    8:*/		return 0x82154CDC;
		  /* 82154CDCh */ case    9:  		/* stw R31, <#[R11]> */
		/* 82154CDCh case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 82154CDCh case    9:*/		return 0x82154CE0;
		  /* 82154CE0h */ case   10:  		/* stwu R10, <#[R11 + 4]> */
		/* 82154CE0h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82154CE0h case   10:*/		return 0x82154CE4;
		  /* 82154CE4h */ case   11:  		/* addi R11, R11, 4 */
		/* 82154CE4h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82154CE4h case   11:*/		return 0x82154CE8;
		  /* 82154CE8h */ case   12:  		/* stw R11, <#[R1 + 80]> */
		/* 82154CE8h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82154CE8h case   12:*/		return 0x82154CEC;
		  /* 82154CECh */ case   13:  		/* b 344 */
		/* 82154CECh case   13:*/		return 0x82154E44;
		/* 82154CECh case   13:*/		return 0x82154CF0;
	}
	return 0x82154CF0;
} // Block from 82154CB8h-82154CF0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82154CF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154CF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154CF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154CF0);
		  /* 82154CF0h */ case    0:  		/* cmplwi CR6, R28, 1 */
		/* 82154CF0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000001);
		/* 82154CF0h case    0:*/		return 0x82154CF4;
		  /* 82154CF4h */ case    1:  		/* bc 4, CR6_EQ, 80 */
		/* 82154CF4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82154D44;  }
		/* 82154CF4h case    1:*/		return 0x82154CF8;
		  /* 82154CF8h */ case    2:  		/* lis R11, -1 */
		/* 82154CF8h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82154CF8h case    2:*/		return 0x82154CFC;
		  /* 82154CFCh */ case    3:  		/* ori R11, R11, 260 */
		/* 82154CFCh case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x104);
		/* 82154CFCh case    3:*/		return 0x82154D00;
		  /* 82154D00h */ case    4:  		/* cmplw CR6, R17, R11 */
		/* 82154D00h case    4:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R11);
		/* 82154D00h case    4:*/		return 0x82154D04;
		  /* 82154D04h */ case    5:  		/* bc 12, CR6_EQ, 8 */
		/* 82154D04h case    5:*/		if ( regs.CR[6].eq ) { return 0x82154D0C;  }
		/* 82154D04h case    5:*/		return 0x82154D08;
		  /* 82154D08h */ case    6:  		/* bl 1123672 */
		/* 82154D08h case    6:*/		regs.LR = 0x82154D0C; return 0x82267260;
		/* 82154D08h case    6:*/		return 0x82154D0C;
	}
	return 0x82154D0C;
} // Block from 82154CF0h-82154D0Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82154D0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154D0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154D0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154D0C);
		  /* 82154D0Ch */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 82154D0Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82154D0Ch case    0:*/		return 0x82154D10;
		  /* 82154D10h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 82154D10h case    1:*/		if ( regs.CR[6].eq ) { return 0x82154D18;  }
		/* 82154D10h case    1:*/		return 0x82154D14;
		  /* 82154D14h */ case    2:  		/* bl 1123660 */
		/* 82154D14h case    2:*/		regs.LR = 0x82154D18; return 0x82267260;
		/* 82154D14h case    2:*/		return 0x82154D18;
	}
	return 0x82154D18;
} // Block from 82154D0Ch-82154D18h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82154D18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154D18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154D18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154D18);
		  /* 82154D18h */ case    0:  		/* addi R5, R1, 80 */
		/* 82154D18h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82154D18h case    0:*/		return 0x82154D1C;
		  /* 82154D1Ch */ case    1:  		/* mr R4, R23 */
		/* 82154D1Ch case    1:*/		regs.R4 = regs.R23;
		/* 82154D1Ch case    1:*/		return 0x82154D20;
		  /* 82154D20h */ case    2:  		/* mr R3, R15 */
		/* 82154D20h case    2:*/		regs.R3 = regs.R15;
		/* 82154D20h case    2:*/		return 0x82154D24;
		  /* 82154D24h */ case    3:  		/* bl -6020 */
		/* 82154D24h case    3:*/		regs.LR = 0x82154D28; return 0x821535A0;
		/* 82154D24h case    3:*/		return 0x82154D28;
		  /* 82154D28h */ case    4:  		/* addi R7, R1, 80 */
		/* 82154D28h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82154D28h case    4:*/		return 0x82154D2C;
		  /* 82154D2Ch */ case    5:  		/* mr R6, R23 */
		/* 82154D2Ch case    5:*/		regs.R6 = regs.R23;
		/* 82154D2Ch case    5:*/		return 0x82154D30;
		  /* 82154D30h */ case    6:  		/* lwz R3, <#[R1 + 88]> */
		/* 82154D30h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000058) );
		/* 82154D30h case    6:*/		return 0x82154D34;
		  /* 82154D34h */ case    7:  		/* li R5, 0 */
		/* 82154D34h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82154D34h case    7:*/		return 0x82154D38;
		  /* 82154D38h */ case    8:  		/* mr R4, R25 */
		/* 82154D38h case    8:*/		regs.R4 = regs.R25;
		/* 82154D38h case    8:*/		return 0x82154D3C;
		  /* 82154D3Ch */ case    9:  		/* bl -5756 */
		/* 82154D3Ch case    9:*/		regs.LR = 0x82154D40; return 0x821536C0;
		/* 82154D3Ch case    9:*/		return 0x82154D40;
		  /* 82154D40h */ case   10:  		/* b 260 */
		/* 82154D40h case   10:*/		return 0x82154E44;
		/* 82154D40h case   10:*/		return 0x82154D44;
	}
	return 0x82154D44;
} // Block from 82154D18h-82154D44h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82154D44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154D44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154D44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154D44);
		  /* 82154D44h */ case    0:  		/* rlwinm R29, R30, 0, 8, 15 */
		/* 82154D44h case    0:*/		cpu::op::rlwinm<0,0,8,15>(regs,&regs.R29,regs.R30);
		/* 82154D44h case    0:*/		return 0x82154D48;
		  /* 82154D48h */ case    1:  		/* mr R30, R21 */
		/* 82154D48h case    1:*/		regs.R30 = regs.R21;
		/* 82154D48h case    1:*/		return 0x82154D4C;
		  /* 82154D4Ch */ case    2:  		/* cmplwi CR6, R28, 2 */
		/* 82154D4Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000002);
		/* 82154D4Ch case    2:*/		return 0x82154D50;
		  /* 82154D50h */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 82154D50h case    3:*/		if ( regs.CR[6].eq ) { return 0x82154D58;  }
		/* 82154D50h case    3:*/		return 0x82154D54;
		  /* 82154D54h */ case    4:  		/* bl 1123596 */
		/* 82154D54h case    4:*/		regs.LR = 0x82154D58; return 0x82267260;
		/* 82154D54h case    4:*/		return 0x82154D58;
	}
	return 0x82154D58;
} // Block from 82154D44h-82154D58h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82154D58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154D58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154D58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154D58);
		  /* 82154D58h */ case    0:  		/* cmplw CR6, R17, R22 */
		/* 82154D58h case    0:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R22);
		/* 82154D58h case    0:*/		return 0x82154D5C;
		  /* 82154D5Ch */ case    1:  		/* bc 4, CR6_LT, 8 */
		/* 82154D5Ch case    1:*/		if ( !regs.CR[6].lt ) { return 0x82154D64;  }
		/* 82154D5Ch case    1:*/		return 0x82154D60;
		  /* 82154D60h */ case    2:  		/* bl 1123584 */
		/* 82154D60h case    2:*/		regs.LR = 0x82154D64; return 0x82267260;
		/* 82154D60h case    2:*/		return 0x82154D64;
	}
	return 0x82154D64;
} // Block from 82154D58h-82154D64h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82154D64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154D64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154D64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154D64);
		  /* 82154D64h */ case    0:  		/* lis R28, 228 */
		/* 82154D64h case    0:*/		cpu::op::lis<0>(regs,&regs.R28,0xE4);
		/* 82154D64h case    0:*/		return 0x82154D68;
		  /* 82154D68h */ case    1:  		/* cmplw CR6, R29, R28 */
		/* 82154D68h case    1:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R28);
		/* 82154D68h case    1:*/		return 0x82154D6C;
		  /* 82154D6Ch */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 82154D6Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82154D8C;  }
		/* 82154D6Ch case    2:*/		return 0x82154D70;
		  /* 82154D70h */ case    3:  		/* oris R24, R24, 15 */
		/* 82154D70h case    3:*/		cpu::op::oris<0>(regs,&regs.R24,regs.R24,0xF);
		/* 82154D70h case    3:*/		return 0x82154D74;
		  /* 82154D74h */ case    4:  		/* cmpwi CR6, R14, 0 */
		/* 82154D74h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R14,0x00000000);
		/* 82154D74h case    4:*/		return 0x82154D78;
		  /* 82154D78h */ case    5:  		/* bc 4, CR6_EQ, 20 */
		/* 82154D78h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82154D8C;  }
		/* 82154D78h case    5:*/		return 0x82154D7C;
		  /* 82154D7Ch */ case    6:  		/* lis R12, -28673 */
		/* 82154D7Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8FFF);
		/* 82154D7Ch case    6:*/		return 0x82154D80;
		  /* 82154D80h */ case    7:  		/* ori R12, R12, 57377 */
		/* 82154D80h case    7:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xE021);
		/* 82154D80h case    7:*/		return 0x82154D84;
		  /* 82154D84h */ case    8:  		/* and R11, R24, R12 */
		/* 82154D84h case    8:*/		cpu::op::and<0>(regs,&regs.R11,regs.R24,regs.R12);
		/* 82154D84h case    8:*/		return 0x82154D88;
		  /* 82154D88h */ case    9:  		/* or R24, R11, R18 */
		/* 82154D88h case    9:*/		cpu::op::or<0>(regs,&regs.R24,regs.R11,regs.R18);
		/* 82154D88h case    9:*/		return 0x82154D8C;
	}
	return 0x82154D8C;
} // Block from 82154D64h-82154D8Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 82154D8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154D8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154D8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154D8C);
		  /* 82154D8Ch */ case    0:  		/* rlwinm. R11, R26, 0, 15, 15 */
		/* 82154D8Ch case    0:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R11,regs.R26);
		/* 82154D8Ch case    0:*/		return 0x82154D90;
		  /* 82154D90h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 82154D90h case    1:*/		if ( regs.CR[0].eq ) { return 0x82154D98;  }
		/* 82154D90h case    1:*/		return 0x82154D94;
		  /* 82154D94h */ case    2:  		/* lis R30, 96 */
		/* 82154D94h case    2:*/		cpu::op::lis<0>(regs,&regs.R30,0x60);
		/* 82154D94h case    2:*/		return 0x82154D98;
	}
	return 0x82154D98;
} // Block from 82154D8Ch-82154D98h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82154D98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154D98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154D98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154D98);
		  /* 82154D98h */ case    0:  		/* addi R5, R1, 80 */
		/* 82154D98h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82154D98h case    0:*/		return 0x82154D9C;
		  /* 82154D9Ch */ case    1:  		/* mr R4, R23 */
		/* 82154D9Ch case    1:*/		regs.R4 = regs.R23;
		/* 82154D9Ch case    1:*/		return 0x82154DA0;
		  /* 82154DA0h */ case    2:  		/* mr R3, R24 */
		/* 82154DA0h case    2:*/		regs.R3 = regs.R24;
		/* 82154DA0h case    2:*/		return 0x82154DA4;
		  /* 82154DA4h */ case    3:  		/* bl -6148 */
		/* 82154DA4h case    3:*/		regs.LR = 0x82154DA8; return 0x821535A0;
		/* 82154DA4h case    3:*/		return 0x82154DA8;
		  /* 82154DA8h */ case    4:  		/* lwz R31, <#[R1 + 88]> */
		/* 82154DA8h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000058) );
		/* 82154DA8h case    4:*/		return 0x82154DAC;
		  /* 82154DACh */ case    5:  		/* addi R7, R1, 80 */
		/* 82154DACh case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82154DACh case    5:*/		return 0x82154DB0;
		  /* 82154DB0h */ case    6:  		/* mr R6, R23 */
		/* 82154DB0h case    6:*/		regs.R6 = regs.R23;
		/* 82154DB0h case    6:*/		return 0x82154DB4;
		  /* 82154DB4h */ case    7:  		/* mr R5, R30 */
		/* 82154DB4h case    7:*/		regs.R5 = regs.R30;
		/* 82154DB4h case    7:*/		return 0x82154DB8;
		  /* 82154DB8h */ case    8:  		/* mr R4, R25 */
		/* 82154DB8h case    8:*/		regs.R4 = regs.R25;
		/* 82154DB8h case    8:*/		return 0x82154DBC;
		  /* 82154DBCh */ case    9:  		/* mr R3, R31 */
		/* 82154DBCh case    9:*/		regs.R3 = regs.R31;
		/* 82154DBCh case    9:*/		return 0x82154DC0;
		  /* 82154DC0h */ case   10:  		/* bl -5888 */
		/* 82154DC0h case   10:*/		regs.LR = 0x82154DC4; return 0x821536C0;
		/* 82154DC0h case   10:*/		return 0x82154DC4;
		  /* 82154DC4h */ case   11:  		/* cmplwi CR6, R27, 0 */
		/* 82154DC4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82154DC4h case   11:*/		return 0x82154DC8;
		  /* 82154DC8h */ case   12:  		/* bc 12, CR6_EQ, 56 */
		/* 82154DC8h case   12:*/		if ( regs.CR[6].eq ) { return 0x82154E00;  }
		/* 82154DC8h case   12:*/		return 0x82154DCC;
		  /* 82154DCCh */ case   13:  		/* andis. R11, R31, 2816 */
		/* 82154DCCh case   13:*/		cpu::op::andis<1>(regs,&regs.R11,regs.R31,0xB00);
		/* 82154DCCh case   13:*/		return 0x82154DD0;
		  /* 82154DD0h */ case   14:  		/* cmplwi CR0, R11, 0 */
		/* 82154DD0h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82154DD0h case   14:*/		return 0x82154DD4;
		  /* 82154DD4h */ case   15:  		/* bc 12, CR0_EQ, 8 */
		/* 82154DD4h case   15:*/		if ( regs.CR[0].eq ) { return 0x82154DDC;  }
		/* 82154DD4h case   15:*/		return 0x82154DD8;
		  /* 82154DD8h */ case   16:  		/* bl 1123464 */
		/* 82154DD8h case   16:*/		regs.LR = 0x82154DDC; return 0x82267260;
		/* 82154DD8h case   16:*/		return 0x82154DDC;
	}
	return 0x82154DDC;
} // Block from 82154D98h-82154DDCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 82154DDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154DDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154DDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154DDC);
		  /* 82154DDCh */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82154DDCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82154DDCh case    0:*/		return 0x82154DE0;
		  /* 82154DE0h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 82154DE0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82154DE8;  }
		/* 82154DE0h case    1:*/		return 0x82154DE4;
		  /* 82154DE4h */ case    2:  		/* bl 1123452 */
		/* 82154DE4h case    2:*/		regs.LR = 0x82154DE8; return 0x82267260;
		/* 82154DE4h case    2:*/		return 0x82154DE8;
	}
	return 0x82154DE8;
} // Block from 82154DDCh-82154DE8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82154DE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154DE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154DE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154DE8);
		  /* 82154DE8h */ case    0:  		/* addi R7, R1, 80 */
		/* 82154DE8h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82154DE8h case    0:*/		return 0x82154DEC;
		  /* 82154DECh */ case    1:  		/* mr R6, R23 */
		/* 82154DECh case    1:*/		regs.R6 = regs.R23;
		/* 82154DECh case    1:*/		return 0x82154DF0;
		  /* 82154DF0h */ case    2:  		/* li R5, 0 */
		/* 82154DF0h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82154DF0h case    2:*/		return 0x82154DF4;
		  /* 82154DF4h */ case    3:  		/* mr R4, R25 */
		/* 82154DF4h case    3:*/		regs.R4 = regs.R25;
		/* 82154DF4h case    3:*/		return 0x82154DF8;
		  /* 82154DF8h */ case    4:  		/* mr R3, R31 */
		/* 82154DF8h case    4:*/		regs.R3 = regs.R31;
		/* 82154DF8h case    4:*/		return 0x82154DFC;
		  /* 82154DFCh */ case    5:  		/* bl -5948 */
		/* 82154DFCh case    5:*/		regs.LR = 0x82154E00; return 0x821536C0;
		/* 82154DFCh case    5:*/		return 0x82154E00;
	}
	return 0x82154E00;
} // Block from 82154DE8h-82154E00h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82154E00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154E00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154E00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154E00);
		  /* 82154E00h */ case    0:  		/* cmpwi CR6, R14, 0 */
		/* 82154E00h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R14,0x00000000);
		/* 82154E00h case    0:*/		return 0x82154E04;
		  /* 82154E04h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 82154E04h case    1:*/		if ( regs.CR[6].eq ) { return 0x82154E24;  }
		/* 82154E04h case    1:*/		return 0x82154E08;
		  /* 82154E08h */ case    2:  		/* addi R7, R1, 80 */
		/* 82154E08h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82154E08h case    2:*/		return 0x82154E0C;
		  /* 82154E0Ch */ case    3:  		/* mr R6, R23 */
		/* 82154E0Ch case    3:*/		regs.R6 = regs.R23;
		/* 82154E0Ch case    3:*/		return 0x82154E10;
		  /* 82154E10h */ case    4:  		/* mr R5, R29 */
		/* 82154E10h case    4:*/		regs.R5 = regs.R29;
		/* 82154E10h case    4:*/		return 0x82154E14;
		  /* 82154E14h */ case    5:  		/* mr R4, R16 */
		/* 82154E14h case    5:*/		regs.R4 = regs.R16;
		/* 82154E14h case    5:*/		return 0x82154E18;
		  /* 82154E18h */ case    6:  		/* mr R3, R15 */
		/* 82154E18h case    6:*/		regs.R3 = regs.R15;
		/* 82154E18h case    6:*/		return 0x82154E1C;
		  /* 82154E1Ch */ case    7:  		/* bl -5388 */
		/* 82154E1Ch case    7:*/		regs.LR = 0x82154E20; return 0x82153910;
		/* 82154E1Ch case    7:*/		return 0x82154E20;
		  /* 82154E20h */ case    8:  		/* b 36 */
		/* 82154E20h case    8:*/		return 0x82154E44;
		/* 82154E20h case    8:*/		return 0x82154E24;
	}
	return 0x82154E24;
} // Block from 82154E00h-82154E24h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82154E24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154E24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154E24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154E24);
		  /* 82154E24h */ case    0:  		/* cmplw CR6, R29, R28 */
		/* 82154E24h case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R28);
		/* 82154E24h case    0:*/		return 0x82154E28;
		  /* 82154E28h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 82154E28h case    1:*/		if ( regs.CR[6].eq ) { return 0x82154E44;  }
		/* 82154E28h case    1:*/		return 0x82154E2C;
		  /* 82154E2Ch */ case    2:  		/* addi R7, R1, 80 */
		/* 82154E2Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82154E2Ch case    2:*/		return 0x82154E30;
		  /* 82154E30h */ case    3:  		/* mr R6, R23 */
		/* 82154E30h case    3:*/		regs.R6 = regs.R23;
		/* 82154E30h case    3:*/		return 0x82154E34;
		  /* 82154E34h */ case    4:  		/* mr R5, R29 */
		/* 82154E34h case    4:*/		regs.R5 = regs.R29;
		/* 82154E34h case    4:*/		return 0x82154E38;
		  /* 82154E38h */ case    5:  		/* mr R4, R24 */
		/* 82154E38h case    5:*/		regs.R4 = regs.R24;
		/* 82154E38h case    5:*/		return 0x82154E3C;
		  /* 82154E3Ch */ case    6:  		/* mr R3, R15 */
		/* 82154E3Ch case    6:*/		regs.R3 = regs.R15;
		/* 82154E3Ch case    6:*/		return 0x82154E40;
		  /* 82154E40h */ case    7:  		/* bl -4944 */
		/* 82154E40h case    7:*/		regs.LR = 0x82154E44; return 0x82153AF0;
		/* 82154E40h case    7:*/		return 0x82154E44;
	}
	return 0x82154E44;
} // Block from 82154E24h-82154E44h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82154E44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154E44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154E44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154E44);
		  /* 82154E44h */ case    0:  		/* lwz R11, <#[R1 + 308]> */
		/* 82154E44h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000134) );
		/* 82154E44h case    0:*/		return 0x82154E48;
		  /* 82154E48h */ case    1:  		/* lwz R10, <#[R1 + 80]> */
		/* 82154E48h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82154E48h case    1:*/		return 0x82154E4C;
		  /* 82154E4Ch */ case    2:  		/* lwz R9, <#[R1 + 276]> */
		/* 82154E4Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000114) );
		/* 82154E4Ch case    2:*/		return 0x82154E50;
		  /* 82154E50h */ case    3:  		/* stw R10, <#[R11]> */
		/* 82154E50h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82154E50h case    3:*/		return 0x82154E54;
		  /* 82154E54h */ case    4:  		/* stw R20, <#[R9]> */
		/* 82154E54h case    4:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R9 + 0x00000000) );
		/* 82154E54h case    4:*/		return 0x82154E58;
		  /* 82154E58h */ case    5:  		/* addi R1, R1, 256 */
		/* 82154E58h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 82154E58h case    5:*/		return 0x82154E5C;
		  /* 82154E5Ch */ case    6:  		/* b -801772 */
		/* 82154E5Ch case    6:*/		return 0x82091270;
		/* 82154E5Ch case    6:*/		return 0x82154E60;
	}
	return 0x82154E60;
} // Block from 82154E44h-82154E60h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82154E60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154E60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154E60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154E60);
		  /* 82154E60h */ case    0:  		/* mfspr R12, LR */
		/* 82154E60h case    0:*/		regs.R12 = regs.LR;
		/* 82154E60h case    0:*/		return 0x82154E64;
		  /* 82154E64h */ case    1:  		/* bl -801852 */
		/* 82154E64h case    1:*/		regs.LR = 0x82154E68; return 0x82091228;
		/* 82154E64h case    1:*/		return 0x82154E68;
		  /* 82154E68h */ case    2:  		/* stwu R1, <#[R1 - 272]> */
		/* 82154E68h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEF0);
		/* 82154E68h case    2:*/		return 0x82154E6C;
		  /* 82154E6Ch */ case    3:  		/* lwz R11, <#[R6 + 4]> */
		/* 82154E6Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000004) );
		/* 82154E6Ch case    3:*/		return 0x82154E70;
		  /* 82154E70h */ case    4:  		/* mr R17, R3 */
		/* 82154E70h case    4:*/		regs.R17 = regs.R3;
		/* 82154E70h case    4:*/		return 0x82154E74;
		  /* 82154E74h */ case    5:  		/* mr R28, R4 */
		/* 82154E74h case    5:*/		regs.R28 = regs.R4;
		/* 82154E74h case    5:*/		return 0x82154E78;
		  /* 82154E78h */ case    6:  		/* mr R23, R6 */
		/* 82154E78h case    6:*/		regs.R23 = regs.R6;
		/* 82154E78h case    6:*/		return 0x82154E7C;
		  /* 82154E7Ch */ case    7:  		/* mr R16, R7 */
		/* 82154E7Ch case    7:*/		regs.R16 = regs.R7;
		/* 82154E7Ch case    7:*/		return 0x82154E80;
		  /* 82154E80h */ case    8:  		/* cmpwi CR6, R11, 1 */
		/* 82154E80h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82154E80h case    8:*/		return 0x82154E84;
		  /* 82154E84h */ case    9:  		/* bc 4, CR6_EQ, 12 */
		/* 82154E84h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82154E90;  }
		/* 82154E84h case    9:*/		return 0x82154E88;
		  /* 82154E88h */ case   10:  		/* li R21, 0 */
		/* 82154E88h case   10:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 82154E88h case   10:*/		return 0x82154E8C;
		  /* 82154E8Ch */ case   11:  		/* b 16 */
		/* 82154E8Ch case   11:*/		return 0x82154E9C;
		/* 82154E8Ch case   11:*/		return 0x82154E90;
	}
	return 0x82154E90;
} // Block from 82154E60h-82154E90h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82154E90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154E90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154E90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154E90);
		  /* 82154E90h */ case    0:  		/* addi R11, R11, -2 */
		/* 82154E90h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFE);
		/* 82154E90h case    0:*/		return 0x82154E94;
		  /* 82154E94h */ case    1:  		/* cntlzw R11, R11 */
		/* 82154E94h case    1:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82154E94h case    1:*/		return 0x82154E98;
		  /* 82154E98h */ case    2:  		/* rlwinm R21, R11, 27, 31, 31 */
		/* 82154E98h case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R21,regs.R11);
		/* 82154E98h case    2:*/		return 0x82154E9C;
	}
	return 0x82154E9C;
} // Block from 82154E90h-82154E9Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82154E9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154E9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154E9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154E9C);
		  /* 82154E9Ch */ case    0:  		/* lis R11, -1 */
		/* 82154E9Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82154E9Ch case    0:*/		return 0x82154EA0;
		  /* 82154EA0h */ case    1:  		/* ori R30, R11, 512 */
		/* 82154EA0h case    1:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R11,0x200);
		/* 82154EA0h case    1:*/		return 0x82154EA4;
		  /* 82154EA4h */ case    2:  		/* cmplw CR6, R28, R30 */
		/* 82154EA4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R30);
		/* 82154EA4h case    2:*/		return 0x82154EA8;
		  /* 82154EA8h */ case    3:  		/* bc 4, CR6_LT, 8 */
		/* 82154EA8h case    3:*/		if ( !regs.CR[6].lt ) { return 0x82154EB0;  }
		/* 82154EA8h case    3:*/		return 0x82154EAC;
		  /* 82154EACh */ case    4:  		/* bl 1123252 */
		/* 82154EACh case    4:*/		regs.LR = 0x82154EB0; return 0x82267260;
		/* 82154EACh case    4:*/		return 0x82154EB0;
	}
	return 0x82154EB0;
} // Block from 82154E9Ch-82154EB0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82154EB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154EB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154EB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154EB0);
		  /* 82154EB0h */ case    0:  		/* lwz R31, <#[R17]> */
		/* 82154EB0h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R17 + 0x00000000) );
		/* 82154EB0h case    0:*/		return 0x82154EB4;
		  /* 82154EB4h */ case    1:  		/* lwz R26, <#[R16]> */
		/* 82154EB4h case    1:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R16 + 0x00000000) );
		/* 82154EB4h case    1:*/		return 0x82154EB8;
		  /* 82154EB8h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 82154EB8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82154EB8h case    2:*/		return 0x82154EBC;
		  /* 82154EBCh */ case    3:  		/* lwzu R10, <#[R31 + 4]> */
		/* 82154EBCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82154EBCh case    3:*/		return 0x82154EC0;
		  /* 82154EC0h */ case    4:  		/* rlwinm R20, R11, 0, 3, 3 */
		/* 82154EC0h case    4:*/		cpu::op::rlwinm<0,0,3,3>(regs,&regs.R20,regs.R11);
		/* 82154EC0h case    4:*/		return 0x82154EC4;
		  /* 82154EC4h */ case    5:  		/* rlwinm. R10, R10, 0, 0, 0 */
		/* 82154EC4h case    5:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R10,regs.R10);
		/* 82154EC4h case    5:*/		return 0x82154EC8;
		  /* 82154EC8h */ case    6:  		/* rlwinm R22, R11, 0, 16, 31 */
		/* 82154EC8h case    6:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R22,regs.R11);
		/* 82154EC8h case    6:*/		return 0x82154ECC;
		  /* 82154ECCh */ case    7:  		/* bc 4, CR0_EQ, 8 */
		/* 82154ECCh case    7:*/		if ( !regs.CR[0].eq ) { return 0x82154ED4;  }
		/* 82154ECCh case    7:*/		return 0x82154ED0;
		  /* 82154ED0h */ case    8:  		/* bl 1123216 */
		/* 82154ED0h case    8:*/		regs.LR = 0x82154ED4; return 0x82267260;
		/* 82154ED0h case    8:*/		return 0x82154ED4;
	}
	return 0x82154ED4;
} // Block from 82154EB0h-82154ED4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82154ED4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154ED4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154ED4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154ED4);
		  /* 82154ED4h */ case    0:  		/* lwz R27, <#[R31]> */
		/* 82154ED4h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R31 + 0x00000000) );
		/* 82154ED4h case    0:*/		return 0x82154ED8;
		  /* 82154ED8h */ case    1:  		/* lis R11, 15 */
		/* 82154ED8h case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xF);
		/* 82154ED8h case    1:*/		return 0x82154EDC;
		  /* 82154EDCh */ case    2:  		/* addi R29, R31, 4 */
		/* 82154EDCh case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x4);
		/* 82154EDCh case    2:*/		return 0x82154EE0;
		  /* 82154EE0h */ case    3:  		/* ori R24, R11, 33 */
		/* 82154EE0h case    3:*/		cpu::op::ori<0>(regs,&regs.R24,regs.R11,0x21);
		/* 82154EE0h case    3:*/		return 0x82154EE4;
		  /* 82154EE4h */ case    4:  		/* cmpwi CR6, R20, 0 */
		/* 82154EE4h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R20,0x00000000);
		/* 82154EE4h case    4:*/		return 0x82154EE8;
		  /* 82154EE8h */ case    5:  		/* mr R18, R27 */
		/* 82154EE8h case    5:*/		regs.R18 = regs.R27;
		/* 82154EE8h case    5:*/		return 0x82154EEC;
		  /* 82154EECh */ case    6:  		/* bc 12, CR6_EQ, 60 */
		/* 82154EECh case    6:*/		if ( regs.CR[6].eq ) { return 0x82154F28;  }
		/* 82154EECh case    6:*/		return 0x82154EF0;
		  /* 82154EF0h */ case    7:  		/* lwz R11, <#[R29]> */
		/* 82154EF0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82154EF0h case    7:*/		return 0x82154EF4;
		  /* 82154EF4h */ case    8:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82154EF4h case    8:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82154EF4h case    8:*/		return 0x82154EF8;
		  /* 82154EF8h */ case    9:  		/* bc 4, CR0_EQ, 8 */
		/* 82154EF8h case    9:*/		if ( !regs.CR[0].eq ) { return 0x82154F00;  }
		/* 82154EF8h case    9:*/		return 0x82154EFC;
		  /* 82154EFCh */ case   10:  		/* bl 1123172 */
		/* 82154EFCh case   10:*/		regs.LR = 0x82154F00; return 0x82267260;
		/* 82154EFCh case   10:*/		return 0x82154F00;
	}
	return 0x82154F00;
} // Block from 82154ED4h-82154F00h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82154F00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154F00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154F00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154F00);
		  /* 82154F00h */ case    0:  		/* cmplw CR6, R28, R30 */
		/* 82154F00h case    0:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R30);
		/* 82154F00h case    0:*/		return 0x82154F04;
		  /* 82154F04h */ case    1:  		/* bc 12, CR6_GT, 8 */
		/* 82154F04h case    1:*/		if ( regs.CR[6].gt ) { return 0x82154F0C;  }
		/* 82154F04h case    1:*/		return 0x82154F08;
		  /* 82154F08h */ case    2:  		/* bl 1123160 */
		/* 82154F08h case    2:*/		regs.LR = 0x82154F0C; return 0x82267260;
		/* 82154F08h case    2:*/		return 0x82154F0C;
	}
	return 0x82154F0C;
} // Block from 82154F00h-82154F0Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82154F0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154F0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154F0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154F0C);
		  /* 82154F0Ch */ case    0:  		/* lis R12, -28673 */
		/* 82154F0Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8FFF);
		/* 82154F0Ch case    0:*/		return 0x82154F10;
		  /* 82154F10h */ case    1:  		/* lwz R19, <#[R29]> */
		/* 82154F10h case    1:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R29 + 0x00000000) );
		/* 82154F10h case    1:*/		return 0x82154F14;
		  /* 82154F14h */ case    2:  		/* addi R29, R29, 4 */
		/* 82154F14h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82154F14h case    2:*/		return 0x82154F18;
		  /* 82154F18h */ case    3:  		/* ori R12, R12, 57377 */
		/* 82154F18h case    3:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xE021);
		/* 82154F18h case    3:*/		return 0x82154F1C;
		  /* 82154F1Ch */ case    4:  		/* and R11, R27, R12 */
		/* 82154F1Ch case    4:*/		cpu::op::and<0>(regs,&regs.R11,regs.R27,regs.R12);
		/* 82154F1Ch case    4:*/		return 0x82154F20;
		  /* 82154F20h */ case    5:  		/* or R27, R11, R24 */
		/* 82154F20h case    5:*/		cpu::op::or<0>(regs,&regs.R27,regs.R11,regs.R24);
		/* 82154F20h case    5:*/		return 0x82154F24;
		  /* 82154F24h */ case    6:  		/* b 8 */
		/* 82154F24h case    6:*/		return 0x82154F2C;
		/* 82154F24h case    6:*/		return 0x82154F28;
	}
	return 0x82154F28;
} // Block from 82154F0Ch-82154F28h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82154F28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154F28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154F28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154F28);
		  /* 82154F28h */ case    0:  		/* lwz R19, <#[R1 + 80]> */
		/* 82154F28h case    0:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R1 + 0x00000050) );
		/* 82154F28h case    0:*/		return 0x82154F2C;
	}
	return 0x82154F2C;
} // Block from 82154F28h-82154F2Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82154F2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154F2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154F2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154F2C);
		  /* 82154F2Ch */ case    0:  		/* lwz R11, <#[R29]> */
		/* 82154F2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82154F2Ch case    0:*/		return 0x82154F30;
		  /* 82154F30h */ case    1:  		/* li R25, 0 */
		/* 82154F30h case    1:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 82154F30h case    1:*/		return 0x82154F34;
		  /* 82154F34h */ case    2:  		/* rlwinm. R10, R11, 0, 0, 0 */
		/* 82154F34h case    2:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R10,regs.R11);
		/* 82154F34h case    2:*/		return 0x82154F38;
		  /* 82154F38h */ case    3:  		/* bc 12, CR0_EQ, 108 */
		/* 82154F38h case    3:*/		if ( regs.CR[0].eq ) { return 0x82154FA4;  }
		/* 82154F38h case    3:*/		return 0x82154F3C;
		  /* 82154F3Ch */ case    4:  		/* li R31, 0 */
		/* 82154F3Ch case    4:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82154F3Ch case    4:*/		return 0x82154F40;
	}
	return 0x82154F40;
} // Block from 82154F2Ch-82154F40h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82154F40h
// Function '?XX_CompConvertToILFunc@XGRAPHICS@@YAXPAPAKKW4ILOpCode@1@PAU_R400IL_RECORDED_INFO@1@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154F40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154F40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154F40);
		  /* 82154F40h */ case    0:  		/* addi R10, R1, 96 */
		/* 82154F40h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 82154F40h case    0:*/		return 0x82154F44;
		  /* 82154F44h */ case    1:  		/* addi R30, R1, 112 */
		/* 82154F44h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x70);
		/* 82154F44h case    1:*/		return 0x82154F48;
		  /* 82154F48h */ case    2:  		/* li R9, 0 */
		/* 82154F48h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82154F48h case    2:*/		return 0x82154F4C;
		  /* 82154F4Ch */ case    3:  		/* addi R29, R29, 4 */
		/* 82154F4Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82154F4Ch case    3:*/		return 0x82154F50;
		  /* 82154F50h */ case    4:  		/* stwx R11, <#[R31 + R10]> */
		/* 82154F50h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + regs.R10 + 0x00000000) );
		/* 82154F50h case    4:*/		return 0x82154F54;
		  /* 82154F54h */ case    5:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 82154F54h case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 82154F54h case    5:*/		return 0x82154F58;
		  /* 82154F58h */ case    6:  		/* stwx R9, <#[R31 + R30]> */
		/* 82154F58h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + regs.R30 + 0x00000000) );
		/* 82154F58h case    6:*/		return 0x82154F5C;
		  /* 82154F5Ch */ case    7:  		/* rlwinm R11, R11, 0, 18, 18 */
		/* 82154F5Ch case    7:*/		cpu::op::rlwinm<0,0,18,18>(regs,&regs.R11,regs.R11);
		/* 82154F5Ch case    7:*/		return 0x82154F60;
		  /* 82154F60h */ case    8:  		/* cmplwi CR6, R11, 8192 */
		/* 82154F60h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002000);
		/* 82154F60h case    8:*/		return 0x82154F64;
		  /* 82154F64h */ case    9:  		/* bc 4, CR6_EQ, 32 */
		/* 82154F64h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82154F84;  }
		/* 82154F64h case    9:*/		return 0x82154F68;
		  /* 82154F68h */ case   10:  		/* lwz R11, <#[R29]> */
		/* 82154F68h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82154F68h case   10:*/		return 0x82154F6C;
		  /* 82154F6Ch */ case   11:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82154F6Ch case   11:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82154F6Ch case   11:*/		return 0x82154F70;
		  /* 82154F70h */ case   12:  		/* bc 4, CR0_EQ, 8 */
		/* 82154F70h case   12:*/		if ( !regs.CR[0].eq ) { return 0x82154F78;  }
		/* 82154F70h case   12:*/		return 0x82154F74;
		  /* 82154F74h */ case   13:  		/* bl 1123052 */
		/* 82154F74h case   13:*/		regs.LR = 0x82154F78; return 0x82267260;
		/* 82154F74h case   13:*/		return 0x82154F78;
	}
	return 0x82154F78;
} // Block from 82154F40h-82154F78h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82154F78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154F78);
		  /* 82154F78h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 82154F78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82154F78h case    0:*/		return 0x82154F7C;
		  /* 82154F7Ch */ case    1:  		/* addi R29, R29, 4 */
		/* 82154F7Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 82154F7Ch case    1:*/		return 0x82154F80;
		  /* 82154F80h */ case    2:  		/* stwx R11, <#[R31 + R30]> */
		/* 82154F80h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + regs.R30 + 0x00000000) );
		/* 82154F80h case    2:*/		return 0x82154F84;
	}
	return 0x82154F84;
} // Block from 82154F78h-82154F84h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82154F84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154F84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154F84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154F84);
		  /* 82154F84h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 82154F84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 82154F84h case    0:*/		return 0x82154F88;
		  /* 82154F88h */ case    1:  		/* addi R25, R25, 1 */
		/* 82154F88h case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 82154F88h case    1:*/		return 0x82154F8C;
		  /* 82154F8Ch */ case    2:  		/* addi R31, R31, 4 */
		/* 82154F8Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82154F8Ch case    2:*/		return 0x82154F90;
		  /* 82154F90h */ case    3:  		/* rlwinm. R10, R11, 0, 0, 0 */
		/* 82154F90h case    3:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R10,regs.R11);
		/* 82154F90h case    3:*/		return 0x82154F94;
		  /* 82154F94h */ case    4:  		/* bc 4, CR0_EQ, -84 */
		/* 82154F94h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82154F40;  }
		/* 82154F94h case    4:*/		return 0x82154F98;
		  /* 82154F98h */ case    5:  		/* cmplwi CR6, R25, 4 */
		/* 82154F98h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000004);
		/* 82154F98h case    5:*/		return 0x82154F9C;
		  /* 82154F9Ch */ case    6:  		/* bc 4, CR6_GT, 8 */
		/* 82154F9Ch case    6:*/		if ( !regs.CR[6].gt ) { return 0x82154FA4;  }
		/* 82154F9Ch case    6:*/		return 0x82154FA0;
		  /* 82154FA0h */ case    7:  		/* bl 1123008 */
		/* 82154FA0h case    7:*/		regs.LR = 0x82154FA4; return 0x82267260;
		/* 82154FA0h case    7:*/		return 0x82154FA4;
	}
	return 0x82154FA4;
} // Block from 82154F84h-82154FA4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82154FA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154FA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154FA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154FA4);
		  /* 82154FA4h */ case    0:  		/* lwz R10, <#[R1 + 100]> */
		/* 82154FA4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 82154FA4h case    0:*/		return 0x82154FA8;
		  /* 82154FA8h */ case    1:  		/* addi R8, R26, 4 */
		/* 82154FA8h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R26,0x4);
		/* 82154FA8h case    1:*/		return 0x82154FAC;
		  /* 82154FACh */ case    2:  		/* cmplwi CR6, R22, 95 */
		/* 82154FACh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x0000005F);
		/* 82154FACh case    2:*/		return 0x82154FB0;
		  /* 82154FB0h */ case    3:  		/* rlwinm R11, R10, 0, 21, 31 */
		/* 82154FB0h case    3:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R11,regs.R10);
		/* 82154FB0h case    3:*/		return 0x82154FB4;
		  /* 82154FB4h */ case    4:  		/* stw R8, <#[R1 + 80]> */
		/* 82154FB4h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000050) );
		/* 82154FB4h case    4:*/		return 0x82154FB8;
		  /* 82154FB8h */ case    5:  		/* rlwimi R11, R21, 8, 23, 23 */
		/* 82154FB8h case    5:*/		cpu::op::rlwimi<0,8,23,23>(regs,&regs.R11,regs.R21);
		/* 82154FB8h case    5:*/		return 0x82154FBC;
		  /* 82154FBCh */ case    6:  		/* bc 4, CR6_EQ, 16 */
		/* 82154FBCh case    6:*/		if ( !regs.CR[6].eq ) { return 0x82154FCC;  }
		/* 82154FBCh case    6:*/		return 0x82154FC0;
		  /* 82154FC0h */ case    7:  		/* lis R9, 2560 */
		/* 82154FC0h case    7:*/		cpu::op::lis<0>(regs,&regs.R9,0xA00);
		/* 82154FC0h case    7:*/		return 0x82154FC4;
		  /* 82154FC4h */ case    8:  		/* ori R9, R9, 94 */
		/* 82154FC4h case    8:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x5E);
		/* 82154FC4h case    8:*/		return 0x82154FC8;
		  /* 82154FC8h */ case    9:  		/* b 12 */
		/* 82154FC8h case    9:*/		return 0x82154FD4;
		/* 82154FC8h case    9:*/		return 0x82154FCC;
	}
	return 0x82154FCC;
} // Block from 82154FA4h-82154FCCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 82154FCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154FCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154FCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154FCC);
		  /* 82154FCCh */ case    0:  		/* lis R9, 2048 */
		/* 82154FCCh case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0x800);
		/* 82154FCCh case    0:*/		return 0x82154FD0;
		  /* 82154FD0h */ case    1:  		/* ori R9, R9, 95 */
		/* 82154FD0h case    1:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x5F);
		/* 82154FD0h case    1:*/		return 0x82154FD4;
	}
	return 0x82154FD4;
} // Block from 82154FCCh-82154FD4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82154FD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82154FD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82154FD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82154FD4);
		  /* 82154FD4h */ case    0:  		/* rlwimi R9, R11, 16, 7, 15 */
		/* 82154FD4h case    0:*/		cpu::op::rlwimi<0,16,7,15>(regs,&regs.R9,regs.R11);
		/* 82154FD4h case    0:*/		return 0x82154FD8;
		  /* 82154FD8h */ case    1:  		/* rlwinm R28, R10, 0, 8, 15 */
		/* 82154FD8h case    1:*/		cpu::op::rlwinm<0,0,8,15>(regs,&regs.R28,regs.R10);
		/* 82154FD8h case    1:*/		return 0x82154FDC;
		  /* 82154FDCh */ case    2:  		/* stw R9, <#[R26]> */
		/* 82154FDCh case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R26 + 0x00000000) );
		/* 82154FDCh case    2:*/		return 0x82154FE0;
		  /* 82154FE0h */ case    3:  		/* lis R26, 228 */
		/* 82154FE0h case    3:*/		cpu::op::lis<0>(regs,&regs.R26,0xE4);
		/* 82154FE0h case    3:*/		return 0x82154FE4;
		  /* 82154FE4h */ case    4:  		/* cmplw CR6, R28, R26 */
		/* 82154FE4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R26);
		/* 82154FE4h case    4:*/		return 0x82154FE8;
		  /* 82154FE8h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 82154FE8h case    5:*/		if ( regs.CR[6].eq ) { return 0x82155008;  }
		/* 82154FE8h case    5:*/		return 0x82154FEC;
		  /* 82154FECh */ case    6:  		/* oris R27, R27, 15 */
		/* 82154FECh case    6:*/		cpu::op::oris<0>(regs,&regs.R27,regs.R27,0xF);
		/* 82154FECh case    6:*/		return 0x82154FF0;
		  /* 82154FF0h */ case    7:  		/* cmpwi CR6, R20, 0 */
		/* 82154FF0h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R20,0x00000000);
		/* 82154FF0h case    7:*/		return 0x82154FF4;
		  /* 82154FF4h */ case    8:  		/* bc 4, CR6_EQ, 20 */
		/* 82154FF4h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82155008;  }
		/* 82154FF4h case    8:*/		return 0x82154FF8;
		  /* 82154FF8h */ case    9:  		/* lis R12, -28673 */
		/* 82154FF8h case    9:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFF8FFF);
		/* 82154FF8h case    9:*/		return 0x82154FFC;
		  /* 82154FFCh */ case   10:  		/* ori R12, R12, 57377 */
		/* 82154FFCh case   10:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xE021);
		/* 82154FFCh case   10:*/		return 0x82155000;
		  /* 82155000h */ case   11:  		/* and R11, R27, R12 */
		/* 82155000h case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R27,regs.R12);
		/* 82155000h case   11:*/		return 0x82155004;
		  /* 82155004h */ case   12:  		/* or R27, R11, R24 */
		/* 82155004h case   12:*/		cpu::op::or<0>(regs,&regs.R27,regs.R11,regs.R24);
		/* 82155004h case   12:*/		return 0x82155008;
	}
	return 0x82155008;
} // Block from 82154FD4h-82155008h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82155008h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155008( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155008) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155008);
		  /* 82155008h */ case    0:  		/* addi R5, R1, 80 */
		/* 82155008h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82155008h case    0:*/		return 0x8215500C;
		  /* 8215500Ch */ case    1:  		/* mr R4, R23 */
		/* 8215500Ch case    1:*/		regs.R4 = regs.R23;
		/* 8215500Ch case    1:*/		return 0x82155010;
		  /* 82155010h */ case    2:  		/* mr R3, R27 */
		/* 82155010h case    2:*/		regs.R3 = regs.R27;
		/* 82155010h case    2:*/		return 0x82155014;
		  /* 82155014h */ case    3:  		/* bl -6772 */
		/* 82155014h case    3:*/		regs.LR = 0x82155018; return 0x821535A0;
		/* 82155014h case    3:*/		return 0x82155018;
		  /* 82155018h */ case    4:  		/* lwz R30, <#[R1 + 112]> */
		/* 82155018h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000070) );
		/* 82155018h case    4:*/		return 0x8215501C;
		  /* 8215501Ch */ case    5:  		/* lwz R31, <#[R1 + 96]> */
		/* 8215501Ch case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000060) );
		/* 8215501Ch case    5:*/		return 0x82155020;
		  /* 82155020h */ case    6:  		/* addi R7, R1, 80 */
		/* 82155020h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82155020h case    6:*/		return 0x82155024;
		  /* 82155024h */ case    7:  		/* mr R6, R23 */
		/* 82155024h case    7:*/		regs.R6 = regs.R23;
		/* 82155024h case    7:*/		return 0x82155028;
		  /* 82155028h */ case    8:  		/* li R5, 0 */
		/* 82155028h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82155028h case    8:*/		return 0x8215502C;
		  /* 8215502Ch */ case    9:  		/* mr R4, R30 */
		/* 8215502Ch case    9:*/		regs.R4 = regs.R30;
		/* 8215502Ch case    9:*/		return 0x82155030;
		  /* 82155030h */ case   10:  		/* mr R3, R31 */
		/* 82155030h case   10:*/		regs.R3 = regs.R31;
		/* 82155030h case   10:*/		return 0x82155034;
		  /* 82155034h */ case   11:  		/* bl -6516 */
		/* 82155034h case   11:*/		regs.LR = 0x82155038; return 0x821536C0;
		/* 82155034h case   11:*/		return 0x82155038;
		  /* 82155038h */ case   12:  		/* cmplwi CR6, R22, 95 */
		/* 82155038h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x0000005F);
		/* 82155038h case   12:*/		return 0x8215503C;
		  /* 8215503Ch */ case   13:  		/* bc 4, CR6_EQ, 32 */
		/* 8215503Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x8215505C;  }
		/* 8215503Ch case   13:*/		return 0x82155040;
		  /* 82155040h */ case   14:  		/* andis. R11, R31, 2816 */
		/* 82155040h case   14:*/		cpu::op::andis<1>(regs,&regs.R11,regs.R31,0xB00);
		/* 82155040h case   14:*/		return 0x82155044;
		  /* 82155044h */ case   15:  		/* cmplwi CR0, R11, 0 */
		/* 82155044h case   15:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82155044h case   15:*/		return 0x82155048;
		  /* 82155048h */ case   16:  		/* bc 12, CR0_EQ, 8 */
		/* 82155048h case   16:*/		if ( regs.CR[0].eq ) { return 0x82155050;  }
		/* 82155048h case   16:*/		return 0x8215504C;
		  /* 8215504Ch */ case   17:  		/* bl 1122836 */
		/* 8215504Ch case   17:*/		regs.LR = 0x82155050; return 0x82267260;
		/* 8215504Ch case   17:*/		return 0x82155050;
	}
	return 0x82155050;
} // Block from 82155008h-82155050h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82155050h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155050);
		  /* 82155050h */ case    0:  		/* mr R4, R30 */
		/* 82155050h case    0:*/		regs.R4 = regs.R30;
		/* 82155050h case    0:*/		return 0x82155054;
		  /* 82155054h */ case    1:  		/* mr R3, R31 */
		/* 82155054h case    1:*/		regs.R3 = regs.R31;
		/* 82155054h case    1:*/		return 0x82155058;
		  /* 82155058h */ case    2:  		/* b 48 */
		/* 82155058h case    2:*/		return 0x82155088;
		/* 82155058h case    2:*/		return 0x8215505C;
	}
	return 0x8215505C;
} // Block from 82155050h-8215505Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215505Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215505C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215505C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215505C);
		  /* 8215505Ch */ case    0:  		/* cmplwi CR6, R25, 4 */
		/* 8215505Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000004);
		/* 8215505Ch case    0:*/		return 0x82155060;
		  /* 82155060h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 82155060h case    1:*/		if ( regs.CR[6].eq ) { return 0x82155068;  }
		/* 82155060h case    1:*/		return 0x82155064;
		  /* 82155064h */ case    2:  		/* bl 1122812 */
		/* 82155064h case    2:*/		regs.LR = 0x82155068; return 0x82267260;
		/* 82155064h case    2:*/		return 0x82155068;
	}
	return 0x82155068;
} // Block from 8215505Ch-82155068h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82155068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155068);
		  /* 82155068h */ case    0:  		/* addi R7, R1, 80 */
		/* 82155068h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82155068h case    0:*/		return 0x8215506C;
		  /* 8215506Ch */ case    1:  		/* lwz R4, <#[R1 + 120]> */
		/* 8215506Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000078) );
		/* 8215506Ch case    1:*/		return 0x82155070;
		  /* 82155070h */ case    2:  		/* mr R6, R23 */
		/* 82155070h case    2:*/		regs.R6 = regs.R23;
		/* 82155070h case    2:*/		return 0x82155074;
		  /* 82155074h */ case    3:  		/* lwz R3, <#[R1 + 104]> */
		/* 82155074h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000068) );
		/* 82155074h case    3:*/		return 0x82155078;
		  /* 82155078h */ case    4:  		/* li R5, 0 */
		/* 82155078h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82155078h case    4:*/		return 0x8215507C;
		  /* 8215507Ch */ case    5:  		/* bl -6588 */
		/* 8215507Ch case    5:*/		regs.LR = 0x82155080; return 0x821536C0;
		/* 8215507Ch case    5:*/		return 0x82155080;
		  /* 82155080h */ case    6:  		/* lwz R4, <#[R1 + 124]> */
		/* 82155080h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000007C) );
		/* 82155080h case    6:*/		return 0x82155084;
		  /* 82155084h */ case    7:  		/* lwz R3, <#[R1 + 108]> */
		/* 82155084h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000006C) );
		/* 82155084h case    7:*/		return 0x82155088;
	}
	return 0x82155088;
} // Block from 82155068h-82155088h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82155088h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155088);
		  /* 82155088h */ case    0:  		/* addi R7, R1, 80 */
		/* 82155088h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82155088h case    0:*/		return 0x8215508C;
		  /* 8215508Ch */ case    1:  		/* mr R6, R23 */
		/* 8215508Ch case    1:*/		regs.R6 = regs.R23;
		/* 8215508Ch case    1:*/		return 0x82155090;
		  /* 82155090h */ case    2:  		/* li R5, 0 */
		/* 82155090h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82155090h case    2:*/		return 0x82155094;
		  /* 82155094h */ case    3:  		/* bl -6612 */
		/* 82155094h case    3:*/		regs.LR = 0x82155098; return 0x821536C0;
		/* 82155094h case    3:*/		return 0x82155098;
		  /* 82155098h */ case    4:  		/* cmpwi CR6, R20, 0 */
		/* 82155098h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R20,0x00000000);
		/* 82155098h case    4:*/		return 0x8215509C;
		  /* 8215509Ch */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 8215509Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821550BC;  }
		/* 8215509Ch case    5:*/		return 0x821550A0;
		  /* 821550A0h */ case    6:  		/* addi R7, R1, 80 */
		/* 821550A0h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 821550A0h case    6:*/		return 0x821550A4;
		  /* 821550A4h */ case    7:  		/* mr R6, R23 */
		/* 821550A4h case    7:*/		regs.R6 = regs.R23;
		/* 821550A4h case    7:*/		return 0x821550A8;
		  /* 821550A8h */ case    8:  		/* mr R5, R28 */
		/* 821550A8h case    8:*/		regs.R5 = regs.R28;
		/* 821550A8h case    8:*/		return 0x821550AC;
		  /* 821550ACh */ case    9:  		/* mr R4, R19 */
		/* 821550ACh case    9:*/		regs.R4 = regs.R19;
		/* 821550ACh case    9:*/		return 0x821550B0;
		  /* 821550B0h */ case   10:  		/* mr R3, R18 */
		/* 821550B0h case   10:*/		regs.R3 = regs.R18;
		/* 821550B0h case   10:*/		return 0x821550B4;
		  /* 821550B4h */ case   11:  		/* bl -6052 */
		/* 821550B4h case   11:*/		regs.LR = 0x821550B8; return 0x82153910;
		/* 821550B4h case   11:*/		return 0x821550B8;
		  /* 821550B8h */ case   12:  		/* b 36 */
		/* 821550B8h case   12:*/		return 0x821550DC;
		/* 821550B8h case   12:*/		return 0x821550BC;
	}
	return 0x821550BC;
} // Block from 82155088h-821550BCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821550BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821550BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821550BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821550BC);
		  /* 821550BCh */ case    0:  		/* cmplw CR6, R28, R26 */
		/* 821550BCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R26);
		/* 821550BCh case    0:*/		return 0x821550C0;
		  /* 821550C0h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 821550C0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821550DC;  }
		/* 821550C0h case    1:*/		return 0x821550C4;
		  /* 821550C4h */ case    2:  		/* addi R7, R1, 80 */
		/* 821550C4h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 821550C4h case    2:*/		return 0x821550C8;
		  /* 821550C8h */ case    3:  		/* mr R6, R23 */
		/* 821550C8h case    3:*/		regs.R6 = regs.R23;
		/* 821550C8h case    3:*/		return 0x821550CC;
		  /* 821550CCh */ case    4:  		/* mr R5, R28 */
		/* 821550CCh case    4:*/		regs.R5 = regs.R28;
		/* 821550CCh case    4:*/		return 0x821550D0;
		  /* 821550D0h */ case    5:  		/* mr R4, R27 */
		/* 821550D0h case    5:*/		regs.R4 = regs.R27;
		/* 821550D0h case    5:*/		return 0x821550D4;
		  /* 821550D4h */ case    6:  		/* mr R3, R18 */
		/* 821550D4h case    6:*/		regs.R3 = regs.R18;
		/* 821550D4h case    6:*/		return 0x821550D8;
		  /* 821550D8h */ case    7:  		/* bl -5608 */
		/* 821550D8h case    7:*/		regs.LR = 0x821550DC; return 0x82153AF0;
		/* 821550D8h case    7:*/		return 0x821550DC;
	}
	return 0x821550DC;
} // Block from 821550BCh-821550DCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821550DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821550DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821550DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821550DC);
		  /* 821550DCh */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 821550DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821550DCh case    0:*/		return 0x821550E0;
		  /* 821550E0h */ case    1:  		/* stw R11, <#[R16]> */
		/* 821550E0h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 821550E0h case    1:*/		return 0x821550E4;
		  /* 821550E4h */ case    2:  		/* stw R29, <#[R17]> */
		/* 821550E4h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R17 + 0x00000000) );
		/* 821550E4h case    2:*/		return 0x821550E8;
		  /* 821550E8h */ case    3:  		/* addi R1, R1, 272 */
		/* 821550E8h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x110);
		/* 821550E8h case    3:*/		return 0x821550EC;
		  /* 821550ECh */ case    4:  		/* b -802420 */
		/* 821550ECh case    4:*/		return 0x82091278;
		/* 821550ECh case    4:*/		return 0x821550F0;
	}
	return 0x821550F0;
} // Block from 821550DCh-821550F0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821550F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821550F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821550F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821550F0);
		  /* 821550F0h */ case    0:  		/* mfspr R12, LR */
		/* 821550F0h case    0:*/		regs.R12 = regs.LR;
		/* 821550F0h case    0:*/		return 0x821550F4;
		  /* 821550F4h */ case    1:  		/* bl -802516 */
		/* 821550F4h case    1:*/		regs.LR = 0x821550F8; return 0x82091220;
		/* 821550F4h case    1:*/		return 0x821550F8;
		  /* 821550F8h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 821550F8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 821550F8h case    2:*/		return 0x821550FC;
		  /* 821550FCh */ case    3:  		/* lwz R11, <#[R6 + 4]> */
		/* 821550FCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000004) );
		/* 821550FCh case    3:*/		return 0x82155100;
		  /* 82155100h */ case    4:  		/* mr R14, R3 */
		/* 82155100h case    4:*/		regs.R14 = regs.R3;
		/* 82155100h case    4:*/		return 0x82155104;
		  /* 82155104h */ case    5:  		/* mr R19, R6 */
		/* 82155104h case    5:*/		regs.R19 = regs.R6;
		/* 82155104h case    5:*/		return 0x82155108;
		  /* 82155108h */ case    6:  		/* stw R7, <#[R1 + 292]> */
		/* 82155108h case    6:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000124) );
		/* 82155108h case    6:*/		return 0x8215510C;
		  /* 8215510Ch */ case    7:  		/* mr R31, R7 */
		/* 8215510Ch case    7:*/		regs.R31 = regs.R7;
		/* 8215510Ch case    7:*/		return 0x82155110;
	}
	return 0x82155110;
} // Block from 821550F0h-82155110h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82155110h
// Function '?TEXCOORDConvertToILFunc@XGRAPHICS@@YAXPAPAKKW4ILOpCode@1@PAU_R400IL_RECORDED_INFO@1@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155110);
		  /* 82155110h */ case    0:  		/* li R17, 0 */
		/* 82155110h case    0:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 82155110h case    0:*/		return 0x82155114;
		  /* 82155114h */ case    1:  		/* cmpwi CR6, R11, 1 */
		/* 82155114h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82155114h case    1:*/		return 0x82155118;
		  /* 82155118h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 82155118h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82155124;  }
		/* 82155118h case    2:*/		return 0x8215511C;
		  /* 8215511Ch */ case    3:  		/* mr R18, R17 */
		/* 8215511Ch case    3:*/		regs.R18 = regs.R17;
		/* 8215511Ch case    3:*/		return 0x82155120;
		  /* 82155120h */ case    4:  		/* b 16 */
		/* 82155120h case    4:*/		return 0x82155130;
		/* 82155120h case    4:*/		return 0x82155124;
	}
	return 0x82155124;
} // Block from 82155110h-82155124h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82155124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155124);
		  /* 82155124h */ case    0:  		/* addi R11, R11, -2 */
		/* 82155124h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFE);
		/* 82155124h case    0:*/		return 0x82155128;
		  /* 82155128h */ case    1:  		/* cntlzw R11, R11 */
		/* 82155128h case    1:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82155128h case    1:*/		return 0x8215512C;
		  /* 8215512Ch */ case    2:  		/* rlwinm R18, R11, 27, 31, 31 */
		/* 8215512Ch case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R18,regs.R11);
		/* 8215512Ch case    2:*/		return 0x82155130;
	}
	return 0x82155130;
} // Block from 82155124h-82155130h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82155130h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155130);
		  /* 82155130h */ case    0:  		/* lis R11, -1 */
		/* 82155130h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82155130h case    0:*/		return 0x82155134;
		  /* 82155134h */ case    1:  		/* ori R11, R11, 260 */
		/* 82155134h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x104);
		/* 82155134h case    1:*/		return 0x82155138;
		  /* 82155138h */ case    2:  		/* cmplw CR6, R4, R11 */
		/* 82155138h case    2:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82155138h case    2:*/		return 0x8215513C;
		  /* 8215513Ch */ case    3:  		/* bc 12, CR6_LT, 8 */
		/* 8215513Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x82155144;  }
		/* 8215513Ch case    3:*/		return 0x82155140;
		  /* 82155140h */ case    4:  		/* bl 1122592 */
		/* 82155140h case    4:*/		regs.LR = 0x82155144; return 0x82267260;
		/* 82155140h case    4:*/		return 0x82155144;
	}
	return 0x82155144;
} // Block from 82155130h-82155144h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82155144h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155144( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155144) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155144);
		  /* 82155144h */ case    0:  		/* lwz R30, <#[R14]> */
		/* 82155144h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R14 + 0x00000000) );
		/* 82155144h case    0:*/		return 0x82155148;
		  /* 82155148h */ case    1:  		/* lwz R31, <#[R31]> */
		/* 82155148h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000000) );
		/* 82155148h case    1:*/		return 0x8215514C;
		  /* 8215514Ch */ case    2:  		/* lwz R16, <#[R30]> */
		/* 8215514Ch case    2:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R30 + 0x00000000) );
		/* 8215514Ch case    2:*/		return 0x82155150;
		  /* 82155150h */ case    3:  		/* lwzu R11, <#[R30 + 4]> */
		/* 82155150h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82155150h case    3:*/		return 0x82155154;
		  /* 82155154h */ case    4:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82155154h case    4:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82155154h case    4:*/		return 0x82155158;
		  /* 82155158h */ case    5:  		/* bc 4, CR0_EQ, 8 */
		/* 82155158h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82155160;  }
		/* 82155158h case    5:*/		return 0x8215515C;
		  /* 8215515Ch */ case    6:  		/* bl 1122564 */
		/* 8215515Ch case    6:*/		regs.LR = 0x82155160; return 0x82267260;
		/* 8215515Ch case    6:*/		return 0x82155160;
	}
	return 0x82155160;
} // Block from 82155144h-82155160h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82155160h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155160);
		  /* 82155160h */ case    0:  		/* lwz R22, <#[R30]> */
		/* 82155160h case    0:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R30 + 0x00000000) );
		/* 82155160h case    0:*/		return 0x82155164;
		  /* 82155164h */ case    1:  		/* lwzu R28, <#[R30 + 4]> */
		/* 82155164h case    1:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 82155164h case    1:*/		return 0x82155168;
		  /* 82155168h */ case    2:  		/* mr R11, R22 */
		/* 82155168h case    2:*/		regs.R11 = regs.R22;
		/* 82155168h case    2:*/		return 0x8215516C;
		  /* 8215516Ch */ case    3:  		/* addi R15, R30, 4 */
		/* 8215516Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R30,0x4);
		/* 8215516Ch case    3:*/		return 0x82155170;
		  /* 82155170h */ case    4:  		/* rlwimi R11, R22, 12, 21, 23 */
		/* 82155170h case    4:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R11,regs.R22);
		/* 82155170h case    4:*/		return 0x82155174;
		  /* 82155174h */ case    5:  		/* rlwinm R30, R22, 0, 21, 31 */
		/* 82155174h case    5:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R30,regs.R22);
		/* 82155174h case    5:*/		return 0x82155178;
		  /* 82155178h */ case    6:  		/* rlwinm R29, R11, 24, 27, 31 */
		/* 82155178h case    6:*/		cpu::op::rlwinm<0,24,27,31>(regs,&regs.R29,regs.R11);
		/* 82155178h case    6:*/		return 0x8215517C;
		  /* 8215517Ch */ case    7:  		/* cmplwi CR6, R29, 3 */
		/* 8215517Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000003);
		/* 8215517Ch case    7:*/		return 0x82155180;
		  /* 82155180h */ case    8:  		/* bc 12, CR6_EQ, 8 */
		/* 82155180h case    8:*/		if ( regs.CR[6].eq ) { return 0x82155188;  }
		/* 82155180h case    8:*/		return 0x82155184;
		  /* 82155184h */ case    9:  		/* bl 1122524 */
		/* 82155184h case    9:*/		regs.LR = 0x82155188; return 0x82267260;
		/* 82155184h case    9:*/		return 0x82155188;
	}
	return 0x82155188;
} // Block from 82155160h-82155188h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82155188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155188);
		  /* 82155188h */ case    0:  		/* addi R6, R1, 80 */
		/* 82155188h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82155188h case    0:*/		return 0x8215518C;
		  /* 8215518Ch */ case    1:  		/* mr R5, R19 */
		/* 8215518Ch case    1:*/		regs.R5 = regs.R19;
		/* 8215518Ch case    1:*/		return 0x82155190;
		  /* 82155190h */ case    2:  		/* mr R4, R30 */
		/* 82155190h case    2:*/		regs.R4 = regs.R30;
		/* 82155190h case    2:*/		return 0x82155194;
		  /* 82155194h */ case    3:  		/* mr R3, R29 */
		/* 82155194h case    3:*/		regs.R3 = regs.R29;
		/* 82155194h case    3:*/		return 0x82155198;
		  /* 82155198h */ case    4:  		/* bl -8872 */
		/* 82155198h case    4:*/		regs.LR = 0x8215519C; return 0x82152EF0;
		/* 82155198h case    4:*/		return 0x8215519C;
		  /* 8215519Ch */ case    5:  		/* lwz R23, <#[R1 + 80]> */
		/* 8215519Ch case    5:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000050) );
		/* 8215519Ch case    5:*/		return 0x821551A0;
		  /* 821551A0h */ case    6:  		/* li R11, 80 */
		/* 821551A0h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x50);
		/* 821551A0h case    6:*/		return 0x821551A4;
		  /* 821551A4h */ case    7:  		/* rlwinm R10, R3, 0, 16, 31 */
		/* 821551A4h case    7:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R3);
		/* 821551A4h case    7:*/		return 0x821551A8;
		  /* 821551A8h */ case    8:  		/* rlwinm R9, R23, 16, 10, 15 */
		/* 821551A8h case    8:*/		cpu::op::rlwinm<0,16,10,15>(regs,&regs.R9,regs.R23);
		/* 821551A8h case    8:*/		return 0x821551AC;
		  /* 821551ACh */ case    9:  		/* rlwimi R11, R30, 16, 8, 15 */
		/* 821551ACh case    9:*/		cpu::op::rlwimi<0,16,8,15>(regs,&regs.R11,regs.R30);
		/* 821551ACh case    9:*/		return 0x821551B0;
		  /* 821551B0h */ case   10:  		/* or R20, R9, R10 */
		/* 821551B0h case   10:*/		cpu::op::or<0>(regs,&regs.R20,regs.R9,regs.R10);
		/* 821551B0h case   10:*/		return 0x821551B4;
		  /* 821551B4h */ case   11:  		/* lis R8, 64 */
		/* 821551B4h case   11:*/		cpu::op::lis<0>(regs,&regs.R8,0x40);
		/* 821551B4h case   11:*/		return 0x821551B8;
		  /* 821551B8h */ case   12:  		/* stw R11, <#[R31]> */
		/* 821551B8h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821551B8h case   12:*/		return 0x821551BC;
		  /* 821551BCh */ case   13:  		/* stwu R20, <#[R31 + 4]> */
		/* 821551BCh case   13:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821551BCh case   13:*/		return 0x821551C0;
		  /* 821551C0h */ case   14:  		/* lis R11, 128 */
		/* 821551C0h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0x80);
		/* 821551C0h case   14:*/		return 0x821551C4;
		  /* 821551C4h */ case   15:  		/* rlwimi R8, R23, 16, 10, 15 */
		/* 821551C4h case   15:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R8,regs.R23);
		/* 821551C4h case   15:*/		return 0x821551C8;
		  /* 821551C8h */ case   16:  		/* li R24, 33 */
		/* 821551C8h case   16:*/		cpu::op::li<0>(regs,&regs.R24,0x21);
		/* 821551C8h case   16:*/		return 0x821551CC;
		  /* 821551CCh */ case   17:  		/* or R21, R8, R10 */
		/* 821551CCh case   17:*/		cpu::op::or<0>(regs,&regs.R21,regs.R8,regs.R10);
		/* 821551CCh case   17:*/		return 0x821551D0;
		  /* 821551D0h */ case   18:  		/* ori R10, R11, 12816 */
		/* 821551D0h case   18:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R11,0x3210);
		/* 821551D0h case   18:*/		return 0x821551D4;
		  /* 821551D4h */ case   19:  		/* stwu R21, <#[R31 + 4]> */
		/* 821551D4h case   19:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821551D4h case   19:*/		return 0x821551D8;
		  /* 821551D8h */ case   20:  		/* li R9, 1 */
		/* 821551D8h case   20:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821551D8h case   20:*/		return 0x821551DC;
		  /* 821551DCh */ case   21:  		/* rlwinm R11, R28, 0, 8, 15 */
		/* 821551DCh case   21:*/		cpu::op::rlwinm<0,0,8,15>(regs,&regs.R11,regs.R28);
		/* 821551DCh case   21:*/		return 0x821551E0;
		  /* 821551E0h */ case   22:  		/* lis R8, 228 */
		/* 821551E0h case   22:*/		cpu::op::lis<0>(regs,&regs.R8,0xE4);
		/* 821551E0h case   22:*/		return 0x821551E4;
		  /* 821551E4h */ case   23:  		/* cmplw CR6, R11, R8 */
		/* 821551E4h case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 821551E4h case   23:*/		return 0x821551E8;
		  /* 821551E8h */ case   24:  		/* stwu R10, <#[R31 + 4]> */
		/* 821551E8h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821551E8h case   24:*/		return 0x821551EC;
		  /* 821551ECh */ case   25:  		/* stwu R24, <#[R31 + 4]> */
		/* 821551ECh case   25:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821551ECh case   25:*/		return 0x821551F0;
		  /* 821551F0h */ case   26:  		/* stwu R21, <#[R31 + 4]> */
		/* 821551F0h case   26:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821551F0h case   26:*/		return 0x821551F4;
		  /* 821551F4h */ case   27:  		/* stwu R9, <#[R31 + 4]> */
		/* 821551F4h case   27:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821551F4h case   27:*/		return 0x821551F8;
		  /* 821551F8h */ case   28:  		/* addi R31, R31, 4 */
		/* 821551F8h case   28:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821551F8h case   28:*/		return 0x821551FC;
		  /* 821551FCh */ case   29:  		/* bc 12, CR6_EQ, 80 */
		/* 821551FCh case   29:*/		if ( regs.CR[6].eq ) { return 0x8215524C;  }
		/* 821551FCh case   29:*/		return 0x82155200;
		  /* 82155200h */ case   30:  		/* rlwinm R10, R11, 14, 18, 31 */
		/* 82155200h case   30:*/		cpu::op::rlwinm<0,14,18,31>(regs,&regs.R10,regs.R11);
		/* 82155200h case   30:*/		return 0x82155204;
		  /* 82155204h */ case   31:  		/* lis R9, -32217 */
		/* 82155204h case   31:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8227);
		/* 82155204h case   31:*/		return 0x82155208;
		  /* 82155208h */ case   32:  		/* rlwinm R8, R10, 30, 2, 31 */
		/* 82155208h case   32:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R8,regs.R10);
		/* 82155208h case   32:*/		return 0x8215520C;
		  /* 8215520Ch */ case   33:  		/* addi R9, R9, 19772 */
		/* 8215520Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4D3C);
		/* 8215520Ch case   33:*/		return 0x82155210;
		  /* 82155210h */ case   34:  		/* rlwinm R10, R10, 2, 28, 29 */
		/* 82155210h case   34:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R10,regs.R10);
		/* 82155210h case   34:*/		return 0x82155214;
		  /* 82155214h */ case   35:  		/* rlwinm R11, R11, 18, 28, 29 */
		/* 82155214h case   35:*/		cpu::op::rlwinm<0,18,28,29>(regs,&regs.R11,regs.R11);
		/* 82155214h case   35:*/		return 0x82155218;
		  /* 82155218h */ case   36:  		/* rlwinm R7, R8, 2, 28, 29 */
		/* 82155218h case   36:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R7,regs.R8);
		/* 82155218h case   36:*/		return 0x8215521C;
		  /* 8215521Ch */ case   37:  		/* rlwinm R8, R8, 0, 28, 29 */
		/* 8215521Ch case   37:*/		cpu::op::rlwinm<0,0,28,29>(regs,&regs.R8,regs.R8);
		/* 8215521Ch case   37:*/		return 0x82155220;
		  /* 82155220h */ case   38:  		/* lwzx R10, <#[R10 + R9]> */
		/* 82155220h case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82155220h case   38:*/		return 0x82155224;
		  /* 82155224h */ case   39:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82155224h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82155224h case   39:*/		return 0x82155228;
		  /* 82155228h */ case   40:  		/* rlwinm R10, R10, 4, 0, 27 */
		/* 82155228h case   40:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R10,regs.R10);
		/* 82155228h case   40:*/		return 0x8215522C;
		  /* 8215522Ch */ case   41:  		/* lwzx R7, <#[R7 + R9]> */
		/* 8215522Ch case   41:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 8215522Ch case   41:*/		return 0x82155230;
		  /* 82155230h */ case   42:  		/* lwzx R9, <#[R8 + R9]> */
		/* 82155230h case   42:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 82155230h case   42:*/		return 0x82155234;
		  /* 82155234h */ case   43:  		/* or R11, R10, R11 */
		/* 82155234h case   43:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82155234h case   43:*/		return 0x82155238;
		  /* 82155238h */ case   44:  		/* rlwinm R10, R7, 8, 0, 23 */
		/* 82155238h case   44:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R10,regs.R7);
		/* 82155238h case   44:*/		return 0x8215523C;
		  /* 8215523Ch */ case   45:  		/* rlwinm R9, R9, 12, 0, 19 */
		/* 8215523Ch case   45:*/		cpu::op::rlwinm<0,12,0,19>(regs,&regs.R9,regs.R9);
		/* 8215523Ch case   45:*/		return 0x82155240;
		  /* 82155240h */ case   46:  		/* or R11, R10, R11 */
		/* 82155240h case   46:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82155240h case   46:*/		return 0x82155244;
		  /* 82155244h */ case   47:  		/* or R25, R9, R11 */
		/* 82155244h case   47:*/		cpu::op::or<0>(regs,&regs.R25,regs.R9,regs.R11);
		/* 82155244h case   47:*/		return 0x82155248;
		  /* 82155248h */ case   48:  		/* b 8 */
		/* 82155248h case   48:*/		return 0x82155250;
		/* 82155248h case   48:*/		return 0x8215524C;
	}
	return 0x8215524C;
} // Block from 82155188h-8215524Ch (49 instructions)

//////////////////////////////////////////////////////
// Block at 8215524Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215524C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215524C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215524C);
		  /* 8215524Ch */ case    0:  		/* li R25, 12816 */
		/* 8215524Ch case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x3210);
		/* 8215524Ch case    0:*/		return 0x82155250;
	}
	return 0x82155250;
} // Block from 8215524Ch-82155250h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82155250h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155250);
		  /* 82155250h */ case    0:  		/* rlwinm R3, R28, 0, 4, 7 */
		/* 82155250h case    0:*/		cpu::op::rlwinm<0,0,4,7>(regs,&regs.R3,regs.R28);
		/* 82155250h case    0:*/		return 0x82155254;
		  /* 82155254h */ case    1:  		/* bl -9396 */
		/* 82155254h case    1:*/		regs.LR = 0x82155258; return 0x82152DA0;
		/* 82155254h case    1:*/		return 0x82155258;
		  /* 82155258h */ case    2:  		/* mr R27, R3 */
		/* 82155258h case    2:*/		regs.R27 = regs.R3;
		/* 82155258h case    2:*/		return 0x8215525C;
		  /* 8215525Ch */ case    3:  		/* addi R5, R1, 80 */
		/* 8215525Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8215525Ch case    3:*/		return 0x82155260;
		  /* 82155260h */ case    4:  		/* mr R4, R19 */
		/* 82155260h case    4:*/		regs.R4 = regs.R19;
		/* 82155260h case    4:*/		return 0x82155264;
		  /* 82155264h */ case    5:  		/* mr R3, R28 */
		/* 82155264h case    5:*/		regs.R3 = regs.R28;
		/* 82155264h case    5:*/		return 0x82155268;
		  /* 82155268h */ case    6:  		/* bl -7752 */
		/* 82155268h case    6:*/		regs.LR = 0x8215526C; return 0x82153420;
		/* 82155268h case    6:*/		return 0x8215526C;
		  /* 8215526Ch */ case    7:  		/* cmplwi CR6, R27, 0 */
		/* 8215526Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8215526Ch case    7:*/		return 0x82155270;
		  /* 82155270h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 82155270h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82155294;  }
		/* 82155270h case    8:*/		return 0x82155274;
		  /* 82155274h */ case    9:  		/* cmplwi CR6, R25, 12816 */
		/* 82155274h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00003210);
		/* 82155274h case    9:*/		return 0x82155278;
		  /* 82155278h */ case   10:  		/* bc 4, CR6_EQ, 28 */
		/* 82155278h case   10:*/		if ( !regs.CR[6].eq ) { return 0x82155294;  }
		/* 82155278h case   10:*/		return 0x8215527C;
		  /* 8215527Ch */ case   11:  		/* lwz R11, <#[R1 + 80]> */
		/* 8215527Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8215527Ch case   11:*/		return 0x82155280;
		  /* 82155280h */ case   12:  		/* rlwinm R29, R3, 0, 16, 31 */
		/* 82155280h case   12:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R29,regs.R3);
		/* 82155280h case   12:*/		return 0x82155284;
		  /* 82155284h */ case   13:  		/* rlwinm R10, R11, 16, 10, 15 */
		/* 82155284h case   13:*/		cpu::op::rlwinm<0,16,10,15>(regs,&regs.R10,regs.R11);
		/* 82155284h case   13:*/		return 0x82155288;
		  /* 82155288h */ case   14:  		/* or R10, R10, R29 */
		/* 82155288h case   14:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R29);
		/* 82155288h case   14:*/		return 0x8215528C;
		  /* 8215528Ch */ case   15:  		/* stw R10, <#[R31]> */
		/* 8215528Ch case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8215528Ch case   15:*/		return 0x82155290;
		  /* 82155290h */ case   16:  		/* b 36 */
		/* 82155290h case   16:*/		return 0x821552B4;
		/* 82155290h case   16:*/		return 0x82155294;
	}
	return 0x82155294;
} // Block from 82155250h-82155294h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82155294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155294);
		  /* 82155294h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 82155294h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82155294h case    0:*/		return 0x82155298;
		  /* 82155298h */ case    1:  		/* lis R10, 64 */
		/* 82155298h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x40);
		/* 82155298h case    1:*/		return 0x8215529C;
		  /* 8215529Ch */ case    2:  		/* rlwinm R29, R3, 0, 16, 31 */
		/* 8215529Ch case    2:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R29,regs.R3);
		/* 8215529Ch case    2:*/		return 0x821552A0;
	}
	return 0x821552A0;
} // Block from 82155294h-821552A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821552A0h
// Function '?TEXKILLConvertToILFunc@XGRAPHICS@@YAXPAPAKKW4ILOpCode@1@PAU_R400IL_RECORDED_INFO@1@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821552A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821552A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821552A0);
		  /* 821552A0h */ case    0:  		/* rlwimi R10, R11, 16, 10, 15 */
		/* 821552A0h case    0:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R10,regs.R11);
		/* 821552A0h case    0:*/		return 0x821552A4;
		  /* 821552A4h */ case    1:  		/* or R9, R27, R25 */
		/* 821552A4h case    1:*/		cpu::op::or<0>(regs,&regs.R9,regs.R27,regs.R25);
		/* 821552A4h case    1:*/		return 0x821552A8;
		  /* 821552A8h */ case    2:  		/* or R10, R10, R29 */
		/* 821552A8h case    2:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R29);
		/* 821552A8h case    2:*/		return 0x821552AC;
		  /* 821552ACh */ case    3:  		/* stw R10, <#[R31]> */
		/* 821552ACh case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821552ACh case    3:*/		return 0x821552B0;
		  /* 821552B0h */ case    4:  		/* stwu R9, <#[R31 + 4]> */
		/* 821552B0h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821552B0h case    4:*/		return 0x821552B4;
	}
	return 0x821552B4;
} // Block from 821552A0h-821552B4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821552B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821552B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821552B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821552B4);
		  /* 821552B4h */ case    0:  		/* addi R10, R30, 8 */
		/* 821552B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x8);
		/* 821552B4h case    0:*/		return 0x821552B8;
		  /* 821552B8h */ case    1:  		/* rlwinm R26, R11, 0, 26, 31 */
		/* 821552B8h case    1:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R26,regs.R11);
		/* 821552B8h case    1:*/		return 0x821552BC;
		  /* 821552BCh */ case    2:  		/* addi R11, R31, 4 */
		/* 821552BCh case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 821552BCh case    2:*/		return 0x821552C0;
		  /* 821552C0h */ case    3:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 821552C0h case    3:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 821552C0h case    3:*/		return 0x821552C4;
		  /* 821552C4h */ case    4:  		/* rlwinm R9, R30, 0, 16, 31 */
		/* 821552C4h case    4:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R30);
		/* 821552C4h case    4:*/		return 0x821552C8;
		  /* 821552C8h */ case    5:  		/* oris R8, R10, 1 */
		/* 821552C8h case    5:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821552C8h case    5:*/		return 0x821552CC;
		  /* 821552CCh */ case    6:  		/* oris R9, R9, 81 */
		/* 821552CCh case    6:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x51);
		/* 821552CCh case    6:*/		return 0x821552D0;
		  /* 821552D0h */ case    7:  		/* stw R8, <#[R11]> */
		/* 821552D0h case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821552D0h case    7:*/		return 0x821552D4;
		  /* 821552D4h */ case    8:  		/* li R7, 4 */
		/* 821552D4h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x4);
		/* 821552D4h case    8:*/		return 0x821552D8;
		  /* 821552D8h */ case    9:  		/* stwu R9, <#[R11 + 4]> */
		/* 821552D8h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821552D8h case    9:*/		return 0x821552DC;
		  /* 821552DCh */ case   10:  		/* cmplwi CR6, R27, 0 */
		/* 821552DCh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821552DCh case   10:*/		return 0x821552E0;
		  /* 821552E0h */ case   11:  		/* stwu R17, <#[R11 + 4]> */
		/* 821552E0h case   11:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821552E0h case   11:*/		return 0x821552E4;
		  /* 821552E4h */ case   12:  		/* stwu R24, <#[R11 + 4]> */
		/* 821552E4h case   12:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821552E4h case   12:*/		return 0x821552E8;
		  /* 821552E8h */ case   13:  		/* stwu R21, <#[R11 + 4]> */
		/* 821552E8h case   13:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821552E8h case   13:*/		return 0x821552EC;
		  /* 821552ECh */ case   14:  		/* stwu R7, <#[R11 + 4]> */
		/* 821552ECh case   14:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821552ECh case   14:*/		return 0x821552F0;
		  /* 821552F0h */ case   15:  		/* addi R11, R11, 4 */
		/* 821552F0h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821552F0h case   15:*/		return 0x821552F4;
		  /* 821552F4h */ case   16:  		/* bc 4, CR6_EQ, 28 */
		/* 821552F4h case   16:*/		if ( !regs.CR[6].eq ) { return 0x82155310;  }
		/* 821552F4h case   16:*/		return 0x821552F8;
		  /* 821552F8h */ case   17:  		/* cmplwi CR6, R25, 12816 */
		/* 821552F8h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00003210);
		/* 821552F8h case   17:*/		return 0x821552FC;
		  /* 821552FCh */ case   18:  		/* bc 4, CR6_EQ, 20 */
		/* 821552FCh case   18:*/		if ( !regs.CR[6].eq ) { return 0x82155310;  }
		/* 821552FCh case   18:*/		return 0x82155300;
		  /* 82155300h */ case   19:  		/* rlwinm R8, R26, 16, 0, 15 */
		/* 82155300h case   19:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R8,regs.R26);
		/* 82155300h case   19:*/		return 0x82155304;
		  /* 82155304h */ case   20:  		/* or R8, R8, R29 */
		/* 82155304h case   20:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R29);
		/* 82155304h case   20:*/		return 0x82155308;
		  /* 82155308h */ case   21:  		/* stw R8, <#[R11]> */
		/* 82155308h case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82155308h case   21:*/		return 0x8215530C;
		  /* 8215530Ch */ case   22:  		/* b 28 */
		/* 8215530Ch case   22:*/		return 0x82155328;
		/* 8215530Ch case   22:*/		return 0x82155310;
	}
	return 0x82155310;
} // Block from 821552B4h-82155310h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82155310h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155310);
		  /* 82155310h */ case    0:  		/* rlwinm R8, R26, 16, 0, 15 */
		/* 82155310h case    0:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R8,regs.R26);
		/* 82155310h case    0:*/		return 0x82155314;
		  /* 82155314h */ case    1:  		/* or R7, R27, R25 */
		/* 82155314h case    1:*/		cpu::op::or<0>(regs,&regs.R7,regs.R27,regs.R25);
		/* 82155314h case    1:*/		return 0x82155318;
		  /* 82155318h */ case    2:  		/* oris R8, R8, 64 */
		/* 82155318h case    2:*/		cpu::op::oris<0>(regs,&regs.R8,regs.R8,0x40);
		/* 82155318h case    2:*/		return 0x8215531C;
		  /* 8215531Ch */ case    3:  		/* or R8, R8, R29 */
		/* 8215531Ch case    3:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R29);
		/* 8215531Ch case    3:*/		return 0x82155320;
		  /* 82155320h */ case    4:  		/* stw R8, <#[R11]> */
		/* 82155320h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82155320h case    4:*/		return 0x82155324;
		  /* 82155324h */ case    5:  		/* stwu R7, <#[R11 + 4]> */
		/* 82155324h case    5:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82155324h case    5:*/		return 0x82155328;
	}
	return 0x82155328;
} // Block from 82155310h-82155328h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82155328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155328);
		  /* 82155328h */ case    0:  		/* addi R11, R11, 4 */
		/* 82155328h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82155328h case    0:*/		return 0x8215532C;
		  /* 8215532Ch */ case    1:  		/* oris R10, R10, 65 */
		/* 8215532Ch case    1:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x41);
		/* 8215532Ch case    1:*/		return 0x82155330;
		  /* 82155330h */ case    2:  		/* li R8, 50 */
		/* 82155330h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x32);
		/* 82155330h case    2:*/		return 0x82155334;
		  /* 82155334h */ case    3:  		/* li R28, 4369 */
		/* 82155334h case    3:*/		cpu::op::li<0>(regs,&regs.R28,0x1111);
		/* 82155334h case    3:*/		return 0x82155338;
		  /* 82155338h */ case    4:  		/* cmpwi CR6, R23, 4 */
		/* 82155338h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R23,0x00000004);
		/* 82155338h case    4:*/		return 0x8215533C;
		  /* 8215533Ch */ case    5:  		/* stw R10, <#[R11]> */
		/* 8215533Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8215533Ch case    5:*/		return 0x82155340;
		  /* 82155340h */ case    6:  		/* mr R10, R30 */
		/* 82155340h case    6:*/		regs.R10 = regs.R30;
		/* 82155340h case    6:*/		return 0x82155344;
		  /* 82155344h */ case    7:  		/* stwu R8, <#[R11 + 4]> */
		/* 82155344h case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82155344h case    7:*/		return 0x82155348;
		  /* 82155348h */ case    8:  		/* li R8, 93 */
		/* 82155348h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x5D);
		/* 82155348h case    8:*/		return 0x8215534C;
		  /* 8215534Ch */ case    9:  		/* rlwimi R10, R18, 8, 23, 23 */
		/* 8215534Ch case    9:*/		cpu::op::rlwimi<0,8,23,23>(regs,&regs.R10,regs.R18);
		/* 8215534Ch case    9:*/		return 0x82155350;
		  /* 82155350h */ case   10:  		/* rlwinm R10, R10, 0, 23, 31 */
		/* 82155350h case   10:*/		cpu::op::rlwinm<0,0,23,31>(regs,&regs.R10,regs.R10);
		/* 82155350h case   10:*/		return 0x82155354;
		  /* 82155354h */ case   11:  		/* stwu R9, <#[R11 + 4]> */
		/* 82155354h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82155354h case   11:*/		return 0x82155358;
		  /* 82155358h */ case   12:  		/* rlwimi R8, R10, 16, 0, 15 */
		/* 82155358h case   12:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R8,regs.R10);
		/* 82155358h case   12:*/		return 0x8215535C;
		  /* 8215535Ch */ case   13:  		/* stwu R28, <#[R11 + 4]> */
		/* 8215535Ch case   13:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 8215535Ch case   13:*/		return 0x82155360;
		  /* 82155360h */ case   14:  		/* stwu R8, <#[R11 + 4]> */
		/* 82155360h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82155360h case   14:*/		return 0x82155364;
		  /* 82155364h */ case   15:  		/* addi R31, R11, 4 */
		/* 82155364h case   15:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 82155364h case   15:*/		return 0x82155368;
		  /* 82155368h */ case   16:  		/* stw R31, <#[R1 + 80]> */
		/* 82155368h case   16:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 82155368h case   16:*/		return 0x8215536C;
		  /* 8215536Ch */ case   17:  		/* bc 12, CR6_EQ, 8 */
		/* 8215536Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x82155374;  }
		/* 8215536Ch case   17:*/		return 0x82155370;
		  /* 82155370h */ case   18:  		/* bl 1122032 */
		/* 82155370h case   18:*/		regs.LR = 0x82155374; return 0x82267260;
		/* 82155370h case   18:*/		return 0x82155374;
	}
	return 0x82155374;
} // Block from 82155328h-82155374h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82155374h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155374( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155374) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155374);
		  /* 82155374h */ case    0:  		/* cmplwi CR6, R16, 67 */
		/* 82155374h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000043);
		/* 82155374h case    0:*/		return 0x82155378;
		  /* 82155378h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 82155378h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82155398;  }
		/* 82155378h case    1:*/		return 0x8215537C;
		  /* 8215537Ch */ case    2:  		/* addi R5, R1, 80 */
		/* 8215537Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8215537Ch case    2:*/		return 0x82155380;
		  /* 82155380h */ case    3:  		/* mr R4, R19 */
		/* 82155380h case    3:*/		regs.R4 = regs.R19;
		/* 82155380h case    3:*/		return 0x82155384;
		  /* 82155384h */ case    4:  		/* mr R3, R22 */
		/* 82155384h case    4:*/		regs.R3 = regs.R22;
		/* 82155384h case    4:*/		return 0x82155388;
		  /* 82155388h */ case    5:  		/* bl -7656 */
		/* 82155388h case    5:*/		regs.LR = 0x8215538C; return 0x821535A0;
		/* 82155388h case    5:*/		return 0x8215538C;
		  /* 8215538Ch */ case    6:  		/* lwz R11, <#[R1 + 80]> */
		/* 8215538Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8215538Ch case    6:*/		return 0x82155390;
		  /* 82155390h */ case    7:  		/* stw R20, <#[R11]> */
		/* 82155390h case    7:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R11 + 0x00000000) );
		/* 82155390h case    7:*/		return 0x82155394;
		  /* 82155394h */ case    8:  		/* b 316 */
		/* 82155394h case    8:*/		return 0x821554D0;
		/* 82155394h case    8:*/		return 0x82155398;
	}
	return 0x82155398;
} // Block from 82155374h-82155398h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82155398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155398);
		  /* 82155398h */ case    0:  		/* cmplwi CR6, R16, 68 */
		/* 82155398h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000044);
		/* 82155398h case    0:*/		return 0x8215539C;
		  /* 8215539Ch */ case    1:  		/* bc 4, CR6_EQ, 312 */
		/* 8215539Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821554D4;  }
		/* 8215539Ch case    1:*/		return 0x821553A0;
		  /* 821553A0h */ case    2:  		/* stw R20, <#[R31]> */
		/* 821553A0h case    2:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R31 + 0x00000000) );
		/* 821553A0h case    2:*/		return 0x821553A4;
		  /* 821553A4h */ case    3:  		/* li R11, 64 */
		/* 821553A4h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x40);
		/* 821553A4h case    3:*/		return 0x821553A8;
		  /* 821553A8h */ case    4:  		/* stwu R20, <#[R31 + 4]> */
		/* 821553A8h case    4:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821553A8h case    4:*/		return 0x821553AC;
		  /* 821553ACh */ case    5:  		/* lis R10, 68 */
		/* 821553ACh case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0x44);
		/* 821553ACh case    5:*/		return 0x821553B0;
		  /* 821553B0h */ case    6:  		/* rlwinm R9, R26, 16, 0, 15 */
		/* 821553B0h case    6:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R9,regs.R26);
		/* 821553B0h case    6:*/		return 0x821553B4;
		  /* 821553B4h */ case    7:  		/* ori R7, R10, 15 */
		/* 821553B4h case    7:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R10,0xF);
		/* 821553B4h case    7:*/		return 0x821553B8;
		  /* 821553B8h */ case    8:  		/* li R10, 272 */
		/* 821553B8h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x110);
		/* 821553B8h case    8:*/		return 0x821553BC;
		  /* 821553BCh */ case    9:  		/* oris R9, R9, 64 */
		/* 821553BCh case    9:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x40);
		/* 821553BCh case    9:*/		return 0x821553C0;
		  /* 821553C0h */ case   10:  		/* stwu R11, <#[R31 + 4]> */
		/* 821553C0h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821553C0h case   10:*/		return 0x821553C4;
		  /* 821553C4h */ case   11:  		/* addi R11, R30, 16 */
		/* 821553C4h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x10);
		/* 821553C4h case   11:*/		return 0x821553C8;
		  /* 821553C8h */ case   12:  		/* or R9, R9, R29 */
		/* 821553C8h case   12:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R29);
		/* 821553C8h case   12:*/		return 0x821553CC;
		  /* 821553CCh */ case   13:  		/* or R6, R27, R25 */
		/* 821553CCh case   13:*/		cpu::op::or<0>(regs,&regs.R6,regs.R27,regs.R25);
		/* 821553CCh case   13:*/		return 0x821553D0;
		  /* 821553D0h */ case   14:  		/* rlwinm R11, R11, 0, 16, 31 */
		/* 821553D0h case   14:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R11,regs.R11);
		/* 821553D0h case   14:*/		return 0x821553D4;
		  /* 821553D4h */ case   15:  		/* li R5, 73 */
		/* 821553D4h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x49);
		/* 821553D4h case   15:*/		return 0x821553D8;
		  /* 821553D8h */ case   16:  		/* stwu R7, <#[R31 + 4]> */
		/* 821553D8h case   16:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821553D8h case   16:*/		return 0x821553DC;
		  /* 821553DCh */ case   17:  		/* oris R11, R11, 65 */
		/* 821553DCh case   17:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x41);
		/* 821553DCh case   17:*/		return 0x821553E0;
		  /* 821553E0h */ case   18:  		/* rlwinm. R4, R22, 0, 8, 11 */
		/* 821553E0h case   18:*/		cpu::op::rlwinm<1,0,8,11>(regs,&regs.R4,regs.R22);
		/* 821553E0h case   18:*/		return 0x821553E4;
		  /* 821553E4h */ case   19:  		/* stwu R10, <#[R31 + 4]> */
		/* 821553E4h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821553E4h case   19:*/		return 0x821553E8;
		  /* 821553E8h */ case   20:  		/* mr R8, R17 */
		/* 821553E8h case   20:*/		regs.R8 = regs.R17;
		/* 821553E8h case   20:*/		return 0x821553EC;
		  /* 821553ECh */ case   21:  		/* stwu R9, <#[R31 + 4]> */
		/* 821553ECh case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821553ECh case   21:*/		return 0x821553F0;
		  /* 821553F0h */ case   22:  		/* stwu R6, <#[R31 + 4]> */
		/* 821553F0h case   22:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821553F0h case   22:*/		return 0x821553F4;
		  /* 821553F4h */ case   23:  		/* stwu R11, <#[R31 + 4]> */
		/* 821553F4h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821553F4h case   23:*/		return 0x821553F8;
		  /* 821553F8h */ case   24:  		/* stwu R17, <#[R31 + 4]> */
		/* 821553F8h case   24:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821553F8h case   24:*/		return 0x821553FC;
		  /* 821553FCh */ case   25:  		/* stwu R11, <#[R31 + 4]> */
		/* 821553FCh case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821553FCh case   25:*/		return 0x82155400;
		  /* 82155400h */ case   26:  		/* stwu R28, <#[R31 + 4]> */
		/* 82155400h case   26:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82155400h case   26:*/		return 0x82155404;
		  /* 82155404h */ case   27:  		/* stwu R5, <#[R31 + 4]> */
		/* 82155404h case   27:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82155404h case   27:*/		return 0x82155408;
		  /* 82155408h */ case   28:  		/* addi R11, R31, 4 */
		/* 82155408h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 82155408h case   28:*/		return 0x8215540C;
		  /* 8215540Ch */ case   29:  		/* bc 12, CR0_EQ, 8 */
		/* 8215540Ch case   29:*/		if ( regs.CR[0].eq ) { return 0x82155414;  }
		/* 8215540Ch case   29:*/		return 0x82155410;
		  /* 82155410h */ case   30:  		/* li R8, 256 */
		/* 82155410h case   30:*/		cpu::op::li<0>(regs,&regs.R8,0x100);
		/* 82155410h case   30:*/		return 0x82155414;
	}
	return 0x82155414;
} // Block from 82155398h-82155414h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82155414h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155414( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155414) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155414);
		  /* 82155414h */ case    0:  		/* rlwinm. R10, R22, 8, 28, 31 */
		/* 82155414h case    0:*/		cpu::op::rlwinm<1,8,28,31>(regs,&regs.R10,regs.R22);
		/* 82155414h case    0:*/		return 0x82155418;
		  /* 82155418h */ case    1:  		/* mr R9, R17 */
		/* 82155418h case    1:*/		regs.R9 = regs.R17;
		/* 82155418h case    1:*/		return 0x8215541C;
		  /* 8215541Ch */ case    2:  		/* bc 12, CR0_EQ, 52 */
		/* 8215541Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x82155450;  }
		/* 8215541Ch case    2:*/		return 0x82155420;
		  /* 82155420h */ case    3:  		/* rlwinm. R9, R10, 0, 28, 28 */
		/* 82155420h case    3:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R9,regs.R10);
		/* 82155420h case    3:*/		return 0x82155424;
		  /* 82155424h */ case    4:  		/* bc 12, CR0_EQ, 24 */
		/* 82155424h case    4:*/		if ( regs.CR[0].eq ) { return 0x8215543C;  }
		/* 82155424h case    4:*/		return 0x82155428;
		  /* 82155428h */ case    5:  		/* nor R10, R10, R10 */
		/* 82155428h case    5:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 82155428h case    5:*/		return 0x8215542C;
		  /* 8215542Ch */ case    6:  		/* lis R9, -32217 */
		/* 8215542Ch case    6:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8227);
		/* 8215542Ch case    6:*/		return 0x82155430;
		  /* 82155430h */ case    7:  		/* addi R10, R10, 1 */
		/* 82155430h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82155430h case    7:*/		return 0x82155434;
		  /* 82155434h */ case    8:  		/* addi R9, R9, 19756 */
		/* 82155434h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4D2C);
		/* 82155434h case    8:*/		return 0x82155438;
		  /* 82155438h */ case    9:  		/* b 12 */
		/* 82155438h case    9:*/		return 0x82155444;
		/* 82155438h case    9:*/		return 0x8215543C;
	}
	return 0x8215543C;
} // Block from 82155414h-8215543Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8215543Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215543C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215543C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215543C);
		  /* 8215543Ch */ case    0:  		/* lis R9, -32217 */
		/* 8215543Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8227);
		/* 8215543Ch case    0:*/		return 0x82155440;
		  /* 82155440h */ case    1:  		/* addi R9, R9, 19740 */
		/* 82155440h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4D1C);
		/* 82155440h case    1:*/		return 0x82155444;
	}
	return 0x82155444;
} // Block from 8215543Ch-82155444h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82155444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155444);
		  /* 82155444h */ case    0:  		/* rlwinm R10, R10, 2, 28, 29 */
		/* 82155444h case    0:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R10,regs.R10);
		/* 82155444h case    0:*/		return 0x82155448;
		  /* 82155448h */ case    1:  		/* lwzx R10, <#[R10 + R9]> */
		/* 82155448h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82155448h case    1:*/		return 0x8215544C;
		  /* 8215544Ch */ case    2:  		/* rlwinm R9, R10, 9, 0, 22 */
		/* 8215544Ch case    2:*/		cpu::op::rlwinm<0,9,0,22>(regs,&regs.R9,regs.R10);
		/* 8215544Ch case    2:*/		return 0x82155450;
	}
	return 0x82155450;
} // Block from 82155444h-82155450h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82155450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155450);
		  /* 82155450h */ case    0:  		/* or. R8, R9, R8 */
		/* 82155450h case    0:*/		cpu::op::or<1>(regs,&regs.R8,regs.R9,regs.R8);
		/* 82155450h case    0:*/		return 0x82155454;
		  /* 82155454h */ case    1:  		/* bc 4, CR0_EQ, 32 */
		/* 82155454h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82155474;  }
		/* 82155454h case    1:*/		return 0x82155458;
		  /* 82155458h */ case    2:  		/* rlwinm R10, R22, 0, 12, 15 */
		/* 82155458h case    2:*/		cpu::op::rlwinm<0,0,12,15>(regs,&regs.R10,regs.R22);
		/* 82155458h case    2:*/		return 0x8215545C;
		  /* 8215545Ch */ case    3:  		/* lis R9, 15 */
		/* 8215545Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0xF);
		/* 8215545Ch case    3:*/		return 0x82155460;
		  /* 82155460h */ case    4:  		/* cmplw CR6, R10, R9 */
		/* 82155460h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82155460h case    4:*/		return 0x82155464;
		  /* 82155464h */ case    5:  		/* bc 4, CR6_EQ, 16 */
		/* 82155464h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82155474;  }
		/* 82155464h case    5:*/		return 0x82155468;
		  /* 82155468h */ case    6:  		/* stw R20, <#[R11]> */
		/* 82155468h case    6:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R11 + 0x00000000) );
		/* 82155468h case    6:*/		return 0x8215546C;
		  /* 8215546Ch */ case    7:  		/* addi R11, R11, 4 */
		/* 8215546Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8215546Ch case    7:*/		return 0x82155470;
		  /* 82155470h */ case    8:  		/* b 80 */
		/* 82155470h case    8:*/		return 0x821554C0;
		/* 82155470h case    8:*/		return 0x82155474;
	}
	return 0x82155474;
} // Block from 82155450h-82155474h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82155474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155474);
		  /* 82155474h */ case    0:  		/* stw R21, <#[R11]> */
		/* 82155474h case    0:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x00000000) );
		/* 82155474h case    0:*/		return 0x82155478;
		  /* 82155478h */ case    1:  		/* addi R10, R11, 4 */
		/* 82155478h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82155478h case    1:*/		return 0x8215547C;
		  /* 8215547Ch */ case    2:  		/* rlwinm. R6, R22, 0, 15, 15 */
		/* 8215547Ch case    2:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R6,regs.R22);
		/* 8215547Ch case    2:*/		return 0x82155480;
		  /* 82155480h */ case    3:  		/* rlwinm R9, R22, 0, 12, 15 */
		/* 82155480h case    3:*/		cpu::op::rlwinm<0,0,12,15>(regs,&regs.R9,regs.R22);
		/* 82155480h case    3:*/		return 0x82155484;
		  /* 82155484h */ case    4:  		/* mr R11, R17 */
		/* 82155484h case    4:*/		regs.R11 = regs.R17;
		/* 82155484h case    4:*/		return 0x82155488;
		  /* 82155488h */ case    5:  		/* bc 12, CR0_EQ, 8 */
		/* 82155488h case    5:*/		if ( regs.CR[0].eq ) { return 0x82155490;  }
		/* 82155488h case    5:*/		return 0x8215548C;
		  /* 8215548Ch */ case    6:  		/* li R11, 1 */
		/* 8215548Ch case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8215548Ch case    6:*/		return 0x82155490;
	}
	return 0x82155490;
} // Block from 82155474h-82155490h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82155490h
// Function '?TEXLDConvertToILFunc@XGRAPHICS@@YAXPAPAKKW4ILOpCode@1@PAU_R400IL_RECORDED_INFO@1@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155490);
		  /* 82155490h */ case    0:  		/* rlwinm. R6, R9, 0, 14, 14 */
		/* 82155490h case    0:*/		cpu::op::rlwinm<1,0,14,14>(regs,&regs.R6,regs.R9);
		/* 82155490h case    0:*/		return 0x82155494;
		  /* 82155494h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 82155494h case    1:*/		if ( regs.CR[0].eq ) { return 0x8215549C;  }
		/* 82155494h case    1:*/		return 0x82155498;
		  /* 82155498h */ case    2:  		/* ori R11, R11, 4 */
		/* 82155498h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82155498h case    2:*/		return 0x8215549C;
	}
	return 0x8215549C;
} // Block from 82155490h-8215549Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8215549Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215549C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215549C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215549C);
		  /* 8215549Ch */ case    0:  		/* rlwinm. R6, R9, 0, 13, 13 */
		/* 8215549Ch case    0:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R6,regs.R9);
		/* 8215549Ch case    0:*/		return 0x821554A0;
		  /* 821554A0h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 821554A0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821554A8;  }
		/* 821554A0h case    1:*/		return 0x821554A4;
		  /* 821554A4h */ case    2:  		/* ori R11, R11, 16 */
		/* 821554A4h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x10);
		/* 821554A4h case    2:*/		return 0x821554A8;
	}
	return 0x821554A8;
} // Block from 8215549Ch-821554A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821554A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821554A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821554A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821554A8);
		  /* 821554A8h */ case    0:  		/* rlwinm. R9, R9, 0, 12, 12 */
		/* 821554A8h case    0:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R9,regs.R9);
		/* 821554A8h case    0:*/		return 0x821554AC;
		  /* 821554ACh */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 821554ACh case    1:*/		if ( regs.CR[0].eq ) { return 0x821554B4;  }
		/* 821554ACh case    1:*/		return 0x821554B0;
		  /* 821554B0h */ case    2:  		/* ori R11, R11, 64 */
		/* 821554B0h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x40);
		/* 821554B0h case    2:*/		return 0x821554B4;
	}
	return 0x821554B4;
} // Block from 821554A8h-821554B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821554B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821554B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821554B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821554B4);
		  /* 821554B4h */ case    0:  		/* or R9, R11, R8 */
		/* 821554B4h case    0:*/		cpu::op::or<0>(regs,&regs.R9,regs.R11,regs.R8);
		/* 821554B4h case    0:*/		return 0x821554B8;
		  /* 821554B8h */ case    1:  		/* addi R11, R10, 4 */
		/* 821554B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x4);
		/* 821554B8h case    1:*/		return 0x821554BC;
		  /* 821554BCh */ case    2:  		/* stw R9, <#[R10]> */
		/* 821554BCh case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821554BCh case    2:*/		return 0x821554C0;
	}
	return 0x821554C0;
} // Block from 821554B4h-821554C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821554C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821554C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821554C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821554C0);
		  /* 821554C0h */ case    0:  		/* stw R20, <#[R11]> */
		/* 821554C0h case    0:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R11 + 0x00000000) );
		/* 821554C0h case    0:*/		return 0x821554C4;
		  /* 821554C4h */ case    1:  		/* li R10, 8738 */
		/* 821554C4h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x2222);
		/* 821554C4h case    1:*/		return 0x821554C8;
		  /* 821554C8h */ case    2:  		/* stwu R7, <#[R11 + 4]> */
		/* 821554C8h case    2:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821554C8h case    2:*/		return 0x821554CC;
		  /* 821554CCh */ case    3:  		/* stwu R10, <#[R11 + 4]> */
		/* 821554CCh case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821554CCh case    3:*/		return 0x821554D0;
	}
	return 0x821554D0;
} // Block from 821554C0h-821554D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821554D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821554D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821554D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821554D0);
		  /* 821554D0h */ case    0:  		/* addi R31, R11, 4 */
		/* 821554D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 821554D0h case    0:*/		return 0x821554D4;
	}
	return 0x821554D4;
} // Block from 821554D0h-821554D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821554D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821554D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821554D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821554D4);
		  /* 821554D4h */ case    0:  		/* lwz R11, <#[R1 + 292]> */
		/* 821554D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000124) );
		/* 821554D4h case    0:*/		return 0x821554D8;
		  /* 821554D8h */ case    1:  		/* stw R31, <#[R11]> */
		/* 821554D8h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 821554D8h case    1:*/		return 0x821554DC;
		  /* 821554DCh */ case    2:  		/* stw R15, <#[R14]> */
		/* 821554DCh case    2:*/		cpu::mem::store32( regs, regs.R15, (uint32)(regs.R14 + 0x00000000) );
		/* 821554DCh case    2:*/		return 0x821554E0;
		  /* 821554E0h */ case    3:  		/* addi R1, R1, 240 */
		/* 821554E0h case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 821554E0h case    3:*/		return 0x821554E4;
		  /* 821554E4h */ case    4:  		/* b -803444 */
		/* 821554E4h case    4:*/		return 0x82091270;
		/* 821554E4h case    4:*/		return 0x821554E8;
	}
	return 0x821554E8;
} // Block from 821554D4h-821554E8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821554E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821554E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821554E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821554E8);
		  /* 821554E8h */ case    0:  		/* mfspr R12, LR */
		/* 821554E8h case    0:*/		regs.R12 = regs.LR;
		/* 821554E8h case    0:*/		return 0x821554EC;
		  /* 821554ECh */ case    1:  		/* bl -803532 */
		/* 821554ECh case    1:*/		regs.LR = 0x821554F0; return 0x82091220;
		/* 821554ECh case    1:*/		return 0x821554F0;
		  /* 821554F0h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 821554F0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 821554F0h case    2:*/		return 0x821554F4;
		  /* 821554F4h */ case    3:  		/* lis R11, -1 */
		/* 821554F4h case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 821554F4h case    3:*/		return 0x821554F8;
		  /* 821554F8h */ case    4:  		/* mr R16, R3 */
		/* 821554F8h case    4:*/		regs.R16 = regs.R3;
		/* 821554F8h case    4:*/		return 0x821554FC;
		  /* 821554FCh */ case    5:  		/* ori R11, R11, 260 */
		/* 821554FCh case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x104);
		/* 821554FCh case    5:*/		return 0x82155500;
		  /* 82155500h */ case    6:  		/* mr R20, R6 */
		/* 82155500h case    6:*/		regs.R20 = regs.R6;
		/* 82155500h case    6:*/		return 0x82155504;
		  /* 82155504h */ case    7:  		/* mr R15, R7 */
		/* 82155504h case    7:*/		regs.R15 = regs.R7;
		/* 82155504h case    7:*/		return 0x82155508;
		  /* 82155508h */ case    8:  		/* cmplw CR6, R4, R11 */
		/* 82155508h case    8:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82155508h case    8:*/		return 0x8215550C;
		  /* 8215550Ch */ case    9:  		/* bc 12, CR6_EQ, 8 */
		/* 8215550Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x82155514;  }
		/* 8215550Ch case    9:*/		return 0x82155510;
		  /* 82155510h */ case   10:  		/* bl 1121616 */
		/* 82155510h case   10:*/		regs.LR = 0x82155514; return 0x82267260;
		/* 82155510h case   10:*/		return 0x82155514;
	}
	return 0x82155514;
} // Block from 821554E8h-82155514h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82155514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155514);
		  /* 82155514h */ case    0:  		/* lwz R11, <#[R16]> */
		/* 82155514h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 82155514h case    0:*/		return 0x82155518;
		  /* 82155518h */ case    1:  		/* lwz R30, <#[R15]> */
		/* 82155518h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R15 + 0x00000000) );
		/* 82155518h case    1:*/		return 0x8215551C;
		  /* 8215551Ch */ case    2:  		/* addi R31, R11, 4 */
		/* 8215551Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 8215551Ch case    2:*/		return 0x82155520;
		  /* 82155520h */ case    3:  		/* lwz R11, <#[R11 + 4]> */
		/* 82155520h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82155520h case    3:*/		return 0x82155524;
		  /* 82155524h */ case    4:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82155524h case    4:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82155524h case    4:*/		return 0x82155528;
		  /* 82155528h */ case    5:  		/* bc 4, CR0_EQ, 8 */
		/* 82155528h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82155530;  }
		/* 82155528h case    5:*/		return 0x8215552C;
		  /* 8215552Ch */ case    6:  		/* bl 1121588 */
		/* 8215552Ch case    6:*/		regs.LR = 0x82155530; return 0x82267260;
		/* 8215552Ch case    6:*/		return 0x82155530;
	}
	return 0x82155530;
} // Block from 82155514h-82155530h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82155530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155530);
		  /* 82155530h */ case    0:  		/* lwz R29, <#[R31]> */
		/* 82155530h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 82155530h case    0:*/		return 0x82155534;
		  /* 82155534h */ case    1:  		/* addi R6, R1, 80 */
		/* 82155534h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82155534h case    1:*/		return 0x82155538;
		  /* 82155538h */ case    2:  		/* lwzu R28, <#[R31 + 4]> */
		/* 82155538h case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82155538h case    2:*/		return 0x8215553C;
		  /* 8215553Ch */ case    3:  		/* mr R5, R20 */
		/* 8215553Ch case    3:*/		regs.R5 = regs.R20;
		/* 8215553Ch case    3:*/		return 0x82155540;
		  /* 82155540h */ case    4:  		/* mr R11, R29 */
		/* 82155540h case    4:*/		regs.R11 = regs.R29;
		/* 82155540h case    4:*/		return 0x82155544;
		  /* 82155544h */ case    5:  		/* rlwinm R27, R29, 0, 21, 31 */
		/* 82155544h case    5:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R27,regs.R29);
		/* 82155544h case    5:*/		return 0x82155548;
		  /* 82155548h */ case    6:  		/* rlwimi R11, R29, 12, 21, 23 */
		/* 82155548h case    6:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R11,regs.R29);
		/* 82155548h case    6:*/		return 0x8215554C;
		  /* 8215554Ch */ case    7:  		/* mr R4, R27 */
		/* 8215554Ch case    7:*/		regs.R4 = regs.R27;
		/* 8215554Ch case    7:*/		return 0x82155550;
		  /* 82155550h */ case    8:  		/* rlwinm R3, R11, 24, 27, 31 */
		/* 82155550h case    8:*/		cpu::op::rlwinm<0,24,27,31>(regs,&regs.R3,regs.R11);
		/* 82155550h case    8:*/		return 0x82155554;
		  /* 82155554h */ case    9:  		/* addi R17, R31, 8 */
		/* 82155554h case    9:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R31,0x8);
		/* 82155554h case    9:*/		return 0x82155558;
		  /* 82155558h */ case   10:  		/* bl -9832 */
		/* 82155558h case   10:*/		regs.LR = 0x8215555C; return 0x82152EF0;
		/* 82155558h case   10:*/		return 0x8215555C;
		  /* 8215555Ch */ case   11:  		/* lwz R11, <#[R1 + 80]> */
		/* 8215555Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8215555Ch case   11:*/		return 0x82155560;
		  /* 82155560h */ case   12:  		/* lis R10, 64 */
		/* 82155560h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0x40);
		/* 82155560h case   12:*/		return 0x82155564;
		  /* 82155564h */ case   13:  		/* rlwinm R9, R3, 0, 16, 31 */
		/* 82155564h case   13:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R3);
		/* 82155564h case   13:*/		return 0x82155568;
		  /* 82155568h */ case   14:  		/* rlwimi R10, R11, 16, 10, 15 */
		/* 82155568h case   14:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R10,regs.R11);
		/* 82155568h case   14:*/		return 0x8215556C;
		  /* 8215556Ch */ case   15:  		/* li R19, 33 */
		/* 8215556Ch case   15:*/		cpu::op::li<0>(regs,&regs.R19,0x21);
		/* 8215556Ch case   15:*/		return 0x82155570;
		  /* 82155570h */ case   16:  		/* or R22, R10, R9 */
		/* 82155570h case   16:*/		cpu::op::or<0>(regs,&regs.R22,regs.R10,regs.R9);
		/* 82155570h case   16:*/		return 0x82155574;
		  /* 82155574h */ case   17:  		/* stw R19, <#[R30]> */
		/* 82155574h case   17:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R30 + 0x00000000) );
		/* 82155574h case   17:*/		return 0x82155578;
		  /* 82155578h */ case   18:  		/* rlwinm. R11, R29, 0, 8, 11 */
		/* 82155578h case   18:*/		cpu::op::rlwinm<1,0,8,11>(regs,&regs.R11,regs.R29);
		/* 82155578h case   18:*/		return 0x8215557C;
		  /* 8215557Ch */ case   19:  		/* stwu R22, <#[R30 + 4]> */
		/* 8215557Ch case   19:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 8215557Ch case   19:*/		return 0x82155580;
		  /* 82155580h */ case   20:  		/* li R8, 0 */
		/* 82155580h case   20:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82155580h case   20:*/		return 0x82155584;
		  /* 82155584h */ case   21:  		/* addi R9, R30, 4 */
		/* 82155584h case   21:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R30,0x4);
		/* 82155584h case   21:*/		return 0x82155588;
		  /* 82155588h */ case   22:  		/* bc 12, CR0_EQ, 8 */
		/* 82155588h case   22:*/		if ( regs.CR[0].eq ) { return 0x82155590;  }
		/* 82155588h case   22:*/		return 0x8215558C;
		  /* 8215558Ch */ case   23:  		/* li R8, 256 */
		/* 8215558Ch case   23:*/		cpu::op::li<0>(regs,&regs.R8,0x100);
		/* 8215558Ch case   23:*/		return 0x82155590;
	}
	return 0x82155590;
} // Block from 82155530h-82155590h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82155590h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155590( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155590) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155590);
		  /* 82155590h */ case    0:  		/* rlwinm. R11, R29, 8, 28, 31 */
		/* 82155590h case    0:*/		cpu::op::rlwinm<1,8,28,31>(regs,&regs.R11,regs.R29);
		/* 82155590h case    0:*/		return 0x82155594;
		  /* 82155594h */ case    1:  		/* li R10, 0 */
		/* 82155594h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82155594h case    1:*/		return 0x82155598;
		  /* 82155598h */ case    2:  		/* bc 12, CR0_EQ, 52 */
		/* 82155598h case    2:*/		if ( regs.CR[0].eq ) { return 0x821555CC;  }
		/* 82155598h case    2:*/		return 0x8215559C;
		  /* 8215559Ch */ case    3:  		/* rlwinm. R10, R11, 0, 28, 28 */
		/* 8215559Ch case    3:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R10,regs.R11);
		/* 8215559Ch case    3:*/		return 0x821555A0;
		  /* 821555A0h */ case    4:  		/* bc 12, CR0_EQ, 24 */
		/* 821555A0h case    4:*/		if ( regs.CR[0].eq ) { return 0x821555B8;  }
		/* 821555A0h case    4:*/		return 0x821555A4;
		  /* 821555A4h */ case    5:  		/* nor R11, R11, R11 */
		/* 821555A4h case    5:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821555A4h case    5:*/		return 0x821555A8;
		  /* 821555A8h */ case    6:  		/* lis R10, -32217 */
		/* 821555A8h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 821555A8h case    6:*/		return 0x821555AC;
		  /* 821555ACh */ case    7:  		/* addi R11, R11, 1 */
		/* 821555ACh case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821555ACh case    7:*/		return 0x821555B0;
		  /* 821555B0h */ case    8:  		/* addi R10, R10, 19756 */
		/* 821555B0h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4D2C);
		/* 821555B0h case    8:*/		return 0x821555B4;
		  /* 821555B4h */ case    9:  		/* b 12 */
		/* 821555B4h case    9:*/		return 0x821555C0;
		/* 821555B4h case    9:*/		return 0x821555B8;
	}
	return 0x821555B8;
} // Block from 82155590h-821555B8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821555B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821555B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821555B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821555B8);
		  /* 821555B8h */ case    0:  		/* lis R10, -32217 */
		/* 821555B8h case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 821555B8h case    0:*/		return 0x821555BC;
		  /* 821555BCh */ case    1:  		/* addi R10, R10, 19740 */
		/* 821555BCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4D1C);
		/* 821555BCh case    1:*/		return 0x821555C0;
	}
	return 0x821555C0;
} // Block from 821555B8h-821555C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821555C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821555C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821555C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821555C0);
		  /* 821555C0h */ case    0:  		/* rlwinm R11, R11, 2, 28, 29 */
		/* 821555C0h case    0:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R11,regs.R11);
		/* 821555C0h case    0:*/		return 0x821555C4;
		  /* 821555C4h */ case    1:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821555C4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821555C4h case    1:*/		return 0x821555C8;
		  /* 821555C8h */ case    2:  		/* rlwinm R10, R11, 9, 0, 22 */
		/* 821555C8h case    2:*/		cpu::op::rlwinm<0,9,0,22>(regs,&regs.R10,regs.R11);
		/* 821555C8h case    2:*/		return 0x821555CC;
	}
	return 0x821555CC;
} // Block from 821555C0h-821555CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821555CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821555CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821555CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821555CC);
		  /* 821555CCh */ case    0:  		/* rlwinm. R11, R29, 0, 15, 15 */
		/* 821555CCh case    0:*/		cpu::op::rlwinm<1,0,15,15>(regs,&regs.R11,regs.R29);
		/* 821555CCh case    0:*/		return 0x821555D0;
		  /* 821555D0h */ case    1:  		/* or R18, R10, R8 */
		/* 821555D0h case    1:*/		cpu::op::or<0>(regs,&regs.R18,regs.R10,regs.R8);
		/* 821555D0h case    1:*/		return 0x821555D4;
		  /* 821555D4h */ case    2:  		/* addi R31, R9, 4 */
		/* 821555D4h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R9,0x4);
		/* 821555D4h case    2:*/		return 0x821555D8;
		  /* 821555D8h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 821555D8h case    3:*/		if ( regs.CR[0].eq ) { return 0x821555E8;  }
		/* 821555D8h case    3:*/		return 0x821555DC;
		  /* 821555DCh */ case    4:  		/* ori R11, R18, 1 */
		/* 821555DCh case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R18,0x1);
		/* 821555DCh case    4:*/		return 0x821555E0;
		  /* 821555E0h */ case    5:  		/* stw R11, <#[R9]> */
		/* 821555E0h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 821555E0h case    5:*/		return 0x821555E4;
		  /* 821555E4h */ case    6:  		/* b 8 */
		/* 821555E4h case    6:*/		return 0x821555EC;
		/* 821555E4h case    6:*/		return 0x821555E8;
	}
	return 0x821555E8;
} // Block from 821555CCh-821555E8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821555E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821555E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821555E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821555E8);
		  /* 821555E8h */ case    0:  		/* stw R18, <#[R9]> */
		/* 821555E8h case    0:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R9 + 0x00000000) );
		/* 821555E8h case    0:*/		return 0x821555EC;
	}
	return 0x821555EC;
} // Block from 821555E8h-821555ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821555ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821555EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821555EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821555EC);
		  /* 821555ECh */ case    0:  		/* rlwinm R11, R28, 0, 8, 15 */
		/* 821555ECh case    0:*/		cpu::op::rlwinm<0,0,8,15>(regs,&regs.R11,regs.R28);
		/* 821555ECh case    0:*/		return 0x821555F0;
		  /* 821555F0h */ case    1:  		/* lis R9, 228 */
		/* 821555F0h case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0xE4);
		/* 821555F0h case    1:*/		return 0x821555F4;
		  /* 821555F4h */ case    2:  		/* lis R10, -32217 */
		/* 821555F4h case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 821555F4h case    2:*/		return 0x821555F8;
		  /* 821555F8h */ case    3:  		/* cmplw CR6, R11, R9 */
		/* 821555F8h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821555F8h case    3:*/		return 0x821555FC;
		  /* 821555FCh */ case    4:  		/* addi R30, R10, 19772 */
		/* 821555FCh case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R10,0x4D3C);
		/* 821555FCh case    4:*/		return 0x82155600;
		  /* 82155600h */ case    5:  		/* bc 12, CR6_EQ, 72 */
		/* 82155600h case    5:*/		if ( regs.CR[6].eq ) { return 0x82155648;  }
		/* 82155600h case    5:*/		return 0x82155604;
		  /* 82155604h */ case    6:  		/* rlwinm R10, R11, 14, 18, 31 */
		/* 82155604h case    6:*/		cpu::op::rlwinm<0,14,18,31>(regs,&regs.R10,regs.R11);
		/* 82155604h case    6:*/		return 0x82155608;
		  /* 82155608h */ case    7:  		/* rlwinm R11, R11, 18, 28, 29 */
		/* 82155608h case    7:*/		cpu::op::rlwinm<0,18,28,29>(regs,&regs.R11,regs.R11);
		/* 82155608h case    7:*/		return 0x8215560C;
		  /* 8215560Ch */ case    8:  		/* rlwinm R9, R10, 30, 2, 31 */
		/* 8215560Ch case    8:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R9,regs.R10);
		/* 8215560Ch case    8:*/		return 0x82155610;
		  /* 82155610h */ case    9:  		/* rlwinm R10, R10, 2, 28, 29 */
		/* 82155610h case    9:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R10,regs.R10);
		/* 82155610h case    9:*/		return 0x82155614;
		  /* 82155614h */ case   10:  		/* rlwinm R8, R9, 2, 28, 29 */
		/* 82155614h case   10:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R8,regs.R9);
		/* 82155614h case   10:*/		return 0x82155618;
		  /* 82155618h */ case   11:  		/* rlwinm R9, R9, 0, 28, 29 */
		/* 82155618h case   11:*/		cpu::op::rlwinm<0,0,28,29>(regs,&regs.R9,regs.R9);
		/* 82155618h case   11:*/		return 0x8215561C;
		  /* 8215561Ch */ case   12:  		/* lwzx R11, <#[R11 + R30]> */
		/* 8215561Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 8215561Ch case   12:*/		return 0x82155620;
		  /* 82155620h */ case   13:  		/* lwzx R10, <#[R10 + R30]> */
		/* 82155620h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 82155620h case   13:*/		return 0x82155624;
		  /* 82155624h */ case   14:  		/* lwzx R8, <#[R8 + R30]> */
		/* 82155624h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R30 + 0x00000000) );
		/* 82155624h case   14:*/		return 0x82155628;
		  /* 82155628h */ case   15:  		/* rlwinm R10, R10, 4, 0, 27 */
		/* 82155628h case   15:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R10,regs.R10);
		/* 82155628h case   15:*/		return 0x8215562C;
		  /* 8215562Ch */ case   16:  		/* lwzx R9, <#[R9 + R30]> */
		/* 8215562Ch case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R30 + 0x00000000) );
		/* 8215562Ch case   16:*/		return 0x82155630;
		  /* 82155630h */ case   17:  		/* rlwinm R8, R8, 8, 0, 23 */
		/* 82155630h case   17:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R8,regs.R8);
		/* 82155630h case   17:*/		return 0x82155634;
		  /* 82155634h */ case   18:  		/* or R11, R10, R11 */
		/* 82155634h case   18:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82155634h case   18:*/		return 0x82155638;
		  /* 82155638h */ case   19:  		/* rlwinm R10, R9, 12, 0, 19 */
		/* 82155638h case   19:*/		cpu::op::rlwinm<0,12,0,19>(regs,&regs.R10,regs.R9);
		/* 82155638h case   19:*/		return 0x8215563C;
		  /* 8215563Ch */ case   20:  		/* or R11, R8, R11 */
		/* 8215563Ch case   20:*/		cpu::op::or<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 8215563Ch case   20:*/		return 0x82155640;
		  /* 82155640h */ case   21:  		/* or R21, R10, R11 */
		/* 82155640h case   21:*/		cpu::op::or<0>(regs,&regs.R21,regs.R10,regs.R11);
		/* 82155640h case   21:*/		return 0x82155644;
		  /* 82155644h */ case   22:  		/* b 8 */
		/* 82155644h case   22:*/		return 0x8215564C;
		/* 82155644h case   22:*/		return 0x82155648;
	}
	return 0x82155648;
} // Block from 821555ECh-82155648h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82155648h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155648);
		  /* 82155648h */ case    0:  		/* li R21, 12816 */
		/* 82155648h case    0:*/		cpu::op::li<0>(regs,&regs.R21,0x3210);
		/* 82155648h case    0:*/		return 0x8215564C;
	}
	return 0x8215564C;
} // Block from 82155648h-8215564Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215564Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215564C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215564C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215564C);
		  /* 8215564Ch */ case    0:  		/* rlwinm R26, R28, 0, 4, 7 */
		/* 8215564Ch case    0:*/		cpu::op::rlwinm<0,0,4,7>(regs,&regs.R26,regs.R28);
		/* 8215564Ch case    0:*/		return 0x82155650;
		  /* 82155650h */ case    1:  		/* mr R3, R26 */
		/* 82155650h case    1:*/		regs.R3 = regs.R26;
		/* 82155650h case    1:*/		return 0x82155654;
		  /* 82155654h */ case    2:  		/* bl -10420 */
		/* 82155654h case    2:*/		regs.LR = 0x82155658; return 0x82152DA0;
		/* 82155654h case    2:*/		return 0x82155658;
		  /* 82155658h */ case    3:  		/* mr R23, R3 */
		/* 82155658h case    3:*/		regs.R23 = regs.R3;
		/* 82155658h case    3:*/		return 0x8215565C;
		  /* 8215565Ch */ case    4:  		/* addi R5, R1, 80 */
		/* 8215565Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8215565Ch case    4:*/		return 0x82155660;
		  /* 82155660h */ case    5:  		/* mr R4, R20 */
		/* 82155660h case    5:*/		regs.R4 = regs.R20;
		/* 82155660h case    5:*/		return 0x82155664;
		  /* 82155664h */ case    6:  		/* mr R3, R28 */
		/* 82155664h case    6:*/		regs.R3 = regs.R28;
		/* 82155664h case    6:*/		return 0x82155668;
		  /* 82155668h */ case    7:  		/* bl -8776 */
		/* 82155668h case    7:*/		regs.LR = 0x8215566C; return 0x82153420;
		/* 82155668h case    7:*/		return 0x8215566C;
		  /* 8215566Ch */ case    8:  		/* cmplwi CR6, R23, 0 */
		/* 8215566Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8215566Ch case    8:*/		return 0x82155670;
		  /* 82155670h */ case    9:  		/* bc 4, CR6_EQ, 40 */
		/* 82155670h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82155698;  }
		/* 82155670h case    9:*/		return 0x82155674;
		  /* 82155674h */ case   10:  		/* cmplwi CR6, R21, 12816 */
		/* 82155674h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00003210);
		/* 82155674h case   10:*/		return 0x82155678;
		  /* 82155678h */ case   11:  		/* bc 4, CR6_EQ, 32 */
		/* 82155678h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82155698;  }
		/* 82155678h case   11:*/		return 0x8215567C;
		  /* 8215567Ch */ case   12:  		/* lwz R11, <#[R1 + 80]> */
		/* 8215567Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8215567Ch case   12:*/		return 0x82155680;
		  /* 82155680h */ case   13:  		/* rlwinm R25, R3, 0, 16, 31 */
		/* 82155680h case   13:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R25,regs.R3);
		/* 82155680h case   13:*/		return 0x82155684;
		  /* 82155684h */ case   14:  		/* rlwinm R10, R11, 16, 10, 15 */
		/* 82155684h case   14:*/		cpu::op::rlwinm<0,16,10,15>(regs,&regs.R10,regs.R11);
		/* 82155684h case   14:*/		return 0x82155688;
		  /* 82155688h */ case   15:  		/* rlwinm R24, R11, 0, 26, 31 */
		/* 82155688h case   15:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R24,regs.R11);
		/* 82155688h case   15:*/		return 0x8215568C;
		  /* 8215568Ch */ case   16:  		/* or R11, R10, R25 */
		/* 8215568Ch case   16:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R25);
		/* 8215568Ch case   16:*/		return 0x82155690;
		  /* 82155690h */ case   17:  		/* stw R11, <#[R31]> */
		/* 82155690h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82155690h case   17:*/		return 0x82155694;
		  /* 82155694h */ case   18:  		/* b 40 */
		/* 82155694h case   18:*/		return 0x821556BC;
		/* 82155694h case   18:*/		return 0x82155698;
	}
	return 0x82155698;
} // Block from 8215564Ch-82155698h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82155698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155698);
		  /* 82155698h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 82155698h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82155698h case    0:*/		return 0x8215569C;
		  /* 8215569Ch */ case    1:  		/* lis R10, 64 */
		/* 8215569Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x40);
		/* 8215569Ch case    1:*/		return 0x821556A0;
		  /* 821556A0h */ case    2:  		/* rlwinm R25, R3, 0, 16, 31 */
		/* 821556A0h case    2:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R25,regs.R3);
		/* 821556A0h case    2:*/		return 0x821556A4;
		  /* 821556A4h */ case    3:  		/* rlwimi R10, R11, 16, 10, 15 */
		/* 821556A4h case    3:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R10,regs.R11);
		/* 821556A4h case    3:*/		return 0x821556A8;
		  /* 821556A8h */ case    4:  		/* or R9, R23, R21 */
		/* 821556A8h case    4:*/		cpu::op::or<0>(regs,&regs.R9,regs.R23,regs.R21);
		/* 821556A8h case    4:*/		return 0x821556AC;
		  /* 821556ACh */ case    5:  		/* or R10, R10, R25 */
		/* 821556ACh case    5:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R25);
		/* 821556ACh case    5:*/		return 0x821556B0;
		  /* 821556B0h */ case    6:  		/* rlwinm R24, R11, 0, 26, 31 */
		/* 821556B0h case    6:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R24,regs.R11);
		/* 821556B0h case    6:*/		return 0x821556B4;
		  /* 821556B4h */ case    7:  		/* stw R10, <#[R31]> */
		/* 821556B4h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821556B4h case    7:*/		return 0x821556B8;
		  /* 821556B8h */ case    8:  		/* stwu R9, <#[R31 + 4]> */
		/* 821556B8h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 821556B8h case    8:*/		return 0x821556BC;
	}
	return 0x821556BC;
} // Block from 82155698h-821556BCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821556BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821556BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821556BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821556BC);
		  /* 821556BCh */ case    0:  		/* rlwinm R11, R28, 14, 26, 31 */
		/* 821556BCh case    0:*/		cpu::op::rlwinm<0,14,26,31>(regs,&regs.R11,regs.R28);
		/* 821556BCh case    0:*/		return 0x821556C0;
		  /* 821556C0h */ case    1:  		/* addi R10, R27, 8 */
		/* 821556C0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0x8);
		/* 821556C0h case    1:*/		return 0x821556C4;
		  /* 821556C4h */ case    2:  		/* rlwinm R9, R11, 30, 2, 31 */
		/* 821556C4h case    2:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R9,regs.R11);
		/* 821556C4h case    2:*/		return 0x821556C8;
		  /* 821556C8h */ case    3:  		/* rlwinm R27, R10, 0, 16, 31 */
		/* 821556C8h case    3:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R27,regs.R10);
		/* 821556C8h case    3:*/		return 0x821556CC;
		  /* 821556CCh */ case    4:  		/* addi R31, R31, 4 */
		/* 821556CCh case    4:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821556CCh case    4:*/		return 0x821556D0;
		  /* 821556D0h */ case    5:  		/* rlwinm R10, R9, 2, 28, 29 */
		/* 821556D0h case    5:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R10,regs.R9);
		/* 821556D0h case    5:*/		return 0x821556D4;
		  /* 821556D4h */ case    6:  		/* rlwinm R8, R28, 18, 28, 29 */
		/* 821556D4h case    6:*/		cpu::op::rlwinm<0,18,28,29>(regs,&regs.R8,regs.R28);
		/* 821556D4h case    6:*/		return 0x821556D8;
		  /* 821556D8h */ case    7:  		/* oris R7, R27, 1 */
		/* 821556D8h case    7:*/		cpu::op::oris<0>(regs,&regs.R7,regs.R27,0x1);
		/* 821556D8h case    7:*/		return 0x821556DC;
		  /* 821556DCh */ case    8:  		/* rlwinm R9, R9, 0, 28, 29 */
		/* 821556DCh case    8:*/		cpu::op::rlwinm<0,0,28,29>(regs,&regs.R9,regs.R9);
		/* 821556DCh case    8:*/		return 0x821556E0;
		  /* 821556E0h */ case    9:  		/* stw R7, <#[R31]> */
		/* 821556E0h case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x00000000) );
		/* 821556E0h case    9:*/		return 0x821556E4;
		  /* 821556E4h */ case   10:  		/* rlwinm R11, R11, 2, 28, 29 */
		/* 821556E4h case   10:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R11,regs.R11);
		/* 821556E4h case   10:*/		return 0x821556E8;
		  /* 821556E8h */ case   11:  		/* lwzx R10, <#[R10 + R30]> */
		/* 821556E8h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R30 + 0x00000000) );
		/* 821556E8h case   11:*/		return 0x821556EC;
		  /* 821556ECh */ case   12:  		/* mr R3, R26 */
		/* 821556ECh case   12:*/		regs.R3 = regs.R26;
		/* 821556ECh case   12:*/		return 0x821556F0;
		  /* 821556F0h */ case   13:  		/* lwzx R8, <#[R8 + R30]> */
		/* 821556F0h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R30 + 0x00000000) );
		/* 821556F0h case   13:*/		return 0x821556F4;
		  /* 821556F4h */ case   14:  		/* lwzx R9, <#[R9 + R30]> */
		/* 821556F4h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R30 + 0x00000000) );
		/* 821556F4h case   14:*/		return 0x821556F8;
		  /* 821556F8h */ case   15:  		/* lwzx R11, <#[R11 + R30]> */
		/* 821556F8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 821556F8h case   15:*/		return 0x821556FC;
		  /* 821556FCh */ case   16:  		/* rlwinm R11, R11, 4, 0, 27 */
		/* 821556FCh case   16:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R11);
		/* 821556FCh case   16:*/		return 0x82155700;
		  /* 82155700h */ case   17:  		/* rlwinm R10, R10, 8, 0, 23 */
		/* 82155700h case   17:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R10,regs.R10);
		/* 82155700h case   17:*/		return 0x82155704;
		  /* 82155704h */ case   18:  		/* or R11, R11, R8 */
		/* 82155704h case   18:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82155704h case   18:*/		return 0x82155708;
		  /* 82155708h */ case   19:  		/* rlwinm R9, R9, 12, 0, 19 */
		/* 82155708h case   19:*/		cpu::op::rlwinm<0,12,0,19>(regs,&regs.R9,regs.R9);
		/* 82155708h case   19:*/		return 0x8215570C;
		  /* 8215570Ch */ case   20:  		/* or R11, R10, R11 */
		/* 8215570Ch case   20:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8215570Ch case   20:*/		return 0x82155710;
		  /* 82155710h */ case   21:  		/* or R30, R9, R11 */
		/* 82155710h case   21:*/		cpu::op::or<0>(regs,&regs.R30,regs.R9,regs.R11);
		/* 82155710h case   21:*/		return 0x82155714;
		  /* 82155714h */ case   22:  		/* rlwinm R14, R30, 0, 29, 31 */
		/* 82155714h case   22:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R14,regs.R30);
		/* 82155714h case   22:*/		return 0x82155718;
		  /* 82155718h */ case   23:  		/* bl -10616 */
		/* 82155718h case   23:*/		regs.LR = 0x8215571C; return 0x82152DA0;
		/* 82155718h case   23:*/		return 0x8215571C;
		  /* 8215571Ch */ case   24:  		/* mr R26, R3 */
		/* 8215571Ch case   24:*/		regs.R26 = regs.R3;
		/* 8215571Ch case   24:*/		return 0x82155720;
		  /* 82155720h */ case   25:  		/* addi R5, R1, 80 */
		/* 82155720h case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82155720h case   25:*/		return 0x82155724;
		  /* 82155724h */ case   26:  		/* mr R4, R20 */
		/* 82155724h case   26:*/		regs.R4 = regs.R20;
		/* 82155724h case   26:*/		return 0x82155728;
		  /* 82155728h */ case   27:  		/* mr R3, R28 */
		/* 82155728h case   27:*/		regs.R3 = regs.R28;
		/* 82155728h case   27:*/		return 0x8215572C;
		  /* 8215572Ch */ case   28:  		/* bl -8972 */
		/* 8215572Ch case   28:*/		regs.LR = 0x82155730; return 0x82153420;
		/* 8215572Ch case   28:*/		return 0x82155730;
		  /* 82155730h */ case   29:  		/* rlwinm R11, R30, 4, 25, 27 */
		/* 82155730h case   29:*/		cpu::op::rlwinm<0,4,25,27>(regs,&regs.R11,regs.R30);
		/* 82155730h case   29:*/		return 0x82155734;
		  /* 82155734h */ case   30:  		/* lwz R10, <#[R1 + 80]> */
		/* 82155734h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82155734h case   30:*/		return 0x82155738;
		  /* 82155738h */ case   31:  		/* lis R9, 64 */
		/* 82155738h case   31:*/		cpu::op::lis<0>(regs,&regs.R9,0x40);
		/* 82155738h case   31:*/		return 0x8215573C;
		  /* 8215573Ch */ case   32:  		/* or R11, R11, R14 */
		/* 8215573Ch case   32:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R14);
		/* 8215573Ch case   32:*/		return 0x82155740;
		  /* 82155740h */ case   33:  		/* rlwimi R9, R10, 16, 10, 15 */
		/* 82155740h case   33:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R9,regs.R10);
		/* 82155740h case   33:*/		return 0x82155744;
		  /* 82155744h */ case   34:  		/* rlwinm R11, R11, 4, 0, 27 */
		/* 82155744h case   34:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R11);
		/* 82155744h case   34:*/		return 0x82155748;
		  /* 82155748h */ case   35:  		/* rlwinm R10, R3, 0, 16, 31 */
		/* 82155748h case   35:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R3);
		/* 82155748h case   35:*/		return 0x8215574C;
		  /* 8215574Ch */ case   36:  		/* or R11, R11, R14 */
		/* 8215574Ch case   36:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R14);
		/* 8215574Ch case   36:*/		return 0x82155750;
		  /* 82155750h */ case   37:  		/* or R10, R9, R10 */
		/* 82155750h case   37:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82155750h case   37:*/		return 0x82155754;
		  /* 82155754h */ case   38:  		/* rlwinm R11, R11, 4, 0, 27 */
		/* 82155754h case   38:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R11);
		/* 82155754h case   38:*/		return 0x82155758;
		  /* 82155758h */ case   39:  		/* stwu R10, <#[R31 + 4]> */
		/* 82155758h case   39:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82155758h case   39:*/		return 0x8215575C;
		  /* 8215575Ch */ case   40:  		/* rlwinm. R9, R29, 0, 14, 14 */
		/* 8215575Ch case   40:*/		cpu::op::rlwinm<1,0,14,14>(regs,&regs.R9,regs.R29);
		/* 8215575Ch case   40:*/		return 0x82155760;
		  /* 82155760h */ case   41:  		/* or R11, R11, R26 */
		/* 82155760h case   41:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 82155760h case   41:*/		return 0x82155764;
		  /* 82155764h */ case   42:  		/* or R11, R11, R14 */
		/* 82155764h case   42:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R14);
		/* 82155764h case   42:*/		return 0x82155768;
		  /* 82155768h */ case   43:  		/* stwu R11, <#[R31 + 4]> */
		/* 82155768h case   43:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82155768h case   43:*/		return 0x8215576C;
		  /* 8215576Ch */ case   44:  		/* stwu R19, <#[R31 + 4]> */
		/* 8215576Ch case   44:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 8215576Ch case   44:*/		return 0x82155770;
		  /* 82155770h */ case   45:  		/* stwu R22, <#[R31 + 4]> */
		/* 82155770h case   45:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82155770h case   45:*/		return 0x82155774;
		  /* 82155774h */ case   46:  		/* addi R11, R31, 4 */
		/* 82155774h case   46:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 82155774h case   46:*/		return 0x82155778;
		  /* 82155778h */ case   47:  		/* bc 12, CR0_EQ, 16 */
		/* 82155778h case   47:*/		if ( regs.CR[0].eq ) { return 0x82155788;  }
		/* 82155778h case   47:*/		return 0x8215577C;
		  /* 8215577Ch */ case   48:  		/* ori R9, R18, 4 */
		/* 8215577Ch case   48:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R18,0x4);
		/* 8215577Ch case   48:*/		return 0x82155780;
		  /* 82155780h */ case   49:  		/* stw R9, <#[R11]> */
		/* 82155780h case   49:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82155780h case   49:*/		return 0x82155784;
		  /* 82155784h */ case   50:  		/* b 8 */
		/* 82155784h case   50:*/		return 0x8215578C;
		/* 82155784h case   50:*/		return 0x82155788;
	}
	return 0x82155788;
} // Block from 821556BCh-82155788h (51 instructions)

//////////////////////////////////////////////////////
// Block at 82155788h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155788);
		  /* 82155788h */ case    0:  		/* stw R18, <#[R11]> */
		/* 82155788h case    0:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R11 + 0x00000000) );
		/* 82155788h case    0:*/		return 0x8215578C;
	}
	return 0x8215578C;
} // Block from 82155788h-8215578Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8215578Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215578C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215578C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215578C);
		  /* 8215578Ch */ case    0:  		/* addi R11, R11, 4 */
		/* 8215578Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8215578Ch case    0:*/		return 0x82155790;
		  /* 82155790h */ case    1:  		/* cmplwi CR6, R23, 0 */
		/* 82155790h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 82155790h case    1:*/		return 0x82155794;
		  /* 82155794h */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 82155794h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821557B0;  }
		/* 82155794h case    2:*/		return 0x82155798;
		  /* 82155798h */ case    3:  		/* cmplwi CR6, R21, 12816 */
		/* 82155798h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00003210);
		/* 82155798h case    3:*/		return 0x8215579C;
		  /* 8215579Ch */ case    4:  		/* bc 4, CR6_EQ, 20 */
		/* 8215579Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x821557B0;  }
		/* 8215579Ch case    4:*/		return 0x821557A0;
		  /* 821557A0h */ case    5:  		/* rlwinm R9, R24, 16, 0, 15 */
		/* 821557A0h case    5:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R9,regs.R24);
		/* 821557A0h case    5:*/		return 0x821557A4;
		  /* 821557A4h */ case    6:  		/* or R9, R9, R25 */
		/* 821557A4h case    6:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R25);
		/* 821557A4h case    6:*/		return 0x821557A8;
		  /* 821557A8h */ case    7:  		/* stw R9, <#[R11]> */
		/* 821557A8h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821557A8h case    7:*/		return 0x821557AC;
		  /* 821557ACh */ case    8:  		/* b 28 */
		/* 821557ACh case    8:*/		return 0x821557C8;
		/* 821557ACh case    8:*/		return 0x821557B0;
	}
	return 0x821557B0;
} // Block from 8215578Ch-821557B0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821557B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821557B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821557B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821557B0);
		  /* 821557B0h */ case    0:  		/* rlwinm R9, R24, 16, 0, 15 */
		/* 821557B0h case    0:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R9,regs.R24);
		/* 821557B0h case    0:*/		return 0x821557B4;
		  /* 821557B4h */ case    1:  		/* or R8, R23, R21 */
		/* 821557B4h case    1:*/		cpu::op::or<0>(regs,&regs.R8,regs.R23,regs.R21);
		/* 821557B4h case    1:*/		return 0x821557B8;
		  /* 821557B8h */ case    2:  		/* oris R9, R9, 64 */
		/* 821557B8h case    2:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x40);
		/* 821557B8h case    2:*/		return 0x821557BC;
		  /* 821557BCh */ case    3:  		/* or R9, R9, R25 */
		/* 821557BCh case    3:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R25);
		/* 821557BCh case    3:*/		return 0x821557C0;
		  /* 821557C0h */ case    4:  		/* stw R9, <#[R11]> */
		/* 821557C0h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821557C0h case    4:*/		return 0x821557C4;
		  /* 821557C4h */ case    5:  		/* stwu R8, <#[R11 + 4]> */
		/* 821557C4h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821557C4h case    5:*/		return 0x821557C8;
	}
	return 0x821557C8;
} // Block from 821557B0h-821557C8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821557C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821557C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821557C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821557C8);
		  /* 821557C8h */ case    0:  		/* rlwinm R9, R30, 28, 29, 31 */
		/* 821557C8h case    0:*/		cpu::op::rlwinm<0,28,29,31>(regs,&regs.R9,regs.R30);
		/* 821557C8h case    0:*/		return 0x821557CC;
		  /* 821557CCh */ case    1:  		/* rlwinm R8, R30, 0, 25, 27 */
		/* 821557CCh case    1:*/		cpu::op::rlwinm<0,0,25,27>(regs,&regs.R8,regs.R30);
		/* 821557CCh case    1:*/		return 0x821557D0;
		  /* 821557D0h */ case    2:  		/* addi R11, R11, 4 */
		/* 821557D0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821557D0h case    2:*/		return 0x821557D4;
		  /* 821557D4h */ case    3:  		/* or R8, R8, R9 */
		/* 821557D4h case    3:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R9);
		/* 821557D4h case    3:*/		return 0x821557D8;
		  /* 821557D8h */ case    4:  		/* oris R7, R27, 65 */
		/* 821557D8h case    4:*/		cpu::op::oris<0>(regs,&regs.R7,regs.R27,0x41);
		/* 821557D8h case    4:*/		return 0x821557DC;
		  /* 821557DCh */ case    5:  		/* li R6, 50 */
		/* 821557DCh case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x32);
		/* 821557DCh case    5:*/		return 0x821557E0;
		  /* 821557E0h */ case    6:  		/* rlwinm R8, R8, 4, 0, 27 */
		/* 821557E0h case    6:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R8,regs.R8);
		/* 821557E0h case    6:*/		return 0x821557E4;
		  /* 821557E4h */ case    7:  		/* stw R7, <#[R11]> */
		/* 821557E4h case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821557E4h case    7:*/		return 0x821557E8;
		  /* 821557E8h */ case    8:  		/* stwu R6, <#[R11 + 4]> */
		/* 821557E8h case    8:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821557E8h case    8:*/		return 0x821557EC;
		  /* 821557ECh */ case    9:  		/* or R8, R8, R9 */
		/* 821557ECh case    9:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R9);
		/* 821557ECh case    9:*/		return 0x821557F0;
		  /* 821557F0h */ case   10:  		/* rlwinm R8, R8, 4, 0, 27 */
		/* 821557F0h case   10:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R8,regs.R8);
		/* 821557F0h case   10:*/		return 0x821557F4;
		  /* 821557F4h */ case   11:  		/* stwu R10, <#[R11 + 4]> */
		/* 821557F4h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821557F4h case   11:*/		return 0x821557F8;
		  /* 821557F8h */ case   12:  		/* or R10, R8, R9 */
		/* 821557F8h case   12:*/		cpu::op::or<0>(regs,&regs.R10,regs.R8,regs.R9);
		/* 821557F8h case   12:*/		return 0x821557FC;
		  /* 821557FCh */ case   13:  		/* or R10, R10, R26 */
		/* 821557FCh case   13:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R26);
		/* 821557FCh case   13:*/		return 0x82155800;
		  /* 82155800h */ case   14:  		/* stwu R10, <#[R11 + 4]> */
		/* 82155800h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82155800h case   14:*/		return 0x82155804;
		  /* 82155804h */ case   15:  		/* addi R11, R11, 4 */
		/* 82155804h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82155804h case   15:*/		return 0x82155808;
		  /* 82155808h */ case   16:  		/* stw R11, <#[R15]> */
		/* 82155808h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R15 + 0x00000000) );
		/* 82155808h case   16:*/		return 0x8215580C;
		  /* 8215580Ch */ case   17:  		/* stw R17, <#[R16]> */
		/* 8215580Ch case   17:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R16 + 0x00000000) );
		/* 8215580Ch case   17:*/		return 0x82155810;
		  /* 82155810h */ case   18:  		/* addi R1, R1, 240 */
		/* 82155810h case   18:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 82155810h case   18:*/		return 0x82155814;
		  /* 82155814h */ case   19:  		/* b -804260 */
		/* 82155814h case   19:*/		return 0x82091270;
		/* 82155814h case   19:*/		return 0x82155818;
	}
	return 0x82155818;
} // Block from 821557C8h-82155818h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82155818h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155818);
		  /* 82155818h */ case    0:  		/* mfspr R12, LR */
		/* 82155818h case    0:*/		regs.R12 = regs.LR;
		/* 82155818h case    0:*/		return 0x8215581C;
		  /* 8215581Ch */ case    1:  		/* bl -804316 */
		/* 8215581Ch case    1:*/		regs.LR = 0x82155820; return 0x82091240;
		/* 8215581Ch case    1:*/		return 0x82155820;
	}
	return 0x82155820;
} // Block from 82155818h-82155820h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82155820h
// Function '?DX9_TEXLDConvertToILFunc@XGRAPHICS@@YAXPAPAKKW4ILOpCode@1@PAU_R400IL_RECORDED_INFO@1@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155820);
		  /* 82155820h */ case    0:  		/* stwu R1, <#[R1 - 176]> */
		/* 82155820h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82155820h case    0:*/		return 0x82155824;
		  /* 82155824h */ case    1:  		/* lwz R11, <#[R6 + 4]> */
		/* 82155824h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000004) );
		/* 82155824h case    1:*/		return 0x82155828;
		  /* 82155828h */ case    2:  		/* mr R24, R3 */
		/* 82155828h case    2:*/		regs.R24 = regs.R3;
		/* 82155828h case    2:*/		return 0x8215582C;
		  /* 8215582Ch */ case    3:  		/* mr R27, R6 */
		/* 8215582Ch case    3:*/		regs.R27 = regs.R6;
		/* 8215582Ch case    3:*/		return 0x82155830;
		  /* 82155830h */ case    4:  		/* mr R23, R7 */
		/* 82155830h case    4:*/		regs.R23 = regs.R7;
		/* 82155830h case    4:*/		return 0x82155834;
		  /* 82155834h */ case    5:  		/* cmpwi CR6, R11, 1 */
		/* 82155834h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82155834h case    5:*/		return 0x82155838;
		  /* 82155838h */ case    6:  		/* bc 4, CR6_EQ, 12 */
		/* 82155838h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82155844;  }
		/* 82155838h case    6:*/		return 0x8215583C;
		  /* 8215583Ch */ case    7:  		/* li R25, 0 */
		/* 8215583Ch case    7:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 8215583Ch case    7:*/		return 0x82155840;
		  /* 82155840h */ case    8:  		/* b 16 */
		/* 82155840h case    8:*/		return 0x82155850;
		/* 82155840h case    8:*/		return 0x82155844;
	}
	return 0x82155844;
} // Block from 82155820h-82155844h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82155844h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155844( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155844) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155844);
		  /* 82155844h */ case    0:  		/* addi R11, R11, -2 */
		/* 82155844h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFE);
		/* 82155844h case    0:*/		return 0x82155848;
		  /* 82155848h */ case    1:  		/* cntlzw R11, R11 */
		/* 82155848h case    1:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82155848h case    1:*/		return 0x8215584C;
		  /* 8215584Ch */ case    2:  		/* rlwinm R25, R11, 27, 31, 31 */
		/* 8215584Ch case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R25,regs.R11);
		/* 8215584Ch case    2:*/		return 0x82155850;
	}
	return 0x82155850;
} // Block from 82155844h-82155850h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82155850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155850);
		  /* 82155850h */ case    0:  		/* lis R11, -1 */
		/* 82155850h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82155850h case    0:*/		return 0x82155854;
		  /* 82155854h */ case    1:  		/* ori R11, R11, 260 */
		/* 82155854h case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x104);
		/* 82155854h case    1:*/		return 0x82155858;
		  /* 82155858h */ case    2:  		/* cmplw CR6, R4, R11 */
		/* 82155858h case    2:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82155858h case    2:*/		return 0x8215585C;
		  /* 8215585Ch */ case    3:  		/* bc 12, CR6_LT, 8 */
		/* 8215585Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x82155864;  }
		/* 8215585Ch case    3:*/		return 0x82155860;
		  /* 82155860h */ case    4:  		/* bl 1120768 */
		/* 82155860h case    4:*/		regs.LR = 0x82155864; return 0x82267260;
		/* 82155860h case    4:*/		return 0x82155864;
	}
	return 0x82155864;
} // Block from 82155850h-82155864h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82155864h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155864( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155864) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155864);
		  /* 82155864h */ case    0:  		/* lwz R11, <#[R24]> */
		/* 82155864h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 82155864h case    0:*/		return 0x82155868;
		  /* 82155868h */ case    1:  		/* lwz R28, <#[R23]> */
		/* 82155868h case    1:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R23 + 0x00000000) );
		/* 82155868h case    1:*/		return 0x8215586C;
		  /* 8215586Ch */ case    2:  		/* lwz R26, <#[R11]> */
		/* 8215586Ch case    2:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + 0x00000000) );
		/* 8215586Ch case    2:*/		return 0x82155870;
		  /* 82155870h */ case    3:  		/* lwzu R31, <#[R11 + 4]> */
		/* 82155870h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82155870h case    3:*/		return 0x82155874;
		  /* 82155874h */ case    4:  		/* mr R10, R31 */
		/* 82155874h case    4:*/		regs.R10 = regs.R31;
		/* 82155874h case    4:*/		return 0x82155878;
		  /* 82155878h */ case    5:  		/* rlwinm R29, R31, 0, 21, 31 */
		/* 82155878h case    5:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R29,regs.R31);
		/* 82155878h case    5:*/		return 0x8215587C;
		  /* 8215587Ch */ case    6:  		/* rlwimi R10, R31, 12, 21, 23 */
		/* 8215587Ch case    6:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R10,regs.R31);
		/* 8215587Ch case    6:*/		return 0x82155880;
		  /* 82155880h */ case    7:  		/* lwzu R30, <#[R11 + 4]> */
		/* 82155880h case    7:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82155880h case    7:*/		return 0x82155884;
		  /* 82155884h */ case    8:  		/* rlwinm R10, R10, 0, 19, 23 */
		/* 82155884h case    8:*/		cpu::op::rlwinm<0,0,19,23>(regs,&regs.R10,regs.R10);
		/* 82155884h case    8:*/		return 0x82155888;
		  /* 82155888h */ case    9:  		/* addi R22, R11, 4 */
		/* 82155888h case    9:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R11,0x4);
		/* 82155888h case    9:*/		return 0x8215588C;
		  /* 8215588Ch */ case   10:  		/* cmplwi CR6, R10, 768 */
		/* 8215588Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000300);
		/* 8215588Ch case   10:*/		return 0x82155890;
		  /* 82155890h */ case   11:  		/* bc 12, CR6_EQ, 8 */
		/* 82155890h case   11:*/		if ( regs.CR[6].eq ) { return 0x82155898;  }
		/* 82155890h case   11:*/		return 0x82155894;
		  /* 82155894h */ case   12:  		/* bl 1120716 */
		/* 82155894h case   12:*/		regs.LR = 0x82155898; return 0x82267260;
		/* 82155894h case   12:*/		return 0x82155898;
	}
	return 0x82155898;
} // Block from 82155864h-82155898h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82155898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155898);
		  /* 82155898h */ case    0:  		/* rlwimi R29, R25, 8, 23, 23 */
		/* 82155898h case    0:*/		cpu::op::rlwimi<0,8,23,23>(regs,&regs.R29,regs.R25);
		/* 82155898h case    0:*/		return 0x8215589C;
		  /* 8215589Ch */ case    1:  		/* li R11, 93 */
		/* 8215589Ch case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x5D);
		/* 8215589Ch case    1:*/		return 0x821558A0;
		  /* 821558A0h */ case    2:  		/* rlwinm R10, R29, 0, 23, 31 */
		/* 821558A0h case    2:*/		cpu::op::rlwinm<0,0,23,31>(regs,&regs.R10,regs.R29);
		/* 821558A0h case    2:*/		return 0x821558A4;
		  /* 821558A4h */ case    3:  		/* addi R9, R28, 4 */
		/* 821558A4h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R28,0x4);
		/* 821558A4h case    3:*/		return 0x821558A8;
		  /* 821558A8h */ case    4:  		/* rlwimi R11, R10, 16, 0, 15 */
		/* 821558A8h case    4:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R11,regs.R10);
		/* 821558A8h case    4:*/		return 0x821558AC;
		  /* 821558ACh */ case    5:  		/* stw R9, <#[R1 + 80]> */
		/* 821558ACh case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 821558ACh case    5:*/		return 0x821558B0;
		  /* 821558B0h */ case    6:  		/* addi R5, R1, 80 */
		/* 821558B0h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821558B0h case    6:*/		return 0x821558B4;
		  /* 821558B4h */ case    7:  		/* stw R11, <#[R28]> */
		/* 821558B4h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821558B4h case    7:*/		return 0x821558B8;
		  /* 821558B8h */ case    8:  		/* mr R4, R27 */
		/* 821558B8h case    8:*/		regs.R4 = regs.R27;
		/* 821558B8h case    8:*/		return 0x821558BC;
		  /* 821558BCh */ case    9:  		/* mr R3, R31 */
		/* 821558BCh case    9:*/		regs.R3 = regs.R31;
		/* 821558BCh case    9:*/		return 0x821558C0;
		  /* 821558C0h */ case   10:  		/* bl -8992 */
		/* 821558C0h case   10:*/		regs.LR = 0x821558C4; return 0x821535A0;
		/* 821558C0h case   10:*/		return 0x821558C4;
		  /* 821558C4h */ case   11:  		/* mr R11, R30 */
		/* 821558C4h case   11:*/		regs.R11 = regs.R30;
		/* 821558C4h case   11:*/		return 0x821558C8;
		  /* 821558C8h */ case   12:  		/* rlwimi R11, R30, 12, 21, 23 */
		/* 821558C8h case   12:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R11,regs.R30);
		/* 821558C8h case   12:*/		return 0x821558CC;
		  /* 821558CCh */ case   13:  		/* rlwinm R11, R11, 0, 19, 23 */
		/* 821558CCh case   13:*/		cpu::op::rlwinm<0,0,19,23>(regs,&regs.R11,regs.R11);
		/* 821558CCh case   13:*/		return 0x821558D0;
		  /* 821558D0h */ case   14:  		/* cmplwi CR6, R11, 768 */
		/* 821558D0h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000300);
		/* 821558D0h case   14:*/		return 0x821558D4;
		  /* 821558D4h */ case   15:  		/* bc 12, CR6_EQ, 8 */
		/* 821558D4h case   15:*/		if ( regs.CR[6].eq ) { return 0x821558DC;  }
		/* 821558D4h case   15:*/		return 0x821558D8;
		  /* 821558D8h */ case   16:  		/* bl 1120648 */
		/* 821558D8h case   16:*/		regs.LR = 0x821558DC; return 0x82267260;
		/* 821558D8h case   16:*/		return 0x821558DC;
	}
	return 0x821558DC;
} // Block from 82155898h-821558DCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821558DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821558DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821558DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821558DC);
		  /* 821558DCh */ case    0:  		/* addi R5, R1, 84 */
		/* 821558DCh case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 821558DCh case    0:*/		return 0x821558E0;
		  /* 821558E0h */ case    1:  		/* mr R4, R27 */
		/* 821558E0h case    1:*/		regs.R4 = regs.R27;
		/* 821558E0h case    1:*/		return 0x821558E4;
		  /* 821558E4h */ case    2:  		/* mr R3, R30 */
		/* 821558E4h case    2:*/		regs.R3 = regs.R30;
		/* 821558E4h case    2:*/		return 0x821558E8;
		  /* 821558E8h */ case    3:  		/* bl -9416 */
		/* 821558E8h case    3:*/		regs.LR = 0x821558EC; return 0x82153420;
		/* 821558E8h case    3:*/		return 0x821558EC;
		  /* 821558ECh */ case    4:  		/* mr R29, R3 */
		/* 821558ECh case    4:*/		regs.R29 = regs.R3;
		/* 821558ECh case    4:*/		return 0x821558F0;
		  /* 821558F0h */ case    5:  		/* rlwinm R3, R30, 0, 4, 7 */
		/* 821558F0h case    5:*/		cpu::op::rlwinm<0,0,4,7>(regs,&regs.R3,regs.R30);
		/* 821558F0h case    5:*/		return 0x821558F4;
		  /* 821558F4h */ case    6:  		/* bl -11092 */
		/* 821558F4h case    6:*/		regs.LR = 0x821558F8; return 0x82152DA0;
		/* 821558F4h case    6:*/		return 0x821558F8;
		  /* 821558F8h */ case    7:  		/* rlwinm R31, R30, 0, 8, 15 */
		/* 821558F8h case    7:*/		cpu::op::rlwinm<0,0,8,15>(regs,&regs.R31,regs.R30);
		/* 821558F8h case    7:*/		return 0x821558FC;
		  /* 821558FCh */ case    8:  		/* lis R11, 228 */
		/* 821558FCh case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0xE4);
		/* 821558FCh case    8:*/		return 0x82155900;
		  /* 82155900h */ case    9:  		/* mr R30, R3 */
		/* 82155900h case    9:*/		regs.R30 = regs.R3;
		/* 82155900h case    9:*/		return 0x82155904;
		  /* 82155904h */ case   10:  		/* cmplw CR6, R31, R11 */
		/* 82155904h case   10:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 82155904h case   10:*/		return 0x82155908;
		  /* 82155908h */ case   11:  		/* bc 12, CR6_EQ, 84 */
		/* 82155908h case   11:*/		if ( regs.CR[6].eq ) { return 0x8215595C;  }
		/* 82155908h case   11:*/		return 0x8215590C;
		  /* 8215590Ch */ case   12:  		/* bl 1120596 */
		/* 8215590Ch case   12:*/		regs.LR = 0x82155910; return 0x82267260;
		/* 8215590Ch case   12:*/		return 0x82155910;
		  /* 82155910h */ case   13:  		/* rlwinm R11, R31, 14, 18, 31 */
		/* 82155910h case   13:*/		cpu::op::rlwinm<0,14,18,31>(regs,&regs.R11,regs.R31);
		/* 82155910h case   13:*/		return 0x82155914;
		  /* 82155914h */ case   14:  		/* lis R10, -32217 */
		/* 82155914h case   14:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8227);
		/* 82155914h case   14:*/		return 0x82155918;
		  /* 82155918h */ case   15:  		/* rlwinm R9, R11, 30, 2, 31 */
		/* 82155918h case   15:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R9,regs.R11);
		/* 82155918h case   15:*/		return 0x8215591C;
		  /* 8215591Ch */ case   16:  		/* addi R10, R10, 19772 */
		/* 8215591Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4D3C);
		/* 8215591Ch case   16:*/		return 0x82155920;
		  /* 82155920h */ case   17:  		/* rlwinm R11, R11, 2, 28, 29 */
		/* 82155920h case   17:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R11,regs.R11);
		/* 82155920h case   17:*/		return 0x82155924;
		  /* 82155924h */ case   18:  		/* rlwinm R7, R9, 2, 28, 29 */
		/* 82155924h case   18:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R7,regs.R9);
		/* 82155924h case   18:*/		return 0x82155928;
		  /* 82155928h */ case   19:  		/* rlwinm R8, R31, 18, 28, 29 */
		/* 82155928h case   19:*/		cpu::op::rlwinm<0,18,28,29>(regs,&regs.R8,regs.R31);
		/* 82155928h case   19:*/		return 0x8215592C;
		  /* 8215592Ch */ case   20:  		/* rlwinm R9, R9, 0, 28, 29 */
		/* 8215592Ch case   20:*/		cpu::op::rlwinm<0,0,28,29>(regs,&regs.R9,regs.R9);
		/* 8215592Ch case   20:*/		return 0x82155930;
		  /* 82155930h */ case   21:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82155930h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82155930h case   21:*/		return 0x82155934;
		  /* 82155934h */ case   22:  		/* lwzx R8, <#[R8 + R10]> */
		/* 82155934h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 82155934h case   22:*/		return 0x82155938;
		  /* 82155938h */ case   23:  		/* lwzx R7, <#[R7 + R10]> */
		/* 82155938h case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R10 + 0x00000000) );
		/* 82155938h case   23:*/		return 0x8215593C;
		  /* 8215593Ch */ case   24:  		/* rlwinm R11, R11, 4, 0, 27 */
		/* 8215593Ch case   24:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R11);
		/* 8215593Ch case   24:*/		return 0x82155940;
		  /* 82155940h */ case   25:  		/* lwzx R10, <#[R9 + R10]> */
		/* 82155940h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 82155940h case   25:*/		return 0x82155944;
		  /* 82155944h */ case   26:  		/* or R11, R11, R8 */
		/* 82155944h case   26:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82155944h case   26:*/		return 0x82155948;
		  /* 82155948h */ case   27:  		/* rlwinm R9, R7, 8, 0, 23 */
		/* 82155948h case   27:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R9,regs.R7);
		/* 82155948h case   27:*/		return 0x8215594C;
		  /* 8215594Ch */ case   28:  		/* rlwinm R10, R10, 12, 0, 19 */
		/* 8215594Ch case   28:*/		cpu::op::rlwinm<0,12,0,19>(regs,&regs.R10,regs.R10);
		/* 8215594Ch case   28:*/		return 0x82155950;
		  /* 82155950h */ case   29:  		/* or R11, R9, R11 */
		/* 82155950h case   29:*/		cpu::op::or<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82155950h case   29:*/		return 0x82155954;
		  /* 82155954h */ case   30:  		/* or R11, R10, R11 */
		/* 82155954h case   30:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82155954h case   30:*/		return 0x82155958;
		  /* 82155958h */ case   31:  		/* b 8 */
		/* 82155958h case   31:*/		return 0x82155960;
		/* 82155958h case   31:*/		return 0x8215595C;
	}
	return 0x8215595C;
} // Block from 821558DCh-8215595Ch (32 instructions)

//////////////////////////////////////////////////////
// Block at 8215595Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8215595C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8215595C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8215595C);
		  /* 8215595Ch */ case    0:  		/* li R11, 12816 */
		/* 8215595Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x3210);
		/* 8215595Ch case    0:*/		return 0x82155960;
	}
	return 0x82155960;
} // Block from 8215595Ch-82155960h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82155960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155960);
		  /* 82155960h */ case    0:  		/* cmplwi CR6, R26, 82 */
		/* 82155960h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000052);
		/* 82155960h case    0:*/		return 0x82155964;
		  /* 82155964h */ case    1:  		/* bc 4, CR6_EQ, 48 */
		/* 82155964h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82155994;  }
		/* 82155964h case    1:*/		return 0x82155968;
		  /* 82155968h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 82155968h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82155968h case    2:*/		return 0x8215596C;
		  /* 8215596Ch */ case    3:  		/* bc 4, CR6_EQ, 40 */
		/* 8215596Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82155994;  }
		/* 8215596Ch case    3:*/		return 0x82155970;
		  /* 82155970h */ case    4:  		/* cmplwi CR6, R11, 12816 */
		/* 82155970h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003210);
		/* 82155970h case    4:*/		return 0x82155974;
		  /* 82155974h */ case    5:  		/* bc 4, CR6_EQ, 32 */
		/* 82155974h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82155994;  }
		/* 82155974h case    5:*/		return 0x82155978;
		  /* 82155978h */ case    6:  		/* lwz R10, <#[R1 + 84]> */
		/* 82155978h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 82155978h case    6:*/		return 0x8215597C;
		  /* 8215597Ch */ case    7:  		/* lwz R11, <#[R1 + 80]> */
		/* 8215597Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8215597Ch case    7:*/		return 0x82155980;
		  /* 82155980h */ case    8:  		/* rlwimi R29, R10, 16, 10, 15 */
		/* 82155980h case    8:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R29,regs.R10);
		/* 82155980h case    8:*/		return 0x82155984;
		  /* 82155984h */ case    9:  		/* rlwinm R10, R29, 0, 10, 31 */
		/* 82155984h case    9:*/		cpu::op::rlwinm<0,0,10,31>(regs,&regs.R10,regs.R29);
		/* 82155984h case    9:*/		return 0x82155988;
		  /* 82155988h */ case   10:  		/* stw R10, <#[R11]> */
		/* 82155988h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82155988h case   10:*/		return 0x8215598C;
		  /* 8215598Ch */ case   11:  		/* addi R11, R11, 4 */
		/* 8215598Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8215598Ch case   11:*/		return 0x82155990;
		  /* 82155990h */ case   12:  		/* b 96 */
		/* 82155990h case   12:*/		return 0x821559F0;
		/* 82155990h case   12:*/		return 0x82155994;
	}
	return 0x82155994;
} // Block from 82155960h-82155994h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82155994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155994);
		  /* 82155994h */ case    0:  		/* lwz R9, <#[R1 + 84]> */
		/* 82155994h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 82155994h case    0:*/		return 0x82155998;
		  /* 82155998h */ case    1:  		/* lis R8, 64 */
		/* 82155998h case    1:*/		cpu::op::lis<0>(regs,&regs.R8,0x40);
		/* 82155998h case    1:*/		return 0x8215599C;
		  /* 8215599Ch */ case    2:  		/* lwz R10, <#[R1 + 80]> */
		/* 8215599Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8215599Ch case    2:*/		return 0x821559A0;
		  /* 821559A0h */ case    3:  		/* rlwinm R7, R29, 0, 16, 31 */
		/* 821559A0h case    3:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R7,regs.R29);
		/* 821559A0h case    3:*/		return 0x821559A4;
		  /* 821559A4h */ case    4:  		/* rlwimi R8, R9, 16, 10, 15 */
		/* 821559A4h case    4:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R8,regs.R9);
		/* 821559A4h case    4:*/		return 0x821559A8;
		  /* 821559A8h */ case    5:  		/* cmplwi CR6, R26, 69 */
		/* 821559A8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000045);
		/* 821559A8h case    5:*/		return 0x821559AC;
		  /* 821559ACh */ case    6:  		/* or R9, R8, R7 */
		/* 821559ACh case    6:*/		cpu::op::or<0>(regs,&regs.R9,regs.R8,regs.R7);
		/* 821559ACh case    6:*/		return 0x821559B0;
		  /* 821559B0h */ case    7:  		/* stw R9, <#[R10]> */
		/* 821559B0h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821559B0h case    7:*/		return 0x821559B4;
		  /* 821559B4h */ case    8:  		/* addi R10, R10, 4 */
		/* 821559B4h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821559B4h case    8:*/		return 0x821559B8;
		  /* 821559B8h */ case    9:  		/* bc 4, CR6_EQ, 24 */
		/* 821559B8h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821559D0;  }
		/* 821559B8h case    9:*/		return 0x821559BC;
		  /* 821559BCh */ case   10:  		/* li R9, 13312 */
		/* 821559BCh case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x3400);
		/* 821559BCh case   10:*/		return 0x821559C0;
		  /* 821559C0h */ case   11:  		/* rlwinm R8, R11, 20, 29, 31 */
		/* 821559C0h case   11:*/		cpu::op::rlwinm<0,20,29,31>(regs,&regs.R8,regs.R11);
		/* 821559C0h case   11:*/		return 0x821559C4;
		  /* 821559C4h */ case   12:  		/* rlwimi R9, R11, 4, 25, 27 */
		/* 821559C4h case   12:*/		cpu::op::rlwimi<0,4,25,27>(regs,&regs.R9,regs.R11);
		/* 821559C4h case   12:*/		return 0x821559C8;
		  /* 821559C8h */ case   13:  		/* or R11, R9, R8 */
		/* 821559C8h case   13:*/		cpu::op::or<0>(regs,&regs.R11,regs.R9,regs.R8);
		/* 821559C8h case   13:*/		return 0x821559CC;
		  /* 821559CCh */ case   14:  		/* b 24 */
		/* 821559CCh case   14:*/		return 0x821559E4;
		/* 821559CCh case   14:*/		return 0x821559D0;
	}
	return 0x821559D0;
} // Block from 82155994h-821559D0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821559D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821559D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821559D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821559D0);
		  /* 821559D0h */ case    0:  		/* cmplwi CR6, R26, 70 */
		/* 821559D0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000046);
		/* 821559D0h case    0:*/		return 0x821559D4;
		  /* 821559D4h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 821559D4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821559E4;  }
		/* 821559D4h case    1:*/		return 0x821559D8;
		  /* 821559D8h */ case    2:  		/* rlwinm R11, R11, 28, 25, 31 */
		/* 821559D8h case    2:*/		cpu::op::rlwinm<0,28,25,31>(regs,&regs.R11,regs.R11);
		/* 821559D8h case    2:*/		return 0x821559DC;
		  /* 821559DCh */ case    3:  		/* rlwinm R11, R11, 0, 29, 27 */
		/* 821559DCh case    3:*/		cpu::op::rlwinm<0,0,29,27>(regs,&regs.R11,regs.R11);
		/* 821559DCh case    3:*/		return 0x821559E0;
		  /* 821559E0h */ case    4:  		/* ori R11, R11, 13312 */
		/* 821559E0h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x3400);
		/* 821559E0h case    4:*/		return 0x821559E4;
	}
	return 0x821559E4;
} // Block from 821559D0h-821559E4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821559E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821559E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821559E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821559E4);
		  /* 821559E4h */ case    0:  		/* or R9, R11, R30 */
		/* 821559E4h case    0:*/		cpu::op::or<0>(regs,&regs.R9,regs.R11,regs.R30);
		/* 821559E4h case    0:*/		return 0x821559E8;
		  /* 821559E8h */ case    1:  		/* addi R11, R10, 4 */
		/* 821559E8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x4);
		/* 821559E8h case    1:*/		return 0x821559EC;
		  /* 821559ECh */ case    2:  		/* stw R9, <#[R10]> */
		/* 821559ECh case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821559ECh case    2:*/		return 0x821559F0;
	}
	return 0x821559F0;
} // Block from 821559E4h-821559F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821559F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821559F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821559F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821559F0);
		  /* 821559F0h */ case    0:  		/* stw R11, <#[R23]> */
		/* 821559F0h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821559F0h case    0:*/		return 0x821559F4;
		  /* 821559F4h */ case    1:  		/* stw R22, <#[R24]> */
		/* 821559F4h case    1:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R24 + 0x00000000) );
		/* 821559F4h case    1:*/		return 0x821559F8;
		  /* 821559F8h */ case    2:  		/* addi R1, R1, 176 */
		/* 821559F8h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 821559F8h case    2:*/		return 0x821559FC;
		  /* 821559FCh */ case    3:  		/* b -804716 */
		/* 821559FCh case    3:*/		return 0x82091290;
		/* 821559FCh case    3:*/		return 0x82155A00;
	}
	return 0x82155A00;
} // Block from 821559F0h-82155A00h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82155A00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155A00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155A00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155A00);
		  /* 82155A00h */ case    0:  		/* mfspr R12, LR */
		/* 82155A00h case    0:*/		regs.R12 = regs.LR;
		/* 82155A00h case    0:*/		return 0x82155A04;
		  /* 82155A04h */ case    1:  		/* bl -804796 */
		/* 82155A04h case    1:*/		regs.LR = 0x82155A08; return 0x82091248;
		/* 82155A04h case    1:*/		return 0x82155A08;
		  /* 82155A08h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 82155A08h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 82155A08h case    2:*/		return 0x82155A0C;
		  /* 82155A0Ch */ case    3:  		/* lis R11, -1 */
		/* 82155A0Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82155A0Ch case    3:*/		return 0x82155A10;
		  /* 82155A10h */ case    4:  		/* mr R28, R3 */
		/* 82155A10h case    4:*/		regs.R28 = regs.R3;
		/* 82155A10h case    4:*/		return 0x82155A14;
		  /* 82155A14h */ case    5:  		/* ori R11, R11, 260 */
		/* 82155A14h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x104);
		/* 82155A14h case    5:*/		return 0x82155A18;
		  /* 82155A18h */ case    6:  		/* mr R24, R6 */
		/* 82155A18h case    6:*/		regs.R24 = regs.R6;
		/* 82155A18h case    6:*/		return 0x82155A1C;
		  /* 82155A1Ch */ case    7:  		/* mr R27, R7 */
		/* 82155A1Ch case    7:*/		regs.R27 = regs.R7;
		/* 82155A1Ch case    7:*/		return 0x82155A20;
		  /* 82155A20h */ case    8:  		/* cmplw CR6, R4, R11 */
		/* 82155A20h case    8:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82155A20h case    8:*/		return 0x82155A24;
		  /* 82155A24h */ case    9:  		/* bc 12, CR6_LT, 8 */
		/* 82155A24h case    9:*/		if ( regs.CR[6].lt ) { return 0x82155A2C;  }
		/* 82155A24h case    9:*/		return 0x82155A28;
		  /* 82155A28h */ case   10:  		/* bl 1120312 */
		/* 82155A28h case   10:*/		regs.LR = 0x82155A2C; return 0x82267260;
		/* 82155A28h case   10:*/		return 0x82155A2C;
	}
	return 0x82155A2C;
} // Block from 82155A00h-82155A2Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82155A2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155A2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155A2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155A2C);
		  /* 82155A2Ch */ case    0:  		/* lwz R11, <#[R28]> */
		/* 82155A2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82155A2Ch case    0:*/		return 0x82155A30;
		  /* 82155A30h */ case    1:  		/* lwz R31, <#[R27]> */
		/* 82155A30h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + 0x00000000) );
		/* 82155A30h case    1:*/		return 0x82155A34;
		  /* 82155A34h */ case    2:  		/* addi R11, R11, 4 */
		/* 82155A34h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82155A34h case    2:*/		return 0x82155A38;
		  /* 82155A38h */ case    3:  		/* lwz R10, <#[R11]> */
		/* 82155A38h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82155A38h case    3:*/		return 0x82155A3C;
		  /* 82155A3Ch */ case    4:  		/* lwzu R26, <#[R11 + 4]> */
		/* 82155A3Ch case    4:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82155A3Ch case    4:*/		return 0x82155A40;
		  /* 82155A40h */ case    5:  		/* mr R9, R10 */
		/* 82155A40h case    5:*/		regs.R9 = regs.R10;
		/* 82155A40h case    5:*/		return 0x82155A44;
		  /* 82155A44h */ case    6:  		/* addi R25, R11, 4 */
		/* 82155A44h case    6:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x4);
		/* 82155A44h case    6:*/		return 0x82155A48;
		  /* 82155A48h */ case    7:  		/* rlwimi R9, R10, 12, 21, 23 */
		/* 82155A48h case    7:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R9,regs.R10);
		/* 82155A48h case    7:*/		return 0x82155A4C;
		  /* 82155A4Ch */ case    8:  		/* rlwinm R30, R10, 0, 21, 31 */
		/* 82155A4Ch case    8:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R30,regs.R10);
		/* 82155A4Ch case    8:*/		return 0x82155A50;
		  /* 82155A50h */ case    9:  		/* rlwinm R29, R9, 24, 27, 31 */
		/* 82155A50h case    9:*/		cpu::op::rlwinm<0,24,27,31>(regs,&regs.R29,regs.R9);
		/* 82155A50h case    9:*/		return 0x82155A54;
		  /* 82155A54h */ case   10:  		/* cmplwi CR6, R29, 3 */
		/* 82155A54h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000003);
		/* 82155A54h case   10:*/		return 0x82155A58;
		  /* 82155A58h */ case   11:  		/* bc 12, CR6_EQ, 8 */
		/* 82155A58h case   11:*/		if ( regs.CR[6].eq ) { return 0x82155A60;  }
		/* 82155A58h case   11:*/		return 0x82155A5C;
		  /* 82155A5Ch */ case   12:  		/* bl 1120260 */
		/* 82155A5Ch case   12:*/		regs.LR = 0x82155A60; return 0x82267260;
		/* 82155A5Ch case   12:*/		return 0x82155A60;
	}
	return 0x82155A60;
} // Block from 82155A2Ch-82155A60h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82155A60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155A60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155A60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155A60);
		  /* 82155A60h */ case    0:  		/* addi R6, R1, 80 */
		/* 82155A60h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82155A60h case    0:*/		return 0x82155A64;
		  /* 82155A64h */ case    1:  		/* mr R5, R24 */
		/* 82155A64h case    1:*/		regs.R5 = regs.R24;
		/* 82155A64h case    1:*/		return 0x82155A68;
		  /* 82155A68h */ case    2:  		/* addi R4, R30, 1 */
		/* 82155A68h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R30,0x1);
		/* 82155A68h case    2:*/		return 0x82155A6C;
		  /* 82155A6Ch */ case    3:  		/* mr R3, R29 */
		/* 82155A6Ch case    3:*/		regs.R3 = regs.R29;
		/* 82155A6Ch case    3:*/		return 0x82155A70;
		  /* 82155A70h */ case    4:  		/* bl -11136 */
		/* 82155A70h case    4:*/		regs.LR = 0x82155A74; return 0x82152EF0;
		/* 82155A70h case    4:*/		return 0x82155A74;
		  /* 82155A74h */ case    5:  		/* lwz R11, <#[R1 + 80]> */
		/* 82155A74h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82155A74h case    5:*/		return 0x82155A78;
		  /* 82155A78h */ case    6:  		/* lis R10, 64 */
		/* 82155A78h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0x40);
		/* 82155A78h case    6:*/		return 0x82155A7C;
		  /* 82155A7Ch */ case    7:  		/* rlwinm R9, R3, 0, 16, 31 */
		/* 82155A7Ch case    7:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R3);
		/* 82155A7Ch case    7:*/		return 0x82155A80;
		  /* 82155A80h */ case    8:  		/* rlwimi R10, R11, 16, 10, 15 */
		/* 82155A80h case    8:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R10,regs.R11);
		/* 82155A80h case    8:*/		return 0x82155A84;
		  /* 82155A84h */ case    9:  		/* li R11, 34 */
		/* 82155A84h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x22);
		/* 82155A84h case    9:*/		return 0x82155A88;
		  /* 82155A88h */ case   10:  		/* or R10, R10, R9 */
		/* 82155A88h case   10:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82155A88h case   10:*/		return 0x82155A8C;
		  /* 82155A8Ch */ case   11:  		/* stw R11, <#[R31]> */
		/* 82155A8Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82155A8Ch case   11:*/		return 0x82155A90;
		  /* 82155A90h */ case   12:  		/* li R11, 1 */
		/* 82155A90h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82155A90h case   12:*/		return 0x82155A94;
		  /* 82155A94h */ case   13:  		/* stwu R10, <#[R31 + 4]> */
		/* 82155A94h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82155A94h case   13:*/		return 0x82155A98;
		  /* 82155A98h */ case   14:  		/* li R10, 17 */
		/* 82155A98h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x11);
		/* 82155A98h case   14:*/		return 0x82155A9C;
		  /* 82155A9Ch */ case   15:  		/* addi R7, R1, 80 */
		/* 82155A9Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82155A9Ch case   15:*/		return 0x82155AA0;
		  /* 82155AA0h */ case   16:  		/* rlwimi R30, R10, 16, 0, 15 */
		/* 82155AA0h case   16:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R30,regs.R10);
		/* 82155AA0h case   16:*/		return 0x82155AA4;
		  /* 82155AA4h */ case   17:  		/* mr R6, R24 */
		/* 82155AA4h case   17:*/		regs.R6 = regs.R24;
		/* 82155AA4h case   17:*/		return 0x82155AA8;
		  /* 82155AA8h */ case   18:  		/* li R5, 0 */
		/* 82155AA8h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82155AA8h case   18:*/		return 0x82155AAC;
		  /* 82155AACh */ case   19:  		/* stwu R11, <#[R31 + 4]> */
		/* 82155AACh case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82155AACh case   19:*/		return 0x82155AB0;
	}
	return 0x82155AB0;
} // Block from 82155A60h-82155AB0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82155AB0h
// Function '?TEXBEMConvertToILFunc@XGRAPHICS@@YAXPAPAKKW4ILOpCode@1@PAU_R400IL_RECORDED_INFO@1@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155AB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155AB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155AB0);
		  /* 82155AB0h */ case    0:  		/* li R4, 0 */
		/* 82155AB0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82155AB0h case    0:*/		return 0x82155AB4;
		  /* 82155AB4h */ case    1:  		/* mr R3, R26 */
		/* 82155AB4h case    1:*/		regs.R3 = regs.R26;
		/* 82155AB4h case    1:*/		return 0x82155AB8;
		  /* 82155AB8h */ case    2:  		/* stwu R30, <#[R31 + 4]> */
		/* 82155AB8h case    2:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82155AB8h case    2:*/		return 0x82155ABC;
		  /* 82155ABCh */ case    3:  		/* addi R11, R31, 4 */
		/* 82155ABCh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 82155ABCh case    3:*/		return 0x82155AC0;
		  /* 82155AC0h */ case    4:  		/* stw R11, <#[R1 + 80]> */
		/* 82155AC0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82155AC0h case    4:*/		return 0x82155AC4;
		  /* 82155AC4h */ case    5:  		/* bl -9220 */
		/* 82155AC4h case    5:*/		regs.LR = 0x82155AC8; return 0x821536C0;
		/* 82155AC4h case    5:*/		return 0x82155AC8;
		  /* 82155AC8h */ case    6:  		/* lwz R11, <#[R1 + 80]> */
		/* 82155AC8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82155AC8h case    6:*/		return 0x82155ACC;
		  /* 82155ACCh */ case    7:  		/* stw R11, <#[R27]> */
		/* 82155ACCh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 82155ACCh case    7:*/		return 0x82155AD0;
		  /* 82155AD0h */ case    8:  		/* stw R25, <#[R28]> */
		/* 82155AD0h case    8:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R28 + 0x00000000) );
		/* 82155AD0h case    8:*/		return 0x82155AD4;
		  /* 82155AD4h */ case    9:  		/* addi R1, R1, 160 */
		/* 82155AD4h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 82155AD4h case    9:*/		return 0x82155AD8;
		  /* 82155AD8h */ case   10:  		/* b -804928 */
		/* 82155AD8h case   10:*/		return 0x82091298;
		/* 82155AD8h case   10:*/		return 0x82155ADC;
		  /* 82155ADCh */ case   11:  		/* nop */
		/* 82155ADCh case   11:*/		cpu::op::nop();
		/* 82155ADCh case   11:*/		return 0x82155AE0;
	}
	return 0x82155AE0;
} // Block from 82155AB0h-82155AE0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82155AE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155AE0);
		  /* 82155AE0h */ case    0:  		/* mfspr R12, LR */
		/* 82155AE0h case    0:*/		regs.R12 = regs.LR;
		/* 82155AE0h case    0:*/		return 0x82155AE4;
		  /* 82155AE4h */ case    1:  		/* bl -805028 */
		/* 82155AE4h case    1:*/		regs.LR = 0x82155AE8; return 0x82091240;
		/* 82155AE4h case    1:*/		return 0x82155AE8;
		  /* 82155AE8h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 82155AE8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 82155AE8h case    2:*/		return 0x82155AEC;
		  /* 82155AECh */ case    3:  		/* lis R11, -1 */
		/* 82155AECh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82155AECh case    3:*/		return 0x82155AF0;
		  /* 82155AF0h */ case    4:  		/* mr R23, R3 */
		/* 82155AF0h case    4:*/		regs.R23 = regs.R3;
		/* 82155AF0h case    4:*/		return 0x82155AF4;
		  /* 82155AF4h */ case    5:  		/* ori R11, R11, 260 */
		/* 82155AF4h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x104);
		/* 82155AF4h case    5:*/		return 0x82155AF8;
		  /* 82155AF8h */ case    6:  		/* mr R24, R6 */
		/* 82155AF8h case    6:*/		regs.R24 = regs.R6;
		/* 82155AF8h case    6:*/		return 0x82155AFC;
		  /* 82155AFCh */ case    7:  		/* mr R22, R7 */
		/* 82155AFCh case    7:*/		regs.R22 = regs.R7;
		/* 82155AFCh case    7:*/		return 0x82155B00;
		  /* 82155B00h */ case    8:  		/* cmplw CR6, R4, R11 */
		/* 82155B00h case    8:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82155B00h case    8:*/		return 0x82155B04;
		  /* 82155B04h */ case    9:  		/* bc 12, CR6_LT, 8 */
		/* 82155B04h case    9:*/		if ( regs.CR[6].lt ) { return 0x82155B0C;  }
		/* 82155B04h case    9:*/		return 0x82155B08;
		  /* 82155B08h */ case   10:  		/* bl 1120088 */
		/* 82155B08h case   10:*/		regs.LR = 0x82155B0C; return 0x82267260;
		/* 82155B08h case   10:*/		return 0x82155B0C;
	}
	return 0x82155B0C;
} // Block from 82155AE0h-82155B0Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82155B0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155B0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155B0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155B0C);
		  /* 82155B0Ch */ case    0:  		/* lwz R11, <#[R23]> */
		/* 82155B0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 82155B0Ch case    0:*/		return 0x82155B10;
		  /* 82155B10h */ case    1:  		/* lwz R31, <#[R22]> */
		/* 82155B10h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R22 + 0x00000000) );
		/* 82155B10h case    1:*/		return 0x82155B14;
		  /* 82155B14h */ case    2:  		/* addi R11, R11, 4 */
		/* 82155B14h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82155B14h case    2:*/		return 0x82155B18;
		  /* 82155B18h */ case    3:  		/* lwz R10, <#[R11]> */
		/* 82155B18h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82155B18h case    3:*/		return 0x82155B1C;
		  /* 82155B1Ch */ case    4:  		/* lwzu R27, <#[R11 + 4]> */
		/* 82155B1Ch case    4:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82155B1Ch case    4:*/		return 0x82155B20;
		  /* 82155B20h */ case    5:  		/* mr R9, R10 */
		/* 82155B20h case    5:*/		regs.R9 = regs.R10;
		/* 82155B20h case    5:*/		return 0x82155B24;
		  /* 82155B24h */ case    6:  		/* rlwinm R29, R10, 0, 21, 31 */
		/* 82155B24h case    6:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R29,regs.R10);
		/* 82155B24h case    6:*/		return 0x82155B28;
		  /* 82155B28h */ case    7:  		/* rlwimi R9, R10, 12, 21, 23 */
		/* 82155B28h case    7:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R9,regs.R10);
		/* 82155B28h case    7:*/		return 0x82155B2C;
		  /* 82155B2Ch */ case    8:  		/* addi R25, R11, 4 */
		/* 82155B2Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0x4);
		/* 82155B2Ch case    8:*/		return 0x82155B30;
		  /* 82155B30h */ case    9:  		/* lhz R10, <#[R11 + 6]> */
		/* 82155B30h case    9:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000006) );
		/* 82155B30h case    9:*/		return 0x82155B34;
		  /* 82155B34h */ case   10:  		/* rlwinm R28, R9, 24, 27, 31 */
		/* 82155B34h case   10:*/		cpu::op::rlwinm<0,24,27,31>(regs,&regs.R28,regs.R9);
		/* 82155B34h case   10:*/		return 0x82155B38;
		  /* 82155B38h */ case   11:  		/* addi R11, R10, -73 */
		/* 82155B38h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFFFB7);
		/* 82155B38h case   11:*/		return 0x82155B3C;
		  /* 82155B3Ch */ case   12:  		/* addic R9, R11, -1 */
		/* 82155B3Ch case   12:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 82155B3Ch case   12:*/		return 0x82155B40;
		  /* 82155B40h */ case   13:  		/* subfe. R30, R9, R11 */
		/* 82155B40h case   13:*/		cpu::op::subfe<1>(regs,&regs.R30,regs.R9,regs.R11);
		/* 82155B40h case   13:*/		return 0x82155B44;
		  /* 82155B44h */ case   14:  		/* bc 12, CR0_EQ, 12 */
		/* 82155B44h case   14:*/		if ( regs.CR[0].eq ) { return 0x82155B50;  }
		/* 82155B44h case   14:*/		return 0x82155B48;
		  /* 82155B48h */ case   15:  		/* addi R11, R10, -77 */
		/* 82155B48h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFFFB3);
		/* 82155B48h case   15:*/		return 0x82155B4C;
		  /* 82155B4Ch */ case   16:  		/* b 12 */
		/* 82155B4Ch case   16:*/		return 0x82155B58;
		/* 82155B4Ch case   16:*/		return 0x82155B50;
	}
	return 0x82155B50;
} // Block from 82155B0Ch-82155B50h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82155B50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155B50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155B50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155B50);
		  /* 82155B50h */ case    0:  		/* lhz R11, <#[R25 + 14]> */
		/* 82155B50h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000E) );
		/* 82155B50h case    0:*/		return 0x82155B54;
		  /* 82155B54h */ case    1:  		/* addi R11, R11, -77 */
		/* 82155B54h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFB3);
		/* 82155B54h case    1:*/		return 0x82155B58;
	}
	return 0x82155B58;
} // Block from 82155B50h-82155B58h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82155B58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155B58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155B58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155B58);
		  /* 82155B58h */ case    0:  		/* cntlzw R11, R11 */
		/* 82155B58h case    0:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82155B58h case    0:*/		return 0x82155B5C;
		  /* 82155B5Ch */ case    1:  		/* cmplwi CR6, R28, 3 */
		/* 82155B5Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000003);
		/* 82155B5Ch case    1:*/		return 0x82155B60;
		  /* 82155B60h */ case    2:  		/* rlwinm R26, R11, 27, 31, 31 */
		/* 82155B60h case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R26,regs.R11);
		/* 82155B60h case    2:*/		return 0x82155B64;
		  /* 82155B64h */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 82155B64h case    3:*/		if ( regs.CR[6].eq ) { return 0x82155B6C;  }
		/* 82155B64h case    3:*/		return 0x82155B68;
		  /* 82155B68h */ case    4:  		/* bl 1119992 */
		/* 82155B68h case    4:*/		regs.LR = 0x82155B6C; return 0x82267260;
		/* 82155B68h case    4:*/		return 0x82155B6C;
	}
	return 0x82155B6C;
} // Block from 82155B58h-82155B6Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82155B6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155B6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155B6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155B6C);
		  /* 82155B6Ch */ case    0:  		/* cntlzw R11, R30 */
		/* 82155B6Ch case    0:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R30);
		/* 82155B6Ch case    0:*/		return 0x82155B70;
		  /* 82155B70h */ case    1:  		/* addi R6, R1, 80 */
		/* 82155B70h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82155B70h case    1:*/		return 0x82155B74;
		  /* 82155B74h */ case    2:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 82155B74h case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 82155B74h case    2:*/		return 0x82155B78;
		  /* 82155B78h */ case    3:  		/* mr R5, R24 */
		/* 82155B78h case    3:*/		regs.R5 = regs.R24;
		/* 82155B78h case    3:*/		return 0x82155B7C;
		  /* 82155B7Ch */ case    4:  		/* addi R11, R11, 1 */
		/* 82155B7Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82155B7Ch case    4:*/		return 0x82155B80;
		  /* 82155B80h */ case    5:  		/* mr R3, R28 */
		/* 82155B80h case    5:*/		regs.R3 = regs.R28;
		/* 82155B80h case    5:*/		return 0x82155B84;
		  /* 82155B84h */ case    6:  		/* add R4, R11, R29 */
		/* 82155B84h case    6:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R29);
		/* 82155B84h case    6:*/		return 0x82155B88;
		  /* 82155B88h */ case    7:  		/* bl -11416 */
		/* 82155B88h case    7:*/		regs.LR = 0x82155B8C; return 0x82152EF0;
		/* 82155B88h case    7:*/		return 0x82155B8C;
		  /* 82155B8Ch */ case    8:  		/* lwz R11, <#[R1 + 80]> */
		/* 82155B8Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82155B8Ch case    8:*/		return 0x82155B90;
		  /* 82155B90h */ case    9:  		/* lis R10, 64 */
		/* 82155B90h case    9:*/		cpu::op::lis<0>(regs,&regs.R10,0x40);
		/* 82155B90h case    9:*/		return 0x82155B94;
		  /* 82155B94h */ case   10:  		/* subfic R9, R30, 0 */
		/* 82155B94h case   10:*/		cpu::op::subfic<0>(regs,&regs.R9,regs.R30,0x0);
		/* 82155B94h case   10:*/		return 0x82155B98;
		  /* 82155B98h */ case   11:  		/* rlwimi R10, R11, 16, 10, 15 */
		/* 82155B98h case   11:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R10,regs.R11);
		/* 82155B98h case   11:*/		return 0x82155B9C;
		  /* 82155B9Ch */ case   12:  		/* rlwinm R8, R3, 0, 16, 31 */
		/* 82155B9Ch case   12:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R8,regs.R3);
		/* 82155B9Ch case   12:*/		return 0x82155BA0;
		  /* 82155BA0h */ case   13:  		/* li R11, 34 */
		/* 82155BA0h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x22);
		/* 82155BA0h case   13:*/		return 0x82155BA4;
		  /* 82155BA4h */ case   14:  		/* subfe R9, R9, R9 */
		/* 82155BA4h case   14:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 82155BA4h case   14:*/		return 0x82155BA8;
		  /* 82155BA8h */ case   15:  		/* or R10, R10, R8 */
		/* 82155BA8h case   15:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 82155BA8h case   15:*/		return 0x82155BAC;
		  /* 82155BACh */ case   16:  		/* stw R11, <#[R31]> */
		/* 82155BACh case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82155BACh case   16:*/		return 0x82155BB0;
		  /* 82155BB0h */ case   17:  		/* rlwinm R11, R9, 0, 30, 31 */
		/* 82155BB0h case   17:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R9);
		/* 82155BB0h case   17:*/		return 0x82155BB4;
		  /* 82155BB4h */ case   18:  		/* stwu R10, <#[R31 + 4]> */
		/* 82155BB4h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82155BB4h case   18:*/		return 0x82155BB8;
		  /* 82155BB8h */ case   19:  		/* rlwinm R30, R29, 0, 16, 31 */
		/* 82155BB8h case   19:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R30,regs.R29);
		/* 82155BB8h case   19:*/		return 0x82155BBC;
		  /* 82155BBCh */ case   20:  		/* addi R29, R11, 1 */
		/* 82155BBCh case   20:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x1);
		/* 82155BBCh case   20:*/		return 0x82155BC0;
		  /* 82155BC0h */ case   21:  		/* oris R11, R30, 17 */
		/* 82155BC0h case   21:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R30,0x11);
		/* 82155BC0h case   21:*/		return 0x82155BC4;
		  /* 82155BC4h */ case   22:  		/* addi R7, R1, 80 */
		/* 82155BC4h case   22:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82155BC4h case   22:*/		return 0x82155BC8;
		  /* 82155BC8h */ case   23:  		/* mr R6, R24 */
		/* 82155BC8h case   23:*/		regs.R6 = regs.R24;
		/* 82155BC8h case   23:*/		return 0x82155BCC;
		  /* 82155BCCh */ case   24:  		/* stwu R29, <#[R31 + 4]> */
		/* 82155BCCh case   24:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82155BCCh case   24:*/		return 0x82155BD0;
		  /* 82155BD0h */ case   25:  		/* li R5, 0 */
		/* 82155BD0h case   25:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82155BD0h case   25:*/		return 0x82155BD4;
		  /* 82155BD4h */ case   26:  		/* li R4, 0 */
		/* 82155BD4h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82155BD4h case   26:*/		return 0x82155BD8;
		  /* 82155BD8h */ case   27:  		/* mr R3, R27 */
		/* 82155BD8h case   27:*/		regs.R3 = regs.R27;
		/* 82155BD8h case   27:*/		return 0x82155BDC;
		  /* 82155BDCh */ case   28:  		/* stwu R11, <#[R31 + 4]> */
		/* 82155BDCh case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82155BDCh case   28:*/		return 0x82155BE0;
		  /* 82155BE0h */ case   29:  		/* addi R11, R31, 4 */
		/* 82155BE0h case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x4);
		/* 82155BE0h case   29:*/		return 0x82155BE4;
		  /* 82155BE4h */ case   30:  		/* stw R11, <#[R1 + 80]> */
		/* 82155BE4h case   30:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82155BE4h case   30:*/		return 0x82155BE8;
		  /* 82155BE8h */ case   31:  		/* bl -9512 */
		/* 82155BE8h case   31:*/		regs.LR = 0x82155BEC; return 0x821536C0;
		/* 82155BE8h case   31:*/		return 0x82155BEC;
		  /* 82155BECh */ case   32:  		/* cmpwi CR6, R26, 0 */
		/* 82155BECh case   32:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 82155BECh case   32:*/		return 0x82155BF0;
		  /* 82155BF0h */ case   33:  		/* bc 12, CR6_EQ, 60 */
		/* 82155BF0h case   33:*/		if ( regs.CR[6].eq ) { return 0x82155C2C;  }
		/* 82155BF0h case   33:*/		return 0x82155BF4;
		  /* 82155BF4h */ case   34:  		/* lwz R10, <#[R1 + 80]> */
		/* 82155BF4h case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82155BF4h case   34:*/		return 0x82155BF8;
		  /* 82155BF8h */ case   35:  		/* lis R9, 68 */
		/* 82155BF8h case   35:*/		cpu::op::lis<0>(regs,&regs.R9,0x44);
		/* 82155BF8h case   35:*/		return 0x82155BFC;
		  /* 82155BFCh */ case   36:  		/* li R8, 71 */
		/* 82155BFCh case   36:*/		cpu::op::li<0>(regs,&regs.R8,0x47);
		/* 82155BFCh case   36:*/		return 0x82155C00;
		  /* 82155C00h */ case   37:  		/* addi R11, R10, 8 */
		/* 82155C00h case   37:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 82155C00h case   37:*/		return 0x82155C04;
		  /* 82155C04h */ case   38:  		/* ori R9, R9, 14 */
		/* 82155C04h case   38:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0xE);
		/* 82155C04h case   38:*/		return 0x82155C08;
		  /* 82155C08h */ case   39:  		/* oris R7, R30, 81 */
		/* 82155C08h case   39:*/		cpu::op::oris<0>(regs,&regs.R7,regs.R30,0x51);
		/* 82155C08h case   39:*/		return 0x82155C0C;
		  /* 82155C0Ch */ case   40:  		/* stw R8, <#[R10]> */
		/* 82155C0Ch case   40:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82155C0Ch case   40:*/		return 0x82155C10;
		  /* 82155C10h */ case   41:  		/* li R8, 13107 */
		/* 82155C10h case   41:*/		cpu::op::li<0>(regs,&regs.R8,0x3333);
		/* 82155C10h case   41:*/		return 0x82155C14;
		  /* 82155C14h */ case   42:  		/* stw R9, <#[R10 + 4]> */
		/* 82155C14h case   42:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 82155C14h case   42:*/		return 0x82155C18;
		  /* 82155C18h */ case   43:  		/* stw R29, <#[R10 + 8]> */
		/* 82155C18h case   43:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + 0x00000008) );
		/* 82155C18h case   43:*/		return 0x82155C1C;
		  /* 82155C1Ch */ case   44:  		/* stwu R7, <#[R11 + 4]> */
		/* 82155C1Ch case   44:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82155C1Ch case   44:*/		return 0x82155C20;
		  /* 82155C20h */ case   45:  		/* stwu R8, <#[R11 + 4]> */
		/* 82155C20h case   45:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82155C20h case   45:*/		return 0x82155C24;
		  /* 82155C24h */ case   46:  		/* addi R11, R11, 4 */
		/* 82155C24h case   46:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82155C24h case   46:*/		return 0x82155C28;
		  /* 82155C28h */ case   47:  		/* b 8 */
		/* 82155C28h case   47:*/		return 0x82155C30;
		/* 82155C28h case   47:*/		return 0x82155C2C;
	}
	return 0x82155C2C;
} // Block from 82155B6Ch-82155C2Ch (48 instructions)

//////////////////////////////////////////////////////
// Block at 82155C2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155C2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155C2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155C2C);
		  /* 82155C2Ch */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 82155C2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82155C2Ch case    0:*/		return 0x82155C30;
	}
	return 0x82155C30;
} // Block from 82155C2Ch-82155C30h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82155C30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155C30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155C30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155C30);
		  /* 82155C30h */ case    0:  		/* stw R11, <#[R22]> */
		/* 82155C30h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 82155C30h case    0:*/		return 0x82155C34;
		  /* 82155C34h */ case    1:  		/* stw R25, <#[R23]> */
		/* 82155C34h case    1:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R23 + 0x00000000) );
		/* 82155C34h case    1:*/		return 0x82155C38;
		  /* 82155C38h */ case    2:  		/* addi R1, R1, 176 */
		/* 82155C38h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 82155C38h case    2:*/		return 0x82155C3C;
		  /* 82155C3Ch */ case    3:  		/* b -805292 */
		/* 82155C3Ch case    3:*/		return 0x82091290;
		/* 82155C3Ch case    3:*/		return 0x82155C40;
	}
	return 0x82155C40;
} // Block from 82155C30h-82155C40h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82155C40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155C40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155C40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155C40);
		  /* 82155C40h */ case    0:  		/* mfspr R12, LR */
		/* 82155C40h case    0:*/		regs.R12 = regs.LR;
		/* 82155C40h case    0:*/		return 0x82155C44;
		  /* 82155C44h */ case    1:  		/* bl -805404 */
		/* 82155C44h case    1:*/		regs.LR = 0x82155C48; return 0x82091228;
		/* 82155C44h case    1:*/		return 0x82155C48;
		  /* 82155C48h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 82155C48h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 82155C48h case    2:*/		return 0x82155C4C;
		  /* 82155C4Ch */ case    3:  		/* lwz R11, <#[R6 + 4]> */
		/* 82155C4Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000004) );
		/* 82155C4Ch case    3:*/		return 0x82155C50;
		  /* 82155C50h */ case    4:  		/* mr R17, R3 */
		/* 82155C50h case    4:*/		regs.R17 = regs.R3;
		/* 82155C50h case    4:*/		return 0x82155C54;
		  /* 82155C54h */ case    5:  		/* mr R21, R6 */
		/* 82155C54h case    5:*/		regs.R21 = regs.R6;
		/* 82155C54h case    5:*/		return 0x82155C58;
		  /* 82155C58h */ case    6:  		/* mr R16, R7 */
		/* 82155C58h case    6:*/		regs.R16 = regs.R7;
		/* 82155C58h case    6:*/		return 0x82155C5C;
		  /* 82155C5Ch */ case    7:  		/* cmpwi CR6, R11, 1 */
		/* 82155C5Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 82155C5Ch case    7:*/		return 0x82155C60;
		  /* 82155C60h */ case    8:  		/* bc 4, CR6_EQ, 12 */
		/* 82155C60h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82155C6C;  }
		/* 82155C60h case    8:*/		return 0x82155C64;
		  /* 82155C64h */ case    9:  		/* li R19, 0 */
		/* 82155C64h case    9:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 82155C64h case    9:*/		return 0x82155C68;
		  /* 82155C68h */ case   10:  		/* b 16 */
		/* 82155C68h case   10:*/		return 0x82155C78;
		/* 82155C68h case   10:*/		return 0x82155C6C;
	}
	return 0x82155C6C;
} // Block from 82155C40h-82155C6Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82155C6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155C6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155C6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155C6C);
		  /* 82155C6Ch */ case    0:  		/* addi R11, R11, -2 */
		/* 82155C6Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFE);
		/* 82155C6Ch case    0:*/		return 0x82155C70;
		  /* 82155C70h */ case    1:  		/* cntlzw R11, R11 */
		/* 82155C70h case    1:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82155C70h case    1:*/		return 0x82155C74;
		  /* 82155C74h */ case    2:  		/* rlwinm R19, R11, 27, 31, 31 */
		/* 82155C74h case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R19,regs.R11);
		/* 82155C74h case    2:*/		return 0x82155C78;
	}
	return 0x82155C78;
} // Block from 82155C6Ch-82155C78h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82155C78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155C78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155C78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155C78);
		  /* 82155C78h */ case    0:  		/* lis R11, -1 */
		/* 82155C78h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFFFF);
		/* 82155C78h case    0:*/		return 0x82155C7C;
		  /* 82155C7Ch */ case    1:  		/* ori R11, R11, 260 */
		/* 82155C7Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x104);
		/* 82155C7Ch case    1:*/		return 0x82155C80;
		  /* 82155C80h */ case    2:  		/* cmplw CR6, R4, R11 */
		/* 82155C80h case    2:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 82155C80h case    2:*/		return 0x82155C84;
		  /* 82155C84h */ case    3:  		/* bc 12, CR6_LT, 8 */
		/* 82155C84h case    3:*/		if ( regs.CR[6].lt ) { return 0x82155C8C;  }
		/* 82155C84h case    3:*/		return 0x82155C88;
		  /* 82155C88h */ case    4:  		/* bl 1119704 */
		/* 82155C88h case    4:*/		regs.LR = 0x82155C8C; return 0x82267260;
		/* 82155C88h case    4:*/		return 0x82155C8C;
	}
	return 0x82155C8C;
} // Block from 82155C78h-82155C8Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82155C8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155C8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155C8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155C8C);
		  /* 82155C8Ch */ case    0:  		/* lwz R10, <#[R17]> */
		/* 82155C8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R17 + 0x00000000) );
		/* 82155C8Ch case    0:*/		return 0x82155C90;
		  /* 82155C90h */ case    1:  		/* lwz R9, <#[R16]> */
		/* 82155C90h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R16 + 0x00000000) );
		/* 82155C90h case    1:*/		return 0x82155C94;
		  /* 82155C94h */ case    2:  		/* addi R11, R10, 4 */
		/* 82155C94h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x4);
		/* 82155C94h case    2:*/		return 0x82155C98;
		  /* 82155C98h */ case    3:  		/* lhz R25, <#[R10 + 2]> */
		/* 82155C98h case    3:*/		cpu::mem::load16z( regs, &regs.R25, (uint32)(regs.R10 + 0x00000002) );
		/* 82155C98h case    3:*/		return 0x82155C9C;
		  /* 82155C9Ch */ case    4:  		/* cmplwi CR6, R25, 72 */
		/* 82155C9Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000048);
		/* 82155C9Ch case    4:*/		return 0x82155CA0;
		  /* 82155CA0h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 82155CA0h case    5:*/		if ( regs.CR[6].eq ) { return 0x82155CB0;  }
		/* 82155CA0h case    5:*/		return 0x82155CA4;
		  /* 82155CA4h */ case    6:  		/* cmplwi CR6, R25, 84 */
		/* 82155CA4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000054);
		/* 82155CA4h case    6:*/		return 0x82155CA8;
		  /* 82155CA8h */ case    7:  		/* li R28, 1 */
		/* 82155CA8h case    7:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 82155CA8h case    7:*/		return 0x82155CAC;
		  /* 82155CACh */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 82155CACh case    8:*/		if ( !regs.CR[6].eq ) { return 0x82155CB4;  }
		/* 82155CACh case    8:*/		return 0x82155CB0;
	}
	return 0x82155CB0;
} // Block from 82155C8Ch-82155CB0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82155CB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155CB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155CB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155CB0);
		  /* 82155CB0h */ case    0:  		/* li R28, 0 */
		/* 82155CB0h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 82155CB0h case    0:*/		return 0x82155CB4;
	}
	return 0x82155CB4;
} // Block from 82155CB0h-82155CB4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82155CB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155CB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155CB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155CB4);
		  /* 82155CB4h */ case    0:  		/* lwz R22, <#[R11]> */
		/* 82155CB4h case    0:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R11 + 0x00000000) );
		/* 82155CB4h case    0:*/		return 0x82155CB8;
		  /* 82155CB8h */ case    1:  		/* li R10, 34 */
		/* 82155CB8h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x22);
		/* 82155CB8h case    1:*/		return 0x82155CBC;
		  /* 82155CBCh */ case    2:  		/* lwzu R26, <#[R11 + 4]> */
		/* 82155CBCh case    2:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82155CBCh case    2:*/		return 0x82155CC0;
		  /* 82155CC0h */ case    3:  		/* addi R30, R9, 4 */
		/* 82155CC0h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R9,0x4);
		/* 82155CC0h case    3:*/		return 0x82155CC4;
		  /* 82155CC4h */ case    4:  		/* mr R8, R22 */
		/* 82155CC4h case    4:*/		regs.R8 = regs.R22;
		/* 82155CC4h case    4:*/		return 0x82155CC8;
		  /* 82155CC8h */ case    5:  		/* stw R10, <#[R9]> */
		/* 82155CC8h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 82155CC8h case    5:*/		return 0x82155CCC;
		  /* 82155CCCh */ case    6:  		/* addi R18, R11, 4 */
		/* 82155CCCh case    6:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R11,0x4);
		/* 82155CCCh case    6:*/		return 0x82155CD0;
		  /* 82155CD0h */ case    7:  		/* rlwimi R8, R22, 12, 21, 23 */
		/* 82155CD0h case    7:*/		cpu::op::rlwimi<0,12,21,23>(regs,&regs.R8,regs.R22);
		/* 82155CD0h case    7:*/		return 0x82155CD4;
		  /* 82155CD4h */ case    8:  		/* rlwinm R27, R22, 0, 21, 31 */
		/* 82155CD4h case    8:*/		cpu::op::rlwinm<0,0,21,31>(regs,&regs.R27,regs.R22);
		/* 82155CD4h case    8:*/		return 0x82155CD8;
		  /* 82155CD8h */ case    9:  		/* rlwinm R24, R8, 24, 27, 31 */
		/* 82155CD8h case    9:*/		cpu::op::rlwinm<0,24,27,31>(regs,&regs.R24,regs.R8);
		/* 82155CD8h case    9:*/		return 0x82155CDC;
		  /* 82155CDCh */ case   10:  		/* cmplwi CR6, R24, 3 */
		/* 82155CDCh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000003);
		/* 82155CDCh case   10:*/		return 0x82155CE0;
		  /* 82155CE0h */ case   11:  		/* bc 12, CR6_EQ, 8 */
		/* 82155CE0h case   11:*/		if ( regs.CR[6].eq ) { return 0x82155CE8;  }
		/* 82155CE0h case   11:*/		return 0x82155CE4;
		  /* 82155CE4h */ case   12:  		/* bl 1119612 */
		/* 82155CE4h case   12:*/		regs.LR = 0x82155CE8; return 0x82267260;
		/* 82155CE4h case   12:*/		return 0x82155CE8;
	}
	return 0x82155CE8;
} // Block from 82155CB4h-82155CE8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82155CE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155CE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155CE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155CE8);
		  /* 82155CE8h */ case    0:  		/* addi R6, R1, 80 */
		/* 82155CE8h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82155CE8h case    0:*/		return 0x82155CEC;
		  /* 82155CECh */ case    1:  		/* mr R5, R21 */
		/* 82155CECh case    1:*/		regs.R5 = regs.R21;
		/* 82155CECh case    1:*/		return 0x82155CF0;
		  /* 82155CF0h */ case    2:  		/* mr R4, R27 */
		/* 82155CF0h case    2:*/		regs.R4 = regs.R27;
		/* 82155CF0h case    2:*/		return 0x82155CF4;
		  /* 82155CF4h */ case    3:  		/* mr R3, R24 */
		/* 82155CF4h case    3:*/		regs.R3 = regs.R24;
		/* 82155CF4h case    3:*/		return 0x82155CF8;
		  /* 82155CF8h */ case    4:  		/* bl -11784 */
		/* 82155CF8h case    4:*/		regs.LR = 0x82155CFC; return 0x82152EF0;
		/* 82155CF8h case    4:*/		return 0x82155CFC;
		  /* 82155CFCh */ case    5:  		/* lwz R31, <#[R1 + 80]> */
		/* 82155CFCh case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 82155CFCh case    5:*/		return 0x82155D00;
		  /* 82155D00h */ case    6:  		/* mr R29, R3 */
		/* 82155D00h case    6:*/		regs.R29 = regs.R3;
		/* 82155D00h case    6:*/		return 0x82155D04;
		  /* 82155D04h */ case    7:  		/* cmpwi CR6, R31, 4 */
		/* 82155D04h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R31,0x00000004);
		/* 82155D04h case    7:*/		return 0x82155D08;
		  /* 82155D08h */ case    8:  		/* bc 12, CR6_EQ, 8 */
		/* 82155D08h case    8:*/		if ( regs.CR[6].eq ) { return 0x82155D10;  }
		/* 82155D08h case    8:*/		return 0x82155D0C;
		  /* 82155D0Ch */ case    9:  		/* bl 1119572 */
		/* 82155D0Ch case    9:*/		regs.LR = 0x82155D10; return 0x82267260;
		/* 82155D0Ch case    9:*/		return 0x82155D10;
	}
	return 0x82155D10;
} // Block from 82155CE8h-82155D10h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82155D10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155D10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155D10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155D10);
		  /* 82155D10h */ case    0:  		/* lis R11, 64 */
		/* 82155D10h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0x40);
		/* 82155D10h case    0:*/		return 0x82155D14;
		  /* 82155D14h */ case    1:  		/* rlwinm R23, R29, 0, 16, 31 */
		/* 82155D14h case    1:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R23,regs.R29);
		/* 82155D14h case    1:*/		return 0x82155D18;
		  /* 82155D18h */ case    2:  		/* rlwimi R11, R31, 16, 10, 15 */
		/* 82155D18h case    2:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R11,regs.R31);
		/* 82155D18h case    2:*/		return 0x82155D1C;
		  /* 82155D1Ch */ case    3:  		/* rlwinm R20, R31, 0, 26, 31 */
		/* 82155D1Ch case    3:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R20,regs.R31);
		/* 82155D1Ch case    3:*/		return 0x82155D20;
		  /* 82155D20h */ case    4:  		/* or R29, R11, R23 */
		/* 82155D20h case    4:*/		cpu::op::or<0>(regs,&regs.R29,regs.R11,regs.R23);
		/* 82155D20h case    4:*/		return 0x82155D24;
		  /* 82155D24h */ case    5:  		/* cmpwi CR6, R28, 0 */
		/* 82155D24h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 82155D24h case    5:*/		return 0x82155D28;
		  /* 82155D28h */ case    6:  		/* stw R29, <#[R30]> */
		/* 82155D28h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x00000000) );
		/* 82155D28h case    6:*/		return 0x82155D2C;
		  /* 82155D2Ch */ case    7:  		/* addi R11, R30, 4 */
		/* 82155D2Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0x4);
		/* 82155D2Ch case    7:*/		return 0x82155D30;
		  /* 82155D30h */ case    8:  		/* bc 12, CR6_EQ, 36 */
		/* 82155D30h case    8:*/		if ( regs.CR[6].eq ) { return 0x82155D54;  }
		/* 82155D30h case    8:*/		return 0x82155D34;
		  /* 82155D34h */ case    9:  		/* cmplwi CR6, R25, 76 */
		/* 82155D34h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x0000004C);
		/* 82155D34h case    9:*/		return 0x82155D38;
		  /* 82155D38h */ case   10:  		/* bc 12, CR6_EQ, 20 */
		/* 82155D38h case   10:*/		if ( regs.CR[6].eq ) { return 0x82155D4C;  }
		/* 82155D38h case   10:*/		return 0x82155D3C;
		  /* 82155D3Ch */ case   11:  		/* cmplwi CR6, R25, 77 */
		/* 82155D3Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x0000004D);
		/* 82155D3Ch case   11:*/		return 0x82155D40;
		  /* 82155D40h */ case   12:  		/* bc 12, CR6_EQ, 12 */
		/* 82155D40h case   12:*/		if ( regs.CR[6].eq ) { return 0x82155D4C;  }
		/* 82155D40h case   12:*/		return 0x82155D44;
		  /* 82155D44h */ case   13:  		/* li R10, 208 */
		/* 82155D44h case   13:*/		cpu::op::li<0>(regs,&regs.R10,0xD0);
		/* 82155D44h case   13:*/		return 0x82155D48;
		  /* 82155D48h */ case   14:  		/* b 16 */
		/* 82155D48h case   14:*/		return 0x82155D58;
		/* 82155D48h case   14:*/		return 0x82155D4C;
	}
	return 0x82155D4C;
} // Block from 82155D10h-82155D4Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 82155D4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155D4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155D4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155D4C);
		  /* 82155D4Ch */ case    0:  		/* li R10, 144 */
		/* 82155D4Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x90);
		/* 82155D4Ch case    0:*/		return 0x82155D50;
		  /* 82155D50h */ case    1:  		/* b 8 */
		/* 82155D50h case    1:*/		return 0x82155D58;
		/* 82155D50h case    1:*/		return 0x82155D54;
	}
	return 0x82155D54;
} // Block from 82155D4Ch-82155D54h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82155D54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155D54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155D54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155D54);
		  /* 82155D54h */ case    0:  		/* li R10, 228 */
		/* 82155D54h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0xE4);
		/* 82155D54h case    0:*/		return 0x82155D58;
	}
	return 0x82155D58;
} // Block from 82155D54h-82155D58h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82155D58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155D58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155D58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155D58);
		  /* 82155D58h */ case    0:  		/* stw R10, <#[R11]> */
		/* 82155D58h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82155D58h case    0:*/		return 0x82155D5C;
		  /* 82155D5Ch */ case    1:  		/* addi R11, R11, 4 */
		/* 82155D5Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82155D5Ch case    1:*/		return 0x82155D60;
		  /* 82155D60h */ case    2:  		/* rlwinm R31, R27, 0, 16, 31 */
		/* 82155D60h case    2:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R31,regs.R27);
		/* 82155D60h case    2:*/		return 0x82155D64;
		  /* 82155D64h */ case    3:  		/* addi R10, R11, 4 */
		/* 82155D64h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82155D64h case    3:*/		return 0x82155D68;
		  /* 82155D68h */ case    4:  		/* oris R9, R31, 17 */
		/* 82155D68h case    4:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R31,0x11);
		/* 82155D68h case    4:*/		return 0x82155D6C;
		  /* 82155D6Ch */ case    5:  		/* stw R10, <#[R1 + 80]> */
		/* 82155D6Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82155D6Ch case    5:*/		return 0x82155D70;
		  /* 82155D70h */ case    6:  		/* addi R7, R1, 80 */
		/* 82155D70h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 82155D70h case    6:*/		return 0x82155D74;
		  /* 82155D74h */ case    7:  		/* stw R9, <#[R11]> */
		/* 82155D74h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82155D74h case    7:*/		return 0x82155D78;
		  /* 82155D78h */ case    8:  		/* mr R6, R21 */
		/* 82155D78h case    8:*/		regs.R6 = regs.R21;
		/* 82155D78h case    8:*/		return 0x82155D7C;
		  /* 82155D7Ch */ case    9:  		/* li R5, 0 */
		/* 82155D7Ch case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82155D7Ch case    9:*/		return 0x82155D80;
		  /* 82155D80h */ case   10:  		/* li R4, 0 */
		/* 82155D80h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82155D80h case   10:*/		return 0x82155D84;
		  /* 82155D84h */ case   11:  		/* mr R3, R26 */
		/* 82155D84h case   11:*/		regs.R3 = regs.R26;
		/* 82155D84h case   11:*/		return 0x82155D88;
		  /* 82155D88h */ case   12:  		/* bl -9928 */
		/* 82155D88h case   12:*/		regs.LR = 0x82155D8C; return 0x821536C0;
		/* 82155D88h case   12:*/		return 0x82155D8C;
		  /* 82155D8Ch */ case   13:  		/* lis R11, 68 */
		/* 82155D8Ch case   13:*/		cpu::op::lis<0>(regs,&regs.R11,0x44);
		/* 82155D8Ch case   13:*/		return 0x82155D90;
		  /* 82155D90h */ case   14:  		/* li R26, 93 */
		/* 82155D90h case   14:*/		cpu::op::li<0>(regs,&regs.R26,0x5D);
		/* 82155D90h case   14:*/		return 0x82155D94;
		  /* 82155D94h */ case   15:  		/* ori R30, R11, 14 */
		/* 82155D94h case   15:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R11,0xE);
		/* 82155D94h case   15:*/		return 0x82155D98;
		  /* 82155D98h */ case   16:  		/* cmplwi CR6, R25, 72 */
		/* 82155D98h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000048);
		/* 82155D98h case   16:*/		return 0x82155D9C;
		  /* 82155D9Ch */ case   17:  		/* bc 12, CR6_EQ, 136 */
		/* 82155D9Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x82155E24;  }
		/* 82155D9Ch case   17:*/		return 0x82155DA0;
		  /* 82155DA0h */ case   18:  		/* cmplwi CR6, R25, 74 */
		/* 82155DA0h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x0000004A);
		/* 82155DA0h case   18:*/		return 0x82155DA4;
		  /* 82155DA4h */ case   19:  		/* bc 12, CR6_EQ, 128 */
		/* 82155DA4h case   19:*/		if ( regs.CR[6].eq ) { return 0x82155E24;  }
		/* 82155DA4h case   19:*/		return 0x82155DA8;
		  /* 82155DA8h */ case   20:  		/* cmplwi CR6, R25, 77 */
		/* 82155DA8h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x0000004D);
		/* 82155DA8h case   20:*/		return 0x82155DAC;
		  /* 82155DACh */ case   21:  		/* bc 12, CR6_EQ, 68 */
		/* 82155DACh case   21:*/		if ( regs.CR[6].eq ) { return 0x82155DF0;  }
		/* 82155DACh case   21:*/		return 0x82155DB0;
		  /* 82155DB0h */ case   22:  		/* lwz R11, <#[R1 + 80]> */
		/* 82155DB0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82155DB0h case   22:*/		return 0x82155DB4;
		  /* 82155DB4h */ case   23:  		/* cmplwi CR6, R25, 84 */
		/* 82155DB4h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000054);
		/* 82155DB4h case   23:*/		return 0x82155DB8;
		  /* 82155DB8h */ case   24:  		/* bc 4, CR6_EQ, 180 */
		/* 82155DB8h case   24:*/		if ( !regs.CR[6].eq ) { return 0x82155E6C;  }
		/* 82155DB8h case   24:*/		return 0x82155DBC;
		  /* 82155DBCh */ case   25:  		/* li R10, 1 */
		/* 82155DBCh case   25:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82155DBCh case   25:*/		return 0x82155DC0;
		  /* 82155DC0h */ case   26:  		/* li R9, 71 */
		/* 82155DC0h case   26:*/		cpu::op::li<0>(regs,&regs.R9,0x47);
		/* 82155DC0h case   26:*/		return 0x82155DC4;
		  /* 82155DC4h */ case   27:  		/* lis R8, 88 */
		/* 82155DC4h case   27:*/		cpu::op::lis<0>(regs,&regs.R8,0x58);
		/* 82155DC4h case   27:*/		return 0x82155DC8;
		  /* 82155DC8h */ case   28:  		/* stw R10, <#[R21 + 156]> */
		/* 82155DC8h case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R21 + 0x0000009C) );
		/* 82155DC8h case   28:*/		return 0x82155DCC;
		  /* 82155DCCh */ case   29:  		/* stw R9, <#[R11]> */
		/* 82155DCCh case   29:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82155DCCh case   29:*/		return 0x82155DD0;
		  /* 82155DD0h */ case   30:  		/* li R10, 257 */
		/* 82155DD0h case   30:*/		cpu::op::li<0>(regs,&regs.R10,0x101);
		/* 82155DD0h case   30:*/		return 0x82155DD4;
		  /* 82155DD4h */ case   31:  		/* stwu R8, <#[R11 + 4]> */
		/* 82155DD4h case   31:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82155DD4h case   31:*/		return 0x82155DD8;
		  /* 82155DD8h */ case   32:  		/* lis R7, 32 */
		/* 82155DD8h case   32:*/		cpu::op::lis<0>(regs,&regs.R7,0x20);
		/* 82155DD8h case   32:*/		return 0x82155DDC;
		  /* 82155DDCh */ case   33:  		/* ori R9, R7, 12816 */
		/* 82155DDCh case   33:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R7,0x3210);
		/* 82155DDCh case   33:*/		return 0x82155DE0;
		  /* 82155DE0h */ case   34:  		/* stwu R10, <#[R11 + 4]> */
		/* 82155DE0h case   34:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82155DE0h case   34:*/		return 0x82155DE4;
		  /* 82155DE4h */ case   35:  		/* stwu R29, <#[R11 + 4]> */
		/* 82155DE4h case   35:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82155DE4h case   35:*/		return 0x82155DE8;
		  /* 82155DE8h */ case   36:  		/* stwu R9, <#[R11 + 4]> */
		/* 82155DE8h case   36:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82155DE8h case   36:*/		return 0x82155DEC;
		  /* 82155DECh */ case   37:  		/* b 504 */
		/* 82155DECh case   37:*/		return 0x82155FE4;
		/* 82155DECh case   37:*/		return 0x82155DF0;
	}
	return 0x82155DF0;
} // Block from 82155D58h-82155DF0h (38 instructions)

//////////////////////////////////////////////////////
// Block at 82155DF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155DF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155DF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155DF0);
		  /* 82155DF0h */ case    0:  		/* lwz R10, <#[R1 + 80]> */
		/* 82155DF0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82155DF0h case    0:*/		return 0x82155DF4;
		  /* 82155DF4h */ case    1:  		/* li R9, 71 */
		/* 82155DF4h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x47);
		/* 82155DF4h case    1:*/		return 0x82155DF8;
		  /* 82155DF8h */ case    2:  		/* li R8, 16 */
		/* 82155DF8h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x10);
		/* 82155DF8h case    2:*/		return 0x82155DFC;
		  /* 82155DFCh */ case    3:  		/* addi R11, R10, 8 */
		/* 82155DFCh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 82155DFCh case    3:*/		return 0x82155E00;
		  /* 82155E00h */ case    4:  		/* oris R7, R31, 81 */
		/* 82155E00h case    4:*/		cpu::op::oris<0>(regs,&regs.R7,regs.R31,0x51);
		/* 82155E00h case    4:*/		return 0x82155E04;
		  /* 82155E04h */ case    5:  		/* li R6, 13107 */
		/* 82155E04h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x3333);
		/* 82155E04h case    5:*/		return 0x82155E08;
		  /* 82155E08h */ case    6:  		/* stw R9, <#[R10]> */
		/* 82155E08h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82155E08h case    6:*/		return 0x82155E0C;
		  /* 82155E0Ch */ case    7:  		/* stw R30, <#[R10 + 4]> */
		/* 82155E0Ch case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R10 + 0x00000004) );
		/* 82155E0Ch case    7:*/		return 0x82155E10;
		  /* 82155E10h */ case    8:  		/* stw R8, <#[R10 + 8]> */
		/* 82155E10h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000008) );
		/* 82155E10h case    8:*/		return 0x82155E14;
		  /* 82155E14h */ case    9:  		/* stwu R7, <#[R11 + 4]> */
		/* 82155E14h case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82155E14h case    9:*/		return 0x82155E18;
		  /* 82155E18h */ case   10:  		/* stwu R6, <#[R11 + 4]> */
		/* 82155E18h case   10:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 82155E18h case   10:*/		return 0x82155E1C;
		  /* 82155E1Ch */ case   11:  		/* addi R11, R11, 4 */
		/* 82155E1Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82155E1Ch case   11:*/		return 0x82155E20;
		  /* 82155E20h */ case   12:  		/* b 92 */
		/* 82155E20h case   12:*/		return 0x82155E7C;
		/* 82155E20h case   12:*/		return 0x82155E24;
	}
	return 0x82155E24;
} // Block from 82155DF0h-82155E24h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82155E24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155E24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155E24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155E24);
		  /* 82155E24h */ case    0:  		/* mr R10, R27 */
		/* 82155E24h case    0:*/		regs.R10 = regs.R27;
		/* 82155E24h case    0:*/		return 0x82155E28;
		  /* 82155E28h */ case    1:  		/* lwz R11, <#[R1 + 80]> */
		/* 82155E28h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82155E28h case    1:*/		return 0x82155E2C;
		  /* 82155E2Ch */ case    2:  		/* mr R9, R26 */
		/* 82155E2Ch case    2:*/		regs.R9 = regs.R26;
		/* 82155E2Ch case    2:*/		return 0x82155E30;
		  /* 82155E30h */ case    3:  		/* rlwimi R10, R19, 8, 23, 23 */
		/* 82155E30h case    3:*/		cpu::op::rlwimi<0,8,23,23>(regs,&regs.R10,regs.R19);
		/* 82155E30h case    3:*/		return 0x82155E34;
		  /* 82155E34h */ case    4:  		/* addi R8, R11, 4 */
		/* 82155E34h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 82155E34h case    4:*/		return 0x82155E38;
		  /* 82155E38h */ case    5:  		/* rlwinm R10, R10, 0, 23, 31 */
		/* 82155E38h case    5:*/		cpu::op::rlwinm<0,0,23,31>(regs,&regs.R10,regs.R10);
		/* 82155E38h case    5:*/		return 0x82155E3C;
		  /* 82155E3Ch */ case    6:  		/* stw R8, <#[R1 + 80]> */
		/* 82155E3Ch case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000050) );
		/* 82155E3Ch case    6:*/		return 0x82155E40;
		  /* 82155E40h */ case    7:  		/* addi R5, R1, 80 */
		/* 82155E40h case    7:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82155E40h case    7:*/		return 0x82155E44;
		  /* 82155E44h */ case    8:  		/* rlwimi R9, R10, 16, 0, 15 */
		/* 82155E44h case    8:*/		cpu::op::rlwimi<0,16,0,15>(regs,&regs.R9,regs.R10);
		/* 82155E44h case    8:*/		return 0x82155E48;
		  /* 82155E48h */ case    9:  		/* mr R4, R21 */
		/* 82155E48h case    9:*/		regs.R4 = regs.R21;
		/* 82155E48h case    9:*/		return 0x82155E4C;
		  /* 82155E4Ch */ case   10:  		/* stw R9, <#[R11]> */
		/* 82155E4Ch case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82155E4Ch case   10:*/		return 0x82155E50;
		  /* 82155E50h */ case   11:  		/* mr R3, R22 */
		/* 82155E50h case   11:*/		regs.R3 = regs.R22;
		/* 82155E50h case   11:*/		return 0x82155E54;
		  /* 82155E54h */ case   12:  		/* bl -10420 */
		/* 82155E54h case   12:*/		regs.LR = 0x82155E58; return 0x821535A0;
		/* 82155E54h case   12:*/		return 0x82155E58;
		  /* 82155E58h */ case   13:  		/* lwz R11, <#[R1 + 80]> */
		/* 82155E58h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82155E58h case   13:*/		return 0x82155E5C;
		  /* 82155E5Ch */ case   14:  		/* rlwinm R10, R20, 16, 0, 15 */
		/* 82155E5Ch case   14:*/		cpu::op::rlwinm<0,16,0,15>(regs,&regs.R10,regs.R20);
		/* 82155E5Ch case   14:*/		return 0x82155E60;
		  /* 82155E60h */ case   15:  		/* or R10, R10, R23 */
		/* 82155E60h case   15:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R23);
		/* 82155E60h case   15:*/		return 0x82155E64;
		  /* 82155E64h */ case   16:  		/* stw R10, <#[R11]> */
		/* 82155E64h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82155E64h case   16:*/		return 0x82155E68;
		  /* 82155E68h */ case   17:  		/* addi R11, R11, 4 */
		/* 82155E68h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82155E68h case   17:*/		return 0x82155E6C;
	}
	return 0x82155E6C;
} // Block from 82155E24h-82155E6Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 82155E6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155E6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155E6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155E6C);
		  /* 82155E6Ch */ case    0:  		/* cmplwi CR6, R25, 77 */
		/* 82155E6Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x0000004D);
		/* 82155E6Ch case    0:*/		return 0x82155E70;
		  /* 82155E70h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 82155E70h case    1:*/		if ( regs.CR[6].eq ) { return 0x82155E7C;  }
		/* 82155E70h case    1:*/		return 0x82155E74;
		  /* 82155E74h */ case    2:  		/* cmplwi CR6, R25, 76 */
		/* 82155E74h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x0000004C);
		/* 82155E74h case    2:*/		return 0x82155E78;
		  /* 82155E78h */ case    3:  		/* bc 4, CR6_EQ, 368 */
		/* 82155E78h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82155FE8;  }
		/* 82155E78h case    3:*/		return 0x82155E7C;
	}
	return 0x82155E7C;
} // Block from 82155E6Ch-82155E7Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82155E7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155E7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155E7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155E7C);
		  /* 82155E7Ch */ case    0:  		/* lis R10, 1 */
		/* 82155E7Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0x1);
		/* 82155E7Ch case    0:*/		return 0x82155E80;
		  /* 82155E80h */ case    1:  		/* cmplwi CR6, R24, 3 */
		/* 82155E80h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000003);
		/* 82155E80h case    1:*/		return 0x82155E84;
		  /* 82155E84h */ case    2:  		/* ori R10, R10, 82 */
		/* 82155E84h case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x52);
		/* 82155E84h case    2:*/		return 0x82155E88;
		  /* 82155E88h */ case    3:  		/* addi R31, R11, 4 */
		/* 82155E88h case    3:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 82155E88h case    3:*/		return 0x82155E8C;
		  /* 82155E8Ch */ case    4:  		/* stw R10, <#[R11]> */
		/* 82155E8Ch case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82155E8Ch case    4:*/		return 0x82155E90;
		  /* 82155E90h */ case    5:  		/* bc 12, CR6_EQ, 8 */
		/* 82155E90h case    5:*/		if ( regs.CR[6].eq ) { return 0x82155E98;  }
		/* 82155E90h case    5:*/		return 0x82155E94;
		  /* 82155E94h */ case    6:  		/* bl 1119180 */
		/* 82155E94h case    6:*/		regs.LR = 0x82155E98; return 0x82267260;
		/* 82155E94h case    6:*/		return 0x82155E98;
	}
	return 0x82155E98;
} // Block from 82155E7Ch-82155E98h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82155E98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155E98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155E98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155E98);
		  /* 82155E98h */ case    0:  		/* li R11, 21 */
		/* 82155E98h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x15);
		/* 82155E98h case    0:*/		return 0x82155E9C;
		  /* 82155E9Ch */ case    1:  		/* stw R29, <#[R31]> */
		/* 82155E9Ch case    1:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 82155E9Ch case    1:*/		return 0x82155EA0;
		  /* 82155EA0h */ case    2:  		/* cmplwi CR6, R25, 77 */
		/* 82155EA0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x0000004D);
		/* 82155EA0h case    2:*/		return 0x82155EA4;
		  /* 82155EA4h */ case    3:  		/* stwu R11, <#[R31 + 4]> */
		/* 82155EA4h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		regs.R31 = (uint32)(regs.R31 + 0x00000004);
		/* 82155EA4h case    3:*/		return 0x82155EA8;
	}
	return 0x82155EA8;
} // Block from 82155E98h-82155EA8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82155EA8h
// Function '?BEMConvertToILFunc@XGRAPHICS@@YAXPAPAKKW4ILOpCode@1@PAU_R400IL_RECORDED_INFO@1@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155EA8);
		  /* 82155EA8h */ case    0:  		/* addi R31, R31, 4 */
		/* 82155EA8h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 82155EA8h case    0:*/		return 0x82155EAC;
		  /* 82155EACh */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 82155EACh case    1:*/		if ( !regs.CR[6].eq ) { return 0x82155EC0;  }
		/* 82155EACh case    1:*/		return 0x82155EB0;
		  /* 82155EB0h */ case    2:  		/* lis R11, 0 */
		/* 82155EB0h case    2:*/		cpu::op::lis<0>(regs,&regs.R11,0x0);
		/* 82155EB0h case    2:*/		return 0x82155EB4;
		  /* 82155EB4h */ case    3:  		/* stw R30, <#[R31]> */
		/* 82155EB4h case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000000) );
		/* 82155EB4h case    3:*/		return 0x82155EB8;
		  /* 82155EB8h */ case    4:  		/* ori R11, R11, 47768 */
		/* 82155EB8h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xBA98);
		/* 82155EB8h case    4:*/		return 0x82155EBC;
		  /* 82155EBCh */ case    5:  		/* b 228 */
		/* 82155EBCh case    5:*/		return 0x82155FA0;
		/* 82155EBCh case    5:*/		return 0x82155EC0;
	}
	return 0x82155EC0;
} // Block from 82155EA8h-82155EC0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82155EC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155EC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155EC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155EC0);
		  /* 82155EC0h */ case    0:  		/* lwz R29, <#[R18]> */
		/* 82155EC0h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R18 + 0x00000000) );
		/* 82155EC0h case    0:*/		return 0x82155EC4;
		  /* 82155EC4h */ case    1:  		/* lis R10, 228 */
		/* 82155EC4h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xE4);
		/* 82155EC4h case    1:*/		return 0x82155EC8;
		  /* 82155EC8h */ case    2:  		/* addi R18, R18, 4 */
		/* 82155EC8h case    2:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0x4);
		/* 82155EC8h case    2:*/		return 0x82155ECC;
		  /* 82155ECCh */ case    3:  		/* rlwinm R11, R29, 0, 8, 15 */
		/* 82155ECCh case    3:*/		cpu::op::rlwinm<0,0,8,15>(regs,&regs.R11,regs.R29);
		/* 82155ECCh case    3:*/		return 0x82155ED0;
		  /* 82155ED0h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 82155ED0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82155ED0h case    4:*/		return 0x82155ED4;
		  /* 82155ED4h */ case    5:  		/* bc 12, CR6_EQ, 80 */
		/* 82155ED4h case    5:*/		if ( regs.CR[6].eq ) { return 0x82155F24;  }
		/* 82155ED4h case    5:*/		return 0x82155ED8;
		  /* 82155ED8h */ case    6:  		/* rlwinm R10, R11, 14, 18, 31 */
		/* 82155ED8h case    6:*/		cpu::op::rlwinm<0,14,18,31>(regs,&regs.R10,regs.R11);
		/* 82155ED8h case    6:*/		return 0x82155EDC;
		  /* 82155EDCh */ case    7:  		/* lis R9, -32217 */
		/* 82155EDCh case    7:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8227);
		/* 82155EDCh case    7:*/		return 0x82155EE0;
		  /* 82155EE0h */ case    8:  		/* rlwinm R8, R10, 30, 2, 31 */
		/* 82155EE0h case    8:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R8,regs.R10);
		/* 82155EE0h case    8:*/		return 0x82155EE4;
		  /* 82155EE4h */ case    9:  		/* addi R9, R9, 19772 */
		/* 82155EE4h case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4D3C);
		/* 82155EE4h case    9:*/		return 0x82155EE8;
		  /* 82155EE8h */ case   10:  		/* rlwinm R10, R10, 2, 28, 29 */
		/* 82155EE8h case   10:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R10,regs.R10);
		/* 82155EE8h case   10:*/		return 0x82155EEC;
		  /* 82155EECh */ case   11:  		/* rlwinm R11, R11, 18, 28, 29 */
		/* 82155EECh case   11:*/		cpu::op::rlwinm<0,18,28,29>(regs,&regs.R11,regs.R11);
		/* 82155EECh case   11:*/		return 0x82155EF0;
		  /* 82155EF0h */ case   12:  		/* rlwinm R7, R8, 2, 28, 29 */
		/* 82155EF0h case   12:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R7,regs.R8);
		/* 82155EF0h case   12:*/		return 0x82155EF4;
		  /* 82155EF4h */ case   13:  		/* rlwinm R8, R8, 0, 28, 29 */
		/* 82155EF4h case   13:*/		cpu::op::rlwinm<0,0,28,29>(regs,&regs.R8,regs.R8);
		/* 82155EF4h case   13:*/		return 0x82155EF8;
		  /* 82155EF8h */ case   14:  		/* lwzx R10, <#[R10 + R9]> */
		/* 82155EF8h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 82155EF8h case   14:*/		return 0x82155EFC;
		  /* 82155EFCh */ case   15:  		/* lwzx R11, <#[R11 + R9]> */
		/* 82155EFCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82155EFCh case   15:*/		return 0x82155F00;
		  /* 82155F00h */ case   16:  		/* rlwinm R10, R10, 4, 0, 27 */
		/* 82155F00h case   16:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R10,regs.R10);
		/* 82155F00h case   16:*/		return 0x82155F04;
		  /* 82155F04h */ case   17:  		/* lwzx R7, <#[R7 + R9]> */
		/* 82155F04h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R9 + 0x00000000) );
		/* 82155F04h case   17:*/		return 0x82155F08;
		  /* 82155F08h */ case   18:  		/* lwzx R9, <#[R8 + R9]> */
		/* 82155F08h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + regs.R9 + 0x00000000) );
		/* 82155F08h case   18:*/		return 0x82155F0C;
		  /* 82155F0Ch */ case   19:  		/* or R11, R10, R11 */
		/* 82155F0Ch case   19:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82155F0Ch case   19:*/		return 0x82155F10;
		  /* 82155F10h */ case   20:  		/* rlwinm R10, R7, 8, 0, 23 */
		/* 82155F10h case   20:*/		cpu::op::rlwinm<0,8,0,23>(regs,&regs.R10,regs.R7);
		/* 82155F10h case   20:*/		return 0x82155F14;
		  /* 82155F14h */ case   21:  		/* rlwinm R9, R9, 12, 0, 19 */
		/* 82155F14h case   21:*/		cpu::op::rlwinm<0,12,0,19>(regs,&regs.R9,regs.R9);
		/* 82155F14h case   21:*/		return 0x82155F18;
		  /* 82155F18h */ case   22:  		/* or R11, R10, R11 */
		/* 82155F18h case   22:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82155F18h case   22:*/		return 0x82155F1C;
		  /* 82155F1Ch */ case   23:  		/* or R28, R9, R11 */
		/* 82155F1Ch case   23:*/		cpu::op::or<0>(regs,&regs.R28,regs.R9,regs.R11);
		/* 82155F1Ch case   23:*/		return 0x82155F20;
		  /* 82155F20h */ case   24:  		/* b 8 */
		/* 82155F20h case   24:*/		return 0x82155F28;
		/* 82155F20h case   24:*/		return 0x82155F24;
	}
	return 0x82155F24;
} // Block from 82155EC0h-82155F24h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82155F24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155F24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155F24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155F24);
		  /* 82155F24h */ case    0:  		/* li R28, 12816 */
		/* 82155F24h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x3210);
		/* 82155F24h case    0:*/		return 0x82155F28;
	}
	return 0x82155F28;
} // Block from 82155F24h-82155F28h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82155F28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155F28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155F28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155F28);
		  /* 82155F28h */ case    0:  		/* rlwinm R3, R29, 0, 4, 7 */
		/* 82155F28h case    0:*/		cpu::op::rlwinm<0,0,4,7>(regs,&regs.R3,regs.R29);
		/* 82155F28h case    0:*/		return 0x82155F2C;
		  /* 82155F2Ch */ case    1:  		/* bl -12684 */
		/* 82155F2Ch case    1:*/		regs.LR = 0x82155F30; return 0x82152DA0;
		/* 82155F2Ch case    1:*/		return 0x82155F30;
		  /* 82155F30h */ case    2:  		/* andi. R11, R3, 34952 */
		/* 82155F30h case    2:*/		cpu::op::andi<1>(regs,&regs.R11,regs.R3,0x8888);
		/* 82155F30h case    2:*/		return 0x82155F34;
		  /* 82155F34h */ case    3:  		/* cmplwi CR6, R11, 34952 */
		/* 82155F34h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00008888);
		/* 82155F34h case    3:*/		return 0x82155F38;
		  /* 82155F38h */ case    4:  		/* bc 4, CR6_EQ, 20 */
		/* 82155F38h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82155F4C;  }
		/* 82155F38h case    4:*/		return 0x82155F3C;
		  /* 82155F3Ch */ case    5:  		/* lis R12, -1 */
		/* 82155F3Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFFFF);
		/* 82155F3Ch case    5:*/		return 0x82155F40;
		  /* 82155F40h */ case    6:  		/* ori R12, R12, 30583 */
		/* 82155F40h case    6:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0x7777);
		/* 82155F40h case    6:*/		return 0x82155F44;
		  /* 82155F44h */ case    7:  		/* and R30, R3, R12 */
		/* 82155F44h case    7:*/		cpu::op::and<0>(regs,&regs.R30,regs.R3,regs.R12);
		/* 82155F44h case    7:*/		return 0x82155F48;
		  /* 82155F48h */ case    8:  		/* b 8 */
		/* 82155F48h case    8:*/		return 0x82155F50;
		/* 82155F48h case    8:*/		return 0x82155F4C;
	}
	return 0x82155F4C;
} // Block from 82155F28h-82155F4Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82155F4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155F4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155F4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155F4C);
		  /* 82155F4Ch */ case    0:  		/* ori R30, R3, 34952 */
		/* 82155F4Ch case    0:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R3,0x8888);
		/* 82155F4Ch case    0:*/		return 0x82155F50;
	}
	return 0x82155F50;
} // Block from 82155F4Ch-82155F50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82155F50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155F50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155F50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155F50);
		  /* 82155F50h */ case    0:  		/* addi R5, R1, 80 */
		/* 82155F50h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82155F50h case    0:*/		return 0x82155F54;
		  /* 82155F54h */ case    1:  		/* mr R4, R21 */
		/* 82155F54h case    1:*/		regs.R4 = regs.R21;
		/* 82155F54h case    1:*/		return 0x82155F58;
		  /* 82155F58h */ case    2:  		/* mr R3, R29 */
		/* 82155F58h case    2:*/		regs.R3 = regs.R29;
		/* 82155F58h case    2:*/		return 0x82155F5C;
		  /* 82155F5Ch */ case    3:  		/* bl -11068 */
		/* 82155F5Ch case    3:*/		regs.LR = 0x82155F60; return 0x82153420;
		/* 82155F5Ch case    3:*/		return 0x82155F60;
		  /* 82155F60h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 82155F60h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82155F60h case    4:*/		return 0x82155F64;
		  /* 82155F64h */ case    5:  		/* bc 4, CR6_EQ, 32 */
		/* 82155F64h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82155F84;  }
		/* 82155F64h case    5:*/		return 0x82155F68;
		  /* 82155F68h */ case    6:  		/* cmplwi CR6, R28, 12816 */
		/* 82155F68h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00003210);
		/* 82155F68h case    6:*/		return 0x82155F6C;
		  /* 82155F6Ch */ case    7:  		/* bc 4, CR6_EQ, 24 */
		/* 82155F6Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x82155F84;  }
		/* 82155F6Ch case    7:*/		return 0x82155F70;
		  /* 82155F70h */ case    8:  		/* lwz R10, <#[R1 + 80]> */
		/* 82155F70h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 82155F70h case    8:*/		return 0x82155F74;
		  /* 82155F74h */ case    9:  		/* rlwimi R3, R10, 16, 10, 15 */
		/* 82155F74h case    9:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R3,regs.R10);
		/* 82155F74h case    9:*/		return 0x82155F78;
		  /* 82155F78h */ case   10:  		/* rlwinm R10, R3, 0, 10, 31 */
		/* 82155F78h case   10:*/		cpu::op::rlwinm<0,0,10,31>(regs,&regs.R10,regs.R3);
		/* 82155F78h case   10:*/		return 0x82155F7C;
		  /* 82155F7Ch */ case   11:  		/* stw R10, <#[R31]> */
		/* 82155F7Ch case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82155F7Ch case   11:*/		return 0x82155F80;
		  /* 82155F80h */ case   12:  		/* b 36 */
		/* 82155F80h case   12:*/		return 0x82155FA4;
		/* 82155F80h case   12:*/		return 0x82155F84;
	}
	return 0x82155F84;
} // Block from 82155F50h-82155F84h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82155F84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82155F84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82155F84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82155F84);
		  /* 82155F84h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 82155F84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82155F84h case    0:*/		return 0x82155F88;
		  /* 82155F88h */ case    1:  		/* lis R10, 64 */
		/* 82155F88h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x40);
		/* 82155F88h case    1:*/		return 0x82155F8C;
		  /* 82155F8Ch */ case    2:  		/* rlwinm R9, R3, 0, 16, 31 */
		/* 82155F8Ch case    2:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R3);
		/* 82155F8Ch case    2:*/		return 0x82155F90;
		  /* 82155F90h */ case    3:  		/* rlwimi R10, R11, 16, 10, 15 */
		/* 82155F90h case    3:*/		cpu::op::rlwimi<0,16,10,15>(regs,&regs.R10,regs.R11);
		/* 82155F90h case    3:*/		return 0x82155F94;
		  /* 82155F94h */ case    4:  		/* or R11, R30, R28 */
		/* 82155F94h case    4:*/		cpu::op::or<0>(regs,&regs.R11,regs.R30,regs.R28);
		/* 82155F94h case    4:*/		return 0x82155F98;
		  /* 82155F98h */ case    5:  		/* or R10, R10, R9 */
		/* 82155F98h case    5:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82155F98h case    5:*/		return 0x82155F9C;
		  /* 82155F9Ch */ case    6:  		/* stw R10, <#[R31]> */
		/* 82155F9Ch case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82155F9Ch case    6:*/		return 0x82155FA0;
	}
	return 0x82155FA0;
} // Block from 82155F84h-82155FA0h (7 instructions)

