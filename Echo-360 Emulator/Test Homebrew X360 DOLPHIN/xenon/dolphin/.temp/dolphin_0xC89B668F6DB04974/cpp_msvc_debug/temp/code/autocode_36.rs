#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 821D6140h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6140);
		  /* 821D6140h */ case    0:  		/* mr R4, R25 */
		/* 821D6140h case    0:*/		regs.R4 = regs.R25;
		/* 821D6140h case    0:*/		return 0x821D6144;
		  /* 821D6144h */ case    1:  		/* mr R3, R19 */
		/* 821D6144h case    1:*/		regs.R3 = regs.R19;
		/* 821D6144h case    1:*/		return 0x821D6148;
		  /* 821D6148h */ case    2:  		/* bl -241696 */
		/* 821D6148h case    2:*/		regs.LR = 0x821D614C; return 0x8219B128;
		/* 821D6148h case    2:*/		return 0x821D614C;
		  /* 821D614Ch */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D614Ch case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D614Ch case    3:*/		return 0x821D6150;
		  /* 821D6150h */ case    4:  		/* bc 4, CR0_EQ, -152 */
		/* 821D6150h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821D60B8;  }
		/* 821D6150h case    4:*/		return 0x821D6154;
		  /* 821D6154h */ case    5:  		/* addi R6, R1, 1184 */
		/* 821D6154h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x4A0);
		/* 821D6154h case    5:*/		return 0x821D6158;
		  /* 821D6158h */ case    6:  		/* addi R5, R1, 1168 */
		/* 821D6158h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x490);
		/* 821D6158h case    6:*/		return 0x821D615C;
		  /* 821D615Ch */ case    7:  		/* mr R4, R25 */
		/* 821D615Ch case    7:*/		regs.R4 = regs.R25;
		/* 821D615Ch case    7:*/		return 0x821D6160;
		  /* 821D6160h */ case    8:  		/* mr R3, R19 */
		/* 821D6160h case    8:*/		regs.R3 = regs.R19;
		/* 821D6160h case    8:*/		return 0x821D6164;
		  /* 821D6164h */ case    9:  		/* bl 314308 */
		/* 821D6164h case    9:*/		regs.LR = 0x821D6168; return 0x82222D28;
		/* 821D6164h case    9:*/		return 0x821D6168;
		  /* 821D6168h */ case   10:  		/* lfd FR0, <#[R1 + 1168]> */
		/* 821D6168h case   10:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000490) );
		/* 821D6168h case   10:*/		return 0x821D616C;
		  /* 821D616Ch */ case   11:  		/* fcmpu CR6, FR0, FR27 */
		/* 821D616Ch case   11:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR27);
		/* 821D616Ch case   11:*/		return 0x821D6170;
		  /* 821D6170h */ case   12:  		/* bc 12, CR6_GT, 16 */
		/* 821D6170h case   12:*/		if ( regs.CR[6].gt ) { return 0x821D6180;  }
		/* 821D6170h case   12:*/		return 0x821D6174;
		  /* 821D6174h */ case   13:  		/* lfd FR0, <#[R1 + 1184]> */
		/* 821D6174h case   13:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000004A0) );
		/* 821D6174h case   13:*/		return 0x821D6178;
		  /* 821D6178h */ case   14:  		/* fcmpu CR6, FR0, FR27 */
		/* 821D6178h case   14:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR27);
		/* 821D6178h case   14:*/		return 0x821D617C;
		  /* 821D617Ch */ case   15:  		/* bc 4, CR6_LT, 68 */
		/* 821D617Ch case   15:*/		if ( !regs.CR[6].lt ) { return 0x821D61C0;  }
		/* 821D617Ch case   15:*/		return 0x821D6180;
	}
	return 0x821D6180;
} // Block from 821D6140h-821D6180h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821D6180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6180);
		  /* 821D6180h */ case    0:  		/* lwz R10, <#[R24 + 44]> */
		/* 821D6180h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x0000002C) );
		/* 821D6180h case    0:*/		return 0x821D6184;
		  /* 821D6184h */ case    1:  		/* rlwinm. R11, R10, 0, 3, 3 */
		/* 821D6184h case    1:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R10);
		/* 821D6184h case    1:*/		return 0x821D6188;
		  /* 821D6188h */ case    2:  		/* bc 12, CR0_EQ, -272 */
		/* 821D6188h case    2:*/		if ( regs.CR[0].eq ) { return 0x821D6078;  }
		/* 821D6188h case    2:*/		return 0x821D618C;
		  /* 821D618Ch */ case    3:  		/* lwz R11, <#[R16 + 16]> */
		/* 821D618Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000010) );
		/* 821D618Ch case    3:*/		return 0x821D6190;
		  /* 821D6190h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821D6190h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D6190h case    4:*/		return 0x821D6194;
		  /* 821D6194h */ case    5:  		/* bc 12, CR6_EQ, -284 */
		/* 821D6194h case    5:*/		if ( regs.CR[6].eq ) { return 0x821D6078;  }
		/* 821D6194h case    5:*/		return 0x821D6198;
		  /* 821D6198h */ case    6:  		/* lwz R9, <#[R11]> */
		/* 821D6198h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821D6198h case    6:*/		return 0x821D619C;
		  /* 821D619Ch */ case    7:  		/* cmpwi CR6, R9, 0 */
		/* 821D619Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821D619Ch case    7:*/		return 0x821D61A0;
		  /* 821D61A0h */ case    8:  		/* bc 12, CR6_EQ, 16 */
		/* 821D61A0h case    8:*/		if ( regs.CR[6].eq ) { return 0x821D61B0;  }
		/* 821D61A0h case    8:*/		return 0x821D61A4;
		  /* 821D61A4h */ case    9:  		/* lwz R11, <#[R11 + 4]> */
		/* 821D61A4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821D61A4h case    9:*/		return 0x821D61A8;
		  /* 821D61A8h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821D61A8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D61A8h case   10:*/		return 0x821D61AC;
		  /* 821D61ACh */ case   11:  		/* bc 4, CR6_EQ, -20 */
		/* 821D61ACh case   11:*/		if ( !regs.CR[6].eq ) { return 0x821D6198;  }
		/* 821D61ACh case   11:*/		return 0x821D61B0;
	}
	return 0x821D61B0;
} // Block from 821D6180h-821D61B0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821D61B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D61B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D61B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D61B0);
		  /* 821D61B0h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821D61B0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D61B0h case    0:*/		return 0x821D61B4;
		  /* 821D61B4h */ case    1:  		/* bc 12, CR6_EQ, -316 */
		/* 821D61B4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D6078;  }
		/* 821D61B4h case    1:*/		return 0x821D61B8;
		  /* 821D61B8h */ case    2:  		/* oris R11, R10, 2048 */
		/* 821D61B8h case    2:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R10,0x800);
		/* 821D61B8h case    2:*/		return 0x821D61BC;
		  /* 821D61BCh */ case    3:  		/* stw R11, <#[R24 + 44]> */
		/* 821D61BCh case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x0000002C) );
		/* 821D61BCh case    3:*/		return 0x821D61C0;
	}
	return 0x821D61C0;
} // Block from 821D61B0h-821D61C0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D61C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D61C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D61C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D61C0);
		  /* 821D61C0h */ case    0:  		/* lwz R27, <#[R1 + 156]> */
		/* 821D61C0h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x0000009C) );
		/* 821D61C0h case    0:*/		return 0x821D61C4;
		  /* 821D61C4h */ case    1:  		/* lwz R11, <#[R27 + 8]> */
		/* 821D61C4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821D61C4h case    1:*/		return 0x821D61C8;
		  /* 821D61C8h */ case    2:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D61C8h case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D61C8h case    2:*/		return 0x821D61CC;
		  /* 821D61CCh */ case    3:  		/* cmplwi CR6, R11, 16000 */
		/* 821D61CCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D61CCh case    3:*/		return 0x821D61D0;
		  /* 821D61D0h */ case    4:  		/* bc 4, CR6_EQ, 112 */
		/* 821D61D0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821D6240;  }
		/* 821D61D0h case    4:*/		return 0x821D61D4;
		  /* 821D61D4h */ case    5:  		/* mr R3, R27 */
		/* 821D61D4h case    5:*/		regs.R3 = regs.R27;
		/* 821D61D4h case    5:*/		return 0x821D61D8;
		  /* 821D61D8h */ case    6:  		/* lwz R5, <#[R1 + 200]> */
		/* 821D61D8h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000C8) );
		/* 821D61D8h case    6:*/		return 0x821D61DC;
		  /* 821D61DCh */ case    7:  		/* lwz R4, <#[R1 + 204]> */
		/* 821D61DCh case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000CC) );
		/* 821D61DCh case    7:*/		return 0x821D61E0;
		  /* 821D61E0h */ case    8:  		/* bl 308416 */
		/* 821D61E0h case    8:*/		regs.LR = 0x821D61E4; return 0x822216A0;
		/* 821D61E0h case    8:*/		return 0x821D61E4;
		  /* 821D61E4h */ case    9:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D61E4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D61E4h case    9:*/		return 0x821D61E8;
		  /* 821D61E8h */ case   10:  		/* lwz R6, <#[R1 + 152]> */
		/* 821D61E8h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000098) );
		/* 821D61E8h case   10:*/		return 0x821D61EC;
		  /* 821D61ECh */ case   11:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D61ECh case   11:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D61ECh case   11:*/		return 0x821D61F0;
		  /* 821D61F0h */ case   12:  		/* lwz R7, <#[R1 + 164]> */
		/* 821D61F0h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000A4) );
		/* 821D61F0h case   12:*/		return 0x821D61F4;
		  /* 821D61F4h */ case   13:  		/* lwz R8, <#[R1 + 168]> */
		/* 821D61F4h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000A8) );
		/* 821D61F4h case   13:*/		return 0x821D61F8;
		  /* 821D61F8h */ case   14:  		/* cmpwi CR6, R11, 13 */
		/* 821D61F8h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000D);
		/* 821D61F8h case   14:*/		return 0x821D61FC;
		  /* 821D61FCh */ case   15:  		/* bc 12, CR6_EQ, 44 */
		/* 821D61FCh case   15:*/		if ( regs.CR[6].eq ) { return 0x821D6228;  }
		/* 821D61FCh case   15:*/		return 0x821D6200;
		  /* 821D6200h */ case   16:  		/* cmpwi CR6, R11, 14 */
		/* 821D6200h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 821D6200h case   16:*/		return 0x821D6204;
		  /* 821D6204h */ case   17:  		/* bc 12, CR6_EQ, 24 */
		/* 821D6204h case   17:*/		if ( regs.CR[6].eq ) { return 0x821D621C;  }
		/* 821D6204h case   17:*/		return 0x821D6208;
		  /* 821D6208h */ case   18:  		/* cmpwi CR6, R11, 15 */
		/* 821D6208h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000F);
		/* 821D6208h case   18:*/		return 0x821D620C;
		  /* 821D620Ch */ case   19:  		/* bc 4, CR6_EQ, 1844 */
		/* 821D620Ch case   19:*/		if ( !regs.CR[6].eq ) { return 0x821D6940;  }
		/* 821D620Ch case   19:*/		return 0x821D6210;
		  /* 821D6210h */ case   20:  		/* fcmpu CR6, FR1, FR27 */
		/* 821D6210h case   20:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR27);
		/* 821D6210h case   20:*/		return 0x821D6214;
		  /* 821D6214h */ case   21:  		/* bc 4, CR6_GT, -400 */
		/* 821D6214h case   21:*/		if ( !regs.CR[6].gt ) { return 0x821D6084;  }
		/* 821D6214h case   21:*/		return 0x821D6218;
		  /* 821D6218h */ case   22:  		/* b 24 */
		/* 821D6218h case   22:*/		return 0x821D6230;
		/* 821D6218h case   22:*/		return 0x821D621C;
	}
	return 0x821D621C;
} // Block from 821D61C0h-821D621Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 821D621Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D621C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D621C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D621C);
		  /* 821D621Ch */ case    0:  		/* fcmpu CR6, FR1, FR27 */
		/* 821D621Ch case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR27);
		/* 821D621Ch case    0:*/		return 0x821D6220;
		  /* 821D6220h */ case    1:  		/* bc 12, CR6_LT, -412 */
		/* 821D6220h case    1:*/		if ( regs.CR[6].lt ) { return 0x821D6084;  }
		/* 821D6220h case    1:*/		return 0x821D6224;
		  /* 821D6224h */ case    2:  		/* b 12 */
		/* 821D6224h case    2:*/		return 0x821D6230;
		/* 821D6224h case    2:*/		return 0x821D6228;
	}
	return 0x821D6228;
} // Block from 821D621Ch-821D6228h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D6228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6228);
		  /* 821D6228h */ case    0:  		/* fcmpu CR6, FR1, FR27 */
		/* 821D6228h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR27);
		/* 821D6228h case    0:*/		return 0x821D622C;
		  /* 821D622Ch */ case    1:  		/* bc 4, CR6_EQ, -424 */
		/* 821D622Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D6084;  }
		/* 821D622Ch case    1:*/		return 0x821D6230;
	}
	return 0x821D6230;
} // Block from 821D6228h-821D6230h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D6230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6230);
		  /* 821D6230h */ case    0:  		/* lwz R6, <#[R1 + 140]> */
		/* 821D6230h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x0000008C) );
		/* 821D6230h case    0:*/		return 0x821D6234;
		  /* 821D6234h */ case    1:  		/* lwz R7, <#[R1 + 144]> */
		/* 821D6234h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 821D6234h case    1:*/		return 0x821D6238;
		  /* 821D6238h */ case    2:  		/* lwz R8, <#[R1 + 148]> */
		/* 821D6238h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 821D6238h case    2:*/		return 0x821D623C;
		  /* 821D623Ch */ case    3:  		/* b -440 */
		/* 821D623Ch case    3:*/		return 0x821D6084;
		/* 821D623Ch case    3:*/		return 0x821D6240;
	}
	return 0x821D6240;
} // Block from 821D6230h-821D6240h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D6240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6240);
		  /* 821D6240h */ case    0:  		/* lwz R31, <#[R1 + 140]> */
		/* 821D6240h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x0000008C) );
		/* 821D6240h case    0:*/		return 0x821D6244;
		  /* 821D6244h */ case    1:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D6244h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D6244h case    1:*/		return 0x821D6248;
		  /* 821D6248h */ case    2:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D6248h case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D6248h case    2:*/		return 0x821D624C;
		  /* 821D624Ch */ case    3:  		/* cmplwi CR6, R11, 16000 */
		/* 821D624Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D624Ch case    3:*/		return 0x821D6250;
		  /* 821D6250h */ case    4:  		/* bc 4, CR6_EQ, 312 */
		/* 821D6250h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821D6388;  }
		/* 821D6250h case    4:*/		return 0x821D6254;
		  /* 821D6254h */ case    5:  		/* lwz R11, <#[R1 + 152]> */
		/* 821D6254h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000098) );
		/* 821D6254h case    5:*/		return 0x821D6258;
		  /* 821D6258h */ case    6:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D6258h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D6258h case    6:*/		return 0x821D625C;
		  /* 821D625Ch */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D625Ch case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D625Ch case    7:*/		return 0x821D6260;
		  /* 821D6260h */ case    8:  		/* cmplwi CR6, R11, 16000 */
		/* 821D6260h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D6260h case    8:*/		return 0x821D6264;
		  /* 821D6264h */ case    9:  		/* bc 4, CR6_EQ, 292 */
		/* 821D6264h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821D6388;  }
		/* 821D6264h case    9:*/		return 0x821D6268;
		  /* 821D6268h */ case   10:  		/* mr R3, R31 */
		/* 821D6268h case   10:*/		regs.R3 = regs.R31;
		/* 821D6268h case   10:*/		return 0x821D626C;
		  /* 821D626Ch */ case   11:  		/* lwz R5, <#[R1 + 148]> */
		/* 821D626Ch case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000094) );
		/* 821D626Ch case   11:*/		return 0x821D6270;
		  /* 821D6270h */ case   12:  		/* lwz R4, <#[R1 + 144]> */
		/* 821D6270h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000090) );
		/* 821D6270h case   12:*/		return 0x821D6274;
		  /* 821D6274h */ case   13:  		/* bl 308268 */
		/* 821D6274h case   13:*/		regs.LR = 0x821D6278; return 0x822216A0;
		/* 821D6274h case   13:*/		return 0x821D6278;
		  /* 821D6278h */ case   14:  		/* lwz R5, <#[R1 + 168]> */
		/* 821D6278h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000A8) );
		/* 821D6278h case   14:*/		return 0x821D627C;
		  /* 821D627Ch */ case   15:  		/* lwz R4, <#[R1 + 164]> */
		/* 821D627Ch case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000A4) );
		/* 821D627Ch case   15:*/		return 0x821D6280;
		  /* 821D6280h */ case   16:  		/* fmr FR31, FR1 */
		/* 821D6280h case   16:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 821D6280h case   16:*/		return 0x821D6284;
		  /* 821D6284h */ case   17:  		/* lwz R3, <#[R1 + 152]> */
		/* 821D6284h case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000098) );
		/* 821D6284h case   17:*/		return 0x821D6288;
		  /* 821D6288h */ case   18:  		/* bl 308248 */
		/* 821D6288h case   18:*/		regs.LR = 0x821D628C; return 0x822216A0;
		/* 821D6288h case   18:*/		return 0x821D628C;
		  /* 821D628Ch */ case   19:  		/* fcmpu CR6, FR31, FR26 */
		/* 821D628Ch case   19:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR26);
		/* 821D628Ch case   19:*/		return 0x821D6290;
		  /* 821D6290h */ case   20:  		/* bc 4, CR6_EQ, 12 */
		/* 821D6290h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821D629C;  }
		/* 821D6290h case   20:*/		return 0x821D6294;
		  /* 821D6294h */ case   21:  		/* fcmpu CR6, FR1, FR27 */
		/* 821D6294h case   21:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR27);
		/* 821D6294h case   21:*/		return 0x821D6298;
		  /* 821D6298h */ case   22:  		/* bc 12, CR6_EQ, 20 */
		/* 821D6298h case   22:*/		if ( regs.CR[6].eq ) { return 0x821D62AC;  }
		/* 821D6298h case   22:*/		return 0x821D629C;
	}
	return 0x821D629C;
} // Block from 821D6240h-821D629Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 821D629Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D629C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D629C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D629C);
		  /* 821D629Ch */ case    0:  		/* fcmpu CR6, FR31, FR27 */
		/* 821D629Ch case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR27);
		/* 821D629Ch case    0:*/		return 0x821D62A0;
		  /* 821D62A0h */ case    1:  		/* bc 4, CR6_EQ, 224 */
		/* 821D62A0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D6380;  }
		/* 821D62A0h case    1:*/		return 0x821D62A4;
		  /* 821D62A4h */ case    2:  		/* fcmpu CR6, FR1, FR26 */
		/* 821D62A4h case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR26);
		/* 821D62A4h case    2:*/		return 0x821D62A8;
		  /* 821D62A8h */ case    3:  		/* bc 4, CR6_EQ, 216 */
		/* 821D62A8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D6380;  }
		/* 821D62A8h case    3:*/		return 0x821D62AC;
	}
	return 0x821D62AC;
} // Block from 821D629Ch-821D62ACh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D62ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D62AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D62AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D62AC);
		  /* 821D62ACh */ case    0:  		/* li R5, 0 */
		/* 821D62ACh case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D62ACh case    0:*/		return 0x821D62B0;
		  /* 821D62B0h */ case    1:  		/* li R4, 0 */
		/* 821D62B0h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D62B0h case    1:*/		return 0x821D62B4;
		  /* 821D62B4h */ case    2:  		/* mr R3, R24 */
		/* 821D62B4h case    2:*/		regs.R3 = regs.R24;
		/* 821D62B4h case    2:*/		return 0x821D62B8;
		  /* 821D62B8h */ case    3:  		/* bl 346080 */
		/* 821D62B8h case    3:*/		regs.LR = 0x821D62BC; return 0x8222AA98;
		/* 821D62B8h case    3:*/		return 0x821D62BC;
		  /* 821D62BCh */ case    4:  		/* mr R4, R3 */
		/* 821D62BCh case    4:*/		regs.R4 = regs.R3;
		/* 821D62BCh case    4:*/		return 0x821D62C0;
		  /* 821D62C0h */ case    5:  		/* li R5, 0 */
		/* 821D62C0h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D62C0h case    5:*/		return 0x821D62C4;
		  /* 821D62C4h */ case    6:  		/* mr R3, R24 */
		/* 821D62C4h case    6:*/		regs.R3 = regs.R24;
		/* 821D62C4h case    6:*/		return 0x821D62C8;
		  /* 821D62C8h */ case    7:  		/* bl -385464 */
		/* 821D62C8h case    7:*/		regs.LR = 0x821D62CC; return 0x82178110;
		/* 821D62C8h case    7:*/		return 0x821D62CC;
		  /* 821D62CCh */ case    8:  		/* mr R31, R3 */
		/* 821D62CCh case    8:*/		regs.R31 = regs.R3;
		/* 821D62CCh case    8:*/		return 0x821D62D0;
		  /* 821D62D0h */ case    9:  		/* mr R3, R24 */
		/* 821D62D0h case    9:*/		regs.R3 = regs.R24;
		/* 821D62D0h case    9:*/		return 0x821D62D4;
		  /* 821D62D4h */ case   10:  		/* lwz R6, <#[R1 + 200]> */
		/* 821D62D4h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000C8) );
		/* 821D62D4h case   10:*/		return 0x821D62D8;
		  /* 821D62D8h */ case   11:  		/* lwz R5, <#[R1 + 204]> */
		/* 821D62D8h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000CC) );
		/* 821D62D8h case   11:*/		return 0x821D62DC;
		  /* 821D62DCh */ case   12:  		/* lwz R4, <#[R1 + 156]> */
		/* 821D62DCh case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000009C) );
		/* 821D62DCh case   12:*/		return 0x821D62E0;
		  /* 821D62E0h */ case   13:  		/* bl -385400 */
		/* 821D62E0h case   13:*/		regs.LR = 0x821D62E4; return 0x82178168;
		/* 821D62E0h case   13:*/		return 0x821D62E4;
		  /* 821D62E4h */ case   14:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D62E4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D62E4h case   14:*/		return 0x821D62E8;
		  /* 821D62E8h */ case   15:  		/* mr R6, R3 */
		/* 821D62E8h case   15:*/		regs.R6 = regs.R3;
		/* 821D62E8h case   15:*/		return 0x821D62EC;
		  /* 821D62ECh */ case   16:  		/* mr R3, R24 */
		/* 821D62ECh case   16:*/		regs.R3 = regs.R24;
		/* 821D62ECh case   16:*/		return 0x821D62F0;
		  /* 821D62F0h */ case   17:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D62F0h case   17:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D62F0h case   17:*/		return 0x821D62F4;
		  /* 821D62F4h */ case   18:  		/* cmpwi CR6, R11, 13 */
		/* 821D62F4h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000D);
		/* 821D62F4h case   18:*/		return 0x821D62F8;
		  /* 821D62F8h */ case   19:  		/* bc 12, CR6_EQ, 100 */
		/* 821D62F8h case   19:*/		if ( regs.CR[6].eq ) { return 0x821D635C;  }
		/* 821D62F8h case   19:*/		return 0x821D62FC;
		  /* 821D62FCh */ case   20:  		/* cmpwi CR6, R11, 14 */
		/* 821D62FCh case   20:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 821D62FCh case   20:*/		return 0x821D6300;
		  /* 821D6300h */ case   21:  		/* bc 12, CR6_EQ, 52 */
		/* 821D6300h case   21:*/		if ( regs.CR[6].eq ) { return 0x821D6334;  }
		/* 821D6300h case   21:*/		return 0x821D6304;
		  /* 821D6304h */ case   22:  		/* cmpwi CR6, R11, 15 */
		/* 821D6304h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000F);
		/* 821D6304h case   22:*/		return 0x821D6308;
		  /* 821D6308h */ case   23:  		/* bc 4, CR6_EQ, 1604 */
		/* 821D6308h case   23:*/		if ( !regs.CR[6].eq ) { return 0x821D694C;  }
		/* 821D6308h case   23:*/		return 0x821D630C;
		  /* 821D630Ch */ case   24:  		/* fcmpu CR6, FR31, FR26 */
		/* 821D630Ch case   24:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR26);
		/* 821D630Ch case   24:*/		return 0x821D6310;
		  /* 821D6310h */ case   25:  		/* mr R5, R16 */
		/* 821D6310h case   25:*/		regs.R5 = regs.R16;
		/* 821D6310h case   25:*/		return 0x821D6314;
		  /* 821D6314h */ case   26:  		/* li R4, 0 */
		/* 821D6314h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D6314h case   26:*/		return 0x821D6318;
		  /* 821D6318h */ case   27:  		/* bc 4, CR6_EQ, 12 */
		/* 821D6318h case   27:*/		if ( !regs.CR[6].eq ) { return 0x821D6324;  }
		/* 821D6318h case   27:*/		return 0x821D631C;
		  /* 821D631Ch */ case   28:  		/* mr R7, R31 */
		/* 821D631Ch case   28:*/		regs.R7 = regs.R31;
		/* 821D631Ch case   28:*/		return 0x821D6320;
		  /* 821D6320h */ case   29:  		/* b 52 */
		/* 821D6320h case   29:*/		return 0x821D6354;
		/* 821D6320h case   29:*/		return 0x821D6324;
	}
	return 0x821D6324;
} // Block from 821D62ACh-821D6324h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821D6324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6324);
		  /* 821D6324h */ case    0:  		/* mr R7, R6 */
		/* 821D6324h case    0:*/		regs.R7 = regs.R6;
		/* 821D6324h case    0:*/		return 0x821D6328;
		  /* 821D6328h */ case    1:  		/* mr R6, R31 */
		/* 821D6328h case    1:*/		regs.R6 = regs.R31;
		/* 821D6328h case    1:*/		return 0x821D632C;
		  /* 821D632Ch */ case    2:  		/* bl -259644 */
		/* 821D632Ch case    2:*/		regs.LR = 0x821D6330; return 0x82196CF0;
		/* 821D632Ch case    2:*/		return 0x821D6330;
		  /* 821D6330h */ case    3:  		/* b -512 */
		/* 821D6330h case    3:*/		return 0x821D6130;
		/* 821D6330h case    3:*/		return 0x821D6334;
	}
	return 0x821D6334;
} // Block from 821D6324h-821D6334h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D6334h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6334( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6334) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6334);
		  /* 821D6334h */ case    0:  		/* fcmpu CR6, FR31, FR26 */
		/* 821D6334h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR26);
		/* 821D6334h case    0:*/		return 0x821D6338;
		  /* 821D6338h */ case    1:  		/* mr R5, R16 */
		/* 821D6338h case    1:*/		regs.R5 = regs.R16;
		/* 821D6338h case    1:*/		return 0x821D633C;
		  /* 821D633Ch */ case    2:  		/* li R4, 0 */
		/* 821D633Ch case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D633Ch case    2:*/		return 0x821D6340;
		  /* 821D6340h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 821D6340h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D634C;  }
		/* 821D6340h case    3:*/		return 0x821D6344;
		  /* 821D6344h */ case    4:  		/* mr R7, R31 */
		/* 821D6344h case    4:*/		regs.R7 = regs.R31;
		/* 821D6344h case    4:*/		return 0x821D6348;
		  /* 821D6348h */ case    5:  		/* b -28 */
		/* 821D6348h case    5:*/		return 0x821D632C;
		/* 821D6348h case    5:*/		return 0x821D634C;
	}
	return 0x821D634C;
} // Block from 821D6334h-821D634Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D634Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D634C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D634C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D634C);
		  /* 821D634Ch */ case    0:  		/* mr R7, R6 */
		/* 821D634Ch case    0:*/		regs.R7 = regs.R6;
		/* 821D634Ch case    0:*/		return 0x821D6350;
		  /* 821D6350h */ case    1:  		/* mr R6, R31 */
		/* 821D6350h case    1:*/		regs.R6 = regs.R31;
		/* 821D6350h case    1:*/		return 0x821D6354;
	}
	return 0x821D6354;
} // Block from 821D634Ch-821D6354h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D6354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6354);
		  /* 821D6354h */ case    0:  		/* bl -259892 */
		/* 821D6354h case    0:*/		regs.LR = 0x821D6358; return 0x82196C20;
		/* 821D6354h case    0:*/		return 0x821D6358;
		  /* 821D6358h */ case    1:  		/* b -552 */
		/* 821D6358h case    1:*/		return 0x821D6130;
		/* 821D6358h case    1:*/		return 0x821D635C;
	}
	return 0x821D635C;
} // Block from 821D6354h-821D635Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D635Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D635C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D635C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D635C);
		  /* 821D635Ch */ case    0:  		/* fcmpu CR6, FR31, FR26 */
		/* 821D635Ch case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR26);
		/* 821D635Ch case    0:*/		return 0x821D6360;
		  /* 821D6360h */ case    1:  		/* mr R7, R31 */
		/* 821D6360h case    1:*/		regs.R7 = regs.R31;
		/* 821D6360h case    1:*/		return 0x821D6364;
		  /* 821D6364h */ case    2:  		/* mr R5, R16 */
		/* 821D6364h case    2:*/		regs.R5 = regs.R16;
		/* 821D6364h case    2:*/		return 0x821D6368;
		  /* 821D6368h */ case    3:  		/* li R4, 0 */
		/* 821D6368h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D6368h case    3:*/		return 0x821D636C;
		  /* 821D636Ch */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 821D636Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x821D6378;  }
		/* 821D636Ch case    4:*/		return 0x821D6370;
		  /* 821D6370h */ case    5:  		/* bl -230168 */
		/* 821D6370h case    5:*/		regs.LR = 0x821D6374; return 0x8219E058;
		/* 821D6370h case    5:*/		return 0x821D6374;
		  /* 821D6374h */ case    6:  		/* b -580 */
		/* 821D6374h case    6:*/		return 0x821D6130;
		/* 821D6374h case    6:*/		return 0x821D6378;
	}
	return 0x821D6378;
} // Block from 821D635Ch-821D6378h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D6378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6378);
		  /* 821D6378h */ case    0:  		/* bl -229968 */
		/* 821D6378h case    0:*/		regs.LR = 0x821D637C; return 0x8219E128;
		/* 821D6378h case    0:*/		return 0x821D637C;
		  /* 821D637Ch */ case    1:  		/* b -588 */
		/* 821D637Ch case    1:*/		return 0x821D6130;
		/* 821D637Ch case    1:*/		return 0x821D6380;
	}
	return 0x821D6380;
} // Block from 821D6378h-821D6380h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D6380h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6380( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6380) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6380);
		  /* 821D6380h */ case    0:  		/* lwz R27, <#[R1 + 156]> */
		/* 821D6380h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x0000009C) );
		/* 821D6380h case    0:*/		return 0x821D6384;
		  /* 821D6384h */ case    1:  		/* lwz R31, <#[R1 + 140]> */
		/* 821D6384h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x0000008C) );
		/* 821D6384h case    1:*/		return 0x821D6388;
	}
	return 0x821D6388;
} // Block from 821D6380h-821D6388h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D6388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6388);
		  /* 821D6388h */ case    0:  		/* lwz R11, <#[R1 + 152]> */
		/* 821D6388h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000098) );
		/* 821D6388h case    0:*/		return 0x821D638C;
		  /* 821D638Ch */ case    1:  		/* lwz R8, <#[R1 + 148]> */
		/* 821D638Ch case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000094) );
		/* 821D638Ch case    1:*/		return 0x821D6390;
		  /* 821D6390h */ case    2:  		/* lwz R7, <#[R1 + 144]> */
		/* 821D6390h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000090) );
		/* 821D6390h case    2:*/		return 0x821D6394;
		  /* 821D6394h */ case    3:  		/* cmplw CR6, R31, R11 */
		/* 821D6394h case    3:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821D6394h case    3:*/		return 0x821D6398;
		  /* 821D6398h */ case    4:  		/* bc 4, CR6_EQ, 36 */
		/* 821D6398h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821D63BC;  }
		/* 821D6398h case    4:*/		return 0x821D639C;
		  /* 821D639Ch */ case    5:  		/* lwz R11, <#[R1 + 164]> */
		/* 821D639Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A4) );
		/* 821D639Ch case    5:*/		return 0x821D63A0;
		  /* 821D63A0h */ case    6:  		/* cmpw CR6, R7, R11 */
		/* 821D63A0h case    6:*/		cpu::op::cmpw<6>(regs,regs.R7,regs.R11);
		/* 821D63A0h case    6:*/		return 0x821D63A4;
		  /* 821D63A4h */ case    7:  		/* bc 4, CR6_EQ, 24 */
		/* 821D63A4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821D63BC;  }
		/* 821D63A4h case    7:*/		return 0x821D63A8;
		  /* 821D63A8h */ case    8:  		/* lwz R11, <#[R1 + 168]> */
		/* 821D63A8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000A8) );
		/* 821D63A8h case    8:*/		return 0x821D63AC;
		  /* 821D63ACh */ case    9:  		/* cmplw CR6, R8, R11 */
		/* 821D63ACh case    9:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 821D63ACh case    9:*/		return 0x821D63B0;
		  /* 821D63B0h */ case   10:  		/* bc 4, CR6_EQ, 12 */
		/* 821D63B0h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821D63BC;  }
		/* 821D63B0h case   10:*/		return 0x821D63B4;
		  /* 821D63B4h */ case   11:  		/* mr R6, R31 */
		/* 821D63B4h case   11:*/		regs.R6 = regs.R31;
		/* 821D63B4h case   11:*/		return 0x821D63B8;
		  /* 821D63B8h */ case   12:  		/* b -820 */
		/* 821D63B8h case   12:*/		return 0x821D6084;
		/* 821D63B8h case   12:*/		return 0x821D63BC;
	}
	return 0x821D63BC;
} // Block from 821D6388h-821D63BCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821D63BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D63BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D63BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D63BC);
		  /* 821D63BCh */ case    0:  		/* lwz R11, <#[R27 + 8]> */
		/* 821D63BCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821D63BCh case    0:*/		return 0x821D63C0;
		  /* 821D63C0h */ case    1:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D63C0h case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D63C0h case    1:*/		return 0x821D63C4;
		  /* 821D63C4h */ case    2:  		/* cmplwi CR6, R11, 5 */
		/* 821D63C4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 821D63C4h case    2:*/		return 0x821D63C8;
		  /* 821D63C8h */ case    3:  		/* bc 12, CR6_EQ, 28 */
		/* 821D63C8h case    3:*/		if ( regs.CR[6].eq ) { return 0x821D63E4;  }
		/* 821D63C8h case    3:*/		return 0x821D63CC;
		  /* 821D63CCh */ case    4:  		/* cmplwi CR6, R11, 8 */
		/* 821D63CCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000008);
		/* 821D63CCh case    4:*/		return 0x821D63D0;
		  /* 821D63D0h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 821D63D0h case    5:*/		if ( regs.CR[6].eq ) { return 0x821D63E4;  }
		/* 821D63D0h case    5:*/		return 0x821D63D4;
		  /* 821D63D4h */ case    6:  		/* cmplwi CR6, R11, 6 */
		/* 821D63D4h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 821D63D4h case    6:*/		return 0x821D63D8;
		  /* 821D63D8h */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 821D63D8h case    7:*/		if ( regs.CR[6].eq ) { return 0x821D63E4;  }
		/* 821D63D8h case    7:*/		return 0x821D63DC;
		  /* 821D63DCh */ case    8:  		/* cmplwi CR6, R11, 7 */
		/* 821D63DCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000007);
		/* 821D63DCh case    8:*/		return 0x821D63E0;
		  /* 821D63E0h */ case    9:  		/* bc 4, CR6_EQ, 780 */
		/* 821D63E0h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821D66EC;  }
		/* 821D63E0h case    9:*/		return 0x821D63E4;
	}
	return 0x821D63E4;
} // Block from 821D63BCh-821D63E4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821D63E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D63E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D63E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D63E4);
		  /* 821D63E4h */ case    0:  		/* lwz R11, <#[R1 + 200]> */
		/* 821D63E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000C8) );
		/* 821D63E4h case    0:*/		return 0x821D63E8;
		  /* 821D63E8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821D63E8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D63E8h case    1:*/		return 0x821D63EC;
		  /* 821D63ECh */ case    2:  		/* bc 4, CR6_EQ, 768 */
		/* 821D63ECh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D66EC;  }
		/* 821D63ECh case    2:*/		return 0x821D63F0;
		  /* 821D63F0h */ case    3:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D63F0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D63F0h case    3:*/		return 0x821D63F4;
		  /* 821D63F4h */ case    4:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D63F4h case    4:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D63F4h case    4:*/		return 0x821D63F8;
		  /* 821D63F8h */ case    5:  		/* cmplwi CR6, R11, 1792 */
		/* 821D63F8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000700);
		/* 821D63F8h case    5:*/		return 0x821D63FC;
		  /* 821D63FCh */ case    6:  		/* bc 12, CR6_EQ, 752 */
		/* 821D63FCh case    6:*/		if ( regs.CR[6].eq ) { return 0x821D66EC;  }
		/* 821D63FCh case    6:*/		return 0x821D6400;
		  /* 821D6400h */ case    7:  		/* li R10, 0 */
		/* 821D6400h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D6400h case    7:*/		return 0x821D6404;
		  /* 821D6404h */ case    8:  		/* lwz R3, <#[R27 + 44]> */
		/* 821D6404h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x0000002C) );
		/* 821D6404h case    8:*/		return 0x821D6408;
		  /* 821D6408h */ case    9:  		/* mr R9, R16 */
		/* 821D6408h case    9:*/		regs.R9 = regs.R16;
		/* 821D6408h case    9:*/		return 0x821D640C;
		  /* 821D640Ch */ case   10:  		/* lwz R4, <#[R1 + 204]> */
		/* 821D640Ch case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000CC) );
		/* 821D640Ch case   10:*/		return 0x821D6410;
		  /* 821D6410h */ case   11:  		/* li R8, 0 */
		/* 821D6410h case   11:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D6410h case   11:*/		return 0x821D6414;
		  /* 821D6414h */ case   12:  		/* addi R7, R1, 416 */
		/* 821D6414h case   12:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1A0);
		/* 821D6414h case   12:*/		return 0x821D6418;
		  /* 821D6418h */ case   13:  		/* addi R6, R1, 360 */
		/* 821D6418h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x168);
		/* 821D6418h case   13:*/		return 0x821D641C;
		  /* 821D641Ch */ case   14:  		/* addi R5, R1, 316 */
		/* 821D641Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x13C);
		/* 821D641Ch case   14:*/		return 0x821D6420;
		  /* 821D6420h */ case   15:  		/* bl 315568 */
		/* 821D6420h case   15:*/		regs.LR = 0x821D6424; return 0x822234D0;
		/* 821D6420h case   15:*/		return 0x821D6424;
		  /* 821D6424h */ case   16:  		/* lwz R11, <#[R1 + 156]> */
		/* 821D6424h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000009C) );
		/* 821D6424h case   16:*/		return 0x821D6428;
		  /* 821D6428h */ case   17:  		/* li R10, 0 */
		/* 821D6428h case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D6428h case   17:*/		return 0x821D642C;
		  /* 821D642Ch */ case   18:  		/* lwz R4, <#[R1 + 204]> */
		/* 821D642Ch case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000CC) );
		/* 821D642Ch case   18:*/		return 0x821D6430;
		  /* 821D6430h */ case   19:  		/* mr R9, R16 */
		/* 821D6430h case   19:*/		regs.R9 = regs.R16;
		/* 821D6430h case   19:*/		return 0x821D6434;
		  /* 821D6434h */ case   20:  		/* li R8, 0 */
		/* 821D6434h case   20:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D6434h case   20:*/		return 0x821D6438;
		  /* 821D6438h */ case   21:  		/* addi R7, R1, 400 */
		/* 821D6438h case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x190);
		/* 821D6438h case   21:*/		return 0x821D643C;
		  /* 821D643Ch */ case   22:  		/* addi R6, R1, 368 */
		/* 821D643Ch case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x170);
		/* 821D643Ch case   22:*/		return 0x821D6440;
		  /* 821D6440h */ case   23:  		/* lwz R3, <#[R11 + 48]> */
		/* 821D6440h case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000030) );
		/* 821D6440h case   23:*/		return 0x821D6444;
		  /* 821D6444h */ case   24:  		/* addi R5, R1, 428 */
		/* 821D6444h case   24:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x1AC);
		/* 821D6444h case   24:*/		return 0x821D6448;
		  /* 821D6448h */ case   25:  		/* bl 315528 */
		/* 821D6448h case   25:*/		regs.LR = 0x821D644C; return 0x822234D0;
		/* 821D6448h case   25:*/		return 0x821D644C;
		  /* 821D644Ch */ case   26:  		/* lwz R3, <#[R1 + 428]> */
		/* 821D644Ch case   26:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000001AC) );
		/* 821D644Ch case   26:*/		return 0x821D6450;
		  /* 821D6450h */ case   27:  		/* li R26, 1 */
		/* 821D6450h case   27:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 821D6450h case   27:*/		return 0x821D6454;
		  /* 821D6454h */ case   28:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D6454h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D6454h case   28:*/		return 0x821D6458;
		  /* 821D6458h */ case   29:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D6458h case   29:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D6458h case   29:*/		return 0x821D645C;
		  /* 821D645Ch */ case   30:  		/* cmplwi CR6, R11, 16000 */
		/* 821D645Ch case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D645Ch case   30:*/		return 0x821D6460;
		  /* 821D6460h */ case   31:  		/* bc 4, CR6_EQ, 48 */
		/* 821D6460h case   31:*/		if ( !regs.CR[6].eq ) { return 0x821D6490;  }
		/* 821D6460h case   31:*/		return 0x821D6464;
		  /* 821D6464h */ case   32:  		/* lwz R5, <#[R1 + 400]> */
		/* 821D6464h case   32:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000190) );
		/* 821D6464h case   32:*/		return 0x821D6468;
		  /* 821D6468h */ case   33:  		/* lwz R4, <#[R1 + 368]> */
		/* 821D6468h case   33:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000170) );
		/* 821D6468h case   33:*/		return 0x821D646C;
		  /* 821D646Ch */ case   34:  		/* bl 307764 */
		/* 821D646Ch case   34:*/		regs.LR = 0x821D6470; return 0x822216A0;
		/* 821D646Ch case   34:*/		return 0x821D6470;
		  /* 821D6470h */ case   35:  		/* fcmpu CR6, FR1, FR27 */
		/* 821D6470h case   35:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR27);
		/* 821D6470h case   35:*/		return 0x821D6474;
		  /* 821D6474h */ case   36:  		/* bc 4, CR6_EQ, 28 */
		/* 821D6474h case   36:*/		if ( !regs.CR[6].eq ) { return 0x821D6490;  }
		/* 821D6474h case   36:*/		return 0x821D6478;
		  /* 821D6478h */ case   37:  		/* mr R3, R24 */
		/* 821D6478h case   37:*/		regs.R3 = regs.R24;
		/* 821D6478h case   37:*/		return 0x821D647C;
		  /* 821D647Ch */ case   38:  		/* lwz R6, <#[R1 + 416]> */
		/* 821D647Ch case   38:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000001A0) );
		/* 821D647Ch case   38:*/		return 0x821D6480;
		  /* 821D6480h */ case   39:  		/* lwz R5, <#[R1 + 360]> */
		/* 821D6480h case   39:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000168) );
		/* 821D6480h case   39:*/		return 0x821D6484;
		  /* 821D6484h */ case   40:  		/* lwz R4, <#[R1 + 316]> */
		/* 821D6484h case   40:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000013C) );
		/* 821D6484h case   40:*/		return 0x821D6488;
		  /* 821D6488h */ case   41:  		/* bl -385824 */
		/* 821D6488h case   41:*/		regs.LR = 0x821D648C; return 0x82178168;
		/* 821D6488h case   41:*/		return 0x821D648C;
		  /* 821D648Ch */ case   42:  		/* b 80 */
		/* 821D648Ch case   42:*/		return 0x821D64DC;
		/* 821D648Ch case   42:*/		return 0x821D6490;
	}
	return 0x821D6490;
} // Block from 821D63E4h-821D6490h (43 instructions)

//////////////////////////////////////////////////////
// Block at 821D6490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6490);
		  /* 821D6490h */ case    0:  		/* lwz R27, <#[R1 + 156]> */
		/* 821D6490h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x0000009C) );
		/* 821D6490h case    0:*/		return 0x821D6494;
		  /* 821D6494h */ case    1:  		/* cmplwi CR6, R26, 1 */
		/* 821D6494h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000001);
		/* 821D6494h case    1:*/		return 0x821D6498;
		  /* 821D6498h */ case    2:  		/* bc 4, CR6_EQ, 592 */
		/* 821D6498h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D66E8;  }
		/* 821D6498h case    2:*/		return 0x821D649C;
		  /* 821D649Ch */ case    3:  		/* lwz R3, <#[R1 + 316]> */
		/* 821D649Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000013C) );
		/* 821D649Ch case    3:*/		return 0x821D64A0;
		  /* 821D64A0h */ case    4:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D64A0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D64A0h case    4:*/		return 0x821D64A4;
		  /* 821D64A4h */ case    5:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D64A4h case    5:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D64A4h case    5:*/		return 0x821D64A8;
		  /* 821D64A8h */ case    6:  		/* cmplwi CR6, R11, 16000 */
		/* 821D64A8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D64A8h case    6:*/		return 0x821D64AC;
		  /* 821D64ACh */ case    7:  		/* bc 4, CR6_EQ, 572 */
		/* 821D64ACh case    7:*/		if ( !regs.CR[6].eq ) { return 0x821D66E8;  }
		/* 821D64ACh case    7:*/		return 0x821D64B0;
		  /* 821D64B0h */ case    8:  		/* lwz R5, <#[R1 + 416]> */
		/* 821D64B0h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000001A0) );
		/* 821D64B0h case    8:*/		return 0x821D64B4;
		  /* 821D64B4h */ case    9:  		/* lwz R4, <#[R1 + 360]> */
		/* 821D64B4h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000168) );
		/* 821D64B4h case    9:*/		return 0x821D64B8;
		  /* 821D64B8h */ case   10:  		/* bl 307688 */
		/* 821D64B8h case   10:*/		regs.LR = 0x821D64BC; return 0x822216A0;
		/* 821D64B8h case   10:*/		return 0x821D64BC;
		  /* 821D64BCh */ case   11:  		/* fcmpu CR6, FR1, FR27 */
		/* 821D64BCh case   11:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR27);
		/* 821D64BCh case   11:*/		return 0x821D64C0;
		  /* 821D64C0h */ case   12:  		/* bc 4, CR6_EQ, 548 */
		/* 821D64C0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821D66E4;  }
		/* 821D64C0h case   12:*/		return 0x821D64C4;
		  /* 821D64C4h */ case   13:  		/* mr R3, R24 */
		/* 821D64C4h case   13:*/		regs.R3 = regs.R24;
		/* 821D64C4h case   13:*/		return 0x821D64C8;
		  /* 821D64C8h */ case   14:  		/* lwz R6, <#[R1 + 400]> */
		/* 821D64C8h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000190) );
		/* 821D64C8h case   14:*/		return 0x821D64CC;
		  /* 821D64CCh */ case   15:  		/* lwz R5, <#[R1 + 368]> */
		/* 821D64CCh case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000170) );
		/* 821D64CCh case   15:*/		return 0x821D64D0;
		  /* 821D64D0h */ case   16:  		/* lwz R4, <#[R1 + 428]> */
		/* 821D64D0h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000001AC) );
		/* 821D64D0h case   16:*/		return 0x821D64D4;
		  /* 821D64D4h */ case   17:  		/* bl -385900 */
		/* 821D64D4h case   17:*/		regs.LR = 0x821D64D8; return 0x82178168;
		/* 821D64D4h case   17:*/		return 0x821D64D8;
		  /* 821D64D8h */ case   18:  		/* li R26, 0 */
		/* 821D64D8h case   18:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821D64D8h case   18:*/		return 0x821D64DC;
	}
	return 0x821D64DC;
} // Block from 821D6490h-821D64DCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 821D64DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D64DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D64DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D64DC);
		  /* 821D64DCh */ case    0:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D64DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D64DCh case    0:*/		return 0x821D64E0;
		  /* 821D64E0h */ case    1:  		/* mr R31, R3 */
		/* 821D64E0h case    1:*/		regs.R31 = regs.R3;
		/* 821D64E0h case    1:*/		return 0x821D64E4;
		  /* 821D64E4h */ case    2:  		/* mr R3, R24 */
		/* 821D64E4h case    2:*/		regs.R3 = regs.R24;
		/* 821D64E4h case    2:*/		return 0x821D64E8;
		  /* 821D64E8h */ case    3:  		/* lwz R6, <#[R1 + 148]> */
		/* 821D64E8h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000094) );
		/* 821D64E8h case    3:*/		return 0x821D64EC;
		  /* 821D64ECh */ case    4:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D64ECh case    4:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D64ECh case    4:*/		return 0x821D64F0;
		  /* 821D64F0h */ case    5:  		/* lwz R5, <#[R1 + 144]> */
		/* 821D64F0h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000090) );
		/* 821D64F0h case    5:*/		return 0x821D64F4;
		  /* 821D64F4h */ case    6:  		/* lwz R4, <#[R1 + 140]> */
		/* 821D64F4h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000008C) );
		/* 821D64F4h case    6:*/		return 0x821D64F8;
		  /* 821D64F8h */ case    7:  		/* addi R11, R11, -1664 */
		/* 821D64F8h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFF980);
		/* 821D64F8h case    7:*/		return 0x821D64FC;
		  /* 821D64FCh */ case    8:  		/* cntlzw R11, R11 */
		/* 821D64FCh case    8:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821D64FCh case    8:*/		return 0x821D6500;
		  /* 821D6500h */ case    9:  		/* rlwinm R28, R11, 27, 31, 31 */
		/* 821D6500h case    9:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R28,regs.R11);
		/* 821D6500h case    9:*/		return 0x821D6504;
		  /* 821D6504h */ case   10:  		/* bl -385948 */
		/* 821D6504h case   10:*/		regs.LR = 0x821D6508; return 0x82178168;
		/* 821D6504h case   10:*/		return 0x821D6508;
		  /* 821D6508h */ case   11:  		/* mr R30, R3 */
		/* 821D6508h case   11:*/		regs.R30 = regs.R3;
		/* 821D6508h case   11:*/		return 0x821D650C;
		  /* 821D650Ch */ case   12:  		/* lwz R6, <#[R1 + 168]> */
		/* 821D650Ch case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000A8) );
		/* 821D650Ch case   12:*/		return 0x821D6510;
		  /* 821D6510h */ case   13:  		/* mr R3, R24 */
		/* 821D6510h case   13:*/		regs.R3 = regs.R24;
		/* 821D6510h case   13:*/		return 0x821D6514;
		  /* 821D6514h */ case   14:  		/* lwz R5, <#[R1 + 164]> */
		/* 821D6514h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000A4) );
		/* 821D6514h case   14:*/		return 0x821D6518;
		  /* 821D6518h */ case   15:  		/* lwz R4, <#[R1 + 152]> */
		/* 821D6518h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000098) );
		/* 821D6518h case   15:*/		return 0x821D651C;
		  /* 821D651Ch */ case   16:  		/* bl -385972 */
		/* 821D651Ch case   16:*/		regs.LR = 0x821D6520; return 0x82178168;
		/* 821D651Ch case   16:*/		return 0x821D6520;
		  /* 821D6520h */ case   17:  		/* lwz R27, <#[R1 + 156]> */
		/* 821D6520h case   17:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x0000009C) );
		/* 821D6520h case   17:*/		return 0x821D6524;
		  /* 821D6524h */ case   18:  		/* mr R29, R3 */
		/* 821D6524h case   18:*/		regs.R29 = regs.R3;
		/* 821D6524h case   18:*/		return 0x821D6528;
		  /* 821D6528h */ case   19:  		/* lwz R11, <#[R27 + 8]> */
		/* 821D6528h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821D6528h case   19:*/		return 0x821D652C;
		  /* 821D652Ch */ case   20:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D652Ch case   20:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D652Ch case   20:*/		return 0x821D6530;
		  /* 821D6530h */ case   21:  		/* cmpwi CR6, R11, 5 */
		/* 821D6530h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000005);
		/* 821D6530h case   21:*/		return 0x821D6534;
		  /* 821D6534h */ case   22:  		/* bc 12, CR6_EQ, 360 */
		/* 821D6534h case   22:*/		if ( regs.CR[6].eq ) { return 0x821D669C;  }
		/* 821D6534h case   22:*/		return 0x821D6538;
		  /* 821D6538h */ case   23:  		/* cmpwi CR6, R11, 6 */
		/* 821D6538h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 821D6538h case   23:*/		return 0x821D653C;
		  /* 821D653Ch */ case   24:  		/* bc 12, CR6_EQ, 192 */
		/* 821D653Ch case   24:*/		if ( regs.CR[6].eq ) { return 0x821D65FC;  }
		/* 821D653Ch case   24:*/		return 0x821D6540;
		  /* 821D6540h */ case   25:  		/* cmpwi CR6, R11, 7 */
		/* 821D6540h case   25:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000007);
		/* 821D6540h case   25:*/		return 0x821D6544;
		  /* 821D6544h */ case   26:  		/* bc 12, CR6_EQ, 24 */
		/* 821D6544h case   26:*/		if ( regs.CR[6].eq ) { return 0x821D655C;  }
		/* 821D6544h case   26:*/		return 0x821D6548;
		  /* 821D6548h */ case   27:  		/* cmpwi CR6, R11, 8 */
		/* 821D6548h case   27:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 821D6548h case   27:*/		return 0x821D654C;
		  /* 821D654Ch */ case   28:  		/* bc 12, CR6_EQ, 348 */
		/* 821D654Ch case   28:*/		if ( regs.CR[6].eq ) { return 0x821D66A8;  }
		/* 821D654Ch case   28:*/		return 0x821D6550;
		  /* 821D6550h */ case   29:  		/* li R4, 4800 */
		/* 821D6550h case   29:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821D6550h case   29:*/		return 0x821D6554;
		  /* 821D6554h */ case   30:  		/* mr R3, R24 */
		/* 821D6554h case   30:*/		regs.R3 = regs.R24;
		/* 821D6554h case   30:*/		return 0x821D6558;
		  /* 821D6558h */ case   31:  		/* bl -542448 */
		/* 821D6558h case   31:*/		regs.LR = 0x821D655C; return 0x82151E68;
		/* 821D6558h case   31:*/		return 0x821D655C;
	}
	return 0x821D655C;
} // Block from 821D64DCh-821D655Ch (32 instructions)

//////////////////////////////////////////////////////
// Block at 821D655Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D655C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D655C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D655C);
		  /* 821D655Ch */ case    0:  		/* cmplwi CR6, R26, 1 */
		/* 821D655Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000001);
		/* 821D655Ch case    0:*/		return 0x821D6560;
		  /* 821D6560h */ case    1:  		/* bc 4, CR6_EQ, 72 */
		/* 821D6560h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D65A8;  }
		/* 821D6560h case    1:*/		return 0x821D6564;
		  /* 821D6564h */ case    2:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 821D6564h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821D6564h case    2:*/		return 0x821D6568;
		  /* 821D6568h */ case    3:  		/* bc 12, CR0_EQ, 196 */
		/* 821D6568h case    3:*/		if ( regs.CR[0].eq ) { return 0x821D662C;  }
		/* 821D6568h case    3:*/		return 0x821D656C;
		  /* 821D656Ch */ case    4:  		/* li R4, 4 */
		/* 821D656Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821D656Ch case    4:*/		return 0x821D6570;
		  /* 821D6570h */ case    5:  		/* mr R3, R31 */
		/* 821D6570h case    5:*/		regs.R3 = regs.R31;
		/* 821D6570h case    5:*/		return 0x821D6574;
		  /* 821D6574h */ case    6:  		/* bl -262964 */
		/* 821D6574h case    6:*/		regs.LR = 0x821D6578; return 0x82196240;
		/* 821D6574h case    6:*/		return 0x821D6578;
		  /* 821D6578h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D6578h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D6578h case    7:*/		return 0x821D657C;
		  /* 821D657Ch */ case    8:  		/* bc 12, CR0_EQ, -232 */
		/* 821D657Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x821D6494;  }
		/* 821D657Ch case    8:*/		return 0x821D6580;
		  /* 821D6580h */ case    9:  		/* li R4, 4 */
		/* 821D6580h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821D6580h case    9:*/		return 0x821D6584;
		  /* 821D6584h */ case   10:  		/* mr R3, R31 */
		/* 821D6584h case   10:*/		regs.R3 = regs.R31;
		/* 821D6584h case   10:*/		return 0x821D6588;
		  /* 821D6588h */ case   11:  		/* bl -387784 */
		/* 821D6588h case   11:*/		regs.LR = 0x821D658C; return 0x82177AC0;
		/* 821D6588h case   11:*/		return 0x821D658C;
		  /* 821D658Ch */ case   12:  		/* mr R8, R29 */
		/* 821D658Ch case   12:*/		regs.R8 = regs.R29;
		/* 821D658Ch case   12:*/		return 0x821D6590;
		  /* 821D6590h */ case   13:  		/* mr R7, R30 */
		/* 821D6590h case   13:*/		regs.R7 = regs.R30;
		/* 821D6590h case   13:*/		return 0x821D6594;
		  /* 821D6594h */ case   14:  		/* mr R6, R31 */
		/* 821D6594h case   14:*/		regs.R6 = regs.R31;
		/* 821D6594h case   14:*/		return 0x821D6598;
		  /* 821D6598h */ case   15:  		/* mr R5, R16 */
		/* 821D6598h case   15:*/		regs.R5 = regs.R16;
		/* 821D6598h case   15:*/		return 0x821D659C;
		  /* 821D659Ch */ case   16:  		/* li R4, 0 */
		/* 821D659Ch case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D659Ch case   16:*/		return 0x821D65A0;
		  /* 821D65A0h */ case   17:  		/* mr R3, R24 */
		/* 821D65A0h case   17:*/		regs.R3 = regs.R24;
		/* 821D65A0h case   17:*/		return 0x821D65A4;
		  /* 821D65A4h */ case   18:  		/* b 240 */
		/* 821D65A4h case   18:*/		return 0x821D6694;
		/* 821D65A4h case   18:*/		return 0x821D65A8;
	}
	return 0x821D65A8;
} // Block from 821D655Ch-821D65A8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821D65A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D65A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D65A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D65A8);
		  /* 821D65A8h */ case    0:  		/* li R4, 4 */
		/* 821D65A8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821D65A8h case    0:*/		return 0x821D65AC;
		  /* 821D65ACh */ case    1:  		/* mr R3, R31 */
		/* 821D65ACh case    1:*/		regs.R3 = regs.R31;
		/* 821D65ACh case    1:*/		return 0x821D65B0;
		  /* 821D65B0h */ case    2:  		/* bl -263024 */
		/* 821D65B0h case    2:*/		regs.LR = 0x821D65B4; return 0x82196240;
		/* 821D65B0h case    2:*/		return 0x821D65B4;
		  /* 821D65B4h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D65B4h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D65B4h case    3:*/		return 0x821D65B8;
		  /* 821D65B8h */ case    4:  		/* bc 12, CR0_EQ, -292 */
		/* 821D65B8h case    4:*/		if ( regs.CR[0].eq ) { return 0x821D6494;  }
		/* 821D65B8h case    4:*/		return 0x821D65BC;
		  /* 821D65BCh */ case    5:  		/* li R4, 4 */
		/* 821D65BCh case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821D65BCh case    5:*/		return 0x821D65C0;
		  /* 821D65C0h */ case    6:  		/* mr R3, R31 */
		/* 821D65C0h case    6:*/		regs.R3 = regs.R31;
		/* 821D65C0h case    6:*/		return 0x821D65C4;
		  /* 821D65C4h */ case    7:  		/* bl -387844 */
		/* 821D65C4h case    7:*/		regs.LR = 0x821D65C8; return 0x82177AC0;
		/* 821D65C4h case    7:*/		return 0x821D65C8;
		  /* 821D65C8h */ case    8:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 821D65C8h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821D65C8h case    8:*/		return 0x821D65CC;
		  /* 821D65CCh */ case    9:  		/* mr R6, R31 */
		/* 821D65CCh case    9:*/		regs.R6 = regs.R31;
		/* 821D65CCh case    9:*/		return 0x821D65D0;
		  /* 821D65D0h */ case   10:  		/* mr R5, R16 */
		/* 821D65D0h case   10:*/		regs.R5 = regs.R16;
		/* 821D65D0h case   10:*/		return 0x821D65D4;
		  /* 821D65D4h */ case   11:  		/* li R4, 0 */
		/* 821D65D4h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D65D4h case   11:*/		return 0x821D65D8;
		  /* 821D65D8h */ case   12:  		/* mr R3, R24 */
		/* 821D65D8h case   12:*/		regs.R3 = regs.R24;
		/* 821D65D8h case   12:*/		return 0x821D65DC;
		  /* 821D65DCh */ case   13:  		/* bc 4, CR0_EQ, 16 */
		/* 821D65DCh case   13:*/		if ( !regs.CR[0].eq ) { return 0x821D65EC;  }
		/* 821D65DCh case   13:*/		return 0x821D65E0;
		  /* 821D65E0h */ case   14:  		/* mr R8, R29 */
		/* 821D65E0h case   14:*/		regs.R8 = regs.R29;
		/* 821D65E0h case   14:*/		return 0x821D65E4;
		  /* 821D65E4h */ case   15:  		/* mr R7, R30 */
		/* 821D65E4h case   15:*/		regs.R7 = regs.R30;
		/* 821D65E4h case   15:*/		return 0x821D65E8;
		  /* 821D65E8h */ case   16:  		/* b 12 */
		/* 821D65E8h case   16:*/		return 0x821D65F4;
		/* 821D65E8h case   16:*/		return 0x821D65EC;
	}
	return 0x821D65EC;
} // Block from 821D65A8h-821D65ECh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821D65ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D65EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D65EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D65EC);
		  /* 821D65ECh */ case    0:  		/* mr R8, R30 */
		/* 821D65ECh case    0:*/		regs.R8 = regs.R30;
		/* 821D65ECh case    0:*/		return 0x821D65F0;
		  /* 821D65F0h */ case    1:  		/* mr R7, R29 */
		/* 821D65F0h case    1:*/		regs.R7 = regs.R29;
		/* 821D65F0h case    1:*/		return 0x821D65F4;
	}
	return 0x821D65F4;
} // Block from 821D65ECh-821D65F4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D65F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D65F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D65F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D65F4);
		  /* 821D65F4h */ case    0:  		/* bl -230140 */
		/* 821D65F4h case    0:*/		regs.LR = 0x821D65F8; return 0x8219E2F8;
		/* 821D65F4h case    0:*/		return 0x821D65F8;
		  /* 821D65F8h */ case    1:  		/* b 224 */
		/* 821D65F8h case    1:*/		return 0x821D66D8;
		/* 821D65F8h case    1:*/		return 0x821D65FC;
	}
	return 0x821D65FC;
} // Block from 821D65F4h-821D65FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D65FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D65FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D65FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D65FC);
		  /* 821D65FCh */ case    0:  		/* cmplwi CR6, R26, 1 */
		/* 821D65FCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000001);
		/* 821D65FCh case    0:*/		return 0x821D6600;
		  /* 821D6600h */ case    1:  		/* bc 4, CR6_EQ, 72 */
		/* 821D6600h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D6648;  }
		/* 821D6600h case    1:*/		return 0x821D6604;
		  /* 821D6604h */ case    2:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 821D6604h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821D6604h case    2:*/		return 0x821D6608;
		  /* 821D6608h */ case    3:  		/* bc 12, CR0_EQ, -124 */
		/* 821D6608h case    3:*/		if ( regs.CR[0].eq ) { return 0x821D658C;  }
		/* 821D6608h case    3:*/		return 0x821D660C;
		  /* 821D660Ch */ case    4:  		/* li R4, 4 */
		/* 821D660Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821D660Ch case    4:*/		return 0x821D6610;
		  /* 821D6610h */ case    5:  		/* mr R3, R31 */
		/* 821D6610h case    5:*/		regs.R3 = regs.R31;
		/* 821D6610h case    5:*/		return 0x821D6614;
		  /* 821D6614h */ case    6:  		/* bl -263124 */
		/* 821D6614h case    6:*/		regs.LR = 0x821D6618; return 0x82196240;
		/* 821D6614h case    6:*/		return 0x821D6618;
		  /* 821D6618h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D6618h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D6618h case    7:*/		return 0x821D661C;
		  /* 821D661Ch */ case    8:  		/* bc 12, CR0_EQ, -392 */
		/* 821D661Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x821D6494;  }
		/* 821D661Ch case    8:*/		return 0x821D6620;
		  /* 821D6620h */ case    9:  		/* li R4, 4 */
		/* 821D6620h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821D6620h case    9:*/		return 0x821D6624;
		  /* 821D6624h */ case   10:  		/* mr R3, R31 */
		/* 821D6624h case   10:*/		regs.R3 = regs.R31;
		/* 821D6624h case   10:*/		return 0x821D6628;
		  /* 821D6628h */ case   11:  		/* bl -387944 */
		/* 821D6628h case   11:*/		regs.LR = 0x821D662C; return 0x82177AC0;
		/* 821D6628h case   11:*/		return 0x821D662C;
	}
	return 0x821D662C;
} // Block from 821D65FCh-821D662Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821D662Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D662C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D662C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D662C);
		  /* 821D662Ch */ case    0:  		/* mr R8, R29 */
		/* 821D662Ch case    0:*/		regs.R8 = regs.R29;
		/* 821D662Ch case    0:*/		return 0x821D6630;
		  /* 821D6630h */ case    1:  		/* mr R7, R30 */
		/* 821D6630h case    1:*/		regs.R7 = regs.R30;
		/* 821D6630h case    1:*/		return 0x821D6634;
		  /* 821D6634h */ case    2:  		/* mr R6, R31 */
		/* 821D6634h case    2:*/		regs.R6 = regs.R31;
		/* 821D6634h case    2:*/		return 0x821D6638;
		  /* 821D6638h */ case    3:  		/* mr R5, R16 */
		/* 821D6638h case    3:*/		regs.R5 = regs.R16;
		/* 821D6638h case    3:*/		return 0x821D663C;
		  /* 821D663Ch */ case    4:  		/* li R4, 0 */
		/* 821D663Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D663Ch case    4:*/		return 0x821D6640;
		  /* 821D6640h */ case    5:  		/* mr R3, R24 */
		/* 821D6640h case    5:*/		regs.R3 = regs.R24;
		/* 821D6640h case    5:*/		return 0x821D6644;
		  /* 821D6644h */ case    6:  		/* b -80 */
		/* 821D6644h case    6:*/		return 0x821D65F4;
		/* 821D6644h case    6:*/		return 0x821D6648;
	}
	return 0x821D6648;
} // Block from 821D662Ch-821D6648h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D6648h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6648);
		  /* 821D6648h */ case    0:  		/* li R4, 4 */
		/* 821D6648h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821D6648h case    0:*/		return 0x821D664C;
		  /* 821D664Ch */ case    1:  		/* mr R3, R31 */
		/* 821D664Ch case    1:*/		regs.R3 = regs.R31;
		/* 821D664Ch case    1:*/		return 0x821D6650;
		  /* 821D6650h */ case    2:  		/* bl -263184 */
		/* 821D6650h case    2:*/		regs.LR = 0x821D6654; return 0x82196240;
		/* 821D6650h case    2:*/		return 0x821D6654;
		  /* 821D6654h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D6654h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D6654h case    3:*/		return 0x821D6658;
		  /* 821D6658h */ case    4:  		/* bc 12, CR0_EQ, -452 */
		/* 821D6658h case    4:*/		if ( regs.CR[0].eq ) { return 0x821D6494;  }
		/* 821D6658h case    4:*/		return 0x821D665C;
		  /* 821D665Ch */ case    5:  		/* li R4, 4 */
		/* 821D665Ch case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x4);
		/* 821D665Ch case    5:*/		return 0x821D6660;
		  /* 821D6660h */ case    6:  		/* mr R3, R31 */
		/* 821D6660h case    6:*/		regs.R3 = regs.R31;
		/* 821D6660h case    6:*/		return 0x821D6664;
		  /* 821D6664h */ case    7:  		/* bl -388004 */
		/* 821D6664h case    7:*/		regs.LR = 0x821D6668; return 0x82177AC0;
		/* 821D6664h case    7:*/		return 0x821D6668;
		  /* 821D6668h */ case    8:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 821D6668h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821D6668h case    8:*/		return 0x821D666C;
		  /* 821D666Ch */ case    9:  		/* mr R6, R31 */
		/* 821D666Ch case    9:*/		regs.R6 = regs.R31;
		/* 821D666Ch case    9:*/		return 0x821D6670;
		  /* 821D6670h */ case   10:  		/* mr R5, R16 */
		/* 821D6670h case   10:*/		regs.R5 = regs.R16;
		/* 821D6670h case   10:*/		return 0x821D6674;
		  /* 821D6674h */ case   11:  		/* li R4, 0 */
		/* 821D6674h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D6674h case   11:*/		return 0x821D6678;
		  /* 821D6678h */ case   12:  		/* mr R3, R24 */
		/* 821D6678h case   12:*/		regs.R3 = regs.R24;
		/* 821D6678h case   12:*/		return 0x821D667C;
		  /* 821D667Ch */ case   13:  		/* bc 4, CR0_EQ, 16 */
		/* 821D667Ch case   13:*/		if ( !regs.CR[0].eq ) { return 0x821D668C;  }
		/* 821D667Ch case   13:*/		return 0x821D6680;
		  /* 821D6680h */ case   14:  		/* mr R8, R29 */
		/* 821D6680h case   14:*/		regs.R8 = regs.R29;
		/* 821D6680h case   14:*/		return 0x821D6684;
		  /* 821D6684h */ case   15:  		/* mr R7, R30 */
		/* 821D6684h case   15:*/		regs.R7 = regs.R30;
		/* 821D6684h case   15:*/		return 0x821D6688;
		  /* 821D6688h */ case   16:  		/* b 12 */
		/* 821D6688h case   16:*/		return 0x821D6694;
		/* 821D6688h case   16:*/		return 0x821D668C;
	}
	return 0x821D668C;
} // Block from 821D6648h-821D668Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 821D668Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D668C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D668C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D668C);
		  /* 821D668Ch */ case    0:  		/* mr R8, R30 */
		/* 821D668Ch case    0:*/		regs.R8 = regs.R30;
		/* 821D668Ch case    0:*/		return 0x821D6690;
		  /* 821D6690h */ case    1:  		/* mr R7, R29 */
		/* 821D6690h case    1:*/		regs.R7 = regs.R29;
		/* 821D6690h case    1:*/		return 0x821D6694;
	}
	return 0x821D6694;
} // Block from 821D668Ch-821D6694h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D6694h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6694( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6694) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6694);
		  /* 821D6694h */ case    0:  		/* bl -230044 */
		/* 821D6694h case    0:*/		regs.LR = 0x821D6698; return 0x8219E3F8;
		/* 821D6694h case    0:*/		return 0x821D6698;
		  /* 821D6698h */ case    1:  		/* b 64 */
		/* 821D6698h case    1:*/		return 0x821D66D8;
		/* 821D6698h case    1:*/		return 0x821D669C;
	}
	return 0x821D669C;
} // Block from 821D6694h-821D669Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D669Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D669C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D669C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D669C);
		  /* 821D669Ch */ case    0:  		/* rlwinm R11, R28, 0, 24, 31 */
		/* 821D669Ch case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821D669Ch case    0:*/		return 0x821D66A0;
		  /* 821D66A0h */ case    1:  		/* cntlzw R11, R11 */
		/* 821D66A0h case    1:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821D66A0h case    1:*/		return 0x821D66A4;
		  /* 821D66A4h */ case    2:  		/* rlwinm R28, R11, 27, 31, 31 */
		/* 821D66A4h case    2:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R28,regs.R11);
		/* 821D66A4h case    2:*/		return 0x821D66A8;
	}
	return 0x821D66A8;
} // Block from 821D669Ch-821D66A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D66A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D66A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D66A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D66A8);
		  /* 821D66A8h */ case    0:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 821D66A8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821D66A8h case    0:*/		return 0x821D66AC;
		  /* 821D66ACh */ case    1:  		/* mr R6, R31 */
		/* 821D66ACh case    1:*/		regs.R6 = regs.R31;
		/* 821D66ACh case    1:*/		return 0x821D66B0;
		  /* 821D66B0h */ case    2:  		/* mr R5, R16 */
		/* 821D66B0h case    2:*/		regs.R5 = regs.R16;
		/* 821D66B0h case    2:*/		return 0x821D66B4;
		  /* 821D66B4h */ case    3:  		/* li R4, 0 */
		/* 821D66B4h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D66B4h case    3:*/		return 0x821D66B8;
		  /* 821D66B8h */ case    4:  		/* mr R3, R24 */
		/* 821D66B8h case    4:*/		regs.R3 = regs.R24;
		/* 821D66B8h case    4:*/		return 0x821D66BC;
		  /* 821D66BCh */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 821D66BCh case    5:*/		if ( regs.CR[0].eq ) { return 0x821D66CC;  }
		/* 821D66BCh case    5:*/		return 0x821D66C0;
		  /* 821D66C0h */ case    6:  		/* mr R8, R29 */
		/* 821D66C0h case    6:*/		regs.R8 = regs.R29;
		/* 821D66C0h case    6:*/		return 0x821D66C4;
		  /* 821D66C4h */ case    7:  		/* mr R7, R30 */
		/* 821D66C4h case    7:*/		regs.R7 = regs.R30;
		/* 821D66C4h case    7:*/		return 0x821D66C8;
		  /* 821D66C8h */ case    8:  		/* b 12 */
		/* 821D66C8h case    8:*/		return 0x821D66D4;
		/* 821D66C8h case    8:*/		return 0x821D66CC;
	}
	return 0x821D66CC;
} // Block from 821D66A8h-821D66CCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D66CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D66CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D66CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D66CC);
		  /* 821D66CCh */ case    0:  		/* mr R8, R30 */
		/* 821D66CCh case    0:*/		regs.R8 = regs.R30;
		/* 821D66CCh case    0:*/		return 0x821D66D0;
		  /* 821D66D0h */ case    1:  		/* mr R7, R29 */
		/* 821D66D0h case    1:*/		regs.R7 = regs.R29;
		/* 821D66D0h case    1:*/		return 0x821D66D4;
	}
	return 0x821D66D4;
} // Block from 821D66CCh-821D66D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D66D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D66D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D66D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D66D4);
		  /* 821D66D4h */ case    0:  		/* bl -230620 */
		/* 821D66D4h case    0:*/		regs.LR = 0x821D66D8; return 0x8219E1F8;
		/* 821D66D4h case    0:*/		return 0x821D66D8;
	}
	return 0x821D66D8;
} // Block from 821D66D4h-821D66D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D66D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D66D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D66D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D66D8);
		  /* 821D66D8h */ case    0:  		/* cmplwi CR6, R3, 0 */
		/* 821D66D8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821D66D8h case    0:*/		return 0x821D66DC;
		  /* 821D66DCh */ case    1:  		/* bc 12, CR6_EQ, -588 */
		/* 821D66DCh case    1:*/		if ( regs.CR[6].eq ) { return 0x821D6490;  }
		/* 821D66DCh case    1:*/		return 0x821D66E0;
		  /* 821D66E0h */ case    2:  		/* b -1456 */
		/* 821D66E0h case    2:*/		return 0x821D6130;
		/* 821D66E0h case    2:*/		return 0x821D66E4;
	}
	return 0x821D66E4;
} // Block from 821D66D8h-821D66E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D66E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D66E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D66E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D66E4);
		  /* 821D66E4h */ case    0:  		/* lwz R27, <#[R1 + 156]> */
		/* 821D66E4h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x0000009C) );
		/* 821D66E4h case    0:*/		return 0x821D66E8;
	}
	return 0x821D66E8;
} // Block from 821D66E4h-821D66E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D66E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D66E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D66E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D66E8);
		  /* 821D66E8h */ case    0:  		/* lwz R31, <#[R1 + 140]> */
		/* 821D66E8h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x0000008C) );
		/* 821D66E8h case    0:*/		return 0x821D66EC;
	}
	return 0x821D66EC;
} // Block from 821D66E8h-821D66ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D66ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D66EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D66EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D66EC);
		  /* 821D66ECh */ case    0:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D66ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D66ECh case    0:*/		return 0x821D66F0;
		  /* 821D66F0h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D66F0h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D66F0h case    1:*/		return 0x821D66F4;
		  /* 821D66F4h */ case    2:  		/* cmplwi CR6, R11, 1792 */
		/* 821D66F4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000700);
		/* 821D66F4h case    2:*/		return 0x821D66F8;
		  /* 821D66F8h */ case    3:  		/* bc 12, CR6_EQ, 280 */
		/* 821D66F8h case    3:*/		if ( regs.CR[6].eq ) { return 0x821D6810;  }
		/* 821D66F8h case    3:*/		return 0x821D66FC;
		  /* 821D66FCh */ case    4:  		/* lwz R11, <#[R1 + 200]> */
		/* 821D66FCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000C8) );
		/* 821D66FCh case    4:*/		return 0x821D6700;
		  /* 821D6700h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821D6700h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D6700h case    5:*/		return 0x821D6704;
		  /* 821D6704h */ case    6:  		/* bc 4, CR6_EQ, 268 */
		/* 821D6704h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821D6810;  }
		/* 821D6704h case    6:*/		return 0x821D6708;
		  /* 821D6708h */ case    7:  		/* mr R4, R27 */
		/* 821D6708h case    7:*/		regs.R4 = regs.R27;
		/* 821D6708h case    7:*/		return 0x821D670C;
		  /* 821D670Ch */ case    8:  		/* mr R3, R24 */
		/* 821D670Ch case    8:*/		regs.R3 = regs.R24;
		/* 821D670Ch case    8:*/		return 0x821D6710;
		  /* 821D6710h */ case    9:  		/* bl -100336 */
		/* 821D6710h case    9:*/		regs.LR = 0x821D6714; return 0x821BDF20;
		/* 821D6710h case    9:*/		return 0x821D6714;
		  /* 821D6714h */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D6714h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D6714h case   10:*/		return 0x821D6718;
		  /* 821D6718h */ case   11:  		/* bc 12, CR0_EQ, 248 */
		/* 821D6718h case   11:*/		if ( regs.CR[0].eq ) { return 0x821D6810;  }
		/* 821D6718h case   11:*/		return 0x821D671C;
		  /* 821D671Ch */ case   12:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D671Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D671Ch case   12:*/		return 0x821D6720;
		  /* 821D6720h */ case   13:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D6720h case   13:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D6720h case   13:*/		return 0x821D6724;
		  /* 821D6724h */ case   14:  		/* cmplwi CR6, R11, 16000 */
		/* 821D6724h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D6724h case   14:*/		return 0x821D6728;
		  /* 821D6728h */ case   15:  		/* bc 4, CR6_EQ, 32 */
		/* 821D6728h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821D6748;  }
		/* 821D6728h case   15:*/		return 0x821D672C;
		  /* 821D672Ch */ case   16:  		/* mr R3, R31 */
		/* 821D672Ch case   16:*/		regs.R3 = regs.R31;
		/* 821D672Ch case   16:*/		return 0x821D6730;
		  /* 821D6730h */ case   17:  		/* lwz R4, <#[R1 + 144]> */
		/* 821D6730h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000090) );
		/* 821D6730h case   17:*/		return 0x821D6734;
		  /* 821D6734h */ case   18:  		/* bl -104420 */
		/* 821D6734h case   18:*/		regs.LR = 0x821D6738; return 0x821BCF50;
		/* 821D6734h case   18:*/		return 0x821D6738;
		  /* 821D6738h */ case   19:  		/* lwz R31, <#[R1 + 140]> */
		/* 821D6738h case   19:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x0000008C) );
		/* 821D6738h case   19:*/		return 0x821D673C;
		  /* 821D673Ch */ case   20:  		/* fcmpu CR6, FR1, FR27 */
		/* 821D673Ch case   20:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR27);
		/* 821D673Ch case   20:*/		return 0x821D6740;
		  /* 821D6740h */ case   21:  		/* li R11, 1 */
		/* 821D6740h case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D6740h case   21:*/		return 0x821D6744;
		  /* 821D6744h */ case   22:  		/* bc 12, CR6_EQ, 8 */
		/* 821D6744h case   22:*/		if ( regs.CR[6].eq ) { return 0x821D674C;  }
		/* 821D6744h case   22:*/		return 0x821D6748;
	}
	return 0x821D6748;
} // Block from 821D66ECh-821D6748h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821D6748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6748);
		  /* 821D6748h */ case    0:  		/* li R11, 0 */
		/* 821D6748h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D6748h case    0:*/		return 0x821D674C;
	}
	return 0x821D674C;
} // Block from 821D6748h-821D674Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D674Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D674C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D674C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D674C);
		  /* 821D674Ch */ case    0:  		/* lwz R3, <#[R1 + 152]> */
		/* 821D674Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000098) );
		/* 821D674Ch case    0:*/		return 0x821D6750;
		  /* 821D6750h */ case    1:  		/* rlwinm R30, R11, 0, 24, 31 */
		/* 821D6750h case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R30,regs.R11);
		/* 821D6750h case    1:*/		return 0x821D6754;
		  /* 821D6754h */ case    2:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D6754h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D6754h case    2:*/		return 0x821D6758;
		  /* 821D6758h */ case    3:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D6758h case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D6758h case    3:*/		return 0x821D675C;
		  /* 821D675Ch */ case    4:  		/* cmplwi CR6, R11, 16000 */
		/* 821D675Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D675Ch case    4:*/		return 0x821D6760;
		  /* 821D6760h */ case    5:  		/* bc 4, CR6_EQ, 28 */
		/* 821D6760h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821D677C;  }
		/* 821D6760h case    5:*/		return 0x821D6764;
		  /* 821D6764h */ case    6:  		/* lwz R4, <#[R1 + 164]> */
		/* 821D6764h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000A4) );
		/* 821D6764h case    6:*/		return 0x821D6768;
		  /* 821D6768h */ case    7:  		/* bl -104472 */
		/* 821D6768h case    7:*/		regs.LR = 0x821D676C; return 0x821BCF50;
		/* 821D6768h case    7:*/		return 0x821D676C;
		  /* 821D676Ch */ case    8:  		/* lwz R31, <#[R1 + 140]> */
		/* 821D676Ch case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x0000008C) );
		/* 821D676Ch case    8:*/		return 0x821D6770;
		  /* 821D6770h */ case    9:  		/* fcmpu CR6, FR1, FR27 */
		/* 821D6770h case    9:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR27);
		/* 821D6770h case    9:*/		return 0x821D6774;
		  /* 821D6774h */ case   10:  		/* li R11, 1 */
		/* 821D6774h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D6774h case   10:*/		return 0x821D6778;
		  /* 821D6778h */ case   11:  		/* bc 12, CR6_EQ, 8 */
		/* 821D6778h case   11:*/		if ( regs.CR[6].eq ) { return 0x821D6780;  }
		/* 821D6778h case   11:*/		return 0x821D677C;
	}
	return 0x821D677C;
} // Block from 821D674Ch-821D677Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821D677Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D677C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D677C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D677C);
		  /* 821D677Ch */ case    0:  		/* li R11, 0 */
		/* 821D677Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D677Ch case    0:*/		return 0x821D6780;
	}
	return 0x821D6780;
} // Block from 821D677Ch-821D6780h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D6780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6780);
		  /* 821D6780h */ case    0:  		/* rlwinm. R10, R30, 0, 24, 31 */
		/* 821D6780h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R30);
		/* 821D6780h case    0:*/		return 0x821D6784;
		  /* 821D6784h */ case    1:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 821D6784h case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D6784h case    1:*/		return 0x821D6788;
		  /* 821D6788h */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 821D6788h case    2:*/		if ( regs.CR[0].eq ) { return 0x821D679C;  }
		/* 821D6788h case    2:*/		return 0x821D678C;
		  /* 821D678Ch */ case    3:  		/* lwz R9, <#[R16 + 8]> */
		/* 821D678Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R16 + 0x00000008) );
		/* 821D678Ch case    3:*/		return 0x821D6790;
		  /* 821D6790h */ case    4:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 821D6790h case    4:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821D6790h case    4:*/		return 0x821D6794;
		  /* 821D6794h */ case    5:  		/* cmplwi CR6, R9, 1664 */
		/* 821D6794h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000680);
		/* 821D6794h case    5:*/		return 0x821D6798;
		  /* 821D6798h */ case    6:  		/* bc 12, CR6_EQ, 28 */
		/* 821D6798h case    6:*/		if ( regs.CR[6].eq ) { return 0x821D67B4;  }
		/* 821D6798h case    6:*/		return 0x821D679C;
	}
	return 0x821D679C;
} // Block from 821D6780h-821D679Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D679Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D679C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D679C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D679C);
		  /* 821D679Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D679Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D679Ch case    0:*/		return 0x821D67A0;
		  /* 821D67A0h */ case    1:  		/* bc 12, CR0_EQ, 112 */
		/* 821D67A0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D6810;  }
		/* 821D67A0h case    1:*/		return 0x821D67A4;
		  /* 821D67A4h */ case    2:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D67A4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D67A4h case    2:*/		return 0x821D67A8;
		  /* 821D67A8h */ case    3:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D67A8h case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D67A8h case    3:*/		return 0x821D67AC;
		  /* 821D67ACh */ case    4:  		/* cmplwi CR6, R11, 1664 */
		/* 821D67ACh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000680);
		/* 821D67ACh case    4:*/		return 0x821D67B0;
		  /* 821D67B0h */ case    5:  		/* bc 12, CR6_EQ, 96 */
		/* 821D67B0h case    5:*/		if ( regs.CR[6].eq ) { return 0x821D6810;  }
		/* 821D67B0h case    5:*/		return 0x821D67B4;
	}
	return 0x821D67B4;
} // Block from 821D679Ch-821D67B4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D67B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D67B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D67B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D67B4);
		  /* 821D67B4h */ case    0:  		/* lwz R5, <#[R1 + 144]> */
		/* 821D67B4h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000090) );
		/* 821D67B4h case    0:*/		return 0x821D67B8;
		  /* 821D67B8h */ case    1:  		/* mr R4, R31 */
		/* 821D67B8h case    1:*/		regs.R4 = regs.R31;
		/* 821D67B8h case    1:*/		return 0x821D67BC;
		  /* 821D67BCh */ case    2:  		/* lwz R6, <#[R1 + 148]> */
		/* 821D67BCh case    2:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000094) );
		/* 821D67BCh case    2:*/		return 0x821D67C0;
		  /* 821D67C0h */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 821D67C0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821D67C0h case    3:*/		return 0x821D67C4;
		  /* 821D67C4h */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 821D67C4h case    4:*/		if ( regs.CR[6].eq ) { return 0x821D67D4;  }
		/* 821D67C4h case    4:*/		return 0x821D67C8;
		  /* 821D67C8h */ case    5:  		/* lwz R4, <#[R1 + 152]> */
		/* 821D67C8h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000098) );
		/* 821D67C8h case    5:*/		return 0x821D67CC;
		  /* 821D67CCh */ case    6:  		/* lwz R5, <#[R1 + 164]> */
		/* 821D67CCh case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000A4) );
		/* 821D67CCh case    6:*/		return 0x821D67D0;
		  /* 821D67D0h */ case    7:  		/* lwz R6, <#[R1 + 168]> */
		/* 821D67D0h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000A8) );
		/* 821D67D0h case    7:*/		return 0x821D67D4;
	}
	return 0x821D67D4;
} // Block from 821D67B4h-821D67D4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821D67D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D67D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D67D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D67D4);
		  /* 821D67D4h */ case    0:  		/* mr R3, R24 */
		/* 821D67D4h case    0:*/		regs.R3 = regs.R24;
		/* 821D67D4h case    0:*/		return 0x821D67D8;
		  /* 821D67D8h */ case    1:  		/* bl -386672 */
		/* 821D67D8h case    1:*/		regs.LR = 0x821D67DC; return 0x82178168;
		/* 821D67D8h case    1:*/		return 0x821D67DC;
		  /* 821D67DCh */ case    2:  		/* mr R31, R3 */
		/* 821D67DCh case    2:*/		regs.R31 = regs.R3;
		/* 821D67DCh case    2:*/		return 0x821D67E0;
		  /* 821D67E0h */ case    3:  		/* mr R3, R24 */
		/* 821D67E0h case    3:*/		regs.R3 = regs.R24;
		/* 821D67E0h case    3:*/		return 0x821D67E4;
		  /* 821D67E4h */ case    4:  		/* lwz R6, <#[R1 + 200]> */
		/* 821D67E4h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000C8) );
		/* 821D67E4h case    4:*/		return 0x821D67E8;
		  /* 821D67E8h */ case    5:  		/* lwz R5, <#[R1 + 204]> */
		/* 821D67E8h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000000CC) );
		/* 821D67E8h case    5:*/		return 0x821D67EC;
		  /* 821D67ECh */ case    6:  		/* lwz R4, <#[R1 + 156]> */
		/* 821D67ECh case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000009C) );
		/* 821D67ECh case    6:*/		return 0x821D67F0;
		  /* 821D67F0h */ case    7:  		/* bl -386696 */
		/* 821D67F0h case    7:*/		regs.LR = 0x821D67F4; return 0x82178168;
		/* 821D67F0h case    7:*/		return 0x821D67F4;
		  /* 821D67F4h */ case    8:  		/* mr R6, R3 */
		/* 821D67F4h case    8:*/		regs.R6 = regs.R3;
		/* 821D67F4h case    8:*/		return 0x821D67F8;
		  /* 821D67F8h */ case    9:  		/* mr R5, R16 */
		/* 821D67F8h case    9:*/		regs.R5 = regs.R16;
		/* 821D67F8h case    9:*/		return 0x821D67FC;
		  /* 821D67FCh */ case   10:  		/* li R4, 0 */
		/* 821D67FCh case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D67FCh case   10:*/		return 0x821D6800;
		  /* 821D6800h */ case   11:  		/* mr R3, R24 */
		/* 821D6800h case   11:*/		regs.R3 = regs.R24;
		/* 821D6800h case   11:*/		return 0x821D6804;
		  /* 821D6804h */ case   12:  		/* mr R7, R31 */
		/* 821D6804h case   12:*/		regs.R7 = regs.R31;
		/* 821D6804h case   12:*/		return 0x821D6808;
		  /* 821D6808h */ case   13:  		/* bl -87800 */
		/* 821D6808h case   13:*/		regs.LR = 0x821D680C; return 0x821C1110;
		/* 821D6808h case   13:*/		return 0x821D680C;
		  /* 821D680Ch */ case   14:  		/* b -1756 */
		/* 821D680Ch case   14:*/		return 0x821D6130;
		/* 821D680Ch case   14:*/		return 0x821D6810;
	}
	return 0x821D6810;
} // Block from 821D67D4h-821D6810h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821D6810h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6810);
		  /* 821D6810h */ case    0:  		/* lwz R11, <#[R21]> */
		/* 821D6810h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821D6810h case    0:*/		return 0x821D6814;
		  /* 821D6814h */ case    1:  		/* rlwinm R30, R25, 1, 0, 30 */
		/* 821D6814h case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R30,regs.R25);
		/* 821D6814h case    1:*/		return 0x821D6818;
		  /* 821D6818h */ case    2:  		/* lwz R10, <#[R21 + 12]> */
		/* 821D6818h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x0000000C) );
		/* 821D6818h case    2:*/		return 0x821D681C;
		  /* 821D681Ch */ case    3:  		/* rlwinm R9, R11, 27, 24, 31 */
		/* 821D681Ch case    3:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R9,regs.R11);
		/* 821D681Ch case    3:*/		return 0x821D6820;
		  /* 821D6820h */ case    4:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 821D6820h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 821D6820h case    4:*/		return 0x821D6824;
		  /* 821D6824h */ case    5:  		/* srw R11, R9, R30 */
		/* 821D6824h case    5:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R9,regs.R30);
		/* 821D6824h case    5:*/		return 0x821D6828;
		  /* 821D6828h */ case    6:  		/* lhz R10, <#[R10 + 14]> */
		/* 821D6828h case    6:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000E) );
		/* 821D6828h case    6:*/		return 0x821D682C;
		  /* 821D682Ch */ case    7:  		/* rlwinm R11, R11, 2, 28, 29 */
		/* 821D682Ch case    7:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R11,regs.R11);
		/* 821D682Ch case    7:*/		return 0x821D6830;
		  /* 821D6830h */ case    8:  		/* srw R11, R10, R11 */
		/* 821D6830h case    8:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D6830h case    8:*/		return 0x821D6834;
		  /* 821D6834h */ case    9:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821D6834h case    9:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821D6834h case    9:*/		return 0x821D6838;
		  /* 821D6838h */ case   10:  		/* bl -243640 */
		/* 821D6838h case   10:*/		regs.LR = 0x821D683C; return 0x8219B080;
		/* 821D6838h case   10:*/		return 0x821D683C;
		  /* 821D683Ch */ case   11:  		/* lwz R11, <#[R20]> */
		/* 821D683Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 821D683Ch case   11:*/		return 0x821D6840;
		  /* 821D6840h */ case   12:  		/* lwz R10, <#[R20 + 12]> */
		/* 821D6840h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000000C) );
		/* 821D6840h case   12:*/		return 0x821D6844;
		  /* 821D6844h */ case   13:  		/* mr R31, R3 */
		/* 821D6844h case   13:*/		regs.R31 = regs.R3;
		/* 821D6844h case   13:*/		return 0x821D6848;
		  /* 821D6848h */ case   14:  		/* rlwinm R9, R11, 27, 24, 31 */
		/* 821D6848h case   14:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R9,regs.R11);
		/* 821D6848h case   14:*/		return 0x821D684C;
		  /* 821D684Ch */ case   15:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 821D684Ch case   15:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 821D684Ch case   15:*/		return 0x821D6850;
		  /* 821D6850h */ case   16:  		/* srw R11, R9, R30 */
		/* 821D6850h case   16:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R9,regs.R30);
		/* 821D6850h case   16:*/		return 0x821D6854;
		  /* 821D6854h */ case   17:  		/* lhz R10, <#[R10 + 14]> */
		/* 821D6854h case   17:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000E) );
		/* 821D6854h case   17:*/		return 0x821D6858;
		  /* 821D6858h */ case   18:  		/* rlwinm R11, R11, 2, 28, 29 */
		/* 821D6858h case   18:*/		cpu::op::rlwinm<0,2,28,29>(regs,&regs.R11,regs.R11);
		/* 821D6858h case   18:*/		return 0x821D685C;
		  /* 821D685Ch */ case   19:  		/* srw R11, R10, R11 */
		/* 821D685Ch case   19:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D685Ch case   19:*/		return 0x821D6860;
		  /* 821D6860h */ case   20:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821D6860h case   20:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821D6860h case   20:*/		return 0x821D6864;
		  /* 821D6864h */ case   21:  		/* bl -243684 */
		/* 821D6864h case   21:*/		regs.LR = 0x821D6868; return 0x8219B080;
		/* 821D6864h case   21:*/		return 0x821D6868;
		  /* 821D6868h */ case   22:  		/* cmplw CR6, R31, R3 */
		/* 821D6868h case   22:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R3);
		/* 821D6868h case   22:*/		return 0x821D686C;
		  /* 821D686Ch */ case   23:  		/* bc 12, CR6_EQ, 12 */
		/* 821D686Ch case   23:*/		if ( regs.CR[6].eq ) { return 0x821D6878;  }
		/* 821D686Ch case   23:*/		return 0x821D6870;
		  /* 821D6870h */ case   24:  		/* and R11, R3, R31 */
		/* 821D6870h case   24:*/		cpu::op::and<0>(regs,&regs.R11,regs.R3,regs.R31);
		/* 821D6870h case   24:*/		return 0x821D6874;
		  /* 821D6874h */ case   25:  		/* rlwinm R31, R11, 0, 28, 29 */
		/* 821D6874h case   25:*/		cpu::op::rlwinm<0,0,28,29>(regs,&regs.R31,regs.R11);
		/* 821D6874h case   25:*/		return 0x821D6878;
	}
	return 0x821D6878;
} // Block from 821D6810h-821D6878h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821D6878h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6878);
		  /* 821D6878h */ case    0:  		/* rlwinm R11, R25, 2, 0, 29 */
		/* 821D6878h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R25);
		/* 821D6878h case    0:*/		return 0x821D687C;
		  /* 821D687Ch */ case    1:  		/* lwz R10, <#[R16 + 12]> */
		/* 821D687Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x0000000C) );
		/* 821D687Ch case    1:*/		return 0x821D6880;
		  /* 821D6880h */ case    2:  		/* slw R11, R31, R11 */
		/* 821D6880h case    2:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821D6880h case    2:*/		return 0x821D6884;
		  /* 821D6884h */ case    3:  		/* and R9, R11, R10 */
		/* 821D6884h case    3:*/		cpu::op::and<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 821D6884h case    3:*/		return 0x821D6888;
		  /* 821D6888h */ case    4:  		/* rlwinm R9, R9, 0, 16, 31 */
		/* 821D6888h case    4:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R9);
		/* 821D6888h case    4:*/		return 0x821D688C;
		  /* 821D688Ch */ case    5:  		/* cmplw CR6, R9, R11 */
		/* 821D688Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821D688Ch case    5:*/		return 0x821D6890;
		  /* 821D6890h */ case    6:  		/* bc 4, CR6_EQ, 12 */
		/* 821D6890h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821D689C;  }
		/* 821D6890h case    6:*/		return 0x821D6894;
		  /* 821D6894h */ case    7:  		/* li R11, 0 */
		/* 821D6894h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D6894h case    7:*/		return 0x821D6898;
		  /* 821D6898h */ case    8:  		/* b 16 */
		/* 821D6898h case    8:*/		return 0x821D68A8;
		/* 821D6898h case    8:*/		return 0x821D689C;
	}
	return 0x821D689C;
} // Block from 821D6878h-821D689Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D689Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D689C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D689C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D689C);
		  /* 821D689Ch */ case    0:  		/* or R10, R11, R10 */
		/* 821D689Ch case    0:*/		cpu::op::or<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821D689Ch case    0:*/		return 0x821D68A0;
		  /* 821D68A0h */ case    1:  		/* li R11, 1 */
		/* 821D68A0h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D68A0h case    1:*/		return 0x821D68A4;
		  /* 821D68A4h */ case    2:  		/* sth R10, <#[R16 + 14]> */
		/* 821D68A4h case    2:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R16 + 0x0000000E) );
		/* 821D68A4h case    2:*/		return 0x821D68A8;
	}
	return 0x821D68A8;
} // Block from 821D689Ch-821D68A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D68A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D68A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D68A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D68A8);
		  /* 821D68A8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D68A8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D68A8h case    0:*/		return 0x821D68AC;
		  /* 821D68ACh */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821D68ACh case    1:*/		if ( regs.CR[0].eq ) { return 0x821D68C0;  }
		/* 821D68ACh case    1:*/		return 0x821D68B0;
		  /* 821D68B0h */ case    2:  		/* mr R5, R23 */
		/* 821D68B0h case    2:*/		regs.R5 = regs.R23;
		/* 821D68B0h case    2:*/		return 0x821D68B4;
		  /* 821D68B4h */ case    3:  		/* mr R4, R16 */
		/* 821D68B4h case    3:*/		regs.R4 = regs.R16;
		/* 821D68B4h case    3:*/		return 0x821D68B8;
		  /* 821D68B8h */ case    4:  		/* mr R3, R24 */
		/* 821D68B8h case    4:*/		regs.R3 = regs.R24;
		/* 821D68B8h case    4:*/		return 0x821D68BC;
		  /* 821D68BCh */ case    5:  		/* bl -44636 */
		/* 821D68BCh case    5:*/		regs.LR = 0x821D68C0; return 0x821CBA60;
		/* 821D68BCh case    5:*/		return 0x821D68C0;
	}
	return 0x821D68C0;
} // Block from 821D68A8h-821D68C0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D68C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D68C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D68C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D68C0);
		  /* 821D68C0h */ case    0:  		/* addi R6, R1, 1200 */
		/* 821D68C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x4B0);
		/* 821D68C0h case    0:*/		return 0x821D68C4;
		  /* 821D68C4h */ case    1:  		/* addi R5, R1, 1232 */
		/* 821D68C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x4D0);
		/* 821D68C4h case    1:*/		return 0x821D68C8;
		  /* 821D68C8h */ case    2:  		/* mr R4, R25 */
		/* 821D68C8h case    2:*/		regs.R4 = regs.R25;
		/* 821D68C8h case    2:*/		return 0x821D68CC;
		  /* 821D68CCh */ case    3:  		/* mr R3, R21 */
		/* 821D68CCh case    3:*/		regs.R3 = regs.R21;
		/* 821D68CCh case    3:*/		return 0x821D68D0;
		  /* 821D68D0h */ case    4:  		/* bl 312408 */
		/* 821D68D0h case    4:*/		regs.LR = 0x821D68D4; return 0x82222D28;
		/* 821D68D0h case    4:*/		return 0x821D68D4;
		  /* 821D68D4h */ case    5:  		/* addi R6, R1, 1216 */
		/* 821D68D4h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x4C0);
		/* 821D68D4h case    5:*/		return 0x821D68D8;
		  /* 821D68D8h */ case    6:  		/* addi R5, R1, 1248 */
		/* 821D68D8h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x4E0);
		/* 821D68D8h case    6:*/		return 0x821D68DC;
		  /* 821D68DCh */ case    7:  		/* mr R4, R25 */
		/* 821D68DCh case    7:*/		regs.R4 = regs.R25;
		/* 821D68DCh case    7:*/		return 0x821D68E0;
		  /* 821D68E0h */ case    8:  		/* mr R3, R20 */
		/* 821D68E0h case    8:*/		regs.R3 = regs.R20;
		/* 821D68E0h case    8:*/		return 0x821D68E4;
		  /* 821D68E4h */ case    9:  		/* bl 312388 */
		/* 821D68E4h case    9:*/		regs.LR = 0x821D68E8; return 0x82222D28;
		/* 821D68E4h case    9:*/		return 0x821D68E8;
		  /* 821D68E8h */ case   10:  		/* lfd FR0, <#[R1 + 1200]> */
		/* 821D68E8h case   10:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000004B0) );
		/* 821D68E8h case   10:*/		return 0x821D68EC;
		  /* 821D68ECh */ case   11:  		/* lfd FR13, <#[R1 + 1216]> */
		/* 821D68ECh case   11:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x000004C0) );
		/* 821D68ECh case   11:*/		return 0x821D68F0;
		  /* 821D68F0h */ case   12:  		/* fcmpu CR6, FR0, FR13 */
		/* 821D68F0h case   12:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 821D68F0h case   12:*/		return 0x821D68F4;
		  /* 821D68F4h */ case   13:  		/* bc 4, CR6_GT, 8 */
		/* 821D68F4h case   13:*/		if ( !regs.CR[6].gt ) { return 0x821D68FC;  }
		/* 821D68F4h case   13:*/		return 0x821D68F8;
		  /* 821D68F8h */ case   14:  		/* fmr FR13, FR0 */
		/* 821D68F8h case   14:*/		cpu::op::fmr<0>(regs,&regs.FR13,regs.FR0);
		/* 821D68F8h case   14:*/		return 0x821D68FC;
	}
	return 0x821D68FC;
} // Block from 821D68C0h-821D68FCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 821D68FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D68FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D68FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D68FC);
		  /* 821D68FCh */ case    0:  		/* lfd FR0, <#[R1 + 1232]> */
		/* 821D68FCh case    0:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000004D0) );
		/* 821D68FCh case    0:*/		return 0x821D6900;
		  /* 821D6900h */ case    1:  		/* lfd FR1, <#[R1 + 1248]> */
		/* 821D6900h case    1:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R1 + 0x000004E0) );
		/* 821D6900h case    1:*/		return 0x821D6904;
		  /* 821D6904h */ case    2:  		/* fcmpu CR6, FR0, FR1 */
		/* 821D6904h case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR1);
		/* 821D6904h case    2:*/		return 0x821D6908;
		  /* 821D6908h */ case    3:  		/* bc 4, CR6_LT, 8 */
		/* 821D6908h case    3:*/		if ( !regs.CR[6].lt ) { return 0x821D6910;  }
		/* 821D6908h case    3:*/		return 0x821D690C;
		  /* 821D690Ch */ case    4:  		/* fmr FR1, FR0 */
		/* 821D690Ch case    4:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR0);
		/* 821D690Ch case    4:*/		return 0x821D6910;
	}
	return 0x821D6910;
} // Block from 821D68FCh-821D6910h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D6910h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6910( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6910) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6910);
		  /* 821D6910h */ case    0:  		/* mr R7, R24 */
		/* 821D6910h case    0:*/		regs.R7 = regs.R24;
		/* 821D6910h case    0:*/		return 0x821D6914;
		  /* 821D6914h */ case    1:  		/* fmr FR2, FR13 */
		/* 821D6914h case    1:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR13);
		/* 821D6914h case    1:*/		return 0x821D6918;
		  /* 821D6918h */ case    2:  		/* mr R4, R25 */
		/* 821D6918h case    2:*/		regs.R4 = regs.R25;
		/* 821D6918h case    2:*/		return 0x821D691C;
		  /* 821D691Ch */ case    3:  		/* mr R3, R16 */
		/* 821D691Ch case    3:*/		regs.R3 = regs.R16;
		/* 821D691Ch case    3:*/		return 0x821D6920;
		  /* 821D6920h */ case    4:  		/* bl 311808 */
		/* 821D6920h case    4:*/		regs.LR = 0x821D6924; return 0x82222B20;
		/* 821D6920h case    4:*/		return 0x821D6924;
		  /* 821D6924h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D6924h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D6924h case    5:*/		return 0x821D6928;
		  /* 821D6928h */ case    6:  		/* bc 12, CR0_EQ, -2188 */
		/* 821D6928h case    6:*/		if ( regs.CR[0].eq ) { return 0x821D609C;  }
		/* 821D6928h case    6:*/		return 0x821D692C;
		  /* 821D692Ch */ case    7:  		/* mr R5, R23 */
		/* 821D692Ch case    7:*/		regs.R5 = regs.R23;
		/* 821D692Ch case    7:*/		return 0x821D6930;
		  /* 821D6930h */ case    8:  		/* mr R4, R16 */
		/* 821D6930h case    8:*/		regs.R4 = regs.R16;
		/* 821D6930h case    8:*/		return 0x821D6934;
		  /* 821D6934h */ case    9:  		/* mr R3, R24 */
		/* 821D6934h case    9:*/		regs.R3 = regs.R24;
		/* 821D6934h case    9:*/		return 0x821D6938;
		  /* 821D6938h */ case   10:  		/* bl -44760 */
		/* 821D6938h case   10:*/		regs.LR = 0x821D693C; return 0x821CBA60;
		/* 821D6938h case   10:*/		return 0x821D693C;
		  /* 821D693Ch */ case   11:  		/* b -2208 */
		/* 821D693Ch case   11:*/		return 0x821D609C;
		/* 821D693Ch case   11:*/		return 0x821D6940;
	}
	return 0x821D6940;
} // Block from 821D6910h-821D6940h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821D6940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6940);
		  /* 821D6940h */ case    0:  		/* li R4, 4800 */
		/* 821D6940h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821D6940h case    0:*/		return 0x821D6944;
		  /* 821D6944h */ case    1:  		/* mr R3, R24 */
		/* 821D6944h case    1:*/		regs.R3 = regs.R24;
		/* 821D6944h case    1:*/		return 0x821D6948;
		  /* 821D6948h */ case    2:  		/* bl -543456 */
		/* 821D6948h case    2:*/		regs.LR = 0x821D694C; return 0x82151E68;
		/* 821D6948h case    2:*/		return 0x821D694C;
	}
	return 0x821D694C;
} // Block from 821D6940h-821D694Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D694Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D694C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D694C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D694C);
		  /* 821D694Ch */ case    0:  		/* li R4, 4800 */
		/* 821D694Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821D694Ch case    0:*/		return 0x821D6950;
		  /* 821D6950h */ case    1:  		/* bl -543464 */
		/* 821D6950h case    1:*/		regs.LR = 0x821D6954; return 0x82151E68;
		/* 821D6950h case    1:*/		return 0x821D6954;
	}
	return 0x821D6954;
} // Block from 821D694Ch-821D6954h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D6954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6954);
		  /* 821D6954h */ case    0:  		/* li R24, 0 */
		/* 821D6954h case    0:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821D6954h case    0:*/		return 0x821D6958;
		  /* 821D6958h */ case    1:  		/* cmplwi CR6, R18, 0 */
		/* 821D6958h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 821D6958h case    1:*/		return 0x821D695C;
		  /* 821D695Ch */ case    2:  		/* bc 12, CR6_EQ, 904 */
		/* 821D695Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D695Ch case    2:*/		return 0x821D6960;
		  /* 821D6960h */ case    3:  		/* lwz R31, <#[R1 + 1908]> */
		/* 821D6960h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000774) );
		/* 821D6960h case    3:*/		return 0x821D6964;
		  /* 821D6964h */ case    4:  		/* mr R5, R24 */
		/* 821D6964h case    4:*/		regs.R5 = regs.R24;
		/* 821D6964h case    4:*/		return 0x821D6968;
		  /* 821D6968h */ case    5:  		/* mr R4, R16 */
		/* 821D6968h case    5:*/		regs.R4 = regs.R16;
		/* 821D6968h case    5:*/		return 0x821D696C;
		  /* 821D696Ch */ case    6:  		/* mr R3, R31 */
		/* 821D696Ch case    6:*/		regs.R3 = regs.R31;
		/* 821D696Ch case    6:*/		return 0x821D6970;
		  /* 821D6970h */ case    7:  		/* bl -24856 */
		/* 821D6970h case    7:*/		regs.LR = 0x821D6974; return 0x821D0858;
		/* 821D6970h case    7:*/		return 0x821D6974;
		  /* 821D6974h */ case    8:  		/* or. R28, R3, R3 */
		/* 821D6974h case    8:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 821D6974h case    8:*/		return 0x821D6978;
		  /* 821D6978h */ case    9:  		/* bc 12, CR0_EQ, 864 */
		/* 821D6978h case    9:*/		if ( regs.CR[0].eq ) { return 0x821D6CD8;  }
		/* 821D6978h case    9:*/		return 0x821D697C;
		  /* 821D697Ch */ case   10:  		/* mr R5, R16 */
		/* 821D697Ch case   10:*/		regs.R5 = regs.R16;
		/* 821D697Ch case   10:*/		return 0x821D6980;
		  /* 821D6980h */ case   11:  		/* mr R4, R28 */
		/* 821D6980h case   11:*/		regs.R4 = regs.R28;
		/* 821D6980h case   11:*/		return 0x821D6984;
		  /* 821D6984h */ case   12:  		/* mr R3, R31 */
		/* 821D6984h case   12:*/		regs.R3 = regs.R31;
		/* 821D6984h case   12:*/		return 0x821D6988;
		  /* 821D6988h */ case   13:  		/* bl -36000 */
		/* 821D6988h case   13:*/		regs.LR = 0x821D698C; return 0x821CDCE8;
		/* 821D6988h case   13:*/		return 0x821D698C;
		  /* 821D698Ch */ case   14:  		/* mr R27, R3 */
		/* 821D698Ch case   14:*/		regs.R27 = regs.R3;
		/* 821D698Ch case   14:*/		return 0x821D6990;
		  /* 821D6990h */ case   15:  		/* mr R4, R28 */
		/* 821D6990h case   15:*/		regs.R4 = regs.R28;
		/* 821D6990h case   15:*/		return 0x821D6994;
		  /* 821D6994h */ case   16:  		/* mr R3, R31 */
		/* 821D6994h case   16:*/		regs.R3 = regs.R31;
		/* 821D6994h case   16:*/		return 0x821D6998;
		  /* 821D6998h */ case   17:  		/* bl -46360 */
		/* 821D6998h case   17:*/		regs.LR = 0x821D699C; return 0x821CB480;
		/* 821D6998h case   17:*/		return 0x821D699C;
		  /* 821D699Ch */ case   18:  		/* lwz R11, <#[R3 + 4]> */
		/* 821D699Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821D699Ch case   18:*/		return 0x821D69A0;
		  /* 821D69A0h */ case   19:  		/* li R29, 0 */
		/* 821D69A0h case   19:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821D69A0h case   19:*/		return 0x821D69A4;
		  /* 821D69A4h */ case   20:  		/* lwz R23, <#[R1 + 1908]> */
		/* 821D69A4h case   20:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000774) );
		/* 821D69A4h case   20:*/		return 0x821D69A8;
		  /* 821D69A8h */ case   21:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821D69A8h case   21:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D69A8h case   21:*/		return 0x821D69AC;
		  /* 821D69ACh */ case   22:  		/* stw R3, <#[R1 + 440]> */
		/* 821D69ACh case   22:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000001B8) );
		/* 821D69ACh case   22:*/		return 0x821D69B0;
		  /* 821D69B0h */ case   23:  		/* mr R25, R3 */
		/* 821D69B0h case   23:*/		regs.R25 = regs.R3;
		/* 821D69B0h case   23:*/		return 0x821D69B4;
		  /* 821D69B4h */ case   24:  		/* stw R29, <#[R1 + 448]> */
		/* 821D69B4h case   24:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R1 + 0x000001C0) );
		/* 821D69B4h case   24:*/		return 0x821D69B8;
		  /* 821D69B8h */ case   25:  		/* addic R10, R10, -1 */
		/* 821D69B8h case   25:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821D69B8h case   25:*/		return 0x821D69BC;
		  /* 821D69BCh */ case   26:  		/* mr R26, R29 */
		/* 821D69BCh case   26:*/		regs.R26 = regs.R29;
		/* 821D69BCh case   26:*/		return 0x821D69C0;
		  /* 821D69C0h */ case   27:  		/* subfe R10, R10, R10 */
		/* 821D69C0h case   27:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821D69C0h case   27:*/		return 0x821D69C4;
		  /* 821D69C4h */ case   28:  		/* and R11, R10, R11 */
		/* 821D69C4h case   28:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D69C4h case   28:*/		return 0x821D69C8;
		  /* 821D69C8h */ case   29:  		/* stw R11, <#[R1 + 444]> */
		/* 821D69C8h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000001BC) );
		/* 821D69C8h case   29:*/		return 0x821D69CC;
		  /* 821D69CCh */ case   30:  		/* b 8 */
		/* 821D69CCh case   30:*/		return 0x821D69D4;
		/* 821D69CCh case   30:*/		return 0x821D69D0;
		  /* 821D69D0h */ case   31:  		/* lwz R11, <#[R1 + 444]> */
		/* 821D69D0h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001BC) );
		/* 821D69D0h case   31:*/		return 0x821D69D4;
	}
	return 0x821D69D4;
} // Block from 821D6954h-821D69D4h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821D69D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D69D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D69D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D69D4);
		  /* 821D69D4h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821D69D4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D69D4h case    0:*/		return 0x821D69D8;
		  /* 821D69D8h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821D69D8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D69F0;  }
		/* 821D69D8h case    1:*/		return 0x821D69DC;
		  /* 821D69DCh */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D69DCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D69DCh case    2:*/		return 0x821D69E0;
		  /* 821D69E0h */ case    3:  		/* lwz R10, <#[R1 + 448]> */
		/* 821D69E0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000001C0) );
		/* 821D69E0h case    3:*/		return 0x821D69E4;
		  /* 821D69E4h */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 821D69E4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821D69E4h case    4:*/		return 0x821D69E8;
		  /* 821D69E8h */ case    5:  		/* li R11, 0 */
		/* 821D69E8h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D69E8h case    5:*/		return 0x821D69EC;
		  /* 821D69ECh */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821D69ECh case    6:*/		if ( !regs.CR[6].eq ) { return 0x821D69F4;  }
		/* 821D69ECh case    6:*/		return 0x821D69F0;
	}
	return 0x821D69F0;
} // Block from 821D69D4h-821D69F0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D69F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D69F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D69F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D69F0);
		  /* 821D69F0h */ case    0:  		/* li R11, 1 */
		/* 821D69F0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D69F0h case    0:*/		return 0x821D69F4;
	}
	return 0x821D69F4;
} // Block from 821D69F0h-821D69F4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D69F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D69F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D69F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D69F4);
		  /* 821D69F4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D69F4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D69F4h case    0:*/		return 0x821D69F8;
		  /* 821D69F8h */ case    1:  		/* bc 4, CR0_EQ, 108 */
		/* 821D69F8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821D6A64;  }
		/* 821D69F8h case    1:*/		return 0x821D69FC;
		  /* 821D69FCh */ case    2:  		/* addi R3, R1, 440 */
		/* 821D69FCh case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x1B8);
		/* 821D69FCh case    2:*/		return 0x821D6A00;
		  /* 821D6A00h */ case    3:  		/* bl -88992 */
		/* 821D6A00h case    3:*/		regs.LR = 0x821D6A04; return 0x821C0E60;
		/* 821D6A00h case    3:*/		return 0x821D6A04;
		  /* 821D6A04h */ case    4:  		/* lwz R11, <#[R3 + 4]> */
		/* 821D6A04h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821D6A04h case    4:*/		return 0x821D6A08;
		  /* 821D6A08h */ case    5:  		/* mr R30, R3 */
		/* 821D6A08h case    5:*/		regs.R30 = regs.R3;
		/* 821D6A08h case    5:*/		return 0x821D6A0C;
		  /* 821D6A0Ch */ case    6:  		/* cmplwi CR6, R11, 1 */
		/* 821D6A0Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821D6A0Ch case    6:*/		return 0x821D6A10;
		  /* 821D6A10h */ case    7:  		/* bc 12, CR6_EQ, -64 */
		/* 821D6A10h case    7:*/		if ( regs.CR[6].eq ) { return 0x821D69D0;  }
		/* 821D6A10h case    7:*/		return 0x821D6A14;
		  /* 821D6A14h */ case    8:  		/* lwz R5, <#[R3]> */
		/* 821D6A14h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x00000000) );
		/* 821D6A14h case    8:*/		return 0x821D6A18;
		  /* 821D6A18h */ case    9:  		/* addi R7, R1, 176 */
		/* 821D6A18h case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xB0);
		/* 821D6A18h case    9:*/		return 0x821D6A1C;
		  /* 821D6A1Ch */ case   10:  		/* mr R6, R16 */
		/* 821D6A1Ch case   10:*/		regs.R6 = regs.R16;
		/* 821D6A1Ch case   10:*/		return 0x821D6A20;
		  /* 821D6A20h */ case   11:  		/* mr R4, R28 */
		/* 821D6A20h case   11:*/		regs.R4 = regs.R28;
		/* 821D6A20h case   11:*/		return 0x821D6A24;
		  /* 821D6A24h */ case   12:  		/* mr R3, R23 */
		/* 821D6A24h case   12:*/		regs.R3 = regs.R23;
		/* 821D6A24h case   12:*/		return 0x821D6A28;
		  /* 821D6A28h */ case   13:  		/* bl -34200 */
		/* 821D6A28h case   13:*/		regs.LR = 0x821D6A2C; return 0x821CE490;
		/* 821D6A28h case   13:*/		return 0x821D6A2C;
		  /* 821D6A2Ch */ case   14:  		/* lwz R4, <#[R1 + 176]> */
		/* 821D6A2Ch case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000B0) );
		/* 821D6A2Ch case   14:*/		return 0x821D6A30;
		  /* 821D6A30h */ case   15:  		/* mr R31, R3 */
		/* 821D6A30h case   15:*/		regs.R31 = regs.R3;
		/* 821D6A30h case   15:*/		return 0x821D6A34;
		  /* 821D6A34h */ case   16:  		/* cmplwi CR6, R4, 0 */
		/* 821D6A34h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821D6A34h case   16:*/		return 0x821D6A38;
		  /* 821D6A38h */ case   17:  		/* bc 12, CR6_EQ, 16 */
		/* 821D6A38h case   17:*/		if ( regs.CR[6].eq ) { return 0x821D6A48;  }
		/* 821D6A38h case   17:*/		return 0x821D6A3C;
		  /* 821D6A3Ch */ case   18:  		/* mr R3, R23 */
		/* 821D6A3Ch case   18:*/		regs.R3 = regs.R23;
		/* 821D6A3Ch case   18:*/		return 0x821D6A40;
		  /* 821D6A40h */ case   19:  		/* lwz R5, <#[R23 + 652]> */
		/* 821D6A40h case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R23 + 0x0000028C) );
		/* 821D6A40h case   19:*/		return 0x821D6A44;
		  /* 821D6A44h */ case   20:  		/* bl -37068 */
		/* 821D6A44h case   20:*/		regs.LR = 0x821D6A48; return 0x821CD978;
		/* 821D6A44h case   20:*/		return 0x821D6A48;
	}
	return 0x821D6A48;
} // Block from 821D69F4h-821D6A48h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821D6A48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6A48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6A48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6A48);
		  /* 821D6A48h */ case    0:  		/* cmplwi CR6, R31, 1 */
		/* 821D6A48h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000001);
		/* 821D6A48h case    0:*/		return 0x821D6A4C;
		  /* 821D6A4Ch */ case    1:  		/* bc 4, CR6_GT, -124 */
		/* 821D6A4Ch case    1:*/		if ( !regs.CR[6].gt ) { return 0x821D69D0;  }
		/* 821D6A4Ch case    1:*/		return 0x821D6A50;
		  /* 821D6A50h */ case    2:  		/* cmplw CR6, R31, R29 */
		/* 821D6A50h case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R29);
		/* 821D6A50h case    2:*/		return 0x821D6A54;
		  /* 821D6A54h */ case    3:  		/* bc 4, CR6_GT, -132 */
		/* 821D6A54h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821D69D0;  }
		/* 821D6A54h case    3:*/		return 0x821D6A58;
		  /* 821D6A58h */ case    4:  		/* mr R26, R30 */
		/* 821D6A58h case    4:*/		regs.R26 = regs.R30;
		/* 821D6A58h case    4:*/		return 0x821D6A5C;
		  /* 821D6A5Ch */ case    5:  		/* mr R29, R31 */
		/* 821D6A5Ch case    5:*/		regs.R29 = regs.R31;
		/* 821D6A5Ch case    5:*/		return 0x821D6A60;
		  /* 821D6A60h */ case    6:  		/* b -144 */
		/* 821D6A60h case    6:*/		return 0x821D69D0;
		/* 821D6A60h case    6:*/		return 0x821D6A64;
	}
	return 0x821D6A64;
} // Block from 821D6A48h-821D6A64h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D6A64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6A64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6A64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6A64);
		  /* 821D6A64h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 821D6A64h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821D6A64h case    0:*/		return 0x821D6A68;
		  /* 821D6A68h */ case    1:  		/* bc 4, CR6_EQ, 168 */
		/* 821D6A68h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D6B10;  }
		/* 821D6A68h case    1:*/		return 0x821D6A6C;
		  /* 821D6A6Ch */ case    2:  		/* rlwinm. R11, R27, 0, 24, 31 */
		/* 821D6A6Ch case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R27);
		/* 821D6A6Ch case    2:*/		return 0x821D6A70;
		  /* 821D6A70h */ case    3:  		/* bc 12, CR0_EQ, 580 */
		/* 821D6A70h case    3:*/		if ( regs.CR[0].eq ) { return 0x821D6CB4;  }
		/* 821D6A70h case    3:*/		return 0x821D6A74;
		  /* 821D6A74h */ case    4:  		/* li R31, 0 */
		/* 821D6A74h case    4:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821D6A74h case    4:*/		return 0x821D6A78;
		  /* 821D6A78h */ case    5:  		/* lwz R11, <#[R28 + 4]> */
		/* 821D6A78h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821D6A78h case    5:*/		return 0x821D6A7C;
		  /* 821D6A7Ch */ case    6:  		/* li R10, 0 */
		/* 821D6A7Ch case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D6A7Ch case    6:*/		return 0x821D6A80;
		  /* 821D6A80h */ case    7:  		/* lwz R22, <#[R1 + 112]> */
		/* 821D6A80h case    7:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x00000070) );
		/* 821D6A80h case    7:*/		return 0x821D6A84;
		  /* 821D6A84h */ case    8:  		/* li R29, 0 */
		/* 821D6A84h case    8:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821D6A84h case    8:*/		return 0x821D6A88;
		  /* 821D6A88h */ case    9:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821D6A88h case    9:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821D6A88h case    9:*/		return 0x821D6A8C;
		  /* 821D6A8Ch */ case   10:  		/* stw R10, <#[R1 + 312]> */
		/* 821D6A8Ch case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000138) );
		/* 821D6A8Ch case   10:*/		return 0x821D6A90;
		  /* 821D6A90h */ case   11:  		/* stw R28, <#[R1 + 304]> */
		/* 821D6A90h case   11:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000130) );
		/* 821D6A90h case   11:*/		return 0x821D6A94;
		  /* 821D6A94h */ case   12:  		/* li R30, 0 */
		/* 821D6A94h case   12:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821D6A94h case   12:*/		return 0x821D6A98;
		  /* 821D6A98h */ case   13:  		/* addic R10, R9, -1 */
		/* 821D6A98h case   13:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R9,0xFFFFFFFF);
		/* 821D6A98h case   13:*/		return 0x821D6A9C;
		  /* 821D6A9Ch */ case   14:  		/* subfe R10, R10, R10 */
		/* 821D6A9Ch case   14:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821D6A9Ch case   14:*/		return 0x821D6AA0;
		  /* 821D6AA0h */ case   15:  		/* and R11, R10, R11 */
		/* 821D6AA0h case   15:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D6AA0h case   15:*/		return 0x821D6AA4;
		  /* 821D6AA4h */ case   16:  		/* stw R11, <#[R1 + 308]> */
		/* 821D6AA4h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000134) );
		/* 821D6AA4h case   16:*/		return 0x821D6AA8;
		  /* 821D6AA8h */ case   17:  		/* lwz R11, <#[R1 + 308]> */
		/* 821D6AA8h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000134) );
		/* 821D6AA8h case   17:*/		return 0x821D6AAC;
		  /* 821D6AACh */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 821D6AACh case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D6AACh case   18:*/		return 0x821D6AB0;
		  /* 821D6AB0h */ case   19:  		/* bc 12, CR6_EQ, 24 */
		/* 821D6AB0h case   19:*/		if ( regs.CR[6].eq ) { return 0x821D6AC8;  }
		/* 821D6AB0h case   19:*/		return 0x821D6AB4;
		  /* 821D6AB4h */ case   20:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D6AB4h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D6AB4h case   20:*/		return 0x821D6AB8;
		  /* 821D6AB8h */ case   21:  		/* lwz R10, <#[R1 + 312]> */
		/* 821D6AB8h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000138) );
		/* 821D6AB8h case   21:*/		return 0x821D6ABC;
		  /* 821D6ABCh */ case   22:  		/* cmplw CR6, R10, R11 */
		/* 821D6ABCh case   22:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821D6ABCh case   22:*/		return 0x821D6AC0;
		  /* 821D6AC0h */ case   23:  		/* li R11, 0 */
		/* 821D6AC0h case   23:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D6AC0h case   23:*/		return 0x821D6AC4;
		  /* 821D6AC4h */ case   24:  		/* bc 4, CR6_EQ, 8 */
		/* 821D6AC4h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821D6ACC;  }
		/* 821D6AC4h case   24:*/		return 0x821D6AC8;
	}
	return 0x821D6AC8;
} // Block from 821D6A64h-821D6AC8h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821D6AC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6AC8);
		  /* 821D6AC8h */ case    0:  		/* li R11, 1 */
		/* 821D6AC8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D6AC8h case    0:*/		return 0x821D6ACC;
	}
	return 0x821D6ACC;
} // Block from 821D6AC8h-821D6ACCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D6ACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6ACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6ACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6ACC);
		  /* 821D6ACCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D6ACCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D6ACCh case    0:*/		return 0x821D6AD0;
		  /* 821D6AD0h */ case    1:  		/* bc 4, CR0_EQ, 208 */
		/* 821D6AD0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821D6BA0;  }
		/* 821D6AD0h case    1:*/		return 0x821D6AD4;
		  /* 821D6AD4h */ case    2:  		/* addi R3, R1, 304 */
		/* 821D6AD4h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x130);
		/* 821D6AD4h case    2:*/		return 0x821D6AD8;
		  /* 821D6AD8h */ case    3:  		/* bl -89296 */
		/* 821D6AD8h case    3:*/		regs.LR = 0x821D6ADC; return 0x821C0E08;
		/* 821D6AD8h case    3:*/		return 0x821D6ADC;
		  /* 821D6ADCh */ case    4:  		/* lwz R5, <#[R3]> */
		/* 821D6ADCh case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x00000000) );
		/* 821D6ADCh case    4:*/		return 0x821D6AE0;
		  /* 821D6AE0h */ case    5:  		/* mr R8, R22 */
		/* 821D6AE0h case    5:*/		regs.R8 = regs.R22;
		/* 821D6AE0h case    5:*/		return 0x821D6AE4;
		  /* 821D6AE4h */ case    6:  		/* addi R7, R1, 192 */
		/* 821D6AE4h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xC0);
		/* 821D6AE4h case    6:*/		return 0x821D6AE8;
		  /* 821D6AE8h */ case    7:  		/* mr R6, R31 */
		/* 821D6AE8h case    7:*/		regs.R6 = regs.R31;
		/* 821D6AE8h case    7:*/		return 0x821D6AEC;
		  /* 821D6AECh */ case    8:  		/* mr R4, R16 */
		/* 821D6AECh case    8:*/		regs.R4 = regs.R16;
		/* 821D6AECh case    8:*/		return 0x821D6AF0;
		  /* 821D6AF0h */ case    9:  		/* mr R3, R23 */
		/* 821D6AF0h case    9:*/		regs.R3 = regs.R23;
		/* 821D6AF0h case    9:*/		return 0x821D6AF4;
		  /* 821D6AF4h */ case   10:  		/* bl -36916 */
		/* 821D6AF4h case   10:*/		regs.LR = 0x821D6AF8; return 0x821CDAC0;
		/* 821D6AF4h case   10:*/		return 0x821D6AF8;
		  /* 821D6AF8h */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D6AF8h case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D6AF8h case   11:*/		return 0x821D6AFC;
		  /* 821D6AFCh */ case   12:  		/* bc 12, CR0_EQ, 80 */
		/* 821D6AFCh case   12:*/		if ( regs.CR[0].eq ) { return 0x821D6B4C;  }
		/* 821D6AFCh case   12:*/		return 0x821D6B00;
		  /* 821D6B00h */ case   13:  		/* cmplwi CR6, R30, 0 */
		/* 821D6B00h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D6B00h case   13:*/		return 0x821D6B04;
		  /* 821D6B04h */ case   14:  		/* bc 4, CR6_EQ, 20 */
		/* 821D6B04h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821D6B18;  }
		/* 821D6B04h case   14:*/		return 0x821D6B08;
		  /* 821D6B08h */ case   15:  		/* lwz R30, <#[R1 + 192]> */
		/* 821D6B08h case   15:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000000C0) );
		/* 821D6B08h case   15:*/		return 0x821D6B0C;
		  /* 821D6B0Ch */ case   16:  		/* b -100 */
		/* 821D6B0Ch case   16:*/		return 0x821D6AA8;
		/* 821D6B0Ch case   16:*/		return 0x821D6B10;
	}
	return 0x821D6B10;
} // Block from 821D6ACCh-821D6B10h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821D6B10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6B10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6B10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6B10);
		  /* 821D6B10h */ case    0:  		/* lwz R31, <#[R26]> */
		/* 821D6B10h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R26 + 0x00000000) );
		/* 821D6B10h case    0:*/		return 0x821D6B14;
		  /* 821D6B14h */ case    1:  		/* b -156 */
		/* 821D6B14h case    1:*/		return 0x821D6A78;
		/* 821D6B14h case    1:*/		return 0x821D6B18;
	}
	return 0x821D6B18;
} // Block from 821D6B10h-821D6B18h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D6B18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6B18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6B18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6B18);
		  /* 821D6B18h */ case    0:  		/* mr R6, R30 */
		/* 821D6B18h case    0:*/		regs.R6 = regs.R30;
		/* 821D6B18h case    0:*/		return 0x821D6B1C;
		  /* 821D6B1Ch */ case    1:  		/* lwz R7, <#[R1 + 192]> */
		/* 821D6B1Ch case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000C0) );
		/* 821D6B1Ch case    1:*/		return 0x821D6B20;
		  /* 821D6B20h */ case    2:  		/* mr R5, R16 */
		/* 821D6B20h case    2:*/		regs.R5 = regs.R16;
		/* 821D6B20h case    2:*/		return 0x821D6B24;
		  /* 821D6B24h */ case    3:  		/* li R4, 0 */
		/* 821D6B24h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D6B24h case    3:*/		return 0x821D6B28;
		  /* 821D6B28h */ case    4:  		/* mr R3, R23 */
		/* 821D6B28h case    4:*/		regs.R3 = regs.R23;
		/* 821D6B28h case    4:*/		return 0x821D6B2C;
		  /* 821D6B2Ch */ case    5:  		/* bl -232772 */
		/* 821D6B2Ch case    5:*/		regs.LR = 0x821D6B30; return 0x8219DDE8;
		/* 821D6B2Ch case    5:*/		return 0x821D6B30;
		  /* 821D6B30h */ case    6:  		/* mr R21, R3 */
		/* 821D6B30h case    6:*/		regs.R21 = regs.R3;
		/* 821D6B30h case    6:*/		return 0x821D6B34;
		  /* 821D6B34h */ case    7:  		/* mr R4, R3 */
		/* 821D6B34h case    7:*/		regs.R4 = regs.R3;
		/* 821D6B34h case    7:*/		return 0x821D6B38;
		  /* 821D6B38h */ case    8:  		/* li R5, 0 */
		/* 821D6B38h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D6B38h case    8:*/		return 0x821D6B3C;
		  /* 821D6B3Ch */ case    9:  		/* mr R3, R23 */
		/* 821D6B3Ch case    9:*/		regs.R3 = regs.R23;
		/* 821D6B3Ch case    9:*/		return 0x821D6B40;
		  /* 821D6B40h */ case   10:  		/* bl -387632 */
		/* 821D6B40h case   10:*/		regs.LR = 0x821D6B44; return 0x82178110;
		/* 821D6B40h case   10:*/		return 0x821D6B44;
		  /* 821D6B44h */ case   11:  		/* mr R30, R3 */
		/* 821D6B44h case   11:*/		regs.R30 = regs.R3;
		/* 821D6B44h case   11:*/		return 0x821D6B48;
		  /* 821D6B48h */ case   12:  		/* b 68 */
		/* 821D6B48h case   12:*/		return 0x821D6B8C;
		/* 821D6B48h case   12:*/		return 0x821D6B4C;
	}
	return 0x821D6B4C;
} // Block from 821D6B18h-821D6B4Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821D6B4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6B4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6B4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6B4C);
		  /* 821D6B4Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821D6B4Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821D6B4Ch case    0:*/		return 0x821D6B50;
		  /* 821D6B50h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 821D6B50h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D6B5C;  }
		/* 821D6B50h case    1:*/		return 0x821D6B54;
		  /* 821D6B54h */ case    2:  		/* lwz R29, <#[R1 + 192]> */
		/* 821D6B54h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000000C0) );
		/* 821D6B54h case    2:*/		return 0x821D6B58;
		  /* 821D6B58h */ case    3:  		/* b -176 */
		/* 821D6B58h case    3:*/		return 0x821D6AA8;
		/* 821D6B58h case    3:*/		return 0x821D6B5C;
	}
	return 0x821D6B5C;
} // Block from 821D6B4Ch-821D6B5Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D6B5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6B5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6B5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6B5C);
		  /* 821D6B5Ch */ case    0:  		/* mr R6, R29 */
		/* 821D6B5Ch case    0:*/		regs.R6 = regs.R29;
		/* 821D6B5Ch case    0:*/		return 0x821D6B60;
		  /* 821D6B60h */ case    1:  		/* lwz R7, <#[R1 + 192]> */
		/* 821D6B60h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000000C0) );
		/* 821D6B60h case    1:*/		return 0x821D6B64;
		  /* 821D6B64h */ case    2:  		/* mr R5, R16 */
		/* 821D6B64h case    2:*/		regs.R5 = regs.R16;
		/* 821D6B64h case    2:*/		return 0x821D6B68;
		  /* 821D6B68h */ case    3:  		/* li R4, 0 */
		/* 821D6B68h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D6B68h case    3:*/		return 0x821D6B6C;
		  /* 821D6B6Ch */ case    4:  		/* mr R3, R23 */
		/* 821D6B6Ch case    4:*/		regs.R3 = regs.R23;
		/* 821D6B6Ch case    4:*/		return 0x821D6B70;
		  /* 821D6B70h */ case    5:  		/* bl -232840 */
		/* 821D6B70h case    5:*/		regs.LR = 0x821D6B74; return 0x8219DDE8;
		/* 821D6B70h case    5:*/		return 0x821D6B74;
		  /* 821D6B74h */ case    6:  		/* mr R21, R3 */
		/* 821D6B74h case    6:*/		regs.R21 = regs.R3;
		/* 821D6B74h case    6:*/		return 0x821D6B78;
		  /* 821D6B78h */ case    7:  		/* mr R4, R3 */
		/* 821D6B78h case    7:*/		regs.R4 = regs.R3;
		/* 821D6B78h case    7:*/		return 0x821D6B7C;
		  /* 821D6B7Ch */ case    8:  		/* li R5, 0 */
		/* 821D6B7Ch case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D6B7Ch case    8:*/		return 0x821D6B80;
		  /* 821D6B80h */ case    9:  		/* mr R3, R23 */
		/* 821D6B80h case    9:*/		regs.R3 = regs.R23;
		/* 821D6B80h case    9:*/		return 0x821D6B84;
		  /* 821D6B84h */ case   10:  		/* bl -387700 */
		/* 821D6B84h case   10:*/		regs.LR = 0x821D6B88; return 0x82178110;
		/* 821D6B84h case   10:*/		return 0x821D6B88;
		  /* 821D6B88h */ case   11:  		/* mr R29, R3 */
		/* 821D6B88h case   11:*/		regs.R29 = regs.R3;
		/* 821D6B88h case   11:*/		return 0x821D6B8C;
	}
	return 0x821D6B8C;
} // Block from 821D6B5Ch-821D6B8Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821D6B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6B8C);
		  /* 821D6B8Ch */ case    0:  		/* mr R5, R22 */
		/* 821D6B8Ch case    0:*/		regs.R5 = regs.R22;
		/* 821D6B8Ch case    0:*/		return 0x821D6B90;
		  /* 821D6B90h */ case    1:  		/* mr R4, R21 */
		/* 821D6B90h case    1:*/		regs.R4 = regs.R21;
		/* 821D6B90h case    1:*/		return 0x821D6B94;
		  /* 821D6B94h */ case    2:  		/* mr R3, R23 */
		/* 821D6B94h case    2:*/		regs.R3 = regs.R23;
		/* 821D6B94h case    2:*/		return 0x821D6B98;
		  /* 821D6B98h */ case    3:  		/* bl -45520 */
		/* 821D6B98h case    3:*/		regs.LR = 0x821D6B9C; return 0x821CB9C8;
		/* 821D6B98h case    3:*/		return 0x821D6B9C;
		  /* 821D6B9Ch */ case    4:  		/* b -244 */
		/* 821D6B9Ch case    4:*/		return 0x821D6AA8;
		/* 821D6B9Ch case    4:*/		return 0x821D6BA0;
	}
	return 0x821D6BA0;
} // Block from 821D6B8Ch-821D6BA0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D6BA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6BA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6BA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6BA0);
		  /* 821D6BA0h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821D6BA0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D6BA0h case    0:*/		return 0x821D6BA4;
		  /* 821D6BA4h */ case    1:  		/* mr R3, R23 */
		/* 821D6BA4h case    1:*/		regs.R3 = regs.R23;
		/* 821D6BA4h case    1:*/		return 0x821D6BA8;
		  /* 821D6BA8h */ case    2:  		/* bc 4, CR6_EQ, 44 */
		/* 821D6BA8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D6BD4;  }
		/* 821D6BA8h case    2:*/		return 0x821D6BAC;
		  /* 821D6BACh */ case    3:  		/* rlwinm. R11, R27, 0, 24, 31 */
		/* 821D6BACh case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R27);
		/* 821D6BACh case    3:*/		return 0x821D6BB0;
		  /* 821D6BB0h */ case    4:  		/* bc 12, CR0_EQ, 444 */
		/* 821D6BB0h case    4:*/		if ( regs.CR[0].eq ) { return 0x821D6D6C;  }
		/* 821D6BB0h case    4:*/		return 0x821D6BB4;
		  /* 821D6BB4h */ case    5:  		/* li R4, 1 */
		/* 821D6BB4h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D6BB4h case    5:*/		return 0x821D6BB8;
		  /* 821D6BB8h */ case    6:  		/* fmr FR4, FR29 */
		/* 821D6BB8h case    6:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR29);
		/* 821D6BB8h case    6:*/		return 0x821D6BBC;
		  /* 821D6BBCh */ case    7:  		/* fmr FR3, FR29 */
		/* 821D6BBCh case    7:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR29);
		/* 821D6BBCh case    7:*/		return 0x821D6BC0;
		  /* 821D6BC0h */ case    8:  		/* fmr FR2, FR29 */
		/* 821D6BC0h case    8:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR29);
		/* 821D6BC0h case    8:*/		return 0x821D6BC4;
		  /* 821D6BC4h */ case    9:  		/* fmr FR1, FR29 */
		/* 821D6BC4h case    9:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821D6BC4h case    9:*/		return 0x821D6BC8;
		  /* 821D6BC8h */ case   10:  		/* bl 343952 */
		/* 821D6BC8h case   10:*/		regs.LR = 0x821D6BCC; return 0x8222AB58;
		/* 821D6BC8h case   10:*/		return 0x821D6BCC;
		  /* 821D6BCCh */ case   11:  		/* mr R31, R3 */
		/* 821D6BCCh case   11:*/		regs.R31 = regs.R3;
		/* 821D6BCCh case   11:*/		return 0x821D6BD0;
		  /* 821D6BD0h */ case   12:  		/* b 180 */
		/* 821D6BD0h case   12:*/		return 0x821D6C84;
		/* 821D6BD0h case   12:*/		return 0x821D6BD4;
	}
	return 0x821D6BD4;
} // Block from 821D6BA0h-821D6BD4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821D6BD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6BD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6BD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6BD4);
		  /* 821D6BD4h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821D6BD4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D6BD4h case    0:*/		return 0x821D6BD8;
		  /* 821D6BD8h */ case    1:  		/* bc 12, CR6_EQ, 124 */
		/* 821D6BD8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D6C54;  }
		/* 821D6BD8h case    1:*/		return 0x821D6BDC;
		  /* 821D6BDCh */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D6BDCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D6BDCh case    2:*/		return 0x821D6BE0;
		  /* 821D6BE0h */ case    3:  		/* lwz R5, <#[R31 + 4]> */
		/* 821D6BE0h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000004) );
		/* 821D6BE0h case    3:*/		return 0x821D6BE4;
		  /* 821D6BE4h */ case    4:  		/* rlwinm R6, R11, 0, 30, 28 */
		/* 821D6BE4h case    4:*/		cpu::op::rlwinm<0,0,30,28>(regs,&regs.R6,regs.R11);
		/* 821D6BE4h case    4:*/		return 0x821D6BE8;
		  /* 821D6BE8h */ case    5:  		/* lwz R4, <#[R31]> */
		/* 821D6BE8h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 821D6BE8h case    5:*/		return 0x821D6BEC;
		  /* 821D6BECh */ case    6:  		/* bl -387716 */
		/* 821D6BECh case    6:*/		regs.LR = 0x821D6BF0; return 0x82178168;
		/* 821D6BECh case    6:*/		return 0x821D6BF0;
		  /* 821D6BF0h */ case    7:  		/* mr R7, R3 */
		/* 821D6BF0h case    7:*/		regs.R7 = regs.R3;
		/* 821D6BF0h case    7:*/		return 0x821D6BF4;
		  /* 821D6BF4h */ case    8:  		/* mr R6, R30 */
		/* 821D6BF4h case    8:*/		regs.R6 = regs.R30;
		/* 821D6BF4h case    8:*/		return 0x821D6BF8;
		  /* 821D6BF8h */ case    9:  		/* mr R5, R16 */
		/* 821D6BF8h case    9:*/		regs.R5 = regs.R16;
		/* 821D6BF8h case    9:*/		return 0x821D6BFC;
		  /* 821D6BFCh */ case   10:  		/* li R4, 0 */
		/* 821D6BFCh case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D6BFCh case   10:*/		return 0x821D6C00;
		  /* 821D6C00h */ case   11:  		/* mr R3, R23 */
		/* 821D6C00h case   11:*/		regs.R3 = regs.R23;
		/* 821D6C00h case   11:*/		return 0x821D6C04;
		  /* 821D6C04h */ case   12:  		/* bl -88820 */
		/* 821D6C04h case   12:*/		regs.LR = 0x821D6C08; return 0x821C1110;
		/* 821D6C04h case   12:*/		return 0x821D6C08;
		  /* 821D6C08h */ case   13:  		/* mr R31, R3 */
		/* 821D6C08h case   13:*/		regs.R31 = regs.R3;
		/* 821D6C08h case   13:*/		return 0x821D6C0C;
		  /* 821D6C0Ch */ case   14:  		/* mr R4, R3 */
		/* 821D6C0Ch case   14:*/		regs.R4 = regs.R3;
		/* 821D6C0Ch case   14:*/		return 0x821D6C10;
		  /* 821D6C10h */ case   15:  		/* mr R5, R22 */
		/* 821D6C10h case   15:*/		regs.R5 = regs.R22;
		/* 821D6C10h case   15:*/		return 0x821D6C14;
		  /* 821D6C14h */ case   16:  		/* mr R3, R23 */
		/* 821D6C14h case   16:*/		regs.R3 = regs.R23;
		/* 821D6C14h case   16:*/		return 0x821D6C18;
		  /* 821D6C18h */ case   17:  		/* bl -45648 */
		/* 821D6C18h case   17:*/		regs.LR = 0x821D6C1C; return 0x821CB9C8;
		/* 821D6C18h case   17:*/		return 0x821D6C1C;
		  /* 821D6C1Ch */ case   18:  		/* cmplwi CR6, R29, 0 */
		/* 821D6C1Ch case   18:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821D6C1Ch case   18:*/		return 0x821D6C20;
		  /* 821D6C20h */ case   19:  		/* bc 12, CR6_EQ, 100 */
		/* 821D6C20h case   19:*/		if ( regs.CR[6].eq ) { return 0x821D6C84;  }
		/* 821D6C20h case   19:*/		return 0x821D6C24;
		  /* 821D6C24h */ case   20:  		/* li R5, 0 */
		/* 821D6C24h case   20:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D6C24h case   20:*/		return 0x821D6C28;
		  /* 821D6C28h */ case   21:  		/* mr R4, R31 */
		/* 821D6C28h case   21:*/		regs.R4 = regs.R31;
		/* 821D6C28h case   21:*/		return 0x821D6C2C;
		  /* 821D6C2Ch */ case   22:  		/* mr R3, R23 */
		/* 821D6C2Ch case   22:*/		regs.R3 = regs.R23;
		/* 821D6C2Ch case   22:*/		return 0x821D6C30;
		  /* 821D6C30h */ case   23:  		/* bl -387872 */
		/* 821D6C30h case   23:*/		regs.LR = 0x821D6C34; return 0x82178110;
		/* 821D6C30h case   23:*/		return 0x821D6C34;
		  /* 821D6C34h */ case   24:  		/* mr R7, R3 */
		/* 821D6C34h case   24:*/		regs.R7 = regs.R3;
		/* 821D6C34h case   24:*/		return 0x821D6C38;
		  /* 821D6C38h */ case   25:  		/* mr R6, R29 */
		/* 821D6C38h case   25:*/		regs.R6 = regs.R29;
		/* 821D6C38h case   25:*/		return 0x821D6C3C;
		  /* 821D6C3Ch */ case   26:  		/* mr R5, R16 */
		/* 821D6C3Ch case   26:*/		regs.R5 = regs.R16;
		/* 821D6C3Ch case   26:*/		return 0x821D6C40;
		  /* 821D6C40h */ case   27:  		/* li R4, 0 */
		/* 821D6C40h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D6C40h case   27:*/		return 0x821D6C44;
		  /* 821D6C44h */ case   28:  		/* mr R3, R23 */
		/* 821D6C44h case   28:*/		regs.R3 = regs.R23;
		/* 821D6C44h case   28:*/		return 0x821D6C48;
		  /* 821D6C48h */ case   29:  		/* bl -233056 */
		/* 821D6C48h case   29:*/		regs.LR = 0x821D6C4C; return 0x8219DDE8;
		/* 821D6C48h case   29:*/		return 0x821D6C4C;
		  /* 821D6C4Ch */ case   30:  		/* mr R31, R3 */
		/* 821D6C4Ch case   30:*/		regs.R31 = regs.R3;
		/* 821D6C4Ch case   30:*/		return 0x821D6C50;
		  /* 821D6C50h */ case   31:  		/* b 36 */
		/* 821D6C50h case   31:*/		return 0x821D6C74;
		/* 821D6C50h case   31:*/		return 0x821D6C54;
	}
	return 0x821D6C54;
} // Block from 821D6BD4h-821D6C54h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821D6C54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6C54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6C54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6C54);
		  /* 821D6C54h */ case    0:  		/* li R6, 1 */
		/* 821D6C54h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821D6C54h case    0:*/		return 0x821D6C58;
		  /* 821D6C58h */ case    1:  		/* mr R5, R16 */
		/* 821D6C58h case    1:*/		regs.R5 = regs.R16;
		/* 821D6C58h case    1:*/		return 0x821D6C5C;
		  /* 821D6C5Ch */ case    2:  		/* li R4, 0 */
		/* 821D6C5Ch case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D6C5Ch case    2:*/		return 0x821D6C60;
		  /* 821D6C60h */ case    3:  		/* bl -233152 */
		/* 821D6C60h case    3:*/		regs.LR = 0x821D6C64; return 0x8219DDA0;
		/* 821D6C60h case    3:*/		return 0x821D6C64;
		  /* 821D6C64h */ case    4:  		/* mr R5, R30 */
		/* 821D6C64h case    4:*/		regs.R5 = regs.R30;
		/* 821D6C64h case    4:*/		return 0x821D6C68;
		  /* 821D6C68h */ case    5:  		/* li R4, 0 */
		/* 821D6C68h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D6C68h case    5:*/		return 0x821D6C6C;
		  /* 821D6C6Ch */ case    6:  		/* mr R31, R3 */
		/* 821D6C6Ch case    6:*/		regs.R31 = regs.R3;
		/* 821D6C6Ch case    6:*/		return 0x821D6C70;
		  /* 821D6C70h */ case    7:  		/* bl -419264 */
		/* 821D6C70h case    7:*/		regs.LR = 0x821D6C74; return 0x821706B0;
		/* 821D6C70h case    7:*/		return 0x821D6C74;
	}
	return 0x821D6C74;
} // Block from 821D6C54h-821D6C74h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821D6C74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6C74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6C74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6C74);
		  /* 821D6C74h */ case    0:  		/* mr R5, R22 */
		/* 821D6C74h case    0:*/		regs.R5 = regs.R22;
		/* 821D6C74h case    0:*/		return 0x821D6C78;
		  /* 821D6C78h */ case    1:  		/* mr R4, R31 */
		/* 821D6C78h case    1:*/		regs.R4 = regs.R31;
		/* 821D6C78h case    1:*/		return 0x821D6C7C;
		  /* 821D6C7Ch */ case    2:  		/* mr R3, R23 */
		/* 821D6C7Ch case    2:*/		regs.R3 = regs.R23;
		/* 821D6C7Ch case    2:*/		return 0x821D6C80;
		  /* 821D6C80h */ case    3:  		/* bl -45752 */
		/* 821D6C80h case    3:*/		regs.LR = 0x821D6C84; return 0x821CB9C8;
		/* 821D6C80h case    3:*/		return 0x821D6C84;
	}
	return 0x821D6C84;
} // Block from 821D6C74h-821D6C84h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D6C84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6C84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6C84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6C84);
		  /* 821D6C84h */ case    0:  		/* mr R9, R22 */
		/* 821D6C84h case    0:*/		regs.R9 = regs.R22;
		/* 821D6C84h case    0:*/		return 0x821D6C88;
		  /* 821D6C88h */ case    1:  		/* lwz R10, <#[R1 + 1924]> */
		/* 821D6C88h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000784) );
		/* 821D6C88h case    1:*/		return 0x821D6C8C;
		  /* 821D6C8Ch */ case    2:  		/* li R8, 0 */
		/* 821D6C8Ch case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D6C8Ch case    2:*/		return 0x821D6C90;
		  /* 821D6C90h */ case    3:  		/* li R7, 0 */
		/* 821D6C90h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821D6C90h case    3:*/		return 0x821D6C94;
		  /* 821D6C94h */ case    4:  		/* mr R6, R31 */
		/* 821D6C94h case    4:*/		regs.R6 = regs.R31;
		/* 821D6C94h case    4:*/		return 0x821D6C98;
		  /* 821D6C98h */ case    5:  		/* mr R5, R24 */
		/* 821D6C98h case    5:*/		regs.R5 = regs.R24;
		/* 821D6C98h case    5:*/		return 0x821D6C9C;
		  /* 821D6C9Ch */ case    6:  		/* mr R4, R16 */
		/* 821D6C9Ch case    6:*/		regs.R4 = regs.R16;
		/* 821D6C9Ch case    6:*/		return 0x821D6CA0;
		  /* 821D6CA0h */ case    7:  		/* mr R3, R23 */
		/* 821D6CA0h case    7:*/		regs.R3 = regs.R23;
		/* 821D6CA0h case    7:*/		return 0x821D6CA4;
		  /* 821D6CA4h */ case    8:  		/* bl -32756 */
		/* 821D6CA4h case    8:*/		regs.LR = 0x821D6CA8; return 0x821CECB0;
		/* 821D6CA4h case    8:*/		return 0x821D6CA8;
		  /* 821D6CA8h */ case    9:  		/* cmplwi CR6, R26, 0 */
		/* 821D6CA8h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821D6CA8h case    9:*/		return 0x821D6CAC;
		  /* 821D6CACh */ case   10:  		/* mr R5, R22 */
		/* 821D6CACh case   10:*/		regs.R5 = regs.R22;
		/* 821D6CACh case   10:*/		return 0x821D6CB0;
		  /* 821D6CB0h */ case   11:  		/* bc 4, CR6_EQ, 8 */
		/* 821D6CB0h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821D6CB8;  }
		/* 821D6CB0h case   11:*/		return 0x821D6CB4;
	}
	return 0x821D6CB4;
} // Block from 821D6C84h-821D6CB4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821D6CB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6CB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6CB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6CB4);
		  /* 821D6CB4h */ case    0:  		/* li R5, 0 */
		/* 821D6CB4h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D6CB4h case    0:*/		return 0x821D6CB8;
	}
	return 0x821D6CB8;
} // Block from 821D6CB4h-821D6CB8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D6CB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6CB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6CB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6CB8);
		  /* 821D6CB8h */ case    0:  		/* mr R4, R28 */
		/* 821D6CB8h case    0:*/		regs.R4 = regs.R28;
		/* 821D6CB8h case    0:*/		return 0x821D6CBC;
		  /* 821D6CBCh */ case    1:  		/* mr R3, R23 */
		/* 821D6CBCh case    1:*/		regs.R3 = regs.R23;
		/* 821D6CBCh case    1:*/		return 0x821D6CC0;
		  /* 821D6CC0h */ case    2:  		/* bl -37704 */
		/* 821D6CC0h case    2:*/		regs.LR = 0x821D6CC4; return 0x821CD978;
		/* 821D6CC0h case    2:*/		return 0x821D6CC4;
		  /* 821D6CC4h */ case    3:  		/* mr R4, R25 */
		/* 821D6CC4h case    3:*/		regs.R4 = regs.R25;
		/* 821D6CC4h case    3:*/		return 0x821D6CC8;
		  /* 821D6CC8h */ case    4:  		/* mr R3, R23 */
		/* 821D6CC8h case    4:*/		regs.R3 = regs.R23;
		/* 821D6CC8h case    4:*/		return 0x821D6CCC;
		  /* 821D6CCCh */ case    5:  		/* bl -54612 */
		/* 821D6CCCh case    5:*/		regs.LR = 0x821D6CD0; return 0x821C9778;
		/* 821D6CCCh case    5:*/		return 0x821D6CD0;
		  /* 821D6CD0h */ case    6:  		/* lwz R31, <#[R1 + 1908]> */
		/* 821D6CD0h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000774) );
		/* 821D6CD0h case    6:*/		return 0x821D6CD4;
		  /* 821D6CD4h */ case    7:  		/* lwz R18, <#[R1 + 160]> */
		/* 821D6CD4h case    7:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x000000A0) );
		/* 821D6CD4h case    7:*/		return 0x821D6CD8;
	}
	return 0x821D6CD8;
} // Block from 821D6CB8h-821D6CD8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821D6CD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6CD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6CD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6CD8);
		  /* 821D6CD8h */ case    0:  		/* addi R24, R24, 1 */
		/* 821D6CD8h case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821D6CD8h case    0:*/		return 0x821D6CDC;
		  /* 821D6CDCh */ case    1:  		/* cmplw CR6, R24, R18 */
		/* 821D6CDCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R18);
		/* 821D6CDCh case    1:*/		return 0x821D6CE0;
		  /* 821D6CE0h */ case    2:  		/* bc 12, CR6_LT, -892 */
		/* 821D6CE0h case    2:*/		if ( regs.CR[6].lt ) { return 0x821D6964;  }
		/* 821D6CE0h case    2:*/		return 0x821D6CE4;
	}
	return 0x821D6CE4;
} // Block from 821D6CD8h-821D6CE4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D6CE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6CE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6CE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6CE4);
		  /* 821D6CE4h */ case    0:  		/* mr R3, R16 */
		/* 821D6CE4h case    0:*/		regs.R3 = regs.R16;
		/* 821D6CE4h case    0:*/		return 0x821D6CE8;
		  /* 821D6CE8h */ case    1:  		/* bl -467816 */
		/* 821D6CE8h case    1:*/		regs.LR = 0x821D6CEC; return 0x82164980;
		/* 821D6CE8h case    1:*/		return 0x821D6CEC;
		  /* 821D6CECh */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D6CECh case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D6CECh case    2:*/		return 0x821D6CF0;
		  /* 821D6CF0h */ case    3:  		/* bc 4, CR0_EQ, -12668 */
		/* 821D6CF0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D3B74;  }
		/* 821D6CF0h case    3:*/		return 0x821D6CF4;
		  /* 821D6CF4h */ case    4:  		/* li R28, 0 */
		/* 821D6CF4h case    4:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821D6CF4h case    4:*/		return 0x821D6CF8;
		  /* 821D6CF8h */ case    5:  		/* addi R27, R16, 44 */
		/* 821D6CF8h case    5:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R16,0x2C);
		/* 821D6CF8h case    5:*/		return 0x821D6CFC;
		  /* 821D6CFCh */ case    6:  		/* lwz R29, <#[R16 + 8]> */
		/* 821D6CFCh case    6:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R16 + 0x00000008) );
		/* 821D6CFCh case    6:*/		return 0x821D6D00;
		  /* 821D6D00h */ case    7:  		/* rlwinm R11, R29, 13, 29, 31 */
		/* 821D6D00h case    7:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R29);
		/* 821D6D00h case    7:*/		return 0x821D6D04;
		  /* 821D6D04h */ case    8:  		/* cmplw CR6, R28, R11 */
		/* 821D6D04h case    8:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 821D6D04h case    8:*/		return 0x821D6D08;
		  /* 821D6D08h */ case    9:  		/* bc 4, CR6_LT, -18424 */
		/* 821D6D08h case    9:*/		if ( !regs.CR[6].lt ) { return 0x821D2510;  }
		/* 821D6D08h case    9:*/		return 0x821D6D0C;
		  /* 821D6D0Ch */ case   10:  		/* lwz R30, <#[R27]> */
		/* 821D6D0Ch case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R27 + 0x00000000) );
		/* 821D6D0Ch case   10:*/		return 0x821D6D10;
		  /* 821D6D10h */ case   11:  		/* lwz R11, <#[R30]> */
		/* 821D6D10h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821D6D10h case   11:*/		return 0x821D6D14;
		  /* 821D6D14h */ case   12:  		/* rlwinm. R10, R11, 0, 4, 6 */
		/* 821D6D14h case   12:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R11);
		/* 821D6D14h case   12:*/		return 0x821D6D18;
		  /* 821D6D18h */ case   13:  		/* bc 12, CR0_EQ, 72 */
		/* 821D6D18h case   13:*/		if ( regs.CR[0].eq ) { return 0x821D6D60;  }
		/* 821D6D18h case   13:*/		return 0x821D6D1C;
		  /* 821D6D1Ch */ case   14:  		/* rlwinm. R31, R11, 0, 27, 30 */
		/* 821D6D1Ch case   14:*/		cpu::op::rlwinm<1,0,27,30>(regs,&regs.R31,regs.R11);
		/* 821D6D1Ch case   14:*/		return 0x821D6D20;
		  /* 821D6D20h */ case   15:  		/* bc 12, CR0_EQ, 64 */
		/* 821D6D20h case   15:*/		if ( regs.CR[0].eq ) { return 0x821D6D60;  }
		/* 821D6D20h case   15:*/		return 0x821D6D24;
		  /* 821D6D24h */ case   16:  		/* mr R4, R31 */
		/* 821D6D24h case   16:*/		regs.R4 = regs.R31;
		/* 821D6D24h case   16:*/		return 0x821D6D28;
		  /* 821D6D28h */ case   17:  		/* mr R3, R16 */
		/* 821D6D28h case   17:*/		regs.R3 = regs.R16;
		/* 821D6D28h case   17:*/		return 0x821D6D2C;
		  /* 821D6D2Ch */ case   18:  		/* bl -264860 */
		/* 821D6D2Ch case   18:*/		regs.LR = 0x821D6D30; return 0x82196290;
		/* 821D6D2Ch case   18:*/		return 0x821D6D30;
		  /* 821D6D30h */ case   19:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D6D30h case   19:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D6D30h case   19:*/		return 0x821D6D34;
		  /* 821D6D34h */ case   20:  		/* bc 12, CR0_EQ, 24 */
		/* 821D6D34h case   20:*/		if ( regs.CR[0].eq ) { return 0x821D6D4C;  }
		/* 821D6D34h case   20:*/		return 0x821D6D38;
		  /* 821D6D38h */ case   21:  		/* rlwinm R11, R29, 0, 18, 24 */
		/* 821D6D38h case   21:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R29);
		/* 821D6D38h case   21:*/		return 0x821D6D3C;
		  /* 821D6D3Ch */ case   22:  		/* cmplwi CR6, R11, 384 */
		/* 821D6D3Ch case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000180);
		/* 821D6D3Ch case   22:*/		return 0x821D6D40;
		  /* 821D6D40h */ case   23:  		/* bc 4, CR6_EQ, 32 */
		/* 821D6D40h case   23:*/		if ( !regs.CR[6].eq ) { return 0x821D6D60;  }
		/* 821D6D40h case   23:*/		return 0x821D6D44;
		  /* 821D6D44h */ case   24:  		/* rlwinm. R11, R29, 27, 31, 31 */
		/* 821D6D44h case   24:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R11,regs.R29);
		/* 821D6D44h case   24:*/		return 0x821D6D48;
		  /* 821D6D48h */ case   25:  		/* bc 12, CR0_EQ, 24 */
		/* 821D6D48h case   25:*/		if ( regs.CR[0].eq ) { return 0x821D6D60;  }
		/* 821D6D48h case   25:*/		return 0x821D6D4C;
	}
	return 0x821D6D4C;
} // Block from 821D6CE4h-821D6D4Ch (26 instructions)

//////////////////////////////////////////////////////
// Block at 821D6D4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6D4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6D4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6D4C);
		  /* 821D6D4Ch */ case    0:  		/* mr R5, R31 */
		/* 821D6D4Ch case    0:*/		regs.R5 = regs.R31;
		/* 821D6D4Ch case    0:*/		return 0x821D6D50;
		  /* 821D6D50h */ case    1:  		/* lwz R6, <#[R1 + 112]> */
		/* 821D6D50h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000070) );
		/* 821D6D50h case    1:*/		return 0x821D6D54;
		  /* 821D6D54h */ case    2:  		/* lwz R4, <#[R30 + 12]> */
		/* 821D6D54h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 821D6D54h case    2:*/		return 0x821D6D58;
		  /* 821D6D58h */ case    3:  		/* lwz R3, <#[R1 + 1908]> */
		/* 821D6D58h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000774) );
		/* 821D6D58h case    3:*/		return 0x821D6D5C;
		  /* 821D6D5Ch */ case    4:  		/* bl -33964 */
		/* 821D6D5Ch case    4:*/		regs.LR = 0x821D6D60; return 0x821CE8B0;
		/* 821D6D5Ch case    4:*/		return 0x821D6D60;
	}
	return 0x821D6D60;
} // Block from 821D6D4Ch-821D6D60h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D6D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6D60);
		  /* 821D6D60h */ case    0:  		/* addi R28, R28, 1 */
		/* 821D6D60h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821D6D60h case    0:*/		return 0x821D6D64;
		  /* 821D6D64h */ case    1:  		/* addi R27, R27, 4 */
		/* 821D6D64h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 821D6D64h case    1:*/		return 0x821D6D68;
		  /* 821D6D68h */ case    2:  		/* b -108 */
		/* 821D6D68h case    2:*/		return 0x821D6CFC;
		/* 821D6D68h case    2:*/		return 0x821D6D6C;
	}
	return 0x821D6D6C;
} // Block from 821D6D60h-821D6D6Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D6D6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6D6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6D6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6D6C);
		  /* 821D6D6Ch */ case    0:  		/* li R4, 4800 */
		/* 821D6D6Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821D6D6Ch case    0:*/		return 0x821D6D70;
		  /* 821D6D70h */ case    1:  		/* bl -544520 */
		/* 821D6D70h case    1:*/		regs.LR = 0x821D6D74; return 0x82151E68;
		/* 821D6D70h case    1:*/		return 0x821D6D74;
	}
	return 0x821D6D74;
} // Block from 821D6D6Ch-821D6D74h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D6D74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6D74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6D74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6D74);
		  /* 821D6D74h */ case    0:  		/* lwz R10, <#[R16 + 8]> */
		/* 821D6D74h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x00000008) );
		/* 821D6D74h case    0:*/		return 0x821D6D78;
		  /* 821D6D78h */ case    1:  		/* rlwinm R11, R10, 25, 25, 31 */
		/* 821D6D78h case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R10);
		/* 821D6D78h case    1:*/		return 0x821D6D7C;
		  /* 821D6D7Ch */ case    2:  		/* cmpwi CR6, R11, 96 */
		/* 821D6D7Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000060);
		/* 821D6D7Ch case    2:*/		return 0x821D6D80;
		  /* 821D6D80h */ case    3:  		/* bc 12, CR6_GT, 3632 */
		/* 821D6D80h case    3:*/		if ( regs.CR[6].gt ) { return 0x821D7BB0;  }
		/* 821D6D80h case    3:*/		return 0x821D6D84;
		  /* 821D6D84h */ case    4:  		/* bc 12, CR6_EQ, 3452 */
		/* 821D6D84h case    4:*/		if ( regs.CR[6].eq ) { return 0x821D7B00;  }
		/* 821D6D84h case    4:*/		return 0x821D6D88;
		  /* 821D6D88h */ case    5:  		/* cmpwi CR6, R11, 61 */
		/* 821D6D88h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003D);
		/* 821D6D88h case    5:*/		return 0x821D6D8C;
		  /* 821D6D8Ch */ case    6:  		/* bc 12, CR6_GT, 2532 */
		/* 821D6D8Ch case    6:*/		if ( regs.CR[6].gt ) { return 0x821D7770;  }
		/* 821D6D8Ch case    6:*/		return 0x821D6D90;
		  /* 821D6D90h */ case    7:  		/* bc 12, CR6_EQ, 2424 */
		/* 821D6D90h case    7:*/		if ( regs.CR[6].eq ) { return 0x821D7708;  }
		/* 821D6D90h case    7:*/		return 0x821D6D94;
		  /* 821D6D94h */ case    8:  		/* cmpwi CR6, R11, 46 */
		/* 821D6D94h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000002E);
		/* 821D6D94h case    8:*/		return 0x821D6D98;
		  /* 821D6D98h */ case    9:  		/* bc 12, CR6_EQ, 1576 */
		/* 821D6D98h case    9:*/		if ( regs.CR[6].eq ) { return 0x821D73C0;  }
		/* 821D6D98h case    9:*/		return 0x821D6D9C;
		  /* 821D6D9Ch */ case   10:  		/* bc 4, CR6_GT, -184 */
		/* 821D6D9Ch case   10:*/		if ( !regs.CR[6].gt ) { return 0x821D6CE4;  }
		/* 821D6D9Ch case   10:*/		return 0x821D6DA0;
		  /* 821D6DA0h */ case   11:  		/* cmpwi CR6, R11, 48 */
		/* 821D6DA0h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000030);
		/* 821D6DA0h case   11:*/		return 0x821D6DA4;
		  /* 821D6DA4h */ case   12:  		/* bc 4, CR6_GT, 1356 */
		/* 821D6DA4h case   12:*/		if ( !regs.CR[6].gt ) { return 0x821D72F0;  }
		/* 821D6DA4h case   12:*/		return 0x821D6DA8;
		  /* 821D6DA8h */ case   13:  		/* cmpwi CR6, R11, 51 */
		/* 821D6DA8h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000033);
		/* 821D6DA8h case   13:*/		return 0x821D6DAC;
		  /* 821D6DACh */ case   14:  		/* bc 12, CR6_EQ, 1028 */
		/* 821D6DACh case   14:*/		if ( regs.CR[6].eq ) { return 0x821D71B0;  }
		/* 821D6DACh case   14:*/		return 0x821D6DB0;
		  /* 821D6DB0h */ case   15:  		/* cmpwi CR6, R11, 55 */
		/* 821D6DB0h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000037);
		/* 821D6DB0h case   15:*/		return 0x821D6DB4;
		  /* 821D6DB4h */ case   16:  		/* bc 12, CR6_EQ, 292 */
		/* 821D6DB4h case   16:*/		if ( regs.CR[6].eq ) { return 0x821D6ED8;  }
		/* 821D6DB4h case   16:*/		return 0x821D6DB8;
		  /* 821D6DB8h */ case   17:  		/* cmpwi CR6, R11, 60 */
		/* 821D6DB8h case   17:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003C);
		/* 821D6DB8h case   17:*/		return 0x821D6DBC;
		  /* 821D6DBCh */ case   18:  		/* bc 4, CR6_EQ, -216 */
		/* 821D6DBCh case   18:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D6DBCh case   18:*/		return 0x821D6DC0;
		  /* 821D6DC0h */ case   19:  		/* lwz R11, <#[R16 + 44]> */
		/* 821D6DC0h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D6DC0h case   19:*/		return 0x821D6DC4;
		  /* 821D6DC4h */ case   20:  		/* lwz R10, <#[R11]> */
		/* 821D6DC4h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D6DC4h case   20:*/		return 0x821D6DC8;
		  /* 821D6DC8h */ case   21:  		/* lwz R31, <#[R11 + 12]> */
		/* 821D6DC8h case   21:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D6DC8h case   21:*/		return 0x821D6DCC;
		  /* 821D6DCCh */ case   22:  		/* rlwinm. R11, R10, 0, 27, 30 */
		/* 821D6DCCh case   22:*/		cpu::op::rlwinm<1,0,27,30>(regs,&regs.R11,regs.R10);
		/* 821D6DCCh case   22:*/		return 0x821D6DD0;
		  /* 821D6DD0h */ case   23:  		/* rlwinm R30, R10, 27, 30, 31 */
		/* 821D6DD0h case   23:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R30,regs.R10);
		/* 821D6DD0h case   23:*/		return 0x821D6DD4;
		  /* 821D6DD4h */ case   24:  		/* bc 4, CR0_EQ, -240 */
		/* 821D6DD4h case   24:*/		if ( !regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D6DD4h case   24:*/		return 0x821D6DD8;
		  /* 821D6DD8h */ case   25:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D6DD8h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D6DD8h case   25:*/		return 0x821D6DDC;
		  /* 821D6DDCh */ case   26:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D6DDCh case   26:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D6DDCh case   26:*/		return 0x821D6DE0;
		  /* 821D6DE0h */ case   27:  		/* cmplwi CR6, R11, 8 */
		/* 821D6DE0h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000008);
		/* 821D6DE0h case   27:*/		return 0x821D6DE4;
		  /* 821D6DE4h */ case   28:  		/* bc 12, CR6_EQ, 28 */
		/* 821D6DE4h case   28:*/		if ( regs.CR[6].eq ) { return 0x821D6E00;  }
		/* 821D6DE4h case   28:*/		return 0x821D6DE8;
		  /* 821D6DE8h */ case   29:  		/* cmplwi CR6, R11, 5 */
		/* 821D6DE8h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 821D6DE8h case   29:*/		return 0x821D6DEC;
		  /* 821D6DECh */ case   30:  		/* bc 12, CR6_EQ, 20 */
		/* 821D6DECh case   30:*/		if ( regs.CR[6].eq ) { return 0x821D6E00;  }
		/* 821D6DECh case   30:*/		return 0x821D6DF0;
		  /* 821D6DF0h */ case   31:  		/* cmplwi CR6, R11, 6 */
		/* 821D6DF0h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 821D6DF0h case   31:*/		return 0x821D6DF4;
		  /* 821D6DF4h */ case   32:  		/* bc 12, CR6_EQ, 12 */
		/* 821D6DF4h case   32:*/		if ( regs.CR[6].eq ) { return 0x821D6E00;  }
		/* 821D6DF4h case   32:*/		return 0x821D6DF8;
		  /* 821D6DF8h */ case   33:  		/* cmplwi CR6, R11, 7 */
		/* 821D6DF8h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000007);
		/* 821D6DF8h case   33:*/		return 0x821D6DFC;
		  /* 821D6DFCh */ case   34:  		/* bc 4, CR6_EQ, -280 */
		/* 821D6DFCh case   34:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D6DFCh case   34:*/		return 0x821D6E00;
	}
	return 0x821D6E00;
} // Block from 821D6D74h-821D6E00h (35 instructions)

//////////////////////////////////////////////////////
// Block at 821D6E00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6E00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6E00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6E00);
		  /* 821D6E00h */ case    0:  		/* mr R4, R30 */
		/* 821D6E00h case    0:*/		regs.R4 = regs.R30;
		/* 821D6E00h case    0:*/		return 0x821D6E04;
		  /* 821D6E04h */ case    1:  		/* lwz R3, <#[R31 + 48]> */
		/* 821D6E04h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821D6E04h case    1:*/		return 0x821D6E08;
		  /* 821D6E08h */ case    2:  		/* bl -244960 */
		/* 821D6E08h case    2:*/		regs.LR = 0x821D6E0C; return 0x8219B128;
		/* 821D6E08h case    2:*/		return 0x821D6E0C;
		  /* 821D6E0Ch */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D6E0Ch case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D6E0Ch case    3:*/		return 0x821D6E10;
		  /* 821D6E10h */ case    4:  		/* bc 12, CR0_EQ, -300 */
		/* 821D6E10h case    4:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D6E10h case    4:*/		return 0x821D6E14;
		  /* 821D6E14h */ case    5:  		/* li R10, 0 */
		/* 821D6E14h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D6E14h case    5:*/		return 0x821D6E18;
		  /* 821D6E18h */ case    6:  		/* lwz R3, <#[R31 + 44]> */
		/* 821D6E18h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821D6E18h case    6:*/		return 0x821D6E1C;
		  /* 821D6E1Ch */ case    7:  		/* mr R9, R16 */
		/* 821D6E1Ch case    7:*/		regs.R9 = regs.R16;
		/* 821D6E1Ch case    7:*/		return 0x821D6E20;
		  /* 821D6E20h */ case    8:  		/* li R8, 0 */
		/* 821D6E20h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D6E20h case    8:*/		return 0x821D6E24;
		  /* 821D6E24h */ case    9:  		/* addi R7, R1, 848 */
		/* 821D6E24h case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x350);
		/* 821D6E24h case    9:*/		return 0x821D6E28;
		  /* 821D6E28h */ case   10:  		/* addi R6, R1, 616 */
		/* 821D6E28h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x268);
		/* 821D6E28h case   10:*/		return 0x821D6E2C;
		  /* 821D6E2Ch */ case   11:  		/* addi R5, R1, 760 */
		/* 821D6E2Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x2F8);
		/* 821D6E2Ch case   11:*/		return 0x821D6E30;
		  /* 821D6E30h */ case   12:  		/* mr R4, R30 */
		/* 821D6E30h case   12:*/		regs.R4 = regs.R30;
		/* 821D6E30h case   12:*/		return 0x821D6E34;
		  /* 821D6E34h */ case   13:  		/* bl 312988 */
		/* 821D6E34h case   13:*/		regs.LR = 0x821D6E38; return 0x822234D0;
		/* 821D6E34h case   13:*/		return 0x821D6E38;
		  /* 821D6E38h */ case   14:  		/* lwz R30, <#[R1 + 1908]> */
		/* 821D6E38h case   14:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000774) );
		/* 821D6E38h case   14:*/		return 0x821D6E3C;
		  /* 821D6E3Ch */ case   15:  		/* lwz R6, <#[R1 + 848]> */
		/* 821D6E3Ch case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000350) );
		/* 821D6E3Ch case   15:*/		return 0x821D6E40;
		  /* 821D6E40h */ case   16:  		/* mr R3, R30 */
		/* 821D6E40h case   16:*/		regs.R3 = regs.R30;
		/* 821D6E40h case   16:*/		return 0x821D6E44;
		  /* 821D6E44h */ case   17:  		/* lwz R5, <#[R1 + 616]> */
		/* 821D6E44h case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000268) );
		/* 821D6E44h case   17:*/		return 0x821D6E48;
		  /* 821D6E48h */ case   18:  		/* lwz R4, <#[R1 + 760]> */
		/* 821D6E48h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000002F8) );
		/* 821D6E48h case   18:*/		return 0x821D6E4C;
		  /* 821D6E4Ch */ case   19:  		/* bl -388324 */
		/* 821D6E4Ch case   19:*/		regs.LR = 0x821D6E50; return 0x82178168;
		/* 821D6E4Ch case   19:*/		return 0x821D6E50;
		  /* 821D6E50h */ case   20:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D6E50h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D6E50h case   20:*/		return 0x821D6E54;
		  /* 821D6E54h */ case   21:  		/* mr R6, R3 */
		/* 821D6E54h case   21:*/		regs.R6 = regs.R3;
		/* 821D6E54h case   21:*/		return 0x821D6E58;
		  /* 821D6E58h */ case   22:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D6E58h case   22:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D6E58h case   22:*/		return 0x821D6E5C;
		  /* 821D6E5Ch */ case   23:  		/* mr R3, R30 */
		/* 821D6E5Ch case   23:*/		regs.R3 = regs.R30;
		/* 821D6E5Ch case   23:*/		return 0x821D6E60;
		  /* 821D6E60h */ case   24:  		/* cmpwi CR6, R11, 5 */
		/* 821D6E60h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000005);
		/* 821D6E60h case   24:*/		return 0x821D6E64;
		  /* 821D6E64h */ case   25:  		/* bc 12, CR6_EQ, 84 */
		/* 821D6E64h case   25:*/		if ( regs.CR[6].eq ) { return 0x821D6EB8;  }
		/* 821D6E64h case   25:*/		return 0x821D6E68;
		  /* 821D6E68h */ case   26:  		/* cmpwi CR6, R11, 6 */
		/* 821D6E68h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 821D6E68h case   26:*/		return 0x821D6E6C;
		  /* 821D6E6Ch */ case   27:  		/* bc 12, CR6_EQ, 60 */
		/* 821D6E6Ch case   27:*/		if ( regs.CR[6].eq ) { return 0x821D6EA8;  }
		/* 821D6E6Ch case   27:*/		return 0x821D6E70;
		  /* 821D6E70h */ case   28:  		/* cmpwi CR6, R11, 7 */
		/* 821D6E70h case   28:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000007);
		/* 821D6E70h case   28:*/		return 0x821D6E74;
		  /* 821D6E74h */ case   29:  		/* bc 12, CR6_EQ, 36 */
		/* 821D6E74h case   29:*/		if ( regs.CR[6].eq ) { return 0x821D6E98;  }
		/* 821D6E74h case   29:*/		return 0x821D6E78;
		  /* 821D6E78h */ case   30:  		/* cmpwi CR6, R11, 8 */
		/* 821D6E78h case   30:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 821D6E78h case   30:*/		return 0x821D6E7C;
		  /* 821D6E7Ch */ case   31:  		/* bc 12, CR6_EQ, 12 */
		/* 821D6E7Ch case   31:*/		if ( regs.CR[6].eq ) { return 0x821D6E88;  }
		/* 821D6E7Ch case   31:*/		return 0x821D6E80;
		  /* 821D6E80h */ case   32:  		/* li R4, 4800 */
		/* 821D6E80h case   32:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821D6E80h case   32:*/		return 0x821D6E84;
		  /* 821D6E84h */ case   33:  		/* bl -544796 */
		/* 821D6E84h case   33:*/		regs.LR = 0x821D6E88; return 0x82151E68;
		/* 821D6E84h case   33:*/		return 0x821D6E88;
	}
	return 0x821D6E88;
} // Block from 821D6E00h-821D6E88h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821D6E88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6E88);
		  /* 821D6E88h */ case    0:  		/* mr R5, R16 */
		/* 821D6E88h case    0:*/		regs.R5 = regs.R16;
		/* 821D6E88h case    0:*/		return 0x821D6E8C;
		  /* 821D6E8Ch */ case    1:  		/* li R4, 0 */
		/* 821D6E8Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D6E8Ch case    1:*/		return 0x821D6E90;
		  /* 821D6E90h */ case    2:  		/* bl -87096 */
		/* 821D6E90h case    2:*/		regs.LR = 0x821D6E94; return 0x821C1A58;
		/* 821D6E90h case    2:*/		return 0x821D6E94;
		  /* 821D6E94h */ case    3:  		/* b 48 */
		/* 821D6E94h case    3:*/		return 0x821D6EC4;
		/* 821D6E94h case    3:*/		return 0x821D6E98;
	}
	return 0x821D6E98;
} // Block from 821D6E88h-821D6E98h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D6E98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6E98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6E98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6E98);
		  /* 821D6E98h */ case    0:  		/* mr R5, R16 */
		/* 821D6E98h case    0:*/		regs.R5 = regs.R16;
		/* 821D6E98h case    0:*/		return 0x821D6E9C;
		  /* 821D6E9Ch */ case    1:  		/* li R4, 0 */
		/* 821D6E9Ch case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D6E9Ch case    1:*/		return 0x821D6EA0;
		  /* 821D6EA0h */ case    2:  		/* bl -86672 */
		/* 821D6EA0h case    2:*/		regs.LR = 0x821D6EA4; return 0x821C1C10;
		/* 821D6EA0h case    2:*/		return 0x821D6EA4;
		  /* 821D6EA4h */ case    3:  		/* b 32 */
		/* 821D6EA4h case    3:*/		return 0x821D6EC4;
		/* 821D6EA4h case    3:*/		return 0x821D6EA8;
	}
	return 0x821D6EA8;
} // Block from 821D6E98h-821D6EA8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D6EA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6EA8);
		  /* 821D6EA8h */ case    0:  		/* mr R5, R16 */
		/* 821D6EA8h case    0:*/		regs.R5 = regs.R16;
		/* 821D6EA8h case    0:*/		return 0x821D6EAC;
		  /* 821D6EACh */ case    1:  		/* li R4, 0 */
		/* 821D6EACh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D6EACh case    1:*/		return 0x821D6EB0;
		  /* 821D6EB0h */ case    2:  		/* bl -86824 */
		/* 821D6EB0h case    2:*/		regs.LR = 0x821D6EB4; return 0x821C1B88;
		/* 821D6EB0h case    2:*/		return 0x821D6EB4;
		  /* 821D6EB4h */ case    3:  		/* b 16 */
		/* 821D6EB4h case    3:*/		return 0x821D6EC4;
		/* 821D6EB4h case    3:*/		return 0x821D6EB8;
	}
	return 0x821D6EB8;
} // Block from 821D6EA8h-821D6EB8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D6EB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6EB8);
		  /* 821D6EB8h */ case    0:  		/* mr R5, R16 */
		/* 821D6EB8h case    0:*/		regs.R5 = regs.R16;
		/* 821D6EB8h case    0:*/		return 0x821D6EBC;
		  /* 821D6EBCh */ case    1:  		/* li R4, 0 */
		/* 821D6EBCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D6EBCh case    1:*/		return 0x821D6EC0;
		  /* 821D6EC0h */ case    2:  		/* bl -87280 */
		/* 821D6EC0h case    2:*/		regs.LR = 0x821D6EC4; return 0x821C19D0;
		/* 821D6EC0h case    2:*/		return 0x821D6EC4;
	}
	return 0x821D6EC4;
} // Block from 821D6EB8h-821D6EC4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D6EC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6EC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6EC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6EC4);
		  /* 821D6EC4h */ case    0:  		/* mr R5, R3 */
		/* 821D6EC4h case    0:*/		regs.R5 = regs.R3;
		/* 821D6EC4h case    0:*/		return 0x821D6EC8;
		  /* 821D6EC8h */ case    1:  		/* li R7, 0 */
		/* 821D6EC8h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821D6EC8h case    1:*/		return 0x821D6ECC;
		  /* 821D6ECCh */ case    2:  		/* li R6, 228 */
		/* 821D6ECCh case    2:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821D6ECCh case    2:*/		return 0x821D6ED0;
		  /* 821D6ED0h */ case    3:  		/* mr R3, R30 */
		/* 821D6ED0h case    3:*/		regs.R3 = regs.R30;
		/* 821D6ED0h case    3:*/		return 0x821D6ED4;
		  /* 821D6ED4h */ case    4:  		/* b 9388 */
		/* 821D6ED4h case    4:*/		return 0x821D9380;
		/* 821D6ED4h case    4:*/		return 0x821D6ED8;
	}
	return 0x821D6ED8;
} // Block from 821D6EC4h-821D6ED8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D6ED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6ED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6ED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6ED8);
		  /* 821D6ED8h */ case    0:  		/* lwz R31, <#[R16 + 44]> */
		/* 821D6ED8h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D6ED8h case    0:*/		return 0x821D6EDC;
		  /* 821D6EDCh */ case    1:  		/* lwz R11, <#[R31]> */
		/* 821D6EDCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D6EDCh case    1:*/		return 0x821D6EE0;
		  /* 821D6EE0h */ case    2:  		/* rlwinm R10, R11, 30, 2, 31 */
		/* 821D6EE0h case    2:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R10,regs.R11);
		/* 821D6EE0h case    2:*/		return 0x821D6EE4;
		  /* 821D6EE4h */ case    3:  		/* xor R11, R10, R11 */
		/* 821D6EE4h case    3:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D6EE4h case    3:*/		return 0x821D6EE8;
		  /* 821D6EE8h */ case    4:  		/* rlwinm. R11, R11, 0, 25, 26 */
		/* 821D6EE8h case    4:*/		cpu::op::rlwinm<1,0,25,26>(regs,&regs.R11,regs.R11);
		/* 821D6EE8h case    4:*/		return 0x821D6EEC;
		  /* 821D6EECh */ case    5:  		/* bc 4, CR0_EQ, 684 */
		/* 821D6EECh case    5:*/		if ( !regs.CR[0].eq ) { return 0x821D7198;  }
		/* 821D6EECh case    5:*/		return 0x821D6EF0;
		  /* 821D6EF0h */ case    6:  		/* li R10, 0 */
		/* 821D6EF0h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D6EF0h case    6:*/		return 0x821D6EF4;
		  /* 821D6EF4h */ case    7:  		/* mr R9, R16 */
		/* 821D6EF4h case    7:*/		regs.R9 = regs.R16;
		/* 821D6EF4h case    7:*/		return 0x821D6EF8;
		  /* 821D6EF8h */ case    8:  		/* li R8, 0 */
		/* 821D6EF8h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D6EF8h case    8:*/		return 0x821D6EFC;
		  /* 821D6EFCh */ case    9:  		/* addi R7, R1, 376 */
		/* 821D6EFCh case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x178);
		/* 821D6EFCh case    9:*/		return 0x821D6F00;
		  /* 821D6F00h */ case   10:  		/* addi R6, R1, 220 */
		/* 821D6F00h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xDC);
		/* 821D6F00h case   10:*/		return 0x821D6F04;
		  /* 821D6F04h */ case   11:  		/* addi R5, R1, 320 */
		/* 821D6F04h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x140);
		/* 821D6F04h case   11:*/		return 0x821D6F08;
		  /* 821D6F08h */ case   12:  		/* li R4, 0 */
		/* 821D6F08h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D6F08h case   12:*/		return 0x821D6F0C;
		  /* 821D6F0Ch */ case   13:  		/* mr R3, R31 */
		/* 821D6F0Ch case   13:*/		regs.R3 = regs.R31;
		/* 821D6F0Ch case   13:*/		return 0x821D6F10;
		  /* 821D6F10h */ case   14:  		/* bl 312768 */
		/* 821D6F10h case   14:*/		regs.LR = 0x821D6F14; return 0x822234D0;
		/* 821D6F10h case   14:*/		return 0x821D6F14;
		  /* 821D6F14h */ case   15:  		/* lwz R25, <#[R1 + 1908]> */
		/* 821D6F14h case   15:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000774) );
		/* 821D6F14h case   15:*/		return 0x821D6F18;
		  /* 821D6F18h */ case   16:  		/* lwz R28, <#[R1 + 320]> */
		/* 821D6F18h case   16:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000140) );
		/* 821D6F18h case   16:*/		return 0x821D6F1C;
		  /* 821D6F1Ch */ case   17:  		/* lwz R26, <#[R1 + 376]> */
		/* 821D6F1Ch case   17:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000178) );
		/* 821D6F1Ch case   17:*/		return 0x821D6F20;
		  /* 821D6F20h */ case   18:  		/* lwz R11, <#[R28 + 8]> */
		/* 821D6F20h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821D6F20h case   18:*/		return 0x821D6F24;
		  /* 821D6F24h */ case   19:  		/* rlwinm R27, R11, 25, 25, 31 */
		/* 821D6F24h case   19:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R27,regs.R11);
		/* 821D6F24h case   19:*/		return 0x821D6F28;
		  /* 821D6F28h */ case   20:  		/* cmplwi CR6, R27, 103 */
		/* 821D6F28h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000067);
		/* 821D6F28h case   20:*/		return 0x821D6F2C;
		  /* 821D6F2Ch */ case   21:  		/* bc 4, CR6_EQ, 244 */
		/* 821D6F2Ch case   21:*/		if ( !regs.CR[6].eq ) { return 0x821D7020;  }
		/* 821D6F2Ch case   21:*/		return 0x821D6F30;
		  /* 821D6F30h */ case   22:  		/* mr R3, R28 */
		/* 821D6F30h case   22:*/		regs.R3 = regs.R28;
		/* 821D6F30h case   22:*/		return 0x821D6F34;
		  /* 821D6F34h */ case   23:  		/* mr R4, R25 */
		/* 821D6F34h case   23:*/		regs.R4 = regs.R25;
		/* 821D6F34h case   23:*/		return 0x821D6F38;
		  /* 821D6F38h */ case   24:  		/* bl -103640 */
		/* 821D6F38h case   24:*/		regs.LR = 0x821D6F3C; return 0x821BDA60;
		/* 821D6F38h case   24:*/		return 0x821D6F3C;
		  /* 821D6F3Ch */ case   25:  		/* cmpwi CR6, R3, 2 */
		/* 821D6F3Ch case   25:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 821D6F3Ch case   25:*/		return 0x821D6F40;
		  /* 821D6F40h */ case   26:  		/* bc 12, CR6_EQ, 12 */
		/* 821D6F40h case   26:*/		if ( regs.CR[6].eq ) { return 0x821D6F4C;  }
		/* 821D6F40h case   26:*/		return 0x821D6F44;
		  /* 821D6F44h */ case   27:  		/* cmpwi CR6, R3, 5 */
		/* 821D6F44h case   27:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000005);
		/* 821D6F44h case   27:*/		return 0x821D6F48;
		  /* 821D6F48h */ case   28:  		/* bc 4, CR6_EQ, 216 */
		/* 821D6F48h case   28:*/		if ( !regs.CR[6].eq ) { return 0x821D7020;  }
		/* 821D6F48h case   28:*/		return 0x821D6F4C;
	}
	return 0x821D6F4C;
} // Block from 821D6ED8h-821D6F4Ch (29 instructions)

//////////////////////////////////////////////////////
// Block at 821D6F4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6F4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6F4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6F4C);
		  /* 821D6F4Ch */ case    0:  		/* lwz R30, <#[R28 + 44]> */
		/* 821D6F4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x0000002C) );
		/* 821D6F4Ch case    0:*/		return 0x821D6F50;
		  /* 821D6F50h */ case    1:  		/* mr R4, R26 */
		/* 821D6F50h case    1:*/		regs.R4 = regs.R26;
		/* 821D6F50h case    1:*/		return 0x821D6F54;
		  /* 821D6F54h */ case    2:  		/* lwz R29, <#[R30]> */
		/* 821D6F54h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x00000000) );
		/* 821D6F54h case    2:*/		return 0x821D6F58;
		  /* 821D6F58h */ case    3:  		/* rlwinm R3, R29, 0, 27, 31 */
		/* 821D6F58h case    3:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R3,regs.R29);
		/* 821D6F58h case    3:*/		return 0x821D6F5C;
		  /* 821D6F5Ch */ case    4:  		/* bl -265652 */
		/* 821D6F5Ch case    4:*/		regs.LR = 0x821D6F60; return 0x821961A8;
		/* 821D6F5Ch case    4:*/		return 0x821D6F60;
		  /* 821D6F60h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D6F60h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D6F60h case    5:*/		return 0x821D6F64;
		  /* 821D6F64h */ case    6:  		/* bc 12, CR0_EQ, 188 */
		/* 821D6F64h case    6:*/		if ( regs.CR[0].eq ) { return 0x821D7020;  }
		/* 821D6F64h case    6:*/		return 0x821D6F68;
		  /* 821D6F68h */ case    7:  		/* lwz R11, <#[R1 + 220]> */
		/* 821D6F68h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000DC) );
		/* 821D6F68h case    7:*/		return 0x821D6F6C;
		  /* 821D6F6Ch */ case    8:  		/* rlwinm R10, R29, 27, 24, 31 */
		/* 821D6F6Ch case    8:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R10,regs.R29);
		/* 821D6F6Ch case    8:*/		return 0x821D6F70;
		  /* 821D6F70h */ case    9:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 821D6F70h case    9:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 821D6F70h case    9:*/		return 0x821D6F74;
		  /* 821D6F74h */ case   10:  		/* srw R11, R10, R11 */
		/* 821D6F74h case   10:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D6F74h case   10:*/		return 0x821D6F78;
		  /* 821D6F78h */ case   11:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 821D6F78h case   11:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 821D6F78h case   11:*/		return 0x821D6F7C;
		  /* 821D6F7Ch */ case   12:  		/* stw R11, <#[R1 + 220]> */
		/* 821D6F7Ch case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000DC) );
		/* 821D6F7Ch case   12:*/		return 0x821D6F80;
		  /* 821D6F80h */ case   13:  		/* lwz R10, <#[R31 + 12]> */
		/* 821D6F80h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D6F80h case   13:*/		return 0x821D6F84;
		  /* 821D6F84h */ case   14:  		/* addi R10, R10, 4 */
		/* 821D6F84h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821D6F84h case   14:*/		return 0x821D6F88;
		  /* 821D6F88h */ case   15:  		/* lwz R11, <#[R30 + 12]> */
		/* 821D6F88h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821D6F88h case   15:*/		return 0x821D6F8C;
		  /* 821D6F8Ch */ case   16:  		/* lwz R9, <#[R10]> */
		/* 821D6F8Ch case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D6F8Ch case   16:*/		return 0x821D6F90;
		  /* 821D6F90h */ case   17:  		/* b 12 */
		/* 821D6F90h case   17:*/		return 0x821D6F9C;
		/* 821D6F90h case   17:*/		return 0x821D6F94;
		  /* 821D6F94h */ case   18:  		/* addi R10, R9, 8 */
		/* 821D6F94h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821D6F94h case   18:*/		return 0x821D6F98;
		  /* 821D6F98h */ case   19:  		/* lwz R9, <#[R9 + 8]> */
		/* 821D6F98h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821D6F98h case   19:*/		return 0x821D6F9C;
	}
	return 0x821D6F9C;
} // Block from 821D6F4Ch-821D6F9Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 821D6F9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D6F9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D6F9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D6F9C);
		  /* 821D6F9Ch */ case    0:  		/* cmplw CR6, R9, R31 */
		/* 821D6F9Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R31);
		/* 821D6F9Ch case    0:*/		return 0x821D6FA0;
		  /* 821D6FA0h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821D6FA0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D6F94;  }
		/* 821D6FA0h case    1:*/		return 0x821D6FA4;
		  /* 821D6FA4h */ case    2:  		/* lwz R9, <#[R31 + 8]> */
		/* 821D6FA4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 821D6FA4h case    2:*/		return 0x821D6FA8;
		  /* 821D6FA8h */ case    3:  		/* li R8, 224 */
		/* 821D6FA8h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0xE0);
		/* 821D6FA8h case    3:*/		return 0x821D6FAC;
		  /* 821D6FACh */ case    4:  		/* stw R9, <#[R10]> */
		/* 821D6FACh case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D6FACh case    4:*/		return 0x821D6FB0;
		  /* 821D6FB0h */ case    5:  		/* lwz R10, <#[R11 + 4]> */
		/* 821D6FB0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821D6FB0h case    5:*/		return 0x821D6FB4;
		  /* 821D6FB4h */ case    6:  		/* stw R10, <#[R31 + 8]> */
		/* 821D6FB4h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821D6FB4h case    6:*/		return 0x821D6FB8;
		  /* 821D6FB8h */ case    7:  		/* stw R31, <#[R11 + 4]> */
		/* 821D6FB8h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821D6FB8h case    7:*/		return 0x821D6FBC;
		  /* 821D6FBCh */ case    8:  		/* stw R11, <#[R31 + 12]> */
		/* 821D6FBCh case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D6FBCh case    8:*/		return 0x821D6FC0;
		  /* 821D6FC0h */ case    9:  		/* lwz R11, <#[R1 + 220]> */
		/* 821D6FC0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000DC) );
		/* 821D6FC0h case    9:*/		return 0x821D6FC4;
		  /* 821D6FC4h */ case   10:  		/* rlwimi R8, R11, 2, 27, 29 */
		/* 821D6FC4h case   10:*/		cpu::op::rlwimi<0,2,27,29>(regs,&regs.R8,regs.R11);
		/* 821D6FC4h case   10:*/		return 0x821D6FC8;
		  /* 821D6FC8h */ case   11:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 821D6FC8h case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821D6FC8h case   11:*/		return 0x821D6FCC;
		  /* 821D6FCCh */ case   12:  		/* lwz R10, <#[R31]> */
		/* 821D6FCCh case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821D6FCCh case   12:*/		return 0x821D6FD0;
		  /* 821D6FD0h */ case   13:  		/* or R11, R8, R11 */
		/* 821D6FD0h case   13:*/		cpu::op::or<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 821D6FD0h case   13:*/		return 0x821D6FD4;
		  /* 821D6FD4h */ case   14:  		/* rlwinm R10, R10, 0, 27, 21 */
		/* 821D6FD4h case   14:*/		cpu::op::rlwinm<0,0,27,21>(regs,&regs.R10,regs.R10);
		/* 821D6FD4h case   14:*/		return 0x821D6FD8;
		  /* 821D6FD8h */ case   15:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821D6FD8h case   15:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821D6FD8h case   15:*/		return 0x821D6FDC;
		  /* 821D6FDCh */ case   16:  		/* or R29, R11, R10 */
		/* 821D6FDCh case   16:*/		cpu::op::or<0>(regs,&regs.R29,regs.R11,regs.R10);
		/* 821D6FDCh case   16:*/		return 0x821D6FE0;
		  /* 821D6FE0h */ case   17:  		/* stw R29, <#[R31]> */
		/* 821D6FE0h case   17:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 821D6FE0h case   17:*/		return 0x821D6FE4;
		  /* 821D6FE4h */ case   18:  		/* lwz R4, <#[R1 + 376]> */
		/* 821D6FE4h case   18:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000178) );
		/* 821D6FE4h case   18:*/		return 0x821D6FE8;
		  /* 821D6FE8h */ case   19:  		/* lwz R11, <#[R30]> */
		/* 821D6FE8h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821D6FE8h case   19:*/		return 0x821D6FEC;
		  /* 821D6FECh */ case   20:  		/* rlwinm R3, R11, 0, 27, 31 */
		/* 821D6FECh case   20:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R3,regs.R11);
		/* 821D6FECh case   20:*/		return 0x821D6FF0;
		  /* 821D6FF0h */ case   21:  		/* bl -390520 */
		/* 821D6FF0h case   21:*/		regs.LR = 0x821D6FF4; return 0x82177A78;
		/* 821D6FF0h case   21:*/		return 0x821D6FF4;
		  /* 821D6FF4h */ case   22:  		/* rlwimi R3, R29, 0, 0, 26 */
		/* 821D6FF4h case   22:*/		cpu::op::rlwimi<0,0,0,26>(regs,&regs.R3,regs.R29);
		/* 821D6FF4h case   22:*/		return 0x821D6FF8;
		  /* 821D6FF8h */ case   23:  		/* lwz R30, <#[R1 + 112]> */
		/* 821D6FF8h case   23:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000070) );
		/* 821D6FF8h case   23:*/		return 0x821D6FFC;
		  /* 821D6FFCh */ case   24:  		/* mr R4, R16 */
		/* 821D6FFCh case   24:*/		regs.R4 = regs.R16;
		/* 821D6FFCh case   24:*/		return 0x821D7000;
		  /* 821D7000h */ case   25:  		/* stw R3, <#[R31]> */
		/* 821D7000h case   25:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 821D7000h case   25:*/		return 0x821D7004;
		  /* 821D7004h */ case   26:  		/* mr R3, R25 */
		/* 821D7004h case   26:*/		regs.R3 = regs.R25;
		/* 821D7004h case   26:*/		return 0x821D7008;
		  /* 821D7008h */ case   27:  		/* mr R5, R30 */
		/* 821D7008h case   27:*/		regs.R5 = regs.R30;
		/* 821D7008h case   27:*/		return 0x821D700C;
		  /* 821D700Ch */ case   28:  		/* bl -46660 */
		/* 821D700Ch case   28:*/		regs.LR = 0x821D7010; return 0x821CB9C8;
		/* 821D700Ch case   28:*/		return 0x821D7010;
		  /* 821D7010h */ case   29:  		/* lwz R4, <#[R1 + 320]> */
		/* 821D7010h case   29:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000140) );
		/* 821D7010h case   29:*/		return 0x821D7014;
		  /* 821D7014h */ case   30:  		/* mr R5, R30 */
		/* 821D7014h case   30:*/		regs.R5 = regs.R30;
		/* 821D7014h case   30:*/		return 0x821D7018;
		  /* 821D7018h */ case   31:  		/* mr R3, R25 */
		/* 821D7018h case   31:*/		regs.R3 = regs.R25;
		/* 821D7018h case   31:*/		return 0x821D701C;
		  /* 821D701Ch */ case   32:  		/* b 6612 */
		/* 821D701Ch case   32:*/		return 0x821D89F0;
		/* 821D701Ch case   32:*/		return 0x821D7020;
	}
	return 0x821D7020;
} // Block from 821D6F9Ch-821D7020h (33 instructions)

//////////////////////////////////////////////////////
// Block at 821D7020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7020);
		  /* 821D7020h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 821D7020h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821D7020h case    0:*/		return 0x821D7024;
		  /* 821D7024h */ case    1:  		/* bc 4, CR6_EQ, 376 */
		/* 821D7024h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D719C;  }
		/* 821D7024h case    1:*/		return 0x821D7028;
		  /* 821D7028h */ case    2:  		/* cmplwi CR6, R27, 11 */
		/* 821D7028h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x0000000B);
		/* 821D7028h case    2:*/		return 0x821D702C;
		  /* 821D702Ch */ case    3:  		/* bc 4, CR6_EQ, 368 */
		/* 821D702Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D719C;  }
		/* 821D702Ch case    3:*/		return 0x821D7030;
		  /* 821D7030h */ case    4:  		/* li R10, 0 */
		/* 821D7030h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D7030h case    4:*/		return 0x821D7034;
		  /* 821D7034h */ case    5:  		/* lwz R3, <#[R28 + 44]> */
		/* 821D7034h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x0000002C) );
		/* 821D7034h case    5:*/		return 0x821D7038;
		  /* 821D7038h */ case    6:  		/* mr R9, R16 */
		/* 821D7038h case    6:*/		regs.R9 = regs.R16;
		/* 821D7038h case    6:*/		return 0x821D703C;
		  /* 821D703Ch */ case    7:  		/* lwz R4, <#[R1 + 220]> */
		/* 821D703Ch case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000DC) );
		/* 821D703Ch case    7:*/		return 0x821D7040;
		  /* 821D7040h */ case    8:  		/* li R8, 0 */
		/* 821D7040h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D7040h case    8:*/		return 0x821D7044;
		  /* 821D7044h */ case    9:  		/* addi R7, R1, 624 */
		/* 821D7044h case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x270);
		/* 821D7044h case    9:*/		return 0x821D7048;
		  /* 821D7048h */ case   10:  		/* addi R6, R1, 324 */
		/* 821D7048h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x144);
		/* 821D7048h case   10:*/		return 0x821D704C;
		  /* 821D704Ch */ case   11:  		/* addi R5, R1, 264 */
		/* 821D704Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x108);
		/* 821D704Ch case   11:*/		return 0x821D7050;
		  /* 821D7050h */ case   12:  		/* bl 312448 */
		/* 821D7050h case   12:*/		regs.LR = 0x821D7054; return 0x822234D0;
		/* 821D7050h case   12:*/		return 0x821D7054;
		  /* 821D7054h */ case   13:  		/* lwz R11, <#[R1 + 624]> */
		/* 821D7054h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000270) );
		/* 821D7054h case   13:*/		return 0x821D7058;
		  /* 821D7058h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821D7058h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D7058h case   14:*/		return 0x821D705C;
		  /* 821D705Ch */ case   15:  		/* bc 4, CR6_EQ, 320 */
		/* 821D705Ch case   15:*/		if ( !regs.CR[6].eq ) { return 0x821D719C;  }
		/* 821D705Ch case   15:*/		return 0x821D7060;
		  /* 821D7060h */ case   16:  		/* lwz R11, <#[R1 + 264]> */
		/* 821D7060h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000108) );
		/* 821D7060h case   16:*/		return 0x821D7064;
		  /* 821D7064h */ case   17:  		/* lwz R10, <#[R11 + 8]> */
		/* 821D7064h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D7064h case   17:*/		return 0x821D7068;
		  /* 821D7068h */ case   18:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821D7068h case   18:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821D7068h case   18:*/		return 0x821D706C;
		  /* 821D706Ch */ case   19:  		/* cmplwi CR6, R10, 128 */
		/* 821D706Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000080);
		/* 821D706Ch case   19:*/		return 0x821D7070;
		  /* 821D7070h */ case   20:  		/* bc 4, CR6_EQ, 300 */
		/* 821D7070h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821D719C;  }
		/* 821D7070h case   20:*/		return 0x821D7074;
		  /* 821D7074h */ case   21:  		/* li R10, 0 */
		/* 821D7074h case   21:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D7074h case   21:*/		return 0x821D7078;
		  /* 821D7078h */ case   22:  		/* lwz R3, <#[R11 + 48]> */
		/* 821D7078h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000030) );
		/* 821D7078h case   22:*/		return 0x821D707C;
		  /* 821D707Ch */ case   23:  		/* mr R9, R16 */
		/* 821D707Ch case   23:*/		regs.R9 = regs.R16;
		/* 821D707Ch case   23:*/		return 0x821D7080;
		  /* 821D7080h */ case   24:  		/* lwz R4, <#[R1 + 324]> */
		/* 821D7080h case   24:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000144) );
		/* 821D7080h case   24:*/		return 0x821D7084;
		  /* 821D7084h */ case   25:  		/* li R8, 0 */
		/* 821D7084h case   25:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D7084h case   25:*/		return 0x821D7088;
		  /* 821D7088h */ case   26:  		/* addi R7, R1, 632 */
		/* 821D7088h case   26:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x278);
		/* 821D7088h case   26:*/		return 0x821D708C;
		  /* 821D708Ch */ case   27:  		/* addi R6, R1, 332 */
		/* 821D708Ch case   27:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x14C);
		/* 821D708Ch case   27:*/		return 0x821D7090;
		  /* 821D7090h */ case   28:  		/* addi R5, R1, 812 */
		/* 821D7090h case   28:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x32C);
		/* 821D7090h case   28:*/		return 0x821D7094;
		  /* 821D7094h */ case   29:  		/* bl 312380 */
		/* 821D7094h case   29:*/		regs.LR = 0x821D7098; return 0x822234D0;
		/* 821D7094h case   29:*/		return 0x821D7098;
		  /* 821D7098h */ case   30:  		/* lwz R3, <#[R1 + 812]> */
		/* 821D7098h case   30:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000032C) );
		/* 821D7098h case   30:*/		return 0x821D709C;
		  /* 821D709Ch */ case   31:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D709Ch case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D709Ch case   31:*/		return 0x821D70A0;
		  /* 821D70A0h */ case   32:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D70A0h case   32:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D70A0h case   32:*/		return 0x821D70A4;
		  /* 821D70A4h */ case   33:  		/* cmplwi CR6, R11, 16000 */
		/* 821D70A4h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D70A4h case   33:*/		return 0x821D70A8;
		  /* 821D70A8h */ case   34:  		/* bc 4, CR6_EQ, 244 */
		/* 821D70A8h case   34:*/		if ( !regs.CR[6].eq ) { return 0x821D719C;  }
		/* 821D70A8h case   34:*/		return 0x821D70AC;
		  /* 821D70ACh */ case   35:  		/* lwz R5, <#[R1 + 632]> */
		/* 821D70ACh case   35:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000278) );
		/* 821D70ACh case   35:*/		return 0x821D70B0;
		  /* 821D70B0h */ case   36:  		/* lwz R4, <#[R1 + 332]> */
		/* 821D70B0h case   36:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000014C) );
		/* 821D70B0h case   36:*/		return 0x821D70B4;
		  /* 821D70B4h */ case   37:  		/* bl 304620 */
		/* 821D70B4h case   37:*/		regs.LR = 0x821D70B8; return 0x822216A0;
		/* 821D70B4h case   37:*/		return 0x821D70B8;
		  /* 821D70B8h */ case   38:  		/* lis R11, -32256 */
		/* 821D70B8h case   38:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821D70B8h case   38:*/		return 0x821D70BC;
		  /* 821D70BCh */ case   39:  		/* lfd FR0, <#[R11 + 4736]> */
		/* 821D70BCh case   39:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00001280) );
		/* 821D70BCh case   39:*/		return 0x821D70C0;
		  /* 821D70C0h */ case   40:  		/* fcmpu CR6, FR1, FR0 */
		/* 821D70C0h case   40:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 821D70C0h case   40:*/		return 0x821D70C4;
		  /* 821D70C4h */ case   41:  		/* bc 4, CR6_EQ, 216 */
		/* 821D70C4h case   41:*/		if ( !regs.CR[6].eq ) { return 0x821D719C;  }
		/* 821D70C4h case   41:*/		return 0x821D70C8;
		  /* 821D70C8h */ case   42:  		/* lwz R11, <#[R1 + 264]> */
		/* 821D70C8h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000108) );
		/* 821D70C8h case   42:*/		return 0x821D70CC;
		  /* 821D70CCh */ case   43:  		/* li R10, 0 */
		/* 821D70CCh case   43:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D70CCh case   43:*/		return 0x821D70D0;
		  /* 821D70D0h */ case   44:  		/* mr R9, R16 */
		/* 821D70D0h case   44:*/		regs.R9 = regs.R16;
		/* 821D70D0h case   44:*/		return 0x821D70D4;
		  /* 821D70D4h */ case   45:  		/* lwz R4, <#[R1 + 324]> */
		/* 821D70D4h case   45:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000144) );
		/* 821D70D4h case   45:*/		return 0x821D70D8;
		  /* 821D70D8h */ case   46:  		/* li R8, 0 */
		/* 821D70D8h case   46:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D70D8h case   46:*/		return 0x821D70DC;
		  /* 821D70DCh */ case   47:  		/* addi R7, R1, 640 */
		/* 821D70DCh case   47:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x280);
		/* 821D70DCh case   47:*/		return 0x821D70E0;
		  /* 821D70E0h */ case   48:  		/* addi R6, R1, 768 */
		/* 821D70E0h case   48:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x300);
		/* 821D70E0h case   48:*/		return 0x821D70E4;
		  /* 821D70E4h */ case   49:  		/* addi R5, R1, 340 */
		/* 821D70E4h case   49:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x154);
		/* 821D70E4h case   49:*/		return 0x821D70E8;
		  /* 821D70E8h */ case   50:  		/* lwz R3, <#[R11 + 44]> */
		/* 821D70E8h case   50:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D70E8h case   50:*/		return 0x821D70EC;
		  /* 821D70ECh */ case   51:  		/* bl 312292 */
		/* 821D70ECh case   51:*/		regs.LR = 0x821D70F0; return 0x822234D0;
		/* 821D70ECh case   51:*/		return 0x821D70F0;
		  /* 821D70F0h */ case   52:  		/* lwz R10, <#[R31 + 12]> */
		/* 821D70F0h case   52:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D70F0h case   52:*/		return 0x821D70F4;
		  /* 821D70F4h */ case   53:  		/* lwz R11, <#[R1 + 340]> */
		/* 821D70F4h case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000154) );
		/* 821D70F4h case   53:*/		return 0x821D70F8;
		  /* 821D70F8h */ case   54:  		/* addi R10, R10, 4 */
		/* 821D70F8h case   54:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821D70F8h case   54:*/		return 0x821D70FC;
		  /* 821D70FCh */ case   55:  		/* lwz R9, <#[R10]> */
		/* 821D70FCh case   55:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D70FCh case   55:*/		return 0x821D7100;
		  /* 821D7100h */ case   56:  		/* b 12 */
		/* 821D7100h case   56:*/		return 0x821D710C;
		/* 821D7100h case   56:*/		return 0x821D7104;
		  /* 821D7104h */ case   57:  		/* addi R10, R9, 8 */
		/* 821D7104h case   57:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821D7104h case   57:*/		return 0x821D7108;
		  /* 821D7108h */ case   58:  		/* lwz R9, <#[R9 + 8]> */
		/* 821D7108h case   58:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821D7108h case   58:*/		return 0x821D710C;
	}
	return 0x821D710C;
} // Block from 821D7020h-821D710Ch (59 instructions)

//////////////////////////////////////////////////////
// Block at 821D710Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D710C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D710C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D710C);
		  /* 821D710Ch */ case    0:  		/* cmplw CR6, R9, R31 */
		/* 821D710Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R31);
		/* 821D710Ch case    0:*/		return 0x821D7110;
		  /* 821D7110h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821D7110h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D7104;  }
		/* 821D7110h case    1:*/		return 0x821D7114;
		  /* 821D7114h */ case    2:  		/* lwz R9, <#[R31 + 8]> */
		/* 821D7114h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 821D7114h case    2:*/		return 0x821D7118;
		  /* 821D7118h */ case    3:  		/* li R8, 224 */
		/* 821D7118h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0xE0);
		/* 821D7118h case    3:*/		return 0x821D711C;
		  /* 821D711Ch */ case    4:  		/* lwz R30, <#[R1 + 112]> */
		/* 821D711Ch case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000070) );
		/* 821D711Ch case    4:*/		return 0x821D7120;
		  /* 821D7120h */ case    5:  		/* mr R4, R16 */
		/* 821D7120h case    5:*/		regs.R4 = regs.R16;
		/* 821D7120h case    5:*/		return 0x821D7124;
		  /* 821D7124h */ case    6:  		/* mr R3, R25 */
		/* 821D7124h case    6:*/		regs.R3 = regs.R25;
		/* 821D7124h case    6:*/		return 0x821D7128;
		  /* 821D7128h */ case    7:  		/* mr R5, R30 */
		/* 821D7128h case    7:*/		regs.R5 = regs.R30;
		/* 821D7128h case    7:*/		return 0x821D712C;
		  /* 821D712Ch */ case    8:  		/* stw R9, <#[R10]> */
		/* 821D712Ch case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D712Ch case    8:*/		return 0x821D7130;
		  /* 821D7130h */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 821D7130h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821D7130h case    9:*/		return 0x821D7134;
		  /* 821D7134h */ case   10:  		/* stw R10, <#[R31 + 8]> */
		/* 821D7134h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821D7134h case   10:*/		return 0x821D7138;
		  /* 821D7138h */ case   11:  		/* stw R31, <#[R11 + 4]> */
		/* 821D7138h case   11:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821D7138h case   11:*/		return 0x821D713C;
		  /* 821D713Ch */ case   12:  		/* stw R11, <#[R31 + 12]> */
		/* 821D713Ch case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D713Ch case   12:*/		return 0x821D7140;
		  /* 821D7140h */ case   13:  		/* lwz R10, <#[R1 + 332]> */
		/* 821D7140h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000014C) );
		/* 821D7140h case   13:*/		return 0x821D7144;
		  /* 821D7144h */ case   14:  		/* lwz R9, <#[R1 + 768]> */
		/* 821D7144h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000300) );
		/* 821D7144h case   14:*/		return 0x821D7148;
		  /* 821D7148h */ case   15:  		/* lwz R11, <#[R31]> */
		/* 821D7148h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D7148h case   15:*/		return 0x821D714C;
		  /* 821D714Ch */ case   16:  		/* rlwinm R11, R11, 0, 27, 21 */
		/* 821D714Ch case   16:*/		cpu::op::rlwinm<0,0,27,21>(regs,&regs.R11,regs.R11);
		/* 821D714Ch case   16:*/		return 0x821D7150;
		  /* 821D7150h */ case   17:  		/* rlwimi R8, R10, 2, 27, 29 */
		/* 821D7150h case   17:*/		cpu::op::rlwimi<0,2,27,29>(regs,&regs.R8,regs.R10);
		/* 821D7150h case   17:*/		return 0x821D7154;
		  /* 821D7154h */ case   18:  		/* rlwinm R10, R9, 0, 27, 31 */
		/* 821D7154h case   18:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R9);
		/* 821D7154h case   18:*/		return 0x821D7158;
		  /* 821D7158h */ case   19:  		/* or R10, R8, R10 */
		/* 821D7158h case   19:*/		cpu::op::or<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821D7158h case   19:*/		return 0x821D715C;
		  /* 821D715Ch */ case   20:  		/* rlwinm R10, R10, 5, 0, 26 */
		/* 821D715Ch case   20:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R10);
		/* 821D715Ch case   20:*/		return 0x821D7160;
		  /* 821D7160h */ case   21:  		/* or R11, R10, R11 */
		/* 821D7160h case   21:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D7160h case   21:*/		return 0x821D7164;
		  /* 821D7164h */ case   22:  		/* stw R11, <#[R31]> */
		/* 821D7164h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D7164h case   22:*/		return 0x821D7168;
		  /* 821D7168h */ case   23:  		/* lwz R10, <#[R1 + 640]> */
		/* 821D7168h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000280) );
		/* 821D7168h case   23:*/		return 0x821D716C;
		  /* 821D716Ch */ case   24:  		/* rlwimi R11, R10, 0, 27, 31 */
		/* 821D716Ch case   24:*/		cpu::op::rlwimi<0,0,27,31>(regs,&regs.R11,regs.R10);
		/* 821D716Ch case   24:*/		return 0x821D7170;
		  /* 821D7170h */ case   25:  		/* stw R11, <#[R31]> */
		/* 821D7170h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D7170h case   25:*/		return 0x821D7174;
		  /* 821D7174h */ case   26:  		/* bl -47020 */
		/* 821D7174h case   26:*/		regs.LR = 0x821D7178; return 0x821CB9C8;
		/* 821D7174h case   26:*/		return 0x821D7178;
		  /* 821D7178h */ case   27:  		/* mr R5, R30 */
		/* 821D7178h case   27:*/		regs.R5 = regs.R30;
		/* 821D7178h case   27:*/		return 0x821D717C;
		  /* 821D717Ch */ case   28:  		/* mr R3, R25 */
		/* 821D717Ch case   28:*/		regs.R3 = regs.R25;
		/* 821D717Ch case   28:*/		return 0x821D7180;
		  /* 821D7180h */ case   29:  		/* lwz R4, <#[R1 + 340]> */
		/* 821D7180h case   29:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000154) );
		/* 821D7180h case   29:*/		return 0x821D7184;
		  /* 821D7184h */ case   30:  		/* bl -47036 */
		/* 821D7184h case   30:*/		regs.LR = 0x821D7188; return 0x821CB9C8;
		/* 821D7184h case   30:*/		return 0x821D7188;
		  /* 821D7188h */ case   31:  		/* lwz R4, <#[R1 + 264]> */
		/* 821D7188h case   31:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000108) );
		/* 821D7188h case   31:*/		return 0x821D718C;
		  /* 821D718Ch */ case   32:  		/* mr R5, R30 */
		/* 821D718Ch case   32:*/		regs.R5 = regs.R30;
		/* 821D718Ch case   32:*/		return 0x821D7190;
		  /* 821D7190h */ case   33:  		/* mr R3, R25 */
		/* 821D7190h case   33:*/		regs.R3 = regs.R25;
		/* 821D7190h case   33:*/		return 0x821D7194;
		  /* 821D7194h */ case   34:  		/* b 6236 */
		/* 821D7194h case   34:*/		return 0x821D89F0;
		/* 821D7194h case   34:*/		return 0x821D7198;
	}
	return 0x821D7198;
} // Block from 821D710Ch-821D7198h (35 instructions)

//////////////////////////////////////////////////////
// Block at 821D7198h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7198( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7198) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7198);
		  /* 821D7198h */ case    0:  		/* lwz R25, <#[R1 + 1908]> */
		/* 821D7198h case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000774) );
		/* 821D7198h case    0:*/		return 0x821D719C;
	}
	return 0x821D719C;
} // Block from 821D7198h-821D719Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D719Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D719C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D719C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D719C);
		  /* 821D719Ch */ case    0:  		/* mr R4, R16 */
		/* 821D719Ch case    0:*/		regs.R4 = regs.R16;
		/* 821D719Ch case    0:*/		return 0x821D71A0;
		  /* 821D71A0h */ case    1:  		/* lwz R5, <#[R1 + 112]> */
		/* 821D71A0h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 821D71A0h case    1:*/		return 0x821D71A4;
		  /* 821D71A4h */ case    2:  		/* mr R3, R25 */
		/* 821D71A4h case    2:*/		regs.R3 = regs.R25;
		/* 821D71A4h case    2:*/		return 0x821D71A8;
		  /* 821D71A8h */ case    3:  		/* bl -46920 */
		/* 821D71A8h case    3:*/		regs.LR = 0x821D71AC; return 0x821CBA60;
		/* 821D71A8h case    3:*/		return 0x821D71AC;
		  /* 821D71ACh */ case    4:  		/* b -1224 */
		/* 821D71ACh case    4:*/		return 0x821D6CE4;
		/* 821D71ACh case    4:*/		return 0x821D71B0;
	}
	return 0x821D71B0;
} // Block from 821D719Ch-821D71B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D71B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D71B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D71B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D71B0);
		  /* 821D71B0h */ case    0:  		/* lwz R31, <#[R16 + 44]> */
		/* 821D71B0h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D71B0h case    0:*/		return 0x821D71B4;
		  /* 821D71B4h */ case    1:  		/* li R10, 0 */
		/* 821D71B4h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D71B4h case    1:*/		return 0x821D71B8;
		  /* 821D71B8h */ case    2:  		/* mr R9, R16 */
		/* 821D71B8h case    2:*/		regs.R9 = regs.R16;
		/* 821D71B8h case    2:*/		return 0x821D71BC;
		  /* 821D71BCh */ case    3:  		/* li R8, 0 */
		/* 821D71BCh case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D71BCh case    3:*/		return 0x821D71C0;
		  /* 821D71C0h */ case    4:  		/* addi R7, R1, 648 */
		/* 821D71C0h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x288);
		/* 821D71C0h case    4:*/		return 0x821D71C4;
		  /* 821D71C4h */ case    5:  		/* addi R6, R1, 1456 */
		/* 821D71C4h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x5B0);
		/* 821D71C4h case    5:*/		return 0x821D71C8;
		  /* 821D71C8h */ case    6:  		/* addi R5, R1, 820 */
		/* 821D71C8h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x334);
		/* 821D71C8h case    6:*/		return 0x821D71CC;
		  /* 821D71CCh */ case    7:  		/* li R4, 0 */
		/* 821D71CCh case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D71CCh case    7:*/		return 0x821D71D0;
		  /* 821D71D0h */ case    8:  		/* mr R3, R31 */
		/* 821D71D0h case    8:*/		regs.R3 = regs.R31;
		/* 821D71D0h case    8:*/		return 0x821D71D4;
		  /* 821D71D4h */ case    9:  		/* bl 312060 */
		/* 821D71D4h case    9:*/		regs.LR = 0x821D71D8; return 0x822234D0;
		/* 821D71D4h case    9:*/		return 0x821D71D8;
		  /* 821D71D8h */ case   10:  		/* lwz R11, <#[R1 + 820]> */
		/* 821D71D8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000334) );
		/* 821D71D8h case   10:*/		return 0x821D71DC;
		  /* 821D71DCh */ case   11:  		/* lwz R9, <#[R1 + 648]> */
		/* 821D71DCh case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000288) );
		/* 821D71DCh case   11:*/		return 0x821D71E0;
		  /* 821D71E0h */ case   12:  		/* lwz R10, <#[R11 + 8]> */
		/* 821D71E0h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D71E0h case   12:*/		return 0x821D71E4;
		  /* 821D71E4h */ case   13:  		/* rlwinm R10, R10, 25, 25, 31 */
		/* 821D71E4h case   13:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R10);
		/* 821D71E4h case   13:*/		return 0x821D71E8;
		  /* 821D71E8h */ case   14:  		/* cmplwi CR6, R10, 54 */
		/* 821D71E8h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000036);
		/* 821D71E8h case   14:*/		return 0x821D71EC;
		  /* 821D71ECh */ case   15:  		/* bc 4, CR6_EQ, 56 */
		/* 821D71ECh case   15:*/		if ( !regs.CR[6].eq ) { return 0x821D7224;  }
		/* 821D71ECh case   15:*/		return 0x821D71F0;
		  /* 821D71F0h */ case   16:  		/* cmplwi CR6, R9, 0 */
		/* 821D71F0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821D71F0h case   16:*/		return 0x821D71F4;
		  /* 821D71F4h */ case   17:  		/* bc 4, CR6_EQ, 48 */
		/* 821D71F4h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821D7224;  }
		/* 821D71F4h case   17:*/		return 0x821D71F8;
		  /* 821D71F8h */ case   18:  		/* lwz R6, <#[R11 + 44]> */
		/* 821D71F8h case   18:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D71F8h case   18:*/		return 0x821D71FC;
		  /* 821D71FCh */ case   19:  		/* lwz R31, <#[R1 + 1908]> */
		/* 821D71FCh case   19:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000774) );
		/* 821D71FCh case   19:*/		return 0x821D7200;
		  /* 821D7200h */ case   20:  		/* li R4, 0 */
		/* 821D7200h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D7200h case   20:*/		return 0x821D7204;
		  /* 821D7204h */ case   21:  		/* mr R5, R16 */
		/* 821D7204h case   21:*/		regs.R5 = regs.R16;
		/* 821D7204h case   21:*/		return 0x821D7208;
		  /* 821D7208h */ case   22:  		/* mr R3, R31 */
		/* 821D7208h case   22:*/		regs.R3 = regs.R31;
		/* 821D7208h case   22:*/		return 0x821D720C;
		  /* 821D720Ch */ case   23:  		/* bl -87412 */
		/* 821D720Ch case   23:*/		regs.LR = 0x821D7210; return 0x821C1C98;
		/* 821D720Ch case   23:*/		return 0x821D7210;
		  /* 821D7210h */ case   24:  		/* mr R5, R3 */
		/* 821D7210h case   24:*/		regs.R5 = regs.R3;
		/* 821D7210h case   24:*/		return 0x821D7214;
		  /* 821D7214h */ case   25:  		/* li R7, 0 */
		/* 821D7214h case   25:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821D7214h case   25:*/		return 0x821D7218;
		  /* 821D7218h */ case   26:  		/* li R6, 228 */
		/* 821D7218h case   26:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821D7218h case   26:*/		return 0x821D721C;
		  /* 821D721Ch */ case   27:  		/* mr R3, R31 */
		/* 821D721Ch case   27:*/		regs.R3 = regs.R31;
		/* 821D721Ch case   27:*/		return 0x821D7220;
		  /* 821D7220h */ case   28:  		/* b 8544 */
		/* 821D7220h case   28:*/		return 0x821D9380;
		/* 821D7220h case   28:*/		return 0x821D7224;
	}
	return 0x821D7224;
} // Block from 821D71B0h-821D7224h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821D7224h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7224( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7224) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7224);
		  /* 821D7224h */ case    0:  		/* cmplwi CR6, R10, 72 */
		/* 821D7224h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000048);
		/* 821D7224h case    0:*/		return 0x821D7228;
		  /* 821D7228h */ case    1:  		/* bc 4, CR6_EQ, 40 */
		/* 821D7228h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D7250;  }
		/* 821D7228h case    1:*/		return 0x821D722C;
		  /* 821D722Ch */ case    2:  		/* cmplwi CR6, R9, 0 */
		/* 821D722Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821D722Ch case    2:*/		return 0x821D7230;
		  /* 821D7230h */ case    3:  		/* bc 4, CR6_EQ, 32 */
		/* 821D7230h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D7250;  }
		/* 821D7230h case    3:*/		return 0x821D7234;
		  /* 821D7234h */ case    4:  		/* lwz R31, <#[R1 + 1908]> */
		/* 821D7234h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000774) );
		/* 821D7234h case    4:*/		return 0x821D7238;
		  /* 821D7238h */ case    5:  		/* mr R5, R16 */
		/* 821D7238h case    5:*/		regs.R5 = regs.R16;
		/* 821D7238h case    5:*/		return 0x821D723C;
		  /* 821D723Ch */ case    6:  		/* li R4, 0 */
		/* 821D723Ch case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D723Ch case    6:*/		return 0x821D7240;
		  /* 821D7240h */ case    7:  		/* lwz R6, <#[R11 + 44]> */
		/* 821D7240h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D7240h case    7:*/		return 0x821D7244;
		  /* 821D7244h */ case    8:  		/* mr R3, R31 */
		/* 821D7244h case    8:*/		regs.R3 = regs.R31;
		/* 821D7244h case    8:*/		return 0x821D7248;
		  /* 821D7248h */ case    9:  		/* bl -88456 */
		/* 821D7248h case    9:*/		regs.LR = 0x821D724C; return 0x821C18C0;
		/* 821D7248h case    9:*/		return 0x821D724C;
		  /* 821D724Ch */ case   10:  		/* b -60 */
		/* 821D724Ch case   10:*/		return 0x821D7210;
		/* 821D724Ch case   10:*/		return 0x821D7250;
	}
	return 0x821D7250;
} // Block from 821D7224h-821D7250h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821D7250h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7250( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7250) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7250);
		  /* 821D7250h */ case    0:  		/* cmplwi CR6, R10, 51 */
		/* 821D7250h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000033);
		/* 821D7250h case    0:*/		return 0x821D7254;
		  /* 821D7254h */ case    1:  		/* bc 4, CR6_EQ, 68 */
		/* 821D7254h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D7298;  }
		/* 821D7254h case    1:*/		return 0x821D7258;
		  /* 821D7258h */ case    2:  		/* cmplwi CR6, R9, 0 */
		/* 821D7258h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821D7258h case    2:*/		return 0x821D725C;
		  /* 821D725Ch */ case    3:  		/* bc 4, CR6_EQ, 60 */
		/* 821D725Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D7298;  }
		/* 821D725Ch case    3:*/		return 0x821D7260;
		  /* 821D7260h */ case    4:  		/* li R10, 0 */
		/* 821D7260h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D7260h case    4:*/		return 0x821D7264;
		  /* 821D7264h */ case    5:  		/* lwz R3, <#[R11 + 44]> */
		/* 821D7264h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D7264h case    5:*/		return 0x821D7268;
		  /* 821D7268h */ case    6:  		/* mr R9, R16 */
		/* 821D7268h case    6:*/		regs.R9 = regs.R16;
		/* 821D7268h case    6:*/		return 0x821D726C;
		  /* 821D726Ch */ case    7:  		/* li R8, 0 */
		/* 821D726Ch case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D726Ch case    7:*/		return 0x821D7270;
		  /* 821D7270h */ case    8:  		/* addi R7, R1, 452 */
		/* 821D7270h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1C4);
		/* 821D7270h case    8:*/		return 0x821D7274;
		  /* 821D7274h */ case    9:  		/* addi R6, R1, 828 */
		/* 821D7274h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x33C);
		/* 821D7274h case    9:*/		return 0x821D7278;
		  /* 821D7278h */ case   10:  		/* addi R5, R1, 656 */
		/* 821D7278h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x290);
		/* 821D7278h case   10:*/		return 0x821D727C;
		  /* 821D727Ch */ case   11:  		/* li R4, 0 */
		/* 821D727Ch case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D727Ch case   11:*/		return 0x821D7280;
		  /* 821D7280h */ case   12:  		/* bl 311888 */
		/* 821D7280h case   12:*/		regs.LR = 0x821D7284; return 0x822234D0;
		/* 821D7280h case   12:*/		return 0x821D7284;
		  /* 821D7284h */ case   13:  		/* lwz R7, <#[R1 + 452]> */
		/* 821D7284h case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000001C4) );
		/* 821D7284h case   13:*/		return 0x821D7288;
		  /* 821D7288h */ case   14:  		/* lwz R5, <#[R1 + 656]> */
		/* 821D7288h case   14:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000290) );
		/* 821D7288h case   14:*/		return 0x821D728C;
		  /* 821D728Ch */ case   15:  		/* lwz R11, <#[R1 + 828]> */
		/* 821D728Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000033C) );
		/* 821D728Ch case   15:*/		return 0x821D7290;
		  /* 821D7290h */ case   16:  		/* ori R6, R11, 228 */
		/* 821D7290h case   16:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R11,0xE4);
		/* 821D7290h case   16:*/		return 0x821D7294;
		  /* 821D7294h */ case   17:  		/* b 8424 */
		/* 821D7294h case   17:*/		return 0x821D937C;
		/* 821D7294h case   17:*/		return 0x821D7298;
	}
	return 0x821D7298;
} // Block from 821D7250h-821D7298h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821D7298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7298);
		  /* 821D7298h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821D7298h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D7298h case    0:*/		return 0x821D729C;
		  /* 821D729Ch */ case    1:  		/* lwz R10, <#[R31]> */
		/* 821D729Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821D729Ch case    1:*/		return 0x821D72A0;
		  /* 821D72A0h */ case    2:  		/* rlwinm R9, R10, 29, 28, 29 */
		/* 821D72A0h case    2:*/		cpu::op::rlwinm<0,29,28,29>(regs,&regs.R9,regs.R10);
		/* 821D72A0h case    2:*/		return 0x821D72A4;
		  /* 821D72A4h */ case    3:  		/* rlwinm R4, R10, 0, 27, 31 */
		/* 821D72A4h case    3:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R10);
		/* 821D72A4h case    3:*/		return 0x821D72A8;
		  /* 821D72A8h */ case    4:  		/* lhz R11, <#[R11 + 14]> */
		/* 821D72A8h case    4:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000E) );
		/* 821D72A8h case    4:*/		return 0x821D72AC;
		  /* 821D72ACh */ case    5:  		/* srw R11, R11, R9 */
		/* 821D72ACh case    5:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D72ACh case    5:*/		return 0x821D72B0;
		  /* 821D72B0h */ case    6:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821D72B0h case    6:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821D72B0h case    6:*/		return 0x821D72B4;
		  /* 821D72B4h */ case    7:  		/* bl -246324 */
		/* 821D72B4h case    7:*/		regs.LR = 0x821D72B8; return 0x8219B080;
		/* 821D72B4h case    7:*/		return 0x821D72B8;
		  /* 821D72B8h */ case    8:  		/* rlwinm R11, R3, 0, 30, 31 */
		/* 821D72B8h case    8:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R3);
		/* 821D72B8h case    8:*/		return 0x821D72BC;
		  /* 821D72BCh */ case    9:  		/* mr R31, R3 */
		/* 821D72BCh case    9:*/		regs.R31 = regs.R3;
		/* 821D72BCh case    9:*/		return 0x821D72C0;
		  /* 821D72C0h */ case   10:  		/* cmplwi CR6, R11, 3 */
		/* 821D72C0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821D72C0h case   10:*/		return 0x821D72C4;
		  /* 821D72C4h */ case   11:  		/* bc 4, CR6_EQ, 16 */
		/* 821D72C4h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821D72D4;  }
		/* 821D72C4h case   11:*/		return 0x821D72C8;
		  /* 821D72C8h */ case   12:  		/* li R4, 4001 */
		/* 821D72C8h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0xFA1);
		/* 821D72C8h case   12:*/		return 0x821D72CC;
		  /* 821D72CCh */ case   13:  		/* lwz R3, <#[R1 + 1908]> */
		/* 821D72CCh case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000774) );
		/* 821D72CCh case   13:*/		return 0x821D72D0;
		  /* 821D72D0h */ case   14:  		/* bl -546136 */
		/* 821D72D0h case   14:*/		regs.LR = 0x821D72D4; return 0x82151D78;
		/* 821D72D0h case   14:*/		return 0x821D72D4;
	}
	return 0x821D72D4;
} // Block from 821D7298h-821D72D4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821D72D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D72D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D72D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D72D4);
		  /* 821D72D4h */ case    0:  		/* andi. R6, R31, 11 */
		/* 821D72D4h case    0:*/		cpu::op::andi<1>(regs,&regs.R6,regs.R31,0xB);
		/* 821D72D4h case    0:*/		return 0x821D72D8;
		  /* 821D72D8h */ case    1:  		/* lwz R7, <#[R1 + 112]> */
		/* 821D72D8h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000070) );
		/* 821D72D8h case    1:*/		return 0x821D72DC;
		  /* 821D72DCh */ case    2:  		/* li R5, 0 */
		/* 821D72DCh case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D72DCh case    2:*/		return 0x821D72E0;
		  /* 821D72E0h */ case    3:  		/* lwz R3, <#[R1 + 1908]> */
		/* 821D72E0h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000774) );
		/* 821D72E0h case    3:*/		return 0x821D72E4;
		  /* 821D72E4h */ case    4:  		/* mr R4, R16 */
		/* 821D72E4h case    4:*/		regs.R4 = regs.R16;
		/* 821D72E4h case    4:*/		return 0x821D72E8;
		  /* 821D72E8h */ case    5:  		/* bl -34624 */
		/* 821D72E8h case    5:*/		regs.LR = 0x821D72EC; return 0x821CEBA8;
		/* 821D72E8h case    5:*/		return 0x821D72EC;
		  /* 821D72ECh */ case    6:  		/* b -1544 */
		/* 821D72ECh case    6:*/		return 0x821D6CE4;
		/* 821D72ECh case    6:*/		return 0x821D72F0;
	}
	return 0x821D72F0;
} // Block from 821D72D4h-821D72F0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D72F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D72F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D72F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D72F0);
		  /* 821D72F0h */ case    0:  		/* lwz R31, <#[R16 + 44]> */
		/* 821D72F0h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D72F0h case    0:*/		return 0x821D72F4;
		  /* 821D72F4h */ case    1:  		/* li R10, 0 */
		/* 821D72F4h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D72F4h case    1:*/		return 0x821D72F8;
		  /* 821D72F8h */ case    2:  		/* mr R9, R16 */
		/* 821D72F8h case    2:*/		regs.R9 = regs.R16;
		/* 821D72F8h case    2:*/		return 0x821D72FC;
		  /* 821D72FCh */ case    3:  		/* li R8, 0 */
		/* 821D72FCh case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D72FCh case    3:*/		return 0x821D7300;
		  /* 821D7300h */ case    4:  		/* addi R7, R1, 784 */
		/* 821D7300h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x310);
		/* 821D7300h case    4:*/		return 0x821D7304;
		  /* 821D7304h */ case    5:  		/* addi R6, R1, 1472 */
		/* 821D7304h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x5C0);
		/* 821D7304h case    5:*/		return 0x821D7308;
		  /* 821D7308h */ case    6:  		/* addi R5, R1, 664 */
		/* 821D7308h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x298);
		/* 821D7308h case    6:*/		return 0x821D730C;
		  /* 821D730Ch */ case    7:  		/* li R4, 0 */
		/* 821D730Ch case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D730Ch case    7:*/		return 0x821D7310;
		  /* 821D7310h */ case    8:  		/* mr R3, R31 */
		/* 821D7310h case    8:*/		regs.R3 = regs.R31;
		/* 821D7310h case    8:*/		return 0x821D7314;
		  /* 821D7314h */ case    9:  		/* bl 311740 */
		/* 821D7314h case    9:*/		regs.LR = 0x821D7318; return 0x822234D0;
		/* 821D7314h case    9:*/		return 0x821D7318;
		  /* 821D7318h */ case   10:  		/* lwz R11, <#[R1 + 664]> */
		/* 821D7318h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000298) );
		/* 821D7318h case   10:*/		return 0x821D731C;
		  /* 821D731Ch */ case   11:  		/* lwz R10, <#[R11 + 8]> */
		/* 821D731Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D731Ch case   11:*/		return 0x821D7320;
		  /* 821D7320h */ case   12:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821D7320h case   12:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821D7320h case   12:*/		return 0x821D7324;
		  /* 821D7324h */ case   13:  		/* cmplwi CR6, R10, 5888 */
		/* 821D7324h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00001700);
		/* 821D7324h case   13:*/		return 0x821D7328;
		  /* 821D7328h */ case   14:  		/* bc 4, CR6_EQ, 64 */
		/* 821D7328h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821D7368;  }
		/* 821D7328h case   14:*/		return 0x821D732C;
		  /* 821D732Ch */ case   15:  		/* lwz R10, <#[R1 + 784]> */
		/* 821D732Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000310) );
		/* 821D732Ch case   15:*/		return 0x821D7330;
		  /* 821D7330h */ case   16:  		/* cmplwi CR6, R10, 0 */
		/* 821D7330h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821D7330h case   16:*/		return 0x821D7334;
		  /* 821D7334h */ case   17:  		/* bc 4, CR6_EQ, 52 */
		/* 821D7334h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821D7368;  }
		/* 821D7334h case   17:*/		return 0x821D7338;
		  /* 821D7338h */ case   18:  		/* mr R9, R16 */
		/* 821D7338h case   18:*/		regs.R9 = regs.R16;
		/* 821D7338h case   18:*/		return 0x821D733C;
		  /* 821D733Ch */ case   19:  		/* lwz R3, <#[R11 + 44]> */
		/* 821D733Ch case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D733Ch case   19:*/		return 0x821D7340;
		  /* 821D7340h */ case   20:  		/* li R8, 0 */
		/* 821D7340h case   20:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D7340h case   20:*/		return 0x821D7344;
		  /* 821D7344h */ case   21:  		/* addi R7, R1, 672 */
		/* 821D7344h case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x2A0);
		/* 821D7344h case   21:*/		return 0x821D7348;
		  /* 821D7348h */ case   22:  		/* addi R6, R1, 680 */
		/* 821D7348h case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x2A8);
		/* 821D7348h case   22:*/		return 0x821D734C;
		  /* 821D734Ch */ case   23:  		/* addi R5, R1, 836 */
		/* 821D734Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x344);
		/* 821D734Ch case   23:*/		return 0x821D7350;
		  /* 821D7350h */ case   24:  		/* li R4, 0 */
		/* 821D7350h case   24:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D7350h case   24:*/		return 0x821D7354;
		  /* 821D7354h */ case   25:  		/* bl 311676 */
		/* 821D7354h case   25:*/		regs.LR = 0x821D7358; return 0x822234D0;
		/* 821D7354h case   25:*/		return 0x821D7358;
		  /* 821D7358h */ case   26:  		/* lwz R7, <#[R1 + 672]> */
		/* 821D7358h case   26:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000002A0) );
		/* 821D7358h case   26:*/		return 0x821D735C;
		  /* 821D735Ch */ case   27:  		/* lwz R5, <#[R1 + 836]> */
		/* 821D735Ch case   27:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000344) );
		/* 821D735Ch case   27:*/		return 0x821D7360;
		  /* 821D7360h */ case   28:  		/* lwz R11, <#[R1 + 680]> */
		/* 821D7360h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000002A8) );
		/* 821D7360h case   28:*/		return 0x821D7364;
		  /* 821D7364h */ case   29:  		/* b -212 */
		/* 821D7364h case   29:*/		return 0x821D7290;
		/* 821D7364h case   29:*/		return 0x821D7368;
	}
	return 0x821D7368;
} // Block from 821D72F0h-821D7368h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821D7368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7368);
		  /* 821D7368h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821D7368h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D7368h case    0:*/		return 0x821D736C;
		  /* 821D736Ch */ case    1:  		/* lwz R10, <#[R31]> */
		/* 821D736Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821D736Ch case    1:*/		return 0x821D7370;
		  /* 821D7370h */ case    2:  		/* rlwinm R9, R10, 29, 28, 29 */
		/* 821D7370h case    2:*/		cpu::op::rlwinm<0,29,28,29>(regs,&regs.R9,regs.R10);
		/* 821D7370h case    2:*/		return 0x821D7374;
		  /* 821D7374h */ case    3:  		/* rlwinm R4, R10, 0, 27, 31 */
		/* 821D7374h case    3:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R10);
		/* 821D7374h case    3:*/		return 0x821D7378;
		  /* 821D7378h */ case    4:  		/* lhz R11, <#[R11 + 14]> */
		/* 821D7378h case    4:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000E) );
		/* 821D7378h case    4:*/		return 0x821D737C;
		  /* 821D737Ch */ case    5:  		/* srw R11, R11, R9 */
		/* 821D737Ch case    5:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D737Ch case    5:*/		return 0x821D7380;
		  /* 821D7380h */ case    6:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821D7380h case    6:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821D7380h case    6:*/		return 0x821D7384;
		  /* 821D7384h */ case    7:  		/* bl -246532 */
		/* 821D7384h case    7:*/		regs.LR = 0x821D7388; return 0x8219B080;
		/* 821D7384h case    7:*/		return 0x821D7388;
		  /* 821D7388h */ case    8:  		/* rlwinm R11, R3, 0, 30, 31 */
		/* 821D7388h case    8:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R3);
		/* 821D7388h case    8:*/		return 0x821D738C;
		  /* 821D738Ch */ case    9:  		/* cmplwi CR6, R11, 3 */
		/* 821D738Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821D738Ch case    9:*/		return 0x821D7390;
		  /* 821D7390h */ case   10:  		/* bc 4, CR6_EQ, -1708 */
		/* 821D7390h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D7390h case   10:*/		return 0x821D7394;
		  /* 821D7394h */ case   11:  		/* lis R11, -128 */
		/* 821D7394h case   11:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFFFF80);
		/* 821D7394h case   11:*/		return 0x821D7398;
		  /* 821D7398h */ case   12:  		/* fmr FR4, FR29 */
		/* 821D7398h case   12:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR29);
		/* 821D7398h case   12:*/		return 0x821D739C;
		  /* 821D739Ch */ case   13:  		/* fmr FR3, FR29 */
		/* 821D739Ch case   13:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR29);
		/* 821D739Ch case   13:*/		return 0x821D73A0;
		  /* 821D73A0h */ case   14:  		/* stw R11, <#[R1 + 176]> */
		/* 821D73A0h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 821D73A0h case   14:*/		return 0x821D73A4;
		  /* 821D73A4h */ case   15:  		/* fmr FR2, FR29 */
		/* 821D73A4h case   15:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR29);
		/* 821D73A4h case   15:*/		return 0x821D73A8;
		  /* 821D73A8h */ case   16:  		/* lfs FR1, <#[R1 + 176]> */
		/* 821D73A8h case   16:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R1 + 0x000000B0) );
		/* 821D73A8h case   16:*/		return 0x821D73AC;
		  /* 821D73ACh */ case   17:  		/* lwz R31, <#[R1 + 1908]> */
		/* 821D73ACh case   17:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000774) );
		/* 821D73ACh case   17:*/		return 0x821D73B0;
		  /* 821D73B0h */ case   18:  		/* li R4, 1 */
		/* 821D73B0h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D73B0h case   18:*/		return 0x821D73B4;
		  /* 821D73B4h */ case   19:  		/* mr R3, R31 */
		/* 821D73B4h case   19:*/		regs.R3 = regs.R31;
		/* 821D73B4h case   19:*/		return 0x821D73B8;
		  /* 821D73B8h */ case   20:  		/* bl 341920 */
		/* 821D73B8h case   20:*/		regs.LR = 0x821D73BC; return 0x8222AB58;
		/* 821D73B8h case   20:*/		return 0x821D73BC;
		  /* 821D73BCh */ case   21:  		/* b -428 */
		/* 821D73BCh case   21:*/		return 0x821D7210;
		/* 821D73BCh case   21:*/		return 0x821D73C0;
	}
	return 0x821D73C0;
} // Block from 821D7368h-821D73C0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821D73C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D73C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D73C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D73C0);
		  /* 821D73C0h */ case    0:  		/* li R10, 0 */
		/* 821D73C0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D73C0h case    0:*/		return 0x821D73C4;
		  /* 821D73C4h */ case    1:  		/* lwz R3, <#[R16 + 44]> */
		/* 821D73C4h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D73C4h case    1:*/		return 0x821D73C8;
		  /* 821D73C8h */ case    2:  		/* mr R9, R16 */
		/* 821D73C8h case    2:*/		regs.R9 = regs.R16;
		/* 821D73C8h case    2:*/		return 0x821D73CC;
		  /* 821D73CCh */ case    3:  		/* li R8, 0 */
		/* 821D73CCh case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D73CCh case    3:*/		return 0x821D73D0;
		  /* 821D73D0h */ case    4:  		/* addi R7, R1, 792 */
		/* 821D73D0h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x318);
		/* 821D73D0h case    4:*/		return 0x821D73D4;
		  /* 821D73D4h */ case    5:  		/* addi R6, R1, 348 */
		/* 821D73D4h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x15C);
		/* 821D73D4h case    5:*/		return 0x821D73D8;
		  /* 821D73D8h */ case    6:  		/* addi R5, R1, 296 */
		/* 821D73D8h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x128);
		/* 821D73D8h case    6:*/		return 0x821D73DC;
		  /* 821D73DCh */ case    7:  		/* li R4, 0 */
		/* 821D73DCh case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D73DCh case    7:*/		return 0x821D73E0;
		  /* 821D73E0h */ case    8:  		/* bl 311536 */
		/* 821D73E0h case    8:*/		regs.LR = 0x821D73E4; return 0x822234D0;
		/* 821D73E0h case    8:*/		return 0x821D73E4;
		  /* 821D73E4h */ case    9:  		/* lwz R9, <#[R1 + 296]> */
		/* 821D73E4h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000128) );
		/* 821D73E4h case    9:*/		return 0x821D73E8;
		  /* 821D73E8h */ case   10:  		/* lwz R11, <#[R9 + 8]> */
		/* 821D73E8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000008) );
		/* 821D73E8h case   10:*/		return 0x821D73EC;
		  /* 821D73ECh */ case   11:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 821D73ECh case   11:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 821D73ECh case   11:*/		return 0x821D73F0;
		  /* 821D73F0h */ case   12:  		/* cmplwi CR6, R10, 47 */
		/* 821D73F0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000002F);
		/* 821D73F0h case   12:*/		return 0x821D73F4;
		  /* 821D73F4h */ case   13:  		/* bc 12, CR6_EQ, 16 */
		/* 821D73F4h case   13:*/		if ( regs.CR[6].eq ) { return 0x821D7404;  }
		/* 821D73F4h case   13:*/		return 0x821D73F8;
		  /* 821D73F8h */ case   14:  		/* cmplwi CR6, R10, 48 */
		/* 821D73F8h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000030);
		/* 821D73F8h case   14:*/		return 0x821D73FC;
		  /* 821D73FCh */ case   15:  		/* li R11, 0 */
		/* 821D73FCh case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D73FCh case   15:*/		return 0x821D7400;
		  /* 821D7400h */ case   16:  		/* bc 4, CR6_EQ, 8 */
		/* 821D7400h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821D7408;  }
		/* 821D7400h case   16:*/		return 0x821D7404;
	}
	return 0x821D7404;
} // Block from 821D73C0h-821D7404h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821D7404h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7404( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7404) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7404);
		  /* 821D7404h */ case    0:  		/* li R11, 1 */
		/* 821D7404h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D7404h case    0:*/		return 0x821D7408;
	}
	return 0x821D7408;
} // Block from 821D7404h-821D7408h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D7408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7408);
		  /* 821D7408h */ case    0:  		/* rlwinm. R8, R11, 0, 24, 31 */
		/* 821D7408h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R8,regs.R11);
		/* 821D7408h case    0:*/		return 0x821D740C;
		  /* 821D740Ch */ case    1:  		/* lwz R11, <#[R1 + 792]> */
		/* 821D740Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000318) );
		/* 821D740Ch case    1:*/		return 0x821D7410;
		  /* 821D7410h */ case    2:  		/* bc 12, CR0_EQ, 64 */
		/* 821D7410h case    2:*/		if ( regs.CR[0].eq ) { return 0x821D7450;  }
		/* 821D7410h case    2:*/		return 0x821D7414;
		  /* 821D7414h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821D7414h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D7414h case    3:*/		return 0x821D7418;
		  /* 821D7418h */ case    4:  		/* bc 4, CR6_EQ, 56 */
		/* 821D7418h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821D7450;  }
		/* 821D7418h case    4:*/		return 0x821D741C;
		  /* 821D741Ch */ case    5:  		/* lwz R3, <#[R9 + 44]> */
		/* 821D741Ch case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R9 + 0x0000002C) );
		/* 821D741Ch case    5:*/		return 0x821D7420;
		  /* 821D7420h */ case    6:  		/* li R10, 0 */
		/* 821D7420h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D7420h case    6:*/		return 0x821D7424;
		  /* 821D7424h */ case    7:  		/* mr R9, R16 */
		/* 821D7424h case    7:*/		regs.R9 = regs.R16;
		/* 821D7424h case    7:*/		return 0x821D7428;
		  /* 821D7428h */ case    8:  		/* li R8, 0 */
		/* 821D7428h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D7428h case    8:*/		return 0x821D742C;
		  /* 821D742Ch */ case    9:  		/* addi R7, R1, 688 */
		/* 821D742Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x2B0);
		/* 821D742Ch case    9:*/		return 0x821D7430;
		  /* 821D7430h */ case   10:  		/* addi R6, R1, 696 */
		/* 821D7430h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x2B8);
		/* 821D7430h case   10:*/		return 0x821D7434;
		  /* 821D7434h */ case   11:  		/* addi R5, R1, 844 */
		/* 821D7434h case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x34C);
		/* 821D7434h case   11:*/		return 0x821D7438;
		  /* 821D7438h */ case   12:  		/* li R4, 0 */
		/* 821D7438h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D7438h case   12:*/		return 0x821D743C;
		  /* 821D743Ch */ case   13:  		/* bl 311444 */
		/* 821D743Ch case   13:*/		regs.LR = 0x821D7440; return 0x822234D0;
		/* 821D743Ch case   13:*/		return 0x821D7440;
		  /* 821D7440h */ case   14:  		/* lwz R7, <#[R1 + 688]> */
		/* 821D7440h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000002B0) );
		/* 821D7440h case   14:*/		return 0x821D7444;
		  /* 821D7444h */ case   15:  		/* lwz R5, <#[R1 + 844]> */
		/* 821D7444h case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000034C) );
		/* 821D7444h case   15:*/		return 0x821D7448;
		  /* 821D7448h */ case   16:  		/* lwz R11, <#[R1 + 696]> */
		/* 821D7448h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000002B8) );
		/* 821D7448h case   16:*/		return 0x821D744C;
		  /* 821D744Ch */ case   17:  		/* b -444 */
		/* 821D744Ch case   17:*/		return 0x821D7290;
		/* 821D744Ch case   17:*/		return 0x821D7450;
	}
	return 0x821D7450;
} // Block from 821D7408h-821D7450h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821D7450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7450);
		  /* 821D7450h */ case    0:  		/* cmplwi CR6, R10, 2 */
		/* 821D7450h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000002);
		/* 821D7450h case    0:*/		return 0x821D7454;
		  /* 821D7454h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821D7454h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D7460;  }
		/* 821D7454h case    1:*/		return 0x821D7458;
		  /* 821D7458h */ case    2:  		/* cmplwi CR6, R10, 1 */
		/* 821D7458h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 821D7458h case    2:*/		return 0x821D745C;
		  /* 821D745Ch */ case    3:  		/* bc 4, CR6_EQ, -1912 */
		/* 821D745Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D745Ch case    3:*/		return 0x821D7460;
	}
	return 0x821D7460;
} // Block from 821D7450h-821D7460h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D7460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7460);
		  /* 821D7460h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821D7460h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D7460h case    0:*/		return 0x821D7464;
		  /* 821D7464h */ case    1:  		/* bc 4, CR6_EQ, -1920 */
		/* 821D7464h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D7464h case    1:*/		return 0x821D7468;
		  /* 821D7468h */ case    2:  		/* lwz R3, <#[R9 + 44]> */
		/* 821D7468h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R9 + 0x0000002C) );
		/* 821D7468h case    2:*/		return 0x821D746C;
		  /* 821D746Ch */ case    3:  		/* li R10, 0 */
		/* 821D746Ch case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D746Ch case    3:*/		return 0x821D7470;
		  /* 821D7470h */ case    4:  		/* mr R9, R16 */
		/* 821D7470h case    4:*/		regs.R9 = regs.R16;
		/* 821D7470h case    4:*/		return 0x821D7474;
		  /* 821D7474h */ case    5:  		/* lwz R4, <#[R1 + 348]> */
		/* 821D7474h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000015C) );
		/* 821D7474h case    5:*/		return 0x821D7478;
		  /* 821D7478h */ case    6:  		/* li R8, 0 */
		/* 821D7478h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D7478h case    6:*/		return 0x821D747C;
		  /* 821D747Ch */ case    7:  		/* addi R7, R1, 808 */
		/* 821D747Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x328);
		/* 821D747Ch case    7:*/		return 0x821D7480;
		  /* 821D7480h */ case    8:  		/* addi R6, R1, 528 */
		/* 821D7480h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x210);
		/* 821D7480h case    8:*/		return 0x821D7484;
		  /* 821D7484h */ case    9:  		/* addi R5, R1, 356 */
		/* 821D7484h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x164);
		/* 821D7484h case    9:*/		return 0x821D7488;
		  /* 821D7488h */ case   10:  		/* bl 311368 */
		/* 821D7488h case   10:*/		regs.LR = 0x821D748C; return 0x822234D0;
		/* 821D7488h case   10:*/		return 0x821D748C;
		  /* 821D748Ch */ case   11:  		/* lwz R11, <#[R1 + 296]> */
		/* 821D748Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000128) );
		/* 821D748Ch case   11:*/		return 0x821D7490;
		  /* 821D7490h */ case   12:  		/* li R10, 0 */
		/* 821D7490h case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D7490h case   12:*/		return 0x821D7494;
		  /* 821D7494h */ case   13:  		/* lwz R4, <#[R1 + 348]> */
		/* 821D7494h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000015C) );
		/* 821D7494h case   13:*/		return 0x821D7498;
		  /* 821D7498h */ case   14:  		/* mr R9, R16 */
		/* 821D7498h case   14:*/		regs.R9 = regs.R16;
		/* 821D7498h case   14:*/		return 0x821D749C;
		  /* 821D749Ch */ case   15:  		/* li R8, 0 */
		/* 821D749Ch case   15:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D749Ch case   15:*/		return 0x821D74A0;
		  /* 821D74A0h */ case   16:  		/* addi R7, R1, 704 */
		/* 821D74A0h case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x2C0);
		/* 821D74A0h case   16:*/		return 0x821D74A4;
		  /* 821D74A4h */ case   17:  		/* addi R6, R1, 852 */
		/* 821D74A4h case   17:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x354);
		/* 821D74A4h case   17:*/		return 0x821D74A8;
		  /* 821D74A8h */ case   18:  		/* lwz R3, <#[R11 + 48]> */
		/* 821D74A8h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000030) );
		/* 821D74A8h case   18:*/		return 0x821D74AC;
		  /* 821D74ACh */ case   19:  		/* addi R5, R1, 712 */
		/* 821D74ACh case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x2C8);
		/* 821D74ACh case   19:*/		return 0x821D74B0;
		  /* 821D74B0h */ case   20:  		/* bl 311328 */
		/* 821D74B0h case   20:*/		regs.LR = 0x821D74B4; return 0x822234D0;
		/* 821D74B0h case   20:*/		return 0x821D74B4;
		  /* 821D74B4h */ case   21:  		/* lwz R10, <#[R1 + 356]> */
		/* 821D74B4h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000164) );
		/* 821D74B4h case   21:*/		return 0x821D74B8;
		  /* 821D74B8h */ case   22:  		/* lwz R11, <#[R10 + 8]> */
		/* 821D74B8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821D74B8h case   22:*/		return 0x821D74BC;
		  /* 821D74BCh */ case   23:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D74BCh case   23:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D74BCh case   23:*/		return 0x821D74C0;
		  /* 821D74C0h */ case   24:  		/* cmplwi CR6, R11, 6144 */
		/* 821D74C0h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00001800);
		/* 821D74C0h case   24:*/		return 0x821D74C4;
		  /* 821D74C4h */ case   25:  		/* bc 4, CR6_EQ, -2016 */
		/* 821D74C4h case   25:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D74C4h case   25:*/		return 0x821D74C8;
		  /* 821D74C8h */ case   26:  		/* lwz R11, <#[R1 + 808]> */
		/* 821D74C8h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000328) );
		/* 821D74C8h case   26:*/		return 0x821D74CC;
		  /* 821D74CCh */ case   27:  		/* cmplwi CR6, R11, 0 */
		/* 821D74CCh case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D74CCh case   27:*/		return 0x821D74D0;
		  /* 821D74D0h */ case   28:  		/* bc 4, CR6_EQ, -2028 */
		/* 821D74D0h case   28:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D74D0h case   28:*/		return 0x821D74D4;
		  /* 821D74D4h */ case   29:  		/* lwz R11, <#[R1 + 296]> */
		/* 821D74D4h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000128) );
		/* 821D74D4h case   29:*/		return 0x821D74D8;
		  /* 821D74D8h */ case   30:  		/* lwz R5, <#[R1 + 704]> */
		/* 821D74D8h case   30:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000002C0) );
		/* 821D74D8h case   30:*/		return 0x821D74DC;
		  /* 821D74DCh */ case   31:  		/* lwz R4, <#[R1 + 852]> */
		/* 821D74DCh case   31:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000354) );
		/* 821D74DCh case   31:*/		return 0x821D74E0;
		  /* 821D74E0h */ case   32:  		/* lwz R3, <#[R1 + 712]> */
		/* 821D74E0h case   32:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000002C8) );
		/* 821D74E0h case   32:*/		return 0x821D74E4;
		  /* 821D74E4h */ case   33:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D74E4h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D74E4h case   33:*/		return 0x821D74E8;
		  /* 821D74E8h */ case   34:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D74E8h case   34:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D74E8h case   34:*/		return 0x821D74EC;
		  /* 821D74ECh */ case   35:  		/* cmplwi CR6, R11, 2 */
		/* 821D74ECh case   35:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 821D74ECh case   35:*/		return 0x821D74F0;
		  /* 821D74F0h */ case   36:  		/* bc 4, CR6_EQ, 20 */
		/* 821D74F0h case   36:*/		if ( !regs.CR[6].eq ) { return 0x821D7504;  }
		/* 821D74F0h case   36:*/		return 0x821D74F4;
		  /* 821D74F4h */ case   37:  		/* lwz R9, <#[R3 + 8]> */
		/* 821D74F4h case   37:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821D74F4h case   37:*/		return 0x821D74F8;
		  /* 821D74F8h */ case   38:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 821D74F8h case   38:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821D74F8h case   38:*/		return 0x821D74FC;
		  /* 821D74FCh */ case   39:  		/* cmplwi CR6, R9, 16000 */
		/* 821D74FCh case   39:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003E80);
		/* 821D74FCh case   39:*/		return 0x821D7500;
		  /* 821D7500h */ case   40:  		/* bc 12, CR6_EQ, 40 */
		/* 821D7500h case   40:*/		if ( regs.CR[6].eq ) { return 0x821D7528;  }
		/* 821D7500h case   40:*/		return 0x821D7504;
	}
	return 0x821D7504;
} // Block from 821D7460h-821D7504h (41 instructions)

//////////////////////////////////////////////////////
// Block at 821D7504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7504);
		  /* 821D7504h */ case    0:  		/* cmplwi CR6, R11, 1 */
		/* 821D7504h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821D7504h case    0:*/		return 0x821D7508;
		  /* 821D7508h */ case    1:  		/* bc 4, CR6_EQ, -2084 */
		/* 821D7508h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D7508h case    1:*/		return 0x821D750C;
		  /* 821D750Ch */ case    2:  		/* cmplw CR6, R10, R3 */
		/* 821D750Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R3);
		/* 821D750Ch case    2:*/		return 0x821D7510;
		  /* 821D7510h */ case    3:  		/* bc 4, CR6_EQ, -2092 */
		/* 821D7510h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D7510h case    3:*/		return 0x821D7514;
		  /* 821D7514h */ case    4:  		/* cmplwi CR6, R5, 0 */
		/* 821D7514h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821D7514h case    4:*/		return 0x821D7518;
		  /* 821D7518h */ case    5:  		/* bc 4, CR6_EQ, -2100 */
		/* 821D7518h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D7518h case    5:*/		return 0x821D751C;
		  /* 821D751Ch */ case    6:  		/* lwz R11, <#[R1 + 528]> */
		/* 821D751Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000210) );
		/* 821D751Ch case    6:*/		return 0x821D7520;
		  /* 821D7520h */ case    7:  		/* cmpw CR6, R11, R4 */
		/* 821D7520h case    7:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R4);
		/* 821D7520h case    7:*/		return 0x821D7524;
		  /* 821D7524h */ case    8:  		/* bc 4, CR6_EQ, -2112 */
		/* 821D7524h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D7524h case    8:*/		return 0x821D7528;
	}
	return 0x821D7528;
} // Block from 821D7504h-821D7528h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D7528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7528);
		  /* 821D7528h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D7528h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D7528h case    0:*/		return 0x821D752C;
		  /* 821D752Ch */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D752Ch case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D752Ch case    1:*/		return 0x821D7530;
		  /* 821D7530h */ case    2:  		/* cmplwi CR6, R11, 16000 */
		/* 821D7530h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D7530h case    2:*/		return 0x821D7534;
		  /* 821D7534h */ case    3:  		/* bc 4, CR6_EQ, 16 */
		/* 821D7534h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D7544;  }
		/* 821D7534h case    3:*/		return 0x821D7538;
		  /* 821D7538h */ case    4:  		/* bl 303464 */
		/* 821D7538h case    4:*/		regs.LR = 0x821D753C; return 0x822216A0;
		/* 821D7538h case    4:*/		return 0x821D753C;
		  /* 821D753Ch */ case    5:  		/* lwz R10, <#[R1 + 356]> */
		/* 821D753Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000164) );
		/* 821D753Ch case    5:*/		return 0x821D7540;
		  /* 821D7540h */ case    6:  		/* b 12 */
		/* 821D7540h case    6:*/		return 0x821D754C;
		/* 821D7540h case    6:*/		return 0x821D7544;
	}
	return 0x821D7544;
} // Block from 821D7528h-821D7544h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D7544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7544);
		  /* 821D7544h */ case    0:  		/* lis R11, -32255 */
		/* 821D7544h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821D7544h case    0:*/		return 0x821D7548;
		  /* 821D7548h */ case    1:  		/* lfd FR1, <#[R11 - 24504]> */
		/* 821D7548h case    1:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0xFFFFA048) );
		/* 821D7548h case    1:*/		return 0x821D754C;
	}
	return 0x821D754C;
} // Block from 821D7544h-821D754Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D754Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D754C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D754C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D754C);
		  /* 821D754Ch */ case    0:  		/* lis R11, -32256 */
		/* 821D754Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821D754Ch case    0:*/		return 0x821D7550;
		  /* 821D7550h */ case    1:  		/* lfd FR0, <#[R11 + 4736]> */
		/* 821D7550h case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00001280) );
		/* 821D7550h case    1:*/		return 0x821D7554;
		  /* 821D7554h */ case    2:  		/* fcmpu CR6, FR1, FR0 */
		/* 821D7554h case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 821D7554h case    2:*/		return 0x821D7558;
		  /* 821D7558h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 821D7558h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D7564;  }
		/* 821D7558h case    3:*/		return 0x821D755C;
		  /* 821D755Ch */ case    4:  		/* lwz R6, <#[R10 + 44]> */
		/* 821D755Ch case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x0000002C) );
		/* 821D755Ch case    4:*/		return 0x821D7560;
		  /* 821D7560h */ case    5:  		/* b -868 */
		/* 821D7560h case    5:*/		return 0x821D71FC;
		/* 821D7560h case    5:*/		return 0x821D7564;
	}
	return 0x821D7564;
} // Block from 821D754Ch-821D7564h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D7564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7564);
		  /* 821D7564h */ case    0:  		/* lis R11, -32255 */
		/* 821D7564h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821D7564h case    0:*/		return 0x821D7568;
		  /* 821D7568h */ case    1:  		/* lfd FR0, <#[R11 + 8640]> */
		/* 821D7568h case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x000021C0) );
		/* 821D7568h case    1:*/		return 0x821D756C;
		  /* 821D756Ch */ case    2:  		/* fcmpu CR6, FR1, FR0 */
		/* 821D756Ch case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 821D756Ch case    2:*/		return 0x821D7570;
		  /* 821D7570h */ case    3:  		/* bc 4, CR6_EQ, 52 */
		/* 821D7570h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D75A4;  }
		/* 821D7570h case    3:*/		return 0x821D7574;
		  /* 821D7574h */ case    4:  		/* lwz R31, <#[R1 + 1908]> */
		/* 821D7574h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000774) );
		/* 821D7574h case    4:*/		return 0x821D7578;
		  /* 821D7578h */ case    5:  		/* mr R5, R16 */
		/* 821D7578h case    5:*/		regs.R5 = regs.R16;
		/* 821D7578h case    5:*/		return 0x821D757C;
		  /* 821D757Ch */ case    6:  		/* li R4, 0 */
		/* 821D757Ch case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D757Ch case    6:*/		return 0x821D7580;
		  /* 821D7580h */ case    7:  		/* lwz R6, <#[R10 + 44]> */
		/* 821D7580h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x0000002C) );
		/* 821D7580h case    7:*/		return 0x821D7584;
		  /* 821D7584h */ case    8:  		/* mr R3, R31 */
		/* 821D7584h case    8:*/		regs.R3 = regs.R31;
		/* 821D7584h case    8:*/		return 0x821D7588;
		  /* 821D7588h */ case    9:  		/* bl -88304 */
		/* 821D7588h case    9:*/		regs.LR = 0x821D758C; return 0x821C1C98;
		/* 821D7588h case    9:*/		return 0x821D758C;
		  /* 821D758Ch */ case   10:  		/* mr R6, R3 */
		/* 821D758Ch case   10:*/		regs.R6 = regs.R3;
		/* 821D758Ch case   10:*/		return 0x821D7590;
		  /* 821D7590h */ case   11:  		/* mr R3, R31 */
		/* 821D7590h case   11:*/		regs.R3 = regs.R31;
		/* 821D7590h case   11:*/		return 0x821D7594;
		  /* 821D7594h */ case   12:  		/* mr R5, R16 */
		/* 821D7594h case   12:*/		regs.R5 = regs.R16;
		/* 821D7594h case   12:*/		return 0x821D7598;
		  /* 821D7598h */ case   13:  		/* li R4, 0 */
		/* 821D7598h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D7598h case   13:*/		return 0x821D759C;
		  /* 821D759Ch */ case   14:  		/* bl -86964 */
		/* 821D759Ch case   14:*/		regs.LR = 0x821D75A0; return 0x821C21E8;
		/* 821D759Ch case   14:*/		return 0x821D75A0;
		  /* 821D75A0h */ case   15:  		/* b -912 */
		/* 821D75A0h case   15:*/		return 0x821D7210;
		/* 821D75A0h case   15:*/		return 0x821D75A4;
	}
	return 0x821D75A4;
} // Block from 821D7564h-821D75A4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821D75A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D75A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D75A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D75A4);
		  /* 821D75A4h */ case    0:  		/* fctiwz FR0, FR1 */
		/* 821D75A4h case    0:*/		cpu::op::fctiwz<0>(regs,&regs.FR0,regs.FR1);
		/* 821D75A4h case    0:*/		return 0x821D75A8;
		  /* 821D75A8h */ case    1:  		/* stfd FR0, <#[R1 + 176]> */
		/* 821D75A8h case    1:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x000000B0) );
		/* 821D75A8h case    1:*/		return 0x821D75AC;
		  /* 821D75ACh */ case    2:  		/* lwz R26, <#[R1 + 180]> */
		/* 821D75ACh case    2:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000B4) );
		/* 821D75ACh case    2:*/		return 0x821D75B0;
		  /* 821D75B0h */ case    3:  		/* extsw R11, R26 */
		/* 821D75B0h case    3:*/		cpu::op::extsw<0>(regs,&regs.R11,regs.R26);
		/* 821D75B0h case    3:*/		return 0x821D75B4;
		  /* 821D75B4h */ case    4:  		/* std R11, <#[R1 + 176]> */
		/* 821D75B4h case    4:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 821D75B4h case    4:*/		return 0x821D75B8;
		  /* 821D75B8h */ case    5:  		/* lfd FR0, <#[R1 + 176]> */
		/* 821D75B8h case    5:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000000B0) );
		/* 821D75B8h case    5:*/		return 0x821D75BC;
		  /* 821D75BCh */ case    6:  		/* fcfid FR0, FR0 */
		/* 821D75BCh case    6:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 821D75BCh case    6:*/		return 0x821D75C0;
		  /* 821D75C0h */ case    7:  		/* fcmpu CR6, FR0, FR1 */
		/* 821D75C0h case    7:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR1);
		/* 821D75C0h case    7:*/		return 0x821D75C4;
		  /* 821D75C4h */ case    8:  		/* bc 4, CR6_EQ, -2272 */
		/* 821D75C4h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D75C4h case    8:*/		return 0x821D75C8;
		  /* 821D75C8h */ case    9:  		/* cmpwi CR6, R26, 8 */
		/* 821D75C8h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000008);
		/* 821D75C8h case    9:*/		return 0x821D75CC;
		  /* 821D75CCh */ case   10:  		/* bc 12, CR6_EQ, 20 */
		/* 821D75CCh case   10:*/		if ( regs.CR[6].eq ) { return 0x821D75E0;  }
		/* 821D75CCh case   10:*/		return 0x821D75D0;
		  /* 821D75D0h */ case   11:  		/* cmpwi CR6, R26, 6 */
		/* 821D75D0h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000006);
		/* 821D75D0h case   11:*/		return 0x821D75D4;
		  /* 821D75D4h */ case   12:  		/* bc 12, CR6_GT, -2288 */
		/* 821D75D4h case   12:*/		if ( regs.CR[6].gt ) { return 0x821D6CE4;  }
		/* 821D75D4h case   12:*/		return 0x821D75D8;
		  /* 821D75D8h */ case   13:  		/* cmpwi CR6, R26, -4 */
		/* 821D75D8h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R26,0xFFFFFFFC);
		/* 821D75D8h case   13:*/		return 0x821D75DC;
		  /* 821D75DCh */ case   14:  		/* bc 12, CR6_LT, -2296 */
		/* 821D75DCh case   14:*/		if ( regs.CR[6].lt ) { return 0x821D6CE4;  }
		/* 821D75DCh case   14:*/		return 0x821D75E0;
	}
	return 0x821D75E0;
} // Block from 821D75A4h-821D75E0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821D75E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D75E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D75E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D75E0);
		  /* 821D75E0h */ case    0:  		/* cmpwi CR6, R26, -1 */
		/* 821D75E0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0xFFFFFFFF);
		/* 821D75E0h case    0:*/		return 0x821D75E4;
		  /* 821D75E4h */ case    1:  		/* bc 12, CR6_LT, 12 */
		/* 821D75E4h case    1:*/		if ( regs.CR[6].lt ) { return 0x821D75F0;  }
		/* 821D75E4h case    1:*/		return 0x821D75E8;
		  /* 821D75E8h */ case    2:  		/* cmpwi CR6, R26, 1 */
		/* 821D75E8h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000001);
		/* 821D75E8h case    2:*/		return 0x821D75EC;
		  /* 821D75ECh */ case    3:  		/* bc 4, CR6_GT, -2312 */
		/* 821D75ECh case    3:*/		if ( !regs.CR[6].gt ) { return 0x821D6CE4;  }
		/* 821D75ECh case    3:*/		return 0x821D75F0;
	}
	return 0x821D75F0;
} // Block from 821D75E0h-821D75F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D75F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D75F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D75F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D75F0);
		  /* 821D75F0h */ case    0:  		/* mr R27, R26 */
		/* 821D75F0h case    0:*/		regs.R27 = regs.R26;
		/* 821D75F0h case    0:*/		return 0x821D75F4;
		  /* 821D75F4h */ case    1:  		/* cmpwi CR6, R26, 0 */
		/* 821D75F4h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 821D75F4h case    1:*/		return 0x821D75F8;
		  /* 821D75F8h */ case    2:  		/* bc 4, CR6_LT, 8 */
		/* 821D75F8h case    2:*/		if ( !regs.CR[6].lt ) { return 0x821D7600;  }
		/* 821D75F8h case    2:*/		return 0x821D75FC;
		  /* 821D75FCh */ case    3:  		/* neg R27, R26 */
		/* 821D75FCh case    3:*/		cpu::op::neg<0>(regs,&regs.R27,regs.R26);
		/* 821D75FCh case    3:*/		return 0x821D7600;
	}
	return 0x821D7600;
} // Block from 821D75F0h-821D7600h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D7600h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7600( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7600) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7600);
		  /* 821D7600h */ case    0:  		/* cntlzw R11, R27 */
		/* 821D7600h case    0:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R27);
		/* 821D7600h case    0:*/		return 0x821D7604;
		  /* 821D7604h */ case    1:  		/* lwz R10, <#[R10 + 44]> */
		/* 821D7604h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000002C) );
		/* 821D7604h case    1:*/		return 0x821D7608;
		  /* 821D7608h */ case    2:  		/* li R9, 1 */
		/* 821D7608h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821D7608h case    2:*/		return 0x821D760C;
		  /* 821D760Ch */ case    3:  		/* lwz R25, <#[R1 + 1908]> */
		/* 821D760Ch case    3:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000774) );
		/* 821D760Ch case    3:*/		return 0x821D7610;
		  /* 821D7610h */ case    4:  		/* addi R11, R11, 1 */
		/* 821D7610h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821D7610h case    4:*/		return 0x821D7614;
		  /* 821D7614h */ case    5:  		/* subfic R11, R11, 32 */
		/* 821D7614h case    5:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x20);
		/* 821D7614h case    5:*/		return 0x821D7618;
		  /* 821D7618h */ case    6:  		/* stw R10, <#[R1 + 304]> */
		/* 821D7618h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000130) );
		/* 821D7618h case    6:*/		return 0x821D761C;
		  /* 821D761Ch */ case    7:  		/* rlwnm R28, R9, R11, 0, 31 */
		/* 821D761Ch case    7:*/		cpu::op::rlwnm<0,0,31>(regs,&regs.R28,regs.R9,regs.R11);
		/* 821D761Ch case    7:*/		return 0x821D7620;
		  /* 821D7620h */ case    8:  		/* cntlzw R11, R28 */
		/* 821D7620h case    8:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R28);
		/* 821D7620h case    8:*/		return 0x821D7624;
		  /* 821D7624h */ case    9:  		/* subfic R31, R11, 31 */
		/* 821D7624h case    9:*/		cpu::op::subfic<0>(regs,&regs.R31,regs.R11,0x1F);
		/* 821D7624h case    9:*/		return 0x821D7628;
		  /* 821D7628h */ case   10:  		/* cmplwi CR6, R31, 1 */
		/* 821D7628h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000001);
		/* 821D7628h case   10:*/		return 0x821D762C;
		  /* 821D762Ch */ case   11:  		/* bc 4, CR6_GT, 60 */
		/* 821D762Ch case   11:*/		if ( !regs.CR[6].gt ) { return 0x821D7668;  }
		/* 821D762Ch case   11:*/		return 0x821D7630;
		  /* 821D7630h */ case   12:  		/* addi R29, R1, 304 */
		/* 821D7630h case   12:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R1,0x130);
		/* 821D7630h case   12:*/		return 0x821D7634;
		  /* 821D7634h */ case   13:  		/* addi R30, R31, -1 */
		/* 821D7634h case   13:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0xFFFFFFFF);
		/* 821D7634h case   13:*/		return 0x821D7638;
		  /* 821D7638h */ case   14:  		/* lwz R6, <#[R29]> */
		/* 821D7638h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x00000000) );
		/* 821D7638h case   14:*/		return 0x821D763C;
		  /* 821D763Ch */ case   15:  		/* mr R5, R16 */
		/* 821D763Ch case   15:*/		regs.R5 = regs.R16;
		/* 821D763Ch case   15:*/		return 0x821D7640;
		  /* 821D7640h */ case   16:  		/* li R4, 0 */
		/* 821D7640h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D7640h case   16:*/		return 0x821D7644;
		  /* 821D7644h */ case   17:  		/* mr R7, R6 */
		/* 821D7644h case   17:*/		regs.R7 = regs.R6;
		/* 821D7644h case   17:*/		return 0x821D7648;
		  /* 821D7648h */ case   18:  		/* mr R3, R25 */
		/* 821D7648h case   18:*/		regs.R3 = regs.R25;
		/* 821D7648h case   18:*/		return 0x821D764C;
		  /* 821D764Ch */ case   19:  		/* bl -91452 */
		/* 821D764Ch case   19:*/		regs.LR = 0x821D7650; return 0x821C1110;
		/* 821D764Ch case   19:*/		return 0x821D7650;
		  /* 821D7650h */ case   20:  		/* mr R4, R3 */
		/* 821D7650h case   20:*/		regs.R4 = regs.R3;
		/* 821D7650h case   20:*/		return 0x821D7654;
		  /* 821D7654h */ case   21:  		/* mr R3, R25 */
		/* 821D7654h case   21:*/		regs.R3 = regs.R25;
		/* 821D7654h case   21:*/		return 0x821D7658;
		  /* 821D7658h */ case   22:  		/* bl -390744 */
		/* 821D7658h case   22:*/		regs.LR = 0x821D765C; return 0x82178000;
		/* 821D7658h case   22:*/		return 0x821D765C;
		  /* 821D765Ch */ case   23:  		/* addic. R30, R30, -1 */
		/* 821D765Ch case   23:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 821D765Ch case   23:*/		return 0x821D7660;
		  /* 821D7660h */ case   24:  		/* stwu R3, <#[R29 + 4]> */
		/* 821D7660h case   24:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 821D7660h case   24:*/		return 0x821D7664;
		  /* 821D7664h */ case   25:  		/* bc 4, CR0_EQ, -44 */
		/* 821D7664h case   25:*/		if ( !regs.CR[0].eq ) { return 0x821D7638;  }
		/* 821D7664h case   25:*/		return 0x821D7668;
	}
	return 0x821D7668;
} // Block from 821D7600h-821D7668h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821D7668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7668);
		  /* 821D7668h */ case    0:  		/* rlwinm R10, R31, 2, 0, 29 */
		/* 821D7668h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R31);
		/* 821D7668h case    0:*/		return 0x821D766C;
		  /* 821D766Ch */ case    1:  		/* addi R11, R1, 304 */
		/* 821D766Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x130);
		/* 821D766Ch case    1:*/		return 0x821D7670;
		  /* 821D7670h */ case    2:  		/* mr R5, R16 */
		/* 821D7670h case    2:*/		regs.R5 = regs.R16;
		/* 821D7670h case    2:*/		return 0x821D7674;
		  /* 821D7674h */ case    3:  		/* add R11, R10, R11 */
		/* 821D7674h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D7674h case    3:*/		return 0x821D7678;
		  /* 821D7678h */ case    4:  		/* li R4, 0 */
		/* 821D7678h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D7678h case    4:*/		return 0x821D767C;
		  /* 821D767Ch */ case    5:  		/* mr R3, R25 */
		/* 821D767Ch case    5:*/		regs.R3 = regs.R25;
		/* 821D767Ch case    5:*/		return 0x821D7680;
		  /* 821D7680h */ case    6:  		/* lwz R6, <#[R11 - 4]> */
		/* 821D7680h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821D7680h case    6:*/		return 0x821D7684;
		  /* 821D7684h */ case    7:  		/* mr R7, R6 */
		/* 821D7684h case    7:*/		regs.R7 = regs.R6;
		/* 821D7684h case    7:*/		return 0x821D7688;
		  /* 821D7688h */ case    8:  		/* bl -91512 */
		/* 821D7688h case    8:*/		regs.LR = 0x821D768C; return 0x821C1110;
		/* 821D7688h case    8:*/		return 0x821D768C;
		  /* 821D768Ch */ case    9:  		/* subf R31, R28, R27 */
		/* 821D768Ch case    9:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R28,regs.R27);
		/* 821D768Ch case    9:*/		return 0x821D7690;
		  /* 821D7690h */ case   10:  		/* cmplwi CR6, R31, 0 */
		/* 821D7690h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D7690h case   10:*/		return 0x821D7694;
		  /* 821D7694h */ case   11:  		/* bc 12, CR6_EQ, 68 */
		/* 821D7694h case   11:*/		if ( regs.CR[6].eq ) { return 0x821D76D8;  }
		/* 821D7694h case   11:*/		return 0x821D7698;
		  /* 821D7698h */ case   12:  		/* addi R11, R31, -1 */
		/* 821D7698h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFF);
		/* 821D7698h case   12:*/		return 0x821D769C;
		  /* 821D769Ch */ case   13:  		/* addi R10, R1, 304 */
		/* 821D769Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x130);
		/* 821D769Ch case   13:*/		return 0x821D76A0;
		  /* 821D76A0h */ case   14:  		/* andc R11, R31, R11 */
		/* 821D76A0h case   14:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821D76A0h case   14:*/		return 0x821D76A4;
		  /* 821D76A4h */ case   15:  		/* mr R6, R3 */
		/* 821D76A4h case   15:*/		regs.R6 = regs.R3;
		/* 821D76A4h case   15:*/		return 0x821D76A8;
		  /* 821D76A8h */ case   16:  		/* cntlzw R11, R11 */
		/* 821D76A8h case   16:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821D76A8h case   16:*/		return 0x821D76AC;
		  /* 821D76ACh */ case   17:  		/* mr R5, R16 */
		/* 821D76ACh case   17:*/		regs.R5 = regs.R16;
		/* 821D76ACh case   17:*/		return 0x821D76B0;
		  /* 821D76B0h */ case   18:  		/* subfic R11, R11, 31 */
		/* 821D76B0h case   18:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 821D76B0h case   18:*/		return 0x821D76B4;
		  /* 821D76B4h */ case   19:  		/* li R4, 0 */
		/* 821D76B4h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D76B4h case   19:*/		return 0x821D76B8;
		  /* 821D76B8h */ case   20:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821D76B8h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821D76B8h case   20:*/		return 0x821D76BC;
		  /* 821D76BCh */ case   21:  		/* mr R3, R25 */
		/* 821D76BCh case   21:*/		regs.R3 = regs.R25;
		/* 821D76BCh case   21:*/		return 0x821D76C0;
		  /* 821D76C0h */ case   22:  		/* lwzx R7, <#[R11 + R10]> */
		/* 821D76C0h case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821D76C0h case   22:*/		return 0x821D76C4;
		  /* 821D76C4h */ case   23:  		/* bl -88124 */
		/* 821D76C4h case   23:*/		regs.LR = 0x821D76C8; return 0x821C1E88;
		/* 821D76C4h case   23:*/		return 0x821D76C8;
		  /* 821D76C8h */ case   24:  		/* addi R11, R31, -1 */
		/* 821D76C8h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFF);
		/* 821D76C8h case   24:*/		return 0x821D76CC;
		  /* 821D76CCh */ case   25:  		/* andc R11, R31, R11 */
		/* 821D76CCh case   25:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821D76CCh case   25:*/		return 0x821D76D0;
		  /* 821D76D0h */ case   26:  		/* subf R31, R11, R31 */
		/* 821D76D0h case   26:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 821D76D0h case   26:*/		return 0x821D76D4;
		  /* 821D76D4h */ case   27:  		/* b -68 */
		/* 821D76D4h case   27:*/		return 0x821D7690;
		/* 821D76D4h case   27:*/		return 0x821D76D8;
	}
	return 0x821D76D8;
} // Block from 821D7668h-821D76D8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821D76D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D76D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D76D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D76D8);
		  /* 821D76D8h */ case    0:  		/* cmpwi CR6, R26, 0 */
		/* 821D76D8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R26,0x00000000);
		/* 821D76D8h case    0:*/		return 0x821D76DC;
		  /* 821D76DCh */ case    1:  		/* bc 4, CR6_LT, 24 */
		/* 821D76DCh case    1:*/		if ( !regs.CR[6].lt ) { return 0x821D76F4;  }
		/* 821D76DCh case    1:*/		return 0x821D76E0;
		  /* 821D76E0h */ case    2:  		/* mr R6, R3 */
		/* 821D76E0h case    2:*/		regs.R6 = regs.R3;
		/* 821D76E0h case    2:*/		return 0x821D76E4;
		  /* 821D76E4h */ case    3:  		/* mr R5, R16 */
		/* 821D76E4h case    3:*/		regs.R5 = regs.R16;
		/* 821D76E4h case    3:*/		return 0x821D76E8;
		  /* 821D76E8h */ case    4:  		/* li R4, 0 */
		/* 821D76E8h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D76E8h case    4:*/		return 0x821D76EC;
		  /* 821D76ECh */ case    5:  		/* mr R3, R25 */
		/* 821D76ECh case    5:*/		regs.R3 = regs.R25;
		/* 821D76ECh case    5:*/		return 0x821D76F0;
		  /* 821D76F0h */ case    6:  		/* bl -87424 */
		/* 821D76F0h case    6:*/		regs.LR = 0x821D76F4; return 0x821C2170;
		/* 821D76F0h case    6:*/		return 0x821D76F4;
	}
	return 0x821D76F4;
} // Block from 821D76D8h-821D76F4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D76F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D76F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D76F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D76F4);
		  /* 821D76F4h */ case    0:  		/* mr R5, R3 */
		/* 821D76F4h case    0:*/		regs.R5 = regs.R3;
		/* 821D76F4h case    0:*/		return 0x821D76F8;
		  /* 821D76F8h */ case    1:  		/* li R7, 0 */
		/* 821D76F8h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821D76F8h case    1:*/		return 0x821D76FC;
		  /* 821D76FCh */ case    2:  		/* li R6, 228 */
		/* 821D76FCh case    2:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821D76FCh case    2:*/		return 0x821D7700;
		  /* 821D7700h */ case    3:  		/* mr R3, R25 */
		/* 821D7700h case    3:*/		regs.R3 = regs.R25;
		/* 821D7700h case    3:*/		return 0x821D7704;
		  /* 821D7704h */ case    4:  		/* b 7292 */
		/* 821D7704h case    4:*/		return 0x821D9380;
		/* 821D7704h case    4:*/		return 0x821D7708;
	}
	return 0x821D7708;
} // Block from 821D76F4h-821D7708h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D7708h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7708( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7708) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7708);
		  /* 821D7708h */ case    0:  		/* lwz R11, <#[R16 + 44]> */
		/* 821D7708h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D7708h case    0:*/		return 0x821D770C;
		  /* 821D770Ch */ case    1:  		/* lwz R30, <#[R11]> */
		/* 821D770Ch case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 821D770Ch case    1:*/		return 0x821D7710;
		  /* 821D7710h */ case    2:  		/* lwz R31, <#[R11 + 12]> */
		/* 821D7710h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D7710h case    2:*/		return 0x821D7714;
		  /* 821D7714h */ case    3:  		/* andi. R11, R30, 29 */
		/* 821D7714h case    3:*/		cpu::op::andi<1>(regs,&regs.R11,regs.R30,0x1D);
		/* 821D7714h case    3:*/		return 0x821D7718;
		  /* 821D7718h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821D7718h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821D7718h case    4:*/		return 0x821D771C;
		  /* 821D771Ch */ case    5:  		/* bc 4, CR0_EQ, -2616 */
		/* 821D771Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D771Ch case    5:*/		return 0x821D7720;
		  /* 821D7720h */ case    6:  		/* lwz R29, <#[R1 + 1908]> */
		/* 821D7720h case    6:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000774) );
		/* 821D7720h case    6:*/		return 0x821D7724;
		  /* 821D7724h */ case    7:  		/* mr R4, R31 */
		/* 821D7724h case    7:*/		regs.R4 = regs.R31;
		/* 821D7724h case    7:*/		return 0x821D7728;
		  /* 821D7728h */ case    8:  		/* mr R3, R29 */
		/* 821D7728h case    8:*/		regs.R3 = regs.R29;
		/* 821D7728h case    8:*/		return 0x821D772C;
		  /* 821D772Ch */ case    9:  		/* bl -104460 */
		/* 821D772Ch case    9:*/		regs.LR = 0x821D7730; return 0x821BDF20;
		/* 821D772Ch case    9:*/		return 0x821D7730;
		  /* 821D7730h */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D7730h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D7730h case   10:*/		return 0x821D7734;
		  /* 821D7734h */ case   11:  		/* bc 12, CR0_EQ, -2640 */
		/* 821D7734h case   11:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D7734h case   11:*/		return 0x821D7738;
		  /* 821D7738h */ case   12:  		/* rlwinm R5, R30, 27, 30, 31 */
		/* 821D7738h case   12:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R5,regs.R30);
		/* 821D7738h case   12:*/		return 0x821D773C;
		  /* 821D773Ch */ case   13:  		/* mr R4, R31 */
		/* 821D773Ch case   13:*/		regs.R4 = regs.R31;
		/* 821D773Ch case   13:*/		return 0x821D7740;
		  /* 821D7740h */ case   14:  		/* mr R3, R29 */
		/* 821D7740h case   14:*/		regs.R3 = regs.R29;
		/* 821D7740h case   14:*/		return 0x821D7744;
		  /* 821D7744h */ case   15:  		/* bl -390708 */
		/* 821D7744h case   15:*/		regs.LR = 0x821D7748; return 0x82178110;
		/* 821D7744h case   15:*/		return 0x821D7748;
		  /* 821D7748h */ case   16:  		/* mr R6, R3 */
		/* 821D7748h case   16:*/		regs.R6 = regs.R3;
		/* 821D7748h case   16:*/		return 0x821D774C;
		  /* 821D774Ch */ case   17:  		/* mr R5, R16 */
		/* 821D774Ch case   17:*/		regs.R5 = regs.R16;
		/* 821D774Ch case   17:*/		return 0x821D7750;
		  /* 821D7750h */ case   18:  		/* li R4, 0 */
		/* 821D7750h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D7750h case   18:*/		return 0x821D7754;
		  /* 821D7754h */ case   19:  		/* mr R3, R29 */
		/* 821D7754h case   19:*/		regs.R3 = regs.R29;
		/* 821D7754h case   19:*/		return 0x821D7758;
		  /* 821D7758h */ case   20:  		/* bl -89344 */
		/* 821D7758h case   20:*/		regs.LR = 0x821D775C; return 0x821C1A58;
		/* 821D7758h case   20:*/		return 0x821D775C;
		  /* 821D775Ch */ case   21:  		/* mr R5, R3 */
		/* 821D775Ch case   21:*/		regs.R5 = regs.R3;
		/* 821D775Ch case   21:*/		return 0x821D7760;
		  /* 821D7760h */ case   22:  		/* li R6, 228 */
		/* 821D7760h case   22:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821D7760h case   22:*/		return 0x821D7764;
		  /* 821D7764h */ case   23:  		/* li R7, 0 */
		/* 821D7764h case   23:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821D7764h case   23:*/		return 0x821D7768;
		  /* 821D7768h */ case   24:  		/* mr R3, R29 */
		/* 821D7768h case   24:*/		regs.R3 = regs.R29;
		/* 821D7768h case   24:*/		return 0x821D776C;
		  /* 821D776Ch */ case   25:  		/* b 7188 */
		/* 821D776Ch case   25:*/		return 0x821D9380;
		/* 821D776Ch case   25:*/		return 0x821D7770;
	}
	return 0x821D7770;
} // Block from 821D7708h-821D7770h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821D7770h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7770( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7770) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7770);
		  /* 821D7770h */ case    0:  		/* cmpwi CR6, R11, 62 */
		/* 821D7770h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003E);
		/* 821D7770h case    0:*/		return 0x821D7774;
		  /* 821D7774h */ case    1:  		/* bc 12, CR6_EQ, 820 */
		/* 821D7774h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D7AA8;  }
		/* 821D7774h case    1:*/		return 0x821D7778;
		  /* 821D7778h */ case    2:  		/* cmpwi CR6, R11, 72 */
		/* 821D7778h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000048);
		/* 821D7778h case    2:*/		return 0x821D777C;
		  /* 821D777Ch */ case    3:  		/* bc 12, CR6_EQ, 744 */
		/* 821D777Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821D7A64;  }
		/* 821D777Ch case    3:*/		return 0x821D7780;
		  /* 821D7780h */ case    4:  		/* cmpwi CR6, R11, 79 */
		/* 821D7780h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000004F);
		/* 821D7780h case    4:*/		return 0x821D7784;
		  /* 821D7784h */ case    5:  		/* bc 4, CR6_GT, -2720 */
		/* 821D7784h case    5:*/		if ( !regs.CR[6].gt ) { return 0x821D6CE4;  }
		/* 821D7784h case    5:*/		return 0x821D7788;
		  /* 821D7788h */ case    6:  		/* cmpwi CR6, R11, 81 */
		/* 821D7788h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000051);
		/* 821D7788h case    6:*/		return 0x821D778C;
		  /* 821D778Ch */ case    7:  		/* bc 12, CR6_GT, -2728 */
		/* 821D778Ch case    7:*/		if ( regs.CR[6].gt ) { return 0x821D6CE4;  }
		/* 821D778Ch case    7:*/		return 0x821D7790;
		  /* 821D7790h */ case    8:  		/* lwz R31, <#[R16 + 44]> */
		/* 821D7790h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D7790h case    8:*/		return 0x821D7794;
		  /* 821D7794h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 821D7794h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D7794h case    9:*/		return 0x821D7798;
		  /* 821D7798h */ case   10:  		/* lwz R30, <#[R31 + 12]> */
		/* 821D7798h case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D7798h case   10:*/		return 0x821D779C;
		  /* 821D779Ch */ case   11:  		/* rlwinm. R10, R11, 0, 27, 31 */
		/* 821D779Ch case   11:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R10,regs.R11);
		/* 821D779Ch case   11:*/		return 0x821D77A0;
		  /* 821D77A0h */ case   12:  		/* bc 4, CR0_EQ, -2748 */
		/* 821D77A0h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D77A0h case   12:*/		return 0x821D77A4;
		  /* 821D77A4h */ case   13:  		/* lwz R10, <#[R30 + 8]> */
		/* 821D77A4h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821D77A4h case   13:*/		return 0x821D77A8;
		  /* 821D77A8h */ case   14:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821D77A8h case   14:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821D77A8h case   14:*/		return 0x821D77AC;
		  /* 821D77ACh */ case   15:  		/* cmplwi CR6, R10, 128 */
		/* 821D77ACh case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000080);
		/* 821D77ACh case   15:*/		return 0x821D77B0;
		  /* 821D77B0h */ case   16:  		/* bc 4, CR6_EQ, -2764 */
		/* 821D77B0h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D77B0h case   16:*/		return 0x821D77B4;
		  /* 821D77B4h */ case   17:  		/* li R10, 0 */
		/* 821D77B4h case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D77B4h case   17:*/		return 0x821D77B8;
		  /* 821D77B8h */ case   18:  		/* lwz R3, <#[R30 + 44]> */
		/* 821D77B8h case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821D77B8h case   18:*/		return 0x821D77BC;
		  /* 821D77BCh */ case   19:  		/* li R9, 0 */
		/* 821D77BCh case   19:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821D77BCh case   19:*/		return 0x821D77C0;
		  /* 821D77C0h */ case   20:  		/* li R8, 0 */
		/* 821D77C0h case   20:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D77C0h case   20:*/		return 0x821D77C4;
		  /* 821D77C4h */ case   21:  		/* addi R7, R1, 532 */
		/* 821D77C4h case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x214);
		/* 821D77C4h case   21:*/		return 0x821D77C8;
		  /* 821D77C8h */ case   22:  		/* addi R6, R1, 540 */
		/* 821D77C8h case   22:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x21C);
		/* 821D77C8h case   22:*/		return 0x821D77CC;
		  /* 821D77CCh */ case   23:  		/* addi R5, R1, 272 */
		/* 821D77CCh case   23:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x110);
		/* 821D77CCh case   23:*/		return 0x821D77D0;
		  /* 821D77D0h */ case   24:  		/* rlwinm R4, R11, 27, 30, 31 */
		/* 821D77D0h case   24:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R4,regs.R11);
		/* 821D77D0h case   24:*/		return 0x821D77D4;
		  /* 821D77D4h */ case   25:  		/* bl 310524 */
		/* 821D77D4h case   25:*/		regs.LR = 0x821D77D8; return 0x822234D0;
		/* 821D77D4h case   25:*/		return 0x821D77D8;
		  /* 821D77D8h */ case   26:  		/* lwz R11, <#[R1 + 532]> */
		/* 821D77D8h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000214) );
		/* 821D77D8h case   26:*/		return 0x821D77DC;
		  /* 821D77DCh */ case   27:  		/* cmplwi CR6, R11, 0 */
		/* 821D77DCh case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D77DCh case   27:*/		return 0x821D77E0;
		  /* 821D77E0h */ case   28:  		/* bc 4, CR6_EQ, -2812 */
		/* 821D77E0h case   28:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D77E0h case   28:*/		return 0x821D77E4;
		  /* 821D77E4h */ case   29:  		/* lwz R11, <#[R1 + 272]> */
		/* 821D77E4h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000110) );
		/* 821D77E4h case   29:*/		return 0x821D77E8;
		  /* 821D77E8h */ case   30:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D77E8h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D77E8h case   30:*/		return 0x821D77EC;
		  /* 821D77ECh */ case   31:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D77ECh case   31:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D77ECh case   31:*/		return 0x821D77F0;
		  /* 821D77F0h */ case   32:  		/* cmplwi CR6, R11, 256 */
		/* 821D77F0h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000100);
		/* 821D77F0h case   32:*/		return 0x821D77F4;
		  /* 821D77F4h */ case   33:  		/* bc 4, CR6_EQ, -2832 */
		/* 821D77F4h case   33:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D77F4h case   33:*/		return 0x821D77F8;
		  /* 821D77F8h */ case   34:  		/* lis R11, -32255 */
		/* 821D77F8h case   34:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821D77F8h case   34:*/		return 0x821D77FC;
		  /* 821D77FCh */ case   35:  		/* lwz R3, <#[R30 + 48]> */
		/* 821D77FCh case   35:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000030) );
		/* 821D77FCh case   35:*/		return 0x821D7800;
		  /* 821D7800h */ case   36:  		/* lfd FR31, <#[R11 + 8080]> */
		/* 821D7800h case   36:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00001F90) );
		/* 821D7800h case   36:*/		return 0x821D7804;
		  /* 821D7804h */ case   37:  		/* fmr FR1, FR31 */
		/* 821D7804h case   37:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821D7804h case   37:*/		return 0x821D7808;
		  /* 821D7808h */ case   38:  		/* bl -465496 */
		/* 821D7808h case   38:*/		regs.LR = 0x821D780C; return 0x82165DB0;
		/* 821D7808h case   38:*/		return 0x821D780C;
		  /* 821D780Ch */ case   39:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D780Ch case   39:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D780Ch case   39:*/		return 0x821D7810;
		  /* 821D7810h */ case   40:  		/* bc 12, CR0_EQ, -2860 */
		/* 821D7810h case   40:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D7810h case   40:*/		return 0x821D7814;
		  /* 821D7814h */ case   41:  		/* lwz R11, <#[R1 + 272]> */
		/* 821D7814h case   41:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000110) );
		/* 821D7814h case   41:*/		return 0x821D7818;
		  /* 821D7818h */ case   42:  		/* li R10, 0 */
		/* 821D7818h case   42:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D7818h case   42:*/		return 0x821D781C;
		  /* 821D781Ch */ case   43:  		/* li R9, 0 */
		/* 821D781Ch case   43:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821D781Ch case   43:*/		return 0x821D7820;
		  /* 821D7820h */ case   44:  		/* lwz R4, <#[R1 + 540]> */
		/* 821D7820h case   44:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000021C) );
		/* 821D7820h case   44:*/		return 0x821D7824;
		  /* 821D7824h */ case   45:  		/* li R8, 0 */
		/* 821D7824h case   45:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D7824h case   45:*/		return 0x821D7828;
		  /* 821D7828h */ case   46:  		/* addi R7, R1, 548 */
		/* 821D7828h case   46:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x224);
		/* 821D7828h case   46:*/		return 0x821D782C;
		  /* 821D782Ch */ case   47:  		/* addi R6, R1, 564 */
		/* 821D782Ch case   47:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x234);
		/* 821D782Ch case   47:*/		return 0x821D7830;
		  /* 821D7830h */ case   48:  		/* addi R5, R1, 556 */
		/* 821D7830h case   48:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x22C);
		/* 821D7830h case   48:*/		return 0x821D7834;
		  /* 821D7834h */ case   49:  		/* lwz R3, <#[R11 + 44]> */
		/* 821D7834h case   49:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D7834h case   49:*/		return 0x821D7838;
		  /* 821D7838h */ case   50:  		/* bl 310424 */
		/* 821D7838h case   50:*/		regs.LR = 0x821D783C; return 0x822234D0;
		/* 821D7838h case   50:*/		return 0x821D783C;
		  /* 821D783Ch */ case   51:  		/* lwz R11, <#[R1 + 548]> */
		/* 821D783Ch case   51:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000224) );
		/* 821D783Ch case   51:*/		return 0x821D7840;
		  /* 821D7840h */ case   52:  		/* cmplwi CR6, R11, 0 */
		/* 821D7840h case   52:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D7840h case   52:*/		return 0x821D7844;
		  /* 821D7844h */ case   53:  		/* bc 4, CR6_EQ, -2912 */
		/* 821D7844h case   53:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D7844h case   53:*/		return 0x821D7848;
		  /* 821D7848h */ case   54:  		/* lwz R10, <#[R1 + 272]> */
		/* 821D7848h case   54:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000110) );
		/* 821D7848h case   54:*/		return 0x821D784C;
		  /* 821D784Ch */ case   55:  		/* lis R11, -32255 */
		/* 821D784Ch case   55:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821D784Ch case   55:*/		return 0x821D7850;
		  /* 821D7850h */ case   56:  		/* lfd FR1, <#[R11 + 8648]> */
		/* 821D7850h case   56:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0x000021C8) );
		/* 821D7850h case   56:*/		return 0x821D7854;
		  /* 821D7854h */ case   57:  		/* lwz R3, <#[R10 + 48]> */
		/* 821D7854h case   57:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R10 + 0x00000030) );
		/* 821D7854h case   57:*/		return 0x821D7858;
		  /* 821D7858h */ case   58:  		/* bl -465576 */
		/* 821D7858h case   58:*/		regs.LR = 0x821D785C; return 0x82165DB0;
		/* 821D7858h case   58:*/		return 0x821D785C;
		  /* 821D785Ch */ case   59:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D785Ch case   59:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D785Ch case   59:*/		return 0x821D7860;
		  /* 821D7860h */ case   60:  		/* bc 12, CR0_EQ, -2940 */
		/* 821D7860h case   60:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D7860h case   60:*/		return 0x821D7864;
		  /* 821D7864h */ case   61:  		/* lwz R3, <#[R1 + 556]> */
		/* 821D7864h case   61:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000022C) );
		/* 821D7864h case   61:*/		return 0x821D7868;
		  /* 821D7868h */ case   62:  		/* lwz R4, <#[R1 + 564]> */
		/* 821D7868h case   62:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000234) );
		/* 821D7868h case   62:*/		return 0x821D786C;
		  /* 821D786Ch */ case   63:  		/* stw R3, <#[R1 + 208]> */
		/* 821D786Ch case   63:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000000D0) );
		/* 821D786Ch case   63:*/		return 0x821D7870;
		  /* 821D7870h */ case   64:  		/* stw R4, <#[R1 + 364]> */
		/* 821D7870h case   64:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000016C) );
		/* 821D7870h case   64:*/		return 0x821D7874;
		  /* 821D7874h */ case   65:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D7874h case   65:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D7874h case   65:*/		return 0x821D7878;
		  /* 821D7878h */ case   66:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D7878h case   66:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D7878h case   66:*/		return 0x821D787C;
		  /* 821D787Ch */ case   67:  		/* cmplwi CR6, R11, 9 */
		/* 821D787Ch case   67:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000009);
		/* 821D787Ch case   67:*/		return 0x821D7880;
		  /* 821D7880h */ case   68:  		/* bc 4, CR6_EQ, 60 */
		/* 821D7880h case   68:*/		if ( !regs.CR[6].eq ) { return 0x821D78BC;  }
		/* 821D7880h case   68:*/		return 0x821D7884;
		  /* 821D7884h */ case   69:  		/* li R10, 0 */
		/* 821D7884h case   69:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D7884h case   69:*/		return 0x821D7888;
		  /* 821D7888h */ case   70:  		/* lwz R3, <#[R3 + 44]> */
		/* 821D7888h case   70:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x0000002C) );
		/* 821D7888h case   70:*/		return 0x821D788C;
		  /* 821D788Ch */ case   71:  		/* li R9, 0 */
		/* 821D788Ch case   71:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821D788Ch case   71:*/		return 0x821D7890;
		  /* 821D7890h */ case   72:  		/* li R8, 0 */
		/* 821D7890h case   72:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D7890h case   72:*/		return 0x821D7894;
		  /* 821D7894h */ case   73:  		/* addi R7, R1, 572 */
		/* 821D7894h case   73:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x23C);
		/* 821D7894h case   73:*/		return 0x821D7898;
		  /* 821D7898h */ case   74:  		/* addi R6, R1, 364 */
		/* 821D7898h case   74:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x16C);
		/* 821D7898h case   74:*/		return 0x821D789C;
		  /* 821D789Ch */ case   75:  		/* addi R5, R1, 208 */
		/* 821D789Ch case   75:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xD0);
		/* 821D789Ch case   75:*/		return 0x821D78A0;
		  /* 821D78A0h */ case   76:  		/* bl 310320 */
		/* 821D78A0h case   76:*/		regs.LR = 0x821D78A4; return 0x822234D0;
		/* 821D78A0h case   76:*/		return 0x821D78A4;
		  /* 821D78A4h */ case   77:  		/* lwz R11, <#[R1 + 572]> */
		/* 821D78A4h case   77:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000023C) );
		/* 821D78A4h case   77:*/		return 0x821D78A8;
		  /* 821D78A8h */ case   78:  		/* cmplwi CR6, R11, 0 */
		/* 821D78A8h case   78:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D78A8h case   78:*/		return 0x821D78AC;
		  /* 821D78ACh */ case   79:  		/* bc 12, CR6_EQ, 72 */
		/* 821D78ACh case   79:*/		if ( regs.CR[6].eq ) { return 0x821D78F4;  }
		/* 821D78ACh case   79:*/		return 0x821D78B0;
		  /* 821D78B0h */ case   80:  		/* li R11, 0 */
		/* 821D78B0h case   80:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D78B0h case   80:*/		return 0x821D78B4;
		  /* 821D78B4h */ case   81:  		/* stw R11, <#[R1 + 208]> */
		/* 821D78B4h case   81:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000D0) );
		/* 821D78B4h case   81:*/		return 0x821D78B8;
		  /* 821D78B8h */ case   82:  		/* b 64 */
		/* 821D78B8h case   82:*/		return 0x821D78F8;
		/* 821D78B8h case   82:*/		return 0x821D78BC;
	}
	return 0x821D78BC;
} // Block from 821D7770h-821D78BCh (83 instructions)

//////////////////////////////////////////////////////
// Block at 821D78BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D78BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D78BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D78BC);
		  /* 821D78BCh */ case    0:  		/* cmplwi CR6, R11, 1 */
		/* 821D78BCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821D78BCh case    0:*/		return 0x821D78C0;
		  /* 821D78C0h */ case    1:  		/* bc 4, CR6_EQ, -16 */
		/* 821D78C0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D78B0;  }
		/* 821D78C0h case    1:*/		return 0x821D78C4;
		  /* 821D78C4h */ case    2:  		/* addi R6, R1, 1280 */
		/* 821D78C4h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x500);
		/* 821D78C4h case    2:*/		return 0x821D78C8;
		  /* 821D78C8h */ case    3:  		/* addi R5, R1, 1264 */
		/* 821D78C8h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x4F0);
		/* 821D78C8h case    3:*/		return 0x821D78CC;
		  /* 821D78CCh */ case    4:  		/* bl 307428 */
		/* 821D78CCh case    4:*/		regs.LR = 0x821D78D0; return 0x822229B0;
		/* 821D78CCh case    4:*/		return 0x821D78D0;
		  /* 821D78D0h */ case    5:  		/* lfd FR0, <#[R1 + 1264]> */
		/* 821D78D0h case    5:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000004F0) );
		/* 821D78D0h case    5:*/		return 0x821D78D4;
		  /* 821D78D4h */ case    6:  		/* fcmpu CR6, FR0, FR27 */
		/* 821D78D4h case    6:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR27);
		/* 821D78D4h case    6:*/		return 0x821D78D8;
		  /* 821D78D8h */ case    7:  		/* bc 12, CR6_LT, 16 */
		/* 821D78D8h case    7:*/		if ( regs.CR[6].lt ) { return 0x821D78E8;  }
		/* 821D78D8h case    7:*/		return 0x821D78DC;
		  /* 821D78DCh */ case    8:  		/* lfd FR0, <#[R1 + 1280]> */
		/* 821D78DCh case    8:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000500) );
		/* 821D78DCh case    8:*/		return 0x821D78E0;
		  /* 821D78E0h */ case    9:  		/* fcmpu CR6, FR0, FR26 */
		/* 821D78E0h case    9:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR26);
		/* 821D78E0h case    9:*/		return 0x821D78E4;
		  /* 821D78E4h */ case   10:  		/* bc 12, CR6_LT, 16 */
		/* 821D78E4h case   10:*/		if ( regs.CR[6].lt ) { return 0x821D78F4;  }
		/* 821D78E4h case   10:*/		return 0x821D78E8;
	}
	return 0x821D78E8;
} // Block from 821D78BCh-821D78E8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821D78E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D78E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D78E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D78E8);
		  /* 821D78E8h */ case    0:  		/* li R11, 0 */
		/* 821D78E8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D78E8h case    0:*/		return 0x821D78EC;
		  /* 821D78ECh */ case    1:  		/* stw R11, <#[R1 + 208]> */
		/* 821D78ECh case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000D0) );
		/* 821D78ECh case    1:*/		return 0x821D78F0;
		  /* 821D78F0h */ case    2:  		/* b -3084 */
		/* 821D78F0h case    2:*/		return 0x821D6CE4;
		/* 821D78F0h case    2:*/		return 0x821D78F4;
	}
	return 0x821D78F4;
} // Block from 821D78E8h-821D78F4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D78F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D78F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D78F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D78F4);
		  /* 821D78F4h */ case    0:  		/* lwz R11, <#[R1 + 208]> */
		/* 821D78F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000D0) );
		/* 821D78F4h case    0:*/		return 0x821D78F8;
	}
	return 0x821D78F8;
} // Block from 821D78F4h-821D78F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D78F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D78F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D78F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D78F8);
		  /* 821D78F8h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821D78F8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D78F8h case    0:*/		return 0x821D78FC;
		  /* 821D78FCh */ case    1:  		/* bc 12, CR6_EQ, -3096 */
		/* 821D78FCh case    1:*/		if ( regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D78FCh case    1:*/		return 0x821D7900;
		  /* 821D7900h */ case    2:  		/* lwz R10, <#[R11 + 8]> */
		/* 821D7900h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D7900h case    2:*/		return 0x821D7904;
		  /* 821D7904h */ case    3:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821D7904h case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821D7904h case    3:*/		return 0x821D7908;
		  /* 821D7908h */ case    4:  		/* cmplwi CR6, R10, 128 */
		/* 821D7908h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000080);
		/* 821D7908h case    4:*/		return 0x821D790C;
		  /* 821D790Ch */ case    5:  		/* bc 4, CR6_EQ, -3112 */
		/* 821D790Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D790Ch case    5:*/		return 0x821D7910;
		  /* 821D7910h */ case    6:  		/* lis R10, -32256 */
		/* 821D7910h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 821D7910h case    6:*/		return 0x821D7914;
		  /* 821D7914h */ case    7:  		/* lwz R3, <#[R11 + 48]> */
		/* 821D7914h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000030) );
		/* 821D7914h case    7:*/		return 0x821D7918;
		  /* 821D7918h */ case    8:  		/* lfd FR1, <#[R10 + 4736]> */
		/* 821D7918h case    8:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R10 + 0x00001280) );
		/* 821D7918h case    8:*/		return 0x821D791C;
		  /* 821D791Ch */ case    9:  		/* bl -465772 */
		/* 821D791Ch case    9:*/		regs.LR = 0x821D7920; return 0x82165DB0;
		/* 821D791Ch case    9:*/		return 0x821D7920;
		  /* 821D7920h */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D7920h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D7920h case   10:*/		return 0x821D7924;
		  /* 821D7924h */ case   11:  		/* bc 12, CR0_EQ, -3136 */
		/* 821D7924h case   11:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D7924h case   11:*/		return 0x821D7928;
		  /* 821D7928h */ case   12:  		/* lwz R11, <#[R1 + 208]> */
		/* 821D7928h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000D0) );
		/* 821D7928h case   12:*/		return 0x821D792C;
		  /* 821D792Ch */ case   13:  		/* li R10, 0 */
		/* 821D792Ch case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D792Ch case   13:*/		return 0x821D7930;
		  /* 821D7930h */ case   14:  		/* li R9, 0 */
		/* 821D7930h case   14:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821D7930h case   14:*/		return 0x821D7934;
		  /* 821D7934h */ case   15:  		/* lwz R4, <#[R1 + 364]> */
		/* 821D7934h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000016C) );
		/* 821D7934h case   15:*/		return 0x821D7938;
		  /* 821D7938h */ case   16:  		/* li R8, 0 */
		/* 821D7938h case   16:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D7938h case   16:*/		return 0x821D793C;
		  /* 821D793Ch */ case   17:  		/* addi R7, R1, 580 */
		/* 821D793Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x244);
		/* 821D793Ch case   17:*/		return 0x821D7940;
		  /* 821D7940h */ case   18:  		/* addi R6, R1, 372 */
		/* 821D7940h case   18:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x174);
		/* 821D7940h case   18:*/		return 0x821D7944;
		  /* 821D7944h */ case   19:  		/* addi R5, R1, 288 */
		/* 821D7944h case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x120);
		/* 821D7944h case   19:*/		return 0x821D7948;
		  /* 821D7948h */ case   20:  		/* lwz R3, <#[R11 + 44]> */
		/* 821D7948h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D7948h case   20:*/		return 0x821D794C;
		  /* 821D794Ch */ case   21:  		/* bl 310148 */
		/* 821D794Ch case   21:*/		regs.LR = 0x821D7950; return 0x822234D0;
		/* 821D794Ch case   21:*/		return 0x821D7950;
		  /* 821D7950h */ case   22:  		/* lwz R11, <#[R1 + 580]> */
		/* 821D7950h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000244) );
		/* 821D7950h case   22:*/		return 0x821D7954;
		  /* 821D7954h */ case   23:  		/* cmplwi CR6, R11, 0 */
		/* 821D7954h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D7954h case   23:*/		return 0x821D7958;
		  /* 821D7958h */ case   24:  		/* bc 4, CR6_EQ, -3188 */
		/* 821D7958h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D7958h case   24:*/		return 0x821D795C;
		  /* 821D795Ch */ case   25:  		/* lwz R11, <#[R1 + 288]> */
		/* 821D795Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000120) );
		/* 821D795Ch case   25:*/		return 0x821D7960;
		  /* 821D7960h */ case   26:  		/* lwz R10, <#[R11 + 8]> */
		/* 821D7960h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D7960h case   26:*/		return 0x821D7964;
		  /* 821D7964h */ case   27:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821D7964h case   27:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821D7964h case   27:*/		return 0x821D7968;
		  /* 821D7968h */ case   28:  		/* cmplwi CR6, R10, 256 */
		/* 821D7968h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000100);
		/* 821D7968h case   28:*/		return 0x821D796C;
		  /* 821D796Ch */ case   29:  		/* bc 4, CR6_EQ, -3208 */
		/* 821D796Ch case   29:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D796Ch case   29:*/		return 0x821D7970;
		  /* 821D7970h */ case   30:  		/* lis R10, -32255 */
		/* 821D7970h case   30:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 821D7970h case   30:*/		return 0x821D7974;
		  /* 821D7974h */ case   31:  		/* lwz R3, <#[R11 + 48]> */
		/* 821D7974h case   31:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000030) );
		/* 821D7974h case   31:*/		return 0x821D7978;
		  /* 821D7978h */ case   32:  		/* lfd FR1, <#[R10 + 8656]> */
		/* 821D7978h case   32:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R10 + 0x000021D0) );
		/* 821D7978h case   32:*/		return 0x821D797C;
		  /* 821D797Ch */ case   33:  		/* bl -465868 */
		/* 821D797Ch case   33:*/		regs.LR = 0x821D7980; return 0x82165DB0;
		/* 821D797Ch case   33:*/		return 0x821D7980;
		  /* 821D7980h */ case   34:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D7980h case   34:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D7980h case   34:*/		return 0x821D7984;
		  /* 821D7984h */ case   35:  		/* bc 12, CR0_EQ, -3232 */
		/* 821D7984h case   35:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D7984h case   35:*/		return 0x821D7988;
		  /* 821D7988h */ case   36:  		/* lwz R11, <#[R1 + 288]> */
		/* 821D7988h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000120) );
		/* 821D7988h case   36:*/		return 0x821D798C;
		  /* 821D798Ch */ case   37:  		/* addi R6, R1, 1312 */
		/* 821D798Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x520);
		/* 821D798Ch case   37:*/		return 0x821D7990;
		  /* 821D7990h */ case   38:  		/* addi R5, R1, 1296 */
		/* 821D7990h case   38:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x510);
		/* 821D7990h case   38:*/		return 0x821D7994;
		  /* 821D7994h */ case   39:  		/* lwz R4, <#[R1 + 372]> */
		/* 821D7994h case   39:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000174) );
		/* 821D7994h case   39:*/		return 0x821D7998;
		  /* 821D7998h */ case   40:  		/* lwz R3, <#[R11 + 44]> */
		/* 821D7998h case   40:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D7998h case   40:*/		return 0x821D799C;
		  /* 821D799Ch */ case   41:  		/* bl 308108 */
		/* 821D799Ch case   41:*/		regs.LR = 0x821D79A0; return 0x82222D28;
		/* 821D799Ch case   41:*/		return 0x821D79A0;
		  /* 821D79A0h */ case   42:  		/* lfd FR0, <#[R1 + 1296]> */
		/* 821D79A0h case   42:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000510) );
		/* 821D79A0h case   42:*/		return 0x821D79A4;
		  /* 821D79A4h */ case   43:  		/* fcmpu CR6, FR0, FR31 */
		/* 821D79A4h case   43:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 821D79A4h case   43:*/		return 0x821D79A8;
		  /* 821D79A8h */ case   44:  		/* bc 12, CR6_LT, -3268 */
		/* 821D79A8h case   44:*/		if ( regs.CR[6].lt ) { return 0x821D6CE4;  }
		/* 821D79A8h case   44:*/		return 0x821D79AC;
		  /* 821D79ACh */ case   45:  		/* lis R11, -32255 */
		/* 821D79ACh case   45:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8201);
		/* 821D79ACh case   45:*/		return 0x821D79B0;
		  /* 821D79B0h */ case   46:  		/* lfd FR13, <#[R1 + 1312]> */
		/* 821D79B0h case   46:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000520) );
		/* 821D79B0h case   46:*/		return 0x821D79B4;
		  /* 821D79B4h */ case   47:  		/* lfd FR0, <#[R11 + 8088]> */
		/* 821D79B4h case   47:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00001F98) );
		/* 821D79B4h case   47:*/		return 0x821D79B8;
		  /* 821D79B8h */ case   48:  		/* fcmpu CR6, FR13, FR0 */
		/* 821D79B8h case   48:*/		cpu::op::fcmpu<6>(regs,regs.FR13,regs.FR0);
		/* 821D79B8h case   48:*/		return 0x821D79BC;
		  /* 821D79BCh */ case   49:  		/* bc 12, CR6_GT, -3288 */
		/* 821D79BCh case   49:*/		if ( regs.CR[6].gt ) { return 0x821D6CE4;  }
		/* 821D79BCh case   49:*/		return 0x821D79C0;
		  /* 821D79C0h */ case   50:  		/* lwz R11, <#[R1 + 288]> */
		/* 821D79C0h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000120) );
		/* 821D79C0h case   50:*/		return 0x821D79C4;
		  /* 821D79C4h */ case   51:  		/* li R10, 0 */
		/* 821D79C4h case   51:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D79C4h case   51:*/		return 0x821D79C8;
		  /* 821D79C8h */ case   52:  		/* li R9, 0 */
		/* 821D79C8h case   52:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821D79C8h case   52:*/		return 0x821D79CC;
		  /* 821D79CCh */ case   53:  		/* lwz R4, <#[R1 + 372]> */
		/* 821D79CCh case   53:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000174) );
		/* 821D79CCh case   53:*/		return 0x821D79D0;
		  /* 821D79D0h */ case   54:  		/* li R8, 0 */
		/* 821D79D0h case   54:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D79D0h case   54:*/		return 0x821D79D4;
		  /* 821D79D4h */ case   55:  		/* addi R7, R1, 604 */
		/* 821D79D4h case   55:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x25C);
		/* 821D79D4h case   55:*/		return 0x821D79D8;
		  /* 821D79D8h */ case   56:  		/* addi R6, R1, 596 */
		/* 821D79D8h case   56:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x254);
		/* 821D79D8h case   56:*/		return 0x821D79DC;
		  /* 821D79DCh */ case   57:  		/* addi R5, R1, 588 */
		/* 821D79DCh case   57:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x24C);
		/* 821D79DCh case   57:*/		return 0x821D79E0;
		  /* 821D79E0h */ case   58:  		/* lwz R3, <#[R11 + 44]> */
		/* 821D79E0h case   58:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D79E0h case   58:*/		return 0x821D79E4;
		  /* 821D79E4h */ case   59:  		/* bl 309996 */
		/* 821D79E4h case   59:*/		regs.LR = 0x821D79E8; return 0x822234D0;
		/* 821D79E4h case   59:*/		return 0x821D79E8;
		  /* 821D79E8h */ case   60:  		/* lwz R10, <#[R31 + 12]> */
		/* 821D79E8h case   60:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D79E8h case   60:*/		return 0x821D79EC;
		  /* 821D79ECh */ case   61:  		/* lwz R11, <#[R1 + 588]> */
		/* 821D79ECh case   61:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000024C) );
		/* 821D79ECh case   61:*/		return 0x821D79F0;
		  /* 821D79F0h */ case   62:  		/* addi R10, R10, 4 */
		/* 821D79F0h case   62:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821D79F0h case   62:*/		return 0x821D79F4;
		  /* 821D79F4h */ case   63:  		/* lwz R9, <#[R10]> */
		/* 821D79F4h case   63:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D79F4h case   63:*/		return 0x821D79F8;
		  /* 821D79F8h */ case   64:  		/* b 12 */
		/* 821D79F8h case   64:*/		return 0x821D7A04;
		/* 821D79F8h case   64:*/		return 0x821D79FC;
		  /* 821D79FCh */ case   65:  		/* addi R10, R9, 8 */
		/* 821D79FCh case   65:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821D79FCh case   65:*/		return 0x821D7A00;
		  /* 821D7A00h */ case   66:  		/* lwz R9, <#[R9 + 8]> */
		/* 821D7A00h case   66:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821D7A00h case   66:*/		return 0x821D7A04;
	}
	return 0x821D7A04;
} // Block from 821D78F8h-821D7A04h (67 instructions)

//////////////////////////////////////////////////////
// Block at 821D7A04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7A04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7A04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7A04);
		  /* 821D7A04h */ case    0:  		/* cmplw CR6, R9, R31 */
		/* 821D7A04h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R31);
		/* 821D7A04h case    0:*/		return 0x821D7A08;
		  /* 821D7A08h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821D7A08h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D79FC;  }
		/* 821D7A08h case    1:*/		return 0x821D7A0C;
		  /* 821D7A0Ch */ case    2:  		/* lwz R9, <#[R31 + 8]> */
		/* 821D7A0Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 821D7A0Ch case    2:*/		return 0x821D7A10;
		  /* 821D7A10h */ case    3:  		/* mr R4, R30 */
		/* 821D7A10h case    3:*/		regs.R4 = regs.R30;
		/* 821D7A10h case    3:*/		return 0x821D7A14;
		  /* 821D7A14h */ case    4:  		/* lwz R5, <#[R1 + 112]> */
		/* 821D7A14h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 821D7A14h case    4:*/		return 0x821D7A18;
		  /* 821D7A18h */ case    5:  		/* lwz R3, <#[R1 + 1908]> */
		/* 821D7A18h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000774) );
		/* 821D7A18h case    5:*/		return 0x821D7A1C;
		  /* 821D7A1Ch */ case    6:  		/* stw R9, <#[R10]> */
		/* 821D7A1Ch case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D7A1Ch case    6:*/		return 0x821D7A20;
		  /* 821D7A20h */ case    7:  		/* lwz R10, <#[R11 + 4]> */
		/* 821D7A20h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821D7A20h case    7:*/		return 0x821D7A24;
		  /* 821D7A24h */ case    8:  		/* stw R10, <#[R31 + 8]> */
		/* 821D7A24h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821D7A24h case    8:*/		return 0x821D7A28;
		  /* 821D7A28h */ case    9:  		/* stw R31, <#[R11 + 4]> */
		/* 821D7A28h case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821D7A28h case    9:*/		return 0x821D7A2C;
		  /* 821D7A2Ch */ case   10:  		/* stw R11, <#[R31 + 12]> */
		/* 821D7A2Ch case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D7A2Ch case   10:*/		return 0x821D7A30;
		  /* 821D7A30h */ case   11:  		/* lwz R11, <#[R1 + 596]> */
		/* 821D7A30h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000254) );
		/* 821D7A30h case   11:*/		return 0x821D7A34;
		  /* 821D7A34h */ case   12:  		/* lwz R10, <#[R31]> */
		/* 821D7A34h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821D7A34h case   12:*/		return 0x821D7A38;
		  /* 821D7A38h */ case   13:  		/* rlwinm R11, R11, 5, 22, 26 */
		/* 821D7A38h case   13:*/		cpu::op::rlwinm<0,5,22,26>(regs,&regs.R11,regs.R11);
		/* 821D7A38h case   13:*/		return 0x821D7A3C;
		  /* 821D7A3Ch */ case   14:  		/* rlwinm R10, R10, 0, 27, 24 */
		/* 821D7A3Ch case   14:*/		cpu::op::rlwinm<0,0,27,24>(regs,&regs.R10,regs.R10);
		/* 821D7A3Ch case   14:*/		return 0x821D7A40;
		  /* 821D7A40h */ case   15:  		/* rlwinm R11, R11, 0, 25, 23 */
		/* 821D7A40h case   15:*/		cpu::op::rlwinm<0,0,25,23>(regs,&regs.R11,regs.R11);
		/* 821D7A40h case   15:*/		return 0x821D7A44;
		  /* 821D7A44h */ case   16:  		/* rlwinm R10, R10, 0, 24, 21 */
		/* 821D7A44h case   16:*/		cpu::op::rlwinm<0,0,24,21>(regs,&regs.R10,regs.R10);
		/* 821D7A44h case   16:*/		return 0x821D7A48;
		  /* 821D7A48h */ case   17:  		/* ori R11, R11, 7296 */
		/* 821D7A48h case   17:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1C80);
		/* 821D7A48h case   17:*/		return 0x821D7A4C;
		  /* 821D7A4Ch */ case   18:  		/* or R11, R11, R10 */
		/* 821D7A4Ch case   18:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D7A4Ch case   18:*/		return 0x821D7A50;
		  /* 821D7A50h */ case   19:  		/* stw R11, <#[R31]> */
		/* 821D7A50h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D7A50h case   19:*/		return 0x821D7A54;
		  /* 821D7A54h */ case   20:  		/* lwz R10, <#[R1 + 604]> */
		/* 821D7A54h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000025C) );
		/* 821D7A54h case   20:*/		return 0x821D7A58;
		  /* 821D7A58h */ case   21:  		/* rlwimi R11, R10, 0, 27, 31 */
		/* 821D7A58h case   21:*/		cpu::op::rlwimi<0,0,27,31>(regs,&regs.R11,regs.R10);
		/* 821D7A58h case   21:*/		return 0x821D7A5C;
		  /* 821D7A5Ch */ case   22:  		/* stw R11, <#[R31]> */
		/* 821D7A5Ch case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D7A5Ch case   22:*/		return 0x821D7A60;
		  /* 821D7A60h */ case   23:  		/* b 3984 */
		/* 821D7A60h case   23:*/		return 0x821D89F0;
		/* 821D7A60h case   23:*/		return 0x821D7A64;
	}
	return 0x821D7A64;
} // Block from 821D7A04h-821D7A64h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821D7A64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7A64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7A64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7A64);
		  /* 821D7A64h */ case    0:  		/* lwz R11, <#[R16 + 44]> */
		/* 821D7A64h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D7A64h case    0:*/		return 0x821D7A68;
		  /* 821D7A68h */ case    1:  		/* lwz R10, <#[R11 + 12]> */
		/* 821D7A68h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D7A68h case    1:*/		return 0x821D7A6C;
		  /* 821D7A6Ch */ case    2:  		/* lwz R11, <#[R11]> */
		/* 821D7A6Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821D7A6Ch case    2:*/		return 0x821D7A70;
		  /* 821D7A70h */ case    3:  		/* rlwinm R9, R11, 29, 28, 29 */
		/* 821D7A70h case    3:*/		cpu::op::rlwinm<0,29,28,29>(regs,&regs.R9,regs.R11);
		/* 821D7A70h case    3:*/		return 0x821D7A74;
		  /* 821D7A74h */ case    4:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 821D7A74h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 821D7A74h case    4:*/		return 0x821D7A78;
		  /* 821D7A78h */ case    5:  		/* lhz R11, <#[R10 + 14]> */
		/* 821D7A78h case    5:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000E) );
		/* 821D7A78h case    5:*/		return 0x821D7A7C;
		  /* 821D7A7Ch */ case    6:  		/* srw R11, R11, R9 */
		/* 821D7A7Ch case    6:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D7A7Ch case    6:*/		return 0x821D7A80;
		  /* 821D7A80h */ case    7:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821D7A80h case    7:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821D7A80h case    7:*/		return 0x821D7A84;
		  /* 821D7A84h */ case    8:  		/* bl -248324 */
		/* 821D7A84h case    8:*/		regs.LR = 0x821D7A88; return 0x8219B080;
		/* 821D7A84h case    8:*/		return 0x821D7A88;
		  /* 821D7A88h */ case    9:  		/* rlwinm R11, R3, 0, 30, 31 */
		/* 821D7A88h case    9:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R3);
		/* 821D7A88h case    9:*/		return 0x821D7A8C;
		  /* 821D7A8Ch */ case   10:  		/* cmplwi CR6, R11, 3 */
		/* 821D7A8Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821D7A8Ch case   10:*/		return 0x821D7A90;
		  /* 821D7A90h */ case   11:  		/* bc 4, CR6_EQ, -3500 */
		/* 821D7A90h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D7A90h case   11:*/		return 0x821D7A94;
		  /* 821D7A94h */ case   12:  		/* fmr FR4, FR29 */
		/* 821D7A94h case   12:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR29);
		/* 821D7A94h case   12:*/		return 0x821D7A98;
		  /* 821D7A98h */ case   13:  		/* fmr FR3, FR29 */
		/* 821D7A98h case   13:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR29);
		/* 821D7A98h case   13:*/		return 0x821D7A9C;
		  /* 821D7A9Ch */ case   14:  		/* fmr FR2, FR29 */
		/* 821D7A9Ch case   14:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR29);
		/* 821D7A9Ch case   14:*/		return 0x821D7AA0;
		  /* 821D7AA0h */ case   15:  		/* fmr FR1, FR29 */
		/* 821D7AA0h case   15:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR29);
		/* 821D7AA0h case   15:*/		return 0x821D7AA4;
		  /* 821D7AA4h */ case   16:  		/* b -1784 */
		/* 821D7AA4h case   16:*/		return 0x821D73AC;
		/* 821D7AA4h case   16:*/		return 0x821D7AA8;
	}
	return 0x821D7AA8;
} // Block from 821D7A64h-821D7AA8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821D7AA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7AA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7AA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7AA8);
		  /* 821D7AA8h */ case    0:  		/* lwz R11, <#[R16 + 44]> */
		/* 821D7AA8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D7AA8h case    0:*/		return 0x821D7AAC;
		  /* 821D7AACh */ case    1:  		/* lwz R30, <#[R11]> */
		/* 821D7AACh case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 821D7AACh case    1:*/		return 0x821D7AB0;
		  /* 821D7AB0h */ case    2:  		/* lwz R31, <#[R11 + 12]> */
		/* 821D7AB0h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D7AB0h case    2:*/		return 0x821D7AB4;
		  /* 821D7AB4h */ case    3:  		/* rlwinm R11, R30, 0, 27, 31 */
		/* 821D7AB4h case    3:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R30);
		/* 821D7AB4h case    3:*/		return 0x821D7AB8;
		  /* 821D7AB8h */ case    4:  		/* cmplwi CR6, R11, 4 */
		/* 821D7AB8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 821D7AB8h case    4:*/		return 0x821D7ABC;
		  /* 821D7ABCh */ case    5:  		/* bc 4, CR6_EQ, -3544 */
		/* 821D7ABCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D7ABCh case    5:*/		return 0x821D7AC0;
		  /* 821D7AC0h */ case    6:  		/* lwz R29, <#[R1 + 1908]> */
		/* 821D7AC0h case    6:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000774) );
		/* 821D7AC0h case    6:*/		return 0x821D7AC4;
		  /* 821D7AC4h */ case    7:  		/* mr R4, R31 */
		/* 821D7AC4h case    7:*/		regs.R4 = regs.R31;
		/* 821D7AC4h case    7:*/		return 0x821D7AC8;
		  /* 821D7AC8h */ case    8:  		/* mr R3, R29 */
		/* 821D7AC8h case    8:*/		regs.R3 = regs.R29;
		/* 821D7AC8h case    8:*/		return 0x821D7ACC;
		  /* 821D7ACCh */ case    9:  		/* bl -105388 */
		/* 821D7ACCh case    9:*/		regs.LR = 0x821D7AD0; return 0x821BDF20;
		/* 821D7ACCh case    9:*/		return 0x821D7AD0;
		  /* 821D7AD0h */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D7AD0h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D7AD0h case   10:*/		return 0x821D7AD4;
		  /* 821D7AD4h */ case   11:  		/* bc 12, CR0_EQ, -3568 */
		/* 821D7AD4h case   11:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D7AD4h case   11:*/		return 0x821D7AD8;
		  /* 821D7AD8h */ case   12:  		/* rlwinm R5, R30, 27, 30, 31 */
		/* 821D7AD8h case   12:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R5,regs.R30);
		/* 821D7AD8h case   12:*/		return 0x821D7ADC;
		  /* 821D7ADCh */ case   13:  		/* mr R4, R31 */
		/* 821D7ADCh case   13:*/		regs.R4 = regs.R31;
		/* 821D7ADCh case   13:*/		return 0x821D7AE0;
		  /* 821D7AE0h */ case   14:  		/* mr R3, R29 */
		/* 821D7AE0h case   14:*/		regs.R3 = regs.R29;
		/* 821D7AE0h case   14:*/		return 0x821D7AE4;
		  /* 821D7AE4h */ case   15:  		/* bl -391636 */
		/* 821D7AE4h case   15:*/		regs.LR = 0x821D7AE8; return 0x82178110;
		/* 821D7AE4h case   15:*/		return 0x821D7AE8;
		  /* 821D7AE8h */ case   16:  		/* mr R6, R3 */
		/* 821D7AE8h case   16:*/		regs.R6 = regs.R3;
		/* 821D7AE8h case   16:*/		return 0x821D7AEC;
		  /* 821D7AECh */ case   17:  		/* mr R5, R16 */
		/* 821D7AECh case   17:*/		regs.R5 = regs.R16;
		/* 821D7AECh case   17:*/		return 0x821D7AF0;
		  /* 821D7AF0h */ case   18:  		/* li R4, 0 */
		/* 821D7AF0h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D7AF0h case   18:*/		return 0x821D7AF4;
		  /* 821D7AF4h */ case   19:  		/* mr R3, R29 */
		/* 821D7AF4h case   19:*/		regs.R3 = regs.R29;
		/* 821D7AF4h case   19:*/		return 0x821D7AF8;
		  /* 821D7AF8h */ case   20:  		/* bl -90408 */
		/* 821D7AF8h case   20:*/		regs.LR = 0x821D7AFC; return 0x821C19D0;
		/* 821D7AF8h case   20:*/		return 0x821D7AFC;
		  /* 821D7AFCh */ case   21:  		/* b -928 */
		/* 821D7AFCh case   21:*/		return 0x821D775C;
		/* 821D7AFCh case   21:*/		return 0x821D7B00;
	}
	return 0x821D7B00;
} // Block from 821D7AA8h-821D7B00h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821D7B00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7B00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7B00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7B00);
		  /* 821D7B00h */ case    0:  		/* rlwinm. R11, R10, 0, 10, 12 */
		/* 821D7B00h case    0:*/		cpu::op::rlwinm<1,0,10,12>(regs,&regs.R11,regs.R10);
		/* 821D7B00h case    0:*/		return 0x821D7B04;
		  /* 821D7B04h */ case    1:  		/* bc 12, CR0_EQ, 1896 */
		/* 821D7B04h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D826C;  }
		/* 821D7B04h case    1:*/		return 0x821D7B08;
		  /* 821D7B08h */ case    2:  		/* li R10, 0 */
		/* 821D7B08h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D7B08h case    2:*/		return 0x821D7B0C;
		  /* 821D7B0Ch */ case    3:  		/* lwz R3, <#[R16 + 44]> */
		/* 821D7B0Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D7B0Ch case    3:*/		return 0x821D7B10;
		  /* 821D7B10h */ case    4:  		/* mr R9, R16 */
		/* 821D7B10h case    4:*/		regs.R9 = regs.R16;
		/* 821D7B10h case    4:*/		return 0x821D7B14;
		  /* 821D7B14h */ case    5:  		/* li R8, 0 */
		/* 821D7B14h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D7B14h case    5:*/		return 0x821D7B18;
		  /* 821D7B18h */ case    6:  		/* addi R7, R1, 248 */
		/* 821D7B18h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xF8);
		/* 821D7B18h case    6:*/		return 0x821D7B1C;
		  /* 821D7B1Ch */ case    7:  		/* addi R6, R1, 260 */
		/* 821D7B1Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x104);
		/* 821D7B1Ch case    7:*/		return 0x821D7B20;
		  /* 821D7B20h */ case    8:  		/* addi R5, R1, 228 */
		/* 821D7B20h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xE4);
		/* 821D7B20h case    8:*/		return 0x821D7B24;
		  /* 821D7B24h */ case    9:  		/* li R4, 0 */
		/* 821D7B24h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D7B24h case    9:*/		return 0x821D7B28;
		  /* 821D7B28h */ case   10:  		/* bl 309672 */
		/* 821D7B28h case   10:*/		regs.LR = 0x821D7B2C; return 0x822234D0;
		/* 821D7B28h case   10:*/		return 0x821D7B2C;
		  /* 821D7B2Ch */ case   11:  		/* lwz R4, <#[R1 + 228]> */
		/* 821D7B2Ch case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000E4) );
		/* 821D7B2Ch case   11:*/		return 0x821D7B30;
		  /* 821D7B30h */ case   12:  		/* lwz R11, <#[R4 + 8]> */
		/* 821D7B30h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821D7B30h case   12:*/		return 0x821D7B34;
		  /* 821D7B34h */ case   13:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D7B34h case   13:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D7B34h case   13:*/		return 0x821D7B38;
		  /* 821D7B38h */ case   14:  		/* cmplwi CR6, R11, 1280 */
		/* 821D7B38h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000500);
		/* 821D7B38h case   14:*/		return 0x821D7B3C;
		  /* 821D7B3Ch */ case   15:  		/* bc 4, CR6_EQ, 1840 */
		/* 821D7B3Ch case   15:*/		if ( !regs.CR[6].eq ) { return 0x821D826C;  }
		/* 821D7B3Ch case   15:*/		return 0x821D7B40;
		  /* 821D7B40h */ case   16:  		/* lwz R11, <#[R1 + 248]> */
		/* 821D7B40h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000F8) );
		/* 821D7B40h case   16:*/		return 0x821D7B44;
		  /* 821D7B44h */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 821D7B44h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D7B44h case   17:*/		return 0x821D7B48;
		  /* 821D7B48h */ case   18:  		/* bc 4, CR6_EQ, 1828 */
		/* 821D7B48h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821D826C;  }
		/* 821D7B48h case   18:*/		return 0x821D7B4C;
		  /* 821D7B4Ch */ case   19:  		/* lwz R27, <#[R1 + 1908]> */
		/* 821D7B4Ch case   19:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000774) );
		/* 821D7B4Ch case   19:*/		return 0x821D7B50;
		  /* 821D7B50h */ case   20:  		/* lwz R5, <#[R1 + 112]> */
		/* 821D7B50h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 821D7B50h case   20:*/		return 0x821D7B54;
		  /* 821D7B54h */ case   21:  		/* mr R3, R27 */
		/* 821D7B54h case   21:*/		regs.R3 = regs.R27;
		/* 821D7B54h case   21:*/		return 0x821D7B58;
		  /* 821D7B58h */ case   22:  		/* bl -49552 */
		/* 821D7B58h case   22:*/		regs.LR = 0x821D7B5C; return 0x821CB9C8;
		/* 821D7B58h case   22:*/		return 0x821D7B5C;
		  /* 821D7B5Ch */ case   23:  		/* lwz R11, <#[R1 + 228]> */
		/* 821D7B5Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000E4) );
		/* 821D7B5Ch case   23:*/		return 0x821D7B60;
		  /* 821D7B60h */ case   24:  		/* li R10, 0 */
		/* 821D7B60h case   24:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D7B60h case   24:*/		return 0x821D7B64;
		  /* 821D7B64h */ case   25:  		/* lwz R4, <#[R1 + 260]> */
		/* 821D7B64h case   25:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000104) );
		/* 821D7B64h case   25:*/		return 0x821D7B68;
		  /* 821D7B68h */ case   26:  		/* mr R9, R16 */
		/* 821D7B68h case   26:*/		regs.R9 = regs.R16;
		/* 821D7B68h case   26:*/		return 0x821D7B6C;
		  /* 821D7B6Ch */ case   27:  		/* li R8, 0 */
		/* 821D7B6Ch case   27:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D7B6Ch case   27:*/		return 0x821D7B70;
		  /* 821D7B70h */ case   28:  		/* addi R7, R1, 248 */
		/* 821D7B70h case   28:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xF8);
		/* 821D7B70h case   28:*/		return 0x821D7B74;
		  /* 821D7B74h */ case   29:  		/* addi R6, R1, 260 */
		/* 821D7B74h case   29:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x104);
		/* 821D7B74h case   29:*/		return 0x821D7B78;
		  /* 821D7B78h */ case   30:  		/* lwz R3, <#[R11 + 44]> */
		/* 821D7B78h case   30:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D7B78h case   30:*/		return 0x821D7B7C;
		  /* 821D7B7Ch */ case   31:  		/* addi R5, R1, 228 */
		/* 821D7B7Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xE4);
		/* 821D7B7Ch case   31:*/		return 0x821D7B80;
		  /* 821D7B80h */ case   32:  		/* bl 309584 */
		/* 821D7B80h case   32:*/		regs.LR = 0x821D7B84; return 0x822234D0;
		/* 821D7B80h case   32:*/		return 0x821D7B84;
		  /* 821D7B84h */ case   33:  		/* mr R3, R27 */
		/* 821D7B84h case   33:*/		regs.R3 = regs.R27;
		/* 821D7B84h case   33:*/		return 0x821D7B88;
		  /* 821D7B88h */ case   34:  		/* lwz R6, <#[R1 + 248]> */
		/* 821D7B88h case   34:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000F8) );
		/* 821D7B88h case   34:*/		return 0x821D7B8C;
		  /* 821D7B8Ch */ case   35:  		/* lwz R5, <#[R1 + 260]> */
		/* 821D7B8Ch case   35:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000104) );
		/* 821D7B8Ch case   35:*/		return 0x821D7B90;
		  /* 821D7B90h */ case   36:  		/* lwz R4, <#[R1 + 228]> */
		/* 821D7B90h case   36:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000E4) );
		/* 821D7B90h case   36:*/		return 0x821D7B94;
		  /* 821D7B94h */ case   37:  		/* bl -391724 */
		/* 821D7B94h case   37:*/		regs.LR = 0x821D7B98; return 0x82178168;
		/* 821D7B94h case   37:*/		return 0x821D7B98;
		  /* 821D7B98h */ case   38:  		/* mr R5, R3 */
		/* 821D7B98h case   38:*/		regs.R5 = regs.R3;
		/* 821D7B98h case   38:*/		return 0x821D7B9C;
		  /* 821D7B9Ch */ case   39:  		/* li R4, 0 */
		/* 821D7B9Ch case   39:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D7B9Ch case   39:*/		return 0x821D7BA0;
		  /* 821D7BA0h */ case   40:  		/* mr R3, R16 */
		/* 821D7BA0h case   40:*/		regs.R3 = regs.R16;
		/* 821D7BA0h case   40:*/		return 0x821D7BA4;
		  /* 821D7BA4h */ case   41:  		/* mr R6, R27 */
		/* 821D7BA4h case   41:*/		regs.R6 = regs.R27;
		/* 821D7BA4h case   41:*/		return 0x821D7BA8;
		  /* 821D7BA8h */ case   42:  		/* bl -384432 */
		/* 821D7BA8h case   42:*/		regs.LR = 0x821D7BAC; return 0x82179DF8;
		/* 821D7BA8h case   42:*/		return 0x821D7BAC;
		  /* 821D7BACh */ case   43:  		/* b 1732 */
		/* 821D7BACh case   43:*/		return 0x821D8270;
		/* 821D7BACh case   43:*/		return 0x821D7BB0;
	}
	return 0x821D7BB0;
} // Block from 821D7B00h-821D7BB0h (44 instructions)

//////////////////////////////////////////////////////
// Block at 821D7BB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7BB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7BB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7BB0);
		  /* 821D7BB0h */ case    0:  		/* cmpwi CR6, R11, 107 */
		/* 821D7BB0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000006B);
		/* 821D7BB0h case    0:*/		return 0x821D7BB4;
		  /* 821D7BB4h */ case    1:  		/* bc 12, CR6_GT, 2712 */
		/* 821D7BB4h case    1:*/		if ( regs.CR[6].gt ) { return 0x821D864C;  }
		/* 821D7BB4h case    1:*/		return 0x821D7BB8;
		  /* 821D7BB8h */ case    2:  		/* bc 12, CR6_EQ, 2664 */
		/* 821D7BB8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821D8620;  }
		/* 821D7BB8h case    2:*/		return 0x821D7BBC;
		  /* 821D7BBCh */ case    3:  		/* cmpwi CR6, R11, 97 */
		/* 821D7BBCh case    3:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000061);
		/* 821D7BBCh case    3:*/		return 0x821D7BC0;
		  /* 821D7BC0h */ case    4:  		/* bc 12, CR6_EQ, 1708 */
		/* 821D7BC0h case    4:*/		if ( regs.CR[6].eq ) { return 0x821D826C;  }
		/* 821D7BC0h case    4:*/		return 0x821D7BC4;
		  /* 821D7BC4h */ case    5:  		/* cmpwi CR6, R11, 98 */
		/* 821D7BC4h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000062);
		/* 821D7BC4h case    5:*/		return 0x821D7BC8;
		  /* 821D7BC8h */ case    6:  		/* bc 12, CR6_EQ, 1492 */
		/* 821D7BC8h case    6:*/		if ( regs.CR[6].eq ) { return 0x821D819C;  }
		/* 821D7BC8h case    6:*/		return 0x821D7BCC;
		  /* 821D7BCCh */ case    7:  		/* cmpwi CR6, R11, 100 */
		/* 821D7BCCh case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000064);
		/* 821D7BCCh case    7:*/		return 0x821D7BD0;
		  /* 821D7BD0h */ case    8:  		/* bc 12, CR6_EQ, 672 */
		/* 821D7BD0h case    8:*/		if ( regs.CR[6].eq ) { return 0x821D7E70;  }
		/* 821D7BD0h case    8:*/		return 0x821D7BD4;
		  /* 821D7BD4h */ case    9:  		/* cmpwi CR6, R11, 103 */
		/* 821D7BD4h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000067);
		/* 821D7BD4h case    9:*/		return 0x821D7BD8;
		  /* 821D7BD8h */ case   10:  		/* bc 12, CR6_EQ, 240 */
		/* 821D7BD8h case   10:*/		if ( regs.CR[6].eq ) { return 0x821D7CC8;  }
		/* 821D7BD8h case   10:*/		return 0x821D7BDC;
		  /* 821D7BDCh */ case   11:  		/* cmpwi CR6, R11, 104 */
		/* 821D7BDCh case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000068);
		/* 821D7BDCh case   11:*/		return 0x821D7BE0;
		  /* 821D7BE0h */ case   12:  		/* bc 4, CR6_EQ, -3836 */
		/* 821D7BE0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D7BE0h case   12:*/		return 0x821D7BE4;
		  /* 821D7BE4h */ case   13:  		/* lwz R27, <#[R1 + 1908]> */
		/* 821D7BE4h case   13:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000774) );
		/* 821D7BE4h case   13:*/		return 0x821D7BE8;
		  /* 821D7BE8h */ case   14:  		/* mr R3, R16 */
		/* 821D7BE8h case   14:*/		regs.R3 = regs.R16;
		/* 821D7BE8h case   14:*/		return 0x821D7BEC;
		  /* 821D7BECh */ case   15:  		/* mr R4, R27 */
		/* 821D7BECh case   15:*/		regs.R4 = regs.R27;
		/* 821D7BECh case   15:*/		return 0x821D7BF0;
		  /* 821D7BF0h */ case   16:  		/* bl -392496 */
		/* 821D7BF0h case   16:*/		regs.LR = 0x821D7BF4; return 0x82177EC0;
		/* 821D7BF0h case   16:*/		return 0x821D7BF4;
		  /* 821D7BF4h */ case   17:  		/* lwz R11, <#[R3 + 4]> */
		/* 821D7BF4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821D7BF4h case   17:*/		return 0x821D7BF8;
		  /* 821D7BF8h */ case   18:  		/* rlwinm. R11, R11, 0, 10, 10 */
		/* 821D7BF8h case   18:*/		cpu::op::rlwinm<1,0,10,10>(regs,&regs.R11,regs.R11);
		/* 821D7BF8h case   18:*/		return 0x821D7BFC;
		  /* 821D7BFCh */ case   19:  		/* bc 12, CR0_EQ, -3864 */
		/* 821D7BFCh case   19:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D7BFCh case   19:*/		return 0x821D7C00;
		  /* 821D7C00h */ case   20:  		/* lwz R29, <#[R16 + 44]> */
		/* 821D7C00h case   20:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D7C00h case   20:*/		return 0x821D7C04;
		  /* 821D7C04h */ case   21:  		/* lwz R11, <#[R29 + 12]> */
		/* 821D7C04h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821D7C04h case   21:*/		return 0x821D7C08;
		  /* 821D7C08h */ case   22:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D7C08h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D7C08h case   22:*/		return 0x821D7C0C;
		  /* 821D7C0Ch */ case   23:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D7C0Ch case   23:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D7C0Ch case   23:*/		return 0x821D7C10;
		  /* 821D7C10h */ case   24:  		/* cmplwi CR6, R11, 16000 */
		/* 821D7C10h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D7C10h case   24:*/		return 0x821D7C14;
		  /* 821D7C14h */ case   25:  		/* bc 4, CR6_EQ, -3888 */
		/* 821D7C14h case   25:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D7C14h case   25:*/		return 0x821D7C18;
		  /* 821D7C18h */ case   26:  		/* addi R28, R16, 4 */
		/* 821D7C18h case   26:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R16,0x4);
		/* 821D7C18h case   26:*/		return 0x821D7C1C;
		  /* 821D7C1Ch */ case   27:  		/* lwz R31, <#[R28]> */
		/* 821D7C1Ch case   27:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000000) );
		/* 821D7C1Ch case   27:*/		return 0x821D7C20;
		  /* 821D7C20h */ case   28:  		/* cmplwi CR6, R31, 0 */
		/* 821D7C20h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D7C20h case   28:*/		return 0x821D7C24;
		  /* 821D7C24h */ case   29:  		/* bc 12, CR6_EQ, -3904 */
		/* 821D7C24h case   29:*/		if ( regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D7C24h case   29:*/		return 0x821D7C28;
		  /* 821D7C28h */ case   30:  		/* lwz R11, <#[R31 + 16]> */
		/* 821D7C28h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821D7C28h case   30:*/		return 0x821D7C2C;
		  /* 821D7C2Ch */ case   31:  		/* cmplwi CR6, R11, 0 */
		/* 821D7C2Ch case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D7C2Ch case   31:*/		return 0x821D7C30;
		  /* 821D7C30h */ case   32:  		/* bc 12, CR6_EQ, 132 */
		/* 821D7C30h case   32:*/		if ( regs.CR[6].eq ) { return 0x821D7CB4;  }
		/* 821D7C30h case   32:*/		return 0x821D7C34;
		  /* 821D7C34h */ case   33:  		/* lwz R11, <#[R31]> */
		/* 821D7C34h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D7C34h case   33:*/		return 0x821D7C38;
		  /* 821D7C38h */ case   34:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 821D7C38h case   34:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 821D7C38h case   34:*/		return 0x821D7C3C;
		  /* 821D7C3Ch */ case   35:  		/* bc 4, CR0_EQ, 16 */
		/* 821D7C3Ch case   35:*/		if ( !regs.CR[0].eq ) { return 0x821D7C4C;  }
		/* 821D7C3Ch case   35:*/		return 0x821D7C40;
		  /* 821D7C40h */ case   36:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821D7C40h case   36:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821D7C40h case   36:*/		return 0x821D7C44;
		  /* 821D7C44h */ case   37:  		/* li R11, 0 */
		/* 821D7C44h case   37:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D7C44h case   37:*/		return 0x821D7C48;
		  /* 821D7C48h */ case   38:  		/* bc 12, CR0_EQ, 8 */
		/* 821D7C48h case   38:*/		if ( regs.CR[0].eq ) { return 0x821D7C50;  }
		/* 821D7C48h case   38:*/		return 0x821D7C4C;
	}
	return 0x821D7C4C;
} // Block from 821D7BB0h-821D7C4Ch (39 instructions)

//////////////////////////////////////////////////////
// Block at 821D7C4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7C4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7C4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7C4C);
		  /* 821D7C4Ch */ case    0:  		/* li R11, 1 */
		/* 821D7C4Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D7C4Ch case    0:*/		return 0x821D7C50;
	}
	return 0x821D7C50;
} // Block from 821D7C4Ch-821D7C50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D7C50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7C50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7C50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7C50);
		  /* 821D7C50h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D7C50h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D7C50h case    0:*/		return 0x821D7C54;
		  /* 821D7C54h */ case    1:  		/* bc 12, CR0_EQ, 96 */
		/* 821D7C54h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D7CB4;  }
		/* 821D7C54h case    1:*/		return 0x821D7C58;
		  /* 821D7C58h */ case    2:  		/* lwz R30, <#[R31 + 16]> */
		/* 821D7C58h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000010) );
		/* 821D7C58h case    2:*/		return 0x821D7C5C;
		  /* 821D7C5Ch */ case    3:  		/* lwz R11, <#[R30 + 8]> */
		/* 821D7C5Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821D7C5Ch case    3:*/		return 0x821D7C60;
		  /* 821D7C60h */ case    4:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D7C60h case    4:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D7C60h case    4:*/		return 0x821D7C64;
		  /* 821D7C64h */ case    5:  		/* cmplwi CR6, R11, 1 */
		/* 821D7C64h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821D7C64h case    5:*/		return 0x821D7C68;
		  /* 821D7C68h */ case    6:  		/* bc 12, CR6_LT, 16 */
		/* 821D7C68h case    6:*/		if ( regs.CR[6].lt ) { return 0x821D7C78;  }
		/* 821D7C68h case    6:*/		return 0x821D7C6C;
		  /* 821D7C6Ch */ case    7:  		/* cmplwi CR6, R11, 82 */
		/* 821D7C6Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000052);
		/* 821D7C6Ch case    7:*/		return 0x821D7C70;
		  /* 821D7C70h */ case    8:  		/* li R11, 1 */
		/* 821D7C70h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D7C70h case    8:*/		return 0x821D7C74;
		  /* 821D7C74h */ case    9:  		/* bc 4, CR6_GT, 8 */
		/* 821D7C74h case    9:*/		if ( !regs.CR[6].gt ) { return 0x821D7C7C;  }
		/* 821D7C74h case    9:*/		return 0x821D7C78;
	}
	return 0x821D7C78;
} // Block from 821D7C50h-821D7C78h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821D7C78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7C78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7C78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7C78);
		  /* 821D7C78h */ case    0:  		/* li R11, 0 */
		/* 821D7C78h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D7C78h case    0:*/		return 0x821D7C7C;
	}
	return 0x821D7C7C;
} // Block from 821D7C78h-821D7C7Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D7C7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7C7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7C7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7C7C);
		  /* 821D7C7Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D7C7Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D7C7Ch case    0:*/		return 0x821D7C80;
		  /* 821D7C80h */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 821D7C80h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D7CB4;  }
		/* 821D7C80h case    1:*/		return 0x821D7C84;
		  /* 821D7C84h */ case    2:  		/* lwz R11, <#[R29]> */
		/* 821D7C84h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821D7C84h case    2:*/		return 0x821D7C88;
		  /* 821D7C88h */ case    3:  		/* mr R5, R31 */
		/* 821D7C88h case    3:*/		regs.R5 = regs.R31;
		/* 821D7C88h case    3:*/		return 0x821D7C8C;
		  /* 821D7C8Ch */ case    4:  		/* mr R4, R16 */
		/* 821D7C8Ch case    4:*/		regs.R4 = regs.R16;
		/* 821D7C8Ch case    4:*/		return 0x821D7C90;
		  /* 821D7C90h */ case    5:  		/* lwz R6, <#[R29 + 12]> */
		/* 821D7C90h case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x0000000C) );
		/* 821D7C90h case    5:*/		return 0x821D7C94;
		  /* 821D7C94h */ case    6:  		/* rlwinm R8, R11, 0, 27, 31 */
		/* 821D7C94h case    6:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R11);
		/* 821D7C94h case    6:*/		return 0x821D7C98;
		  /* 821D7C98h */ case    7:  		/* rlwinm R7, R11, 27, 24, 31 */
		/* 821D7C98h case    7:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R7,regs.R11);
		/* 821D7C98h case    7:*/		return 0x821D7C9C;
		  /* 821D7C9Ch */ case    8:  		/* mr R3, R27 */
		/* 821D7C9Ch case    8:*/		regs.R3 = regs.R27;
		/* 821D7C9Ch case    8:*/		return 0x821D7CA0;
		  /* 821D7CA0h */ case    9:  		/* bl 312072 */
		/* 821D7CA0h case    9:*/		regs.LR = 0x821D7CA4; return 0x82223FA8;
		/* 821D7CA0h case    9:*/		return 0x821D7CA4;
		  /* 821D7CA4h */ case   10:  		/* mr R4, R30 */
		/* 821D7CA4h case   10:*/		regs.R4 = regs.R30;
		/* 821D7CA4h case   10:*/		return 0x821D7CA8;
		  /* 821D7CA8h */ case   11:  		/* mr R3, R27 */
		/* 821D7CA8h case   11:*/		regs.R3 = regs.R27;
		/* 821D7CA8h case   11:*/		return 0x821D7CAC;
		  /* 821D7CACh */ case   12:  		/* lwz R5, <#[R1 + 112]> */
		/* 821D7CACh case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 821D7CACh case   12:*/		return 0x821D7CB0;
		  /* 821D7CB0h */ case   13:  		/* bl -49896 */
		/* 821D7CB0h case   13:*/		regs.LR = 0x821D7CB4; return 0x821CB9C8;
		/* 821D7CB0h case   13:*/		return 0x821D7CB4;
	}
	return 0x821D7CB4;
} // Block from 821D7C7Ch-821D7CB4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821D7CB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7CB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7CB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7CB4);
		  /* 821D7CB4h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821D7CB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821D7CB4h case    0:*/		return 0x821D7CB8;
		  /* 821D7CB8h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821D7CB8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821D7CB8h case    1:*/		return 0x821D7CBC;
		  /* 821D7CBCh */ case    2:  		/* bc 4, CR6_EQ, -160 */
		/* 821D7CBCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D7C1C;  }
		/* 821D7CBCh case    2:*/		return 0x821D7CC0;
		  /* 821D7CC0h */ case    3:  		/* addi R28, R31, 8 */
		/* 821D7CC0h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R31,0x8);
		/* 821D7CC0h case    3:*/		return 0x821D7CC4;
		  /* 821D7CC4h */ case    4:  		/* b -168 */
		/* 821D7CC4h case    4:*/		return 0x821D7C1C;
		/* 821D7CC4h case    4:*/		return 0x821D7CC8;
	}
	return 0x821D7CC8;
} // Block from 821D7CB4h-821D7CC8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D7CC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7CC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7CC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7CC8);
		  /* 821D7CC8h */ case    0:  		/* lwz R29, <#[R1 + 1908]> */
		/* 821D7CC8h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000774) );
		/* 821D7CC8h case    0:*/		return 0x821D7CCC;
		  /* 821D7CCCh */ case    1:  		/* mr R3, R16 */
		/* 821D7CCCh case    1:*/		regs.R3 = regs.R16;
		/* 821D7CCCh case    1:*/		return 0x821D7CD0;
		  /* 821D7CD0h */ case    2:  		/* mr R4, R29 */
		/* 821D7CD0h case    2:*/		regs.R4 = regs.R29;
		/* 821D7CD0h case    2:*/		return 0x821D7CD4;
		  /* 821D7CD4h */ case    3:  		/* bl -107124 */
		/* 821D7CD4h case    3:*/		regs.LR = 0x821D7CD8; return 0x821BDA60;
		/* 821D7CD4h case    3:*/		return 0x821D7CD8;
		  /* 821D7CD8h */ case    4:  		/* or. R30, R3, R3 */
		/* 821D7CD8h case    4:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 821D7CD8h case    4:*/		return 0x821D7CDC;
		  /* 821D7CDCh */ case    5:  		/* bc 12, CR0_LT, -4088 */
		/* 821D7CDCh case    5:*/		if ( regs.CR[0].lt ) { return 0x821D6CE4;  }
		/* 821D7CDCh case    5:*/		return 0x821D7CE0;
		  /* 821D7CE0h */ case    6:  		/* cmpwi CR6, R30, 1 */
		/* 821D7CE0h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000001);
		/* 821D7CE0h case    6:*/		return 0x821D7CE4;
		  /* 821D7CE4h */ case    7:  		/* bc 4, CR6_GT, 240 */
		/* 821D7CE4h case    7:*/		if ( !regs.CR[6].gt ) { return 0x821D7DD4;  }
		/* 821D7CE4h case    7:*/		return 0x821D7CE8;
		  /* 821D7CE8h */ case    8:  		/* cmpwi CR6, R30, 2 */
		/* 821D7CE8h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000002);
		/* 821D7CE8h case    8:*/		return 0x821D7CEC;
		  /* 821D7CECh */ case    9:  		/* bc 12, CR6_EQ, 140 */
		/* 821D7CECh case    9:*/		if ( regs.CR[6].eq ) { return 0x821D7D78;  }
		/* 821D7CECh case    9:*/		return 0x821D7CF0;
		  /* 821D7CF0h */ case   10:  		/* cmpwi CR6, R30, 3 */
		/* 821D7CF0h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000003);
		/* 821D7CF0h case   10:*/		return 0x821D7CF4;
		  /* 821D7CF4h */ case   11:  		/* bc 4, CR6_GT, -4112 */
		/* 821D7CF4h case   11:*/		if ( !regs.CR[6].gt ) { return 0x821D6CE4;  }
		/* 821D7CF4h case   11:*/		return 0x821D7CF8;
		  /* 821D7CF8h */ case   12:  		/* cmpwi CR6, R30, 5 */
		/* 821D7CF8h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000005);
		/* 821D7CF8h case   12:*/		return 0x821D7CFC;
		  /* 821D7CFCh */ case   13:  		/* bc 12, CR6_GT, -4120 */
		/* 821D7CFCh case   13:*/		if ( regs.CR[6].gt ) { return 0x821D6CE4;  }
		/* 821D7CFCh case   13:*/		return 0x821D7D00;
		  /* 821D7D00h */ case   14:  		/* lwz R31, <#[R16 + 44]> */
		/* 821D7D00h case   14:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D7D00h case   14:*/		return 0x821D7D04;
		  /* 821D7D04h */ case   15:  		/* lwz R11, <#[R31 + 12]> */
		/* 821D7D04h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D7D04h case   15:*/		return 0x821D7D08;
		  /* 821D7D08h */ case   16:  		/* lwz R10, <#[R31]> */
		/* 821D7D08h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821D7D08h case   16:*/		return 0x821D7D0C;
		  /* 821D7D0Ch */ case   17:  		/* rlwinm R9, R10, 29, 28, 29 */
		/* 821D7D0Ch case   17:*/		cpu::op::rlwinm<0,29,28,29>(regs,&regs.R9,regs.R10);
		/* 821D7D0Ch case   17:*/		return 0x821D7D10;
		  /* 821D7D10h */ case   18:  		/* rlwinm R4, R10, 0, 27, 31 */
		/* 821D7D10h case   18:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R10);
		/* 821D7D10h case   18:*/		return 0x821D7D14;
		  /* 821D7D14h */ case   19:  		/* lhz R11, <#[R11 + 14]> */
		/* 821D7D14h case   19:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000E) );
		/* 821D7D14h case   19:*/		return 0x821D7D18;
		  /* 821D7D18h */ case   20:  		/* srw R11, R11, R9 */
		/* 821D7D18h case   20:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D7D18h case   20:*/		return 0x821D7D1C;
		  /* 821D7D1Ch */ case   21:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821D7D1Ch case   21:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821D7D1Ch case   21:*/		return 0x821D7D20;
		  /* 821D7D20h */ case   22:  		/* bl -248992 */
		/* 821D7D20h case   22:*/		regs.LR = 0x821D7D24; return 0x8219B080;
		/* 821D7D20h case   22:*/		return 0x821D7D24;
		  /* 821D7D24h */ case   23:  		/* rlwinm. R11, R3, 0, 29, 29 */
		/* 821D7D24h case   23:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R3);
		/* 821D7D24h case   23:*/		return 0x821D7D28;
		  /* 821D7D28h */ case   24:  		/* bc 12, CR0_EQ, -4164 */
		/* 821D7D28h case   24:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D7D28h case   24:*/		return 0x821D7D2C;
		  /* 821D7D2Ch */ case   25:  		/* cmpwi CR6, R30, 4 */
		/* 821D7D2Ch case   25:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000004);
		/* 821D7D2Ch case   25:*/		return 0x821D7D30;
		  /* 821D7D30h */ case   26:  		/* bc 12, CR6_EQ, 12 */
		/* 821D7D30h case   26:*/		if ( regs.CR[6].eq ) { return 0x821D7D3C;  }
		/* 821D7D30h case   26:*/		return 0x821D7D34;
		  /* 821D7D34h */ case   27:  		/* rlwinm. R11, R3, 0, 30, 30 */
		/* 821D7D34h case   27:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R3);
		/* 821D7D34h case   27:*/		return 0x821D7D38;
		  /* 821D7D38h */ case   28:  		/* bc 12, CR0_EQ, -4180 */
		/* 821D7D38h case   28:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D7D38h case   28:*/		return 0x821D7D3C;
	}
	return 0x821D7D3C;
} // Block from 821D7CC8h-821D7D3Ch (29 instructions)

//////////////////////////////////////////////////////
// Block at 821D7D3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7D3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7D3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7D3C);
		  /* 821D7D3Ch */ case    0:  		/* li R10, 0 */
		/* 821D7D3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D7D3Ch case    0:*/		return 0x821D7D40;
		  /* 821D7D40h */ case    1:  		/* mr R9, R16 */
		/* 821D7D40h case    1:*/		regs.R9 = regs.R16;
		/* 821D7D40h case    1:*/		return 0x821D7D44;
		  /* 821D7D44h */ case    2:  		/* li R8, 0 */
		/* 821D7D44h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D7D44h case    2:*/		return 0x821D7D48;
		  /* 821D7D48h */ case    3:  		/* addi R7, R1, 612 */
		/* 821D7D48h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x264);
		/* 821D7D48h case    3:*/		return 0x821D7D4C;
		  /* 821D7D4Ch */ case    4:  		/* addi R6, R1, 628 */
		/* 821D7D4Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x274);
		/* 821D7D4Ch case    4:*/		return 0x821D7D50;
		  /* 821D7D50h */ case    5:  		/* addi R5, R1, 620 */
		/* 821D7D50h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x26C);
		/* 821D7D50h case    5:*/		return 0x821D7D54;
		  /* 821D7D54h */ case    6:  		/* li R4, 0 */
		/* 821D7D54h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D7D54h case    6:*/		return 0x821D7D58;
		  /* 821D7D58h */ case    7:  		/* mr R3, R31 */
		/* 821D7D58h case    7:*/		regs.R3 = regs.R31;
		/* 821D7D58h case    7:*/		return 0x821D7D5C;
		  /* 821D7D5Ch */ case    8:  		/* bl 309108 */
		/* 821D7D5Ch case    8:*/		regs.LR = 0x821D7D60; return 0x822234D0;
		/* 821D7D5Ch case    8:*/		return 0x821D7D60;
		  /* 821D7D60h */ case    9:  		/* lwz R11, <#[R1 + 628]> */
		/* 821D7D60h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000274) );
		/* 821D7D60h case    9:*/		return 0x821D7D64;
		  /* 821D7D64h */ case   10:  		/* lwz R7, <#[R1 + 612]> */
		/* 821D7D64h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000264) );
		/* 821D7D64h case   10:*/		return 0x821D7D68;
		  /* 821D7D68h */ case   11:  		/* mr R3, R29 */
		/* 821D7D68h case   11:*/		regs.R3 = regs.R29;
		/* 821D7D68h case   11:*/		return 0x821D7D6C;
		  /* 821D7D6Ch */ case   12:  		/* lwz R5, <#[R1 + 620]> */
		/* 821D7D6Ch case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000026C) );
		/* 821D7D6Ch case   12:*/		return 0x821D7D70;
		  /* 821D7D70h */ case   13:  		/* ori R6, R11, 228 */
		/* 821D7D70h case   13:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R11,0xE4);
		/* 821D7D70h case   13:*/		return 0x821D7D74;
		  /* 821D7D74h */ case   14:  		/* b 5644 */
		/* 821D7D74h case   14:*/		return 0x821D9380;
		/* 821D7D74h case   14:*/		return 0x821D7D78;
	}
	return 0x821D7D78;
} // Block from 821D7D3Ch-821D7D78h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821D7D78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7D78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7D78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7D78);
		  /* 821D7D78h */ case    0:  		/* li R10, 0 */
		/* 821D7D78h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D7D78h case    0:*/		return 0x821D7D7C;
		  /* 821D7D7Ch */ case    1:  		/* lwz R3, <#[R16 + 44]> */
		/* 821D7D7Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D7D7Ch case    1:*/		return 0x821D7D80;
		  /* 821D7D80h */ case    2:  		/* mr R9, R16 */
		/* 821D7D80h case    2:*/		regs.R9 = regs.R16;
		/* 821D7D80h case    2:*/		return 0x821D7D84;
		  /* 821D7D84h */ case    3:  		/* li R8, 0 */
		/* 821D7D84h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D7D84h case    3:*/		return 0x821D7D88;
		  /* 821D7D88h */ case    4:  		/* addi R7, R1, 644 */
		/* 821D7D88h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x284);
		/* 821D7D88h case    4:*/		return 0x821D7D8C;
		  /* 821D7D8Ch */ case    5:  		/* addi R6, R1, 636 */
		/* 821D7D8Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x27C);
		/* 821D7D8Ch case    5:*/		return 0x821D7D90;
		  /* 821D7D90h */ case    6:  		/* addi R5, R1, 652 */
		/* 821D7D90h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x28C);
		/* 821D7D90h case    6:*/		return 0x821D7D94;
		  /* 821D7D94h */ case    7:  		/* li R4, 0 */
		/* 821D7D94h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D7D94h case    7:*/		return 0x821D7D98;
		  /* 821D7D98h */ case    8:  		/* bl 309048 */
		/* 821D7D98h case    8:*/		regs.LR = 0x821D7D9C; return 0x822234D0;
		/* 821D7D98h case    8:*/		return 0x821D7D9C;
		  /* 821D7D9Ch */ case    9:  		/* addi R6, R1, 1576 */
		/* 821D7D9Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x628);
		/* 821D7D9Ch case    9:*/		return 0x821D7DA0;
		  /* 821D7DA0h */ case   10:  		/* addi R5, R1, 1328 */
		/* 821D7DA0h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x530);
		/* 821D7DA0h case   10:*/		return 0x821D7DA4;
		  /* 821D7DA4h */ case   11:  		/* lwz R3, <#[R16 + 44]> */
		/* 821D7DA4h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D7DA4h case   11:*/		return 0x821D7DA8;
		  /* 821D7DA8h */ case   12:  		/* li R4, 0 */
		/* 821D7DA8h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D7DA8h case   12:*/		return 0x821D7DAC;
		  /* 821D7DACh */ case   13:  		/* bl 307068 */
		/* 821D7DACh case   13:*/		regs.LR = 0x821D7DB0; return 0x82222D28;
		/* 821D7DACh case   13:*/		return 0x821D7DB0;
		  /* 821D7DB0h */ case   14:  		/* lfd FR0, <#[R1 + 1328]> */
		/* 821D7DB0h case   14:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000530) );
		/* 821D7DB0h case   14:*/		return 0x821D7DB4;
		  /* 821D7DB4h */ case   15:  		/* fcmpu CR6, FR0, FR27 */
		/* 821D7DB4h case   15:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR27);
		/* 821D7DB4h case   15:*/		return 0x821D7DB8;
		  /* 821D7DB8h */ case   16:  		/* bc 12, CR6_LT, -4308 */
		/* 821D7DB8h case   16:*/		if ( regs.CR[6].lt ) { return 0x821D6CE4;  }
		/* 821D7DB8h case   16:*/		return 0x821D7DBC;
		  /* 821D7DBCh */ case   17:  		/* lwz R11, <#[R1 + 636]> */
		/* 821D7DBCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000027C) );
		/* 821D7DBCh case   17:*/		return 0x821D7DC0;
		  /* 821D7DC0h */ case   18:  		/* mr R3, R29 */
		/* 821D7DC0h case   18:*/		regs.R3 = regs.R29;
		/* 821D7DC0h case   18:*/		return 0x821D7DC4;
		  /* 821D7DC4h */ case   19:  		/* lwz R7, <#[R1 + 644]> */
		/* 821D7DC4h case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000284) );
		/* 821D7DC4h case   19:*/		return 0x821D7DC8;
		  /* 821D7DC8h */ case   20:  		/* lwz R5, <#[R1 + 652]> */
		/* 821D7DC8h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000028C) );
		/* 821D7DC8h case   20:*/		return 0x821D7DCC;
		  /* 821D7DCCh */ case   21:  		/* ori R6, R11, 228 */
		/* 821D7DCCh case   21:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R11,0xE4);
		/* 821D7DCCh case   21:*/		return 0x821D7DD0;
		  /* 821D7DD0h */ case   22:  		/* b 5552 */
		/* 821D7DD0h case   22:*/		return 0x821D9380;
		/* 821D7DD0h case   22:*/		return 0x821D7DD4;
	}
	return 0x821D7DD4;
} // Block from 821D7D78h-821D7DD4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821D7DD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7DD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7DD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7DD4);
		  /* 821D7DD4h */ case    0:  		/* li R10, 0 */
		/* 821D7DD4h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D7DD4h case    0:*/		return 0x821D7DD8;
		  /* 821D7DD8h */ case    1:  		/* lwz R3, <#[R16 + 44]> */
		/* 821D7DD8h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D7DD8h case    1:*/		return 0x821D7DDC;
		  /* 821D7DDCh */ case    2:  		/* mr R9, R16 */
		/* 821D7DDCh case    2:*/		regs.R9 = regs.R16;
		/* 821D7DDCh case    2:*/		return 0x821D7DE0;
		  /* 821D7DE0h */ case    3:  		/* li R8, 0 */
		/* 821D7DE0h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D7DE0h case    3:*/		return 0x821D7DE4;
		  /* 821D7DE4h */ case    4:  		/* addi R7, R1, 388 */
		/* 821D7DE4h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x184);
		/* 821D7DE4h case    4:*/		return 0x821D7DE8;
		  /* 821D7DE8h */ case    5:  		/* addi R6, R1, 380 */
		/* 821D7DE8h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x17C);
		/* 821D7DE8h case    5:*/		return 0x821D7DEC;
		  /* 821D7DECh */ case    6:  		/* addi R5, R1, 660 */
		/* 821D7DECh case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x294);
		/* 821D7DECh case    6:*/		return 0x821D7DF0;
		  /* 821D7DF0h */ case    7:  		/* li R4, 0 */
		/* 821D7DF0h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D7DF0h case    7:*/		return 0x821D7DF4;
		  /* 821D7DF4h */ case    8:  		/* bl 308956 */
		/* 821D7DF4h case    8:*/		regs.LR = 0x821D7DF8; return 0x822234D0;
		/* 821D7DF4h case    8:*/		return 0x821D7DF8;
		  /* 821D7DF8h */ case    9:  		/* lwz R31, <#[R1 + 660]> */
		/* 821D7DF8h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000294) );
		/* 821D7DF8h case    9:*/		return 0x821D7DFC;
		  /* 821D7DFCh */ case   10:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D7DFCh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D7DFCh case   10:*/		return 0x821D7E00;
		  /* 821D7E00h */ case   11:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D7E00h case   11:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D7E00h case   11:*/		return 0x821D7E04;
		  /* 821D7E04h */ case   12:  		/* cmplwi CR6, R11, 15872 */
		/* 821D7E04h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E00);
		/* 821D7E04h case   12:*/		return 0x821D7E08;
		  /* 821D7E08h */ case   13:  		/* bc 12, CR6_EQ, 64 */
		/* 821D7E08h case   13:*/		if ( regs.CR[6].eq ) { return 0x821D7E48;  }
		/* 821D7E08h case   13:*/		return 0x821D7E0C;
		  /* 821D7E0Ch */ case   14:  		/* lwz R11, <#[R16 + 44]> */
		/* 821D7E0Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D7E0Ch case   14:*/		return 0x821D7E10;
		  /* 821D7E10h */ case   15:  		/* lwz R10, <#[R11 + 12]> */
		/* 821D7E10h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D7E10h case   15:*/		return 0x821D7E14;
		  /* 821D7E14h */ case   16:  		/* lwz R11, <#[R11]> */
		/* 821D7E14h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821D7E14h case   16:*/		return 0x821D7E18;
		  /* 821D7E18h */ case   17:  		/* rlwinm R9, R11, 29, 28, 29 */
		/* 821D7E18h case   17:*/		cpu::op::rlwinm<0,29,28,29>(regs,&regs.R9,regs.R11);
		/* 821D7E18h case   17:*/		return 0x821D7E1C;
		  /* 821D7E1Ch */ case   18:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 821D7E1Ch case   18:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 821D7E1Ch case   18:*/		return 0x821D7E20;
		  /* 821D7E20h */ case   19:  		/* lhz R11, <#[R10 + 14]> */
		/* 821D7E20h case   19:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000E) );
		/* 821D7E20h case   19:*/		return 0x821D7E24;
		  /* 821D7E24h */ case   20:  		/* srw R11, R11, R9 */
		/* 821D7E24h case   20:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D7E24h case   20:*/		return 0x821D7E28;
		  /* 821D7E28h */ case   21:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821D7E28h case   21:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821D7E28h case   21:*/		return 0x821D7E2C;
		  /* 821D7E2Ch */ case   22:  		/* bl -249260 */
		/* 821D7E2Ch case   22:*/		regs.LR = 0x821D7E30; return 0x8219B080;
		/* 821D7E2Ch case   22:*/		return 0x821D7E30;
		  /* 821D7E30h */ case   23:  		/* rlwinm. R11, R3, 0, 29, 29 */
		/* 821D7E30h case   23:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R3);
		/* 821D7E30h case   23:*/		return 0x821D7E34;
		  /* 821D7E34h */ case   24:  		/* bc 12, CR0_EQ, -4432 */
		/* 821D7E34h case   24:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D7E34h case   24:*/		return 0x821D7E38;
		  /* 821D7E38h */ case   25:  		/* cmpwi CR6, R30, 0 */
		/* 821D7E38h case   25:*/		cpu::op::cmpwi<6>(regs,regs.R30,0x00000000);
		/* 821D7E38h case   25:*/		return 0x821D7E3C;
		  /* 821D7E3Ch */ case   26:  		/* bc 12, CR6_EQ, 12 */
		/* 821D7E3Ch case   26:*/		if ( regs.CR[6].eq ) { return 0x821D7E48;  }
		/* 821D7E3Ch case   26:*/		return 0x821D7E40;
		  /* 821D7E40h */ case   27:  		/* rlwinm. R11, R3, 0, 30, 30 */
		/* 821D7E40h case   27:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R3);
		/* 821D7E40h case   27:*/		return 0x821D7E44;
		  /* 821D7E44h */ case   28:  		/* bc 12, CR0_EQ, -4448 */
		/* 821D7E44h case   28:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D7E44h case   28:*/		return 0x821D7E48;
	}
	return 0x821D7E48;
} // Block from 821D7DD4h-821D7E48h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821D7E48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7E48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7E48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7E48);
		  /* 821D7E48h */ case    0:  		/* lwz R11, <#[R1 + 380]> */
		/* 821D7E48h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000017C) );
		/* 821D7E48h case    0:*/		return 0x821D7E4C;
		  /* 821D7E4Ch */ case    1:  		/* mr R5, R31 */
		/* 821D7E4Ch case    1:*/		regs.R5 = regs.R31;
		/* 821D7E4Ch case    1:*/		return 0x821D7E50;
		  /* 821D7E50h */ case    2:  		/* mr R4, R16 */
		/* 821D7E50h case    2:*/		regs.R4 = regs.R16;
		/* 821D7E50h case    2:*/		return 0x821D7E54;
		  /* 821D7E54h */ case    3:  		/* lwz R9, <#[R1 + 1924]> */
		/* 821D7E54h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000784) );
		/* 821D7E54h case    3:*/		return 0x821D7E58;
		  /* 821D7E58h */ case    4:  		/* ori R6, R11, 228 */
		/* 821D7E58h case    4:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R11,0xE4);
		/* 821D7E58h case    4:*/		return 0x821D7E5C;
		  /* 821D7E5Ch */ case    5:  		/* lwz R8, <#[R1 + 112]> */
		/* 821D7E5Ch case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000070) );
		/* 821D7E5Ch case    5:*/		return 0x821D7E60;
		  /* 821D7E60h */ case    6:  		/* mr R3, R29 */
		/* 821D7E60h case    6:*/		regs.R3 = regs.R29;
		/* 821D7E60h case    6:*/		return 0x821D7E64;
		  /* 821D7E64h */ case    7:  		/* lwz R7, <#[R1 + 388]> */
		/* 821D7E64h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000184) );
		/* 821D7E64h case    7:*/		return 0x821D7E68;
		  /* 821D7E68h */ case    8:  		/* bl -106160 */
		/* 821D7E68h case    8:*/		regs.LR = 0x821D7E6C; return 0x821BDFB8;
		/* 821D7E68h case    8:*/		return 0x821D7E6C;
		  /* 821D7E6Ch */ case    9:  		/* b -4488 */
		/* 821D7E6Ch case    9:*/		return 0x821D6CE4;
		/* 821D7E6Ch case    9:*/		return 0x821D7E70;
	}
	return 0x821D7E70;
} // Block from 821D7E48h-821D7E70h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821D7E70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7E70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7E70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7E70);
		  /* 821D7E70h */ case    0:  		/* lwz R31, <#[R16 + 4]> */
		/* 821D7E70h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R16 + 0x00000004) );
		/* 821D7E70h case    0:*/		return 0x821D7E74;
		  /* 821D7E74h */ case    1:  		/* li R30, 0 */
		/* 821D7E74h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821D7E74h case    1:*/		return 0x821D7E78;
		  /* 821D7E78h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 821D7E78h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D7E78h case    2:*/		return 0x821D7E7C;
		  /* 821D7E7Ch */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 821D7E7Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821D7EAC;  }
		/* 821D7E7Ch case    3:*/		return 0x821D7E80;
		  /* 821D7E80h */ case    4:  		/* lwz R11, <#[R31 + 16]> */
		/* 821D7E80h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821D7E80h case    4:*/		return 0x821D7E84;
		  /* 821D7E84h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821D7E84h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D7E84h case    5:*/		return 0x821D7E88;
		  /* 821D7E88h */ case    6:  		/* bc 12, CR6_EQ, 28 */
		/* 821D7E88h case    6:*/		if ( regs.CR[6].eq ) { return 0x821D7EA4;  }
		/* 821D7E88h case    6:*/		return 0x821D7E8C;
		  /* 821D7E8Ch */ case    7:  		/* lwz R11, <#[R31]> */
		/* 821D7E8Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D7E8Ch case    7:*/		return 0x821D7E90;
		  /* 821D7E90h */ case    8:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821D7E90h case    8:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821D7E90h case    8:*/		return 0x821D7E94;
		  /* 821D7E94h */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 821D7E94h case    9:*/		if ( regs.CR[0].eq ) { return 0x821D7EA4;  }
		/* 821D7E94h case    9:*/		return 0x821D7E98;
		  /* 821D7E98h */ case   10:  		/* mr R3, R31 */
		/* 821D7E98h case   10:*/		regs.R3 = regs.R31;
		/* 821D7E98h case   10:*/		return 0x821D7E9C;
		  /* 821D7E9Ch */ case   11:  		/* bl -474204 */
		/* 821D7E9Ch case   11:*/		regs.LR = 0x821D7EA0; return 0x82164240;
		/* 821D7E9Ch case   11:*/		return 0x821D7EA0;
		  /* 821D7EA0h */ case   12:  		/* or R30, R3, R30 */
		/* 821D7EA0h case   12:*/		cpu::op::or<0>(regs,&regs.R30,regs.R3,regs.R30);
		/* 821D7EA0h case   12:*/		return 0x821D7EA4;
	}
	return 0x821D7EA4;
} // Block from 821D7E70h-821D7EA4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821D7EA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7EA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7EA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7EA4);
		  /* 821D7EA4h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 821D7EA4h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 821D7EA4h case    0:*/		return 0x821D7EA8;
		  /* 821D7EA8h */ case    1:  		/* b -48 */
		/* 821D7EA8h case    1:*/		return 0x821D7E78;
		/* 821D7EA8h case    1:*/		return 0x821D7EAC;
	}
	return 0x821D7EAC;
} // Block from 821D7EA4h-821D7EACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D7EACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7EAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7EAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7EAC);
		  /* 821D7EACh */ case    0:  		/* rlwinm. R11, R30, 0, 30, 31 */
		/* 821D7EACh case    0:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R11,regs.R30);
		/* 821D7EACh case    0:*/		return 0x821D7EB0;
		  /* 821D7EB0h */ case    1:  		/* bc 4, CR0_EQ, 204 */
		/* 821D7EB0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821D7F7C;  }
		/* 821D7EB0h case    1:*/		return 0x821D7EB4;
		  /* 821D7EB4h */ case    2:  		/* lwz R29, <#[R1 + 1908]> */
		/* 821D7EB4h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000774) );
		/* 821D7EB4h case    2:*/		return 0x821D7EB8;
		  /* 821D7EB8h */ case    3:  		/* mr R4, R16 */
		/* 821D7EB8h case    3:*/		regs.R4 = regs.R16;
		/* 821D7EB8h case    3:*/		return 0x821D7EBC;
		  /* 821D7EBCh */ case    4:  		/* mr R3, R29 */
		/* 821D7EBCh case    4:*/		regs.R3 = regs.R29;
		/* 821D7EBCh case    4:*/		return 0x821D7EC0;
		  /* 821D7EC0h */ case    5:  		/* bl 314592 */
		/* 821D7EC0h case    5:*/		regs.LR = 0x821D7EC4; return 0x82224BA0;
		/* 821D7EC0h case    5:*/		return 0x821D7EC4;
		  /* 821D7EC4h */ case    6:  		/* li R4, 0 */
		/* 821D7EC4h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D7EC4h case    6:*/		return 0x821D7EC8;
		  /* 821D7EC8h */ case    7:  		/* lwz R5, <#[R16 + 44]> */
		/* 821D7EC8h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D7EC8h case    7:*/		return 0x821D7ECC;
		  /* 821D7ECCh */ case    8:  		/* mr R31, R3 */
		/* 821D7ECCh case    8:*/		regs.R31 = regs.R3;
		/* 821D7ECCh case    8:*/		return 0x821D7ED0;
		  /* 821D7ED0h */ case    9:  		/* bl -423968 */
		/* 821D7ED0h case    9:*/		regs.LR = 0x821D7ED4; return 0x821706B0;
		/* 821D7ED0h case    9:*/		return 0x821D7ED4;
		  /* 821D7ED4h */ case   10:  		/* li R5, 1 */
		/* 821D7ED4h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821D7ED4h case   10:*/		return 0x821D7ED8;
		  /* 821D7ED8h */ case   11:  		/* mr R3, R29 */
		/* 821D7ED8h case   11:*/		regs.R3 = regs.R29;
		/* 821D7ED8h case   11:*/		return 0x821D7EDC;
		  /* 821D7EDCh */ case   12:  		/* lwz R4, <#[R16 + 48]> */
		/* 821D7EDCh case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R16 + 0x00000030) );
		/* 821D7EDCh case   12:*/		return 0x821D7EE0;
		  /* 821D7EE0h */ case   13:  		/* bl 88736 */
		/* 821D7EE0h case   13:*/		regs.LR = 0x821D7EE4; return 0x821ED980;
		/* 821D7EE0h case   13:*/		return 0x821D7EE4;
		  /* 821D7EE4h */ case   14:  		/* mr R5, R3 */
		/* 821D7EE4h case   14:*/		regs.R5 = regs.R3;
		/* 821D7EE4h case   14:*/		return 0x821D7EE8;
		  /* 821D7EE8h */ case   15:  		/* li R4, 1 */
		/* 821D7EE8h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D7EE8h case   15:*/		return 0x821D7EEC;
		  /* 821D7EECh */ case   16:  		/* mr R3, R31 */
		/* 821D7EECh case   16:*/		regs.R3 = regs.R31;
		/* 821D7EECh case   16:*/		return 0x821D7EF0;
		  /* 821D7EF0h */ case   17:  		/* bl -424000 */
		/* 821D7EF0h case   17:*/		regs.LR = 0x821D7EF4; return 0x821706B0;
		/* 821D7EF0h case   17:*/		return 0x821D7EF4;
		  /* 821D7EF4h */ case   18:  		/* rlwinm R11, R16, 0, 0, 30 */
		/* 821D7EF4h case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R16);
		/* 821D7EF4h case   18:*/		return 0x821D7EF8;
		  /* 821D7EF8h */ case   19:  		/* rlwinm R10, R31, 0, 0, 30 */
		/* 821D7EF8h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R31);
		/* 821D7EF8h case   19:*/		return 0x821D7EFC;
		  /* 821D7EFCh */ case   20:  		/* addi R11, R11, 36 */
		/* 821D7EFCh case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821D7EFCh case   20:*/		return 0x821D7F00;
		  /* 821D7F00h */ case   21:  		/* addi R10, R10, 36 */
		/* 821D7F00h case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821D7F00h case   21:*/		return 0x821D7F04;
		  /* 821D7F04h */ case   22:  		/* addi R8, R11, -36 */
		/* 821D7F04h case   22:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821D7F04h case   22:*/		return 0x821D7F08;
		  /* 821D7F08h */ case   23:  		/* addi R7, R10, -36 */
		/* 821D7F08h case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFDC);
		/* 821D7F08h case   23:*/		return 0x821D7F0C;
		  /* 821D7F0Ch */ case   24:  		/* addi R9, R10, 4 */
		/* 821D7F0Ch case   24:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821D7F0Ch case   24:*/		return 0x821D7F10;
		  /* 821D7F10h */ case   25:  		/* lwz R6, <#[R11]> */
		/* 821D7F10h case   25:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821D7F10h case   25:*/		return 0x821D7F14;
		  /* 821D7F14h */ case   26:  		/* stw R6, <#[R10]> */
		/* 821D7F14h case   26:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 821D7F14h case   26:*/		return 0x821D7F18;
		  /* 821D7F18h */ case   27:  		/* lwz R6, <#[R11]> */
		/* 821D7F18h case   27:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821D7F18h case   27:*/		return 0x821D7F1C;
		  /* 821D7F1Ch */ case   28:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 821D7F1Ch case   28:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 821D7F1Ch case   28:*/		return 0x821D7F20;
		  /* 821D7F20h */ case   29:  		/* stw R7, <#[R6]> */
		/* 821D7F20h case   29:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R6 + 0x00000000) );
		/* 821D7F20h case   29:*/		return 0x821D7F24;
		  /* 821D7F24h */ case   30:  		/* stw R8, <#[R10 + 4]> */
		/* 821D7F24h case   30:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821D7F24h case   30:*/		return 0x821D7F28;
		  /* 821D7F28h */ case   31:  		/* stw R9, <#[R11]> */
		/* 821D7F28h case   31:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821D7F28h case   31:*/		return 0x821D7F2C;
		  /* 821D7F2Ch */ case   32:  		/* lwz R30, <#[R16]> */
		/* 821D7F2Ch case   32:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R16 + 0x00000000) );
		/* 821D7F2Ch case   32:*/		return 0x821D7F30;
		  /* 821D7F30h */ case   33:  		/* cmplwi CR6, R30, 0 */
		/* 821D7F30h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D7F30h case   33:*/		return 0x821D7F34;
		  /* 821D7F34h */ case   34:  		/* bc 12, CR6_EQ, 60 */
		/* 821D7F34h case   34:*/		if ( regs.CR[6].eq ) { return 0x821D7F70;  }
		/* 821D7F34h case   34:*/		return 0x821D7F38;
		  /* 821D7F38h */ case   35:  		/* lwz R11, <#[R30]> */
		/* 821D7F38h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821D7F38h case   35:*/		return 0x821D7F3C;
		  /* 821D7F3Ch */ case   36:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 821D7F3Ch case   36:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 821D7F3Ch case   36:*/		return 0x821D7F40;
		  /* 821D7F40h */ case   37:  		/* bc 12, CR0_EQ, 16 */
		/* 821D7F40h case   37:*/		if ( regs.CR[0].eq ) { return 0x821D7F50;  }
		/* 821D7F40h case   37:*/		return 0x821D7F44;
		  /* 821D7F44h */ case   38:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821D7F44h case   38:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821D7F44h case   38:*/		return 0x821D7F48;
		  /* 821D7F48h */ case   39:  		/* li R11, 1 */
		/* 821D7F48h case   39:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D7F48h case   39:*/		return 0x821D7F4C;
		  /* 821D7F4Ch */ case   40:  		/* bc 12, CR0_EQ, 8 */
		/* 821D7F4Ch case   40:*/		if ( regs.CR[0].eq ) { return 0x821D7F54;  }
		/* 821D7F4Ch case   40:*/		return 0x821D7F50;
	}
	return 0x821D7F50;
} // Block from 821D7EACh-821D7F50h (41 instructions)

//////////////////////////////////////////////////////
// Block at 821D7F50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7F50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7F50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7F50);
		  /* 821D7F50h */ case    0:  		/* li R11, 0 */
		/* 821D7F50h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D7F50h case    0:*/		return 0x821D7F54;
	}
	return 0x821D7F54;
} // Block from 821D7F50h-821D7F54h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D7F54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7F54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7F54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7F54);
		  /* 821D7F54h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D7F54h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D7F54h case    0:*/		return 0x821D7F58;
		  /* 821D7F58h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821D7F58h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D7F68;  }
		/* 821D7F58h case    1:*/		return 0x821D7F5C;
		  /* 821D7F5Ch */ case    2:  		/* mr R4, R30 */
		/* 821D7F5Ch case    2:*/		regs.R4 = regs.R30;
		/* 821D7F5Ch case    2:*/		return 0x821D7F60;
		  /* 821D7F60h */ case    3:  		/* mr R3, R31 */
		/* 821D7F60h case    3:*/		regs.R3 = regs.R31;
		/* 821D7F60h case    3:*/		return 0x821D7F64;
		  /* 821D7F64h */ case    4:  		/* bl -392604 */
		/* 821D7F64h case    4:*/		regs.LR = 0x821D7F68; return 0x821781C8;
		/* 821D7F64h case    4:*/		return 0x821D7F68;
	}
	return 0x821D7F68;
} // Block from 821D7F54h-821D7F68h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D7F68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7F68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7F68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7F68);
		  /* 821D7F68h */ case    0:  		/* lwz R30, <#[R30 + 4]> */
		/* 821D7F68h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000004) );
		/* 821D7F68h case    0:*/		return 0x821D7F6C;
		  /* 821D7F6Ch */ case    1:  		/* b -60 */
		/* 821D7F6Ch case    1:*/		return 0x821D7F30;
		/* 821D7F6Ch case    1:*/		return 0x821D7F70;
	}
	return 0x821D7F70;
} // Block from 821D7F68h-821D7F70h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D7F70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7F70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7F70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7F70);
		  /* 821D7F70h */ case    0:  		/* li R6, 68 */
		/* 821D7F70h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x44);
		/* 821D7F70h case    0:*/		return 0x821D7F74;
		  /* 821D7F74h */ case    1:  		/* mr R5, R31 */
		/* 821D7F74h case    1:*/		regs.R5 = regs.R31;
		/* 821D7F74h case    1:*/		return 0x821D7F78;
		  /* 821D7F78h */ case    2:  		/* b -2068 */
		/* 821D7F78h case    2:*/		return 0x821D7764;
		/* 821D7F78h case    2:*/		return 0x821D7F7C;
	}
	return 0x821D7F7C;
} // Block from 821D7F70h-821D7F7Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D7F7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D7F7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D7F7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D7F7C);
		  /* 821D7F7Ch */ case    0:  		/* rlwinm. R11, R30, 0, 28, 29 */
		/* 821D7F7Ch case    0:*/		cpu::op::rlwinm<1,0,28,29>(regs,&regs.R11,regs.R30);
		/* 821D7F7Ch case    0:*/		return 0x821D7F80;
		  /* 821D7F80h */ case    1:  		/* bc 12, CR0_EQ, -4764 */
		/* 821D7F80h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D7F80h case    1:*/		return 0x821D7F84;
		  /* 821D7F84h */ case    2:  		/* lwz R28, <#[R1 + 1908]> */
		/* 821D7F84h case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000774) );
		/* 821D7F84h case    2:*/		return 0x821D7F88;
		  /* 821D7F88h */ case    3:  		/* mr R4, R16 */
		/* 821D7F88h case    3:*/		regs.R4 = regs.R16;
		/* 821D7F88h case    3:*/		return 0x821D7F8C;
		  /* 821D7F8Ch */ case    4:  		/* mr R3, R28 */
		/* 821D7F8Ch case    4:*/		regs.R3 = regs.R28;
		/* 821D7F8Ch case    4:*/		return 0x821D7F90;
		  /* 821D7F90h */ case    5:  		/* bl 314384 */
		/* 821D7F90h case    5:*/		regs.LR = 0x821D7F94; return 0x82224BA0;
		/* 821D7F90h case    5:*/		return 0x821D7F94;
		  /* 821D7F94h */ case    6:  		/* li R4, 0 */
		/* 821D7F94h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D7F94h case    6:*/		return 0x821D7F98;
		  /* 821D7F98h */ case    7:  		/* lwz R5, <#[R16 + 44]> */
		/* 821D7F98h case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D7F98h case    7:*/		return 0x821D7F9C;
		  /* 821D7F9Ch */ case    8:  		/* mr R29, R3 */
		/* 821D7F9Ch case    8:*/		regs.R29 = regs.R3;
		/* 821D7F9Ch case    8:*/		return 0x821D7FA0;
		  /* 821D7FA0h */ case    9:  		/* bl -424176 */
		/* 821D7FA0h case    9:*/		regs.LR = 0x821D7FA4; return 0x821706B0;
		/* 821D7FA0h case    9:*/		return 0x821D7FA4;
		  /* 821D7FA4h */ case   10:  		/* li R5, 0 */
		/* 821D7FA4h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D7FA4h case   10:*/		return 0x821D7FA8;
		  /* 821D7FA8h */ case   11:  		/* mr R3, R28 */
		/* 821D7FA8h case   11:*/		regs.R3 = regs.R28;
		/* 821D7FA8h case   11:*/		return 0x821D7FAC;
		  /* 821D7FACh */ case   12:  		/* lwz R4, <#[R16 + 48]> */
		/* 821D7FACh case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R16 + 0x00000030) );
		/* 821D7FACh case   12:*/		return 0x821D7FB0;
		  /* 821D7FB0h */ case   13:  		/* bl 88528 */
		/* 821D7FB0h case   13:*/		regs.LR = 0x821D7FB4; return 0x821ED980;
		/* 821D7FB0h case   13:*/		return 0x821D7FB4;
		  /* 821D7FB4h */ case   14:  		/* mr R5, R3 */
		/* 821D7FB4h case   14:*/		regs.R5 = regs.R3;
		/* 821D7FB4h case   14:*/		return 0x821D7FB8;
		  /* 821D7FB8h */ case   15:  		/* li R4, 1 */
		/* 821D7FB8h case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D7FB8h case   15:*/		return 0x821D7FBC;
		  /* 821D7FBCh */ case   16:  		/* mr R3, R29 */
		/* 821D7FBCh case   16:*/		regs.R3 = regs.R29;
		/* 821D7FBCh case   16:*/		return 0x821D7FC0;
		  /* 821D7FC0h */ case   17:  		/* bl -424208 */
		/* 821D7FC0h case   17:*/		regs.LR = 0x821D7FC4; return 0x821706B0;
		/* 821D7FC0h case   17:*/		return 0x821D7FC4;
		  /* 821D7FC4h */ case   18:  		/* rlwinm R11, R16, 0, 0, 30 */
		/* 821D7FC4h case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R16);
		/* 821D7FC4h case   18:*/		return 0x821D7FC8;
		  /* 821D7FC8h */ case   19:  		/* rlwinm R10, R29, 0, 0, 30 */
		/* 821D7FC8h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R29);
		/* 821D7FC8h case   19:*/		return 0x821D7FCC;
		  /* 821D7FCCh */ case   20:  		/* addi R31, R11, 36 */
		/* 821D7FCCh case   20:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x24);
		/* 821D7FCCh case   20:*/		return 0x821D7FD0;
		  /* 821D7FD0h */ case   21:  		/* addi R11, R10, 36 */
		/* 821D7FD0h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x24);
		/* 821D7FD0h case   21:*/		return 0x821D7FD4;
		  /* 821D7FD4h */ case   22:  		/* addi R9, R31, -36 */
		/* 821D7FD4h case   22:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0xFFFFFFDC);
		/* 821D7FD4h case   22:*/		return 0x821D7FD8;
		  /* 821D7FD8h */ case   23:  		/* addi R8, R11, -36 */
		/* 821D7FD8h case   23:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821D7FD8h case   23:*/		return 0x821D7FDC;
		  /* 821D7FDCh */ case   24:  		/* addi R10, R11, 4 */
		/* 821D7FDCh case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821D7FDCh case   24:*/		return 0x821D7FE0;
		  /* 821D7FE0h */ case   25:  		/* lwz R7, <#[R31]> */
		/* 821D7FE0h case   25:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000000) );
		/* 821D7FE0h case   25:*/		return 0x821D7FE4;
		  /* 821D7FE4h */ case   26:  		/* stw R7, <#[R11]> */
		/* 821D7FE4h case   26:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821D7FE4h case   26:*/		return 0x821D7FE8;
		  /* 821D7FE8h */ case   27:  		/* lwz R7, <#[R31]> */
		/* 821D7FE8h case   27:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000000) );
		/* 821D7FE8h case   27:*/		return 0x821D7FEC;
		  /* 821D7FECh */ case   28:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821D7FECh case   28:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821D7FECh case   28:*/		return 0x821D7FF0;
		  /* 821D7FF0h */ case   29:  		/* stw R8, <#[R7]> */
		/* 821D7FF0h case   29:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000000) );
		/* 821D7FF0h case   29:*/		return 0x821D7FF4;
		  /* 821D7FF4h */ case   30:  		/* stw R9, <#[R11 + 4]> */
		/* 821D7FF4h case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821D7FF4h case   30:*/		return 0x821D7FF8;
		  /* 821D7FF8h */ case   31:  		/* stw R10, <#[R31]> */
		/* 821D7FF8h case   31:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821D7FF8h case   31:*/		return 0x821D7FFC;
		  /* 821D7FFCh */ case   32:  		/* lwz R30, <#[R16]> */
		/* 821D7FFCh case   32:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R16 + 0x00000000) );
		/* 821D7FFCh case   32:*/		return 0x821D8000;
		  /* 821D8000h */ case   33:  		/* cmplwi CR6, R30, 0 */
		/* 821D8000h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D8000h case   33:*/		return 0x821D8004;
		  /* 821D8004h */ case   34:  		/* bc 12, CR6_EQ, 60 */
		/* 821D8004h case   34:*/		if ( regs.CR[6].eq ) { return 0x821D8040;  }
		/* 821D8004h case   34:*/		return 0x821D8008;
		  /* 821D8008h */ case   35:  		/* lwz R11, <#[R30]> */
		/* 821D8008h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821D8008h case   35:*/		return 0x821D800C;
		  /* 821D800Ch */ case   36:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 821D800Ch case   36:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 821D800Ch case   36:*/		return 0x821D8010;
		  /* 821D8010h */ case   37:  		/* bc 12, CR0_EQ, 16 */
		/* 821D8010h case   37:*/		if ( regs.CR[0].eq ) { return 0x821D8020;  }
		/* 821D8010h case   37:*/		return 0x821D8014;
		  /* 821D8014h */ case   38:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821D8014h case   38:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821D8014h case   38:*/		return 0x821D8018;
		  /* 821D8018h */ case   39:  		/* li R11, 1 */
		/* 821D8018h case   39:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D8018h case   39:*/		return 0x821D801C;
		  /* 821D801Ch */ case   40:  		/* bc 12, CR0_EQ, 8 */
		/* 821D801Ch case   40:*/		if ( regs.CR[0].eq ) { return 0x821D8024;  }
		/* 821D801Ch case   40:*/		return 0x821D8020;
	}
	return 0x821D8020;
} // Block from 821D7F7Ch-821D8020h (41 instructions)

//////////////////////////////////////////////////////
// Block at 821D8020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8020);
		  /* 821D8020h */ case    0:  		/* li R11, 0 */
		/* 821D8020h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D8020h case    0:*/		return 0x821D8024;
	}
	return 0x821D8024;
} // Block from 821D8020h-821D8024h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D8024h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8024( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8024) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8024);
		  /* 821D8024h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D8024h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D8024h case    0:*/		return 0x821D8028;
		  /* 821D8028h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821D8028h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D8038;  }
		/* 821D8028h case    1:*/		return 0x821D802C;
		  /* 821D802Ch */ case    2:  		/* mr R4, R30 */
		/* 821D802Ch case    2:*/		regs.R4 = regs.R30;
		/* 821D802Ch case    2:*/		return 0x821D8030;
		  /* 821D8030h */ case    3:  		/* mr R3, R29 */
		/* 821D8030h case    3:*/		regs.R3 = regs.R29;
		/* 821D8030h case    3:*/		return 0x821D8034;
		  /* 821D8034h */ case    4:  		/* bl -392812 */
		/* 821D8034h case    4:*/		regs.LR = 0x821D8038; return 0x821781C8;
		/* 821D8034h case    4:*/		return 0x821D8038;
	}
	return 0x821D8038;
} // Block from 821D8024h-821D8038h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D8038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8038);
		  /* 821D8038h */ case    0:  		/* lwz R30, <#[R30 + 4]> */
		/* 821D8038h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000004) );
		/* 821D8038h case    0:*/		return 0x821D803C;
		  /* 821D803Ch */ case    1:  		/* b -60 */
		/* 821D803Ch case    1:*/		return 0x821D8000;
		/* 821D803Ch case    1:*/		return 0x821D8040;
	}
	return 0x821D8040;
} // Block from 821D8038h-821D8040h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D8040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8040);
		  /* 821D8040h */ case    0:  		/* mr R4, R16 */
		/* 821D8040h case    0:*/		regs.R4 = regs.R16;
		/* 821D8040h case    0:*/		return 0x821D8044;
		  /* 821D8044h */ case    1:  		/* mr R3, R28 */
		/* 821D8044h case    1:*/		regs.R3 = regs.R28;
		/* 821D8044h case    1:*/		return 0x821D8048;
		  /* 821D8048h */ case    2:  		/* bl 314200 */
		/* 821D8048h case    2:*/		regs.LR = 0x821D804C; return 0x82224BA0;
		/* 821D8048h case    2:*/		return 0x821D804C;
		  /* 821D804Ch */ case    3:  		/* li R4, 0 */
		/* 821D804Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D804Ch case    3:*/		return 0x821D8050;
		  /* 821D8050h */ case    4:  		/* lwz R5, <#[R16 + 44]> */
		/* 821D8050h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D8050h case    4:*/		return 0x821D8054;
		  /* 821D8054h */ case    5:  		/* mr R30, R3 */
		/* 821D8054h case    5:*/		regs.R30 = regs.R3;
		/* 821D8054h case    5:*/		return 0x821D8058;
		  /* 821D8058h */ case    6:  		/* bl -424360 */
		/* 821D8058h case    6:*/		regs.LR = 0x821D805C; return 0x821706B0;
		/* 821D8058h case    6:*/		return 0x821D805C;
		  /* 821D805Ch */ case    7:  		/* li R5, 1 */
		/* 821D805Ch case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821D805Ch case    7:*/		return 0x821D8060;
		  /* 821D8060h */ case    8:  		/* mr R3, R28 */
		/* 821D8060h case    8:*/		regs.R3 = regs.R28;
		/* 821D8060h case    8:*/		return 0x821D8064;
		  /* 821D8064h */ case    9:  		/* lwz R4, <#[R16 + 48]> */
		/* 821D8064h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R16 + 0x00000030) );
		/* 821D8064h case    9:*/		return 0x821D8068;
		  /* 821D8068h */ case   10:  		/* bl 88344 */
		/* 821D8068h case   10:*/		regs.LR = 0x821D806C; return 0x821ED980;
		/* 821D8068h case   10:*/		return 0x821D806C;
		  /* 821D806Ch */ case   11:  		/* mr R5, R3 */
		/* 821D806Ch case   11:*/		regs.R5 = regs.R3;
		/* 821D806Ch case   11:*/		return 0x821D8070;
		  /* 821D8070h */ case   12:  		/* li R4, 1 */
		/* 821D8070h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D8070h case   12:*/		return 0x821D8074;
		  /* 821D8074h */ case   13:  		/* mr R3, R30 */
		/* 821D8074h case   13:*/		regs.R3 = regs.R30;
		/* 821D8074h case   13:*/		return 0x821D8078;
		  /* 821D8078h */ case   14:  		/* bl -424392 */
		/* 821D8078h case   14:*/		regs.LR = 0x821D807C; return 0x821706B0;
		/* 821D8078h case   14:*/		return 0x821D807C;
		  /* 821D807Ch */ case   15:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821D807Ch case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821D807Ch case   15:*/		return 0x821D8080;
		  /* 821D8080h */ case   16:  		/* lwz R7, <#[R31]> */
		/* 821D8080h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000000) );
		/* 821D8080h case   16:*/		return 0x821D8084;
		  /* 821D8084h */ case   17:  		/* addi R9, R31, -36 */
		/* 821D8084h case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0xFFFFFFDC);
		/* 821D8084h case   17:*/		return 0x821D8088;
		  /* 821D8088h */ case   18:  		/* addi R11, R11, 36 */
		/* 821D8088h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821D8088h case   18:*/		return 0x821D808C;
		  /* 821D808Ch */ case   19:  		/* addi R8, R11, -36 */
		/* 821D808Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821D808Ch case   19:*/		return 0x821D8090;
		  /* 821D8090h */ case   20:  		/* addi R10, R11, 4 */
		/* 821D8090h case   20:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821D8090h case   20:*/		return 0x821D8094;
		  /* 821D8094h */ case   21:  		/* stw R7, <#[R11]> */
		/* 821D8094h case   21:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821D8094h case   21:*/		return 0x821D8098;
		  /* 821D8098h */ case   22:  		/* lwz R7, <#[R31]> */
		/* 821D8098h case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000000) );
		/* 821D8098h case   22:*/		return 0x821D809C;
		  /* 821D809Ch */ case   23:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821D809Ch case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821D809Ch case   23:*/		return 0x821D80A0;
		  /* 821D80A0h */ case   24:  		/* stw R8, <#[R7]> */
		/* 821D80A0h case   24:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000000) );
		/* 821D80A0h case   24:*/		return 0x821D80A4;
		  /* 821D80A4h */ case   25:  		/* stw R9, <#[R11 + 4]> */
		/* 821D80A4h case   25:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821D80A4h case   25:*/		return 0x821D80A8;
		  /* 821D80A8h */ case   26:  		/* stw R10, <#[R31]> */
		/* 821D80A8h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821D80A8h case   26:*/		return 0x821D80AC;
		  /* 821D80ACh */ case   27:  		/* lwz R31, <#[R16]> */
		/* 821D80ACh case   27:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R16 + 0x00000000) );
		/* 821D80ACh case   27:*/		return 0x821D80B0;
		  /* 821D80B0h */ case   28:  		/* cmplwi CR6, R31, 0 */
		/* 821D80B0h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D80B0h case   28:*/		return 0x821D80B4;
		  /* 821D80B4h */ case   29:  		/* bc 12, CR6_EQ, 60 */
		/* 821D80B4h case   29:*/		if ( regs.CR[6].eq ) { return 0x821D80F0;  }
		/* 821D80B4h case   29:*/		return 0x821D80B8;
		  /* 821D80B8h */ case   30:  		/* lwz R11, <#[R31]> */
		/* 821D80B8h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D80B8h case   30:*/		return 0x821D80BC;
		  /* 821D80BCh */ case   31:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 821D80BCh case   31:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 821D80BCh case   31:*/		return 0x821D80C0;
		  /* 821D80C0h */ case   32:  		/* bc 12, CR0_EQ, 16 */
		/* 821D80C0h case   32:*/		if ( regs.CR[0].eq ) { return 0x821D80D0;  }
		/* 821D80C0h case   32:*/		return 0x821D80C4;
		  /* 821D80C4h */ case   33:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821D80C4h case   33:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821D80C4h case   33:*/		return 0x821D80C8;
		  /* 821D80C8h */ case   34:  		/* li R11, 1 */
		/* 821D80C8h case   34:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D80C8h case   34:*/		return 0x821D80CC;
		  /* 821D80CCh */ case   35:  		/* bc 12, CR0_EQ, 8 */
		/* 821D80CCh case   35:*/		if ( regs.CR[0].eq ) { return 0x821D80D4;  }
		/* 821D80CCh case   35:*/		return 0x821D80D0;
	}
	return 0x821D80D0;
} // Block from 821D8040h-821D80D0h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821D80D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D80D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D80D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D80D0);
		  /* 821D80D0h */ case    0:  		/* li R11, 0 */
		/* 821D80D0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D80D0h case    0:*/		return 0x821D80D4;
	}
	return 0x821D80D4;
} // Block from 821D80D0h-821D80D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D80D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D80D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D80D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D80D4);
		  /* 821D80D4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D80D4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D80D4h case    0:*/		return 0x821D80D8;
		  /* 821D80D8h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821D80D8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D80E8;  }
		/* 821D80D8h case    1:*/		return 0x821D80DC;
		  /* 821D80DCh */ case    2:  		/* mr R4, R31 */
		/* 821D80DCh case    2:*/		regs.R4 = regs.R31;
		/* 821D80DCh case    2:*/		return 0x821D80E0;
		  /* 821D80E0h */ case    3:  		/* mr R3, R30 */
		/* 821D80E0h case    3:*/		regs.R3 = regs.R30;
		/* 821D80E0h case    3:*/		return 0x821D80E4;
		  /* 821D80E4h */ case    4:  		/* bl -392988 */
		/* 821D80E4h case    4:*/		regs.LR = 0x821D80E8; return 0x821781C8;
		/* 821D80E4h case    4:*/		return 0x821D80E8;
	}
	return 0x821D80E8;
} // Block from 821D80D4h-821D80E8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D80E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D80E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D80E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D80E8);
		  /* 821D80E8h */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 821D80E8h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 821D80E8h case    0:*/		return 0x821D80EC;
		  /* 821D80ECh */ case    1:  		/* b -60 */
		/* 821D80ECh case    1:*/		return 0x821D80B0;
		/* 821D80ECh case    1:*/		return 0x821D80F0;
	}
	return 0x821D80F0;
} // Block from 821D80E8h-821D80F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D80F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D80F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D80F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D80F0);
		  /* 821D80F0h */ case    0:  		/* li R6, 4 */
		/* 821D80F0h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821D80F0h case    0:*/		return 0x821D80F4;
		  /* 821D80F4h */ case    1:  		/* mr R5, R16 */
		/* 821D80F4h case    1:*/		regs.R5 = regs.R16;
		/* 821D80F4h case    1:*/		return 0x821D80F8;
		  /* 821D80F8h */ case    2:  		/* li R4, 0 */
		/* 821D80F8h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D80F8h case    2:*/		return 0x821D80FC;
		  /* 821D80FCh */ case    3:  		/* mr R3, R28 */
		/* 821D80FCh case    3:*/		regs.R3 = regs.R28;
		/* 821D80FCh case    3:*/		return 0x821D8100;
		  /* 821D8100h */ case    4:  		/* bl -238432 */
		/* 821D8100h case    4:*/		regs.LR = 0x821D8104; return 0x8219DDA0;
		/* 821D8100h case    4:*/		return 0x821D8104;
		  /* 821D8104h */ case    5:  		/* mr R31, R3 */
		/* 821D8104h case    5:*/		regs.R31 = regs.R3;
		/* 821D8104h case    5:*/		return 0x821D8108;
		  /* 821D8108h */ case    6:  		/* li R5, 0 */
		/* 821D8108h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D8108h case    6:*/		return 0x821D810C;
		  /* 821D810Ch */ case    7:  		/* mr R4, R29 */
		/* 821D810Ch case    7:*/		regs.R4 = regs.R29;
		/* 821D810Ch case    7:*/		return 0x821D8110;
		  /* 821D8110h */ case    8:  		/* mr R3, R28 */
		/* 821D8110h case    8:*/		regs.R3 = regs.R28;
		/* 821D8110h case    8:*/		return 0x821D8114;
		  /* 821D8114h */ case    9:  		/* bl -393220 */
		/* 821D8114h case    9:*/		regs.LR = 0x821D8118; return 0x82178110;
		/* 821D8114h case    9:*/		return 0x821D8118;
		  /* 821D8118h */ case   10:  		/* mr R5, R3 */
		/* 821D8118h case   10:*/		regs.R5 = regs.R3;
		/* 821D8118h case   10:*/		return 0x821D811C;
		  /* 821D811Ch */ case   11:  		/* mr R3, R31 */
		/* 821D811Ch case   11:*/		regs.R3 = regs.R31;
		/* 821D811Ch case   11:*/		return 0x821D8120;
		  /* 821D8120h */ case   12:  		/* li R4, 0 */
		/* 821D8120h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D8120h case   12:*/		return 0x821D8124;
		  /* 821D8124h */ case   13:  		/* bl -424564 */
		/* 821D8124h case   13:*/		regs.LR = 0x821D8128; return 0x821706B0;
		/* 821D8124h case   13:*/		return 0x821D8128;
		  /* 821D8128h */ case   14:  		/* li R5, 1 */
		/* 821D8128h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821D8128h case   14:*/		return 0x821D812C;
		  /* 821D812Ch */ case   15:  		/* mr R4, R29 */
		/* 821D812Ch case   15:*/		regs.R4 = regs.R29;
		/* 821D812Ch case   15:*/		return 0x821D8130;
		  /* 821D8130h */ case   16:  		/* mr R3, R28 */
		/* 821D8130h case   16:*/		regs.R3 = regs.R28;
		/* 821D8130h case   16:*/		return 0x821D8134;
		  /* 821D8134h */ case   17:  		/* bl -393252 */
		/* 821D8134h case   17:*/		regs.LR = 0x821D8138; return 0x82178110;
		/* 821D8134h case   17:*/		return 0x821D8138;
		  /* 821D8138h */ case   18:  		/* mr R5, R3 */
		/* 821D8138h case   18:*/		regs.R5 = regs.R3;
		/* 821D8138h case   18:*/		return 0x821D813C;
		  /* 821D813Ch */ case   19:  		/* mr R3, R31 */
		/* 821D813Ch case   19:*/		regs.R3 = regs.R31;
		/* 821D813Ch case   19:*/		return 0x821D8140;
		  /* 821D8140h */ case   20:  		/* li R4, 1 */
		/* 821D8140h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D8140h case   20:*/		return 0x821D8144;
		  /* 821D8144h */ case   21:  		/* bl -424596 */
		/* 821D8144h case   21:*/		regs.LR = 0x821D8148; return 0x821706B0;
		/* 821D8144h case   21:*/		return 0x821D8148;
		  /* 821D8148h */ case   22:  		/* li R5, 0 */
		/* 821D8148h case   22:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D8148h case   22:*/		return 0x821D814C;
		  /* 821D814Ch */ case   23:  		/* mr R4, R30 */
		/* 821D814Ch case   23:*/		regs.R4 = regs.R30;
		/* 821D814Ch case   23:*/		return 0x821D8150;
		  /* 821D8150h */ case   24:  		/* mr R3, R28 */
		/* 821D8150h case   24:*/		regs.R3 = regs.R28;
		/* 821D8150h case   24:*/		return 0x821D8154;
		  /* 821D8154h */ case   25:  		/* bl -393284 */
		/* 821D8154h case   25:*/		regs.LR = 0x821D8158; return 0x82178110;
		/* 821D8154h case   25:*/		return 0x821D8158;
		  /* 821D8158h */ case   26:  		/* mr R5, R3 */
		/* 821D8158h case   26:*/		regs.R5 = regs.R3;
		/* 821D8158h case   26:*/		return 0x821D815C;
		  /* 821D815Ch */ case   27:  		/* mr R3, R31 */
		/* 821D815Ch case   27:*/		regs.R3 = regs.R31;
		/* 821D815Ch case   27:*/		return 0x821D8160;
		  /* 821D8160h */ case   28:  		/* li R4, 2 */
		/* 821D8160h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821D8160h case   28:*/		return 0x821D8164;
		  /* 821D8164h */ case   29:  		/* bl -424628 */
		/* 821D8164h case   29:*/		regs.LR = 0x821D8168; return 0x821706B0;
		/* 821D8164h case   29:*/		return 0x821D8168;
		  /* 821D8168h */ case   30:  		/* li R5, 1 */
		/* 821D8168h case   30:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821D8168h case   30:*/		return 0x821D816C;
		  /* 821D816Ch */ case   31:  		/* mr R4, R30 */
		/* 821D816Ch case   31:*/		regs.R4 = regs.R30;
		/* 821D816Ch case   31:*/		return 0x821D8170;
		  /* 821D8170h */ case   32:  		/* mr R3, R28 */
		/* 821D8170h case   32:*/		regs.R3 = regs.R28;
		/* 821D8170h case   32:*/		return 0x821D8174;
		  /* 821D8174h */ case   33:  		/* bl -393316 */
		/* 821D8174h case   33:*/		regs.LR = 0x821D8178; return 0x82178110;
		/* 821D8174h case   33:*/		return 0x821D8178;
		  /* 821D8178h */ case   34:  		/* mr R5, R3 */
		/* 821D8178h case   34:*/		regs.R5 = regs.R3;
		/* 821D8178h case   34:*/		return 0x821D817C;
		  /* 821D817Ch */ case   35:  		/* mr R3, R31 */
		/* 821D817Ch case   35:*/		regs.R3 = regs.R31;
		/* 821D817Ch case   35:*/		return 0x821D8180;
		  /* 821D8180h */ case   36:  		/* li R4, 3 */
		/* 821D8180h case   36:*/		cpu::op::li<0>(regs,&regs.R4,0x3);
		/* 821D8180h case   36:*/		return 0x821D8184;
		  /* 821D8184h */ case   37:  		/* bl -424660 */
		/* 821D8184h case   37:*/		regs.LR = 0x821D8188; return 0x821706B0;
		/* 821D8184h case   37:*/		return 0x821D8188;
		  /* 821D8188h */ case   38:  		/* li R7, 0 */
		/* 821D8188h case   38:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821D8188h case   38:*/		return 0x821D818C;
		  /* 821D818Ch */ case   39:  		/* li R6, 228 */
		/* 821D818Ch case   39:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821D818Ch case   39:*/		return 0x821D8190;
		  /* 821D8190h */ case   40:  		/* mr R5, R31 */
		/* 821D8190h case   40:*/		regs.R5 = regs.R31;
		/* 821D8190h case   40:*/		return 0x821D8194;
		  /* 821D8194h */ case   41:  		/* mr R3, R28 */
		/* 821D8194h case   41:*/		regs.R3 = regs.R28;
		/* 821D8194h case   41:*/		return 0x821D8198;
		  /* 821D8198h */ case   42:  		/* b 4584 */
		/* 821D8198h case   42:*/		return 0x821D9380;
		/* 821D8198h case   42:*/		return 0x821D819C;
	}
	return 0x821D819C;
} // Block from 821D80F0h-821D819Ch (43 instructions)

//////////////////////////////////////////////////////
// Block at 821D819Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D819C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D819C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D819C);
		  /* 821D819Ch */ case    0:  		/* li R4, 0 */
		/* 821D819Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D819Ch case    0:*/		return 0x821D81A0;
		  /* 821D81A0h */ case    1:  		/* lwz R3, <#[R16 + 44]> */
		/* 821D81A0h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D81A0h case    1:*/		return 0x821D81A4;
		  /* 821D81A4h */ case    2:  		/* bl -249980 */
		/* 821D81A4h case    2:*/		regs.LR = 0x821D81A8; return 0x8219B128;
		/* 821D81A4h case    2:*/		return 0x821D81A8;
		  /* 821D81A8h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D81A8h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D81A8h case    3:*/		return 0x821D81AC;
		  /* 821D81ACh */ case    4:  		/* bc 12, CR0_EQ, -5320 */
		/* 821D81ACh case    4:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D81ACh case    4:*/		return 0x821D81B0;
		  /* 821D81B0h */ case    5:  		/* lwz R28, <#[R1 + 1908]> */
		/* 821D81B0h case    5:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000774) );
		/* 821D81B0h case    5:*/		return 0x821D81B4;
		  /* 821D81B4h */ case    6:  		/* addi R29, R16, 4 */
		/* 821D81B4h case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R16,0x4);
		/* 821D81B4h case    6:*/		return 0x821D81B8;
		  /* 821D81B8h */ case    7:  		/* lwz R30, <#[R29]> */
		/* 821D81B8h case    7:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821D81B8h case    7:*/		return 0x821D81BC;
		  /* 821D81BCh */ case    8:  		/* cmplwi CR6, R30, 0 */
		/* 821D81BCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D81BCh case    8:*/		return 0x821D81C0;
		  /* 821D81C0h */ case    9:  		/* bc 12, CR6_EQ, -5340 */
		/* 821D81C0h case    9:*/		if ( regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D81C0h case    9:*/		return 0x821D81C4;
		  /* 821D81C4h */ case   10:  		/* lwz R11, <#[R30 + 16]> */
		/* 821D81C4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821D81C4h case   10:*/		return 0x821D81C8;
		  /* 821D81C8h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821D81C8h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D81C8h case   11:*/		return 0x821D81CC;
		  /* 821D81CCh */ case   12:  		/* bc 12, CR6_EQ, 140 */
		/* 821D81CCh case   12:*/		if ( regs.CR[6].eq ) { return 0x821D8258;  }
		/* 821D81CCh case   12:*/		return 0x821D81D0;
		  /* 821D81D0h */ case   13:  		/* lwz R11, <#[R30]> */
		/* 821D81D0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821D81D0h case   13:*/		return 0x821D81D4;
		  /* 821D81D4h */ case   14:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 821D81D4h case   14:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 821D81D4h case   14:*/		return 0x821D81D8;
		  /* 821D81D8h */ case   15:  		/* bc 12, CR0_EQ, 16 */
		/* 821D81D8h case   15:*/		if ( regs.CR[0].eq ) { return 0x821D81E8;  }
		/* 821D81D8h case   15:*/		return 0x821D81DC;
		  /* 821D81DCh */ case   16:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821D81DCh case   16:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821D81DCh case   16:*/		return 0x821D81E0;
		  /* 821D81E0h */ case   17:  		/* li R11, 1 */
		/* 821D81E0h case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D81E0h case   17:*/		return 0x821D81E4;
		  /* 821D81E4h */ case   18:  		/* bc 12, CR0_EQ, 8 */
		/* 821D81E4h case   18:*/		if ( regs.CR[0].eq ) { return 0x821D81EC;  }
		/* 821D81E4h case   18:*/		return 0x821D81E8;
	}
	return 0x821D81E8;
} // Block from 821D819Ch-821D81E8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821D81E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D81E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D81E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D81E8);
		  /* 821D81E8h */ case    0:  		/* li R11, 0 */
		/* 821D81E8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D81E8h case    0:*/		return 0x821D81EC;
	}
	return 0x821D81EC;
} // Block from 821D81E8h-821D81ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D81ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D81EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D81EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D81EC);
		  /* 821D81ECh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D81ECh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D81ECh case    0:*/		return 0x821D81F0;
		  /* 821D81F0h */ case    1:  		/* bc 12, CR0_EQ, 104 */
		/* 821D81F0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D8258;  }
		/* 821D81F0h case    1:*/		return 0x821D81F4;
		  /* 821D81F4h */ case    2:  		/* lwz R31, <#[R30 + 16]> */
		/* 821D81F4h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000010) );
		/* 821D81F4h case    2:*/		return 0x821D81F8;
		  /* 821D81F8h */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D81F8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D81F8h case    3:*/		return 0x821D81FC;
		  /* 821D81FCh */ case    4:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D81FCh case    4:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D81FCh case    4:*/		return 0x821D8200;
		  /* 821D8200h */ case    5:  		/* cmplwi CR6, R11, 97 */
		/* 821D8200h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000061);
		/* 821D8200h case    5:*/		return 0x821D8204;
		  /* 821D8204h */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 821D8204h case    6:*/		if ( regs.CR[6].eq ) { return 0x821D821C;  }
		/* 821D8204h case    6:*/		return 0x821D8208;
		  /* 821D8208h */ case    7:  		/* cmplwi CR6, R11, 99 */
		/* 821D8208h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000063);
		/* 821D8208h case    7:*/		return 0x821D820C;
		  /* 821D820Ch */ case    8:  		/* bc 12, CR6_EQ, 16 */
		/* 821D820Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x821D821C;  }
		/* 821D820Ch case    8:*/		return 0x821D8210;
		  /* 821D8210h */ case    9:  		/* cmplwi CR6, R11, 100 */
		/* 821D8210h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000064);
		/* 821D8210h case    9:*/		return 0x821D8214;
		  /* 821D8214h */ case   10:  		/* li R11, 0 */
		/* 821D8214h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D8214h case   10:*/		return 0x821D8218;
		  /* 821D8218h */ case   11:  		/* bc 4, CR6_EQ, 8 */
		/* 821D8218h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821D8220;  }
		/* 821D8218h case   11:*/		return 0x821D821C;
	}
	return 0x821D821C;
} // Block from 821D81ECh-821D821Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821D821Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D821C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D821C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D821C);
		  /* 821D821Ch */ case    0:  		/* li R11, 1 */
		/* 821D821Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D821Ch case    0:*/		return 0x821D8220;
	}
	return 0x821D8220;
} // Block from 821D821Ch-821D8220h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D8220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8220);
		  /* 821D8220h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D8220h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D8220h case    0:*/		return 0x821D8224;
		  /* 821D8224h */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 821D8224h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D8258;  }
		/* 821D8224h case    1:*/		return 0x821D8228;
		  /* 821D8228h */ case    2:  		/* mr R4, R28 */
		/* 821D8228h case    2:*/		regs.R4 = regs.R28;
		/* 821D8228h case    2:*/		return 0x821D822C;
		  /* 821D822Ch */ case    3:  		/* mr R3, R31 */
		/* 821D822Ch case    3:*/		regs.R3 = regs.R31;
		/* 821D822Ch case    3:*/		return 0x821D8230;
		  /* 821D8230h */ case    4:  		/* bl -393944 */
		/* 821D8230h case    4:*/		regs.LR = 0x821D8234; return 0x82177F58;
		/* 821D8230h case    4:*/		return 0x821D8234;
		  /* 821D8234h */ case    5:  		/* lwz R11, <#[R3 + 4]> */
		/* 821D8234h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821D8234h case    5:*/		return 0x821D8238;
		  /* 821D8238h */ case    6:  		/* rlwinm. R10, R11, 0, 3, 3 */
		/* 821D8238h case    6:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R10,regs.R11);
		/* 821D8238h case    6:*/		return 0x821D823C;
		  /* 821D823Ch */ case    7:  		/* bc 4, CR0_EQ, 28 */
		/* 821D823Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x821D8258;  }
		/* 821D823Ch case    7:*/		return 0x821D8240;
		  /* 821D8240h */ case    8:  		/* rlwinm R11, R11, 0, 3, 1 */
		/* 821D8240h case    8:*/		cpu::op::rlwinm<0,0,3,1>(regs,&regs.R11,regs.R11);
		/* 821D8240h case    8:*/		return 0x821D8244;
		  /* 821D8244h */ case    9:  		/* mr R5, R28 */
		/* 821D8244h case    9:*/		regs.R5 = regs.R28;
		/* 821D8244h case    9:*/		return 0x821D8248;
		  /* 821D8248h */ case   10:  		/* stw R11, <#[R3 + 4]> */
		/* 821D8248h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821D8248h case   10:*/		return 0x821D824C;
		  /* 821D824Ch */ case   11:  		/* mr R4, R30 */
		/* 821D824Ch case   11:*/		regs.R4 = regs.R30;
		/* 821D824Ch case   11:*/		return 0x821D8250;
		  /* 821D8250h */ case   12:  		/* mr R3, R31 */
		/* 821D8250h case   12:*/		regs.R3 = regs.R31;
		/* 821D8250h case   12:*/		return 0x821D8254;
		  /* 821D8254h */ case   13:  		/* bl -391492 */
		/* 821D8254h case   13:*/		regs.LR = 0x821D8258; return 0x82178910;
		/* 821D8254h case   13:*/		return 0x821D8258;
	}
	return 0x821D8258;
} // Block from 821D8220h-821D8258h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821D8258h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8258( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8258) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8258);
		  /* 821D8258h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821D8258h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821D8258h case    0:*/		return 0x821D825C;
		  /* 821D825Ch */ case    1:  		/* cmplw CR6, R11, R30 */
		/* 821D825Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821D825Ch case    1:*/		return 0x821D8260;
		  /* 821D8260h */ case    2:  		/* bc 4, CR6_EQ, -168 */
		/* 821D8260h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D81B8;  }
		/* 821D8260h case    2:*/		return 0x821D8264;
		  /* 821D8264h */ case    3:  		/* addi R29, R30, 8 */
		/* 821D8264h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x8);
		/* 821D8264h case    3:*/		return 0x821D8268;
		  /* 821D8268h */ case    4:  		/* b -176 */
		/* 821D8268h case    4:*/		return 0x821D81B8;
		/* 821D8268h case    4:*/		return 0x821D826C;
	}
	return 0x821D826C;
} // Block from 821D8258h-821D826Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D826Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D826C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D826C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D826C);
		  /* 821D826Ch */ case    0:  		/* lwz R27, <#[R1 + 1908]> */
		/* 821D826Ch case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000774) );
		/* 821D826Ch case    0:*/		return 0x821D8270;
	}
	return 0x821D8270;
} // Block from 821D826Ch-821D8270h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D8270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8270);
		  /* 821D8270h */ case    0:  		/* lwz R30, <#[R16 + 4]> */
		/* 821D8270h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R16 + 0x00000004) );
		/* 821D8270h case    0:*/		return 0x821D8274;
		  /* 821D8274h */ case    1:  		/* addi R24, R16, 4 */
		/* 821D8274h case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R16,0x4);
		/* 821D8274h case    1:*/		return 0x821D8278;
		  /* 821D8278h */ case    2:  		/* li R31, 0 */
		/* 821D8278h case    2:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821D8278h case    2:*/		return 0x821D827C;
		  /* 821D827Ch */ case    3:  		/* li R28, 0 */
		/* 821D827Ch case    3:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821D827Ch case    3:*/		return 0x821D8280;
		  /* 821D8280h */ case    4:  		/* li R26, 0 */
		/* 821D8280h case    4:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821D8280h case    4:*/		return 0x821D8284;
		  /* 821D8284h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 821D8284h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D8284h case    5:*/		return 0x821D8288;
		  /* 821D8288h */ case    6:  		/* bc 12, CR6_EQ, 176 */
		/* 821D8288h case    6:*/		if ( regs.CR[6].eq ) { return 0x821D8338;  }
		/* 821D8288h case    6:*/		return 0x821D828C;
		  /* 821D828Ch */ case    7:  		/* lwz R11, <#[R30 + 16]> */
		/* 821D828Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821D828Ch case    7:*/		return 0x821D8290;
		  /* 821D8290h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821D8290h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D8290h case    8:*/		return 0x821D8294;
		  /* 821D8294h */ case    9:  		/* bc 12, CR6_EQ, 156 */
		/* 821D8294h case    9:*/		if ( regs.CR[6].eq ) { return 0x821D8330;  }
		/* 821D8294h case    9:*/		return 0x821D8298;
		  /* 821D8298h */ case   10:  		/* lwz R11, <#[R30]> */
		/* 821D8298h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821D8298h case   10:*/		return 0x821D829C;
		  /* 821D829Ch */ case   11:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821D829Ch case   11:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821D829Ch case   11:*/		return 0x821D82A0;
		  /* 821D82A0h */ case   12:  		/* bc 12, CR0_EQ, 144 */
		/* 821D82A0h case   12:*/		if ( regs.CR[0].eq ) { return 0x821D8330;  }
		/* 821D82A0h case   12:*/		return 0x821D82A4;
		  /* 821D82A4h */ case   13:  		/* mr R3, R30 */
		/* 821D82A4h case   13:*/		regs.R3 = regs.R30;
		/* 821D82A4h case   13:*/		return 0x821D82A8;
		  /* 821D82A8h */ case   14:  		/* bl -475240 */
		/* 821D82A8h case   14:*/		regs.LR = 0x821D82AC; return 0x82164240;
		/* 821D82A8h case   14:*/		return 0x821D82AC;
		  /* 821D82ACh */ case   15:  		/* lwz R11, <#[R30 + 16]> */
		/* 821D82ACh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821D82ACh case   15:*/		return 0x821D82B0;
		  /* 821D82B0h */ case   16:  		/* or R31, R3, R31 */
		/* 821D82B0h case   16:*/		cpu::op::or<0>(regs,&regs.R31,regs.R3,regs.R31);
		/* 821D82B0h case   16:*/		return 0x821D82B4;
		  /* 821D82B4h */ case   17:  		/* lwz R10, <#[R11 + 8]> */
		/* 821D82B4h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D82B4h case   17:*/		return 0x821D82B8;
		  /* 821D82B8h */ case   18:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821D82B8h case   18:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821D82B8h case   18:*/		return 0x821D82BC;
		  /* 821D82BCh */ case   19:  		/* cmplwi CR6, R10, 14080 */
		/* 821D82BCh case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003700);
		/* 821D82BCh case   19:*/		return 0x821D82C0;
		  /* 821D82C0h */ case   20:  		/* bc 4, CR6_EQ, 112 */
		/* 821D82C0h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821D8330;  }
		/* 821D82C0h case   20:*/		return 0x821D82C4;
		  /* 821D82C4h */ case   21:  		/* lwz R29, <#[R11]> */
		/* 821D82C4h case   21:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 821D82C4h case   21:*/		return 0x821D82C8;
		  /* 821D82C8h */ case   22:  		/* cmplwi CR6, R29, 0 */
		/* 821D82C8h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821D82C8h case   22:*/		return 0x821D82CC;
		  /* 821D82CCh */ case   23:  		/* bc 12, CR6_EQ, 100 */
		/* 821D82CCh case   23:*/		if ( regs.CR[6].eq ) { return 0x821D8330;  }
		/* 821D82CCh case   23:*/		return 0x821D82D0;
		  /* 821D82D0h */ case   24:  		/* lwz R11, <#[R29 + 12]> */
		/* 821D82D0h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821D82D0h case   24:*/		return 0x821D82D4;
		  /* 821D82D4h */ case   25:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D82D4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D82D4h case   25:*/		return 0x821D82D8;
		  /* 821D82D8h */ case   26:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D82D8h case   26:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D82D8h case   26:*/		return 0x821D82DC;
		  /* 821D82DCh */ case   27:  		/* cmplwi CR6, R11, 16000 */
		/* 821D82DCh case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D82DCh case   27:*/		return 0x821D82E0;
		  /* 821D82E0h */ case   28:  		/* bc 4, CR6_EQ, 72 */
		/* 821D82E0h case   28:*/		if ( !regs.CR[6].eq ) { return 0x821D8328;  }
		/* 821D82E0h case   28:*/		return 0x821D82E4;
		  /* 821D82E4h */ case   29:  		/* li R4, 0 */
		/* 821D82E4h case   29:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D82E4h case   29:*/		return 0x821D82E8;
		  /* 821D82E8h */ case   30:  		/* mr R3, R29 */
		/* 821D82E8h case   30:*/		regs.R3 = regs.R29;
		/* 821D82E8h case   30:*/		return 0x821D82EC;
		  /* 821D82ECh */ case   31:  		/* bl -110948 */
		/* 821D82ECh case   31:*/		regs.LR = 0x821D82F0; return 0x821BD188;
		/* 821D82ECh case   31:*/		return 0x821D82F0;
		  /* 821D82F0h */ case   32:  		/* fcmpu CR6, FR1, FR27 */
		/* 821D82F0h case   32:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR27);
		/* 821D82F0h case   32:*/		return 0x821D82F4;
		  /* 821D82F4h */ case   33:  		/* li R11, 1 */
		/* 821D82F4h case   33:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D82F4h case   33:*/		return 0x821D82F8;
		  /* 821D82F8h */ case   34:  		/* bc 12, CR6_EQ, 8 */
		/* 821D82F8h case   34:*/		if ( regs.CR[6].eq ) { return 0x821D8300;  }
		/* 821D82F8h case   34:*/		return 0x821D82FC;
		  /* 821D82FCh */ case   35:  		/* li R11, 0 */
		/* 821D82FCh case   35:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D82FCh case   35:*/		return 0x821D8300;
	}
	return 0x821D8300;
} // Block from 821D8270h-821D8300h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821D8300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8300);
		  /* 821D8300h */ case    0:  		/* rlwinm R10, R28, 0, 24, 31 */
		/* 821D8300h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R28);
		/* 821D8300h case    0:*/		return 0x821D8304;
		  /* 821D8304h */ case    1:  		/* fcmpu CR6, FR1, FR26 */
		/* 821D8304h case    1:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR26);
		/* 821D8304h case    1:*/		return 0x821D8308;
		  /* 821D8308h */ case    2:  		/* or R11, R10, R11 */
		/* 821D8308h case    2:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D8308h case    2:*/		return 0x821D830C;
		  /* 821D830Ch */ case    3:  		/* rlwinm R28, R11, 0, 24, 31 */
		/* 821D830Ch case    3:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R28,regs.R11);
		/* 821D830Ch case    3:*/		return 0x821D8310;
		  /* 821D8310h */ case    4:  		/* li R11, 1 */
		/* 821D8310h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D8310h case    4:*/		return 0x821D8314;
		  /* 821D8314h */ case    5:  		/* bc 12, CR6_EQ, 8 */
		/* 821D8314h case    5:*/		if ( regs.CR[6].eq ) { return 0x821D831C;  }
		/* 821D8314h case    5:*/		return 0x821D8318;
		  /* 821D8318h */ case    6:  		/* li R11, 0 */
		/* 821D8318h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D8318h case    6:*/		return 0x821D831C;
	}
	return 0x821D831C;
} // Block from 821D8300h-821D831Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D831Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D831C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D831C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D831C);
		  /* 821D831Ch */ case    0:  		/* rlwinm R10, R26, 0, 24, 31 */
		/* 821D831Ch case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R26);
		/* 821D831Ch case    0:*/		return 0x821D8320;
		  /* 821D8320h */ case    1:  		/* or R11, R10, R11 */
		/* 821D8320h case    1:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D8320h case    1:*/		return 0x821D8324;
		  /* 821D8324h */ case    2:  		/* rlwinm R26, R11, 0, 24, 31 */
		/* 821D8324h case    2:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R26,regs.R11);
		/* 821D8324h case    2:*/		return 0x821D8328;
	}
	return 0x821D8328;
} // Block from 821D831Ch-821D8328h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D8328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8328);
		  /* 821D8328h */ case    0:  		/* lwz R29, <#[R29 + 4]> */
		/* 821D8328h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000004) );
		/* 821D8328h case    0:*/		return 0x821D832C;
		  /* 821D832Ch */ case    1:  		/* b -100 */
		/* 821D832Ch case    1:*/		return 0x821D82C8;
		/* 821D832Ch case    1:*/		return 0x821D8330;
	}
	return 0x821D8330;
} // Block from 821D8328h-821D8330h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D8330h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8330( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8330) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8330);
		  /* 821D8330h */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 821D8330h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 821D8330h case    0:*/		return 0x821D8334;
		  /* 821D8334h */ case    1:  		/* b -176 */
		/* 821D8334h case    1:*/		return 0x821D8284;
		/* 821D8334h case    1:*/		return 0x821D8338;
	}
	return 0x821D8338;
} // Block from 821D8330h-821D8338h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D8338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8338);
		  /* 821D8338h */ case    0:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D8338h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D8338h case    0:*/		return 0x821D833C;
		  /* 821D833Ch */ case    1:  		/* mr R4, R27 */
		/* 821D833Ch case    1:*/		regs.R4 = regs.R27;
		/* 821D833Ch case    1:*/		return 0x821D8340;
		  /* 821D8340h */ case    2:  		/* mr R3, R16 */
		/* 821D8340h case    2:*/		regs.R3 = regs.R16;
		/* 821D8340h case    2:*/		return 0x821D8344;
		  /* 821D8344h */ case    3:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D8344h case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D8344h case    3:*/		return 0x821D8348;
		  /* 821D8348h */ case    4:  		/* cmplwi CR6, R11, 12416 */
		/* 821D8348h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003080);
		/* 821D8348h case    4:*/		return 0x821D834C;
		  /* 821D834Ch */ case    5:  		/* bc 4, CR6_EQ, 24 */
		/* 821D834Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821D8364;  }
		/* 821D834Ch case    5:*/		return 0x821D8350;
		  /* 821D8350h */ case    6:  		/* bl -394232 */
		/* 821D8350h case    6:*/		regs.LR = 0x821D8354; return 0x82177F58;
		/* 821D8350h case    6:*/		return 0x821D8354;
		  /* 821D8354h */ case    7:  		/* lwz R11, <#[R3 + 12]> */
		/* 821D8354h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821D8354h case    7:*/		return 0x821D8358;
		  /* 821D8358h */ case    8:  		/* rlwinm R10, R11, 0, 28, 31 */
		/* 821D8358h case    8:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R10,regs.R11);
		/* 821D8358h case    8:*/		return 0x821D835C;
		  /* 821D835Ch */ case    9:  		/* rlwinm R9, R11, 28, 28, 31 */
		/* 821D835Ch case    9:*/		cpu::op::rlwinm<0,28,28,31>(regs,&regs.R9,regs.R11);
		/* 821D835Ch case    9:*/		return 0x821D8360;
		  /* 821D8360h */ case   10:  		/* b 20 */
		/* 821D8360h case   10:*/		return 0x821D8374;
		/* 821D8360h case   10:*/		return 0x821D8364;
	}
	return 0x821D8364;
} // Block from 821D8338h-821D8364h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821D8364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8364);
		  /* 821D8364h */ case    0:  		/* bl -474220 */
		/* 821D8364h case    0:*/		regs.LR = 0x821D8368; return 0x821646F8;
		/* 821D8364h case    0:*/		return 0x821D8368;
		  /* 821D8368h */ case    1:  		/* lwz R11, <#[R3 + 12]> */
		/* 821D8368h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821D8368h case    1:*/		return 0x821D836C;
		  /* 821D836Ch */ case    2:  		/* rlwinm R10, R11, 24, 28, 31 */
		/* 821D836Ch case    2:*/		cpu::op::rlwinm<0,24,28,31>(regs,&regs.R10,regs.R11);
		/* 821D836Ch case    2:*/		return 0x821D8370;
		  /* 821D8370h */ case    3:  		/* rlwinm R9, R11, 20, 28, 31 */
		/* 821D8370h case    3:*/		cpu::op::rlwinm<0,20,28,31>(regs,&regs.R9,regs.R11);
		/* 821D8370h case    3:*/		return 0x821D8374;
	}
	return 0x821D8374;
} // Block from 821D8364h-821D8374h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D8374h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8374( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8374) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8374);
		  /* 821D8374h */ case    0:  		/* nor R8, R31, R31 */
		/* 821D8374h case    0:*/		cpu::op::nor<0>(regs,&regs.R8,regs.R31,regs.R31);
		/* 821D8374h case    0:*/		return 0x821D8378;
		  /* 821D8378h */ case    1:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 821D8378h case    1:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821D8378h case    1:*/		return 0x821D837C;
		  /* 821D837Ch */ case    2:  		/* and R30, R10, R31 */
		/* 821D837Ch case    2:*/		cpu::op::and<0>(regs,&regs.R30,regs.R10,regs.R31);
		/* 821D837Ch case    2:*/		return 0x821D8380;
		  /* 821D8380h */ case    3:  		/* and R27, R9, R31 */
		/* 821D8380h case    3:*/		cpu::op::and<0>(regs,&regs.R27,regs.R9,regs.R31);
		/* 821D8380h case    3:*/		return 0x821D8384;
		  /* 821D8384h */ case    4:  		/* rlwinm R25, R8, 0, 28, 31 */
		/* 821D8384h case    4:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R25,regs.R8);
		/* 821D8384h case    4:*/		return 0x821D8388;
		  /* 821D8388h */ case    5:  		/* bc 4, CR0_EQ, 12 */
		/* 821D8388h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821D8394;  }
		/* 821D8388h case    5:*/		return 0x821D838C;
		  /* 821D838Ch */ case    6:  		/* rlwinm. R10, R26, 0, 24, 31 */
		/* 821D838Ch case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R26);
		/* 821D838Ch case    6:*/		return 0x821D8390;
		  /* 821D8390h */ case    7:  		/* bc 12, CR0_EQ, 408 */
		/* 821D8390h case    7:*/		if ( regs.CR[0].eq ) { return 0x821D8528;  }
		/* 821D8390h case    7:*/		return 0x821D8394;
	}
	return 0x821D8394;
} // Block from 821D8374h-821D8394h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821D8394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8394);
		  /* 821D8394h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821D8394h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D8394h case    0:*/		return 0x821D8398;
		  /* 821D8398h */ case    1:  		/* bc 12, CR6_EQ, 40 */
		/* 821D8398h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D83C0;  }
		/* 821D8398h case    1:*/		return 0x821D839C;
		  /* 821D839Ch */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 821D839Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D839Ch case    2:*/		return 0x821D83A0;
		  /* 821D83A0h */ case    3:  		/* bc 4, CR6_EQ, 32 */
		/* 821D83A0h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D83C0;  }
		/* 821D83A0h case    3:*/		return 0x821D83A4;
		  /* 821D83A4h */ case    4:  		/* cmplwi CR6, R25, 0 */
		/* 821D83A4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821D83A4h case    4:*/		return 0x821D83A8;
		  /* 821D83A8h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 821D83A8h case    5:*/		if ( regs.CR[6].eq ) { return 0x821D83BC;  }
		/* 821D83A8h case    5:*/		return 0x821D83AC;
		  /* 821D83ACh */ case    6:  		/* addi R11, R25, -1 */
		/* 821D83ACh case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFF);
		/* 821D83ACh case    6:*/		return 0x821D83B0;
		  /* 821D83B0h */ case    7:  		/* andc R30, R25, R11 */
		/* 821D83B0h case    7:*/		cpu::op::andc<0>(regs,&regs.R30,regs.R25,regs.R11);
		/* 821D83B0h case    7:*/		return 0x821D83B4;
		  /* 821D83B4h */ case    8:  		/* subf R25, R30, R25 */
		/* 821D83B4h case    8:*/		cpu::op::subf<0>(regs,&regs.R25,regs.R30,regs.R25);
		/* 821D83B4h case    8:*/		return 0x821D83B8;
		  /* 821D83B8h */ case    9:  		/* b 8 */
		/* 821D83B8h case    9:*/		return 0x821D83C0;
		/* 821D83B8h case    9:*/		return 0x821D83BC;
	}
	return 0x821D83BC;
} // Block from 821D8394h-821D83BCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 821D83BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D83BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D83BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D83BC);
		  /* 821D83BCh */ case    0:  		/* li R28, 0 */
		/* 821D83BCh case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821D83BCh case    0:*/		return 0x821D83C0;
	}
	return 0x821D83C0;
} // Block from 821D83BCh-821D83C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D83C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D83C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D83C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D83C0);
		  /* 821D83C0h */ case    0:  		/* rlwinm. R11, R26, 0, 24, 31 */
		/* 821D83C0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R26);
		/* 821D83C0h case    0:*/		return 0x821D83C4;
		  /* 821D83C4h */ case    1:  		/* bc 12, CR0_EQ, 40 */
		/* 821D83C4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D83EC;  }
		/* 821D83C4h case    1:*/		return 0x821D83C8;
		  /* 821D83C8h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 821D83C8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821D83C8h case    2:*/		return 0x821D83CC;
		  /* 821D83CCh */ case    3:  		/* bc 4, CR6_EQ, 32 */
		/* 821D83CCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D83EC;  }
		/* 821D83CCh case    3:*/		return 0x821D83D0;
		  /* 821D83D0h */ case    4:  		/* cmplwi CR6, R25, 0 */
		/* 821D83D0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821D83D0h case    4:*/		return 0x821D83D4;
		  /* 821D83D4h */ case    5:  		/* bc 12, CR6_EQ, 20 */
		/* 821D83D4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821D83E8;  }
		/* 821D83D4h case    5:*/		return 0x821D83D8;
		  /* 821D83D8h */ case    6:  		/* addi R11, R25, -1 */
		/* 821D83D8h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFF);
		/* 821D83D8h case    6:*/		return 0x821D83DC;
		  /* 821D83DCh */ case    7:  		/* andc R27, R25, R11 */
		/* 821D83DCh case    7:*/		cpu::op::andc<0>(regs,&regs.R27,regs.R25,regs.R11);
		/* 821D83DCh case    7:*/		return 0x821D83E0;
		  /* 821D83E0h */ case    8:  		/* subf R25, R27, R25 */
		/* 821D83E0h case    8:*/		cpu::op::subf<0>(regs,&regs.R25,regs.R27,regs.R25);
		/* 821D83E0h case    8:*/		return 0x821D83E4;
		  /* 821D83E4h */ case    9:  		/* b 8 */
		/* 821D83E4h case    9:*/		return 0x821D83EC;
		/* 821D83E4h case    9:*/		return 0x821D83E8;
	}
	return 0x821D83E8;
} // Block from 821D83C0h-821D83E8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821D83E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D83E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D83E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D83E8);
		  /* 821D83E8h */ case    0:  		/* li R26, 0 */
		/* 821D83E8h case    0:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821D83E8h case    0:*/		return 0x821D83EC;
	}
	return 0x821D83EC;
} // Block from 821D83E8h-821D83ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D83ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D83EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D83EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D83EC);
		  /* 821D83ECh */ case    0:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 821D83ECh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821D83ECh case    0:*/		return 0x821D83F0;
		  /* 821D83F0h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821D83F0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821D83FC;  }
		/* 821D83F0h case    1:*/		return 0x821D83F4;
		  /* 821D83F4h */ case    2:  		/* rlwinm. R11, R26, 0, 24, 31 */
		/* 821D83F4h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R26);
		/* 821D83F4h case    2:*/		return 0x821D83F8;
		  /* 821D83F8h */ case    3:  		/* bc 12, CR0_EQ, 304 */
		/* 821D83F8h case    3:*/		if ( regs.CR[0].eq ) { return 0x821D8528;  }
		/* 821D83F8h case    3:*/		return 0x821D83FC;
	}
	return 0x821D83FC;
} // Block from 821D83ECh-821D83FCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D83FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D83FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D83FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D83FC);
		  /* 821D83FCh */ case    0:  		/* mr R28, R24 */
		/* 821D83FCh case    0:*/		regs.R28 = regs.R24;
		/* 821D83FCh case    0:*/		return 0x821D8400;
		  /* 821D8400h */ case    1:  		/* lwz R29, <#[R28]> */
		/* 821D8400h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x00000000) );
		/* 821D8400h case    1:*/		return 0x821D8404;
		  /* 821D8404h */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 821D8404h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821D8404h case    2:*/		return 0x821D8408;
		  /* 821D8408h */ case    3:  		/* bc 12, CR6_EQ, 288 */
		/* 821D8408h case    3:*/		if ( regs.CR[6].eq ) { return 0x821D8528;  }
		/* 821D8408h case    3:*/		return 0x821D840C;
		  /* 821D840Ch */ case    4:  		/* lwz R11, <#[R29 + 16]> */
		/* 821D840Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821D840Ch case    4:*/		return 0x821D8410;
		  /* 821D8410h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821D8410h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D8410h case    5:*/		return 0x821D8414;
		  /* 821D8414h */ case    6:  		/* bc 12, CR6_EQ, 256 */
		/* 821D8414h case    6:*/		if ( regs.CR[6].eq ) { return 0x821D8514;  }
		/* 821D8414h case    6:*/		return 0x821D8418;
		  /* 821D8418h */ case    7:  		/* lwz R11, <#[R29]> */
		/* 821D8418h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821D8418h case    7:*/		return 0x821D841C;
		  /* 821D841Ch */ case    8:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821D841Ch case    8:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821D841Ch case    8:*/		return 0x821D8420;
		  /* 821D8420h */ case    9:  		/* bc 12, CR0_EQ, 244 */
		/* 821D8420h case    9:*/		if ( regs.CR[0].eq ) { return 0x821D8514;  }
		/* 821D8420h case    9:*/		return 0x821D8424;
		  /* 821D8424h */ case   10:  		/* lwz R11, <#[R29 + 16]> */
		/* 821D8424h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821D8424h case   10:*/		return 0x821D8428;
		  /* 821D8428h */ case   11:  		/* lwz R10, <#[R11 + 8]> */
		/* 821D8428h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D8428h case   11:*/		return 0x821D842C;
		  /* 821D842Ch */ case   12:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821D842Ch case   12:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821D842Ch case   12:*/		return 0x821D8430;
		  /* 821D8430h */ case   13:  		/* cmplwi CR6, R10, 14080 */
		/* 821D8430h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003700);
		/* 821D8430h case   13:*/		return 0x821D8434;
		  /* 821D8434h */ case   14:  		/* bc 4, CR6_EQ, 224 */
		/* 821D8434h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821D8514;  }
		/* 821D8434h case   14:*/		return 0x821D8438;
		  /* 821D8438h */ case   15:  		/* lwz R31, <#[R11]> */
		/* 821D8438h case   15:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 821D8438h case   15:*/		return 0x821D843C;
		  /* 821D843Ch */ case   16:  		/* cmplwi CR6, R31, 0 */
		/* 821D843Ch case   16:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D843Ch case   16:*/		return 0x821D8440;
		  /* 821D8440h */ case   17:  		/* bc 12, CR6_EQ, 212 */
		/* 821D8440h case   17:*/		if ( regs.CR[6].eq ) { return 0x821D8514;  }
		/* 821D8440h case   17:*/		return 0x821D8444;
		  /* 821D8444h */ case   18:  		/* lwz R11, <#[R31 + 12]> */
		/* 821D8444h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D8444h case   18:*/		return 0x821D8448;
		  /* 821D8448h */ case   19:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D8448h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D8448h case   19:*/		return 0x821D844C;
		  /* 821D844Ch */ case   20:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D844Ch case   20:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D844Ch case   20:*/		return 0x821D8450;
		  /* 821D8450h */ case   21:  		/* cmplwi CR6, R11, 16000 */
		/* 821D8450h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D8450h case   21:*/		return 0x821D8454;
		  /* 821D8454h */ case   22:  		/* bc 4, CR6_EQ, 184 */
		/* 821D8454h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821D850C;  }
		/* 821D8454h case   22:*/		return 0x821D8458;
		  /* 821D8458h */ case   23:  		/* li R4, 0 */
		/* 821D8458h case   23:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D8458h case   23:*/		return 0x821D845C;
		  /* 821D845Ch */ case   24:  		/* mr R3, R31 */
		/* 821D845Ch case   24:*/		regs.R3 = regs.R31;
		/* 821D845Ch case   24:*/		return 0x821D8460;
		  /* 821D8460h */ case   25:  		/* bl -111320 */
		/* 821D8460h case   25:*/		regs.LR = 0x821D8464; return 0x821BD188;
		/* 821D8460h case   25:*/		return 0x821D8464;
		  /* 821D8464h */ case   26:  		/* cmplwi CR6, R30, 0 */
		/* 821D8464h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D8464h case   26:*/		return 0x821D8468;
		  /* 821D8468h */ case   27:  		/* bc 12, CR6_EQ, 52 */
		/* 821D8468h case   27:*/		if ( regs.CR[6].eq ) { return 0x821D849C;  }
		/* 821D8468h case   27:*/		return 0x821D846C;
		  /* 821D846Ch */ case   28:  		/* fcmpu CR6, FR1, FR27 */
		/* 821D846Ch case   28:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR27);
		/* 821D846Ch case   28:*/		return 0x821D8470;
		  /* 821D8470h */ case   29:  		/* bc 4, CR6_EQ, 44 */
		/* 821D8470h case   29:*/		if ( !regs.CR[6].eq ) { return 0x821D849C;  }
		/* 821D8470h case   29:*/		return 0x821D8474;
		  /* 821D8474h */ case   30:  		/* lwz R11, <#[R31 + 12]> */
		/* 821D8474h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D8474h case   30:*/		return 0x821D8478;
		  /* 821D8478h */ case   31:  		/* addi R11, R11, 4 */
		/* 821D8478h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821D8478h case   31:*/		return 0x821D847C;
		  /* 821D847Ch */ case   32:  		/* lwz R10, <#[R11]> */
		/* 821D847Ch case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D847Ch case   32:*/		return 0x821D8480;
		  /* 821D8480h */ case   33:  		/* b 12 */
		/* 821D8480h case   33:*/		return 0x821D848C;
		/* 821D8480h case   33:*/		return 0x821D8484;
		  /* 821D8484h */ case   34:  		/* addi R11, R10, 8 */
		/* 821D8484h case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821D8484h case   34:*/		return 0x821D8488;
		  /* 821D8488h */ case   35:  		/* lwz R10, <#[R10 + 8]> */
		/* 821D8488h case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821D8488h case   35:*/		return 0x821D848C;
	}
	return 0x821D848C;
} // Block from 821D83FCh-821D848Ch (36 instructions)

//////////////////////////////////////////////////////
// Block at 821D848Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D848C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D848C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D848C);
		  /* 821D848Ch */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821D848Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821D848Ch case    0:*/		return 0x821D8490;
		  /* 821D8490h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821D8490h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D8484;  }
		/* 821D8490h case    1:*/		return 0x821D8494;
		  /* 821D8494h */ case    2:  		/* cntlzw R9, R30 */
		/* 821D8494h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R9,regs.R30);
		/* 821D8494h case    2:*/		return 0x821D8498;
		  /* 821D8498h */ case    3:  		/* b 56 */
		/* 821D8498h case    3:*/		return 0x821D84D0;
		/* 821D8498h case    3:*/		return 0x821D849C;
	}
	return 0x821D849C;
} // Block from 821D848Ch-821D849Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D849Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D849C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D849C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D849C);
		  /* 821D849Ch */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 821D849Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821D849Ch case    0:*/		return 0x821D84A0;
		  /* 821D84A0h */ case    1:  		/* bc 12, CR6_EQ, 108 */
		/* 821D84A0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D850C;  }
		/* 821D84A0h case    1:*/		return 0x821D84A4;
		  /* 821D84A4h */ case    2:  		/* fcmpu CR6, FR1, FR26 */
		/* 821D84A4h case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR26);
		/* 821D84A4h case    2:*/		return 0x821D84A8;
		  /* 821D84A8h */ case    3:  		/* bc 4, CR6_EQ, 100 */
		/* 821D84A8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D850C;  }
		/* 821D84A8h case    3:*/		return 0x821D84AC;
		  /* 821D84ACh */ case    4:  		/* lwz R11, <#[R31 + 12]> */
		/* 821D84ACh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D84ACh case    4:*/		return 0x821D84B0;
		  /* 821D84B0h */ case    5:  		/* addi R11, R11, 4 */
		/* 821D84B0h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821D84B0h case    5:*/		return 0x821D84B4;
		  /* 821D84B4h */ case    6:  		/* lwz R10, <#[R11]> */
		/* 821D84B4h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D84B4h case    6:*/		return 0x821D84B8;
		  /* 821D84B8h */ case    7:  		/* b 12 */
		/* 821D84B8h case    7:*/		return 0x821D84C4;
		/* 821D84B8h case    7:*/		return 0x821D84BC;
		  /* 821D84BCh */ case    8:  		/* addi R11, R10, 8 */
		/* 821D84BCh case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821D84BCh case    8:*/		return 0x821D84C0;
		  /* 821D84C0h */ case    9:  		/* lwz R10, <#[R10 + 8]> */
		/* 821D84C0h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821D84C0h case    9:*/		return 0x821D84C4;
	}
	return 0x821D84C4;
} // Block from 821D849Ch-821D84C4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821D84C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D84C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D84C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D84C4);
		  /* 821D84C4h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821D84C4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821D84C4h case    0:*/		return 0x821D84C8;
		  /* 821D84C8h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821D84C8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D84BC;  }
		/* 821D84C8h case    1:*/		return 0x821D84CC;
		  /* 821D84CCh */ case    2:  		/* cntlzw R9, R27 */
		/* 821D84CCh case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R9,regs.R27);
		/* 821D84CCh case    2:*/		return 0x821D84D0;
	}
	return 0x821D84D0;
} // Block from 821D84C4h-821D84D0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D84D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D84D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D84D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D84D0);
		  /* 821D84D0h */ case    0:  		/* lwz R10, <#[R31 + 8]> */
		/* 821D84D0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821D84D0h case    0:*/		return 0x821D84D4;
		  /* 821D84D4h */ case    1:  		/* subfic R9, R9, -1 */
		/* 821D84D4h case    1:*/		cpu::op::subfic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821D84D4h case    1:*/		return 0x821D84D8;
		  /* 821D84D8h */ case    2:  		/* rlwinm R9, R9, 5, 22, 26 */
		/* 821D84D8h case    2:*/		cpu::op::rlwinm<0,5,22,26>(regs,&regs.R9,regs.R9);
		/* 821D84D8h case    2:*/		return 0x821D84DC;
		  /* 821D84DCh */ case    3:  		/* rlwinm R9, R9, 0, 25, 23 */
		/* 821D84DCh case    3:*/		cpu::op::rlwinm<0,0,25,23>(regs,&regs.R9,regs.R9);
		/* 821D84DCh case    3:*/		return 0x821D84E0;
		  /* 821D84E0h */ case    4:  		/* stw R10, <#[R11]> */
		/* 821D84E0h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D84E0h case    4:*/		return 0x821D84E4;
		  /* 821D84E4h */ case    5:  		/* lwz R10, <#[R24]> */
		/* 821D84E4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000000) );
		/* 821D84E4h case    5:*/		return 0x821D84E8;
		  /* 821D84E8h */ case    6:  		/* ori R11, R9, 7296 */
		/* 821D84E8h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R9,0x1C80);
		/* 821D84E8h case    6:*/		return 0x821D84EC;
		  /* 821D84ECh */ case    7:  		/* stw R10, <#[R31 + 8]> */
		/* 821D84ECh case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821D84ECh case    7:*/		return 0x821D84F0;
		  /* 821D84F0h */ case    8:  		/* stw R31, <#[R24]> */
		/* 821D84F0h case    8:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R24 + 0x00000000) );
		/* 821D84F0h case    8:*/		return 0x821D84F4;
		  /* 821D84F4h */ case    9:  		/* stw R16, <#[R31 + 12]> */
		/* 821D84F4h case    9:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D84F4h case    9:*/		return 0x821D84F8;
		  /* 821D84F8h */ case   10:  		/* lwz R10, <#[R31]> */
		/* 821D84F8h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821D84F8h case   10:*/		return 0x821D84FC;
		  /* 821D84FCh */ case   11:  		/* rlwinm R10, R10, 0, 0, 24 */
		/* 821D84FCh case   11:*/		cpu::op::rlwinm<0,0,0,24>(regs,&regs.R10,regs.R10);
		/* 821D84FCh case   11:*/		return 0x821D8500;
		  /* 821D8500h */ case   12:  		/* rlwinm R10, R10, 0, 24, 21 */
		/* 821D8500h case   12:*/		cpu::op::rlwinm<0,0,24,21>(regs,&regs.R10,regs.R10);
		/* 821D8500h case   12:*/		return 0x821D8504;
		  /* 821D8504h */ case   13:  		/* or R11, R11, R10 */
		/* 821D8504h case   13:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D8504h case   13:*/		return 0x821D8508;
		  /* 821D8508h */ case   14:  		/* stw R11, <#[R31]> */
		/* 821D8508h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D8508h case   14:*/		return 0x821D850C;
	}
	return 0x821D850C;
} // Block from 821D84D0h-821D850Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821D850Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D850C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D850C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D850C);
		  /* 821D850Ch */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 821D850Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 821D850Ch case    0:*/		return 0x821D8510;
		  /* 821D8510h */ case    1:  		/* b -212 */
		/* 821D8510h case    1:*/		return 0x821D843C;
		/* 821D8510h case    1:*/		return 0x821D8514;
	}
	return 0x821D8514;
} // Block from 821D850Ch-821D8514h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D8514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8514);
		  /* 821D8514h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821D8514h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821D8514h case    0:*/		return 0x821D8518;
		  /* 821D8518h */ case    1:  		/* cmplw CR6, R11, R29 */
		/* 821D8518h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821D8518h case    1:*/		return 0x821D851C;
		  /* 821D851Ch */ case    2:  		/* bc 4, CR6_EQ, -284 */
		/* 821D851Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D8400;  }
		/* 821D851Ch case    2:*/		return 0x821D8520;
		  /* 821D8520h */ case    3:  		/* addi R28, R29, 8 */
		/* 821D8520h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R29,0x8);
		/* 821D8520h case    3:*/		return 0x821D8524;
		  /* 821D8524h */ case    4:  		/* b -292 */
		/* 821D8524h case    4:*/		return 0x821D8400;
		/* 821D8524h case    4:*/		return 0x821D8528;
	}
	return 0x821D8528;
} // Block from 821D8514h-821D8528h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D8528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8528);
		  /* 821D8528h */ case    0:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D8528h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D8528h case    0:*/		return 0x821D852C;
		  /* 821D852Ch */ case    1:  		/* mr R3, R16 */
		/* 821D852Ch case    1:*/		regs.R3 = regs.R16;
		/* 821D852Ch case    1:*/		return 0x821D8530;
		  /* 821D8530h */ case    2:  		/* lwz R4, <#[R1 + 1908]> */
		/* 821D8530h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000774) );
		/* 821D8530h case    2:*/		return 0x821D8534;
		  /* 821D8534h */ case    3:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D8534h case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D8534h case    3:*/		return 0x821D8538;
		  /* 821D8538h */ case    4:  		/* cmplwi CR6, R11, 12416 */
		/* 821D8538h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003080);
		/* 821D8538h case    4:*/		return 0x821D853C;
		  /* 821D853Ch */ case    5:  		/* bc 4, CR6_EQ, 32 */
		/* 821D853Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821D855C;  }
		/* 821D853Ch case    5:*/		return 0x821D8540;
		  /* 821D8540h */ case    6:  		/* bl -394728 */
		/* 821D8540h case    6:*/		regs.LR = 0x821D8544; return 0x82177F58;
		/* 821D8540h case    6:*/		return 0x821D8544;
		  /* 821D8544h */ case    7:  		/* mr R11, R30 */
		/* 821D8544h case    7:*/		regs.R11 = regs.R30;
		/* 821D8544h case    7:*/		return 0x821D8548;
		  /* 821D8548h */ case    8:  		/* lwz R10, <#[R3 + 12]> */
		/* 821D8548h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821D8548h case    8:*/		return 0x821D854C;
		  /* 821D854Ch */ case    9:  		/* rlwimi R11, R27, 4, 24, 27 */
		/* 821D854Ch case    9:*/		cpu::op::rlwimi<0,4,24,27>(regs,&regs.R11,regs.R27);
		/* 821D854Ch case    9:*/		return 0x821D8550;
		  /* 821D8550h */ case   10:  		/* rlwimi R11, R10, 0, 0, 23 */
		/* 821D8550h case   10:*/		cpu::op::rlwimi<0,0,0,23>(regs,&regs.R11,regs.R10);
		/* 821D8550h case   10:*/		return 0x821D8554;
		  /* 821D8554h */ case   11:  		/* stw R11, <#[R3 + 12]> */
		/* 821D8554h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821D8554h case   11:*/		return 0x821D8558;
		  /* 821D8558h */ case   12:  		/* b 28 */
		/* 821D8558h case   12:*/		return 0x821D8574;
		/* 821D8558h case   12:*/		return 0x821D855C;
	}
	return 0x821D855C;
} // Block from 821D8528h-821D855Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821D855Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D855C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D855C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D855C);
		  /* 821D855Ch */ case    0:  		/* bl -474724 */
		/* 821D855Ch case    0:*/		regs.LR = 0x821D8560; return 0x821646F8;
		/* 821D855Ch case    0:*/		return 0x821D8560;
		  /* 821D8560h */ case    1:  		/* mr R11, R30 */
		/* 821D8560h case    1:*/		regs.R11 = regs.R30;
		/* 821D8560h case    1:*/		return 0x821D8564;
		  /* 821D8564h */ case    2:  		/* lwz R10, <#[R3 + 12]> */
		/* 821D8564h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821D8564h case    2:*/		return 0x821D8568;
		  /* 821D8568h */ case    3:  		/* rlwimi R11, R27, 4, 24, 27 */
		/* 821D8568h case    3:*/		cpu::op::rlwimi<0,4,24,27>(regs,&regs.R11,regs.R27);
		/* 821D8568h case    3:*/		return 0x821D856C;
		  /* 821D856Ch */ case    4:  		/* rlwimi R10, R11, 8, 16, 23 */
		/* 821D856Ch case    4:*/		cpu::op::rlwimi<0,8,16,23>(regs,&regs.R10,regs.R11);
		/* 821D856Ch case    4:*/		return 0x821D8570;
		  /* 821D8570h */ case    5:  		/* stw R10, <#[R3 + 12]> */
		/* 821D8570h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821D8570h case    5:*/		return 0x821D8574;
	}
	return 0x821D8574;
} // Block from 821D855Ch-821D8574h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D8574h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8574( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8574) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8574);
		  /* 821D8574h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821D8574h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D8574h case    0:*/		return 0x821D8578;
		  /* 821D8578h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 821D8578h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D85AC;  }
		/* 821D8578h case    1:*/		return 0x821D857C;
		  /* 821D857Ch */ case    2:  		/* cntlzw R11, R30 */
		/* 821D857Ch case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R30);
		/* 821D857Ch case    2:*/		return 0x821D8580;
		  /* 821D8580h */ case    3:  		/* lwz R10, <#[R16 + 12]> */
		/* 821D8580h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x0000000C) );
		/* 821D8580h case    3:*/		return 0x821D8584;
		  /* 821D8584h */ case    4:  		/* li R9, 15 */
		/* 821D8584h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0xF);
		/* 821D8584h case    4:*/		return 0x821D8588;
		  /* 821D8588h */ case    5:  		/* subfic R11, R11, 31 */
		/* 821D8588h case    5:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 821D8588h case    5:*/		return 0x821D858C;
		  /* 821D858Ch */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821D858Ch case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821D858Ch case    6:*/		return 0x821D8590;
		  /* 821D8590h */ case    7:  		/* slw R11, R9, R11 */
		/* 821D8590h case    7:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821D8590h case    7:*/		return 0x821D8594;
		  /* 821D8594h */ case    8:  		/* and R9, R11, R10 */
		/* 821D8594h case    8:*/		cpu::op::and<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 821D8594h case    8:*/		return 0x821D8598;
		  /* 821D8598h */ case    9:  		/* rlwinm R9, R9, 0, 16, 31 */
		/* 821D8598h case    9:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R9);
		/* 821D8598h case    9:*/		return 0x821D859C;
		  /* 821D859Ch */ case   10:  		/* cmplw CR6, R9, R11 */
		/* 821D859Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821D859Ch case   10:*/		return 0x821D85A0;
		  /* 821D85A0h */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 821D85A0h case   11:*/		if ( regs.CR[6].eq ) { return 0x821D85AC;  }
		/* 821D85A0h case   11:*/		return 0x821D85A4;
		  /* 821D85A4h */ case   12:  		/* or R11, R11, R10 */
		/* 821D85A4h case   12:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D85A4h case   12:*/		return 0x821D85A8;
		  /* 821D85A8h */ case   13:  		/* sth R11, <#[R16 + 14]> */
		/* 821D85A8h case   13:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R16 + 0x0000000E) );
		/* 821D85A8h case   13:*/		return 0x821D85AC;
	}
	return 0x821D85AC;
} // Block from 821D8574h-821D85ACh (14 instructions)

//////////////////////////////////////////////////////
// Block at 821D85ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D85AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D85AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D85AC);
		  /* 821D85ACh */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 821D85ACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821D85ACh case    0:*/		return 0x821D85B0;
		  /* 821D85B0h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 821D85B0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D85E4;  }
		/* 821D85B0h case    1:*/		return 0x821D85B4;
		  /* 821D85B4h */ case    2:  		/* cntlzw R11, R27 */
		/* 821D85B4h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R27);
		/* 821D85B4h case    2:*/		return 0x821D85B8;
		  /* 821D85B8h */ case    3:  		/* lwz R10, <#[R16 + 12]> */
		/* 821D85B8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x0000000C) );
		/* 821D85B8h case    3:*/		return 0x821D85BC;
		  /* 821D85BCh */ case    4:  		/* li R9, 14 */
		/* 821D85BCh case    4:*/		cpu::op::li<0>(regs,&regs.R9,0xE);
		/* 821D85BCh case    4:*/		return 0x821D85C0;
		  /* 821D85C0h */ case    5:  		/* subfic R11, R11, 31 */
		/* 821D85C0h case    5:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 821D85C0h case    5:*/		return 0x821D85C4;
		  /* 821D85C4h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821D85C4h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821D85C4h case    6:*/		return 0x821D85C8;
		  /* 821D85C8h */ case    7:  		/* slw R11, R9, R11 */
		/* 821D85C8h case    7:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821D85C8h case    7:*/		return 0x821D85CC;
		  /* 821D85CCh */ case    8:  		/* and R9, R11, R10 */
		/* 821D85CCh case    8:*/		cpu::op::and<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 821D85CCh case    8:*/		return 0x821D85D0;
		  /* 821D85D0h */ case    9:  		/* rlwinm R9, R9, 0, 16, 31 */
		/* 821D85D0h case    9:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R9);
		/* 821D85D0h case    9:*/		return 0x821D85D4;
		  /* 821D85D4h */ case   10:  		/* cmplw CR6, R9, R11 */
		/* 821D85D4h case   10:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821D85D4h case   10:*/		return 0x821D85D8;
		  /* 821D85D8h */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 821D85D8h case   11:*/		if ( regs.CR[6].eq ) { return 0x821D85E4;  }
		/* 821D85D8h case   11:*/		return 0x821D85DC;
		  /* 821D85DCh */ case   12:  		/* or R11, R11, R10 */
		/* 821D85DCh case   12:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D85DCh case   12:*/		return 0x821D85E0;
		  /* 821D85E0h */ case   13:  		/* sth R11, <#[R16 + 14]> */
		/* 821D85E0h case   13:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R16 + 0x0000000E) );
		/* 821D85E0h case   13:*/		return 0x821D85E4;
	}
	return 0x821D85E4;
} // Block from 821D85ACh-821D85E4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821D85E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D85E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D85E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D85E4);
		  /* 821D85E4h */ case    0:  		/* lis R11, -28311 */
		/* 821D85E4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF9169);
		/* 821D85E4h case    0:*/		return 0x821D85E8;
		  /* 821D85E8h */ case    1:  		/* lwz R10, <#[R16 + 8]> */
		/* 821D85E8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x00000008) );
		/* 821D85E8h case    1:*/		return 0x821D85EC;
		  /* 821D85ECh */ case    2:  		/* lis R9, 0 */
		/* 821D85ECh case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0x0);
		/* 821D85ECh case    2:*/		return 0x821D85F0;
		  /* 821D85F0h */ case    3:  		/* ori R11, R11, 5192 */
		/* 821D85F0h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1448);
		/* 821D85F0h case    3:*/		return 0x821D85F4;
		  /* 821D85F4h */ case    4:  		/* ori R9, R9, 36262 */
		/* 821D85F4h case    4:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x8DA6);
		/* 821D85F4h case    4:*/		return 0x821D85F8;
		  /* 821D85F8h */ case    5:  		/* nor R8, R25, R25 */
		/* 821D85F8h case    5:*/		cpu::op::nor<0>(regs,&regs.R8,regs.R25,regs.R25);
		/* 821D85F8h case    5:*/		return 0x821D85FC;
		  /* 821D85FCh */ case    6:  		/* rldimi R11, R9, 32, 0 */
		/* 821D85FCh case    6:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R11,regs.R9);
		/* 821D85FCh case    6:*/		return 0x821D8600;
		  /* 821D8600h */ case    7:  		/* rlwinm R9, R8, 0, 28, 31 */
		/* 821D8600h case    7:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R8);
		/* 821D8600h case    7:*/		return 0x821D8604;
		  /* 821D8604h */ case    8:  		/* srd R11, R11, R9 */
		/* 821D8604h case    8:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D8604h case    8:*/		return 0x821D8608;
		  /* 821D8608h */ case    9:  		/* srd R11, R11, R9 */
		/* 821D8608h case    9:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D8608h case    9:*/		return 0x821D860C;
		  /* 821D860Ch */ case   10:  		/* srd R11, R11, R9 */
		/* 821D860Ch case   10:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D860Ch case   10:*/		return 0x821D8610;
		  /* 821D8610h */ case   11:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821D8610h case   11:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821D8610h case   11:*/		return 0x821D8614;
		  /* 821D8614h */ case   12:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 821D8614h case   12:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 821D8614h case   12:*/		return 0x821D8618;
		  /* 821D8618h */ case   13:  		/* stw R10, <#[R16 + 8]> */
		/* 821D8618h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R16 + 0x00000008) );
		/* 821D8618h case   13:*/		return 0x821D861C;
		  /* 821D861Ch */ case   14:  		/* b -6456 */
		/* 821D861Ch case   14:*/		return 0x821D6CE4;
		/* 821D861Ch case   14:*/		return 0x821D8620;
	}
	return 0x821D8620;
} // Block from 821D85E4h-821D8620h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821D8620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8620);
		  /* 821D8620h */ case    0:  		/* lwz R3, <#[R16 + 48]> */
		/* 821D8620h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R16 + 0x00000030) );
		/* 821D8620h case    0:*/		return 0x821D8624;
		  /* 821D8624h */ case    1:  		/* fmr FR1, FR26 */
		/* 821D8624h case    1:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR26);
		/* 821D8624h case    1:*/		return 0x821D8628;
		  /* 821D8628h */ case    2:  		/* lwz R31, <#[R16 + 44]> */
		/* 821D8628h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D8628h case    2:*/		return 0x821D862C;
		  /* 821D862Ch */ case    3:  		/* bl -469116 */
		/* 821D862Ch case    3:*/		regs.LR = 0x821D8630; return 0x82165DB0;
		/* 821D862Ch case    3:*/		return 0x821D8630;
		  /* 821D8630h */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D8630h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D8630h case    4:*/		return 0x821D8634;
		  /* 821D8634h */ case    5:  		/* bc 12, CR0_EQ, -6480 */
		/* 821D8634h case    5:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D8634h case    5:*/		return 0x821D8638;
		  /* 821D8638h */ case    6:  		/* lwz R11, <#[R31]> */
		/* 821D8638h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D8638h case    6:*/		return 0x821D863C;
		  /* 821D863Ch */ case    7:  		/* lwz R5, <#[R31 + 12]> */
		/* 821D863Ch case    7:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D863Ch case    7:*/		return 0x821D8640;
		  /* 821D8640h */ case    8:  		/* rlwinm R7, R11, 0, 27, 31 */
		/* 821D8640h case    8:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R11);
		/* 821D8640h case    8:*/		return 0x821D8644;
		  /* 821D8644h */ case    9:  		/* rlwinm R6, R11, 27, 24, 31 */
		/* 821D8644h case    9:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R6,regs.R11);
		/* 821D8644h case    9:*/		return 0x821D8648;
		  /* 821D8648h */ case   10:  		/* b 3380 */
		/* 821D8648h case   10:*/		return 0x821D937C;
		/* 821D8648h case   10:*/		return 0x821D864C;
	}
	return 0x821D864C;
} // Block from 821D8620h-821D864Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821D864Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D864C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D864C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D864C);
		  /* 821D864Ch */ case    0:  		/* cmpwi CR6, R11, 110 */
		/* 821D864Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000006E);
		/* 821D864Ch case    0:*/		return 0x821D8650;
		  /* 821D8650h */ case    1:  		/* bc 12, CR6_EQ, 3336 */
		/* 821D8650h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D9358;  }
		/* 821D8650h case    1:*/		return 0x821D8654;
		  /* 821D8654h */ case    2:  		/* cmpwi CR6, R11, 112 */
		/* 821D8654h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000070);
		/* 821D8654h case    2:*/		return 0x821D8658;
		  /* 821D8658h */ case    3:  		/* bc 12, CR6_EQ, 928 */
		/* 821D8658h case    3:*/		if ( regs.CR[6].eq ) { return 0x821D89F8;  }
		/* 821D8658h case    3:*/		return 0x821D865C;
		  /* 821D865Ch */ case    4:  		/* cmpwi CR6, R11, 118 */
		/* 821D865Ch case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000076);
		/* 821D865Ch case    4:*/		return 0x821D8660;
		  /* 821D8660h */ case    5:  		/* bc 12, CR6_EQ, 120 */
		/* 821D8660h case    5:*/		if ( regs.CR[6].eq ) { return 0x821D86D8;  }
		/* 821D8660h case    5:*/		return 0x821D8664;
		  /* 821D8664h */ case    6:  		/* cmpwi CR6, R11, 124 */
		/* 821D8664h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000007C);
		/* 821D8664h case    6:*/		return 0x821D8668;
		  /* 821D8668h */ case    7:  		/* bc 4, CR6_EQ, -6532 */
		/* 821D8668h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D8668h case    7:*/		return 0x821D866C;
		  /* 821D866Ch */ case    8:  		/* lwz R30, <#[R1 + 1908]> */
		/* 821D866Ch case    8:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000774) );
		/* 821D866Ch case    8:*/		return 0x821D8670;
		  /* 821D8670h */ case    9:  		/* mr R4, R16 */
		/* 821D8670h case    9:*/		regs.R4 = regs.R16;
		/* 821D8670h case    9:*/		return 0x821D8674;
		  /* 821D8674h */ case   10:  		/* mr R3, R30 */
		/* 821D8674h case   10:*/		regs.R3 = regs.R30;
		/* 821D8674h case   10:*/		return 0x821D8678;
		  /* 821D8678h */ case   11:  		/* bl -108376 */
		/* 821D8678h case   11:*/		regs.LR = 0x821D867C; return 0x821BDF20;
		/* 821D8678h case   11:*/		return 0x821D867C;
		  /* 821D867Ch */ case   12:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D867Ch case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D867Ch case   12:*/		return 0x821D8680;
		  /* 821D8680h */ case   13:  		/* bc 12, CR0_EQ, -6556 */
		/* 821D8680h case   13:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D8680h case   13:*/		return 0x821D8684;
		  /* 821D8684h */ case   14:  		/* lwz R31, <#[R16 + 4]> */
		/* 821D8684h case   14:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R16 + 0x00000004) );
		/* 821D8684h case   14:*/		return 0x821D8688;
		  /* 821D8688h */ case   15:  		/* cmplwi CR6, R31, 0 */
		/* 821D8688h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D8688h case   15:*/		return 0x821D868C;
		  /* 821D868Ch */ case   16:  		/* bc 12, CR6_EQ, -6568 */
		/* 821D868Ch case   16:*/		if ( regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D868Ch case   16:*/		return 0x821D8690;
		  /* 821D8690h */ case   17:  		/* lwz R11, <#[R31 + 16]> */
		/* 821D8690h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821D8690h case   17:*/		return 0x821D8694;
		  /* 821D8694h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 821D8694h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D8694h case   18:*/		return 0x821D8698;
		  /* 821D8698h */ case   19:  		/* bc 12, CR6_EQ, 56 */
		/* 821D8698h case   19:*/		if ( regs.CR[6].eq ) { return 0x821D86D0;  }
		/* 821D8698h case   19:*/		return 0x821D869C;
		  /* 821D869Ch */ case   20:  		/* lwz R11, <#[R31]> */
		/* 821D869Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D869Ch case   20:*/		return 0x821D86A0;
		  /* 821D86A0h */ case   21:  		/* rlwinm. R10, R11, 0, 4, 6 */
		/* 821D86A0h case   21:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R11);
		/* 821D86A0h case   21:*/		return 0x821D86A4;
		  /* 821D86A4h */ case   22:  		/* bc 12, CR0_EQ, 44 */
		/* 821D86A4h case   22:*/		if ( regs.CR[0].eq ) { return 0x821D86D0;  }
		/* 821D86A4h case   22:*/		return 0x821D86A8;
		  /* 821D86A8h */ case   23:  		/* rlwinm R10, R11, 0, 27, 29 */
		/* 821D86A8h case   23:*/		cpu::op::rlwinm<0,0,27,29>(regs,&regs.R10,regs.R11);
		/* 821D86A8h case   23:*/		return 0x821D86AC;
		  /* 821D86ACh */ case   24:  		/* rlwinm R9, R11, 0, 27, 31 */
		/* 821D86ACh case   24:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R11);
		/* 821D86ACh case   24:*/		return 0x821D86B0;
		  /* 821D86B0h */ case   25:  		/* cmplw CR6, R10, R9 */
		/* 821D86B0h case   25:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821D86B0h case   25:*/		return 0x821D86B4;
		  /* 821D86B4h */ case   26:  		/* bc 12, CR6_EQ, 28 */
		/* 821D86B4h case   26:*/		if ( regs.CR[6].eq ) { return 0x821D86D0;  }
		/* 821D86B4h case   26:*/		return 0x821D86B8;
		  /* 821D86B8h */ case   27:  		/* rlwimi R11, R10, 0, 27, 31 */
		/* 821D86B8h case   27:*/		cpu::op::rlwimi<0,0,27,31>(regs,&regs.R11,regs.R10);
		/* 821D86B8h case   27:*/		return 0x821D86BC;
		  /* 821D86BCh */ case   28:  		/* lwz R5, <#[R1 + 112]> */
		/* 821D86BCh case   28:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 821D86BCh case   28:*/		return 0x821D86C0;
		  /* 821D86C0h */ case   29:  		/* mr R3, R30 */
		/* 821D86C0h case   29:*/		regs.R3 = regs.R30;
		/* 821D86C0h case   29:*/		return 0x821D86C4;
		  /* 821D86C4h */ case   30:  		/* stw R11, <#[R31]> */
		/* 821D86C4h case   30:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D86C4h case   30:*/		return 0x821D86C8;
		  /* 821D86C8h */ case   31:  		/* lwz R4, <#[R31 + 16]> */
		/* 821D86C8h case   31:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 821D86C8h case   31:*/		return 0x821D86CC;
		  /* 821D86CCh */ case   32:  		/* bl -52484 */
		/* 821D86CCh case   32:*/		regs.LR = 0x821D86D0; return 0x821CB9C8;
		/* 821D86CCh case   32:*/		return 0x821D86D0;
	}
	return 0x821D86D0;
} // Block from 821D864Ch-821D86D0h (33 instructions)

//////////////////////////////////////////////////////
// Block at 821D86D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D86D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D86D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D86D0);
		  /* 821D86D0h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 821D86D0h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 821D86D0h case    0:*/		return 0x821D86D4;
		  /* 821D86D4h */ case    1:  		/* b -76 */
		/* 821D86D4h case    1:*/		return 0x821D8688;
		/* 821D86D4h case    1:*/		return 0x821D86D8;
	}
	return 0x821D86D8;
} // Block from 821D86D0h-821D86D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D86D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D86D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D86D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D86D8);
		  /* 821D86D8h */ case    0:  		/* lwz R23, <#[R16 + 48]> */
		/* 821D86D8h case    0:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R16 + 0x00000030) );
		/* 821D86D8h case    0:*/		return 0x821D86DC;
		  /* 821D86DCh */ case    1:  		/* lwz R21, <#[R23 + 12]> */
		/* 821D86DCh case    1:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R23 + 0x0000000C) );
		/* 821D86DCh case    1:*/		return 0x821D86E0;
		  /* 821D86E0h */ case    2:  		/* lwz R10, <#[R21 + 44]> */
		/* 821D86E0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x0000002C) );
		/* 821D86E0h case    2:*/		return 0x821D86E4;
		  /* 821D86E4h */ case    3:  		/* lwz R11, <#[R10]> */
		/* 821D86E4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821D86E4h case    3:*/		return 0x821D86E8;
		  /* 821D86E8h */ case    4:  		/* rlwinm R29, R11, 27, 30, 31 */
		/* 821D86E8h case    4:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R29,regs.R11);
		/* 821D86E8h case    4:*/		return 0x821D86EC;
		  /* 821D86ECh */ case    5:  		/* rlwinm R9, R11, 25, 30, 31 */
		/* 821D86ECh case    5:*/		cpu::op::rlwinm<0,25,30,31>(regs,&regs.R9,regs.R11);
		/* 821D86ECh case    5:*/		return 0x821D86F0;
		  /* 821D86F0h */ case    6:  		/* cmplw CR6, R29, R9 */
		/* 821D86F0h case    6:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R9);
		/* 821D86F0h case    6:*/		return 0x821D86F4;
		  /* 821D86F4h */ case    7:  		/* bc 4, CR6_EQ, -6672 */
		/* 821D86F4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D86F4h case    7:*/		return 0x821D86F8;
		  /* 821D86F8h */ case    8:  		/* rlwinm. R11, R11, 0, 27, 31 */
		/* 821D86F8h case    8:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821D86F8h case    8:*/		return 0x821D86FC;
		  /* 821D86FCh */ case    9:  		/* bc 4, CR0_EQ, -6680 */
		/* 821D86FCh case    9:*/		if ( !regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D86FCh case    9:*/		return 0x821D8700;
		  /* 821D8700h */ case   10:  		/* lwz R30, <#[R10 + 12]> */
		/* 821D8700h case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + 0x0000000C) );
		/* 821D8700h case   10:*/		return 0x821D8704;
		  /* 821D8704h */ case   11:  		/* li R22, 0 */
		/* 821D8704h case   11:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821D8704h case   11:*/		return 0x821D8708;
		  /* 821D8708h */ case   12:  		/* lwz R11, <#[R30 + 8]> */
		/* 821D8708h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821D8708h case   12:*/		return 0x821D870C;
		  /* 821D870Ch */ case   13:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D870Ch case   13:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D870Ch case   13:*/		return 0x821D8710;
		  /* 821D8710h */ case   14:  		/* cmplwi CR6, R11, 13184 */
		/* 821D8710h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003380);
		/* 821D8710h case   14:*/		return 0x821D8714;
		  /* 821D8714h */ case   15:  		/* bc 4, CR6_EQ, 48 */
		/* 821D8714h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821D8744;  }
		/* 821D8714h case   15:*/		return 0x821D8718;
		  /* 821D8718h */ case   16:  		/* mr R3, R30 */
		/* 821D8718h case   16:*/		regs.R3 = regs.R30;
		/* 821D8718h case   16:*/		return 0x821D871C;
		  /* 821D871Ch */ case   17:  		/* lwz R4, <#[R1 + 1908]> */
		/* 821D871Ch case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000774) );
		/* 821D871Ch case   17:*/		return 0x821D8720;
		  /* 821D8720h */ case   18:  		/* bl -109760 */
		/* 821D8720h case   18:*/		regs.LR = 0x821D8724; return 0x821BDA60;
		/* 821D8720h case   18:*/		return 0x821D8724;
		  /* 821D8724h */ case   19:  		/* cmpwi CR6, R3, 2 */
		/* 821D8724h case   19:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 821D8724h case   19:*/		return 0x821D8728;
		  /* 821D8728h */ case   20:  		/* bc 12, CR6_EQ, 12 */
		/* 821D8728h case   20:*/		if ( regs.CR[6].eq ) { return 0x821D8734;  }
		/* 821D8728h case   20:*/		return 0x821D872C;
		  /* 821D872Ch */ case   21:  		/* cmpwi CR6, R3, 5 */
		/* 821D872Ch case   21:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000005);
		/* 821D872Ch case   21:*/		return 0x821D8730;
		  /* 821D8730h */ case   22:  		/* bc 4, CR6_EQ, 20 */
		/* 821D8730h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821D8744;  }
		/* 821D8730h case   22:*/		return 0x821D8734;
	}
	return 0x821D8734;
} // Block from 821D86D8h-821D8734h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821D8734h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8734( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8734) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8734);
		  /* 821D8734h */ case    0:  		/* lwz R11, <#[R30 + 44]> */
		/* 821D8734h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 821D8734h case    0:*/		return 0x821D8738;
		  /* 821D8738h */ case    1:  		/* lwz R10, <#[R11]> */
		/* 821D8738h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D8738h case    1:*/		return 0x821D873C;
		  /* 821D873Ch */ case    2:  		/* lwz R30, <#[R11 + 12]> */
		/* 821D873Ch case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D873Ch case    2:*/		return 0x821D8740;
		  /* 821D8740h */ case    3:  		/* rlwinm R29, R10, 27, 30, 31 */
		/* 821D8740h case    3:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R29,regs.R10);
		/* 821D8740h case    3:*/		return 0x821D8744;
	}
	return 0x821D8744;
} // Block from 821D8734h-821D8744h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D8744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8744);
		  /* 821D8744h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 821D8744h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821D8744h case    0:*/		return 0x821D8748;
		  /* 821D8748h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D8748h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D8748h case    1:*/		return 0x821D874C;
		  /* 821D874Ch */ case    2:  		/* cmplwi CR6, R11, 1408 */
		/* 821D874Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000580);
		/* 821D874Ch case    2:*/		return 0x821D8750;
		  /* 821D8750h */ case    3:  		/* bc 4, CR6_EQ, 64 */
		/* 821D8750h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D8790;  }
		/* 821D8750h case    3:*/		return 0x821D8754;
		  /* 821D8754h */ case    4:  		/* li R10, 0 */
		/* 821D8754h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D8754h case    4:*/		return 0x821D8758;
		  /* 821D8758h */ case    5:  		/* lwz R3, <#[R30 + 44]> */
		/* 821D8758h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821D8758h case    5:*/		return 0x821D875C;
		  /* 821D875Ch */ case    6:  		/* mr R9, R16 */
		/* 821D875Ch case    6:*/		regs.R9 = regs.R16;
		/* 821D875Ch case    6:*/		return 0x821D8760;
		  /* 821D8760h */ case    7:  		/* li R8, 0 */
		/* 821D8760h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D8760h case    7:*/		return 0x821D8764;
		  /* 821D8764h */ case    8:  		/* addi R7, R1, 668 */
		/* 821D8764h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x29C);
		/* 821D8764h case    8:*/		return 0x821D8768;
		  /* 821D8768h */ case    9:  		/* addi R6, R1, 684 */
		/* 821D8768h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x2AC);
		/* 821D8768h case    9:*/		return 0x821D876C;
		  /* 821D876Ch */ case   10:  		/* addi R5, R1, 676 */
		/* 821D876Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x2A4);
		/* 821D876Ch case   10:*/		return 0x821D8770;
		  /* 821D8770h */ case   11:  		/* mr R4, R29 */
		/* 821D8770h case   11:*/		regs.R4 = regs.R29;
		/* 821D8770h case   11:*/		return 0x821D8774;
		  /* 821D8774h */ case   12:  		/* bl 306524 */
		/* 821D8774h case   12:*/		regs.LR = 0x821D8778; return 0x822234D0;
		/* 821D8774h case   12:*/		return 0x821D8778;
		  /* 821D8778h */ case   13:  		/* lwz R11, <#[R1 + 668]> */
		/* 821D8778h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000029C) );
		/* 821D8778h case   13:*/		return 0x821D877C;
		  /* 821D877Ch */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821D877Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D877Ch case   14:*/		return 0x821D8780;
		  /* 821D8780h */ case   15:  		/* bc 4, CR6_EQ, 16 */
		/* 821D8780h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821D8790;  }
		/* 821D8780h case   15:*/		return 0x821D8784;
		  /* 821D8784h */ case   16:  		/* lwz R30, <#[R1 + 676]> */
		/* 821D8784h case   16:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000002A4) );
		/* 821D8784h case   16:*/		return 0x821D8788;
		  /* 821D8788h */ case   17:  		/* li R22, 1 */
		/* 821D8788h case   17:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 821D8788h case   17:*/		return 0x821D878C;
		  /* 821D878Ch */ case   18:  		/* lwz R29, <#[R1 + 684]> */
		/* 821D878Ch case   18:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x000002AC) );
		/* 821D878Ch case   18:*/		return 0x821D8790;
	}
	return 0x821D8790;
} // Block from 821D8744h-821D8790h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821D8790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8790);
		  /* 821D8790h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 821D8790h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821D8790h case    0:*/		return 0x821D8794;
		  /* 821D8794h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D8794h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D8794h case    1:*/		return 0x821D8798;
		  /* 821D8798h */ case    2:  		/* cmplwi CR6, R11, 128 */
		/* 821D8798h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 821D8798h case    2:*/		return 0x821D879C;
		  /* 821D879Ch */ case    3:  		/* bc 4, CR6_EQ, -6840 */
		/* 821D879Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D879Ch case    3:*/		return 0x821D87A0;
		  /* 821D87A0h */ case    4:  		/* addi R8, R1, 176 */
		/* 821D87A0h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xB0);
		/* 821D87A0h case    4:*/		return 0x821D87A4;
		  /* 821D87A4h */ case    5:  		/* lwz R3, <#[R1 + 1908]> */
		/* 821D87A4h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000774) );
		/* 821D87A4h case    5:*/		return 0x821D87A8;
		  /* 821D87A8h */ case    6:  		/* addi R7, R1, 192 */
		/* 821D87A8h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xC0);
		/* 821D87A8h case    6:*/		return 0x821D87AC;
		  /* 821D87ACh */ case    7:  		/* addi R6, R1, 160 */
		/* 821D87ACh case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 821D87ACh case    7:*/		return 0x821D87B0;
		  /* 821D87B0h */ case    8:  		/* mr R5, R29 */
		/* 821D87B0h case    8:*/		regs.R5 = regs.R29;
		/* 821D87B0h case    8:*/		return 0x821D87B4;
		  /* 821D87B4h */ case    9:  		/* mr R4, R30 */
		/* 821D87B4h case    9:*/		regs.R4 = regs.R30;
		/* 821D87B4h case    9:*/		return 0x821D87B8;
		  /* 821D87B8h */ case   10:  		/* bl -110984 */
		/* 821D87B8h case   10:*/		regs.LR = 0x821D87BC; return 0x821BD630;
		/* 821D87B8h case   10:*/		return 0x821D87BC;
		  /* 821D87BCh */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D87BCh case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D87BCh case   11:*/		return 0x821D87C0;
		  /* 821D87C0h */ case   12:  		/* bc 12, CR0_EQ, -6876 */
		/* 821D87C0h case   12:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D87C0h case   12:*/		return 0x821D87C4;
		  /* 821D87C4h */ case   13:  		/* lwz R26, <#[R1 + 176]> */
		/* 821D87C4h case   13:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000000B0) );
		/* 821D87C4h case   13:*/		return 0x821D87C8;
		  /* 821D87C8h */ case   14:  		/* lwz R25, <#[R1 + 192]> */
		/* 821D87C8h case   14:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000000C0) );
		/* 821D87C8h case   14:*/		return 0x821D87CC;
		  /* 821D87CCh */ case   15:  		/* lwz R24, <#[R1 + 160]> */
		/* 821D87CCh case   15:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x000000A0) );
		/* 821D87CCh case   15:*/		return 0x821D87D0;
		  /* 821D87D0h */ case   16:  		/* mr R5, R26 */
		/* 821D87D0h case   16:*/		regs.R5 = regs.R26;
		/* 821D87D0h case   16:*/		return 0x821D87D4;
		  /* 821D87D4h */ case   17:  		/* mr R4, R25 */
		/* 821D87D4h case   17:*/		regs.R4 = regs.R25;
		/* 821D87D4h case   17:*/		return 0x821D87D8;
		  /* 821D87D8h */ case   18:  		/* mr R3, R24 */
		/* 821D87D8h case   18:*/		regs.R3 = regs.R24;
		/* 821D87D8h case   18:*/		return 0x821D87DC;
		  /* 821D87DCh */ case   19:  		/* bl 298692 */
		/* 821D87DCh case   19:*/		regs.LR = 0x821D87E0; return 0x822216A0;
		/* 821D87DCh case   19:*/		return 0x821D87E0;
		  /* 821D87E0h */ case   20:  		/* fctidz FR0, FR1 */
		/* 821D87E0h case   20:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR1);
		/* 821D87E0h case   20:*/		return 0x821D87E4;
		  /* 821D87E4h */ case   21:  		/* stfd FR0, <#[R1 + 176]> */
		/* 821D87E4h case   21:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x000000B0) );
		/* 821D87E4h case   21:*/		return 0x821D87E8;
		  /* 821D87E8h */ case   22:  		/* lwz R27, <#[R1 + 180]> */
		/* 821D87E8h case   22:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000000B4) );
		/* 821D87E8h case   22:*/		return 0x821D87EC;
		  /* 821D87ECh */ case   23:  		/* cmplwi CR6, R27, 0 */
		/* 821D87ECh case   23:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821D87ECh case   23:*/		return 0x821D87F0;
		  /* 821D87F0h */ case   24:  		/* bc 12, CR6_EQ, -6924 */
		/* 821D87F0h case   24:*/		if ( regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D87F0h case   24:*/		return 0x821D87F4;
		  /* 821D87F4h */ case   25:  		/* rldicl R11, R27, 0, 32 */
		/* 821D87F4h case   25:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R27);
		/* 821D87F4h case   25:*/		return 0x821D87F8;
		  /* 821D87F8h */ case   26:  		/* std R11, <#[R1 + 176]> */
		/* 821D87F8h case   26:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x000000B0) );
		/* 821D87F8h case   26:*/		return 0x821D87FC;
		  /* 821D87FCh */ case   27:  		/* lfd FR0, <#[R1 + 176]> */
		/* 821D87FCh case   27:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x000000B0) );
		/* 821D87FCh case   27:*/		return 0x821D8800;
		  /* 821D8800h */ case   28:  		/* fcfid FR0, FR0 */
		/* 821D8800h case   28:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 821D8800h case   28:*/		return 0x821D8804;
		  /* 821D8804h */ case   29:  		/* fcmpu CR6, FR1, FR0 */
		/* 821D8804h case   29:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 821D8804h case   29:*/		return 0x821D8808;
		  /* 821D8808h */ case   30:  		/* bc 4, CR6_EQ, -6948 */
		/* 821D8808h case   30:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D8808h case   30:*/		return 0x821D880C;
		  /* 821D880Ch */ case   31:  		/* lwz R31, <#[R16 + 44]> */
		/* 821D880Ch case   31:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D880Ch case   31:*/		return 0x821D8810;
		  /* 821D8810h */ case   32:  		/* li R10, 0 */
		/* 821D8810h case   32:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D8810h case   32:*/		return 0x821D8814;
		  /* 821D8814h */ case   33:  		/* li R9, 0 */
		/* 821D8814h case   33:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821D8814h case   33:*/		return 0x821D8818;
		  /* 821D8818h */ case   34:  		/* li R8, 0 */
		/* 821D8818h case   34:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D8818h case   34:*/		return 0x821D881C;
		  /* 821D881Ch */ case   35:  		/* addi R7, R1, 456 */
		/* 821D881Ch case   35:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1C8);
		/* 821D881Ch case   35:*/		return 0x821D8820;
		  /* 821D8820h */ case   36:  		/* addi R6, R1, 700 */
		/* 821D8820h case   36:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x2BC);
		/* 821D8820h case   36:*/		return 0x821D8824;
		  /* 821D8824h */ case   37:  		/* addi R5, R1, 692 */
		/* 821D8824h case   37:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x2B4);
		/* 821D8824h case   37:*/		return 0x821D8828;
		  /* 821D8828h */ case   38:  		/* li R4, 0 */
		/* 821D8828h case   38:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D8828h case   38:*/		return 0x821D882C;
		  /* 821D882Ch */ case   39:  		/* mr R3, R31 */
		/* 821D882Ch case   39:*/		regs.R3 = regs.R31;
		/* 821D882Ch case   39:*/		return 0x821D8830;
		  /* 821D8830h */ case   40:  		/* bl 306336 */
		/* 821D8830h case   40:*/		regs.LR = 0x821D8834; return 0x822234D0;
		/* 821D8830h case   40:*/		return 0x821D8834;
		  /* 821D8834h */ case   41:  		/* lwz R28, <#[R1 + 692]> */
		/* 821D8834h case   41:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x000002B4) );
		/* 821D8834h case   41:*/		return 0x821D8838;
		  /* 821D8838h */ case   42:  		/* lwz R11, <#[R28 + 8]> */
		/* 821D8838h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821D8838h case   42:*/		return 0x821D883C;
		  /* 821D883Ch */ case   43:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D883Ch case   43:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D883Ch case   43:*/		return 0x821D8840;
		  /* 821D8840h */ case   44:  		/* cmplwi CR6, R11, 15872 */
		/* 821D8840h case   44:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E00);
		/* 821D8840h case   44:*/		return 0x821D8844;
		  /* 821D8844h */ case   45:  		/* bc 4, CR6_EQ, -7008 */
		/* 821D8844h case   45:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D8844h case   45:*/		return 0x821D8848;
		  /* 821D8848h */ case   46:  		/* lwz R20, <#[R1 + 1908]> */
		/* 821D8848h case   46:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x00000774) );
		/* 821D8848h case   46:*/		return 0x821D884C;
		  /* 821D884Ch */ case   47:  		/* mr R3, R28 */
		/* 821D884Ch case   47:*/		regs.R3 = regs.R28;
		/* 821D884Ch case   47:*/		return 0x821D8850;
		  /* 821D8850h */ case   48:  		/* mr R4, R20 */
		/* 821D8850h case   48:*/		regs.R4 = regs.R20;
		/* 821D8850h case   48:*/		return 0x821D8854;
		  /* 821D8854h */ case   49:  		/* bl -395596 */
		/* 821D8854h case   49:*/		regs.LR = 0x821D8858; return 0x82177F08;
		/* 821D8854h case   49:*/		return 0x821D8858;
		  /* 821D8858h */ case   50:  		/* mr R19, R3 */
		/* 821D8858h case   50:*/		regs.R19 = regs.R3;
		/* 821D8858h case   50:*/		return 0x821D885C;
		  /* 821D885Ch */ case   51:  		/* mr R4, R20 */
		/* 821D885Ch case   51:*/		regs.R4 = regs.R20;
		/* 821D885Ch case   51:*/		return 0x821D8860;
		  /* 821D8860h */ case   52:  		/* mr R3, R28 */
		/* 821D8860h case   52:*/		regs.R3 = regs.R28;
		/* 821D8860h case   52:*/		return 0x821D8864;
		  /* 821D8864h */ case   53:  		/* bl -314860 */
		/* 821D8864h case   53:*/		regs.LR = 0x821D8868; return 0x8218BA78;
		/* 821D8864h case   53:*/		return 0x821D8868;
		  /* 821D8868h */ case   54:  		/* add R5, R3, R27 */
		/* 821D8868h case   54:*/		cpu::op::add<0>(regs,&regs.R5,regs.R3,regs.R27);
		/* 821D8868h case   54:*/		return 0x821D886C;
		  /* 821D886Ch */ case   55:  		/* li R6, 0 */
		/* 821D886Ch case   55:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821D886Ch case   55:*/		return 0x821D8870;
		  /* 821D8870h */ case   56:  		/* mr R4, R19 */
		/* 821D8870h case   56:*/		regs.R4 = regs.R19;
		/* 821D8870h case   56:*/		return 0x821D8874;
		  /* 821D8874h */ case   57:  		/* mr R3, R20 */
		/* 821D8874h case   57:*/		regs.R3 = regs.R20;
		/* 821D8874h case   57:*/		return 0x821D8878;
		  /* 821D8878h */ case   58:  		/* bl 320680 */
		/* 821D8878h case   58:*/		regs.LR = 0x821D887C; return 0x82226D20;
		/* 821D8878h case   58:*/		return 0x821D887C;
		  /* 821D887Ch */ case   59:  		/* or. R28, R3, R3 */
		/* 821D887Ch case   59:*/		cpu::op::or<1>(regs,&regs.R28,regs.R3,regs.R3);
		/* 821D887Ch case   59:*/		return 0x821D8880;
		  /* 821D8880h */ case   60:  		/* bc 12, CR0_EQ, -7068 */
		/* 821D8880h case   60:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D8880h case   60:*/		return 0x821D8884;
		  /* 821D8884h */ case   61:  		/* rlwinm R27, R20, 0, 0, 31 */
		/* 821D8884h case   61:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R27,regs.R20);
		/* 821D8884h case   61:*/		return 0x821D8888;
		  /* 821D8888h */ case   62:  		/* lwz R9, <#[R1 + 1924]> */
		/* 821D8888h case   62:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000784) );
		/* 821D8888h case   62:*/		return 0x821D888C;
		  /* 821D888Ch */ case   63:  		/* mr R8, R26 */
		/* 821D888Ch case   63:*/		regs.R8 = regs.R26;
		/* 821D888Ch case   63:*/		return 0x821D8890;
		  /* 821D8890h */ case   64:  		/* mr R7, R25 */
		/* 821D8890h case   64:*/		regs.R7 = regs.R25;
		/* 821D8890h case   64:*/		return 0x821D8894;
		  /* 821D8894h */ case   65:  		/* mr R6, R24 */
		/* 821D8894h case   65:*/		regs.R6 = regs.R24;
		/* 821D8894h case   65:*/		return 0x821D8898;
		  /* 821D8898h */ case   66:  		/* mr R5, R29 */
		/* 821D8898h case   66:*/		regs.R5 = regs.R29;
		/* 821D8898h case   66:*/		return 0x821D889C;
		  /* 821D889Ch */ case   67:  		/* mr R4, R30 */
		/* 821D889Ch case   67:*/		regs.R4 = regs.R30;
		/* 821D889Ch case   67:*/		return 0x821D88A0;
		  /* 821D88A0h */ case   68:  		/* mr R3, R27 */
		/* 821D88A0h case   68:*/		regs.R3 = regs.R27;
		/* 821D88A0h case   68:*/		return 0x821D88A4;
		  /* 821D88A4h */ case   69:  		/* bl -27284 */
		/* 821D88A4h case   69:*/		regs.LR = 0x821D88A8; return 0x821D1E10;
		/* 821D88A4h case   69:*/		return 0x821D88A8;
		  /* 821D88A8h */ case   70:  		/* lwz R26, <#[R1 + 112]> */
		/* 821D88A8h case   70:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000070) );
		/* 821D88A8h case   70:*/		return 0x821D88AC;
		  /* 821D88ACh */ case   71:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 821D88ACh case   71:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 821D88ACh case   71:*/		return 0x821D88B0;
		  /* 821D88B0h */ case   72:  		/* bc 12, CR0_EQ, 64 */
		/* 821D88B0h case   72:*/		if ( regs.CR[0].eq ) { return 0x821D88F0;  }
		/* 821D88B0h case   72:*/		return 0x821D88B4;
		  /* 821D88B4h */ case   73:  		/* mr R4, R30 */
		/* 821D88B4h case   73:*/		regs.R4 = regs.R30;
		/* 821D88B4h case   73:*/		return 0x821D88B8;
		  /* 821D88B8h */ case   74:  		/* mr R3, R27 */
		/* 821D88B8h case   74:*/		regs.R3 = regs.R27;
		/* 821D88B8h case   74:*/		return 0x821D88BC;
		  /* 821D88BCh */ case   75:  		/* mr R5, R26 */
		/* 821D88BCh case   75:*/		regs.R5 = regs.R26;
		/* 821D88BCh case   75:*/		return 0x821D88C0;
		  /* 821D88C0h */ case   76:  		/* bl -52984 */
		/* 821D88C0h case   76:*/		regs.LR = 0x821D88C4; return 0x821CB9C8;
		/* 821D88C0h case   76:*/		return 0x821D88C4;
		  /* 821D88C4h */ case   77:  		/* mr R5, R29 */
		/* 821D88C4h case   77:*/		regs.R5 = regs.R29;
		/* 821D88C4h case   77:*/		return 0x821D88C8;
		  /* 821D88C8h */ case   78:  		/* mr R4, R30 */
		/* 821D88C8h case   78:*/		regs.R4 = regs.R30;
		/* 821D88C8h case   78:*/		return 0x821D88CC;
		  /* 821D88CCh */ case   79:  		/* mr R3, R27 */
		/* 821D88CCh case   79:*/		regs.R3 = regs.R27;
		/* 821D88CCh case   79:*/		return 0x821D88D0;
		  /* 821D88D0h */ case   80:  		/* bl -395200 */
		/* 821D88D0h case   80:*/		regs.LR = 0x821D88D4; return 0x82178110;
		/* 821D88D0h case   80:*/		return 0x821D88D4;
		  /* 821D88D4h */ case   81:  		/* mr R6, R3 */
		/* 821D88D4h case   81:*/		regs.R6 = regs.R3;
		/* 821D88D4h case   81:*/		return 0x821D88D8;
		  /* 821D88D8h */ case   82:  		/* mr R5, R16 */
		/* 821D88D8h case   82:*/		regs.R5 = regs.R16;
		/* 821D88D8h case   82:*/		return 0x821D88DC;
		  /* 821D88DCh */ case   83:  		/* li R4, 0 */
		/* 821D88DCh case   83:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D88DCh case   83:*/		return 0x821D88E0;
		  /* 821D88E0h */ case   84:  		/* mr R3, R27 */
		/* 821D88E0h case   84:*/		regs.R3 = regs.R27;
		/* 821D88E0h case   84:*/		return 0x821D88E4;
		  /* 821D88E4h */ case   85:  		/* bl -95444 */
		/* 821D88E4h case   85:*/		regs.LR = 0x821D88E8; return 0x821C1410;
		/* 821D88E4h case   85:*/		return 0x821D88E8;
		  /* 821D88E8h */ case   86:  		/* mr R30, R3 */
		/* 821D88E8h case   86:*/		regs.R30 = regs.R3;
		/* 821D88E8h case   86:*/		return 0x821D88EC;
		  /* 821D88ECh */ case   87:  		/* li R29, 0 */
		/* 821D88ECh case   87:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821D88ECh case   87:*/		return 0x821D88F0;
	}
	return 0x821D88F0;
} // Block from 821D8790h-821D88F0h (88 instructions)

//////////////////////////////////////////////////////
// Block at 821D88F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D88F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D88F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D88F0);
		  /* 821D88F0h */ case    0:  		/* rlwinm R11, R29, 2, 0, 29 */
		/* 821D88F0h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R29);
		/* 821D88F0h case    0:*/		return 0x821D88F4;
		  /* 821D88F4h */ case    1:  		/* li R7, 0 */
		/* 821D88F4h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821D88F4h case    1:*/		return 0x821D88F8;
		  /* 821D88F8h */ case    2:  		/* ori R11, R11, 224 */
		/* 821D88F8h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xE0);
		/* 821D88F8h case    2:*/		return 0x821D88FC;
		  /* 821D88FCh */ case    3:  		/* li R5, 2 */
		/* 821D88FCh case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 821D88FCh case    3:*/		return 0x821D8900;
		  /* 821D8900h */ case    4:  		/* or R6, R11, R29 */
		/* 821D8900h case    4:*/		cpu::op::or<0>(regs,&regs.R6,regs.R11,regs.R29);
		/* 821D8900h case    4:*/		return 0x821D8904;
		  /* 821D8904h */ case    5:  		/* mr R4, R30 */
		/* 821D8904h case    5:*/		regs.R4 = regs.R30;
		/* 821D8904h case    5:*/		return 0x821D8908;
		  /* 821D8908h */ case    6:  		/* mr R3, R27 */
		/* 821D8908h case    6:*/		regs.R3 = regs.R27;
		/* 821D8908h case    6:*/		return 0x821D890C;
		  /* 821D890Ch */ case    7:  		/* bl -395340 */
		/* 821D890Ch case    7:*/		regs.LR = 0x821D8910; return 0x821780C0;
		/* 821D890Ch case    7:*/		return 0x821D8910;
		  /* 821D8910h */ case    8:  		/* mr R6, R3 */
		/* 821D8910h case    8:*/		regs.R6 = regs.R3;
		/* 821D8910h case    8:*/		return 0x821D8914;
		  /* 821D8914h */ case    9:  		/* mr R5, R16 */
		/* 821D8914h case    9:*/		regs.R5 = regs.R16;
		/* 821D8914h case    9:*/		return 0x821D8918;
		  /* 821D8918h */ case   10:  		/* li R4, 0 */
		/* 821D8918h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D8918h case   10:*/		return 0x821D891C;
		  /* 821D891Ch */ case   11:  		/* mr R3, R27 */
		/* 821D891Ch case   11:*/		regs.R3 = regs.R27;
		/* 821D891Ch case   11:*/		return 0x821D8920;
		  /* 821D8920h */ case   12:  		/* bl -94168 */
		/* 821D8920h case   12:*/		regs.LR = 0x821D8924; return 0x821C1948;
		/* 821D8920h case   12:*/		return 0x821D8924;
		  /* 821D8924h */ case   13:  		/* lwz R11, <#[R31 + 12]> */
		/* 821D8924h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D8924h case   13:*/		return 0x821D8928;
		  /* 821D8928h */ case   14:  		/* mr R4, R3 */
		/* 821D8928h case   14:*/		regs.R4 = regs.R3;
		/* 821D8928h case   14:*/		return 0x821D892C;
		  /* 821D892Ch */ case   15:  		/* addi R11, R11, 4 */
		/* 821D892Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821D892Ch case   15:*/		return 0x821D8930;
		  /* 821D8930h */ case   16:  		/* lwz R10, <#[R11]> */
		/* 821D8930h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D8930h case   16:*/		return 0x821D8934;
		  /* 821D8934h */ case   17:  		/* b 12 */
		/* 821D8934h case   17:*/		return 0x821D8940;
		/* 821D8934h case   17:*/		return 0x821D8938;
		  /* 821D8938h */ case   18:  		/* addi R11, R10, 8 */
		/* 821D8938h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821D8938h case   18:*/		return 0x821D893C;
		  /* 821D893Ch */ case   19:  		/* lwz R10, <#[R10 + 8]> */
		/* 821D893Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821D893Ch case   19:*/		return 0x821D8940;
	}
	return 0x821D8940;
} // Block from 821D88F0h-821D8940h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821D8940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8940);
		  /* 821D8940h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821D8940h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821D8940h case    0:*/		return 0x821D8944;
		  /* 821D8944h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821D8944h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D8938;  }
		/* 821D8944h case    1:*/		return 0x821D8948;
		  /* 821D8948h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821D8948h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821D8948h case    2:*/		return 0x821D894C;
		  /* 821D894Ch */ case    3:  		/* stw R10, <#[R11]> */
		/* 821D894Ch case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D894Ch case    3:*/		return 0x821D8950;
		  /* 821D8950h */ case    4:  		/* lwz R11, <#[R28 + 4]> */
		/* 821D8950h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821D8950h case    4:*/		return 0x821D8954;
		  /* 821D8954h */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 821D8954h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D8954h case    5:*/		return 0x821D8958;
		  /* 821D8958h */ case    6:  		/* stw R31, <#[R28 + 4]> */
		/* 821D8958h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R28 + 0x00000004) );
		/* 821D8958h case    6:*/		return 0x821D895C;
		  /* 821D895Ch */ case    7:  		/* stw R28, <#[R31 + 12]> */
		/* 821D895Ch case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D895Ch case    7:*/		return 0x821D8960;
		  /* 821D8960h */ case    8:  		/* lwz R11, <#[R1 + 700]> */
		/* 821D8960h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000002BC) );
		/* 821D8960h case    8:*/		return 0x821D8964;
		  /* 821D8964h */ case    9:  		/* lwz R10, <#[R31]> */
		/* 821D8964h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821D8964h case    9:*/		return 0x821D8968;
		  /* 821D8968h */ case   10:  		/* rlwinm R11, R11, 5, 22, 26 */
		/* 821D8968h case   10:*/		cpu::op::rlwinm<0,5,22,26>(regs,&regs.R11,regs.R11);
		/* 821D8968h case   10:*/		return 0x821D896C;
		  /* 821D896Ch */ case   11:  		/* rlwinm R10, R10, 0, 27, 24 */
		/* 821D896Ch case   11:*/		cpu::op::rlwinm<0,0,27,24>(regs,&regs.R10,regs.R10);
		/* 821D896Ch case   11:*/		return 0x821D8970;
		  /* 821D8970h */ case   12:  		/* rlwinm R11, R11, 0, 25, 23 */
		/* 821D8970h case   12:*/		cpu::op::rlwinm<0,0,25,23>(regs,&regs.R11,regs.R11);
		/* 821D8970h case   12:*/		return 0x821D8974;
		  /* 821D8974h */ case   13:  		/* rlwinm R10, R10, 0, 24, 21 */
		/* 821D8974h case   13:*/		cpu::op::rlwinm<0,0,24,21>(regs,&regs.R10,regs.R10);
		/* 821D8974h case   13:*/		return 0x821D8978;
		  /* 821D8978h */ case   14:  		/* ori R11, R11, 7296 */
		/* 821D8978h case   14:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1C80);
		/* 821D8978h case   14:*/		return 0x821D897C;
		  /* 821D897Ch */ case   15:  		/* or R11, R11, R10 */
		/* 821D897Ch case   15:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D897Ch case   15:*/		return 0x821D8980;
		  /* 821D8980h */ case   16:  		/* stw R11, <#[R31]> */
		/* 821D8980h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D8980h case   16:*/		return 0x821D8984;
		  /* 821D8984h */ case   17:  		/* lwz R10, <#[R1 + 456]> */
		/* 821D8984h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000001C8) );
		/* 821D8984h case   17:*/		return 0x821D8988;
		  /* 821D8988h */ case   18:  		/* rlwimi R10, R11, 0, 0, 26 */
		/* 821D8988h case   18:*/		cpu::op::rlwimi<0,0,0,26>(regs,&regs.R10,regs.R11);
		/* 821D8988h case   18:*/		return 0x821D898C;
		  /* 821D898Ch */ case   19:  		/* stw R10, <#[R31]> */
		/* 821D898Ch case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821D898Ch case   19:*/		return 0x821D8990;
		  /* 821D8990h */ case   20:  		/* lwz R11, <#[R23 + 12]> */
		/* 821D8990h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000000C) );
		/* 821D8990h case   20:*/		return 0x821D8994;
		  /* 821D8994h */ case   21:  		/* addi R11, R11, 4 */
		/* 821D8994h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821D8994h case   21:*/		return 0x821D8998;
		  /* 821D8998h */ case   22:  		/* lwz R10, <#[R11]> */
		/* 821D8998h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D8998h case   22:*/		return 0x821D899C;
		  /* 821D899Ch */ case   23:  		/* b 12 */
		/* 821D899Ch case   23:*/		return 0x821D89A8;
		/* 821D899Ch case   23:*/		return 0x821D89A0;
		  /* 821D89A0h */ case   24:  		/* addi R11, R10, 8 */
		/* 821D89A0h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821D89A0h case   24:*/		return 0x821D89A4;
		  /* 821D89A4h */ case   25:  		/* lwz R10, <#[R10 + 8]> */
		/* 821D89A4h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821D89A4h case   25:*/		return 0x821D89A8;
	}
	return 0x821D89A8;
} // Block from 821D8940h-821D89A8h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821D89A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D89A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D89A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D89A8);
		  /* 821D89A8h */ case    0:  		/* cmplw CR6, R10, R23 */
		/* 821D89A8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R23);
		/* 821D89A8h case    0:*/		return 0x821D89AC;
		  /* 821D89ACh */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821D89ACh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D89A0;  }
		/* 821D89ACh case    1:*/		return 0x821D89B0;
		  /* 821D89B0h */ case    2:  		/* lwz R10, <#[R23 + 8]> */
		/* 821D89B0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000008) );
		/* 821D89B0h case    2:*/		return 0x821D89B4;
		  /* 821D89B4h */ case    3:  		/* mr R5, R26 */
		/* 821D89B4h case    3:*/		regs.R5 = regs.R26;
		/* 821D89B4h case    3:*/		return 0x821D89B8;
		  /* 821D89B8h */ case    4:  		/* mr R3, R27 */
		/* 821D89B8h case    4:*/		regs.R3 = regs.R27;
		/* 821D89B8h case    4:*/		return 0x821D89BC;
		  /* 821D89BCh */ case    5:  		/* stw R10, <#[R11]> */
		/* 821D89BCh case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D89BCh case    5:*/		return 0x821D89C0;
		  /* 821D89C0h */ case    6:  		/* lwz R11, <#[R4 + 4]> */
		/* 821D89C0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821D89C0h case    6:*/		return 0x821D89C4;
		  /* 821D89C4h */ case    7:  		/* stw R11, <#[R23 + 8]> */
		/* 821D89C4h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821D89C4h case    7:*/		return 0x821D89C8;
		  /* 821D89C8h */ case    8:  		/* stw R23, <#[R4 + 4]> */
		/* 821D89C8h case    8:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R4 + 0x00000004) );
		/* 821D89C8h case    8:*/		return 0x821D89CC;
		  /* 821D89CCh */ case    9:  		/* stw R4, <#[R23 + 12]> */
		/* 821D89CCh case    9:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R23 + 0x0000000C) );
		/* 821D89CCh case    9:*/		return 0x821D89D0;
		  /* 821D89D0h */ case   10:  		/* bl -53256 */
		/* 821D89D0h case   10:*/		regs.LR = 0x821D89D4; return 0x821CB9C8;
		/* 821D89D0h case   10:*/		return 0x821D89D4;
		  /* 821D89D4h */ case   11:  		/* mr R5, R26 */
		/* 821D89D4h case   11:*/		regs.R5 = regs.R26;
		/* 821D89D4h case   11:*/		return 0x821D89D8;
		  /* 821D89D8h */ case   12:  		/* mr R4, R30 */
		/* 821D89D8h case   12:*/		regs.R4 = regs.R30;
		/* 821D89D8h case   12:*/		return 0x821D89DC;
		  /* 821D89DCh */ case   13:  		/* mr R3, R27 */
		/* 821D89DCh case   13:*/		regs.R3 = regs.R27;
		/* 821D89DCh case   13:*/		return 0x821D89E0;
		  /* 821D89E0h */ case   14:  		/* bl -53272 */
		/* 821D89E0h case   14:*/		regs.LR = 0x821D89E4; return 0x821CB9C8;
		/* 821D89E0h case   14:*/		return 0x821D89E4;
		  /* 821D89E4h */ case   15:  		/* mr R5, R26 */
		/* 821D89E4h case   15:*/		regs.R5 = regs.R26;
		/* 821D89E4h case   15:*/		return 0x821D89E8;
		  /* 821D89E8h */ case   16:  		/* mr R4, R21 */
		/* 821D89E8h case   16:*/		regs.R4 = regs.R21;
		/* 821D89E8h case   16:*/		return 0x821D89EC;
		  /* 821D89ECh */ case   17:  		/* mr R3, R27 */
		/* 821D89ECh case   17:*/		regs.R3 = regs.R27;
		/* 821D89ECh case   17:*/		return 0x821D89F0;
	}
	return 0x821D89F0;
} // Block from 821D89A8h-821D89F0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821D89F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D89F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D89F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D89F0);
		  /* 821D89F0h */ case    0:  		/* bl -53288 */
		/* 821D89F0h case    0:*/		regs.LR = 0x821D89F4; return 0x821CB9C8;
		/* 821D89F0h case    0:*/		return 0x821D89F4;
		  /* 821D89F4h */ case    1:  		/* b -7440 */
		/* 821D89F4h case    1:*/		return 0x821D6CE4;
		/* 821D89F4h case    1:*/		return 0x821D89F8;
	}
	return 0x821D89F8;
} // Block from 821D89F0h-821D89F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D89F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D89F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D89F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D89F8);
		  /* 821D89F8h */ case    0:  		/* lwz R29, <#[R16]> */
		/* 821D89F8h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R16 + 0x00000000) );
		/* 821D89F8h case    0:*/		return 0x821D89FC;
		  /* 821D89FCh */ case    1:  		/* cmplwi CR0, R29, 0 */
		/* 821D89FCh case    1:*/		cpu::op::cmplwi<0>(regs,regs.R29,0x00000000);
		/* 821D89FCh case    1:*/		return 0x821D8A00;
		  /* 821D8A00h */ case    2:  		/* bc 12, CR0_EQ, -7452 */
		/* 821D8A00h case    2:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D8A00h case    2:*/		return 0x821D8A04;
		  /* 821D8A04h */ case    3:  		/* li R30, 15 */
		/* 821D8A04h case    3:*/		cpu::op::li<0>(regs,&regs.R30,0xF);
		/* 821D8A04h case    3:*/		return 0x821D8A08;
		  /* 821D8A08h */ case    4:  		/* mr R31, R29 */
		/* 821D8A08h case    4:*/		regs.R31 = regs.R29;
		/* 821D8A08h case    4:*/		return 0x821D8A0C;
		  /* 821D8A0Ch */ case    5:  		/* cmplwi CR6, R31, 0 */
		/* 821D8A0Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D8A0Ch case    5:*/		return 0x821D8A10;
		  /* 821D8A10h */ case    6:  		/* bc 12, CR6_EQ, 48 */
		/* 821D8A10h case    6:*/		if ( regs.CR[6].eq ) { return 0x821D8A40;  }
		/* 821D8A10h case    6:*/		return 0x821D8A14;
		  /* 821D8A14h */ case    7:  		/* lwz R11, <#[R31 + 12]> */
		/* 821D8A14h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D8A14h case    7:*/		return 0x821D8A18;
		  /* 821D8A18h */ case    8:  		/* lwz R10, <#[R31]> */
		/* 821D8A18h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821D8A18h case    8:*/		return 0x821D8A1C;
		  /* 821D8A1Ch */ case    9:  		/* rlwinm R9, R10, 29, 28, 29 */
		/* 821D8A1Ch case    9:*/		cpu::op::rlwinm<0,29,28,29>(regs,&regs.R9,regs.R10);
		/* 821D8A1Ch case    9:*/		return 0x821D8A20;
		  /* 821D8A20h */ case   10:  		/* rlwinm R4, R10, 0, 27, 31 */
		/* 821D8A20h case   10:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R10);
		/* 821D8A20h case   10:*/		return 0x821D8A24;
		  /* 821D8A24h */ case   11:  		/* lhz R11, <#[R11 + 14]> */
		/* 821D8A24h case   11:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000E) );
		/* 821D8A24h case   11:*/		return 0x821D8A28;
		  /* 821D8A28h */ case   12:  		/* srw R11, R11, R9 */
		/* 821D8A28h case   12:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D8A28h case   12:*/		return 0x821D8A2C;
		  /* 821D8A2Ch */ case   13:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821D8A2Ch case   13:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821D8A2Ch case   13:*/		return 0x821D8A30;
		  /* 821D8A30h */ case   14:  		/* bl -252336 */
		/* 821D8A30h case   14:*/		regs.LR = 0x821D8A34; return 0x8219B080;
		/* 821D8A30h case   14:*/		return 0x821D8A34;
		  /* 821D8A34h */ case   15:  		/* lwz R31, <#[R31 + 4]> */
		/* 821D8A34h case   15:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 821D8A34h case   15:*/		return 0x821D8A38;
		  /* 821D8A38h */ case   16:  		/* and R30, R3, R30 */
		/* 821D8A38h case   16:*/		cpu::op::and<0>(regs,&regs.R30,regs.R3,regs.R30);
		/* 821D8A38h case   16:*/		return 0x821D8A3C;
		  /* 821D8A3Ch */ case   17:  		/* b -48 */
		/* 821D8A3Ch case   17:*/		return 0x821D8A0C;
		/* 821D8A3Ch case   17:*/		return 0x821D8A40;
	}
	return 0x821D8A40;
} // Block from 821D89F8h-821D8A40h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821D8A40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8A40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8A40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8A40);
		  /* 821D8A40h */ case    0:  		/* lwz R11, <#[R16 + 12]> */
		/* 821D8A40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x0000000C) );
		/* 821D8A40h case    0:*/		return 0x821D8A44;
		  /* 821D8A44h */ case    1:  		/* li R5, 0 */
		/* 821D8A44h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821D8A44h case    1:*/		return 0x821D8A48;
		  /* 821D8A48h */ case    2:  		/* lwz R31, <#[R1 + 112]> */
		/* 821D8A48h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000070) );
		/* 821D8A48h case    2:*/		return 0x821D8A4C;
		  /* 821D8A4Ch */ case    3:  		/* mr R4, R16 */
		/* 821D8A4Ch case    3:*/		regs.R4 = regs.R16;
		/* 821D8A4Ch case    3:*/		return 0x821D8A50;
		  /* 821D8A50h */ case    4:  		/* lwz R28, <#[R1 + 1908]> */
		/* 821D8A50h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000774) );
		/* 821D8A50h case    4:*/		return 0x821D8A54;
		  /* 821D8A54h */ case    5:  		/* rlwinm R11, R11, 0, 28, 29 */
		/* 821D8A54h case    5:*/		cpu::op::rlwinm<0,0,28,29>(regs,&regs.R11,regs.R11);
		/* 821D8A54h case    5:*/		return 0x821D8A58;
		  /* 821D8A58h */ case    6:  		/* mr R7, R31 */
		/* 821D8A58h case    6:*/		regs.R7 = regs.R31;
		/* 821D8A58h case    6:*/		return 0x821D8A5C;
		  /* 821D8A5Ch */ case    7:  		/* or R6, R11, R30 */
		/* 821D8A5Ch case    7:*/		cpu::op::or<0>(regs,&regs.R6,regs.R11,regs.R30);
		/* 821D8A5Ch case    7:*/		return 0x821D8A60;
		  /* 821D8A60h */ case    8:  		/* mr R3, R28 */
		/* 821D8A60h case    8:*/		regs.R3 = regs.R28;
		/* 821D8A60h case    8:*/		return 0x821D8A64;
		  /* 821D8A64h */ case    9:  		/* bl -40636 */
		/* 821D8A64h case    9:*/		regs.LR = 0x821D8A68; return 0x821CEBA8;
		/* 821D8A64h case    9:*/		return 0x821D8A68;
		  /* 821D8A68h */ case   10:  		/* lwz R30, <#[R1 + 1924]> */
		/* 821D8A68h case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000784) );
		/* 821D8A68h case   10:*/		return 0x821D8A6C;
		  /* 821D8A6Ch */ case   11:  		/* lbz R11, <#[R30]> */
		/* 821D8A6Ch case   11:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821D8A6Ch case   11:*/		return 0x821D8A70;
		  /* 821D8A70h */ case   12:  		/* cmplwi CR0, R11, 0 */
		/* 821D8A70h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821D8A70h case   12:*/		return 0x821D8A74;
		  /* 821D8A74h */ case   13:  		/* bc 4, CR0_EQ, -7568 */
		/* 821D8A74h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D8A74h case   13:*/		return 0x821D8A78;
		  /* 821D8A78h */ case   14:  		/* lwz R11, <#[R16 + 28]> */
		/* 821D8A78h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x0000001C) );
		/* 821D8A78h case   14:*/		return 0x821D8A7C;
		  /* 821D8A7Ch */ case   15:  		/* lwz R11, <#[R11 + 48]> */
		/* 821D8A7Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 821D8A7Ch case   15:*/		return 0x821D8A80;
		  /* 821D8A80h */ case   16:  		/* rlwinm. R11, R11, 11, 31, 31 */
		/* 821D8A80h case   16:*/		cpu::op::rlwinm<1,11,31,31>(regs,&regs.R11,regs.R11);
		/* 821D8A80h case   16:*/		return 0x821D8A84;
		  /* 821D8A84h */ case   17:  		/* bc 4, CR0_EQ, -7584 */
		/* 821D8A84h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D8A84h case   17:*/		return 0x821D8A88;
		  /* 821D8A88h */ case   18:  		/* li R9, 0 */
		/* 821D8A88h case   18:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821D8A88h case   18:*/		return 0x821D8A8C;
		  /* 821D8A8Ch */ case   19:  		/* mr R8, R16 */
		/* 821D8A8Ch case   19:*/		regs.R8 = regs.R16;
		/* 821D8A8Ch case   19:*/		return 0x821D8A90;
		  /* 821D8A90h */ case   20:  		/* addi R7, R1, 480 */
		/* 821D8A90h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1E0);
		/* 821D8A90h case   20:*/		return 0x821D8A94;
		  /* 821D8A94h */ case   21:  		/* addi R6, R1, 472 */
		/* 821D8A94h case   21:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1D8);
		/* 821D8A94h case   21:*/		return 0x821D8A98;
		  /* 821D8A98h */ case   22:  		/* addi R5, R1, 464 */
		/* 821D8A98h case   22:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x1D0);
		/* 821D8A98h case   22:*/		return 0x821D8A9C;
		  /* 821D8A9Ch */ case   23:  		/* mr R4, R16 */
		/* 821D8A9Ch case   23:*/		regs.R4 = regs.R16;
		/* 821D8A9Ch case   23:*/		return 0x821D8AA0;
		  /* 821D8AA0h */ case   24:  		/* mr R3, R28 */
		/* 821D8AA0h case   24:*/		regs.R3 = regs.R28;
		/* 821D8AA0h case   24:*/		return 0x821D8AA4;
		  /* 821D8AA4h */ case   25:  		/* bl 347468 */
		/* 821D8AA4h case   25:*/		regs.LR = 0x821D8AA8; return 0x8222D7F0;
		/* 821D8AA4h case   25:*/		return 0x821D8AA8;
		  /* 821D8AA8h */ case   26:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D8AA8h case   26:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D8AA8h case   26:*/		return 0x821D8AAC;
		  /* 821D8AACh */ case   27:  		/* bc 12, CR0_EQ, 100 */
		/* 821D8AACh case   27:*/		if ( regs.CR[0].eq ) { return 0x821D8B10;  }
		/* 821D8AACh case   27:*/		return 0x821D8AB0;
		  /* 821D8AB0h */ case   28:  		/* lwz R5, <#[R1 + 464]> */
		/* 821D8AB0h case   28:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000001D0) );
		/* 821D8AB0h case   28:*/		return 0x821D8AB4;
		  /* 821D8AB4h */ case   29:  		/* cmplwi CR6, R5, 0 */
		/* 821D8AB4h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821D8AB4h case   29:*/		return 0x821D8AB8;
		  /* 821D8AB8h */ case   30:  		/* bc 12, CR6_EQ, 88 */
		/* 821D8AB8h case   30:*/		if ( regs.CR[6].eq ) { return 0x821D8B10;  }
		/* 821D8AB8h case   30:*/		return 0x821D8ABC;
		  /* 821D8ABCh */ case   31:  		/* lwz R11, <#[R5 + 28]> */
		/* 821D8ABCh case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x0000001C) );
		/* 821D8ABCh case   31:*/		return 0x821D8AC0;
		  /* 821D8AC0h */ case   32:  		/* li R6, 1 */
		/* 821D8AC0h case   32:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821D8AC0h case   32:*/		return 0x821D8AC4;
		  /* 821D8AC4h */ case   33:  		/* lwz R10, <#[R16 + 28]> */
		/* 821D8AC4h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x0000001C) );
		/* 821D8AC4h case   33:*/		return 0x821D8AC8;
		  /* 821D8AC8h */ case   34:  		/* lwz R11, <#[R11 + 48]> */
		/* 821D8AC8h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 821D8AC8h case   34:*/		return 0x821D8ACC;
		  /* 821D8ACCh */ case   35:  		/* lwz R10, <#[R10 + 40]> */
		/* 821D8ACCh case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000028) );
		/* 821D8ACCh case   35:*/		return 0x821D8AD0;
		  /* 821D8AD0h */ case   36:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 821D8AD0h case   36:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 821D8AD0h case   36:*/		return 0x821D8AD4;
		  /* 821D8AD4h */ case   37:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 821D8AD4h case   37:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 821D8AD4h case   37:*/		return 0x821D8AD8;
		  /* 821D8AD8h */ case   38:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821D8AD8h case   38:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821D8AD8h case   38:*/		return 0x821D8ADC;
		  /* 821D8ADCh */ case   39:  		/* addi R11, R11, 1 */
		/* 821D8ADCh case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821D8ADCh case   39:*/		return 0x821D8AE0;
		  /* 821D8AE0h */ case   40:  		/* slw R9, R6, R9 */
		/* 821D8AE0h case   40:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 821D8AE0h case   40:*/		return 0x821D8AE4;
		  /* 821D8AE4h */ case   41:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821D8AE4h case   41:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821D8AE4h case   41:*/		return 0x821D8AE8;
		  /* 821D8AE8h */ case   42:  		/* lwzx R11, <#[R11 + R10]> */
		/* 821D8AE8h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821D8AE8h case   42:*/		return 0x821D8AEC;
		  /* 821D8AECh */ case   43:  		/* and. R11, R11, R9 */
		/* 821D8AECh case   43:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D8AECh case   43:*/		return 0x821D8AF0;
		  /* 821D8AF0h */ case   44:  		/* bc 12, CR0_EQ, 36 */
		/* 821D8AF0h case   44:*/		if ( regs.CR[0].eq ) { return 0x821D8B14;  }
		/* 821D8AF0h case   44:*/		return 0x821D8AF4;
		  /* 821D8AF4h */ case   45:  		/* lwz R11, <#[R1 + 472]> */
		/* 821D8AF4h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001D8) );
		/* 821D8AF4h case   45:*/		return 0x821D8AF8;
		  /* 821D8AF8h */ case   46:  		/* mr R9, R30 */
		/* 821D8AF8h case   46:*/		regs.R9 = regs.R30;
		/* 821D8AF8h case   46:*/		return 0x821D8AFC;
		  /* 821D8AFCh */ case   47:  		/* lwz R7, <#[R1 + 480]> */
		/* 821D8AFCh case   47:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x000001E0) );
		/* 821D8AFCh case   47:*/		return 0x821D8B00;
		  /* 821D8B00h */ case   48:  		/* mr R8, R31 */
		/* 821D8B00h case   48:*/		regs.R8 = regs.R31;
		/* 821D8B00h case   48:*/		return 0x821D8B04;
		  /* 821D8B04h */ case   49:  		/* ori R6, R11, 228 */
		/* 821D8B04h case   49:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R11,0xE4);
		/* 821D8B04h case   49:*/		return 0x821D8B08;
		  /* 821D8B08h */ case   50:  		/* mr R3, R28 */
		/* 821D8B08h case   50:*/		regs.R3 = regs.R28;
		/* 821D8B08h case   50:*/		return 0x821D8B0C;
		  /* 821D8B0Ch */ case   51:  		/* b 2172 */
		/* 821D8B0Ch case   51:*/		return 0x821D9388;
		/* 821D8B0Ch case   51:*/		return 0x821D8B10;
	}
	return 0x821D8B10;
} // Block from 821D8A40h-821D8B10h (52 instructions)

//////////////////////////////////////////////////////
// Block at 821D8B10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8B10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8B10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8B10);
		  /* 821D8B10h */ case    0:  		/* li R6, 1 */
		/* 821D8B10h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821D8B10h case    0:*/		return 0x821D8B14;
	}
	return 0x821D8B14;
} // Block from 821D8B10h-821D8B14h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D8B14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8B14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8B14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8B14);
		  /* 821D8B14h */ case    0:  		/* lwz R11, <#[R16 + 28]> */
		/* 821D8B14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x0000001C) );
		/* 821D8B14h case    0:*/		return 0x821D8B18;
		  /* 821D8B18h */ case    1:  		/* lwz R11, <#[R11 + 48]> */
		/* 821D8B18h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 821D8B18h case    1:*/		return 0x821D8B1C;
		  /* 821D8B1Ch */ case    2:  		/* rlwinm. R10, R11, 13, 31, 31 */
		/* 821D8B1Ch case    2:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R10,regs.R11);
		/* 821D8B1Ch case    2:*/		return 0x821D8B20;
		  /* 821D8B20h */ case    3:  		/* bc 4, CR0_EQ, -7740 */
		/* 821D8B20h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D8B20h case    3:*/		return 0x821D8B24;
		  /* 821D8B24h */ case    4:  		/* lwz R30, <#[R29 + 4]> */
		/* 821D8B24h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000004) );
		/* 821D8B24h case    4:*/		return 0x821D8B28;
		  /* 821D8B28h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 821D8B28h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D8B28h case    5:*/		return 0x821D8B2C;
		  /* 821D8B2Ch */ case    6:  		/* bc 12, CR6_EQ, -7752 */
		/* 821D8B2Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D8B2Ch case    6:*/		return 0x821D8B30;
		  /* 821D8B30h */ case    7:  		/* lwz R10, <#[R30 + 4]> */
		/* 821D8B30h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821D8B30h case    7:*/		return 0x821D8B34;
		  /* 821D8B34h */ case    8:  		/* cmpwi CR6, R10, 0 */
		/* 821D8B34h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 821D8B34h case    8:*/		return 0x821D8B38;
		  /* 821D8B38h */ case    9:  		/* bc 4, CR6_EQ, -7764 */
		/* 821D8B38h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D8B38h case    9:*/		return 0x821D8B3C;
		  /* 821D8B3Ch */ case   10:  		/* lwz R10, <#[R28 + 44]> */
		/* 821D8B3Ch case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x0000002C) );
		/* 821D8B3Ch case   10:*/		return 0x821D8B40;
		  /* 821D8B40h */ case   11:  		/* rlwinm. R10, R10, 0, 13, 13 */
		/* 821D8B40h case   11:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R10,regs.R10);
		/* 821D8B40h case   11:*/		return 0x821D8B44;
		  /* 821D8B44h */ case   12:  		/* bc 12, CR0_EQ, -7776 */
		/* 821D8B44h case   12:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D8B44h case   12:*/		return 0x821D8B48;
		  /* 821D8B48h */ case   13:  		/* lwz R9, <#[R29 + 12]> */
		/* 821D8B48h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x0000000C) );
		/* 821D8B48h case   13:*/		return 0x821D8B4C;
		  /* 821D8B4Ch */ case   14:  		/* rlwinm R10, R11, 27, 18, 31 */
		/* 821D8B4Ch case   14:*/		cpu::op::rlwinm<0,27,18,31>(regs,&regs.R10,regs.R11);
		/* 821D8B4Ch case   14:*/		return 0x821D8B50;
		  /* 821D8B50h */ case   15:  		/* rlwinm R8, R11, 0, 27, 31 */
		/* 821D8B50h case   15:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R11);
		/* 821D8B50h case   15:*/		return 0x821D8B54;
		  /* 821D8B54h */ case   16:  		/* lwz R7, <#[R30 + 12]> */
		/* 821D8B54h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x0000000C) );
		/* 821D8B54h case   16:*/		return 0x821D8B58;
		  /* 821D8B58h */ case   17:  		/* addi R10, R10, 1 */
		/* 821D8B58h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821D8B58h case   17:*/		return 0x821D8B5C;
		  /* 821D8B5Ch */ case   18:  		/* slw R5, R6, R8 */
		/* 821D8B5Ch case   18:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R6,regs.R8);
		/* 821D8B5Ch case   18:*/		return 0x821D8B60;
		  /* 821D8B60h */ case   19:  		/* lwz R9, <#[R9 + 28]> */
		/* 821D8B60h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000001C) );
		/* 821D8B60h case   19:*/		return 0x821D8B64;
		  /* 821D8B64h */ case   20:  		/* rlwinm R4, R10, 2, 0, 29 */
		/* 821D8B64h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R10);
		/* 821D8B64h case   20:*/		return 0x821D8B68;
		  /* 821D8B68h */ case   21:  		/* rlwinm R10, R11, 0, 13, 31 */
		/* 821D8B68h case   21:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R11);
		/* 821D8B68h case   21:*/		return 0x821D8B6C;
		  /* 821D8B6Ch */ case   22:  		/* lwz R11, <#[R7 + 28]> */
		/* 821D8B6Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x0000001C) );
		/* 821D8B6Ch case   22:*/		return 0x821D8B70;
		  /* 821D8B70h */ case   23:  		/* lwz R8, <#[R9 + 40]> */
		/* 821D8B70h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000028) );
		/* 821D8B70h case   23:*/		return 0x821D8B74;
		  /* 821D8B74h */ case   24:  		/* lwzx R7, <#[R4 + R8]> */
		/* 821D8B74h case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R4 + regs.R8 + 0x00000000) );
		/* 821D8B74h case   24:*/		return 0x821D8B78;
		  /* 821D8B78h */ case   25:  		/* and. R7, R5, R7 */
		/* 821D8B78h case   25:*/		cpu::op::and<1>(regs,&regs.R7,regs.R5,regs.R7);
		/* 821D8B78h case   25:*/		return 0x821D8B7C;
		  /* 821D8B7Ch */ case   26:  		/* bc 4, CR0_EQ, -7832 */
		/* 821D8B7Ch case   26:*/		if ( !regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D8B7Ch case   26:*/		return 0x821D8B80;
		  /* 821D8B80h */ case   27:  		/* rlwinm R7, R10, 27, 5, 31 */
		/* 821D8B80h case   27:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R7,regs.R10);
		/* 821D8B80h case   27:*/		return 0x821D8B84;
		  /* 821D8B84h */ case   28:  		/* lwz R5, <#[R11 + 40]> */
		/* 821D8B84h case   28:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000028) );
		/* 821D8B84h case   28:*/		return 0x821D8B88;
		  /* 821D8B88h */ case   29:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821D8B88h case   29:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821D8B88h case   29:*/		return 0x821D8B8C;
		  /* 821D8B8Ch */ case   30:  		/* addi R7, R7, 1 */
		/* 821D8B8Ch case   30:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 821D8B8Ch case   30:*/		return 0x821D8B90;
		  /* 821D8B90h */ case   31:  		/* slw R10, R6, R10 */
		/* 821D8B90h case   31:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R6,regs.R10);
		/* 821D8B90h case   31:*/		return 0x821D8B94;
		  /* 821D8B94h */ case   32:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 821D8B94h case   32:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 821D8B94h case   32:*/		return 0x821D8B98;
		  /* 821D8B98h */ case   33:  		/* lwzx R7, <#[R7 + R5]> */
		/* 821D8B98h case   33:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R5 + 0x00000000) );
		/* 821D8B98h case   33:*/		return 0x821D8B9C;
		  /* 821D8B9Ch */ case   34:  		/* and. R10, R7, R10 */
		/* 821D8B9Ch case   34:*/		cpu::op::and<1>(regs,&regs.R10,regs.R7,regs.R10);
		/* 821D8B9Ch case   34:*/		return 0x821D8BA0;
		  /* 821D8BA0h */ case   35:  		/* bc 4, CR0_EQ, -7868 */
		/* 821D8BA0h case   35:*/		if ( !regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D8BA0h case   35:*/		return 0x821D8BA4;
		  /* 821D8BA4h */ case   36:  		/* lwz R10, <#[R11 + 48]> */
		/* 821D8BA4h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821D8BA4h case   36:*/		return 0x821D8BA8;
		  /* 821D8BA8h */ case   37:  		/* rlwinm R7, R10, 0, 13, 31 */
		/* 821D8BA8h case   37:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R7,regs.R10);
		/* 821D8BA8h case   37:*/		return 0x821D8BAC;
		  /* 821D8BACh */ case   38:  		/* rlwinm R10, R7, 27, 5, 31 */
		/* 821D8BACh case   38:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R7);
		/* 821D8BACh case   38:*/		return 0x821D8BB0;
		  /* 821D8BB0h */ case   39:  		/* rlwinm R7, R7, 0, 27, 31 */
		/* 821D8BB0h case   39:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R7);
		/* 821D8BB0h case   39:*/		return 0x821D8BB4;
		  /* 821D8BB4h */ case   40:  		/* addi R10, R10, 1 */
		/* 821D8BB4h case   40:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821D8BB4h case   40:*/		return 0x821D8BB8;
		  /* 821D8BB8h */ case   41:  		/* slw R7, R6, R7 */
		/* 821D8BB8h case   41:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R6,regs.R7);
		/* 821D8BB8h case   41:*/		return 0x821D8BBC;
		  /* 821D8BBCh */ case   42:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821D8BBCh case   42:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821D8BBCh case   42:*/		return 0x821D8BC0;
		  /* 821D8BC0h */ case   43:  		/* lwzx R10, <#[R10 + R8]> */
		/* 821D8BC0h case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 821D8BC0h case   43:*/		return 0x821D8BC4;
		  /* 821D8BC4h */ case   44:  		/* and. R10, R7, R10 */
		/* 821D8BC4h case   44:*/		cpu::op::and<1>(regs,&regs.R10,regs.R7,regs.R10);
		/* 821D8BC4h case   44:*/		return 0x821D8BC8;
		  /* 821D8BC8h */ case   45:  		/* bc 12, CR0_EQ, 16 */
		/* 821D8BC8h case   45:*/		if ( regs.CR[0].eq ) { return 0x821D8BD8;  }
		/* 821D8BC8h case   45:*/		return 0x821D8BCC;
		  /* 821D8BCCh */ case   46:  		/* mr R10, R9 */
		/* 821D8BCCh case   46:*/		regs.R10 = regs.R9;
		/* 821D8BCCh case   46:*/		return 0x821D8BD0;
		  /* 821D8BD0h */ case   47:  		/* mr R9, R11 */
		/* 821D8BD0h case   47:*/		regs.R9 = regs.R11;
		/* 821D8BD0h case   47:*/		return 0x821D8BD4;
		  /* 821D8BD4h */ case   48:  		/* mr R11, R10 */
		/* 821D8BD4h case   48:*/		regs.R11 = regs.R10;
		/* 821D8BD4h case   48:*/		return 0x821D8BD8;
	}
	return 0x821D8BD8;
} // Block from 821D8B14h-821D8BD8h (49 instructions)

//////////////////////////////////////////////////////
// Block at 821D8BD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8BD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8BD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8BD8);
		  /* 821D8BD8h */ case    0:  		/* lwz R10, <#[R9 + 48]> */
		/* 821D8BD8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000030) );
		/* 821D8BD8h case    0:*/		return 0x821D8BDC;
		  /* 821D8BDCh */ case    1:  		/* lwz R8, <#[R11 + 40]> */
		/* 821D8BDCh case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000028) );
		/* 821D8BDCh case    1:*/		return 0x821D8BE0;
		  /* 821D8BE0h */ case    2:  		/* rlwinm R7, R10, 0, 13, 31 */
		/* 821D8BE0h case    2:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R7,regs.R10);
		/* 821D8BE0h case    2:*/		return 0x821D8BE4;
		  /* 821D8BE4h */ case    3:  		/* lwz R11, <#[R11 + 64]> */
		/* 821D8BE4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000040) );
		/* 821D8BE4h case    3:*/		return 0x821D8BE8;
		  /* 821D8BE8h */ case    4:  		/* rlwinm R10, R7, 27, 5, 31 */
		/* 821D8BE8h case    4:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R7);
		/* 821D8BE8h case    4:*/		return 0x821D8BEC;
		  /* 821D8BECh */ case    5:  		/* rlwinm R7, R7, 0, 27, 31 */
		/* 821D8BECh case    5:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R7);
		/* 821D8BECh case    5:*/		return 0x821D8BF0;
		  /* 821D8BF0h */ case    6:  		/* addi R10, R10, 1 */
		/* 821D8BF0h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821D8BF0h case    6:*/		return 0x821D8BF4;
		  /* 821D8BF4h */ case    7:  		/* slw R7, R6, R7 */
		/* 821D8BF4h case    7:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R6,regs.R7);
		/* 821D8BF4h case    7:*/		return 0x821D8BF8;
		  /* 821D8BF8h */ case    8:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821D8BF8h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821D8BF8h case    8:*/		return 0x821D8BFC;
		  /* 821D8BFCh */ case    9:  		/* lwzx R10, <#[R10 + R8]> */
		/* 821D8BFCh case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 821D8BFCh case    9:*/		return 0x821D8C00;
		  /* 821D8C00h */ case   10:  		/* and. R10, R10, R7 */
		/* 821D8C00h case   10:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R7);
		/* 821D8C00h case   10:*/		return 0x821D8C04;
		  /* 821D8C04h */ case   11:  		/* bc 12, CR0_EQ, 28 */
		/* 821D8C04h case   11:*/		if ( regs.CR[0].eq ) { return 0x821D8C20;  }
		/* 821D8C04h case   11:*/		return 0x821D8C08;
		  /* 821D8C08h */ case   12:  		/* lwz R10, <#[R11 + 64]> */
		/* 821D8C08h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000040) );
		/* 821D8C08h case   12:*/		return 0x821D8C0C;
		  /* 821D8C0Ch */ case   13:  		/* lwz R9, <#[R9 + 64]> */
		/* 821D8C0Ch case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000040) );
		/* 821D8C0Ch case   13:*/		return 0x821D8C10;
		  /* 821D8C10h */ case   14:  		/* cmpw CR6, R10, R9 */
		/* 821D8C10h case   14:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R9);
		/* 821D8C10h case   14:*/		return 0x821D8C14;
		  /* 821D8C14h */ case   15:  		/* bc 12, CR6_EQ, 32 */
		/* 821D8C14h case   15:*/		if ( regs.CR[6].eq ) { return 0x821D8C34;  }
		/* 821D8C14h case   15:*/		return 0x821D8C18;
		  /* 821D8C18h */ case   16:  		/* li R11, 0 */
		/* 821D8C18h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D8C18h case   16:*/		return 0x821D8C1C;
		  /* 821D8C1Ch */ case   17:  		/* b 24 */
		/* 821D8C1Ch case   17:*/		return 0x821D8C34;
		/* 821D8C1Ch case   17:*/		return 0x821D8C20;
	}
	return 0x821D8C20;
} // Block from 821D8BD8h-821D8C20h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821D8C20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8C20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8C20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8C20);
		  /* 821D8C20h */ case    0:  		/* lwz R10, <#[R9 + 64]> */
		/* 821D8C20h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000040) );
		/* 821D8C20h case    0:*/		return 0x821D8C24;
		  /* 821D8C24h */ case    1:  		/* subf R10, R11, R10 */
		/* 821D8C24h case    1:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821D8C24h case    1:*/		return 0x821D8C28;
		  /* 821D8C28h */ case    2:  		/* addic R10, R10, -1 */
		/* 821D8C28h case    2:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821D8C28h case    2:*/		return 0x821D8C2C;
		  /* 821D8C2Ch */ case    3:  		/* subfe R10, R10, R10 */
		/* 821D8C2Ch case    3:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821D8C2Ch case    3:*/		return 0x821D8C30;
		  /* 821D8C30h */ case    4:  		/* and R11, R10, R11 */
		/* 821D8C30h case    4:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D8C30h case    4:*/		return 0x821D8C34;
	}
	return 0x821D8C34;
} // Block from 821D8C20h-821D8C34h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D8C34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8C34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8C34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8C34);
		  /* 821D8C34h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821D8C34h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D8C34h case    0:*/		return 0x821D8C38;
		  /* 821D8C38h */ case    1:  		/* bc 12, CR6_EQ, -8020 */
		/* 821D8C38h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D8C38h case    1:*/		return 0x821D8C3C;
		  /* 821D8C3Ch */ case    2:  		/* lwz R10, <#[R11 + 36]> */
		/* 821D8C3Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 821D8C3Ch case    2:*/		return 0x821D8C40;
		  /* 821D8C40h */ case    3:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821D8C40h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821D8C40h case    3:*/		return 0x821D8C44;
		  /* 821D8C44h */ case    4:  		/* bc 4, CR0_EQ, -8032 */
		/* 821D8C44h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D8C44h case    4:*/		return 0x821D8C48;
		  /* 821D8C48h */ case    5:  		/* lwz R11, <#[R11 + 32]> */
		/* 821D8C48h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 821D8C48h case    5:*/		return 0x821D8C4C;
		  /* 821D8C4Ch */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D8C4Ch case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D8C4Ch case    6:*/		return 0x821D8C50;
		  /* 821D8C50h */ case    7:  		/* addic. R25, R11, -40 */
		/* 821D8C50h case    7:*/		cpu::op::addic<1>(regs,&regs.R25,regs.R11,0xFFFFFFD8);
		/* 821D8C50h case    7:*/		return 0x821D8C54;
		  /* 821D8C54h */ case    8:  		/* bc 12, CR0_EQ, -8048 */
		/* 821D8C54h case    8:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D8C54h case    8:*/		return 0x821D8C58;
		  /* 821D8C58h */ case    9:  		/* lwz R31, <#[R25 + 8]> */
		/* 821D8C58h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R25 + 0x00000008) );
		/* 821D8C58h case    9:*/		return 0x821D8C5C;
		  /* 821D8C5Ch */ case   10:  		/* rlwinm R11, R31, 0, 18, 24 */
		/* 821D8C5Ch case   10:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R31);
		/* 821D8C5Ch case   10:*/		return 0x821D8C60;
		  /* 821D8C60h */ case   11:  		/* cmplwi CR6, R11, 11520 */
		/* 821D8C60h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002D00);
		/* 821D8C60h case   11:*/		return 0x821D8C64;
		  /* 821D8C64h */ case   12:  		/* bc 4, CR6_EQ, -8064 */
		/* 821D8C64h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D8C64h case   12:*/		return 0x821D8C68;
		  /* 821D8C68h */ case   13:  		/* lwz R28, <#[R1 + 1908]> */
		/* 821D8C68h case   13:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000774) );
		/* 821D8C68h case   13:*/		return 0x821D8C6C;
		  /* 821D8C6Ch */ case   14:  		/* mr R3, R25 */
		/* 821D8C6Ch case   14:*/		regs.R3 = regs.R25;
		/* 821D8C6Ch case   14:*/		return 0x821D8C70;
		  /* 821D8C70h */ case   15:  		/* mr R4, R28 */
		/* 821D8C70h case   15:*/		regs.R4 = regs.R28;
		/* 821D8C70h case   15:*/		return 0x821D8C74;
		  /* 821D8C74h */ case   16:  		/* bl -476468 */
		/* 821D8C74h case   16:*/		regs.LR = 0x821D8C78; return 0x82164740;
		/* 821D8C74h case   16:*/		return 0x821D8C78;
		  /* 821D8C78h */ case   17:  		/* lwz R26, <#[R3]> */
		/* 821D8C78h case   17:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R3 + 0x00000000) );
		/* 821D8C78h case   17:*/		return 0x821D8C7C;
		  /* 821D8C7Ch */ case   18:  		/* rlwinm. R11, R31, 14, 31, 31 */
		/* 821D8C7Ch case   18:*/		cpu::op::rlwinm<1,14,31,31>(regs,&regs.R11,regs.R31);
		/* 821D8C7Ch case   18:*/		return 0x821D8C80;
		  /* 821D8C80h */ case   19:  		/* bc 4, CR0_EQ, 48 */
		/* 821D8C80h case   19:*/		if ( !regs.CR[0].eq ) { return 0x821D8CB0;  }
		/* 821D8C80h case   19:*/		return 0x821D8C84;
		  /* 821D8C84h */ case   20:  		/* lwz R11, <#[R25 + 28]> */
		/* 821D8C84h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000001C) );
		/* 821D8C84h case   20:*/		return 0x821D8C88;
		  /* 821D8C88h */ case   21:  		/* lwz R10, <#[R11 + 12]> */
		/* 821D8C88h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D8C88h case   21:*/		return 0x821D8C8C;
		  /* 821D8C8Ch */ case   22:  		/* cmplwi CR6, R10, 0 */
		/* 821D8C8Ch case   22:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821D8C8Ch case   22:*/		return 0x821D8C90;
		  /* 821D8C90h */ case   23:  		/* bc 12, CR6_EQ, 24 */
		/* 821D8C90h case   23:*/		if ( regs.CR[6].eq ) { return 0x821D8CA8;  }
		/* 821D8C90h case   23:*/		return 0x821D8C94;
		  /* 821D8C94h */ case   24:  		/* lwz R11, <#[R10]> */
		/* 821D8C94h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821D8C94h case   24:*/		return 0x821D8C98;
		  /* 821D8C98h */ case   25:  		/* cmplw CR6, R11, R26 */
		/* 821D8C98h case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 821D8C98h case   25:*/		return 0x821D8C9C;
		  /* 821D8C9Ch */ case   26:  		/* bc 4, CR6_EQ, 16 */
		/* 821D8C9Ch case   26:*/		if ( !regs.CR[6].eq ) { return 0x821D8CAC;  }
		/* 821D8C9Ch case   26:*/		return 0x821D8CA0;
		  /* 821D8CA0h */ case   27:  		/* lwz R10, <#[R10 + 8]> */
		/* 821D8CA0h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821D8CA0h case   27:*/		return 0x821D8CA4;
		  /* 821D8CA4h */ case   28:  		/* b -24 */
		/* 821D8CA4h case   28:*/		return 0x821D8C8C;
		/* 821D8CA4h case   28:*/		return 0x821D8CA8;
	}
	return 0x821D8CA8;
} // Block from 821D8C34h-821D8CA8h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821D8CA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8CA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8CA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8CA8);
		  /* 821D8CA8h */ case    0:  		/* li R11, 0 */
		/* 821D8CA8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D8CA8h case    0:*/		return 0x821D8CAC;
	}
	return 0x821D8CAC;
} // Block from 821D8CA8h-821D8CACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D8CACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8CAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8CAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8CAC);
		  /* 821D8CACh */ case    0:  		/* mr R26, R11 */
		/* 821D8CACh case    0:*/		regs.R26 = regs.R11;
		/* 821D8CACh case    0:*/		return 0x821D8CB0;
	}
	return 0x821D8CB0;
} // Block from 821D8CACh-821D8CB0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D8CB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8CB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8CB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8CB0);
		  /* 821D8CB0h */ case    0:  		/* li R10, 0 */
		/* 821D8CB0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D8CB0h case    0:*/		return 0x821D8CB4;
		  /* 821D8CB4h */ case    1:  		/* mr R9, R16 */
		/* 821D8CB4h case    1:*/		regs.R9 = regs.R16;
		/* 821D8CB4h case    1:*/		return 0x821D8CB8;
		  /* 821D8CB8h */ case    2:  		/* li R8, 0 */
		/* 821D8CB8h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D8CB8h case    2:*/		return 0x821D8CBC;
		  /* 821D8CBCh */ case    3:  		/* addi R7, R1, 276 */
		/* 821D8CBCh case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x114);
		/* 821D8CBCh case    3:*/		return 0x821D8CC0;
		  /* 821D8CC0h */ case    4:  		/* addi R6, R1, 284 */
		/* 821D8CC0h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x11C);
		/* 821D8CC0h case    4:*/		return 0x821D8CC4;
		  /* 821D8CC4h */ case    5:  		/* addi R5, R1, 268 */
		/* 821D8CC4h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x10C);
		/* 821D8CC4h case    5:*/		return 0x821D8CC8;
		  /* 821D8CC8h */ case    6:  		/* li R4, 0 */
		/* 821D8CC8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D8CC8h case    6:*/		return 0x821D8CCC;
		  /* 821D8CCCh */ case    7:  		/* mr R3, R29 */
		/* 821D8CCCh case    7:*/		regs.R3 = regs.R29;
		/* 821D8CCCh case    7:*/		return 0x821D8CD0;
		  /* 821D8CD0h */ case    8:  		/* bl 305152 */
		/* 821D8CD0h case    8:*/		regs.LR = 0x821D8CD4; return 0x822234D0;
		/* 821D8CD0h case    8:*/		return 0x821D8CD4;
		  /* 821D8CD4h */ case    9:  		/* li R10, 0 */
		/* 821D8CD4h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D8CD4h case    9:*/		return 0x821D8CD8;
		  /* 821D8CD8h */ case   10:  		/* mr R9, R16 */
		/* 821D8CD8h case   10:*/		regs.R9 = regs.R16;
		/* 821D8CD8h case   10:*/		return 0x821D8CDC;
		  /* 821D8CDCh */ case   11:  		/* li R8, 0 */
		/* 821D8CDCh case   11:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D8CDCh case   11:*/		return 0x821D8CE0;
		  /* 821D8CE0h */ case   12:  		/* addi R7, R1, 396 */
		/* 821D8CE0h case   12:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x18C);
		/* 821D8CE0h case   12:*/		return 0x821D8CE4;
		  /* 821D8CE4h */ case   13:  		/* addi R6, R1, 404 */
		/* 821D8CE4h case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x194);
		/* 821D8CE4h case   13:*/		return 0x821D8CE8;
		  /* 821D8CE8h */ case   14:  		/* addi R5, R1, 292 */
		/* 821D8CE8h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x124);
		/* 821D8CE8h case   14:*/		return 0x821D8CEC;
		  /* 821D8CECh */ case   15:  		/* li R4, 0 */
		/* 821D8CECh case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D8CECh case   15:*/		return 0x821D8CF0;
		  /* 821D8CF0h */ case   16:  		/* mr R3, R30 */
		/* 821D8CF0h case   16:*/		regs.R3 = regs.R30;
		/* 821D8CF0h case   16:*/		return 0x821D8CF4;
		  /* 821D8CF4h */ case   17:  		/* bl 305116 */
		/* 821D8CF4h case   17:*/		regs.LR = 0x821D8CF8; return 0x822234D0;
		/* 821D8CF4h case   17:*/		return 0x821D8CF8;
		  /* 821D8CF8h */ case   18:  		/* lwz R11, <#[R1 + 292]> */
		/* 821D8CF8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000124) );
		/* 821D8CF8h case   18:*/		return 0x821D8CFC;
		  /* 821D8CFCh */ case   19:  		/* lwz R31, <#[R1 + 268]> */
		/* 821D8CFCh case   19:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x0000010C) );
		/* 821D8CFCh case   19:*/		return 0x821D8D00;
		  /* 821D8D00h */ case   20:  		/* cmplw CR6, R31, R11 */
		/* 821D8D00h case   20:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821D8D00h case   20:*/		return 0x821D8D04;
		  /* 821D8D04h */ case   21:  		/* bc 4, CR6_EQ, 280 */
		/* 821D8D04h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821D8E1C;  }
		/* 821D8D04h case   21:*/		return 0x821D8D08;
		  /* 821D8D08h */ case   22:  		/* lwz R11, <#[R1 + 404]> */
		/* 821D8D08h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000194) );
		/* 821D8D08h case   22:*/		return 0x821D8D0C;
		  /* 821D8D0Ch */ case   23:  		/* lwz R10, <#[R1 + 284]> */
		/* 821D8D0Ch case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000011C) );
		/* 821D8D0Ch case   23:*/		return 0x821D8D10;
		  /* 821D8D10h */ case   24:  		/* cmpw CR6, R10, R11 */
		/* 821D8D10h case   24:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R11);
		/* 821D8D10h case   24:*/		return 0x821D8D14;
		  /* 821D8D14h */ case   25:  		/* bc 4, CR6_EQ, 264 */
		/* 821D8D14h case   25:*/		if ( !regs.CR[6].eq ) { return 0x821D8E1C;  }
		/* 821D8D14h case   25:*/		return 0x821D8D18;
		  /* 821D8D18h */ case   26:  		/* lwz R11, <#[R1 + 396]> */
		/* 821D8D18h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000018C) );
		/* 821D8D18h case   26:*/		return 0x821D8D1C;
		  /* 821D8D1Ch */ case   27:  		/* lwz R27, <#[R1 + 276]> */
		/* 821D8D1Ch case   27:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000114) );
		/* 821D8D1Ch case   27:*/		return 0x821D8D20;
		  /* 821D8D20h */ case   28:  		/* xori R11, R11, 4 */
		/* 821D8D20h case   28:*/		cpu::op::xori<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821D8D20h case   28:*/		return 0x821D8D24;
		  /* 821D8D24h */ case   29:  		/* cmplw CR6, R27, R11 */
		/* 821D8D24h case   29:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 821D8D24h case   29:*/		return 0x821D8D28;
		  /* 821D8D28h */ case   30:  		/* bc 4, CR6_EQ, 244 */
		/* 821D8D28h case   30:*/		if ( !regs.CR[6].eq ) { return 0x821D8E1C;  }
		/* 821D8D28h case   30:*/		return 0x821D8D2C;
		  /* 821D8D2Ch */ case   31:  		/* li R4, 2 */
		/* 821D8D2Ch case   31:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821D8D2Ch case   31:*/		return 0x821D8D30;
		  /* 821D8D30h */ case   32:  		/* mr R3, R27 */
		/* 821D8D30h case   32:*/		regs.R3 = regs.R27;
		/* 821D8D30h case   32:*/		return 0x821D8D34;
		  /* 821D8D34h */ case   33:  		/* bl -273292 */
		/* 821D8D34h case   33:*/		regs.LR = 0x821D8D38; return 0x821961A8;
		/* 821D8D34h case   33:*/		return 0x821D8D38;
		  /* 821D8D38h */ case   34:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D8D38h case   34:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D8D38h case   34:*/		return 0x821D8D3C;
		  /* 821D8D3Ch */ case   35:  		/* bc 12, CR0_EQ, 224 */
		/* 821D8D3Ch case   35:*/		if ( regs.CR[0].eq ) { return 0x821D8E1C;  }
		/* 821D8D3Ch case   35:*/		return 0x821D8D40;
		  /* 821D8D40h */ case   36:  		/* rlwinm. R11, R27, 0, 29, 29 */
		/* 821D8D40h case   36:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R27);
		/* 821D8D40h case   36:*/		return 0x821D8D44;
		  /* 821D8D44h */ case   37:  		/* mr R11, R29 */
		/* 821D8D44h case   37:*/		regs.R11 = regs.R29;
		/* 821D8D44h case   37:*/		return 0x821D8D48;
		  /* 821D8D48h */ case   38:  		/* bc 4, CR0_EQ, 8 */
		/* 821D8D48h case   38:*/		if ( !regs.CR[0].eq ) { return 0x821D8D50;  }
		/* 821D8D48h case   38:*/		return 0x821D8D4C;
		  /* 821D8D4Ch */ case   39:  		/* mr R11, R30 */
		/* 821D8D4Ch case   39:*/		regs.R11 = regs.R30;
		/* 821D8D4Ch case   39:*/		return 0x821D8D50;
	}
	return 0x821D8D50;
} // Block from 821D8CB0h-821D8D50h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821D8D50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8D50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8D50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8D50);
		  /* 821D8D50h */ case    0:  		/* lwz R11, <#[R11 + 12]> */
		/* 821D8D50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D8D50h case    0:*/		return 0x821D8D54;
		  /* 821D8D54h */ case    1:  		/* li R10, 1 */
		/* 821D8D54h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821D8D54h case    1:*/		return 0x821D8D58;
		  /* 821D8D58h */ case    2:  		/* lwz R9, <#[R26 + 48]> */
		/* 821D8D58h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000030) );
		/* 821D8D58h case    2:*/		return 0x821D8D5C;
		  /* 821D8D5Ch */ case    3:  		/* rlwinm R9, R9, 0, 13, 31 */
		/* 821D8D5Ch case    3:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R9);
		/* 821D8D5Ch case    3:*/		return 0x821D8D60;
		  /* 821D8D60h */ case    4:  		/* lwz R8, <#[R11 + 28]> */
		/* 821D8D60h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000001C) );
		/* 821D8D60h case    4:*/		return 0x821D8D64;
		  /* 821D8D64h */ case    5:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 821D8D64h case    5:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 821D8D64h case    5:*/		return 0x821D8D68;
		  /* 821D8D68h */ case    6:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821D8D68h case    6:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821D8D68h case    6:*/		return 0x821D8D6C;
		  /* 821D8D6Ch */ case    7:  		/* addi R11, R11, 1 */
		/* 821D8D6Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821D8D6Ch case    7:*/		return 0x821D8D70;
		  /* 821D8D70h */ case    8:  		/* slw R10, R10, R9 */
		/* 821D8D70h case    8:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821D8D70h case    8:*/		return 0x821D8D74;
		  /* 821D8D74h */ case    9:  		/* lwz R9, <#[R8 + 40]> */
		/* 821D8D74h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000028) );
		/* 821D8D74h case    9:*/		return 0x821D8D78;
		  /* 821D8D78h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821D8D78h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821D8D78h case   10:*/		return 0x821D8D7C;
		  /* 821D8D7Ch */ case   11:  		/* lwzx R11, <#[R11 + R9]> */
		/* 821D8D7Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821D8D7Ch case   11:*/		return 0x821D8D80;
		  /* 821D8D80h */ case   12:  		/* and. R11, R11, R10 */
		/* 821D8D80h case   12:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D8D80h case   12:*/		return 0x821D8D84;
		  /* 821D8D84h */ case   13:  		/* bc 12, CR0_EQ, 152 */
		/* 821D8D84h case   13:*/		if ( regs.CR[0].eq ) { return 0x821D8E1C;  }
		/* 821D8D84h case   13:*/		return 0x821D8D88;
		  /* 821D8D88h */ case   14:  		/* mr R3, R25 */
		/* 821D8D88h case   14:*/		regs.R3 = regs.R25;
		/* 821D8D88h case   14:*/		return 0x821D8D8C;
		  /* 821D8D8Ch */ case   15:  		/* bl -442708 */
		/* 821D8D8Ch case   15:*/		regs.LR = 0x821D8D90; return 0x8216CC38;
		/* 821D8D8Ch case   15:*/		return 0x821D8D90;
		  /* 821D8D90h */ case   16:  		/* lwz R11, <#[R3 + 12]> */
		/* 821D8D90h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821D8D90h case   16:*/		return 0x821D8D94;
		  /* 821D8D94h */ case   17:  		/* lwz R10, <#[R11 + 8]> */
		/* 821D8D94h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D8D94h case   17:*/		return 0x821D8D98;
		  /* 821D8D98h */ case   18:  		/* rlwinm R10, R10, 25, 25, 31 */
		/* 821D8D98h case   18:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R10);
		/* 821D8D98h case   18:*/		return 0x821D8D9C;
		  /* 821D8D9Ch */ case   19:  		/* cmplwi CR6, R10, 61 */
		/* 821D8D9Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000003D);
		/* 821D8D9Ch case   19:*/		return 0x821D8DA0;
		  /* 821D8DA0h */ case   20:  		/* bc 12, CR6_EQ, 12 */
		/* 821D8DA0h case   20:*/		if ( regs.CR[6].eq ) { return 0x821D8DAC;  }
		/* 821D8DA0h case   20:*/		return 0x821D8DA4;
		  /* 821D8DA4h */ case   21:  		/* cmplwi CR6, R10, 62 */
		/* 821D8DA4h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000003E);
		/* 821D8DA4h case   21:*/		return 0x821D8DA8;
		  /* 821D8DA8h */ case   22:  		/* bc 4, CR6_EQ, 112 */
		/* 821D8DA8h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821D8E18;  }
		/* 821D8DA8h case   22:*/		return 0x821D8DAC;
	}
	return 0x821D8DAC;
} // Block from 821D8D50h-821D8DACh (23 instructions)

//////////////////////////////////////////////////////
// Block at 821D8DACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8DAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8DAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8DAC);
		  /* 821D8DACh */ case    0:  		/* li R10, 0 */
		/* 821D8DACh case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D8DACh case    0:*/		return 0x821D8DB0;
		  /* 821D8DB0h */ case    1:  		/* lwz R3, <#[R11 + 44]> */
		/* 821D8DB0h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000002C) );
		/* 821D8DB0h case    1:*/		return 0x821D8DB4;
		  /* 821D8DB4h */ case    2:  		/* mr R9, R16 */
		/* 821D8DB4h case    2:*/		regs.R9 = regs.R16;
		/* 821D8DB4h case    2:*/		return 0x821D8DB8;
		  /* 821D8DB8h */ case    3:  		/* li R8, 0 */
		/* 821D8DB8h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D8DB8h case    3:*/		return 0x821D8DBC;
		  /* 821D8DBCh */ case    4:  		/* addi R7, R1, 504 */
		/* 821D8DBCh case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1F8);
		/* 821D8DBCh case    4:*/		return 0x821D8DC0;
		  /* 821D8DC0h */ case    5:  		/* addi R6, R1, 496 */
		/* 821D8DC0h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1F0);
		/* 821D8DC0h case    5:*/		return 0x821D8DC4;
		  /* 821D8DC4h */ case    6:  		/* addi R5, R1, 488 */
		/* 821D8DC4h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x1E8);
		/* 821D8DC4h case    6:*/		return 0x821D8DC8;
		  /* 821D8DC8h */ case    7:  		/* li R4, 0 */
		/* 821D8DC8h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D8DC8h case    7:*/		return 0x821D8DCC;
		  /* 821D8DCCh */ case    8:  		/* bl 304900 */
		/* 821D8DCCh case    8:*/		regs.LR = 0x821D8DD0; return 0x822234D0;
		/* 821D8DCCh case    8:*/		return 0x821D8DD0;
		  /* 821D8DD0h */ case    9:  		/* lwz R11, <#[R1 + 488]> */
		/* 821D8DD0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001E8) );
		/* 821D8DD0h case    9:*/		return 0x821D8DD4;
		  /* 821D8DD4h */ case   10:  		/* lwz R31, <#[R1 + 268]> */
		/* 821D8DD4h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x0000010C) );
		/* 821D8DD4h case   10:*/		return 0x821D8DD8;
		  /* 821D8DD8h */ case   11:  		/* cmplw CR6, R11, R31 */
		/* 821D8DD8h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821D8DD8h case   11:*/		return 0x821D8DDC;
		  /* 821D8DDCh */ case   12:  		/* bc 4, CR6_EQ, 64 */
		/* 821D8DDCh case   12:*/		if ( !regs.CR[6].eq ) { return 0x821D8E1C;  }
		/* 821D8DDCh case   12:*/		return 0x821D8DE0;
		  /* 821D8DE0h */ case   13:  		/* lwz R11, <#[R1 + 496]> */
		/* 821D8DE0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001F0) );
		/* 821D8DE0h case   13:*/		return 0x821D8DE4;
		  /* 821D8DE4h */ case   14:  		/* lwz R27, <#[R1 + 284]> */
		/* 821D8DE4h case   14:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x0000011C) );
		/* 821D8DE4h case   14:*/		return 0x821D8DE8;
		  /* 821D8DE8h */ case   15:  		/* cmpw CR6, R11, R27 */
		/* 821D8DE8h case   15:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R27);
		/* 821D8DE8h case   15:*/		return 0x821D8DEC;
		  /* 821D8DECh */ case   16:  		/* bc 4, CR6_EQ, 48 */
		/* 821D8DECh case   16:*/		if ( !regs.CR[6].eq ) { return 0x821D8E1C;  }
		/* 821D8DECh case   16:*/		return 0x821D8DF0;
		  /* 821D8DF0h */ case   17:  		/* lwz R3, <#[R1 + 276]> */
		/* 821D8DF0h case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000114) );
		/* 821D8DF0h case   17:*/		return 0x821D8DF4;
		  /* 821D8DF4h */ case   18:  		/* lwz R11, <#[R1 + 504]> */
		/* 821D8DF4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000001F8) );
		/* 821D8DF4h case   18:*/		return 0x821D8DF8;
		  /* 821D8DF8h */ case   19:  		/* ori R10, R3, 4 */
		/* 821D8DF8h case   19:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x4);
		/* 821D8DF8h case   19:*/		return 0x821D8DFC;
		  /* 821D8DFCh */ case   20:  		/* cmplw CR6, R11, R10 */
		/* 821D8DFCh case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821D8DFCh case   20:*/		return 0x821D8E00;
		  /* 821D8E00h */ case   21:  		/* bc 4, CR6_EQ, 28 */
		/* 821D8E00h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821D8E1C;  }
		/* 821D8E00h case   21:*/		return 0x821D8E04;
		  /* 821D8E04h */ case   22:  		/* li R4, 2 */
		/* 821D8E04h case   22:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821D8E04h case   22:*/		return 0x821D8E08;
		  /* 821D8E08h */ case   23:  		/* bl -398224 */
		/* 821D8E08h case   23:*/		regs.LR = 0x821D8E0C; return 0x82177A78;
		/* 821D8E08h case   23:*/		return 0x821D8E0C;
		  /* 821D8E0Ch */ case   24:  		/* mr R7, R3 */
		/* 821D8E0Ch case   24:*/		regs.R7 = regs.R3;
		/* 821D8E0Ch case   24:*/		return 0x821D8E10;
		  /* 821D8E10h */ case   25:  		/* ori R6, R27, 228 */
		/* 821D8E10h case   25:*/		cpu::op::ori<0>(regs,&regs.R6,regs.R27,0xE4);
		/* 821D8E10h case   25:*/		return 0x821D8E14;
		  /* 821D8E14h */ case   26:  		/* b -3204 */
		/* 821D8E14h case   26:*/		return 0x821D8190;
		/* 821D8E14h case   26:*/		return 0x821D8E18;
	}
	return 0x821D8E18;
} // Block from 821D8DACh-821D8E18h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821D8E18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8E18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8E18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8E18);
		  /* 821D8E18h */ case    0:  		/* lwz R31, <#[R1 + 268]> */
		/* 821D8E18h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x0000010C) );
		/* 821D8E18h case    0:*/		return 0x821D8E1C;
	}
	return 0x821D8E1C;
} // Block from 821D8E18h-821D8E1Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D8E1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8E1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8E1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8E1C);
		  /* 821D8E1Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D8E1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D8E1Ch case    0:*/		return 0x821D8E20;
		  /* 821D8E20h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D8E20h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D8E20h case    1:*/		return 0x821D8E24;
		  /* 821D8E24h */ case    2:  		/* cmplwi CR6, R11, 16000 */
		/* 821D8E24h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D8E24h case    2:*/		return 0x821D8E28;
		  /* 821D8E28h */ case    3:  		/* bc 4, CR6_EQ, -8516 */
		/* 821D8E28h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D8E28h case    3:*/		return 0x821D8E2C;
		  /* 821D8E2Ch */ case    4:  		/* lwz R11, <#[R1 + 292]> */
		/* 821D8E2Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000124) );
		/* 821D8E2Ch case    4:*/		return 0x821D8E30;
		  /* 821D8E30h */ case    5:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D8E30h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D8E30h case    5:*/		return 0x821D8E34;
		  /* 821D8E34h */ case    6:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D8E34h case    6:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D8E34h case    6:*/		return 0x821D8E38;
		  /* 821D8E38h */ case    7:  		/* cmplwi CR6, R11, 16000 */
		/* 821D8E38h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821D8E38h case    7:*/		return 0x821D8E3C;
		  /* 821D8E3Ch */ case    8:  		/* bc 4, CR6_EQ, -8536 */
		/* 821D8E3Ch case    8:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D8E3Ch case    8:*/		return 0x821D8E40;
		  /* 821D8E40h */ case    9:  		/* mr R3, R31 */
		/* 821D8E40h case    9:*/		regs.R3 = regs.R31;
		/* 821D8E40h case    9:*/		return 0x821D8E44;
		  /* 821D8E44h */ case   10:  		/* lwz R5, <#[R1 + 276]> */
		/* 821D8E44h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000114) );
		/* 821D8E44h case   10:*/		return 0x821D8E48;
		  /* 821D8E48h */ case   11:  		/* lwz R4, <#[R1 + 284]> */
		/* 821D8E48h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000011C) );
		/* 821D8E48h case   11:*/		return 0x821D8E4C;
		  /* 821D8E4Ch */ case   12:  		/* bl 297044 */
		/* 821D8E4Ch case   12:*/		regs.LR = 0x821D8E50; return 0x822216A0;
		/* 821D8E4Ch case   12:*/		return 0x821D8E50;
		  /* 821D8E50h */ case   13:  		/* lwz R5, <#[R1 + 396]> */
		/* 821D8E50h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000018C) );
		/* 821D8E50h case   13:*/		return 0x821D8E54;
		  /* 821D8E54h */ case   14:  		/* lwz R4, <#[R1 + 404]> */
		/* 821D8E54h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000194) );
		/* 821D8E54h case   14:*/		return 0x821D8E58;
		  /* 821D8E58h */ case   15:  		/* fmr FR31, FR1 */
		/* 821D8E58h case   15:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 821D8E58h case   15:*/		return 0x821D8E5C;
		  /* 821D8E5Ch */ case   16:  		/* lwz R3, <#[R1 + 292]> */
		/* 821D8E5Ch case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000124) );
		/* 821D8E5Ch case   16:*/		return 0x821D8E60;
		  /* 821D8E60h */ case   17:  		/* bl 297024 */
		/* 821D8E60h case   17:*/		regs.LR = 0x821D8E64; return 0x822216A0;
		/* 821D8E60h case   17:*/		return 0x821D8E64;
		  /* 821D8E64h */ case   18:  		/* fcmpu CR6, FR31, FR26 */
		/* 821D8E64h case   18:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR26);
		/* 821D8E64h case   18:*/		return 0x821D8E68;
		  /* 821D8E68h */ case   19:  		/* bc 4, CR6_EQ, 24 */
		/* 821D8E68h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821D8E80;  }
		/* 821D8E68h case   19:*/		return 0x821D8E6C;
		  /* 821D8E6Ch */ case   20:  		/* fcmpu CR6, FR1, FR27 */
		/* 821D8E6Ch case   20:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR27);
		/* 821D8E6Ch case   20:*/		return 0x821D8E70;
		  /* 821D8E70h */ case   21:  		/* bc 4, CR6_EQ, 16 */
		/* 821D8E70h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821D8E80;  }
		/* 821D8E70h case   21:*/		return 0x821D8E74;
		  /* 821D8E74h */ case   22:  		/* mr R28, R29 */
		/* 821D8E74h case   22:*/		regs.R28 = regs.R29;
		/* 821D8E74h case   22:*/		return 0x821D8E78;
		  /* 821D8E78h */ case   23:  		/* mr R24, R30 */
		/* 821D8E78h case   23:*/		regs.R24 = regs.R30;
		/* 821D8E78h case   23:*/		return 0x821D8E7C;
		  /* 821D8E7Ch */ case   24:  		/* b 28 */
		/* 821D8E7Ch case   24:*/		return 0x821D8E98;
		/* 821D8E7Ch case   24:*/		return 0x821D8E80;
	}
	return 0x821D8E80;
} // Block from 821D8E1Ch-821D8E80h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821D8E80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8E80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8E80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8E80);
		  /* 821D8E80h */ case    0:  		/* fcmpu CR6, FR31, FR27 */
		/* 821D8E80h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR27);
		/* 821D8E80h case    0:*/		return 0x821D8E84;
		  /* 821D8E84h */ case    1:  		/* bc 4, CR6_EQ, -8608 */
		/* 821D8E84h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D8E84h case    1:*/		return 0x821D8E88;
		  /* 821D8E88h */ case    2:  		/* fcmpu CR6, FR1, FR26 */
		/* 821D8E88h case    2:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR26);
		/* 821D8E88h case    2:*/		return 0x821D8E8C;
		  /* 821D8E8Ch */ case    3:  		/* bc 4, CR6_EQ, -8616 */
		/* 821D8E8Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D8E8Ch case    3:*/		return 0x821D8E90;
		  /* 821D8E90h */ case    4:  		/* mr R24, R29 */
		/* 821D8E90h case    4:*/		regs.R24 = regs.R29;
		/* 821D8E90h case    4:*/		return 0x821D8E94;
		  /* 821D8E94h */ case    5:  		/* mr R28, R30 */
		/* 821D8E94h case    5:*/		regs.R28 = regs.R30;
		/* 821D8E94h case    5:*/		return 0x821D8E98;
	}
	return 0x821D8E98;
} // Block from 821D8E80h-821D8E98h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D8E98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8E98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8E98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8E98);
		  /* 821D8E98h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 821D8E98h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821D8E98h case    0:*/		return 0x821D8E9C;
		  /* 821D8E9Ch */ case    1:  		/* bc 12, CR6_EQ, -8632 */
		/* 821D8E9Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D8E9Ch case    1:*/		return 0x821D8EA0;
		  /* 821D8EA0h */ case    2:  		/* mr R3, R25 */
		/* 821D8EA0h case    2:*/		regs.R3 = regs.R25;
		/* 821D8EA0h case    2:*/		return 0x821D8EA4;
		  /* 821D8EA4h */ case    3:  		/* bl -442988 */
		/* 821D8EA4h case    3:*/		regs.LR = 0x821D8EA8; return 0x8216CC38;
		/* 821D8EA4h case    3:*/		return 0x821D8EA8;
		  /* 821D8EA8h */ case    4:  		/* lwz R27, <#[R3 + 12]> */
		/* 821D8EA8h case    4:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R3 + 0x0000000C) );
		/* 821D8EA8h case    4:*/		return 0x821D8EAC;
		  /* 821D8EACh */ case    5:  		/* lwz R11, <#[R27 + 8]> */
		/* 821D8EACh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821D8EACh case    5:*/		return 0x821D8EB0;
		  /* 821D8EB0h */ case    6:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D8EB0h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D8EB0h case    6:*/		return 0x821D8EB4;
		  /* 821D8EB4h */ case    7:  		/* cmplwi CR6, R11, 61 */
		/* 821D8EB4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000003D);
		/* 821D8EB4h case    7:*/		return 0x821D8EB8;
		  /* 821D8EB8h */ case    8:  		/* bc 12, CR6_EQ, 20 */
		/* 821D8EB8h case    8:*/		if ( regs.CR[6].eq ) { return 0x821D8ECC;  }
		/* 821D8EB8h case    8:*/		return 0x821D8EBC;
		  /* 821D8EBCh */ case    9:  		/* cmplwi CR6, R11, 60 */
		/* 821D8EBCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000003C);
		/* 821D8EBCh case    9:*/		return 0x821D8EC0;
		  /* 821D8EC0h */ case   10:  		/* bc 12, CR6_EQ, 12 */
		/* 821D8EC0h case   10:*/		if ( regs.CR[6].eq ) { return 0x821D8ECC;  }
		/* 821D8EC0h case   10:*/		return 0x821D8EC4;
		  /* 821D8EC4h */ case   11:  		/* cmplwi CR6, R11, 59 */
		/* 821D8EC4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000003B);
		/* 821D8EC4h case   11:*/		return 0x821D8EC8;
		  /* 821D8EC8h */ case   12:  		/* bc 4, CR6_EQ, -8676 */
		/* 821D8EC8h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D8EC8h case   12:*/		return 0x821D8ECC;
	}
	return 0x821D8ECC;
} // Block from 821D8E98h-821D8ECCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821D8ECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8ECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8ECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8ECC);
		  /* 821D8ECCh */ case    0:  		/* li R10, 0 */
		/* 821D8ECCh case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D8ECCh case    0:*/		return 0x821D8ED0;
		  /* 821D8ED0h */ case    1:  		/* lwz R3, <#[R27 + 44]> */
		/* 821D8ED0h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x0000002C) );
		/* 821D8ED0h case    1:*/		return 0x821D8ED4;
		  /* 821D8ED4h */ case    2:  		/* mr R9, R16 */
		/* 821D8ED4h case    2:*/		regs.R9 = regs.R16;
		/* 821D8ED4h case    2:*/		return 0x821D8ED8;
		  /* 821D8ED8h */ case    3:  		/* li R8, 0 */
		/* 821D8ED8h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D8ED8h case    3:*/		return 0x821D8EDC;
		  /* 821D8EDCh */ case    4:  		/* addi R7, R1, 512 */
		/* 821D8EDCh case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x200);
		/* 821D8EDCh case    4:*/		return 0x821D8EE0;
		  /* 821D8EE0h */ case    5:  		/* addi R6, R1, 520 */
		/* 821D8EE0h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x208);
		/* 821D8EE0h case    5:*/		return 0x821D8EE4;
		  /* 821D8EE4h */ case    6:  		/* addi R5, R1, 236 */
		/* 821D8EE4h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xEC);
		/* 821D8EE4h case    6:*/		return 0x821D8EE8;
		  /* 821D8EE8h */ case    7:  		/* li R4, 0 */
		/* 821D8EE8h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D8EE8h case    7:*/		return 0x821D8EEC;
		  /* 821D8EECh */ case    8:  		/* bl 304612 */
		/* 821D8EECh case    8:*/		regs.LR = 0x821D8EF0; return 0x822234D0;
		/* 821D8EECh case    8:*/		return 0x821D8EF0;
		  /* 821D8EF0h */ case    9:  		/* lwz R11, <#[R1 + 512]> */
		/* 821D8EF0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000200) );
		/* 821D8EF0h case    9:*/		return 0x821D8EF4;
		  /* 821D8EF4h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821D8EF4h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D8EF4h case   10:*/		return 0x821D8EF8;
		  /* 821D8EF8h */ case   11:  		/* bc 4, CR6_EQ, -8724 */
		/* 821D8EF8h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D8EF8h case   11:*/		return 0x821D8EFC;
		  /* 821D8EFCh */ case   12:  		/* lwz R31, <#[R1 + 236]> */
		/* 821D8EFCh case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000EC) );
		/* 821D8EFCh case   12:*/		return 0x821D8F00;
		  /* 821D8F00h */ case   13:  		/* lwz R3, <#[R1 + 1908]> */
		/* 821D8F00h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000774) );
		/* 821D8F00h case   13:*/		return 0x821D8F04;
		  /* 821D8F04h */ case   14:  		/* mr R4, R31 */
		/* 821D8F04h case   14:*/		regs.R4 = regs.R31;
		/* 821D8F04h case   14:*/		return 0x821D8F08;
		  /* 821D8F08h */ case   15:  		/* bl -110568 */
		/* 821D8F08h case   15:*/		regs.LR = 0x821D8F0C; return 0x821BDF20;
		/* 821D8F08h case   15:*/		return 0x821D8F0C;
		  /* 821D8F0Ch */ case   16:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D8F0Ch case   16:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D8F0Ch case   16:*/		return 0x821D8F10;
		  /* 821D8F10h */ case   17:  		/* bc 12, CR0_EQ, -8748 */
		/* 821D8F10h case   17:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D8F10h case   17:*/		return 0x821D8F14;
		  /* 821D8F14h */ case   18:  		/* mr R3, R25 */
		/* 821D8F14h case   18:*/		regs.R3 = regs.R25;
		/* 821D8F14h case   18:*/		return 0x821D8F18;
		  /* 821D8F18h */ case   19:  		/* lwz R4, <#[R1 + 1908]> */
		/* 821D8F18h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000774) );
		/* 821D8F18h case   19:*/		return 0x821D8F1C;
		  /* 821D8F1Ch */ case   20:  		/* bl -477148 */
		/* 821D8F1Ch case   20:*/		regs.LR = 0x821D8F20; return 0x82164740;
		/* 821D8F1Ch case   20:*/		return 0x821D8F20;
		  /* 821D8F20h */ case   21:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D8F20h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D8F20h case   21:*/		return 0x821D8F24;
		  /* 821D8F24h */ case   22:  		/* rlwinm. R10, R11, 0, 30, 31 */
		/* 821D8F24h case   22:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R10,regs.R11);
		/* 821D8F24h case   22:*/		return 0x821D8F28;
		  /* 821D8F28h */ case   23:  		/* bc 4, CR0_EQ, 24 */
		/* 821D8F28h case   23:*/		if ( !regs.CR[0].eq ) { return 0x821D8F40;  }
		/* 821D8F28h case   23:*/		return 0x821D8F2C;
		  /* 821D8F2Ch */ case   24:  		/* rlwinm R11, R11, 30, 28, 31 */
		/* 821D8F2Ch case   24:*/		cpu::op::rlwinm<0,30,28,31>(regs,&regs.R11,regs.R11);
		/* 821D8F2Ch case   24:*/		return 0x821D8F30;
		  /* 821D8F30h */ case   25:  		/* cmpwi CR6, R11, 8 */
		/* 821D8F30h case   25:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 821D8F30h case   25:*/		return 0x821D8F34;
		  /* 821D8F34h */ case   26:  		/* bc 12, CR6_EQ, -8784 */
		/* 821D8F34h case   26:*/		if ( regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D8F34h case   26:*/		return 0x821D8F38;
		  /* 821D8F38h */ case   27:  		/* cmpwi CR6, R11, 9 */
		/* 821D8F38h case   27:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 821D8F38h case   27:*/		return 0x821D8F3C;
		  /* 821D8F3Ch */ case   28:  		/* bc 12, CR6_EQ, -8792 */
		/* 821D8F3Ch case   28:*/		if ( regs.CR[6].eq ) { return 0x821D6CE4;  }
		/* 821D8F3Ch case   28:*/		return 0x821D8F40;
	}
	return 0x821D8F40;
} // Block from 821D8ECCh-821D8F40h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821D8F40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8F40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8F40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8F40);
		  /* 821D8F40h */ case    0:  		/* lwz R10, <#[R31 + 28]> */
		/* 821D8F40h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 821D8F40h case    0:*/		return 0x821D8F44;
		  /* 821D8F44h */ case    1:  		/* li R9, 1 */
		/* 821D8F44h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821D8F44h case    1:*/		return 0x821D8F48;
		  /* 821D8F48h */ case    2:  		/* lwz R11, <#[R16 + 28]> */
		/* 821D8F48h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x0000001C) );
		/* 821D8F48h case    2:*/		return 0x821D8F4C;
		  /* 821D8F4Ch */ case    3:  		/* lwz R8, <#[R10 + 48]> */
		/* 821D8F4Ch case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000030) );
		/* 821D8F4Ch case    3:*/		return 0x821D8F50;
		  /* 821D8F50h */ case    4:  		/* lwz R7, <#[R11 + 40]> */
		/* 821D8F50h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000028) );
		/* 821D8F50h case    4:*/		return 0x821D8F54;
		  /* 821D8F54h */ case    5:  		/* rlwinm R8, R8, 0, 13, 31 */
		/* 821D8F54h case    5:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R8);
		/* 821D8F54h case    5:*/		return 0x821D8F58;
		  /* 821D8F58h */ case    6:  		/* rlwinm R11, R8, 27, 5, 31 */
		/* 821D8F58h case    6:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R8);
		/* 821D8F58h case    6:*/		return 0x821D8F5C;
		  /* 821D8F5Ch */ case    7:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 821D8F5Ch case    7:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 821D8F5Ch case    7:*/		return 0x821D8F60;
		  /* 821D8F60h */ case    8:  		/* addi R11, R11, 1 */
		/* 821D8F60h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821D8F60h case    8:*/		return 0x821D8F64;
		  /* 821D8F64h */ case    9:  		/* slw R9, R9, R8 */
		/* 821D8F64h case    9:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 821D8F64h case    9:*/		return 0x821D8F68;
		  /* 821D8F68h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821D8F68h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821D8F68h case   10:*/		return 0x821D8F6C;
		  /* 821D8F6Ch */ case   11:  		/* lwzx R11, <#[R11 + R7]> */
		/* 821D8F6Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 821D8F6Ch case   11:*/		return 0x821D8F70;
		  /* 821D8F70h */ case   12:  		/* and. R11, R11, R9 */
		/* 821D8F70h case   12:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D8F70h case   12:*/		return 0x821D8F74;
		  /* 821D8F74h */ case   13:  		/* bc 12, CR0_EQ, -8848 */
		/* 821D8F74h case   13:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D8F74h case   13:*/		return 0x821D8F78;
		  /* 821D8F78h */ case   14:  		/* lwz R11, <#[R26 + 48]> */
		/* 821D8F78h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000030) );
		/* 821D8F78h case   14:*/		return 0x821D8F7C;
		  /* 821D8F7Ch */ case   15:  		/* li R21, 1 */
		/* 821D8F7Ch case   15:*/		cpu::op::li<0>(regs,&regs.R21,0x1);
		/* 821D8F7Ch case   15:*/		return 0x821D8F80;
		  /* 821D8F80h */ case   16:  		/* lwz R9, <#[R28 + 12]> */
		/* 821D8F80h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x0000000C) );
		/* 821D8F80h case   16:*/		return 0x821D8F84;
		  /* 821D8F84h */ case   17:  		/* rlwinm R8, R11, 0, 13, 31 */
		/* 821D8F84h case   17:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R11);
		/* 821D8F84h case   17:*/		return 0x821D8F88;
		  /* 821D8F88h */ case   18:  		/* rlwinm R11, R8, 27, 5, 31 */
		/* 821D8F88h case   18:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R8);
		/* 821D8F88h case   18:*/		return 0x821D8F8C;
		  /* 821D8F8Ch */ case   19:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 821D8F8Ch case   19:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 821D8F8Ch case   19:*/		return 0x821D8F90;
		  /* 821D8F90h */ case   20:  		/* lwz R9, <#[R9 + 28]> */
		/* 821D8F90h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000001C) );
		/* 821D8F90h case   20:*/		return 0x821D8F94;
		  /* 821D8F94h */ case   21:  		/* addi R11, R11, 1 */
		/* 821D8F94h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821D8F94h case   21:*/		return 0x821D8F98;
		  /* 821D8F98h */ case   22:  		/* slw R8, R21, R8 */
		/* 821D8F98h case   22:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R21,regs.R8);
		/* 821D8F98h case   22:*/		return 0x821D8F9C;
		  /* 821D8F9Ch */ case   23:  		/* lwz R9, <#[R9 + 40]> */
		/* 821D8F9Ch case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000028) );
		/* 821D8F9Ch case   23:*/		return 0x821D8FA0;
		  /* 821D8FA0h */ case   24:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821D8FA0h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821D8FA0h case   24:*/		return 0x821D8FA4;
		  /* 821D8FA4h */ case   25:  		/* lwzx R11, <#[R11 + R9]> */
		/* 821D8FA4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821D8FA4h case   25:*/		return 0x821D8FA8;
		  /* 821D8FA8h */ case   26:  		/* and. R11, R11, R8 */
		/* 821D8FA8h case   26:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821D8FA8h case   26:*/		return 0x821D8FAC;
		  /* 821D8FACh */ case   27:  		/* bc 4, CR0_EQ, 776 */
		/* 821D8FACh case   27:*/		if ( !regs.CR[0].eq ) { return 0x821D92B4;  }
		/* 821D8FACh case   27:*/		return 0x821D8FB0;
		  /* 821D8FB0h */ case   28:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D8FB0h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D8FB0h case   28:*/		return 0x821D8FB4;
		  /* 821D8FB4h */ case   29:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D8FB4h case   29:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D8FB4h case   29:*/		return 0x821D8FB8;
		  /* 821D8FB8h */ case   30:  		/* cmplwi CR6, R11, 5 */
		/* 821D8FB8h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 821D8FB8h case   30:*/		return 0x821D8FBC;
		  /* 821D8FBCh */ case   31:  		/* bc 12, CR6_EQ, 28 */
		/* 821D8FBCh case   31:*/		if ( regs.CR[6].eq ) { return 0x821D8FD8;  }
		/* 821D8FBCh case   31:*/		return 0x821D8FC0;
		  /* 821D8FC0h */ case   32:  		/* cmplwi CR6, R11, 8 */
		/* 821D8FC0h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000008);
		/* 821D8FC0h case   32:*/		return 0x821D8FC4;
		  /* 821D8FC4h */ case   33:  		/* bc 12, CR6_EQ, 20 */
		/* 821D8FC4h case   33:*/		if ( regs.CR[6].eq ) { return 0x821D8FD8;  }
		/* 821D8FC4h case   33:*/		return 0x821D8FC8;
		  /* 821D8FC8h */ case   34:  		/* cmplwi CR6, R11, 6 */
		/* 821D8FC8h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000006);
		/* 821D8FC8h case   34:*/		return 0x821D8FCC;
		  /* 821D8FCCh */ case   35:  		/* bc 12, CR6_EQ, 12 */
		/* 821D8FCCh case   35:*/		if ( regs.CR[6].eq ) { return 0x821D8FD8;  }
		/* 821D8FCCh case   35:*/		return 0x821D8FD0;
		  /* 821D8FD0h */ case   36:  		/* cmplwi CR6, R11, 7 */
		/* 821D8FD0h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000007);
		/* 821D8FD0h case   36:*/		return 0x821D8FD4;
		  /* 821D8FD4h */ case   37:  		/* bc 4, CR6_EQ, 736 */
		/* 821D8FD4h case   37:*/		if ( !regs.CR[6].eq ) { return 0x821D92B4;  }
		/* 821D8FD4h case   37:*/		return 0x821D8FD8;
	}
	return 0x821D8FD8;
} // Block from 821D8F40h-821D8FD8h (38 instructions)

//////////////////////////////////////////////////////
// Block at 821D8FD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D8FD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D8FD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D8FD8);
		  /* 821D8FD8h */ case    0:  		/* lwz R11, <#[R10 + 28]> */
		/* 821D8FD8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000001C) );
		/* 821D8FD8h case    0:*/		return 0x821D8FDC;
		  /* 821D8FDCh */ case    1:  		/* li R29, 0 */
		/* 821D8FDCh case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821D8FDCh case    1:*/		return 0x821D8FE0;
		  /* 821D8FE0h */ case    2:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D8FE0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D8FE0h case    2:*/		return 0x821D8FE4;
		  /* 821D8FE4h */ case    3:  		/* bc 4, CR0_EQ, 236 */
		/* 821D8FE4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D90D0;  }
		/* 821D8FE4h case    3:*/		return 0x821D8FE8;
		  /* 821D8FE8h */ case    4:  		/* lwz R11, <#[R10 + 24]> */
		/* 821D8FE8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000018) );
		/* 821D8FE8h case    4:*/		return 0x821D8FEC;
		  /* 821D8FECh */ case    5:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D8FECh case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D8FECh case    5:*/		return 0x821D8FF0;
		  /* 821D8FF0h */ case    6:  		/* addic. R30, R11, -40 */
		/* 821D8FF0h case    6:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R11,0xFFFFFFD8);
		/* 821D8FF0h case    6:*/		return 0x821D8FF4;
		  /* 821D8FF4h */ case    7:  		/* bc 12, CR0_EQ, 220 */
		/* 821D8FF4h case    7:*/		if ( regs.CR[0].eq ) { return 0x821D90D0;  }
		/* 821D8FF4h case    7:*/		return 0x821D8FF8;
		  /* 821D8FF8h */ case    8:  		/* lwz R22, <#[R1 + 112]> */
		/* 821D8FF8h case    8:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x00000070) );
		/* 821D8FF8h case    8:*/		return 0x821D8FFC;
		  /* 821D8FFCh */ case    9:  		/* lwz R23, <#[R1 + 1908]> */
		/* 821D8FFCh case    9:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000774) );
		/* 821D8FFCh case    9:*/		return 0x821D9000;
		  /* 821D9000h */ case   10:  		/* mr R3, R30 */
		/* 821D9000h case   10:*/		regs.R3 = regs.R30;
		/* 821D9000h case   10:*/		return 0x821D9004;
		  /* 821D9004h */ case   11:  		/* bl -476804 */
		/* 821D9004h case   11:*/		regs.LR = 0x821D9008; return 0x82164980;
		/* 821D9004h case   11:*/		return 0x821D9008;
		  /* 821D9008h */ case   12:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D9008h case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D9008h case   12:*/		return 0x821D900C;
		  /* 821D900Ch */ case   13:  		/* bc 12, CR0_EQ, 28 */
		/* 821D900Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x821D9028;  }
		/* 821D900Ch case   13:*/		return 0x821D9010;
		  /* 821D9010h */ case   14:  		/* li R6, 1 */
		/* 821D9010h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821D9010h case   14:*/		return 0x821D9014;
		  /* 821D9014h */ case   15:  		/* mr R5, R22 */
		/* 821D9014h case   15:*/		regs.R5 = regs.R22;
		/* 821D9014h case   15:*/		return 0x821D9018;
		  /* 821D9018h */ case   16:  		/* mr R4, R30 */
		/* 821D9018h case   16:*/		regs.R4 = regs.R30;
		/* 821D9018h case   16:*/		return 0x821D901C;
		  /* 821D901Ch */ case   17:  		/* mr R3, R23 */
		/* 821D901Ch case   17:*/		regs.R3 = regs.R23;
		/* 821D901Ch case   17:*/		return 0x821D9020;
		  /* 821D9020h */ case   18:  		/* bl 336808 */
		/* 821D9020h case   18:*/		regs.LR = 0x821D9024; return 0x8222B3C8;
		/* 821D9020h case   18:*/		return 0x821D9024;
		  /* 821D9024h */ case   19:  		/* lwz R31, <#[R1 + 236]> */
		/* 821D9024h case   19:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000000EC) );
		/* 821D9024h case   19:*/		return 0x821D9028;
	}
	return 0x821D9028;
} // Block from 821D8FD8h-821D9028h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821D9028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9028);
		  /* 821D9028h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821D9028h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821D9028h case    0:*/		return 0x821D902C;
		  /* 821D902Ch */ case    1:  		/* bc 12, CR6_EQ, 84 */
		/* 821D902Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821D9080;  }
		/* 821D902Ch case    1:*/		return 0x821D9030;
		  /* 821D9030h */ case    2:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821D9030h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821D9030h case    2:*/		return 0x821D9034;
		  /* 821D9034h */ case    3:  		/* lwz R10, <#[R11 + 36]> */
		/* 821D9034h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 821D9034h case    3:*/		return 0x821D9038;
		  /* 821D9038h */ case    4:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821D9038h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821D9038h case    4:*/		return 0x821D903C;
		  /* 821D903Ch */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 821D903Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x821D9048;  }
		/* 821D903Ch case    5:*/		return 0x821D9040;
		  /* 821D9040h */ case    6:  		/* li R11, 0 */
		/* 821D9040h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D9040h case    6:*/		return 0x821D9044;
		  /* 821D9044h */ case    7:  		/* b 12 */
		/* 821D9044h case    7:*/		return 0x821D9050;
		/* 821D9044h case    7:*/		return 0x821D9048;
	}
	return 0x821D9048;
} // Block from 821D9028h-821D9048h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821D9048h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9048( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9048) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9048);
		  /* 821D9048h */ case    0:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 821D9048h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 821D9048h case    0:*/		return 0x821D904C;
		  /* 821D904Ch */ case    1:  		/* addi R11, R11, -40 */
		/* 821D904Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 821D904Ch case    1:*/		return 0x821D9050;
	}
	return 0x821D9050;
} // Block from 821D9048h-821D9050h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D9050h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9050);
		  /* 821D9050h */ case    0:  		/* cmplw CR6, R30, R11 */
		/* 821D9050h case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821D9050h case    0:*/		return 0x821D9054;
		  /* 821D9054h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 821D9054h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D9070;  }
		/* 821D9054h case    1:*/		return 0x821D9058;
		  /* 821D9058h */ case    2:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821D9058h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821D9058h case    2:*/		return 0x821D905C;
		  /* 821D905Ch */ case    3:  		/* mr R29, R30 */
		/* 821D905Ch case    3:*/		regs.R29 = regs.R30;
		/* 821D905Ch case    3:*/		return 0x821D9060;
		  /* 821D9060h */ case    4:  		/* lwz R11, <#[R11 + 36]> */
		/* 821D9060h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821D9060h case    4:*/		return 0x821D9064;
		  /* 821D9064h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D9064h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D9064h case    5:*/		return 0x821D9068;
		  /* 821D9068h */ case    6:  		/* bc 4, CR0_EQ, 112 */
		/* 821D9068h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821D90D8;  }
		/* 821D9068h case    6:*/		return 0x821D906C;
		  /* 821D906Ch */ case    7:  		/* b 80 */
		/* 821D906Ch case    7:*/		return 0x821D90BC;
		/* 821D906Ch case    7:*/		return 0x821D9070;
	}
	return 0x821D9070;
} // Block from 821D9050h-821D9070h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821D9070h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9070( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9070) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9070);
		  /* 821D9070h */ case    0:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821D9070h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821D9070h case    0:*/		return 0x821D9074;
		  /* 821D9074h */ case    1:  		/* bc 4, CR0_EQ, 100 */
		/* 821D9074h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821D90D8;  }
		/* 821D9074h case    1:*/		return 0x821D9078;
		  /* 821D9078h */ case    2:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 821D9078h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 821D9078h case    2:*/		return 0x821D907C;
		  /* 821D907Ch */ case    3:  		/* b 68 */
		/* 821D907Ch case    3:*/		return 0x821D90C0;
		/* 821D907Ch case    3:*/		return 0x821D9080;
	}
	return 0x821D9080;
} // Block from 821D9070h-821D9080h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D9080h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9080);
		  /* 821D9080h */ case    0:  		/* lwz R10, <#[R31 + 28]> */
		/* 821D9080h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 821D9080h case    0:*/		return 0x821D9084;
		  /* 821D9084h */ case    1:  		/* lwz R11, <#[R10 + 28]> */
		/* 821D9084h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000001C) );
		/* 821D9084h case    1:*/		return 0x821D9088;
		  /* 821D9088h */ case    2:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D9088h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D9088h case    2:*/		return 0x821D908C;
		  /* 821D908Ch */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 821D908Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x821D9098;  }
		/* 821D908Ch case    3:*/		return 0x821D9090;
		  /* 821D9090h */ case    4:  		/* li R11, 0 */
		/* 821D9090h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D9090h case    4:*/		return 0x821D9094;
		  /* 821D9094h */ case    5:  		/* b 16 */
		/* 821D9094h case    5:*/		return 0x821D90A4;
		/* 821D9094h case    5:*/		return 0x821D9098;
	}
	return 0x821D9098;
} // Block from 821D9080h-821D9098h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D9098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9098);
		  /* 821D9098h */ case    0:  		/* lwz R11, <#[R10 + 24]> */
		/* 821D9098h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000018) );
		/* 821D9098h case    0:*/		return 0x821D909C;
		  /* 821D909Ch */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D909Ch case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D909Ch case    1:*/		return 0x821D90A0;
		  /* 821D90A0h */ case    2:  		/* addi R11, R11, -40 */
		/* 821D90A0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 821D90A0h case    2:*/		return 0x821D90A4;
	}
	return 0x821D90A4;
} // Block from 821D9098h-821D90A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D90A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D90A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D90A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D90A4);
		  /* 821D90A4h */ case    0:  		/* cmplw CR6, R30, R11 */
		/* 821D90A4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821D90A4h case    0:*/		return 0x821D90A8;
		  /* 821D90A8h */ case    1:  		/* bc 12, CR6_EQ, -80 */
		/* 821D90A8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D9058;  }
		/* 821D90A8h case    1:*/		return 0x821D90AC;
		  /* 821D90ACh */ case    2:  		/* lwz R11, <#[R10 + 28]> */
		/* 821D90ACh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000001C) );
		/* 821D90ACh case    2:*/		return 0x821D90B0;
		  /* 821D90B0h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D90B0h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D90B0h case    3:*/		return 0x821D90B4;
		  /* 821D90B4h */ case    4:  		/* bc 4, CR0_EQ, 36 */
		/* 821D90B4h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821D90D8;  }
		/* 821D90B4h case    4:*/		return 0x821D90B8;
		  /* 821D90B8h */ case    5:  		/* lwz R11, <#[R10 + 24]> */
		/* 821D90B8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000018) );
		/* 821D90B8h case    5:*/		return 0x821D90BC;
	}
	return 0x821D90BC;
} // Block from 821D90A4h-821D90BCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D90BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D90BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D90BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D90BC);
		  /* 821D90BCh */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D90BCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D90BCh case    0:*/		return 0x821D90C0;
	}
	return 0x821D90C0;
} // Block from 821D90BCh-821D90C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D90C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D90C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D90C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D90C0);
		  /* 821D90C0h */ case    0:  		/* addi R30, R11, -40 */
		/* 821D90C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFD8);
		/* 821D90C0h case    0:*/		return 0x821D90C4;
		  /* 821D90C4h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 821D90C4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D90C4h case    1:*/		return 0x821D90C8;
		  /* 821D90C8h */ case    2:  		/* bc 4, CR6_EQ, -200 */
		/* 821D90C8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D9000;  }
		/* 821D90C8h case    2:*/		return 0x821D90CC;
		  /* 821D90CCh */ case    3:  		/* b 12 */
		/* 821D90CCh case    3:*/		return 0x821D90D8;
		/* 821D90CCh case    3:*/		return 0x821D90D0;
	}
	return 0x821D90D0;
} // Block from 821D90C0h-821D90D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D90D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D90D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D90D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D90D0);
		  /* 821D90D0h */ case    0:  		/* lwz R22, <#[R1 + 112]> */
		/* 821D90D0h case    0:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x00000070) );
		/* 821D90D0h case    0:*/		return 0x821D90D4;
		  /* 821D90D4h */ case    1:  		/* lwz R23, <#[R1 + 1908]> */
		/* 821D90D4h case    1:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000774) );
		/* 821D90D4h case    1:*/		return 0x821D90D8;
	}
	return 0x821D90D8;
} // Block from 821D90D0h-821D90D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D90D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D90D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D90D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D90D8);
		  /* 821D90D8h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 821D90D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821D90D8h case    0:*/		return 0x821D90DC;
		  /* 821D90DCh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821D90DCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D90DCh case    1:*/		return 0x821D90E0;
		  /* 821D90E0h */ case    2:  		/* bc 12, CR6_EQ, 44 */
		/* 821D90E0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821D910C;  }
		/* 821D90E0h case    2:*/		return 0x821D90E4;
		  /* 821D90E4h */ case    3:  		/* lwz R10, <#[R11 + 16]> */
		/* 821D90E4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821D90E4h case    3:*/		return 0x821D90E8;
		  /* 821D90E8h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821D90E8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821D90E8h case    4:*/		return 0x821D90EC;
		  /* 821D90ECh */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821D90ECh case    5:*/		if ( regs.CR[6].eq ) { return 0x821D90FC;  }
		/* 821D90ECh case    5:*/		return 0x821D90F0;
		  /* 821D90F0h */ case    6:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 821D90F0h case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 821D90F0h case    6:*/		return 0x821D90F4;
		  /* 821D90F4h */ case    7:  		/* cmplw CR6, R10, R27 */
		/* 821D90F4h case    7:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R27);
		/* 821D90F4h case    7:*/		return 0x821D90F8;
		  /* 821D90F8h */ case    8:  		/* bc 4, CR6_EQ, 12 */
		/* 821D90F8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821D9104;  }
		/* 821D90F8h case    8:*/		return 0x821D90FC;
	}
	return 0x821D90FC;
} // Block from 821D90D8h-821D90FCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D90FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D90FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D90FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D90FC);
		  /* 821D90FCh */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D90FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D90FCh case    0:*/		return 0x821D9100;
		  /* 821D9100h */ case    1:  		/* b -36 */
		/* 821D9100h case    1:*/		return 0x821D90DC;
		/* 821D9100h case    1:*/		return 0x821D9104;
	}
	return 0x821D9104;
} // Block from 821D90FCh-821D9104h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D9104h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9104( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9104) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9104);
		  /* 821D9104h */ case    0:  		/* mr R11, R21 */
		/* 821D9104h case    0:*/		regs.R11 = regs.R21;
		/* 821D9104h case    0:*/		return 0x821D9108;
		  /* 821D9108h */ case    1:  		/* b 8 */
		/* 821D9108h case    1:*/		return 0x821D9110;
		/* 821D9108h case    1:*/		return 0x821D910C;
	}
	return 0x821D910C;
} // Block from 821D9104h-821D910Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D910Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D910C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D910C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D910C);
		  /* 821D910Ch */ case    0:  		/* li R11, 0 */
		/* 821D910Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D910Ch case    0:*/		return 0x821D9110;
	}
	return 0x821D9110;
} // Block from 821D910Ch-821D9110h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D9110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9110);
		  /* 821D9110h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D9110h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D9110h case    0:*/		return 0x821D9114;
		  /* 821D9114h */ case    1:  		/* bc 4, CR0_EQ, 416 */
		/* 821D9114h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821D92B4;  }
		/* 821D9114h case    1:*/		return 0x821D9118;
		  /* 821D9118h */ case    2:  		/* lwz R11, <#[R27 + 4]> */
		/* 821D9118h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821D9118h case    2:*/		return 0x821D911C;
		  /* 821D911Ch */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821D911Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D911Ch case    3:*/		return 0x821D9120;
		  /* 821D9120h */ case    4:  		/* bc 12, CR6_EQ, 44 */
		/* 821D9120h case    4:*/		if ( regs.CR[6].eq ) { return 0x821D914C;  }
		/* 821D9120h case    4:*/		return 0x821D9124;
		  /* 821D9124h */ case    5:  		/* lwz R10, <#[R11 + 16]> */
		/* 821D9124h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821D9124h case    5:*/		return 0x821D9128;
		  /* 821D9128h */ case    6:  		/* cmplwi CR6, R10, 0 */
		/* 821D9128h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821D9128h case    6:*/		return 0x821D912C;
		  /* 821D912Ch */ case    7:  		/* bc 12, CR6_EQ, 16 */
		/* 821D912Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x821D913C;  }
		/* 821D912Ch case    7:*/		return 0x821D9130;
		  /* 821D9130h */ case    8:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 821D9130h case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 821D9130h case    8:*/		return 0x821D9134;
		  /* 821D9134h */ case    9:  		/* cmplw CR6, R10, R25 */
		/* 821D9134h case    9:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R25);
		/* 821D9134h case    9:*/		return 0x821D9138;
		  /* 821D9138h */ case   10:  		/* bc 4, CR6_EQ, 12 */
		/* 821D9138h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821D9144;  }
		/* 821D9138h case   10:*/		return 0x821D913C;
	}
	return 0x821D913C;
} // Block from 821D9110h-821D913Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821D913Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D913C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D913C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D913C);
		  /* 821D913Ch */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D913Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D913Ch case    0:*/		return 0x821D9140;
		  /* 821D9140h */ case    1:  		/* b -36 */
		/* 821D9140h case    1:*/		return 0x821D911C;
		/* 821D9140h case    1:*/		return 0x821D9144;
	}
	return 0x821D9144;
} // Block from 821D913Ch-821D9144h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D9144h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9144( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9144) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9144);
		  /* 821D9144h */ case    0:  		/* mr R11, R21 */
		/* 821D9144h case    0:*/		regs.R11 = regs.R21;
		/* 821D9144h case    0:*/		return 0x821D9148;
		  /* 821D9148h */ case    1:  		/* b 8 */
		/* 821D9148h case    1:*/		return 0x821D9150;
		/* 821D9148h case    1:*/		return 0x821D914C;
	}
	return 0x821D914C;
} // Block from 821D9144h-821D914Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D914Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D914C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D914C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D914C);
		  /* 821D914Ch */ case    0:  		/* li R11, 0 */
		/* 821D914Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D914Ch case    0:*/		return 0x821D9150;
	}
	return 0x821D9150;
} // Block from 821D914Ch-821D9150h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D9150h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9150);
		  /* 821D9150h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D9150h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D9150h case    0:*/		return 0x821D9154;
		  /* 821D9154h */ case    1:  		/* bc 4, CR0_EQ, 352 */
		/* 821D9154h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821D92B4;  }
		/* 821D9154h case    1:*/		return 0x821D9158;
		  /* 821D9158h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D9158h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D9158h case    2:*/		return 0x821D915C;
		  /* 821D915Ch */ case    3:  		/* mr R3, R23 */
		/* 821D915Ch case    3:*/		regs.R3 = regs.R23;
		/* 821D915Ch case    3:*/		return 0x821D9160;
		  /* 821D9160h */ case    4:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D9160h case    4:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D9160h case    4:*/		return 0x821D9164;
		  /* 821D9164h */ case    5:  		/* cmpwi CR6, R11, 5 */
		/* 821D9164h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000005);
		/* 821D9164h case    5:*/		return 0x821D9168;
		  /* 821D9168h */ case    6:  		/* bc 12, CR6_EQ, 108 */
		/* 821D9168h case    6:*/		if ( regs.CR[6].eq ) { return 0x821D91D4;  }
		/* 821D9168h case    6:*/		return 0x821D916C;
		  /* 821D916Ch */ case    7:  		/* cmpwi CR6, R11, 6 */
		/* 821D916Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 821D916Ch case    7:*/		return 0x821D9170;
		  /* 821D9170h */ case    8:  		/* bc 12, CR6_EQ, 76 */
		/* 821D9170h case    8:*/		if ( regs.CR[6].eq ) { return 0x821D91BC;  }
		/* 821D9170h case    8:*/		return 0x821D9174;
		  /* 821D9174h */ case    9:  		/* cmpwi CR6, R11, 7 */
		/* 821D9174h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000007);
		/* 821D9174h case    9:*/		return 0x821D9178;
		  /* 821D9178h */ case   10:  		/* bc 12, CR6_EQ, 44 */
		/* 821D9178h case   10:*/		if ( regs.CR[6].eq ) { return 0x821D91A4;  }
		/* 821D9178h case   10:*/		return 0x821D917C;
		  /* 821D917Ch */ case   11:  		/* cmpwi CR6, R11, 8 */
		/* 821D917Ch case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 821D917Ch case   11:*/		return 0x821D9180;
		  /* 821D9180h */ case   12:  		/* bc 12, CR6_EQ, 12 */
		/* 821D9180h case   12:*/		if ( regs.CR[6].eq ) { return 0x821D918C;  }
		/* 821D9180h case   12:*/		return 0x821D9184;
		  /* 821D9184h */ case   13:  		/* li R4, 4800 */
		/* 821D9184h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821D9184h case   13:*/		return 0x821D9188;
		  /* 821D9188h */ case   14:  		/* bl -553760 */
		/* 821D9188h case   14:*/		regs.LR = 0x821D918C; return 0x82151E68;
		/* 821D9188h case   14:*/		return 0x821D918C;
	}
	return 0x821D918C;
} // Block from 821D9150h-821D918Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821D918Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D918C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D918C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D918C);
		  /* 821D918Ch */ case    0:  		/* mr R5, R31 */
		/* 821D918Ch case    0:*/		regs.R5 = regs.R31;
		/* 821D918Ch case    0:*/		return 0x821D9190;
		  /* 821D9190h */ case    1:  		/* lwz R7, <#[R31 + 48]> */
		/* 821D9190h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000030) );
		/* 821D9190h case    1:*/		return 0x821D9194;
		  /* 821D9194h */ case    2:  		/* li R4, 0 */
		/* 821D9194h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D9194h case    2:*/		return 0x821D9198;
		  /* 821D9198h */ case    3:  		/* lwz R6, <#[R31 + 44]> */
		/* 821D9198h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000002C) );
		/* 821D9198h case    3:*/		return 0x821D919C;
		  /* 821D919Ch */ case    4:  		/* bl -241988 */
		/* 821D919Ch case    4:*/		regs.LR = 0x821D91A0; return 0x8219E058;
		/* 821D919Ch case    4:*/		return 0x821D91A0;
		  /* 821D91A0h */ case    5:  		/* b 72 */
		/* 821D91A0h case    5:*/		return 0x821D91E8;
		/* 821D91A0h case    5:*/		return 0x821D91A4;
	}
	return 0x821D91A4;
} // Block from 821D918Ch-821D91A4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D91A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D91A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D91A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D91A4);
		  /* 821D91A4h */ case    0:  		/* mr R5, R31 */
		/* 821D91A4h case    0:*/		regs.R5 = regs.R31;
		/* 821D91A4h case    0:*/		return 0x821D91A8;
		  /* 821D91A8h */ case    1:  		/* lwz R7, <#[R31 + 44]> */
		/* 821D91A8h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000002C) );
		/* 821D91A8h case    1:*/		return 0x821D91AC;
		  /* 821D91ACh */ case    2:  		/* li R4, 0 */
		/* 821D91ACh case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D91ACh case    2:*/		return 0x821D91B0;
		  /* 821D91B0h */ case    3:  		/* lwz R6, <#[R31 + 48]> */
		/* 821D91B0h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000030) );
		/* 821D91B0h case    3:*/		return 0x821D91B4;
		  /* 821D91B4h */ case    4:  		/* bl -271764 */
		/* 821D91B4h case    4:*/		regs.LR = 0x821D91B8; return 0x82196C20;
		/* 821D91B4h case    4:*/		return 0x821D91B8;
		  /* 821D91B8h */ case    5:  		/* b 48 */
		/* 821D91B8h case    5:*/		return 0x821D91E8;
		/* 821D91B8h case    5:*/		return 0x821D91BC;
	}
	return 0x821D91BC;
} // Block from 821D91A4h-821D91BCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D91BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D91BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D91BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D91BC);
		  /* 821D91BCh */ case    0:  		/* mr R5, R31 */
		/* 821D91BCh case    0:*/		regs.R5 = regs.R31;
		/* 821D91BCh case    0:*/		return 0x821D91C0;
		  /* 821D91C0h */ case    1:  		/* lwz R7, <#[R31 + 44]> */
		/* 821D91C0h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x0000002C) );
		/* 821D91C0h case    1:*/		return 0x821D91C4;
		  /* 821D91C4h */ case    2:  		/* li R4, 0 */
		/* 821D91C4h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D91C4h case    2:*/		return 0x821D91C8;
		  /* 821D91C8h */ case    3:  		/* lwz R6, <#[R31 + 48]> */
		/* 821D91C8h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000030) );
		/* 821D91C8h case    3:*/		return 0x821D91CC;
		  /* 821D91CCh */ case    4:  		/* bl -271580 */
		/* 821D91CCh case    4:*/		regs.LR = 0x821D91D0; return 0x82196CF0;
		/* 821D91CCh case    4:*/		return 0x821D91D0;
		  /* 821D91D0h */ case    5:  		/* b 24 */
		/* 821D91D0h case    5:*/		return 0x821D91E8;
		/* 821D91D0h case    5:*/		return 0x821D91D4;
	}
	return 0x821D91D4;
} // Block from 821D91BCh-821D91D4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D91D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D91D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D91D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D91D4);
		  /* 821D91D4h */ case    0:  		/* mr R5, R31 */
		/* 821D91D4h case    0:*/		regs.R5 = regs.R31;
		/* 821D91D4h case    0:*/		return 0x821D91D8;
		  /* 821D91D8h */ case    1:  		/* lwz R7, <#[R31 + 48]> */
		/* 821D91D8h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000030) );
		/* 821D91D8h case    1:*/		return 0x821D91DC;
		  /* 821D91DCh */ case    2:  		/* li R4, 0 */
		/* 821D91DCh case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D91DCh case    2:*/		return 0x821D91E0;
		  /* 821D91E0h */ case    3:  		/* lwz R6, <#[R31 + 44]> */
		/* 821D91E0h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x0000002C) );
		/* 821D91E0h case    3:*/		return 0x821D91E4;
		  /* 821D91E4h */ case    4:  		/* bl -241852 */
		/* 821D91E4h case    4:*/		regs.LR = 0x821D91E8; return 0x8219E128;
		/* 821D91E4h case    4:*/		return 0x821D91E8;
	}
	return 0x821D91E8;
} // Block from 821D91D4h-821D91E8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D91E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D91E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D91E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D91E8);
		  /* 821D91E8h */ case    0:  		/* lwz R11, <#[R27 + 44]> */
		/* 821D91E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000002C) );
		/* 821D91E8h case    0:*/		return 0x821D91EC;
		  /* 821D91ECh */ case    1:  		/* mr R31, R3 */
		/* 821D91ECh case    1:*/		regs.R31 = regs.R3;
		/* 821D91ECh case    1:*/		return 0x821D91F0;
		  /* 821D91F0h */ case    2:  		/* lwz R10, <#[R11 + 12]> */
		/* 821D91F0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D91F0h case    2:*/		return 0x821D91F4;
		  /* 821D91F4h */ case    3:  		/* addi R10, R10, 4 */
		/* 821D91F4h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821D91F4h case    3:*/		return 0x821D91F8;
		  /* 821D91F8h */ case    4:  		/* lwz R9, <#[R10]> */
		/* 821D91F8h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D91F8h case    4:*/		return 0x821D91FC;
		  /* 821D91FCh */ case    5:  		/* b 12 */
		/* 821D91FCh case    5:*/		return 0x821D9208;
		/* 821D91FCh case    5:*/		return 0x821D9200;
		  /* 821D9200h */ case    6:  		/* addi R10, R9, 8 */
		/* 821D9200h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821D9200h case    6:*/		return 0x821D9204;
		  /* 821D9204h */ case    7:  		/* lwz R9, <#[R9 + 8]> */
		/* 821D9204h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821D9204h case    7:*/		return 0x821D9208;
	}
	return 0x821D9208;
} // Block from 821D91E8h-821D9208h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821D9208h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9208);
		  /* 821D9208h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821D9208h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821D9208h case    0:*/		return 0x821D920C;
		  /* 821D920Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821D920Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D9200;  }
		/* 821D920Ch case    1:*/		return 0x821D9210;
		  /* 821D9210h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821D9210h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821D9210h case    2:*/		return 0x821D9214;
		  /* 821D9214h */ case    3:  		/* mr R4, R23 */
		/* 821D9214h case    3:*/		regs.R4 = regs.R23;
		/* 821D9214h case    3:*/		return 0x821D9218;
		  /* 821D9218h */ case    4:  		/* mr R3, R25 */
		/* 821D9218h case    4:*/		regs.R3 = regs.R25;
		/* 821D9218h case    4:*/		return 0x821D921C;
		  /* 821D921Ch */ case    5:  		/* stw R9, <#[R10]> */
		/* 821D921Ch case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D921Ch case    5:*/		return 0x821D9220;
		  /* 821D9220h */ case    6:  		/* lwz R10, <#[R31 + 4]> */
		/* 821D9220h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821D9220h case    6:*/		return 0x821D9224;
		  /* 821D9224h */ case    7:  		/* stw R10, <#[R11 + 8]> */
		/* 821D9224h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821D9224h case    7:*/		return 0x821D9228;
		  /* 821D9228h */ case    8:  		/* stw R11, <#[R31 + 4]> */
		/* 821D9228h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821D9228h case    8:*/		return 0x821D922C;
		  /* 821D922Ch */ case    9:  		/* stw R31, <#[R11 + 12]> */
		/* 821D922Ch case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D922Ch case    9:*/		return 0x821D9230;
		  /* 821D9230h */ case   10:  		/* lwz R11, <#[R25 + 8]> */
		/* 821D9230h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821D9230h case   10:*/		return 0x821D9234;
		  /* 821D9234h */ case   11:  		/* nor R10, R11, R11 */
		/* 821D9234h case   11:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R11,regs.R11);
		/* 821D9234h case   11:*/		return 0x821D9238;
		  /* 821D9238h */ case   12:  		/* rlwimi R10, R11, 0, 14, 12 */
		/* 821D9238h case   12:*/		cpu::op::rlwimi<0,0,14,12>(regs,&regs.R10,regs.R11);
		/* 821D9238h case   12:*/		return 0x821D923C;
		  /* 821D923Ch */ case   13:  		/* stw R10, <#[R25 + 8]> */
		/* 821D923Ch case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R25 + 0x00000008) );
		/* 821D923Ch case   13:*/		return 0x821D9240;
		  /* 821D9240h */ case   14:  		/* mr R30, R10 */
		/* 821D9240h case   14:*/		regs.R30 = regs.R10;
		/* 821D9240h case   14:*/		return 0x821D9244;
		  /* 821D9244h */ case   15:  		/* bl -477956 */
		/* 821D9244h case   15:*/		regs.LR = 0x821D9248; return 0x82164740;
		/* 821D9244h case   15:*/		return 0x821D9248;
		  /* 821D9248h */ case   16:  		/* lwz R26, <#[R3]> */
		/* 821D9248h case   16:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R3 + 0x00000000) );
		/* 821D9248h case   16:*/		return 0x821D924C;
		  /* 821D924Ch */ case   17:  		/* rlwinm. R11, R30, 14, 31, 31 */
		/* 821D924Ch case   17:*/		cpu::op::rlwinm<1,14,31,31>(regs,&regs.R11,regs.R30);
		/* 821D924Ch case   17:*/		return 0x821D9250;
		  /* 821D9250h */ case   18:  		/* bc 4, CR0_EQ, 48 */
		/* 821D9250h case   18:*/		if ( !regs.CR[0].eq ) { return 0x821D9280;  }
		/* 821D9250h case   18:*/		return 0x821D9254;
		  /* 821D9254h */ case   19:  		/* lwz R11, <#[R25 + 28]> */
		/* 821D9254h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000001C) );
		/* 821D9254h case   19:*/		return 0x821D9258;
		  /* 821D9258h */ case   20:  		/* lwz R10, <#[R11 + 12]> */
		/* 821D9258h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D9258h case   20:*/		return 0x821D925C;
		  /* 821D925Ch */ case   21:  		/* cmplwi CR6, R10, 0 */
		/* 821D925Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821D925Ch case   21:*/		return 0x821D9260;
		  /* 821D9260h */ case   22:  		/* bc 12, CR6_EQ, 24 */
		/* 821D9260h case   22:*/		if ( regs.CR[6].eq ) { return 0x821D9278;  }
		/* 821D9260h case   22:*/		return 0x821D9264;
		  /* 821D9264h */ case   23:  		/* lwz R11, <#[R10]> */
		/* 821D9264h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821D9264h case   23:*/		return 0x821D9268;
		  /* 821D9268h */ case   24:  		/* cmplw CR6, R11, R26 */
		/* 821D9268h case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 821D9268h case   24:*/		return 0x821D926C;
		  /* 821D926Ch */ case   25:  		/* bc 4, CR6_EQ, 16 */
		/* 821D926Ch case   25:*/		if ( !regs.CR[6].eq ) { return 0x821D927C;  }
		/* 821D926Ch case   25:*/		return 0x821D9270;
		  /* 821D9270h */ case   26:  		/* lwz R10, <#[R10 + 8]> */
		/* 821D9270h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821D9270h case   26:*/		return 0x821D9274;
		  /* 821D9274h */ case   27:  		/* b -24 */
		/* 821D9274h case   27:*/		return 0x821D925C;
		/* 821D9274h case   27:*/		return 0x821D9278;
	}
	return 0x821D9278;
} // Block from 821D9208h-821D9278h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821D9278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9278);
		  /* 821D9278h */ case    0:  		/* li R11, 0 */
		/* 821D9278h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D9278h case    0:*/		return 0x821D927C;
	}
	return 0x821D927C;
} // Block from 821D9278h-821D927Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D927Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D927C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D927C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D927C);
		  /* 821D927Ch */ case    0:  		/* mr R26, R11 */
		/* 821D927Ch case    0:*/		regs.R26 = regs.R11;
		/* 821D927Ch case    0:*/		return 0x821D9280;
	}
	return 0x821D9280;
} // Block from 821D927Ch-821D9280h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D9280h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9280);
		  /* 821D9280h */ case    0:  		/* mr R5, R22 */
		/* 821D9280h case    0:*/		regs.R5 = regs.R22;
		/* 821D9280h case    0:*/		return 0x821D9284;
		  /* 821D9284h */ case    1:  		/* mr R4, R27 */
		/* 821D9284h case    1:*/		regs.R4 = regs.R27;
		/* 821D9284h case    1:*/		return 0x821D9288;
		  /* 821D9288h */ case    2:  		/* mr R3, R23 */
		/* 821D9288h case    2:*/		regs.R3 = regs.R23;
		/* 821D9288h case    2:*/		return 0x821D928C;
		  /* 821D928Ch */ case    3:  		/* bl -55492 */
		/* 821D928Ch case    3:*/		regs.LR = 0x821D9290; return 0x821CB9C8;
		/* 821D928Ch case    3:*/		return 0x821D9290;
		  /* 821D9290h */ case    4:  		/* mr R5, R22 */
		/* 821D9290h case    4:*/		regs.R5 = regs.R22;
		/* 821D9290h case    4:*/		return 0x821D9294;
		  /* 821D9294h */ case    5:  		/* mr R3, R23 */
		/* 821D9294h case    5:*/		regs.R3 = regs.R23;
		/* 821D9294h case    5:*/		return 0x821D9298;
		  /* 821D9298h */ case    6:  		/* lwz R4, <#[R1 + 236]> */
		/* 821D9298h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000EC) );
		/* 821D9298h case    6:*/		return 0x821D929C;
		  /* 821D929Ch */ case    7:  		/* bl -55508 */
		/* 821D929Ch case    7:*/		regs.LR = 0x821D92A0; return 0x821CB9C8;
		/* 821D929Ch case    7:*/		return 0x821D92A0;
		  /* 821D92A0h */ case    8:  		/* mr R5, R22 */
		/* 821D92A0h case    8:*/		regs.R5 = regs.R22;
		/* 821D92A0h case    8:*/		return 0x821D92A4;
		  /* 821D92A4h */ case    9:  		/* mr R4, R31 */
		/* 821D92A4h case    9:*/		regs.R4 = regs.R31;
		/* 821D92A4h case    9:*/		return 0x821D92A8;
		  /* 821D92A8h */ case   10:  		/* mr R3, R23 */
		/* 821D92A8h case   10:*/		regs.R3 = regs.R23;
		/* 821D92A8h case   10:*/		return 0x821D92AC;
		  /* 821D92ACh */ case   11:  		/* bl -55524 */
		/* 821D92ACh case   11:*/		regs.LR = 0x821D92B0; return 0x821CB9C8;
		/* 821D92ACh case   11:*/		return 0x821D92B0;
		  /* 821D92B0h */ case   12:  		/* stw R31, <#[R1 + 236]> */
		/* 821D92B0h case   12:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x000000EC) );
		/* 821D92B0h case   12:*/		return 0x821D92B4;
	}
	return 0x821D92B4;
} // Block from 821D9280h-821D92B4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821D92B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D92B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D92B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D92B4);
		  /* 821D92B4h */ case    0:  		/* lwz R10, <#[R26 + 48]> */
		/* 821D92B4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000030) );
		/* 821D92B4h case    0:*/		return 0x821D92B8;
		  /* 821D92B8h */ case    1:  		/* lwz R11, <#[R28 + 12]> */
		/* 821D92B8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821D92B8h case    1:*/		return 0x821D92BC;
		  /* 821D92BCh */ case    2:  		/* rlwinm R9, R10, 0, 13, 31 */
		/* 821D92BCh case    2:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R10);
		/* 821D92BCh case    2:*/		return 0x821D92C0;
		  /* 821D92C0h */ case    3:  		/* rlwinm R10, R9, 27, 5, 31 */
		/* 821D92C0h case    3:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R9);
		/* 821D92C0h case    3:*/		return 0x821D92C4;
		  /* 821D92C4h */ case    4:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821D92C4h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821D92C4h case    4:*/		return 0x821D92C8;
		  /* 821D92C8h */ case    5:  		/* lwz R8, <#[R11 + 28]> */
		/* 821D92C8h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000001C) );
		/* 821D92C8h case    5:*/		return 0x821D92CC;
		  /* 821D92CCh */ case    6:  		/* addi R10, R10, 1 */
		/* 821D92CCh case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821D92CCh case    6:*/		return 0x821D92D0;
		  /* 821D92D0h */ case    7:  		/* slw R9, R21, R9 */
		/* 821D92D0h case    7:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R21,regs.R9);
		/* 821D92D0h case    7:*/		return 0x821D92D4;
		  /* 821D92D4h */ case    8:  		/* lwz R8, <#[R8 + 40]> */
		/* 821D92D4h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000028) );
		/* 821D92D4h case    8:*/		return 0x821D92D8;
		  /* 821D92D8h */ case    9:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821D92D8h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821D92D8h case    9:*/		return 0x821D92DC;
		  /* 821D92DCh */ case   10:  		/* lwzx R10, <#[R10 + R8]> */
		/* 821D92DCh case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 821D92DCh case   10:*/		return 0x821D92E0;
		  /* 821D92E0h */ case   11:  		/* and. R10, R10, R9 */
		/* 821D92E0h case   11:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821D92E0h case   11:*/		return 0x821D92E4;
		  /* 821D92E4h */ case   12:  		/* bc 12, CR0_EQ, -9728 */
		/* 821D92E4h case   12:*/		if ( regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D92E4h case   12:*/		return 0x821D92E8;
		  /* 821D92E8h */ case   13:  		/* addi R10, R11, 4 */
		/* 821D92E8h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821D92E8h case   13:*/		return 0x821D92EC;
		  /* 821D92ECh */ case   14:  		/* mr R11, R31 */
		/* 821D92ECh case   14:*/		regs.R11 = regs.R31;
		/* 821D92ECh case   14:*/		return 0x821D92F0;
		  /* 821D92F0h */ case   15:  		/* lwz R9, <#[R10]> */
		/* 821D92F0h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D92F0h case   15:*/		return 0x821D92F4;
		  /* 821D92F4h */ case   16:  		/* b 12 */
		/* 821D92F4h case   16:*/		return 0x821D9300;
		/* 821D92F4h case   16:*/		return 0x821D92F8;
		  /* 821D92F8h */ case   17:  		/* addi R10, R9, 8 */
		/* 821D92F8h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821D92F8h case   17:*/		return 0x821D92FC;
		  /* 821D92FCh */ case   18:  		/* lwz R9, <#[R9 + 8]> */
		/* 821D92FCh case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821D92FCh case   18:*/		return 0x821D9300;
	}
	return 0x821D9300;
} // Block from 821D92B4h-821D9300h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821D9300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9300);
		  /* 821D9300h */ case    0:  		/* cmplw CR6, R9, R28 */
		/* 821D9300h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R28);
		/* 821D9300h case    0:*/		return 0x821D9304;
		  /* 821D9304h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821D9304h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D92F8;  }
		/* 821D9304h case    1:*/		return 0x821D9308;
		  /* 821D9308h */ case    2:  		/* lwz R9, <#[R28 + 8]> */
		/* 821D9308h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000008) );
		/* 821D9308h case    2:*/		return 0x821D930C;
		  /* 821D930Ch */ case    3:  		/* mr R4, R24 */
		/* 821D930Ch case    3:*/		regs.R4 = regs.R24;
		/* 821D930Ch case    3:*/		return 0x821D9310;
		  /* 821D9310h */ case    4:  		/* mr R3, R16 */
		/* 821D9310h case    4:*/		regs.R3 = regs.R16;
		/* 821D9310h case    4:*/		return 0x821D9314;
		  /* 821D9314h */ case    5:  		/* lwz R5, <#[R1 + 1908]> */
		/* 821D9314h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000774) );
		/* 821D9314h case    5:*/		return 0x821D9318;
		  /* 821D9318h */ case    6:  		/* stw R9, <#[R10]> */
		/* 821D9318h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D9318h case    6:*/		return 0x821D931C;
		  /* 821D931Ch */ case    7:  		/* lwz R10, <#[R11 + 4]> */
		/* 821D931Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821D931Ch case    7:*/		return 0x821D9320;
		  /* 821D9320h */ case    8:  		/* stw R10, <#[R28 + 8]> */
		/* 821D9320h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 821D9320h case    8:*/		return 0x821D9324;
		  /* 821D9324h */ case    9:  		/* stw R28, <#[R11 + 4]> */
		/* 821D9324h case    9:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000004) );
		/* 821D9324h case    9:*/		return 0x821D9328;
		  /* 821D9328h */ case   10:  		/* stw R11, <#[R28 + 12]> */
		/* 821D9328h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821D9328h case   10:*/		return 0x821D932C;
		  /* 821D932Ch */ case   11:  		/* lwz R11, <#[R1 + 520]> */
		/* 821D932Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000208) );
		/* 821D932Ch case   11:*/		return 0x821D9330;
		  /* 821D9330h */ case   12:  		/* lwz R10, <#[R28]> */
		/* 821D9330h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821D9330h case   12:*/		return 0x821D9334;
		  /* 821D9334h */ case   13:  		/* rlwinm R10, R10, 0, 0, 24 */
		/* 821D9334h case   13:*/		cpu::op::rlwinm<0,0,0,24>(regs,&regs.R10,regs.R10);
		/* 821D9334h case   13:*/		return 0x821D9338;
		  /* 821D9338h */ case   14:  		/* rlwinm R11, R11, 5, 22, 26 */
		/* 821D9338h case   14:*/		cpu::op::rlwinm<0,5,22,26>(regs,&regs.R11,regs.R11);
		/* 821D9338h case   14:*/		return 0x821D933C;
		  /* 821D933Ch */ case   15:  		/* rlwinm R10, R10, 0, 24, 21 */
		/* 821D933Ch case   15:*/		cpu::op::rlwinm<0,0,24,21>(regs,&regs.R10,regs.R10);
		/* 821D933Ch case   15:*/		return 0x821D9340;
		  /* 821D9340h */ case   16:  		/* rlwinm R11, R11, 0, 25, 23 */
		/* 821D9340h case   16:*/		cpu::op::rlwinm<0,0,25,23>(regs,&regs.R11,regs.R11);
		/* 821D9340h case   16:*/		return 0x821D9344;
		  /* 821D9344h */ case   17:  		/* ori R11, R11, 7296 */
		/* 821D9344h case   17:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1C80);
		/* 821D9344h case   17:*/		return 0x821D9348;
		  /* 821D9348h */ case   18:  		/* or R11, R11, R10 */
		/* 821D9348h case   18:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D9348h case   18:*/		return 0x821D934C;
		  /* 821D934Ch */ case   19:  		/* stw R11, <#[R28]> */
		/* 821D934Ch case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821D934Ch case   19:*/		return 0x821D9350;
		  /* 821D9350h */ case   20:  		/* bl -395840 */
		/* 821D9350h case   20:*/		regs.LR = 0x821D9354; return 0x82178910;
		/* 821D9350h case   20:*/		return 0x821D9354;
		  /* 821D9354h */ case   21:  		/* b -9840 */
		/* 821D9354h case   21:*/		return 0x821D6CE4;
		/* 821D9354h case   21:*/		return 0x821D9358;
	}
	return 0x821D9358;
} // Block from 821D9300h-821D9358h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821D9358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9358);
		  /* 821D9358h */ case    0:  		/* rlwinm R11, R10, 0, 10, 12 */
		/* 821D9358h case    0:*/		cpu::op::rlwinm<0,0,10,12>(regs,&regs.R11,regs.R10);
		/* 821D9358h case    0:*/		return 0x821D935C;
		  /* 821D935Ch */ case    1:  		/* lis R10, 8 */
		/* 821D935Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x8);
		/* 821D935Ch case    1:*/		return 0x821D9360;
		  /* 821D9360h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 821D9360h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821D9360h case    2:*/		return 0x821D9364;
		  /* 821D9364h */ case    3:  		/* bc 4, CR6_EQ, 48 */
		/* 821D9364h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D9394;  }
		/* 821D9364h case    3:*/		return 0x821D9368;
		  /* 821D9368h */ case    4:  		/* lwz R11, <#[R16 + 44]> */
		/* 821D9368h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x0000002C) );
		/* 821D9368h case    4:*/		return 0x821D936C;
		  /* 821D936Ch */ case    5:  		/* lwz R10, <#[R11]> */
		/* 821D936Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D936Ch case    5:*/		return 0x821D9370;
		  /* 821D9370h */ case    6:  		/* lwz R5, <#[R11 + 12]> */
		/* 821D9370h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D9370h case    6:*/		return 0x821D9374;
		  /* 821D9374h */ case    7:  		/* rlwinm R7, R10, 0, 27, 31 */
		/* 821D9374h case    7:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R10);
		/* 821D9374h case    7:*/		return 0x821D9378;
		  /* 821D9378h */ case    8:  		/* rlwinm R6, R10, 27, 24, 31 */
		/* 821D9378h case    8:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R6,regs.R10);
		/* 821D9378h case    8:*/		return 0x821D937C;
	}
	return 0x821D937C;
} // Block from 821D9358h-821D937Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D937Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D937C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D937C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D937C);
		  /* 821D937Ch */ case    0:  		/* lwz R3, <#[R1 + 1908]> */
		/* 821D937Ch case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000774) );
		/* 821D937Ch case    0:*/		return 0x821D9380;
	}
	return 0x821D9380;
} // Block from 821D937Ch-821D9380h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D9380h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9380( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9380) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9380);
		  /* 821D9380h */ case    0:  		/* lwz R8, <#[R1 + 112]> */
		/* 821D9380h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000070) );
		/* 821D9380h case    0:*/		return 0x821D9384;
		  /* 821D9384h */ case    1:  		/* lwz R9, <#[R1 + 1924]> */
		/* 821D9384h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000784) );
		/* 821D9384h case    1:*/		return 0x821D9388;
	}
	return 0x821D9388;
} // Block from 821D9380h-821D9388h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D9388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9388);
		  /* 821D9388h */ case    0:  		/* mr R4, R16 */
		/* 821D9388h case    0:*/		regs.R4 = regs.R16;
		/* 821D9388h case    0:*/		return 0x821D938C;
		  /* 821D938Ch */ case    1:  		/* bl 343940 */
		/* 821D938Ch case    1:*/		regs.LR = 0x821D9390; return 0x8222D310;
		/* 821D938Ch case    1:*/		return 0x821D9390;
		  /* 821D9390h */ case    2:  		/* b -9900 */
		/* 821D9390h case    2:*/		return 0x821D6CE4;
		/* 821D9390h case    2:*/		return 0x821D9394;
	}
	return 0x821D9394;
} // Block from 821D9388h-821D9394h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D9394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9394);
		  /* 821D9394h */ case    0:  		/* lwz R25, <#[R1 + 112]> */
		/* 821D9394h case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000070) );
		/* 821D9394h case    0:*/		return 0x821D9398;
		  /* 821D9398h */ case    1:  		/* mr R4, R16 */
		/* 821D9398h case    1:*/		regs.R4 = regs.R16;
		/* 821D9398h case    1:*/		return 0x821D939C;
		  /* 821D939Ch */ case    2:  		/* lwz R26, <#[R1 + 1908]> */
		/* 821D939Ch case    2:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000774) );
		/* 821D939Ch case    2:*/		return 0x821D93A0;
		  /* 821D93A0h */ case    3:  		/* mr R5, R25 */
		/* 821D93A0h case    3:*/		regs.R5 = regs.R25;
		/* 821D93A0h case    3:*/		return 0x821D93A4;
		  /* 821D93A4h */ case    4:  		/* mr R3, R26 */
		/* 821D93A4h case    4:*/		regs.R3 = regs.R26;
		/* 821D93A4h case    4:*/		return 0x821D93A8;
		  /* 821D93A8h */ case    5:  		/* bl -54904 */
		/* 821D93A8h case    5:*/		regs.LR = 0x821D93AC; return 0x821CBD30;
		/* 821D93A8h case    5:*/		return 0x821D93AC;
		  /* 821D93ACh */ case    6:  		/* cmplwi CR0, R3, 0 */
		/* 821D93ACh case    6:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821D93ACh case    6:*/		return 0x821D93B0;
		  /* 821D93B0h */ case    7:  		/* bc 4, CR0_EQ, -9932 */
		/* 821D93B0h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821D6CE4;  }
		/* 821D93B0h case    7:*/		return 0x821D93B4;
		  /* 821D93B4h */ case    8:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D93B4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D93B4h case    8:*/		return 0x821D93B8;
		  /* 821D93B8h */ case    9:  		/* addi R20, R16, 44 */
		/* 821D93B8h case    9:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R16,0x2C);
		/* 821D93B8h case    9:*/		return 0x821D93BC;
		  /* 821D93BCh */ case   10:  		/* li R28, 0 */
		/* 821D93BCh case   10:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821D93BCh case   10:*/		return 0x821D93C0;
		  /* 821D93C0h */ case   11:  		/* li R29, 0 */
		/* 821D93C0h case   11:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821D93C0h case   11:*/		return 0x821D93C4;
		  /* 821D93C4h */ case   12:  		/* rlwinm R27, R11, 13, 29, 31 */
		/* 821D93C4h case   12:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R27,regs.R11);
		/* 821D93C4h case   12:*/		return 0x821D93C8;
		  /* 821D93C8h */ case   13:  		/* mr R30, R20 */
		/* 821D93C8h case   13:*/		regs.R30 = regs.R20;
		/* 821D93C8h case   13:*/		return 0x821D93CC;
		  /* 821D93CCh */ case   14:  		/* cmplw CR6, R29, R27 */
		/* 821D93CCh case   14:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R27);
		/* 821D93CCh case   14:*/		return 0x821D93D0;
		  /* 821D93D0h */ case   15:  		/* bc 4, CR6_LT, 368 */
		/* 821D93D0h case   15:*/		if ( !regs.CR[6].lt ) { return 0x821D9540;  }
		/* 821D93D0h case   15:*/		return 0x821D93D4;
		  /* 821D93D4h */ case   16:  		/* lwz R5, <#[R30]> */
		/* 821D93D4h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000000) );
		/* 821D93D4h case   16:*/		return 0x821D93D8;
		  /* 821D93D8h */ case   17:  		/* li R31, 0 */
		/* 821D93D8h case   17:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821D93D8h case   17:*/		return 0x821D93DC;
		  /* 821D93DCh */ case   18:  		/* mr R3, R20 */
		/* 821D93DCh case   18:*/		regs.R3 = regs.R20;
		/* 821D93DCh case   18:*/		return 0x821D93E0;
		  /* 821D93E0h */ case   19:  		/* lwz R6, <#[R5 + 12]> */
		/* 821D93E0h case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R5 + 0x0000000C) );
		/* 821D93E0h case   19:*/		return 0x821D93E4;
		  /* 821D93E4h */ case   20:  		/* cmplw CR6, R31, R27 */
		/* 821D93E4h case   20:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R27);
		/* 821D93E4h case   20:*/		return 0x821D93E8;
		  /* 821D93E8h */ case   21:  		/* bc 4, CR6_LT, 272 */
		/* 821D93E8h case   21:*/		if ( !regs.CR[6].lt ) { return 0x821D94F8;  }
		/* 821D93E8h case   21:*/		return 0x821D93EC;
		  /* 821D93ECh */ case   22:  		/* lwz R11, <#[R3]> */
		/* 821D93ECh case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821D93ECh case   22:*/		return 0x821D93F0;
		  /* 821D93F0h */ case   23:  		/* cmplw CR6, R11, R5 */
		/* 821D93F0h case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R5);
		/* 821D93F0h case   23:*/		return 0x821D93F4;
		  /* 821D93F4h */ case   24:  		/* bc 12, CR6_EQ, 260 */
		/* 821D93F4h case   24:*/		if ( regs.CR[6].eq ) { return 0x821D94F8;  }
		/* 821D93F4h case   24:*/		return 0x821D93F8;
		  /* 821D93F8h */ case   25:  		/* lwz R9, <#[R11]> */
		/* 821D93F8h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821D93F8h case   25:*/		return 0x821D93FC;
		  /* 821D93FCh */ case   26:  		/* lwz R8, <#[R5]> */
		/* 821D93FCh case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R5 + 0x00000000) );
		/* 821D93FCh case   26:*/		return 0x821D9400;
		  /* 821D9400h */ case   27:  		/* xor R10, R8, R9 */
		/* 821D9400h case   27:*/		cpu::op::xor<0>(regs,&regs.R10,regs.R8,regs.R9);
		/* 821D9400h case   27:*/		return 0x821D9404;
		  /* 821D9404h */ case   28:  		/* rlwinm. R10, R10, 0, 27, 31 */
		/* 821D9404h case   28:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821D9404h case   28:*/		return 0x821D9408;
		  /* 821D9408h */ case   29:  		/* bc 12, CR0_EQ, 12 */
		/* 821D9408h case   29:*/		if ( regs.CR[0].eq ) { return 0x821D9414;  }
		/* 821D9408h case   29:*/		return 0x821D940C;
		  /* 821D940Ch */ case   30:  		/* li R28, 1 */
		/* 821D940Ch case   30:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 821D940Ch case   30:*/		return 0x821D9410;
		  /* 821D9410h */ case   31:  		/* b 220 */
		/* 821D9410h case   31:*/		return 0x821D94EC;
		/* 821D9410h case   31:*/		return 0x821D9414;
	}
	return 0x821D9414;
} // Block from 821D9394h-821D9414h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821D9414h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9414( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9414) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9414);
		  /* 821D9414h */ case    0:  		/* lwz R4, <#[R11 + 12]> */
		/* 821D9414h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D9414h case    0:*/		return 0x821D9418;
		  /* 821D9418h */ case    1:  		/* cmplw CR6, R6, R4 */
		/* 821D9418h case    1:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R4);
		/* 821D9418h case    1:*/		return 0x821D941C;
		  /* 821D941Ch */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 821D941Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D942C;  }
		/* 821D941Ch case    2:*/		return 0x821D9420;
		  /* 821D9420h */ case    3:  		/* xor R11, R8, R9 */
		/* 821D9420h case    3:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R8,regs.R9);
		/* 821D9420h case    3:*/		return 0x821D9424;
		  /* 821D9424h */ case    4:  		/* rlwinm. R11, R11, 0, 19, 26 */
		/* 821D9424h case    4:*/		cpu::op::rlwinm<1,0,19,26>(regs,&regs.R11,regs.R11);
		/* 821D9424h case    4:*/		return 0x821D9428;
		  /* 821D9428h */ case    5:  		/* bc 12, CR0_EQ, 220 */
		/* 821D9428h case    5:*/		if ( regs.CR[0].eq ) { return 0x821D9504;  }
		/* 821D9428h case    5:*/		return 0x821D942C;
	}
	return 0x821D942C;
} // Block from 821D9414h-821D942Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D942Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D942C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D942C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D942C);
		  /* 821D942Ch */ case    0:  		/* lwz R11, <#[R6 + 8]> */
		/* 821D942Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000008) );
		/* 821D942Ch case    0:*/		return 0x821D9430;
		  /* 821D9430h */ case    1:  		/* rlwinm R7, R11, 25, 25, 31 */
		/* 821D9430h case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R7,regs.R11);
		/* 821D9430h case    1:*/		return 0x821D9434;
		  /* 821D9434h */ case    2:  		/* cmplwi CR6, R7, 118 */
		/* 821D9434h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000076);
		/* 821D9434h case    2:*/		return 0x821D9438;
		  /* 821D9438h */ case    3:  		/* bc 4, CR6_EQ, 100 */
		/* 821D9438h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D949C;  }
		/* 821D9438h case    3:*/		return 0x821D943C;
		  /* 821D943Ch */ case    4:  		/* lwz R11, <#[R4 + 8]> */
		/* 821D943Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821D943Ch case    4:*/		return 0x821D9440;
		  /* 821D9440h */ case    5:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821D9440h case    5:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821D9440h case    5:*/		return 0x821D9444;
		  /* 821D9444h */ case    6:  		/* cmplwi CR6, R11, 15104 */
		/* 821D9444h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003B00);
		/* 821D9444h case    6:*/		return 0x821D9448;
		  /* 821D9448h */ case    7:  		/* bc 4, CR6_EQ, 84 */
		/* 821D9448h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821D949C;  }
		/* 821D9448h case    7:*/		return 0x821D944C;
		  /* 821D944Ch */ case    8:  		/* lwz R11, <#[R4 + 48]> */
		/* 821D944Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000030) );
		/* 821D944Ch case    8:*/		return 0x821D9450;
		  /* 821D9450h */ case    9:  		/* lwz R10, <#[R6 + 48]> */
		/* 821D9450h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + 0x00000030) );
		/* 821D9450h case    9:*/		return 0x821D9454;
		  /* 821D9454h */ case   10:  		/* lwz R11, <#[R11 + 12]> */
		/* 821D9454h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D9454h case   10:*/		return 0x821D9458;
		  /* 821D9458h */ case   11:  		/* lwz R10, <#[R10 + 12]> */
		/* 821D9458h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 821D9458h case   11:*/		return 0x821D945C;
		  /* 821D945Ch */ case   12:  		/* cmpw CR6, R10, R11 */
		/* 821D945Ch case   12:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R11);
		/* 821D945Ch case   12:*/		return 0x821D9460;
		  /* 821D9460h */ case   13:  		/* bc 4, CR6_EQ, 60 */
		/* 821D9460h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821D949C;  }
		/* 821D9460h case   13:*/		return 0x821D9464;
		  /* 821D9464h */ case   14:  		/* lwz R11, <#[R6 + 44]> */
		/* 821D9464h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x0000002C) );
		/* 821D9464h case   14:*/		return 0x821D9468;
		  /* 821D9468h */ case   15:  		/* lwz R10, <#[R4 + 44]> */
		/* 821D9468h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000002C) );
		/* 821D9468h case   15:*/		return 0x821D946C;
		  /* 821D946Ch */ case   16:  		/* lwz R24, <#[R11 + 12]> */
		/* 821D946Ch case   16:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D946Ch case   16:*/		return 0x821D9470;
		  /* 821D9470h */ case   17:  		/* lwz R23, <#[R10 + 12]> */
		/* 821D9470h case   17:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R10 + 0x0000000C) );
		/* 821D9470h case   17:*/		return 0x821D9474;
		  /* 821D9474h */ case   18:  		/* cmpw CR6, R24, R23 */
		/* 821D9474h case   18:*/		cpu::op::cmpw<6>(regs,regs.R24,regs.R23);
		/* 821D9474h case   18:*/		return 0x821D9478;
		  /* 821D9478h */ case   19:  		/* bc 4, CR6_EQ, 36 */
		/* 821D9478h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821D949C;  }
		/* 821D9478h case   19:*/		return 0x821D947C;
		  /* 821D947Ch */ case   20:  		/* xor R9, R8, R9 */
		/* 821D947Ch case   20:*/		cpu::op::xor<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821D947Ch case   20:*/		return 0x821D9480;
		  /* 821D9480h */ case   21:  		/* rlwinm. R9, R9, 0, 19, 26 */
		/* 821D9480h case   21:*/		cpu::op::rlwinm<1,0,19,26>(regs,&regs.R9,regs.R9);
		/* 821D9480h case   21:*/		return 0x821D9484;
		  /* 821D9484h */ case   22:  		/* bc 4, CR0_EQ, 24 */
		/* 821D9484h case   22:*/		if ( !regs.CR[0].eq ) { return 0x821D949C;  }
		/* 821D9484h case   22:*/		return 0x821D9488;
		  /* 821D9488h */ case   23:  		/* lwz R11, <#[R11]> */
		/* 821D9488h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821D9488h case   23:*/		return 0x821D948C;
		  /* 821D948Ch */ case   24:  		/* lwz R10, <#[R10]> */
		/* 821D948Ch case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 821D948Ch case   24:*/		return 0x821D9490;
		  /* 821D9490h */ case   25:  		/* xor R11, R10, R11 */
		/* 821D9490h case   25:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D9490h case   25:*/		return 0x821D9494;
		  /* 821D9494h */ case   26:  		/* rlwinm. R11, R11, 0, 19, 26 */
		/* 821D9494h case   26:*/		cpu::op::rlwinm<1,0,19,26>(regs,&regs.R11,regs.R11);
		/* 821D9494h case   26:*/		return 0x821D9498;
		  /* 821D9498h */ case   27:  		/* bc 12, CR0_EQ, 108 */
		/* 821D9498h case   27:*/		if ( regs.CR[0].eq ) { return 0x821D9504;  }
		/* 821D9498h case   27:*/		return 0x821D949C;
	}
	return 0x821D949C;
} // Block from 821D942Ch-821D949Ch (28 instructions)

//////////////////////////////////////////////////////
// Block at 821D949Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D949C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D949C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D949C);
		  /* 821D949Ch */ case    0:  		/* cmplwi CR6, R7, 125 */
		/* 821D949Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x0000007D);
		/* 821D949Ch case    0:*/		return 0x821D94A0;
		  /* 821D94A0h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 821D94A0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821D94B0;  }
		/* 821D94A0h case    1:*/		return 0x821D94A4;
		  /* 821D94A4h */ case    2:  		/* cmplwi CR6, R7, 124 */
		/* 821D94A4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x0000007C);
		/* 821D94A4h case    2:*/		return 0x821D94A8;
		  /* 821D94A8h */ case    3:  		/* li R10, 0 */
		/* 821D94A8h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821D94A8h case    3:*/		return 0x821D94AC;
		  /* 821D94ACh */ case    4:  		/* bc 4, CR6_EQ, 8 */
		/* 821D94ACh case    4:*/		if ( !regs.CR[6].eq ) { return 0x821D94B4;  }
		/* 821D94ACh case    4:*/		return 0x821D94B0;
	}
	return 0x821D94B0;
} // Block from 821D949Ch-821D94B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D94B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D94B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D94B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D94B0);
		  /* 821D94B0h */ case    0:  		/* li R10, 1 */
		/* 821D94B0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821D94B0h case    0:*/		return 0x821D94B4;
	}
	return 0x821D94B4;
} // Block from 821D94B0h-821D94B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D94B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D94B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D94B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D94B4);
		  /* 821D94B4h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 821D94B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821D94B4h case    0:*/		return 0x821D94B8;
		  /* 821D94B8h */ case    1:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821D94B8h case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821D94B8h case    1:*/		return 0x821D94BC;
		  /* 821D94BCh */ case    2:  		/* cmplwi CR6, R11, 125 */
		/* 821D94BCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 821D94BCh case    2:*/		return 0x821D94C0;
		  /* 821D94C0h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 821D94C0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821D94D0;  }
		/* 821D94C0h case    3:*/		return 0x821D94C4;
		  /* 821D94C4h */ case    4:  		/* cmplwi CR6, R11, 124 */
		/* 821D94C4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007C);
		/* 821D94C4h case    4:*/		return 0x821D94C8;
		  /* 821D94C8h */ case    5:  		/* li R11, 0 */
		/* 821D94C8h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D94C8h case    5:*/		return 0x821D94CC;
		  /* 821D94CCh */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821D94CCh case    6:*/		if ( !regs.CR[6].eq ) { return 0x821D94D4;  }
		/* 821D94CCh case    6:*/		return 0x821D94D0;
	}
	return 0x821D94D0;
} // Block from 821D94B4h-821D94D0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D94D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D94D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D94D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D94D0);
		  /* 821D94D0h */ case    0:  		/* li R11, 1 */
		/* 821D94D0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D94D0h case    0:*/		return 0x821D94D4;
	}
	return 0x821D94D4;
} // Block from 821D94D0h-821D94D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D94D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D94D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D94D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D94D4);
		  /* 821D94D4h */ case    0:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 821D94D4h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D94D4h case    0:*/		return 0x821D94D8;
		  /* 821D94D8h */ case    1:  		/* rlwinm R10, R10, 0, 24, 31 */
		/* 821D94D8h case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821D94D8h case    1:*/		return 0x821D94DC;
		  /* 821D94DCh */ case    2:  		/* subf R11, R10, R11 */
		/* 821D94DCh case    2:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D94DCh case    2:*/		return 0x821D94E0;
		  /* 821D94E0h */ case    3:  		/* addic R10, R11, -1 */
		/* 821D94E0h case    3:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821D94E0h case    3:*/		return 0x821D94E4;
		  /* 821D94E4h */ case    4:  		/* subfe R11, R10, R11 */
		/* 821D94E4h case    4:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D94E4h case    4:*/		return 0x821D94E8;
		  /* 821D94E8h */ case    5:  		/* or R28, R11, R28 */
		/* 821D94E8h case    5:*/		cpu::op::or<0>(regs,&regs.R28,regs.R11,regs.R28);
		/* 821D94E8h case    5:*/		return 0x821D94EC;
	}
	return 0x821D94EC;
} // Block from 821D94D4h-821D94ECh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D94ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D94EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D94EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D94EC);
		  /* 821D94ECh */ case    0:  		/* addi R31, R31, 1 */
		/* 821D94ECh case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821D94ECh case    0:*/		return 0x821D94F0;
		  /* 821D94F0h */ case    1:  		/* addi R3, R3, 4 */
		/* 821D94F0h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0x4);
		/* 821D94F0h case    1:*/		return 0x821D94F4;
		  /* 821D94F4h */ case    2:  		/* b -272 */
		/* 821D94F4h case    2:*/		return 0x821D93E4;
		/* 821D94F4h case    2:*/		return 0x821D94F8;
	}
	return 0x821D94F8;
} // Block from 821D94ECh-821D94F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D94F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D94F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D94F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D94F8);
		  /* 821D94F8h */ case    0:  		/* addi R29, R29, 1 */
		/* 821D94F8h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821D94F8h case    0:*/		return 0x821D94FC;
		  /* 821D94FCh */ case    1:  		/* addi R30, R30, 4 */
		/* 821D94FCh case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821D94FCh case    1:*/		return 0x821D9500;
		  /* 821D9500h */ case    2:  		/* b -308 */
		/* 821D9500h case    2:*/		return 0x821D93CC;
		/* 821D9500h case    2:*/		return 0x821D9504;
	}
	return 0x821D9504;
} // Block from 821D94F8h-821D9504h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D9504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9504);
		  /* 821D9504h */ case    0:  		/* mr R5, R25 */
		/* 821D9504h case    0:*/		regs.R5 = regs.R25;
		/* 821D9504h case    0:*/		return 0x821D9508;
		  /* 821D9508h */ case    1:  		/* mr R3, R26 */
		/* 821D9508h case    1:*/		regs.R3 = regs.R26;
		/* 821D9508h case    1:*/		return 0x821D950C;
		  /* 821D950Ch */ case    2:  		/* bl -56132 */
		/* 821D950Ch case    2:*/		regs.LR = 0x821D9510; return 0x821CB9C8;
		/* 821D950Ch case    2:*/		return 0x821D9510;
		  /* 821D9510h */ case    3:  		/* addi R7, R1, 176 */
		/* 821D9510h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xB0);
		/* 821D9510h case    3:*/		return 0x821D9514;
		  /* 821D9514h */ case    4:  		/* mr R6, R29 */
		/* 821D9514h case    4:*/		regs.R6 = regs.R29;
		/* 821D9514h case    4:*/		return 0x821D9518;
		  /* 821D9518h */ case    5:  		/* mr R5, R31 */
		/* 821D9518h case    5:*/		regs.R5 = regs.R31;
		/* 821D9518h case    5:*/		return 0x821D951C;
		  /* 821D951Ch */ case    6:  		/* mr R4, R16 */
		/* 821D951Ch case    6:*/		regs.R4 = regs.R16;
		/* 821D951Ch case    6:*/		return 0x821D9520;
		  /* 821D9520h */ case    7:  		/* mr R3, R26 */
		/* 821D9520h case    7:*/		regs.R3 = regs.R26;
		/* 821D9520h case    7:*/		return 0x821D9524;
		  /* 821D9524h */ case    8:  		/* bl -82564 */
		/* 821D9524h case    8:*/		regs.LR = 0x821D9528; return 0x821C52A0;
		/* 821D9524h case    8:*/		return 0x821D9528;
		  /* 821D9528h */ case    9:  		/* mr R5, R3 */
		/* 821D9528h case    9:*/		regs.R5 = regs.R3;
		/* 821D9528h case    9:*/		return 0x821D952C;
		  /* 821D952Ch */ case   10:  		/* lwz R6, <#[R1 + 176]> */
		/* 821D952Ch case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B0) );
		/* 821D952Ch case   10:*/		return 0x821D9530;
		  /* 821D9530h */ case   11:  		/* mr R8, R25 */
		/* 821D9530h case   11:*/		regs.R8 = regs.R25;
		/* 821D9530h case   11:*/		return 0x821D9534;
		  /* 821D9534h */ case   12:  		/* li R7, 0 */
		/* 821D9534h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821D9534h case   12:*/		return 0x821D9538;
		  /* 821D9538h */ case   13:  		/* mr R3, R26 */
		/* 821D9538h case   13:*/		regs.R3 = regs.R26;
		/* 821D9538h case   13:*/		return 0x821D953C;
		  /* 821D953Ch */ case   14:  		/* b -440 */
		/* 821D953Ch case   14:*/		return 0x821D9384;
		/* 821D953Ch case   14:*/		return 0x821D9540;
	}
	return 0x821D9540;
} // Block from 821D9504h-821D9540h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821D9540h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9540);
		  /* 821D9540h */ case    0:  		/* addi R21, R16, 4 */
		/* 821D9540h case    0:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R16,0x4);
		/* 821D9540h case    0:*/		return 0x821D9544;
		  /* 821D9544h */ case    1:  		/* li R30, 1 */
		/* 821D9544h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 821D9544h case    1:*/		return 0x821D9548;
		  /* 821D9548h */ case    2:  		/* mr R28, R21 */
		/* 821D9548h case    2:*/		regs.R28 = regs.R21;
		/* 821D9548h case    2:*/		return 0x821D954C;
		  /* 821D954Ch */ case    3:  		/* lwz R31, <#[R28]> */
		/* 821D954Ch case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000000) );
		/* 821D954Ch case    3:*/		return 0x821D9550;
		  /* 821D9550h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821D9550h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D9550h case    4:*/		return 0x821D9554;
		  /* 821D9554h */ case    5:  		/* bc 12, CR6_EQ, 188 */
		/* 821D9554h case    5:*/		if ( regs.CR[6].eq ) { return 0x821D9610;  }
		/* 821D9554h case    5:*/		return 0x821D9558;
		  /* 821D9558h */ case    6:  		/* lwz R11, <#[R31 + 16]> */
		/* 821D9558h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821D9558h case    6:*/		return 0x821D955C;
		  /* 821D955Ch */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821D955Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D955Ch case    7:*/		return 0x821D9560;
		  /* 821D9560h */ case    8:  		/* bc 12, CR6_EQ, 156 */
		/* 821D9560h case    8:*/		if ( regs.CR[6].eq ) { return 0x821D95FC;  }
		/* 821D9560h case    8:*/		return 0x821D9564;
		  /* 821D9564h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 821D9564h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821D9564h case    9:*/		return 0x821D9568;
		  /* 821D9568h */ case   10:  		/* lwz R29, <#[R31 + 16]> */
		/* 821D9568h case   10:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000010) );
		/* 821D9568h case   10:*/		return 0x821D956C;
		  /* 821D956Ch */ case   11:  		/* rlwinm R10, R11, 7, 29, 31 */
		/* 821D956Ch case   11:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R10,regs.R11);
		/* 821D956Ch case   11:*/		return 0x821D9570;
		  /* 821D9570h */ case   12:  		/* addic. R10, R10, -1 */
		/* 821D9570h case   12:*/		cpu::op::addic<1>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821D9570h case   12:*/		return 0x821D9574;
		  /* 821D9574h */ case   13:  		/* bc 12, CR0_EQ, 52 */
		/* 821D9574h case   13:*/		if ( regs.CR[0].eq ) { return 0x821D95A8;  }
		/* 821D9574h case   13:*/		return 0x821D9578;
		  /* 821D9578h */ case   14:  		/* mr R3, R29 */
		/* 821D9578h case   14:*/		regs.R3 = regs.R29;
		/* 821D9578h case   14:*/		return 0x821D957C;
		  /* 821D957Ch */ case   15:  		/* bl -427980 */
		/* 821D957Ch case   15:*/		regs.LR = 0x821D9580; return 0x82170DB0;
		/* 821D957Ch case   15:*/		return 0x821D9580;
		  /* 821D9580h */ case   16:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D9580h case   16:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D9580h case   16:*/		return 0x821D9584;
		  /* 821D9584h */ case   17:  		/* bc 12, CR0_EQ, 20 */
		/* 821D9584h case   17:*/		if ( regs.CR[0].eq ) { return 0x821D9598;  }
		/* 821D9584h case   17:*/		return 0x821D9588;
		  /* 821D9588h */ case   18:  		/* lwz R11, <#[R29 + 8]> */
		/* 821D9588h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821D9588h case   18:*/		return 0x821D958C;
		  /* 821D958Ch */ case   19:  		/* rlwinm. R11, R11, 27, 31, 31 */
		/* 821D958Ch case   19:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R11,regs.R11);
		/* 821D958Ch case   19:*/		return 0x821D9590;
		  /* 821D9590h */ case   20:  		/* li R11, 1 */
		/* 821D9590h case   20:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D9590h case   20:*/		return 0x821D9594;
		  /* 821D9594h */ case   21:  		/* bc 12, CR0_EQ, 8 */
		/* 821D9594h case   21:*/		if ( regs.CR[0].eq ) { return 0x821D959C;  }
		/* 821D9594h case   21:*/		return 0x821D9598;
	}
	return 0x821D9598;
} // Block from 821D9540h-821D9598h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821D9598h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9598);
		  /* 821D9598h */ case    0:  		/* li R11, 0 */
		/* 821D9598h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D9598h case    0:*/		return 0x821D959C;
	}
	return 0x821D959C;
} // Block from 821D9598h-821D959Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D959Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D959C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D959C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D959C);
		  /* 821D959Ch */ case    0:  		/* rlwinm R10, R30, 0, 24, 31 */
		/* 821D959Ch case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R30);
		/* 821D959Ch case    0:*/		return 0x821D95A0;
		  /* 821D95A0h */ case    1:  		/* and R30, R10, R11 */
		/* 821D95A0h case    1:*/		cpu::op::and<0>(regs,&regs.R30,regs.R10,regs.R11);
		/* 821D95A0h case    1:*/		return 0x821D95A4;
		  /* 821D95A4h */ case    2:  		/* b 88 */
		/* 821D95A4h case    2:*/		return 0x821D95FC;
		/* 821D95A4h case    2:*/		return 0x821D95A8;
	}
	return 0x821D95A8;
} // Block from 821D959Ch-821D95A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D95A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D95A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D95A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D95A8);
		  /* 821D95A8h */ case    0:  		/* rlwinm R11, R11, 27, 30, 31 */
		/* 821D95A8h case    0:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R11,regs.R11);
		/* 821D95A8h case    0:*/		return 0x821D95AC;
		  /* 821D95ACh */ case    1:  		/* mr R5, R31 */
		/* 821D95ACh case    1:*/		regs.R5 = regs.R31;
		/* 821D95ACh case    1:*/		return 0x821D95B0;
		  /* 821D95B0h */ case    2:  		/* addi R11, R11, 11 */
		/* 821D95B0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xB);
		/* 821D95B0h case    2:*/		return 0x821D95B4;
		  /* 821D95B4h */ case    3:  		/* mr R4, R16 */
		/* 821D95B4h case    3:*/		regs.R4 = regs.R16;
		/* 821D95B4h case    3:*/		return 0x821D95B8;
		  /* 821D95B8h */ case    4:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821D95B8h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821D95B8h case    4:*/		return 0x821D95BC;
		  /* 821D95BCh */ case    5:  		/* mr R3, R26 */
		/* 821D95BCh case    5:*/		regs.R3 = regs.R26;
		/* 821D95BCh case    5:*/		return 0x821D95C0;
		  /* 821D95C0h */ case    6:  		/* lwzx R11, <#[R11 + R16]> */
		/* 821D95C0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R16 + 0x00000000) );
		/* 821D95C0h case    6:*/		return 0x821D95C4;
		  /* 821D95C4h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 821D95C4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D95C4h case    7:*/		return 0x821D95C8;
		  /* 821D95C8h */ case    8:  		/* lwz R6, <#[R11 + 12]> */
		/* 821D95C8h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D95C8h case    8:*/		return 0x821D95CC;
		  /* 821D95CCh */ case    9:  		/* rlwinm R11, R10, 27, 30, 31 */
		/* 821D95CCh case    9:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R11,regs.R10);
		/* 821D95CCh case    9:*/		return 0x821D95D0;
		  /* 821D95D0h */ case   10:  		/* rlwinm R9, R10, 29, 28, 29 */
		/* 821D95D0h case   10:*/		cpu::op::rlwinm<0,29,28,29>(regs,&regs.R9,regs.R10);
		/* 821D95D0h case   10:*/		return 0x821D95D4;
		  /* 821D95D4h */ case   11:  		/* rlwinm R8, R10, 0, 27, 31 */
		/* 821D95D4h case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R10);
		/* 821D95D4h case   11:*/		return 0x821D95D8;
		  /* 821D95D8h */ case   12:  		/* or R10, R9, R11 */
		/* 821D95D8h case   12:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R11);
		/* 821D95D8h case   12:*/		return 0x821D95DC;
		  /* 821D95DCh */ case   13:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821D95DCh case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821D95DCh case   13:*/		return 0x821D95E0;
		  /* 821D95E0h */ case   14:  		/* or R10, R10, R11 */
		/* 821D95E0h case   14:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821D95E0h case   14:*/		return 0x821D95E4;
		  /* 821D95E4h */ case   15:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821D95E4h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821D95E4h case   15:*/		return 0x821D95E8;
		  /* 821D95E8h */ case   16:  		/* or R7, R10, R11 */
		/* 821D95E8h case   16:*/		cpu::op::or<0>(regs,&regs.R7,regs.R10,regs.R11);
		/* 821D95E8h case   16:*/		return 0x821D95EC;
		  /* 821D95ECh */ case   17:  		/* bl 305596 */
		/* 821D95ECh case   17:*/		regs.LR = 0x821D95F0; return 0x82223FA8;
		/* 821D95ECh case   17:*/		return 0x821D95F0;
		  /* 821D95F0h */ case   18:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 821D95F0h case   18:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D95F0h case   18:*/		return 0x821D95F4;
		  /* 821D95F4h */ case   19:  		/* rlwinm R10, R30, 0, 24, 31 */
		/* 821D95F4h case   19:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R30);
		/* 821D95F4h case   19:*/		return 0x821D95F8;
		  /* 821D95F8h */ case   20:  		/* and R30, R11, R10 */
		/* 821D95F8h case   20:*/		cpu::op::and<0>(regs,&regs.R30,regs.R11,regs.R10);
		/* 821D95F8h case   20:*/		return 0x821D95FC;
	}
	return 0x821D95FC;
} // Block from 821D95A8h-821D95FCh (21 instructions)

//////////////////////////////////////////////////////
// Block at 821D95FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D95FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D95FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D95FC);
		  /* 821D95FCh */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821D95FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821D95FCh case    0:*/		return 0x821D9600;
		  /* 821D9600h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821D9600h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821D9600h case    1:*/		return 0x821D9604;
		  /* 821D9604h */ case    2:  		/* bc 4, CR6_EQ, -184 */
		/* 821D9604h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821D954C;  }
		/* 821D9604h case    2:*/		return 0x821D9608;
		  /* 821D9608h */ case    3:  		/* addi R28, R31, 8 */
		/* 821D9608h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R31,0x8);
		/* 821D9608h case    3:*/		return 0x821D960C;
		  /* 821D960Ch */ case    4:  		/* b -192 */
		/* 821D960Ch case    4:*/		return 0x821D954C;
		/* 821D960Ch case    4:*/		return 0x821D9610;
	}
	return 0x821D9610;
} // Block from 821D95FCh-821D9610h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D9610h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9610( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9610) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9610);
		  /* 821D9610h */ case    0:  		/* rlwinm. R11, R30, 0, 24, 31 */
		/* 821D9610h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R30);
		/* 821D9610h case    0:*/		return 0x821D9614;
		  /* 821D9614h */ case    1:  		/* bc 12, CR0_EQ, 404 */
		/* 821D9614h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D97A8;  }
		/* 821D9614h case    1:*/		return 0x821D9618;
		  /* 821D9618h */ case    2:  		/* lwz R30, <#[R21]> */
		/* 821D9618h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R21 + 0x00000000) );
		/* 821D9618h case    2:*/		return 0x821D961C;
		  /* 821D961Ch */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 821D961Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D961Ch case    3:*/		return 0x821D9620;
		  /* 821D9620h */ case    4:  		/* bc 12, CR6_EQ, 384 */
		/* 821D9620h case    4:*/		if ( regs.CR[6].eq ) { return 0x821D97A0;  }
		/* 821D9620h case    4:*/		return 0x821D9624;
		  /* 821D9624h */ case    5:  		/* lwz R11, <#[R30 + 16]> */
		/* 821D9624h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821D9624h case    5:*/		return 0x821D9628;
		  /* 821D9628h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821D9628h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D9628h case    6:*/		return 0x821D962C;
		  /* 821D962Ch */ case    7:  		/* bc 12, CR6_EQ, 52 */
		/* 821D962Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x821D9660;  }
		/* 821D962Ch case    7:*/		return 0x821D9630;
		  /* 821D9630h */ case    8:  		/* lwz R11, <#[R30]> */
		/* 821D9630h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821D9630h case    8:*/		return 0x821D9634;
		  /* 821D9634h */ case    9:  		/* lwz R31, <#[R30 + 16]> */
		/* 821D9634h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000010) );
		/* 821D9634h case    9:*/		return 0x821D9638;
		  /* 821D9638h */ case   10:  		/* rlwinm R23, R11, 7, 29, 31 */
		/* 821D9638h case   10:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R23,regs.R11);
		/* 821D9638h case   10:*/		return 0x821D963C;
		  /* 821D963Ch */ case   11:  		/* addic. R11, R23, -1 */
		/* 821D963Ch case   11:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R23,0xFFFFFFFF);
		/* 821D963Ch case   11:*/		return 0x821D9640;
		  /* 821D9640h */ case   12:  		/* bc 12, CR0_EQ, 32 */
		/* 821D9640h case   12:*/		if ( regs.CR[0].eq ) { return 0x821D9660;  }
		/* 821D9640h case   12:*/		return 0x821D9644;
		  /* 821D9644h */ case   13:  		/* mr R3, R31 */
		/* 821D9644h case   13:*/		regs.R3 = regs.R31;
		/* 821D9644h case   13:*/		return 0x821D9648;
		  /* 821D9648h */ case   14:  		/* bl -478408 */
		/* 821D9648h case   14:*/		regs.LR = 0x821D964C; return 0x82164980;
		/* 821D9648h case   14:*/		return 0x821D964C;
		  /* 821D964Ch */ case   15:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D964Ch case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D964Ch case   15:*/		return 0x821D9650;
		  /* 821D9650h */ case   16:  		/* bc 4, CR0_EQ, 16 */
		/* 821D9650h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821D9660;  }
		/* 821D9650h case   16:*/		return 0x821D9654;
		  /* 821D9654h */ case   17:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D9654h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D9654h case   17:*/		return 0x821D9658;
		  /* 821D9658h */ case   18:  		/* rlwinm. R11, R11, 7, 31, 31 */
		/* 821D9658h case   18:*/		cpu::op::rlwinm<1,7,31,31>(regs,&regs.R11,regs.R11);
		/* 821D9658h case   18:*/		return 0x821D965C;
		  /* 821D965Ch */ case   19:  		/* bc 12, CR0_EQ, 12 */
		/* 821D965Ch case   19:*/		if ( regs.CR[0].eq ) { return 0x821D9668;  }
		/* 821D965Ch case   19:*/		return 0x821D9660;
	}
	return 0x821D9660;
} // Block from 821D9610h-821D9660h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821D9660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9660);
		  /* 821D9660h */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 821D9660h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 821D9660h case    0:*/		return 0x821D9664;
		  /* 821D9664h */ case    1:  		/* b -72 */
		/* 821D9664h case    1:*/		return 0x821D961C;
		/* 821D9664h case    1:*/		return 0x821D9668;
	}
	return 0x821D9668;
} // Block from 821D9660h-821D9668h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D9668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9668);
		  /* 821D9668h */ case    0:  		/* li R25, 0 */
		/* 821D9668h case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821D9668h case    0:*/		return 0x821D966C;
		  /* 821D966Ch */ case    1:  		/* cmplwi CR0, R23, 0 */
		/* 821D966Ch case    1:*/		cpu::op::cmplwi<0>(regs,regs.R23,0x00000000);
		/* 821D966Ch case    1:*/		return 0x821D9670;
		  /* 821D9670h */ case    2:  		/* bc 12, CR0_EQ, 276 */
		/* 821D9670h case    2:*/		if ( regs.CR[0].eq ) { return 0x821D9784;  }
		/* 821D9670h case    2:*/		return 0x821D9674;
		  /* 821D9674h */ case    3:  		/* lwz R19, <#[R1 + 1908]> */
		/* 821D9674h case    3:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R1 + 0x00000774) );
		/* 821D9674h case    3:*/		return 0x821D9678;
		  /* 821D9678h */ case    4:  		/* addi R22, R31, 44 */
		/* 821D9678h case    4:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R31,0x2C);
		/* 821D9678h case    4:*/		return 0x821D967C;
		  /* 821D967Ch */ case    5:  		/* li R24, 0 */
		/* 821D967Ch case    5:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821D967Ch case    5:*/		return 0x821D9680;
		  /* 821D9680h */ case    6:  		/* li R26, 0 */
		/* 821D9680h case    6:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821D9680h case    6:*/		return 0x821D9684;
		  /* 821D9684h */ case    7:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D9684h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D9684h case    7:*/		return 0x821D9688;
		  /* 821D9688h */ case    8:  		/* li R8, 1 */
		/* 821D9688h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821D9688h case    8:*/		return 0x821D968C;
		  /* 821D968Ch */ case    9:  		/* mr R5, R31 */
		/* 821D968Ch case    9:*/		regs.R5 = regs.R31;
		/* 821D968Ch case    9:*/		return 0x821D9690;
		  /* 821D9690h */ case   10:  		/* rlwinm R7, R11, 13, 29, 31 */
		/* 821D9690h case   10:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R7,regs.R11);
		/* 821D9690h case   10:*/		return 0x821D9694;
		  /* 821D9694h */ case   11:  		/* rlwinm R6, R11, 25, 25, 31 */
		/* 821D9694h case   11:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R6,regs.R11);
		/* 821D9694h case   11:*/		return 0x821D9698;
		  /* 821D9698h */ case   12:  		/* li R4, 0 */
		/* 821D9698h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D9698h case   12:*/		return 0x821D969C;
		  /* 821D969Ch */ case   13:  		/* mr R3, R19 */
		/* 821D969Ch case   13:*/		regs.R3 = regs.R19;
		/* 821D969Ch case   13:*/		return 0x821D96A0;
		  /* 821D96A0h */ case   14:  		/* bl -444048 */
		/* 821D96A0h case   14:*/		regs.LR = 0x821D96A4; return 0x8216D010;
		/* 821D96A0h case   14:*/		return 0x821D96A4;
		  /* 821D96A4h */ case   15:  		/* mr R30, R3 */
		/* 821D96A4h case   15:*/		regs.R30 = regs.R3;
		/* 821D96A4h case   15:*/		return 0x821D96A8;
		  /* 821D96A8h */ case   16:  		/* li R29, 0 */
		/* 821D96A8h case   16:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821D96A8h case   16:*/		return 0x821D96AC;
		  /* 821D96ACh */ case   17:  		/* addi R27, R22, -4 */
		/* 821D96ACh case   17:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R22,0xFFFFFFFC);
		/* 821D96ACh case   17:*/		return 0x821D96B0;
		  /* 821D96B0h */ case   18:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D96B0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D96B0h case   18:*/		return 0x821D96B4;
		  /* 821D96B4h */ case   19:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821D96B4h case   19:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821D96B4h case   19:*/		return 0x821D96B8;
		  /* 821D96B8h */ case   20:  		/* cmplw CR6, R29, R11 */
		/* 821D96B8h case   20:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821D96B8h case   20:*/		return 0x821D96BC;
		  /* 821D96BCh */ case   21:  		/* bc 4, CR6_LT, 100 */
		/* 821D96BCh case   21:*/		if ( !regs.CR[6].lt ) { return 0x821D9720;  }
		/* 821D96BCh case   21:*/		return 0x821D96C0;
		  /* 821D96C0h */ case   22:  		/* lwzu R28, <#[R27 + 4]> */
		/* 821D96C0h case   22:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R27 + 0x00000004) );
		regs.R27 = (uint32)(regs.R27 + 0x00000004);
		/* 821D96C0h case   22:*/		return 0x821D96C4;
		  /* 821D96C4h */ case   23:  		/* mr R3, R19 */
		/* 821D96C4h case   23:*/		regs.R3 = regs.R19;
		/* 821D96C4h case   23:*/		return 0x821D96C8;
		  /* 821D96C8h */ case   24:  		/* mr R4, R28 */
		/* 821D96C8h case   24:*/		regs.R4 = regs.R28;
		/* 821D96C8h case   24:*/		return 0x821D96CC;
		  /* 821D96CCh */ case   25:  		/* lwz R5, <#[R28 + 12]> */
		/* 821D96CCh case   25:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000000C) );
		/* 821D96CCh case   25:*/		return 0x821D96D0;
		  /* 821D96D0h */ case   26:  		/* bl -427488 */
		/* 821D96D0h case   26:*/		regs.LR = 0x821D96D4; return 0x821710F0;
		/* 821D96D0h case   26:*/		return 0x821D96D4;
		  /* 821D96D4h */ case   27:  		/* lwz R11, <#[R28]> */
		/* 821D96D4h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821D96D4h case   27:*/		return 0x821D96D8;
		  /* 821D96D8h */ case   28:  		/* lis R9, 512 */
		/* 821D96D8h case   28:*/		cpu::op::lis<0>(regs,&regs.R9,0x200);
		/* 821D96D8h case   28:*/		return 0x821D96DC;
		  /* 821D96DCh */ case   29:  		/* lis R12, -3073 */
		/* 821D96DCh case   29:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFF3FF);
		/* 821D96DCh case   29:*/		return 0x821D96E0;
		  /* 821D96E0h */ case   30:  		/* lwz R8, <#[R3]> */
		/* 821D96E0h case   30:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000000) );
		/* 821D96E0h case   30:*/		return 0x821D96E4;
		  /* 821D96E4h */ case   31:  		/* rlwinm R11, R11, 27, 24, 31 */
		/* 821D96E4h case   31:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R11,regs.R11);
		/* 821D96E4h case   31:*/		return 0x821D96E8;
		  /* 821D96E8h */ case   32:  		/* ori R9, R9, 7296 */
		/* 821D96E8h case   32:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x1C80);
		/* 821D96E8h case   32:*/		return 0x821D96EC;
		  /* 821D96ECh */ case   33:  		/* srw R11, R11, R26 */
		/* 821D96ECh case   33:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 821D96ECh case   33:*/		return 0x821D96F0;
		  /* 821D96F0h */ case   34:  		/* ori R12, R12, 64671 */
		/* 821D96F0h case   34:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xFC9F);
		/* 821D96F0h case   34:*/		return 0x821D96F4;
		  /* 821D96F4h */ case   35:  		/* rlwimi R9, R11, 5, 25, 26 */
		/* 821D96F4h case   35:*/		cpu::op::rlwimi<0,5,25,26>(regs,&regs.R9,regs.R11);
		/* 821D96F4h case   35:*/		return 0x821D96F8;
		  /* 821D96F8h */ case   36:  		/* mr R10, R3 */
		/* 821D96F8h case   36:*/		regs.R10 = regs.R3;
		/* 821D96F8h case   36:*/		return 0x821D96FC;
		  /* 821D96FCh */ case   37:  		/* and R11, R8, R12 */
		/* 821D96FCh case   37:*/		cpu::op::and<0>(regs,&regs.R11,regs.R8,regs.R12);
		/* 821D96FCh case   37:*/		return 0x821D9700;
		  /* 821D9700h */ case   38:  		/* mr R4, R29 */
		/* 821D9700h case   38:*/		regs.R4 = regs.R29;
		/* 821D9700h case   38:*/		return 0x821D9704;
		  /* 821D9704h */ case   39:  		/* or R11, R9, R11 */
		/* 821D9704h case   39:*/		cpu::op::or<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821D9704h case   39:*/		return 0x821D9708;
		  /* 821D9708h */ case   40:  		/* mr R3, R30 */
		/* 821D9708h case   40:*/		regs.R3 = regs.R30;
		/* 821D9708h case   40:*/		return 0x821D970C;
		  /* 821D970Ch */ case   41:  		/* stw R11, <#[R10]> */
		/* 821D970Ch case   41:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821D970Ch case   41:*/		return 0x821D9710;
		  /* 821D9710h */ case   42:  		/* mr R5, R10 */
		/* 821D9710h case   42:*/		regs.R5 = regs.R10;
		/* 821D9710h case   42:*/		return 0x821D9714;
		  /* 821D9714h */ case   43:  		/* bl -430180 */
		/* 821D9714h case   43:*/		regs.LR = 0x821D9718; return 0x821706B0;
		/* 821D9714h case   43:*/		return 0x821D9718;
		  /* 821D9718h */ case   44:  		/* addi R29, R29, 1 */
		/* 821D9718h case   44:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821D9718h case   44:*/		return 0x821D971C;
		  /* 821D971Ch */ case   45:  		/* b -108 */
		/* 821D971Ch case   45:*/		return 0x821D96B0;
		/* 821D971Ch case   45:*/		return 0x821D9720;
	}
	return 0x821D9720;
} // Block from 821D9668h-821D9720h (46 instructions)

//////////////////////////////////////////////////////
// Block at 821D9720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9720);
		  /* 821D9720h */ case    0:  		/* lhz R11, <#[R31 + 14]> */
		/* 821D9720h case    0:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000E) );
		/* 821D9720h case    0:*/		return 0x821D9724;
		  /* 821D9724h */ case    1:  		/* rlwinm R9, R24, 0, 16, 31 */
		/* 821D9724h case    1:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R24);
		/* 821D9724h case    1:*/		return 0x821D9728;
		  /* 821D9728h */ case    2:  		/* lwz R10, <#[R30 + 12]> */
		/* 821D9728h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 821D9728h case    2:*/		return 0x821D972C;
		  /* 821D972Ch */ case    3:  		/* srw R11, R11, R9 */
		/* 821D972Ch case    3:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D972Ch case    3:*/		return 0x821D9730;
		  /* 821D9730h */ case    4:  		/* rlwinm R11, R11, 0, 28, 31 */
		/* 821D9730h case    4:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R11,regs.R11);
		/* 821D9730h case    4:*/		return 0x821D9734;
		  /* 821D9734h */ case    5:  		/* and R9, R11, R10 */
		/* 821D9734h case    5:*/		cpu::op::and<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 821D9734h case    5:*/		return 0x821D9738;
		  /* 821D9738h */ case    6:  		/* rlwinm R9, R9, 0, 16, 31 */
		/* 821D9738h case    6:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R9);
		/* 821D9738h case    6:*/		return 0x821D973C;
		  /* 821D973Ch */ case    7:  		/* cmplw CR6, R9, R11 */
		/* 821D973Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821D973Ch case    7:*/		return 0x821D9740;
		  /* 821D9740h */ case    8:  		/* bc 12, CR6_EQ, 12 */
		/* 821D9740h case    8:*/		if ( regs.CR[6].eq ) { return 0x821D974C;  }
		/* 821D9740h case    8:*/		return 0x821D9744;
		  /* 821D9744h */ case    9:  		/* or R11, R11, R10 */
		/* 821D9744h case    9:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821D9744h case    9:*/		return 0x821D9748;
		  /* 821D9748h */ case   10:  		/* sth R11, <#[R30 + 14]> */
		/* 821D9748h case   10:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0x0000000E) );
		/* 821D9748h case   10:*/		return 0x821D974C;
	}
	return 0x821D974C;
} // Block from 821D9720h-821D974Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821D974Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D974C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D974C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D974C);
		  /* 821D974Ch */ case    0:  		/* li R8, 0 */
		/* 821D974Ch case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821D974Ch case    0:*/		return 0x821D9750;
		  /* 821D9750h */ case    1:  		/* lwz R10, <#[R1 + 1924]> */
		/* 821D9750h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000784) );
		/* 821D9750h case    1:*/		return 0x821D9754;
		  /* 821D9754h */ case    2:  		/* li R7, 0 */
		/* 821D9754h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821D9754h case    2:*/		return 0x821D9758;
		  /* 821D9758h */ case    3:  		/* lwz R9, <#[R1 + 112]> */
		/* 821D9758h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000070) );
		/* 821D9758h case    3:*/		return 0x821D975C;
		  /* 821D975Ch */ case    4:  		/* mr R6, R30 */
		/* 821D975Ch case    4:*/		regs.R6 = regs.R30;
		/* 821D975Ch case    4:*/		return 0x821D9760;
		  /* 821D9760h */ case    5:  		/* mr R5, R25 */
		/* 821D9760h case    5:*/		regs.R5 = regs.R25;
		/* 821D9760h case    5:*/		return 0x821D9764;
		  /* 821D9764h */ case    6:  		/* mr R4, R31 */
		/* 821D9764h case    6:*/		regs.R4 = regs.R31;
		/* 821D9764h case    6:*/		return 0x821D9768;
		  /* 821D9768h */ case    7:  		/* mr R3, R19 */
		/* 821D9768h case    7:*/		regs.R3 = regs.R19;
		/* 821D9768h case    7:*/		return 0x821D976C;
		  /* 821D976Ch */ case    8:  		/* bl -43708 */
		/* 821D976Ch case    8:*/		regs.LR = 0x821D9770; return 0x821CECB0;
		/* 821D976Ch case    8:*/		return 0x821D9770;
		  /* 821D9770h */ case    9:  		/* addi R25, R25, 1 */
		/* 821D9770h case    9:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 821D9770h case    9:*/		return 0x821D9774;
		  /* 821D9774h */ case   10:  		/* addi R26, R26, 2 */
		/* 821D9774h case   10:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x2);
		/* 821D9774h case   10:*/		return 0x821D9778;
		  /* 821D9778h */ case   11:  		/* addi R24, R24, 4 */
		/* 821D9778h case   11:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x4);
		/* 821D9778h case   11:*/		return 0x821D977C;
		  /* 821D977Ch */ case   12:  		/* cmplw CR6, R25, R23 */
		/* 821D977Ch case   12:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R23);
		/* 821D977Ch case   12:*/		return 0x821D9780;
		  /* 821D9780h */ case   13:  		/* bc 12, CR6_LT, -252 */
		/* 821D9780h case   13:*/		if ( regs.CR[6].lt ) { return 0x821D9684;  }
		/* 821D9780h case   13:*/		return 0x821D9784;
	}
	return 0x821D9784;
} // Block from 821D974Ch-821D9784h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821D9784h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9784( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9784) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9784);
		  /* 821D9784h */ case    0:  		/* mr R3, R31 */
		/* 821D9784h case    0:*/		regs.R3 = regs.R31;
		/* 821D9784h case    0:*/		return 0x821D9788;
		  /* 821D9788h */ case    1:  		/* bl -478728 */
		/* 821D9788h case    1:*/		regs.LR = 0x821D978C; return 0x82164980;
		/* 821D9788h case    1:*/		return 0x821D978C;
		  /* 821D978Ch */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D978Ch case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D978Ch case    2:*/		return 0x821D9790;
		  /* 821D9790h */ case    3:  		/* bc 4, CR0_EQ, -376 */
		/* 821D9790h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D9618;  }
		/* 821D9790h case    3:*/		return 0x821D9794;
		  /* 821D9794h */ case    4:  		/* li R4, 4800 */
		/* 821D9794h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821D9794h case    4:*/		return 0x821D9798;
		  /* 821D9798h */ case    5:  		/* lwz R3, <#[R1 + 1908]> */
		/* 821D9798h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000774) );
		/* 821D9798h case    5:*/		return 0x821D979C;
		  /* 821D979Ch */ case    6:  		/* bl -555316 */
		/* 821D979Ch case    6:*/		regs.LR = 0x821D97A0; return 0x82151E68;
		/* 821D979Ch case    6:*/		return 0x821D97A0;
	}
	return 0x821D97A0;
} // Block from 821D9784h-821D97A0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D97A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D97A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D97A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D97A0);
		  /* 821D97A0h */ case    0:  		/* lwz R25, <#[R1 + 112]> */
		/* 821D97A0h case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000070) );
		/* 821D97A0h case    0:*/		return 0x821D97A4;
		  /* 821D97A4h */ case    1:  		/* lwz R26, <#[R1 + 1908]> */
		/* 821D97A4h case    1:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000774) );
		/* 821D97A4h case    1:*/		return 0x821D97A8;
	}
	return 0x821D97A8;
} // Block from 821D97A0h-821D97A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D97A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D97A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D97A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D97A8);
		  /* 821D97A8h */ case    0:  		/* li R29, 0 */
		/* 821D97A8h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821D97A8h case    0:*/		return 0x821D97AC;
		  /* 821D97ACh */ case    1:  		/* li R30, 0 */
		/* 821D97ACh case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821D97ACh case    1:*/		return 0x821D97B0;
		  /* 821D97B0h */ case    2:  		/* lwz R11, <#[R16 + 8]> */
		/* 821D97B0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821D97B0h case    2:*/		return 0x821D97B4;
		  /* 821D97B4h */ case    3:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821D97B4h case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821D97B4h case    3:*/		return 0x821D97B8;
		  /* 821D97B8h */ case    4:  		/* cmplw CR6, R29, R11 */
		/* 821D97B8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821D97B8h case    4:*/		return 0x821D97BC;
		  /* 821D97BCh */ case    5:  		/* bc 4, CR6_LT, -10968 */
		/* 821D97BCh case    5:*/		if ( !regs.CR[6].lt ) { return 0x821D6CE4;  }
		/* 821D97BCh case    5:*/		return 0x821D97C0;
		  /* 821D97C0h */ case    6:  		/* lwzx R31, <#[R20 + R30]> */
		/* 821D97C0h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R20 + regs.R30 + 0x00000000) );
		/* 821D97C0h case    6:*/		return 0x821D97C4;
		  /* 821D97C4h */ case    7:  		/* lwz R11, <#[R31 + 12]> */
		/* 821D97C4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821D97C4h case    7:*/		return 0x821D97C8;
		  /* 821D97C8h */ case    8:  		/* lwz R10, <#[R31]> */
		/* 821D97C8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821D97C8h case    8:*/		return 0x821D97CC;
		  /* 821D97CCh */ case    9:  		/* rlwinm R9, R10, 29, 28, 29 */
		/* 821D97CCh case    9:*/		cpu::op::rlwinm<0,29,28,29>(regs,&regs.R9,regs.R10);
		/* 821D97CCh case    9:*/		return 0x821D97D0;
		  /* 821D97D0h */ case   10:  		/* rlwinm R4, R10, 0, 27, 31 */
		/* 821D97D0h case   10:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R10);
		/* 821D97D0h case   10:*/		return 0x821D97D4;
		  /* 821D97D4h */ case   11:  		/* lhz R11, <#[R11 + 14]> */
		/* 821D97D4h case   11:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000E) );
		/* 821D97D4h case   11:*/		return 0x821D97D8;
		  /* 821D97D8h */ case   12:  		/* srw R11, R11, R9 */
		/* 821D97D8h case   12:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821D97D8h case   12:*/		return 0x821D97DC;
		  /* 821D97DCh */ case   13:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821D97DCh case   13:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821D97DCh case   13:*/		return 0x821D97E0;
		  /* 821D97E0h */ case   14:  		/* bl -255840 */
		/* 821D97E0h case   14:*/		regs.LR = 0x821D97E4; return 0x8219B080;
		/* 821D97E0h case   14:*/		return 0x821D97E4;
		  /* 821D97E4h */ case   15:  		/* lwz R10, <#[R16 + 12]> */
		/* 821D97E4h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x0000000C) );
		/* 821D97E4h case   15:*/		return 0x821D97E8;
		  /* 821D97E8h */ case   16:  		/* slw R11, R3, R30 */
		/* 821D97E8h case   16:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R3,regs.R30);
		/* 821D97E8h case   16:*/		return 0x821D97EC;
		  /* 821D97ECh */ case   17:  		/* and R9, R11, R10 */
		/* 821D97ECh case   17:*/		cpu::op::and<0>(regs,&regs.R9,regs.R11,regs.R10);
		/* 821D97ECh case   17:*/		return 0x821D97F0;
		  /* 821D97F0h */ case   18:  		/* rlwinm R9, R9, 0, 16, 31 */
		/* 821D97F0h case   18:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R9,regs.R9);
		/* 821D97F0h case   18:*/		return 0x821D97F4;
		  /* 821D97F4h */ case   19:  		/* cmplw CR6, R9, R11 */
		/* 821D97F4h case   19:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821D97F4h case   19:*/		return 0x821D97F8;
		  /* 821D97F8h */ case   20:  		/* bc 4, CR6_EQ, 12 */
		/* 821D97F8h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821D9804;  }
		/* 821D97F8h case   20:*/		return 0x821D97FC;
		  /* 821D97FCh */ case   21:  		/* li R11, 0 */
		/* 821D97FCh case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821D97FCh case   21:*/		return 0x821D9800;
		  /* 821D9800h */ case   22:  		/* b 16 */
		/* 821D9800h case   22:*/		return 0x821D9810;
		/* 821D9800h case   22:*/		return 0x821D9804;
	}
	return 0x821D9804;
} // Block from 821D97A8h-821D9804h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821D9804h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9804( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9804) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9804);
		  /* 821D9804h */ case    0:  		/* or R10, R11, R10 */
		/* 821D9804h case    0:*/		cpu::op::or<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821D9804h case    0:*/		return 0x821D9808;
		  /* 821D9808h */ case    1:  		/* li R11, 1 */
		/* 821D9808h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D9808h case    1:*/		return 0x821D980C;
		  /* 821D980Ch */ case    2:  		/* sth R10, <#[R16 + 14]> */
		/* 821D980Ch case    2:*/		cpu::mem::store16( regs, regs.R10, (uint32)(regs.R16 + 0x0000000E) );
		/* 821D980Ch case    2:*/		return 0x821D9810;
	}
	return 0x821D9810;
} // Block from 821D9804h-821D9810h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D9810h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9810);
		  /* 821D9810h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D9810h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D9810h case    0:*/		return 0x821D9814;
		  /* 821D9814h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821D9814h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D9828;  }
		/* 821D9814h case    1:*/		return 0x821D9818;
		  /* 821D9818h */ case    2:  		/* mr R5, R25 */
		/* 821D9818h case    2:*/		regs.R5 = regs.R25;
		/* 821D9818h case    2:*/		return 0x821D981C;
		  /* 821D981Ch */ case    3:  		/* mr R4, R16 */
		/* 821D981Ch case    3:*/		regs.R4 = regs.R16;
		/* 821D981Ch case    3:*/		return 0x821D9820;
		  /* 821D9820h */ case    4:  		/* mr R3, R26 */
		/* 821D9820h case    4:*/		regs.R3 = regs.R26;
		/* 821D9820h case    4:*/		return 0x821D9824;
		  /* 821D9824h */ case    5:  		/* bl -56772 */
		/* 821D9824h case    5:*/		regs.LR = 0x821D9828; return 0x821CBA60;
		/* 821D9824h case    5:*/		return 0x821D9828;
	}
	return 0x821D9828;
} // Block from 821D9810h-821D9828h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D9828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9828);
		  /* 821D9828h */ case    0:  		/* addi R6, R1, 1344 */
		/* 821D9828h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x540);
		/* 821D9828h case    0:*/		return 0x821D982C;
		  /* 821D982Ch */ case    1:  		/* addi R5, R1, 1360 */
		/* 821D982Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x550);
		/* 821D982Ch case    1:*/		return 0x821D9830;
		  /* 821D9830h */ case    2:  		/* li R4, 0 */
		/* 821D9830h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821D9830h case    2:*/		return 0x821D9834;
		  /* 821D9834h */ case    3:  		/* mr R3, R31 */
		/* 821D9834h case    3:*/		regs.R3 = regs.R31;
		/* 821D9834h case    3:*/		return 0x821D9838;
		  /* 821D9838h */ case    4:  		/* bl 300272 */
		/* 821D9838h case    4:*/		regs.LR = 0x821D983C; return 0x82222D28;
		/* 821D9838h case    4:*/		return 0x821D983C;
		  /* 821D983Ch */ case    5:  		/* mr R7, R26 */
		/* 821D983Ch case    5:*/		regs.R7 = regs.R26;
		/* 821D983Ch case    5:*/		return 0x821D9840;
		  /* 821D9840h */ case    6:  		/* mr R4, R29 */
		/* 821D9840h case    6:*/		regs.R4 = regs.R29;
		/* 821D9840h case    6:*/		return 0x821D9844;
		  /* 821D9844h */ case    7:  		/* lfd FR2, <#[R1 + 1344]> */
		/* 821D9844h case    7:*/		cpu::mem::load64f( regs, &regs.FR2, (uint32)(regs.R1 + 0x00000540) );
		/* 821D9844h case    7:*/		return 0x821D9848;
		  /* 821D9848h */ case    8:  		/* mr R3, R16 */
		/* 821D9848h case    8:*/		regs.R3 = regs.R16;
		/* 821D9848h case    8:*/		return 0x821D984C;
		  /* 821D984Ch */ case    9:  		/* lfd FR1, <#[R1 + 1360]> */
		/* 821D984Ch case    9:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R1 + 0x00000550) );
		/* 821D984Ch case    9:*/		return 0x821D9850;
		  /* 821D9850h */ case   10:  		/* bl 299728 */
		/* 821D9850h case   10:*/		regs.LR = 0x821D9854; return 0x82222B20;
		/* 821D9850h case   10:*/		return 0x821D9854;
		  /* 821D9854h */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D9854h case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D9854h case   11:*/		return 0x821D9858;
		  /* 821D9858h */ case   12:  		/* bc 12, CR0_EQ, 20 */
		/* 821D9858h case   12:*/		if ( regs.CR[0].eq ) { return 0x821D986C;  }
		/* 821D9858h case   12:*/		return 0x821D985C;
		  /* 821D985Ch */ case   13:  		/* mr R5, R25 */
		/* 821D985Ch case   13:*/		regs.R5 = regs.R25;
		/* 821D985Ch case   13:*/		return 0x821D9860;
		  /* 821D9860h */ case   14:  		/* mr R4, R16 */
		/* 821D9860h case   14:*/		regs.R4 = regs.R16;
		/* 821D9860h case   14:*/		return 0x821D9864;
		  /* 821D9864h */ case   15:  		/* mr R3, R26 */
		/* 821D9864h case   15:*/		regs.R3 = regs.R26;
		/* 821D9864h case   15:*/		return 0x821D9868;
		  /* 821D9868h */ case   16:  		/* bl -56840 */
		/* 821D9868h case   16:*/		regs.LR = 0x821D986C; return 0x821CBA60;
		/* 821D9868h case   16:*/		return 0x821D986C;
	}
	return 0x821D986C;
} // Block from 821D9828h-821D986Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 821D986Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D986C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D986C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D986C);
		  /* 821D986Ch */ case    0:  		/* addi R29, R29, 1 */
		/* 821D986Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821D986Ch case    0:*/		return 0x821D9870;
		  /* 821D9870h */ case    1:  		/* addi R30, R30, 4 */
		/* 821D9870h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821D9870h case    1:*/		return 0x821D9874;
		  /* 821D9874h */ case    2:  		/* b -196 */
		/* 821D9874h case    2:*/		return 0x821D97B0;
		/* 821D9874h case    2:*/		return 0x821D9878;
	}
	return 0x821D9878;
} // Block from 821D986Ch-821D9878h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D9878h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9878);
		  /* 821D9878h */ case    0:  		/* mfspr R12, LR */
		/* 821D9878h case    0:*/		regs.R12 = regs.LR;
		/* 821D9878h case    0:*/		return 0x821D987C;
		  /* 821D987Ch */ case    1:  		/* bl -1345100 */
		/* 821D987Ch case    1:*/		regs.LR = 0x821D9880; return 0x82091230;
		/* 821D987Ch case    1:*/		return 0x821D9880;
		  /* 821D9880h */ case    2:  		/* stwu R1, <#[R1 - 272]> */
		/* 821D9880h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEF0);
		/* 821D9880h case    2:*/		return 0x821D9884;
		  /* 821D9884h */ case    3:  		/* li R20, 0 */
		/* 821D9884h case    3:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 821D9884h case    3:*/		return 0x821D9888;
		  /* 821D9888h */ case    4:  		/* mr R22, R3 */
		/* 821D9888h case    4:*/		regs.R22 = regs.R3;
		/* 821D9888h case    4:*/		return 0x821D988C;
		  /* 821D988Ch */ case    5:  		/* mr R18, R4 */
		/* 821D988Ch case    5:*/		regs.R18 = regs.R4;
		/* 821D988Ch case    5:*/		return 0x821D9890;
		  /* 821D9890h */ case    6:  		/* mr R19, R20 */
		/* 821D9890h case    6:*/		regs.R19 = regs.R20;
		/* 821D9890h case    6:*/		return 0x821D9894;
		  /* 821D9894h */ case    7:  		/* lwz R11, <#[R22 + 4]> */
		/* 821D9894h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821D9894h case    7:*/		return 0x821D9898;
		  /* 821D9898h */ case    8:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821D9898h case    8:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D9898h case    8:*/		return 0x821D989C;
		  /* 821D989Ch */ case    9:  		/* addic R10, R10, -1 */
		/* 821D989Ch case    9:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821D989Ch case    9:*/		return 0x821D98A0;
		  /* 821D98A0h */ case   10:  		/* subfe R10, R10, R10 */
		/* 821D98A0h case   10:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821D98A0h case   10:*/		return 0x821D98A4;
		  /* 821D98A4h */ case   11:  		/* and R11, R10, R11 */
		/* 821D98A4h case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821D98A4h case   11:*/		return 0x821D98A8;
		  /* 821D98A8h */ case   12:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D98A8h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D98A8h case   12:*/		return 0x821D98AC;
		  /* 821D98ACh */ case   13:  		/* b 80 */
		/* 821D98ACh case   13:*/		return 0x821D98FC;
		/* 821D98ACh case   13:*/		return 0x821D98B0;
		  /* 821D98B0h */ case   14:  		/* lwz R11, <#[R29 + 52]> */
		/* 821D98B0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000034) );
		/* 821D98B0h case   14:*/		return 0x821D98B4;
		  /* 821D98B4h */ case   15:  		/* cmpwi CR6, R11, 0 */
		/* 821D98B4h case   15:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821D98B4h case   15:*/		return 0x821D98B8;
		  /* 821D98B8h */ case   16:  		/* bc 4, CR6_EQ, 64 */
		/* 821D98B8h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821D98F8;  }
		/* 821D98B8h case   16:*/		return 0x821D98BC;
		  /* 821D98BCh */ case   17:  		/* lwz R31, <#[R29 + 8]> */
		/* 821D98BCh case   17:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000008) );
		/* 821D98BCh case   17:*/		return 0x821D98C0;
		  /* 821D98C0h */ case   18:  		/* addi R30, R29, 8 */
		/* 821D98C0h case   18:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x8);
		/* 821D98C0h case   18:*/		return 0x821D98C4;
		  /* 821D98C4h */ case   19:  		/* cmplwi CR6, R31, 0 */
		/* 821D98C4h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D98C4h case   19:*/		return 0x821D98C8;
		  /* 821D98C8h */ case   20:  		/* bc 12, CR6_EQ, 48 */
		/* 821D98C8h case   20:*/		if ( regs.CR[6].eq ) { return 0x821D98F8;  }
		/* 821D98C8h case   20:*/		return 0x821D98CC;
		  /* 821D98CCh */ case   21:  		/* mr R5, R22 */
		/* 821D98CCh case   21:*/		regs.R5 = regs.R22;
		/* 821D98CCh case   21:*/		return 0x821D98D0;
		  /* 821D98D0h */ case   22:  		/* lwz R3, <#[R31 + 4]> */
		/* 821D98D0h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 821D98D0h case   22:*/		return 0x821D98D4;
		  /* 821D98D4h */ case   23:  		/* mr R4, R29 */
		/* 821D98D4h case   23:*/		regs.R4 = regs.R29;
		/* 821D98D4h case   23:*/		return 0x821D98D8;
		  /* 821D98D8h */ case   24:  		/* bl 352400 */
		/* 821D98D8h case   24:*/		regs.LR = 0x821D98DC; return 0x8222F968;
		/* 821D98D8h case   24:*/		return 0x821D98DC;
		  /* 821D98DCh */ case   25:  		/* lwz R11, <#[R30]> */
		/* 821D98DCh case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821D98DCh case   25:*/		return 0x821D98E0;
		  /* 821D98E0h */ case   26:  		/* li R19, 1 */
		/* 821D98E0h case   26:*/		cpu::op::li<0>(regs,&regs.R19,0x1);
		/* 821D98E0h case   26:*/		return 0x821D98E4;
		  /* 821D98E4h */ case   27:  		/* cmplw CR6, R11, R31 */
		/* 821D98E4h case   27:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821D98E4h case   27:*/		return 0x821D98E8;
		  /* 821D98E8h */ case   28:  		/* bc 4, CR6_EQ, 8 */
		/* 821D98E8h case   28:*/		if ( !regs.CR[6].eq ) { return 0x821D98F0;  }
		/* 821D98E8h case   28:*/		return 0x821D98EC;
		  /* 821D98ECh */ case   29:  		/* addi R30, R31, 12 */
		/* 821D98ECh case   29:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0xC);
		/* 821D98ECh case   29:*/		return 0x821D98F0;
	}
	return 0x821D98F0;
} // Block from 821D9878h-821D98F0h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821D98F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D98F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D98F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D98F0);
		  /* 821D98F0h */ case    0:  		/* lwz R31, <#[R30]> */
		/* 821D98F0h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821D98F0h case    0:*/		return 0x821D98F4;
		  /* 821D98F4h */ case    1:  		/* b -48 */
		/* 821D98F4h case    1:*/		return 0x821D98C4;
		/* 821D98F4h case    1:*/		return 0x821D98F8;
	}
	return 0x821D98F8;
} // Block from 821D98F0h-821D98F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D98F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D98F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D98F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D98F8);
		  /* 821D98F8h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821D98F8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821D98F8h case    0:*/		return 0x821D98FC;
	}
	return 0x821D98FC;
} // Block from 821D98F8h-821D98FCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D98FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D98FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D98FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D98FC);
		  /* 821D98FCh */ case    0:  		/* lwz R29, <#[R11 + 4]> */
		/* 821D98FCh case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000004) );
		/* 821D98FCh case    0:*/		return 0x821D9900;
		  /* 821D9900h */ case    1:  		/* rlwinm. R11, R29, 0, 31, 31 */
		/* 821D9900h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R29);
		/* 821D9900h case    1:*/		return 0x821D9904;
		  /* 821D9904h */ case    2:  		/* bc 4, CR0_EQ, 12 */
		/* 821D9904h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821D9910;  }
		/* 821D9904h case    2:*/		return 0x821D9908;
		  /* 821D9908h */ case    3:  		/* cmplwi CR6, R29, 0 */
		/* 821D9908h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821D9908h case    3:*/		return 0x821D990C;
		  /* 821D990Ch */ case    4:  		/* bc 4, CR6_EQ, -92 */
		/* 821D990Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x821D98B0;  }
		/* 821D990Ch case    4:*/		return 0x821D9910;
	}
	return 0x821D9910;
} // Block from 821D98FCh-821D9910h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821D9910h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9910( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9910) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9910);
		  /* 821D9910h */ case    0:  		/* lwz R11, <#[R22 + 4]> */
		/* 821D9910h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821D9910h case    0:*/		return 0x821D9914;
		  /* 821D9914h */ case    1:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821D9914h case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D9914h case    1:*/		return 0x821D9918;
		  /* 821D9918h */ case    2:  		/* addic R10, R10, -1 */
		/* 821D9918h case    2:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821D9918h case    2:*/		return 0x821D991C;
		  /* 821D991Ch */ case    3:  		/* subfe R10, R10, R10 */
		/* 821D991Ch case    3:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821D991Ch case    3:*/		return 0x821D9920;
		  /* 821D9920h */ case    4:  		/* and R21, R10, R11 */
		/* 821D9920h case    4:*/		cpu::op::and<0>(regs,&regs.R21,regs.R10,regs.R11);
		/* 821D9920h case    4:*/		return 0x821D9924;
		  /* 821D9924h */ case    5:  		/* cmplwi CR6, R21, 0 */
		/* 821D9924h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 821D9924h case    5:*/		return 0x821D9928;
		  /* 821D9928h */ case    6:  		/* bc 12, CR6_EQ, 4636 */
		/* 821D9928h case    6:*/		if ( regs.CR[6].eq ) { return 0x821DAB44;  }
		/* 821D9928h case    6:*/		return 0x821D992C;
		  /* 821D992Ch */ case    7:  		/* lwz R11, <#[R21 + 28]> */
		/* 821D992Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000001C) );
		/* 821D992Ch case    7:*/		return 0x821D9930;
		  /* 821D9930h */ case    8:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D9930h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D9930h case    8:*/		return 0x821D9934;
		  /* 821D9934h */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 821D9934h case    9:*/		if ( regs.CR[0].eq ) { return 0x821D9944;  }
		/* 821D9934h case    9:*/		return 0x821D9938;
		  /* 821D9938h */ case   10:  		/* lwz R10, <#[R21 + 20]> */
		/* 821D9938h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000014) );
		/* 821D9938h case   10:*/		return 0x821D993C;
		  /* 821D993Ch */ case   11:  		/* addi R11, R21, 16 */
		/* 821D993Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R21,0x10);
		/* 821D993Ch case   11:*/		return 0x821D9940;
		  /* 821D9940h */ case   12:  		/* b 12 */
		/* 821D9940h case   12:*/		return 0x821D994C;
		/* 821D9940h case   12:*/		return 0x821D9944;
	}
	return 0x821D9944;
} // Block from 821D9910h-821D9944h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821D9944h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9944( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9944) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9944);
		  /* 821D9944h */ case    0:  		/* lwz R10, <#[R21 + 28]> */
		/* 821D9944h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x0000001C) );
		/* 821D9944h case    0:*/		return 0x821D9948;
		  /* 821D9948h */ case    1:  		/* addi R11, R21, 24 */
		/* 821D9948h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R21,0x18);
		/* 821D9948h case    1:*/		return 0x821D994C;
	}
	return 0x821D994C;
} // Block from 821D9944h-821D994Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D994Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D994C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D994C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D994C);
		  /* 821D994Ch */ case    0:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821D994Ch case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821D994Ch case    0:*/		return 0x821D9950;
		  /* 821D9950h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821D9950h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D995C;  }
		/* 821D9950h case    1:*/		return 0x821D9954;
		  /* 821D9954h */ case    2:  		/* mr R31, R20 */
		/* 821D9954h case    2:*/		regs.R31 = regs.R20;
		/* 821D9954h case    2:*/		return 0x821D9958;
		  /* 821D9958h */ case    3:  		/* b 16 */
		/* 821D9958h case    3:*/		return 0x821D9968;
		/* 821D9958h case    3:*/		return 0x821D995C;
	}
	return 0x821D995C;
} // Block from 821D994Ch-821D995Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D995Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D995C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D995C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D995C);
		  /* 821D995Ch */ case    0:  		/* lwz R10, <#[R11]> */
		/* 821D995Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D995Ch case    0:*/		return 0x821D9960;
		  /* 821D9960h */ case    1:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821D9960h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821D9960h case    1:*/		return 0x821D9964;
		  /* 821D9964h */ case    2:  		/* addi R31, R10, -40 */
		/* 821D9964h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R10,0xFFFFFFD8);
		/* 821D9964h case    2:*/		return 0x821D9968;
	}
	return 0x821D9968;
} // Block from 821D995Ch-821D9968h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D9968h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9968);
		  /* 821D9968h */ case    0:  		/* mr R30, R11 */
		/* 821D9968h case    0:*/		regs.R30 = regs.R11;
		/* 821D9968h case    0:*/		return 0x821D996C;
		  /* 821D996Ch */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 821D996Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D996Ch case    1:*/		return 0x821D9970;
		  /* 821D9970h */ case    2:  		/* bc 12, CR6_EQ, 136 */
		/* 821D9970h case    2:*/		if ( regs.CR[6].eq ) { return 0x821D99F8;  }
		/* 821D9970h case    2:*/		return 0x821D9974;
		  /* 821D9974h */ case    3:  		/* mr R4, R22 */
		/* 821D9974h case    3:*/		regs.R4 = regs.R22;
		/* 821D9974h case    3:*/		return 0x821D9978;
		  /* 821D9978h */ case    4:  		/* mr R3, R31 */
		/* 821D9978h case    4:*/		regs.R3 = regs.R31;
		/* 821D9978h case    4:*/		return 0x821D997C;
		  /* 821D997Ch */ case    5:  		/* bl -273876 */
		/* 821D997Ch case    5:*/		regs.LR = 0x821D9980; return 0x82196BA8;
		/* 821D997Ch case    5:*/		return 0x821D9980;
		  /* 821D9980h */ case    6:  		/* mr R3, R31 */
		/* 821D9980h case    6:*/		regs.R3 = regs.R31;
		/* 821D9980h case    6:*/		return 0x821D9984;
		  /* 821D9984h */ case    7:  		/* bl -479236 */
		/* 821D9984h case    7:*/		regs.LR = 0x821D9988; return 0x82164980;
		/* 821D9984h case    7:*/		return 0x821D9988;
		  /* 821D9988h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821D9988h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821D9988h case    8:*/		return 0x821D998C;
		  /* 821D998Ch */ case    9:  		/* bc 4, CR0_EQ, 92 */
		/* 821D998Ch case    9:*/		if ( !regs.CR[0].eq ) { return 0x821D99E8;  }
		/* 821D998Ch case    9:*/		return 0x821D9990;
		  /* 821D9990h */ case   10:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821D9990h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821D9990h case   10:*/		return 0x821D9994;
		  /* 821D9994h */ case   11:  		/* lwz R11, <#[R11 + 36]> */
		/* 821D9994h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821D9994h case   11:*/		return 0x821D9998;
		  /* 821D9998h */ case   12:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D9998h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D9998h case   12:*/		return 0x821D999C;
		  /* 821D999Ch */ case   13:  		/* bc 12, CR0_EQ, 12 */
		/* 821D999Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x821D99A8;  }
		/* 821D999Ch case   13:*/		return 0x821D99A0;
		  /* 821D99A0h */ case   14:  		/* mr R31, R20 */
		/* 821D99A0h case   14:*/		regs.R31 = regs.R20;
		/* 821D99A0h case   14:*/		return 0x821D99A4;
		  /* 821D99A4h */ case   15:  		/* b 16 */
		/* 821D99A4h case   15:*/		return 0x821D99B4;
		/* 821D99A4h case   15:*/		return 0x821D99A8;
	}
	return 0x821D99A8;
} // Block from 821D9968h-821D99A8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821D99A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D99A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D99A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D99A8);
		  /* 821D99A8h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D99A8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D99A8h case    0:*/		return 0x821D99AC;
		  /* 821D99ACh */ case    1:  		/* addic. R31, R11, -40 */
		/* 821D99ACh case    1:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821D99ACh case    1:*/		return 0x821D99B0;
		  /* 821D99B0h */ case    2:  		/* bc 4, CR0_EQ, -68 */
		/* 821D99B0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821D996C;  }
		/* 821D99B0h case    2:*/		return 0x821D99B4;
	}
	return 0x821D99B4;
} // Block from 821D99A8h-821D99B4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D99B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D99B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D99B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D99B4);
		  /* 821D99B4h */ case    0:  		/* addi R11, R21, 16 */
		/* 821D99B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R21,0x10);
		/* 821D99B4h case    0:*/		return 0x821D99B8;
		  /* 821D99B8h */ case    1:  		/* cmplw CR6, R30, R11 */
		/* 821D99B8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821D99B8h case    1:*/		return 0x821D99BC;
		  /* 821D99BCh */ case    2:  		/* bc 12, CR6_EQ, -80 */
		/* 821D99BCh case    2:*/		if ( regs.CR[6].eq ) { return 0x821D996C;  }
		/* 821D99BCh case    2:*/		return 0x821D99C0;
		  /* 821D99C0h */ case    3:  		/* lwz R10, <#[R11 + 4]> */
		/* 821D99C0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821D99C0h case    3:*/		return 0x821D99C4;
		  /* 821D99C4h */ case    4:  		/* mr R30, R11 */
		/* 821D99C4h case    4:*/		regs.R30 = regs.R11;
		/* 821D99C4h case    4:*/		return 0x821D99C8;
		  /* 821D99C8h */ case    5:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821D99C8h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821D99C8h case    5:*/		return 0x821D99CC;
		  /* 821D99CCh */ case    6:  		/* bc 12, CR0_EQ, 12 */
		/* 821D99CCh case    6:*/		if ( regs.CR[0].eq ) { return 0x821D99D8;  }
		/* 821D99CCh case    6:*/		return 0x821D99D0;
		  /* 821D99D0h */ case    7:  		/* mr R31, R20 */
		/* 821D99D0h case    7:*/		regs.R31 = regs.R20;
		/* 821D99D0h case    7:*/		return 0x821D99D4;
		  /* 821D99D4h */ case    8:  		/* b -104 */
		/* 821D99D4h case    8:*/		return 0x821D996C;
		/* 821D99D4h case    8:*/		return 0x821D99D8;
	}
	return 0x821D99D8;
} // Block from 821D99B4h-821D99D8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821D99D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D99D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D99D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D99D8);
		  /* 821D99D8h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821D99D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821D99D8h case    0:*/		return 0x821D99DC;
		  /* 821D99DCh */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D99DCh case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D99DCh case    1:*/		return 0x821D99E0;
		  /* 821D99E0h */ case    2:  		/* addi R31, R11, -40 */
		/* 821D99E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821D99E0h case    2:*/		return 0x821D99E4;
		  /* 821D99E4h */ case    3:  		/* b -120 */
		/* 821D99E4h case    3:*/		return 0x821D996C;
		/* 821D99E4h case    3:*/		return 0x821D99E8;
	}
	return 0x821D99E8;
} // Block from 821D99D8h-821D99E8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D99E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D99E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D99E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D99E8);
		  /* 821D99E8h */ case    0:  		/* mr R4, R31 */
		/* 821D99E8h case    0:*/		regs.R4 = regs.R31;
		/* 821D99E8h case    0:*/		return 0x821D99EC;
		  /* 821D99ECh */ case    1:  		/* mr R3, R22 */
		/* 821D99ECh case    1:*/		regs.R3 = regs.R22;
		/* 821D99ECh case    1:*/		return 0x821D99F0;
		  /* 821D99F0h */ case    2:  		/* bl 334944 */
		/* 821D99F0h case    2:*/		regs.LR = 0x821D99F4; return 0x8222B650;
		/* 821D99F0h case    2:*/		return 0x821D99F4;
		  /* 821D99F4h */ case    3:  		/* b -200 */
		/* 821D99F4h case    3:*/		return 0x821D992C;
		/* 821D99F4h case    3:*/		return 0x821D99F8;
	}
	return 0x821D99F8;
} // Block from 821D99E8h-821D99F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D99F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D99F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D99F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D99F8);
		  /* 821D99F8h */ case    0:  		/* lwz R11, <#[R21 + 8]> */
		/* 821D99F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821D99F8h case    0:*/		return 0x821D99FC;
		  /* 821D99FCh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821D99FCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D99FCh case    1:*/		return 0x821D9A00;
		  /* 821D9A00h */ case    2:  		/* bc 12, CR6_EQ, 1740 */
		/* 821D9A00h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DA0CC;  }
		/* 821D9A00h case    2:*/		return 0x821D9A04;
		  /* 821D9A04h */ case    3:  		/* lwz R10, <#[R21 + 48]> */
		/* 821D9A04h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000030) );
		/* 821D9A04h case    3:*/		return 0x821D9A08;
		  /* 821D9A08h */ case    4:  		/* li R9, 1 */
		/* 821D9A08h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821D9A08h case    4:*/		return 0x821D9A0C;
		  /* 821D9A0Ch */ case    5:  		/* lwz R23, <#[R11 + 4]> */
		/* 821D9A0Ch case    5:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R11 + 0x00000004) );
		/* 821D9A0Ch case    5:*/		return 0x821D9A10;
		  /* 821D9A10h */ case    6:  		/* rlwinm R8, R10, 0, 13, 31 */
		/* 821D9A10h case    6:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R10);
		/* 821D9A10h case    6:*/		return 0x821D9A14;
		  /* 821D9A14h */ case    7:  		/* rlwinm R10, R8, 27, 5, 31 */
		/* 821D9A14h case    7:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R8);
		/* 821D9A14h case    7:*/		return 0x821D9A18;
		  /* 821D9A18h */ case    8:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 821D9A18h case    8:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 821D9A18h case    8:*/		return 0x821D9A1C;
		  /* 821D9A1Ch */ case    9:  		/* addi R10, R10, 1 */
		/* 821D9A1Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821D9A1Ch case    9:*/		return 0x821D9A20;
		  /* 821D9A20h */ case   10:  		/* lwz R7, <#[R23 + 40]> */
		/* 821D9A20h case   10:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R23 + 0x00000028) );
		/* 821D9A20h case   10:*/		return 0x821D9A24;
		  /* 821D9A24h */ case   11:  		/* slw R9, R9, R8 */
		/* 821D9A24h case   11:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 821D9A24h case   11:*/		return 0x821D9A28;
		  /* 821D9A28h */ case   12:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821D9A28h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821D9A28h case   12:*/		return 0x821D9A2C;
		  /* 821D9A2Ch */ case   13:  		/* lwzx R10, <#[R10 + R7]> */
		/* 821D9A2Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R7 + 0x00000000) );
		/* 821D9A2Ch case   13:*/		return 0x821D9A30;
		  /* 821D9A30h */ case   14:  		/* and. R10, R10, R9 */
		/* 821D9A30h case   14:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821D9A30h case   14:*/		return 0x821D9A34;
		  /* 821D9A34h */ case   15:  		/* bc 4, CR0_EQ, 12 */
		/* 821D9A34h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821D9A40;  }
		/* 821D9A34h case   15:*/		return 0x821D9A38;
		  /* 821D9A38h */ case   16:  		/* lwz R11, <#[R11 + 12]> */
		/* 821D9A38h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821D9A38h case   16:*/		return 0x821D9A3C;
		  /* 821D9A3Ch */ case   17:  		/* b -64 */
		/* 821D9A3Ch case   17:*/		return 0x821D99FC;
		/* 821D9A3Ch case   17:*/		return 0x821D9A40;
	}
	return 0x821D9A40;
} // Block from 821D99F8h-821D9A40h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821D9A40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9A40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9A40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9A40);
		  /* 821D9A40h */ case    0:  		/* li R5, 16 */
		/* 821D9A40h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x10);
		/* 821D9A40h case    0:*/		return 0x821D9A44;
		  /* 821D9A44h */ case    1:  		/* mr R4, R21 */
		/* 821D9A44h case    1:*/		regs.R4 = regs.R21;
		/* 821D9A44h case    1:*/		return 0x821D9A48;
		  /* 821D9A48h */ case    2:  		/* mr R3, R22 */
		/* 821D9A48h case    2:*/		regs.R3 = regs.R22;
		/* 821D9A48h case    2:*/		return 0x821D9A4C;
		  /* 821D9A4Ch */ case    3:  		/* bl -42548 */
		/* 821D9A4Ch case    3:*/		regs.LR = 0x821D9A50; return 0x821CF418;
		/* 821D9A4Ch case    3:*/		return 0x821D9A50;
		  /* 821D9A50h */ case    4:  		/* li R5, 38 */
		/* 821D9A50h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 821D9A50h case    4:*/		return 0x821D9A54;
		  /* 821D9A54h */ case    5:  		/* li R4, 8 */
		/* 821D9A54h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821D9A54h case    5:*/		return 0x821D9A58;
		  /* 821D9A58h */ case    6:  		/* mr R3, R22 */
		/* 821D9A58h case    6:*/		regs.R3 = regs.R22;
		/* 821D9A58h case    6:*/		return 0x821D9A5C;
		  /* 821D9A5Ch */ case    7:  		/* mr R27, R20 */
		/* 821D9A5Ch case    7:*/		regs.R27 = regs.R20;
		/* 821D9A5Ch case    7:*/		return 0x821D9A60;
		  /* 821D9A60h */ case    8:  		/* bl -479600 */
		/* 821D9A60h case    8:*/		regs.LR = 0x821D9A64; return 0x821648F0;
		/* 821D9A60h case    8:*/		return 0x821D9A64;
		  /* 821D9A64h */ case    9:  		/* addi R26, R3, 4 */
		/* 821D9A64h case    9:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R3,0x4);
		/* 821D9A64h case    9:*/		return 0x821D9A68;
		  /* 821D9A68h */ case   10:  		/* ori R11, R3, 1 */
		/* 821D9A68h case   10:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821D9A68h case   10:*/		return 0x821D9A6C;
		  /* 821D9A6Ch */ case   11:  		/* ori R10, R26, 1 */
		/* 821D9A6Ch case   11:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R26,0x1);
		/* 821D9A6Ch case   11:*/		return 0x821D9A70;
		  /* 821D9A70h */ case   12:  		/* stw R11, <#[R3 + 4]> */
		/* 821D9A70h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821D9A70h case   12:*/		return 0x821D9A74;
		  /* 821D9A74h */ case   13:  		/* mr R28, R3 */
		/* 821D9A74h case   13:*/		regs.R28 = regs.R3;
		/* 821D9A74h case   13:*/		return 0x821D9A78;
		  /* 821D9A78h */ case   14:  		/* stw R10, <#[R3]> */
		/* 821D9A78h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821D9A78h case   14:*/		return 0x821D9A7C;
		  /* 821D9A7Ch */ case   15:  		/* mr R25, R20 */
		/* 821D9A7Ch case   15:*/		regs.R25 = regs.R20;
		/* 821D9A7Ch case   15:*/		return 0x821D9A80;
		  /* 821D9A80h */ case   16:  		/* lwz R11, <#[R22 + 4]> */
		/* 821D9A80h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821D9A80h case   16:*/		return 0x821D9A84;
		  /* 821D9A84h */ case   17:  		/* mr R24, R20 */
		/* 821D9A84h case   17:*/		regs.R24 = regs.R20;
		/* 821D9A84h case   17:*/		return 0x821D9A88;
		  /* 821D9A88h */ case   18:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D9A88h case   18:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D9A88h case   18:*/		return 0x821D9A8C;
		  /* 821D9A8Ch */ case   19:  		/* bc 4, CR0_EQ, 456 */
		/* 821D9A8Ch case   19:*/		if ( !regs.CR[0].eq ) { return 0x821D9C54;  }
		/* 821D9A8Ch case   19:*/		return 0x821D9A90;
		  /* 821D9A90h */ case   20:  		/* mr R29, R11 */
		/* 821D9A90h case   20:*/		regs.R29 = regs.R11;
		/* 821D9A90h case   20:*/		return 0x821D9A94;
		  /* 821D9A94h */ case   21:  		/* cmplwi CR0, R11, 0 */
		/* 821D9A94h case   21:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821D9A94h case   21:*/		return 0x821D9A98;
		  /* 821D9A98h */ case   22:  		/* bc 12, CR0_EQ, 444 */
		/* 821D9A98h case   22:*/		if ( regs.CR[0].eq ) { return 0x821D9C54;  }
		/* 821D9A98h case   22:*/		return 0x821D9A9C;
		  /* 821D9A9Ch */ case   23:  		/* lwz R11, <#[R29 + 48]> */
		/* 821D9A9Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 821D9A9Ch case   23:*/		return 0x821D9AA0;
		  /* 821D9AA0h */ case   24:  		/* rlwinm. R11, R11, 2, 31, 31 */
		/* 821D9AA0h case   24:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R11,regs.R11);
		/* 821D9AA0h case   24:*/		return 0x821D9AA4;
		  /* 821D9AA4h */ case   25:  		/* bc 12, CR0_EQ, 404 */
		/* 821D9AA4h case   25:*/		if ( regs.CR[0].eq ) { return 0x821D9C38;  }
		/* 821D9AA4h case   25:*/		return 0x821D9AA8;
		  /* 821D9AA8h */ case   26:  		/* lwz R11, <#[R29 + 20]> */
		/* 821D9AA8h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 821D9AA8h case   26:*/		return 0x821D9AAC;
		  /* 821D9AACh */ case   27:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D9AACh case   27:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D9AACh case   27:*/		return 0x821D9AB0;
		  /* 821D9AB0h */ case   28:  		/* bc 12, CR0_EQ, 40 */
		/* 821D9AB0h case   28:*/		if ( regs.CR[0].eq ) { return 0x821D9AD8;  }
		/* 821D9AB0h case   28:*/		return 0x821D9AB4;
		  /* 821D9AB4h */ case   29:  		/* lwz R11, <#[R29 + 28]> */
		/* 821D9AB4h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821D9AB4h case   29:*/		return 0x821D9AB8;
		  /* 821D9AB8h */ case   30:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D9AB8h case   30:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D9AB8h case   30:*/		return 0x821D9ABC;
		  /* 821D9ABCh */ case   31:  		/* bc 12, CR0_EQ, 16 */
		/* 821D9ABCh case   31:*/		if ( regs.CR[0].eq ) { return 0x821D9ACC;  }
		/* 821D9ABCh case   31:*/		return 0x821D9AC0;
		  /* 821D9AC0h */ case   32:  		/* lwz R11, <#[R29 + 36]> */
		/* 821D9AC0h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 821D9AC0h case   32:*/		return 0x821D9AC4;
		  /* 821D9AC4h */ case   33:  		/* addi R30, R29, 32 */
		/* 821D9AC4h case   33:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x20);
		/* 821D9AC4h case   33:*/		return 0x821D9AC8;
		  /* 821D9AC8h */ case   34:  		/* b 24 */
		/* 821D9AC8h case   34:*/		return 0x821D9AE0;
		/* 821D9AC8h case   34:*/		return 0x821D9ACC;
	}
	return 0x821D9ACC;
} // Block from 821D9A40h-821D9ACCh (35 instructions)

//////////////////////////////////////////////////////
// Block at 821D9ACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9ACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9ACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9ACC);
		  /* 821D9ACCh */ case    0:  		/* lwz R11, <#[R29 + 28]> */
		/* 821D9ACCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821D9ACCh case    0:*/		return 0x821D9AD0;
		  /* 821D9AD0h */ case    1:  		/* addi R30, R29, 24 */
		/* 821D9AD0h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x18);
		/* 821D9AD0h case    1:*/		return 0x821D9AD4;
		  /* 821D9AD4h */ case    2:  		/* b 12 */
		/* 821D9AD4h case    2:*/		return 0x821D9AE0;
		/* 821D9AD4h case    2:*/		return 0x821D9AD8;
	}
	return 0x821D9AD8;
} // Block from 821D9ACCh-821D9AD8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D9AD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9AD8);
		  /* 821D9AD8h */ case    0:  		/* lwz R11, <#[R29 + 20]> */
		/* 821D9AD8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 821D9AD8h case    0:*/		return 0x821D9ADC;
		  /* 821D9ADCh */ case    1:  		/* addi R30, R29, 16 */
		/* 821D9ADCh case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x10);
		/* 821D9ADCh case    1:*/		return 0x821D9AE0;
	}
	return 0x821D9AE0;
} // Block from 821D9AD8h-821D9AE0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D9AE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9AE0);
		  /* 821D9AE0h */ case    0:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821D9AE0h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D9AE0h case    0:*/		return 0x821D9AE4;
		  /* 821D9AE4h */ case    1:  		/* addic R10, R10, -1 */
		/* 821D9AE4h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821D9AE4h case    1:*/		return 0x821D9AE8;
		  /* 821D9AE8h */ case    2:  		/* subfe R10, R10, R10 */
		/* 821D9AE8h case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821D9AE8h case    2:*/		return 0x821D9AEC;
		  /* 821D9AECh */ case    3:  		/* and R31, R10, R11 */
		/* 821D9AECh case    3:*/		cpu::op::and<0>(regs,&regs.R31,regs.R10,regs.R11);
		/* 821D9AECh case    3:*/		return 0x821D9AF0;
		  /* 821D9AF0h */ case    4:  		/* b 268 */
		/* 821D9AF0h case    4:*/		return 0x821D9BFC;
		/* 821D9AF0h case    4:*/		return 0x821D9AF4;
		  /* 821D9AF4h */ case    5:  		/* lwz R9, <#[R31 + 8]> */
		/* 821D9AF4h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 821D9AF4h case    5:*/		return 0x821D9AF8;
		  /* 821D9AF8h */ case    6:  		/* rlwinm. R11, R9, 7, 31, 31 */
		/* 821D9AF8h case    6:*/		cpu::op::rlwinm<1,7,31,31>(regs,&regs.R11,regs.R9);
		/* 821D9AF8h case    6:*/		return 0x821D9AFC;
		  /* 821D9AFCh */ case    7:  		/* bc 4, CR0_EQ, 72 */
		/* 821D9AFCh case    7:*/		if ( !regs.CR[0].eq ) { return 0x821D9B44;  }
		/* 821D9AFCh case    7:*/		return 0x821D9B00;
		  /* 821D9B00h */ case    8:  		/* rlwinm. R11, R9, 27, 31, 31 */
		/* 821D9B00h case    8:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R11,regs.R9);
		/* 821D9B00h case    8:*/		return 0x821D9B04;
		  /* 821D9B04h */ case    9:  		/* bc 4, CR0_EQ, 64 */
		/* 821D9B04h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821D9B44;  }
		/* 821D9B04h case    9:*/		return 0x821D9B08;
		  /* 821D9B08h */ case   10:  		/* rlwinm R11, R9, 0, 18, 24 */
		/* 821D9B08h case   10:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R9);
		/* 821D9B08h case   10:*/		return 0x821D9B0C;
		  /* 821D9B0Ch */ case   11:  		/* cmplwi CR6, R11, 10624 */
		/* 821D9B0Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002980);
		/* 821D9B0Ch case   11:*/		return 0x821D9B10;
		  /* 821D9B10h */ case   12:  		/* bc 12, CR6_EQ, 52 */
		/* 821D9B10h case   12:*/		if ( regs.CR[6].eq ) { return 0x821D9B44;  }
		/* 821D9B10h case   12:*/		return 0x821D9B14;
		  /* 821D9B14h */ case   13:  		/* lwz R11, <#[R31 + 4]> */
		/* 821D9B14h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821D9B14h case   13:*/		return 0x821D9B18;
		  /* 821D9B18h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821D9B18h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D9B18h case   14:*/		return 0x821D9B1C;
		  /* 821D9B1Ch */ case   15:  		/* bc 12, CR6_EQ, 136 */
		/* 821D9B1Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x821D9BA4;  }
		/* 821D9B1Ch case   15:*/		return 0x821D9B20;
		  /* 821D9B20h */ case   16:  		/* lwz R10, <#[R11 + 16]> */
		/* 821D9B20h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821D9B20h case   16:*/		return 0x821D9B24;
		  /* 821D9B24h */ case   17:  		/* cmplwi CR6, R10, 0 */
		/* 821D9B24h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821D9B24h case   17:*/		return 0x821D9B28;
		  /* 821D9B28h */ case   18:  		/* bc 12, CR6_EQ, 20 */
		/* 821D9B28h case   18:*/		if ( regs.CR[6].eq ) { return 0x821D9B3C;  }
		/* 821D9B28h case   18:*/		return 0x821D9B2C;
		  /* 821D9B2Ch */ case   19:  		/* lwz R10, <#[R10 + 28]> */
		/* 821D9B2Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000001C) );
		/* 821D9B2Ch case   19:*/		return 0x821D9B30;
		  /* 821D9B30h */ case   20:  		/* lwz R10, <#[R10 + 48]> */
		/* 821D9B30h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000030) );
		/* 821D9B30h case   20:*/		return 0x821D9B34;
		  /* 821D9B34h */ case   21:  		/* rlwinm. R10, R10, 2, 31, 31 */
		/* 821D9B34h case   21:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R10,regs.R10);
		/* 821D9B34h case   21:*/		return 0x821D9B38;
		  /* 821D9B38h */ case   22:  		/* bc 12, CR0_EQ, 12 */
		/* 821D9B38h case   22:*/		if ( regs.CR[0].eq ) { return 0x821D9B44;  }
		/* 821D9B38h case   22:*/		return 0x821D9B3C;
	}
	return 0x821D9B3C;
} // Block from 821D9AE0h-821D9B3Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 821D9B3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9B3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9B3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9B3C);
		  /* 821D9B3Ch */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821D9B3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821D9B3Ch case    0:*/		return 0x821D9B40;
		  /* 821D9B40h */ case    1:  		/* b -40 */
		/* 821D9B40h case    1:*/		return 0x821D9B18;
		/* 821D9B40h case    1:*/		return 0x821D9B44;
	}
	return 0x821D9B44;
} // Block from 821D9B3Ch-821D9B44h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D9B44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9B44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9B44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9B44);
		  /* 821D9B44h */ case    0:  		/* oris R11, R9, 8192 */
		/* 821D9B44h case    0:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R9,0x2000);
		/* 821D9B44h case    0:*/		return 0x821D9B48;
		  /* 821D9B48h */ case    1:  		/* stw R11, <#[R31 + 8]> */
		/* 821D9B48h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D9B48h case    1:*/		return 0x821D9B4C;
		  /* 821D9B4Ch */ case    2:  		/* lwz R11, <#[R26]> */
		/* 821D9B4Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821D9B4Ch case    2:*/		return 0x821D9B50;
		  /* 821D9B50h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D9B50h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D9B50h case    3:*/		return 0x821D9B54;
		  /* 821D9B54h */ case    4:  		/* bc 4, CR0_EQ, 40 */
		/* 821D9B54h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821D9B7C;  }
		/* 821D9B54h case    4:*/		return 0x821D9B58;
		  /* 821D9B58h */ case    5:  		/* lwz R11, <#[R28]> */
		/* 821D9B58h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821D9B58h case    5:*/		return 0x821D9B5C;
		  /* 821D9B5Ch */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D9B5Ch case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D9B5Ch case    6:*/		return 0x821D9B60;
		  /* 821D9B60h */ case    7:  		/* addic. R3, R11, -4 */
		/* 821D9B60h case    7:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821D9B60h case    7:*/		return 0x821D9B64;
		  /* 821D9B64h */ case    8:  		/* bc 12, CR0_EQ, 24 */
		/* 821D9B64h case    8:*/		if ( regs.CR[0].eq ) { return 0x821D9B7C;  }
		/* 821D9B64h case    8:*/		return 0x821D9B68;
		  /* 821D9B68h */ case    9:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D9B68h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D9B68h case    9:*/		return 0x821D9B6C;
		  /* 821D9B6Ch */ case   10:  		/* lwz R10, <#[R3 + 12]> */
		/* 821D9B6Ch case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821D9B6Ch case   10:*/		return 0x821D9B70;
		  /* 821D9B70h */ case   11:  		/* addi R11, R11, 1 */
		/* 821D9B70h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821D9B70h case   11:*/		return 0x821D9B74;
		  /* 821D9B74h */ case   12:  		/* cmplw CR6, R11, R10 */
		/* 821D9B74h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821D9B74h case   12:*/		return 0x821D9B78;
		  /* 821D9B78h */ case   13:  		/* bc 4, CR6_GT, 16 */
		/* 821D9B78h case   13:*/		if ( !regs.CR[6].gt ) { return 0x821D9B88;  }
		/* 821D9B78h case   13:*/		return 0x821D9B7C;
	}
	return 0x821D9B7C;
} // Block from 821D9B44h-821D9B7Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 821D9B7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9B7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9B7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9B7C);
		  /* 821D9B7Ch */ case    0:  		/* li R4, 1 */
		/* 821D9B7Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D9B7Ch case    0:*/		return 0x821D9B80;
		  /* 821D9B80h */ case    1:  		/* mr R3, R28 */
		/* 821D9B80h case    1:*/		regs.R3 = regs.R28;
		/* 821D9B80h case    1:*/		return 0x821D9B84;
		  /* 821D9B84h */ case    2:  		/* bl -314044 */
		/* 821D9B84h case    2:*/		regs.LR = 0x821D9B88; return 0x8218D0C8;
		/* 821D9B84h case    2:*/		return 0x821D9B88;
	}
	return 0x821D9B88;
} // Block from 821D9B7Ch-821D9B88h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D9B88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9B88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9B88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9B88);
		  /* 821D9B88h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D9B88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D9B88h case    0:*/		return 0x821D9B8C;
		  /* 821D9B8Ch */ case    1:  		/* li R27, 1 */
		/* 821D9B8Ch case    1:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 821D9B8Ch case    1:*/		return 0x821D9B90;
		  /* 821D9B90h */ case    2:  		/* addi R10, R11, 4 */
		/* 821D9B90h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821D9B90h case    2:*/		return 0x821D9B94;
		  /* 821D9B94h */ case    3:  		/* addi R9, R11, 1 */
		/* 821D9B94h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821D9B94h case    3:*/		return 0x821D9B98;
		  /* 821D9B98h */ case    4:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821D9B98h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821D9B98h case    4:*/		return 0x821D9B9C;
		  /* 821D9B9Ch */ case    5:  		/* stw R9, <#[R3 + 8]> */
		/* 821D9B9Ch case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821D9B9Ch case    5:*/		return 0x821D9BA0;
		  /* 821D9BA0h */ case    6:  		/* stwx R31, <#[R11 + R3]> */
		/* 821D9BA0h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821D9BA0h case    6:*/		return 0x821D9BA4;
	}
	return 0x821D9BA4;
} // Block from 821D9B88h-821D9BA4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D9BA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9BA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9BA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9BA4);
		  /* 821D9BA4h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821D9BA4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821D9BA4h case    0:*/		return 0x821D9BA8;
		  /* 821D9BA8h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 821D9BA8h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821D9BA8h case    1:*/		return 0x821D9BAC;
		  /* 821D9BACh */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821D9BACh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821D9BACh case    2:*/		return 0x821D9BB0;
		  /* 821D9BB0h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821D9BB0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D9BBC;  }
		/* 821D9BB0h case    3:*/		return 0x821D9BB4;
		  /* 821D9BB4h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821D9BB4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D9BB4h case    4:*/		return 0x821D9BB8;
		  /* 821D9BB8h */ case    5:  		/* bc 4, CR6_EQ, -196 */
		/* 821D9BB8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821D9AF4;  }
		/* 821D9BB8h case    5:*/		return 0x821D9BBC;
	}
	return 0x821D9BBC;
} // Block from 821D9BA4h-821D9BBCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D9BBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9BBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9BBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9BBC);
		  /* 821D9BBCh */ case    0:  		/* addi R10, R29, 32 */
		/* 821D9BBCh case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x20);
		/* 821D9BBCh case    0:*/		return 0x821D9BC0;
		  /* 821D9BC0h */ case    1:  		/* cmplw CR6, R30, R10 */
		/* 821D9BC0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R10);
		/* 821D9BC0h case    1:*/		return 0x821D9BC4;
		  /* 821D9BC4h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 821D9BC4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821D9C04;  }
		/* 821D9BC4h case    2:*/		return 0x821D9BC8;
		  /* 821D9BC8h */ case    3:  		/* addi R11, R29, 24 */
		/* 821D9BC8h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x18);
		/* 821D9BC8h case    3:*/		return 0x821D9BCC;
		  /* 821D9BCCh */ case    4:  		/* cmplw CR6, R30, R11 */
		/* 821D9BCCh case    4:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821D9BCCh case    4:*/		return 0x821D9BD0;
		  /* 821D9BD0h */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 821D9BD0h case    5:*/		if ( regs.CR[6].eq ) { return 0x821D9BEC;  }
		/* 821D9BD0h case    5:*/		return 0x821D9BD4;
		  /* 821D9BD4h */ case    6:  		/* lwz R9, <#[R29 + 28]> */
		/* 821D9BD4h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x0000001C) );
		/* 821D9BD4h case    6:*/		return 0x821D9BD8;
		  /* 821D9BD8h */ case    7:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 821D9BD8h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 821D9BD8h case    7:*/		return 0x821D9BDC;
		  /* 821D9BDCh */ case    8:  		/* bc 4, CR0_EQ, 16 */
		/* 821D9BDCh case    8:*/		if ( !regs.CR[0].eq ) { return 0x821D9BEC;  }
		/* 821D9BDCh case    8:*/		return 0x821D9BE0;
		  /* 821D9BE0h */ case    9:  		/* lwz R31, <#[R11 + 4]> */
		/* 821D9BE0h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821D9BE0h case    9:*/		return 0x821D9BE4;
		  /* 821D9BE4h */ case   10:  		/* mr R30, R11 */
		/* 821D9BE4h case   10:*/		regs.R30 = regs.R11;
		/* 821D9BE4h case   10:*/		return 0x821D9BE8;
		  /* 821D9BE8h */ case   11:  		/* b 12 */
		/* 821D9BE8h case   11:*/		return 0x821D9BF4;
		/* 821D9BE8h case   11:*/		return 0x821D9BEC;
	}
	return 0x821D9BEC;
} // Block from 821D9BBCh-821D9BECh (12 instructions)

//////////////////////////////////////////////////////
// Block at 821D9BECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9BEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9BEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9BEC);
		  /* 821D9BECh */ case    0:  		/* lwz R31, <#[R10 + 4]> */
		/* 821D9BECh case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000004) );
		/* 821D9BECh case    0:*/		return 0x821D9BF0;
		  /* 821D9BF0h */ case    1:  		/* mr R30, R10 */
		/* 821D9BF0h case    1:*/		regs.R30 = regs.R10;
		/* 821D9BF0h case    1:*/		return 0x821D9BF4;
	}
	return 0x821D9BF4;
} // Block from 821D9BECh-821D9BF4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D9BF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9BF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9BF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9BF4);
		  /* 821D9BF4h */ case    0:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821D9BF4h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821D9BF4h case    0:*/		return 0x821D9BF8;
		  /* 821D9BF8h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821D9BF8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821D9C04;  }
		/* 821D9BF8h case    1:*/		return 0x821D9BFC;
	}
	return 0x821D9BFC;
} // Block from 821D9BF4h-821D9BFCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D9BFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9BFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9BFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9BFC);
		  /* 821D9BFCh */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821D9BFCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821D9BFCh case    0:*/		return 0x821D9C00;
		  /* 821D9C00h */ case    1:  		/* bc 4, CR6_EQ, -268 */
		/* 821D9C00h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D9AF4;  }
		/* 821D9C00h case    1:*/		return 0x821D9C04;
	}
	return 0x821D9C04;
} // Block from 821D9BFCh-821D9C04h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D9C04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9C04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9C04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9C04);
		  /* 821D9C04h */ case    0:  		/* lwz R10, <#[R29 + 12]> */
		/* 821D9C04h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000000C) );
		/* 821D9C04h case    0:*/		return 0x821D9C08;
		  /* 821D9C08h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 821D9C08h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821D9C08h case    1:*/		return 0x821D9C0C;
		  /* 821D9C0Ch */ case    2:  		/* bc 12, CR6_EQ, 44 */
		/* 821D9C0Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821D9C38;  }
		/* 821D9C0Ch case    2:*/		return 0x821D9C10;
		  /* 821D9C10h */ case    3:  		/* lwz R11, <#[R10]> */
		/* 821D9C10h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821D9C10h case    3:*/		return 0x821D9C14;
		  /* 821D9C14h */ case    4:  		/* lwz R11, <#[R11 + 48]> */
		/* 821D9C14h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 821D9C14h case    4:*/		return 0x821D9C18;
		  /* 821D9C18h */ case    5:  		/* rlwinm. R9, R11, 2, 31, 31 */
		/* 821D9C18h case    5:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R9,regs.R11);
		/* 821D9C18h case    5:*/		return 0x821D9C1C;
		  /* 821D9C1Ch */ case    6:  		/* bc 4, CR0_EQ, 20 */
		/* 821D9C1Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x821D9C30;  }
		/* 821D9C1Ch case    6:*/		return 0x821D9C20;
		  /* 821D9C20h */ case    7:  		/* rlwinm. R11, R11, 13, 31, 31 */
		/* 821D9C20h case    7:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R11);
		/* 821D9C20h case    7:*/		return 0x821D9C24;
		  /* 821D9C24h */ case    8:  		/* bc 4, CR0_EQ, 12 */
		/* 821D9C24h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821D9C30;  }
		/* 821D9C24h case    8:*/		return 0x821D9C28;
		  /* 821D9C28h */ case    9:  		/* addi R25, R25, 1 */
		/* 821D9C28h case    9:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 821D9C28h case    9:*/		return 0x821D9C2C;
		  /* 821D9C2Ch */ case   10:  		/* mr R24, R29 */
		/* 821D9C2Ch case   10:*/		regs.R24 = regs.R29;
		/* 821D9C2Ch case   10:*/		return 0x821D9C30;
	}
	return 0x821D9C30;
} // Block from 821D9C04h-821D9C30h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821D9C30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9C30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9C30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9C30);
		  /* 821D9C30h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821D9C30h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821D9C30h case    0:*/		return 0x821D9C34;
		  /* 821D9C34h */ case    1:  		/* b -44 */
		/* 821D9C34h case    1:*/		return 0x821D9C08;
		/* 821D9C34h case    1:*/		return 0x821D9C38;
	}
	return 0x821D9C38;
} // Block from 821D9C30h-821D9C38h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D9C38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9C38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9C38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9C38);
		  /* 821D9C38h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821D9C38h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821D9C38h case    0:*/		return 0x821D9C3C;
		  /* 821D9C3Ch */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821D9C3Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821D9C3Ch case    1:*/		return 0x821D9C40;
		  /* 821D9C40h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D9C40h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D9C40h case    2:*/		return 0x821D9C44;
		  /* 821D9C44h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821D9C44h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D9C54;  }
		/* 821D9C44h case    3:*/		return 0x821D9C48;
		  /* 821D9C48h */ case    4:  		/* mr R29, R11 */
		/* 821D9C48h case    4:*/		regs.R29 = regs.R11;
		/* 821D9C48h case    4:*/		return 0x821D9C4C;
		  /* 821D9C4Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821D9C4Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D9C4Ch case    5:*/		return 0x821D9C50;
		  /* 821D9C50h */ case    6:  		/* bc 4, CR6_EQ, -436 */
		/* 821D9C50h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821D9A9C;  }
		/* 821D9C50h case    6:*/		return 0x821D9C54;
	}
	return 0x821D9C54;
} // Block from 821D9C38h-821D9C54h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D9C54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9C54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9C54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9C54);
		  /* 821D9C54h */ case    0:  		/* rlwinm. R11, R27, 0, 24, 31 */
		/* 821D9C54h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R27);
		/* 821D9C54h case    0:*/		return 0x821D9C58;
		  /* 821D9C58h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821D9C58h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821D9C64;  }
		/* 821D9C58h case    1:*/		return 0x821D9C5C;
		  /* 821D9C5Ch */ case    2:  		/* cmplwi CR6, R25, 1 */
		/* 821D9C5Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000001);
		/* 821D9C5Ch case    2:*/		return 0x821D9C60;
		  /* 821D9C60h */ case    3:  		/* bc 12, CR6_EQ, 272 */
		/* 821D9C60h case    3:*/		if ( regs.CR[6].eq ) { return 0x821D9D70;  }
		/* 821D9C60h case    3:*/		return 0x821D9C64;
	}
	return 0x821D9C64;
} // Block from 821D9C54h-821D9C64h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D9C64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9C64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9C64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9C64);
		  /* 821D9C64h */ case    0:  		/* lwz R11, <#[R22 + 4]> */
		/* 821D9C64h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821D9C64h case    0:*/		return 0x821D9C68;
		  /* 821D9C68h */ case    1:  		/* li R27, 1 */
		/* 821D9C68h case    1:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 821D9C68h case    1:*/		return 0x821D9C6C;
		  /* 821D9C6Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D9C6Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D9C6Ch case    2:*/		return 0x821D9C70;
		  /* 821D9C70h */ case    3:  		/* bc 4, CR0_EQ, 256 */
		/* 821D9C70h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D9D70;  }
		/* 821D9C70h case    3:*/		return 0x821D9C74;
		  /* 821D9C74h */ case    4:  		/* mr R30, R11 */
		/* 821D9C74h case    4:*/		regs.R30 = regs.R11;
		/* 821D9C74h case    4:*/		return 0x821D9C78;
		  /* 821D9C78h */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 821D9C78h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821D9C78h case    5:*/		return 0x821D9C7C;
		  /* 821D9C7Ch */ case    6:  		/* bc 12, CR0_EQ, 244 */
		/* 821D9C7Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x821D9D70;  }
		/* 821D9C7Ch case    6:*/		return 0x821D9C80;
		  /* 821D9C80h */ case    7:  		/* lwz R11, <#[R30 + 48]> */
		/* 821D9C80h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 821D9C80h case    7:*/		return 0x821D9C84;
		  /* 821D9C84h */ case    8:  		/* rlwinm. R11, R11, 2, 31, 31 */
		/* 821D9C84h case    8:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R11,regs.R11);
		/* 821D9C84h case    8:*/		return 0x821D9C88;
		  /* 821D9C88h */ case    9:  		/* bc 12, CR0_EQ, 204 */
		/* 821D9C88h case    9:*/		if ( regs.CR[0].eq ) { return 0x821D9D54;  }
		/* 821D9C88h case    9:*/		return 0x821D9C8C;
		  /* 821D9C8Ch */ case   10:  		/* lwz R11, <#[R30 + 36]> */
		/* 821D9C8Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821D9C8Ch case   10:*/		return 0x821D9C90;
		  /* 821D9C90h */ case   11:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D9C90h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D9C90h case   11:*/		return 0x821D9C94;
		  /* 821D9C94h */ case   12:  		/* bc 4, CR0_EQ, 192 */
		/* 821D9C94h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821D9D54;  }
		/* 821D9C94h case   12:*/		return 0x821D9C98;
		  /* 821D9C98h */ case   13:  		/* lwz R11, <#[R30 + 32]> */
		/* 821D9C98h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 821D9C98h case   13:*/		return 0x821D9C9C;
		  /* 821D9C9Ch */ case   14:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D9C9Ch case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D9C9Ch case   14:*/		return 0x821D9CA0;
		  /* 821D9CA0h */ case   15:  		/* addic. R31, R11, -40 */
		/* 821D9CA0h case   15:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821D9CA0h case   15:*/		return 0x821D9CA4;
		  /* 821D9CA4h */ case   16:  		/* bc 12, CR0_EQ, 176 */
		/* 821D9CA4h case   16:*/		if ( regs.CR[0].eq ) { return 0x821D9D54;  }
		/* 821D9CA4h case   16:*/		return 0x821D9CA8;
		  /* 821D9CA8h */ case   17:  		/* lwz R9, <#[R31 + 8]> */
		/* 821D9CA8h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 821D9CA8h case   17:*/		return 0x821D9CAC;
		  /* 821D9CACh */ case   18:  		/* rlwinm R11, R9, 25, 25, 31 */
		/* 821D9CACh case   18:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R9);
		/* 821D9CACh case   18:*/		return 0x821D9CB0;
		  /* 821D9CB0h */ case   19:  		/* cmplwi CR6, R11, 86 */
		/* 821D9CB0h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 821D9CB0h case   19:*/		return 0x821D9CB4;
		  /* 821D9CB4h */ case   20:  		/* bc 12, CR6_EQ, 48 */
		/* 821D9CB4h case   20:*/		if ( regs.CR[6].eq ) { return 0x821D9CE4;  }
		/* 821D9CB4h case   20:*/		return 0x821D9CB8;
		  /* 821D9CB8h */ case   21:  		/* cmplwi CR6, R11, 87 */
		/* 821D9CB8h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 821D9CB8h case   21:*/		return 0x821D9CBC;
		  /* 821D9CBCh */ case   22:  		/* bc 12, CR6_EQ, 40 */
		/* 821D9CBCh case   22:*/		if ( regs.CR[6].eq ) { return 0x821D9CE4;  }
		/* 821D9CBCh case   22:*/		return 0x821D9CC0;
		  /* 821D9CC0h */ case   23:  		/* cmplwi CR6, R11, 89 */
		/* 821D9CC0h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 821D9CC0h case   23:*/		return 0x821D9CC4;
		  /* 821D9CC4h */ case   24:  		/* bc 12, CR6_EQ, 32 */
		/* 821D9CC4h case   24:*/		if ( regs.CR[6].eq ) { return 0x821D9CE4;  }
		/* 821D9CC4h case   24:*/		return 0x821D9CC8;
		  /* 821D9CC8h */ case   25:  		/* cmplwi CR6, R11, 90 */
		/* 821D9CC8h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 821D9CC8h case   25:*/		return 0x821D9CCC;
		  /* 821D9CCCh */ case   26:  		/* bc 12, CR6_EQ, 24 */
		/* 821D9CCCh case   26:*/		if ( regs.CR[6].eq ) { return 0x821D9CE4;  }
		/* 821D9CCCh case   26:*/		return 0x821D9CD0;
		  /* 821D9CD0h */ case   27:  		/* cmplwi CR6, R11, 84 */
		/* 821D9CD0h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 821D9CD0h case   27:*/		return 0x821D9CD4;
		  /* 821D9CD4h */ case   28:  		/* bc 12, CR6_EQ, 16 */
		/* 821D9CD4h case   28:*/		if ( regs.CR[6].eq ) { return 0x821D9CE4;  }
		/* 821D9CD4h case   28:*/		return 0x821D9CD8;
		  /* 821D9CD8h */ case   29:  		/* cmplwi CR6, R11, 85 */
		/* 821D9CD8h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 821D9CD8h case   29:*/		return 0x821D9CDC;
		  /* 821D9CDCh */ case   30:  		/* mr R10, R20 */
		/* 821D9CDCh case   30:*/		regs.R10 = regs.R20;
		/* 821D9CDCh case   30:*/		return 0x821D9CE0;
		  /* 821D9CE0h */ case   31:  		/* bc 4, CR6_EQ, 8 */
		/* 821D9CE0h case   31:*/		if ( !regs.CR[6].eq ) { return 0x821D9CE8;  }
		/* 821D9CE0h case   31:*/		return 0x821D9CE4;
	}
	return 0x821D9CE4;
} // Block from 821D9C64h-821D9CE4h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821D9CE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9CE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9CE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9CE4);
		  /* 821D9CE4h */ case    0:  		/* li R10, 1 */
		/* 821D9CE4h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821D9CE4h case    0:*/		return 0x821D9CE8;
	}
	return 0x821D9CE8;
} // Block from 821D9CE4h-821D9CE8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D9CE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9CE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9CE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9CE8);
		  /* 821D9CE8h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821D9CE8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821D9CE8h case    0:*/		return 0x821D9CEC;
		  /* 821D9CECh */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821D9CECh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821D9CF8;  }
		/* 821D9CECh case    1:*/		return 0x821D9CF0;
		  /* 821D9CF0h */ case    2:  		/* cmplwi CR6, R11, 88 */
		/* 821D9CF0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000058);
		/* 821D9CF0h case    2:*/		return 0x821D9CF4;
		  /* 821D9CF4h */ case    3:  		/* bc 4, CR6_EQ, 96 */
		/* 821D9CF4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821D9D54;  }
		/* 821D9CF4h case    3:*/		return 0x821D9CF8;
	}
	return 0x821D9CF8;
} // Block from 821D9CE8h-821D9CF8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821D9CF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9CF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9CF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9CF8);
		  /* 821D9CF8h */ case    0:  		/* oris R11, R9, 8192 */
		/* 821D9CF8h case    0:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R9,0x2000);
		/* 821D9CF8h case    0:*/		return 0x821D9CFC;
		  /* 821D9CFCh */ case    1:  		/* stw R11, <#[R31 + 8]> */
		/* 821D9CFCh case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D9CFCh case    1:*/		return 0x821D9D00;
		  /* 821D9D00h */ case    2:  		/* lwz R11, <#[R26]> */
		/* 821D9D00h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821D9D00h case    2:*/		return 0x821D9D04;
		  /* 821D9D04h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D9D04h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D9D04h case    3:*/		return 0x821D9D08;
		  /* 821D9D08h */ case    4:  		/* bc 4, CR0_EQ, 40 */
		/* 821D9D08h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821D9D30;  }
		/* 821D9D08h case    4:*/		return 0x821D9D0C;
		  /* 821D9D0Ch */ case    5:  		/* lwz R11, <#[R28]> */
		/* 821D9D0Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821D9D0Ch case    5:*/		return 0x821D9D10;
		  /* 821D9D10h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D9D10h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D9D10h case    6:*/		return 0x821D9D14;
		  /* 821D9D14h */ case    7:  		/* addic. R3, R11, -4 */
		/* 821D9D14h case    7:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821D9D14h case    7:*/		return 0x821D9D18;
		  /* 821D9D18h */ case    8:  		/* bc 12, CR0_EQ, 24 */
		/* 821D9D18h case    8:*/		if ( regs.CR[0].eq ) { return 0x821D9D30;  }
		/* 821D9D18h case    8:*/		return 0x821D9D1C;
		  /* 821D9D1Ch */ case    9:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D9D1Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D9D1Ch case    9:*/		return 0x821D9D20;
		  /* 821D9D20h */ case   10:  		/* lwz R10, <#[R3 + 12]> */
		/* 821D9D20h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821D9D20h case   10:*/		return 0x821D9D24;
		  /* 821D9D24h */ case   11:  		/* addi R11, R11, 1 */
		/* 821D9D24h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821D9D24h case   11:*/		return 0x821D9D28;
		  /* 821D9D28h */ case   12:  		/* cmplw CR6, R11, R10 */
		/* 821D9D28h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821D9D28h case   12:*/		return 0x821D9D2C;
		  /* 821D9D2Ch */ case   13:  		/* bc 4, CR6_GT, 16 */
		/* 821D9D2Ch case   13:*/		if ( !regs.CR[6].gt ) { return 0x821D9D3C;  }
		/* 821D9D2Ch case   13:*/		return 0x821D9D30;
	}
	return 0x821D9D30;
} // Block from 821D9CF8h-821D9D30h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821D9D30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9D30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9D30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9D30);
		  /* 821D9D30h */ case    0:  		/* li R4, 1 */
		/* 821D9D30h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D9D30h case    0:*/		return 0x821D9D34;
		  /* 821D9D34h */ case    1:  		/* mr R3, R28 */
		/* 821D9D34h case    1:*/		regs.R3 = regs.R28;
		/* 821D9D34h case    1:*/		return 0x821D9D38;
		  /* 821D9D38h */ case    2:  		/* bl -314480 */
		/* 821D9D38h case    2:*/		regs.LR = 0x821D9D3C; return 0x8218D0C8;
		/* 821D9D38h case    2:*/		return 0x821D9D3C;
	}
	return 0x821D9D3C;
} // Block from 821D9D30h-821D9D3Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D9D3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9D3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9D3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9D3C);
		  /* 821D9D3Ch */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D9D3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D9D3Ch case    0:*/		return 0x821D9D40;
		  /* 821D9D40h */ case    1:  		/* addi R10, R11, 4 */
		/* 821D9D40h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821D9D40h case    1:*/		return 0x821D9D44;
		  /* 821D9D44h */ case    2:  		/* addi R9, R11, 1 */
		/* 821D9D44h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821D9D44h case    2:*/		return 0x821D9D48;
		  /* 821D9D48h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821D9D48h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821D9D48h case    3:*/		return 0x821D9D4C;
		  /* 821D9D4Ch */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821D9D4Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821D9D4Ch case    4:*/		return 0x821D9D50;
		  /* 821D9D50h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821D9D50h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821D9D50h case    5:*/		return 0x821D9D54;
	}
	return 0x821D9D54;
} // Block from 821D9D3Ch-821D9D54h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D9D54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9D54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9D54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9D54);
		  /* 821D9D54h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821D9D54h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821D9D54h case    0:*/		return 0x821D9D58;
		  /* 821D9D58h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821D9D58h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821D9D58h case    1:*/		return 0x821D9D5C;
		  /* 821D9D5Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D9D5Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D9D5Ch case    2:*/		return 0x821D9D60;
		  /* 821D9D60h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821D9D60h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D9D70;  }
		/* 821D9D60h case    3:*/		return 0x821D9D64;
		  /* 821D9D64h */ case    4:  		/* mr R30, R11 */
		/* 821D9D64h case    4:*/		regs.R30 = regs.R11;
		/* 821D9D64h case    4:*/		return 0x821D9D68;
		  /* 821D9D68h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821D9D68h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821D9D68h case    5:*/		return 0x821D9D6C;
		  /* 821D9D6Ch */ case    6:  		/* bc 4, CR6_EQ, -236 */
		/* 821D9D6Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821D9C80;  }
		/* 821D9D6Ch case    6:*/		return 0x821D9D70;
	}
	return 0x821D9D70;
} // Block from 821D9D54h-821D9D70h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821D9D70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9D70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9D70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9D70);
		  /* 821D9D70h */ case    0:  		/* lwz R11, <#[R26]> */
		/* 821D9D70h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821D9D70h case    0:*/		return 0x821D9D74;
		  /* 821D9D74h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821D9D74h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821D9D74h case    1:*/		return 0x821D9D78;
		  /* 821D9D78h */ case    2:  		/* bc 4, CR0_EQ, 460 */
		/* 821D9D78h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821D9F44;  }
		/* 821D9D78h case    2:*/		return 0x821D9D7C;
		  /* 821D9D7Ch */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821D9D7Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821D9D7Ch case    3:*/		return 0x821D9D80;
		  /* 821D9D80h */ case    4:  		/* bc 12, CR0_EQ, 452 */
		/* 821D9D80h case    4:*/		if ( regs.CR[0].eq ) { return 0x821D9F44;  }
		/* 821D9D80h case    4:*/		return 0x821D9D84;
		  /* 821D9D84h */ case    5:  		/* lwz R11, <#[R28]> */
		/* 821D9D84h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821D9D84h case    5:*/		return 0x821D9D88;
		  /* 821D9D88h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D9D88h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D9D88h case    6:*/		return 0x821D9D8C;
		  /* 821D9D8Ch */ case    7:  		/* addi R4, R11, -4 */
		/* 821D9D8Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821D9D8Ch case    7:*/		return 0x821D9D90;
		  /* 821D9D90h */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 821D9D90h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821D9D90h case    8:*/		return 0x821D9D94;
		  /* 821D9D94h */ case    9:  		/* addi R10, R11, 3 */
		/* 821D9D94h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821D9D94h case    9:*/		return 0x821D9D98;
		  /* 821D9D98h */ case   10:  		/* addic. R11, R11, -1 */
		/* 821D9D98h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821D9D98h case   10:*/		return 0x821D9D9C;
		  /* 821D9D9Ch */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821D9D9Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821D9D9Ch case   11:*/		return 0x821D9DA0;
		  /* 821D9DA0h */ case   12:  		/* lwzx R29, <#[R10 + R4]> */
		/* 821D9DA0h case   12:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821D9DA0h case   12:*/		return 0x821D9DA4;
		  /* 821D9DA4h */ case   13:  		/* stw R11, <#[R4 + 8]> */
		/* 821D9DA4h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821D9DA4h case   13:*/		return 0x821D9DA8;
		  /* 821D9DA8h */ case   14:  		/* bc 4, CR0_EQ, 60 */
		/* 821D9DA8h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821D9DE4;  }
		/* 821D9DA8h case   14:*/		return 0x821D9DAC;
		  /* 821D9DACh */ case   15:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821D9DACh case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821D9DACh case   15:*/		return 0x821D9DB0;
		  /* 821D9DB0h */ case   16:  		/* mr R3, R28 */
		/* 821D9DB0h case   16:*/		regs.R3 = regs.R28;
		/* 821D9DB0h case   16:*/		return 0x821D9DB4;
		  /* 821D9DB4h */ case   17:  		/* lwz R10, <#[R11 + 4]> */
		/* 821D9DB4h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821D9DB4h case   17:*/		return 0x821D9DB8;
		  /* 821D9DB8h */ case   18:  		/* lwz R9, <#[R11]> */
		/* 821D9DB8h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821D9DB8h case   18:*/		return 0x821D9DBC;
		  /* 821D9DBCh */ case   19:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821D9DBCh case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821D9DBCh case   19:*/		return 0x821D9DC0;
		  /* 821D9DC0h */ case   20:  		/* stw R9, <#[R10]> */
		/* 821D9DC0h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821D9DC0h case   20:*/		return 0x821D9DC4;
		  /* 821D9DC4h */ case   21:  		/* lwz R10, <#[R11 + 4]> */
		/* 821D9DC4h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821D9DC4h case   21:*/		return 0x821D9DC8;
		  /* 821D9DC8h */ case   22:  		/* lwz R11, <#[R11]> */
		/* 821D9DC8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821D9DC8h case   22:*/		return 0x821D9DCC;
		  /* 821D9DCCh */ case   23:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D9DCCh case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D9DCCh case   23:*/		return 0x821D9DD0;
		  /* 821D9DD0h */ case   24:  		/* stw R10, <#[R11]> */
		/* 821D9DD0h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821D9DD0h case   24:*/		return 0x821D9DD4;
		  /* 821D9DD4h */ case   25:  		/* lwz R11, <#[R4 + 12]> */
		/* 821D9DD4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821D9DD4h case   25:*/		return 0x821D9DD8;
		  /* 821D9DD8h */ case   26:  		/* addi R11, R11, 4 */
		/* 821D9DD8h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821D9DD8h case   26:*/		return 0x821D9DDC;
		  /* 821D9DDCh */ case   27:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821D9DDCh case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821D9DDCh case   27:*/		return 0x821D9DE0;
		  /* 821D9DE0h */ case   28:  		/* bl -557016 */
		/* 821D9DE0h case   28:*/		regs.LR = 0x821D9DE4; return 0x82151E08;
		/* 821D9DE0h case   28:*/		return 0x821D9DE4;
	}
	return 0x821D9DE4;
} // Block from 821D9D70h-821D9DE4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821D9DE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9DE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9DE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9DE4);
		  /* 821D9DE4h */ case    0:  		/* lwz R11, <#[R29 + 28]> */
		/* 821D9DE4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821D9DE4h case    0:*/		return 0x821D9DE8;
		  /* 821D9DE8h */ case    1:  		/* lwz R30, <#[R11 + 8]> */
		/* 821D9DE8h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 821D9DE8h case    1:*/		return 0x821D9DEC;
		  /* 821D9DECh */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 821D9DECh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D9DECh case    2:*/		return 0x821D9DF0;
		  /* 821D9DF0h */ case    3:  		/* bc 12, CR6_EQ, 196 */
		/* 821D9DF0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821D9EB4;  }
		/* 821D9DF0h case    3:*/		return 0x821D9DF4;
		  /* 821D9DF4h */ case    4:  		/* lwz R11, <#[R30 + 4]> */
		/* 821D9DF4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821D9DF4h case    4:*/		return 0x821D9DF8;
		  /* 821D9DF8h */ case    5:  		/* lwz R10, <#[R11 + 48]> */
		/* 821D9DF8h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821D9DF8h case    5:*/		return 0x821D9DFC;
		  /* 821D9DFCh */ case    6:  		/* rlwinm. R10, R10, 2, 31, 31 */
		/* 821D9DFCh case    6:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R10,regs.R10);
		/* 821D9DFCh case    6:*/		return 0x821D9E00;
		  /* 821D9E00h */ case    7:  		/* bc 12, CR0_EQ, 172 */
		/* 821D9E00h case    7:*/		if ( regs.CR[0].eq ) { return 0x821D9EAC;  }
		/* 821D9E00h case    7:*/		return 0x821D9E04;
		  /* 821D9E04h */ case    8:  		/* lwz R10, <#[R11 + 36]> */
		/* 821D9E04h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 821D9E04h case    8:*/		return 0x821D9E08;
		  /* 821D9E08h */ case    9:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821D9E08h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821D9E08h case    9:*/		return 0x821D9E0C;
		  /* 821D9E0Ch */ case   10:  		/* bc 4, CR0_EQ, 160 */
		/* 821D9E0Ch case   10:*/		if ( !regs.CR[0].eq ) { return 0x821D9EAC;  }
		/* 821D9E0Ch case   10:*/		return 0x821D9E10;
		  /* 821D9E10h */ case   11:  		/* lwz R11, <#[R11 + 32]> */
		/* 821D9E10h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 821D9E10h case   11:*/		return 0x821D9E14;
		  /* 821D9E14h */ case   12:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D9E14h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D9E14h case   12:*/		return 0x821D9E18;
		  /* 821D9E18h */ case   13:  		/* addic. R31, R11, -40 */
		/* 821D9E18h case   13:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821D9E18h case   13:*/		return 0x821D9E1C;
		  /* 821D9E1Ch */ case   14:  		/* bc 12, CR0_EQ, 144 */
		/* 821D9E1Ch case   14:*/		if ( regs.CR[0].eq ) { return 0x821D9EAC;  }
		/* 821D9E1Ch case   14:*/		return 0x821D9E20;
		  /* 821D9E20h */ case   15:  		/* lwz R10, <#[R31 + 8]> */
		/* 821D9E20h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821D9E20h case   15:*/		return 0x821D9E24;
		  /* 821D9E24h */ case   16:  		/* rlwinm R11, R10, 25, 25, 31 */
		/* 821D9E24h case   16:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R10);
		/* 821D9E24h case   16:*/		return 0x821D9E28;
		  /* 821D9E28h */ case   17:  		/* cmplwi CR6, R11, 83 */
		/* 821D9E28h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000053);
		/* 821D9E28h case   17:*/		return 0x821D9E2C;
		  /* 821D9E2Ch */ case   18:  		/* bc 12, CR6_LT, 16 */
		/* 821D9E2Ch case   18:*/		if ( regs.CR[6].lt ) { return 0x821D9E3C;  }
		/* 821D9E2Ch case   18:*/		return 0x821D9E30;
		  /* 821D9E30h */ case   19:  		/* cmplwi CR6, R11, 95 */
		/* 821D9E30h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005F);
		/* 821D9E30h case   19:*/		return 0x821D9E34;
		  /* 821D9E34h */ case   20:  		/* li R11, 1 */
		/* 821D9E34h case   20:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821D9E34h case   20:*/		return 0x821D9E38;
		  /* 821D9E38h */ case   21:  		/* bc 4, CR6_GT, 8 */
		/* 821D9E38h case   21:*/		if ( !regs.CR[6].gt ) { return 0x821D9E40;  }
		/* 821D9E38h case   21:*/		return 0x821D9E3C;
	}
	return 0x821D9E3C;
} // Block from 821D9DE4h-821D9E3Ch (22 instructions)

//////////////////////////////////////////////////////
// Block at 821D9E3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9E3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9E3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9E3C);
		  /* 821D9E3Ch */ case    0:  		/* mr R11, R20 */
		/* 821D9E3Ch case    0:*/		regs.R11 = regs.R20;
		/* 821D9E3Ch case    0:*/		return 0x821D9E40;
	}
	return 0x821D9E40;
} // Block from 821D9E3Ch-821D9E40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821D9E40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9E40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9E40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9E40);
		  /* 821D9E40h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821D9E40h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821D9E40h case    0:*/		return 0x821D9E44;
		  /* 821D9E44h */ case    1:  		/* bc 12, CR0_EQ, 104 */
		/* 821D9E44h case    1:*/		if ( regs.CR[0].eq ) { return 0x821D9EAC;  }
		/* 821D9E44h case    1:*/		return 0x821D9E48;
		  /* 821D9E48h */ case    2:  		/* rlwinm. R11, R10, 0, 2, 2 */
		/* 821D9E48h case    2:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R11,regs.R10);
		/* 821D9E48h case    2:*/		return 0x821D9E4C;
		  /* 821D9E4Ch */ case    3:  		/* bc 4, CR0_EQ, 96 */
		/* 821D9E4Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821D9EAC;  }
		/* 821D9E4Ch case    3:*/		return 0x821D9E50;
		  /* 821D9E50h */ case    4:  		/* oris R11, R10, 8192 */
		/* 821D9E50h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R10,0x2000);
		/* 821D9E50h case    4:*/		return 0x821D9E54;
		  /* 821D9E54h */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 821D9E54h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D9E54h case    5:*/		return 0x821D9E58;
		  /* 821D9E58h */ case    6:  		/* lwz R11, <#[R26]> */
		/* 821D9E58h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821D9E58h case    6:*/		return 0x821D9E5C;
		  /* 821D9E5Ch */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D9E5Ch case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D9E5Ch case    7:*/		return 0x821D9E60;
		  /* 821D9E60h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 821D9E60h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821D9E88;  }
		/* 821D9E60h case    8:*/		return 0x821D9E64;
		  /* 821D9E64h */ case    9:  		/* lwz R11, <#[R28]> */
		/* 821D9E64h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821D9E64h case    9:*/		return 0x821D9E68;
		  /* 821D9E68h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D9E68h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D9E68h case   10:*/		return 0x821D9E6C;
		  /* 821D9E6Ch */ case   11:  		/* addic. R3, R11, -4 */
		/* 821D9E6Ch case   11:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821D9E6Ch case   11:*/		return 0x821D9E70;
		  /* 821D9E70h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 821D9E70h case   12:*/		if ( regs.CR[0].eq ) { return 0x821D9E88;  }
		/* 821D9E70h case   12:*/		return 0x821D9E74;
		  /* 821D9E74h */ case   13:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D9E74h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D9E74h case   13:*/		return 0x821D9E78;
		  /* 821D9E78h */ case   14:  		/* lwz R10, <#[R3 + 12]> */
		/* 821D9E78h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821D9E78h case   14:*/		return 0x821D9E7C;
		  /* 821D9E7Ch */ case   15:  		/* addi R11, R11, 1 */
		/* 821D9E7Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821D9E7Ch case   15:*/		return 0x821D9E80;
		  /* 821D9E80h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 821D9E80h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821D9E80h case   16:*/		return 0x821D9E84;
		  /* 821D9E84h */ case   17:  		/* bc 4, CR6_GT, 16 */
		/* 821D9E84h case   17:*/		if ( !regs.CR[6].gt ) { return 0x821D9E94;  }
		/* 821D9E84h case   17:*/		return 0x821D9E88;
	}
	return 0x821D9E88;
} // Block from 821D9E40h-821D9E88h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821D9E88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9E88);
		  /* 821D9E88h */ case    0:  		/* li R4, 1 */
		/* 821D9E88h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D9E88h case    0:*/		return 0x821D9E8C;
		  /* 821D9E8Ch */ case    1:  		/* mr R3, R28 */
		/* 821D9E8Ch case    1:*/		regs.R3 = regs.R28;
		/* 821D9E8Ch case    1:*/		return 0x821D9E90;
		  /* 821D9E90h */ case    2:  		/* bl -314824 */
		/* 821D9E90h case    2:*/		regs.LR = 0x821D9E94; return 0x8218D0C8;
		/* 821D9E90h case    2:*/		return 0x821D9E94;
	}
	return 0x821D9E94;
} // Block from 821D9E88h-821D9E94h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D9E94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9E94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9E94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9E94);
		  /* 821D9E94h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D9E94h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D9E94h case    0:*/		return 0x821D9E98;
		  /* 821D9E98h */ case    1:  		/* addi R10, R11, 4 */
		/* 821D9E98h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821D9E98h case    1:*/		return 0x821D9E9C;
		  /* 821D9E9Ch */ case    2:  		/* addi R9, R11, 1 */
		/* 821D9E9Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821D9E9Ch case    2:*/		return 0x821D9EA0;
		  /* 821D9EA0h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821D9EA0h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821D9EA0h case    3:*/		return 0x821D9EA4;
		  /* 821D9EA4h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821D9EA4h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821D9EA4h case    4:*/		return 0x821D9EA8;
		  /* 821D9EA8h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821D9EA8h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821D9EA8h case    5:*/		return 0x821D9EAC;
	}
	return 0x821D9EAC;
} // Block from 821D9E94h-821D9EACh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D9EACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9EAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9EAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9EAC);
		  /* 821D9EACh */ case    0:  		/* lwz R30, <#[R30 + 12]> */
		/* 821D9EACh case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x0000000C) );
		/* 821D9EACh case    0:*/		return 0x821D9EB0;
		  /* 821D9EB0h */ case    1:  		/* b -196 */
		/* 821D9EB0h case    1:*/		return 0x821D9DEC;
		/* 821D9EB0h case    1:*/		return 0x821D9EB4;
	}
	return 0x821D9EB4;
} // Block from 821D9EACh-821D9EB4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D9EB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9EB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9EB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9EB4);
		  /* 821D9EB4h */ case    0:  		/* lwz R30, <#[R29]> */
		/* 821D9EB4h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821D9EB4h case    0:*/		return 0x821D9EB8;
		  /* 821D9EB8h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 821D9EB8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821D9EB8h case    1:*/		return 0x821D9EBC;
		  /* 821D9EBCh */ case    2:  		/* bc 12, CR6_EQ, -332 */
		/* 821D9EBCh case    2:*/		if ( regs.CR[6].eq ) { return 0x821D9D70;  }
		/* 821D9EBCh case    2:*/		return 0x821D9EC0;
		  /* 821D9EC0h */ case    3:  		/* lwz R31, <#[R30 + 12]> */
		/* 821D9EC0h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x0000000C) );
		/* 821D9EC0h case    3:*/		return 0x821D9EC4;
		  /* 821D9EC4h */ case    4:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D9EC4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D9EC4h case    4:*/		return 0x821D9EC8;
		  /* 821D9EC8h */ case    5:  		/* rlwinm. R10, R11, 0, 2, 2 */
		/* 821D9EC8h case    5:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R10,regs.R11);
		/* 821D9EC8h case    5:*/		return 0x821D9ECC;
		  /* 821D9ECCh */ case    6:  		/* bc 4, CR0_EQ, 112 */
		/* 821D9ECCh case    6:*/		if ( !regs.CR[0].eq ) { return 0x821D9F3C;  }
		/* 821D9ECCh case    6:*/		return 0x821D9ED0;
		  /* 821D9ED0h */ case    7:  		/* lwz R10, <#[R31 + 28]> */
		/* 821D9ED0h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 821D9ED0h case    7:*/		return 0x821D9ED4;
		  /* 821D9ED4h */ case    8:  		/* lwz R10, <#[R10 + 48]> */
		/* 821D9ED4h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000030) );
		/* 821D9ED4h case    8:*/		return 0x821D9ED8;
		  /* 821D9ED8h */ case    9:  		/* rlwinm. R10, R10, 2, 31, 31 */
		/* 821D9ED8h case    9:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R10,regs.R10);
		/* 821D9ED8h case    9:*/		return 0x821D9EDC;
		  /* 821D9EDCh */ case   10:  		/* bc 12, CR0_EQ, 96 */
		/* 821D9EDCh case   10:*/		if ( regs.CR[0].eq ) { return 0x821D9F3C;  }
		/* 821D9EDCh case   10:*/		return 0x821D9EE0;
		  /* 821D9EE0h */ case   11:  		/* oris R11, R11, 8192 */
		/* 821D9EE0h case   11:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2000);
		/* 821D9EE0h case   11:*/		return 0x821D9EE4;
		  /* 821D9EE4h */ case   12:  		/* stw R11, <#[R31 + 8]> */
		/* 821D9EE4h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D9EE4h case   12:*/		return 0x821D9EE8;
		  /* 821D9EE8h */ case   13:  		/* lwz R11, <#[R26]> */
		/* 821D9EE8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821D9EE8h case   13:*/		return 0x821D9EEC;
		  /* 821D9EECh */ case   14:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D9EECh case   14:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D9EECh case   14:*/		return 0x821D9EF0;
		  /* 821D9EF0h */ case   15:  		/* bc 4, CR0_EQ, 40 */
		/* 821D9EF0h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821D9F18;  }
		/* 821D9EF0h case   15:*/		return 0x821D9EF4;
		  /* 821D9EF4h */ case   16:  		/* lwz R11, <#[R28]> */
		/* 821D9EF4h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821D9EF4h case   16:*/		return 0x821D9EF8;
		  /* 821D9EF8h */ case   17:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821D9EF8h case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821D9EF8h case   17:*/		return 0x821D9EFC;
		  /* 821D9EFCh */ case   18:  		/* addic. R3, R11, -4 */
		/* 821D9EFCh case   18:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821D9EFCh case   18:*/		return 0x821D9F00;
		  /* 821D9F00h */ case   19:  		/* bc 12, CR0_EQ, 24 */
		/* 821D9F00h case   19:*/		if ( regs.CR[0].eq ) { return 0x821D9F18;  }
		/* 821D9F00h case   19:*/		return 0x821D9F04;
		  /* 821D9F04h */ case   20:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D9F04h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D9F04h case   20:*/		return 0x821D9F08;
		  /* 821D9F08h */ case   21:  		/* lwz R10, <#[R3 + 12]> */
		/* 821D9F08h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821D9F08h case   21:*/		return 0x821D9F0C;
		  /* 821D9F0Ch */ case   22:  		/* addi R11, R11, 1 */
		/* 821D9F0Ch case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821D9F0Ch case   22:*/		return 0x821D9F10;
		  /* 821D9F10h */ case   23:  		/* cmplw CR6, R11, R10 */
		/* 821D9F10h case   23:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821D9F10h case   23:*/		return 0x821D9F14;
		  /* 821D9F14h */ case   24:  		/* bc 4, CR6_GT, 16 */
		/* 821D9F14h case   24:*/		if ( !regs.CR[6].gt ) { return 0x821D9F24;  }
		/* 821D9F14h case   24:*/		return 0x821D9F18;
	}
	return 0x821D9F18;
} // Block from 821D9EB4h-821D9F18h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821D9F18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9F18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9F18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9F18);
		  /* 821D9F18h */ case    0:  		/* li R4, 1 */
		/* 821D9F18h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821D9F18h case    0:*/		return 0x821D9F1C;
		  /* 821D9F1Ch */ case    1:  		/* mr R3, R28 */
		/* 821D9F1Ch case    1:*/		regs.R3 = regs.R28;
		/* 821D9F1Ch case    1:*/		return 0x821D9F20;
		  /* 821D9F20h */ case    2:  		/* bl -314968 */
		/* 821D9F20h case    2:*/		regs.LR = 0x821D9F24; return 0x8218D0C8;
		/* 821D9F20h case    2:*/		return 0x821D9F24;
	}
	return 0x821D9F24;
} // Block from 821D9F18h-821D9F24h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D9F24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9F24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9F24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9F24);
		  /* 821D9F24h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821D9F24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821D9F24h case    0:*/		return 0x821D9F28;
		  /* 821D9F28h */ case    1:  		/* addi R10, R11, 4 */
		/* 821D9F28h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821D9F28h case    1:*/		return 0x821D9F2C;
		  /* 821D9F2Ch */ case    2:  		/* addi R9, R11, 1 */
		/* 821D9F2Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821D9F2Ch case    2:*/		return 0x821D9F30;
		  /* 821D9F30h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821D9F30h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821D9F30h case    3:*/		return 0x821D9F34;
		  /* 821D9F34h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821D9F34h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821D9F34h case    4:*/		return 0x821D9F38;
		  /* 821D9F38h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821D9F38h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821D9F38h case    5:*/		return 0x821D9F3C;
	}
	return 0x821D9F3C;
} // Block from 821D9F24h-821D9F3Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821D9F3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9F3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9F3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9F3C);
		  /* 821D9F3Ch */ case    0:  		/* lwz R30, <#[R30 + 4]> */
		/* 821D9F3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000004) );
		/* 821D9F3Ch case    0:*/		return 0x821D9F40;
		  /* 821D9F40h */ case    1:  		/* b -136 */
		/* 821D9F40h case    1:*/		return 0x821D9EB8;
		/* 821D9F40h case    1:*/		return 0x821D9F44;
	}
	return 0x821D9F44;
} // Block from 821D9F3Ch-821D9F44h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D9F44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9F44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9F44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9F44);
		  /* 821D9F44h */ case    0:  		/* lwz R10, <#[R22 + 976]> */
		/* 821D9F44h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x000003D0) );
		/* 821D9F44h case    0:*/		return 0x821D9F48;
		  /* 821D9F48h */ case    1:  		/* rlwinm. R9, R27, 0, 24, 31 */
		/* 821D9F48h case    1:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R9,regs.R27);
		/* 821D9F48h case    1:*/		return 0x821D9F4C;
		  /* 821D9F4Ch */ case    2:  		/* stw R10, <#[R28]> */
		/* 821D9F4Ch case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821D9F4Ch case    2:*/		return 0x821D9F50;
		  /* 821D9F50h */ case    3:  		/* addi R11, R22, 972 */
		/* 821D9F50h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R22,0x3CC);
		/* 821D9F50h case    3:*/		return 0x821D9F54;
		  /* 821D9F54h */ case    4:  		/* stw R28, <#[R22 + 976]> */
		/* 821D9F54h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R22 + 0x000003D0) );
		/* 821D9F54h case    4:*/		return 0x821D9F58;
		  /* 821D9F58h */ case    5:  		/* bc 4, CR0_EQ, 12 */
		/* 821D9F58h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821D9F64;  }
		/* 821D9F58h case    5:*/		return 0x821D9F5C;
		  /* 821D9F5Ch */ case    6:  		/* cmplwi CR6, R25, 1 */
		/* 821D9F5Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000001);
		/* 821D9F5Ch case    6:*/		return 0x821D9F60;
		  /* 821D9F60h */ case    7:  		/* bc 12, CR6_EQ, 376 */
		/* 821D9F60h case    7:*/		if ( regs.CR[6].eq ) { return 0x821DA0D8;  }
		/* 821D9F60h case    7:*/		return 0x821D9F64;
	}
	return 0x821D9F64;
} // Block from 821D9F44h-821D9F64h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821D9F64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9F64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9F64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9F64);
		  /* 821D9F64h */ case    0:  		/* lwz R10, <#[R22 + 40]> */
		/* 821D9F64h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x00000028) );
		/* 821D9F64h case    0:*/		return 0x821D9F68;
		  /* 821D9F68h */ case    1:  		/* mr R28, R20 */
		/* 821D9F68h case    1:*/		regs.R28 = regs.R20;
		/* 821D9F68h case    1:*/		return 0x821D9F6C;
		  /* 821D9F6Ch */ case    2:  		/* lwz R11, <#[R22 + 4]> */
		/* 821D9F6Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821D9F6Ch case    2:*/		return 0x821D9F70;
		  /* 821D9F70h */ case    3:  		/* ori R9, R10, 4096 */
		/* 821D9F70h case    3:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R10,0x1000);
		/* 821D9F70h case    3:*/		return 0x821D9F74;
		  /* 821D9F74h */ case    4:  		/* rlwinm. R8, R11, 0, 31, 31 */
		/* 821D9F74h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R11);
		/* 821D9F74h case    4:*/		return 0x821D9F78;
		  /* 821D9F78h */ case    5:  		/* rlwinm R27, R10, 20, 31, 31 */
		/* 821D9F78h case    5:*/		cpu::op::rlwinm<0,20,31,31>(regs,&regs.R27,regs.R10);
		/* 821D9F78h case    5:*/		return 0x821D9F7C;
		  /* 821D9F7Ch */ case    6:  		/* stw R9, <#[R22 + 40]> */
		/* 821D9F7Ch case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R22 + 0x00000028) );
		/* 821D9F7Ch case    6:*/		return 0x821D9F80;
		  /* 821D9F80h */ case    7:  		/* bc 4, CR0_EQ, 312 */
		/* 821D9F80h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821DA0B8;  }
		/* 821D9F80h case    7:*/		return 0x821D9F84;
		  /* 821D9F84h */ case    8:  		/* mr R29, R11 */
		/* 821D9F84h case    8:*/		regs.R29 = regs.R11;
		/* 821D9F84h case    8:*/		return 0x821D9F88;
		  /* 821D9F88h */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 821D9F88h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821D9F88h case    9:*/		return 0x821D9F8C;
		  /* 821D9F8Ch */ case   10:  		/* bc 12, CR0_EQ, 300 */
		/* 821D9F8Ch case   10:*/		if ( regs.CR[0].eq ) { return 0x821DA0B8;  }
		/* 821D9F8Ch case   10:*/		return 0x821D9F90;
		  /* 821D9F90h */ case   11:  		/* lwz R11, <#[R29 + 48]> */
		/* 821D9F90h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 821D9F90h case   11:*/		return 0x821D9F94;
		  /* 821D9F94h */ case   12:  		/* rlwinm. R10, R11, 2, 31, 31 */
		/* 821D9F94h case   12:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R10,regs.R11);
		/* 821D9F94h case   12:*/		return 0x821D9F98;
		  /* 821D9F98h */ case   13:  		/* bc 12, CR0_EQ, 260 */
		/* 821D9F98h case   13:*/		if ( regs.CR[0].eq ) { return 0x821DA09C;  }
		/* 821D9F98h case   13:*/		return 0x821D9F9C;
		  /* 821D9F9Ch */ case   14:  		/* lwz R10, <#[R29 + 36]> */
		/* 821D9F9Ch case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000024) );
		/* 821D9F9Ch case   14:*/		return 0x821D9FA0;
		  /* 821D9FA0h */ case   15:  		/* rlwinm R11, R11, 0, 2, 0 */
		/* 821D9FA0h case   15:*/		cpu::op::rlwinm<0,0,2,0>(regs,&regs.R11,regs.R11);
		/* 821D9FA0h case   15:*/		return 0x821D9FA4;
		  /* 821D9FA4h */ case   16:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821D9FA4h case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821D9FA4h case   16:*/		return 0x821D9FA8;
		  /* 821D9FA8h */ case   17:  		/* stw R11, <#[R29 + 48]> */
		/* 821D9FA8h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 821D9FA8h case   17:*/		return 0x821D9FAC;
		  /* 821D9FACh */ case   18:  		/* bc 12, CR0_EQ, 40 */
		/* 821D9FACh case   18:*/		if ( regs.CR[0].eq ) { return 0x821D9FD4;  }
		/* 821D9FACh case   18:*/		return 0x821D9FB0;
		  /* 821D9FB0h */ case   19:  		/* lwz R11, <#[R29 + 28]> */
		/* 821D9FB0h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821D9FB0h case   19:*/		return 0x821D9FB4;
		  /* 821D9FB4h */ case   20:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D9FB4h case   20:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D9FB4h case   20:*/		return 0x821D9FB8;
		  /* 821D9FB8h */ case   21:  		/* bc 12, CR0_EQ, 16 */
		/* 821D9FB8h case   21:*/		if ( regs.CR[0].eq ) { return 0x821D9FC8;  }
		/* 821D9FB8h case   21:*/		return 0x821D9FBC;
		  /* 821D9FBCh */ case   22:  		/* lwz R11, <#[R29 + 20]> */
		/* 821D9FBCh case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 821D9FBCh case   22:*/		return 0x821D9FC0;
		  /* 821D9FC0h */ case   23:  		/* addi R30, R29, 16 */
		/* 821D9FC0h case   23:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x10);
		/* 821D9FC0h case   23:*/		return 0x821D9FC4;
		  /* 821D9FC4h */ case   24:  		/* b 24 */
		/* 821D9FC4h case   24:*/		return 0x821D9FDC;
		/* 821D9FC4h case   24:*/		return 0x821D9FC8;
	}
	return 0x821D9FC8;
} // Block from 821D9F64h-821D9FC8h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821D9FC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9FC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9FC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9FC8);
		  /* 821D9FC8h */ case    0:  		/* lwz R11, <#[R29 + 28]> */
		/* 821D9FC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821D9FC8h case    0:*/		return 0x821D9FCC;
		  /* 821D9FCCh */ case    1:  		/* addi R30, R29, 24 */
		/* 821D9FCCh case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x18);
		/* 821D9FCCh case    1:*/		return 0x821D9FD0;
		  /* 821D9FD0h */ case    2:  		/* b 12 */
		/* 821D9FD0h case    2:*/		return 0x821D9FDC;
		/* 821D9FD0h case    2:*/		return 0x821D9FD4;
	}
	return 0x821D9FD4;
} // Block from 821D9FC8h-821D9FD4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821D9FD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9FD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9FD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9FD4);
		  /* 821D9FD4h */ case    0:  		/* lwz R11, <#[R29 + 36]> */
		/* 821D9FD4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 821D9FD4h case    0:*/		return 0x821D9FD8;
		  /* 821D9FD8h */ case    1:  		/* addi R30, R29, 32 */
		/* 821D9FD8h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x20);
		/* 821D9FD8h case    1:*/		return 0x821D9FDC;
	}
	return 0x821D9FDC;
} // Block from 821D9FD4h-821D9FDCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821D9FDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821D9FDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821D9FDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821D9FDC);
		  /* 821D9FDCh */ case    0:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821D9FDCh case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821D9FDCh case    0:*/		return 0x821D9FE0;
		  /* 821D9FE0h */ case    1:  		/* bc 12, CR0_EQ, 168 */
		/* 821D9FE0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DA088;  }
		/* 821D9FE0h case    1:*/		return 0x821D9FE4;
		  /* 821D9FE4h */ case    2:  		/* mr R31, R20 */
		/* 821D9FE4h case    2:*/		regs.R31 = regs.R20;
		/* 821D9FE4h case    2:*/		return 0x821D9FE8;
		  /* 821D9FE8h */ case    3:  		/* b 172 */
		/* 821D9FE8h case    3:*/		return 0x821DA094;
		/* 821D9FE8h case    3:*/		return 0x821D9FEC;
		  /* 821D9FECh */ case    4:  		/* lwz R11, <#[R31 + 8]> */
		/* 821D9FECh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821D9FECh case    4:*/		return 0x821D9FF0;
		  /* 821D9FF0h */ case    5:  		/* rlwinm. R10, R11, 0, 2, 2 */
		/* 821D9FF0h case    5:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R10,regs.R11);
		/* 821D9FF0h case    5:*/		return 0x821D9FF4;
		  /* 821D9FF4h */ case    6:  		/* bc 4, CR0_EQ, 44 */
		/* 821D9FF4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821DA020;  }
		/* 821D9FF4h case    6:*/		return 0x821D9FF8;
		  /* 821D9FF8h */ case    7:  		/* mr R4, R22 */
		/* 821D9FF8h case    7:*/		regs.R4 = regs.R22;
		/* 821D9FF8h case    7:*/		return 0x821D9FFC;
		  /* 821D9FFCh */ case    8:  		/* mr R3, R31 */
		/* 821D9FFCh case    8:*/		regs.R3 = regs.R31;
		/* 821D9FFCh case    8:*/		return 0x821DA000;
		  /* 821DA000h */ case    9:  		/* bl -112104 */
		/* 821DA000h case    9:*/		regs.LR = 0x821DA004; return 0x821BEA18;
		/* 821DA000h case    9:*/		return 0x821DA004;
		  /* 821DA004h */ case   10:  		/* li R6, 1 */
		/* 821DA004h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821DA004h case   10:*/		return 0x821DA008;
		  /* 821DA008h */ case   11:  		/* li R5, 0 */
		/* 821DA008h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DA008h case   11:*/		return 0x821DA00C;
		  /* 821DA00Ch */ case   12:  		/* mr R4, R31 */
		/* 821DA00Ch case   12:*/		regs.R4 = regs.R31;
		/* 821DA00Ch case   12:*/		return 0x821DA010;
		  /* 821DA010h */ case   13:  		/* mr R3, R22 */
		/* 821DA010h case   13:*/		regs.R3 = regs.R22;
		/* 821DA010h case   13:*/		return 0x821DA014;
		  /* 821DA014h */ case   14:  		/* bl 332724 */
		/* 821DA014h case   14:*/		regs.LR = 0x821DA018; return 0x8222B3C8;
		/* 821DA014h case   14:*/		return 0x821DA018;
		  /* 821DA018h */ case   15:  		/* li R28, 1 */
		/* 821DA018h case   15:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 821DA018h case   15:*/		return 0x821DA01C;
		  /* 821DA01Ch */ case   16:  		/* b 12 */
		/* 821DA01Ch case   16:*/		return 0x821DA028;
		/* 821DA01Ch case   16:*/		return 0x821DA020;
	}
	return 0x821DA020;
} // Block from 821D9FDCh-821DA020h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821DA020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA020);
		  /* 821DA020h */ case    0:  		/* rlwinm R11, R11, 0, 3, 1 */
		/* 821DA020h case    0:*/		cpu::op::rlwinm<0,0,3,1>(regs,&regs.R11,regs.R11);
		/* 821DA020h case    0:*/		return 0x821DA024;
		  /* 821DA024h */ case    1:  		/* stw R11, <#[R31 + 8]> */
		/* 821DA024h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DA024h case    1:*/		return 0x821DA028;
	}
	return 0x821DA028;
} // Block from 821DA020h-821DA028h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DA028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA028);
		  /* 821DA028h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821DA028h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821DA028h case    0:*/		return 0x821DA02C;
		  /* 821DA02Ch */ case    1:  		/* lwz R11, <#[R11 + 36]> */
		/* 821DA02Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821DA02Ch case    1:*/		return 0x821DA030;
		  /* 821DA030h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DA030h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DA030h case    2:*/		return 0x821DA034;
		  /* 821DA034h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DA034h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DA044;  }
		/* 821DA034h case    3:*/		return 0x821DA038;
		  /* 821DA038h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DA038h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DA038h case    4:*/		return 0x821DA03C;
		  /* 821DA03Ch */ case    5:  		/* addic. R31, R11, -40 */
		/* 821DA03Ch case    5:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821DA03Ch case    5:*/		return 0x821DA040;
		  /* 821DA040h */ case    6:  		/* bc 4, CR0_EQ, -84 */
		/* 821DA040h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821D9FEC;  }
		/* 821DA040h case    6:*/		return 0x821DA044;
	}
	return 0x821DA044;
} // Block from 821DA028h-821DA044h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DA044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA044);
		  /* 821DA044h */ case    0:  		/* addi R10, R29, 16 */
		/* 821DA044h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x10);
		/* 821DA044h case    0:*/		return 0x821DA048;
		  /* 821DA048h */ case    1:  		/* cmplw CR6, R30, R10 */
		/* 821DA048h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R10);
		/* 821DA048h case    1:*/		return 0x821DA04C;
		  /* 821DA04Ch */ case    2:  		/* bc 12, CR6_EQ, 80 */
		/* 821DA04Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821DA09C;  }
		/* 821DA04Ch case    2:*/		return 0x821DA050;
		  /* 821DA050h */ case    3:  		/* addi R11, R29, 24 */
		/* 821DA050h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x18);
		/* 821DA050h case    3:*/		return 0x821DA054;
		  /* 821DA054h */ case    4:  		/* cmplw CR6, R30, R11 */
		/* 821DA054h case    4:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821DA054h case    4:*/		return 0x821DA058;
		  /* 821DA058h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 821DA058h case    5:*/		if ( regs.CR[6].eq ) { return 0x821DA078;  }
		/* 821DA058h case    5:*/		return 0x821DA05C;
		  /* 821DA05Ch */ case    6:  		/* lwz R9, <#[R29 + 28]> */
		/* 821DA05Ch case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x0000001C) );
		/* 821DA05Ch case    6:*/		return 0x821DA060;
		  /* 821DA060h */ case    7:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 821DA060h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 821DA060h case    7:*/		return 0x821DA064;
		  /* 821DA064h */ case    8:  		/* bc 4, CR0_EQ, 20 */
		/* 821DA064h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821DA078;  }
		/* 821DA064h case    8:*/		return 0x821DA068;
		  /* 821DA068h */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 821DA068h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DA068h case    9:*/		return 0x821DA06C;
		  /* 821DA06Ch */ case   10:  		/* mr R30, R11 */
		/* 821DA06Ch case   10:*/		regs.R30 = regs.R11;
		/* 821DA06Ch case   10:*/		return 0x821DA070;
		  /* 821DA070h */ case   11:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821DA070h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821DA070h case   11:*/		return 0x821DA074;
		  /* 821DA074h */ case   12:  		/* b 16 */
		/* 821DA074h case   12:*/		return 0x821DA084;
		/* 821DA074h case   12:*/		return 0x821DA078;
	}
	return 0x821DA078;
} // Block from 821DA044h-821DA078h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821DA078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA078);
		  /* 821DA078h */ case    0:  		/* lwz R11, <#[R10 + 4]> */
		/* 821DA078h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821DA078h case    0:*/		return 0x821DA07C;
		  /* 821DA07Ch */ case    1:  		/* mr R30, R10 */
		/* 821DA07Ch case    1:*/		regs.R30 = regs.R10;
		/* 821DA07Ch case    1:*/		return 0x821DA080;
		  /* 821DA080h */ case    2:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DA080h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DA080h case    2:*/		return 0x821DA084;
	}
	return 0x821DA084;
} // Block from 821DA078h-821DA084h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DA084h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA084( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA084) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA084);
		  /* 821DA084h */ case    0:  		/* bc 4, CR0_EQ, 24 */
		/* 821DA084h case    0:*/		if ( !regs.CR[0].eq ) { return 0x821DA09C;  }
		/* 821DA084h case    0:*/		return 0x821DA088;
	}
	return 0x821DA088;
} // Block from 821DA084h-821DA088h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DA088h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA088);
		  /* 821DA088h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821DA088h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821DA088h case    0:*/		return 0x821DA08C;
		  /* 821DA08Ch */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DA08Ch case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DA08Ch case    1:*/		return 0x821DA090;
		  /* 821DA090h */ case    2:  		/* addi R31, R11, -40 */
		/* 821DA090h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821DA090h case    2:*/		return 0x821DA094;
	}
	return 0x821DA094;
} // Block from 821DA088h-821DA094h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DA094h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA094( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA094) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA094);
		  /* 821DA094h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821DA094h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DA094h case    0:*/		return 0x821DA098;
		  /* 821DA098h */ case    1:  		/* bc 4, CR6_EQ, -172 */
		/* 821DA098h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821D9FEC;  }
		/* 821DA098h case    1:*/		return 0x821DA09C;
	}
	return 0x821DA09C;
} // Block from 821DA094h-821DA09Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DA09Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA09C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA09C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA09C);
		  /* 821DA09Ch */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821DA09Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821DA09Ch case    0:*/		return 0x821DA0A0;
		  /* 821DA0A0h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DA0A0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DA0A0h case    1:*/		return 0x821DA0A4;
		  /* 821DA0A4h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DA0A4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DA0A4h case    2:*/		return 0x821DA0A8;
		  /* 821DA0A8h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DA0A8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DA0B8;  }
		/* 821DA0A8h case    3:*/		return 0x821DA0AC;
		  /* 821DA0ACh */ case    4:  		/* mr R29, R11 */
		/* 821DA0ACh case    4:*/		regs.R29 = regs.R11;
		/* 821DA0ACh case    4:*/		return 0x821DA0B0;
		  /* 821DA0B0h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DA0B0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DA0B0h case    5:*/		return 0x821DA0B4;
		  /* 821DA0B4h */ case    6:  		/* bc 4, CR6_EQ, -292 */
		/* 821DA0B4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821D9F90;  }
		/* 821DA0B4h case    6:*/		return 0x821DA0B8;
	}
	return 0x821DA0B8;
} // Block from 821DA09Ch-821DA0B8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DA0B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA0B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA0B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA0B8);
		  /* 821DA0B8h */ case    0:  		/* mr R4, R27 */
		/* 821DA0B8h case    0:*/		regs.R4 = regs.R27;
		/* 821DA0B8h case    0:*/		return 0x821DA0BC;
		  /* 821DA0BCh */ case    1:  		/* mr R3, R22 */
		/* 821DA0BCh case    1:*/		regs.R3 = regs.R22;
		/* 821DA0BCh case    1:*/		return 0x821DA0C0;
		  /* 821DA0C0h */ case    2:  		/* bl -480208 */
		/* 821DA0C0h case    2:*/		regs.LR = 0x821DA0C4; return 0x82164CF0;
		/* 821DA0C0h case    2:*/		return 0x821DA0C4;
		  /* 821DA0C4h */ case    3:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 821DA0C4h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821DA0C4h case    3:*/		return 0x821DA0C8;
		  /* 821DA0C8h */ case    4:  		/* bc 4, CR0_EQ, -2100 */
		/* 821DA0C8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821D9894;  }
		/* 821DA0C8h case    4:*/		return 0x821DA0CC;
	}
	return 0x821DA0CC;
} // Block from 821DA0B8h-821DA0CCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DA0CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA0CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA0CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA0CC);
		  /* 821DA0CCh */ case    0:  		/* rlwinm R11, R21, 0, 0, 30 */
		/* 821DA0CCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R21);
		/* 821DA0CCh case    0:*/		return 0x821DA0D0;
		  /* 821DA0D0h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DA0D0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DA0D0h case    1:*/		return 0x821DA0D4;
		  /* 821DA0D4h */ case    2:  		/* b -1984 */
		/* 821DA0D4h case    2:*/		return 0x821D9914;
		/* 821DA0D4h case    2:*/		return 0x821DA0D8;
	}
	return 0x821DA0D8;
} // Block from 821DA0CCh-821DA0D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DA0D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA0D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA0D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA0D8);
		  /* 821DA0D8h */ case    0:  		/* lwz R11, <#[R24 + 12]> */
		/* 821DA0D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000000C) );
		/* 821DA0D8h case    0:*/		return 0x821DA0DC;
		  /* 821DA0DCh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DA0DCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DA0DCh case    1:*/		return 0x821DA0E0;
		  /* 821DA0E0h */ case    2:  		/* bc 12, CR6_EQ, 1556 */
		/* 821DA0E0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DA6F4;  }
		/* 821DA0E0h case    2:*/		return 0x821DA0E4;
		  /* 821DA0E4h */ case    3:  		/* lwz R27, <#[R11]> */
		/* 821DA0E4h case    3:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 821DA0E4h case    3:*/		return 0x821DA0E8;
		  /* 821DA0E8h */ case    4:  		/* lwz R10, <#[R27 + 48]> */
		/* 821DA0E8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000030) );
		/* 821DA0E8h case    4:*/		return 0x821DA0EC;
		  /* 821DA0ECh */ case    5:  		/* rlwinm. R10, R10, 2, 31, 31 */
		/* 821DA0ECh case    5:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R10,regs.R10);
		/* 821DA0ECh case    5:*/		return 0x821DA0F0;
		  /* 821DA0F0h */ case    6:  		/* bc 12, CR0_EQ, 12 */
		/* 821DA0F0h case    6:*/		if ( regs.CR[0].eq ) { return 0x821DA0FC;  }
		/* 821DA0F0h case    6:*/		return 0x821DA0F4;
		  /* 821DA0F4h */ case    7:  		/* lwz R11, <#[R11 + 8]> */
		/* 821DA0F4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821DA0F4h case    7:*/		return 0x821DA0F8;
		  /* 821DA0F8h */ case    8:  		/* b -28 */
		/* 821DA0F8h case    8:*/		return 0x821DA0DC;
		/* 821DA0F8h case    8:*/		return 0x821DA0FC;
	}
	return 0x821DA0FC;
} // Block from 821DA0D8h-821DA0FCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821DA0FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA0FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA0FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA0FC);
		  /* 821DA0FCh */ case    0:  		/* lwz R11, <#[R23 + 36]> */
		/* 821DA0FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000024) );
		/* 821DA0FCh case    0:*/		return 0x821DA100;
		  /* 821DA100h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DA100h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DA100h case    1:*/		return 0x821DA104;
		  /* 821DA104h */ case    2:  		/* bc 4, CR0_EQ, 152 */
		/* 821DA104h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821DA19C;  }
		/* 821DA104h case    2:*/		return 0x821DA108;
		  /* 821DA108h */ case    3:  		/* lwz R11, <#[R23 + 32]> */
		/* 821DA108h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000020) );
		/* 821DA108h case    3:*/		return 0x821DA10C;
		  /* 821DA10Ch */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DA10Ch case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DA10Ch case    4:*/		return 0x821DA110;
		  /* 821DA110h */ case    5:  		/* addic. R31, R11, -40 */
		/* 821DA110h case    5:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821DA110h case    5:*/		return 0x821DA114;
		  /* 821DA114h */ case    6:  		/* bc 12, CR0_EQ, 136 */
		/* 821DA114h case    6:*/		if ( regs.CR[0].eq ) { return 0x821DA19C;  }
		/* 821DA114h case    6:*/		return 0x821DA118;
		  /* 821DA118h */ case    7:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DA118h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DA118h case    7:*/		return 0x821DA11C;
		  /* 821DA11Ch */ case    8:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DA11Ch case    8:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DA11Ch case    8:*/		return 0x821DA120;
		  /* 821DA120h */ case    9:  		/* cmplwi CR6, R11, 10880 */
		/* 821DA120h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002A80);
		/* 821DA120h case    9:*/		return 0x821DA124;
		  /* 821DA124h */ case   10:  		/* bc 4, CR6_EQ, 120 */
		/* 821DA124h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821DA19C;  }
		/* 821DA124h case   10:*/		return 0x821DA128;
		  /* 821DA128h */ case   11:  		/* li R6, 0 */
		/* 821DA128h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821DA128h case   11:*/		return 0x821DA12C;
		  /* 821DA12Ch */ case   12:  		/* li R5, 0 */
		/* 821DA12Ch case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DA12Ch case   12:*/		return 0x821DA130;
		  /* 821DA130h */ case   13:  		/* li R4, 85 */
		/* 821DA130h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x55);
		/* 821DA130h case   13:*/		return 0x821DA134;
		  /* 821DA134h */ case   14:  		/* mr R3, R22 */
		/* 821DA134h case   14:*/		regs.R3 = regs.R22;
		/* 821DA134h case   14:*/		return 0x821DA138;
		  /* 821DA138h */ case   15:  		/* bl -482568 */
		/* 821DA138h case   15:*/		regs.LR = 0x821DA13C; return 0x82164430;
		/* 821DA138h case   15:*/		return 0x821DA13C;
		  /* 821DA13Ch */ case   16:  		/* addi R11, R31, -20 */
		/* 821DA13Ch case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFEC);
		/* 821DA13Ch case   16:*/		return 0x821DA140;
		  /* 821DA140h */ case   17:  		/* lwzx R28, <#[R3 + R11]> */
		/* 821DA140h case   17:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821DA140h case   17:*/		return 0x821DA144;
		  /* 821DA144h */ case   18:  		/* lwz R29, <#[R28 + 28]> */
		/* 821DA144h case   18:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x0000001C) );
		/* 821DA144h case   18:*/		return 0x821DA148;
		  /* 821DA148h */ case   19:  		/* addi R30, R29, 12 */
		/* 821DA148h case   19:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0xC);
		/* 821DA148h case   19:*/		return 0x821DA14C;
		  /* 821DA14Ch */ case   20:  		/* lwz R31, <#[R29 + 12]> */
		/* 821DA14Ch case   20:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x0000000C) );
		/* 821DA14Ch case   20:*/		return 0x821DA150;
		  /* 821DA150h */ case   21:  		/* cmplwi CR6, R31, 0 */
		/* 821DA150h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DA150h case   21:*/		return 0x821DA154;
		  /* 821DA154h */ case   22:  		/* bc 12, CR6_EQ, 52 */
		/* 821DA154h case   22:*/		if ( regs.CR[6].eq ) { return 0x821DA188;  }
		/* 821DA154h case   22:*/		return 0x821DA158;
		  /* 821DA158h */ case   23:  		/* lwz R4, <#[R31]> */
		/* 821DA158h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 821DA158h case   23:*/		return 0x821DA15C;
		  /* 821DA15Ch */ case   24:  		/* cmplw CR6, R4, R21 */
		/* 821DA15Ch case   24:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R21);
		/* 821DA15Ch case   24:*/		return 0x821DA160;
		  /* 821DA160h */ case   25:  		/* bc 12, CR6_EQ, 16 */
		/* 821DA160h case   25:*/		if ( regs.CR[6].eq ) { return 0x821DA170;  }
		/* 821DA160h case   25:*/		return 0x821DA164;
		  /* 821DA164h */ case   26:  		/* mr R5, R22 */
		/* 821DA164h case   26:*/		regs.R5 = regs.R22;
		/* 821DA164h case   26:*/		return 0x821DA168;
		  /* 821DA168h */ case   27:  		/* mr R3, R29 */
		/* 821DA168h case   27:*/		regs.R3 = regs.R29;
		/* 821DA168h case   27:*/		return 0x821DA16C;
		  /* 821DA16Ch */ case   28:  		/* bl 350204 */
		/* 821DA16Ch case   28:*/		regs.LR = 0x821DA170; return 0x8222F968;
		/* 821DA16Ch case   28:*/		return 0x821DA170;
	}
	return 0x821DA170;
} // Block from 821DA0FCh-821DA170h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821DA170h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA170);
		  /* 821DA170h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821DA170h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821DA170h case    0:*/		return 0x821DA174;
		  /* 821DA174h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821DA174h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821DA174h case    1:*/		return 0x821DA178;
		  /* 821DA178h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 821DA178h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DA180;  }
		/* 821DA178h case    2:*/		return 0x821DA17C;
		  /* 821DA17Ch */ case    3:  		/* addi R30, R31, 8 */
		/* 821DA17Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x8);
		/* 821DA17Ch case    3:*/		return 0x821DA180;
	}
	return 0x821DA180;
} // Block from 821DA170h-821DA180h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DA180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA180);
		  /* 821DA180h */ case    0:  		/* lwz R31, <#[R30]> */
		/* 821DA180h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821DA180h case    0:*/		return 0x821DA184;
		  /* 821DA184h */ case    1:  		/* b -52 */
		/* 821DA184h case    1:*/		return 0x821DA150;
		/* 821DA184h case    1:*/		return 0x821DA188;
	}
	return 0x821DA188;
} // Block from 821DA180h-821DA188h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DA188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA188);
		  /* 821DA188h */ case    0:  		/* li R6, 1 */
		/* 821DA188h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821DA188h case    0:*/		return 0x821DA18C;
		  /* 821DA18Ch */ case    1:  		/* li R5, 0 */
		/* 821DA18Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DA18Ch case    1:*/		return 0x821DA190;
		  /* 821DA190h */ case    2:  		/* mr R4, R28 */
		/* 821DA190h case    2:*/		regs.R4 = regs.R28;
		/* 821DA190h case    2:*/		return 0x821DA194;
		  /* 821DA194h */ case    3:  		/* mr R3, R22 */
		/* 821DA194h case    3:*/		regs.R3 = regs.R22;
		/* 821DA194h case    3:*/		return 0x821DA198;
		  /* 821DA198h */ case    4:  		/* bl 332336 */
		/* 821DA198h case    4:*/		regs.LR = 0x821DA19C; return 0x8222B3C8;
		/* 821DA198h case    4:*/		return 0x821DA19C;
	}
	return 0x821DA19C;
} // Block from 821DA188h-821DA19Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DA19Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA19C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA19C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA19C);
		  /* 821DA19Ch */ case    0:  		/* lwz R9, <#[R22 + 40]> */
		/* 821DA19Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R22 + 0x00000028) );
		/* 821DA19Ch case    0:*/		return 0x821DA1A0;
		  /* 821DA1A0h */ case    1:  		/* lwz R10, <#[R22 + 108]> */
		/* 821DA1A0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x0000006C) );
		/* 821DA1A0h case    1:*/		return 0x821DA1A4;
		  /* 821DA1A4h */ case    2:  		/* lwz R11, <#[R22 + 4]> */
		/* 821DA1A4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821DA1A4h case    2:*/		return 0x821DA1A8;
		  /* 821DA1A8h */ case    3:  		/* ori R8, R9, 4096 */
		/* 821DA1A8h case    3:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R9,0x1000);
		/* 821DA1A8h case    3:*/		return 0x821DA1AC;
		  /* 821DA1ACh */ case    4:  		/* addi R29, R10, 1 */
		/* 821DA1ACh case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R10,0x1);
		/* 821DA1ACh case    4:*/		return 0x821DA1B0;
		  /* 821DA1B0h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DA1B0h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DA1B0h case    5:*/		return 0x821DA1B4;
		  /* 821DA1B4h */ case    6:  		/* stw R8, <#[R22 + 40]> */
		/* 821DA1B4h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R22 + 0x00000028) );
		/* 821DA1B4h case    6:*/		return 0x821DA1B8;
		  /* 821DA1B8h */ case    7:  		/* rlwinm R25, R9, 20, 31, 31 */
		/* 821DA1B8h case    7:*/		cpu::op::rlwinm<0,20,31,31>(regs,&regs.R25,regs.R9);
		/* 821DA1B8h case    7:*/		return 0x821DA1BC;
		  /* 821DA1BCh */ case    8:  		/* stw R29, <#[R22 + 108]> */
		/* 821DA1BCh case    8:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R22 + 0x0000006C) );
		/* 821DA1BCh case    8:*/		return 0x821DA1C0;
		  /* 821DA1C0h */ case    9:  		/* bc 4, CR0_EQ, 60 */
		/* 821DA1C0h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821DA1FC;  }
		/* 821DA1C0h case    9:*/		return 0x821DA1C4;
		  /* 821DA1C4h */ case   10:  		/* cmplwi CR0, R11, 0 */
		/* 821DA1C4h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DA1C4h case   10:*/		return 0x821DA1C8;
		  /* 821DA1C8h */ case   11:  		/* bc 12, CR0_EQ, 52 */
		/* 821DA1C8h case   11:*/		if ( regs.CR[0].eq ) { return 0x821DA1FC;  }
		/* 821DA1C8h case   11:*/		return 0x821DA1CC;
		  /* 821DA1CCh */ case   12:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DA1CCh case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DA1CCh case   12:*/		return 0x821DA1D0;
		  /* 821DA1D0h */ case   13:  		/* rlwinm. R10, R10, 2, 31, 31 */
		/* 821DA1D0h case   13:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R10,regs.R10);
		/* 821DA1D0h case   13:*/		return 0x821DA1D4;
		  /* 821DA1D4h */ case   14:  		/* bc 12, CR0_EQ, 16 */
		/* 821DA1D4h case   14:*/		if ( regs.CR[0].eq ) { return 0x821DA1E4;  }
		/* 821DA1D4h case   14:*/		return 0x821DA1D8;
		  /* 821DA1D8h */ case   15:  		/* cmplw CR6, R11, R21 */
		/* 821DA1D8h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R21);
		/* 821DA1D8h case   15:*/		return 0x821DA1DC;
		  /* 821DA1DCh */ case   16:  		/* bc 12, CR6_EQ, 8 */
		/* 821DA1DCh case   16:*/		if ( regs.CR[6].eq ) { return 0x821DA1E4;  }
		/* 821DA1DCh case   16:*/		return 0x821DA1E0;
		  /* 821DA1E0h */ case   17:  		/* stw R29, <#[R11 + 44]> */
		/* 821DA1E0h case   17:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x0000002C) );
		/* 821DA1E0h case   17:*/		return 0x821DA1E4;
	}
	return 0x821DA1E4;
} // Block from 821DA19Ch-821DA1E4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821DA1E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA1E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA1E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA1E4);
		  /* 821DA1E4h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DA1E4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DA1E4h case    0:*/		return 0x821DA1E8;
		  /* 821DA1E8h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DA1E8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DA1E8h case    1:*/		return 0x821DA1EC;
		  /* 821DA1ECh */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DA1ECh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DA1ECh case    2:*/		return 0x821DA1F0;
		  /* 821DA1F0h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821DA1F0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DA1FC;  }
		/* 821DA1F0h case    3:*/		return 0x821DA1F4;
		  /* 821DA1F4h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821DA1F4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DA1F4h case    4:*/		return 0x821DA1F8;
		  /* 821DA1F8h */ case    5:  		/* bc 4, CR6_EQ, -44 */
		/* 821DA1F8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821DA1CC;  }
		/* 821DA1F8h case    5:*/		return 0x821DA1FC;
	}
	return 0x821DA1FC;
} // Block from 821DA1E4h-821DA1FCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DA1FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA1FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA1FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA1FC);
		  /* 821DA1FCh */ case    0:  		/* lwz R31, <#[R21 + 12]> */
		/* 821DA1FCh case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R21 + 0x0000000C) );
		/* 821DA1FCh case    0:*/		return 0x821DA200;
		  /* 821DA200h */ case    1:  		/* addi R30, R21, 12 */
		/* 821DA200h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R21,0xC);
		/* 821DA200h case    1:*/		return 0x821DA204;
		  /* 821DA204h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 821DA204h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DA204h case    2:*/		return 0x821DA208;
		  /* 821DA208h */ case    3:  		/* mr R5, R22 */
		/* 821DA208h case    3:*/		regs.R5 = regs.R22;
		/* 821DA208h case    3:*/		return 0x821DA20C;
		  /* 821DA20Ch */ case    4:  		/* mr R3, R21 */
		/* 821DA20Ch case    4:*/		regs.R3 = regs.R21;
		/* 821DA20Ch case    4:*/		return 0x821DA210;
		  /* 821DA210h */ case    5:  		/* bc 12, CR6_EQ, 36 */
		/* 821DA210h case    5:*/		if ( regs.CR[6].eq ) { return 0x821DA234;  }
		/* 821DA210h case    5:*/		return 0x821DA214;
		  /* 821DA214h */ case    6:  		/* lwz R4, <#[R31]> */
		/* 821DA214h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 821DA214h case    6:*/		return 0x821DA218;
		  /* 821DA218h */ case    7:  		/* bl 350032 */
		/* 821DA218h case    7:*/		regs.LR = 0x821DA21C; return 0x8222F968;
		/* 821DA218h case    7:*/		return 0x821DA21C;
		  /* 821DA21Ch */ case    8:  		/* lwz R11, <#[R30]> */
		/* 821DA21Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821DA21Ch case    8:*/		return 0x821DA220;
		  /* 821DA220h */ case    9:  		/* cmplw CR6, R11, R31 */
		/* 821DA220h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821DA220h case    9:*/		return 0x821DA224;
		  /* 821DA224h */ case   10:  		/* bc 4, CR6_EQ, 8 */
		/* 821DA224h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821DA22C;  }
		/* 821DA224h case   10:*/		return 0x821DA228;
		  /* 821DA228h */ case   11:  		/* addi R30, R31, 8 */
		/* 821DA228h case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x8);
		/* 821DA228h case   11:*/		return 0x821DA22C;
	}
	return 0x821DA22C;
} // Block from 821DA1FCh-821DA22Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821DA22Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA22C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA22C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA22C);
		  /* 821DA22Ch */ case    0:  		/* lwz R31, <#[R30]> */
		/* 821DA22Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821DA22Ch case    0:*/		return 0x821DA230;
		  /* 821DA230h */ case    1:  		/* b -44 */
		/* 821DA230h case    1:*/		return 0x821DA204;
		/* 821DA230h case    1:*/		return 0x821DA234;
	}
	return 0x821DA234;
} // Block from 821DA22Ch-821DA234h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DA234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA234);
		  /* 821DA234h */ case    0:  		/* mr R4, R27 */
		/* 821DA234h case    0:*/		regs.R4 = regs.R27;
		/* 821DA234h case    0:*/		return 0x821DA238;
		  /* 821DA238h */ case    1:  		/* bl 350376 */
		/* 821DA238h case    1:*/		regs.LR = 0x821DA23C; return 0x8222FAE0;
		/* 821DA238h case    1:*/		return 0x821DA23C;
		  /* 821DA23Ch */ case    2:  		/* mr R4, R29 */
		/* 821DA23Ch case    2:*/		regs.R4 = regs.R29;
		/* 821DA23Ch case    2:*/		return 0x821DA240;
		  /* 821DA240h */ case    3:  		/* mr R3, R22 */
		/* 821DA240h case    3:*/		regs.R3 = regs.R22;
		/* 821DA240h case    3:*/		return 0x821DA244;
		  /* 821DA244h */ case    4:  		/* bl -111732 */
		/* 821DA244h case    4:*/		regs.LR = 0x821DA248; return 0x821BEDD0;
		/* 821DA244h case    4:*/		return 0x821DA248;
		  /* 821DA248h */ case    5:  		/* lwz R11, <#[R21 + 36]> */
		/* 821DA248h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000024) );
		/* 821DA248h case    5:*/		return 0x821DA24C;
		  /* 821DA24Ch */ case    6:  		/* addi R28, R21, 32 */
		/* 821DA24Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R21,0x20);
		/* 821DA24Ch case    6:*/		return 0x821DA250;
		  /* 821DA250h */ case    7:  		/* mr R27, R20 */
		/* 821DA250h case    7:*/		regs.R27 = regs.R20;
		/* 821DA250h case    7:*/		return 0x821DA254;
		  /* 821DA254h */ case    8:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DA254h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DA254h case    8:*/		return 0x821DA258;
		  /* 821DA258h */ case    9:  		/* bc 4, CR0_EQ, 256 */
		/* 821DA258h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821DA358;  }
		/* 821DA258h case    9:*/		return 0x821DA25C;
		  /* 821DA25Ch */ case   10:  		/* lwz R11, <#[R28]> */
		/* 821DA25Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821DA25Ch case   10:*/		return 0x821DA260;
		  /* 821DA260h */ case   11:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DA260h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DA260h case   11:*/		return 0x821DA264;
		  /* 821DA264h */ case   12:  		/* addic. R31, R11, -40 */
		/* 821DA264h case   12:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821DA264h case   12:*/		return 0x821DA268;
		  /* 821DA268h */ case   13:  		/* bc 12, CR0_EQ, 240 */
		/* 821DA268h case   13:*/		if ( regs.CR[0].eq ) { return 0x821DA358;  }
		/* 821DA268h case   13:*/		return 0x821DA26C;
		  /* 821DA26Ch */ case   14:  		/* addi R29, R31, 4 */
		/* 821DA26Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x4);
		/* 821DA26Ch case   14:*/		return 0x821DA270;
		  /* 821DA270h */ case   15:  		/* lwz R30, <#[R29]> */
		/* 821DA270h case   15:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821DA270h case   15:*/		return 0x821DA274;
		  /* 821DA274h */ case   16:  		/* cmplwi CR6, R30, 0 */
		/* 821DA274h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821DA274h case   16:*/		return 0x821DA278;
		  /* 821DA278h */ case   17:  		/* bc 12, CR6_EQ, 48 */
		/* 821DA278h case   17:*/		if ( regs.CR[6].eq ) { return 0x821DA2A8;  }
		/* 821DA278h case   17:*/		return 0x821DA27C;
		  /* 821DA27Ch */ case   18:  		/* lwz R3, <#[R30 + 16]> */
		/* 821DA27Ch case   18:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 821DA27Ch case   18:*/		return 0x821DA280;
		  /* 821DA280h */ case   19:  		/* cmplwi CR6, R3, 0 */
		/* 821DA280h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821DA280h case   19:*/		return 0x821DA284;
		  /* 821DA284h */ case   20:  		/* bc 12, CR6_EQ, 16 */
		/* 821DA284h case   20:*/		if ( regs.CR[6].eq ) { return 0x821DA294;  }
		/* 821DA284h case   20:*/		return 0x821DA288;
		  /* 821DA288h */ case   21:  		/* mr R5, R22 */
		/* 821DA288h case   21:*/		regs.R5 = regs.R22;
		/* 821DA288h case   21:*/		return 0x821DA28C;
		  /* 821DA28Ch */ case   22:  		/* mr R4, R30 */
		/* 821DA28Ch case   22:*/		regs.R4 = regs.R30;
		/* 821DA28Ch case   22:*/		return 0x821DA290;
		  /* 821DA290h */ case   23:  		/* bl -399744 */
		/* 821DA290h case   23:*/		regs.LR = 0x821DA294; return 0x82178910;
		/* 821DA290h case   23:*/		return 0x821DA294;
	}
	return 0x821DA294;
} // Block from 821DA234h-821DA294h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821DA294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA294);
		  /* 821DA294h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821DA294h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821DA294h case    0:*/		return 0x821DA298;
		  /* 821DA298h */ case    1:  		/* cmplw CR6, R11, R30 */
		/* 821DA298h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821DA298h case    1:*/		return 0x821DA29C;
		  /* 821DA29Ch */ case    2:  		/* bc 4, CR6_EQ, -44 */
		/* 821DA29Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DA270;  }
		/* 821DA29Ch case    2:*/		return 0x821DA2A0;
		  /* 821DA2A0h */ case    3:  		/* addi R29, R30, 8 */
		/* 821DA2A0h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x8);
		/* 821DA2A0h case    3:*/		return 0x821DA2A4;
		  /* 821DA2A4h */ case    4:  		/* b -52 */
		/* 821DA2A4h case    4:*/		return 0x821DA270;
		/* 821DA2A4h case    4:*/		return 0x821DA2A8;
	}
	return 0x821DA2A8;
} // Block from 821DA294h-821DA2A8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DA2A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA2A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA2A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA2A8);
		  /* 821DA2A8h */ case    0:  		/* li R6, 1 */
		/* 821DA2A8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821DA2A8h case    0:*/		return 0x821DA2AC;
		  /* 821DA2ACh */ case    1:  		/* li R5, 0 */
		/* 821DA2ACh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DA2ACh case    1:*/		return 0x821DA2B0;
		  /* 821DA2B0h */ case    2:  		/* mr R4, R31 */
		/* 821DA2B0h case    2:*/		regs.R4 = regs.R31;
		/* 821DA2B0h case    2:*/		return 0x821DA2B4;
		  /* 821DA2B4h */ case    3:  		/* mr R3, R22 */
		/* 821DA2B4h case    3:*/		regs.R3 = regs.R22;
		/* 821DA2B4h case    3:*/		return 0x821DA2B8;
		  /* 821DA2B8h */ case    4:  		/* bl 332048 */
		/* 821DA2B8h case    4:*/		regs.LR = 0x821DA2BC; return 0x8222B3C8;
		/* 821DA2B8h case    4:*/		return 0x821DA2BC;
		  /* 821DA2BCh */ case    5:  		/* cmplwi CR6, R27, 0 */
		/* 821DA2BCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821DA2BCh case    5:*/		return 0x821DA2C0;
		  /* 821DA2C0h */ case    6:  		/* bc 12, CR6_EQ, 84 */
		/* 821DA2C0h case    6:*/		if ( regs.CR[6].eq ) { return 0x821DA314;  }
		/* 821DA2C0h case    6:*/		return 0x821DA2C4;
		  /* 821DA2C4h */ case    7:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 821DA2C4h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 821DA2C4h case    7:*/		return 0x821DA2C8;
		  /* 821DA2C8h */ case    8:  		/* lwz R10, <#[R11 + 36]> */
		/* 821DA2C8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 821DA2C8h case    8:*/		return 0x821DA2CC;
		  /* 821DA2CCh */ case    9:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821DA2CCh case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821DA2CCh case    9:*/		return 0x821DA2D0;
		  /* 821DA2D0h */ case   10:  		/* bc 12, CR0_EQ, 12 */
		/* 821DA2D0h case   10:*/		if ( regs.CR[0].eq ) { return 0x821DA2DC;  }
		/* 821DA2D0h case   10:*/		return 0x821DA2D4;
		  /* 821DA2D4h */ case   11:  		/* mr R11, R20 */
		/* 821DA2D4h case   11:*/		regs.R11 = regs.R20;
		/* 821DA2D4h case   11:*/		return 0x821DA2D8;
		  /* 821DA2D8h */ case   12:  		/* b 12 */
		/* 821DA2D8h case   12:*/		return 0x821DA2E4;
		/* 821DA2D8h case   12:*/		return 0x821DA2DC;
	}
	return 0x821DA2DC;
} // Block from 821DA2A8h-821DA2DCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821DA2DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA2DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA2DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA2DC);
		  /* 821DA2DCh */ case    0:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 821DA2DCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 821DA2DCh case    0:*/		return 0x821DA2E0;
		  /* 821DA2E0h */ case    1:  		/* addi R11, R11, -40 */
		/* 821DA2E0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 821DA2E0h case    1:*/		return 0x821DA2E4;
	}
	return 0x821DA2E4;
} // Block from 821DA2DCh-821DA2E4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DA2E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA2E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA2E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA2E4);
		  /* 821DA2E4h */ case    0:  		/* cmplw CR6, R31, R11 */
		/* 821DA2E4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821DA2E4h case    0:*/		return 0x821DA2E8;
		  /* 821DA2E8h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 821DA2E8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DA304;  }
		/* 821DA2E8h case    1:*/		return 0x821DA2EC;
		  /* 821DA2ECh */ case    2:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821DA2ECh case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821DA2ECh case    2:*/		return 0x821DA2F0;
		  /* 821DA2F0h */ case    3:  		/* mr R27, R31 */
		/* 821DA2F0h case    3:*/		regs.R27 = regs.R31;
		/* 821DA2F0h case    3:*/		return 0x821DA2F4;
		  /* 821DA2F4h */ case    4:  		/* lwz R11, <#[R11 + 36]> */
		/* 821DA2F4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821DA2F4h case    4:*/		return 0x821DA2F8;
		  /* 821DA2F8h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DA2F8h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DA2F8h case    5:*/		return 0x821DA2FC;
		  /* 821DA2FCh */ case    6:  		/* bc 4, CR0_EQ, 92 */
		/* 821DA2FCh case    6:*/		if ( !regs.CR[0].eq ) { return 0x821DA358;  }
		/* 821DA2FCh case    6:*/		return 0x821DA300;
		  /* 821DA300h */ case    7:  		/* b 72 */
		/* 821DA300h case    7:*/		return 0x821DA348;
		/* 821DA300h case    7:*/		return 0x821DA304;
	}
	return 0x821DA304;
} // Block from 821DA2E4h-821DA304h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821DA304h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA304( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA304) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA304);
		  /* 821DA304h */ case    0:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821DA304h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821DA304h case    0:*/		return 0x821DA308;
		  /* 821DA308h */ case    1:  		/* bc 4, CR0_EQ, 80 */
		/* 821DA308h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821DA358;  }
		/* 821DA308h case    1:*/		return 0x821DA30C;
		  /* 821DA30Ch */ case    2:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 821DA30Ch case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 821DA30Ch case    2:*/		return 0x821DA310;
		  /* 821DA310h */ case    3:  		/* b 60 */
		/* 821DA310h case    3:*/		return 0x821DA34C;
		/* 821DA310h case    3:*/		return 0x821DA314;
	}
	return 0x821DA314;
} // Block from 821DA304h-821DA314h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DA314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA314);
		  /* 821DA314h */ case    0:  		/* lwz R11, <#[R28 + 4]> */
		/* 821DA314h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821DA314h case    0:*/		return 0x821DA318;
		  /* 821DA318h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DA318h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DA318h case    1:*/		return 0x821DA31C;
		  /* 821DA31Ch */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821DA31Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x821DA328;  }
		/* 821DA31Ch case    2:*/		return 0x821DA320;
		  /* 821DA320h */ case    3:  		/* mr R11, R20 */
		/* 821DA320h case    3:*/		regs.R11 = regs.R20;
		/* 821DA320h case    3:*/		return 0x821DA324;
		  /* 821DA324h */ case    4:  		/* b 16 */
		/* 821DA324h case    4:*/		return 0x821DA334;
		/* 821DA324h case    4:*/		return 0x821DA328;
	}
	return 0x821DA328;
} // Block from 821DA314h-821DA328h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DA328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA328);
		  /* 821DA328h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821DA328h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821DA328h case    0:*/		return 0x821DA32C;
		  /* 821DA32Ch */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DA32Ch case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DA32Ch case    1:*/		return 0x821DA330;
		  /* 821DA330h */ case    2:  		/* addi R11, R11, -40 */
		/* 821DA330h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 821DA330h case    2:*/		return 0x821DA334;
	}
	return 0x821DA334;
} // Block from 821DA328h-821DA334h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DA334h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA334( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA334) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA334);
		  /* 821DA334h */ case    0:  		/* cmplw CR6, R31, R11 */
		/* 821DA334h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821DA334h case    0:*/		return 0x821DA338;
		  /* 821DA338h */ case    1:  		/* bc 12, CR6_EQ, -76 */
		/* 821DA338h case    1:*/		if ( regs.CR[6].eq ) { return 0x821DA2EC;  }
		/* 821DA338h case    1:*/		return 0x821DA33C;
		  /* 821DA33Ch */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821DA33Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DA33Ch case    2:*/		return 0x821DA340;
		  /* 821DA340h */ case    3:  		/* bc 4, CR6_EQ, 24 */
		/* 821DA340h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821DA358;  }
		/* 821DA340h case    3:*/		return 0x821DA344;
		  /* 821DA344h */ case    4:  		/* lwz R11, <#[R28]> */
		/* 821DA344h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821DA344h case    4:*/		return 0x821DA348;
	}
	return 0x821DA348;
} // Block from 821DA334h-821DA348h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DA348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA348);
		  /* 821DA348h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DA348h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DA348h case    0:*/		return 0x821DA34C;
	}
	return 0x821DA34C;
} // Block from 821DA348h-821DA34Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DA34Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA34C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA34C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA34C);
		  /* 821DA34Ch */ case    0:  		/* addi R31, R11, -40 */
		/* 821DA34Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821DA34Ch case    0:*/		return 0x821DA350;
	}
	return 0x821DA350;
} // Block from 821DA34Ch-821DA350h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DA350h
// Function '?RemoveDeadCode@Compiler@D3DXShader@@AAA_N_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA350);
		  /* 821DA350h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821DA350h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DA350h case    0:*/		return 0x821DA354;
		  /* 821DA354h */ case    1:  		/* bc 4, CR6_EQ, -232 */
		/* 821DA354h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DA26C;  }
		/* 821DA354h case    1:*/		return 0x821DA358;
	}
	return 0x821DA358;
} // Block from 821DA350h-821DA358h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DA358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA358);
		  /* 821DA358h */ case    0:  		/* lwz R11, <#[R21 + 28]> */
		/* 821DA358h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000001C) );
		/* 821DA358h case    0:*/		return 0x821DA35C;
		  /* 821DA35Ch */ case    1:  		/* addi R28, R21, 24 */
		/* 821DA35Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R21,0x18);
		/* 821DA35Ch case    1:*/		return 0x821DA360;
		  /* 821DA360h */ case    2:  		/* mr R27, R20 */
		/* 821DA360h case    2:*/		regs.R27 = regs.R20;
		/* 821DA360h case    2:*/		return 0x821DA364;
		  /* 821DA364h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DA364h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DA364h case    3:*/		return 0x821DA368;
		  /* 821DA368h */ case    4:  		/* bc 4, CR0_EQ, 256 */
		/* 821DA368h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821DA468;  }
		/* 821DA368h case    4:*/		return 0x821DA36C;
		  /* 821DA36Ch */ case    5:  		/* lwz R11, <#[R28]> */
		/* 821DA36Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821DA36Ch case    5:*/		return 0x821DA370;
		  /* 821DA370h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DA370h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DA370h case    6:*/		return 0x821DA374;
		  /* 821DA374h */ case    7:  		/* addic. R31, R11, -40 */
		/* 821DA374h case    7:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821DA374h case    7:*/		return 0x821DA378;
		  /* 821DA378h */ case    8:  		/* bc 12, CR0_EQ, 240 */
		/* 821DA378h case    8:*/		if ( regs.CR[0].eq ) { return 0x821DA468;  }
		/* 821DA378h case    8:*/		return 0x821DA37C;
		  /* 821DA37Ch */ case    9:  		/* addi R29, R31, 4 */
		/* 821DA37Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x4);
		/* 821DA37Ch case    9:*/		return 0x821DA380;
		  /* 821DA380h */ case   10:  		/* lwz R30, <#[R29]> */
		/* 821DA380h case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821DA380h case   10:*/		return 0x821DA384;
		  /* 821DA384h */ case   11:  		/* cmplwi CR6, R30, 0 */
		/* 821DA384h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821DA384h case   11:*/		return 0x821DA388;
		  /* 821DA388h */ case   12:  		/* bc 12, CR6_EQ, 48 */
		/* 821DA388h case   12:*/		if ( regs.CR[6].eq ) { return 0x821DA3B8;  }
		/* 821DA388h case   12:*/		return 0x821DA38C;
		  /* 821DA38Ch */ case   13:  		/* lwz R3, <#[R30 + 16]> */
		/* 821DA38Ch case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 821DA38Ch case   13:*/		return 0x821DA390;
		  /* 821DA390h */ case   14:  		/* cmplwi CR6, R3, 0 */
		/* 821DA390h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821DA390h case   14:*/		return 0x821DA394;
		  /* 821DA394h */ case   15:  		/* bc 12, CR6_EQ, 16 */
		/* 821DA394h case   15:*/		if ( regs.CR[6].eq ) { return 0x821DA3A4;  }
		/* 821DA394h case   15:*/		return 0x821DA398;
		  /* 821DA398h */ case   16:  		/* mr R5, R22 */
		/* 821DA398h case   16:*/		regs.R5 = regs.R22;
		/* 821DA398h case   16:*/		return 0x821DA39C;
		  /* 821DA39Ch */ case   17:  		/* mr R4, R30 */
		/* 821DA39Ch case   17:*/		regs.R4 = regs.R30;
		/* 821DA39Ch case   17:*/		return 0x821DA3A0;
		  /* 821DA3A0h */ case   18:  		/* bl -400016 */
		/* 821DA3A0h case   18:*/		regs.LR = 0x821DA3A4; return 0x82178910;
		/* 821DA3A0h case   18:*/		return 0x821DA3A4;
	}
	return 0x821DA3A4;
} // Block from 821DA358h-821DA3A4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821DA3A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA3A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA3A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA3A4);
		  /* 821DA3A4h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821DA3A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821DA3A4h case    0:*/		return 0x821DA3A8;
		  /* 821DA3A8h */ case    1:  		/* cmplw CR6, R11, R30 */
		/* 821DA3A8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821DA3A8h case    1:*/		return 0x821DA3AC;
		  /* 821DA3ACh */ case    2:  		/* bc 4, CR6_EQ, -44 */
		/* 821DA3ACh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DA380;  }
		/* 821DA3ACh case    2:*/		return 0x821DA3B0;
		  /* 821DA3B0h */ case    3:  		/* addi R29, R30, 8 */
		/* 821DA3B0h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x8);
		/* 821DA3B0h case    3:*/		return 0x821DA3B4;
		  /* 821DA3B4h */ case    4:  		/* b -52 */
		/* 821DA3B4h case    4:*/		return 0x821DA380;
		/* 821DA3B4h case    4:*/		return 0x821DA3B8;
	}
	return 0x821DA3B8;
} // Block from 821DA3A4h-821DA3B8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DA3B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA3B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA3B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA3B8);
		  /* 821DA3B8h */ case    0:  		/* li R6, 1 */
		/* 821DA3B8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821DA3B8h case    0:*/		return 0x821DA3BC;
		  /* 821DA3BCh */ case    1:  		/* li R5, 0 */
		/* 821DA3BCh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DA3BCh case    1:*/		return 0x821DA3C0;
		  /* 821DA3C0h */ case    2:  		/* mr R4, R31 */
		/* 821DA3C0h case    2:*/		regs.R4 = regs.R31;
		/* 821DA3C0h case    2:*/		return 0x821DA3C4;
		  /* 821DA3C4h */ case    3:  		/* mr R3, R22 */
		/* 821DA3C4h case    3:*/		regs.R3 = regs.R22;
		/* 821DA3C4h case    3:*/		return 0x821DA3C8;
		  /* 821DA3C8h */ case    4:  		/* bl 331776 */
		/* 821DA3C8h case    4:*/		regs.LR = 0x821DA3CC; return 0x8222B3C8;
		/* 821DA3C8h case    4:*/		return 0x821DA3CC;
		  /* 821DA3CCh */ case    5:  		/* cmplwi CR6, R27, 0 */
		/* 821DA3CCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821DA3CCh case    5:*/		return 0x821DA3D0;
		  /* 821DA3D0h */ case    6:  		/* bc 12, CR6_EQ, 84 */
		/* 821DA3D0h case    6:*/		if ( regs.CR[6].eq ) { return 0x821DA424;  }
		/* 821DA3D0h case    6:*/		return 0x821DA3D4;
		  /* 821DA3D4h */ case    7:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 821DA3D4h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 821DA3D4h case    7:*/		return 0x821DA3D8;
		  /* 821DA3D8h */ case    8:  		/* lwz R10, <#[R11 + 36]> */
		/* 821DA3D8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 821DA3D8h case    8:*/		return 0x821DA3DC;
		  /* 821DA3DCh */ case    9:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821DA3DCh case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821DA3DCh case    9:*/		return 0x821DA3E0;
		  /* 821DA3E0h */ case   10:  		/* bc 12, CR0_EQ, 12 */
		/* 821DA3E0h case   10:*/		if ( regs.CR[0].eq ) { return 0x821DA3EC;  }
		/* 821DA3E0h case   10:*/		return 0x821DA3E4;
		  /* 821DA3E4h */ case   11:  		/* mr R11, R20 */
		/* 821DA3E4h case   11:*/		regs.R11 = regs.R20;
		/* 821DA3E4h case   11:*/		return 0x821DA3E8;
		  /* 821DA3E8h */ case   12:  		/* b 12 */
		/* 821DA3E8h case   12:*/		return 0x821DA3F4;
		/* 821DA3E8h case   12:*/		return 0x821DA3EC;
	}
	return 0x821DA3EC;
} // Block from 821DA3B8h-821DA3ECh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821DA3ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA3EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA3EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA3EC);
		  /* 821DA3ECh */ case    0:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 821DA3ECh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 821DA3ECh case    0:*/		return 0x821DA3F0;
		  /* 821DA3F0h */ case    1:  		/* addi R11, R11, -40 */
		/* 821DA3F0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 821DA3F0h case    1:*/		return 0x821DA3F4;
	}
	return 0x821DA3F4;
} // Block from 821DA3ECh-821DA3F4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DA3F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA3F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA3F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA3F4);
		  /* 821DA3F4h */ case    0:  		/* cmplw CR6, R31, R11 */
		/* 821DA3F4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821DA3F4h case    0:*/		return 0x821DA3F8;
		  /* 821DA3F8h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 821DA3F8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DA414;  }
		/* 821DA3F8h case    1:*/		return 0x821DA3FC;
		  /* 821DA3FCh */ case    2:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821DA3FCh case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821DA3FCh case    2:*/		return 0x821DA400;
		  /* 821DA400h */ case    3:  		/* mr R27, R31 */
		/* 821DA400h case    3:*/		regs.R27 = regs.R31;
		/* 821DA400h case    3:*/		return 0x821DA404;
		  /* 821DA404h */ case    4:  		/* lwz R11, <#[R11 + 36]> */
		/* 821DA404h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821DA404h case    4:*/		return 0x821DA408;
		  /* 821DA408h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DA408h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DA408h case    5:*/		return 0x821DA40C;
		  /* 821DA40Ch */ case    6:  		/* bc 4, CR0_EQ, 92 */
		/* 821DA40Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x821DA468;  }
		/* 821DA40Ch case    6:*/		return 0x821DA410;
		  /* 821DA410h */ case    7:  		/* b 72 */
		/* 821DA410h case    7:*/		return 0x821DA458;
		/* 821DA410h case    7:*/		return 0x821DA414;
	}
	return 0x821DA414;
} // Block from 821DA3F4h-821DA414h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821DA414h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA414( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA414) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA414);
		  /* 821DA414h */ case    0:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821DA414h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821DA414h case    0:*/		return 0x821DA418;
		  /* 821DA418h */ case    1:  		/* bc 4, CR0_EQ, 80 */
		/* 821DA418h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821DA468;  }
		/* 821DA418h case    1:*/		return 0x821DA41C;
		  /* 821DA41Ch */ case    2:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 821DA41Ch case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 821DA41Ch case    2:*/		return 0x821DA420;
		  /* 821DA420h */ case    3:  		/* b 60 */
		/* 821DA420h case    3:*/		return 0x821DA45C;
		/* 821DA420h case    3:*/		return 0x821DA424;
	}
	return 0x821DA424;
} // Block from 821DA414h-821DA424h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DA424h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA424( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA424) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA424);
		  /* 821DA424h */ case    0:  		/* lwz R11, <#[R28 + 4]> */
		/* 821DA424h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821DA424h case    0:*/		return 0x821DA428;
		  /* 821DA428h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DA428h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DA428h case    1:*/		return 0x821DA42C;
		  /* 821DA42Ch */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821DA42Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x821DA438;  }
		/* 821DA42Ch case    2:*/		return 0x821DA430;
		  /* 821DA430h */ case    3:  		/* mr R11, R20 */
		/* 821DA430h case    3:*/		regs.R11 = regs.R20;
		/* 821DA430h case    3:*/		return 0x821DA434;
		  /* 821DA434h */ case    4:  		/* b 16 */
		/* 821DA434h case    4:*/		return 0x821DA444;
		/* 821DA434h case    4:*/		return 0x821DA438;
	}
	return 0x821DA438;
} // Block from 821DA424h-821DA438h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DA438h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA438);
		  /* 821DA438h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821DA438h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821DA438h case    0:*/		return 0x821DA43C;
		  /* 821DA43Ch */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DA43Ch case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DA43Ch case    1:*/		return 0x821DA440;
		  /* 821DA440h */ case    2:  		/* addi R11, R11, -40 */
		/* 821DA440h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 821DA440h case    2:*/		return 0x821DA444;
	}
	return 0x821DA444;
} // Block from 821DA438h-821DA444h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DA444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA444);
		  /* 821DA444h */ case    0:  		/* cmplw CR6, R31, R11 */
		/* 821DA444h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821DA444h case    0:*/		return 0x821DA448;
		  /* 821DA448h */ case    1:  		/* bc 12, CR6_EQ, -76 */
		/* 821DA448h case    1:*/		if ( regs.CR[6].eq ) { return 0x821DA3FC;  }
		/* 821DA448h case    1:*/		return 0x821DA44C;
		  /* 821DA44Ch */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821DA44Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DA44Ch case    2:*/		return 0x821DA450;
		  /* 821DA450h */ case    3:  		/* bc 4, CR6_EQ, 24 */
		/* 821DA450h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821DA468;  }
		/* 821DA450h case    3:*/		return 0x821DA454;
		  /* 821DA454h */ case    4:  		/* lwz R11, <#[R28]> */
		/* 821DA454h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821DA454h case    4:*/		return 0x821DA458;
	}
	return 0x821DA458;
} // Block from 821DA444h-821DA458h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DA458h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA458);
		  /* 821DA458h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DA458h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DA458h case    0:*/		return 0x821DA45C;
	}
	return 0x821DA45C;
} // Block from 821DA458h-821DA45Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DA45Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA45C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA45C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA45C);
		  /* 821DA45Ch */ case    0:  		/* addi R31, R11, -40 */
		/* 821DA45Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821DA45Ch case    0:*/		return 0x821DA460;
		  /* 821DA460h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 821DA460h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DA460h case    1:*/		return 0x821DA464;
		  /* 821DA464h */ case    2:  		/* bc 4, CR6_EQ, -232 */
		/* 821DA464h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DA37C;  }
		/* 821DA464h case    2:*/		return 0x821DA468;
	}
	return 0x821DA468;
} // Block from 821DA45Ch-821DA468h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DA468h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA468( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA468) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA468);
		  /* 821DA468h */ case    0:  		/* lwz R31, <#[R21 + 20]> */
		/* 821DA468h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R21 + 0x00000014) );
		/* 821DA468h case    0:*/		return 0x821DA46C;
		  /* 821DA46Ch */ case    1:  		/* addi R26, R21, 16 */
		/* 821DA46Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R21,0x10);
		/* 821DA46Ch case    1:*/		return 0x821DA470;
		  /* 821DA470h */ case    2:  		/* mr R27, R20 */
		/* 821DA470h case    2:*/		regs.R27 = regs.R20;
		/* 821DA470h case    2:*/		return 0x821DA474;
		  /* 821DA474h */ case    3:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821DA474h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821DA474h case    3:*/		return 0x821DA478;
		  /* 821DA478h */ case    4:  		/* bc 4, CR0_EQ, 248 */
		/* 821DA478h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821DA570;  }
		/* 821DA478h case    4:*/		return 0x821DA47C;
		  /* 821DA47Ch */ case    5:  		/* cmplwi CR0, R31, 0 */
		/* 821DA47Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821DA47Ch case    5:*/		return 0x821DA480;
		  /* 821DA480h */ case    6:  		/* bc 12, CR0_EQ, 240 */
		/* 821DA480h case    6:*/		if ( regs.CR[0].eq ) { return 0x821DA570;  }
		/* 821DA480h case    6:*/		return 0x821DA484;
		  /* 821DA484h */ case    7:  		/* addi R28, R31, 4 */
		/* 821DA484h case    7:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R31,0x4);
		/* 821DA484h case    7:*/		return 0x821DA488;
		  /* 821DA488h */ case    8:  		/* mr R29, R28 */
		/* 821DA488h case    8:*/		regs.R29 = regs.R28;
		/* 821DA488h case    8:*/		return 0x821DA48C;
		  /* 821DA48Ch */ case    9:  		/* lwz R30, <#[R29]> */
		/* 821DA48Ch case    9:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821DA48Ch case    9:*/		return 0x821DA490;
		  /* 821DA490h */ case   10:  		/* cmplwi CR6, R30, 0 */
		/* 821DA490h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821DA490h case   10:*/		return 0x821DA494;
		  /* 821DA494h */ case   11:  		/* bc 12, CR6_EQ, 64 */
		/* 821DA494h case   11:*/		if ( regs.CR[6].eq ) { return 0x821DA4D4;  }
		/* 821DA494h case   11:*/		return 0x821DA498;
		  /* 821DA498h */ case   12:  		/* lwz R3, <#[R30 + 16]> */
		/* 821DA498h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 821DA498h case   12:*/		return 0x821DA49C;
		  /* 821DA49Ch */ case   13:  		/* cmplwi CR6, R3, 0 */
		/* 821DA49Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821DA49Ch case   13:*/		return 0x821DA4A0;
		  /* 821DA4A0h */ case   14:  		/* bc 12, CR6_EQ, 32 */
		/* 821DA4A0h case   14:*/		if ( regs.CR[6].eq ) { return 0x821DA4C0;  }
		/* 821DA4A0h case   14:*/		return 0x821DA4A4;
		  /* 821DA4A4h */ case   15:  		/* lwz R11, <#[R3 + 28]> */
		/* 821DA4A4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000001C) );
		/* 821DA4A4h case   15:*/		return 0x821DA4A8;
		  /* 821DA4A8h */ case   16:  		/* lwz R11, <#[R11 + 48]> */
		/* 821DA4A8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 821DA4A8h case   16:*/		return 0x821DA4AC;
		  /* 821DA4ACh */ case   17:  		/* rlwinm. R11, R11, 2, 31, 31 */
		/* 821DA4ACh case   17:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R11,regs.R11);
		/* 821DA4ACh case   17:*/		return 0x821DA4B0;
		  /* 821DA4B0h */ case   18:  		/* bc 12, CR0_EQ, 16 */
		/* 821DA4B0h case   18:*/		if ( regs.CR[0].eq ) { return 0x821DA4C0;  }
		/* 821DA4B0h case   18:*/		return 0x821DA4B4;
		  /* 821DA4B4h */ case   19:  		/* mr R5, R22 */
		/* 821DA4B4h case   19:*/		regs.R5 = regs.R22;
		/* 821DA4B4h case   19:*/		return 0x821DA4B8;
		  /* 821DA4B8h */ case   20:  		/* mr R4, R30 */
		/* 821DA4B8h case   20:*/		regs.R4 = regs.R30;
		/* 821DA4B8h case   20:*/		return 0x821DA4BC;
		  /* 821DA4BCh */ case   21:  		/* bl -400300 */
		/* 821DA4BCh case   21:*/		regs.LR = 0x821DA4C0; return 0x82178910;
		/* 821DA4BCh case   21:*/		return 0x821DA4C0;
	}
	return 0x821DA4C0;
} // Block from 821DA468h-821DA4C0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821DA4C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA4C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA4C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA4C0);
		  /* 821DA4C0h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821DA4C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821DA4C0h case    0:*/		return 0x821DA4C4;
		  /* 821DA4C4h */ case    1:  		/* cmplw CR6, R11, R30 */
		/* 821DA4C4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821DA4C4h case    1:*/		return 0x821DA4C8;
		  /* 821DA4C8h */ case    2:  		/* bc 4, CR6_EQ, -60 */
		/* 821DA4C8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DA48C;  }
		/* 821DA4C8h case    2:*/		return 0x821DA4CC;
		  /* 821DA4CCh */ case    3:  		/* addi R29, R30, 8 */
		/* 821DA4CCh case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x8);
		/* 821DA4CCh case    3:*/		return 0x821DA4D0;
		  /* 821DA4D0h */ case    4:  		/* b -68 */
		/* 821DA4D0h case    4:*/		return 0x821DA48C;
		/* 821DA4D0h case    4:*/		return 0x821DA4D4;
	}
	return 0x821DA4D4;
} // Block from 821DA4C0h-821DA4D4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DA4D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA4D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA4D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA4D4);
		  /* 821DA4D4h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821DA4D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821DA4D4h case    0:*/		return 0x821DA4D8;
		  /* 821DA4D8h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 821DA4D8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821DA4D8h case    1:*/		return 0x821DA4DC;
		  /* 821DA4DCh */ case    2:  		/* bc 4, CR6_EQ, 24 */
		/* 821DA4DCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DA4F4;  }
		/* 821DA4DCh case    2:*/		return 0x821DA4E0;
		  /* 821DA4E0h */ case    3:  		/* li R6, 1 */
		/* 821DA4E0h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821DA4E0h case    3:*/		return 0x821DA4E4;
		  /* 821DA4E4h */ case    4:  		/* li R5, 0 */
		/* 821DA4E4h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DA4E4h case    4:*/		return 0x821DA4E8;
		  /* 821DA4E8h */ case    5:  		/* mr R4, R31 */
		/* 821DA4E8h case    5:*/		regs.R4 = regs.R31;
		/* 821DA4E8h case    5:*/		return 0x821DA4EC;
		  /* 821DA4ECh */ case    6:  		/* mr R3, R22 */
		/* 821DA4ECh case    6:*/		regs.R3 = regs.R22;
		/* 821DA4ECh case    6:*/		return 0x821DA4F0;
		  /* 821DA4F0h */ case    7:  		/* bl 331480 */
		/* 821DA4F0h case    7:*/		regs.LR = 0x821DA4F4; return 0x8222B3C8;
		/* 821DA4F0h case    7:*/		return 0x821DA4F4;
	}
	return 0x821DA4F4;
} // Block from 821DA4D4h-821DA4F4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821DA4F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA4F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA4F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA4F4);
		  /* 821DA4F4h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 821DA4F4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821DA4F4h case    0:*/		return 0x821DA4F8;
		  /* 821DA4F8h */ case    1:  		/* bc 12, CR6_EQ, 48 */
		/* 821DA4F8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821DA528;  }
		/* 821DA4F8h case    1:*/		return 0x821DA4FC;
		  /* 821DA4FCh */ case    2:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 821DA4FCh case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 821DA4FCh case    2:*/		return 0x821DA500;
		  /* 821DA500h */ case    3:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DA500h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DA500h case    3:*/		return 0x821DA504;
		  /* 821DA504h */ case    4:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DA504h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DA504h case    4:*/		return 0x821DA508;
		  /* 821DA508h */ case    5:  		/* addic R10, R10, -1 */
		/* 821DA508h case    5:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821DA508h case    5:*/		return 0x821DA50C;
		  /* 821DA50Ch */ case    6:  		/* subfe R10, R10, R10 */
		/* 821DA50Ch case    6:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821DA50Ch case    6:*/		return 0x821DA510;
		  /* 821DA510h */ case    7:  		/* and R10, R10, R11 */
		/* 821DA510h case    7:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821DA510h case    7:*/		return 0x821DA514;
		  /* 821DA514h */ case    8:  		/* cmplw CR6, R31, R10 */
		/* 821DA514h case    8:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 821DA514h case    8:*/		return 0x821DA518;
		  /* 821DA518h */ case    9:  		/* bc 12, CR6_EQ, 44 */
		/* 821DA518h case    9:*/		if ( regs.CR[6].eq ) { return 0x821DA544;  }
		/* 821DA518h case    9:*/		return 0x821DA51C;
		  /* 821DA51Ch */ case   10:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DA51Ch case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DA51Ch case   10:*/		return 0x821DA520;
		  /* 821DA520h */ case   11:  		/* bc 4, CR0_EQ, 80 */
		/* 821DA520h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821DA570;  }
		/* 821DA520h case   11:*/		return 0x821DA524;
		  /* 821DA524h */ case   12:  		/* b 64 */
		/* 821DA524h case   12:*/		return 0x821DA564;
		/* 821DA524h case   12:*/		return 0x821DA528;
	}
	return 0x821DA528;
} // Block from 821DA4F4h-821DA528h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821DA528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA528);
		  /* 821DA528h */ case    0:  		/* lwz R11, <#[R26 + 4]> */
		/* 821DA528h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 821DA528h case    0:*/		return 0x821DA52C;
		  /* 821DA52Ch */ case    1:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DA52Ch case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DA52Ch case    1:*/		return 0x821DA530;
		  /* 821DA530h */ case    2:  		/* addic R9, R10, -1 */
		/* 821DA530h case    2:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R10,0xFFFFFFFF);
		/* 821DA530h case    2:*/		return 0x821DA534;
		  /* 821DA534h */ case    3:  		/* subfe R9, R9, R9 */
		/* 821DA534h case    3:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821DA534h case    3:*/		return 0x821DA538;
		  /* 821DA538h */ case    4:  		/* and R9, R9, R11 */
		/* 821DA538h case    4:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 821DA538h case    4:*/		return 0x821DA53C;
		  /* 821DA53Ch */ case    5:  		/* cmplw CR6, R31, R9 */
		/* 821DA53Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R9);
		/* 821DA53Ch case    5:*/		return 0x821DA540;
		  /* 821DA540h */ case    6:  		/* bc 4, CR6_EQ, 28 */
		/* 821DA540h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DA55C;  }
		/* 821DA540h case    6:*/		return 0x821DA544;
	}
	return 0x821DA544;
} // Block from 821DA528h-821DA544h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DA544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA544);
		  /* 821DA544h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821DA544h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821DA544h case    0:*/		return 0x821DA548;
		  /* 821DA548h */ case    1:  		/* mr R27, R31 */
		/* 821DA548h case    1:*/		regs.R27 = regs.R31;
		/* 821DA548h case    1:*/		return 0x821DA54C;
		  /* 821DA54Ch */ case    2:  		/* lwz R31, <#[R11 + 40]> */
		/* 821DA54Ch case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821DA54Ch case    2:*/		return 0x821DA550;
		  /* 821DA550h */ case    3:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821DA550h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821DA550h case    3:*/		return 0x821DA554;
		  /* 821DA554h */ case    4:  		/* bc 4, CR0_EQ, 28 */
		/* 821DA554h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821DA570;  }
		/* 821DA554h case    4:*/		return 0x821DA558;
		  /* 821DA558h */ case    5:  		/* b 16 */
		/* 821DA558h case    5:*/		return 0x821DA568;
		/* 821DA558h case    5:*/		return 0x821DA55C;
	}
	return 0x821DA55C;
} // Block from 821DA544h-821DA55Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DA55Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA55C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA55C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA55C);
		  /* 821DA55Ch */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821DA55Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DA55Ch case    0:*/		return 0x821DA560;
		  /* 821DA560h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 821DA560h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DA570;  }
		/* 821DA560h case    1:*/		return 0x821DA564;
	}
	return 0x821DA564;
} // Block from 821DA55Ch-821DA564h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DA564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA564);
		  /* 821DA564h */ case    0:  		/* mr R31, R11 */
		/* 821DA564h case    0:*/		regs.R31 = regs.R11;
		/* 821DA564h case    0:*/		return 0x821DA568;
	}
	return 0x821DA568;
} // Block from 821DA564h-821DA568h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DA568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA568);
		  /* 821DA568h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821DA568h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DA568h case    0:*/		return 0x821DA56C;
		  /* 821DA56Ch */ case    1:  		/* bc 4, CR6_EQ, -232 */
		/* 821DA56Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DA484;  }
		/* 821DA56Ch case    1:*/		return 0x821DA570;
	}
	return 0x821DA570;
} // Block from 821DA568h-821DA570h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DA570h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA570);
		  /* 821DA570h */ case    0:  		/* mr R4, R25 */
		/* 821DA570h case    0:*/		regs.R4 = regs.R25;
		/* 821DA570h case    0:*/		return 0x821DA574;
		  /* 821DA574h */ case    1:  		/* mr R3, R22 */
		/* 821DA574h case    1:*/		regs.R3 = regs.R22;
		/* 821DA574h case    1:*/		return 0x821DA578;
		  /* 821DA578h */ case    2:  		/* bl -481416 */
		/* 821DA578h case    2:*/		regs.LR = 0x821DA57C; return 0x82164CF0;
		/* 821DA578h case    2:*/		return 0x821DA57C;
		  /* 821DA57Ch */ case    3:  		/* lwz R11, <#[R22 + 4]> */
		/* 821DA57Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821DA57Ch case    3:*/		return 0x821DA580;
		  /* 821DA580h */ case    4:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DA580h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DA580h case    4:*/		return 0x821DA584;
		  /* 821DA584h */ case    5:  		/* bc 4, CR0_EQ, 56 */
		/* 821DA584h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821DA5BC;  }
		/* 821DA584h case    5:*/		return 0x821DA588;
		  /* 821DA588h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 821DA588h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DA588h case    6:*/		return 0x821DA58C;
		  /* 821DA58Ch */ case    7:  		/* bc 12, CR0_EQ, 48 */
		/* 821DA58Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x821DA5BC;  }
		/* 821DA58Ch case    7:*/		return 0x821DA590;
		  /* 821DA590h */ case    8:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DA590h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DA590h case    8:*/		return 0x821DA594;
		  /* 821DA594h */ case    9:  		/* rlwinm. R9, R10, 2, 31, 31 */
		/* 821DA594h case    9:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R9,regs.R10);
		/* 821DA594h case    9:*/		return 0x821DA598;
		  /* 821DA598h */ case   10:  		/* bc 12, CR0_EQ, 12 */
		/* 821DA598h case   10:*/		if ( regs.CR[0].eq ) { return 0x821DA5A4;  }
		/* 821DA598h case   10:*/		return 0x821DA59C;
		  /* 821DA59Ch */ case   11:  		/* rlwinm R10, R10, 0, 2, 0 */
		/* 821DA59Ch case   11:*/		cpu::op::rlwinm<0,0,2,0>(regs,&regs.R10,regs.R10);
		/* 821DA59Ch case   11:*/		return 0x821DA5A0;
		  /* 821DA5A0h */ case   12:  		/* stw R10, <#[R11 + 48]> */
		/* 821DA5A0h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DA5A0h case   12:*/		return 0x821DA5A4;
	}
	return 0x821DA5A4;
} // Block from 821DA570h-821DA5A4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821DA5A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA5A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA5A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA5A4);
		  /* 821DA5A4h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DA5A4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DA5A4h case    0:*/		return 0x821DA5A8;
		  /* 821DA5A8h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DA5A8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DA5A8h case    1:*/		return 0x821DA5AC;
		  /* 821DA5ACh */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DA5ACh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DA5ACh case    2:*/		return 0x821DA5B0;
		  /* 821DA5B0h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821DA5B0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DA5BC;  }
		/* 821DA5B0h case    3:*/		return 0x821DA5B4;
		  /* 821DA5B4h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821DA5B4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DA5B4h case    4:*/		return 0x821DA5B8;
		  /* 821DA5B8h */ case    5:  		/* bc 4, CR6_EQ, -40 */
		/* 821DA5B8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821DA590;  }
		/* 821DA5B8h case    5:*/		return 0x821DA5BC;
	}
	return 0x821DA5BC;
} // Block from 821DA5A4h-821DA5BCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DA5BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA5BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA5BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA5BC);
		  /* 821DA5BCh */ case    0:  		/* rlwinm. R11, R18, 0, 24, 31 */
		/* 821DA5BCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R18);
		/* 821DA5BCh case    0:*/		return 0x821DA5C0;
		  /* 821DA5C0h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821DA5C0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DA5D0;  }
		/* 821DA5C0h case    1:*/		return 0x821DA5C4;
		  /* 821DA5C4h */ case    2:  		/* mr R4, R21 */
		/* 821DA5C4h case    2:*/		regs.R4 = regs.R21;
		/* 821DA5C4h case    2:*/		return 0x821DA5C8;
		  /* 821DA5C8h */ case    3:  		/* mr R3, R22 */
		/* 821DA5C8h case    3:*/		regs.R3 = regs.R22;
		/* 821DA5C8h case    3:*/		return 0x821DA5CC;
		  /* 821DA5CCh */ case    4:  		/* bl -44108 */
		/* 821DA5CCh case    4:*/		regs.LR = 0x821DA5D0; return 0x821CF980;
		/* 821DA5CCh case    4:*/		return 0x821DA5D0;
	}
	return 0x821DA5D0;
} // Block from 821DA5BCh-821DA5D0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DA5D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA5D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA5D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA5D0);
		  /* 821DA5D0h */ case    0:  		/* mr R3, R22 */
		/* 821DA5D0h case    0:*/		regs.R3 = regs.R22;
		/* 821DA5D0h case    0:*/		return 0x821DA5D4;
		  /* 821DA5D4h */ case    1:  		/* bl 68940 */
		/* 821DA5D4h case    1:*/		regs.LR = 0x821DA5D8; return 0x821EB320;
		/* 821DA5D4h case    1:*/		return 0x821DA5D8;
		  /* 821DA5D8h */ case    2:  		/* lwz R11, <#[R22 + 4]> */
		/* 821DA5D8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821DA5D8h case    2:*/		return 0x821DA5DC;
		  /* 821DA5DCh */ case    3:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DA5DCh case    3:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DA5DCh case    3:*/		return 0x821DA5E0;
		  /* 821DA5E0h */ case    4:  		/* addic R10, R10, -1 */
		/* 821DA5E0h case    4:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821DA5E0h case    4:*/		return 0x821DA5E4;
		  /* 821DA5E4h */ case    5:  		/* subfe R10, R10, R10 */
		/* 821DA5E4h case    5:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821DA5E4h case    5:*/		return 0x821DA5E8;
		  /* 821DA5E8h */ case    6:  		/* and R11, R10, R11 */
		/* 821DA5E8h case    6:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821DA5E8h case    6:*/		return 0x821DA5EC;
		  /* 821DA5ECh */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DA5ECh case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DA5ECh case    7:*/		return 0x821DA5F0;
		  /* 821DA5F0h */ case    8:  		/* b 232 */
		/* 821DA5F0h case    8:*/		return 0x821DA6D8;
		/* 821DA5F0h case    8:*/		return 0x821DA5F4;
		  /* 821DA5F4h */ case    9:  		/* lwz R11, <#[R27 + 20]> */
		/* 821DA5F4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 821DA5F4h case    9:*/		return 0x821DA5F8;
		  /* 821DA5F8h */ case   10:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DA5F8h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DA5F8h case   10:*/		return 0x821DA5FC;
		  /* 821DA5FCh */ case   11:  		/* bc 4, CR0_EQ, 216 */
		/* 821DA5FCh case   11:*/		if ( !regs.CR[0].eq ) { return 0x821DA6D4;  }
		/* 821DA5FCh case   11:*/		return 0x821DA600;
		  /* 821DA600h */ case   12:  		/* mr R29, R11 */
		/* 821DA600h case   12:*/		regs.R29 = regs.R11;
		/* 821DA600h case   12:*/		return 0x821DA604;
		  /* 821DA604h */ case   13:  		/* cmplwi CR0, R11, 0 */
		/* 821DA604h case   13:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DA604h case   13:*/		return 0x821DA608;
		  /* 821DA608h */ case   14:  		/* bc 12, CR0_EQ, 204 */
		/* 821DA608h case   14:*/		if ( regs.CR[0].eq ) { return 0x821DA6D4;  }
		/* 821DA608h case   14:*/		return 0x821DA60C;
		  /* 821DA60Ch */ case   15:  		/* lwz R11, <#[R29 + 8]> */
		/* 821DA60Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821DA60Ch case   15:*/		return 0x821DA610;
		  /* 821DA610h */ case   16:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DA610h case   16:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DA610h case   16:*/		return 0x821DA614;
		  /* 821DA614h */ case   17:  		/* cmplwi CR6, R11, 14336 */
		/* 821DA614h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821DA614h case   17:*/		return 0x821DA618;
		  /* 821DA618h */ case   18:  		/* bc 4, CR6_EQ, 160 */
		/* 821DA618h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821DA6B8;  }
		/* 821DA618h case   18:*/		return 0x821DA61C;
		  /* 821DA61Ch */ case   19:  		/* mr R28, R29 */
		/* 821DA61Ch case   19:*/		regs.R28 = regs.R29;
		/* 821DA61Ch case   19:*/		return 0x821DA620;
		  /* 821DA620h */ case   20:  		/* lwz R30, <#[R28]> */
		/* 821DA620h case   20:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000000) );
		/* 821DA620h case   20:*/		return 0x821DA624;
		  /* 821DA624h */ case   21:  		/* cmplwi CR6, R30, 0 */
		/* 821DA624h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821DA624h case   21:*/		return 0x821DA628;
		  /* 821DA628h */ case   22:  		/* bc 12, CR6_EQ, 144 */
		/* 821DA628h case   22:*/		if ( regs.CR[6].eq ) { return 0x821DA6B8;  }
		/* 821DA628h case   22:*/		return 0x821DA62C;
		  /* 821DA62Ch */ case   23:  		/* stb R20, <#[R1 + 104]> */
		/* 821DA62Ch case   23:*/		cpu::mem::store8( regs, regs.R20, (uint32)(regs.R1 + 0x00000068) );
		/* 821DA62Ch case   23:*/		return 0x821DA630;
		  /* 821DA630h */ case   24:  		/* addi R3, R1, 80 */
		/* 821DA630h case   24:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821DA630h case   24:*/		return 0x821DA634;
		  /* 821DA634h */ case   25:  		/* stw R20, <#[R1 + 96]> */
		/* 821DA634h case   25:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000060) );
		/* 821DA634h case   25:*/		return 0x821DA638;
		  /* 821DA638h */ case   26:  		/* stw R27, <#[R1 + 80]> */
		/* 821DA638h case   26:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000050) );
		/* 821DA638h case   26:*/		return 0x821DA63C;
		  /* 821DA63Ch */ case   27:  		/* stw R20, <#[R1 + 88]> */
		/* 821DA63Ch case   27:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000058) );
		/* 821DA63Ch case   27:*/		return 0x821DA640;
		  /* 821DA640h */ case   28:  		/* stw R20, <#[R1 + 100]> */
		/* 821DA640h case   28:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000064) );
		/* 821DA640h case   28:*/		return 0x821DA644;
		  /* 821DA644h */ case   29:  		/* lwz R4, <#[R27 + 8]> */
		/* 821DA644h case   29:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000008) );
		/* 821DA644h case   29:*/		return 0x821DA648;
		  /* 821DA648h */ case   30:  		/* bl 349048 */
		/* 821DA648h case   30:*/		regs.LR = 0x821DA64C; return 0x8222F9C0;
		/* 821DA648h case   30:*/		return 0x821DA64C;
		  /* 821DA64Ch */ case   31:  		/* addi R3, R1, 80 */
		/* 821DA64Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821DA64Ch case   31:*/		return 0x821DA650;
		  /* 821DA650h */ case   32:  		/* bl -449360 */
		/* 821DA650h case   32:*/		regs.LR = 0x821DA654; return 0x8216CB00;
		/* 821DA650h case   32:*/		return 0x821DA654;
		  /* 821DA654h */ case   33:  		/* or. R31, R3, R3 */
		/* 821DA654h case   33:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821DA654h case   33:*/		return 0x821DA658;
		  /* 821DA658h */ case   34:  		/* bc 12, CR0_EQ, 60 */
		/* 821DA658h case   34:*/		if ( regs.CR[0].eq ) { return 0x821DA694;  }
		/* 821DA658h case   34:*/		return 0x821DA65C;
		  /* 821DA65Ch */ case   35:  		/* li R7, 1 */
		/* 821DA65Ch case   35:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821DA65Ch case   35:*/		return 0x821DA660;
		  /* 821DA660h */ case   36:  		/* li R6, 0 */
		/* 821DA660h case   36:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821DA660h case   36:*/		return 0x821DA664;
		  /* 821DA664h */ case   37:  		/* mr R5, R31 */
		/* 821DA664h case   37:*/		regs.R5 = regs.R31;
		/* 821DA664h case   37:*/		return 0x821DA668;
		  /* 821DA668h */ case   38:  		/* mr R4, R29 */
		/* 821DA668h case   38:*/		regs.R4 = regs.R29;
		/* 821DA668h case   38:*/		return 0x821DA66C;
		  /* 821DA66Ch */ case   39:  		/* mr R3, R22 */
		/* 821DA66Ch case   39:*/		regs.R3 = regs.R22;
		/* 821DA66Ch case   39:*/		return 0x821DA670;
		  /* 821DA670h */ case   40:  		/* bl 56976 */
		/* 821DA670h case   40:*/		regs.LR = 0x821DA674; return 0x821E8500;
		/* 821DA670h case   40:*/		return 0x821DA674;
		  /* 821DA674h */ case   41:  		/* cmplw CR6, R3, R30 */
		/* 821DA674h case   41:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R30);
		/* 821DA674h case   41:*/		return 0x821DA678;
		  /* 821DA678h */ case   42:  		/* bc 12, CR6_EQ, 20 */
		/* 821DA678h case   42:*/		if ( regs.CR[6].eq ) { return 0x821DA68C;  }
		/* 821DA678h case   42:*/		return 0x821DA67C;
		  /* 821DA67Ch */ case   43:  		/* addi R3, R1, 80 */
		/* 821DA67Ch case   43:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821DA67Ch case   43:*/		return 0x821DA680;
		  /* 821DA680h */ case   44:  		/* bl -449408 */
		/* 821DA680h case   44:*/		regs.LR = 0x821DA684; return 0x8216CB00;
		/* 821DA680h case   44:*/		return 0x821DA684;
		  /* 821DA684h */ case   45:  		/* or. R31, R3, R3 */
		/* 821DA684h case   45:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 821DA684h case   45:*/		return 0x821DA688;
		  /* 821DA688h */ case   46:  		/* bc 4, CR0_EQ, -44 */
		/* 821DA688h case   46:*/		if ( !regs.CR[0].eq ) { return 0x821DA65C;  }
		/* 821DA688h case   46:*/		return 0x821DA68C;
	}
	return 0x821DA68C;
} // Block from 821DA5D0h-821DA68Ch (47 instructions)

//////////////////////////////////////////////////////
// Block at 821DA68Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA68C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA68C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA68C);
		  /* 821DA68Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821DA68Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DA68Ch case    0:*/		return 0x821DA690;
		  /* 821DA690h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 821DA690h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DA6A4;  }
		/* 821DA690h case    1:*/		return 0x821DA694;
	}
	return 0x821DA694;
} // Block from 821DA68Ch-821DA694h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DA694h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA694( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA694) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA694);
		  /* 821DA694h */ case    0:  		/* mr R5, R22 */
		/* 821DA694h case    0:*/		regs.R5 = regs.R22;
		/* 821DA694h case    0:*/		return 0x821DA698;
		  /* 821DA698h */ case    1:  		/* mr R4, R30 */
		/* 821DA698h case    1:*/		regs.R4 = regs.R30;
		/* 821DA698h case    1:*/		return 0x821DA69C;
		  /* 821DA69Ch */ case    2:  		/* mr R3, R29 */
		/* 821DA69Ch case    2:*/		regs.R3 = regs.R29;
		/* 821DA69Ch case    2:*/		return 0x821DA6A0;
		  /* 821DA6A0h */ case    3:  		/* bl -400784 */
		/* 821DA6A0h case    3:*/		regs.LR = 0x821DA6A4; return 0x82178910;
		/* 821DA6A0h case    3:*/		return 0x821DA6A4;
	}
	return 0x821DA6A4;
} // Block from 821DA694h-821DA6A4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DA6A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA6A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA6A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA6A4);
		  /* 821DA6A4h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821DA6A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821DA6A4h case    0:*/		return 0x821DA6A8;
		  /* 821DA6A8h */ case    1:  		/* cmplw CR6, R11, R30 */
		/* 821DA6A8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821DA6A8h case    1:*/		return 0x821DA6AC;
		  /* 821DA6ACh */ case    2:  		/* bc 4, CR6_EQ, -140 */
		/* 821DA6ACh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DA620;  }
		/* 821DA6ACh case    2:*/		return 0x821DA6B0;
		  /* 821DA6B0h */ case    3:  		/* addi R28, R30, 4 */
		/* 821DA6B0h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R30,0x4);
		/* 821DA6B0h case    3:*/		return 0x821DA6B4;
		  /* 821DA6B4h */ case    4:  		/* b -148 */
		/* 821DA6B4h case    4:*/		return 0x821DA620;
		/* 821DA6B4h case    4:*/		return 0x821DA6B8;
	}
	return 0x821DA6B8;
} // Block from 821DA6A4h-821DA6B8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DA6B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA6B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA6B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA6B8);
		  /* 821DA6B8h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821DA6B8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821DA6B8h case    0:*/		return 0x821DA6BC;
		  /* 821DA6BCh */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DA6BCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DA6BCh case    1:*/		return 0x821DA6C0;
		  /* 821DA6C0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DA6C0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DA6C0h case    2:*/		return 0x821DA6C4;
		  /* 821DA6C4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DA6C4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DA6D4;  }
		/* 821DA6C4h case    3:*/		return 0x821DA6C8;
		  /* 821DA6C8h */ case    4:  		/* mr R29, R11 */
		/* 821DA6C8h case    4:*/		regs.R29 = regs.R11;
		/* 821DA6C8h case    4:*/		return 0x821DA6CC;
		  /* 821DA6CCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DA6CCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DA6CCh case    5:*/		return 0x821DA6D0;
		  /* 821DA6D0h */ case    6:  		/* bc 4, CR6_EQ, -196 */
		/* 821DA6D0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DA60C;  }
		/* 821DA6D0h case    6:*/		return 0x821DA6D4;
	}
	return 0x821DA6D4;
} // Block from 821DA6B8h-821DA6D4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DA6D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA6D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA6D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA6D4);
		  /* 821DA6D4h */ case    0:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 821DA6D4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 821DA6D4h case    0:*/		return 0x821DA6D8;
	}
	return 0x821DA6D8;
} // Block from 821DA6D4h-821DA6D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DA6D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA6D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA6D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA6D8);
		  /* 821DA6D8h */ case    0:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DA6D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DA6D8h case    0:*/		return 0x821DA6DC;
		  /* 821DA6DCh */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DA6DCh case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DA6DCh case    1:*/		return 0x821DA6E0;
		  /* 821DA6E0h */ case    2:  		/* bc 4, CR0_EQ, -3660 */
		/* 821DA6E0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821D9894;  }
		/* 821DA6E0h case    2:*/		return 0x821DA6E4;
		  /* 821DA6E4h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821DA6E4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DA6E4h case    3:*/		return 0x821DA6E8;
		  /* 821DA6E8h */ case    4:  		/* mr R27, R11 */
		/* 821DA6E8h case    4:*/		regs.R27 = regs.R11;
		/* 821DA6E8h case    4:*/		return 0x821DA6EC;
		  /* 821DA6ECh */ case    5:  		/* bc 4, CR6_EQ, -248 */
		/* 821DA6ECh case    5:*/		if ( !regs.CR[6].eq ) { return 0x821DA5F4;  }
		/* 821DA6ECh case    5:*/		return 0x821DA6F0;
		  /* 821DA6F0h */ case    6:  		/* b -3676 */
		/* 821DA6F0h case    6:*/		return 0x821D9894;
		/* 821DA6F0h case    6:*/		return 0x821DA6F4;
	}
	return 0x821DA6F4;
} // Block from 821DA6D8h-821DA6F4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DA6F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA6F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA6F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA6F4);
		  /* 821DA6F4h */ case    0:  		/* li R4, 4800 */
		/* 821DA6F4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821DA6F4h case    0:*/		return 0x821DA6F8;
		  /* 821DA6F8h */ case    1:  		/* mr R3, R22 */
		/* 821DA6F8h case    1:*/		regs.R3 = regs.R22;
		/* 821DA6F8h case    1:*/		return 0x821DA6FC;
		  /* 821DA6FCh */ case    2:  		/* bl -559252 */
		/* 821DA6FCh case    2:*/		regs.LR = 0x821DA700; return 0x82151E68;
		/* 821DA6FCh case    2:*/		return 0x821DA700;
		  /* 821DA700h */ case    3:  		/* lwz R10, <#[R11 + 8]> */
		/* 821DA700h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821DA700h case    3:*/		return 0x821DA704;
		  /* 821DA704h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821DA704h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DA704h case    4:*/		return 0x821DA708;
		  /* 821DA708h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821DA708h case    5:*/		if ( regs.CR[6].eq ) { return 0x821DA718;  }
		/* 821DA708h case    5:*/		return 0x821DA70C;
		  /* 821DA70Ch */ case    6:  		/* lwz R10, <#[R10 + 4]> */
		/* 821DA70Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821DA70Ch case    6:*/		return 0x821DA710;
		  /* 821DA710h */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 821DA710h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DA710h case    7:*/		return 0x821DA714;
		  /* 821DA714h */ case    8:  		/* bc 4, CR6_EQ, 12 */
		/* 821DA714h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821DA720;  }
		/* 821DA714h case    8:*/		return 0x821DA718;
	}
	return 0x821DA718;
} // Block from 821DA6F4h-821DA718h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821DA718h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA718( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA718) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA718);
		  /* 821DA718h */ case    0:  		/* stw R24, <#[R11 + 44]> */
		/* 821DA718h case    0:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R11 + 0x0000002C) );
		/* 821DA718h case    0:*/		return 0x821DA71C;
		  /* 821DA71Ch */ case    1:  		/* li R9, 1 */
		/* 821DA71Ch case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821DA71Ch case    1:*/		return 0x821DA720;
	}
	return 0x821DA720;
} // Block from 821DA718h-821DA720h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DA720h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA720( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA720) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA720);
		  /* 821DA720h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DA720h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DA720h case    0:*/		return 0x821DA724;
		  /* 821DA724h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DA724h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DA724h case    1:*/		return 0x821DA728;
		  /* 821DA728h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DA728h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DA728h case    2:*/		return 0x821DA72C;
		  /* 821DA72Ch */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821DA72Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DA738;  }
		/* 821DA72Ch case    3:*/		return 0x821DA730;
		  /* 821DA730h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821DA730h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DA730h case    4:*/		return 0x821DA734;
		  /* 821DA734h */ case    5:  		/* bc 4, CR6_EQ, -52 */
		/* 821DA734h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821DA700;  }
		/* 821DA734h case    5:*/		return 0x821DA738;
	}
	return 0x821DA738;
} // Block from 821DA720h-821DA738h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DA738h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA738( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA738) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA738);
		  /* 821DA738h */ case    0:  		/* rlwinm. R11, R9, 0, 24, 31 */
		/* 821DA738h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R9);
		/* 821DA738h case    0:*/		return 0x821DA73C;
		  /* 821DA73Ch */ case    1:  		/* mr R23, R19 */
		/* 821DA73Ch case    1:*/		regs.R23 = regs.R19;
		/* 821DA73Ch case    1:*/		return 0x821DA740;
		  /* 821DA740h */ case    2:  		/* bc 12, CR0_EQ, 744 */
		/* 821DA740h case    2:*/		if ( regs.CR[0].eq ) { return 0x821DAA28;  }
		/* 821DA740h case    2:*/		return 0x821DA744;
		  /* 821DA744h */ case    3:  		/* mr R23, R20 */
		/* 821DA744h case    3:*/		regs.R23 = regs.R20;
		/* 821DA744h case    3:*/		return 0x821DA748;
		  /* 821DA748h */ case    4:  		/* li R19, 1 */
		/* 821DA748h case    4:*/		cpu::op::li<0>(regs,&regs.R19,0x1);
		/* 821DA748h case    4:*/		return 0x821DA74C;
		  /* 821DA74Ch */ case    5:  		/* mr R4, R24 */
		/* 821DA74Ch case    5:*/		regs.R4 = regs.R24;
		/* 821DA74Ch case    5:*/		return 0x821DA750;
		  /* 821DA750h */ case    6:  		/* mr R3, R22 */
		/* 821DA750h case    6:*/		regs.R3 = regs.R22;
		/* 821DA750h case    6:*/		return 0x821DA754;
		  /* 821DA754h */ case    7:  		/* bl -113028 */
		/* 821DA754h case    7:*/		regs.LR = 0x821DA758; return 0x821BEDD0;
		/* 821DA754h case    7:*/		return 0x821DA758;
		  /* 821DA758h */ case    8:  		/* mr R3, R22 */
		/* 821DA758h case    8:*/		regs.R3 = regs.R22;
		/* 821DA758h case    8:*/		return 0x821DA75C;
		  /* 821DA75Ch */ case    9:  		/* mr R25, R20 */
		/* 821DA75Ch case    9:*/		regs.R25 = regs.R20;
		/* 821DA75Ch case    9:*/		return 0x821DA760;
		  /* 821DA760h */ case   10:  		/* bl 68544 */
		/* 821DA760h case   10:*/		regs.LR = 0x821DA764; return 0x821EB320;
		/* 821DA760h case   10:*/		return 0x821DA764;
		  /* 821DA764h */ case   11:  		/* lwz R11, <#[R22 + 4]> */
		/* 821DA764h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821DA764h case   11:*/		return 0x821DA768;
		  /* 821DA768h */ case   12:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DA768h case   12:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DA768h case   12:*/		return 0x821DA76C;
		  /* 821DA76Ch */ case   13:  		/* addic R10, R10, -1 */
		/* 821DA76Ch case   13:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821DA76Ch case   13:*/		return 0x821DA770;
		  /* 821DA770h */ case   14:  		/* subfe R10, R10, R10 */
		/* 821DA770h case   14:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821DA770h case   14:*/		return 0x821DA774;
		  /* 821DA774h */ case   15:  		/* and R11, R10, R11 */
		/* 821DA774h case   15:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821DA774h case   15:*/		return 0x821DA778;
		  /* 821DA778h */ case   16:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DA778h case   16:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DA778h case   16:*/		return 0x821DA77C;
		  /* 821DA77Ch */ case   17:  		/* b 584 */
		/* 821DA77Ch case   17:*/		return 0x821DA9C4;
		/* 821DA77Ch case   17:*/		return 0x821DA780;
		  /* 821DA780h */ case   18:  		/* lwz R11, <#[R26 + 20]> */
		/* 821DA780h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000014) );
		/* 821DA780h case   18:*/		return 0x821DA784;
		  /* 821DA784h */ case   19:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DA784h case   19:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DA784h case   19:*/		return 0x821DA788;
		  /* 821DA788h */ case   20:  		/* addic R10, R10, -1 */
		/* 821DA788h case   20:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821DA788h case   20:*/		return 0x821DA78C;
		  /* 821DA78Ch */ case   21:  		/* subfe R10, R10, R10 */
		/* 821DA78Ch case   21:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821DA78Ch case   21:*/		return 0x821DA790;
		  /* 821DA790h */ case   22:  		/* and R31, R10, R11 */
		/* 821DA790h case   22:*/		cpu::op::and<0>(regs,&regs.R31,regs.R10,regs.R11);
		/* 821DA790h case   22:*/		return 0x821DA794;
		  /* 821DA794h */ case   23:  		/* cmplwi CR6, R31, 0 */
		/* 821DA794h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DA794h case   23:*/		return 0x821DA798;
		  /* 821DA798h */ case   24:  		/* bc 12, CR6_EQ, 552 */
		/* 821DA798h case   24:*/		if ( regs.CR[6].eq ) { return 0x821DA9C0;  }
		/* 821DA798h case   24:*/		return 0x821DA79C;
		  /* 821DA79Ch */ case   25:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DA79Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DA79Ch case   25:*/		return 0x821DA7A0;
		  /* 821DA7A0h */ case   26:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DA7A0h case   26:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DA7A0h case   26:*/		return 0x821DA7A4;
		  /* 821DA7A4h */ case   27:  		/* cmplwi CR6, R11, 14336 */
		/* 821DA7A4h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821DA7A4h case   27:*/		return 0x821DA7A8;
		  /* 821DA7A8h */ case   28:  		/* bc 4, CR6_EQ, 524 */
		/* 821DA7A8h case   28:*/		if ( !regs.CR[6].eq ) { return 0x821DA9B4;  }
		/* 821DA7A8h case   28:*/		return 0x821DA7AC;
		  /* 821DA7ACh */ case   29:  		/* mr R27, R20 */
		/* 821DA7ACh case   29:*/		regs.R27 = regs.R20;
		/* 821DA7ACh case   29:*/		return 0x821DA7B0;
		  /* 821DA7B0h */ case   30:  		/* mr R28, R31 */
		/* 821DA7B0h case   30:*/		regs.R28 = regs.R31;
		/* 821DA7B0h case   30:*/		return 0x821DA7B4;
		  /* 821DA7B4h */ case   31:  		/* lwz R29, <#[R28]> */
		/* 821DA7B4h case   31:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x00000000) );
		/* 821DA7B4h case   31:*/		return 0x821DA7B8;
		  /* 821DA7B8h */ case   32:  		/* cmplwi CR6, R29, 0 */
		/* 821DA7B8h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821DA7B8h case   32:*/		return 0x821DA7BC;
		  /* 821DA7BCh */ case   33:  		/* bc 12, CR6_EQ, 180 */
		/* 821DA7BCh case   33:*/		if ( regs.CR[6].eq ) { return 0x821DA870;  }
		/* 821DA7BCh case   33:*/		return 0x821DA7C0;
		  /* 821DA7C0h */ case   34:  		/* stw R20, <#[R1 + 128]> */
		/* 821DA7C0h case   34:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000080) );
		/* 821DA7C0h case   34:*/		return 0x821DA7C4;
		  /* 821DA7C4h */ case   35:  		/* addi R3, R1, 112 */
		/* 821DA7C4h case   35:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 821DA7C4h case   35:*/		return 0x821DA7C8;
		  /* 821DA7C8h */ case   36:  		/* stb R20, <#[R1 + 136]> */
		/* 821DA7C8h case   36:*/		cpu::mem::store8( regs, regs.R20, (uint32)(regs.R1 + 0x00000088) );
		/* 821DA7C8h case   36:*/		return 0x821DA7CC;
		  /* 821DA7CCh */ case   37:  		/* stw R20, <#[R1 + 132]> */
		/* 821DA7CCh case   37:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000084) );
		/* 821DA7CCh case   37:*/		return 0x821DA7D0;
		  /* 821DA7D0h */ case   38:  		/* stw R26, <#[R1 + 112]> */
		/* 821DA7D0h case   38:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R1 + 0x00000070) );
		/* 821DA7D0h case   38:*/		return 0x821DA7D4;
		  /* 821DA7D4h */ case   39:  		/* stw R20, <#[R1 + 120]> */
		/* 821DA7D4h case   39:*/		cpu::mem::store32( regs, regs.R20, (uint32)(regs.R1 + 0x00000078) );
		/* 821DA7D4h case   39:*/		return 0x821DA7D8;
		  /* 821DA7D8h */ case   40:  		/* lwz R4, <#[R26 + 8]> */
		/* 821DA7D8h case   40:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x00000008) );
		/* 821DA7D8h case   40:*/		return 0x821DA7DC;
		  /* 821DA7DCh */ case   41:  		/* bl 348644 */
		/* 821DA7DCh case   41:*/		regs.LR = 0x821DA7E0; return 0x8222F9C0;
		/* 821DA7DCh case   41:*/		return 0x821DA7E0;
		  /* 821DA7E0h */ case   42:  		/* addi R3, R1, 112 */
		/* 821DA7E0h case   42:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 821DA7E0h case   42:*/		return 0x821DA7E4;
		  /* 821DA7E4h */ case   43:  		/* bl -449764 */
		/* 821DA7E4h case   43:*/		regs.LR = 0x821DA7E8; return 0x8216CB00;
		/* 821DA7E4h case   43:*/		return 0x821DA7E8;
		  /* 821DA7E8h */ case   44:  		/* or. R30, R3, R3 */
		/* 821DA7E8h case   44:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 821DA7E8h case   44:*/		return 0x821DA7EC;
		  /* 821DA7ECh */ case   45:  		/* bc 12, CR0_EQ, 60 */
		/* 821DA7ECh case   45:*/		if ( regs.CR[0].eq ) { return 0x821DA828;  }
		/* 821DA7ECh case   45:*/		return 0x821DA7F0;
		  /* 821DA7F0h */ case   46:  		/* li R7, 1 */
		/* 821DA7F0h case   46:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821DA7F0h case   46:*/		return 0x821DA7F4;
		  /* 821DA7F4h */ case   47:  		/* li R6, 0 */
		/* 821DA7F4h case   47:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821DA7F4h case   47:*/		return 0x821DA7F8;
		  /* 821DA7F8h */ case   48:  		/* mr R5, R30 */
		/* 821DA7F8h case   48:*/		regs.R5 = regs.R30;
		/* 821DA7F8h case   48:*/		return 0x821DA7FC;
		  /* 821DA7FCh */ case   49:  		/* mr R4, R31 */
		/* 821DA7FCh case   49:*/		regs.R4 = regs.R31;
		/* 821DA7FCh case   49:*/		return 0x821DA800;
		  /* 821DA800h */ case   50:  		/* mr R3, R22 */
		/* 821DA800h case   50:*/		regs.R3 = regs.R22;
		/* 821DA800h case   50:*/		return 0x821DA804;
		  /* 821DA804h */ case   51:  		/* bl 56572 */
		/* 821DA804h case   51:*/		regs.LR = 0x821DA808; return 0x821E8500;
		/* 821DA804h case   51:*/		return 0x821DA808;
		  /* 821DA808h */ case   52:  		/* cmplw CR6, R3, R29 */
		/* 821DA808h case   52:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R29);
		/* 821DA808h case   52:*/		return 0x821DA80C;
		  /* 821DA80Ch */ case   53:  		/* bc 12, CR6_EQ, 20 */
		/* 821DA80Ch case   53:*/		if ( regs.CR[6].eq ) { return 0x821DA820;  }
		/* 821DA80Ch case   53:*/		return 0x821DA810;
		  /* 821DA810h */ case   54:  		/* addi R3, R1, 112 */
		/* 821DA810h case   54:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 821DA810h case   54:*/		return 0x821DA814;
		  /* 821DA814h */ case   55:  		/* bl -449812 */
		/* 821DA814h case   55:*/		regs.LR = 0x821DA818; return 0x8216CB00;
		/* 821DA814h case   55:*/		return 0x821DA818;
		  /* 821DA818h */ case   56:  		/* or. R30, R3, R3 */
		/* 821DA818h case   56:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 821DA818h case   56:*/		return 0x821DA81C;
		  /* 821DA81Ch */ case   57:  		/* bc 4, CR0_EQ, -44 */
		/* 821DA81Ch case   57:*/		if ( !regs.CR[0].eq ) { return 0x821DA7F0;  }
		/* 821DA81Ch case   57:*/		return 0x821DA820;
	}
	return 0x821DA820;
} // Block from 821DA738h-821DA820h (58 instructions)

//////////////////////////////////////////////////////
// Block at 821DA820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA820);
		  /* 821DA820h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 821DA820h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821DA820h case    0:*/		return 0x821DA824;
		  /* 821DA824h */ case    1:  		/* bc 4, CR6_EQ, 56 */
		/* 821DA824h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DA85C;  }
		/* 821DA824h case    1:*/		return 0x821DA828;
	}
	return 0x821DA828;
} // Block from 821DA820h-821DA828h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DA828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA828);
		  /* 821DA828h */ case    0:  		/* mr R5, R22 */
		/* 821DA828h case    0:*/		regs.R5 = regs.R22;
		/* 821DA828h case    0:*/		return 0x821DA82C;
		  /* 821DA82Ch */ case    1:  		/* lwz R30, <#[R29 + 12]> */
		/* 821DA82Ch case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x0000000C) );
		/* 821DA82Ch case    1:*/		return 0x821DA830;
		  /* 821DA830h */ case    2:  		/* mr R4, R29 */
		/* 821DA830h case    2:*/		regs.R4 = regs.R29;
		/* 821DA830h case    2:*/		return 0x821DA834;
		  /* 821DA834h */ case    3:  		/* mr R3, R31 */
		/* 821DA834h case    3:*/		regs.R3 = regs.R31;
		/* 821DA834h case    3:*/		return 0x821DA838;
		  /* 821DA838h */ case    4:  		/* bl -401192 */
		/* 821DA838h case    4:*/		regs.LR = 0x821DA83C; return 0x82178910;
		/* 821DA838h case    4:*/		return 0x821DA83C;
		  /* 821DA83Ch */ case    5:  		/* mr R3, R30 */
		/* 821DA83Ch case    5:*/		regs.R3 = regs.R30;
		/* 821DA83Ch case    5:*/		return 0x821DA840;
		  /* 821DA840h */ case    6:  		/* bl -483008 */
		/* 821DA840h case    6:*/		regs.LR = 0x821DA844; return 0x82164980;
		/* 821DA840h case    6:*/		return 0x821DA844;
		  /* 821DA844h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821DA844h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821DA844h case    7:*/		return 0x821DA848;
		  /* 821DA848h */ case    8:  		/* bc 12, CR0_EQ, 20 */
		/* 821DA848h case    8:*/		if ( regs.CR[0].eq ) { return 0x821DA85C;  }
		/* 821DA848h case    8:*/		return 0x821DA84C;
		  /* 821DA84Ch */ case    9:  		/* mr R4, R30 */
		/* 821DA84Ch case    9:*/		regs.R4 = regs.R30;
		/* 821DA84Ch case    9:*/		return 0x821DA850;
		  /* 821DA850h */ case   10:  		/* mr R3, R22 */
		/* 821DA850h case   10:*/		regs.R3 = regs.R22;
		/* 821DA850h case   10:*/		return 0x821DA854;
		  /* 821DA854h */ case   11:  		/* bl 331260 */
		/* 821DA854h case   11:*/		regs.LR = 0x821DA858; return 0x8222B650;
		/* 821DA854h case   11:*/		return 0x821DA858;
		  /* 821DA858h */ case   12:  		/* li R27, 1 */
		/* 821DA858h case   12:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 821DA858h case   12:*/		return 0x821DA85C;
	}
	return 0x821DA85C;
} // Block from 821DA828h-821DA85Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821DA85Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA85C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA85C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA85C);
		  /* 821DA85Ch */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821DA85Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821DA85Ch case    0:*/		return 0x821DA860;
		  /* 821DA860h */ case    1:  		/* cmplw CR6, R11, R29 */
		/* 821DA860h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821DA860h case    1:*/		return 0x821DA864;
		  /* 821DA864h */ case    2:  		/* bc 4, CR6_EQ, -176 */
		/* 821DA864h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DA7B4;  }
		/* 821DA864h case    2:*/		return 0x821DA868;
		  /* 821DA868h */ case    3:  		/* addi R28, R29, 4 */
		/* 821DA868h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R29,0x4);
		/* 821DA868h case    3:*/		return 0x821DA86C;
		  /* 821DA86Ch */ case    4:  		/* b -184 */
		/* 821DA86Ch case    4:*/		return 0x821DA7B4;
		/* 821DA86Ch case    4:*/		return 0x821DA870;
	}
	return 0x821DA870;
} // Block from 821DA85Ch-821DA870h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DA870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA870);
		  /* 821DA870h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821DA870h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821DA870h case    0:*/		return 0x821DA874;
		  /* 821DA874h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 821DA874h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821DA874h case    1:*/		return 0x821DA878;
		  /* 821DA878h */ case    2:  		/* bc 4, CR6_EQ, 308 */
		/* 821DA878h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DA9AC;  }
		/* 821DA878h case    2:*/		return 0x821DA87C;
		  /* 821DA87Ch */ case    3:  		/* li R6, 1 */
		/* 821DA87Ch case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821DA87Ch case    3:*/		return 0x821DA880;
		  /* 821DA880h */ case    4:  		/* li R5, 0 */
		/* 821DA880h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DA880h case    4:*/		return 0x821DA884;
		  /* 821DA884h */ case    5:  		/* li R4, 112 */
		/* 821DA884h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x70);
		/* 821DA884h case    5:*/		return 0x821DA888;
		  /* 821DA888h */ case    6:  		/* mr R3, R22 */
		/* 821DA888h case    6:*/		regs.R3 = regs.R22;
		/* 821DA888h case    6:*/		return 0x821DA88C;
		  /* 821DA88Ch */ case    7:  		/* bl -484444 */
		/* 821DA88Ch case    7:*/		regs.LR = 0x821DA890; return 0x82164430;
		/* 821DA88Ch case    7:*/		return 0x821DA890;
		  /* 821DA890h */ case    8:  		/* addi R11, R31, -8 */
		/* 821DA890h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF8);
		/* 821DA890h case    8:*/		return 0x821DA894;
		  /* 821DA894h */ case    9:  		/* li R8, 1 */
		/* 821DA894h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821DA894h case    9:*/		return 0x821DA898;
		  /* 821DA898h */ case   10:  		/* lwz R4, <#[R31 + 28]> */
		/* 821DA898h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 821DA898h case   10:*/		return 0x821DA89C;
		  /* 821DA89Ch */ case   11:  		/* add R29, R3, R11 */
		/* 821DA89Ch case   11:*/		cpu::op::add<0>(regs,&regs.R29,regs.R3,regs.R11);
		/* 821DA89Ch case   11:*/		return 0x821DA8A0;
		  /* 821DA8A0h */ case   12:  		/* li R7, 0 */
		/* 821DA8A0h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821DA8A0h case   12:*/		return 0x821DA8A4;
		  /* 821DA8A4h */ case   13:  		/* li R6, 116 */
		/* 821DA8A4h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x74);
		/* 821DA8A4h case   13:*/		return 0x821DA8A8;
		  /* 821DA8A8h */ case   14:  		/* li R5, 0 */
		/* 821DA8A8h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DA8A8h case   14:*/		return 0x821DA8AC;
		  /* 821DA8ACh */ case   15:  		/* mr R3, R22 */
		/* 821DA8ACh case   15:*/		regs.R3 = regs.R22;
		/* 821DA8ACh case   15:*/		return 0x821DA8B0;
		  /* 821DA8B0h */ case   16:  		/* bl 303336 */
		/* 821DA8B0h case   16:*/		regs.LR = 0x821DA8B4; return 0x82224998;
		/* 821DA8B0h case   16:*/		return 0x821DA8B4;
		  /* 821DA8B4h */ case   17:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821DA8B4h case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821DA8B4h case   17:*/		return 0x821DA8B8;
		  /* 821DA8B8h */ case   18:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821DA8B8h case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821DA8B8h case   18:*/		return 0x821DA8BC;
		  /* 821DA8BCh */ case   19:  		/* addi R11, R11, 36 */
		/* 821DA8BCh case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821DA8BCh case   19:*/		return 0x821DA8C0;
		  /* 821DA8C0h */ case   20:  		/* addi R10, R10, 36 */
		/* 821DA8C0h case   20:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821DA8C0h case   20:*/		return 0x821DA8C4;
		  /* 821DA8C4h */ case   21:  		/* addi R8, R11, -36 */
		/* 821DA8C4h case   21:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821DA8C4h case   21:*/		return 0x821DA8C8;
		  /* 821DA8C8h */ case   22:  		/* addi R28, R10, -36 */
		/* 821DA8C8h case   22:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFFFDC);
		/* 821DA8C8h case   22:*/		return 0x821DA8CC;
		  /* 821DA8CCh */ case   23:  		/* mr R30, R3 */
		/* 821DA8CCh case   23:*/		regs.R30 = regs.R3;
		/* 821DA8CCh case   23:*/		return 0x821DA8D0;
		  /* 821DA8D0h */ case   24:  		/* lwz R7, <#[R11]> */
		/* 821DA8D0h case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821DA8D0h case   24:*/		return 0x821DA8D4;
		  /* 821DA8D4h */ case   25:  		/* addi R9, R10, 4 */
		/* 821DA8D4h case   25:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821DA8D4h case   25:*/		return 0x821DA8D8;
		  /* 821DA8D8h */ case   26:  		/* li R6, 1 */
		/* 821DA8D8h case   26:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821DA8D8h case   26:*/		return 0x821DA8DC;
		  /* 821DA8DCh */ case   27:  		/* li R5, 0 */
		/* 821DA8DCh case   27:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DA8DCh case   27:*/		return 0x821DA8E0;
		  /* 821DA8E0h */ case   28:  		/* li R4, 116 */
		/* 821DA8E0h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x74);
		/* 821DA8E0h case   28:*/		return 0x821DA8E4;
		  /* 821DA8E4h */ case   29:  		/* mr R3, R22 */
		/* 821DA8E4h case   29:*/		regs.R3 = regs.R22;
		/* 821DA8E4h case   29:*/		return 0x821DA8E8;
		  /* 821DA8E8h */ case   30:  		/* stw R7, <#[R10]> */
		/* 821DA8E8h case   30:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821DA8E8h case   30:*/		return 0x821DA8EC;
		  /* 821DA8ECh */ case   31:  		/* lwz R7, <#[R11]> */
		/* 821DA8ECh case   31:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821DA8ECh case   31:*/		return 0x821DA8F0;
		  /* 821DA8F0h */ case   32:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821DA8F0h case   32:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821DA8F0h case   32:*/		return 0x821DA8F4;
		  /* 821DA8F4h */ case   33:  		/* stw R28, <#[R7]> */
		/* 821DA8F4h case   33:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R7 + 0x00000000) );
		/* 821DA8F4h case   33:*/		return 0x821DA8F8;
		  /* 821DA8F8h */ case   34:  		/* stw R8, <#[R10 + 4]> */
		/* 821DA8F8h case   34:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821DA8F8h case   34:*/		return 0x821DA8FC;
		  /* 821DA8FCh */ case   35:  		/* stw R9, <#[R11]> */
		/* 821DA8FCh case   35:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821DA8FCh case   35:*/		return 0x821DA900;
		  /* 821DA900h */ case   36:  		/* bl -484560 */
		/* 821DA900h case   36:*/		regs.LR = 0x821DA904; return 0x82164430;
		/* 821DA900h case   36:*/		return 0x821DA904;
		  /* 821DA904h */ case   37:  		/* addi R11, R30, -4 */
		/* 821DA904h case   37:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFFC);
		/* 821DA904h case   37:*/		return 0x821DA908;
		  /* 821DA908h */ case   38:  		/* lwz R10, <#[R29]> */
		/* 821DA908h case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821DA908h case   38:*/		return 0x821DA90C;
		  /* 821DA90Ch */ case   39:  		/* addi R8, R31, 4 */
		/* 821DA90Ch case   39:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0x4);
		/* 821DA90Ch case   39:*/		return 0x821DA910;
		  /* 821DA910h */ case   40:  		/* add R11, R3, R11 */
		/* 821DA910h case   40:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821DA910h case   40:*/		return 0x821DA914;
		  /* 821DA914h */ case   41:  		/* lwz R9, <#[R11]> */
		/* 821DA914h case   41:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821DA914h case   41:*/		return 0x821DA918;
		  /* 821DA918h */ case   42:  		/* rlwimi R10, R9, 0, 0, 16 */
		/* 821DA918h case   42:*/		cpu::op::rlwimi<0,0,0,16>(regs,&regs.R10,regs.R9);
		/* 821DA918h case   42:*/		return 0x821DA91C;
		  /* 821DA91Ch */ case   43:  		/* mr R9, R10 */
		/* 821DA91Ch case   43:*/		regs.R9 = regs.R10;
		/* 821DA91Ch case   43:*/		return 0x821DA920;
		  /* 821DA920h */ case   44:  		/* stw R10, <#[R11]> */
		/* 821DA920h case   44:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DA920h case   44:*/		return 0x821DA924;
		  /* 821DA924h */ case   45:  		/* lwz R10, <#[R29]> */
		/* 821DA924h case   45:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821DA924h case   45:*/		return 0x821DA928;
		  /* 821DA928h */ case   46:  		/* rlwimi R9, R10, 0, 3, 16 */
		/* 821DA928h case   46:*/		cpu::op::rlwimi<0,0,3,16>(regs,&regs.R9,regs.R10);
		/* 821DA928h case   46:*/		return 0x821DA92C;
		  /* 821DA92Ch */ case   47:  		/* stw R9, <#[R11]> */
		/* 821DA92Ch case   47:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821DA92Ch case   47:*/		return 0x821DA930;
		  /* 821DA930h */ case   48:  		/* lwz R11, <#[R8]> */
		/* 821DA930h case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821DA930h case   48:*/		return 0x821DA934;
		  /* 821DA934h */ case   49:  		/* cmplwi CR6, R11, 0 */
		/* 821DA934h case   49:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DA934h case   49:*/		return 0x821DA938;
		  /* 821DA938h */ case   50:  		/* bc 12, CR6_EQ, 92 */
		/* 821DA938h case   50:*/		if ( regs.CR[6].eq ) { return 0x821DA994;  }
		/* 821DA938h case   50:*/		return 0x821DA93C;
		  /* 821DA93Ch */ case   51:  		/* lwz R10, <#[R11 + 16]> */
		/* 821DA93Ch case   51:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821DA93Ch case   51:*/		return 0x821DA940;
		  /* 821DA940h */ case   52:  		/* cmplwi CR6, R10, 0 */
		/* 821DA940h case   52:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DA940h case   52:*/		return 0x821DA944;
		  /* 821DA944h */ case   53:  		/* bc 12, CR6_EQ, 60 */
		/* 821DA944h case   53:*/		if ( regs.CR[6].eq ) { return 0x821DA980;  }
		/* 821DA944h case   53:*/		return 0x821DA948;
		  /* 821DA948h */ case   54:  		/* lwz R10, <#[R11 + 12]> */
		/* 821DA948h case   54:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DA948h case   54:*/		return 0x821DA94C;
		  /* 821DA94Ch */ case   55:  		/* addi R10, R10, 4 */
		/* 821DA94Ch case   55:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821DA94Ch case   55:*/		return 0x821DA950;
		  /* 821DA950h */ case   56:  		/* lwz R9, <#[R10]> */
		/* 821DA950h case   56:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DA950h case   56:*/		return 0x821DA954;
		  /* 821DA954h */ case   57:  		/* b 12 */
		/* 821DA954h case   57:*/		return 0x821DA960;
		/* 821DA954h case   57:*/		return 0x821DA958;
		  /* 821DA958h */ case   58:  		/* addi R10, R9, 8 */
		/* 821DA958h case   58:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821DA958h case   58:*/		return 0x821DA95C;
		  /* 821DA95Ch */ case   59:  		/* lwz R9, <#[R9 + 8]> */
		/* 821DA95Ch case   59:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821DA95Ch case   59:*/		return 0x821DA960;
	}
	return 0x821DA960;
} // Block from 821DA870h-821DA960h (60 instructions)

//////////////////////////////////////////////////////
// Block at 821DA960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA960);
		  /* 821DA960h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821DA960h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821DA960h case    0:*/		return 0x821DA964;
		  /* 821DA964h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821DA964h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DA958;  }
		/* 821DA964h case    1:*/		return 0x821DA968;
		  /* 821DA968h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821DA968h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821DA968h case    2:*/		return 0x821DA96C;
		  /* 821DA96Ch */ case    3:  		/* stw R9, <#[R10]> */
		/* 821DA96Ch case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DA96Ch case    3:*/		return 0x821DA970;
		  /* 821DA970h */ case    4:  		/* lwz R10, <#[R30 + 4]> */
		/* 821DA970h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821DA970h case    4:*/		return 0x821DA974;
		  /* 821DA974h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821DA974h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821DA974h case    5:*/		return 0x821DA978;
		  /* 821DA978h */ case    6:  		/* stw R11, <#[R30 + 4]> */
		/* 821DA978h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821DA978h case    6:*/		return 0x821DA97C;
		  /* 821DA97Ch */ case    7:  		/* stw R30, <#[R11 + 12]> */
		/* 821DA97Ch case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DA97Ch case    7:*/		return 0x821DA980;
	}
	return 0x821DA980;
} // Block from 821DA960h-821DA980h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821DA980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA980);
		  /* 821DA980h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821DA980h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821DA980h case    0:*/		return 0x821DA984;
		  /* 821DA984h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821DA984h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821DA984h case    1:*/		return 0x821DA988;
		  /* 821DA988h */ case    2:  		/* bc 4, CR6_EQ, -88 */
		/* 821DA988h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DA930;  }
		/* 821DA988h case    2:*/		return 0x821DA98C;
		  /* 821DA98Ch */ case    3:  		/* addi R8, R11, 8 */
		/* 821DA98Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821DA98Ch case    3:*/		return 0x821DA990;
		  /* 821DA990h */ case    4:  		/* b -96 */
		/* 821DA990h case    4:*/		return 0x821DA930;
		/* 821DA990h case    4:*/		return 0x821DA994;
	}
	return 0x821DA994;
} // Block from 821DA980h-821DA994h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DA994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA994);
		  /* 821DA994h */ case    0:  		/* li R6, 1 */
		/* 821DA994h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821DA994h case    0:*/		return 0x821DA998;
		  /* 821DA998h */ case    1:  		/* li R5, 0 */
		/* 821DA998h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DA998h case    1:*/		return 0x821DA99C;
		  /* 821DA99Ch */ case    2:  		/* mr R4, R31 */
		/* 821DA99Ch case    2:*/		regs.R4 = regs.R31;
		/* 821DA99Ch case    2:*/		return 0x821DA9A0;
		  /* 821DA9A0h */ case    3:  		/* mr R3, R22 */
		/* 821DA9A0h case    3:*/		regs.R3 = regs.R22;
		/* 821DA9A0h case    3:*/		return 0x821DA9A4;
		  /* 821DA9A4h */ case    4:  		/* bl 330276 */
		/* 821DA9A4h case    4:*/		regs.LR = 0x821DA9A8; return 0x8222B3C8;
		/* 821DA9A4h case    4:*/		return 0x821DA9A8;
		  /* 821DA9A8h */ case    5:  		/* mr R31, R30 */
		/* 821DA9A8h case    5:*/		regs.R31 = regs.R30;
		/* 821DA9A8h case    5:*/		return 0x821DA9AC;
	}
	return 0x821DA9AC;
} // Block from 821DA994h-821DA9ACh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DA9ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA9AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA9AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA9AC);
		  /* 821DA9ACh */ case    0:  		/* rlwinm. R11, R27, 0, 24, 31 */
		/* 821DA9ACh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R27);
		/* 821DA9ACh case    0:*/		return 0x821DA9B0;
		  /* 821DA9B0h */ case    1:  		/* bc 4, CR0_EQ, -560 */
		/* 821DA9B0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821DA780;  }
		/* 821DA9B0h case    1:*/		return 0x821DA9B4;
	}
	return 0x821DA9B4;
} // Block from 821DA9ACh-821DA9B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DA9B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA9B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA9B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA9B4);
		  /* 821DA9B4h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821DA9B4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821DA9B4h case    0:*/		return 0x821DA9B8;
		  /* 821DA9B8h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DA9B8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DA9B8h case    1:*/		return 0x821DA9BC;
		  /* 821DA9BCh */ case    2:  		/* b -568 */
		/* 821DA9BCh case    2:*/		return 0x821DA784;
		/* 821DA9BCh case    2:*/		return 0x821DA9C0;
	}
	return 0x821DA9C0;
} // Block from 821DA9B4h-821DA9C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DA9C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA9C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA9C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA9C0);
		  /* 821DA9C0h */ case    0:  		/* rlwinm R11, R26, 0, 0, 30 */
		/* 821DA9C0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R26);
		/* 821DA9C0h case    0:*/		return 0x821DA9C4;
	}
	return 0x821DA9C4;
} // Block from 821DA9C0h-821DA9C4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DA9C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA9C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA9C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA9C4);
		  /* 821DA9C4h */ case    0:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DA9C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DA9C4h case    0:*/		return 0x821DA9C8;
		  /* 821DA9C8h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DA9C8h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DA9C8h case    1:*/		return 0x821DA9CC;
		  /* 821DA9CCh */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 821DA9CCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x821DA9DC;  }
		/* 821DA9CCh case    2:*/		return 0x821DA9D0;
		  /* 821DA9D0h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821DA9D0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DA9D0h case    3:*/		return 0x821DA9D4;
		  /* 821DA9D4h */ case    4:  		/* mr R26, R11 */
		/* 821DA9D4h case    4:*/		regs.R26 = regs.R11;
		/* 821DA9D4h case    4:*/		return 0x821DA9D8;
		  /* 821DA9D8h */ case    5:  		/* bc 4, CR6_EQ, -600 */
		/* 821DA9D8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821DA780;  }
		/* 821DA9D8h case    5:*/		return 0x821DA9DC;
	}
	return 0x821DA9DC;
} // Block from 821DA9C4h-821DA9DCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DA9DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DA9DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DA9DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DA9DC);
		  /* 821DA9DCh */ case    0:  		/* lwz R11, <#[R22 + 4]> */
		/* 821DA9DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821DA9DCh case    0:*/		return 0x821DA9E0;
		  /* 821DA9E0h */ case    1:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DA9E0h case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DA9E0h case    1:*/		return 0x821DA9E4;
		  /* 821DA9E4h */ case    2:  		/* addic R10, R10, -1 */
		/* 821DA9E4h case    2:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821DA9E4h case    2:*/		return 0x821DA9E8;
		  /* 821DA9E8h */ case    3:  		/* subfe R10, R10, R10 */
		/* 821DA9E8h case    3:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821DA9E8h case    3:*/		return 0x821DA9EC;
		  /* 821DA9ECh */ case    4:  		/* and R11, R10, R11 */
		/* 821DA9ECh case    4:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821DA9ECh case    4:*/		return 0x821DA9F0;
		  /* 821DA9F0h */ case    5:  		/* b 24 */
		/* 821DA9F0h case    5:*/		return 0x821DAA08;
		/* 821DA9F0h case    5:*/		return 0x821DA9F4;
		  /* 821DA9F4h */ case    6:  		/* lwz R10, <#[R11 + 52]> */
		/* 821DA9F4h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000034) );
		/* 821DA9F4h case    6:*/		return 0x821DA9F8;
		  /* 821DA9F8h */ case    7:  		/* cmpwi CR6, R10, 0 */
		/* 821DA9F8h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 821DA9F8h case    7:*/		return 0x821DA9FC;
		  /* 821DA9FCh */ case    8:  		/* bc 4, CR6_EQ, 12 */
		/* 821DA9FCh case    8:*/		if ( !regs.CR[6].eq ) { return 0x821DAA08;  }
		/* 821DA9FCh case    8:*/		return 0x821DAA00;
		  /* 821DAA00h */ case    9:  		/* stw R24, <#[R11 + 44]> */
		/* 821DAA00h case    9:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R11 + 0x0000002C) );
		/* 821DAA00h case    9:*/		return 0x821DAA04;
		  /* 821DAA04h */ case   10:  		/* li R25, 1 */
		/* 821DAA04h case   10:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 821DAA04h case   10:*/		return 0x821DAA08;
	}
	return 0x821DAA08;
} // Block from 821DA9DCh-821DAA08h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821DAA08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAA08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAA08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAA08);
		  /* 821DAA08h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DAA08h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DAA08h case    0:*/		return 0x821DAA0C;
		  /* 821DAA0Ch */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DAA0Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DAA0Ch case    1:*/		return 0x821DAA10;
		  /* 821DAA10h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DAA10h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DAA10h case    2:*/		return 0x821DAA14;
		  /* 821DAA14h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821DAA14h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DAA20;  }
		/* 821DAA14h case    3:*/		return 0x821DAA18;
		  /* 821DAA18h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821DAA18h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DAA18h case    4:*/		return 0x821DAA1C;
		  /* 821DAA1Ch */ case    5:  		/* bc 4, CR6_EQ, -40 */
		/* 821DAA1Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821DA9F4;  }
		/* 821DAA1Ch case    5:*/		return 0x821DAA20;
	}
	return 0x821DAA20;
} // Block from 821DAA08h-821DAA20h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DAA20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAA20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAA20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAA20);
		  /* 821DAA20h */ case    0:  		/* rlwinm. R11, R25, 0, 24, 31 */
		/* 821DAA20h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R25);
		/* 821DAA20h case    0:*/		return 0x821DAA24;
		  /* 821DAA24h */ case    1:  		/* bc 4, CR0_EQ, -728 */
		/* 821DAA24h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821DA74C;  }
		/* 821DAA24h case    1:*/		return 0x821DAA28;
	}
	return 0x821DAA28;
} // Block from 821DAA20h-821DAA28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DAA28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAA28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAA28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAA28);
		  /* 821DAA28h */ case    0:  		/* lwz R11, <#[R22 + 40]> */
		/* 821DAA28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000028) );
		/* 821DAA28h case    0:*/		return 0x821DAA2C;
		  /* 821DAA2Ch */ case    1:  		/* rlwinm. R11, R11, 0, 21, 21 */
		/* 821DAA2Ch case    1:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R11,regs.R11);
		/* 821DAA2Ch case    1:*/		return 0x821DAA30;
		  /* 821DAA30h */ case    2:  		/* bc 12, CR0_EQ, 316 */
		/* 821DAA30h case    2:*/		if ( regs.CR[0].eq ) { return 0x821DAB6C;  }
		/* 821DAA30h case    2:*/		return 0x821DAA34;
		  /* 821DAA34h */ case    3:  		/* lwz R11, <#[R22 + 4]> */
		/* 821DAA34h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821DAA34h case    3:*/		return 0x821DAA38;
		  /* 821DAA38h */ case    4:  		/* mr R9, R20 */
		/* 821DAA38h case    4:*/		regs.R9 = regs.R20;
		/* 821DAA38h case    4:*/		return 0x821DAA3C;
		  /* 821DAA3Ch */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DAA3Ch case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DAA3Ch case    5:*/		return 0x821DAA40;
		  /* 821DAA40h */ case    6:  		/* bc 4, CR0_EQ, 248 */
		/* 821DAA40h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821DAB38;  }
		/* 821DAA40h case    6:*/		return 0x821DAA44;
		  /* 821DAA44h */ case    7:  		/* mr R30, R11 */
		/* 821DAA44h case    7:*/		regs.R30 = regs.R11;
		/* 821DAA44h case    7:*/		return 0x821DAA48;
		  /* 821DAA48h */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 821DAA48h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DAA48h case    8:*/		return 0x821DAA4C;
		  /* 821DAA4Ch */ case    9:  		/* bc 12, CR0_EQ, 236 */
		/* 821DAA4Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821DAB38;  }
		/* 821DAA4Ch case    9:*/		return 0x821DAA50;
		  /* 821DAA50h */ case   10:  		/* lwz R11, <#[R30 + 48]> */
		/* 821DAA50h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 821DAA50h case   10:*/		return 0x821DAA54;
		  /* 821DAA54h */ case   11:  		/* rlwinm. R11, R11, 13, 31, 31 */
		/* 821DAA54h case   11:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R11);
		/* 821DAA54h case   11:*/		return 0x821DAA58;
		  /* 821DAA58h */ case   12:  		/* bc 12, CR0_EQ, 196 */
		/* 821DAA58h case   12:*/		if ( regs.CR[0].eq ) { return 0x821DAB1C;  }
		/* 821DAA58h case   12:*/		return 0x821DAA5C;
		  /* 821DAA5Ch */ case   13:  		/* lwz R11, <#[R30 + 116]> */
		/* 821DAA5Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000074) );
		/* 821DAA5Ch case   13:*/		return 0x821DAA60;
		  /* 821DAA60h */ case   14:  		/* addi R11, R11, 16 */
		/* 821DAA60h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 821DAA60h case   14:*/		return 0x821DAA64;
		  /* 821DAA64h */ case   15:  		/* lwz R10, <#[R11]> */
		/* 821DAA64h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DAA64h case   15:*/		return 0x821DAA68;
		  /* 821DAA68h */ case   16:  		/* cmplwi CR6, R10, 0 */
		/* 821DAA68h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DAA68h case   16:*/		return 0x821DAA6C;
		  /* 821DAA6Ch */ case   17:  		/* bc 12, CR6_EQ, 44 */
		/* 821DAA6Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x821DAA98;  }
		/* 821DAA6Ch case   17:*/		return 0x821DAA70;
		  /* 821DAA70h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 821DAA70h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DAA70h case   18:*/		return 0x821DAA74;
		  /* 821DAA74h */ case   19:  		/* bc 12, CR6_EQ, 36 */
		/* 821DAA74h case   19:*/		if ( regs.CR[6].eq ) { return 0x821DAA98;  }
		/* 821DAA74h case   19:*/		return 0x821DAA78;
		  /* 821DAA78h */ case   20:  		/* lwz R10, <#[R11]> */
		/* 821DAA78h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DAA78h case   20:*/		return 0x821DAA7C;
		  /* 821DAA7Ch */ case   21:  		/* lwz R10, <#[R10 + 48]> */
		/* 821DAA7Ch case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000030) );
		/* 821DAA7Ch case   21:*/		return 0x821DAA80;
		  /* 821DAA80h */ case   22:  		/* rlwinm. R8, R10, 10, 31, 31 */
		/* 821DAA80h case   22:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R8,regs.R10);
		/* 821DAA80h case   22:*/		return 0x821DAA84;
		  /* 821DAA84h */ case   23:  		/* bc 4, CR0_EQ, 12 */
		/* 821DAA84h case   23:*/		if ( !regs.CR[0].eq ) { return 0x821DAA90;  }
		/* 821DAA84h case   23:*/		return 0x821DAA88;
		  /* 821DAA88h */ case   24:  		/* rlwinm. R10, R10, 12, 31, 31 */
		/* 821DAA88h case   24:*/		cpu::op::rlwinm<1,12,31,31>(regs,&regs.R10,regs.R10);
		/* 821DAA88h case   24:*/		return 0x821DAA8C;
		  /* 821DAA8Ch */ case   25:  		/* bc 4, CR0_EQ, 144 */
		/* 821DAA8Ch case   25:*/		if ( !regs.CR[0].eq ) { return 0x821DAB1C;  }
		/* 821DAA8Ch case   25:*/		return 0x821DAA90;
	}
	return 0x821DAA90;
} // Block from 821DAA28h-821DAA90h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821DAA90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAA90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAA90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAA90);
		  /* 821DAA90h */ case    0:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DAA90h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DAA90h case    0:*/		return 0x821DAA94;
		  /* 821DAA94h */ case    1:  		/* b -36 */
		/* 821DAA94h case    1:*/		return 0x821DAA70;
		/* 821DAA94h case    1:*/		return 0x821DAA98;
	}
	return 0x821DAA98;
} // Block from 821DAA90h-821DAA98h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DAA98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAA98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAA98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAA98);
		  /* 821DAA98h */ case    0:  		/* lwz R29, <#[R30 + 8]> */
		/* 821DAA98h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x00000008) );
		/* 821DAA98h case    0:*/		return 0x821DAA9C;
		  /* 821DAA9Ch */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 821DAA9Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821DAA9Ch case    1:*/		return 0x821DAAA0;
		  /* 821DAAA0h */ case    2:  		/* bc 12, CR6_EQ, 108 */
		/* 821DAAA0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DAB0C;  }
		/* 821DAAA0h case    2:*/		return 0x821DAAA4;
		  /* 821DAAA4h */ case    3:  		/* lwz R31, <#[R29 + 4]> */
		/* 821DAAA4h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000004) );
		/* 821DAAA4h case    3:*/		return 0x821DAAA8;
		  /* 821DAAA8h */ case    4:  		/* lwz R11, <#[R31 + 36]> */
		/* 821DAAA8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 821DAAA8h case    4:*/		return 0x821DAAAC;
		  /* 821DAAACh */ case    5:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DAAACh case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DAAACh case    5:*/		return 0x821DAAB0;
		  /* 821DAAB0h */ case    6:  		/* bc 12, CR0_EQ, 12 */
		/* 821DAAB0h case    6:*/		if ( regs.CR[0].eq ) { return 0x821DAABC;  }
		/* 821DAAB0h case    6:*/		return 0x821DAAB4;
		  /* 821DAAB4h */ case    7:  		/* mr R4, R20 */
		/* 821DAAB4h case    7:*/		regs.R4 = regs.R20;
		/* 821DAAB4h case    7:*/		return 0x821DAAB8;
		  /* 821DAAB8h */ case    8:  		/* b 16 */
		/* 821DAAB8h case    8:*/		return 0x821DAAC8;
		/* 821DAAB8h case    8:*/		return 0x821DAABC;
	}
	return 0x821DAABC;
} // Block from 821DAA98h-821DAABCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821DAABCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAABC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAABC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAABC);
		  /* 821DAABCh */ case    0:  		/* lwz R11, <#[R31 + 32]> */
		/* 821DAABCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 821DAABCh case    0:*/		return 0x821DAAC0;
		  /* 821DAAC0h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DAAC0h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DAAC0h case    1:*/		return 0x821DAAC4;
		  /* 821DAAC4h */ case    2:  		/* addi R4, R11, -40 */
		/* 821DAAC4h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFD8);
		/* 821DAAC4h case    2:*/		return 0x821DAAC8;
	}
	return 0x821DAAC8;
} // Block from 821DAABCh-821DAAC8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DAAC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAAC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAAC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAAC8);
		  /* 821DAAC8h */ case    0:  		/* li R6, 1 */
		/* 821DAAC8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821DAAC8h case    0:*/		return 0x821DAACC;
		  /* 821DAACCh */ case    1:  		/* li R5, 0 */
		/* 821DAACCh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DAACCh case    1:*/		return 0x821DAAD0;
		  /* 821DAAD0h */ case    2:  		/* mr R3, R22 */
		/* 821DAAD0h case    2:*/		regs.R3 = regs.R22;
		/* 821DAAD0h case    2:*/		return 0x821DAAD4;
		  /* 821DAAD4h */ case    3:  		/* bl 329972 */
		/* 821DAAD4h case    3:*/		regs.LR = 0x821DAAD8; return 0x8222B3C8;
		/* 821DAAD4h case    3:*/		return 0x821DAAD8;
		  /* 821DAAD8h */ case    4:  		/* lwz R11, <#[R31 + 12]> */
		/* 821DAAD8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821DAAD8h case    4:*/		return 0x821DAADC;
		  /* 821DAADCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DAADCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DAADCh case    5:*/		return 0x821DAAE0;
		  /* 821DAAE0h */ case    6:  		/* bc 12, CR6_EQ, 36 */
		/* 821DAAE0h case    6:*/		if ( regs.CR[6].eq ) { return 0x821DAB04;  }
		/* 821DAAE0h case    6:*/		return 0x821DAAE4;
		  /* 821DAAE4h */ case    7:  		/* lwz R4, <#[R11]> */
		/* 821DAAE4h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 821DAAE4h case    7:*/		return 0x821DAAE8;
		  /* 821DAAE8h */ case    8:  		/* cmplw CR6, R4, R30 */
		/* 821DAAE8h case    8:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R30);
		/* 821DAAE8h case    8:*/		return 0x821DAAEC;
		  /* 821DAAECh */ case    9:  		/* bc 4, CR6_EQ, 12 */
		/* 821DAAECh case    9:*/		if ( !regs.CR[6].eq ) { return 0x821DAAF8;  }
		/* 821DAAECh case    9:*/		return 0x821DAAF0;
		  /* 821DAAF0h */ case   10:  		/* lwz R11, <#[R11 + 8]> */
		/* 821DAAF0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821DAAF0h case   10:*/		return 0x821DAAF4;
		  /* 821DAAF4h */ case   11:  		/* b -24 */
		/* 821DAAF4h case   11:*/		return 0x821DAADC;
		/* 821DAAF4h case   11:*/		return 0x821DAAF8;
	}
	return 0x821DAAF8;
} // Block from 821DAAC8h-821DAAF8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821DAAF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAAF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAAF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAAF8);
		  /* 821DAAF8h */ case    0:  		/* mr R5, R22 */
		/* 821DAAF8h case    0:*/		regs.R5 = regs.R22;
		/* 821DAAF8h case    0:*/		return 0x821DAAFC;
		  /* 821DAAFCh */ case    1:  		/* mr R3, R31 */
		/* 821DAAFCh case    1:*/		regs.R3 = regs.R31;
		/* 821DAAFCh case    1:*/		return 0x821DAB00;
		  /* 821DAB00h */ case    2:  		/* bl 347752 */
		/* 821DAB00h case    2:*/		regs.LR = 0x821DAB04; return 0x8222F968;
		/* 821DAB00h case    2:*/		return 0x821DAB04;
	}
	return 0x821DAB04;
} // Block from 821DAAF8h-821DAB04h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DAB04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAB04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAB04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAB04);
		  /* 821DAB04h */ case    0:  		/* lwz R29, <#[R29 + 12]> */
		/* 821DAB04h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x0000000C) );
		/* 821DAB04h case    0:*/		return 0x821DAB08;
		  /* 821DAB08h */ case    1:  		/* b -108 */
		/* 821DAB08h case    1:*/		return 0x821DAA9C;
		/* 821DAB08h case    1:*/		return 0x821DAB0C;
	}
	return 0x821DAB0C;
} // Block from 821DAB04h-821DAB0Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DAB0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAB0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAB0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAB0C);
		  /* 821DAB0Ch */ case    0:  		/* lwz R11, <#[R30 + 48]> */
		/* 821DAB0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 821DAB0Ch case    0:*/		return 0x821DAB10;
		  /* 821DAB10h */ case    1:  		/* li R9, 1 */
		/* 821DAB10h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821DAB10h case    1:*/		return 0x821DAB14;
		  /* 821DAB14h */ case    2:  		/* rlwinm R11, R11, 0, 13, 11 */
		/* 821DAB14h case    2:*/		cpu::op::rlwinm<0,0,13,11>(regs,&regs.R11,regs.R11);
		/* 821DAB14h case    2:*/		return 0x821DAB18;
		  /* 821DAB18h */ case    3:  		/* stw R11, <#[R30 + 48]> */
		/* 821DAB18h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 821DAB18h case    3:*/		return 0x821DAB1C;
	}
	return 0x821DAB1C;
} // Block from 821DAB0Ch-821DAB1Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DAB1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAB1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAB1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAB1C);
		  /* 821DAB1Ch */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821DAB1Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821DAB1Ch case    0:*/		return 0x821DAB20;
		  /* 821DAB20h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DAB20h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DAB20h case    1:*/		return 0x821DAB24;
		  /* 821DAB24h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DAB24h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DAB24h case    2:*/		return 0x821DAB28;
		  /* 821DAB28h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DAB28h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DAB38;  }
		/* 821DAB28h case    3:*/		return 0x821DAB2C;
		  /* 821DAB2Ch */ case    4:  		/* mr R30, R11 */
		/* 821DAB2Ch case    4:*/		regs.R30 = regs.R11;
		/* 821DAB2Ch case    4:*/		return 0x821DAB30;
		  /* 821DAB30h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DAB30h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DAB30h case    5:*/		return 0x821DAB34;
		  /* 821DAB34h */ case    6:  		/* bc 4, CR6_EQ, -228 */
		/* 821DAB34h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DAA50;  }
		/* 821DAB34h case    6:*/		return 0x821DAB38;
	}
	return 0x821DAB38;
} // Block from 821DAB1Ch-821DAB38h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DAB38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAB38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAB38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAB38);
		  /* 821DAB38h */ case    0:  		/* rlwinm. R11, R9, 0, 24, 31 */
		/* 821DAB38h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R9);
		/* 821DAB38h case    0:*/		return 0x821DAB3C;
		  /* 821DAB3Ch */ case    1:  		/* bc 12, CR0_EQ, 48 */
		/* 821DAB3Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821DAB6C;  }
		/* 821DAB3Ch case    1:*/		return 0x821DAB40;
		  /* 821DAB40h */ case    2:  		/* li R19, 1 */
		/* 821DAB40h case    2:*/		cpu::op::li<0>(regs,&regs.R19,0x1);
		/* 821DAB40h case    2:*/		return 0x821DAB44;
	}
	return 0x821DAB44;
} // Block from 821DAB38h-821DAB44h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DAB44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAB44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAB44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAB44);
		  /* 821DAB44h */ case    0:  		/* lwz R10, <#[R22 + 4]> */
		/* 821DAB44h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x00000004) );
		/* 821DAB44h case    0:*/		return 0x821DAB48;
		  /* 821DAB48h */ case    1:  		/* mr R9, R20 */
		/* 821DAB48h case    1:*/		regs.R9 = regs.R20;
		/* 821DAB48h case    1:*/		return 0x821DAB4C;
		  /* 821DAB4Ch */ case    2:  		/* lwz R11, <#[R22 + 108]> */
		/* 821DAB4Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x0000006C) );
		/* 821DAB4Ch case    2:*/		return 0x821DAB50;
		  /* 821DAB50h */ case    3:  		/* rlwinm R8, R10, 0, 31, 31 */
		/* 821DAB50h case    3:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R8,regs.R10);
		/* 821DAB50h case    3:*/		return 0x821DAB54;
		  /* 821DAB54h */ case    4:  		/* addi R24, R11, 1 */
		/* 821DAB54h case    4:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R11,0x1);
		/* 821DAB54h case    4:*/		return 0x821DAB58;
		  /* 821DAB58h */ case    5:  		/* addic R11, R8, -1 */
		/* 821DAB58h case    5:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R8,0xFFFFFFFF);
		/* 821DAB58h case    5:*/		return 0x821DAB5C;
		  /* 821DAB5Ch */ case    6:  		/* stw R24, <#[R22 + 108]> */
		/* 821DAB5Ch case    6:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R22 + 0x0000006C) );
		/* 821DAB5Ch case    6:*/		return 0x821DAB60;
		  /* 821DAB60h */ case    7:  		/* subfe R11, R11, R11 */
		/* 821DAB60h case    7:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821DAB60h case    7:*/		return 0x821DAB64;
		  /* 821DAB64h */ case    8:  		/* and R11, R11, R10 */
		/* 821DAB64h case    8:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821DAB64h case    8:*/		return 0x821DAB68;
		  /* 821DAB68h */ case    9:  		/* b -1096 */
		/* 821DAB68h case    9:*/		return 0x821DA720;
		/* 821DAB68h case    9:*/		return 0x821DAB6C;
	}
	return 0x821DAB6C;
} // Block from 821DAB44h-821DAB6Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DAB6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAB6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAB6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAB6C);
		  /* 821DAB6Ch */ case    0:  		/* lwz R11, <#[R22 + 4]> */
		/* 821DAB6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821DAB6Ch case    0:*/		return 0x821DAB70;
		  /* 821DAB70h */ case    1:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DAB70h case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DAB70h case    1:*/		return 0x821DAB74;
		  /* 821DAB74h */ case    2:  		/* addic R10, R10, -1 */
		/* 821DAB74h case    2:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821DAB74h case    2:*/		return 0x821DAB78;
		  /* 821DAB78h */ case    3:  		/* subfe R10, R10, R10 */
		/* 821DAB78h case    3:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821DAB78h case    3:*/		return 0x821DAB7C;
		  /* 821DAB7Ch */ case    4:  		/* and R11, R10, R11 */
		/* 821DAB7Ch case    4:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821DAB7Ch case    4:*/		return 0x821DAB80;
		  /* 821DAB80h */ case    5:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DAB80h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DAB80h case    5:*/		return 0x821DAB84;
		  /* 821DAB84h */ case    6:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DAB84h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DAB84h case    6:*/		return 0x821DAB88;
		  /* 821DAB88h */ case    7:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DAB88h case    7:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DAB88h case    7:*/		return 0x821DAB8C;
		  /* 821DAB8Ch */ case    8:  		/* addic R10, R10, -1 */
		/* 821DAB8Ch case    8:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821DAB8Ch case    8:*/		return 0x821DAB90;
		  /* 821DAB90h */ case    9:  		/* subfe R10, R10, R10 */
		/* 821DAB90h case    9:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821DAB90h case    9:*/		return 0x821DAB94;
		  /* 821DAB94h */ case   10:  		/* and R31, R10, R11 */
		/* 821DAB94h case   10:*/		cpu::op::and<0>(regs,&regs.R31,regs.R10,regs.R11);
		/* 821DAB94h case   10:*/		return 0x821DAB98;
		  /* 821DAB98h */ case   11:  		/* cmplwi CR6, R31, 0 */
		/* 821DAB98h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DAB98h case   11:*/		return 0x821DAB9C;
		  /* 821DAB9Ch */ case   12:  		/* bc 12, CR6_EQ, 72 */
		/* 821DAB9Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x821DABE4;  }
		/* 821DAB9Ch case   12:*/		return 0x821DABA0;
		  /* 821DABA0h */ case   13:  		/* lwz R11, <#[R31 + 48]> */
		/* 821DABA0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821DABA0h case   13:*/		return 0x821DABA4;
		  /* 821DABA4h */ case   14:  		/* rlwinm. R10, R11, 13, 31, 31 */
		/* 821DABA4h case   14:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R10,regs.R11);
		/* 821DABA4h case   14:*/		return 0x821DABA8;
		  /* 821DABA8h */ case   15:  		/* bc 4, CR0_EQ, 40 */
		/* 821DABA8h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821DABD0;  }
		/* 821DABA8h case   15:*/		return 0x821DABAC;
		  /* 821DABACh */ case   16:  		/* rlwinm. R11, R11, 12, 31, 31 */
		/* 821DABACh case   16:*/		cpu::op::rlwinm<1,12,31,31>(regs,&regs.R11,regs.R11);
		/* 821DABACh case   16:*/		return 0x821DABB0;
		  /* 821DABB0h */ case   17:  		/* bc 4, CR0_EQ, 32 */
		/* 821DABB0h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821DABD0;  }
		/* 821DABB0h case   17:*/		return 0x821DABB4;
		  /* 821DABB4h */ case   18:  		/* rlwinm. R11, R18, 0, 24, 31 */
		/* 821DABB4h case   18:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R18);
		/* 821DABB4h case   18:*/		return 0x821DABB8;
		  /* 821DABB8h */ case   19:  		/* bc 12, CR0_EQ, 24 */
		/* 821DABB8h case   19:*/		if ( regs.CR[0].eq ) { return 0x821DABD0;  }
		/* 821DABB8h case   19:*/		return 0x821DABBC;
		  /* 821DABBCh */ case   20:  		/* mr R4, R31 */
		/* 821DABBCh case   20:*/		regs.R4 = regs.R31;
		/* 821DABBCh case   20:*/		return 0x821DABC0;
		  /* 821DABC0h */ case   21:  		/* mr R3, R22 */
		/* 821DABC0h case   21:*/		regs.R3 = regs.R22;
		/* 821DABC0h case   21:*/		return 0x821DABC4;
		  /* 821DABC4h */ case   22:  		/* bl -45636 */
		/* 821DABC4h case   22:*/		regs.LR = 0x821DABC8; return 0x821CF980;
		/* 821DABC4h case   22:*/		return 0x821DABC8;
		  /* 821DABC8h */ case   23:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821DABC8h case   23:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821DABC8h case   23:*/		return 0x821DABCC;
		  /* 821DABCCh */ case   24:  		/* bc 4, CR0_EQ, 12 */
		/* 821DABCCh case   24:*/		if ( !regs.CR[0].eq ) { return 0x821DABD8;  }
		/* 821DABCCh case   24:*/		return 0x821DABD0;
	}
	return 0x821DABD0;
} // Block from 821DAB6Ch-821DABD0h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821DABD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DABD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DABD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DABD0);
		  /* 821DABD0h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821DABD0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821DABD0h case    0:*/		return 0x821DABD4;
		  /* 821DABD4h */ case    1:  		/* b -80 */
		/* 821DABD4h case    1:*/		return 0x821DAB84;
		/* 821DABD4h case    1:*/		return 0x821DABD8;
	}
	return 0x821DABD8;
} // Block from 821DABD0h-821DABD8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DABD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DABD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DABD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DABD8);
		  /* 821DABD8h */ case    0:  		/* li R19, 1 */
		/* 821DABD8h case    0:*/		cpu::op::li<0>(regs,&regs.R19,0x1);
		/* 821DABD8h case    0:*/		return 0x821DABDC;
		  /* 821DABDCh */ case    1:  		/* li R23, 1 */
		/* 821DABDCh case    1:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 821DABDCh case    1:*/		return 0x821DABE0;
		  /* 821DABE0h */ case    2:  		/* b -116 */
		/* 821DABE0h case    2:*/		return 0x821DAB6C;
		/* 821DABE0h case    2:*/		return 0x821DABE4;
	}
	return 0x821DABE4;
} // Block from 821DABD8h-821DABE4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DABE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DABE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DABE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DABE4);
		  /* 821DABE4h */ case    0:  		/* rlwinm. R11, R23, 0, 24, 31 */
		/* 821DABE4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R23);
		/* 821DABE4h case    0:*/		return 0x821DABE8;
		  /* 821DABE8h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821DABE8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DABF4;  }
		/* 821DABE8h case    1:*/		return 0x821DABEC;
		  /* 821DABECh */ case    2:  		/* mr R3, R22 */
		/* 821DABECh case    2:*/		regs.R3 = regs.R22;
		/* 821DABECh case    2:*/		return 0x821DABF0;
		  /* 821DABF0h */ case    3:  		/* bl 67376 */
		/* 821DABF0h case    3:*/		regs.LR = 0x821DABF4; return 0x821EB320;
		/* 821DABF0h case    3:*/		return 0x821DABF4;
	}
	return 0x821DABF4;
} // Block from 821DABE4h-821DABF4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DABF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DABF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DABF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DABF4);
		  /* 821DABF4h */ case    0:  		/* mr R3, R19 */
		/* 821DABF4h case    0:*/		regs.R3 = regs.R19;
		/* 821DABF4h case    0:*/		return 0x821DABF8;
		  /* 821DABF8h */ case    1:  		/* addi R1, R1, 272 */
		/* 821DABF8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x110);
		/* 821DABF8h case    1:*/		return 0x821DABFC;
		  /* 821DABFCh */ case    2:  		/* b -1350012 */
		/* 821DABFCh case    2:*/		return 0x82091280;
		/* 821DABFCh case    2:*/		return 0x821DAC00;
	}
	return 0x821DAC00;
} // Block from 821DABF4h-821DAC00h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DAC00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAC00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAC00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAC00);
		  /* 821DAC00h */ case    0:  		/* mfspr R12, LR */
		/* 821DAC00h case    0:*/		regs.R12 = regs.LR;
		/* 821DAC00h case    0:*/		return 0x821DAC04;
		  /* 821DAC04h */ case    1:  		/* bl -1350104 */
		/* 821DAC04h case    1:*/		regs.LR = 0x821DAC08; return 0x8209122C;
		/* 821DAC04h case    1:*/		return 0x821DAC08;
		  /* 821DAC08h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 821DAC08h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 821DAC08h case    2:*/		return 0x821DAC0C;
		  /* 821DAC0Ch */ case    3:  		/* lwz R11, <#[R3 + 40]> */
		/* 821DAC0Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000028) );
		/* 821DAC0Ch case    3:*/		return 0x821DAC10;
		  /* 821DAC10h */ case    4:  		/* mr R25, R3 */
		/* 821DAC10h case    4:*/		regs.R25 = regs.R3;
		/* 821DAC10h case    4:*/		return 0x821DAC14;
		  /* 821DAC14h */ case    5:  		/* li R17, 1 */
		/* 821DAC14h case    5:*/		cpu::op::li<0>(regs,&regs.R17,0x1);
		/* 821DAC14h case    5:*/		return 0x821DAC18;
		  /* 821DAC18h */ case    6:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 821DAC18h case    6:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 821DAC18h case    6:*/		return 0x821DAC1C;
		  /* 821DAC1Ch */ case    7:  		/* bc 12, CR0_EQ, 340 */
		/* 821DAC1Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x821DAD70;  }
		/* 821DAC1Ch case    7:*/		return 0x821DAC20;
		  /* 821DAC20h */ case    8:  		/* lwz R11, <#[R3 + 4]> */
		/* 821DAC20h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821DAC20h case    8:*/		return 0x821DAC24;
		  /* 821DAC24h */ case    9:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DAC24h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DAC24h case    9:*/		return 0x821DAC28;
		  /* 821DAC28h */ case   10:  		/* bc 4, CR0_EQ, 328 */
		/* 821DAC28h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821DAD70;  }
		/* 821DAC28h case   10:*/		return 0x821DAC2C;
		  /* 821DAC2Ch */ case   11:  		/* mr R29, R11 */
		/* 821DAC2Ch case   11:*/		regs.R29 = regs.R11;
		/* 821DAC2Ch case   11:*/		return 0x821DAC30;
		  /* 821DAC30h */ case   12:  		/* cmplwi CR0, R11, 0 */
		/* 821DAC30h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DAC30h case   12:*/		return 0x821DAC34;
		  /* 821DAC34h */ case   13:  		/* bc 12, CR0_EQ, 316 */
		/* 821DAC34h case   13:*/		if ( regs.CR[0].eq ) { return 0x821DAD70;  }
		/* 821DAC34h case   13:*/		return 0x821DAC38;
		  /* 821DAC38h */ case   14:  		/* lwz R11, <#[R29 + 36]> */
		/* 821DAC38h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 821DAC38h case   14:*/		return 0x821DAC3C;
		  /* 821DAC3Ch */ case   15:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DAC3Ch case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DAC3Ch case   15:*/		return 0x821DAC40;
		  /* 821DAC40h */ case   16:  		/* bc 4, CR0_EQ, 276 */
		/* 821DAC40h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821DAD54;  }
		/* 821DAC40h case   16:*/		return 0x821DAC44;
		  /* 821DAC44h */ case   17:  		/* lwz R11, <#[R29 + 32]> */
		/* 821DAC44h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000020) );
		/* 821DAC44h case   17:*/		return 0x821DAC48;
		  /* 821DAC48h */ case   18:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DAC48h case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DAC48h case   18:*/		return 0x821DAC4C;
		  /* 821DAC4Ch */ case   19:  		/* addic. R30, R11, -40 */
		/* 821DAC4Ch case   19:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R11,0xFFFFFFD8);
		/* 821DAC4Ch case   19:*/		return 0x821DAC50;
		  /* 821DAC50h */ case   20:  		/* bc 12, CR0_EQ, 260 */
		/* 821DAC50h case   20:*/		if ( regs.CR[0].eq ) { return 0x821DAD54;  }
		/* 821DAC50h case   20:*/		return 0x821DAC54;
		  /* 821DAC54h */ case   21:  		/* lwz R31, <#[R30 + 8]> */
		/* 821DAC54h case   21:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000008) );
		/* 821DAC54h case   21:*/		return 0x821DAC58;
		  /* 821DAC58h */ case   22:  		/* rlwinm R4, R31, 25, 25, 31 */
		/* 821DAC58h case   22:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R31);
		/* 821DAC58h case   22:*/		return 0x821DAC5C;
		  /* 821DAC5Ch */ case   23:  		/* cmplwi CR6, R4, 86 */
		/* 821DAC5Ch case   23:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000056);
		/* 821DAC5Ch case   23:*/		return 0x821DAC60;
		  /* 821DAC60h */ case   24:  		/* bc 12, CR6_EQ, 48 */
		/* 821DAC60h case   24:*/		if ( regs.CR[6].eq ) { return 0x821DAC90;  }
		/* 821DAC60h case   24:*/		return 0x821DAC64;
		  /* 821DAC64h */ case   25:  		/* cmplwi CR6, R4, 87 */
		/* 821DAC64h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000057);
		/* 821DAC64h case   25:*/		return 0x821DAC68;
		  /* 821DAC68h */ case   26:  		/* bc 12, CR6_EQ, 40 */
		/* 821DAC68h case   26:*/		if ( regs.CR[6].eq ) { return 0x821DAC90;  }
		/* 821DAC68h case   26:*/		return 0x821DAC6C;
		  /* 821DAC6Ch */ case   27:  		/* cmplwi CR6, R4, 89 */
		/* 821DAC6Ch case   27:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000059);
		/* 821DAC6Ch case   27:*/		return 0x821DAC70;
		  /* 821DAC70h */ case   28:  		/* bc 12, CR6_EQ, 32 */
		/* 821DAC70h case   28:*/		if ( regs.CR[6].eq ) { return 0x821DAC90;  }
		/* 821DAC70h case   28:*/		return 0x821DAC74;
		  /* 821DAC74h */ case   29:  		/* cmplwi CR6, R4, 90 */
		/* 821DAC74h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x0000005A);
		/* 821DAC74h case   29:*/		return 0x821DAC78;
		  /* 821DAC78h */ case   30:  		/* bc 12, CR6_EQ, 24 */
		/* 821DAC78h case   30:*/		if ( regs.CR[6].eq ) { return 0x821DAC90;  }
		/* 821DAC78h case   30:*/		return 0x821DAC7C;
		  /* 821DAC7Ch */ case   31:  		/* cmplwi CR6, R4, 84 */
		/* 821DAC7Ch case   31:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000054);
		/* 821DAC7Ch case   31:*/		return 0x821DAC80;
		  /* 821DAC80h */ case   32:  		/* bc 12, CR6_EQ, 16 */
		/* 821DAC80h case   32:*/		if ( regs.CR[6].eq ) { return 0x821DAC90;  }
		/* 821DAC80h case   32:*/		return 0x821DAC84;
		  /* 821DAC84h */ case   33:  		/* cmplwi CR6, R4, 85 */
		/* 821DAC84h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000055);
		/* 821DAC84h case   33:*/		return 0x821DAC88;
		  /* 821DAC88h */ case   34:  		/* li R11, 0 */
		/* 821DAC88h case   34:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DAC88h case   34:*/		return 0x821DAC8C;
		  /* 821DAC8Ch */ case   35:  		/* bc 4, CR6_EQ, 8 */
		/* 821DAC8Ch case   35:*/		if ( !regs.CR[6].eq ) { return 0x821DAC94;  }
		/* 821DAC8Ch case   35:*/		return 0x821DAC90;
	}
	return 0x821DAC90;
} // Block from 821DAC00h-821DAC90h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821DAC90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAC90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAC90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAC90);
		  /* 821DAC90h */ case    0:  		/* mr R11, R17 */
		/* 821DAC90h case    0:*/		regs.R11 = regs.R17;
		/* 821DAC90h case    0:*/		return 0x821DAC94;
	}
	return 0x821DAC94;
} // Block from 821DAC90h-821DAC94h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DAC94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAC94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAC94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAC94);
		  /* 821DAC94h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DAC94h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DAC94h case    0:*/		return 0x821DAC98;
		  /* 821DAC98h */ case    1:  		/* bc 12, CR0_EQ, 188 */
		/* 821DAC98h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DAD54;  }
		/* 821DAC98h case    1:*/		return 0x821DAC9C;
		  /* 821DAC9Ch */ case    2:  		/* rlwinm R6, R31, 18, 29, 31 */
		/* 821DAC9Ch case    2:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R31);
		/* 821DAC9Ch case    2:*/		return 0x821DACA0;
		  /* 821DACA0h */ case    3:  		/* rlwinm R5, R31, 13, 29, 31 */
		/* 821DACA0h case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R31);
		/* 821DACA0h case    3:*/		return 0x821DACA4;
		  /* 821DACA4h */ case    4:  		/* mr R3, R25 */
		/* 821DACA4h case    4:*/		regs.R3 = regs.R25;
		/* 821DACA4h case    4:*/		return 0x821DACA8;
		  /* 821DACA8h */ case    5:  		/* bl -485496 */
		/* 821DACA8h case    5:*/		regs.LR = 0x821DACAC; return 0x82164430;
		/* 821DACA8h case    5:*/		return 0x821DACAC;
		  /* 821DACACh */ case    6:  		/* addi R11, R30, -16 */
		/* 821DACACh case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFF0);
		/* 821DACACh case    6:*/		return 0x821DACB0;
		  /* 821DACB0h */ case    7:  		/* add R11, R3, R11 */
		/* 821DACB0h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821DACB0h case    7:*/		return 0x821DACB4;
		  /* 821DACB4h */ case    8:  		/* lwz R10, <#[R11 + 8]> */
		/* 821DACB4h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821DACB4h case    8:*/		return 0x821DACB8;
		  /* 821DACB8h */ case    9:  		/* rlwinm. R9, R10, 0, 30, 31 */
		/* 821DACB8h case    9:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R9,regs.R10);
		/* 821DACB8h case    9:*/		return 0x821DACBC;
		  /* 821DACBCh */ case   10:  		/* bc 4, CR0_EQ, 152 */
		/* 821DACBCh case   10:*/		if ( !regs.CR[0].eq ) { return 0x821DAD54;  }
		/* 821DACBCh case   10:*/		return 0x821DACC0;
		  /* 821DACC0h */ case   11:  		/* rlwinm R8, R10, 30, 28, 31 */
		/* 821DACC0h case   11:*/		cpu::op::rlwinm<0,30,28,31>(regs,&regs.R8,regs.R10);
		/* 821DACC0h case   11:*/		return 0x821DACC4;
		  /* 821DACC4h */ case   12:  		/* cmpwi CR6, R8, 9 */
		/* 821DACC4h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000009);
		/* 821DACC4h case   12:*/		return 0x821DACC8;
		  /* 821DACC8h */ case   13:  		/* bc 12, CR6_EQ, 12 */
		/* 821DACC8h case   13:*/		if ( regs.CR[6].eq ) { return 0x821DACD4;  }
		/* 821DACC8h case   13:*/		return 0x821DACCC;
		  /* 821DACCCh */ case   14:  		/* cmpwi CR6, R8, 8 */
		/* 821DACCCh case   14:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000008);
		/* 821DACCCh case   14:*/		return 0x821DACD0;
		  /* 821DACD0h */ case   15:  		/* bc 4, CR6_EQ, 132 */
		/* 821DACD0h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821DAD54;  }
		/* 821DACD0h case   15:*/		return 0x821DACD4;
	}
	return 0x821DACD4;
} // Block from 821DAC94h-821DACD4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821DACD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DACD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DACD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DACD4);
		  /* 821DACD4h */ case    0:  		/* lwz R9, <#[R29 + 12]> */
		/* 821DACD4h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x0000000C) );
		/* 821DACD4h case    0:*/		return 0x821DACD8;
		  /* 821DACD8h */ case    1:  		/* cmplwi CR6, R9, 0 */
		/* 821DACD8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821DACD8h case    1:*/		return 0x821DACDC;
		  /* 821DACDCh */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 821DACDCh case    2:*/		if ( regs.CR[6].eq ) { return 0x821DACF8;  }
		/* 821DACDCh case    2:*/		return 0x821DACE0;
		  /* 821DACE0h */ case    3:  		/* lwz R10, <#[R9]> */
		/* 821DACE0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 821DACE0h case    3:*/		return 0x821DACE4;
		  /* 821DACE4h */ case    4:  		/* lwz R7, <#[R11]> */
		/* 821DACE4h case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821DACE4h case    4:*/		return 0x821DACE8;
		  /* 821DACE8h */ case    5:  		/* cmplw CR6, R10, R7 */
		/* 821DACE8h case    5:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 821DACE8h case    5:*/		return 0x821DACEC;
		  /* 821DACECh */ case    6:  		/* bc 4, CR6_EQ, 16 */
		/* 821DACECh case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DACFC;  }
		/* 821DACECh case    6:*/		return 0x821DACF0;
		  /* 821DACF0h */ case    7:  		/* lwz R9, <#[R9 + 8]> */
		/* 821DACF0h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821DACF0h case    7:*/		return 0x821DACF4;
		  /* 821DACF4h */ case    8:  		/* b -28 */
		/* 821DACF4h case    8:*/		return 0x821DACD8;
		/* 821DACF4h case    8:*/		return 0x821DACF8;
	}
	return 0x821DACF8;
} // Block from 821DACD4h-821DACF8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821DACF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DACF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DACF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DACF8);
		  /* 821DACF8h */ case    0:  		/* li R10, 0 */
		/* 821DACF8h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821DACF8h case    0:*/		return 0x821DACFC;
	}
	return 0x821DACFC;
} // Block from 821DACF8h-821DACFCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DACFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DACFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DACFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DACFC);
		  /* 821DACFCh */ case    0:  		/* addi R9, R8, -8 */
		/* 821DACFCh case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0xFFFFFFF8);
		/* 821DACFCh case    0:*/		return 0x821DAD00;
		  /* 821DAD00h */ case    1:  		/* lwz R8, <#[R11 + 12]> */
		/* 821DAD00h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DAD00h case    1:*/		return 0x821DAD04;
		  /* 821DAD04h */ case    2:  		/* cntlzw R9, R9 */
		/* 821DAD04h case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R9,regs.R9);
		/* 821DAD04h case    2:*/		return 0x821DAD08;
		  /* 821DAD08h */ case    3:  		/* rlwinm R8, R8, 31, 31, 31 */
		/* 821DAD08h case    3:*/		cpu::op::rlwinm<0,31,31,31>(regs,&regs.R8,regs.R8);
		/* 821DAD08h case    3:*/		return 0x821DAD0C;
		  /* 821DAD0Ch */ case    4:  		/* rlwinm R9, R9, 27, 31, 31 */
		/* 821DAD0Ch case    4:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R9,regs.R9);
		/* 821DAD0Ch case    4:*/		return 0x821DAD10;
		  /* 821DAD10h */ case    5:  		/* cmpw CR6, R8, R9 */
		/* 821DAD10h case    5:*/		cpu::op::cmpw<6>(regs,regs.R8,regs.R9);
		/* 821DAD10h case    5:*/		return 0x821DAD14;
		  /* 821DAD14h */ case    6:  		/* bc 12, CR6_EQ, 36 */
		/* 821DAD14h case    6:*/		if ( regs.CR[6].eq ) { return 0x821DAD38;  }
		/* 821DAD14h case    6:*/		return 0x821DAD18;
		  /* 821DAD18h */ case    7:  		/* nor R8, R31, R31 */
		/* 821DAD18h case    7:*/		cpu::op::nor<0>(regs,&regs.R8,regs.R31,regs.R31);
		/* 821DAD18h case    7:*/		return 0x821DAD1C;
		  /* 821DAD1Ch */ case    8:  		/* rlwimi R8, R31, 0, 14, 12 */
		/* 821DAD1Ch case    8:*/		cpu::op::rlwimi<0,0,14,12>(regs,&regs.R8,regs.R31);
		/* 821DAD1Ch case    8:*/		return 0x821DAD20;
		  /* 821DAD20h */ case    9:  		/* stw R8, <#[R30 + 8]> */
		/* 821DAD20h case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R30 + 0x00000008) );
		/* 821DAD20h case    9:*/		return 0x821DAD24;
		  /* 821DAD24h */ case   10:  		/* lwz R8, <#[R11 + 12]> */
		/* 821DAD24h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DAD24h case   10:*/		return 0x821DAD28;
		  /* 821DAD28h */ case   11:  		/* nor R7, R8, R8 */
		/* 821DAD28h case   11:*/		cpu::op::nor<0>(regs,&regs.R7,regs.R8,regs.R8);
		/* 821DAD28h case   11:*/		return 0x821DAD2C;
		  /* 821DAD2Ch */ case   12:  		/* rlwimi R7, R8, 0, 31, 29 */
		/* 821DAD2Ch case   12:*/		cpu::op::rlwimi<0,0,31,29>(regs,&regs.R7,regs.R8);
		/* 821DAD2Ch case   12:*/		return 0x821DAD30;
		  /* 821DAD30h */ case   13:  		/* stw R10, <#[R11]> */
		/* 821DAD30h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DAD30h case   13:*/		return 0x821DAD34;
		  /* 821DAD34h */ case   14:  		/* stw R7, <#[R11 + 12]> */
		/* 821DAD34h case   14:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DAD34h case   14:*/		return 0x821DAD38;
	}
	return 0x821DAD38;
} // Block from 821DACFCh-821DAD38h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821DAD38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAD38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAD38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAD38);
		  /* 821DAD38h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 821DAD38h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821DAD38h case    0:*/		return 0x821DAD3C;
		  /* 821DAD3Ch */ case    1:  		/* rlwinm R11, R11, 14, 31, 31 */
		/* 821DAD3Ch case    1:*/		cpu::op::rlwinm<0,14,31,31>(regs,&regs.R11,regs.R11);
		/* 821DAD3Ch case    1:*/		return 0x821DAD40;
		  /* 821DAD40h */ case    2:  		/* cmpw CR6, R11, R9 */
		/* 821DAD40h case    2:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R9);
		/* 821DAD40h case    2:*/		return 0x821DAD44;
		  /* 821DAD44h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 821DAD44h case    3:*/		if ( regs.CR[6].eq ) { return 0x821DAD54;  }
		/* 821DAD44h case    3:*/		return 0x821DAD48;
		  /* 821DAD48h */ case    4:  		/* mr R4, R30 */
		/* 821DAD48h case    4:*/		regs.R4 = regs.R30;
		/* 821DAD48h case    4:*/		return 0x821DAD4C;
		  /* 821DAD4Ch */ case    5:  		/* mr R3, R25 */
		/* 821DAD4Ch case    5:*/		regs.R3 = regs.R25;
		/* 821DAD4Ch case    5:*/		return 0x821DAD50;
		  /* 821DAD50h */ case    6:  		/* bl -402248 */
		/* 821DAD50h case    6:*/		regs.LR = 0x821DAD54; return 0x82178A08;
		/* 821DAD50h case    6:*/		return 0x821DAD54;
	}
	return 0x821DAD54;
} // Block from 821DAD38h-821DAD54h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DAD54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAD54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAD54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAD54);
		  /* 821DAD54h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821DAD54h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821DAD54h case    0:*/		return 0x821DAD58;
		  /* 821DAD58h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DAD58h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DAD58h case    1:*/		return 0x821DAD5C;
		  /* 821DAD5Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DAD5Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DAD5Ch case    2:*/		return 0x821DAD60;
		  /* 821DAD60h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DAD60h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DAD70;  }
		/* 821DAD60h case    3:*/		return 0x821DAD64;
		  /* 821DAD64h */ case    4:  		/* mr R29, R11 */
		/* 821DAD64h case    4:*/		regs.R29 = regs.R11;
		/* 821DAD64h case    4:*/		return 0x821DAD68;
		  /* 821DAD68h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DAD68h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DAD68h case    5:*/		return 0x821DAD6C;
		  /* 821DAD6Ch */ case    6:  		/* bc 4, CR6_EQ, -308 */
		/* 821DAD6Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DAC38;  }
		/* 821DAD6Ch case    6:*/		return 0x821DAD70;
	}
	return 0x821DAD70;
} // Block from 821DAD54h-821DAD70h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DAD70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAD70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAD70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAD70);
		  /* 821DAD70h */ case    0:  		/* lwz R11, <#[R25 + 40]> */
		/* 821DAD70h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000028) );
		/* 821DAD70h case    0:*/		return 0x821DAD74;
		  /* 821DAD74h */ case    1:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 821DAD74h case    1:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 821DAD74h case    1:*/		return 0x821DAD78;
		  /* 821DAD78h */ case    2:  		/* bc 12, CR0_EQ, 452 */
		/* 821DAD78h case    2:*/		if ( regs.CR[0].eq ) { return 0x821DAF3C;  }
		/* 821DAD78h case    2:*/		return 0x821DAD7C;
		  /* 821DAD7Ch */ case    3:  		/* lwz R10, <#[R25 + 620]> */
		/* 821DAD7Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x0000026C) );
		/* 821DAD7Ch case    3:*/		return 0x821DAD80;
		  /* 821DAD80h */ case    4:  		/* lwz R11, <#[R25 + 616]> */
		/* 821DAD80h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000268) );
		/* 821DAD80h case    4:*/		return 0x821DAD84;
		  /* 821DAD84h */ case    5:  		/* mulli R10, R10, 68 */
		/* 821DAD84h case    5:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 821DAD84h case    5:*/		return 0x821DAD88;
		  /* 821DAD88h */ case    6:  		/* add R10, R10, R11 */
		/* 821DAD88h case    6:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821DAD88h case    6:*/		return 0x821DAD8C;
		  /* 821DAD8Ch */ case    7:  		/* cmplw CR6, R11, R10 */
		/* 821DAD8Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821DAD8Ch case    7:*/		return 0x821DAD90;
		  /* 821DAD90h */ case    8:  		/* bc 4, CR6_LT, 428 */
		/* 821DAD90h case    8:*/		if ( !regs.CR[6].lt ) { return 0x821DAF3C;  }
		/* 821DAD90h case    8:*/		return 0x821DAD94;
		  /* 821DAD94h */ case    9:  		/* addi R31, R11, 4 */
		/* 821DAD94h case    9:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x4);
		/* 821DAD94h case    9:*/		return 0x821DAD98;
		  /* 821DAD98h */ case   10:  		/* lwz R11, <#[R31 + 56]> */
		/* 821DAD98h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000038) );
		/* 821DAD98h case   10:*/		return 0x821DAD9C;
		  /* 821DAD9Ch */ case   11:  		/* rlwinm. R11, R11, 0, 21, 21 */
		/* 821DAD9Ch case   11:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R11,regs.R11);
		/* 821DAD9Ch case   11:*/		return 0x821DADA0;
		  /* 821DADA0h */ case   12:  		/* bc 12, CR0_EQ, 380 */
		/* 821DADA0h case   12:*/		if ( regs.CR[0].eq ) { return 0x821DAF1C;  }
		/* 821DADA0h case   12:*/		return 0x821DADA4;
		  /* 821DADA4h */ case   13:  		/* lwz R11, <#[R31 + 4]> */
		/* 821DADA4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821DADA4h case   13:*/		return 0x821DADA8;
		  /* 821DADA8h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821DADA8h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DADA8h case   14:*/		return 0x821DADAC;
		  /* 821DADACh */ case   15:  		/* bc 12, CR6_EQ, 48 */
		/* 821DADACh case   15:*/		if ( regs.CR[6].eq ) { return 0x821DADDC;  }
		/* 821DADACh case   15:*/		return 0x821DADB0;
		  /* 821DADB0h */ case   16:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DADB0h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DADB0h case   16:*/		return 0x821DADB4;
		  /* 821DADB4h */ case   17:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 821DADB4h case   17:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 821DADB4h case   17:*/		return 0x821DADB8;
		  /* 821DADB8h */ case   18:  		/* bc 12, CR0_EQ, 36 */
		/* 821DADB8h case   18:*/		if ( regs.CR[0].eq ) { return 0x821DADDC;  }
		/* 821DADB8h case   18:*/		return 0x821DADBC;
		  /* 821DADBCh */ case   19:  		/* b 16 */
		/* 821DADBCh case   19:*/		return 0x821DADCC;
		/* 821DADBCh case   19:*/		return 0x821DADC0;
		  /* 821DADC0h */ case   20:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DADC0h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DADC0h case   20:*/		return 0x821DADC4;
		  /* 821DADC4h */ case   21:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 821DADC4h case   21:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 821DADC4h case   21:*/		return 0x821DADC8;
		  /* 821DADC8h */ case   22:  		/* bc 12, CR0_EQ, 16 */
		/* 821DADC8h case   22:*/		if ( regs.CR[0].eq ) { return 0x821DADD8;  }
		/* 821DADC8h case   22:*/		return 0x821DADCC;
	}
	return 0x821DADCC;
} // Block from 821DAD70h-821DADCCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 821DADCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DADCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DADCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DADCC);
		  /* 821DADCCh */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 821DADCCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821DADCCh case    0:*/		return 0x821DADD0;
		  /* 821DADD0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DADD0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DADD0h case    1:*/		return 0x821DADD4;
		  /* 821DADD4h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 821DADD4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DADC0;  }
		/* 821DADD4h case    2:*/		return 0x821DADD8;
	}
	return 0x821DADD8;
} // Block from 821DADCCh-821DADD8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DADD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DADD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DADD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DADD8);
		  /* 821DADD8h */ case    0:  		/* stw R11, <#[R31 + 4]> */
		/* 821DADD8h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821DADD8h case    0:*/		return 0x821DADDC;
	}
	return 0x821DADDC;
} // Block from 821DADD8h-821DADDCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DADDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DADDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DADDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DADDC);
		  /* 821DADDCh */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821DADDCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821DADDCh case    0:*/		return 0x821DADE0;
		  /* 821DADE0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DADE0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DADE0h case    1:*/		return 0x821DADE4;
		  /* 821DADE4h */ case    2:  		/* bc 12, CR6_EQ, 48 */
		/* 821DADE4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DAE14;  }
		/* 821DADE4h case    2:*/		return 0x821DADE8;
		  /* 821DADE8h */ case    3:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DADE8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DADE8h case    3:*/		return 0x821DADEC;
		  /* 821DADECh */ case    4:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 821DADECh case    4:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 821DADECh case    4:*/		return 0x821DADF0;
		  /* 821DADF0h */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 821DADF0h case    5:*/		if ( regs.CR[0].eq ) { return 0x821DAE14;  }
		/* 821DADF0h case    5:*/		return 0x821DADF4;
		  /* 821DADF4h */ case    6:  		/* b 16 */
		/* 821DADF4h case    6:*/		return 0x821DAE04;
		/* 821DADF4h case    6:*/		return 0x821DADF8;
		  /* 821DADF8h */ case    7:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DADF8h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DADF8h case    7:*/		return 0x821DADFC;
		  /* 821DADFCh */ case    8:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 821DADFCh case    8:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 821DADFCh case    8:*/		return 0x821DAE00;
		  /* 821DAE00h */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 821DAE00h case    9:*/		if ( regs.CR[0].eq ) { return 0x821DAE10;  }
		/* 821DAE00h case    9:*/		return 0x821DAE04;
	}
	return 0x821DAE04;
} // Block from 821DADDCh-821DAE04h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DAE04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAE04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAE04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAE04);
		  /* 821DAE04h */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 821DAE04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821DAE04h case    0:*/		return 0x821DAE08;
		  /* 821DAE08h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DAE08h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DAE08h case    1:*/		return 0x821DAE0C;
		  /* 821DAE0Ch */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 821DAE0Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DADF8;  }
		/* 821DAE0Ch case    2:*/		return 0x821DAE10;
	}
	return 0x821DAE10;
} // Block from 821DAE04h-821DAE10h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DAE10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAE10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAE10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAE10);
		  /* 821DAE10h */ case    0:  		/* stw R11, <#[R31]> */
		/* 821DAE10h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821DAE10h case    0:*/		return 0x821DAE14;
	}
	return 0x821DAE14;
} // Block from 821DAE10h-821DAE14h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DAE14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAE14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAE14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAE14);
		  /* 821DAE14h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DAE14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DAE14h case    0:*/		return 0x821DAE18;
		  /* 821DAE18h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DAE18h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DAE18h case    1:*/		return 0x821DAE1C;
		  /* 821DAE1Ch */ case    2:  		/* bc 12, CR6_EQ, 48 */
		/* 821DAE1Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821DAE4C;  }
		/* 821DAE1Ch case    2:*/		return 0x821DAE20;
		  /* 821DAE20h */ case    3:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DAE20h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DAE20h case    3:*/		return 0x821DAE24;
		  /* 821DAE24h */ case    4:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 821DAE24h case    4:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 821DAE24h case    4:*/		return 0x821DAE28;
		  /* 821DAE28h */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 821DAE28h case    5:*/		if ( regs.CR[0].eq ) { return 0x821DAE4C;  }
		/* 821DAE28h case    5:*/		return 0x821DAE2C;
		  /* 821DAE2Ch */ case    6:  		/* b 16 */
		/* 821DAE2Ch case    6:*/		return 0x821DAE3C;
		/* 821DAE2Ch case    6:*/		return 0x821DAE30;
		  /* 821DAE30h */ case    7:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DAE30h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DAE30h case    7:*/		return 0x821DAE34;
		  /* 821DAE34h */ case    8:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 821DAE34h case    8:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 821DAE34h case    8:*/		return 0x821DAE38;
		  /* 821DAE38h */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 821DAE38h case    9:*/		if ( regs.CR[0].eq ) { return 0x821DAE48;  }
		/* 821DAE38h case    9:*/		return 0x821DAE3C;
	}
	return 0x821DAE3C;
} // Block from 821DAE14h-821DAE3Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DAE3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAE3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAE3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAE3C);
		  /* 821DAE3Ch */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 821DAE3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821DAE3Ch case    0:*/		return 0x821DAE40;
		  /* 821DAE40h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DAE40h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DAE40h case    1:*/		return 0x821DAE44;
		  /* 821DAE44h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 821DAE44h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DAE30;  }
		/* 821DAE44h case    2:*/		return 0x821DAE48;
	}
	return 0x821DAE48;
} // Block from 821DAE3Ch-821DAE48h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DAE48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAE48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAE48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAE48);
		  /* 821DAE48h */ case    0:  		/* stw R11, <#[R31 + 8]> */
		/* 821DAE48h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DAE48h case    0:*/		return 0x821DAE4C;
	}
	return 0x821DAE4C;
} // Block from 821DAE48h-821DAE4Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DAE4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAE4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAE4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAE4C);
		  /* 821DAE4Ch */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 821DAE4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821DAE4Ch case    0:*/		return 0x821DAE50;
		  /* 821DAE50h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DAE50h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DAE50h case    1:*/		return 0x821DAE54;
		  /* 821DAE54h */ case    2:  		/* bc 12, CR6_EQ, 200 */
		/* 821DAE54h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DAF1C;  }
		/* 821DAE54h case    2:*/		return 0x821DAE58;
		  /* 821DAE58h */ case    3:  		/* lwz R10, <#[R31]> */
		/* 821DAE58h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821DAE58h case    3:*/		return 0x821DAE5C;
		  /* 821DAE5Ch */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821DAE5Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DAE5Ch case    4:*/		return 0x821DAE60;
		  /* 821DAE60h */ case    5:  		/* bc 12, CR6_EQ, 188 */
		/* 821DAE60h case    5:*/		if ( regs.CR[6].eq ) { return 0x821DAF1C;  }
		/* 821DAE60h case    5:*/		return 0x821DAE64;
		  /* 821DAE64h */ case    6:  		/* lwz R10, <#[R31 + 8]> */
		/* 821DAE64h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821DAE64h case    6:*/		return 0x821DAE68;
		  /* 821DAE68h */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 821DAE68h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DAE68h case    7:*/		return 0x821DAE6C;
		  /* 821DAE6Ch */ case    8:  		/* bc 12, CR6_EQ, 176 */
		/* 821DAE6Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x821DAF1C;  }
		/* 821DAE6Ch case    8:*/		return 0x821DAE70;
		  /* 821DAE70h */ case    9:  		/* lwz R10, <#[R11 + 36]> */
		/* 821DAE70h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 821DAE70h case    9:*/		return 0x821DAE74;
		  /* 821DAE74h */ case   10:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821DAE74h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821DAE74h case   10:*/		return 0x821DAE78;
		  /* 821DAE78h */ case   11:  		/* bc 4, CR0_EQ, 164 */
		/* 821DAE78h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821DAF1C;  }
		/* 821DAE78h case   11:*/		return 0x821DAE7C;
		  /* 821DAE7Ch */ case   12:  		/* lwz R11, <#[R11 + 32]> */
		/* 821DAE7Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 821DAE7Ch case   12:*/		return 0x821DAE80;
		  /* 821DAE80h */ case   13:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DAE80h case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DAE80h case   13:*/		return 0x821DAE84;
		  /* 821DAE84h */ case   14:  		/* addic. R11, R11, -40 */
		/* 821DAE84h case   14:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 821DAE84h case   14:*/		return 0x821DAE88;
		  /* 821DAE88h */ case   15:  		/* bc 12, CR0_EQ, 148 */
		/* 821DAE88h case   15:*/		if ( regs.CR[0].eq ) { return 0x821DAF1C;  }
		/* 821DAE88h case   15:*/		return 0x821DAE8C;
		  /* 821DAE8Ch */ case   16:  		/* lwz R11, <#[R11 + 8]> */
		/* 821DAE8Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821DAE8Ch case   16:*/		return 0x821DAE90;
		  /* 821DAE90h */ case   17:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DAE90h case   17:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DAE90h case   17:*/		return 0x821DAE94;
		  /* 821DAE94h */ case   18:  		/* cmplwi CR6, R11, 10880 */
		/* 821DAE94h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002A80);
		/* 821DAE94h case   18:*/		return 0x821DAE98;
		  /* 821DAE98h */ case   19:  		/* bc 4, CR6_EQ, 132 */
		/* 821DAE98h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821DAF1C;  }
		/* 821DAE98h case   19:*/		return 0x821DAE9C;
		  /* 821DAE9Ch */ case   20:  		/* addi R4, R31, -4 */
		/* 821DAE9Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0xFFFFFFFC);
		/* 821DAE9Ch case   20:*/		return 0x821DAEA0;
		  /* 821DAEA0h */ case   21:  		/* mr R3, R25 */
		/* 821DAEA0h case   21:*/		regs.R3 = regs.R25;
		/* 821DAEA0h case   21:*/		return 0x821DAEA4;
		  /* 821DAEA4h */ case   22:  		/* bl -81628 */
		/* 821DAEA4h case   22:*/		regs.LR = 0x821DAEA8; return 0x821C6FC8;
		/* 821DAEA4h case   22:*/		return 0x821DAEA8;
		  /* 821DAEA8h */ case   23:  		/* lwz R30, <#[R31 + 16]> */
		/* 821DAEA8h case   23:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000010) );
		/* 821DAEA8h case   23:*/		return 0x821DAEAC;
		  /* 821DAEACh */ case   24:  		/* lwz R11, <#[R30 + 28]> */
		/* 821DAEACh case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 821DAEACh case   24:*/		return 0x821DAEB0;
		  /* 821DAEB0h */ case   25:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DAEB0h case   25:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DAEB0h case   25:*/		return 0x821DAEB4;
		  /* 821DAEB4h */ case   26:  		/* bc 12, CR0_EQ, 104 */
		/* 821DAEB4h case   26:*/		if ( regs.CR[0].eq ) { return 0x821DAF1C;  }
		/* 821DAEB4h case   26:*/		return 0x821DAEB8;
		  /* 821DAEB8h */ case   27:  		/* addi R29, R30, 24 */
		/* 821DAEB8h case   27:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x18);
		/* 821DAEB8h case   27:*/		return 0x821DAEBC;
		  /* 821DAEBCh */ case   28:  		/* li R8, 0 */
		/* 821DAEBCh case   28:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821DAEBCh case   28:*/		return 0x821DAEC0;
		  /* 821DAEC0h */ case   29:  		/* mr R5, R29 */
		/* 821DAEC0h case   29:*/		regs.R5 = regs.R29;
		/* 821DAEC0h case   29:*/		return 0x821DAEC4;
		  /* 821DAEC4h */ case   30:  		/* li R7, 0 */
		/* 821DAEC4h case   30:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821DAEC4h case   30:*/		return 0x821DAEC8;
		  /* 821DAEC8h */ case   31:  		/* li R6, 117 */
		/* 821DAEC8h case   31:*/		cpu::op::li<0>(regs,&regs.R6,0x75);
		/* 821DAEC8h case   31:*/		return 0x821DAECC;
		  /* 821DAECCh */ case   32:  		/* mr R4, R30 */
		/* 821DAECCh case   32:*/		regs.R4 = regs.R30;
		/* 821DAECCh case   32:*/		return 0x821DAED0;
		  /* 821DAED0h */ case   33:  		/* mr R3, R25 */
		/* 821DAED0h case   33:*/		regs.R3 = regs.R25;
		/* 821DAED0h case   33:*/		return 0x821DAED4;
		  /* 821DAED4h */ case   34:  		/* bl 301764 */
		/* 821DAED4h case   34:*/		regs.LR = 0x821DAED8; return 0x82224998;
		/* 821DAED4h case   34:*/		return 0x821DAED8;
		  /* 821DAED8h */ case   35:  		/* lwz R11, <#[R3 + 8]> */
		/* 821DAED8h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821DAED8h case   35:*/		return 0x821DAEDC;
		  /* 821DAEDCh */ case   36:  		/* mr R28, R3 */
		/* 821DAEDCh case   36:*/		regs.R28 = regs.R3;
		/* 821DAEDCh case   36:*/		return 0x821DAEE0;
		  /* 821DAEE0h */ case   37:  		/* oris R11, R11, 512 */
		/* 821DAEE0h case   37:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821DAEE0h case   37:*/		return 0x821DAEE4;
		  /* 821DAEE4h */ case   38:  		/* li R8, 0 */
		/* 821DAEE4h case   38:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821DAEE4h case   38:*/		return 0x821DAEE8;
		  /* 821DAEE8h */ case   39:  		/* li R7, 0 */
		/* 821DAEE8h case   39:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821DAEE8h case   39:*/		return 0x821DAEEC;
		  /* 821DAEECh */ case   40:  		/* li R6, 117 */
		/* 821DAEECh case   40:*/		cpu::op::li<0>(regs,&regs.R6,0x75);
		/* 821DAEECh case   40:*/		return 0x821DAEF0;
		  /* 821DAEF0h */ case   41:  		/* stw R11, <#[R28 + 8]> */
		/* 821DAEF0h case   41:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821DAEF0h case   41:*/		return 0x821DAEF4;
		  /* 821DAEF4h */ case   42:  		/* mr R5, R29 */
		/* 821DAEF4h case   42:*/		regs.R5 = regs.R29;
		/* 821DAEF4h case   42:*/		return 0x821DAEF8;
		  /* 821DAEF8h */ case   43:  		/* mr R4, R30 */
		/* 821DAEF8h case   43:*/		regs.R4 = regs.R30;
		/* 821DAEF8h case   43:*/		return 0x821DAEFC;
		  /* 821DAEFCh */ case   44:  		/* mr R3, R25 */
		/* 821DAEFCh case   44:*/		regs.R3 = regs.R25;
		/* 821DAEFCh case   44:*/		return 0x821DAF00;
		  /* 821DAF00h */ case   45:  		/* bl 301720 */
		/* 821DAF00h case   45:*/		regs.LR = 0x821DAF04; return 0x82224998;
		/* 821DAF00h case   45:*/		return 0x821DAF04;
		  /* 821DAF04h */ case   46:  		/* lwz R11, <#[R3 + 8]> */
		/* 821DAF04h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821DAF04h case   46:*/		return 0x821DAF08;
		  /* 821DAF08h */ case   47:  		/* mr R5, R25 */
		/* 821DAF08h case   47:*/		regs.R5 = regs.R25;
		/* 821DAF08h case   47:*/		return 0x821DAF0C;
		  /* 821DAF0Ch */ case   48:  		/* oris R11, R11, 512 */
		/* 821DAF0Ch case   48:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821DAF0Ch case   48:*/		return 0x821DAF10;
		  /* 821DAF10h */ case   49:  		/* mr R4, R28 */
		/* 821DAF10h case   49:*/		regs.R4 = regs.R28;
		/* 821DAF10h case   49:*/		return 0x821DAF14;
		  /* 821DAF14h */ case   50:  		/* stw R11, <#[R3 + 8]> */
		/* 821DAF14h case   50:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821DAF14h case   50:*/		return 0x821DAF18;
		  /* 821DAF18h */ case   51:  		/* bl -404616 */
		/* 821DAF18h case   51:*/		regs.LR = 0x821DAF1C; return 0x82178290;
		/* 821DAF18h case   51:*/		return 0x821DAF1C;
	}
	return 0x821DAF1C;
} // Block from 821DAE4Ch-821DAF1Ch (52 instructions)

//////////////////////////////////////////////////////
// Block at 821DAF1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAF1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAF1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAF1C);
		  /* 821DAF1Ch */ case    0:  		/* lwz R10, <#[R25 + 620]> */
		/* 821DAF1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x0000026C) );
		/* 821DAF1Ch case    0:*/		return 0x821DAF20;
		  /* 821DAF20h */ case    1:  		/* addi R31, R31, 68 */
		/* 821DAF20h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x44);
		/* 821DAF20h case    1:*/		return 0x821DAF24;
		  /* 821DAF24h */ case    2:  		/* lwz R11, <#[R25 + 616]> */
		/* 821DAF24h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000268) );
		/* 821DAF24h case    2:*/		return 0x821DAF28;
		  /* 821DAF28h */ case    3:  		/* mulli R10, R10, 68 */
		/* 821DAF28h case    3:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 821DAF28h case    3:*/		return 0x821DAF2C;
		  /* 821DAF2Ch */ case    4:  		/* add R11, R10, R11 */
		/* 821DAF2Ch case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821DAF2Ch case    4:*/		return 0x821DAF30;
		  /* 821DAF30h */ case    5:  		/* addi R10, R31, -4 */
		/* 821DAF30h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0xFFFFFFFC);
		/* 821DAF30h case    5:*/		return 0x821DAF34;
		  /* 821DAF34h */ case    6:  		/* cmplw CR6, R10, R11 */
		/* 821DAF34h case    6:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821DAF34h case    6:*/		return 0x821DAF38;
		  /* 821DAF38h */ case    7:  		/* bc 12, CR6_LT, -416 */
		/* 821DAF38h case    7:*/		if ( regs.CR[6].lt ) { return 0x821DAD98;  }
		/* 821DAF38h case    7:*/		return 0x821DAF3C;
	}
	return 0x821DAF3C;
} // Block from 821DAF1Ch-821DAF3Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821DAF3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DAF3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DAF3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DAF3C);
		  /* 821DAF3Ch */ case    0:  		/* li R5, 6 */
		/* 821DAF3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 821DAF3Ch case    0:*/		return 0x821DAF40;
		  /* 821DAF40h */ case    1:  		/* li R4, 8 */
		/* 821DAF40h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821DAF40h case    1:*/		return 0x821DAF44;
		  /* 821DAF44h */ case    2:  		/* mr R3, R25 */
		/* 821DAF44h case    2:*/		regs.R3 = regs.R25;
		/* 821DAF44h case    2:*/		return 0x821DAF48;
		  /* 821DAF48h */ case    3:  		/* bl -484952 */
		/* 821DAF48h case    3:*/		regs.LR = 0x821DAF4C; return 0x821648F0;
		/* 821DAF48h case    3:*/		return 0x821DAF4C;
		  /* 821DAF4Ch */ case    4:  		/* addi R20, R3, 4 */
		/* 821DAF4Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R3,0x4);
		/* 821DAF4Ch case    4:*/		return 0x821DAF50;
		  /* 821DAF50h */ case    5:  		/* ori R11, R3, 1 */
		/* 821DAF50h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821DAF50h case    5:*/		return 0x821DAF54;
		  /* 821DAF54h */ case    6:  		/* ori R10, R20, 1 */
		/* 821DAF54h case    6:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R20,0x1);
		/* 821DAF54h case    6:*/		return 0x821DAF58;
		  /* 821DAF58h */ case    7:  		/* stw R11, <#[R3 + 4]> */
		/* 821DAF58h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821DAF58h case    7:*/		return 0x821DAF5C;
		  /* 821DAF5Ch */ case    8:  		/* mr R24, R3 */
		/* 821DAF5Ch case    8:*/		regs.R24 = regs.R3;
		/* 821DAF5Ch case    8:*/		return 0x821DAF60;
		  /* 821DAF60h */ case    9:  		/* stw R10, <#[R3]> */
		/* 821DAF60h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821DAF60h case    9:*/		return 0x821DAF64;
		  /* 821DAF64h */ case   10:  		/* li R5, 6 */
		/* 821DAF64h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 821DAF64h case   10:*/		return 0x821DAF68;
		  /* 821DAF68h */ case   11:  		/* li R4, 8 */
		/* 821DAF68h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821DAF68h case   11:*/		return 0x821DAF6C;
		  /* 821DAF6Ch */ case   12:  		/* mr R3, R25 */
		/* 821DAF6Ch case   12:*/		regs.R3 = regs.R25;
		/* 821DAF6Ch case   12:*/		return 0x821DAF70;
		  /* 821DAF70h */ case   13:  		/* bl -484992 */
		/* 821DAF70h case   13:*/		regs.LR = 0x821DAF74; return 0x821648F0;
		/* 821DAF70h case   13:*/		return 0x821DAF74;
		  /* 821DAF74h */ case   14:  		/* addi R18, R3, 4 */
		/* 821DAF74h case   14:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R3,0x4);
		/* 821DAF74h case   14:*/		return 0x821DAF78;
		  /* 821DAF78h */ case   15:  		/* ori R11, R3, 1 */
		/* 821DAF78h case   15:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821DAF78h case   15:*/		return 0x821DAF7C;
		  /* 821DAF7Ch */ case   16:  		/* ori R10, R18, 1 */
		/* 821DAF7Ch case   16:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R18,0x1);
		/* 821DAF7Ch case   16:*/		return 0x821DAF80;
		  /* 821DAF80h */ case   17:  		/* stw R11, <#[R3 + 4]> */
		/* 821DAF80h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821DAF80h case   17:*/		return 0x821DAF84;
		  /* 821DAF84h */ case   18:  		/* addi R21, R25, 4 */
		/* 821DAF84h case   18:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R25,0x4);
		/* 821DAF84h case   18:*/		return 0x821DAF88;
		  /* 821DAF88h */ case   19:  		/* stw R10, <#[R3]> */
		/* 821DAF88h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821DAF88h case   19:*/		return 0x821DAF8C;
		  /* 821DAF8Ch */ case   20:  		/* ori R19, R25, 1 */
		/* 821DAF8Ch case   20:*/		cpu::op::ori<0>(regs,&regs.R19,regs.R25,0x1);
		/* 821DAF8Ch case   20:*/		return 0x821DAF90;
		  /* 821DAF90h */ case   21:  		/* lwz R11, <#[R25 + 108]> */
		/* 821DAF90h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000006C) );
		/* 821DAF90h case   21:*/		return 0x821DAF94;
		  /* 821DAF94h */ case   22:  		/* ori R10, R21, 1 */
		/* 821DAF94h case   22:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R21,0x1);
		/* 821DAF94h case   22:*/		return 0x821DAF98;
		  /* 821DAF98h */ case   23:  		/* lwz R9, <#[R25 + 4]> */
		/* 821DAF98h case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000004) );
		/* 821DAF98h case   23:*/		return 0x821DAF9C;
		  /* 821DAF9Ch */ case   24:  		/* rlwinm R8, R9, 0, 31, 31 */
		/* 821DAF9Ch case   24:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R8,regs.R9);
		/* 821DAF9Ch case   24:*/		return 0x821DAFA0;
		  /* 821DAFA0h */ case   25:  		/* addic R8, R8, -1 */
		/* 821DAFA0h case   25:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 821DAFA0h case   25:*/		return 0x821DAFA4;
		  /* 821DAFA4h */ case   26:  		/* stw R19, <#[R25 + 4]> */
		/* 821DAFA4h case   26:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R25 + 0x00000004) );
		/* 821DAFA4h case   26:*/		return 0x821DAFA8;
		  /* 821DAFA8h */ case   27:  		/* addi R22, R11, 1 */
		/* 821DAFA8h case   27:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R11,0x1);
		/* 821DAFA8h case   27:*/		return 0x821DAFAC;
		  /* 821DAFACh */ case   28:  		/* stw R10, <#[R25]> */
		/* 821DAFACh case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R25 + 0x00000000) );
		/* 821DAFACh case   28:*/		return 0x821DAFB0;
		  /* 821DAFB0h */ case   29:  		/* subfe R11, R8, R8 */
		/* 821DAFB0h case   29:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R8,regs.R8);
		/* 821DAFB0h case   29:*/		return 0x821DAFB4;
		  /* 821DAFB4h */ case   30:  		/* mr R23, R3 */
		/* 821DAFB4h case   30:*/		regs.R23 = regs.R3;
		/* 821DAFB4h case   30:*/		return 0x821DAFB8;
		  /* 821DAFB8h */ case   31:  		/* stw R22, <#[R25 + 108]> */
		/* 821DAFB8h case   31:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R25 + 0x0000006C) );
		/* 821DAFB8h case   31:*/		return 0x821DAFBC;
		  /* 821DAFBCh */ case   32:  		/* and R28, R11, R9 */
		/* 821DAFBCh case   32:*/		cpu::op::and<0>(regs,&regs.R28,regs.R11,regs.R9);
		/* 821DAFBCh case   32:*/		return 0x821DAFC0;
		  /* 821DAFC0h */ case   33:  		/* lwz R9, <#[R25]> */
		/* 821DAFC0h case   33:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000000) );
		/* 821DAFC0h case   33:*/		return 0x821DAFC4;
		  /* 821DAFC4h */ case   34:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 821DAFC4h case   34:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 821DAFC4h case   34:*/		return 0x821DAFC8;
		  /* 821DAFC8h */ case   35:  		/* li R26, 0 */
		/* 821DAFC8h case   35:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821DAFC8h case   35:*/		return 0x821DAFCC;
		  /* 821DAFCCh */ case   36:  		/* addi R10, R11, 4 */
		/* 821DAFCCh case   36:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821DAFCCh case   36:*/		return 0x821DAFD0;
		  /* 821DAFD0h */ case   37:  		/* stw R9, <#[R11]> */
		/* 821DAFD0h case   37:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821DAFD0h case   37:*/		return 0x821DAFD4;
		  /* 821DAFD4h */ case   38:  		/* lwz R9, <#[R25]> */
		/* 821DAFD4h case   38:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000000) );
		/* 821DAFD4h case   38:*/		return 0x821DAFD8;
		  /* 821DAFD8h */ case   39:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 821DAFD8h case   39:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 821DAFD8h case   39:*/		return 0x821DAFDC;
		  /* 821DAFDCh */ case   40:  		/* stw R11, <#[R9]> */
		/* 821DAFDCh case   40:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 821DAFDCh case   40:*/		return 0x821DAFE0;
		  /* 821DAFE0h */ case   41:  		/* stw R19, <#[R11 + 4]> */
		/* 821DAFE0h case   41:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + 0x00000004) );
		/* 821DAFE0h case   41:*/		return 0x821DAFE4;
		  /* 821DAFE4h */ case   42:  		/* stw R10, <#[R25]> */
		/* 821DAFE4h case   42:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R25 + 0x00000000) );
		/* 821DAFE4h case   42:*/		return 0x821DAFE8;
		  /* 821DAFE8h */ case   43:  		/* stw R22, <#[R28 + 44]> */
		/* 821DAFE8h case   43:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R28 + 0x0000002C) );
		/* 821DAFE8h case   43:*/		return 0x821DAFEC;
		  /* 821DAFECh */ case   44:  		/* lwz R30, <#[R25 + 40]> */
		/* 821DAFECh case   44:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R25 + 0x00000028) );
		/* 821DAFECh case   44:*/		return 0x821DAFF0;
		  /* 821DAFF0h */ case   45:  		/* rlwinm. R11, R30, 0, 29, 29 */
		/* 821DAFF0h case   45:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R30);
		/* 821DAFF0h case   45:*/		return 0x821DAFF4;
		  /* 821DAFF4h */ case   46:  		/* bc 12, CR0_EQ, 260 */
		/* 821DAFF4h case   46:*/		if ( regs.CR[0].eq ) { return 0x821DB0F8;  }
		/* 821DAFF4h case   46:*/		return 0x821DAFF8;
		  /* 821DAFF8h */ case   47:  		/* lwz R11, <#[R28 + 36]> */
		/* 821DAFF8h case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000024) );
		/* 821DAFF8h case   47:*/		return 0x821DAFFC;
		  /* 821DAFFCh */ case   48:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DAFFCh case   48:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DAFFCh case   48:*/		return 0x821DB000;
		  /* 821DB000h */ case   49:  		/* bc 4, CR0_EQ, 248 */
		/* 821DB000h case   49:*/		if ( !regs.CR[0].eq ) { return 0x821DB0F8;  }
		/* 821DB000h case   49:*/		return 0x821DB004;
		  /* 821DB004h */ case   50:  		/* lwz R11, <#[R28 + 32]> */
		/* 821DB004h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000020) );
		/* 821DB004h case   50:*/		return 0x821DB008;
		  /* 821DB008h */ case   51:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DB008h case   51:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DB008h case   51:*/		return 0x821DB00C;
		  /* 821DB00Ch */ case   52:  		/* addic. R31, R11, -40 */
		/* 821DB00Ch case   52:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821DB00Ch case   52:*/		return 0x821DB010;
		  /* 821DB010h */ case   53:  		/* bc 12, CR0_EQ, 232 */
		/* 821DB010h case   53:*/		if ( regs.CR[0].eq ) { return 0x821DB0F8;  }
		/* 821DB010h case   53:*/		return 0x821DB014;
		  /* 821DB014h */ case   54:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DB014h case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DB014h case   54:*/		return 0x821DB018;
		  /* 821DB018h */ case   55:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821DB018h case   55:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821DB018h case   55:*/		return 0x821DB01C;
		  /* 821DB01Ch */ case   56:  		/* cmplwi CR6, R11, 86 */
		/* 821DB01Ch case   56:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 821DB01Ch case   56:*/		return 0x821DB020;
		  /* 821DB020h */ case   57:  		/* bc 12, CR6_EQ, 48 */
		/* 821DB020h case   57:*/		if ( regs.CR[6].eq ) { return 0x821DB050;  }
		/* 821DB020h case   57:*/		return 0x821DB024;
		  /* 821DB024h */ case   58:  		/* cmplwi CR6, R11, 87 */
		/* 821DB024h case   58:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 821DB024h case   58:*/		return 0x821DB028;
		  /* 821DB028h */ case   59:  		/* bc 12, CR6_EQ, 40 */
		/* 821DB028h case   59:*/		if ( regs.CR[6].eq ) { return 0x821DB050;  }
		/* 821DB028h case   59:*/		return 0x821DB02C;
		  /* 821DB02Ch */ case   60:  		/* cmplwi CR6, R11, 89 */
		/* 821DB02Ch case   60:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 821DB02Ch case   60:*/		return 0x821DB030;
		  /* 821DB030h */ case   61:  		/* bc 12, CR6_EQ, 32 */
		/* 821DB030h case   61:*/		if ( regs.CR[6].eq ) { return 0x821DB050;  }
		/* 821DB030h case   61:*/		return 0x821DB034;
		  /* 821DB034h */ case   62:  		/* cmplwi CR6, R11, 90 */
		/* 821DB034h case   62:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 821DB034h case   62:*/		return 0x821DB038;
		  /* 821DB038h */ case   63:  		/* bc 12, CR6_EQ, 24 */
		/* 821DB038h case   63:*/		if ( regs.CR[6].eq ) { return 0x821DB050;  }
		/* 821DB038h case   63:*/		return 0x821DB03C;
		  /* 821DB03Ch */ case   64:  		/* cmplwi CR6, R11, 84 */
		/* 821DB03Ch case   64:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 821DB03Ch case   64:*/		return 0x821DB040;
		  /* 821DB040h */ case   65:  		/* bc 12, CR6_EQ, 16 */
		/* 821DB040h case   65:*/		if ( regs.CR[6].eq ) { return 0x821DB050;  }
		/* 821DB040h case   65:*/		return 0x821DB044;
		  /* 821DB044h */ case   66:  		/* cmplwi CR6, R11, 85 */
		/* 821DB044h case   66:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 821DB044h case   66:*/		return 0x821DB048;
		  /* 821DB048h */ case   67:  		/* li R11, 0 */
		/* 821DB048h case   67:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DB048h case   67:*/		return 0x821DB04C;
		  /* 821DB04Ch */ case   68:  		/* bc 4, CR6_EQ, 8 */
		/* 821DB04Ch case   68:*/		if ( !regs.CR[6].eq ) { return 0x821DB054;  }
		/* 821DB04Ch case   68:*/		return 0x821DB050;
	}
	return 0x821DB050;
} // Block from 821DAF3Ch-821DB050h (69 instructions)

//////////////////////////////////////////////////////
// Block at 821DB050h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB050);
		  /* 821DB050h */ case    0:  		/* mr R11, R17 */
		/* 821DB050h case    0:*/		regs.R11 = regs.R17;
		/* 821DB050h case    0:*/		return 0x821DB054;
	}
	return 0x821DB054;
} // Block from 821DB050h-821DB054h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DB054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB054);
		  /* 821DB054h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DB054h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DB054h case    0:*/		return 0x821DB058;
		  /* 821DB058h */ case    1:  		/* bc 12, CR0_EQ, 160 */
		/* 821DB058h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DB0F8;  }
		/* 821DB058h case    1:*/		return 0x821DB05C;
		  /* 821DB05Ch */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DB05Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DB05Ch case    2:*/		return 0x821DB060;
		  /* 821DB060h */ case    3:  		/* mr R3, R25 */
		/* 821DB060h case    3:*/		regs.R3 = regs.R25;
		/* 821DB060h case    3:*/		return 0x821DB064;
		  /* 821DB064h */ case    4:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821DB064h case    4:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821DB064h case    4:*/		return 0x821DB068;
		  /* 821DB068h */ case    5:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821DB068h case    5:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821DB068h case    5:*/		return 0x821DB06C;
		  /* 821DB06Ch */ case    6:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821DB06Ch case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821DB06Ch case    6:*/		return 0x821DB070;
		  /* 821DB070h */ case    7:  		/* bl -486464 */
		/* 821DB070h case    7:*/		regs.LR = 0x821DB074; return 0x82164430;
		/* 821DB070h case    7:*/		return 0x821DB074;
		  /* 821DB074h */ case    8:  		/* addi R11, R31, -16 */
		/* 821DB074h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF0);
		/* 821DB074h case    8:*/		return 0x821DB078;
		  /* 821DB078h */ case    9:  		/* add R9, R3, R11 */
		/* 821DB078h case    9:*/		cpu::op::add<0>(regs,&regs.R9,regs.R3,regs.R11);
		/* 821DB078h case    9:*/		return 0x821DB07C;
		  /* 821DB07Ch */ case   10:  		/* lwz R11, <#[R9 + 8]> */
		/* 821DB07Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000008) );
		/* 821DB07Ch case   10:*/		return 0x821DB080;
		  /* 821DB080h */ case   11:  		/* rlwinm. R10, R11, 0, 30, 31 */
		/* 821DB080h case   11:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R10,regs.R11);
		/* 821DB080h case   11:*/		return 0x821DB084;
		  /* 821DB084h */ case   12:  		/* bc 4, CR0_EQ, 116 */
		/* 821DB084h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821DB0F8;  }
		/* 821DB084h case   12:*/		return 0x821DB088;
		  /* 821DB088h */ case   13:  		/* rlwinm R8, R11, 30, 28, 31 */
		/* 821DB088h case   13:*/		cpu::op::rlwinm<0,30,28,31>(regs,&regs.R8,regs.R11);
		/* 821DB088h case   13:*/		return 0x821DB08C;
		  /* 821DB08Ch */ case   14:  		/* cmpwi CR6, R8, 9 */
		/* 821DB08Ch case   14:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000009);
		/* 821DB08Ch case   14:*/		return 0x821DB090;
		  /* 821DB090h */ case   15:  		/* bc 12, CR6_EQ, 12 */
		/* 821DB090h case   15:*/		if ( regs.CR[6].eq ) { return 0x821DB09C;  }
		/* 821DB090h case   15:*/		return 0x821DB094;
		  /* 821DB094h */ case   16:  		/* cmpwi CR6, R8, 8 */
		/* 821DB094h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R8,0x00000008);
		/* 821DB094h case   16:*/		return 0x821DB098;
		  /* 821DB098h */ case   17:  		/* bc 4, CR6_EQ, 96 */
		/* 821DB098h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821DB0F8;  }
		/* 821DB098h case   17:*/		return 0x821DB09C;
	}
	return 0x821DB09C;
} // Block from 821DB054h-821DB09Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 821DB09Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB09C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB09C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB09C);
		  /* 821DB09Ch */ case    0:  		/* lwz R10, <#[R28 + 12]> */
		/* 821DB09Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x0000000C) );
		/* 821DB09Ch case    0:*/		return 0x821DB0A0;
		  /* 821DB0A0h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 821DB0A0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DB0A0h case    1:*/		return 0x821DB0A4;
		  /* 821DB0A4h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 821DB0A4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DB0C0;  }
		/* 821DB0A4h case    2:*/		return 0x821DB0A8;
		  /* 821DB0A8h */ case    3:  		/* lwz R11, <#[R10]> */
		/* 821DB0A8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821DB0A8h case    3:*/		return 0x821DB0AC;
		  /* 821DB0ACh */ case    4:  		/* lwz R7, <#[R9]> */
		/* 821DB0ACh case    4:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 821DB0ACh case    4:*/		return 0x821DB0B0;
		  /* 821DB0B0h */ case    5:  		/* cmplw CR6, R11, R7 */
		/* 821DB0B0h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 821DB0B0h case    5:*/		return 0x821DB0B4;
		  /* 821DB0B4h */ case    6:  		/* bc 4, CR6_EQ, 16 */
		/* 821DB0B4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DB0C4;  }
		/* 821DB0B4h case    6:*/		return 0x821DB0B8;
		  /* 821DB0B8h */ case    7:  		/* lwz R10, <#[R10 + 8]> */
		/* 821DB0B8h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821DB0B8h case    7:*/		return 0x821DB0BC;
		  /* 821DB0BCh */ case    8:  		/* b -28 */
		/* 821DB0BCh case    8:*/		return 0x821DB0A0;
		/* 821DB0BCh case    8:*/		return 0x821DB0C0;
	}
	return 0x821DB0C0;
} // Block from 821DB09Ch-821DB0C0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821DB0C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB0C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB0C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB0C0);
		  /* 821DB0C0h */ case    0:  		/* li R11, 0 */
		/* 821DB0C0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DB0C0h case    0:*/		return 0x821DB0C4;
	}
	return 0x821DB0C4;
} // Block from 821DB0C0h-821DB0C4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DB0C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB0C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB0C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB0C4);
		  /* 821DB0C4h */ case    0:  		/* addi R10, R8, -8 */
		/* 821DB0C4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0xFFFFFFF8);
		/* 821DB0C4h case    0:*/		return 0x821DB0C8;
		  /* 821DB0C8h */ case    1:  		/* lwz R8, <#[R9 + 12]> */
		/* 821DB0C8h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x0000000C) );
		/* 821DB0C8h case    1:*/		return 0x821DB0CC;
		  /* 821DB0CCh */ case    2:  		/* cntlzw R10, R10 */
		/* 821DB0CCh case    2:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 821DB0CCh case    2:*/		return 0x821DB0D0;
		  /* 821DB0D0h */ case    3:  		/* rlwinm R8, R8, 31, 31, 31 */
		/* 821DB0D0h case    3:*/		cpu::op::rlwinm<0,31,31,31>(regs,&regs.R8,regs.R8);
		/* 821DB0D0h case    3:*/		return 0x821DB0D4;
		  /* 821DB0D4h */ case    4:  		/* rlwinm R10, R10, 27, 31, 31 */
		/* 821DB0D4h case    4:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R10,regs.R10);
		/* 821DB0D4h case    4:*/		return 0x821DB0D8;
		  /* 821DB0D8h */ case    5:  		/* cmpw CR6, R8, R10 */
		/* 821DB0D8h case    5:*/		cpu::op::cmpw<6>(regs,regs.R8,regs.R10);
		/* 821DB0D8h case    5:*/		return 0x821DB0DC;
		  /* 821DB0DCh */ case    6:  		/* bc 4, CR6_EQ, 1832 */
		/* 821DB0DCh case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DB804;  }
		/* 821DB0DCh case    6:*/		return 0x821DB0E0;
		  /* 821DB0E0h */ case    7:  		/* lwz R10, <#[R9]> */
		/* 821DB0E0h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 821DB0E0h case    7:*/		return 0x821DB0E4;
		  /* 821DB0E4h */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 821DB0E4h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821DB0E4h case    8:*/		return 0x821DB0E8;
		  /* 821DB0E8h */ case    9:  		/* bc 12, CR6_EQ, 1820 */
		/* 821DB0E8h case    9:*/		if ( regs.CR[6].eq ) { return 0x821DB804;  }
		/* 821DB0E8h case    9:*/		return 0x821DB0EC;
		  /* 821DB0ECh */ case   10:  		/* mr R26, R11 */
		/* 821DB0ECh case   10:*/		regs.R26 = regs.R11;
		/* 821DB0ECh case   10:*/		return 0x821DB0F0;
		  /* 821DB0F0h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821DB0F0h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DB0F0h case   11:*/		return 0x821DB0F4;
		  /* 821DB0F4h */ case   12:  		/* bc 4, CR6_EQ, 520 */
		/* 821DB0F4h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821DB2FC;  }
		/* 821DB0F4h case   12:*/		return 0x821DB0F8;
	}
	return 0x821DB0F8;
} // Block from 821DB0C4h-821DB0F8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821DB0F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB0F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB0F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB0F8);
		  /* 821DB0F8h */ case    0:  		/* rlwinm. R11, R30, 0, 22, 22 */
		/* 821DB0F8h case    0:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R30);
		/* 821DB0F8h case    0:*/		return 0x821DB0FC;
		  /* 821DB0FCh */ case    1:  		/* bc 12, CR0_EQ, 512 */
		/* 821DB0FCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821DB2FC;  }
		/* 821DB0FCh case    1:*/		return 0x821DB100;
		  /* 821DB100h */ case    2:  		/* lwz R11, <#[R28 + 36]> */
		/* 821DB100h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000024) );
		/* 821DB100h case    2:*/		return 0x821DB104;
		  /* 821DB104h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DB104h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DB104h case    3:*/		return 0x821DB108;
		  /* 821DB108h */ case    4:  		/* bc 4, CR0_EQ, 108 */
		/* 821DB108h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821DB174;  }
		/* 821DB108h case    4:*/		return 0x821DB10C;
		  /* 821DB10Ch */ case    5:  		/* lwz R11, <#[R28 + 32]> */
		/* 821DB10Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000020) );
		/* 821DB10Ch case    5:*/		return 0x821DB110;
		  /* 821DB110h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DB110h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DB110h case    6:*/		return 0x821DB114;
		  /* 821DB114h */ case    7:  		/* addic. R31, R11, -40 */
		/* 821DB114h case    7:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821DB114h case    7:*/		return 0x821DB118;
		  /* 821DB118h */ case    8:  		/* bc 12, CR0_EQ, 92 */
		/* 821DB118h case    8:*/		if ( regs.CR[0].eq ) { return 0x821DB174;  }
		/* 821DB118h case    8:*/		return 0x821DB11C;
		  /* 821DB11Ch */ case    9:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DB11Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DB11Ch case    9:*/		return 0x821DB120;
		  /* 821DB120h */ case   10:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DB120h case   10:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DB120h case   10:*/		return 0x821DB124;
		  /* 821DB124h */ case   11:  		/* cmplwi CR6, R11, 10752 */
		/* 821DB124h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002A00);
		/* 821DB124h case   11:*/		return 0x821DB128;
		  /* 821DB128h */ case   12:  		/* bc 4, CR6_EQ, 76 */
		/* 821DB128h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821DB174;  }
		/* 821DB128h case   12:*/		return 0x821DB12C;
		  /* 821DB12Ch */ case   13:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DB12Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DB12Ch case   13:*/		return 0x821DB130;
		  /* 821DB130h */ case   14:  		/* mr R3, R25 */
		/* 821DB130h case   14:*/		regs.R3 = regs.R25;
		/* 821DB130h case   14:*/		return 0x821DB134;
		  /* 821DB134h */ case   15:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821DB134h case   15:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821DB134h case   15:*/		return 0x821DB138;
		  /* 821DB138h */ case   16:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821DB138h case   16:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821DB138h case   16:*/		return 0x821DB13C;
		  /* 821DB13Ch */ case   17:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821DB13Ch case   17:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821DB13Ch case   17:*/		return 0x821DB140;
		  /* 821DB140h */ case   18:  		/* bl -486672 */
		/* 821DB140h case   18:*/		regs.LR = 0x821DB144; return 0x82164430;
		/* 821DB140h case   18:*/		return 0x821DB144;
		  /* 821DB144h */ case   19:  		/* addi R10, R31, -16 */
		/* 821DB144h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0xFFFFFFF0);
		/* 821DB144h case   19:*/		return 0x821DB148;
		  /* 821DB148h */ case   20:  		/* lwz R11, <#[R28 + 12]> */
		/* 821DB148h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821DB148h case   20:*/		return 0x821DB14C;
		  /* 821DB14Ch */ case   21:  		/* lwzx R10, <#[R3 + R10]> */
		/* 821DB14Ch case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + regs.R10 + 0x00000000) );
		/* 821DB14Ch case   21:*/		return 0x821DB150;
		  /* 821DB150h */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 821DB150h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DB150h case   22:*/		return 0x821DB154;
		  /* 821DB154h */ case   23:  		/* bc 12, CR6_EQ, 24 */
		/* 821DB154h case   23:*/		if ( regs.CR[6].eq ) { return 0x821DB16C;  }
		/* 821DB154h case   23:*/		return 0x821DB158;
		  /* 821DB158h */ case   24:  		/* lwz R26, <#[R11]> */
		/* 821DB158h case   24:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + 0x00000000) );
		/* 821DB158h case   24:*/		return 0x821DB15C;
		  /* 821DB15Ch */ case   25:  		/* cmplw CR6, R26, R10 */
		/* 821DB15Ch case   25:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R10);
		/* 821DB15Ch case   25:*/		return 0x821DB160;
		  /* 821DB160h */ case   26:  		/* bc 4, CR6_EQ, 412 */
		/* 821DB160h case   26:*/		if ( !regs.CR[6].eq ) { return 0x821DB2FC;  }
		/* 821DB160h case   26:*/		return 0x821DB164;
		  /* 821DB164h */ case   27:  		/* lwz R11, <#[R11 + 8]> */
		/* 821DB164h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821DB164h case   27:*/		return 0x821DB168;
		  /* 821DB168h */ case   28:  		/* b -24 */
		/* 821DB168h case   28:*/		return 0x821DB150;
		/* 821DB168h case   28:*/		return 0x821DB16C;
	}
	return 0x821DB16C;
} // Block from 821DB0F8h-821DB16Ch (29 instructions)

//////////////////////////////////////////////////////
// Block at 821DB16Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB16C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB16C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB16C);
		  /* 821DB16Ch */ case    0:  		/* li R26, 0 */
		/* 821DB16Ch case    0:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821DB16Ch case    0:*/		return 0x821DB170;
		  /* 821DB170h */ case    1:  		/* b 396 */
		/* 821DB170h case    1:*/		return 0x821DB2FC;
		/* 821DB170h case    1:*/		return 0x821DB174;
	}
	return 0x821DB174;
} // Block from 821DB16Ch-821DB174h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DB174h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB174( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB174) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB174);
		  /* 821DB174h */ case    0:  		/* addi R3, R28, 84 */
		/* 821DB174h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R28,0x54);
		/* 821DB174h case    0:*/		return 0x821DB178;
		  /* 821DB178h */ case    1:  		/* li R11, 0 */
		/* 821DB178h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DB178h case    1:*/		return 0x821DB17C;
		  /* 821DB17Ch */ case    2:  		/* mr R10, R3 */
		/* 821DB17Ch case    2:*/		regs.R10 = regs.R3;
		/* 821DB17Ch case    2:*/		return 0x821DB180;
		  /* 821DB180h */ case    3:  		/* lwz R9, <#[R10]> */
		/* 821DB180h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DB180h case    3:*/		return 0x821DB184;
		  /* 821DB184h */ case    4:  		/* cmplwi CR6, R9, 0 */
		/* 821DB184h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821DB184h case    4:*/		return 0x821DB188;
		  /* 821DB188h */ case    5:  		/* bc 4, CR6_EQ, 268 */
		/* 821DB188h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821DB294;  }
		/* 821DB188h case    5:*/		return 0x821DB18C;
		  /* 821DB18Ch */ case    6:  		/* addi R11, R11, 1 */
		/* 821DB18Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821DB18Ch case    6:*/		return 0x821DB190;
		  /* 821DB190h */ case    7:  		/* addi R10, R10, 4 */
		/* 821DB190h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821DB190h case    7:*/		return 0x821DB194;
		  /* 821DB194h */ case    8:  		/* cmplwi CR6, R11, 1 */
		/* 821DB194h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821DB194h case    8:*/		return 0x821DB198;
		  /* 821DB198h */ case    9:  		/* bc 12, CR6_LT, -24 */
		/* 821DB198h case    9:*/		if ( regs.CR[6].lt ) { return 0x821DB180;  }
		/* 821DB198h case    9:*/		return 0x821DB19C;
		  /* 821DB19Ch */ case   10:  		/* li R11, 0 */
		/* 821DB19Ch case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DB19Ch case   10:*/		return 0x821DB1A0;
		  /* 821DB1A0h */ case   11:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DB1A0h case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DB1A0h case   11:*/		return 0x821DB1A4;
		  /* 821DB1A4h */ case   12:  		/* bc 12, CR0_EQ, 344 */
		/* 821DB1A4h case   12:*/		if ( regs.CR[0].eq ) { return 0x821DB2FC;  }
		/* 821DB1A4h case   12:*/		return 0x821DB1A8;
		  /* 821DB1A8h */ case   13:  		/* lwz R11, <#[R28 + 12]> */
		/* 821DB1A8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821DB1A8h case   13:*/		return 0x821DB1AC;
		  /* 821DB1ACh */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821DB1ACh case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DB1ACh case   14:*/		return 0x821DB1B0;
		  /* 821DB1B0h */ case   15:  		/* bc 12, CR6_EQ, 20 */
		/* 821DB1B0h case   15:*/		if ( regs.CR[6].eq ) { return 0x821DB1C4;  }
		/* 821DB1B0h case   15:*/		return 0x821DB1B4;
		  /* 821DB1B4h */ case   16:  		/* lwz R10, <#[R11 + 8]> */
		/* 821DB1B4h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821DB1B4h case   16:*/		return 0x821DB1B8;
		  /* 821DB1B8h */ case   17:  		/* cmplwi CR6, R10, 0 */
		/* 821DB1B8h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DB1B8h case   17:*/		return 0x821DB1BC;
		  /* 821DB1BCh */ case   18:  		/* mr R10, R17 */
		/* 821DB1BCh case   18:*/		regs.R10 = regs.R17;
		/* 821DB1BCh case   18:*/		return 0x821DB1C0;
		  /* 821DB1C0h */ case   19:  		/* bc 4, CR6_EQ, 8 */
		/* 821DB1C0h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821DB1C8;  }
		/* 821DB1C0h case   19:*/		return 0x821DB1C4;
	}
	return 0x821DB1C4;
} // Block from 821DB174h-821DB1C4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821DB1C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB1C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB1C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB1C4);
		  /* 821DB1C4h */ case    0:  		/* li R10, 0 */
		/* 821DB1C4h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821DB1C4h case    0:*/		return 0x821DB1C8;
	}
	return 0x821DB1C8;
} // Block from 821DB1C4h-821DB1C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DB1C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB1C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB1C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB1C8);
		  /* 821DB1C8h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821DB1C8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821DB1C8h case    0:*/		return 0x821DB1CC;
		  /* 821DB1CCh */ case    1:  		/* bc 12, CR0_EQ, 304 */
		/* 821DB1CCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821DB2FC;  }
		/* 821DB1CCh case    1:*/		return 0x821DB1D0;
		  /* 821DB1D0h */ case    2:  		/* li R4, 0 */
		/* 821DB1D0h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821DB1D0h case    2:*/		return 0x821DB1D4;
		  /* 821DB1D4h */ case    3:  		/* li R5, 0 */
		/* 821DB1D4h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DB1D4h case    3:*/		return 0x821DB1D8;
		  /* 821DB1D8h */ case    4:  		/* li R6, 0 */
		/* 821DB1D8h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821DB1D8h case    4:*/		return 0x821DB1DC;
		  /* 821DB1DCh */ case    5:  		/* mr R7, R11 */
		/* 821DB1DCh case    5:*/		regs.R7 = regs.R11;
		/* 821DB1DCh case    5:*/		return 0x821DB1E0;
		  /* 821DB1E0h */ case    6:  		/* cmplwi CR6, R7, 0 */
		/* 821DB1E0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 821DB1E0h case    6:*/		return 0x821DB1E4;
		  /* 821DB1E4h */ case    7:  		/* bc 12, CR6_EQ, 220 */
		/* 821DB1E4h case    7:*/		if ( regs.CR[6].eq ) { return 0x821DB2C0;  }
		/* 821DB1E4h case    7:*/		return 0x821DB1E8;
		  /* 821DB1E8h */ case    8:  		/* lwz R11, <#[R7]> */
		/* 821DB1E8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 821DB1E8h case    8:*/		return 0x821DB1EC;
		  /* 821DB1ECh */ case    9:  		/* li R9, 0 */
		/* 821DB1ECh case    9:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821DB1ECh case    9:*/		return 0x821DB1F0;
		  /* 821DB1F0h */ case   10:  		/* mr R10, R3 */
		/* 821DB1F0h case   10:*/		regs.R10 = regs.R3;
		/* 821DB1F0h case   10:*/		return 0x821DB1F4;
		  /* 821DB1F4h */ case   11:  		/* subf R8, R28, R11 */
		/* 821DB1F4h case   11:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R28,regs.R11);
		/* 821DB1F4h case   11:*/		return 0x821DB1F8;
		  /* 821DB1F8h */ case   12:  		/* lwzx R31, <#[R8 + R10]> */
		/* 821DB1F8h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R8 + regs.R10 + 0x00000000) );
		/* 821DB1F8h case   12:*/		return 0x821DB1FC;
		  /* 821DB1FCh */ case   13:  		/* lwz R30, <#[R10]> */
		/* 821DB1FCh case   13:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + 0x00000000) );
		/* 821DB1FCh case   13:*/		return 0x821DB200;
		  /* 821DB200h */ case   14:  		/* cmplw CR6, R31, R30 */
		/* 821DB200h case   14:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 821DB200h case   14:*/		return 0x821DB204;
		  /* 821DB204h */ case   15:  		/* bc 4, CR6_EQ, 152 */
		/* 821DB204h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821DB29C;  }
		/* 821DB204h case   15:*/		return 0x821DB208;
		  /* 821DB208h */ case   16:  		/* addi R9, R9, 1 */
		/* 821DB208h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821DB208h case   16:*/		return 0x821DB20C;
		  /* 821DB20Ch */ case   17:  		/* addi R10, R10, 4 */
		/* 821DB20Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821DB20Ch case   17:*/		return 0x821DB210;
		  /* 821DB210h */ case   18:  		/* cmpwi CR6, R9, 1 */
		/* 821DB210h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000001);
		/* 821DB210h case   18:*/		return 0x821DB214;
		  /* 821DB214h */ case   19:  		/* bc 12, CR6_LT, -28 */
		/* 821DB214h case   19:*/		if ( regs.CR[6].lt ) { return 0x821DB1F8;  }
		/* 821DB214h case   19:*/		return 0x821DB218;
		  /* 821DB218h */ case   20:  		/* mr R10, R17 */
		/* 821DB218h case   20:*/		regs.R10 = regs.R17;
		/* 821DB218h case   20:*/		return 0x821DB21C;
		  /* 821DB21Ch */ case   21:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821DB21Ch case   21:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821DB21Ch case   21:*/		return 0x821DB220;
		  /* 821DB220h */ case   22:  		/* bc 12, CR0_EQ, 148 */
		/* 821DB220h case   22:*/		if ( regs.CR[0].eq ) { return 0x821DB2B4;  }
		/* 821DB220h case   22:*/		return 0x821DB224;
		  /* 821DB224h */ case   23:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DB224h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DB224h case   23:*/		return 0x821DB228;
		  /* 821DB228h */ case   24:  		/* lwz R9, <#[R28 + 40]> */
		/* 821DB228h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000028) );
		/* 821DB228h case   24:*/		return 0x821DB22C;
		  /* 821DB22Ch */ case   25:  		/* rlwinm R8, R10, 0, 13, 31 */
		/* 821DB22Ch case   25:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R10);
		/* 821DB22Ch case   25:*/		return 0x821DB230;
		  /* 821DB230h */ case   26:  		/* rlwinm R10, R8, 27, 5, 31 */
		/* 821DB230h case   26:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R8);
		/* 821DB230h case   26:*/		return 0x821DB234;
		  /* 821DB234h */ case   27:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 821DB234h case   27:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 821DB234h case   27:*/		return 0x821DB238;
		  /* 821DB238h */ case   28:  		/* addi R10, R10, 1 */
		/* 821DB238h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821DB238h case   28:*/		return 0x821DB23C;
		  /* 821DB23Ch */ case   29:  		/* slw R8, R17, R8 */
		/* 821DB23Ch case   29:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R17,regs.R8);
		/* 821DB23Ch case   29:*/		return 0x821DB240;
		  /* 821DB240h */ case   30:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821DB240h case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821DB240h case   30:*/		return 0x821DB244;
		  /* 821DB244h */ case   31:  		/* lwzx R10, <#[R10 + R9]> */
		/* 821DB244h case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821DB244h case   31:*/		return 0x821DB248;
		  /* 821DB248h */ case   32:  		/* and. R10, R10, R8 */
		/* 821DB248h case   32:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821DB248h case   32:*/		return 0x821DB24C;
		  /* 821DB24Ch */ case   33:  		/* bc 4, CR0_EQ, 108 */
		/* 821DB24Ch case   33:*/		if ( !regs.CR[0].eq ) { return 0x821DB2B8;  }
		/* 821DB24Ch case   33:*/		return 0x821DB250;
		  /* 821DB250h */ case   34:  		/* lwz R10, <#[R11 + 12]> */
		/* 821DB250h case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DB250h case   34:*/		return 0x821DB254;
		  /* 821DB254h */ case   35:  		/* cmplwi CR6, R10, 0 */
		/* 821DB254h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DB254h case   35:*/		return 0x821DB258;
		  /* 821DB258h */ case   36:  		/* bc 12, CR6_EQ, 84 */
		/* 821DB258h case   36:*/		if ( regs.CR[6].eq ) { return 0x821DB2AC;  }
		/* 821DB258h case   36:*/		return 0x821DB25C;
		  /* 821DB25Ch */ case   37:  		/* lwz R9, <#[R10]> */
		/* 821DB25Ch case   37:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DB25Ch case   37:*/		return 0x821DB260;
		  /* 821DB260h */ case   38:  		/* lwz R8, <#[R11 + 40]> */
		/* 821DB260h case   38:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000028) );
		/* 821DB260h case   38:*/		return 0x821DB264;
		  /* 821DB264h */ case   39:  		/* lwz R9, <#[R9 + 48]> */
		/* 821DB264h case   39:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000030) );
		/* 821DB264h case   39:*/		return 0x821DB268;
		  /* 821DB268h */ case   40:  		/* rlwinm R31, R9, 0, 13, 31 */
		/* 821DB268h case   40:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R31,regs.R9);
		/* 821DB268h case   40:*/		return 0x821DB26C;
		  /* 821DB26Ch */ case   41:  		/* rlwinm R9, R31, 27, 5, 31 */
		/* 821DB26Ch case   41:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R9,regs.R31);
		/* 821DB26Ch case   41:*/		return 0x821DB270;
		  /* 821DB270h */ case   42:  		/* rlwinm R31, R31, 0, 27, 31 */
		/* 821DB270h case   42:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R31,regs.R31);
		/* 821DB270h case   42:*/		return 0x821DB274;
		  /* 821DB274h */ case   43:  		/* addi R9, R9, 1 */
		/* 821DB274h case   43:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821DB274h case   43:*/		return 0x821DB278;
		  /* 821DB278h */ case   44:  		/* slw R31, R17, R31 */
		/* 821DB278h case   44:*/		cpu::op::slw<0>(regs,&regs.R31,regs.R17,regs.R31);
		/* 821DB278h case   44:*/		return 0x821DB27C;
		  /* 821DB27Ch */ case   45:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821DB27Ch case   45:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821DB27Ch case   45:*/		return 0x821DB280;
		  /* 821DB280h */ case   46:  		/* lwzx R9, <#[R9 + R8]> */
		/* 821DB280h case   46:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 821DB280h case   46:*/		return 0x821DB284;
		  /* 821DB284h */ case   47:  		/* and. R9, R9, R31 */
		/* 821DB284h case   47:*/		cpu::op::and<1>(regs,&regs.R9,regs.R9,regs.R31);
		/* 821DB284h case   47:*/		return 0x821DB288;
		  /* 821DB288h */ case   48:  		/* bc 4, CR0_EQ, 28 */
		/* 821DB288h case   48:*/		if ( !regs.CR[0].eq ) { return 0x821DB2A4;  }
		/* 821DB288h case   48:*/		return 0x821DB28C;
		  /* 821DB28Ch */ case   49:  		/* lwz R10, <#[R10 + 8]> */
		/* 821DB28Ch case   49:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821DB28Ch case   49:*/		return 0x821DB290;
		  /* 821DB290h */ case   50:  		/* b -60 */
		/* 821DB290h case   50:*/		return 0x821DB254;
		/* 821DB290h case   50:*/		return 0x821DB294;
	}
	return 0x821DB294;
} // Block from 821DB1C8h-821DB294h (51 instructions)

//////////////////////////////////////////////////////
// Block at 821DB294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB294);
		  /* 821DB294h */ case    0:  		/* mr R11, R17 */
		/* 821DB294h case    0:*/		regs.R11 = regs.R17;
		/* 821DB294h case    0:*/		return 0x821DB298;
		  /* 821DB298h */ case    1:  		/* b -248 */
		/* 821DB298h case    1:*/		return 0x821DB1A0;
		/* 821DB298h case    1:*/		return 0x821DB29C;
	}
	return 0x821DB29C;
} // Block from 821DB294h-821DB29Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DB29Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB29C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB29C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB29C);
		  /* 821DB29Ch */ case    0:  		/* li R10, 0 */
		/* 821DB29Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821DB29Ch case    0:*/		return 0x821DB2A0;
		  /* 821DB2A0h */ case    1:  		/* b -132 */
		/* 821DB2A0h case    1:*/		return 0x821DB21C;
		/* 821DB2A0h case    1:*/		return 0x821DB2A4;
	}
	return 0x821DB2A4;
} // Block from 821DB29Ch-821DB2A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DB2A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB2A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB2A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB2A4);
		  /* 821DB2A4h */ case    0:  		/* mr R5, R11 */
		/* 821DB2A4h case    0:*/		regs.R5 = regs.R11;
		/* 821DB2A4h case    0:*/		return 0x821DB2A8;
		  /* 821DB2A8h */ case    1:  		/* b 16 */
		/* 821DB2A8h case    1:*/		return 0x821DB2B8;
		/* 821DB2A8h case    1:*/		return 0x821DB2AC;
	}
	return 0x821DB2AC;
} // Block from 821DB2A4h-821DB2ACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DB2ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB2AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB2AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB2AC);
		  /* 821DB2ACh */ case    0:  		/* mr R6, R11 */
		/* 821DB2ACh case    0:*/		regs.R6 = regs.R11;
		/* 821DB2ACh case    0:*/		return 0x821DB2B0;
		  /* 821DB2B0h */ case    1:  		/* b 8 */
		/* 821DB2B0h case    1:*/		return 0x821DB2B8;
		/* 821DB2B0h case    1:*/		return 0x821DB2B4;
	}
	return 0x821DB2B4;
} // Block from 821DB2ACh-821DB2B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DB2B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB2B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB2B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB2B4);
		  /* 821DB2B4h */ case    0:  		/* mr R4, R11 */
		/* 821DB2B4h case    0:*/		regs.R4 = regs.R11;
		/* 821DB2B4h case    0:*/		return 0x821DB2B8;
	}
	return 0x821DB2B8;
} // Block from 821DB2B4h-821DB2B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DB2B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB2B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB2B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB2B8);
		  /* 821DB2B8h */ case    0:  		/* lwz R7, <#[R7 + 8]> */
		/* 821DB2B8h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000008) );
		/* 821DB2B8h case    0:*/		return 0x821DB2BC;
		  /* 821DB2BCh */ case    1:  		/* b -220 */
		/* 821DB2BCh case    1:*/		return 0x821DB1E0;
		/* 821DB2BCh case    1:*/		return 0x821DB2C0;
	}
	return 0x821DB2C0;
} // Block from 821DB2B8h-821DB2C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DB2C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB2C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB2C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB2C0);
		  /* 821DB2C0h */ case    0:  		/* cmplwi CR6, R5, 0 */
		/* 821DB2C0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821DB2C0h case    0:*/		return 0x821DB2C4;
		  /* 821DB2C4h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 821DB2C4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DB2D0;  }
		/* 821DB2C4h case    1:*/		return 0x821DB2C8;
		  /* 821DB2C8h */ case    2:  		/* cmplwi CR6, R6, 0 */
		/* 821DB2C8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 821DB2C8h case    2:*/		return 0x821DB2CC;
		  /* 821DB2CCh */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 821DB2CCh case    3:*/		if ( regs.CR[6].eq ) { return 0x821DB2FC;  }
		/* 821DB2CCh case    3:*/		return 0x821DB2D0;
	}
	return 0x821DB2D0;
} // Block from 821DB2C0h-821DB2D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DB2D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB2D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB2D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB2D0);
		  /* 821DB2D0h */ case    0:  		/* cmplwi CR6, R6, 0 */
		/* 821DB2D0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 821DB2D0h case    0:*/		return 0x821DB2D4;
		  /* 821DB2D4h */ case    1:  		/* bc 12, CR6_EQ, 28 */
		/* 821DB2D4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821DB2F0;  }
		/* 821DB2D4h case    1:*/		return 0x821DB2D8;
		  /* 821DB2D8h */ case    2:  		/* cmplwi CR6, R5, 0 */
		/* 821DB2D8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821DB2D8h case    2:*/		return 0x821DB2DC;
		  /* 821DB2DCh */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 821DB2DCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x821DB2E8;  }
		/* 821DB2DCh case    3:*/		return 0x821DB2E0;
		  /* 821DB2E0h */ case    4:  		/* cmplwi CR6, R4, 0 */
		/* 821DB2E0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821DB2E0h case    4:*/		return 0x821DB2E4;
		  /* 821DB2E4h */ case    5:  		/* bc 12, CR6_EQ, 24 */
		/* 821DB2E4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821DB2FC;  }
		/* 821DB2E4h case    5:*/		return 0x821DB2E8;
	}
	return 0x821DB2E8;
} // Block from 821DB2D0h-821DB2E8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DB2E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB2E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB2E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB2E8);
		  /* 821DB2E8h */ case    0:  		/* mr R26, R6 */
		/* 821DB2E8h case    0:*/		regs.R26 = regs.R6;
		/* 821DB2E8h case    0:*/		return 0x821DB2EC;
		  /* 821DB2ECh */ case    1:  		/* b 16 */
		/* 821DB2ECh case    1:*/		return 0x821DB2FC;
		/* 821DB2ECh case    1:*/		return 0x821DB2F0;
	}
	return 0x821DB2F0;
} // Block from 821DB2E8h-821DB2F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DB2F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB2F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB2F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB2F0);
		  /* 821DB2F0h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 821DB2F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821DB2F0h case    0:*/		return 0x821DB2F4;
		  /* 821DB2F4h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 821DB2F4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821DB2FC;  }
		/* 821DB2F4h case    1:*/		return 0x821DB2F8;
		  /* 821DB2F8h */ case    2:  		/* mr R26, R5 */
		/* 821DB2F8h case    2:*/		regs.R26 = regs.R5;
		/* 821DB2F8h case    2:*/		return 0x821DB2FC;
	}
	return 0x821DB2FC;
} // Block from 821DB2F0h-821DB2FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DB2FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB2FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB2FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB2FC);
		  /* 821DB2FCh */ case    0:  		/* lwz R29, <#[R28 + 12]> */
		/* 821DB2FCh case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x0000000C) );
		/* 821DB2FCh case    0:*/		return 0x821DB300;
		  /* 821DB300h */ case    1:  		/* li R30, 0 */
		/* 821DB300h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821DB300h case    1:*/		return 0x821DB304;
		  /* 821DB304h */ case    2:  		/* li R27, 0 */
		/* 821DB304h case    2:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821DB304h case    2:*/		return 0x821DB308;
		  /* 821DB308h */ case    3:  		/* cmplwi CR6, R29, 0 */
		/* 821DB308h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821DB308h case    3:*/		return 0x821DB30C;
		  /* 821DB30Ch */ case    4:  		/* bc 12, CR6_EQ, 408 */
		/* 821DB30Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821DB4A4;  }
		/* 821DB30Ch case    4:*/		return 0x821DB310;
		  /* 821DB310h */ case    5:  		/* lwz R31, <#[R29]> */
		/* 821DB310h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 821DB310h case    5:*/		return 0x821DB314;
		  /* 821DB314h */ case    6:  		/* lwz R11, <#[R31 + 44]> */
		/* 821DB314h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821DB314h case    6:*/		return 0x821DB318;
		  /* 821DB318h */ case    7:  		/* cmplw CR6, R11, R22 */
		/* 821DB318h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 821DB318h case    7:*/		return 0x821DB31C;
		  /* 821DB31Ch */ case    8:  		/* bc 12, CR6_EQ, 320 */
		/* 821DB31Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x821DB45C;  }
		/* 821DB31Ch case    8:*/		return 0x821DB320;
		  /* 821DB320h */ case    9:  		/* lwz R8, <#[R31 + 48]> */
		/* 821DB320h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000030) );
		/* 821DB320h case    9:*/		return 0x821DB324;
		  /* 821DB324h */ case   10:  		/* rlwinm. R11, R8, 13, 31, 31 */
		/* 821DB324h case   10:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R8);
		/* 821DB324h case   10:*/		return 0x821DB328;
		  /* 821DB328h */ case   11:  		/* bc 12, CR0_EQ, 192 */
		/* 821DB328h case   11:*/		if ( regs.CR[0].eq ) { return 0x821DB3E8;  }
		/* 821DB328h case   11:*/		return 0x821DB32C;
		  /* 821DB32Ch */ case   12:  		/* lwz R11, <#[R31 + 116]> */
		/* 821DB32Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000074) );
		/* 821DB32Ch case   12:*/		return 0x821DB330;
		  /* 821DB330h */ case   13:  		/* lwz R10, <#[R11 + 24]> */
		/* 821DB330h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 821DB330h case   13:*/		return 0x821DB334;
		  /* 821DB334h */ case   14:  		/* rlwinm. R9, R10, 0, 2, 16 */
		/* 821DB334h case   14:*/		cpu::op::rlwinm<1,0,2,16>(regs,&regs.R9,regs.R10);
		/* 821DB334h case   14:*/		return 0x821DB338;
		  /* 821DB338h */ case   15:  		/* bc 4, CR0_EQ, 48 */
		/* 821DB338h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821DB368;  }
		/* 821DB338h case   15:*/		return 0x821DB33C;
		  /* 821DB33Ch */ case   16:  		/* rlwinm R10, R10, 0, 0, 16 */
		/* 821DB33Ch case   16:*/		cpu::op::rlwinm<0,0,0,16>(regs,&regs.R10,regs.R10);
		/* 821DB33Ch case   16:*/		return 0x821DB340;
		  /* 821DB340h */ case   17:  		/* stw R10, <#[R11 + 24]> */
		/* 821DB340h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 821DB340h case   17:*/		return 0x821DB344;
		  /* 821DB344h */ case   18:  		/* lwz R10, <#[R31 + 8]> */
		/* 821DB344h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821DB344h case   18:*/		return 0x821DB348;
		  /* 821DB348h */ case   19:  		/* cmplwi CR6, R10, 0 */
		/* 821DB348h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DB348h case   19:*/		return 0x821DB34C;
		  /* 821DB34Ch */ case   20:  		/* bc 12, CR6_EQ, 28 */
		/* 821DB34Ch case   20:*/		if ( regs.CR[6].eq ) { return 0x821DB368;  }
		/* 821DB34Ch case   20:*/		return 0x821DB350;
		  /* 821DB350h */ case   21:  		/* lwz R9, <#[R11 + 24]> */
		/* 821DB350h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000018) );
		/* 821DB350h case   21:*/		return 0x821DB354;
		  /* 821DB354h */ case   22:  		/* addi R8, R9, 1 */
		/* 821DB354h case   22:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R9,0x1);
		/* 821DB354h case   22:*/		return 0x821DB358;
		  /* 821DB358h */ case   23:  		/* rlwimi R8, R9, 0, 0, 16 */
		/* 821DB358h case   23:*/		cpu::op::rlwimi<0,0,0,16>(regs,&regs.R8,regs.R9);
		/* 821DB358h case   23:*/		return 0x821DB35C;
		  /* 821DB35Ch */ case   24:  		/* stw R8, <#[R11 + 24]> */
		/* 821DB35Ch case   24:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000018) );
		/* 821DB35Ch case   24:*/		return 0x821DB360;
		  /* 821DB360h */ case   25:  		/* lwz R10, <#[R10 + 12]> */
		/* 821DB360h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 821DB360h case   25:*/		return 0x821DB364;
		  /* 821DB364h */ case   26:  		/* b -28 */
		/* 821DB364h case   26:*/		return 0x821DB348;
		/* 821DB364h case   26:*/		return 0x821DB368;
	}
	return 0x821DB368;
} // Block from 821DB2FCh-821DB368h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821DB368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB368);
		  /* 821DB368h */ case    0:  		/* lwz R10, <#[R11 + 24]> */
		/* 821DB368h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000018) );
		/* 821DB368h case    0:*/		return 0x821DB36C;
		  /* 821DB36Ch */ case    1:  		/* rlwinm R9, R10, 0, 0, 16 */
		/* 821DB36Ch case    1:*/		cpu::op::rlwinm<0,0,0,16>(regs,&regs.R9,regs.R10);
		/* 821DB36Ch case    1:*/		return 0x821DB370;
		  /* 821DB370h */ case    2:  		/* addis R9, R9, 1 */
		/* 821DB370h case    2:*/		cpu::op::addis<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821DB370h case    2:*/		return 0x821DB374;
		  /* 821DB374h */ case    3:  		/* addi R9, R9, -32768 */
		/* 821DB374h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFF8000);
		/* 821DB374h case    3:*/		return 0x821DB378;
		  /* 821DB378h */ case    4:  		/* rlwimi R9, R10, 0, 17, 1 */
		/* 821DB378h case    4:*/		cpu::op::rlwimi<0,0,17,1>(regs,&regs.R9,regs.R10);
		/* 821DB378h case    4:*/		return 0x821DB37C;
		  /* 821DB37Ch */ case    5:  		/* rlwinm R10, R9, 17, 15, 31 */
		/* 821DB37Ch case    5:*/		cpu::op::rlwinm<0,17,15,31>(regs,&regs.R10,regs.R9);
		/* 821DB37Ch case    5:*/		return 0x821DB380;
		  /* 821DB380h */ case    6:  		/* stw R9, <#[R11 + 24]> */
		/* 821DB380h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000018) );
		/* 821DB380h case    6:*/		return 0x821DB384;
		  /* 821DB384h */ case    7:  		/* xor R11, R10, R9 */
		/* 821DB384h case    7:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R10,regs.R9);
		/* 821DB384h case    7:*/		return 0x821DB388;
		  /* 821DB388h */ case    8:  		/* rlwinm. R11, R11, 0, 17, 31 */
		/* 821DB388h case    8:*/		cpu::op::rlwinm<1,0,17,31>(regs,&regs.R11,regs.R11);
		/* 821DB388h case    8:*/		return 0x821DB38C;
		  /* 821DB38Ch */ case    9:  		/* bc 4, CR0_EQ, 208 */
		/* 821DB38Ch case    9:*/		if ( !regs.CR[0].eq ) { return 0x821DB45C;  }
		/* 821DB38Ch case    9:*/		return 0x821DB390;
		  /* 821DB390h */ case   10:  		/* lwz R11, <#[R18]> */
		/* 821DB390h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000000) );
		/* 821DB390h case   10:*/		return 0x821DB394;
		  /* 821DB394h */ case   11:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DB394h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DB394h case   11:*/		return 0x821DB398;
		  /* 821DB398h */ case   12:  		/* bc 4, CR0_EQ, 40 */
		/* 821DB398h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821DB3C0;  }
		/* 821DB398h case   12:*/		return 0x821DB39C;
		  /* 821DB39Ch */ case   13:  		/* lwz R11, <#[R23]> */
		/* 821DB39Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821DB39Ch case   13:*/		return 0x821DB3A0;
		  /* 821DB3A0h */ case   14:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DB3A0h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DB3A0h case   14:*/		return 0x821DB3A4;
		  /* 821DB3A4h */ case   15:  		/* addic. R3, R11, -4 */
		/* 821DB3A4h case   15:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821DB3A4h case   15:*/		return 0x821DB3A8;
		  /* 821DB3A8h */ case   16:  		/* bc 12, CR0_EQ, 24 */
		/* 821DB3A8h case   16:*/		if ( regs.CR[0].eq ) { return 0x821DB3C0;  }
		/* 821DB3A8h case   16:*/		return 0x821DB3AC;
		  /* 821DB3ACh */ case   17:  		/* lwz R11, <#[R3 + 8]> */
		/* 821DB3ACh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821DB3ACh case   17:*/		return 0x821DB3B0;
		  /* 821DB3B0h */ case   18:  		/* lwz R10, <#[R3 + 12]> */
		/* 821DB3B0h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821DB3B0h case   18:*/		return 0x821DB3B4;
		  /* 821DB3B4h */ case   19:  		/* addi R11, R11, 1 */
		/* 821DB3B4h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821DB3B4h case   19:*/		return 0x821DB3B8;
		  /* 821DB3B8h */ case   20:  		/* cmplw CR6, R11, R10 */
		/* 821DB3B8h case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821DB3B8h case   20:*/		return 0x821DB3BC;
		  /* 821DB3BCh */ case   21:  		/* bc 4, CR6_GT, 16 */
		/* 821DB3BCh case   21:*/		if ( !regs.CR[6].gt ) { return 0x821DB3CC;  }
		/* 821DB3BCh case   21:*/		return 0x821DB3C0;
	}
	return 0x821DB3C0;
} // Block from 821DB368h-821DB3C0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821DB3C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB3C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB3C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB3C0);
		  /* 821DB3C0h */ case    0:  		/* li R4, 1 */
		/* 821DB3C0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821DB3C0h case    0:*/		return 0x821DB3C4;
		  /* 821DB3C4h */ case    1:  		/* mr R3, R23 */
		/* 821DB3C4h case    1:*/		regs.R3 = regs.R23;
		/* 821DB3C4h case    1:*/		return 0x821DB3C8;
		  /* 821DB3C8h */ case    2:  		/* bl -320256 */
		/* 821DB3C8h case    2:*/		regs.LR = 0x821DB3CC; return 0x8218D0C8;
		/* 821DB3C8h case    2:*/		return 0x821DB3CC;
	}
	return 0x821DB3CC;
} // Block from 821DB3C0h-821DB3CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DB3CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB3CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB3CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB3CC);
		  /* 821DB3CCh */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821DB3CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821DB3CCh case    0:*/		return 0x821DB3D0;
		  /* 821DB3D0h */ case    1:  		/* addi R10, R11, 4 */
		/* 821DB3D0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821DB3D0h case    1:*/		return 0x821DB3D4;
		  /* 821DB3D4h */ case    2:  		/* addi R9, R11, 1 */
		/* 821DB3D4h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821DB3D4h case    2:*/		return 0x821DB3D8;
		  /* 821DB3D8h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821DB3D8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821DB3D8h case    3:*/		return 0x821DB3DC;
		  /* 821DB3DCh */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821DB3DCh case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821DB3DCh case    4:*/		return 0x821DB3E0;
		  /* 821DB3E0h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821DB3E0h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821DB3E0h case    5:*/		return 0x821DB3E4;
		  /* 821DB3E4h */ case    6:  		/* b 120 */
		/* 821DB3E4h case    6:*/		return 0x821DB45C;
		/* 821DB3E4h case    6:*/		return 0x821DB3E8;
	}
	return 0x821DB3E8;
} // Block from 821DB3CCh-821DB3E8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DB3E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB3E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB3E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB3E8);
		  /* 821DB3E8h */ case    0:  		/* lwz R9, <#[R31 + 8]> */
		/* 821DB3E8h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 821DB3E8h case    0:*/		return 0x821DB3EC;
		  /* 821DB3ECh */ case    1:  		/* cmplwi CR6, R9, 0 */
		/* 821DB3ECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821DB3ECh case    1:*/		return 0x821DB3F0;
		  /* 821DB3F0h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 821DB3F0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DB430;  }
		/* 821DB3F0h case    2:*/		return 0x821DB3F4;
		  /* 821DB3F4h */ case    3:  		/* lwz R11, <#[R9 + 4]> */
		/* 821DB3F4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821DB3F4h case    3:*/		return 0x821DB3F8;
		  /* 821DB3F8h */ case    4:  		/* lwz R10, <#[R11 + 44]> */
		/* 821DB3F8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000002C) );
		/* 821DB3F8h case    4:*/		return 0x821DB3FC;
		  /* 821DB3FCh */ case    5:  		/* cmplw CR6, R10, R22 */
		/* 821DB3FCh case    5:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R22);
		/* 821DB3FCh case    5:*/		return 0x821DB400;
		  /* 821DB400h */ case    6:  		/* bc 12, CR6_EQ, 40 */
		/* 821DB400h case    6:*/		if ( regs.CR[6].eq ) { return 0x821DB428;  }
		/* 821DB400h case    6:*/		return 0x821DB404;
		  /* 821DB404h */ case    7:  		/* rlwinm R10, R8, 27, 18, 31 */
		/* 821DB404h case    7:*/		cpu::op::rlwinm<0,27,18,31>(regs,&regs.R10,regs.R8);
		/* 821DB404h case    7:*/		return 0x821DB408;
		  /* 821DB408h */ case    8:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DB408h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DB408h case    8:*/		return 0x821DB40C;
		  /* 821DB40Ch */ case    9:  		/* rlwinm R7, R8, 0, 27, 31 */
		/* 821DB40Ch case    9:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R8);
		/* 821DB40Ch case    9:*/		return 0x821DB410;
		  /* 821DB410h */ case   10:  		/* addi R10, R10, 1 */
		/* 821DB410h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821DB410h case   10:*/		return 0x821DB414;
		  /* 821DB414h */ case   11:  		/* slw R7, R17, R7 */
		/* 821DB414h case   11:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R17,regs.R7);
		/* 821DB414h case   11:*/		return 0x821DB418;
		  /* 821DB418h */ case   12:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821DB418h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821DB418h case   12:*/		return 0x821DB41C;
		  /* 821DB41Ch */ case   13:  		/* lwzx R11, <#[R10 + R11]> */
		/* 821DB41Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821DB41Ch case   13:*/		return 0x821DB420;
		  /* 821DB420h */ case   14:  		/* and. R11, R11, R7 */
		/* 821DB420h case   14:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R7);
		/* 821DB420h case   14:*/		return 0x821DB424;
		  /* 821DB424h */ case   15:  		/* bc 12, CR0_EQ, 56 */
		/* 821DB424h case   15:*/		if ( regs.CR[0].eq ) { return 0x821DB45C;  }
		/* 821DB424h case   15:*/		return 0x821DB428;
	}
	return 0x821DB428;
} // Block from 821DB3E8h-821DB428h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821DB428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB428);
		  /* 821DB428h */ case    0:  		/* lwz R9, <#[R9 + 12]> */
		/* 821DB428h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000000C) );
		/* 821DB428h case    0:*/		return 0x821DB42C;
		  /* 821DB42Ch */ case    1:  		/* b -64 */
		/* 821DB42Ch case    1:*/		return 0x821DB3EC;
		/* 821DB42Ch case    1:*/		return 0x821DB430;
	}
	return 0x821DB430;
} // Block from 821DB428h-821DB430h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DB430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB430);
		  /* 821DB430h */ case    0:  		/* cmplw CR6, R26, R31 */
		/* 821DB430h case    0:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R31);
		/* 821DB430h case    0:*/		return 0x821DB434;
		  /* 821DB434h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 821DB434h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DB444;  }
		/* 821DB434h case    1:*/		return 0x821DB438;
		  /* 821DB438h */ case    2:  		/* mr R27, R26 */
		/* 821DB438h case    2:*/		regs.R27 = regs.R26;
		/* 821DB438h case    2:*/		return 0x821DB43C;
		  /* 821DB43Ch */ case    3:  		/* lis R30, 4096 */
		/* 821DB43Ch case    3:*/		cpu::op::lis<0>(regs,&regs.R30,0x1000);
		/* 821DB43Ch case    3:*/		return 0x821DB440;
		  /* 821DB440h */ case    4:  		/* b 28 */
		/* 821DB440h case    4:*/		return 0x821DB45C;
		/* 821DB440h case    4:*/		return 0x821DB444;
	}
	return 0x821DB444;
} // Block from 821DB430h-821DB444h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DB444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB444);
		  /* 821DB444h */ case    0:  		/* lwz R11, <#[R31 + 68]> */
		/* 821DB444h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000044) );
		/* 821DB444h case    0:*/		return 0x821DB448;
		  /* 821DB448h */ case    1:  		/* rlwinm R11, R11, 0, 4, 31 */
		/* 821DB448h case    1:*/		cpu::op::rlwinm<0,0,4,31>(regs,&regs.R11,regs.R11);
		/* 821DB448h case    1:*/		return 0x821DB44C;
		  /* 821DB44Ch */ case    2:  		/* cmplw CR6, R11, R30 */
		/* 821DB44Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821DB44Ch case    2:*/		return 0x821DB450;
		  /* 821DB450h */ case    3:  		/* bc 4, CR6_GT, 20 */
		/* 821DB450h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821DB464;  }
		/* 821DB450h case    3:*/		return 0x821DB454;
		  /* 821DB454h */ case    4:  		/* mr R30, R11 */
		/* 821DB454h case    4:*/		regs.R30 = regs.R11;
		/* 821DB454h case    4:*/		return 0x821DB458;
		  /* 821DB458h */ case    5:  		/* mr R27, R31 */
		/* 821DB458h case    5:*/		regs.R27 = regs.R31;
		/* 821DB458h case    5:*/		return 0x821DB45C;
	}
	return 0x821DB45C;
} // Block from 821DB444h-821DB45Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DB45Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB45C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB45C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB45C);
		  /* 821DB45Ch */ case    0:  		/* lwz R29, <#[R29 + 8]> */
		/* 821DB45Ch case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000008) );
		/* 821DB45Ch case    0:*/		return 0x821DB460;
		  /* 821DB460h */ case    1:  		/* b -344 */
		/* 821DB460h case    1:*/		return 0x821DB308;
		/* 821DB460h case    1:*/		return 0x821DB464;
	}
	return 0x821DB464;
} // Block from 821DB45Ch-821DB464h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DB464h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB464( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB464) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB464);
		  /* 821DB464h */ case    0:  		/* bc 4, CR6_EQ, -8 */
		/* 821DB464h case    0:*/		if ( !regs.CR[6].eq ) { return 0x821DB45C;  }
		/* 821DB464h case    0:*/		return 0x821DB468;
		  /* 821DB468h */ case    1:  		/* lwz R11, <#[R27 + 8]> */
		/* 821DB468h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821DB468h case    1:*/		return 0x821DB46C;
		  /* 821DB46Ch */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821DB46Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DB46Ch case    2:*/		return 0x821DB470;
		  /* 821DB470h */ case    3:  		/* bc 12, CR6_EQ, -20 */
		/* 821DB470h case    3:*/		if ( regs.CR[6].eq ) { return 0x821DB45C;  }
		/* 821DB470h case    3:*/		return 0x821DB474;
		  /* 821DB474h */ case    4:  		/* lwz R9, <#[R11 + 4]> */
		/* 821DB474h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821DB474h case    4:*/		return 0x821DB478;
		  /* 821DB478h */ case    5:  		/* rlwinm R10, R8, 27, 18, 31 */
		/* 821DB478h case    5:*/		cpu::op::rlwinm<0,27,18,31>(regs,&regs.R10,regs.R8);
		/* 821DB478h case    5:*/		return 0x821DB47C;
		  /* 821DB47Ch */ case    6:  		/* rlwinm R7, R8, 0, 27, 31 */
		/* 821DB47Ch case    6:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R8);
		/* 821DB47Ch case    6:*/		return 0x821DB480;
		  /* 821DB480h */ case    7:  		/* addi R10, R10, 1 */
		/* 821DB480h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821DB480h case    7:*/		return 0x821DB484;
		  /* 821DB484h */ case    8:  		/* slw R7, R17, R7 */
		/* 821DB484h case    8:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R17,regs.R7);
		/* 821DB484h case    8:*/		return 0x821DB488;
		  /* 821DB488h */ case    9:  		/* lwz R9, <#[R9 + 40]> */
		/* 821DB488h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000028) );
		/* 821DB488h case    9:*/		return 0x821DB48C;
		  /* 821DB48Ch */ case   10:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821DB48Ch case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821DB48Ch case   10:*/		return 0x821DB490;
		  /* 821DB490h */ case   11:  		/* lwzx R10, <#[R10 + R9]> */
		/* 821DB490h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821DB490h case   11:*/		return 0x821DB494;
		  /* 821DB494h */ case   12:  		/* and. R10, R10, R7 */
		/* 821DB494h case   12:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R7);
		/* 821DB494h case   12:*/		return 0x821DB498;
		  /* 821DB498h */ case   13:  		/* bc 4, CR0_EQ, -64 */
		/* 821DB498h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821DB458;  }
		/* 821DB498h case   13:*/		return 0x821DB49C;
		  /* 821DB49Ch */ case   14:  		/* lwz R11, <#[R11 + 12]> */
		/* 821DB49Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DB49Ch case   14:*/		return 0x821DB4A0;
		  /* 821DB4A0h */ case   15:  		/* b -52 */
		/* 821DB4A0h case   15:*/		return 0x821DB46C;
		/* 821DB4A0h case   15:*/		return 0x821DB4A4;
	}
	return 0x821DB4A4;
} // Block from 821DB464h-821DB4A4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821DB4A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB4A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB4A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB4A4);
		  /* 821DB4A4h */ case    0:  		/* lwz R11, <#[R28 + 36]> */
		/* 821DB4A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000024) );
		/* 821DB4A4h case    0:*/		return 0x821DB4A8;
		  /* 821DB4A8h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DB4A8h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DB4A8h case    1:*/		return 0x821DB4AC;
		  /* 821DB4ACh */ case    2:  		/* bc 4, CR0_EQ, 204 */
		/* 821DB4ACh case    2:*/		if ( !regs.CR[0].eq ) { return 0x821DB578;  }
		/* 821DB4ACh case    2:*/		return 0x821DB4B0;
		  /* 821DB4B0h */ case    3:  		/* lwz R11, <#[R28 + 32]> */
		/* 821DB4B0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000020) );
		/* 821DB4B0h case    3:*/		return 0x821DB4B4;
		  /* 821DB4B4h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DB4B4h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DB4B4h case    4:*/		return 0x821DB4B8;
		  /* 821DB4B8h */ case    5:  		/* addic. R31, R11, -40 */
		/* 821DB4B8h case    5:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821DB4B8h case    5:*/		return 0x821DB4BC;
		  /* 821DB4BCh */ case    6:  		/* bc 12, CR0_EQ, 188 */
		/* 821DB4BCh case    6:*/		if ( regs.CR[0].eq ) { return 0x821DB578;  }
		/* 821DB4BCh case    6:*/		return 0x821DB4C0;
		  /* 821DB4C0h */ case    7:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DB4C0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DB4C0h case    7:*/		return 0x821DB4C4;
		  /* 821DB4C4h */ case    8:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DB4C4h case    8:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DB4C4h case    8:*/		return 0x821DB4C8;
		  /* 821DB4C8h */ case    9:  		/* cmplwi CR6, R11, 10752 */
		/* 821DB4C8h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002A00);
		/* 821DB4C8h case    9:*/		return 0x821DB4CC;
		  /* 821DB4CCh */ case   10:  		/* bc 4, CR6_EQ, 172 */
		/* 821DB4CCh case   10:*/		if ( !regs.CR[6].eq ) { return 0x821DB578;  }
		/* 821DB4CCh case   10:*/		return 0x821DB4D0;
		  /* 821DB4D0h */ case   11:  		/* li R6, 0 */
		/* 821DB4D0h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821DB4D0h case   11:*/		return 0x821DB4D4;
		  /* 821DB4D4h */ case   12:  		/* li R5, 0 */
		/* 821DB4D4h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DB4D4h case   12:*/		return 0x821DB4D8;
		  /* 821DB4D8h */ case   13:  		/* li R4, 84 */
		/* 821DB4D8h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x54);
		/* 821DB4D8h case   13:*/		return 0x821DB4DC;
		  /* 821DB4DCh */ case   14:  		/* mr R3, R25 */
		/* 821DB4DCh case   14:*/		regs.R3 = regs.R25;
		/* 821DB4DCh case   14:*/		return 0x821DB4E0;
		  /* 821DB4E0h */ case   15:  		/* bl -487600 */
		/* 821DB4E0h case   15:*/		regs.LR = 0x821DB4E4; return 0x82164430;
		/* 821DB4E0h case   15:*/		return 0x821DB4E4;
		  /* 821DB4E4h */ case   16:  		/* addi R10, R31, -20 */
		/* 821DB4E4h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0xFFFFFFEC);
		/* 821DB4E4h case   16:*/		return 0x821DB4E8;
		  /* 821DB4E8h */ case   17:  		/* lwz R11, <#[R25 + 616]> */
		/* 821DB4E8h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000268) );
		/* 821DB4E8h case   17:*/		return 0x821DB4EC;
		  /* 821DB4ECh */ case   18:  		/* lwzx R10, <#[R3 + R10]> */
		/* 821DB4ECh case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + regs.R10 + 0x00000000) );
		/* 821DB4ECh case   18:*/		return 0x821DB4F0;
		  /* 821DB4F0h */ case   19:  		/* rlwinm R10, R10, 27, 27, 31 */
		/* 821DB4F0h case   19:*/		cpu::op::rlwinm<0,27,27,31>(regs,&regs.R10,regs.R10);
		/* 821DB4F0h case   19:*/		return 0x821DB4F4;
		  /* 821DB4F4h */ case   20:  		/* mulli R10, R10, 68 */
		/* 821DB4F4h case   20:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 821DB4F4h case   20:*/		return 0x821DB4F8;
		  /* 821DB4F8h */ case   21:  		/* add R11, R10, R11 */
		/* 821DB4F8h case   21:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821DB4F8h case   21:*/		return 0x821DB4FC;
		  /* 821DB4FCh */ case   22:  		/* lwz R31, <#[R11 + 8]> */
		/* 821DB4FCh case   22:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000008) );
		/* 821DB4FCh case   22:*/		return 0x821DB500;
		  /* 821DB500h */ case   23:  		/* lwz R11, <#[R31 + 48]> */
		/* 821DB500h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821DB500h case   23:*/		return 0x821DB504;
		  /* 821DB504h */ case   24:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 821DB504h case   24:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 821DB504h case   24:*/		return 0x821DB508;
		  /* 821DB508h */ case   25:  		/* b 12 */
		/* 821DB508h case   25:*/		return 0x821DB514;
		/* 821DB508h case   25:*/		return 0x821DB50C;
		  /* 821DB50Ch */ case   26:  		/* lwz R11, <#[R31 + 48]> */
		/* 821DB50Ch case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821DB50Ch case   26:*/		return 0x821DB510;
		  /* 821DB510h */ case   27:  		/* rlwinm. R11, R11, 0, 9, 9 */
		/* 821DB510h case   27:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R11,regs.R11);
		/* 821DB510h case   27:*/		return 0x821DB514;
	}
	return 0x821DB514;
} // Block from 821DB4A4h-821DB514h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821DB514h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB514( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB514) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB514);
		  /* 821DB514h */ case    0:  		/* bc 12, CR0_EQ, 16 */
		/* 821DB514h case    0:*/		if ( regs.CR[0].eq ) { return 0x821DB524;  }
		/* 821DB514h case    0:*/		return 0x821DB518;
		  /* 821DB518h */ case    1:  		/* lwz R31, <#[R31 + 80]> */
		/* 821DB518h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000050) );
		/* 821DB518h case    1:*/		return 0x821DB51C;
		  /* 821DB51Ch */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 821DB51Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DB51Ch case    2:*/		return 0x821DB520;
		  /* 821DB520h */ case    3:  		/* bc 4, CR6_EQ, -20 */
		/* 821DB520h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821DB50C;  }
		/* 821DB520h case    3:*/		return 0x821DB524;
	}
	return 0x821DB524;
} // Block from 821DB514h-821DB524h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DB524h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB524( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB524) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB524);
		  /* 821DB524h */ case    0:  		/* lwz R11, <#[R20]> */
		/* 821DB524h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 821DB524h case    0:*/		return 0x821DB528;
		  /* 821DB528h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DB528h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DB528h case    1:*/		return 0x821DB52C;
		  /* 821DB52Ch */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 821DB52Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821DB554;  }
		/* 821DB52Ch case    2:*/		return 0x821DB530;
		  /* 821DB530h */ case    3:  		/* lwz R11, <#[R24]> */
		/* 821DB530h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821DB530h case    3:*/		return 0x821DB534;
		  /* 821DB534h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DB534h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DB534h case    4:*/		return 0x821DB538;
		  /* 821DB538h */ case    5:  		/* addic. R3, R11, -4 */
		/* 821DB538h case    5:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821DB538h case    5:*/		return 0x821DB53C;
		  /* 821DB53Ch */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 821DB53Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x821DB554;  }
		/* 821DB53Ch case    6:*/		return 0x821DB540;
		  /* 821DB540h */ case    7:  		/* lwz R11, <#[R3 + 8]> */
		/* 821DB540h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821DB540h case    7:*/		return 0x821DB544;
		  /* 821DB544h */ case    8:  		/* lwz R10, <#[R3 + 12]> */
		/* 821DB544h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821DB544h case    8:*/		return 0x821DB548;
		  /* 821DB548h */ case    9:  		/* addi R11, R11, 1 */
		/* 821DB548h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821DB548h case    9:*/		return 0x821DB54C;
		  /* 821DB54Ch */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 821DB54Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821DB54Ch case   10:*/		return 0x821DB550;
		  /* 821DB550h */ case   11:  		/* bc 4, CR6_GT, 16 */
		/* 821DB550h case   11:*/		if ( !regs.CR[6].gt ) { return 0x821DB560;  }
		/* 821DB550h case   11:*/		return 0x821DB554;
	}
	return 0x821DB554;
} // Block from 821DB524h-821DB554h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821DB554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB554);
		  /* 821DB554h */ case    0:  		/* li R4, 1 */
		/* 821DB554h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821DB554h case    0:*/		return 0x821DB558;
		  /* 821DB558h */ case    1:  		/* mr R3, R24 */
		/* 821DB558h case    1:*/		regs.R3 = regs.R24;
		/* 821DB558h case    1:*/		return 0x821DB55C;
		  /* 821DB55Ch */ case    2:  		/* bl -320660 */
		/* 821DB55Ch case    2:*/		regs.LR = 0x821DB560; return 0x8218D0C8;
		/* 821DB55Ch case    2:*/		return 0x821DB560;
	}
	return 0x821DB560;
} // Block from 821DB554h-821DB560h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DB560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB560);
		  /* 821DB560h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821DB560h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821DB560h case    0:*/		return 0x821DB564;
		  /* 821DB564h */ case    1:  		/* addi R10, R11, 4 */
		/* 821DB564h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821DB564h case    1:*/		return 0x821DB568;
		  /* 821DB568h */ case    2:  		/* addi R9, R11, 1 */
		/* 821DB568h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821DB568h case    2:*/		return 0x821DB56C;
		  /* 821DB56Ch */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821DB56Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821DB56Ch case    3:*/		return 0x821DB570;
		  /* 821DB570h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821DB570h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821DB570h case    4:*/		return 0x821DB574;
		  /* 821DB574h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821DB574h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821DB574h case    5:*/		return 0x821DB578;
	}
	return 0x821DB578;
} // Block from 821DB560h-821DB578h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DB578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB578);
		  /* 821DB578h */ case    0:  		/* lwz R29, <#[R28 + 12]> */
		/* 821DB578h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x0000000C) );
		/* 821DB578h case    0:*/		return 0x821DB57C;
		  /* 821DB57Ch */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 821DB57Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821DB57Ch case    1:*/		return 0x821DB580;
		  /* 821DB580h */ case    2:  		/* bc 12, CR6_EQ, 428 */
		/* 821DB580h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DB72C;  }
		/* 821DB580h case    2:*/		return 0x821DB584;
		  /* 821DB584h */ case    3:  		/* lwz R30, <#[R29]> */
		/* 821DB584h case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821DB584h case    3:*/		return 0x821DB588;
		  /* 821DB588h */ case    4:  		/* lwz R11, <#[R30 + 44]> */
		/* 821DB588h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 821DB588h case    4:*/		return 0x821DB58C;
		  /* 821DB58Ch */ case    5:  		/* cmplw CR6, R11, R22 */
		/* 821DB58Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 821DB58Ch case    5:*/		return 0x821DB590;
		  /* 821DB590h */ case    6:  		/* bc 12, CR6_EQ, 404 */
		/* 821DB590h case    6:*/		if ( regs.CR[6].eq ) { return 0x821DB724;  }
		/* 821DB590h case    6:*/		return 0x821DB594;
		  /* 821DB594h */ case    7:  		/* lwz R9, <#[R30 + 48]> */
		/* 821DB594h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000030) );
		/* 821DB594h case    7:*/		return 0x821DB598;
		  /* 821DB598h */ case    8:  		/* rlwinm. R11, R9, 13, 31, 31 */
		/* 821DB598h case    8:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R9);
		/* 821DB598h case    8:*/		return 0x821DB59C;
		  /* 821DB59Ch */ case    9:  		/* bc 4, CR0_EQ, 392 */
		/* 821DB59Ch case    9:*/		if ( !regs.CR[0].eq ) { return 0x821DB724;  }
		/* 821DB59Ch case    9:*/		return 0x821DB5A0;
		  /* 821DB5A0h */ case   10:  		/* lwz R8, <#[R30 + 8]> */
		/* 821DB5A0h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000008) );
		/* 821DB5A0h case   10:*/		return 0x821DB5A4;
		  /* 821DB5A4h */ case   11:  		/* cmplwi CR6, R8, 0 */
		/* 821DB5A4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821DB5A4h case   11:*/		return 0x821DB5A8;
		  /* 821DB5A8h */ case   12:  		/* bc 12, CR6_EQ, 64 */
		/* 821DB5A8h case   12:*/		if ( regs.CR[6].eq ) { return 0x821DB5E8;  }
		/* 821DB5A8h case   12:*/		return 0x821DB5AC;
		  /* 821DB5ACh */ case   13:  		/* lwz R11, <#[R8 + 4]> */
		/* 821DB5ACh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 821DB5ACh case   13:*/		return 0x821DB5B0;
		  /* 821DB5B0h */ case   14:  		/* lwz R10, <#[R11 + 44]> */
		/* 821DB5B0h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000002C) );
		/* 821DB5B0h case   14:*/		return 0x821DB5B4;
		  /* 821DB5B4h */ case   15:  		/* cmplw CR6, R10, R22 */
		/* 821DB5B4h case   15:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R22);
		/* 821DB5B4h case   15:*/		return 0x821DB5B8;
		  /* 821DB5B8h */ case   16:  		/* bc 12, CR6_EQ, 40 */
		/* 821DB5B8h case   16:*/		if ( regs.CR[6].eq ) { return 0x821DB5E0;  }
		/* 821DB5B8h case   16:*/		return 0x821DB5BC;
		  /* 821DB5BCh */ case   17:  		/* rlwinm R10, R9, 27, 18, 31 */
		/* 821DB5BCh case   17:*/		cpu::op::rlwinm<0,27,18,31>(regs,&regs.R10,regs.R9);
		/* 821DB5BCh case   17:*/		return 0x821DB5C0;
		  /* 821DB5C0h */ case   18:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DB5C0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DB5C0h case   18:*/		return 0x821DB5C4;
		  /* 821DB5C4h */ case   19:  		/* rlwinm R7, R9, 0, 27, 31 */
		/* 821DB5C4h case   19:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R9);
		/* 821DB5C4h case   19:*/		return 0x821DB5C8;
		  /* 821DB5C8h */ case   20:  		/* addi R10, R10, 1 */
		/* 821DB5C8h case   20:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821DB5C8h case   20:*/		return 0x821DB5CC;
		  /* 821DB5CCh */ case   21:  		/* slw R7, R17, R7 */
		/* 821DB5CCh case   21:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R17,regs.R7);
		/* 821DB5CCh case   21:*/		return 0x821DB5D0;
		  /* 821DB5D0h */ case   22:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821DB5D0h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821DB5D0h case   22:*/		return 0x821DB5D4;
		  /* 821DB5D4h */ case   23:  		/* lwzx R11, <#[R10 + R11]> */
		/* 821DB5D4h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821DB5D4h case   23:*/		return 0x821DB5D8;
		  /* 821DB5D8h */ case   24:  		/* and. R11, R11, R7 */
		/* 821DB5D8h case   24:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R7);
		/* 821DB5D8h case   24:*/		return 0x821DB5DC;
		  /* 821DB5DCh */ case   25:  		/* bc 12, CR0_EQ, 328 */
		/* 821DB5DCh case   25:*/		if ( regs.CR[0].eq ) { return 0x821DB724;  }
		/* 821DB5DCh case   25:*/		return 0x821DB5E0;
	}
	return 0x821DB5E0;
} // Block from 821DB578h-821DB5E0h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821DB5E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB5E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB5E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB5E0);
		  /* 821DB5E0h */ case    0:  		/* lwz R8, <#[R8 + 12]> */
		/* 821DB5E0h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x0000000C) );
		/* 821DB5E0h case    0:*/		return 0x821DB5E4;
		  /* 821DB5E4h */ case    1:  		/* b -64 */
		/* 821DB5E4h case    1:*/		return 0x821DB5A4;
		/* 821DB5E4h case    1:*/		return 0x821DB5E8;
	}
	return 0x821DB5E8;
} // Block from 821DB5E0h-821DB5E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DB5E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB5E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB5E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB5E8);
		  /* 821DB5E8h */ case    0:  		/* lwz R11, <#[R30 + 36]> */
		/* 821DB5E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821DB5E8h case    0:*/		return 0x821DB5EC;
		  /* 821DB5ECh */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DB5ECh case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DB5ECh case    1:*/		return 0x821DB5F0;
		  /* 821DB5F0h */ case    2:  		/* bc 4, CR0_EQ, 216 */
		/* 821DB5F0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821DB6C8;  }
		/* 821DB5F0h case    2:*/		return 0x821DB5F4;
		  /* 821DB5F4h */ case    3:  		/* lwz R11, <#[R30 + 32]> */
		/* 821DB5F4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 821DB5F4h case    3:*/		return 0x821DB5F8;
		  /* 821DB5F8h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DB5F8h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DB5F8h case    4:*/		return 0x821DB5FC;
		  /* 821DB5FCh */ case    5:  		/* addic. R31, R11, -40 */
		/* 821DB5FCh case    5:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821DB5FCh case    5:*/		return 0x821DB600;
		  /* 821DB600h */ case    6:  		/* bc 12, CR0_EQ, 200 */
		/* 821DB600h case    6:*/		if ( regs.CR[0].eq ) { return 0x821DB6C8;  }
		/* 821DB600h case    6:*/		return 0x821DB604;
		  /* 821DB604h */ case    7:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DB604h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DB604h case    7:*/		return 0x821DB608;
		  /* 821DB608h */ case    8:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DB608h case    8:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DB608h case    8:*/		return 0x821DB60C;
		  /* 821DB60Ch */ case    9:  		/* cmplwi CR6, R11, 10880 */
		/* 821DB60Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002A80);
		/* 821DB60Ch case    9:*/		return 0x821DB610;
		  /* 821DB610h */ case   10:  		/* bc 4, CR6_EQ, 184 */
		/* 821DB610h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821DB6C8;  }
		/* 821DB610h case   10:*/		return 0x821DB614;
		  /* 821DB614h */ case   11:  		/* li R6, 0 */
		/* 821DB614h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821DB614h case   11:*/		return 0x821DB618;
		  /* 821DB618h */ case   12:  		/* li R5, 0 */
		/* 821DB618h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DB618h case   12:*/		return 0x821DB61C;
		  /* 821DB61Ch */ case   13:  		/* li R4, 85 */
		/* 821DB61Ch case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x55);
		/* 821DB61Ch case   13:*/		return 0x821DB620;
		  /* 821DB620h */ case   14:  		/* mr R3, R25 */
		/* 821DB620h case   14:*/		regs.R3 = regs.R25;
		/* 821DB620h case   14:*/		return 0x821DB624;
		  /* 821DB624h */ case   15:  		/* bl -487924 */
		/* 821DB624h case   15:*/		regs.LR = 0x821DB628; return 0x82164430;
		/* 821DB624h case   15:*/		return 0x821DB628;
		  /* 821DB628h */ case   16:  		/* addi R11, R31, -20 */
		/* 821DB628h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFEC);
		/* 821DB628h case   16:*/		return 0x821DB62C;
		  /* 821DB62Ch */ case   17:  		/* li R6, 0 */
		/* 821DB62Ch case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821DB62Ch case   17:*/		return 0x821DB630;
		  /* 821DB630h */ case   18:  		/* li R5, 0 */
		/* 821DB630h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DB630h case   18:*/		return 0x821DB634;
		  /* 821DB634h */ case   19:  		/* li R4, 84 */
		/* 821DB634h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0x54);
		/* 821DB634h case   19:*/		return 0x821DB638;
		  /* 821DB638h */ case   20:  		/* lwzx R31, <#[R3 + R11]> */
		/* 821DB638h case   20:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821DB638h case   20:*/		return 0x821DB63C;
		  /* 821DB63Ch */ case   21:  		/* mr R3, R25 */
		/* 821DB63Ch case   21:*/		regs.R3 = regs.R25;
		/* 821DB63Ch case   21:*/		return 0x821DB640;
		  /* 821DB640h */ case   22:  		/* bl -487952 */
		/* 821DB640h case   22:*/		regs.LR = 0x821DB644; return 0x82164430;
		/* 821DB640h case   22:*/		return 0x821DB644;
		  /* 821DB644h */ case   23:  		/* addi R10, R31, -20 */
		/* 821DB644h case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0xFFFFFFEC);
		/* 821DB644h case   23:*/		return 0x821DB648;
		  /* 821DB648h */ case   24:  		/* lwz R11, <#[R25 + 616]> */
		/* 821DB648h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000268) );
		/* 821DB648h case   24:*/		return 0x821DB64C;
		  /* 821DB64Ch */ case   25:  		/* lwzx R10, <#[R10 + R3]> */
		/* 821DB64Ch case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R3 + 0x00000000) );
		/* 821DB64Ch case   25:*/		return 0x821DB650;
		  /* 821DB650h */ case   26:  		/* rlwinm R10, R10, 27, 27, 31 */
		/* 821DB650h case   26:*/		cpu::op::rlwinm<0,27,27,31>(regs,&regs.R10,regs.R10);
		/* 821DB650h case   26:*/		return 0x821DB654;
		  /* 821DB654h */ case   27:  		/* mulli R10, R10, 68 */
		/* 821DB654h case   27:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 821DB654h case   27:*/		return 0x821DB658;
		  /* 821DB658h */ case   28:  		/* add R11, R10, R11 */
		/* 821DB658h case   28:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821DB658h case   28:*/		return 0x821DB65C;
		  /* 821DB65Ch */ case   29:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DB65Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DB65Ch case   29:*/		return 0x821DB660;
		  /* 821DB660h */ case   30:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DB660h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DB660h case   30:*/		return 0x821DB664;
		  /* 821DB664h */ case   31:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 821DB664h case   31:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 821DB664h case   31:*/		return 0x821DB668;
		  /* 821DB668h */ case   32:  		/* b 12 */
		/* 821DB668h case   32:*/		return 0x821DB674;
		/* 821DB668h case   32:*/		return 0x821DB66C;
		  /* 821DB66Ch */ case   33:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DB66Ch case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DB66Ch case   33:*/		return 0x821DB670;
		  /* 821DB670h */ case   34:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 821DB670h case   34:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 821DB670h case   34:*/		return 0x821DB674;
	}
	return 0x821DB674;
} // Block from 821DB5E8h-821DB674h (35 instructions)

//////////////////////////////////////////////////////
// Block at 821DB674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB674);
		  /* 821DB674h */ case    0:  		/* bc 12, CR0_EQ, 16 */
		/* 821DB674h case    0:*/		if ( regs.CR[0].eq ) { return 0x821DB684;  }
		/* 821DB674h case    0:*/		return 0x821DB678;
		  /* 821DB678h */ case    1:  		/* lwz R11, <#[R11 + 80]> */
		/* 821DB678h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821DB678h case    1:*/		return 0x821DB67C;
		  /* 821DB67Ch */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821DB67Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DB67Ch case    2:*/		return 0x821DB680;
		  /* 821DB680h */ case    3:  		/* bc 4, CR6_EQ, -20 */
		/* 821DB680h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821DB66C;  }
		/* 821DB680h case    3:*/		return 0x821DB684;
	}
	return 0x821DB684;
} // Block from 821DB674h-821DB684h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DB684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB684);
		  /* 821DB684h */ case    0:  		/* lwz R10, <#[R30 + 12]> */
		/* 821DB684h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 821DB684h case    0:*/		return 0x821DB688;
		  /* 821DB688h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 821DB688h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DB688h case    1:*/		return 0x821DB68C;
		  /* 821DB68Ch */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 821DB68Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821DB6AC;  }
		/* 821DB68Ch case    2:*/		return 0x821DB690;
		  /* 821DB690h */ case    3:  		/* lwz R9, <#[R10]> */
		/* 821DB690h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DB690h case    3:*/		return 0x821DB694;
		  /* 821DB694h */ case    4:  		/* cmplw CR6, R11, R9 */
		/* 821DB694h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821DB694h case    4:*/		return 0x821DB698;
		  /* 821DB698h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 821DB698h case    5:*/		if ( regs.CR[6].eq ) { return 0x821DB6A4;  }
		/* 821DB698h case    5:*/		return 0x821DB69C;
		  /* 821DB69Ch */ case    6:  		/* lwz R10, <#[R10 + 8]> */
		/* 821DB69Ch case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821DB69Ch case    6:*/		return 0x821DB6A0;
		  /* 821DB6A0h */ case    7:  		/* b -24 */
		/* 821DB6A0h case    7:*/		return 0x821DB688;
		/* 821DB6A0h case    7:*/		return 0x821DB6A4;
	}
	return 0x821DB6A4;
} // Block from 821DB684h-821DB6A4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821DB6A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB6A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB6A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB6A4);
		  /* 821DB6A4h */ case    0:  		/* mr R11, R17 */
		/* 821DB6A4h case    0:*/		regs.R11 = regs.R17;
		/* 821DB6A4h case    0:*/		return 0x821DB6A8;
		  /* 821DB6A8h */ case    1:  		/* b 8 */
		/* 821DB6A8h case    1:*/		return 0x821DB6B0;
		/* 821DB6A8h case    1:*/		return 0x821DB6AC;
	}
	return 0x821DB6AC;
} // Block from 821DB6A4h-821DB6ACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DB6ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB6AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB6AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB6AC);
		  /* 821DB6ACh */ case    0:  		/* li R11, 0 */
		/* 821DB6ACh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DB6ACh case    0:*/		return 0x821DB6B0;
	}
	return 0x821DB6B0;
} // Block from 821DB6ACh-821DB6B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DB6B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB6B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB6B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB6B0);
		  /* 821DB6B0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DB6B0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DB6B0h case    0:*/		return 0x821DB6B4;
		  /* 821DB6B4h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821DB6B4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DB6C8;  }
		/* 821DB6B4h case    1:*/		return 0x821DB6B8;
		  /* 821DB6B8h */ case    2:  		/* cmplw CR6, R30, R27 */
		/* 821DB6B8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R27);
		/* 821DB6B8h case    2:*/		return 0x821DB6BC;
		  /* 821DB6BCh */ case    3:  		/* bc 4, CR6_EQ, 104 */
		/* 821DB6BCh case    3:*/		if ( !regs.CR[6].eq ) { return 0x821DB724;  }
		/* 821DB6BCh case    3:*/		return 0x821DB6C0;
		  /* 821DB6C0h */ case    4:  		/* li R27, 0 */
		/* 821DB6C0h case    4:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821DB6C0h case    4:*/		return 0x821DB6C4;
		  /* 821DB6C4h */ case    5:  		/* b 96 */
		/* 821DB6C4h case    5:*/		return 0x821DB724;
		/* 821DB6C4h case    5:*/		return 0x821DB6C8;
	}
	return 0x821DB6C8;
} // Block from 821DB6B0h-821DB6C8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DB6C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB6C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB6C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB6C8);
		  /* 821DB6C8h */ case    0:  		/* cmplw CR6, R30, R27 */
		/* 821DB6C8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R27);
		/* 821DB6C8h case    0:*/		return 0x821DB6CC;
		  /* 821DB6CCh */ case    1:  		/* bc 12, CR6_EQ, 88 */
		/* 821DB6CCh case    1:*/		if ( regs.CR[6].eq ) { return 0x821DB724;  }
		/* 821DB6CCh case    1:*/		return 0x821DB6D0;
		  /* 821DB6D0h */ case    2:  		/* lwz R11, <#[R20]> */
		/* 821DB6D0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 821DB6D0h case    2:*/		return 0x821DB6D4;
		  /* 821DB6D4h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DB6D4h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DB6D4h case    3:*/		return 0x821DB6D8;
	}
	return 0x821DB6D8;
} // Block from 821DB6C8h-821DB6D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DB6D8h
// Function '?BuildDepthFirstOrdering@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB6D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB6D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB6D8);
		  /* 821DB6D8h */ case    0:  		/* bc 4, CR0_EQ, 40 */
		/* 821DB6D8h case    0:*/		if ( !regs.CR[0].eq ) { return 0x821DB700;  }
		/* 821DB6D8h case    0:*/		return 0x821DB6DC;
		  /* 821DB6DCh */ case    1:  		/* lwz R11, <#[R24]> */
		/* 821DB6DCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821DB6DCh case    1:*/		return 0x821DB6E0;
		  /* 821DB6E0h */ case    2:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DB6E0h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DB6E0h case    2:*/		return 0x821DB6E4;
		  /* 821DB6E4h */ case    3:  		/* addic. R3, R11, -4 */
		/* 821DB6E4h case    3:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821DB6E4h case    3:*/		return 0x821DB6E8;
		  /* 821DB6E8h */ case    4:  		/* bc 12, CR0_EQ, 24 */
		/* 821DB6E8h case    4:*/		if ( regs.CR[0].eq ) { return 0x821DB700;  }
		/* 821DB6E8h case    4:*/		return 0x821DB6EC;
		  /* 821DB6ECh */ case    5:  		/* lwz R11, <#[R3 + 8]> */
		/* 821DB6ECh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821DB6ECh case    5:*/		return 0x821DB6F0;
		  /* 821DB6F0h */ case    6:  		/* lwz R10, <#[R3 + 12]> */
		/* 821DB6F0h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821DB6F0h case    6:*/		return 0x821DB6F4;
		  /* 821DB6F4h */ case    7:  		/* addi R11, R11, 1 */
		/* 821DB6F4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821DB6F4h case    7:*/		return 0x821DB6F8;
		  /* 821DB6F8h */ case    8:  		/* cmplw CR6, R11, R10 */
		/* 821DB6F8h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821DB6F8h case    8:*/		return 0x821DB6FC;
		  /* 821DB6FCh */ case    9:  		/* bc 4, CR6_GT, 16 */
		/* 821DB6FCh case    9:*/		if ( !regs.CR[6].gt ) { return 0x821DB70C;  }
		/* 821DB6FCh case    9:*/		return 0x821DB700;
	}
	return 0x821DB700;
} // Block from 821DB6D8h-821DB700h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DB700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB700);
		  /* 821DB700h */ case    0:  		/* li R4, 1 */
		/* 821DB700h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821DB700h case    0:*/		return 0x821DB704;
		  /* 821DB704h */ case    1:  		/* mr R3, R24 */
		/* 821DB704h case    1:*/		regs.R3 = regs.R24;
		/* 821DB704h case    1:*/		return 0x821DB708;
		  /* 821DB708h */ case    2:  		/* bl -321088 */
		/* 821DB708h case    2:*/		regs.LR = 0x821DB70C; return 0x8218D0C8;
		/* 821DB708h case    2:*/		return 0x821DB70C;
	}
	return 0x821DB70C;
} // Block from 821DB700h-821DB70Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DB70Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB70C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB70C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB70C);
		  /* 821DB70Ch */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821DB70Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821DB70Ch case    0:*/		return 0x821DB710;
		  /* 821DB710h */ case    1:  		/* addi R10, R11, 4 */
		/* 821DB710h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821DB710h case    1:*/		return 0x821DB714;
		  /* 821DB714h */ case    2:  		/* addi R9, R11, 1 */
		/* 821DB714h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821DB714h case    2:*/		return 0x821DB718;
		  /* 821DB718h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821DB718h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821DB718h case    3:*/		return 0x821DB71C;
		  /* 821DB71Ch */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821DB71Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821DB71Ch case    4:*/		return 0x821DB720;
		  /* 821DB720h */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 821DB720h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821DB720h case    5:*/		return 0x821DB724;
	}
	return 0x821DB724;
} // Block from 821DB70Ch-821DB724h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DB724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB724);
		  /* 821DB724h */ case    0:  		/* lwz R29, <#[R29 + 8]> */
		/* 821DB724h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000008) );
		/* 821DB724h case    0:*/		return 0x821DB728;
		  /* 821DB728h */ case    1:  		/* b -428 */
		/* 821DB728h case    1:*/		return 0x821DB57C;
		/* 821DB728h case    1:*/		return 0x821DB72C;
	}
	return 0x821DB72C;
} // Block from 821DB724h-821DB72Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DB72Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB72C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB72C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB72C);
		  /* 821DB72Ch */ case    0:  		/* mr R28, R27 */
		/* 821DB72Ch case    0:*/		regs.R28 = regs.R27;
		/* 821DB72Ch case    0:*/		return 0x821DB730;
		  /* 821DB730h */ case    1:  		/* cmplwi CR6, R27, 0 */
		/* 821DB730h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821DB730h case    1:*/		return 0x821DB734;
		  /* 821DB734h */ case    2:  		/* bc 4, CR6_EQ, -1908 */
		/* 821DB734h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DAFC0;  }
		/* 821DB734h case    2:*/		return 0x821DB738;
		  /* 821DB738h */ case    3:  		/* lwz R11, <#[R20]> */
		/* 821DB738h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 821DB738h case    3:*/		return 0x821DB73C;
		  /* 821DB73Ch */ case    4:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DB73Ch case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DB73Ch case    4:*/		return 0x821DB740;
		  /* 821DB740h */ case    5:  		/* bc 4, CR0_EQ, 12 */
		/* 821DB740h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821DB74C;  }
		/* 821DB740h case    5:*/		return 0x821DB744;
		  /* 821DB744h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 821DB744h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DB744h case    6:*/		return 0x821DB748;
		  /* 821DB748h */ case    7:  		/* bc 4, CR0_EQ, 72 */
		/* 821DB748h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821DB790;  }
		/* 821DB748h case    7:*/		return 0x821DB74C;
	}
	return 0x821DB74C;
} // Block from 821DB72Ch-821DB74Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821DB74Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB74C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB74C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB74C);
		  /* 821DB74Ch */ case    0:  		/* lwz R11, <#[R18]> */
		/* 821DB74Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000000) );
		/* 821DB74Ch case    0:*/		return 0x821DB750;
		  /* 821DB750h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DB750h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DB750h case    1:*/		return 0x821DB754;
		  /* 821DB754h */ case    2:  		/* bc 4, CR0_EQ, 188 */
		/* 821DB754h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821DB810;  }
		/* 821DB754h case    2:*/		return 0x821DB758;
		  /* 821DB758h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821DB758h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DB758h case    3:*/		return 0x821DB75C;
		  /* 821DB75Ch */ case    4:  		/* bc 12, CR0_EQ, 180 */
		/* 821DB75Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x821DB810;  }
		/* 821DB75Ch case    4:*/		return 0x821DB760;
		  /* 821DB760h */ case    5:  		/* lwz R11, <#[R23]> */
		/* 821DB760h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821DB760h case    5:*/		return 0x821DB764;
		  /* 821DB764h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DB764h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DB764h case    6:*/		return 0x821DB768;
		  /* 821DB768h */ case    7:  		/* addi R4, R11, -4 */
		/* 821DB768h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821DB768h case    7:*/		return 0x821DB76C;
		  /* 821DB76Ch */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DB76Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DB76Ch case    8:*/		return 0x821DB770;
		  /* 821DB770h */ case    9:  		/* addi R10, R11, 3 */
		/* 821DB770h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821DB770h case    9:*/		return 0x821DB774;
		  /* 821DB774h */ case   10:  		/* addic. R11, R11, -1 */
		/* 821DB774h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821DB774h case   10:*/		return 0x821DB778;
		  /* 821DB778h */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821DB778h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821DB778h case   11:*/		return 0x821DB77C;
		  /* 821DB77Ch */ case   12:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821DB77Ch case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821DB77Ch case   12:*/		return 0x821DB780;
		  /* 821DB780h */ case   13:  		/* stw R11, <#[R4 + 8]> */
		/* 821DB780h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821DB780h case   13:*/		return 0x821DB784;
		  /* 821DB784h */ case   14:  		/* bc 4, CR0_EQ, 108 */
		/* 821DB784h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821DB7F0;  }
		/* 821DB784h case   14:*/		return 0x821DB788;
		  /* 821DB788h */ case   15:  		/* mr R3, R23 */
		/* 821DB788h case   15:*/		regs.R3 = regs.R23;
		/* 821DB788h case   15:*/		return 0x821DB78C;
		  /* 821DB78Ch */ case   16:  		/* b 48 */
		/* 821DB78Ch case   16:*/		return 0x821DB7BC;
		/* 821DB78Ch case   16:*/		return 0x821DB790;
	}
	return 0x821DB790;
} // Block from 821DB74Ch-821DB790h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821DB790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB790);
		  /* 821DB790h */ case    0:  		/* lwz R11, <#[R24]> */
		/* 821DB790h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821DB790h case    0:*/		return 0x821DB794;
		  /* 821DB794h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DB794h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DB794h case    1:*/		return 0x821DB798;
		  /* 821DB798h */ case    2:  		/* addi R4, R11, -4 */
		/* 821DB798h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821DB798h case    2:*/		return 0x821DB79C;
		  /* 821DB79Ch */ case    3:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DB79Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DB79Ch case    3:*/		return 0x821DB7A0;
		  /* 821DB7A0h */ case    4:  		/* addi R10, R11, 3 */
		/* 821DB7A0h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821DB7A0h case    4:*/		return 0x821DB7A4;
		  /* 821DB7A4h */ case    5:  		/* addic. R11, R11, -1 */
		/* 821DB7A4h case    5:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821DB7A4h case    5:*/		return 0x821DB7A8;
		  /* 821DB7A8h */ case    6:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821DB7A8h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821DB7A8h case    6:*/		return 0x821DB7AC;
		  /* 821DB7ACh */ case    7:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821DB7ACh case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821DB7ACh case    7:*/		return 0x821DB7B0;
		  /* 821DB7B0h */ case    8:  		/* stw R11, <#[R4 + 8]> */
		/* 821DB7B0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821DB7B0h case    8:*/		return 0x821DB7B4;
		  /* 821DB7B4h */ case    9:  		/* bc 4, CR0_EQ, 60 */
		/* 821DB7B4h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821DB7F0;  }
		/* 821DB7B4h case    9:*/		return 0x821DB7B8;
		  /* 821DB7B8h */ case   10:  		/* mr R3, R24 */
		/* 821DB7B8h case   10:*/		regs.R3 = regs.R24;
		/* 821DB7B8h case   10:*/		return 0x821DB7BC;
	}
	return 0x821DB7BC;
} // Block from 821DB790h-821DB7BCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 821DB7BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB7BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB7BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB7BC);
		  /* 821DB7BCh */ case    0:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821DB7BCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821DB7BCh case    0:*/		return 0x821DB7C0;
		  /* 821DB7C0h */ case    1:  		/* lwz R10, <#[R11 + 4]> */
		/* 821DB7C0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DB7C0h case    1:*/		return 0x821DB7C4;
		  /* 821DB7C4h */ case    2:  		/* lwz R9, <#[R11]> */
		/* 821DB7C4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821DB7C4h case    2:*/		return 0x821DB7C8;
		  /* 821DB7C8h */ case    3:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821DB7C8h case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821DB7C8h case    3:*/		return 0x821DB7CC;
		  /* 821DB7CCh */ case    4:  		/* stw R9, <#[R10]> */
		/* 821DB7CCh case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DB7CCh case    4:*/		return 0x821DB7D0;
		  /* 821DB7D0h */ case    5:  		/* lwz R10, <#[R11 + 4]> */
		/* 821DB7D0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DB7D0h case    5:*/		return 0x821DB7D4;
		  /* 821DB7D4h */ case    6:  		/* lwz R11, <#[R11]> */
		/* 821DB7D4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821DB7D4h case    6:*/		return 0x821DB7D8;
		  /* 821DB7D8h */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DB7D8h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DB7D8h case    7:*/		return 0x821DB7DC;
		  /* 821DB7DCh */ case    8:  		/* stw R10, <#[R11]> */
		/* 821DB7DCh case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DB7DCh case    8:*/		return 0x821DB7E0;
		  /* 821DB7E0h */ case    9:  		/* lwz R11, <#[R4 + 12]> */
		/* 821DB7E0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821DB7E0h case    9:*/		return 0x821DB7E4;
		  /* 821DB7E4h */ case   10:  		/* addi R11, R11, 4 */
		/* 821DB7E4h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821DB7E4h case   10:*/		return 0x821DB7E8;
		  /* 821DB7E8h */ case   11:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821DB7E8h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821DB7E8h case   11:*/		return 0x821DB7EC;
		  /* 821DB7ECh */ case   12:  		/* bl -563684 */
		/* 821DB7ECh case   12:*/		regs.LR = 0x821DB7F0; return 0x82151E08;
		/* 821DB7ECh case   12:*/		return 0x821DB7F0;
	}
	return 0x821DB7F0;
} // Block from 821DB7BCh-821DB7F0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821DB7F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB7F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB7F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB7F0);
		  /* 821DB7F0h */ case    0:  		/* lwz R11, <#[R31 + 44]> */
		/* 821DB7F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821DB7F0h case    0:*/		return 0x821DB7F4;
		  /* 821DB7F4h */ case    1:  		/* mr R28, R31 */
		/* 821DB7F4h case    1:*/		regs.R28 = regs.R31;
		/* 821DB7F4h case    1:*/		return 0x821DB7F8;
		  /* 821DB7F8h */ case    2:  		/* cmplw CR6, R11, R22 */
		/* 821DB7F8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 821DB7F8h case    2:*/		return 0x821DB7FC;
		  /* 821DB7FCh */ case    3:  		/* bc 12, CR6_EQ, -196 */
		/* 821DB7FCh case    3:*/		if ( regs.CR[6].eq ) { return 0x821DB738;  }
		/* 821DB7FCh case    3:*/		return 0x821DB800;
		  /* 821DB800h */ case    4:  		/* b -2112 */
		/* 821DB800h case    4:*/		return 0x821DAFC0;
		/* 821DB800h case    4:*/		return 0x821DB804;
	}
	return 0x821DB804;
} // Block from 821DB7F0h-821DB804h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DB804h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB804( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB804) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB804);
		  /* 821DB804h */ case    0:  		/* li R4, 4800 */
		/* 821DB804h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821DB804h case    0:*/		return 0x821DB808;
		  /* 821DB808h */ case    1:  		/* mr R3, R25 */
		/* 821DB808h case    1:*/		regs.R3 = regs.R25;
		/* 821DB808h case    1:*/		return 0x821DB80C;
		  /* 821DB80Ch */ case    2:  		/* bl -563620 */
		/* 821DB80Ch case    2:*/		regs.LR = 0x821DB810; return 0x82151E68;
		/* 821DB80Ch case    2:*/		return 0x821DB810;
	}
	return 0x821DB810;
} // Block from 821DB804h-821DB810h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DB810h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB810);
		  /* 821DB810h */ case    0:  		/* lwz R11, <#[R21]> */
		/* 821DB810h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821DB810h case    0:*/		return 0x821DB814;
		  /* 821DB814h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DB814h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DB814h case    1:*/		return 0x821DB818;
		  /* 821DB818h */ case    2:  		/* bc 4, CR0_EQ, 372 */
		/* 821DB818h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821DB98C;  }
		/* 821DB818h case    2:*/		return 0x821DB81C;
		  /* 821DB81Ch */ case    3:  		/* mr R29, R11 */
		/* 821DB81Ch case    3:*/		regs.R29 = regs.R11;
		/* 821DB81Ch case    3:*/		return 0x821DB820;
		  /* 821DB820h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821DB820h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DB820h case    4:*/		return 0x821DB824;
		  /* 821DB824h */ case    5:  		/* bc 12, CR0_EQ, 360 */
		/* 821DB824h case    5:*/		if ( regs.CR[0].eq ) { return 0x821DB98C;  }
		/* 821DB824h case    5:*/		return 0x821DB828;
		  /* 821DB828h */ case    6:  		/* lwz R11, <#[R29 + 12]> */
		/* 821DB828h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821DB828h case    6:*/		return 0x821DB82C;
		  /* 821DB82Ch */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821DB82Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DB82Ch case    7:*/		return 0x821DB830;
		  /* 821DB830h */ case    8:  		/* bc 12, CR6_EQ, 20 */
		/* 821DB830h case    8:*/		if ( regs.CR[6].eq ) { return 0x821DB844;  }
		/* 821DB830h case    8:*/		return 0x821DB834;
		  /* 821DB834h */ case    9:  		/* lwz R11, <#[R11 + 8]> */
		/* 821DB834h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821DB834h case    9:*/		return 0x821DB838;
		  /* 821DB838h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821DB838h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DB838h case   10:*/		return 0x821DB83C;
		  /* 821DB83Ch */ case   11:  		/* mr R11, R17 */
		/* 821DB83Ch case   11:*/		regs.R11 = regs.R17;
		/* 821DB83Ch case   11:*/		return 0x821DB840;
		  /* 821DB840h */ case   12:  		/* bc 4, CR6_EQ, 8 */
		/* 821DB840h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821DB848;  }
		/* 821DB840h case   12:*/		return 0x821DB844;
	}
	return 0x821DB844;
} // Block from 821DB810h-821DB844h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821DB844h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB844( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB844) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB844);
		  /* 821DB844h */ case    0:  		/* li R11, 0 */
		/* 821DB844h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DB844h case    0:*/		return 0x821DB848;
	}
	return 0x821DB848;
} // Block from 821DB844h-821DB848h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DB848h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB848);
		  /* 821DB848h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DB848h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DB848h case    0:*/		return 0x821DB84C;
		  /* 821DB84Ch */ case    1:  		/* bc 12, CR0_EQ, 292 */
		/* 821DB84Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821DB970;  }
		/* 821DB84Ch case    1:*/		return 0x821DB850;
		  /* 821DB850h */ case    2:  		/* lwz R11, <#[R29 + 36]> */
		/* 821DB850h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 821DB850h case    2:*/		return 0x821DB854;
		  /* 821DB854h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DB854h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DB854h case    3:*/		return 0x821DB858;
		  /* 821DB858h */ case    4:  		/* bc 4, CR0_EQ, 280 */
		/* 821DB858h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821DB970;  }
		/* 821DB858h case    4:*/		return 0x821DB85C;
		  /* 821DB85Ch */ case    5:  		/* lwz R11, <#[R29 + 32]> */
		/* 821DB85Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000020) );
		/* 821DB85Ch case    5:*/		return 0x821DB860;
		  /* 821DB860h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DB860h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DB860h case    6:*/		return 0x821DB864;
		  /* 821DB864h */ case    7:  		/* addic. R30, R11, -40 */
		/* 821DB864h case    7:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R11,0xFFFFFFD8);
		/* 821DB864h case    7:*/		return 0x821DB868;
		  /* 821DB868h */ case    8:  		/* bc 12, CR0_EQ, 264 */
		/* 821DB868h case    8:*/		if ( regs.CR[0].eq ) { return 0x821DB970;  }
		/* 821DB868h case    8:*/		return 0x821DB86C;
		  /* 821DB86Ch */ case    9:  		/* lwz R11, <#[R30 + 8]> */
		/* 821DB86Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821DB86Ch case    9:*/		return 0x821DB870;
		  /* 821DB870h */ case   10:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DB870h case   10:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DB870h case   10:*/		return 0x821DB874;
		  /* 821DB874h */ case   11:  		/* cmplwi CR6, R11, 11520 */
		/* 821DB874h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002D00);
		/* 821DB874h case   11:*/		return 0x821DB878;
		  /* 821DB878h */ case   12:  		/* bc 4, CR6_EQ, 248 */
		/* 821DB878h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821DB970;  }
		/* 821DB878h case   12:*/		return 0x821DB87C;
		  /* 821DB87Ch */ case   13:  		/* lwz R11, <#[R30 + 8]> */
		/* 821DB87Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821DB87Ch case   13:*/		return 0x821DB880;
		  /* 821DB880h */ case   14:  		/* mr R3, R25 */
		/* 821DB880h case   14:*/		regs.R3 = regs.R25;
		/* 821DB880h case   14:*/		return 0x821DB884;
		  /* 821DB884h */ case   15:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821DB884h case   15:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821DB884h case   15:*/		return 0x821DB888;
		  /* 821DB888h */ case   16:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821DB888h case   16:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821DB888h case   16:*/		return 0x821DB88C;
		  /* 821DB88Ch */ case   17:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821DB88Ch case   17:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821DB88Ch case   17:*/		return 0x821DB890;
		  /* 821DB890h */ case   18:  		/* bl -488544 */
		/* 821DB890h case   18:*/		regs.LR = 0x821DB894; return 0x82164430;
		/* 821DB890h case   18:*/		return 0x821DB894;
		  /* 821DB894h */ case   19:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821DB894h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821DB894h case   19:*/		return 0x821DB898;
		  /* 821DB898h */ case   20:  		/* addi R10, R30, -16 */
		/* 821DB898h case   20:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0xFFFFFFF0);
		/* 821DB898h case   20:*/		return 0x821DB89C;
		  /* 821DB89Ch */ case   21:  		/* add R31, R3, R10 */
		/* 821DB89Ch case   21:*/		cpu::op::add<0>(regs,&regs.R31,regs.R3,regs.R10);
		/* 821DB89Ch case   21:*/		return 0x821DB8A0;
		  /* 821DB8A0h */ case   22:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DB8A0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DB8A0h case   22:*/		return 0x821DB8A4;
		  /* 821DB8A4h */ case   23:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DB8A4h case   23:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DB8A4h case   23:*/		return 0x821DB8A8;
		  /* 821DB8A8h */ case   24:  		/* lwz R9, <#[R31]> */
		/* 821DB8A8h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 821DB8A8h case   24:*/		return 0x821DB8AC;
		  /* 821DB8ACh */ case   25:  		/* addic R10, R10, -1 */
		/* 821DB8ACh case   25:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821DB8ACh case   25:*/		return 0x821DB8B0;
		  /* 821DB8B0h */ case   26:  		/* subfe R10, R10, R10 */
		/* 821DB8B0h case   26:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821DB8B0h case   26:*/		return 0x821DB8B4;
		  /* 821DB8B4h */ case   27:  		/* and R11, R10, R11 */
		/* 821DB8B4h case   27:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821DB8B4h case   27:*/		return 0x821DB8B8;
		  /* 821DB8B8h */ case   28:  		/* cmplw CR6, R9, R11 */
		/* 821DB8B8h case   28:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821DB8B8h case   28:*/		return 0x821DB8BC;
		  /* 821DB8BCh */ case   29:  		/* bc 4, CR6_EQ, 180 */
		/* 821DB8BCh case   29:*/		if ( !regs.CR[6].eq ) { return 0x821DB970;  }
		/* 821DB8BCh case   29:*/		return 0x821DB8C0;
		  /* 821DB8C0h */ case   30:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DB8C0h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DB8C0h case   30:*/		return 0x821DB8C4;
		  /* 821DB8C4h */ case   31:  		/* rlwinm. R10, R11, 0, 30, 31 */
		/* 821DB8C4h case   31:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R10,regs.R11);
		/* 821DB8C4h case   31:*/		return 0x821DB8C8;
		  /* 821DB8C8h */ case   32:  		/* bc 4, CR0_EQ, 24 */
		/* 821DB8C8h case   32:*/		if ( !regs.CR[0].eq ) { return 0x821DB8E0;  }
		/* 821DB8C8h case   32:*/		return 0x821DB8CC;
		  /* 821DB8CCh */ case   33:  		/* rlwinm R11, R11, 30, 28, 31 */
		/* 821DB8CCh case   33:*/		cpu::op::rlwinm<0,30,28,31>(regs,&regs.R11,regs.R11);
		/* 821DB8CCh case   33:*/		return 0x821DB8D0;
		  /* 821DB8D0h */ case   34:  		/* cmpwi CR6, R11, 8 */
		/* 821DB8D0h case   34:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000008);
		/* 821DB8D0h case   34:*/		return 0x821DB8D4;
		  /* 821DB8D4h */ case   35:  		/* bc 12, CR6_LT, 12 */
		/* 821DB8D4h case   35:*/		if ( regs.CR[6].lt ) { return 0x821DB8E0;  }
		/* 821DB8D4h case   35:*/		return 0x821DB8D8;
		  /* 821DB8D8h */ case   36:  		/* cmpwi CR6, R11, 9 */
		/* 821DB8D8h case   36:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000009);
		/* 821DB8D8h case   36:*/		return 0x821DB8DC;
		  /* 821DB8DCh */ case   37:  		/* bc 4, CR6_GT, 148 */
		/* 821DB8DCh case   37:*/		if ( !regs.CR[6].gt ) { return 0x821DB970;  }
		/* 821DB8DCh case   37:*/		return 0x821DB8E0;
	}
	return 0x821DB8E0;
} // Block from 821DB848h-821DB8E0h (38 instructions)

//////////////////////////////////////////////////////
// Block at 821DB8E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB8E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB8E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB8E0);
		  /* 821DB8E0h */ case    0:  		/* lwz R11, <#[R30 + 44]> */
		/* 821DB8E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 821DB8E0h case    0:*/		return 0x821DB8E4;
		  /* 821DB8E4h */ case    1:  		/* mr R4, R25 */
		/* 821DB8E4h case    1:*/		regs.R4 = regs.R25;
		/* 821DB8E4h case    1:*/		return 0x821DB8E8;
		  /* 821DB8E8h */ case    2:  		/* lwz R3, <#[R11 + 12]> */
		/* 821DB8E8h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DB8E8h case    2:*/		return 0x821DB8EC;
		  /* 821DB8ECh */ case    3:  		/* bl 317708 */
		/* 821DB8ECh case    3:*/		regs.LR = 0x821DB8F0; return 0x822291F8;
		/* 821DB8ECh case    3:*/		return 0x821DB8F0;
		  /* 821DB8F0h */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 821DB8F0h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821DB8F0h case    4:*/		return 0x821DB8F4;
		  /* 821DB8F4h */ case    5:  		/* bc 12, CR0_EQ, 124 */
		/* 821DB8F4h case    5:*/		if ( regs.CR[0].eq ) { return 0x821DB970;  }
		/* 821DB8F4h case    5:*/		return 0x821DB8F8;
		  /* 821DB8F8h */ case    6:  		/* lwz R11, <#[R29 + 12]> */
		/* 821DB8F8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821DB8F8h case    6:*/		return 0x821DB8FC;
		  /* 821DB8FCh */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821DB8FCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DB8FCh case    7:*/		return 0x821DB900;
		  /* 821DB900h */ case    8:  		/* bc 12, CR6_EQ, 28 */
		/* 821DB900h case    8:*/		if ( regs.CR[6].eq ) { return 0x821DB91C;  }
		/* 821DB900h case    8:*/		return 0x821DB904;
		  /* 821DB904h */ case    9:  		/* lwz R8, <#[R11]> */
		/* 821DB904h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821DB904h case    9:*/		return 0x821DB908;
		  /* 821DB908h */ case   10:  		/* lwz R10, <#[R31]> */
		/* 821DB908h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821DB908h case   10:*/		return 0x821DB90C;
		  /* 821DB90Ch */ case   11:  		/* cmplw CR6, R8, R10 */
		/* 821DB90Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R10);
		/* 821DB90Ch case   11:*/		return 0x821DB910;
		  /* 821DB910h */ case   12:  		/* bc 4, CR6_EQ, 16 */
		/* 821DB910h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821DB920;  }
		/* 821DB910h case   12:*/		return 0x821DB914;
		  /* 821DB914h */ case   13:  		/* lwz R11, <#[R11 + 8]> */
		/* 821DB914h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821DB914h case   13:*/		return 0x821DB918;
		  /* 821DB918h */ case   14:  		/* b -28 */
		/* 821DB918h case   14:*/		return 0x821DB8FC;
		/* 821DB918h case   14:*/		return 0x821DB91C;
	}
	return 0x821DB91C;
} // Block from 821DB8E0h-821DB91Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821DB91Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB91C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB91C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB91C);
		  /* 821DB91Ch */ case    0:  		/* li R8, 0 */
		/* 821DB91Ch case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821DB91Ch case    0:*/		return 0x821DB920;
	}
	return 0x821DB920;
} // Block from 821DB91Ch-821DB920h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DB920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB920);
		  /* 821DB920h */ case    0:  		/* lwz R11, <#[R30 + 44]> */
		/* 821DB920h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 821DB920h case    0:*/		return 0x821DB924;
		  /* 821DB924h */ case    1:  		/* lwz R10, <#[R11 + 12]> */
		/* 821DB924h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DB924h case    1:*/		return 0x821DB928;
		  /* 821DB928h */ case    2:  		/* addi R10, R10, 4 */
		/* 821DB928h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821DB928h case    2:*/		return 0x821DB92C;
		  /* 821DB92Ch */ case    3:  		/* lwz R9, <#[R10]> */
		/* 821DB92Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DB92Ch case    3:*/		return 0x821DB930;
		  /* 821DB930h */ case    4:  		/* b 12 */
		/* 821DB930h case    4:*/		return 0x821DB93C;
		/* 821DB930h case    4:*/		return 0x821DB934;
		  /* 821DB934h */ case    5:  		/* addi R10, R9, 8 */
		/* 821DB934h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821DB934h case    5:*/		return 0x821DB938;
		  /* 821DB938h */ case    6:  		/* lwz R9, <#[R9 + 8]> */
		/* 821DB938h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821DB938h case    6:*/		return 0x821DB93C;
	}
	return 0x821DB93C;
} // Block from 821DB920h-821DB93Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DB93Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB93C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB93C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB93C);
		  /* 821DB93Ch */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821DB93Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821DB93Ch case    0:*/		return 0x821DB940;
		  /* 821DB940h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821DB940h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DB934;  }
		/* 821DB940h case    1:*/		return 0x821DB944;
		  /* 821DB944h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821DB944h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821DB944h case    2:*/		return 0x821DB948;
		  /* 821DB948h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821DB948h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DB948h case    3:*/		return 0x821DB94C;
		  /* 821DB94Ch */ case    4:  		/* lwz R10, <#[R3 + 4]> */
		/* 821DB94Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821DB94Ch case    4:*/		return 0x821DB950;
		  /* 821DB950h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821DB950h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821DB950h case    5:*/		return 0x821DB954;
		  /* 821DB954h */ case    6:  		/* stw R11, <#[R3 + 4]> */
		/* 821DB954h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821DB954h case    6:*/		return 0x821DB958;
		  /* 821DB958h */ case    7:  		/* stw R3, <#[R11 + 12]> */
		/* 821DB958h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DB958h case    7:*/		return 0x821DB95C;
		  /* 821DB95Ch */ case    8:  		/* lwz R11, <#[R31 + 12]> */
		/* 821DB95Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821DB95Ch case    8:*/		return 0x821DB960;
		  /* 821DB960h */ case    9:  		/* nor R10, R11, R11 */
		/* 821DB960h case    9:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R11,regs.R11);
		/* 821DB960h case    9:*/		return 0x821DB964;
		  /* 821DB964h */ case   10:  		/* rlwimi R10, R11, 0, 31, 29 */
		/* 821DB964h case   10:*/		cpu::op::rlwimi<0,0,31,29>(regs,&regs.R10,regs.R11);
		/* 821DB964h case   10:*/		return 0x821DB968;
		  /* 821DB968h */ case   11:  		/* stw R8, <#[R31]> */
		/* 821DB968h case   11:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 821DB968h case   11:*/		return 0x821DB96C;
		  /* 821DB96Ch */ case   12:  		/* stw R10, <#[R31 + 12]> */
		/* 821DB96Ch case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821DB96Ch case   12:*/		return 0x821DB970;
	}
	return 0x821DB970;
} // Block from 821DB93Ch-821DB970h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821DB970h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB970);
		  /* 821DB970h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821DB970h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821DB970h case    0:*/		return 0x821DB974;
		  /* 821DB974h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DB974h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DB974h case    1:*/		return 0x821DB978;
		  /* 821DB978h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DB978h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DB978h case    2:*/		return 0x821DB97C;
		  /* 821DB97Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DB97Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DB98C;  }
		/* 821DB97Ch case    3:*/		return 0x821DB980;
		  /* 821DB980h */ case    4:  		/* mr R29, R11 */
		/* 821DB980h case    4:*/		regs.R29 = regs.R11;
		/* 821DB980h case    4:*/		return 0x821DB984;
		  /* 821DB984h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DB984h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DB984h case    5:*/		return 0x821DB988;
		  /* 821DB988h */ case    6:  		/* bc 4, CR6_EQ, -352 */
		/* 821DB988h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DB828;  }
		/* 821DB988h case    6:*/		return 0x821DB98C;
	}
	return 0x821DB98C;
} // Block from 821DB970h-821DB98Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DB98Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB98C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB98C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB98C);
		  /* 821DB98Ch */ case    0:  		/* addi R1, R1, 208 */
		/* 821DB98Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 821DB98Ch case    0:*/		return 0x821DB990;
		  /* 821DB990h */ case    1:  		/* b -1353492 */
		/* 821DB990h case    1:*/		return 0x8209127C;
		/* 821DB990h case    1:*/		return 0x821DB994;
		  /* 821DB994h */ case    2:  		/* nop */
		/* 821DB994h case    2:*/		cpu::op::nop();
		/* 821DB994h case    2:*/		return 0x821DB998;
	}
	return 0x821DB998;
} // Block from 821DB98Ch-821DB998h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DB998h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB998);
		  /* 821DB998h */ case    0:  		/* mfspr R12, LR */
		/* 821DB998h case    0:*/		regs.R12 = regs.LR;
		/* 821DB998h case    0:*/		return 0x821DB99C;
		  /* 821DB99Ch */ case    1:  		/* bl -1353560 */
		/* 821DB99Ch case    1:*/		regs.LR = 0x821DB9A0; return 0x82091244;
		/* 821DB99Ch case    1:*/		return 0x821DB9A0;
		  /* 821DB9A0h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821DB9A0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821DB9A0h case    2:*/		return 0x821DB9A4;
		  /* 821DB9A4h */ case    3:  		/* mr R24, R3 */
		/* 821DB9A4h case    3:*/		regs.R24 = regs.R3;
		/* 821DB9A4h case    3:*/		return 0x821DB9A8;
		  /* 821DB9A8h */ case    4:  		/* li R23, 0 */
		/* 821DB9A8h case    4:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821DB9A8h case    4:*/		return 0x821DB9AC;
		  /* 821DB9ACh */ case    5:  		/* bl -91444 */
		/* 821DB9ACh case    5:*/		regs.LR = 0x821DB9B0; return 0x821C5478;
		/* 821DB9ACh case    5:*/		return 0x821DB9B0;
		  /* 821DB9B0h */ case    6:  		/* lwz R11, <#[R24 + 4]> */
		/* 821DB9B0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 821DB9B0h case    6:*/		return 0x821DB9B4;
		  /* 821DB9B4h */ case    7:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DB9B4h case    7:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DB9B4h case    7:*/		return 0x821DB9B8;
		  /* 821DB9B8h */ case    8:  		/* addic R10, R10, -1 */
		/* 821DB9B8h case    8:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821DB9B8h case    8:*/		return 0x821DB9BC;
		  /* 821DB9BCh */ case    9:  		/* subfe R10, R10, R10 */
		/* 821DB9BCh case    9:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821DB9BCh case    9:*/		return 0x821DB9C0;
		  /* 821DB9C0h */ case   10:  		/* and R28, R10, R11 */
		/* 821DB9C0h case   10:*/		cpu::op::and<0>(regs,&regs.R28,regs.R10,regs.R11);
		/* 821DB9C0h case   10:*/		return 0x821DB9C4;
		  /* 821DB9C4h */ case   11:  		/* cmplwi CR6, R28, 0 */
		/* 821DB9C4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821DB9C4h case   11:*/		return 0x821DB9C8;
		  /* 821DB9C8h */ case   12:  		/* bc 12, CR6_EQ, 292 */
		/* 821DB9C8h case   12:*/		if ( regs.CR[6].eq ) { return 0x821DBAEC;  }
		/* 821DB9C8h case   12:*/		return 0x821DB9CC;
		  /* 821DB9CCh */ case   13:  		/* lwz R11, <#[R28 + 48]> */
		/* 821DB9CCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000030) );
		/* 821DB9CCh case   13:*/		return 0x821DB9D0;
		  /* 821DB9D0h */ case   14:  		/* rlwinm. R11, R11, 13, 31, 31 */
		/* 821DB9D0h case   14:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R11);
		/* 821DB9D0h case   14:*/		return 0x821DB9D4;
		  /* 821DB9D4h */ case   15:  		/* bc 12, CR0_EQ, 244 */
		/* 821DB9D4h case   15:*/		if ( regs.CR[0].eq ) { return 0x821DBAC8;  }
		/* 821DB9D4h case   15:*/		return 0x821DB9D8;
		  /* 821DB9D8h */ case   16:  		/* lwz R11, <#[R28 + 8]> */
		/* 821DB9D8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821DB9D8h case   16:*/		return 0x821DB9DC;
		  /* 821DB9DCh */ case   17:  		/* li R26, 0 */
		/* 821DB9DCh case   17:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821DB9DCh case   17:*/		return 0x821DB9E0;
		  /* 821DB9E0h */ case   18:  		/* li R25, 0 */
		/* 821DB9E0h case   18:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821DB9E0h case   18:*/		return 0x821DB9E4;
		  /* 821DB9E4h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 821DB9E4h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DB9E4h case   19:*/		return 0x821DB9E8;
		  /* 821DB9E8h */ case   20:  		/* bc 12, CR6_EQ, 16 */
		/* 821DB9E8h case   20:*/		if ( regs.CR[6].eq ) { return 0x821DB9F8;  }
		/* 821DB9E8h case   20:*/		return 0x821DB9EC;
		  /* 821DB9ECh */ case   21:  		/* lwz R11, <#[R11 + 12]> */
		/* 821DB9ECh case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DB9ECh case   21:*/		return 0x821DB9F0;
		  /* 821DB9F0h */ case   22:  		/* addi R26, R26, 1 */
		/* 821DB9F0h case   22:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821DB9F0h case   22:*/		return 0x821DB9F4;
		  /* 821DB9F4h */ case   23:  		/* b -16 */
		/* 821DB9F4h case   23:*/		return 0x821DB9E4;
		/* 821DB9F4h case   23:*/		return 0x821DB9F8;
	}
	return 0x821DB9F8;
} // Block from 821DB998h-821DB9F8h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821DB9F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DB9F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DB9F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DB9F8);
		  /* 821DB9F8h */ case    0:  		/* li R29, 1 */
		/* 821DB9F8h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 821DB9F8h case    0:*/		return 0x821DB9FC;
		  /* 821DB9FCh */ case    1:  		/* lwz R27, <#[R28 + 8]> */
		/* 821DB9FCh case    1:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R28 + 0x00000008) );
		/* 821DB9FCh case    1:*/		return 0x821DBA00;
		  /* 821DBA00h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 821DBA00h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821DBA00h case    2:*/		return 0x821DBA04;
		  /* 821DBA04h */ case    3:  		/* bc 12, CR6_EQ, 188 */
		/* 821DBA04h case    3:*/		if ( regs.CR[6].eq ) { return 0x821DBAC0;  }
		/* 821DBA04h case    3:*/		return 0x821DBA08;
		  /* 821DBA08h */ case    4:  		/* lwz R30, <#[R27 + 4]> */
		/* 821DBA08h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R27 + 0x00000004) );
		/* 821DBA08h case    4:*/		return 0x821DBA0C;
		  /* 821DBA0Ch */ case    5:  		/* lwz R11, <#[R30 + 36]> */
		/* 821DBA0Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821DBA0Ch case    5:*/		return 0x821DBA10;
		  /* 821DBA10h */ case    6:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DBA10h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DBA10h case    6:*/		return 0x821DBA14;
		  /* 821DBA14h */ case    7:  		/* bc 12, CR0_EQ, 12 */
		/* 821DBA14h case    7:*/		if ( regs.CR[0].eq ) { return 0x821DBA20;  }
		/* 821DBA14h case    7:*/		return 0x821DBA18;
		  /* 821DBA18h */ case    8:  		/* li R31, 0 */
		/* 821DBA18h case    8:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821DBA18h case    8:*/		return 0x821DBA1C;
		  /* 821DBA1Ch */ case    9:  		/* b 16 */
		/* 821DBA1Ch case    9:*/		return 0x821DBA2C;
		/* 821DBA1Ch case    9:*/		return 0x821DBA20;
	}
	return 0x821DBA20;
} // Block from 821DB9F8h-821DBA20h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DBA20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBA20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBA20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBA20);
		  /* 821DBA20h */ case    0:  		/* lwz R11, <#[R30 + 32]> */
		/* 821DBA20h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 821DBA20h case    0:*/		return 0x821DBA24;
		  /* 821DBA24h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DBA24h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DBA24h case    1:*/		return 0x821DBA28;
		  /* 821DBA28h */ case    2:  		/* addi R31, R11, -40 */
		/* 821DBA28h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821DBA28h case    2:*/		return 0x821DBA2C;
	}
	return 0x821DBA2C;
} // Block from 821DBA20h-821DBA2Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DBA2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBA2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBA2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBA2C);
		  /* 821DBA2Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DBA2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DBA2Ch case    0:*/		return 0x821DBA30;
		  /* 821DBA30h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DBA30h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DBA30h case    1:*/		return 0x821DBA34;
		  /* 821DBA34h */ case    2:  		/* cmplwi CR6, R11, 11136 */
		/* 821DBA34h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002B80);
		/* 821DBA34h case    2:*/		return 0x821DBA38;
		  /* 821DBA38h */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 821DBA38h case    3:*/		if ( regs.CR[6].eq ) { return 0x821DBA50;  }
		/* 821DBA38h case    3:*/		return 0x821DBA3C;
		  /* 821DBA3Ch */ case    4:  		/* mr R4, R24 */
		/* 821DBA3Ch case    4:*/		regs.R4 = regs.R24;
		/* 821DBA3Ch case    4:*/		return 0x821DBA40;
		  /* 821DBA40h */ case    5:  		/* mr R3, R31 */
		/* 821DBA40h case    5:*/		regs.R3 = regs.R31;
		/* 821DBA40h case    5:*/		return 0x821DBA44;
		  /* 821DBA44h */ case    6:  		/* bl -488124 */
		/* 821DBA44h case    6:*/		regs.LR = 0x821DBA48; return 0x82164788;
		/* 821DBA44h case    6:*/		return 0x821DBA48;
		  /* 821DBA48h */ case    7:  		/* cmpwi CR6, R3, 5 */
		/* 821DBA48h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000005);
		/* 821DBA48h case    7:*/		return 0x821DBA4C;
		  /* 821DBA4Ch */ case    8:  		/* bc 4, CR6_EQ, 16 */
		/* 821DBA4Ch case    8:*/		if ( !regs.CR[6].eq ) { return 0x821DBA5C;  }
		/* 821DBA4Ch case    8:*/		return 0x821DBA50;
	}
	return 0x821DBA50;
} // Block from 821DBA2Ch-821DBA50h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821DBA50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBA50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBA50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBA50);
		  /* 821DBA50h */ case    0:  		/* lwz R27, <#[R27 + 12]> */
		/* 821DBA50h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R27 + 0x0000000C) );
		/* 821DBA50h case    0:*/		return 0x821DBA54;
		  /* 821DBA54h */ case    1:  		/* addi R23, R23, 1 */
		/* 821DBA54h case    1:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 821DBA54h case    1:*/		return 0x821DBA58;
		  /* 821DBA58h */ case    2:  		/* b -88 */
		/* 821DBA58h case    2:*/		return 0x821DBA00;
		/* 821DBA58h case    2:*/		return 0x821DBA5C;
	}
	return 0x821DBA5C;
} // Block from 821DBA50h-821DBA5Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DBA5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBA5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBA5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBA5C);
		  /* 821DBA5Ch */ case    0:  		/* addi R25, R25, 1 */
		/* 821DBA5Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 821DBA5Ch case    0:*/		return 0x821DBA60;
		  /* 821DBA60h */ case    1:  		/* cmplw CR6, R29, R26 */
		/* 821DBA60h case    1:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R26);
		/* 821DBA60h case    1:*/		return 0x821DBA64;
		  /* 821DBA64h */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 821DBA64h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DBA84;  }
		/* 821DBA64h case    2:*/		return 0x821DBA68;
		  /* 821DBA68h */ case    3:  		/* mr R6, R31 */
		/* 821DBA68h case    3:*/		regs.R6 = regs.R31;
		/* 821DBA68h case    3:*/		return 0x821DBA6C;
		  /* 821DBA6Ch */ case    4:  		/* mr R5, R28 */
		/* 821DBA6Ch case    4:*/		regs.R5 = regs.R28;
		/* 821DBA6Ch case    4:*/		return 0x821DBA70;
		  /* 821DBA70h */ case    5:  		/* mr R4, R30 */
		/* 821DBA70h case    5:*/		regs.R4 = regs.R30;
		/* 821DBA70h case    5:*/		return 0x821DBA74;
		  /* 821DBA74h */ case    6:  		/* mr R3, R24 */
		/* 821DBA74h case    6:*/		regs.R3 = regs.R24;
		/* 821DBA74h case    6:*/		return 0x821DBA78;
		  /* 821DBA78h */ case    7:  		/* bl -46552 */
		/* 821DBA78h case    7:*/		regs.LR = 0x821DBA7C; return 0x821D04A0;
		/* 821DBA78h case    7:*/		return 0x821DBA7C;
		  /* 821DBA7Ch */ case    8:  		/* addi R29, R29, 1 */
		/* 821DBA7Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821DBA7Ch case    8:*/		return 0x821DBA80;
		  /* 821DBA80h */ case    9:  		/* b -132 */
		/* 821DBA80h case    9:*/		return 0x821DB9FC;
		/* 821DBA80h case    9:*/		return 0x821DBA84;
	}
	return 0x821DBA84;
} // Block from 821DBA5Ch-821DBA84h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DBA84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBA84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBA84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBA84);
		  /* 821DBA84h */ case    0:  		/* lwz R11, <#[R30 + 12]> */
		/* 821DBA84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821DBA84h case    0:*/		return 0x821DBA88;
		  /* 821DBA88h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DBA88h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DBA88h case    1:*/		return 0x821DBA8C;
		  /* 821DBA8Ch */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 821DBA8Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821DBAA4;  }
		/* 821DBA8Ch case    2:*/		return 0x821DBA90;
		  /* 821DBA90h */ case    3:  		/* lwz R7, <#[R11]> */
		/* 821DBA90h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821DBA90h case    3:*/		return 0x821DBA94;
		  /* 821DBA94h */ case    4:  		/* cmplw CR6, R7, R28 */
		/* 821DBA94h case    4:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R28);
		/* 821DBA94h case    4:*/		return 0x821DBA98;
		  /* 821DBA98h */ case    5:  		/* bc 4, CR6_EQ, 16 */
		/* 821DBA98h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821DBAA8;  }
		/* 821DBA98h case    5:*/		return 0x821DBA9C;
		  /* 821DBA9Ch */ case    6:  		/* lwz R11, <#[R11 + 8]> */
		/* 821DBA9Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821DBA9Ch case    6:*/		return 0x821DBAA0;
		  /* 821DBAA0h */ case    7:  		/* b -24 */
		/* 821DBAA0h case    7:*/		return 0x821DBA88;
		/* 821DBAA0h case    7:*/		return 0x821DBAA4;
	}
	return 0x821DBAA4;
} // Block from 821DBA84h-821DBAA4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821DBAA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBAA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBAA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBAA4);
		  /* 821DBAA4h */ case    0:  		/* li R7, 0 */
		/* 821DBAA4h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821DBAA4h case    0:*/		return 0x821DBAA8;
	}
	return 0x821DBAA8;
} // Block from 821DBAA4h-821DBAA8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DBAA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBAA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBAA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBAA8);
		  /* 821DBAA8h */ case    0:  		/* li R8, 0 */
		/* 821DBAA8h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821DBAA8h case    0:*/		return 0x821DBAAC;
		  /* 821DBAACh */ case    1:  		/* mr R6, R31 */
		/* 821DBAACh case    1:*/		regs.R6 = regs.R31;
		/* 821DBAACh case    1:*/		return 0x821DBAB0;
		  /* 821DBAB0h */ case    2:  		/* mr R5, R28 */
		/* 821DBAB0h case    2:*/		regs.R5 = regs.R28;
		/* 821DBAB0h case    2:*/		return 0x821DBAB4;
		  /* 821DBAB4h */ case    3:  		/* mr R4, R30 */
		/* 821DBAB4h case    3:*/		regs.R4 = regs.R30;
		/* 821DBAB4h case    3:*/		return 0x821DBAB8;
		  /* 821DBAB8h */ case    4:  		/* mr R3, R24 */
		/* 821DBAB8h case    4:*/		regs.R3 = regs.R24;
		/* 821DBAB8h case    4:*/		return 0x821DBABC;
		  /* 821DBABCh */ case    5:  		/* bl -58676 */
		/* 821DBABCh case    5:*/		regs.LR = 0x821DBAC0; return 0x821CD588;
		/* 821DBABCh case    5:*/		return 0x821DBAC0;
	}
	return 0x821DBAC0;
} // Block from 821DBAA8h-821DBAC0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DBAC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBAC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBAC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBAC0);
		  /* 821DBAC0h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 821DBAC0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821DBAC0h case    0:*/		return 0x821DBAC4;
		  /* 821DBAC4h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 821DBAC4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DBAD4;  }
		/* 821DBAC4h case    1:*/		return 0x821DBAC8;
	}
	return 0x821DBAC8;
} // Block from 821DBAC0h-821DBAC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DBAC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBAC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBAC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBAC8);
		  /* 821DBAC8h */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 821DBAC8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 821DBAC8h case    0:*/		return 0x821DBACC;
		  /* 821DBACCh */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DBACCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DBACCh case    1:*/		return 0x821DBAD0;
		  /* 821DBAD0h */ case    2:  		/* b -284 */
		/* 821DBAD0h case    2:*/		return 0x821DB9B4;
		/* 821DBAD0h case    2:*/		return 0x821DBAD4;
	}
	return 0x821DBAD4;
} // Block from 821DBAC8h-821DBAD4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DBAD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBAD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBAD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBAD4);
		  /* 821DBAD4h */ case    0:  		/* mr R3, R24 */
		/* 821DBAD4h case    0:*/		regs.R3 = regs.R24;
		/* 821DBAD4h case    0:*/		return 0x821DBAD8;
		  /* 821DBAD8h */ case    1:  		/* bl -72096 */
		/* 821DBAD8h case    1:*/		regs.LR = 0x821DBADC; return 0x821CA138;
		/* 821DBAD8h case    1:*/		return 0x821DBADC;
		  /* 821DBADCh */ case    2:  		/* li R4, 1 */
		/* 821DBADCh case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821DBADCh case    2:*/		return 0x821DBAE0;
		  /* 821DBAE0h */ case    3:  		/* mr R3, R24 */
		/* 821DBAE0h case    3:*/		regs.R3 = regs.R24;
		/* 821DBAE0h case    3:*/		return 0x821DBAE4;
		  /* 821DBAE4h */ case    4:  		/* bl -8812 */
		/* 821DBAE4h case    4:*/		regs.LR = 0x821DBAE8; return 0x821D9878;
		/* 821DBAE4h case    4:*/		return 0x821DBAE8;
		  /* 821DBAE8h */ case    5:  		/* b -312 */
		/* 821DBAE8h case    5:*/		return 0x821DB9B0;
		/* 821DBAE8h case    5:*/		return 0x821DBAEC;
	}
	return 0x821DBAEC;
} // Block from 821DBAD4h-821DBAECh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DBAECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBAEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBAEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBAEC);
		  /* 821DBAECh */ case    0:  		/* lwz R11, <#[R24 + 40]> */
		/* 821DBAECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000028) );
		/* 821DBAECh case    0:*/		return 0x821DBAF0;
		  /* 821DBAF0h */ case    1:  		/* rlwinm. R11, R11, 0, 24, 24 */
		/* 821DBAF0h case    1:*/		cpu::op::rlwinm<1,0,24,24>(regs,&regs.R11,regs.R11);
		/* 821DBAF0h case    1:*/		return 0x821DBAF4;
		  /* 821DBAF4h */ case    2:  		/* bc 12, CR0_EQ, 784 */
		/* 821DBAF4h case    2:*/		if ( regs.CR[0].eq ) { return 0x821DBE04;  }
		/* 821DBAF4h case    2:*/		return 0x821DBAF8;
		  /* 821DBAF8h */ case    3:  		/* lwz R11, <#[R24 + 4]> */
		/* 821DBAF8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 821DBAF8h case    3:*/		return 0x821DBAFC;
		  /* 821DBAFCh */ case    4:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DBAFCh case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DBAFCh case    4:*/		return 0x821DBB00;
		  /* 821DBB00h */ case    5:  		/* bc 4, CR0_EQ, 772 */
		/* 821DBB00h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821DBE04;  }
		/* 821DBB00h case    5:*/		return 0x821DBB04;
		  /* 821DBB04h */ case    6:  		/* mr R25, R11 */
		/* 821DBB04h case    6:*/		regs.R25 = regs.R11;
		/* 821DBB04h case    6:*/		return 0x821DBB08;
		  /* 821DBB08h */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 821DBB08h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DBB08h case    7:*/		return 0x821DBB0C;
		  /* 821DBB0Ch */ case    8:  		/* bc 12, CR0_EQ, 760 */
		/* 821DBB0Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x821DBE04;  }
		/* 821DBB0Ch case    8:*/		return 0x821DBB10;
		  /* 821DBB10h */ case    9:  		/* lwz R11, <#[R25 + 28]> */
		/* 821DBB10h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000001C) );
		/* 821DBB10h case    9:*/		return 0x821DBB14;
		  /* 821DBB14h */ case   10:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DBB14h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DBB14h case   10:*/		return 0x821DBB18;
		  /* 821DBB18h */ case   11:  		/* bc 4, CR0_EQ, 720 */
		/* 821DBB18h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821DBDE8;  }
		/* 821DBB18h case   11:*/		return 0x821DBB1C;
		  /* 821DBB1Ch */ case   12:  		/* mr R26, R11 */
		/* 821DBB1Ch case   12:*/		regs.R26 = regs.R11;
		/* 821DBB1Ch case   12:*/		return 0x821DBB20;
		  /* 821DBB20h */ case   13:  		/* cmplwi CR0, R11, 0 */
		/* 821DBB20h case   13:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DBB20h case   13:*/		return 0x821DBB24;
		  /* 821DBB24h */ case   14:  		/* bc 12, CR0_EQ, 708 */
		/* 821DBB24h case   14:*/		if ( regs.CR[0].eq ) { return 0x821DBDE8;  }
		/* 821DBB24h case   14:*/		return 0x821DBB28;
		  /* 821DBB28h */ case   15:  		/* mr R3, R26 */
		/* 821DBB28h case   15:*/		regs.R3 = regs.R26;
		/* 821DBB28h case   15:*/		return 0x821DBB2C;
		  /* 821DBB2Ch */ case   16:  		/* bl -123380 */
		/* 821DBB2Ch case   16:*/		regs.LR = 0x821DBB30; return 0x821BD938;
		/* 821DBB2Ch case   16:*/		return 0x821DBB30;
		  /* 821DBB30h */ case   17:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821DBB30h case   17:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821DBB30h case   17:*/		return 0x821DBB34;
		  /* 821DBB34h */ case   18:  		/* bc 12, CR0_EQ, 664 */
		/* 821DBB34h case   18:*/		if ( regs.CR[0].eq ) { return 0x821DBDCC;  }
		/* 821DBB34h case   18:*/		return 0x821DBB38;
		  /* 821DBB38h */ case   19:  		/* lwz R11, <#[R26 + 8]> */
		/* 821DBB38h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821DBB38h case   19:*/		return 0x821DBB3C;
		  /* 821DBB3Ch */ case   20:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821DBB3Ch case   20:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821DBB3Ch case   20:*/		return 0x821DBB40;
		  /* 821DBB40h */ case   21:  		/* cmplwi CR6, R10, 12288 */
		/* 821DBB40h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003000);
		/* 821DBB40h case   21:*/		return 0x821DBB44;
		  /* 821DBB44h */ case   22:  		/* bc 4, CR6_EQ, 24 */
		/* 821DBB44h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821DBB5C;  }
		/* 821DBB44h case   22:*/		return 0x821DBB48;
		  /* 821DBB48h */ case   23:  		/* rlwinm R11, R11, 0, 10, 12 */
		/* 821DBB48h case   23:*/		cpu::op::rlwinm<0,0,10,12>(regs,&regs.R11,regs.R11);
		/* 821DBB48h case   23:*/		return 0x821DBB4C;
		  /* 821DBB4Ch */ case   24:  		/* lis R10, 8 */
		/* 821DBB4Ch case   24:*/		cpu::op::lis<0>(regs,&regs.R10,0x8);
		/* 821DBB4Ch case   24:*/		return 0x821DBB50;
		  /* 821DBB50h */ case   25:  		/* cmplw CR6, R11, R10 */
		/* 821DBB50h case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821DBB50h case   25:*/		return 0x821DBB54;
		  /* 821DBB54h */ case   26:  		/* li R11, 1 */
		/* 821DBB54h case   26:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821DBB54h case   26:*/		return 0x821DBB58;
		  /* 821DBB58h */ case   27:  		/* bc 12, CR6_GT, 8 */
		/* 821DBB58h case   27:*/		if ( regs.CR[6].gt ) { return 0x821DBB60;  }
		/* 821DBB58h case   27:*/		return 0x821DBB5C;
	}
	return 0x821DBB5C;
} // Block from 821DBAECh-821DBB5Ch (28 instructions)

//////////////////////////////////////////////////////
// Block at 821DBB5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBB5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBB5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBB5C);
		  /* 821DBB5Ch */ case    0:  		/* li R11, 0 */
		/* 821DBB5Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DBB5Ch case    0:*/		return 0x821DBB60;
	}
	return 0x821DBB60;
} // Block from 821DBB5Ch-821DBB60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DBB60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBB60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBB60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBB60);
		  /* 821DBB60h */ case    0:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 821DBB60h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DBB60h case    0:*/		return 0x821DBB64;
		  /* 821DBB64h */ case    1:  		/* li R7, 0 */
		/* 821DBB64h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821DBB64h case    1:*/		return 0x821DBB68;
		  /* 821DBB68h */ case    2:  		/* addic R10, R11, -1 */
		/* 821DBB68h case    2:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821DBB68h case    2:*/		return 0x821DBB6C;
		  /* 821DBB6Ch */ case    3:  		/* addi R6, R1, 88 */
		/* 821DBB6Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x58);
		/* 821DBB6Ch case    3:*/		return 0x821DBB70;
		  /* 821DBB70h */ case    4:  		/* subfe R11, R10, R11 */
		/* 821DBB70h case    4:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821DBB70h case    4:*/		return 0x821DBB74;
		  /* 821DBB74h */ case    5:  		/* addi R5, R1, 84 */
		/* 821DBB74h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 821DBB74h case    5:*/		return 0x821DBB78;
		  /* 821DBB78h */ case    6:  		/* addi R11, R11, 11 */
		/* 821DBB78h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xB);
		/* 821DBB78h case    6:*/		return 0x821DBB7C;
		  /* 821DBB7Ch */ case    7:  		/* addi R4, R1, 80 */
		/* 821DBB7Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x50);
		/* 821DBB7Ch case    7:*/		return 0x821DBB80;
		  /* 821DBB80h */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821DBB80h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821DBB80h case    8:*/		return 0x821DBB84;
		  /* 821DBB84h */ case    9:  		/* lwzx R29, <#[R11 + R26]> */
		/* 821DBB84h case    9:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 821DBB84h case    9:*/		return 0x821DBB88;
		  /* 821DBB88h */ case   10:  		/* mr R3, R29 */
		/* 821DBB88h case   10:*/		regs.R3 = regs.R29;
		/* 821DBB88h case   10:*/		return 0x821DBB8C;
		  /* 821DBB8Ch */ case   11:  		/* bl 340900 */
		/* 821DBB8Ch case   11:*/		regs.LR = 0x821DBB90; return 0x8222EF30;
		/* 821DBB8Ch case   11:*/		return 0x821DBB90;
		  /* 821DBB90h */ case   12:  		/* lwz R11, <#[R1 + 84]> */
		/* 821DBB90h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821DBB90h case   12:*/		return 0x821DBB94;
		  /* 821DBB94h */ case   13:  		/* rlwinm R28, R11, 0, 30, 31 */
		/* 821DBB94h case   13:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R28,regs.R11);
		/* 821DBB94h case   13:*/		return 0x821DBB98;
		  /* 821DBB98h */ case   14:  		/* lwz R27, <#[R1 + 88]> */
		/* 821DBB98h case   14:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000058) );
		/* 821DBB98h case   14:*/		return 0x821DBB9C;
		  /* 821DBB9Ch */ case   15:  		/* lwz R30, <#[R1 + 80]> */
		/* 821DBB9Ch case   15:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000050) );
		/* 821DBB9Ch case   15:*/		return 0x821DBBA0;
		  /* 821DBBA0h */ case   16:  		/* cmplwi CR6, R27, 0 */
		/* 821DBBA0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821DBBA0h case   16:*/		return 0x821DBBA4;
		  /* 821DBBA4h */ case   17:  		/* bc 4, CR6_EQ, 88 */
		/* 821DBBA4h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821DBBFC;  }
		/* 821DBBA4h case   17:*/		return 0x821DBBA8;
		  /* 821DBBA8h */ case   18:  		/* lwz R11, <#[R30 + 8]> */
		/* 821DBBA8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821DBBA8h case   18:*/		return 0x821DBBAC;
		  /* 821DBBACh */ case   19:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DBBACh case   19:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DBBACh case   19:*/		return 0x821DBBB0;
		  /* 821DBBB0h */ case   20:  		/* cmplwi CR6, R11, 384 */
		/* 821DBBB0h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000180);
		/* 821DBBB0h case   20:*/		return 0x821DBBB4;
		  /* 821DBBB4h */ case   21:  		/* bc 4, CR6_EQ, 72 */
		/* 821DBBB4h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821DBBFC;  }
		/* 821DBBB4h case   21:*/		return 0x821DBBB8;
		  /* 821DBBB8h */ case   22:  		/* lwz R31, <#[R30 + 44]> */
		/* 821DBBB8h case   22:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x0000002C) );
		/* 821DBBB8h case   22:*/		return 0x821DBBBC;
		  /* 821DBBBCh */ case   23:  		/* lwz R4, <#[R30 + 48]> */
		/* 821DBBBCh case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000030) );
		/* 821DBBBCh case   23:*/		return 0x821DBBC0;
		  /* 821DBBC0h */ case   24:  		/* mr R3, R31 */
		/* 821DBBC0h case   24:*/		regs.R3 = regs.R31;
		/* 821DBBC0h case   24:*/		return 0x821DBBC4;
		  /* 821DBBC4h */ case   25:  		/* bl -489788 */
		/* 821DBBC4h case   25:*/		regs.LR = 0x821DBBC8; return 0x82164288;
		/* 821DBBC4h case   25:*/		return 0x821DBBC8;
		  /* 821DBBC8h */ case   26:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821DBBC8h case   26:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821DBBC8h case   26:*/		return 0x821DBBCC;
		  /* 821DBBCCh */ case   27:  		/* bc 12, CR0_EQ, 48 */
		/* 821DBBCCh case   27:*/		if ( regs.CR[0].eq ) { return 0x821DBBFC;  }
		/* 821DBBCCh case   27:*/		return 0x821DBBD0;
		  /* 821DBBD0h */ case   28:  		/* lwz R11, <#[R31]> */
		/* 821DBBD0h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821DBBD0h case   28:*/		return 0x821DBBD4;
		  /* 821DBBD4h */ case   29:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 821DBBD4h case   29:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821DBBD4h case   29:*/		return 0x821DBBD8;
		  /* 821DBBD8h */ case   30:  		/* cmplwi CR6, R11, 8 */
		/* 821DBBD8h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000008);
		/* 821DBBD8h case   30:*/		return 0x821DBBDC;
		  /* 821DBBDCh */ case   31:  		/* bc 4, CR6_EQ, 32 */
		/* 821DBBDCh case   31:*/		if ( !regs.CR[6].eq ) { return 0x821DBBFC;  }
		/* 821DBBDCh case   31:*/		return 0x821DBBE0;
		  /* 821DBBE0h */ case   32:  		/* lwz R30, <#[R31 + 12]> */
		/* 821DBBE0h case   32:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 821DBBE0h case   32:*/		return 0x821DBBE4;
		  /* 821DBBE4h */ case   33:  		/* rlwinm R11, R28, 1, 0, 30 */
		/* 821DBBE4h case   33:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R28);
		/* 821DBBE4h case   33:*/		return 0x821DBBE8;
		  /* 821DBBE8h */ case   34:  		/* stw R30, <#[R1 + 80]> */
		/* 821DBBE8h case   34:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000050) );
		/* 821DBBE8h case   34:*/		return 0x821DBBEC;
		  /* 821DBBECh */ case   35:  		/* lwz R10, <#[R31]> */
		/* 821DBBECh case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821DBBECh case   35:*/		return 0x821DBBF0;
		  /* 821DBBF0h */ case   36:  		/* rlwinm R10, R10, 27, 24, 31 */
		/* 821DBBF0h case   36:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R10,regs.R10);
		/* 821DBBF0h case   36:*/		return 0x821DBBF4;
		  /* 821DBBF4h */ case   37:  		/* srw R11, R10, R11 */
		/* 821DBBF4h case   37:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821DBBF4h case   37:*/		return 0x821DBBF8;
		  /* 821DBBF8h */ case   38:  		/* rlwinm R28, R11, 0, 30, 31 */
		/* 821DBBF8h case   38:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R28,regs.R11);
		/* 821DBBF8h case   38:*/		return 0x821DBBFC;
	}
	return 0x821DBBFC;
} // Block from 821DBB60h-821DBBFCh (39 instructions)

//////////////////////////////////////////////////////
// Block at 821DBBFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBBFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBBFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBBFC);
		  /* 821DBBFCh */ case    0:  		/* cmpwi CR6, R28, 0 */
		/* 821DBBFCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R28,0x00000000);
		/* 821DBBFCh case    0:*/		return 0x821DBC00;
		  /* 821DBC00h */ case    1:  		/* bc 4, CR6_EQ, 552 */
		/* 821DBC00h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DBE28;  }
		/* 821DBC00h case    1:*/		return 0x821DBC04;
		  /* 821DBC04h */ case    2:  		/* rlwinm. R11, R27, 0, 29, 27 */
		/* 821DBC04h case    2:*/		cpu::op::rlwinm<1,0,29,27>(regs,&regs.R11,regs.R27);
		/* 821DBC04h case    2:*/		return 0x821DBC08;
		  /* 821DBC08h */ case    3:  		/* bc 4, CR0_EQ, 544 */
		/* 821DBC08h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DBE28;  }
		/* 821DBC08h case    3:*/		return 0x821DBC0C;
		  /* 821DBC0Ch */ case    4:  		/* li R6, 1 */
		/* 821DBC0Ch case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821DBC0Ch case    4:*/		return 0x821DBC10;
		  /* 821DBC10h */ case    5:  		/* mr R5, R30 */
		/* 821DBC10h case    5:*/		regs.R5 = regs.R30;
		/* 821DBC10h case    5:*/		return 0x821DBC14;
		  /* 821DBC14h */ case    6:  		/* mr R4, R26 */
		/* 821DBC14h case    6:*/		regs.R4 = regs.R26;
		/* 821DBC14h case    6:*/		return 0x821DBC18;
		  /* 821DBC18h */ case    7:  		/* mr R3, R24 */
		/* 821DBC18h case    7:*/		regs.R3 = regs.R24;
		/* 821DBC18h case    7:*/		return 0x821DBC1C;
		  /* 821DBC1Ch */ case    8:  		/* bl -122356 */
		/* 821DBC1Ch case    8:*/		regs.LR = 0x821DBC20; return 0x821BDE28;
		/* 821DBC1Ch case    8:*/		return 0x821DBC20;
		  /* 821DBC20h */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821DBC20h case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821DBC20h case    9:*/		return 0x821DBC24;
		  /* 821DBC24h */ case   10:  		/* bc 12, CR0_EQ, 516 */
		/* 821DBC24h case   10:*/		if ( regs.CR[0].eq ) { return 0x821DBE28;  }
		/* 821DBC24h case   10:*/		return 0x821DBC28;
		  /* 821DBC28h */ case   11:  		/* lwz R11, <#[R29 + 12]> */
		/* 821DBC28h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821DBC28h case   11:*/		return 0x821DBC2C;
		  /* 821DBC2Ch */ case   12:  		/* lwz R30, <#[R1 + 80]> */
		/* 821DBC2Ch case   12:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000050) );
		/* 821DBC2Ch case   12:*/		return 0x821DBC30;
		  /* 821DBC30h */ case   13:  		/* cmplw CR6, R11, R30 */
		/* 821DBC30h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821DBC30h case   13:*/		return 0x821DBC34;
		  /* 821DBC34h */ case   14:  		/* bc 12, CR6_EQ, 408 */
		/* 821DBC34h case   14:*/		if ( regs.CR[6].eq ) { return 0x821DBDCC;  }
		/* 821DBC34h case   14:*/		return 0x821DBC38;
		  /* 821DBC38h */ case   15:  		/* lwz R10, <#[R30 + 8]> */
		/* 821DBC38h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821DBC38h case   15:*/		return 0x821DBC3C;
		  /* 821DBC3Ch */ case   16:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821DBC3Ch case   16:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821DBC3Ch case   16:*/		return 0x821DBC40;
		  /* 821DBC40h */ case   17:  		/* cmplwi CR6, R10, 15104 */
		/* 821DBC40h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003B00);
		/* 821DBC40h case   17:*/		return 0x821DBC44;
		  /* 821DBC44h */ case   18:  		/* bc 4, CR6_EQ, 340 */
		/* 821DBC44h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821DBD98;  }
		/* 821DBC44h case   18:*/		return 0x821DBC48;
		  /* 821DBC48h */ case   19:  		/* lwz R11, <#[R30 + 28]> */
		/* 821DBC48h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 821DBC48h case   19:*/		return 0x821DBC4C;
		  /* 821DBC4Ch */ case   20:  		/* cmplw CR6, R11, R25 */
		/* 821DBC4Ch case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 821DBC4Ch case   20:*/		return 0x821DBC50;
		  /* 821DBC50h */ case   21:  		/* bc 12, CR6_EQ, 256 */
		/* 821DBC50h case   21:*/		if ( regs.CR[6].eq ) { return 0x821DBD50;  }
		/* 821DBC50h case   21:*/		return 0x821DBC54;
		  /* 821DBC54h */ case   22:  		/* lwz R11, <#[R30 + 48]> */
		/* 821DBC54h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 821DBC54h case   22:*/		return 0x821DBC58;
		  /* 821DBC58h */ case   23:  		/* mr R3, R24 */
		/* 821DBC58h case   23:*/		regs.R3 = regs.R24;
		/* 821DBC58h case   23:*/		return 0x821DBC5C;
		  /* 821DBC5Ch */ case   24:  		/* lwz R30, <#[R11 + 12]> */
		/* 821DBC5Ch case   24:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DBC5Ch case   24:*/		return 0x821DBC60;
		  /* 821DBC60h */ case   25:  		/* lwz R11, <#[R30 + 8]> */
		/* 821DBC60h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821DBC60h case   25:*/		return 0x821DBC64;
		  /* 821DBC64h */ case   26:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DBC64h case   26:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DBC64h case   26:*/		return 0x821DBC68;
		  /* 821DBC68h */ case   27:  		/* cmplwi CR6, R11, 7040 */
		/* 821DBC68h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00001B80);
		/* 821DBC68h case   27:*/		return 0x821DBC6C;
		  /* 821DBC6Ch */ case   28:  		/* bc 4, CR6_EQ, 436 */
		/* 821DBC6Ch case   28:*/		if ( !regs.CR[6].eq ) { return 0x821DBE20;  }
		/* 821DBC6Ch case   28:*/		return 0x821DBC70;
		  /* 821DBC70h */ case   29:  		/* mr R4, R30 */
		/* 821DBC70h case   29:*/		regs.R4 = regs.R30;
		/* 821DBC70h case   29:*/		return 0x821DBC74;
		  /* 821DBC74h */ case   30:  		/* bl 298796 */
		/* 821DBC74h case   30:*/		regs.LR = 0x821DBC78; return 0x82224BA0;
		/* 821DBC74h case   30:*/		return 0x821DBC78;
		  /* 821DBC78h */ case   31:  		/* lwz R4, <#[R30 + 44]> */
		/* 821DBC78h case   31:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000002C) );
		/* 821DBC78h case   31:*/		return 0x821DBC7C;
		  /* 821DBC7Ch */ case   32:  		/* mr R28, R3 */
		/* 821DBC7Ch case   32:*/		regs.R28 = regs.R3;
		/* 821DBC7Ch case   32:*/		return 0x821DBC80;
		  /* 821DBC80h */ case   33:  		/* bl -408248 */
		/* 821DBC80h case   33:*/		regs.LR = 0x821DBC84; return 0x821781C8;
		/* 821DBC80h case   33:*/		return 0x821DBC84;
		  /* 821DBC84h */ case   34:  		/* rlwinm R11, R26, 0, 0, 30 */
		/* 821DBC84h case   34:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R26);
		/* 821DBC84h case   34:*/		return 0x821DBC88;
		  /* 821DBC88h */ case   35:  		/* stw R3, <#[R28 + 44]> */
		/* 821DBC88h case   35:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x0000002C) );
		/* 821DBC88h case   35:*/		return 0x821DBC8C;
		  /* 821DBC8Ch */ case   36:  		/* stw R25, <#[R28 + 28]> */
		/* 821DBC8Ch case   36:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R28 + 0x0000001C) );
		/* 821DBC8Ch case   36:*/		return 0x821DBC90;
		  /* 821DBC90h */ case   37:  		/* rlwinm R10, R28, 0, 0, 30 */
		/* 821DBC90h case   37:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R28);
		/* 821DBC90h case   37:*/		return 0x821DBC94;
		  /* 821DBC94h */ case   38:  		/* addi R31, R11, 36 */
		/* 821DBC94h case   38:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x24);
		/* 821DBC94h case   38:*/		return 0x821DBC98;
		  /* 821DBC98h */ case   39:  		/* lwz R11, <#[R30 + 12]> */
		/* 821DBC98h case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821DBC98h case   39:*/		return 0x821DBC9C;
		  /* 821DBC9Ch */ case   40:  		/* sth R11, <#[R28 + 14]> */
		/* 821DBC9Ch case   40:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R28 + 0x0000000E) );
		/* 821DBC9Ch case   40:*/		return 0x821DBCA0;
		  /* 821DBCA0h */ case   41:  		/* addi R11, R10, 36 */
		/* 821DBCA0h case   41:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x24);
		/* 821DBCA0h case   41:*/		return 0x821DBCA4;
		  /* 821DBCA4h */ case   42:  		/* lwz R9, <#[R31]> */
		/* 821DBCA4h case   42:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 821DBCA4h case   42:*/		return 0x821DBCA8;
		  /* 821DBCA8h */ case   43:  		/* addi R8, R31, -36 */
		/* 821DBCA8h case   43:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0xFFFFFFDC);
		/* 821DBCA8h case   43:*/		return 0x821DBCAC;
		  /* 821DBCACh */ case   44:  		/* stw R9, <#[R10 + 36]> */
		/* 821DBCACh case   44:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000024) );
		/* 821DBCACh case   44:*/		return 0x821DBCB0;
		  /* 821DBCB0h */ case   45:  		/* addi R9, R11, -36 */
		/* 821DBCB0h case   45:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFDC);
		/* 821DBCB0h case   45:*/		return 0x821DBCB4;
		  /* 821DBCB4h */ case   46:  		/* lwz R10, <#[R31]> */
		/* 821DBCB4h case   46:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821DBCB4h case   46:*/		return 0x821DBCB8;
		  /* 821DBCB8h */ case   47:  		/* rlwinm R7, R10, 0, 0, 30 */
		/* 821DBCB8h case   47:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R10);
		/* 821DBCB8h case   47:*/		return 0x821DBCBC;
		  /* 821DBCBCh */ case   48:  		/* addi R10, R11, 4 */
		/* 821DBCBCh case   48:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821DBCBCh case   48:*/		return 0x821DBCC0;
		  /* 821DBCC0h */ case   49:  		/* stw R9, <#[R7]> */
		/* 821DBCC0h case   49:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 821DBCC0h case   49:*/		return 0x821DBCC4;
		  /* 821DBCC4h */ case   50:  		/* stw R8, <#[R11 + 4]> */
		/* 821DBCC4h case   50:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821DBCC4h case   50:*/		return 0x821DBCC8;
		  /* 821DBCC8h */ case   51:  		/* mr R3, R24 */
		/* 821DBCC8h case   51:*/		regs.R3 = regs.R24;
		/* 821DBCC8h case   51:*/		return 0x821DBCCC;
		  /* 821DBCCCh */ case   52:  		/* stw R10, <#[R31]> */
		/* 821DBCCCh case   52:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821DBCCCh case   52:*/		return 0x821DBCD0;
		  /* 821DBCD0h */ case   53:  		/* lwz R4, <#[R1 + 80]> */
		/* 821DBCD0h case   53:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 821DBCD0h case   53:*/		return 0x821DBCD4;
		  /* 821DBCD4h */ case   54:  		/* bl 298700 */
		/* 821DBCD4h case   54:*/		regs.LR = 0x821DBCD8; return 0x82224BA0;
		/* 821DBCD4h case   54:*/		return 0x821DBCD8;
		  /* 821DBCD8h */ case   55:  		/* lwz R11, <#[R1 + 80]> */
		/* 821DBCD8h case   55:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821DBCD8h case   55:*/		return 0x821DBCDC;
		  /* 821DBCDCh */ case   56:  		/* lwz R4, <#[R11 + 44]> */
		/* 821DBCDCh case   56:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000002C) );
		/* 821DBCDCh case   56:*/		return 0x821DBCE0;
		  /* 821DBCE0h */ case   57:  		/* mr R30, R3 */
		/* 821DBCE0h case   57:*/		regs.R30 = regs.R3;
		/* 821DBCE0h case   57:*/		return 0x821DBCE4;
		  /* 821DBCE4h */ case   58:  		/* bl -408348 */
		/* 821DBCE4h case   58:*/		regs.LR = 0x821DBCE8; return 0x821781C8;
		/* 821DBCE4h case   58:*/		return 0x821DBCE8;
		  /* 821DBCE8h */ case   59:  		/* stw R3, <#[R30 + 44]> */
		/* 821DBCE8h case   59:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821DBCE8h case   59:*/		return 0x821DBCEC;
		  /* 821DBCECh */ case   60:  		/* li R5, 0 */
		/* 821DBCECh case   60:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DBCECh case   60:*/		return 0x821DBCF0;
		  /* 821DBCF0h */ case   61:  		/* mr R4, R28 */
		/* 821DBCF0h case   61:*/		regs.R4 = regs.R28;
		/* 821DBCF0h case   61:*/		return 0x821DBCF4;
		  /* 821DBCF4h */ case   62:  		/* mr R3, R24 */
		/* 821DBCF4h case   62:*/		regs.R3 = regs.R24;
		/* 821DBCF4h case   62:*/		return 0x821DBCF8;
		  /* 821DBCF8h */ case   63:  		/* bl -439720 */
		/* 821DBCF8h case   63:*/		regs.LR = 0x821DBCFC; return 0x82170750;
		/* 821DBCF8h case   63:*/		return 0x821DBCFC;
		  /* 821DBCFCh */ case   64:  		/* mr R4, R3 */
		/* 821DBCFCh case   64:*/		regs.R4 = regs.R3;
		/* 821DBCFCh case   64:*/		return 0x821DBD00;
		  /* 821DBD00h */ case   65:  		/* mr R3, R30 */
		/* 821DBD00h case   65:*/		regs.R3 = regs.R30;
		/* 821DBD00h case   65:*/		return 0x821DBD04;
		  /* 821DBD04h */ case   66:  		/* bl -408380 */
		/* 821DBD04h case   66:*/		regs.LR = 0x821DBD08; return 0x821781C8;
		/* 821DBD04h case   66:*/		return 0x821DBD08;
		  /* 821DBD08h */ case   67:  		/* stw R3, <#[R30 + 48]> */
		/* 821DBD08h case   67:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000030) );
		/* 821DBD08h case   67:*/		return 0x821DBD0C;
		  /* 821DBD0Ch */ case   68:  		/* stw R25, <#[R30 + 28]> */
		/* 821DBD0Ch case   68:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R30 + 0x0000001C) );
		/* 821DBD0Ch case   68:*/		return 0x821DBD10;
		  /* 821DBD10h */ case   69:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821DBD10h case   69:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821DBD10h case   69:*/		return 0x821DBD14;
		  /* 821DBD14h */ case   70:  		/* lwz R9, <#[R1 + 80]> */
		/* 821DBD14h case   70:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 821DBD14h case   70:*/		return 0x821DBD18;
		  /* 821DBD18h */ case   71:  		/* addi R8, R31, -36 */
		/* 821DBD18h case   71:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0xFFFFFFDC);
		/* 821DBD18h case   71:*/		return 0x821DBD1C;
		  /* 821DBD1Ch */ case   72:  		/* lwz R9, <#[R9 + 12]> */
		/* 821DBD1Ch case   72:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000000C) );
		/* 821DBD1Ch case   72:*/		return 0x821DBD20;
		  /* 821DBD20h */ case   73:  		/* addi R11, R11, 36 */
		/* 821DBD20h case   73:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821DBD20h case   73:*/		return 0x821DBD24;
		  /* 821DBD24h */ case   74:  		/* sth R9, <#[R30 + 14]> */
		/* 821DBD24h case   74:*/		cpu::mem::store16( regs, regs.R9, (uint32)(regs.R30 + 0x0000000E) );
		/* 821DBD24h case   74:*/		return 0x821DBD28;
		  /* 821DBD28h */ case   75:  		/* lwz R9, <#[R31]> */
		/* 821DBD28h case   75:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 821DBD28h case   75:*/		return 0x821DBD2C;
		  /* 821DBD2Ch */ case   76:  		/* addi R7, R11, -36 */
		/* 821DBD2Ch case   76:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFDC);
		/* 821DBD2Ch case   76:*/		return 0x821DBD30;
		  /* 821DBD30h */ case   77:  		/* stw R9, <#[R11]> */
		/* 821DBD30h case   77:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821DBD30h case   77:*/		return 0x821DBD34;
		  /* 821DBD34h */ case   78:  		/* addi R10, R11, 4 */
		/* 821DBD34h case   78:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821DBD34h case   78:*/		return 0x821DBD38;
		  /* 821DBD38h */ case   79:  		/* lwz R9, <#[R31]> */
		/* 821DBD38h case   79:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 821DBD38h case   79:*/		return 0x821DBD3C;
		  /* 821DBD3Ch */ case   80:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 821DBD3Ch case   80:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 821DBD3Ch case   80:*/		return 0x821DBD40;
		  /* 821DBD40h */ case   81:  		/* stw R7, <#[R9]> */
		/* 821DBD40h case   81:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 821DBD40h case   81:*/		return 0x821DBD44;
		  /* 821DBD44h */ case   82:  		/* stw R8, <#[R11 + 4]> */
		/* 821DBD44h case   82:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821DBD44h case   82:*/		return 0x821DBD48;
		  /* 821DBD48h */ case   83:  		/* stw R10, <#[R31]> */
		/* 821DBD48h case   83:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821DBD48h case   83:*/		return 0x821DBD4C;
		  /* 821DBD4Ch */ case   84:  		/* stw R30, <#[R1 + 80]> */
		/* 821DBD4Ch case   84:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000050) );
		/* 821DBD4Ch case   84:*/		return 0x821DBD50;
	}
	return 0x821DBD50;
} // Block from 821DBBFCh-821DBD50h (85 instructions)

//////////////////////////////////////////////////////
// Block at 821DBD50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBD50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBD50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBD50);
		  /* 821DBD50h */ case    0:  		/* lwz R11, <#[R29 + 12]> */
		/* 821DBD50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821DBD50h case    0:*/		return 0x821DBD54;
		  /* 821DBD54h */ case    1:  		/* addi R11, R11, 4 */
		/* 821DBD54h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821DBD54h case    1:*/		return 0x821DBD58;
		  /* 821DBD58h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821DBD58h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DBD58h case    2:*/		return 0x821DBD5C;
		  /* 821DBD5Ch */ case    3:  		/* b 12 */
		/* 821DBD5Ch case    3:*/		return 0x821DBD68;
		/* 821DBD5Ch case    3:*/		return 0x821DBD60;
		  /* 821DBD60h */ case    4:  		/* addi R11, R10, 8 */
		/* 821DBD60h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821DBD60h case    4:*/		return 0x821DBD64;
		  /* 821DBD64h */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 821DBD64h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821DBD64h case    5:*/		return 0x821DBD68;
	}
	return 0x821DBD68;
} // Block from 821DBD50h-821DBD68h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DBD68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBD68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBD68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBD68);
		  /* 821DBD68h */ case    0:  		/* cmplw CR6, R10, R29 */
		/* 821DBD68h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 821DBD68h case    0:*/		return 0x821DBD6C;
		  /* 821DBD6Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821DBD6Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DBD60;  }
		/* 821DBD6Ch case    1:*/		return 0x821DBD70;
		  /* 821DBD70h */ case    2:  		/* lwz R10, <#[R29 + 8]> */
		/* 821DBD70h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 821DBD70h case    2:*/		return 0x821DBD74;
		  /* 821DBD74h */ case    3:  		/* li R9, 1 */
		/* 821DBD74h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821DBD74h case    3:*/		return 0x821DBD78;
		  /* 821DBD78h */ case    4:  		/* stw R10, <#[R11]> */
		/* 821DBD78h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DBD78h case    4:*/		return 0x821DBD7C;
		  /* 821DBD7Ch */ case    5:  		/* lwz R11, <#[R30 + 4]> */
		/* 821DBD7Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821DBD7Ch case    5:*/		return 0x821DBD80;
		  /* 821DBD80h */ case    6:  		/* stw R11, <#[R29 + 8]> */
		/* 821DBD80h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821DBD80h case    6:*/		return 0x821DBD84;
		  /* 821DBD84h */ case    7:  		/* stw R29, <#[R30 + 4]> */
		/* 821DBD84h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x00000004) );
		/* 821DBD84h case    7:*/		return 0x821DBD88;
		  /* 821DBD88h */ case    8:  		/* lwz R11, <#[R29]> */
		/* 821DBD88h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821DBD88h case    8:*/		return 0x821DBD8C;
		  /* 821DBD8Ch */ case    9:  		/* rlwimi R11, R9, 3, 27, 31 */
		/* 821DBD8Ch case    9:*/		cpu::op::rlwimi<0,3,27,31>(regs,&regs.R11,regs.R9);
		/* 821DBD8Ch case    9:*/		return 0x821DBD90;
		  /* 821DBD90h */ case   10:  		/* stw R11, <#[R29]> */
		/* 821DBD90h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821DBD90h case   10:*/		return 0x821DBD94;
		  /* 821DBD94h */ case   11:  		/* b 52 */
		/* 821DBD94h case   11:*/		return 0x821DBDC8;
		/* 821DBD94h case   11:*/		return 0x821DBD98;
	}
	return 0x821DBD98;
} // Block from 821DBD68h-821DBD98h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821DBD98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBD98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBD98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBD98);
		  /* 821DBD98h */ case    0:  		/* addi R11, R11, 4 */
		/* 821DBD98h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821DBD98h case    0:*/		return 0x821DBD9C;
		  /* 821DBD9Ch */ case    1:  		/* lwz R10, <#[R11]> */
		/* 821DBD9Ch case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DBD9Ch case    1:*/		return 0x821DBDA0;
		  /* 821DBDA0h */ case    2:  		/* b 12 */
		/* 821DBDA0h case    2:*/		return 0x821DBDAC;
		/* 821DBDA0h case    2:*/		return 0x821DBDA4;
		  /* 821DBDA4h */ case    3:  		/* addi R11, R10, 8 */
		/* 821DBDA4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821DBDA4h case    3:*/		return 0x821DBDA8;
		  /* 821DBDA8h */ case    4:  		/* lwz R10, <#[R10 + 8]> */
		/* 821DBDA8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821DBDA8h case    4:*/		return 0x821DBDAC;
	}
	return 0x821DBDAC;
} // Block from 821DBD98h-821DBDACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DBDACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBDAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBDAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBDAC);
		  /* 821DBDACh */ case    0:  		/* cmplw CR6, R10, R29 */
		/* 821DBDACh case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 821DBDACh case    0:*/		return 0x821DBDB0;
		  /* 821DBDB0h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821DBDB0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DBDA4;  }
		/* 821DBDB0h case    1:*/		return 0x821DBDB4;
		  /* 821DBDB4h */ case    2:  		/* lwz R10, <#[R29 + 8]> */
		/* 821DBDB4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 821DBDB4h case    2:*/		return 0x821DBDB8;
		  /* 821DBDB8h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821DBDB8h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DBDB8h case    3:*/		return 0x821DBDBC;
		  /* 821DBDBCh */ case    4:  		/* lwz R11, <#[R30 + 4]> */
		/* 821DBDBCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821DBDBCh case    4:*/		return 0x821DBDC0;
		  /* 821DBDC0h */ case    5:  		/* stw R11, <#[R29 + 8]> */
		/* 821DBDC0h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821DBDC0h case    5:*/		return 0x821DBDC4;
		  /* 821DBDC4h */ case    6:  		/* stw R29, <#[R30 + 4]> */
		/* 821DBDC4h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R30 + 0x00000004) );
		/* 821DBDC4h case    6:*/		return 0x821DBDC8;
	}
	return 0x821DBDC8;
} // Block from 821DBDACh-821DBDC8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DBDC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBDC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBDC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBDC8);
		  /* 821DBDC8h */ case    0:  		/* stw R30, <#[R29 + 12]> */
		/* 821DBDC8h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x0000000C) );
		/* 821DBDC8h case    0:*/		return 0x821DBDCC;
	}
	return 0x821DBDCC;
} // Block from 821DBDC8h-821DBDCCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DBDCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBDCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBDCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBDCC);
		  /* 821DBDCCh */ case    0:  		/* rlwinm R11, R26, 0, 0, 30 */
		/* 821DBDCCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R26);
		/* 821DBDCCh case    0:*/		return 0x821DBDD0;
		  /* 821DBDD0h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DBDD0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DBDD0h case    1:*/		return 0x821DBDD4;
		  /* 821DBDD4h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DBDD4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DBDD4h case    2:*/		return 0x821DBDD8;
		  /* 821DBDD8h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DBDD8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DBDE8;  }
		/* 821DBDD8h case    3:*/		return 0x821DBDDC;
		  /* 821DBDDCh */ case    4:  		/* mr R26, R11 */
		/* 821DBDDCh case    4:*/		regs.R26 = regs.R11;
		/* 821DBDDCh case    4:*/		return 0x821DBDE0;
		  /* 821DBDE0h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DBDE0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DBDE0h case    5:*/		return 0x821DBDE4;
		  /* 821DBDE4h */ case    6:  		/* bc 4, CR6_EQ, -700 */
		/* 821DBDE4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DBB28;  }
		/* 821DBDE4h case    6:*/		return 0x821DBDE8;
	}
	return 0x821DBDE8;
} // Block from 821DBDCCh-821DBDE8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DBDE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBDE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBDE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBDE8);
		  /* 821DBDE8h */ case    0:  		/* rlwinm R11, R25, 0, 0, 30 */
		/* 821DBDE8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R25);
		/* 821DBDE8h case    0:*/		return 0x821DBDEC;
		  /* 821DBDECh */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DBDECh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DBDECh case    1:*/		return 0x821DBDF0;
		  /* 821DBDF0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DBDF0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DBDF0h case    2:*/		return 0x821DBDF4;
		  /* 821DBDF4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DBDF4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DBE04;  }
		/* 821DBDF4h case    3:*/		return 0x821DBDF8;
		  /* 821DBDF8h */ case    4:  		/* mr R25, R11 */
		/* 821DBDF8h case    4:*/		regs.R25 = regs.R11;
		/* 821DBDF8h case    4:*/		return 0x821DBDFC;
		  /* 821DBDFCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DBDFCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DBDFCh case    5:*/		return 0x821DBE00;
		  /* 821DBE00h */ case    6:  		/* bc 4, CR6_EQ, -752 */
		/* 821DBE00h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DBB10;  }
		/* 821DBE00h case    6:*/		return 0x821DBE04;
	}
	return 0x821DBE04;
} // Block from 821DBDE8h-821DBE04h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DBE04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBE04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBE04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBE04);
		  /* 821DBE04h */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 821DBE04h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821DBE04h case    0:*/		return 0x821DBE08;
		  /* 821DBE08h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 821DBE08h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DBE18;  }
		/* 821DBE08h case    1:*/		return 0x821DBE0C;
		  /* 821DBE0Ch */ case    2:  		/* lwz R11, <#[R24 + 40]> */
		/* 821DBE0Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000028) );
		/* 821DBE0Ch case    2:*/		return 0x821DBE10;
		  /* 821DBE10h */ case    3:  		/* addi R11, R11, -1024 */
		/* 821DBE10h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFC00);
		/* 821DBE10h case    3:*/		return 0x821DBE14;
		  /* 821DBE14h */ case    4:  		/* stw R11, <#[R24 + 40]> */
		/* 821DBE14h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000028) );
		/* 821DBE14h case    4:*/		return 0x821DBE18;
	}
	return 0x821DBE18;
} // Block from 821DBE04h-821DBE18h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DBE18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBE18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBE18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBE18);
		  /* 821DBE18h */ case    0:  		/* addi R1, R1, 176 */
		/* 821DBE18h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 821DBE18h case    0:*/		return 0x821DBE1C;
		  /* 821DBE1Ch */ case    1:  		/* b -1354632 */
		/* 821DBE1Ch case    1:*/		return 0x82091294;
		/* 821DBE1Ch case    1:*/		return 0x821DBE20;
	}
	return 0x821DBE20;
} // Block from 821DBE18h-821DBE20h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DBE20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBE20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBE20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBE20);
		  /* 821DBE20h */ case    0:  		/* li R4, 4800 */
		/* 821DBE20h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821DBE20h case    0:*/		return 0x821DBE24;
		  /* 821DBE24h */ case    1:  		/* bl -565180 */
		/* 821DBE24h case    1:*/		regs.LR = 0x821DBE28; return 0x82151E68;
		/* 821DBE24h case    1:*/		return 0x821DBE28;
	}
	return 0x821DBE28;
} // Block from 821DBE20h-821DBE28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DBE28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBE28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBE28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBE28);
		  /* 821DBE28h */ case    0:  		/* li R4, 4800 */
		/* 821DBE28h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821DBE28h case    0:*/		return 0x821DBE2C;
		  /* 821DBE2Ch */ case    1:  		/* mr R3, R24 */
		/* 821DBE2Ch case    1:*/		regs.R3 = regs.R24;
		/* 821DBE2Ch case    1:*/		return 0x821DBE30;
		  /* 821DBE30h */ case    2:  		/* bl -565192 */
		/* 821DBE30h case    2:*/		regs.LR = 0x821DBE34; return 0x82151E68;
		/* 821DBE30h case    2:*/		return 0x821DBE34;
		  /* 821DBE34h */ case    3:  		/* nop */
		/* 821DBE34h case    3:*/		cpu::op::nop();
		/* 821DBE34h case    3:*/		return 0x821DBE38;
	}
	return 0x821DBE38;
} // Block from 821DBE28h-821DBE38h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DBE38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBE38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBE38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBE38);
		  /* 821DBE38h */ case    0:  		/* mfspr R12, LR */
		/* 821DBE38h case    0:*/		regs.R12 = regs.LR;
		/* 821DBE38h case    0:*/		return 0x821DBE3C;
		  /* 821DBE3Ch */ case    1:  		/* bl -1354780 */
		/* 821DBE3Ch case    1:*/		regs.LR = 0x821DBE40; return 0x82091220;
		/* 821DBE3Ch case    1:*/		return 0x821DBE40;
		  /* 821DBE40h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 821DBE40h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 821DBE40h case    2:*/		return 0x821DBE44;
		  /* 821DBE44h */ case    3:  		/* li R16, 0 */
		/* 821DBE44h case    3:*/		cpu::op::li<0>(regs,&regs.R16,0x0);
		/* 821DBE44h case    3:*/		return 0x821DBE48;
		  /* 821DBE48h */ case    4:  		/* li R5, 38 */
		/* 821DBE48h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 821DBE48h case    4:*/		return 0x821DBE4C;
		  /* 821DBE4Ch */ case    5:  		/* stb R16, <#[R1 + 80]> */
		/* 821DBE4Ch case    5:*/		cpu::mem::store8( regs, regs.R16, (uint32)(regs.R1 + 0x00000050) );
		/* 821DBE4Ch case    5:*/		return 0x821DBE50;
		  /* 821DBE50h */ case    6:  		/* li R4, 8 */
		/* 821DBE50h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821DBE50h case    6:*/		return 0x821DBE54;
		  /* 821DBE54h */ case    7:  		/* mr R19, R3 */
		/* 821DBE54h case    7:*/		regs.R19 = regs.R3;
		/* 821DBE54h case    7:*/		return 0x821DBE58;
		  /* 821DBE58h */ case    8:  		/* mr R18, R16 */
		/* 821DBE58h case    8:*/		regs.R18 = regs.R16;
		/* 821DBE58h case    8:*/		return 0x821DBE5C;
		  /* 821DBE5Ch */ case    9:  		/* bl -488812 */
		/* 821DBE5Ch case    9:*/		regs.LR = 0x821DBE60; return 0x821648F0;
		/* 821DBE5Ch case    9:*/		return 0x821DBE60;
		  /* 821DBE60h */ case   10:  		/* addi R11, R3, 4 */
		/* 821DBE60h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 821DBE60h case   10:*/		return 0x821DBE64;
		  /* 821DBE64h */ case   11:  		/* ori R10, R3, 1 */
		/* 821DBE64h case   11:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 821DBE64h case   11:*/		return 0x821DBE68;
		  /* 821DBE68h */ case   12:  		/* stw R3, <#[R19 + 652]> */
		/* 821DBE68h case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R19 + 0x0000028C) );
		/* 821DBE68h case   12:*/		return 0x821DBE6C;
		  /* 821DBE6Ch */ case   13:  		/* ori R11, R11, 1 */
		/* 821DBE6Ch case   13:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821DBE6Ch case   13:*/		return 0x821DBE70;
		  /* 821DBE70h */ case   14:  		/* stw R10, <#[R3 + 4]> */
		/* 821DBE70h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821DBE70h case   14:*/		return 0x821DBE74;
		  /* 821DBE74h */ case   15:  		/* li R15, 1 */
		/* 821DBE74h case   15:*/		cpu::op::li<0>(regs,&regs.R15,0x1);
		/* 821DBE74h case   15:*/		return 0x821DBE78;
		  /* 821DBE78h */ case   16:  		/* stw R11, <#[R3]> */
		/* 821DBE78h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821DBE78h case   16:*/		return 0x821DBE7C;
		  /* 821DBE7Ch */ case   17:  		/* lwz R11, <#[R19 + 40]> */
		/* 821DBE7Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000028) );
		/* 821DBE7Ch case   17:*/		return 0x821DBE80;
		  /* 821DBE80h */ case   18:  		/* ori R10, R11, 4096 */
		/* 821DBE80h case   18:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R11,0x1000);
		/* 821DBE80h case   18:*/		return 0x821DBE84;
		  /* 821DBE84h */ case   19:  		/* rlwinm R14, R11, 20, 31, 31 */
		/* 821DBE84h case   19:*/		cpu::op::rlwinm<0,20,31,31>(regs,&regs.R14,regs.R11);
		/* 821DBE84h case   19:*/		return 0x821DBE88;
		  /* 821DBE88h */ case   20:  		/* stw R10, <#[R19 + 40]> */
		/* 821DBE88h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R19 + 0x00000028) );
		/* 821DBE88h case   20:*/		return 0x821DBE8C;
		  /* 821DBE8Ch */ case   21:  		/* lwz R11, <#[R19 + 4]> */
		/* 821DBE8Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000004) );
		/* 821DBE8Ch case   21:*/		return 0x821DBE90;
		  /* 821DBE90h */ case   22:  		/* mr R17, R16 */
		/* 821DBE90h case   22:*/		regs.R17 = regs.R16;
		/* 821DBE90h case   22:*/		return 0x821DBE94;
		  /* 821DBE94h */ case   23:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DBE94h case   23:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DBE94h case   23:*/		return 0x821DBE98;
		  /* 821DBE98h */ case   24:  		/* bc 4, CR0_EQ, 264 */
		/* 821DBE98h case   24:*/		if ( !regs.CR[0].eq ) { return 0x821DBFA0;  }
		/* 821DBE98h case   24:*/		return 0x821DBE9C;
		  /* 821DBE9Ch */ case   25:  		/* mr R29, R11 */
		/* 821DBE9Ch case   25:*/		regs.R29 = regs.R11;
		/* 821DBE9Ch case   25:*/		return 0x821DBEA0;
		  /* 821DBEA0h */ case   26:  		/* cmplwi CR0, R11, 0 */
		/* 821DBEA0h case   26:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DBEA0h case   26:*/		return 0x821DBEA4;
		  /* 821DBEA4h */ case   27:  		/* bc 12, CR0_EQ, 252 */
		/* 821DBEA4h case   27:*/		if ( regs.CR[0].eq ) { return 0x821DBFA0;  }
		/* 821DBEA4h case   27:*/		return 0x821DBEA8;
		  /* 821DBEA8h */ case   28:  		/* lwz R11, <#[R29 + 20]> */
		/* 821DBEA8h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 821DBEA8h case   28:*/		return 0x821DBEAC;
		  /* 821DBEACh */ case   29:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DBEACh case   29:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DBEACh case   29:*/		return 0x821DBEB0;
		  /* 821DBEB0h */ case   30:  		/* bc 12, CR0_EQ, 40 */
		/* 821DBEB0h case   30:*/		if ( regs.CR[0].eq ) { return 0x821DBED8;  }
		/* 821DBEB0h case   30:*/		return 0x821DBEB4;
		  /* 821DBEB4h */ case   31:  		/* lwz R11, <#[R29 + 28]> */
		/* 821DBEB4h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821DBEB4h case   31:*/		return 0x821DBEB8;
		  /* 821DBEB8h */ case   32:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DBEB8h case   32:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DBEB8h case   32:*/		return 0x821DBEBC;
		  /* 821DBEBCh */ case   33:  		/* bc 12, CR0_EQ, 16 */
		/* 821DBEBCh case   33:*/		if ( regs.CR[0].eq ) { return 0x821DBECC;  }
		/* 821DBEBCh case   33:*/		return 0x821DBEC0;
		  /* 821DBEC0h */ case   34:  		/* lwz R11, <#[R29 + 36]> */
		/* 821DBEC0h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 821DBEC0h case   34:*/		return 0x821DBEC4;
		  /* 821DBEC4h */ case   35:  		/* addi R30, R29, 32 */
		/* 821DBEC4h case   35:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x20);
		/* 821DBEC4h case   35:*/		return 0x821DBEC8;
		  /* 821DBEC8h */ case   36:  		/* b 24 */
		/* 821DBEC8h case   36:*/		return 0x821DBEE0;
		/* 821DBEC8h case   36:*/		return 0x821DBECC;
	}
	return 0x821DBECC;
} // Block from 821DBE38h-821DBECCh (37 instructions)

//////////////////////////////////////////////////////
// Block at 821DBECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBECC);
		  /* 821DBECCh */ case    0:  		/* lwz R11, <#[R29 + 28]> */
		/* 821DBECCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821DBECCh case    0:*/		return 0x821DBED0;
		  /* 821DBED0h */ case    1:  		/* addi R30, R29, 24 */
		/* 821DBED0h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x18);
		/* 821DBED0h case    1:*/		return 0x821DBED4;
		  /* 821DBED4h */ case    2:  		/* b 12 */
		/* 821DBED4h case    2:*/		return 0x821DBEE0;
		/* 821DBED4h case    2:*/		return 0x821DBED8;
	}
	return 0x821DBED8;
} // Block from 821DBECCh-821DBED8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DBED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBED8);
		  /* 821DBED8h */ case    0:  		/* lwz R11, <#[R29 + 20]> */
		/* 821DBED8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 821DBED8h case    0:*/		return 0x821DBEDC;
		  /* 821DBEDCh */ case    1:  		/* addi R30, R29, 16 */
		/* 821DBEDCh case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x10);
		/* 821DBEDCh case    1:*/		return 0x821DBEE0;
	}
	return 0x821DBEE0;
} // Block from 821DBED8h-821DBEE0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DBEE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBEE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBEE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBEE0);
		  /* 821DBEE0h */ case    0:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DBEE0h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DBEE0h case    0:*/		return 0x821DBEE4;
		  /* 821DBEE4h */ case    1:  		/* addic R10, R10, -1 */
		/* 821DBEE4h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821DBEE4h case    1:*/		return 0x821DBEE8;
		  /* 821DBEE8h */ case    2:  		/* subfe R10, R10, R10 */
		/* 821DBEE8h case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821DBEE8h case    2:*/		return 0x821DBEEC;
		  /* 821DBEECh */ case    3:  		/* and R31, R10, R11 */
		/* 821DBEECh case    3:*/		cpu::op::and<0>(regs,&regs.R31,regs.R10,regs.R11);
		/* 821DBEECh case    3:*/		return 0x821DBEF0;
		  /* 821DBEF0h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821DBEF0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DBEF0h case    4:*/		return 0x821DBEF4;
		  /* 821DBEF4h */ case    5:  		/* bc 12, CR6_EQ, 148 */
		/* 821DBEF4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821DBF88;  }
		/* 821DBEF4h case    5:*/		return 0x821DBEF8;
		  /* 821DBEF8h */ case    6:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DBEF8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DBEF8h case    6:*/		return 0x821DBEFC;
		  /* 821DBEFCh */ case    7:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 821DBEFCh case    7:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 821DBEFCh case    7:*/		return 0x821DBF00;
		  /* 821DBF00h */ case    8:  		/* bc 4, CR0_EQ, 28 */
		/* 821DBF00h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821DBF1C;  }
		/* 821DBF00h case    8:*/		return 0x821DBF04;
		  /* 821DBF04h */ case    9:  		/* addi R5, R1, 80 */
		/* 821DBF04h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821DBF04h case    9:*/		return 0x821DBF08;
		  /* 821DBF08h */ case   10:  		/* mr R4, R31 */
		/* 821DBF08h case   10:*/		regs.R4 = regs.R31;
		/* 821DBF08h case   10:*/		return 0x821DBF0C;
		  /* 821DBF0Ch */ case   11:  		/* mr R3, R19 */
		/* 821DBF0Ch case   11:*/		regs.R3 = regs.R19;
		/* 821DBF0Ch case   11:*/		return 0x821DBF10;
		  /* 821DBF10h */ case   12:  		/* bl -40584 */
		/* 821DBF10h case   12:*/		regs.LR = 0x821DBF14; return 0x821D2088;
		/* 821DBF10h case   12:*/		return 0x821DBF14;
		  /* 821DBF14h */ case   13:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821DBF14h case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821DBF14h case   13:*/		return 0x821DBF18;
		  /* 821DBF18h */ case   14:  		/* bc 4, CR0_EQ, -112 */
		/* 821DBF18h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821DBEA8;  }
		/* 821DBF18h case   14:*/		return 0x821DBF1C;
	}
	return 0x821DBF1C;
} // Block from 821DBEE0h-821DBF1Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821DBF1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBF1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBF1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBF1C);
		  /* 821DBF1Ch */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821DBF1Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821DBF1Ch case    0:*/		return 0x821DBF20;
		  /* 821DBF20h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 821DBF20h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821DBF20h case    1:*/		return 0x821DBF24;
		  /* 821DBF24h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821DBF24h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821DBF24h case    2:*/		return 0x821DBF28;
		  /* 821DBF28h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 821DBF28h case    3:*/		if ( regs.CR[0].eq ) { return 0x821DBF34;  }
		/* 821DBF28h case    3:*/		return 0x821DBF2C;
		  /* 821DBF2Ch */ case    4:  		/* mr R31, R16 */
		/* 821DBF2Ch case    4:*/		regs.R31 = regs.R16;
		/* 821DBF2Ch case    4:*/		return 0x821DBF30;
		  /* 821DBF30h */ case    5:  		/* b 12 */
		/* 821DBF30h case    5:*/		return 0x821DBF3C;
		/* 821DBF30h case    5:*/		return 0x821DBF34;
	}
	return 0x821DBF34;
} // Block from 821DBF1Ch-821DBF34h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DBF34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBF34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBF34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBF34);
		  /* 821DBF34h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821DBF34h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DBF34h case    0:*/		return 0x821DBF38;
		  /* 821DBF38h */ case    1:  		/* bc 4, CR6_EQ, -64 */
		/* 821DBF38h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DBEF8;  }
		/* 821DBF38h case    1:*/		return 0x821DBF3C;
	}
	return 0x821DBF3C;
} // Block from 821DBF34h-821DBF3Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DBF3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBF3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBF3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBF3C);
		  /* 821DBF3Ch */ case    0:  		/* addi R10, R29, 32 */
		/* 821DBF3Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x20);
		/* 821DBF3Ch case    0:*/		return 0x821DBF40;
		  /* 821DBF40h */ case    1:  		/* cmplw CR6, R30, R10 */
		/* 821DBF40h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R10);
		/* 821DBF40h case    1:*/		return 0x821DBF44;
		  /* 821DBF44h */ case    2:  		/* bc 12, CR6_EQ, -84 */
		/* 821DBF44h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DBEF0;  }
		/* 821DBF44h case    2:*/		return 0x821DBF48;
		  /* 821DBF48h */ case    3:  		/* addi R11, R29, 24 */
		/* 821DBF48h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x18);
		/* 821DBF48h case    3:*/		return 0x821DBF4C;
		  /* 821DBF4Ch */ case    4:  		/* cmplw CR6, R30, R11 */
		/* 821DBF4Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821DBF4Ch case    4:*/		return 0x821DBF50;
		  /* 821DBF50h */ case    5:  		/* bc 12, CR6_EQ, 44 */
		/* 821DBF50h case    5:*/		if ( regs.CR[6].eq ) { return 0x821DBF7C;  }
		/* 821DBF50h case    5:*/		return 0x821DBF54;
		  /* 821DBF54h */ case    6:  		/* lwz R9, <#[R29 + 28]> */
		/* 821DBF54h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x0000001C) );
		/* 821DBF54h case    6:*/		return 0x821DBF58;
		  /* 821DBF58h */ case    7:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 821DBF58h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 821DBF58h case    7:*/		return 0x821DBF5C;
		  /* 821DBF5Ch */ case    8:  		/* bc 4, CR0_EQ, 32 */
		/* 821DBF5Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x821DBF7C;  }
		/* 821DBF5Ch case    8:*/		return 0x821DBF60;
		  /* 821DBF60h */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 821DBF60h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DBF60h case    9:*/		return 0x821DBF64;
		  /* 821DBF64h */ case   10:  		/* mr R30, R11 */
		/* 821DBF64h case   10:*/		regs.R30 = regs.R11;
		/* 821DBF64h case   10:*/		return 0x821DBF68;
		  /* 821DBF68h */ case   11:  		/* rlwinm R11, R10, 0, 31, 31 */
		/* 821DBF68h case   11:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821DBF68h case   11:*/		return 0x821DBF6C;
		  /* 821DBF6Ch */ case   12:  		/* addic R11, R11, -1 */
		/* 821DBF6Ch case   12:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821DBF6Ch case   12:*/		return 0x821DBF70;
		  /* 821DBF70h */ case   13:  		/* subfe R11, R11, R11 */
		/* 821DBF70h case   13:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821DBF70h case   13:*/		return 0x821DBF74;
		  /* 821DBF74h */ case   14:  		/* and R31, R11, R10 */
		/* 821DBF74h case   14:*/		cpu::op::and<0>(regs,&regs.R31,regs.R11,regs.R10);
		/* 821DBF74h case   14:*/		return 0x821DBF78;
		  /* 821DBF78h */ case   15:  		/* b -136 */
		/* 821DBF78h case   15:*/		return 0x821DBEF0;
		/* 821DBF78h case   15:*/		return 0x821DBF7C;
	}
	return 0x821DBF7C;
} // Block from 821DBF3Ch-821DBF7Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 821DBF7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBF7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBF7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBF7C);
		  /* 821DBF7Ch */ case    0:  		/* lwz R11, <#[R10 + 4]> */
		/* 821DBF7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821DBF7Ch case    0:*/		return 0x821DBF80;
		  /* 821DBF80h */ case    1:  		/* mr R30, R10 */
		/* 821DBF80h case    1:*/		regs.R30 = regs.R10;
		/* 821DBF80h case    1:*/		return 0x821DBF84;
		  /* 821DBF84h */ case    2:  		/* b -164 */
		/* 821DBF84h case    2:*/		return 0x821DBEE0;
		/* 821DBF84h case    2:*/		return 0x821DBF88;
	}
	return 0x821DBF88;
} // Block from 821DBF7Ch-821DBF88h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DBF88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBF88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBF88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBF88);
		  /* 821DBF88h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821DBF88h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821DBF88h case    0:*/		return 0x821DBF8C;
		  /* 821DBF8Ch */ case    1:  		/* lwz R29, <#[R11 + 4]> */
		/* 821DBF8Ch case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000004) );
		/* 821DBF8Ch case    1:*/		return 0x821DBF90;
		  /* 821DBF90h */ case    2:  		/* rlwinm. R11, R29, 0, 31, 31 */
		/* 821DBF90h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R29);
		/* 821DBF90h case    2:*/		return 0x821DBF94;
		  /* 821DBF94h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821DBF94h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DBFA0;  }
		/* 821DBF94h case    3:*/		return 0x821DBF98;
		  /* 821DBF98h */ case    4:  		/* cmplwi CR6, R29, 0 */
		/* 821DBF98h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821DBF98h case    4:*/		return 0x821DBF9C;
		  /* 821DBF9Ch */ case    5:  		/* bc 4, CR6_EQ, -244 */
		/* 821DBF9Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821DBEA8;  }
		/* 821DBF9Ch case    5:*/		return 0x821DBFA0;
	}
	return 0x821DBFA0;
} // Block from 821DBF88h-821DBFA0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DBFA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBFA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBFA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBFA0);
		  /* 821DBFA0h */ case    0:  		/* lwz R3, <#[R19 + 652]> */
		/* 821DBFA0h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R19 + 0x0000028C) );
		/* 821DBFA0h case    0:*/		return 0x821DBFA4;
		  /* 821DBFA4h */ case    1:  		/* lwz R11, <#[R3 + 4]> */
		/* 821DBFA4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821DBFA4h case    1:*/		return 0x821DBFA8;
		  /* 821DBFA8h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DBFA8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DBFA8h case    2:*/		return 0x821DBFAC;
		  /* 821DBFACh */ case    3:  		/* bc 4, CR0_EQ, 168 */
		/* 821DBFACh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DC054;  }
		/* 821DBFACh case    3:*/		return 0x821DBFB0;
		  /* 821DBFB0h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821DBFB0h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DBFB0h case    4:*/		return 0x821DBFB4;
		  /* 821DBFB4h */ case    5:  		/* bc 12, CR0_EQ, 160 */
		/* 821DBFB4h case    5:*/		if ( regs.CR[0].eq ) { return 0x821DC054;  }
		/* 821DBFB4h case    5:*/		return 0x821DBFB8;
		  /* 821DBFB8h */ case    6:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821DBFB8h case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821DBFB8h case    6:*/		return 0x821DBFBC;
		  /* 821DBFBCh */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DBFBCh case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DBFBCh case    7:*/		return 0x821DBFC0;
		  /* 821DBFC0h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 821DBFC0h case    8:*/		if ( regs.CR[0].eq ) { return 0x821DBFCC;  }
		/* 821DBFC0h case    8:*/		return 0x821DBFC4;
		  /* 821DBFC4h */ case    9:  		/* mr R4, R16 */
		/* 821DBFC4h case    9:*/		regs.R4 = regs.R16;
		/* 821DBFC4h case    9:*/		return 0x821DBFC8;
		  /* 821DBFC8h */ case   10:  		/* b 16 */
		/* 821DBFC8h case   10:*/		return 0x821DBFD8;
		/* 821DBFC8h case   10:*/		return 0x821DBFCC;
	}
	return 0x821DBFCC;
} // Block from 821DBFA0h-821DBFCCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 821DBFCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBFCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBFCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBFCC);
		  /* 821DBFCCh */ case    0:  		/* lwz R11, <#[R3]> */
		/* 821DBFCCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821DBFCCh case    0:*/		return 0x821DBFD0;
		  /* 821DBFD0h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DBFD0h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DBFD0h case    1:*/		return 0x821DBFD4;
		  /* 821DBFD4h */ case    2:  		/* addi R4, R11, -4 */
		/* 821DBFD4h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821DBFD4h case    2:*/		return 0x821DBFD8;
	}
	return 0x821DBFD8;
} // Block from 821DBFCCh-821DBFD8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DBFD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DBFD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DBFD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DBFD8);
		  /* 821DBFD8h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 821DBFD8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821DBFD8h case    0:*/		return 0x821DBFDC;
		  /* 821DBFDCh */ case    1:  		/* addi R10, R11, 3 */
		/* 821DBFDCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821DBFDCh case    1:*/		return 0x821DBFE0;
		  /* 821DBFE0h */ case    2:  		/* addic. R11, R11, -1 */
		/* 821DBFE0h case    2:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821DBFE0h case    2:*/		return 0x821DBFE4;
		  /* 821DBFE4h */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821DBFE4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821DBFE4h case    3:*/		return 0x821DBFE8;
		  /* 821DBFE8h */ case    4:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821DBFE8h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821DBFE8h case    4:*/		return 0x821DBFEC;
		  /* 821DBFECh */ case    5:  		/* stw R11, <#[R4 + 8]> */
		/* 821DBFECh case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821DBFECh case    5:*/		return 0x821DBFF0;
		  /* 821DBFF0h */ case    6:  		/* bc 4, CR0_EQ, 56 */
		/* 821DBFF0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821DC028;  }
		/* 821DBFF0h case    6:*/		return 0x821DBFF4;
		  /* 821DBFF4h */ case    7:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821DBFF4h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821DBFF4h case    7:*/		return 0x821DBFF8;
		  /* 821DBFF8h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 821DBFF8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DBFF8h case    8:*/		return 0x821DBFFC;
		  /* 821DBFFCh */ case    9:  		/* lwz R9, <#[R11]> */
		/* 821DBFFCh case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821DBFFCh case    9:*/		return 0x821DC000;
		  /* 821DC000h */ case   10:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821DC000h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821DC000h case   10:*/		return 0x821DC004;
		  /* 821DC004h */ case   11:  		/* stw R9, <#[R10]> */
		/* 821DC004h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DC004h case   11:*/		return 0x821DC008;
		  /* 821DC008h */ case   12:  		/* lwz R10, <#[R11 + 4]> */
		/* 821DC008h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DC008h case   12:*/		return 0x821DC00C;
		  /* 821DC00Ch */ case   13:  		/* lwz R11, <#[R11]> */
		/* 821DC00Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821DC00Ch case   13:*/		return 0x821DC010;
		  /* 821DC010h */ case   14:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DC010h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DC010h case   14:*/		return 0x821DC014;
		  /* 821DC014h */ case   15:  		/* stw R10, <#[R11]> */
		/* 821DC014h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DC014h case   15:*/		return 0x821DC018;
		  /* 821DC018h */ case   16:  		/* lwz R11, <#[R4 + 12]> */
		/* 821DC018h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821DC018h case   16:*/		return 0x821DC01C;
		  /* 821DC01Ch */ case   17:  		/* addi R11, R11, 4 */
		/* 821DC01Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821DC01Ch case   17:*/		return 0x821DC020;
		  /* 821DC020h */ case   18:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821DC020h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821DC020h case   18:*/		return 0x821DC024;
		  /* 821DC024h */ case   19:  		/* bl -565788 */
		/* 821DC024h case   19:*/		regs.LR = 0x821DC028; return 0x82151E08;
		/* 821DC024h case   19:*/		return 0x821DC028;
	}
	return 0x821DC028;
} // Block from 821DBFD8h-821DC028h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821DC028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC028);
		  /* 821DC028h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DC028h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DC028h case    0:*/		return 0x821DC02C;
		  /* 821DC02Ch */ case    1:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821DC02Ch case    1:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821DC02Ch case    1:*/		return 0x821DC030;
		  /* 821DC030h */ case    2:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821DC030h case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821DC030h case    2:*/		return 0x821DC034;
		  /* 821DC034h */ case    3:  		/* stw R11, <#[R31 + 8]> */
		/* 821DC034h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DC034h case    3:*/		return 0x821DC038;
		  /* 821DC038h */ case    4:  		/* cmplwi CR6, R10, 14720 */
		/* 821DC038h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003980);
		/* 821DC038h case    4:*/		return 0x821DC03C;
		  /* 821DC03Ch */ case    5:  		/* bc 12, CR6_EQ, -156 */
		/* 821DC03Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821DBFA0;  }
		/* 821DC03Ch case    5:*/		return 0x821DC040;
		  /* 821DC040h */ case    6:  		/* addi R5, R1, 80 */
		/* 821DC040h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821DC040h case    6:*/		return 0x821DC044;
		  /* 821DC044h */ case    7:  		/* mr R4, R31 */
		/* 821DC044h case    7:*/		regs.R4 = regs.R31;
		/* 821DC044h case    7:*/		return 0x821DC048;
		  /* 821DC048h */ case    8:  		/* mr R3, R19 */
		/* 821DC048h case    8:*/		regs.R3 = regs.R19;
		/* 821DC048h case    8:*/		return 0x821DC04C;
		  /* 821DC04Ch */ case    9:  		/* bl -40900 */
		/* 821DC04Ch case    9:*/		regs.LR = 0x821DC050; return 0x821D2088;
		/* 821DC04Ch case    9:*/		return 0x821DC050;
		  /* 821DC050h */ case   10:  		/* b -176 */
		/* 821DC050h case   10:*/		return 0x821DBFA0;
		/* 821DC050h case   10:*/		return 0x821DC054;
	}
	return 0x821DC054;
} // Block from 821DC028h-821DC054h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821DC054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC054);
		  /* 821DC054h */ case    0:  		/* mr R4, R14 */
		/* 821DC054h case    0:*/		regs.R4 = regs.R14;
		/* 821DC054h case    0:*/		return 0x821DC058;
		  /* 821DC058h */ case    1:  		/* mr R3, R19 */
		/* 821DC058h case    1:*/		regs.R3 = regs.R19;
		/* 821DC058h case    1:*/		return 0x821DC05C;
		  /* 821DC05Ch */ case    2:  		/* bl -488300 */
		/* 821DC05Ch case    2:*/		regs.LR = 0x821DC060; return 0x82164CF0;
		/* 821DC05Ch case    2:*/		return 0x821DC060;
		  /* 821DC060h */ case    3:  		/* lbz R11, <#[R1 + 80]> */
		/* 821DC060h case    3:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821DC060h case    3:*/		return 0x821DC064;
		  /* 821DC064h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821DC064h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DC064h case    4:*/		return 0x821DC068;
		  /* 821DC068h */ case    5:  		/* bc 12, CR0_EQ, 24 */
		/* 821DC068h case    5:*/		if ( regs.CR[0].eq ) { return 0x821DC080;  }
		/* 821DC068h case    5:*/		return 0x821DC06C;
		  /* 821DC06Ch */ case    6:  		/* mr R3, R19 */
		/* 821DC06Ch case    6:*/		regs.R3 = regs.R19;
		/* 821DC06Ch case    6:*/		return 0x821DC070;
		  /* 821DC070h */ case    7:  		/* mr R18, R15 */
		/* 821DC070h case    7:*/		regs.R18 = regs.R15;
		/* 821DC070h case    7:*/		return 0x821DC074;
		  /* 821DC074h */ case    8:  		/* bl 62124 */
		/* 821DC074h case    8:*/		regs.LR = 0x821DC078; return 0x821EB320;
		/* 821DC074h case    8:*/		return 0x821DC078;
		  /* 821DC078h */ case    9:  		/* mr R17, R15 */
		/* 821DC078h case    9:*/		regs.R17 = regs.R15;
		/* 821DC078h case    9:*/		return 0x821DC07C;
		  /* 821DC07Ch */ case   10:  		/* stb R16, <#[R1 + 80]> */
		/* 821DC07Ch case   10:*/		cpu::mem::store8( regs, regs.R16, (uint32)(regs.R1 + 0x00000050) );
		/* 821DC07Ch case   10:*/		return 0x821DC080;
	}
	return 0x821DC080;
} // Block from 821DC054h-821DC080h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821DC080h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC080);
		  /* 821DC080h */ case    0:  		/* lwz R10, <#[R19 + 40]> */
		/* 821DC080h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x00000028) );
		/* 821DC080h case    0:*/		return 0x821DC084;
		  /* 821DC084h */ case    1:  		/* mr R20, R16 */
		/* 821DC084h case    1:*/		regs.R20 = regs.R16;
		/* 821DC084h case    1:*/		return 0x821DC088;
		  /* 821DC088h */ case    2:  		/* lwz R11, <#[R19 + 4]> */
		/* 821DC088h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000004) );
		/* 821DC088h case    2:*/		return 0x821DC08C;
		  /* 821DC08Ch */ case    3:  		/* ori R10, R10, 4096 */
		/* 821DC08Ch case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1000);
		/* 821DC08Ch case    3:*/		return 0x821DC090;
		  /* 821DC090h */ case    4:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821DC090h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821DC090h case    4:*/		return 0x821DC094;
		  /* 821DC094h */ case    5:  		/* stw R10, <#[R19 + 40]> */
		/* 821DC094h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R19 + 0x00000028) );
		/* 821DC094h case    5:*/		return 0x821DC098;
		  /* 821DC098h */ case    6:  		/* bc 4, CR0_EQ, 2480 */
		/* 821DC098h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821DCA48;  }
		/* 821DC098h case    6:*/		return 0x821DC09C;
		  /* 821DC09Ch */ case    7:  		/* mr R22, R11 */
		/* 821DC09Ch case    7:*/		regs.R22 = regs.R11;
		/* 821DC09Ch case    7:*/		return 0x821DC0A0;
		  /* 821DC0A0h */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 821DC0A0h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DC0A0h case    8:*/		return 0x821DC0A4;
		  /* 821DC0A4h */ case    9:  		/* bc 12, CR0_EQ, 2468 */
		/* 821DC0A4h case    9:*/		if ( regs.CR[0].eq ) { return 0x821DCA48;  }
		/* 821DC0A4h case    9:*/		return 0x821DC0A8;
		  /* 821DC0A8h */ case   10:  		/* lwz R11, <#[R22 + 12]> */
		/* 821DC0A8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x0000000C) );
		/* 821DC0A8h case   10:*/		return 0x821DC0AC;
		  /* 821DC0ACh */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821DC0ACh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC0ACh case   11:*/		return 0x821DC0B0;
		  /* 821DC0B0h */ case   12:  		/* bc 12, CR6_EQ, 16 */
		/* 821DC0B0h case   12:*/		if ( regs.CR[6].eq ) { return 0x821DC0C0;  }
		/* 821DC0B0h case   12:*/		return 0x821DC0B4;
		  /* 821DC0B4h */ case   13:  		/* lwz R11, <#[R11]> */
		/* 821DC0B4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821DC0B4h case   13:*/		return 0x821DC0B8;
		  /* 821DC0B8h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821DC0B8h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC0B8h case   14:*/		return 0x821DC0BC;
		  /* 821DC0BCh */ case   15:  		/* bc 4, CR6_EQ, 32 */
		/* 821DC0BCh case   15:*/		if ( !regs.CR[6].eq ) { return 0x821DC0DC;  }
		/* 821DC0BCh case   15:*/		return 0x821DC0C0;
	}
	return 0x821DC0C0;
} // Block from 821DC080h-821DC0C0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821DC0C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC0C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC0C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC0C0);
		  /* 821DC0C0h */ case    0:  		/* lwz R11, <#[R22 + 20]> */
		/* 821DC0C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000014) );
		/* 821DC0C0h case    0:*/		return 0x821DC0C4;
		  /* 821DC0C4h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DC0C4h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DC0C4h case    1:*/		return 0x821DC0C8;
		  /* 821DC0C8h */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 821DC0C8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821DC0DC;  }
		/* 821DC0C8h case    2:*/		return 0x821DC0CC;
		  /* 821DC0CCh */ case    3:  		/* lwz R11, <#[R22 + 48]> */
		/* 821DC0CCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000030) );
		/* 821DC0CCh case    3:*/		return 0x821DC0D0;
		  /* 821DC0D0h */ case    4:  		/* rlwinm. R11, R11, 12, 31, 31 */
		/* 821DC0D0h case    4:*/		cpu::op::rlwinm<1,12,31,31>(regs,&regs.R11,regs.R11);
		/* 821DC0D0h case    4:*/		return 0x821DC0D4;
		  /* 821DC0D4h */ case    5:  		/* bc 4, CR0_EQ, 8 */
		/* 821DC0D4h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821DC0DC;  }
		/* 821DC0D4h case    5:*/		return 0x821DC0D8;
		  /* 821DC0D8h */ case    6:  		/* addi R20, R20, 1 */
		/* 821DC0D8h case    6:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x1);
		/* 821DC0D8h case    6:*/		return 0x821DC0DC;
	}
	return 0x821DC0DC;
} // Block from 821DC0C0h-821DC0DCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DC0DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC0DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC0DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC0DC);
		  /* 821DC0DCh */ case    0:  		/* lwz R11, <#[R22 + 76]> */
		/* 821DC0DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x0000004C) );
		/* 821DC0DCh case    0:*/		return 0x821DC0E0;
		  /* 821DC0E0h */ case    1:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 821DC0E0h case    1:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 821DC0E0h case    1:*/		return 0x821DC0E4;
		  /* 821DC0E4h */ case    2:  		/* bc 4, CR0_EQ, 1392 */
		/* 821DC0E4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821DC654;  }
		/* 821DC0E4h case    2:*/		return 0x821DC0E8;
		  /* 821DC0E8h */ case    3:  		/* lwz R11, <#[R22 + 20]> */
		/* 821DC0E8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000014) );
		/* 821DC0E8h case    3:*/		return 0x821DC0EC;
		  /* 821DC0ECh */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DC0ECh case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DC0ECh case    4:*/		return 0x821DC0F0;
		  /* 821DC0F0h */ case    5:  		/* bc 12, CR0_EQ, 40 */
		/* 821DC0F0h case    5:*/		if ( regs.CR[0].eq ) { return 0x821DC118;  }
		/* 821DC0F0h case    5:*/		return 0x821DC0F4;
		  /* 821DC0F4h */ case    6:  		/* lwz R11, <#[R22 + 28]> */
		/* 821DC0F4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x0000001C) );
		/* 821DC0F4h case    6:*/		return 0x821DC0F8;
		  /* 821DC0F8h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DC0F8h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DC0F8h case    7:*/		return 0x821DC0FC;
		  /* 821DC0FCh */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 821DC0FCh case    8:*/		if ( regs.CR[0].eq ) { return 0x821DC10C;  }
		/* 821DC0FCh case    8:*/		return 0x821DC100;
		  /* 821DC100h */ case    9:  		/* lwz R11, <#[R22 + 36]> */
		/* 821DC100h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000024) );
		/* 821DC100h case    9:*/		return 0x821DC104;
		  /* 821DC104h */ case   10:  		/* addi R21, R22, 32 */
		/* 821DC104h case   10:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R22,0x20);
		/* 821DC104h case   10:*/		return 0x821DC108;
		  /* 821DC108h */ case   11:  		/* b 24 */
		/* 821DC108h case   11:*/		return 0x821DC120;
		/* 821DC108h case   11:*/		return 0x821DC10C;
	}
	return 0x821DC10C;
} // Block from 821DC0DCh-821DC10Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821DC10Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC10C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC10C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC10C);
		  /* 821DC10Ch */ case    0:  		/* lwz R11, <#[R22 + 28]> */
		/* 821DC10Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x0000001C) );
		/* 821DC10Ch case    0:*/		return 0x821DC110;
		  /* 821DC110h */ case    1:  		/* addi R21, R22, 24 */
		/* 821DC110h case    1:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R22,0x18);
		/* 821DC110h case    1:*/		return 0x821DC114;
		  /* 821DC114h */ case    2:  		/* b 12 */
		/* 821DC114h case    2:*/		return 0x821DC120;
		/* 821DC114h case    2:*/		return 0x821DC118;
	}
	return 0x821DC118;
} // Block from 821DC10Ch-821DC118h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DC118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC118);
		  /* 821DC118h */ case    0:  		/* lwz R11, <#[R22 + 20]> */
		/* 821DC118h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000014) );
		/* 821DC118h case    0:*/		return 0x821DC11C;
		  /* 821DC11Ch */ case    1:  		/* addi R21, R22, 16 */
		/* 821DC11Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R22,0x10);
		/* 821DC11Ch case    1:*/		return 0x821DC120;
	}
	return 0x821DC120;
} // Block from 821DC118h-821DC120h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DC120h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC120);
		  /* 821DC120h */ case    0:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DC120h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DC120h case    0:*/		return 0x821DC124;
		  /* 821DC124h */ case    1:  		/* addic R10, R10, -1 */
		/* 821DC124h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821DC124h case    1:*/		return 0x821DC128;
		  /* 821DC128h */ case    2:  		/* subfe R10, R10, R10 */
		/* 821DC128h case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821DC128h case    2:*/		return 0x821DC12C;
		  /* 821DC12Ch */ case    3:  		/* and R23, R10, R11 */
		/* 821DC12Ch case    3:*/		cpu::op::and<0>(regs,&regs.R23,regs.R10,regs.R11);
		/* 821DC12Ch case    3:*/		return 0x821DC130;
		  /* 821DC130h */ case    4:  		/* b 1308 */
		/* 821DC130h case    4:*/		return 0x821DC64C;
		/* 821DC130h case    4:*/		return 0x821DC134;
		  /* 821DC134h */ case    5:  		/* lwz R25, <#[R23 + 4]> */
		/* 821DC134h case    5:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R23 + 0x00000004) );
		/* 821DC134h case    5:*/		return 0x821DC138;
		  /* 821DC138h */ case    6:  		/* cmplwi CR6, R25, 0 */
		/* 821DC138h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821DC138h case    6:*/		return 0x821DC13C;
		  /* 821DC13Ch */ case    7:  		/* bc 12, CR6_EQ, 1188 */
		/* 821DC13Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x821DC5E0;  }
		/* 821DC13Ch case    7:*/		return 0x821DC140;
		  /* 821DC140h */ case    8:  		/* lwz R27, <#[R25 + 16]> */
		/* 821DC140h case    8:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R25 + 0x00000010) );
		/* 821DC140h case    8:*/		return 0x821DC144;
		  /* 821DC144h */ case    9:  		/* cmplwi CR6, R27, 0 */
		/* 821DC144h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821DC144h case    9:*/		return 0x821DC148;
		  /* 821DC148h */ case   10:  		/* bc 12, CR6_EQ, 820 */
		/* 821DC148h case   10:*/		if ( regs.CR[6].eq ) { return 0x821DC47C;  }
		/* 821DC148h case   10:*/		return 0x821DC14C;
		  /* 821DC14Ch */ case   11:  		/* lwz R24, <#[R27 + 28]> */
		/* 821DC14Ch case   11:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R27 + 0x0000001C) );
		/* 821DC14Ch case   11:*/		return 0x821DC150;
		  /* 821DC150h */ case   12:  		/* cmplw CR6, R24, R22 */
		/* 821DC150h case   12:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R22);
		/* 821DC150h case   12:*/		return 0x821DC154;
		  /* 821DC154h */ case   13:  		/* bc 12, CR6_EQ, 808 */
		/* 821DC154h case   13:*/		if ( regs.CR[6].eq ) { return 0x821DC47C;  }
		/* 821DC154h case   13:*/		return 0x821DC158;
		  /* 821DC158h */ case   14:  		/* lwz R31, <#[R27 + 8]> */
		/* 821DC158h case   14:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + 0x00000008) );
		/* 821DC158h case   14:*/		return 0x821DC15C;
		  /* 821DC15Ch */ case   15:  		/* rlwinm R11, R31, 25, 25, 31 */
		/* 821DC15Ch case   15:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R31);
		/* 821DC15Ch case   15:*/		return 0x821DC160;
		  /* 821DC160h */ case   16:  		/* cmplwi CR6, R11, 96 */
		/* 821DC160h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000060);
		/* 821DC160h case   16:*/		return 0x821DC164;
		  /* 821DC164h */ case   17:  		/* bc 12, CR6_EQ, 792 */
		/* 821DC164h case   17:*/		if ( regs.CR[6].eq ) { return 0x821DC47C;  }
		/* 821DC164h case   17:*/		return 0x821DC168;
		  /* 821DC168h */ case   18:  		/* cmplwi CR6, R11, 112 */
		/* 821DC168h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000070);
		/* 821DC168h case   18:*/		return 0x821DC16C;
		  /* 821DC16Ch */ case   19:  		/* bc 12, CR6_EQ, 784 */
		/* 821DC16Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x821DC47C;  }
		/* 821DC16Ch case   19:*/		return 0x821DC170;
		  /* 821DC170h */ case   20:  		/* mr R3, R27 */
		/* 821DC170h case   20:*/		regs.R3 = regs.R27;
		/* 821DC170h case   20:*/		return 0x821DC174;
		  /* 821DC174h */ case   21:  		/* bl -436684 */
		/* 821DC174h case   21:*/		regs.LR = 0x821DC178; return 0x821717A8;
		/* 821DC174h case   21:*/		return 0x821DC178;
		  /* 821DC178h */ case   22:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821DC178h case   22:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821DC178h case   22:*/		return 0x821DC17C;
		  /* 821DC17Ch */ case   23:  		/* bc 12, CR0_EQ, 768 */
		/* 821DC17Ch case   23:*/		if ( regs.CR[0].eq ) { return 0x821DC47C;  }
		/* 821DC17Ch case   23:*/		return 0x821DC180;
		  /* 821DC180h */ case   24:  		/* rlwinm. R11, R31, 7, 31, 31 */
		/* 821DC180h case   24:*/		cpu::op::rlwinm<1,7,31,31>(regs,&regs.R11,regs.R31);
		/* 821DC180h case   24:*/		return 0x821DC184;
		  /* 821DC184h */ case   25:  		/* bc 4, CR0_EQ, 760 */
		/* 821DC184h case   25:*/		if ( !regs.CR[0].eq ) { return 0x821DC47C;  }
		/* 821DC184h case   25:*/		return 0x821DC188;
		  /* 821DC188h */ case   26:  		/* rlwinm. R11, R31, 27, 31, 31 */
		/* 821DC188h case   26:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R11,regs.R31);
		/* 821DC188h case   26:*/		return 0x821DC18C;
		  /* 821DC18Ch */ case   27:  		/* bc 4, CR0_EQ, 752 */
		/* 821DC18Ch case   27:*/		if ( !regs.CR[0].eq ) { return 0x821DC47C;  }
		/* 821DC18Ch case   27:*/		return 0x821DC190;
		  /* 821DC190h */ case   28:  		/* rlwinm. R11, R31, 26, 31, 31 */
		/* 821DC190h case   28:*/		cpu::op::rlwinm<1,26,31,31>(regs,&regs.R11,regs.R31);
		/* 821DC190h case   28:*/		return 0x821DC194;
		  /* 821DC194h */ case   29:  		/* bc 4, CR0_EQ, 744 */
		/* 821DC194h case   29:*/		if ( !regs.CR[0].eq ) { return 0x821DC47C;  }
		/* 821DC194h case   29:*/		return 0x821DC198;
		  /* 821DC198h */ case   30:  		/* lwz R30, <#[R24 + 52]> */
		/* 821DC198h case   30:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R24 + 0x00000034) );
		/* 821DC198h case   30:*/		return 0x821DC19C;
		  /* 821DC19Ch */ case   31:  		/* cmplwi CR6, R30, 0 */
		/* 821DC19Ch case   31:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821DC19Ch case   31:*/		return 0x821DC1A0;
		  /* 821DC1A0h */ case   32:  		/* bc 12, CR6_EQ, 732 */
		/* 821DC1A0h case   32:*/		if ( regs.CR[6].eq ) { return 0x821DC47C;  }
		/* 821DC1A0h case   32:*/		return 0x821DC1A4;
		  /* 821DC1A4h */ case   33:  		/* lwz R11, <#[R30 + 12]> */
		/* 821DC1A4h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821DC1A4h case   33:*/		return 0x821DC1A8;
		  /* 821DC1A8h */ case   34:  		/* cmplwi CR6, R11, 0 */
		/* 821DC1A8h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC1A8h case   34:*/		return 0x821DC1AC;
		  /* 821DC1ACh */ case   35:  		/* bc 12, CR6_EQ, 20 */
		/* 821DC1ACh case   35:*/		if ( regs.CR[6].eq ) { return 0x821DC1C0;  }
		/* 821DC1ACh case   35:*/		return 0x821DC1B0;
		  /* 821DC1B0h */ case   36:  		/* lwz R11, <#[R11 + 8]> */
		/* 821DC1B0h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821DC1B0h case   36:*/		return 0x821DC1B4;
		  /* 821DC1B4h */ case   37:  		/* cmplwi CR6, R11, 0 */
		/* 821DC1B4h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC1B4h case   37:*/		return 0x821DC1B8;
		  /* 821DC1B8h */ case   38:  		/* mr R11, R15 */
		/* 821DC1B8h case   38:*/		regs.R11 = regs.R15;
		/* 821DC1B8h case   38:*/		return 0x821DC1BC;
		  /* 821DC1BCh */ case   39:  		/* bc 4, CR6_EQ, 8 */
		/* 821DC1BCh case   39:*/		if ( !regs.CR[6].eq ) { return 0x821DC1C4;  }
		/* 821DC1BCh case   39:*/		return 0x821DC1C0;
	}
	return 0x821DC1C0;
} // Block from 821DC120h-821DC1C0h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821DC1C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC1C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC1C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC1C0);
		  /* 821DC1C0h */ case    0:  		/* mr R11, R16 */
		/* 821DC1C0h case    0:*/		regs.R11 = regs.R16;
		/* 821DC1C0h case    0:*/		return 0x821DC1C4;
	}
	return 0x821DC1C4;
} // Block from 821DC1C0h-821DC1C4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DC1C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC1C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC1C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC1C4);
		  /* 821DC1C4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DC1C4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DC1C4h case    0:*/		return 0x821DC1C8;
		  /* 821DC1C8h */ case    1:  		/* bc 12, CR0_EQ, 692 */
		/* 821DC1C8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DC47C;  }
		/* 821DC1C8h case    1:*/		return 0x821DC1CC;
		  /* 821DC1CCh */ case    2:  		/* lwz R11, <#[R24 + 8]> */
		/* 821DC1CCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821DC1CCh case    2:*/		return 0x821DC1D0;
		  /* 821DC1D0h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821DC1D0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC1D0h case    3:*/		return 0x821DC1D4;
		  /* 821DC1D4h */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 821DC1D4h case    4:*/		if ( regs.CR[6].eq ) { return 0x821DC1E8;  }
		/* 821DC1D4h case    4:*/		return 0x821DC1D8;
		  /* 821DC1D8h */ case    5:  		/* lwz R11, <#[R11 + 12]> */
		/* 821DC1D8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DC1D8h case    5:*/		return 0x821DC1DC;
		  /* 821DC1DCh */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821DC1DCh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC1DCh case    6:*/		return 0x821DC1E0;
		  /* 821DC1E0h */ case    7:  		/* mr R11, R15 */
		/* 821DC1E0h case    7:*/		regs.R11 = regs.R15;
		/* 821DC1E0h case    7:*/		return 0x821DC1E4;
		  /* 821DC1E4h */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 821DC1E4h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821DC1EC;  }
		/* 821DC1E4h case    8:*/		return 0x821DC1E8;
	}
	return 0x821DC1E8;
} // Block from 821DC1C4h-821DC1E8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821DC1E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC1E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC1E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC1E8);
		  /* 821DC1E8h */ case    0:  		/* mr R11, R16 */
		/* 821DC1E8h case    0:*/		regs.R11 = regs.R16;
		/* 821DC1E8h case    0:*/		return 0x821DC1EC;
	}
	return 0x821DC1EC;
} // Block from 821DC1E8h-821DC1ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DC1ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC1EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC1EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC1EC);
		  /* 821DC1ECh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DC1ECh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DC1ECh case    0:*/		return 0x821DC1F0;
		  /* 821DC1F0h */ case    1:  		/* bc 4, CR0_EQ, 652 */
		/* 821DC1F0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821DC47C;  }
		/* 821DC1F0h case    1:*/		return 0x821DC1F4;
		  /* 821DC1F4h */ case    2:  		/* lwz R11, <#[R30 + 76]> */
		/* 821DC1F4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000004C) );
		/* 821DC1F4h case    2:*/		return 0x821DC1F8;
		  /* 821DC1F8h */ case    3:  		/* lwz R10, <#[R24 + 76]> */
		/* 821DC1F8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x0000004C) );
		/* 821DC1F8h case    3:*/		return 0x821DC1FC;
		  /* 821DC1FCh */ case    4:  		/* xor R11, R11, R10 */
		/* 821DC1FCh case    4:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821DC1FCh case    4:*/		return 0x821DC200;
		  /* 821DC200h */ case    5:  		/* rlwinm. R11, R11, 0, 13, 31 */
		/* 821DC200h case    5:*/		cpu::op::rlwinm<1,0,13,31>(regs,&regs.R11,regs.R11);
		/* 821DC200h case    5:*/		return 0x821DC204;
		  /* 821DC204h */ case    6:  		/* bc 4, CR0_EQ, 632 */
		/* 821DC204h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821DC47C;  }
		/* 821DC204h case    6:*/		return 0x821DC208;
		  /* 821DC208h */ case    7:  		/* mr R3, R27 */
		/* 821DC208h case    7:*/		regs.R3 = regs.R27;
		/* 821DC208h case    7:*/		return 0x821DC20C;
		  /* 821DC20Ch */ case    8:  		/* bl -489612 */
		/* 821DC20Ch case    8:*/		regs.LR = 0x821DC210; return 0x82164980;
		/* 821DC20Ch case    8:*/		return 0x821DC210;
		  /* 821DC210h */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821DC210h case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821DC210h case    9:*/		return 0x821DC214;
		  /* 821DC214h */ case   10:  		/* bc 4, CR0_EQ, 616 */
		/* 821DC214h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821DC47C;  }
		/* 821DC214h case   10:*/		return 0x821DC218;
		  /* 821DC218h */ case   11:  		/* lwz R11, <#[R27]> */
		/* 821DC218h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821DC218h case   11:*/		return 0x821DC21C;
		  /* 821DC21Ch */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821DC21Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC21Ch case   12:*/		return 0x821DC220;
		  /* 821DC220h */ case   13:  		/* bc 12, CR6_EQ, 64 */
		/* 821DC220h case   13:*/		if ( regs.CR[6].eq ) { return 0x821DC260;  }
		/* 821DC220h case   13:*/		return 0x821DC224;
		  /* 821DC224h */ case   14:  		/* lwz R10, <#[R11 + 12]> */
		/* 821DC224h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DC224h case   14:*/		return 0x821DC228;
		  /* 821DC228h */ case   15:  		/* lwz R9, <#[R30 + 40]> */
		/* 821DC228h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000028) );
		/* 821DC228h case   15:*/		return 0x821DC22C;
		  /* 821DC22Ch */ case   16:  		/* lwz R10, <#[R10 + 28]> */
		/* 821DC22Ch case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000001C) );
		/* 821DC22Ch case   16:*/		return 0x821DC230;
		  /* 821DC230h */ case   17:  		/* lwz R10, <#[R10 + 48]> */
		/* 821DC230h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000030) );
		/* 821DC230h case   17:*/		return 0x821DC234;
		  /* 821DC234h */ case   18:  		/* rlwinm R8, R10, 0, 13, 31 */
		/* 821DC234h case   18:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R10);
		/* 821DC234h case   18:*/		return 0x821DC238;
		  /* 821DC238h */ case   19:  		/* rlwinm R10, R8, 27, 5, 31 */
		/* 821DC238h case   19:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R8);
		/* 821DC238h case   19:*/		return 0x821DC23C;
		  /* 821DC23Ch */ case   20:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 821DC23Ch case   20:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 821DC23Ch case   20:*/		return 0x821DC240;
		  /* 821DC240h */ case   21:  		/* addi R10, R10, 1 */
		/* 821DC240h case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821DC240h case   21:*/		return 0x821DC244;
		  /* 821DC244h */ case   22:  		/* slw R8, R15, R8 */
		/* 821DC244h case   22:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R15,regs.R8);
		/* 821DC244h case   22:*/		return 0x821DC248;
		  /* 821DC248h */ case   23:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821DC248h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821DC248h case   23:*/		return 0x821DC24C;
		  /* 821DC24Ch */ case   24:  		/* lwzx R10, <#[R10 + R9]> */
		/* 821DC24Ch case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821DC24Ch case   24:*/		return 0x821DC250;
		  /* 821DC250h */ case   25:  		/* and. R10, R10, R8 */
		/* 821DC250h case   25:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821DC250h case   25:*/		return 0x821DC254;
		  /* 821DC254h */ case   26:  		/* bc 12, CR0_EQ, 552 */
		/* 821DC254h case   26:*/		if ( regs.CR[0].eq ) { return 0x821DC47C;  }
		/* 821DC254h case   26:*/		return 0x821DC258;
		  /* 821DC258h */ case   27:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DC258h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DC258h case   27:*/		return 0x821DC25C;
		  /* 821DC25Ch */ case   28:  		/* b -64 */
		/* 821DC25Ch case   28:*/		return 0x821DC21C;
		/* 821DC25Ch case   28:*/		return 0x821DC260;
	}
	return 0x821DC260;
} // Block from 821DC1ECh-821DC260h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821DC260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC260);
		  /* 821DC260h */ case    0:  		/* lwz R29, <#[R23 + 4]> */
		/* 821DC260h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R23 + 0x00000004) );
		/* 821DC260h case    0:*/		return 0x821DC264;
		  /* 821DC264h */ case    1:  		/* mr R26, R16 */
		/* 821DC264h case    1:*/		regs.R26 = regs.R16;
		/* 821DC264h case    1:*/		return 0x821DC268;
		  /* 821DC268h */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 821DC268h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821DC268h case    2:*/		return 0x821DC26C;
		  /* 821DC26Ch */ case    3:  		/* bc 12, CR6_EQ, 528 */
		/* 821DC26Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821DC47C;  }
		/* 821DC26Ch case    3:*/		return 0x821DC270;
		  /* 821DC270h */ case    4:  		/* lwz R28, <#[R29 + 16]> */
		/* 821DC270h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R29 + 0x00000010) );
		/* 821DC270h case    4:*/		return 0x821DC274;
		  /* 821DC274h */ case    5:  		/* cmplwi CR6, R28, 0 */
		/* 821DC274h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821DC274h case    5:*/		return 0x821DC278;
		  /* 821DC278h */ case    6:  		/* bc 12, CR6_EQ, 508 */
		/* 821DC278h case    6:*/		if ( regs.CR[6].eq ) { return 0x821DC474;  }
		/* 821DC278h case    6:*/		return 0x821DC27C;
		  /* 821DC27Ch */ case    7:  		/* cmplw CR6, R28, R27 */
		/* 821DC27Ch case    7:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R27);
		/* 821DC27Ch case    7:*/		return 0x821DC280;
		  /* 821DC280h */ case    8:  		/* bc 12, CR6_EQ, 500 */
		/* 821DC280h case    8:*/		if ( regs.CR[6].eq ) { return 0x821DC474;  }
		/* 821DC280h case    8:*/		return 0x821DC284;
		  /* 821DC284h */ case    9:  		/* lwz R10, <#[R28 + 28]> */
		/* 821DC284h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x0000001C) );
		/* 821DC284h case    9:*/		return 0x821DC288;
		  /* 821DC288h */ case   10:  		/* cmplw CR6, R10, R22 */
		/* 821DC288h case   10:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R22);
		/* 821DC288h case   10:*/		return 0x821DC28C;
		  /* 821DC28Ch */ case   11:  		/* bc 12, CR6_EQ, 488 */
		/* 821DC28Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x821DC474;  }
		/* 821DC28Ch case   11:*/		return 0x821DC290;
		  /* 821DC290h */ case   12:  		/* cmplw CR6, R10, R24 */
		/* 821DC290h case   12:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R24);
		/* 821DC290h case   12:*/		return 0x821DC294;
		  /* 821DC294h */ case   13:  		/* bc 12, CR6_EQ, 480 */
		/* 821DC294h case   13:*/		if ( regs.CR[6].eq ) { return 0x821DC474;  }
		/* 821DC294h case   13:*/		return 0x821DC298;
		  /* 821DC298h */ case   14:  		/* lwz R9, <#[R27 + 8]> */
		/* 821DC298h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000008) );
		/* 821DC298h case   14:*/		return 0x821DC29C;
		  /* 821DC29Ch */ case   15:  		/* lwz R11, <#[R28 + 8]> */
		/* 821DC29Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821DC29Ch case   15:*/		return 0x821DC2A0;
		  /* 821DC2A0h */ case   16:  		/* xor R9, R11, R9 */
		/* 821DC2A0h case   16:*/		cpu::op::xor<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 821DC2A0h case   16:*/		return 0x821DC2A4;
		  /* 821DC2A4h */ case   17:  		/* rlwinm. R9, R9, 0, 18, 24 */
		/* 821DC2A4h case   17:*/		cpu::op::rlwinm<1,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821DC2A4h case   17:*/		return 0x821DC2A8;
		  /* 821DC2A8h */ case   18:  		/* bc 4, CR0_EQ, 460 */
		/* 821DC2A8h case   18:*/		if ( !regs.CR[0].eq ) { return 0x821DC474;  }
		/* 821DC2A8h case   18:*/		return 0x821DC2AC;
		  /* 821DC2ACh */ case   19:  		/* rlwinm. R9, R11, 7, 31, 31 */
		/* 821DC2ACh case   19:*/		cpu::op::rlwinm<1,7,31,31>(regs,&regs.R9,regs.R11);
		/* 821DC2ACh case   19:*/		return 0x821DC2B0;
		  /* 821DC2B0h */ case   20:  		/* bc 4, CR0_EQ, 452 */
		/* 821DC2B0h case   20:*/		if ( !regs.CR[0].eq ) { return 0x821DC474;  }
		/* 821DC2B0h case   20:*/		return 0x821DC2B4;
		  /* 821DC2B4h */ case   21:  		/* rlwinm. R11, R11, 27, 31, 31 */
		/* 821DC2B4h case   21:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R11,regs.R11);
		/* 821DC2B4h case   21:*/		return 0x821DC2B8;
		  /* 821DC2B8h */ case   22:  		/* bc 4, CR0_EQ, 444 */
		/* 821DC2B8h case   22:*/		if ( !regs.CR[0].eq ) { return 0x821DC474;  }
		/* 821DC2B8h case   22:*/		return 0x821DC2BC;
		  /* 821DC2BCh */ case   23:  		/* lwz R11, <#[R10 + 52]> */
		/* 821DC2BCh case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000034) );
		/* 821DC2BCh case   23:*/		return 0x821DC2C0;
		  /* 821DC2C0h */ case   24:  		/* cmplw CR6, R30, R11 */
		/* 821DC2C0h case   24:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821DC2C0h case   24:*/		return 0x821DC2C4;
		  /* 821DC2C4h */ case   25:  		/* bc 4, CR6_EQ, 432 */
		/* 821DC2C4h case   25:*/		if ( !regs.CR[6].eq ) { return 0x821DC474;  }
		/* 821DC2C4h case   25:*/		return 0x821DC2C8;
		  /* 821DC2C8h */ case   26:  		/* lwz R11, <#[R10 + 8]> */
		/* 821DC2C8h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821DC2C8h case   26:*/		return 0x821DC2CC;
		  /* 821DC2CCh */ case   27:  		/* cmplwi CR6, R11, 0 */
		/* 821DC2CCh case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC2CCh case   27:*/		return 0x821DC2D0;
		  /* 821DC2D0h */ case   28:  		/* bc 12, CR6_EQ, 20 */
		/* 821DC2D0h case   28:*/		if ( regs.CR[6].eq ) { return 0x821DC2E4;  }
		/* 821DC2D0h case   28:*/		return 0x821DC2D4;
		  /* 821DC2D4h */ case   29:  		/* lwz R11, <#[R11 + 12]> */
		/* 821DC2D4h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DC2D4h case   29:*/		return 0x821DC2D8;
		  /* 821DC2D8h */ case   30:  		/* cmplwi CR6, R11, 0 */
		/* 821DC2D8h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC2D8h case   30:*/		return 0x821DC2DC;
		  /* 821DC2DCh */ case   31:  		/* mr R11, R15 */
		/* 821DC2DCh case   31:*/		regs.R11 = regs.R15;
		/* 821DC2DCh case   31:*/		return 0x821DC2E0;
		  /* 821DC2E0h */ case   32:  		/* bc 4, CR6_EQ, 8 */
		/* 821DC2E0h case   32:*/		if ( !regs.CR[6].eq ) { return 0x821DC2E8;  }
		/* 821DC2E0h case   32:*/		return 0x821DC2E4;
	}
	return 0x821DC2E4;
} // Block from 821DC260h-821DC2E4h (33 instructions)

//////////////////////////////////////////////////////
// Block at 821DC2E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC2E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC2E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC2E4);
		  /* 821DC2E4h */ case    0:  		/* mr R11, R16 */
		/* 821DC2E4h case    0:*/		regs.R11 = regs.R16;
		/* 821DC2E4h case    0:*/		return 0x821DC2E8;
	}
	return 0x821DC2E8;
} // Block from 821DC2E4h-821DC2E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DC2E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC2E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC2E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC2E8);
		  /* 821DC2E8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DC2E8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DC2E8h case    0:*/		return 0x821DC2EC;
		  /* 821DC2ECh */ case    1:  		/* bc 4, CR0_EQ, 392 */
		/* 821DC2ECh case    1:*/		if ( !regs.CR[0].eq ) { return 0x821DC474;  }
		/* 821DC2ECh case    1:*/		return 0x821DC2F0;
		  /* 821DC2F0h */ case    2:  		/* lwz R11, <#[R10 + 76]> */
		/* 821DC2F0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000004C) );
		/* 821DC2F0h case    2:*/		return 0x821DC2F4;
		  /* 821DC2F4h */ case    3:  		/* lwz R10, <#[R24 + 76]> */
		/* 821DC2F4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x0000004C) );
		/* 821DC2F4h case    3:*/		return 0x821DC2F8;
		  /* 821DC2F8h */ case    4:  		/* xor R11, R11, R10 */
		/* 821DC2F8h case    4:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821DC2F8h case    4:*/		return 0x821DC2FC;
		  /* 821DC2FCh */ case    5:  		/* rlwinm. R11, R11, 0, 13, 31 */
		/* 821DC2FCh case    5:*/		cpu::op::rlwinm<1,0,13,31>(regs,&regs.R11,regs.R11);
		/* 821DC2FCh case    5:*/		return 0x821DC300;
		  /* 821DC300h */ case    6:  		/* bc 4, CR0_EQ, 372 */
		/* 821DC300h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821DC474;  }
		/* 821DC300h case    6:*/		return 0x821DC304;
		  /* 821DC304h */ case    7:  		/* mr R3, R28 */
		/* 821DC304h case    7:*/		regs.R3 = regs.R28;
		/* 821DC304h case    7:*/		return 0x821DC308;
		  /* 821DC308h */ case    8:  		/* bl -489864 */
		/* 821DC308h case    8:*/		regs.LR = 0x821DC30C; return 0x82164980;
		/* 821DC308h case    8:*/		return 0x821DC30C;
		  /* 821DC30Ch */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821DC30Ch case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821DC30Ch case    9:*/		return 0x821DC310;
		  /* 821DC310h */ case   10:  		/* bc 4, CR0_EQ, 356 */
		/* 821DC310h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821DC474;  }
		/* 821DC310h case   10:*/		return 0x821DC314;
		  /* 821DC314h */ case   11:  		/* lwz R11, <#[R28]> */
		/* 821DC314h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821DC314h case   11:*/		return 0x821DC318;
		  /* 821DC318h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821DC318h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC318h case   12:*/		return 0x821DC31C;
		  /* 821DC31Ch */ case   13:  		/* bc 12, CR6_EQ, 64 */
		/* 821DC31Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x821DC35C;  }
		/* 821DC31Ch case   13:*/		return 0x821DC320;
		  /* 821DC320h */ case   14:  		/* lwz R10, <#[R11 + 12]> */
		/* 821DC320h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DC320h case   14:*/		return 0x821DC324;
		  /* 821DC324h */ case   15:  		/* lwz R9, <#[R30 + 40]> */
		/* 821DC324h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000028) );
		/* 821DC324h case   15:*/		return 0x821DC328;
		  /* 821DC328h */ case   16:  		/* lwz R10, <#[R10 + 28]> */
		/* 821DC328h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000001C) );
		/* 821DC328h case   16:*/		return 0x821DC32C;
		  /* 821DC32Ch */ case   17:  		/* lwz R10, <#[R10 + 48]> */
		/* 821DC32Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000030) );
		/* 821DC32Ch case   17:*/		return 0x821DC330;
		  /* 821DC330h */ case   18:  		/* rlwinm R8, R10, 0, 13, 31 */
		/* 821DC330h case   18:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R10);
		/* 821DC330h case   18:*/		return 0x821DC334;
		  /* 821DC334h */ case   19:  		/* rlwinm R10, R8, 27, 5, 31 */
		/* 821DC334h case   19:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R8);
		/* 821DC334h case   19:*/		return 0x821DC338;
		  /* 821DC338h */ case   20:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 821DC338h case   20:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 821DC338h case   20:*/		return 0x821DC33C;
		  /* 821DC33Ch */ case   21:  		/* addi R10, R10, 1 */
		/* 821DC33Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821DC33Ch case   21:*/		return 0x821DC340;
		  /* 821DC340h */ case   22:  		/* slw R8, R15, R8 */
		/* 821DC340h case   22:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R15,regs.R8);
		/* 821DC340h case   22:*/		return 0x821DC344;
		  /* 821DC344h */ case   23:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821DC344h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821DC344h case   23:*/		return 0x821DC348;
		  /* 821DC348h */ case   24:  		/* lwzx R10, <#[R10 + R9]> */
		/* 821DC348h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821DC348h case   24:*/		return 0x821DC34C;
		  /* 821DC34Ch */ case   25:  		/* and. R10, R10, R8 */
		/* 821DC34Ch case   25:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821DC34Ch case   25:*/		return 0x821DC350;
		  /* 821DC350h */ case   26:  		/* bc 12, CR0_EQ, 292 */
		/* 821DC350h case   26:*/		if ( regs.CR[0].eq ) { return 0x821DC474;  }
		/* 821DC350h case   26:*/		return 0x821DC354;
		  /* 821DC354h */ case   27:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DC354h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DC354h case   27:*/		return 0x821DC358;
		  /* 821DC358h */ case   28:  		/* b -64 */
		/* 821DC358h case   28:*/		return 0x821DC318;
		/* 821DC358h case   28:*/		return 0x821DC35C;
	}
	return 0x821DC35C;
} // Block from 821DC2E8h-821DC35Ch (29 instructions)

//////////////////////////////////////////////////////
// Block at 821DC35Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC35C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC35C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC35C);
		  /* 821DC35Ch */ case    0:  		/* mr R5, R19 */
		/* 821DC35Ch case    0:*/		regs.R5 = regs.R19;
		/* 821DC35Ch case    0:*/		return 0x821DC360;
		  /* 821DC360h */ case    1:  		/* mr R4, R28 */
		/* 821DC360h case    1:*/		regs.R4 = regs.R28;
		/* 821DC360h case    1:*/		return 0x821DC364;
		  /* 821DC364h */ case    2:  		/* mr R3, R27 */
		/* 821DC364h case    2:*/		regs.R3 = regs.R27;
		/* 821DC364h case    2:*/		return 0x821DC368;
		  /* 821DC368h */ case    3:  		/* bl 301488 */
		/* 821DC368h case    3:*/		regs.LR = 0x821DC36C; return 0x82225D18;
		/* 821DC368h case    3:*/		return 0x821DC36C;
		  /* 821DC36Ch */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821DC36Ch case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821DC36Ch case    4:*/		return 0x821DC370;
		  /* 821DC370h */ case    5:  		/* bc 12, CR0_EQ, 260 */
		/* 821DC370h case    5:*/		if ( regs.CR[0].eq ) { return 0x821DC474;  }
		/* 821DC370h case    5:*/		return 0x821DC374;
		  /* 821DC374h */ case    6:  		/* lwz R11, <#[R27 + 8]> */
		/* 821DC374h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821DC374h case    6:*/		return 0x821DC378;
		  /* 821DC378h */ case    7:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821DC378h case    7:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821DC378h case    7:*/		return 0x821DC37C;
		  /* 821DC37Ch */ case    8:  		/* cmplwi CR6, R4, 97 */
		/* 821DC37Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000061);
		/* 821DC37Ch case    8:*/		return 0x821DC380;
		  /* 821DC380h */ case    9:  		/* bc 12, CR6_EQ, 24 */
		/* 821DC380h case    9:*/		if ( regs.CR[6].eq ) { return 0x821DC398;  }
		/* 821DC380h case    9:*/		return 0x821DC384;
		  /* 821DC384h */ case   10:  		/* cmplwi CR6, R4, 99 */
		/* 821DC384h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000063);
		/* 821DC384h case   10:*/		return 0x821DC388;
		  /* 821DC388h */ case   11:  		/* bc 12, CR6_EQ, 16 */
		/* 821DC388h case   11:*/		if ( regs.CR[6].eq ) { return 0x821DC398;  }
		/* 821DC388h case   11:*/		return 0x821DC38C;
		  /* 821DC38Ch */ case   12:  		/* cmplwi CR6, R4, 100 */
		/* 821DC38Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000064);
		/* 821DC38Ch case   12:*/		return 0x821DC390;
		  /* 821DC390h */ case   13:  		/* mr R10, R16 */
		/* 821DC390h case   13:*/		regs.R10 = regs.R16;
		/* 821DC390h case   13:*/		return 0x821DC394;
		  /* 821DC394h */ case   14:  		/* bc 4, CR6_EQ, 8 */
		/* 821DC394h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821DC39C;  }
		/* 821DC394h case   14:*/		return 0x821DC398;
	}
	return 0x821DC398;
} // Block from 821DC35Ch-821DC398h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821DC398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC398);
		  /* 821DC398h */ case    0:  		/* mr R10, R15 */
		/* 821DC398h case    0:*/		regs.R10 = regs.R15;
		/* 821DC398h case    0:*/		return 0x821DC39C;
	}
	return 0x821DC39C;
} // Block from 821DC398h-821DC39Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DC39Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC39C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC39C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC39C);
		  /* 821DC39Ch */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821DC39Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821DC39Ch case    0:*/		return 0x821DC3A0;
		  /* 821DC3A0h */ case    1:  		/* bc 12, CR0_EQ, 136 */
		/* 821DC3A0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DC428;  }
		/* 821DC3A0h case    1:*/		return 0x821DC3A4;
		  /* 821DC3A4h */ case    2:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821DC3A4h case    2:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821DC3A4h case    2:*/		return 0x821DC3A8;
		  /* 821DC3A8h */ case    3:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821DC3A8h case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821DC3A8h case    3:*/		return 0x821DC3AC;
		  /* 821DC3ACh */ case    4:  		/* mr R3, R19 */
		/* 821DC3ACh case    4:*/		regs.R3 = regs.R19;
		/* 821DC3ACh case    4:*/		return 0x821DC3B0;
		  /* 821DC3B0h */ case    5:  		/* bl -491392 */
		/* 821DC3B0h case    5:*/		regs.LR = 0x821DC3B4; return 0x82164430;
		/* 821DC3B0h case    5:*/		return 0x821DC3B4;
		  /* 821DC3B4h */ case    6:  		/* addi R11, R27, -24 */
		/* 821DC3B4h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFE8);
		/* 821DC3B4h case    6:*/		return 0x821DC3B8;
		  /* 821DC3B8h */ case    7:  		/* lwz R10, <#[R28 + 8]> */
		/* 821DC3B8h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 821DC3B8h case    7:*/		return 0x821DC3BC;
		  /* 821DC3BCh */ case    8:  		/* add R31, R3, R11 */
		/* 821DC3BCh case    8:*/		cpu::op::add<0>(regs,&regs.R31,regs.R3,regs.R11);
		/* 821DC3BCh case    8:*/		return 0x821DC3C0;
		  /* 821DC3C0h */ case    9:  		/* rlwinm R6, R10, 18, 29, 31 */
		/* 821DC3C0h case    9:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R10);
		/* 821DC3C0h case    9:*/		return 0x821DC3C4;
		  /* 821DC3C4h */ case   10:  		/* rlwinm R5, R10, 13, 29, 31 */
		/* 821DC3C4h case   10:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R10);
		/* 821DC3C4h case   10:*/		return 0x821DC3C8;
		  /* 821DC3C8h */ case   11:  		/* rlwinm R4, R10, 25, 25, 31 */
		/* 821DC3C8h case   11:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R10);
		/* 821DC3C8h case   11:*/		return 0x821DC3CC;
		  /* 821DC3CCh */ case   12:  		/* mr R3, R19 */
		/* 821DC3CCh case   12:*/		regs.R3 = regs.R19;
		/* 821DC3CCh case   12:*/		return 0x821DC3D0;
		  /* 821DC3D0h */ case   13:  		/* bl -491424 */
		/* 821DC3D0h case   13:*/		regs.LR = 0x821DC3D4; return 0x82164430;
		/* 821DC3D0h case   13:*/		return 0x821DC3D4;
		  /* 821DC3D4h */ case   14:  		/* addi R10, R28, -24 */
		/* 821DC3D4h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R28,0xFFFFFFE8);
		/* 821DC3D4h case   14:*/		return 0x821DC3D8;
		  /* 821DC3D8h */ case   15:  		/* mr R11, R31 */
		/* 821DC3D8h case   15:*/		regs.R11 = regs.R31;
		/* 821DC3D8h case   15:*/		return 0x821DC3DC;
		  /* 821DC3DCh */ case   16:  		/* add R9, R3, R10 */
		/* 821DC3DCh case   16:*/		cpu::op::add<0>(regs,&regs.R9,regs.R3,regs.R10);
		/* 821DC3DCh case   16:*/		return 0x821DC3E0;
		  /* 821DC3E0h */ case   17:  		/* addi R8, R31, 20 */
		/* 821DC3E0h case   17:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0x14);
		/* 821DC3E0h case   17:*/		return 0x821DC3E4;
		  /* 821DC3E4h */ case   18:  		/* mr R10, R9 */
		/* 821DC3E4h case   18:*/		regs.R10 = regs.R9;
		/* 821DC3E4h case   18:*/		return 0x821DC3E8;
		  /* 821DC3E8h */ case   19:  		/* lbz R7, <#[R11]> */
		/* 821DC3E8h case   19:*/		cpu::mem::load8z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821DC3E8h case   19:*/		return 0x821DC3EC;
		  /* 821DC3ECh */ case   20:  		/* lbz R6, <#[R10]> */
		/* 821DC3ECh case   20:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 821DC3ECh case   20:*/		return 0x821DC3F0;
		  /* 821DC3F0h */ case   21:  		/* subf. R7, R6, R7 */
		/* 821DC3F0h case   21:*/		cpu::op::subf<1>(regs,&regs.R7,regs.R6,regs.R7);
		/* 821DC3F0h case   21:*/		return 0x821DC3F4;
		  /* 821DC3F4h */ case   22:  		/* bc 4, CR0_EQ, 20 */
		/* 821DC3F4h case   22:*/		if ( !regs.CR[0].eq ) { return 0x821DC408;  }
		/* 821DC3F4h case   22:*/		return 0x821DC3F8;
		  /* 821DC3F8h */ case   23:  		/* addi R11, R11, 1 */
		/* 821DC3F8h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821DC3F8h case   23:*/		return 0x821DC3FC;
		  /* 821DC3FCh */ case   24:  		/* addi R10, R10, 1 */
		/* 821DC3FCh case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821DC3FCh case   24:*/		return 0x821DC400;
		  /* 821DC400h */ case   25:  		/* cmpw CR6, R11, R8 */
		/* 821DC400h case   25:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R8);
		/* 821DC400h case   25:*/		return 0x821DC404;
		  /* 821DC404h */ case   26:  		/* bc 4, CR6_EQ, -28 */
		/* 821DC404h case   26:*/		if ( !regs.CR[6].eq ) { return 0x821DC3E8;  }
		/* 821DC404h case   26:*/		return 0x821DC408;
	}
	return 0x821DC408;
} // Block from 821DC39Ch-821DC408h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821DC408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC408);
		  /* 821DC408h */ case    0:  		/* cmpwi CR0, R7, 0 */
		/* 821DC408h case    0:*/		cpu::op::cmpwi<0>(regs,regs.R7,0x00000000);
		/* 821DC408h case    0:*/		return 0x821DC40C;
		  /* 821DC40Ch */ case    1:  		/* bc 4, CR0_EQ, 104 */
		/* 821DC40Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821DC474;  }
		/* 821DC40Ch case    1:*/		return 0x821DC410;
		  /* 821DC410h */ case    2:  		/* mr R3, R19 */
		/* 821DC410h case    2:*/		regs.R3 = regs.R19;
		/* 821DC410h case    2:*/		return 0x821DC414;
		  /* 821DC414h */ case    3:  		/* lwz R5, <#[R9 + 20]> */
		/* 821DC414h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R9 + 0x00000014) );
		/* 821DC414h case    3:*/		return 0x821DC418;
		  /* 821DC418h */ case    4:  		/* lwz R4, <#[R31 + 20]> */
		/* 821DC418h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000014) );
		/* 821DC418h case    4:*/		return 0x821DC41C;
		  /* 821DC41Ch */ case    5:  		/* bl -127244 */
		/* 821DC41Ch case    5:*/		regs.LR = 0x821DC420; return 0x821BD310;
		/* 821DC41Ch case    5:*/		return 0x821DC420;
		  /* 821DC420h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821DC420h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821DC420h case    6:*/		return 0x821DC424;
		  /* 821DC424h */ case    7:  		/* bc 12, CR0_EQ, 80 */
		/* 821DC424h case    7:*/		if ( regs.CR[0].eq ) { return 0x821DC474;  }
		/* 821DC424h case    7:*/		return 0x821DC428;
	}
	return 0x821DC428;
} // Block from 821DC408h-821DC428h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821DC428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC428);
		  /* 821DC428h */ case    0:  		/* rlwinm. R11, R26, 0, 24, 31 */
		/* 821DC428h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R26);
		/* 821DC428h case    0:*/		return 0x821DC42C;
		  /* 821DC42Ch */ case    1:  		/* bc 4, CR0_EQ, 40 */
		/* 821DC42Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821DC454;  }
		/* 821DC42Ch case    1:*/		return 0x821DC430;
		  /* 821DC430h */ case    2:  		/* mr R7, R19 */
		/* 821DC430h case    2:*/		regs.R7 = regs.R19;
		/* 821DC430h case    2:*/		return 0x821DC434;
		  /* 821DC434h */ case    3:  		/* li R6, 0 */
		/* 821DC434h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821DC434h case    3:*/		return 0x821DC438;
		  /* 821DC438h */ case    4:  		/* li R5, 0 */
		/* 821DC438h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DC438h case    4:*/		return 0x821DC43C;
		  /* 821DC43Ch */ case    5:  		/* mr R4, R27 */
		/* 821DC43Ch case    5:*/		regs.R4 = regs.R27;
		/* 821DC43Ch case    5:*/		return 0x821DC440;
		  /* 821DC440h */ case    6:  		/* mr R3, R23 */
		/* 821DC440h case    6:*/		regs.R3 = regs.R23;
		/* 821DC440h case    6:*/		return 0x821DC444;
		  /* 821DC444h */ case    7:  		/* bl 325108 */
		/* 821DC444h case    7:*/		regs.LR = 0x821DC448; return 0x8222BA38;
		/* 821DC444h case    7:*/		return 0x821DC448;
		  /* 821DC448h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821DC448h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821DC448h case    8:*/		return 0x821DC44C;
		  /* 821DC44Ch */ case    9:  		/* bc 4, CR0_EQ, 48 */
		/* 821DC44Ch case    9:*/		if ( !regs.CR[0].eq ) { return 0x821DC47C;  }
		/* 821DC44Ch case    9:*/		return 0x821DC450;
		  /* 821DC450h */ case   10:  		/* mr R26, R15 */
		/* 821DC450h case   10:*/		regs.R26 = regs.R15;
		/* 821DC450h case   10:*/		return 0x821DC454;
	}
	return 0x821DC454;
} // Block from 821DC428h-821DC454h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821DC454h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC454( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC454) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC454);
		  /* 821DC454h */ case    0:  		/* mr R7, R19 */
		/* 821DC454h case    0:*/		regs.R7 = regs.R19;
		/* 821DC454h case    0:*/		return 0x821DC458;
		  /* 821DC458h */ case    1:  		/* li R6, 0 */
		/* 821DC458h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821DC458h case    1:*/		return 0x821DC45C;
		  /* 821DC45Ch */ case    2:  		/* li R5, 0 */
		/* 821DC45Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DC45Ch case    2:*/		return 0x821DC460;
		  /* 821DC460h */ case    3:  		/* mr R4, R28 */
		/* 821DC460h case    3:*/		regs.R4 = regs.R28;
		/* 821DC460h case    3:*/		return 0x821DC464;
		  /* 821DC464h */ case    4:  		/* mr R3, R23 */
		/* 821DC464h case    4:*/		regs.R3 = regs.R23;
		/* 821DC464h case    4:*/		return 0x821DC468;
		  /* 821DC468h */ case    5:  		/* bl 325072 */
		/* 821DC468h case    5:*/		regs.LR = 0x821DC46C; return 0x8222BA38;
		/* 821DC468h case    5:*/		return 0x821DC46C;
		  /* 821DC46Ch */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821DC46Ch case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821DC46Ch case    6:*/		return 0x821DC470;
	}
	return 0x821DC470;
} // Block from 821DC454h-821DC470h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DC470h
// Function '?Inlining@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC470( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC470) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC470);
		  /* 821DC470h */ case    0:  		/* bc 12, CR0_EQ, 20 */
		/* 821DC470h case    0:*/		if ( regs.CR[0].eq ) { return 0x821DC484;  }
		/* 821DC470h case    0:*/		return 0x821DC474;
	}
	return 0x821DC474;
} // Block from 821DC470h-821DC474h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DC474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC474);
		  /* 821DC474h */ case    0:  		/* lwz R29, <#[R29 + 8]> */
		/* 821DC474h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000008) );
		/* 821DC474h case    0:*/		return 0x821DC478;
		  /* 821DC478h */ case    1:  		/* b -528 */
		/* 821DC478h case    1:*/		return 0x821DC268;
		/* 821DC478h case    1:*/		return 0x821DC47C;
	}
	return 0x821DC47C;
} // Block from 821DC474h-821DC47Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DC47Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC47C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC47C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC47C);
		  /* 821DC47Ch */ case    0:  		/* lwz R25, <#[R25 + 8]> */
		/* 821DC47Ch case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R25 + 0x00000008) );
		/* 821DC47Ch case    0:*/		return 0x821DC480;
		  /* 821DC480h */ case    1:  		/* b -840 */
		/* 821DC480h case    1:*/		return 0x821DC138;
		/* 821DC480h case    1:*/		return 0x821DC484;
	}
	return 0x821DC484;
} // Block from 821DC47Ch-821DC484h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DC484h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC484( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC484) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC484);
		  /* 821DC484h */ case    0:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 821DC484h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 821DC484h case    0:*/		return 0x821DC488;
		  /* 821DC488h */ case    1:  		/* addi R10, R30, 24 */
		/* 821DC488h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x18);
		/* 821DC488h case    1:*/		return 0x821DC48C;
		  /* 821DC48Ch */ case    2:  		/* addi R11, R11, 36 */
		/* 821DC48Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821DC48Ch case    2:*/		return 0x821DC490;
		  /* 821DC490h */ case    3:  		/* addi R10, R10, -36 */
		/* 821DC490h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFDC);
		/* 821DC490h case    3:*/		return 0x821DC494;
		  /* 821DC494h */ case    4:  		/* addi R9, R11, -36 */
		/* 821DC494h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFDC);
		/* 821DC494h case    4:*/		return 0x821DC498;
		  /* 821DC498h */ case    5:  		/* ori R8, R10, 1 */
		/* 821DC498h case    5:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821DC498h case    5:*/		return 0x821DC49C;
		  /* 821DC49Ch */ case    6:  		/* addi R10, R11, 4 */
		/* 821DC49Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821DC49Ch case    6:*/		return 0x821DC4A0;
		  /* 821DC4A0h */ case    7:  		/* lwz R7, <#[R11 + 4]> */
		/* 821DC4A0h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821DC4A0h case    7:*/		return 0x821DC4A4;
		  /* 821DC4A4h */ case    8:  		/* addi R29, R27, 4 */
		/* 821DC4A4h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R27,0x4);
		/* 821DC4A4h case    8:*/		return 0x821DC4A8;
		  /* 821DC4A8h */ case    9:  		/* lwz R6, <#[R11]> */
		/* 821DC4A8h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821DC4A8h case    9:*/		return 0x821DC4AC;
		  /* 821DC4ACh */ case   10:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821DC4ACh case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821DC4ACh case   10:*/		return 0x821DC4B0;
		  /* 821DC4B0h */ case   11:  		/* stw R6, <#[R7 + 36]> */
		/* 821DC4B0h case   11:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000024) );
		/* 821DC4B0h case   11:*/		return 0x821DC4B4;
		  /* 821DC4B4h */ case   12:  		/* lwz R7, <#[R11 + 4]> */
		/* 821DC4B4h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821DC4B4h case   12:*/		return 0x821DC4B8;
		  /* 821DC4B8h */ case   13:  		/* lwz R6, <#[R11]> */
		/* 821DC4B8h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821DC4B8h case   13:*/		return 0x821DC4BC;
		  /* 821DC4BCh */ case   14:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 821DC4BCh case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 821DC4BCh case   14:*/		return 0x821DC4C0;
		  /* 821DC4C0h */ case   15:  		/* stw R7, <#[R6]> */
		/* 821DC4C0h case   15:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R6 + 0x00000000) );
		/* 821DC4C0h case   15:*/		return 0x821DC4C4;
		  /* 821DC4C4h */ case   16:  		/* lwz R7, <#[R30 + 24]> */
		/* 821DC4C4h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000018) );
		/* 821DC4C4h case   16:*/		return 0x821DC4C8;
		  /* 821DC4C8h */ case   17:  		/* stw R7, <#[R11]> */
		/* 821DC4C8h case   17:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821DC4C8h case   17:*/		return 0x821DC4CC;
		  /* 821DC4CCh */ case   18:  		/* lwz R7, <#[R30 + 24]> */
		/* 821DC4CCh case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000018) );
		/* 821DC4CCh case   18:*/		return 0x821DC4D0;
		  /* 821DC4D0h */ case   19:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821DC4D0h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821DC4D0h case   19:*/		return 0x821DC4D4;
		  /* 821DC4D4h */ case   20:  		/* stw R9, <#[R7]> */
		/* 821DC4D4h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 821DC4D4h case   20:*/		return 0x821DC4D8;
		  /* 821DC4D8h */ case   21:  		/* stw R8, <#[R11 + 4]> */
		/* 821DC4D8h case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821DC4D8h case   21:*/		return 0x821DC4DC;
		  /* 821DC4DCh */ case   22:  		/* stw R10, <#[R30 + 24]> */
		/* 821DC4DCh case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000018) );
		/* 821DC4DCh case   22:*/		return 0x821DC4E0;
		  /* 821DC4E0h */ case   23:  		/* stw R30, <#[R27 + 28]> */
		/* 821DC4E0h case   23:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R27 + 0x0000001C) );
		/* 821DC4E0h case   23:*/		return 0x821DC4E4;
		  /* 821DC4E4h */ case   24:  		/* lwz R31, <#[R29]> */
		/* 821DC4E4h case   24:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 821DC4E4h case   24:*/		return 0x821DC4E8;
		  /* 821DC4E8h */ case   25:  		/* cmplwi CR6, R31, 0 */
		/* 821DC4E8h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DC4E8h case   25:*/		return 0x821DC4EC;
		  /* 821DC4ECh */ case   26:  		/* bc 12, CR6_EQ, 168 */
		/* 821DC4ECh case   26:*/		if ( regs.CR[6].eq ) { return 0x821DC594;  }
		/* 821DC4ECh case   26:*/		return 0x821DC4F0;
		  /* 821DC4F0h */ case   27:  		/* lwz R30, <#[R31 + 16]> */
		/* 821DC4F0h case   27:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000010) );
		/* 821DC4F0h case   27:*/		return 0x821DC4F4;
		  /* 821DC4F4h */ case   28:  		/* cmplwi CR6, R30, 0 */
		/* 821DC4F4h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821DC4F4h case   28:*/		return 0x821DC4F8;
		  /* 821DC4F8h */ case   29:  		/* bc 12, CR6_EQ, 136 */
		/* 821DC4F8h case   29:*/		if ( regs.CR[6].eq ) { return 0x821DC580;  }
		/* 821DC4F8h case   29:*/		return 0x821DC4FC;
		  /* 821DC4FCh */ case   30:  		/* lwz R11, <#[R31]> */
		/* 821DC4FCh case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821DC4FCh case   30:*/		return 0x821DC500;
		  /* 821DC500h */ case   31:  		/* rlwinm. R10, R11, 0, 4, 6 */
		/* 821DC500h case   31:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R11);
		/* 821DC500h case   31:*/		return 0x821DC504;
		  /* 821DC504h */ case   32:  		/* bc 12, CR0_EQ, 124 */
		/* 821DC504h case   32:*/		if ( regs.CR[0].eq ) { return 0x821DC580;  }
		/* 821DC504h case   32:*/		return 0x821DC508;
		  /* 821DC508h */ case   33:  		/* lwz R10, <#[R30 + 8]> */
		/* 821DC508h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821DC508h case   33:*/		return 0x821DC50C;
		  /* 821DC50Ch */ case   34:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821DC50Ch case   34:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821DC50Ch case   34:*/		return 0x821DC510;
		  /* 821DC510h */ case   35:  		/* cmplwi CR6, R10, 14336 */
		/* 821DC510h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003800);
		/* 821DC510h case   35:*/		return 0x821DC514;
		  /* 821DC514h */ case   36:  		/* bc 4, CR6_EQ, 108 */
		/* 821DC514h case   36:*/		if ( !regs.CR[6].eq ) { return 0x821DC580;  }
		/* 821DC514h case   36:*/		return 0x821DC518;
		  /* 821DC518h */ case   37:  		/* rlwinm R6, R11, 27, 30, 31 */
		/* 821DC518h case   37:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R6,regs.R11);
		/* 821DC518h case   37:*/		return 0x821DC51C;
		  /* 821DC51Ch */ case   38:  		/* li R7, 0 */
		/* 821DC51Ch case   38:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821DC51Ch case   38:*/		return 0x821DC520;
		  /* 821DC520h */ case   39:  		/* mr R5, R27 */
		/* 821DC520h case   39:*/		regs.R5 = regs.R27;
		/* 821DC520h case   39:*/		return 0x821DC524;
		  /* 821DC524h */ case   40:  		/* mr R4, R24 */
		/* 821DC524h case   40:*/		regs.R4 = regs.R24;
		/* 821DC524h case   40:*/		return 0x821DC528;
		  /* 821DC528h */ case   41:  		/* mr R3, R19 */
		/* 821DC528h case   41:*/		regs.R3 = regs.R19;
		/* 821DC528h case   41:*/		return 0x821DC52C;
		  /* 821DC52Ch */ case   42:  		/* bl -154348 */
		/* 821DC52Ch case   42:*/		regs.LR = 0x821DC530; return 0x821B6A40;
		/* 821DC52Ch case   42:*/		return 0x821DC530;
		  /* 821DC530h */ case   43:  		/* cmplw CR6, R3, R30 */
		/* 821DC530h case   43:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R30);
		/* 821DC530h case   43:*/		return 0x821DC534;
		  /* 821DC534h */ case   44:  		/* bc 12, CR6_EQ, 76 */
		/* 821DC534h case   44:*/		if ( regs.CR[6].eq ) { return 0x821DC580;  }
		/* 821DC534h case   44:*/		return 0x821DC538;
		  /* 821DC538h */ case   45:  		/* lwz R11, <#[R31 + 12]> */
		/* 821DC538h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821DC538h case   45:*/		return 0x821DC53C;
		  /* 821DC53Ch */ case   46:  		/* addi R11, R11, 4 */
		/* 821DC53Ch case   46:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821DC53Ch case   46:*/		return 0x821DC540;
		  /* 821DC540h */ case   47:  		/* lwz R10, <#[R11]> */
		/* 821DC540h case   47:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DC540h case   47:*/		return 0x821DC544;
		  /* 821DC544h */ case   48:  		/* b 12 */
		/* 821DC544h case   48:*/		return 0x821DC550;
		/* 821DC544h case   48:*/		return 0x821DC548;
		  /* 821DC548h */ case   49:  		/* addi R11, R10, 8 */
		/* 821DC548h case   49:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821DC548h case   49:*/		return 0x821DC54C;
		  /* 821DC54Ch */ case   50:  		/* lwz R10, <#[R10 + 8]> */
		/* 821DC54Ch case   50:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821DC54Ch case   50:*/		return 0x821DC550;
	}
	return 0x821DC550;
} // Block from 821DC484h-821DC550h (51 instructions)

//////////////////////////////////////////////////////
// Block at 821DC550h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC550( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC550) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC550);
		  /* 821DC550h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821DC550h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821DC550h case    0:*/		return 0x821DC554;
		  /* 821DC554h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821DC554h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DC548;  }
		/* 821DC554h case    1:*/		return 0x821DC558;
		  /* 821DC558h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821DC558h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821DC558h case    2:*/		return 0x821DC55C;
		  /* 821DC55Ch */ case    3:  		/* li R9, 57 */
		/* 821DC55Ch case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x39);
		/* 821DC55Ch case    3:*/		return 0x821DC560;
		  /* 821DC560h */ case    4:  		/* stw R10, <#[R11]> */
		/* 821DC560h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DC560h case    4:*/		return 0x821DC564;
		  /* 821DC564h */ case    5:  		/* lwz R11, <#[R3 + 4]> */
		/* 821DC564h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821DC564h case    5:*/		return 0x821DC568;
		  /* 821DC568h */ case    6:  		/* stw R11, <#[R31 + 8]> */
		/* 821DC568h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DC568h case    6:*/		return 0x821DC56C;
		  /* 821DC56Ch */ case    7:  		/* stw R31, <#[R3 + 4]> */
		/* 821DC56Ch case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000004) );
		/* 821DC56Ch case    7:*/		return 0x821DC570;
		  /* 821DC570h */ case    8:  		/* lwz R11, <#[R31]> */
		/* 821DC570h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821DC570h case    8:*/		return 0x821DC574;
		  /* 821DC574h */ case    9:  		/* rlwimi R11, R9, 7, 19, 26 */
		/* 821DC574h case    9:*/		cpu::op::rlwimi<0,7,19,26>(regs,&regs.R11,regs.R9);
		/* 821DC574h case    9:*/		return 0x821DC578;
		  /* 821DC578h */ case   10:  		/* stw R3, <#[R31 + 12]> */
		/* 821DC578h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000000C) );
		/* 821DC578h case   10:*/		return 0x821DC57C;
		  /* 821DC57Ch */ case   11:  		/* stw R11, <#[R31]> */
		/* 821DC57Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821DC57Ch case   11:*/		return 0x821DC580;
	}
	return 0x821DC580;
} // Block from 821DC550h-821DC580h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821DC580h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC580);
		  /* 821DC580h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821DC580h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821DC580h case    0:*/		return 0x821DC584;
		  /* 821DC584h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821DC584h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821DC584h case    1:*/		return 0x821DC588;
		  /* 821DC588h */ case    2:  		/* bc 4, CR6_EQ, -164 */
		/* 821DC588h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DC4E4;  }
		/* 821DC588h case    2:*/		return 0x821DC58C;
		  /* 821DC58Ch */ case    3:  		/* addi R29, R31, 8 */
		/* 821DC58Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x8);
		/* 821DC58Ch case    3:*/		return 0x821DC590;
		  /* 821DC590h */ case    4:  		/* b -172 */
		/* 821DC590h case    4:*/		return 0x821DC4E4;
		/* 821DC590h case    4:*/		return 0x821DC594;
	}
	return 0x821DC594;
} // Block from 821DC580h-821DC594h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DC594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC594);
		  /* 821DC594h */ case    0:  		/* addi R9, R1, 80 */
		/* 821DC594h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 821DC594h case    0:*/		return 0x821DC598;
		  /* 821DC598h */ case    1:  		/* lwz R8, <#[R19 + 652]> */
		/* 821DC598h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R19 + 0x0000028C) );
		/* 821DC598h case    1:*/		return 0x821DC59C;
		  /* 821DC59Ch */ case    2:  		/* li R7, 0 */
		/* 821DC59Ch case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821DC59Ch case    2:*/		return 0x821DC5A0;
		  /* 821DC5A0h */ case    3:  		/* li R6, 228 */
		/* 821DC5A0h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821DC5A0h case    3:*/		return 0x821DC5A4;
		  /* 821DC5A4h */ case    4:  		/* mr R5, R27 */
		/* 821DC5A4h case    4:*/		regs.R5 = regs.R27;
		/* 821DC5A4h case    4:*/		return 0x821DC5A8;
		  /* 821DC5A8h */ case    5:  		/* mr R4, R28 */
		/* 821DC5A8h case    5:*/		regs.R4 = regs.R28;
		/* 821DC5A8h case    5:*/		return 0x821DC5AC;
		  /* 821DC5ACh */ case    6:  		/* mr R3, R19 */
		/* 821DC5ACh case    6:*/		regs.R3 = regs.R19;
		/* 821DC5ACh case    6:*/		return 0x821DC5B0;
		  /* 821DC5B0h */ case    7:  		/* bl 331104 */
		/* 821DC5B0h case    7:*/		regs.LR = 0x821DC5B4; return 0x8222D310;
		/* 821DC5B0h case    7:*/		return 0x821DC5B4;
		  /* 821DC5B4h */ case    8:  		/* mr R3, R28 */
		/* 821DC5B4h case    8:*/		regs.R3 = regs.R28;
		/* 821DC5B4h case    8:*/		return 0x821DC5B8;
		  /* 821DC5B8h */ case    9:  		/* bl -490552 */
		/* 821DC5B8h case    9:*/		regs.LR = 0x821DC5BC; return 0x82164980;
		/* 821DC5B8h case    9:*/		return 0x821DC5BC;
		  /* 821DC5BCh */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821DC5BCh case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821DC5BCh case   10:*/		return 0x821DC5C0;
		  /* 821DC5C0h */ case   11:  		/* bc 12, CR0_EQ, 24 */
		/* 821DC5C0h case   11:*/		if ( regs.CR[0].eq ) { return 0x821DC5D8;  }
		/* 821DC5C0h case   11:*/		return 0x821DC5C4;
		  /* 821DC5C4h */ case   12:  		/* li R6, 1 */
		/* 821DC5C4h case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821DC5C4h case   12:*/		return 0x821DC5C8;
		  /* 821DC5C8h */ case   13:  		/* lwz R5, <#[R19 + 652]> */
		/* 821DC5C8h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R19 + 0x0000028C) );
		/* 821DC5C8h case   13:*/		return 0x821DC5CC;
		  /* 821DC5CCh */ case   14:  		/* mr R4, R28 */
		/* 821DC5CCh case   14:*/		regs.R4 = regs.R28;
		/* 821DC5CCh case   14:*/		return 0x821DC5D0;
		  /* 821DC5D0h */ case   15:  		/* mr R3, R19 */
		/* 821DC5D0h case   15:*/		regs.R3 = regs.R19;
		/* 821DC5D0h case   15:*/		return 0x821DC5D4;
		  /* 821DC5D4h */ case   16:  		/* bl 323060 */
		/* 821DC5D4h case   16:*/		regs.LR = 0x821DC5D8; return 0x8222B3C8;
		/* 821DC5D4h case   16:*/		return 0x821DC5D8;
	}
	return 0x821DC5D8;
} // Block from 821DC594h-821DC5D8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821DC5D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC5D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC5D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC5D8);
		  /* 821DC5D8h */ case    0:  		/* mr R17, R15 */
		/* 821DC5D8h case    0:*/		regs.R17 = regs.R15;
		/* 821DC5D8h case    0:*/		return 0x821DC5DC;
		  /* 821DC5DCh */ case    1:  		/* b -1192 */
		/* 821DC5DCh case    1:*/		return 0x821DC134;
		/* 821DC5DCh case    1:*/		return 0x821DC5E0;
	}
	return 0x821DC5E0;
} // Block from 821DC5D8h-821DC5E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DC5E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC5E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC5E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC5E0);
		  /* 821DC5E0h */ case    0:  		/* rlwinm R11, R23, 0, 0, 30 */
		/* 821DC5E0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R23);
		/* 821DC5E0h case    0:*/		return 0x821DC5E4;
		  /* 821DC5E4h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DC5E4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DC5E4h case    1:*/		return 0x821DC5E8;
		  /* 821DC5E8h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DC5E8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DC5E8h case    2:*/		return 0x821DC5EC;
		  /* 821DC5ECh */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DC5ECh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DC5FC;  }
		/* 821DC5ECh case    3:*/		return 0x821DC5F0;
		  /* 821DC5F0h */ case    4:  		/* mr R23, R11 */
		/* 821DC5F0h case    4:*/		regs.R23 = regs.R11;
		/* 821DC5F0h case    4:*/		return 0x821DC5F4;
		  /* 821DC5F4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DC5F4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC5F4h case    5:*/		return 0x821DC5F8;
		  /* 821DC5F8h */ case    6:  		/* bc 4, CR6_EQ, -1220 */
		/* 821DC5F8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DC134;  }
		/* 821DC5F8h case    6:*/		return 0x821DC5FC;
	}
	return 0x821DC5FC;
} // Block from 821DC5E0h-821DC5FCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DC5FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC5FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC5FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC5FC);
		  /* 821DC5FCh */ case    0:  		/* addi R10, R22, 32 */
		/* 821DC5FCh case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R22,0x20);
		/* 821DC5FCh case    0:*/		return 0x821DC600;
		  /* 821DC600h */ case    1:  		/* cmplw CR6, R21, R10 */
		/* 821DC600h case    1:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R10);
		/* 821DC600h case    1:*/		return 0x821DC604;
		  /* 821DC604h */ case    2:  		/* bc 12, CR6_EQ, 80 */
		/* 821DC604h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DC654;  }
		/* 821DC604h case    2:*/		return 0x821DC608;
		  /* 821DC608h */ case    3:  		/* addi R11, R22, 24 */
		/* 821DC608h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R22,0x18);
		/* 821DC608h case    3:*/		return 0x821DC60C;
		  /* 821DC60Ch */ case    4:  		/* cmplw CR6, R21, R11 */
		/* 821DC60Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R11);
		/* 821DC60Ch case    4:*/		return 0x821DC610;
		  /* 821DC610h */ case    5:  		/* bc 12, CR6_EQ, 40 */
		/* 821DC610h case    5:*/		if ( regs.CR[6].eq ) { return 0x821DC638;  }
		/* 821DC610h case    5:*/		return 0x821DC614;
		  /* 821DC614h */ case    6:  		/* lwz R9, <#[R22 + 28]> */
		/* 821DC614h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R22 + 0x0000001C) );
		/* 821DC614h case    6:*/		return 0x821DC618;
		  /* 821DC618h */ case    7:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 821DC618h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 821DC618h case    7:*/		return 0x821DC61C;
		  /* 821DC61Ch */ case    8:  		/* bc 4, CR0_EQ, 28 */
		/* 821DC61Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x821DC638;  }
		/* 821DC61Ch case    8:*/		return 0x821DC620;
		  /* 821DC620h */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 821DC620h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DC620h case    9:*/		return 0x821DC624;
		  /* 821DC624h */ case   10:  		/* mr R21, R11 */
		/* 821DC624h case   10:*/		regs.R21 = regs.R11;
		/* 821DC624h case   10:*/		return 0x821DC628;
		  /* 821DC628h */ case   11:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821DC628h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821DC628h case   11:*/		return 0x821DC62C;
		  /* 821DC62Ch */ case   12:  		/* bc 4, CR0_EQ, 40 */
		/* 821DC62Ch case   12:*/		if ( !regs.CR[0].eq ) { return 0x821DC654;  }
		/* 821DC62Ch case   12:*/		return 0x821DC630;
		  /* 821DC630h */ case   13:  		/* mr R23, R10 */
		/* 821DC630h case   13:*/		regs.R23 = regs.R10;
		/* 821DC630h case   13:*/		return 0x821DC634;
		  /* 821DC634h */ case   14:  		/* b 24 */
		/* 821DC634h case   14:*/		return 0x821DC64C;
		/* 821DC634h case   14:*/		return 0x821DC638;
	}
	return 0x821DC638;
} // Block from 821DC5FCh-821DC638h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821DC638h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC638);
		  /* 821DC638h */ case    0:  		/* lwz R11, <#[R10 + 4]> */
		/* 821DC638h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821DC638h case    0:*/		return 0x821DC63C;
		  /* 821DC63Ch */ case    1:  		/* mr R21, R10 */
		/* 821DC63Ch case    1:*/		regs.R21 = regs.R10;
		/* 821DC63Ch case    1:*/		return 0x821DC640;
		  /* 821DC640h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DC640h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DC640h case    2:*/		return 0x821DC644;
		  /* 821DC644h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DC644h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DC654;  }
		/* 821DC644h case    3:*/		return 0x821DC648;
		  /* 821DC648h */ case    4:  		/* mr R23, R11 */
		/* 821DC648h case    4:*/		regs.R23 = regs.R11;
		/* 821DC648h case    4:*/		return 0x821DC64C;
	}
	return 0x821DC64C;
} // Block from 821DC638h-821DC64Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DC64Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC64C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC64C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC64C);
		  /* 821DC64Ch */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 821DC64Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821DC64Ch case    0:*/		return 0x821DC650;
		  /* 821DC650h */ case    1:  		/* bc 4, CR6_EQ, -1308 */
		/* 821DC650h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DC134;  }
		/* 821DC650h case    1:*/		return 0x821DC654;
	}
	return 0x821DC654;
} // Block from 821DC64Ch-821DC654h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DC654h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC654( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC654) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC654);
		  /* 821DC654h */ case    0:  		/* rlwinm R11, R22, 0, 0, 30 */
		/* 821DC654h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R22);
		/* 821DC654h case    0:*/		return 0x821DC658;
		  /* 821DC658h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DC658h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DC658h case    1:*/		return 0x821DC65C;
		  /* 821DC65Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DC65Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DC65Ch case    2:*/		return 0x821DC660;
		  /* 821DC660h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DC660h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DC670;  }
		/* 821DC660h case    3:*/		return 0x821DC664;
		  /* 821DC664h */ case    4:  		/* mr R22, R11 */
		/* 821DC664h case    4:*/		regs.R22 = regs.R11;
		/* 821DC664h case    4:*/		return 0x821DC668;
		  /* 821DC668h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DC668h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC668h case    5:*/		return 0x821DC66C;
		  /* 821DC66Ch */ case    6:  		/* bc 4, CR6_EQ, -1476 */
		/* 821DC66Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DC0A8;  }
		/* 821DC66Ch case    6:*/		return 0x821DC670;
	}
	return 0x821DC670;
} // Block from 821DC654h-821DC670h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DC670h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC670);
		  /* 821DC670h */ case    0:  		/* cmplwi CR6, R20, 1 */
		/* 821DC670h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000001);
		/* 821DC670h case    0:*/		return 0x821DC674;
		  /* 821DC674h */ case    1:  		/* bc 4, CR6_GT, 980 */
		/* 821DC674h case    1:*/		if ( !regs.CR[6].gt ) { return 0x821DCA48;  }
		/* 821DC674h case    1:*/		return 0x821DC678;
		  /* 821DC678h */ case    2:  		/* lwz R11, <#[R19 + 4]> */
		/* 821DC678h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000004) );
		/* 821DC678h case    2:*/		return 0x821DC67C;
		  /* 821DC67Ch */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DC67Ch case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DC67Ch case    3:*/		return 0x821DC680;
		  /* 821DC680h */ case    4:  		/* bc 4, CR0_EQ, 968 */
		/* 821DC680h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821DCA48;  }
		/* 821DC680h case    4:*/		return 0x821DC684;
		  /* 821DC684h */ case    5:  		/* mr R27, R11 */
		/* 821DC684h case    5:*/		regs.R27 = regs.R11;
		/* 821DC684h case    5:*/		return 0x821DC688;
		  /* 821DC688h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 821DC688h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DC688h case    6:*/		return 0x821DC68C;
		  /* 821DC68Ch */ case    7:  		/* bc 12, CR0_EQ, 956 */
		/* 821DC68Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x821DCA48;  }
		/* 821DC68Ch case    7:*/		return 0x821DC690;
		  /* 821DC690h */ case    8:  		/* lwz R11, <#[R27 + 12]> */
		/* 821DC690h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 821DC690h case    8:*/		return 0x821DC694;
		  /* 821DC694h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 821DC694h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC694h case    9:*/		return 0x821DC698;
		  /* 821DC698h */ case   10:  		/* bc 12, CR6_EQ, 16 */
		/* 821DC698h case   10:*/		if ( regs.CR[6].eq ) { return 0x821DC6A8;  }
		/* 821DC698h case   10:*/		return 0x821DC69C;
		  /* 821DC69Ch */ case   11:  		/* lwz R11, <#[R11]> */
		/* 821DC69Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821DC69Ch case   11:*/		return 0x821DC6A0;
		  /* 821DC6A0h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821DC6A0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC6A0h case   12:*/		return 0x821DC6A4;
		  /* 821DC6A4h */ case   13:  		/* bc 4, CR6_EQ, 904 */
		/* 821DC6A4h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821DCA2C;  }
		/* 821DC6A4h case   13:*/		return 0x821DC6A8;
	}
	return 0x821DC6A8;
} // Block from 821DC670h-821DC6A8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821DC6A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC6A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC6A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC6A8);
		  /* 821DC6A8h */ case    0:  		/* lwz R11, <#[R27 + 20]> */
		/* 821DC6A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 821DC6A8h case    0:*/		return 0x821DC6AC;
		  /* 821DC6ACh */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DC6ACh case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DC6ACh case    1:*/		return 0x821DC6B0;
		  /* 821DC6B0h */ case    2:  		/* bc 12, CR0_EQ, 892 */
		/* 821DC6B0h case    2:*/		if ( regs.CR[0].eq ) { return 0x821DCA2C;  }
		/* 821DC6B0h case    2:*/		return 0x821DC6B4;
		  /* 821DC6B4h */ case    3:  		/* lwz R11, <#[R27 + 8]> */
		/* 821DC6B4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821DC6B4h case    3:*/		return 0x821DC6B8;
		  /* 821DC6B8h */ case    4:  		/* addi R29, R27, 8 */
		/* 821DC6B8h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R27,0x8);
		/* 821DC6B8h case    4:*/		return 0x821DC6BC;
		  /* 821DC6BCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DC6BCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC6BCh case    5:*/		return 0x821DC6C0;
		  /* 821DC6C0h */ case    6:  		/* bc 12, CR6_EQ, 876 */
		/* 821DC6C0h case    6:*/		if ( regs.CR[6].eq ) { return 0x821DCA2C;  }
		/* 821DC6C0h case    6:*/		return 0x821DC6C4;
		  /* 821DC6C4h */ case    7:  		/* lwz R10, <#[R11 + 4]> */
		/* 821DC6C4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DC6C4h case    7:*/		return 0x821DC6C8;
		  /* 821DC6C8h */ case    8:  		/* cmplwi CR6, R10, 0 */
		/* 821DC6C8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DC6C8h case    8:*/		return 0x821DC6CC;
		  /* 821DC6CCh */ case    9:  		/* bc 12, CR6_EQ, 864 */
		/* 821DC6CCh case    9:*/		if ( regs.CR[6].eq ) { return 0x821DCA2C;  }
		/* 821DC6CCh case    9:*/		return 0x821DC6D0;
		  /* 821DC6D0h */ case   10:  		/* lwz R10, <#[R27 + 48]> */
		/* 821DC6D0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000030) );
		/* 821DC6D0h case   10:*/		return 0x821DC6D4;
		  /* 821DC6D4h */ case   11:  		/* rlwinm. R10, R10, 12, 31, 31 */
		/* 821DC6D4h case   11:*/		cpu::op::rlwinm<1,12,31,31>(regs,&regs.R10,regs.R10);
		/* 821DC6D4h case   11:*/		return 0x821DC6D8;
		  /* 821DC6D8h */ case   12:  		/* bc 4, CR0_EQ, 852 */
		/* 821DC6D8h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821DCA2C;  }
		/* 821DC6D8h case   12:*/		return 0x821DC6DC;
		  /* 821DC6DCh */ case   13:  		/* lwz R10, <#[R27 + 64]> */
		/* 821DC6DCh case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000040) );
		/* 821DC6DCh case   13:*/		return 0x821DC6E0;
		  /* 821DC6E0h */ case   14:  		/* cmplwi CR6, R10, 0 */
		/* 821DC6E0h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DC6E0h case   14:*/		return 0x821DC6E4;
		  /* 821DC6E4h */ case   15:  		/* bc 12, CR6_EQ, 840 */
		/* 821DC6E4h case   15:*/		if ( regs.CR[6].eq ) { return 0x821DCA2C;  }
		/* 821DC6E4h case   15:*/		return 0x821DC6E8;
		  /* 821DC6E8h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 821DC6E8h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC6E8h case   16:*/		return 0x821DC6EC;
		  /* 821DC6ECh */ case   17:  		/* bc 12, CR6_EQ, 32 */
		/* 821DC6ECh case   17:*/		if ( regs.CR[6].eq ) { return 0x821DC70C;  }
		/* 821DC6ECh case   17:*/		return 0x821DC6F0;
		  /* 821DC6F0h */ case   18:  		/* lwz R9, <#[R11 + 4]> */
		/* 821DC6F0h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821DC6F0h case   18:*/		return 0x821DC6F4;
		  /* 821DC6F4h */ case   19:  		/* cmplw CR6, R10, R9 */
		/* 821DC6F4h case   19:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821DC6F4h case   19:*/		return 0x821DC6F8;
		  /* 821DC6F8h */ case   20:  		/* bc 12, CR6_EQ, 12 */
		/* 821DC6F8h case   20:*/		if ( regs.CR[6].eq ) { return 0x821DC704;  }
		/* 821DC6F8h case   20:*/		return 0x821DC6FC;
		  /* 821DC6FCh */ case   21:  		/* lwz R11, <#[R11 + 12]> */
		/* 821DC6FCh case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DC6FCh case   21:*/		return 0x821DC700;
		  /* 821DC700h */ case   22:  		/* b -24 */
		/* 821DC700h case   22:*/		return 0x821DC6E8;
		/* 821DC700h case   22:*/		return 0x821DC704;
	}
	return 0x821DC704;
} // Block from 821DC6A8h-821DC704h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821DC704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC704);
		  /* 821DC704h */ case    0:  		/* mr R11, R15 */
		/* 821DC704h case    0:*/		regs.R11 = regs.R15;
		/* 821DC704h case    0:*/		return 0x821DC708;
		  /* 821DC708h */ case    1:  		/* b 8 */
		/* 821DC708h case    1:*/		return 0x821DC710;
		/* 821DC708h case    1:*/		return 0x821DC70C;
	}
	return 0x821DC70C;
} // Block from 821DC704h-821DC70Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DC70Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC70C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC70C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC70C);
		  /* 821DC70Ch */ case    0:  		/* mr R11, R16 */
		/* 821DC70Ch case    0:*/		regs.R11 = regs.R16;
		/* 821DC70Ch case    0:*/		return 0x821DC710;
	}
	return 0x821DC710;
} // Block from 821DC70Ch-821DC710h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DC710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC710);
		  /* 821DC710h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DC710h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DC710h case    0:*/		return 0x821DC714;
		  /* 821DC714h */ case    1:  		/* bc 12, CR0_EQ, 792 */
		/* 821DC714h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DCA2C;  }
		/* 821DC714h case    1:*/		return 0x821DC718;
		  /* 821DC718h */ case    2:  		/* lwz R11, <#[R10 + 12]> */
		/* 821DC718h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 821DC718h case    2:*/		return 0x821DC71C;
		  /* 821DC71Ch */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821DC71Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC71Ch case    3:*/		return 0x821DC720;
		  /* 821DC720h */ case    4:  		/* bc 12, CR6_EQ, 24 */
		/* 821DC720h case    4:*/		if ( regs.CR[6].eq ) { return 0x821DC738;  }
		/* 821DC720h case    4:*/		return 0x821DC724;
		  /* 821DC724h */ case    5:  		/* lwz R28, <#[R11]> */
		/* 821DC724h case    5:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 821DC724h case    5:*/		return 0x821DC728;
		  /* 821DC728h */ case    6:  		/* cmplw CR6, R28, R27 */
		/* 821DC728h case    6:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R27);
		/* 821DC728h case    6:*/		return 0x821DC72C;
		  /* 821DC72Ch */ case    7:  		/* bc 4, CR6_EQ, 16 */
		/* 821DC72Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x821DC73C;  }
		/* 821DC72Ch case    7:*/		return 0x821DC730;
		  /* 821DC730h */ case    8:  		/* lwz R11, <#[R11 + 8]> */
		/* 821DC730h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821DC730h case    8:*/		return 0x821DC734;
		  /* 821DC734h */ case    9:  		/* b -24 */
		/* 821DC734h case    9:*/		return 0x821DC71C;
		/* 821DC734h case    9:*/		return 0x821DC738;
	}
	return 0x821DC738;
} // Block from 821DC710h-821DC738h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DC738h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC738( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC738) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC738);
		  /* 821DC738h */ case    0:  		/* mr R28, R16 */
		/* 821DC738h case    0:*/		regs.R28 = regs.R16;
		/* 821DC738h case    0:*/		return 0x821DC73C;
	}
	return 0x821DC73C;
} // Block from 821DC738h-821DC73Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DC73Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC73C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC73C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC73C);
		  /* 821DC73Ch */ case    0:  		/* lwz R11, <#[R28 + 64]> */
		/* 821DC73Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000040) );
		/* 821DC73Ch case    0:*/		return 0x821DC740;
		  /* 821DC740h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821DC740h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821DC740h case    1:*/		return 0x821DC744;
		  /* 821DC744h */ case    2:  		/* bc 4, CR6_EQ, 744 */
		/* 821DC744h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DCA2C;  }
		/* 821DC744h case    2:*/		return 0x821DC748;
		  /* 821DC748h */ case    3:  		/* lwz R11, <#[R28 + 20]> */
		/* 821DC748h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 821DC748h case    3:*/		return 0x821DC74C;
		  /* 821DC74Ch */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DC74Ch case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DC74Ch case    4:*/		return 0x821DC750;
		  /* 821DC750h */ case    5:  		/* bc 12, CR0_EQ, 732 */
		/* 821DC750h case    5:*/		if ( regs.CR[0].eq ) { return 0x821DCA2C;  }
		/* 821DC750h case    5:*/		return 0x821DC754;
		  /* 821DC754h */ case    6:  		/* lwz R11, <#[R28 + 8]> */
		/* 821DC754h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821DC754h case    6:*/		return 0x821DC758;
		  /* 821DC758h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821DC758h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC758h case    7:*/		return 0x821DC75C;
		  /* 821DC75Ch */ case    8:  		/* bc 12, CR6_EQ, 720 */
		/* 821DC75Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x821DCA2C;  }
		/* 821DC75Ch case    8:*/		return 0x821DC760;
		  /* 821DC760h */ case    9:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DC760h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DC760h case    9:*/		return 0x821DC764;
		  /* 821DC764h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821DC764h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC764h case   10:*/		return 0x821DC768;
		  /* 821DC768h */ case   11:  		/* bc 12, CR6_EQ, 708 */
		/* 821DC768h case   11:*/		if ( regs.CR[6].eq ) { return 0x821DCA2C;  }
		/* 821DC768h case   11:*/		return 0x821DC76C;
		  /* 821DC76Ch */ case   12:  		/* lwz R11, <#[R28 + 76]> */
		/* 821DC76Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000004C) );
		/* 821DC76Ch case   12:*/		return 0x821DC770;
		  /* 821DC770h */ case   13:  		/* lwz R9, <#[R27 + 76]> */
		/* 821DC770h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x0000004C) );
		/* 821DC770h case   13:*/		return 0x821DC774;
		  /* 821DC774h */ case   14:  		/* xor R11, R11, R9 */
		/* 821DC774h case   14:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821DC774h case   14:*/		return 0x821DC778;
		  /* 821DC778h */ case   15:  		/* rlwinm. R11, R11, 0, 13, 31 */
		/* 821DC778h case   15:*/		cpu::op::rlwinm<1,0,13,31>(regs,&regs.R11,regs.R11);
		/* 821DC778h case   15:*/		return 0x821DC77C;
		  /* 821DC77Ch */ case   16:  		/* bc 4, CR0_EQ, 688 */
		/* 821DC77Ch case   16:*/		if ( !regs.CR[0].eq ) { return 0x821DCA2C;  }
		/* 821DC77Ch case   16:*/		return 0x821DC780;
		  /* 821DC780h */ case   17:  		/* lwz R11, <#[R10 + 36]> */
		/* 821DC780h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000024) );
		/* 821DC780h case   17:*/		return 0x821DC784;
		  /* 821DC784h */ case   18:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DC784h case   18:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DC784h case   18:*/		return 0x821DC788;
		  /* 821DC788h */ case   19:  		/* bc 4, CR0_EQ, 676 */
		/* 821DC788h case   19:*/		if ( !regs.CR[0].eq ) { return 0x821DCA2C;  }
		/* 821DC788h case   19:*/		return 0x821DC78C;
		  /* 821DC78Ch */ case   20:  		/* lwz R11, <#[R10 + 32]> */
		/* 821DC78Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000020) );
		/* 821DC78Ch case   20:*/		return 0x821DC790;
		  /* 821DC790h */ case   21:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DC790h case   21:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DC790h case   21:*/		return 0x821DC794;
		  /* 821DC794h */ case   22:  		/* addic. R26, R11, -40 */
		/* 821DC794h case   22:*/		cpu::op::addic<1>(regs,&regs.R26,regs.R11,0xFFFFFFD8);
		/* 821DC794h case   22:*/		return 0x821DC798;
		  /* 821DC798h */ case   23:  		/* bc 12, CR0_EQ, 660 */
		/* 821DC798h case   23:*/		if ( regs.CR[0].eq ) { return 0x821DCA2C;  }
		/* 821DC798h case   23:*/		return 0x821DC79C;
		  /* 821DC79Ch */ case   24:  		/* lwz R11, <#[R26 + 8]> */
		/* 821DC79Ch case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821DC79Ch case   24:*/		return 0x821DC7A0;
		  /* 821DC7A0h */ case   25:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DC7A0h case   25:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DC7A0h case   25:*/		return 0x821DC7A4;
		  /* 821DC7A4h */ case   26:  		/* cmplwi CR6, R11, 11520 */
		/* 821DC7A4h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002D00);
		/* 821DC7A4h case   26:*/		return 0x821DC7A8;
		  /* 821DC7A8h */ case   27:  		/* bc 4, CR6_EQ, 644 */
		/* 821DC7A8h case   27:*/		if ( !regs.CR[6].eq ) { return 0x821DCA2C;  }
		/* 821DC7A8h case   27:*/		return 0x821DC7AC;
		  /* 821DC7ACh */ case   28:  		/* addi R30, R28, 24 */
		/* 821DC7ACh case   28:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R28,0x18);
		/* 821DC7ACh case   28:*/		return 0x821DC7B0;
		  /* 821DC7B0h */ case   29:  		/* addi R31, R27, 24 */
		/* 821DC7B0h case   29:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R27,0x18);
		/* 821DC7B0h case   29:*/		return 0x821DC7B4;
		  /* 821DC7B4h */ case   30:  		/* mr R5, R30 */
		/* 821DC7B4h case   30:*/		regs.R5 = regs.R30;
		/* 821DC7B4h case   30:*/		return 0x821DC7B8;
		  /* 821DC7B8h */ case   31:  		/* mr R4, R31 */
		/* 821DC7B8h case   31:*/		regs.R4 = regs.R31;
		/* 821DC7B8h case   31:*/		return 0x821DC7BC;
		  /* 821DC7BCh */ case   32:  		/* mr R3, R19 */
		/* 821DC7BCh case   32:*/		regs.R3 = regs.R19;
		/* 821DC7BCh case   32:*/		return 0x821DC7C0;
		  /* 821DC7C0h */ case   33:  		/* bl -116144 */
		/* 821DC7C0h case   33:*/		regs.LR = 0x821DC7C4; return 0x821C0210;
		/* 821DC7C0h case   33:*/		return 0x821DC7C4;
		  /* 821DC7C4h */ case   34:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821DC7C4h case   34:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821DC7C4h case   34:*/		return 0x821DC7C8;
		  /* 821DC7C8h */ case   35:  		/* bc 12, CR0_EQ, 32 */
		/* 821DC7C8h case   35:*/		if ( regs.CR[0].eq ) { return 0x821DC7E8;  }
		/* 821DC7C8h case   35:*/		return 0x821DC7CC;
		  /* 821DC7CCh */ case   36:  		/* addi R5, R28, 32 */
		/* 821DC7CCh case   36:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R28,0x20);
		/* 821DC7CCh case   36:*/		return 0x821DC7D0;
		  /* 821DC7D0h */ case   37:  		/* addi R4, R27, 32 */
		/* 821DC7D0h case   37:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R27,0x20);
		/* 821DC7D0h case   37:*/		return 0x821DC7D4;
		  /* 821DC7D4h */ case   38:  		/* mr R3, R19 */
		/* 821DC7D4h case   38:*/		regs.R3 = regs.R19;
		/* 821DC7D4h case   38:*/		return 0x821DC7D8;
		  /* 821DC7D8h */ case   39:  		/* bl -116168 */
		/* 821DC7D8h case   39:*/		regs.LR = 0x821DC7DC; return 0x821C0210;
		/* 821DC7D8h case   39:*/		return 0x821DC7DC;
		  /* 821DC7DCh */ case   40:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821DC7DCh case   40:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821DC7DCh case   40:*/		return 0x821DC7E0;
		  /* 821DC7E0h */ case   41:  		/* mr R11, R15 */
		/* 821DC7E0h case   41:*/		regs.R11 = regs.R15;
		/* 821DC7E0h case   41:*/		return 0x821DC7E4;
		  /* 821DC7E4h */ case   42:  		/* bc 4, CR0_EQ, 8 */
		/* 821DC7E4h case   42:*/		if ( !regs.CR[0].eq ) { return 0x821DC7EC;  }
		/* 821DC7E4h case   42:*/		return 0x821DC7E8;
	}
	return 0x821DC7E8;
} // Block from 821DC73Ch-821DC7E8h (43 instructions)

//////////////////////////////////////////////////////
// Block at 821DC7E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC7E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC7E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC7E8);
		  /* 821DC7E8h */ case    0:  		/* mr R11, R16 */
		/* 821DC7E8h case    0:*/		regs.R11 = regs.R16;
		/* 821DC7E8h case    0:*/		return 0x821DC7EC;
	}
	return 0x821DC7EC;
} // Block from 821DC7E8h-821DC7ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DC7ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC7EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC7EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC7EC);
		  /* 821DC7ECh */ case    0:  		/* lwz R10, <#[R27 + 28]> */
		/* 821DC7ECh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x0000001C) );
		/* 821DC7ECh case    0:*/		return 0x821DC7F0;
		  /* 821DC7F0h */ case    1:  		/* rlwinm R8, R11, 0, 24, 31 */
		/* 821DC7F0h case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R8,regs.R11);
		/* 821DC7F0h case    1:*/		return 0x821DC7F4;
		  /* 821DC7F4h */ case    2:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821DC7F4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821DC7F4h case    2:*/		return 0x821DC7F8;
		  /* 821DC7F8h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 821DC7F8h case    3:*/		if ( regs.CR[0].eq ) { return 0x821DC808;  }
		/* 821DC7F8h case    3:*/		return 0x821DC7FC;
		  /* 821DC7FCh */ case    4:  		/* lwz R11, <#[R27 + 36]> */
		/* 821DC7FCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000024) );
		/* 821DC7FCh case    4:*/		return 0x821DC800;
		  /* 821DC800h */ case    5:  		/* addi R9, R27, 32 */
		/* 821DC800h case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R27,0x20);
		/* 821DC800h case    5:*/		return 0x821DC804;
		  /* 821DC804h */ case    6:  		/* b 12 */
		/* 821DC804h case    6:*/		return 0x821DC810;
		/* 821DC804h case    6:*/		return 0x821DC808;
	}
	return 0x821DC808;
} // Block from 821DC7ECh-821DC808h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DC808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC808);
		  /* 821DC808h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 821DC808h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821DC808h case    0:*/		return 0x821DC80C;
		  /* 821DC80Ch */ case    1:  		/* mr R9, R31 */
		/* 821DC80Ch case    1:*/		regs.R9 = regs.R31;
		/* 821DC80Ch case    1:*/		return 0x821DC810;
	}
	return 0x821DC810;
} // Block from 821DC808h-821DC810h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DC810h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC810);
		  /* 821DC810h */ case    0:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DC810h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DC810h case    0:*/		return 0x821DC814;
		  /* 821DC814h */ case    1:  		/* addic R10, R10, -1 */
		/* 821DC814h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821DC814h case    1:*/		return 0x821DC818;
		  /* 821DC818h */ case    2:  		/* subfe R10, R10, R10 */
		/* 821DC818h case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821DC818h case    2:*/		return 0x821DC81C;
		  /* 821DC81Ch */ case    3:  		/* and R11, R10, R11 */
		/* 821DC81Ch case    3:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821DC81Ch case    3:*/		return 0x821DC820;
		  /* 821DC820h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821DC820h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC820h case    4:*/		return 0x821DC824;
		  /* 821DC824h */ case    5:  		/* bc 12, CR6_EQ, 84 */
		/* 821DC824h case    5:*/		if ( regs.CR[6].eq ) { return 0x821DC878;  }
		/* 821DC824h case    5:*/		return 0x821DC828;
		  /* 821DC828h */ case    6:  		/* lwz R10, <#[R11 + 8]> */
		/* 821DC828h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821DC828h case    6:*/		return 0x821DC82C;
		  /* 821DC82Ch */ case    7:  		/* rlwinm. R7, R10, 0, 2, 2 */
		/* 821DC82Ch case    7:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R7,regs.R10);
		/* 821DC82Ch case    7:*/		return 0x821DC830;
		  /* 821DC830h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 821DC830h case    8:*/		if ( regs.CR[0].eq ) { return 0x821DC83C;  }
		/* 821DC830h case    8:*/		return 0x821DC834;
		  /* 821DC834h */ case    9:  		/* rlwinm R10, R10, 0, 3, 1 */
		/* 821DC834h case    9:*/		cpu::op::rlwinm<0,0,3,1>(regs,&regs.R10,regs.R10);
		/* 821DC834h case    9:*/		return 0x821DC838;
		  /* 821DC838h */ case   10:  		/* stw R10, <#[R11 + 8]> */
		/* 821DC838h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821DC838h case   10:*/		return 0x821DC83C;
	}
	return 0x821DC83C;
} // Block from 821DC810h-821DC83Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821DC83Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC83C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC83C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC83C);
		  /* 821DC83Ch */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DC83Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DC83Ch case    0:*/		return 0x821DC840;
		  /* 821DC840h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DC840h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DC840h case    1:*/		return 0x821DC844;
		  /* 821DC844h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DC844h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DC844h case    2:*/		return 0x821DC848;
		  /* 821DC848h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821DC848h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DC854;  }
		/* 821DC848h case    3:*/		return 0x821DC84C;
		  /* 821DC84Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821DC84Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC84Ch case    4:*/		return 0x821DC850;
		  /* 821DC850h */ case    5:  		/* bc 4, CR6_EQ, -40 */
		/* 821DC850h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821DC828;  }
		/* 821DC850h case    5:*/		return 0x821DC854;
	}
	return 0x821DC854;
} // Block from 821DC83Ch-821DC854h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DC854h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC854( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC854) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC854);
		  /* 821DC854h */ case    0:  		/* addi R10, R27, 32 */
		/* 821DC854h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0x20);
		/* 821DC854h case    0:*/		return 0x821DC858;
		  /* 821DC858h */ case    1:  		/* cmplw CR6, R9, R10 */
		/* 821DC858h case    1:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821DC858h case    1:*/		return 0x821DC85C;
		  /* 821DC85Ch */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 821DC85Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821DC878;  }
		/* 821DC85Ch case    2:*/		return 0x821DC860;
		  /* 821DC860h */ case    3:  		/* lwz R11, <#[R10 + 4]> */
		/* 821DC860h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821DC860h case    3:*/		return 0x821DC864;
		  /* 821DC864h */ case    4:  		/* mr R9, R10 */
		/* 821DC864h case    4:*/		regs.R9 = regs.R10;
		/* 821DC864h case    4:*/		return 0x821DC868;
		  /* 821DC868h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DC868h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DC868h case    5:*/		return 0x821DC86C;
		  /* 821DC86Ch */ case    6:  		/* bc 4, CR0_EQ, 12 */
		/* 821DC86Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x821DC878;  }
		/* 821DC86Ch case    6:*/		return 0x821DC870;
		  /* 821DC870h */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 821DC870h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DC870h case    7:*/		return 0x821DC874;
		  /* 821DC874h */ case    8:  		/* bc 4, CR0_EQ, -76 */
		/* 821DC874h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821DC828;  }
		/* 821DC874h case    8:*/		return 0x821DC878;
	}
	return 0x821DC878;
} // Block from 821DC854h-821DC878h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821DC878h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC878);
		  /* 821DC878h */ case    0:  		/* lwz R11, <#[R28 + 28]> */
		/* 821DC878h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000001C) );
		/* 821DC878h case    0:*/		return 0x821DC87C;
		  /* 821DC87Ch */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DC87Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DC87Ch case    1:*/		return 0x821DC880;
		  /* 821DC880h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821DC880h case    2:*/		if ( regs.CR[0].eq ) { return 0x821DC890;  }
		/* 821DC880h case    2:*/		return 0x821DC884;
		  /* 821DC884h */ case    3:  		/* lwz R11, <#[R28 + 36]> */
		/* 821DC884h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000024) );
		/* 821DC884h case    3:*/		return 0x821DC888;
		  /* 821DC888h */ case    4:  		/* addi R9, R28, 32 */
		/* 821DC888h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R28,0x20);
		/* 821DC888h case    4:*/		return 0x821DC88C;
		  /* 821DC88Ch */ case    5:  		/* b 12 */
		/* 821DC88Ch case    5:*/		return 0x821DC898;
		/* 821DC88Ch case    5:*/		return 0x821DC890;
	}
	return 0x821DC890;
} // Block from 821DC878h-821DC890h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DC890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC890);
		  /* 821DC890h */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 821DC890h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821DC890h case    0:*/		return 0x821DC894;
		  /* 821DC894h */ case    1:  		/* mr R9, R30 */
		/* 821DC894h case    1:*/		regs.R9 = regs.R30;
		/* 821DC894h case    1:*/		return 0x821DC898;
	}
	return 0x821DC898;
} // Block from 821DC890h-821DC898h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DC898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC898);
		  /* 821DC898h */ case    0:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DC898h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DC898h case    0:*/		return 0x821DC89C;
		  /* 821DC89Ch */ case    1:  		/* addic R10, R10, -1 */
		/* 821DC89Ch case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821DC89Ch case    1:*/		return 0x821DC8A0;
		  /* 821DC8A0h */ case    2:  		/* subfe R10, R10, R10 */
		/* 821DC8A0h case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821DC8A0h case    2:*/		return 0x821DC8A4;
		  /* 821DC8A4h */ case    3:  		/* and R11, R10, R11 */
		/* 821DC8A4h case    3:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821DC8A4h case    3:*/		return 0x821DC8A8;
		  /* 821DC8A8h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821DC8A8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC8A8h case    4:*/		return 0x821DC8AC;
		  /* 821DC8ACh */ case    5:  		/* bc 12, CR6_EQ, 84 */
		/* 821DC8ACh case    5:*/		if ( regs.CR[6].eq ) { return 0x821DC900;  }
		/* 821DC8ACh case    5:*/		return 0x821DC8B0;
		  /* 821DC8B0h */ case    6:  		/* lwz R10, <#[R11 + 8]> */
		/* 821DC8B0h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821DC8B0h case    6:*/		return 0x821DC8B4;
		  /* 821DC8B4h */ case    7:  		/* rlwinm. R7, R10, 0, 2, 2 */
		/* 821DC8B4h case    7:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R7,regs.R10);
		/* 821DC8B4h case    7:*/		return 0x821DC8B8;
		  /* 821DC8B8h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 821DC8B8h case    8:*/		if ( regs.CR[0].eq ) { return 0x821DC8C4;  }
		/* 821DC8B8h case    8:*/		return 0x821DC8BC;
		  /* 821DC8BCh */ case    9:  		/* rlwinm R10, R10, 0, 3, 1 */
		/* 821DC8BCh case    9:*/		cpu::op::rlwinm<0,0,3,1>(regs,&regs.R10,regs.R10);
		/* 821DC8BCh case    9:*/		return 0x821DC8C0;
		  /* 821DC8C0h */ case   10:  		/* stw R10, <#[R11 + 8]> */
		/* 821DC8C0h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821DC8C0h case   10:*/		return 0x821DC8C4;
	}
	return 0x821DC8C4;
} // Block from 821DC898h-821DC8C4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821DC8C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC8C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC8C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC8C4);
		  /* 821DC8C4h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DC8C4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DC8C4h case    0:*/		return 0x821DC8C8;
		  /* 821DC8C8h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DC8C8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DC8C8h case    1:*/		return 0x821DC8CC;
		  /* 821DC8CCh */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DC8CCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DC8CCh case    2:*/		return 0x821DC8D0;
		  /* 821DC8D0h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821DC8D0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DC8DC;  }
		/* 821DC8D0h case    3:*/		return 0x821DC8D4;
		  /* 821DC8D4h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821DC8D4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC8D4h case    4:*/		return 0x821DC8D8;
		  /* 821DC8D8h */ case    5:  		/* bc 4, CR6_EQ, -40 */
		/* 821DC8D8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821DC8B0;  }
		/* 821DC8D8h case    5:*/		return 0x821DC8DC;
	}
	return 0x821DC8DC;
} // Block from 821DC8C4h-821DC8DCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DC8DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC8DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC8DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC8DC);
		  /* 821DC8DCh */ case    0:  		/* addi R10, R28, 32 */
		/* 821DC8DCh case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R28,0x20);
		/* 821DC8DCh case    0:*/		return 0x821DC8E0;
		  /* 821DC8E0h */ case    1:  		/* cmplw CR6, R9, R10 */
		/* 821DC8E0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821DC8E0h case    1:*/		return 0x821DC8E4;
		  /* 821DC8E4h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 821DC8E4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DC900;  }
		/* 821DC8E4h case    2:*/		return 0x821DC8E8;
		  /* 821DC8E8h */ case    3:  		/* lwz R11, <#[R10 + 4]> */
		/* 821DC8E8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821DC8E8h case    3:*/		return 0x821DC8EC;
		  /* 821DC8ECh */ case    4:  		/* mr R9, R10 */
		/* 821DC8ECh case    4:*/		regs.R9 = regs.R10;
		/* 821DC8ECh case    4:*/		return 0x821DC8F0;
		  /* 821DC8F0h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DC8F0h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DC8F0h case    5:*/		return 0x821DC8F4;
		  /* 821DC8F4h */ case    6:  		/* bc 4, CR0_EQ, 12 */
		/* 821DC8F4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821DC900;  }
		/* 821DC8F4h case    6:*/		return 0x821DC8F8;
		  /* 821DC8F8h */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 821DC8F8h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DC8F8h case    7:*/		return 0x821DC8FC;
		  /* 821DC8FCh */ case    8:  		/* bc 4, CR0_EQ, -76 */
		/* 821DC8FCh case    8:*/		if ( !regs.CR[0].eq ) { return 0x821DC8B0;  }
		/* 821DC8FCh case    8:*/		return 0x821DC900;
	}
	return 0x821DC900;
} // Block from 821DC8DCh-821DC900h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821DC900h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC900( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC900) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC900);
		  /* 821DC900h */ case    0:  		/* rlwinm. R11, R8, 0, 24, 31 */
		/* 821DC900h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R8);
		/* 821DC900h case    0:*/		return 0x821DC904;
		  /* 821DC904h */ case    1:  		/* bc 12, CR0_EQ, 296 */
		/* 821DC904h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DCA2C;  }
		/* 821DC904h case    1:*/		return 0x821DC908;
		  /* 821DC908h */ case    2:  		/* lwz R30, <#[R29]> */
		/* 821DC908h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821DC908h case    2:*/		return 0x821DC90C;
		  /* 821DC90Ch */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 821DC90Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821DC90Ch case    3:*/		return 0x821DC910;
	}
	return 0x821DC910;
} // Block from 821DC900h-821DC910h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DC910h
// Function '?SimplifyDependencyGraph@Compiler@D3DXShader@@AAA_NXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC910( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC910) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC910);
		  /* 821DC910h */ case    0:  		/* bc 12, CR6_EQ, 260 */
		/* 821DC910h case    0:*/		if ( regs.CR[6].eq ) { return 0x821DCA14;  }
		/* 821DC910h case    0:*/		return 0x821DC914;
		  /* 821DC914h */ case    1:  		/* lwz R31, <#[R30 + 4]> */
		/* 821DC914h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 821DC914h case    1:*/		return 0x821DC918;
		  /* 821DC918h */ case    2:  		/* lwz R11, <#[R28 + 8]> */
		/* 821DC918h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821DC918h case    2:*/		return 0x821DC91C;
		  /* 821DC91Ch */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821DC91Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DC91Ch case    3:*/		return 0x821DC920;
		  /* 821DC920h */ case    4:  		/* bc 12, CR6_EQ, 32 */
		/* 821DC920h case    4:*/		if ( regs.CR[6].eq ) { return 0x821DC940;  }
		/* 821DC920h case    4:*/		return 0x821DC924;
		  /* 821DC924h */ case    5:  		/* lwz R10, <#[R11 + 4]> */
		/* 821DC924h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DC924h case    5:*/		return 0x821DC928;
		  /* 821DC928h */ case    6:  		/* cmplw CR6, R31, R10 */
		/* 821DC928h case    6:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 821DC928h case    6:*/		return 0x821DC92C;
		  /* 821DC92Ch */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 821DC92Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x821DC938;  }
		/* 821DC92Ch case    7:*/		return 0x821DC930;
		  /* 821DC930h */ case    8:  		/* lwz R11, <#[R11 + 12]> */
		/* 821DC930h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DC930h case    8:*/		return 0x821DC934;
		  /* 821DC934h */ case    9:  		/* b -24 */
		/* 821DC934h case    9:*/		return 0x821DC91C;
		/* 821DC934h case    9:*/		return 0x821DC938;
	}
	return 0x821DC938;
} // Block from 821DC910h-821DC938h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DC938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC938);
		  /* 821DC938h */ case    0:  		/* mr R11, R15 */
		/* 821DC938h case    0:*/		regs.R11 = regs.R15;
		/* 821DC938h case    0:*/		return 0x821DC93C;
		  /* 821DC93Ch */ case    1:  		/* b 8 */
		/* 821DC93Ch case    1:*/		return 0x821DC944;
		/* 821DC93Ch case    1:*/		return 0x821DC940;
	}
	return 0x821DC940;
} // Block from 821DC938h-821DC940h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DC940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC940);
		  /* 821DC940h */ case    0:  		/* mr R11, R16 */
		/* 821DC940h case    0:*/		regs.R11 = regs.R16;
		/* 821DC940h case    0:*/		return 0x821DC944;
	}
	return 0x821DC944;
} // Block from 821DC940h-821DC944h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DC944h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC944( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC944) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC944);
		  /* 821DC944h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DC944h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DC944h case    0:*/		return 0x821DC948;
		  /* 821DC948h */ case    1:  		/* mr R3, R31 */
		/* 821DC948h case    1:*/		regs.R3 = regs.R31;
		/* 821DC948h case    1:*/		return 0x821DC94C;
		  /* 821DC94Ch */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 821DC94Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x821DC960;  }
		/* 821DC94Ch case    2:*/		return 0x821DC950;
		  /* 821DC950h */ case    3:  		/* mr R5, R19 */
		/* 821DC950h case    3:*/		regs.R5 = regs.R19;
		/* 821DC950h case    3:*/		return 0x821DC954;
		  /* 821DC954h */ case    4:  		/* mr R4, R27 */
		/* 821DC954h case    4:*/		regs.R4 = regs.R27;
		/* 821DC954h case    4:*/		return 0x821DC958;
		  /* 821DC958h */ case    5:  		/* bl 339984 */
		/* 821DC958h case    5:*/		regs.LR = 0x821DC95C; return 0x8222F968;
		/* 821DC958h case    5:*/		return 0x821DC95C;
		  /* 821DC95Ch */ case    6:  		/* b 164 */
		/* 821DC95Ch case    6:*/		return 0x821DCA00;
		/* 821DC95Ch case    6:*/		return 0x821DC960;
	}
	return 0x821DC960;
} // Block from 821DC944h-821DC960h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DC960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC960);
		  /* 821DC960h */ case    0:  		/* mr R5, R28 */
		/* 821DC960h case    0:*/		regs.R5 = regs.R28;
		/* 821DC960h case    0:*/		return 0x821DC964;
		  /* 821DC964h */ case    1:  		/* mr R4, R30 */
		/* 821DC964h case    1:*/		regs.R4 = regs.R30;
		/* 821DC964h case    1:*/		return 0x821DC968;
		  /* 821DC968h */ case    2:  		/* bl 339904 */
		/* 821DC968h case    2:*/		regs.LR = 0x821DC96C; return 0x8222F928;
		/* 821DC968h case    2:*/		return 0x821DC96C;
		  /* 821DC96Ch */ case    3:  		/* lwz R11, <#[R31 + 36]> */
		/* 821DC96Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 821DC96Ch case    3:*/		return 0x821DC970;
		  /* 821DC970h */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DC970h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DC970h case    4:*/		return 0x821DC974;
		  /* 821DC974h */ case    5:  		/* bc 4, CR0_EQ, 140 */
		/* 821DC974h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821DCA00;  }
		/* 821DC974h case    5:*/		return 0x821DC978;
		  /* 821DC978h */ case    6:  		/* lwz R11, <#[R31 + 32]> */
		/* 821DC978h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 821DC978h case    6:*/		return 0x821DC97C;
		  /* 821DC97Ch */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DC97Ch case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DC97Ch case    7:*/		return 0x821DC980;
		  /* 821DC980h */ case    8:  		/* addic. R31, R11, -40 */
		/* 821DC980h case    8:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821DC980h case    8:*/		return 0x821DC984;
		  /* 821DC984h */ case    9:  		/* bc 12, CR0_EQ, 124 */
		/* 821DC984h case    9:*/		if ( regs.CR[0].eq ) { return 0x821DCA00;  }
		/* 821DC984h case    9:*/		return 0x821DC988;
		  /* 821DC988h */ case   10:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DC988h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DC988h case   10:*/		return 0x821DC98C;
		  /* 821DC98Ch */ case   11:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821DC98Ch case   11:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821DC98Ch case   11:*/		return 0x821DC990;
		  /* 821DC990h */ case   12:  		/* cmplwi CR6, R11, 86 */
		/* 821DC990h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 821DC990h case   12:*/		return 0x821DC994;
		  /* 821DC994h */ case   13:  		/* bc 12, CR6_EQ, 48 */
		/* 821DC994h case   13:*/		if ( regs.CR[6].eq ) { return 0x821DC9C4;  }
		/* 821DC994h case   13:*/		return 0x821DC998;
		  /* 821DC998h */ case   14:  		/* cmplwi CR6, R11, 87 */
		/* 821DC998h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 821DC998h case   14:*/		return 0x821DC99C;
		  /* 821DC99Ch */ case   15:  		/* bc 12, CR6_EQ, 40 */
		/* 821DC99Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x821DC9C4;  }
		/* 821DC99Ch case   15:*/		return 0x821DC9A0;
		  /* 821DC9A0h */ case   16:  		/* cmplwi CR6, R11, 89 */
		/* 821DC9A0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 821DC9A0h case   16:*/		return 0x821DC9A4;
		  /* 821DC9A4h */ case   17:  		/* bc 12, CR6_EQ, 32 */
		/* 821DC9A4h case   17:*/		if ( regs.CR[6].eq ) { return 0x821DC9C4;  }
		/* 821DC9A4h case   17:*/		return 0x821DC9A8;
		  /* 821DC9A8h */ case   18:  		/* cmplwi CR6, R11, 90 */
		/* 821DC9A8h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 821DC9A8h case   18:*/		return 0x821DC9AC;
		  /* 821DC9ACh */ case   19:  		/* bc 12, CR6_EQ, 24 */
		/* 821DC9ACh case   19:*/		if ( regs.CR[6].eq ) { return 0x821DC9C4;  }
		/* 821DC9ACh case   19:*/		return 0x821DC9B0;
		  /* 821DC9B0h */ case   20:  		/* cmplwi CR6, R11, 84 */
		/* 821DC9B0h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 821DC9B0h case   20:*/		return 0x821DC9B4;
		  /* 821DC9B4h */ case   21:  		/* bc 12, CR6_EQ, 16 */
		/* 821DC9B4h case   21:*/		if ( regs.CR[6].eq ) { return 0x821DC9C4;  }
		/* 821DC9B4h case   21:*/		return 0x821DC9B8;
		  /* 821DC9B8h */ case   22:  		/* cmplwi CR6, R11, 85 */
		/* 821DC9B8h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 821DC9B8h case   22:*/		return 0x821DC9BC;
		  /* 821DC9BCh */ case   23:  		/* mr R11, R16 */
		/* 821DC9BCh case   23:*/		regs.R11 = regs.R16;
		/* 821DC9BCh case   23:*/		return 0x821DC9C0;
		  /* 821DC9C0h */ case   24:  		/* bc 4, CR6_EQ, 8 */
		/* 821DC9C0h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821DC9C8;  }
		/* 821DC9C0h case   24:*/		return 0x821DC9C4;
	}
	return 0x821DC9C4;
} // Block from 821DC960h-821DC9C4h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821DC9C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC9C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC9C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC9C4);
		  /* 821DC9C4h */ case    0:  		/* mr R11, R15 */
		/* 821DC9C4h case    0:*/		regs.R11 = regs.R15;
		/* 821DC9C4h case    0:*/		return 0x821DC9C8;
	}
	return 0x821DC9C8;
} // Block from 821DC9C4h-821DC9C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DC9C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DC9C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DC9C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DC9C8);
		  /* 821DC9C8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DC9C8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DC9C8h case    0:*/		return 0x821DC9CC;
		  /* 821DC9CCh */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 821DC9CCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821DCA00;  }
		/* 821DC9CCh case    1:*/		return 0x821DC9D0;
		  /* 821DC9D0h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DC9D0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DC9D0h case    2:*/		return 0x821DC9D4;
		  /* 821DC9D4h */ case    3:  		/* mr R3, R19 */
		/* 821DC9D4h case    3:*/		regs.R3 = regs.R19;
		/* 821DC9D4h case    3:*/		return 0x821DC9D8;
		  /* 821DC9D8h */ case    4:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821DC9D8h case    4:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821DC9D8h case    4:*/		return 0x821DC9DC;
		  /* 821DC9DCh */ case    5:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821DC9DCh case    5:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821DC9DCh case    5:*/		return 0x821DC9E0;
		  /* 821DC9E0h */ case    6:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821DC9E0h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821DC9E0h case    6:*/		return 0x821DC9E4;
		  /* 821DC9E4h */ case    7:  		/* bl -492980 */
		/* 821DC9E4h case    7:*/		regs.LR = 0x821DC9E8; return 0x82164430;
		/* 821DC9E4h case    7:*/		return 0x821DC9E8;
		  /* 821DC9E8h */ case    8:  		/* addi R11, R31, -16 */
		/* 821DC9E8h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF0);
		/* 821DC9E8h case    8:*/		return 0x821DC9EC;
		  /* 821DC9ECh */ case    9:  		/* add R11, R3, R11 */
		/* 821DC9ECh case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821DC9ECh case    9:*/		return 0x821DC9F0;
		  /* 821DC9F0h */ case   10:  		/* lwz R10, <#[R11]> */
		/* 821DC9F0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DC9F0h case   10:*/		return 0x821DC9F4;
		  /* 821DC9F4h */ case   11:  		/* cmplw CR6, R10, R27 */
		/* 821DC9F4h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R27);
		/* 821DC9F4h case   11:*/		return 0x821DC9F8;
		  /* 821DC9F8h */ case   12:  		/* bc 4, CR6_EQ, 8 */
		/* 821DC9F8h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821DCA00;  }
		/* 821DC9F8h case   12:*/		return 0x821DC9FC;
		  /* 821DC9FCh */ case   13:  		/* stw R28, <#[R11]> */
		/* 821DC9FCh case   13:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 821DC9FCh case   13:*/		return 0x821DCA00;
	}
	return 0x821DCA00;
} // Block from 821DC9C8h-821DCA00h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821DCA00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCA00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCA00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCA00);
		  /* 821DCA00h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821DCA00h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821DCA00h case    0:*/		return 0x821DCA04;
		  /* 821DCA04h */ case    1:  		/* cmplw CR6, R11, R30 */
		/* 821DCA04h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821DCA04h case    1:*/		return 0x821DCA08;
		  /* 821DCA08h */ case    2:  		/* bc 4, CR6_EQ, -256 */
		/* 821DCA08h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DC908;  }
		/* 821DCA08h case    2:*/		return 0x821DCA0C;
		  /* 821DCA0Ch */ case    3:  		/* addi R29, R30, 12 */
		/* 821DCA0Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0xC);
		/* 821DCA0Ch case    3:*/		return 0x821DCA10;
		  /* 821DCA10h */ case    4:  		/* b -264 */
		/* 821DCA10h case    4:*/		return 0x821DC908;
		/* 821DCA10h case    4:*/		return 0x821DCA14;
	}
	return 0x821DCA14;
} // Block from 821DCA00h-821DCA14h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DCA14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCA14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCA14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCA14);
		  /* 821DCA14h */ case    0:  		/* mr R4, R26 */
		/* 821DCA14h case    0:*/		regs.R4 = regs.R26;
		/* 821DCA14h case    0:*/		return 0x821DCA18;
		  /* 821DCA18h */ case    1:  		/* mr R3, R19 */
		/* 821DCA18h case    1:*/		regs.R3 = regs.R19;
		/* 821DCA18h case    1:*/		return 0x821DCA1C;
		  /* 821DCA1Ch */ case    2:  		/* bl 322612 */
		/* 821DCA1Ch case    2:*/		regs.LR = 0x821DCA20; return 0x8222B650;
		/* 821DCA1Ch case    2:*/		return 0x821DCA20;
		  /* 821DCA20h */ case    3:  		/* mr R3, R19 */
		/* 821DCA20h case    3:*/		regs.R3 = regs.R19;
		/* 821DCA20h case    3:*/		return 0x821DCA24;
		  /* 821DCA24h */ case    4:  		/* bl 59644 */
		/* 821DCA24h case    4:*/		regs.LR = 0x821DCA28; return 0x821EB320;
		/* 821DCA24h case    4:*/		return 0x821DCA28;
		  /* 821DCA28h */ case    5:  		/* mr R18, R15 */
		/* 821DCA28h case    5:*/		regs.R18 = regs.R15;
		/* 821DCA28h case    5:*/		return 0x821DCA2C;
	}
	return 0x821DCA2C;
} // Block from 821DCA14h-821DCA2Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DCA2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCA2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCA2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCA2C);
		  /* 821DCA2Ch */ case    0:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 821DCA2Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 821DCA2Ch case    0:*/		return 0x821DCA30;
		  /* 821DCA30h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DCA30h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DCA30h case    1:*/		return 0x821DCA34;
		  /* 821DCA34h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DCA34h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DCA34h case    2:*/		return 0x821DCA38;
		  /* 821DCA38h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DCA38h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DCA48;  }
		/* 821DCA38h case    3:*/		return 0x821DCA3C;
		  /* 821DCA3Ch */ case    4:  		/* mr R27, R11 */
		/* 821DCA3Ch case    4:*/		regs.R27 = regs.R11;
		/* 821DCA3Ch case    4:*/		return 0x821DCA40;
		  /* 821DCA40h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DCA40h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DCA40h case    5:*/		return 0x821DCA44;
		  /* 821DCA44h */ case    6:  		/* bc 4, CR6_EQ, -948 */
		/* 821DCA44h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DC690;  }
		/* 821DCA44h case    6:*/		return 0x821DCA48;
	}
	return 0x821DCA48;
} // Block from 821DCA2Ch-821DCA48h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DCA48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCA48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCA48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCA48);
		  /* 821DCA48h */ case    0:  		/* li R4, 1 */
		/* 821DCA48h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821DCA48h case    0:*/		return 0x821DCA4C;
		  /* 821DCA4Ch */ case    1:  		/* mr R3, R19 */
		/* 821DCA4Ch case    1:*/		regs.R3 = regs.R19;
		/* 821DCA4Ch case    1:*/		return 0x821DCA50;
		  /* 821DCA50h */ case    2:  		/* bl -12760 */
		/* 821DCA50h case    2:*/		regs.LR = 0x821DCA54; return 0x821D9878;
		/* 821DCA50h case    2:*/		return 0x821DCA54;
		  /* 821DCA54h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821DCA54h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821DCA54h case    3:*/		return 0x821DCA58;
		  /* 821DCA58h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 821DCA58h case    4:*/		if ( regs.CR[0].eq ) { return 0x821DCA64;  }
		/* 821DCA58h case    4:*/		return 0x821DCA5C;
		  /* 821DCA5Ch */ case    5:  		/* mr R17, R15 */
		/* 821DCA5Ch case    5:*/		regs.R17 = regs.R15;
		/* 821DCA5Ch case    5:*/		return 0x821DCA60;
		  /* 821DCA60h */ case    6:  		/* mr R18, R15 */
		/* 821DCA60h case    6:*/		regs.R18 = regs.R15;
		/* 821DCA60h case    6:*/		return 0x821DCA64;
	}
	return 0x821DCA64;
} // Block from 821DCA48h-821DCA64h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DCA64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCA64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCA64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCA64);
		  /* 821DCA64h */ case    0:  		/* lwz R11, <#[R19 + 652]> */
		/* 821DCA64h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x0000028C) );
		/* 821DCA64h case    0:*/		return 0x821DCA68;
		  /* 821DCA68h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DCA68h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DCA68h case    1:*/		return 0x821DCA6C;
		  /* 821DCA6Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DCA6Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DCA6Ch case    2:*/		return 0x821DCA70;
		  /* 821DCA70h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DCA70h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DCA80;  }
		/* 821DCA70h case    3:*/		return 0x821DCA74;
		  /* 821DCA74h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821DCA74h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DCA74h case    4:*/		return 0x821DCA78;
		  /* 821DCA78h */ case    5:  		/* bc 12, CR0_EQ, 8 */
		/* 821DCA78h case    5:*/		if ( regs.CR[0].eq ) { return 0x821DCA80;  }
		/* 821DCA78h case    5:*/		return 0x821DCA7C;
		  /* 821DCA7Ch */ case    6:  		/* mr R17, R15 */
		/* 821DCA7Ch case    6:*/		regs.R17 = regs.R15;
		/* 821DCA7Ch case    6:*/		return 0x821DCA80;
	}
	return 0x821DCA80;
} // Block from 821DCA64h-821DCA80h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DCA80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCA80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCA80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCA80);
		  /* 821DCA80h */ case    0:  		/* rlwinm. R11, R17, 0, 24, 31 */
		/* 821DCA80h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R17);
		/* 821DCA80h case    0:*/		return 0x821DCA84;
		  /* 821DCA84h */ case    1:  		/* bc 4, CR0_EQ, -3064 */
		/* 821DCA84h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821DBE8C;  }
		/* 821DCA84h case    1:*/		return 0x821DCA88;
		  /* 821DCA88h */ case    2:  		/* mr R4, R14 */
		/* 821DCA88h case    2:*/		regs.R4 = regs.R14;
		/* 821DCA88h case    2:*/		return 0x821DCA8C;
		  /* 821DCA8Ch */ case    3:  		/* mr R3, R19 */
		/* 821DCA8Ch case    3:*/		regs.R3 = regs.R19;
		/* 821DCA8Ch case    3:*/		return 0x821DCA90;
		  /* 821DCA90h */ case    4:  		/* bl -490912 */
		/* 821DCA90h case    4:*/		regs.LR = 0x821DCA94; return 0x82164CF0;
		/* 821DCA90h case    4:*/		return 0x821DCA94;
		  /* 821DCA94h */ case    5:  		/* mr R3, R18 */
		/* 821DCA94h case    5:*/		regs.R3 = regs.R18;
		/* 821DCA94h case    5:*/		return 0x821DCA98;
		  /* 821DCA98h */ case    6:  		/* stw R16, <#[R19 + 652]> */
		/* 821DCA98h case    6:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R19 + 0x0000028C) );
		/* 821DCA98h case    6:*/		return 0x821DCA9C;
		  /* 821DCA9Ch */ case    7:  		/* addi R1, R1, 240 */
		/* 821DCA9Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 821DCA9Ch case    7:*/		return 0x821DCAA0;
		  /* 821DCAA0h */ case    8:  		/* b -1357872 */
		/* 821DCAA0h case    8:*/		return 0x82091270;
		/* 821DCAA0h case    8:*/		return 0x821DCAA4;
		  /* 821DCAA4h */ case    9:  		/* nop */
		/* 821DCAA4h case    9:*/		cpu::op::nop();
		/* 821DCAA4h case    9:*/		return 0x821DCAA8;
	}
	return 0x821DCAA8;
} // Block from 821DCA80h-821DCAA8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DCAA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCAA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCAA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCAA8);
		  /* 821DCAA8h */ case    0:  		/* mfspr R12, LR */
		/* 821DCAA8h case    0:*/		regs.R12 = regs.LR;
		/* 821DCAA8h case    0:*/		return 0x821DCAAC;
		  /* 821DCAACh */ case    1:  		/* bl -1357916 */
		/* 821DCAACh case    1:*/		regs.LR = 0x821DCAB0; return 0x82091250;
		/* 821DCAACh case    1:*/		return 0x821DCAB0;
		  /* 821DCAB0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821DCAB0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821DCAB0h case    2:*/		return 0x821DCAB4;
		  /* 821DCAB4h */ case    3:  		/* lwz R11, <#[R4 + 20]> */
		/* 821DCAB4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000014) );
		/* 821DCAB4h case    3:*/		return 0x821DCAB8;
		  /* 821DCAB8h */ case    4:  		/* mr R27, R3 */
		/* 821DCAB8h case    4:*/		regs.R27 = regs.R3;
		/* 821DCAB8h case    4:*/		return 0x821DCABC;
		  /* 821DCABCh */ case    5:  		/* mr R29, R4 */
		/* 821DCABCh case    5:*/		regs.R29 = regs.R4;
		/* 821DCABCh case    5:*/		return 0x821DCAC0;
		  /* 821DCAC0h */ case    6:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DCAC0h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DCAC0h case    6:*/		return 0x821DCAC4;
		  /* 821DCAC4h */ case    7:  		/* bc 12, CR0_EQ, 40 */
		/* 821DCAC4h case    7:*/		if ( regs.CR[0].eq ) { return 0x821DCAEC;  }
		/* 821DCAC4h case    7:*/		return 0x821DCAC8;
		  /* 821DCAC8h */ case    8:  		/* lwz R11, <#[R4 + 28]> */
		/* 821DCAC8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000001C) );
		/* 821DCAC8h case    8:*/		return 0x821DCACC;
		  /* 821DCACCh */ case    9:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DCACCh case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DCACCh case    9:*/		return 0x821DCAD0;
		  /* 821DCAD0h */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 821DCAD0h case   10:*/		if ( regs.CR[0].eq ) { return 0x821DCAE0;  }
		/* 821DCAD0h case   10:*/		return 0x821DCAD4;
		  /* 821DCAD4h */ case   11:  		/* lwz R11, <#[R4 + 36]> */
		/* 821DCAD4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000024) );
		/* 821DCAD4h case   11:*/		return 0x821DCAD8;
		  /* 821DCAD8h */ case   12:  		/* addi R10, R4, 32 */
		/* 821DCAD8h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R4,0x20);
		/* 821DCAD8h case   12:*/		return 0x821DCADC;
		  /* 821DCADCh */ case   13:  		/* b 24 */
		/* 821DCADCh case   13:*/		return 0x821DCAF4;
		/* 821DCADCh case   13:*/		return 0x821DCAE0;
	}
	return 0x821DCAE0;
} // Block from 821DCAA8h-821DCAE0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821DCAE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCAE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCAE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCAE0);
		  /* 821DCAE0h */ case    0:  		/* lwz R11, <#[R29 + 28]> */
		/* 821DCAE0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821DCAE0h case    0:*/		return 0x821DCAE4;
		  /* 821DCAE4h */ case    1:  		/* addi R10, R29, 24 */
		/* 821DCAE4h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x18);
		/* 821DCAE4h case    1:*/		return 0x821DCAE8;
		  /* 821DCAE8h */ case    2:  		/* b 12 */
		/* 821DCAE8h case    2:*/		return 0x821DCAF4;
		/* 821DCAE8h case    2:*/		return 0x821DCAEC;
	}
	return 0x821DCAEC;
} // Block from 821DCAE0h-821DCAECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DCAECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCAEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCAEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCAEC);
		  /* 821DCAECh */ case    0:  		/* lwz R11, <#[R29 + 20]> */
		/* 821DCAECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 821DCAECh case    0:*/		return 0x821DCAF0;
		  /* 821DCAF0h */ case    1:  		/* addi R10, R29, 16 */
		/* 821DCAF0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x10);
		/* 821DCAF0h case    1:*/		return 0x821DCAF4;
	}
	return 0x821DCAF4;
} // Block from 821DCAECh-821DCAF4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DCAF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCAF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCAF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCAF4);
		  /* 821DCAF4h */ case    0:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821DCAF4h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821DCAF4h case    0:*/		return 0x821DCAF8;
		  /* 821DCAF8h */ case    1:  		/* addic R9, R9, -1 */
		/* 821DCAF8h case    1:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821DCAF8h case    1:*/		return 0x821DCAFC;
		  /* 821DCAFCh */ case    2:  		/* subfe R9, R9, R9 */
		/* 821DCAFCh case    2:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821DCAFCh case    2:*/		return 0x821DCB00;
		  /* 821DCB00h */ case    3:  		/* and R11, R9, R11 */
		/* 821DCB00h case    3:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821DCB00h case    3:*/		return 0x821DCB04;
		  /* 821DCB04h */ case    4:  		/* b 104 */
		/* 821DCB04h case    4:*/		return 0x821DCB6C;
		/* 821DCB04h case    4:*/		return 0x821DCB08;
		  /* 821DCB08h */ case    5:  		/* lwz R9, <#[R11 + 8]> */
		/* 821DCB08h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821DCB08h case    5:*/		return 0x821DCB0C;
		  /* 821DCB0Ch */ case    6:  		/* rlwinm R8, R11, 0, 0, 30 */
		/* 821DCB0Ch case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R8,regs.R11);
		/* 821DCB0Ch case    6:*/		return 0x821DCB10;
		  /* 821DCB10h */ case    7:  		/* rlwinm R9, R9, 0, 6, 4 */
		/* 821DCB10h case    7:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R9,regs.R9);
		/* 821DCB10h case    7:*/		return 0x821DCB14;
		  /* 821DCB14h */ case    8:  		/* stw R9, <#[R11 + 8]> */
		/* 821DCB14h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821DCB14h case    8:*/		return 0x821DCB18;
		  /* 821DCB18h */ case    9:  		/* lwz R11, <#[R8 + 40]> */
		/* 821DCB18h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000028) );
		/* 821DCB18h case    9:*/		return 0x821DCB1C;
		  /* 821DCB1Ch */ case   10:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821DCB1Ch case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821DCB1Ch case   10:*/		return 0x821DCB20;
		  /* 821DCB20h */ case   11:  		/* bc 4, CR0_EQ, 12 */
		/* 821DCB20h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821DCB2C;  }
		/* 821DCB20h case   11:*/		return 0x821DCB24;
		  /* 821DCB24h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821DCB24h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DCB24h case   12:*/		return 0x821DCB28;
		  /* 821DCB28h */ case   13:  		/* bc 4, CR6_EQ, -32 */
		/* 821DCB28h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821DCB08;  }
		/* 821DCB28h case   13:*/		return 0x821DCB2C;
	}
	return 0x821DCB2C;
} // Block from 821DCAF4h-821DCB2Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 821DCB2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCB2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCB2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCB2C);
		  /* 821DCB2Ch */ case    0:  		/* addi R8, R29, 32 */
		/* 821DCB2Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R29,0x20);
		/* 821DCB2Ch case    0:*/		return 0x821DCB30;
		  /* 821DCB30h */ case    1:  		/* cmplw CR6, R10, R8 */
		/* 821DCB30h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 821DCB30h case    1:*/		return 0x821DCB34;
		  /* 821DCB34h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 821DCB34h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DCB74;  }
		/* 821DCB34h case    2:*/		return 0x821DCB38;
		  /* 821DCB38h */ case    3:  		/* addi R9, R29, 24 */
		/* 821DCB38h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R29,0x18);
		/* 821DCB38h case    3:*/		return 0x821DCB3C;
		  /* 821DCB3Ch */ case    4:  		/* cmplw CR6, R10, R9 */
		/* 821DCB3Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821DCB3Ch case    4:*/		return 0x821DCB40;
		  /* 821DCB40h */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 821DCB40h case    5:*/		if ( regs.CR[6].eq ) { return 0x821DCB5C;  }
		/* 821DCB40h case    5:*/		return 0x821DCB44;
		  /* 821DCB44h */ case    6:  		/* lwz R11, <#[R29 + 28]> */
		/* 821DCB44h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821DCB44h case    6:*/		return 0x821DCB48;
		  /* 821DCB48h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DCB48h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DCB48h case    7:*/		return 0x821DCB4C;
		  /* 821DCB4Ch */ case    8:  		/* bc 4, CR0_EQ, 16 */
		/* 821DCB4Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x821DCB5C;  }
		/* 821DCB4Ch case    8:*/		return 0x821DCB50;
		  /* 821DCB50h */ case    9:  		/* lwz R11, <#[R9 + 4]> */
		/* 821DCB50h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821DCB50h case    9:*/		return 0x821DCB54;
		  /* 821DCB54h */ case   10:  		/* mr R10, R9 */
		/* 821DCB54h case   10:*/		regs.R10 = regs.R9;
		/* 821DCB54h case   10:*/		return 0x821DCB58;
		  /* 821DCB58h */ case   11:  		/* b 12 */
		/* 821DCB58h case   11:*/		return 0x821DCB64;
		/* 821DCB58h case   11:*/		return 0x821DCB5C;
	}
	return 0x821DCB5C;
} // Block from 821DCB2Ch-821DCB5Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821DCB5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCB5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCB5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCB5C);
		  /* 821DCB5Ch */ case    0:  		/* lwz R11, <#[R8 + 4]> */
		/* 821DCB5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 821DCB5Ch case    0:*/		return 0x821DCB60;
		  /* 821DCB60h */ case    1:  		/* mr R10, R8 */
		/* 821DCB60h case    1:*/		regs.R10 = regs.R8;
		/* 821DCB60h case    1:*/		return 0x821DCB64;
	}
	return 0x821DCB64;
} // Block from 821DCB5Ch-821DCB64h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DCB64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCB64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCB64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCB64);
		  /* 821DCB64h */ case    0:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821DCB64h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821DCB64h case    0:*/		return 0x821DCB68;
		  /* 821DCB68h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821DCB68h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821DCB74;  }
		/* 821DCB68h case    1:*/		return 0x821DCB6C;
	}
	return 0x821DCB6C;
} // Block from 821DCB64h-821DCB6Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DCB6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCB6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCB6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCB6C);
		  /* 821DCB6Ch */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821DCB6Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DCB6Ch case    0:*/		return 0x821DCB70;
		  /* 821DCB70h */ case    1:  		/* bc 4, CR6_EQ, -104 */
		/* 821DCB70h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DCB08;  }
		/* 821DCB70h case    1:*/		return 0x821DCB74;
	}
	return 0x821DCB74;
} // Block from 821DCB6Ch-821DCB74h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DCB74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCB74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCB74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCB74);
		  /* 821DCB74h */ case    0:  		/* li R28, 0 */
		/* 821DCB74h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821DCB74h case    0:*/		return 0x821DCB78;
		  /* 821DCB78h */ case    1:  		/* li R5, 38 */
		/* 821DCB78h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 821DCB78h case    1:*/		return 0x821DCB7C;
		  /* 821DCB7Ch */ case    2:  		/* stb R28, <#[R1 + 80]> */
		/* 821DCB7Ch case    2:*/		cpu::mem::store8( regs, regs.R28, (uint32)(regs.R1 + 0x00000050) );
		/* 821DCB7Ch case    2:*/		return 0x821DCB80;
		  /* 821DCB80h */ case    3:  		/* li R4, 8 */
		/* 821DCB80h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821DCB80h case    3:*/		return 0x821DCB84;
		  /* 821DCB84h */ case    4:  		/* mr R3, R27 */
		/* 821DCB84h case    4:*/		regs.R3 = regs.R27;
		/* 821DCB84h case    4:*/		return 0x821DCB88;
		  /* 821DCB88h */ case    5:  		/* bl -492184 */
		/* 821DCB88h case    5:*/		regs.LR = 0x821DCB8C; return 0x821648F0;
		/* 821DCB88h case    5:*/		return 0x821DCB8C;
		  /* 821DCB8Ch */ case    6:  		/* addi R11, R3, 4 */
		/* 821DCB8Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 821DCB8Ch case    6:*/		return 0x821DCB90;
		  /* 821DCB90h */ case    7:  		/* ori R10, R3, 1 */
		/* 821DCB90h case    7:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 821DCB90h case    7:*/		return 0x821DCB94;
		  /* 821DCB94h */ case    8:  		/* stw R3, <#[R27 + 652]> */
		/* 821DCB94h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x0000028C) );
		/* 821DCB94h case    8:*/		return 0x821DCB98;
		  /* 821DCB98h */ case    9:  		/* ori R11, R11, 1 */
		/* 821DCB98h case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821DCB98h case    9:*/		return 0x821DCB9C;
		  /* 821DCB9Ch */ case   10:  		/* stw R10, <#[R3 + 4]> */
		/* 821DCB9Ch case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821DCB9Ch case   10:*/		return 0x821DCBA0;
		  /* 821DCBA0h */ case   11:  		/* stw R11, <#[R3]> */
		/* 821DCBA0h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821DCBA0h case   11:*/		return 0x821DCBA4;
		  /* 821DCBA4h */ case   12:  		/* lwz R11, <#[R27 + 40]> */
		/* 821DCBA4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000028) );
		/* 821DCBA4h case   12:*/		return 0x821DCBA8;
		  /* 821DCBA8h */ case   13:  		/* ori R10, R11, 4096 */
		/* 821DCBA8h case   13:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R11,0x1000);
		/* 821DCBA8h case   13:*/		return 0x821DCBAC;
		  /* 821DCBACh */ case   14:  		/* rlwinm R26, R11, 20, 31, 31 */
		/* 821DCBACh case   14:*/		cpu::op::rlwinm<0,20,31,31>(regs,&regs.R26,regs.R11);
		/* 821DCBACh case   14:*/		return 0x821DCBB0;
		  /* 821DCBB0h */ case   15:  		/* stw R10, <#[R27 + 40]> */
		/* 821DCBB0h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000028) );
		/* 821DCBB0h case   15:*/		return 0x821DCBB4;
		  /* 821DCBB4h */ case   16:  		/* lwz R11, <#[R29 + 20]> */
		/* 821DCBB4h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 821DCBB4h case   16:*/		return 0x821DCBB8;
		  /* 821DCBB8h */ case   17:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DCBB8h case   17:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DCBB8h case   17:*/		return 0x821DCBBC;
		  /* 821DCBBCh */ case   18:  		/* bc 12, CR0_EQ, 40 */
		/* 821DCBBCh case   18:*/		if ( regs.CR[0].eq ) { return 0x821DCBE4;  }
		/* 821DCBBCh case   18:*/		return 0x821DCBC0;
		  /* 821DCBC0h */ case   19:  		/* lwz R11, <#[R29 + 28]> */
		/* 821DCBC0h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821DCBC0h case   19:*/		return 0x821DCBC4;
		  /* 821DCBC4h */ case   20:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DCBC4h case   20:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DCBC4h case   20:*/		return 0x821DCBC8;
		  /* 821DCBC8h */ case   21:  		/* bc 12, CR0_EQ, 16 */
		/* 821DCBC8h case   21:*/		if ( regs.CR[0].eq ) { return 0x821DCBD8;  }
		/* 821DCBC8h case   21:*/		return 0x821DCBCC;
		  /* 821DCBCCh */ case   22:  		/* lwz R11, <#[R29 + 36]> */
		/* 821DCBCCh case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 821DCBCCh case   22:*/		return 0x821DCBD0;
		  /* 821DCBD0h */ case   23:  		/* addi R30, R29, 32 */
		/* 821DCBD0h case   23:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x20);
		/* 821DCBD0h case   23:*/		return 0x821DCBD4;
		  /* 821DCBD4h */ case   24:  		/* b 24 */
		/* 821DCBD4h case   24:*/		return 0x821DCBEC;
		/* 821DCBD4h case   24:*/		return 0x821DCBD8;
	}
	return 0x821DCBD8;
} // Block from 821DCB74h-821DCBD8h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821DCBD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCBD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCBD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCBD8);
		  /* 821DCBD8h */ case    0:  		/* lwz R11, <#[R29 + 28]> */
		/* 821DCBD8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821DCBD8h case    0:*/		return 0x821DCBDC;
		  /* 821DCBDCh */ case    1:  		/* addi R30, R29, 24 */
		/* 821DCBDCh case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x18);
		/* 821DCBDCh case    1:*/		return 0x821DCBE0;
		  /* 821DCBE0h */ case    2:  		/* b 12 */
		/* 821DCBE0h case    2:*/		return 0x821DCBEC;
		/* 821DCBE0h case    2:*/		return 0x821DCBE4;
	}
	return 0x821DCBE4;
} // Block from 821DCBD8h-821DCBE4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DCBE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCBE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCBE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCBE4);
		  /* 821DCBE4h */ case    0:  		/* lwz R11, <#[R29 + 20]> */
		/* 821DCBE4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 821DCBE4h case    0:*/		return 0x821DCBE8;
		  /* 821DCBE8h */ case    1:  		/* addi R30, R29, 16 */
		/* 821DCBE8h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x10);
		/* 821DCBE8h case    1:*/		return 0x821DCBEC;
	}
	return 0x821DCBEC;
} // Block from 821DCBE4h-821DCBECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DCBECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCBEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCBEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCBEC);
		  /* 821DCBECh */ case    0:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DCBECh case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DCBECh case    0:*/		return 0x821DCBF0;
		  /* 821DCBF0h */ case    1:  		/* addic R10, R10, -1 */
		/* 821DCBF0h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821DCBF0h case    1:*/		return 0x821DCBF4;
		  /* 821DCBF4h */ case    2:  		/* subfe R10, R10, R10 */
		/* 821DCBF4h case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821DCBF4h case    2:*/		return 0x821DCBF8;
		  /* 821DCBF8h */ case    3:  		/* and R31, R10, R11 */
		/* 821DCBF8h case    3:*/		cpu::op::and<0>(regs,&regs.R31,regs.R10,regs.R11);
		/* 821DCBF8h case    3:*/		return 0x821DCBFC;
		  /* 821DCBFCh */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821DCBFCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DCBFCh case    4:*/		return 0x821DCC00;
		  /* 821DCC00h */ case    5:  		/* bc 12, CR6_EQ, 148 */
		/* 821DCC00h case    5:*/		if ( regs.CR[6].eq ) { return 0x821DCC94;  }
		/* 821DCC00h case    5:*/		return 0x821DCC04;
		  /* 821DCC04h */ case    6:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DCC04h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DCC04h case    6:*/		return 0x821DCC08;
		  /* 821DCC08h */ case    7:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 821DCC08h case    7:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 821DCC08h case    7:*/		return 0x821DCC0C;
		  /* 821DCC0Ch */ case    8:  		/* bc 4, CR0_EQ, 28 */
		/* 821DCC0Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x821DCC28;  }
		/* 821DCC0Ch case    8:*/		return 0x821DCC10;
		  /* 821DCC10h */ case    9:  		/* addi R5, R1, 80 */
		/* 821DCC10h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821DCC10h case    9:*/		return 0x821DCC14;
		  /* 821DCC14h */ case   10:  		/* mr R4, R31 */
		/* 821DCC14h case   10:*/		regs.R4 = regs.R31;
		/* 821DCC14h case   10:*/		return 0x821DCC18;
		  /* 821DCC18h */ case   11:  		/* mr R3, R27 */
		/* 821DCC18h case   11:*/		regs.R3 = regs.R27;
		/* 821DCC18h case   11:*/		return 0x821DCC1C;
		  /* 821DCC1Ch */ case   12:  		/* bl -43924 */
		/* 821DCC1Ch case   12:*/		regs.LR = 0x821DCC20; return 0x821D2088;
		/* 821DCC1Ch case   12:*/		return 0x821DCC20;
		  /* 821DCC20h */ case   13:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821DCC20h case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821DCC20h case   13:*/		return 0x821DCC24;
		  /* 821DCC24h */ case   14:  		/* bc 4, CR0_EQ, -112 */
		/* 821DCC24h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821DCBB4;  }
		/* 821DCC24h case   14:*/		return 0x821DCC28;
	}
	return 0x821DCC28;
} // Block from 821DCBECh-821DCC28h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821DCC28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCC28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCC28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCC28);
		  /* 821DCC28h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821DCC28h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821DCC28h case    0:*/		return 0x821DCC2C;
		  /* 821DCC2Ch */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 821DCC2Ch case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821DCC2Ch case    1:*/		return 0x821DCC30;
		  /* 821DCC30h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821DCC30h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821DCC30h case    2:*/		return 0x821DCC34;
		  /* 821DCC34h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 821DCC34h case    3:*/		if ( regs.CR[0].eq ) { return 0x821DCC40;  }
		/* 821DCC34h case    3:*/		return 0x821DCC38;
		  /* 821DCC38h */ case    4:  		/* mr R31, R28 */
		/* 821DCC38h case    4:*/		regs.R31 = regs.R28;
		/* 821DCC38h case    4:*/		return 0x821DCC3C;
		  /* 821DCC3Ch */ case    5:  		/* b 12 */
		/* 821DCC3Ch case    5:*/		return 0x821DCC48;
		/* 821DCC3Ch case    5:*/		return 0x821DCC40;
	}
	return 0x821DCC40;
} // Block from 821DCC28h-821DCC40h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DCC40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCC40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCC40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCC40);
		  /* 821DCC40h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821DCC40h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DCC40h case    0:*/		return 0x821DCC44;
		  /* 821DCC44h */ case    1:  		/* bc 4, CR6_EQ, -64 */
		/* 821DCC44h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DCC04;  }
		/* 821DCC44h case    1:*/		return 0x821DCC48;
	}
	return 0x821DCC48;
} // Block from 821DCC40h-821DCC48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DCC48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCC48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCC48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCC48);
		  /* 821DCC48h */ case    0:  		/* addi R10, R29, 32 */
		/* 821DCC48h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x20);
		/* 821DCC48h case    0:*/		return 0x821DCC4C;
		  /* 821DCC4Ch */ case    1:  		/* cmplw CR6, R30, R10 */
		/* 821DCC4Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R10);
		/* 821DCC4Ch case    1:*/		return 0x821DCC50;
		  /* 821DCC50h */ case    2:  		/* bc 12, CR6_EQ, -84 */
		/* 821DCC50h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DCBFC;  }
		/* 821DCC50h case    2:*/		return 0x821DCC54;
		  /* 821DCC54h */ case    3:  		/* addi R11, R29, 24 */
		/* 821DCC54h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x18);
		/* 821DCC54h case    3:*/		return 0x821DCC58;
		  /* 821DCC58h */ case    4:  		/* cmplw CR6, R30, R11 */
		/* 821DCC58h case    4:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821DCC58h case    4:*/		return 0x821DCC5C;
		  /* 821DCC5Ch */ case    5:  		/* bc 12, CR6_EQ, 44 */
		/* 821DCC5Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821DCC88;  }
		/* 821DCC5Ch case    5:*/		return 0x821DCC60;
		  /* 821DCC60h */ case    6:  		/* lwz R9, <#[R29 + 28]> */
		/* 821DCC60h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x0000001C) );
		/* 821DCC60h case    6:*/		return 0x821DCC64;
		  /* 821DCC64h */ case    7:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 821DCC64h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 821DCC64h case    7:*/		return 0x821DCC68;
		  /* 821DCC68h */ case    8:  		/* bc 4, CR0_EQ, 32 */
		/* 821DCC68h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821DCC88;  }
		/* 821DCC68h case    8:*/		return 0x821DCC6C;
		  /* 821DCC6Ch */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 821DCC6Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DCC6Ch case    9:*/		return 0x821DCC70;
		  /* 821DCC70h */ case   10:  		/* mr R30, R11 */
		/* 821DCC70h case   10:*/		regs.R30 = regs.R11;
		/* 821DCC70h case   10:*/		return 0x821DCC74;
		  /* 821DCC74h */ case   11:  		/* rlwinm R11, R10, 0, 31, 31 */
		/* 821DCC74h case   11:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821DCC74h case   11:*/		return 0x821DCC78;
		  /* 821DCC78h */ case   12:  		/* addic R11, R11, -1 */
		/* 821DCC78h case   12:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821DCC78h case   12:*/		return 0x821DCC7C;
		  /* 821DCC7Ch */ case   13:  		/* subfe R11, R11, R11 */
		/* 821DCC7Ch case   13:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821DCC7Ch case   13:*/		return 0x821DCC80;
		  /* 821DCC80h */ case   14:  		/* and R31, R11, R10 */
		/* 821DCC80h case   14:*/		cpu::op::and<0>(regs,&regs.R31,regs.R11,regs.R10);
		/* 821DCC80h case   14:*/		return 0x821DCC84;
		  /* 821DCC84h */ case   15:  		/* b -136 */
		/* 821DCC84h case   15:*/		return 0x821DCBFC;
		/* 821DCC84h case   15:*/		return 0x821DCC88;
	}
	return 0x821DCC88;
} // Block from 821DCC48h-821DCC88h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821DCC88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCC88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCC88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCC88);
		  /* 821DCC88h */ case    0:  		/* lwz R11, <#[R10 + 4]> */
		/* 821DCC88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821DCC88h case    0:*/		return 0x821DCC8C;
		  /* 821DCC8Ch */ case    1:  		/* mr R30, R10 */
		/* 821DCC8Ch case    1:*/		regs.R30 = regs.R10;
		/* 821DCC8Ch case    1:*/		return 0x821DCC90;
		  /* 821DCC90h */ case    2:  		/* b -164 */
		/* 821DCC90h case    2:*/		return 0x821DCBEC;
		/* 821DCC90h case    2:*/		return 0x821DCC94;
	}
	return 0x821DCC94;
} // Block from 821DCC88h-821DCC94h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DCC94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCC94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCC94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCC94);
		  /* 821DCC94h */ case    0:  		/* lwz R3, <#[R27 + 652]> */
		/* 821DCC94h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x0000028C) );
		/* 821DCC94h case    0:*/		return 0x821DCC98;
		  /* 821DCC98h */ case    1:  		/* lwz R11, <#[R3 + 4]> */
		/* 821DCC98h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821DCC98h case    1:*/		return 0x821DCC9C;
		  /* 821DCC9Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DCC9Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DCC9Ch case    2:*/		return 0x821DCCA0;
		  /* 821DCCA0h */ case    3:  		/* bc 4, CR0_EQ, 180 */
		/* 821DCCA0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DCD54;  }
		/* 821DCCA0h case    3:*/		return 0x821DCCA4;
		  /* 821DCCA4h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821DCCA4h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DCCA4h case    4:*/		return 0x821DCCA8;
		  /* 821DCCA8h */ case    5:  		/* bc 12, CR0_EQ, 172 */
		/* 821DCCA8h case    5:*/		if ( regs.CR[0].eq ) { return 0x821DCD54;  }
		/* 821DCCA8h case    5:*/		return 0x821DCCAC;
		  /* 821DCCACh */ case    6:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821DCCACh case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821DCCACh case    6:*/		return 0x821DCCB0;
		  /* 821DCCB0h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DCCB0h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DCCB0h case    7:*/		return 0x821DCCB4;
		  /* 821DCCB4h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 821DCCB4h case    8:*/		if ( regs.CR[0].eq ) { return 0x821DCCC0;  }
		/* 821DCCB4h case    8:*/		return 0x821DCCB8;
		  /* 821DCCB8h */ case    9:  		/* mr R4, R28 */
		/* 821DCCB8h case    9:*/		regs.R4 = regs.R28;
		/* 821DCCB8h case    9:*/		return 0x821DCCBC;
		  /* 821DCCBCh */ case   10:  		/* b 16 */
		/* 821DCCBCh case   10:*/		return 0x821DCCCC;
		/* 821DCCBCh case   10:*/		return 0x821DCCC0;
	}
	return 0x821DCCC0;
} // Block from 821DCC94h-821DCCC0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821DCCC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCCC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCCC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCCC0);
		  /* 821DCCC0h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 821DCCC0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821DCCC0h case    0:*/		return 0x821DCCC4;
		  /* 821DCCC4h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DCCC4h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DCCC4h case    1:*/		return 0x821DCCC8;
		  /* 821DCCC8h */ case    2:  		/* addi R4, R11, -4 */
		/* 821DCCC8h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821DCCC8h case    2:*/		return 0x821DCCCC;
	}
	return 0x821DCCCC;
} // Block from 821DCCC0h-821DCCCCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DCCCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCCCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCCCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCCCC);
		  /* 821DCCCCh */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 821DCCCCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821DCCCCh case    0:*/		return 0x821DCCD0;
		  /* 821DCCD0h */ case    1:  		/* addi R10, R11, 3 */
		/* 821DCCD0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821DCCD0h case    1:*/		return 0x821DCCD4;
		  /* 821DCCD4h */ case    2:  		/* addic. R11, R11, -1 */
		/* 821DCCD4h case    2:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821DCCD4h case    2:*/		return 0x821DCCD8;
		  /* 821DCCD8h */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821DCCD8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821DCCD8h case    3:*/		return 0x821DCCDC;
		  /* 821DCCDCh */ case    4:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821DCCDCh case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821DCCDCh case    4:*/		return 0x821DCCE0;
		  /* 821DCCE0h */ case    5:  		/* stw R11, <#[R4 + 8]> */
		/* 821DCCE0h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821DCCE0h case    5:*/		return 0x821DCCE4;
		  /* 821DCCE4h */ case    6:  		/* bc 4, CR0_EQ, 56 */
		/* 821DCCE4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821DCD1C;  }
		/* 821DCCE4h case    6:*/		return 0x821DCCE8;
		  /* 821DCCE8h */ case    7:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821DCCE8h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821DCCE8h case    7:*/		return 0x821DCCEC;
		  /* 821DCCECh */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 821DCCECh case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DCCECh case    8:*/		return 0x821DCCF0;
		  /* 821DCCF0h */ case    9:  		/* lwz R9, <#[R11]> */
		/* 821DCCF0h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821DCCF0h case    9:*/		return 0x821DCCF4;
		  /* 821DCCF4h */ case   10:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821DCCF4h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821DCCF4h case   10:*/		return 0x821DCCF8;
		  /* 821DCCF8h */ case   11:  		/* stw R9, <#[R10]> */
		/* 821DCCF8h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DCCF8h case   11:*/		return 0x821DCCFC;
		  /* 821DCCFCh */ case   12:  		/* lwz R10, <#[R11 + 4]> */
		/* 821DCCFCh case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DCCFCh case   12:*/		return 0x821DCD00;
		  /* 821DCD00h */ case   13:  		/* lwz R11, <#[R11]> */
		/* 821DCD00h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821DCD00h case   13:*/		return 0x821DCD04;
		  /* 821DCD04h */ case   14:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DCD04h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DCD04h case   14:*/		return 0x821DCD08;
		  /* 821DCD08h */ case   15:  		/* stw R10, <#[R11]> */
		/* 821DCD08h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DCD08h case   15:*/		return 0x821DCD0C;
		  /* 821DCD0Ch */ case   16:  		/* lwz R11, <#[R4 + 12]> */
		/* 821DCD0Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821DCD0Ch case   16:*/		return 0x821DCD10;
		  /* 821DCD10h */ case   17:  		/* addi R11, R11, 4 */
		/* 821DCD10h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821DCD10h case   17:*/		return 0x821DCD14;
		  /* 821DCD14h */ case   18:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821DCD14h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821DCD14h case   18:*/		return 0x821DCD18;
		  /* 821DCD18h */ case   19:  		/* bl -569104 */
		/* 821DCD18h case   19:*/		regs.LR = 0x821DCD1C; return 0x82151E08;
		/* 821DCD18h case   19:*/		return 0x821DCD1C;
	}
	return 0x821DCD1C;
} // Block from 821DCCCCh-821DCD1Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 821DCD1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCD1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCD1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCD1C);
		  /* 821DCD1Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DCD1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DCD1Ch case    0:*/		return 0x821DCD20;
		  /* 821DCD20h */ case    1:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821DCD20h case    1:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821DCD20h case    1:*/		return 0x821DCD24;
		  /* 821DCD24h */ case    2:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821DCD24h case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821DCD24h case    2:*/		return 0x821DCD28;
		  /* 821DCD28h */ case    3:  		/* stw R11, <#[R31 + 8]> */
		/* 821DCD28h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DCD28h case    3:*/		return 0x821DCD2C;
		  /* 821DCD2Ch */ case    4:  		/* cmplwi CR6, R10, 14720 */
		/* 821DCD2Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003980);
		/* 821DCD2Ch case    4:*/		return 0x821DCD30;
		  /* 821DCD30h */ case    5:  		/* bc 12, CR6_EQ, -156 */
		/* 821DCD30h case    5:*/		if ( regs.CR[6].eq ) { return 0x821DCC94;  }
		/* 821DCD30h case    5:*/		return 0x821DCD34;
		  /* 821DCD34h */ case    6:  		/* lwz R11, <#[R31 + 28]> */
		/* 821DCD34h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 821DCD34h case    6:*/		return 0x821DCD38;
		  /* 821DCD38h */ case    7:  		/* cmplw CR6, R11, R29 */
		/* 821DCD38h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821DCD38h case    7:*/		return 0x821DCD3C;
		  /* 821DCD3Ch */ case    8:  		/* bc 4, CR6_EQ, -168 */
		/* 821DCD3Ch case    8:*/		if ( !regs.CR[6].eq ) { return 0x821DCC94;  }
		/* 821DCD3Ch case    8:*/		return 0x821DCD40;
		  /* 821DCD40h */ case    9:  		/* addi R5, R1, 80 */
		/* 821DCD40h case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821DCD40h case    9:*/		return 0x821DCD44;
		  /* 821DCD44h */ case   10:  		/* mr R4, R31 */
		/* 821DCD44h case   10:*/		regs.R4 = regs.R31;
		/* 821DCD44h case   10:*/		return 0x821DCD48;
		  /* 821DCD48h */ case   11:  		/* mr R3, R27 */
		/* 821DCD48h case   11:*/		regs.R3 = regs.R27;
		/* 821DCD48h case   11:*/		return 0x821DCD4C;
		  /* 821DCD4Ch */ case   12:  		/* bl -44228 */
		/* 821DCD4Ch case   12:*/		regs.LR = 0x821DCD50; return 0x821D2088;
		/* 821DCD4Ch case   12:*/		return 0x821DCD50;
		  /* 821DCD50h */ case   13:  		/* b -188 */
		/* 821DCD50h case   13:*/		return 0x821DCC94;
		/* 821DCD50h case   13:*/		return 0x821DCD54;
	}
	return 0x821DCD54;
} // Block from 821DCD1Ch-821DCD54h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821DCD54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCD54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCD54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCD54);
		  /* 821DCD54h */ case    0:  		/* mr R4, R26 */
		/* 821DCD54h case    0:*/		regs.R4 = regs.R26;
		/* 821DCD54h case    0:*/		return 0x821DCD58;
		  /* 821DCD58h */ case    1:  		/* mr R3, R27 */
		/* 821DCD58h case    1:*/		regs.R3 = regs.R27;
		/* 821DCD58h case    1:*/		return 0x821DCD5C;
		  /* 821DCD5Ch */ case    2:  		/* bl -491628 */
		/* 821DCD5Ch case    2:*/		regs.LR = 0x821DCD60; return 0x82164CF0;
		/* 821DCD5Ch case    2:*/		return 0x821DCD60;
		  /* 821DCD60h */ case    3:  		/* lbz R3, <#[R1 + 80]> */
		/* 821DCD60h case    3:*/		cpu::mem::load8z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 821DCD60h case    3:*/		return 0x821DCD64;
		  /* 821DCD64h */ case    4:  		/* stw R28, <#[R27 + 652]> */
		/* 821DCD64h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R27 + 0x0000028C) );
		/* 821DCD64h case    4:*/		return 0x821DCD68;
		  /* 821DCD68h */ case    5:  		/* addi R1, R1, 144 */
		/* 821DCD68h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821DCD68h case    5:*/		return 0x821DCD6C;
		  /* 821DCD6Ch */ case    6:  		/* b -1358540 */
		/* 821DCD6Ch case    6:*/		return 0x820912A0;
		/* 821DCD6Ch case    6:*/		return 0x821DCD70;
	}
	return 0x821DCD70;
} // Block from 821DCD54h-821DCD70h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DCD70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCD70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCD70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCD70);
		  /* 821DCD70h */ case    0:  		/* mfspr R12, LR */
		/* 821DCD70h case    0:*/		regs.R12 = regs.LR;
		/* 821DCD70h case    0:*/		return 0x821DCD74;
		  /* 821DCD74h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821DCD74h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821DCD74h case    1:*/		return 0x821DCD78;
		  /* 821DCD78h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 821DCD78h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821DCD78h case    2:*/		return 0x821DCD7C;
		  /* 821DCD7Ch */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 821DCD7Ch case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821DCD7Ch case    3:*/		return 0x821DCD80;
		  /* 821DCD80h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 821DCD80h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821DCD80h case    4:*/		return 0x821DCD84;
		  /* 821DCD84h */ case    5:  		/* lwz R11, <#[R4 + 76]> */
		/* 821DCD84h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000004C) );
		/* 821DCD84h case    5:*/		return 0x821DCD88;
		  /* 821DCD88h */ case    6:  		/* mr R30, R4 */
		/* 821DCD88h case    6:*/		regs.R30 = regs.R4;
		/* 821DCD88h case    6:*/		return 0x821DCD8C;
		  /* 821DCD8Ch */ case    7:  		/* li R4, 3605 */
		/* 821DCD8Ch case    7:*/		cpu::op::li<0>(regs,&regs.R4,0xE15);
		/* 821DCD8Ch case    7:*/		return 0x821DCD90;
		  /* 821DCD90h */ case    8:  		/* rlwinm R11, R11, 0, 13, 11 */
		/* 821DCD90h case    8:*/		cpu::op::rlwinm<0,0,13,11>(regs,&regs.R11,regs.R11);
		/* 821DCD90h case    8:*/		return 0x821DCD94;
		  /* 821DCD94h */ case    9:  		/* mr R31, R3 */
		/* 821DCD94h case    9:*/		regs.R31 = regs.R3;
		/* 821DCD94h case    9:*/		return 0x821DCD98;
		  /* 821DCD98h */ case   10:  		/* stw R11, <#[R30 + 76]> */
		/* 821DCD98h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000004C) );
		/* 821DCD98h case   10:*/		return 0x821DCD9C;
		  /* 821DCD9Ch */ case   11:  		/* bl -569380 */
		/* 821DCD9Ch case   11:*/		regs.LR = 0x821DCDA0; return 0x82151D78;
		/* 821DCD9Ch case   11:*/		return 0x821DCDA0;
		  /* 821DCDA0h */ case   12:  		/* mr R4, R30 */
		/* 821DCDA0h case   12:*/		regs.R4 = regs.R30;
		/* 821DCDA0h case   12:*/		return 0x821DCDA4;
		  /* 821DCDA4h */ case   13:  		/* mr R3, R31 */
		/* 821DCDA4h case   13:*/		regs.R3 = regs.R31;
		/* 821DCDA4h case   13:*/		return 0x821DCDA8;
		  /* 821DCDA8h */ case   14:  		/* bl -768 */
		/* 821DCDA8h case   14:*/		regs.LR = 0x821DCDAC; return 0x821DCAA8;
		/* 821DCDA8h case   14:*/		return 0x821DCDAC;
		  /* 821DCDACh */ case   15:  		/* addi R1, R1, 112 */
		/* 821DCDACh case   15:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821DCDACh case   15:*/		return 0x821DCDB0;
		  /* 821DCDB0h */ case   16:  		/* lwz R12, <#[R1 - 8]> */
		/* 821DCDB0h case   16:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821DCDB0h case   16:*/		return 0x821DCDB4;
		  /* 821DCDB4h */ case   17:  		/* mtspr LR, R12 */
		/* 821DCDB4h case   17:*/		regs.LR = regs.R12;
		/* 821DCDB4h case   17:*/		return 0x821DCDB8;
		  /* 821DCDB8h */ case   18:  		/* ld R30, <#[R1 - 24]> */
		/* 821DCDB8h case   18:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821DCDB8h case   18:*/		return 0x821DCDBC;
		  /* 821DCDBCh */ case   19:  		/* ld R31, <#[R1 - 16]> */
		/* 821DCDBCh case   19:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821DCDBCh case   19:*/		return 0x821DCDC0;
		  /* 821DCDC0h */ case   20:  		/* bclr 20, CR0_LT */
		/* 821DCDC0h case   20:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821DCDC0h case   20:*/		return 0x821DCDC4;
	}
	return 0x821DCDC4;
} // Block from 821DCD70h-821DCDC4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821DCDC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCDC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCDC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCDC4);
		  /* 821DCDC4h */ case    0:  		/* nop */
		/* 821DCDC4h case    0:*/		cpu::op::nop();
		/* 821DCDC4h case    0:*/		return 0x821DCDC8;
	}
	return 0x821DCDC8;
} // Block from 821DCDC4h-821DCDC8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DCDC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCDC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCDC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCDC8);
		  /* 821DCDC8h */ case    0:  		/* mfspr R12, LR */
		/* 821DCDC8h case    0:*/		regs.R12 = regs.LR;
		/* 821DCDC8h case    0:*/		return 0x821DCDCC;
		  /* 821DCDCCh */ case    1:  		/* bl -1358764 */
		/* 821DCDCCh case    1:*/		regs.LR = 0x821DCDD0; return 0x82091220;
		/* 821DCDCCh case    1:*/		return 0x821DCDD0;
		  /* 821DCDD0h */ case    2:  		/* stwu R1, <#[R1 - 288]> */
		/* 821DCDD0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEE0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEE0);
		/* 821DCDD0h case    2:*/		return 0x821DCDD4;
		  /* 821DCDD4h */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 821DCDD4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821DCDD4h case    3:*/		return 0x821DCDD8;
		  /* 821DCDD8h */ case    4:  		/* mr R23, R3 */
		/* 821DCDD8h case    4:*/		regs.R23 = regs.R3;
		/* 821DCDD8h case    4:*/		return 0x821DCDDC;
		  /* 821DCDDCh */ case    5:  		/* lwz R10, <#[R4 + 4]> */
		/* 821DCDDCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000004) );
		/* 821DCDDCh case    5:*/		return 0x821DCDE0;
		  /* 821DCDE0h */ case    6:  		/* mr R21, R4 */
		/* 821DCDE0h case    6:*/		regs.R21 = regs.R4;
		/* 821DCDE0h case    6:*/		return 0x821DCDE4;
		  /* 821DCDE4h */ case    7:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821DCDE4h case    7:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821DCDE4h case    7:*/		return 0x821DCDE8;
		  /* 821DCDE8h */ case    8:  		/* addic R9, R9, -1 */
		/* 821DCDE8h case    8:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821DCDE8h case    8:*/		return 0x821DCDEC;
		  /* 821DCDECh */ case    9:  		/* subfe R9, R9, R9 */
		/* 821DCDECh case    9:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821DCDECh case    9:*/		return 0x821DCDF0;
		  /* 821DCDF0h */ case   10:  		/* and R11, R9, R11 */
		/* 821DCDF0h case   10:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821DCDF0h case   10:*/		return 0x821DCDF4;
		  /* 821DCDF4h */ case   11:  		/* cmplw CR6, R10, R11 */
		/* 821DCDF4h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821DCDF4h case   11:*/		return 0x821DCDF8;
		  /* 821DCDF8h */ case   12:  		/* bc 4, CR6_EQ, 12 */
		/* 821DCDF8h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821DCE04;  }
		/* 821DCDF8h case   12:*/		return 0x821DCDFC;
		  /* 821DCDFCh */ case   13:  		/* li R3, 0 */
		/* 821DCDFCh case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821DCDFCh case   13:*/		return 0x821DCE00;
		  /* 821DCE00h */ case   14:  		/* b 3956 */
		/* 821DCE00h case   14:*/		return 0x821DDD74;
		/* 821DCE00h case   14:*/		return 0x821DCE04;
	}
	return 0x821DCE04;
} // Block from 821DCDC8h-821DCE04h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821DCE04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCE04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCE04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCE04);
		  /* 821DCE04h */ case    0:  		/* li R5, 6 */
		/* 821DCE04h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 821DCE04h case    0:*/		return 0x821DCE08;
		  /* 821DCE08h */ case    1:  		/* li R4, 8 */
		/* 821DCE08h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821DCE08h case    1:*/		return 0x821DCE0C;
		  /* 821DCE0Ch */ case    2:  		/* mr R3, R23 */
		/* 821DCE0Ch case    2:*/		regs.R3 = regs.R23;
		/* 821DCE0Ch case    2:*/		return 0x821DCE10;
		  /* 821DCE10h */ case    3:  		/* bl -492832 */
		/* 821DCE10h case    3:*/		regs.LR = 0x821DCE14; return 0x821648F0;
		/* 821DCE10h case    3:*/		return 0x821DCE14;
		  /* 821DCE14h */ case    4:  		/* addi R16, R3, 4 */
		/* 821DCE14h case    4:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R3,0x4);
		/* 821DCE14h case    4:*/		return 0x821DCE18;
		  /* 821DCE18h */ case    5:  		/* ori R11, R3, 1 */
		/* 821DCE18h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821DCE18h case    5:*/		return 0x821DCE1C;
		  /* 821DCE1Ch */ case    6:  		/* stw R3, <#[R1 + 84]> */
		/* 821DCE1Ch case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000054) );
		/* 821DCE1Ch case    6:*/		return 0x821DCE20;
		  /* 821DCE20h */ case    7:  		/* ori R10, R16, 1 */
		/* 821DCE20h case    7:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R16,0x1);
		/* 821DCE20h case    7:*/		return 0x821DCE24;
		  /* 821DCE24h */ case    8:  		/* stw R11, <#[R3 + 4]> */
		/* 821DCE24h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821DCE24h case    8:*/		return 0x821DCE28;
		  /* 821DCE28h */ case    9:  		/* stw R10, <#[R3]> */
		/* 821DCE28h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821DCE28h case    9:*/		return 0x821DCE2C;
		  /* 821DCE2Ch */ case   10:  		/* lwz R11, <#[R23 + 44]> */
		/* 821DCE2Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000002C) );
		/* 821DCE2Ch case   10:*/		return 0x821DCE30;
		  /* 821DCE30h */ case   11:  		/* oris R11, R11, 2 */
		/* 821DCE30h case   11:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821DCE30h case   11:*/		return 0x821DCE34;
		  /* 821DCE34h */ case   12:  		/* stw R11, <#[R23 + 44]> */
		/* 821DCE34h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x0000002C) );
		/* 821DCE34h case   12:*/		return 0x821DCE38;
		  /* 821DCE38h */ case   13:  		/* lwz R17, <#[R21 + 4]> */
		/* 821DCE38h case   13:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R21 + 0x00000004) );
		/* 821DCE38h case   13:*/		return 0x821DCE3C;
		  /* 821DCE3Ch */ case   14:  		/* lwz R11, <#[R17 + 48]> */
		/* 821DCE3Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000030) );
		/* 821DCE3Ch case   14:*/		return 0x821DCE40;
		  /* 821DCE40h */ case   15:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 821DCE40h case   15:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 821DCE40h case   15:*/		return 0x821DCE44;
		  /* 821DCE44h */ case   16:  		/* bc 12, CR0_EQ, 52 */
		/* 821DCE44h case   16:*/		if ( regs.CR[0].eq ) { return 0x821DCE78;  }
		/* 821DCE44h case   16:*/		return 0x821DCE48;
		  /* 821DCE48h */ case   17:  		/* lwz R11, <#[R17 + 80]> */
		/* 821DCE48h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000050) );
		/* 821DCE48h case   17:*/		return 0x821DCE4C;
		  /* 821DCE4Ch */ case   18:  		/* b 20 */
		/* 821DCE4Ch case   18:*/		return 0x821DCE60;
		/* 821DCE4Ch case   18:*/		return 0x821DCE50;
		  /* 821DCE50h */ case   19:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DCE50h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DCE50h case   19:*/		return 0x821DCE54;
		  /* 821DCE54h */ case   20:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 821DCE54h case   20:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 821DCE54h case   20:*/		return 0x821DCE58;
		  /* 821DCE58h */ case   21:  		/* bc 12, CR0_EQ, 16 */
		/* 821DCE58h case   21:*/		if ( regs.CR[0].eq ) { return 0x821DCE68;  }
		/* 821DCE58h case   21:*/		return 0x821DCE5C;
		  /* 821DCE5Ch */ case   22:  		/* lwz R11, <#[R11 + 80]> */
		/* 821DCE5Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821DCE5Ch case   22:*/		return 0x821DCE60;
	}
	return 0x821DCE60;
} // Block from 821DCE04h-821DCE60h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821DCE60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCE60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCE60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCE60);
		  /* 821DCE60h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821DCE60h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DCE60h case    0:*/		return 0x821DCE64;
		  /* 821DCE64h */ case    1:  		/* bc 4, CR6_EQ, -20 */
		/* 821DCE64h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DCE50;  }
		/* 821DCE64h case    1:*/		return 0x821DCE68;
	}
	return 0x821DCE68;
} // Block from 821DCE60h-821DCE68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DCE68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCE68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCE68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCE68);
		  /* 821DCE68h */ case    0:  		/* stw R11, <#[R21 + 4]> */
		/* 821DCE68h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 821DCE68h case    0:*/		return 0x821DCE6C;
		  /* 821DCE6Ch */ case    1:  		/* mr R17, R11 */
		/* 821DCE6Ch case    1:*/		regs.R17 = regs.R11;
		/* 821DCE6Ch case    1:*/		return 0x821DCE70;
		  /* 821DCE70h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821DCE70h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DCE70h case    2:*/		return 0x821DCE74;
		  /* 821DCE74h */ case    3:  		/* bc 12, CR6_EQ, 3740 */
		/* 821DCE74h case    3:*/		if ( regs.CR[6].eq ) { return 0x821DDD10;  }
		/* 821DCE74h case    3:*/		return 0x821DCE78;
	}
	return 0x821DCE78;
} // Block from 821DCE68h-821DCE78h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DCE78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCE78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCE78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCE78);
		  /* 821DCE78h */ case    0:  		/* lwz R11, <#[R21 + 60]> */
		/* 821DCE78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000003C) );
		/* 821DCE78h case    0:*/		return 0x821DCE7C;
		  /* 821DCE7Ch */ case    1:  		/* li R20, 0 */
		/* 821DCE7Ch case    1:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 821DCE7Ch case    1:*/		return 0x821DCE80;
		  /* 821DCE80h */ case    2:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 821DCE80h case    2:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 821DCE80h case    2:*/		return 0x821DCE84;
		  /* 821DCE84h */ case    3:  		/* bc 12, CR0_EQ, 32 */
		/* 821DCE84h case    3:*/		if ( regs.CR[0].eq ) { return 0x821DCEA4;  }
		/* 821DCE84h case    3:*/		return 0x821DCE88;
		  /* 821DCE88h */ case    4:  		/* lwz R11, <#[R21 + 24]> */
		/* 821DCE88h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000018) );
		/* 821DCE88h case    4:*/		return 0x821DCE8C;
		  /* 821DCE8Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DCE8Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DCE8Ch case    5:*/		return 0x821DCE90;
		  /* 821DCE90h */ case    6:  		/* bc 4, CR6_EQ, 20 */
		/* 821DCE90h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DCEA4;  }
		/* 821DCE90h case    6:*/		return 0x821DCE94;
		  /* 821DCE94h */ case    7:  		/* lwz R11, <#[R23 + 52]> */
		/* 821DCE94h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000034) );
		/* 821DCE94h case    7:*/		return 0x821DCE98;
		  /* 821DCE98h */ case    8:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 821DCE98h case    8:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 821DCE98h case    8:*/		return 0x821DCE9C;
		  /* 821DCE9Ch */ case    9:  		/* li R11, 1 */
		/* 821DCE9Ch case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821DCE9Ch case    9:*/		return 0x821DCEA0;
		  /* 821DCEA0h */ case   10:  		/* bc 12, CR0_EQ, 8 */
		/* 821DCEA0h case   10:*/		if ( regs.CR[0].eq ) { return 0x821DCEA8;  }
		/* 821DCEA0h case   10:*/		return 0x821DCEA4;
	}
	return 0x821DCEA4;
} // Block from 821DCE78h-821DCEA4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821DCEA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCEA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCEA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCEA4);
		  /* 821DCEA4h */ case    0:  		/* li R11, 0 */
		/* 821DCEA4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DCEA4h case    0:*/		return 0x821DCEA8;
	}
	return 0x821DCEA8;
} // Block from 821DCEA4h-821DCEA8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DCEA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCEA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCEA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCEA8);
		  /* 821DCEA8h */ case    0:  		/* lwz R10, <#[R23 + 616]> */
		/* 821DCEA8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000268) );
		/* 821DCEA8h case    0:*/		return 0x821DCEAC;
		  /* 821DCEACh */ case    1:  		/* rlwinm R19, R11, 0, 24, 31 */
		/* 821DCEACh case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R19,regs.R11);
		/* 821DCEACh case    1:*/		return 0x821DCEB0;
		  /* 821DCEB0h */ case    2:  		/* lwz R9, <#[R21 + 36]> */
		/* 821DCEB0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R21 + 0x00000024) );
		/* 821DCEB0h case    2:*/		return 0x821DCEB4;
		  /* 821DCEB4h */ case    3:  		/* li R15, 68 */
		/* 821DCEB4h case    3:*/		cpu::op::li<0>(regs,&regs.R15,0x44);
		/* 821DCEB4h case    3:*/		return 0x821DCEB8;
		  /* 821DCEB8h */ case    4:  		/* subf R11, R10, R21 */
		/* 821DCEB8h case    4:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R21);
		/* 821DCEB8h case    4:*/		return 0x821DCEBC;
		  /* 821DCEBCh */ case    5:  		/* rlwinm R10, R9, 0, 7, 21 */
		/* 821DCEBCh case    5:*/		cpu::op::rlwinm<0,0,7,21>(regs,&regs.R10,regs.R9);
		/* 821DCEBCh case    5:*/		return 0x821DCEC0;
		  /* 821DCEC0h */ case    6:  		/* li R14, 1 */
		/* 821DCEC0h case    6:*/		cpu::op::li<0>(regs,&regs.R14,0x1);
		/* 821DCEC0h case    6:*/		return 0x821DCEC4;
		  /* 821DCEC4h */ case    7:  		/* divw R18, R11, R15 */
		/* 821DCEC4h case    7:*/		cpu::op::divw<0>(regs,&regs.R18,regs.R11,regs.R15);
		/* 821DCEC4h case    7:*/		return 0x821DCEC8;
		  /* 821DCEC8h */ case    8:  		/* cmplwi CR6, R10, 1024 */
		/* 821DCEC8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000400);
		/* 821DCEC8h case    8:*/		return 0x821DCECC;
		  /* 821DCECCh */ case    9:  		/* bc 4, CR6_GT, 3260 */
		/* 821DCECCh case    9:*/		if ( !regs.CR[6].gt ) { return 0x821DDB88;  }
		/* 821DCECCh case    9:*/		return 0x821DCED0;
		  /* 821DCED0h */ case   10:  		/* lwz R28, <#[R21 + 8]> */
		/* 821DCED0h case   10:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R21 + 0x00000008) );
		/* 821DCED0h case   10:*/		return 0x821DCED4;
		  /* 821DCED4h */ case   11:  		/* lwz R11, <#[R28 + 48]> */
		/* 821DCED4h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000030) );
		/* 821DCED4h case   11:*/		return 0x821DCED8;
		  /* 821DCED8h */ case   12:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 821DCED8h case   12:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 821DCED8h case   12:*/		return 0x821DCEDC;
		  /* 821DCEDCh */ case   13:  		/* bc 12, CR0_EQ, 44 */
		/* 821DCEDCh case   13:*/		if ( regs.CR[0].eq ) { return 0x821DCF08;  }
		/* 821DCEDCh case   13:*/		return 0x821DCEE0;
		  /* 821DCEE0h */ case   14:  		/* lwz R11, <#[R28 + 80]> */
		/* 821DCEE0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000050) );
		/* 821DCEE0h case   14:*/		return 0x821DCEE4;
		  /* 821DCEE4h */ case   15:  		/* b 20 */
		/* 821DCEE4h case   15:*/		return 0x821DCEF8;
		/* 821DCEE4h case   15:*/		return 0x821DCEE8;
		  /* 821DCEE8h */ case   16:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DCEE8h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DCEE8h case   16:*/		return 0x821DCEEC;
		  /* 821DCEECh */ case   17:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 821DCEECh case   17:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 821DCEECh case   17:*/		return 0x821DCEF0;
		  /* 821DCEF0h */ case   18:  		/* bc 12, CR0_EQ, 16 */
		/* 821DCEF0h case   18:*/		if ( regs.CR[0].eq ) { return 0x821DCF00;  }
		/* 821DCEF0h case   18:*/		return 0x821DCEF4;
		  /* 821DCEF4h */ case   19:  		/* lwz R11, <#[R11 + 80]> */
		/* 821DCEF4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821DCEF4h case   19:*/		return 0x821DCEF8;
	}
	return 0x821DCEF8;
} // Block from 821DCEA8h-821DCEF8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821DCEF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCEF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCEF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCEF8);
		  /* 821DCEF8h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821DCEF8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DCEF8h case    0:*/		return 0x821DCEFC;
		  /* 821DCEFCh */ case    1:  		/* bc 4, CR6_EQ, -20 */
		/* 821DCEFCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DCEE8;  }
		/* 821DCEFCh case    1:*/		return 0x821DCF00;
	}
	return 0x821DCF00;
} // Block from 821DCEF8h-821DCF00h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DCF00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCF00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCF00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCF00);
		  /* 821DCF00h */ case    0:  		/* stw R11, <#[R21 + 8]> */
		/* 821DCF00h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821DCF00h case    0:*/		return 0x821DCF04;
		  /* 821DCF04h */ case    1:  		/* mr R28, R11 */
		/* 821DCF04h case    1:*/		regs.R28 = regs.R11;
		/* 821DCF04h case    1:*/		return 0x821DCF08;
	}
	return 0x821DCF08;
} // Block from 821DCF00h-821DCF08h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DCF08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCF08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCF08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCF08);
		  /* 821DCF08h */ case    0:  		/* cmplw CR6, R28, R17 */
		/* 821DCF08h case    0:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R17);
		/* 821DCF08h case    0:*/		return 0x821DCF0C;
		  /* 821DCF0Ch */ case    1:  		/* bc 4, CR6_EQ, 56 */
		/* 821DCF0Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DCF44;  }
		/* 821DCF0Ch case    1:*/		return 0x821DCF10;
		  /* 821DCF10h */ case    2:  		/* lwz R11, <#[R17 + 8]> */
		/* 821DCF10h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000008) );
		/* 821DCF10h case    2:*/		return 0x821DCF14;
		  /* 821DCF14h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821DCF14h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DCF14h case    3:*/		return 0x821DCF18;
		  /* 821DCF18h */ case    4:  		/* bc 12, CR6_EQ, 32 */
		/* 821DCF18h case    4:*/		if ( regs.CR[6].eq ) { return 0x821DCF38;  }
		/* 821DCF18h case    4:*/		return 0x821DCF1C;
		  /* 821DCF1Ch */ case    5:  		/* lwz R10, <#[R11 + 4]> */
		/* 821DCF1Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DCF1Ch case    5:*/		return 0x821DCF20;
		  /* 821DCF20h */ case    6:  		/* cmplw CR6, R28, R10 */
		/* 821DCF20h case    6:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R10);
		/* 821DCF20h case    6:*/		return 0x821DCF24;
		  /* 821DCF24h */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 821DCF24h case    7:*/		if ( regs.CR[6].eq ) { return 0x821DCF30;  }
		/* 821DCF24h case    7:*/		return 0x821DCF28;
		  /* 821DCF28h */ case    8:  		/* lwz R11, <#[R11 + 12]> */
		/* 821DCF28h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DCF28h case    8:*/		return 0x821DCF2C;
		  /* 821DCF2Ch */ case    9:  		/* b -24 */
		/* 821DCF2Ch case    9:*/		return 0x821DCF14;
		/* 821DCF2Ch case    9:*/		return 0x821DCF30;
	}
	return 0x821DCF30;
} // Block from 821DCF08h-821DCF30h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DCF30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCF30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCF30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCF30);
		  /* 821DCF30h */ case    0:  		/* li R11, 1 */
		/* 821DCF30h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821DCF30h case    0:*/		return 0x821DCF34;
		  /* 821DCF34h */ case    1:  		/* b 8 */
		/* 821DCF34h case    1:*/		return 0x821DCF3C;
		/* 821DCF34h case    1:*/		return 0x821DCF38;
	}
	return 0x821DCF38;
} // Block from 821DCF30h-821DCF38h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DCF38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCF38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCF38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCF38);
		  /* 821DCF38h */ case    0:  		/* li R11, 0 */
		/* 821DCF38h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DCF38h case    0:*/		return 0x821DCF3C;
	}
	return 0x821DCF3C;
} // Block from 821DCF38h-821DCF3Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DCF3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCF3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCF3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCF3C);
		  /* 821DCF3Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DCF3Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DCF3Ch case    0:*/		return 0x821DCF40;
		  /* 821DCF40h */ case    1:  		/* bc 12, CR0_EQ, 3536 */
		/* 821DCF40h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DDD10;  }
		/* 821DCF40h case    1:*/		return 0x821DCF44;
	}
	return 0x821DCF44;
} // Block from 821DCF3Ch-821DCF44h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DCF44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DCF44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DCF44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DCF44);
		  /* 821DCF44h */ case    0:  		/* addi R10, R1, 104 */
		/* 821DCF44h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x68);
		/* 821DCF44h case    0:*/		return 0x821DCF48;
		  /* 821DCF48h */ case    1:  		/* lwz R11, <#[R23 + 108]> */
		/* 821DCF48h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000006C) );
		/* 821DCF48h case    1:*/		return 0x821DCF4C;
		  /* 821DCF4Ch */ case    2:  		/* addi R9, R1, 108 */
		/* 821DCF4Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x6C);
		/* 821DCF4Ch case    2:*/		return 0x821DCF50;
		  /* 821DCF50h */ case    3:  		/* lwz R31, <#[R23 + 4]> */
		/* 821DCF50h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R23 + 0x00000004) );
		/* 821DCF50h case    3:*/		return 0x821DCF54;
		  /* 821DCF54h */ case    4:  		/* ori R30, R10, 1 */
		/* 821DCF54h case    4:*/		cpu::op::ori<0>(regs,&regs.R30,regs.R10,0x1);
		/* 821DCF54h case    4:*/		return 0x821DCF58;
		  /* 821DCF58h */ case    5:  		/* addi R22, R11, 1 */
		/* 821DCF58h case    5:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R11,0x1);
		/* 821DCF58h case    5:*/		return 0x821DCF5C;
		  /* 821DCF5Ch */ case    6:  		/* ori R10, R9, 1 */
		/* 821DCF5Ch case    6:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R9,0x1);
		/* 821DCF5Ch case    6:*/		return 0x821DCF60;
		  /* 821DCF60h */ case    7:  		/* stw R30, <#[R1 + 108]> */
		/* 821DCF60h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 821DCF60h case    7:*/		return 0x821DCF64;
		  /* 821DCF64h */ case    8:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821DCF64h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821DCF64h case    8:*/		return 0x821DCF68;
		  /* 821DCF68h */ case    9:  		/* stw R22, <#[R23 + 108]> */
		/* 821DCF68h case    9:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R23 + 0x0000006C) );
		/* 821DCF68h case    9:*/		return 0x821DCF6C;
		  /* 821DCF6Ch */ case   10:  		/* stw R10, <#[R1 + 104]> */
		/* 821DCF6Ch case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000068) );
		/* 821DCF6Ch case   10:*/		return 0x821DCF70;
		  /* 821DCF70h */ case   11:  		/* bc 4, CR0_EQ, 268 */
		/* 821DCF70h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821DD07C;  }
		/* 821DCF70h case   11:*/		return 0x821DCF74;
		  /* 821DCF74h */ case   12:  		/* cmplwi CR0, R31, 0 */
		/* 821DCF74h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821DCF74h case   12:*/		return 0x821DCF78;
		  /* 821DCF78h */ case   13:  		/* bc 12, CR0_EQ, 260 */
		/* 821DCF78h case   13:*/		if ( regs.CR[0].eq ) { return 0x821DD07C;  }
		/* 821DCF78h case   13:*/		return 0x821DCF7C;
		  /* 821DCF7Ch */ case   14:  		/* lwz R29, <#[R1 + 84]> */
		/* 821DCF7Ch case   14:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000054) );
		/* 821DCF7Ch case   14:*/		return 0x821DCF80;
		  /* 821DCF80h */ case   15:  		/* lwz R11, <#[R23 + 616]> */
		/* 821DCF80h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000268) );
		/* 821DCF80h case   15:*/		return 0x821DCF84;
		  /* 821DCF84h */ case   16:  		/* subf R11, R11, R21 */
		/* 821DCF84h case   16:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R21);
		/* 821DCF84h case   16:*/		return 0x821DCF88;
		  /* 821DCF88h */ case   17:  		/* divw R10, R11, R15 */
		/* 821DCF88h case   17:*/		cpu::op::divw<0>(regs,&regs.R10,regs.R11,regs.R15);
		/* 821DCF88h case   17:*/		return 0x821DCF8C;
		  /* 821DCF8Ch */ case   18:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 821DCF8Ch case   18:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 821DCF8Ch case   18:*/		return 0x821DCF90;
		  /* 821DCF90h */ case   19:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821DCF90h case   19:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821DCF90h case   19:*/		return 0x821DCF94;
		  /* 821DCF94h */ case   20:  		/* addi R11, R11, 21 */
		/* 821DCF94h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821DCF94h case   20:*/		return 0x821DCF98;
		  /* 821DCF98h */ case   21:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821DCF98h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821DCF98h case   21:*/		return 0x821DCF9C;
		  /* 821DCF9Ch */ case   22:  		/* lwzx R11, <#[R11 + R31]> */
		/* 821DCF9Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821DCF9Ch case   22:*/		return 0x821DCFA0;
		  /* 821DCFA0h */ case   23:  		/* srw R11, R11, R10 */
		/* 821DCFA0h case   23:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821DCFA0h case   23:*/		return 0x821DCFA4;
		  /* 821DCFA4h */ case   24:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DCFA4h case   24:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DCFA4h case   24:*/		return 0x821DCFA8;
		  /* 821DCFA8h */ case   25:  		/* bc 12, CR0_EQ, 188 */
		/* 821DCFA8h case   25:*/		if ( regs.CR[0].eq ) { return 0x821DD064;  }
		/* 821DCFA8h case   25:*/		return 0x821DCFAC;
		  /* 821DCFACh */ case   26:  		/* mr R3, R23 */
		/* 821DCFACh case   26:*/		regs.R3 = regs.R23;
		/* 821DCFACh case   26:*/		return 0x821DCFB0;
		  /* 821DCFB0h */ case   27:  		/* bl -458872 */
		/* 821DCFB0h case   27:*/		regs.LR = 0x821DCFB4; return 0x8216CF38;
		/* 821DCFB0h case   27:*/		return 0x821DCFB4;
		  /* 821DCFB4h */ case   28:  		/* stw R31, <#[R3 + 80]> */
		/* 821DCFB4h case   28:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x00000050) );
		/* 821DCFB4h case   28:*/		return 0x821DCFB8;
		  /* 821DCFB8h */ case   29:  		/* stw R3, <#[R31 + 80]> */
		/* 821DCFB8h case   29:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000050) );
		/* 821DCFB8h case   29:*/		return 0x821DCFBC;
		  /* 821DCFBCh */ case   30:  		/* li R7, 1 */
		/* 821DCFBCh case   30:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821DCFBCh case   30:*/		return 0x821DCFC0;
		  /* 821DCFC0h */ case   31:  		/* rlwinm R8, R18, 0, 27, 31 */
		/* 821DCFC0h case   31:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R18);
		/* 821DCFC0h case   31:*/		return 0x821DCFC4;
		  /* 821DCFC4h */ case   32:  		/* rlwinm R11, R3, 0, 0, 30 */
		/* 821DCFC4h case   32:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R3);
		/* 821DCFC4h case   32:*/		return 0x821DCFC8;
		  /* 821DCFC8h */ case   33:  		/* slw R8, R7, R8 */
		/* 821DCFC8h case   33:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 821DCFC8h case   33:*/		return 0x821DCFCC;
		  /* 821DCFCCh */ case   34:  		/* rlwinm R10, R18, 27, 5, 31 */
		/* 821DCFCCh case   34:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R18);
		/* 821DCFCCh case   34:*/		return 0x821DCFD0;
		  /* 821DCFD0h */ case   35:  		/* lwz R7, <#[R1 + 104]> */
		/* 821DCFD0h case   35:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000068) );
		/* 821DCFD0h case   35:*/		return 0x821DCFD4;
		  /* 821DCFD4h */ case   36:  		/* addi R9, R11, 4 */
		/* 821DCFD4h case   36:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821DCFD4h case   36:*/		return 0x821DCFD8;
		  /* 821DCFD8h */ case   37:  		/* addi R10, R10, 21 */
		/* 821DCFD8h case   37:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x15);
		/* 821DCFD8h case   37:*/		return 0x821DCFDC;
		  /* 821DCFDCh */ case   38:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821DCFDCh case   38:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821DCFDCh case   38:*/		return 0x821DCFE0;
		  /* 821DCFE0h */ case   39:  		/* stw R7, <#[R11]> */
		/* 821DCFE0h case   39:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821DCFE0h case   39:*/		return 0x821DCFE4;
		  /* 821DCFE4h */ case   40:  		/* lwz R7, <#[R1 + 104]> */
		/* 821DCFE4h case   40:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000068) );
		/* 821DCFE4h case   40:*/		return 0x821DCFE8;
		  /* 821DCFE8h */ case   41:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821DCFE8h case   41:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821DCFE8h case   41:*/		return 0x821DCFEC;
		  /* 821DCFECh */ case   42:  		/* stw R11, <#[R7]> */
		/* 821DCFECh case   42:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 821DCFECh case   42:*/		return 0x821DCFF0;
		  /* 821DCFF0h */ case   43:  		/* stw R30, <#[R11 + 4]> */
		/* 821DCFF0h case   43:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 821DCFF0h case   43:*/		return 0x821DCFF4;
		  /* 821DCFF4h */ case   44:  		/* stw R9, <#[R1 + 104]> */
		/* 821DCFF4h case   44:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000068) );
		/* 821DCFF4h case   44:*/		return 0x821DCFF8;
		  /* 821DCFF8h */ case   45:  		/* lwz R11, <#[R31 + 84]> */
		/* 821DCFF8h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 821DCFF8h case   45:*/		return 0x821DCFFC;
		  /* 821DCFFCh */ case   46:  		/* stw R11, <#[R3 + 84]> */
		/* 821DCFFCh case   46:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000054) );
		/* 821DCFFCh case   46:*/		return 0x821DD000;
		  /* 821DD000h */ case   47:  		/* lwzx R11, <#[R10 + R31]> */
		/* 821DD000h case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R31 + 0x00000000) );
		/* 821DD000h case   47:*/		return 0x821DD004;
		  /* 821DD004h */ case   48:  		/* andc R11, R11, R8 */
		/* 821DD004h case   48:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821DD004h case   48:*/		return 0x821DD008;
		  /* 821DD008h */ case   49:  		/* stwx R11, <#[R10 + R31]> */
		/* 821DD008h case   49:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + regs.R31 + 0x00000000) );
		/* 821DD008h case   49:*/		return 0x821DD00C;
		  /* 821DD00Ch */ case   50:  		/* stw R22, <#[R31 + 44]> */
		/* 821DD00Ch case   50:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R31 + 0x0000002C) );
		/* 821DD00Ch case   50:*/		return 0x821DD010;
		  /* 821DD010h */ case   51:  		/* lwz R11, <#[R16]> */
		/* 821DD010h case   51:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 821DD010h case   51:*/		return 0x821DD014;
		  /* 821DD014h */ case   52:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DD014h case   52:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DD014h case   52:*/		return 0x821DD018;
		  /* 821DD018h */ case   53:  		/* bc 4, CR0_EQ, 40 */
		/* 821DD018h case   53:*/		if ( !regs.CR[0].eq ) { return 0x821DD040;  }
		/* 821DD018h case   53:*/		return 0x821DD01C;
		  /* 821DD01Ch */ case   54:  		/* lwz R11, <#[R29]> */
		/* 821DD01Ch case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821DD01Ch case   54:*/		return 0x821DD020;
		  /* 821DD020h */ case   55:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DD020h case   55:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DD020h case   55:*/		return 0x821DD024;
		  /* 821DD024h */ case   56:  		/* addic. R3, R11, -4 */
		/* 821DD024h case   56:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821DD024h case   56:*/		return 0x821DD028;
		  /* 821DD028h */ case   57:  		/* bc 12, CR0_EQ, 24 */
		/* 821DD028h case   57:*/		if ( regs.CR[0].eq ) { return 0x821DD040;  }
		/* 821DD028h case   57:*/		return 0x821DD02C;
		  /* 821DD02Ch */ case   58:  		/* lwz R11, <#[R3 + 8]> */
		/* 821DD02Ch case   58:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821DD02Ch case   58:*/		return 0x821DD030;
		  /* 821DD030h */ case   59:  		/* lwz R10, <#[R3 + 12]> */
		/* 821DD030h case   59:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821DD030h case   59:*/		return 0x821DD034;
		  /* 821DD034h */ case   60:  		/* addi R11, R11, 1 */
		/* 821DD034h case   60:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821DD034h case   60:*/		return 0x821DD038;
		  /* 821DD038h */ case   61:  		/* cmplw CR6, R11, R10 */
		/* 821DD038h case   61:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821DD038h case   61:*/		return 0x821DD03C;
		  /* 821DD03Ch */ case   62:  		/* bc 4, CR6_GT, 16 */
		/* 821DD03Ch case   62:*/		if ( !regs.CR[6].gt ) { return 0x821DD04C;  }
		/* 821DD03Ch case   62:*/		return 0x821DD040;
	}
	return 0x821DD040;
} // Block from 821DCF44h-821DD040h (63 instructions)

//////////////////////////////////////////////////////
// Block at 821DD040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD040);
		  /* 821DD040h */ case    0:  		/* li R4, 1 */
		/* 821DD040h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821DD040h case    0:*/		return 0x821DD044;
		  /* 821DD044h */ case    1:  		/* mr R3, R29 */
		/* 821DD044h case    1:*/		regs.R3 = regs.R29;
		/* 821DD044h case    1:*/		return 0x821DD048;
		  /* 821DD048h */ case    2:  		/* bl -327552 */
		/* 821DD048h case    2:*/		regs.LR = 0x821DD04C; return 0x8218D0C8;
		/* 821DD048h case    2:*/		return 0x821DD04C;
	}
	return 0x821DD04C;
} // Block from 821DD040h-821DD04Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DD04Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD04C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD04C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD04C);
		  /* 821DD04Ch */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821DD04Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821DD04Ch case    0:*/		return 0x821DD050;
		  /* 821DD050h */ case    1:  		/* addi R10, R11, 4 */
		/* 821DD050h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821DD050h case    1:*/		return 0x821DD054;
		  /* 821DD054h */ case    2:  		/* addi R9, R11, 1 */
		/* 821DD054h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821DD054h case    2:*/		return 0x821DD058;
		  /* 821DD058h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821DD058h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821DD058h case    3:*/		return 0x821DD05C;
		  /* 821DD05Ch */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821DD05Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821DD05Ch case    4:*/		return 0x821DD060;
		  /* 821DD060h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821DD060h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821DD060h case    5:*/		return 0x821DD064;
	}
	return 0x821DD064;
} // Block from 821DD04Ch-821DD064h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DD064h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD064( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD064) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD064);
		  /* 821DD064h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821DD064h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821DD064h case    0:*/		return 0x821DD068;
		  /* 821DD068h */ case    1:  		/* lwz R31, <#[R11 + 4]> */
		/* 821DD068h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821DD068h case    1:*/		return 0x821DD06C;
		  /* 821DD06Ch */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821DD06Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821DD06Ch case    2:*/		return 0x821DD070;
		  /* 821DD070h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821DD070h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DD07C;  }
		/* 821DD070h case    3:*/		return 0x821DD074;
		  /* 821DD074h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821DD074h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DD074h case    4:*/		return 0x821DD078;
		  /* 821DD078h */ case    5:  		/* bc 4, CR6_EQ, -248 */
		/* 821DD078h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821DCF80;  }
		/* 821DD078h case    5:*/		return 0x821DD07C;
	}
	return 0x821DD07C;
} // Block from 821DD064h-821DD07Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DD07Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD07C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD07C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD07C);
		  /* 821DD07Ch */ case    0:  		/* li R6, 0 */
		/* 821DD07Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821DD07Ch case    0:*/		return 0x821DD080;
		  /* 821DD080h */ case    1:  		/* mr R5, R22 */
		/* 821DD080h case    1:*/		regs.R5 = regs.R22;
		/* 821DD080h case    1:*/		return 0x821DD084;
		  /* 821DD084h */ case    2:  		/* addi R4, R1, 104 */
		/* 821DD084h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x68);
		/* 821DD084h case    2:*/		return 0x821DD088;
		  /* 821DD088h */ case    3:  		/* mr R3, R23 */
		/* 821DD088h case    3:*/		regs.R3 = regs.R23;
		/* 821DD088h case    3:*/		return 0x821DD08C;
		  /* 821DD08Ch */ case    4:  		/* bl -82004 */
		/* 821DD08Ch case    4:*/		regs.LR = 0x821DD090; return 0x821C9038;
		/* 821DD08Ch case    4:*/		return 0x821DD090;
		  /* 821DD090h */ case    5:  		/* add R20, R3, R20 */
		/* 821DD090h case    5:*/		cpu::op::add<0>(regs,&regs.R20,regs.R3,regs.R20);
		/* 821DD090h case    5:*/		return 0x821DD094;
		  /* 821DD094h */ case    6:  		/* addi R4, R1, 104 */
		/* 821DD094h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x68);
		/* 821DD094h case    6:*/		return 0x821DD098;
		  /* 821DD098h */ case    7:  		/* mr R3, R23 */
		/* 821DD098h case    7:*/		regs.R3 = regs.R23;
		/* 821DD098h case    7:*/		return 0x821DD09C;
		  /* 821DD09Ch */ case    8:  		/* bl 69068 */
		/* 821DD09Ch case    8:*/		regs.LR = 0x821DD0A0; return 0x821EDE68;
		/* 821DD09Ch case    8:*/		return 0x821DD0A0;
		  /* 821DD0A0h */ case    9:  		/* mr R5, R23 */
		/* 821DD0A0h case    9:*/		regs.R5 = regs.R23;
		/* 821DD0A0h case    9:*/		return 0x821DD0A4;
		  /* 821DD0A4h */ case   10:  		/* mr R4, R17 */
		/* 821DD0A4h case   10:*/		regs.R4 = regs.R17;
		/* 821DD0A4h case   10:*/		return 0x821DD0A8;
		  /* 821DD0A8h */ case   11:  		/* mr R3, R28 */
		/* 821DD0A8h case   11:*/		regs.R3 = regs.R28;
		/* 821DD0A8h case   11:*/		return 0x821DD0AC;
		  /* 821DD0ACh */ case   12:  		/* lwz R27, <#[R17 + 80]> */
		/* 821DD0ACh case   12:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R17 + 0x00000050) );
		/* 821DD0ACh case   12:*/		return 0x821DD0B0;
		  /* 821DD0B0h */ case   13:  		/* bl 338104 */
		/* 821DD0B0h case   13:*/		regs.LR = 0x821DD0B4; return 0x8222F968;
		/* 821DD0B0h case   13:*/		return 0x821DD0B4;
		  /* 821DD0B4h */ case   14:  		/* mr R5, R23 */
		/* 821DD0B4h case   14:*/		regs.R5 = regs.R23;
		/* 821DD0B4h case   14:*/		return 0x821DD0B8;
		  /* 821DD0B8h */ case   15:  		/* mr R4, R27 */
		/* 821DD0B8h case   15:*/		regs.R4 = regs.R27;
		/* 821DD0B8h case   15:*/		return 0x821DD0BC;
		  /* 821DD0BCh */ case   16:  		/* mr R3, R28 */
		/* 821DD0BCh case   16:*/		regs.R3 = regs.R28;
		/* 821DD0BCh case   16:*/		return 0x821DD0C0;
		  /* 821DD0C0h */ case   17:  		/* bl 338464 */
		/* 821DD0C0h case   17:*/		regs.LR = 0x821DD0C4; return 0x8222FAE0;
		/* 821DD0C0h case   17:*/		return 0x821DD0C4;
		  /* 821DD0C4h */ case   18:  		/* lwz R11, <#[R28 + 36]> */
		/* 821DD0C4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000024) );
		/* 821DD0C4h case   18:*/		return 0x821DD0C8;
		  /* 821DD0C8h */ case   19:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DD0C8h case   19:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DD0C8h case   19:*/		return 0x821DD0CC;
		  /* 821DD0CCh */ case   20:  		/* bc 4, CR0_EQ, 164 */
		/* 821DD0CCh case   20:*/		if ( !regs.CR[0].eq ) { return 0x821DD170;  }
		/* 821DD0CCh case   20:*/		return 0x821DD0D0;
		  /* 821DD0D0h */ case   21:  		/* mr R31, R11 */
		/* 821DD0D0h case   21:*/		regs.R31 = regs.R11;
		/* 821DD0D0h case   21:*/		return 0x821DD0D4;
		  /* 821DD0D4h */ case   22:  		/* cmplwi CR0, R11, 0 */
		/* 821DD0D4h case   22:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DD0D4h case   22:*/		return 0x821DD0D8;
		  /* 821DD0D8h */ case   23:  		/* bc 12, CR0_EQ, 152 */
		/* 821DD0D8h case   23:*/		if ( regs.CR[0].eq ) { return 0x821DD170;  }
		/* 821DD0D8h case   23:*/		return 0x821DD0DC;
		  /* 821DD0DCh */ case   24:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DD0DCh case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DD0DCh case   24:*/		return 0x821DD0E0;
		  /* 821DD0E0h */ case   25:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821DD0E0h case   25:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821DD0E0h case   25:*/		return 0x821DD0E4;
		  /* 821DD0E4h */ case   26:  		/* cmplwi CR6, R11, 86 */
		/* 821DD0E4h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 821DD0E4h case   26:*/		return 0x821DD0E8;
		  /* 821DD0E8h */ case   27:  		/* bc 12, CR6_EQ, 48 */
		/* 821DD0E8h case   27:*/		if ( regs.CR[6].eq ) { return 0x821DD118;  }
		/* 821DD0E8h case   27:*/		return 0x821DD0EC;
		  /* 821DD0ECh */ case   28:  		/* cmplwi CR6, R11, 87 */
		/* 821DD0ECh case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 821DD0ECh case   28:*/		return 0x821DD0F0;
		  /* 821DD0F0h */ case   29:  		/* bc 12, CR6_EQ, 40 */
		/* 821DD0F0h case   29:*/		if ( regs.CR[6].eq ) { return 0x821DD118;  }
		/* 821DD0F0h case   29:*/		return 0x821DD0F4;
		  /* 821DD0F4h */ case   30:  		/* cmplwi CR6, R11, 89 */
		/* 821DD0F4h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 821DD0F4h case   30:*/		return 0x821DD0F8;
		  /* 821DD0F8h */ case   31:  		/* bc 12, CR6_EQ, 32 */
		/* 821DD0F8h case   31:*/		if ( regs.CR[6].eq ) { return 0x821DD118;  }
		/* 821DD0F8h case   31:*/		return 0x821DD0FC;
		  /* 821DD0FCh */ case   32:  		/* cmplwi CR6, R11, 90 */
		/* 821DD0FCh case   32:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 821DD0FCh case   32:*/		return 0x821DD100;
		  /* 821DD100h */ case   33:  		/* bc 12, CR6_EQ, 24 */
		/* 821DD100h case   33:*/		if ( regs.CR[6].eq ) { return 0x821DD118;  }
		/* 821DD100h case   33:*/		return 0x821DD104;
		  /* 821DD104h */ case   34:  		/* cmplwi CR6, R11, 84 */
		/* 821DD104h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 821DD104h case   34:*/		return 0x821DD108;
		  /* 821DD108h */ case   35:  		/* bc 12, CR6_EQ, 16 */
		/* 821DD108h case   35:*/		if ( regs.CR[6].eq ) { return 0x821DD118;  }
		/* 821DD108h case   35:*/		return 0x821DD10C;
		  /* 821DD10Ch */ case   36:  		/* cmplwi CR6, R11, 85 */
		/* 821DD10Ch case   36:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 821DD10Ch case   36:*/		return 0x821DD110;
		  /* 821DD110h */ case   37:  		/* li R11, 0 */
		/* 821DD110h case   37:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DD110h case   37:*/		return 0x821DD114;
		  /* 821DD114h */ case   38:  		/* bc 4, CR6_EQ, 8 */
		/* 821DD114h case   38:*/		if ( !regs.CR[6].eq ) { return 0x821DD11C;  }
		/* 821DD114h case   38:*/		return 0x821DD118;
	}
	return 0x821DD118;
} // Block from 821DD07Ch-821DD118h (39 instructions)

//////////////////////////////////////////////////////
// Block at 821DD118h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD118);
		  /* 821DD118h */ case    0:  		/* li R11, 1 */
		/* 821DD118h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821DD118h case    0:*/		return 0x821DD11C;
	}
	return 0x821DD11C;
} // Block from 821DD118h-821DD11Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DD11Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD11C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD11C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD11C);
		  /* 821DD11Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DD11Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DD11Ch case    0:*/		return 0x821DD120;
		  /* 821DD120h */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 821DD120h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DD154;  }
		/* 821DD120h case    1:*/		return 0x821DD124;
		  /* 821DD124h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DD124h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DD124h case    2:*/		return 0x821DD128;
		  /* 821DD128h */ case    3:  		/* mr R3, R23 */
		/* 821DD128h case    3:*/		regs.R3 = regs.R23;
		/* 821DD128h case    3:*/		return 0x821DD12C;
		  /* 821DD12Ch */ case    4:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821DD12Ch case    4:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821DD12Ch case    4:*/		return 0x821DD130;
		  /* 821DD130h */ case    5:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821DD130h case    5:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821DD130h case    5:*/		return 0x821DD134;
		  /* 821DD134h */ case    6:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821DD134h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821DD134h case    6:*/		return 0x821DD138;
		  /* 821DD138h */ case    7:  		/* bl -494856 */
		/* 821DD138h case    7:*/		regs.LR = 0x821DD13C; return 0x82164430;
		/* 821DD138h case    7:*/		return 0x821DD13C;
		  /* 821DD13Ch */ case    8:  		/* addi R11, R31, -16 */
		/* 821DD13Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF0);
		/* 821DD13Ch case    8:*/		return 0x821DD140;
		  /* 821DD140h */ case    9:  		/* add R11, R3, R11 */
		/* 821DD140h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821DD140h case    9:*/		return 0x821DD144;
		  /* 821DD144h */ case   10:  		/* lwz R10, <#[R11]> */
		/* 821DD144h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DD144h case   10:*/		return 0x821DD148;
		  /* 821DD148h */ case   11:  		/* cmplw CR6, R10, R17 */
		/* 821DD148h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R17);
		/* 821DD148h case   11:*/		return 0x821DD14C;
		  /* 821DD14Ch */ case   12:  		/* bc 4, CR6_EQ, 8 */
		/* 821DD14Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x821DD154;  }
		/* 821DD14Ch case   12:*/		return 0x821DD150;
		  /* 821DD150h */ case   13:  		/* stw R27, <#[R11]> */
		/* 821DD150h case   13:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 821DD150h case   13:*/		return 0x821DD154;
	}
	return 0x821DD154;
} // Block from 821DD11Ch-821DD154h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821DD154h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD154( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD154) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD154);
		  /* 821DD154h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821DD154h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821DD154h case    0:*/		return 0x821DD158;
		  /* 821DD158h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DD158h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DD158h case    1:*/		return 0x821DD15C;
		  /* 821DD15Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DD15Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DD15Ch case    2:*/		return 0x821DD160;
		  /* 821DD160h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DD160h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DD170;  }
		/* 821DD160h case    3:*/		return 0x821DD164;
		  /* 821DD164h */ case    4:  		/* mr R31, R11 */
		/* 821DD164h case    4:*/		regs.R31 = regs.R11;
		/* 821DD164h case    4:*/		return 0x821DD168;
		  /* 821DD168h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DD168h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DD168h case    5:*/		return 0x821DD16C;
		  /* 821DD16Ch */ case    6:  		/* bc 4, CR6_EQ, -144 */
		/* 821DD16Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DD0DC;  }
		/* 821DD16Ch case    6:*/		return 0x821DD170;
	}
	return 0x821DD170;
} // Block from 821DD154h-821DD170h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DD170h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD170);
		  /* 821DD170h */ case    0:  		/* addi R26, R27, 8 */
		/* 821DD170h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R27,0x8);
		/* 821DD170h case    0:*/		return 0x821DD174;
		  /* 821DD174h */ case    1:  		/* lwz R31, <#[R27 + 8]> */
		/* 821DD174h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + 0x00000008) );
		/* 821DD174h case    1:*/		return 0x821DD178;
		  /* 821DD178h */ case    2:  		/* mr R30, R26 */
		/* 821DD178h case    2:*/		regs.R30 = regs.R26;
		/* 821DD178h case    2:*/		return 0x821DD17C;
		  /* 821DD17Ch */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 821DD17Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DD17Ch case    3:*/		return 0x821DD180;
		  /* 821DD180h */ case    4:  		/* bc 12, CR6_EQ, 88 */
		/* 821DD180h case    4:*/		if ( regs.CR[6].eq ) { return 0x821DD1D8;  }
		/* 821DD180h case    4:*/		return 0x821DD184;
		  /* 821DD184h */ case    5:  		/* rlwinm R11, R18, 27, 5, 31 */
		/* 821DD184h case    5:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R18);
		/* 821DD184h case    5:*/		return 0x821DD188;
		  /* 821DD188h */ case    6:  		/* lwz R3, <#[R31 + 4]> */
		/* 821DD188h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 821DD188h case    6:*/		return 0x821DD18C;
		  /* 821DD18Ch */ case    7:  		/* rlwinm R10, R18, 0, 27, 31 */
		/* 821DD18Ch case    7:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R18);
		/* 821DD18Ch case    7:*/		return 0x821DD190;
		  /* 821DD190h */ case    8:  		/* addi R11, R11, 21 */
		/* 821DD190h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821DD190h case    8:*/		return 0x821DD194;
		  /* 821DD194h */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821DD194h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821DD194h case    9:*/		return 0x821DD198;
		  /* 821DD198h */ case   10:  		/* lwzx R11, <#[R11 + R3]> */
		/* 821DD198h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821DD198h case   10:*/		return 0x821DD19C;
		  /* 821DD19Ch */ case   11:  		/* srw R11, R11, R10 */
		/* 821DD19Ch case   11:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821DD19Ch case   11:*/		return 0x821DD1A0;
		  /* 821DD1A0h */ case   12:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DD1A0h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DD1A0h case   12:*/		return 0x821DD1A4;
		  /* 821DD1A4h */ case   13:  		/* bc 4, CR0_EQ, 28 */
		/* 821DD1A4h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821DD1C0;  }
		/* 821DD1A4h case   13:*/		return 0x821DD1A8;
		  /* 821DD1A8h */ case   14:  		/* lwz R11, <#[R3 + 44]> */
		/* 821DD1A8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000002C) );
		/* 821DD1A8h case   14:*/		return 0x821DD1AC;
		  /* 821DD1ACh */ case   15:  		/* cmplw CR6, R11, R22 */
		/* 821DD1ACh case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 821DD1ACh case   15:*/		return 0x821DD1B0;
		  /* 821DD1B0h */ case   16:  		/* bc 12, CR6_EQ, 16 */
		/* 821DD1B0h case   16:*/		if ( regs.CR[6].eq ) { return 0x821DD1C0;  }
		/* 821DD1B0h case   16:*/		return 0x821DD1B4;
		  /* 821DD1B4h */ case   17:  		/* mr R5, R23 */
		/* 821DD1B4h case   17:*/		regs.R5 = regs.R23;
		/* 821DD1B4h case   17:*/		return 0x821DD1B8;
		  /* 821DD1B8h */ case   18:  		/* mr R4, R27 */
		/* 821DD1B8h case   18:*/		regs.R4 = regs.R27;
		/* 821DD1B8h case   18:*/		return 0x821DD1BC;
		  /* 821DD1BCh */ case   19:  		/* bl 337836 */
		/* 821DD1BCh case   19:*/		regs.LR = 0x821DD1C0; return 0x8222F968;
		/* 821DD1BCh case   19:*/		return 0x821DD1C0;
	}
	return 0x821DD1C0;
} // Block from 821DD170h-821DD1C0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821DD1C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD1C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD1C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD1C0);
		  /* 821DD1C0h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821DD1C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821DD1C0h case    0:*/		return 0x821DD1C4;
		  /* 821DD1C4h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821DD1C4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821DD1C4h case    1:*/		return 0x821DD1C8;
		  /* 821DD1C8h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 821DD1C8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DD1D0;  }
		/* 821DD1C8h case    2:*/		return 0x821DD1CC;
		  /* 821DD1CCh */ case    3:  		/* addi R30, R31, 12 */
		/* 821DD1CCh case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0xC);
		/* 821DD1CCh case    3:*/		return 0x821DD1D0;
	}
	return 0x821DD1D0;
} // Block from 821DD1C0h-821DD1D0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DD1D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD1D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD1D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD1D0);
		  /* 821DD1D0h */ case    0:  		/* lwz R31, <#[R30]> */
		/* 821DD1D0h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821DD1D0h case    0:*/		return 0x821DD1D4;
		  /* 821DD1D4h */ case    1:  		/* b -88 */
		/* 821DD1D4h case    1:*/		return 0x821DD17C;
		/* 821DD1D4h case    1:*/		return 0x821DD1D8;
	}
	return 0x821DD1D8;
} // Block from 821DD1D0h-821DD1D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DD1D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD1D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD1D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD1D8);
		  /* 821DD1D8h */ case    0:  		/* addi R29, R17, 8 */
		/* 821DD1D8h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R17,0x8);
		/* 821DD1D8h case    0:*/		return 0x821DD1DC;
		  /* 821DD1DCh */ case    1:  		/* lwz R31, <#[R17 + 8]> */
		/* 821DD1DCh case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R17 + 0x00000008) );
		/* 821DD1DCh case    1:*/		return 0x821DD1E0;
		  /* 821DD1E0h */ case    2:  		/* mr R30, R29 */
		/* 821DD1E0h case    2:*/		regs.R30 = regs.R29;
		/* 821DD1E0h case    2:*/		return 0x821DD1E4;
		  /* 821DD1E4h */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 821DD1E4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DD1E4h case    3:*/		return 0x821DD1E8;
		  /* 821DD1E8h */ case    4:  		/* bc 12, CR6_EQ, 76 */
		/* 821DD1E8h case    4:*/		if ( regs.CR[6].eq ) { return 0x821DD234;  }
		/* 821DD1E8h case    4:*/		return 0x821DD1EC;
		  /* 821DD1ECh */ case    5:  		/* rlwinm R11, R18, 27, 5, 31 */
		/* 821DD1ECh case    5:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R18);
		/* 821DD1ECh case    5:*/		return 0x821DD1F0;
		  /* 821DD1F0h */ case    6:  		/* lwz R3, <#[R31 + 4]> */
		/* 821DD1F0h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 821DD1F0h case    6:*/		return 0x821DD1F4;
		  /* 821DD1F4h */ case    7:  		/* rlwinm R10, R18, 0, 27, 31 */
		/* 821DD1F4h case    7:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R18);
		/* 821DD1F4h case    7:*/		return 0x821DD1F8;
		  /* 821DD1F8h */ case    8:  		/* addi R11, R11, 21 */
		/* 821DD1F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821DD1F8h case    8:*/		return 0x821DD1FC;
		  /* 821DD1FCh */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821DD1FCh case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821DD1FCh case    9:*/		return 0x821DD200;
		  /* 821DD200h */ case   10:  		/* lwzx R11, <#[R11 + R3]> */
		/* 821DD200h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821DD200h case   10:*/		return 0x821DD204;
		  /* 821DD204h */ case   11:  		/* srw R11, R11, R10 */
		/* 821DD204h case   11:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821DD204h case   11:*/		return 0x821DD208;
		  /* 821DD208h */ case   12:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DD208h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DD208h case   12:*/		return 0x821DD20C;
		  /* 821DD20Ch */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 821DD20Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x821DD21C;  }
		/* 821DD20Ch case   13:*/		return 0x821DD210;
		  /* 821DD210h */ case   14:  		/* mr R5, R23 */
		/* 821DD210h case   14:*/		regs.R5 = regs.R23;
		/* 821DD210h case   14:*/		return 0x821DD214;
		  /* 821DD214h */ case   15:  		/* mr R4, R17 */
		/* 821DD214h case   15:*/		regs.R4 = regs.R17;
		/* 821DD214h case   15:*/		return 0x821DD218;
		  /* 821DD218h */ case   16:  		/* bl 337744 */
		/* 821DD218h case   16:*/		regs.LR = 0x821DD21C; return 0x8222F968;
		/* 821DD218h case   16:*/		return 0x821DD21C;
	}
	return 0x821DD21C;
} // Block from 821DD1D8h-821DD21Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 821DD21Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD21C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD21C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD21C);
		  /* 821DD21Ch */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821DD21Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821DD21Ch case    0:*/		return 0x821DD220;
		  /* 821DD220h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821DD220h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821DD220h case    1:*/		return 0x821DD224;
		  /* 821DD224h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 821DD224h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DD22C;  }
		/* 821DD224h case    2:*/		return 0x821DD228;
		  /* 821DD228h */ case    3:  		/* addi R30, R31, 12 */
		/* 821DD228h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0xC);
		/* 821DD228h case    3:*/		return 0x821DD22C;
	}
	return 0x821DD22C;
} // Block from 821DD21Ch-821DD22Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DD22Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD22C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD22C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD22C);
		  /* 821DD22Ch */ case    0:  		/* lwz R31, <#[R30]> */
		/* 821DD22Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821DD22Ch case    0:*/		return 0x821DD230;
		  /* 821DD230h */ case    1:  		/* b -76 */
		/* 821DD230h case    1:*/		return 0x821DD1E4;
		/* 821DD230h case    1:*/		return 0x821DD234;
	}
	return 0x821DD234;
} // Block from 821DD22Ch-821DD234h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DD234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD234);
		  /* 821DD234h */ case    0:  		/* lwz R11, <#[R21 + 16]> */
		/* 821DD234h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000010) );
		/* 821DD234h case    0:*/		return 0x821DD238;
		  /* 821DD238h */ case    1:  		/* stw R28, <#[R21]> */
		/* 821DD238h case    1:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R21 + 0x00000000) );
		/* 821DD238h case    1:*/		return 0x821DD23C;
		  /* 821DD23Ch */ case    2:  		/* stw R27, <#[R21 + 4]> */
		/* 821DD23Ch case    2:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R21 + 0x00000004) );
		/* 821DD23Ch case    2:*/		return 0x821DD240;
		  /* 821DD240h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821DD240h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DD240h case    3:*/		return 0x821DD244;
		  /* 821DD244h */ case    4:  		/* lwz R10, <#[R28 + 80]> */
		/* 821DD244h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000050) );
		/* 821DD244h case    4:*/		return 0x821DD248;
		  /* 821DD248h */ case    5:  		/* stw R10, <#[R21 + 8]> */
		/* 821DD248h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R21 + 0x00000008) );
		/* 821DD248h case    5:*/		return 0x821DD24C;
		  /* 821DD24Ch */ case    6:  		/* bc 12, CR6_EQ, 60 */
		/* 821DD24Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821DD288;  }
		/* 821DD24Ch case    6:*/		return 0x821DD250;
		  /* 821DD250h */ case    7:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DD250h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DD250h case    7:*/		return 0x821DD254;
		  /* 821DD254h */ case    8:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 821DD254h case    8:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 821DD254h case    8:*/		return 0x821DD258;
		  /* 821DD258h */ case    9:  		/* bc 12, CR0_EQ, 36 */
		/* 821DD258h case    9:*/		if ( regs.CR[0].eq ) { return 0x821DD27C;  }
		/* 821DD258h case    9:*/		return 0x821DD25C;
		  /* 821DD25Ch */ case   10:  		/* b 16 */
		/* 821DD25Ch case   10:*/		return 0x821DD26C;
		/* 821DD25Ch case   10:*/		return 0x821DD260;
		  /* 821DD260h */ case   11:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DD260h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DD260h case   11:*/		return 0x821DD264;
		  /* 821DD264h */ case   12:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 821DD264h case   12:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 821DD264h case   12:*/		return 0x821DD268;
		  /* 821DD268h */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 821DD268h case   13:*/		if ( regs.CR[0].eq ) { return 0x821DD278;  }
		/* 821DD268h case   13:*/		return 0x821DD26C;
	}
	return 0x821DD26C;
} // Block from 821DD234h-821DD26Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 821DD26Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD26C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD26C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD26C);
		  /* 821DD26Ch */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 821DD26Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821DD26Ch case    0:*/		return 0x821DD270;
		  /* 821DD270h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DD270h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DD270h case    1:*/		return 0x821DD274;
		  /* 821DD274h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 821DD274h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DD260;  }
		/* 821DD274h case    2:*/		return 0x821DD278;
	}
	return 0x821DD278;
} // Block from 821DD26Ch-821DD278h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DD278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD278);
		  /* 821DD278h */ case    0:  		/* stw R11, <#[R21 + 16]> */
		/* 821DD278h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000010) );
		/* 821DD278h case    0:*/		return 0x821DD27C;
	}
	return 0x821DD27C;
} // Block from 821DD278h-821DD27Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DD27Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD27C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD27C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD27C);
		  /* 821DD27Ch */ case    0:  		/* lwz R11, <#[R21 + 16]> */
		/* 821DD27Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000010) );
		/* 821DD27Ch case    0:*/		return 0x821DD280;
		  /* 821DD280h */ case    1:  		/* lwz R11, <#[R11 + 80]> */
		/* 821DD280h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821DD280h case    1:*/		return 0x821DD284;
		  /* 821DD284h */ case    2:  		/* stw R11, <#[R21 + 16]> */
		/* 821DD284h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000010) );
		/* 821DD284h case    2:*/		return 0x821DD288;
	}
	return 0x821DD288;
} // Block from 821DD27Ch-821DD288h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DD288h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD288);
		  /* 821DD288h */ case    0:  		/* lwz R11, <#[R21 + 12]> */
		/* 821DD288h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000000C) );
		/* 821DD288h case    0:*/		return 0x821DD28C;
		  /* 821DD28Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DD28Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DD28Ch case    1:*/		return 0x821DD290;
		  /* 821DD290h */ case    2:  		/* bc 12, CR6_EQ, 60 */
		/* 821DD290h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DD2CC;  }
		/* 821DD290h case    2:*/		return 0x821DD294;
		  /* 821DD294h */ case    3:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DD294h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DD294h case    3:*/		return 0x821DD298;
		  /* 821DD298h */ case    4:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 821DD298h case    4:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 821DD298h case    4:*/		return 0x821DD29C;
		  /* 821DD29Ch */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 821DD29Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x821DD2C0;  }
		/* 821DD29Ch case    5:*/		return 0x821DD2A0;
		  /* 821DD2A0h */ case    6:  		/* b 16 */
		/* 821DD2A0h case    6:*/		return 0x821DD2B0;
		/* 821DD2A0h case    6:*/		return 0x821DD2A4;
		  /* 821DD2A4h */ case    7:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DD2A4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DD2A4h case    7:*/		return 0x821DD2A8;
		  /* 821DD2A8h */ case    8:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 821DD2A8h case    8:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 821DD2A8h case    8:*/		return 0x821DD2AC;
		  /* 821DD2ACh */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 821DD2ACh case    9:*/		if ( regs.CR[0].eq ) { return 0x821DD2BC;  }
		/* 821DD2ACh case    9:*/		return 0x821DD2B0;
	}
	return 0x821DD2B0;
} // Block from 821DD288h-821DD2B0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DD2B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD2B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD2B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD2B0);
		  /* 821DD2B0h */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 821DD2B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821DD2B0h case    0:*/		return 0x821DD2B4;
		  /* 821DD2B4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DD2B4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DD2B4h case    1:*/		return 0x821DD2B8;
		  /* 821DD2B8h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 821DD2B8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DD2A4;  }
		/* 821DD2B8h case    2:*/		return 0x821DD2BC;
	}
	return 0x821DD2BC;
} // Block from 821DD2B0h-821DD2BCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DD2BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD2BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD2BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD2BC);
		  /* 821DD2BCh */ case    0:  		/* stw R11, <#[R21 + 12]> */
		/* 821DD2BCh case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x0000000C) );
		/* 821DD2BCh case    0:*/		return 0x821DD2C0;
	}
	return 0x821DD2C0;
} // Block from 821DD2BCh-821DD2C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DD2C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD2C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD2C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD2C0);
		  /* 821DD2C0h */ case    0:  		/* lwz R11, <#[R21 + 12]> */
		/* 821DD2C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000000C) );
		/* 821DD2C0h case    0:*/		return 0x821DD2C4;
		  /* 821DD2C4h */ case    1:  		/* lwz R11, <#[R11 + 80]> */
		/* 821DD2C4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821DD2C4h case    1:*/		return 0x821DD2C8;
		  /* 821DD2C8h */ case    2:  		/* stw R11, <#[R21 + 12]> */
		/* 821DD2C8h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x0000000C) );
		/* 821DD2C8h case    2:*/		return 0x821DD2CC;
	}
	return 0x821DD2CC;
} // Block from 821DD2C0h-821DD2CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DD2CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD2CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD2CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD2CC);
		  /* 821DD2CCh */ case    0:  		/* mr R3, R23 */
		/* 821DD2CCh case    0:*/		regs.R3 = regs.R23;
		/* 821DD2CCh case    0:*/		return 0x821DD2D0;
		  /* 821DD2D0h */ case    1:  		/* bl 57424 */
		/* 821DD2D0h case    1:*/		regs.LR = 0x821DD2D4; return 0x821EB320;
		/* 821DD2D0h case    1:*/		return 0x821DD2D4;
		  /* 821DD2D4h */ case    2:  		/* lwz R11, <#[R17 + 20]> */
		/* 821DD2D4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000014) );
		/* 821DD2D4h case    2:*/		return 0x821DD2D8;
		  /* 821DD2D8h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DD2D8h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DD2D8h case    3:*/		return 0x821DD2DC;
		  /* 821DD2DCh */ case    4:  		/* bc 4, CR0_EQ, 232 */
		/* 821DD2DCh case    4:*/		if ( !regs.CR[0].eq ) { return 0x821DD3C4;  }
		/* 821DD2DCh case    4:*/		return 0x821DD2E0;
		  /* 821DD2E0h */ case    5:  		/* mr R7, R11 */
		/* 821DD2E0h case    5:*/		regs.R7 = regs.R11;
		/* 821DD2E0h case    5:*/		return 0x821DD2E4;
		  /* 821DD2E4h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 821DD2E4h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DD2E4h case    6:*/		return 0x821DD2E8;
		  /* 821DD2E8h */ case    7:  		/* bc 12, CR0_EQ, 220 */
		/* 821DD2E8h case    7:*/		if ( regs.CR[0].eq ) { return 0x821DD3C4;  }
		/* 821DD2E8h case    7:*/		return 0x821DD2EC;
		  /* 821DD2ECh */ case    8:  		/* lwz R11, <#[R7 + 8]> */
		/* 821DD2ECh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000008) );
		/* 821DD2ECh case    8:*/		return 0x821DD2F0;
		  /* 821DD2F0h */ case    9:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DD2F0h case    9:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DD2F0h case    9:*/		return 0x821DD2F4;
		  /* 821DD2F4h */ case   10:  		/* cmplwi CR6, R11, 14336 */
		/* 821DD2F4h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821DD2F4h case   10:*/		return 0x821DD2F8;
		  /* 821DD2F8h */ case   11:  		/* bc 4, CR6_EQ, 176 */
		/* 821DD2F8h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821DD3A8;  }
		/* 821DD2F8h case   11:*/		return 0x821DD2FC;
		  /* 821DD2FCh */ case   12:  		/* mr R6, R7 */
		/* 821DD2FCh case   12:*/		regs.R6 = regs.R7;
		/* 821DD2FCh case   12:*/		return 0x821DD300;
		  /* 821DD300h */ case   13:  		/* lwz R11, <#[R6]> */
		/* 821DD300h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 821DD300h case   13:*/		return 0x821DD304;
		  /* 821DD304h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821DD304h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DD304h case   14:*/		return 0x821DD308;
		  /* 821DD308h */ case   15:  		/* bc 12, CR6_EQ, 160 */
		/* 821DD308h case   15:*/		if ( regs.CR[6].eq ) { return 0x821DD3A8;  }
		/* 821DD308h case   15:*/		return 0x821DD30C;
		  /* 821DD30Ch */ case   16:  		/* lwz R9, <#[R11 + 12]> */
		/* 821DD30Ch case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DD30Ch case   16:*/		return 0x821DD310;
		  /* 821DD310h */ case   17:  		/* lwz R10, <#[R29]> */
		/* 821DD310h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821DD310h case   17:*/		return 0x821DD314;
		  /* 821DD314h */ case   18:  		/* lwz R8, <#[R9 + 28]> */
		/* 821DD314h case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x0000001C) );
		/* 821DD314h case   18:*/		return 0x821DD318;
		  /* 821DD318h */ case   19:  		/* cmplwi CR6, R10, 0 */
		/* 821DD318h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DD318h case   19:*/		return 0x821DD31C;
		  /* 821DD31Ch */ case   20:  		/* bc 12, CR6_EQ, 64 */
		/* 821DD31Ch case   20:*/		if ( regs.CR[6].eq ) { return 0x821DD35C;  }
		/* 821DD31Ch case   20:*/		return 0x821DD320;
		  /* 821DD320h */ case   21:  		/* lwz R9, <#[R8 + 48]> */
		/* 821DD320h case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000030) );
		/* 821DD320h case   21:*/		return 0x821DD324;
		  /* 821DD324h */ case   22:  		/* li R5, 1 */
		/* 821DD324h case   22:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821DD324h case   22:*/		return 0x821DD328;
		  /* 821DD328h */ case   23:  		/* lwz R4, <#[R10 + 4]> */
		/* 821DD328h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000004) );
		/* 821DD328h case   23:*/		return 0x821DD32C;
		  /* 821DD32Ch */ case   24:  		/* rlwinm R3, R9, 0, 13, 31 */
		/* 821DD32Ch case   24:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R3,regs.R9);
		/* 821DD32Ch case   24:*/		return 0x821DD330;
		  /* 821DD330h */ case   25:  		/* rlwinm R9, R3, 27, 5, 31 */
		/* 821DD330h case   25:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R9,regs.R3);
		/* 821DD330h case   25:*/		return 0x821DD334;
		  /* 821DD334h */ case   26:  		/* rlwinm R3, R3, 0, 27, 31 */
		/* 821DD334h case   26:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R3,regs.R3);
		/* 821DD334h case   26:*/		return 0x821DD338;
		  /* 821DD338h */ case   27:  		/* addi R9, R9, 1 */
		/* 821DD338h case   27:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821DD338h case   27:*/		return 0x821DD33C;
		  /* 821DD33Ch */ case   28:  		/* lwz R4, <#[R4 + 40]> */
		/* 821DD33Ch case   28:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000028) );
		/* 821DD33Ch case   28:*/		return 0x821DD340;
		  /* 821DD340h */ case   29:  		/* slw R5, R5, R3 */
		/* 821DD340h case   29:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R5,regs.R3);
		/* 821DD340h case   29:*/		return 0x821DD344;
		  /* 821DD344h */ case   30:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821DD344h case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821DD344h case   30:*/		return 0x821DD348;
		  /* 821DD348h */ case   31:  		/* lwzx R9, <#[R9 + R4]> */
		/* 821DD348h case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 821DD348h case   31:*/		return 0x821DD34C;
		  /* 821DD34Ch */ case   32:  		/* and. R9, R9, R5 */
		/* 821DD34Ch case   32:*/		cpu::op::and<1>(regs,&regs.R9,regs.R9,regs.R5);
		/* 821DD34Ch case   32:*/		return 0x821DD350;
		  /* 821DD350h */ case   33:  		/* bc 4, CR0_EQ, 68 */
		/* 821DD350h case   33:*/		if ( !regs.CR[0].eq ) { return 0x821DD394;  }
		/* 821DD350h case   33:*/		return 0x821DD354;
		  /* 821DD354h */ case   34:  		/* lwz R10, <#[R10 + 12]> */
		/* 821DD354h case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 821DD354h case   34:*/		return 0x821DD358;
		  /* 821DD358h */ case   35:  		/* b -64 */
		/* 821DD358h case   35:*/		return 0x821DD318;
		/* 821DD358h case   35:*/		return 0x821DD35C;
	}
	return 0x821DD35C;
} // Block from 821DD2CCh-821DD35Ch (36 instructions)

//////////////////////////////////////////////////////
// Block at 821DD35Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD35C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD35C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD35C);
		  /* 821DD35Ch */ case    0:  		/* lwz R10, <#[R11 + 16]> */
		/* 821DD35Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821DD35Ch case    0:*/		return 0x821DD360;
		  /* 821DD360h */ case    1:  		/* lwz R8, <#[R7 + 32]> */
		/* 821DD360h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R7 + 0x00000020) );
		/* 821DD360h case    1:*/		return 0x821DD364;
		  /* 821DD364h */ case    2:  		/* lwz R9, <#[R10]> */
		/* 821DD364h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DD364h case    2:*/		return 0x821DD368;
		  /* 821DD368h */ case    3:  		/* b 12 */
		/* 821DD368h case    3:*/		return 0x821DD374;
		/* 821DD368h case    3:*/		return 0x821DD36C;
		  /* 821DD36Ch */ case    4:  		/* addi R10, R9, 4 */
		/* 821DD36Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x4);
		/* 821DD36Ch case    4:*/		return 0x821DD370;
		  /* 821DD370h */ case    5:  		/* lwz R9, <#[R9 + 4]> */
		/* 821DD370h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821DD370h case    5:*/		return 0x821DD374;
	}
	return 0x821DD374;
} // Block from 821DD35Ch-821DD374h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DD374h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD374( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD374) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD374);
		  /* 821DD374h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821DD374h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821DD374h case    0:*/		return 0x821DD378;
		  /* 821DD378h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821DD378h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DD36C;  }
		/* 821DD378h case    1:*/		return 0x821DD37C;
		  /* 821DD37Ch */ case    2:  		/* lwz R9, <#[R11 + 4]> */
		/* 821DD37Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821DD37Ch case    2:*/		return 0x821DD380;
		  /* 821DD380h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821DD380h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DD380h case    3:*/		return 0x821DD384;
		  /* 821DD384h */ case    4:  		/* lwz R10, <#[R8]> */
		/* 821DD384h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821DD384h case    4:*/		return 0x821DD388;
		  /* 821DD388h */ case    5:  		/* stw R10, <#[R11 + 4]> */
		/* 821DD388h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DD388h case    5:*/		return 0x821DD38C;
		  /* 821DD38Ch */ case    6:  		/* stw R11, <#[R8]> */
		/* 821DD38Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821DD38Ch case    6:*/		return 0x821DD390;
		  /* 821DD390h */ case    7:  		/* stw R8, <#[R11 + 16]> */
		/* 821DD390h case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000010) );
		/* 821DD390h case    7:*/		return 0x821DD394;
	}
	return 0x821DD394;
} // Block from 821DD374h-821DD394h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821DD394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD394);
		  /* 821DD394h */ case    0:  		/* lwz R10, <#[R6]> */
		/* 821DD394h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + 0x00000000) );
		/* 821DD394h case    0:*/		return 0x821DD398;
		  /* 821DD398h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821DD398h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821DD398h case    1:*/		return 0x821DD39C;
		  /* 821DD39Ch */ case    2:  		/* bc 4, CR6_EQ, -156 */
		/* 821DD39Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DD300;  }
		/* 821DD39Ch case    2:*/		return 0x821DD3A0;
		  /* 821DD3A0h */ case    3:  		/* addi R6, R11, 4 */
		/* 821DD3A0h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x4);
		/* 821DD3A0h case    3:*/		return 0x821DD3A4;
		  /* 821DD3A4h */ case    4:  		/* b -164 */
		/* 821DD3A4h case    4:*/		return 0x821DD300;
		/* 821DD3A4h case    4:*/		return 0x821DD3A8;
	}
	return 0x821DD3A8;
} // Block from 821DD394h-821DD3A8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DD3A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD3A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD3A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD3A8);
		  /* 821DD3A8h */ case    0:  		/* rlwinm R11, R7, 0, 0, 30 */
		/* 821DD3A8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R7);
		/* 821DD3A8h case    0:*/		return 0x821DD3AC;
		  /* 821DD3ACh */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DD3ACh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DD3ACh case    1:*/		return 0x821DD3B0;
		  /* 821DD3B0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DD3B0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DD3B0h case    2:*/		return 0x821DD3B4;
		  /* 821DD3B4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DD3B4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DD3C4;  }
		/* 821DD3B4h case    3:*/		return 0x821DD3B8;
		  /* 821DD3B8h */ case    4:  		/* mr R7, R11 */
		/* 821DD3B8h case    4:*/		regs.R7 = regs.R11;
		/* 821DD3B8h case    4:*/		return 0x821DD3BC;
		  /* 821DD3BCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DD3BCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DD3BCh case    5:*/		return 0x821DD3C0;
		  /* 821DD3C0h */ case    6:  		/* bc 4, CR6_EQ, -212 */
		/* 821DD3C0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DD2EC;  }
		/* 821DD3C0h case    6:*/		return 0x821DD3C4;
	}
	return 0x821DD3C4;
} // Block from 821DD3A8h-821DD3C4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DD3C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD3C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD3C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD3C4);
		  /* 821DD3C4h */ case    0:  		/* lwz R11, <#[R27 + 20]> */
		/* 821DD3C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 821DD3C4h case    0:*/		return 0x821DD3C8;
		  /* 821DD3C8h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DD3C8h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DD3C8h case    1:*/		return 0x821DD3CC;
		  /* 821DD3CCh */ case    2:  		/* bc 4, CR0_EQ, 176 */
		/* 821DD3CCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x821DD47C;  }
		/* 821DD3CCh case    2:*/		return 0x821DD3D0;
		  /* 821DD3D0h */ case    3:  		/* mr R28, R11 */
		/* 821DD3D0h case    3:*/		regs.R28 = regs.R11;
		/* 821DD3D0h case    3:*/		return 0x821DD3D4;
		  /* 821DD3D4h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821DD3D4h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DD3D4h case    4:*/		return 0x821DD3D8;
		  /* 821DD3D8h */ case    5:  		/* bc 12, CR0_EQ, 164 */
		/* 821DD3D8h case    5:*/		if ( regs.CR[0].eq ) { return 0x821DD47C;  }
		/* 821DD3D8h case    5:*/		return 0x821DD3DC;
		  /* 821DD3DCh */ case    6:  		/* lwz R11, <#[R28 + 8]> */
		/* 821DD3DCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821DD3DCh case    6:*/		return 0x821DD3E0;
		  /* 821DD3E0h */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DD3E0h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DD3E0h case    7:*/		return 0x821DD3E4;
		  /* 821DD3E4h */ case    8:  		/* cmplwi CR6, R11, 14336 */
		/* 821DD3E4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821DD3E4h case    8:*/		return 0x821DD3E8;
		  /* 821DD3E8h */ case    9:  		/* bc 4, CR6_EQ, 120 */
		/* 821DD3E8h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821DD460;  }
		/* 821DD3E8h case    9:*/		return 0x821DD3EC;
		  /* 821DD3ECh */ case   10:  		/* mr R27, R28 */
		/* 821DD3ECh case   10:*/		regs.R27 = regs.R28;
		/* 821DD3ECh case   10:*/		return 0x821DD3F0;
		  /* 821DD3F0h */ case   11:  		/* lwz R30, <#[R27]> */
		/* 821DD3F0h case   11:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R27 + 0x00000000) );
		/* 821DD3F0h case   11:*/		return 0x821DD3F4;
		  /* 821DD3F4h */ case   12:  		/* cmplwi CR6, R30, 0 */
		/* 821DD3F4h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821DD3F4h case   12:*/		return 0x821DD3F8;
		  /* 821DD3F8h */ case   13:  		/* bc 12, CR6_EQ, 104 */
		/* 821DD3F8h case   13:*/		if ( regs.CR[6].eq ) { return 0x821DD460;  }
		/* 821DD3F8h case   13:*/		return 0x821DD3FC;
		  /* 821DD3FCh */ case   14:  		/* lwz R29, <#[R26]> */
		/* 821DD3FCh case   14:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R26 + 0x00000000) );
		/* 821DD3FCh case   14:*/		return 0x821DD400;
		  /* 821DD400h */ case   15:  		/* cmplwi CR6, R29, 0 */
		/* 821DD400h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821DD400h case   15:*/		return 0x821DD404;
		  /* 821DD404h */ case   16:  		/* bc 12, CR6_EQ, 56 */
		/* 821DD404h case   16:*/		if ( regs.CR[6].eq ) { return 0x821DD43C;  }
		/* 821DD404h case   16:*/		return 0x821DD408;
		  /* 821DD408h */ case   17:  		/* lwz R31, <#[R29 + 4]> */
		/* 821DD408h case   17:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000004) );
		/* 821DD408h case   17:*/		return 0x821DD40C;
		  /* 821DD40Ch */ case   18:  		/* li R7, 1 */
		/* 821DD40Ch case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821DD40Ch case   18:*/		return 0x821DD410;
		  /* 821DD410h */ case   19:  		/* li R6, 0 */
		/* 821DD410h case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821DD410h case   19:*/		return 0x821DD414;
		  /* 821DD414h */ case   20:  		/* mr R5, R31 */
		/* 821DD414h case   20:*/		regs.R5 = regs.R31;
		/* 821DD414h case   20:*/		return 0x821DD418;
		  /* 821DD418h */ case   21:  		/* mr R4, R28 */
		/* 821DD418h case   21:*/		regs.R4 = regs.R28;
		/* 821DD418h case   21:*/		return 0x821DD41C;
		  /* 821DD41Ch */ case   22:  		/* mr R3, R23 */
		/* 821DD41Ch case   22:*/		regs.R3 = regs.R23;
		/* 821DD41Ch case   22:*/		return 0x821DD420;
		  /* 821DD420h */ case   23:  		/* bl 45280 */
		/* 821DD420h case   23:*/		regs.LR = 0x821DD424; return 0x821E8500;
		/* 821DD420h case   23:*/		return 0x821DD424;
		  /* 821DD424h */ case   24:  		/* cmplw CR6, R30, R3 */
		/* 821DD424h case   24:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R3);
		/* 821DD424h case   24:*/		return 0x821DD428;
		  /* 821DD428h */ case   25:  		/* bc 12, CR6_EQ, 12 */
		/* 821DD428h case   25:*/		if ( regs.CR[6].eq ) { return 0x821DD434;  }
		/* 821DD428h case   25:*/		return 0x821DD42C;
		  /* 821DD42Ch */ case   26:  		/* lwz R29, <#[R29 + 12]> */
		/* 821DD42Ch case   26:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x0000000C) );
		/* 821DD42Ch case   26:*/		return 0x821DD430;
		  /* 821DD430h */ case   27:  		/* b -48 */
		/* 821DD430h case   27:*/		return 0x821DD400;
		/* 821DD430h case   27:*/		return 0x821DD434;
	}
	return 0x821DD434;
} // Block from 821DD3C4h-821DD434h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821DD434h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD434( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD434) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD434);
		  /* 821DD434h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821DD434h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DD434h case    0:*/		return 0x821DD438;
		  /* 821DD438h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 821DD438h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DD44C;  }
		/* 821DD438h case    1:*/		return 0x821DD43C;
	}
	return 0x821DD43C;
} // Block from 821DD434h-821DD43Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DD43Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD43C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD43C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD43C);
		  /* 821DD43Ch */ case    0:  		/* mr R5, R23 */
		/* 821DD43Ch case    0:*/		regs.R5 = regs.R23;
		/* 821DD43Ch case    0:*/		return 0x821DD440;
		  /* 821DD440h */ case    1:  		/* mr R4, R30 */
		/* 821DD440h case    1:*/		regs.R4 = regs.R30;
		/* 821DD440h case    1:*/		return 0x821DD444;
		  /* 821DD444h */ case    2:  		/* mr R3, R28 */
		/* 821DD444h case    2:*/		regs.R3 = regs.R28;
		/* 821DD444h case    2:*/		return 0x821DD448;
		  /* 821DD448h */ case    3:  		/* bl -412472 */
		/* 821DD448h case    3:*/		regs.LR = 0x821DD44C; return 0x82178910;
		/* 821DD448h case    3:*/		return 0x821DD44C;
	}
	return 0x821DD44C;
} // Block from 821DD43Ch-821DD44Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DD44Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD44C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD44C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD44C);
		  /* 821DD44Ch */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821DD44Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821DD44Ch case    0:*/		return 0x821DD450;
		  /* 821DD450h */ case    1:  		/* cmplw CR6, R11, R30 */
		/* 821DD450h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821DD450h case    1:*/		return 0x821DD454;
		  /* 821DD454h */ case    2:  		/* bc 4, CR6_EQ, -100 */
		/* 821DD454h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DD3F0;  }
		/* 821DD454h case    2:*/		return 0x821DD458;
		  /* 821DD458h */ case    3:  		/* addi R27, R30, 4 */
		/* 821DD458h case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R30,0x4);
		/* 821DD458h case    3:*/		return 0x821DD45C;
		  /* 821DD45Ch */ case    4:  		/* b -108 */
		/* 821DD45Ch case    4:*/		return 0x821DD3F0;
		/* 821DD45Ch case    4:*/		return 0x821DD460;
	}
	return 0x821DD460;
} // Block from 821DD44Ch-821DD460h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DD460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD460);
		  /* 821DD460h */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 821DD460h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 821DD460h case    0:*/		return 0x821DD464;
		  /* 821DD464h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DD464h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DD464h case    1:*/		return 0x821DD468;
		  /* 821DD468h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DD468h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DD468h case    2:*/		return 0x821DD46C;
		  /* 821DD46Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DD46Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DD47C;  }
		/* 821DD46Ch case    3:*/		return 0x821DD470;
		  /* 821DD470h */ case    4:  		/* mr R28, R11 */
		/* 821DD470h case    4:*/		regs.R28 = regs.R11;
		/* 821DD470h case    4:*/		return 0x821DD474;
		  /* 821DD474h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DD474h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DD474h case    5:*/		return 0x821DD478;
		  /* 821DD478h */ case    6:  		/* bc 4, CR6_EQ, -156 */
		/* 821DD478h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DD3DC;  }
		/* 821DD478h case    6:*/		return 0x821DD47C;
	}
	return 0x821DD47C;
} // Block from 821DD460h-821DD47Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DD47Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD47C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD47C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD47C);
		  /* 821DD47Ch */ case    0:  		/* lwz R11, <#[R23 + 4]> */
		/* 821DD47Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 821DD47Ch case    0:*/		return 0x821DD480;
		  /* 821DD480h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DD480h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DD480h case    1:*/		return 0x821DD484;
		  /* 821DD484h */ case    2:  		/* bc 4, CR0_EQ, 832 */
		/* 821DD484h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821DD7C4;  }
		/* 821DD484h case    2:*/		return 0x821DD488;
		  /* 821DD488h */ case    3:  		/* mr R26, R11 */
		/* 821DD488h case    3:*/		regs.R26 = regs.R11;
		/* 821DD488h case    3:*/		return 0x821DD48C;
		  /* 821DD48Ch */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821DD48Ch case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DD48Ch case    4:*/		return 0x821DD490;
		  /* 821DD490h */ case    5:  		/* bc 12, CR0_EQ, 820 */
		/* 821DD490h case    5:*/		if ( regs.CR[0].eq ) { return 0x821DD7C4;  }
		/* 821DD490h case    5:*/		return 0x821DD494;
		  /* 821DD494h */ case    6:  		/* rlwinm R11, R18, 27, 5, 31 */
		/* 821DD494h case    6:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R18);
		/* 821DD494h case    6:*/		return 0x821DD498;
		  /* 821DD498h */ case    7:  		/* rlwinm R25, R18, 0, 27, 31 */
		/* 821DD498h case    7:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R25,regs.R18);
		/* 821DD498h case    7:*/		return 0x821DD49C;
		  /* 821DD49Ch */ case    8:  		/* addi R11, R11, 21 */
		/* 821DD49Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821DD49Ch case    8:*/		return 0x821DD4A0;
		  /* 821DD4A0h */ case    9:  		/* li R31, 1 */
		/* 821DD4A0h case    9:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 821DD4A0h case    9:*/		return 0x821DD4A4;
		  /* 821DD4A4h */ case   10:  		/* rlwinm R24, R11, 2, 0, 29 */
		/* 821DD4A4h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R24,regs.R11);
		/* 821DD4A4h case   10:*/		return 0x821DD4A8;
		  /* 821DD4A8h */ case   11:  		/* lwzx R11, <#[R24 + R26]> */
		/* 821DD4A8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + regs.R26 + 0x00000000) );
		/* 821DD4A8h case   11:*/		return 0x821DD4AC;
		  /* 821DD4ACh */ case   12:  		/* srw R11, R11, R25 */
		/* 821DD4ACh case   12:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R25);
		/* 821DD4ACh case   12:*/		return 0x821DD4B0;
		  /* 821DD4B0h */ case   13:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DD4B0h case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DD4B0h case   13:*/		return 0x821DD4B4;
		  /* 821DD4B4h */ case   14:  		/* bc 4, CR0_EQ, 756 */
		/* 821DD4B4h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821DD7A8;  }
		/* 821DD4B4h case   14:*/		return 0x821DD4B8;
		  /* 821DD4B8h */ case   15:  		/* lwz R11, <#[R26 + 20]> */
		/* 821DD4B8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000014) );
		/* 821DD4B8h case   15:*/		return 0x821DD4BC;
		  /* 821DD4BCh */ case   16:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DD4BCh case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DD4BCh case   16:*/		return 0x821DD4C0;
		  /* 821DD4C0h */ case   17:  		/* bc 4, CR0_EQ, 744 */
		/* 821DD4C0h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821DD7A8;  }
		/* 821DD4C0h case   17:*/		return 0x821DD4C4;
		  /* 821DD4C4h */ case   18:  		/* mr R27, R11 */
		/* 821DD4C4h case   18:*/		regs.R27 = regs.R11;
		/* 821DD4C4h case   18:*/		return 0x821DD4C8;
		  /* 821DD4C8h */ case   19:  		/* cmplwi CR0, R11, 0 */
		/* 821DD4C8h case   19:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DD4C8h case   19:*/		return 0x821DD4CC;
		  /* 821DD4CCh */ case   20:  		/* bc 12, CR0_EQ, 732 */
		/* 821DD4CCh case   20:*/		if ( regs.CR[0].eq ) { return 0x821DD7A8;  }
		/* 821DD4CCh case   20:*/		return 0x821DD4D0;
		  /* 821DD4D0h */ case   21:  		/* lwz R11, <#[R27 + 8]> */
		/* 821DD4D0h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821DD4D0h case   21:*/		return 0x821DD4D4;
		  /* 821DD4D4h */ case   22:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DD4D4h case   22:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DD4D4h case   22:*/		return 0x821DD4D8;
		  /* 821DD4D8h */ case   23:  		/* cmplwi CR6, R11, 14336 */
		/* 821DD4D8h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821DD4D8h case   23:*/		return 0x821DD4DC;
		  /* 821DD4DCh */ case   24:  		/* bc 4, CR6_EQ, 688 */
		/* 821DD4DCh case   24:*/		if ( !regs.CR[6].eq ) { return 0x821DD78C;  }
		/* 821DD4DCh case   24:*/		return 0x821DD4E0;
		  /* 821DD4E0h */ case   25:  		/* lwz R10, <#[R27]> */
		/* 821DD4E0h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 821DD4E0h case   25:*/		return 0x821DD4E4;
		  /* 821DD4E4h */ case   26:  		/* cmplwi CR6, R10, 0 */
		/* 821DD4E4h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DD4E4h case   26:*/		return 0x821DD4E8;
		  /* 821DD4E8h */ case   27:  		/* bc 12, CR6_EQ, 20 */
		/* 821DD4E8h case   27:*/		if ( regs.CR[6].eq ) { return 0x821DD4FC;  }
		/* 821DD4E8h case   27:*/		return 0x821DD4EC;
		  /* 821DD4ECh */ case   28:  		/* lwz R11, <#[R10 + 4]> */
		/* 821DD4ECh case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821DD4ECh case   28:*/		return 0x821DD4F0;
		  /* 821DD4F0h */ case   29:  		/* cmplwi CR6, R11, 0 */
		/* 821DD4F0h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DD4F0h case   29:*/		return 0x821DD4F4;
		  /* 821DD4F4h */ case   30:  		/* mr R11, R31 */
		/* 821DD4F4h case   30:*/		regs.R11 = regs.R31;
		/* 821DD4F4h case   30:*/		return 0x821DD4F8;
		  /* 821DD4F8h */ case   31:  		/* bc 4, CR6_EQ, 8 */
		/* 821DD4F8h case   31:*/		if ( !regs.CR[6].eq ) { return 0x821DD500;  }
		/* 821DD4F8h case   31:*/		return 0x821DD4FC;
	}
	return 0x821DD4FC;
} // Block from 821DD47Ch-821DD4FCh (32 instructions)

//////////////////////////////////////////////////////
// Block at 821DD4FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD4FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD4FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD4FC);
		  /* 821DD4FCh */ case    0:  		/* li R11, 0 */
		/* 821DD4FCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DD4FCh case    0:*/		return 0x821DD500;
	}
	return 0x821DD500;
} // Block from 821DD4FCh-821DD500h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DD500h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD500( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD500) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD500);
		  /* 821DD500h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DD500h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DD500h case    0:*/		return 0x821DD504;
		  /* 821DD504h */ case    1:  		/* bc 12, CR0_EQ, 648 */
		/* 821DD504h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DD78C;  }
		/* 821DD504h case    1:*/		return 0x821DD508;
		  /* 821DD508h */ case    2:  		/* mr R9, R10 */
		/* 821DD508h case    2:*/		regs.R9 = regs.R10;
		/* 821DD508h case    2:*/		return 0x821DD50C;
		  /* 821DD50Ch */ case    3:  		/* cmplwi CR6, R9, 0 */
		/* 821DD50Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821DD50Ch case    3:*/		return 0x821DD510;
		  /* 821DD510h */ case    4:  		/* bc 12, CR6_EQ, 636 */
		/* 821DD510h case    4:*/		if ( regs.CR[6].eq ) { return 0x821DD78C;  }
		/* 821DD510h case    4:*/		return 0x821DD514;
		  /* 821DD514h */ case    5:  		/* lwz R11, <#[R9 + 12]> */
		/* 821DD514h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x0000000C) );
		/* 821DD514h case    5:*/		return 0x821DD518;
		  /* 821DD518h */ case    6:  		/* lwz R7, <#[R11 + 28]> */
		/* 821DD518h case    6:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x0000001C) );
		/* 821DD518h case    6:*/		return 0x821DD51C;
		  /* 821DD51Ch */ case    7:  		/* lwz R11, <#[R7 + 44]> */
		/* 821DD51Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x0000002C) );
		/* 821DD51Ch case    7:*/		return 0x821DD520;
		  /* 821DD520h */ case    8:  		/* cmplw CR6, R11, R22 */
		/* 821DD520h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 821DD520h case    8:*/		return 0x821DD524;
		  /* 821DD524h */ case    9:  		/* bc 4, CR6_EQ, 76 */
		/* 821DD524h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821DD570;  }
		/* 821DD524h case    9:*/		return 0x821DD528;
		  /* 821DD528h */ case   10:  		/* lwz R6, <#[R26 + 8]> */
		/* 821DD528h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R26 + 0x00000008) );
		/* 821DD528h case   10:*/		return 0x821DD52C;
		  /* 821DD52Ch */ case   11:  		/* mr R11, R6 */
		/* 821DD52Ch case   11:*/		regs.R11 = regs.R6;
		/* 821DD52Ch case   11:*/		return 0x821DD530;
		  /* 821DD530h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821DD530h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DD530h case   12:*/		return 0x821DD534;
		  /* 821DD534h */ case   13:  		/* bc 12, CR6_EQ, 68 */
		/* 821DD534h case   13:*/		if ( regs.CR[6].eq ) { return 0x821DD578;  }
		/* 821DD534h case   13:*/		return 0x821DD538;
		  /* 821DD538h */ case   14:  		/* lwz R10, <#[R7 + 48]> */
		/* 821DD538h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000030) );
		/* 821DD538h case   14:*/		return 0x821DD53C;
		  /* 821DD53Ch */ case   15:  		/* lwz R8, <#[R11 + 4]> */
		/* 821DD53Ch case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821DD53Ch case   15:*/		return 0x821DD540;
		  /* 821DD540h */ case   16:  		/* rlwinm R5, R10, 0, 13, 31 */
		/* 821DD540h case   16:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R5,regs.R10);
		/* 821DD540h case   16:*/		return 0x821DD544;
		  /* 821DD544h */ case   17:  		/* rlwinm R10, R5, 27, 5, 31 */
		/* 821DD544h case   17:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R5);
		/* 821DD544h case   17:*/		return 0x821DD548;
		  /* 821DD548h */ case   18:  		/* rlwinm R5, R5, 0, 27, 31 */
		/* 821DD548h case   18:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R5);
		/* 821DD548h case   18:*/		return 0x821DD54C;
		  /* 821DD54Ch */ case   19:  		/* addi R10, R10, 1 */
		/* 821DD54Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821DD54Ch case   19:*/		return 0x821DD550;
		  /* 821DD550h */ case   20:  		/* lwz R8, <#[R8 + 40]> */
		/* 821DD550h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000028) );
		/* 821DD550h case   20:*/		return 0x821DD554;
		  /* 821DD554h */ case   21:  		/* slw R5, R31, R5 */
		/* 821DD554h case   21:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R31,regs.R5);
		/* 821DD554h case   21:*/		return 0x821DD558;
		  /* 821DD558h */ case   22:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821DD558h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821DD558h case   22:*/		return 0x821DD55C;
		  /* 821DD55Ch */ case   23:  		/* lwzx R10, <#[R10 + R8]> */
		/* 821DD55Ch case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 821DD55Ch case   23:*/		return 0x821DD560;
		  /* 821DD560h */ case   24:  		/* and. R10, R10, R5 */
		/* 821DD560h case   24:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R5);
		/* 821DD560h case   24:*/		return 0x821DD564;
		  /* 821DD564h */ case   25:  		/* bc 4, CR0_EQ, 12 */
		/* 821DD564h case   25:*/		if ( !regs.CR[0].eq ) { return 0x821DD570;  }
		/* 821DD564h case   25:*/		return 0x821DD568;
		  /* 821DD568h */ case   26:  		/* lwz R11, <#[R11 + 12]> */
		/* 821DD568h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DD568h case   26:*/		return 0x821DD56C;
		  /* 821DD56Ch */ case   27:  		/* b -60 */
		/* 821DD56Ch case   27:*/		return 0x821DD530;
		/* 821DD56Ch case   27:*/		return 0x821DD570;
	}
	return 0x821DD570;
} // Block from 821DD500h-821DD570h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821DD570h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD570);
		  /* 821DD570h */ case    0:  		/* lwz R9, <#[R9 + 4]> */
		/* 821DD570h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821DD570h case    0:*/		return 0x821DD574;
		  /* 821DD574h */ case    1:  		/* b -104 */
		/* 821DD574h case    1:*/		return 0x821DD50C;
		/* 821DD574h case    1:*/		return 0x821DD578;
	}
	return 0x821DD578;
} // Block from 821DD570h-821DD578h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DD578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD578);
		  /* 821DD578h */ case    0:  		/* lwz R11, <#[R26 + 52]> */
		/* 821DD578h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000034) );
		/* 821DD578h case    0:*/		return 0x821DD57C;
		  /* 821DD57Ch */ case    1:  		/* mr R28, R26 */
		/* 821DD57Ch case    1:*/		regs.R28 = regs.R26;
		/* 821DD57Ch case    1:*/		return 0x821DD580;
	}
	return 0x821DD580;
} // Block from 821DD578h-821DD580h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DD580h
// Function '?SimplifyBlock@Compiler@D3DXShader@@AAA_NPAVBlock@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD580);
		  /* 821DD580h */ case    0:  		/* li R8, 0 */
		/* 821DD580h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821DD580h case    0:*/		return 0x821DD584;
		  /* 821DD584h */ case    1:  		/* b 80 */
		/* 821DD584h case    1:*/		return 0x821DD5D4;
		/* 821DD584h case    1:*/		return 0x821DD588;
		  /* 821DD588h */ case    2:  		/* mr R10, R6 */
		/* 821DD588h case    2:*/		regs.R10 = regs.R6;
		/* 821DD588h case    2:*/		return 0x821DD58C;
		  /* 821DD58Ch */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 821DD58Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DD58Ch case    3:*/		return 0x821DD590;
		  /* 821DD590h */ case    4:  		/* bc 12, CR6_EQ, 60 */
		/* 821DD590h case    4:*/		if ( regs.CR[6].eq ) { return 0x821DD5CC;  }
		/* 821DD590h case    4:*/		return 0x821DD594;
		  /* 821DD594h */ case    5:  		/* lwz R9, <#[R7 + 48]> */
		/* 821DD594h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000030) );
		/* 821DD594h case    5:*/		return 0x821DD598;
		  /* 821DD598h */ case    6:  		/* lwz R5, <#[R10 + 4]> */
		/* 821DD598h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000004) );
		/* 821DD598h case    6:*/		return 0x821DD59C;
		  /* 821DD59Ch */ case    7:  		/* rlwinm R4, R9, 0, 13, 31 */
		/* 821DD59Ch case    7:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R4,regs.R9);
		/* 821DD59Ch case    7:*/		return 0x821DD5A0;
		  /* 821DD5A0h */ case    8:  		/* rlwinm R9, R4, 27, 5, 31 */
		/* 821DD5A0h case    8:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R9,regs.R4);
		/* 821DD5A0h case    8:*/		return 0x821DD5A4;
		  /* 821DD5A4h */ case    9:  		/* rlwinm R4, R4, 0, 27, 31 */
		/* 821DD5A4h case    9:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R4);
		/* 821DD5A4h case    9:*/		return 0x821DD5A8;
		  /* 821DD5A8h */ case   10:  		/* addi R9, R9, 1 */
		/* 821DD5A8h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821DD5A8h case   10:*/		return 0x821DD5AC;
		  /* 821DD5ACh */ case   11:  		/* lwz R5, <#[R5 + 40]> */
		/* 821DD5ACh case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x00000028) );
		/* 821DD5ACh case   11:*/		return 0x821DD5B0;
		  /* 821DD5B0h */ case   12:  		/* slw R4, R31, R4 */
		/* 821DD5B0h case   12:*/		cpu::op::slw<0>(regs,&regs.R4,regs.R31,regs.R4);
		/* 821DD5B0h case   12:*/		return 0x821DD5B4;
		  /* 821DD5B4h */ case   13:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821DD5B4h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821DD5B4h case   13:*/		return 0x821DD5B8;
		  /* 821DD5B8h */ case   14:  		/* lwzx R9, <#[R9 + R5]> */
		/* 821DD5B8h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R5 + 0x00000000) );
		/* 821DD5B8h case   14:*/		return 0x821DD5BC;
		  /* 821DD5BCh */ case   15:  		/* and. R9, R9, R4 */
		/* 821DD5BCh case   15:*/		cpu::op::and<1>(regs,&regs.R9,regs.R9,regs.R4);
		/* 821DD5BCh case   15:*/		return 0x821DD5C0;
		  /* 821DD5C0h */ case   16:  		/* bc 4, CR0_EQ, 36 */
		/* 821DD5C0h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821DD5E4;  }
		/* 821DD5C0h case   16:*/		return 0x821DD5C4;
		  /* 821DD5C4h */ case   17:  		/* lwz R10, <#[R10 + 12]> */
		/* 821DD5C4h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 821DD5C4h case   17:*/		return 0x821DD5C8;
		  /* 821DD5C8h */ case   18:  		/* b -60 */
		/* 821DD5C8h case   18:*/		return 0x821DD58C;
		/* 821DD5C8h case   18:*/		return 0x821DD5CC;
	}
	return 0x821DD5CC;
} // Block from 821DD580h-821DD5CCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 821DD5CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD5CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD5CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD5CC);
		  /* 821DD5CCh */ case    0:  		/* mr R28, R11 */
		/* 821DD5CCh case    0:*/		regs.R28 = regs.R11;
		/* 821DD5CCh case    0:*/		return 0x821DD5D0;
		  /* 821DD5D0h */ case    1:  		/* lwz R11, <#[R11 + 52]> */
		/* 821DD5D0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000034) );
		/* 821DD5D0h case    1:*/		return 0x821DD5D4;
	}
	return 0x821DD5D4;
} // Block from 821DD5CCh-821DD5D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DD5D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD5D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD5D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD5D4);
		  /* 821DD5D4h */ case    0:  		/* lwz R10, <#[R11 + 44]> */
		/* 821DD5D4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000002C) );
		/* 821DD5D4h case    0:*/		return 0x821DD5D8;
		  /* 821DD5D8h */ case    1:  		/* cmplw CR6, R10, R22 */
		/* 821DD5D8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R22);
		/* 821DD5D8h case    1:*/		return 0x821DD5DC;
		  /* 821DD5DCh */ case    2:  		/* bc 4, CR6_EQ, -84 */
		/* 821DD5DCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DD588;  }
		/* 821DD5DCh case    2:*/		return 0x821DD5E0;
		  /* 821DD5E0h */ case    3:  		/* mr R8, R31 */
		/* 821DD5E0h case    3:*/		regs.R8 = regs.R31;
		/* 821DD5E0h case    3:*/		return 0x821DD5E4;
	}
	return 0x821DD5E4;
} // Block from 821DD5D4h-821DD5E4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DD5E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD5E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD5E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD5E4);
		  /* 821DD5E4h */ case    0:  		/* rlwinm. R11, R8, 0, 24, 31 */
		/* 821DD5E4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R8);
		/* 821DD5E4h case    0:*/		return 0x821DD5E8;
		  /* 821DD5E8h */ case    1:  		/* bc 12, CR0_EQ, 180 */
		/* 821DD5E8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DD69C;  }
		/* 821DD5E8h case    1:*/		return 0x821DD5EC;
		  /* 821DD5ECh */ case    2:  		/* mr R3, R23 */
		/* 821DD5ECh case    2:*/		regs.R3 = regs.R23;
		/* 821DD5ECh case    2:*/		return 0x821DD5F0;
		  /* 821DD5F0h */ case    3:  		/* bl -460472 */
		/* 821DD5F0h case    3:*/		regs.LR = 0x821DD5F4; return 0x8216CF38;
		/* 821DD5F0h case    3:*/		return 0x821DD5F4;
		  /* 821DD5F4h */ case    4:  		/* rlwinm R9, R28, 0, 0, 30 */
		/* 821DD5F4h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R28);
		/* 821DD5F4h case    4:*/		return 0x821DD5F8;
		  /* 821DD5F8h */ case    5:  		/* rlwinm R11, R3, 0, 0, 30 */
		/* 821DD5F8h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R3);
		/* 821DD5F8h case    5:*/		return 0x821DD5FC;
		  /* 821DD5FCh */ case    6:  		/* mr R30, R3 */
		/* 821DD5FCh case    6:*/		regs.R30 = regs.R3;
		/* 821DD5FCh case    6:*/		return 0x821DD600;
		  /* 821DD600h */ case    7:  		/* addi R10, R11, 4 */
		/* 821DD600h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821DD600h case    7:*/		return 0x821DD604;
		  /* 821DD604h */ case    8:  		/* addi R29, R28, 8 */
		/* 821DD604h case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R28,0x8);
		/* 821DD604h case    8:*/		return 0x821DD608;
		  /* 821DD608h */ case    9:  		/* lwz R8, <#[R9]> */
		/* 821DD608h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 821DD608h case    9:*/		return 0x821DD60C;
		  /* 821DD60Ch */ case   10:  		/* stw R8, <#[R11]> */
		/* 821DD60Ch case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821DD60Ch case   10:*/		return 0x821DD610;
		  /* 821DD610h */ case   11:  		/* lwz R8, <#[R9]> */
		/* 821DD610h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 821DD610h case   11:*/		return 0x821DD614;
		  /* 821DD614h */ case   12:  		/* rlwinm R8, R8, 0, 0, 30 */
		/* 821DD614h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R8,regs.R8);
		/* 821DD614h case   12:*/		return 0x821DD618;
		  /* 821DD618h */ case   13:  		/* stw R11, <#[R8]> */
		/* 821DD618h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821DD618h case   13:*/		return 0x821DD61C;
		  /* 821DD61Ch */ case   14:  		/* stw R9, <#[R11 + 4]> */
		/* 821DD61Ch case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821DD61Ch case   14:*/		return 0x821DD620;
		  /* 821DD620h */ case   15:  		/* stw R10, <#[R9]> */
		/* 821DD620h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 821DD620h case   15:*/		return 0x821DD624;
		  /* 821DD624h */ case   16:  		/* lwz R31, <#[R28 + 8]> */
		/* 821DD624h case   16:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000008) );
		/* 821DD624h case   16:*/		return 0x821DD628;
		  /* 821DD628h */ case   17:  		/* cmplwi CR6, R31, 0 */
		/* 821DD628h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DD628h case   17:*/		return 0x821DD62C;
		  /* 821DD62Ch */ case   18:  		/* bc 12, CR6_EQ, 72 */
		/* 821DD62Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x821DD674;  }
		/* 821DD62Ch case   18:*/		return 0x821DD630;
		  /* 821DD630h */ case   19:  		/* lwz R3, <#[R31 + 4]> */
		/* 821DD630h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 821DD630h case   19:*/		return 0x821DD634;
		  /* 821DD634h */ case   20:  		/* lwzx R11, <#[R24 + R3]> */
		/* 821DD634h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + regs.R3 + 0x00000000) );
		/* 821DD634h case   20:*/		return 0x821DD638;
		  /* 821DD638h */ case   21:  		/* srw R11, R11, R25 */
		/* 821DD638h case   21:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R25);
		/* 821DD638h case   21:*/		return 0x821DD63C;
		  /* 821DD63Ch */ case   22:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DD63Ch case   22:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DD63Ch case   22:*/		return 0x821DD640;
		  /* 821DD640h */ case   23:  		/* bc 4, CR0_EQ, 16 */
		/* 821DD640h case   23:*/		if ( !regs.CR[0].eq ) { return 0x821DD650;  }
		/* 821DD640h case   23:*/		return 0x821DD644;
		  /* 821DD644h */ case   24:  		/* lwz R11, <#[R3 + 44]> */
		/* 821DD644h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000002C) );
		/* 821DD644h case   24:*/		return 0x821DD648;
		  /* 821DD648h */ case   25:  		/* cmplw CR6, R11, R22 */
		/* 821DD648h case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 821DD648h case   25:*/		return 0x821DD64C;
		  /* 821DD64Ch */ case   26:  		/* bc 4, CR6_EQ, 16 */
		/* 821DD64Ch case   26:*/		if ( !regs.CR[6].eq ) { return 0x821DD65C;  }
		/* 821DD64Ch case   26:*/		return 0x821DD650;
	}
	return 0x821DD650;
} // Block from 821DD5E4h-821DD650h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821DD650h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD650( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD650) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD650);
		  /* 821DD650h */ case    0:  		/* mr R5, R30 */
		/* 821DD650h case    0:*/		regs.R5 = regs.R30;
		/* 821DD650h case    0:*/		return 0x821DD654;
		  /* 821DD654h */ case    1:  		/* mr R4, R31 */
		/* 821DD654h case    1:*/		regs.R4 = regs.R31;
		/* 821DD654h case    1:*/		return 0x821DD658;
		  /* 821DD658h */ case    2:  		/* bl 336592 */
		/* 821DD658h case    2:*/		regs.LR = 0x821DD65C; return 0x8222F928;
		/* 821DD658h case    2:*/		return 0x821DD65C;
	}
	return 0x821DD65C;
} // Block from 821DD650h-821DD65Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DD65Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD65C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD65C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD65C);
		  /* 821DD65Ch */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821DD65Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821DD65Ch case    0:*/		return 0x821DD660;
		  /* 821DD660h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821DD660h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821DD660h case    1:*/		return 0x821DD664;
		  /* 821DD664h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 821DD664h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DD66C;  }
		/* 821DD664h case    2:*/		return 0x821DD668;
		  /* 821DD668h */ case    3:  		/* addi R29, R31, 12 */
		/* 821DD668h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0xC);
		/* 821DD668h case    3:*/		return 0x821DD66C;
	}
	return 0x821DD66C;
} // Block from 821DD65Ch-821DD66Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DD66Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD66C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD66C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD66C);
		  /* 821DD66Ch */ case    0:  		/* lwz R31, <#[R29]> */
		/* 821DD66Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 821DD66Ch case    0:*/		return 0x821DD670;
		  /* 821DD670h */ case    1:  		/* b -72 */
		/* 821DD670h case    1:*/		return 0x821DD628;
		/* 821DD670h case    1:*/		return 0x821DD674;
	}
	return 0x821DD674;
} // Block from 821DD66Ch-821DD674h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DD674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD674);
		  /* 821DD674h */ case    0:  		/* mr R5, R23 */
		/* 821DD674h case    0:*/		regs.R5 = regs.R23;
		/* 821DD674h case    0:*/		return 0x821DD678;
		  /* 821DD678h */ case    1:  		/* mr R4, R28 */
		/* 821DD678h case    1:*/		regs.R4 = regs.R28;
		/* 821DD678h case    1:*/		return 0x821DD67C;
		  /* 821DD67Ch */ case    2:  		/* mr R3, R30 */
		/* 821DD67Ch case    2:*/		regs.R3 = regs.R30;
		/* 821DD67Ch case    2:*/		return 0x821DD680;
		  /* 821DD680h */ case    3:  		/* bl 336992 */
		/* 821DD680h case    3:*/		regs.LR = 0x821DD684; return 0x8222FAE0;
		/* 821DD680h case    3:*/		return 0x821DD684;
		  /* 821DD684h */ case    4:  		/* lwz R11, <#[R28 + 76]> */
		/* 821DD684h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000004C) );
		/* 821DD684h case    4:*/		return 0x821DD688;
		  /* 821DD688h */ case    5:  		/* lwz R10, <#[R30 + 76]> */
		/* 821DD688h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000004C) );
		/* 821DD688h case    5:*/		return 0x821DD68C;
		  /* 821DD68Ch */ case    6:  		/* li R31, 1 */
		/* 821DD68Ch case    6:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 821DD68Ch case    6:*/		return 0x821DD690;
		  /* 821DD690h */ case    7:  		/* mr R28, R30 */
		/* 821DD690h case    7:*/		regs.R28 = regs.R30;
		/* 821DD690h case    7:*/		return 0x821DD694;
		  /* 821DD694h */ case    8:  		/* rlwimi R11, R10, 0, 0, 12 */
		/* 821DD694h case    8:*/		cpu::op::rlwimi<0,0,0,12>(regs,&regs.R11,regs.R10);
		/* 821DD694h case    8:*/		return 0x821DD698;
		  /* 821DD698h */ case    9:  		/* stw R11, <#[R30 + 76]> */
		/* 821DD698h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000004C) );
		/* 821DD698h case    9:*/		return 0x821DD69C;
	}
	return 0x821DD69C;
} // Block from 821DD674h-821DD69Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DD69Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD69C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD69C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD69C);
		  /* 821DD69Ch */ case    0:  		/* mr R3, R23 */
		/* 821DD69Ch case    0:*/		regs.R3 = regs.R23;
		/* 821DD69Ch case    0:*/		return 0x821DD6A0;
		  /* 821DD6A0h */ case    1:  		/* bl 56448 */
		/* 821DD6A0h case    1:*/		regs.LR = 0x821DD6A4; return 0x821EB320;
		/* 821DD6A0h case    1:*/		return 0x821DD6A4;
		  /* 821DD6A4h */ case    2:  		/* mr R4, R28 */
		/* 821DD6A4h case    2:*/		regs.R4 = regs.R28;
		/* 821DD6A4h case    2:*/		return 0x821DD6A8;
		  /* 821DD6A8h */ case    3:  		/* mr R3, R23 */
		/* 821DD6A8h case    3:*/		regs.R3 = regs.R23;
		/* 821DD6A8h case    3:*/		return 0x821DD6AC;
		  /* 821DD6ACh */ case    4:  		/* bl 291732 */
		/* 821DD6ACh case    4:*/		regs.LR = 0x821DD6B0; return 0x82224A40;
		/* 821DD6ACh case    4:*/		return 0x821DD6B0;
		  /* 821DD6B0h */ case    5:  		/* mr R4, R3 */
		/* 821DD6B0h case    5:*/		regs.R4 = regs.R3;
		/* 821DD6B0h case    5:*/		return 0x821DD6B4;
		  /* 821DD6B4h */ case    6:  		/* mr R7, R27 */
		/* 821DD6B4h case    6:*/		regs.R7 = regs.R27;
		/* 821DD6B4h case    6:*/		return 0x821DD6B8;
		  /* 821DD6B8h */ case    7:  		/* lwz R11, <#[R7]> */
		/* 821DD6B8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 821DD6B8h case    7:*/		return 0x821DD6BC;
		  /* 821DD6BCh */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821DD6BCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DD6BCh case    8:*/		return 0x821DD6C0;
		  /* 821DD6C0h */ case    9:  		/* bc 12, CR6_EQ, 180 */
		/* 821DD6C0h case    9:*/		if ( regs.CR[6].eq ) { return 0x821DD774;  }
		/* 821DD6C0h case    9:*/		return 0x821DD6C4;
		  /* 821DD6C4h */ case   10:  		/* lwz R10, <#[R11 + 12]> */
		/* 821DD6C4h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DD6C4h case   10:*/		return 0x821DD6C8;
		  /* 821DD6C8h */ case   11:  		/* lwz R10, <#[R10 + 28]> */
		/* 821DD6C8h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000001C) );
		/* 821DD6C8h case   11:*/		return 0x821DD6CC;
		  /* 821DD6CCh */ case   12:  		/* lwzx R9, <#[R24 + R10]> */
		/* 821DD6CCh case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R24 + regs.R10 + 0x00000000) );
		/* 821DD6CCh case   12:*/		return 0x821DD6D0;
		  /* 821DD6D0h */ case   13:  		/* srw R9, R9, R25 */
		/* 821DD6D0h case   13:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R9,regs.R25);
		/* 821DD6D0h case   13:*/		return 0x821DD6D4;
		  /* 821DD6D4h */ case   14:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 821DD6D4h case   14:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 821DD6D4h case   14:*/		return 0x821DD6D8;
		  /* 821DD6D8h */ case   15:  		/* bc 4, CR0_EQ, 16 */
		/* 821DD6D8h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821DD6E8;  }
		/* 821DD6D8h case   15:*/		return 0x821DD6DC;
		  /* 821DD6DCh */ case   16:  		/* lwz R9, <#[R10 + 44]> */
		/* 821DD6DCh case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000002C) );
		/* 821DD6DCh case   16:*/		return 0x821DD6E0;
		  /* 821DD6E0h */ case   17:  		/* cmplw CR6, R9, R22 */
		/* 821DD6E0h case   17:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R22);
		/* 821DD6E0h case   17:*/		return 0x821DD6E4;
		  /* 821DD6E4h */ case   18:  		/* bc 4, CR6_EQ, 124 */
		/* 821DD6E4h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821DD760;  }
		/* 821DD6E4h case   18:*/		return 0x821DD6E8;
	}
	return 0x821DD6E8;
} // Block from 821DD69Ch-821DD6E8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821DD6E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD6E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD6E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD6E8);
		  /* 821DD6E8h */ case    0:  		/* lwz R9, <#[R28 + 8]> */
		/* 821DD6E8h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000008) );
		/* 821DD6E8h case    0:*/		return 0x821DD6EC;
		  /* 821DD6ECh */ case    1:  		/* cmplwi CR6, R9, 0 */
		/* 821DD6ECh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821DD6ECh case    1:*/		return 0x821DD6F0;
		  /* 821DD6F0h */ case    2:  		/* bc 12, CR6_EQ, 112 */
		/* 821DD6F0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DD760;  }
		/* 821DD6F0h case    2:*/		return 0x821DD6F4;
		  /* 821DD6F4h */ case    3:  		/* lwz R8, <#[R10 + 48]> */
		/* 821DD6F4h case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000030) );
		/* 821DD6F4h case    3:*/		return 0x821DD6F8;
		  /* 821DD6F8h */ case    4:  		/* lwz R6, <#[R9 + 4]> */
		/* 821DD6F8h case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + 0x00000004) );
		/* 821DD6F8h case    4:*/		return 0x821DD6FC;
		  /* 821DD6FCh */ case    5:  		/* rlwinm R5, R8, 0, 13, 31 */
		/* 821DD6FCh case    5:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R5,regs.R8);
		/* 821DD6FCh case    5:*/		return 0x821DD700;
		  /* 821DD700h */ case    6:  		/* rlwinm R8, R5, 27, 5, 31 */
		/* 821DD700h case    6:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R8,regs.R5);
		/* 821DD700h case    6:*/		return 0x821DD704;
		  /* 821DD704h */ case    7:  		/* rlwinm R5, R5, 0, 27, 31 */
		/* 821DD704h case    7:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R5);
		/* 821DD704h case    7:*/		return 0x821DD708;
		  /* 821DD708h */ case    8:  		/* addi R8, R8, 1 */
		/* 821DD708h case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821DD708h case    8:*/		return 0x821DD70C;
		  /* 821DD70Ch */ case    9:  		/* lwz R6, <#[R6 + 40]> */
		/* 821DD70Ch case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000028) );
		/* 821DD70Ch case    9:*/		return 0x821DD710;
		  /* 821DD710h */ case   10:  		/* slw R5, R31, R5 */
		/* 821DD710h case   10:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R31,regs.R5);
		/* 821DD710h case   10:*/		return 0x821DD714;
		  /* 821DD714h */ case   11:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 821DD714h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 821DD714h case   11:*/		return 0x821DD718;
		  /* 821DD718h */ case   12:  		/* lwzx R8, <#[R8 + R6]> */
		/* 821DD718h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R6 + 0x00000000) );
		/* 821DD718h case   12:*/		return 0x821DD71C;
		  /* 821DD71Ch */ case   13:  		/* and. R8, R8, R5 */
		/* 821DD71Ch case   13:*/		cpu::op::and<1>(regs,&regs.R8,regs.R8,regs.R5);
		/* 821DD71Ch case   13:*/		return 0x821DD720;
		  /* 821DD720h */ case   14:  		/* bc 4, CR0_EQ, 12 */
		/* 821DD720h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821DD72C;  }
		/* 821DD720h case   14:*/		return 0x821DD724;
		  /* 821DD724h */ case   15:  		/* lwz R9, <#[R9 + 12]> */
		/* 821DD724h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000000C) );
		/* 821DD724h case   15:*/		return 0x821DD728;
		  /* 821DD728h */ case   16:  		/* b -60 */
		/* 821DD728h case   16:*/		return 0x821DD6EC;
		/* 821DD728h case   16:*/		return 0x821DD72C;
	}
	return 0x821DD72C;
} // Block from 821DD6E8h-821DD72Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 821DD72Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD72C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD72C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD72C);
		  /* 821DD72Ch */ case    0:  		/* lwz R10, <#[R11 + 16]> */
		/* 821DD72Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821DD72Ch case    0:*/		return 0x821DD730;
		  /* 821DD730h */ case    1:  		/* lwz R9, <#[R10]> */
		/* 821DD730h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DD730h case    1:*/		return 0x821DD734;
		  /* 821DD734h */ case    2:  		/* b 12 */
		/* 821DD734h case    2:*/		return 0x821DD740;
		/* 821DD734h case    2:*/		return 0x821DD738;
		  /* 821DD738h */ case    3:  		/* addi R10, R9, 4 */
		/* 821DD738h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x4);
		/* 821DD738h case    3:*/		return 0x821DD73C;
		  /* 821DD73Ch */ case    4:  		/* lwz R9, <#[R9 + 4]> */
		/* 821DD73Ch case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821DD73Ch case    4:*/		return 0x821DD740;
	}
	return 0x821DD740;
} // Block from 821DD72Ch-821DD740h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DD740h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD740( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD740) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD740);
		  /* 821DD740h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821DD740h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821DD740h case    0:*/		return 0x821DD744;
		  /* 821DD744h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821DD744h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DD738;  }
		/* 821DD744h case    1:*/		return 0x821DD748;
		  /* 821DD748h */ case    2:  		/* lwz R9, <#[R11 + 4]> */
		/* 821DD748h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821DD748h case    2:*/		return 0x821DD74C;
		  /* 821DD74Ch */ case    3:  		/* stw R9, <#[R10]> */
		/* 821DD74Ch case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DD74Ch case    3:*/		return 0x821DD750;
		  /* 821DD750h */ case    4:  		/* lwz R10, <#[R4]> */
		/* 821DD750h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 821DD750h case    4:*/		return 0x821DD754;
		  /* 821DD754h */ case    5:  		/* stw R10, <#[R11 + 4]> */
		/* 821DD754h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DD754h case    5:*/		return 0x821DD758;
		  /* 821DD758h */ case    6:  		/* stw R11, <#[R4]> */
		/* 821DD758h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 821DD758h case    6:*/		return 0x821DD75C;
		  /* 821DD75Ch */ case    7:  		/* stw R4, <#[R11 + 16]> */
		/* 821DD75Ch case    7:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000010) );
		/* 821DD75Ch case    7:*/		return 0x821DD760;
	}
	return 0x821DD760;
} // Block from 821DD740h-821DD760h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821DD760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD760);
		  /* 821DD760h */ case    0:  		/* lwz R10, <#[R7]> */
		/* 821DD760h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000000) );
		/* 821DD760h case    0:*/		return 0x821DD764;
		  /* 821DD764h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821DD764h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821DD764h case    1:*/		return 0x821DD768;
		  /* 821DD768h */ case    2:  		/* bc 4, CR6_EQ, -176 */
		/* 821DD768h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DD6B8;  }
		/* 821DD768h case    2:*/		return 0x821DD76C;
		  /* 821DD76Ch */ case    3:  		/* addi R7, R11, 4 */
		/* 821DD76Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x4);
		/* 821DD76Ch case    3:*/		return 0x821DD770;
		  /* 821DD770h */ case    4:  		/* b -184 */
		/* 821DD770h case    4:*/		return 0x821DD6B8;
		/* 821DD770h case    4:*/		return 0x821DD774;
	}
	return 0x821DD774;
} // Block from 821DD760h-821DD774h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DD774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD774);
		  /* 821DD774h */ case    0:  		/* mr R3, R23 */
		/* 821DD774h case    0:*/		regs.R3 = regs.R23;
		/* 821DD774h case    0:*/		return 0x821DD778;
		  /* 821DD778h */ case    1:  		/* bl -415608 */
		/* 821DD778h case    1:*/		regs.LR = 0x821DD77C; return 0x82178000;
		/* 821DD778h case    1:*/		return 0x821DD77C;
		  /* 821DD77Ch */ case    2:  		/* mr R4, R3 */
		/* 821DD77Ch case    2:*/		regs.R4 = regs.R3;
		/* 821DD77Ch case    2:*/		return 0x821DD780;
		  /* 821DD780h */ case    3:  		/* mr R3, R27 */
		/* 821DD780h case    3:*/		regs.R3 = regs.R27;
		/* 821DD780h case    3:*/		return 0x821DD784;
		  /* 821DD784h */ case    4:  		/* bl -415164 */
		/* 821DD784h case    4:*/		regs.LR = 0x821DD788; return 0x821781C8;
		/* 821DD784h case    4:*/		return 0x821DD788;
		  /* 821DD788h */ case    5:  		/* b -680 */
		/* 821DD788h case    5:*/		return 0x821DD4E0;
		/* 821DD788h case    5:*/		return 0x821DD78C;
	}
	return 0x821DD78C;
} // Block from 821DD774h-821DD78Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DD78Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD78C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD78C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD78C);
		  /* 821DD78Ch */ case    0:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 821DD78Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 821DD78Ch case    0:*/		return 0x821DD790;
		  /* 821DD790h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DD790h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DD790h case    1:*/		return 0x821DD794;
		  /* 821DD794h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DD794h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DD794h case    2:*/		return 0x821DD798;
		  /* 821DD798h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DD798h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DD7A8;  }
		/* 821DD798h case    3:*/		return 0x821DD79C;
		  /* 821DD79Ch */ case    4:  		/* mr R27, R11 */
		/* 821DD79Ch case    4:*/		regs.R27 = regs.R11;
		/* 821DD79Ch case    4:*/		return 0x821DD7A0;
		  /* 821DD7A0h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DD7A0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DD7A0h case    5:*/		return 0x821DD7A4;
		  /* 821DD7A4h */ case    6:  		/* bc 4, CR6_EQ, -724 */
		/* 821DD7A4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DD4D0;  }
		/* 821DD7A4h case    6:*/		return 0x821DD7A8;
	}
	return 0x821DD7A8;
} // Block from 821DD78Ch-821DD7A8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DD7A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD7A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD7A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD7A8);
		  /* 821DD7A8h */ case    0:  		/* rlwinm R11, R26, 0, 0, 30 */
		/* 821DD7A8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R26);
		/* 821DD7A8h case    0:*/		return 0x821DD7AC;
		  /* 821DD7ACh */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DD7ACh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DD7ACh case    1:*/		return 0x821DD7B0;
		  /* 821DD7B0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DD7B0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DD7B0h case    2:*/		return 0x821DD7B4;
		  /* 821DD7B4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DD7B4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DD7C4;  }
		/* 821DD7B4h case    3:*/		return 0x821DD7B8;
		  /* 821DD7B8h */ case    4:  		/* mr R26, R11 */
		/* 821DD7B8h case    4:*/		regs.R26 = regs.R11;
		/* 821DD7B8h case    4:*/		return 0x821DD7BC;
		  /* 821DD7BCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DD7BCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DD7BCh case    5:*/		return 0x821DD7C0;
		  /* 821DD7C0h */ case    6:  		/* bc 4, CR6_EQ, -792 */
		/* 821DD7C0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DD4A8;  }
		/* 821DD7C0h case    6:*/		return 0x821DD7C4;
	}
	return 0x821DD7C4;
} // Block from 821DD7A8h-821DD7C4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DD7C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD7C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD7C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD7C4);
		  /* 821DD7C4h */ case    0:  		/* li R30, 0 */
		/* 821DD7C4h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821DD7C4h case    0:*/		return 0x821DD7C8;
		  /* 821DD7C8h */ case    1:  		/* li R6, 0 */
		/* 821DD7C8h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821DD7C8h case    1:*/		return 0x821DD7CC;
		  /* 821DD7CCh */ case    2:  		/* stb R30, <#[R1 + 80]> */
		/* 821DD7CCh case    2:*/		cpu::mem::store8( regs, regs.R30, (uint32)(regs.R1 + 0x00000050) );
		/* 821DD7CCh case    2:*/		return 0x821DD7D0;
		  /* 821DD7D0h */ case    3:  		/* addi R5, R1, 80 */
		/* 821DD7D0h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821DD7D0h case    3:*/		return 0x821DD7D4;
		  /* 821DD7D4h */ case    4:  		/* mr R4, R22 */
		/* 821DD7D4h case    4:*/		regs.R4 = regs.R22;
		/* 821DD7D4h case    4:*/		return 0x821DD7D8;
		  /* 821DD7D8h */ case    5:  		/* mr R3, R23 */
		/* 821DD7D8h case    5:*/		regs.R3 = regs.R23;
		/* 821DD7D8h case    5:*/		return 0x821DD7DC;
		  /* 821DD7DCh */ case    6:  		/* bl -97188 */
		/* 821DD7DCh case    6:*/		regs.LR = 0x821DD7E0; return 0x821C5C38;
		/* 821DD7DCh case    6:*/		return 0x821DD7E0;
		  /* 821DD7E0h */ case    7:  		/* cmplwi CR6, R20, 2000 */
		/* 821DD7E0h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x000007D0);
		/* 821DD7E0h case    7:*/		return 0x821DD7E4;
		  /* 821DD7E4h */ case    8:  		/* bc 4, CR6_GT, 652 */
		/* 821DD7E4h case    8:*/		if ( !regs.CR[6].gt ) { return 0x821DDA70;  }
		/* 821DD7E4h case    8:*/		return 0x821DD7E8;
		  /* 821DD7E8h */ case    9:  		/* mr R3, R23 */
		/* 821DD7E8h case    9:*/		regs.R3 = regs.R23;
		/* 821DD7E8h case    9:*/		return 0x821DD7EC;
		  /* 821DD7ECh */ case   10:  		/* bl -79540 */
		/* 821DD7ECh case   10:*/		regs.LR = 0x821DD7F0; return 0x821CA138;
		/* 821DD7ECh case   10:*/		return 0x821DD7F0;
		  /* 821DD7F0h */ case   11:  		/* rlwinm R31, R19, 0, 24, 31 */
		/* 821DD7F0h case   11:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R31,regs.R19);
		/* 821DD7F0h case   11:*/		return 0x821DD7F4;
		  /* 821DD7F4h */ case   12:  		/* mr R3, R23 */
		/* 821DD7F4h case   12:*/		regs.R3 = regs.R23;
		/* 821DD7F4h case   12:*/		return 0x821DD7F8;
		  /* 821DD7F8h */ case   13:  		/* cntlzw R11, R31 */
		/* 821DD7F8h case   13:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R31);
		/* 821DD7F8h case   13:*/		return 0x821DD7FC;
		  /* 821DD7FCh */ case   14:  		/* rlwinm R4, R11, 27, 31, 31 */
		/* 821DD7FCh case   14:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R4,regs.R11);
		/* 821DD7FCh case   14:*/		return 0x821DD800;
		  /* 821DD800h */ case   15:  		/* bl -16264 */
		/* 821DD800h case   15:*/		regs.LR = 0x821DD804; return 0x821D9878;
		/* 821DD800h case   15:*/		return 0x821DD804;
		  /* 821DD804h */ case   16:  		/* addi R3, R1, 112 */
		/* 821DD804h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 821DD804h case   16:*/		return 0x821DD808;
		  /* 821DD808h */ case   17:  		/* lwz R4, <#[R1 + 84]> */
		/* 821DD808h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000054) );
		/* 821DD808h case   17:*/		return 0x821DD80C;
		  /* 821DD80Ch */ case   18:  		/* bl -252380 */
		/* 821DD80Ch case   18:*/		regs.LR = 0x821DD810; return 0x8219FE30;
		/* 821DD80Ch case   18:*/		return 0x821DD810;
		  /* 821DD810h */ case   19:  		/* lbz R26, <#[R1 + 80]> */
		/* 821DD810h case   19:*/		cpu::mem::load8z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000050) );
		/* 821DD810h case   19:*/		return 0x821DD814;
		  /* 821DD814h */ case   20:  		/* lwz R11, <#[R1 + 120]> */
		/* 821DD814h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 821DD814h case   20:*/		return 0x821DD818;
		  /* 821DD818h */ case   21:  		/* lwz R10, <#[R1 + 112]> */
		/* 821DD818h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 821DD818h case   21:*/		return 0x821DD81C;
		  /* 821DD81Ch */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 821DD81Ch case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DD81Ch case   22:*/		return 0x821DD820;
		  /* 821DD820h */ case   23:  		/* bc 4, CR6_EQ, 40 */
		/* 821DD820h case   23:*/		if ( !regs.CR[6].eq ) { return 0x821DD848;  }
		/* 821DD820h case   23:*/		return 0x821DD824;
		  /* 821DD824h */ case   24:  		/* lwz R11, <#[R10 + 4]> */
		/* 821DD824h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821DD824h case   24:*/		return 0x821DD828;
		  /* 821DD828h */ case   25:  		/* lwz R9, <#[R1 + 116]> */
		/* 821DD828h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000074) );
		/* 821DD828h case   25:*/		return 0x821DD82C;
		  /* 821DD82Ch */ case   26:  		/* rlwinm R8, R11, 0, 31, 31 */
		/* 821DD82Ch case   26:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R8,regs.R11);
		/* 821DD82Ch case   26:*/		return 0x821DD830;
		  /* 821DD830h */ case   27:  		/* addic R8, R8, -1 */
		/* 821DD830h case   27:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 821DD830h case   27:*/		return 0x821DD834;
		  /* 821DD834h */ case   28:  		/* subfe R8, R8, R8 */
		/* 821DD834h case   28:*/		cpu::op::subfe<0>(regs,&regs.R8,regs.R8,regs.R8);
		/* 821DD834h case   28:*/		return 0x821DD838;
		  /* 821DD838h */ case   29:  		/* and R11, R8, R11 */
		/* 821DD838h case   29:*/		cpu::op::and<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 821DD838h case   29:*/		return 0x821DD83C;
		  /* 821DD83Ch */ case   30:  		/* cmplw CR6, R9, R11 */
		/* 821DD83Ch case   30:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821DD83Ch case   30:*/		return 0x821DD840;
		  /* 821DD840h */ case   31:  		/* li R11, 1 */
		/* 821DD840h case   31:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821DD840h case   31:*/		return 0x821DD844;
		  /* 821DD844h */ case   32:  		/* bc 12, CR6_EQ, 8 */
		/* 821DD844h case   32:*/		if ( regs.CR[6].eq ) { return 0x821DD84C;  }
		/* 821DD844h case   32:*/		return 0x821DD848;
	}
	return 0x821DD848;
} // Block from 821DD7C4h-821DD848h (33 instructions)

//////////////////////////////////////////////////////
// Block at 821DD848h
// Function '?ForceExpressionOptimizations@Compiler@D3DXShader@@AAAXPAVBlock@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD848);
		  /* 821DD848h */ case    0:  		/* mr R11, R30 */
		/* 821DD848h case    0:*/		regs.R11 = regs.R30;
		/* 821DD848h case    0:*/		return 0x821DD84C;
	}
	return 0x821DD84C;
} // Block from 821DD848h-821DD84Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DD84Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD84C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD84C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD84C);
		  /* 821DD84Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DD84Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DD84Ch case    0:*/		return 0x821DD850;
		  /* 821DD850h */ case    1:  		/* bc 4, CR0_EQ, 96 */
		/* 821DD850h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821DD8B0;  }
		/* 821DD850h case    1:*/		return 0x821DD854;
		  /* 821DD854h */ case    2:  		/* addi R3, R1, 112 */
		/* 821DD854h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 821DD854h case    2:*/		return 0x821DD858;
		  /* 821DD858h */ case    3:  		/* bl -256608 */
		/* 821DD858h case    3:*/		regs.LR = 0x821DD85C; return 0x8219EDF8;
		/* 821DD858h case    3:*/		return 0x821DD85C;
		  /* 821DD85Ch */ case    4:  		/* lwz R4, <#[R3]> */
		/* 821DD85Ch case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000000) );
		/* 821DD85Ch case    4:*/		return 0x821DD860;
		  /* 821DD860h */ case    5:  		/* lwz R11, <#[R4 + 48]> */
		/* 821DD860h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000030) );
		/* 821DD860h case    5:*/		return 0x821DD864;
		  /* 821DD864h */ case    6:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 821DD864h case    6:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 821DD864h case    6:*/		return 0x821DD868;
		  /* 821DD868h */ case    7:  		/* bc 12, CR0_EQ, 48 */
		/* 821DD868h case    7:*/		if ( regs.CR[0].eq ) { return 0x821DD898;  }
		/* 821DD868h case    7:*/		return 0x821DD86C;
		  /* 821DD86Ch */ case    8:  		/* lwz R11, <#[R4 + 80]> */
		/* 821DD86Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000050) );
		/* 821DD86Ch case    8:*/		return 0x821DD870;
		  /* 821DD870h */ case    9:  		/* b 20 */
		/* 821DD870h case    9:*/		return 0x821DD884;
		/* 821DD870h case    9:*/		return 0x821DD874;
		  /* 821DD874h */ case   10:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DD874h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DD874h case   10:*/		return 0x821DD878;
		  /* 821DD878h */ case   11:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 821DD878h case   11:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 821DD878h case   11:*/		return 0x821DD87C;
		  /* 821DD87Ch */ case   12:  		/* bc 12, CR0_EQ, 16 */
		/* 821DD87Ch case   12:*/		if ( regs.CR[0].eq ) { return 0x821DD88C;  }
		/* 821DD87Ch case   12:*/		return 0x821DD880;
		  /* 821DD880h */ case   13:  		/* lwz R11, <#[R11 + 80]> */
		/* 821DD880h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821DD880h case   13:*/		return 0x821DD884;
	}
	return 0x821DD884;
} // Block from 821DD84Ch-821DD884h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821DD884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD884);
		  /* 821DD884h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821DD884h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DD884h case    0:*/		return 0x821DD888;
		  /* 821DD888h */ case    1:  		/* bc 4, CR6_EQ, -20 */
		/* 821DD888h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DD874;  }
		/* 821DD888h case    1:*/		return 0x821DD88C;
	}
	return 0x821DD88C;
} // Block from 821DD884h-821DD88Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DD88Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD88C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD88C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD88C);
		  /* 821DD88Ch */ case    0:  		/* mr R4, R11 */
		/* 821DD88Ch case    0:*/		regs.R4 = regs.R11;
		/* 821DD88Ch case    0:*/		return 0x821DD890;
		  /* 821DD890h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DD890h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DD890h case    1:*/		return 0x821DD894;
		  /* 821DD894h */ case    2:  		/* bc 12, CR6_EQ, -128 */
		/* 821DD894h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DD814;  }
		/* 821DD894h case    2:*/		return 0x821DD898;
	}
	return 0x821DD898;
} // Block from 821DD88Ch-821DD898h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DD898h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD898);
		  /* 821DD898h */ case    0:  		/* mr R3, R23 */
		/* 821DD898h case    0:*/		regs.R3 = regs.R23;
		/* 821DD898h case    0:*/		return 0x821DD89C;
		  /* 821DD89Ch */ case    1:  		/* bl -3572 */
		/* 821DD89Ch case    1:*/		regs.LR = 0x821DD8A0; return 0x821DCAA8;
		/* 821DD89Ch case    1:*/		return 0x821DD8A0;
	}
	return 0x821DD8A0;
} // Block from 821DD898h-821DD8A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DD8A0h
// Function '?UnrollLoop@Compiler@D3DXShader@@AAA_NPAULoop@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD8A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD8A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD8A0);
		  /* 821DD8A0h */ case    0:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 821DD8A0h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821DD8A0h case    0:*/		return 0x821DD8A4;
		  /* 821DD8A4h */ case    1:  		/* rlwinm R10, R26, 0, 24, 31 */
		/* 821DD8A4h case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R26);
		/* 821DD8A4h case    1:*/		return 0x821DD8A8;
		  /* 821DD8A8h */ case    2:  		/* or R26, R11, R10 */
		/* 821DD8A8h case    2:*/		cpu::op::or<0>(regs,&regs.R26,regs.R11,regs.R10);
		/* 821DD8A8h case    2:*/		return 0x821DD8AC;
		  /* 821DD8ACh */ case    3:  		/* b -152 */
		/* 821DD8ACh case    3:*/		return 0x821DD814;
		/* 821DD8ACh case    3:*/		return 0x821DD8B0;
	}
	return 0x821DD8B0;
} // Block from 821DD8A0h-821DD8B0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DD8B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD8B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD8B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD8B0);
		  /* 821DD8B0h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821DD8B0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DD8B0h case    0:*/		return 0x821DD8B4;
		  /* 821DD8B4h */ case    1:  		/* bc 12, CR6_EQ, 428 */
		/* 821DD8B4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821DDA60;  }
		/* 821DD8B4h case    1:*/		return 0x821DD8B8;
		  /* 821DD8B8h */ case    2:  		/* lwz R11, <#[R10 + 4]> */
		/* 821DD8B8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821DD8B8h case    2:*/		return 0x821DD8BC;
		  /* 821DD8BCh */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DD8BCh case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DD8BCh case    3:*/		return 0x821DD8C0;
		  /* 821DD8C0h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 821DD8C0h case    4:*/		if ( regs.CR[0].eq ) { return 0x821DD8CC;  }
		/* 821DD8C0h case    4:*/		return 0x821DD8C4;
		  /* 821DD8C4h */ case    5:  		/* mr R11, R30 */
		/* 821DD8C4h case    5:*/		regs.R11 = regs.R30;
		/* 821DD8C4h case    5:*/		return 0x821DD8C8;
		  /* 821DD8C8h */ case    6:  		/* b 16 */
		/* 821DD8C8h case    6:*/		return 0x821DD8D8;
		/* 821DD8C8h case    6:*/		return 0x821DD8CC;
	}
	return 0x821DD8CC;
} // Block from 821DD8B0h-821DD8CCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DD8CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD8CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD8CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD8CC);
		  /* 821DD8CCh */ case    0:  		/* lwz R11, <#[R10]> */
		/* 821DD8CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821DD8CCh case    0:*/		return 0x821DD8D0;
		  /* 821DD8D0h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DD8D0h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DD8D0h case    1:*/		return 0x821DD8D4;
		  /* 821DD8D4h */ case    2:  		/* addi R11, R11, -4 */
		/* 821DD8D4h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821DD8D4h case    2:*/		return 0x821DD8D8;
	}
	return 0x821DD8D8;
} // Block from 821DD8CCh-821DD8D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DD8D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD8D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD8D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD8D8);
		  /* 821DD8D8h */ case    0:  		/* stw R11, <#[R1 + 116]> */
		/* 821DD8D8h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 821DD8D8h case    0:*/		return 0x821DD8DC;
		  /* 821DD8DCh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DD8DCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DD8DCh case    1:*/		return 0x821DD8E0;
		  /* 821DD8E0h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 821DD8E0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DD8F0;  }
		/* 821DD8E0h case    2:*/		return 0x821DD8E4;
		  /* 821DD8E4h */ case    3:  		/* lwz R11, <#[R11 + 8]> */
		/* 821DD8E4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821DD8E4h case    3:*/		return 0x821DD8E8;
		  /* 821DD8E8h */ case    4:  		/* stw R11, <#[R1 + 120]> */
		/* 821DD8E8h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 821DD8E8h case    4:*/		return 0x821DD8EC;
		  /* 821DD8ECh */ case    5:  		/* b 16 */
		/* 821DD8ECh case    5:*/		return 0x821DD8FC;
		/* 821DD8ECh case    5:*/		return 0x821DD8F0;
	}
	return 0x821DD8F0;
} // Block from 821DD8D8h-821DD8F0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DD8F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD8F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD8F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD8F0);
		  /* 821DD8F0h */ case    0:  		/* stw R30, <#[R1 + 120]> */
		/* 821DD8F0h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000078) );
		/* 821DD8F0h case    0:*/		return 0x821DD8F4;
		  /* 821DD8F4h */ case    1:  		/* b 8 */
		/* 821DD8F4h case    1:*/		return 0x821DD8FC;
		/* 821DD8F4h case    1:*/		return 0x821DD8F8;
		  /* 821DD8F8h */ case    2:  		/* lwz R10, <#[R1 + 112]> */
		/* 821DD8F8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000070) );
		/* 821DD8F8h case    2:*/		return 0x821DD8FC;
	}
	return 0x821DD8FC;
} // Block from 821DD8F0h-821DD8FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DD8FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD8FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD8FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD8FC);
		  /* 821DD8FCh */ case    0:  		/* lwz R11, <#[R1 + 120]> */
		/* 821DD8FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 821DD8FCh case    0:*/		return 0x821DD900;
		  /* 821DD900h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DD900h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DD900h case    1:*/		return 0x821DD904;
		  /* 821DD904h */ case    2:  		/* bc 4, CR6_EQ, 40 */
		/* 821DD904h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DD92C;  }
		/* 821DD904h case    2:*/		return 0x821DD908;
		  /* 821DD908h */ case    3:  		/* lwz R11, <#[R10 + 4]> */
		/* 821DD908h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821DD908h case    3:*/		return 0x821DD90C;
		  /* 821DD90Ch */ case    4:  		/* lwz R10, <#[R1 + 116]> */
		/* 821DD90Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000074) );
		/* 821DD90Ch case    4:*/		return 0x821DD910;
		  /* 821DD910h */ case    5:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821DD910h case    5:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821DD910h case    5:*/		return 0x821DD914;
		  /* 821DD914h */ case    6:  		/* addic R9, R9, -1 */
		/* 821DD914h case    6:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821DD914h case    6:*/		return 0x821DD918;
		  /* 821DD918h */ case    7:  		/* subfe R9, R9, R9 */
		/* 821DD918h case    7:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821DD918h case    7:*/		return 0x821DD91C;
		  /* 821DD91Ch */ case    8:  		/* and R11, R9, R11 */
		/* 821DD91Ch case    8:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821DD91Ch case    8:*/		return 0x821DD920;
		  /* 821DD920h */ case    9:  		/* cmplw CR6, R10, R11 */
		/* 821DD920h case    9:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821DD920h case    9:*/		return 0x821DD924;
		  /* 821DD924h */ case   10:  		/* li R11, 1 */
		/* 821DD924h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821DD924h case   10:*/		return 0x821DD928;
		  /* 821DD928h */ case   11:  		/* bc 12, CR6_EQ, 8 */
		/* 821DD928h case   11:*/		if ( regs.CR[6].eq ) { return 0x821DD930;  }
		/* 821DD928h case   11:*/		return 0x821DD92C;
	}
	return 0x821DD92C;
} // Block from 821DD8FCh-821DD92Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821DD92Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD92C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD92C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD92C);
		  /* 821DD92Ch */ case    0:  		/* li R11, 0 */
		/* 821DD92Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DD92Ch case    0:*/		return 0x821DD930;
	}
	return 0x821DD930;
} // Block from 821DD92Ch-821DD930h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DD930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD930);
		  /* 821DD930h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DD930h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DD930h case    0:*/		return 0x821DD934;
		  /* 821DD934h */ case    1:  		/* bc 4, CR0_EQ, 284 */
		/* 821DD934h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821DDA50;  }
		/* 821DD934h case    1:*/		return 0x821DD938;
		  /* 821DD938h */ case    2:  		/* addi R3, R1, 112 */
		/* 821DD938h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 821DD938h case    2:*/		return 0x821DD93C;
		  /* 821DD93Ch */ case    3:  		/* bl -256836 */
		/* 821DD93Ch case    3:*/		regs.LR = 0x821DD940; return 0x8219EDF8;
		/* 821DD93Ch case    3:*/		return 0x821DD940;
		  /* 821DD940h */ case    4:  		/* lwz R28, <#[R3]> */
		/* 821DD940h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + 0x00000000) );
		/* 821DD940h case    4:*/		return 0x821DD944;
		  /* 821DD944h */ case    5:  		/* lwz R11, <#[R28 + 48]> */
		/* 821DD944h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000030) );
		/* 821DD944h case    5:*/		return 0x821DD948;
		  /* 821DD948h */ case    6:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 821DD948h case    6:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 821DD948h case    6:*/		return 0x821DD94C;
		  /* 821DD94Ch */ case    7:  		/* bc 12, CR0_EQ, 48 */
		/* 821DD94Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x821DD97C;  }
		/* 821DD94Ch case    7:*/		return 0x821DD950;
		  /* 821DD950h */ case    8:  		/* lwz R11, <#[R28 + 80]> */
		/* 821DD950h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000050) );
		/* 821DD950h case    8:*/		return 0x821DD954;
		  /* 821DD954h */ case    9:  		/* b 20 */
		/* 821DD954h case    9:*/		return 0x821DD968;
		/* 821DD954h case    9:*/		return 0x821DD958;
		  /* 821DD958h */ case   10:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DD958h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DD958h case   10:*/		return 0x821DD95C;
		  /* 821DD95Ch */ case   11:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 821DD95Ch case   11:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 821DD95Ch case   11:*/		return 0x821DD960;
		  /* 821DD960h */ case   12:  		/* bc 12, CR0_EQ, 16 */
		/* 821DD960h case   12:*/		if ( regs.CR[0].eq ) { return 0x821DD970;  }
		/* 821DD960h case   12:*/		return 0x821DD964;
		  /* 821DD964h */ case   13:  		/* lwz R11, <#[R11 + 80]> */
		/* 821DD964h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821DD964h case   13:*/		return 0x821DD968;
	}
	return 0x821DD968;
} // Block from 821DD930h-821DD968h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821DD968h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD968);
		  /* 821DD968h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821DD968h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DD968h case    0:*/		return 0x821DD96C;
		  /* 821DD96Ch */ case    1:  		/* bc 4, CR6_EQ, -20 */
		/* 821DD96Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DD958;  }
		/* 821DD96Ch case    1:*/		return 0x821DD970;
	}
	return 0x821DD970;
} // Block from 821DD968h-821DD970h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DD970h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD970);
		  /* 821DD970h */ case    0:  		/* mr R28, R11 */
		/* 821DD970h case    0:*/		regs.R28 = regs.R11;
		/* 821DD970h case    0:*/		return 0x821DD974;
		  /* 821DD974h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DD974h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DD974h case    1:*/		return 0x821DD978;
		  /* 821DD978h */ case    2:  		/* bc 12, CR6_EQ, -128 */
		/* 821DD978h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DD8F8;  }
		/* 821DD978h case    2:*/		return 0x821DD97C;
	}
	return 0x821DD97C;
} // Block from 821DD970h-821DD97Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DD97Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD97C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD97C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD97C);
		  /* 821DD97Ch */ case    0:  		/* lwz R11, <#[R28 + 28]> */
		/* 821DD97Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000001C) );
		/* 821DD97Ch case    0:*/		return 0x821DD980;
		  /* 821DD980h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DD980h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DD980h case    1:*/		return 0x821DD984;
		  /* 821DD984h */ case    2:  		/* bc 12, CR0_EQ, 32 */
		/* 821DD984h case    2:*/		if ( regs.CR[0].eq ) { return 0x821DD9A4;  }
		/* 821DD984h case    2:*/		return 0x821DD988;
		  /* 821DD988h */ case    3:  		/* lwz R11, <#[R28 + 36]> */
		/* 821DD988h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000024) );
		/* 821DD988h case    3:*/		return 0x821DD98C;
		  /* 821DD98Ch */ case    4:  		/* addi R27, R28, 32 */
		/* 821DD98Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R28,0x20);
		/* 821DD98Ch case    4:*/		return 0x821DD990;
		  /* 821DD990h */ case    5:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DD990h case    5:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DD990h case    5:*/		return 0x821DD994;
		  /* 821DD994h */ case    6:  		/* addic R10, R10, -1 */
		/* 821DD994h case    6:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821DD994h case    6:*/		return 0x821DD998;
		  /* 821DD998h */ case    7:  		/* subfe R10, R10, R10 */
		/* 821DD998h case    7:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821DD998h case    7:*/		return 0x821DD99C;
		  /* 821DD99Ch */ case    8:  		/* and R31, R10, R11 */
		/* 821DD99Ch case    8:*/		cpu::op::and<0>(regs,&regs.R31,regs.R10,regs.R11);
		/* 821DD99Ch case    8:*/		return 0x821DD9A0;
		  /* 821DD9A0h */ case    9:  		/* b 28 */
		/* 821DD9A0h case    9:*/		return 0x821DD9BC;
		/* 821DD9A0h case    9:*/		return 0x821DD9A4;
	}
	return 0x821DD9A4;
} // Block from 821DD97Ch-821DD9A4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DD9A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD9A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD9A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD9A4);
		  /* 821DD9A4h */ case    0:  		/* lwz R10, <#[R28 + 28]> */
		/* 821DD9A4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x0000001C) );
		/* 821DD9A4h case    0:*/		return 0x821DD9A8;
		  /* 821DD9A8h */ case    1:  		/* addi R27, R28, 24 */
		/* 821DD9A8h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R28,0x18);
		/* 821DD9A8h case    1:*/		return 0x821DD9AC;
		  /* 821DD9ACh */ case    2:  		/* rlwinm R9, R10, 0, 31, 31 */
		/* 821DD9ACh case    2:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821DD9ACh case    2:*/		return 0x821DD9B0;
		  /* 821DD9B0h */ case    3:  		/* addic R11, R9, -1 */
		/* 821DD9B0h case    3:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R9,0xFFFFFFFF);
		/* 821DD9B0h case    3:*/		return 0x821DD9B4;
		  /* 821DD9B4h */ case    4:  		/* subfe R11, R11, R11 */
		/* 821DD9B4h case    4:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821DD9B4h case    4:*/		return 0x821DD9B8;
		  /* 821DD9B8h */ case    5:  		/* and R31, R11, R10 */
		/* 821DD9B8h case    5:*/		cpu::op::and<0>(regs,&regs.R31,regs.R11,regs.R10);
		/* 821DD9B8h case    5:*/		return 0x821DD9BC;
	}
	return 0x821DD9BC;
} // Block from 821DD9A4h-821DD9BCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DD9BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DD9BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DD9BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DD9BC);
		  /* 821DD9BCh */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821DD9BCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DD9BCh case    0:*/		return 0x821DD9C0;
		  /* 821DD9C0h */ case    1:  		/* bc 12, CR6_EQ, -200 */
		/* 821DD9C0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821DD8F8;  }
		/* 821DD9C0h case    1:*/		return 0x821DD9C4;
		  /* 821DD9C4h */ case    2:  		/* lwz R30, <#[R31]> */
		/* 821DD9C4h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000000) );
		/* 821DD9C4h case    2:*/		return 0x821DD9C8;
		  /* 821DD9C8h */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 821DD9C8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821DD9C8h case    3:*/		return 0x821DD9CC;
		  /* 821DD9CCh */ case    4:  		/* bc 12, CR6_EQ, 68 */
		/* 821DD9CCh case    4:*/		if ( regs.CR[6].eq ) { return 0x821DDA10;  }
		/* 821DD9CCh case    4:*/		return 0x821DD9D0;
		  /* 821DD9D0h */ case    5:  		/* lwz R11, <#[R30]> */
		/* 821DD9D0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821DD9D0h case    5:*/		return 0x821DD9D4;
		  /* 821DD9D4h */ case    6:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821DD9D4h case    6:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821DD9D4h case    6:*/		return 0x821DD9D8;
		  /* 821DD9D8h */ case    7:  		/* bc 12, CR0_EQ, 48 */
		/* 821DD9D8h case    7:*/		if ( regs.CR[0].eq ) { return 0x821DDA08;  }
		/* 821DD9D8h case    7:*/		return 0x821DD9DC;
		  /* 821DD9DCh */ case    8:  		/* li R7, 0 */
		/* 821DD9DCh case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821DD9DCh case    8:*/		return 0x821DD9E0;
		  /* 821DD9E0h */ case    9:  		/* addi R6, R1, 92 */
		/* 821DD9E0h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x5C);
		/* 821DD9E0h case    9:*/		return 0x821DD9E4;
		  /* 821DD9E4h */ case   10:  		/* addi R5, R1, 96 */
		/* 821DD9E4h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 821DD9E4h case   10:*/		return 0x821DD9E8;
		  /* 821DD9E8h */ case   11:  		/* addi R4, R1, 88 */
		/* 821DD9E8h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x58);
		/* 821DD9E8h case   11:*/		return 0x821DD9EC;
		  /* 821DD9ECh */ case   12:  		/* mr R3, R30 */
		/* 821DD9ECh case   12:*/		regs.R3 = regs.R30;
		/* 821DD9ECh case   12:*/		return 0x821DD9F0;
		  /* 821DD9F0h */ case   13:  		/* bl 333120 */
		/* 821DD9F0h case   13:*/		regs.LR = 0x821DD9F4; return 0x8222EF30;
		/* 821DD9F0h case   13:*/		return 0x821DD9F4;
		  /* 821DD9F4h */ case   14:  		/* lwz R29, <#[R1 + 88]> */
		/* 821DD9F4h case   14:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000058) );
		/* 821DD9F4h case   14:*/		return 0x821DD9F8;
		  /* 821DD9F8h */ case   15:  		/* lwz R11, <#[R29 + 8]> */
		/* 821DD9F8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821DD9F8h case   15:*/		return 0x821DD9FC;
		  /* 821DD9FCh */ case   16:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DD9FCh case   16:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DD9FCh case   16:*/		return 0x821DDA00;
		  /* 821DDA00h */ case   17:  		/* cmplwi CR6, R11, 14848 */
		/* 821DDA00h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003A00);
		/* 821DDA00h case   17:*/		return 0x821DDA04;
		  /* 821DDA04h */ case   18:  		/* bc 12, CR6_EQ, 416 */
		/* 821DDA04h case   18:*/		if ( regs.CR[6].eq ) { return 0x821DDBA4;  }
		/* 821DDA04h case   18:*/		return 0x821DDA08;
	}
	return 0x821DDA08;
} // Block from 821DD9BCh-821DDA08h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821DDA08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDA08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDA08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDA08);
		  /* 821DDA08h */ case    0:  		/* lwz R30, <#[R30 + 4]> */
		/* 821DDA08h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000004) );
		/* 821DDA08h case    0:*/		return 0x821DDA0C;
		  /* 821DDA0Ch */ case    1:  		/* b -68 */
		/* 821DDA0Ch case    1:*/		return 0x821DD9C8;
		/* 821DDA0Ch case    1:*/		return 0x821DDA10;
	}
	return 0x821DDA10;
} // Block from 821DDA08h-821DDA10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DDA10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDA10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDA10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDA10);
		  /* 821DDA10h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821DDA10h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821DDA10h case    0:*/		return 0x821DDA14;
		  /* 821DDA14h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 821DDA14h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821DDA14h case    1:*/		return 0x821DDA18;
		  /* 821DDA18h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821DDA18h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821DDA18h case    2:*/		return 0x821DDA1C;
		  /* 821DDA1Ch */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821DDA1Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DDA28;  }
		/* 821DDA1Ch case    3:*/		return 0x821DDA20;
		  /* 821DDA20h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821DDA20h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DDA20h case    4:*/		return 0x821DDA24;
		  /* 821DDA24h */ case    5:  		/* bc 4, CR6_EQ, -96 */
		/* 821DDA24h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821DD9C4;  }
		/* 821DDA24h case    5:*/		return 0x821DDA28;
	}
	return 0x821DDA28;
} // Block from 821DDA10h-821DDA28h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DDA28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDA28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDA28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDA28);
		  /* 821DDA28h */ case    0:  		/* addi R11, R28, 32 */
		/* 821DDA28h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x20);
		/* 821DDA28h case    0:*/		return 0x821DDA2C;
		  /* 821DDA2Ch */ case    1:  		/* cmplw CR6, R27, R11 */
		/* 821DDA2Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 821DDA2Ch case    1:*/		return 0x821DDA30;
		  /* 821DDA30h */ case    2:  		/* bc 12, CR6_EQ, -312 */
		/* 821DDA30h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DD8F8;  }
		/* 821DDA30h case    2:*/		return 0x821DDA34;
		  /* 821DDA34h */ case    3:  		/* lwz R31, <#[R11 + 4]> */
		/* 821DDA34h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821DDA34h case    3:*/		return 0x821DDA38;
		  /* 821DDA38h */ case    4:  		/* mr R27, R11 */
		/* 821DDA38h case    4:*/		regs.R27 = regs.R11;
		/* 821DDA38h case    4:*/		return 0x821DDA3C;
		  /* 821DDA3Ch */ case    5:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821DDA3Ch case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821DDA3Ch case    5:*/		return 0x821DDA40;
		  /* 821DDA40h */ case    6:  		/* bc 4, CR0_EQ, -328 */
		/* 821DDA40h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821DD8F8;  }
		/* 821DDA40h case    6:*/		return 0x821DDA44;
		  /* 821DDA44h */ case    7:  		/* cmplwi CR0, R31, 0 */
		/* 821DDA44h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821DDA44h case    7:*/		return 0x821DDA48;
		  /* 821DDA48h */ case    8:  		/* bc 4, CR0_EQ, -132 */
		/* 821DDA48h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821DD9C4;  }
		/* 821DDA48h case    8:*/		return 0x821DDA4C;
		  /* 821DDA4Ch */ case    9:  		/* b -340 */
		/* 821DDA4Ch case    9:*/		return 0x821DD8F8;
		/* 821DDA4Ch case    9:*/		return 0x821DDA50;
	}
	return 0x821DDA50;
} // Block from 821DDA28h-821DDA50h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DDA50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDA50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDA50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDA50);
		  /* 821DDA50h */ case    0:  		/* li R4, 1 */
		/* 821DDA50h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821DDA50h case    0:*/		return 0x821DDA54;
		  /* 821DDA54h */ case    1:  		/* mr R3, R23 */
		/* 821DDA54h case    1:*/		regs.R3 = regs.R23;
		/* 821DDA54h case    1:*/		return 0x821DDA58;
		  /* 821DDA58h */ case    2:  		/* bl -16864 */
		/* 821DDA58h case    2:*/		regs.LR = 0x821DDA5C; return 0x821D9878;
		/* 821DDA58h case    2:*/		return 0x821DDA5C;
		  /* 821DDA5Ch */ case    3:  		/* li R19, 0 */
		/* 821DDA5Ch case    3:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 821DDA5Ch case    3:*/		return 0x821DDA60;
	}
	return 0x821DDA60;
} // Block from 821DDA50h-821DDA60h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DDA60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDA60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDA60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDA60);
		  /* 821DDA60h */ case    0:  		/* lwz R3, <#[R1 + 84]> */
		/* 821DDA60h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000054) );
		/* 821DDA60h case    0:*/		return 0x821DDA64;
		  /* 821DDA64h */ case    1:  		/* li R20, 0 */
		/* 821DDA64h case    1:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 821DDA64h case    1:*/		return 0x821DDA68;
		  /* 821DDA68h */ case    2:  		/* bl 81784 */
		/* 821DDA68h case    2:*/		regs.LR = 0x821DDA6C; return 0x821F19E0;
		/* 821DDA68h case    2:*/		return 0x821DDA6C;
		  /* 821DDA6Ch */ case    3:  		/* b 8 */
		/* 821DDA6Ch case    3:*/		return 0x821DDA74;
		/* 821DDA6Ch case    3:*/		return 0x821DDA70;
	}
	return 0x821DDA70;
} // Block from 821DDA60h-821DDA70h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DDA70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDA70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDA70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDA70);
		  /* 821DDA70h */ case    0:  		/* lbz R26, <#[R1 + 80]> */
		/* 821DDA70h case    0:*/		cpu::mem::load8z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000050) );
		/* 821DDA70h case    0:*/		return 0x821DDA74;
	}
	return 0x821DDA74;
} // Block from 821DDA70h-821DDA74h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DDA74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDA74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDA74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDA74);
		  /* 821DDA74h */ case    0:  		/* rlwinm. R11, R26, 0, 24, 31 */
		/* 821DDA74h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R26);
		/* 821DDA74h case    0:*/		return 0x821DDA78;
		  /* 821DDA78h */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 821DDA78h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DDA90;  }
		/* 821DDA78h case    1:*/		return 0x821DDA7C;
		  /* 821DDA7Ch */ case    2:  		/* mr R3, R23 */
		/* 821DDA7Ch case    2:*/		regs.R3 = regs.R23;
		/* 821DDA7Ch case    2:*/		return 0x821DDA80;
		  /* 821DDA80h */ case    3:  		/* bl 55456 */
		/* 821DDA80h case    3:*/		regs.LR = 0x821DDA84; return 0x821EB320;
		/* 821DDA80h case    3:*/		return 0x821DDA84;
		  /* 821DDA84h */ case    4:  		/* li R4, 1 */
		/* 821DDA84h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821DDA84h case    4:*/		return 0x821DDA88;
		  /* 821DDA88h */ case    5:  		/* mr R3, R23 */
		/* 821DDA88h case    5:*/		regs.R3 = regs.R23;
		/* 821DDA88h case    5:*/		return 0x821DDA8C;
		  /* 821DDA8Ch */ case    6:  		/* bl -16916 */
		/* 821DDA8Ch case    6:*/		regs.LR = 0x821DDA90; return 0x821D9878;
		/* 821DDA8Ch case    6:*/		return 0x821DDA90;
	}
	return 0x821DDA90;
} // Block from 821DDA74h-821DDA90h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DDA90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDA90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDA90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDA90);
		  /* 821DDA90h */ case    0:  		/* lwz R11, <#[R17 + 48]> */
		/* 821DDA90h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000030) );
		/* 821DDA90h case    0:*/		return 0x821DDA94;
		  /* 821DDA94h */ case    1:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 821DDA94h case    1:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 821DDA94h case    1:*/		return 0x821DDA98;
		  /* 821DDA98h */ case    2:  		/* bc 12, CR0_EQ, 52 */
		/* 821DDA98h case    2:*/		if ( regs.CR[0].eq ) { return 0x821DDACC;  }
		/* 821DDA98h case    2:*/		return 0x821DDA9C;
		  /* 821DDA9Ch */ case    3:  		/* lwz R11, <#[R17 + 80]> */
		/* 821DDA9Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000050) );
		/* 821DDA9Ch case    3:*/		return 0x821DDAA0;
		  /* 821DDAA0h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821DDAA0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DDAA0h case    4:*/		return 0x821DDAA4;
		  /* 821DDAA4h */ case    5:  		/* bc 12, CR6_EQ, 40 */
		/* 821DDAA4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821DDACC;  }
		/* 821DDAA4h case    5:*/		return 0x821DDAA8;
		  /* 821DDAA8h */ case    6:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DDAA8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DDAA8h case    6:*/		return 0x821DDAAC;
		  /* 821DDAACh */ case    7:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 821DDAACh case    7:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 821DDAACh case    7:*/		return 0x821DDAB0;
		  /* 821DDAB0h */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 821DDAB0h case    8:*/		if ( regs.CR[0].eq ) { return 0x821DDAC0;  }
		/* 821DDAB0h case    8:*/		return 0x821DDAB4;
		  /* 821DDAB4h */ case    9:  		/* lwz R11, <#[R11 + 80]> */
		/* 821DDAB4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821DDAB4h case    9:*/		return 0x821DDAB8;
		  /* 821DDAB8h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821DDAB8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DDAB8h case   10:*/		return 0x821DDABC;
		  /* 821DDABCh */ case   11:  		/* bc 4, CR6_EQ, -20 */
		/* 821DDABCh case   11:*/		if ( !regs.CR[6].eq ) { return 0x821DDAA8;  }
		/* 821DDABCh case   11:*/		return 0x821DDAC0;
	}
	return 0x821DDAC0;
} // Block from 821DDA90h-821DDAC0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821DDAC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDAC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDAC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDAC0);
		  /* 821DDAC0h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821DDAC0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DDAC0h case    0:*/		return 0x821DDAC4;
		  /* 821DDAC4h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 821DDAC4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821DDACC;  }
		/* 821DDAC4h case    1:*/		return 0x821DDAC8;
		  /* 821DDAC8h */ case    2:  		/* stw R22, <#[R11 + 44]> */
		/* 821DDAC8h case    2:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R11 + 0x0000002C) );
		/* 821DDAC8h case    2:*/		return 0x821DDACC;
	}
	return 0x821DDACC;
} // Block from 821DDAC0h-821DDACCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DDACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDACC);
		  /* 821DDACCh */ case    0:  		/* lwz R17, <#[R21 + 4]> */
		/* 821DDACCh case    0:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R21 + 0x00000004) );
		/* 821DDACCh case    0:*/		return 0x821DDAD0;
		  /* 821DDAD0h */ case    1:  		/* lwz R11, <#[R17 + 48]> */
		/* 821DDAD0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000030) );
		/* 821DDAD0h case    1:*/		return 0x821DDAD4;
		  /* 821DDAD4h */ case    2:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 821DDAD4h case    2:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 821DDAD4h case    2:*/		return 0x821DDAD8;
		  /* 821DDAD8h */ case    3:  		/* bc 4, CR0_EQ, 568 */
		/* 821DDAD8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DDD10;  }
		/* 821DDAD8h case    3:*/		return 0x821DDADC;
		  /* 821DDADCh */ case    4:  		/* lwz R11, <#[R21 + 8]> */
		/* 821DDADCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821DDADCh case    4:*/		return 0x821DDAE0;
		  /* 821DDAE0h */ case    5:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DDAE0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DDAE0h case    5:*/		return 0x821DDAE4;
		  /* 821DDAE4h */ case    6:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 821DDAE4h case    6:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 821DDAE4h case    6:*/		return 0x821DDAE8;
		  /* 821DDAE8h */ case    7:  		/* bc 12, CR0_EQ, 36 */
		/* 821DDAE8h case    7:*/		if ( regs.CR[0].eq ) { return 0x821DDB0C;  }
		/* 821DDAE8h case    7:*/		return 0x821DDAEC;
		  /* 821DDAECh */ case    8:  		/* b 16 */
		/* 821DDAECh case    8:*/		return 0x821DDAFC;
		/* 821DDAECh case    8:*/		return 0x821DDAF0;
		  /* 821DDAF0h */ case    9:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DDAF0h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DDAF0h case    9:*/		return 0x821DDAF4;
		  /* 821DDAF4h */ case   10:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 821DDAF4h case   10:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 821DDAF4h case   10:*/		return 0x821DDAF8;
		  /* 821DDAF8h */ case   11:  		/* bc 12, CR0_EQ, 16 */
		/* 821DDAF8h case   11:*/		if ( regs.CR[0].eq ) { return 0x821DDB08;  }
		/* 821DDAF8h case   11:*/		return 0x821DDAFC;
	}
	return 0x821DDAFC;
} // Block from 821DDACCh-821DDAFCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 821DDAFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDAFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDAFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDAFC);
		  /* 821DDAFCh */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 821DDAFCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821DDAFCh case    0:*/		return 0x821DDB00;
		  /* 821DDB00h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DDB00h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DDB00h case    1:*/		return 0x821DDB04;
		  /* 821DDB04h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 821DDB04h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DDAF0;  }
		/* 821DDB04h case    2:*/		return 0x821DDB08;
	}
	return 0x821DDB08;
} // Block from 821DDAFCh-821DDB08h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DDB08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDB08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDB08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDB08);
		  /* 821DDB08h */ case    0:  		/* stw R11, <#[R21 + 8]> */
		/* 821DDB08h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821DDB08h case    0:*/		return 0x821DDB0C;
	}
	return 0x821DDB0C;
} // Block from 821DDB08h-821DDB0Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DDB0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDB0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDB0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDB0C);
		  /* 821DDB0Ch */ case    0:  		/* lwz R11, <#[R21 + 16]> */
		/* 821DDB0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000010) );
		/* 821DDB0Ch case    0:*/		return 0x821DDB10;
		  /* 821DDB10h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DDB10h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DDB10h case    1:*/		return 0x821DDB14;
		  /* 821DDB14h */ case    2:  		/* bc 12, CR6_EQ, 48 */
		/* 821DDB14h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DDB44;  }
		/* 821DDB14h case    2:*/		return 0x821DDB18;
		  /* 821DDB18h */ case    3:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DDB18h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DDB18h case    3:*/		return 0x821DDB1C;
		  /* 821DDB1Ch */ case    4:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 821DDB1Ch case    4:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 821DDB1Ch case    4:*/		return 0x821DDB20;
		  /* 821DDB20h */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 821DDB20h case    5:*/		if ( regs.CR[0].eq ) { return 0x821DDB44;  }
		/* 821DDB20h case    5:*/		return 0x821DDB24;
		  /* 821DDB24h */ case    6:  		/* b 16 */
		/* 821DDB24h case    6:*/		return 0x821DDB34;
		/* 821DDB24h case    6:*/		return 0x821DDB28;
		  /* 821DDB28h */ case    7:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DDB28h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DDB28h case    7:*/		return 0x821DDB2C;
		  /* 821DDB2Ch */ case    8:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 821DDB2Ch case    8:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 821DDB2Ch case    8:*/		return 0x821DDB30;
		  /* 821DDB30h */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 821DDB30h case    9:*/		if ( regs.CR[0].eq ) { return 0x821DDB40;  }
		/* 821DDB30h case    9:*/		return 0x821DDB34;
	}
	return 0x821DDB34;
} // Block from 821DDB0Ch-821DDB34h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DDB34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDB34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDB34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDB34);
		  /* 821DDB34h */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 821DDB34h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821DDB34h case    0:*/		return 0x821DDB38;
		  /* 821DDB38h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DDB38h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DDB38h case    1:*/		return 0x821DDB3C;
		  /* 821DDB3Ch */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 821DDB3Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DDB28;  }
		/* 821DDB3Ch case    2:*/		return 0x821DDB40;
	}
	return 0x821DDB40;
} // Block from 821DDB34h-821DDB40h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DDB40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDB40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDB40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDB40);
		  /* 821DDB40h */ case    0:  		/* stw R11, <#[R21 + 16]> */
		/* 821DDB40h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000010) );
		/* 821DDB40h case    0:*/		return 0x821DDB44;
	}
	return 0x821DDB44;
} // Block from 821DDB40h-821DDB44h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DDB44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDB44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDB44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDB44);
		  /* 821DDB44h */ case    0:  		/* lwz R11, <#[R21 + 12]> */
		/* 821DDB44h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000000C) );
		/* 821DDB44h case    0:*/		return 0x821DDB48;
		  /* 821DDB48h */ case    1:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DDB48h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DDB48h case    1:*/		return 0x821DDB4C;
		  /* 821DDB4Ch */ case    2:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 821DDB4Ch case    2:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 821DDB4Ch case    2:*/		return 0x821DDB50;
		  /* 821DDB50h */ case    3:  		/* bc 12, CR0_EQ, 36 */
		/* 821DDB50h case    3:*/		if ( regs.CR[0].eq ) { return 0x821DDB74;  }
		/* 821DDB50h case    3:*/		return 0x821DDB54;
		  /* 821DDB54h */ case    4:  		/* b 16 */
		/* 821DDB54h case    4:*/		return 0x821DDB64;
		/* 821DDB54h case    4:*/		return 0x821DDB58;
		  /* 821DDB58h */ case    5:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DDB58h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DDB58h case    5:*/		return 0x821DDB5C;
		  /* 821DDB5Ch */ case    6:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 821DDB5Ch case    6:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 821DDB5Ch case    6:*/		return 0x821DDB60;
		  /* 821DDB60h */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 821DDB60h case    7:*/		if ( regs.CR[0].eq ) { return 0x821DDB70;  }
		/* 821DDB60h case    7:*/		return 0x821DDB64;
	}
	return 0x821DDB64;
} // Block from 821DDB44h-821DDB64h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821DDB64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDB64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDB64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDB64);
		  /* 821DDB64h */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 821DDB64h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821DDB64h case    0:*/		return 0x821DDB68;
		  /* 821DDB68h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DDB68h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DDB68h case    1:*/		return 0x821DDB6C;
		  /* 821DDB6Ch */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 821DDB6Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DDB58;  }
		/* 821DDB6Ch case    2:*/		return 0x821DDB70;
	}
	return 0x821DDB70;
} // Block from 821DDB64h-821DDB70h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DDB70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDB70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDB70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDB70);
		  /* 821DDB70h */ case    0:  		/* stw R11, <#[R21 + 12]> */
		/* 821DDB70h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x0000000C) );
		/* 821DDB70h case    0:*/		return 0x821DDB74;
	}
	return 0x821DDB74;
} // Block from 821DDB70h-821DDB74h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DDB74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDB74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDB74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDB74);
		  /* 821DDB74h */ case    0:  		/* lwz R11, <#[R21 + 36]> */
		/* 821DDB74h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000024) );
		/* 821DDB74h case    0:*/		return 0x821DDB78;
		  /* 821DDB78h */ case    1:  		/* addi R14, R14, 1 */
		/* 821DDB78h case    1:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R14,0x1);
		/* 821DDB78h case    1:*/		return 0x821DDB7C;
		  /* 821DDB7Ch */ case    2:  		/* rlwinm R11, R11, 22, 17, 31 */
		/* 821DDB7Ch case    2:*/		cpu::op::rlwinm<0,22,17,31>(regs,&regs.R11,regs.R11);
		/* 821DDB7Ch case    2:*/		return 0x821DDB80;
		  /* 821DDB80h */ case    3:  		/* cmplw CR6, R14, R11 */
		/* 821DDB80h case    3:*/		cpu::op::cmplw<6>(regs,regs.R14,regs.R11);
		/* 821DDB80h case    3:*/		return 0x821DDB84;
		  /* 821DDB84h */ case    4:  		/* bc 12, CR6_LT, -3252 */
		/* 821DDB84h case    4:*/		if ( regs.CR[6].lt ) { return 0x821DCED0;  }
		/* 821DDB84h case    4:*/		return 0x821DDB88;
	}
	return 0x821DDB88;
} // Block from 821DDB74h-821DDB88h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DDB88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDB88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDB88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDB88);
		  /* 821DDB88h */ case    0:  		/* lwz R11, <#[R21 + 8]> */
		/* 821DDB88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821DDB88h case    0:*/		return 0x821DDB8C;
		  /* 821DDB8Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DDB8Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DDB8Ch case    1:*/		return 0x821DDB90;
		  /* 821DDB90h */ case    2:  		/* bc 12, CR6_EQ, 148 */
		/* 821DDB90h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DDC24;  }
		/* 821DDB90h case    2:*/		return 0x821DDB94;
		  /* 821DDB94h */ case    3:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DDB94h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DDB94h case    3:*/		return 0x821DDB98;
		  /* 821DDB98h */ case    4:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 821DDB98h case    4:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 821DDB98h case    4:*/		return 0x821DDB9C;
		  /* 821DDB9Ch */ case    5:  		/* bc 12, CR0_EQ, 136 */
		/* 821DDB9Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x821DDC24;  }
		/* 821DDB9Ch case    5:*/		return 0x821DDBA0;
		  /* 821DDBA0h */ case    6:  		/* b 116 */
		/* 821DDBA0h case    6:*/		return 0x821DDC14;
		/* 821DDBA0h case    6:*/		return 0x821DDBA4;
	}
	return 0x821DDBA4;
} // Block from 821DDB88h-821DDBA4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DDBA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDBA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDBA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDBA4);
		  /* 821DDBA4h */ case    0:  		/* li R6, 1 */
		/* 821DDBA4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821DDBA4h case    0:*/		return 0x821DDBA8;
		  /* 821DDBA8h */ case    1:  		/* li R5, 0 */
		/* 821DDBA8h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DDBA8h case    1:*/		return 0x821DDBAC;
		  /* 821DDBACh */ case    2:  		/* li R4, 116 */
		/* 821DDBACh case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x74);
		/* 821DDBACh case    2:*/		return 0x821DDBB0;
		  /* 821DDBB0h */ case    3:  		/* mr R3, R23 */
		/* 821DDBB0h case    3:*/		regs.R3 = regs.R23;
		/* 821DDBB0h case    3:*/		return 0x821DDBB4;
		  /* 821DDBB4h */ case    4:  		/* bl -497540 */
		/* 821DDBB4h case    4:*/		regs.LR = 0x821DDBB8; return 0x82164430;
		/* 821DDBB4h case    4:*/		return 0x821DDBB8;
		  /* 821DDBB8h */ case    5:  		/* addi R10, R29, -4 */
		/* 821DDBB8h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0xFFFFFFFC);
		/* 821DDBB8h case    5:*/		return 0x821DDBBC;
		  /* 821DDBBCh */ case    6:  		/* lwz R11, <#[R23 + 12]> */
		/* 821DDBBCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000000C) );
		/* 821DDBBCh case    6:*/		return 0x821DDBC0;
		  /* 821DDBC0h */ case    7:  		/* lwzx R10, <#[R3 + R10]> */
		/* 821DDBC0h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + regs.R10 + 0x00000000) );
		/* 821DDBC0h case    7:*/		return 0x821DDBC4;
		  /* 821DDBC4h */ case    8:  		/* mr R3, R23 */
		/* 821DDBC4h case    8:*/		regs.R3 = regs.R23;
		/* 821DDBC4h case    8:*/		return 0x821DDBC8;
		  /* 821DDBC8h */ case    9:  		/* rlwinm R4, R10, 0, 17, 31 */
		/* 821DDBC8h case    9:*/		cpu::op::rlwinm<0,0,17,31>(regs,&regs.R4,regs.R10);
		/* 821DDBC8h case    9:*/		return 0x821DDBCC;
		  /* 821DDBCCh */ case   10:  		/* mulli R10, R4, 40 */
		/* 821DDBCCh case   10:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R4,0x28);
		/* 821DDBCCh case   10:*/		return 0x821DDBD0;
		  /* 821DDBD0h */ case   11:  		/* add R11, R10, R11 */
		/* 821DDBD0h case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821DDBD0h case   11:*/		return 0x821DDBD4;
		  /* 821DDBD4h */ case   12:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DDBD4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DDBD4h case   12:*/		return 0x821DDBD8;
		  /* 821DDBD8h */ case   13:  		/* rlwinm. R11, R11, 0, 4, 4 */
		/* 821DDBD8h case   13:*/		cpu::op::rlwinm<1,0,4,4>(regs,&regs.R11,regs.R11);
		/* 821DDBD8h case   13:*/		return 0x821DDBDC;
		  /* 821DDBDCh */ case   14:  		/* bc 12, CR0_EQ, 24 */
		/* 821DDBDCh case   14:*/		if ( regs.CR[0].eq ) { return 0x821DDBF4;  }
		/* 821DDBDCh case   14:*/		return 0x821DDBE0;
		  /* 821DDBE0h */ case   15:  		/* bl 61024 */
		/* 821DDBE0h case   15:*/		regs.LR = 0x821DDBE4; return 0x821ECA40;
		/* 821DDBE0h case   15:*/		return 0x821DDBE4;
		  /* 821DDBE4h */ case   16:  		/* mr R5, R3 */
		/* 821DDBE4h case   16:*/		regs.R5 = regs.R3;
		/* 821DDBE4h case   16:*/		return 0x821DDBE8;
		  /* 821DDBE8h */ case   17:  		/* li R4, 3507 */
		/* 821DDBE8h case   17:*/		cpu::op::li<0>(regs,&regs.R4,0xDB3);
		/* 821DDBE8h case   17:*/		return 0x821DDBEC;
		  /* 821DDBECh */ case   18:  		/* mr R3, R23 */
		/* 821DDBECh case   18:*/		regs.R3 = regs.R23;
		/* 821DDBECh case   18:*/		return 0x821DDBF0;
		  /* 821DDBF0h */ case   19:  		/* bl -572808 */
		/* 821DDBF0h case   19:*/		regs.LR = 0x821DDBF4; return 0x82151E68;
		/* 821DDBF0h case   19:*/		return 0x821DDBF4;
	}
	return 0x821DDBF4;
} // Block from 821DDBA4h-821DDBF4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821DDBF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDBF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDBF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDBF4);
		  /* 821DDBF4h */ case    0:  		/* bl 61004 */
		/* 821DDBF4h case    0:*/		regs.LR = 0x821DDBF8; return 0x821ECA40;
		/* 821DDBF4h case    0:*/		return 0x821DDBF8;
		  /* 821DDBF8h */ case    1:  		/* mr R5, R3 */
		/* 821DDBF8h case    1:*/		regs.R5 = regs.R3;
		/* 821DDBF8h case    1:*/		return 0x821DDBFC;
		  /* 821DDBFCh */ case    2:  		/* li R4, 3527 */
		/* 821DDBFCh case    2:*/		cpu::op::li<0>(regs,&regs.R4,0xDC7);
		/* 821DDBFCh case    2:*/		return 0x821DDC00;
		  /* 821DDC00h */ case    3:  		/* mr R3, R23 */
		/* 821DDC00h case    3:*/		regs.R3 = regs.R23;
		/* 821DDC00h case    3:*/		return 0x821DDC04;
		  /* 821DDC04h */ case    4:  		/* bl -572828 */
		/* 821DDC04h case    4:*/		regs.LR = 0x821DDC08; return 0x82151E68;
		/* 821DDC04h case    4:*/		return 0x821DDC08;
		  /* 821DDC08h */ case    5:  		/* lwz R10, <#[R11 + 48]> */
		/* 821DDC08h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821DDC08h case    5:*/		return 0x821DDC0C;
		  /* 821DDC0Ch */ case    6:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 821DDC0Ch case    6:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 821DDC0Ch case    6:*/		return 0x821DDC10;
		  /* 821DDC10h */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 821DDC10h case    7:*/		if ( regs.CR[0].eq ) { return 0x821DDC20;  }
		/* 821DDC10h case    7:*/		return 0x821DDC14;
	}
	return 0x821DDC14;
} // Block from 821DDBF4h-821DDC14h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821DDC14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDC14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDC14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDC14);
		  /* 821DDC14h */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 821DDC14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821DDC14h case    0:*/		return 0x821DDC18;
		  /* 821DDC18h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DDC18h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DDC18h case    1:*/		return 0x821DDC1C;
		  /* 821DDC1Ch */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 821DDC1Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DDC08;  }
		/* 821DDC1Ch case    2:*/		return 0x821DDC20;
	}
	return 0x821DDC20;
} // Block from 821DDC14h-821DDC20h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DDC20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDC20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDC20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDC20);
		  /* 821DDC20h */ case    0:  		/* stw R11, <#[R21 + 8]> */
		/* 821DDC20h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821DDC20h case    0:*/		return 0x821DDC24;
	}
	return 0x821DDC24;
} // Block from 821DDC20h-821DDC24h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DDC24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDC24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDC24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDC24);
		  /* 821DDC24h */ case    0:  		/* lwz R4, <#[R21 + 8]> */
		/* 821DDC24h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x00000008) );
		/* 821DDC24h case    0:*/		return 0x821DDC28;
		  /* 821DDC28h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 821DDC28h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821DDC28h case    1:*/		return 0x821DDC2C;
		  /* 821DDC2Ch */ case    2:  		/* bc 12, CR6_EQ, 228 */
		/* 821DDC2Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821DDD10;  }
		/* 821DDC2Ch case    2:*/		return 0x821DDC30;
		  /* 821DDC30h */ case    3:  		/* lwz R11, <#[R17 + 48]> */
		/* 821DDC30h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000030) );
		/* 821DDC30h case    3:*/		return 0x821DDC34;
		  /* 821DDC34h */ case    4:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 821DDC34h case    4:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 821DDC34h case    4:*/		return 0x821DDC38;
		  /* 821DDC38h */ case    5:  		/* bc 4, CR0_EQ, 216 */
		/* 821DDC38h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821DDD10;  }
		/* 821DDC38h case    5:*/		return 0x821DDC3C;
		  /* 821DDC3Ch */ case    6:  		/* lwz R11, <#[R4 + 12]> */
		/* 821DDC3Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821DDC3Ch case    6:*/		return 0x821DDC40;
		  /* 821DDC40h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821DDC40h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DDC40h case    7:*/		return 0x821DDC44;
		  /* 821DDC44h */ case    8:  		/* bc 12, CR6_EQ, 32 */
		/* 821DDC44h case    8:*/		if ( regs.CR[6].eq ) { return 0x821DDC64;  }
		/* 821DDC44h case    8:*/		return 0x821DDC48;
		  /* 821DDC48h */ case    9:  		/* lwz R10, <#[R11]> */
		/* 821DDC48h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DDC48h case    9:*/		return 0x821DDC4C;
		  /* 821DDC4Ch */ case   10:  		/* cmplw CR6, R17, R10 */
		/* 821DDC4Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R10);
		/* 821DDC4Ch case   10:*/		return 0x821DDC50;
		  /* 821DDC50h */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 821DDC50h case   11:*/		if ( regs.CR[6].eq ) { return 0x821DDC5C;  }
		/* 821DDC50h case   11:*/		return 0x821DDC54;
		  /* 821DDC54h */ case   12:  		/* lwz R11, <#[R11 + 8]> */
		/* 821DDC54h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821DDC54h case   12:*/		return 0x821DDC58;
		  /* 821DDC58h */ case   13:  		/* b -24 */
		/* 821DDC58h case   13:*/		return 0x821DDC40;
		/* 821DDC58h case   13:*/		return 0x821DDC5C;
	}
	return 0x821DDC5C;
} // Block from 821DDC24h-821DDC5Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 821DDC5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDC5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDC5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDC5C);
		  /* 821DDC5Ch */ case    0:  		/* li R11, 1 */
		/* 821DDC5Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821DDC5Ch case    0:*/		return 0x821DDC60;
		  /* 821DDC60h */ case    1:  		/* b 8 */
		/* 821DDC60h case    1:*/		return 0x821DDC68;
		/* 821DDC60h case    1:*/		return 0x821DDC64;
	}
	return 0x821DDC64;
} // Block from 821DDC5Ch-821DDC64h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DDC64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDC64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDC64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDC64);
		  /* 821DDC64h */ case    0:  		/* li R11, 0 */
		/* 821DDC64h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DDC64h case    0:*/		return 0x821DDC68;
	}
	return 0x821DDC68;
} // Block from 821DDC64h-821DDC68h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DDC68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDC68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDC68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDC68);
		  /* 821DDC68h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DDC68h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DDC68h case    0:*/		return 0x821DDC6C;
		  /* 821DDC6Ch */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 821DDC6Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821DDC84;  }
		/* 821DDC6Ch case    1:*/		return 0x821DDC70;
		  /* 821DDC70h */ case    2:  		/* mr R5, R17 */
		/* 821DDC70h case    2:*/		regs.R5 = regs.R17;
		/* 821DDC70h case    2:*/		return 0x821DDC74;
		  /* 821DDC74h */ case    3:  		/* mr R3, R23 */
		/* 821DDC74h case    3:*/		regs.R3 = regs.R23;
		/* 821DDC74h case    3:*/		return 0x821DDC78;
		  /* 821DDC78h */ case    4:  		/* bl -126920 */
		/* 821DDC78h case    4:*/		regs.LR = 0x821DDC7C; return 0x821BECB0;
		/* 821DDC78h case    4:*/		return 0x821DDC7C;
		  /* 821DDC7Ch */ case    5:  		/* mr R3, R23 */
		/* 821DDC7Ch case    5:*/		regs.R3 = regs.R23;
		/* 821DDC7Ch case    5:*/		return 0x821DDC80;
		  /* 821DDC80h */ case    6:  		/* bl 54944 */
		/* 821DDC80h case    6:*/		regs.LR = 0x821DDC84; return 0x821EB320;
		/* 821DDC80h case    6:*/		return 0x821DDC84;
	}
	return 0x821DDC84;
} // Block from 821DDC68h-821DDC84h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DDC84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDC84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDC84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDC84);
		  /* 821DDC84h */ case    0:  		/* lwz R11, <#[R21 + 8]> */
		/* 821DDC84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821DDC84h case    0:*/		return 0x821DDC88;
		  /* 821DDC88h */ case    1:  		/* lwz R11, <#[R11 + 36]> */
		/* 821DDC88h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821DDC88h case    1:*/		return 0x821DDC8C;
		  /* 821DDC8Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DDC8Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DDC8Ch case    2:*/		return 0x821DDC90;
		  /* 821DDC90h */ case    3:  		/* bc 4, CR0_EQ, 128 */
		/* 821DDC90h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DDD10;  }
		/* 821DDC90h case    3:*/		return 0x821DDC94;
		  /* 821DDC94h */ case    4:  		/* mr R4, R11 */
		/* 821DDC94h case    4:*/		regs.R4 = regs.R11;
		/* 821DDC94h case    4:*/		return 0x821DDC98;
		  /* 821DDC98h */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 821DDC98h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DDC98h case    5:*/		return 0x821DDC9C;
		  /* 821DDC9Ch */ case    6:  		/* bc 12, CR0_EQ, 116 */
		/* 821DDC9Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x821DDD10;  }
		/* 821DDC9Ch case    6:*/		return 0x821DDCA0;
		  /* 821DDCA0h */ case    7:  		/* lwz R11, <#[R4 + 8]> */
		/* 821DDCA0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821DDCA0h case    7:*/		return 0x821DDCA4;
		  /* 821DDCA4h */ case    8:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821DDCA4h case    8:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821DDCA4h case    8:*/		return 0x821DDCA8;
		  /* 821DDCA8h */ case    9:  		/* cmplwi CR6, R11, 86 */
		/* 821DDCA8h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 821DDCA8h case    9:*/		return 0x821DDCAC;
		  /* 821DDCACh */ case   10:  		/* bc 12, CR6_EQ, 48 */
		/* 821DDCACh case   10:*/		if ( regs.CR[6].eq ) { return 0x821DDCDC;  }
		/* 821DDCACh case   10:*/		return 0x821DDCB0;
		  /* 821DDCB0h */ case   11:  		/* cmplwi CR6, R11, 87 */
		/* 821DDCB0h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 821DDCB0h case   11:*/		return 0x821DDCB4;
		  /* 821DDCB4h */ case   12:  		/* bc 12, CR6_EQ, 40 */
		/* 821DDCB4h case   12:*/		if ( regs.CR[6].eq ) { return 0x821DDCDC;  }
		/* 821DDCB4h case   12:*/		return 0x821DDCB8;
		  /* 821DDCB8h */ case   13:  		/* cmplwi CR6, R11, 89 */
		/* 821DDCB8h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 821DDCB8h case   13:*/		return 0x821DDCBC;
		  /* 821DDCBCh */ case   14:  		/* bc 12, CR6_EQ, 32 */
		/* 821DDCBCh case   14:*/		if ( regs.CR[6].eq ) { return 0x821DDCDC;  }
		/* 821DDCBCh case   14:*/		return 0x821DDCC0;
		  /* 821DDCC0h */ case   15:  		/* cmplwi CR6, R11, 90 */
		/* 821DDCC0h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 821DDCC0h case   15:*/		return 0x821DDCC4;
		  /* 821DDCC4h */ case   16:  		/* bc 12, CR6_EQ, 24 */
		/* 821DDCC4h case   16:*/		if ( regs.CR[6].eq ) { return 0x821DDCDC;  }
		/* 821DDCC4h case   16:*/		return 0x821DDCC8;
		  /* 821DDCC8h */ case   17:  		/* cmplwi CR6, R11, 84 */
		/* 821DDCC8h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 821DDCC8h case   17:*/		return 0x821DDCCC;
		  /* 821DDCCCh */ case   18:  		/* bc 12, CR6_EQ, 16 */
		/* 821DDCCCh case   18:*/		if ( regs.CR[6].eq ) { return 0x821DDCDC;  }
		/* 821DDCCCh case   18:*/		return 0x821DDCD0;
		  /* 821DDCD0h */ case   19:  		/* cmplwi CR6, R11, 85 */
		/* 821DDCD0h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 821DDCD0h case   19:*/		return 0x821DDCD4;
		  /* 821DDCD4h */ case   20:  		/* li R11, 0 */
		/* 821DDCD4h case   20:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DDCD4h case   20:*/		return 0x821DDCD8;
		  /* 821DDCD8h */ case   21:  		/* bc 4, CR6_EQ, 8 */
		/* 821DDCD8h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821DDCE0;  }
		/* 821DDCD8h case   21:*/		return 0x821DDCDC;
	}
	return 0x821DDCDC;
} // Block from 821DDC84h-821DDCDCh (22 instructions)

//////////////////////////////////////////////////////
// Block at 821DDCDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDCDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDCDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDCDC);
		  /* 821DDCDCh */ case    0:  		/* li R11, 1 */
		/* 821DDCDCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821DDCDCh case    0:*/		return 0x821DDCE0;
	}
	return 0x821DDCE0;
} // Block from 821DDCDCh-821DDCE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DDCE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDCE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDCE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDCE0);
		  /* 821DDCE0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DDCE0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DDCE0h case    0:*/		return 0x821DDCE4;
		  /* 821DDCE4h */ case    1:  		/* bc 4, CR0_EQ, 36 */
		/* 821DDCE4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821DDD08;  }
		/* 821DDCE4h case    1:*/		return 0x821DDCE8;
		  /* 821DDCE8h */ case    2:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821DDCE8h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821DDCE8h case    2:*/		return 0x821DDCEC;
		  /* 821DDCECh */ case    3:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DDCECh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DDCECh case    3:*/		return 0x821DDCF0;
		  /* 821DDCF0h */ case    4:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DDCF0h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DDCF0h case    4:*/		return 0x821DDCF4;
		  /* 821DDCF4h */ case    5:  		/* bc 4, CR0_EQ, 28 */
		/* 821DDCF4h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821DDD10;  }
		/* 821DDCF4h case    5:*/		return 0x821DDCF8;
		  /* 821DDCF8h */ case    6:  		/* mr R4, R11 */
		/* 821DDCF8h case    6:*/		regs.R4 = regs.R11;
		/* 821DDCF8h case    6:*/		return 0x821DDCFC;
		  /* 821DDCFCh */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821DDCFCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DDCFCh case    7:*/		return 0x821DDD00;
		  /* 821DDD00h */ case    8:  		/* bc 4, CR6_EQ, -96 */
		/* 821DDD00h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821DDCA0;  }
		/* 821DDD00h case    8:*/		return 0x821DDD04;
		  /* 821DDD04h */ case    9:  		/* b 12 */
		/* 821DDD04h case    9:*/		return 0x821DDD10;
		/* 821DDD04h case    9:*/		return 0x821DDD08;
	}
	return 0x821DDD08;
} // Block from 821DDCE0h-821DDD08h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DDD08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDD08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDD08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDD08);
		  /* 821DDD08h */ case    0:  		/* mr R3, R23 */
		/* 821DDD08h case    0:*/		regs.R3 = regs.R23;
		/* 821DDD08h case    0:*/		return 0x821DDD0C;
		  /* 821DDD0Ch */ case    1:  		/* bl 317764 */
		/* 821DDD0Ch case    1:*/		regs.LR = 0x821DDD10; return 0x8222B650;
		/* 821DDD0Ch case    1:*/		return 0x821DDD10;
	}
	return 0x821DDD10;
} // Block from 821DDD08h-821DDD10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DDD10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDD10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDD10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDD10);
		  /* 821DDD10h */ case    0:  		/* lwz R10, <#[R21 + 36]> */
		/* 821DDD10h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000024) );
		/* 821DDD10h case    0:*/		return 0x821DDD14;
		  /* 821DDD14h */ case    1:  		/* li R9, 1 */
		/* 821DDD14h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821DDD14h case    1:*/		return 0x821DDD18;
		  /* 821DDD18h */ case    2:  		/* li R11, 0 */
		/* 821DDD18h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DDD18h case    2:*/		return 0x821DDD1C;
		  /* 821DDD1Ch */ case    3:  		/* lwz R8, <#[R21 + 60]> */
		/* 821DDD1Ch case    3:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R21 + 0x0000003C) );
		/* 821DDD1Ch case    3:*/		return 0x821DDD20;
		  /* 821DDD20h */ case    4:  		/* rlwimi R10, R9, 10, 7, 21 */
		/* 821DDD20h case    4:*/		cpu::op::rlwimi<0,10,7,21>(regs,&regs.R10,regs.R9);
		/* 821DDD20h case    4:*/		return 0x821DDD24;
		  /* 821DDD24h */ case    5:  		/* lwz R31, <#[R1 + 84]> */
		/* 821DDD24h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000054) );
		/* 821DDD24h case    5:*/		return 0x821DDD28;
		  /* 821DDD28h */ case    6:  		/* stw R11, <#[R21]> */
		/* 821DDD28h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821DDD28h case    6:*/		return 0x821DDD2C;
		  /* 821DDD2Ch */ case    7:  		/* ori R9, R8, 16 */
		/* 821DDD2Ch case    7:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R8,0x10);
		/* 821DDD2Ch case    7:*/		return 0x821DDD30;
		  /* 821DDD30h */ case    8:  		/* stw R11, <#[R21 + 8]> */
		/* 821DDD30h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821DDD30h case    8:*/		return 0x821DDD34;
		  /* 821DDD34h */ case    9:  		/* mr R3, R31 */
		/* 821DDD34h case    9:*/		regs.R3 = regs.R31;
		/* 821DDD34h case    9:*/		return 0x821DDD38;
		  /* 821DDD38h */ case   10:  		/* stw R11, <#[R21 + 12]> */
		/* 821DDD38h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x0000000C) );
		/* 821DDD38h case   10:*/		return 0x821DDD3C;
		  /* 821DDD3Ch */ case   11:  		/* stw R11, <#[R21 + 4]> */
		/* 821DDD3Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 821DDD3Ch case   11:*/		return 0x821DDD40;
		  /* 821DDD40h */ case   12:  		/* stw R10, <#[R21 + 36]> */
		/* 821DDD40h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R21 + 0x00000024) );
		/* 821DDD40h case   12:*/		return 0x821DDD44;
		  /* 821DDD44h */ case   13:  		/* stw R11, <#[R21 + 16]> */
		/* 821DDD44h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000010) );
		/* 821DDD44h case   13:*/		return 0x821DDD48;
		  /* 821DDD48h */ case   14:  		/* stw R11, <#[R21 + 20]> */
		/* 821DDD48h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000014) );
		/* 821DDD48h case   14:*/		return 0x821DDD4C;
		  /* 821DDD4Ch */ case   15:  		/* stw R9, <#[R21 + 60]> */
		/* 821DDD4Ch case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R21 + 0x0000003C) );
		/* 821DDD4Ch case   15:*/		return 0x821DDD50;
		  /* 821DDD50h */ case   16:  		/* lwz R11, <#[R23 + 44]> */
		/* 821DDD50h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000002C) );
		/* 821DDD50h case   16:*/		return 0x821DDD54;
		  /* 821DDD54h */ case   17:  		/* addis R11, R11, -2 */
		/* 821DDD54h case   17:*/		cpu::op::addis<0>(regs,&regs.R11,regs.R11,0xFFFFFFFE);
		/* 821DDD54h case   17:*/		return 0x821DDD58;
		  /* 821DDD58h */ case   18:  		/* stw R11, <#[R23 + 44]> */
		/* 821DDD58h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x0000002C) );
		/* 821DDD58h case   18:*/		return 0x821DDD5C;
		  /* 821DDD5Ch */ case   19:  		/* bl 81028 */
		/* 821DDD5Ch case   19:*/		regs.LR = 0x821DDD60; return 0x821F19E0;
		/* 821DDD5Ch case   19:*/		return 0x821DDD60;
		  /* 821DDD60h */ case   20:  		/* addi R11, R23, 972 */
		/* 821DDD60h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R23,0x3CC);
		/* 821DDD60h case   20:*/		return 0x821DDD64;
		  /* 821DDD64h */ case   21:  		/* li R3, 1 */
		/* 821DDD64h case   21:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821DDD64h case   21:*/		return 0x821DDD68;
		  /* 821DDD68h */ case   22:  		/* lwz R11, <#[R23 + 976]> */
		/* 821DDD68h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x000003D0) );
		/* 821DDD68h case   22:*/		return 0x821DDD6C;
		  /* 821DDD6Ch */ case   23:  		/* stw R11, <#[R31]> */
		/* 821DDD6Ch case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821DDD6Ch case   23:*/		return 0x821DDD70;
		  /* 821DDD70h */ case   24:  		/* stw R31, <#[R23 + 976]> */
		/* 821DDD70h case   24:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R23 + 0x000003D0) );
		/* 821DDD70h case   24:*/		return 0x821DDD74;
	}
	return 0x821DDD74;
} // Block from 821DDD10h-821DDD74h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821DDD74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDD74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDD74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDD74);
		  /* 821DDD74h */ case    0:  		/* addi R1, R1, 288 */
		/* 821DDD74h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x120);
		/* 821DDD74h case    0:*/		return 0x821DDD78;
		  /* 821DDD78h */ case    1:  		/* b -1362696 */
		/* 821DDD78h case    1:*/		return 0x82091270;
		/* 821DDD78h case    1:*/		return 0x821DDD7C;
		  /* 821DDD7Ch */ case    2:  		/* nop */
		/* 821DDD7Ch case    2:*/		cpu::op::nop();
		/* 821DDD7Ch case    2:*/		return 0x821DDD80;
	}
	return 0x821DDD80;
} // Block from 821DDD74h-821DDD80h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DDD80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDD80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDD80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDD80);
		  /* 821DDD80h */ case    0:  		/* mfspr R12, LR */
		/* 821DDD80h case    0:*/		regs.R12 = regs.LR;
		/* 821DDD80h case    0:*/		return 0x821DDD84;
		  /* 821DDD84h */ case    1:  		/* bl -1362756 */
		/* 821DDD84h case    1:*/		regs.LR = 0x821DDD88; return 0x82091240;
		/* 821DDD84h case    1:*/		return 0x821DDD88;
		  /* 821DDD88h */ case    2:  		/* stfd FR29, <#[R1 - 112]> */
		/* 821DDD88h case    2:*/		cpu::mem::store64f( regs, regs.FR29, (uint32)(regs.R1 + 0xFFFFFF90) );
		/* 821DDD88h case    2:*/		return 0x821DDD8C;
		  /* 821DDD8Ch */ case    3:  		/* stfd FR30, <#[R1 - 104]> */
		/* 821DDD8Ch case    3:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFF98) );
		/* 821DDD8Ch case    3:*/		return 0x821DDD90;
		  /* 821DDD90h */ case    4:  		/* stfd FR31, <#[R1 - 96]> */
		/* 821DDD90h case    4:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFA0) );
		/* 821DDD90h case    4:*/		return 0x821DDD94;
		  /* 821DDD94h */ case    5:  		/* stwu R1, <#[R1 - 272]> */
		/* 821DDD94h case    5:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEF0);
		/* 821DDD94h case    5:*/		return 0x821DDD98;
		  /* 821DDD98h */ case    6:  		/* lwz R11, <#[R3 + 4]> */
		/* 821DDD98h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821DDD98h case    6:*/		return 0x821DDD9C;
		  /* 821DDD9Ch */ case    7:  		/* li R24, 0 */
		/* 821DDD9Ch case    7:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821DDD9Ch case    7:*/		return 0x821DDDA0;
		  /* 821DDDA0h */ case    8:  		/* mr R31, R3 */
		/* 821DDDA0h case    8:*/		regs.R31 = regs.R3;
		/* 821DDDA0h case    8:*/		return 0x821DDDA4;
		  /* 821DDDA4h */ case    9:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DDDA4h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DDDA4h case    9:*/		return 0x821DDDA8;
		  /* 821DDDA8h */ case   10:  		/* stb R24, <#[R1 + 80]> */
		/* 821DDDA8h case   10:*/		cpu::mem::store8( regs, regs.R24, (uint32)(regs.R1 + 0x00000050) );
		/* 821DDDA8h case   10:*/		return 0x821DDDAC;
		  /* 821DDDACh */ case   11:  		/* bc 4, CR0_EQ, 1808 */
		/* 821DDDACh case   11:*/		if ( !regs.CR[0].eq ) { return 0x821DE4BC;  }
		/* 821DDDACh case   11:*/		return 0x821DDDB0;
		  /* 821DDDB0h */ case   12:  		/* mr R23, R11 */
		/* 821DDDB0h case   12:*/		regs.R23 = regs.R11;
		/* 821DDDB0h case   12:*/		return 0x821DDDB4;
		  /* 821DDDB4h */ case   13:  		/* cmplwi CR0, R11, 0 */
		/* 821DDDB4h case   13:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DDDB4h case   13:*/		return 0x821DDDB8;
		  /* 821DDDB8h */ case   14:  		/* bc 12, CR0_EQ, 1796 */
		/* 821DDDB8h case   14:*/		if ( regs.CR[0].eq ) { return 0x821DE4BC;  }
		/* 821DDDB8h case   14:*/		return 0x821DDDBC;
		  /* 821DDDBCh */ case   15:  		/* lis R11, -32256 */
		/* 821DDDBCh case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821DDDBCh case   15:*/		return 0x821DDDC0;
		  /* 821DDDC0h */ case   16:  		/* lis R22, -1 */
		/* 821DDDC0h case   16:*/		cpu::op::lis<0>(regs,&regs.R22,0xFFFFFFFF);
		/* 821DDDC0h case   16:*/		return 0x821DDDC4;
		  /* 821DDDC4h */ case   17:  		/* lfd FR29, <#[R11 + 1808]> */
		/* 821DDDC4h case   17:*/		cpu::mem::load64f( regs, &regs.FR29, (uint32)(regs.R11 + 0x00000710) );
		/* 821DDDC4h case   17:*/		return 0x821DDDC8;
		  /* 821DDDC8h */ case   18:  		/* lwz R11, <#[R23 + 28]> */
		/* 821DDDC8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000001C) );
		/* 821DDDC8h case   18:*/		return 0x821DDDCC;
		  /* 821DDDCCh */ case   19:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DDDCCh case   19:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DDDCCh case   19:*/		return 0x821DDDD0;
		  /* 821DDDD0h */ case   20:  		/* addic R10, R10, -1 */
		/* 821DDDD0h case   20:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821DDDD0h case   20:*/		return 0x821DDDD4;
		  /* 821DDDD4h */ case   21:  		/* subfe R10, R10, R10 */
		/* 821DDDD4h case   21:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821DDDD4h case   21:*/		return 0x821DDDD8;
		  /* 821DDDD8h */ case   22:  		/* and R25, R10, R11 */
		/* 821DDDD8h case   22:*/		cpu::op::and<0>(regs,&regs.R25,regs.R10,regs.R11);
		/* 821DDDD8h case   22:*/		return 0x821DDDDC;
		  /* 821DDDDCh */ case   23:  		/* cmplwi CR6, R25, 0 */
		/* 821DDDDCh case   23:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821DDDDCh case   23:*/		return 0x821DDDE0;
		  /* 821DDDE0h */ case   24:  		/* bc 12, CR6_EQ, 1728 */
		/* 821DDDE0h case   24:*/		if ( regs.CR[6].eq ) { return 0x821DE4A0;  }
		/* 821DDDE0h case   24:*/		return 0x821DDDE4;
		  /* 821DDDE4h */ case   25:  		/* lwz R11, <#[R25 + 8]> */
		/* 821DDDE4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821DDDE4h case   25:*/		return 0x821DDDE8;
		  /* 821DDDE8h */ case   26:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821DDDE8h case   26:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821DDDE8h case   26:*/		return 0x821DDDEC;
		  /* 821DDDECh */ case   27:  		/* cmpwi CR6, R4, 97 */
		/* 821DDDECh case   27:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000061);
		/* 821DDDECh case   27:*/		return 0x821DDDF0;
		  /* 821DDDF0h */ case   28:  		/* bc 12, CR6_GT, 492 */
		/* 821DDDF0h case   28:*/		if ( regs.CR[6].gt ) { return 0x821DDFDC;  }
		/* 821DDDF0h case   28:*/		return 0x821DDDF4;
		  /* 821DDDF4h */ case   29:  		/* bc 12, CR6_EQ, 1404 */
		/* 821DDDF4h case   29:*/		if ( regs.CR[6].eq ) { return 0x821DE370;  }
		/* 821DDDF4h case   29:*/		return 0x821DDDF8;
		  /* 821DDDF8h */ case   30:  		/* cmpwi CR6, R4, 47 */
		/* 821DDDF8h case   30:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x0000002F);
		/* 821DDDF8h case   30:*/		return 0x821DDDFC;
		  /* 821DDDFCh */ case   31:  		/* bc 12, CR6_LT, 1688 */
		/* 821DDDFCh case   31:*/		if ( regs.CR[6].lt ) { return 0x821DE494;  }
		/* 821DDDFCh case   31:*/		return 0x821DDE00;
		  /* 821DDE00h */ case   32:  		/* cmpwi CR6, R4, 48 */
		/* 821DDE00h case   32:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000030);
		/* 821DDE00h case   32:*/		return 0x821DDE04;
		  /* 821DDE04h */ case   33:  		/* bc 4, CR6_GT, 416 */
		/* 821DDE04h case   33:*/		if ( !regs.CR[6].gt ) { return 0x821DDFA4;  }
		/* 821DDE04h case   33:*/		return 0x821DDE08;
		  /* 821DDE08h */ case   34:  		/* cmpwi CR6, R4, 51 */
		/* 821DDE08h case   34:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000033);
		/* 821DDE08h case   34:*/		return 0x821DDE0C;
		  /* 821DDE0Ch */ case   35:  		/* bc 4, CR6_GT, 1672 */
		/* 821DDE0Ch case   35:*/		if ( !regs.CR[6].gt ) { return 0x821DE494;  }
		/* 821DDE0Ch case   35:*/		return 0x821DDE10;
		  /* 821DDE10h */ case   36:  		/* cmpwi CR6, R4, 54 */
		/* 821DDE10h case   36:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000036);
		/* 821DDE10h case   36:*/		return 0x821DDE14;
		  /* 821DDE14h */ case   37:  		/* bc 4, CR6_GT, 336 */
		/* 821DDE14h case   37:*/		if ( !regs.CR[6].gt ) { return 0x821DDF64;  }
		/* 821DDE14h case   37:*/		return 0x821DDE18;
		  /* 821DDE18h */ case   38:  		/* cmpwi CR6, R4, 72 */
		/* 821DDE18h case   38:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000048);
		/* 821DDE18h case   38:*/		return 0x821DDE1C;
		  /* 821DDE1Ch */ case   39:  		/* bc 12, CR6_EQ, 272 */
		/* 821DDE1Ch case   39:*/		if ( regs.CR[6].eq ) { return 0x821DDF2C;  }
		/* 821DDE1Ch case   39:*/		return 0x821DDE20;
		  /* 821DDE20h */ case   40:  		/* cmpwi CR6, R4, 96 */
		/* 821DDE20h case   40:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000060);
		/* 821DDE20h case   40:*/		return 0x821DDE24;
		  /* 821DDE24h */ case   41:  		/* bc 4, CR6_EQ, 1648 */
		/* 821DDE24h case   41:*/		if ( !regs.CR[6].eq ) { return 0x821DE494;  }
		/* 821DDE24h case   41:*/		return 0x821DDE28;
		  /* 821DDE28h */ case   42:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821DDE28h case   42:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821DDE28h case   42:*/		return 0x821DDE2C;
		  /* 821DDE2Ch */ case   43:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821DDE2Ch case   43:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821DDE2Ch case   43:*/		return 0x821DDE30;
		  /* 821DDE30h */ case   44:  		/* mr R3, R31 */
		/* 821DDE30h case   44:*/		regs.R3 = regs.R31;
		/* 821DDE30h case   44:*/		return 0x821DDE34;
		  /* 821DDE34h */ case   45:  		/* bl -498180 */
		/* 821DDE34h case   45:*/		regs.LR = 0x821DDE38; return 0x82164430;
		/* 821DDE34h case   45:*/		return 0x821DDE38;
		  /* 821DDE38h */ case   46:  		/* addi R11, R25, -20 */
		/* 821DDE38h case   46:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFEC);
		/* 821DDE38h case   46:*/		return 0x821DDE3C;
		  /* 821DDE3Ch */ case   47:  		/* add R30, R3, R11 */
		/* 821DDE3Ch case   47:*/		cpu::op::add<0>(regs,&regs.R30,regs.R3,regs.R11);
		/* 821DDE3Ch case   47:*/		return 0x821DDE40;
		  /* 821DDE40h */ case   48:  		/* lwz R5, <#[R30 + 16]> */
		/* 821DDE40h case   48:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000010) );
		/* 821DDE40h case   48:*/		return 0x821DDE44;
		  /* 821DDE44h */ case   49:  		/* cmplwi CR6, R5, 0 */
		/* 821DDE44h case   49:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821DDE44h case   49:*/		return 0x821DDE48;
		  /* 821DDE48h */ case   50:  		/* bc 12, CR6_EQ, 144 */
		/* 821DDE48h case   50:*/		if ( regs.CR[6].eq ) { return 0x821DDED8;  }
		/* 821DDE48h case   50:*/		return 0x821DDE4C;
		  /* 821DDE4Ch */ case   51:  		/* addi R6, R1, 96 */
		/* 821DDE4Ch case   51:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x60);
		/* 821DDE4Ch case   51:*/		return 0x821DDE50;
		  /* 821DDE50h */ case   52:  		/* mr R4, R25 */
		/* 821DDE50h case   52:*/		regs.R4 = regs.R25;
		/* 821DDE50h case   52:*/		return 0x821DDE54;
		  /* 821DDE54h */ case   53:  		/* mr R3, R31 */
		/* 821DDE54h case   53:*/		regs.R3 = regs.R31;
		/* 821DDE54h case   53:*/		return 0x821DDE58;
		  /* 821DDE58h */ case   54:  		/* bl -119880 */
		/* 821DDE58h case   54:*/		regs.LR = 0x821DDE5C; return 0x821C0A10;
		/* 821DDE58h case   54:*/		return 0x821DDE5C;
		  /* 821DDE5Ch */ case   55:  		/* cmpwi CR0, R3, 0 */
		/* 821DDE5Ch case   55:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821DDE5Ch case   55:*/		return 0x821DDE60;
		  /* 821DDE60h */ case   56:  		/* bc 4, CR0_EQ, 152 */
		/* 821DDE60h case   56:*/		if ( !regs.CR[0].eq ) { return 0x821DDEF8;  }
		/* 821DDE60h case   56:*/		return 0x821DDE64;
		  /* 821DDE64h */ case   57:  		/* lwz R11, <#[R30 + 16]> */
		/* 821DDE64h case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821DDE64h case   57:*/		return 0x821DDE68;
		  /* 821DDE68h */ case   58:  		/* mr R3, R31 */
		/* 821DDE68h case   58:*/		regs.R3 = regs.R31;
		/* 821DDE68h case   58:*/		return 0x821DDE6C;
		  /* 821DDE6Ch */ case   59:  		/* lwz R29, <#[R11]> */
		/* 821DDE6Ch case   59:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 821DDE6Ch case   59:*/		return 0x821DDE70;
		  /* 821DDE70h */ case   60:  		/* lwz R4, <#[R29 + 120]> */
		/* 821DDE70h case   60:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000078) );
		/* 821DDE70h case   60:*/		return 0x821DDE74;
		  /* 821DDE74h */ case   61:  		/* bl 57036 */
		/* 821DDE74h case   61:*/		regs.LR = 0x821DDE78; return 0x821EBD40;
		/* 821DDE74h case   61:*/		return 0x821DDE78;
		  /* 821DDE78h */ case   62:  		/* lwz R11, <#[R1 + 96]> */
		/* 821DDE78h case   62:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000060) );
		/* 821DDE78h case   62:*/		return 0x821DDE7C;
		  /* 821DDE7Ch */ case   63:  		/* lis R10, -32235 */
		/* 821DDE7Ch case   63:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8215);
		/* 821DDE7Ch case   63:*/		return 0x821DDE80;
		  /* 821DDE80h */ case   64:  		/* mr R28, R3 */
		/* 821DDE80h case   64:*/		regs.R28 = regs.R3;
		/* 821DDE80h case   64:*/		return 0x821DDE84;
		  /* 821DDE84h */ case   65:  		/* mr R9, R31 */
		/* 821DDE84h case   65:*/		regs.R9 = regs.R31;
		/* 821DDE84h case   65:*/		return 0x821DDE88;
		  /* 821DDE88h */ case   66:  		/* addi R8, R10, 7848 */
		/* 821DDE88h case   66:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1EA8);
		/* 821DDE88h case   66:*/		return 0x821DDE8C;
		  /* 821DDE8Ch */ case   67:  		/* addi R7, R1, 81 */
		/* 821DDE8Ch case   67:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x51);
		/* 821DDE8Ch case   67:*/		return 0x821DDE90;
		  /* 821DDE90h */ case   68:  		/* stw R11, <#[R29 + 120]> */
		/* 821DDE90h case   68:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000078) );
		/* 821DDE90h case   68:*/		return 0x821DDE94;
		  /* 821DDE94h */ case   69:  		/* addi R6, R1, 104 */
		/* 821DDE94h case   69:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x68);
		/* 821DDE94h case   69:*/		return 0x821DDE98;
		  /* 821DDE98h */ case   70:  		/* stb R24, <#[R1 + 81]> */
		/* 821DDE98h case   70:*/		cpu::mem::store8( regs, regs.R24, (uint32)(regs.R1 + 0x00000051) );
		/* 821DDE98h case   70:*/		return 0x821DDE9C;
		  /* 821DDE9Ch */ case   71:  		/* addi R5, R1, 100 */
		/* 821DDE9Ch case   71:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x64);
		/* 821DDE9Ch case   71:*/		return 0x821DDEA0;
		  /* 821DDEA0h */ case   72:  		/* mr R4, R30 */
		/* 821DDEA0h case   72:*/		regs.R4 = regs.R30;
		/* 821DDEA0h case   72:*/		return 0x821DDEA4;
		  /* 821DDEA4h */ case   73:  		/* mr R3, R29 */
		/* 821DDEA4h case   73:*/		regs.R3 = regs.R29;
		/* 821DDEA4h case   73:*/		return 0x821DDEA8;
		  /* 821DDEA8h */ case   74:  		/* bl -1108400 */
		/* 821DDEA8h case   74:*/		regs.LR = 0x821DDEAC; return 0x820CF4F8;
		/* 821DDEA8h case   74:*/		return 0x821DDEAC;
		  /* 821DDEACh */ case   75:  		/* lwz R11, <#[R1 + 100]> */
		/* 821DDEACh case   75:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 821DDEACh case   75:*/		return 0x821DDEB0;
		  /* 821DDEB0h */ case   76:  		/* lwz R9, <#[R1 + 104]> */
		/* 821DDEB0h case   76:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000068) );
		/* 821DDEB0h case   76:*/		return 0x821DDEB4;
		  /* 821DDEB4h */ case   77:  		/* lbz R10, <#[R1 + 81]> */
		/* 821DDEB4h case   77:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000051) );
		/* 821DDEB4h case   77:*/		return 0x821DDEB8;
		  /* 821DDEB8h */ case   78:  		/* cmplwi CR0, R10, 0 */
		/* 821DDEB8h case   78:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 821DDEB8h case   78:*/		return 0x821DDEBC;
		  /* 821DDEBCh */ case   79:  		/* stb R11, <#[R30 + 15]> */
		/* 821DDEBCh case   79:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R30 + 0x0000000F) );
		/* 821DDEBCh case   79:*/		return 0x821DDEC0;
		  /* 821DDEC0h */ case   80:  		/* lwz R11, <#[R30 + 12]> */
		/* 821DDEC0h case   80:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821DDEC0h case   80:*/		return 0x821DDEC4;
		  /* 821DDEC4h */ case   81:  		/* rlwimi R11, R9, 16, 15, 15 */
		/* 821DDEC4h case   81:*/		cpu::op::rlwimi<0,16,15,15>(regs,&regs.R11,regs.R9);
		/* 821DDEC4h case   81:*/		return 0x821DDEC8;
		  /* 821DDEC8h */ case   82:  		/* stw R11, <#[R30 + 12]> */
		/* 821DDEC8h case   82:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821DDEC8h case   82:*/		return 0x821DDECC;
		  /* 821DDECCh */ case   83:  		/* bc 4, CR0_EQ, 1592 */
		/* 821DDECCh case   83:*/		if ( !regs.CR[0].eq ) { return 0x821DE504;  }
		/* 821DDECCh case   83:*/		return 0x821DDED0;
		  /* 821DDED0h */ case   84:  		/* stw R28, <#[R29 + 120]> */
		/* 821DDED0h case   84:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R29 + 0x00000078) );
		/* 821DDED0h case   84:*/		return 0x821DDED4;
		  /* 821DDED4h */ case   85:  		/* stw R24, <#[R30 + 16]> */
		/* 821DDED4h case   85:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R30 + 0x00000010) );
		/* 821DDED4h case   85:*/		return 0x821DDED8;
	}
	return 0x821DDED8;
} // Block from 821DDD80h-821DDED8h (86 instructions)

//////////////////////////////////////////////////////
// Block at 821DDED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDED8);
		  /* 821DDED8h */ case    0:  		/* lbz R11, <#[R30 + 15]> */
		/* 821DDED8h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000F) );
		/* 821DDED8h case    0:*/		return 0x821DDEDC;
		  /* 821DDEDCh */ case    1:  		/* cmplwi CR6, R11, 255 */
		/* 821DDEDCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x000000FF);
		/* 821DDEDCh case    1:*/		return 0x821DDEE0;
		  /* 821DDEE0h */ case    2:  		/* bc 12, CR6_EQ, 1460 */
		/* 821DDEE0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DE494;  }
		/* 821DDEE0h case    2:*/		return 0x821DDEE4;
		  /* 821DDEE4h */ case    3:  		/* lwz R11, <#[R31 + 48]> */
		/* 821DDEE4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821DDEE4h case    3:*/		return 0x821DDEE8;
		  /* 821DDEE8h */ case    4:  		/* rlwinm R11, R11, 0, 0, 15 */
		/* 821DDEE8h case    4:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R11,regs.R11);
		/* 821DDEE8h case    4:*/		return 0x821DDEEC;
		  /* 821DDEECh */ case    5:  		/* cmplw CR6, R11, R22 */
		/* 821DDEECh case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 821DDEECh case    5:*/		return 0x821DDEF0;
		  /* 821DDEF0h */ case    6:  		/* bc 4, CR6_EQ, 1444 */
		/* 821DDEF0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DE494;  }
		/* 821DDEF0h case    6:*/		return 0x821DDEF4;
		  /* 821DDEF4h */ case    7:  		/* li R3, 3639 */
		/* 821DDEF4h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0xE37);
		/* 821DDEF4h case    7:*/		return 0x821DDEF8;
	}
	return 0x821DDEF8;
} // Block from 821DDED8h-821DDEF8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821DDEF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDEF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDEF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDEF8);
		  /* 821DDEF8h */ case    0:  		/* lfd FR1, <#[R31 + 624]> */
		/* 821DDEF8h case    0:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R31 + 0x00000270) );
		/* 821DDEF8h case    0:*/		return 0x821DDEFC;
		  /* 821DDEFCh */ case    1:  		/* mr R4, R3 */
		/* 821DDEFCh case    1:*/		regs.R4 = regs.R3;
		/* 821DDEFCh case    1:*/		return 0x821DDF00;
		  /* 821DDF00h */ case    2:  		/* lfd FR3, <#[R31 + 640]> */
		/* 821DDF00h case    2:*/		cpu::mem::load64f( regs, &regs.FR3, (uint32)(regs.R31 + 0x00000280) );
		/* 821DDF00h case    2:*/		return 0x821DDF04;
		  /* 821DDF04h */ case    3:  		/* mr R5, R25 */
		/* 821DDF04h case    3:*/		regs.R5 = regs.R25;
		/* 821DDF04h case    3:*/		return 0x821DDF08;
		  /* 821DDF08h */ case    4:  		/* lfd FR2, <#[R31 + 632]> */
		/* 821DDF08h case    4:*/		cpu::mem::load64f( regs, &regs.FR2, (uint32)(regs.R31 + 0x00000278) );
		/* 821DDF08h case    4:*/		return 0x821DDF0C;
		  /* 821DDF0Ch */ case    5:  		/* mr R3, R31 */
		/* 821DDF0Ch case    5:*/		regs.R3 = regs.R31;
		/* 821DDF0Ch case    5:*/		return 0x821DDF10;
		  /* 821DDF10h */ case    6:  		/* stfd FR1, <#[R1 + 40]> */
		/* 821DDF10h case    6:*/		cpu::mem::store64f( regs, regs.FR1, (uint32)(regs.R1 + 0x00000028) );
		/* 821DDF10h case    6:*/		return 0x821DDF14;
		  /* 821DDF14h */ case    7:  		/* ld R6, <#[R1 + 40]> */
		/* 821DDF14h case    7:*/		cpu::mem::load64( regs, &regs.R6, (uint32)(regs.R1 + 0x00000028) );
		/* 821DDF14h case    7:*/		return 0x821DDF18;
		  /* 821DDF18h */ case    8:  		/* stfd FR3, <#[R1 + 56]> */
		/* 821DDF18h case    8:*/		cpu::mem::store64f( regs, regs.FR3, (uint32)(regs.R1 + 0x00000038) );
		/* 821DDF18h case    8:*/		return 0x821DDF1C;
		  /* 821DDF1Ch */ case    9:  		/* ld R8, <#[R1 + 56]> */
		/* 821DDF1Ch case    9:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R1 + 0x00000038) );
		/* 821DDF1Ch case    9:*/		return 0x821DDF20;
		  /* 821DDF20h */ case   10:  		/* stfd FR2, <#[R1 + 48]> */
		/* 821DDF20h case   10:*/		cpu::mem::store64f( regs, regs.FR2, (uint32)(regs.R1 + 0x00000030) );
		/* 821DDF20h case   10:*/		return 0x821DDF24;
		  /* 821DDF24h */ case   11:  		/* ld R7, <#[R1 + 48]> */
		/* 821DDF24h case   11:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R1 + 0x00000030) );
		/* 821DDF24h case   11:*/		return 0x821DDF28;
		  /* 821DDF28h */ case   12:  		/* bl -573632 */
		/* 821DDF28h case   12:*/		regs.LR = 0x821DDF2C; return 0x82151E68;
		/* 821DDF28h case   12:*/		return 0x821DDF2C;
	}
	return 0x821DDF2C;
} // Block from 821DDEF8h-821DDF2Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821DDF2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDF2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDF2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDF2C);
		  /* 821DDF2Ch */ case    0:  		/* lwz R11, <#[R25 + 44]> */
		/* 821DDF2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000002C) );
		/* 821DDF2Ch case    0:*/		return 0x821DDF30;
		  /* 821DDF30h */ case    1:  		/* lwz R10, <#[R11 + 12]> */
		/* 821DDF30h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DDF30h case    1:*/		return 0x821DDF34;
		  /* 821DDF34h */ case    2:  		/* lwz R11, <#[R11]> */
		/* 821DDF34h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821DDF34h case    2:*/		return 0x821DDF38;
		  /* 821DDF38h */ case    3:  		/* rlwinm R9, R11, 29, 28, 29 */
		/* 821DDF38h case    3:*/		cpu::op::rlwinm<0,29,28,29>(regs,&regs.R9,regs.R11);
		/* 821DDF38h case    3:*/		return 0x821DDF3C;
		  /* 821DDF3Ch */ case    4:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 821DDF3Ch case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 821DDF3Ch case    4:*/		return 0x821DDF40;
		  /* 821DDF40h */ case    5:  		/* lhz R11, <#[R10 + 14]> */
		/* 821DDF40h case    5:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000E) );
		/* 821DDF40h case    5:*/		return 0x821DDF44;
		  /* 821DDF44h */ case    6:  		/* srw R11, R11, R9 */
		/* 821DDF44h case    6:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821DDF44h case    6:*/		return 0x821DDF48;
		  /* 821DDF48h */ case    7:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821DDF48h case    7:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821DDF48h case    7:*/		return 0x821DDF4C;
		  /* 821DDF4Ch */ case    8:  		/* bl -274124 */
		/* 821DDF4Ch case    8:*/		regs.LR = 0x821DDF50; return 0x8219B080;
		/* 821DDF4Ch case    8:*/		return 0x821DDF50;
		  /* 821DDF50h */ case    9:  		/* rlwinm R11, R3, 0, 30, 31 */
		/* 821DDF50h case    9:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R3);
		/* 821DDF50h case    9:*/		return 0x821DDF54;
		  /* 821DDF54h */ case   10:  		/* cmplwi CR6, R11, 1 */
		/* 821DDF54h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821DDF54h case   10:*/		return 0x821DDF58;
		  /* 821DDF58h */ case   11:  		/* bc 4, CR6_EQ, 1340 */
		/* 821DDF58h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821DE494;  }
		/* 821DDF58h case   11:*/		return 0x821DDF5C;
		  /* 821DDF5Ch */ case   12:  		/* li R3, 4003 */
		/* 821DDF5Ch case   12:*/		cpu::op::li<0>(regs,&regs.R3,0xFA3);
		/* 821DDF5Ch case   12:*/		return 0x821DDF60;
		  /* 821DDF60h */ case   13:  		/* b -104 */
		/* 821DDF60h case   13:*/		return 0x821DDEF8;
		/* 821DDF60h case   13:*/		return 0x821DDF64;
	}
	return 0x821DDF64;
} // Block from 821DDF2Ch-821DDF64h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821DDF64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDF64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDF64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDF64);
		  /* 821DDF64h */ case    0:  		/* lwz R11, <#[R25 + 44]> */
		/* 821DDF64h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000002C) );
		/* 821DDF64h case    0:*/		return 0x821DDF68;
		  /* 821DDF68h */ case    1:  		/* lwz R10, <#[R11 + 12]> */
		/* 821DDF68h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DDF68h case    1:*/		return 0x821DDF6C;
		  /* 821DDF6Ch */ case    2:  		/* lwz R11, <#[R11]> */
		/* 821DDF6Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821DDF6Ch case    2:*/		return 0x821DDF70;
		  /* 821DDF70h */ case    3:  		/* rlwinm R9, R11, 29, 28, 29 */
		/* 821DDF70h case    3:*/		cpu::op::rlwinm<0,29,28,29>(regs,&regs.R9,regs.R11);
		/* 821DDF70h case    3:*/		return 0x821DDF74;
		  /* 821DDF74h */ case    4:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 821DDF74h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 821DDF74h case    4:*/		return 0x821DDF78;
		  /* 821DDF78h */ case    5:  		/* lhz R11, <#[R10 + 14]> */
		/* 821DDF78h case    5:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000E) );
		/* 821DDF78h case    5:*/		return 0x821DDF7C;
		  /* 821DDF7Ch */ case    6:  		/* srw R11, R11, R9 */
		/* 821DDF7Ch case    6:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821DDF7Ch case    6:*/		return 0x821DDF80;
		  /* 821DDF80h */ case    7:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821DDF80h case    7:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821DDF80h case    7:*/		return 0x821DDF84;
		  /* 821DDF84h */ case    8:  		/* bl -274180 */
		/* 821DDF84h case    8:*/		regs.LR = 0x821DDF88; return 0x8219B080;
		/* 821DDF84h case    8:*/		return 0x821DDF88;
		  /* 821DDF88h */ case    9:  		/* rlwinm R11, R3, 0, 30, 31 */
		/* 821DDF88h case    9:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R3);
		/* 821DDF88h case    9:*/		return 0x821DDF8C;
		  /* 821DDF8Ch */ case   10:  		/* cmplwi CR6, R11, 3 */
		/* 821DDF8Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821DDF8Ch case   10:*/		return 0x821DDF90;
		  /* 821DDF90h */ case   11:  		/* bc 4, CR6_EQ, -60 */
		/* 821DDF90h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821DDF54;  }
		/* 821DDF90h case   11:*/		return 0x821DDF94;
		  /* 821DDF94h */ case   12:  		/* li R4, 4001 */
		/* 821DDF94h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0xFA1);
		/* 821DDF94h case   12:*/		return 0x821DDF98;
		  /* 821DDF98h */ case   13:  		/* mr R3, R31 */
		/* 821DDF98h case   13:*/		regs.R3 = regs.R31;
		/* 821DDF98h case   13:*/		return 0x821DDF9C;
		  /* 821DDF9Ch */ case   14:  		/* bl -573988 */
		/* 821DDF9Ch case   14:*/		regs.LR = 0x821DDFA0; return 0x82151D78;
		/* 821DDF9Ch case   14:*/		return 0x821DDFA0;
		  /* 821DDFA0h */ case   15:  		/* b 1268 */
		/* 821DDFA0h case   15:*/		return 0x821DE494;
		/* 821DDFA0h case   15:*/		return 0x821DDFA4;
	}
	return 0x821DDFA4;
} // Block from 821DDF64h-821DDFA4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821DDFA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDFA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDFA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDFA4);
		  /* 821DDFA4h */ case    0:  		/* lwz R11, <#[R25 + 44]> */
		/* 821DDFA4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000002C) );
		/* 821DDFA4h case    0:*/		return 0x821DDFA8;
		  /* 821DDFA8h */ case    1:  		/* lwz R10, <#[R11 + 12]> */
		/* 821DDFA8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DDFA8h case    1:*/		return 0x821DDFAC;
		  /* 821DDFACh */ case    2:  		/* lwz R11, <#[R11]> */
		/* 821DDFACh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821DDFACh case    2:*/		return 0x821DDFB0;
		  /* 821DDFB0h */ case    3:  		/* rlwinm R9, R11, 29, 28, 29 */
		/* 821DDFB0h case    3:*/		cpu::op::rlwinm<0,29,28,29>(regs,&regs.R9,regs.R11);
		/* 821DDFB0h case    3:*/		return 0x821DDFB4;
		  /* 821DDFB4h */ case    4:  		/* rlwinm R4, R11, 0, 27, 31 */
		/* 821DDFB4h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R11);
		/* 821DDFB4h case    4:*/		return 0x821DDFB8;
		  /* 821DDFB8h */ case    5:  		/* lhz R11, <#[R10 + 14]> */
		/* 821DDFB8h case    5:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000E) );
		/* 821DDFB8h case    5:*/		return 0x821DDFBC;
		  /* 821DDFBCh */ case    6:  		/* srw R11, R11, R9 */
		/* 821DDFBCh case    6:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821DDFBCh case    6:*/		return 0x821DDFC0;
		  /* 821DDFC0h */ case    7:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821DDFC0h case    7:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821DDFC0h case    7:*/		return 0x821DDFC4;
		  /* 821DDFC4h */ case    8:  		/* bl -274244 */
		/* 821DDFC4h case    8:*/		regs.LR = 0x821DDFC8; return 0x8219B080;
		/* 821DDFC4h case    8:*/		return 0x821DDFC8;
		  /* 821DDFC8h */ case    9:  		/* rlwinm R11, R3, 0, 30, 31 */
		/* 821DDFC8h case    9:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R3);
		/* 821DDFC8h case    9:*/		return 0x821DDFCC;
		  /* 821DDFCCh */ case   10:  		/* cmplwi CR6, R11, 1 */
		/* 821DDFCCh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821DDFCCh case   10:*/		return 0x821DDFD0;
		  /* 821DDFD0h */ case   11:  		/* bc 4, CR6_EQ, 1220 */
		/* 821DDFD0h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821DE494;  }
		/* 821DDFD0h case   11:*/		return 0x821DDFD4;
		  /* 821DDFD4h */ case   12:  		/* li R3, 4002 */
		/* 821DDFD4h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0xFA2);
		/* 821DDFD4h case   12:*/		return 0x821DDFD8;
		  /* 821DDFD8h */ case   13:  		/* b -224 */
		/* 821DDFD8h case   13:*/		return 0x821DDEF8;
		/* 821DDFD8h case   13:*/		return 0x821DDFDC;
	}
	return 0x821DDFDC;
} // Block from 821DDFA4h-821DDFDCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 821DDFDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DDFDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DDFDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DDFDC);
		  /* 821DDFDCh */ case    0:  		/* cmpwi CR6, R4, 99 */
		/* 821DDFDCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000063);
		/* 821DDFDCh case    0:*/		return 0x821DDFE0;
		  /* 821DDFE0h */ case    1:  		/* bc 12, CR6_LT, 1204 */
		/* 821DDFE0h case    1:*/		if ( regs.CR[6].lt ) { return 0x821DE494;  }
		/* 821DDFE0h case    1:*/		return 0x821DDFE4;
		  /* 821DDFE4h */ case    2:  		/* cmpwi CR6, R4, 100 */
		/* 821DDFE4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000064);
		/* 821DDFE4h case    2:*/		return 0x821DDFE8;
		  /* 821DDFE8h */ case    3:  		/* bc 4, CR6_GT, 904 */
		/* 821DDFE8h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821DE370;  }
		/* 821DDFE8h case    3:*/		return 0x821DDFEC;
		  /* 821DDFECh */ case    4:  		/* cmpwi CR6, R4, 102 */
		/* 821DDFECh case    4:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000066);
		/* 821DDFECh case    4:*/		return 0x821DDFF0;
		  /* 821DDFF0h */ case    5:  		/* bc 4, CR6_GT, 864 */
		/* 821DDFF0h case    5:*/		if ( !regs.CR[6].gt ) { return 0x821DE350;  }
		/* 821DDFF0h case    5:*/		return 0x821DDFF4;
		  /* 821DDFF4h */ case    6:  		/* cmpwi CR6, R4, 107 */
		/* 821DDFF4h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x0000006B);
		/* 821DDFF4h case    6:*/		return 0x821DDFF8;
		  /* 821DDFF8h */ case    7:  		/* bc 12, CR6_EQ, 364 */
		/* 821DDFF8h case    7:*/		if ( regs.CR[6].eq ) { return 0x821DE164;  }
		/* 821DDFF8h case    7:*/		return 0x821DDFFC;
		  /* 821DDFFCh */ case    8:  		/* cmpwi CR6, R4, 118 */
		/* 821DDFFCh case    8:*/		cpu::op::cmpwi<6>(regs,regs.R4,0x00000076);
		/* 821DDFFCh case    8:*/		return 0x821DE000;
		  /* 821DE000h */ case    9:  		/* bc 4, CR6_EQ, 1172 */
		/* 821DE000h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821DE494;  }
		/* 821DE000h case    9:*/		return 0x821DE004;
		  /* 821DE004h */ case   10:  		/* lwz R11, <#[R31 + 40]> */
		/* 821DE004h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821DE004h case   10:*/		return 0x821DE008;
		  /* 821DE008h */ case   11:  		/* ori R11, R11, 16 */
		/* 821DE008h case   11:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x10);
		/* 821DE008h case   11:*/		return 0x821DE00C;
		  /* 821DE00Ch */ case   12:  		/* stw R11, <#[R31 + 40]> */
		/* 821DE00Ch case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821DE00Ch case   12:*/		return 0x821DE010;
		  /* 821DE010h */ case   13:  		/* lwz R10, <#[R25 + 48]> */
		/* 821DE010h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000030) );
		/* 821DE010h case   13:*/		return 0x821DE014;
		  /* 821DE014h */ case   14:  		/* lwz R11, <#[R25 + 16]> */
		/* 821DE014h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000010) );
		/* 821DE014h case   14:*/		return 0x821DE018;
		  /* 821DE018h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 821DE018h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DE018h case   15:*/		return 0x821DE01C;
		  /* 821DE01Ch */ case   16:  		/* lwz R10, <#[R10 + 12]> */
		/* 821DE01Ch case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 821DE01Ch case   16:*/		return 0x821DE020;
		  /* 821DE020h */ case   17:  		/* lwz R30, <#[R10 + 44]> */
		/* 821DE020h case   17:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + 0x0000002C) );
		/* 821DE020h case   17:*/		return 0x821DE024;
		  /* 821DE024h */ case   18:  		/* bc 12, CR6_EQ, 1136 */
		/* 821DE024h case   18:*/		if ( regs.CR[6].eq ) { return 0x821DE494;  }
		/* 821DE024h case   18:*/		return 0x821DE028;
		  /* 821DE028h */ case   19:  		/* lwz R10, <#[R11]> */
		/* 821DE028h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DE028h case   19:*/		return 0x821DE02C;
		  /* 821DE02Ch */ case   20:  		/* cmpwi CR6, R10, 0 */
		/* 821DE02Ch case   20:*/		cpu::op::cmpwi<6>(regs,regs.R10,0x00000000);
		/* 821DE02Ch case   20:*/		return 0x821DE030;
		  /* 821DE030h */ case   21:  		/* bc 12, CR6_EQ, 16 */
		/* 821DE030h case   21:*/		if ( regs.CR[6].eq ) { return 0x821DE040;  }
		/* 821DE030h case   21:*/		return 0x821DE034;
		  /* 821DE034h */ case   22:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DE034h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DE034h case   22:*/		return 0x821DE038;
		  /* 821DE038h */ case   23:  		/* cmplwi CR6, R11, 0 */
		/* 821DE038h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DE038h case   23:*/		return 0x821DE03C;
		  /* 821DE03Ch */ case   24:  		/* bc 4, CR6_EQ, -20 */
		/* 821DE03Ch case   24:*/		if ( !regs.CR[6].eq ) { return 0x821DE028;  }
		/* 821DE03Ch case   24:*/		return 0x821DE040;
	}
	return 0x821DE040;
} // Block from 821DDFDCh-821DE040h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821DE040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE040);
		  /* 821DE040h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821DE040h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DE040h case    0:*/		return 0x821DE044;
		  /* 821DE044h */ case    1:  		/* bc 12, CR6_EQ, 1104 */
		/* 821DE044h case    1:*/		if ( regs.CR[6].eq ) { return 0x821DE494;  }
		/* 821DE044h case    1:*/		return 0x821DE048;
		  /* 821DE048h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821DE048h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821DE048h case    2:*/		return 0x821DE04C;
		  /* 821DE04Ch */ case    3:  		/* li R10, 0 */
		/* 821DE04Ch case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821DE04Ch case    3:*/		return 0x821DE050;
		  /* 821DE050h */ case    4:  		/* li R9, 0 */
		/* 821DE050h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821DE050h case    4:*/		return 0x821DE054;
		  /* 821DE054h */ case    5:  		/* rlwinm R29, R11, 18, 18, 31 */
		/* 821DE054h case    5:*/		cpu::op::rlwinm<0,18,18,31>(regs,&regs.R29,regs.R11);
		/* 821DE054h case    5:*/		return 0x821DE058;
		  /* 821DE058h */ case    6:  		/* rlwinm R11, R11, 0, 18, 31 */
		/* 821DE058h case    6:*/		cpu::op::rlwinm<0,0,18,31>(regs,&regs.R11,regs.R11);
		/* 821DE058h case    6:*/		return 0x821DE05C;
		  /* 821DE05Ch */ case    7:  		/* li R8, 0 */
		/* 821DE05Ch case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821DE05Ch case    7:*/		return 0x821DE060;
		  /* 821DE060h */ case    8:  		/* addi R7, R1, 108 */
		/* 821DE060h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x6C);
		/* 821DE060h case    8:*/		return 0x821DE064;
		  /* 821DE064h */ case    9:  		/* addi R6, R1, 112 */
		/* 821DE064h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x70);
		/* 821DE064h case    9:*/		return 0x821DE068;
		  /* 821DE068h */ case   10:  		/* addi R5, R1, 88 */
		/* 821DE068h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x58);
		/* 821DE068h case   10:*/		return 0x821DE06C;
		  /* 821DE06Ch */ case   11:  		/* li R4, 0 */
		/* 821DE06Ch case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821DE06Ch case   11:*/		return 0x821DE070;
		  /* 821DE070h */ case   12:  		/* mr R3, R30 */
		/* 821DE070h case   12:*/		regs.R3 = regs.R30;
		/* 821DE070h case   12:*/		return 0x821DE074;
		  /* 821DE074h */ case   13:  		/* mullw R29, R29, R11 */
		/* 821DE074h case   13:*/		cpu::op::mullw<0>(regs,&regs.R29,regs.R29,regs.R11);
		/* 821DE074h case   13:*/		return 0x821DE078;
		  /* 821DE078h */ case   14:  		/* bl 283736 */
		/* 821DE078h case   14:*/		regs.LR = 0x821DE07C; return 0x822234D0;
		/* 821DE078h case   14:*/		return 0x821DE07C;
		  /* 821DE07Ch */ case   15:  		/* li R10, 0 */
		/* 821DE07Ch case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821DE07Ch case   15:*/		return 0x821DE080;
		  /* 821DE080h */ case   16:  		/* li R9, 0 */
		/* 821DE080h case   16:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821DE080h case   16:*/		return 0x821DE084;
		  /* 821DE084h */ case   17:  		/* li R8, 0 */
		/* 821DE084h case   17:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821DE084h case   17:*/		return 0x821DE088;
		  /* 821DE088h */ case   18:  		/* addi R7, R1, 116 */
		/* 821DE088h case   18:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x74);
		/* 821DE088h case   18:*/		return 0x821DE08C;
		  /* 821DE08Ch */ case   19:  		/* addi R6, R1, 120 */
		/* 821DE08Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x78);
		/* 821DE08Ch case   19:*/		return 0x821DE090;
		  /* 821DE090h */ case   20:  		/* addi R5, R1, 84 */
		/* 821DE090h case   20:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 821DE090h case   20:*/		return 0x821DE094;
		  /* 821DE094h */ case   21:  		/* li R4, 1 */
		/* 821DE094h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821DE094h case   21:*/		return 0x821DE098;
		  /* 821DE098h */ case   22:  		/* mr R3, R30 */
		/* 821DE098h case   22:*/		regs.R3 = regs.R30;
		/* 821DE098h case   22:*/		return 0x821DE09C;
		  /* 821DE09Ch */ case   23:  		/* bl 283700 */
		/* 821DE09Ch case   23:*/		regs.LR = 0x821DE0A0; return 0x822234D0;
		/* 821DE09Ch case   23:*/		return 0x821DE0A0;
		  /* 821DE0A0h */ case   24:  		/* lwz R3, <#[R1 + 88]> */
		/* 821DE0A0h case   24:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000058) );
		/* 821DE0A0h case   24:*/		return 0x821DE0A4;
		  /* 821DE0A4h */ case   25:  		/* lwz R10, <#[R1 + 84]> */
		/* 821DE0A4h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 821DE0A4h case   25:*/		return 0x821DE0A8;
		  /* 821DE0A8h */ case   26:  		/* lwz R11, <#[R3 + 8]> */
		/* 821DE0A8h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821DE0A8h case   26:*/		return 0x821DE0AC;
		  /* 821DE0ACh */ case   27:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821DE0ACh case   27:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821DE0ACh case   27:*/		return 0x821DE0B0;
		  /* 821DE0B0h */ case   28:  		/* cmplwi CR6, R11, 125 */
		/* 821DE0B0h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 821DE0B0h case   28:*/		return 0x821DE0B4;
		  /* 821DE0B4h */ case   29:  		/* bc 12, CR6_EQ, 44 */
		/* 821DE0B4h case   29:*/		if ( regs.CR[6].eq ) { return 0x821DE0E0;  }
		/* 821DE0B4h case   29:*/		return 0x821DE0B8;
		  /* 821DE0B8h */ case   30:  		/* lwz R9, <#[R10 + 8]> */
		/* 821DE0B8h case   30:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821DE0B8h case   30:*/		return 0x821DE0BC;
		  /* 821DE0BCh */ case   31:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 821DE0BCh case   31:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821DE0BCh case   31:*/		return 0x821DE0C0;
		  /* 821DE0C0h */ case   32:  		/* cmplwi CR6, R9, 16000 */
		/* 821DE0C0h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003E80);
		/* 821DE0C0h case   32:*/		return 0x821DE0C4;
		  /* 821DE0C4h */ case   33:  		/* bc 4, CR6_EQ, 976 */
		/* 821DE0C4h case   33:*/		if ( !regs.CR[6].eq ) { return 0x821DE494;  }
		/* 821DE0C4h case   33:*/		return 0x821DE0C8;
		  /* 821DE0C8h */ case   34:  		/* cmplwi CR6, R11, 125 */
		/* 821DE0C8h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 821DE0C8h case   34:*/		return 0x821DE0CC;
		  /* 821DE0CCh */ case   35:  		/* bc 12, CR6_EQ, 20 */
		/* 821DE0CCh case   35:*/		if ( regs.CR[6].eq ) { return 0x821DE0E0;  }
		/* 821DE0CCh case   35:*/		return 0x821DE0D0;
		  /* 821DE0D0h */ case   36:  		/* mr R11, R3 */
		/* 821DE0D0h case   36:*/		regs.R11 = regs.R3;
		/* 821DE0D0h case   36:*/		return 0x821DE0D4;
		  /* 821DE0D4h */ case   37:  		/* stw R10, <#[R1 + 88]> */
		/* 821DE0D4h case   37:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 821DE0D4h case   37:*/		return 0x821DE0D8;
		  /* 821DE0D8h */ case   38:  		/* mr R3, R10 */
		/* 821DE0D8h case   38:*/		regs.R3 = regs.R10;
		/* 821DE0D8h case   38:*/		return 0x821DE0DC;
		  /* 821DE0DCh */ case   39:  		/* stw R11, <#[R1 + 84]> */
		/* 821DE0DCh case   39:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821DE0DCh case   39:*/		return 0x821DE0E0;
	}
	return 0x821DE0E0;
} // Block from 821DE040h-821DE0E0h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821DE0E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE0E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE0E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE0E0);
		  /* 821DE0E0h */ case    0:  		/* lwz R5, <#[R1 + 108]> */
		/* 821DE0E0h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x0000006C) );
		/* 821DE0E0h case    0:*/		return 0x821DE0E4;
		  /* 821DE0E4h */ case    1:  		/* lwz R4, <#[R1 + 112]> */
		/* 821DE0E4h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000070) );
		/* 821DE0E4h case    1:*/		return 0x821DE0E8;
		  /* 821DE0E8h */ case    2:  		/* bl 275896 */
		/* 821DE0E8h case    2:*/		regs.LR = 0x821DE0EC; return 0x822216A0;
		/* 821DE0E8h case    2:*/		return 0x821DE0EC;
		  /* 821DE0ECh */ case    3:  		/* lwz R3, <#[R1 + 84]> */
		/* 821DE0ECh case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000054) );
		/* 821DE0ECh case    3:*/		return 0x821DE0F0;
		  /* 821DE0F0h */ case    4:  		/* fmr FR31, FR1 */
		/* 821DE0F0h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 821DE0F0h case    4:*/		return 0x821DE0F4;
		  /* 821DE0F4h */ case    5:  		/* lwz R11, <#[R3 + 8]> */
		/* 821DE0F4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821DE0F4h case    5:*/		return 0x821DE0F8;
		  /* 821DE0F8h */ case    6:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DE0F8h case    6:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DE0F8h case    6:*/		return 0x821DE0FC;
		  /* 821DE0FCh */ case    7:  		/* cmplwi CR6, R11, 16000 */
		/* 821DE0FCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821DE0FCh case    7:*/		return 0x821DE100;
		  /* 821DE100h */ case    8:  		/* bc 4, CR6_EQ, 44 */
		/* 821DE100h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821DE12C;  }
		/* 821DE100h case    8:*/		return 0x821DE104;
		  /* 821DE104h */ case    9:  		/* lwz R5, <#[R1 + 116]> */
		/* 821DE104h case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000074) );
		/* 821DE104h case    9:*/		return 0x821DE108;
		  /* 821DE108h */ case   10:  		/* lwz R4, <#[R1 + 120]> */
		/* 821DE108h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000078) );
		/* 821DE108h case   10:*/		return 0x821DE10C;
		  /* 821DE10Ch */ case   11:  		/* bl 275860 */
		/* 821DE10Ch case   11:*/		regs.LR = 0x821DE110; return 0x822216A0;
		/* 821DE10Ch case   11:*/		return 0x821DE110;
		  /* 821DE110h */ case   12:  		/* fmr FR30, FR1 */
		/* 821DE110h case   12:*/		cpu::op::fmr<0>(regs,&regs.FR30,regs.FR1);
		/* 821DE110h case   12:*/		return 0x821DE114;
		  /* 821DE114h */ case   13:  		/* bl -1335620 */
		/* 821DE114h case   13:*/		regs.LR = 0x821DE118; return 0x82097FD0;
		/* 821DE114h case   13:*/		return 0x821DE118;
		  /* 821DE118h */ case   14:  		/* cmpwi CR0, R3, 0 */
		/* 821DE118h case   14:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821DE118h case   14:*/		return 0x821DE11C;
		  /* 821DE11Ch */ case   15:  		/* bc 12, CR0_EQ, 16 */
		/* 821DE11Ch case   15:*/		if ( regs.CR[0].eq ) { return 0x821DE12C;  }
		/* 821DE11Ch case   15:*/		return 0x821DE120;
		  /* 821DE120h */ case   16:  		/* fcmpu CR6, FR31, FR30 */
		/* 821DE120h case   16:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR30);
		/* 821DE120h case   16:*/		return 0x821DE124;
		  /* 821DE124h */ case   17:  		/* bc 12, CR6_GT, 8 */
		/* 821DE124h case   17:*/		if ( regs.CR[6].gt ) { return 0x821DE12C;  }
		/* 821DE124h case   17:*/		return 0x821DE128;
		  /* 821DE128h */ case   18:  		/* fmr FR31, FR30 */
		/* 821DE128h case   18:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR30);
		/* 821DE128h case   18:*/		return 0x821DE12C;
	}
	return 0x821DE12C;
} // Block from 821DE0E0h-821DE12Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 821DE12Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE12C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE12C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE12C);
		  /* 821DE12Ch */ case    0:  		/* fmr FR1, FR31 */
		/* 821DE12Ch case    0:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821DE12Ch case    0:*/		return 0x821DE130;
		  /* 821DE130h */ case    1:  		/* bl -1335648 */
		/* 821DE130h case    1:*/		regs.LR = 0x821DE134; return 0x82097FD0;
		/* 821DE130h case    1:*/		return 0x821DE134;
		  /* 821DE134h */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 821DE134h case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821DE134h case    2:*/		return 0x821DE138;
		  /* 821DE138h */ case    3:  		/* bc 12, CR0_EQ, 36 */
		/* 821DE138h case    3:*/		if ( regs.CR[0].eq ) { return 0x821DE15C;  }
		/* 821DE138h case    3:*/		return 0x821DE13C;
		  /* 821DE13Ch */ case    4:  		/* fcmpu CR6, FR31, FR29 */
		/* 821DE13Ch case    4:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR29);
		/* 821DE13Ch case    4:*/		return 0x821DE140;
		  /* 821DE140h */ case    5:  		/* bc 12, CR6_LT, 28 */
		/* 821DE140h case    5:*/		if ( regs.CR[6].lt ) { return 0x821DE15C;  }
		/* 821DE140h case    5:*/		return 0x821DE144;
		  /* 821DE144h */ case    6:  		/* rldicl R11, R29, 0, 32 */
		/* 821DE144h case    6:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R11,regs.R29);
		/* 821DE144h case    6:*/		return 0x821DE148;
		  /* 821DE148h */ case    7:  		/* std R11, <#[R1 + 136]> */
		/* 821DE148h case    7:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000088) );
		/* 821DE148h case    7:*/		return 0x821DE14C;
		  /* 821DE14Ch */ case    8:  		/* lfd FR0, <#[R1 + 136]> */
		/* 821DE14Ch case    8:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000088) );
		/* 821DE14Ch case    8:*/		return 0x821DE150;
		  /* 821DE150h */ case    9:  		/* fcfid FR0, FR0 */
		/* 821DE150h case    9:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 821DE150h case    9:*/		return 0x821DE154;
		  /* 821DE154h */ case   10:  		/* fcmpu CR6, FR31, FR0 */
		/* 821DE154h case   10:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR0);
		/* 821DE154h case   10:*/		return 0x821DE158;
		  /* 821DE158h */ case   11:  		/* bc 12, CR6_LT, 828 */
		/* 821DE158h case   11:*/		if ( regs.CR[6].lt ) { return 0x821DE494;  }
		/* 821DE158h case   11:*/		return 0x821DE15C;
	}
	return 0x821DE15C;
} // Block from 821DE12Ch-821DE15Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821DE15Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE15C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE15C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE15C);
		  /* 821DE15Ch */ case    0:  		/* li R3, 3504 */
		/* 821DE15Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0xDB0);
		/* 821DE15Ch case    0:*/		return 0x821DE160;
		  /* 821DE160h */ case    1:  		/* b -616 */
		/* 821DE160h case    1:*/		return 0x821DDEF8;
		/* 821DE160h case    1:*/		return 0x821DE164;
	}
	return 0x821DE164;
} // Block from 821DE15Ch-821DE164h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DE164h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE164( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE164) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE164);
		  /* 821DE164h */ case    0:  		/* lwz R30, <#[R25 + 44]> */
		/* 821DE164h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R25 + 0x0000002C) );
		/* 821DE164h case    0:*/		return 0x821DE168;
		  /* 821DE168h */ case    1:  		/* lwz R11, <#[R30 + 12]> */
		/* 821DE168h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821DE168h case    1:*/		return 0x821DE16C;
		  /* 821DE16Ch */ case    2:  		/* lwz R10, <#[R30]> */
		/* 821DE16Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821DE16Ch case    2:*/		return 0x821DE170;
		  /* 821DE170h */ case    3:  		/* rlwinm R9, R10, 29, 28, 29 */
		/* 821DE170h case    3:*/		cpu::op::rlwinm<0,29,28,29>(regs,&regs.R9,regs.R10);
		/* 821DE170h case    3:*/		return 0x821DE174;
		  /* 821DE174h */ case    4:  		/* rlwinm R4, R10, 0, 27, 31 */
		/* 821DE174h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R10);
		/* 821DE174h case    4:*/		return 0x821DE178;
		  /* 821DE178h */ case    5:  		/* lhz R11, <#[R11 + 14]> */
		/* 821DE178h case    5:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000E) );
		/* 821DE178h case    5:*/		return 0x821DE17C;
		  /* 821DE17Ch */ case    6:  		/* srw R11, R11, R9 */
		/* 821DE17Ch case    6:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821DE17Ch case    6:*/		return 0x821DE180;
		  /* 821DE180h */ case    7:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821DE180h case    7:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821DE180h case    7:*/		return 0x821DE184;
		  /* 821DE184h */ case    8:  		/* bl -274692 */
		/* 821DE184h case    8:*/		regs.LR = 0x821DE188; return 0x8219B080;
		/* 821DE184h case    8:*/		return 0x821DE188;
		  /* 821DE188h */ case    9:  		/* lwz R29, <#[R25 + 48]> */
		/* 821DE188h case    9:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R25 + 0x00000030) );
		/* 821DE188h case    9:*/		return 0x821DE18C;
		  /* 821DE18Ch */ case   10:  		/* mr R28, R3 */
		/* 821DE18Ch case   10:*/		regs.R28 = regs.R3;
		/* 821DE18Ch case   10:*/		return 0x821DE190;
		  /* 821DE190h */ case   11:  		/* addi R7, R1, 128 */
		/* 821DE190h case   11:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x80);
		/* 821DE190h case   11:*/		return 0x821DE194;
		  /* 821DE194h */ case   12:  		/* addi R6, R1, 124 */
		/* 821DE194h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x7C);
		/* 821DE194h case   12:*/		return 0x821DE198;
		  /* 821DE198h */ case   13:  		/* addi R5, R1, 92 */
		/* 821DE198h case   13:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x5C);
		/* 821DE198h case   13:*/		return 0x821DE19C;
		  /* 821DE19Ch */ case   14:  		/* mr R4, R29 */
		/* 821DE19Ch case   14:*/		regs.R4 = regs.R29;
		/* 821DE19Ch case   14:*/		return 0x821DE1A0;
		  /* 821DE1A0h */ case   15:  		/* mr R3, R31 */
		/* 821DE1A0h case   15:*/		regs.R3 = regs.R31;
		/* 821DE1A0h case   15:*/		return 0x821DE1A4;
		  /* 821DE1A4h */ case   16:  		/* bl 332116 */
		/* 821DE1A4h case   16:*/		regs.LR = 0x821DE1A8; return 0x8222F2F8;
		/* 821DE1A4h case   16:*/		return 0x821DE1A8;
		  /* 821DE1A8h */ case   17:  		/* lwz R3, <#[R1 + 92]> */
		/* 821DE1A8h case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000005C) );
		/* 821DE1A8h case   17:*/		return 0x821DE1AC;
		  /* 821DE1ACh */ case   18:  		/* lwz R10, <#[R1 + 124]> */
		/* 821DE1ACh case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000007C) );
		/* 821DE1ACh case   18:*/		return 0x821DE1B0;
		  /* 821DE1B0h */ case   19:  		/* mr R26, R24 */
		/* 821DE1B0h case   19:*/		regs.R26 = regs.R24;
		/* 821DE1B0h case   19:*/		return 0x821DE1B4;
		  /* 821DE1B4h */ case   20:  		/* rlwinm R4, R10, 0, 30, 31 */
		/* 821DE1B4h case   20:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R4,regs.R10);
		/* 821DE1B4h case   20:*/		return 0x821DE1B8;
		  /* 821DE1B8h */ case   21:  		/* lwz R11, <#[R3 + 8]> */
		/* 821DE1B8h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821DE1B8h case   21:*/		return 0x821DE1BC;
		  /* 821DE1BCh */ case   22:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DE1BCh case   22:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DE1BCh case   22:*/		return 0x821DE1C0;
		  /* 821DE1C0h */ case   23:  		/* cmplwi CR6, R11, 16000 */
		/* 821DE1C0h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821DE1C0h case   23:*/		return 0x821DE1C4;
		  /* 821DE1C4h */ case   24:  		/* bc 4, CR6_EQ, 172 */
		/* 821DE1C4h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821DE270;  }
		/* 821DE1C4h case   24:*/		return 0x821DE1C8;
		  /* 821DE1C8h */ case   25:  		/* lwz R5, <#[R1 + 128]> */
		/* 821DE1C8h case   25:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000080) );
		/* 821DE1C8h case   25:*/		return 0x821DE1CC;
		  /* 821DE1CCh */ case   26:  		/* bl 275668 */
		/* 821DE1CCh case   26:*/		regs.LR = 0x821DE1D0; return 0x822216A0;
		/* 821DE1CCh case   26:*/		return 0x821DE1D0;
		  /* 821DE1D0h */ case   27:  		/* fmr FR31, FR1 */
		/* 821DE1D0h case   27:*/		cpu::op::fmr<0>(regs,&regs.FR31,regs.FR1);
		/* 821DE1D0h case   27:*/		return 0x821DE1D4;
		  /* 821DE1D4h */ case   28:  		/* fcmpu CR6, FR1, FR29 */
		/* 821DE1D4h case   28:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR29);
		/* 821DE1D4h case   28:*/		return 0x821DE1D8;
		  /* 821DE1D8h */ case   29:  		/* bc 12, CR6_LT, 152 */
		/* 821DE1D8h case   29:*/		if ( regs.CR[6].lt ) { return 0x821DE270;  }
		/* 821DE1D8h case   29:*/		return 0x821DE1DC;
		  /* 821DE1DCh */ case   30:  		/* fctidz FR0, FR1 */
		/* 821DE1DCh case   30:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR1);
		/* 821DE1DCh case   30:*/		return 0x821DE1E0;
		  /* 821DE1E0h */ case   31:  		/* stfd FR0, <#[R1 + 144]> */
		/* 821DE1E0h case   31:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000090) );
		/* 821DE1E0h case   31:*/		return 0x821DE1E4;
		  /* 821DE1E4h */ case   32:  		/* lwz R27, <#[R1 + 148]> */
		/* 821DE1E4h case   32:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000094) );
		/* 821DE1E4h case   32:*/		return 0x821DE1E8;
		  /* 821DE1E8h */ case   33:  		/* mr R11, R27 */
		/* 821DE1E8h case   33:*/		regs.R11 = regs.R27;
		/* 821DE1E8h case   33:*/		return 0x821DE1EC;
		  /* 821DE1ECh */ case   34:  		/* std R27, <#[R1 + 152]> */
		/* 821DE1ECh case   34:*/		cpu::mem::store64( regs, regs.R27, (uint32)(regs.R1 + 0x00000098) );
		/* 821DE1ECh case   34:*/		return 0x821DE1F0;
		  /* 821DE1F0h */ case   35:  		/* lfd FR0, <#[R1 + 152]> */
		/* 821DE1F0h case   35:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000098) );
		/* 821DE1F0h case   35:*/		return 0x821DE1F4;
		  /* 821DE1F4h */ case   36:  		/* fcfid FR0, FR0 */
		/* 821DE1F4h case   36:*/		cpu::op::fcfid<0>(regs,&regs.FR0,regs.FR0);
		/* 821DE1F4h case   36:*/		return 0x821DE1F8;
		  /* 821DE1F8h */ case   37:  		/* fcmpu CR6, FR1, FR0 */
		/* 821DE1F8h case   37:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 821DE1F8h case   37:*/		return 0x821DE1FC;
		  /* 821DE1FCh */ case   38:  		/* bc 4, CR6_EQ, 116 */
		/* 821DE1FCh case   38:*/		if ( !regs.CR[6].eq ) { return 0x821DE270;  }
		/* 821DE1FCh case   38:*/		return 0x821DE200;
		  /* 821DE200h */ case   39:  		/* li R4, 2 */
		/* 821DE200h case   39:*/		cpu::op::li<0>(regs,&regs.R4,0x2);
		/* 821DE200h case   39:*/		return 0x821DE204;
		  /* 821DE204h */ case   40:  		/* mr R3, R30 */
		/* 821DE204h case   40:*/		regs.R3 = regs.R30;
		/* 821DE204h case   40:*/		return 0x821DE208;
		  /* 821DE208h */ case   41:  		/* bl -419656 */
		/* 821DE208h case   41:*/		regs.LR = 0x821DE20C; return 0x82177AC0;
		/* 821DE208h case   41:*/		return 0x821DE20C;
		  /* 821DE20Ch */ case   42:  		/* rlwinm. R11, R27, 0, 31, 31 */
		/* 821DE20Ch case   42:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R27);
		/* 821DE20Ch case   42:*/		return 0x821DE210;
		  /* 821DE210h */ case   43:  		/* bc 12, CR0_EQ, 20 */
		/* 821DE210h case   43:*/		if ( regs.CR[0].eq ) { return 0x821DE224;  }
		/* 821DE210h case   43:*/		return 0x821DE214;
		  /* 821DE214h */ case   44:  		/* rlwinm R11, R28, 0, 30, 31 */
		/* 821DE214h case   44:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R28);
		/* 821DE214h case   44:*/		return 0x821DE218;
		  /* 821DE218h */ case   45:  		/* cmplwi CR6, R11, 1 */
		/* 821DE218h case   45:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821DE218h case   45:*/		return 0x821DE21C;
		  /* 821DE21Ch */ case   46:  		/* bc 4, CR6_EQ, 8 */
		/* 821DE21Ch case   46:*/		if ( !regs.CR[6].eq ) { return 0x821DE224;  }
		/* 821DE21Ch case   46:*/		return 0x821DE220;
		  /* 821DE220h */ case   47:  		/* li R26, 4 */
		/* 821DE220h case   47:*/		cpu::op::li<0>(regs,&regs.R26,0x4);
		/* 821DE220h case   47:*/		return 0x821DE224;
	}
	return 0x821DE224;
} // Block from 821DE164h-821DE224h (48 instructions)

//////////////////////////////////////////////////////
// Block at 821DE224h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE224( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE224) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE224);
		  /* 821DE224h */ case    0:  		/* lwz R11, <#[R30 + 12]> */
		/* 821DE224h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 821DE224h case    0:*/		return 0x821DE228;
		  /* 821DE228h */ case    1:  		/* lwz R10, <#[R30]> */
		/* 821DE228h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821DE228h case    1:*/		return 0x821DE22C;
		  /* 821DE22Ch */ case    2:  		/* rlwinm R9, R10, 29, 28, 29 */
		/* 821DE22Ch case    2:*/		cpu::op::rlwinm<0,29,28,29>(regs,&regs.R9,regs.R10);
		/* 821DE22Ch case    2:*/		return 0x821DE230;
		  /* 821DE230h */ case    3:  		/* rlwinm R4, R10, 0, 27, 31 */
		/* 821DE230h case    3:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R4,regs.R10);
		/* 821DE230h case    3:*/		return 0x821DE234;
		  /* 821DE234h */ case    4:  		/* lhz R11, <#[R11 + 14]> */
		/* 821DE234h case    4:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000E) );
		/* 821DE234h case    4:*/		return 0x821DE238;
		  /* 821DE238h */ case    5:  		/* srw R11, R11, R9 */
		/* 821DE238h case    5:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821DE238h case    5:*/		return 0x821DE23C;
		  /* 821DE23Ch */ case    6:  		/* rlwinm R3, R11, 0, 28, 31 */
		/* 821DE23Ch case    6:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R11);
		/* 821DE23Ch case    6:*/		return 0x821DE240;
		  /* 821DE240h */ case    7:  		/* bl -274880 */
		/* 821DE240h case    7:*/		regs.LR = 0x821DE244; return 0x8219B080;
		/* 821DE240h case    7:*/		return 0x821DE244;
		  /* 821DE244h */ case    8:  		/* mr R28, R3 */
		/* 821DE244h case    8:*/		regs.R28 = regs.R3;
		/* 821DE244h case    8:*/		return 0x821DE248;
		  /* 821DE248h */ case    9:  		/* li R5, 2 */
		/* 821DE248h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x2);
		/* 821DE248h case    9:*/		return 0x821DE24C;
		  /* 821DE24Ch */ case   10:  		/* fmr FR1, FR31 */
		/* 821DE24Ch case   10:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821DE24Ch case   10:*/		return 0x821DE250;
		  /* 821DE250h */ case   11:  		/* mr R3, R31 */
		/* 821DE250h case   11:*/		regs.R3 = regs.R31;
		/* 821DE250h case   11:*/		return 0x821DE254;
		  /* 821DE254h */ case   12:  		/* bl 313676 */
		/* 821DE254h case   12:*/		regs.LR = 0x821DE258; return 0x8222ABA0;
		/* 821DE254h case   12:*/		return 0x821DE258;
		  /* 821DE258h */ case   13:  		/* stw R3, <#[R1 + 92]> */
		/* 821DE258h case   13:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x0000005C) );
		/* 821DE258h case   13:*/		return 0x821DE25C;
		  /* 821DE25Ch */ case   14:  		/* mr R4, R3 */
		/* 821DE25Ch case   14:*/		regs.R4 = regs.R3;
		/* 821DE25Ch case   14:*/		return 0x821DE260;
		  /* 821DE260h */ case   15:  		/* li R5, 0 */
		/* 821DE260h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DE260h case   15:*/		return 0x821DE264;
		  /* 821DE264h */ case   16:  		/* mr R3, R31 */
		/* 821DE264h case   16:*/		regs.R3 = regs.R31;
		/* 821DE264h case   16:*/		return 0x821DE268;
		  /* 821DE268h */ case   17:  		/* bl -418136 */
		/* 821DE268h case   17:*/		regs.LR = 0x821DE26C; return 0x82178110;
		/* 821DE268h case   17:*/		return 0x821DE26C;
		  /* 821DE26Ch */ case   18:  		/* mr R29, R3 */
		/* 821DE26Ch case   18:*/		regs.R29 = regs.R3;
		/* 821DE26Ch case   18:*/		return 0x821DE270;
	}
	return 0x821DE270;
} // Block from 821DE224h-821DE270h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821DE270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE270);
		  /* 821DE270h */ case    0:  		/* rlwinm R11, R28, 0, 30, 31 */
		/* 821DE270h case    0:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R28);
		/* 821DE270h case    0:*/		return 0x821DE274;
		  /* 821DE274h */ case    1:  		/* cmplwi CR6, R11, 1 */
		/* 821DE274h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821DE274h case    1:*/		return 0x821DE278;
		  /* 821DE278h */ case    2:  		/* bc 12, CR6_EQ, -676 */
		/* 821DE278h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DDFD4;  }
		/* 821DE278h case    2:*/		return 0x821DE27C;
		  /* 821DE27Ch */ case    3:  		/* lwz R11, <#[R31 + 652]> */
		/* 821DE27Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000028C) );
		/* 821DE27Ch case    3:*/		return 0x821DE280;
		  /* 821DE280h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821DE280h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DE280h case    4:*/		return 0x821DE284;
		  /* 821DE284h */ case    5:  		/* bc 4, CR6_EQ, 44 */
		/* 821DE284h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821DE2B0;  }
		/* 821DE284h case    5:*/		return 0x821DE288;
		  /* 821DE288h */ case    6:  		/* li R5, 38 */
		/* 821DE288h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 821DE288h case    6:*/		return 0x821DE28C;
		  /* 821DE28Ch */ case    7:  		/* li R4, 8 */
		/* 821DE28Ch case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821DE28Ch case    7:*/		return 0x821DE290;
		  /* 821DE290h */ case    8:  		/* mr R3, R31 */
		/* 821DE290h case    8:*/		regs.R3 = regs.R31;
		/* 821DE290h case    8:*/		return 0x821DE294;
		  /* 821DE294h */ case    9:  		/* bl -498084 */
		/* 821DE294h case    9:*/		regs.LR = 0x821DE298; return 0x821648F0;
		/* 821DE294h case    9:*/		return 0x821DE298;
		  /* 821DE298h */ case   10:  		/* addi R11, R3, 4 */
		/* 821DE298h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0x4);
		/* 821DE298h case   10:*/		return 0x821DE29C;
		  /* 821DE29Ch */ case   11:  		/* ori R10, R3, 1 */
		/* 821DE29Ch case   11:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R3,0x1);
		/* 821DE29Ch case   11:*/		return 0x821DE2A0;
		  /* 821DE2A0h */ case   12:  		/* stw R3, <#[R31 + 652]> */
		/* 821DE2A0h case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000028C) );
		/* 821DE2A0h case   12:*/		return 0x821DE2A4;
		  /* 821DE2A4h */ case   13:  		/* ori R11, R11, 1 */
		/* 821DE2A4h case   13:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821DE2A4h case   13:*/		return 0x821DE2A8;
		  /* 821DE2A8h */ case   14:  		/* stw R10, <#[R3 + 4]> */
		/* 821DE2A8h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821DE2A8h case   14:*/		return 0x821DE2AC;
		  /* 821DE2ACh */ case   15:  		/* stw R11, <#[R3]> */
		/* 821DE2ACh case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821DE2ACh case   15:*/		return 0x821DE2B0;
	}
	return 0x821DE2B0;
} // Block from 821DE270h-821DE2B0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821DE2B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE2B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE2B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE2B0);
		  /* 821DE2B0h */ case    0:  		/* mr R6, R30 */
		/* 821DE2B0h case    0:*/		regs.R6 = regs.R30;
		/* 821DE2B0h case    0:*/		return 0x821DE2B4;
		  /* 821DE2B4h */ case    1:  		/* mr R5, R25 */
		/* 821DE2B4h case    1:*/		regs.R5 = regs.R25;
		/* 821DE2B4h case    1:*/		return 0x821DE2B8;
		  /* 821DE2B8h */ case    2:  		/* li R4, 0 */
		/* 821DE2B8h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821DE2B8h case    2:*/		return 0x821DE2BC;
		  /* 821DE2BCh */ case    3:  		/* mr R3, R31 */
		/* 821DE2BCh case    3:*/		regs.R3 = regs.R31;
		/* 821DE2BCh case    3:*/		return 0x821DE2C0;
		  /* 821DE2C0h */ case    4:  		/* bl -117520 */
		/* 821DE2C0h case    4:*/		regs.LR = 0x821DE2C4; return 0x821C17B0;
		/* 821DE2C0h case    4:*/		return 0x821DE2C4;
		  /* 821DE2C4h */ case    5:  		/* mr R30, R3 */
		/* 821DE2C4h case    5:*/		regs.R30 = regs.R3;
		/* 821DE2C4h case    5:*/		return 0x821DE2C8;
		  /* 821DE2C8h */ case    6:  		/* mr R6, R3 */
		/* 821DE2C8h case    6:*/		regs.R6 = regs.R3;
		/* 821DE2C8h case    6:*/		return 0x821DE2CC;
		  /* 821DE2CCh */ case    7:  		/* mr R7, R29 */
		/* 821DE2CCh case    7:*/		regs.R7 = regs.R29;
		/* 821DE2CCh case    7:*/		return 0x821DE2D0;
		  /* 821DE2D0h */ case    8:  		/* mr R5, R25 */
		/* 821DE2D0h case    8:*/		regs.R5 = regs.R25;
		/* 821DE2D0h case    8:*/		return 0x821DE2D4;
		  /* 821DE2D4h */ case    9:  		/* li R4, 0 */
		/* 821DE2D4h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821DE2D4h case    9:*/		return 0x821DE2D8;
		  /* 821DE2D8h */ case   10:  		/* mr R3, R31 */
		/* 821DE2D8h case   10:*/		regs.R3 = regs.R31;
		/* 821DE2D8h case   10:*/		return 0x821DE2DC;
		  /* 821DE2DCh */ case   11:  		/* bl -115796 */
		/* 821DE2DCh case   11:*/		regs.LR = 0x821DE2E0; return 0x821C1E88;
		/* 821DE2DCh case   11:*/		return 0x821DE2E0;
		  /* 821DE2E0h */ case   12:  		/* mr R29, R3 */
		/* 821DE2E0h case   12:*/		regs.R29 = regs.R3;
		/* 821DE2E0h case   12:*/		return 0x821DE2E4;
		  /* 821DE2E4h */ case   13:  		/* mr R6, R3 */
		/* 821DE2E4h case   13:*/		regs.R6 = regs.R3;
		/* 821DE2E4h case   13:*/		return 0x821DE2E8;
		  /* 821DE2E8h */ case   14:  		/* mr R5, R25 */
		/* 821DE2E8h case   14:*/		regs.R5 = regs.R25;
		/* 821DE2E8h case   14:*/		return 0x821DE2EC;
		  /* 821DE2ECh */ case   15:  		/* li R4, 0 */
		/* 821DE2ECh case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821DE2ECh case   15:*/		return 0x821DE2F0;
		  /* 821DE2F0h */ case   16:  		/* mr R3, R31 */
		/* 821DE2F0h case   16:*/		regs.R3 = regs.R31;
		/* 821DE2F0h case   16:*/		return 0x821DE2F4;
		  /* 821DE2F4h */ case   17:  		/* bl -115196 */
		/* 821DE2F4h case   17:*/		regs.LR = 0x821DE2F8; return 0x821C20F8;
		/* 821DE2F4h case   17:*/		return 0x821DE2F8;
		  /* 821DE2F8h */ case   18:  		/* mr R28, R3 */
		/* 821DE2F8h case   18:*/		regs.R28 = regs.R3;
		/* 821DE2F8h case   18:*/		return 0x821DE2FC;
		  /* 821DE2FCh */ case   19:  		/* mr R4, R30 */
		/* 821DE2FCh case   19:*/		regs.R4 = regs.R30;
		/* 821DE2FCh case   19:*/		return 0x821DE300;
		  /* 821DE300h */ case   20:  		/* lwz R5, <#[R31 + 652]> */
		/* 821DE300h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000028C) );
		/* 821DE300h case   20:*/		return 0x821DE304;
		  /* 821DE304h */ case   21:  		/* mr R3, R31 */
		/* 821DE304h case   21:*/		regs.R3 = regs.R31;
		/* 821DE304h case   21:*/		return 0x821DE308;
		  /* 821DE308h */ case   22:  		/* bl -76096 */
		/* 821DE308h case   22:*/		regs.LR = 0x821DE30C; return 0x821CB9C8;
		/* 821DE308h case   22:*/		return 0x821DE30C;
		  /* 821DE30Ch */ case   23:  		/* mr R4, R29 */
		/* 821DE30Ch case   23:*/		regs.R4 = regs.R29;
		/* 821DE30Ch case   23:*/		return 0x821DE310;
		  /* 821DE310h */ case   24:  		/* mr R3, R31 */
		/* 821DE310h case   24:*/		regs.R3 = regs.R31;
		/* 821DE310h case   24:*/		return 0x821DE314;
		  /* 821DE314h */ case   25:  		/* lwz R5, <#[R31 + 652]> */
		/* 821DE314h case   25:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000028C) );
		/* 821DE314h case   25:*/		return 0x821DE318;
		  /* 821DE318h */ case   26:  		/* bl -76112 */
		/* 821DE318h case   26:*/		regs.LR = 0x821DE31C; return 0x821CB9C8;
		/* 821DE318h case   26:*/		return 0x821DE31C;
		  /* 821DE31Ch */ case   27:  		/* mr R4, R28 */
		/* 821DE31Ch case   27:*/		regs.R4 = regs.R28;
		/* 821DE31Ch case   27:*/		return 0x821DE320;
		  /* 821DE320h */ case   28:  		/* mr R3, R31 */
		/* 821DE320h case   28:*/		regs.R3 = regs.R31;
		/* 821DE320h case   28:*/		return 0x821DE324;
		  /* 821DE324h */ case   29:  		/* lwz R5, <#[R31 + 652]> */
		/* 821DE324h case   29:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000028C) );
		/* 821DE324h case   29:*/		return 0x821DE328;
		  /* 821DE328h */ case   30:  		/* bl -76128 */
		/* 821DE328h case   30:*/		regs.LR = 0x821DE32C; return 0x821CB9C8;
		/* 821DE328h case   30:*/		return 0x821DE32C;
		  /* 821DE32Ch */ case   31:  		/* addi R9, R1, 80 */
		/* 821DE32Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 821DE32Ch case   31:*/		return 0x821DE330;
		  /* 821DE330h */ case   32:  		/* mr R7, R26 */
		/* 821DE330h case   32:*/		regs.R7 = regs.R26;
		/* 821DE330h case   32:*/		return 0x821DE334;
		  /* 821DE334h */ case   33:  		/* lwz R8, <#[R31 + 652]> */
		/* 821DE334h case   33:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000028C) );
		/* 821DE334h case   33:*/		return 0x821DE338;
		  /* 821DE338h */ case   34:  		/* li R6, 228 */
		/* 821DE338h case   34:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821DE338h case   34:*/		return 0x821DE33C;
		  /* 821DE33Ch */ case   35:  		/* mr R5, R28 */
		/* 821DE33Ch case   35:*/		regs.R5 = regs.R28;
		/* 821DE33Ch case   35:*/		return 0x821DE340;
		  /* 821DE340h */ case   36:  		/* mr R4, R25 */
		/* 821DE340h case   36:*/		regs.R4 = regs.R25;
		/* 821DE340h case   36:*/		return 0x821DE344;
		  /* 821DE344h */ case   37:  		/* mr R3, R31 */
		/* 821DE344h case   37:*/		regs.R3 = regs.R31;
		/* 821DE344h case   37:*/		return 0x821DE348;
		  /* 821DE348h */ case   38:  		/* bl 323528 */
		/* 821DE348h case   38:*/		regs.LR = 0x821DE34C; return 0x8222D310;
		/* 821DE348h case   38:*/		return 0x821DE34C;
		  /* 821DE34Ch */ case   39:  		/* b 328 */
		/* 821DE34Ch case   39:*/		return 0x821DE494;
		/* 821DE34Ch case   39:*/		return 0x821DE350;
	}
	return 0x821DE350;
} // Block from 821DE2B0h-821DE350h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821DE350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE350);
		  /* 821DE350h */ case    0:  		/* lwz R10, <#[R31 + 48]> */
		/* 821DE350h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 821DE350h case    0:*/		return 0x821DE354;
		  /* 821DE354h */ case    1:  		/* rlwinm R10, R10, 0, 0, 15 */
		/* 821DE354h case    1:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R10,regs.R10);
		/* 821DE354h case    1:*/		return 0x821DE358;
		  /* 821DE358h */ case    2:  		/* cmplw CR6, R10, R22 */
		/* 821DE358h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R22);
		/* 821DE358h case    2:*/		return 0x821DE35C;
		  /* 821DE35Ch */ case    3:  		/* bc 12, CR6_EQ, 312 */
		/* 821DE35Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821DE494;  }
		/* 821DE35Ch case    3:*/		return 0x821DE360;
		  /* 821DE360h */ case    4:  		/* rlwinm. R11, R11, 5, 31, 31 */
		/* 821DE360h case    4:*/		cpu::op::rlwinm<1,5,31,31>(regs,&regs.R11,regs.R11);
		/* 821DE360h case    4:*/		return 0x821DE364;
		  /* 821DE364h */ case    5:  		/* bc 12, CR0_EQ, 304 */
		/* 821DE364h case    5:*/		if ( regs.CR[0].eq ) { return 0x821DE494;  }
		/* 821DE364h case    5:*/		return 0x821DE368;
		  /* 821DE368h */ case    6:  		/* li R3, 3552 */
		/* 821DE368h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0xDE0);
		/* 821DE368h case    6:*/		return 0x821DE36C;
		  /* 821DE36Ch */ case    7:  		/* b -1140 */
		/* 821DE36Ch case    7:*/		return 0x821DDEF8;
		/* 821DE36Ch case    7:*/		return 0x821DE370;
	}
	return 0x821DE370;
} // Block from 821DE350h-821DE370h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821DE370h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE370);
		  /* 821DE370h */ case    0:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821DE370h case    0:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821DE370h case    0:*/		return 0x821DE374;
		  /* 821DE374h */ case    1:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821DE374h case    1:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821DE374h case    1:*/		return 0x821DE378;
		  /* 821DE378h */ case    2:  		/* mr R3, R31 */
		/* 821DE378h case    2:*/		regs.R3 = regs.R31;
		/* 821DE378h case    2:*/		return 0x821DE37C;
		  /* 821DE37Ch */ case    3:  		/* bl -499532 */
		/* 821DE37Ch case    3:*/		regs.LR = 0x821DE380; return 0x82164430;
		/* 821DE37Ch case    3:*/		return 0x821DE380;
		  /* 821DE380h */ case    4:  		/* addi R11, R25, -24 */
		/* 821DE380h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFE8);
		/* 821DE380h case    4:*/		return 0x821DE384;
		  /* 821DE384h */ case    5:  		/* add R29, R3, R11 */
		/* 821DE384h case    5:*/		cpu::op::add<0>(regs,&regs.R29,regs.R3,regs.R11);
		/* 821DE384h case    5:*/		return 0x821DE388;
		  /* 821DE388h */ case    6:  		/* lwz R5, <#[R29 + 20]> */
		/* 821DE388h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x00000014) );
		/* 821DE388h case    6:*/		return 0x821DE38C;
		  /* 821DE38Ch */ case    7:  		/* cmplwi CR6, R5, 0 */
		/* 821DE38Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821DE38Ch case    7:*/		return 0x821DE390;
		  /* 821DE390h */ case    8:  		/* bc 12, CR6_EQ, 232 */
		/* 821DE390h case    8:*/		if ( regs.CR[6].eq ) { return 0x821DE478;  }
		/* 821DE390h case    8:*/		return 0x821DE394;
		  /* 821DE394h */ case    9:  		/* lwz R11, <#[R5]> */
		/* 821DE394h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 821DE394h case    9:*/		return 0x821DE398;
		  /* 821DE398h */ case   10:  		/* mr R4, R25 */
		/* 821DE398h case   10:*/		regs.R4 = regs.R25;
		/* 821DE398h case   10:*/		return 0x821DE39C;
		  /* 821DE39Ch */ case   11:  		/* mr R3, R31 */
		/* 821DE39Ch case   11:*/		regs.R3 = regs.R31;
		/* 821DE39Ch case   11:*/		return 0x821DE3A0;
		  /* 821DE3A0h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821DE3A0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DE3A0h case   12:*/		return 0x821DE3A4;
		  /* 821DE3A4h */ case   13:  		/* bc 12, CR6_EQ, 192 */
		/* 821DE3A4h case   13:*/		if ( regs.CR[6].eq ) { return 0x821DE464;  }
		/* 821DE3A4h case   13:*/		return 0x821DE3A8;
		  /* 821DE3A8h */ case   14:  		/* addi R6, R1, 132 */
		/* 821DE3A8h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x84);
		/* 821DE3A8h case   14:*/		return 0x821DE3AC;
		  /* 821DE3ACh */ case   15:  		/* bl -121244 */
		/* 821DE3ACh case   15:*/		regs.LR = 0x821DE3B0; return 0x821C0A10;
		/* 821DE3ACh case   15:*/		return 0x821DE3B0;
		  /* 821DE3B0h */ case   16:  		/* cmpwi CR0, R3, 0 */
		/* 821DE3B0h case   16:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821DE3B0h case   16:*/		return 0x821DE3B4;
		  /* 821DE3B4h */ case   17:  		/* bc 4, CR0_EQ, -1212 */
		/* 821DE3B4h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821DDEF8;  }
		/* 821DE3B4h case   17:*/		return 0x821DE3B8;
		  /* 821DE3B8h */ case   18:  		/* lwz R11, <#[R29 + 20]> */
		/* 821DE3B8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 821DE3B8h case   18:*/		return 0x821DE3BC;
		  /* 821DE3BCh */ case   19:  		/* mr R3, R31 */
		/* 821DE3BCh case   19:*/		regs.R3 = regs.R31;
		/* 821DE3BCh case   19:*/		return 0x821DE3C0;
		  /* 821DE3C0h */ case   20:  		/* lwz R30, <#[R11]> */
		/* 821DE3C0h case   20:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 821DE3C0h case   20:*/		return 0x821DE3C4;
		  /* 821DE3C4h */ case   21:  		/* lwz R4, <#[R30 + 120]> */
		/* 821DE3C4h case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000078) );
		/* 821DE3C4h case   21:*/		return 0x821DE3C8;
		  /* 821DE3C8h */ case   22:  		/* bl 55672 */
		/* 821DE3C8h case   22:*/		regs.LR = 0x821DE3CC; return 0x821EBD40;
		/* 821DE3C8h case   22:*/		return 0x821DE3CC;
		  /* 821DE3CCh */ case   23:  		/* lwz R11, <#[R1 + 132]> */
		/* 821DE3CCh case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000084) );
		/* 821DE3CCh case   23:*/		return 0x821DE3D0;
		  /* 821DE3D0h */ case   24:  		/* lis R10, -32235 */
		/* 821DE3D0h case   24:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8215);
		/* 821DE3D0h case   24:*/		return 0x821DE3D4;
		  /* 821DE3D4h */ case   25:  		/* mr R28, R3 */
		/* 821DE3D4h case   25:*/		regs.R28 = regs.R3;
		/* 821DE3D4h case   25:*/		return 0x821DE3D8;
		  /* 821DE3D8h */ case   26:  		/* mr R7, R31 */
		/* 821DE3D8h case   26:*/		regs.R7 = regs.R31;
		/* 821DE3D8h case   26:*/		return 0x821DE3DC;
		  /* 821DE3DCh */ case   27:  		/* addi R6, R10, 7848 */
		/* 821DE3DCh case   27:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0x1EA8);
		/* 821DE3DCh case   27:*/		return 0x821DE3E0;
		  /* 821DE3E0h */ case   28:  		/* addi R5, R1, 82 */
		/* 821DE3E0h case   28:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x52);
		/* 821DE3E0h case   28:*/		return 0x821DE3E4;
		  /* 821DE3E4h */ case   29:  		/* stw R11, <#[R30 + 120]> */
		/* 821DE3E4h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000078) );
		/* 821DE3E4h case   29:*/		return 0x821DE3E8;
		  /* 821DE3E8h */ case   30:  		/* mr R4, R29 */
		/* 821DE3E8h case   30:*/		regs.R4 = regs.R29;
		/* 821DE3E8h case   30:*/		return 0x821DE3EC;
		  /* 821DE3ECh */ case   31:  		/* stb R24, <#[R1 + 82]> */
		/* 821DE3ECh case   31:*/		cpu::mem::store8( regs, regs.R24, (uint32)(regs.R1 + 0x00000052) );
		/* 821DE3ECh case   31:*/		return 0x821DE3F0;
		  /* 821DE3F0h */ case   32:  		/* mr R3, R30 */
		/* 821DE3F0h case   32:*/		regs.R3 = regs.R30;
		/* 821DE3F0h case   32:*/		return 0x821DE3F4;
		  /* 821DE3F4h */ case   33:  		/* bl -1108476 */
		/* 821DE3F4h case   33:*/		regs.LR = 0x821DE3F8; return 0x820CF9F8;
		/* 821DE3F4h case   33:*/		return 0x821DE3F8;
		  /* 821DE3F8h */ case   34:  		/* lbz R11, <#[R1 + 82]> */
		/* 821DE3F8h case   34:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000052) );
		/* 821DE3F8h case   34:*/		return 0x821DE3FC;
		  /* 821DE3FCh */ case   35:  		/* cmplwi CR0, R11, 0 */
		/* 821DE3FCh case   35:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DE3FCh case   35:*/		return 0x821DE400;
		  /* 821DE400h */ case   36:  		/* bc 4, CR0_EQ, 272 */
		/* 821DE400h case   36:*/		if ( !regs.CR[0].eq ) { return 0x821DE510;  }
		/* 821DE400h case   36:*/		return 0x821DE404;
		  /* 821DE404h */ case   37:  		/* stw R28, <#[R30 + 120]> */
		/* 821DE404h case   37:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x00000078) );
		/* 821DE404h case   37:*/		return 0x821DE408;
		  /* 821DE408h */ case   38:  		/* lwz R8, <#[R29 + 4]> */
		/* 821DE408h case   38:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000004) );
		/* 821DE408h case   38:*/		return 0x821DE40C;
		  /* 821DE40Ch */ case   39:  		/* rlwinm. R11, R8, 0, 2, 2 */
		/* 821DE40Ch case   39:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R11,regs.R8);
		/* 821DE40Ch case   39:*/		return 0x821DE410;
		  /* 821DE410h */ case   40:  		/* bc 12, CR0_EQ, 100 */
		/* 821DE410h case   40:*/		if ( regs.CR[0].eq ) { return 0x821DE474;  }
		/* 821DE410h case   40:*/		return 0x821DE414;
		  /* 821DE414h */ case   41:  		/* lwz R9, <#[R25]> */
		/* 821DE414h case   41:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000000) );
		/* 821DE414h case   41:*/		return 0x821DE418;
		  /* 821DE418h */ case   42:  		/* cmplwi CR6, R9, 0 */
		/* 821DE418h case   42:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821DE418h case   42:*/		return 0x821DE41C;
		  /* 821DE41Ch */ case   43:  		/* bc 12, CR6_EQ, 60 */
		/* 821DE41Ch case   43:*/		if ( regs.CR[6].eq ) { return 0x821DE458;  }
		/* 821DE41Ch case   43:*/		return 0x821DE420;
		  /* 821DE420h */ case   44:  		/* lwz R10, <#[R9]> */
		/* 821DE420h case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 821DE420h case   44:*/		return 0x821DE424;
		  /* 821DE424h */ case   45:  		/* rlwinm. R11, R10, 0, 1, 1 */
		/* 821DE424h case   45:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R10);
		/* 821DE424h case   45:*/		return 0x821DE428;
		  /* 821DE428h */ case   46:  		/* bc 12, CR0_EQ, 16 */
		/* 821DE428h case   46:*/		if ( regs.CR[0].eq ) { return 0x821DE438;  }
		/* 821DE428h case   46:*/		return 0x821DE42C;
		  /* 821DE42Ch */ case   47:  		/* rlwinm. R11, R10, 0, 4, 6 */
		/* 821DE42Ch case   47:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R10);
		/* 821DE42Ch case   47:*/		return 0x821DE430;
		  /* 821DE430h */ case   48:  		/* li R11, 1 */
		/* 821DE430h case   48:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821DE430h case   48:*/		return 0x821DE434;
		  /* 821DE434h */ case   49:  		/* bc 12, CR0_EQ, 8 */
		/* 821DE434h case   49:*/		if ( regs.CR[0].eq ) { return 0x821DE43C;  }
		/* 821DE434h case   49:*/		return 0x821DE438;
	}
	return 0x821DE438;
} // Block from 821DE370h-821DE438h (50 instructions)

//////////////////////////////////////////////////////
// Block at 821DE438h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE438);
		  /* 821DE438h */ case    0:  		/* mr R11, R24 */
		/* 821DE438h case    0:*/		regs.R11 = regs.R24;
		/* 821DE438h case    0:*/		return 0x821DE43C;
	}
	return 0x821DE43C;
} // Block from 821DE438h-821DE43Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DE43Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE43C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE43C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE43C);
		  /* 821DE43Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DE43Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DE43Ch case    0:*/		return 0x821DE440;
		  /* 821DE440h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821DE440h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DE450;  }
		/* 821DE440h case    1:*/		return 0x821DE444;
		  /* 821DE444h */ case    2:  		/* rlwinm R11, R10, 0, 7, 18 */
		/* 821DE444h case    2:*/		cpu::op::rlwinm<0,0,7,18>(regs,&regs.R11,regs.R10);
		/* 821DE444h case    2:*/		return 0x821DE448;
		  /* 821DE448h */ case    3:  		/* cmplwi CR6, R11, 8192 */
		/* 821DE448h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002000);
		/* 821DE448h case    3:*/		return 0x821DE44C;
		  /* 821DE44Ch */ case    4:  		/* bc 12, CR6_EQ, 40 */
		/* 821DE44Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821DE474;  }
		/* 821DE44Ch case    4:*/		return 0x821DE450;
	}
	return 0x821DE450;
} // Block from 821DE43Ch-821DE450h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DE450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE450);
		  /* 821DE450h */ case    0:  		/* lwz R9, <#[R9 + 4]> */
		/* 821DE450h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821DE450h case    0:*/		return 0x821DE454;
		  /* 821DE454h */ case    1:  		/* b -60 */
		/* 821DE454h case    1:*/		return 0x821DE418;
		/* 821DE454h case    1:*/		return 0x821DE458;
	}
	return 0x821DE458;
} // Block from 821DE450h-821DE458h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DE458h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE458);
		  /* 821DE458h */ case    0:  		/* rlwinm R11, R8, 0, 3, 1 */
		/* 821DE458h case    0:*/		cpu::op::rlwinm<0,0,3,1>(regs,&regs.R11,regs.R8);
		/* 821DE458h case    0:*/		return 0x821DE45C;
		  /* 821DE45Ch */ case    1:  		/* stw R11, <#[R29 + 4]> */
		/* 821DE45Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821DE45Ch case    1:*/		return 0x821DE460;
		  /* 821DE460h */ case    2:  		/* b 20 */
		/* 821DE460h case    2:*/		return 0x821DE474;
		/* 821DE460h case    2:*/		return 0x821DE464;
	}
	return 0x821DE464;
} // Block from 821DE458h-821DE464h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DE464h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE464( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE464) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE464);
		  /* 821DE464h */ case    0:  		/* mr R5, R29 */
		/* 821DE464h case    0:*/		regs.R5 = regs.R29;
		/* 821DE464h case    0:*/		return 0x821DE468;
		  /* 821DE468h */ case    1:  		/* bl -120952 */
		/* 821DE468h case    1:*/		regs.LR = 0x821DE46C; return 0x821C0BF0;
		/* 821DE468h case    1:*/		return 0x821DE46C;
		  /* 821DE46Ch */ case    2:  		/* cmpwi CR0, R3, 0 */
		/* 821DE46Ch case    2:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821DE46Ch case    2:*/		return 0x821DE470;
		  /* 821DE470h */ case    3:  		/* bc 4, CR0_EQ, -1400 */
		/* 821DE470h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DDEF8;  }
		/* 821DE470h case    3:*/		return 0x821DE474;
	}
	return 0x821DE474;
} // Block from 821DE464h-821DE474h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DE474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE474);
		  /* 821DE474h */ case    0:  		/* stw R24, <#[R29 + 20]> */
		/* 821DE474h case    0:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R29 + 0x00000014) );
		/* 821DE474h case    0:*/		return 0x821DE478;
	}
	return 0x821DE478;
} // Block from 821DE474h-821DE478h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DE478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE478);
		  /* 821DE478h */ case    0:  		/* li R6, 0 */
		/* 821DE478h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821DE478h case    0:*/		return 0x821DE47C;
		  /* 821DE47Ch */ case    1:  		/* mr R5, R29 */
		/* 821DE47Ch case    1:*/		regs.R5 = regs.R29;
		/* 821DE47Ch case    1:*/		return 0x821DE480;
		  /* 821DE480h */ case    2:  		/* mr R4, R25 */
		/* 821DE480h case    2:*/		regs.R4 = regs.R25;
		/* 821DE480h case    2:*/		return 0x821DE484;
		  /* 821DE484h */ case    3:  		/* mr R3, R31 */
		/* 821DE484h case    3:*/		regs.R3 = regs.R31;
		/* 821DE484h case    3:*/		return 0x821DE488;
		  /* 821DE488h */ case    4:  		/* bl 277376 */
		/* 821DE488h case    4:*/		regs.LR = 0x821DE48C; return 0x82222008;
		/* 821DE488h case    4:*/		return 0x821DE48C;
		  /* 821DE48Ch */ case    5:  		/* cmpwi CR0, R3, 0 */
		/* 821DE48Ch case    5:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821DE48Ch case    5:*/		return 0x821DE490;
		  /* 821DE490h */ case    6:  		/* bc 4, CR0_EQ, -1432 */
		/* 821DE490h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821DDEF8;  }
		/* 821DE490h case    6:*/		return 0x821DE494;
	}
	return 0x821DE494;
} // Block from 821DE478h-821DE494h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DE494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE494);
		  /* 821DE494h */ case    0:  		/* rlwinm R11, R25, 0, 0, 30 */
		/* 821DE494h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R25);
		/* 821DE494h case    0:*/		return 0x821DE498;
		  /* 821DE498h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DE498h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DE498h case    1:*/		return 0x821DE49C;
		  /* 821DE49Ch */ case    2:  		/* b -1744 */
		/* 821DE49Ch case    2:*/		return 0x821DDDCC;
		/* 821DE49Ch case    2:*/		return 0x821DE4A0;
	}
	return 0x821DE4A0;
} // Block from 821DE494h-821DE4A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DE4A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE4A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE4A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE4A0);
		  /* 821DE4A0h */ case    0:  		/* rlwinm R11, R23, 0, 0, 30 */
		/* 821DE4A0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R23);
		/* 821DE4A0h case    0:*/		return 0x821DE4A4;
		  /* 821DE4A4h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DE4A4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DE4A4h case    1:*/		return 0x821DE4A8;
		  /* 821DE4A8h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DE4A8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DE4A8h case    2:*/		return 0x821DE4AC;
		  /* 821DE4ACh */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DE4ACh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DE4BC;  }
		/* 821DE4ACh case    3:*/		return 0x821DE4B0;
		  /* 821DE4B0h */ case    4:  		/* mr R23, R11 */
		/* 821DE4B0h case    4:*/		regs.R23 = regs.R11;
		/* 821DE4B0h case    4:*/		return 0x821DE4B4;
		  /* 821DE4B4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DE4B4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DE4B4h case    5:*/		return 0x821DE4B8;
		  /* 821DE4B8h */ case    6:  		/* bc 4, CR6_EQ, -1776 */
		/* 821DE4B8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DDDC8;  }
		/* 821DE4B8h case    6:*/		return 0x821DE4BC;
	}
	return 0x821DE4BC;
} // Block from 821DE4A0h-821DE4BCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DE4BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE4BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE4BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE4BC);
		  /* 821DE4BCh */ case    0:  		/* lwz R11, <#[R31 + 652]> */
		/* 821DE4BCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000028C) );
		/* 821DE4BCh case    0:*/		return 0x821DE4C0;
		  /* 821DE4C0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DE4C0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DE4C0h case    1:*/		return 0x821DE4C4;
		  /* 821DE4C4h */ case    2:  		/* bc 12, CR6_EQ, 276 */
		/* 821DE4C4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DE5D8;  }
		/* 821DE4C4h case    2:*/		return 0x821DE4C8;
		  /* 821DE4C8h */ case    3:  		/* lwz R11, <#[R31 + 40]> */
		/* 821DE4C8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 821DE4C8h case    3:*/		return 0x821DE4CC;
		  /* 821DE4CCh */ case    4:  		/* ori R10, R11, 4096 */
		/* 821DE4CCh case    4:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R11,0x1000);
		/* 821DE4CCh case    4:*/		return 0x821DE4D0;
		  /* 821DE4D0h */ case    5:  		/* rlwinm R29, R11, 20, 31, 31 */
		/* 821DE4D0h case    5:*/		cpu::op::rlwinm<0,20,31,31>(regs,&regs.R29,regs.R11);
		/* 821DE4D0h case    5:*/		return 0x821DE4D4;
		  /* 821DE4D4h */ case    6:  		/* stw R10, <#[R31 + 40]> */
		/* 821DE4D4h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 821DE4D4h case    6:*/		return 0x821DE4D8;
		  /* 821DE4D8h */ case    7:  		/* lwz R3, <#[R31 + 652]> */
		/* 821DE4D8h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000028C) );
		/* 821DE4D8h case    7:*/		return 0x821DE4DC;
		  /* 821DE4DCh */ case    8:  		/* lwz R11, <#[R3 + 4]> */
		/* 821DE4DCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821DE4DCh case    8:*/		return 0x821DE4E0;
		  /* 821DE4E0h */ case    9:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DE4E0h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DE4E0h case    9:*/		return 0x821DE4E4;
		  /* 821DE4E4h */ case   10:  		/* bc 4, CR0_EQ, 192 */
		/* 821DE4E4h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821DE5A4;  }
		/* 821DE4E4h case   10:*/		return 0x821DE4E8;
		  /* 821DE4E8h */ case   11:  		/* cmplwi CR0, R11, 0 */
		/* 821DE4E8h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DE4E8h case   11:*/		return 0x821DE4EC;
		  /* 821DE4ECh */ case   12:  		/* bc 12, CR0_EQ, 184 */
		/* 821DE4ECh case   12:*/		if ( regs.CR[0].eq ) { return 0x821DE5A4;  }
		/* 821DE4ECh case   12:*/		return 0x821DE4F0;
		  /* 821DE4F0h */ case   13:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821DE4F0h case   13:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821DE4F0h case   13:*/		return 0x821DE4F4;
		  /* 821DE4F4h */ case   14:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DE4F4h case   14:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DE4F4h case   14:*/		return 0x821DE4F8;
		  /* 821DE4F8h */ case   15:  		/* bc 12, CR0_EQ, 36 */
		/* 821DE4F8h case   15:*/		if ( regs.CR[0].eq ) { return 0x821DE51C;  }
		/* 821DE4F8h case   15:*/		return 0x821DE4FC;
		  /* 821DE4FCh */ case   16:  		/* mr R4, R24 */
		/* 821DE4FCh case   16:*/		regs.R4 = regs.R24;
		/* 821DE4FCh case   16:*/		return 0x821DE500;
		  /* 821DE500h */ case   17:  		/* b 40 */
		/* 821DE500h case   17:*/		return 0x821DE528;
		/* 821DE500h case   17:*/		return 0x821DE504;
	}
	return 0x821DE504;
} // Block from 821DE4BCh-821DE504h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821DE504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE504);
		  /* 821DE504h */ case    0:  		/* li R4, 4800 */
		/* 821DE504h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821DE504h case    0:*/		return 0x821DE508;
		  /* 821DE508h */ case    1:  		/* mr R3, R31 */
		/* 821DE508h case    1:*/		regs.R3 = regs.R31;
		/* 821DE508h case    1:*/		return 0x821DE50C;
		  /* 821DE50Ch */ case    2:  		/* bl -575140 */
		/* 821DE50Ch case    2:*/		regs.LR = 0x821DE510; return 0x82151E68;
		/* 821DE50Ch case    2:*/		return 0x821DE510;
	}
	return 0x821DE510;
} // Block from 821DE504h-821DE510h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DE510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE510);
		  /* 821DE510h */ case    0:  		/* li R4, 4800 */
		/* 821DE510h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821DE510h case    0:*/		return 0x821DE514;
		  /* 821DE514h */ case    1:  		/* mr R3, R31 */
		/* 821DE514h case    1:*/		regs.R3 = regs.R31;
		/* 821DE514h case    1:*/		return 0x821DE518;
		  /* 821DE518h */ case    2:  		/* bl -575152 */
		/* 821DE518h case    2:*/		regs.LR = 0x821DE51C; return 0x82151E68;
		/* 821DE518h case    2:*/		return 0x821DE51C;
	}
	return 0x821DE51C;
} // Block from 821DE510h-821DE51Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DE51Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE51C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE51C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE51C);
		  /* 821DE51Ch */ case    0:  		/* lwz R11, <#[R3]> */
		/* 821DE51Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821DE51Ch case    0:*/		return 0x821DE520;
		  /* 821DE520h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DE520h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DE520h case    1:*/		return 0x821DE524;
		  /* 821DE524h */ case    2:  		/* addi R4, R11, -4 */
		/* 821DE524h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821DE524h case    2:*/		return 0x821DE528;
	}
	return 0x821DE528;
} // Block from 821DE51Ch-821DE528h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DE528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE528);
		  /* 821DE528h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 821DE528h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821DE528h case    0:*/		return 0x821DE52C;
		  /* 821DE52Ch */ case    1:  		/* addi R10, R11, 3 */
		/* 821DE52Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821DE52Ch case    1:*/		return 0x821DE530;
		  /* 821DE530h */ case    2:  		/* addic. R11, R11, -1 */
		/* 821DE530h case    2:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821DE530h case    2:*/		return 0x821DE534;
		  /* 821DE534h */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821DE534h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821DE534h case    3:*/		return 0x821DE538;
		  /* 821DE538h */ case    4:  		/* lwzx R30, <#[R10 + R4]> */
		/* 821DE538h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821DE538h case    4:*/		return 0x821DE53C;
		  /* 821DE53Ch */ case    5:  		/* stw R11, <#[R4 + 8]> */
		/* 821DE53Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821DE53Ch case    5:*/		return 0x821DE540;
		  /* 821DE540h */ case    6:  		/* bc 4, CR0_EQ, 56 */
		/* 821DE540h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821DE578;  }
		/* 821DE540h case    6:*/		return 0x821DE544;
		  /* 821DE544h */ case    7:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821DE544h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821DE544h case    7:*/		return 0x821DE548;
		  /* 821DE548h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 821DE548h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DE548h case    8:*/		return 0x821DE54C;
		  /* 821DE54Ch */ case    9:  		/* lwz R9, <#[R11]> */
		/* 821DE54Ch case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821DE54Ch case    9:*/		return 0x821DE550;
		  /* 821DE550h */ case   10:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821DE550h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821DE550h case   10:*/		return 0x821DE554;
		  /* 821DE554h */ case   11:  		/* stw R9, <#[R10]> */
		/* 821DE554h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DE554h case   11:*/		return 0x821DE558;
		  /* 821DE558h */ case   12:  		/* lwz R10, <#[R11 + 4]> */
		/* 821DE558h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DE558h case   12:*/		return 0x821DE55C;
		  /* 821DE55Ch */ case   13:  		/* lwz R11, <#[R11]> */
		/* 821DE55Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821DE55Ch case   13:*/		return 0x821DE560;
		  /* 821DE560h */ case   14:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DE560h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DE560h case   14:*/		return 0x821DE564;
		  /* 821DE564h */ case   15:  		/* stw R10, <#[R11]> */
		/* 821DE564h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DE564h case   15:*/		return 0x821DE568;
		  /* 821DE568h */ case   16:  		/* lwz R11, <#[R4 + 12]> */
		/* 821DE568h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821DE568h case   16:*/		return 0x821DE56C;
		  /* 821DE56Ch */ case   17:  		/* addi R11, R11, 4 */
		/* 821DE56Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821DE56Ch case   17:*/		return 0x821DE570;
		  /* 821DE570h */ case   18:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821DE570h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821DE570h case   18:*/		return 0x821DE574;
		  /* 821DE574h */ case   19:  		/* bl -575340 */
		/* 821DE574h case   19:*/		regs.LR = 0x821DE578; return 0x82151E08;
		/* 821DE574h case   19:*/		return 0x821DE578;
	}
	return 0x821DE578;
} // Block from 821DE528h-821DE578h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821DE578h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE578( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE578) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE578);
		  /* 821DE578h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 821DE578h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821DE578h case    0:*/		return 0x821DE57C;
		  /* 821DE57Ch */ case    1:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821DE57Ch case    1:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821DE57Ch case    1:*/		return 0x821DE580;
		  /* 821DE580h */ case    2:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821DE580h case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821DE580h case    2:*/		return 0x821DE584;
		  /* 821DE584h */ case    3:  		/* stw R11, <#[R30 + 8]> */
		/* 821DE584h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821DE584h case    3:*/		return 0x821DE588;
		  /* 821DE588h */ case    4:  		/* cmplwi CR6, R10, 14720 */
		/* 821DE588h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003980);
		/* 821DE588h case    4:*/		return 0x821DE58C;
		  /* 821DE58Ch */ case    5:  		/* bc 12, CR6_EQ, -180 */
		/* 821DE58Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821DE4D8;  }
		/* 821DE58Ch case    5:*/		return 0x821DE590;
		  /* 821DE590h */ case    6:  		/* addi R5, R1, 80 */
		/* 821DE590h case    6:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821DE590h case    6:*/		return 0x821DE594;
		  /* 821DE594h */ case    7:  		/* mr R4, R30 */
		/* 821DE594h case    7:*/		regs.R4 = regs.R30;
		/* 821DE594h case    7:*/		return 0x821DE598;
		  /* 821DE598h */ case    8:  		/* mr R3, R31 */
		/* 821DE598h case    8:*/		regs.R3 = regs.R31;
		/* 821DE598h case    8:*/		return 0x821DE59C;
		  /* 821DE59Ch */ case    9:  		/* bl -50452 */
		/* 821DE59Ch case    9:*/		regs.LR = 0x821DE5A0; return 0x821D2088;
		/* 821DE59Ch case    9:*/		return 0x821DE5A0;
		  /* 821DE5A0h */ case   10:  		/* b -200 */
		/* 821DE5A0h case   10:*/		return 0x821DE4D8;
		/* 821DE5A0h case   10:*/		return 0x821DE5A4;
	}
	return 0x821DE5A4;
} // Block from 821DE578h-821DE5A4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821DE5A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE5A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE5A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE5A4);
		  /* 821DE5A4h */ case    0:  		/* mr R4, R29 */
		/* 821DE5A4h case    0:*/		regs.R4 = regs.R29;
		/* 821DE5A4h case    0:*/		return 0x821DE5A8;
		  /* 821DE5A8h */ case    1:  		/* mr R3, R31 */
		/* 821DE5A8h case    1:*/		regs.R3 = regs.R31;
		/* 821DE5A8h case    1:*/		return 0x821DE5AC;
		  /* 821DE5ACh */ case    2:  		/* bl -497852 */
		/* 821DE5ACh case    2:*/		regs.LR = 0x821DE5B0; return 0x82164CF0;
		/* 821DE5ACh case    2:*/		return 0x821DE5B0;
		  /* 821DE5B0h */ case    3:  		/* lbz R11, <#[R1 + 80]> */
		/* 821DE5B0h case    3:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821DE5B0h case    3:*/		return 0x821DE5B4;
		  /* 821DE5B4h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821DE5B4h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DE5B4h case    4:*/		return 0x821DE5B8;
		  /* 821DE5B8h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 821DE5B8h case    5:*/		if ( regs.CR[0].eq ) { return 0x821DE5C8;  }
		/* 821DE5B8h case    5:*/		return 0x821DE5BC;
		  /* 821DE5BCh */ case    6:  		/* mr R3, R31 */
		/* 821DE5BCh case    6:*/		regs.R3 = regs.R31;
		/* 821DE5BCh case    6:*/		return 0x821DE5C0;
		  /* 821DE5C0h */ case    7:  		/* bl 52576 */
		/* 821DE5C0h case    7:*/		regs.LR = 0x821DE5C4; return 0x821EB320;
		/* 821DE5C0h case    7:*/		return 0x821DE5C4;
		  /* 821DE5C4h */ case    8:  		/* stb R24, <#[R1 + 80]> */
		/* 821DE5C4h case    8:*/		cpu::mem::store8( regs, regs.R24, (uint32)(regs.R1 + 0x00000050) );
		/* 821DE5C4h case    8:*/		return 0x821DE5C8;
	}
	return 0x821DE5C8;
} // Block from 821DE5A4h-821DE5C8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821DE5C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE5C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE5C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE5C8);
		  /* 821DE5C8h */ case    0:  		/* stw R24, <#[R31 + 652]> */
		/* 821DE5C8h case    0:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x0000028C) );
		/* 821DE5C8h case    0:*/		return 0x821DE5CC;
		  /* 821DE5CCh */ case    1:  		/* li R4, 0 */
		/* 821DE5CCh case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821DE5CCh case    1:*/		return 0x821DE5D0;
		  /* 821DE5D0h */ case    2:  		/* mr R3, R31 */
		/* 821DE5D0h case    2:*/		regs.R3 = regs.R31;
		/* 821DE5D0h case    2:*/		return 0x821DE5D4;
		  /* 821DE5D4h */ case    3:  		/* bl -19804 */
		/* 821DE5D4h case    3:*/		regs.LR = 0x821DE5D8; return 0x821D9878;
		/* 821DE5D4h case    3:*/		return 0x821DE5D8;
	}
	return 0x821DE5D8;
} // Block from 821DE5C8h-821DE5D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DE5D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE5D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE5D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE5D8);
		  /* 821DE5D8h */ case    0:  		/* addi R1, R1, 272 */
		/* 821DE5D8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x110);
		/* 821DE5D8h case    0:*/		return 0x821DE5DC;
		  /* 821DE5DCh */ case    1:  		/* lfd FR29, <#[R1 - 112]> */
		/* 821DE5DCh case    1:*/		cpu::mem::load64f( regs, &regs.FR29, (uint32)(regs.R1 + 0xFFFFFF90) );
		/* 821DE5DCh case    1:*/		return 0x821DE5E0;
		  /* 821DE5E0h */ case    2:  		/* lfd FR30, <#[R1 - 104]> */
		/* 821DE5E0h case    2:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFF98) );
		/* 821DE5E0h case    2:*/		return 0x821DE5E4;
		  /* 821DE5E4h */ case    3:  		/* lfd FR31, <#[R1 - 96]> */
		/* 821DE5E4h case    3:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFA0) );
		/* 821DE5E4h case    3:*/		return 0x821DE5E8;
		  /* 821DE5E8h */ case    4:  		/* b -1364824 */
		/* 821DE5E8h case    4:*/		return 0x82091290;
		/* 821DE5E8h case    4:*/		return 0x821DE5EC;
		  /* 821DE5ECh */ case    5:  		/* nop */
		/* 821DE5ECh case    5:*/		cpu::op::nop();
		/* 821DE5ECh case    5:*/		return 0x821DE5F0;
	}
	return 0x821DE5F0;
} // Block from 821DE5D8h-821DE5F0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DE5F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE5F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE5F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE5F0);
		  /* 821DE5F0h */ case    0:  		/* mfspr R12, LR */
		/* 821DE5F0h case    0:*/		regs.R12 = regs.LR;
		/* 821DE5F0h case    0:*/		return 0x821DE5F4;
		  /* 821DE5F4h */ case    1:  		/* bl -1364912 */
		/* 821DE5F4h case    1:*/		regs.LR = 0x821DE5F8; return 0x82091244;
		/* 821DE5F4h case    1:*/		return 0x821DE5F8;
		  /* 821DE5F8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821DE5F8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821DE5F8h case    2:*/		return 0x821DE5FC;
		  /* 821DE5FCh */ case    3:  		/* mr R23, R3 */
		/* 821DE5FCh case    3:*/		regs.R23 = regs.R3;
		/* 821DE5FCh case    3:*/		return 0x821DE600;
		  /* 821DE600h */ case    4:  		/* li R24, 1 */
		/* 821DE600h case    4:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 821DE600h case    4:*/		return 0x821DE604;
		  /* 821DE604h */ case    5:  		/* lwz R11, <#[R23 + 4]> */
		/* 821DE604h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 821DE604h case    5:*/		return 0x821DE608;
		  /* 821DE608h */ case    6:  		/* li R25, 0 */
		/* 821DE608h case    6:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821DE608h case    6:*/		return 0x821DE60C;
		  /* 821DE60Ch */ case    7:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DE60Ch case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DE60Ch case    7:*/		return 0x821DE610;
		  /* 821DE610h */ case    8:  		/* bc 4, CR0_EQ, 512 */
		/* 821DE610h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821DE810;  }
		/* 821DE610h case    8:*/		return 0x821DE614;
		  /* 821DE614h */ case    9:  		/* mr R28, R11 */
		/* 821DE614h case    9:*/		regs.R28 = regs.R11;
		/* 821DE614h case    9:*/		return 0x821DE618;
		  /* 821DE618h */ case   10:  		/* cmplwi CR0, R11, 0 */
		/* 821DE618h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DE618h case   10:*/		return 0x821DE61C;
		  /* 821DE61Ch */ case   11:  		/* bc 12, CR0_EQ, 500 */
		/* 821DE61Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x821DE810;  }
		/* 821DE61Ch case   11:*/		return 0x821DE620;
		  /* 821DE620h */ case   12:  		/* lwz R11, <#[R28 + 68]> */
		/* 821DE620h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000044) );
		/* 821DE620h case   12:*/		return 0x821DE624;
		  /* 821DE624h */ case   13:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 821DE624h case   13:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 821DE624h case   13:*/		return 0x821DE628;
		  /* 821DE628h */ case   14:  		/* bc 12, CR0_EQ, 460 */
		/* 821DE628h case   14:*/		if ( regs.CR[0].eq ) { return 0x821DE7F4;  }
		/* 821DE628h case   14:*/		return 0x821DE62C;
		  /* 821DE62Ch */ case   15:  		/* lwz R11, <#[R28 + 40]> */
		/* 821DE62Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000028) );
		/* 821DE62Ch case   15:*/		return 0x821DE630;
		  /* 821DE630h */ case   16:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DE630h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DE630h case   16:*/		return 0x821DE634;
		  /* 821DE634h */ case   17:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DE634h case   17:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DE634h case   17:*/		return 0x821DE638;
		  /* 821DE638h */ case   18:  		/* bc 4, CR0_EQ, 444 */
		/* 821DE638h case   18:*/		if ( !regs.CR[0].eq ) { return 0x821DE7F4;  }
		/* 821DE638h case   18:*/		return 0x821DE63C;
		  /* 821DE63Ch */ case   19:  		/* lwz R10, <#[R28 + 76]> */
		/* 821DE63Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x0000004C) );
		/* 821DE63Ch case   19:*/		return 0x821DE640;
		  /* 821DE640h */ case   20:  		/* addi R11, R28, 76 */
		/* 821DE640h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x4C);
		/* 821DE640h case   20:*/		return 0x821DE644;
		  /* 821DE644h */ case   21:  		/* mr R26, R28 */
		/* 821DE644h case   21:*/		regs.R26 = regs.R28;
		/* 821DE644h case   21:*/		return 0x821DE648;
		  /* 821DE648h */ case   22:  		/* rlwinm. R9, R10, 0, 11, 11 */
		/* 821DE648h case   22:*/		cpu::op::rlwinm<1,0,11,11>(regs,&regs.R9,regs.R10);
		/* 821DE648h case   22:*/		return 0x821DE64C;
		  /* 821DE64Ch */ case   23:  		/* bc 4, CR0_EQ, 32 */
		/* 821DE64Ch case   23:*/		if ( !regs.CR[0].eq ) { return 0x821DE66C;  }
		/* 821DE64Ch case   23:*/		return 0x821DE650;
		  /* 821DE650h */ case   24:  		/* lwz R26, <#[R26 + 52]> */
		/* 821DE650h case   24:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R26 + 0x00000034) );
		/* 821DE650h case   24:*/		return 0x821DE654;
		  /* 821DE654h */ case   25:  		/* cmplwi CR6, R26, 0 */
		/* 821DE654h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821DE654h case   25:*/		return 0x821DE658;
		  /* 821DE658h */ case   26:  		/* bc 12, CR6_EQ, 412 */
		/* 821DE658h case   26:*/		if ( regs.CR[6].eq ) { return 0x821DE7F4;  }
		/* 821DE658h case   26:*/		return 0x821DE65C;
		  /* 821DE65Ch */ case   27:  		/* lwz R9, <#[R26 + 76]> */
		/* 821DE65Ch case   27:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x0000004C) );
		/* 821DE65Ch case   27:*/		return 0x821DE660;
		  /* 821DE660h */ case   28:  		/* addi R11, R26, 76 */
		/* 821DE660h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0x4C);
		/* 821DE660h case   28:*/		return 0x821DE664;
		  /* 821DE664h */ case   29:  		/* rlwinm. R9, R9, 0, 11, 11 */
		/* 821DE664h case   29:*/		cpu::op::rlwinm<1,0,11,11>(regs,&regs.R9,regs.R9);
		/* 821DE664h case   29:*/		return 0x821DE668;
		  /* 821DE668h */ case   30:  		/* bc 12, CR0_EQ, -24 */
		/* 821DE668h case   30:*/		if ( regs.CR[0].eq ) { return 0x821DE650;  }
		/* 821DE668h case   30:*/		return 0x821DE66C;
	}
	return 0x821DE66C;
} // Block from 821DE5F0h-821DE66Ch (31 instructions)

//////////////////////////////////////////////////////
// Block at 821DE66Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE66C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE66C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE66C);
		  /* 821DE66Ch */ case    0:  		/* lwz R9, <#[R11]> */
		/* 821DE66Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821DE66Ch case    0:*/		return 0x821DE670;
		  /* 821DE670h */ case    1:  		/* rlwinm R11, R10, 0, 13, 31 */
		/* 821DE670h case    1:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R10);
		/* 821DE670h case    1:*/		return 0x821DE674;
		  /* 821DE674h */ case    2:  		/* addi R11, R11, -1 */
		/* 821DE674h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821DE674h case    2:*/		return 0x821DE678;
		  /* 821DE678h */ case    3:  		/* rlwinm R10, R9, 0, 13, 31 */
		/* 821DE678h case    3:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R9);
		/* 821DE678h case    3:*/		return 0x821DE67C;
		  /* 821DE67Ch */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 821DE67Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821DE67Ch case    4:*/		return 0x821DE680;
		  /* 821DE680h */ case    5:  		/* bc 4, CR6_EQ, 372 */
		/* 821DE680h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821DE7F4;  }
		/* 821DE680h case    5:*/		return 0x821DE684;
		  /* 821DE684h */ case    6:  		/* lwz R11, <#[R26 + 28]> */
		/* 821DE684h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000001C) );
		/* 821DE684h case    6:*/		return 0x821DE688;
		  /* 821DE688h */ case    7:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DE688h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DE688h case    7:*/		return 0x821DE68C;
		  /* 821DE68Ch */ case    8:  		/* bc 4, CR0_EQ, 360 */
		/* 821DE68Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x821DE7F4;  }
		/* 821DE68Ch case    8:*/		return 0x821DE690;
		  /* 821DE690h */ case    9:  		/* mr R30, R11 */
		/* 821DE690h case    9:*/		regs.R30 = regs.R11;
		/* 821DE690h case    9:*/		return 0x821DE694;
		  /* 821DE694h */ case   10:  		/* cmplwi CR0, R11, 0 */
		/* 821DE694h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DE694h case   10:*/		return 0x821DE698;
		  /* 821DE698h */ case   11:  		/* bc 12, CR0_EQ, 348 */
		/* 821DE698h case   11:*/		if ( regs.CR[0].eq ) { return 0x821DE7F4;  }
		/* 821DE698h case   11:*/		return 0x821DE69C;
		  /* 821DE69Ch */ case   12:  		/* lwz R11, <#[R30 + 8]> */
		/* 821DE69Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821DE69Ch case   12:*/		return 0x821DE6A0;
		  /* 821DE6A0h */ case   13:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DE6A0h case   13:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DE6A0h case   13:*/		return 0x821DE6A4;
		  /* 821DE6A4h */ case   14:  		/* cmplwi CR6, R11, 13312 */
		/* 821DE6A4h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003400);
		/* 821DE6A4h case   14:*/		return 0x821DE6A8;
		  /* 821DE6A8h */ case   15:  		/* bc 4, CR6_EQ, 304 */
		/* 821DE6A8h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821DE7D8;  }
		/* 821DE6A8h case   15:*/		return 0x821DE6AC;
		  /* 821DE6ACh */ case   16:  		/* lwz R11, <#[R30 + 8]> */
		/* 821DE6ACh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821DE6ACh case   16:*/		return 0x821DE6B0;
		  /* 821DE6B0h */ case   17:  		/* mr R3, R23 */
		/* 821DE6B0h case   17:*/		regs.R3 = regs.R23;
		/* 821DE6B0h case   17:*/		return 0x821DE6B4;
		  /* 821DE6B4h */ case   18:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821DE6B4h case   18:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821DE6B4h case   18:*/		return 0x821DE6B8;
		  /* 821DE6B8h */ case   19:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821DE6B8h case   19:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821DE6B8h case   19:*/		return 0x821DE6BC;
		  /* 821DE6BCh */ case   20:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821DE6BCh case   20:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821DE6BCh case   20:*/		return 0x821DE6C0;
		  /* 821DE6C0h */ case   21:  		/* bl -500368 */
		/* 821DE6C0h case   21:*/		regs.LR = 0x821DE6C4; return 0x82164430;
		/* 821DE6C0h case   21:*/		return 0x821DE6C4;
		  /* 821DE6C4h */ case   22:  		/* addi R11, R30, -4 */
		/* 821DE6C4h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFFC);
		/* 821DE6C4h case   22:*/		return 0x821DE6C8;
		  /* 821DE6C8h */ case   23:  		/* lwzx R11, <#[R3 + R11]> */
		/* 821DE6C8h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821DE6C8h case   23:*/		return 0x821DE6CC;
		  /* 821DE6CCh */ case   24:  		/* rlwinm. R11, R11, 0, 10, 10 */
		/* 821DE6CCh case   24:*/		cpu::op::rlwinm<1,0,10,10>(regs,&regs.R11,regs.R11);
		/* 821DE6CCh case   24:*/		return 0x821DE6D0;
		  /* 821DE6D0h */ case   25:  		/* bc 4, CR0_EQ, 264 */
		/* 821DE6D0h case   25:*/		if ( !regs.CR[0].eq ) { return 0x821DE7D8;  }
		/* 821DE6D0h case   25:*/		return 0x821DE6D4;
		  /* 821DE6D4h */ case   26:  		/* lwz R29, <#[R30 + 44]> */
		/* 821DE6D4h case   26:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x0000002C) );
		/* 821DE6D4h case   26:*/		return 0x821DE6D8;
		  /* 821DE6D8h */ case   27:  		/* lwz R11, <#[R29 + 12]> */
		/* 821DE6D8h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821DE6D8h case   27:*/		return 0x821DE6DC;
		  /* 821DE6DCh */ case   28:  		/* lwz R11, <#[R11 + 8]> */
		/* 821DE6DCh case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821DE6DCh case   28:*/		return 0x821DE6E0;
		  /* 821DE6E0h */ case   29:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DE6E0h case   29:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DE6E0h case   29:*/		return 0x821DE6E4;
		  /* 821DE6E4h */ case   30:  		/* cmplwi CR6, R11, 16000 */
		/* 821DE6E4h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821DE6E4h case   30:*/		return 0x821DE6E8;
		  /* 821DE6E8h */ case   31:  		/* bc 4, CR6_EQ, 240 */
		/* 821DE6E8h case   31:*/		if ( !regs.CR[6].eq ) { return 0x821DE7D8;  }
		/* 821DE6E8h case   31:*/		return 0x821DE6EC;
		  /* 821DE6ECh */ case   32:  		/* addi R27, R30, 4 */
		/* 821DE6ECh case   32:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R30,0x4);
		/* 821DE6ECh case   32:*/		return 0x821DE6F0;
		  /* 821DE6F0h */ case   33:  		/* lwz R31, <#[R27]> */
		/* 821DE6F0h case   33:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + 0x00000000) );
		/* 821DE6F0h case   33:*/		return 0x821DE6F4;
		  /* 821DE6F4h */ case   34:  		/* cmplwi CR6, R31, 0 */
		/* 821DE6F4h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DE6F4h case   34:*/		return 0x821DE6F8;
		  /* 821DE6F8h */ case   35:  		/* bc 12, CR6_EQ, 224 */
		/* 821DE6F8h case   35:*/		if ( regs.CR[6].eq ) { return 0x821DE7D8;  }
		/* 821DE6F8h case   35:*/		return 0x821DE6FC;
		  /* 821DE6FCh */ case   36:  		/* lwz R11, <#[R31 + 16]> */
		/* 821DE6FCh case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821DE6FCh case   36:*/		return 0x821DE700;
		  /* 821DE700h */ case   37:  		/* cmplwi CR6, R11, 0 */
		/* 821DE700h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DE700h case   37:*/		return 0x821DE704;
		  /* 821DE704h */ case   38:  		/* bc 12, CR6_EQ, 192 */
		/* 821DE704h case   38:*/		if ( regs.CR[6].eq ) { return 0x821DE7C4;  }
		/* 821DE704h case   38:*/		return 0x821DE708;
		  /* 821DE708h */ case   39:  		/* lwz R10, <#[R31]> */
		/* 821DE708h case   39:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821DE708h case   39:*/		return 0x821DE70C;
		  /* 821DE70Ch */ case   40:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821DE70Ch case   40:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821DE70Ch case   40:*/		return 0x821DE710;
		  /* 821DE710h */ case   41:  		/* bc 12, CR0_EQ, 180 */
		/* 821DE710h case   41:*/		if ( regs.CR[0].eq ) { return 0x821DE7C4;  }
		/* 821DE710h case   41:*/		return 0x821DE714;
		  /* 821DE714h */ case   42:  		/* lwz R11, <#[R11 + 28]> */
		/* 821DE714h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 821DE714h case   42:*/		return 0x821DE718;
		  /* 821DE718h */ case   43:  		/* cmplw CR6, R26, R11 */
		/* 821DE718h case   43:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 821DE718h case   43:*/		return 0x821DE71C;
		  /* 821DE71Ch */ case   44:  		/* bc 12, CR6_EQ, 52 */
		/* 821DE71Ch case   44:*/		if ( regs.CR[6].eq ) { return 0x821DE750;  }
		/* 821DE71Ch case   44:*/		return 0x821DE720;
		  /* 821DE720h */ case   45:  		/* lwz R10, <#[R26 + 48]> */
		/* 821DE720h case   45:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000030) );
		/* 821DE720h case   45:*/		return 0x821DE724;
		  /* 821DE724h */ case   46:  		/* lwz R9, <#[R11 + 40]> */
		/* 821DE724h case   46:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000028) );
		/* 821DE724h case   46:*/		return 0x821DE728;
		  /* 821DE728h */ case   47:  		/* rlwinm R8, R10, 0, 13, 31 */
		/* 821DE728h case   47:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R10);
		/* 821DE728h case   47:*/		return 0x821DE72C;
		  /* 821DE72Ch */ case   48:  		/* rlwinm R10, R8, 27, 5, 31 */
		/* 821DE72Ch case   48:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R8);
		/* 821DE72Ch case   48:*/		return 0x821DE730;
		  /* 821DE730h */ case   49:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 821DE730h case   49:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 821DE730h case   49:*/		return 0x821DE734;
		  /* 821DE734h */ case   50:  		/* addi R10, R10, 1 */
		/* 821DE734h case   50:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821DE734h case   50:*/		return 0x821DE738;
		  /* 821DE738h */ case   51:  		/* slw R8, R24, R8 */
		/* 821DE738h case   51:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R24,regs.R8);
		/* 821DE738h case   51:*/		return 0x821DE73C;
		  /* 821DE73Ch */ case   52:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821DE73Ch case   52:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821DE73Ch case   52:*/		return 0x821DE740;
		  /* 821DE740h */ case   53:  		/* lwzx R10, <#[R10 + R9]> */
		/* 821DE740h case   53:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821DE740h case   53:*/		return 0x821DE744;
		  /* 821DE744h */ case   54:  		/* and. R10, R10, R8 */
		/* 821DE744h case   54:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821DE744h case   54:*/		return 0x821DE748;
		  /* 821DE748h */ case   55:  		/* mr R10, R24 */
		/* 821DE748h case   55:*/		regs.R10 = regs.R24;
		/* 821DE748h case   55:*/		return 0x821DE74C;
		  /* 821DE74Ch */ case   56:  		/* bc 4, CR0_EQ, 8 */
		/* 821DE74Ch case   56:*/		if ( !regs.CR[0].eq ) { return 0x821DE754;  }
		/* 821DE74Ch case   56:*/		return 0x821DE750;
	}
	return 0x821DE750;
} // Block from 821DE66Ch-821DE750h (57 instructions)

//////////////////////////////////////////////////////
// Block at 821DE750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE750);
		  /* 821DE750h */ case    0:  		/* li R10, 0 */
		/* 821DE750h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821DE750h case    0:*/		return 0x821DE754;
	}
	return 0x821DE754;
} // Block from 821DE750h-821DE754h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DE754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE754);
		  /* 821DE754h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821DE754h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821DE754h case    0:*/		return 0x821DE758;
		  /* 821DE758h */ case    1:  		/* bc 12, CR0_EQ, 108 */
		/* 821DE758h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DE7C4;  }
		/* 821DE758h case    1:*/		return 0x821DE75C;
		  /* 821DE75Ch */ case    2:  		/* cmplw CR6, R28, R11 */
		/* 821DE75Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 821DE75Ch case    2:*/		return 0x821DE760;
		  /* 821DE760h */ case    3:  		/* bc 12, CR6_EQ, 52 */
		/* 821DE760h case    3:*/		if ( regs.CR[6].eq ) { return 0x821DE794;  }
		/* 821DE760h case    3:*/		return 0x821DE764;
		  /* 821DE764h */ case    4:  		/* lwz R10, <#[R28 + 48]> */
		/* 821DE764h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000030) );
		/* 821DE764h case    4:*/		return 0x821DE768;
		  /* 821DE768h */ case    5:  		/* lwz R9, <#[R11 + 40]> */
		/* 821DE768h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000028) );
		/* 821DE768h case    5:*/		return 0x821DE76C;
		  /* 821DE76Ch */ case    6:  		/* rlwinm R10, R10, 0, 13, 31 */
		/* 821DE76Ch case    6:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R10);
		/* 821DE76Ch case    6:*/		return 0x821DE770;
		  /* 821DE770h */ case    7:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 821DE770h case    7:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 821DE770h case    7:*/		return 0x821DE774;
		  /* 821DE774h */ case    8:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821DE774h case    8:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821DE774h case    8:*/		return 0x821DE778;
		  /* 821DE778h */ case    9:  		/* addi R11, R11, 1 */
		/* 821DE778h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821DE778h case    9:*/		return 0x821DE77C;
		  /* 821DE77Ch */ case   10:  		/* slw R10, R24, R10 */
		/* 821DE77Ch case   10:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R24,regs.R10);
		/* 821DE77Ch case   10:*/		return 0x821DE780;
		  /* 821DE780h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821DE780h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821DE780h case   11:*/		return 0x821DE784;
		  /* 821DE784h */ case   12:  		/* lwzx R11, <#[R11 + R9]> */
		/* 821DE784h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821DE784h case   12:*/		return 0x821DE788;
		  /* 821DE788h */ case   13:  		/* and. R11, R11, R10 */
		/* 821DE788h case   13:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821DE788h case   13:*/		return 0x821DE78C;
		  /* 821DE78Ch */ case   14:  		/* mr R11, R24 */
		/* 821DE78Ch case   14:*/		regs.R11 = regs.R24;
		/* 821DE78Ch case   14:*/		return 0x821DE790;
		  /* 821DE790h */ case   15:  		/* bc 4, CR0_EQ, 8 */
		/* 821DE790h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821DE798;  }
		/* 821DE790h case   15:*/		return 0x821DE794;
	}
	return 0x821DE794;
} // Block from 821DE754h-821DE794h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821DE794h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE794( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE794) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE794);
		  /* 821DE794h */ case    0:  		/* li R11, 0 */
		/* 821DE794h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DE794h case    0:*/		return 0x821DE798;
	}
	return 0x821DE798;
} // Block from 821DE794h-821DE798h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DE798h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE798);
		  /* 821DE798h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DE798h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DE798h case    0:*/		return 0x821DE79C;
		  /* 821DE79Ch */ case    1:  		/* bc 4, CR0_EQ, 40 */
		/* 821DE79Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821DE7C4;  }
		/* 821DE79Ch case    1:*/		return 0x821DE7A0;
		  /* 821DE7A0h */ case    2:  		/* lwz R11, <#[R29]> */
		/* 821DE7A0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821DE7A0h case    2:*/		return 0x821DE7A4;
		  /* 821DE7A4h */ case    3:  		/* mr R5, R31 */
		/* 821DE7A4h case    3:*/		regs.R5 = regs.R31;
		/* 821DE7A4h case    3:*/		return 0x821DE7A8;
		  /* 821DE7A8h */ case    4:  		/* mr R4, R30 */
		/* 821DE7A8h case    4:*/		regs.R4 = regs.R30;
		/* 821DE7A8h case    4:*/		return 0x821DE7AC;
		  /* 821DE7ACh */ case    5:  		/* lwz R6, <#[R29 + 12]> */
		/* 821DE7ACh case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x0000000C) );
		/* 821DE7ACh case    5:*/		return 0x821DE7B0;
		  /* 821DE7B0h */ case    6:  		/* rlwinm R8, R11, 0, 27, 31 */
		/* 821DE7B0h case    6:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R11);
		/* 821DE7B0h case    6:*/		return 0x821DE7B4;
		  /* 821DE7B4h */ case    7:  		/* rlwinm R7, R11, 27, 24, 31 */
		/* 821DE7B4h case    7:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R7,regs.R11);
		/* 821DE7B4h case    7:*/		return 0x821DE7B8;
		  /* 821DE7B8h */ case    8:  		/* mr R3, R23 */
		/* 821DE7B8h case    8:*/		regs.R3 = regs.R23;
		/* 821DE7B8h case    8:*/		return 0x821DE7BC;
		  /* 821DE7BCh */ case    9:  		/* bl 284652 */
		/* 821DE7BCh case    9:*/		regs.LR = 0x821DE7C0; return 0x82223FA8;
		/* 821DE7BCh case    9:*/		return 0x821DE7C0;
		  /* 821DE7C0h */ case   10:  		/* mr R25, R24 */
		/* 821DE7C0h case   10:*/		regs.R25 = regs.R24;
		/* 821DE7C0h case   10:*/		return 0x821DE7C4;
	}
	return 0x821DE7C4;
} // Block from 821DE798h-821DE7C4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821DE7C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE7C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE7C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE7C4);
		  /* 821DE7C4h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821DE7C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821DE7C4h case    0:*/		return 0x821DE7C8;
		  /* 821DE7C8h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821DE7C8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821DE7C8h case    1:*/		return 0x821DE7CC;
		  /* 821DE7CCh */ case    2:  		/* bc 4, CR6_EQ, -220 */
		/* 821DE7CCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DE6F0;  }
		/* 821DE7CCh case    2:*/		return 0x821DE7D0;
		  /* 821DE7D0h */ case    3:  		/* addi R27, R31, 8 */
		/* 821DE7D0h case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R31,0x8);
		/* 821DE7D0h case    3:*/		return 0x821DE7D4;
		  /* 821DE7D4h */ case    4:  		/* b -228 */
		/* 821DE7D4h case    4:*/		return 0x821DE6F0;
		/* 821DE7D4h case    4:*/		return 0x821DE7D8;
	}
	return 0x821DE7D8;
} // Block from 821DE7C4h-821DE7D8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DE7D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE7D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE7D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE7D8);
		  /* 821DE7D8h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821DE7D8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821DE7D8h case    0:*/		return 0x821DE7DC;
		  /* 821DE7DCh */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DE7DCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DE7DCh case    1:*/		return 0x821DE7E0;
		  /* 821DE7E0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DE7E0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DE7E0h case    2:*/		return 0x821DE7E4;
		  /* 821DE7E4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DE7E4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DE7F4;  }
		/* 821DE7E4h case    3:*/		return 0x821DE7E8;
		  /* 821DE7E8h */ case    4:  		/* mr R30, R11 */
		/* 821DE7E8h case    4:*/		regs.R30 = regs.R11;
		/* 821DE7E8h case    4:*/		return 0x821DE7EC;
		  /* 821DE7ECh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DE7ECh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DE7ECh case    5:*/		return 0x821DE7F0;
		  /* 821DE7F0h */ case    6:  		/* bc 4, CR6_EQ, -340 */
		/* 821DE7F0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DE69C;  }
		/* 821DE7F0h case    6:*/		return 0x821DE7F4;
	}
	return 0x821DE7F4;
} // Block from 821DE7D8h-821DE7F4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DE7F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE7F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE7F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE7F4);
		  /* 821DE7F4h */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 821DE7F4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 821DE7F4h case    0:*/		return 0x821DE7F8;
		  /* 821DE7F8h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DE7F8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DE7F8h case    1:*/		return 0x821DE7FC;
		  /* 821DE7FCh */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DE7FCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DE7FCh case    2:*/		return 0x821DE800;
		  /* 821DE800h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DE800h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DE810;  }
		/* 821DE800h case    3:*/		return 0x821DE804;
		  /* 821DE804h */ case    4:  		/* mr R28, R11 */
		/* 821DE804h case    4:*/		regs.R28 = regs.R11;
		/* 821DE804h case    4:*/		return 0x821DE808;
		  /* 821DE808h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DE808h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DE808h case    5:*/		return 0x821DE80C;
		  /* 821DE80Ch */ case    6:  		/* bc 4, CR6_EQ, -492 */
		/* 821DE80Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DE620;  }
		/* 821DE80Ch case    6:*/		return 0x821DE810;
	}
	return 0x821DE810;
} // Block from 821DE7F4h-821DE810h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DE810h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE810);
		  /* 821DE810h */ case    0:  		/* rlwinm. R31, R25, 0, 24, 31 */
		/* 821DE810h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R31,regs.R25);
		/* 821DE810h case    0:*/		return 0x821DE814;
		  /* 821DE814h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821DE814h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DE820;  }
		/* 821DE814h case    1:*/		return 0x821DE818;
		  /* 821DE818h */ case    2:  		/* mr R3, R23 */
		/* 821DE818h case    2:*/		regs.R3 = regs.R23;
		/* 821DE818h case    2:*/		return 0x821DE81C;
		  /* 821DE81Ch */ case    3:  		/* bl -10724 */
		/* 821DE81Ch case    3:*/		regs.LR = 0x821DE820; return 0x821DBE38;
		/* 821DE81Ch case    3:*/		return 0x821DE820;
	}
	return 0x821DE820;
} // Block from 821DE810h-821DE820h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DE820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE820);
		  /* 821DE820h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821DE820h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DE820h case    0:*/		return 0x821DE824;
		  /* 821DE824h */ case    1:  		/* bc 4, CR6_EQ, -544 */
		/* 821DE824h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DE604;  }
		/* 821DE824h case    1:*/		return 0x821DE828;
		  /* 821DE828h */ case    2:  		/* addi R1, R1, 160 */
		/* 821DE828h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821DE828h case    2:*/		return 0x821DE82C;
		  /* 821DE82Ch */ case    3:  		/* b -1365400 */
		/* 821DE82Ch case    3:*/		return 0x82091294;
		/* 821DE82Ch case    3:*/		return 0x821DE830;
	}
	return 0x821DE830;
} // Block from 821DE820h-821DE830h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DE830h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE830( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE830) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE830);
		  /* 821DE830h */ case    0:  		/* mfspr R12, LR */
		/* 821DE830h case    0:*/		regs.R12 = regs.LR;
		/* 821DE830h case    0:*/		return 0x821DE834;
		  /* 821DE834h */ case    1:  		/* bl -1365488 */
		/* 821DE834h case    1:*/		regs.LR = 0x821DE838; return 0x82091244;
		/* 821DE834h case    1:*/		return 0x821DE838;
		  /* 821DE838h */ case    2:  		/* stfd FR30, <#[R1 - 96]> */
		/* 821DE838h case    2:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFFA0) );
		/* 821DE838h case    2:*/		return 0x821DE83C;
		  /* 821DE83Ch */ case    3:  		/* stfd FR31, <#[R1 - 88]> */
		/* 821DE83Ch case    3:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFFA8) );
		/* 821DE83Ch case    3:*/		return 0x821DE840;
		  /* 821DE840h */ case    4:  		/* stwu R1, <#[R1 - 224]> */
		/* 821DE840h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 821DE840h case    4:*/		return 0x821DE844;
		  /* 821DE844h */ case    5:  		/* lwz R11, <#[R3 + 4]> */
		/* 821DE844h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821DE844h case    5:*/		return 0x821DE848;
		  /* 821DE848h */ case    6:  		/* mr R28, R3 */
		/* 821DE848h case    6:*/		regs.R28 = regs.R3;
		/* 821DE848h case    6:*/		return 0x821DE84C;
		  /* 821DE84Ch */ case    7:  		/* mr R24, R4 */
		/* 821DE84Ch case    7:*/		regs.R24 = regs.R4;
		/* 821DE84Ch case    7:*/		return 0x821DE850;
		  /* 821DE850h */ case    8:  		/* li R25, 0 */
		/* 821DE850h case    8:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821DE850h case    8:*/		return 0x821DE854;
		  /* 821DE854h */ case    9:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DE854h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DE854h case    9:*/		return 0x821DE858;
	}
	return 0x821DE858;
} // Block from 821DE830h-821DE858h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DE858h
// Function '?ResolveInvalidInstructions@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE858);
		  /* 821DE858h */ case    0:  		/* bc 4, CR0_EQ, 612 */
		/* 821DE858h case    0:*/		if ( !regs.CR[0].eq ) { return 0x821DEABC;  }
		/* 821DE858h case    0:*/		return 0x821DE85C;
		  /* 821DE85Ch */ case    1:  		/* mr R26, R11 */
		/* 821DE85Ch case    1:*/		regs.R26 = regs.R11;
		/* 821DE85Ch case    1:*/		return 0x821DE860;
		  /* 821DE860h */ case    2:  		/* cmplwi CR0, R11, 0 */
		/* 821DE860h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DE860h case    2:*/		return 0x821DE864;
		  /* 821DE864h */ case    3:  		/* bc 12, CR0_EQ, 600 */
		/* 821DE864h case    3:*/		if ( regs.CR[0].eq ) { return 0x821DEABC;  }
		/* 821DE864h case    3:*/		return 0x821DE868;
		  /* 821DE868h */ case    4:  		/* lis R11, -32256 */
		/* 821DE868h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821DE868h case    4:*/		return 0x821DE86C;
		  /* 821DE86Ch */ case    5:  		/* lis R10, -32256 */
		/* 821DE86Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 821DE86Ch case    5:*/		return 0x821DE870;
		  /* 821DE870h */ case    6:  		/* lfd FR30, <#[R11 + 1848]> */
		/* 821DE870h case    6:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R11 + 0x00000738) );
		/* 821DE870h case    6:*/		return 0x821DE874;
		  /* 821DE874h */ case    7:  		/* lfd FR31, <#[R10 + 1808]> */
		/* 821DE874h case    7:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R10 + 0x00000710) );
		/* 821DE874h case    7:*/		return 0x821DE878;
		  /* 821DE878h */ case    8:  		/* lwz R11, <#[R26 + 28]> */
		/* 821DE878h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000001C) );
		/* 821DE878h case    8:*/		return 0x821DE87C;
		  /* 821DE87Ch */ case    9:  		/* li R27, 0 */
		/* 821DE87Ch case    9:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821DE87Ch case    9:*/		return 0x821DE880;
		  /* 821DE880h */ case   10:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DE880h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DE880h case   10:*/		return 0x821DE884;
		  /* 821DE884h */ case   11:  		/* bc 4, CR0_EQ, 432 */
		/* 821DE884h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821DEA34;  }
		/* 821DE884h case   11:*/		return 0x821DE888;
		  /* 821DE888h */ case   12:  		/* lwz R11, <#[R26 + 24]> */
		/* 821DE888h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000018) );
		/* 821DE888h case   12:*/		return 0x821DE88C;
		  /* 821DE88Ch */ case   13:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DE88Ch case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DE88Ch case   13:*/		return 0x821DE890;
		  /* 821DE890h */ case   14:  		/* addi R30, R11, -40 */
		/* 821DE890h case   14:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFD8);
		/* 821DE890h case   14:*/		return 0x821DE894;
		  /* 821DE894h */ case   15:  		/* cmplwi CR6, R30, 0 */
		/* 821DE894h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821DE894h case   15:*/		return 0x821DE898;
		  /* 821DE898h */ case   16:  		/* bc 12, CR6_EQ, 500 */
		/* 821DE898h case   16:*/		if ( regs.CR[6].eq ) { return 0x821DEA8C;  }
		/* 821DE898h case   16:*/		return 0x821DE89C;
		  /* 821DE89Ch */ case   17:  		/* lwz R31, <#[R30 + 8]> */
		/* 821DE89Ch case   17:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000008) );
		/* 821DE89Ch case   17:*/		return 0x821DE8A0;
		  /* 821DE8A0h */ case   18:  		/* rlwinm R11, R31, 0, 18, 24 */
		/* 821DE8A0h case   18:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R31);
		/* 821DE8A0h case   18:*/		return 0x821DE8A4;
		  /* 821DE8A4h */ case   19:  		/* cmplwi CR6, R11, 14976 */
		/* 821DE8A4h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003A80);
		/* 821DE8A4h case   19:*/		return 0x821DE8A8;
		  /* 821DE8A8h */ case   20:  		/* bc 4, CR6_EQ, 380 */
		/* 821DE8A8h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821DEA24;  }
		/* 821DE8A8h case   20:*/		return 0x821DE8AC;
		  /* 821DE8ACh */ case   21:  		/* li R6, 0 */
		/* 821DE8ACh case   21:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821DE8ACh case   21:*/		return 0x821DE8B0;
		  /* 821DE8B0h */ case   22:  		/* li R5, 0 */
		/* 821DE8B0h case   22:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DE8B0h case   22:*/		return 0x821DE8B4;
		  /* 821DE8B4h */ case   23:  		/* li R4, 117 */
		/* 821DE8B4h case   23:*/		cpu::op::li<0>(regs,&regs.R4,0x75);
		/* 821DE8B4h case   23:*/		return 0x821DE8B8;
		  /* 821DE8B8h */ case   24:  		/* mr R3, R28 */
		/* 821DE8B8h case   24:*/		regs.R3 = regs.R28;
		/* 821DE8B8h case   24:*/		return 0x821DE8BC;
		  /* 821DE8BCh */ case   25:  		/* bl -500876 */
		/* 821DE8BCh case   25:*/		regs.LR = 0x821DE8C0; return 0x82164430;
		/* 821DE8BCh case   25:*/		return 0x821DE8C0;
		  /* 821DE8C0h */ case   26:  		/* addi R11, R30, -16 */
		/* 821DE8C0h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFF0);
		/* 821DE8C0h case   26:*/		return 0x821DE8C4;
		  /* 821DE8C4h */ case   27:  		/* add R11, R3, R11 */
		/* 821DE8C4h case   27:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821DE8C4h case   27:*/		return 0x821DE8C8;
		  /* 821DE8C8h */ case   28:  		/* lwz R10, <#[R11]> */
		/* 821DE8C8h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DE8C8h case   28:*/		return 0x821DE8CC;
		  /* 821DE8CCh */ case   29:  		/* rlwinm R10, R10, 0, 29, 31 */
		/* 821DE8CCh case   29:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R10);
		/* 821DE8CCh case   29:*/		return 0x821DE8D0;
		  /* 821DE8D0h */ case   30:  		/* cmplwi CR6, R10, 7 */
		/* 821DE8D0h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000007);
		/* 821DE8D0h case   30:*/		return 0x821DE8D4;
		  /* 821DE8D4h */ case   31:  		/* bc 4, CR6_EQ, 336 */
		/* 821DE8D4h case   31:*/		if ( !regs.CR[6].eq ) { return 0x821DEA24;  }
		/* 821DE8D4h case   31:*/		return 0x821DE8D8;
		  /* 821DE8D8h */ case   32:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DE8D8h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DE8D8h case   32:*/		return 0x821DE8DC;
		  /* 821DE8DCh */ case   33:  		/* cmpwi CR6, R11, 2 */
		/* 821DE8DCh case   33:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 821DE8DCh case   33:*/		return 0x821DE8E0;
		  /* 821DE8E0h */ case   34:  		/* bc 4, CR6_EQ, 324 */
		/* 821DE8E0h case   34:*/		if ( !regs.CR[6].eq ) { return 0x821DEA24;  }
		/* 821DE8E0h case   34:*/		return 0x821DE8E4;
		  /* 821DE8E4h */ case   35:  		/* rlwinm. R11, R31, 15, 31, 31 */
		/* 821DE8E4h case   35:*/		cpu::op::rlwinm<1,15,31,31>(regs,&regs.R11,regs.R31);
		/* 821DE8E4h case   35:*/		return 0x821DE8E8;
		  /* 821DE8E8h */ case   36:  		/* li R27, 1 */
		/* 821DE8E8h case   36:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 821DE8E8h case   36:*/		return 0x821DE8EC;
		  /* 821DE8ECh */ case   37:  		/* bc 12, CR0_EQ, 312 */
		/* 821DE8ECh case   37:*/		if ( regs.CR[0].eq ) { return 0x821DEA24;  }
		/* 821DE8ECh case   37:*/		return 0x821DE8F0;
		  /* 821DE8F0h */ case   38:  		/* mr R3, R30 */
		/* 821DE8F0h case   38:*/		regs.R3 = regs.R30;
		/* 821DE8F0h case   38:*/		return 0x821DE8F4;
		  /* 821DE8F4h */ case   39:  		/* bl -466108 */
		/* 821DE8F4h case   39:*/		regs.LR = 0x821DE8F8; return 0x8216CC38;
		/* 821DE8F4h case   39:*/		return 0x821DE8F8;
		  /* 821DE8F8h */ case   40:  		/* lwz R31, <#[R3 + 12]> */
		/* 821DE8F8h case   40:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x0000000C) );
		/* 821DE8F8h case   40:*/		return 0x821DE8FC;
		  /* 821DE8FCh */ case   41:  		/* mr R29, R3 */
		/* 821DE8FCh case   41:*/		regs.R29 = regs.R3;
		/* 821DE8FCh case   41:*/		return 0x821DE900;
		  /* 821DE900h */ case   42:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DE900h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DE900h case   42:*/		return 0x821DE904;
		  /* 821DE904h */ case   43:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821DE904h case   43:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821DE904h case   43:*/		return 0x821DE908;
		  /* 821DE908h */ case   44:  		/* cmplwi CR6, R11, 21 */
		/* 821DE908h case   44:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000015);
		/* 821DE908h case   44:*/		return 0x821DE90C;
		  /* 821DE90Ch */ case   45:  		/* bc 12, CR6_LT, 16 */
		/* 821DE90Ch case   45:*/		if ( regs.CR[6].lt ) { return 0x821DE91C;  }
		/* 821DE90Ch case   45:*/		return 0x821DE910;
		  /* 821DE910h */ case   46:  		/* cmplwi CR6, R11, 24 */
		/* 821DE910h case   46:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000018);
		/* 821DE910h case   46:*/		return 0x821DE914;
		  /* 821DE914h */ case   47:  		/* li R11, 1 */
		/* 821DE914h case   47:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821DE914h case   47:*/		return 0x821DE918;
		  /* 821DE918h */ case   48:  		/* bc 4, CR6_GT, 8 */
		/* 821DE918h case   48:*/		if ( !regs.CR[6].gt ) { return 0x821DE920;  }
		/* 821DE918h case   48:*/		return 0x821DE91C;
	}
	return 0x821DE91C;
} // Block from 821DE858h-821DE91Ch (49 instructions)

//////////////////////////////////////////////////////
// Block at 821DE91Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE91C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE91C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE91C);
		  /* 821DE91Ch */ case    0:  		/* li R11, 0 */
		/* 821DE91Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DE91Ch case    0:*/		return 0x821DE920;
	}
	return 0x821DE920;
} // Block from 821DE91Ch-821DE920h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DE920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE920);
		  /* 821DE920h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DE920h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DE920h case    0:*/		return 0x821DE924;
		  /* 821DE924h */ case    1:  		/* addi R5, R1, 80 */
		/* 821DE924h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821DE924h case    1:*/		return 0x821DE928;
		  /* 821DE928h */ case    2:  		/* addi R4, R1, 96 */
		/* 821DE928h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 821DE928h case    2:*/		return 0x821DE92C;
		  /* 821DE92Ch */ case    3:  		/* bc 12, CR0_EQ, 232 */
		/* 821DE92Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x821DEA14;  }
		/* 821DE92Ch case    3:*/		return 0x821DE930;
		  /* 821DE930h */ case    4:  		/* lwz R23, <#[R31 + 48]> */
		/* 821DE930h case    4:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R31 + 0x00000030) );
		/* 821DE930h case    4:*/		return 0x821DE934;
		  /* 821DE934h */ case    5:  		/* lwz R3, <#[R23 + 12]> */
		/* 821DE934h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R23 + 0x0000000C) );
		/* 821DE934h case    5:*/		return 0x821DE938;
		  /* 821DE938h */ case    6:  		/* bl 297736 */
		/* 821DE938h case    6:*/		regs.LR = 0x821DE93C; return 0x82227440;
		/* 821DE938h case    6:*/		return 0x821DE93C;
		  /* 821DE93Ch */ case    7:  		/* lwz R11, <#[R23]> */
		/* 821DE93Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821DE93Ch case    7:*/		return 0x821DE940;
		  /* 821DE940h */ case    8:  		/* li R10, 1 */
		/* 821DE940h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821DE940h case    8:*/		return 0x821DE944;
		  /* 821DE944h */ case    9:  		/* rlwinm R11, R11, 27, 30, 31 */
		/* 821DE944h case    9:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R11,regs.R11);
		/* 821DE944h case    9:*/		return 0x821DE948;
		  /* 821DE948h */ case   10:  		/* slw R10, R10, R11 */
		/* 821DE948h case   10:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821DE948h case   10:*/		return 0x821DE94C;
		  /* 821DE94Ch */ case   11:  		/* and. R10, R10, R3 */
		/* 821DE94Ch case   11:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R3);
		/* 821DE94Ch case   11:*/		return 0x821DE950;
		  /* 821DE950h */ case   12:  		/* bc 12, CR0_EQ, 204 */
		/* 821DE950h case   12:*/		if ( regs.CR[0].eq ) { return 0x821DEA1C;  }
		/* 821DE950h case   12:*/		return 0x821DE954;
		  /* 821DE954h */ case   13:  		/* rlwinm R10, R11, 1, 0, 30 */
		/* 821DE954h case   13:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R11);
		/* 821DE954h case   13:*/		return 0x821DE958;
		  /* 821DE958h */ case   14:  		/* lwz R9, <#[R1 + 80]> */
		/* 821DE958h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 821DE958h case   14:*/		return 0x821DE95C;
		  /* 821DE95Ch */ case   15:  		/* rlwinm R8, R11, 30, 3, 29 */
		/* 821DE95Ch case   15:*/		cpu::op::rlwinm<0,30,3,29>(regs,&regs.R8,regs.R11);
		/* 821DE95Ch case   15:*/		return 0x821DE960;
		  /* 821DE960h */ case   16:  		/* addi R10, R10, 1 */
		/* 821DE960h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821DE960h case   16:*/		return 0x821DE964;
		  /* 821DE964h */ case   17:  		/* addi R7, R1, 80 */
		/* 821DE964h case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 821DE964h case   17:*/		return 0x821DE968;
		  /* 821DE968h */ case   18:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821DE968h case   18:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821DE968h case   18:*/		return 0x821DE96C;
		  /* 821DE96Ch */ case   19:  		/* li R6, 2 */
		/* 821DE96Ch case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 821DE96Ch case   19:*/		return 0x821DE970;
		  /* 821DE970h */ case   20:  		/* rlwinm R5, R11, 1, 27, 30 */
		/* 821DE970h case   20:*/		cpu::op::rlwinm<0,1,27,30>(regs,&regs.R5,regs.R11);
		/* 821DE970h case   20:*/		return 0x821DE974;
		  /* 821DE974h */ case   21:  		/* rlwinm R4, R11, 3, 0, 28 */
		/* 821DE974h case   21:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R4,regs.R11);
		/* 821DE974h case   21:*/		return 0x821DE978;
		  /* 821DE978h */ case   22:  		/* slw R11, R6, R10 */
		/* 821DE978h case   22:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R6,regs.R10);
		/* 821DE978h case   22:*/		return 0x821DE97C;
		  /* 821DE97Ch */ case   23:  		/* lwzx R10, <#[R8 + R7]> */
		/* 821DE97Ch case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 821DE97Ch case   23:*/		return 0x821DE980;
		  /* 821DE980h */ case   24:  		/* addi R11, R11, -1 */
		/* 821DE980h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821DE980h case   24:*/		return 0x821DE984;
		  /* 821DE984h */ case   25:  		/* li R8, -1 */
		/* 821DE984h case   25:*/		cpu::op::li<0>(regs,&regs.R8,0xFFFFFFFF);
		/* 821DE984h case   25:*/		return 0x821DE988;
		  /* 821DE988h */ case   26:  		/* and R11, R11, R10 */
		/* 821DE988h case   26:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821DE988h case   26:*/		return 0x821DE98C;
		  /* 821DE98Ch */ case   27:  		/* slw R10, R8, R5 */
		/* 821DE98Ch case   27:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R8,regs.R5);
		/* 821DE98Ch case   27:*/		return 0x821DE990;
		  /* 821DE990h */ case   28:  		/* and R11, R11, R10 */
		/* 821DE990h case   28:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821DE990h case   28:*/		return 0x821DE994;
		  /* 821DE994h */ case   29:  		/* addi R10, R1, 96 */
		/* 821DE994h case   29:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 821DE994h case   29:*/		return 0x821DE998;
		  /* 821DE998h */ case   30:  		/* srw R11, R11, R5 */
		/* 821DE998h case   30:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R5);
		/* 821DE998h case   30:*/		return 0x821DE99C;
		  /* 821DE99Ch */ case   31:  		/* rlwinm R9, R9, 0, 0, 29 */
		/* 821DE99Ch case   31:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R9,regs.R9);
		/* 821DE99Ch case   31:*/		return 0x821DE9A0;
		  /* 821DE9A0h */ case   32:  		/* lfdx FR0, <#[R4 + R10]> */
		/* 821DE9A0h case   32:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R4 + regs.R10 + 0x00000000) );
		/* 821DE9A0h case   32:*/		return 0x821DE9A4;
		  /* 821DE9A4h */ case   33:  		/* stfd FR0, <#[R1 + 96]> */
		/* 821DE9A4h case   33:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000060) );
		/* 821DE9A4h case   33:*/		return 0x821DE9A8;
		  /* 821DE9A8h */ case   34:  		/* li R3, 1 */
		/* 821DE9A8h case   34:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821DE9A8h case   34:*/		return 0x821DE9AC;
		  /* 821DE9ACh */ case   35:  		/* or R11, R11, R9 */
		/* 821DE9ACh case   35:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821DE9ACh case   35:*/		return 0x821DE9B0;
		  /* 821DE9B0h */ case   36:  		/* stw R11, <#[R1 + 80]> */
		/* 821DE9B0h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821DE9B0h case   36:*/		return 0x821DE9B4;
		  /* 821DE9B4h */ case   37:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DE9B4h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DE9B4h case   37:*/		return 0x821DE9B8;
		  /* 821DE9B8h */ case   38:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821DE9B8h case   38:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821DE9B8h case   38:*/		return 0x821DE9BC;
		  /* 821DE9BCh */ case   39:  		/* cmpwi CR6, R11, 21 */
		/* 821DE9BCh case   39:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000015);
		/* 821DE9BCh case   39:*/		return 0x821DE9C0;
		  /* 821DE9C0h */ case   40:  		/* bc 12, CR6_EQ, 68 */
		/* 821DE9C0h case   40:*/		if ( regs.CR[6].eq ) { return 0x821DEA04;  }
		/* 821DE9C0h case   40:*/		return 0x821DE9C4;
		  /* 821DE9C4h */ case   41:  		/* cmpwi CR6, R11, 22 */
		/* 821DE9C4h case   41:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000016);
		/* 821DE9C4h case   41:*/		return 0x821DE9C8;
		  /* 821DE9C8h */ case   42:  		/* bc 12, CR6_EQ, 48 */
		/* 821DE9C8h case   42:*/		if ( regs.CR[6].eq ) { return 0x821DE9F8;  }
		/* 821DE9C8h case   42:*/		return 0x821DE9CC;
		  /* 821DE9CCh */ case   43:  		/* cmpwi CR6, R11, 23 */
		/* 821DE9CCh case   43:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000017);
		/* 821DE9CCh case   43:*/		return 0x821DE9D0;
		  /* 821DE9D0h */ case   44:  		/* bc 12, CR6_EQ, 24 */
		/* 821DE9D0h case   44:*/		if ( regs.CR[6].eq ) { return 0x821DE9E8;  }
		/* 821DE9D0h case   44:*/		return 0x821DE9D4;
		  /* 821DE9D4h */ case   45:  		/* cmpwi CR6, R11, 24 */
		/* 821DE9D4h case   45:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000018);
		/* 821DE9D4h case   45:*/		return 0x821DE9D8;
		  /* 821DE9D8h */ case   46:  		/* bc 4, CR6_EQ, 264 */
		/* 821DE9D8h case   46:*/		if ( !regs.CR[6].eq ) { return 0x821DEAE0;  }
		/* 821DE9D8h case   46:*/		return 0x821DE9DC;
		  /* 821DE9DCh */ case   47:  		/* fsel FR0, FR0, FR31, FR30 */
		/* 821DE9DCh case   47:*/		cpu::op::fsel<0>(regs,&regs.FR0,regs.FR0,regs.FR31,regs.FR30);
		/* 821DE9DCh case   47:*/		return 0x821DE9E0;
		  /* 821DE9E0h */ case   48:  		/* stfd FR0, <#[R1 + 96]> */
		/* 821DE9E0h case   48:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000060) );
		/* 821DE9E0h case   48:*/		return 0x821DE9E4;
		  /* 821DE9E4h */ case   49:  		/* b 56 */
		/* 821DE9E4h case   49:*/		return 0x821DEA1C;
		/* 821DE9E4h case   49:*/		return 0x821DE9E8;
	}
	return 0x821DE9E8;
} // Block from 821DE920h-821DE9E8h (50 instructions)

//////////////////////////////////////////////////////
// Block at 821DE9E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE9E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE9E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE9E8);
		  /* 821DE9E8h */ case    0:  		/* fcmpu CR6, FR0, FR31 */
		/* 821DE9E8h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 821DE9E8h case    0:*/		return 0x821DE9EC;
		  /* 821DE9ECh */ case    1:  		/* bc 12, CR6_GT, 32 */
		/* 821DE9ECh case    1:*/		if ( regs.CR[6].gt ) { return 0x821DEA0C;  }
		/* 821DE9ECh case    1:*/		return 0x821DE9F0;
		  /* 821DE9F0h */ case    2:  		/* stfd FR30, <#[R1 + 96]> */
		/* 821DE9F0h case    2:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0x00000060) );
		/* 821DE9F0h case    2:*/		return 0x821DE9F4;
		  /* 821DE9F4h */ case    3:  		/* b 40 */
		/* 821DE9F4h case    3:*/		return 0x821DEA1C;
		/* 821DE9F4h case    3:*/		return 0x821DE9F8;
	}
	return 0x821DE9F8;
} // Block from 821DE9E8h-821DE9F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DE9F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DE9F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DE9F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DE9F8);
		  /* 821DE9F8h */ case    0:  		/* fcmpu CR6, FR0, FR31 */
		/* 821DE9F8h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 821DE9F8h case    0:*/		return 0x821DE9FC;
		  /* 821DE9FCh */ case    1:  		/* bc 12, CR6_EQ, -12 */
		/* 821DE9FCh case    1:*/		if ( regs.CR[6].eq ) { return 0x821DE9F0;  }
		/* 821DE9FCh case    1:*/		return 0x821DEA00;
		  /* 821DEA00h */ case    2:  		/* b 12 */
		/* 821DEA00h case    2:*/		return 0x821DEA0C;
		/* 821DEA00h case    2:*/		return 0x821DEA04;
	}
	return 0x821DEA04;
} // Block from 821DE9F8h-821DEA04h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DEA04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEA04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEA04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEA04);
		  /* 821DEA04h */ case    0:  		/* fcmpu CR6, FR0, FR31 */
		/* 821DEA04h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 821DEA04h case    0:*/		return 0x821DEA08;
		  /* 821DEA08h */ case    1:  		/* bc 4, CR6_EQ, -24 */
		/* 821DEA08h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DE9F0;  }
		/* 821DEA08h case    1:*/		return 0x821DEA0C;
	}
	return 0x821DEA0C;
} // Block from 821DEA04h-821DEA0Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DEA0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEA0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEA0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEA0C);
		  /* 821DEA0Ch */ case    0:  		/* stfd FR31, <#[R1 + 96]> */
		/* 821DEA0Ch case    0:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0x00000060) );
		/* 821DEA0Ch case    0:*/		return 0x821DEA10;
		  /* 821DEA10h */ case    1:  		/* b 12 */
		/* 821DEA10h case    1:*/		return 0x821DEA1C;
		/* 821DEA10h case    1:*/		return 0x821DEA14;
	}
	return 0x821DEA14;
} // Block from 821DEA0Ch-821DEA14h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DEA14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEA14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEA14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEA14);
		  /* 821DEA14h */ case    0:  		/* mr R3, R31 */
		/* 821DEA14h case    0:*/		regs.R3 = regs.R31;
		/* 821DEA14h case    0:*/		return 0x821DEA18;
		  /* 821DEA18h */ case    1:  		/* bl 297512 */
		/* 821DEA18h case    1:*/		regs.LR = 0x821DEA1C; return 0x82227440;
		/* 821DEA18h case    1:*/		return 0x821DEA1C;
	}
	return 0x821DEA1C;
} // Block from 821DEA14h-821DEA1Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DEA1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEA1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEA1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEA1C);
		  /* 821DEA1Ch */ case    0:  		/* rlwinm. R11, R3, 0, 31, 31 */
		/* 821DEA1Ch case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R3);
		/* 821DEA1Ch case    0:*/		return 0x821DEA20;
		  /* 821DEA20h */ case    1:  		/* bc 4, CR0_EQ, 28 */
		/* 821DEA20h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821DEA3C;  }
		/* 821DEA20h case    1:*/		return 0x821DEA24;
	}
	return 0x821DEA24;
} // Block from 821DEA1Ch-821DEA24h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DEA24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEA24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEA24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEA24);
		  /* 821DEA24h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821DEA24h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821DEA24h case    0:*/		return 0x821DEA28;
		  /* 821DEA28h */ case    1:  		/* lwz R11, <#[R11 + 36]> */
		/* 821DEA28h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821DEA28h case    1:*/		return 0x821DEA2C;
		  /* 821DEA2Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DEA2Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DEA2Ch case    2:*/		return 0x821DEA30;
		  /* 821DEA30h */ case    3:  		/* bc 12, CR0_EQ, -420 */
		/* 821DEA30h case    3:*/		if ( regs.CR[0].eq ) { return 0x821DE88C;  }
		/* 821DEA30h case    3:*/		return 0x821DEA34;
	}
	return 0x821DEA34;
} // Block from 821DEA24h-821DEA34h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DEA34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEA34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEA34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEA34);
		  /* 821DEA34h */ case    0:  		/* li R30, 0 */
		/* 821DEA34h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821DEA34h case    0:*/		return 0x821DEA38;
		  /* 821DEA38h */ case    1:  		/* b -420 */
		/* 821DEA38h case    1:*/		return 0x821DE894;
		/* 821DEA38h case    1:*/		return 0x821DEA3C;
	}
	return 0x821DEA3C;
} // Block from 821DEA34h-821DEA3Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DEA3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEA3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEA3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEA3C);
		  /* 821DEA3Ch */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 821DEA3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821DEA3Ch case    0:*/		return 0x821DEA40;
		  /* 821DEA40h */ case    1:  		/* lfd FR0, <#[R1 + 96]> */
		/* 821DEA40h case    1:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000060) );
		/* 821DEA40h case    1:*/		return 0x821DEA44;
		  /* 821DEA44h */ case    2:  		/* fctidz FR0, FR0 */
		/* 821DEA44h case    2:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR0);
		/* 821DEA44h case    2:*/		return 0x821DEA48;
		  /* 821DEA48h */ case    3:  		/* stfd FR0, <#[R1 + 88]> */
		/* 821DEA48h case    3:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000058) );
		/* 821DEA48h case    3:*/		return 0x821DEA4C;
		  /* 821DEA4Ch */ case    4:  		/* rlwinm R11, R11, 14, 31, 31 */
		/* 821DEA4Ch case    4:*/		cpu::op::rlwinm<0,14,31,31>(regs,&regs.R11,regs.R11);
		/* 821DEA4Ch case    4:*/		return 0x821DEA50;
		  /* 821DEA50h */ case    5:  		/* lwz R10, <#[R1 + 92]> */
		/* 821DEA50h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 821DEA50h case    5:*/		return 0x821DEA54;
		  /* 821DEA54h */ case    6:  		/* cmplw CR6, R10, R11 */
		/* 821DEA54h case    6:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821DEA54h case    6:*/		return 0x821DEA58;
		  /* 821DEA58h */ case    7:  		/* bc 4, CR6_EQ, 148 */
		/* 821DEA58h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821DEAEC;  }
		/* 821DEA58h case    7:*/		return 0x821DEA5C;
		  /* 821DEA5Ch */ case    8:  		/* mr R5, R28 */
		/* 821DEA5Ch case    8:*/		regs.R5 = regs.R28;
		/* 821DEA5Ch case    8:*/		return 0x821DEA60;
		  /* 821DEA60h */ case    9:  		/* mr R4, R29 */
		/* 821DEA60h case    9:*/		regs.R4 = regs.R29;
		/* 821DEA60h case    9:*/		return 0x821DEA64;
		  /* 821DEA64h */ case   10:  		/* mr R3, R30 */
		/* 821DEA64h case   10:*/		regs.R3 = regs.R30;
		/* 821DEA64h case   10:*/		return 0x821DEA68;
		  /* 821DEA68h */ case   11:  		/* bl -418136 */
		/* 821DEA68h case   11:*/		regs.LR = 0x821DEA6C; return 0x82178910;
		/* 821DEA68h case   11:*/		return 0x821DEA6C;
		  /* 821DEA6Ch */ case   12:  		/* lwz R11, <#[R30 + 8]> */
		/* 821DEA6Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821DEA6Ch case   12:*/		return 0x821DEA70;
		  /* 821DEA70h */ case   13:  		/* mr R4, R30 */
		/* 821DEA70h case   13:*/		regs.R4 = regs.R30;
		/* 821DEA70h case   13:*/		return 0x821DEA74;
		  /* 821DEA74h */ case   14:  		/* rlwinm R11, R11, 0, 15, 13 */
		/* 821DEA74h case   14:*/		cpu::op::rlwinm<0,0,15,13>(regs,&regs.R11,regs.R11);
		/* 821DEA74h case   14:*/		return 0x821DEA78;
		  /* 821DEA78h */ case   15:  		/* mr R3, R28 */
		/* 821DEA78h case   15:*/		regs.R3 = regs.R28;
		/* 821DEA78h case   15:*/		return 0x821DEA7C;
		  /* 821DEA7Ch */ case   16:  		/* stw R11, <#[R30 + 8]> */
		/* 821DEA7Ch case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821DEA7Ch case   16:*/		return 0x821DEA80;
		  /* 821DEA80h */ case   17:  		/* bl 314320 */
		/* 821DEA80h case   17:*/		regs.LR = 0x821DEA84; return 0x8222B650;
		/* 821DEA80h case   17:*/		return 0x821DEA84;
		  /* 821DEA84h */ case   18:  		/* li R25, 1 */
		/* 821DEA84h case   18:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 821DEA84h case   18:*/		return 0x821DEA88;
		  /* 821DEA88h */ case   19:  		/* b -528 */
		/* 821DEA88h case   19:*/		return 0x821DE878;
		/* 821DEA88h case   19:*/		return 0x821DEA8C;
	}
	return 0x821DEA8C;
} // Block from 821DEA3Ch-821DEA8Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 821DEA8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEA8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEA8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEA8C);
		  /* 821DEA8Ch */ case    0:  		/* rlwinm. R11, R27, 0, 24, 31 */
		/* 821DEA8Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R27);
		/* 821DEA8Ch case    0:*/		return 0x821DEA90;
		  /* 821DEA90h */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 821DEA90h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821DEAA0;  }
		/* 821DEA90h case    1:*/		return 0x821DEA94;
		  /* 821DEA94h */ case    2:  		/* lwz R11, <#[R26 + 68]> */
		/* 821DEA94h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000044) );
		/* 821DEA94h case    2:*/		return 0x821DEA98;
		  /* 821DEA98h */ case    3:  		/* rlwinm R11, R11, 0, 1, 31 */
		/* 821DEA98h case    3:*/		cpu::op::rlwinm<0,0,1,31>(regs,&regs.R11,regs.R11);
		/* 821DEA98h case    3:*/		return 0x821DEA9C;
		  /* 821DEA9Ch */ case    4:  		/* stw R11, <#[R26 + 68]> */
		/* 821DEA9Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000044) );
		/* 821DEA9Ch case    4:*/		return 0x821DEAA0;
	}
	return 0x821DEAA0;
} // Block from 821DEA8Ch-821DEAA0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DEAA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEAA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEAA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEAA0);
		  /* 821DEAA0h */ case    0:  		/* rlwinm R11, R26, 0, 0, 30 */
		/* 821DEAA0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R26);
		/* 821DEAA0h case    0:*/		return 0x821DEAA4;
		  /* 821DEAA4h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DEAA4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DEAA4h case    1:*/		return 0x821DEAA8;
		  /* 821DEAA8h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DEAA8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DEAA8h case    2:*/		return 0x821DEAAC;
		  /* 821DEAACh */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DEAACh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DEABC;  }
		/* 821DEAACh case    3:*/		return 0x821DEAB0;
		  /* 821DEAB0h */ case    4:  		/* mr R26, R11 */
		/* 821DEAB0h case    4:*/		regs.R26 = regs.R11;
		/* 821DEAB0h case    4:*/		return 0x821DEAB4;
		  /* 821DEAB4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DEAB4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DEAB4h case    5:*/		return 0x821DEAB8;
		  /* 821DEAB8h */ case    6:  		/* bc 4, CR6_EQ, -576 */
		/* 821DEAB8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DE878;  }
		/* 821DEAB8h case    6:*/		return 0x821DEABC;
	}
	return 0x821DEABC;
} // Block from 821DEAA0h-821DEABCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DEABCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEABC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEABC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEABC);
		  /* 821DEABCh */ case    0:  		/* rlwinm. R11, R25, 0, 24, 31 */
		/* 821DEABCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R25);
		/* 821DEABCh case    0:*/		return 0x821DEAC0;
		  /* 821DEAC0h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821DEAC0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DEAD0;  }
		/* 821DEAC0h case    1:*/		return 0x821DEAC4;
		  /* 821DEAC4h */ case    2:  		/* mr R4, R24 */
		/* 821DEAC4h case    2:*/		regs.R4 = regs.R24;
		/* 821DEAC4h case    2:*/		return 0x821DEAC8;
		  /* 821DEAC8h */ case    3:  		/* mr R3, R28 */
		/* 821DEAC8h case    3:*/		regs.R3 = regs.R28;
		/* 821DEAC8h case    3:*/		return 0x821DEACC;
		  /* 821DEACCh */ case    4:  		/* bl -21076 */
		/* 821DEACCh case    4:*/		regs.LR = 0x821DEAD0; return 0x821D9878;
		/* 821DEACCh case    4:*/		return 0x821DEAD0;
	}
	return 0x821DEAD0;
} // Block from 821DEABCh-821DEAD0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DEAD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEAD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEAD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEAD0);
		  /* 821DEAD0h */ case    0:  		/* addi R1, R1, 224 */
		/* 821DEAD0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 821DEAD0h case    0:*/		return 0x821DEAD4;
		  /* 821DEAD4h */ case    1:  		/* lfd FR30, <#[R1 - 96]> */
		/* 821DEAD4h case    1:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFFA0) );
		/* 821DEAD4h case    1:*/		return 0x821DEAD8;
		  /* 821DEAD8h */ case    2:  		/* lfd FR31, <#[R1 - 88]> */
		/* 821DEAD8h case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFFA8) );
		/* 821DEAD8h case    2:*/		return 0x821DEADC;
		  /* 821DEADCh */ case    3:  		/* b -1366088 */
		/* 821DEADCh case    3:*/		return 0x82091294;
		/* 821DEADCh case    3:*/		return 0x821DEAE0;
	}
	return 0x821DEAE0;
} // Block from 821DEAD0h-821DEAE0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DEAE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEAE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEAE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEAE0);
		  /* 821DEAE0h */ case    0:  		/* li R4, 4800 */
		/* 821DEAE0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821DEAE0h case    0:*/		return 0x821DEAE4;
		  /* 821DEAE4h */ case    1:  		/* mr R3, R28 */
		/* 821DEAE4h case    1:*/		regs.R3 = regs.R28;
		/* 821DEAE4h case    1:*/		return 0x821DEAE8;
		  /* 821DEAE8h */ case    2:  		/* bl -576640 */
		/* 821DEAE8h case    2:*/		regs.LR = 0x821DEAEC; return 0x82151E68;
		/* 821DEAE8h case    2:*/		return 0x821DEAEC;
	}
	return 0x821DEAEC;
} // Block from 821DEAE0h-821DEAECh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DEAECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEAEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEAEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEAEC);
		  /* 821DEAECh */ case    0:  		/* li R4, 3643 */
		/* 821DEAECh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xE3B);
		/* 821DEAECh case    0:*/		return 0x821DEAF0;
		  /* 821DEAF0h */ case    1:  		/* mr R3, R28 */
		/* 821DEAF0h case    1:*/		regs.R3 = regs.R28;
		/* 821DEAF0h case    1:*/		return 0x821DEAF4;
		  /* 821DEAF4h */ case    2:  		/* bl -576652 */
		/* 821DEAF4h case    2:*/		regs.LR = 0x821DEAF8; return 0x82151E68;
		/* 821DEAF4h case    2:*/		return 0x821DEAF8;
	}
	return 0x821DEAF8;
} // Block from 821DEAECh-821DEAF8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DEAF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEAF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEAF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEAF8);
		  /* 821DEAF8h */ case    0:  		/* mfspr R12, LR */
		/* 821DEAF8h case    0:*/		regs.R12 = regs.LR;
		/* 821DEAF8h case    0:*/		return 0x821DEAFC;
		  /* 821DEAFCh */ case    1:  		/* bl -1366208 */
		/* 821DEAFCh case    1:*/		regs.LR = 0x821DEB00; return 0x8209123C;
		/* 821DEAFCh case    1:*/		return 0x821DEB00;
		  /* 821DEB00h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821DEB00h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821DEB00h case    2:*/		return 0x821DEB04;
		  /* 821DEB04h */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 821DEB04h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821DEB04h case    3:*/		return 0x821DEB08;
		  /* 821DEB08h */ case    4:  		/* mr R27, R3 */
		/* 821DEB08h case    4:*/		regs.R27 = regs.R3;
		/* 821DEB08h case    4:*/		return 0x821DEB0C;
		  /* 821DEB0Ch */ case    5:  		/* li R22, 0 */
		/* 821DEB0Ch case    5:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821DEB0Ch case    5:*/		return 0x821DEB10;
		  /* 821DEB10h */ case    6:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DEB10h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DEB10h case    6:*/		return 0x821DEB14;
		  /* 821DEB14h */ case    7:  		/* bc 4, CR0_EQ, 1344 */
		/* 821DEB14h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821DF054;  }
		/* 821DEB14h case    7:*/		return 0x821DEB18;
		  /* 821DEB18h */ case    8:  		/* lwz R11, <#[R3]> */
		/* 821DEB18h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821DEB18h case    8:*/		return 0x821DEB1C;
		  /* 821DEB1Ch */ case    9:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DEB1Ch case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DEB1Ch case    9:*/		return 0x821DEB20;
		  /* 821DEB20h */ case   10:  		/* addic. R25, R11, -4 */
		/* 821DEB20h case   10:*/		cpu::op::addic<1>(regs,&regs.R25,regs.R11,0xFFFFFFFC);
		/* 821DEB20h case   10:*/		return 0x821DEB24;
		  /* 821DEB24h */ case   11:  		/* bc 12, CR0_EQ, 1328 */
		/* 821DEB24h case   11:*/		if ( regs.CR[0].eq ) { return 0x821DF054;  }
		/* 821DEB24h case   11:*/		return 0x821DEB28;
		  /* 821DEB28h */ case   12:  		/* rlwinm R23, R25, 0, 0, 30 */
		/* 821DEB28h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R23,regs.R25);
		/* 821DEB28h case   12:*/		return 0x821DEB2C;
		  /* 821DEB2Ch */ case   13:  		/* lwz R11, <#[R23]> */
		/* 821DEB2Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821DEB2Ch case   13:*/		return 0x821DEB30;
		  /* 821DEB30h */ case   14:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DEB30h case   14:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DEB30h case   14:*/		return 0x821DEB34;
		  /* 821DEB34h */ case   15:  		/* bc 12, CR0_EQ, 12 */
		/* 821DEB34h case   15:*/		if ( regs.CR[0].eq ) { return 0x821DEB40;  }
		/* 821DEB34h case   15:*/		return 0x821DEB38;
		  /* 821DEB38h */ case   16:  		/* li R21, 0 */
		/* 821DEB38h case   16:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 821DEB38h case   16:*/		return 0x821DEB3C;
		  /* 821DEB3Ch */ case   17:  		/* b 12 */
		/* 821DEB3Ch case   17:*/		return 0x821DEB48;
		/* 821DEB3Ch case   17:*/		return 0x821DEB40;
	}
	return 0x821DEB40;
} // Block from 821DEAF8h-821DEB40h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821DEB40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEB40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEB40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEB40);
		  /* 821DEB40h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DEB40h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DEB40h case    0:*/		return 0x821DEB44;
		  /* 821DEB44h */ case    1:  		/* addi R21, R11, -4 */
		/* 821DEB44h case    1:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R11,0xFFFFFFFC);
		/* 821DEB44h case    1:*/		return 0x821DEB48;
	}
	return 0x821DEB48;
} // Block from 821DEB40h-821DEB48h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DEB48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEB48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEB48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEB48);
		  /* 821DEB48h */ case    0:  		/* lwz R11, <#[R25 + 68]> */
		/* 821DEB48h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000044) );
		/* 821DEB48h case    0:*/		return 0x821DEB4C;
		  /* 821DEB4Ch */ case    1:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 821DEB4Ch case    1:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 821DEB4Ch case    1:*/		return 0x821DEB50;
		  /* 821DEB50h */ case    2:  		/* bc 12, CR0_EQ, 1272 */
		/* 821DEB50h case    2:*/		if ( regs.CR[0].eq ) { return 0x821DF048;  }
		/* 821DEB50h case    2:*/		return 0x821DEB54;
		  /* 821DEB54h */ case    3:  		/* lwz R10, <#[R23 + 4]> */
		/* 821DEB54h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000004) );
		/* 821DEB54h case    3:*/		return 0x821DEB58;
		  /* 821DEB58h */ case    4:  		/* li R24, 0 */
		/* 821DEB58h case    4:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821DEB58h case    4:*/		return 0x821DEB5C;
		  /* 821DEB5Ch */ case    5:  		/* lwz R11, <#[R25 + 12]> */
		/* 821DEB5Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 821DEB5Ch case    5:*/		return 0x821DEB60;
		  /* 821DEB60h */ case    6:  		/* rlwinm R9, R10, 0, 31, 31 */
		/* 821DEB60h case    6:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821DEB60h case    6:*/		return 0x821DEB64;
		  /* 821DEB64h */ case    7:  		/* cmplwi CR6, R11, 0 */
		/* 821DEB64h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DEB64h case    7:*/		return 0x821DEB68;
		  /* 821DEB68h */ case    8:  		/* addic R9, R9, -1 */
		/* 821DEB68h case    8:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821DEB68h case    8:*/		return 0x821DEB6C;
		  /* 821DEB6Ch */ case    9:  		/* subfe R9, R9, R9 */
		/* 821DEB6Ch case    9:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821DEB6Ch case    9:*/		return 0x821DEB70;
		  /* 821DEB70h */ case   10:  		/* and R26, R9, R10 */
		/* 821DEB70h case   10:*/		cpu::op::and<0>(regs,&regs.R26,regs.R9,regs.R10);
		/* 821DEB70h case   10:*/		return 0x821DEB74;
		  /* 821DEB74h */ case   11:  		/* bc 12, CR6_EQ, 20 */
		/* 821DEB74h case   11:*/		if ( regs.CR[6].eq ) { return 0x821DEB88;  }
		/* 821DEB74h case   11:*/		return 0x821DEB78;
		  /* 821DEB78h */ case   12:  		/* lwz R11, <#[R11 + 8]> */
		/* 821DEB78h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821DEB78h case   12:*/		return 0x821DEB7C;
		  /* 821DEB7Ch */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821DEB7Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DEB7Ch case   13:*/		return 0x821DEB80;
		  /* 821DEB80h */ case   14:  		/* li R11, 1 */
		/* 821DEB80h case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821DEB80h case   14:*/		return 0x821DEB84;
		  /* 821DEB84h */ case   15:  		/* bc 4, CR6_EQ, 8 */
		/* 821DEB84h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821DEB8C;  }
		/* 821DEB84h case   15:*/		return 0x821DEB88;
	}
	return 0x821DEB88;
} // Block from 821DEB48h-821DEB88h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821DEB88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEB88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEB88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEB88);
		  /* 821DEB88h */ case    0:  		/* li R11, 0 */
		/* 821DEB88h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DEB88h case    0:*/		return 0x821DEB8C;
	}
	return 0x821DEB8C;
} // Block from 821DEB88h-821DEB8Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DEB8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEB8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEB8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEB8C);
		  /* 821DEB8Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DEB8Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DEB8Ch case    0:*/		return 0x821DEB90;
		  /* 821DEB90h */ case    1:  		/* bc 12, CR0_EQ, 176 */
		/* 821DEB90h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DEC40;  }
		/* 821DEB90h case    1:*/		return 0x821DEB94;
		  /* 821DEB94h */ case    2:  		/* rlwinm R11, R26, 0, 0, 30 */
		/* 821DEB94h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R26);
		/* 821DEB94h case    2:*/		return 0x821DEB98;
		  /* 821DEB98h */ case    3:  		/* mr R24, R26 */
		/* 821DEB98h case    3:*/		regs.R24 = regs.R26;
		/* 821DEB98h case    3:*/		return 0x821DEB9C;
		  /* 821DEB9Ch */ case    4:  		/* cmplwi CR6, R26, 0 */
		/* 821DEB9Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821DEB9Ch case    4:*/		return 0x821DEBA0;
		  /* 821DEBA0h */ case    5:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DEBA0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DEBA0h case    5:*/		return 0x821DEBA4;
		  /* 821DEBA4h */ case    6:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DEBA4h case    6:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DEBA4h case    6:*/		return 0x821DEBA8;
		  /* 821DEBA8h */ case    7:  		/* addic R10, R10, -1 */
		/* 821DEBA8h case    7:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821DEBA8h case    7:*/		return 0x821DEBAC;
		  /* 821DEBACh */ case    8:  		/* subfe R10, R10, R10 */
		/* 821DEBACh case    8:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821DEBACh case    8:*/		return 0x821DEBB0;
		  /* 821DEBB0h */ case    9:  		/* and R26, R10, R11 */
		/* 821DEBB0h case    9:*/		cpu::op::and<0>(regs,&regs.R26,regs.R10,regs.R11);
		/* 821DEBB0h case    9:*/		return 0x821DEBB4;
		  /* 821DEBB4h */ case   10:  		/* bc 12, CR6_EQ, 140 */
		/* 821DEBB4h case   10:*/		if ( regs.CR[6].eq ) { return 0x821DEC40;  }
		/* 821DEBB4h case   10:*/		return 0x821DEBB8;
		  /* 821DEBB8h */ case   11:  		/* lwz R11, <#[R24 + 28]> */
		/* 821DEBB8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000001C) );
		/* 821DEBB8h case   11:*/		return 0x821DEBBC;
		  /* 821DEBBCh */ case   12:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DEBBCh case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DEBBCh case   12:*/		return 0x821DEBC0;
		  /* 821DEBC0h */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 821DEBC0h case   13:*/		if ( regs.CR[0].eq ) { return 0x821DEBD0;  }
		/* 821DEBC0h case   13:*/		return 0x821DEBC4;
		  /* 821DEBC4h */ case   14:  		/* lwz R11, <#[R24 + 36]> */
		/* 821DEBC4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000024) );
		/* 821DEBC4h case   14:*/		return 0x821DEBC8;
		  /* 821DEBC8h */ case   15:  		/* addi R30, R24, 32 */
		/* 821DEBC8h case   15:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R24,0x20);
		/* 821DEBC8h case   15:*/		return 0x821DEBCC;
		  /* 821DEBCCh */ case   16:  		/* b 12 */
		/* 821DEBCCh case   16:*/		return 0x821DEBD8;
		/* 821DEBCCh case   16:*/		return 0x821DEBD0;
	}
	return 0x821DEBD0;
} // Block from 821DEB8Ch-821DEBD0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821DEBD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEBD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEBD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEBD0);
		  /* 821DEBD0h */ case    0:  		/* lwz R11, <#[R24 + 28]> */
		/* 821DEBD0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000001C) );
		/* 821DEBD0h case    0:*/		return 0x821DEBD4;
		  /* 821DEBD4h */ case    1:  		/* addi R30, R24, 24 */
		/* 821DEBD4h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R24,0x18);
		/* 821DEBD4h case    1:*/		return 0x821DEBD8;
	}
	return 0x821DEBD8;
} // Block from 821DEBD0h-821DEBD8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DEBD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEBD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEBD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEBD8);
		  /* 821DEBD8h */ case    0:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DEBD8h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DEBD8h case    0:*/		return 0x821DEBDC;
		  /* 821DEBDCh */ case    1:  		/* addic R10, R10, -1 */
		/* 821DEBDCh case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821DEBDCh case    1:*/		return 0x821DEBE0;
		  /* 821DEBE0h */ case    2:  		/* subfe R10, R10, R10 */
		/* 821DEBE0h case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821DEBE0h case    2:*/		return 0x821DEBE4;
		  /* 821DEBE4h */ case    3:  		/* and R31, R10, R11 */
		/* 821DEBE4h case    3:*/		cpu::op::and<0>(regs,&regs.R31,regs.R10,regs.R11);
		/* 821DEBE4h case    3:*/		return 0x821DEBE8;
		  /* 821DEBE8h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821DEBE8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DEBE8h case    4:*/		return 0x821DEBEC;
		  /* 821DEBECh */ case    5:  		/* bc 12, CR6_EQ, 216 */
		/* 821DEBECh case    5:*/		if ( regs.CR[6].eq ) { return 0x821DECC4;  }
		/* 821DEBECh case    5:*/		return 0x821DEBF0;
		  /* 821DEBF0h */ case    6:  		/* mr R3, R31 */
		/* 821DEBF0h case    6:*/		regs.R3 = regs.R31;
		/* 821DEBF0h case    6:*/		return 0x821DEBF4;
		  /* 821DEBF4h */ case    7:  		/* bl -502596 */
		/* 821DEBF4h case    7:*/		regs.LR = 0x821DEBF8; return 0x821640B0;
		/* 821DEBF4h case    7:*/		return 0x821DEBF8;
		  /* 821DEBF8h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821DEBF8h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821DEBF8h case    8:*/		return 0x821DEBFC;
		  /* 821DEBFCh */ case    9:  		/* bc 4, CR0_EQ, 1140 */
		/* 821DEBFCh case    9:*/		if ( !regs.CR[0].eq ) { return 0x821DF070;  }
		/* 821DEBFCh case    9:*/		return 0x821DEC00;
		  /* 821DEC00h */ case   10:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821DEC00h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821DEC00h case   10:*/		return 0x821DEC04;
		  /* 821DEC04h */ case   11:  		/* lwz R31, <#[R11 + 40]> */
		/* 821DEC04h case   11:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821DEC04h case   11:*/		return 0x821DEC08;
		  /* 821DEC08h */ case   12:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821DEC08h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821DEC08h case   12:*/		return 0x821DEC0C;
		  /* 821DEC0Ch */ case   13:  		/* bc 4, CR0_EQ, 12 */
		/* 821DEC0Ch case   13:*/		if ( !regs.CR[0].eq ) { return 0x821DEC18;  }
		/* 821DEC0Ch case   13:*/		return 0x821DEC10;
		  /* 821DEC10h */ case   14:  		/* cmplwi CR6, R31, 0 */
		/* 821DEC10h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DEC10h case   14:*/		return 0x821DEC14;
		  /* 821DEC14h */ case   15:  		/* bc 4, CR6_EQ, -36 */
		/* 821DEC14h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821DEBF0;  }
		/* 821DEC14h case   15:*/		return 0x821DEC18;
	}
	return 0x821DEC18;
} // Block from 821DEBD8h-821DEC18h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821DEC18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEC18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEC18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEC18);
		  /* 821DEC18h */ case    0:  		/* addi R11, R24, 32 */
		/* 821DEC18h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0x20);
		/* 821DEC18h case    0:*/		return 0x821DEC1C;
		  /* 821DEC1Ch */ case    1:  		/* cmplw CR6, R30, R11 */
		/* 821DEC1Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821DEC1Ch case    1:*/		return 0x821DEC20;
		  /* 821DEC20h */ case    2:  		/* bc 12, CR6_EQ, 164 */
		/* 821DEC20h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DECC4;  }
		/* 821DEC20h case    2:*/		return 0x821DEC24;
		  /* 821DEC24h */ case    3:  		/* lwz R31, <#[R11 + 4]> */
		/* 821DEC24h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821DEC24h case    3:*/		return 0x821DEC28;
		  /* 821DEC28h */ case    4:  		/* mr R30, R11 */
		/* 821DEC28h case    4:*/		regs.R30 = regs.R11;
		/* 821DEC28h case    4:*/		return 0x821DEC2C;
		  /* 821DEC2Ch */ case    5:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821DEC2Ch case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821DEC2Ch case    5:*/		return 0x821DEC30;
		  /* 821DEC30h */ case    6:  		/* bc 4, CR0_EQ, 148 */
		/* 821DEC30h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821DECC4;  }
		/* 821DEC30h case    6:*/		return 0x821DEC34;
		  /* 821DEC34h */ case    7:  		/* cmplwi CR0, R31, 0 */
		/* 821DEC34h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821DEC34h case    7:*/		return 0x821DEC38;
		  /* 821DEC38h */ case    8:  		/* bc 4, CR0_EQ, -72 */
		/* 821DEC38h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821DEBF0;  }
		/* 821DEC38h case    8:*/		return 0x821DEC3C;
		  /* 821DEC3Ch */ case    9:  		/* b 136 */
		/* 821DEC3Ch case    9:*/		return 0x821DECC4;
		/* 821DEC3Ch case    9:*/		return 0x821DEC40;
	}
	return 0x821DEC40;
} // Block from 821DEC18h-821DEC40h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DEC40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEC40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEC40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEC40);
		  /* 821DEC40h */ case    0:  		/* lwz R11, <#[R25 + 28]> */
		/* 821DEC40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000001C) );
		/* 821DEC40h case    0:*/		return 0x821DEC44;
		  /* 821DEC44h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DEC44h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DEC44h case    1:*/		return 0x821DEC48;
		  /* 821DEC48h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821DEC48h case    2:*/		if ( regs.CR[0].eq ) { return 0x821DEC58;  }
		/* 821DEC48h case    2:*/		return 0x821DEC4C;
		  /* 821DEC4Ch */ case    3:  		/* lwz R11, <#[R25 + 36]> */
		/* 821DEC4Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000024) );
		/* 821DEC4Ch case    3:*/		return 0x821DEC50;
		  /* 821DEC50h */ case    4:  		/* addi R30, R25, 32 */
		/* 821DEC50h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R25,0x20);
		/* 821DEC50h case    4:*/		return 0x821DEC54;
		  /* 821DEC54h */ case    5:  		/* b 12 */
		/* 821DEC54h case    5:*/		return 0x821DEC60;
		/* 821DEC54h case    5:*/		return 0x821DEC58;
	}
	return 0x821DEC58;
} // Block from 821DEC40h-821DEC58h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DEC58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEC58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEC58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEC58);
		  /* 821DEC58h */ case    0:  		/* lwz R11, <#[R25 + 28]> */
		/* 821DEC58h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000001C) );
		/* 821DEC58h case    0:*/		return 0x821DEC5C;
		  /* 821DEC5Ch */ case    1:  		/* addi R30, R25, 24 */
		/* 821DEC5Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R25,0x18);
		/* 821DEC5Ch case    1:*/		return 0x821DEC60;
	}
	return 0x821DEC60;
} // Block from 821DEC58h-821DEC60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DEC60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEC60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEC60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEC60);
		  /* 821DEC60h */ case    0:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DEC60h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DEC60h case    0:*/		return 0x821DEC64;
		  /* 821DEC64h */ case    1:  		/* addic R10, R10, -1 */
		/* 821DEC64h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821DEC64h case    1:*/		return 0x821DEC68;
		  /* 821DEC68h */ case    2:  		/* subfe R10, R10, R10 */
		/* 821DEC68h case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821DEC68h case    2:*/		return 0x821DEC6C;
		  /* 821DEC6Ch */ case    3:  		/* and R31, R10, R11 */
		/* 821DEC6Ch case    3:*/		cpu::op::and<0>(regs,&regs.R31,regs.R10,regs.R11);
		/* 821DEC6Ch case    3:*/		return 0x821DEC70;
		  /* 821DEC70h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821DEC70h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DEC70h case    4:*/		return 0x821DEC74;
		  /* 821DEC74h */ case    5:  		/* bc 12, CR6_EQ, 80 */
		/* 821DEC74h case    5:*/		if ( regs.CR[6].eq ) { return 0x821DECC4;  }
		/* 821DEC74h case    5:*/		return 0x821DEC78;
		  /* 821DEC78h */ case    6:  		/* mr R3, R31 */
		/* 821DEC78h case    6:*/		regs.R3 = regs.R31;
		/* 821DEC78h case    6:*/		return 0x821DEC7C;
		  /* 821DEC7Ch */ case    7:  		/* bl -502732 */
		/* 821DEC7Ch case    7:*/		regs.LR = 0x821DEC80; return 0x821640B0;
		/* 821DEC7Ch case    7:*/		return 0x821DEC80;
		  /* 821DEC80h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821DEC80h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821DEC80h case    8:*/		return 0x821DEC84;
		  /* 821DEC84h */ case    9:  		/* bc 4, CR0_EQ, 1016 */
		/* 821DEC84h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821DF07C;  }
		/* 821DEC84h case    9:*/		return 0x821DEC88;
		  /* 821DEC88h */ case   10:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821DEC88h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821DEC88h case   10:*/		return 0x821DEC8C;
		  /* 821DEC8Ch */ case   11:  		/* lwz R31, <#[R11 + 40]> */
		/* 821DEC8Ch case   11:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821DEC8Ch case   11:*/		return 0x821DEC90;
		  /* 821DEC90h */ case   12:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821DEC90h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821DEC90h case   12:*/		return 0x821DEC94;
		  /* 821DEC94h */ case   13:  		/* bc 4, CR0_EQ, 12 */
		/* 821DEC94h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821DECA0;  }
		/* 821DEC94h case   13:*/		return 0x821DEC98;
		  /* 821DEC98h */ case   14:  		/* cmplwi CR6, R31, 0 */
		/* 821DEC98h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DEC98h case   14:*/		return 0x821DEC9C;
		  /* 821DEC9Ch */ case   15:  		/* bc 4, CR6_EQ, -36 */
		/* 821DEC9Ch case   15:*/		if ( !regs.CR[6].eq ) { return 0x821DEC78;  }
		/* 821DEC9Ch case   15:*/		return 0x821DECA0;
	}
	return 0x821DECA0;
} // Block from 821DEC60h-821DECA0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821DECA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DECA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DECA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DECA0);
		  /* 821DECA0h */ case    0:  		/* addi R11, R25, 32 */
		/* 821DECA0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0x20);
		/* 821DECA0h case    0:*/		return 0x821DECA4;
		  /* 821DECA4h */ case    1:  		/* cmplw CR6, R30, R11 */
		/* 821DECA4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821DECA4h case    1:*/		return 0x821DECA8;
		  /* 821DECA8h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 821DECA8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DECC4;  }
		/* 821DECA8h case    2:*/		return 0x821DECAC;
		  /* 821DECACh */ case    3:  		/* lwz R31, <#[R11 + 4]> */
		/* 821DECACh case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821DECACh case    3:*/		return 0x821DECB0;
		  /* 821DECB0h */ case    4:  		/* mr R30, R11 */
		/* 821DECB0h case    4:*/		regs.R30 = regs.R11;
		/* 821DECB0h case    4:*/		return 0x821DECB4;
		  /* 821DECB4h */ case    5:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821DECB4h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821DECB4h case    5:*/		return 0x821DECB8;
		  /* 821DECB8h */ case    6:  		/* bc 4, CR0_EQ, 12 */
		/* 821DECB8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821DECC4;  }
		/* 821DECB8h case    6:*/		return 0x821DECBC;
		  /* 821DECBCh */ case    7:  		/* cmplwi CR0, R31, 0 */
		/* 821DECBCh case    7:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821DECBCh case    7:*/		return 0x821DECC0;
		  /* 821DECC0h */ case    8:  		/* bc 4, CR0_EQ, -72 */
		/* 821DECC0h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821DEC78;  }
		/* 821DECC0h case    8:*/		return 0x821DECC4;
	}
	return 0x821DECC4;
} // Block from 821DECA0h-821DECC4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821DECC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DECC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DECC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DECC4);
		  /* 821DECC4h */ case    0:  		/* lwz R11, <#[R26 + 28]> */
		/* 821DECC4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000001C) );
		/* 821DECC4h case    0:*/		return 0x821DECC8;
		  /* 821DECC8h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DECC8h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DECC8h case    1:*/		return 0x821DECCC;
		  /* 821DECCCh */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821DECCCh case    2:*/		if ( regs.CR[0].eq ) { return 0x821DECDC;  }
		/* 821DECCCh case    2:*/		return 0x821DECD0;
		  /* 821DECD0h */ case    3:  		/* lwz R11, <#[R26 + 36]> */
		/* 821DECD0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000024) );
		/* 821DECD0h case    3:*/		return 0x821DECD4;
		  /* 821DECD4h */ case    4:  		/* addi R30, R26, 32 */
		/* 821DECD4h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R26,0x20);
		/* 821DECD4h case    4:*/		return 0x821DECD8;
		  /* 821DECD8h */ case    5:  		/* b 12 */
		/* 821DECD8h case    5:*/		return 0x821DECE4;
		/* 821DECD8h case    5:*/		return 0x821DECDC;
	}
	return 0x821DECDC;
} // Block from 821DECC4h-821DECDCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DECDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DECDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DECDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DECDC);
		  /* 821DECDCh */ case    0:  		/* lwz R11, <#[R26 + 28]> */
		/* 821DECDCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000001C) );
		/* 821DECDCh case    0:*/		return 0x821DECE0;
		  /* 821DECE0h */ case    1:  		/* addi R30, R26, 24 */
		/* 821DECE0h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R26,0x18);
		/* 821DECE0h case    1:*/		return 0x821DECE4;
	}
	return 0x821DECE4;
} // Block from 821DECDCh-821DECE4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DECE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DECE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DECE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DECE4);
		  /* 821DECE4h */ case    0:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DECE4h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DECE4h case    0:*/		return 0x821DECE8;
		  /* 821DECE8h */ case    1:  		/* addic R10, R10, -1 */
		/* 821DECE8h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821DECE8h case    1:*/		return 0x821DECEC;
		  /* 821DECECh */ case    2:  		/* subfe R10, R10, R10 */
		/* 821DECECh case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821DECECh case    2:*/		return 0x821DECF0;
		  /* 821DECF0h */ case    3:  		/* and R31, R10, R11 */
		/* 821DECF0h case    3:*/		cpu::op::and<0>(regs,&regs.R31,regs.R10,regs.R11);
		/* 821DECF0h case    3:*/		return 0x821DECF4;
		  /* 821DECF4h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821DECF4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DECF4h case    4:*/		return 0x821DECF8;
		  /* 821DECF8h */ case    5:  		/* bc 12, CR6_EQ, 80 */
		/* 821DECF8h case    5:*/		if ( regs.CR[6].eq ) { return 0x821DED48;  }
		/* 821DECF8h case    5:*/		return 0x821DECFC;
		  /* 821DECFCh */ case    6:  		/* mr R3, R31 */
		/* 821DECFCh case    6:*/		regs.R3 = regs.R31;
		/* 821DECFCh case    6:*/		return 0x821DED00;
		  /* 821DED00h */ case    7:  		/* bl -502864 */
		/* 821DED00h case    7:*/		regs.LR = 0x821DED04; return 0x821640B0;
		/* 821DED00h case    7:*/		return 0x821DED04;
		  /* 821DED04h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821DED04h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821DED04h case    8:*/		return 0x821DED08;
		  /* 821DED08h */ case    9:  		/* bc 4, CR0_EQ, 896 */
		/* 821DED08h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821DF088;  }
		/* 821DED08h case    9:*/		return 0x821DED0C;
		  /* 821DED0Ch */ case   10:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821DED0Ch case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821DED0Ch case   10:*/		return 0x821DED10;
		  /* 821DED10h */ case   11:  		/* lwz R31, <#[R11 + 40]> */
		/* 821DED10h case   11:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821DED10h case   11:*/		return 0x821DED14;
		  /* 821DED14h */ case   12:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821DED14h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821DED14h case   12:*/		return 0x821DED18;
		  /* 821DED18h */ case   13:  		/* bc 4, CR0_EQ, 12 */
		/* 821DED18h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821DED24;  }
		/* 821DED18h case   13:*/		return 0x821DED1C;
		  /* 821DED1Ch */ case   14:  		/* cmplwi CR6, R31, 0 */
		/* 821DED1Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DED1Ch case   14:*/		return 0x821DED20;
		  /* 821DED20h */ case   15:  		/* bc 4, CR6_EQ, -36 */
		/* 821DED20h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821DECFC;  }
		/* 821DED20h case   15:*/		return 0x821DED24;
	}
	return 0x821DED24;
} // Block from 821DECE4h-821DED24h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821DED24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DED24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DED24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DED24);
		  /* 821DED24h */ case    0:  		/* addi R11, R26, 32 */
		/* 821DED24h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0x20);
		/* 821DED24h case    0:*/		return 0x821DED28;
		  /* 821DED28h */ case    1:  		/* cmplw CR6, R30, R11 */
		/* 821DED28h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821DED28h case    1:*/		return 0x821DED2C;
		  /* 821DED2Ch */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 821DED2Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821DED48;  }
		/* 821DED2Ch case    2:*/		return 0x821DED30;
		  /* 821DED30h */ case    3:  		/* lwz R31, <#[R11 + 4]> */
		/* 821DED30h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821DED30h case    3:*/		return 0x821DED34;
		  /* 821DED34h */ case    4:  		/* mr R30, R11 */
		/* 821DED34h case    4:*/		regs.R30 = regs.R11;
		/* 821DED34h case    4:*/		return 0x821DED38;
		  /* 821DED38h */ case    5:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821DED38h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821DED38h case    5:*/		return 0x821DED3C;
		  /* 821DED3Ch */ case    6:  		/* bc 4, CR0_EQ, 12 */
		/* 821DED3Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x821DED48;  }
		/* 821DED3Ch case    6:*/		return 0x821DED40;
		  /* 821DED40h */ case    7:  		/* cmplwi CR0, R31, 0 */
		/* 821DED40h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821DED40h case    7:*/		return 0x821DED44;
		  /* 821DED44h */ case    8:  		/* bc 4, CR0_EQ, -72 */
		/* 821DED44h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821DECFC;  }
		/* 821DED44h case    8:*/		return 0x821DED48;
	}
	return 0x821DED48;
} // Block from 821DED24h-821DED48h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821DED48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DED48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DED48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DED48);
		  /* 821DED48h */ case    0:  		/* lwz R11, <#[R26 + 12]> */
		/* 821DED48h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000000C) );
		/* 821DED48h case    0:*/		return 0x821DED4C;
		  /* 821DED4Ch */ case    1:  		/* li R28, 0 */
		/* 821DED4Ch case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821DED4Ch case    1:*/		return 0x821DED50;
		  /* 821DED50h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821DED50h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DED50h case    2:*/		return 0x821DED54;
		  /* 821DED54h */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 821DED54h case    3:*/		if ( regs.CR[6].eq ) { return 0x821DED5C;  }
		/* 821DED54h case    3:*/		return 0x821DED58;
		  /* 821DED58h */ case    4:  		/* lwz R28, <#[R11]> */
		/* 821DED58h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 821DED58h case    4:*/		return 0x821DED5C;
	}
	return 0x821DED5C;
} // Block from 821DED48h-821DED5Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DED5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DED5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DED5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DED5C);
		  /* 821DED5Ch */ case    0:  		/* lwz R11, <#[R25 + 8]> */
		/* 821DED5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821DED5Ch case    0:*/		return 0x821DED60;
		  /* 821DED60h */ case    1:  		/* li R30, 0 */
		/* 821DED60h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821DED60h case    1:*/		return 0x821DED64;
		  /* 821DED64h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821DED64h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DED64h case    2:*/		return 0x821DED68;
		  /* 821DED68h */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 821DED68h case    3:*/		if ( regs.CR[6].eq ) { return 0x821DED70;  }
		/* 821DED68h case    3:*/		return 0x821DED6C;
		  /* 821DED6Ch */ case    4:  		/* lwz R30, <#[R11 + 4]> */
		/* 821DED6Ch case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 821DED6Ch case    4:*/		return 0x821DED70;
	}
	return 0x821DED70;
} // Block from 821DED5Ch-821DED70h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DED70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DED70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DED70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DED70);
		  /* 821DED70h */ case    0:  		/* lwz R11, <#[R30 + 36]> */
		/* 821DED70h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821DED70h case    0:*/		return 0x821DED74;
		  /* 821DED74h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DED74h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DED74h case    1:*/		return 0x821DED78;
		  /* 821DED78h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821DED78h case    2:*/		if ( regs.CR[0].eq ) { return 0x821DED84;  }
		/* 821DED78h case    2:*/		return 0x821DED7C;
		  /* 821DED7Ch */ case    3:  		/* li R31, 0 */
		/* 821DED7Ch case    3:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821DED7Ch case    3:*/		return 0x821DED80;
		  /* 821DED80h */ case    4:  		/* b 16 */
		/* 821DED80h case    4:*/		return 0x821DED90;
		/* 821DED80h case    4:*/		return 0x821DED84;
	}
	return 0x821DED84;
} // Block from 821DED70h-821DED84h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DED84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DED84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DED84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DED84);
		  /* 821DED84h */ case    0:  		/* lwz R11, <#[R30 + 32]> */
		/* 821DED84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 821DED84h case    0:*/		return 0x821DED88;
		  /* 821DED88h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DED88h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DED88h case    1:*/		return 0x821DED8C;
		  /* 821DED8Ch */ case    2:  		/* addi R31, R11, -40 */
		/* 821DED8Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821DED8Ch case    2:*/		return 0x821DED90;
	}
	return 0x821DED90;
} // Block from 821DED84h-821DED90h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DED90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DED90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DED90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DED90);
		  /* 821DED90h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DED90h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DED90h case    0:*/		return 0x821DED94;
		  /* 821DED94h */ case    1:  		/* mr R3, R27 */
		/* 821DED94h case    1:*/		regs.R3 = regs.R27;
		/* 821DED94h case    1:*/		return 0x821DED98;
		  /* 821DED98h */ case    2:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821DED98h case    2:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821DED98h case    2:*/		return 0x821DED9C;
		  /* 821DED9Ch */ case    3:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821DED9Ch case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821DED9Ch case    3:*/		return 0x821DEDA0;
		  /* 821DEDA0h */ case    4:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821DEDA0h case    4:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821DEDA0h case    4:*/		return 0x821DEDA4;
		  /* 821DEDA4h */ case    5:  		/* bl -502132 */
		/* 821DEDA4h case    5:*/		regs.LR = 0x821DEDA8; return 0x82164430;
		/* 821DEDA4h case    5:*/		return 0x821DEDA8;
		  /* 821DEDA8h */ case    6:  		/* lwz R10, <#[R30 + 12]> */
		/* 821DEDA8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000000C) );
		/* 821DEDA8h case    6:*/		return 0x821DEDAC;
		  /* 821DEDACh */ case    7:  		/* addi R9, R31, -16 */
		/* 821DEDACh case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R31,0xFFFFFFF0);
		/* 821DEDACh case    7:*/		return 0x821DEDB0;
		  /* 821DEDB0h */ case    8:  		/* mr R11, R10 */
		/* 821DEDB0h case    8:*/		regs.R11 = regs.R10;
		/* 821DEDB0h case    8:*/		return 0x821DEDB4;
		  /* 821DEDB4h */ case    9:  		/* add R29, R3, R9 */
		/* 821DEDB4h case    9:*/		cpu::op::add<0>(regs,&regs.R29,regs.R3,regs.R9);
		/* 821DEDB4h case    9:*/		return 0x821DEDB8;
		  /* 821DEDB8h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821DEDB8h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DEDB8h case   10:*/		return 0x821DEDBC;
		  /* 821DEDBCh */ case   11:  		/* bc 12, CR6_EQ, 32 */
		/* 821DEDBCh case   11:*/		if ( regs.CR[6].eq ) { return 0x821DEDDC;  }
		/* 821DEDBCh case   11:*/		return 0x821DEDC0;
		  /* 821DEDC0h */ case   12:  		/* lwz R9, <#[R11]> */
		/* 821DEDC0h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821DEDC0h case   12:*/		return 0x821DEDC4;
		  /* 821DEDC4h */ case   13:  		/* cmplw CR6, R28, R9 */
		/* 821DEDC4h case   13:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R9);
		/* 821DEDC4h case   13:*/		return 0x821DEDC8;
		  /* 821DEDC8h */ case   14:  		/* bc 12, CR6_EQ, 12 */
		/* 821DEDC8h case   14:*/		if ( regs.CR[6].eq ) { return 0x821DEDD4;  }
		/* 821DEDC8h case   14:*/		return 0x821DEDCC;
		  /* 821DEDCCh */ case   15:  		/* lwz R11, <#[R11 + 8]> */
		/* 821DEDCCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821DEDCCh case   15:*/		return 0x821DEDD0;
		  /* 821DEDD0h */ case   16:  		/* b -24 */
		/* 821DEDD0h case   16:*/		return 0x821DEDB8;
		/* 821DEDD0h case   16:*/		return 0x821DEDD4;
	}
	return 0x821DEDD4;
} // Block from 821DED90h-821DEDD4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821DEDD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEDD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEDD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEDD4);
		  /* 821DEDD4h */ case    0:  		/* li R11, 1 */
		/* 821DEDD4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821DEDD4h case    0:*/		return 0x821DEDD8;
		  /* 821DEDD8h */ case    1:  		/* b 8 */
		/* 821DEDD8h case    1:*/		return 0x821DEDE0;
		/* 821DEDD8h case    1:*/		return 0x821DEDDC;
	}
	return 0x821DEDDC;
} // Block from 821DEDD4h-821DEDDCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DEDDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEDDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEDDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEDDC);
		  /* 821DEDDCh */ case    0:  		/* li R11, 0 */
		/* 821DEDDCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DEDDCh case    0:*/		return 0x821DEDE0;
	}
	return 0x821DEDE0;
} // Block from 821DEDDCh-821DEDE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DEDE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEDE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEDE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEDE0);
		  /* 821DEDE0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DEDE0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DEDE0h case    0:*/		return 0x821DEDE4;
		  /* 821DEDE4h */ case    1:  		/* bc 4, CR0_EQ, 88 */
		/* 821DEDE4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821DEE3C;  }
		/* 821DEDE4h case    1:*/		return 0x821DEDE8;
		  /* 821DEDE8h */ case    2:  		/* mr R11, R10 */
		/* 821DEDE8h case    2:*/		regs.R11 = regs.R10;
		/* 821DEDE8h case    2:*/		return 0x821DEDEC;
		  /* 821DEDECh */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821DEDECh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DEDECh case    3:*/		return 0x821DEDF0;
		  /* 821DEDF0h */ case    4:  		/* bc 12, CR6_EQ, 24 */
		/* 821DEDF0h case    4:*/		if ( regs.CR[6].eq ) { return 0x821DEE08;  }
		/* 821DEDF0h case    4:*/		return 0x821DEDF4;
		  /* 821DEDF4h */ case    5:  		/* lwz R31, <#[R11]> */
		/* 821DEDF4h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 821DEDF4h case    5:*/		return 0x821DEDF8;
		  /* 821DEDF8h */ case    6:  		/* cmplw CR6, R31, R25 */
		/* 821DEDF8h case    6:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R25);
		/* 821DEDF8h case    6:*/		return 0x821DEDFC;
		  /* 821DEDFCh */ case    7:  		/* bc 4, CR6_EQ, 16 */
		/* 821DEDFCh case    7:*/		if ( !regs.CR[6].eq ) { return 0x821DEE0C;  }
		/* 821DEDFCh case    7:*/		return 0x821DEE00;
		  /* 821DEE00h */ case    8:  		/* lwz R11, <#[R11 + 8]> */
		/* 821DEE00h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821DEE00h case    8:*/		return 0x821DEE04;
		  /* 821DEE04h */ case    9:  		/* b -24 */
		/* 821DEE04h case    9:*/		return 0x821DEDEC;
		/* 821DEE04h case    9:*/		return 0x821DEE08;
	}
	return 0x821DEE08;
} // Block from 821DEDE0h-821DEE08h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DEE08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEE08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEE08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEE08);
		  /* 821DEE08h */ case    0:  		/* li R31, 0 */
		/* 821DEE08h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821DEE08h case    0:*/		return 0x821DEE0C;
	}
	return 0x821DEE0C;
} // Block from 821DEE08h-821DEE0Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DEE0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEE0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEE0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEE0C);
		  /* 821DEE0Ch */ case    0:  		/* mr R5, R27 */
		/* 821DEE0Ch case    0:*/		regs.R5 = regs.R27;
		/* 821DEE0Ch case    0:*/		return 0x821DEE10;
		  /* 821DEE10h */ case    1:  		/* mr R4, R31 */
		/* 821DEE10h case    1:*/		regs.R4 = regs.R31;
		/* 821DEE10h case    1:*/		return 0x821DEE14;
		  /* 821DEE14h */ case    2:  		/* mr R3, R30 */
		/* 821DEE14h case    2:*/		regs.R3 = regs.R30;
		/* 821DEE14h case    2:*/		return 0x821DEE18;
		  /* 821DEE18h */ case    3:  		/* bl 330576 */
		/* 821DEE18h case    3:*/		regs.LR = 0x821DEE1C; return 0x8222F968;
		/* 821DEE18h case    3:*/		return 0x821DEE1C;
		  /* 821DEE1Ch */ case    4:  		/* mr R5, R27 */
		/* 821DEE1Ch case    4:*/		regs.R5 = regs.R27;
		/* 821DEE1Ch case    4:*/		return 0x821DEE20;
		  /* 821DEE20h */ case    5:  		/* mr R4, R28 */
		/* 821DEE20h case    5:*/		regs.R4 = regs.R28;
		/* 821DEE20h case    5:*/		return 0x821DEE24;
		  /* 821DEE24h */ case    6:  		/* mr R3, R30 */
		/* 821DEE24h case    6:*/		regs.R3 = regs.R30;
		/* 821DEE24h case    6:*/		return 0x821DEE28;
		  /* 821DEE28h */ case    7:  		/* bl 330936 */
		/* 821DEE28h case    7:*/		regs.LR = 0x821DEE2C; return 0x8222FAE0;
		/* 821DEE28h case    7:*/		return 0x821DEE2C;
		  /* 821DEE2Ch */ case    8:  		/* lwz R11, <#[R29]> */
		/* 821DEE2Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821DEE2Ch case    8:*/		return 0x821DEE30;
		  /* 821DEE30h */ case    9:  		/* cmplw CR6, R11, R31 */
		/* 821DEE30h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821DEE30h case    9:*/		return 0x821DEE34;
		  /* 821DEE34h */ case   10:  		/* bc 4, CR6_EQ, 8 */
		/* 821DEE34h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821DEE3C;  }
		/* 821DEE34h case   10:*/		return 0x821DEE38;
		  /* 821DEE38h */ case   11:  		/* stw R28, <#[R29]> */
		/* 821DEE38h case   11:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R29 + 0x00000000) );
		/* 821DEE38h case   11:*/		return 0x821DEE3C;
	}
	return 0x821DEE3C;
} // Block from 821DEE0Ch-821DEE3Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821DEE3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEE3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEE3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEE3C);
		  /* 821DEE3Ch */ case    0:  		/* mr R5, R27 */
		/* 821DEE3Ch case    0:*/		regs.R5 = regs.R27;
		/* 821DEE3Ch case    0:*/		return 0x821DEE40;
		  /* 821DEE40h */ case    1:  		/* mr R4, R28 */
		/* 821DEE40h case    1:*/		regs.R4 = regs.R28;
		/* 821DEE40h case    1:*/		return 0x821DEE44;
		  /* 821DEE44h */ case    2:  		/* mr R3, R26 */
		/* 821DEE44h case    2:*/		regs.R3 = regs.R26;
		/* 821DEE44h case    2:*/		return 0x821DEE48;
		  /* 821DEE48h */ case    3:  		/* bl 330528 */
		/* 821DEE48h case    3:*/		regs.LR = 0x821DEE4C; return 0x8222F968;
		/* 821DEE48h case    3:*/		return 0x821DEE4C;
		  /* 821DEE4Ch */ case    4:  		/* cmplwi CR6, R22, 0 */
		/* 821DEE4Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821DEE4Ch case    4:*/		return 0x821DEE50;
		  /* 821DEE50h */ case    5:  		/* bc 12, CR6_EQ, 56 */
		/* 821DEE50h case    5:*/		if ( regs.CR[6].eq ) { return 0x821DEE88;  }
		/* 821DEE50h case    5:*/		return 0x821DEE54;
		  /* 821DEE54h */ case    6:  		/* mr R5, R27 */
		/* 821DEE54h case    6:*/		regs.R5 = regs.R27;
		/* 821DEE54h case    6:*/		return 0x821DEE58;
		  /* 821DEE58h */ case    7:  		/* mr R4, R25 */
		/* 821DEE58h case    7:*/		regs.R4 = regs.R25;
		/* 821DEE58h case    7:*/		return 0x821DEE5C;
		  /* 821DEE5Ch */ case    8:  		/* mr R3, R30 */
		/* 821DEE5Ch case    8:*/		regs.R3 = regs.R30;
		/* 821DEE5Ch case    8:*/		return 0x821DEE60;
		  /* 821DEE60h */ case    9:  		/* bl 330504 */
		/* 821DEE60h case    9:*/		regs.LR = 0x821DEE64; return 0x8222F968;
		/* 821DEE60h case    9:*/		return 0x821DEE64;
		  /* 821DEE64h */ case   10:  		/* mr R5, R27 */
		/* 821DEE64h case   10:*/		regs.R5 = regs.R27;
		/* 821DEE64h case   10:*/		return 0x821DEE68;
		  /* 821DEE68h */ case   11:  		/* mr R4, R22 */
		/* 821DEE68h case   11:*/		regs.R4 = regs.R22;
		/* 821DEE68h case   11:*/		return 0x821DEE6C;
		  /* 821DEE6Ch */ case   12:  		/* mr R3, R30 */
		/* 821DEE6Ch case   12:*/		regs.R3 = regs.R30;
		/* 821DEE6Ch case   12:*/		return 0x821DEE70;
		  /* 821DEE70h */ case   13:  		/* bl 330864 */
		/* 821DEE70h case   13:*/		regs.LR = 0x821DEE74; return 0x8222FAE0;
		/* 821DEE70h case   13:*/		return 0x821DEE74;
		  /* 821DEE74h */ case   14:  		/* lwz R11, <#[R29]> */
		/* 821DEE74h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821DEE74h case   14:*/		return 0x821DEE78;
		  /* 821DEE78h */ case   15:  		/* cmplw CR6, R11, R25 */
		/* 821DEE78h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 821DEE78h case   15:*/		return 0x821DEE7C;
		  /* 821DEE7Ch */ case   16:  		/* bc 4, CR6_EQ, 460 */
		/* 821DEE7Ch case   16:*/		if ( !regs.CR[6].eq ) { return 0x821DF048;  }
		/* 821DEE7Ch case   16:*/		return 0x821DEE80;
		  /* 821DEE80h */ case   17:  		/* stw R22, <#[R29]> */
		/* 821DEE80h case   17:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R29 + 0x00000000) );
		/* 821DEE80h case   17:*/		return 0x821DEE84;
		  /* 821DEE84h */ case   18:  		/* b 452 */
		/* 821DEE84h case   18:*/		return 0x821DF048;
		/* 821DEE84h case   18:*/		return 0x821DEE88;
	}
	return 0x821DEE88;
} // Block from 821DEE3Ch-821DEE88h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821DEE88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEE88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEE88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEE88);
		  /* 821DEE88h */ case    0:  		/* lwz R11, <#[R23 + 4]> */
		/* 821DEE88h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 821DEE88h case    0:*/		return 0x821DEE8C;
		  /* 821DEE8Ch */ case    1:  		/* mr R22, R25 */
		/* 821DEE8Ch case    1:*/		regs.R22 = regs.R25;
		/* 821DEE8Ch case    1:*/		return 0x821DEE90;
		  /* 821DEE90h */ case    2:  		/* lwz R10, <#[R23]> */
		/* 821DEE90h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000000) );
		/* 821DEE90h case    2:*/		return 0x821DEE94;
		  /* 821DEE94h */ case    3:  		/* cmplwi CR6, R24, 0 */
		/* 821DEE94h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821DEE94h case    3:*/		return 0x821DEE98;
		  /* 821DEE98h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DEE98h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DEE98h case    4:*/		return 0x821DEE9C;
		  /* 821DEE9Ch */ case    5:  		/* stw R10, <#[R11]> */
		/* 821DEE9Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DEE9Ch case    5:*/		return 0x821DEEA0;
		  /* 821DEEA0h */ case    6:  		/* lwz R11, <#[R23 + 4]> */
		/* 821DEEA0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 821DEEA0h case    6:*/		return 0x821DEEA4;
		  /* 821DEEA4h */ case    7:  		/* lwz R10, <#[R23]> */
		/* 821DEEA4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000000) );
		/* 821DEEA4h case    7:*/		return 0x821DEEA8;
		  /* 821DEEA8h */ case    8:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821DEEA8h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821DEEA8h case    8:*/		return 0x821DEEAC;
		  /* 821DEEACh */ case    9:  		/* stw R11, <#[R10]> */
		/* 821DEEACh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821DEEACh case    9:*/		return 0x821DEEB0;
		  /* 821DEEB0h */ case   10:  		/* bc 12, CR6_EQ, 40 */
		/* 821DEEB0h case   10:*/		if ( regs.CR[6].eq ) { return 0x821DEED8;  }
		/* 821DEEB0h case   10:*/		return 0x821DEEB4;
		  /* 821DEEB4h */ case   11:  		/* rlwinm R11, R24, 0, 0, 30 */
		/* 821DEEB4h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R24);
		/* 821DEEB4h case   11:*/		return 0x821DEEB8;
		  /* 821DEEB8h */ case   12:  		/* lwz R10, <#[R11 + 4]> */
		/* 821DEEB8h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DEEB8h case   12:*/		return 0x821DEEBC;
		  /* 821DEEBCh */ case   13:  		/* lwz R9, <#[R11]> */
		/* 821DEEBCh case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821DEEBCh case   13:*/		return 0x821DEEC0;
		  /* 821DEEC0h */ case   14:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821DEEC0h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821DEEC0h case   14:*/		return 0x821DEEC4;
		  /* 821DEEC4h */ case   15:  		/* stw R9, <#[R10]> */
		/* 821DEEC4h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DEEC4h case   15:*/		return 0x821DEEC8;
		  /* 821DEEC8h */ case   16:  		/* lwz R10, <#[R11 + 4]> */
		/* 821DEEC8h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DEEC8h case   16:*/		return 0x821DEECC;
		  /* 821DEECCh */ case   17:  		/* lwz R11, <#[R11]> */
		/* 821DEECCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821DEECCh case   17:*/		return 0x821DEED0;
		  /* 821DEED0h */ case   18:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DEED0h case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DEED0h case   18:*/		return 0x821DEED4;
		  /* 821DEED4h */ case   19:  		/* stw R10, <#[R11]> */
		/* 821DEED4h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DEED4h case   19:*/		return 0x821DEED8;
	}
	return 0x821DEED8;
} // Block from 821DEE88h-821DEED8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821DEED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEED8);
		  /* 821DEED8h */ case    0:  		/* rlwinm R11, R26, 0, 0, 30 */
		/* 821DEED8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R26);
		/* 821DEED8h case    0:*/		return 0x821DEEDC;
		  /* 821DEEDCh */ case    1:  		/* ori R9, R27, 1 */
		/* 821DEEDCh case    1:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R27,0x1);
		/* 821DEEDCh case    1:*/		return 0x821DEEE0;
		  /* 821DEEE0h */ case    2:  		/* addi R8, R23, 4 */
		/* 821DEEE0h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R23,0x4);
		/* 821DEEE0h case    2:*/		return 0x821DEEE4;
		  /* 821DEEE4h */ case    3:  		/* cmplwi CR6, R24, 0 */
		/* 821DEEE4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821DEEE4h case    3:*/		return 0x821DEEE8;
		  /* 821DEEE8h */ case    4:  		/* lwz R10, <#[R11 + 4]> */
		/* 821DEEE8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DEEE8h case    4:*/		return 0x821DEEEC;
		  /* 821DEEECh */ case    5:  		/* lwz R7, <#[R11]> */
		/* 821DEEECh case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821DEEECh case    5:*/		return 0x821DEEF0;
		  /* 821DEEF0h */ case    6:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821DEEF0h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821DEEF0h case    6:*/		return 0x821DEEF4;
		  /* 821DEEF4h */ case    7:  		/* stw R7, <#[R10]> */
		/* 821DEEF4h case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821DEEF4h case    7:*/		return 0x821DEEF8;
		  /* 821DEEF8h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 821DEEF8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DEEF8h case    8:*/		return 0x821DEEFC;
		  /* 821DEEFCh */ case    9:  		/* lwz R7, <#[R11]> */
		/* 821DEEFCh case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821DEEFCh case    9:*/		return 0x821DEF00;
		  /* 821DEF00h */ case   10:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821DEF00h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821DEF00h case   10:*/		return 0x821DEF04;
		  /* 821DEF04h */ case   11:  		/* stw R10, <#[R7]> */
		/* 821DEF04h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R7 + 0x00000000) );
		/* 821DEF04h case   11:*/		return 0x821DEF08;
		  /* 821DEF08h */ case   12:  		/* lwz R10, <#[R27]> */
		/* 821DEF08h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 821DEF08h case   12:*/		return 0x821DEF0C;
		  /* 821DEF0Ch */ case   13:  		/* stw R10, <#[R23]> */
		/* 821DEF0Ch case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R23 + 0x00000000) );
		/* 821DEF0Ch case   13:*/		return 0x821DEF10;
		  /* 821DEF10h */ case   14:  		/* lwz R10, <#[R27]> */
		/* 821DEF10h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 821DEF10h case   14:*/		return 0x821DEF14;
		  /* 821DEF14h */ case   15:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821DEF14h case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821DEF14h case   15:*/		return 0x821DEF18;
		  /* 821DEF18h */ case   16:  		/* stw R23, <#[R10]> */
		/* 821DEF18h case   16:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R10 + 0x00000000) );
		/* 821DEF18h case   16:*/		return 0x821DEF1C;
		  /* 821DEF1Ch */ case   17:  		/* stw R9, <#[R23 + 4]> */
		/* 821DEF1Ch case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R23 + 0x00000004) );
		/* 821DEF1Ch case   17:*/		return 0x821DEF20;
		  /* 821DEF20h */ case   18:  		/* stw R8, <#[R27]> */
		/* 821DEF20h case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R27 + 0x00000000) );
		/* 821DEF20h case   18:*/		return 0x821DEF24;
		  /* 821DEF24h */ case   19:  		/* bc 12, CR6_EQ, 36 */
		/* 821DEF24h case   19:*/		if ( regs.CR[6].eq ) { return 0x821DEF48;  }
		/* 821DEF24h case   19:*/		return 0x821DEF28;
		  /* 821DEF28h */ case   20:  		/* rlwinm R10, R24, 0, 0, 30 */
		/* 821DEF28h case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R24);
		/* 821DEF28h case   20:*/		return 0x821DEF2C;
		  /* 821DEF2Ch */ case   21:  		/* addi R7, R10, 4 */
		/* 821DEF2Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x4);
		/* 821DEF2Ch case   21:*/		return 0x821DEF30;
		  /* 821DEF30h */ case   22:  		/* stw R8, <#[R10]> */
		/* 821DEF30h case   22:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821DEF30h case   22:*/		return 0x821DEF34;
		  /* 821DEF34h */ case   23:  		/* lwz R8, <#[R27]> */
		/* 821DEF34h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x00000000) );
		/* 821DEF34h case   23:*/		return 0x821DEF38;
		  /* 821DEF38h */ case   24:  		/* rlwinm R8, R8, 0, 0, 30 */
		/* 821DEF38h case   24:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R8,regs.R8);
		/* 821DEF38h case   24:*/		return 0x821DEF3C;
		  /* 821DEF3Ch */ case   25:  		/* stw R10, <#[R8]> */
		/* 821DEF3Ch case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821DEF3Ch case   25:*/		return 0x821DEF40;
		  /* 821DEF40h */ case   26:  		/* stw R9, <#[R10 + 4]> */
		/* 821DEF40h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 821DEF40h case   26:*/		return 0x821DEF44;
		  /* 821DEF44h */ case   27:  		/* stw R7, <#[R27]> */
		/* 821DEF44h case   27:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R27 + 0x00000000) );
		/* 821DEF44h case   27:*/		return 0x821DEF48;
	}
	return 0x821DEF48;
} // Block from 821DEED8h-821DEF48h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821DEF48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEF48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEF48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEF48);
		  /* 821DEF48h */ case    0:  		/* lwz R5, <#[R27]> */
		/* 821DEF48h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x00000000) );
		/* 821DEF48h case    0:*/		return 0x821DEF4C;
		  /* 821DEF4Ch */ case    1:  		/* addi R31, R26, 32 */
		/* 821DEF4Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R26,0x20);
		/* 821DEF4Ch case    1:*/		return 0x821DEF50;
		  /* 821DEF50h */ case    2:  		/* addi R10, R11, 4 */
		/* 821DEF50h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821DEF50h case    2:*/		return 0x821DEF54;
		  /* 821DEF54h */ case    3:  		/* li R8, 0 */
		/* 821DEF54h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821DEF54h case    3:*/		return 0x821DEF58;
		  /* 821DEF58h */ case    4:  		/* li R7, 0 */
		/* 821DEF58h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821DEF58h case    4:*/		return 0x821DEF5C;
		  /* 821DEF5Ch */ case    5:  		/* li R6, 83 */
		/* 821DEF5Ch case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x53);
		/* 821DEF5Ch case    5:*/		return 0x821DEF60;
		  /* 821DEF60h */ case    6:  		/* stw R5, <#[R11]> */
		/* 821DEF60h case    6:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 821DEF60h case    6:*/		return 0x821DEF64;
		  /* 821DEF64h */ case    7:  		/* mr R5, R31 */
		/* 821DEF64h case    7:*/		regs.R5 = regs.R31;
		/* 821DEF64h case    7:*/		return 0x821DEF68;
		  /* 821DEF68h */ case    8:  		/* lwz R31, <#[R27]> */
		/* 821DEF68h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + 0x00000000) );
		/* 821DEF68h case    8:*/		return 0x821DEF6C;
		  /* 821DEF6Ch */ case    9:  		/* rlwinm R31, R31, 0, 0, 30 */
		/* 821DEF6Ch case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R31,regs.R31);
		/* 821DEF6Ch case    9:*/		return 0x821DEF70;
		  /* 821DEF70h */ case   10:  		/* stw R11, <#[R31]> */
		/* 821DEF70h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821DEF70h case   10:*/		return 0x821DEF74;
		  /* 821DEF74h */ case   11:  		/* mr R4, R26 */
		/* 821DEF74h case   11:*/		regs.R4 = regs.R26;
		/* 821DEF74h case   11:*/		return 0x821DEF78;
		  /* 821DEF78h */ case   12:  		/* stw R9, <#[R11 + 4]> */
		/* 821DEF78h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821DEF78h case   12:*/		return 0x821DEF7C;
		  /* 821DEF7Ch */ case   13:  		/* mr R3, R27 */
		/* 821DEF7Ch case   13:*/		regs.R3 = regs.R27;
		/* 821DEF7Ch case   13:*/		return 0x821DEF80;
		  /* 821DEF80h */ case   14:  		/* stw R10, <#[R27]> */
		/* 821DEF80h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 821DEF80h case   14:*/		return 0x821DEF84;
		  /* 821DEF84h */ case   15:  		/* bl 285204 */
		/* 821DEF84h case   15:*/		regs.LR = 0x821DEF88; return 0x82224998;
		/* 821DEF84h case   15:*/		return 0x821DEF88;
		  /* 821DEF88h */ case   16:  		/* lwz R11, <#[R26 + 36]> */
		/* 821DEF88h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000024) );
		/* 821DEF88h case   16:*/		return 0x821DEF8C;
		  /* 821DEF8Ch */ case   17:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DEF8Ch case   17:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DEF8Ch case   17:*/		return 0x821DEF90;
		  /* 821DEF90h */ case   18:  		/* bc 4, CR0_EQ, 184 */
		/* 821DEF90h case   18:*/		if ( !regs.CR[0].eq ) { return 0x821DF048;  }
		/* 821DEF90h case   18:*/		return 0x821DEF94;
		  /* 821DEF94h */ case   19:  		/* mr R7, R11 */
		/* 821DEF94h case   19:*/		regs.R7 = regs.R11;
		/* 821DEF94h case   19:*/		return 0x821DEF98;
		  /* 821DEF98h */ case   20:  		/* cmplwi CR0, R11, 0 */
		/* 821DEF98h case   20:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DEF98h case   20:*/		return 0x821DEF9C;
		  /* 821DEF9Ch */ case   21:  		/* bc 12, CR0_EQ, 172 */
		/* 821DEF9Ch case   21:*/		if ( regs.CR[0].eq ) { return 0x821DF048;  }
		/* 821DEF9Ch case   21:*/		return 0x821DEFA0;
		  /* 821DEFA0h */ case   22:  		/* lwz R11, <#[R7 + 8]> */
		/* 821DEFA0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000008) );
		/* 821DEFA0h case   22:*/		return 0x821DEFA4;
		  /* 821DEFA4h */ case   23:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DEFA4h case   23:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DEFA4h case   23:*/		return 0x821DEFA8;
		  /* 821DEFA8h */ case   24:  		/* cmplwi CR6, R11, 14976 */
		/* 821DEFA8h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003A80);
		/* 821DEFA8h case   24:*/		return 0x821DEFAC;
		  /* 821DEFACh */ case   25:  		/* bc 4, CR6_EQ, 128 */
		/* 821DEFACh case   25:*/		if ( !regs.CR[6].eq ) { return 0x821DF02C;  }
		/* 821DEFACh case   25:*/		return 0x821DEFB0;
		  /* 821DEFB0h */ case   26:  		/* mr R8, R7 */
		/* 821DEFB0h case   26:*/		regs.R8 = regs.R7;
		/* 821DEFB0h case   26:*/		return 0x821DEFB4;
		  /* 821DEFB4h */ case   27:  		/* lwz R11, <#[R8]> */
		/* 821DEFB4h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821DEFB4h case   27:*/		return 0x821DEFB8;
		  /* 821DEFB8h */ case   28:  		/* cmplwi CR6, R11, 0 */
		/* 821DEFB8h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DEFB8h case   28:*/		return 0x821DEFBC;
		  /* 821DEFBCh */ case   29:  		/* bc 12, CR6_EQ, 112 */
		/* 821DEFBCh case   29:*/		if ( regs.CR[6].eq ) { return 0x821DF02C;  }
		/* 821DEFBCh case   29:*/		return 0x821DEFC0;
		  /* 821DEFC0h */ case   30:  		/* lwz R10, <#[R11]> */
		/* 821DEFC0h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DEFC0h case   30:*/		return 0x821DEFC4;
		  /* 821DEFC4h */ case   31:  		/* rlwinm. R9, R10, 0, 4, 6 */
		/* 821DEFC4h case   31:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R10);
		/* 821DEFC4h case   31:*/		return 0x821DEFC8;
		  /* 821DEFC8h */ case   32:  		/* bc 12, CR0_EQ, 80 */
		/* 821DEFC8h case   32:*/		if ( regs.CR[0].eq ) { return 0x821DF018;  }
		/* 821DEFC8h case   32:*/		return 0x821DEFCC;
		  /* 821DEFCCh */ case   33:  		/* rlwinm. R10, R10, 2, 31, 31 */
		/* 821DEFCCh case   33:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R10,regs.R10);
		/* 821DEFCCh case   33:*/		return 0x821DEFD0;
		  /* 821DEFD0h */ case   34:  		/* bc 12, CR0_EQ, 72 */
		/* 821DEFD0h case   34:*/		if ( regs.CR[0].eq ) { return 0x821DF018;  }
		/* 821DEFD0h case   34:*/		return 0x821DEFD4;
		  /* 821DEFD4h */ case   35:  		/* lwz R10, <#[R11 + 12]> */
		/* 821DEFD4h case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DEFD4h case   35:*/		return 0x821DEFD8;
		  /* 821DEFD8h */ case   36:  		/* lwz R10, <#[R10 + 8]> */
		/* 821DEFD8h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821DEFD8h case   36:*/		return 0x821DEFDC;
		  /* 821DEFDCh */ case   37:  		/* rlwinm. R10, R10, 27, 31, 31 */
		/* 821DEFDCh case   37:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R10,regs.R10);
		/* 821DEFDCh case   37:*/		return 0x821DEFE0;
		  /* 821DEFE0h */ case   38:  		/* bc 12, CR0_EQ, 56 */
		/* 821DEFE0h case   38:*/		if ( regs.CR[0].eq ) { return 0x821DF018;  }
		/* 821DEFE0h case   38:*/		return 0x821DEFE4;
		  /* 821DEFE4h */ case   39:  		/* lwz R10, <#[R11 + 16]> */
		/* 821DEFE4h case   39:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821DEFE4h case   39:*/		return 0x821DEFE8;
		  /* 821DEFE8h */ case   40:  		/* lwz R9, <#[R10]> */
		/* 821DEFE8h case   40:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DEFE8h case   40:*/		return 0x821DEFEC;
		  /* 821DEFECh */ case   41:  		/* b 12 */
		/* 821DEFECh case   41:*/		return 0x821DEFF8;
		/* 821DEFECh case   41:*/		return 0x821DEFF0;
		  /* 821DEFF0h */ case   42:  		/* addi R10, R9, 4 */
		/* 821DEFF0h case   42:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x4);
		/* 821DEFF0h case   42:*/		return 0x821DEFF4;
		  /* 821DEFF4h */ case   43:  		/* lwz R9, <#[R9 + 4]> */
		/* 821DEFF4h case   43:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821DEFF4h case   43:*/		return 0x821DEFF8;
	}
	return 0x821DEFF8;
} // Block from 821DEF48h-821DEFF8h (44 instructions)

//////////////////////////////////////////////////////
// Block at 821DEFF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DEFF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DEFF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DEFF8);
		  /* 821DEFF8h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821DEFF8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821DEFF8h case    0:*/		return 0x821DEFFC;
		  /* 821DEFFCh */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821DEFFCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DEFF0;  }
		/* 821DEFFCh case    1:*/		return 0x821DF000;
		  /* 821DF000h */ case    2:  		/* lwz R9, <#[R11 + 4]> */
		/* 821DF000h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821DF000h case    2:*/		return 0x821DF004;
		  /* 821DF004h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821DF004h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DF004h case    3:*/		return 0x821DF008;
		  /* 821DF008h */ case    4:  		/* lwz R10, <#[R3]> */
		/* 821DF008h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821DF008h case    4:*/		return 0x821DF00C;
		  /* 821DF00Ch */ case    5:  		/* stw R10, <#[R11 + 4]> */
		/* 821DF00Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DF00Ch case    5:*/		return 0x821DF010;
		  /* 821DF010h */ case    6:  		/* stw R11, <#[R3]> */
		/* 821DF010h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821DF010h case    6:*/		return 0x821DF014;
		  /* 821DF014h */ case    7:  		/* stw R3, <#[R11 + 16]> */
		/* 821DF014h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000010) );
		/* 821DF014h case    7:*/		return 0x821DF018;
	}
	return 0x821DF018;
} // Block from 821DEFF8h-821DF018h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821DF018h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF018);
		  /* 821DF018h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821DF018h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821DF018h case    0:*/		return 0x821DF01C;
		  /* 821DF01Ch */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821DF01Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821DF01Ch case    1:*/		return 0x821DF020;
		  /* 821DF020h */ case    2:  		/* bc 4, CR6_EQ, -108 */
		/* 821DF020h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DEFB4;  }
		/* 821DF020h case    2:*/		return 0x821DF024;
		  /* 821DF024h */ case    3:  		/* addi R8, R11, 4 */
		/* 821DF024h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 821DF024h case    3:*/		return 0x821DF028;
		  /* 821DF028h */ case    4:  		/* b -116 */
		/* 821DF028h case    4:*/		return 0x821DEFB4;
		/* 821DF028h case    4:*/		return 0x821DF02C;
	}
	return 0x821DF02C;
} // Block from 821DF018h-821DF02Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DF02Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF02C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF02C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF02C);
		  /* 821DF02Ch */ case    0:  		/* rlwinm R11, R7, 0, 0, 30 */
		/* 821DF02Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R7);
		/* 821DF02Ch case    0:*/		return 0x821DF030;
		  /* 821DF030h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DF030h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DF030h case    1:*/		return 0x821DF034;
		  /* 821DF034h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DF034h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF034h case    2:*/		return 0x821DF038;
		  /* 821DF038h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DF038h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DF048;  }
		/* 821DF038h case    3:*/		return 0x821DF03C;
		  /* 821DF03Ch */ case    4:  		/* mr R7, R11 */
		/* 821DF03Ch case    4:*/		regs.R7 = regs.R11;
		/* 821DF03Ch case    4:*/		return 0x821DF040;
		  /* 821DF040h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DF040h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DF040h case    5:*/		return 0x821DF044;
		  /* 821DF044h */ case    6:  		/* bc 4, CR6_EQ, -164 */
		/* 821DF044h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DEFA0;  }
		/* 821DF044h case    6:*/		return 0x821DF048;
	}
	return 0x821DF048;
} // Block from 821DF02Ch-821DF048h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DF048h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF048( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF048) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF048);
		  /* 821DF048h */ case    0:  		/* mr R25, R21 */
		/* 821DF048h case    0:*/		regs.R25 = regs.R21;
		/* 821DF048h case    0:*/		return 0x821DF04C;
		  /* 821DF04Ch */ case    1:  		/* cmplwi CR6, R21, 0 */
		/* 821DF04Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 821DF04Ch case    1:*/		return 0x821DF050;
		  /* 821DF050h */ case    2:  		/* bc 4, CR6_EQ, -1320 */
		/* 821DF050h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DEB28;  }
		/* 821DF050h case    2:*/		return 0x821DF054;
	}
	return 0x821DF054;
} // Block from 821DF048h-821DF054h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DF054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF054);
		  /* 821DF054h */ case    0:  		/* mr R3, R27 */
		/* 821DF054h case    0:*/		regs.R3 = regs.R27;
		/* 821DF054h case    0:*/		return 0x821DF058;
		  /* 821DF058h */ case    1:  		/* bl 49864 */
		/* 821DF058h case    1:*/		regs.LR = 0x821DF05C; return 0x821EB320;
		/* 821DF058h case    1:*/		return 0x821DF05C;
		  /* 821DF05Ch */ case    2:  		/* li R4, 0 */
		/* 821DF05Ch case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821DF05Ch case    2:*/		return 0x821DF060;
		  /* 821DF060h */ case    3:  		/* mr R3, R27 */
		/* 821DF060h case    3:*/		regs.R3 = regs.R27;
		/* 821DF060h case    3:*/		return 0x821DF064;
		  /* 821DF064h */ case    4:  		/* bl -22508 */
		/* 821DF064h case    4:*/		regs.LR = 0x821DF068; return 0x821D9878;
		/* 821DF064h case    4:*/		return 0x821DF068;
		  /* 821DF068h */ case    5:  		/* addi R1, R1, 176 */
		/* 821DF068h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 821DF068h case    5:*/		return 0x821DF06C;
		  /* 821DF06Ch */ case    6:  		/* b -1367520 */
		/* 821DF06Ch case    6:*/		return 0x8209128C;
		/* 821DF06Ch case    6:*/		return 0x821DF070;
	}
	return 0x821DF070;
} // Block from 821DF054h-821DF070h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DF070h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF070( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF070) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF070);
		  /* 821DF070h */ case    0:  		/* li R4, 4800 */
		/* 821DF070h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821DF070h case    0:*/		return 0x821DF074;
		  /* 821DF074h */ case    1:  		/* mr R3, R27 */
		/* 821DF074h case    1:*/		regs.R3 = regs.R27;
		/* 821DF074h case    1:*/		return 0x821DF078;
		  /* 821DF078h */ case    2:  		/* bl -578064 */
		/* 821DF078h case    2:*/		regs.LR = 0x821DF07C; return 0x82151E68;
		/* 821DF078h case    2:*/		return 0x821DF07C;
	}
	return 0x821DF07C;
} // Block from 821DF070h-821DF07Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DF07Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF07C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF07C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF07C);
		  /* 821DF07Ch */ case    0:  		/* li R4, 4800 */
		/* 821DF07Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821DF07Ch case    0:*/		return 0x821DF080;
		  /* 821DF080h */ case    1:  		/* mr R3, R27 */
		/* 821DF080h case    1:*/		regs.R3 = regs.R27;
		/* 821DF080h case    1:*/		return 0x821DF084;
		  /* 821DF084h */ case    2:  		/* bl -578076 */
		/* 821DF084h case    2:*/		regs.LR = 0x821DF088; return 0x82151E68;
		/* 821DF084h case    2:*/		return 0x821DF088;
	}
	return 0x821DF088;
} // Block from 821DF07Ch-821DF088h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DF088h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF088);
		  /* 821DF088h */ case    0:  		/* li R4, 4800 */
		/* 821DF088h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821DF088h case    0:*/		return 0x821DF08C;
		  /* 821DF08Ch */ case    1:  		/* mr R3, R27 */
		/* 821DF08Ch case    1:*/		regs.R3 = regs.R27;
		/* 821DF08Ch case    1:*/		return 0x821DF090;
		  /* 821DF090h */ case    2:  		/* bl -578088 */
		/* 821DF090h case    2:*/		regs.LR = 0x821DF094; return 0x82151E68;
		/* 821DF090h case    2:*/		return 0x821DF094;
		  /* 821DF094h */ case    3:  		/* nop */
		/* 821DF094h case    3:*/		cpu::op::nop();
		/* 821DF094h case    3:*/		return 0x821DF098;
	}
	return 0x821DF098;
} // Block from 821DF088h-821DF098h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DF098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF098);
		  /* 821DF098h */ case    0:  		/* mfspr R12, LR */
		/* 821DF098h case    0:*/		regs.R12 = regs.LR;
		/* 821DF098h case    0:*/		return 0x821DF09C;
		  /* 821DF09Ch */ case    1:  		/* bl -1367664 */
		/* 821DF09Ch case    1:*/		regs.LR = 0x821DF0A0; return 0x8209122C;
		/* 821DF09Ch case    1:*/		return 0x821DF0A0;
		  /* 821DF0A0h */ case    2:  		/* stfd FR31, <#[R1 - 136]> */
		/* 821DF0A0h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF78) );
		/* 821DF0A0h case    2:*/		return 0x821DF0A4;
		  /* 821DF0A4h */ case    3:  		/* stwu R1, <#[R1 - 240]> */
		/* 821DF0A4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 821DF0A4h case    3:*/		return 0x821DF0A8;
		  /* 821DF0A8h */ case    4:  		/* lwz R11, <#[R3 + 4]> */
		/* 821DF0A8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821DF0A8h case    4:*/		return 0x821DF0AC;
		  /* 821DF0ACh */ case    5:  		/* mr R20, R3 */
		/* 821DF0ACh case    5:*/		regs.R20 = regs.R3;
		/* 821DF0ACh case    5:*/		return 0x821DF0B0;
		  /* 821DF0B0h */ case    6:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DF0B0h case    6:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF0B0h case    6:*/		return 0x821DF0B4;
		  /* 821DF0B4h */ case    7:  		/* addic R10, R10, -1 */
		/* 821DF0B4h case    7:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821DF0B4h case    7:*/		return 0x821DF0B8;
		  /* 821DF0B8h */ case    8:  		/* subfe R10, R10, R10 */
		/* 821DF0B8h case    8:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821DF0B8h case    8:*/		return 0x821DF0BC;
		  /* 821DF0BCh */ case    9:  		/* and R17, R10, R11 */
		/* 821DF0BCh case    9:*/		cpu::op::and<0>(regs,&regs.R17,regs.R10,regs.R11);
		/* 821DF0BCh case    9:*/		return 0x821DF0C0;
		  /* 821DF0C0h */ case   10:  		/* lwz R11, <#[R17 + 48]> */
		/* 821DF0C0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000030) );
		/* 821DF0C0h case   10:*/		return 0x821DF0C4;
		  /* 821DF0C4h */ case   11:  		/* oris R11, R11, 4096 */
		/* 821DF0C4h case   11:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x1000);
		/* 821DF0C4h case   11:*/		return 0x821DF0C8;
	}
	return 0x821DF0C8;
} // Block from 821DF098h-821DF0C8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821DF0C8h
// Function '?EvaluateCompileTimeAssertions@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF0C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF0C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF0C8);
		  /* 821DF0C8h */ case    0:  		/* stw R11, <#[R17 + 48]> */
		/* 821DF0C8h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x00000030) );
		/* 821DF0C8h case    0:*/		return 0x821DF0CC;
		  /* 821DF0CCh */ case    1:  		/* bl -85908 */
		/* 821DF0CCh case    1:*/		regs.LR = 0x821DF0D0; return 0x821CA138;
		/* 821DF0CCh case    1:*/		return 0x821DF0D0;
		  /* 821DF0D0h */ case    2:  		/* li R4, 1 */
		/* 821DF0D0h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821DF0D0h case    2:*/		return 0x821DF0D4;
		  /* 821DF0D4h */ case    3:  		/* mr R3, R20 */
		/* 821DF0D4h case    3:*/		regs.R3 = regs.R20;
		/* 821DF0D4h case    3:*/		return 0x821DF0D8;
		  /* 821DF0D8h */ case    4:  		/* bl -22624 */
		/* 821DF0D8h case    4:*/		regs.LR = 0x821DF0DC; return 0x821D9878;
		/* 821DF0D8h case    4:*/		return 0x821DF0DC;
		  /* 821DF0DCh */ case    5:  		/* lwz R11, <#[R20 + 40]> */
		/* 821DF0DCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000028) );
		/* 821DF0DCh case    5:*/		return 0x821DF0E0;
		  /* 821DF0E0h */ case    6:  		/* rlwinm. R11, R11, 0, 21, 21 */
		/* 821DF0E0h case    6:*/		cpu::op::rlwinm<1,0,21,21>(regs,&regs.R11,regs.R11);
		/* 821DF0E0h case    6:*/		return 0x821DF0E4;
		  /* 821DF0E4h */ case    7:  		/* bc 12, CR0_EQ, 12 */
		/* 821DF0E4h case    7:*/		if ( regs.CR[0].eq ) { return 0x821DF0F0;  }
		/* 821DF0E4h case    7:*/		return 0x821DF0E8;
		  /* 821DF0E8h */ case    8:  		/* mr R3, R20 */
		/* 821DF0E8h case    8:*/		regs.R3 = regs.R20;
		/* 821DF0E8h case    8:*/		return 0x821DF0EC;
		  /* 821DF0ECh */ case    9:  		/* bl -105588 */
		/* 821DF0ECh case    9:*/		regs.LR = 0x821DF0F0; return 0x821C5478;
		/* 821DF0ECh case    9:*/		return 0x821DF0F0;
	}
	return 0x821DF0F0;
} // Block from 821DF0C8h-821DF0F0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DF0F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF0F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF0F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF0F0);
		  /* 821DF0F0h */ case    0:  		/* lwz R11, <#[R20 + 44]> */
		/* 821DF0F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000002C) );
		/* 821DF0F0h case    0:*/		return 0x821DF0F4;
		  /* 821DF0F4h */ case    1:  		/* rlwinm. R11, R11, 0, 27, 27 */
		/* 821DF0F4h case    1:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R11,regs.R11);
		/* 821DF0F4h case    1:*/		return 0x821DF0F8;
		  /* 821DF0F8h */ case    2:  		/* bc 12, CR0_EQ, 1020 */
		/* 821DF0F8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821DF4F4;  }
		/* 821DF0F8h case    2:*/		return 0x821DF0FC;
		  /* 821DF0FCh */ case    3:  		/* li R5, 28 */
		/* 821DF0FCh case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x1C);
		/* 821DF0FCh case    3:*/		return 0x821DF100;
		  /* 821DF100h */ case    4:  		/* li R4, 8 */
		/* 821DF100h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821DF100h case    4:*/		return 0x821DF104;
		  /* 821DF104h */ case    5:  		/* mr R3, R20 */
		/* 821DF104h case    5:*/		regs.R3 = regs.R20;
		/* 821DF104h case    5:*/		return 0x821DF108;
		  /* 821DF108h */ case    6:  		/* bl -501784 */
		/* 821DF108h case    6:*/		regs.LR = 0x821DF10C; return 0x821648F0;
		/* 821DF108h case    6:*/		return 0x821DF10C;
		  /* 821DF10Ch */ case    7:  		/* addi R28, R3, 4 */
		/* 821DF10Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R3,0x4);
		/* 821DF10Ch case    7:*/		return 0x821DF110;
		  /* 821DF110h */ case    8:  		/* ori R11, R3, 1 */
		/* 821DF110h case    8:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821DF110h case    8:*/		return 0x821DF114;
		  /* 821DF114h */ case    9:  		/* ori R10, R28, 1 */
		/* 821DF114h case    9:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R28,0x1);
		/* 821DF114h case    9:*/		return 0x821DF118;
		  /* 821DF118h */ case   10:  		/* stw R11, <#[R3 + 4]> */
		/* 821DF118h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821DF118h case   10:*/		return 0x821DF11C;
		  /* 821DF11Ch */ case   11:  		/* mr R30, R3 */
		/* 821DF11Ch case   11:*/		regs.R30 = regs.R3;
		/* 821DF11Ch case   11:*/		return 0x821DF120;
		  /* 821DF120h */ case   12:  		/* stw R10, <#[R3]> */
		/* 821DF120h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821DF120h case   12:*/		return 0x821DF124;
		  /* 821DF124h */ case   13:  		/* li R5, 6 */
		/* 821DF124h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 821DF124h case   13:*/		return 0x821DF128;
		  /* 821DF128h */ case   14:  		/* li R4, 8 */
		/* 821DF128h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821DF128h case   14:*/		return 0x821DF12C;
		  /* 821DF12Ch */ case   15:  		/* mr R3, R20 */
		/* 821DF12Ch case   15:*/		regs.R3 = regs.R20;
		/* 821DF12Ch case   15:*/		return 0x821DF130;
		  /* 821DF130h */ case   16:  		/* bl -501824 */
		/* 821DF130h case   16:*/		regs.LR = 0x821DF134; return 0x821648F0;
		/* 821DF130h case   16:*/		return 0x821DF134;
		  /* 821DF134h */ case   17:  		/* addi R27, R3, 4 */
		/* 821DF134h case   17:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R3,0x4);
		/* 821DF134h case   17:*/		return 0x821DF138;
		  /* 821DF138h */ case   18:  		/* ori R11, R3, 1 */
		/* 821DF138h case   18:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821DF138h case   18:*/		return 0x821DF13C;
		  /* 821DF13Ch */ case   19:  		/* ori R10, R27, 1 */
		/* 821DF13Ch case   19:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R27,0x1);
		/* 821DF13Ch case   19:*/		return 0x821DF140;
		  /* 821DF140h */ case   20:  		/* stw R11, <#[R3 + 4]> */
		/* 821DF140h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821DF140h case   20:*/		return 0x821DF144;
		  /* 821DF144h */ case   21:  		/* mr R29, R3 */
		/* 821DF144h case   21:*/		regs.R29 = regs.R3;
		/* 821DF144h case   21:*/		return 0x821DF148;
		  /* 821DF148h */ case   22:  		/* stw R10, <#[R3]> */
		/* 821DF148h case   22:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821DF148h case   22:*/		return 0x821DF14C;
		  /* 821DF14Ch */ case   23:  		/* li R24, 0 */
		/* 821DF14Ch case   23:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821DF14Ch case   23:*/		return 0x821DF150;
		  /* 821DF150h */ case   24:  		/* lwz R11, <#[R20 + 4]> */
		/* 821DF150h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821DF150h case   24:*/		return 0x821DF154;
		  /* 821DF154h */ case   25:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DF154h case   25:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF154h case   25:*/		return 0x821DF158;
		  /* 821DF158h */ case   26:  		/* bc 4, CR0_EQ, 384 */
		/* 821DF158h case   26:*/		if ( !regs.CR[0].eq ) { return 0x821DF2D8;  }
		/* 821DF158h case   26:*/		return 0x821DF15C;
		  /* 821DF15Ch */ case   27:  		/* mr R26, R11 */
		/* 821DF15Ch case   27:*/		regs.R26 = regs.R11;
		/* 821DF15Ch case   27:*/		return 0x821DF160;
		  /* 821DF160h */ case   28:  		/* cmplwi CR0, R11, 0 */
		/* 821DF160h case   28:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DF160h case   28:*/		return 0x821DF164;
		  /* 821DF164h */ case   29:  		/* bc 12, CR0_EQ, 372 */
		/* 821DF164h case   29:*/		if ( regs.CR[0].eq ) { return 0x821DF2D8;  }
		/* 821DF164h case   29:*/		return 0x821DF168;
		  /* 821DF168h */ case   30:  		/* lwz R11, <#[R26 + 40]> */
		/* 821DF168h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000028) );
		/* 821DF168h case   30:*/		return 0x821DF16C;
		  /* 821DF16Ch */ case   31:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DF16Ch case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DF16Ch case   31:*/		return 0x821DF170;
		  /* 821DF170h */ case   32:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DF170h case   32:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DF170h case   32:*/		return 0x821DF174;
		  /* 821DF174h */ case   33:  		/* bc 4, CR0_EQ, 328 */
		/* 821DF174h case   33:*/		if ( !regs.CR[0].eq ) { return 0x821DF2BC;  }
		/* 821DF174h case   33:*/		return 0x821DF178;
		  /* 821DF178h */ case   34:  		/* lwz R11, <#[R26 + 36]> */
		/* 821DF178h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000024) );
		/* 821DF178h case   34:*/		return 0x821DF17C;
		  /* 821DF17Ch */ case   35:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DF17Ch case   35:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF17Ch case   35:*/		return 0x821DF180;
		  /* 821DF180h */ case   36:  		/* bc 4, CR0_EQ, 316 */
		/* 821DF180h case   36:*/		if ( !regs.CR[0].eq ) { return 0x821DF2BC;  }
		/* 821DF180h case   36:*/		return 0x821DF184;
		  /* 821DF184h */ case   37:  		/* mr R25, R11 */
		/* 821DF184h case   37:*/		regs.R25 = regs.R11;
		/* 821DF184h case   37:*/		return 0x821DF188;
		  /* 821DF188h */ case   38:  		/* cmplwi CR0, R11, 0 */
		/* 821DF188h case   38:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DF188h case   38:*/		return 0x821DF18C;
		  /* 821DF18Ch */ case   39:  		/* bc 12, CR0_EQ, 304 */
		/* 821DF18Ch case   39:*/		if ( regs.CR[0].eq ) { return 0x821DF2BC;  }
		/* 821DF18Ch case   39:*/		return 0x821DF190;
		  /* 821DF190h */ case   40:  		/* lwz R31, <#[R25]> */
		/* 821DF190h case   40:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R25 + 0x00000000) );
		/* 821DF190h case   40:*/		return 0x821DF194;
		  /* 821DF194h */ case   41:  		/* cmplwi CR6, R31, 0 */
		/* 821DF194h case   41:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DF194h case   41:*/		return 0x821DF198;
		  /* 821DF198h */ case   42:  		/* bc 12, CR6_EQ, 264 */
		/* 821DF198h case   42:*/		if ( regs.CR[6].eq ) { return 0x821DF2A0;  }
		/* 821DF198h case   42:*/		return 0x821DF19C;
		  /* 821DF19Ch */ case   43:  		/* lwz R10, <#[R31]> */
		/* 821DF19Ch case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821DF19Ch case   43:*/		return 0x821DF1A0;
		  /* 821DF1A0h */ case   44:  		/* rlwinm. R11, R10, 0, 4, 6 */
		/* 821DF1A0h case   44:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R10);
		/* 821DF1A0h case   44:*/		return 0x821DF1A4;
		  /* 821DF1A4h */ case   45:  		/* bc 12, CR0_EQ, 24 */
		/* 821DF1A4h case   45:*/		if ( regs.CR[0].eq ) { return 0x821DF1BC;  }
		/* 821DF1A4h case   45:*/		return 0x821DF1A8;
		  /* 821DF1A8h */ case   46:  		/* lwz R11, <#[R31 + 12]> */
		/* 821DF1A8h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821DF1A8h case   46:*/		return 0x821DF1AC;
		  /* 821DF1ACh */ case   47:  		/* lwz R11, <#[R11 + 8]> */
		/* 821DF1ACh case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821DF1ACh case   47:*/		return 0x821DF1B0;
		  /* 821DF1B0h */ case   48:  		/* rlwinm. R11, R11, 27, 31, 31 */
		/* 821DF1B0h case   48:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R11,regs.R11);
		/* 821DF1B0h case   48:*/		return 0x821DF1B4;
		  /* 821DF1B4h */ case   49:  		/* li R11, 1 */
		/* 821DF1B4h case   49:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821DF1B4h case   49:*/		return 0x821DF1B8;
		  /* 821DF1B8h */ case   50:  		/* bc 4, CR0_EQ, 8 */
		/* 821DF1B8h case   50:*/		if ( !regs.CR[0].eq ) { return 0x821DF1C0;  }
		/* 821DF1B8h case   50:*/		return 0x821DF1BC;
	}
	return 0x821DF1BC;
} // Block from 821DF0F0h-821DF1BCh (51 instructions)

//////////////////////////////////////////////////////
// Block at 821DF1BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF1BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF1BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF1BC);
		  /* 821DF1BCh */ case    0:  		/* li R11, 0 */
		/* 821DF1BCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DF1BCh case    0:*/		return 0x821DF1C0;
	}
	return 0x821DF1C0;
} // Block from 821DF1BCh-821DF1C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DF1C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF1C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF1C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF1C0);
		  /* 821DF1C0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DF1C0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DF1C0h case    0:*/		return 0x821DF1C4;
		  /* 821DF1C4h */ case    1:  		/* bc 12, CR0_EQ, 212 */
		/* 821DF1C4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DF298;  }
		/* 821DF1C4h case    1:*/		return 0x821DF1C8;
		  /* 821DF1C8h */ case    2:  		/* rlwinm R11, R10, 0, 7, 14 */
		/* 821DF1C8h case    2:*/		cpu::op::rlwinm<0,0,7,14>(regs,&regs.R11,regs.R10);
		/* 821DF1C8h case    2:*/		return 0x821DF1CC;
		  /* 821DF1CCh */ case    3:  		/* lis R10, 124 */
		/* 821DF1CCh case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0x7C);
		/* 821DF1CCh case    3:*/		return 0x821DF1D0;
		  /* 821DF1D0h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 821DF1D0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821DF1D0h case    4:*/		return 0x821DF1D4;
		  /* 821DF1D4h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 821DF1D4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821DF1E0;  }
		/* 821DF1D4h case    5:*/		return 0x821DF1D8;
		  /* 821DF1D8h */ case    6:  		/* addi R24, R24, 1 */
		/* 821DF1D8h case    6:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821DF1D8h case    6:*/		return 0x821DF1DC;
		  /* 821DF1DCh */ case    7:  		/* b 188 */
		/* 821DF1DCh case    7:*/		return 0x821DF298;
		/* 821DF1DCh case    7:*/		return 0x821DF1E0;
	}
	return 0x821DF1E0;
} // Block from 821DF1C0h-821DF1E0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821DF1E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF1E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF1E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF1E0);
		  /* 821DF1E0h */ case    0:  		/* li R5, 1 */
		/* 821DF1E0h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821DF1E0h case    0:*/		return 0x821DF1E4;
		  /* 821DF1E4h */ case    1:  		/* mr R4, R31 */
		/* 821DF1E4h case    1:*/		regs.R4 = regs.R31;
		/* 821DF1E4h case    1:*/		return 0x821DF1E8;
		  /* 821DF1E8h */ case    2:  		/* mr R3, R20 */
		/* 821DF1E8h case    2:*/		regs.R3 = regs.R20;
		/* 821DF1E8h case    2:*/		return 0x821DF1EC;
		  /* 821DF1ECh */ case    3:  		/* bl 322428 */
		/* 821DF1ECh case    3:*/		regs.LR = 0x821DF1F0; return 0x8222DD68;
		/* 821DF1ECh case    3:*/		return 0x821DF1F0;
		  /* 821DF1F0h */ case    4:  		/* lwz R11, <#[R27]> */
		/* 821DF1F0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821DF1F0h case    4:*/		return 0x821DF1F4;
		  /* 821DF1F4h */ case    5:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DF1F4h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DF1F4h case    5:*/		return 0x821DF1F8;
		  /* 821DF1F8h */ case    6:  		/* bc 4, CR0_EQ, 40 */
		/* 821DF1F8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821DF220;  }
		/* 821DF1F8h case    6:*/		return 0x821DF1FC;
		  /* 821DF1FCh */ case    7:  		/* lwz R11, <#[R29]> */
		/* 821DF1FCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821DF1FCh case    7:*/		return 0x821DF200;
		  /* 821DF200h */ case    8:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DF200h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DF200h case    8:*/		return 0x821DF204;
		  /* 821DF204h */ case    9:  		/* addic. R3, R11, -4 */
		/* 821DF204h case    9:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821DF204h case    9:*/		return 0x821DF208;
		  /* 821DF208h */ case   10:  		/* bc 12, CR0_EQ, 24 */
		/* 821DF208h case   10:*/		if ( regs.CR[0].eq ) { return 0x821DF220;  }
		/* 821DF208h case   10:*/		return 0x821DF20C;
		  /* 821DF20Ch */ case   11:  		/* lwz R11, <#[R3 + 8]> */
		/* 821DF20Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821DF20Ch case   11:*/		return 0x821DF210;
		  /* 821DF210h */ case   12:  		/* lwz R10, <#[R3 + 12]> */
		/* 821DF210h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821DF210h case   12:*/		return 0x821DF214;
		  /* 821DF214h */ case   13:  		/* addi R11, R11, 1 */
		/* 821DF214h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821DF214h case   13:*/		return 0x821DF218;
		  /* 821DF218h */ case   14:  		/* cmplw CR6, R11, R10 */
		/* 821DF218h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821DF218h case   14:*/		return 0x821DF21C;
		  /* 821DF21Ch */ case   15:  		/* bc 4, CR6_GT, 16 */
		/* 821DF21Ch case   15:*/		if ( !regs.CR[6].gt ) { return 0x821DF22C;  }
		/* 821DF21Ch case   15:*/		return 0x821DF220;
	}
	return 0x821DF220;
} // Block from 821DF1E0h-821DF220h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821DF220h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF220);
		  /* 821DF220h */ case    0:  		/* li R4, 1 */
		/* 821DF220h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821DF220h case    0:*/		return 0x821DF224;
		  /* 821DF224h */ case    1:  		/* mr R3, R29 */
		/* 821DF224h case    1:*/		regs.R3 = regs.R29;
		/* 821DF224h case    1:*/		return 0x821DF228;
		  /* 821DF228h */ case    2:  		/* bl -336224 */
		/* 821DF228h case    2:*/		regs.LR = 0x821DF22C; return 0x8218D0C8;
		/* 821DF228h case    2:*/		return 0x821DF22C;
	}
	return 0x821DF22C;
} // Block from 821DF220h-821DF22Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DF22Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF22C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF22C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF22C);
		  /* 821DF22Ch */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821DF22Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821DF22Ch case    0:*/		return 0x821DF230;
		  /* 821DF230h */ case    1:  		/* addi R10, R11, 4 */
		/* 821DF230h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821DF230h case    1:*/		return 0x821DF234;
		  /* 821DF234h */ case    2:  		/* addi R9, R11, 1 */
		/* 821DF234h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821DF234h case    2:*/		return 0x821DF238;
		  /* 821DF238h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821DF238h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821DF238h case    3:*/		return 0x821DF23C;
		  /* 821DF23Ch */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821DF23Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821DF23Ch case    4:*/		return 0x821DF240;
		  /* 821DF240h */ case    5:  		/* stwx R26, <#[R11 + R3]> */
		/* 821DF240h case    5:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821DF240h case    5:*/		return 0x821DF244;
		  /* 821DF244h */ case    6:  		/* lwz R11, <#[R28]> */
		/* 821DF244h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821DF244h case    6:*/		return 0x821DF248;
		  /* 821DF248h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DF248h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DF248h case    7:*/		return 0x821DF24C;
		  /* 821DF24Ch */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 821DF24Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x821DF274;  }
		/* 821DF24Ch case    8:*/		return 0x821DF250;
		  /* 821DF250h */ case    9:  		/* lwz R11, <#[R30]> */
		/* 821DF250h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821DF250h case    9:*/		return 0x821DF254;
		  /* 821DF254h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DF254h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DF254h case   10:*/		return 0x821DF258;
		  /* 821DF258h */ case   11:  		/* addic. R3, R11, -4 */
		/* 821DF258h case   11:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821DF258h case   11:*/		return 0x821DF25C;
		  /* 821DF25Ch */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 821DF25Ch case   12:*/		if ( regs.CR[0].eq ) { return 0x821DF274;  }
		/* 821DF25Ch case   12:*/		return 0x821DF260;
		  /* 821DF260h */ case   13:  		/* lwz R11, <#[R3 + 8]> */
		/* 821DF260h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821DF260h case   13:*/		return 0x821DF264;
		  /* 821DF264h */ case   14:  		/* lwz R10, <#[R3 + 12]> */
		/* 821DF264h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821DF264h case   14:*/		return 0x821DF268;
		  /* 821DF268h */ case   15:  		/* addi R11, R11, 1 */
		/* 821DF268h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821DF268h case   15:*/		return 0x821DF26C;
		  /* 821DF26Ch */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 821DF26Ch case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821DF26Ch case   16:*/		return 0x821DF270;
		  /* 821DF270h */ case   17:  		/* bc 4, CR6_GT, 16 */
		/* 821DF270h case   17:*/		if ( !regs.CR[6].gt ) { return 0x821DF280;  }
		/* 821DF270h case   17:*/		return 0x821DF274;
	}
	return 0x821DF274;
} // Block from 821DF22Ch-821DF274h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821DF274h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF274( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF274) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF274);
		  /* 821DF274h */ case    0:  		/* li R4, 1 */
		/* 821DF274h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821DF274h case    0:*/		return 0x821DF278;
		  /* 821DF278h */ case    1:  		/* mr R3, R30 */
		/* 821DF278h case    1:*/		regs.R3 = regs.R30;
		/* 821DF278h case    1:*/		return 0x821DF27C;
		  /* 821DF27Ch */ case    2:  		/* bl -336308 */
		/* 821DF27Ch case    2:*/		regs.LR = 0x821DF280; return 0x8218D0C8;
		/* 821DF27Ch case    2:*/		return 0x821DF280;
	}
	return 0x821DF280;
} // Block from 821DF274h-821DF280h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DF280h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF280);
		  /* 821DF280h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821DF280h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821DF280h case    0:*/		return 0x821DF284;
		  /* 821DF284h */ case    1:  		/* addi R10, R11, 4 */
		/* 821DF284h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821DF284h case    1:*/		return 0x821DF288;
		  /* 821DF288h */ case    2:  		/* addi R9, R11, 1 */
		/* 821DF288h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821DF288h case    2:*/		return 0x821DF28C;
		  /* 821DF28Ch */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821DF28Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821DF28Ch case    3:*/		return 0x821DF290;
		  /* 821DF290h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821DF290h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821DF290h case    4:*/		return 0x821DF294;
		  /* 821DF294h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821DF294h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821DF294h case    5:*/		return 0x821DF298;
	}
	return 0x821DF298;
} // Block from 821DF280h-821DF298h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DF298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF298);
		  /* 821DF298h */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 821DF298h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 821DF298h case    0:*/		return 0x821DF29C;
		  /* 821DF29Ch */ case    1:  		/* b -264 */
		/* 821DF29Ch case    1:*/		return 0x821DF194;
		/* 821DF29Ch case    1:*/		return 0x821DF2A0;
	}
	return 0x821DF2A0;
} // Block from 821DF298h-821DF2A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DF2A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF2A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF2A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF2A0);
		  /* 821DF2A0h */ case    0:  		/* rlwinm R11, R25, 0, 0, 30 */
		/* 821DF2A0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R25);
		/* 821DF2A0h case    0:*/		return 0x821DF2A4;
		  /* 821DF2A4h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DF2A4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DF2A4h case    1:*/		return 0x821DF2A8;
		  /* 821DF2A8h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DF2A8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF2A8h case    2:*/		return 0x821DF2AC;
		  /* 821DF2ACh */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DF2ACh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DF2BC;  }
		/* 821DF2ACh case    3:*/		return 0x821DF2B0;
		  /* 821DF2B0h */ case    4:  		/* mr R25, R11 */
		/* 821DF2B0h case    4:*/		regs.R25 = regs.R11;
		/* 821DF2B0h case    4:*/		return 0x821DF2B4;
		  /* 821DF2B4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DF2B4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DF2B4h case    5:*/		return 0x821DF2B8;
		  /* 821DF2B8h */ case    6:  		/* bc 4, CR6_EQ, -296 */
		/* 821DF2B8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DF190;  }
		/* 821DF2B8h case    6:*/		return 0x821DF2BC;
	}
	return 0x821DF2BC;
} // Block from 821DF2A0h-821DF2BCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DF2BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF2BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF2BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF2BC);
		  /* 821DF2BCh */ case    0:  		/* rlwinm R11, R26, 0, 0, 30 */
		/* 821DF2BCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R26);
		/* 821DF2BCh case    0:*/		return 0x821DF2C0;
		  /* 821DF2C0h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DF2C0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DF2C0h case    1:*/		return 0x821DF2C4;
		  /* 821DF2C4h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DF2C4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF2C4h case    2:*/		return 0x821DF2C8;
		  /* 821DF2C8h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DF2C8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DF2D8;  }
		/* 821DF2C8h case    3:*/		return 0x821DF2CC;
		  /* 821DF2CCh */ case    4:  		/* mr R26, R11 */
		/* 821DF2CCh case    4:*/		regs.R26 = regs.R11;
		/* 821DF2CCh case    4:*/		return 0x821DF2D0;
		  /* 821DF2D0h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DF2D0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DF2D0h case    5:*/		return 0x821DF2D4;
		  /* 821DF2D4h */ case    6:  		/* bc 4, CR6_EQ, -364 */
		/* 821DF2D4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DF168;  }
		/* 821DF2D4h case    6:*/		return 0x821DF2D8;
	}
	return 0x821DF2D8;
} // Block from 821DF2BCh-821DF2D8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DF2D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF2D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF2D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF2D8);
		  /* 821DF2D8h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821DF2D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821DF2D8h case    0:*/		return 0x821DF2DC;
		  /* 821DF2DCh */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DF2DCh case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF2DCh case    1:*/		return 0x821DF2E0;
		  /* 821DF2E0h */ case    2:  		/* bc 4, CR0_EQ, 12 */
		/* 821DF2E0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821DF2EC;  }
		/* 821DF2E0h case    2:*/		return 0x821DF2E4;
		  /* 821DF2E4h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821DF2E4h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DF2E4h case    3:*/		return 0x821DF2E8;
		  /* 821DF2E8h */ case    4:  		/* bc 4, CR0_EQ, 20 */
		/* 821DF2E8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821DF2FC;  }
		/* 821DF2E8h case    4:*/		return 0x821DF2EC;
	}
	return 0x821DF2EC;
} // Block from 821DF2D8h-821DF2ECh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DF2ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF2EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF2EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF2EC);
		  /* 821DF2ECh */ case    0:  		/* lwz R11, <#[R20 + 44]> */
		/* 821DF2ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000002C) );
		/* 821DF2ECh case    0:*/		return 0x821DF2F0;
		  /* 821DF2F0h */ case    1:  		/* addi R11, R11, -16 */
		/* 821DF2F0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFF0);
		/* 821DF2F0h case    1:*/		return 0x821DF2F4;
		  /* 821DF2F4h */ case    2:  		/* stw R11, <#[R20 + 44]> */
		/* 821DF2F4h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R20 + 0x0000002C) );
		/* 821DF2F4h case    2:*/		return 0x821DF2F8;
		  /* 821DF2F8h */ case    3:  		/* b 188 */
		/* 821DF2F8h case    3:*/		return 0x821DF3B4;
		/* 821DF2F8h case    3:*/		return 0x821DF2FC;
	}
	return 0x821DF2FC;
} // Block from 821DF2ECh-821DF2FCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DF2FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF2FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF2FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF2FC);
		  /* 821DF2FCh */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 821DF2FCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821DF2FCh case    0:*/		return 0x821DF300;
		  /* 821DF300h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 821DF300h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DF310;  }
		/* 821DF300h case    1:*/		return 0x821DF304;
		  /* 821DF304h */ case    2:  		/* lwz R11, <#[R20 + 44]> */
		/* 821DF304h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000002C) );
		/* 821DF304h case    2:*/		return 0x821DF308;
	}
	return 0x821DF308;
} // Block from 821DF2FCh-821DF308h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DF308h
// Function '?CheckForCompileTimeAssertions@Compiler@D3DXShader@@AAAX_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF308);
		  /* 821DF308h */ case    0:  		/* ori R11, R11, 32 */
		/* 821DF308h case    0:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x20);
		/* 821DF308h case    0:*/		return 0x821DF30C;
		  /* 821DF30Ch */ case    1:  		/* b -24 */
		/* 821DF30Ch case    1:*/		return 0x821DF2F4;
		/* 821DF30Ch case    1:*/		return 0x821DF310;
	}
	return 0x821DF310;
} // Block from 821DF308h-821DF310h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DF310h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF310);
		  /* 821DF310h */ case    0:  		/* lwz R11, <#[R20 + 4]> */
		/* 821DF310h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821DF310h case    0:*/		return 0x821DF314;
		  /* 821DF314h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DF314h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF314h case    1:*/		return 0x821DF318;
		  /* 821DF318h */ case    2:  		/* bc 4, CR0_EQ, 156 */
		/* 821DF318h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821DF3B4;  }
		/* 821DF318h case    2:*/		return 0x821DF31C;
		  /* 821DF31Ch */ case    3:  		/* mr R30, R11 */
		/* 821DF31Ch case    3:*/		regs.R30 = regs.R11;
		/* 821DF31Ch case    3:*/		return 0x821DF320;
		  /* 821DF320h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821DF320h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DF320h case    4:*/		return 0x821DF324;
		  /* 821DF324h */ case    5:  		/* bc 12, CR0_EQ, 144 */
		/* 821DF324h case    5:*/		if ( regs.CR[0].eq ) { return 0x821DF3B4;  }
		/* 821DF324h case    5:*/		return 0x821DF328;
		  /* 821DF328h */ case    6:  		/* lwz R11, <#[R30 + 36]> */
		/* 821DF328h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821DF328h case    6:*/		return 0x821DF32C;
		  /* 821DF32Ch */ case    7:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DF32Ch case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF32Ch case    7:*/		return 0x821DF330;
		  /* 821DF330h */ case    8:  		/* bc 4, CR0_EQ, 104 */
		/* 821DF330h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821DF398;  }
		/* 821DF330h case    8:*/		return 0x821DF334;
		  /* 821DF334h */ case    9:  		/* mr R31, R11 */
		/* 821DF334h case    9:*/		regs.R31 = regs.R11;
		/* 821DF334h case    9:*/		return 0x821DF338;
		  /* 821DF338h */ case   10:  		/* cmplwi CR0, R11, 0 */
		/* 821DF338h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DF338h case   10:*/		return 0x821DF33C;
		  /* 821DF33Ch */ case   11:  		/* bc 12, CR0_EQ, 92 */
		/* 821DF33Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x821DF398;  }
		/* 821DF33Ch case   11:*/		return 0x821DF340;
		  /* 821DF340h */ case   12:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DF340h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DF340h case   12:*/		return 0x821DF344;
		  /* 821DF344h */ case   13:  		/* rlwinm. R10, R11, 6, 31, 31 */
		/* 821DF344h case   13:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF344h case   13:*/		return 0x821DF348;
		  /* 821DF348h */ case   14:  		/* bc 12, CR0_EQ, 52 */
		/* 821DF348h case   14:*/		if ( regs.CR[0].eq ) { return 0x821DF37C;  }
		/* 821DF348h case   14:*/		return 0x821DF34C;
		  /* 821DF34Ch */ case   15:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821DF34Ch case   15:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821DF34Ch case   15:*/		return 0x821DF350;
		  /* 821DF350h */ case   16:  		/* cmplwi CR6, R11, 86 */
		/* 821DF350h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 821DF350h case   16:*/		return 0x821DF354;
		  /* 821DF354h */ case   17:  		/* bc 12, CR6_EQ, 16 */
		/* 821DF354h case   17:*/		if ( regs.CR[6].eq ) { return 0x821DF364;  }
		/* 821DF354h case   17:*/		return 0x821DF358;
		  /* 821DF358h */ case   18:  		/* cmplwi CR6, R11, 87 */
		/* 821DF358h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 821DF358h case   18:*/		return 0x821DF35C;
		  /* 821DF35Ch */ case   19:  		/* li R11, 0 */
		/* 821DF35Ch case   19:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DF35Ch case   19:*/		return 0x821DF360;
		  /* 821DF360h */ case   20:  		/* bc 4, CR6_EQ, 8 */
		/* 821DF360h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821DF368;  }
		/* 821DF360h case   20:*/		return 0x821DF364;
	}
	return 0x821DF364;
} // Block from 821DF310h-821DF364h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821DF364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF364);
		  /* 821DF364h */ case    0:  		/* li R11, 1 */
		/* 821DF364h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821DF364h case    0:*/		return 0x821DF368;
	}
	return 0x821DF368;
} // Block from 821DF364h-821DF368h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DF368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF368);
		  /* 821DF368h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DF368h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DF368h case    0:*/		return 0x821DF36C;
		  /* 821DF36Ch */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821DF36Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821DF37C;  }
		/* 821DF36Ch case    1:*/		return 0x821DF370;
		  /* 821DF370h */ case    2:  		/* mr R4, R31 */
		/* 821DF370h case    2:*/		regs.R4 = regs.R31;
		/* 821DF370h case    2:*/		return 0x821DF374;
		  /* 821DF374h */ case    3:  		/* mr R3, R20 */
		/* 821DF374h case    3:*/		regs.R3 = regs.R20;
		/* 821DF374h case    3:*/		return 0x821DF378;
		  /* 821DF378h */ case    4:  		/* bl -136696 */
		/* 821DF378h case    4:*/		regs.LR = 0x821DF37C; return 0x821BDD80;
		/* 821DF378h case    4:*/		return 0x821DF37C;
	}
	return 0x821DF37C;
} // Block from 821DF368h-821DF37Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DF37Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF37C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF37C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF37C);
		  /* 821DF37Ch */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821DF37Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821DF37Ch case    0:*/		return 0x821DF380;
		  /* 821DF380h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DF380h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DF380h case    1:*/		return 0x821DF384;
		  /* 821DF384h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DF384h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF384h case    2:*/		return 0x821DF388;
		  /* 821DF388h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DF388h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DF398;  }
		/* 821DF388h case    3:*/		return 0x821DF38C;
		  /* 821DF38Ch */ case    4:  		/* mr R31, R11 */
		/* 821DF38Ch case    4:*/		regs.R31 = regs.R11;
		/* 821DF38Ch case    4:*/		return 0x821DF390;
		  /* 821DF390h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DF390h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DF390h case    5:*/		return 0x821DF394;
		  /* 821DF394h */ case    6:  		/* bc 4, CR6_EQ, -84 */
		/* 821DF394h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DF340;  }
		/* 821DF394h case    6:*/		return 0x821DF398;
	}
	return 0x821DF398;
} // Block from 821DF37Ch-821DF398h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DF398h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF398( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF398) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF398);
		  /* 821DF398h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821DF398h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821DF398h case    0:*/		return 0x821DF39C;
		  /* 821DF39Ch */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DF39Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DF39Ch case    1:*/		return 0x821DF3A0;
		  /* 821DF3A0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DF3A0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF3A0h case    2:*/		return 0x821DF3A4;
		  /* 821DF3A4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DF3A4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DF3B4;  }
		/* 821DF3A4h case    3:*/		return 0x821DF3A8;
		  /* 821DF3A8h */ case    4:  		/* mr R30, R11 */
		/* 821DF3A8h case    4:*/		regs.R30 = regs.R11;
		/* 821DF3A8h case    4:*/		return 0x821DF3AC;
		  /* 821DF3ACh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DF3ACh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DF3ACh case    5:*/		return 0x821DF3B0;
		  /* 821DF3B0h */ case    6:  		/* bc 4, CR6_EQ, -136 */
		/* 821DF3B0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DF328;  }
		/* 821DF3B0h case    6:*/		return 0x821DF3B4;
	}
	return 0x821DF3B4;
} // Block from 821DF398h-821DF3B4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DF3B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF3B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF3B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF3B4);
		  /* 821DF3B4h */ case    0:  		/* lwz R8, <#[R20 + 4]> */
		/* 821DF3B4h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R20 + 0x00000004) );
		/* 821DF3B4h case    0:*/		return 0x821DF3B8;
		  /* 821DF3B8h */ case    1:  		/* rlwinm. R11, R8, 0, 31, 31 */
		/* 821DF3B8h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R8);
		/* 821DF3B8h case    1:*/		return 0x821DF3BC;
		  /* 821DF3BCh */ case    2:  		/* bc 4, CR0_EQ, 228 */
		/* 821DF3BCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x821DF4A0;  }
		/* 821DF3BCh case    2:*/		return 0x821DF3C0;
		  /* 821DF3C0h */ case    3:  		/* cmplwi CR0, R8, 0 */
		/* 821DF3C0h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R8,0x00000000);
		/* 821DF3C0h case    3:*/		return 0x821DF3C4;
		  /* 821DF3C4h */ case    4:  		/* bc 12, CR0_EQ, 220 */
		/* 821DF3C4h case    4:*/		if ( regs.CR[0].eq ) { return 0x821DF4A0;  }
		/* 821DF3C4h case    4:*/		return 0x821DF3C8;
		  /* 821DF3C8h */ case    5:  		/* lwz R11, <#[R8 + 20]> */
		/* 821DF3C8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000014) );
		/* 821DF3C8h case    5:*/		return 0x821DF3CC;
		  /* 821DF3CCh */ case    6:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DF3CCh case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DF3CCh case    6:*/		return 0x821DF3D0;
		  /* 821DF3D0h */ case    7:  		/* bc 12, CR0_EQ, 40 */
		/* 821DF3D0h case    7:*/		if ( regs.CR[0].eq ) { return 0x821DF3F8;  }
		/* 821DF3D0h case    7:*/		return 0x821DF3D4;
		  /* 821DF3D4h */ case    8:  		/* lwz R11, <#[R8 + 28]> */
		/* 821DF3D4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000001C) );
		/* 821DF3D4h case    8:*/		return 0x821DF3D8;
		  /* 821DF3D8h */ case    9:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DF3D8h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DF3D8h case    9:*/		return 0x821DF3DC;
		  /* 821DF3DCh */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 821DF3DCh case   10:*/		if ( regs.CR[0].eq ) { return 0x821DF3EC;  }
		/* 821DF3DCh case   10:*/		return 0x821DF3E0;
		  /* 821DF3E0h */ case   11:  		/* lwz R11, <#[R8 + 36]> */
		/* 821DF3E0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000024) );
		/* 821DF3E0h case   11:*/		return 0x821DF3E4;
		  /* 821DF3E4h */ case   12:  		/* addi R10, R8, 32 */
		/* 821DF3E4h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0x20);
		/* 821DF3E4h case   12:*/		return 0x821DF3E8;
		  /* 821DF3E8h */ case   13:  		/* b 24 */
		/* 821DF3E8h case   13:*/		return 0x821DF400;
		/* 821DF3E8h case   13:*/		return 0x821DF3EC;
	}
	return 0x821DF3EC;
} // Block from 821DF3B4h-821DF3ECh (14 instructions)

//////////////////////////////////////////////////////
// Block at 821DF3ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF3EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF3EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF3EC);
		  /* 821DF3ECh */ case    0:  		/* lwz R11, <#[R8 + 28]> */
		/* 821DF3ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000001C) );
		/* 821DF3ECh case    0:*/		return 0x821DF3F0;
		  /* 821DF3F0h */ case    1:  		/* addi R10, R8, 24 */
		/* 821DF3F0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0x18);
		/* 821DF3F0h case    1:*/		return 0x821DF3F4;
		  /* 821DF3F4h */ case    2:  		/* b 12 */
		/* 821DF3F4h case    2:*/		return 0x821DF400;
		/* 821DF3F4h case    2:*/		return 0x821DF3F8;
	}
	return 0x821DF3F8;
} // Block from 821DF3ECh-821DF3F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DF3F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF3F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF3F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF3F8);
		  /* 821DF3F8h */ case    0:  		/* lwz R11, <#[R8 + 20]> */
		/* 821DF3F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000014) );
		/* 821DF3F8h case    0:*/		return 0x821DF3FC;
		  /* 821DF3FCh */ case    1:  		/* addi R10, R8, 16 */
		/* 821DF3FCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0x10);
		/* 821DF3FCh case    1:*/		return 0x821DF400;
	}
	return 0x821DF400;
} // Block from 821DF3F8h-821DF400h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DF400h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF400);
		  /* 821DF400h */ case    0:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821DF400h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821DF400h case    0:*/		return 0x821DF404;
		  /* 821DF404h */ case    1:  		/* addic R9, R9, -1 */
		/* 821DF404h case    1:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821DF404h case    1:*/		return 0x821DF408;
		  /* 821DF408h */ case    2:  		/* subfe R9, R9, R9 */
		/* 821DF408h case    2:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821DF408h case    2:*/		return 0x821DF40C;
		  /* 821DF40Ch */ case    3:  		/* and R11, R9, R11 */
		/* 821DF40Ch case    3:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821DF40Ch case    3:*/		return 0x821DF410;
		  /* 821DF410h */ case    4:  		/* b 112 */
		/* 821DF410h case    4:*/		return 0x821DF480;
		/* 821DF410h case    4:*/		return 0x821DF414;
		  /* 821DF414h */ case    5:  		/* lwz R9, <#[R11 + 8]> */
		/* 821DF414h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821DF414h case    5:*/		return 0x821DF418;
		  /* 821DF418h */ case    6:  		/* rlwinm. R7, R9, 6, 31, 31 */
		/* 821DF418h case    6:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R7,regs.R9);
		/* 821DF418h case    6:*/		return 0x821DF41C;
		  /* 821DF41Ch */ case    7:  		/* bc 12, CR0_EQ, 12 */
		/* 821DF41Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x821DF428;  }
		/* 821DF41Ch case    7:*/		return 0x821DF420;
		  /* 821DF420h */ case    8:  		/* rlwinm R9, R9, 0, 6, 4 */
		/* 821DF420h case    8:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R9,regs.R9);
		/* 821DF420h case    8:*/		return 0x821DF424;
		  /* 821DF424h */ case    9:  		/* stw R9, <#[R11 + 8]> */
		/* 821DF424h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821DF424h case    9:*/		return 0x821DF428;
	}
	return 0x821DF428;
} // Block from 821DF400h-821DF428h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DF428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF428);
		  /* 821DF428h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DF428h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DF428h case    0:*/		return 0x821DF42C;
		  /* 821DF42Ch */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DF42Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DF42Ch case    1:*/		return 0x821DF430;
		  /* 821DF430h */ case    2:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821DF430h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821DF430h case    2:*/		return 0x821DF434;
		  /* 821DF434h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821DF434h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DF440;  }
		/* 821DF434h case    3:*/		return 0x821DF438;
		  /* 821DF438h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821DF438h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DF438h case    4:*/		return 0x821DF43C;
		  /* 821DF43Ch */ case    5:  		/* bc 4, CR6_EQ, -40 */
		/* 821DF43Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821DF414;  }
		/* 821DF43Ch case    5:*/		return 0x821DF440;
	}
	return 0x821DF440;
} // Block from 821DF428h-821DF440h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DF440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF440);
		  /* 821DF440h */ case    0:  		/* addi R7, R8, 32 */
		/* 821DF440h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R8,0x20);
		/* 821DF440h case    0:*/		return 0x821DF444;
		  /* 821DF444h */ case    1:  		/* cmplw CR6, R10, R7 */
		/* 821DF444h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 821DF444h case    1:*/		return 0x821DF448;
		  /* 821DF448h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 821DF448h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DF488;  }
		/* 821DF448h case    2:*/		return 0x821DF44C;
		  /* 821DF44Ch */ case    3:  		/* addi R9, R8, 24 */
		/* 821DF44Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x18);
		/* 821DF44Ch case    3:*/		return 0x821DF450;
		  /* 821DF450h */ case    4:  		/* cmplw CR6, R10, R9 */
		/* 821DF450h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821DF450h case    4:*/		return 0x821DF454;
		  /* 821DF454h */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 821DF454h case    5:*/		if ( regs.CR[6].eq ) { return 0x821DF470;  }
		/* 821DF454h case    5:*/		return 0x821DF458;
		  /* 821DF458h */ case    6:  		/* lwz R11, <#[R8 + 28]> */
		/* 821DF458h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000001C) );
		/* 821DF458h case    6:*/		return 0x821DF45C;
		  /* 821DF45Ch */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DF45Ch case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DF45Ch case    7:*/		return 0x821DF460;
		  /* 821DF460h */ case    8:  		/* bc 4, CR0_EQ, 16 */
		/* 821DF460h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821DF470;  }
		/* 821DF460h case    8:*/		return 0x821DF464;
		  /* 821DF464h */ case    9:  		/* lwz R11, <#[R9 + 4]> */
		/* 821DF464h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821DF464h case    9:*/		return 0x821DF468;
		  /* 821DF468h */ case   10:  		/* mr R10, R9 */
		/* 821DF468h case   10:*/		regs.R10 = regs.R9;
		/* 821DF468h case   10:*/		return 0x821DF46C;
		  /* 821DF46Ch */ case   11:  		/* b 12 */
		/* 821DF46Ch case   11:*/		return 0x821DF478;
		/* 821DF46Ch case   11:*/		return 0x821DF470;
	}
	return 0x821DF470;
} // Block from 821DF440h-821DF470h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821DF470h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF470( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF470) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF470);
		  /* 821DF470h */ case    0:  		/* lwz R11, <#[R7 + 4]> */
		/* 821DF470h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000004) );
		/* 821DF470h case    0:*/		return 0x821DF474;
		  /* 821DF474h */ case    1:  		/* mr R10, R7 */
		/* 821DF474h case    1:*/		regs.R10 = regs.R7;
		/* 821DF474h case    1:*/		return 0x821DF478;
	}
	return 0x821DF478;
} // Block from 821DF470h-821DF478h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DF478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF478);
		  /* 821DF478h */ case    0:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821DF478h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821DF478h case    0:*/		return 0x821DF47C;
		  /* 821DF47Ch */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821DF47Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821DF488;  }
		/* 821DF47Ch case    1:*/		return 0x821DF480;
	}
	return 0x821DF480;
} // Block from 821DF478h-821DF480h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DF480h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF480( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF480) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF480);
		  /* 821DF480h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821DF480h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DF480h case    0:*/		return 0x821DF484;
		  /* 821DF484h */ case    1:  		/* bc 4, CR6_EQ, -112 */
		/* 821DF484h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DF414;  }
		/* 821DF484h case    1:*/		return 0x821DF488;
	}
	return 0x821DF488;
} // Block from 821DF480h-821DF488h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DF488h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF488);
		  /* 821DF488h */ case    0:  		/* rlwinm R11, R8, 0, 0, 30 */
		/* 821DF488h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R8);
		/* 821DF488h case    0:*/		return 0x821DF48C;
		  /* 821DF48Ch */ case    1:  		/* lwz R8, <#[R11 + 4]> */
		/* 821DF48Ch case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821DF48Ch case    1:*/		return 0x821DF490;
		  /* 821DF490h */ case    2:  		/* rlwinm. R11, R8, 0, 31, 31 */
		/* 821DF490h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R8);
		/* 821DF490h case    2:*/		return 0x821DF494;
		  /* 821DF494h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821DF494h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DF4A0;  }
		/* 821DF494h case    3:*/		return 0x821DF498;
		  /* 821DF498h */ case    4:  		/* cmplwi CR6, R8, 0 */
		/* 821DF498h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821DF498h case    4:*/		return 0x821DF49C;
		  /* 821DF49Ch */ case    5:  		/* bc 4, CR6_EQ, -212 */
		/* 821DF49Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x821DF3C8;  }
		/* 821DF49Ch case    5:*/		return 0x821DF4A0;
	}
	return 0x821DF4A0;
} // Block from 821DF488h-821DF4A0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DF4A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF4A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF4A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF4A0);
		  /* 821DF4A0h */ case    0:  		/* lwz R10, <#[R20 + 336]> */
		/* 821DF4A0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000150) );
		/* 821DF4A0h case    0:*/		return 0x821DF4A4;
		  /* 821DF4A4h */ case    1:  		/* li R11, 0 */
		/* 821DF4A4h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DF4A4h case    1:*/		return 0x821DF4A8;
		  /* 821DF4A8h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821DF4A8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DF4A8h case    2:*/		return 0x821DF4AC;
		  /* 821DF4ACh */ case    3:  		/* bc 4, CR6_GT, 72 */
		/* 821DF4ACh case    3:*/		if ( !regs.CR[6].gt ) { return 0x821DF4F4;  }
		/* 821DF4ACh case    3:*/		return 0x821DF4B0;
		  /* 821DF4B0h */ case    4:  		/* addi R10, R20, 128 */
		/* 821DF4B0h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R20,0x80);
		/* 821DF4B0h case    4:*/		return 0x821DF4B4;
		  /* 821DF4B4h */ case    5:  		/* lwz R9, <#[R10]> */
		/* 821DF4B4h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DF4B4h case    5:*/		return 0x821DF4B8;
		  /* 821DF4B8h */ case    6:  		/* rlwinm R9, R9, 0, 0, 27 */
		/* 821DF4B8h case    6:*/		cpu::op::rlwinm<0,0,0,27>(regs,&regs.R9,regs.R9);
		/* 821DF4B8h case    6:*/		return 0x821DF4BC;
		  /* 821DF4BCh */ case    7:  		/* cmplwi CR6, R9, 992 */
		/* 821DF4BCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x000003E0);
		/* 821DF4BCh case    7:*/		return 0x821DF4C0;
		  /* 821DF4C0h */ case    8:  		/* bc 12, CR6_EQ, 28 */
		/* 821DF4C0h case    8:*/		if ( regs.CR[6].eq ) { return 0x821DF4DC;  }
		/* 821DF4C0h case    8:*/		return 0x821DF4C4;
		  /* 821DF4C4h */ case    9:  		/* lwz R9, <#[R20 + 336]> */
		/* 821DF4C4h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R20 + 0x00000150) );
		/* 821DF4C4h case    9:*/		return 0x821DF4C8;
		  /* 821DF4C8h */ case   10:  		/* addi R11, R11, 1 */
		/* 821DF4C8h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821DF4C8h case   10:*/		return 0x821DF4CC;
		  /* 821DF4CCh */ case   11:  		/* addi R10, R10, 12 */
		/* 821DF4CCh case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xC);
		/* 821DF4CCh case   11:*/		return 0x821DF4D0;
		  /* 821DF4D0h */ case   12:  		/* cmplw CR6, R11, R9 */
		/* 821DF4D0h case   12:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821DF4D0h case   12:*/		return 0x821DF4D4;
		  /* 821DF4D4h */ case   13:  		/* bc 12, CR6_LT, -32 */
		/* 821DF4D4h case   13:*/		if ( regs.CR[6].lt ) { return 0x821DF4B4;  }
		/* 821DF4D4h case   13:*/		return 0x821DF4D8;
		  /* 821DF4D8h */ case   14:  		/* b 28 */
		/* 821DF4D8h case   14:*/		return 0x821DF4F4;
		/* 821DF4D8h case   14:*/		return 0x821DF4DC;
	}
	return 0x821DF4DC;
} // Block from 821DF4A0h-821DF4DCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 821DF4DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF4DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF4DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF4DC);
		  /* 821DF4DCh */ case    0:  		/* mulli R11, R11, 12 */
		/* 821DF4DCh case    0:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 821DF4DCh case    0:*/		return 0x821DF4E0;
		  /* 821DF4E0h */ case    1:  		/* add R11, R11, R20 */
		/* 821DF4E0h case    1:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R20);
		/* 821DF4E0h case    1:*/		return 0x821DF4E4;
		  /* 821DF4E4h */ case    2:  		/* addi R10, R11, 124 */
		/* 821DF4E4h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x7C);
		/* 821DF4E4h case    2:*/		return 0x821DF4E8;
		  /* 821DF4E8h */ case    3:  		/* lwz R10, <#[R11 + 124]> */
		/* 821DF4E8h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000007C) );
		/* 821DF4E8h case    3:*/		return 0x821DF4EC;
		  /* 821DF4ECh */ case    4:  		/* rlwinm R10, R10, 0, 14, 12 */
		/* 821DF4ECh case    4:*/		cpu::op::rlwinm<0,0,14,12>(regs,&regs.R10,regs.R10);
		/* 821DF4ECh case    4:*/		return 0x821DF4F0;
		  /* 821DF4F0h */ case    5:  		/* stw R10, <#[R11 + 124]> */
		/* 821DF4F0h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x0000007C) );
		/* 821DF4F0h case    5:*/		return 0x821DF4F4;
	}
	return 0x821DF4F4;
} // Block from 821DF4DCh-821DF4F4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DF4F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF4F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF4F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF4F4);
		  /* 821DF4F4h */ case    0:  		/* lis R11, -32256 */
		/* 821DF4F4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821DF4F4h case    0:*/		return 0x821DF4F8;
		  /* 821DF4F8h */ case    1:  		/* lfs FR31, <#[R11 + 1816]> */
		/* 821DF4F8h case    1:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000718) );
		/* 821DF4F8h case    1:*/		return 0x821DF4FC;
		  /* 821DF4FCh */ case    2:  		/* lwz R11, <#[R20 + 4]> */
		/* 821DF4FCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821DF4FCh case    2:*/		return 0x821DF500;
		  /* 821DF500h */ case    3:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821DF500h case    3:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF500h case    3:*/		return 0x821DF504;
		  /* 821DF504h */ case    4:  		/* addic R10, R10, -1 */
		/* 821DF504h case    4:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821DF504h case    4:*/		return 0x821DF508;
		  /* 821DF508h */ case    5:  		/* subfe R10, R10, R10 */
		/* 821DF508h case    5:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821DF508h case    5:*/		return 0x821DF50C;
		  /* 821DF50Ch */ case    6:  		/* and R18, R10, R11 */
		/* 821DF50Ch case    6:*/		cpu::op::and<0>(regs,&regs.R18,regs.R10,regs.R11);
		/* 821DF50Ch case    6:*/		return 0x821DF510;
		  /* 821DF510h */ case    7:  		/* cmplwi CR6, R18, 0 */
		/* 821DF510h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 821DF510h case    7:*/		return 0x821DF514;
		  /* 821DF514h */ case    8:  		/* bc 12, CR6_EQ, 2552 */
		/* 821DF514h case    8:*/		if ( regs.CR[6].eq ) { return 0x821DFF0C;  }
		/* 821DF514h case    8:*/		return 0x821DF518;
		  /* 821DF518h */ case    9:  		/* lwz R11, <#[R18 + 40]> */
		/* 821DF518h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000028) );
		/* 821DF518h case    9:*/		return 0x821DF51C;
		  /* 821DF51Ch */ case   10:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DF51Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DF51Ch case   10:*/		return 0x821DF520;
		  /* 821DF520h */ case   11:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DF520h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DF520h case   11:*/		return 0x821DF524;
		  /* 821DF524h */ case   12:  		/* bc 4, CR0_EQ, 300 */
		/* 821DF524h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821DF650;  }
		/* 821DF524h case   12:*/		return 0x821DF528;
		  /* 821DF528h */ case   13:  		/* lwz R10, <#[R18 + 8]> */
		/* 821DF528h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x00000008) );
		/* 821DF528h case   13:*/		return 0x821DF52C;
		  /* 821DF52Ch */ case   14:  		/* addi R29, R18, 8 */
		/* 821DF52Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R18,0x8);
		/* 821DF52Ch case   14:*/		return 0x821DF530;
		  /* 821DF530h */ case   15:  		/* cmplwi CR6, R10, 0 */
		/* 821DF530h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DF530h case   15:*/		return 0x821DF534;
		  /* 821DF534h */ case   16:  		/* bc 12, CR6_EQ, 20 */
		/* 821DF534h case   16:*/		if ( regs.CR[6].eq ) { return 0x821DF548;  }
		/* 821DF534h case   16:*/		return 0x821DF538;
		  /* 821DF538h */ case   17:  		/* lwz R11, <#[R10 + 12]> */
		/* 821DF538h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 821DF538h case   17:*/		return 0x821DF53C;
		  /* 821DF53Ch */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 821DF53Ch case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DF53Ch case   18:*/		return 0x821DF540;
		  /* 821DF540h */ case   19:  		/* li R11, 1 */
		/* 821DF540h case   19:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821DF540h case   19:*/		return 0x821DF544;
		  /* 821DF544h */ case   20:  		/* bc 4, CR6_EQ, 8 */
		/* 821DF544h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821DF54C;  }
		/* 821DF544h case   20:*/		return 0x821DF548;
	}
	return 0x821DF548;
} // Block from 821DF4F4h-821DF548h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821DF548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF548);
		  /* 821DF548h */ case    0:  		/* li R11, 0 */
		/* 821DF548h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DF548h case    0:*/		return 0x821DF54C;
	}
	return 0x821DF54C;
} // Block from 821DF548h-821DF54Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DF54Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF54C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF54C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF54C);
		  /* 821DF54Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DF54Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DF54Ch case    0:*/		return 0x821DF550;
		  /* 821DF550h */ case    1:  		/* bc 4, CR0_EQ, 36 */
		/* 821DF550h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821DF574;  }
		/* 821DF550h case    1:*/		return 0x821DF554;
		  /* 821DF554h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821DF554h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DF554h case    2:*/		return 0x821DF558;
		  /* 821DF558h */ case    3:  		/* bc 12, CR6_EQ, 28 */
		/* 821DF558h case    3:*/		if ( regs.CR[6].eq ) { return 0x821DF574;  }
		/* 821DF558h case    3:*/		return 0x821DF55C;
		  /* 821DF55Ch */ case    4:  		/* lwz R11, <#[R10 + 4]> */
		/* 821DF55Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821DF55Ch case    4:*/		return 0x821DF560;
		  /* 821DF560h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DF560h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DF560h case    5:*/		return 0x821DF564;
		  /* 821DF564h */ case    6:  		/* bc 12, CR6_EQ, 16 */
		/* 821DF564h case    6:*/		if ( regs.CR[6].eq ) { return 0x821DF574;  }
		/* 821DF564h case    6:*/		return 0x821DF568;
		  /* 821DF568h */ case    7:  		/* lwz R11, <#[R11 + 68]> */
		/* 821DF568h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000044) );
		/* 821DF568h case    7:*/		return 0x821DF56C;
		  /* 821DF56Ch */ case    8:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 821DF56Ch case    8:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 821DF56Ch case    8:*/		return 0x821DF570;
		  /* 821DF570h */ case    9:  		/* bc 4, CR0_EQ, 224 */
		/* 821DF570h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821DF650;  }
		/* 821DF570h case    9:*/		return 0x821DF574;
	}
	return 0x821DF574;
} // Block from 821DF54Ch-821DF574h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DF574h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF574( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF574) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF574);
		  /* 821DF574h */ case    0:  		/* lwz R11, <#[R18 + 36]> */
		/* 821DF574h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000024) );
		/* 821DF574h case    0:*/		return 0x821DF578;
		  /* 821DF578h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DF578h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF578h case    1:*/		return 0x821DF57C;
		  /* 821DF57Ch */ case    2:  		/* bc 4, CR0_EQ, 212 */
		/* 821DF57Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821DF650;  }
		/* 821DF57Ch case    2:*/		return 0x821DF580;
		  /* 821DF580h */ case    3:  		/* mr R7, R11 */
		/* 821DF580h case    3:*/		regs.R7 = regs.R11;
		/* 821DF580h case    3:*/		return 0x821DF584;
		  /* 821DF584h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821DF584h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DF584h case    4:*/		return 0x821DF588;
		  /* 821DF588h */ case    5:  		/* bc 12, CR0_EQ, 200 */
		/* 821DF588h case    5:*/		if ( regs.CR[0].eq ) { return 0x821DF650;  }
		/* 821DF588h case    5:*/		return 0x821DF58C;
		  /* 821DF58Ch */ case    6:  		/* lwz R19, <#[R7]> */
		/* 821DF58Ch case    6:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R7 + 0x00000000) );
		/* 821DF58Ch case    6:*/		return 0x821DF590;
		  /* 821DF590h */ case    7:  		/* cmplwi CR6, R19, 0 */
		/* 821DF590h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821DF590h case    7:*/		return 0x821DF594;
		  /* 821DF594h */ case    8:  		/* bc 12, CR6_EQ, 160 */
		/* 821DF594h case    8:*/		if ( regs.CR[6].eq ) { return 0x821DF634;  }
		/* 821DF594h case    8:*/		return 0x821DF598;
		  /* 821DF598h */ case    9:  		/* lwz R10, <#[R19]> */
		/* 821DF598h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x00000000) );
		/* 821DF598h case    9:*/		return 0x821DF59C;
		  /* 821DF59Ch */ case   10:  		/* rlwinm. R11, R10, 0, 4, 6 */
		/* 821DF59Ch case   10:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R10);
		/* 821DF59Ch case   10:*/		return 0x821DF5A0;
		  /* 821DF5A0h */ case   11:  		/* bc 12, CR0_EQ, 24 */
		/* 821DF5A0h case   11:*/		if ( regs.CR[0].eq ) { return 0x821DF5B8;  }
		/* 821DF5A0h case   11:*/		return 0x821DF5A4;
		  /* 821DF5A4h */ case   12:  		/* lwz R11, <#[R19 + 12]> */
		/* 821DF5A4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x0000000C) );
		/* 821DF5A4h case   12:*/		return 0x821DF5A8;
		  /* 821DF5A8h */ case   13:  		/* lwz R11, <#[R11 + 8]> */
		/* 821DF5A8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821DF5A8h case   13:*/		return 0x821DF5AC;
		  /* 821DF5ACh */ case   14:  		/* rlwinm. R11, R11, 27, 31, 31 */
		/* 821DF5ACh case   14:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R11,regs.R11);
		/* 821DF5ACh case   14:*/		return 0x821DF5B0;
		  /* 821DF5B0h */ case   15:  		/* li R11, 1 */
		/* 821DF5B0h case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821DF5B0h case   15:*/		return 0x821DF5B4;
		  /* 821DF5B4h */ case   16:  		/* bc 4, CR0_EQ, 8 */
		/* 821DF5B4h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821DF5BC;  }
		/* 821DF5B4h case   16:*/		return 0x821DF5B8;
	}
	return 0x821DF5B8;
} // Block from 821DF574h-821DF5B8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821DF5B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF5B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF5B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF5B8);
		  /* 821DF5B8h */ case    0:  		/* li R11, 0 */
		/* 821DF5B8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DF5B8h case    0:*/		return 0x821DF5BC;
	}
	return 0x821DF5BC;
} // Block from 821DF5B8h-821DF5BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DF5BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF5BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF5BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF5BC);
		  /* 821DF5BCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DF5BCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DF5BCh case    0:*/		return 0x821DF5C0;
		  /* 821DF5C0h */ case    1:  		/* bc 12, CR0_EQ, 108 */
		/* 821DF5C0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DF62C;  }
		/* 821DF5C0h case    1:*/		return 0x821DF5C4;
		  /* 821DF5C4h */ case    2:  		/* lwz R21, <#[R19 + 12]> */
		/* 821DF5C4h case    2:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R19 + 0x0000000C) );
		/* 821DF5C4h case    2:*/		return 0x821DF5C8;
		  /* 821DF5C8h */ case    3:  		/* lwz R11, <#[R21 + 20]> */
		/* 821DF5C8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000014) );
		/* 821DF5C8h case    3:*/		return 0x821DF5CC;
		  /* 821DF5CCh */ case    4:  		/* rlwinm. R11, R11, 0, 30, 30 */
		/* 821DF5CCh case    4:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R11);
		/* 821DF5CCh case    4:*/		return 0x821DF5D0;
	}
	return 0x821DF5D0;
} // Block from 821DF5BCh-821DF5D0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DF5D0h
// Function '?RelocateAssertBlocks@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF5D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF5D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF5D0);
		  /* 821DF5D0h */ case    0:  		/* bc 4, CR0_EQ, 92 */
		/* 821DF5D0h case    0:*/		if ( !regs.CR[0].eq ) { return 0x821DF62C;  }
		/* 821DF5D0h case    0:*/		return 0x821DF5D4;
		  /* 821DF5D4h */ case    1:  		/* lwz R9, <#[R20 + 336]> */
		/* 821DF5D4h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R20 + 0x00000150) );
		/* 821DF5D4h case    1:*/		return 0x821DF5D8;
		  /* 821DF5D8h */ case    2:  		/* rlwinm R8, R10, 15, 24, 31 */
		/* 821DF5D8h case    2:*/		cpu::op::rlwinm<0,15,24,31>(regs,&regs.R8,regs.R10);
		/* 821DF5D8h case    2:*/		return 0x821DF5DC;
		  /* 821DF5DCh */ case    3:  		/* li R11, 0 */
		/* 821DF5DCh case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DF5DCh case    3:*/		return 0x821DF5E0;
		  /* 821DF5E0h */ case    4:  		/* cmplwi CR6, R9, 0 */
		/* 821DF5E0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821DF5E0h case    4:*/		return 0x821DF5E4;
		  /* 821DF5E4h */ case    5:  		/* bc 12, CR6_EQ, 44 */
		/* 821DF5E4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821DF610;  }
		/* 821DF5E4h case    5:*/		return 0x821DF5E8;
		  /* 821DF5E8h */ case    6:  		/* addi R10, R20, 128 */
		/* 821DF5E8h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R20,0x80);
		/* 821DF5E8h case    6:*/		return 0x821DF5EC;
		  /* 821DF5ECh */ case    7:  		/* lwz R6, <#[R10]> */
		/* 821DF5ECh case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 821DF5ECh case    7:*/		return 0x821DF5F0;
		  /* 821DF5F0h */ case    8:  		/* rlwinm R6, R6, 28, 4, 31 */
		/* 821DF5F0h case    8:*/		cpu::op::rlwinm<0,28,4,31>(regs,&regs.R6,regs.R6);
		/* 821DF5F0h case    8:*/		return 0x821DF5F4;
		  /* 821DF5F4h */ case    9:  		/* cmplw CR6, R6, R8 */
		/* 821DF5F4h case    9:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R8);
		/* 821DF5F4h case    9:*/		return 0x821DF5F8;
		  /* 821DF5F8h */ case   10:  		/* bc 12, CR6_EQ, 24 */
		/* 821DF5F8h case   10:*/		if ( regs.CR[6].eq ) { return 0x821DF610;  }
		/* 821DF5F8h case   10:*/		return 0x821DF5FC;
		  /* 821DF5FCh */ case   11:  		/* lwz R6, <#[R20 + 336]> */
		/* 821DF5FCh case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R20 + 0x00000150) );
		/* 821DF5FCh case   11:*/		return 0x821DF600;
		  /* 821DF600h */ case   12:  		/* addi R11, R11, 1 */
		/* 821DF600h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821DF600h case   12:*/		return 0x821DF604;
		  /* 821DF604h */ case   13:  		/* addi R10, R10, 12 */
		/* 821DF604h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xC);
		/* 821DF604h case   13:*/		return 0x821DF608;
		  /* 821DF608h */ case   14:  		/* cmplw CR6, R11, R6 */
		/* 821DF608h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R6);
		/* 821DF608h case   14:*/		return 0x821DF60C;
		  /* 821DF60Ch */ case   15:  		/* bc 12, CR6_LT, -32 */
		/* 821DF60Ch case   15:*/		if ( regs.CR[6].lt ) { return 0x821DF5EC;  }
		/* 821DF60Ch case   15:*/		return 0x821DF610;
	}
	return 0x821DF610;
} // Block from 821DF5D0h-821DF610h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821DF610h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF610( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF610) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF610);
		  /* 821DF610h */ case    0:  		/* cmplw CR6, R11, R9 */
		/* 821DF610h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821DF610h case    0:*/		return 0x821DF614;
		  /* 821DF614h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821DF614h case    1:*/		if ( regs.CR[6].eq ) { return 0x821DF62C;  }
		/* 821DF614h case    1:*/		return 0x821DF618;
		  /* 821DF618h */ case    2:  		/* mulli R11, R11, 12 */
		/* 821DF618h case    2:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0xC);
		/* 821DF618h case    2:*/		return 0x821DF61C;
		  /* 821DF61Ch */ case    3:  		/* add R11, R11, R20 */
		/* 821DF61Ch case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R20);
		/* 821DF61Ch case    3:*/		return 0x821DF620;
		  /* 821DF620h */ case    4:  		/* lwz R11, <#[R11 + 124]> */
		/* 821DF620h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000007C) );
		/* 821DF620h case    4:*/		return 0x821DF624;
		  /* 821DF624h */ case    5:  		/* rlwinm. R11, R11, 0, 13, 13 */
		/* 821DF624h case    5:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R11,regs.R11);
		/* 821DF624h case    5:*/		return 0x821DF628;
		  /* 821DF628h */ case    6:  		/* bc 4, CR0_EQ, 52 */
		/* 821DF628h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821DF65C;  }
		/* 821DF628h case    6:*/		return 0x821DF62C;
	}
	return 0x821DF62C;
} // Block from 821DF610h-821DF62Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DF62Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF62C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF62C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF62C);
		  /* 821DF62Ch */ case    0:  		/* lwz R19, <#[R19 + 4]> */
		/* 821DF62Ch case    0:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R19 + 0x00000004) );
		/* 821DF62Ch case    0:*/		return 0x821DF630;
		  /* 821DF630h */ case    1:  		/* b -160 */
		/* 821DF630h case    1:*/		return 0x821DF590;
		/* 821DF630h case    1:*/		return 0x821DF634;
	}
	return 0x821DF634;
} // Block from 821DF62Ch-821DF634h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DF634h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF634( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF634) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF634);
		  /* 821DF634h */ case    0:  		/* rlwinm R11, R7, 0, 0, 30 */
		/* 821DF634h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R7);
		/* 821DF634h case    0:*/		return 0x821DF638;
		  /* 821DF638h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DF638h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DF638h case    1:*/		return 0x821DF63C;
		  /* 821DF63Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DF63Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF63Ch case    2:*/		return 0x821DF640;
		  /* 821DF640h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DF640h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DF650;  }
		/* 821DF640h case    3:*/		return 0x821DF644;
		  /* 821DF644h */ case    4:  		/* mr R7, R11 */
		/* 821DF644h case    4:*/		regs.R7 = regs.R11;
		/* 821DF644h case    4:*/		return 0x821DF648;
		  /* 821DF648h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DF648h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DF648h case    5:*/		return 0x821DF64C;
		  /* 821DF64Ch */ case    6:  		/* bc 4, CR6_EQ, -192 */
		/* 821DF64Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DF58C;  }
		/* 821DF64Ch case    6:*/		return 0x821DF650;
	}
	return 0x821DF650;
} // Block from 821DF634h-821DF650h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DF650h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF650( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF650) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF650);
		  /* 821DF650h */ case    0:  		/* rlwinm R11, R18, 0, 0, 30 */
		/* 821DF650h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R18);
		/* 821DF650h case    0:*/		return 0x821DF654;
		  /* 821DF654h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DF654h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DF654h case    1:*/		return 0x821DF658;
		  /* 821DF658h */ case    2:  		/* b -344 */
		/* 821DF658h case    2:*/		return 0x821DF500;
		/* 821DF658h case    2:*/		return 0x821DF65C;
	}
	return 0x821DF65C;
} // Block from 821DF650h-821DF65Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DF65Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF65C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF65C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF65C);
		  /* 821DF65Ch */ case    0:  		/* li R5, 1 */
		/* 821DF65Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821DF65Ch case    0:*/		return 0x821DF660;
		  /* 821DF660h */ case    1:  		/* mr R4, R19 */
		/* 821DF660h case    1:*/		regs.R4 = regs.R19;
		/* 821DF660h case    1:*/		return 0x821DF664;
		  /* 821DF664h */ case    2:  		/* mr R3, R20 */
		/* 821DF664h case    2:*/		regs.R3 = regs.R20;
		/* 821DF664h case    2:*/		return 0x821DF668;
		  /* 821DF668h */ case    3:  		/* bl 321280 */
		/* 821DF668h case    3:*/		regs.LR = 0x821DF66C; return 0x8222DD68;
		/* 821DF668h case    3:*/		return 0x821DF66C;
		  /* 821DF66Ch */ case    4:  		/* lwz R11, <#[R20 + 4]> */
		/* 821DF66Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821DF66Ch case    4:*/		return 0x821DF670;
		  /* 821DF670h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DF670h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF670h case    5:*/		return 0x821DF674;
		  /* 821DF674h */ case    6:  		/* bc 4, CR0_EQ, 156 */
		/* 821DF674h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821DF710;  }
		/* 821DF674h case    6:*/		return 0x821DF678;
		  /* 821DF678h */ case    7:  		/* mr R30, R11 */
		/* 821DF678h case    7:*/		regs.R30 = regs.R11;
		/* 821DF678h case    7:*/		return 0x821DF67C;
		  /* 821DF67Ch */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 821DF67Ch case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DF67Ch case    8:*/		return 0x821DF680;
		  /* 821DF680h */ case    9:  		/* bc 12, CR0_EQ, 144 */
		/* 821DF680h case    9:*/		if ( regs.CR[0].eq ) { return 0x821DF710;  }
		/* 821DF680h case    9:*/		return 0x821DF684;
		  /* 821DF684h */ case   10:  		/* lwz R11, <#[R30 + 36]> */
		/* 821DF684h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821DF684h case   10:*/		return 0x821DF688;
		  /* 821DF688h */ case   11:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DF688h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF688h case   11:*/		return 0x821DF68C;
		  /* 821DF68Ch */ case   12:  		/* bc 4, CR0_EQ, 104 */
		/* 821DF68Ch case   12:*/		if ( !regs.CR[0].eq ) { return 0x821DF6F4;  }
		/* 821DF68Ch case   12:*/		return 0x821DF690;
		  /* 821DF690h */ case   13:  		/* mr R31, R11 */
		/* 821DF690h case   13:*/		regs.R31 = regs.R11;
		/* 821DF690h case   13:*/		return 0x821DF694;
		  /* 821DF694h */ case   14:  		/* cmplwi CR0, R11, 0 */
		/* 821DF694h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DF694h case   14:*/		return 0x821DF698;
		  /* 821DF698h */ case   15:  		/* bc 12, CR0_EQ, 92 */
		/* 821DF698h case   15:*/		if ( regs.CR[0].eq ) { return 0x821DF6F4;  }
		/* 821DF698h case   15:*/		return 0x821DF69C;
		  /* 821DF69Ch */ case   16:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DF69Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DF69Ch case   16:*/		return 0x821DF6A0;
		  /* 821DF6A0h */ case   17:  		/* rlwinm. R10, R11, 6, 31, 31 */
		/* 821DF6A0h case   17:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF6A0h case   17:*/		return 0x821DF6A4;
		  /* 821DF6A4h */ case   18:  		/* bc 12, CR0_EQ, 52 */
		/* 821DF6A4h case   18:*/		if ( regs.CR[0].eq ) { return 0x821DF6D8;  }
		/* 821DF6A4h case   18:*/		return 0x821DF6A8;
		  /* 821DF6A8h */ case   19:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821DF6A8h case   19:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821DF6A8h case   19:*/		return 0x821DF6AC;
		  /* 821DF6ACh */ case   20:  		/* cmplwi CR6, R11, 86 */
		/* 821DF6ACh case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 821DF6ACh case   20:*/		return 0x821DF6B0;
		  /* 821DF6B0h */ case   21:  		/* bc 12, CR6_EQ, 16 */
		/* 821DF6B0h case   21:*/		if ( regs.CR[6].eq ) { return 0x821DF6C0;  }
		/* 821DF6B0h case   21:*/		return 0x821DF6B4;
		  /* 821DF6B4h */ case   22:  		/* cmplwi CR6, R11, 87 */
		/* 821DF6B4h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 821DF6B4h case   22:*/		return 0x821DF6B8;
		  /* 821DF6B8h */ case   23:  		/* li R11, 0 */
		/* 821DF6B8h case   23:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DF6B8h case   23:*/		return 0x821DF6BC;
		  /* 821DF6BCh */ case   24:  		/* bc 4, CR6_EQ, 8 */
		/* 821DF6BCh case   24:*/		if ( !regs.CR[6].eq ) { return 0x821DF6C4;  }
		/* 821DF6BCh case   24:*/		return 0x821DF6C0;
	}
	return 0x821DF6C0;
} // Block from 821DF65Ch-821DF6C0h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821DF6C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF6C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF6C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF6C0);
		  /* 821DF6C0h */ case    0:  		/* li R11, 1 */
		/* 821DF6C0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821DF6C0h case    0:*/		return 0x821DF6C4;
	}
	return 0x821DF6C4;
} // Block from 821DF6C0h-821DF6C4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DF6C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF6C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF6C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF6C4);
		  /* 821DF6C4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DF6C4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DF6C4h case    0:*/		return 0x821DF6C8;
		  /* 821DF6C8h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821DF6C8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DF6D8;  }
		/* 821DF6C8h case    1:*/		return 0x821DF6CC;
		  /* 821DF6CCh */ case    2:  		/* mr R4, R31 */
		/* 821DF6CCh case    2:*/		regs.R4 = regs.R31;
		/* 821DF6CCh case    2:*/		return 0x821DF6D0;
		  /* 821DF6D0h */ case    3:  		/* mr R3, R20 */
		/* 821DF6D0h case    3:*/		regs.R3 = regs.R20;
		/* 821DF6D0h case    3:*/		return 0x821DF6D4;
		  /* 821DF6D4h */ case    4:  		/* bl -137556 */
		/* 821DF6D4h case    4:*/		regs.LR = 0x821DF6D8; return 0x821BDD80;
		/* 821DF6D4h case    4:*/		return 0x821DF6D8;
	}
	return 0x821DF6D8;
} // Block from 821DF6C4h-821DF6D8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DF6D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF6D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF6D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF6D8);
		  /* 821DF6D8h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821DF6D8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821DF6D8h case    0:*/		return 0x821DF6DC;
		  /* 821DF6DCh */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DF6DCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DF6DCh case    1:*/		return 0x821DF6E0;
		  /* 821DF6E0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DF6E0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF6E0h case    2:*/		return 0x821DF6E4;
		  /* 821DF6E4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DF6E4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DF6F4;  }
		/* 821DF6E4h case    3:*/		return 0x821DF6E8;
		  /* 821DF6E8h */ case    4:  		/* mr R31, R11 */
		/* 821DF6E8h case    4:*/		regs.R31 = regs.R11;
		/* 821DF6E8h case    4:*/		return 0x821DF6EC;
		  /* 821DF6ECh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DF6ECh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DF6ECh case    5:*/		return 0x821DF6F0;
		  /* 821DF6F0h */ case    6:  		/* bc 4, CR6_EQ, -84 */
		/* 821DF6F0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DF69C;  }
		/* 821DF6F0h case    6:*/		return 0x821DF6F4;
	}
	return 0x821DF6F4;
} // Block from 821DF6D8h-821DF6F4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DF6F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF6F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF6F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF6F4);
		  /* 821DF6F4h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821DF6F4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821DF6F4h case    0:*/		return 0x821DF6F8;
		  /* 821DF6F8h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DF6F8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DF6F8h case    1:*/		return 0x821DF6FC;
		  /* 821DF6FCh */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DF6FCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF6FCh case    2:*/		return 0x821DF700;
		  /* 821DF700h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DF700h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DF710;  }
		/* 821DF700h case    3:*/		return 0x821DF704;
		  /* 821DF704h */ case    4:  		/* mr R30, R11 */
		/* 821DF704h case    4:*/		regs.R30 = regs.R11;
		/* 821DF704h case    4:*/		return 0x821DF708;
		  /* 821DF708h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DF708h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DF708h case    5:*/		return 0x821DF70C;
		  /* 821DF70Ch */ case    6:  		/* bc 4, CR6_EQ, -136 */
		/* 821DF70Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DF684;  }
		/* 821DF70Ch case    6:*/		return 0x821DF710;
	}
	return 0x821DF710;
} // Block from 821DF6F4h-821DF710h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DF710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF710);
		  /* 821DF710h */ case    0:  		/* addi R11, R1, 88 */
		/* 821DF710h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x58);
		/* 821DF710h case    0:*/		return 0x821DF714;
		  /* 821DF714h */ case    1:  		/* lwz R22, <#[R20 + 92]> */
		/* 821DF714h case    1:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R20 + 0x0000005C) );
		/* 821DF714h case    1:*/		return 0x821DF718;
		  /* 821DF718h */ case    2:  		/* addi R10, R1, 92 */
		/* 821DF718h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x5C);
		/* 821DF718h case    2:*/		return 0x821DF71C;
		  /* 821DF71Ch */ case    3:  		/* ori R11, R11, 1 */
		/* 821DF71Ch case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821DF71Ch case    3:*/		return 0x821DF720;
		  /* 821DF720h */ case    4:  		/* ori R10, R10, 1 */
		/* 821DF720h case    4:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821DF720h case    4:*/		return 0x821DF724;
		  /* 821DF724h */ case    5:  		/* stw R11, <#[R1 + 92]> */
		/* 821DF724h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821DF724h case    5:*/		return 0x821DF728;
		  /* 821DF728h */ case    6:  		/* addi R9, R1, 80 */
		/* 821DF728h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 821DF728h case    6:*/		return 0x821DF72C;
		  /* 821DF72Ch */ case    7:  		/* stw R10, <#[R1 + 88]> */
		/* 821DF72Ch case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 821DF72Ch case    7:*/		return 0x821DF730;
		  /* 821DF730h */ case    8:  		/* addi R8, R1, 84 */
		/* 821DF730h case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x54);
		/* 821DF730h case    8:*/		return 0x821DF734;
		  /* 821DF734h */ case    9:  		/* addi R7, R1, 88 */
		/* 821DF734h case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x58);
		/* 821DF734h case    9:*/		return 0x821DF738;
		  /* 821DF738h */ case   10:  		/* li R6, 0 */
		/* 821DF738h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821DF738h case   10:*/		return 0x821DF73C;
		  /* 821DF73Ch */ case   11:  		/* li R5, 1 */
		/* 821DF73Ch case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821DF73Ch case   11:*/		return 0x821DF740;
		  /* 821DF740h */ case   12:  		/* mr R4, R18 */
		/* 821DF740h case   12:*/		regs.R4 = regs.R18;
		/* 821DF740h case   12:*/		return 0x821DF744;
		  /* 821DF744h */ case   13:  		/* mr R3, R20 */
		/* 821DF744h case   13:*/		regs.R3 = regs.R20;
		/* 821DF744h case   13:*/		return 0x821DF748;
		  /* 821DF748h */ case   14:  		/* bl -86992 */
		/* 821DF748h case   14:*/		regs.LR = 0x821DF74C; return 0x821CA378;
		/* 821DF748h case   14:*/		return 0x821DF74C;
		  /* 821DF74Ch */ case   15:  		/* rlwinm R11, R18, 0, 0, 30 */
		/* 821DF74Ch case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R18);
		/* 821DF74Ch case   15:*/		return 0x821DF750;
		  /* 821DF750h */ case   16:  		/* lwz R11, <#[R11]> */
		/* 821DF750h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821DF750h case   16:*/		return 0x821DF754;
		  /* 821DF754h */ case   17:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DF754h case   17:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF754h case   17:*/		return 0x821DF758;
		  /* 821DF758h */ case   18:  		/* bc 12, CR0_EQ, 12 */
		/* 821DF758h case   18:*/		if ( regs.CR[0].eq ) { return 0x821DF764;  }
		/* 821DF758h case   18:*/		return 0x821DF75C;
		  /* 821DF75Ch */ case   19:  		/* li R3, 0 */
		/* 821DF75Ch case   19:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821DF75Ch case   19:*/		return 0x821DF760;
		  /* 821DF760h */ case   20:  		/* b 12 */
		/* 821DF760h case   20:*/		return 0x821DF76C;
		/* 821DF760h case   20:*/		return 0x821DF764;
	}
	return 0x821DF764;
} // Block from 821DF710h-821DF764h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821DF764h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF764( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF764) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF764);
		  /* 821DF764h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DF764h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DF764h case    0:*/		return 0x821DF768;
		  /* 821DF768h */ case    1:  		/* addi R3, R11, -4 */
		/* 821DF768h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821DF768h case    1:*/		return 0x821DF76C;
	}
	return 0x821DF76C;
} // Block from 821DF764h-821DF76Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DF76Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF76C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF76C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF76C);
		  /* 821DF76Ch */ case    0:  		/* addi R4, R1, 88 */
		/* 821DF76Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x58);
		/* 821DF76Ch case    0:*/		return 0x821DF770;
		  /* 821DF770h */ case    1:  		/* bl -125464 */
		/* 821DF770h case    1:*/		regs.LR = 0x821DF774; return 0x821C0D58;
		/* 821DF770h case    1:*/		return 0x821DF774;
		  /* 821DF774h */ case    2:  		/* lwz R11, <#[R18 + 48]> */
		/* 821DF774h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000030) );
		/* 821DF774h case    2:*/		return 0x821DF778;
		  /* 821DF778h */ case    3:  		/* lwz R24, <#[R1 + 80]> */
		/* 821DF778h case    3:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000050) );
		/* 821DF778h case    3:*/		return 0x821DF77C;
		  /* 821DF77Ch */ case    4:  		/* rlwinm. R10, R11, 11, 31, 31 */
		/* 821DF77Ch case    4:*/		cpu::op::rlwinm<1,11,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF77Ch case    4:*/		return 0x821DF780;
		  /* 821DF780h */ case    5:  		/* bc 12, CR0_EQ, 24 */
		/* 821DF780h case    5:*/		if ( regs.CR[0].eq ) { return 0x821DF798;  }
		/* 821DF780h case    5:*/		return 0x821DF784;
		  /* 821DF784h */ case    6:  		/* rlwinm R11, R11, 0, 11, 9 */
		/* 821DF784h case    6:*/		cpu::op::rlwinm<0,0,11,9>(regs,&regs.R11,regs.R11);
		/* 821DF784h case    6:*/		return 0x821DF788;
		  /* 821DF788h */ case    7:  		/* stw R11, <#[R18 + 48]> */
		/* 821DF788h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R18 + 0x00000030) );
		/* 821DF788h case    7:*/		return 0x821DF78C;
		  /* 821DF78Ch */ case    8:  		/* lwz R11, <#[R24 + 48]> */
		/* 821DF78Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000030) );
		/* 821DF78Ch case    8:*/		return 0x821DF790;
		  /* 821DF790h */ case    9:  		/* oris R11, R11, 32 */
		/* 821DF790h case    9:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x20);
		/* 821DF790h case    9:*/		return 0x821DF794;
		  /* 821DF794h */ case   10:  		/* stw R11, <#[R24 + 48]> */
		/* 821DF794h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000030) );
		/* 821DF794h case   10:*/		return 0x821DF798;
	}
	return 0x821DF798;
} // Block from 821DF76Ch-821DF798h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821DF798h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF798( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF798) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF798);
		  /* 821DF798h */ case    0:  		/* lwz R10, <#[R18 + 20]> */
		/* 821DF798h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x00000014) );
		/* 821DF798h case    0:*/		return 0x821DF79C;
		  /* 821DF79Ch */ case    1:  		/* addi R7, R18, 16 */
		/* 821DF79Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R18,0x10);
		/* 821DF79Ch case    1:*/		return 0x821DF7A0;
		  /* 821DF7A0h */ case    2:  		/* lwz R23, <#[R1 + 84]> */
		/* 821DF7A0h case    2:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000054) );
		/* 821DF7A0h case    2:*/		return 0x821DF7A4;
		  /* 821DF7A4h */ case    3:  		/* li R8, 0 */
		/* 821DF7A4h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821DF7A4h case    3:*/		return 0x821DF7A8;
		  /* 821DF7A8h */ case    4:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821DF7A8h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821DF7A8h case    4:*/		return 0x821DF7AC;
		  /* 821DF7ACh */ case    5:  		/* bc 4, CR0_EQ, 340 */
		/* 821DF7ACh case    5:*/		if ( !regs.CR[0].eq ) { return 0x821DF900;  }
		/* 821DF7ACh case    5:*/		return 0x821DF7B0;
		  /* 821DF7B0h */ case    6:  		/* cmplwi CR0, R10, 0 */
		/* 821DF7B0h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 821DF7B0h case    6:*/		return 0x821DF7B4;
		  /* 821DF7B4h */ case    7:  		/* bc 12, CR0_EQ, 332 */
		/* 821DF7B4h case    7:*/		if ( regs.CR[0].eq ) { return 0x821DF900;  }
		/* 821DF7B4h case    7:*/		return 0x821DF7B8;
		  /* 821DF7B8h */ case    8:  		/* lwz R11, <#[R10 + 8]> */
		/* 821DF7B8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821DF7B8h case    8:*/		return 0x821DF7BC;
		  /* 821DF7BCh */ case    9:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DF7BCh case    9:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DF7BCh case    9:*/		return 0x821DF7C0;
		  /* 821DF7C0h */ case   10:  		/* cmplwi CR6, R11, 14336 */
		/* 821DF7C0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821DF7C0h case   10:*/		return 0x821DF7C4;
		  /* 821DF7C4h */ case   11:  		/* bc 4, CR6_EQ, 192 */
		/* 821DF7C4h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821DF884;  }
		/* 821DF7C4h case   11:*/		return 0x821DF7C8;
		  /* 821DF7C8h */ case   12:  		/* lwz R11, <#[R10]> */
		/* 821DF7C8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821DF7C8h case   12:*/		return 0x821DF7CC;
		  /* 821DF7CCh */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821DF7CCh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DF7CCh case   13:*/		return 0x821DF7D0;
		  /* 821DF7D0h */ case   14:  		/* bc 12, CR6_EQ, 180 */
		/* 821DF7D0h case   14:*/		if ( regs.CR[6].eq ) { return 0x821DF884;  }
		/* 821DF7D0h case   14:*/		return 0x821DF7D4;
		  /* 821DF7D4h */ case   15:  		/* lwz R9, <#[R11 + 4]> */
		/* 821DF7D4h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821DF7D4h case   15:*/		return 0x821DF7D8;
		  /* 821DF7D8h */ case   16:  		/* cmpwi CR6, R9, 0 */
		/* 821DF7D8h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000000);
		/* 821DF7D8h case   16:*/		return 0x821DF7DC;
		  /* 821DF7DCh */ case   17:  		/* bc 4, CR6_EQ, 40 */
		/* 821DF7DCh case   17:*/		if ( !regs.CR[6].eq ) { return 0x821DF804;  }
		/* 821DF7DCh case   17:*/		return 0x821DF7E0;
		  /* 821DF7E0h */ case   18:  		/* lwz R11, <#[R11 + 12]> */
		/* 821DF7E0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DF7E0h case   18:*/		return 0x821DF7E4;
		  /* 821DF7E4h */ case   19:  		/* lwz R11, <#[R11 + 28]> */
		/* 821DF7E4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 821DF7E4h case   19:*/		return 0x821DF7E8;
		  /* 821DF7E8h */ case   20:  		/* lwz R9, <#[R11 + 44]> */
		/* 821DF7E8h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000002C) );
		/* 821DF7E8h case   20:*/		return 0x821DF7EC;
		  /* 821DF7ECh */ case   21:  		/* cmplw CR6, R9, R23 */
		/* 821DF7ECh case   21:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R23);
		/* 821DF7ECh case   21:*/		return 0x821DF7F0;
		  /* 821DF7F0h */ case   22:  		/* bc 12, CR6_EQ, 148 */
		/* 821DF7F0h case   22:*/		if ( regs.CR[6].eq ) { return 0x821DF884;  }
		/* 821DF7F0h case   22:*/		return 0x821DF7F4;
		  /* 821DF7F4h */ case   23:  		/* lwz R11, <#[R11 + 48]> */
		/* 821DF7F4h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 821DF7F4h case   23:*/		return 0x821DF7F8;
		  /* 821DF7F8h */ case   24:  		/* rlwinm R11, R11, 0, 13, 31 */
		/* 821DF7F8h case   24:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R11);
		/* 821DF7F8h case   24:*/		return 0x821DF7FC;
		  /* 821DF7FCh */ case   25:  		/* cmplw CR6, R11, R22 */
		/* 821DF7FCh case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 821DF7FCh case   25:*/		return 0x821DF800;
		  /* 821DF800h */ case   26:  		/* bc 4, CR6_LT, 132 */
		/* 821DF800h case   26:*/		if ( !regs.CR[6].lt ) { return 0x821DF884;  }
		/* 821DF800h case   26:*/		return 0x821DF804;
	}
	return 0x821DF804;
} // Block from 821DF798h-821DF804h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821DF804h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF804( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF804) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF804);
		  /* 821DF804h */ case    0:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 821DF804h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 821DF804h case    0:*/		return 0x821DF808;
		  /* 821DF808h */ case    1:  		/* addi R9, R24, 16 */
		/* 821DF808h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R24,0x10);
		/* 821DF808h case    1:*/		return 0x821DF80C;
		  /* 821DF80Ch */ case    2:  		/* addi R11, R11, 36 */
		/* 821DF80Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821DF80Ch case    2:*/		return 0x821DF810;
		  /* 821DF810h */ case    3:  		/* addi R9, R9, -36 */
		/* 821DF810h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFDC);
		/* 821DF810h case    3:*/		return 0x821DF814;
		  /* 821DF814h */ case    4:  		/* addi R6, R11, -36 */
		/* 821DF814h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFFFDC);
		/* 821DF814h case    4:*/		return 0x821DF818;
		  /* 821DF818h */ case    5:  		/* ori R5, R9, 1 */
		/* 821DF818h case    5:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R9,0x1);
		/* 821DF818h case    5:*/		return 0x821DF81C;
		  /* 821DF81Ch */ case    6:  		/* addi R9, R11, 4 */
		/* 821DF81Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821DF81Ch case    6:*/		return 0x821DF820;
		  /* 821DF820h */ case    7:  		/* lwz R4, <#[R11 + 4]> */
		/* 821DF820h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		/* 821DF820h case    7:*/		return 0x821DF824;
		  /* 821DF824h */ case    8:  		/* lwz R3, <#[R11]> */
		/* 821DF824h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 821DF824h case    8:*/		return 0x821DF828;
		  /* 821DF828h */ case    9:  		/* rlwinm R4, R4, 0, 0, 30 */
		/* 821DF828h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R4,regs.R4);
		/* 821DF828h case    9:*/		return 0x821DF82C;
		  /* 821DF82Ch */ case   10:  		/* stw R3, <#[R4 + 36]> */
		/* 821DF82Ch case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R4 + 0x00000024) );
		/* 821DF82Ch case   10:*/		return 0x821DF830;
		  /* 821DF830h */ case   11:  		/* lwz R4, <#[R11 + 4]> */
		/* 821DF830h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		/* 821DF830h case   11:*/		return 0x821DF834;
		  /* 821DF834h */ case   12:  		/* lwz R3, <#[R11]> */
		/* 821DF834h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 821DF834h case   12:*/		return 0x821DF838;
		  /* 821DF838h */ case   13:  		/* rlwinm R3, R3, 0, 0, 30 */
		/* 821DF838h case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R3,regs.R3);
		/* 821DF838h case   13:*/		return 0x821DF83C;
		  /* 821DF83Ch */ case   14:  		/* stw R4, <#[R3]> */
		/* 821DF83Ch case   14:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R3 + 0x00000000) );
		/* 821DF83Ch case   14:*/		return 0x821DF840;
		  /* 821DF840h */ case   15:  		/* lwz R4, <#[R24 + 16]> */
		/* 821DF840h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R24 + 0x00000010) );
		/* 821DF840h case   15:*/		return 0x821DF844;
		  /* 821DF844h */ case   16:  		/* stw R4, <#[R11]> */
		/* 821DF844h case   16:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 821DF844h case   16:*/		return 0x821DF848;
		  /* 821DF848h */ case   17:  		/* lwz R4, <#[R24 + 16]> */
		/* 821DF848h case   17:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R24 + 0x00000010) );
		/* 821DF848h case   17:*/		return 0x821DF84C;
		  /* 821DF84Ch */ case   18:  		/* rlwinm R4, R4, 0, 0, 30 */
		/* 821DF84Ch case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R4,regs.R4);
		/* 821DF84Ch case   18:*/		return 0x821DF850;
		  /* 821DF850h */ case   19:  		/* stw R6, <#[R4]> */
		/* 821DF850h case   19:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R4 + 0x00000000) );
		/* 821DF850h case   19:*/		return 0x821DF854;
		  /* 821DF854h */ case   20:  		/* stw R5, <#[R11 + 4]> */
		/* 821DF854h case   20:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R11 + 0x00000004) );
		/* 821DF854h case   20:*/		return 0x821DF858;
		  /* 821DF858h */ case   21:  		/* stw R9, <#[R24 + 16]> */
		/* 821DF858h case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R24 + 0x00000010) );
		/* 821DF858h case   21:*/		return 0x821DF85C;
		  /* 821DF85Ch */ case   22:  		/* lwz R11, <#[R10 + 8]> */
		/* 821DF85Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821DF85Ch case   22:*/		return 0x821DF860;
		  /* 821DF860h */ case   23:  		/* rlwinm. R9, R11, 6, 31, 31 */
		/* 821DF860h case   23:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R9,regs.R11);
		/* 821DF860h case   23:*/		return 0x821DF864;
		  /* 821DF864h */ case   24:  		/* stw R24, <#[R10 + 28]> */
		/* 821DF864h case   24:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R10 + 0x0000001C) );
		/* 821DF864h case   24:*/		return 0x821DF868;
		  /* 821DF868h */ case   25:  		/* bc 12, CR0_EQ, 28 */
		/* 821DF868h case   25:*/		if ( regs.CR[0].eq ) { return 0x821DF884;  }
		/* 821DF868h case   25:*/		return 0x821DF86C;
		  /* 821DF86Ch */ case   26:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821DF86Ch case   26:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821DF86Ch case   26:*/		return 0x821DF870;
		  /* 821DF870h */ case   27:  		/* lwz R9, <#[R10 + 32]> */
		/* 821DF870h case   27:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000020) );
		/* 821DF870h case   27:*/		return 0x821DF874;
		  /* 821DF874h */ case   28:  		/* stw R11, <#[R10 + 8]> */
		/* 821DF874h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821DF874h case   28:*/		return 0x821DF878;
		  /* 821DF878h */ case   29:  		/* lwz R11, <#[R9 + 8]> */
		/* 821DF878h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000008) );
		/* 821DF878h case   29:*/		return 0x821DF87C;
		  /* 821DF87Ch */ case   30:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821DF87Ch case   30:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821DF87Ch case   30:*/		return 0x821DF880;
		  /* 821DF880h */ case   31:  		/* stw R11, <#[R9 + 8]> */
		/* 821DF880h case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000008) );
		/* 821DF880h case   31:*/		return 0x821DF884;
	}
	return 0x821DF884;
} // Block from 821DF804h-821DF884h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821DF884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF884);
		  /* 821DF884h */ case    0:  		/* cmplwi CR6, R8, 0 */
		/* 821DF884h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821DF884h case    0:*/		return 0x821DF888;
		  /* 821DF888h */ case    1:  		/* bc 12, CR6_EQ, 48 */
		/* 821DF888h case    1:*/		if ( regs.CR[6].eq ) { return 0x821DF8B8;  }
		/* 821DF888h case    1:*/		return 0x821DF88C;
		  /* 821DF88Ch */ case    2:  		/* rlwinm R11, R8, 0, 0, 30 */
		/* 821DF88Ch case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R8);
		/* 821DF88Ch case    2:*/		return 0x821DF890;
		  /* 821DF890h */ case    3:  		/* lwz R11, <#[R11 + 40]> */
		/* 821DF890h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821DF890h case    3:*/		return 0x821DF894;
		  /* 821DF894h */ case    4:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821DF894h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821DF894h case    4:*/		return 0x821DF898;
		  /* 821DF898h */ case    5:  		/* addic R9, R9, -1 */
		/* 821DF898h case    5:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821DF898h case    5:*/		return 0x821DF89C;
		  /* 821DF89Ch */ case    6:  		/* subfe R9, R9, R9 */
		/* 821DF89Ch case    6:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821DF89Ch case    6:*/		return 0x821DF8A0;
		  /* 821DF8A0h */ case    7:  		/* and R9, R9, R11 */
		/* 821DF8A0h case    7:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 821DF8A0h case    7:*/		return 0x821DF8A4;
		  /* 821DF8A4h */ case    8:  		/* cmplw CR6, R10, R9 */
		/* 821DF8A4h case    8:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821DF8A4h case    8:*/		return 0x821DF8A8;
		  /* 821DF8A8h */ case    9:  		/* bc 12, CR6_EQ, 44 */
		/* 821DF8A8h case    9:*/		if ( regs.CR[6].eq ) { return 0x821DF8D4;  }
		/* 821DF8A8h case    9:*/		return 0x821DF8AC;
		  /* 821DF8ACh */ case   10:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DF8ACh case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF8ACh case   10:*/		return 0x821DF8B0;
		  /* 821DF8B0h */ case   11:  		/* bc 4, CR0_EQ, 80 */
		/* 821DF8B0h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821DF900;  }
		/* 821DF8B0h case   11:*/		return 0x821DF8B4;
		  /* 821DF8B4h */ case   12:  		/* b 64 */
		/* 821DF8B4h case   12:*/		return 0x821DF8F4;
		/* 821DF8B4h case   12:*/		return 0x821DF8B8;
	}
	return 0x821DF8B8;
} // Block from 821DF884h-821DF8B8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821DF8B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF8B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF8B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF8B8);
		  /* 821DF8B8h */ case    0:  		/* lwz R11, <#[R7 + 4]> */
		/* 821DF8B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000004) );
		/* 821DF8B8h case    0:*/		return 0x821DF8BC;
		  /* 821DF8BCh */ case    1:  		/* rlwinm R9, R11, 0, 31, 31 */
		/* 821DF8BCh case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821DF8BCh case    1:*/		return 0x821DF8C0;
		  /* 821DF8C0h */ case    2:  		/* addic R6, R9, -1 */
		/* 821DF8C0h case    2:*/		cpu::op::addic<0>(regs,&regs.R6,regs.R9,0xFFFFFFFF);
		/* 821DF8C0h case    2:*/		return 0x821DF8C4;
		  /* 821DF8C4h */ case    3:  		/* subfe R6, R6, R6 */
		/* 821DF8C4h case    3:*/		cpu::op::subfe<0>(regs,&regs.R6,regs.R6,regs.R6);
		/* 821DF8C4h case    3:*/		return 0x821DF8C8;
		  /* 821DF8C8h */ case    4:  		/* and R6, R6, R11 */
		/* 821DF8C8h case    4:*/		cpu::op::and<0>(regs,&regs.R6,regs.R6,regs.R11);
		/* 821DF8C8h case    4:*/		return 0x821DF8CC;
		  /* 821DF8CCh */ case    5:  		/* cmplw CR6, R10, R6 */
		/* 821DF8CCh case    5:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 821DF8CCh case    5:*/		return 0x821DF8D0;
		  /* 821DF8D0h */ case    6:  		/* bc 4, CR6_EQ, 28 */
		/* 821DF8D0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DF8EC;  }
		/* 821DF8D0h case    6:*/		return 0x821DF8D4;
	}
	return 0x821DF8D4;
} // Block from 821DF8B8h-821DF8D4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DF8D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF8D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF8D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF8D4);
		  /* 821DF8D4h */ case    0:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 821DF8D4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 821DF8D4h case    0:*/		return 0x821DF8D8;
		  /* 821DF8D8h */ case    1:  		/* mr R8, R10 */
		/* 821DF8D8h case    1:*/		regs.R8 = regs.R10;
		/* 821DF8D8h case    1:*/		return 0x821DF8DC;
		  /* 821DF8DCh */ case    2:  		/* lwz R10, <#[R11 + 40]> */
		/* 821DF8DCh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000028) );
		/* 821DF8DCh case    2:*/		return 0x821DF8E0;
		  /* 821DF8E0h */ case    3:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 821DF8E0h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 821DF8E0h case    3:*/		return 0x821DF8E4;
		  /* 821DF8E4h */ case    4:  		/* bc 4, CR0_EQ, 28 */
		/* 821DF8E4h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821DF900;  }
		/* 821DF8E4h case    4:*/		return 0x821DF8E8;
		  /* 821DF8E8h */ case    5:  		/* b 16 */
		/* 821DF8E8h case    5:*/		return 0x821DF8F8;
		/* 821DF8E8h case    5:*/		return 0x821DF8EC;
	}
	return 0x821DF8EC;
} // Block from 821DF8D4h-821DF8ECh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DF8ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF8EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF8EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF8EC);
		  /* 821DF8ECh */ case    0:  		/* cmplwi CR6, R9, 0 */
		/* 821DF8ECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821DF8ECh case    0:*/		return 0x821DF8F0;
		  /* 821DF8F0h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 821DF8F0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DF900;  }
		/* 821DF8F0h case    1:*/		return 0x821DF8F4;
	}
	return 0x821DF8F4;
} // Block from 821DF8ECh-821DF8F4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DF8F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF8F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF8F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF8F4);
		  /* 821DF8F4h */ case    0:  		/* mr R10, R11 */
		/* 821DF8F4h case    0:*/		regs.R10 = regs.R11;
		/* 821DF8F4h case    0:*/		return 0x821DF8F8;
	}
	return 0x821DF8F8;
} // Block from 821DF8F4h-821DF8F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DF8F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF8F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF8F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF8F8);
		  /* 821DF8F8h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821DF8F8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DF8F8h case    0:*/		return 0x821DF8FC;
		  /* 821DF8FCh */ case    1:  		/* bc 4, CR6_EQ, -324 */
		/* 821DF8FCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DF7B8;  }
		/* 821DF8FCh case    1:*/		return 0x821DF900;
	}
	return 0x821DF900;
} // Block from 821DF8F8h-821DF900h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DF900h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF900( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF900) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF900);
		  /* 821DF900h */ case    0:  		/* lwz R30, <#[R29]> */
		/* 821DF900h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821DF900h case    0:*/		return 0x821DF904;
		  /* 821DF904h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 821DF904h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821DF904h case    1:*/		return 0x821DF908;
		  /* 821DF908h */ case    2:  		/* bc 12, CR6_EQ, 192 */
		/* 821DF908h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DF9C8;  }
		/* 821DF908h case    2:*/		return 0x821DF90C;
		  /* 821DF90Ch */ case    3:  		/* lwz R31, <#[R30 + 4]> */
		/* 821DF90Ch case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 821DF90Ch case    3:*/		return 0x821DF910;
		  /* 821DF910h */ case    4:  		/* mr R5, R24 */
		/* 821DF910h case    4:*/		regs.R5 = regs.R24;
		/* 821DF910h case    4:*/		return 0x821DF914;
		  /* 821DF914h */ case    5:  		/* mr R4, R30 */
		/* 821DF914h case    5:*/		regs.R4 = regs.R30;
		/* 821DF914h case    5:*/		return 0x821DF918;
		  /* 821DF918h */ case    6:  		/* mr R3, R31 */
		/* 821DF918h case    6:*/		regs.R3 = regs.R31;
		/* 821DF918h case    6:*/		return 0x821DF91C;
		  /* 821DF91Ch */ case    7:  		/* bl 327692 */
		/* 821DF91Ch case    7:*/		regs.LR = 0x821DF920; return 0x8222F928;
		/* 821DF91Ch case    7:*/		return 0x821DF920;
		  /* 821DF920h */ case    8:  		/* lwz R11, <#[R31 + 36]> */
		/* 821DF920h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 821DF920h case    8:*/		return 0x821DF924;
		  /* 821DF924h */ case    9:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DF924h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DF924h case    9:*/		return 0x821DF928;
		  /* 821DF928h */ case   10:  		/* bc 4, CR0_EQ, 140 */
		/* 821DF928h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821DF9B4;  }
		/* 821DF928h case   10:*/		return 0x821DF92C;
		  /* 821DF92Ch */ case   11:  		/* lwz R11, <#[R31 + 32]> */
		/* 821DF92Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 821DF92Ch case   11:*/		return 0x821DF930;
		  /* 821DF930h */ case   12:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DF930h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DF930h case   12:*/		return 0x821DF934;
		  /* 821DF934h */ case   13:  		/* addic. R31, R11, -40 */
		/* 821DF934h case   13:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821DF934h case   13:*/		return 0x821DF938;
		  /* 821DF938h */ case   14:  		/* bc 12, CR0_EQ, 124 */
		/* 821DF938h case   14:*/		if ( regs.CR[0].eq ) { return 0x821DF9B4;  }
		/* 821DF938h case   14:*/		return 0x821DF93C;
		  /* 821DF93Ch */ case   15:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DF93Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DF93Ch case   15:*/		return 0x821DF940;
		  /* 821DF940h */ case   16:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821DF940h case   16:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821DF940h case   16:*/		return 0x821DF944;
		  /* 821DF944h */ case   17:  		/* cmplwi CR6, R11, 86 */
		/* 821DF944h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 821DF944h case   17:*/		return 0x821DF948;
		  /* 821DF948h */ case   18:  		/* bc 12, CR6_EQ, 48 */
		/* 821DF948h case   18:*/		if ( regs.CR[6].eq ) { return 0x821DF978;  }
		/* 821DF948h case   18:*/		return 0x821DF94C;
		  /* 821DF94Ch */ case   19:  		/* cmplwi CR6, R11, 87 */
		/* 821DF94Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 821DF94Ch case   19:*/		return 0x821DF950;
		  /* 821DF950h */ case   20:  		/* bc 12, CR6_EQ, 40 */
		/* 821DF950h case   20:*/		if ( regs.CR[6].eq ) { return 0x821DF978;  }
		/* 821DF950h case   20:*/		return 0x821DF954;
		  /* 821DF954h */ case   21:  		/* cmplwi CR6, R11, 89 */
		/* 821DF954h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 821DF954h case   21:*/		return 0x821DF958;
		  /* 821DF958h */ case   22:  		/* bc 12, CR6_EQ, 32 */
		/* 821DF958h case   22:*/		if ( regs.CR[6].eq ) { return 0x821DF978;  }
		/* 821DF958h case   22:*/		return 0x821DF95C;
		  /* 821DF95Ch */ case   23:  		/* cmplwi CR6, R11, 90 */
		/* 821DF95Ch case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 821DF95Ch case   23:*/		return 0x821DF960;
		  /* 821DF960h */ case   24:  		/* bc 12, CR6_EQ, 24 */
		/* 821DF960h case   24:*/		if ( regs.CR[6].eq ) { return 0x821DF978;  }
		/* 821DF960h case   24:*/		return 0x821DF964;
		  /* 821DF964h */ case   25:  		/* cmplwi CR6, R11, 84 */
		/* 821DF964h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 821DF964h case   25:*/		return 0x821DF968;
		  /* 821DF968h */ case   26:  		/* bc 12, CR6_EQ, 16 */
		/* 821DF968h case   26:*/		if ( regs.CR[6].eq ) { return 0x821DF978;  }
		/* 821DF968h case   26:*/		return 0x821DF96C;
		  /* 821DF96Ch */ case   27:  		/* cmplwi CR6, R11, 85 */
		/* 821DF96Ch case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 821DF96Ch case   27:*/		return 0x821DF970;
		  /* 821DF970h */ case   28:  		/* li R11, 0 */
		/* 821DF970h case   28:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DF970h case   28:*/		return 0x821DF974;
		  /* 821DF974h */ case   29:  		/* bc 4, CR6_EQ, 8 */
		/* 821DF974h case   29:*/		if ( !regs.CR[6].eq ) { return 0x821DF97C;  }
		/* 821DF974h case   29:*/		return 0x821DF978;
	}
	return 0x821DF978;
} // Block from 821DF900h-821DF978h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821DF978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF978);
		  /* 821DF978h */ case    0:  		/* li R11, 1 */
		/* 821DF978h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821DF978h case    0:*/		return 0x821DF97C;
	}
	return 0x821DF97C;
} // Block from 821DF978h-821DF97Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DF97Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF97C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF97C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF97C);
		  /* 821DF97Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DF97Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DF97Ch case    0:*/		return 0x821DF980;
		  /* 821DF980h */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 821DF980h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DF9B4;  }
		/* 821DF980h case    1:*/		return 0x821DF984;
		  /* 821DF984h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DF984h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DF984h case    2:*/		return 0x821DF988;
		  /* 821DF988h */ case    3:  		/* mr R3, R20 */
		/* 821DF988h case    3:*/		regs.R3 = regs.R20;
		/* 821DF988h case    3:*/		return 0x821DF98C;
		  /* 821DF98Ch */ case    4:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821DF98Ch case    4:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821DF98Ch case    4:*/		return 0x821DF990;
		  /* 821DF990h */ case    5:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821DF990h case    5:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821DF990h case    5:*/		return 0x821DF994;
		  /* 821DF994h */ case    6:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821DF994h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821DF994h case    6:*/		return 0x821DF998;
		  /* 821DF998h */ case    7:  		/* bl -505192 */
		/* 821DF998h case    7:*/		regs.LR = 0x821DF99C; return 0x82164430;
		/* 821DF998h case    7:*/		return 0x821DF99C;
		  /* 821DF99Ch */ case    8:  		/* addi R11, R31, -16 */
		/* 821DF99Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF0);
		/* 821DF99Ch case    8:*/		return 0x821DF9A0;
		  /* 821DF9A0h */ case    9:  		/* add R11, R3, R11 */
		/* 821DF9A0h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821DF9A0h case    9:*/		return 0x821DF9A4;
		  /* 821DF9A4h */ case   10:  		/* lwz R10, <#[R11]> */
		/* 821DF9A4h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DF9A4h case   10:*/		return 0x821DF9A8;
		  /* 821DF9A8h */ case   11:  		/* cmplw CR6, R10, R18 */
		/* 821DF9A8h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R18);
		/* 821DF9A8h case   11:*/		return 0x821DF9AC;
		  /* 821DF9ACh */ case   12:  		/* bc 4, CR6_EQ, 8 */
		/* 821DF9ACh case   12:*/		if ( !regs.CR[6].eq ) { return 0x821DF9B4;  }
		/* 821DF9ACh case   12:*/		return 0x821DF9B0;
		  /* 821DF9B0h */ case   13:  		/* stw R24, <#[R11]> */
		/* 821DF9B0h case   13:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R11 + 0x00000000) );
		/* 821DF9B0h case   13:*/		return 0x821DF9B4;
	}
	return 0x821DF9B4;
} // Block from 821DF97Ch-821DF9B4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821DF9B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF9B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF9B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF9B4);
		  /* 821DF9B4h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821DF9B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821DF9B4h case    0:*/		return 0x821DF9B8;
		  /* 821DF9B8h */ case    1:  		/* cmplw CR6, R11, R30 */
		/* 821DF9B8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821DF9B8h case    1:*/		return 0x821DF9BC;
		  /* 821DF9BCh */ case    2:  		/* bc 4, CR6_EQ, -188 */
		/* 821DF9BCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DF900;  }
		/* 821DF9BCh case    2:*/		return 0x821DF9C0;
		  /* 821DF9C0h */ case    3:  		/* addi R29, R30, 12 */
		/* 821DF9C0h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0xC);
		/* 821DF9C0h case    3:*/		return 0x821DF9C4;
		  /* 821DF9C4h */ case    4:  		/* b -196 */
		/* 821DF9C4h case    4:*/		return 0x821DF900;
		/* 821DF9C4h case    4:*/		return 0x821DF9C8;
	}
	return 0x821DF9C8;
} // Block from 821DF9B4h-821DF9C8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DF9C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DF9C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DF9C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DF9C8);
		  /* 821DF9C8h */ case    0:  		/* lwz R11, <#[R20 + 4]> */
		/* 821DF9C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821DF9C8h case    0:*/		return 0x821DF9CC;
		  /* 821DF9CCh */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DF9CCh case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DF9CCh case    1:*/		return 0x821DF9D0;
		  /* 821DF9D0h */ case    2:  		/* bc 4, CR0_EQ, 524 */
		/* 821DF9D0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821DFBDC;  }
		/* 821DF9D0h case    2:*/		return 0x821DF9D4;
		  /* 821DF9D4h */ case    3:  		/* mr R25, R11 */
		/* 821DF9D4h case    3:*/		regs.R25 = regs.R11;
		/* 821DF9D4h case    3:*/		return 0x821DF9D8;
		  /* 821DF9D8h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821DF9D8h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DF9D8h case    4:*/		return 0x821DF9DC;
		  /* 821DF9DCh */ case    5:  		/* bc 12, CR0_EQ, 512 */
		/* 821DF9DCh case    5:*/		if ( regs.CR[0].eq ) { return 0x821DFBDC;  }
		/* 821DF9DCh case    5:*/		return 0x821DF9E0;
		  /* 821DF9E0h */ case    6:  		/* lwz R11, <#[R25 + 44]> */
		/* 821DF9E0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000002C) );
		/* 821DF9E0h case    6:*/		return 0x821DF9E4;
		  /* 821DF9E4h */ case    7:  		/* cmplw CR6, R11, R23 */
		/* 821DF9E4h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 821DF9E4h case    7:*/		return 0x821DF9E8;
		  /* 821DF9E8h */ case    8:  		/* bc 4, CR6_EQ, 472 */
		/* 821DF9E8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821DFBC0;  }
		/* 821DF9E8h case    8:*/		return 0x821DF9EC;
		  /* 821DF9ECh */ case    9:  		/* lwz R28, <#[R25 + 80]> */
		/* 821DF9ECh case    9:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R25 + 0x00000050) );
		/* 821DF9ECh case    9:*/		return 0x821DF9F0;
		  /* 821DF9F0h */ case   10:  		/* addi R27, R28, 12 */
		/* 821DF9F0h case   10:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R28,0xC);
		/* 821DF9F0h case   10:*/		return 0x821DF9F4;
		  /* 821DF9F4h */ case   11:  		/* mr R26, R27 */
		/* 821DF9F4h case   11:*/		regs.R26 = regs.R27;
		/* 821DF9F4h case   11:*/		return 0x821DF9F8;
		  /* 821DF9F8h */ case   12:  		/* lwz R29, <#[R28 + 12]> */
		/* 821DF9F8h case   12:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R28 + 0x0000000C) );
		/* 821DF9F8h case   12:*/		return 0x821DF9FC;
		  /* 821DF9FCh */ case   13:  		/* cmplwi CR6, R29, 0 */
		/* 821DF9FCh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821DF9FCh case   13:*/		return 0x821DFA00;
		  /* 821DFA00h */ case   14:  		/* bc 12, CR6_EQ, 408 */
		/* 821DFA00h case   14:*/		if ( regs.CR[6].eq ) { return 0x821DFB98;  }
		/* 821DFA00h case   14:*/		return 0x821DFA04;
		  /* 821DFA04h */ case   15:  		/* lwz R30, <#[R29]> */
		/* 821DFA04h case   15:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821DFA04h case   15:*/		return 0x821DFA08;
		  /* 821DFA08h */ case   16:  		/* lwz R10, <#[R30 + 48]> */
		/* 821DFA08h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000030) );
		/* 821DFA08h case   16:*/		return 0x821DFA0C;
		  /* 821DFA0Ch */ case   17:  		/* rlwinm R11, R10, 0, 13, 31 */
		/* 821DFA0Ch case   17:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R10);
		/* 821DFA0Ch case   17:*/		return 0x821DFA10;
		  /* 821DFA10h */ case   18:  		/* cmplw CR6, R11, R22 */
		/* 821DFA10h case   18:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 821DFA10h case   18:*/		return 0x821DFA14;
		  /* 821DFA14h */ case   19:  		/* bc 4, CR6_LT, 364 */
		/* 821DFA14h case   19:*/		if ( !regs.CR[6].lt ) { return 0x821DFB80;  }
		/* 821DFA14h case   19:*/		return 0x821DFA18;
		  /* 821DFA18h */ case   20:  		/* lwz R11, <#[R28 + 36]> */
		/* 821DFA18h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000024) );
		/* 821DFA18h case   20:*/		return 0x821DFA1C;
		  /* 821DFA1Ch */ case   21:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821DFA1Ch case   21:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821DFA1Ch case   21:*/		return 0x821DFA20;
		  /* 821DFA20h */ case   22:  		/* bc 12, CR0_EQ, 12 */
		/* 821DFA20h case   22:*/		if ( regs.CR[0].eq ) { return 0x821DFA2C;  }
		/* 821DFA20h case   22:*/		return 0x821DFA24;
		  /* 821DFA24h */ case   23:  		/* li R31, 0 */
		/* 821DFA24h case   23:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821DFA24h case   23:*/		return 0x821DFA28;
		  /* 821DFA28h */ case   24:  		/* b 16 */
		/* 821DFA28h case   24:*/		return 0x821DFA38;
		/* 821DFA28h case   24:*/		return 0x821DFA2C;
	}
	return 0x821DFA2C;
} // Block from 821DF9C8h-821DFA2Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 821DFA2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFA2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFA2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFA2C);
		  /* 821DFA2Ch */ case    0:  		/* lwz R11, <#[R28 + 32]> */
		/* 821DFA2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000020) );
		/* 821DFA2Ch case    0:*/		return 0x821DFA30;
		  /* 821DFA30h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821DFA30h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821DFA30h case    1:*/		return 0x821DFA34;
		  /* 821DFA34h */ case    2:  		/* addi R31, R11, -40 */
		/* 821DFA34h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821DFA34h case    2:*/		return 0x821DFA38;
	}
	return 0x821DFA38;
} // Block from 821DFA2Ch-821DFA38h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821DFA38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFA38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFA38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFA38);
		  /* 821DFA38h */ case    0:  		/* rlwinm. R11, R10, 13, 31, 31 */
		/* 821DFA38h case    0:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R10);
		/* 821DFA38h case    0:*/		return 0x821DFA3C;
		  /* 821DFA3Ch */ case    1:  		/* bc 4, CR0_EQ, 324 */
		/* 821DFA3Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821DFB80;  }
		/* 821DFA3Ch case    1:*/		return 0x821DFA40;
		  /* 821DFA40h */ case    2:  		/* lwz R11, <#[R27]> */
		/* 821DFA40h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821DFA40h case    2:*/		return 0x821DFA44;
		  /* 821DFA44h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821DFA44h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DFA44h case    3:*/		return 0x821DFA48;
		  /* 821DFA48h */ case    4:  		/* bc 12, CR6_EQ, 32 */
		/* 821DFA48h case    4:*/		if ( regs.CR[6].eq ) { return 0x821DFA68;  }
		/* 821DFA48h case    4:*/		return 0x821DFA4C;
		  /* 821DFA4Ch */ case    5:  		/* lwz R10, <#[R11]> */
		/* 821DFA4Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DFA4Ch case    5:*/		return 0x821DFA50;
		  /* 821DFA50h */ case    6:  		/* cmplw CR6, R18, R10 */
		/* 821DFA50h case    6:*/		cpu::op::cmplw<6>(regs,regs.R18,regs.R10);
		/* 821DFA50h case    6:*/		return 0x821DFA54;
		  /* 821DFA54h */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 821DFA54h case    7:*/		if ( regs.CR[6].eq ) { return 0x821DFA60;  }
		/* 821DFA54h case    7:*/		return 0x821DFA58;
		  /* 821DFA58h */ case    8:  		/* lwz R11, <#[R11 + 8]> */
		/* 821DFA58h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821DFA58h case    8:*/		return 0x821DFA5C;
		  /* 821DFA5Ch */ case    9:  		/* b -24 */
		/* 821DFA5Ch case    9:*/		return 0x821DFA44;
		/* 821DFA5Ch case    9:*/		return 0x821DFA60;
	}
	return 0x821DFA60;
} // Block from 821DFA38h-821DFA60h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DFA60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFA60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFA60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFA60);
		  /* 821DFA60h */ case    0:  		/* li R11, 1 */
		/* 821DFA60h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821DFA60h case    0:*/		return 0x821DFA64;
		  /* 821DFA64h */ case    1:  		/* b 8 */
		/* 821DFA64h case    1:*/		return 0x821DFA6C;
		/* 821DFA64h case    1:*/		return 0x821DFA68;
	}
	return 0x821DFA68;
} // Block from 821DFA60h-821DFA68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DFA68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFA68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFA68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFA68);
		  /* 821DFA68h */ case    0:  		/* li R11, 0 */
		/* 821DFA68h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DFA68h case    0:*/		return 0x821DFA6C;
	}
	return 0x821DFA6C;
} // Block from 821DFA68h-821DFA6Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DFA6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFA6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFA6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFA6C);
		  /* 821DFA6Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DFA6Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DFA6Ch case    0:*/		return 0x821DFA70;
		  /* 821DFA70h */ case    1:  		/* mr R3, R28 */
		/* 821DFA70h case    1:*/		regs.R3 = regs.R28;
		/* 821DFA70h case    1:*/		return 0x821DFA74;
		  /* 821DFA74h */ case    2:  		/* bc 12, CR0_EQ, 128 */
		/* 821DFA74h case    2:*/		if ( regs.CR[0].eq ) { return 0x821DFAF4;  }
		/* 821DFA74h case    2:*/		return 0x821DFA78;
		  /* 821DFA78h */ case    3:  		/* mr R5, R20 */
		/* 821DFA78h case    3:*/		regs.R5 = regs.R20;
		/* 821DFA78h case    3:*/		return 0x821DFA7C;
		  /* 821DFA7Ch */ case    4:  		/* mr R4, R30 */
		/* 821DFA7Ch case    4:*/		regs.R4 = regs.R30;
		/* 821DFA7Ch case    4:*/		return 0x821DFA80;
		  /* 821DFA80h */ case    5:  		/* bl 327400 */
		/* 821DFA80h case    5:*/		regs.LR = 0x821DFA84; return 0x8222F968;
		/* 821DFA80h case    5:*/		return 0x821DFA84;
		  /* 821DFA84h */ case    6:  		/* cmplwi CR6, R31, 0 */
		/* 821DFA84h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DFA84h case    6:*/		return 0x821DFA88;
		  /* 821DFA88h */ case    7:  		/* bc 12, CR6_EQ, 248 */
		/* 821DFA88h case    7:*/		if ( regs.CR[6].eq ) { return 0x821DFB80;  }
		/* 821DFA88h case    7:*/		return 0x821DFA8C;
		  /* 821DFA8Ch */ case    8:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DFA8Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DFA8Ch case    8:*/		return 0x821DFA90;
		  /* 821DFA90h */ case    9:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 821DFA90h case    9:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 821DFA90h case    9:*/		return 0x821DFA94;
		  /* 821DFA94h */ case   10:  		/* cmplwi CR6, R10, 86 */
		/* 821DFA94h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000056);
		/* 821DFA94h case   10:*/		return 0x821DFA98;
		  /* 821DFA98h */ case   11:  		/* bc 12, CR6_EQ, 48 */
		/* 821DFA98h case   11:*/		if ( regs.CR[6].eq ) { return 0x821DFAC8;  }
		/* 821DFA98h case   11:*/		return 0x821DFA9C;
		  /* 821DFA9Ch */ case   12:  		/* cmplwi CR6, R10, 87 */
		/* 821DFA9Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000057);
		/* 821DFA9Ch case   12:*/		return 0x821DFAA0;
		  /* 821DFAA0h */ case   13:  		/* bc 12, CR6_EQ, 40 */
		/* 821DFAA0h case   13:*/		if ( regs.CR[6].eq ) { return 0x821DFAC8;  }
		/* 821DFAA0h case   13:*/		return 0x821DFAA4;
		  /* 821DFAA4h */ case   14:  		/* cmplwi CR6, R10, 89 */
		/* 821DFAA4h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000059);
		/* 821DFAA4h case   14:*/		return 0x821DFAA8;
		  /* 821DFAA8h */ case   15:  		/* bc 12, CR6_EQ, 32 */
		/* 821DFAA8h case   15:*/		if ( regs.CR[6].eq ) { return 0x821DFAC8;  }
		/* 821DFAA8h case   15:*/		return 0x821DFAAC;
		  /* 821DFAACh */ case   16:  		/* cmplwi CR6, R10, 90 */
		/* 821DFAACh case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000005A);
		/* 821DFAACh case   16:*/		return 0x821DFAB0;
		  /* 821DFAB0h */ case   17:  		/* bc 12, CR6_EQ, 24 */
		/* 821DFAB0h case   17:*/		if ( regs.CR[6].eq ) { return 0x821DFAC8;  }
		/* 821DFAB0h case   17:*/		return 0x821DFAB4;
		  /* 821DFAB4h */ case   18:  		/* cmplwi CR6, R10, 84 */
		/* 821DFAB4h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000054);
		/* 821DFAB4h case   18:*/		return 0x821DFAB8;
		  /* 821DFAB8h */ case   19:  		/* bc 12, CR6_EQ, 16 */
		/* 821DFAB8h case   19:*/		if ( regs.CR[6].eq ) { return 0x821DFAC8;  }
		/* 821DFAB8h case   19:*/		return 0x821DFABC;
		  /* 821DFABCh */ case   20:  		/* cmplwi CR6, R10, 85 */
		/* 821DFABCh case   20:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000055);
		/* 821DFABCh case   20:*/		return 0x821DFAC0;
		  /* 821DFAC0h */ case   21:  		/* li R11, 0 */
		/* 821DFAC0h case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DFAC0h case   21:*/		return 0x821DFAC4;
		  /* 821DFAC4h */ case   22:  		/* bc 4, CR6_EQ, 8 */
		/* 821DFAC4h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821DFACC;  }
		/* 821DFAC4h case   22:*/		return 0x821DFAC8;
	}
	return 0x821DFAC8;
} // Block from 821DFA6Ch-821DFAC8h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821DFAC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFAC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFAC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFAC8);
		  /* 821DFAC8h */ case    0:  		/* li R11, 1 */
		/* 821DFAC8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821DFAC8h case    0:*/		return 0x821DFACC;
	}
	return 0x821DFACC;
} // Block from 821DFAC8h-821DFACCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DFACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFACC);
		  /* 821DFACCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DFACCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DFACCh case    0:*/		return 0x821DFAD0;
		  /* 821DFAD0h */ case    1:  		/* bc 12, CR0_EQ, 176 */
		/* 821DFAD0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821DFB80;  }
		/* 821DFAD0h case    1:*/		return 0x821DFAD4;
		  /* 821DFAD4h */ case    2:  		/* cmplwi CR6, R10, 90 */
		/* 821DFAD4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000005A);
		/* 821DFAD4h case    2:*/		return 0x821DFAD8;
		  /* 821DFAD8h */ case    3:  		/* mr R3, R20 */
		/* 821DFAD8h case    3:*/		regs.R3 = regs.R20;
		/* 821DFAD8h case    3:*/		return 0x821DFADC;
		  /* 821DFADCh */ case    4:  		/* bc 4, CR6_EQ, 1056 */
		/* 821DFADCh case    4:*/		if ( !regs.CR[6].eq ) { return 0x821DFEFC;  }
		/* 821DFADCh case    4:*/		return 0x821DFAE0;
		  /* 821DFAE0h */ case    5:  		/* li R6, 1 */
		/* 821DFAE0h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821DFAE0h case    5:*/		return 0x821DFAE4;
		  /* 821DFAE4h */ case    6:  		/* li R5, 0 */
		/* 821DFAE4h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DFAE4h case    6:*/		return 0x821DFAE8;
		  /* 821DFAE8h */ case    7:  		/* mr R4, R31 */
		/* 821DFAE8h case    7:*/		regs.R4 = regs.R31;
		/* 821DFAE8h case    7:*/		return 0x821DFAEC;
		  /* 821DFAECh */ case    8:  		/* bl 309468 */
		/* 821DFAECh case    8:*/		regs.LR = 0x821DFAF0; return 0x8222B3C8;
		/* 821DFAECh case    8:*/		return 0x821DFAF0;
		  /* 821DFAF0h */ case    9:  		/* b 144 */
		/* 821DFAF0h case    9:*/		return 0x821DFB80;
		/* 821DFAF0h case    9:*/		return 0x821DFAF4;
	}
	return 0x821DFAF4;
} // Block from 821DFACCh-821DFAF4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DFAF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFAF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFAF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFAF4);
		  /* 821DFAF4h */ case    0:  		/* mr R5, R18 */
		/* 821DFAF4h case    0:*/		regs.R5 = regs.R18;
		/* 821DFAF4h case    0:*/		return 0x821DFAF8;
		  /* 821DFAF8h */ case    1:  		/* mr R4, R29 */
		/* 821DFAF8h case    1:*/		regs.R4 = regs.R29;
		/* 821DFAF8h case    1:*/		return 0x821DFAFC;
		  /* 821DFAFCh */ case    2:  		/* bl 327212 */
		/* 821DFAFCh case    2:*/		regs.LR = 0x821DFB00; return 0x8222F928;
		/* 821DFAFCh case    2:*/		return 0x821DFB00;
		  /* 821DFB00h */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 821DFB00h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821DFB00h case    3:*/		return 0x821DFB04;
		  /* 821DFB04h */ case    4:  		/* bc 12, CR6_EQ, 124 */
		/* 821DFB04h case    4:*/		if ( regs.CR[6].eq ) { return 0x821DFB80;  }
		/* 821DFB04h case    4:*/		return 0x821DFB08;
		  /* 821DFB08h */ case    5:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DFB08h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DFB08h case    5:*/		return 0x821DFB0C;
		  /* 821DFB0Ch */ case    6:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821DFB0Ch case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821DFB0Ch case    6:*/		return 0x821DFB10;
		  /* 821DFB10h */ case    7:  		/* cmplwi CR6, R11, 86 */
		/* 821DFB10h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 821DFB10h case    7:*/		return 0x821DFB14;
		  /* 821DFB14h */ case    8:  		/* bc 12, CR6_EQ, 48 */
		/* 821DFB14h case    8:*/		if ( regs.CR[6].eq ) { return 0x821DFB44;  }
		/* 821DFB14h case    8:*/		return 0x821DFB18;
		  /* 821DFB18h */ case    9:  		/* cmplwi CR6, R11, 87 */
		/* 821DFB18h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 821DFB18h case    9:*/		return 0x821DFB1C;
		  /* 821DFB1Ch */ case   10:  		/* bc 12, CR6_EQ, 40 */
		/* 821DFB1Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x821DFB44;  }
		/* 821DFB1Ch case   10:*/		return 0x821DFB20;
		  /* 821DFB20h */ case   11:  		/* cmplwi CR6, R11, 89 */
		/* 821DFB20h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 821DFB20h case   11:*/		return 0x821DFB24;
		  /* 821DFB24h */ case   12:  		/* bc 12, CR6_EQ, 32 */
		/* 821DFB24h case   12:*/		if ( regs.CR[6].eq ) { return 0x821DFB44;  }
		/* 821DFB24h case   12:*/		return 0x821DFB28;
		  /* 821DFB28h */ case   13:  		/* cmplwi CR6, R11, 90 */
		/* 821DFB28h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 821DFB28h case   13:*/		return 0x821DFB2C;
		  /* 821DFB2Ch */ case   14:  		/* bc 12, CR6_EQ, 24 */
		/* 821DFB2Ch case   14:*/		if ( regs.CR[6].eq ) { return 0x821DFB44;  }
		/* 821DFB2Ch case   14:*/		return 0x821DFB30;
		  /* 821DFB30h */ case   15:  		/* cmplwi CR6, R11, 84 */
		/* 821DFB30h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 821DFB30h case   15:*/		return 0x821DFB34;
		  /* 821DFB34h */ case   16:  		/* bc 12, CR6_EQ, 16 */
		/* 821DFB34h case   16:*/		if ( regs.CR[6].eq ) { return 0x821DFB44;  }
		/* 821DFB34h case   16:*/		return 0x821DFB38;
		  /* 821DFB38h */ case   17:  		/* cmplwi CR6, R11, 85 */
		/* 821DFB38h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 821DFB38h case   17:*/		return 0x821DFB3C;
		  /* 821DFB3Ch */ case   18:  		/* li R11, 0 */
		/* 821DFB3Ch case   18:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821DFB3Ch case   18:*/		return 0x821DFB40;
		  /* 821DFB40h */ case   19:  		/* bc 4, CR6_EQ, 8 */
		/* 821DFB40h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821DFB48;  }
		/* 821DFB40h case   19:*/		return 0x821DFB44;
	}
	return 0x821DFB44;
} // Block from 821DFAF4h-821DFB44h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821DFB44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFB44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFB44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFB44);
		  /* 821DFB44h */ case    0:  		/* li R11, 1 */
		/* 821DFB44h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821DFB44h case    0:*/		return 0x821DFB48;
	}
	return 0x821DFB48;
} // Block from 821DFB44h-821DFB48h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821DFB48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFB48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFB48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFB48);
		  /* 821DFB48h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821DFB48h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821DFB48h case    0:*/		return 0x821DFB4C;
		  /* 821DFB4Ch */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 821DFB4Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821DFB80;  }
		/* 821DFB4Ch case    1:*/		return 0x821DFB50;
		  /* 821DFB50h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 821DFB50h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821DFB50h case    2:*/		return 0x821DFB54;
		  /* 821DFB54h */ case    3:  		/* mr R3, R20 */
		/* 821DFB54h case    3:*/		regs.R3 = regs.R20;
		/* 821DFB54h case    3:*/		return 0x821DFB58;
		  /* 821DFB58h */ case    4:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821DFB58h case    4:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821DFB58h case    4:*/		return 0x821DFB5C;
		  /* 821DFB5Ch */ case    5:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821DFB5Ch case    5:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821DFB5Ch case    5:*/		return 0x821DFB60;
		  /* 821DFB60h */ case    6:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821DFB60h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821DFB60h case    6:*/		return 0x821DFB64;
		  /* 821DFB64h */ case    7:  		/* bl -505652 */
		/* 821DFB64h case    7:*/		regs.LR = 0x821DFB68; return 0x82164430;
		/* 821DFB64h case    7:*/		return 0x821DFB68;
		  /* 821DFB68h */ case    8:  		/* addi R11, R31, -16 */
		/* 821DFB68h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF0);
		/* 821DFB68h case    8:*/		return 0x821DFB6C;
		  /* 821DFB6Ch */ case    9:  		/* add R11, R3, R11 */
		/* 821DFB6Ch case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821DFB6Ch case    9:*/		return 0x821DFB70;
	}
	return 0x821DFB70;
} // Block from 821DFB48h-821DFB70h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821DFB70h
// Function '?IsolateOutputs@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFB70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFB70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFB70);
		  /* 821DFB70h */ case    0:  		/* lwz R10, <#[R11]> */
		/* 821DFB70h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DFB70h case    0:*/		return 0x821DFB74;
		  /* 821DFB74h */ case    1:  		/* cmplw CR6, R10, R30 */
		/* 821DFB74h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R30);
		/* 821DFB74h case    1:*/		return 0x821DFB78;
		  /* 821DFB78h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 821DFB78h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DFB80;  }
		/* 821DFB78h case    2:*/		return 0x821DFB7C;
		  /* 821DFB7Ch */ case    3:  		/* stw R18, <#[R11]> */
		/* 821DFB7Ch case    3:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R11 + 0x00000000) );
		/* 821DFB7Ch case    3:*/		return 0x821DFB80;
	}
	return 0x821DFB80;
} // Block from 821DFB70h-821DFB80h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DFB80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFB80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFB80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFB80);
		  /* 821DFB80h */ case    0:  		/* lwz R11, <#[R26]> */
		/* 821DFB80h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821DFB80h case    0:*/		return 0x821DFB84;
		  /* 821DFB84h */ case    1:  		/* cmplw CR6, R11, R29 */
		/* 821DFB84h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821DFB84h case    1:*/		return 0x821DFB88;
		  /* 821DFB88h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 821DFB88h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DFB90;  }
		/* 821DFB88h case    2:*/		return 0x821DFB8C;
		  /* 821DFB8Ch */ case    3:  		/* addi R26, R29, 8 */
		/* 821DFB8Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R29,0x8);
		/* 821DFB8Ch case    3:*/		return 0x821DFB90;
	}
	return 0x821DFB90;
} // Block from 821DFB80h-821DFB90h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DFB90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFB90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFB90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFB90);
		  /* 821DFB90h */ case    0:  		/* lwz R29, <#[R26]> */
		/* 821DFB90h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R26 + 0x00000000) );
		/* 821DFB90h case    0:*/		return 0x821DFB94;
		  /* 821DFB94h */ case    1:  		/* b -408 */
		/* 821DFB94h case    1:*/		return 0x821DF9FC;
		/* 821DFB94h case    1:*/		return 0x821DFB98;
	}
	return 0x821DFB98;
} // Block from 821DFB90h-821DFB98h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821DFB98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFB98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFB98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFB98);
		  /* 821DFB98h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821DFB98h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821DFB98h case    0:*/		return 0x821DFB9C;
		  /* 821DFB9Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821DFB9Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DFB9Ch case    1:*/		return 0x821DFBA0;
		  /* 821DFBA0h */ case    2:  		/* bc 12, CR6_EQ, 16 */
		/* 821DFBA0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821DFBB0;  }
		/* 821DFBA0h case    2:*/		return 0x821DFBA4;
		  /* 821DFBA4h */ case    3:  		/* lwz R11, <#[R11]> */
		/* 821DFBA4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821DFBA4h case    3:*/		return 0x821DFBA8;
		  /* 821DFBA8h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821DFBA8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DFBA8h case    4:*/		return 0x821DFBAC;
		  /* 821DFBACh */ case    5:  		/* bc 4, CR6_EQ, 20 */
		/* 821DFBACh case    5:*/		if ( !regs.CR[6].eq ) { return 0x821DFBC0;  }
		/* 821DFBACh case    5:*/		return 0x821DFBB0;
	}
	return 0x821DFBB0;
} // Block from 821DFB98h-821DFBB0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DFBB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFBB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFBB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFBB0);
		  /* 821DFBB0h */ case    0:  		/* mr R5, R20 */
		/* 821DFBB0h case    0:*/		regs.R5 = regs.R20;
		/* 821DFBB0h case    0:*/		return 0x821DFBB4;
		  /* 821DFBB4h */ case    1:  		/* mr R4, R18 */
		/* 821DFBB4h case    1:*/		regs.R4 = regs.R18;
		/* 821DFBB4h case    1:*/		return 0x821DFBB8;
		  /* 821DFBB8h */ case    2:  		/* mr R3, R28 */
		/* 821DFBB8h case    2:*/		regs.R3 = regs.R28;
		/* 821DFBB8h case    2:*/		return 0x821DFBBC;
		  /* 821DFBBCh */ case    3:  		/* bl 327460 */
		/* 821DFBBCh case    3:*/		regs.LR = 0x821DFBC0; return 0x8222FAE0;
		/* 821DFBBCh case    3:*/		return 0x821DFBC0;
	}
	return 0x821DFBC0;
} // Block from 821DFBB0h-821DFBC0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DFBC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFBC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFBC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFBC0);
		  /* 821DFBC0h */ case    0:  		/* rlwinm R11, R25, 0, 0, 30 */
		/* 821DFBC0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R25);
		/* 821DFBC0h case    0:*/		return 0x821DFBC4;
		  /* 821DFBC4h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821DFBC4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821DFBC4h case    1:*/		return 0x821DFBC8;
		  /* 821DFBC8h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DFBC8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DFBC8h case    2:*/		return 0x821DFBCC;
		  /* 821DFBCCh */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821DFBCCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821DFBDC;  }
		/* 821DFBCCh case    3:*/		return 0x821DFBD0;
		  /* 821DFBD0h */ case    4:  		/* mr R25, R11 */
		/* 821DFBD0h case    4:*/		regs.R25 = regs.R11;
		/* 821DFBD0h case    4:*/		return 0x821DFBD4;
		  /* 821DFBD4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821DFBD4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DFBD4h case    5:*/		return 0x821DFBD8;
		  /* 821DFBD8h */ case    6:  		/* bc 4, CR6_EQ, -504 */
		/* 821DFBD8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821DF9E0;  }
		/* 821DFBD8h case    6:*/		return 0x821DFBDC;
	}
	return 0x821DFBDC;
} // Block from 821DFBC0h-821DFBDCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821DFBDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFBDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFBDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFBDC);
		  /* 821DFBDCh */ case    0:  		/* mr R3, R20 */
		/* 821DFBDCh case    0:*/		regs.R3 = regs.R20;
		/* 821DFBDCh case    0:*/		return 0x821DFBE0;
		  /* 821DFBE0h */ case    1:  		/* lwz R29, <#[R21 + 32]> */
		/* 821DFBE0h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R21 + 0x00000020) );
		/* 821DFBE0h case    1:*/		return 0x821DFBE4;
		  /* 821DFBE4h */ case    2:  		/* bl 46908 */
		/* 821DFBE4h case    2:*/		regs.LR = 0x821DFBE8; return 0x821EB320;
		/* 821DFBE4h case    2:*/		return 0x821DFBE8;
		  /* 821DFBE8h */ case    3:  		/* mr R5, R24 */
		/* 821DFBE8h case    3:*/		regs.R5 = regs.R24;
		/* 821DFBE8h case    3:*/		return 0x821DFBEC;
		  /* 821DFBECh */ case    4:  		/* mr R4, R23 */
		/* 821DFBECh case    4:*/		regs.R4 = regs.R23;
		/* 821DFBECh case    4:*/		return 0x821DFBF0;
		  /* 821DFBF0h */ case    5:  		/* mr R3, R20 */
		/* 821DFBF0h case    5:*/		regs.R3 = regs.R20;
		/* 821DFBF0h case    5:*/		return 0x821DFBF4;
		  /* 821DFBF4h */ case    6:  		/* bl -130188 */
		/* 821DFBF4h case    6:*/		regs.LR = 0x821DFBF8; return 0x821BFF68;
		/* 821DFBF4h case    6:*/		return 0x821DFBF8;
		  /* 821DFBF8h */ case    7:  		/* lwz R11, <#[R21 + 8]> */
		/* 821DFBF8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821DFBF8h case    7:*/		return 0x821DFBFC;
		  /* 821DFBFCh */ case    8:  		/* mr R5, R29 */
		/* 821DFBFCh case    8:*/		regs.R5 = regs.R29;
		/* 821DFBFCh case    8:*/		return 0x821DFC00;
		  /* 821DFC00h */ case    9:  		/* rlwinm R11, R11, 0, 27, 25 */
		/* 821DFC00h case    9:*/		cpu::op::rlwinm<0,0,27,25>(regs,&regs.R11,regs.R11);
		/* 821DFC00h case    9:*/		return 0x821DFC04;
		  /* 821DFC04h */ case   10:  		/* mr R4, R19 */
		/* 821DFC04h case   10:*/		regs.R4 = regs.R19;
		/* 821DFC04h case   10:*/		return 0x821DFC08;
		  /* 821DFC08h */ case   11:  		/* stw R11, <#[R21 + 8]> */
		/* 821DFC08h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821DFC08h case   11:*/		return 0x821DFC0C;
		  /* 821DFC0Ch */ case   12:  		/* mr R3, R20 */
		/* 821DFC0Ch case   12:*/		regs.R3 = regs.R20;
		/* 821DFC0Ch case   12:*/		return 0x821DFC10;
		  /* 821DFC10h */ case   13:  		/* lwz R11, <#[R29 + 8]> */
		/* 821DFC10h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821DFC10h case   13:*/		return 0x821DFC14;
		  /* 821DFC14h */ case   14:  		/* rlwinm R11, R11, 0, 27, 25 */
		/* 821DFC14h case   14:*/		cpu::op::rlwinm<0,0,27,25>(regs,&regs.R11,regs.R11);
		/* 821DFC14h case   14:*/		return 0x821DFC18;
		  /* 821DFC18h */ case   15:  		/* stw R11, <#[R29 + 8]> */
		/* 821DFC18h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821DFC18h case   15:*/		return 0x821DFC1C;
		  /* 821DFC1Ch */ case   16:  		/* bl -453420 */
		/* 821DFC1Ch case   16:*/		regs.LR = 0x821DFC20; return 0x821710F0;
		/* 821DFC1Ch case   16:*/		return 0x821DFC20;
		  /* 821DFC20h */ case   17:  		/* mr R31, R3 */
		/* 821DFC20h case   17:*/		regs.R31 = regs.R3;
		/* 821DFC20h case   17:*/		return 0x821DFC24;
		  /* 821DFC24h */ case   18:  		/* li R7, 1 */
		/* 821DFC24h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821DFC24h case   18:*/		return 0x821DFC28;
		  /* 821DFC28h */ case   19:  		/* li R6, 104 */
		/* 821DFC28h case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x68);
		/* 821DFC28h case   19:*/		return 0x821DFC2C;
		  /* 821DFC2Ch */ case   20:  		/* li R5, 0 */
		/* 821DFC2Ch case   20:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DFC2Ch case   20:*/		return 0x821DFC30;
		  /* 821DFC30h */ case   21:  		/* mr R3, R20 */
		/* 821DFC30h case   21:*/		regs.R3 = regs.R20;
		/* 821DFC30h case   21:*/		return 0x821DFC34;
		  /* 821DFC34h */ case   22:  		/* lwz R11, <#[R31]> */
		/* 821DFC34h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821DFC34h case   22:*/		return 0x821DFC38;
		  /* 821DFC38h */ case   23:  		/* rlwinm R11, R11, 0, 19, 6 */
		/* 821DFC38h case   23:*/		cpu::op::rlwinm<0,0,19,6>(regs,&regs.R11,regs.R11);
		/* 821DFC38h case   23:*/		return 0x821DFC3C;
		  /* 821DFC3Ch */ case   24:  		/* rlwinm R11, R11, 0, 2, 0 */
		/* 821DFC3Ch case   24:*/		cpu::op::rlwinm<0,0,2,0>(regs,&regs.R11,regs.R11);
		/* 821DFC3Ch case   24:*/		return 0x821DFC40;
		  /* 821DFC40h */ case   25:  		/* stw R11, <#[R31]> */
		/* 821DFC40h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821DFC40h case   25:*/		return 0x821DFC44;
		  /* 821DFC44h */ case   26:  		/* lwz R4, <#[R21 + 28]> */
		/* 821DFC44h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x0000001C) );
		/* 821DFC44h case   26:*/		return 0x821DFC48;
		  /* 821DFC48h */ case   27:  		/* lwz R11, <#[R19]> */
		/* 821DFC48h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 821DFC48h case   27:*/		return 0x821DFC4C;
		  /* 821DFC4Ch */ case   28:  		/* rlwinm R8, R11, 7, 29, 31 */
		/* 821DFC4Ch case   28:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R8,regs.R11);
		/* 821DFC4Ch case   28:*/		return 0x821DFC50;
		  /* 821DFC50h */ case   29:  		/* bl 281928 */
		/* 821DFC50h case   29:*/		regs.LR = 0x821DFC54; return 0x82224998;
		/* 821DFC50h case   29:*/		return 0x821DFC54;
		  /* 821DFC54h */ case   30:  		/* rlwinm R11, R21, 0, 0, 30 */
		/* 821DFC54h case   30:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R21);
		/* 821DFC54h case   30:*/		return 0x821DFC58;
		  /* 821DFC58h */ case   31:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821DFC58h case   31:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821DFC58h case   31:*/		return 0x821DFC5C;
		  /* 821DFC5Ch */ case   32:  		/* addi R11, R11, 36 */
		/* 821DFC5Ch case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821DFC5Ch case   32:*/		return 0x821DFC60;
		  /* 821DFC60h */ case   33:  		/* addi R10, R10, 36 */
		/* 821DFC60h case   33:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821DFC60h case   33:*/		return 0x821DFC64;
		  /* 821DFC64h */ case   34:  		/* addi R8, R11, -36 */
		/* 821DFC64h case   34:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821DFC64h case   34:*/		return 0x821DFC68;
		  /* 821DFC68h */ case   35:  		/* addi R6, R10, -36 */
		/* 821DFC68h case   35:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821DFC68h case   35:*/		return 0x821DFC6C;
		  /* 821DFC6Ch */ case   36:  		/* addi R9, R10, 4 */
		/* 821DFC6Ch case   36:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821DFC6Ch case   36:*/		return 0x821DFC70;
		  /* 821DFC70h */ case   37:  		/* lwz R7, <#[R11]> */
		/* 821DFC70h case   37:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821DFC70h case   37:*/		return 0x821DFC74;
		  /* 821DFC74h */ case   38:  		/* mr R4, R31 */
		/* 821DFC74h case   38:*/		regs.R4 = regs.R31;
		/* 821DFC74h case   38:*/		return 0x821DFC78;
		  /* 821DFC78h */ case   39:  		/* mr R30, R3 */
		/* 821DFC78h case   39:*/		regs.R30 = regs.R3;
		/* 821DFC78h case   39:*/		return 0x821DFC7C;
		  /* 821DFC7Ch */ case   40:  		/* stw R7, <#[R10]> */
		/* 821DFC7Ch case   40:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821DFC7Ch case   40:*/		return 0x821DFC80;
		  /* 821DFC80h */ case   41:  		/* lwz R7, <#[R11]> */
		/* 821DFC80h case   41:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821DFC80h case   41:*/		return 0x821DFC84;
		  /* 821DFC84h */ case   42:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821DFC84h case   42:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821DFC84h case   42:*/		return 0x821DFC88;
		  /* 821DFC88h */ case   43:  		/* stw R6, <#[R7]> */
		/* 821DFC88h case   43:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821DFC88h case   43:*/		return 0x821DFC8C;
		  /* 821DFC8Ch */ case   44:  		/* stw R8, <#[R10 + 4]> */
		/* 821DFC8Ch case   44:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821DFC8Ch case   44:*/		return 0x821DFC90;
		  /* 821DFC90h */ case   45:  		/* stw R9, <#[R11]> */
		/* 821DFC90h case   45:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821DFC90h case   45:*/		return 0x821DFC94;
		  /* 821DFC94h */ case   46:  		/* bl -424652 */
		/* 821DFC94h case   46:*/		regs.LR = 0x821DFC98; return 0x821781C8;
		/* 821DFC94h case   46:*/		return 0x821DFC98;
		  /* 821DFC98h */ case   47:  		/* stw R3, <#[R30 + 44]> */
		/* 821DFC98h case   47:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 821DFC98h case   47:*/		return 0x821DFC9C;
		  /* 821DFC9Ch */ case   48:  		/* lwz R11, <#[R21 + 28]> */
		/* 821DFC9Ch case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000001C) );
		/* 821DFC9Ch case   48:*/		return 0x821DFCA0;
		  /* 821DFCA0h */ case   49:  		/* li R10, 1 */
		/* 821DFCA0h case   49:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821DFCA0h case   49:*/		return 0x821DFCA4;
		  /* 821DFCA4h */ case   50:  		/* lwz R9, <#[R29 + 28]> */
		/* 821DFCA4h case   50:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x0000001C) );
		/* 821DFCA4h case   50:*/		return 0x821DFCA8;
		  /* 821DFCA8h */ case   51:  		/* lwz R8, <#[R11 + 40]> */
		/* 821DFCA8h case   51:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000028) );
		/* 821DFCA8h case   51:*/		return 0x821DFCAC;
		  /* 821DFCACh */ case   52:  		/* lwz R11, <#[R9 + 48]> */
		/* 821DFCACh case   52:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000030) );
		/* 821DFCACh case   52:*/		return 0x821DFCB0;
		  /* 821DFCB0h */ case   53:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 821DFCB0h case   53:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 821DFCB0h case   53:*/		return 0x821DFCB4;
		  /* 821DFCB4h */ case   54:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 821DFCB4h case   54:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 821DFCB4h case   54:*/		return 0x821DFCB8;
		  /* 821DFCB8h */ case   55:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821DFCB8h case   55:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821DFCB8h case   55:*/		return 0x821DFCBC;
		  /* 821DFCBCh */ case   56:  		/* addi R11, R11, 1 */
		/* 821DFCBCh case   56:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821DFCBCh case   56:*/		return 0x821DFCC0;
		  /* 821DFCC0h */ case   57:  		/* slw R10, R10, R9 */
		/* 821DFCC0h case   57:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821DFCC0h case   57:*/		return 0x821DFCC4;
		  /* 821DFCC4h */ case   58:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821DFCC4h case   58:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821DFCC4h case   58:*/		return 0x821DFCC8;
		  /* 821DFCC8h */ case   59:  		/* lwzx R11, <#[R11 + R8]> */
		/* 821DFCC8h case   59:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 821DFCC8h case   59:*/		return 0x821DFCCC;
		  /* 821DFCCCh */ case   60:  		/* and. R11, R11, R10 */
		/* 821DFCCCh case   60:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821DFCCCh case   60:*/		return 0x821DFCD0;
		  /* 821DFCD0h */ case   61:  		/* bc 4, CR0_EQ, 136 */
		/* 821DFCD0h case   61:*/		if ( !regs.CR[0].eq ) { return 0x821DFD58;  }
		/* 821DFCD0h case   61:*/		return 0x821DFCD4;
		  /* 821DFCD4h */ case   62:  		/* mr R4, R31 */
		/* 821DFCD4h case   62:*/		regs.R4 = regs.R31;
		/* 821DFCD4h case   62:*/		return 0x821DFCD8;
		  /* 821DFCD8h */ case   63:  		/* mr R3, R20 */
		/* 821DFCD8h case   63:*/		regs.R3 = regs.R20;
		/* 821DFCD8h case   63:*/		return 0x821DFCDC;
		  /* 821DFCDCh */ case   64:  		/* bl -164732 */
		/* 821DFCDCh case   64:*/		regs.LR = 0x821DFCE0; return 0x821B7960;
		/* 821DFCDCh case   64:*/		return 0x821DFCE0;
		  /* 821DFCE0h */ case   65:  		/* li R4, 1 */
		/* 821DFCE0h case   65:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821DFCE0h case   65:*/		return 0x821DFCE4;
		  /* 821DFCE4h */ case   66:  		/* mr R3, R20 */
		/* 821DFCE4h case   66:*/		regs.R3 = regs.R20;
		/* 821DFCE4h case   66:*/		return 0x821DFCE8;
		  /* 821DFCE8h */ case   67:  		/* fmr FR4, FR31 */
		/* 821DFCE8h case   67:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821DFCE8h case   67:*/		return 0x821DFCEC;
		  /* 821DFCECh */ case   68:  		/* fmr FR3, FR31 */
		/* 821DFCECh case   68:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821DFCECh case   68:*/		return 0x821DFCF0;
		  /* 821DFCF0h */ case   69:  		/* fmr FR2, FR31 */
		/* 821DFCF0h case   69:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821DFCF0h case   69:*/		return 0x821DFCF4;
		  /* 821DFCF4h */ case   70:  		/* fmr FR1, FR31 */
		/* 821DFCF4h case   70:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821DFCF4h case   70:*/		return 0x821DFCF8;
		  /* 821DFCF8h */ case   71:  		/* bl 306784 */
		/* 821DFCF8h case   71:*/		regs.LR = 0x821DFCFC; return 0x8222AB58;
		/* 821DFCF8h case   71:*/		return 0x821DFCFC;
		  /* 821DFCFCh */ case   72:  		/* mr R4, R3 */
		/* 821DFCFCh case   72:*/		regs.R4 = regs.R3;
		/* 821DFCFCh case   72:*/		return 0x821DFD00;
		  /* 821DFD00h */ case   73:  		/* li R5, 0 */
		/* 821DFD00h case   73:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DFD00h case   73:*/		return 0x821DFD04;
		  /* 821DFD04h */ case   74:  		/* mr R3, R20 */
		/* 821DFD04h case   74:*/		regs.R3 = regs.R20;
		/* 821DFD04h case   74:*/		return 0x821DFD08;
		  /* 821DFD08h */ case   75:  		/* bl -424952 */
		/* 821DFD08h case   75:*/		regs.LR = 0x821DFD0C; return 0x82178110;
		/* 821DFD08h case   75:*/		return 0x821DFD0C;
		  /* 821DFD0Ch */ case   76:  		/* mr R7, R3 */
		/* 821DFD0Ch case   76:*/		regs.R7 = regs.R3;
		/* 821DFD0Ch case   76:*/		return 0x821DFD10;
		  /* 821DFD10h */ case   77:  		/* mr R6, R3 */
		/* 821DFD10h case   77:*/		regs.R6 = regs.R3;
		/* 821DFD10h case   77:*/		return 0x821DFD14;
		  /* 821DFD14h */ case   78:  		/* addi R5, R24, 24 */
		/* 821DFD14h case   78:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R24,0x18);
		/* 821DFD14h case   78:*/		return 0x821DFD18;
		  /* 821DFD18h */ case   79:  		/* mr R4, R24 */
		/* 821DFD18h case   79:*/		regs.R4 = regs.R24;
		/* 821DFD18h case   79:*/		return 0x821DFD1C;
		  /* 821DFD1Ch */ case   80:  		/* mr R3, R20 */
		/* 821DFD1Ch case   80:*/		regs.R3 = regs.R20;
		/* 821DFD1Ch case   80:*/		return 0x821DFD20;
		  /* 821DFD20h */ case   81:  		/* bl -417512 */
		/* 821DFD20h case   81:*/		regs.LR = 0x821DFD24; return 0x82179E38;
		/* 821DFD20h case   81:*/		return 0x821DFD24;
		  /* 821DFD24h */ case   82:  		/* mr R4, R3 */
		/* 821DFD24h case   82:*/		regs.R4 = regs.R3;
		/* 821DFD24h case   82:*/		return 0x821DFD28;
		  /* 821DFD28h */ case   83:  		/* li R5, 0 */
		/* 821DFD28h case   83:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821DFD28h case   83:*/		return 0x821DFD2C;
		  /* 821DFD2Ch */ case   84:  		/* mr R3, R20 */
		/* 821DFD2Ch case   84:*/		regs.R3 = regs.R20;
		/* 821DFD2Ch case   84:*/		return 0x821DFD30;
		  /* 821DFD30h */ case   85:  		/* bl -424992 */
		/* 821DFD30h case   85:*/		regs.LR = 0x821DFD34; return 0x82178110;
		/* 821DFD30h case   85:*/		return 0x821DFD34;
		  /* 821DFD34h */ case   86:  		/* lwz R29, <#[R31 + 12]> */
		/* 821DFD34h case   86:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x0000000C) );
		/* 821DFD34h case   86:*/		return 0x821DFD38;
		  /* 821DFD38h */ case   87:  		/* mr R27, R3 */
		/* 821DFD38h case   87:*/		regs.R27 = regs.R3;
		/* 821DFD38h case   87:*/		return 0x821DFD3C;
		  /* 821DFD3Ch */ case   88:  		/* lwz R11, <#[R29 + 8]> */
		/* 821DFD3Ch case   88:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821DFD3Ch case   88:*/		return 0x821DFD40;
		  /* 821DFD40h */ case   89:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821DFD40h case   89:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821DFD40h case   89:*/		return 0x821DFD44;
		  /* 821DFD44h */ case   90:  		/* cmplwi CR6, R11, 14336 */
		/* 821DFD44h case   90:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821DFD44h case   90:*/		return 0x821DFD48;
		  /* 821DFD48h */ case   91:  		/* bc 4, CR6_EQ, 128 */
		/* 821DFD48h case   91:*/		if ( !regs.CR[6].eq ) { return 0x821DFDC8;  }
		/* 821DFD48h case   91:*/		return 0x821DFD4C;
		  /* 821DFD4Ch */ case   92:  		/* mr R4, R3 */
		/* 821DFD4Ch case   92:*/		regs.R4 = regs.R3;
		/* 821DFD4Ch case   92:*/		return 0x821DFD50;
		  /* 821DFD50h */ case   93:  		/* mr R3, R29 */
		/* 821DFD50h case   93:*/		regs.R3 = regs.R29;
		/* 821DFD50h case   93:*/		return 0x821DFD54;
		  /* 821DFD54h */ case   94:  		/* bl -424844 */
		/* 821DFD54h case   94:*/		regs.LR = 0x821DFD58; return 0x821781C8;
		/* 821DFD54h case   94:*/		return 0x821DFD58;
	}
	return 0x821DFD58;
} // Block from 821DFBDCh-821DFD58h (95 instructions)

//////////////////////////////////////////////////////
// Block at 821DFD58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFD58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFD58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFD58);
		  /* 821DFD58h */ case    0:  		/* mr R4, R30 */
		/* 821DFD58h case    0:*/		regs.R4 = regs.R30;
		/* 821DFD58h case    0:*/		return 0x821DFD5C;
		  /* 821DFD5Ch */ case    1:  		/* mr R3, R20 */
		/* 821DFD5Ch case    1:*/		regs.R3 = regs.R20;
		/* 821DFD5Ch case    1:*/		return 0x821DFD60;
		  /* 821DFD60h */ case    2:  		/* bl -425312 */
		/* 821DFD60h case    2:*/		regs.LR = 0x821DFD64; return 0x82178000;
		/* 821DFD60h case    2:*/		return 0x821DFD64;
		  /* 821DFD64h */ case    3:  		/* lwz R11, <#[R20 + 44]> */
		/* 821DFD64h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000002C) );
		/* 821DFD64h case    3:*/		return 0x821DFD68;
		  /* 821DFD68h */ case    4:  		/* mr R7, R3 */
		/* 821DFD68h case    4:*/		regs.R7 = regs.R3;
		/* 821DFD68h case    4:*/		return 0x821DFD6C;
		  /* 821DFD6Ch */ case    5:  		/* ori R11, R11, 4 */
		/* 821DFD6Ch case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821DFD6Ch case    5:*/		return 0x821DFD70;
		  /* 821DFD70h */ case    6:  		/* mr R6, R3 */
		/* 821DFD70h case    6:*/		regs.R6 = regs.R3;
		/* 821DFD70h case    6:*/		return 0x821DFD74;
		  /* 821DFD74h */ case    7:  		/* stw R11, <#[R20 + 44]> */
		/* 821DFD74h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R20 + 0x0000002C) );
		/* 821DFD74h case    7:*/		return 0x821DFD78;
		  /* 821DFD78h */ case    8:  		/* mr R5, R21 */
		/* 821DFD78h case    8:*/		regs.R5 = regs.R21;
		/* 821DFD78h case    8:*/		return 0x821DFD7C;
		  /* 821DFD7Ch */ case    9:  		/* li R4, 0 */
		/* 821DFD7Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821DFD7Ch case    9:*/		return 0x821DFD80;
		  /* 821DFD80h */ case   10:  		/* mr R3, R20 */
		/* 821DFD80h case   10:*/		regs.R3 = regs.R20;
		/* 821DFD80h case   10:*/		return 0x821DFD84;
		  /* 821DFD84h */ case   11:  		/* bl -270028 */
		/* 821DFD84h case   11:*/		regs.LR = 0x821DFD88; return 0x8219DEB8;
		/* 821DFD84h case   11:*/		return 0x821DFD88;
		  /* 821DFD88h */ case   12:  		/* lwz R11, <#[R3 + 20]> */
		/* 821DFD88h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 821DFD88h case   12:*/		return 0x821DFD8C;
		  /* 821DFD8Ch */ case   13:  		/* lwz R10, <#[R3 + 8]> */
		/* 821DFD8Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821DFD8Ch case   13:*/		return 0x821DFD90;
		  /* 821DFD90h */ case   14:  		/* mr R8, R21 */
		/* 821DFD90h case   14:*/		regs.R8 = regs.R21;
		/* 821DFD90h case   14:*/		return 0x821DFD94;
		  /* 821DFD94h */ case   15:  		/* ori R11, R11, 2 */
		/* 821DFD94h case   15:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821DFD94h case   15:*/		return 0x821DFD98;
		  /* 821DFD98h */ case   16:  		/* ori R10, R10, 32 */
		/* 821DFD98h case   16:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x20);
		/* 821DFD98h case   16:*/		return 0x821DFD9C;
		  /* 821DFD9Ch */ case   17:  		/* stw R11, <#[R3 + 20]> */
		/* 821DFD9Ch case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 821DFD9Ch case   17:*/		return 0x821DFDA0;
		  /* 821DFDA0h */ case   18:  		/* stw R10, <#[R3 + 8]> */
		/* 821DFDA0h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821DFDA0h case   18:*/		return 0x821DFDA4;
		  /* 821DFDA4h */ case   19:  		/* lwz R11, <#[R8]> */
		/* 821DFDA4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821DFDA4h case   19:*/		return 0x821DFDA8;
		  /* 821DFDA8h */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 821DFDA8h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DFDA8h case   20:*/		return 0x821DFDAC;
		  /* 821DFDACh */ case   21:  		/* bc 12, CR6_EQ, 136 */
		/* 821DFDACh case   21:*/		if ( regs.CR[6].eq ) { return 0x821DFE34;  }
		/* 821DFDACh case   21:*/		return 0x821DFDB0;
		  /* 821DFDB0h */ case   22:  		/* lwz R10, <#[R11]> */
		/* 821DFDB0h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DFDB0h case   22:*/		return 0x821DFDB4;
		  /* 821DFDB4h */ case   23:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821DFDB4h case   23:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821DFDB4h case   23:*/		return 0x821DFDB8;
		  /* 821DFDB8h */ case   24:  		/* bc 4, CR0_EQ, 104 */
		/* 821DFDB8h case   24:*/		if ( !regs.CR[0].eq ) { return 0x821DFE20;  }
		/* 821DFDB8h case   24:*/		return 0x821DFDBC;
		  /* 821DFDBCh */ case   25:  		/* lwz R10, <#[R11 + 16]> */
		/* 821DFDBCh case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821DFDBCh case   25:*/		return 0x821DFDC0;
		  /* 821DFDC0h */ case   26:  		/* lwz R9, <#[R10]> */
		/* 821DFDC0h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DFDC0h case   26:*/		return 0x821DFDC4;
		  /* 821DFDC4h */ case   27:  		/* b 60 */
		/* 821DFDC4h case   27:*/		return 0x821DFE00;
		/* 821DFDC4h case   27:*/		return 0x821DFDC8;
	}
	return 0x821DFDC8;
} // Block from 821DFD58h-821DFDC8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821DFDC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFDC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFDC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFDC8);
		  /* 821DFDC8h */ case    0:  		/* li R31, 0 */
		/* 821DFDC8h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821DFDC8h case    0:*/		return 0x821DFDCC;
		  /* 821DFDCCh */ case    1:  		/* addi R28, R29, 40 */
		/* 821DFDCCh case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R29,0x28);
		/* 821DFDCCh case    1:*/		return 0x821DFDD0;
		  /* 821DFDD0h */ case    2:  		/* lwz R11, <#[R29 + 8]> */
		/* 821DFDD0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821DFDD0h case    2:*/		return 0x821DFDD4;
		  /* 821DFDD4h */ case    3:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821DFDD4h case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821DFDD4h case    3:*/		return 0x821DFDD8;
		  /* 821DFDD8h */ case    4:  		/* cmplw CR6, R31, R11 */
		/* 821DFDD8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821DFDD8h case    4:*/		return 0x821DFDDC;
		  /* 821DFDDCh */ case    5:  		/* bc 4, CR6_LT, -132 */
		/* 821DFDDCh case    5:*/		if ( !regs.CR[6].lt ) { return 0x821DFD58;  }
		/* 821DFDDCh case    5:*/		return 0x821DFDE0;
		  /* 821DFDE0h */ case    6:  		/* lwzu R11, <#[R28 + 4]> */
		/* 821DFDE0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		regs.R28 = (uint32)(regs.R28 + 0x00000004);
		/* 821DFDE0h case    6:*/		return 0x821DFDE4;
		  /* 821DFDE4h */ case    7:  		/* mr R4, R27 */
		/* 821DFDE4h case    7:*/		regs.R4 = regs.R27;
		/* 821DFDE4h case    7:*/		return 0x821DFDE8;
		  /* 821DFDE8h */ case    8:  		/* lwz R3, <#[R11 + 12]> */
		/* 821DFDE8h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DFDE8h case    8:*/		return 0x821DFDEC;
		  /* 821DFDECh */ case    9:  		/* bl -424996 */
		/* 821DFDECh case    9:*/		regs.LR = 0x821DFDF0; return 0x821781C8;
		/* 821DFDECh case    9:*/		return 0x821DFDF0;
		  /* 821DFDF0h */ case   10:  		/* addi R31, R31, 1 */
		/* 821DFDF0h case   10:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821DFDF0h case   10:*/		return 0x821DFDF4;
		  /* 821DFDF4h */ case   11:  		/* b -36 */
		/* 821DFDF4h case   11:*/		return 0x821DFDD0;
		/* 821DFDF4h case   11:*/		return 0x821DFDF8;
		  /* 821DFDF8h */ case   12:  		/* addi R10, R9, 4 */
		/* 821DFDF8h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x4);
		/* 821DFDF8h case   12:*/		return 0x821DFDFC;
		  /* 821DFDFCh */ case   13:  		/* lwz R9, <#[R9 + 4]> */
		/* 821DFDFCh case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821DFDFCh case   13:*/		return 0x821DFE00;
	}
	return 0x821DFE00;
} // Block from 821DFDC8h-821DFE00h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821DFE00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFE00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFE00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFE00);
		  /* 821DFE00h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821DFE00h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821DFE00h case    0:*/		return 0x821DFE04;
		  /* 821DFE04h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821DFE04h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DFDF8;  }
		/* 821DFE04h case    1:*/		return 0x821DFE08;
		  /* 821DFE08h */ case    2:  		/* lwz R9, <#[R11 + 4]> */
		/* 821DFE08h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821DFE08h case    2:*/		return 0x821DFE0C;
		  /* 821DFE0Ch */ case    3:  		/* stw R9, <#[R10]> */
		/* 821DFE0Ch case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DFE0Ch case    3:*/		return 0x821DFE10;
		  /* 821DFE10h */ case    4:  		/* lwz R10, <#[R3]> */
		/* 821DFE10h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821DFE10h case    4:*/		return 0x821DFE14;
		  /* 821DFE14h */ case    5:  		/* stw R10, <#[R11 + 4]> */
		/* 821DFE14h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821DFE14h case    5:*/		return 0x821DFE18;
		  /* 821DFE18h */ case    6:  		/* stw R11, <#[R3]> */
		/* 821DFE18h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821DFE18h case    6:*/		return 0x821DFE1C;
		  /* 821DFE1Ch */ case    7:  		/* stw R3, <#[R11 + 16]> */
		/* 821DFE1Ch case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000010) );
		/* 821DFE1Ch case    7:*/		return 0x821DFE20;
	}
	return 0x821DFE20;
} // Block from 821DFE00h-821DFE20h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821DFE20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFE20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFE20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFE20);
		  /* 821DFE20h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821DFE20h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821DFE20h case    0:*/		return 0x821DFE24;
		  /* 821DFE24h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821DFE24h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821DFE24h case    1:*/		return 0x821DFE28;
		  /* 821DFE28h */ case    2:  		/* bc 4, CR6_EQ, -132 */
		/* 821DFE28h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DFDA4;  }
		/* 821DFE28h case    2:*/		return 0x821DFE2C;
		  /* 821DFE2Ch */ case    3:  		/* addi R8, R11, 4 */
		/* 821DFE2Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 821DFE2Ch case    3:*/		return 0x821DFE30;
		  /* 821DFE30h */ case    4:  		/* b -140 */
		/* 821DFE30h case    4:*/		return 0x821DFDA4;
		/* 821DFE30h case    4:*/		return 0x821DFE34;
	}
	return 0x821DFE34;
} // Block from 821DFE20h-821DFE34h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DFE34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFE34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFE34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFE34);
		  /* 821DFE34h */ case    0:  		/* addi R8, R21, 4 */
		/* 821DFE34h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R21,0x4);
		/* 821DFE34h case    0:*/		return 0x821DFE38;
		  /* 821DFE38h */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821DFE38h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821DFE38h case    1:*/		return 0x821DFE3C;
		  /* 821DFE3Ch */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821DFE3Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821DFE3Ch case    2:*/		return 0x821DFE40;
		  /* 821DFE40h */ case    3:  		/* bc 12, CR6_EQ, 92 */
		/* 821DFE40h case    3:*/		if ( regs.CR[6].eq ) { return 0x821DFE9C;  }
		/* 821DFE40h case    3:*/		return 0x821DFE44;
		  /* 821DFE44h */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 821DFE44h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821DFE44h case    4:*/		return 0x821DFE48;
		  /* 821DFE48h */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821DFE48h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DFE48h case    5:*/		return 0x821DFE4C;
		  /* 821DFE4Ch */ case    6:  		/* bc 12, CR6_EQ, 60 */
		/* 821DFE4Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821DFE88;  }
		/* 821DFE4Ch case    6:*/		return 0x821DFE50;
		  /* 821DFE50h */ case    7:  		/* lwz R10, <#[R11 + 12]> */
		/* 821DFE50h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DFE50h case    7:*/		return 0x821DFE54;
		  /* 821DFE54h */ case    8:  		/* addi R10, R10, 4 */
		/* 821DFE54h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821DFE54h case    8:*/		return 0x821DFE58;
		  /* 821DFE58h */ case    9:  		/* lwz R9, <#[R10]> */
		/* 821DFE58h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DFE58h case    9:*/		return 0x821DFE5C;
		  /* 821DFE5Ch */ case   10:  		/* b 12 */
		/* 821DFE5Ch case   10:*/		return 0x821DFE68;
		/* 821DFE5Ch case   10:*/		return 0x821DFE60;
		  /* 821DFE60h */ case   11:  		/* addi R10, R9, 8 */
		/* 821DFE60h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821DFE60h case   11:*/		return 0x821DFE64;
		  /* 821DFE64h */ case   12:  		/* lwz R9, <#[R9 + 8]> */
		/* 821DFE64h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821DFE64h case   12:*/		return 0x821DFE68;
	}
	return 0x821DFE68;
} // Block from 821DFE34h-821DFE68h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821DFE68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFE68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFE68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFE68);
		  /* 821DFE68h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821DFE68h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821DFE68h case    0:*/		return 0x821DFE6C;
		  /* 821DFE6Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821DFE6Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821DFE60;  }
		/* 821DFE6Ch case    1:*/		return 0x821DFE70;
		  /* 821DFE70h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821DFE70h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821DFE70h case    2:*/		return 0x821DFE74;
		  /* 821DFE74h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821DFE74h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821DFE74h case    3:*/		return 0x821DFE78;
		  /* 821DFE78h */ case    4:  		/* lwz R10, <#[R3 + 4]> */
		/* 821DFE78h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821DFE78h case    4:*/		return 0x821DFE7C;
		  /* 821DFE7Ch */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821DFE7Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821DFE7Ch case    5:*/		return 0x821DFE80;
		  /* 821DFE80h */ case    6:  		/* stw R11, <#[R3 + 4]> */
		/* 821DFE80h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821DFE80h case    6:*/		return 0x821DFE84;
		  /* 821DFE84h */ case    7:  		/* stw R3, <#[R11 + 12]> */
		/* 821DFE84h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 821DFE84h case    7:*/		return 0x821DFE88;
	}
	return 0x821DFE88;
} // Block from 821DFE68h-821DFE88h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821DFE88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFE88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFE88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFE88);
		  /* 821DFE88h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821DFE88h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821DFE88h case    0:*/		return 0x821DFE8C;
		  /* 821DFE8Ch */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821DFE8Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821DFE8Ch case    1:*/		return 0x821DFE90;
		  /* 821DFE90h */ case    2:  		/* bc 4, CR6_EQ, -88 */
		/* 821DFE90h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821DFE38;  }
		/* 821DFE90h case    2:*/		return 0x821DFE94;
		  /* 821DFE94h */ case    3:  		/* addi R8, R11, 8 */
		/* 821DFE94h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821DFE94h case    3:*/		return 0x821DFE98;
		  /* 821DFE98h */ case    4:  		/* b -96 */
		/* 821DFE98h case    4:*/		return 0x821DFE38;
		/* 821DFE98h case    4:*/		return 0x821DFE9C;
	}
	return 0x821DFE9C;
} // Block from 821DFE88h-821DFE9Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DFE9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFE9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFE9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFE9C);
		  /* 821DFE9Ch */ case    0:  		/* lwz R11, <#[R21 + 8]> */
		/* 821DFE9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821DFE9Ch case    0:*/		return 0x821DFEA0;
		  /* 821DFEA0h */ case    1:  		/* rlwinm. R11, R11, 7, 31, 31 */
		/* 821DFEA0h case    1:*/		cpu::op::rlwinm<1,7,31,31>(regs,&regs.R11,regs.R11);
		/* 821DFEA0h case    1:*/		return 0x821DFEA4;
		  /* 821DFEA4h */ case    2:  		/* bc 12, CR0_EQ, 64 */
		/* 821DFEA4h case    2:*/		if ( regs.CR[0].eq ) { return 0x821DFEE4;  }
		/* 821DFEA4h case    2:*/		return 0x821DFEA8;
		  /* 821DFEA8h */ case    3:  		/* lwz R9, <#[R3 + 8]> */
		/* 821DFEA8h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821DFEA8h case    3:*/		return 0x821DFEAC;
		  /* 821DFEACh */ case    4:  		/* li R10, 4 */
		/* 821DFEACh case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 821DFEACh case    4:*/		return 0x821DFEB0;
		  /* 821DFEB0h */ case    5:  		/* addi R11, R18, 92 */
		/* 821DFEB0h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R18,0x5C);
		/* 821DFEB0h case    5:*/		return 0x821DFEB4;
		  /* 821DFEB4h */ case    6:  		/* oris R9, R9, 512 */
		/* 821DFEB4h case    6:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0x200);
		/* 821DFEB4h case    6:*/		return 0x821DFEB8;
		  /* 821DFEB8h */ case    7:  		/* stw R9, <#[R3 + 8]> */
		/* 821DFEB8h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821DFEB8h case    7:*/		return 0x821DFEBC;
		  /* 821DFEBCh */ case    8:  		/* mtspr CTR, R10 */
		/* 821DFEBCh case    8:*/		regs.CTR = regs.R10;
		/* 821DFEBCh case    8:*/		return 0x821DFEC0;
		  /* 821DFEC0h */ case    9:  		/* lwz R10, <#[R11]> */
		/* 821DFEC0h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821DFEC0h case    9:*/		return 0x821DFEC4;
		  /* 821DFEC4h */ case   10:  		/* cmplw CR6, R10, R21 */
		/* 821DFEC4h case   10:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R21);
		/* 821DFEC4h case   10:*/		return 0x821DFEC8;
		  /* 821DFEC8h */ case   11:  		/* bc 4, CR6_EQ, 8 */
		/* 821DFEC8h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821DFED0;  }
		/* 821DFEC8h case   11:*/		return 0x821DFECC;
		  /* 821DFECCh */ case   12:  		/* stw R3, <#[R11]> */
		/* 821DFECCh case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000000) );
		/* 821DFECCh case   12:*/		return 0x821DFED0;
	}
	return 0x821DFED0;
} // Block from 821DFE9Ch-821DFED0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821DFED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFED0);
		  /* 821DFED0h */ case    0:  		/* addi R11, R11, 4 */
		/* 821DFED0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821DFED0h case    0:*/		return 0x821DFED4;
		  /* 821DFED4h */ case    1:  		/* bc 16, CR0_LT, -20 */
		/* 821DFED4h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821DFEC0;  }
		/* 821DFED4h case    1:*/		return 0x821DFED8;
		  /* 821DFED8h */ case    2:  		/* lwz R11, <#[R21 + 8]> */
		/* 821DFED8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821DFED8h case    2:*/		return 0x821DFEDC;
		  /* 821DFEDCh */ case    3:  		/* rlwinm R11, R11, 0, 7, 5 */
		/* 821DFEDCh case    3:*/		cpu::op::rlwinm<0,0,7,5>(regs,&regs.R11,regs.R11);
		/* 821DFEDCh case    3:*/		return 0x821DFEE0;
		  /* 821DFEE0h */ case    4:  		/* stw R11, <#[R21 + 8]> */
		/* 821DFEE0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821DFEE0h case    4:*/		return 0x821DFEE4;
	}
	return 0x821DFEE4;
} // Block from 821DFED0h-821DFEE4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821DFEE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFEE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFEE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFEE4);
		  /* 821DFEE4h */ case    0:  		/* mr R3, R20 */
		/* 821DFEE4h case    0:*/		regs.R3 = regs.R20;
		/* 821DFEE4h case    0:*/		return 0x821DFEE8;
		  /* 821DFEE8h */ case    1:  		/* bl -89520 */
		/* 821DFEE8h case    1:*/		regs.LR = 0x821DFEEC; return 0x821CA138;
		/* 821DFEE8h case    1:*/		return 0x821DFEEC;
		  /* 821DFEECh */ case    2:  		/* li R4, 1 */
		/* 821DFEECh case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821DFEECh case    2:*/		return 0x821DFEF0;
		  /* 821DFEF0h */ case    3:  		/* mr R3, R20 */
		/* 821DFEF0h case    3:*/		regs.R3 = regs.R20;
		/* 821DFEF0h case    3:*/		return 0x821DFEF4;
		  /* 821DFEF4h */ case    4:  		/* bl -26236 */
		/* 821DFEF4h case    4:*/		regs.LR = 0x821DFEF8; return 0x821D9878;
		/* 821DFEF4h case    4:*/		return 0x821DFEF8;
		  /* 821DFEF8h */ case    5:  		/* b -2556 */
		/* 821DFEF8h case    5:*/		return 0x821DF4FC;
		/* 821DFEF8h case    5:*/		return 0x821DFEFC;
	}
	return 0x821DFEFC;
} // Block from 821DFEE4h-821DFEFCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821DFEFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFEFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFEFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFEFC);
		  /* 821DFEFCh */ case    0:  		/* lis R11, -32252 */
		/* 821DFEFCh case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821DFEFCh case    0:*/		return 0x821DFF00;
		  /* 821DFF00h */ case    1:  		/* li R4, 3500 */
		/* 821DFF00h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xDAC);
		/* 821DFF00h case    1:*/		return 0x821DFF04;
		  /* 821DFF04h */ case    2:  		/* addi R5, R11, -16032 */
		/* 821DFF04h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0xFFFFC160);
		/* 821DFF04h case    2:*/		return 0x821DFF08;
		  /* 821DFF08h */ case    3:  		/* bl -581792 */
		/* 821DFF08h case    3:*/		regs.LR = 0x821DFF0C; return 0x82151E68;
		/* 821DFF08h case    3:*/		return 0x821DFF0C;
	}
	return 0x821DFF0C;
} // Block from 821DFEFCh-821DFF0Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DFF0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFF0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFF0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFF0C);
		  /* 821DFF0Ch */ case    0:  		/* lwz R11, <#[R20 + 40]> */
		/* 821DFF0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000028) );
		/* 821DFF0Ch case    0:*/		return 0x821DFF10;
		  /* 821DFF10h */ case    1:  		/* lwz R10, <#[R20 + 44]> */
		/* 821DFF10h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000002C) );
		/* 821DFF10h case    1:*/		return 0x821DFF14;
		  /* 821DFF14h */ case    2:  		/* addi R11, R11, -32768 */
		/* 821DFF14h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFF8000);
		/* 821DFF14h case    2:*/		return 0x821DFF18;
		  /* 821DFF18h */ case    3:  		/* rlwinm. R10, R10, 0, 27, 27 */
		/* 821DFF18h case    3:*/		cpu::op::rlwinm<1,0,27,27>(regs,&regs.R10,regs.R10);
		/* 821DFF18h case    3:*/		return 0x821DFF1C;
		  /* 821DFF1Ch */ case    4:  		/* stw R11, <#[R20 + 40]> */
		/* 821DFF1Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R20 + 0x00000028) );
		/* 821DFF1Ch case    4:*/		return 0x821DFF20;
		  /* 821DFF20h */ case    5:  		/* bc 4, CR0_EQ, 16 */
		/* 821DFF20h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821DFF30;  }
		/* 821DFF20h case    5:*/		return 0x821DFF24;
		  /* 821DFF24h */ case    6:  		/* lwz R11, <#[R17 + 48]> */
		/* 821DFF24h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000030) );
		/* 821DFF24h case    6:*/		return 0x821DFF28;
		  /* 821DFF28h */ case    7:  		/* rlwinm R11, R11, 0, 4, 2 */
		/* 821DFF28h case    7:*/		cpu::op::rlwinm<0,0,4,2>(regs,&regs.R11,regs.R11);
		/* 821DFF28h case    7:*/		return 0x821DFF2C;
		  /* 821DFF2Ch */ case    8:  		/* stw R11, <#[R17 + 48]> */
		/* 821DFF2Ch case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x00000030) );
		/* 821DFF2Ch case    8:*/		return 0x821DFF30;
	}
	return 0x821DFF30;
} // Block from 821DFF0Ch-821DFF30h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821DFF30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFF30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFF30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFF30);
		  /* 821DFF30h */ case    0:  		/* addi R1, R1, 240 */
		/* 821DFF30h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 821DFF30h case    0:*/		return 0x821DFF34;
		  /* 821DFF34h */ case    1:  		/* lfd FR31, <#[R1 - 136]> */
		/* 821DFF34h case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF78) );
		/* 821DFF34h case    1:*/		return 0x821DFF38;
		  /* 821DFF38h */ case    2:  		/* b -1371324 */
		/* 821DFF38h case    2:*/		return 0x8209127C;
		/* 821DFF38h case    2:*/		return 0x821DFF3C;
		  /* 821DFF3Ch */ case    3:  		/* nop */
		/* 821DFF3Ch case    3:*/		cpu::op::nop();
		/* 821DFF3Ch case    3:*/		return 0x821DFF40;
	}
	return 0x821DFF40;
} // Block from 821DFF30h-821DFF40h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821DFF40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821DFF40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821DFF40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821DFF40);
		  /* 821DFF40h */ case    0:  		/* mfspr R12, LR */
		/* 821DFF40h case    0:*/		regs.R12 = regs.LR;
		/* 821DFF40h case    0:*/		return 0x821DFF44;
		  /* 821DFF44h */ case    1:  		/* bl -1371428 */
		/* 821DFF44h case    1:*/		regs.LR = 0x821DFF48; return 0x82091220;
		/* 821DFF44h case    1:*/		return 0x821DFF48;
		  /* 821DFF48h */ case    2:  		/* addi R12, R1, -152 */
		/* 821DFF48h case    2:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R1,0xFFFFFF68);
		/* 821DFF48h case    2:*/		return 0x821DFF4C;
		  /* 821DFF4Ch */ case    3:  		/* bl -1370960 */
		/* 821DFF4Ch case    3:*/		regs.LR = 0x821DFF50; return 0x820913FC;
		/* 821DFF4Ch case    3:*/		return 0x821DFF50;
		  /* 821DFF50h */ case    4:  		/* stwu R1, <#[R1 - 784]> */
		/* 821DFF50h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFCF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFCF0);
		/* 821DFF50h case    4:*/		return 0x821DFF54;
		  /* 821DFF54h */ case    5:  		/* lis R11, -32256 */
		/* 821DFF54h case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821DFF54h case    5:*/		return 0x821DFF58;
		  /* 821DFF58h */ case    6:  		/* stw R3, <#[R1 + 804]> */
		/* 821DFF58h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000324) );
		/* 821DFF58h case    6:*/		return 0x821DFF5C;
		  /* 821DFF5Ch */ case    7:  		/* lis R10, -32252 */
		/* 821DFF5Ch case    7:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 821DFF5Ch case    7:*/		return 0x821DFF60;
		  /* 821DFF60h */ case    8:  		/* lis R9, -32252 */
		/* 821DFF60h case    8:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 821DFF60h case    8:*/		return 0x821DFF64;
		  /* 821DFF64h */ case    9:  		/* lis R8, -32252 */
		/* 821DFF64h case    9:*/		cpu::op::lis<0>(regs,&regs.R8,0xFFFF8204);
		/* 821DFF64h case    9:*/		return 0x821DFF68;
		  /* 821DFF68h */ case   10:  		/* lis R7, -32256 */
		/* 821DFF68h case   10:*/		cpu::op::lis<0>(regs,&regs.R7,0xFFFF8200);
		/* 821DFF68h case   10:*/		return 0x821DFF6C;
		  /* 821DFF6Ch */ case   11:  		/* lfs FR27, <#[R11 + 1792]> */
		/* 821DFF6Ch case   11:*/		cpu::mem::load32f( regs, &regs.FR27, (uint32)(regs.R11 + 0x00000700) );
		/* 821DFF6Ch case   11:*/		return 0x821DFF70;
		  /* 821DFF70h */ case   12:  		/* lis R6, -32256 */
		/* 821DFF70h case   12:*/		cpu::op::lis<0>(regs,&regs.R6,0xFFFF8200);
		/* 821DFF70h case   12:*/		return 0x821DFF74;
		  /* 821DFF74h */ case   13:  		/* lfd FR22, <#[R10 - 15768]> */
		/* 821DFF74h case   13:*/		cpu::mem::load64f( regs, &regs.FR22, (uint32)(regs.R10 + 0xFFFFC268) );
		/* 821DFF74h case   13:*/		return 0x821DFF78;
		  /* 821DFF78h */ case   14:  		/* lis R11, -32256 */
		/* 821DFF78h case   14:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821DFF78h case   14:*/		return 0x821DFF7C;
		  /* 821DFF7Ch */ case   15:  		/* lfd FR23, <#[R9 - 15776]> */
		/* 821DFF7Ch case   15:*/		cpu::mem::load64f( regs, &regs.FR23, (uint32)(regs.R9 + 0xFFFFC260) );
		/* 821DFF7Ch case   15:*/		return 0x821DFF80;
		  /* 821DFF80h */ case   16:  		/* lis R10, -32252 */
		/* 821DFF80h case   16:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 821DFF80h case   16:*/		return 0x821DFF84;
		  /* 821DFF84h */ case   17:  		/* lis R9, -32252 */
		/* 821DFF84h case   17:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8204);
		/* 821DFF84h case   17:*/		return 0x821DFF88;
		  /* 821DFF88h */ case   18:  		/* lfd FR26, <#[R8 - 15784]> */
		/* 821DFF88h case   18:*/		cpu::mem::load64f( regs, &regs.FR26, (uint32)(regs.R8 + 0xFFFFC258) );
		/* 821DFF88h case   18:*/		return 0x821DFF8C;
		  /* 821DFF8Ch */ case   19:  		/* lfd FR21, <#[R7 + 1848]> */
		/* 821DFF8Ch case   19:*/		cpu::mem::load64f( regs, &regs.FR21, (uint32)(regs.R7 + 0x00000738) );
		/* 821DFF8Ch case   19:*/		return 0x821DFF90;
		  /* 821DFF90h */ case   20:  		/* rlwinm R20, R3, 0, 0, 31 */
		/* 821DFF90h case   20:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R20,regs.R3);
		/* 821DFF90h case   20:*/		return 0x821DFF94;
		  /* 821DFF94h */ case   21:  		/* lfs FR29, <#[R6 + 1816]> */
		/* 821DFF94h case   21:*/		cpu::mem::load32f( regs, &regs.FR29, (uint32)(regs.R6 + 0x00000718) );
		/* 821DFF94h case   21:*/		return 0x821DFF98;
		  /* 821DFF98h */ case   22:  		/* lfd FR28, <#[R11 + 1808]> */
		/* 821DFF98h case   22:*/		cpu::mem::load64f( regs, &regs.FR28, (uint32)(regs.R11 + 0x00000710) );
		/* 821DFF98h case   22:*/		return 0x821DFF9C;
		  /* 821DFF9Ch */ case   23:  		/* lfd FR24, <#[R10 - 15792]> */
		/* 821DFF9Ch case   23:*/		cpu::mem::load64f( regs, &regs.FR24, (uint32)(regs.R10 + 0xFFFFC250) );
		/* 821DFF9Ch case   23:*/		return 0x821DFFA0;
		  /* 821DFFA0h */ case   24:  		/* lfd FR25, <#[R9 - 15800]> */
		/* 821DFFA0h case   24:*/		cpu::mem::load64f( regs, &regs.FR25, (uint32)(regs.R9 + 0xFFFFC248) );
		/* 821DFFA0h case   24:*/		return 0x821DFFA4;
		  /* 821DFFA4h */ case   25:  		/* li R19, 0 */
		/* 821DFFA4h case   25:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 821DFFA4h case   25:*/		return 0x821DFFA8;
		  /* 821DFFA8h */ case   26:  		/* stw R19, <#[R20 + 616]> */
		/* 821DFFA8h case   26:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R20 + 0x00000268) );
		/* 821DFFA8h case   26:*/		return 0x821DFFAC;
		  /* 821DFFACh */ case   27:  		/* mr R3, R20 */
		/* 821DFFACh case   27:*/		regs.R3 = regs.R20;
		/* 821DFFACh case   27:*/		return 0x821DFFB0;
		  /* 821DFFB0h */ case   28:  		/* stw R19, <#[R20 + 620]> */
		/* 821DFFB0h case   28:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R20 + 0x0000026C) );
		/* 821DFFB0h case   28:*/		return 0x821DFFB4;
		  /* 821DFFB4h */ case   29:  		/* bl -395572 */
		/* 821DFFB4h case   29:*/		regs.LR = 0x821DFFB8; return 0x8217F680;
		/* 821DFFB4h case   29:*/		return 0x821DFFB8;
		  /* 821DFFB8h */ case   30:  		/* lwz R11, <#[R20 + 4]> */
		/* 821DFFB8h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821DFFB8h case   30:*/		return 0x821DFFBC;
		  /* 821DFFBCh */ case   31:  		/* stb R19, <#[R1 + 129]> */
		/* 821DFFBCh case   31:*/		cpu::mem::store8( regs, regs.R19, (uint32)(regs.R1 + 0x00000081) );
		/* 821DFFBCh case   31:*/		return 0x821DFFC0;
		  /* 821DFFC0h */ case   32:  		/* mr R21, R19 */
		/* 821DFFC0h case   32:*/		regs.R21 = regs.R19;
		/* 821DFFC0h case   32:*/		return 0x821DFFC4;
		  /* 821DFFC4h */ case   33:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821DFFC4h case   33:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821DFFC4h case   33:*/		return 0x821DFFC8;
		  /* 821DFFC8h */ case   34:  		/* stb R19, <#[R1 + 128]> */
		/* 821DFFC8h case   34:*/		cpu::mem::store8( regs, regs.R19, (uint32)(regs.R1 + 0x00000080) );
		/* 821DFFC8h case   34:*/		return 0x821DFFCC;
		  /* 821DFFCCh */ case   35:  		/* bc 4, CR0_EQ, 27736 */
		/* 821DFFCCh case   35:*/		if ( !regs.CR[0].eq ) { return 0x821E6C24;  }
		/* 821DFFCCh case   35:*/		return 0x821DFFD0;
		  /* 821DFFD0h */ case   36:  		/* cmplwi CR0, R11, 0 */
		/* 821DFFD0h case   36:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821DFFD0h case   36:*/		return 0x821DFFD4;
		  /* 821DFFD4h */ case   37:  		/* bc 12, CR0_EQ, 27728 */
		/* 821DFFD4h case   37:*/		if ( regs.CR[0].eq ) { return 0x821E6C24;  }
		/* 821DFFD4h case   37:*/		return 0x821DFFD8;
		  /* 821DFFD8h */ case   38:  		/* lwz R10, <#[R11 + 8]> */
		/* 821DFFD8h case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821DFFD8h case   38:*/		return 0x821DFFDC;
		  /* 821DFFDCh */ case   39:  		/* mr R8, R19 */
		/* 821DFFDCh case   39:*/		regs.R8 = regs.R19;
		/* 821DFFDCh case   39:*/		return 0x821DFFE0;
		  /* 821DFFE0h */ case   40:  		/* cmplwi CR6, R10, 0 */
		/* 821DFFE0h case   40:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821DFFE0h case   40:*/		return 0x821DFFE4;
		  /* 821DFFE4h */ case   41:  		/* bc 12, CR6_EQ, 68 */
		/* 821DFFE4h case   41:*/		if ( regs.CR[6].eq ) { return 0x821E0028;  }
		/* 821DFFE4h case   41:*/		return 0x821DFFE8;
		  /* 821DFFE8h */ case   42:  		/* lwz R9, <#[R11 + 48]> */
		/* 821DFFE8h case   42:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000030) );
		/* 821DFFE8h case   42:*/		return 0x821DFFEC;
		  /* 821DFFECh */ case   43:  		/* li R7, 1 */
		/* 821DFFECh case   43:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821DFFECh case   43:*/		return 0x821DFFF0;
		  /* 821DFFF0h */ case   44:  		/* lwz R6, <#[R10 + 4]> */
		/* 821DFFF0h case   44:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 821DFFF0h case   44:*/		return 0x821DFFF4;
		  /* 821DFFF4h */ case   45:  		/* rlwinm R5, R9, 0, 13, 31 */
		/* 821DFFF4h case   45:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R5,regs.R9);
		/* 821DFFF4h case   45:*/		return 0x821DFFF8;
		  /* 821DFFF8h */ case   46:  		/* rlwinm R9, R5, 27, 5, 31 */
		/* 821DFFF8h case   46:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R9,regs.R5);
		/* 821DFFF8h case   46:*/		return 0x821DFFFC;
		  /* 821DFFFCh */ case   47:  		/* rlwinm R5, R5, 0, 27, 31 */
		/* 821DFFFCh case   47:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R5);
		/* 821DFFFCh case   47:*/		return 0x821E0000;
		  /* 821E0000h */ case   48:  		/* addi R9, R9, 1 */
		/* 821E0000h case   48:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821E0000h case   48:*/		return 0x821E0004;
		  /* 821E0004h */ case   49:  		/* lwz R6, <#[R6 + 40]> */
		/* 821E0004h case   49:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000028) );
		/* 821E0004h case   49:*/		return 0x821E0008;
		  /* 821E0008h */ case   50:  		/* slw R7, R7, R5 */
		/* 821E0008h case   50:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R7,regs.R5);
		/* 821E0008h case   50:*/		return 0x821E000C;
		  /* 821E000Ch */ case   51:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821E000Ch case   51:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821E000Ch case   51:*/		return 0x821E0010;
		  /* 821E0010h */ case   52:  		/* lwzx R9, <#[R9 + R6]> */
		/* 821E0010h case   52:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R6 + 0x00000000) );
		/* 821E0010h case   52:*/		return 0x821E0014;
		  /* 821E0014h */ case   53:  		/* and. R9, R9, R7 */
		/* 821E0014h case   53:*/		cpu::op::and<1>(regs,&regs.R9,regs.R9,regs.R7);
		/* 821E0014h case   53:*/		return 0x821E0018;
		  /* 821E0018h */ case   54:  		/* bc 12, CR0_EQ, 8 */
		/* 821E0018h case   54:*/		if ( regs.CR[0].eq ) { return 0x821E0020;  }
		/* 821E0018h case   54:*/		return 0x821E001C;
		  /* 821E001Ch */ case   55:  		/* addi R8, R8, 1 */
		/* 821E001Ch case   55:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821E001Ch case   55:*/		return 0x821E0020;
	}
	return 0x821E0020;
} // Block from 821DFF40h-821E0020h (56 instructions)

//////////////////////////////////////////////////////
// Block at 821E0020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0020);
		  /* 821E0020h */ case    0:  		/* lwz R10, <#[R10 + 12]> */
		/* 821E0020h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 821E0020h case    0:*/		return 0x821E0024;
		  /* 821E0024h */ case    1:  		/* b -68 */
		/* 821E0024h case    1:*/		return 0x821DFFE0;
		/* 821E0024h case    1:*/		return 0x821E0028;
	}
	return 0x821E0028;
} // Block from 821E0020h-821E0028h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E0028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0028);
		  /* 821E0028h */ case    0:  		/* cmplwi CR6, R8, 0 */
		/* 821E0028h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821E0028h case    0:*/		return 0x821E002C;
		  /* 821E002Ch */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 821E002Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821E0034;  }
		/* 821E002Ch case    1:*/		return 0x821E0030;
		  /* 821E0030h */ case    2:  		/* addi R21, R21, 1 */
		/* 821E0030h case    2:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x1);
		/* 821E0030h case    2:*/		return 0x821E0034;
	}
	return 0x821E0034;
} // Block from 821E0028h-821E0034h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E0034h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0034( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0034) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0034);
		  /* 821E0034h */ case    0:  		/* stw R19, <#[R11 + 80]> */
		/* 821E0034h case    0:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + 0x00000050) );
		/* 821E0034h case    0:*/		return 0x821E0038;
		  /* 821E0038h */ case    1:  		/* rlwinm R10, R11, 0, 0, 30 */
		/* 821E0038h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R11);
		/* 821E0038h case    1:*/		return 0x821E003C;
		  /* 821E003Ch */ case    2:  		/* stw R19, <#[R11 + 84]> */
		/* 821E003Ch case    2:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + 0x00000054) );
		/* 821E003Ch case    2:*/		return 0x821E0040;
		  /* 821E0040h */ case    3:  		/* lwz R11, <#[R10 + 4]> */
		/* 821E0040h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821E0040h case    3:*/		return 0x821E0044;
		  /* 821E0044h */ case    4:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E0044h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E0044h case    4:*/		return 0x821E0048;
		  /* 821E0048h */ case    5:  		/* bc 4, CR0_EQ, 12 */
		/* 821E0048h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821E0054;  }
		/* 821E0048h case    5:*/		return 0x821E004C;
		  /* 821E004Ch */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821E004Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E004Ch case    6:*/		return 0x821E0050;
		  /* 821E0050h */ case    7:  		/* bc 4, CR6_EQ, -120 */
		/* 821E0050h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821DFFD8;  }
		/* 821E0050h case    7:*/		return 0x821E0054;
	}
	return 0x821E0054;
} // Block from 821E0034h-821E0054h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E0054h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0054( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0054) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0054);
		  /* 821E0054h */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 821E0054h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 821E0054h case    0:*/		return 0x821E0058;
		  /* 821E0058h */ case    1:  		/* bc 12, CR6_EQ, 27596 */
		/* 821E0058h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E6C24;  }
		/* 821E0058h case    1:*/		return 0x821E005C;
		  /* 821E005Ch */ case    2:  		/* cmplwi CR6, R21, 16 */
		/* 821E005Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000010);
		/* 821E005Ch case    2:*/		return 0x821E0060;
		  /* 821E0060h */ case    3:  		/* bc 4, CR6_GT, 8 */
		/* 821E0060h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821E0068;  }
		/* 821E0060h case    3:*/		return 0x821E0064;
		  /* 821E0064h */ case    4:  		/* li R21, 16 */
		/* 821E0064h case    4:*/		cpu::op::li<0>(regs,&regs.R21,0x10);
		/* 821E0064h case    4:*/		return 0x821E0068;
	}
	return 0x821E0068;
} // Block from 821E0054h-821E0068h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E0068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0068);
		  /* 821E0068h */ case    0:  		/* li R5, 0 */
		/* 821E0068h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821E0068h case    0:*/		return 0x821E006C;
		  /* 821E006Ch */ case    1:  		/* mulli R4, R21, 68 */
		/* 821E006Ch case    1:*/		cpu::op::mulli<0>(regs,&regs.R4,regs.R21,0x44);
		/* 821E006Ch case    1:*/		return 0x821E0070;
		  /* 821E0070h */ case    2:  		/* mr R3, R20 */
		/* 821E0070h case    2:*/		regs.R3 = regs.R20;
		/* 821E0070h case    2:*/		return 0x821E0074;
		  /* 821E0074h */ case    3:  		/* bl -503868 */
		/* 821E0074h case    3:*/		regs.LR = 0x821E0078; return 0x82165038;
		/* 821E0074h case    3:*/		return 0x821E0078;
		  /* 821E0078h */ case    4:  		/* stw R3, <#[R20 + 616]> */
		/* 821E0078h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R20 + 0x00000268) );
		/* 821E0078h case    4:*/		return 0x821E007C;
		  /* 821E007Ch */ case    5:  		/* stw R21, <#[R20 + 620]> */
		/* 821E007Ch case    5:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R20 + 0x0000026C) );
		/* 821E007Ch case    5:*/		return 0x821E0080;
		  /* 821E0080h */ case    6:  		/* mr R22, R19 */
		/* 821E0080h case    6:*/		regs.R22 = regs.R19;
		/* 821E0080h case    6:*/		return 0x821E0084;
		  /* 821E0084h */ case    7:  		/* lwz R11, <#[R20 + 4]> */
		/* 821E0084h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821E0084h case    7:*/		return 0x821E0088;
		  /* 821E0088h */ case    8:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E0088h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E0088h case    8:*/		return 0x821E008C;
		  /* 821E008Ch */ case    9:  		/* lwz R24, <#[R20 + 616]> */
		/* 821E008Ch case    9:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R20 + 0x00000268) );
		/* 821E008Ch case    9:*/		return 0x821E0090;
		  /* 821E0090h */ case   10:  		/* stw R19, <#[R1 + 148]> */
		/* 821E0090h case   10:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000094) );
		/* 821E0090h case   10:*/		return 0x821E0094;
		  /* 821E0094h */ case   11:  		/* bc 4, CR0_EQ, 2944 */
		/* 821E0094h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821E0C14;  }
		/* 821E0094h case   11:*/		return 0x821E0098;
		  /* 821E0098h */ case   12:  		/* mr R23, R11 */
		/* 821E0098h case   12:*/		regs.R23 = regs.R11;
		/* 821E0098h case   12:*/		return 0x821E009C;
		  /* 821E009Ch */ case   13:  		/* cmplwi CR0, R11, 0 */
		/* 821E009Ch case   13:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E009Ch case   13:*/		return 0x821E00A0;
		  /* 821E00A0h */ case   14:  		/* bc 12, CR0_EQ, 2932 */
		/* 821E00A0h case   14:*/		if ( regs.CR[0].eq ) { return 0x821E0C14;  }
		/* 821E00A0h case   14:*/		return 0x821E00A4;
		  /* 821E00A4h */ case   15:  		/* lwz R9, <#[R23 + 8]> */
		/* 821E00A4h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x00000008) );
		/* 821E00A4h case   15:*/		return 0x821E00A8;
		  /* 821E00A8h */ case   16:  		/* mr R8, R19 */
		/* 821E00A8h case   16:*/		regs.R8 = regs.R19;
		/* 821E00A8h case   16:*/		return 0x821E00AC;
		  /* 821E00ACh */ case   17:  		/* mr R7, R19 */
		/* 821E00ACh case   17:*/		regs.R7 = regs.R19;
		/* 821E00ACh case   17:*/		return 0x821E00B0;
		  /* 821E00B0h */ case   18:  		/* mr R6, R19 */
		/* 821E00B0h case   18:*/		regs.R6 = regs.R19;
		/* 821E00B0h case   18:*/		return 0x821E00B4;
		  /* 821E00B4h */ case   19:  		/* mr R5, R19 */
		/* 821E00B4h case   19:*/		regs.R5 = regs.R19;
		/* 821E00B4h case   19:*/		return 0x821E00B8;
		  /* 821E00B8h */ case   20:  		/* cmplwi CR6, R9, 0 */
		/* 821E00B8h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821E00B8h case   20:*/		return 0x821E00BC;
		  /* 821E00BCh */ case   21:  		/* bc 12, CR6_EQ, 84 */
		/* 821E00BCh case   21:*/		if ( regs.CR[6].eq ) { return 0x821E0110;  }
		/* 821E00BCh case   21:*/		return 0x821E00C0;
		  /* 821E00C0h */ case   22:  		/* lwz R10, <#[R23 + 48]> */
		/* 821E00C0h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000030) );
		/* 821E00C0h case   22:*/		return 0x821E00C4;
		  /* 821E00C4h */ case   23:  		/* li R4, 1 */
		/* 821E00C4h case   23:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821E00C4h case   23:*/		return 0x821E00C8;
		  /* 821E00C8h */ case   24:  		/* lwz R11, <#[R9 + 4]> */
		/* 821E00C8h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821E00C8h case   24:*/		return 0x821E00CC;
		  /* 821E00CCh */ case   25:  		/* rlwinm R3, R10, 0, 13, 31 */
		/* 821E00CCh case   25:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R3,regs.R10);
		/* 821E00CCh case   25:*/		return 0x821E00D0;
		  /* 821E00D0h */ case   26:  		/* rlwinm R10, R3, 27, 5, 31 */
		/* 821E00D0h case   26:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R3);
		/* 821E00D0h case   26:*/		return 0x821E00D4;
		  /* 821E00D4h */ case   27:  		/* rlwinm R3, R3, 0, 27, 31 */
		/* 821E00D4h case   27:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R3,regs.R3);
		/* 821E00D4h case   27:*/		return 0x821E00D8;
		  /* 821E00D8h */ case   28:  		/* addi R10, R10, 1 */
		/* 821E00D8h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821E00D8h case   28:*/		return 0x821E00DC;
		  /* 821E00DCh */ case   29:  		/* lwz R31, <#[R11 + 40]> */
		/* 821E00DCh case   29:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821E00DCh case   29:*/		return 0x821E00E0;
		  /* 821E00E0h */ case   30:  		/* slw R4, R4, R3 */
		/* 821E00E0h case   30:*/		cpu::op::slw<0>(regs,&regs.R4,regs.R4,regs.R3);
		/* 821E00E0h case   30:*/		return 0x821E00E4;
		  /* 821E00E4h */ case   31:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E00E4h case   31:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E00E4h case   31:*/		return 0x821E00E8;
		  /* 821E00E8h */ case   32:  		/* lwzx R10, <#[R10 + R31]> */
		/* 821E00E8h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R31 + 0x00000000) );
		/* 821E00E8h case   32:*/		return 0x821E00EC;
		  /* 821E00ECh */ case   33:  		/* and. R10, R10, R4 */
		/* 821E00ECh case   33:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R4);
		/* 821E00ECh case   33:*/		return 0x821E00F0;
		  /* 821E00F0h */ case   34:  		/* bc 12, CR0_EQ, 16 */
		/* 821E00F0h case   34:*/		if ( regs.CR[0].eq ) { return 0x821E0100;  }
		/* 821E00F0h case   34:*/		return 0x821E00F4;
		  /* 821E00F4h */ case   35:  		/* addi R8, R8, 1 */
		/* 821E00F4h case   35:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821E00F4h case   35:*/		return 0x821E00F8;
		  /* 821E00F8h */ case   36:  		/* mr R6, R11 */
		/* 821E00F8h case   36:*/		regs.R6 = regs.R11;
		/* 821E00F8h case   36:*/		return 0x821E00FC;
		  /* 821E00FCh */ case   37:  		/* b 12 */
		/* 821E00FCh case   37:*/		return 0x821E0108;
		/* 821E00FCh case   37:*/		return 0x821E0100;
	}
	return 0x821E0100;
} // Block from 821E0068h-821E0100h (38 instructions)

//////////////////////////////////////////////////////
// Block at 821E0100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0100);
		  /* 821E0100h */ case    0:  		/* addi R7, R7, 1 */
		/* 821E0100h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 821E0100h case    0:*/		return 0x821E0104;
		  /* 821E0104h */ case    1:  		/* mr R5, R11 */
		/* 821E0104h case    1:*/		regs.R5 = regs.R11;
		/* 821E0104h case    1:*/		return 0x821E0108;
	}
	return 0x821E0108;
} // Block from 821E0100h-821E0108h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E0108h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0108);
		  /* 821E0108h */ case    0:  		/* lwz R9, <#[R9 + 12]> */
		/* 821E0108h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000000C) );
		/* 821E0108h case    0:*/		return 0x821E010C;
		  /* 821E010Ch */ case    1:  		/* b -84 */
		/* 821E010Ch case    1:*/		return 0x821E00B8;
		/* 821E010Ch case    1:*/		return 0x821E0110;
	}
	return 0x821E0110;
} // Block from 821E0108h-821E0110h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E0110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0110);
		  /* 821E0110h */ case    0:  		/* cmplwi CR6, R8, 0 */
		/* 821E0110h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821E0110h case    0:*/		return 0x821E0114;
		  /* 821E0114h */ case    1:  		/* bc 12, CR6_EQ, 2768 */
		/* 821E0114h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E0BE4;  }
		/* 821E0114h case    1:*/		return 0x821E0118;
		  /* 821E0118h */ case    2:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E0118h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E0118h case    2:*/		return 0x821E011C;
		  /* 821E011Ch */ case    3:  		/* li R28, 68 */
		/* 821E011Ch case    3:*/		cpu::op::li<0>(regs,&regs.R28,0x44);
		/* 821E011Ch case    3:*/		return 0x821E0120;
		  /* 821E0120h */ case    4:  		/* subf R11, R11, R24 */
		/* 821E0120h case    4:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R24);
		/* 821E0120h case    4:*/		return 0x821E0124;
		  /* 821E0124h */ case    5:  		/* divw R26, R11, R28 */
		/* 821E0124h case    5:*/		cpu::op::divw<0>(regs,&regs.R26,regs.R11,regs.R28);
		/* 821E0124h case    5:*/		return 0x821E0128;
		  /* 821E0128h */ case    6:  		/* cmplwi CR6, R26, 16 */
		/* 821E0128h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000010);
		/* 821E0128h case    6:*/		return 0x821E012C;
		  /* 821E012Ch */ case    7:  		/* bc 12, CR6_EQ, 2776 */
		/* 821E012Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x821E0C04;  }
		/* 821E012Ch case    7:*/		return 0x821E0130;
		  /* 821E0130h */ case    8:  		/* cmplw CR6, R26, R21 */
		/* 821E0130h case    8:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R21);
		/* 821E0130h case    8:*/		return 0x821E0134;
		  /* 821E0134h */ case    9:  		/* bc 4, CR6_LT, 26732 */
		/* 821E0134h case    9:*/		if ( !regs.CR[6].lt ) { return 0x821E69A0;  }
		/* 821E0134h case    9:*/		return 0x821E0138;
		  /* 821E0138h */ case   10:  		/* lwz R11, <#[R20 + 4]> */
		/* 821E0138h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821E0138h case   10:*/		return 0x821E013C;
		  /* 821E013Ch */ case   11:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821E013Ch case   11:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E013Ch case   11:*/		return 0x821E0140;
		  /* 821E0140h */ case   12:  		/* addic R10, R10, -1 */
		/* 821E0140h case   12:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821E0140h case   12:*/		return 0x821E0144;
		  /* 821E0144h */ case   13:  		/* subfe R10, R10, R10 */
		/* 821E0144h case   13:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821E0144h case   13:*/		return 0x821E0148;
		  /* 821E0148h */ case   14:  		/* and R11, R10, R11 */
		/* 821E0148h case   14:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E0148h case   14:*/		return 0x821E014C;
		  /* 821E014Ch */ case   15:  		/* cmplw CR6, R23, R11 */
		/* 821E014Ch case   15:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R11);
		/* 821E014Ch case   15:*/		return 0x821E0150;
		  /* 821E0150h */ case   16:  		/* bc 12, CR6_EQ, 26716 */
		/* 821E0150h case   16:*/		if ( regs.CR[6].eq ) { return 0x821E69AC;  }
		/* 821E0150h case   16:*/		return 0x821E0154;
		  /* 821E0154h */ case   17:  		/* lwz R11, <#[R23 + 48]> */
		/* 821E0154h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000030) );
		/* 821E0154h case   17:*/		return 0x821E0158;
		  /* 821E0158h */ case   18:  		/* rlwinm. R11, R11, 13, 31, 31 */
		/* 821E0158h case   18:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R11);
		/* 821E0158h case   18:*/		return 0x821E015C;
		  /* 821E015Ch */ case   19:  		/* bc 4, CR0_EQ, 26704 */
		/* 821E015Ch case   19:*/		if ( !regs.CR[0].eq ) { return 0x821E69AC;  }
		/* 821E015Ch case   19:*/		return 0x821E0160;
		  /* 821E0160h */ case   20:  		/* lwz R11, <#[R24 + 60]> */
		/* 821E0160h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000003C) );
		/* 821E0160h case   20:*/		return 0x821E0164;
		  /* 821E0164h */ case   21:  		/* li R10, 1 */
		/* 821E0164h case   21:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821E0164h case   21:*/		return 0x821E0168;
		  /* 821E0168h */ case   22:  		/* cmplwi CR6, R8, 1 */
		/* 821E0168h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000001);
		/* 821E0168h case   22:*/		return 0x821E016C;
		  /* 821E016Ch */ case   23:  		/* rlwimi R11, R10, 5, 26, 26 */
		/* 821E016Ch case   23:*/		cpu::op::rlwimi<0,5,26,26>(regs,&regs.R11,regs.R10);
		/* 821E016Ch case   23:*/		return 0x821E0170;
		  /* 821E0170h */ case   24:  		/* rlwimi R11, R10, 5, 23, 24 */
		/* 821E0170h case   24:*/		cpu::op::rlwimi<0,5,23,24>(regs,&regs.R11,regs.R10);
		/* 821E0170h case   24:*/		return 0x821E0174;
		  /* 821E0174h */ case   25:  		/* stw R11, <#[R24 + 60]> */
		/* 821E0174h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x0000003C) );
		/* 821E0174h case   25:*/		return 0x821E0178;
		  /* 821E0178h */ case   26:  		/* stw R23, <#[R24 + 4]> */
		/* 821E0178h case   26:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R24 + 0x00000004) );
		/* 821E0178h case   26:*/		return 0x821E017C;
		  /* 821E017Ch */ case   27:  		/* bc 4, CR6_EQ, 8 */
		/* 821E017Ch case   27:*/		if ( !regs.CR[6].eq ) { return 0x821E0184;  }
		/* 821E017Ch case   27:*/		return 0x821E0180;
		  /* 821E0180h */ case   28:  		/* stw R6, <#[R24 + 8]> */
		/* 821E0180h case   28:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R24 + 0x00000008) );
		/* 821E0180h case   28:*/		return 0x821E0184;
	}
	return 0x821E0184;
} // Block from 821E0110h-821E0184h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821E0184h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0184( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0184) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0184);
		  /* 821E0184h */ case    0:  		/* cmplwi CR6, R7, 1 */
		/* 821E0184h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000001);
		/* 821E0184h case    0:*/		return 0x821E0188;
		  /* 821E0188h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 821E0188h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E019C;  }
		/* 821E0188h case    1:*/		return 0x821E018C;
		  /* 821E018Ch */ case    2:  		/* lwz R11, <#[R5 + 36]> */
		/* 821E018Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000024) );
		/* 821E018Ch case    2:*/		return 0x821E0190;
		  /* 821E0190h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E0190h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E0190h case    3:*/		return 0x821E0194;
		  /* 821E0194h */ case    4:  		/* bc 12, CR0_EQ, 8 */
		/* 821E0194h case    4:*/		if ( regs.CR[0].eq ) { return 0x821E019C;  }
		/* 821E0194h case    4:*/		return 0x821E0198;
		  /* 821E0198h */ case    5:  		/* stw R5, <#[R24]> */
		/* 821E0198h case    5:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R24 + 0x00000000) );
		/* 821E0198h case    5:*/		return 0x821E019C;
	}
	return 0x821E019C;
} // Block from 821E0184h-821E019Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E019Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E019C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E019C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E019C);
		  /* 821E019Ch */ case    0:  		/* addi R29, R23, 84 */
		/* 821E019Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R23,0x54);
		/* 821E019Ch case    0:*/		return 0x821E01A0;
		  /* 821E01A0h */ case    1:  		/* mr R11, R19 */
		/* 821E01A0h case    1:*/		regs.R11 = regs.R19;
		/* 821E01A0h case    1:*/		return 0x821E01A4;
		  /* 821E01A4h */ case    2:  		/* mr R10, R29 */
		/* 821E01A4h case    2:*/		regs.R10 = regs.R29;
		/* 821E01A4h case    2:*/		return 0x821E01A8;
		  /* 821E01A8h */ case    3:  		/* lwz R9, <#[R10]> */
		/* 821E01A8h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821E01A8h case    3:*/		return 0x821E01AC;
		  /* 821E01ACh */ case    4:  		/* cmplwi CR6, R9, 0 */
		/* 821E01ACh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821E01ACh case    4:*/		return 0x821E01B0;
		  /* 821E01B0h */ case    5:  		/* bc 4, CR6_EQ, 84 */
		/* 821E01B0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821E0204;  }
		/* 821E01B0h case    5:*/		return 0x821E01B4;
		  /* 821E01B4h */ case    6:  		/* addi R11, R11, 1 */
		/* 821E01B4h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E01B4h case    6:*/		return 0x821E01B8;
		  /* 821E01B8h */ case    7:  		/* addi R10, R10, 4 */
		/* 821E01B8h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821E01B8h case    7:*/		return 0x821E01BC;
		  /* 821E01BCh */ case    8:  		/* cmplwi CR6, R11, 1 */
		/* 821E01BCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821E01BCh case    8:*/		return 0x821E01C0;
		  /* 821E01C0h */ case    9:  		/* bc 12, CR6_LT, -24 */
		/* 821E01C0h case    9:*/		if ( regs.CR[6].lt ) { return 0x821E01A8;  }
		/* 821E01C0h case    9:*/		return 0x821E01C4;
		  /* 821E01C4h */ case   10:  		/* mr R11, R19 */
		/* 821E01C4h case   10:*/		regs.R11 = regs.R19;
		/* 821E01C4h case   10:*/		return 0x821E01C8;
		  /* 821E01C8h */ case   11:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E01C8h case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E01C8h case   11:*/		return 0x821E01CC;
		  /* 821E01CCh */ case   12:  		/* bc 12, CR0_EQ, 136 */
		/* 821E01CCh case   12:*/		if ( regs.CR[0].eq ) { return 0x821E0254;  }
		/* 821E01CCh case   12:*/		return 0x821E01D0;
		  /* 821E01D0h */ case   13:  		/* li R4, 0 */
		/* 821E01D0h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821E01D0h case   13:*/		return 0x821E01D4;
		  /* 821E01D4h */ case   14:  		/* mr R3, R29 */
		/* 821E01D4h case   14:*/		regs.R3 = regs.R29;
		/* 821E01D4h case   14:*/		return 0x821E01D8;
		  /* 821E01D8h */ case   15:  		/* mr R31, R19 */
		/* 821E01D8h case   15:*/		regs.R31 = regs.R19;
		/* 821E01D8h case   15:*/		return 0x821E01DC;
		  /* 821E01DCh */ case   16:  		/* bl -141580 */
		/* 821E01DCh case   16:*/		regs.LR = 0x821E01E0; return 0x821BD8D0;
		/* 821E01DCh case   16:*/		return 0x821E01E0;
		  /* 821E01E0h */ case   17:  		/* cmplwi CR6, R3, 31 */
		/* 821E01E0h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000001F);
		/* 821E01E0h case   17:*/		return 0x821E01E4;
		  /* 821E01E4h */ case   18:  		/* bc 12, CR6_GT, 96 */
		/* 821E01E4h case   18:*/		if ( regs.CR[6].gt ) { return 0x821E0244;  }
		/* 821E01E4h case   18:*/		return 0x821E01E8;
		  /* 821E01E8h */ case   19:  		/* lwz R30, <#[R20 + 616]> */
		/* 821E01E8h case   19:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R20 + 0x00000268) );
		/* 821E01E8h case   19:*/		return 0x821E01EC;
		  /* 821E01ECh */ case   20:  		/* mulli R11, R3, 68 */
		/* 821E01ECh case   20:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R3,0x44);
		/* 821E01ECh case   20:*/		return 0x821E01F0;
		  /* 821E01F0h */ case   21:  		/* add R10, R11, R30 */
		/* 821E01F0h case   21:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R30);
		/* 821E01F0h case   21:*/		return 0x821E01F4;
		  /* 821E01F4h */ case   22:  		/* cmplwi CR6, R31, 0 */
		/* 821E01F4h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E01F4h case   22:*/		return 0x821E01F8;
		  /* 821E01F8h */ case   23:  		/* bc 12, CR6_EQ, 44 */
		/* 821E01F8h case   23:*/		if ( regs.CR[6].eq ) { return 0x821E0224;  }
		/* 821E01F8h case   23:*/		return 0x821E01FC;
		  /* 821E01FCh */ case   24:  		/* lwz R11, <#[R10 + 24]> */
		/* 821E01FCh case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000018) );
		/* 821E01FCh case   24:*/		return 0x821E0200;
		  /* 821E0200h */ case   25:  		/* b 24 */
		/* 821E0200h case   25:*/		return 0x821E0218;
		/* 821E0200h case   25:*/		return 0x821E0204;
	}
	return 0x821E0204;
} // Block from 821E019Ch-821E0204h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821E0204h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0204( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0204) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0204);
		  /* 821E0204h */ case    0:  		/* li R11, 1 */
		/* 821E0204h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821E0204h case    0:*/		return 0x821E0208;
		  /* 821E0208h */ case    1:  		/* b -64 */
		/* 821E0208h case    1:*/		return 0x821E01C8;
		/* 821E0208h case    1:*/		return 0x821E020C;
		  /* 821E020Ch */ case    2:  		/* cmplw CR6, R11, R31 */
		/* 821E020Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821E020Ch case    2:*/		return 0x821E0210;
		  /* 821E0210h */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 821E0210h case    3:*/		if ( regs.CR[6].eq ) { return 0x821E0224;  }
		/* 821E0210h case    3:*/		return 0x821E0214;
		  /* 821E0214h */ case    4:  		/* lwz R11, <#[R11 + 24]> */
		/* 821E0214h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000018) );
		/* 821E0214h case    4:*/		return 0x821E0218;
	}
	return 0x821E0218;
} // Block from 821E0204h-821E0218h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E0218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0218);
		  /* 821E0218h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821E0218h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E0218h case    0:*/		return 0x821E021C;
		  /* 821E021Ch */ case    1:  		/* bc 4, CR6_EQ, -16 */
		/* 821E021Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E020C;  }
		/* 821E021Ch case    1:*/		return 0x821E0220;
		  /* 821E0220h */ case    2:  		/* b 8 */
		/* 821E0220h case    2:*/		return 0x821E0228;
		/* 821E0220h case    2:*/		return 0x821E0224;
	}
	return 0x821E0224;
} // Block from 821E0218h-821E0224h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E0224h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0224( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0224) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0224);
		  /* 821E0224h */ case    0:  		/* mr R31, R10 */
		/* 821E0224h case    0:*/		regs.R31 = regs.R10;
		/* 821E0224h case    0:*/		return 0x821E0228;
	}
	return 0x821E0228;
} // Block from 821E0224h-821E0228h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E0228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0228);
		  /* 821E0228h */ case    0:  		/* cmplwi CR6, R3, 31 */
		/* 821E0228h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000001F);
		/* 821E0228h case    0:*/		return 0x821E022C;
		  /* 821E022Ch */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821E022Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821E0244;  }
		/* 821E022Ch case    1:*/		return 0x821E0230;
		  /* 821E0230h */ case    2:  		/* addi R4, R3, 1 */
		/* 821E0230h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R3,0x1);
		/* 821E0230h case    2:*/		return 0x821E0234;
		  /* 821E0234h */ case    3:  		/* mr R3, R29 */
		/* 821E0234h case    3:*/		regs.R3 = regs.R29;
		/* 821E0234h case    3:*/		return 0x821E0238;
		  /* 821E0238h */ case    4:  		/* bl -141672 */
		/* 821E0238h case    4:*/		regs.LR = 0x821E023C; return 0x821BD8D0;
		/* 821E0238h case    4:*/		return 0x821E023C;
		  /* 821E023Ch */ case    5:  		/* cmplwi CR6, R3, 31 */
		/* 821E023Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x0000001F);
		/* 821E023Ch case    5:*/		return 0x821E0240;
		  /* 821E0240h */ case    6:  		/* bc 4, CR6_GT, -84 */
		/* 821E0240h case    6:*/		if ( !regs.CR[6].gt ) { return 0x821E01EC;  }
		/* 821E0240h case    6:*/		return 0x821E0244;
	}
	return 0x821E0244;
} // Block from 821E0228h-821E0244h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E0244h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0244( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0244) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0244);
		  /* 821E0244h */ case    0:  		/* stw R31, <#[R24 + 24]> */
		/* 821E0244h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R24 + 0x00000018) );
		/* 821E0244h case    0:*/		return 0x821E0248;
		  /* 821E0248h */ case    1:  		/* lwz R11, <#[R31 + 28]> */
		/* 821E0248h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 821E0248h case    1:*/		return 0x821E024C;
		  /* 821E024Ch */ case    2:  		/* stw R11, <#[R24 + 32]> */
		/* 821E024Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000020) );
		/* 821E024Ch case    2:*/		return 0x821E0250;
		  /* 821E0250h */ case    3:  		/* stw R24, <#[R31 + 28]> */
		/* 821E0250h case    3:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R31 + 0x0000001C) );
		/* 821E0250h case    3:*/		return 0x821E0254;
	}
	return 0x821E0254;
} // Block from 821E0244h-821E0254h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E0254h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0254( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0254) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0254);
		  /* 821E0254h */ case    0:  		/* mr R5, R26 */
		/* 821E0254h case    0:*/		regs.R5 = regs.R26;
		/* 821E0254h case    0:*/		return 0x821E0258;
		  /* 821E0258h */ case    1:  		/* mr R4, R23 */
		/* 821E0258h case    1:*/		regs.R4 = regs.R23;
		/* 821E0258h case    1:*/		return 0x821E025C;
		  /* 821E025Ch */ case    2:  		/* mr R3, R20 */
		/* 821E025Ch case    2:*/		regs.R3 = regs.R20;
		/* 821E025Ch case    2:*/		return 0x821E0260;
		  /* 821E0260h */ case    3:  		/* bl -69192 */
		/* 821E0260h case    3:*/		regs.LR = 0x821E0264; return 0x821CF418;
		/* 821E0260h case    3:*/		return 0x821E0264;
		  /* 821E0264h */ case    4:  		/* ori R4, R23, 2 */
		/* 821E0264h case    4:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R23,0x2);
		/* 821E0264h case    4:*/		return 0x821E0268;
		  /* 821E0268h */ case    5:  		/* mr R3, R20 */
		/* 821E0268h case    5:*/		regs.R3 = regs.R20;
		/* 821E0268h case    5:*/		return 0x821E026C;
		  /* 821E026Ch */ case    6:  		/* bl 498324 */
		/* 821E026Ch case    6:*/		regs.LR = 0x821E0270; return 0x82259D00;
		/* 821E026Ch case    6:*/		return 0x821E0270;
		  /* 821E0270h */ case    7:  		/* stw R3, <#[R24 + 64]> */
		/* 821E0270h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R24 + 0x00000040) );
		/* 821E0270h case    7:*/		return 0x821E0274;
		  /* 821E0274h */ case    8:  		/* lwz R10, <#[R24 + 60]> */
		/* 821E0274h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x0000003C) );
		/* 821E0274h case    8:*/		return 0x821E0278;
		  /* 821E0278h */ case    9:  		/* lwz R11, <#[R23 + 76]> */
		/* 821E0278h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000004C) );
		/* 821E0278h case    9:*/		return 0x821E027C;
		  /* 821E027Ch */ case   10:  		/* rlwimi R10, R11, 12, 1, 19 */
		/* 821E027Ch case   10:*/		cpu::op::rlwimi<0,12,1,19>(regs,&regs.R10,regs.R11);
		/* 821E027Ch case   10:*/		return 0x821E0280;
		  /* 821E0280h */ case   11:  		/* rlwinm R11, R10, 0, 26, 24 */
		/* 821E0280h case   11:*/		cpu::op::rlwinm<0,0,26,24>(regs,&regs.R11,regs.R10);
		/* 821E0280h case   11:*/		return 0x821E0284;
		  /* 821E0284h */ case   12:  		/* stw R11, <#[R24 + 60]> */
		/* 821E0284h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x0000003C) );
		/* 821E0284h case   12:*/		return 0x821E0288;
		  /* 821E0288h */ case   13:  		/* lwz R11, <#[R20 + 4]> */
		/* 821E0288h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821E0288h case   13:*/		return 0x821E028C;
		  /* 821E028Ch */ case   14:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E028Ch case   14:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E028Ch case   14:*/		return 0x821E0290;
		  /* 821E0290h */ case   15:  		/* bc 4, CR0_EQ, 504 */
		/* 821E0290h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821E0488;  }
		/* 821E0290h case   15:*/		return 0x821E0294;
		  /* 821E0294h */ case   16:  		/* mr R30, R11 */
		/* 821E0294h case   16:*/		regs.R30 = regs.R11;
		/* 821E0294h case   16:*/		return 0x821E0298;
		  /* 821E0298h */ case   17:  		/* cmplwi CR0, R11, 0 */
		/* 821E0298h case   17:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E0298h case   17:*/		return 0x821E029C;
		  /* 821E029Ch */ case   18:  		/* bc 12, CR0_EQ, 492 */
		/* 821E029Ch case   18:*/		if ( regs.CR[0].eq ) { return 0x821E0488;  }
		/* 821E029Ch case   18:*/		return 0x821E02A0;
		  /* 821E02A0h */ case   19:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E02A0h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E02A0h case   19:*/		return 0x821E02A4;
		  /* 821E02A4h */ case   20:  		/* subf R11, R11, R24 */
		/* 821E02A4h case   20:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R24);
		/* 821E02A4h case   20:*/		return 0x821E02A8;
		  /* 821E02A8h */ case   21:  		/* divw R10, R11, R28 */
		/* 821E02A8h case   21:*/		cpu::op::divw<0>(regs,&regs.R10,regs.R11,regs.R28);
		/* 821E02A8h case   21:*/		return 0x821E02AC;
		  /* 821E02ACh */ case   22:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 821E02ACh case   22:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 821E02ACh case   22:*/		return 0x821E02B0;
		  /* 821E02B0h */ case   23:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821E02B0h case   23:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821E02B0h case   23:*/		return 0x821E02B4;
		  /* 821E02B4h */ case   24:  		/* addi R11, R11, 21 */
		/* 821E02B4h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821E02B4h case   24:*/		return 0x821E02B8;
		  /* 821E02B8h */ case   25:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E02B8h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E02B8h case   25:*/		return 0x821E02BC;
		  /* 821E02BCh */ case   26:  		/* lwzx R11, <#[R11 + R30]> */
		/* 821E02BCh case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 821E02BCh case   26:*/		return 0x821E02C0;
		  /* 821E02C0h */ case   27:  		/* srw R11, R11, R10 */
		/* 821E02C0h case   27:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821E02C0h case   27:*/		return 0x821E02C4;
		  /* 821E02C4h */ case   28:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E02C4h case   28:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E02C4h case   28:*/		return 0x821E02C8;
		  /* 821E02C8h */ case   29:  		/* bc 12, CR0_EQ, 420 */
		/* 821E02C8h case   29:*/		if ( regs.CR[0].eq ) { return 0x821E046C;  }
		/* 821E02C8h case   29:*/		return 0x821E02CC;
		  /* 821E02CCh */ case   30:  		/* lwz R29, <#[R30 + 12]> */
		/* 821E02CCh case   30:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x0000000C) );
		/* 821E02CCh case   30:*/		return 0x821E02D0;
		  /* 821E02D0h */ case   31:  		/* cmplwi CR6, R29, 0 */
		/* 821E02D0h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821E02D0h case   31:*/		return 0x821E02D4;
		  /* 821E02D4h */ case   32:  		/* bc 12, CR6_EQ, 408 */
		/* 821E02D4h case   32:*/		if ( regs.CR[6].eq ) { return 0x821E046C;  }
		/* 821E02D4h case   32:*/		return 0x821E02D8;
		  /* 821E02D8h */ case   33:  		/* rlwinm R10, R26, 27, 5, 31 */
		/* 821E02D8h case   33:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R26);
		/* 821E02D8h case   33:*/		return 0x821E02DC;
		  /* 821E02DCh */ case   34:  		/* lwz R11, <#[R29]> */
		/* 821E02DCh case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821E02DCh case   34:*/		return 0x821E02E0;
		  /* 821E02E0h */ case   35:  		/* rlwinm R9, R26, 0, 27, 31 */
		/* 821E02E0h case   35:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R26);
		/* 821E02E0h case   35:*/		return 0x821E02E4;
		  /* 821E02E4h */ case   36:  		/* addi R10, R10, 21 */
		/* 821E02E4h case   36:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x15);
		/* 821E02E4h case   36:*/		return 0x821E02E8;
		  /* 821E02E8h */ case   37:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E02E8h case   37:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E02E8h case   37:*/		return 0x821E02EC;
		  /* 821E02ECh */ case   38:  		/* lwzx R10, <#[R10 + R11]> */
		/* 821E02ECh case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821E02ECh case   38:*/		return 0x821E02F0;
		  /* 821E02F0h */ case   39:  		/* srw R10, R10, R9 */
		/* 821E02F0h case   39:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821E02F0h case   39:*/		return 0x821E02F4;
		  /* 821E02F4h */ case   40:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821E02F4h case   40:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821E02F4h case   40:*/		return 0x821E02F8;
		  /* 821E02F8h */ case   41:  		/* bc 4, CR0_EQ, 364 */
		/* 821E02F8h case   41:*/		if ( !regs.CR[0].eq ) { return 0x821E0464;  }
		/* 821E02F8h case   41:*/		return 0x821E02FC;
		  /* 821E02FCh */ case   42:  		/* lwz R11, <#[R11 + 48]> */
		/* 821E02FCh case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 821E02FCh case   42:*/		return 0x821E0300;
		  /* 821E0300h */ case   43:  		/* rlwinm. R11, R11, 13, 31, 31 */
		/* 821E0300h case   43:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R11);
		/* 821E0300h case   43:*/		return 0x821E0304;
		  /* 821E0304h */ case   44:  		/* bc 4, CR0_EQ, 352 */
		/* 821E0304h case   44:*/		if ( !regs.CR[0].eq ) { return 0x821E0464;  }
		/* 821E0304h case   44:*/		return 0x821E0308;
		  /* 821E0308h */ case   45:  		/* lwz R11, <#[R24 + 36]> */
		/* 821E0308h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000024) );
		/* 821E0308h case   45:*/		return 0x821E030C;
		  /* 821E030Ch */ case   46:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E030Ch case   46:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E030Ch case   46:*/		return 0x821E0310;
		  /* 821E0310h */ case   47:  		/* bc 4, CR0_EQ, 64 */
		/* 821E0310h case   47:*/		if ( !regs.CR[0].eq ) { return 0x821E0350;  }
		/* 821E0310h case   47:*/		return 0x821E0314;
		  /* 821E0314h */ case   48:  		/* lwz R10, <#[R24 + 16]> */
		/* 821E0314h case   48:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000010) );
		/* 821E0314h case   48:*/		return 0x821E0318;
		  /* 821E0318h */ case   49:  		/* cmplwi CR6, R10, 0 */
		/* 821E0318h case   49:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E0318h case   49:*/		return 0x821E031C;
		  /* 821E031Ch */ case   50:  		/* bc 12, CR6_EQ, 20 */
		/* 821E031Ch case   50:*/		if ( regs.CR[6].eq ) { return 0x821E0330;  }
		/* 821E031Ch case   50:*/		return 0x821E0320;
		  /* 821E0320h */ case   51:  		/* ori R11, R11, 1 */
		/* 821E0320h case   51:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821E0320h case   51:*/		return 0x821E0324;
		  /* 821E0324h */ case   52:  		/* stw R11, <#[R24 + 36]> */
		/* 821E0324h case   52:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000024) );
		/* 821E0324h case   52:*/		return 0x821E0328;
		  /* 821E0328h */ case   53:  		/* stw R19, <#[R24 + 16]> */
		/* 821E0328h case   53:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R24 + 0x00000010) );
		/* 821E0328h case   53:*/		return 0x821E032C;
		  /* 821E032Ch */ case   54:  		/* b 36 */
		/* 821E032Ch case   54:*/		return 0x821E0350;
		/* 821E032Ch case   54:*/		return 0x821E0330;
	}
	return 0x821E0330;
} // Block from 821E0254h-821E0330h (55 instructions)

//////////////////////////////////////////////////////
// Block at 821E0330h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0330( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0330) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0330);
		  /* 821E0330h */ case    0:  		/* stw R30, <#[R24 + 16]> */
		/* 821E0330h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R24 + 0x00000010) );
		/* 821E0330h case    0:*/		return 0x821E0334;
		  /* 821E0334h */ case    1:  		/* lwz R11, <#[R24 + 8]> */
		/* 821E0334h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821E0334h case    1:*/		return 0x821E0338;
		  /* 821E0338h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821E0338h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E0338h case    2:*/		return 0x821E033C;
		  /* 821E033Ch */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 821E033Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821E0350;  }
		/* 821E033Ch case    3:*/		return 0x821E0340;
		  /* 821E0340h */ case    4:  		/* rlwinm R10, R30, 0, 0, 31 */
		/* 821E0340h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R30);
		/* 821E0340h case    4:*/		return 0x821E0344;
		  /* 821E0344h */ case    5:  		/* cmplw CR6, R10, R11 */
		/* 821E0344h case    5:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821E0344h case    5:*/		return 0x821E0348;
		  /* 821E0348h */ case    6:  		/* bc 12, CR6_EQ, 8 */
		/* 821E0348h case    6:*/		if ( regs.CR[6].eq ) { return 0x821E0350;  }
		/* 821E0348h case    6:*/		return 0x821E034C;
		  /* 821E034Ch */ case    7:  		/* li R22, 1 */
		/* 821E034Ch case    7:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 821E034Ch case    7:*/		return 0x821E0350;
	}
	return 0x821E0350;
} // Block from 821E0330h-821E0350h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E0350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0350);
		  /* 821E0350h */ case    0:  		/* li R5, 40 */
		/* 821E0350h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x28);
		/* 821E0350h case    0:*/		return 0x821E0354;
		  /* 821E0354h */ case    1:  		/* li R4, 20 */
		/* 821E0354h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 821E0354h case    1:*/		return 0x821E0358;
		  /* 821E0358h */ case    2:  		/* mr R3, R20 */
		/* 821E0358h case    2:*/		regs.R3 = regs.R20;
		/* 821E0358h case    2:*/		return 0x821E035C;
		  /* 821E035Ch */ case    3:  		/* bl -506476 */
		/* 821E035Ch case    3:*/		regs.LR = 0x821E0360; return 0x821648F0;
		/* 821E035Ch case    3:*/		return 0x821E0360;
		  /* 821E0360h */ case    4:  		/* stw R30, <#[R3]> */
		/* 821E0360h case    4:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x00000000) );
		/* 821E0360h case    4:*/		return 0x821E0364;
		  /* 821E0364h */ case    5:  		/* lwz R11, <#[R24 + 40]> */
		/* 821E0364h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000028) );
		/* 821E0364h case    5:*/		return 0x821E0368;
		  /* 821E0368h */ case    6:  		/* stw R11, <#[R3 + 4]> */
		/* 821E0368h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821E0368h case    6:*/		return 0x821E036C;
		  /* 821E036Ch */ case    7:  		/* stw R3, <#[R24 + 40]> */
		/* 821E036Ch case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R24 + 0x00000028) );
		/* 821E036Ch case    7:*/		return 0x821E0370;
		  /* 821E0370h */ case    8:  		/* lwz R11, <#[R30 + 36]> */
		/* 821E0370h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 821E0370h case    8:*/		return 0x821E0374;
		  /* 821E0374h */ case    9:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E0374h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E0374h case    9:*/		return 0x821E0378;
		  /* 821E0378h */ case   10:  		/* bc 12, CR0_EQ, 12 */
		/* 821E0378h case   10:*/		if ( regs.CR[0].eq ) { return 0x821E0384;  }
		/* 821E0378h case   10:*/		return 0x821E037C;
		  /* 821E037Ch */ case   11:  		/* mr R31, R19 */
		/* 821E037Ch case   11:*/		regs.R31 = regs.R19;
		/* 821E037Ch case   11:*/		return 0x821E0380;
		  /* 821E0380h */ case   12:  		/* b 16 */
		/* 821E0380h case   12:*/		return 0x821E0390;
		/* 821E0380h case   12:*/		return 0x821E0384;
	}
	return 0x821E0384;
} // Block from 821E0350h-821E0384h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821E0384h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0384( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0384) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0384);
		  /* 821E0384h */ case    0:  		/* lwz R11, <#[R30 + 32]> */
		/* 821E0384h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 821E0384h case    0:*/		return 0x821E0388;
		  /* 821E0388h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E0388h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E0388h case    1:*/		return 0x821E038C;
		  /* 821E038Ch */ case    2:  		/* addi R31, R11, -40 */
		/* 821E038Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821E038Ch case    2:*/		return 0x821E0390;
	}
	return 0x821E0390;
} // Block from 821E0384h-821E0390h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E0390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0390);
		  /* 821E0390h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821E0390h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E0390h case    0:*/		return 0x821E0394;
		  /* 821E0394h */ case    1:  		/* mr R3, R20 */
		/* 821E0394h case    1:*/		regs.R3 = regs.R20;
		/* 821E0394h case    1:*/		return 0x821E0398;
		  /* 821E0398h */ case    2:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821E0398h case    2:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821E0398h case    2:*/		return 0x821E039C;
		  /* 821E039Ch */ case    3:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821E039Ch case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821E039Ch case    3:*/		return 0x821E03A0;
		  /* 821E03A0h */ case    4:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821E03A0h case    4:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821E03A0h case    4:*/		return 0x821E03A4;
		  /* 821E03A4h */ case    5:  		/* bl -507764 */
		/* 821E03A4h case    5:*/		regs.LR = 0x821E03A8; return 0x82164430;
		/* 821E03A4h case    5:*/		return 0x821E03A8;
		  /* 821E03A8h */ case    6:  		/* addi R11, R31, -16 */
		/* 821E03A8h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF0);
		/* 821E03A8h case    6:*/		return 0x821E03AC;
		  /* 821E03ACh */ case    7:  		/* add R10, R3, R11 */
		/* 821E03ACh case    7:*/		cpu::op::add<0>(regs,&regs.R10,regs.R3,regs.R11);
		/* 821E03ACh case    7:*/		return 0x821E03B0;
		  /* 821E03B0h */ case    8:  		/* lwz R11, <#[R10 + 8]> */
		/* 821E03B0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821E03B0h case    8:*/		return 0x821E03B4;
		  /* 821E03B4h */ case    9:  		/* rlwinm. R9, R11, 0, 30, 31 */
		/* 821E03B4h case    9:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R9,regs.R11);
		/* 821E03B4h case    9:*/		return 0x821E03B8;
		  /* 821E03B8h */ case   10:  		/* bc 12, CR0_EQ, 12 */
		/* 821E03B8h case   10:*/		if ( regs.CR[0].eq ) { return 0x821E03C4;  }
		/* 821E03B8h case   10:*/		return 0x821E03BC;
		  /* 821E03BCh */ case   11:  		/* li R9, 7 */
		/* 821E03BCh case   11:*/		cpu::op::li<0>(regs,&regs.R9,0x7);
		/* 821E03BCh case   11:*/		return 0x821E03C0;
		  /* 821E03C0h */ case   12:  		/* b 52 */
		/* 821E03C0h case   12:*/		return 0x821E03F4;
		/* 821E03C0h case   12:*/		return 0x821E03C4;
	}
	return 0x821E03C4;
} // Block from 821E0390h-821E03C4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821E03C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E03C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E03C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E03C4);
		  /* 821E03C4h */ case    0:  		/* rlwinm R9, R11, 30, 28, 31 */
		/* 821E03C4h case    0:*/		cpu::op::rlwinm<0,30,28,31>(regs,&regs.R9,regs.R11);
		/* 821E03C4h case    0:*/		return 0x821E03C8;
		  /* 821E03C8h */ case    1:  		/* cmpwi CR6, R9, 10 */
		/* 821E03C8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x0000000A);
		/* 821E03C8h case    1:*/		return 0x821E03CC;
		  /* 821E03CCh */ case    2:  		/* bc 4, CR6_EQ, 32 */
		/* 821E03CCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821E03EC;  }
		/* 821E03CCh case    2:*/		return 0x821E03D0;
		  /* 821E03D0h */ case    3:  		/* rlwinm. R11, R11, 26, 31, 31 */
		/* 821E03D0h case    3:*/		cpu::op::rlwinm<1,26,31,31>(regs,&regs.R11,regs.R11);
		/* 821E03D0h case    3:*/		return 0x821E03D4;
		  /* 821E03D4h */ case    4:  		/* bc 4, CR0_EQ, 44 */
		/* 821E03D4h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821E0400;  }
		/* 821E03D4h case    4:*/		return 0x821E03D8;
		  /* 821E03D8h */ case    5:  		/* lwz R11, <#[R24 + 60]> */
		/* 821E03D8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000003C) );
		/* 821E03D8h case    5:*/		return 0x821E03DC;
		  /* 821E03DCh */ case    6:  		/* mr R8, R11 */
		/* 821E03DCh case    6:*/		regs.R8 = regs.R11;
		/* 821E03DCh case    6:*/		return 0x821E03E0;
		  /* 821E03E0h */ case    7:  		/* rlwimi R8, R11, 1, 25, 25 */
		/* 821E03E0h case    7:*/		cpu::op::rlwimi<0,1,25,25>(regs,&regs.R8,regs.R11);
		/* 821E03E0h case    7:*/		return 0x821E03E4;
		  /* 821E03E4h */ case    8:  		/* stw R8, <#[R24 + 60]> */
		/* 821E03E4h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R24 + 0x0000003C) );
		/* 821E03E4h case    8:*/		return 0x821E03E8;
		  /* 821E03E8h */ case    9:  		/* b 24 */
		/* 821E03E8h case    9:*/		return 0x821E0400;
		/* 821E03E8h case    9:*/		return 0x821E03EC;
	}
	return 0x821E03EC;
} // Block from 821E03C4h-821E03ECh (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E03ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E03EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E03EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E03EC);
		  /* 821E03ECh */ case    0:  		/* cmpwi CR6, R9, 7 */
		/* 821E03ECh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000007);
		/* 821E03ECh case    0:*/		return 0x821E03F0;
		  /* 821E03F0h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 821E03F0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E0400;  }
		/* 821E03F0h case    1:*/		return 0x821E03F4;
	}
	return 0x821E03F4;
} // Block from 821E03ECh-821E03F4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E03F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E03F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E03F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E03F4);
		  /* 821E03F4h */ case    0:  		/* lwz R11, <#[R24 + 60]> */
		/* 821E03F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000003C) );
		/* 821E03F4h case    0:*/		return 0x821E03F8;
		  /* 821E03F8h */ case    1:  		/* rlwinm R11, R11, 0, 27, 24 */
		/* 821E03F8h case    1:*/		cpu::op::rlwinm<0,0,27,24>(regs,&regs.R11,regs.R11);
		/* 821E03F8h case    1:*/		return 0x821E03FC;
		  /* 821E03FCh */ case    2:  		/* stw R11, <#[R24 + 60]> */
		/* 821E03FCh case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x0000003C) );
		/* 821E03FCh case    2:*/		return 0x821E0400;
	}
	return 0x821E0400;
} // Block from 821E03F4h-821E0400h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E0400h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0400);
		  /* 821E0400h */ case    0:  		/* lwz R11, <#[R10 + 12]> */
		/* 821E0400h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 821E0400h case    0:*/		return 0x821E0404;
		  /* 821E0404h */ case    1:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 821E0404h case    1:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 821E0404h case    1:*/		return 0x821E0408;
		  /* 821E0408h */ case    2:  		/* bc 12, CR0_EQ, 8 */
		/* 821E0408h case    2:*/		if ( regs.CR[0].eq ) { return 0x821E0410;  }
		/* 821E0408h case    2:*/		return 0x821E040C;
		  /* 821E040Ch */ case    3:  		/* stw R30, <#[R24 + 12]> */
		/* 821E040Ch case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R24 + 0x0000000C) );
		/* 821E040Ch case    3:*/		return 0x821E0410;
	}
	return 0x821E0410;
} // Block from 821E0400h-821E0410h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E0410h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0410);
		  /* 821E0410h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821E0410h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E0410h case    0:*/		return 0x821E0414;
		  /* 821E0414h */ case    1:  		/* rlwinm. R11, R11, 5, 31, 31 */
		/* 821E0414h case    1:*/		cpu::op::rlwinm<1,5,31,31>(regs,&regs.R11,regs.R11);
		/* 821E0414h case    1:*/		return 0x821E0418;
		  /* 821E0418h */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 821E0418h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E0440;  }
		/* 821E0418h case    2:*/		return 0x821E041C;
		  /* 821E041Ch */ case    3:  		/* cmpwi CR6, R9, 3 */
		/* 821E041Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000003);
		/* 821E041Ch case    3:*/		return 0x821E0420;
		  /* 821E0420h */ case    4:  		/* bc 12, CR6_EQ, 32 */
		/* 821E0420h case    4:*/		if ( regs.CR[6].eq ) { return 0x821E0440;  }
		/* 821E0420h case    4:*/		return 0x821E0424;
		  /* 821E0424h */ case    5:  		/* cmpwi CR6, R9, 4 */
		/* 821E0424h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R9,0x00000004);
		/* 821E0424h case    5:*/		return 0x821E0428;
		  /* 821E0428h */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 821E0428h case    6:*/		if ( regs.CR[6].eq ) { return 0x821E0440;  }
		/* 821E0428h case    6:*/		return 0x821E042C;
		  /* 821E042Ch */ case    7:  		/* mr R4, R30 */
		/* 821E042Ch case    7:*/		regs.R4 = regs.R30;
		/* 821E042Ch case    7:*/		return 0x821E0430;
		  /* 821E0430h */ case    8:  		/* mr R3, R20 */
		/* 821E0430h case    8:*/		regs.R3 = regs.R20;
		/* 821E0430h case    8:*/		return 0x821E0434;
		  /* 821E0434h */ case    9:  		/* bl -135676 */
		/* 821E0434h case    9:*/		regs.LR = 0x821E0438; return 0x821BF238;
		/* 821E0434h case    9:*/		return 0x821E0438;
		  /* 821E0438h */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E0438h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E0438h case   10:*/		return 0x821E043C;
		  /* 821E043Ch */ case   11:  		/* bc 12, CR0_EQ, 16 */
		/* 821E043Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x821E044C;  }
		/* 821E043Ch case   11:*/		return 0x821E0440;
	}
	return 0x821E0440;
} // Block from 821E0410h-821E0440h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821E0440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0440);
		  /* 821E0440h */ case    0:  		/* lwz R11, <#[R24 + 36]> */
		/* 821E0440h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000024) );
		/* 821E0440h case    0:*/		return 0x821E0444;
		  /* 821E0444h */ case    1:  		/* oris R11, R11, 512 */
		/* 821E0444h case    1:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 821E0444h case    1:*/		return 0x821E0448;
		  /* 821E0448h */ case    2:  		/* stw R11, <#[R24 + 36]> */
		/* 821E0448h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000024) );
		/* 821E0448h case    2:*/		return 0x821E044C;
	}
	return 0x821E044C;
} // Block from 821E0440h-821E044Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E044Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E044C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E044C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E044C);
		  /* 821E044Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821E044Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E044Ch case    0:*/		return 0x821E0450;
		  /* 821E0450h */ case    1:  		/* rlwinm. R11, R11, 0, 3, 3 */
		/* 821E0450h case    1:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R11);
		/* 821E0450h case    1:*/		return 0x821E0454;
		  /* 821E0454h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821E0454h case    2:*/		if ( regs.CR[0].eq ) { return 0x821E0464;  }
		/* 821E0454h case    2:*/		return 0x821E0458;
		  /* 821E0458h */ case    3:  		/* lwz R11, <#[R24 + 60]> */
		/* 821E0458h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000003C) );
		/* 821E0458h case    3:*/		return 0x821E045C;
		  /* 821E045Ch */ case    4:  		/* ori R11, R11, 2 */
		/* 821E045Ch case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821E045Ch case    4:*/		return 0x821E0460;
		  /* 821E0460h */ case    5:  		/* stw R11, <#[R24 + 60]> */
		/* 821E0460h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x0000003C) );
		/* 821E0460h case    5:*/		return 0x821E0464;
	}
	return 0x821E0464;
} // Block from 821E044Ch-821E0464h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E0464h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0464( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0464) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0464);
		  /* 821E0464h */ case    0:  		/* lwz R29, <#[R29 + 8]> */
		/* 821E0464h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000008) );
		/* 821E0464h case    0:*/		return 0x821E0468;
		  /* 821E0468h */ case    1:  		/* b -408 */
		/* 821E0468h case    1:*/		return 0x821E02D0;
		/* 821E0468h case    1:*/		return 0x821E046C;
	}
	return 0x821E046C;
} // Block from 821E0464h-821E046Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E046Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E046C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E046C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E046C);
		  /* 821E046Ch */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821E046Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821E046Ch case    0:*/		return 0x821E0470;
		  /* 821E0470h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E0470h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E0470h case    1:*/		return 0x821E0474;
		  /* 821E0474h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E0474h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E0474h case    2:*/		return 0x821E0478;
		  /* 821E0478h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E0478h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E0488;  }
		/* 821E0478h case    3:*/		return 0x821E047C;
		  /* 821E047Ch */ case    4:  		/* mr R30, R11 */
		/* 821E047Ch case    4:*/		regs.R30 = regs.R11;
		/* 821E047Ch case    4:*/		return 0x821E0480;
		  /* 821E0480h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E0480h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E0480h case    5:*/		return 0x821E0484;
		  /* 821E0484h */ case    6:  		/* bc 4, CR6_EQ, -484 */
		/* 821E0484h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E02A0;  }
		/* 821E0484h case    6:*/		return 0x821E0488;
	}
	return 0x821E0488;
} // Block from 821E046Ch-821E0488h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E0488h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0488);
		  /* 821E0488h */ case    0:  		/* lwz R11, <#[R24 + 36]> */
		/* 821E0488h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000024) );
		/* 821E0488h case    0:*/		return 0x821E048C;
		  /* 821E048Ch */ case    1:  		/* rlwinm. R10, R11, 0, 6, 6 */
		/* 821E048Ch case    1:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R10,regs.R11);
		/* 821E048Ch case    1:*/		return 0x821E0490;
		  /* 821E0490h */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 821E0490h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E04A0;  }
		/* 821E0490h case    2:*/		return 0x821E0494;
		  /* 821E0494h */ case    3:  		/* lwz R10, <#[R24 + 12]> */
		/* 821E0494h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x0000000C) );
		/* 821E0494h case    3:*/		return 0x821E0498;
		  /* 821E0498h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821E0498h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E0498h case    4:*/		return 0x821E049C;
		  /* 821E049Ch */ case    5:  		/* bc 12, CR6_EQ, 516 */
		/* 821E049Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821E06A0;  }
		/* 821E049Ch case    5:*/		return 0x821E04A0;
	}
	return 0x821E04A0;
} // Block from 821E0488h-821E04A0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E04A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E04A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E04A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E04A0);
		  /* 821E04A0h */ case    0:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E04A0h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E04A0h case    0:*/		return 0x821E04A4;
		  /* 821E04A4h */ case    1:  		/* bc 12, CR0_EQ, 508 */
		/* 821E04A4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E06A0;  }
		/* 821E04A4h case    1:*/		return 0x821E04A8;
		  /* 821E04A8h */ case    2:  		/* lwz R5, <#[R20 + 4]> */
		/* 821E04A8h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R20 + 0x00000004) );
		/* 821E04A8h case    2:*/		return 0x821E04AC;
		  /* 821E04ACh */ case    3:  		/* mr R27, R19 */
		/* 821E04ACh case    3:*/		regs.R27 = regs.R19;
		/* 821E04ACh case    3:*/		return 0x821E04B0;
		  /* 821E04B0h */ case    4:  		/* rlwinm. R4, R5, 0, 31, 31 */
		/* 821E04B0h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R4,regs.R5);
		/* 821E04B0h case    4:*/		return 0x821E04B4;
		  /* 821E04B4h */ case    5:  		/* bc 4, CR0_EQ, 176 */
		/* 821E04B4h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821E0564;  }
		/* 821E04B4h case    5:*/		return 0x821E04B8;
		  /* 821E04B8h */ case    6:  		/* mr R8, R5 */
		/* 821E04B8h case    6:*/		regs.R8 = regs.R5;
		/* 821E04B8h case    6:*/		return 0x821E04BC;
		  /* 821E04BCh */ case    7:  		/* cmplwi CR0, R5, 0 */
		/* 821E04BCh case    7:*/		cpu::op::cmplwi<0>(regs,regs.R5,0x00000000);
		/* 821E04BCh case    7:*/		return 0x821E04C0;
		  /* 821E04C0h */ case    8:  		/* bc 12, CR0_EQ, 164 */
		/* 821E04C0h case    8:*/		if ( regs.CR[0].eq ) { return 0x821E0564;  }
		/* 821E04C0h case    8:*/		return 0x821E04C4;
		  /* 821E04C4h */ case    9:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E04C4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E04C4h case    9:*/		return 0x821E04C8;
		  /* 821E04C8h */ case   10:  		/* subf R11, R11, R24 */
		/* 821E04C8h case   10:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R24);
		/* 821E04C8h case   10:*/		return 0x821E04CC;
		  /* 821E04CCh */ case   11:  		/* divw R10, R11, R28 */
		/* 821E04CCh case   11:*/		cpu::op::divw<0>(regs,&regs.R10,regs.R11,regs.R28);
		/* 821E04CCh case   11:*/		return 0x821E04D0;
		  /* 821E04D0h */ case   12:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 821E04D0h case   12:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 821E04D0h case   12:*/		return 0x821E04D4;
		  /* 821E04D4h */ case   13:  		/* rlwinm R7, R10, 0, 27, 31 */
		/* 821E04D4h case   13:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R10);
		/* 821E04D4h case   13:*/		return 0x821E04D8;
		  /* 821E04D8h */ case   14:  		/* addi R11, R11, 21 */
		/* 821E04D8h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821E04D8h case   14:*/		return 0x821E04DC;
		  /* 821E04DCh */ case   15:  		/* rlwinm R6, R11, 2, 0, 29 */
		/* 821E04DCh case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R6,regs.R11);
		/* 821E04DCh case   15:*/		return 0x821E04E0;
		  /* 821E04E0h */ case   16:  		/* lwzx R11, <#[R6 + R8]> */
		/* 821E04E0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + regs.R8 + 0x00000000) );
		/* 821E04E0h case   16:*/		return 0x821E04E4;
		  /* 821E04E4h */ case   17:  		/* srw R11, R11, R7 */
		/* 821E04E4h case   17:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R7);
		/* 821E04E4h case   17:*/		return 0x821E04E8;
		  /* 821E04E8h */ case   18:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E04E8h case   18:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E04E8h case   18:*/		return 0x821E04EC;
		  /* 821E04ECh */ case   19:  		/* bc 12, CR0_EQ, 92 */
		/* 821E04ECh case   19:*/		if ( regs.CR[0].eq ) { return 0x821E0548;  }
		/* 821E04ECh case   19:*/		return 0x821E04F0;
		  /* 821E04F0h */ case   20:  		/* lwz R9, <#[R8 + 12]> */
		/* 821E04F0h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x0000000C) );
		/* 821E04F0h case   20:*/		return 0x821E04F4;
		  /* 821E04F4h */ case   21:  		/* cmplwi CR6, R9, 0 */
		/* 821E04F4h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821E04F4h case   21:*/		return 0x821E04F8;
		  /* 821E04F8h */ case   22:  		/* bc 12, CR6_EQ, 80 */
		/* 821E04F8h case   22:*/		if ( regs.CR[6].eq ) { return 0x821E0548;  }
		/* 821E04F8h case   22:*/		return 0x821E04FC;
		  /* 821E04FCh */ case   23:  		/* rlwinm R10, R26, 27, 5, 31 */
		/* 821E04FCh case   23:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R26);
		/* 821E04FCh case   23:*/		return 0x821E0500;
		  /* 821E0500h */ case   24:  		/* lwz R11, <#[R9]> */
		/* 821E0500h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 821E0500h case   24:*/		return 0x821E0504;
		  /* 821E0504h */ case   25:  		/* rlwinm R3, R26, 0, 27, 31 */
		/* 821E0504h case   25:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R3,regs.R26);
		/* 821E0504h case   25:*/		return 0x821E0508;
		  /* 821E0508h */ case   26:  		/* addi R10, R10, 21 */
		/* 821E0508h case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x15);
		/* 821E0508h case   26:*/		return 0x821E050C;
		  /* 821E050Ch */ case   27:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E050Ch case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E050Ch case   27:*/		return 0x821E0510;
		  /* 821E0510h */ case   28:  		/* lwzx R10, <#[R10 + R11]> */
		/* 821E0510h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821E0510h case   28:*/		return 0x821E0514;
		  /* 821E0514h */ case   29:  		/* srw R10, R10, R3 */
		/* 821E0514h case   29:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R10,regs.R3);
		/* 821E0514h case   29:*/		return 0x821E0518;
		  /* 821E0518h */ case   30:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821E0518h case   30:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821E0518h case   30:*/		return 0x821E051C;
		  /* 821E051Ch */ case   31:  		/* bc 4, CR0_EQ, 36 */
		/* 821E051Ch case   31:*/		if ( !regs.CR[0].eq ) { return 0x821E0540;  }
		/* 821E051Ch case   31:*/		return 0x821E0520;
		  /* 821E0520h */ case   32:  		/* cmplwi CR6, R27, 0 */
		/* 821E0520h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821E0520h case   32:*/		return 0x821E0524;
		  /* 821E0524h */ case   33:  		/* bc 12, CR6_EQ, 24 */
		/* 821E0524h case   33:*/		if ( regs.CR[6].eq ) { return 0x821E053C;  }
		/* 821E0524h case   33:*/		return 0x821E0528;
		  /* 821E0528h */ case   34:  		/* cmplw CR6, R11, R27 */
		/* 821E0528h case   34:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 821E0528h case   34:*/		return 0x821E052C;
		  /* 821E052Ch */ case   35:  		/* bc 12, CR6_EQ, 20 */
		/* 821E052Ch case   35:*/		if ( regs.CR[6].eq ) { return 0x821E0540;  }
		/* 821E052Ch case   35:*/		return 0x821E0530;
		  /* 821E0530h */ case   36:  		/* lwz R10, <#[R24 + 12]> */
		/* 821E0530h case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x0000000C) );
		/* 821E0530h case   36:*/		return 0x821E0534;
		  /* 821E0534h */ case   37:  		/* cmplw CR6, R10, R8 */
		/* 821E0534h case   37:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 821E0534h case   37:*/		return 0x821E0538;
		  /* 821E0538h */ case   38:  		/* bc 4, CR6_EQ, 8 */
		/* 821E0538h case   38:*/		if ( !regs.CR[6].eq ) { return 0x821E0540;  }
		/* 821E0538h case   38:*/		return 0x821E053C;
	}
	return 0x821E053C;
} // Block from 821E04A0h-821E053Ch (39 instructions)

//////////////////////////////////////////////////////
// Block at 821E053Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E053C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E053C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E053C);
		  /* 821E053Ch */ case    0:  		/* mr R27, R11 */
		/* 821E053Ch case    0:*/		regs.R27 = regs.R11;
		/* 821E053Ch case    0:*/		return 0x821E0540;
	}
	return 0x821E0540;
} // Block from 821E053Ch-821E0540h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E0540h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0540);
		  /* 821E0540h */ case    0:  		/* lwz R9, <#[R9 + 8]> */
		/* 821E0540h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821E0540h case    0:*/		return 0x821E0544;
		  /* 821E0544h */ case    1:  		/* b -80 */
		/* 821E0544h case    1:*/		return 0x821E04F4;
		/* 821E0544h case    1:*/		return 0x821E0548;
	}
	return 0x821E0548;
} // Block from 821E0540h-821E0548h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E0548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0548);
		  /* 821E0548h */ case    0:  		/* rlwinm R11, R8, 0, 0, 30 */
		/* 821E0548h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R8);
		/* 821E0548h case    0:*/		return 0x821E054C;
		  /* 821E054Ch */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E054Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E054Ch case    1:*/		return 0x821E0550;
		  /* 821E0550h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E0550h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E0550h case    2:*/		return 0x821E0554;
		  /* 821E0554h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E0554h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E0564;  }
		/* 821E0554h case    3:*/		return 0x821E0558;
		  /* 821E0558h */ case    4:  		/* mr R8, R11 */
		/* 821E0558h case    4:*/		regs.R8 = regs.R11;
		/* 821E0558h case    4:*/		return 0x821E055C;
		  /* 821E055Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E055Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E055Ch case    5:*/		return 0x821E0560;
		  /* 821E0560h */ case    6:  		/* bc 4, CR6_EQ, -128 */
		/* 821E0560h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E04E0;  }
		/* 821E0560h case    6:*/		return 0x821E0564;
	}
	return 0x821E0564;
} // Block from 821E0548h-821E0564h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E0564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0564);
		  /* 821E0564h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 821E0564h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821E0564h case    0:*/		return 0x821E0568;
		  /* 821E0568h */ case    1:  		/* bc 4, CR6_EQ, 300 */
		/* 821E0568h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E0694;  }
		/* 821E0568h case    1:*/		return 0x821E056C;
		  /* 821E056Ch */ case    2:  		/* mr R29, R5 */
		/* 821E056Ch case    2:*/		regs.R29 = regs.R5;
		/* 821E056Ch case    2:*/		return 0x821E0570;
		  /* 821E0570h */ case    3:  		/* cmplwi CR0, R5, 0 */
		/* 821E0570h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R5,0x00000000);
		/* 821E0570h case    3:*/		return 0x821E0574;
		  /* 821E0574h */ case    4:  		/* bc 12, CR0_EQ, 288 */
		/* 821E0574h case    4:*/		if ( regs.CR[0].eq ) { return 0x821E0694;  }
		/* 821E0574h case    4:*/		return 0x821E0578;
		  /* 821E0578h */ case    5:  		/* b 8 */
		/* 821E0578h case    5:*/		return 0x821E0580;
		/* 821E0578h case    5:*/		return 0x821E057C;
		  /* 821E057Ch */ case    6:  		/* li R28, 68 */
		/* 821E057Ch case    6:*/		cpu::op::li<0>(regs,&regs.R28,0x44);
		/* 821E057Ch case    6:*/		return 0x821E0580;
	}
	return 0x821E0580;
} // Block from 821E0564h-821E0580h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E0580h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0580);
		  /* 821E0580h */ case    0:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E0580h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E0580h case    0:*/		return 0x821E0584;
		  /* 821E0584h */ case    1:  		/* subf R11, R11, R24 */
		/* 821E0584h case    1:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R24);
		/* 821E0584h case    1:*/		return 0x821E0588;
		  /* 821E0588h */ case    2:  		/* divw R10, R11, R28 */
		/* 821E0588h case    2:*/		cpu::op::divw<0>(regs,&regs.R10,regs.R11,regs.R28);
		/* 821E0588h case    2:*/		return 0x821E058C;
		  /* 821E058Ch */ case    3:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 821E058Ch case    3:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 821E058Ch case    3:*/		return 0x821E0590;
		  /* 821E0590h */ case    4:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821E0590h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821E0590h case    4:*/		return 0x821E0594;
		  /* 821E0594h */ case    5:  		/* addi R11, R11, 21 */
		/* 821E0594h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821E0594h case    5:*/		return 0x821E0598;
		  /* 821E0598h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E0598h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E0598h case    6:*/		return 0x821E059C;
		  /* 821E059Ch */ case    7:  		/* lwzx R11, <#[R11 + R29]> */
		/* 821E059Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R29 + 0x00000000) );
		/* 821E059Ch case    7:*/		return 0x821E05A0;
		  /* 821E05A0h */ case    8:  		/* srw R11, R11, R10 */
		/* 821E05A0h case    8:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821E05A0h case    8:*/		return 0x821E05A4;
		  /* 821E05A4h */ case    9:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E05A4h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E05A4h case    9:*/		return 0x821E05A8;
		  /* 821E05A8h */ case   10:  		/* bc 12, CR0_EQ, 204 */
		/* 821E05A8h case   10:*/		if ( regs.CR[0].eq ) { return 0x821E0674;  }
		/* 821E05A8h case   10:*/		return 0x821E05AC;
		  /* 821E05ACh */ case   11:  		/* lwz R28, <#[R29 + 12]> */
		/* 821E05ACh case   11:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R29 + 0x0000000C) );
		/* 821E05ACh case   11:*/		return 0x821E05B0;
		  /* 821E05B0h */ case   12:  		/* cmplwi CR6, R28, 0 */
		/* 821E05B0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821E05B0h case   12:*/		return 0x821E05B4;
		  /* 821E05B4h */ case   13:  		/* bc 12, CR6_EQ, 192 */
		/* 821E05B4h case   13:*/		if ( regs.CR[6].eq ) { return 0x821E0674;  }
		/* 821E05B4h case   13:*/		return 0x821E05B8;
		  /* 821E05B8h */ case   14:  		/* lwz R11, <#[R28]> */
		/* 821E05B8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821E05B8h case   14:*/		return 0x821E05BC;
		  /* 821E05BCh */ case   15:  		/* cmplw CR6, R11, R27 */
		/* 821E05BCh case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 821E05BCh case   15:*/		return 0x821E05C0;
		  /* 821E05C0h */ case   16:  		/* bc 12, CR6_EQ, 172 */
		/* 821E05C0h case   16:*/		if ( regs.CR[6].eq ) { return 0x821E066C;  }
		/* 821E05C0h case   16:*/		return 0x821E05C4;
		  /* 821E05C4h */ case   17:  		/* rlwinm R10, R26, 27, 5, 31 */
		/* 821E05C4h case   17:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R26);
		/* 821E05C4h case   17:*/		return 0x821E05C8;
		  /* 821E05C8h */ case   18:  		/* rlwinm R9, R26, 0, 27, 31 */
		/* 821E05C8h case   18:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R26);
		/* 821E05C8h case   18:*/		return 0x821E05CC;
		  /* 821E05CCh */ case   19:  		/* addi R10, R10, 21 */
		/* 821E05CCh case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x15);
		/* 821E05CCh case   19:*/		return 0x821E05D0;
		  /* 821E05D0h */ case   20:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821E05D0h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821E05D0h case   20:*/		return 0x821E05D4;
		  /* 821E05D4h */ case   21:  		/* lwzx R10, <#[R10 + R11]> */
		/* 821E05D4h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821E05D4h case   21:*/		return 0x821E05D8;
		  /* 821E05D8h */ case   22:  		/* srw R10, R10, R9 */
		/* 821E05D8h case   22:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821E05D8h case   22:*/		return 0x821E05DC;
		  /* 821E05DCh */ case   23:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821E05DCh case   23:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821E05DCh case   23:*/		return 0x821E05E0;
		  /* 821E05E0h */ case   24:  		/* bc 4, CR0_EQ, 140 */
		/* 821E05E0h case   24:*/		if ( !regs.CR[0].eq ) { return 0x821E066C;  }
		/* 821E05E0h case   24:*/		return 0x821E05E4;
		  /* 821E05E4h */ case   25:  		/* lwz R10, <#[R20 + 108]> */
		/* 821E05E4h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000006C) );
		/* 821E05E4h case   25:*/		return 0x821E05E8;
		  /* 821E05E8h */ case   26:  		/* li R5, 1 */
		/* 821E05E8h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821E05E8h case   26:*/		return 0x821E05EC;
		  /* 821E05ECh */ case   27:  		/* mr R3, R20 */
		/* 821E05ECh case   27:*/		regs.R3 = regs.R20;
		/* 821E05ECh case   27:*/		return 0x821E05F0;
		  /* 821E05F0h */ case   28:  		/* addi R4, R10, 1 */
		/* 821E05F0h case   28:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R10,0x1);
		/* 821E05F0h case   28:*/		return 0x821E05F4;
		  /* 821E05F4h */ case   29:  		/* stw R4, <#[R20 + 108]> */
		/* 821E05F4h case   29:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R20 + 0x0000006C) );
		/* 821E05F4h case   29:*/		return 0x821E05F8;
		  /* 821E05F8h */ case   30:  		/* mr R30, R4 */
		/* 821E05F8h case   30:*/		regs.R30 = regs.R4;
		/* 821E05F8h case   30:*/		return 0x821E05FC;
		  /* 821E05FCh */ case   31:  		/* stw R4, <#[R11 + 44]> */
		/* 821E05FCh case   31:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R11 + 0x0000002C) );
		/* 821E05FCh case   31:*/		return 0x821E0600;
		  /* 821E0600h */ case   32:  		/* bl -134536 */
		/* 821E0600h case   32:*/		regs.LR = 0x821E0604; return 0x821BF878;
		/* 821E0600h case   32:*/		return 0x821E0604;
		  /* 821E0604h */ case   33:  		/* lwz R11, <#[R20 + 108]> */
		/* 821E0604h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000006C) );
		/* 821E0604h case   33:*/		return 0x821E0608;
		  /* 821E0608h */ case   34:  		/* addi R31, R11, 1 */
		/* 821E0608h case   34:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x1);
		/* 821E0608h case   34:*/		return 0x821E060C;
		  /* 821E060Ch */ case   35:  		/* stw R31, <#[R20 + 108]> */
		/* 821E060Ch case   35:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R20 + 0x0000006C) );
		/* 821E060Ch case   35:*/		return 0x821E0610;
		  /* 821E0610h */ case   36:  		/* mr R4, R31 */
		/* 821E0610h case   36:*/		regs.R4 = regs.R31;
		/* 821E0610h case   36:*/		return 0x821E0614;
		  /* 821E0614h */ case   37:  		/* stw R31, <#[R27 + 44]> */
		/* 821E0614h case   37:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R27 + 0x0000002C) );
		/* 821E0614h case   37:*/		return 0x821E0618;
		  /* 821E0618h */ case   38:  		/* bl -134560 */
		/* 821E0618h case   38:*/		regs.LR = 0x821E061C; return 0x821BF878;
		/* 821E0618h case   38:*/		return 0x821E061C;
		  /* 821E061Ch */ case   39:  		/* lwz R11, <#[R20 + 4]> */
		/* 821E061Ch case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821E061Ch case   39:*/		return 0x821E0620;
		  /* 821E0620h */ case   40:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E0620h case   40:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E0620h case   40:*/		return 0x821E0624;
		  /* 821E0624h */ case   41:  		/* bc 4, CR0_EQ, 72 */
		/* 821E0624h case   41:*/		if ( !regs.CR[0].eq ) { return 0x821E066C;  }
		/* 821E0624h case   41:*/		return 0x821E0628;
		  /* 821E0628h */ case   42:  		/* mr R4, R11 */
		/* 821E0628h case   42:*/		regs.R4 = regs.R11;
		/* 821E0628h case   42:*/		return 0x821E062C;
		  /* 821E062Ch */ case   43:  		/* cmplwi CR0, R11, 0 */
		/* 821E062Ch case   43:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E062Ch case   43:*/		return 0x821E0630;
		  /* 821E0630h */ case   44:  		/* bc 12, CR0_EQ, 60 */
		/* 821E0630h case   44:*/		if ( regs.CR[0].eq ) { return 0x821E066C;  }
		/* 821E0630h case   44:*/		return 0x821E0634;
		  /* 821E0634h */ case   45:  		/* lwz R11, <#[R4 + 44]> */
		/* 821E0634h case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000002C) );
		/* 821E0634h case   45:*/		return 0x821E0638;
		  /* 821E0638h */ case   46:  		/* cmplw CR6, R11, R30 */
		/* 821E0638h case   46:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821E0638h case   46:*/		return 0x821E063C;
		  /* 821E063Ch */ case   47:  		/* bc 4, CR6_EQ, 24 */
		/* 821E063Ch case   47:*/		if ( !regs.CR[6].eq ) { return 0x821E0654;  }
		/* 821E063Ch case   47:*/		return 0x821E0640;
		  /* 821E0640h */ case   48:  		/* cmplw CR6, R11, R31 */
		/* 821E0640h case   48:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821E0640h case   48:*/		return 0x821E0644;
		  /* 821E0644h */ case   49:  		/* bc 12, CR6_EQ, 16 */
		/* 821E0644h case   49:*/		if ( regs.CR[6].eq ) { return 0x821E0654;  }
		/* 821E0644h case   49:*/		return 0x821E0648;
		  /* 821E0648h */ case   50:  		/* mr R5, R26 */
		/* 821E0648h case   50:*/		regs.R5 = regs.R26;
		/* 821E0648h case   50:*/		return 0x821E064C;
		  /* 821E064Ch */ case   51:  		/* mr R3, R20 */
		/* 821E064Ch case   51:*/		regs.R3 = regs.R20;
		/* 821E064Ch case   51:*/		return 0x821E0650;
		  /* 821E0650h */ case   52:  		/* bl -105304 */
		/* 821E0650h case   52:*/		regs.LR = 0x821E0654; return 0x821C6AF8;
		/* 821E0650h case   52:*/		return 0x821E0654;
	}
	return 0x821E0654;
} // Block from 821E0580h-821E0654h (53 instructions)

//////////////////////////////////////////////////////
// Block at 821E0654h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0654( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0654) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0654);
		  /* 821E0654h */ case    0:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821E0654h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821E0654h case    0:*/		return 0x821E0658;
		  /* 821E0658h */ case    1:  		/* lwz R4, <#[R11 + 4]> */
		/* 821E0658h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000004) );
		/* 821E0658h case    1:*/		return 0x821E065C;
		  /* 821E065Ch */ case    2:  		/* rlwinm. R11, R4, 0, 31, 31 */
		/* 821E065Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R4);
		/* 821E065Ch case    2:*/		return 0x821E0660;
		  /* 821E0660h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821E0660h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E066C;  }
		/* 821E0660h case    3:*/		return 0x821E0664;
		  /* 821E0664h */ case    4:  		/* cmplwi CR6, R4, 0 */
		/* 821E0664h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821E0664h case    4:*/		return 0x821E0668;
		  /* 821E0668h */ case    5:  		/* bc 4, CR6_EQ, -52 */
		/* 821E0668h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821E0634;  }
		/* 821E0668h case    5:*/		return 0x821E066C;
	}
	return 0x821E066C;
} // Block from 821E0654h-821E066Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E066Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E066C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E066C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E066C);
		  /* 821E066Ch */ case    0:  		/* lwz R28, <#[R28 + 8]> */
		/* 821E066Ch case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x00000008) );
		/* 821E066Ch case    0:*/		return 0x821E0670;
		  /* 821E0670h */ case    1:  		/* b -192 */
		/* 821E0670h case    1:*/		return 0x821E05B0;
		/* 821E0670h case    1:*/		return 0x821E0674;
	}
	return 0x821E0674;
} // Block from 821E066Ch-821E0674h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E0674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0674);
		  /* 821E0674h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821E0674h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821E0674h case    0:*/		return 0x821E0678;
		  /* 821E0678h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E0678h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E0678h case    1:*/		return 0x821E067C;
		  /* 821E067Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E067Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E067Ch case    2:*/		return 0x821E0680;
		  /* 821E0680h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E0680h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E0690;  }
		/* 821E0680h case    3:*/		return 0x821E0684;
		  /* 821E0684h */ case    4:  		/* mr R29, R11 */
		/* 821E0684h case    4:*/		regs.R29 = regs.R11;
		/* 821E0684h case    4:*/		return 0x821E0688;
		  /* 821E0688h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E0688h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E0688h case    5:*/		return 0x821E068C;
		  /* 821E068Ch */ case    6:  		/* bc 4, CR6_EQ, -272 */
		/* 821E068Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E057C;  }
		/* 821E068Ch case    6:*/		return 0x821E0690;
	}
	return 0x821E0690;
} // Block from 821E0674h-821E0690h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E0690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0690);
		  /* 821E0690h */ case    0:  		/* li R28, 68 */
		/* 821E0690h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x44);
		/* 821E0690h case    0:*/		return 0x821E0694;
	}
	return 0x821E0694;
} // Block from 821E0690h-821E0694h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E0694h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0694( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0694) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0694);
		  /* 821E0694h */ case    0:  		/* mr R4, R24 */
		/* 821E0694h case    0:*/		regs.R4 = regs.R24;
		/* 821E0694h case    0:*/		return 0x821E0698;
		  /* 821E0698h */ case    1:  		/* mr R3, R20 */
		/* 821E0698h case    1:*/		regs.R3 = regs.R20;
		/* 821E0698h case    1:*/		return 0x821E069C;
		  /* 821E069Ch */ case    2:  		/* bl -105316 */
		/* 821E069Ch case    2:*/		regs.LR = 0x821E06A0; return 0x821C6B38;
		/* 821E069Ch case    2:*/		return 0x821E06A0;
	}
	return 0x821E06A0;
} // Block from 821E0694h-821E06A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E06A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E06A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E06A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E06A0);
		  /* 821E06A0h */ case    0:  		/* lwz R11, <#[R24 + 16]> */
		/* 821E06A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000010) );
		/* 821E06A0h case    0:*/		return 0x821E06A4;
		  /* 821E06A4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821E06A4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E06A4h case    1:*/		return 0x821E06A8;
		  /* 821E06A8h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 821E06A8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821E06C0;  }
		/* 821E06A8h case    2:*/		return 0x821E06AC;
		  /* 821E06ACh */ case    3:  		/* lwz R11, <#[R24 + 12]> */
		/* 821E06ACh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000000C) );
		/* 821E06ACh case    3:*/		return 0x821E06B0;
		  /* 821E06B0h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821E06B0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E06B0h case    4:*/		return 0x821E06B4;
		  /* 821E06B4h */ case    5:  		/* bc 4, CR6_EQ, 12 */
		/* 821E06B4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821E06C0;  }
		/* 821E06B4h case    5:*/		return 0x821E06B8;
		  /* 821E06B8h */ case    6:  		/* lwz R11, <#[R24 + 16]> */
		/* 821E06B8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000010) );
		/* 821E06B8h case    6:*/		return 0x821E06BC;
		  /* 821E06BCh */ case    7:  		/* stw R11, <#[R24 + 12]> */
		/* 821E06BCh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x0000000C) );
		/* 821E06BCh case    7:*/		return 0x821E06C0;
	}
	return 0x821E06C0;
} // Block from 821E06A0h-821E06C0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E06C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E06C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E06C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E06C0);
		  /* 821E06C0h */ case    0:  		/* lwz R11, <#[R20 + 40]> */
		/* 821E06C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000028) );
		/* 821E06C0h case    0:*/		return 0x821E06C4;
		  /* 821E06C4h */ case    1:  		/* rlwinm R11, R11, 0, 10, 18 */
		/* 821E06C4h case    1:*/		cpu::op::rlwinm<0,0,10,18>(regs,&regs.R11,regs.R11);
		/* 821E06C4h case    1:*/		return 0x821E06C8;
		  /* 821E06C8h */ case    2:  		/* rlwinm. R11, R11, 0, 18, 11 */
		/* 821E06C8h case    2:*/		cpu::op::rlwinm<1,0,18,11>(regs,&regs.R11,regs.R11);
		/* 821E06C8h case    2:*/		return 0x821E06CC;
		  /* 821E06CCh */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E06CCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E06DC;  }
		/* 821E06CCh case    3:*/		return 0x821E06D0;
		  /* 821E06D0h */ case    4:  		/* lwz R11, <#[R20 + 44]> */
		/* 821E06D0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000002C) );
		/* 821E06D0h case    4:*/		return 0x821E06D4;
		  /* 821E06D4h */ case    5:  		/* rlwinm. R11, R11, 0, 22, 22 */
		/* 821E06D4h case    5:*/		cpu::op::rlwinm<1,0,22,22>(regs,&regs.R11,regs.R11);
		/* 821E06D4h case    5:*/		return 0x821E06D8;
		  /* 821E06D8h */ case    6:  		/* bc 12, CR0_EQ, 264 */
		/* 821E06D8h case    6:*/		if ( regs.CR[0].eq ) { return 0x821E07E0;  }
		/* 821E06D8h case    6:*/		return 0x821E06DC;
	}
	return 0x821E06DC;
} // Block from 821E06C0h-821E06DCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E06DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E06DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E06DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E06DC);
		  /* 821E06DCh */ case    0:  		/* lwz R11, <#[R20 + 4]> */
		/* 821E06DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821E06DCh case    0:*/		return 0x821E06E0;
		  /* 821E06E0h */ case    1:  		/* mr R29, R19 */
		/* 821E06E0h case    1:*/		regs.R29 = regs.R19;
		/* 821E06E0h case    1:*/		return 0x821E06E4;
		  /* 821E06E4h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E06E4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E06E4h case    2:*/		return 0x821E06E8;
		  /* 821E06E8h */ case    3:  		/* bc 4, CR0_EQ, 228 */
		/* 821E06E8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E07CC;  }
		/* 821E06E8h case    3:*/		return 0x821E06EC;
		  /* 821E06ECh */ case    4:  		/* mr R30, R11 */
		/* 821E06ECh case    4:*/		regs.R30 = regs.R11;
		/* 821E06ECh case    4:*/		return 0x821E06F0;
		  /* 821E06F0h */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 821E06F0h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E06F0h case    5:*/		return 0x821E06F4;
		  /* 821E06F4h */ case    6:  		/* bc 12, CR0_EQ, 216 */
		/* 821E06F4h case    6:*/		if ( regs.CR[0].eq ) { return 0x821E07CC;  }
		/* 821E06F4h case    6:*/		return 0x821E06F8;
		  /* 821E06F8h */ case    7:  		/* lwz R11, <#[R20 + 616]> */
		/* 821E06F8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000268) );
		/* 821E06F8h case    7:*/		return 0x821E06FC;
		  /* 821E06FCh */ case    8:  		/* subf R11, R11, R24 */
		/* 821E06FCh case    8:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R24);
		/* 821E06FCh case    8:*/		return 0x821E0700;
		  /* 821E0700h */ case    9:  		/* divw R10, R11, R28 */
		/* 821E0700h case    9:*/		cpu::op::divw<0>(regs,&regs.R10,regs.R11,regs.R28);
		/* 821E0700h case    9:*/		return 0x821E0704;
		  /* 821E0704h */ case   10:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 821E0704h case   10:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 821E0704h case   10:*/		return 0x821E0708;
		  /* 821E0708h */ case   11:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821E0708h case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821E0708h case   11:*/		return 0x821E070C;
		  /* 821E070Ch */ case   12:  		/* addi R11, R11, 21 */
		/* 821E070Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821E070Ch case   12:*/		return 0x821E0710;
		  /* 821E0710h */ case   13:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821E0710h case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821E0710h case   13:*/		return 0x821E0714;
		  /* 821E0714h */ case   14:  		/* lwzx R11, <#[R11 + R30]> */
		/* 821E0714h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 821E0714h case   14:*/		return 0x821E0718;
		  /* 821E0718h */ case   15:  		/* srw R11, R11, R10 */
		/* 821E0718h case   15:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821E0718h case   15:*/		return 0x821E071C;
		  /* 821E071Ch */ case   16:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E071Ch case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E071Ch case   16:*/		return 0x821E0720;
		  /* 821E0720h */ case   17:  		/* bc 12, CR0_EQ, 144 */
		/* 821E0720h case   17:*/		if ( regs.CR[0].eq ) { return 0x821E07B0;  }
		/* 821E0720h case   17:*/		return 0x821E0724;
		  /* 821E0724h */ case   18:  		/* lwz R11, <#[R30 + 28]> */
		/* 821E0724h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 821E0724h case   18:*/		return 0x821E0728;
		  /* 821E0728h */ case   19:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E0728h case   19:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E0728h case   19:*/		return 0x821E072C;
		  /* 821E072Ch */ case   20:  		/* bc 4, CR0_EQ, 132 */
		/* 821E072Ch case   20:*/		if ( !regs.CR[0].eq ) { return 0x821E07B0;  }
		/* 821E072Ch case   20:*/		return 0x821E0730;
		  /* 821E0730h */ case   21:  		/* mr R31, R11 */
		/* 821E0730h case   21:*/		regs.R31 = regs.R11;
		/* 821E0730h case   21:*/		return 0x821E0734;
		  /* 821E0734h */ case   22:  		/* cmplwi CR0, R11, 0 */
		/* 821E0734h case   22:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821E0734h case   22:*/		return 0x821E0738;
		  /* 821E0738h */ case   23:  		/* bc 12, CR0_EQ, 120 */
		/* 821E0738h case   23:*/		if ( regs.CR[0].eq ) { return 0x821E07B0;  }
		/* 821E0738h case   23:*/		return 0x821E073C;
		  /* 821E073Ch */ case   24:  		/* lwz R11, <#[R31 + 8]> */
		/* 821E073Ch case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E073Ch case   24:*/		return 0x821E0740;
		  /* 821E0740h */ case   25:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821E0740h case   25:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821E0740h case   25:*/		return 0x821E0744;
		  /* 821E0744h */ case   26:  		/* cmplwi CR6, R4, 119 */
		/* 821E0744h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000077);
		/* 821E0744h case   26:*/		return 0x821E0748;
		  /* 821E0748h */ case   27:  		/* bc 4, CR6_EQ, 12 */
		/* 821E0748h case   27:*/		if ( !regs.CR[6].eq ) { return 0x821E0754;  }
		/* 821E0748h case   27:*/		return 0x821E074C;
		  /* 821E074Ch */ case   28:  		/* li R29, 1 */
		/* 821E074Ch case   28:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 821E074Ch case   28:*/		return 0x821E0750;
		  /* 821E0750h */ case   29:  		/* b 516 */
		/* 821E0750h case   29:*/		return 0x821E0954;
		/* 821E0750h case   29:*/		return 0x821E0754;
	}
	return 0x821E0754;
} // Block from 821E06DCh-821E0754h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821E0754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0754);
		  /* 821E0754h */ case    0:  		/* cmplwi CR6, R4, 96 */
		/* 821E0754h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000060);
		/* 821E0754h case    0:*/		return 0x821E0758;
		  /* 821E0758h */ case    1:  		/* bc 12, CR6_EQ, 44 */
		/* 821E0758h case    1:*/		if ( regs.CR[6].eq ) { return 0x821E0784;  }
		/* 821E0758h case    1:*/		return 0x821E075C;
		  /* 821E075Ch */ case    2:  		/* cmplwi CR6, R4, 97 */
		/* 821E075Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000061);
		/* 821E075Ch case    2:*/		return 0x821E0760;
		  /* 821E0760h */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 821E0760h case    3:*/		if ( regs.CR[6].eq ) { return 0x821E0778;  }
		/* 821E0760h case    3:*/		return 0x821E0764;
		  /* 821E0764h */ case    4:  		/* cmplwi CR6, R4, 99 */
		/* 821E0764h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000063);
		/* 821E0764h case    4:*/		return 0x821E0768;
		  /* 821E0768h */ case    5:  		/* bc 12, CR6_EQ, 16 */
		/* 821E0768h case    5:*/		if ( regs.CR[6].eq ) { return 0x821E0778;  }
		/* 821E0768h case    5:*/		return 0x821E076C;
		  /* 821E076Ch */ case    6:  		/* cmplwi CR6, R4, 100 */
		/* 821E076Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000064);
		/* 821E076Ch case    6:*/		return 0x821E0770;
		  /* 821E0770h */ case    7:  		/* mr R10, R19 */
		/* 821E0770h case    7:*/		regs.R10 = regs.R19;
		/* 821E0770h case    7:*/		return 0x821E0774;
		  /* 821E0774h */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 821E0774h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821E077C;  }
		/* 821E0774h case    8:*/		return 0x821E0778;
	}
	return 0x821E0778;
} // Block from 821E0754h-821E0778h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E0778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0778);
		  /* 821E0778h */ case    0:  		/* li R10, 1 */
		/* 821E0778h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821E0778h case    0:*/		return 0x821E077C;
	}
	return 0x821E077C;
} // Block from 821E0778h-821E077Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E077Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E077C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E077C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E077C);
		  /* 821E077Ch */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821E077Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821E077Ch case    0:*/		return 0x821E0780;
		  /* 821E0780h */ case    1:  		/* bc 12, CR0_EQ, 204 */
		/* 821E0780h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E084C;  }
		/* 821E0780h case    1:*/		return 0x821E0784;
	}
	return 0x821E0784;
} // Block from 821E077Ch-821E0784h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E0784h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0784( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0784) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0784);
		  /* 821E0784h */ case    0:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821E0784h case    0:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821E0784h case    0:*/		return 0x821E0788;
		  /* 821E0788h */ case    1:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821E0788h case    1:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821E0788h case    1:*/		return 0x821E078C;
		  /* 821E078Ch */ case    2:  		/* mr R3, R20 */
		/* 821E078Ch case    2:*/		regs.R3 = regs.R20;
		/* 821E078Ch case    2:*/		return 0x821E0790;
		  /* 821E0790h */ case    3:  		/* bl -508768 */
		/* 821E0790h case    3:*/		regs.LR = 0x821E0794; return 0x82164430;
		/* 821E0790h case    3:*/		return 0x821E0794;
		  /* 821E0794h */ case    4:  		/* addi R11, R31, -4 */
		/* 821E0794h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFC);
		/* 821E0794h case    4:*/		return 0x821E0798;
		  /* 821E0798h */ case    5:  		/* lwzx R11, <#[R3 + R11]> */
		/* 821E0798h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821E0798h case    5:*/		return 0x821E079C;
		  /* 821E079Ch */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821E079Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E079Ch case    6:*/		return 0x821E07A0;
		  /* 821E07A0h */ case    7:  		/* bc 12, CR6_EQ, 436 */
		/* 821E07A0h case    7:*/		if ( regs.CR[6].eq ) { return 0x821E0954;  }
		/* 821E07A0h case    7:*/		return 0x821E07A4;
		  /* 821E07A4h */ case    8:  		/* lwz R11, <#[R24 + 60]> */
		/* 821E07A4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000003C) );
		/* 821E07A4h case    8:*/		return 0x821E07A8;
		  /* 821E07A8h */ case    9:  		/* ori R11, R11, 2 */
		/* 821E07A8h case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821E07A8h case    9:*/		return 0x821E07AC;
		  /* 821E07ACh */ case   10:  		/* stw R11, <#[R24 + 60]> */
		/* 821E07ACh case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x0000003C) );
		/* 821E07ACh case   10:*/		return 0x821E07B0;
	}
	return 0x821E07B0;
} // Block from 821E0784h-821E07B0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E07B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E07B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E07B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E07B0);
		  /* 821E07B0h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821E07B0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821E07B0h case    0:*/		return 0x821E07B4;
		  /* 821E07B4h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E07B4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E07B4h case    1:*/		return 0x821E07B8;
		  /* 821E07B8h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E07B8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E07B8h case    2:*/		return 0x821E07BC;
		  /* 821E07BCh */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821E07BCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E07CC;  }
		/* 821E07BCh case    3:*/		return 0x821E07C0;
		  /* 821E07C0h */ case    4:  		/* mr R30, R11 */
		/* 821E07C0h case    4:*/		regs.R30 = regs.R11;
		/* 821E07C0h case    4:*/		return 0x821E07C4;
		  /* 821E07C4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E07C4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E07C4h case    5:*/		return 0x821E07C8;
		  /* 821E07C8h */ case    6:  		/* bc 4, CR6_EQ, -208 */
		/* 821E07C8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E06F8;  }
		/* 821E07C8h case    6:*/		return 0x821E07CC;
	}
	return 0x821E07CC;
} // Block from 821E07B0h-821E07CCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821E07CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E07CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E07CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E07CC);
		  /* 821E07CCh */ case    0:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 821E07CCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 821E07CCh case    0:*/		return 0x821E07D0;
		  /* 821E07D0h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821E07D0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E07E0;  }
		/* 821E07D0h case    1:*/		return 0x821E07D4;
		  /* 821E07D4h */ case    2:  		/* lwz R11, <#[R24 + 60]> */
		/* 821E07D4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000003C) );
		/* 821E07D4h case    2:*/		return 0x821E07D8;
		  /* 821E07D8h */ case    3:  		/* ori R11, R11, 2 */
		/* 821E07D8h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821E07D8h case    3:*/		return 0x821E07DC;
		  /* 821E07DCh */ case    4:  		/* stw R11, <#[R24 + 60]> */
		/* 821E07DCh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x0000003C) );
		/* 821E07DCh case    4:*/		return 0x821E07E0;
	}
	return 0x821E07E0;
} // Block from 821E07CCh-821E07E0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E07E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E07E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E07E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E07E0);
		  /* 821E07E0h */ case    0:  		/* lwz R11, <#[R24 + 4]> */
		/* 821E07E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 821E07E0h case    0:*/		return 0x821E07E4;
		  /* 821E07E4h */ case    1:  		/* addi R3, R1, 264 */
		/* 821E07E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x108);
		/* 821E07E4h case    1:*/		return 0x821E07E8;
		  /* 821E07E8h */ case    2:  		/* stb R19, <#[R1 + 272]> */
		/* 821E07E8h case    2:*/		cpu::mem::store8( regs, regs.R19, (uint32)(regs.R1 + 0x00000110) );
		/* 821E07E8h case    2:*/		return 0x821E07EC;
		  /* 821E07ECh */ case    3:  		/* mr R25, R19 */
		/* 821E07ECh case    3:*/		regs.R25 = regs.R19;
		/* 821E07ECh case    3:*/		return 0x821E07F0;
		  /* 821E07F0h */ case    4:  		/* stw R11, <#[R1 + 264]> */
		/* 821E07F0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000108) );
		/* 821E07F0h case    4:*/		return 0x821E07F4;
		  /* 821E07F4h */ case    5:  		/* stw R11, <#[R1 + 268]> */
		/* 821E07F4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000010C) );
		/* 821E07F4h case    5:*/		return 0x821E07F8;
		  /* 821E07F8h */ case    6:  		/* bl -142424 */
		/* 821E07F8h case    6:*/		regs.LR = 0x821E07FC; return 0x821BDBA0;
		/* 821E07F8h case    6:*/		return 0x821E07FC;
		  /* 821E07FCh */ case    7:  		/* or. R29, R3, R3 */
		/* 821E07FCh case    7:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 821E07FCh case    7:*/		return 0x821E0800;
		  /* 821E0800h */ case    8:  		/* bc 12, CR0_EQ, 972 */
		/* 821E0800h case    8:*/		if ( regs.CR[0].eq ) { return 0x821E0BCC;  }
		/* 821E0800h case    8:*/		return 0x821E0804;
		  /* 821E0804h */ case    9:  		/* rlwinm R11, R26, 27, 5, 31 */
		/* 821E0804h case    9:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R26);
		/* 821E0804h case    9:*/		return 0x821E0808;
		  /* 821E0808h */ case   10:  		/* rlwinm R27, R26, 0, 27, 31 */
		/* 821E0808h case   10:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R27,regs.R26);
		/* 821E0808h case   10:*/		return 0x821E080C;
		  /* 821E080Ch */ case   11:  		/* addi R11, R11, 21 */
		/* 821E080Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x15);
		/* 821E080Ch case   11:*/		return 0x821E0810;
		  /* 821E0810h */ case   12:  		/* rlwinm R26, R11, 2, 0, 29 */
		/* 821E0810h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R26,regs.R11);
		/* 821E0810h case   12:*/		return 0x821E0814;
		  /* 821E0814h */ case   13:  		/* lwzx R11, <#[R26 + R29]> */
		/* 821E0814h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + regs.R29 + 0x00000000) );
		/* 821E0814h case   13:*/		return 0x821E0818;
		  /* 821E0818h */ case   14:  		/* srw R11, R11, R27 */
		/* 821E0818h case   14:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 821E0818h case   14:*/		return 0x821E081C;
		  /* 821E081Ch */ case   15:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E081Ch case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E081Ch case   15:*/		return 0x821E0820;
		  /* 821E0820h */ case   16:  		/* bc 12, CR0_EQ, 924 */
		/* 821E0820h case   16:*/		if ( regs.CR[0].eq ) { return 0x821E0BBC;  }
		/* 821E0820h case   16:*/		return 0x821E0824;
		  /* 821E0824h */ case   17:  		/* lwz R11, <#[R29 + 20]> */
		/* 821E0824h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 821E0824h case   17:*/		return 0x821E0828;
		  /* 821E0828h */ case   18:  		/* mr R28, R19 */
		/* 821E0828h case   18:*/		regs.R28 = regs.R19;
		/* 821E0828h case   18:*/		return 0x821E082C;
		  /* 821E082Ch */ case   19:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E082Ch case   19:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E082Ch case   19:*/		return 0x821E0830;
		  /* 821E0830h */ case   20:  		/* bc 12, CR0_EQ, 336 */
		/* 821E0830h case   20:*/		if ( regs.CR[0].eq ) { return 0x821E0980;  }
		/* 821E0830h case   20:*/		return 0x821E0834;
		  /* 821E0834h */ case   21:  		/* lwz R11, <#[R29 + 28]> */
		/* 821E0834h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821E0834h case   21:*/		return 0x821E0838;
		  /* 821E0838h */ case   22:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E0838h case   22:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E0838h case   22:*/		return 0x821E083C;
		  /* 821E083Ch */ case   23:  		/* bc 12, CR0_EQ, 312 */
		/* 821E083Ch case   23:*/		if ( regs.CR[0].eq ) { return 0x821E0974;  }
		/* 821E083Ch case   23:*/		return 0x821E0840;
		  /* 821E0840h */ case   24:  		/* lwz R11, <#[R29 + 36]> */
		/* 821E0840h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 821E0840h case   24:*/		return 0x821E0844;
		  /* 821E0844h */ case   25:  		/* addi R30, R29, 32 */
		/* 821E0844h case   25:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x20);
		/* 821E0844h case   25:*/		return 0x821E0848;
		  /* 821E0848h */ case   26:  		/* b 320 */
		/* 821E0848h case   26:*/		return 0x821E0988;
		/* 821E0848h case   26:*/		return 0x821E084C;
	}
	return 0x821E084C;
} // Block from 821E07E0h-821E084Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 821E084Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E084C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E084C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E084C);
		  /* 821E084Ch */ case    0:  		/* cmplwi CR6, R4, 103 */
		/* 821E084Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000067);
		/* 821E084Ch case    0:*/		return 0x821E0850;
		  /* 821E0850h */ case    1:  		/* bc 4, CR6_EQ, 48 */
		/* 821E0850h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E0880;  }
		/* 821E0850h case    1:*/		return 0x821E0854;
		  /* 821E0854h */ case    2:  		/* li R6, 0 */
		/* 821E0854h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821E0854h case    2:*/		return 0x821E0858;
		  /* 821E0858h */ case    3:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821E0858h case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821E0858h case    3:*/		return 0x821E085C;
		  /* 821E085Ch */ case    4:  		/* mr R3, R20 */
		/* 821E085Ch case    4:*/		regs.R3 = regs.R20;
		/* 821E085Ch case    4:*/		return 0x821E0860;
		  /* 821E0860h */ case    5:  		/* bl -508976 */
		/* 821E0860h case    5:*/		regs.LR = 0x821E0864; return 0x82164430;
		/* 821E0860h case    5:*/		return 0x821E0864;
		  /* 821E0864h */ case    6:  		/* addi R11, R31, -4 */
		/* 821E0864h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFC);
		/* 821E0864h case    6:*/		return 0x821E0868;
		  /* 821E0868h */ case    7:  		/* lwzx R11, <#[R3 + R11]> */
		/* 821E0868h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 821E0868h case    7:*/		return 0x821E086C;
		  /* 821E086Ch */ case    8:  		/* cmpwi CR6, R11, 6 */
		/* 821E086Ch case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000006);
		/* 821E086Ch case    8:*/		return 0x821E0870;
		  /* 821E0870h */ case    9:  		/* bc 12, CR6_LT, 228 */
		/* 821E0870h case    9:*/		if ( regs.CR[6].lt ) { return 0x821E0954;  }
		/* 821E0870h case    9:*/		return 0x821E0874;
		  /* 821E0874h */ case   10:  		/* cmpwi CR6, R11, 14 */
		/* 821E0874h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000E);
		/* 821E0874h case   10:*/		return 0x821E0878;
		  /* 821E0878h */ case   11:  		/* bc 4, CR6_GT, -212 */
		/* 821E0878h case   11:*/		if ( !regs.CR[6].gt ) { return 0x821E07A4;  }
		/* 821E0878h case   11:*/		return 0x821E087C;
		  /* 821E087Ch */ case   12:  		/* b 216 */
		/* 821E087Ch case   12:*/		return 0x821E0954;
		/* 821E087Ch case   12:*/		return 0x821E0880;
	}
	return 0x821E0880;
} // Block from 821E084Ch-821E0880h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821E0880h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0880( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0880) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0880);
		  /* 821E0880h */ case    0:  		/* cmplwi CR6, R4, 105 */
		/* 821E0880h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000069);
		/* 821E0880h case    0:*/		return 0x821E0884;
		  /* 821E0884h */ case    1:  		/* bc 4, CR6_EQ, 208 */
		/* 821E0884h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E0954;  }
		/* 821E0884h case    1:*/		return 0x821E0888;
		  /* 821E0888h */ case    2:  		/* addi R7, R1, 368 */
		/* 821E0888h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x170);
		/* 821E0888h case    2:*/		return 0x821E088C;
		  /* 821E088Ch */ case    3:  		/* lwz R4, <#[R31 + 44]> */
		/* 821E088Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000002C) );
		/* 821E088Ch case    3:*/		return 0x821E0890;
		  /* 821E0890h */ case    4:  		/* addi R6, R1, 328 */
		/* 821E0890h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x148);
		/* 821E0890h case    4:*/		return 0x821E0894;
		  /* 821E0894h */ case    5:  		/* addi R5, R1, 208 */
		/* 821E0894h case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xD0);
		/* 821E0894h case    5:*/		return 0x821E0898;
		  /* 821E0898h */ case    6:  		/* mr R3, R20 */
		/* 821E0898h case    6:*/		regs.R3 = regs.R20;
		/* 821E0898h case    6:*/		return 0x821E089C;
		  /* 821E089Ch */ case    7:  		/* bl 322140 */
		/* 821E089Ch case    7:*/		regs.LR = 0x821E08A0; return 0x8222F2F8;
		/* 821E089Ch case    7:*/		return 0x821E08A0;
		  /* 821E08A0h */ case    8:  		/* addi R7, R1, 448 */
		/* 821E08A0h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1C0);
		/* 821E08A0h case    8:*/		return 0x821E08A4;
		  /* 821E08A4h */ case    9:  		/* addi R6, R1, 384 */
		/* 821E08A4h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x180);
		/* 821E08A4h case    9:*/		return 0x821E08A8;
		  /* 821E08A8h */ case   10:  		/* lwz R4, <#[R31 + 48]> */
		/* 821E08A8h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000030) );
		/* 821E08A8h case   10:*/		return 0x821E08AC;
		  /* 821E08ACh */ case   11:  		/* addi R5, R1, 256 */
		/* 821E08ACh case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x100);
		/* 821E08ACh case   11:*/		return 0x821E08B0;
		  /* 821E08B0h */ case   12:  		/* mr R3, R20 */
		/* 821E08B0h case   12:*/		regs.R3 = regs.R20;
		/* 821E08B0h case   12:*/		return 0x821E08B4;
		  /* 821E08B4h */ case   13:  		/* bl 322116 */
		/* 821E08B4h case   13:*/		regs.LR = 0x821E08B8; return 0x8222F2F8;
		/* 821E08B4h case   13:*/		return 0x821E08B8;
		  /* 821E08B8h */ case   14:  		/* addi R7, R1, 500 */
		/* 821E08B8h case   14:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1F4);
		/* 821E08B8h case   14:*/		return 0x821E08BC;
		  /* 821E08BCh */ case   15:  		/* addi R6, R1, 400 */
		/* 821E08BCh case   15:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x190);
		/* 821E08BCh case   15:*/		return 0x821E08C0;
		  /* 821E08C0h */ case   16:  		/* lwz R4, <#[R31 + 52]> */
		/* 821E08C0h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000034) );
		/* 821E08C0h case   16:*/		return 0x821E08C4;
		  /* 821E08C4h */ case   17:  		/* addi R5, R1, 224 */
		/* 821E08C4h case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xE0);
		/* 821E08C4h case   17:*/		return 0x821E08C8;
		  /* 821E08C8h */ case   18:  		/* mr R3, R20 */
		/* 821E08C8h case   18:*/		regs.R3 = regs.R20;
		/* 821E08C8h case   18:*/		return 0x821E08CC;
		  /* 821E08CCh */ case   19:  		/* bl 322092 */
		/* 821E08CCh case   19:*/		regs.LR = 0x821E08D0; return 0x8222F2F8;
		/* 821E08CCh case   19:*/		return 0x821E08D0;
		  /* 821E08D0h */ case   20:  		/* lwz R11, <#[R1 + 208]> */
		/* 821E08D0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000D0) );
		/* 821E08D0h case   20:*/		return 0x821E08D4;
		  /* 821E08D4h */ case   21:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E08D4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E08D4h case   21:*/		return 0x821E08D8;
		  /* 821E08D8h */ case   22:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821E08D8h case   22:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821E08D8h case   22:*/		return 0x821E08DC;
		  /* 821E08DCh */ case   23:  		/* cmplwi CR6, R11, 125 */
		/* 821E08DCh case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 821E08DCh case   23:*/		return 0x821E08E0;
		  /* 821E08E0h */ case   24:  		/* bc 12, CR6_EQ, 16 */
		/* 821E08E0h case   24:*/		if ( regs.CR[6].eq ) { return 0x821E08F0;  }
		/* 821E08E0h case   24:*/		return 0x821E08E4;
		  /* 821E08E4h */ case   25:  		/* cmplwi CR6, R11, 124 */
		/* 821E08E4h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007C);
		/* 821E08E4h case   25:*/		return 0x821E08E8;
		  /* 821E08E8h */ case   26:  		/* mr R11, R19 */
		/* 821E08E8h case   26:*/		regs.R11 = regs.R19;
		/* 821E08E8h case   26:*/		return 0x821E08EC;
		  /* 821E08ECh */ case   27:  		/* bc 4, CR6_EQ, 8 */
		/* 821E08ECh case   27:*/		if ( !regs.CR[6].eq ) { return 0x821E08F4;  }
		/* 821E08ECh case   27:*/		return 0x821E08F0;
	}
	return 0x821E08F0;
} // Block from 821E0880h-821E08F0h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821E08F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E08F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E08F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E08F0);
		  /* 821E08F0h */ case    0:  		/* li R11, 1 */
		/* 821E08F0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821E08F0h case    0:*/		return 0x821E08F4;
	}
	return 0x821E08F4;
} // Block from 821E08F0h-821E08F4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E08F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E08F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E08F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E08F4);
		  /* 821E08F4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E08F4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E08F4h case    0:*/		return 0x821E08F8;
		  /* 821E08F8h */ case    1:  		/* bc 4, CR0_EQ, 48 */
		/* 821E08F8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E0928;  }
		/* 821E08F8h case    1:*/		return 0x821E08FC;
		  /* 821E08FCh */ case    2:  		/* lwz R11, <#[R1 + 256]> */
		/* 821E08FCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000100) );
		/* 821E08FCh case    2:*/		return 0x821E0900;
		  /* 821E0900h */ case    3:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E0900h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E0900h case    3:*/		return 0x821E0904;
		  /* 821E0904h */ case    4:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821E0904h case    4:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821E0904h case    4:*/		return 0x821E0908;
		  /* 821E0908h */ case    5:  		/* cmplwi CR6, R11, 125 */
		/* 821E0908h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 821E0908h case    5:*/		return 0x821E090C;
		  /* 821E090Ch */ case    6:  		/* bc 12, CR6_EQ, 16 */
		/* 821E090Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821E091C;  }
		/* 821E090Ch case    6:*/		return 0x821E0910;
		  /* 821E0910h */ case    7:  		/* cmplwi CR6, R11, 124 */
		/* 821E0910h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007C);
		/* 821E0910h case    7:*/		return 0x821E0914;
		  /* 821E0914h */ case    8:  		/* mr R11, R19 */
		/* 821E0914h case    8:*/		regs.R11 = regs.R19;
		/* 821E0914h case    8:*/		return 0x821E0918;
		  /* 821E0918h */ case    9:  		/* bc 4, CR6_EQ, 8 */
		/* 821E0918h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821E0920;  }
		/* 821E0918h case    9:*/		return 0x821E091C;
	}
	return 0x821E091C;
} // Block from 821E08F4h-821E091Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E091Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E091C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E091C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E091C);
		  /* 821E091Ch */ case    0:  		/* li R11, 1 */
		/* 821E091Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821E091Ch case    0:*/		return 0x821E0920;
	}
	return 0x821E0920;
} // Block from 821E091Ch-821E0920h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E0920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0920);
		  /* 821E0920h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E0920h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E0920h case    0:*/		return 0x821E0924;
		  /* 821E0924h */ case    1:  		/* bc 12, CR0_EQ, -384 */
		/* 821E0924h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E07A4;  }
		/* 821E0924h case    1:*/		return 0x821E0928;
	}
	return 0x821E0928;
} // Block from 821E0920h-821E0928h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E0928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0928);
		  /* 821E0928h */ case    0:  		/* lwz R11, <#[R1 + 224]> */
		/* 821E0928h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000E0) );
		/* 821E0928h case    0:*/		return 0x821E092C;
		  /* 821E092Ch */ case    1:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E092Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E092Ch case    1:*/		return 0x821E0930;
		  /* 821E0930h */ case    2:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821E0930h case    2:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821E0930h case    2:*/		return 0x821E0934;
		  /* 821E0934h */ case    3:  		/* cmplwi CR6, R11, 125 */
		/* 821E0934h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 821E0934h case    3:*/		return 0x821E0938;
		  /* 821E0938h */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 821E0938h case    4:*/		if ( regs.CR[6].eq ) { return 0x821E0948;  }
		/* 821E0938h case    4:*/		return 0x821E093C;
		  /* 821E093Ch */ case    5:  		/* cmplwi CR6, R11, 124 */
		/* 821E093Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007C);
		/* 821E093Ch case    5:*/		return 0x821E0940;
		  /* 821E0940h */ case    6:  		/* mr R11, R19 */
		/* 821E0940h case    6:*/		regs.R11 = regs.R19;
		/* 821E0940h case    6:*/		return 0x821E0944;
		  /* 821E0944h */ case    7:  		/* bc 4, CR6_EQ, 8 */
		/* 821E0944h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821E094C;  }
		/* 821E0944h case    7:*/		return 0x821E0948;
	}
	return 0x821E0948;
} // Block from 821E0928h-821E0948h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E0948h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0948( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0948) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0948);
		  /* 821E0948h */ case    0:  		/* li R11, 1 */
		/* 821E0948h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821E0948h case    0:*/		return 0x821E094C;
	}
	return 0x821E094C;
} // Block from 821E0948h-821E094Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E094Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E094C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E094C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E094C);
		  /* 821E094Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821E094Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821E094Ch case    0:*/		return 0x821E0950;
		  /* 821E0950h */ case    1:  		/* bc 12, CR0_EQ, -428 */
		/* 821E0950h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E07A4;  }
		/* 821E0950h case    1:*/		return 0x821E0954;
	}
	return 0x821E0954;
} // Block from 821E094Ch-821E0954h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E0954h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0954( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0954) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0954);
		  /* 821E0954h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821E0954h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821E0954h case    0:*/		return 0x821E0958;
		  /* 821E0958h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821E0958h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821E0958h case    1:*/		return 0x821E095C;
		  /* 821E095Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E095Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E095Ch case    2:*/		return 0x821E0960;
		  /* 821E0960h */ case    3:  		/* bc 4, CR0_EQ, -432 */
		/* 821E0960h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E07B0;  }
		/* 821E0960h case    3:*/		return 0x821E0964;
		  /* 821E0964h */ case    4:  		/* mr R31, R11 */
		/* 821E0964h case    4:*/		regs.R31 = regs.R11;
		/* 821E0964h case    4:*/		return 0x821E0968;
		  /* 821E0968h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E0968h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E0968h case    5:*/		return 0x821E096C;
		  /* 821E096Ch */ case    6:  		/* bc 4, CR6_EQ, -560 */
		/* 821E096Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E073C;  }
		/* 821E096Ch case    6:*/		return 0x821E0970;
		  /* 821E0970h */ case    7:  		/* b -448 */
		/* 821E0970h case    7:*/		return 0x821E07B0;
		/* 821E0970h case    7:*/		return 0x821E0974;
	}
	return 0x821E0974;
} // Block from 821E0954h-821E0974h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821E0974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0974);
		  /* 821E0974h */ case    0:  		/* lwz R11, <#[R29 + 28]> */
		/* 821E0974h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821E0974h case    0:*/		return 0x821E0978;
		  /* 821E0978h */ case    1:  		/* addi R30, R29, 24 */
		/* 821E0978h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x18);
		/* 821E0978h case    1:*/		return 0x821E097C;
		  /* 821E097Ch */ case    2:  		/* b 12 */
		/* 821E097Ch case    2:*/		return 0x821E0988;
		/* 821E097Ch case    2:*/		return 0x821E0980;
	}
	return 0x821E0980;
} // Block from 821E0974h-821E0980h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E0980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0980);
		  /* 821E0980h */ case    0:  		/* lwz R11, <#[R29 + 20]> */
		/* 821E0980h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 821E0980h case    0:*/		return 0x821E0984;
		  /* 821E0984h */ case    1:  		/* addi R30, R29, 16 */
		/* 821E0984h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x10);
		/* 821E0984h case    1:*/		return 0x821E0988;
	}
	return 0x821E0988;
} // Block from 821E0980h-821E0988h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E0988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0988);
		  /* 821E0988h */ case    0:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821E0988h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E0988h case    0:*/		return 0x821E098C;
		  /* 821E098Ch */ case    1:  		/* addic R10, R10, -1 */
		/* 821E098Ch case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821E098Ch case    1:*/		return 0x821E0990;
		  /* 821E0990h */ case    2:  		/* subfe R10, R10, R10 */
		/* 821E0990h case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821E0990h case    2:*/		return 0x821E0994;
		  /* 821E0994h */ case    3:  		/* and R31, R10, R11 */
		/* 821E0994h case    3:*/		cpu::op::and<0>(regs,&regs.R31,regs.R10,regs.R11);
		/* 821E0994h case    3:*/		return 0x821E0998;
		  /* 821E0998h */ case    4:  		/* b 260 */
		/* 821E0998h case    4:*/		return 0x821E0A9C;
		/* 821E0998h case    4:*/		return 0x821E099C;
		  /* 821E099Ch */ case    5:  		/* lwz R10, <#[R31]> */
		/* 821E099Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821E099Ch case    5:*/		return 0x821E09A0;
		  /* 821E09A0h */ case    6:  		/* cmplwi CR6, R10, 0 */
		/* 821E09A0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E09A0h case    6:*/		return 0x821E09A4;
		  /* 821E09A4h */ case    7:  		/* bc 12, CR6_EQ, 48 */
		/* 821E09A4h case    7:*/		if ( regs.CR[6].eq ) { return 0x821E09D4;  }
		/* 821E09A4h case    7:*/		return 0x821E09A8;
		  /* 821E09A8h */ case    8:  		/* lwz R11, <#[R10 + 12]> */
		/* 821E09A8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 821E09A8h case    8:*/		return 0x821E09AC;
		  /* 821E09ACh */ case    9:  		/* lwz R9, <#[R11 + 8]> */
		/* 821E09ACh case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821E09ACh case    9:*/		return 0x821E09B0;
		  /* 821E09B0h */ case   10:  		/* rlwinm. R9, R9, 6, 31, 31 */
		/* 821E09B0h case   10:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R9,regs.R9);
		/* 821E09B0h case   10:*/		return 0x821E09B4;
		  /* 821E09B4h */ case   11:  		/* bc 4, CR0_EQ, 24 */
		/* 821E09B4h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821E09CC;  }
		/* 821E09B4h case   11:*/		return 0x821E09B8;
		  /* 821E09B8h */ case   12:  		/* lwz R11, <#[R11 + 28]> */
		/* 821E09B8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 821E09B8h case   12:*/		return 0x821E09BC;
		  /* 821E09BCh */ case   13:  		/* lwzx R11, <#[R11 + R26]> */
		/* 821E09BCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R26 + 0x00000000) );
		/* 821E09BCh case   13:*/		return 0x821E09C0;
		  /* 821E09C0h */ case   14:  		/* srw R11, R11, R27 */
		/* 821E09C0h case   14:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R27);
		/* 821E09C0h case   14:*/		return 0x821E09C4;
		  /* 821E09C4h */ case   15:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E09C4h case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E09C4h case   15:*/		return 0x821E09C8;
		  /* 821E09C8h */ case   16:  		/* bc 4, CR0_EQ, 36 */
		/* 821E09C8h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821E09EC;  }
		/* 821E09C8h case   16:*/		return 0x821E09CC;
	}
	return 0x821E09CC;
} // Block from 821E0988h-821E09CCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821E09CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E09CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E09CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E09CC);
		  /* 821E09CCh */ case    0:  		/* lwz R10, <#[R10 + 4]> */
		/* 821E09CCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821E09CCh case    0:*/		return 0x821E09D0;
		  /* 821E09D0h */ case    1:  		/* b -48 */
		/* 821E09D0h case    1:*/		return 0x821E09A0;
		/* 821E09D0h case    1:*/		return 0x821E09D4;
	}
	return 0x821E09D4;
} // Block from 821E09CCh-821E09D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E09D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E09D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E09D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E09D4);
		  /* 821E09D4h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821E09D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E09D4h case    0:*/		return 0x821E09D8;
		  /* 821E09D8h */ case    1:  		/* rlwinm. R10, R11, 6, 31, 31 */
		/* 821E09D8h case    1:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R11);
		/* 821E09D8h case    1:*/		return 0x821E09DC;
		  /* 821E09DCh */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 821E09DCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E09EC;  }
		/* 821E09DCh case    2:*/		return 0x821E09E0;
		  /* 821E09E0h */ case    3:  		/* oris R11, R11, 1024 */
		/* 821E09E0h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x400);
		/* 821E09E0h case    3:*/		return 0x821E09E4;
		  /* 821E09E4h */ case    4:  		/* li R28, 1 */
		/* 821E09E4h case    4:*/		cpu::op::li<0>(regs,&regs.R28,0x1);
		/* 821E09E4h case    4:*/		return 0x821E09E8;
		  /* 821E09E8h */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 821E09E8h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821E09E8h case    5:*/		return 0x821E09EC;
	}
	return 0x821E09EC;
} // Block from 821E09D4h-821E09ECh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E09ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E09EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E09EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E09EC);
		  /* 821E09ECh */ case    0:  		/* rlwinm. R11, R25, 0, 24, 31 */
		/* 821E09ECh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R25);
		/* 821E09ECh case    0:*/		return 0x821E09F0;
		  /* 821E09F0h */ case    1:  		/* bc 4, CR0_EQ, 84 */
		/* 821E09F0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E0A44;  }
		/* 821E09F0h case    1:*/		return 0x821E09F4;
		  /* 821E09F4h */ case    2:  		/* lwz R11, <#[R31 + 4]> */
		/* 821E09F4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821E09F4h case    2:*/		return 0x821E09F8;
		  /* 821E09F8h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821E09F8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E09F8h case    3:*/		return 0x821E09FC;
		  /* 821E09FCh */ case    4:  		/* bc 12, CR6_EQ, 52 */
		/* 821E09FCh case    4:*/		if ( regs.CR[6].eq ) { return 0x821E0A30;  }
		/* 821E09FCh case    4:*/		return 0x821E0A00;
		  /* 821E0A00h */ case    5:  		/* lwz R10, <#[R11 + 16]> */
		/* 821E0A00h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821E0A00h case    5:*/		return 0x821E0A04;
		  /* 821E0A04h */ case    6:  		/* cmplwi CR6, R10, 0 */
		/* 821E0A04h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E0A04h case    6:*/		return 0x821E0A08;
		  /* 821E0A08h */ case    7:  		/* bc 12, CR6_EQ, 32 */
		/* 821E0A08h case    7:*/		if ( regs.CR[6].eq ) { return 0x821E0A28;  }
		/* 821E0A08h case    7:*/		return 0x821E0A0C;
		  /* 821E0A0Ch */ case    8:  		/* rlwinm R10, R10, 0, 0, 31 */
		/* 821E0A0Ch case    8:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R10);
		/* 821E0A0Ch case    8:*/		return 0x821E0A10;
		  /* 821E0A10h */ case    9:  		/* lwz R10, <#[R10 + 28]> */
		/* 821E0A10h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000001C) );
		/* 821E0A10h case    9:*/		return 0x821E0A14;
		  /* 821E0A14h */ case   10:  		/* lwzx R10, <#[R10 + R26]> */
		/* 821E0A14h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R26 + 0x00000000) );
		/* 821E0A14h case   10:*/		return 0x821E0A18;
	}
	return 0x821E0A18;
} // Block from 821E09ECh-821E0A18h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821E0A18h
// Function '?OptimizeLoops@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0A18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0A18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0A18);
		  /* 821E0A18h */ case    0:  		/* srw R10, R10, R27 */
		/* 821E0A18h case    0:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R10,regs.R27);
		/* 821E0A18h case    0:*/		return 0x821E0A1C;
		  /* 821E0A1Ch */ case    1:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821E0A1Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821E0A1Ch case    1:*/		return 0x821E0A20;
		  /* 821E0A20h */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 821E0A20h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821E0A28;  }
		/* 821E0A20h case    2:*/		return 0x821E0A24;
		  /* 821E0A24h */ case    3:  		/* li R25, 1 */
		/* 821E0A24h case    3:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 821E0A24h case    3:*/		return 0x821E0A28;
	}
	return 0x821E0A28;
} // Block from 821E0A18h-821E0A28h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E0A28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0A28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0A28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0A28);
		  /* 821E0A28h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821E0A28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821E0A28h case    0:*/		return 0x821E0A2C;
		  /* 821E0A2Ch */ case    1:  		/* b -52 */
		/* 821E0A2Ch case    1:*/		return 0x821E09F8;
		/* 821E0A2Ch case    1:*/		return 0x821E0A30;
	}
	return 0x821E0A30;
} // Block from 821E0A28h-821E0A30h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E0A30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0A30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0A30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0A30);
		  /* 821E0A30h */ case    0:  		/* mr R3, R31 */
		/* 821E0A30h case    0:*/		regs.R3 = regs.R31;
		/* 821E0A30h case    0:*/		return 0x821E0A34;
		  /* 821E0A34h */ case    1:  		/* bl -429044 */
		/* 821E0A34h case    1:*/		regs.LR = 0x821E0A38; return 0x82177E40;
		/* 821E0A34h case    1:*/		return 0x821E0A38;
		  /* 821E0A38h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821E0A38h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821E0A38h case    2:*/		return 0x821E0A3C;
		  /* 821E0A3Ch */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 821E0A3Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x821E0A44;  }
		/* 821E0A3Ch case    3:*/		return 0x821E0A40;
		  /* 821E0A40h */ case    4:  		/* li R25, 1 */
		/* 821E0A40h case    4:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 821E0A40h case    4:*/		return 0x821E0A44;
	}
	return 0x821E0A44;
} // Block from 821E0A30h-821E0A44h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E0A44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0A44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0A44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0A44);
		  /* 821E0A44h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821E0A44h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821E0A44h case    0:*/		return 0x821E0A48;
		  /* 821E0A48h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 821E0A48h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821E0A48h case    1:*/		return 0x821E0A4C;
		  /* 821E0A4Ch */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821E0A4Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821E0A4Ch case    2:*/		return 0x821E0A50;
		  /* 821E0A50h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821E0A50h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E0A5C;  }
		/* 821E0A50h case    3:*/		return 0x821E0A54;
		  /* 821E0A54h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821E0A54h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E0A54h case    4:*/		return 0x821E0A58;
		  /* 821E0A58h */ case    5:  		/* bc 4, CR6_EQ, -188 */
		/* 821E0A58h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821E099C;  }
		/* 821E0A58h case    5:*/		return 0x821E0A5C;
	}
	return 0x821E0A5C;
} // Block from 821E0A44h-821E0A5Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E0A5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0A5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0A5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0A5C);
		  /* 821E0A5Ch */ case    0:  		/* addi R10, R29, 32 */
		/* 821E0A5Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x20);
		/* 821E0A5Ch case    0:*/		return 0x821E0A60;
		  /* 821E0A60h */ case    1:  		/* cmplw CR6, R30, R10 */
		/* 821E0A60h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R10);
		/* 821E0A60h case    1:*/		return 0x821E0A64;
		  /* 821E0A64h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 821E0A64h case    2:*/		if ( regs.CR[6].eq ) { return 0x821E0AA4;  }
		/* 821E0A64h case    2:*/		return 0x821E0A68;
		  /* 821E0A68h */ case    3:  		/* addi R11, R29, 24 */
		/* 821E0A68h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x18);
		/* 821E0A68h case    3:*/		return 0x821E0A6C;
		  /* 821E0A6Ch */ case    4:  		/* cmplw CR6, R30, R11 */
		/* 821E0A6Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821E0A6Ch case    4:*/		return 0x821E0A70;
		  /* 821E0A70h */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 821E0A70h case    5:*/		if ( regs.CR[6].eq ) { return 0x821E0A8C;  }
		/* 821E0A70h case    5:*/		return 0x821E0A74;
		  /* 821E0A74h */ case    6:  		/* lwz R9, <#[R29 + 28]> */
		/* 821E0A74h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x0000001C) );
		/* 821E0A74h case    6:*/		return 0x821E0A78;
		  /* 821E0A78h */ case    7:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 821E0A78h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 821E0A78h case    7:*/		return 0x821E0A7C;
		  /* 821E0A7Ch */ case    8:  		/* bc 4, CR0_EQ, 16 */
		/* 821E0A7Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x821E0A8C;  }
		/* 821E0A7Ch case    8:*/		return 0x821E0A80;
		  /* 821E0A80h */ case    9:  		/* lwz R31, <#[R11 + 4]> */
		/* 821E0A80h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 821E0A80h case    9:*/		return 0x821E0A84;
		  /* 821E0A84h */ case   10:  		/* mr R30, R11 */
		/* 821E0A84h case   10:*/		regs.R30 = regs.R11;
		/* 821E0A84h case   10:*/		return 0x821E0A88;
		  /* 821E0A88h */ case   11:  		/* b 12 */
		/* 821E0A88h case   11:*/		return 0x821E0A94;
		/* 821E0A88h case   11:*/		return 0x821E0A8C;
	}
	return 0x821E0A8C;
} // Block from 821E0A5Ch-821E0A8Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821E0A8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0A8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0A8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0A8C);
		  /* 821E0A8Ch */ case    0:  		/* lwz R31, <#[R10 + 4]> */
		/* 821E0A8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000004) );
		/* 821E0A8Ch case    0:*/		return 0x821E0A90;
		  /* 821E0A90h */ case    1:  		/* mr R30, R10 */
		/* 821E0A90h case    1:*/		regs.R30 = regs.R10;
		/* 821E0A90h case    1:*/		return 0x821E0A94;
	}
	return 0x821E0A94;
} // Block from 821E0A8Ch-821E0A94h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E0A94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0A94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0A94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0A94);
		  /* 821E0A94h */ case    0:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821E0A94h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821E0A94h case    0:*/		return 0x821E0A98;
		  /* 821E0A98h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821E0A98h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E0AA4;  }
		/* 821E0A98h case    1:*/		return 0x821E0A9C;
	}
	return 0x821E0A9C;
} // Block from 821E0A94h-821E0A9Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E0A9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0A9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0A9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0A9C);
		  /* 821E0A9Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821E0A9Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821E0A9Ch case    0:*/		return 0x821E0AA0;
		  /* 821E0AA0h */ case    1:  		/* bc 4, CR6_EQ, -260 */
		/* 821E0AA0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E099C;  }
		/* 821E0AA0h case    1:*/		return 0x821E0AA4;
	}
	return 0x821E0AA4;
} // Block from 821E0A9Ch-821E0AA4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E0AA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0AA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0AA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0AA4);
		  /* 821E0AA4h */ case    0:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 821E0AA4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821E0AA4h case    0:*/		return 0x821E0AA8;
		  /* 821E0AA8h */ case    1:  		/* bc 12, CR0_EQ, 276 */
		/* 821E0AA8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821E0BBC;  }
		/* 821E0AA8h case    1:*/		return 0x821E0AAC;
		  /* 821E0AACh */ case    2:  		/* lwz R11, <#[R24]> */
		/* 821E0AACh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821E0AACh case    2:*/		return 0x821E0AB0;
		  /* 821E0AB0h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821E0AB0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E0AB0h case    3:*/		return 0x821E0AB4;
		  /* 821E0AB4h */ case    4:  		/* bc 4, CR6_EQ, 24 */
		/* 821E0AB4h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821E0ACC;  }
		/* 821E0AB4h case    4:*/		return 0x821E0AB8;
		  /* 821E0AB8h */ case    5:  		/* mr R4, R24 */
		/* 821E0AB8h case    5:*/		regs.R4 = regs.R24;
		/* 821E0AB8h case    5:*/		return 0x821E0ABC;
		  /* 821E0ABCh */ case    6:  		/* mr R3, R20 */
		/* 821E0ABCh case    6:*/		regs.R3 = regs.R20;
		/* 821E0ABCh case    6:*/		return 0x821E0AC0;
		  /* 821E0AC0h */ case    7:  		/* bl -105680 */
		/* 821E0AC0h case    7:*/		regs.LR = 0x821E0AC4; return 0x821C6DF0;
		/* 821E0AC0h case    7:*/		return 0x821E0AC4;
		  /* 821E0AC4h */ case    8:  		/* mr R3, R20 */
		/* 821E0AC4h case    8:*/		regs.R3 = regs.R20;
		/* 821E0AC4h case    8:*/		return 0x821E0AC8;
		  /* 821E0AC8h */ case    9:  		/* bl 43096 */
		/* 821E0AC8h case    9:*/		regs.LR = 0x821E0ACC; return 0x821EB320;
		/* 821E0AC8h case    9:*/		return 0x821E0ACC;
	}
	return 0x821E0ACC;
} // Block from 821E0AA4h-821E0ACCh (10 instructions)

//////////////////////////////////////////////////////
// Block at 821E0ACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0ACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0ACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0ACC);
		  /* 821E0ACCh */ case    0:  		/* lwz R11, <#[R29 + 20]> */
		/* 821E0ACCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 821E0ACCh case    0:*/		return 0x821E0AD0;
		  /* 821E0AD0h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E0AD0h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E0AD0h case    1:*/		return 0x821E0AD4;
		  /* 821E0AD4h */ case    2:  		/* bc 12, CR0_EQ, 40 */
		/* 821E0AD4h case    2:*/		if ( regs.CR[0].eq ) { return 0x821E0AFC;  }
		/* 821E0AD4h case    2:*/		return 0x821E0AD8;
		  /* 821E0AD8h */ case    3:  		/* lwz R11, <#[R29 + 28]> */
		/* 821E0AD8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821E0AD8h case    3:*/		return 0x821E0ADC;
		  /* 821E0ADCh */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E0ADCh case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E0ADCh case    4:*/		return 0x821E0AE0;
		  /* 821E0AE0h */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 821E0AE0h case    5:*/		if ( regs.CR[0].eq ) { return 0x821E0AF0;  }
		/* 821E0AE0h case    5:*/		return 0x821E0AE4;
		  /* 821E0AE4h */ case    6:  		/* lwz R11, <#[R29 + 36]> */
		/* 821E0AE4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 821E0AE4h case    6:*/		return 0x821E0AE8;
		  /* 821E0AE8h */ case    7:  		/* addi R9, R29, 32 */
		/* 821E0AE8h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R29,0x20);
		/* 821E0AE8h case    7:*/		return 0x821E0AEC;
		  /* 821E0AECh */ case    8:  		/* b 24 */
		/* 821E0AECh case    8:*/		return 0x821E0B04;
		/* 821E0AECh case    8:*/		return 0x821E0AF0;
	}
	return 0x821E0AF0;
} // Block from 821E0ACCh-821E0AF0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821E0AF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0AF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0AF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0AF0);
		  /* 821E0AF0h */ case    0:  		/* lwz R11, <#[R29 + 28]> */
		/* 821E0AF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821E0AF0h case    0:*/		return 0x821E0AF4;
		  /* 821E0AF4h */ case    1:  		/* addi R9, R29, 24 */
		/* 821E0AF4h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R29,0x18);
		/* 821E0AF4h case    1:*/		return 0x821E0AF8;
		  /* 821E0AF8h */ case    2:  		/* b 12 */
		/* 821E0AF8h case    2:*/		return 0x821E0B04;
		/* 821E0AF8h case    2:*/		return 0x821E0AFC;
	}
	return 0x821E0AFC;
} // Block from 821E0AF0h-821E0AFCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821E0AFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0AFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0AFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0AFC);
		  /* 821E0AFCh */ case    0:  		/* lwz R11, <#[R29 + 20]> */
		/* 821E0AFCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 821E0AFCh case    0:*/		return 0x821E0B00;
		  /* 821E0B00h */ case    1:  		/* addi R9, R29, 16 */
		/* 821E0B00h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R29,0x10);
		/* 821E0B00h case    1:*/		return 0x821E0B04;
	}
	return 0x821E0B04;
} // Block from 821E0AFCh-821E0B04h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E0B04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0B04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0B04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0B04);
		  /* 821E0B04h */ case    0:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821E0B04h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E0B04h case    0:*/		return 0x821E0B08;
		  /* 821E0B08h */ case    1:  		/* addic R10, R10, -1 */
		/* 821E0B08h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821E0B08h case    1:*/		return 0x821E0B0C;
		  /* 821E0B0Ch */ case    2:  		/* subfe R10, R10, R10 */
		/* 821E0B0Ch case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821E0B0Ch case    2:*/		return 0x821E0B10;
		  /* 821E0B10h */ case    3:  		/* and R11, R10, R11 */
		/* 821E0B10h case    3:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821E0B10h case    3:*/		return 0x821E0B14;
		  /* 821E0B14h */ case    4:  		/* b 160 */
		/* 821E0B14h case    4:*/		return 0x821E0BB4;
		/* 821E0B14h case    4:*/		return 0x821E0B18;
		  /* 821E0B18h */ case    5:  		/* lwz R8, <#[R11 + 8]> */
		/* 821E0B18h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821E0B18h case    5:*/		return 0x821E0B1C;
		  /* 821E0B1Ch */ case    6:  		/* rlwinm. R10, R8, 6, 31, 31 */
		/* 821E0B1Ch case    6:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R10,regs.R8);
		/* 821E0B1Ch case    6:*/		return 0x821E0B20;
		  /* 821E0B20h */ case    7:  		/* bc 12, CR0_EQ, 60 */
		/* 821E0B20h case    7:*/		if ( regs.CR[0].eq ) { return 0x821E0B5C;  }
		/* 821E0B20h case    7:*/		return 0x821E0B24;
		  /* 821E0B24h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 821E0B24h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821E0B24h case    8:*/		return 0x821E0B28;
		  /* 821E0B28h */ case    9:  		/* cmplwi CR6, R10, 0 */
		/* 821E0B28h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821E0B28h case    9:*/		return 0x821E0B2C;
		  /* 821E0B2Ch */ case   10:  		/* bc 12, CR6_EQ, 40 */
		/* 821E0B2Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x821E0B54;  }
		/* 821E0B2Ch case   10:*/		return 0x821E0B30;
		  /* 821E0B30h */ case   11:  		/* lwz R7, <#[R10 + 16]> */
		/* 821E0B30h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000010) );
		/* 821E0B30h case   11:*/		return 0x821E0B34;
		  /* 821E0B34h */ case   12:  		/* cmplwi CR6, R7, 0 */
		/* 821E0B34h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 821E0B34h case   12:*/		return 0x821E0B38;
		  /* 821E0B38h */ case   13:  		/* bc 12, CR6_EQ, 20 */
		/* 821E0B38h case   13:*/		if ( regs.CR[6].eq ) { return 0x821E0B4C;  }
		/* 821E0B38h case   13:*/		return 0x821E0B3C;
		  /* 821E0B3Ch */ case   14:  		/* rlwinm R7, R7, 0, 0, 31 */
		/* 821E0B3Ch case   14:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R7);
		/* 821E0B3Ch case   14:*/		return 0x821E0B40;
		  /* 821E0B40h */ case   15:  		/* lwz R7, <#[R7 + 8]> */
		/* 821E0B40h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x00000008) );
		/* 821E0B40h case   15:*/		return 0x821E0B44;
		  /* 821E0B44h */ case   16:  		/* rlwinm. R7, R7, 6, 31, 31 */
		/* 821E0B44h case   16:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R7,regs.R7);
		/* 821E0B44h case   16:*/		return 0x821E0B48;
		  /* 821E0B48h */ case   17:  		/* bc 12, CR0_EQ, 12 */
		/* 821E0B48h case   17:*/		if ( regs.CR[0].eq ) { return 0x821E0B54;  }
		/* 821E0B48h case   17:*/		return 0x821E0B4C;
	}
	return 0x821E0B4C;
} // Block from 821E0B04h-821E0B4Ch (18 instructions)

//////////////////////////////////////////////////////
// Block at 821E0B4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0B4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0B4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0B4C);
		  /* 821E0B4Ch */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821E0B4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821E0B4Ch case    0:*/		return 0x821E0B50;
		  /* 821E0B50h */ case    1:  		/* b -40 */
		/* 821E0B50h case    1:*/		return 0x821E0B28;
		/* 821E0B50h case    1:*/		return 0x821E0B54;
	}
	return 0x821E0B54;
} // Block from 821E0B4Ch-821E0B54h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E0B54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0B54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0B54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0B54);
		  /* 821E0B54h */ case    0:  		/* rlwinm R10, R8, 0, 6, 4 */
		/* 821E0B54h case    0:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R10,regs.R8);
		/* 821E0B54h case    0:*/		return 0x821E0B58;
		  /* 821E0B58h */ case    1:  		/* stw R10, <#[R11 + 8]> */
		/* 821E0B58h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821E0B58h case    1:*/		return 0x821E0B5C;
	}
	return 0x821E0B5C;
} // Block from 821E0B54h-821E0B5Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E0B5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0B5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0B5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0B5C);
		  /* 821E0B5Ch */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821E0B5Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821E0B5Ch case    0:*/		return 0x821E0B60;
		  /* 821E0B60h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821E0B60h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821E0B60h case    1:*/		return 0x821E0B64;
		  /* 821E0B64h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E0B64h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E0B64h case    2:*/		return 0x821E0B68;
		  /* 821E0B68h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821E0B68h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E0B74;  }
		/* 821E0B68h case    3:*/		return 0x821E0B6C;
		  /* 821E0B6Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821E0B6Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E0B6Ch case    4:*/		return 0x821E0B70;
		  /* 821E0B70h */ case    5:  		/* bc 4, CR6_EQ, -88 */
		/* 821E0B70h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821E0B18;  }
		/* 821E0B70h case    5:*/		return 0x821E0B74;
	}
	return 0x821E0B74;
} // Block from 821E0B5Ch-821E0B74h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821E0B74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0B74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0B74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0B74);
		  /* 821E0B74h */ case    0:  		/* addi R8, R29, 32 */
		/* 821E0B74h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R29,0x20);
		/* 821E0B74h case    0:*/		return 0x821E0B78;
		  /* 821E0B78h */ case    1:  		/* cmplw CR6, R9, R8 */
		/* 821E0B78h case    1:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 821E0B78h case    1:*/		return 0x821E0B7C;
		  /* 821E0B7Ch */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 821E0B7Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821E0BBC;  }
		/* 821E0B7Ch case    2:*/		return 0x821E0B80;
		  /* 821E0B80h */ case    3:  		/* addi R10, R29, 24 */
		/* 821E0B80h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x18);
		/* 821E0B80h case    3:*/		return 0x821E0B84;
		  /* 821E0B84h */ case    4:  		/* cmplw CR6, R9, R10 */
		/* 821E0B84h case    4:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821E0B84h case    4:*/		return 0x821E0B88;
		  /* 821E0B88h */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 821E0B88h case    5:*/		if ( regs.CR[6].eq ) { return 0x821E0BA4;  }
		/* 821E0B88h case    5:*/		return 0x821E0B8C;
		  /* 821E0B8Ch */ case    6:  		/* lwz R11, <#[R29 + 28]> */
		/* 821E0B8Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821E0B8Ch case    6:*/		return 0x821E0B90;
		  /* 821E0B90h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821E0B90h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821E0B90h case    7:*/		return 0x821E0B94;
		  /* 821E0B94h */ case    8:  		/* bc 4, CR0_EQ, 16 */
		/* 821E0B94h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821E0BA4;  }
		/* 821E0B94h case    8:*/		return 0x821E0B98;
		  /* 821E0B98h */ case    9:  		/* lwz R11, <#[R10 + 4]> */
		/* 821E0B98h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821E0B98h case    9:*/		return 0x821E0B9C;
		  /* 821E0B9Ch */ case   10:  		/* mr R9, R10 */
		/* 821E0B9Ch case   10:*/		regs.R9 = regs.R10;
		/* 821E0B9Ch case   10:*/		return 0x821E0BA0;
		  /* 821E0BA0h */ case   11:  		/* b 12 */
		/* 821E0BA0h case   11:*/		return 0x821E0BAC;
		/* 821E0BA0h case   11:*/		return 0x821E0BA4;
	}
	return 0x821E0BA4;
} // Block from 821E0B74h-821E0BA4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821E0BA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0BA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0BA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0BA4);
		  /* 821E0BA4h */ case    0:  		/* lwz R11, <#[R8 + 4]> */
		/* 821E0BA4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 821E0BA4h case    0:*/		return 0x821E0BA8;
		  /* 821E0BA8h */ case    1:  		/* mr R9, R8 */
		/* 821E0BA8h case    1:*/		regs.R9 = regs.R8;
		/* 821E0BA8h case    1:*/		return 0x821E0BAC;
	}
	return 0x821E0BAC;
} // Block from 821E0BA4h-821E0BACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E0BACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0BAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0BAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0BAC);
		  /* 821E0BACh */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E0BACh case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E0BACh case    0:*/		return 0x821E0BB0;
		  /* 821E0BB0h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 821E0BB0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E0BBC;  }
		/* 821E0BB0h case    1:*/		return 0x821E0BB4;
	}
	return 0x821E0BB4;
} // Block from 821E0BACh-821E0BB4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E0BB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0BB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0BB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0BB4);
		  /* 821E0BB4h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821E0BB4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E0BB4h case    0:*/		return 0x821E0BB8;
		  /* 821E0BB8h */ case    1:  		/* bc 4, CR6_EQ, -160 */
		/* 821E0BB8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821E0B18;  }
		/* 821E0BB8h case    1:*/		return 0x821E0BBC;
	}
	return 0x821E0BBC;
} // Block from 821E0BB4h-821E0BBCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821E0BBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0BBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0BBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0BBC);
		  /* 821E0BBCh */ case    0:  		/* addi R3, R1, 264 */
		/* 821E0BBCh case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x108);
		/* 821E0BBCh case    0:*/		return 0x821E0BC0;
		  /* 821E0BC0h */ case    1:  		/* bl -143392 */
		/* 821E0BC0h case    1:*/		regs.LR = 0x821E0BC4; return 0x821BDBA0;
		/* 821E0BC0h case    1:*/		return 0x821E0BC4;
		  /* 821E0BC4h */ case    2:  		/* or. R29, R3, R3 */
		/* 821E0BC4h case    2:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 821E0BC4h case    2:*/		return 0x821E0BC8;
		  /* 821E0BC8h */ case    3:  		/* bc 4, CR0_EQ, -948 */
		/* 821E0BC8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E0814;  }
		/* 821E0BC8h case    3:*/		return 0x821E0BCC;
	}
	return 0x821E0BCC;
} // Block from 821E0BBCh-821E0BCCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821E0BCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0BCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0BCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0BCC);
		  /* 821E0BCCh */ case    0:  		/* rlwinm. R11, R25, 0, 24, 31 */
		/* 821E0BCCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R25);
		/* 821E0BCCh case    0:*/		return 0x821E0BD0;
		  /* 821E0BD0h */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 821E0BD0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821E0BE0;  }
		/* 821E0BD0h case    1:*/		return 0x821E0BD4;
		  /* 821E0BD4h */ case    2:  		/* lwz R11, <#[R24 + 36]> */
		/* 821E0BD4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000024) );
		/* 821E0BD4h case    2:*/		return 0x821E0BD8;
		  /* 821E0BD8h */ case    3:  		/* oris R11, R11, 4096 */
		/* 821E0BD8h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x1000);
		/* 821E0BD8h case    3:*/		return 0x821E0BDC;
		  /* 821E0BDCh */ case    4:  		/* stw R11, <#[R24 + 36]> */
		/* 821E0BDCh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000024) );
		/* 821E0BDCh case    4:*/		return 0x821E0BE0;
	}
	return 0x821E0BE0;
} // Block from 821E0BCCh-821E0BE0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821E0BE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0BE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0BE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0BE0);
		  /* 821E0BE0h */ case    0:  		/* addi R24, R24, 68 */
		/* 821E0BE0h case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x44);
		/* 821E0BE0h case    0:*/		return 0x821E0BE4;
	}
	return 0x821E0BE4;
} // Block from 821E0BE0h-821E0BE4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821E0BE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821E0BE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821E0BE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821E0BE4);
		  /* 821E0BE4h */ case    0:  		/* rlwinm R11, R23, 0, 0, 30 */
		/* 821E0BE4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R23);
		/* 821E0BE4h case    0:*/		return 0x821E0BE8;
		  /* 821E0BE8h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821E0BE8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821E0BE8h case    1:*/		return 0x821E0BEC;
		  /* 821E0BECh */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821E0BECh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821E0BECh case    2:*/		return 0x821E0BF0;
		  /* 821E0BF0h */ case    3:  		/* bc 4, CR0_EQ, 36 */
		/* 821E0BF0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821E0C14;  }
		/* 821E0BF0h case    3:*/		return 0x821E0BF4;
		  /* 821E0BF4h */ case    4:  		/* mr R23, R11 */
		/* 821E0BF4h case    4:*/		regs.R23 = regs.R11;
		/* 821E0BF4h case    4:*/		return 0x821E0BF8;
		  /* 821E0BF8h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821E0BF8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821E0BF8h case    5:*/		return 0x821E0BFC;
		  /* 821E0BFCh */ case    6:  		/* bc 4, CR6_EQ, -2904 */
		/* 821E0BFCh case    6:*/		if ( !regs.CR[6].eq ) { return 0x821E00A4;  }
		/* 821E0BFCh case    6:*/		return 0x821E0C00;
		  /* 821E0C00h */ case    7:  		/* b 20 */
		/* 821E0C00h case    7:*/		return 0x821E0C14;
		/* 821E0C00h case    7:*/		return 0x821E0C04;
	}
	return 0x821E0C04;
} // Block from 821E0BE4h-821E0C04h (8 instructions)

